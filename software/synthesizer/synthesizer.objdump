
synthesizer.elf:     file format elf32-littlenios2
synthesizer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000270e4 memsz 0x000270e4 flags r-x
    LOAD off    0x00028104 vaddr 0x04027104 paddr 0x0402a2e0 align 2**12
         filesz 0x000031dc memsz 0x000031dc flags rw-
    LOAD off    0x0002b4bc vaddr 0x0402d4bc paddr 0x0402d4bc align 2**12
         filesz 0x00000000 memsz 0x0000025c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001fcd8  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000071fc  0401ff08  0401ff08  00020f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031dc  04027104  0402a2e0  00028104  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000025c  0402d4bc  0402d4bc  0002b4bc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0402d718  0402d718  0002b2e0  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08001280  08001280  0002b2e0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0002b2e0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000019f0  00000000  00000000  0002b308  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00050027  00000000  00000000  0002ccf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00010447  00000000  00000000  0007cd1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013c1a  00000000  00000000  0008d166  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000576c  00000000  00000000  000a0d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000fc55  00000000  00000000  000a64ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001eafd  00000000  00000000  000b6141  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000070  00000000  00000000  000d4c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000029d8  00000000  00000000  000d4cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000efdf2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000efdf5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000efe01  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000efe02  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000efe03  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000efe07  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000efe0b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000efe0f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000efe1a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000efe25  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  000efe30  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000020  00000000  00000000  000efe3f  2**0
                  CONTENTS, READONLY
 30 .jdi          000057d2  00000000  00000000  000efe5f  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000a5861  00000000  00000000  000f5631  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
0401ff08 l    d  .rodata	00000000 .rodata
04027104 l    d  .rwdata	00000000 .rwdata
0402d4bc l    d  .bss	00000000 .bss
0402d718 l    d  .sdram	00000000 .sdram
08001280 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../synthesizer_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
04028be8 l     O .rwdata	00000001 _ZL9SPI_MODE0
04028be9 l     O .rwdata	00000001 _ZL9SPI_MODE1
04028bea l     O .rwdata	00000001 _ZL9SPI_MODE2
04028beb l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
04028bec l     O .rwdata	00000001 _ZL9SPI_MODE0
04028bed l     O .rwdata	00000001 _ZL9SPI_MODE1
04028bee l     O .rwdata	00000001 _ZL9SPI_MODE2
04028bef l     O .rwdata	00000001 _ZL9SPI_MODE3
0402d4bc l     O .bss	00000001 _ZL9usb_error
0402d4bd l     O .bss	00000001 _ZL14usb_task_state
0402d4c0 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
04028bf8 l     O .rwdata	00000001 _ZL9SPI_MODE0
04028bf9 l     O .rwdata	00000001 _ZL9SPI_MODE1
04028bfa l     O .rwdata	00000001 _ZL9SPI_MODE2
04028bfb l     O .rwdata	00000001 _ZL9SPI_MODE3
04028bfc l     O .rwdata	00000006 _ZL9XBOX_LEDS
040201f6 l     O .rodata	00000024 _ZL12XBOX_BUTTONS
04004454 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 hidboot.cpp
04028c1c l     O .rwdata	00000001 _ZL9SPI_MODE0
04028c1d l     O .rwdata	00000001 _ZL9SPI_MODE1
04028c1e l     O .rwdata	00000001 _ZL9SPI_MODE2
04028c1f l     O .rwdata	00000001 _ZL9SPI_MODE3
04028c20 l     O .rwdata	00000002 _ZL9pstrSpace
04028c24 l     O .rwdata	00000003 _ZL8pstrCRLF
04028c28 l     O .rwdata	00000002 _ZL13pstrSingleTab
04028c2c l     O .rwdata	00000003 _ZL13pstrDoubleTab
04028c30 l     O .rwdata	00000004 _ZL13pstrTripleTab
04028c34 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
04020344 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
04020358 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
04020364 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
04020370 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
0402037c l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
04020388 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
04020398 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
04028c3c l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
04028c44 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
04028c4c l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
04028c54 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
040203a4 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
040203b0 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
04028c58 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
04028c5c l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
040203bc l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
040203cc l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
04028c64 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
04028c6c l     O .rwdata	00000006 _ZL18pstrUsagePagePower
040203dc l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
04028c74 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
040203ec l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
04028c7c l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
04020404 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
04028c80 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
04020410 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
0402041c l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
04028c88 l     O .rwdata	00000008 _ZL16pstrUsagePointer
04028c90 l     O .rwdata	00000006 _ZL14pstrUsageMouse
04020428 l     O .rodata	00000009 _ZL17pstrUsageJoystick
04020434 l     O .rodata	00000009 _ZL16pstrUsageGamePad
04028c98 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
04028ca0 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
04020440 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
04020450 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
04028ca8 l     O .rwdata	00000002 _ZL10pstrUsageX
04028cac l     O .rwdata	00000002 _ZL10pstrUsageY
04028cb0 l     O .rwdata	00000002 _ZL10pstrUsageZ
04028cb4 l     O .rwdata	00000003 _ZL11pstrUsageRx
04028cb8 l     O .rwdata	00000003 _ZL11pstrUsageRy
04028cbc l     O .rwdata	00000003 _ZL11pstrUsageRz
04028cc0 l     O .rwdata	00000007 _ZL15pstrUsageSlider
04028cc8 l     O .rwdata	00000005 _ZL13pstrUsageDial
04028cd0 l     O .rwdata	00000006 _ZL14pstrUsageWheel
04020464 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
04020470 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
0402047c l     O .rodata	0000000b _ZL18pstrUsageByteCount
04020488 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
04028cd8 l     O .rwdata	00000006 _ZL14pstrUsageStart
04028ce0 l     O .rwdata	00000004 _ZL15pstrUsageSelect
04028ce4 l     O .rwdata	00000003 _ZL11pstrUsageVx
04028ce8 l     O .rwdata	00000003 _ZL11pstrUsageVy
04028cec l     O .rwdata	00000003 _ZL11pstrUsageVz
04028cf0 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
04028cf8 l     O .rwdata	00000005 _ZL13pstrUsageVbry
04028d00 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
04028d08 l     O .rwdata	00000004 _ZL12pstrUsageVno
04020498 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
040204a8 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
040204b4 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
040204c0 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
040204d0 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
040204dc l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
040204e8 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
040204fc l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
0402050c l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
0402051c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
0402052c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
0402053c l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
0402054c l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
0402055c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
0402056c l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
04020578 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
04020588 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
0402059c l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
040205b0 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
040205bc l     O .rodata	0000000b _ZL17pstrUsageDPadDown
040205c8 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
040205d4 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
040205e0 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
040205ec l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
040205f8 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
04020604 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
04020610 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
0402061c l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
04020628 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
04020634 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
04020644 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
04020650 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
04020660 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
04020670 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
04020680 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
04020690 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
040206a0 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
040206b8 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
040206d0 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
040206e8 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
040206f8 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
04020708 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
04020718 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
04020728 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
04020738 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
04020748 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
04020758 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
04020768 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
04020778 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
04020788 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
040207a0 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
040207b0 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
040207c4 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
040207d4 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
040207e0 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
040207ec l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
040207f8 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
04028d0c l     O .rwdata	00000008 _ZL16pstrUsageAileron
04020804 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
04020814 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
04020828 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
0402083c l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
0402084c l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
0402085c l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
04020868 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
0402087c l     O .rodata	00000009 _ZL17pstrUsageElevator
04020888 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
04028d14 l     O .rwdata	00000007 _ZL15pstrUsageRudder
04020898 l     O .rodata	00000009 _ZL17pstrUsageThrottle
040208a4 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
040208b0 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
040208c0 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
040208d0 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
04028d1c l     O .rwdata	00000008 _ZL16pstrUsageTrigger
040208dc l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
040208e8 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
040208f4 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
04028d24 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
04028d2c l     O .rwdata	00000006 _ZL14pstrUsageBrake
04028d34 l     O .rwdata	00000007 _ZL15pstrUsageClutch
04028d3c l     O .rwdata	00000008 _ZL16pstrUsageShifter
04020900 l     O .rodata	00000009 _ZL17pstrUsageSteering
0402090c l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
04020918 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
04020924 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
04028d44 l     O .rwdata	00000008 _ZL16pstrUsageBallast
04020930 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
04020940 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
0402094c l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
04020958 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
04028d4c l     O .rwdata	00000005 _ZL13pstrUsageBelt
04020964 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
04028d54 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
04028d5c l     O .rwdata	00000006 _ZL14pstrUsageGlove
04020970 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
0402097c l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
04020988 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
04020994 l     O .rodata	0000000b _ZL19pstrUsageOculometer
04028d64 l     O .rwdata	00000005 _ZL13pstrUsageVest
040209a0 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
040209ac l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
040209b8 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
040209c8 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
040209d8 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
040209e4 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
040209f0 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
04028d6c l     O .rwdata	00000004 _ZL12pstrUsageOar
04028d70 l     O .rwdata	00000006 _ZL14pstrUsageSlope
04028d78 l     O .rwdata	00000005 _ZL13pstrUsageRate
040209fc l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
04020a08 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
04020a18 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
04020a28 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
04020a38 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
04020a44 l     O .rodata	0000000b _ZL18pstrUsageStickType
04020a50 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
04028d80 l     O .rwdata	00000007 _ZL15pstrUsagePutter
04028d88 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
04028d90 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
04028d98 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
04028da0 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
04028da8 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
04028db0 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
04028db8 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
04028dc0 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
04028dc8 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
04028dd0 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
04028dd8 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
04020a5c l     O .rodata	0000000b _ZL18pstrUsageSandWedge
04020a68 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
04020a74 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
04028de0 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
04028de8 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
04028df0 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
04028df8 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
04028e00 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
04020a80 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
04020a90 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
04028e08 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
04028e10 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
04020a9c l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
04020aac l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
04020abc l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
04020acc l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
04020adc l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
04020aec l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
04020afc l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
04020b0c l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
04020b1c l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
04028e14 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
04020b2c l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
04028e1c l     O .rwdata	00000005 _ZL13pstrUsageBump
04020b3c l     O .rodata	00000009 _ZL16pstrUsageNewGame
04020b48 l     O .rodata	0000000b _ZL18pstrUsageShootBall
04028e24 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
04020b54 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
04020b60 l     O .rodata	00000009 _ZL16pstrUsageGunClip
04028e2c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
04020b6c l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
04020b7c l     O .rodata	0000000a _ZL17pstrUsageGunBurst
04020b88 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
04020b94 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
04020ba0 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
04020bb4 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
04020bc4 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
04020bd4 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
04020be0 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
04020bec l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
04020c04 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
04020c18 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
04020c30 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
04020c44 l     O .rodata	00000009 _ZL16pstrUsageNumLock
04020c50 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
04020c5c l     O .rodata	0000000c _ZL19pstrUsageScrollLock
04028e34 l     O .rwdata	00000008 _ZL16pstrUsageCompose
04028e3c l     O .rwdata	00000005 _ZL13pstrUsageKana
04028e44 l     O .rwdata	00000004 _ZL14pstrUsagePower
04028e48 l     O .rwdata	00000006 _ZL14pstrUsageShift
04028e50 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
04028e54 l     O .rwdata	00000005 _ZL13pstrUsageMute
04020c68 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
04020c74 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
04020c84 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
04028e5c l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
04020c94 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
04020ca4 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
04028e64 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
04028e6c l     O .rwdata	00000007 _ZL15pstrUsageStereo
04020cb0 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
04020cc4 l     O .rodata	00000009 _ZL17pstrUsageSpinning
04028e74 l     O .rwdata	00000004 _ZL12pstrUsageCAV
04028e78 l     O .rwdata	00000004 _ZL12pstrUsageCLV
04020cd0 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
04020ce4 l     O .rodata	00000009 _ZL16pstrUsageOffHook
04028e7c l     O .rwdata	00000005 _ZL13pstrUsageRing
04020cf0 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
04020cfc l     O .rodata	0000000a _ZL17pstrUsageDataMode
04028e84 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
04028e8c l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
04028e94 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
04028e9c l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
04020d08 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
04028ea4 l     O .rwdata	00000005 _ZL13pstrUsageHold
04028eac l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
04020d14 l     O .rodata	00000009 _ZL17pstrUsageCoverage
04020d20 l     O .rodata	0000000b _ZL18pstrUsageNightMode
04020d2c l     O .rodata	0000000b _ZL18pstrUsageSendCalls
04020d38 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
04028eb0 l     O .rwdata	00000005 _ZL19pstrUsageConference
04020d44 l     O .rodata	00000009 _ZL16pstrUsageStandBy
04028eb8 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
04028ec0 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
04028ec8 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
04020d50 l     O .rodata	00000009 _ZL16pstrUsageOffLine
04028ed0 l     O .rwdata	00000005 _ZL13pstrUsageBusy
04028ed8 l     O .rwdata	00000006 _ZL14pstrUsageReady
04020d5c l     O .rodata	0000000a _ZL17pstrUsagePaperOut
04020d68 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
04028ee0 l     O .rwdata	00000007 _ZL15pstrUsageRemote
04028ee8 l     O .rwdata	00000004 _ZL16pstrUsageForward
04028eec l     O .rwdata	00000004 _ZL16pstrUsageReverse
04028ef0 l     O .rwdata	00000005 _ZL13pstrUsageStop
04028ef8 l     O .rwdata	00000007 _ZL15pstrUsageRewind
04020d74 l     O .rodata	00000009 _ZL20pstrUsageFastForward
04028f00 l     O .rwdata	00000005 _ZL13pstrUsagePlay
04028f08 l     O .rwdata	00000006 _ZL14pstrUsagePause
04028f10 l     O .rwdata	00000004 _ZL15pstrUsageRecord
04028f14 l     O .rwdata	00000006 _ZL14pstrUsageError
04020d80 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
04020d90 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
04020da4 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
04028f1c l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
04020dbc l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
04020dc8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
04020dd8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
04028f24 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
04020de8 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
04020df8 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
04020e0c l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
04020e20 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
04020e34 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
04020e48 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
04028f2c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
04020e58 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
04020e64 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
04028f34 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
04020e70 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
04020e7c l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
04028f3c l     O .rwdata	00000006 _ZL14pstrUsagePhone
04020e8c l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
04020e98 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
04028f44 l     O .rwdata	00000008 _ZL16pstrUsageHandset
04028f4c l     O .rwdata	00000008 _ZL16pstrUsageHeadset
04020ea4 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
04020eb0 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
04028f54 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
04028f5c l     O .rwdata	00000006 _ZL14pstrUsageFlash
04028f64 l     O .rwdata	00000008 _ZL16pstrUsageFeature
04028f6c l     O .rwdata	00000007 _ZL15pstrUsageRedial
04020ebc l     O .rodata	00000009 _ZL17pstrUsageTransfer
04028f74 l     O .rwdata	00000005 _ZL13pstrUsageDrop
04028f7c l     O .rwdata	00000005 _ZL13pstrUsagePark
04020ec8 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
04020ed4 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
04028f84 l     O .rwdata	00000005 _ZL13pstrUsageLine
04020ee0 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
04020eec l     O .rodata	0000000a _ZL19pstrUsageRingEnable
04020ef8 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
04020f04 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
04020f10 l     O .rodata	0000000a _ZL17pstrUsageCallerID
04028f8c l     O .rwdata	00000005 _ZL13pstrUsageSend
04020f1c l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
04020f28 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
04020f34 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
04020f40 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
04020f4c l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
04020f58 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
04028f94 l     O .rwdata	00000004 _ZL16pstrUsageMessage
04020f68 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
04020f78 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
04020f8c l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
04020fa0 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
04020fb4 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
04020fc8 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
04020fd8 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
04020fe8 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
04020ffc l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
0402100c l     O .rodata	0000000d _ZL20pstrUsageReorderTone
0402101c l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
0402102c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
04021038 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
04021044 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
04021050 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
04028f98 l     O .rwdata	00000007 _ZL15pstrUsageRinger
04028fa0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
04028fa4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
04028fa8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
04028fac l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
04028fb0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
04028fb4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
04028fb8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
04028fbc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
04028fc0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
04028fc4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
04028fc8 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
04028fcc l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
04028fd0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
04028fd4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
04028fd8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
04028fdc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
04021064 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
04021074 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
04021080 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
0402108c l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
04028fe0 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
04028fe4 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
04028fec l     O .rwdata	00000006 _ZL13pstrUsageAMPM
04028ff4 l     O .rwdata	00000006 _ZL14pstrUsageReset
04028ffc l     O .rwdata	00000006 _ZL14pstrUsageSleep
04021098 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
040210a4 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
04029004 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
040210b0 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0402900c l     O .rwdata	00000005 _ZL13pstrUsageMenu
040210bc l     O .rodata	0000000a _ZL17pstrUsageMenuPick
04029014 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
040210c8 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
040210d4 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
040210e0 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
040210ec l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
040210f8 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
04021108 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
04021118 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
04021124 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
04021130 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0402901c l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
04021140 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
04021150 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
04029024 l     O .rwdata	00000006 _ZL14pstrUsageStill
0402902c l     O .rwdata	00000004 _ZL18pstrUsageSelection
0402115c l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
04021168 l     O .rodata	0000000a _ZL17pstrUsageModeStep
04021174 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
04021180 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
04021190 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
04029030 l     O .rwdata	00000008 _ZL16pstrUsageChannel
04029038 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
0402119c l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
040211ac l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
040211b8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
040211c4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
040211d0 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
040211dc l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
040211e8 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
040211f4 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
04021204 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
04021210 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
0402121c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
04021228 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
04029040 l     O .rwdata	00000005 _ZL13pstrUsageQuit
04029048 l     O .rwdata	00000005 _ZL13pstrUsageHelp
04021238 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
04021248 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
04021254 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
04021260 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
04021270 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
04021280 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
04029050 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
04029058 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
04021290 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
04029060 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
04029068 l     O .rwdata	00000005 _ZL13pstrUsageOnce
04029070 l     O .rwdata	00000006 _ZL14pstrUsageDaily
04029078 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
04029080 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
0402129c l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
040212a8 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
04029088 l     O .rwdata	00000006 _ZL14pstrUsageEject
04029090 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
040212b4 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
040212c0 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
040212cc l     O .rodata	00000009 _ZL17pstrUsageTracking
040212d8 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
040212e4 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
04029098 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
040212f0 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
040290a0 l     O .rwdata	00000005 _ZL13pstrUsageMark
040212fc l     O .rodata	00000009 _ZL18pstrUsageClearMark
04021308 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
04021314 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
04021320 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
04021330 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
04021344 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
04021354 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
04021364 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
04021370 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
0402137c l     O .rodata	0000000b _ZL18pstrUsageStopEject
04021388 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
04021394 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
040290a8 l     O .rwdata	00000004 _ZL15pstrUsageVolume
040290ac l     O .rwdata	00000008 _ZL16pstrUsageBalance
040290b4 l     O .rwdata	00000005 _ZL13pstrUsageBass
040290bc l     O .rwdata	00000007 _ZL15pstrUsageTreble
040213a0 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
040213ac l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
040290c4 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
040290cc l     O .rwdata	00000004 _ZL12pstrUsageMPX
040290d0 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
040290d8 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
040290e0 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
040213b8 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
040213c4 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
040213d0 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
040213dc l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
040290e8 l     O .rwdata	00000005 _ZL13pstrUsageSlow
040213e8 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
040213f4 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
04021400 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
0402140c l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
0402141c l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
0402142c l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
04021438 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
04021444 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
04021450 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
040290f0 l     O .rwdata	00000005 _ZL18pstrUsageProximity
040290f8 l     O .rwdata	00000007 _ZL15pstrUsageMotion
0402145c l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
04021468 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
04029100 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
04021474 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
04021484 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
04021494 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
040214a0 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
040214ac l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
040214b8 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
04029108 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
04029110 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
040214c4 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
040214d0 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
040214dc l     O .rodata	00000009 _ZL21pstrUsageChannelFront
040214e8 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
04029118 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
040214f8 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
04021504 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
04029120 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
04029128 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
04029130 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
04021514 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
04021520 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0402152c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
04021538 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
04021544 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
04021554 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
04021568 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
04021574 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
04021588 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
04021598 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
040215a4 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
040215b4 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
040215c4 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
040215d4 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
040215e0 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
040215f0 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
040215fc l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
0402160c l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0402161c l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0402162c l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0402163c l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
04021650 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
04029138 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
04021660 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
04021674 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
04021688 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
04021698 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
040216a8 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
040216b8 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
040216c4 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
040216d0 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
040216dc l     O .rodata	00000009 _ZL16pstrUsageALLogon
040216e8 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
040216f4 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
04021704 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0402171c l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
04021728 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
04021734 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
04021740 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0402174c l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
04021758 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
04021764 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
04021778 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
04029140 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
04021784 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
04029148 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
04021790 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
0402179c l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
040217ac l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
040217b8 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
040217c8 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
040217d8 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
040217e8 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
040217f4 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
04021800 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
0402180c l     O .rodata	00000009 _ZL16pstrUsageALClock
04021818 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
04021828 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
04021834 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
04021840 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0402184c l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
04021858 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0402186c l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
0402187c l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
04021888 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
0402189c l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
040218a8 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
040218b8 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
040218cc l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
040218e0 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
040218f4 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
04021904 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
0402191c l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
04021930 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
04021940 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
04021950 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
04029150 l     O .rwdata	00000007 _ZL14pstrUsageACNew
04029158 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
04021964 l     O .rodata	00000009 _ZL16pstrUsageACClose
04029160 l     O .rwdata	00000008 _ZL15pstrUsageACExit
04029168 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
04029170 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
04029178 l     O .rwdata	00000008 _ZL15pstrUsageACSave
04021970 l     O .rodata	00000009 _ZL16pstrUsageACPrint
04029180 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
04029188 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
04029190 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
04029198 l     O .rwdata	00000007 _ZL14pstrUsageACCut
0402197c l     O .rodata	00000009 _ZL16pstrUsageACPaste
04021988 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
040291a0 l     O .rwdata	00000008 _ZL15pstrUsageACFind
04021994 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
040219a4 l     O .rodata	0000000a _ZL17pstrUsageACSearch
040291a8 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
040291b0 l     O .rwdata	00000008 _ZL15pstrUsageACHome
040291b8 l     O .rwdata	00000008 _ZL15pstrUsageACBack
040291c0 l     O .rwdata	00000007 _ZL18pstrUsageACForward
040291c8 l     O .rwdata	00000008 _ZL15pstrUsageACStop
040219b0 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
040219bc l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
040219cc l     O .rodata	0000000d _ZL19pstrUsageACNextLink
040219dc l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
040291d0 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
040219e8 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
040219f4 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
04021a00 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
040291d8 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
04021a0c l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
04021a18 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
04021a28 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
04021a34 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
04021a44 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
04021a54 l     O .rodata	0000000a _ZL17pstrUsageACScroll
04021a60 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
04021a6c l     O .rodata	0000000d _ZL19pstrUsageACPanRight
040291e0 l     O .rwdata	00000007 _ZL14pstrUsageACPan
04021a7c l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
04021a88 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
04021a98 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
040291e8 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
040291f0 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
040291f8 l     O .rwdata	00000008 _ZL15pstrUsageACBold
04029200 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
04021aa8 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
04021ab4 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
04029208 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
04021ac0 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
04021acc l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
04021ad8 l     O .rodata	0000000a _ZL17pstrUsageACRotate
04021ae4 l     O .rodata	0000000a _ZL17pstrUsageACResize
04021af0 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
04021afc l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
04021b08 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
04021b14 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
04021b20 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
04021b2c l     O .rodata	0000000b _ZL20pstrUsageACFontColor
04021b38 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
04021b44 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
04021b54 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
04021b64 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
04021b74 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
04021b84 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
04021b90 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
04021ba0 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
04021bac l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
04021bbc l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
04021bcc l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
04021bdc l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
04021be8 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
04021bf4 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
04021c00 l     O .rodata	0000000b _ZL18pstrUsageACPromote
04021c0c l     O .rodata	0000000a _ZL17pstrUsageACDemote
04029210 l     O .rwdata	00000007 _ZL14pstrUsageACYes
04029218 l     O .rwdata	00000006 _ZL13pstrUsageACNo
04021c18 l     O .rodata	0000000a _ZL17pstrUsageACCancel
04029220 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
04029228 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
04021c24 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
04029230 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
04021c30 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
04021c40 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
04021c4c l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
04021c5c l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
04021c6c l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
04021c7c l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
04029238 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
04029240 l     O .rwdata	00000008 _ZL15pstrUsageACLock
04021c88 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
04029248 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
04021c94 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
04021ca0 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
04021cb0 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
04021cbc l     O .rodata	0000000d _ZL22pstrUsageACViewComment
04021ccc l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
04021cd8 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
04021ce4 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
04021cf0 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
04021cfc l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
04021d08 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
04021d14 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
04029250 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
04029258 l     O .rwdata	00000008 _ZL15pstrUsageACSort
04021d20 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
04021d2c l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
04029260 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
04021d3c l     O .rodata	0000000b _ZL19pstrUsageACSetClock
04021d48 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
04021d54 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
04021d64 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
04021d74 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
04021d80 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
04021d8c l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
04021d98 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
04029268 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
04021da4 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
04021db0 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
04021dbc l     O .rodata	00000009 _ZL16pstrUsageACReply
04021dc8 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
04021dd8 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
04029270 l     O .rwdata	00000007 _ZL15pstrUsageACSend
04021de4 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
04029278 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
04029280 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
04021df0 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
04021dfc l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
04021e08 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
04021e14 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
04021e20 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
04021e2c l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
04021e38 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
04021e44 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
04021e50 l     O .rodata	0000000a _ZL17pstrUsageACRename
04021e5c l     O .rodata	00000009 _ZL16pstrUsageACMerge
04021e68 l     O .rodata	00000009 _ZL16pstrUsageACSplit
04021e74 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
04021e80 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
04021e8c l     O .rodata	0000000a _ZL18pstrUsageDigitizer
04029288 l     O .rwdata	00000004 _ZL12pstrUsagePen
04021e98 l     O .rodata	0000000a _ZL17pstrUsageLightPen
04021ea4 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
04021eb0 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
04021ebc l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
04021ec8 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0402928c l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
04021ed8 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
04029294 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
04021ee4 l     O .rodata	00000009 _ZL17pstrUsageArmature
04021ef0 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
04021f04 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0402929c l     O .rwdata	00000007 _ZL15pstrUsageStylus
040292a4 l     O .rwdata	00000005 _ZL13pstrUsagePuck
040292ac l     O .rwdata	00000007 _ZL15pstrUsageFinger
04021f14 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
04021f20 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
04021f2c l     O .rodata	00000009 _ZL16pstrUsageInRange
040292b4 l     O .rwdata	00000006 _ZL14pstrUsageTouch
040292bc l     O .rwdata	00000008 _ZL16pstrUsageUntouch
040292c4 l     O .rwdata	00000004 _ZL12pstrUsageTap
040292c8 l     O .rwdata	00000005 _ZL16pstrUsageQuality
04021f38 l     O .rodata	0000000b _ZL18pstrUsageDataValid
04021f44 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
04021f54 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
04021f64 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
040292d0 l     O .rwdata	00000007 _ZL15pstrUsageInvert
040292d8 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
040292e0 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
040292e8 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
04021f74 l     O .rodata	00000009 _ZL17pstrUsageAltitude
040292f0 l     O .rwdata	00000006 _ZL14pstrUsageTwist
040292f8 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
04021f80 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
04029300 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
04029308 l     O .rwdata	00000007 _ZL15pstrUsageEraser
04021f8c l     O .rodata	00000009 _ZL19pstrUsageTabletPick
04021f98 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
04021fa8 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
04021fb4 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
04021fc4 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
04021fd0 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
04021fe0 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
04021fec l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
04021ffc l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
04022008 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
04022018 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
04022028 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
04022034 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
04022040 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
0402204c l     O .rodata	0000000a _ZL20pstrUsageDisplayData
04022058 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
04022064 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
04022070 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0402207c l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0402208c l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0402209c l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
04029310 l     O .rwdata	00000004 _ZL12pstrUsageRow
04029314 l     O .rwdata	00000004 _ZL15pstrUsageColumn
04029318 l     O .rwdata	00000005 _ZL13pstrUsageRows
04029320 l     O .rwdata	00000005 _ZL16pstrUsageColumns
040220a8 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
040220b4 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
040220c0 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
040220cc l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
04029328 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
040220d8 l     O .rodata	00000009 _ZL17pstrUsageFontData
040220e4 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
040220f0 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
040220fc l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
0402210c l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0402211c l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0402212c l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
04022138 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
04022144 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
04022150 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0402215c l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
04022168 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
04022174 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
04022180 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0402218c l     O .rodata	0000000a _ZL22pstrUsageAttributeData
04022198 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
040221a8 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
040221b8 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
040221c8 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
040221d4 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
040221e0 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
040221f0 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
04029330 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
040221fc l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0402220c l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0402221c l     O .rodata	00000009 _ZL20pstrUsagePaletteData
04022228 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
04022234 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
04022244 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
04022254 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
04022264 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
04022274 l     O .rodata	0000000a _ZL17pstrUsageBlitData
04022280 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0402228c l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
04022298 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
040222a8 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
040222b8 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
040222c8 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
040222d8 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
04029338 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
04029340 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
040222e8 l     O .rodata	0000000b _ZL18pstrUsageClipStore
04029348 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
04029350 l     O .rwdata	00000005 _ZL13pstrUsageNext
04029358 l     O .rwdata	00000005 _ZL13pstrUsageSave
04029360 l     O .rwdata	00000006 _ZL14pstrUsagePrint
040222f4 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
04029368 l     O .rwdata	00000005 _ZL13pstrUsageCine
04022300 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
04029370 l     O .rwdata	00000006 _ZL14pstrUsageFocus
04029378 l     O .rwdata	00000006 _ZL14pstrUsageDepth
0402230c l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0402231c l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0402232c l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0402233c l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
04022348 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
04022354 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
04022368 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0402237c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
04022390 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
040223a4 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
040223b4 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
040223c4 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
040223d0 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
040223dc l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
040223ec l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
0402938c l     O .rwdata	00000001 _ZL9SPI_MODE0
0402938d l     O .rwdata	00000001 _ZL9SPI_MODE1
0402938e l     O .rwdata	00000001 _ZL9SPI_MODE2
0402938f l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
04029394 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029395 l     O .rwdata	00000001 _ZL9SPI_MODE1
04029396 l     O .rwdata	00000001 _ZL9SPI_MODE2
04029397 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 usbh_midi.cpp
04029398 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029399 l     O .rwdata	00000001 _ZL9SPI_MODE1
0402939a l     O .rwdata	00000001 _ZL9SPI_MODE2
0402939b l     O .rwdata	00000001 _ZL9SPI_MODE3
040224c6 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
040224d6 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
04008a58 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
040293a4 l     O .rwdata	00000001 _ZL9SPI_MODE0
040293a5 l     O .rwdata	00000001 _ZL9SPI_MODE1
040293a6 l     O .rwdata	00000001 _ZL9SPI_MODE2
040293a7 l     O .rwdata	00000001 _ZL9SPI_MODE3
040293a8 l     O .rwdata	00000002 _ZL9pstrSpace
040293ac l     O .rwdata	00000003 _ZL8pstrCRLF
040293b0 l     O .rwdata	00000002 _ZL13pstrSingleTab
040293b4 l     O .rwdata	00000003 _ZL13pstrDoubleTab
040293b8 l     O .rwdata	00000004 _ZL13pstrTripleTab
040293bc l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
040225a0 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
040225b4 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
040225c0 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
040225cc l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
040225d8 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
040225e4 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
040225f4 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
040293c4 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
040293cc l     O .rwdata	00000007 _ZL19pstrUsagePageButton
040293d4 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
040293dc l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
04022600 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
0402260c l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
040293e0 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
040293e4 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
04022618 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
04022628 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
040293ec l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
040293f4 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
04022638 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
040293fc l     O .rwdata	00000006 _ZL18pstrUsagePageScale
04022648 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
04029404 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
04022660 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
04029408 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
0402266c l     O .rodata	00000009 _ZL21pstrUsagePageReserved
04022678 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
04029410 l     O .rwdata	00000008 _ZL16pstrUsagePointer
04029418 l     O .rwdata	00000006 _ZL14pstrUsageMouse
04022684 l     O .rodata	00000009 _ZL17pstrUsageJoystick
04022690 l     O .rodata	00000009 _ZL16pstrUsageGamePad
04029420 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
04029428 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
0402269c l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
040226ac l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
04029430 l     O .rwdata	00000002 _ZL10pstrUsageX
04029434 l     O .rwdata	00000002 _ZL10pstrUsageY
04029438 l     O .rwdata	00000002 _ZL10pstrUsageZ
0402943c l     O .rwdata	00000003 _ZL11pstrUsageRx
04029440 l     O .rwdata	00000003 _ZL11pstrUsageRy
04029444 l     O .rwdata	00000003 _ZL11pstrUsageRz
04029448 l     O .rwdata	00000007 _ZL15pstrUsageSlider
04029450 l     O .rwdata	00000005 _ZL13pstrUsageDial
04029458 l     O .rwdata	00000006 _ZL14pstrUsageWheel
040226c0 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
040226cc l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
040226d8 l     O .rodata	0000000b _ZL18pstrUsageByteCount
040226e4 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
04029460 l     O .rwdata	00000006 _ZL14pstrUsageStart
04029468 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0402946c l     O .rwdata	00000003 _ZL11pstrUsageVx
04029470 l     O .rwdata	00000003 _ZL11pstrUsageVy
04029474 l     O .rwdata	00000003 _ZL11pstrUsageVz
04029478 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
04029480 l     O .rwdata	00000005 _ZL13pstrUsageVbry
04029488 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
04029490 l     O .rwdata	00000004 _ZL12pstrUsageVno
040226f4 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
04022704 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
04022710 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
0402271c l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
0402272c l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
04022738 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
04022744 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
04022758 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
04022768 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
04022778 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
04022788 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
04022798 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
040227a8 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
040227b8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
040227c8 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
040227d4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
040227e4 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
040227f8 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
0402280c l     O .rodata	00000009 _ZL15pstrUsageDPadUp
04022818 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
04022824 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
04022830 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
0402283c l     O .rodata	00000009 _ZL19pstrUsageSystemDock
04022848 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
04022854 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
04022860 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
0402286c l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
04022878 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
04022884 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
04022890 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
040228a0 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
040228ac l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
040228bc l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
040228cc l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
040228dc l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
040228ec l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
040228fc l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
04022914 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
0402292c l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
04022944 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
04022954 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
04022964 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
04022974 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
04022984 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
04022994 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
040229a4 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
040229b4 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
040229c4 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
040229d4 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
040229e4 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
040229fc l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
04022a0c l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
04022a20 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
04022a30 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
04022a3c l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
04022a48 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
04022a54 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
04029494 l     O .rwdata	00000008 _ZL16pstrUsageAileron
04022a60 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
04022a70 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
04022a84 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
04022a98 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
04022aa8 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
04022ab8 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
04022ac4 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
04022ad8 l     O .rodata	00000009 _ZL17pstrUsageElevator
04022ae4 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0402949c l     O .rwdata	00000007 _ZL15pstrUsageRudder
04022af4 l     O .rodata	00000009 _ZL17pstrUsageThrottle
04022b00 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
04022b0c l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
04022b1c l     O .rodata	0000000d _ZL20pstrUsageLandingGear
04022b2c l     O .rodata	0000000a _ZL17pstrUsageToeBrake
040294a4 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
04022b38 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
04022b44 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
04022b50 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
040294ac l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
040294b4 l     O .rwdata	00000006 _ZL14pstrUsageBrake
040294bc l     O .rwdata	00000007 _ZL15pstrUsageClutch
040294c4 l     O .rwdata	00000008 _ZL16pstrUsageShifter
04022b5c l     O .rodata	00000009 _ZL17pstrUsageSteering
04022b68 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
04022b74 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
04022b80 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
040294cc l     O .rwdata	00000008 _ZL16pstrUsageBallast
04022b8c l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
04022b9c l     O .rodata	0000000c _ZL19pstrUsageHandleBars
04022ba8 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
04022bb4 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
040294d4 l     O .rwdata	00000005 _ZL13pstrUsageBelt
04022bc0 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
040294dc l     O .rwdata	00000007 _ZL15pstrUsageFlexor
040294e4 l     O .rwdata	00000006 _ZL14pstrUsageGlove
04022bcc l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
04022bd8 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
04022be4 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
04022bf0 l     O .rodata	0000000b _ZL19pstrUsageOculometer
040294ec l     O .rwdata	00000005 _ZL13pstrUsageVest
04022bfc l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
04022c08 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
04022c14 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
04022c24 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
04022c34 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
04022c40 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
04022c4c l     O .rodata	0000000a _ZL18pstrUsageTreadmill
040294f4 l     O .rwdata	00000004 _ZL12pstrUsageOar
040294f8 l     O .rwdata	00000006 _ZL14pstrUsageSlope
04029500 l     O .rwdata	00000005 _ZL13pstrUsageRate
04022c58 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
04022c64 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
04022c74 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
04022c84 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
04022c94 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
04022ca0 l     O .rodata	0000000b _ZL18pstrUsageStickType
04022cac l     O .rodata	0000000b _ZL20pstrUsageStickHeight
04029508 l     O .rwdata	00000007 _ZL15pstrUsagePutter
04029510 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
04029518 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
04029520 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
04029528 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
04029530 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
04029538 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
04029540 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
04029548 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
04029550 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
04029558 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
04029560 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
04022cb8 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
04022cc4 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
04022cd0 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
04029568 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
04029570 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
04029578 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
04029580 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
04029588 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
04022cdc l     O .rodata	0000000d _ZL25pstrUsage3DGameController
04022cec l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
04029590 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
04029598 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
04022cf8 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
04022d08 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
04022d18 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
04022d28 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
04022d38 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
04022d48 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
04022d58 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
04022d68 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
04022d78 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0402959c l     O .rwdata	00000008 _ZL16pstrUsageFlipper
04022d88 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
040295a4 l     O .rwdata	00000005 _ZL13pstrUsageBump
04022d98 l     O .rodata	00000009 _ZL16pstrUsageNewGame
04022da4 l     O .rodata	0000000b _ZL18pstrUsageShootBall
040295ac l     O .rwdata	00000007 _ZL15pstrUsagePlayer
04022db0 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
04022dbc l     O .rodata	00000009 _ZL16pstrUsageGunClip
040295b4 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
04022dc8 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
04022dd8 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
04022de4 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
04022df0 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
04022dfc l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
04022e10 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
04022e20 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
04022e30 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
04022e3c l     O .rodata	0000000c _ZL19pstrUsageWirelessID
04022e48 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
04022e60 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
04022e74 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
04022e8c l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
04022ea0 l     O .rodata	00000009 _ZL16pstrUsageNumLock
04022eac l     O .rodata	0000000a _ZL17pstrUsageCapsLock
04022eb8 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
040295bc l     O .rwdata	00000008 _ZL16pstrUsageCompose
040295c4 l     O .rwdata	00000005 _ZL13pstrUsageKana
040295cc l     O .rwdata	00000004 _ZL14pstrUsagePower
040295d0 l     O .rwdata	00000006 _ZL14pstrUsageShift
040295d8 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
040295dc l     O .rwdata	00000005 _ZL13pstrUsageMute
04022ec4 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
04022ed0 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
04022ee0 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
040295e4 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
04022ef0 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
04022f00 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
040295ec l     O .rwdata	00000007 _ZL15pstrUsageRepeat
040295f4 l     O .rwdata	00000007 _ZL15pstrUsageStereo
04022f0c l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
04022f20 l     O .rodata	00000009 _ZL17pstrUsageSpinning
040295fc l     O .rwdata	00000004 _ZL12pstrUsageCAV
04029600 l     O .rwdata	00000004 _ZL12pstrUsageCLV
04022f2c l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
04022f40 l     O .rodata	00000009 _ZL16pstrUsageOffHook
04029604 l     O .rwdata	00000005 _ZL13pstrUsageRing
04022f4c l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
04022f58 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0402960c l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
04029614 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0402961c l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
04029624 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
04022f64 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0402962c l     O .rwdata	00000005 _ZL13pstrUsageHold
04029634 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
04022f70 l     O .rodata	00000009 _ZL17pstrUsageCoverage
04022f7c l     O .rodata	0000000b _ZL18pstrUsageNightMode
04022f88 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
04022f94 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
04029638 l     O .rwdata	00000005 _ZL19pstrUsageConference
04022fa0 l     O .rodata	00000009 _ZL16pstrUsageStandBy
04029640 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
04029648 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
04029650 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
04022fac l     O .rodata	00000009 _ZL16pstrUsageOffLine
04029658 l     O .rwdata	00000005 _ZL13pstrUsageBusy
04029660 l     O .rwdata	00000006 _ZL14pstrUsageReady
04022fb8 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
04022fc4 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
04029668 l     O .rwdata	00000007 _ZL15pstrUsageRemote
04029670 l     O .rwdata	00000004 _ZL16pstrUsageForward
04029674 l     O .rwdata	00000004 _ZL16pstrUsageReverse
04029678 l     O .rwdata	00000005 _ZL13pstrUsageStop
04029680 l     O .rwdata	00000007 _ZL15pstrUsageRewind
04022fd0 l     O .rodata	00000009 _ZL20pstrUsageFastForward
04029688 l     O .rwdata	00000005 _ZL13pstrUsagePlay
04029690 l     O .rwdata	00000006 _ZL14pstrUsagePause
04029698 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0402969c l     O .rwdata	00000006 _ZL14pstrUsageError
04022fdc l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
04022fec l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
04023000 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
040296a4 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
04023018 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
04023024 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
04023034 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
040296ac l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
04023044 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
04023054 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
04023068 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
0402307c l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
04023090 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
040230a4 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
040296b4 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
040230b4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
040230c0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
040296bc l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
040230cc l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
040230d8 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
040296c4 l     O .rwdata	00000006 _ZL14pstrUsagePhone
040230e8 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
040230f4 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
040296cc l     O .rwdata	00000008 _ZL16pstrUsageHandset
040296d4 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
04023100 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
0402310c l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
040296dc l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
040296e4 l     O .rwdata	00000006 _ZL14pstrUsageFlash
040296ec l     O .rwdata	00000008 _ZL16pstrUsageFeature
040296f4 l     O .rwdata	00000007 _ZL15pstrUsageRedial
04023118 l     O .rodata	00000009 _ZL17pstrUsageTransfer
040296fc l     O .rwdata	00000005 _ZL13pstrUsageDrop
04029704 l     O .rwdata	00000005 _ZL13pstrUsagePark
04023124 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
04023130 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0402970c l     O .rwdata	00000005 _ZL13pstrUsageLine
0402313c l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
04023148 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
04023154 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
04023160 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
0402316c l     O .rodata	0000000a _ZL17pstrUsageCallerID
04029714 l     O .rwdata	00000005 _ZL13pstrUsageSend
04023178 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
04023184 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
04023190 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
0402319c l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
040231a8 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
040231b4 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0402971c l     O .rwdata	00000004 _ZL16pstrUsageMessage
040231c4 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
040231d4 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
040231e8 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
040231fc l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
04023210 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
04023224 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
04023234 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
04023244 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
04023258 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
04023268 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
04023278 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
04023288 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
04023294 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
040232a0 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
040232ac l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
04029720 l     O .rwdata	00000007 _ZL15pstrUsageRinger
04029728 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0402972c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
04029730 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
04029734 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
04029738 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0402973c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
04029740 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
04029744 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
04029748 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0402974c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
04029750 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
04029754 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
04029758 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0402975c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
04029760 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
04029764 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
040232c0 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
040232d0 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
040232dc l     O .rodata	0000000a _ZL18pstrUsageHeadphone
040232e8 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
04029768 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0402976c l     O .rwdata	00000005 _ZL16pstrUsagePlus100
04029774 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0402977c l     O .rwdata	00000006 _ZL14pstrUsageReset
04029784 l     O .rwdata	00000006 _ZL14pstrUsageSleep
040232f4 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
04023300 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0402978c l     O .rwdata	00000008 _ZL21pstrUsageIllumination
0402330c l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
04029794 l     O .rwdata	00000005 _ZL13pstrUsageMenu
04023318 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0402979c l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
04023324 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
04023330 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
0402333c l     O .rodata	0000000b _ZL18pstrUsageMenuRight
04023348 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
04023354 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
04023364 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
04023374 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
04023380 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
0402338c l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
040297a4 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
0402339c l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
040233ac l     O .rodata	00000009 _ZL17pstrUsageSnapshot
040297ac l     O .rwdata	00000006 _ZL14pstrUsageStill
040297b4 l     O .rwdata	00000004 _ZL18pstrUsageSelection
040233b8 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
040233c4 l     O .rodata	0000000a _ZL17pstrUsageModeStep
040233d0 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
040233dc l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
040233ec l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
040297b8 l     O .rwdata	00000008 _ZL16pstrUsageChannel
040297c0 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
040233f8 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
04023408 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
04023414 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
04023420 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
0402342c l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
04023438 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
04023444 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
04023450 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
04023460 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
0402346c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
04023478 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
04023484 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
040297c8 l     O .rwdata	00000005 _ZL13pstrUsageQuit
040297d0 l     O .rwdata	00000005 _ZL13pstrUsageHelp
04023494 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
040234a4 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
040234b0 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
040234bc l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
040234cc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
040234dc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
040297d8 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
040297e0 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
040234ec l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
040297e8 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
040297f0 l     O .rwdata	00000005 _ZL13pstrUsageOnce
040297f8 l     O .rwdata	00000006 _ZL14pstrUsageDaily
04029800 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
04029808 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
040234f8 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
04023504 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
04029810 l     O .rwdata	00000006 _ZL14pstrUsageEject
04029818 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
04023510 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
0402351c l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
04023528 l     O .rodata	00000009 _ZL17pstrUsageTracking
04023534 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
04023540 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
04029820 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
0402354c l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
04029828 l     O .rwdata	00000005 _ZL13pstrUsageMark
04023558 l     O .rodata	00000009 _ZL18pstrUsageClearMark
04023564 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
04023570 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0402357c l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
0402358c l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
040235a0 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
040235b0 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
040235c0 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
040235cc l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
040235d8 l     O .rodata	0000000b _ZL18pstrUsageStopEject
040235e4 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
040235f0 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
04029830 l     O .rwdata	00000004 _ZL15pstrUsageVolume
04029834 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0402983c l     O .rwdata	00000005 _ZL13pstrUsageBass
04029844 l     O .rwdata	00000007 _ZL15pstrUsageTreble
040235fc l     O .rodata	0000000b _ZL18pstrUsageBassBoost
04023608 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0402984c l     O .rwdata	00000005 _ZL17pstrUsageLoudness
04029854 l     O .rwdata	00000004 _ZL12pstrUsageMPX
04029858 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
04029860 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
04029868 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
04023614 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
04023620 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
0402362c l     O .rodata	0000000a _ZL17pstrUsageLongPlay
04023638 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
04029870 l     O .rwdata	00000005 _ZL13pstrUsageSlow
04023644 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
04023650 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
0402365c l     O .rodata	0000000b _ZL20pstrUsageLightEnable
04023668 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
04023678 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
04023688 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
04023694 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
040236a0 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
040236ac l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
04029878 l     O .rwdata	00000005 _ZL18pstrUsageProximity
04029880 l     O .rwdata	00000007 _ZL15pstrUsageMotion
040236b8 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
040236c4 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
04029888 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
040236d0 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
040236e0 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
040236f0 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
040236fc l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
04023708 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
04023714 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
04029890 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
04029898 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
04023720 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
0402372c l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
04023738 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
04023744 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
040298a0 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
04023754 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
04023760 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
040298a8 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
040298b0 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
040298b8 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
04023770 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
0402377c l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
04023788 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
04023794 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
040237a0 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
040237b0 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
040237c4 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
040237d0 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
040237e4 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
040237f4 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
04023800 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
04023810 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
04023820 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
04023830 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
0402383c l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
0402384c l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
04023858 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
04023868 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
04023878 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
04023888 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
04023898 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
040238ac l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
040298c0 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
040238bc l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
040238d0 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
040238e4 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
040238f4 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
04023904 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
04023914 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
04023920 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
0402392c l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
04023938 l     O .rodata	00000009 _ZL16pstrUsageALLogon
04023944 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
04023950 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
04023960 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
04023978 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
04023984 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
04023990 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
0402399c l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
040239a8 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
040239b4 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
040239c0 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
040239d4 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
040298c8 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
040239e0 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
040298d0 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
040239ec l     O .rodata	0000000b _ZL18pstrUsageALDesktop
040239f8 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
04023a08 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
04023a14 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
04023a24 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
04023a34 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
04023a44 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
04023a50 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
04023a5c l     O .rodata	0000000a _ZL17pstrUsageALAlarms
04023a68 l     O .rodata	00000009 _ZL16pstrUsageALClock
04023a74 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
04023a84 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
04023a90 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
04023a9c l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
04023aa8 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
04023ab4 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
04023ac8 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
04023ad8 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
04023ae4 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
04023af8 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
04023b04 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
04023b14 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
04023b28 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
04023b3c l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
04023b50 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
04023b60 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
04023b78 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
04023b8c l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
04023b9c l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
04023bac l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
040298d8 l     O .rwdata	00000007 _ZL14pstrUsageACNew
040298e0 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
04023bc0 l     O .rodata	00000009 _ZL16pstrUsageACClose
040298e8 l     O .rwdata	00000008 _ZL15pstrUsageACExit
040298f0 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
040298f8 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
04029900 l     O .rwdata	00000008 _ZL15pstrUsageACSave
04023bcc l     O .rodata	00000009 _ZL16pstrUsageACPrint
04029908 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
04029910 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
04029918 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
04029920 l     O .rwdata	00000007 _ZL14pstrUsageACCut
04023bd8 l     O .rodata	00000009 _ZL16pstrUsageACPaste
04023be4 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
04029928 l     O .rwdata	00000008 _ZL15pstrUsageACFind
04023bf0 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
04023c00 l     O .rodata	0000000a _ZL17pstrUsageACSearch
04029930 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
04029938 l     O .rwdata	00000008 _ZL15pstrUsageACHome
04029940 l     O .rwdata	00000008 _ZL15pstrUsageACBack
04029948 l     O .rwdata	00000007 _ZL18pstrUsageACForward
04029950 l     O .rwdata	00000008 _ZL15pstrUsageACStop
04023c0c l     O .rodata	0000000b _ZL18pstrUsageACRefresh
04023c18 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
04023c28 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
04023c38 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
04029958 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
04023c44 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
04023c50 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
04023c5c l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
04029960 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
04023c68 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
04023c74 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
04023c84 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
04023c90 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
04023ca0 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
04023cb0 l     O .rodata	0000000a _ZL17pstrUsageACScroll
04023cbc l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
04023cc8 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
04029968 l     O .rwdata	00000007 _ZL14pstrUsageACPan
04023cd8 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
04023ce4 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
04023cf4 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
04029970 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
04029978 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
04029980 l     O .rwdata	00000008 _ZL15pstrUsageACBold
04029988 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
04023d04 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
04023d10 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
04029990 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
04023d1c l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
04023d28 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
04023d34 l     O .rodata	0000000a _ZL17pstrUsageACRotate
04023d40 l     O .rodata	0000000a _ZL17pstrUsageACResize
04023d4c l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
04023d58 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
04023d64 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
04023d70 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
04023d7c l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
04023d88 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
04023d94 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
04023da0 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
04023db0 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
04023dc0 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
04023dd0 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
04023de0 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
04023dec l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
04023dfc l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
04023e08 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
04023e18 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
04023e28 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
04023e38 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
04023e44 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
04023e50 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
04023e5c l     O .rodata	0000000b _ZL18pstrUsageACPromote
04023e68 l     O .rodata	0000000a _ZL17pstrUsageACDemote
04029998 l     O .rwdata	00000007 _ZL14pstrUsageACYes
040299a0 l     O .rwdata	00000006 _ZL13pstrUsageACNo
04023e74 l     O .rodata	0000000a _ZL17pstrUsageACCancel
040299a8 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
040299b0 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
04023e80 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
040299b8 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
04023e8c l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
04023e9c l     O .rodata	0000000c _ZL19pstrUsageACCollapse
04023ea8 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
04023eb8 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
04023ec8 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
04023ed8 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
040299c0 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
040299c8 l     O .rwdata	00000008 _ZL15pstrUsageACLock
04023ee4 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
040299d0 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
04023ef0 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
04023efc l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
04023f0c l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
04023f18 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
04023f28 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
04023f34 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
04023f40 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
04023f4c l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
04023f58 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
04023f64 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
04023f70 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
040299d8 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
040299e0 l     O .rwdata	00000008 _ZL15pstrUsageACSort
04023f7c l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
04023f88 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
040299e8 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
04023f98 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
04023fa4 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
04023fb0 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
04023fc0 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
04023fd0 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
04023fdc l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
04023fe8 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
04023ff4 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
040299f0 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
04024000 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
0402400c l     O .rodata	0000000a _ZL17pstrUsageACSendTo
04024018 l     O .rodata	00000009 _ZL16pstrUsageACReply
04024024 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
04024034 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
040299f8 l     O .rwdata	00000007 _ZL15pstrUsageACSend
04024040 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
04029a00 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
04029a08 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
0402404c l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
04024058 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
04024064 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
04024070 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
0402407c l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
04024088 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
04024094 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
040240a0 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
040240ac l     O .rodata	0000000a _ZL17pstrUsageACRename
040240b8 l     O .rodata	00000009 _ZL16pstrUsageACMerge
040240c4 l     O .rodata	00000009 _ZL16pstrUsageACSplit
040240d0 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
040240dc l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
040240e8 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
04029a10 l     O .rwdata	00000004 _ZL12pstrUsagePen
040240f4 l     O .rodata	0000000a _ZL17pstrUsageLightPen
04024100 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
0402410c l     O .rodata	0000000a _ZL17pstrUsageTouchPad
04024118 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
04024124 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
04029a14 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
04024134 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
04029a1c l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
04024140 l     O .rodata	00000009 _ZL17pstrUsageArmature
0402414c l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
04024160 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
04029a24 l     O .rwdata	00000007 _ZL15pstrUsageStylus
04029a2c l     O .rwdata	00000005 _ZL13pstrUsagePuck
04029a34 l     O .rwdata	00000007 _ZL15pstrUsageFinger
04024170 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0402417c l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
04024188 l     O .rodata	00000009 _ZL16pstrUsageInRange
04029a3c l     O .rwdata	00000006 _ZL14pstrUsageTouch
04029a44 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
04029a4c l     O .rwdata	00000004 _ZL12pstrUsageTap
04029a50 l     O .rwdata	00000005 _ZL16pstrUsageQuality
04024194 l     O .rodata	0000000b _ZL18pstrUsageDataValid
040241a0 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
040241b0 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
040241c0 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
04029a58 l     O .rwdata	00000007 _ZL15pstrUsageInvert
04029a60 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
04029a68 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
04029a70 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
040241d0 l     O .rodata	00000009 _ZL17pstrUsageAltitude
04029a78 l     O .rwdata	00000006 _ZL14pstrUsageTwist
04029a80 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
040241dc l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
04029a88 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
04029a90 l     O .rwdata	00000007 _ZL15pstrUsageEraser
040241e8 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
040241f4 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
04024204 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
04024210 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
04024220 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
0402422c l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
0402423c l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
04024248 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
04024258 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
04024264 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
04024274 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
04024284 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
04024290 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0402429c l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
040242a8 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
040242b4 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
040242c0 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
040242cc l     O .rodata	0000000b _ZL20pstrUsageStatusReady
040242d8 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
040242e8 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
040242f8 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
04029a98 l     O .rwdata	00000004 _ZL12pstrUsageRow
04029a9c l     O .rwdata	00000004 _ZL15pstrUsageColumn
04029aa0 l     O .rwdata	00000005 _ZL13pstrUsageRows
04029aa8 l     O .rwdata	00000005 _ZL16pstrUsageColumns
04024304 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
04024310 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
0402431c l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
04024328 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
04029ab0 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
04024334 l     O .rodata	00000009 _ZL17pstrUsageFontData
04024340 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
0402434c l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
04024358 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
04024368 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
04024378 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
04024388 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
04024394 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
040243a0 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
040243ac l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
040243b8 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
040243c4 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
040243d0 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
040243dc l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
040243e8 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
040243f4 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
04024404 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
04024414 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
04024424 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
04024430 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
0402443c l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
0402444c l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
04029ab8 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
04024458 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
04024468 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
04024478 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
04024484 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
04024490 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
040244a0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
040244b0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
040244c0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
040244d0 l     O .rodata	0000000a _ZL17pstrUsageBlitData
040244dc l     O .rodata	00000009 _ZL19pstrUsageSoftButton
040244e8 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
040244f4 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
04024504 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
04024514 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
04024524 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
04024534 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
04029ac0 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
04029ac8 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
04024544 l     O .rodata	0000000b _ZL18pstrUsageClipStore
04029ad0 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
04029ad8 l     O .rwdata	00000005 _ZL13pstrUsageNext
04029ae0 l     O .rwdata	00000005 _ZL13pstrUsageSave
04029ae8 l     O .rwdata	00000006 _ZL14pstrUsagePrint
04024550 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
04029af0 l     O .rwdata	00000005 _ZL13pstrUsageCine
0402455c l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
04029af8 l     O .rwdata	00000006 _ZL14pstrUsageFocus
04029b00 l     O .rwdata	00000006 _ZL14pstrUsageDepth
04024568 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
04024578 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
04024588 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
04024598 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
040245a4 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
040245b0 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
040245c4 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
040245d8 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
040245ec l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
04024600 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
04024610 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
04024620 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
0402462c l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
04024638 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
04024648 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
04029b06 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029b07 l     O .rwdata	00000001 _ZL9SPI_MODE1
04029b08 l     O .rwdata	00000001 _ZL9SPI_MODE2
04029b09 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
04029b0c l     O .rwdata	00000001 _ZL9SPI_MODE0
04029b0d l     O .rwdata	00000001 _ZL9SPI_MODE1
04029b0e l     O .rwdata	00000001 _ZL9SPI_MODE2
04029b0f l     O .rwdata	00000001 _ZL9SPI_MODE3
04029b10 l     O .rwdata	00000002 _ZL9pstrSpace
04029b14 l     O .rwdata	00000003 _ZL8pstrCRLF
04029b18 l     O .rwdata	00000002 _ZL13pstrSingleTab
04029b1c l     O .rwdata	00000003 _ZL13pstrDoubleTab
04029b20 l     O .rwdata	00000004 _ZL13pstrTripleTab
04029b24 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
04024728 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
0402473c l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
04024748 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
04024754 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
04024760 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
0402476c l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
0402477c l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
04029b2c l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
04029b34 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
04029b3c l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
04029b44 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
04024788 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
04024794 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
04029b48 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
04029b4c l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
040247a0 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
040247b0 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
04029b54 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
04029b5c l     O .rwdata	00000006 _ZL18pstrUsagePagePower
040247c0 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
04029b64 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
040247d0 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
04029b6c l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
040247e8 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
04029b70 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
040247f4 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
04024800 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
04029b78 l     O .rwdata	00000008 _ZL16pstrUsagePointer
04029b80 l     O .rwdata	00000006 _ZL14pstrUsageMouse
0402480c l     O .rodata	00000009 _ZL17pstrUsageJoystick
04024818 l     O .rodata	00000009 _ZL16pstrUsageGamePad
04029b88 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
04029b90 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
04024824 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
04024834 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
04029b98 l     O .rwdata	00000002 _ZL10pstrUsageX
04029b9c l     O .rwdata	00000002 _ZL10pstrUsageY
04029ba0 l     O .rwdata	00000002 _ZL10pstrUsageZ
04029ba4 l     O .rwdata	00000003 _ZL11pstrUsageRx
04029ba8 l     O .rwdata	00000003 _ZL11pstrUsageRy
04029bac l     O .rwdata	00000003 _ZL11pstrUsageRz
04029bb0 l     O .rwdata	00000007 _ZL15pstrUsageSlider
04029bb8 l     O .rwdata	00000005 _ZL13pstrUsageDial
04029bc0 l     O .rwdata	00000006 _ZL14pstrUsageWheel
04024848 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
04024854 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
04024860 l     O .rodata	0000000b _ZL18pstrUsageByteCount
0402486c l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
04029bc8 l     O .rwdata	00000006 _ZL14pstrUsageStart
04029bd0 l     O .rwdata	00000004 _ZL15pstrUsageSelect
04029bd4 l     O .rwdata	00000003 _ZL11pstrUsageVx
04029bd8 l     O .rwdata	00000003 _ZL11pstrUsageVy
04029bdc l     O .rwdata	00000003 _ZL11pstrUsageVz
04029be0 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
04029be8 l     O .rwdata	00000005 _ZL13pstrUsageVbry
04029bf0 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
04029bf8 l     O .rwdata	00000004 _ZL12pstrUsageVno
0402487c l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
0402488c l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
04024898 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
040248a4 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
040248b4 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
040248c0 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
040248cc l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
040248e0 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
040248f0 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
04024900 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
04024910 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
04024920 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
04024930 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
04024940 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
04024950 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
0402495c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
0402496c l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
04024980 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
04024994 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
040249a0 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
040249ac l     O .rodata	0000000c _ZL18pstrUsageDPadRight
040249b8 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
040249c4 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
040249d0 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
040249dc l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
040249e8 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
040249f4 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
04024a00 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
04024a0c l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
04024a18 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
04024a28 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
04024a34 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
04024a44 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
04024a54 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
04024a64 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
04024a74 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
04024a84 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
04024a9c l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
04024ab4 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
04024acc l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
04024adc l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
04024aec l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
04024afc l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
04024b0c l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
04024b1c l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
04024b2c l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
04024b3c l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
04024b4c l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
04024b5c l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
04024b6c l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
04024b84 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
04024b94 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
04024ba8 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
04024bb8 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
04024bc4 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
04024bd0 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
04024bdc l     O .rodata	0000000b _ZL21pstrUsageTrackControl
04029bfc l     O .rwdata	00000008 _ZL16pstrUsageAileron
04024be8 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
04024bf8 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
04024c0c l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
04024c20 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
04024c30 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
04024c40 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
04024c4c l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
04024c60 l     O .rodata	00000009 _ZL17pstrUsageElevator
04024c6c l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
04029c04 l     O .rwdata	00000007 _ZL15pstrUsageRudder
04024c7c l     O .rodata	00000009 _ZL17pstrUsageThrottle
04024c88 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
04024c94 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
04024ca4 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
04024cb4 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
04029c0c l     O .rwdata	00000008 _ZL16pstrUsageTrigger
04024cc0 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
04024ccc l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
04024cd8 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
04029c14 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
04029c1c l     O .rwdata	00000006 _ZL14pstrUsageBrake
04029c24 l     O .rwdata	00000007 _ZL15pstrUsageClutch
04029c2c l     O .rwdata	00000008 _ZL16pstrUsageShifter
04024ce4 l     O .rodata	00000009 _ZL17pstrUsageSteering
04024cf0 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
04024cfc l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
04024d08 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
04029c34 l     O .rwdata	00000008 _ZL16pstrUsageBallast
04024d14 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
04024d24 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
04024d30 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
04024d3c l     O .rodata	0000000b _ZL18pstrUsageRearBrake
04029c3c l     O .rwdata	00000005 _ZL13pstrUsageBelt
04024d48 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
04029c44 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
04029c4c l     O .rwdata	00000006 _ZL14pstrUsageGlove
04024d54 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
04024d60 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
04024d6c l     O .rodata	0000000b _ZL20pstrUsageHandTracker
04024d78 l     O .rodata	0000000b _ZL19pstrUsageOculometer
04029c54 l     O .rwdata	00000005 _ZL13pstrUsageVest
04024d84 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
04024d90 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
04024d9c l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
04024dac l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
04024dbc l     O .rodata	0000000a _ZL17pstrUsageGolfClub
04024dc8 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
04024dd4 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
04029c5c l     O .rwdata	00000004 _ZL12pstrUsageOar
04029c60 l     O .rwdata	00000006 _ZL14pstrUsageSlope
04029c68 l     O .rwdata	00000005 _ZL13pstrUsageRate
04024de0 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
04024dec l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
04024dfc l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
04024e0c l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
04024e1c l     O .rodata	0000000c _ZL19pstrUsageStickTempo
04024e28 l     O .rodata	0000000b _ZL18pstrUsageStickType
04024e34 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
04029c70 l     O .rwdata	00000007 _ZL15pstrUsagePutter
04029c78 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
04029c80 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
04029c88 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
04029c90 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
04029c98 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
04029ca0 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
04029ca8 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
04029cb0 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
04029cb8 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
04029cc0 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
04029cc8 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
04024e40 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
04024e4c l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
04024e58 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
04029cd0 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
04029cd8 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
04029ce0 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
04029ce8 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
04029cf0 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
04024e64 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
04024e74 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
04029cf8 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
04029d00 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
04024e80 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
04024e90 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
04024ea0 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
04024eb0 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
04024ec0 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
04024ed0 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
04024ee0 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
04024ef0 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
04024f00 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
04029d04 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
04024f10 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
04029d0c l     O .rwdata	00000005 _ZL13pstrUsageBump
04024f20 l     O .rodata	00000009 _ZL16pstrUsageNewGame
04024f2c l     O .rodata	0000000b _ZL18pstrUsageShootBall
04029d14 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
04024f38 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
04024f44 l     O .rodata	00000009 _ZL16pstrUsageGunClip
04029d1c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
04024f50 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
04024f60 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
04024f6c l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
04024f78 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
04024f84 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
04024f98 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
04024fa8 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
04024fb8 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
04024fc4 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
04024fd0 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
04024fe8 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
04024ffc l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
04025014 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
04025028 l     O .rodata	00000009 _ZL16pstrUsageNumLock
04025034 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
04025040 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
04029d24 l     O .rwdata	00000008 _ZL16pstrUsageCompose
04029d2c l     O .rwdata	00000005 _ZL13pstrUsageKana
04029d34 l     O .rwdata	00000004 _ZL14pstrUsagePower
04029d38 l     O .rwdata	00000006 _ZL14pstrUsageShift
04029d40 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
04029d44 l     O .rwdata	00000005 _ZL13pstrUsageMute
0402504c l     O .rodata	0000000a _ZL19pstrUsageToneEnable
04025058 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
04025068 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
04029d4c l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
04025078 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
04025088 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
04029d54 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
04029d5c l     O .rwdata	00000007 _ZL15pstrUsageStereo
04025094 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
040250a8 l     O .rodata	00000009 _ZL17pstrUsageSpinning
04029d64 l     O .rwdata	00000004 _ZL12pstrUsageCAV
04029d68 l     O .rwdata	00000004 _ZL12pstrUsageCLV
040250b4 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
040250c8 l     O .rodata	00000009 _ZL16pstrUsageOffHook
04029d6c l     O .rwdata	00000005 _ZL13pstrUsageRing
040250d4 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
040250e0 l     O .rodata	0000000a _ZL17pstrUsageDataMode
04029d74 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
04029d7c l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
04029d84 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
04029d8c l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
040250ec l     O .rodata	00000009 _ZL16pstrUsageHeadSet
04029d94 l     O .rwdata	00000005 _ZL13pstrUsageHold
04029d9c l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
040250f8 l     O .rodata	00000009 _ZL17pstrUsageCoverage
04025104 l     O .rodata	0000000b _ZL18pstrUsageNightMode
04025110 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
0402511c l     O .rodata	0000000c _ZL19pstrUsageCallPickup
04029da0 l     O .rwdata	00000005 _ZL19pstrUsageConference
04025128 l     O .rodata	00000009 _ZL16pstrUsageStandBy
04029da8 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
04029db0 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
04029db8 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
04025134 l     O .rodata	00000009 _ZL16pstrUsageOffLine
04029dc0 l     O .rwdata	00000005 _ZL13pstrUsageBusy
04029dc8 l     O .rwdata	00000006 _ZL14pstrUsageReady
04025140 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
0402514c l     O .rodata	0000000a _ZL17pstrUsagePaperJam
04029dd0 l     O .rwdata	00000007 _ZL15pstrUsageRemote
04029dd8 l     O .rwdata	00000004 _ZL16pstrUsageForward
04029ddc l     O .rwdata	00000004 _ZL16pstrUsageReverse
04029de0 l     O .rwdata	00000005 _ZL13pstrUsageStop
04029de8 l     O .rwdata	00000007 _ZL15pstrUsageRewind
04025158 l     O .rodata	00000009 _ZL20pstrUsageFastForward
04029df0 l     O .rwdata	00000005 _ZL13pstrUsagePlay
04029df8 l     O .rwdata	00000006 _ZL14pstrUsagePause
04029e00 l     O .rwdata	00000004 _ZL15pstrUsageRecord
04029e04 l     O .rwdata	00000006 _ZL14pstrUsageError
04025164 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
04025174 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
04025188 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
04029e0c l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
040251a0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
040251ac l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
040251bc l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
04029e14 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
040251cc l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
040251dc l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
040251f0 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
04025204 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
04025218 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
0402522c l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
04029e1c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
0402523c l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
04025248 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
04029e24 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
04025254 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
04025260 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
04029e2c l     O .rwdata	00000006 _ZL14pstrUsagePhone
04025270 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
0402527c l     O .rodata	0000000a _ZL24pstrUsageMessageControls
04029e34 l     O .rwdata	00000008 _ZL16pstrUsageHandset
04029e3c l     O .rwdata	00000008 _ZL16pstrUsageHeadset
04025288 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
04025294 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
04029e44 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
04029e4c l     O .rwdata	00000006 _ZL14pstrUsageFlash
04029e54 l     O .rwdata	00000008 _ZL16pstrUsageFeature
04029e5c l     O .rwdata	00000007 _ZL15pstrUsageRedial
040252a0 l     O .rodata	00000009 _ZL17pstrUsageTransfer
04029e64 l     O .rwdata	00000005 _ZL13pstrUsageDrop
04029e6c l     O .rwdata	00000005 _ZL13pstrUsagePark
040252ac l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
040252b8 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
04029e74 l     O .rwdata	00000005 _ZL13pstrUsageLine
040252c4 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
040252d0 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
040252dc l     O .rodata	00000009 _ZL19pstrUsageRingSelect
040252e8 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
040252f4 l     O .rodata	0000000a _ZL17pstrUsageCallerID
04029e7c l     O .rwdata	00000005 _ZL13pstrUsageSend
04025300 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
0402530c l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
04025318 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
04025324 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
04025330 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
0402533c l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
04029e84 l     O .rwdata	00000004 _ZL16pstrUsageMessage
0402534c l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
0402535c l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
04025370 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
04025384 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
04025398 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
040253ac l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
040253bc l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
040253cc l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
040253e0 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
040253f0 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
04025400 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
04025410 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
0402541c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
04025428 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
04025434 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
04029e88 l     O .rwdata	00000007 _ZL15pstrUsageRinger
04029e90 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
04029e94 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
04029e98 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
04029e9c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
04029ea0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
04029ea4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
04029ea8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
04029eac l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
04029eb0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
04029eb4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
04029eb8 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
04029ebc l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
04029ec0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
04029ec4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
04029ec8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
04029ecc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
04025448 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
04025458 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
04025464 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
04025470 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
04029ed0 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
04029ed4 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
04029edc l     O .rwdata	00000006 _ZL13pstrUsageAMPM
04029ee4 l     O .rwdata	00000006 _ZL14pstrUsageReset
04029eec l     O .rwdata	00000006 _ZL14pstrUsageSleep
0402547c l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
04025488 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
04029ef4 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
04025494 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
04029efc l     O .rwdata	00000005 _ZL13pstrUsageMenu
040254a0 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
04029f04 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
040254ac l     O .rodata	0000000a _ZL17pstrUsageMenuDown
040254b8 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
040254c4 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
040254d0 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
040254dc l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
040254ec l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
040254fc l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
04025508 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
04025514 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
04029f0c l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
04025524 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
04025534 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
04029f14 l     O .rwdata	00000006 _ZL14pstrUsageStill
04029f1c l     O .rwdata	00000004 _ZL18pstrUsageSelection
04025540 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
0402554c l     O .rodata	0000000a _ZL17pstrUsageModeStep
04025558 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
04025564 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
04025574 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
04029f20 l     O .rwdata	00000008 _ZL16pstrUsageChannel
04029f28 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
04025580 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
04025590 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
0402559c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
040255a8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
040255b4 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
040255c0 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
040255cc l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
040255d8 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
040255e8 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
040255f4 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
04025600 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
0402560c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
04029f30 l     O .rwdata	00000005 _ZL13pstrUsageQuit
04029f38 l     O .rwdata	00000005 _ZL13pstrUsageHelp
0402561c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
0402562c l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
04025638 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
04025644 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
04025654 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
04025664 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
04029f40 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
04029f48 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
04025674 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
04029f50 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
04029f58 l     O .rwdata	00000005 _ZL13pstrUsageOnce
04029f60 l     O .rwdata	00000006 _ZL14pstrUsageDaily
04029f68 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
04029f70 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
04025680 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
0402568c l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
04029f78 l     O .rwdata	00000006 _ZL14pstrUsageEject
04029f80 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
04025698 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
040256a4 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
040256b0 l     O .rodata	00000009 _ZL17pstrUsageTracking
040256bc l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
040256c8 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
04029f88 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
040256d4 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
04029f90 l     O .rwdata	00000005 _ZL13pstrUsageMark
040256e0 l     O .rodata	00000009 _ZL18pstrUsageClearMark
040256ec l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
040256f8 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
04025704 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
04025714 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
04025728 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
04025738 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
04025748 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
04025754 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
04025760 l     O .rodata	0000000b _ZL18pstrUsageStopEject
0402576c l     O .rodata	0000000b _ZL18pstrUsagePlayPause
04025778 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
04029f98 l     O .rwdata	00000004 _ZL15pstrUsageVolume
04029f9c l     O .rwdata	00000008 _ZL16pstrUsageBalance
04029fa4 l     O .rwdata	00000005 _ZL13pstrUsageBass
04029fac l     O .rwdata	00000007 _ZL15pstrUsageTreble
04025784 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
04025790 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
04029fb4 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
04029fbc l     O .rwdata	00000004 _ZL12pstrUsageMPX
04029fc0 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
04029fc8 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
04029fd0 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
0402579c l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
040257a8 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
040257b4 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
040257c0 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
04029fd8 l     O .rwdata	00000005 _ZL13pstrUsageSlow
040257cc l     O .rodata	00000009 _ZL18pstrUsageFanEnable
040257d8 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
040257e4 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
040257f0 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
04025800 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
04025810 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
0402581c l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
04025828 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
04025834 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
04029fe0 l     O .rwdata	00000005 _ZL18pstrUsageProximity
04029fe8 l     O .rwdata	00000007 _ZL15pstrUsageMotion
04025840 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
0402584c l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
04029ff0 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
04025858 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
04025868 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
04025878 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
04025884 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
04025890 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
0402589c l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
04029ff8 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0402a000 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
040258a8 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
040258b4 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
040258c0 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
040258cc l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0402a008 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
040258dc l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
040258e8 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0402a010 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0402a018 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0402a020 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
040258f8 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
04025904 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
04025910 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
0402591c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
04025928 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
04025938 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
0402594c l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
04025958 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
0402596c l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
0402597c l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
04025988 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
04025998 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
040259a8 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
040259b8 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
040259c4 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
040259d4 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
040259e0 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
040259f0 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
04025a00 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
04025a10 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
04025a20 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
04025a34 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0402a028 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
04025a44 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
04025a58 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
04025a6c l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
04025a7c l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
04025a8c l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
04025a9c l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
04025aa8 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
04025ab4 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
04025ac0 l     O .rodata	00000009 _ZL16pstrUsageALLogon
04025acc l     O .rodata	0000000a _ZL17pstrUsageALLogoff
04025ad8 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
04025ae8 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
04025b00 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
04025b0c l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
04025b18 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
04025b24 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
04025b30 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
04025b3c l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
04025b48 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
04025b5c l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0402a030 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
04025b68 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0402a038 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
04025b74 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
04025b80 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
04025b90 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
04025b9c l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
04025bac l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
04025bbc l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
04025bcc l     O .rodata	0000000b _ZL21pstrUsageALEncryption
04025bd8 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
04025be4 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
04025bf0 l     O .rodata	00000009 _ZL16pstrUsageALClock
04025bfc l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
04025c0c l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
04025c18 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
04025c24 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
04025c30 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
04025c3c l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
04025c50 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
04025c60 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
04025c6c l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
04025c80 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
04025c8c l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
04025c9c l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
04025cb0 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
04025cc4 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
04025cd8 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
04025ce8 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
04025d00 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
04025d14 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
04025d24 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
04025d34 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0402a040 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0402a048 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
04025d48 l     O .rodata	00000009 _ZL16pstrUsageACClose
0402a050 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0402a058 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0402a060 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0402a068 l     O .rwdata	00000008 _ZL15pstrUsageACSave
04025d54 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0402a070 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0402a078 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0402a080 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0402a088 l     O .rwdata	00000007 _ZL14pstrUsageACCut
04025d60 l     O .rodata	00000009 _ZL16pstrUsageACPaste
04025d6c l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0402a090 l     O .rwdata	00000008 _ZL15pstrUsageACFind
04025d78 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
04025d88 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0402a098 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0402a0a0 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0402a0a8 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0402a0b0 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0402a0b8 l     O .rwdata	00000008 _ZL15pstrUsageACStop
04025d94 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
04025da0 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
04025db0 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
04025dc0 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0402a0c0 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
04025dcc l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
04025dd8 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
04025de4 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0402a0c8 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
04025df0 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
04025dfc l     O .rodata	0000000d _ZL21pstrUsageACNormalView
04025e0c l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
04025e18 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
04025e28 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
04025e38 l     O .rodata	0000000a _ZL17pstrUsageACScroll
04025e44 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
04025e50 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0402a0d0 l     O .rwdata	00000007 _ZL14pstrUsageACPan
04025e60 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
04025e6c l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
04025e7c l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0402a0d8 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0402a0e0 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0402a0e8 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0402a0f0 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
04025e8c l     O .rodata	00000009 _ZL20pstrUsageACUnderline
04025e98 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0402a0f8 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
04025ea4 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
04025eb0 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
04025ebc l     O .rodata	0000000a _ZL17pstrUsageACRotate
04025ec8 l     O .rodata	0000000a _ZL17pstrUsageACResize
04025ed4 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
04025ee0 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
04025eec l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
04025ef8 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
04025f04 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
04025f10 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
04025f1c l     O .rodata	0000000c _ZL19pstrUsageACFontSize
04025f28 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
04025f38 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
04025f48 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
04025f58 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
04025f68 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
04025f74 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
04025f84 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
04025f90 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
04025fa0 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
04025fb0 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
04025fc0 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
04025fcc l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
04025fd8 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
04025fe4 l     O .rodata	0000000b _ZL18pstrUsageACPromote
04025ff0 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0402a100 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0402a108 l     O .rwdata	00000006 _ZL13pstrUsageACNo
04025ffc l     O .rodata	0000000a _ZL17pstrUsageACCancel
0402a110 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0402a118 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
04026008 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0402a120 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
04026014 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
04026024 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
04026030 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
04026040 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
04026050 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
04026060 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0402a128 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0402a130 l     O .rwdata	00000008 _ZL15pstrUsageACLock
0402606c l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0402a138 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
04026078 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
04026084 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
04026094 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
040260a0 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
040260b0 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
040260bc l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
040260c8 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
040260d4 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
040260e0 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
040260ec l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
040260f8 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0402a140 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0402a148 l     O .rwdata	00000008 _ZL15pstrUsageACSort
04026104 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
04026110 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0402a150 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
04026120 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
0402612c l     O .rodata	0000000c _ZL20pstrUsageACViewClock
04026138 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
04026148 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
04026158 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
04026164 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
04026170 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
0402617c l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0402a158 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
04026188 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
04026194 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
040261a0 l     O .rodata	00000009 _ZL16pstrUsageACReply
040261ac l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
040261bc l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0402a160 l     O .rwdata	00000007 _ZL15pstrUsageACSend
040261c8 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0402a168 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0402a170 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
040261d4 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
040261e0 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
040261ec l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
040261f8 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
04026204 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
04026210 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
0402621c l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
04026228 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
04026234 l     O .rodata	0000000a _ZL17pstrUsageACRename
04026240 l     O .rodata	00000009 _ZL16pstrUsageACMerge
0402624c l     O .rodata	00000009 _ZL16pstrUsageACSplit
04026258 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
04026264 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
04026270 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0402a178 l     O .rwdata	00000004 _ZL12pstrUsagePen
0402627c l     O .rodata	0000000a _ZL17pstrUsageLightPen
04026288 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
04026294 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
040262a0 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
040262ac l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0402a17c l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
040262bc l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0402a184 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
040262c8 l     O .rodata	00000009 _ZL17pstrUsageArmature
040262d4 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
040262e8 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0402a18c l     O .rwdata	00000007 _ZL15pstrUsageStylus
0402a194 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0402a19c l     O .rwdata	00000007 _ZL15pstrUsageFinger
040262f8 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
04026304 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
04026310 l     O .rodata	00000009 _ZL16pstrUsageInRange
0402a1a4 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0402a1ac l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0402a1b4 l     O .rwdata	00000004 _ZL12pstrUsageTap
0402a1b8 l     O .rwdata	00000005 _ZL16pstrUsageQuality
0402631c l     O .rodata	0000000b _ZL18pstrUsageDataValid
04026328 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
04026338 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
04026348 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0402a1c0 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0402a1c8 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0402a1d0 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0402a1d8 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
04026358 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0402a1e0 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0402a1e8 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
04026364 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0402a1f0 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0402a1f8 l     O .rwdata	00000007 _ZL15pstrUsageEraser
04026370 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0402637c l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0402638c l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
04026398 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
040263a8 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
040263b4 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
040263c4 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
040263d0 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
040263e0 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
040263ec l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
040263fc l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
0402640c l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
04026418 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
04026424 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
04026430 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0402643c l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
04026448 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
04026454 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
04026460 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
04026470 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
04026480 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0402a200 l     O .rwdata	00000004 _ZL12pstrUsageRow
0402a204 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0402a208 l     O .rwdata	00000005 _ZL13pstrUsageRows
0402a210 l     O .rwdata	00000005 _ZL16pstrUsageColumns
0402648c l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
04026498 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
040264a4 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
040264b0 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0402a218 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
040264bc l     O .rodata	00000009 _ZL17pstrUsageFontData
040264c8 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
040264d4 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
040264e0 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
040264f0 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
04026500 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
04026510 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0402651c l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
04026528 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
04026534 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
04026540 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0402654c l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
04026558 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
04026564 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
04026570 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0402657c l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0402658c l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0402659c l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
040265ac l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
040265b8 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
040265c4 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
040265d4 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0402a220 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
040265e0 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
040265f0 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
04026600 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0402660c l     O .rodata	00000009 _ZL19pstrUsageBlitReport
04026618 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
04026628 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
04026638 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
04026648 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
04026658 l     O .rodata	0000000a _ZL17pstrUsageBlitData
04026664 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
04026670 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0402667c l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0402668c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0402669c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
040266ac l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
040266bc l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0402a228 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0402a230 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
040266cc l     O .rodata	0000000b _ZL18pstrUsageClipStore
0402a238 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0402a240 l     O .rwdata	00000005 _ZL13pstrUsageNext
0402a248 l     O .rwdata	00000005 _ZL13pstrUsageSave
0402a250 l     O .rwdata	00000006 _ZL14pstrUsagePrint
040266d8 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0402a258 l     O .rwdata	00000005 _ZL13pstrUsageCine
040266e4 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0402a260 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0402a268 l     O .rwdata	00000006 _ZL14pstrUsageDepth
040266f0 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
04026700 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
04026710 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
04026720 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0402672c l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
04026738 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0402674c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
04026760 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
04026774 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
04026788 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
04026798 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
040267a8 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
040267b4 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
040267c0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
040267d0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
040267de l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
040267ee l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0400a518 l     F .text	00000054 _Z41__static_initialization_and_destruction_0ii
0400a56c l     F .text	00000030 _GLOBAL__sub_I_rcode
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0400b71c l     F .text	000000a4 _ZL21size_of_encoded_valueh
0400b7c0 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0400b9cc l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0400ba20 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0400baac l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0400bbe0 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0400bc68 l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0400be94 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0400c76c l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0400ca54 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
0402d5e0 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0400cb0c l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0400ccbc l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
0402d4cc l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0400db2c l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
0402d4d4 l     O .bss	00000004 fc_static
0400dc44 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0400dd04 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
04027104 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
04026f22 l     O .rodata	00000010 zeroes.4404
040114e4 l     F .text	000000bc __sbprintf
04026f32 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
040116f4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0401324c l     F .text	00000008 __fp_unlock
04013260 l     F .text	0000019c __sinit.part.1
040133fc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
04027950 l     O .rwdata	00000020 lc_ctype_charset
04027930 l     O .rwdata	00000020 lc_message_charset
04027970 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
04026f60 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
04015e8c l     F .text	000000fc __sprint_r.part.0
04027084 l     O .rodata	00000010 zeroes.4349
040174c8 l     F .text	000000bc __sbprintf
04027094 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0401b2d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0401b3e4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0401b444 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0401b558 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0401b640 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0401b7ac l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0401b898 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0401ba74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0402a2c8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0401bce8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0401bdcc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401bf08 l     F .text	00000034 alt_dev_reg
04027b50 l     O .rwdata	00000038 i2c_0
04027b88 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0401bfe8 l     F .text	00000110 optional_irq_callback
0401c148 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0401de24 l     F .text	0000020c altera_avalon_jtag_uart_irq
0401e030 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0401e864 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401ebfc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401f0ec l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0401f24c l     F .text	0000003c alt_get_errno
0401f288 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0402d50c g     O .bss	00000004 alt_instruction_exception_handler
0400cc14 g     F .text	00000028 __cxa_free_exception
0402025c  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0400ec2c g     F .text	00000018 putchar
0400b270 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
04015498 g     F .text	00000074 _mprec_log10
04004f90  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0400b6bc g     F .text	00000018 _ZSt10unexpectedv
04015584 g     F .text	0000008c __any_on
04017bd4 g     F .text	00000054 _isatty_r
04026f6c g     O .rodata	00000028 __mprec_tinytens
0401b9b0 g     F .text	0000007c alt_main
0400ec44 g     F .text	000000c0 _puts_r
04000e54 g     F .text	00000058 _ZN3USBC1Ev
0402d618 g     O .bss	00000100 alt_irq
0400cdb0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
04009264 g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
04017c28 g     F .text	00000060 _lseek_r
0400ddc0 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0402a2e0 g       *ABS*	00000000 __flash_rwdata_start
040069f8 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
04019d0c g     F .text	00000088 .hidden __eqdf2
04004f90  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
0400301c g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0400c840 g     F .text	00000084 __cxa_rethrow
0400dd4c g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0400b6f8 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
0400ddb0 g     F .text	00000010 .hidden _Unwind_GetIP
0402d718 g       *ABS*	00000000 __alt_heap_start
04008ba4  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0400f010 g     F .text	0000005c _kill_r
04006d54 g     F .text	00000188 _ZN9USBH_MIDIC2EP3USB
0400ebe8 g     F .text	0000003c printf
04020280  w    O .rodata	0000002c _ZTV15USBDeviceConfig
04017ce8 g     F .text	0000009c _wcrtomb_r
0400edd8 g     F .text	00000084 _signal_r
04006780  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
04015e28 g     F .text	0000005c __sseek
040135ac g     F .text	00000010 __sinit
04017584 g     F .text	00000140 __swbuf_r
040098d8 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0400cc90 g     F .text	0000002c __cxa_free_dependent_exception
0400a5c4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
04004f30  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
04014080 g     F .text	0000007c _setlocale_r
04026b68  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
04013404 g     F .text	00000078 __sfmoreglue
0401c840 g     F .text	000000a8 alt_avalon_i2c_rx_read
0401ba50 g     F .text	00000024 __malloc_unlock
0400cdb0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
040084f4 g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0400aff8 g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04008c8c  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
0400274c g     F .text	00000710 _ZN3USB11ConfiguringEhhb
0400ca34 g     F .text	00000020 _ZSt18uncaught_exceptionv
0400a3e8 g     F .text	000000f8 _Z9print_hexii
0401da58 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
040024bc g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
04009cac g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0402d4c8 g     O .bss	00000001 laststate
0400b2ec g     F .text	00000020 __cxa_deleted_virtual
0401c5c4 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
0400348c  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
04008d50 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
040096e8 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
040143fc g     F .text	0000015c memmove
0400649c  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0400cd88 g     F .text	00000004 _ZNSt9exceptionD2Ev
04013594 g     F .text	00000018 _cleanup
0401d2a8 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
04014558 g     F .text	000000a8 _Balloc
0400d9cc g     F .text	00000070 .hidden __fixsfsi
04004590 g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0400a390 g     F .text	00000058 _Z6halt55v
04019d94 g     F .text	000000dc .hidden __gtdf2
04004654 g     F .text	000000f8 _ZN7XBOXONE4PollEv
04026d9c  w    O .rodata	00000014 _ZTVSt13bad_exception
0401f8dc g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
0401bd24 g     F .text	00000078 times
04008c0c  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0400ddfc g     F .text	00000008 .hidden _Unwind_GetRegionStart
04028c04  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
04000020 g       *ABS*	00000000 __flash_exceptions_start
04008478 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
04000ae0 g     F .text	0000003c _ZN6SPI_SS3SetEh
0400545c  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
04017b78 g     F .text	0000005c _fstat_r
040093b4 g     F .text	0000008c _ZN8MAX3421e5regWrEhh
04001160 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
0402d4e4 g     O .bss	00000004 errno
040061dc g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
04015da4 g     F .text	00000008 __seofread
04008f60 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
0400dfd8 g     F .text	00000074 .hidden _Unwind_Backtrace
0402d4f8 g     O .bss	00000004 alt_argv
04003c1c g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
04030be8 g       *ABS*	00000000 _gp
0401bd9c g     F .text	00000030 usleep
0401da9c g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0400d4e8 g     F .text	000004e4 .hidden __subsf3
04007e04 g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
0402939c  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0401b538 g     F .text	00000020 getpid
0400c53c g     F .text	00000230 __cxa_call_unexpected
0400c8c4 g     F .text	00000008 __cxa_get_exception_ptr
0401c754 g     F .text	00000044 alt_avalon_i2c_is_busy
040279d0 g     O .rwdata	00000180 alt_fd_list
04009110 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
040201cc  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
04006d54 g     F .text	00000188 _ZN9USBH_MIDIC1EP3USB
04000dd4 g     F .text	00000058 _Z5delaym
04004d68 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0400ec24 g     F .text	00000008 _putchar_r
0400deec g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
0401c4f8 g     F .text	000000cc alt_avalon_i2c_master_config_set
0400235c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0400dd7c g     F .text	00000018 .hidden _Unwind_GetCFA
0400b6d4 g     F .text	00000014 _ZSt13set_terminatePFvvE
0401ed9c g     F .text	00000090 alt_find_dev
040201c0  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
0400f1e4 g     F .text	00000008 _times_r
0400e948 g     F .text	00000148 memcpy
04000ed8 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
04006564  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
04000b1c g     F .text	0000003c _ZN6SPI_SS5ClearEh
0400cc3c g     F .text	00000054 __cxa_allocate_dependent_exception
04013254 g     F .text	0000000c _cleanup_r
0400b384 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0401b14c g     F .text	000000dc .hidden __floatsidf
04020274  w    O .rodata	0000000c _ZTV13USBReadParser
0401f1d0 g     F .text	0000007c alt_io_redirect
04019e70 g     F .text	000000f4 .hidden __ltdf2
040052b0  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
040006bc g     F .text	00000300 initialize_sgtl5000
04000efc g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
0401ff08 g       *ABS*	00000000 __DTOR_END__
0400b39c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0401d0e8 g     F .text	000001c0 alt_avalon_i2c_master_transmit
0400ed04 g     F .text	00000014 puts
04026bf0  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
0401facc g     F .text	0000009c alt_exception_cause_generated_bad_addr
04007e8c g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
04009198 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
04015cdc g     F .text	00000074 __fpclassifyd
040153f4 g     F .text	000000a4 __ratio
040174ac g     F .text	0000001c __vfiprintf_internal
04007908 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
0401e228 g     F .text	0000021c altera_avalon_jtag_uart_read
0400e114 g     F .text	00000014 malloc
0400ebb8 g     F .text	00000030 _printf_r
08001280 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0400cf18 g     F .text	00000064 .hidden __udivsi3
0401b594 g     F .text	000000ac isatty
0400ee5c g     F .text	000000bc _raise_r
04009354 g     F .text	0000003c _ZN8MAX3421eC2Ev
04026fbc g     O .rodata	000000c8 __mprec_tens
040140fc g     F .text	0000000c __locale_charset
04000e54 g     F .text	00000058 _ZN3USBC2Ev
04005268  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
0401c364 g     F .text	00000098 alt_avalon_i2c_enable
0402d4e0 g     O .bss	00000004 __malloc_top_pad
0400f06c g     F .text	00000004 _getpid_r
0401d98c g     F .text	00000068 alt_avalon_i2c_int_disable
0402d4c4 g     O .bss	00000001 usb_task_state
0402a2a8 g     O .rwdata	00000004 __mb_cur_max
0401412c g     F .text	0000000c _localeconv_r
0400a888 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
040045c0 g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
04006edc g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
0401498c g     F .text	0000003c __i2b
04013a30 g     F .text	000004c8 __sfvwrite_r
0400b51c g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0400ef18 g     F .text	000000a8 __sigtramp_r
040081c0 g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
04003544  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
0400ed18 g     F .text	00000054 _sbrk_r
04026c38  w    O .rodata	00000020 _ZTVSt9type_info
04005360  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
04008ff8 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
04017c88 g     F .text	00000060 _read_r
0400cd90 g     F .text	0000000c _ZNKSt9exception4whatEv
0400026c g     F .text	000000b4 SGTL5000_Reg_Rd
0402a2c0 g     O .rwdata	00000004 alt_max_fd
04006850 g     F .text	00000050 _Z9E_Notifycci
04008300 g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
0401786c g     F .text	000000f0 _fclose_r
0401321c g     F .text	00000030 fflush
0402d4dc g     O .bss	00000004 __malloc_max_sbrked_mem
04009660 g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
0401d4b4 g     F .text	00000210 alt_avalon_i2c_master_receive
0402255c  w    O .rodata	0000000b _ZTS9USBH_MIDI
04018a90 g     F .text	000008ac .hidden __adddf3
04026b9c  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
0400538c  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
04008a58 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0401519c g     F .text	0000010c __b2d
040184cc g     F .text	000005c4 .hidden __umoddi3
0401b8d4 g     F .text	000000dc lseek
0400658c  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0400b3e0 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
040069a8 g     F .text	00000028 _Z8E_Notifyhi
0400b2c8 g     F .text	00000004 _ZdlPv
0401d9f4 g     F .text	00000064 alt_avalon_i2c_int_enable
0402a298 g     O .rwdata	00000004 _global_impure_ptr
0400a898 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
04015778 g     F .text	00000564 _realloc_r
0402d718 g       *ABS*	00000000 __bss_end
0401effc g     F .text	000000f0 alt_iic_isr_register
0401f7d4 g     F .text	00000108 alt_tick
04000aac g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0400dd34 g     F .text	00000018 .hidden _Unwind_SjLj_Register
04017ed0 g     F .text	000005fc .hidden __udivdi3
0401d8b4 g     F .text	00000058 alt_avalon_i2c_int_status_get
04017ad4 g     F .text	00000024 _fputwc_r
04026f94 g     O .rodata	00000028 __mprec_bigtens
04014770 g     F .text	00000104 __s2b
0400e0b0 g     F .text	00000018 abort
0401b228 g     F .text	000000a8 .hidden __floatunsidf
040224a0  w    O .rodata	00000014 _ZTS17MouseReportParser
04014edc g     F .text	00000060 __mcmp
04000e2c g     F .text	00000028 _Z6millisv
04008cc8  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
04003e00 g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0400c980 g     F .text	000000b4 __cxa_end_catch
0400908c g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
040135cc g     F .text	00000018 __fp_lock_all
040202b8  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
0401efb0 g     F .text	0000004c alt_ic_irq_enabled
0400cd8c g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
04003810  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
0400653c  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
0401f738 g     F .text	0000009c alt_alarm_stop
04000a70 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
040224e8  w    O .rodata	0000003c _ZTV9USBH_MIDI
04000f30 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
0401c1e4 g     F .text	00000054 alt_avalon_i2c_register_callback
0402d500 g     O .bss	00000004 alt_irq_active
0401c238 g     F .text	000000ec alt_avalon_i2c_init
0400b694 g     F .text	00000018 _ZSt9terminatev
040000fc g     F .exceptions	000000d4 alt_irq_handler
040279a8 g     O .rwdata	00000028 alt_dev_null
0400a8cc g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
040067b4  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0400cdb8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
0400560c  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
040039bc  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
040032e4 g     F .text	00000084 _ZN3USB7setConfEhhh
04008b9c g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
04026c94  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
04001044 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
0401ebdc g     F .text	00000020 alt_dcache_flush_all
04014874 g     F .text	00000068 __hi0bits
04022568  w    O .rodata	0000000c _ZTI14MidiDescParser
040098b0 g     F .text	00000028 _Z10Vbus_powerb
0402a280  w    O .rwdata	00000008 _ZTISt9exception
0401b0cc g     F .text	00000080 .hidden __fixdfsi
040224b4  w    O .rodata	00000012 _ZTS15HIDReportParser
0400a59c  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
04001990 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
04009f40 g     F .text	00000450 _Z9test_loopv
0402a2e0 g       *ABS*	00000000 __ram_rwdata_end
0400b26c g     F .text	00000004 _ZNSt9type_infoD1Ev
0402a2b8 g     O .rwdata	00000008 alt_dev_list
0400cdb8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0401be08 g     F .text	00000100 write
04015610 g     F .text	000000a0 _putc_r
04009d20 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
0401cb74 g     F .text	0000004c alt_avalon_i2c_check_arblost
0400b280 g     F .text	00000004 _ZNSt9type_infoD0Ev
04005484  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0400cffc g     F .text	000000bc .hidden __gtsf2
0400a4e0 g     F .text	00000038 _Z13press_any_keyv
0401d950 g     F .text	0000003c alt_avalon_i2c_int_clear
04008d24  w    F .text	0000002c _Z10D_PrintHexItEvT_i
040201ac  w    O .rodata	00000014 _ZTV11AddressPool
04027104 g       *ABS*	00000000 __ram_rodata_end
0401b480 g     F .text	000000b8 fstat
040033c0  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0401b67c g     F .text	00000130 kill
0400682c  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
04019e70 g     F .text	000000f4 .hidden __ledf2
040202e0  w    O .rodata	00000020 _ZTI7XBOXONE
0402a2cc g     O .rwdata	00000008 alt_avalon_i2c_list
040051f0  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
040223fa g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
04014c54 g     F .text	00000140 __pow5mult
040057d8  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
04015fa0 g     F .text	0000150c ___vfiprintf_internal_r
0402d4f0 g     O .bss	00000004 __nlocale_changed
0400cf7c g     F .text	00000058 .hidden __umodsi3
0400b278 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
04004fcc  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
04002e5c g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0400b6e8 g     F .text	00000010 _ZSt13get_terminatev
0402d718 g       *ABS*	00000000 end
04020268  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
040055d8  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
04009574 g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
0400674c  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0400dfc0 g     F .text	00000018 .hidden _Unwind_DeleteException
0401dd64 g     F .text	000000c0 altera_avalon_jtag_uart_init
04006514  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0401c324 g     F .text	00000040 alt_avalon_i2c_open
04022410 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
0400b44c g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0400a888 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
04029390 g     O .rwdata	00000004 UsbDEBUGlvl
0401ff00 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0401ccfc g     F .text	000000e8 alt_avalon_i2c_master_tx
0401e8dc g     F .text	0000007c alt_avalon_timer_sc_init
0400e04c g     F .text	00000064 .hidden __clzsi2
0400b30c g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0401e444 g     F .text	00000224 altera_avalon_jtag_uart_write
040135bc g     F .text	00000004 __sfp_lock_acquire
04026d24  w    O .rodata	00000012 _ZTSSt13bad_exception
04014318 g     F .text	000000e4 memchr
0400f1ec g     F .text	000022dc ___vfprintf_internal_r
04004f30  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
04013720 g     F .text	00000310 _free_r
0401f4d0 g     F .text	0000022c alt_printf
04014108 g     F .text	00000010 __locale_mb_cur_max
0401fd48 g     F .text	00000180 __call_exitprocs
04000b58 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
0402d4ec g     O .bss	00000004 __mlocale_changed
0401c0f8 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0402a2a0 g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
04004598 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
0402d504 g     O .bss	00000004 _alt_tick_rate
04026c28  w    O .rodata	0000000d _ZTSSt9type_info
0401d6c4 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0400b2cc g     F .text	00000020 __cxa_pure_virtual
04020198  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
04020320  w    O .rodata	00000010 _ZTS13USBReadParser
0401dae8 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
04014d94 g     F .text	00000148 __lshift
0401e668 g     F .text	000001fc alt_avalon_spi_command
0402d508 g     O .bss	00000004 _alt_nticks
0400efd4 g     F .text	00000018 signal
0401bab0 g     F .text	00000104 read
04005d04 g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
0401bf74 g     F .text	00000074 alt_sys_init
0402021c  w    O .rodata	00000040 _ZTV7XBOXONE
04001a40 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
04000c7c g     F .text	00000158 _Z14alt_busy_sleepj
0401fc30 g     F .text	00000118 __register_exitproc
04003250 g     F .text	00000094 _ZN3USB7setAddrEhhh
040068a0 g     F .text	00000084 _Z8E_NotifyPKci
04022524  w    O .rodata	0000000c _ZTV14MidiDescParser
04008c34  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
04003a50  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
04009d44 g     F .text	00000078 _Z8toBinaryh
0400a608 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
04006718  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
0400541c  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0401cf20 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
040149c8 g     F .text	0000028c __multiply
040031a8 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
0402937e g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
0401e0d0 g     F .text	00000068 altera_avalon_jtag_uart_close
040033c0  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0400cfd4 g     F .text	00000028 .hidden __mulsi3
04027104 g       *ABS*	00000000 __ram_rwdata_start
0400de1c g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
0401ff08 g       *ABS*	00000000 __ram_rodata_start
0402d5f0 g     O .bss	00000028 __malloc_current_mallinfo
04005674  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0400df30 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
040152a8 g     F .text	0000014c __d2b
04026dc4  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0400b26c g     F .text	00000004 _ZNSt9type_infoD2Ev
04008be4  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
04005088  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
04028bf0  w    O .rwdata	00000008 _ZTI11AddressPool
0400cdbc g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0400a804 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04022574  w    O .rodata	00000011 _ZTS14MidiDescParser
0400040c g     F .text	00000050 clearLED
04026bc8  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
0401dc00 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0401fa08 g     F .text	000000c4 alt_get_fd
04005f20 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
0401ea84 g     F .text	00000158 alt_busy_sleep
0402a290  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0401773c g     F .text	00000054 _close_r
0401fbb4 g     F .text	0000007c memcmp
0401c798 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
0401dcc0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040079dc g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
0402d718 g       *ABS*	00000000 __alt_stack_base
0401dd10 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0400a5c4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
04007c44 g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
04004cc8 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
040115a0 g     F .text	00000154 __swsetup_r
0400df74 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
0401933c g     F .text	000009d0 .hidden __divdf3
0401347c g     F .text	00000118 __sfp
0401550c g     F .text	00000078 __copybits
0400b270 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
04027528 g     O .rwdata	00000408 __malloc_av_
0400504c  w    F .text	0000003c _ZN11ByteSkipperC1Ev
04000b94 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
040135c8 g     F .text	00000004 __sinit_lock_release
04019f64 g     F .text	0000086c .hidden __muldf3
04015d50 g     F .text	00000054 __sread
04005640  w    F .text	00000034 _ZN13USBReadParserC2Ev
04026d88  w    O .rodata	00000014 _ZTVSt9exception
0400cdb4 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
0400338c  w    F .text	00000034 _ZN11AddressPoolC2Ev
0401f900 g     F .text	00000108 alt_find_file
04005334  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
0401ec38 g     F .text	000000a4 alt_dev_llist_insert
0401ba2c g     F .text	00000024 __malloc_lock
0401bc38 g     F .text	000000b0 sbrk
0401cbc0 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0401cb28 g     F .text	0000004c alt_avalon_i2c_check_nack
04026cc4  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0400c7b0 g     F .text	00000090 __cxa_throw
040131c0 g     F .text	0000005c _fflush_r
0400dde0 g     F .text	00000010 .hidden _Unwind_SetIP
040012ec g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
04017790 g     F .text	000000dc _calloc_r
0402030c  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
040069d0 g     F .text	00000028 _Z8E_Notifydi
0400779c g     F .text	0000016c _ZN9USBH_MIDI19setupDeviceSpecificEv
0402d4bc g       *ABS*	00000000 __bss_start
04028c14  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0400ea90 g     F .text	00000128 memset
04008300 g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
04005854  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
04009dbc g     F .text	00000184 main
040095e8 g     F .text	00000078 _ZN8MAX3421e5regRdEh
040097e4 g     F .text	000000cc _ZN8MAX3421e5resetEv
0401caf4 g     F .text	00000034 alt_avalon_i2c_master_target_set
0402d4fc g     O .bss	00000004 alt_envp
04020330  w    O .rodata	00000012 _ZTS15USBDeviceConfig
0402d4d8 g     O .bss	00000004 __malloc_max_total_mem
0401dc60 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0402d4c5 g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
040176c4 g     F .text	00000018 __swbuf
0400cd70 g     F .text	0000000c __cxa_get_globals_fast
0401d90c g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
04009354 g     F .text	0000003c _ZN8MAX3421eC1Ev
0400560c  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
04003368  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
04015e84 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0401795c g     F .text	00000014 fclose
04004b9c g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
04006924 g     F .text	00000084 _Z11E_NotifyStrPKci
04000bd0 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
0401191c g     F .text	00001688 _dtoa_r
0400e13c g     F .text	0000080c _malloc_r
04017e44 g     F .text	00000030 __ascii_wctomb
0400cd9c g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0402a2c4 g     O .rwdata	00000004 alt_errno
04022494  w    O .rodata	0000000c _ZTI17MouseReportParser
0400efec g     F .text	00000010 _init_signal
040030b0 g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
04026cb8  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
04004e0c g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
04013ef8 g     F .text	000000c4 _fwalk
04009390 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
04003954  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0400cd8c g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
040156b0 g     F .text	000000c8 putc
0400ce20 g     F .text	00000084 .hidden __divsi3
04022588  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
0400057c g     F .text	00000140 printSignedHex1
040135fc g     F .text	00000124 _malloc_trim_r
0401ff08 g       *ABS*	00000000 __CTOR_END__
0400d0b8 g     F .text	00000430 .hidden __mulsf3
0400522c  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
04008cf0  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
04022448  w    O .rodata	00000028 _ZTV17MouseReportParser
0400f070 g     F .text	000000dc strcmp
04003c1c g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
0401ff08 g       *ABS*	00000000 __flash_rodata_start
04026db0  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0401ff08 g       *ABS*	00000000 __DTOR_LIST__
04022530  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
04000320 g     F .text	000000a0 SGTL5000_Reg_Wr
0402d4c7 g     O .bss	00000001 usbstate
04019d0c g     F .text	00000088 .hidden __nedf2
0401bf3c g     F .text	00000038 alt_irq_init
0401bbb4 g     F .text	00000084 alt_release_fd
0400a5d4 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
04020300  w    O .rodata	00000009 _ZTS7XBOXONE
04026dd8 g     O .rodata	00000100 .hidden __clz_tab
0402d4e8 g     O .bss	00000004 _PathLocale
0401fb68 g     F .text	00000014 atexit
0400cffc g     F .text	000000bc .hidden __gesf2
040176dc g     F .text	00000060 _write_r
04002f94 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
04003518  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
04014138 g     F .text	00000018 setlocale
04000c48 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
0402241c  w    O .rodata	0000002c _ZTV20KeyboardReportParser
04009768 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0400de14 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
04026bfc  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0400cd18 g     F .text	00000058 __cxa_call_terminate
0402a29c g     O .rwdata	00000004 _impure_ptr
0402a288  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
040201e8  w    O .rodata	0000000e _ZTS11AddressPool
0402d4f4 g     O .bss	00000004 alt_argc
04003b54  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
04012fa4 g     F .text	0000021c __sflush_r
04008cf0  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
040037a4  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
0401ed3c g     F .text	00000060 _do_dtors
04014124 g     F .text	00000008 __locale_cjk_lang
0401cabc g     F .text	00000038 alt_avalon_i2c_master_target_get
0401c9cc g     F .text	000000f0 alt_avalon_i2c_send_address
0402d510 g     O .bss	00000012 buf
0400b70c g     F .text	00000010 _ZSt14get_unexpectedv
04000020 g       .exceptions	00000000 alt_irq_entry
0400338c  w    F .text	00000034 _ZN11AddressPoolC1Ev
04000eac g     F .text	0000002c _ZN3USB4initEv
04015138 g     F .text	00000064 __ulp
0400de04 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
040135e4 g     F .text	00000018 __fp_unlock_all
04005674  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
04004c8c g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
040052d4  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0402a2b0 g     O .rwdata	00000008 alt_fs_list
04026d64  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
0402247c  w    O .rodata	00000017 _ZTS20KeyboardReportParser
04005640  w    F .text	00000034 _ZN13USBReadParserC1Ev
0400ddf0 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
04005300  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0400c8cc g     F .text	000000b4 __cxa_begin_catch
04004e84 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
0400b39c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0400b6ac g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
040064ec  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
04000020 g       *ABS*	00000000 __ram_exceptions_start
04014150 g     F .text	0000000c localeconv
04009ad4 g     F .text	00000174 _ZN8MAX3421e8busprobeEv
040009bc g     F .text	0000003c _ZN6SPI_SS5WriteEh
040003c0 g     F .text	0000004c setLED
040054ac  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0400cdac g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
0401db98 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0402a27c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
04000c0c g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
04008df0 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
0401ee4c g     F .text	00000050 alt_ic_isr_register
0401c3fc g     F .text	0000004c alt_avalon_i2c_disable
0400cbb4 g     F .text	00000060 __cxa_allocate_exception
04026b90  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0402a2e0 g       *ABS*	00000000 _edata
040055d8  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
0402d718 g       *ABS*	00000000 _end
0400a9f4 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0400bf3c g     F .text	00000600 __gxx_personality_sj0
04017970 g     F .text	00000164 __fputwc
04000230 g       *ABS*	00000000 __ram_exceptions_end
04001f6c g     F .text	000003f0 _ZN3USB4TaskEv
0401e138 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
040009f8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
04028c0c  w    O .rwdata	00000008 _ZTI13USBReadParser
0401c448 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0400cd88 g     F .text	00000004 _ZNSt9exceptionD1Ev
0401ef24 g     F .text	0000008c alt_ic_irq_disable
04006474  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
04015dac g     F .text	0000007c __swrite
0402a2a4 g     O .rwdata	00000004 __malloc_trim_threshold
04014118 g     F .text	0000000c __locale_msgcharset
0401fb7c g     F .text	00000038 exit
0400dd94 g     F .text	0000001c .hidden _Unwind_SetGR
040064c4  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
04013fbc g     F .text	000000c4 _fwalk_reent
0400a768 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0400da3c g     F .text	000000f0 .hidden __floatunsisf
04014f3c g     F .text	000001fc __mdiff
0400b5d4 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0400cea4 g     F .text	00000074 .hidden __modsi3
040016e4 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0402d4c6 g     O .bss	00000001 rcode
040135c0 g     F .text	00000004 __sfp_lock_release
04026d38  w    O .rodata	0000000c _ZTISt13bad_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
040067dc  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
0400474c g     F .text	000003c8 _ZN7XBOXONE10readReportEv
0401c658 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
040099bc g     F .text	00000118 _ZN8MAX3421e4InitEi
04001dec g     F .text	00000180 _ZN3USB11dispatchPktEhht
0401c8e8 g     F .text	000000e4 alt_avalon_i2c_cmd_write
0402253c  w    O .rodata	00000020 _ZTI9USBH_MIDI
04004b14 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0400cdc0 g     F .text	00000060 .hidden __fixunssfsi
040076fc g     F .text	000000a0 _ZN9USBH_MIDI7ReleaseEv
0401b410 g     F .text	00000034 _exit
0401e958 g     F .text	0000012c alt_alarm_start
04022470  w    O .rodata	0000000c _ZTI20KeyboardReportParser
04007da0 g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0400045c g     F .text	00000120 printSignedHex0
0400dd60 g     F .text	0000001c .hidden _Unwind_GetGR
0400cd7c g     F .text	0000000c __cxa_get_globals
04006b00 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
0401415c g     F .text	000001bc __smakebuf_r
0402a278 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0400528c  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0400f14c g     F .text	00000098 strlen
0400ed6c g     F .text	0000006c _init_signal_r
0402a270  w    O .rwdata	00000008 _ZTISt9type_info
0401f374 g     F .text	0000015c open
04019d94 g     F .text	000000dc .hidden __gedf2
0401f6fc g     F .text	0000003c alt_putchar
04026d14  w    O .rodata	0000000d _ZTSSt9exception
0400e0c8 g     F .text	0000004c clock
04006804  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
04009c48 g     F .text	00000064 _ZN8MAX3421e4TaskEv
04022404 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
04009440 g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0402a2ac g     O .rwdata	00000004 __wctomb
0400cda8 g     F .text	00000004 _ZNSt9exceptionD0Ev
04015f88 g     F .text	00000018 __sprint_r
0401ee2c g     F .text	00000020 alt_icache_flush_all
0400de0c g     F .text	00000008 .hidden _Unwind_GetDataRelBase
0402d524 g     O .bss	000000bc Usb
0402a2d4 g     O .rwdata	00000004 alt_priority_mask
0400504c  w    F .text	0000003c _ZN11ByteSkipperC2Ev
0401ee9c g     F .text	00000088 alt_ic_irq_enable
040114c8 g     F .text	0000001c __vfprintf_internal
04000a3c g     F .text	00000034 _ZN6SPI_SS4ReadEv
04017e74 g     F .text	0000005c _wctomb_r
0401a7d0 g     F .text	000008fc .hidden __subdf3
040015fc g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
04004454 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
040148dc g     F .text	000000b0 __lo0bits
0402a2d8 g     O .rwdata	00000008 alt_alarm_list
0401ecdc g     F .text	00000060 _do_ctors
040202ac  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0400effc g     F .text	00000014 __sigtramp
04008ea8 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
04017d84 g     F .text	000000c0 wcrtomb
0401b30c g     F .text	000000d8 close
0401db4c g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
04026d44  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0401b814 g     F .text	00000084 alt_load
0401cde4 g     F .text	0000013c alt_avalon_i2c_master_rx
0400b284 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
040050f0  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
04017af8 g     F .text	00000080 fputwc
0400efc0 g     F .text	00000014 raise
04029384  w    O .rwdata	00000008 _ZTI15HIDReportParser
0400e128 g     F .text	00000014 free
040135c4 g     F .text	00000004 __sinit_lock_acquire
04014628 g     F .text	00000148 __multadd
0400b3ac g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
04014600 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100f4 	movhi	r2,1027
 4000140:	10b58604 	addi	r2,r2,-10728
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100f4 	movhi	r2,1027
 4000158:	10b58604 	addi	r2,r2,-10728
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_mem_onchip_memory2_0+0xfbffeeac>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_mem_onchip_memory2_0+0xfbffeea0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0b24917 	ldw	r2,-14044(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0b24917 	ldw	r2,-14044(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 400023c:	d682fa14 	ori	gp,gp,3048
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	008100b4 	movhi	r2,1026
    ori r2, r2, %lo(__bss_start)
 4000244:	10b52f14 	ori	r2,r2,54460

    movhi r3, %hi(__bss_end)
 4000248:	00c100b4 	movhi	r3,1026
    ori r3, r3, %lo(__bss_end)
 400024c:	18f5c614 	ori	r3,r3,55064

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_mem_onchip_memory2_0+0xfbffefd4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	401b8140 	call	401b814 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	401b9b00 	call	401b9b0 <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_mem_onchip_memory2_0+0xfbffefe8>

0400026c <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
 400026c:	defff804 	addi	sp,sp,-32
 4000270:	dfc00715 	stw	ra,28(sp)
 4000274:	df000615 	stw	fp,24(sp)
 4000278:	df000604 	addi	fp,sp,24
 400027c:	e13ffe15 	stw	r4,-8(fp)
 4000280:	2805883a 	mov	r2,r5
 4000284:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
 4000288:	e0bfff0b 	ldhu	r2,-4(fp)
 400028c:	1004d23a 	srli	r2,r2,8
 4000290:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
 4000294:	e0bfff0b 	ldhu	r2,-4(fp)
 4000298:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
 400029c:	e13ffd84 	addi	r4,fp,-10
 40002a0:	e0fffd84 	addi	r3,fp,-10
 40002a4:	d8000115 	stw	zero,4(sp)
 40002a8:	00800084 	movi	r2,2
 40002ac:	d8800015 	stw	r2,0(sp)
 40002b0:	200f883a 	mov	r7,r4
 40002b4:	01800084 	movi	r6,2
 40002b8:	180b883a 	mov	r5,r3
 40002bc:	e13ffe17 	ldw	r4,-8(fp)
 40002c0:	401cf200 	call	401cf20 <alt_avalon_i2c_master_tx_rx>
 40002c4:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 40002c8:	e0bffc17 	ldw	r2,-16(fp)
 40002cc:	10000626 	beq	r2,zero,40002e8 <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 40002d0:	e0bfff0b 	ldhu	r2,-4(fp)
 40002d4:	100b883a 	mov	r5,r2
 40002d8:	010100b4 	movhi	r4,1026
 40002dc:	213fc204 	addi	r4,r4,-248
 40002e0:	400ebe80 	call	400ebe8 <printf>
		while (1)
		{
			//hang here
		}
 40002e4:	003fff06 	br	40002e4 <__alt_mem_onchip_memory2_0+0xfbfff064>
	}
	value = (buffer[0] << 8) | buffer[1];
 40002e8:	e0bffd83 	ldbu	r2,-10(fp)
 40002ec:	10803fcc 	andi	r2,r2,255
 40002f0:	1004923a 	slli	r2,r2,8
 40002f4:	1007883a 	mov	r3,r2
 40002f8:	e0bffdc3 	ldbu	r2,-9(fp)
 40002fc:	10803fcc 	andi	r2,r2,255
 4000300:	1884b03a 	or	r2,r3,r2
 4000304:	e0bffd0d 	sth	r2,-12(fp)
	return value;
 4000308:	e0bffd0b 	ldhu	r2,-12(fp)
}
 400030c:	e037883a 	mov	sp,fp
 4000310:	dfc00117 	ldw	ra,4(sp)
 4000314:	df000017 	ldw	fp,0(sp)
 4000318:	dec00204 	addi	sp,sp,8
 400031c:	f800283a 	ret

04000320 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
 4000320:	defff904 	addi	sp,sp,-28
 4000324:	dfc00615 	stw	ra,24(sp)
 4000328:	df000515 	stw	fp,20(sp)
 400032c:	df000504 	addi	fp,sp,20
 4000330:	e13ffd15 	stw	r4,-12(fp)
 4000334:	2807883a 	mov	r3,r5
 4000338:	3005883a 	mov	r2,r6
 400033c:	e0fffe0d 	sth	r3,-8(fp)
 4000340:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
 4000344:	e0bffe0b 	ldhu	r2,-8(fp)
 4000348:	1004d23a 	srli	r2,r2,8
 400034c:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
 4000350:	e0bffe0b 	ldhu	r2,-8(fp)
 4000354:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
 4000358:	e0bfff0b 	ldhu	r2,-4(fp)
 400035c:	1004d23a 	srli	r2,r2,8
 4000360:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
 4000364:	e0bfff0b 	ldhu	r2,-4(fp)
 4000368:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
 400036c:	e0bffc04 	addi	r2,fp,-16
 4000370:	000f883a 	mov	r7,zero
 4000374:	01800104 	movi	r6,4
 4000378:	100b883a 	mov	r5,r2
 400037c:	e13ffd17 	ldw	r4,-12(fp)
 4000380:	401ccfc0 	call	401ccfc <alt_avalon_i2c_master_tx>
 4000384:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 4000388:	e0bffb17 	ldw	r2,-20(fp)
 400038c:	10000626 	beq	r2,zero,40003a8 <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 4000390:	e0bffe0b 	ldhu	r2,-8(fp)
 4000394:	100b883a 	mov	r5,r2
 4000398:	010100b4 	movhi	r4,1026
 400039c:	213fc204 	addi	r4,r4,-248
 40003a0:	400ebe80 	call	400ebe8 <printf>
		while (1)
		{
			//hang here
		}
 40003a4:	003fff06 	br	40003a4 <__alt_mem_onchip_memory2_0+0xfbfff124>
	}
	return DATA;
 40003a8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 40003ac:	e037883a 	mov	sp,fp
 40003b0:	dfc00117 	ldw	ra,4(sp)
 40003b4:	df000017 	ldw	fp,0(sp)
 40003b8:	dec00204 	addi	sp,sp,8
 40003bc:	f800283a 	ret

040003c0 <setLED>:
#include "sgtl5000/GenericTypeDefs.h"
#include "sgtl5000/sgtl5000.h"
#include "sgtl5000_test.h"

void setLED(int LED)
{
 40003c0:	defffe04 	addi	sp,sp,-8
 40003c4:	df000115 	stw	fp,4(sp)
 40003c8:	df000104 	addi	fp,sp,4
 40003cc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
 40003d0:	00820034 	movhi	r2,2048
 40003d4:	10848804 	addi	r2,r2,4640
 40003d8:	10c00037 	ldwio	r3,0(r2)
 40003dc:	01000044 	movi	r4,1
 40003e0:	e0bfff17 	ldw	r2,-4(fp)
 40003e4:	2084983a 	sll	r2,r4,r2
 40003e8:	1886b03a 	or	r3,r3,r2
 40003ec:	00820034 	movhi	r2,2048
 40003f0:	10848804 	addi	r2,r2,4640
 40003f4:	10c00035 	stwio	r3,0(r2)
}
 40003f8:	0001883a 	nop
 40003fc:	e037883a 	mov	sp,fp
 4000400:	df000017 	ldw	fp,0(sp)
 4000404:	dec00104 	addi	sp,sp,4
 4000408:	f800283a 	ret

0400040c <clearLED>:

void clearLED(int LED)
{
 400040c:	defffe04 	addi	sp,sp,-8
 4000410:	df000115 	stw	fp,4(sp)
 4000414:	df000104 	addi	fp,sp,4
 4000418:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));
 400041c:	00820034 	movhi	r2,2048
 4000420:	10848804 	addi	r2,r2,4640
 4000424:	10c00037 	ldwio	r3,0(r2)
 4000428:	01000044 	movi	r4,1
 400042c:	e0bfff17 	ldw	r2,-4(fp)
 4000430:	2084983a 	sll	r2,r4,r2
 4000434:	0084303a 	nor	r2,zero,r2
 4000438:	1886703a 	and	r3,r3,r2
 400043c:	00820034 	movhi	r2,2048
 4000440:	10848804 	addi	r2,r2,4640
 4000444:	10c00035 	stwio	r3,0(r2)

}
 4000448:	0001883a 	nop
 400044c:	e037883a 	mov	sp,fp
 4000450:	df000017 	ldw	fp,0(sp)
 4000454:	dec00104 	addi	sp,sp,4
 4000458:	f800283a 	ret

0400045c <printSignedHex0>:

void printSignedHex0(signed char value)
{
 400045c:	defffc04 	addi	sp,sp,-16
 4000460:	dfc00315 	stw	ra,12(sp)
 4000464:	df000215 	stw	fp,8(sp)
 4000468:	df000204 	addi	fp,sp,8
 400046c:	2005883a 	mov	r2,r4
 4000470:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000474:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 4000478:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 400047c:	00820034 	movhi	r2,2048
 4000480:	10848c04 	addi	r2,r2,4656
 4000484:	10800037 	ldwio	r2,0(r2)
 4000488:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0)
 400048c:	e0bfff07 	ldb	r2,-4(fp)
 4000490:	1000060e 	bge	r2,zero,40004ac <printSignedHex0+0x50>
	{
		setLED(11);
 4000494:	010002c4 	movi	r4,11
 4000498:	40003c00 	call	40003c0 <setLED>
		value = -value;
 400049c:	e0bfff03 	ldbu	r2,-4(fp)
 40004a0:	0085c83a 	sub	r2,zero,r2
 40004a4:	e0bfff05 	stb	r2,-4(fp)
 40004a8:	00000206 	br	40004b4 <printSignedHex0+0x58>
	}
	else
	{
		clearLED(11);
 40004ac:	010002c4 	movi	r4,11
 40004b0:	400040c0 	call	400040c <clearLED>
	}
	//handled hundreds
	if (value / 100)
 40004b4:	e0bfff03 	ldbu	r2,-4(fp)
 40004b8:	108018c4 	addi	r2,r2,99
 40004bc:	10803fcc 	andi	r2,r2,255
 40004c0:	108031f0 	cmpltui	r2,r2,199
 40004c4:	1000031e 	bne	r2,zero,40004d4 <printSignedHex0+0x78>
		setLED(13);
 40004c8:	01000344 	movi	r4,13
 40004cc:	40003c00 	call	40003c0 <setLED>
 40004d0:	00000206 	br	40004dc <printSignedHex0+0x80>
	else
		clearLED(13);
 40004d4:	01000344 	movi	r4,13
 40004d8:	400040c0 	call	400040c <clearLED>

	value = value % 100;
 40004dc:	e0bfff07 	ldb	r2,-4(fp)
 40004e0:	01401904 	movi	r5,100
 40004e4:	1009883a 	mov	r4,r2
 40004e8:	400cea40 	call	400cea4 <__modsi3>
 40004ec:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 40004f0:	e0bfff07 	ldb	r2,-4(fp)
 40004f4:	01400284 	movi	r5,10
 40004f8:	1009883a 	mov	r4,r2
 40004fc:	400ce200 	call	400ce20 <__divsi3>
 4000500:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 4000504:	e0bfff07 	ldb	r2,-4(fp)
 4000508:	01400284 	movi	r5,10
 400050c:	1009883a 	mov	r4,r2
 4000510:	400cea40 	call	400cea4 <__modsi3>
 4000514:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 4000518:	e0bffe8b 	ldhu	r2,-6(fp)
 400051c:	10803fcc 	andi	r2,r2,255
 4000520:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 4000524:	e0bffe03 	ldbu	r2,-8(fp)
 4000528:	1004933a 	slli	r2,r2,12
 400052c:	1007883a 	mov	r3,r2
 4000530:	e0bffe8b 	ldhu	r2,-6(fp)
 4000534:	1884b03a 	or	r2,r3,r2
 4000538:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 400053c:	e0bffe43 	ldbu	r2,-7(fp)
 4000540:	1004923a 	slli	r2,r2,8
 4000544:	1007883a 	mov	r3,r2
 4000548:	e0bffe8b 	ldhu	r2,-6(fp)
 400054c:	1884b03a 	or	r2,r3,r2
 4000550:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000554:	e0fffe8b 	ldhu	r3,-6(fp)
 4000558:	00820034 	movhi	r2,2048
 400055c:	10848c04 	addi	r2,r2,4656
 4000560:	10c00035 	stwio	r3,0(r2)
}
 4000564:	0001883a 	nop
 4000568:	e037883a 	mov	sp,fp
 400056c:	dfc00117 	ldw	ra,4(sp)
 4000570:	df000017 	ldw	fp,0(sp)
 4000574:	dec00204 	addi	sp,sp,8
 4000578:	f800283a 	ret

0400057c <printSignedHex1>:

void printSignedHex1(signed char value)
{
 400057c:	defffb04 	addi	sp,sp,-20
 4000580:	dfc00415 	stw	ra,16(sp)
 4000584:	df000315 	stw	fp,12(sp)
 4000588:	df000304 	addi	fp,sp,12
 400058c:	2005883a 	mov	r2,r4
 4000590:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000594:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 4000598:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 400059c:	00820034 	movhi	r2,2048
 40005a0:	10848c04 	addi	r2,r2,4656
 40005a4:	10800037 	ldwio	r2,0(r2)
 40005a8:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0)
 40005ac:	e0bfff07 	ldb	r2,-4(fp)
 40005b0:	1000060e 	bge	r2,zero,40005cc <printSignedHex1+0x50>
	{
		setLED(10);
 40005b4:	01000284 	movi	r4,10
 40005b8:	40003c00 	call	40003c0 <setLED>
		value = -value;
 40005bc:	e0bfff03 	ldbu	r2,-4(fp)
 40005c0:	0085c83a 	sub	r2,zero,r2
 40005c4:	e0bfff05 	stb	r2,-4(fp)
 40005c8:	00000206 	br	40005d4 <printSignedHex1+0x58>
	}
	else
	{
		clearLED(10);
 40005cc:	01000284 	movi	r4,10
 40005d0:	400040c0 	call	400040c <clearLED>
	}
	//handled hundreds
	if (value / 100)
 40005d4:	e0bfff03 	ldbu	r2,-4(fp)
 40005d8:	108018c4 	addi	r2,r2,99
 40005dc:	10803fcc 	andi	r2,r2,255
 40005e0:	108031f0 	cmpltui	r2,r2,199
 40005e4:	1000031e 	bne	r2,zero,40005f4 <printSignedHex1+0x78>
		setLED(12);
 40005e8:	01000304 	movi	r4,12
 40005ec:	40003c00 	call	40003c0 <setLED>
 40005f0:	00000206 	br	40005fc <printSignedHex1+0x80>
	else
		clearLED(12);
 40005f4:	01000304 	movi	r4,12
 40005f8:	400040c0 	call	400040c <clearLED>

	value = value % 100;
 40005fc:	e0bfff07 	ldb	r2,-4(fp)
 4000600:	01401904 	movi	r5,100
 4000604:	1009883a 	mov	r4,r2
 4000608:	400cea40 	call	400cea4 <__modsi3>
 400060c:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 4000610:	e0bfff07 	ldb	r2,-4(fp)
 4000614:	01400284 	movi	r5,10
 4000618:	1009883a 	mov	r4,r2
 400061c:	400ce200 	call	400ce20 <__divsi3>
 4000620:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 4000624:	e0bfff07 	ldb	r2,-4(fp)
 4000628:	01400284 	movi	r5,10
 400062c:	1009883a 	mov	r4,r2
 4000630:	400cea40 	call	400cea4 <__modsi3>
 4000634:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 4000638:	e0bfff07 	ldb	r2,-4(fp)
 400063c:	01400284 	movi	r5,10
 4000640:	1009883a 	mov	r4,r2
 4000644:	400ce200 	call	400ce20 <__divsi3>
 4000648:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 400064c:	e0bfff07 	ldb	r2,-4(fp)
 4000650:	01400284 	movi	r5,10
 4000654:	1009883a 	mov	r4,r2
 4000658:	400cea40 	call	400cea4 <__modsi3>
 400065c:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 4000660:	e0bffe17 	ldw	r2,-8(fp)
 4000664:	10bfc00c 	andi	r2,r2,65280
 4000668:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 400066c:	e0bffd03 	ldbu	r2,-12(fp)
 4000670:	1004913a 	slli	r2,r2,4
 4000674:	1007883a 	mov	r3,r2
 4000678:	e0bffe17 	ldw	r2,-8(fp)
 400067c:	10c4b03a 	or	r2,r2,r3
 4000680:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 4000684:	e0bffd43 	ldbu	r2,-11(fp)
 4000688:	e0fffe17 	ldw	r3,-8(fp)
 400068c:	1884b03a 	or	r2,r3,r2
 4000690:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000694:	e0fffe17 	ldw	r3,-8(fp)
 4000698:	00820034 	movhi	r2,2048
 400069c:	10848c04 	addi	r2,r2,4656
 40006a0:	10c00035 	stwio	r3,0(r2)
}
 40006a4:	0001883a 	nop
 40006a8:	e037883a 	mov	sp,fp
 40006ac:	dfc00117 	ldw	ra,4(sp)
 40006b0:	df000017 	ldw	fp,0(sp)
 40006b4:	dec00204 	addi	sp,sp,8
 40006b8:	f800283a 	ret

040006bc <initialize_sgtl5000>:


int initialize_sgtl5000()
{
 40006bc:	defffc04 	addi	sp,sp,-16
 40006c0:	dfc00315 	stw	ra,12(sp)
 40006c4:	df000215 	stw	fp,8(sp)
 40006c8:	df000204 	addi	fp,sp,8
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
 40006cc:	010100b4 	movhi	r4,1026
 40006d0:	213fca04 	addi	r4,r4,-216
 40006d4:	401c3240 	call	401c324 <alt_avalon_i2c_open>
 40006d8:	e0bffe15 	stw	r2,-8(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
 40006dc:	e0bffe17 	ldw	r2,-8(fp)
 40006e0:	1000051e 	bne	r2,zero,40006f8 <initialize_sgtl5000+0x3c>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
 40006e4:	010100b4 	movhi	r4,1026
 40006e8:	213fcd04 	addi	r4,r4,-204
 40006ec:	400ed040 	call	400ed04 <puts>
		return 1;
 40006f0:	00800044 	movi	r2,1
 40006f4:	0000ac06 	br	40009a8 <initialize_sgtl5000+0x2ec>
	}
	printf ("I2C Test Program\n");
 40006f8:	010100b4 	movhi	r4,1026
 40006fc:	213fd504 	addi	r4,r4,-172
 4000700:	400ed040 	call	400ed04 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
 4000704:	01400284 	movi	r5,10
 4000708:	e13ffe17 	ldw	r4,-8(fp)
 400070c:	401caf40 	call	401caf4 <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
 4000710:	000b883a 	mov	r5,zero
 4000714:	e13ffe17 	ldw	r4,-8(fp)
 4000718:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 400071c:	10bfffcc 	andi	r2,r2,65535
 4000720:	100b883a 	mov	r5,r2
 4000724:	010100b4 	movhi	r4,1026
 4000728:	213fda04 	addi	r4,r4,-152
 400072c:	400ebe80 	call	400ebe8 <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
 4000730:	00800384 	movi	r2,14
 4000734:	e0bfff05 	stb	r2,-4(fp)
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
 4000738:	e0bfff03 	ldbu	r2,-4(fp)
 400073c:	1009883a 	mov	r4,r2
 4000740:	400da3c0 	call	400da3c <__floatunsisf>
 4000744:	1007883a 	mov	r3,r2
 4000748:	180b883a 	mov	r5,r3
 400074c:	011059f4 	movhi	r4,16743
 4000750:	210d8144 	addi	r4,r4,13829
 4000754:	400d4e80 	call	400d4e8 <__subsf3>
 4000758:	1007883a 	mov	r3,r2
 400075c:	1805883a 	mov	r2,r3
 4000760:	01514034 	movhi	r5,17664
 4000764:	1009883a 	mov	r4,r2
 4000768:	400d0b80 	call	400d0b8 <__mulsf3>
 400076c:	1007883a 	mov	r3,r2
 4000770:	1805883a 	mov	r2,r3
 4000774:	1009883a 	mov	r4,r2
 4000778:	400cdc00 	call	400cdc0 <__fixunssfsi>
 400077c:	e0bfff8d 	sth	r2,-2(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
 4000780:	e0bfff03 	ldbu	r2,-4(fp)
 4000784:	e0ffff8b 	ldhu	r3,-2(fp)
 4000788:	180d883a 	mov	r6,r3
 400078c:	100b883a 	mov	r5,r2
 4000790:	010100b4 	movhi	r4,1026
 4000794:	213fe004 	addi	r4,r4,-128
 4000798:	400ebe80 	call	400ebe8 <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
 400079c:	e0bfff03 	ldbu	r2,-4(fp)
 40007a0:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
 40007a4:	1007883a 	mov	r3,r2
 40007a8:	e0bfff8b 	ldhu	r2,-2(fp)
 40007ac:	1884b03a 	or	r2,r3,r2
 40007b0:	10bfffcc 	andi	r2,r2,65535
 40007b4:	100d883a 	mov	r6,r2
 40007b8:	01400c84 	movi	r5,50
 40007bc:	e13ffe17 	ldw	r4,-8(fp)
 40007c0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
 40007c4:	01400c84 	movi	r5,50
 40007c8:	e13ffe17 	ldw	r4,-8(fp)
 40007cc:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40007d0:	10bfffcc 	andi	r2,r2,65535
 40007d4:	100b883a 	mov	r5,r2
 40007d8:	010100b4 	movhi	r4,1026
 40007dc:	213ff104 	addi	r4,r4,-60
 40007e0:	400ebe80 	call	400ebe8 <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
 40007e4:	01917f84 	movi	r6,17918
 40007e8:	01400c04 	movi	r5,48
 40007ec:	e13ffe17 	ldw	r4,-8(fp)
 40007f0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
 40007f4:	01400c04 	movi	r5,48
 40007f8:	e13ffe17 	ldw	r4,-8(fp)
 40007fc:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000800:	10bfffcc 	andi	r2,r2,65535
 4000804:	100b883a 	mov	r5,r2
 4000808:	010100b4 	movhi	r4,1026
 400080c:	213ff804 	addi	r4,r4,-32
 4000810:	400ebe80 	call	400ebe8 <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
 4000814:	01801384 	movi	r6,78
 4000818:	01400a04 	movi	r5,40
 400081c:	e13ffe17 	ldw	r4,-8(fp)
 4000820:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
 4000824:	01400a04 	movi	r5,40
 4000828:	e13ffe17 	ldw	r4,-8(fp)
 400082c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000830:	10bfffcc 	andi	r2,r2,65535
 4000834:	100b883a 	mov	r5,r2
 4000838:	010100b4 	movhi	r4,1026
 400083c:	21000004 	addi	r4,r4,0
 4000840:	400ebe80 	call	400ebe8 <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
 4000844:	018018c4 	movi	r6,99
 4000848:	01400084 	movi	r5,2
 400084c:	e13ffe17 	ldw	r4,-8(fp)
 4000850:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
 4000854:	01400084 	movi	r5,2
 4000858:	e13ffe17 	ldw	r4,-8(fp)
 400085c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000860:	10bfffcc 	andi	r2,r2,65535
 4000864:	100b883a 	mov	r5,r2
 4000868:	010100b4 	movhi	r4,1026
 400086c:	21000704 	addi	r4,r4,28
 4000870:	400ebe80 	call	400ebe8 <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
 4000874:	018001c4 	movi	r6,7
 4000878:	01400104 	movi	r5,4
 400087c:	e13ffe17 	ldw	r4,-8(fp)
 4000880:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
 4000884:	01400104 	movi	r5,4
 4000888:	e13ffe17 	ldw	r4,-8(fp)
 400088c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000890:	10bfffcc 	andi	r2,r2,65535
 4000894:	100b883a 	mov	r5,r2
 4000898:	010100b4 	movhi	r4,1026
 400089c:	21000f04 	addi	r4,r4,60
 40008a0:	400ebe80 	call	400ebe8 <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
 40008a4:	01802004 	movi	r6,128
 40008a8:	01400184 	movi	r5,6
 40008ac:	e13ffe17 	ldw	r4,-8(fp)
 40008b0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
 40008b4:	01400184 	movi	r5,6
 40008b8:	e13ffe17 	ldw	r4,-8(fp)
 40008bc:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40008c0:	10bfffcc 	andi	r2,r2,65535
 40008c4:	100b883a 	mov	r5,r2
 40008c8:	010100b4 	movhi	r4,1026
 40008cc:	21001604 	addi	r4,r4,88
 40008d0:	400ebe80 	call	400ebe8 <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
 40008d4:	01800104 	movi	r6,4
 40008d8:	01400904 	movi	r5,36
 40008dc:	e13ffe17 	ldw	r4,-8(fp)
 40008e0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 40008e4:	01400904 	movi	r5,36
 40008e8:	e13ffe17 	ldw	r4,-8(fp)
 40008ec:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40008f0:	10bfffcc 	andi	r2,r2,65535
 40008f4:	100b883a 	mov	r5,r2
 40008f8:	010100b4 	movhi	r4,1026
 40008fc:	21001d04 	addi	r4,r4,116
 4000900:	400ebe80 	call	400ebe8 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
 4000904:	01800404 	movi	r6,16
 4000908:	01400284 	movi	r5,10
 400090c:	e13ffe17 	ldw	r4,-8(fp)
 4000910:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
 4000914:	01400284 	movi	r5,10
 4000918:	e13ffe17 	ldw	r4,-8(fp)
 400091c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000920:	10bfffcc 	andi	r2,r2,65535
 4000924:	100b883a 	mov	r5,r2
 4000928:	010100b4 	movhi	r4,1026
 400092c:	21002404 	addi	r4,r4,144
 4000930:	400ebe80 	call	400ebe8 <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 4000934:	01400904 	movi	r5,36
 4000938:	e13ffe17 	ldw	r4,-8(fp)
 400093c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000940:	10bfffcc 	andi	r2,r2,65535
 4000944:	100b883a 	mov	r5,r2
 4000948:	010100b4 	movhi	r4,1026
 400094c:	21001d04 	addi	r4,r4,116
 4000950:	400ebe80 	call	400ebe8 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
 4000954:	000d883a 	mov	r6,zero
 4000958:	01400384 	movi	r5,14
 400095c:	e13ffe17 	ldw	r4,-8(fp)
 4000960:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
 4000964:	01400384 	movi	r5,14
 4000968:	e13ffe17 	ldw	r4,-8(fp)
 400096c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000970:	10bfffcc 	andi	r2,r2,65535
 4000974:	100b883a 	mov	r5,r2
 4000978:	010100b4 	movhi	r4,1026
 400097c:	21002b04 	addi	r4,r4,172
 4000980:	400ebe80 	call	400ebe8 <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
 4000984:	01400504 	movi	r5,20
 4000988:	e13ffe17 	ldw	r4,-8(fp)
 400098c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000990:	10bfffcc 	andi	r2,r2,65535
 4000994:	100b883a 	mov	r5,r2
 4000998:	010100b4 	movhi	r4,1026
 400099c:	21003304 	addi	r4,r4,204
 40009a0:	400ebe80 	call	400ebe8 <printf>


	return 0;
 40009a4:	0005883a 	mov	r2,zero
}
 40009a8:	e037883a 	mov	sp,fp
 40009ac:	dfc00117 	ldw	ra,4(sp)
 40009b0:	df000017 	ldw	fp,0(sp)
 40009b4:	dec00204 	addi	sp,sp,8
 40009b8:	f800283a 	ret

040009bc <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
 40009bc:	defffd04 	addi	sp,sp,-12
 40009c0:	dfc00215 	stw	ra,8(sp)
 40009c4:	df000115 	stw	fp,4(sp)
 40009c8:	df000104 	addi	fp,sp,4
 40009cc:	2005883a 	mov	r2,r4
 40009d0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
 40009d4:	010100b4 	movhi	r4,1026
 40009d8:	21003b04 	addi	r4,r4,236
 40009dc:	400ed040 	call	400ed04 <puts>
}
 40009e0:	0001883a 	nop
 40009e4:	e037883a 	mov	sp,fp
 40009e8:	dfc00117 	ldw	ra,4(sp)
 40009ec:	df000017 	ldw	fp,0(sp)
 40009f0:	dec00204 	addi	sp,sp,8
 40009f4:	f800283a 	ret

040009f8 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
 40009f8:	defffc04 	addi	sp,sp,-16
 40009fc:	dfc00315 	stw	ra,12(sp)
 4000a00:	df000215 	stw	fp,8(sp)
 4000a04:	df000204 	addi	fp,sp,8
 4000a08:	2007883a 	mov	r3,r4
 4000a0c:	2805883a 	mov	r2,r5
 4000a10:	e0fffe05 	stb	r3,-8(fp)
 4000a14:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
 4000a18:	010100b4 	movhi	r4,1026
 4000a1c:	21003e04 	addi	r4,r4,248
 4000a20:	400ed040 	call	400ed04 <puts>
}
 4000a24:	0001883a 	nop
 4000a28:	e037883a 	mov	sp,fp
 4000a2c:	dfc00117 	ldw	ra,4(sp)
 4000a30:	df000017 	ldw	fp,0(sp)
 4000a34:	dec00204 	addi	sp,sp,8
 4000a38:	f800283a 	ret

04000a3c <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
 4000a3c:	defffe04 	addi	sp,sp,-8
 4000a40:	dfc00115 	stw	ra,4(sp)
 4000a44:	df000015 	stw	fp,0(sp)
 4000a48:	d839883a 	mov	fp,sp
	printf("Port Read\n");
 4000a4c:	010100b4 	movhi	r4,1026
 4000a50:	21004304 	addi	r4,r4,268
 4000a54:	400ed040 	call	400ed04 <puts>
}
 4000a58:	0001883a 	nop
 4000a5c:	e037883a 	mov	sp,fp
 4000a60:	dfc00117 	ldw	ra,4(sp)
 4000a64:	df000017 	ldw	fp,0(sp)
 4000a68:	dec00204 	addi	sp,sp,8
 4000a6c:	f800283a 	ret

04000a70 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
 4000a70:	defffd04 	addi	sp,sp,-12
 4000a74:	dfc00215 	stw	ra,8(sp)
 4000a78:	df000115 	stw	fp,4(sp)
 4000a7c:	df000104 	addi	fp,sp,4
 4000a80:	2005883a 	mov	r2,r4
 4000a84:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
 4000a88:	010100b4 	movhi	r4,1026
 4000a8c:	21004604 	addi	r4,r4,280
 4000a90:	400ed040 	call	400ed04 <puts>
}
 4000a94:	0001883a 	nop
 4000a98:	e037883a 	mov	sp,fp
 4000a9c:	dfc00117 	ldw	ra,4(sp)
 4000aa0:	df000017 	ldw	fp,0(sp)
 4000aa4:	dec00204 	addi	sp,sp,8
 4000aa8:	f800283a 	ret

04000aac <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
 4000aac:	defffe04 	addi	sp,sp,-8
 4000ab0:	dfc00115 	stw	ra,4(sp)
 4000ab4:	df000015 	stw	fp,0(sp)
 4000ab8:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
 4000abc:	010100b4 	movhi	r4,1026
 4000ac0:	21004a04 	addi	r4,r4,296
 4000ac4:	400ed040 	call	400ed04 <puts>
}
 4000ac8:	0001883a 	nop
 4000acc:	e037883a 	mov	sp,fp
 4000ad0:	dfc00117 	ldw	ra,4(sp)
 4000ad4:	df000017 	ldw	fp,0(sp)
 4000ad8:	dec00204 	addi	sp,sp,8
 4000adc:	f800283a 	ret

04000ae0 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
 4000ae0:	defffd04 	addi	sp,sp,-12
 4000ae4:	dfc00215 	stw	ra,8(sp)
 4000ae8:	df000115 	stw	fp,4(sp)
 4000aec:	df000104 	addi	fp,sp,4
 4000af0:	2005883a 	mov	r2,r4
 4000af4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
 4000af8:	010100b4 	movhi	r4,1026
 4000afc:	21004e04 	addi	r4,r4,312
 4000b00:	400ed040 	call	400ed04 <puts>
}
 4000b04:	0001883a 	nop
 4000b08:	e037883a 	mov	sp,fp
 4000b0c:	dfc00117 	ldw	ra,4(sp)
 4000b10:	df000017 	ldw	fp,0(sp)
 4000b14:	dec00204 	addi	sp,sp,8
 4000b18:	f800283a 	ret

04000b1c <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
 4000b1c:	defffd04 	addi	sp,sp,-12
 4000b20:	dfc00215 	stw	ra,8(sp)
 4000b24:	df000115 	stw	fp,4(sp)
 4000b28:	df000104 	addi	fp,sp,4
 4000b2c:	2005883a 	mov	r2,r4
 4000b30:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
 4000b34:	010100b4 	movhi	r4,1026
 4000b38:	21005104 	addi	r4,r4,324
 4000b3c:	400ed040 	call	400ed04 <puts>
}
 4000b40:	0001883a 	nop
 4000b44:	e037883a 	mov	sp,fp
 4000b48:	dfc00117 	ldw	ra,4(sp)
 4000b4c:	df000017 	ldw	fp,0(sp)
 4000b50:	dec00204 	addi	sp,sp,8
 4000b54:	f800283a 	ret

04000b58 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
 4000b58:	defffd04 	addi	sp,sp,-12
 4000b5c:	dfc00215 	stw	ra,8(sp)
 4000b60:	df000115 	stw	fp,4(sp)
 4000b64:	df000104 	addi	fp,sp,4
 4000b68:	2005883a 	mov	r2,r4
 4000b6c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
 4000b70:	010100b4 	movhi	r4,1026
 4000b74:	21005404 	addi	r4,r4,336
 4000b78:	400ed040 	call	400ed04 <puts>
}
 4000b7c:	0001883a 	nop
 4000b80:	e037883a 	mov	sp,fp
 4000b84:	dfc00117 	ldw	ra,4(sp)
 4000b88:	df000017 	ldw	fp,0(sp)
 4000b8c:	dec00204 	addi	sp,sp,8
 4000b90:	f800283a 	ret

04000b94 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
 4000b94:	defffd04 	addi	sp,sp,-12
 4000b98:	dfc00215 	stw	ra,8(sp)
 4000b9c:	df000115 	stw	fp,4(sp)
 4000ba0:	df000104 	addi	fp,sp,4
 4000ba4:	2005883a 	mov	r2,r4
 4000ba8:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
 4000bac:	010100b4 	movhi	r4,1026
 4000bb0:	21005704 	addi	r4,r4,348
 4000bb4:	400ed040 	call	400ed04 <puts>
}
 4000bb8:	0001883a 	nop
 4000bbc:	e037883a 	mov	sp,fp
 4000bc0:	dfc00117 	ldw	ra,4(sp)
 4000bc4:	df000017 	ldw	fp,0(sp)
 4000bc8:	dec00204 	addi	sp,sp,8
 4000bcc:	f800283a 	ret

04000bd0 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
 4000bd0:	defffd04 	addi	sp,sp,-12
 4000bd4:	dfc00215 	stw	ra,8(sp)
 4000bd8:	df000115 	stw	fp,4(sp)
 4000bdc:	df000104 	addi	fp,sp,4
 4000be0:	2005883a 	mov	r2,r4
 4000be4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
 4000be8:	010100b4 	movhi	r4,1026
 4000bec:	21005a04 	addi	r4,r4,360
 4000bf0:	400ed040 	call	400ed04 <puts>
}
 4000bf4:	0001883a 	nop
 4000bf8:	e037883a 	mov	sp,fp
 4000bfc:	dfc00117 	ldw	ra,4(sp)
 4000c00:	df000017 	ldw	fp,0(sp)
 4000c04:	dec00204 	addi	sp,sp,8
 4000c08:	f800283a 	ret

04000c0c <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
 4000c0c:	defffd04 	addi	sp,sp,-12
 4000c10:	dfc00215 	stw	ra,8(sp)
 4000c14:	df000115 	stw	fp,4(sp)
 4000c18:	df000104 	addi	fp,sp,4
 4000c1c:	2005883a 	mov	r2,r4
 4000c20:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
 4000c24:	010100b4 	movhi	r4,1026
 4000c28:	21005e04 	addi	r4,r4,376
 4000c2c:	400ed040 	call	400ed04 <puts>
}
 4000c30:	0001883a 	nop
 4000c34:	e037883a 	mov	sp,fp
 4000c38:	dfc00117 	ldw	ra,4(sp)
 4000c3c:	df000017 	ldw	fp,0(sp)
 4000c40:	dec00204 	addi	sp,sp,8
 4000c44:	f800283a 	ret

04000c48 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
 4000c48:	defffe04 	addi	sp,sp,-8
 4000c4c:	dfc00115 	stw	ra,4(sp)
 4000c50:	df000015 	stw	fp,0(sp)
 4000c54:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
 4000c58:	010100b4 	movhi	r4,1026
 4000c5c:	21006204 	addi	r4,r4,392
 4000c60:	400ed040 	call	400ed04 <puts>
}
 4000c64:	0001883a 	nop
 4000c68:	e037883a 	mov	sp,fp
 4000c6c:	dfc00117 	ldw	ra,4(sp)
 4000c70:	df000017 	ldw	fp,0(sp)
 4000c74:	dec00204 	addi	sp,sp,8
 4000c78:	f800283a 	ret

04000c7c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4000c7c:	defffa04 	addi	sp,sp,-24
 4000c80:	dfc00515 	stw	ra,20(sp)
 4000c84:	df000415 	stw	fp,16(sp)
 4000c88:	df000404 	addi	fp,sp,16
 4000c8c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4000c90:	00800244 	movi	r2,9
 4000c94:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4000c98:	014003f4 	movhi	r5,15
 4000c9c:	29509004 	addi	r5,r5,16960
 4000ca0:	e13ffd17 	ldw	r4,-12(fp)
 4000ca4:	400cfd40 	call	400cfd4 <__mulsi3>
 4000ca8:	100b883a 	mov	r5,r2
 4000cac:	0100bef4 	movhi	r4,763
 4000cb0:	213c2004 	addi	r4,r4,-3968
 4000cb4:	400cf180 	call	400cf18 <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
 4000cb8:	100b883a 	mov	r5,r2
 4000cbc:	01200034 	movhi	r4,32768
 4000cc0:	213fffc4 	addi	r4,r4,-1
 4000cc4:	400cf180 	call	400cf18 <__udivsi3>
 4000cc8:	100b883a 	mov	r5,r2
 4000ccc:	e13fff17 	ldw	r4,-4(fp)
 4000cd0:	400cf180 	call	400cf18 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4000cd4:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
 4000cd8:	e0bffe17 	ldw	r2,-8(fp)
 4000cdc:	10002a26 	beq	r2,zero,4000d88 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4000ce0:	e03ffc15 	stw	zero,-16(fp)
 4000ce4:	e0fffc17 	ldw	r3,-16(fp)
 4000ce8:	e0bffe17 	ldw	r2,-8(fp)
 4000cec:	1880180e 	bge	r3,r2,4000d50 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
 4000cf0:	00a00034 	movhi	r2,32768
 4000cf4:	10bfffc4 	addi	r2,r2,-1
 4000cf8:	10bfffc4 	addi	r2,r2,-1
 4000cfc:	103ffe1e 	bne	r2,zero,4000cf8 <__alt_mem_onchip_memory2_0+0xfbfffa78>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4000d00:	014003f4 	movhi	r5,15
 4000d04:	29509004 	addi	r5,r5,16960
 4000d08:	e13ffd17 	ldw	r4,-12(fp)
 4000d0c:	400cfd40 	call	400cfd4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4000d10:	100b883a 	mov	r5,r2
 4000d14:	0100bef4 	movhi	r4,763
 4000d18:	213c2004 	addi	r4,r4,-3968
 4000d1c:	400cf180 	call	400cf18 <__udivsi3>
 4000d20:	100b883a 	mov	r5,r2
 4000d24:	01200034 	movhi	r4,32768
 4000d28:	213fffc4 	addi	r4,r4,-1
 4000d2c:	400cf180 	call	400cf18 <__udivsi3>
 4000d30:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
 4000d34:	e0bfff17 	ldw	r2,-4(fp)
 4000d38:	10c5c83a 	sub	r2,r2,r3
 4000d3c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4000d40:	e0bffc17 	ldw	r2,-16(fp)
 4000d44:	10800044 	addi	r2,r2,1
 4000d48:	e0bffc15 	stw	r2,-16(fp)
 4000d4c:	003fe506 	br	4000ce4 <__alt_mem_onchip_memory2_0+0xfbfffa64>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4000d50:	014003f4 	movhi	r5,15
 4000d54:	29509004 	addi	r5,r5,16960
 4000d58:	e13ffd17 	ldw	r4,-12(fp)
 4000d5c:	400cfd40 	call	400cfd4 <__mulsi3>
 4000d60:	100b883a 	mov	r5,r2
 4000d64:	0100bef4 	movhi	r4,763
 4000d68:	213c2004 	addi	r4,r4,-3968
 4000d6c:	400cf180 	call	400cf18 <__udivsi3>
 4000d70:	e17fff17 	ldw	r5,-4(fp)
 4000d74:	1009883a 	mov	r4,r2
 4000d78:	400cfd40 	call	400cfd4 <__mulsi3>
 4000d7c:	10bfffc4 	addi	r2,r2,-1
 4000d80:	103ffe1e 	bne	r2,zero,4000d7c <__alt_mem_onchip_memory2_0+0xfbfffafc>
 4000d84:	00000d06 	br	4000dbc <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4000d88:	014003f4 	movhi	r5,15
 4000d8c:	29509004 	addi	r5,r5,16960
 4000d90:	e13ffd17 	ldw	r4,-12(fp)
 4000d94:	400cfd40 	call	400cfd4 <__mulsi3>
 4000d98:	100b883a 	mov	r5,r2
 4000d9c:	0100bef4 	movhi	r4,763
 4000da0:	213c2004 	addi	r4,r4,-3968
 4000da4:	400cf180 	call	400cf18 <__udivsi3>
 4000da8:	e17fff17 	ldw	r5,-4(fp)
 4000dac:	1009883a 	mov	r4,r2
 4000db0:	400cfd40 	call	400cfd4 <__mulsi3>
 4000db4:	10bfffc4 	addi	r2,r2,-1
 4000db8:	00bffe16 	blt	zero,r2,4000db4 <__alt_mem_onchip_memory2_0+0xfbfffb34>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4000dbc:	0005883a 	mov	r2,zero
}
 4000dc0:	e037883a 	mov	sp,fp
 4000dc4:	dfc00117 	ldw	ra,4(sp)
 4000dc8:	df000017 	ldw	fp,0(sp)
 4000dcc:	dec00204 	addi	sp,sp,8
 4000dd0:	f800283a 	ret

04000dd4 <_Z5delaym>:

void delay(uint32_t a) {
 4000dd4:	defffc04 	addi	sp,sp,-16
 4000dd8:	dfc00315 	stw	ra,12(sp)
 4000ddc:	df000215 	stw	fp,8(sp)
 4000de0:	df000204 	addi	fp,sp,8
 4000de4:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
 4000de8:	400e0c80 	call	400e0c8 <clock>
 4000dec:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
 4000df0:	400e0c80 	call	400e0c8 <clock>
 4000df4:	1007883a 	mov	r3,r2
 4000df8:	e0bffe17 	ldw	r2,-8(fp)
 4000dfc:	1887c83a 	sub	r3,r3,r2
 4000e00:	e0bfff17 	ldw	r2,-4(fp)
 4000e04:	1885803a 	cmpltu	r2,r3,r2
 4000e08:	10803fcc 	andi	r2,r2,255
 4000e0c:	10000126 	beq	r2,zero,4000e14 <_Z5delaym+0x40>
 4000e10:	003ff706 	br	4000df0 <__alt_mem_onchip_memory2_0+0xfbfffb70>
}
 4000e14:	0001883a 	nop
 4000e18:	e037883a 	mov	sp,fp
 4000e1c:	dfc00117 	ldw	ra,4(sp)
 4000e20:	df000017 	ldw	fp,0(sp)
 4000e24:	dec00204 	addi	sp,sp,8
 4000e28:	f800283a 	ret

04000e2c <_Z6millisv>:
uint32_t millis() {
 4000e2c:	defffe04 	addi	sp,sp,-8
 4000e30:	dfc00115 	stw	ra,4(sp)
 4000e34:	df000015 	stw	fp,0(sp)
 4000e38:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
 4000e3c:	400e0c80 	call	400e0c8 <clock>
}
 4000e40:	e037883a 	mov	sp,fp
 4000e44:	dfc00117 	ldw	ra,4(sp)
 4000e48:	df000017 	ldw	fp,0(sp)
 4000e4c:	dec00204 	addi	sp,sp,8
 4000e50:	f800283a 	ret

04000e54 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 4000e54:	defffd04 	addi	sp,sp,-12
 4000e58:	dfc00215 	stw	ra,8(sp)
 4000e5c:	df000115 	stw	fp,4(sp)
 4000e60:	df000104 	addi	fp,sp,4
 4000e64:	e13fff15 	stw	r4,-4(fp)
 4000e68:	e13fff17 	ldw	r4,-4(fp)
 4000e6c:	40093540 	call	4009354 <_ZN8MAX3421eC1Ev>
 4000e70:	e0bfff17 	ldw	r2,-4(fp)
 4000e74:	1009883a 	mov	r4,r2
 4000e78:	40033c00 	call	40033c0 <_ZN15AddressPoolImplILh16EEC1Ev>
 4000e7c:	e0bfff17 	ldw	r2,-4(fp)
 4000e80:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 4000e84:	00800444 	movi	r2,17
 4000e88:	d0b23545 	stb	r2,-14123(gp)
        init();
 4000e8c:	e13fff17 	ldw	r4,-4(fp)
 4000e90:	4000eac0 	call	4000eac <_ZN3USB4initEv>
}
 4000e94:	0001883a 	nop
 4000e98:	e037883a 	mov	sp,fp
 4000e9c:	dfc00117 	ldw	ra,4(sp)
 4000ea0:	df000017 	ldw	fp,0(sp)
 4000ea4:	dec00204 	addi	sp,sp,8
 4000ea8:	f800283a 	ret

04000eac <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 4000eac:	defffe04 	addi	sp,sp,-8
 4000eb0:	df000115 	stw	fp,4(sp)
 4000eb4:	df000104 	addi	fp,sp,4
 4000eb8:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
 4000ebc:	e0bfff17 	ldw	r2,-4(fp)
 4000ec0:	10002e05 	stb	zero,184(r2)
}
 4000ec4:	0001883a 	nop
 4000ec8:	e037883a 	mov	sp,fp
 4000ecc:	df000017 	ldw	fp,0(sp)
 4000ed0:	dec00104 	addi	sp,sp,4
 4000ed4:	f800283a 	ret

04000ed8 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
 4000ed8:	defffe04 	addi	sp,sp,-8
 4000edc:	df000115 	stw	fp,4(sp)
 4000ee0:	df000104 	addi	fp,sp,4
 4000ee4:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
 4000ee8:	d0b23543 	ldbu	r2,-14123(gp)
}
 4000eec:	e037883a 	mov	sp,fp
 4000ef0:	df000017 	ldw	fp,0(sp)
 4000ef4:	dec00104 	addi	sp,sp,4
 4000ef8:	f800283a 	ret

04000efc <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
 4000efc:	defffd04 	addi	sp,sp,-12
 4000f00:	df000215 	stw	fp,8(sp)
 4000f04:	df000204 	addi	fp,sp,8
 4000f08:	e13ffe15 	stw	r4,-8(fp)
 4000f0c:	2805883a 	mov	r2,r5
 4000f10:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
 4000f14:	e0bfff03 	ldbu	r2,-4(fp)
 4000f18:	d0b23545 	stb	r2,-14123(gp)
}
 4000f1c:	0001883a 	nop
 4000f20:	e037883a 	mov	sp,fp
 4000f24:	df000017 	ldw	fp,0(sp)
 4000f28:	dec00104 	addi	sp,sp,4
 4000f2c:	f800283a 	ret

04000f30 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 4000f30:	defff804 	addi	sp,sp,-32
 4000f34:	dfc00715 	stw	ra,28(sp)
 4000f38:	df000615 	stw	fp,24(sp)
 4000f3c:	df000604 	addi	fp,sp,24
 4000f40:	e13ffd15 	stw	r4,-12(fp)
 4000f44:	2807883a 	mov	r3,r5
 4000f48:	3005883a 	mov	r2,r6
 4000f4c:	e0fffe05 	stb	r3,-8(fp)
 4000f50:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 4000f54:	e0bffd17 	ldw	r2,-12(fp)
 4000f58:	e0fffe03 	ldbu	r3,-8(fp)
 4000f5c:	180b883a 	mov	r5,r3
 4000f60:	1009883a 	mov	r4,r2
 4000f64:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4000f68:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
 4000f6c:	e0bffc17 	ldw	r2,-16(fp)
 4000f70:	10000c26 	beq	r2,zero,4000fa4 <_ZN3USB14getEpInfoEntryEhh+0x74>
 4000f74:	e0bffc17 	ldw	r2,-16(fp)
 4000f78:	10c00003 	ldbu	r3,0(r2)
 4000f7c:	11000043 	ldbu	r4,1(r2)
 4000f80:	2008923a 	slli	r4,r4,8
 4000f84:	20c6b03a 	or	r3,r4,r3
 4000f88:	11000083 	ldbu	r4,2(r2)
 4000f8c:	2008943a 	slli	r4,r4,16
 4000f90:	20c6b03a 	or	r3,r4,r3
 4000f94:	108000c3 	ldbu	r2,3(r2)
 4000f98:	1004963a 	slli	r2,r2,24
 4000f9c:	10c4b03a 	or	r2,r2,r3
 4000fa0:	1000021e 	bne	r2,zero,4000fac <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
 4000fa4:	0005883a 	mov	r2,zero
 4000fa8:	00002106 	br	4001030 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
 4000fac:	e0bffc17 	ldw	r2,-16(fp)
 4000fb0:	10c00003 	ldbu	r3,0(r2)
 4000fb4:	11000043 	ldbu	r4,1(r2)
 4000fb8:	2008923a 	slli	r4,r4,8
 4000fbc:	20c6b03a 	or	r3,r4,r3
 4000fc0:	11000083 	ldbu	r4,2(r2)
 4000fc4:	2008943a 	slli	r4,r4,16
 4000fc8:	20c6b03a 	or	r3,r4,r3
 4000fcc:	108000c3 	ldbu	r2,3(r2)
 4000fd0:	1004963a 	slli	r2,r2,24
 4000fd4:	10c4b03a 	or	r2,r2,r3
 4000fd8:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
 4000fdc:	e03ffb05 	stb	zero,-20(fp)
 4000fe0:	e0bffc17 	ldw	r2,-16(fp)
 4000fe4:	10800143 	ldbu	r2,5(r2)
 4000fe8:	10803fcc 	andi	r2,r2,255
 4000fec:	e0fffb03 	ldbu	r3,-20(fp)
 4000ff0:	18800e2e 	bgeu	r3,r2,400102c <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
 4000ff4:	e0bffa17 	ldw	r2,-24(fp)
 4000ff8:	10800003 	ldbu	r2,0(r2)
 4000ffc:	10c03fcc 	andi	r3,r2,255
 4001000:	e0bfff03 	ldbu	r2,-4(fp)
 4001004:	1880021e 	bne	r3,r2,4001010 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
 4001008:	e0bffa17 	ldw	r2,-24(fp)
 400100c:	00000806 	br	4001030 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
 4001010:	e0bffa17 	ldw	r2,-24(fp)
 4001014:	108000c4 	addi	r2,r2,3
 4001018:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
 400101c:	e0bffb03 	ldbu	r2,-20(fp)
 4001020:	10800044 	addi	r2,r2,1
 4001024:	e0bffb05 	stb	r2,-20(fp)
 4001028:	003fed06 	br	4000fe0 <__alt_mem_onchip_memory2_0+0xfbfffd60>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
 400102c:	0005883a 	mov	r2,zero
}
 4001030:	e037883a 	mov	sp,fp
 4001034:	dfc00117 	ldw	ra,4(sp)
 4001038:	df000017 	ldw	fp,0(sp)
 400103c:	dec00204 	addi	sp,sp,8
 4001040:	f800283a 	ret

04001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 4001044:	defff904 	addi	sp,sp,-28
 4001048:	dfc00615 	stw	ra,24(sp)
 400104c:	df000515 	stw	fp,20(sp)
 4001050:	df000504 	addi	fp,sp,20
 4001054:	e13ffc15 	stw	r4,-16(fp)
 4001058:	2807883a 	mov	r3,r5
 400105c:	3005883a 	mov	r2,r6
 4001060:	e1ffff15 	stw	r7,-4(fp)
 4001064:	e0fffd05 	stb	r3,-12(fp)
 4001068:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
 400106c:	e0bfff17 	ldw	r2,-4(fp)
 4001070:	1000021e 	bne	r2,zero,400107c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
 4001074:	00bff604 	movi	r2,-40
 4001078:	00003406 	br	400114c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 400107c:	e0bffc17 	ldw	r2,-16(fp)
 4001080:	e0fffd03 	ldbu	r3,-12(fp)
 4001084:	180b883a 	mov	r5,r3
 4001088:	1009883a 	mov	r4,r2
 400108c:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4001090:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
 4001094:	e0bffb17 	ldw	r2,-20(fp)
 4001098:	1000021e 	bne	r2,zero,40010a4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 400109c:	00bff584 	movi	r2,-42
 40010a0:	00002a06 	br	400114c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
 40010a4:	e0bffb17 	ldw	r2,-20(fp)
 40010a8:	e0fffd03 	ldbu	r3,-12(fp)
 40010ac:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
 40010b0:	e0bffb17 	ldw	r2,-20(fp)
 40010b4:	e0ffff17 	ldw	r3,-4(fp)
 40010b8:	19403fcc 	andi	r5,r3,255
 40010bc:	10c00003 	ldbu	r3,0(r2)
 40010c0:	1806703a 	and	r3,r3,zero
 40010c4:	1809883a 	mov	r4,r3
 40010c8:	2807883a 	mov	r3,r5
 40010cc:	20c6b03a 	or	r3,r4,r3
 40010d0:	10c00005 	stb	r3,0(r2)
 40010d4:	e0ffff17 	ldw	r3,-4(fp)
 40010d8:	1806d23a 	srli	r3,r3,8
 40010dc:	19403fcc 	andi	r5,r3,255
 40010e0:	10c00043 	ldbu	r3,1(r2)
 40010e4:	1806703a 	and	r3,r3,zero
 40010e8:	1809883a 	mov	r4,r3
 40010ec:	2807883a 	mov	r3,r5
 40010f0:	20c6b03a 	or	r3,r4,r3
 40010f4:	10c00045 	stb	r3,1(r2)
 40010f8:	e0ffff17 	ldw	r3,-4(fp)
 40010fc:	1806d43a 	srli	r3,r3,16
 4001100:	19403fcc 	andi	r5,r3,255
 4001104:	10c00083 	ldbu	r3,2(r2)
 4001108:	1806703a 	and	r3,r3,zero
 400110c:	1809883a 	mov	r4,r3
 4001110:	2807883a 	mov	r3,r5
 4001114:	20c6b03a 	or	r3,r4,r3
 4001118:	10c00085 	stb	r3,2(r2)
 400111c:	e0ffff17 	ldw	r3,-4(fp)
 4001120:	180ad63a 	srli	r5,r3,24
 4001124:	10c000c3 	ldbu	r3,3(r2)
 4001128:	1806703a 	and	r3,r3,zero
 400112c:	1809883a 	mov	r4,r3
 4001130:	2807883a 	mov	r3,r5
 4001134:	20c6b03a 	or	r3,r4,r3
 4001138:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
 400113c:	e0bffb17 	ldw	r2,-20(fp)
 4001140:	e0fffe03 	ldbu	r3,-8(fp)
 4001144:	10c00145 	stb	r3,5(r2)

        return 0;
 4001148:	0005883a 	mov	r2,zero
}
 400114c:	e037883a 	mov	sp,fp
 4001150:	dfc00117 	ldw	ra,4(sp)
 4001154:	df000017 	ldw	fp,0(sp)
 4001158:	dec00204 	addi	sp,sp,8
 400115c:	f800283a 	ret

04001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 4001160:	defff804 	addi	sp,sp,-32
 4001164:	dfc00715 	stw	ra,28(sp)
 4001168:	df000615 	stw	fp,24(sp)
 400116c:	df000604 	addi	fp,sp,24
 4001170:	e13ffc15 	stw	r4,-16(fp)
 4001174:	2807883a 	mov	r3,r5
 4001178:	3005883a 	mov	r2,r6
 400117c:	e1ffff15 	stw	r7,-4(fp)
 4001180:	e0fffd05 	stb	r3,-12(fp)
 4001184:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 4001188:	e0bffc17 	ldw	r2,-16(fp)
 400118c:	e0fffd03 	ldbu	r3,-12(fp)
 4001190:	180b883a 	mov	r5,r3
 4001194:	1009883a 	mov	r4,r2
 4001198:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 400119c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
 40011a0:	e0bffa17 	ldw	r2,-24(fp)
 40011a4:	1000021e 	bne	r2,zero,40011b0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40011a8:	00bff584 	movi	r2,-42
 40011ac:	00004a06 	br	40012d8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
 40011b0:	e0bffa17 	ldw	r2,-24(fp)
 40011b4:	10c00003 	ldbu	r3,0(r2)
 40011b8:	11000043 	ldbu	r4,1(r2)
 40011bc:	2008923a 	slli	r4,r4,8
 40011c0:	20c6b03a 	or	r3,r4,r3
 40011c4:	11000083 	ldbu	r4,2(r2)
 40011c8:	2008943a 	slli	r4,r4,16
 40011cc:	20c6b03a 	or	r3,r4,r3
 40011d0:	108000c3 	ldbu	r2,3(r2)
 40011d4:	1004963a 	slli	r2,r2,24
 40011d8:	10c4b03a 	or	r2,r2,r3
 40011dc:	1000021e 	bne	r2,zero,40011e8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
 40011e0:	00bff5c4 	movi	r2,-41
 40011e4:	00003c06 	br	40012d8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
 40011e8:	e0bffd03 	ldbu	r2,-12(fp)
 40011ec:	e0fffe03 	ldbu	r3,-8(fp)
 40011f0:	180d883a 	mov	r6,r3
 40011f4:	100b883a 	mov	r5,r2
 40011f8:	e13ffc17 	ldw	r4,-16(fp)
 40011fc:	4000f300 	call	4000f30 <_ZN3USB14getEpInfoEntryEhh>
 4001200:	1007883a 	mov	r3,r2
 4001204:	e0bfff17 	ldw	r2,-4(fp)
 4001208:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
 400120c:	e0bfff17 	ldw	r2,-4(fp)
 4001210:	10800017 	ldw	r2,0(r2)
 4001214:	1000021e 	bne	r2,zero,4001220 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 4001218:	00bff6c4 	movi	r2,-37
 400121c:	00002e06 	br	40012d8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 4001220:	e0bfff17 	ldw	r2,-4(fp)
 4001224:	10800017 	ldw	r2,0(r2)
 4001228:	10800083 	ldbu	r2,2(r2)
 400122c:	1004d0ba 	srli	r2,r2,2
 4001230:	10803fcc 	andi	r2,r2,255
 4001234:	10c00410 	cmplti	r3,r2,16
 4001238:	1800011e 	bne	r3,zero,4001240 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
 400123c:	008003c4 	movi	r2,15
 4001240:	00c00044 	movi	r3,1
 4001244:	1884983a 	sll	r2,r3,r2
 4001248:	1007883a 	mov	r3,r2
 400124c:	e0800217 	ldw	r2,8(fp)
 4001250:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
 4001254:	e0800217 	ldw	r2,8(fp)
 4001258:	1080000b 	ldhu	r2,0(r2)
 400125c:	10bfffc4 	addi	r2,r2,-1
 4001260:	1007883a 	mov	r3,r2
 4001264:	e0800217 	ldw	r2,8(fp)
 4001268:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 400126c:	e0bffd03 	ldbu	r2,-12(fp)
 4001270:	100d883a 	mov	r6,r2
 4001274:	01403804 	movi	r5,224
 4001278:	e13ffc17 	ldw	r4,-16(fp)
 400127c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
 4001280:	01403604 	movi	r5,216
 4001284:	e13ffc17 	ldw	r4,-16(fp)
 4001288:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 400128c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 4001290:	e0bffa17 	ldw	r2,-24(fp)
 4001294:	10800183 	ldbu	r2,6(r2)
 4001298:	10803fcc 	andi	r2,r2,255
 400129c:	10000726 	beq	r2,zero,40012bc <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
 40012a0:	e0bffc17 	ldw	r2,-16(fp)
 40012a4:	10c02e03 	ldbu	r3,184(r2)
 40012a8:	e0bffb03 	ldbu	r2,-20(fp)
 40012ac:	1884b03a 	or	r2,r3,r2
 40012b0:	10800094 	ori	r2,r2,2
 40012b4:	10803fcc 	andi	r2,r2,255
 40012b8:	00000206 	br	40012c4 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
 40012bc:	e0bffb03 	ldbu	r2,-20(fp)
 40012c0:	10803e4c 	andi	r2,r2,249
 40012c4:	100d883a 	mov	r6,r2
 40012c8:	01403604 	movi	r5,216
 40012cc:	e13ffc17 	ldw	r4,-16(fp)
 40012d0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        return 0;
 40012d4:	0005883a 	mov	r2,zero
}
 40012d8:	e037883a 	mov	sp,fp
 40012dc:	dfc00117 	ldw	ra,4(sp)
 40012e0:	df000017 	ldw	fp,0(sp)
 40012e4:	dec00204 	addi	sp,sp,8
 40012e8:	f800283a 	ret

040012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 40012ec:	deffeb04 	addi	sp,sp,-84
 40012f0:	dfc01415 	stw	ra,80(sp)
 40012f4:	df001315 	stw	fp,76(sp)
 40012f8:	dc001215 	stw	r16,72(sp)
 40012fc:	df001304 	addi	fp,sp,76
 4001300:	e13ff515 	stw	r4,-44(fp)
 4001304:	2815883a 	mov	r10,r5
 4001308:	3013883a 	mov	r9,r6
 400130c:	3811883a 	mov	r8,r7
 4001310:	e1c00217 	ldw	r7,8(fp)
 4001314:	e1800317 	ldw	r6,12(fp)
 4001318:	e1400417 	ldw	r5,16(fp)
 400131c:	e1000517 	ldw	r4,20(fp)
 4001320:	e0c00617 	ldw	r3,24(fp)
 4001324:	e0800717 	ldw	r2,28(fp)
 4001328:	e2bff605 	stb	r10,-40(fp)
 400132c:	e27ff705 	stb	r9,-36(fp)
 4001330:	e23ff805 	stb	r8,-32(fp)
 4001334:	e1fff905 	stb	r7,-28(fp)
 4001338:	e1bffa05 	stb	r6,-24(fp)
 400133c:	e17ffb05 	stb	r5,-20(fp)
 4001340:	e13ffc0d 	sth	r4,-16(fp)
 4001344:	e0fffd0d 	sth	r3,-12(fp)
 4001348:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
 400134c:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 4001350:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
 4001354:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 4001358:	e0fff603 	ldbu	r3,-40(fp)
 400135c:	e13ff703 	ldbu	r4,-36(fp)
 4001360:	e17ff304 	addi	r5,fp,-52
 4001364:	e0bff404 	addi	r2,fp,-48
 4001368:	d8800015 	stw	r2,0(sp)
 400136c:	280f883a 	mov	r7,r5
 4001370:	200d883a 	mov	r6,r4
 4001374:	180b883a 	mov	r5,r3
 4001378:	e13ff517 	ldw	r4,-44(fp)
 400137c:	40011600 	call	4001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 4001380:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
 4001384:	e0bfef03 	ldbu	r2,-68(fp)
 4001388:	10000226 	beq	r2,zero,4001394 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
 400138c:	e0bfef03 	ldbu	r2,-68(fp)
 4001390:	00009406 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
 4001394:	e0bff803 	ldbu	r2,-32(fp)
 4001398:	1080200c 	andi	r2,r2,128
 400139c:	0084803a 	cmplt	r2,zero,r2
 40013a0:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 40013a4:	e0bff803 	ldbu	r2,-32(fp)
 40013a8:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
 40013ac:	e0bff903 	ldbu	r2,-28(fp)
 40013b0:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
 40013b4:	e0bffa03 	ldbu	r2,-24(fp)
 40013b8:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
 40013bc:	e0bffb03 	ldbu	r2,-20(fp)
 40013c0:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
 40013c4:	e0bffc0b 	ldhu	r2,-16(fp)
 40013c8:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
 40013cc:	e0bffd0b 	ldhu	r2,-12(fp)
 40013d0:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 40013d4:	e0bff104 	addi	r2,fp,-60
 40013d8:	100f883a 	mov	r7,r2
 40013dc:	01800204 	movi	r6,8
 40013e0:	01400804 	movi	r5,32
 40013e4:	e13ff517 	ldw	r4,-44(fp)
 40013e8:	40094400 	call	4009440 <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 40013ec:	e0bff703 	ldbu	r2,-36(fp)
 40013f0:	e0fff40b 	ldhu	r3,-48(fp)
 40013f4:	18ffffcc 	andi	r3,r3,65535
 40013f8:	180f883a 	mov	r7,r3
 40013fc:	100d883a 	mov	r6,r2
 4001400:	01400404 	movi	r5,16
 4001404:	e13ff517 	ldw	r4,-44(fp)
 4001408:	4001dec0 	call	4001dec <_ZN3USB11dispatchPktEhht>
 400140c:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
 4001410:	e0bfef03 	ldbu	r2,-68(fp)
 4001414:	10000226 	beq	r2,zero,4001420 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
 4001418:	e0bfef03 	ldbu	r2,-68(fp)
 400141c:	00007106 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
 4001420:	e0800817 	ldw	r2,32(fp)
 4001424:	10006226 	beq	r2,zero,40015b0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
 4001428:	e0bff003 	ldbu	r2,-64(fp)
 400142c:	10004a26 	beq	r2,zero,4001558 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
 4001430:	e0bffd0b 	ldhu	r2,-12(fp)
 4001434:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 4001438:	e0bff317 	ldw	r2,-52(fp)
 400143c:	10c00083 	ldbu	r3,2(r2)
 4001440:	18c00094 	ori	r3,r3,2
 4001444:	10c00085 	stb	r3,2(r2)

                        while(left) {
 4001448:	e0bfef8b 	ldhu	r2,-66(fp)
 400144c:	10005426 	beq	r2,zero,40015a0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 4001450:	e0bffe0b 	ldhu	r2,-8(fp)
 4001454:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 4001458:	e0fff317 	ldw	r3,-52(fp)
 400145c:	e0bff40b 	ldhu	r2,-48(fp)
 4001460:	113fffcc 	andi	r4,r2,65535
 4001464:	e17ff484 	addi	r5,fp,-46
 4001468:	d8000115 	stw	zero,4(sp)
 400146c:	e0800817 	ldw	r2,32(fp)
 4001470:	d8800015 	stw	r2,0(sp)
 4001474:	280f883a 	mov	r7,r5
 4001478:	200d883a 	mov	r6,r4
 400147c:	180b883a 	mov	r5,r3
 4001480:	e13ff517 	ldw	r4,-44(fp)
 4001484:	40016e40 	call	40016e4 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 4001488:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
 400148c:	e0bfef03 	ldbu	r2,-68(fp)
 4001490:	10800198 	cmpnei	r2,r2,6
 4001494:	1000111e 	bne	r2,zero,40014dc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 4001498:	e43ff317 	ldw	r16,-52(fp)
 400149c:	01403e04 	movi	r5,248
 40014a0:	e13ff517 	ldw	r4,-44(fp)
 40014a4:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 40014a8:	10803fcc 	andi	r2,r2,255
 40014ac:	1080080c 	andi	r2,r2,32
 40014b0:	1005003a 	cmpeq	r2,r2,zero
 40014b4:	1080004c 	andi	r2,r2,1
 40014b8:	1089883a 	add	r4,r2,r2
 40014bc:	80c00083 	ldbu	r3,2(r16)
 40014c0:	00bfff44 	movi	r2,-3
 40014c4:	1884703a 	and	r2,r3,r2
 40014c8:	1007883a 	mov	r3,r2
 40014cc:	2005883a 	mov	r2,r4
 40014d0:	1884b03a 	or	r2,r3,r2
 40014d4:	80800085 	stb	r2,2(r16)
 40014d8:	003fdb06 	br	4001448 <__alt_mem_onchip_memory2_0+0xfc0001c8>
                                        continue;
                                }

                                if(rcode)
 40014dc:	e0bfef03 	ldbu	r2,-68(fp)
 40014e0:	10000226 	beq	r2,zero,40014ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
 40014e4:	e0bfef03 	ldbu	r2,-68(fp)
 40014e8:	00003e06 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 40014ec:	e0bfef03 	ldbu	r2,-68(fp)
 40014f0:	1000101e 	bne	r2,zero,4001534 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
 40014f4:	e0800917 	ldw	r2,36(fp)
 40014f8:	10000e26 	beq	r2,zero,4001534 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 40014fc:	e0800917 	ldw	r2,36(fp)
 4001500:	10800017 	ldw	r2,0(r2)
 4001504:	10800017 	ldw	r2,0(r2)
 4001508:	e0fff48b 	ldhu	r3,-46(fp)
 400150c:	197fffcc 	andi	r5,r3,65535
 4001510:	e13ffd0b 	ldhu	r4,-12(fp)
 4001514:	e0ffef8b 	ldhu	r3,-66(fp)
 4001518:	20c7c83a 	sub	r3,r4,r3
 400151c:	e0fff08d 	sth	r3,-62(fp)
 4001520:	e0fff084 	addi	r3,fp,-62
 4001524:	180f883a 	mov	r7,r3
 4001528:	e1800817 	ldw	r6,32(fp)
 400152c:	e1000917 	ldw	r4,36(fp)
 4001530:	103ee83a 	callr	r2

                                left -= read;
 4001534:	e0bff48b 	ldhu	r2,-46(fp)
 4001538:	e0ffef8b 	ldhu	r3,-66(fp)
 400153c:	1885c83a 	sub	r2,r3,r2
 4001540:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
 4001544:	e0bff48b 	ldhu	r2,-46(fp)
 4001548:	10ffffcc 	andi	r3,r2,65535
 400154c:	e0bffe0b 	ldhu	r2,-8(fp)
 4001550:	18801236 	bltu	r3,r2,400159c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
 4001554:	003fbc06 	br	4001448 <__alt_mem_onchip_memory2_0+0xfc0001c8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 4001558:	e0bff317 	ldw	r2,-52(fp)
 400155c:	10c00083 	ldbu	r3,2(r2)
 4001560:	18c00054 	ori	r3,r3,1
 4001564:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 4001568:	e0fff317 	ldw	r3,-52(fp)
 400156c:	e0bff40b 	ldhu	r2,-48(fp)
 4001570:	113fffcc 	andi	r4,r2,65535
 4001574:	e17ffe0b 	ldhu	r5,-8(fp)
 4001578:	e0800817 	ldw	r2,32(fp)
 400157c:	d8800015 	stw	r2,0(sp)
 4001580:	280f883a 	mov	r7,r5
 4001584:	200d883a 	mov	r6,r4
 4001588:	180b883a 	mov	r5,r3
 400158c:	e13ff517 	ldw	r4,-44(fp)
 4001590:	4001a400 	call	4001a40 <_ZN3USB11OutTransferEP6EpInfottPh>
 4001594:	e0bfef05 	stb	r2,-68(fp)
 4001598:	00000106 	br	40015a0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
 400159c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
 40015a0:	e0bfef03 	ldbu	r2,-68(fp)
 40015a4:	10000226 	beq	r2,zero,40015b0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
 40015a8:	e0bfef03 	ldbu	r2,-68(fp)
 40015ac:	00000d06 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 40015b0:	e0bff003 	ldbu	r2,-64(fp)
 40015b4:	10000226 	beq	r2,zero,40015c0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
 40015b8:	00802804 	movi	r2,160
 40015bc:	00000106 	br	40015c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
 40015c0:	00802004 	movi	r2,128
 40015c4:	e0fff703 	ldbu	r3,-36(fp)
 40015c8:	e13ff40b 	ldhu	r4,-48(fp)
 40015cc:	213fffcc 	andi	r4,r4,65535
 40015d0:	200f883a 	mov	r7,r4
 40015d4:	180d883a 	mov	r6,r3
 40015d8:	100b883a 	mov	r5,r2
 40015dc:	e13ff517 	ldw	r4,-44(fp)
 40015e0:	4001dec0 	call	4001dec <_ZN3USB11dispatchPktEhht>
}
 40015e4:	e6ffff04 	addi	sp,fp,-4
 40015e8:	dfc00217 	ldw	ra,8(sp)
 40015ec:	df000117 	ldw	fp,4(sp)
 40015f0:	dc000017 	ldw	r16,0(sp)
 40015f4:	dec00304 	addi	sp,sp,12
 40015f8:	f800283a 	ret

040015fc <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 40015fc:	defff404 	addi	sp,sp,-48
 4001600:	dfc00b15 	stw	ra,44(sp)
 4001604:	df000a15 	stw	fp,40(sp)
 4001608:	df000a04 	addi	fp,sp,40
 400160c:	e13ffb15 	stw	r4,-20(fp)
 4001610:	2809883a 	mov	r4,r5
 4001614:	3007883a 	mov	r3,r6
 4001618:	e1fffe15 	stw	r7,-8(fp)
 400161c:	e0800317 	ldw	r2,12(fp)
 4001620:	e13ffc05 	stb	r4,-16(fp)
 4001624:	e0fffd05 	stb	r3,-12(fp)
 4001628:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
 400162c:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
 4001630:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 4001634:	e0fffc03 	ldbu	r3,-16(fp)
 4001638:	e13ffd03 	ldbu	r4,-12(fp)
 400163c:	e17ff904 	addi	r5,fp,-28
 4001640:	e0bffa04 	addi	r2,fp,-24
 4001644:	d8800015 	stw	r2,0(sp)
 4001648:	280f883a 	mov	r7,r5
 400164c:	200d883a 	mov	r6,r4
 4001650:	180b883a 	mov	r5,r3
 4001654:	e13ffb17 	ldw	r4,-20(fp)
 4001658:	40011600 	call	4001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 400165c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
 4001660:	e0bff803 	ldbu	r2,-32(fp)
 4001664:	10000e26 	beq	r2,zero,40016a0 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 4001668:	e0bff803 	ldbu	r2,-32(fp)
 400166c:	01402044 	movi	r5,129
 4001670:	1009883a 	mov	r4,r2
 4001674:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 4001678:	e0bffc03 	ldbu	r2,-16(fp)
 400167c:	01402044 	movi	r5,129
 4001680:	1009883a 	mov	r4,r2
 4001684:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 4001688:	e0bffd03 	ldbu	r2,-12(fp)
 400168c:	01402044 	movi	r5,129
 4001690:	1009883a 	mov	r4,r2
 4001694:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 4001698:	e0bff803 	ldbu	r2,-32(fp)
 400169c:	00000c06 	br	40016d0 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 40016a0:	e0fff917 	ldw	r3,-28(fp)
 40016a4:	e0bffa0b 	ldhu	r2,-24(fp)
 40016a8:	113fffcc 	andi	r4,r2,65535
 40016ac:	e0bfff03 	ldbu	r2,-4(fp)
 40016b0:	d8800115 	stw	r2,4(sp)
 40016b4:	e0800217 	ldw	r2,8(fp)
 40016b8:	d8800015 	stw	r2,0(sp)
 40016bc:	e1fffe17 	ldw	r7,-8(fp)
 40016c0:	200d883a 	mov	r6,r4
 40016c4:	180b883a 	mov	r5,r3
 40016c8:	e13ffb17 	ldw	r4,-20(fp)
 40016cc:	40016e40 	call	40016e4 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
 40016d0:	e037883a 	mov	sp,fp
 40016d4:	dfc00117 	ldw	ra,4(sp)
 40016d8:	df000017 	ldw	fp,0(sp)
 40016dc:	dec00204 	addi	sp,sp,8
 40016e0:	f800283a 	ret

040016e4 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 40016e4:	defff704 	addi	sp,sp,-36
 40016e8:	dfc00815 	stw	ra,32(sp)
 40016ec:	df000715 	stw	fp,28(sp)
 40016f0:	df000704 	addi	fp,sp,28
 40016f4:	e13ffb15 	stw	r4,-20(fp)
 40016f8:	e17ffc15 	stw	r5,-16(fp)
 40016fc:	3007883a 	mov	r3,r6
 4001700:	e1fffe15 	stw	r7,-8(fp)
 4001704:	e0800317 	ldw	r2,12(fp)
 4001708:	e0fffd0d 	sth	r3,-12(fp)
 400170c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
 4001710:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 4001714:	e0bffe17 	ldw	r2,-8(fp)
 4001718:	1080000b 	ldhu	r2,0(r2)
 400171c:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 4001720:	e0bffc17 	ldw	r2,-16(fp)
 4001724:	10800043 	ldbu	r2,1(r2)
 4001728:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
 400172c:	e0bffe17 	ldw	r2,-8(fp)
 4001730:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 4001734:	e0bffc17 	ldw	r2,-16(fp)
 4001738:	10800083 	ldbu	r2,2(r2)
 400173c:	1080008c 	andi	r2,r2,2
 4001740:	10803fcc 	andi	r2,r2,255
 4001744:	10000226 	beq	r2,zero,4001750 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
 4001748:	00800804 	movi	r2,32
 400174c:	00000106 	br	4001754 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
 4001750:	00800404 	movi	r2,16
 4001754:	100d883a 	mov	r6,r2
 4001758:	01403a04 	movi	r5,232
 400175c:	e13ffb17 	ldw	r4,-20(fp)
 4001760:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 4001764:	e0bffc17 	ldw	r2,-16(fp)
 4001768:	10800003 	ldbu	r2,0(r2)
 400176c:	10803fcc 	andi	r2,r2,255
 4001770:	e0fffd0b 	ldhu	r3,-12(fp)
 4001774:	180f883a 	mov	r7,r3
 4001778:	100d883a 	mov	r6,r2
 400177c:	000b883a 	mov	r5,zero
 4001780:	e13ffb17 	ldw	r4,-20(fp)
 4001784:	4001dec0 	call	4001dec <_ZN3USB11dispatchPktEhht>
 4001788:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
 400178c:	e0bff903 	ldbu	r2,-28(fp)
 4001790:	10800198 	cmpnei	r2,r2,6
 4001794:	10001e1e 	bne	r2,zero,4001810 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 4001798:	01403e04 	movi	r5,248
 400179c:	e13ffb17 	ldw	r4,-20(fp)
 40017a0:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 40017a4:	10803fcc 	andi	r2,r2,255
 40017a8:	1080040c 	andi	r2,r2,16
 40017ac:	1005003a 	cmpeq	r2,r2,zero
 40017b0:	1007883a 	mov	r3,r2
 40017b4:	e0bffc17 	ldw	r2,-16(fp)
 40017b8:	18c0004c 	andi	r3,r3,1
 40017bc:	18cb883a 	add	r5,r3,r3
 40017c0:	11000083 	ldbu	r4,2(r2)
 40017c4:	00ffff44 	movi	r3,-3
 40017c8:	20c6703a 	and	r3,r4,r3
 40017cc:	1809883a 	mov	r4,r3
 40017d0:	2807883a 	mov	r3,r5
 40017d4:	20c6b03a 	or	r3,r4,r3
 40017d8:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 40017dc:	e0bffc17 	ldw	r2,-16(fp)
 40017e0:	10800083 	ldbu	r2,2(r2)
 40017e4:	1080008c 	andi	r2,r2,2
 40017e8:	10803fcc 	andi	r2,r2,255
 40017ec:	10000226 	beq	r2,zero,40017f8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
 40017f0:	00800804 	movi	r2,32
 40017f4:	00000106 	br	40017fc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
 40017f8:	00800404 	movi	r2,16
 40017fc:	100d883a 	mov	r6,r2
 4001800:	01403a04 	movi	r5,232
 4001804:	e13ffb17 	ldw	r4,-20(fp)
 4001808:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        continue;
 400180c:	00005806 	br	4001970 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
 4001810:	e0bff903 	ldbu	r2,-28(fp)
 4001814:	1000571e 	bne	r2,zero,4001974 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 4001818:	01403204 	movi	r5,200
 400181c:	e13ffb17 	ldw	r4,-20(fp)
 4001820:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001824:	10803fcc 	andi	r2,r2,255
 4001828:	1080010c 	andi	r2,r2,4
 400182c:	1005003a 	cmpeq	r2,r2,zero
 4001830:	10803fcc 	andi	r2,r2,255
 4001834:	10000326 	beq	r2,zero,4001844 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 4001838:	00bffc04 	movi	r2,-16
 400183c:	e0bff905 	stb	r2,-28(fp)
                        break;
 4001840:	00004d06 	br	4001978 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 4001844:	01400c04 	movi	r5,48
 4001848:	e13ffb17 	ldw	r4,-20(fp)
 400184c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001850:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 4001854:	e0bff943 	ldbu	r2,-27(fp)
 4001858:	10bfffcc 	andi	r2,r2,65535
 400185c:	e0fffa0b 	ldhu	r3,-24(fp)
 4001860:	1880022e 	bgeu	r3,r2,400186c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 4001864:	e0bffa0b 	ldhu	r2,-24(fp)
 4001868:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 400186c:	e0bffe17 	ldw	r2,-8(fp)
 4001870:	1080000b 	ldhu	r2,0(r2)
 4001874:	1007883a 	mov	r3,r2
 4001878:	e0bffa0b 	ldhu	r2,-24(fp)
 400187c:	10c5c83a 	sub	r2,r2,r3
 4001880:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
 4001884:	e0bff98f 	ldh	r2,-26(fp)
 4001888:	1000010e 	bge	r2,zero,4001890 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
 400188c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 4001890:	e0bff943 	ldbu	r2,-27(fp)
 4001894:	e0fff98f 	ldh	r3,-26(fp)
 4001898:	1880010e 	bge	r3,r2,40018a0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
 400189c:	1805883a 	mov	r2,r3
 40018a0:	10803fcc 	andi	r2,r2,255
 40018a4:	e1c00217 	ldw	r7,8(fp)
 40018a8:	100d883a 	mov	r6,r2
 40018ac:	01400204 	movi	r5,8
 40018b0:	e13ffb17 	ldw	r4,-20(fp)
 40018b4:	40096600 	call	4009660 <_ZN8MAX3421e7bytesRdEhhPh>
 40018b8:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 40018bc:	01800104 	movi	r6,4
 40018c0:	01403204 	movi	r5,200
 40018c4:	e13ffb17 	ldw	r4,-20(fp)
 40018c8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 40018cc:	e0bffe17 	ldw	r2,-8(fp)
 40018d0:	10c0000b 	ldhu	r3,0(r2)
 40018d4:	e0bff943 	ldbu	r2,-27(fp)
 40018d8:	1885883a 	add	r2,r3,r2
 40018dc:	1007883a 	mov	r3,r2
 40018e0:	e0bffe17 	ldw	r2,-8(fp)
 40018e4:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 40018e8:	e0fff943 	ldbu	r3,-27(fp)
 40018ec:	e0bffa83 	ldbu	r2,-22(fp)
 40018f0:	18800536 	bltu	r3,r2,4001908 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
 40018f4:	e0bffe17 	ldw	r2,-8(fp)
 40018f8:	1080000b 	ldhu	r2,0(r2)
 40018fc:	10ffffcc 	andi	r3,r2,65535
 4001900:	e0bffa0b 	ldhu	r2,-24(fp)
 4001904:	18801536 	bltu	r3,r2,400195c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 4001908:	01403e04 	movi	r5,248
 400190c:	e13ffb17 	ldw	r4,-20(fp)
 4001910:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001914:	10803fcc 	andi	r2,r2,255
 4001918:	1080040c 	andi	r2,r2,16
 400191c:	10000226 	beq	r2,zero,4001928 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
 4001920:	00c00044 	movi	r3,1
 4001924:	00000106 	br	400192c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
 4001928:	0007883a 	mov	r3,zero
 400192c:	e0bffc17 	ldw	r2,-16(fp)
 4001930:	18c0004c 	andi	r3,r3,1
 4001934:	18cb883a 	add	r5,r3,r3
 4001938:	11000083 	ldbu	r4,2(r2)
 400193c:	00ffff44 	movi	r3,-3
 4001940:	20c6703a 	and	r3,r4,r3
 4001944:	1809883a 	mov	r4,r3
 4001948:	2807883a 	mov	r3,r5
 400194c:	20c6b03a 	or	r3,r4,r3
 4001950:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
 4001954:	e03ff905 	stb	zero,-28(fp)
                        break;
 4001958:	00000706 	br	4001978 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
 400195c:	e0bfff03 	ldbu	r2,-4(fp)
 4001960:	103f8026 	beq	r2,zero,4001764 <__alt_mem_onchip_memory2_0+0xfc0004e4>
                        delay(bInterval); // Delay according to polling interval
 4001964:	e0bfff03 	ldbu	r2,-4(fp)
 4001968:	1009883a 	mov	r4,r2
 400196c:	4000dd40 	call	4000dd4 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
 4001970:	003f7c06 	br	4001764 <__alt_mem_onchip_memory2_0+0xfc0004e4>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
 4001974:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
 4001978:	e0bff903 	ldbu	r2,-28(fp)
}
 400197c:	e037883a 	mov	sp,fp
 4001980:	dfc00117 	ldw	ra,4(sp)
 4001984:	df000017 	ldw	fp,0(sp)
 4001988:	dec00204 	addi	sp,sp,8
 400198c:	f800283a 	ret

04001990 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 4001990:	defff604 	addi	sp,sp,-40
 4001994:	dfc00915 	stw	ra,36(sp)
 4001998:	df000815 	stw	fp,32(sp)
 400199c:	df000804 	addi	fp,sp,32
 40019a0:	e13ffc15 	stw	r4,-16(fp)
 40019a4:	2809883a 	mov	r4,r5
 40019a8:	3007883a 	mov	r3,r6
 40019ac:	3805883a 	mov	r2,r7
 40019b0:	e13ffd05 	stb	r4,-12(fp)
 40019b4:	e0fffe05 	stb	r3,-8(fp)
 40019b8:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
 40019bc:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
 40019c0:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 40019c4:	e0fffd03 	ldbu	r3,-12(fp)
 40019c8:	e13ffe03 	ldbu	r4,-8(fp)
 40019cc:	e17ffa04 	addi	r5,fp,-24
 40019d0:	e0bffb04 	addi	r2,fp,-20
 40019d4:	d8800015 	stw	r2,0(sp)
 40019d8:	280f883a 	mov	r7,r5
 40019dc:	200d883a 	mov	r6,r4
 40019e0:	180b883a 	mov	r5,r3
 40019e4:	e13ffc17 	ldw	r4,-16(fp)
 40019e8:	40011600 	call	4001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 40019ec:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
 40019f0:	e0bff903 	ldbu	r2,-28(fp)
 40019f4:	10000226 	beq	r2,zero,4001a00 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
 40019f8:	e0bff903 	ldbu	r2,-28(fp)
 40019fc:	00000b06 	br	4001a2c <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 4001a00:	e0fffa17 	ldw	r3,-24(fp)
 4001a04:	e0bffb0b 	ldhu	r2,-20(fp)
 4001a08:	113fffcc 	andi	r4,r2,65535
 4001a0c:	e17fff0b 	ldhu	r5,-4(fp)
 4001a10:	e0800217 	ldw	r2,8(fp)
 4001a14:	d8800015 	stw	r2,0(sp)
 4001a18:	280f883a 	mov	r7,r5
 4001a1c:	200d883a 	mov	r6,r4
 4001a20:	180b883a 	mov	r5,r3
 4001a24:	e13ffc17 	ldw	r4,-16(fp)
 4001a28:	4001a400 	call	4001a40 <_ZN3USB11OutTransferEP6EpInfottPh>
}
 4001a2c:	e037883a 	mov	sp,fp
 4001a30:	dfc00117 	ldw	ra,4(sp)
 4001a34:	df000017 	ldw	fp,0(sp)
 4001a38:	dec00204 	addi	sp,sp,8
 4001a3c:	f800283a 	ret

04001a40 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 4001a40:	defff404 	addi	sp,sp,-48
 4001a44:	dfc00b15 	stw	ra,44(sp)
 4001a48:	df000a15 	stw	fp,40(sp)
 4001a4c:	df000a04 	addi	fp,sp,40
 4001a50:	e13ffc15 	stw	r4,-16(fp)
 4001a54:	e17ffd15 	stw	r5,-12(fp)
 4001a58:	3007883a 	mov	r3,r6
 4001a5c:	3805883a 	mov	r2,r7
 4001a60:	e0fffe0d 	sth	r3,-8(fp)
 4001a64:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
 4001a68:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
 4001a6c:	e0800217 	ldw	r2,8(fp)
 4001a70:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 4001a74:	e0bfff0b 	ldhu	r2,-4(fp)
 4001a78:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
 4001a7c:	e0bffd17 	ldw	r2,-12(fp)
 4001a80:	10800043 	ldbu	r2,1(r2)
 4001a84:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
 4001a88:	e0bff903 	ldbu	r2,-28(fp)
 4001a8c:	10000326 	beq	r2,zero,4001a9c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 4001a90:	e0bff903 	ldbu	r2,-28(fp)
 4001a94:	10801070 	cmpltui	r2,r2,65
 4001a98:	1000021e 	bne	r2,zero,4001aa4 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 4001a9c:	00bff684 	movi	r2,-38
 4001aa0:	0000cd06 	br	4001dd8 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 4001aa4:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001aa8:	1084e204 	addi	r2,r2,5000
 4001aac:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 4001ab0:	e0bffd17 	ldw	r2,-12(fp)
 4001ab4:	10800083 	ldbu	r2,2(r2)
 4001ab8:	1080004c 	andi	r2,r2,1
 4001abc:	10803fcc 	andi	r2,r2,255
 4001ac0:	10000226 	beq	r2,zero,4001acc <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
 4001ac4:	00802004 	movi	r2,128
 4001ac8:	00000106 	br	4001ad0 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
 4001acc:	00801004 	movi	r2,64
 4001ad0:	100d883a 	mov	r6,r2
 4001ad4:	01403a04 	movi	r5,232
 4001ad8:	e13ffc17 	ldw	r4,-16(fp)
 4001adc:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
 4001ae0:	e0bff88b 	ldhu	r2,-30(fp)
 4001ae4:	1000a926 	beq	r2,zero,4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 4001ae8:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
 4001aec:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 4001af0:	e0bff903 	ldbu	r2,-28(fp)
 4001af4:	e17ff88b 	ldhu	r5,-30(fp)
 4001af8:	10ffffcc 	andi	r3,r2,65535
 4001afc:	293fffcc 	andi	r4,r5,65535
 4001b00:	20c0012e 	bgeu	r4,r3,4001b08 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
 4001b04:	2805883a 	mov	r2,r5
 4001b08:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 4001b0c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001b10:	10803fcc 	andi	r2,r2,255
 4001b14:	e1fff717 	ldw	r7,-36(fp)
 4001b18:	100d883a 	mov	r6,r2
 4001b1c:	01400404 	movi	r5,16
 4001b20:	e13ffc17 	ldw	r4,-16(fp)
 4001b24:	40094400 	call	4009440 <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 4001b28:	e0bffb0b 	ldhu	r2,-20(fp)
 4001b2c:	10803fcc 	andi	r2,r2,255
 4001b30:	100d883a 	mov	r6,r2
 4001b34:	01400e04 	movi	r5,56
 4001b38:	e13ffc17 	ldw	r4,-16(fp)
 4001b3c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 4001b40:	e0bffd17 	ldw	r2,-12(fp)
 4001b44:	10800003 	ldbu	r2,0(r2)
 4001b48:	10800814 	ori	r2,r2,32
 4001b4c:	10803fcc 	andi	r2,r2,255
 4001b50:	100d883a 	mov	r6,r2
 4001b54:	01403c04 	movi	r5,240
 4001b58:	e13ffc17 	ldw	r4,-16(fp)
 4001b5c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 4001b60:	01403204 	movi	r5,200
 4001b64:	e13ffc17 	ldw	r4,-16(fp)
 4001b68:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001b6c:	0084303a 	nor	r2,zero,r2
 4001b70:	10803fcc 	andi	r2,r2,255
 4001b74:	1004d1fa 	srli	r2,r2,7
 4001b78:	10803fcc 	andi	r2,r2,255
 4001b7c:	10000126 	beq	r2,zero,4001b84 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
 4001b80:	003ff706 	br	4001b60 <__alt_mem_onchip_memory2_0+0xfc0008e0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 4001b84:	01802004 	movi	r6,128
 4001b88:	01403204 	movi	r5,200
 4001b8c:	e13ffc17 	ldw	r4,-16(fp)
 4001b90:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 4001b94:	01403e04 	movi	r5,248
 4001b98:	e13ffc17 	ldw	r4,-16(fp)
 4001b9c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001ba0:	108003cc 	andi	r2,r2,15
 4001ba4:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 4001ba8:	e0bff603 	ldbu	r2,-40(fp)
 4001bac:	10000726 	beq	r2,zero,4001bcc <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 4001bb0:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001bb4:	1007883a 	mov	r3,r2
 4001bb8:	e0bffa17 	ldw	r2,-24(fp)
 4001bbc:	1885c83a 	sub	r2,r3,r2
 4001bc0:	1000020e 	bge	r2,zero,4001bcc <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 4001bc4:	00800044 	movi	r2,1
 4001bc8:	00000106 	br	4001bd0 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
 4001bcc:	0005883a 	mov	r2,zero
 4001bd0:	10803fcc 	andi	r2,r2,255
 4001bd4:	10006426 	beq	r2,zero,4001d68 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 4001bd8:	e0bff603 	ldbu	r2,-40(fp)
 4001bdc:	10c001a0 	cmpeqi	r3,r2,6
 4001be0:	1800151e 	bne	r3,zero,4001c38 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
 4001be4:	10c003a0 	cmpeqi	r3,r2,14
 4001be8:	18000c1e 	bne	r3,zero,4001c1c <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
 4001bec:	10800120 	cmpeqi	r2,r2,4
 4001bf0:	1000011e 	bne	r2,zero,4001bf8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 4001bf4:	00006506 	br	4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
 4001bf8:	e0bff80b 	ldhu	r2,-32(fp)
 4001bfc:	10800044 	addi	r2,r2,1
 4001c00:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
 4001c04:	e0bffe0b 	ldhu	r2,-8(fp)
 4001c08:	10002826 	beq	r2,zero,4001cac <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
 4001c0c:	e0fff80b 	ldhu	r3,-32(fp)
 4001c10:	e0bffe0b 	ldhu	r2,-8(fp)
 4001c14:	1880251e 	bne	r3,r2,4001cac <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
 4001c18:	00005c06 	br	4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
 4001c1c:	e0bff643 	ldbu	r2,-39(fp)
 4001c20:	10800044 	addi	r2,r2,1
 4001c24:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
 4001c28:	e0bff643 	ldbu	r2,-39(fp)
 4001c2c:	108000d8 	cmpnei	r2,r2,3
 4001c30:	1000201e 	bne	r2,zero,4001cb4 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
 4001c34:	00005506 	br	4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 4001c38:	01403e04 	movi	r5,248
 4001c3c:	e13ffc17 	ldw	r4,-16(fp)
 4001c40:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001c44:	10803fcc 	andi	r2,r2,255
 4001c48:	1080080c 	andi	r2,r2,32
 4001c4c:	1005003a 	cmpeq	r2,r2,zero
 4001c50:	1007883a 	mov	r3,r2
 4001c54:	e0bffd17 	ldw	r2,-12(fp)
 4001c58:	1940004c 	andi	r5,r3,1
 4001c5c:	11000083 	ldbu	r4,2(r2)
 4001c60:	00ffff84 	movi	r3,-2
 4001c64:	20c6703a 	and	r3,r4,r3
 4001c68:	1809883a 	mov	r4,r3
 4001c6c:	2807883a 	mov	r3,r5
 4001c70:	20c6b03a 	or	r3,r4,r3
 4001c74:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 4001c78:	e0bffd17 	ldw	r2,-12(fp)
 4001c7c:	10800083 	ldbu	r2,2(r2)
 4001c80:	1080004c 	andi	r2,r2,1
 4001c84:	10803fcc 	andi	r2,r2,255
 4001c88:	10000226 	beq	r2,zero,4001c94 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
 4001c8c:	00802004 	movi	r2,128
 4001c90:	00000106 	br	4001c98 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
 4001c94:	00801004 	movi	r2,64
 4001c98:	100d883a 	mov	r6,r2
 4001c9c:	01403a04 	movi	r5,232
 4001ca0:	e13ffc17 	ldw	r4,-16(fp)
 4001ca4:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                                        break;
 4001ca8:	00000306 	br	4001cb8 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
 4001cac:	0001883a 	nop
 4001cb0:	00000106 	br	4001cb8 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
 4001cb4:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 4001cb8:	000d883a 	mov	r6,zero
 4001cbc:	01400e04 	movi	r5,56
 4001cc0:	e13ffc17 	ldw	r4,-16(fp)
 4001cc4:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 4001cc8:	e0bff717 	ldw	r2,-36(fp)
 4001ccc:	10800003 	ldbu	r2,0(r2)
 4001cd0:	10803fcc 	andi	r2,r2,255
 4001cd4:	100d883a 	mov	r6,r2
 4001cd8:	01400404 	movi	r5,16
 4001cdc:	e13ffc17 	ldw	r4,-16(fp)
 4001ce0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 4001ce4:	e0bffb0b 	ldhu	r2,-20(fp)
 4001ce8:	10803fcc 	andi	r2,r2,255
 4001cec:	100d883a 	mov	r6,r2
 4001cf0:	01400e04 	movi	r5,56
 4001cf4:	e13ffc17 	ldw	r4,-16(fp)
 4001cf8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 4001cfc:	e0bffd17 	ldw	r2,-12(fp)
 4001d00:	10800003 	ldbu	r2,0(r2)
 4001d04:	10800814 	ori	r2,r2,32
 4001d08:	10803fcc 	andi	r2,r2,255
 4001d0c:	100d883a 	mov	r6,r2
 4001d10:	01403c04 	movi	r5,240
 4001d14:	e13ffc17 	ldw	r4,-16(fp)
 4001d18:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 4001d1c:	01403204 	movi	r5,200
 4001d20:	e13ffc17 	ldw	r4,-16(fp)
 4001d24:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001d28:	0084303a 	nor	r2,zero,r2
 4001d2c:	10803fcc 	andi	r2,r2,255
 4001d30:	1004d1fa 	srli	r2,r2,7
 4001d34:	10803fcc 	andi	r2,r2,255
 4001d38:	10000126 	beq	r2,zero,4001d40 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
 4001d3c:	003ff706 	br	4001d1c <__alt_mem_onchip_memory2_0+0xfc000a9c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 4001d40:	01802004 	movi	r6,128
 4001d44:	01403204 	movi	r5,200
 4001d48:	e13ffc17 	ldw	r4,-16(fp)
 4001d4c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 4001d50:	01403e04 	movi	r5,248
 4001d54:	e13ffc17 	ldw	r4,-16(fp)
 4001d58:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001d5c:	108003cc 	andi	r2,r2,15
 4001d60:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 4001d64:	003f9006 	br	4001ba8 <__alt_mem_onchip_memory2_0+0xfc000928>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 4001d68:	e0fff88b 	ldhu	r3,-30(fp)
 4001d6c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001d70:	1885c83a 	sub	r2,r3,r2
 4001d74:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
 4001d78:	e0bffb0b 	ldhu	r2,-20(fp)
 4001d7c:	e0fff717 	ldw	r3,-36(fp)
 4001d80:	1885883a 	add	r2,r3,r2
 4001d84:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
 4001d88:	003f5506 	br	4001ae0 <__alt_mem_onchip_memory2_0+0xfc000860>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 4001d8c:	01403e04 	movi	r5,248
 4001d90:	e13ffc17 	ldw	r4,-16(fp)
 4001d94:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001d98:	10803fcc 	andi	r2,r2,255
 4001d9c:	1080080c 	andi	r2,r2,32
 4001da0:	10000226 	beq	r2,zero,4001dac <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
 4001da4:	00c00044 	movi	r3,1
 4001da8:	00000106 	br	4001db0 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
 4001dac:	0007883a 	mov	r3,zero
 4001db0:	e0bffd17 	ldw	r2,-12(fp)
 4001db4:	1940004c 	andi	r5,r3,1
 4001db8:	11000083 	ldbu	r4,2(r2)
 4001dbc:	00ffff84 	movi	r3,-2
 4001dc0:	20c6703a 	and	r3,r4,r3
 4001dc4:	1809883a 	mov	r4,r3
 4001dc8:	2807883a 	mov	r3,r5
 4001dcc:	20c6b03a 	or	r3,r4,r3
 4001dd0:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
 4001dd4:	e0bff603 	ldbu	r2,-40(fp)
}
 4001dd8:	e037883a 	mov	sp,fp
 4001ddc:	dfc00117 	ldw	ra,4(sp)
 4001de0:	df000017 	ldw	fp,0(sp)
 4001de4:	dec00204 	addi	sp,sp,8
 4001de8:	f800283a 	ret

04001dec <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 4001dec:	defff704 	addi	sp,sp,-36
 4001df0:	dfc00815 	stw	ra,32(sp)
 4001df4:	df000715 	stw	fp,28(sp)
 4001df8:	df000704 	addi	fp,sp,28
 4001dfc:	e13ffc15 	stw	r4,-16(fp)
 4001e00:	2809883a 	mov	r4,r5
 4001e04:	3007883a 	mov	r3,r6
 4001e08:	3805883a 	mov	r2,r7
 4001e0c:	e13ffd05 	stb	r4,-12(fp)
 4001e10:	e0fffe05 	stb	r3,-8(fp)
 4001e14:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 4001e18:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001e1c:	1084e204 	addi	r2,r2,5000
 4001e20:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 4001e24:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
 4001e28:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
 4001e2c:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 4001e30:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001e34:	1007883a 	mov	r3,r2
 4001e38:	e0bffa17 	ldw	r2,-24(fp)
 4001e3c:	1885c83a 	sub	r2,r3,r2
 4001e40:	1004d7fa 	srli	r2,r2,31
 4001e44:	10803fcc 	andi	r2,r2,255
 4001e48:	10004226 	beq	r2,zero,4001f54 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 4001e4c:	e0fffd03 	ldbu	r3,-12(fp)
 4001e50:	e0bffe03 	ldbu	r2,-8(fp)
 4001e54:	1884b03a 	or	r2,r3,r2
 4001e58:	10803fcc 	andi	r2,r2,255
 4001e5c:	100d883a 	mov	r6,r2
 4001e60:	01403c04 	movi	r5,240
 4001e64:	e13ffc17 	ldw	r4,-16(fp)
 4001e68:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 4001e6c:	00bfffc4 	movi	r2,-1
 4001e70:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 4001e74:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001e78:	1007883a 	mov	r3,r2
 4001e7c:	e0bffa17 	ldw	r2,-24(fp)
 4001e80:	1885c83a 	sub	r2,r3,r2
 4001e84:	1004d7fa 	srli	r2,r2,31
 4001e88:	10803fcc 	andi	r2,r2,255
 4001e8c:	10000e26 	beq	r2,zero,4001ec8 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 4001e90:	01403204 	movi	r5,200
 4001e94:	e13ffc17 	ldw	r4,-16(fp)
 4001e98:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001e9c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
 4001ea0:	e0bffb03 	ldbu	r2,-20(fp)
 4001ea4:	10803fcc 	andi	r2,r2,255
 4001ea8:	1080201c 	xori	r2,r2,128
 4001eac:	10bfe004 	addi	r2,r2,-128
 4001eb0:	103ff00e 	bge	r2,zero,4001e74 <__alt_mem_onchip_memory2_0+0xfc000bf4>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 4001eb4:	01802004 	movi	r6,128
 4001eb8:	01403204 	movi	r5,200
 4001ebc:	e13ffc17 	ldw	r4,-16(fp)
 4001ec0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
 4001ec4:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 4001ec8:	01403e04 	movi	r5,248
 4001ecc:	e13ffc17 	ldw	r4,-16(fp)
 4001ed0:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001ed4:	108003cc 	andi	r2,r2,15
 4001ed8:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
 4001edc:	e0bff903 	ldbu	r2,-28(fp)
 4001ee0:	10c00120 	cmpeqi	r3,r2,4
 4001ee4:	1800031e 	bne	r3,zero,4001ef4 <_ZN3USB11dispatchPktEhht+0x108>
 4001ee8:	108003a0 	cmpeqi	r2,r2,14
 4001eec:	10000b1e 	bne	r2,zero,4001f1c <_ZN3USB11dispatchPktEhht+0x130>
 4001ef0:	00001206 	br	4001f3c <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
 4001ef4:	e0bff98b 	ldhu	r2,-26(fp)
 4001ef8:	10800044 	addi	r2,r2,1
 4001efc:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
 4001f00:	e0bfff0b 	ldhu	r2,-4(fp)
 4001f04:	10000f26 	beq	r2,zero,4001f44 <_ZN3USB11dispatchPktEhht+0x158>
 4001f08:	e0fff98b 	ldhu	r3,-26(fp)
 4001f0c:	e0bfff0b 	ldhu	r2,-4(fp)
 4001f10:	18800c1e 	bne	r3,r2,4001f44 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
 4001f14:	e0bff903 	ldbu	r2,-28(fp)
 4001f18:	00000f06 	br	4001f58 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 4001f1c:	e0bff943 	ldbu	r2,-27(fp)
 4001f20:	10800044 	addi	r2,r2,1
 4001f24:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
 4001f28:	e0bff943 	ldbu	r2,-27(fp)
 4001f2c:	108000d8 	cmpnei	r2,r2,3
 4001f30:	1000061e 	bne	r2,zero,4001f4c <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
 4001f34:	e0bff903 	ldbu	r2,-28(fp)
 4001f38:	00000706 	br	4001f58 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
 4001f3c:	e0bff903 	ldbu	r2,-28(fp)
 4001f40:	00000506 	br	4001f58 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
 4001f44:	0001883a 	nop
 4001f48:	003fb906 	br	4001e30 <__alt_mem_onchip_memory2_0+0xfc000bb0>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
 4001f4c:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 4001f50:	003fb706 	br	4001e30 <__alt_mem_onchip_memory2_0+0xfc000bb0>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 4001f54:	e0bff903 	ldbu	r2,-28(fp)
}
 4001f58:	e037883a 	mov	sp,fp
 4001f5c:	dfc00117 	ldw	ra,4(sp)
 4001f60:	df000017 	ldw	fp,0(sp)
 4001f64:	dec00204 	addi	sp,sp,8
 4001f68:	f800283a 	ret

04001f6c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 4001f6c:	defffa04 	addi	sp,sp,-24
 4001f70:	dfc00515 	stw	ra,20(sp)
 4001f74:	df000415 	stw	fp,16(sp)
 4001f78:	df000404 	addi	fp,sp,16
 4001f7c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 4001f80:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
 4001f84:	e13ffe17 	ldw	r4,-8(fp)
 4001f88:	4009c480 	call	4009c48 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
 4001f8c:	e13ffe17 	ldw	r4,-8(fp)
 4001f90:	40093900 	call	4009390 <_ZN8MAX3421e12getVbusStateEv>
 4001f94:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 4001f98:	e0bffcc3 	ldbu	r2,-13(fp)
 4001f9c:	10c00060 	cmpeqi	r3,r2,1
 4001fa0:	1800091e 	bne	r3,zero,4001fc8 <_ZN3USB4TaskEv+0x5c>
 4001fa4:	10c00088 	cmpgei	r3,r2,2
 4001fa8:	1800021e 	bne	r3,zero,4001fb4 <_ZN3USB4TaskEv+0x48>
 4001fac:	10000a26 	beq	r2,zero,4001fd8 <_ZN3USB4TaskEv+0x6c>
 4001fb0:	00001f06 	br	4002030 <_ZN3USB4TaskEv+0xc4>
 4001fb4:	10c000a0 	cmpeqi	r3,r2,2
 4001fb8:	1800121e 	bne	r3,zero,4002004 <_ZN3USB4TaskEv+0x98>
 4001fbc:	108000e0 	cmpeqi	r2,r2,3
 4001fc0:	10000e1e 	bne	r2,zero,4001ffc <_ZN3USB4TaskEv+0x90>
 4001fc4:	00001a06 	br	4002030 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 4001fc8:	008004c4 	movi	r2,19
 4001fcc:	d0b23545 	stb	r2,-14123(gp)
                        lowspeed = false;
 4001fd0:	e03ffc05 	stb	zero,-16(fp)
                        break;
 4001fd4:	00001606 	br	4002030 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 4001fd8:	d0b23543 	ldbu	r2,-14123(gp)
 4001fdc:	10803fcc 	andi	r2,r2,255
 4001fe0:	10803c0c 	andi	r2,r2,240
 4001fe4:	10800420 	cmpeqi	r2,r2,16
 4001fe8:	1000021e 	bne	r2,zero,4001ff4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 4001fec:	00800444 	movi	r2,17
 4001ff0:	d0b23545 	stb	r2,-14123(gp)
                        lowspeed = false;
 4001ff4:	e03ffc05 	stb	zero,-16(fp)
                        break;
 4001ff8:	00000d06 	br	4002030 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
 4001ffc:	00800044 	movi	r2,1
 4002000:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 4002004:	d0b23543 	ldbu	r2,-14123(gp)
 4002008:	10803fcc 	andi	r2,r2,255
 400200c:	10803c0c 	andi	r2,r2,240
 4002010:	10800418 	cmpnei	r2,r2,16
 4002014:	1000051e 	bne	r2,zero,400202c <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 4002018:	4000e2c0 	call	4000e2c <_Z6millisv>
 400201c:	10803204 	addi	r2,r2,200
 4002020:	d0b23615 	stw	r2,-14120(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 4002024:	00800804 	movi	r2,32
 4002028:	d0b23545 	stb	r2,-14123(gp)
                        }
                        break;
 400202c:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 4002030:	e03ffc45 	stb	zero,-15(fp)
 4002034:	e0bffc43 	ldbu	r2,-15(fp)
 4002038:	10800428 	cmpgeui	r2,r2,16
 400203c:	1000201e 	bne	r2,zero,40020c0 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
 4002040:	e0bffc43 	ldbu	r2,-15(fp)
 4002044:	e0fffe17 	ldw	r3,-8(fp)
 4002048:	10800784 	addi	r2,r2,30
 400204c:	1085883a 	add	r2,r2,r2
 4002050:	1085883a 	add	r2,r2,r2
 4002054:	1885883a 	add	r2,r3,r2
 4002058:	10800017 	ldw	r2,0(r2)
 400205c:	10001426 	beq	r2,zero,40020b0 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
 4002060:	e0bffc43 	ldbu	r2,-15(fp)
 4002064:	e0fffe17 	ldw	r3,-8(fp)
 4002068:	10800784 	addi	r2,r2,30
 400206c:	1085883a 	add	r2,r2,r2
 4002070:	1085883a 	add	r2,r2,r2
 4002074:	1885883a 	add	r2,r3,r2
 4002078:	10800017 	ldw	r2,0(r2)
 400207c:	10800017 	ldw	r2,0(r2)
 4002080:	10800304 	addi	r2,r2,12
 4002084:	10c00017 	ldw	r3,0(r2)
 4002088:	e0bffc43 	ldbu	r2,-15(fp)
 400208c:	e13ffe17 	ldw	r4,-8(fp)
 4002090:	10800784 	addi	r2,r2,30
 4002094:	1085883a 	add	r2,r2,r2
 4002098:	1085883a 	add	r2,r2,r2
 400209c:	2085883a 	add	r2,r4,r2
 40020a0:	10800017 	ldw	r2,0(r2)
 40020a4:	1009883a 	mov	r4,r2
 40020a8:	183ee83a 	callr	r3
 40020ac:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 40020b0:	e0bffc43 	ldbu	r2,-15(fp)
 40020b4:	10800044 	addi	r2,r2,1
 40020b8:	e0bffc45 	stb	r2,-15(fp)
 40020bc:	003fdd06 	br	4002034 <__alt_mem_onchip_memory2_0+0xfc000db4>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 40020c0:	d0b23543 	ldbu	r2,-14123(gp)
 40020c4:	10803fcc 	andi	r2,r2,255
 40020c8:	10c01020 	cmpeqi	r3,r2,64
 40020cc:	1800511e 	bne	r3,zero,4002214 <_ZN3USB4TaskEv+0x2a8>
 40020d0:	10c01048 	cmpgei	r3,r2,65
 40020d4:	18000c1e 	bne	r3,zero,4002108 <_ZN3USB4TaskEv+0x19c>
 40020d8:	10c004e0 	cmpeqi	r3,r2,19
 40020dc:	18008e1e 	bne	r3,zero,4002318 <_ZN3USB4TaskEv+0x3ac>
 40020e0:	10c00508 	cmpgei	r3,r2,20
 40020e4:	1800031e 	bne	r3,zero,40020f4 <_ZN3USB4TaskEv+0x188>
 40020e8:	10800460 	cmpeqi	r2,r2,17
 40020ec:	10000f1e 	bne	r2,zero,400212c <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
 40020f0:	00009406 	br	4002344 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 40020f4:	10c00820 	cmpeqi	r3,r2,32
 40020f8:	1800351e 	bne	r3,zero,40021d0 <_ZN3USB4TaskEv+0x264>
 40020fc:	10800c20 	cmpeqi	r2,r2,48
 4002100:	10003d1e 	bne	r2,zero,40021f8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 4002104:	00008f06 	br	4002344 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 4002108:	10c02020 	cmpeqi	r3,r2,128
 400210c:	18006e1e 	bne	r3,zero,40022c8 <_ZN3USB4TaskEv+0x35c>
 4002110:	10c02048 	cmpgei	r3,r2,129
 4002114:	18008b1e 	bne	r3,zero,4002344 <_ZN3USB4TaskEv+0x3d8>
 4002118:	10c01420 	cmpeqi	r3,r2,80
 400211c:	1800521e 	bne	r3,zero,4002268 <_ZN3USB4TaskEv+0x2fc>
 4002120:	10801460 	cmpeqi	r2,r2,81
 4002124:	10005e1e 	bne	r2,zero,40022a0 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 4002128:	00008606 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
 400212c:	e13ffe17 	ldw	r4,-8(fp)
 4002130:	4000eac0 	call	4000eac <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 4002134:	e03ffc85 	stb	zero,-14(fp)
 4002138:	e0bffc83 	ldbu	r2,-14(fp)
 400213c:	10800428 	cmpgeui	r2,r2,16
 4002140:	1000201e 	bne	r2,zero,40021c4 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
 4002144:	e0bffc83 	ldbu	r2,-14(fp)
 4002148:	e0fffe17 	ldw	r3,-8(fp)
 400214c:	10800784 	addi	r2,r2,30
 4002150:	1085883a 	add	r2,r2,r2
 4002154:	1085883a 	add	r2,r2,r2
 4002158:	1885883a 	add	r2,r3,r2
 400215c:	10800017 	ldw	r2,0(r2)
 4002160:	10001426 	beq	r2,zero,40021b4 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
 4002164:	e0bffc83 	ldbu	r2,-14(fp)
 4002168:	e0fffe17 	ldw	r3,-8(fp)
 400216c:	10800784 	addi	r2,r2,30
 4002170:	1085883a 	add	r2,r2,r2
 4002174:	1085883a 	add	r2,r2,r2
 4002178:	1885883a 	add	r2,r3,r2
 400217c:	10800017 	ldw	r2,0(r2)
 4002180:	10800017 	ldw	r2,0(r2)
 4002184:	10800204 	addi	r2,r2,8
 4002188:	10c00017 	ldw	r3,0(r2)
 400218c:	e0bffc83 	ldbu	r2,-14(fp)
 4002190:	e13ffe17 	ldw	r4,-8(fp)
 4002194:	10800784 	addi	r2,r2,30
 4002198:	1085883a 	add	r2,r2,r2
 400219c:	1085883a 	add	r2,r2,r2
 40021a0:	2085883a 	add	r2,r4,r2
 40021a4:	10800017 	ldw	r2,0(r2)
 40021a8:	1009883a 	mov	r4,r2
 40021ac:	183ee83a 	callr	r3
 40021b0:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 40021b4:	e0bffc83 	ldbu	r2,-14(fp)
 40021b8:	10800044 	addi	r2,r2,1
 40021bc:	e0bffc85 	stb	r2,-14(fp)
 40021c0:	003fdd06 	br	4002138 <__alt_mem_onchip_memory2_0+0xfc000eb8>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 40021c4:	00800484 	movi	r2,18
 40021c8:	d0b23545 	stb	r2,-14123(gp)
                        break;
 40021cc:	00005d06 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 40021d0:	4000e2c0 	call	4000e2c <_Z6millisv>
 40021d4:	1007883a 	mov	r3,r2
 40021d8:	d0b23617 	ldw	r2,-14120(gp)
 40021dc:	1885c83a 	sub	r2,r3,r2
 40021e0:	0084303a 	nor	r2,zero,r2
 40021e4:	1004d7fa 	srli	r2,r2,31
 40021e8:	10803fcc 	andi	r2,r2,255
 40021ec:	10004c26 	beq	r2,zero,4002320 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 40021f0:	00800c04 	movi	r2,48
 40021f4:	d0b23545 	stb	r2,-14123(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 40021f8:	01800044 	movi	r6,1
 40021fc:	01403a04 	movi	r5,232
 4002200:	e13ffe17 	ldw	r4,-8(fp)
 4002204:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 4002208:	00801004 	movi	r2,64
 400220c:	d0b23545 	stb	r2,-14123(gp)
                        break;
 4002210:	00004c06 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 4002214:	01403a04 	movi	r5,232
 4002218:	e13ffe17 	ldw	r4,-8(fp)
 400221c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4002220:	10803fcc 	andi	r2,r2,255
 4002224:	1080004c 	andi	r2,r2,1
 4002228:	1005003a 	cmpeq	r2,r2,zero
 400222c:	10803fcc 	andi	r2,r2,255
 4002230:	10003d26 	beq	r2,zero,4002328 <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 4002234:	01403604 	movi	r5,216
 4002238:	e13ffe17 	ldw	r4,-8(fp)
 400223c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4002240:	10800214 	ori	r2,r2,8
 4002244:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
 4002248:	e0bffcc3 	ldbu	r2,-13(fp)
 400224c:	100d883a 	mov	r6,r2
 4002250:	01403604 	movi	r5,216
 4002254:	e13ffe17 	ldw	r4,-8(fp)
 4002258:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 400225c:	00801404 	movi	r2,80
 4002260:	d0b23545 	stb	r2,-14123(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
 4002264:	00003006 	br	4002328 <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 4002268:	01403204 	movi	r5,200
 400226c:	e13ffe17 	ldw	r4,-8(fp)
 4002270:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4002274:	10803fcc 	andi	r2,r2,255
 4002278:	1080100c 	andi	r2,r2,64
 400227c:	1004c03a 	cmpne	r2,r2,zero
 4002280:	10803fcc 	andi	r2,r2,255
 4002284:	10002a26 	beq	r2,zero,4002330 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 4002288:	00801444 	movi	r2,81
 400228c:	d0b23545 	stb	r2,-14123(gp)
                                delay = (uint32_t)millis() + 20;
 4002290:	4000e2c0 	call	4000e2c <_Z6millisv>
 4002294:	10800504 	addi	r2,r2,20
 4002298:	d0b23615 	stw	r2,-14120(gp)
                        }
                        break;
 400229c:	00002406 	br	4002330 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 40022a0:	4000e2c0 	call	4000e2c <_Z6millisv>
 40022a4:	1007883a 	mov	r3,r2
 40022a8:	d0b23617 	ldw	r2,-14120(gp)
 40022ac:	1885c83a 	sub	r2,r3,r2
 40022b0:	0084303a 	nor	r2,zero,r2
 40022b4:	1004d7fa 	srli	r2,r2,31
 40022b8:	10803fcc 	andi	r2,r2,255
 40022bc:	10001e26 	beq	r2,zero,4002338 <_ZN3USB4TaskEv+0x3cc>
 40022c0:	00bfe004 	movi	r2,-128
 40022c4:	d0b23545 	stb	r2,-14123(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
 40022c8:	e0bffc03 	ldbu	r2,-16(fp)
 40022cc:	100f883a 	mov	r7,r2
 40022d0:	000d883a 	mov	r6,zero
 40022d4:	000b883a 	mov	r5,zero
 40022d8:	e13ffe17 	ldw	r4,-8(fp)
 40022dc:	400274c0 	call	400274c <_ZN3USB11ConfiguringEhhb>
 40022e0:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
 40022e4:	e0bffd03 	ldbu	r2,-12(fp)
 40022e8:	10000826 	beq	r2,zero,400230c <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 40022ec:	e0bffd03 	ldbu	r2,-12(fp)
 40022f0:	108034a0 	cmpeqi	r2,r2,210
 40022f4:	1000121e 	bne	r2,zero,4002340 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
 40022f8:	e0bffd03 	ldbu	r2,-12(fp)
 40022fc:	d0b23505 	stb	r2,-14124(gp)
                                        usb_task_state = USB_STATE_ERROR;
 4002300:	00bfe804 	movi	r2,-96
 4002304:	d0b23545 	stb	r2,-14123(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
 4002308:	00000d06 	br	4002340 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
 400230c:	00bfe404 	movi	r2,-112
 4002310:	d0b23545 	stb	r2,-14123(gp)
                        break;
 4002314:	00000a06 	br	4002340 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
 4002318:	0001883a 	nop
 400231c:	00000906 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
 4002320:	0001883a 	nop
 4002324:	00000706 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
 4002328:	0001883a 	nop
 400232c:	00000506 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
 4002330:	0001883a 	nop
 4002334:	00000306 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
 4002338:	0001883a 	nop
 400233c:	00000106 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
 4002340:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 4002344:	0001883a 	nop
 4002348:	e037883a 	mov	sp,fp
 400234c:	dfc00117 	ldw	ra,4(sp)
 4002350:	df000017 	ldw	fp,0(sp)
 4002354:	dec00204 	addi	sp,sp,8
 4002358:	f800283a 	ret

0400235c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 400235c:	defff704 	addi	sp,sp,-36
 4002360:	dfc00815 	stw	ra,32(sp)
 4002364:	df000715 	stw	fp,28(sp)
 4002368:	df000704 	addi	fp,sp,28
 400236c:	e13ffc15 	stw	r4,-16(fp)
 4002370:	2809883a 	mov	r4,r5
 4002374:	3007883a 	mov	r3,r6
 4002378:	3805883a 	mov	r2,r7
 400237c:	e13ffd05 	stb	r4,-12(fp)
 4002380:	e0fffe05 	stb	r3,-8(fp)
 4002384:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 4002388:	e03ff915 	stw	zero,-28(fp)
 400238c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 4002390:	e0bffc17 	ldw	r2,-16(fp)
 4002394:	000b883a 	mov	r5,zero
 4002398:	1009883a 	mov	r4,r2
 400239c:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 40023a0:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
 40023a4:	e0bff917 	ldw	r2,-28(fp)
 40023a8:	1000021e 	bne	r2,zero,40023b4 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40023ac:	00bff584 	movi	r2,-42
 40023b0:	00003d06 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
 40023b4:	e0bff917 	ldw	r2,-28(fp)
 40023b8:	10c00003 	ldbu	r3,0(r2)
 40023bc:	11000043 	ldbu	r4,1(r2)
 40023c0:	2008923a 	slli	r4,r4,8
 40023c4:	20c6b03a 	or	r3,r4,r3
 40023c8:	11000083 	ldbu	r4,2(r2)
 40023cc:	2008943a 	slli	r4,r4,16
 40023d0:	20c6b03a 	or	r3,r4,r3
 40023d4:	108000c3 	ldbu	r2,3(r2)
 40023d8:	1004963a 	slli	r2,r2,24
 40023dc:	10c4b03a 	or	r2,r2,r3
 40023e0:	1000021e 	bne	r2,zero,40023ec <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
 40023e4:	00bff5c4 	movi	r2,-41
 40023e8:	00002f06 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
 40023ec:	e0bff917 	ldw	r2,-28(fp)
 40023f0:	e0ffff03 	ldbu	r3,-4(fp)
 40023f4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 40023f8:	e0bffc17 	ldw	r2,-16(fp)
 40023fc:	e0fffd03 	ldbu	r3,-12(fp)
 4002400:	e13ffe03 	ldbu	r4,-8(fp)
 4002404:	200f883a 	mov	r7,r4
 4002408:	000d883a 	mov	r6,zero
 400240c:	180b883a 	mov	r5,r3
 4002410:	1009883a 	mov	r4,r2
 4002414:	40035440 	call	4003544 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 4002418:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
 400241c:	e0bffb03 	ldbu	r2,-20(fp)
 4002420:	1000021e 	bne	r2,zero,400242c <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 4002424:	00bff504 	movi	r2,-44
 4002428:	00001f06 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
 400242c:	e0bffc17 	ldw	r2,-16(fp)
 4002430:	e0fffb03 	ldbu	r3,-20(fp)
 4002434:	180b883a 	mov	r5,r3
 4002438:	1009883a 	mov	r4,r2
 400243c:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4002440:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
 4002444:	e0bffa17 	ldw	r2,-24(fp)
 4002448:	1000021e 	bne	r2,zero,4002454 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 400244c:	00bff584 	movi	r2,-42
 4002450:	00001506 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
 4002454:	e0bffa17 	ldw	r2,-24(fp)
 4002458:	e0ffff03 	ldbu	r3,-4(fp)
 400245c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 4002460:	e0bffb03 	ldbu	r2,-20(fp)
 4002464:	100f883a 	mov	r7,r2
 4002468:	000d883a 	mov	r6,zero
 400246c:	000b883a 	mov	r5,zero
 4002470:	e13ffc17 	ldw	r4,-16(fp)
 4002474:	40032500 	call	4003250 <_ZN3USB7setAddrEhhh>
 4002478:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
 400247c:	e0bffb43 	ldbu	r2,-19(fp)
 4002480:	10000826 	beq	r2,zero,40024a4 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
 4002484:	e0bffc17 	ldw	r2,-16(fp)
 4002488:	e0fffb03 	ldbu	r3,-20(fp)
 400248c:	180b883a 	mov	r5,r3
 4002490:	1009883a 	mov	r4,r2
 4002494:	40037a40 	call	40037a4 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 4002498:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
 400249c:	e0bffb43 	ldbu	r2,-19(fp)
 40024a0:	00000106 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
 40024a4:	0005883a 	mov	r2,zero
};
 40024a8:	e037883a 	mov	sp,fp
 40024ac:	dfc00117 	ldw	ra,4(sp)
 40024b0:	df000017 	ldw	fp,0(sp)
 40024b4:	dec00204 	addi	sp,sp,8
 40024b8:	f800283a 	ret

040024bc <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 40024bc:	defff804 	addi	sp,sp,-32
 40024c0:	dfc00715 	stw	ra,28(sp)
 40024c4:	df000615 	stw	fp,24(sp)
 40024c8:	df000604 	addi	fp,sp,24
 40024cc:	e13ffb15 	stw	r4,-20(fp)
 40024d0:	3009883a 	mov	r4,r6
 40024d4:	3807883a 	mov	r3,r7
 40024d8:	e0800217 	ldw	r2,8(fp)
 40024dc:	e17ffc05 	stb	r5,-16(fp)
 40024e0:	e13ffd05 	stb	r4,-12(fp)
 40024e4:	e0fffe05 	stb	r3,-8(fp)
 40024e8:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 40024ec:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 40024f0:	e0bffc03 	ldbu	r2,-16(fp)
 40024f4:	e0fffb17 	ldw	r3,-20(fp)
 40024f8:	10800784 	addi	r2,r2,30
 40024fc:	1085883a 	add	r2,r2,r2
 4002500:	1085883a 	add	r2,r2,r2
 4002504:	1885883a 	add	r2,r3,r2
 4002508:	10800017 	ldw	r2,0(r2)
 400250c:	10800017 	ldw	r2,0(r2)
 4002510:	10800104 	addi	r2,r2,4
 4002514:	10c00017 	ldw	r3,0(r2)
 4002518:	e0bffc03 	ldbu	r2,-16(fp)
 400251c:	e13ffb17 	ldw	r4,-20(fp)
 4002520:	10800784 	addi	r2,r2,30
 4002524:	1085883a 	add	r2,r2,r2
 4002528:	1085883a 	add	r2,r2,r2
 400252c:	2085883a 	add	r2,r4,r2
 4002530:	10800017 	ldw	r2,0(r2)
 4002534:	e13ffd03 	ldbu	r4,-12(fp)
 4002538:	e17ffe03 	ldbu	r5,-8(fp)
 400253c:	e1bfff03 	ldbu	r6,-4(fp)
 4002540:	300f883a 	mov	r7,r6
 4002544:	280d883a 	mov	r6,r5
 4002548:	200b883a 	mov	r5,r4
 400254c:	1009883a 	mov	r4,r2
 4002550:	183ee83a 	callr	r3
 4002554:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 4002558:	e0bffa43 	ldbu	r2,-23(fp)
 400255c:	10803818 	cmpnei	r2,r2,224
 4002560:	10001f1e 	bne	r2,zero,40025e0 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
 4002564:	e0bffd03 	ldbu	r2,-12(fp)
 4002568:	1000071e 	bne	r2,zero,4002588 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 400256c:	01800044 	movi	r6,1
 4002570:	01403a04 	movi	r5,232
 4002574:	e13ffb17 	ldw	r4,-20(fp)
 4002578:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 400257c:	01001984 	movi	r4,102
 4002580:	4000dd40 	call	4000dd4 <_Z5delaym>
 4002584:	00002606 	br	4002620 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 4002588:	e0bffd03 	ldbu	r2,-12(fp)
 400258c:	e0fffb17 	ldw	r3,-20(fp)
 4002590:	10800784 	addi	r2,r2,30
 4002594:	1085883a 	add	r2,r2,r2
 4002598:	1085883a 	add	r2,r2,r2
 400259c:	1885883a 	add	r2,r3,r2
 40025a0:	10800017 	ldw	r2,0(r2)
 40025a4:	10800017 	ldw	r2,0(r2)
 40025a8:	10800504 	addi	r2,r2,20
 40025ac:	10c00017 	ldw	r3,0(r2)
 40025b0:	e0bffd03 	ldbu	r2,-12(fp)
 40025b4:	e13ffb17 	ldw	r4,-20(fp)
 40025b8:	10800784 	addi	r2,r2,30
 40025bc:	1085883a 	add	r2,r2,r2
 40025c0:	1085883a 	add	r2,r2,r2
 40025c4:	2085883a 	add	r2,r4,r2
 40025c8:	10800017 	ldw	r2,0(r2)
 40025cc:	e13ffe03 	ldbu	r4,-8(fp)
 40025d0:	200b883a 	mov	r5,r4
 40025d4:	1009883a 	mov	r4,r2
 40025d8:	183ee83a 	callr	r3
 40025dc:	00001006 	br	4002620 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 40025e0:	e0bffa43 	ldbu	r2,-23(fp)
 40025e4:	10800358 	cmpnei	r2,r2,13
 40025e8:	1000091e 	bne	r2,zero,4002610 <_ZN3USB13AttemptConfigEhhhb+0x154>
 40025ec:	e0bffa03 	ldbu	r2,-24(fp)
 40025f0:	108000e8 	cmpgeui	r2,r2,3
 40025f4:	1000061e 	bne	r2,zero,4002610 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
 40025f8:	01001904 	movi	r4,100
 40025fc:	4000dd40 	call	4000dd4 <_Z5delaym>
                retries++;
 4002600:	e0bffa03 	ldbu	r2,-24(fp)
 4002604:	10800044 	addi	r2,r2,1
 4002608:	e0bffa05 	stb	r2,-24(fp)
                goto again;
 400260c:	003fb806 	br	40024f0 <__alt_mem_onchip_memory2_0+0xfc001270>
        } else if(rcode)
 4002610:	e0bffa43 	ldbu	r2,-23(fp)
 4002614:	10000226 	beq	r2,zero,4002620 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
 4002618:	e0bffa43 	ldbu	r2,-23(fp)
 400261c:	00004606 	br	4002738 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 4002620:	e0bffc03 	ldbu	r2,-16(fp)
 4002624:	e0fffb17 	ldw	r3,-20(fp)
 4002628:	10800784 	addi	r2,r2,30
 400262c:	1085883a 	add	r2,r2,r2
 4002630:	1085883a 	add	r2,r2,r2
 4002634:	1885883a 	add	r2,r3,r2
 4002638:	10800017 	ldw	r2,0(r2)
 400263c:	10800017 	ldw	r2,0(r2)
 4002640:	10c00017 	ldw	r3,0(r2)
 4002644:	e0bffc03 	ldbu	r2,-16(fp)
 4002648:	e13ffb17 	ldw	r4,-20(fp)
 400264c:	10800784 	addi	r2,r2,30
 4002650:	1085883a 	add	r2,r2,r2
 4002654:	1085883a 	add	r2,r2,r2
 4002658:	2085883a 	add	r2,r4,r2
 400265c:	10800017 	ldw	r2,0(r2)
 4002660:	e13ffd03 	ldbu	r4,-12(fp)
 4002664:	e17ffe03 	ldbu	r5,-8(fp)
 4002668:	e1bfff03 	ldbu	r6,-4(fp)
 400266c:	300f883a 	mov	r7,r6
 4002670:	280d883a 	mov	r6,r5
 4002674:	200b883a 	mov	r5,r4
 4002678:	1009883a 	mov	r4,r2
 400267c:	183ee83a 	callr	r3
 4002680:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 4002684:	e0bffa43 	ldbu	r2,-23(fp)
 4002688:	10800358 	cmpnei	r2,r2,13
 400268c:	1000091e 	bne	r2,zero,40026b4 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
 4002690:	e0bffa03 	ldbu	r2,-24(fp)
 4002694:	108000e8 	cmpgeui	r2,r2,3
 4002698:	1000061e 	bne	r2,zero,40026b4 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
 400269c:	01001904 	movi	r4,100
 40026a0:	4000dd40 	call	4000dd4 <_Z5delaym>
                retries++;
 40026a4:	e0bffa03 	ldbu	r2,-24(fp)
 40026a8:	10800044 	addi	r2,r2,1
 40026ac:	e0bffa05 	stb	r2,-24(fp)
                goto again;
 40026b0:	003f8f06 	br	40024f0 <__alt_mem_onchip_memory2_0+0xfc001270>
        }
        if(rcode) {
 40026b4:	e0bffa43 	ldbu	r2,-23(fp)
 40026b8:	10001e26 	beq	r2,zero,4002734 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 40026bc:	e0bffd03 	ldbu	r2,-12(fp)
 40026c0:	1000071e 	bne	r2,zero,40026e0 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 40026c4:	01800044 	movi	r6,1
 40026c8:	01403a04 	movi	r5,232
 40026cc:	e13ffb17 	ldw	r4,-20(fp)
 40026d0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 40026d4:	01001984 	movi	r4,102
 40026d8:	4000dd40 	call	4000dd4 <_Z5delaym>
 40026dc:	00001506 	br	4002734 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 40026e0:	e0bffd03 	ldbu	r2,-12(fp)
 40026e4:	e0fffb17 	ldw	r3,-20(fp)
 40026e8:	10800784 	addi	r2,r2,30
 40026ec:	1085883a 	add	r2,r2,r2
 40026f0:	1085883a 	add	r2,r2,r2
 40026f4:	1885883a 	add	r2,r3,r2
 40026f8:	10800017 	ldw	r2,0(r2)
 40026fc:	10800017 	ldw	r2,0(r2)
 4002700:	10800504 	addi	r2,r2,20
 4002704:	10c00017 	ldw	r3,0(r2)
 4002708:	e0bffd03 	ldbu	r2,-12(fp)
 400270c:	e13ffb17 	ldw	r4,-20(fp)
 4002710:	10800784 	addi	r2,r2,30
 4002714:	1085883a 	add	r2,r2,r2
 4002718:	1085883a 	add	r2,r2,r2
 400271c:	2085883a 	add	r2,r4,r2
 4002720:	10800017 	ldw	r2,0(r2)
 4002724:	e13ffe03 	ldbu	r4,-8(fp)
 4002728:	200b883a 	mov	r5,r4
 400272c:	1009883a 	mov	r4,r2
 4002730:	183ee83a 	callr	r3
                }
        }
        return rcode;
 4002734:	e0bffa43 	ldbu	r2,-23(fp)
}
 4002738:	e037883a 	mov	sp,fp
 400273c:	dfc00117 	ldw	ra,4(sp)
 4002740:	df000017 	ldw	fp,0(sp)
 4002744:	dec00204 	addi	sp,sp,8
 4002748:	f800283a 	ret

0400274c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 400274c:	deffed04 	addi	sp,sp,-76
 4002750:	dfc01215 	stw	ra,72(sp)
 4002754:	df001115 	stw	fp,68(sp)
 4002758:	df001104 	addi	fp,sp,68
 400275c:	e13ffc15 	stw	r4,-16(fp)
 4002760:	2809883a 	mov	r4,r5
 4002764:	3007883a 	mov	r3,r6
 4002768:	3805883a 	mov	r2,r7
 400276c:	e13ffd05 	stb	r4,-12(fp)
 4002770:	e0fffe05 	stb	r3,-8(fp)
 4002774:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 4002778:	e03ff045 	stb	zero,-63(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 400277c:	e0bff684 	addi	r2,fp,-38
 4002780:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
 4002784:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
 4002788:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
 400278c:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
 4002790:	00800204 	movi	r2,8
 4002794:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
 4002798:	e0fffb83 	ldbu	r3,-18(fp)
 400279c:	00bfff84 	movi	r2,-2
 40027a0:	1884703a 	and	r2,r3,r2
 40027a4:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
 40027a8:	e0fffb83 	ldbu	r3,-18(fp)
 40027ac:	00bfff44 	movi	r2,-3
 40027b0:	1884703a 	and	r2,r3,r2
 40027b4:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 40027b8:	e0bffb83 	ldbu	r2,-18(fp)
 40027bc:	108000cc 	andi	r2,r2,3
 40027c0:	10800f14 	ori	r2,r2,60
 40027c4:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 40027c8:	e13ffc17 	ldw	r4,-16(fp)
 40027cc:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 40027d0:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 40027d4:	e0bff417 	ldw	r2,-48(fp)
 40027d8:	10800017 	ldw	r2,0(r2)
 40027dc:	10800017 	ldw	r2,0(r2)
 40027e0:	000b883a 	mov	r5,zero
 40027e4:	e13ff417 	ldw	r4,-48(fp)
 40027e8:	103ee83a 	callr	r2
 40027ec:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
 40027f0:	e0bff217 	ldw	r2,-56(fp)
 40027f4:	1000021e 	bne	r2,zero,4002800 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40027f8:	00bff584 	movi	r2,-42
 40027fc:	00019206 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 4002800:	e0bff217 	ldw	r2,-56(fp)
 4002804:	10c00003 	ldbu	r3,0(r2)
 4002808:	11000043 	ldbu	r4,1(r2)
 400280c:	2008923a 	slli	r4,r4,8
 4002810:	20c6b03a 	or	r3,r4,r3
 4002814:	11000083 	ldbu	r4,2(r2)
 4002818:	2008943a 	slli	r4,r4,16
 400281c:	20c6b03a 	or	r3,r4,r3
 4002820:	108000c3 	ldbu	r2,3(r2)
 4002824:	1004963a 	slli	r2,r2,24
 4002828:	10c4b03a 	or	r2,r2,r3
 400282c:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 4002830:	e0bff217 	ldw	r2,-56(fp)
 4002834:	e0fffb04 	addi	r3,fp,-20
 4002838:	19803fcc 	andi	r6,r3,255
 400283c:	11000003 	ldbu	r4,0(r2)
 4002840:	2008703a 	and	r4,r4,zero
 4002844:	200b883a 	mov	r5,r4
 4002848:	3009883a 	mov	r4,r6
 400284c:	2908b03a 	or	r4,r5,r4
 4002850:	11000005 	stb	r4,0(r2)
 4002854:	1808d23a 	srli	r4,r3,8
 4002858:	21803fcc 	andi	r6,r4,255
 400285c:	11000043 	ldbu	r4,1(r2)
 4002860:	2008703a 	and	r4,r4,zero
 4002864:	200b883a 	mov	r5,r4
 4002868:	3009883a 	mov	r4,r6
 400286c:	2908b03a 	or	r4,r5,r4
 4002870:	11000045 	stb	r4,1(r2)
 4002874:	1808d43a 	srli	r4,r3,16
 4002878:	21803fcc 	andi	r6,r4,255
 400287c:	11000083 	ldbu	r4,2(r2)
 4002880:	2008703a 	and	r4,r4,zero
 4002884:	200b883a 	mov	r5,r4
 4002888:	3009883a 	mov	r4,r6
 400288c:	2908b03a 	or	r4,r5,r4
 4002890:	11000085 	stb	r4,2(r2)
 4002894:	180ad63a 	srli	r5,r3,24
 4002898:	10c000c3 	ldbu	r3,3(r2)
 400289c:	1806703a 	and	r3,r3,zero
 40028a0:	1809883a 	mov	r4,r3
 40028a4:	2807883a 	mov	r3,r5
 40028a8:	20c6b03a 	or	r3,r4,r3
 40028ac:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
 40028b0:	e0bff217 	ldw	r2,-56(fp)
 40028b4:	e0ffff03 	ldbu	r3,-4(fp)
 40028b8:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 40028bc:	00800484 	movi	r2,18
 40028c0:	10ffffcc 	andi	r3,r2,65535
 40028c4:	e0bff684 	addi	r2,fp,-38
 40028c8:	d8800015 	stw	r2,0(sp)
 40028cc:	180f883a 	mov	r7,r3
 40028d0:	000d883a 	mov	r6,zero
 40028d4:	000b883a 	mov	r5,zero
 40028d8:	e13ffc17 	ldw	r4,-16(fp)
 40028dc:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 40028e0:	e0bff045 	stb	r2,-63(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 40028e4:	e0bff217 	ldw	r2,-56(fp)
 40028e8:	e0fff317 	ldw	r3,-52(fp)
 40028ec:	19403fcc 	andi	r5,r3,255
 40028f0:	10c00003 	ldbu	r3,0(r2)
 40028f4:	1806703a 	and	r3,r3,zero
 40028f8:	1809883a 	mov	r4,r3
 40028fc:	2807883a 	mov	r3,r5
 4002900:	20c6b03a 	or	r3,r4,r3
 4002904:	10c00005 	stb	r3,0(r2)
 4002908:	e0fff317 	ldw	r3,-52(fp)
 400290c:	1806d23a 	srli	r3,r3,8
 4002910:	19403fcc 	andi	r5,r3,255
 4002914:	10c00043 	ldbu	r3,1(r2)
 4002918:	1806703a 	and	r3,r3,zero
 400291c:	1809883a 	mov	r4,r3
 4002920:	2807883a 	mov	r3,r5
 4002924:	20c6b03a 	or	r3,r4,r3
 4002928:	10c00045 	stb	r3,1(r2)
 400292c:	e0fff317 	ldw	r3,-52(fp)
 4002930:	1806d43a 	srli	r3,r3,16
 4002934:	19403fcc 	andi	r5,r3,255
 4002938:	10c00083 	ldbu	r3,2(r2)
 400293c:	1806703a 	and	r3,r3,zero
 4002940:	1809883a 	mov	r4,r3
 4002944:	2807883a 	mov	r3,r5
 4002948:	20c6b03a 	or	r3,r4,r3
 400294c:	10c00085 	stb	r3,2(r2)
 4002950:	e0fff317 	ldw	r3,-52(fp)
 4002954:	180ad63a 	srli	r5,r3,24
 4002958:	10c000c3 	ldbu	r3,3(r2)
 400295c:	1806703a 	and	r3,r3,zero
 4002960:	1809883a 	mov	r4,r3
 4002964:	2807883a 	mov	r3,r5
 4002968:	20c6b03a 	or	r3,r4,r3
 400296c:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
 4002970:	e0bff043 	ldbu	r2,-63(fp)
 4002974:	10000226 	beq	r2,zero,4002980 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 4002978:	e0bff043 	ldbu	r2,-63(fp)
 400297c:	00013206 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 4002980:	e0bff117 	ldw	r2,-60(fp)
 4002984:	10c00203 	ldbu	r3,8(r2)
 4002988:	10800243 	ldbu	r2,9(r2)
 400298c:	1004923a 	slli	r2,r2,8
 4002990:	10c4b03a 	or	r2,r2,r3
 4002994:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
 4002998:	e0bff117 	ldw	r2,-60(fp)
 400299c:	10c00283 	ldbu	r3,10(r2)
 40029a0:	108002c3 	ldbu	r2,11(r2)
 40029a4:	1004923a 	slli	r2,r2,8
 40029a8:	10c4b03a 	or	r2,r2,r3
 40029ac:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
 40029b0:	e0bff117 	ldw	r2,-60(fp)
 40029b4:	10800103 	ldbu	r2,4(r2)
 40029b8:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
 40029bc:	e0bff117 	ldw	r2,-60(fp)
 40029c0:	10800143 	ldbu	r2,5(r2)
 40029c4:	e0bff645 	stb	r2,-39(fp)
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 40029c8:	e03ff005 	stb	zero,-64(fp)
 40029cc:	e0bff003 	ldbu	r2,-64(fp)
 40029d0:	10800428 	cmpgeui	r2,r2,16
 40029d4:	1000821e 	bne	r2,zero,4002be0 <_ZN3USB11ConfiguringEhhb+0x494>
                if(!devConfig[devConfigIndex]) continue; // no driver
 40029d8:	e0bff003 	ldbu	r2,-64(fp)
 40029dc:	e0fffc17 	ldw	r3,-16(fp)
 40029e0:	10800784 	addi	r2,r2,30
 40029e4:	1085883a 	add	r2,r2,r2
 40029e8:	1085883a 	add	r2,r2,r2
 40029ec:	1885883a 	add	r2,r3,r2
 40029f0:	10800017 	ldw	r2,0(r2)
 40029f4:	10007226 	beq	r2,zero,4002bc0 <_ZN3USB11ConfiguringEhhb+0x474>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 40029f8:	e0bff003 	ldbu	r2,-64(fp)
 40029fc:	e0fffc17 	ldw	r3,-16(fp)
 4002a00:	10800784 	addi	r2,r2,30
 4002a04:	1085883a 	add	r2,r2,r2
 4002a08:	1085883a 	add	r2,r2,r2
 4002a0c:	1885883a 	add	r2,r3,r2
 4002a10:	10800017 	ldw	r2,0(r2)
 4002a14:	10800017 	ldw	r2,0(r2)
 4002a18:	10800404 	addi	r2,r2,16
 4002a1c:	10c00017 	ldw	r3,0(r2)
 4002a20:	e0bff003 	ldbu	r2,-64(fp)
 4002a24:	e13ffc17 	ldw	r4,-16(fp)
 4002a28:	10800784 	addi	r2,r2,30
 4002a2c:	1085883a 	add	r2,r2,r2
 4002a30:	1085883a 	add	r2,r2,r2
 4002a34:	2085883a 	add	r2,r4,r2
 4002a38:	10800017 	ldw	r2,0(r2)
 4002a3c:	1009883a 	mov	r4,r2
 4002a40:	183ee83a 	callr	r3
 4002a44:	10803fcc 	andi	r2,r2,255
 4002a48:	1004c03a 	cmpne	r2,r2,zero
 4002a4c:	10803fcc 	andi	r2,r2,255
 4002a50:	10005d1e 	bne	r2,zero,4002bc8 <_ZN3USB11ConfiguringEhhb+0x47c>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 4002a54:	e0bff003 	ldbu	r2,-64(fp)
 4002a58:	e0fffc17 	ldw	r3,-16(fp)
 4002a5c:	10800784 	addi	r2,r2,30
 4002a60:	1085883a 	add	r2,r2,r2
 4002a64:	1085883a 	add	r2,r2,r2
 4002a68:	1885883a 	add	r2,r3,r2
 4002a6c:	10800017 	ldw	r2,0(r2)
 4002a70:	10800017 	ldw	r2,0(r2)
 4002a74:	10800804 	addi	r2,r2,32
 4002a78:	10c00017 	ldw	r3,0(r2)
 4002a7c:	e0bff003 	ldbu	r2,-64(fp)
 4002a80:	e13ffc17 	ldw	r4,-16(fp)
 4002a84:	10800784 	addi	r2,r2,30
 4002a88:	1085883a 	add	r2,r2,r2
 4002a8c:	1085883a 	add	r2,r2,r2
 4002a90:	2085883a 	add	r2,r4,r2
 4002a94:	10800017 	ldw	r2,0(r2)
 4002a98:	e13ff643 	ldbu	r4,-39(fp)
 4002a9c:	200b883a 	mov	r5,r4
 4002aa0:	1009883a 	mov	r4,r2
 4002aa4:	183ee83a 	callr	r3
 4002aa8:	10803fcc 	andi	r2,r2,255
 4002aac:	10003226 	beq	r2,zero,4002b78 <_ZN3USB11ConfiguringEhhb+0x42c>
 4002ab0:	e0bff003 	ldbu	r2,-64(fp)
 4002ab4:	e0fffc17 	ldw	r3,-16(fp)
 4002ab8:	10800784 	addi	r2,r2,30
 4002abc:	1085883a 	add	r2,r2,r2
 4002ac0:	1085883a 	add	r2,r2,r2
 4002ac4:	1885883a 	add	r2,r3,r2
 4002ac8:	10800017 	ldw	r2,0(r2)
 4002acc:	10800017 	ldw	r2,0(r2)
 4002ad0:	10800604 	addi	r2,r2,24
 4002ad4:	10c00017 	ldw	r3,0(r2)
 4002ad8:	e0bff003 	ldbu	r2,-64(fp)
 4002adc:	e13ffc17 	ldw	r4,-16(fp)
 4002ae0:	10800784 	addi	r2,r2,30
 4002ae4:	1085883a 	add	r2,r2,r2
 4002ae8:	1085883a 	add	r2,r2,r2
 4002aec:	2085883a 	add	r2,r4,r2
 4002af0:	10800017 	ldw	r2,0(r2)
 4002af4:	e13ff50b 	ldhu	r4,-44(fp)
 4002af8:	e17ff58b 	ldhu	r5,-42(fp)
 4002afc:	280d883a 	mov	r6,r5
 4002b00:	200b883a 	mov	r5,r4
 4002b04:	1009883a 	mov	r4,r2
 4002b08:	183ee83a 	callr	r3
 4002b0c:	10803fcc 	andi	r2,r2,255
 4002b10:	1000171e 	bne	r2,zero,4002b70 <_ZN3USB11ConfiguringEhhb+0x424>
 4002b14:	e0bff003 	ldbu	r2,-64(fp)
 4002b18:	e0fffc17 	ldw	r3,-16(fp)
 4002b1c:	10800784 	addi	r2,r2,30
 4002b20:	1085883a 	add	r2,r2,r2
 4002b24:	1085883a 	add	r2,r2,r2
 4002b28:	1885883a 	add	r2,r3,r2
 4002b2c:	10800017 	ldw	r2,0(r2)
 4002b30:	10800017 	ldw	r2,0(r2)
 4002b34:	10800704 	addi	r2,r2,28
 4002b38:	10c00017 	ldw	r3,0(r2)
 4002b3c:	e0bff003 	ldbu	r2,-64(fp)
 4002b40:	e13ffc17 	ldw	r4,-16(fp)
 4002b44:	10800784 	addi	r2,r2,30
 4002b48:	1085883a 	add	r2,r2,r2
 4002b4c:	1085883a 	add	r2,r2,r2
 4002b50:	2085883a 	add	r2,r4,r2
 4002b54:	10800017 	ldw	r2,0(r2)
 4002b58:	e13ff603 	ldbu	r4,-40(fp)
 4002b5c:	200b883a 	mov	r5,r4
 4002b60:	1009883a 	mov	r4,r2
 4002b64:	183ee83a 	callr	r3
 4002b68:	10803fcc 	andi	r2,r2,255
 4002b6c:	10000226 	beq	r2,zero,4002b78 <_ZN3USB11ConfiguringEhhb+0x42c>
 4002b70:	00800044 	movi	r2,1
 4002b74:	00000106 	br	4002b7c <_ZN3USB11ConfiguringEhhb+0x430>
 4002b78:	0005883a 	mov	r2,zero
 4002b7c:	10803fcc 	andi	r2,r2,255
 4002b80:	10001226 	beq	r2,zero,4002bcc <_ZN3USB11ConfiguringEhhb+0x480>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 4002b84:	e0fff003 	ldbu	r3,-64(fp)
 4002b88:	e13ffd03 	ldbu	r4,-12(fp)
 4002b8c:	e17ffe03 	ldbu	r5,-8(fp)
 4002b90:	e0bfff03 	ldbu	r2,-4(fp)
 4002b94:	d8800015 	stw	r2,0(sp)
 4002b98:	280f883a 	mov	r7,r5
 4002b9c:	200d883a 	mov	r6,r4
 4002ba0:	180b883a 	mov	r5,r3
 4002ba4:	e13ffc17 	ldw	r4,-16(fp)
 4002ba8:	40024bc0 	call	40024bc <_ZN3USB13AttemptConfigEhhhb>
 4002bac:	e0bff045 	stb	r2,-63(fp)
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 4002bb0:	e0bff043 	ldbu	r2,-63(fp)
 4002bb4:	10803460 	cmpeqi	r2,r2,209
 4002bb8:	10000826 	beq	r2,zero,4002bdc <_ZN3USB11ConfiguringEhhb+0x490>
 4002bbc:	00000306 	br	4002bcc <_ZN3USB11ConfiguringEhhb+0x480>
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue; // no driver
 4002bc0:	0001883a 	nop
 4002bc4:	00000106 	br	4002bcc <_ZN3USB11ConfiguringEhhb+0x480>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002bc8:	0001883a 	nop
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002bcc:	e0bff003 	ldbu	r2,-64(fp)
 4002bd0:	10800044 	addi	r2,r2,1
 4002bd4:	e0bff005 	stb	r2,-64(fp)
 4002bd8:	003f7c06 	br	40029cc <__alt_mem_onchip_memory2_0+0xfc00174c>
                if(!devConfig[devConfigIndex]) continue; // no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
                                break;
 4002bdc:	0001883a 	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 4002be0:	e0bff003 	ldbu	r2,-64(fp)
 4002be4:	10800428 	cmpgeui	r2,r2,16
 4002be8:	1000021e 	bne	r2,zero,4002bf4 <_ZN3USB11ConfiguringEhhb+0x4a8>
                return rcode;
 4002bec:	e0bff043 	ldbu	r2,-63(fp)
 4002bf0:	00009506 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002bf4:	e03ff005 	stb	zero,-64(fp)
 4002bf8:	e0bff003 	ldbu	r2,-64(fp)
 4002bfc:	10800428 	cmpgeui	r2,r2,16
 4002c00:	1000871e 	bne	r2,zero,4002e20 <_ZN3USB11ConfiguringEhhb+0x6d4>
                if(!devConfig[devConfigIndex]) continue;
 4002c04:	e0bff003 	ldbu	r2,-64(fp)
 4002c08:	e0fffc17 	ldw	r3,-16(fp)
 4002c0c:	10800784 	addi	r2,r2,30
 4002c10:	1085883a 	add	r2,r2,r2
 4002c14:	1085883a 	add	r2,r2,r2
 4002c18:	1885883a 	add	r2,r3,r2
 4002c1c:	10800017 	ldw	r2,0(r2)
 4002c20:	10007626 	beq	r2,zero,4002dfc <_ZN3USB11ConfiguringEhhb+0x6b0>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002c24:	e0bff003 	ldbu	r2,-64(fp)
 4002c28:	e0fffc17 	ldw	r3,-16(fp)
 4002c2c:	10800784 	addi	r2,r2,30
 4002c30:	1085883a 	add	r2,r2,r2
 4002c34:	1085883a 	add	r2,r2,r2
 4002c38:	1885883a 	add	r2,r3,r2
 4002c3c:	10800017 	ldw	r2,0(r2)
 4002c40:	10800017 	ldw	r2,0(r2)
 4002c44:	10800404 	addi	r2,r2,16
 4002c48:	10c00017 	ldw	r3,0(r2)
 4002c4c:	e0bff003 	ldbu	r2,-64(fp)
 4002c50:	e13ffc17 	ldw	r4,-16(fp)
 4002c54:	10800784 	addi	r2,r2,30
 4002c58:	1085883a 	add	r2,r2,r2
 4002c5c:	1085883a 	add	r2,r2,r2
 4002c60:	2085883a 	add	r2,r4,r2
 4002c64:	10800017 	ldw	r2,0(r2)
 4002c68:	1009883a 	mov	r4,r2
 4002c6c:	183ee83a 	callr	r3
 4002c70:	10803fcc 	andi	r2,r2,255
 4002c74:	1004c03a 	cmpne	r2,r2,zero
 4002c78:	10803fcc 	andi	r2,r2,255
 4002c7c:	1000611e 	bne	r2,zero,4002e04 <_ZN3USB11ConfiguringEhhb+0x6b8>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 4002c80:	e0bff003 	ldbu	r2,-64(fp)
 4002c84:	e0fffc17 	ldw	r3,-16(fp)
 4002c88:	10800784 	addi	r2,r2,30
 4002c8c:	1085883a 	add	r2,r2,r2
 4002c90:	1085883a 	add	r2,r2,r2
 4002c94:	1885883a 	add	r2,r3,r2
 4002c98:	10800017 	ldw	r2,0(r2)
 4002c9c:	10800017 	ldw	r2,0(r2)
 4002ca0:	10800804 	addi	r2,r2,32
 4002ca4:	10c00017 	ldw	r3,0(r2)
 4002ca8:	e0bff003 	ldbu	r2,-64(fp)
 4002cac:	e13ffc17 	ldw	r4,-16(fp)
 4002cb0:	10800784 	addi	r2,r2,30
 4002cb4:	1085883a 	add	r2,r2,r2
 4002cb8:	1085883a 	add	r2,r2,r2
 4002cbc:	2085883a 	add	r2,r4,r2
 4002cc0:	10800017 	ldw	r2,0(r2)
 4002cc4:	e13ff643 	ldbu	r4,-39(fp)
 4002cc8:	200b883a 	mov	r5,r4
 4002ccc:	1009883a 	mov	r4,r2
 4002cd0:	183ee83a 	callr	r3
 4002cd4:	10803fcc 	andi	r2,r2,255
 4002cd8:	10003226 	beq	r2,zero,4002da4 <_ZN3USB11ConfiguringEhhb+0x658>
 4002cdc:	e0bff003 	ldbu	r2,-64(fp)
 4002ce0:	e0fffc17 	ldw	r3,-16(fp)
 4002ce4:	10800784 	addi	r2,r2,30
 4002ce8:	1085883a 	add	r2,r2,r2
 4002cec:	1085883a 	add	r2,r2,r2
 4002cf0:	1885883a 	add	r2,r3,r2
 4002cf4:	10800017 	ldw	r2,0(r2)
 4002cf8:	10800017 	ldw	r2,0(r2)
 4002cfc:	10800604 	addi	r2,r2,24
 4002d00:	10c00017 	ldw	r3,0(r2)
 4002d04:	e0bff003 	ldbu	r2,-64(fp)
 4002d08:	e13ffc17 	ldw	r4,-16(fp)
 4002d0c:	10800784 	addi	r2,r2,30
 4002d10:	1085883a 	add	r2,r2,r2
 4002d14:	1085883a 	add	r2,r2,r2
 4002d18:	2085883a 	add	r2,r4,r2
 4002d1c:	10800017 	ldw	r2,0(r2)
 4002d20:	e13ff50b 	ldhu	r4,-44(fp)
 4002d24:	e17ff58b 	ldhu	r5,-42(fp)
 4002d28:	280d883a 	mov	r6,r5
 4002d2c:	200b883a 	mov	r5,r4
 4002d30:	1009883a 	mov	r4,r2
 4002d34:	183ee83a 	callr	r3
 4002d38:	10803fcc 	andi	r2,r2,255
 4002d3c:	1000171e 	bne	r2,zero,4002d9c <_ZN3USB11ConfiguringEhhb+0x650>
 4002d40:	e0bff003 	ldbu	r2,-64(fp)
 4002d44:	e0fffc17 	ldw	r3,-16(fp)
 4002d48:	10800784 	addi	r2,r2,30
 4002d4c:	1085883a 	add	r2,r2,r2
 4002d50:	1085883a 	add	r2,r2,r2
 4002d54:	1885883a 	add	r2,r3,r2
 4002d58:	10800017 	ldw	r2,0(r2)
 4002d5c:	10800017 	ldw	r2,0(r2)
 4002d60:	10800704 	addi	r2,r2,28
 4002d64:	10c00017 	ldw	r3,0(r2)
 4002d68:	e0bff003 	ldbu	r2,-64(fp)
 4002d6c:	e13ffc17 	ldw	r4,-16(fp)
 4002d70:	10800784 	addi	r2,r2,30
 4002d74:	1085883a 	add	r2,r2,r2
 4002d78:	1085883a 	add	r2,r2,r2
 4002d7c:	2085883a 	add	r2,r4,r2
 4002d80:	10800017 	ldw	r2,0(r2)
 4002d84:	e13ff603 	ldbu	r4,-40(fp)
 4002d88:	200b883a 	mov	r5,r4
 4002d8c:	1009883a 	mov	r4,r2
 4002d90:	183ee83a 	callr	r3
 4002d94:	10803fcc 	andi	r2,r2,255
 4002d98:	10000226 	beq	r2,zero,4002da4 <_ZN3USB11ConfiguringEhhb+0x658>
 4002d9c:	00800044 	movi	r2,1
 4002da0:	00000106 	br	4002da8 <_ZN3USB11ConfiguringEhhb+0x65c>
 4002da4:	0005883a 	mov	r2,zero
 4002da8:	10803fcc 	andi	r2,r2,255
 4002dac:	1000171e 	bne	r2,zero,4002e0c <_ZN3USB11ConfiguringEhhb+0x6c0>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 4002db0:	e0fff003 	ldbu	r3,-64(fp)
 4002db4:	e13ffd03 	ldbu	r4,-12(fp)
 4002db8:	e17ffe03 	ldbu	r5,-8(fp)
 4002dbc:	e0bfff03 	ldbu	r2,-4(fp)
 4002dc0:	d8800015 	stw	r2,0(sp)
 4002dc4:	280f883a 	mov	r7,r5
 4002dc8:	200d883a 	mov	r6,r4
 4002dcc:	180b883a 	mov	r5,r3
 4002dd0:	e13ffc17 	ldw	r4,-16(fp)
 4002dd4:	40024bc0 	call	40024bc <_ZN3USB13AttemptConfigEhhhb>
 4002dd8:	e0bff045 	stb	r2,-63(fp)

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 4002ddc:	e0bff043 	ldbu	r2,-63(fp)
 4002de0:	10803460 	cmpeqi	r2,r2,209
 4002de4:	10000a1e 	bne	r2,zero,4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
 4002de8:	e0bff043 	ldbu	r2,-63(fp)
 4002dec:	10803660 	cmpeqi	r2,r2,217
 4002df0:	1000071e 	bne	r2,zero,4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 4002df4:	e0bff043 	ldbu	r2,-63(fp)
 4002df8:	00001306 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;
 4002dfc:	0001883a 	nop
 4002e00:	00000306 	br	4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002e04:	0001883a 	nop
 4002e08:	00000106 	br	4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 4002e0c:	0001883a 	nop
                return rcode;
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002e10:	e0bff003 	ldbu	r2,-64(fp)
 4002e14:	10800044 	addi	r2,r2,1
 4002e18:	e0bff005 	stb	r2,-64(fp)
 4002e1c:	003f7606 	br	4002bf8 <__alt_mem_onchip_memory2_0+0xfc001978>
                        //        devConfigIndex = 0;
                        return rcode;
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 4002e20:	e0bffd03 	ldbu	r2,-12(fp)
 4002e24:	e0fffe03 	ldbu	r3,-8(fp)
 4002e28:	e13fff03 	ldbu	r4,-4(fp)
 4002e2c:	200f883a 	mov	r7,r4
 4002e30:	180d883a 	mov	r6,r3
 4002e34:	100b883a 	mov	r5,r2
 4002e38:	e13ffc17 	ldw	r4,-16(fp)
 4002e3c:	400235c0 	call	400235c <_ZN3USB17DefaultAddressingEhhb>
 4002e40:	e0bff045 	stb	r2,-63(fp)

        return rcode;
 4002e44:	e0bff043 	ldbu	r2,-63(fp)
}
 4002e48:	e037883a 	mov	sp,fp
 4002e4c:	dfc00117 	ldw	ra,4(sp)
 4002e50:	df000017 	ldw	fp,0(sp)
 4002e54:	dec00204 	addi	sp,sp,8
 4002e58:	f800283a 	ret

04002e5c <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
 4002e5c:	defffb04 	addi	sp,sp,-20
 4002e60:	dfc00415 	stw	ra,16(sp)
 4002e64:	df000315 	stw	fp,12(sp)
 4002e68:	df000304 	addi	fp,sp,12
 4002e6c:	e13ffe15 	stw	r4,-8(fp)
 4002e70:	2805883a 	mov	r2,r5
 4002e74:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
 4002e78:	e0bfff03 	ldbu	r2,-4(fp)
 4002e7c:	1000021e 	bne	r2,zero,4002e88 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
 4002e80:	0005883a 	mov	r2,zero
 4002e84:	00003e06 	br	4002f80 <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 4002e88:	e03ffd05 	stb	zero,-12(fp)
 4002e8c:	e0bffd03 	ldbu	r2,-12(fp)
 4002e90:	10800428 	cmpgeui	r2,r2,16
 4002e94:	1000391e 	bne	r2,zero,4002f7c <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
 4002e98:	e0bffd03 	ldbu	r2,-12(fp)
 4002e9c:	e0fffe17 	ldw	r3,-8(fp)
 4002ea0:	10800784 	addi	r2,r2,30
 4002ea4:	1085883a 	add	r2,r2,r2
 4002ea8:	1085883a 	add	r2,r2,r2
 4002eac:	1885883a 	add	r2,r3,r2
 4002eb0:	10800017 	ldw	r2,0(r2)
 4002eb4:	10002c26 	beq	r2,zero,4002f68 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
 4002eb8:	e0bffd03 	ldbu	r2,-12(fp)
 4002ebc:	e0fffe17 	ldw	r3,-8(fp)
 4002ec0:	10800784 	addi	r2,r2,30
 4002ec4:	1085883a 	add	r2,r2,r2
 4002ec8:	1085883a 	add	r2,r2,r2
 4002ecc:	1885883a 	add	r2,r3,r2
 4002ed0:	10800017 	ldw	r2,0(r2)
 4002ed4:	10800017 	ldw	r2,0(r2)
 4002ed8:	10800404 	addi	r2,r2,16
 4002edc:	10c00017 	ldw	r3,0(r2)
 4002ee0:	e0bffd03 	ldbu	r2,-12(fp)
 4002ee4:	e13ffe17 	ldw	r4,-8(fp)
 4002ee8:	10800784 	addi	r2,r2,30
 4002eec:	1085883a 	add	r2,r2,r2
 4002ef0:	1085883a 	add	r2,r2,r2
 4002ef4:	2085883a 	add	r2,r4,r2
 4002ef8:	10800017 	ldw	r2,0(r2)
 4002efc:	1009883a 	mov	r4,r2
 4002f00:	183ee83a 	callr	r3
 4002f04:	10c03fcc 	andi	r3,r2,255
 4002f08:	e0bfff03 	ldbu	r2,-4(fp)
 4002f0c:	1885003a 	cmpeq	r2,r3,r2
 4002f10:	10803fcc 	andi	r2,r2,255
 4002f14:	10001526 	beq	r2,zero,4002f6c <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
 4002f18:	e0bffd03 	ldbu	r2,-12(fp)
 4002f1c:	e0fffe17 	ldw	r3,-8(fp)
 4002f20:	10800784 	addi	r2,r2,30
 4002f24:	1085883a 	add	r2,r2,r2
 4002f28:	1085883a 	add	r2,r2,r2
 4002f2c:	1885883a 	add	r2,r3,r2
 4002f30:	10800017 	ldw	r2,0(r2)
 4002f34:	10800017 	ldw	r2,0(r2)
 4002f38:	10800204 	addi	r2,r2,8
 4002f3c:	10c00017 	ldw	r3,0(r2)
 4002f40:	e0bffd03 	ldbu	r2,-12(fp)
 4002f44:	e13ffe17 	ldw	r4,-8(fp)
 4002f48:	10800784 	addi	r2,r2,30
 4002f4c:	1085883a 	add	r2,r2,r2
 4002f50:	1085883a 	add	r2,r2,r2
 4002f54:	2085883a 	add	r2,r4,r2
 4002f58:	10800017 	ldw	r2,0(r2)
 4002f5c:	1009883a 	mov	r4,r2
 4002f60:	183ee83a 	callr	r3
 4002f64:	00000606 	br	4002f80 <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
 4002f68:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 4002f6c:	e0bffd03 	ldbu	r2,-12(fp)
 4002f70:	10800044 	addi	r2,r2,1
 4002f74:	e0bffd05 	stb	r2,-12(fp)
 4002f78:	003fc406 	br	4002e8c <__alt_mem_onchip_memory2_0+0xfc001c0c>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
 4002f7c:	0005883a 	mov	r2,zero
}
 4002f80:	e037883a 	mov	sp,fp
 4002f84:	dfc00117 	ldw	ra,4(sp)
 4002f88:	df000017 	ldw	fp,0(sp)
 4002f8c:	dec00204 	addi	sp,sp,8
 4002f90:	f800283a 	ret

04002f94 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 4002f94:	defff204 	addi	sp,sp,-56
 4002f98:	dfc00d15 	stw	ra,52(sp)
 4002f9c:	df000c15 	stw	fp,48(sp)
 4002fa0:	df000c04 	addi	fp,sp,48
 4002fa4:	e13ffc15 	stw	r4,-16(fp)
 4002fa8:	2809883a 	mov	r4,r5
 4002fac:	3007883a 	mov	r3,r6
 4002fb0:	3805883a 	mov	r2,r7
 4002fb4:	e13ffd05 	stb	r4,-12(fp)
 4002fb8:	e0fffe05 	stb	r3,-8(fp)
 4002fbc:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 4002fc0:	e17ffd03 	ldbu	r5,-12(fp)
 4002fc4:	e1bffe03 	ldbu	r6,-8(fp)
 4002fc8:	e0bfff0b 	ldhu	r2,-4(fp)
 4002fcc:	e0ffff0b 	ldhu	r3,-4(fp)
 4002fd0:	d8000715 	stw	zero,28(sp)
 4002fd4:	e1000217 	ldw	r4,8(fp)
 4002fd8:	d9000615 	stw	r4,24(sp)
 4002fdc:	d8c00515 	stw	r3,20(sp)
 4002fe0:	d8800415 	stw	r2,16(sp)
 4002fe4:	d8000315 	stw	zero,12(sp)
 4002fe8:	00800044 	movi	r2,1
 4002fec:	d8800215 	stw	r2,8(sp)
 4002ff0:	d8000115 	stw	zero,4(sp)
 4002ff4:	00800184 	movi	r2,6
 4002ff8:	d8800015 	stw	r2,0(sp)
 4002ffc:	01c02004 	movi	r7,128
 4003000:	e13ffc17 	ldw	r4,-16(fp)
 4003004:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4003008:	e037883a 	mov	sp,fp
 400300c:	dfc00117 	ldw	ra,4(sp)
 4003010:	df000017 	ldw	fp,0(sp)
 4003014:	dec00204 	addi	sp,sp,8
 4003018:	f800283a 	ret

0400301c <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 400301c:	defff104 	addi	sp,sp,-60
 4003020:	dfc00e15 	stw	ra,56(sp)
 4003024:	df000d15 	stw	fp,52(sp)
 4003028:	df000d04 	addi	fp,sp,52
 400302c:	e13ffb15 	stw	r4,-20(fp)
 4003030:	3009883a 	mov	r4,r6
 4003034:	3807883a 	mov	r3,r7
 4003038:	e0800217 	ldw	r2,8(fp)
 400303c:	e17ffc05 	stb	r5,-16(fp)
 4003040:	e13ffd05 	stb	r4,-12(fp)
 4003044:	e0fffe0d 	sth	r3,-8(fp)
 4003048:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 400304c:	e23ffc03 	ldbu	r8,-16(fp)
 4003050:	e1bffd03 	ldbu	r6,-12(fp)
 4003054:	e0bfff03 	ldbu	r2,-4(fp)
 4003058:	e0fffe0b 	ldhu	r3,-8(fp)
 400305c:	e13ffe0b 	ldhu	r4,-8(fp)
 4003060:	d8000715 	stw	zero,28(sp)
 4003064:	e1400317 	ldw	r5,12(fp)
 4003068:	d9400615 	stw	r5,24(sp)
 400306c:	d9000515 	stw	r4,20(sp)
 4003070:	d8c00415 	stw	r3,16(sp)
 4003074:	d8000315 	stw	zero,12(sp)
 4003078:	00c00084 	movi	r3,2
 400307c:	d8c00215 	stw	r3,8(sp)
 4003080:	d8800115 	stw	r2,4(sp)
 4003084:	00800184 	movi	r2,6
 4003088:	d8800015 	stw	r2,0(sp)
 400308c:	01c02004 	movi	r7,128
 4003090:	400b883a 	mov	r5,r8
 4003094:	e13ffb17 	ldw	r4,-20(fp)
 4003098:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 400309c:	e037883a 	mov	sp,fp
 40030a0:	dfc00117 	ldw	ra,4(sp)
 40030a4:	df000017 	ldw	fp,0(sp)
 40030a8:	dec00204 	addi	sp,sp,8
 40030ac:	f800283a 	ret

040030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 40030b0:	deffdf04 	addi	sp,sp,-132
 40030b4:	dfc02015 	stw	ra,128(sp)
 40030b8:	df001f15 	stw	fp,124(sp)
 40030bc:	df001f04 	addi	fp,sp,124
 40030c0:	e13ffc15 	stw	r4,-16(fp)
 40030c4:	2809883a 	mov	r4,r5
 40030c8:	3007883a 	mov	r3,r6
 40030cc:	3805883a 	mov	r2,r7
 40030d0:	e13ffd05 	stb	r4,-12(fp)
 40030d4:	e0fffe05 	stb	r3,-8(fp)
 40030d8:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
 40030dc:	00801004 	movi	r2,64
 40030e0:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 40030e4:	e0bfec04 	addi	r2,fp,-80
 40030e8:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 40030ec:	e13ffd03 	ldbu	r4,-12(fp)
 40030f0:	e17ffe03 	ldbu	r5,-8(fp)
 40030f4:	e0bfff03 	ldbu	r2,-4(fp)
 40030f8:	e0ffec04 	addi	r3,fp,-80
 40030fc:	d8c00115 	stw	r3,4(sp)
 4003100:	d8800015 	stw	r2,0(sp)
 4003104:	01c00244 	movi	r7,9
 4003108:	280d883a 	mov	r6,r5
 400310c:	200b883a 	mov	r5,r4
 4003110:	e13ffc17 	ldw	r4,-16(fp)
 4003114:	400301c0 	call	400301c <_ZN3USB12getConfDescrEhhthPh>
 4003118:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
 400311c:	e0bfeb03 	ldbu	r2,-84(fp)
 4003120:	10000226 	beq	r2,zero,400312c <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
 4003124:	e0bfeb03 	ldbu	r2,-84(fp)
 4003128:	00001a06 	br	4003194 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
 400312c:	e0bfea17 	ldw	r2,-88(fp)
 4003130:	10c00083 	ldbu	r3,2(r2)
 4003134:	108000c3 	ldbu	r2,3(r2)
 4003138:	1004923a 	slli	r2,r2,8
 400313c:	10c4b03a 	or	r2,r2,r3
 4003140:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 4003144:	e17ffd03 	ldbu	r5,-12(fp)
 4003148:	e1bffe03 	ldbu	r6,-8(fp)
 400314c:	e0bfff03 	ldbu	r2,-4(fp)
 4003150:	e0ffeb8b 	ldhu	r3,-82(fp)
 4003154:	e1000217 	ldw	r4,8(fp)
 4003158:	d9000715 	stw	r4,28(sp)
 400315c:	e13fec04 	addi	r4,fp,-80
 4003160:	d9000615 	stw	r4,24(sp)
 4003164:	01001004 	movi	r4,64
 4003168:	d9000515 	stw	r4,20(sp)
 400316c:	d8c00415 	stw	r3,16(sp)
 4003170:	d8000315 	stw	zero,12(sp)
 4003174:	00c00084 	movi	r3,2
 4003178:	d8c00215 	stw	r3,8(sp)
 400317c:	d8800115 	stw	r2,4(sp)
 4003180:	00800184 	movi	r2,6
 4003184:	d8800015 	stw	r2,0(sp)
 4003188:	01c02004 	movi	r7,128
 400318c:	e13ffc17 	ldw	r4,-16(fp)
 4003190:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4003194:	e037883a 	mov	sp,fp
 4003198:	dfc00117 	ldw	ra,4(sp)
 400319c:	df000017 	ldw	fp,0(sp)
 40031a0:	dec00204 	addi	sp,sp,8
 40031a4:	f800283a 	ret

040031a8 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
 40031a8:	defff004 	addi	sp,sp,-64
 40031ac:	dfc00f15 	stw	ra,60(sp)
 40031b0:	df000e15 	stw	fp,56(sp)
 40031b4:	df000e04 	addi	fp,sp,56
 40031b8:	e13ffa15 	stw	r4,-24(fp)
 40031bc:	2811883a 	mov	r8,r5
 40031c0:	300b883a 	mov	r5,r6
 40031c4:	3809883a 	mov	r4,r7
 40031c8:	e0c00217 	ldw	r3,8(fp)
 40031cc:	e0800317 	ldw	r2,12(fp)
 40031d0:	e23ffb05 	stb	r8,-20(fp)
 40031d4:	e17ffc05 	stb	r5,-16(fp)
 40031d8:	e13ffd0d 	sth	r4,-12(fp)
 40031dc:	e0fffe05 	stb	r3,-8(fp)
 40031e0:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
 40031e4:	e23ffb03 	ldbu	r8,-20(fp)
 40031e8:	e27ffc03 	ldbu	r9,-16(fp)
 40031ec:	e0bffe03 	ldbu	r2,-8(fp)
 40031f0:	e0ffff0b 	ldhu	r3,-4(fp)
 40031f4:	e13ffd0b 	ldhu	r4,-12(fp)
 40031f8:	e17ffd0b 	ldhu	r5,-12(fp)
 40031fc:	d8000715 	stw	zero,28(sp)
 4003200:	e1800417 	ldw	r6,16(fp)
 4003204:	d9800615 	stw	r6,24(sp)
 4003208:	d9400515 	stw	r5,20(sp)
 400320c:	d9000415 	stw	r4,16(sp)
 4003210:	d8c00315 	stw	r3,12(sp)
 4003214:	00c000c4 	movi	r3,3
 4003218:	d8c00215 	stw	r3,8(sp)
 400321c:	d8800115 	stw	r2,4(sp)
 4003220:	00800184 	movi	r2,6
 4003224:	d8800015 	stw	r2,0(sp)
 4003228:	01c02004 	movi	r7,128
 400322c:	480d883a 	mov	r6,r9
 4003230:	400b883a 	mov	r5,r8
 4003234:	e13ffa17 	ldw	r4,-24(fp)
 4003238:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 400323c:	e037883a 	mov	sp,fp
 4003240:	dfc00117 	ldw	ra,4(sp)
 4003244:	df000017 	ldw	fp,0(sp)
 4003248:	dec00204 	addi	sp,sp,8
 400324c:	f800283a 	ret

04003250 <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 4003250:	defff104 	addi	sp,sp,-60
 4003254:	dfc00e15 	stw	ra,56(sp)
 4003258:	df000d15 	stw	fp,52(sp)
 400325c:	df000d04 	addi	fp,sp,52
 4003260:	e13ffc15 	stw	r4,-16(fp)
 4003264:	2809883a 	mov	r4,r5
 4003268:	3007883a 	mov	r3,r6
 400326c:	3805883a 	mov	r2,r7
 4003270:	e13ffd05 	stb	r4,-12(fp)
 4003274:	e0fffe05 	stb	r3,-8(fp)
 4003278:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 400327c:	e0fffd03 	ldbu	r3,-12(fp)
 4003280:	e13ffe03 	ldbu	r4,-8(fp)
 4003284:	e0bfff03 	ldbu	r2,-4(fp)
 4003288:	d8000715 	stw	zero,28(sp)
 400328c:	d8000615 	stw	zero,24(sp)
 4003290:	d8000515 	stw	zero,20(sp)
 4003294:	d8000415 	stw	zero,16(sp)
 4003298:	d8000315 	stw	zero,12(sp)
 400329c:	d8000215 	stw	zero,8(sp)
 40032a0:	d8800115 	stw	r2,4(sp)
 40032a4:	00800144 	movi	r2,5
 40032a8:	d8800015 	stw	r2,0(sp)
 40032ac:	000f883a 	mov	r7,zero
 40032b0:	200d883a 	mov	r6,r4
 40032b4:	180b883a 	mov	r5,r3
 40032b8:	e13ffc17 	ldw	r4,-16(fp)
 40032bc:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 40032c0:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 40032c4:	01004b04 	movi	r4,300
 40032c8:	4000dd40 	call	4000dd4 <_Z5delaym>
        return rcode;
 40032cc:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 40032d0:	e037883a 	mov	sp,fp
 40032d4:	dfc00117 	ldw	ra,4(sp)
 40032d8:	df000017 	ldw	fp,0(sp)
 40032dc:	dec00204 	addi	sp,sp,8
 40032e0:	f800283a 	ret

040032e4 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 40032e4:	defff204 	addi	sp,sp,-56
 40032e8:	dfc00d15 	stw	ra,52(sp)
 40032ec:	df000c15 	stw	fp,48(sp)
 40032f0:	df000c04 	addi	fp,sp,48
 40032f4:	e13ffc15 	stw	r4,-16(fp)
 40032f8:	2809883a 	mov	r4,r5
 40032fc:	3007883a 	mov	r3,r6
 4003300:	3805883a 	mov	r2,r7
 4003304:	e13ffd05 	stb	r4,-12(fp)
 4003308:	e0fffe05 	stb	r3,-8(fp)
 400330c:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 4003310:	e0fffd03 	ldbu	r3,-12(fp)
 4003314:	e13ffe03 	ldbu	r4,-8(fp)
 4003318:	e0bfff03 	ldbu	r2,-4(fp)
 400331c:	d8000715 	stw	zero,28(sp)
 4003320:	d8000615 	stw	zero,24(sp)
 4003324:	d8000515 	stw	zero,20(sp)
 4003328:	d8000415 	stw	zero,16(sp)
 400332c:	d8000315 	stw	zero,12(sp)
 4003330:	d8000215 	stw	zero,8(sp)
 4003334:	d8800115 	stw	r2,4(sp)
 4003338:	00800244 	movi	r2,9
 400333c:	d8800015 	stw	r2,0(sp)
 4003340:	000f883a 	mov	r7,zero
 4003344:	200d883a 	mov	r6,r4
 4003348:	180b883a 	mov	r5,r3
 400334c:	e13ffc17 	ldw	r4,-16(fp)
 4003350:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4003354:	e037883a 	mov	sp,fp
 4003358:	dfc00117 	ldw	ra,4(sp)
 400335c:	df000017 	ldw	fp,0(sp)
 4003360:	dec00204 	addi	sp,sp,8
 4003364:	f800283a 	ret

04003368 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 4003368:	defffe04 	addi	sp,sp,-8
 400336c:	df000115 	stw	fp,4(sp)
 4003370:	df000104 	addi	fp,sp,4
 4003374:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
 4003378:	e0bfff17 	ldw	r2,-4(fp)
        };
 400337c:	e037883a 	mov	sp,fp
 4003380:	df000017 	ldw	fp,0(sp)
 4003384:	dec00104 	addi	sp,sp,4
 4003388:	f800283a 	ret

0400338c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 400338c:	defffe04 	addi	sp,sp,-8
 4003390:	df000115 	stw	fp,4(sp)
 4003394:	df000104 	addi	fp,sp,4
 4003398:	e13fff15 	stw	r4,-4(fp)
 400339c:	008100b4 	movhi	r2,1026
 40033a0:	10806d04 	addi	r2,r2,436
 40033a4:	e0ffff17 	ldw	r3,-4(fp)
 40033a8:	18800015 	stw	r2,0(r3)
 40033ac:	0001883a 	nop
 40033b0:	e037883a 	mov	sp,fp
 40033b4:	df000017 	ldw	fp,0(sp)
 40033b8:	dec00104 	addi	sp,sp,4
 40033bc:	f800283a 	ret

040033c0 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 40033c0:	defffd04 	addi	sp,sp,-12
 40033c4:	dfc00215 	stw	ra,8(sp)
 40033c8:	df000115 	stw	fp,4(sp)
 40033cc:	df000104 	addi	fp,sp,4
 40033d0:	e13fff15 	stw	r4,-4(fp)
 40033d4:	e0bfff17 	ldw	r2,-4(fp)
 40033d8:	1009883a 	mov	r4,r2
 40033dc:	400338c0 	call	400338c <_ZN11AddressPoolC1Ev>
 40033e0:	008100b4 	movhi	r2,1026
 40033e4:	10806804 	addi	r2,r2,416
 40033e8:	e0ffff17 	ldw	r3,-4(fp)
 40033ec:	18800015 	stw	r2,0(r3)
 40033f0:	e0bfff17 	ldw	r2,-4(fp)
 40033f4:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
 40033f8:	000b883a 	mov	r5,zero
 40033fc:	e13fff17 	ldw	r4,-4(fp)
 4003400:	40038100 	call	4003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 4003404:	e0bfff17 	ldw	r2,-4(fp)
 4003408:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
 400340c:	e0bfff17 	ldw	r2,-4(fp)
 4003410:	10c00104 	addi	r3,r2,4
 4003414:	e0bfff17 	ldw	r2,-4(fp)
 4003418:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
 400341c:	e0bfff17 	ldw	r2,-4(fp)
 4003420:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
 4003424:	e0bfff17 	ldw	r2,-4(fp)
 4003428:	00c00204 	movi	r3,8
 400342c:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 4003430:	e0bfff17 	ldw	r2,-4(fp)
 4003434:	11000183 	ldbu	r4,6(r2)
 4003438:	00ffff84 	movi	r3,-2
 400343c:	20c6703a 	and	r3,r4,r3
 4003440:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
 4003444:	e0bfff17 	ldw	r2,-4(fp)
 4003448:	11000183 	ldbu	r4,6(r2)
 400344c:	00ffff44 	movi	r3,-3
 4003450:	20c6703a 	and	r3,r4,r3
 4003454:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 4003458:	e0bfff17 	ldw	r2,-4(fp)
 400345c:	10c00183 	ldbu	r3,6(r2)
 4003460:	18c000cc 	andi	r3,r3,3
 4003464:	18c00f14 	ori	r3,r3,60
 4003468:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
 400346c:	e13fff17 	ldw	r4,-4(fp)
 4003470:	40039540 	call	4003954 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 4003474:	0001883a 	nop
 4003478:	e037883a 	mov	sp,fp
 400347c:	dfc00117 	ldw	ra,4(sp)
 4003480:	df000017 	ldw	fp,0(sp)
 4003484:	dec00204 	addi	sp,sp,8
 4003488:	f800283a 	ret

0400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 400348c:	defffa04 	addi	sp,sp,-24
 4003490:	dfc00515 	stw	ra,20(sp)
 4003494:	df000415 	stw	fp,16(sp)
 4003498:	dc000315 	stw	r16,12(sp)
 400349c:	df000404 	addi	fp,sp,16
 40034a0:	e13ffd15 	stw	r4,-12(fp)
 40034a4:	2805883a 	mov	r2,r5
 40034a8:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
 40034ac:	e0bffe03 	ldbu	r2,-8(fp)
 40034b0:	1000031e 	bne	r2,zero,40034c0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
 40034b4:	e0bffd17 	ldw	r2,-12(fp)
 40034b8:	10800204 	addi	r2,r2,8
 40034bc:	00001006 	br	4003500 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
 40034c0:	e0bffe03 	ldbu	r2,-8(fp)
 40034c4:	100b883a 	mov	r5,r2
 40034c8:	e13ffd17 	ldw	r4,-12(fp)
 40034cc:	40039bc0 	call	40039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 40034d0:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
 40034d4:	e0bffc03 	ldbu	r2,-16(fp)
 40034d8:	10000826 	beq	r2,zero,40034fc <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
 40034dc:	e0bffd17 	ldw	r2,-12(fp)
 40034e0:	14000204 	addi	r16,r2,8
 40034e4:	e0bffc03 	ldbu	r2,-16(fp)
 40034e8:	014001c4 	movi	r5,7
 40034ec:	1009883a 	mov	r4,r2
 40034f0:	400cfd40 	call	400cfd4 <__mulsi3>
 40034f4:	8085883a 	add	r2,r16,r2
 40034f8:	00000106 	br	4003500 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
 40034fc:	0005883a 	mov	r2,zero
        };
 4003500:	e6ffff04 	addi	sp,fp,-4
 4003504:	dfc00217 	ldw	ra,8(sp)
 4003508:	df000117 	ldw	fp,4(sp)
 400350c:	dc000017 	ldw	r16,0(sp)
 4003510:	dec00304 	addi	sp,sp,12
 4003514:	f800283a 	ret

04003518 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 4003518:	defffd04 	addi	sp,sp,-12
 400351c:	df000215 	stw	fp,8(sp)
 4003520:	df000204 	addi	fp,sp,8
 4003524:	2005883a 	mov	r2,r4
 4003528:	e17fff15 	stw	r5,-4(fp)
 400352c:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 4003530:	0001883a 	nop
 4003534:	e037883a 	mov	sp,fp
 4003538:	df000017 	ldw	fp,0(sp)
 400353c:	dec00104 	addi	sp,sp,4
 4003540:	f800283a 	ret

04003544 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 4003544:	defff804 	addi	sp,sp,-32
 4003548:	dfc00715 	stw	ra,28(sp)
 400354c:	df000615 	stw	fp,24(sp)
 4003550:	dc000515 	stw	r16,20(sp)
 4003554:	df000604 	addi	fp,sp,24
 4003558:	e13ffb15 	stw	r4,-20(fp)
 400355c:	2809883a 	mov	r4,r5
 4003560:	3007883a 	mov	r3,r6
 4003564:	3805883a 	mov	r2,r7
 4003568:	e13ffc05 	stb	r4,-16(fp)
 400356c:	e0fffd05 	stb	r3,-12(fp)
 4003570:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 4003574:	e0bffc03 	ldbu	r2,-16(fp)
 4003578:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
 400357c:	e0fffa43 	ldbu	r3,-23(fp)
 4003580:	00bfe004 	movi	r2,-128
 4003584:	1884703a 	and	r2,r3,r2
 4003588:	10803fcc 	andi	r2,r2,255
 400358c:	1000031e 	bne	r2,zero,400359c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
 4003590:	e0bffe03 	ldbu	r2,-8(fp)
 4003594:	10800230 	cmpltui	r2,r2,8
 4003598:	1000021e 	bne	r2,zero,40035a4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
 400359c:	0005883a 	mov	r2,zero
 40035a0:	00007a06 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
 40035a4:	e0bffd03 	ldbu	r2,-12(fp)
 40035a8:	10000726 	beq	r2,zero,40035c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
 40035ac:	e0bffb17 	ldw	r2,-20(fp)
 40035b0:	108001c3 	ldbu	r2,7(r2)
 40035b4:	10803fcc 	andi	r2,r2,255
 40035b8:	108001d8 	cmpnei	r2,r2,7
 40035bc:	1000021e 	bne	r2,zero,40035c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
 40035c0:	0005883a 	mov	r2,zero
 40035c4:	00007106 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 40035c8:	000b883a 	mov	r5,zero
 40035cc:	e13ffb17 	ldw	r4,-20(fp)
 40035d0:	40039bc0 	call	40039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 40035d4:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
 40035d8:	e0bffa03 	ldbu	r2,-24(fp)
 40035dc:	1000021e 	bne	r2,zero,40035e8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
 40035e0:	0005883a 	mov	r2,zero
 40035e4:	00006906 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
 40035e8:	e0bffa43 	ldbu	r2,-23(fp)
 40035ec:	10803fcc 	andi	r2,r2,255
 40035f0:	1000241e 	bne	r2,zero,4003684 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
 40035f4:	e0bffd03 	ldbu	r2,-12(fp)
 40035f8:	10001026 	beq	r2,zero,400363c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
 40035fc:	e0bffa03 	ldbu	r2,-24(fp)
 4003600:	e43ffb17 	ldw	r16,-20(fp)
 4003604:	014001c4 	movi	r5,7
 4003608:	1009883a 	mov	r4,r2
 400360c:	400cfd40 	call	400cfd4 <__mulsi3>
 4003610:	8085883a 	add	r2,r16,r2
 4003614:	10800304 	addi	r2,r2,12
 4003618:	00c01044 	movi	r3,65
 400361c:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
 4003620:	e0bffb17 	ldw	r2,-20(fp)
 4003624:	108001c3 	ldbu	r2,7(r2)
 4003628:	10800044 	addi	r2,r2,1
 400362c:	1007883a 	mov	r3,r2
 4003630:	e0bffb17 	ldw	r2,-20(fp)
 4003634:	10c001c5 	stb	r3,7(r2)
 4003638:	00000906 	br	4003660 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
 400363c:	e0bffa03 	ldbu	r2,-24(fp)
 4003640:	e43ffb17 	ldw	r16,-20(fp)
 4003644:	014001c4 	movi	r5,7
 4003648:	1009883a 	mov	r4,r2
 400364c:	400cfd40 	call	400cfd4 <__mulsi3>
 4003650:	8085883a 	add	r2,r16,r2
 4003654:	10800304 	addi	r2,r2,12
 4003658:	00c00044 	movi	r3,1
 400365c:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
 4003660:	e0bffa03 	ldbu	r2,-24(fp)
 4003664:	e43ffb17 	ldw	r16,-20(fp)
 4003668:	014001c4 	movi	r5,7
 400366c:	1009883a 	mov	r4,r2
 4003670:	400cfd40 	call	400cfd4 <__mulsi3>
 4003674:	8085883a 	add	r2,r16,r2
 4003678:	10800304 	addi	r2,r2,12
 400367c:	10800003 	ldbu	r2,0(r2)
 4003680:	00004206 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 4003684:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
 4003688:	e0bffa43 	ldbu	r2,-23(fp)
 400368c:	108001cc 	andi	r2,r2,7
 4003690:	108001cc 	andi	r2,r2,7
 4003694:	100890fa 	slli	r4,r2,3
 4003698:	e0fffa83 	ldbu	r3,-22(fp)
 400369c:	00bff1c4 	movi	r2,-57
 40036a0:	1884703a 	and	r2,r3,r2
 40036a4:	1007883a 	mov	r3,r2
 40036a8:	2005883a 	mov	r2,r4
 40036ac:	1884b03a 	or	r2,r3,r2
 40036b0:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
 40036b4:	e0bffd03 	ldbu	r2,-12(fp)
 40036b8:	10001526 	beq	r2,zero,4003710 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
 40036bc:	e0bffa83 	ldbu	r2,-22(fp)
 40036c0:	10801014 	ori	r2,r2,64
 40036c4:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
 40036c8:	e0bffb17 	ldw	r2,-20(fp)
 40036cc:	108001c3 	ldbu	r2,7(r2)
 40036d0:	10800044 	addi	r2,r2,1
 40036d4:	1007883a 	mov	r3,r2
 40036d8:	e0bffb17 	ldw	r2,-20(fp)
 40036dc:	10c001c5 	stb	r3,7(r2)
 40036e0:	e0bffb17 	ldw	r2,-20(fp)
 40036e4:	108001c3 	ldbu	r2,7(r2)
 40036e8:	108001cc 	andi	r2,r2,7
 40036ec:	110001cc 	andi	r4,r2,7
 40036f0:	e0fffa83 	ldbu	r3,-22(fp)
 40036f4:	00bffe04 	movi	r2,-8
 40036f8:	1884703a 	and	r2,r3,r2
 40036fc:	1007883a 	mov	r3,r2
 4003700:	2005883a 	mov	r2,r4
 4003704:	1884b03a 	or	r2,r3,r2
 4003708:	e0bffa85 	stb	r2,-22(fp)
 400370c:	00000e06 	br	4003748 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
 4003710:	e0fffa83 	ldbu	r3,-22(fp)
 4003714:	00bfefc4 	movi	r2,-65
 4003718:	1884703a 	and	r2,r3,r2
 400371c:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
 4003720:	e0bffe03 	ldbu	r2,-8(fp)
 4003724:	108001cc 	andi	r2,r2,7
 4003728:	110001cc 	andi	r4,r2,7
 400372c:	e0fffa83 	ldbu	r3,-22(fp)
 4003730:	00bffe04 	movi	r2,-8
 4003734:	1884703a 	and	r2,r3,r2
 4003738:	1007883a 	mov	r3,r2
 400373c:	2005883a 	mov	r2,r4
 4003740:	1884b03a 	or	r2,r3,r2
 4003744:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
 4003748:	e0bffa03 	ldbu	r2,-24(fp)
 400374c:	e43ffb17 	ldw	r16,-20(fp)
 4003750:	014001c4 	movi	r5,7
 4003754:	1009883a 	mov	r4,r2
 4003758:	400cfd40 	call	400cfd4 <__mulsi3>
 400375c:	8085883a 	add	r2,r16,r2
 4003760:	10800304 	addi	r2,r2,12
 4003764:	e0fffa83 	ldbu	r3,-22(fp)
 4003768:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 400376c:	e0bffa03 	ldbu	r2,-24(fp)
 4003770:	e43ffb17 	ldw	r16,-20(fp)
 4003774:	014001c4 	movi	r5,7
 4003778:	1009883a 	mov	r4,r2
 400377c:	400cfd40 	call	400cfd4 <__mulsi3>
 4003780:	8085883a 	add	r2,r16,r2
 4003784:	10800304 	addi	r2,r2,12
 4003788:	10800003 	ldbu	r2,0(r2)
        };
 400378c:	e6ffff04 	addi	sp,fp,-4
 4003790:	dfc00217 	ldw	ra,8(sp)
 4003794:	df000117 	ldw	fp,4(sp)
 4003798:	dc000017 	ldw	r16,0(sp)
 400379c:	dec00304 	addi	sp,sp,12
 40037a0:	f800283a 	ret

040037a4 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 40037a4:	defffb04 	addi	sp,sp,-20
 40037a8:	dfc00415 	stw	ra,16(sp)
 40037ac:	df000315 	stw	fp,12(sp)
 40037b0:	df000304 	addi	fp,sp,12
 40037b4:	e13ffe15 	stw	r4,-8(fp)
 40037b8:	2805883a 	mov	r2,r5
 40037bc:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 40037c0:	e0bfff03 	ldbu	r2,-4(fp)
 40037c4:	10801058 	cmpnei	r2,r2,65
 40037c8:	1000031e 	bne	r2,zero,40037d8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
 40037cc:	e13ffe17 	ldw	r4,-8(fp)
 40037d0:	40039540 	call	4003954 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 40037d4:	00000906 	br	40037fc <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
 40037d8:	e0bfff03 	ldbu	r2,-4(fp)
 40037dc:	100b883a 	mov	r5,r2
 40037e0:	e13ffe17 	ldw	r4,-8(fp)
 40037e4:	40039bc0 	call	40039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 40037e8:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
 40037ec:	e0bffd03 	ldbu	r2,-12(fp)
 40037f0:	100b883a 	mov	r5,r2
 40037f4:	e13ffe17 	ldw	r4,-8(fp)
 40037f8:	4003a500 	call	4003a50 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 40037fc:	e037883a 	mov	sp,fp
 4003800:	dfc00117 	ldw	ra,4(sp)
 4003804:	df000017 	ldw	fp,0(sp)
 4003808:	dec00204 	addi	sp,sp,8
 400380c:	f800283a 	ret

04003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
 4003810:	defffa04 	addi	sp,sp,-24
 4003814:	dfc00515 	stw	ra,20(sp)
 4003818:	df000415 	stw	fp,16(sp)
 400381c:	dc400315 	stw	r17,12(sp)
 4003820:	dc000215 	stw	r16,8(sp)
 4003824:	df000404 	addi	fp,sp,16
 4003828:	e13ffc15 	stw	r4,-16(fp)
 400382c:	2805883a 	mov	r2,r5
 4003830:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
 4003834:	e0bffd03 	ldbu	r2,-12(fp)
 4003838:	e43ffc17 	ldw	r16,-16(fp)
 400383c:	014001c4 	movi	r5,7
 4003840:	1009883a 	mov	r4,r2
 4003844:	400cfd40 	call	400cfd4 <__mulsi3>
 4003848:	8085883a 	add	r2,r16,r2
 400384c:	10800304 	addi	r2,r2,12
 4003850:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
 4003854:	e0bffd03 	ldbu	r2,-12(fp)
 4003858:	e43ffc17 	ldw	r16,-16(fp)
 400385c:	014001c4 	movi	r5,7
 4003860:	1009883a 	mov	r4,r2
 4003864:	400cfd40 	call	400cfd4 <__mulsi3>
 4003868:	8085883a 	add	r2,r16,r2
 400386c:	10800344 	addi	r2,r2,13
 4003870:	00c00044 	movi	r3,1
 4003874:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
 4003878:	e0bffd03 	ldbu	r2,-12(fp)
 400387c:	e43ffc17 	ldw	r16,-16(fp)
 4003880:	014001c4 	movi	r5,7
 4003884:	1009883a 	mov	r4,r2
 4003888:	400cfd40 	call	400cfd4 <__mulsi3>
 400388c:	8085883a 	add	r2,r16,r2
 4003890:	10800384 	addi	r2,r2,14
 4003894:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
 4003898:	e0fffd03 	ldbu	r3,-12(fp)
 400389c:	e0bffc17 	ldw	r2,-16(fp)
 40038a0:	14000104 	addi	r16,r2,4
 40038a4:	e47ffc17 	ldw	r17,-16(fp)
 40038a8:	014001c4 	movi	r5,7
 40038ac:	1809883a 	mov	r4,r3
 40038b0:	400cfd40 	call	400cfd4 <__mulsi3>
 40038b4:	8885883a 	add	r2,r17,r2
 40038b8:	10800204 	addi	r2,r2,8
 40038bc:	81403fcc 	andi	r5,r16,255
 40038c0:	10c00003 	ldbu	r3,0(r2)
 40038c4:	1806703a 	and	r3,r3,zero
 40038c8:	1809883a 	mov	r4,r3
 40038cc:	2807883a 	mov	r3,r5
 40038d0:	20c6b03a 	or	r3,r4,r3
 40038d4:	10c00005 	stb	r3,0(r2)
 40038d8:	8006d23a 	srli	r3,r16,8
 40038dc:	19403fcc 	andi	r5,r3,255
 40038e0:	10c00043 	ldbu	r3,1(r2)
 40038e4:	1806703a 	and	r3,r3,zero
 40038e8:	1809883a 	mov	r4,r3
 40038ec:	2807883a 	mov	r3,r5
 40038f0:	20c6b03a 	or	r3,r4,r3
 40038f4:	10c00045 	stb	r3,1(r2)
 40038f8:	8006d43a 	srli	r3,r16,16
 40038fc:	19403fcc 	andi	r5,r3,255
 4003900:	10c00083 	ldbu	r3,2(r2)
 4003904:	1806703a 	and	r3,r3,zero
 4003908:	1809883a 	mov	r4,r3
 400390c:	2807883a 	mov	r3,r5
 4003910:	20c6b03a 	or	r3,r4,r3
 4003914:	10c00085 	stb	r3,2(r2)
 4003918:	800ad63a 	srli	r5,r16,24
 400391c:	10c000c3 	ldbu	r3,3(r2)
 4003920:	1806703a 	and	r3,r3,zero
 4003924:	1809883a 	mov	r4,r3
 4003928:	2807883a 	mov	r3,r5
 400392c:	20c6b03a 	or	r3,r4,r3
 4003930:	10c000c5 	stb	r3,3(r2)
        };
 4003934:	0001883a 	nop
 4003938:	e6fffe04 	addi	sp,fp,-8
 400393c:	dfc00317 	ldw	ra,12(sp)
 4003940:	df000217 	ldw	fp,8(sp)
 4003944:	dc400117 	ldw	r17,4(sp)
 4003948:	dc000017 	ldw	r16,0(sp)
 400394c:	dec00404 	addi	sp,sp,16
 4003950:	f800283a 	ret

04003954 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
 4003954:	defffc04 	addi	sp,sp,-16
 4003958:	dfc00315 	stw	ra,12(sp)
 400395c:	df000215 	stw	fp,8(sp)
 4003960:	df000204 	addi	fp,sp,8
 4003964:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 4003968:	00800044 	movi	r2,1
 400396c:	e0bffe05 	stb	r2,-8(fp)
 4003970:	e0bffe03 	ldbu	r2,-8(fp)
 4003974:	10800428 	cmpgeui	r2,r2,16
 4003978:	1000081e 	bne	r2,zero,400399c <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
 400397c:	e0bffe03 	ldbu	r2,-8(fp)
 4003980:	100b883a 	mov	r5,r2
 4003984:	e13fff17 	ldw	r4,-4(fp)
 4003988:	40038100 	call	4003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 400398c:	e0bffe03 	ldbu	r2,-8(fp)
 4003990:	10800044 	addi	r2,r2,1
 4003994:	e0bffe05 	stb	r2,-8(fp)
 4003998:	003ff506 	br	4003970 <__alt_mem_onchip_memory2_0+0xfc0026f0>
                        InitEntry(i);

                hubCounter = 0;
 400399c:	e0bfff17 	ldw	r2,-4(fp)
 40039a0:	100001c5 	stb	zero,7(r2)
        };
 40039a4:	0001883a 	nop
 40039a8:	e037883a 	mov	sp,fp
 40039ac:	dfc00117 	ldw	ra,4(sp)
 40039b0:	df000017 	ldw	fp,0(sp)
 40039b4:	dec00204 	addi	sp,sp,8
 40039b8:	f800283a 	ret

040039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
 40039bc:	defffa04 	addi	sp,sp,-24
 40039c0:	dfc00515 	stw	ra,20(sp)
 40039c4:	df000415 	stw	fp,16(sp)
 40039c8:	dc000315 	stw	r16,12(sp)
 40039cc:	df000404 	addi	fp,sp,16
 40039d0:	e13ffd15 	stw	r4,-12(fp)
 40039d4:	2805883a 	mov	r2,r5
 40039d8:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 40039dc:	00800044 	movi	r2,1
 40039e0:	e0bffc05 	stb	r2,-16(fp)
 40039e4:	e0bffc03 	ldbu	r2,-16(fp)
 40039e8:	10800428 	cmpgeui	r2,r2,16
 40039ec:	1000111e 	bne	r2,zero,4003a34 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
 40039f0:	e0bffc03 	ldbu	r2,-16(fp)
 40039f4:	e43ffd17 	ldw	r16,-12(fp)
 40039f8:	014001c4 	movi	r5,7
 40039fc:	1009883a 	mov	r4,r2
 4003a00:	400cfd40 	call	400cfd4 <__mulsi3>
 4003a04:	8085883a 	add	r2,r16,r2
 4003a08:	10800304 	addi	r2,r2,12
 4003a0c:	10800003 	ldbu	r2,0(r2)
 4003a10:	10c03fcc 	andi	r3,r2,255
 4003a14:	e0bffe03 	ldbu	r2,-8(fp)
 4003a18:	1880021e 	bne	r3,r2,4003a24 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
 4003a1c:	e0bffc03 	ldbu	r2,-16(fp)
 4003a20:	00000506 	br	4003a38 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 4003a24:	e0bffc03 	ldbu	r2,-16(fp)
 4003a28:	10800044 	addi	r2,r2,1
 4003a2c:	e0bffc05 	stb	r2,-16(fp)
 4003a30:	003fec06 	br	40039e4 <__alt_mem_onchip_memory2_0+0xfc002764>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
 4003a34:	0005883a 	mov	r2,zero
        };
 4003a38:	e6ffff04 	addi	sp,fp,-4
 4003a3c:	dfc00217 	ldw	ra,8(sp)
 4003a40:	df000117 	ldw	fp,4(sp)
 4003a44:	dc000017 	ldw	r16,0(sp)
 4003a48:	dec00304 	addi	sp,sp,12
 4003a4c:	f800283a 	ret

04003a50 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
 4003a50:	defffa04 	addi	sp,sp,-24
 4003a54:	dfc00515 	stw	ra,20(sp)
 4003a58:	df000415 	stw	fp,16(sp)
 4003a5c:	dc000315 	stw	r16,12(sp)
 4003a60:	df000404 	addi	fp,sp,16
 4003a64:	e13ffd15 	stw	r4,-12(fp)
 4003a68:	2805883a 	mov	r2,r5
 4003a6c:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
 4003a70:	e0bffe03 	ldbu	r2,-8(fp)
 4003a74:	10003026 	beq	r2,zero,4003b38 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
 4003a78:	e0bffe03 	ldbu	r2,-8(fp)
 4003a7c:	e43ffd17 	ldw	r16,-12(fp)
 4003a80:	014001c4 	movi	r5,7
 4003a84:	1009883a 	mov	r4,r2
 4003a88:	400cfd40 	call	400cfd4 <__mulsi3>
 4003a8c:	8085883a 	add	r2,r16,r2
 4003a90:	10800304 	addi	r2,r2,12
 4003a94:	10800003 	ldbu	r2,0(r2)
 4003a98:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
 4003a9c:	e0bffc43 	ldbu	r2,-15(fp)
 4003aa0:	1080100c 	andi	r2,r2,64
 4003aa4:	10803fcc 	andi	r2,r2,255
 4003aa8:	10001e26 	beq	r2,zero,4003b24 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 4003aac:	00800044 	movi	r2,1
 4003ab0:	e0bffc05 	stb	r2,-16(fp)
 4003ab4:	e0bffc03 	ldbu	r2,-16(fp)
 4003ab8:	100d883a 	mov	r6,r2
 4003abc:	e17ffc43 	ldbu	r5,-15(fp)
 4003ac0:	e13ffd17 	ldw	r4,-12(fp)
 4003ac4:	4003b540 	call	4003b54 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 4003ac8:	e0bffc05 	stb	r2,-16(fp)
 4003acc:	e0bffc03 	ldbu	r2,-16(fp)
 4003ad0:	1004c03a 	cmpne	r2,r2,zero
 4003ad4:	10803fcc 	andi	r2,r2,255
 4003ad8:	10000526 	beq	r2,zero,4003af0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
 4003adc:	e0bffc03 	ldbu	r2,-16(fp)
 4003ae0:	100b883a 	mov	r5,r2
 4003ae4:	e13ffd17 	ldw	r4,-12(fp)
 4003ae8:	4003a500 	call	4003a50 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 4003aec:	003ff106 	br	4003ab4 <__alt_mem_onchip_memory2_0+0xfc002834>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
 4003af0:	e0bffd17 	ldw	r2,-12(fp)
 4003af4:	10c001c3 	ldbu	r3,7(r2)
 4003af8:	e0bffc43 	ldbu	r2,-15(fp)
 4003afc:	108001cc 	andi	r2,r2,7
 4003b00:	18c03fcc 	andi	r3,r3,255
 4003b04:	10803fcc 	andi	r2,r2,255
 4003b08:	1880061e 	bne	r3,r2,4003b24 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
 4003b0c:	e0bffd17 	ldw	r2,-12(fp)
 4003b10:	108001c3 	ldbu	r2,7(r2)
 4003b14:	10bfffc4 	addi	r2,r2,-1
 4003b18:	1007883a 	mov	r3,r2
 4003b1c:	e0bffd17 	ldw	r2,-12(fp)
 4003b20:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
 4003b24:	e0bffe03 	ldbu	r2,-8(fp)
 4003b28:	100b883a 	mov	r5,r2
 4003b2c:	e13ffd17 	ldw	r4,-12(fp)
 4003b30:	40038100 	call	4003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 4003b34:	00000106 	br	4003b3c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
 4003b38:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
 4003b3c:	e6ffff04 	addi	sp,fp,-4
 4003b40:	dfc00217 	ldw	ra,8(sp)
 4003b44:	df000117 	ldw	fp,4(sp)
 4003b48:	dc000017 	ldw	r16,0(sp)
 4003b4c:	dec00304 	addi	sp,sp,12
 4003b50:	f800283a 	ret

04003b54 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 4003b54:	defff904 	addi	sp,sp,-28
 4003b58:	dfc00615 	stw	ra,24(sp)
 4003b5c:	df000515 	stw	fp,20(sp)
 4003b60:	dc000415 	stw	r16,16(sp)
 4003b64:	df000504 	addi	fp,sp,20
 4003b68:	e13ffc15 	stw	r4,-16(fp)
 4003b6c:	e17ffd05 	stb	r5,-12(fp)
 4003b70:	3005883a 	mov	r2,r6
 4003b74:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 4003b78:	e0bffe03 	ldbu	r2,-8(fp)
 4003b7c:	10000526 	beq	r2,zero,4003b94 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
 4003b80:	e0bffe03 	ldbu	r2,-8(fp)
 4003b84:	10800428 	cmpgeui	r2,r2,16
 4003b88:	1000021e 	bne	r2,zero,4003b94 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
 4003b8c:	e0bffe03 	ldbu	r2,-8(fp)
 4003b90:	00000106 	br	4003b98 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
 4003b94:	00800044 	movi	r2,1
 4003b98:	e0bffb05 	stb	r2,-20(fp)
 4003b9c:	e0bffb03 	ldbu	r2,-20(fp)
 4003ba0:	10800428 	cmpgeui	r2,r2,16
 4003ba4:	1000161e 	bne	r2,zero,4003c00 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 4003ba8:	e0bffb03 	ldbu	r2,-20(fp)
 4003bac:	e43ffc17 	ldw	r16,-16(fp)
 4003bb0:	014001c4 	movi	r5,7
 4003bb4:	1009883a 	mov	r4,r2
 4003bb8:	400cfd40 	call	400cfd4 <__mulsi3>
 4003bbc:	8085883a 	add	r2,r16,r2
 4003bc0:	10800304 	addi	r2,r2,12
 4003bc4:	10800003 	ldbu	r2,0(r2)
 4003bc8:	1004d0fa 	srli	r2,r2,3
 4003bcc:	108001cc 	andi	r2,r2,7
 4003bd0:	1007883a 	mov	r3,r2
 4003bd4:	e0bffd03 	ldbu	r2,-12(fp)
 4003bd8:	108001cc 	andi	r2,r2,7
 4003bdc:	18c03fcc 	andi	r3,r3,255
 4003be0:	10803fcc 	andi	r2,r2,255
 4003be4:	1880021e 	bne	r3,r2,4003bf0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
 4003be8:	e0bffb03 	ldbu	r2,-20(fp)
 4003bec:	00000506 	br	4003c04 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 4003bf0:	e0bffb03 	ldbu	r2,-20(fp)
 4003bf4:	10800044 	addi	r2,r2,1
 4003bf8:	e0bffb05 	stb	r2,-20(fp)
 4003bfc:	003fe706 	br	4003b9c <__alt_mem_onchip_memory2_0+0xfc00291c>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
 4003c00:	0005883a 	mov	r2,zero
        };
 4003c04:	e6ffff04 	addi	sp,fp,-4
 4003c08:	dfc00217 	ldw	ra,8(sp)
 4003c0c:	df000117 	ldw	fp,4(sp)
 4003c10:	dc000017 	ldw	r16,0(sp)
 4003c14:	dec00304 	addi	sp,sp,12
 4003c18:	f800283a 	ret

04003c1c <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
 4003c1c:	defffb04 	addi	sp,sp,-20
 4003c20:	dfc00415 	stw	ra,16(sp)
 4003c24:	df000315 	stw	fp,12(sp)
 4003c28:	df000304 	addi	fp,sp,12
 4003c2c:	e13ffe15 	stw	r4,-8(fp)
 4003c30:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
 4003c34:	e0bffe17 	ldw	r2,-8(fp)
 4003c38:	1009883a 	mov	r4,r2
 4003c3c:	40055d80 	call	40055d8 <_ZN15USBDeviceConfigC1Ev>
 4003c40:	e0bffe17 	ldw	r2,-8(fp)
 4003c44:	10800104 	addi	r2,r2,4
 4003c48:	1009883a 	mov	r4,r2
 4003c4c:	400560c0 	call	400560c <_ZN17UsbConfigXtracterC1Ev>
 4003c50:	008100b4 	movhi	r2,1026
 4003c54:	10808904 	addi	r2,r2,548
 4003c58:	e0fffe17 	ldw	r3,-8(fp)
 4003c5c:	18800015 	stw	r2,0(r3)
 4003c60:	008100b4 	movhi	r2,1026
 4003c64:	10809604 	addi	r2,r2,600
 4003c68:	e0fffe17 	ldw	r3,-8(fp)
 4003c6c:	18800115 	stw	r2,4(r3)
 4003c70:	e0bffe17 	ldw	r2,-8(fp)
 4003c74:	e0ffff17 	ldw	r3,-4(fp)
 4003c78:	10c00315 	stw	r3,12(r2)
 4003c7c:	e0bffe17 	ldw	r2,-8(fp)
 4003c80:	10000405 	stb	zero,16(r2)
 4003c84:	e0bffe17 	ldw	r2,-8(fp)
 4003c88:	00c00044 	movi	r3,1
 4003c8c:	10c006c5 	stb	r3,27(r2)
 4003c90:	e0bffe17 	ldw	r2,-8(fp)
 4003c94:	10000715 	stw	zero,28(r2)
 4003c98:	e0bffe17 	ldw	r2,-8(fp)
 4003c9c:	10000905 	stb	zero,36(r2)
 4003ca0:	e0bffe17 	ldw	r2,-8(fp)
 4003ca4:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
 4003ca8:	e03ffd05 	stb	zero,-12(fp)
 4003cac:	e0bffd03 	ldbu	r2,-12(fp)
 4003cb0:	108000e8 	cmpgeui	r2,r2,3
 4003cb4:	1000431e 	bne	r2,zero,4003dc4 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
 4003cb8:	e0fffd03 	ldbu	r3,-12(fp)
 4003cbc:	e13ffe17 	ldw	r4,-8(fp)
 4003cc0:	1805883a 	mov	r2,r3
 4003cc4:	1085883a 	add	r2,r2,r2
 4003cc8:	10c5883a 	add	r2,r2,r3
 4003ccc:	2085883a 	add	r2,r4,r2
 4003cd0:	10800444 	addi	r2,r2,17
 4003cd4:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 4003cd8:	e13ffd03 	ldbu	r4,-12(fp)
 4003cdc:	e0bffd03 	ldbu	r2,-12(fp)
 4003ce0:	10000226 	beq	r2,zero,4003cec <_ZN7XBOXONEC1EP3USB+0xd0>
 4003ce4:	0007883a 	mov	r3,zero
 4003ce8:	00000106 	br	4003cf0 <_ZN7XBOXONEC1EP3USB+0xd4>
 4003cec:	00c00204 	movi	r3,8
 4003cf0:	e17ffe17 	ldw	r5,-8(fp)
 4003cf4:	2005883a 	mov	r2,r4
 4003cf8:	1085883a 	add	r2,r2,r2
 4003cfc:	1105883a 	add	r2,r2,r4
 4003d00:	2885883a 	add	r2,r5,r2
 4003d04:	10800484 	addi	r2,r2,18
 4003d08:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
 4003d0c:	e0fffd03 	ldbu	r3,-12(fp)
 4003d10:	e13ffe17 	ldw	r4,-8(fp)
 4003d14:	1805883a 	mov	r2,r3
 4003d18:	1085883a 	add	r2,r2,r2
 4003d1c:	10c5883a 	add	r2,r2,r3
 4003d20:	2085883a 	add	r2,r4,r2
 4003d24:	10800404 	addi	r2,r2,16
 4003d28:	110000c3 	ldbu	r4,3(r2)
 4003d2c:	00ffff84 	movi	r3,-2
 4003d30:	20c6703a 	and	r3,r4,r3
 4003d34:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
 4003d38:	e0fffd03 	ldbu	r3,-12(fp)
 4003d3c:	e13ffe17 	ldw	r4,-8(fp)
 4003d40:	1805883a 	mov	r2,r3
 4003d44:	1085883a 	add	r2,r2,r2
 4003d48:	10c5883a 	add	r2,r2,r3
 4003d4c:	2085883a 	add	r2,r4,r2
 4003d50:	10800404 	addi	r2,r2,16
 4003d54:	110000c3 	ldbu	r4,3(r2)
 4003d58:	00ffff44 	movi	r3,-3
 4003d5c:	20c6703a 	and	r3,r4,r3
 4003d60:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 4003d64:	e13ffd03 	ldbu	r4,-12(fp)
 4003d68:	e0bffd03 	ldbu	r2,-12(fp)
 4003d6c:	10000226 	beq	r2,zero,4003d78 <_ZN7XBOXONEC1EP3USB+0x15c>
 4003d70:	00c00044 	movi	r3,1
 4003d74:	00000106 	br	4003d7c <_ZN7XBOXONEC1EP3USB+0x160>
 4003d78:	00c003c4 	movi	r3,15
 4003d7c:	e17ffe17 	ldw	r5,-8(fp)
 4003d80:	2005883a 	mov	r2,r4
 4003d84:	1085883a 	add	r2,r2,r2
 4003d88:	1105883a 	add	r2,r2,r4
 4003d8c:	2885883a 	add	r2,r5,r2
 4003d90:	10800404 	addi	r2,r2,16
 4003d94:	18c7883a 	add	r3,r3,r3
 4003d98:	18cb883a 	add	r5,r3,r3
 4003d9c:	10c000c3 	ldbu	r3,3(r2)
 4003da0:	18c000cc 	andi	r3,r3,3
 4003da4:	1809883a 	mov	r4,r3
 4003da8:	2807883a 	mov	r3,r5
 4003dac:	20c6b03a 	or	r3,r4,r3
 4003db0:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
 4003db4:	e0bffd03 	ldbu	r2,-12(fp)
 4003db8:	10800044 	addi	r2,r2,1
 4003dbc:	e0bffd05 	stb	r2,-12(fp)
 4003dc0:	003fba06 	br	4003cac <__alt_mem_onchip_memory2_0+0xfc002a2c>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
 4003dc4:	e0bffe17 	ldw	r2,-8(fp)
 4003dc8:	10800317 	ldw	r2,12(r2)
 4003dcc:	10000626 	beq	r2,zero,4003de8 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
 4003dd0:	e0bffe17 	ldw	r2,-8(fp)
 4003dd4:	10800317 	ldw	r2,12(r2)
 4003dd8:	e0fffe17 	ldw	r3,-8(fp)
 4003ddc:	180b883a 	mov	r5,r3
 4003de0:	1009883a 	mov	r4,r2
 4003de4:	400538c0 	call	400538c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 4003de8:	0001883a 	nop
 4003dec:	e037883a 	mov	sp,fp
 4003df0:	dfc00117 	ldw	ra,4(sp)
 4003df4:	df000017 	ldw	fp,0(sp)
 4003df8:	dec00204 	addi	sp,sp,8
 4003dfc:	f800283a 	ret

04003e00 <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
 4003e00:	deffde04 	addi	sp,sp,-136
 4003e04:	dfc02115 	stw	ra,132(sp)
 4003e08:	df002015 	stw	fp,128(sp)
 4003e0c:	df002004 	addi	fp,sp,128
 4003e10:	e13ffc15 	stw	r4,-16(fp)
 4003e14:	2809883a 	mov	r4,r5
 4003e18:	3007883a 	mov	r3,r6
 4003e1c:	3805883a 	mov	r2,r7
 4003e20:	e13ffd05 	stb	r4,-12(fp)
 4003e24:	e0fffe05 	stb	r3,-8(fp)
 4003e28:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 4003e2c:	e0bfe744 	addi	r2,fp,-99
 4003e30:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
 4003e34:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
 4003e38:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
 4003e3c:	e0bffc17 	ldw	r2,-16(fp)
 4003e40:	10800317 	ldw	r2,12(r2)
 4003e44:	1009883a 	mov	r4,r2
 4003e48:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 4003e4c:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
 4003e50:	e0bffc17 	ldw	r2,-16(fp)
 4003e54:	10800403 	ldbu	r2,16(r2)
 4003e58:	10803fcc 	andi	r2,r2,255
 4003e5c:	10000226 	beq	r2,zero,4003e68 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 4003e60:	00bff644 	movi	r2,-39
 4003e64:	00017606 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 4003e68:	e0bfe517 	ldw	r2,-108(fp)
 4003e6c:	10800017 	ldw	r2,0(r2)
 4003e70:	10800017 	ldw	r2,0(r2)
 4003e74:	000b883a 	mov	r5,zero
 4003e78:	e13fe517 	ldw	r4,-108(fp)
 4003e7c:	103ee83a 	callr	r2
 4003e80:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
 4003e84:	e0bfe317 	ldw	r2,-116(fp)
 4003e88:	1000021e 	bne	r2,zero,4003e94 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4003e8c:	00bff584 	movi	r2,-42
 4003e90:	00016b06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
 4003e94:	e0bfe317 	ldw	r2,-116(fp)
 4003e98:	10c00003 	ldbu	r3,0(r2)
 4003e9c:	11000043 	ldbu	r4,1(r2)
 4003ea0:	2008923a 	slli	r4,r4,8
 4003ea4:	20c6b03a 	or	r3,r4,r3
 4003ea8:	11000083 	ldbu	r4,2(r2)
 4003eac:	2008943a 	slli	r4,r4,16
 4003eb0:	20c6b03a 	or	r3,r4,r3
 4003eb4:	108000c3 	ldbu	r2,3(r2)
 4003eb8:	1004963a 	slli	r2,r2,24
 4003ebc:	10c4b03a 	or	r2,r2,r3
 4003ec0:	1000021e 	bne	r2,zero,4003ecc <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 4003ec4:	00bff5c4 	movi	r2,-41
 4003ec8:	00015d06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 4003ecc:	e0bfe317 	ldw	r2,-116(fp)
 4003ed0:	10c00003 	ldbu	r3,0(r2)
 4003ed4:	11000043 	ldbu	r4,1(r2)
 4003ed8:	2008923a 	slli	r4,r4,8
 4003edc:	20c6b03a 	or	r3,r4,r3
 4003ee0:	11000083 	ldbu	r4,2(r2)
 4003ee4:	2008943a 	slli	r4,r4,16
 4003ee8:	20c6b03a 	or	r3,r4,r3
 4003eec:	108000c3 	ldbu	r2,3(r2)
 4003ef0:	1004963a 	slli	r2,r2,24
 4003ef4:	10c4b03a 	or	r2,r2,r3
 4003ef8:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
 4003efc:	e0bffc17 	ldw	r2,-16(fp)
 4003f00:	10c00444 	addi	r3,r2,17
 4003f04:	e0bfe317 	ldw	r2,-116(fp)
 4003f08:	19803fcc 	andi	r6,r3,255
 4003f0c:	11000003 	ldbu	r4,0(r2)
 4003f10:	2008703a 	and	r4,r4,zero
 4003f14:	200b883a 	mov	r5,r4
 4003f18:	3009883a 	mov	r4,r6
 4003f1c:	2908b03a 	or	r4,r5,r4
 4003f20:	11000005 	stb	r4,0(r2)
 4003f24:	1808d23a 	srli	r4,r3,8
 4003f28:	21803fcc 	andi	r6,r4,255
 4003f2c:	11000043 	ldbu	r4,1(r2)
 4003f30:	2008703a 	and	r4,r4,zero
 4003f34:	200b883a 	mov	r5,r4
 4003f38:	3009883a 	mov	r4,r6
 4003f3c:	2908b03a 	or	r4,r5,r4
 4003f40:	11000045 	stb	r4,1(r2)
 4003f44:	1808d43a 	srli	r4,r3,16
 4003f48:	21803fcc 	andi	r6,r4,255
 4003f4c:	11000083 	ldbu	r4,2(r2)
 4003f50:	2008703a 	and	r4,r4,zero
 4003f54:	200b883a 	mov	r5,r4
 4003f58:	3009883a 	mov	r4,r6
 4003f5c:	2908b03a 	or	r4,r5,r4
 4003f60:	11000085 	stb	r4,2(r2)
 4003f64:	180ad63a 	srli	r5,r3,24
 4003f68:	10c000c3 	ldbu	r3,3(r2)
 4003f6c:	1806703a 	and	r3,r3,zero
 4003f70:	1809883a 	mov	r4,r3
 4003f74:	2807883a 	mov	r3,r5
 4003f78:	20c6b03a 	or	r3,r4,r3
 4003f7c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
 4003f80:	e0bfe317 	ldw	r2,-116(fp)
 4003f84:	e0ffff03 	ldbu	r3,-4(fp)
 4003f88:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 4003f8c:	e0bffc17 	ldw	r2,-16(fp)
 4003f90:	10c00317 	ldw	r3,12(r2)
 4003f94:	00800484 	movi	r2,18
 4003f98:	113fffcc 	andi	r4,r2,65535
 4003f9c:	e0bfe744 	addi	r2,fp,-99
 4003fa0:	d8800015 	stw	r2,0(sp)
 4003fa4:	200f883a 	mov	r7,r4
 4003fa8:	000d883a 	mov	r6,zero
 4003fac:	000b883a 	mov	r5,zero
 4003fb0:	1809883a 	mov	r4,r3
 4003fb4:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 4003fb8:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 4003fbc:	e0bfe317 	ldw	r2,-116(fp)
 4003fc0:	e0ffe417 	ldw	r3,-112(fp)
 4003fc4:	19403fcc 	andi	r5,r3,255
 4003fc8:	10c00003 	ldbu	r3,0(r2)
 4003fcc:	1806703a 	and	r3,r3,zero
 4003fd0:	1809883a 	mov	r4,r3
 4003fd4:	2807883a 	mov	r3,r5
 4003fd8:	20c6b03a 	or	r3,r4,r3
 4003fdc:	10c00005 	stb	r3,0(r2)
 4003fe0:	e0ffe417 	ldw	r3,-112(fp)
 4003fe4:	1806d23a 	srli	r3,r3,8
 4003fe8:	19403fcc 	andi	r5,r3,255
 4003fec:	10c00043 	ldbu	r3,1(r2)
 4003ff0:	1806703a 	and	r3,r3,zero
 4003ff4:	1809883a 	mov	r4,r3
 4003ff8:	2807883a 	mov	r3,r5
 4003ffc:	20c6b03a 	or	r3,r4,r3
 4004000:	10c00045 	stb	r3,1(r2)
 4004004:	e0ffe417 	ldw	r3,-112(fp)
 4004008:	1806d43a 	srli	r3,r3,16
 400400c:	19403fcc 	andi	r5,r3,255
 4004010:	10c00083 	ldbu	r3,2(r2)
 4004014:	1806703a 	and	r3,r3,zero
 4004018:	1809883a 	mov	r4,r3
 400401c:	2807883a 	mov	r3,r5
 4004020:	20c6b03a 	or	r3,r4,r3
 4004024:	10c00085 	stb	r3,2(r2)
 4004028:	e0ffe417 	ldw	r3,-112(fp)
 400402c:	180ad63a 	srli	r5,r3,24
 4004030:	10c000c3 	ldbu	r3,3(r2)
 4004034:	1806703a 	and	r3,r3,zero
 4004038:	1809883a 	mov	r4,r3
 400403c:	2807883a 	mov	r3,r5
 4004040:	20c6b03a 	or	r3,r4,r3
 4004044:	10c000c5 	stb	r3,3(r2)

        if(rcode)
 4004048:	e0bfe103 	ldbu	r2,-124(fp)
 400404c:	1000e61e 	bne	r2,zero,40043e8 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
 4004050:	e0bfe217 	ldw	r2,-120(fp)
 4004054:	10c00203 	ldbu	r3,8(r2)
 4004058:	10800243 	ldbu	r2,9(r2)
 400405c:	1004923a 	slli	r2,r2,8
 4004060:	10c4b03a 	or	r2,r2,r3
 4004064:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
 4004068:	e0bfe217 	ldw	r2,-120(fp)
 400406c:	10c00283 	ldbu	r3,10(r2)
 4004070:	108002c3 	ldbu	r2,11(r2)
 4004074:	1004923a 	slli	r2,r2,8
 4004078:	10c4b03a 	or	r2,r2,r3
 400407c:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
 4004080:	e0bffc17 	ldw	r2,-16(fp)
 4004084:	10800017 	ldw	r2,0(r2)
 4004088:	10800604 	addi	r2,r2,24
 400408c:	10800017 	ldw	r2,0(r2)
 4004090:	e0ffe60b 	ldhu	r3,-104(fp)
 4004094:	e13fe68b 	ldhu	r4,-102(fp)
 4004098:	200d883a 	mov	r6,r4
 400409c:	180b883a 	mov	r5,r3
 40040a0:	e13ffc17 	ldw	r4,-16(fp)
 40040a4:	103ee83a 	callr	r2
 40040a8:	1080005c 	xori	r2,r2,1
 40040ac:	10803fcc 	andi	r2,r2,255
 40040b0:	1000d51e 	bne	r2,zero,4004408 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
 40040b4:	e0bfe517 	ldw	r2,-108(fp)
 40040b8:	10800017 	ldw	r2,0(r2)
 40040bc:	10800104 	addi	r2,r2,4
 40040c0:	10800017 	ldw	r2,0(r2)
 40040c4:	e0fffd03 	ldbu	r3,-12(fp)
 40040c8:	e13ffe03 	ldbu	r4,-8(fp)
 40040cc:	200f883a 	mov	r7,r4
 40040d0:	000d883a 	mov	r6,zero
 40040d4:	180b883a 	mov	r5,r3
 40040d8:	e13fe517 	ldw	r4,-108(fp)
 40040dc:	103ee83a 	callr	r2
 40040e0:	1007883a 	mov	r3,r2
 40040e4:	e0bffc17 	ldw	r2,-16(fp)
 40040e8:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
 40040ec:	e0bffc17 	ldw	r2,-16(fp)
 40040f0:	10800403 	ldbu	r2,16(r2)
 40040f4:	10803fcc 	andi	r2,r2,255
 40040f8:	1000021e 	bne	r2,zero,4004104 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 40040fc:	00bff504 	movi	r2,-44
 4004100:	0000cf06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
 4004104:	e0bfe217 	ldw	r2,-120(fp)
 4004108:	10c001c3 	ldbu	r3,7(r2)
 400410c:	e0bffc17 	ldw	r2,-16(fp)
 4004110:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
 4004114:	e0bffc17 	ldw	r2,-16(fp)
 4004118:	10c00317 	ldw	r3,12(r2)
 400411c:	e0bffc17 	ldw	r2,-16(fp)
 4004120:	10800403 	ldbu	r2,16(r2)
 4004124:	10803fcc 	andi	r2,r2,255
 4004128:	100f883a 	mov	r7,r2
 400412c:	000d883a 	mov	r6,zero
 4004130:	000b883a 	mov	r5,zero
 4004134:	1809883a 	mov	r4,r3
 4004138:	40032500 	call	4003250 <_ZN3USB7setAddrEhhh>
 400413c:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
 4004140:	e0bfe103 	ldbu	r2,-124(fp)
 4004144:	10001026 	beq	r2,zero,4004188 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
 4004148:	e0bfe317 	ldw	r2,-116(fp)
 400414c:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
 4004150:	e0bfe517 	ldw	r2,-108(fp)
 4004154:	10800017 	ldw	r2,0(r2)
 4004158:	10800204 	addi	r2,r2,8
 400415c:	10800017 	ldw	r2,0(r2)
 4004160:	e0fffc17 	ldw	r3,-16(fp)
 4004164:	18c00403 	ldbu	r3,16(r3)
 4004168:	18c03fcc 	andi	r3,r3,255
 400416c:	180b883a 	mov	r5,r3
 4004170:	e13fe517 	ldw	r4,-108(fp)
 4004174:	103ee83a 	callr	r2
                bAddress = 0;
 4004178:	e0bffc17 	ldw	r2,-16(fp)
 400417c:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
 4004180:	e0bfe103 	ldbu	r2,-124(fp)
 4004184:	0000ae06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
 4004188:	e0bfe317 	ldw	r2,-116(fp)
 400418c:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
 4004190:	e0bfe517 	ldw	r2,-108(fp)
 4004194:	10800017 	ldw	r2,0(r2)
 4004198:	10800017 	ldw	r2,0(r2)
 400419c:	e0fffc17 	ldw	r3,-16(fp)
 40041a0:	18c00403 	ldbu	r3,16(r3)
 40041a4:	18c03fcc 	andi	r3,r3,255
 40041a8:	180b883a 	mov	r5,r3
 40041ac:	e13fe517 	ldw	r4,-108(fp)
 40041b0:	103ee83a 	callr	r2
 40041b4:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
 40041b8:	e0bfe317 	ldw	r2,-116(fp)
 40041bc:	1000021e 	bne	r2,zero,40041c8 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40041c0:	00bff584 	movi	r2,-42
 40041c4:	00009e06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
 40041c8:	e0bfe317 	ldw	r2,-116(fp)
 40041cc:	e0ffff03 	ldbu	r3,-4(fp)
 40041d0:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
 40041d4:	e0bffc17 	ldw	r2,-16(fp)
 40041d8:	10c00317 	ldw	r3,12(r2)
 40041dc:	e0bffc17 	ldw	r2,-16(fp)
 40041e0:	10800403 	ldbu	r2,16(r2)
 40041e4:	11003fcc 	andi	r4,r2,255
 40041e8:	e0bffc17 	ldw	r2,-16(fp)
 40041ec:	10800444 	addi	r2,r2,17
 40041f0:	100f883a 	mov	r7,r2
 40041f4:	01800044 	movi	r6,1
 40041f8:	200b883a 	mov	r5,r4
 40041fc:	1809883a 	mov	r4,r3
 4004200:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 4004204:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 4004208:	e0bfe103 	ldbu	r2,-124(fp)
 400420c:	1000781e 	bne	r2,zero,40043f0 <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
 4004210:	e0bfe217 	ldw	r2,-120(fp)
 4004214:	10800443 	ldbu	r2,17(r2)
 4004218:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
 400421c:	e0bfe703 	ldbu	r2,-100(fp)
 4004220:	01402004 	movi	r5,128
 4004224:	1009883a 	mov	r4,r2
 4004228:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
 400422c:	e03fe145 	stb	zero,-123(fp)
 4004230:	e0ffe143 	ldbu	r3,-123(fp)
 4004234:	e0bfe703 	ldbu	r2,-100(fp)
 4004238:	1880222e 	bgeu	r3,r2,40042c4 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
 400423c:	e0bffc17 	ldw	r2,-16(fp)
 4004240:	10c00104 	addi	r3,r2,4
 4004244:	e0bfed04 	addi	r2,fp,-76
 4004248:	180b883a 	mov	r5,r3
 400424c:	1009883a 	mov	r4,r2
 4004250:	40056740 	call	4005674 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 4004254:	e0bffc17 	ldw	r2,-16(fp)
 4004258:	10c00317 	ldw	r3,12(r2)
 400425c:	e0bffc17 	ldw	r2,-16(fp)
 4004260:	10800403 	ldbu	r2,16(r2)
 4004264:	11003fcc 	andi	r4,r2,255
 4004268:	e17fe143 	ldbu	r5,-123(fp)
 400426c:	e0bfed04 	addi	r2,fp,-76
 4004270:	d8800015 	stw	r2,0(sp)
 4004274:	280f883a 	mov	r7,r5
 4004278:	000d883a 	mov	r6,zero
 400427c:	200b883a 	mov	r5,r4
 4004280:	1809883a 	mov	r4,r3
 4004284:	40030b00 	call	40030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 4004288:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
 400428c:	e0bfe103 	ldbu	r2,-124(fp)
 4004290:	10000226 	beq	r2,zero,400429c <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
 4004294:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 4004298:	00006206 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
 400429c:	e0bffc17 	ldw	r2,-16(fp)
 40042a0:	108006c3 	ldbu	r2,27(r2)
 40042a4:	10803fcc 	andi	r2,r2,255
 40042a8:	108000f0 	cmpltui	r2,r2,3
 40042ac:	10000426 	beq	r2,zero,40042c0 <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
 40042b0:	e0bfe143 	ldbu	r2,-123(fp)
 40042b4:	10800044 	addi	r2,r2,1
 40042b8:	e0bfe145 	stb	r2,-123(fp)
 40042bc:	003fdc06 	br	4004230 <__alt_mem_onchip_memory2_0+0xfc002fb0>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
 40042c0:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
 40042c4:	e0bffc17 	ldw	r2,-16(fp)
 40042c8:	108006c3 	ldbu	r2,27(r2)
 40042cc:	10803fcc 	andi	r2,r2,255
 40042d0:	108000e8 	cmpgeui	r2,r2,3
 40042d4:	10004e26 	beq	r2,zero,4004410 <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 40042d8:	e0bffc17 	ldw	r2,-16(fp)
 40042dc:	10c00317 	ldw	r3,12(r2)
 40042e0:	e0bffc17 	ldw	r2,-16(fp)
 40042e4:	10800403 	ldbu	r2,16(r2)
 40042e8:	11003fcc 	andi	r4,r2,255
 40042ec:	e0bffc17 	ldw	r2,-16(fp)
 40042f0:	108006c3 	ldbu	r2,27(r2)
 40042f4:	11403fcc 	andi	r5,r2,255
 40042f8:	e0bffc17 	ldw	r2,-16(fp)
 40042fc:	10800444 	addi	r2,r2,17
 4004300:	100f883a 	mov	r7,r2
 4004304:	280d883a 	mov	r6,r5
 4004308:	200b883a 	mov	r5,r4
 400430c:	1809883a 	mov	r4,r3
 4004310:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 4004314:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 4004318:	e0bfe103 	ldbu	r2,-124(fp)
 400431c:	1000361e 	bne	r2,zero,40043f8 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
 4004320:	01003204 	movi	r4,200
 4004324:	4000dd40 	call	4000dd4 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
 4004328:	e0bffc17 	ldw	r2,-16(fp)
 400432c:	10c00317 	ldw	r3,12(r2)
 4004330:	e0bffc17 	ldw	r2,-16(fp)
 4004334:	10800403 	ldbu	r2,16(r2)
 4004338:	11003fcc 	andi	r4,r2,255
 400433c:	e0bffc17 	ldw	r2,-16(fp)
 4004340:	10800443 	ldbu	r2,17(r2)
 4004344:	11403fcc 	andi	r5,r2,255
 4004348:	e0bffc17 	ldw	r2,-16(fp)
 400434c:	10800683 	ldbu	r2,26(r2)
 4004350:	10803fcc 	andi	r2,r2,255
 4004354:	100f883a 	mov	r7,r2
 4004358:	280d883a 	mov	r6,r5
 400435c:	200b883a 	mov	r5,r4
 4004360:	1809883a 	mov	r4,r3
 4004364:	40032e40 	call	40032e4 <_ZN3USB7setConfEhhh>
 4004368:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 400436c:	e0bfe103 	ldbu	r2,-124(fp)
 4004370:	1000231e 	bne	r2,zero,4004400 <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
 4004374:	01003204 	movi	r4,200
 4004378:	4000dd40 	call	4000dd4 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
 400437c:	e0bffc17 	ldw	r2,-16(fp)
 4004380:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
 4004384:	00800144 	movi	r2,5
 4004388:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
 400438c:	00800804 	movi	r2,32
 4004390:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
 4004394:	00800044 	movi	r2,1
 4004398:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
 400439c:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
 40043a0:	e0bfebc4 	addi	r2,fp,-81
 40043a4:	01800144 	movi	r6,5
 40043a8:	100b883a 	mov	r5,r2
 40043ac:	e13ffc17 	ldw	r4,-16(fp)
 40043b0:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>
 40043b4:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
 40043b8:	e0bfe103 	ldbu	r2,-124(fp)
 40043bc:	1000181e 	bne	r2,zero,4004420 <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
 40043c0:	e13ffc17 	ldw	r4,-16(fp)
 40043c4:	4004d680 	call	4004d68 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
 40043c8:	e0bffc17 	ldw	r2,-16(fp)
 40043cc:	00c00044 	movi	r3,1
 40043d0:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
 40043d4:	e0bffc17 	ldw	r2,-16(fp)
 40043d8:	00c00044 	movi	r3,1
 40043dc:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
 40043e0:	0005883a 	mov	r2,zero
 40043e4:	00001606 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
 40043e8:	0001883a 	nop
 40043ec:	00000d06 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
 40043f0:	0001883a 	nop
 40043f4:	00000b06 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
 40043f8:	0001883a 	nop
 40043fc:	00000906 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
 4004400:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 4004404:	00000706 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
 4004408:	0001883a 	nop
 400440c:	00000106 	br	4004414 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
 4004410:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 4004414:	00bff444 	movi	r2,-47
 4004418:	e0bfe105 	stb	r2,-124(fp)
 400441c:	00000106 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
 4004420:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 4004424:	e0bffc17 	ldw	r2,-16(fp)
 4004428:	10800017 	ldw	r2,0(r2)
 400442c:	10800204 	addi	r2,r2,8
 4004430:	10800017 	ldw	r2,0(r2)
 4004434:	e13ffc17 	ldw	r4,-16(fp)
 4004438:	103ee83a 	callr	r2
        return rcode;
 400443c:	e0bfe103 	ldbu	r2,-124(fp)
}
 4004440:	e037883a 	mov	sp,fp
 4004444:	dfc00117 	ldw	ra,4(sp)
 4004448:	df000017 	ldw	fp,0(sp)
 400444c:	dec00204 	addi	sp,sp,8
 4004450:	f800283a 	ret

04004454 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
 4004454:	defff904 	addi	sp,sp,-28
 4004458:	df000615 	stw	fp,24(sp)
 400445c:	df000604 	addi	fp,sp,24
 4004460:	e13ffb15 	stw	r4,-20(fp)
 4004464:	3009883a 	mov	r4,r6
 4004468:	3807883a 	mov	r3,r7
 400446c:	e0800117 	ldw	r2,4(fp)
 4004470:	e17ffc05 	stb	r5,-16(fp)
 4004474:	e13ffd05 	stb	r4,-12(fp)
 4004478:	e0fffe05 	stb	r3,-8(fp)
 400447c:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
 4004480:	e0bffb17 	ldw	r2,-20(fp)
 4004484:	e0fffc03 	ldbu	r3,-16(fp)
 4004488:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
 400448c:	e0800217 	ldw	r2,8(fp)
 4004490:	108000c3 	ldbu	r2,3(r2)
 4004494:	10803fcc 	andi	r2,r2,255
 4004498:	108000cc 	andi	r2,r2,3
 400449c:	108000d8 	cmpnei	r2,r2,3
 40044a0:	1000361e 	bne	r2,zero,400457c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
 40044a4:	e0800217 	ldw	r2,8(fp)
 40044a8:	10800083 	ldbu	r2,2(r2)
 40044ac:	10803fcc 	andi	r2,r2,255
 40044b0:	1080201c 	xori	r2,r2,128
 40044b4:	10bfe004 	addi	r2,r2,-128
 40044b8:	1000020e 	bge	r2,zero,40044c4 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
 40044bc:	00800084 	movi	r2,2
 40044c0:	00000106 	br	40044c8 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
 40044c4:	00800044 	movi	r2,1
 40044c8:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 40044cc:	e0fffa03 	ldbu	r3,-24(fp)
 40044d0:	e0800217 	ldw	r2,8(fp)
 40044d4:	10800083 	ldbu	r2,2(r2)
 40044d8:	108003cc 	andi	r2,r2,15
 40044dc:	100b883a 	mov	r5,r2
 40044e0:	e13ffb17 	ldw	r4,-20(fp)
 40044e4:	1805883a 	mov	r2,r3
 40044e8:	1085883a 	add	r2,r2,r2
 40044ec:	10c5883a 	add	r2,r2,r3
 40044f0:	2085883a 	add	r2,r4,r2
 40044f4:	10800444 	addi	r2,r2,17
 40044f8:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 40044fc:	e0fffa03 	ldbu	r3,-24(fp)
 4004500:	e0800217 	ldw	r2,8(fp)
 4004504:	11000103 	ldbu	r4,4(r2)
 4004508:	10800143 	ldbu	r2,5(r2)
 400450c:	1004923a 	slli	r2,r2,8
 4004510:	1104b03a 	or	r2,r2,r4
 4004514:	100b883a 	mov	r5,r2
 4004518:	e13ffb17 	ldw	r4,-20(fp)
 400451c:	1805883a 	mov	r2,r3
 4004520:	1085883a 	add	r2,r2,r2
 4004524:	10c5883a 	add	r2,r2,r3
 4004528:	2085883a 	add	r2,r4,r2
 400452c:	10800484 	addi	r2,r2,18
 4004530:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 4004534:	e0bffb17 	ldw	r2,-20(fp)
 4004538:	10c00903 	ldbu	r3,36(r2)
 400453c:	e0800217 	ldw	r2,8(fp)
 4004540:	10800183 	ldbu	r2,6(r2)
 4004544:	18c03fcc 	andi	r3,r3,255
 4004548:	10803fcc 	andi	r2,r2,255
 400454c:	1880042e 	bgeu	r3,r2,4004560 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
 4004550:	e0800217 	ldw	r2,8(fp)
 4004554:	10c00183 	ldbu	r3,6(r2)
 4004558:	e0bffb17 	ldw	r2,-20(fp)
 400455c:	10c00905 	stb	r3,36(r2)
        bNumEP++;
 4004560:	e0bffb17 	ldw	r2,-20(fp)
 4004564:	108006c3 	ldbu	r2,27(r2)
 4004568:	10800044 	addi	r2,r2,1
 400456c:	1007883a 	mov	r3,r2
 4004570:	e0bffb17 	ldw	r2,-20(fp)
 4004574:	10c006c5 	stb	r3,27(r2)
 4004578:	00000106 	br	4004580 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
 400457c:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
 4004580:	e037883a 	mov	sp,fp
 4004584:	df000017 	ldw	fp,0(sp)
 4004588:	dec00104 	addi	sp,sp,4
 400458c:	f800283a 	ret

04004590 <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 4004590:	213fff04 	addi	r4,r4,-4
 4004594:	40044541 	jmpi	4004454 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

04004598 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
 4004598:	defffd04 	addi	sp,sp,-12
 400459c:	df000215 	stw	fp,8(sp)
 40045a0:	df000204 	addi	fp,sp,8
 40045a4:	e13ffe15 	stw	r4,-8(fp)
 40045a8:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
 40045ac:	0001883a 	nop
 40045b0:	e037883a 	mov	sp,fp
 40045b4:	df000017 	ldw	fp,0(sp)
 40045b8:	dec00104 	addi	sp,sp,4
 40045bc:	f800283a 	ret

040045c0 <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
 40045c0:	defffd04 	addi	sp,sp,-12
 40045c4:	dfc00215 	stw	ra,8(sp)
 40045c8:	df000115 	stw	fp,4(sp)
 40045cc:	df000104 	addi	fp,sp,4
 40045d0:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
 40045d4:	e0bfff17 	ldw	r2,-4(fp)
 40045d8:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
 40045dc:	e0bfff17 	ldw	r2,-4(fp)
 40045e0:	10800317 	ldw	r2,12(r2)
 40045e4:	1009883a 	mov	r4,r2
 40045e8:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 40045ec:	1009883a 	mov	r4,r2
 40045f0:	20800017 	ldw	r2,0(r4)
 40045f4:	10800204 	addi	r2,r2,8
 40045f8:	10800017 	ldw	r2,0(r2)
 40045fc:	e0ffff17 	ldw	r3,-4(fp)
 4004600:	18c00403 	ldbu	r3,16(r3)
 4004604:	18c03fcc 	andi	r3,r3,255
 4004608:	180b883a 	mov	r5,r3
 400460c:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
 4004610:	e0bfff17 	ldw	r2,-4(fp)
 4004614:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
 4004618:	e0bfff17 	ldw	r2,-4(fp)
 400461c:	00c00044 	movi	r3,1
 4004620:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
 4004624:	e0bfff17 	ldw	r2,-4(fp)
 4004628:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
 400462c:	e0bfff17 	ldw	r2,-4(fp)
 4004630:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
 4004634:	e0bfff17 	ldw	r2,-4(fp)
 4004638:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
 400463c:	0005883a 	mov	r2,zero
}
 4004640:	e037883a 	mov	sp,fp
 4004644:	dfc00117 	ldw	ra,4(sp)
 4004648:	df000017 	ldw	fp,0(sp)
 400464c:	dec00204 	addi	sp,sp,8
 4004650:	f800283a 	ret

04004654 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
 4004654:	defffa04 	addi	sp,sp,-24
 4004658:	dfc00515 	stw	ra,20(sp)
 400465c:	df000415 	stw	fp,16(sp)
 4004660:	df000404 	addi	fp,sp,16
 4004664:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
 4004668:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
 400466c:	e0bfff17 	ldw	r2,-4(fp)
 4004670:	10800943 	ldbu	r2,37(r2)
 4004674:	1080005c 	xori	r2,r2,1
 4004678:	10803fcc 	andi	r2,r2,255
 400467c:	10000226 	beq	r2,zero,4004688 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
 4004680:	0005883a 	mov	r2,zero
 4004684:	00002c06 	br	4004738 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
 4004688:	4000e2c0 	call	4000e2c <_Z6millisv>
 400468c:	1007883a 	mov	r3,r2
 4004690:	e0bfff17 	ldw	r2,-4(fp)
 4004694:	10800717 	ldw	r2,28(r2)
 4004698:	1885c83a 	sub	r2,r3,r2
 400469c:	0084303a 	nor	r2,zero,r2
 40046a0:	1004d7fa 	srli	r2,r2,31
 40046a4:	10803fcc 	andi	r2,r2,255
 40046a8:	10002226 	beq	r2,zero,4004734 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 40046ac:	4000e2c0 	call	4000e2c <_Z6millisv>
 40046b0:	1007883a 	mov	r3,r2
 40046b4:	e0bfff17 	ldw	r2,-4(fp)
 40046b8:	10800903 	ldbu	r2,36(r2)
 40046bc:	10803fcc 	andi	r2,r2,255
 40046c0:	1887883a 	add	r3,r3,r2
 40046c4:	e0bfff17 	ldw	r2,-4(fp)
 40046c8:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
 40046cc:	e0bfff17 	ldw	r2,-4(fp)
 40046d0:	10800603 	ldbu	r2,24(r2)
 40046d4:	10803fcc 	andi	r2,r2,255
 40046d8:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
 40046dc:	e0bfff17 	ldw	r2,-4(fp)
 40046e0:	11000317 	ldw	r4,12(r2)
 40046e4:	e0bfff17 	ldw	r2,-4(fp)
 40046e8:	10800403 	ldbu	r2,16(r2)
 40046ec:	11403fcc 	andi	r5,r2,255
 40046f0:	e0bfff17 	ldw	r2,-4(fp)
 40046f4:	108005c3 	ldbu	r2,23(r2)
 40046f8:	11803fcc 	andi	r6,r2,255
 40046fc:	e0bfff17 	ldw	r2,-4(fp)
 4004700:	10800f84 	addi	r2,r2,62
 4004704:	e0ffff17 	ldw	r3,-4(fp)
 4004708:	18c00903 	ldbu	r3,36(r3)
 400470c:	18c03fcc 	andi	r3,r3,255
 4004710:	e1fffe84 	addi	r7,fp,-6
 4004714:	d8c00115 	stw	r3,4(sp)
 4004718:	d8800015 	stw	r2,0(sp)
 400471c:	40015fc0 	call	40015fc <_ZN3USB10inTransferEhhPtPhh>
 4004720:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
 4004724:	e0bffe43 	ldbu	r2,-7(fp)
 4004728:	1000021e 	bne	r2,zero,4004734 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
 400472c:	e13fff17 	ldw	r4,-4(fp)
 4004730:	400474c0 	call	400474c <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
 4004734:	e0bffe03 	ldbu	r2,-8(fp)
}
 4004738:	e037883a 	mov	sp,fp
 400473c:	dfc00117 	ldw	ra,4(sp)
 4004740:	df000017 	ldw	fp,0(sp)
 4004744:	dec00204 	addi	sp,sp,8
 4004748:	f800283a 	ret

0400474c <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
 400474c:	defffd04 	addi	sp,sp,-12
 4004750:	df000215 	stw	fp,8(sp)
 4004754:	df000204 	addi	fp,sp,8
 4004758:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
 400475c:	e0bfff17 	ldw	r2,-4(fp)
 4004760:	10800f83 	ldbu	r2,62(r2)
 4004764:	10803fcc 	andi	r2,r2,255
 4004768:	108001d8 	cmpnei	r2,r2,7
 400476c:	10002f1e 	bne	r2,zero,400482c <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
 4004770:	e0bfff17 	ldw	r2,-4(fp)
 4004774:	10801083 	ldbu	r2,66(r2)
 4004778:	10803fcc 	andi	r2,r2,255
 400477c:	10800058 	cmpnei	r2,r2,1
 4004780:	10000a1e 	bne	r2,zero,40047ac <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
 4004784:	e0bfff17 	ldw	r2,-4(fp)
 4004788:	10c0098b 	ldhu	r3,38(r2)
 400478c:	008100b4 	movhi	r2,1026
 4004790:	10808584 	addi	r2,r2,534
 4004794:	1080000b 	ldhu	r2,0(r2)
 4004798:	1884b03a 	or	r2,r3,r2
 400479c:	1007883a 	mov	r3,r2
 40047a0:	e0bfff17 	ldw	r2,-4(fp)
 40047a4:	10c0098d 	sth	r3,38(r2)
 40047a8:	00000b06 	br	40047d8 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
 40047ac:	e0bfff17 	ldw	r2,-4(fp)
 40047b0:	1080098b 	ldhu	r2,38(r2)
 40047b4:	1007883a 	mov	r3,r2
 40047b8:	008100b4 	movhi	r2,1026
 40047bc:	10808584 	addi	r2,r2,534
 40047c0:	1080000b 	ldhu	r2,0(r2)
 40047c4:	0084303a 	nor	r2,zero,r2
 40047c8:	1884703a 	and	r2,r3,r2
 40047cc:	1007883a 	mov	r3,r2
 40047d0:	e0bfff17 	ldw	r2,-4(fp)
 40047d4:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
 40047d8:	e0bfff17 	ldw	r2,-4(fp)
 40047dc:	10c0098b 	ldhu	r3,38(r2)
 40047e0:	e0bfff17 	ldw	r2,-4(fp)
 40047e4:	10800a0b 	ldhu	r2,40(r2)
 40047e8:	18ffffcc 	andi	r3,r3,65535
 40047ec:	10bfffcc 	andi	r2,r2,65535
 40047f0:	18800e26 	beq	r3,r2,400482c <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
 40047f4:	e0bfff17 	ldw	r2,-4(fp)
 40047f8:	1080098b 	ldhu	r2,38(r2)
 40047fc:	1007883a 	mov	r3,r2
 4004800:	e0bfff17 	ldw	r2,-4(fp)
 4004804:	10800a0b 	ldhu	r2,40(r2)
 4004808:	0084303a 	nor	r2,zero,r2
 400480c:	1884703a 	and	r2,r3,r2
 4004810:	1007883a 	mov	r3,r2
 4004814:	e0bfff17 	ldw	r2,-4(fp)
 4004818:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
 400481c:	e0bfff17 	ldw	r2,-4(fp)
 4004820:	10c0098b 	ldhu	r3,38(r2)
 4004824:	e0bfff17 	ldw	r2,-4(fp)
 4004828:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
 400482c:	e0bfff17 	ldw	r2,-4(fp)
 4004830:	10800f83 	ldbu	r2,62(r2)
 4004834:	10803fcc 	andi	r2,r2,255
 4004838:	10800820 	cmpeqi	r2,r2,32
 400483c:	1000b026 	beq	r2,zero,4004b00 <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
 4004840:	e0bfff17 	ldw	r2,-4(fp)
 4004844:	10c0098b 	ldhu	r3,38(r2)
 4004848:	008100b4 	movhi	r2,1026
 400484c:	10808584 	addi	r2,r2,534
 4004850:	1080000b 	ldhu	r2,0(r2)
 4004854:	1884703a 	and	r2,r3,r2
 4004858:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
 400485c:	e0bfff17 	ldw	r2,-4(fp)
 4004860:	108010c3 	ldbu	r2,67(r2)
 4004864:	10803fcc 	andi	r2,r2,255
 4004868:	108003cc 	andi	r2,r2,15
 400486c:	1004923a 	slli	r2,r2,8
 4004870:	1007883a 	mov	r3,r2
 4004874:	e0bffe0b 	ldhu	r2,-8(fp)
 4004878:	1884b03a 	or	r2,r3,r2
 400487c:	1007883a 	mov	r3,r2
 4004880:	e0bfff17 	ldw	r2,-4(fp)
 4004884:	10801083 	ldbu	r2,66(r2)
 4004888:	10803fcc 	andi	r2,r2,255
 400488c:	10803c0c 	andi	r2,r2,240
 4004890:	1884b03a 	or	r2,r3,r2
 4004894:	1007883a 	mov	r3,r2
 4004898:	e0bfff17 	ldw	r2,-4(fp)
 400489c:	10801083 	ldbu	r2,66(r2)
 40048a0:	10803fcc 	andi	r2,r2,255
 40048a4:	1080030c 	andi	r2,r2,12
 40048a8:	100492ba 	slli	r2,r2,10
 40048ac:	1884b03a 	or	r2,r3,r2
 40048b0:	1007883a 	mov	r3,r2
 40048b4:	e0bfff17 	ldw	r2,-4(fp)
 40048b8:	10801083 	ldbu	r2,66(r2)
 40048bc:	10803fcc 	andi	r2,r2,255
 40048c0:	1080004c 	andi	r2,r2,1
 40048c4:	100490fa 	slli	r2,r2,3
 40048c8:	1884b03a 	or	r2,r3,r2
 40048cc:	1007883a 	mov	r3,r2
 40048d0:	e0bfff17 	ldw	r2,-4(fp)
 40048d4:	108010c3 	ldbu	r2,67(r2)
 40048d8:	10803fcc 	andi	r2,r2,255
 40048dc:	1080300c 	andi	r2,r2,192
 40048e0:	1004923a 	slli	r2,r2,8
 40048e4:	1884b03a 	or	r2,r3,r2
 40048e8:	1007883a 	mov	r3,r2
 40048ec:	e0bfff17 	ldw	r2,-4(fp)
 40048f0:	108010c3 	ldbu	r2,67(r2)
 40048f4:	10803fcc 	andi	r2,r2,255
 40048f8:	10800c0c 	andi	r2,r2,48
 40048fc:	1005d13a 	srai	r2,r2,4
 4004900:	1884b03a 	or	r2,r3,r2
 4004904:	1007883a 	mov	r3,r2
 4004908:	e0bfff17 	ldw	r2,-4(fp)
 400490c:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
 4004910:	e0bfff17 	ldw	r2,-4(fp)
 4004914:	10801143 	ldbu	r2,69(r2)
 4004918:	10803fcc 	andi	r2,r2,255
 400491c:	1004923a 	slli	r2,r2,8
 4004920:	1007883a 	mov	r3,r2
 4004924:	e0bfff17 	ldw	r2,-4(fp)
 4004928:	10801103 	ldbu	r2,68(r2)
 400492c:	10803fcc 	andi	r2,r2,255
 4004930:	1884b03a 	or	r2,r3,r2
 4004934:	1007883a 	mov	r3,r2
 4004938:	e0bfff17 	ldw	r2,-4(fp)
 400493c:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
 4004940:	e0bfff17 	ldw	r2,-4(fp)
 4004944:	108011c3 	ldbu	r2,71(r2)
 4004948:	10803fcc 	andi	r2,r2,255
 400494c:	1004923a 	slli	r2,r2,8
 4004950:	1007883a 	mov	r3,r2
 4004954:	e0bfff17 	ldw	r2,-4(fp)
 4004958:	10801183 	ldbu	r2,70(r2)
 400495c:	10803fcc 	andi	r2,r2,255
 4004960:	1884b03a 	or	r2,r3,r2
 4004964:	1007883a 	mov	r3,r2
 4004968:	e0bfff17 	ldw	r2,-4(fp)
 400496c:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
 4004970:	e0bfff17 	ldw	r2,-4(fp)
 4004974:	10801243 	ldbu	r2,73(r2)
 4004978:	10803fcc 	andi	r2,r2,255
 400497c:	1004923a 	slli	r2,r2,8
 4004980:	1007883a 	mov	r3,r2
 4004984:	e0bfff17 	ldw	r2,-4(fp)
 4004988:	10801203 	ldbu	r2,72(r2)
 400498c:	10803fcc 	andi	r2,r2,255
 4004990:	1884b03a 	or	r2,r3,r2
 4004994:	1007883a 	mov	r3,r2
 4004998:	e0bfff17 	ldw	r2,-4(fp)
 400499c:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
 40049a0:	e0bfff17 	ldw	r2,-4(fp)
 40049a4:	108012c3 	ldbu	r2,75(r2)
 40049a8:	10803fcc 	andi	r2,r2,255
 40049ac:	1004923a 	slli	r2,r2,8
 40049b0:	1007883a 	mov	r3,r2
 40049b4:	e0bfff17 	ldw	r2,-4(fp)
 40049b8:	10801283 	ldbu	r2,74(r2)
 40049bc:	10803fcc 	andi	r2,r2,255
 40049c0:	1884b03a 	or	r2,r3,r2
 40049c4:	1007883a 	mov	r3,r2
 40049c8:	e0bfff17 	ldw	r2,-4(fp)
 40049cc:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
 40049d0:	e0bfff17 	ldw	r2,-4(fp)
 40049d4:	10801343 	ldbu	r2,77(r2)
 40049d8:	10803fcc 	andi	r2,r2,255
 40049dc:	1004923a 	slli	r2,r2,8
 40049e0:	1007883a 	mov	r3,r2
 40049e4:	e0bfff17 	ldw	r2,-4(fp)
 40049e8:	10801303 	ldbu	r2,76(r2)
 40049ec:	10803fcc 	andi	r2,r2,255
 40049f0:	1884b03a 	or	r2,r3,r2
 40049f4:	1007883a 	mov	r3,r2
 40049f8:	e0bfff17 	ldw	r2,-4(fp)
 40049fc:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
 4004a00:	e0bfff17 	ldw	r2,-4(fp)
 4004a04:	108013c3 	ldbu	r2,79(r2)
 4004a08:	10803fcc 	andi	r2,r2,255
 4004a0c:	1004923a 	slli	r2,r2,8
 4004a10:	1007883a 	mov	r3,r2
 4004a14:	e0bfff17 	ldw	r2,-4(fp)
 4004a18:	10801383 	ldbu	r2,78(r2)
 4004a1c:	10803fcc 	andi	r2,r2,255
 4004a20:	1884b03a 	or	r2,r3,r2
 4004a24:	1007883a 	mov	r3,r2
 4004a28:	e0bfff17 	ldw	r2,-4(fp)
 4004a2c:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
 4004a30:	e0bfff17 	ldw	r2,-4(fp)
 4004a34:	10c0098b 	ldhu	r3,38(r2)
 4004a38:	e0bfff17 	ldw	r2,-4(fp)
 4004a3c:	10800a0b 	ldhu	r2,40(r2)
 4004a40:	18ffffcc 	andi	r3,r3,65535
 4004a44:	10bfffcc 	andi	r2,r2,65535
 4004a48:	18800e26 	beq	r3,r2,4004a84 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
 4004a4c:	e0bfff17 	ldw	r2,-4(fp)
 4004a50:	1080098b 	ldhu	r2,38(r2)
 4004a54:	1007883a 	mov	r3,r2
 4004a58:	e0bfff17 	ldw	r2,-4(fp)
 4004a5c:	10800a0b 	ldhu	r2,40(r2)
 4004a60:	0084303a 	nor	r2,zero,r2
 4004a64:	1884703a 	and	r2,r3,r2
 4004a68:	1007883a 	mov	r3,r2
 4004a6c:	e0bfff17 	ldw	r2,-4(fp)
 4004a70:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
 4004a74:	e0bfff17 	ldw	r2,-4(fp)
 4004a78:	10c0098b 	ldhu	r3,38(r2)
 4004a7c:	e0bfff17 	ldw	r2,-4(fp)
 4004a80:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
 4004a84:	e0bfff17 	ldw	r2,-4(fp)
 4004a88:	10800d0b 	ldhu	r2,52(r2)
 4004a8c:	10bfffcc 	andi	r2,r2,65535
 4004a90:	10000726 	beq	r2,zero,4004ab0 <_ZN7XBOXONE10readReportEv+0x364>
 4004a94:	e0bfff17 	ldw	r2,-4(fp)
 4004a98:	10800e0b 	ldhu	r2,56(r2)
 4004a9c:	10bfffcc 	andi	r2,r2,65535
 4004aa0:	1000031e 	bne	r2,zero,4004ab0 <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
 4004aa4:	e0bfff17 	ldw	r2,-4(fp)
 4004aa8:	00c00044 	movi	r3,1
 4004aac:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
 4004ab0:	e0bfff17 	ldw	r2,-4(fp)
 4004ab4:	10c00d0b 	ldhu	r3,52(r2)
 4004ab8:	e0bfff17 	ldw	r2,-4(fp)
 4004abc:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
 4004ac0:	e0bfff17 	ldw	r2,-4(fp)
 4004ac4:	10800d8b 	ldhu	r2,54(r2)
 4004ac8:	10bfffcc 	andi	r2,r2,65535
 4004acc:	10000726 	beq	r2,zero,4004aec <_ZN7XBOXONE10readReportEv+0x3a0>
 4004ad0:	e0bfff17 	ldw	r2,-4(fp)
 4004ad4:	10800e8b 	ldhu	r2,58(r2)
 4004ad8:	10bfffcc 	andi	r2,r2,65535
 4004adc:	1000031e 	bne	r2,zero,4004aec <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
 4004ae0:	e0bfff17 	ldw	r2,-4(fp)
 4004ae4:	00c00044 	movi	r3,1
 4004ae8:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
 4004aec:	e0bfff17 	ldw	r2,-4(fp)
 4004af0:	10c00d8b 	ldhu	r3,54(r2)
 4004af4:	e0bfff17 	ldw	r2,-4(fp)
 4004af8:	10c00e8d 	sth	r3,58(r2)
 4004afc:	00000106 	br	4004b04 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
 4004b00:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
 4004b04:	e037883a 	mov	sp,fp
 4004b08:	df000017 	ldw	fp,0(sp)
 4004b0c:	dec00104 	addi	sp,sp,4
 4004b10:	f800283a 	ret

04004b14 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
 4004b14:	defffd04 	addi	sp,sp,-12
 4004b18:	df000215 	stw	fp,8(sp)
 4004b1c:	df000204 	addi	fp,sp,8
 4004b20:	e13ffe15 	stw	r4,-8(fp)
 4004b24:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
 4004b28:	e0bfff17 	ldw	r2,-4(fp)
 4004b2c:	10800218 	cmpnei	r2,r2,8
 4004b30:	1000031e 	bne	r2,zero,4004b40 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
 4004b34:	e0bffe17 	ldw	r2,-8(fp)
 4004b38:	10800d0b 	ldhu	r2,52(r2)
 4004b3c:	00001306 	br	4004b8c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
 4004b40:	e0bfff17 	ldw	r2,-4(fp)
 4004b44:	10800258 	cmpnei	r2,r2,9
 4004b48:	1000031e 	bne	r2,zero,4004b58 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
 4004b4c:	e0bffe17 	ldw	r2,-8(fp)
 4004b50:	10800d8b 	ldhu	r2,54(r2)
 4004b54:	00000d06 	br	4004b8c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
 4004b58:	e0bffe17 	ldw	r2,-8(fp)
 4004b5c:	10c0098b 	ldhu	r3,38(r2)
 4004b60:	e0bfff17 	ldw	r2,-4(fp)
 4004b64:	10803fcc 	andi	r2,r2,255
 4004b68:	1089883a 	add	r4,r2,r2
 4004b6c:	008100b4 	movhi	r2,1026
 4004b70:	10807d84 	addi	r2,r2,502
 4004b74:	2085883a 	add	r2,r4,r2
 4004b78:	1080000b 	ldhu	r2,0(r2)
 4004b7c:	1884703a 	and	r2,r3,r2
 4004b80:	10bfffcc 	andi	r2,r2,65535
 4004b84:	1004c03a 	cmpne	r2,r2,zero
 4004b88:	10803fcc 	andi	r2,r2,255
}
 4004b8c:	e037883a 	mov	sp,fp
 4004b90:	df000017 	ldw	fp,0(sp)
 4004b94:	dec00104 	addi	sp,sp,4
 4004b98:	f800283a 	ret

04004b9c <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
 4004b9c:	defffc04 	addi	sp,sp,-16
 4004ba0:	df000315 	stw	fp,12(sp)
 4004ba4:	df000304 	addi	fp,sp,12
 4004ba8:	e13ffe15 	stw	r4,-8(fp)
 4004bac:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
 4004bb0:	e0bfff17 	ldw	r2,-4(fp)
 4004bb4:	10800218 	cmpnei	r2,r2,8
 4004bb8:	10000a1e 	bne	r2,zero,4004be4 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
 4004bbc:	e0bffe17 	ldw	r2,-8(fp)
 4004bc0:	10800f03 	ldbu	r2,60(r2)
 4004bc4:	10803fcc 	andi	r2,r2,255
 4004bc8:	10000426 	beq	r2,zero,4004bdc <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
 4004bcc:	e0bffe17 	ldw	r2,-8(fp)
 4004bd0:	10000f05 	stb	zero,60(r2)
                        return true;
 4004bd4:	00800044 	movi	r2,1
 4004bd8:	00002806 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
 4004bdc:	0005883a 	mov	r2,zero
 4004be0:	00002606 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
 4004be4:	e0bfff17 	ldw	r2,-4(fp)
 4004be8:	10800258 	cmpnei	r2,r2,9
 4004bec:	10000a1e 	bne	r2,zero,4004c18 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
 4004bf0:	e0bffe17 	ldw	r2,-8(fp)
 4004bf4:	10800f43 	ldbu	r2,61(r2)
 4004bf8:	10803fcc 	andi	r2,r2,255
 4004bfc:	10000426 	beq	r2,zero,4004c10 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
 4004c00:	e0bffe17 	ldw	r2,-8(fp)
 4004c04:	10000f45 	stb	zero,61(r2)
                        return true;
 4004c08:	00800044 	movi	r2,1
 4004c0c:	00001b06 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
 4004c10:	0005883a 	mov	r2,zero
 4004c14:	00001906 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
 4004c18:	e0bfff17 	ldw	r2,-4(fp)
 4004c1c:	10803fcc 	andi	r2,r2,255
 4004c20:	1087883a 	add	r3,r2,r2
 4004c24:	008100b4 	movhi	r2,1026
 4004c28:	10807d84 	addi	r2,r2,502
 4004c2c:	1885883a 	add	r2,r3,r2
 4004c30:	1080000b 	ldhu	r2,0(r2)
 4004c34:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
 4004c38:	e0bffe17 	ldw	r2,-8(fp)
 4004c3c:	10c00a8b 	ldhu	r3,42(r2)
 4004c40:	e0bffd0b 	ldhu	r2,-12(fp)
 4004c44:	1884703a 	and	r2,r3,r2
 4004c48:	10bfffcc 	andi	r2,r2,65535
 4004c4c:	1004c03a 	cmpne	r2,r2,zero
 4004c50:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
 4004c54:	e0bffe17 	ldw	r2,-8(fp)
 4004c58:	10800a8b 	ldhu	r2,42(r2)
 4004c5c:	1007883a 	mov	r3,r2
 4004c60:	e0bffd0b 	ldhu	r2,-12(fp)
 4004c64:	0084303a 	nor	r2,zero,r2
 4004c68:	1884703a 	and	r2,r3,r2
 4004c6c:	1007883a 	mov	r3,r2
 4004c70:	e0bffe17 	ldw	r2,-8(fp)
 4004c74:	10c00a8d 	sth	r3,42(r2)
        return click;
 4004c78:	e0bffd83 	ldbu	r2,-10(fp)
}
 4004c7c:	e037883a 	mov	sp,fp
 4004c80:	df000017 	ldw	fp,0(sp)
 4004c84:	dec00104 	addi	sp,sp,4
 4004c88:	f800283a 	ret

04004c8c <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
 4004c8c:	defffd04 	addi	sp,sp,-12
 4004c90:	df000215 	stw	fp,8(sp)
 4004c94:	df000204 	addi	fp,sp,8
 4004c98:	e13ffe15 	stw	r4,-8(fp)
 4004c9c:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
 4004ca0:	e0bfff17 	ldw	r2,-4(fp)
 4004ca4:	e0fffe17 	ldw	r3,-8(fp)
 4004ca8:	10800584 	addi	r2,r2,22
 4004cac:	1085883a 	add	r2,r2,r2
 4004cb0:	1885883a 	add	r2,r3,r2
 4004cb4:	1080000b 	ldhu	r2,0(r2)
}
 4004cb8:	e037883a 	mov	sp,fp
 4004cbc:	df000017 	ldw	fp,0(sp)
 4004cc0:	dec00104 	addi	sp,sp,4
 4004cc4:	f800283a 	ret

04004cc8 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
 4004cc8:	defff904 	addi	sp,sp,-28
 4004ccc:	dfc00615 	stw	ra,24(sp)
 4004cd0:	df000515 	stw	fp,20(sp)
 4004cd4:	df000504 	addi	fp,sp,20
 4004cd8:	e13ffd15 	stw	r4,-12(fp)
 4004cdc:	e17ffe15 	stw	r5,-8(fp)
 4004ce0:	3005883a 	mov	r2,r6
 4004ce4:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
 4004ce8:	e0bffe17 	ldw	r2,-8(fp)
 4004cec:	10c00084 	addi	r3,r2,2
 4004cf0:	e0bffd17 	ldw	r2,-12(fp)
 4004cf4:	10801f83 	ldbu	r2,126(r2)
 4004cf8:	11000044 	addi	r4,r2,1
 4004cfc:	200b883a 	mov	r5,r4
 4004d00:	e13ffd17 	ldw	r4,-12(fp)
 4004d04:	21401f85 	stb	r5,126(r4)
 4004d08:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
 4004d0c:	e0bffd17 	ldw	r2,-12(fp)
 4004d10:	10c00317 	ldw	r3,12(r2)
 4004d14:	e0bffd17 	ldw	r2,-12(fp)
 4004d18:	10800403 	ldbu	r2,16(r2)
 4004d1c:	11003fcc 	andi	r4,r2,255
 4004d20:	e0bffd17 	ldw	r2,-12(fp)
 4004d24:	10800503 	ldbu	r2,20(r2)
 4004d28:	11403fcc 	andi	r5,r2,255
 4004d2c:	e1bfff0b 	ldhu	r6,-4(fp)
 4004d30:	e0bffe17 	ldw	r2,-8(fp)
 4004d34:	d8800015 	stw	r2,0(sp)
 4004d38:	300f883a 	mov	r7,r6
 4004d3c:	280d883a 	mov	r6,r5
 4004d40:	200b883a 	mov	r5,r4
 4004d44:	1809883a 	mov	r4,r3
 4004d48:	40019900 	call	4001990 <_ZN3USB11outTransferEhhtPh>
 4004d4c:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
 4004d50:	e0bffc03 	ldbu	r2,-16(fp)
}
 4004d54:	e037883a 	mov	sp,fp
 4004d58:	dfc00117 	ldw	ra,4(sp)
 4004d5c:	df000017 	ldw	fp,0(sp)
 4004d60:	dec00204 	addi	sp,sp,8
 4004d64:	f800283a 	ret

04004d68 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
 4004d68:	defff904 	addi	sp,sp,-28
 4004d6c:	dfc00615 	stw	ra,24(sp)
 4004d70:	df000515 	stw	fp,20(sp)
 4004d74:	df000504 	addi	fp,sp,20
 4004d78:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004d7c:	00800244 	movi	r2,9
 4004d80:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
 4004d84:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004d88:	00800244 	movi	r2,9
 4004d8c:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
 4004d90:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004d94:	008003c4 	movi	r2,15
 4004d98:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
 4004d9c:	00800104 	movi	r2,4
 4004da0:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
 4004da4:	00800104 	movi	r2,4
 4004da8:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
 4004dac:	00800804 	movi	r2,32
 4004db0:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
 4004db4:	00800804 	movi	r2,32
 4004db8:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
 4004dbc:	00bfe004 	movi	r2,-128
 4004dc0:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
 4004dc4:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
 4004dc8:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
 4004dcc:	01800344 	movi	r6,13
 4004dd0:	e17ffb04 	addi	r5,fp,-20
 4004dd4:	e13fff17 	ldw	r4,-4(fp)
 4004dd8:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
 4004ddc:	e0bfff17 	ldw	r2,-4(fp)
 4004de0:	10800817 	ldw	r2,32(r2)
 4004de4:	10000326 	beq	r2,zero,4004df4 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
 4004de8:	e0bfff17 	ldw	r2,-4(fp)
 4004dec:	10800817 	ldw	r2,32(r2)
 4004df0:	103ee83a 	callr	r2
}
 4004df4:	0001883a 	nop
 4004df8:	e037883a 	mov	sp,fp
 4004dfc:	dfc00117 	ldw	ra,4(sp)
 4004e00:	df000017 	ldw	fp,0(sp)
 4004e04:	dec00204 	addi	sp,sp,8
 4004e08:	f800283a 	ret

04004e0c <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
 4004e0c:	defff904 	addi	sp,sp,-28
 4004e10:	dfc00615 	stw	ra,24(sp)
 4004e14:	df000515 	stw	fp,20(sp)
 4004e18:	df000504 	addi	fp,sp,20
 4004e1c:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004e20:	00800244 	movi	r2,9
 4004e24:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
 4004e28:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004e2c:	00800244 	movi	r2,9
 4004e30:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
 4004e34:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004e38:	008003c4 	movi	r2,15
 4004e3c:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
 4004e40:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
 4004e44:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
 4004e48:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
 4004e4c:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
 4004e50:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
 4004e54:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
 4004e58:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
 4004e5c:	01800344 	movi	r6,13
 4004e60:	e17ffb04 	addi	r5,fp,-20
 4004e64:	e13fff17 	ldw	r4,-4(fp)
 4004e68:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>
}
 4004e6c:	0001883a 	nop
 4004e70:	e037883a 	mov	sp,fp
 4004e74:	dfc00117 	ldw	ra,4(sp)
 4004e78:	df000017 	ldw	fp,0(sp)
 4004e7c:	dec00204 	addi	sp,sp,8
 4004e80:	f800283a 	ret

04004e84 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
 4004e84:	defff504 	addi	sp,sp,-44
 4004e88:	dfc00a15 	stw	ra,40(sp)
 4004e8c:	df000915 	stw	fp,36(sp)
 4004e90:	df000904 	addi	fp,sp,36
 4004e94:	e13ffb15 	stw	r4,-20(fp)
 4004e98:	3009883a 	mov	r4,r6
 4004e9c:	3807883a 	mov	r3,r7
 4004ea0:	e0800217 	ldw	r2,8(fp)
 4004ea4:	e17ffc05 	stb	r5,-16(fp)
 4004ea8:	e13ffd05 	stb	r4,-12(fp)
 4004eac:	e0fffe05 	stb	r3,-8(fp)
 4004eb0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004eb4:	00800244 	movi	r2,9
 4004eb8:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
 4004ebc:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004ec0:	00800244 	movi	r2,9
 4004ec4:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
 4004ec8:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004ecc:	008003c4 	movi	r2,15
 4004ed0:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
 4004ed4:	e0bffc03 	ldbu	r2,-16(fp)
 4004ed8:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
 4004edc:	e0bffd03 	ldbu	r2,-12(fp)
 4004ee0:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
 4004ee4:	e0bffe03 	ldbu	r2,-8(fp)
 4004ee8:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
 4004eec:	e0bfff03 	ldbu	r2,-4(fp)
 4004ef0:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
 4004ef4:	00bfffc4 	movi	r2,-1
 4004ef8:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
 4004efc:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
 4004f00:	00bfffc4 	movi	r2,-1
 4004f04:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
 4004f08:	01800344 	movi	r6,13
 4004f0c:	e17ff704 	addi	r5,fp,-36
 4004f10:	e13ffb17 	ldw	r4,-20(fp)
 4004f14:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>
}
 4004f18:	0001883a 	nop
 4004f1c:	e037883a 	mov	sp,fp
 4004f20:	dfc00117 	ldw	ra,4(sp)
 4004f24:	df000017 	ldw	fp,0(sp)
 4004f28:	dec00204 	addi	sp,sp,8
 4004f2c:	f800283a 	ret

04004f30 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 4004f30:	defffe04 	addi	sp,sp,-8
 4004f34:	df000115 	stw	fp,4(sp)
 4004f38:	df000104 	addi	fp,sp,4
 4004f3c:	e13fff15 	stw	r4,-4(fp)
 4004f40:	e0bfff17 	ldw	r2,-4(fp)
 4004f44:	10000005 	stb	zero,0(r2)
 4004f48:	e0bfff17 	ldw	r2,-4(fp)
 4004f4c:	10c00043 	ldbu	r3,1(r2)
 4004f50:	1806703a 	and	r3,r3,zero
 4004f54:	10c00045 	stb	r3,1(r2)
 4004f58:	10c00083 	ldbu	r3,2(r2)
 4004f5c:	1806703a 	and	r3,r3,zero
 4004f60:	10c00085 	stb	r3,2(r2)
 4004f64:	10c000c3 	ldbu	r3,3(r2)
 4004f68:	1806703a 	and	r3,r3,zero
 4004f6c:	10c000c5 	stb	r3,3(r2)
 4004f70:	10c00103 	ldbu	r3,4(r2)
 4004f74:	1806703a 	and	r3,r3,zero
 4004f78:	10c00105 	stb	r3,4(r2)
        };
 4004f7c:	0001883a 	nop
 4004f80:	e037883a 	mov	sp,fp
 4004f84:	df000017 	ldw	fp,0(sp)
 4004f88:	dec00104 	addi	sp,sp,4
 4004f8c:	f800283a 	ret

04004f90 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 4004f90:	defffe04 	addi	sp,sp,-8
 4004f94:	df000115 	stw	fp,4(sp)
 4004f98:	df000104 	addi	fp,sp,4
 4004f9c:	e13fff15 	stw	r4,-4(fp)
 4004fa0:	e0bfff17 	ldw	r2,-4(fp)
 4004fa4:	10000015 	stw	zero,0(r2)
 4004fa8:	e0bfff17 	ldw	r2,-4(fp)
 4004fac:	10000105 	stb	zero,4(r2)
 4004fb0:	e0bfff17 	ldw	r2,-4(fp)
 4004fb4:	10000145 	stb	zero,5(r2)
        };
 4004fb8:	0001883a 	nop
 4004fbc:	e037883a 	mov	sp,fp
 4004fc0:	df000017 	ldw	fp,0(sp)
 4004fc4:	dec00104 	addi	sp,sp,4
 4004fc8:	f800283a 	ret

04004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 4004fcc:	defffd04 	addi	sp,sp,-12
 4004fd0:	df000215 	stw	fp,8(sp)
 4004fd4:	df000204 	addi	fp,sp,8
 4004fd8:	e13ffe15 	stw	r4,-8(fp)
 4004fdc:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
 4004fe0:	e0bfff17 	ldw	r2,-4(fp)
 4004fe4:	10c00043 	ldbu	r3,1(r2)
 4004fe8:	11000083 	ldbu	r4,2(r2)
 4004fec:	2008923a 	slli	r4,r4,8
 4004ff0:	20c6b03a 	or	r3,r4,r3
 4004ff4:	110000c3 	ldbu	r4,3(r2)
 4004ff8:	2008943a 	slli	r4,r4,16
 4004ffc:	20c6b03a 	or	r3,r4,r3
 4005000:	10800103 	ldbu	r2,4(r2)
 4005004:	1004963a 	slli	r2,r2,24
 4005008:	10c4b03a 	or	r2,r2,r3
 400500c:	1007883a 	mov	r3,r2
 4005010:	e0bffe17 	ldw	r2,-8(fp)
 4005014:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
 4005018:	e0bfff17 	ldw	r2,-4(fp)
 400501c:	10c00003 	ldbu	r3,0(r2)
 4005020:	e0bffe17 	ldw	r2,-8(fp)
 4005024:	10c00145 	stb	r3,5(r2)
 4005028:	e0bffe17 	ldw	r2,-8(fp)
 400502c:	10c00143 	ldbu	r3,5(r2)
 4005030:	e0bffe17 	ldw	r2,-8(fp)
 4005034:	10c00105 	stb	r3,4(r2)
        };
 4005038:	0001883a 	nop
 400503c:	e037883a 	mov	sp,fp
 4005040:	df000017 	ldw	fp,0(sp)
 4005044:	dec00104 	addi	sp,sp,4
 4005048:	f800283a 	ret

0400504c <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 400504c:	defffe04 	addi	sp,sp,-8
 4005050:	df000115 	stw	fp,4(sp)
 4005054:	df000104 	addi	fp,sp,4
 4005058:	e13fff15 	stw	r4,-4(fp)
 400505c:	e0bfff17 	ldw	r2,-4(fp)
 4005060:	10000015 	stw	zero,0(r2)
 4005064:	e0bfff17 	ldw	r2,-4(fp)
 4005068:	10000105 	stb	zero,4(r2)
 400506c:	e0bfff17 	ldw	r2,-4(fp)
 4005070:	1000018d 	sth	zero,6(r2)
        };
 4005074:	0001883a 	nop
 4005078:	e037883a 	mov	sp,fp
 400507c:	df000017 	ldw	fp,0(sp)
 4005080:	dec00104 	addi	sp,sp,4
 4005084:	f800283a 	ret

04005088 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 4005088:	defffd04 	addi	sp,sp,-12
 400508c:	df000215 	stw	fp,8(sp)
 4005090:	df000204 	addi	fp,sp,8
 4005094:	e13ffe15 	stw	r4,-8(fp)
 4005098:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
 400509c:	e0bfff17 	ldw	r2,-4(fp)
 40050a0:	10c00043 	ldbu	r3,1(r2)
 40050a4:	11000083 	ldbu	r4,2(r2)
 40050a8:	2008923a 	slli	r4,r4,8
 40050ac:	20c6b03a 	or	r3,r4,r3
 40050b0:	110000c3 	ldbu	r4,3(r2)
 40050b4:	2008943a 	slli	r4,r4,16
 40050b8:	20c6b03a 	or	r3,r4,r3
 40050bc:	10800103 	ldbu	r2,4(r2)
 40050c0:	1004963a 	slli	r2,r2,24
 40050c4:	10c4b03a 	or	r2,r2,r3
 40050c8:	1007883a 	mov	r3,r2
 40050cc:	e0bffe17 	ldw	r2,-8(fp)
 40050d0:	10c00015 	stw	r3,0(r2)
                countDown = 0;
 40050d4:	e0bffe17 	ldw	r2,-8(fp)
 40050d8:	1000018d 	sth	zero,6(r2)
        };
 40050dc:	0001883a 	nop
 40050e0:	e037883a 	mov	sp,fp
 40050e4:	df000017 	ldw	fp,0(sp)
 40050e8:	dec00104 	addi	sp,sp,4
 40050ec:	f800283a 	ret

040050f0 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 40050f0:	defffb04 	addi	sp,sp,-20
 40050f4:	df000415 	stw	fp,16(sp)
 40050f8:	df000404 	addi	fp,sp,16
 40050fc:	e13ffc15 	stw	r4,-16(fp)
 4005100:	e17ffd15 	stw	r5,-12(fp)
 4005104:	e1bffe15 	stw	r6,-8(fp)
 4005108:	3805883a 	mov	r2,r7
 400510c:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
 4005110:	e0bffc17 	ldw	r2,-16(fp)
 4005114:	10800103 	ldbu	r2,4(r2)
 4005118:	10803fcc 	andi	r2,r2,255
 400511c:	10000326 	beq	r2,zero,400512c <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
 4005120:	10800060 	cmpeqi	r2,r2,1
 4005124:	10000a1e 	bne	r2,zero,4005150 <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
 4005128:	00002906 	br	40051d0 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
 400512c:	e0bffc17 	ldw	r2,-16(fp)
 4005130:	e0ffff0b 	ldhu	r3,-4(fp)
 4005134:	10c0018d 	sth	r3,6(r2)
                                nStage++;
 4005138:	e0bffc17 	ldw	r2,-16(fp)
 400513c:	10800103 	ldbu	r2,4(r2)
 4005140:	10800044 	addi	r2,r2,1
 4005144:	1007883a 	mov	r3,r2
 4005148:	e0bffc17 	ldw	r2,-16(fp)
 400514c:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 4005150:	e0bffc17 	ldw	r2,-16(fp)
 4005154:	1080018b 	ldhu	r2,6(r2)
 4005158:	10bfffcc 	andi	r2,r2,65535
 400515c:	10001626 	beq	r2,zero,40051b8 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
 4005160:	e0bffe17 	ldw	r2,-8(fp)
 4005164:	1080000b 	ldhu	r2,0(r2)
 4005168:	10bfffcc 	andi	r2,r2,65535
 400516c:	10001226 	beq	r2,zero,40051b8 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
 4005170:	e0bffc17 	ldw	r2,-16(fp)
 4005174:	1080018b 	ldhu	r2,6(r2)
 4005178:	10bfffc4 	addi	r2,r2,-1
 400517c:	1007883a 	mov	r3,r2
 4005180:	e0bffc17 	ldw	r2,-16(fp)
 4005184:	10c0018d 	sth	r3,6(r2)
 4005188:	e0bffd17 	ldw	r2,-12(fp)
 400518c:	10800017 	ldw	r2,0(r2)
 4005190:	10c00044 	addi	r3,r2,1
 4005194:	e0bffd17 	ldw	r2,-12(fp)
 4005198:	10c00015 	stw	r3,0(r2)
 400519c:	e0bffe17 	ldw	r2,-8(fp)
 40051a0:	1080000b 	ldhu	r2,0(r2)
 40051a4:	10bfffc4 	addi	r2,r2,-1
 40051a8:	1007883a 	mov	r3,r2
 40051ac:	e0bffe17 	ldw	r2,-8(fp)
 40051b0:	10c0000d 	sth	r3,0(r2)
 40051b4:	003fe606 	br	4005150 <__alt_mem_onchip_memory2_0+0xfc003ed0>

                                if(!countDown)
 40051b8:	e0bffc17 	ldw	r2,-16(fp)
 40051bc:	1080018b 	ldhu	r2,6(r2)
 40051c0:	10bfffcc 	andi	r2,r2,65535
 40051c4:	1000021e 	bne	r2,zero,40051d0 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
 40051c8:	e0bffc17 	ldw	r2,-16(fp)
 40051cc:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
 40051d0:	e0bffc17 	ldw	r2,-16(fp)
 40051d4:	1080018b 	ldhu	r2,6(r2)
 40051d8:	10bfffcc 	andi	r2,r2,65535
 40051dc:	1005003a 	cmpeq	r2,r2,zero
        };
 40051e0:	e037883a 	mov	sp,fp
 40051e4:	df000017 	ldw	fp,0(sp)
 40051e8:	dec00104 	addi	sp,sp,4
 40051ec:	f800283a 	ret

040051f0 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 40051f0:	defffb04 	addi	sp,sp,-20
 40051f4:	df000415 	stw	fp,16(sp)
 40051f8:	df000404 	addi	fp,sp,16
 40051fc:	e13ffc15 	stw	r4,-16(fp)
 4005200:	2809883a 	mov	r4,r5
 4005204:	3007883a 	mov	r3,r6
 4005208:	3805883a 	mov	r2,r7
 400520c:	e13ffd05 	stb	r4,-12(fp)
 4005210:	e0fffe05 	stb	r3,-8(fp)
 4005214:	e0bfff05 	stb	r2,-4(fp)
                return 0;
 4005218:	0005883a 	mov	r2,zero
        }
 400521c:	e037883a 	mov	sp,fp
 4005220:	df000017 	ldw	fp,0(sp)
 4005224:	dec00104 	addi	sp,sp,4
 4005228:	f800283a 	ret

0400522c <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 400522c:	defffb04 	addi	sp,sp,-20
 4005230:	df000415 	stw	fp,16(sp)
 4005234:	df000404 	addi	fp,sp,16
 4005238:	e13ffc15 	stw	r4,-16(fp)
 400523c:	2809883a 	mov	r4,r5
 4005240:	3007883a 	mov	r3,r6
 4005244:	3805883a 	mov	r2,r7
 4005248:	e13ffd05 	stb	r4,-12(fp)
 400524c:	e0fffe05 	stb	r3,-8(fp)
 4005250:	e0bfff05 	stb	r2,-4(fp)
                return 0;
 4005254:	0005883a 	mov	r2,zero
        }
 4005258:	e037883a 	mov	sp,fp
 400525c:	df000017 	ldw	fp,0(sp)
 4005260:	dec00104 	addi	sp,sp,4
 4005264:	f800283a 	ret

04005268 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 4005268:	defffe04 	addi	sp,sp,-8
 400526c:	df000115 	stw	fp,4(sp)
 4005270:	df000104 	addi	fp,sp,4
 4005274:	e13fff15 	stw	r4,-4(fp)
                return 0;
 4005278:	0005883a 	mov	r2,zero
        }
 400527c:	e037883a 	mov	sp,fp
 4005280:	df000017 	ldw	fp,0(sp)
 4005284:	dec00104 	addi	sp,sp,4
 4005288:	f800283a 	ret

0400528c <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 400528c:	defffe04 	addi	sp,sp,-8
 4005290:	df000115 	stw	fp,4(sp)
 4005294:	df000104 	addi	fp,sp,4
 4005298:	e13fff15 	stw	r4,-4(fp)
                return 0;
 400529c:	0005883a 	mov	r2,zero
        }
 40052a0:	e037883a 	mov	sp,fp
 40052a4:	df000017 	ldw	fp,0(sp)
 40052a8:	dec00104 	addi	sp,sp,4
 40052ac:	f800283a 	ret

040052b0 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 40052b0:	defffe04 	addi	sp,sp,-8
 40052b4:	df000115 	stw	fp,4(sp)
 40052b8:	df000104 	addi	fp,sp,4
 40052bc:	e13fff15 	stw	r4,-4(fp)
                return 0;
 40052c0:	0005883a 	mov	r2,zero
        }
 40052c4:	e037883a 	mov	sp,fp
 40052c8:	df000017 	ldw	fp,0(sp)
 40052cc:	dec00104 	addi	sp,sp,4
 40052d0:	f800283a 	ret

040052d4 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 40052d4:	defffd04 	addi	sp,sp,-12
 40052d8:	df000215 	stw	fp,8(sp)
 40052dc:	df000204 	addi	fp,sp,8
 40052e0:	e13ffe15 	stw	r4,-8(fp)
 40052e4:	2805883a 	mov	r2,r5
 40052e8:	e0bfff05 	stb	r2,-4(fp)
                return;
 40052ec:	0001883a 	nop
        } // Note used for hubs only!
 40052f0:	e037883a 	mov	sp,fp
 40052f4:	df000017 	ldw	fp,0(sp)
 40052f8:	dec00104 	addi	sp,sp,4
 40052fc:	f800283a 	ret

04005300 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 4005300:	defffc04 	addi	sp,sp,-16
 4005304:	df000315 	stw	fp,12(sp)
 4005308:	df000304 	addi	fp,sp,12
 400530c:	e13ffd15 	stw	r4,-12(fp)
 4005310:	2807883a 	mov	r3,r5
 4005314:	3005883a 	mov	r2,r6
 4005318:	e0fffe0d 	sth	r3,-8(fp)
 400531c:	e0bfff0d 	sth	r2,-4(fp)
                return false;
 4005320:	0005883a 	mov	r2,zero
        }
 4005324:	e037883a 	mov	sp,fp
 4005328:	df000017 	ldw	fp,0(sp)
 400532c:	dec00104 	addi	sp,sp,4
 4005330:	f800283a 	ret

04005334 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 4005334:	defffd04 	addi	sp,sp,-12
 4005338:	df000215 	stw	fp,8(sp)
 400533c:	df000204 	addi	fp,sp,8
 4005340:	e13ffe15 	stw	r4,-8(fp)
 4005344:	2805883a 	mov	r2,r5
 4005348:	e0bfff05 	stb	r2,-4(fp)
                return false;
 400534c:	0005883a 	mov	r2,zero
        }
 4005350:	e037883a 	mov	sp,fp
 4005354:	df000017 	ldw	fp,0(sp)
 4005358:	dec00104 	addi	sp,sp,4
 400535c:	f800283a 	ret

04005360 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 4005360:	defffd04 	addi	sp,sp,-12
 4005364:	df000215 	stw	fp,8(sp)
 4005368:	df000204 	addi	fp,sp,8
 400536c:	e13ffe15 	stw	r4,-8(fp)
 4005370:	2805883a 	mov	r2,r5
 4005374:	e0bfff05 	stb	r2,-4(fp)
                return true;
 4005378:	00800044 	movi	r2,1
        }
 400537c:	e037883a 	mov	sp,fp
 4005380:	df000017 	ldw	fp,0(sp)
 4005384:	dec00104 	addi	sp,sp,4
 4005388:	f800283a 	ret

0400538c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 400538c:	defffc04 	addi	sp,sp,-16
 4005390:	df000315 	stw	fp,12(sp)
 4005394:	df000304 	addi	fp,sp,12
 4005398:	e13ffe15 	stw	r4,-8(fp)
 400539c:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 40053a0:	e03ffd05 	stb	zero,-12(fp)
 40053a4:	e0bffd03 	ldbu	r2,-12(fp)
 40053a8:	10800428 	cmpgeui	r2,r2,16
 40053ac:	1000161e 	bne	r2,zero,4005408 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
 40053b0:	e0bffd03 	ldbu	r2,-12(fp)
 40053b4:	e0fffe17 	ldw	r3,-8(fp)
 40053b8:	10800784 	addi	r2,r2,30
 40053bc:	1085883a 	add	r2,r2,r2
 40053c0:	1085883a 	add	r2,r2,r2
 40053c4:	1885883a 	add	r2,r3,r2
 40053c8:	10800017 	ldw	r2,0(r2)
 40053cc:	10000a1e 	bne	r2,zero,40053f8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
 40053d0:	e0bffd03 	ldbu	r2,-12(fp)
 40053d4:	e0fffe17 	ldw	r3,-8(fp)
 40053d8:	10800784 	addi	r2,r2,30
 40053dc:	1085883a 	add	r2,r2,r2
 40053e0:	1085883a 	add	r2,r2,r2
 40053e4:	1885883a 	add	r2,r3,r2
 40053e8:	e0ffff17 	ldw	r3,-4(fp)
 40053ec:	10c00015 	stw	r3,0(r2)
                                return 0;
 40053f0:	0005883a 	mov	r2,zero
 40053f4:	00000506 	br	400540c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 40053f8:	e0bffd03 	ldbu	r2,-12(fp)
 40053fc:	10800044 	addi	r2,r2,1
 4005400:	e0bffd05 	stb	r2,-12(fp)
 4005404:	003fe706 	br	40053a4 <__alt_mem_onchip_memory2_0+0xfc004124>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 4005408:	00bff4c4 	movi	r2,-45
        };
 400540c:	e037883a 	mov	sp,fp
 4005410:	df000017 	ldw	fp,0(sp)
 4005414:	dec00104 	addi	sp,sp,4
 4005418:	f800283a 	ret

0400541c <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 400541c:	defffa04 	addi	sp,sp,-24
 4005420:	df000515 	stw	fp,20(sp)
 4005424:	df000504 	addi	fp,sp,20
 4005428:	e13ffb15 	stw	r4,-20(fp)
 400542c:	3009883a 	mov	r4,r6
 4005430:	3807883a 	mov	r3,r7
 4005434:	e0800117 	ldw	r2,4(fp)
 4005438:	e17ffc05 	stb	r5,-16(fp)
 400543c:	e13ffd05 	stb	r4,-12(fp)
 4005440:	e0fffe05 	stb	r3,-8(fp)
 4005444:	e0bfff05 	stb	r2,-4(fp)
        };
 4005448:	0001883a 	nop
 400544c:	e037883a 	mov	sp,fp
 4005450:	df000017 	ldw	fp,0(sp)
 4005454:	dec00104 	addi	sp,sp,4
 4005458:	f800283a 	ret

0400545c <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
 400545c:	defffe04 	addi	sp,sp,-8
 4005460:	df000115 	stw	fp,4(sp)
 4005464:	df000104 	addi	fp,sp,4
 4005468:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
 400546c:	e0bfff17 	ldw	r2,-4(fp)
 4005470:	10800403 	ldbu	r2,16(r2)
        };
 4005474:	e037883a 	mov	sp,fp
 4005478:	df000017 	ldw	fp,0(sp)
 400547c:	dec00104 	addi	sp,sp,4
 4005480:	f800283a 	ret

04005484 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
 4005484:	defffe04 	addi	sp,sp,-8
 4005488:	df000115 	stw	fp,4(sp)
 400548c:	df000104 	addi	fp,sp,4
 4005490:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
 4005494:	e0bfff17 	ldw	r2,-4(fp)
 4005498:	10800943 	ldbu	r2,37(r2)
        };
 400549c:	e037883a 	mov	sp,fp
 40054a0:	df000017 	ldw	fp,0(sp)
 40054a4:	dec00104 	addi	sp,sp,4
 40054a8:	f800283a 	ret

040054ac <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 40054ac:	defffc04 	addi	sp,sp,-16
 40054b0:	df000315 	stw	fp,12(sp)
 40054b4:	df000304 	addi	fp,sp,12
 40054b8:	e13ffd15 	stw	r4,-12(fp)
 40054bc:	2807883a 	mov	r3,r5
 40054c0:	3005883a 	mov	r2,r6
 40054c4:	e0fffe0d 	sth	r3,-8(fp)
 40054c8:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
 40054cc:	e0bffe0b 	ldhu	r2,-8(fp)
 40054d0:	108117a0 	cmpeqi	r2,r2,1118
 40054d4:	10000f1e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054d8:	e0bffe0b 	ldhu	r2,-8(fp)
 40054dc:	1081ce20 	cmpeqi	r2,r2,1848
 40054e0:	10000c1e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054e4:	e0bffe0b 	ldhu	r2,-8(fp)
 40054e8:	10839be0 	cmpeqi	r2,r2,3695
 40054ec:	1000091e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054f0:	e0bffe0b 	ldhu	r2,-8(fp)
 40054f4:	1083c360 	cmpeqi	r2,r2,3853
 40054f8:	1000061e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054fc:	e0bffe0b 	ldhu	r2,-8(fp)
 4005500:	10854ca0 	cmpeqi	r2,r2,5426
 4005504:	1000031e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 4005508:	e0bffe0b 	ldhu	r2,-8(fp)
 400550c:	10893198 	cmpnei	r2,r2,9414
 4005510:	10002c1e 	bne	r2,zero,40055c4 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
 4005514:	e0bfff0b 	ldhu	r2,-4(fp)
 4005518:	1080b460 	cmpeqi	r2,r2,721
 400551c:	1000271e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
 4005520:	e0bfff0b 	ldhu	r2,-4(fp)
 4005524:	1080b760 	cmpeqi	r2,r2,733
 4005528:	1000241e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 400552c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005530:	1080b8e0 	cmpeqi	r2,r2,739
 4005534:	1000211e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005538:	e0bfff0b 	ldhu	r2,-4(fp)
 400553c:	1080baa0 	cmpeqi	r2,r2,746
 4005540:	10001e1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005544:	e0bfff0b 	ldhu	r2,-4(fp)
 4005548:	10928060 	cmpeqi	r2,r2,18945
 400554c:	10001b1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
 4005550:	e0bfff0b 	ldhu	r2,-4(fp)
 4005554:	10804e60 	cmpeqi	r2,r2,313
 4005558:	1000181e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 400555c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005560:	108051a0 	cmpeqi	r2,r2,326
 4005564:	1000151e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005568:	e0bfff0b 	ldhu	r2,-4(fp)
 400556c:	108019e0 	cmpeqi	r2,r2,103
 4005570:	1000121e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005574:	e0bfff0b 	ldhu	r2,-4(fp)
 4005578:	108280e0 	cmpeqi	r2,r2,2563
 400557c:	10000f1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
 4005580:	e0bfff0b 	ldhu	r2,-4(fp)
 4005584:	109506a0 	cmpeqi	r2,r2,21530
 4005588:	10000c1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 400558c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005590:	10950aa0 	cmpeqi	r2,r2,21546
 4005594:	1000091e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005598:	e0bfff0b 	ldhu	r2,-4(fp)
 400559c:	10950ea0 	cmpeqi	r2,r2,21562
 40055a0:	1000061e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 40055a4:	e0bfff0b 	ldhu	r2,-4(fp)
 40055a8:	1082c2a0 	cmpeqi	r2,r2,2826
 40055ac:	1000031e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
 40055b0:	e0bfff0b 	ldhu	r2,-4(fp)
 40055b4:	1082c498 	cmpnei	r2,r2,2834
 40055b8:	1000021e 	bne	r2,zero,40055c4 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
 40055bc:	00800044 	movi	r2,1
 40055c0:	00000106 	br	40055c8 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
 40055c4:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
 40055c8:	e037883a 	mov	sp,fp
 40055cc:	df000017 	ldw	fp,0(sp)
 40055d0:	dec00104 	addi	sp,sp,4
 40055d4:	f800283a 	ret

040055d8 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
 40055d8:	defffe04 	addi	sp,sp,-8
 40055dc:	df000115 	stw	fp,4(sp)
 40055e0:	df000104 	addi	fp,sp,4
 40055e4:	e13fff15 	stw	r4,-4(fp)
 40055e8:	008100b4 	movhi	r2,1026
 40055ec:	1080a204 	addi	r2,r2,648
 40055f0:	e0ffff17 	ldw	r3,-4(fp)
 40055f4:	18800015 	stw	r2,0(r3)
 40055f8:	0001883a 	nop
 40055fc:	e037883a 	mov	sp,fp
 4005600:	df000017 	ldw	fp,0(sp)
 4005604:	dec00104 	addi	sp,sp,4
 4005608:	f800283a 	ret

0400560c <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
 400560c:	defffe04 	addi	sp,sp,-8
 4005610:	df000115 	stw	fp,4(sp)
 4005614:	df000104 	addi	fp,sp,4
 4005618:	e13fff15 	stw	r4,-4(fp)
 400561c:	008100b4 	movhi	r2,1026
 4005620:	10809c04 	addi	r2,r2,624
 4005624:	e0ffff17 	ldw	r3,-4(fp)
 4005628:	18800015 	stw	r2,0(r3)
 400562c:	0001883a 	nop
 4005630:	e037883a 	mov	sp,fp
 4005634:	df000017 	ldw	fp,0(sp)
 4005638:	dec00104 	addi	sp,sp,4
 400563c:	f800283a 	ret

04005640 <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
 4005640:	defffe04 	addi	sp,sp,-8
 4005644:	df000115 	stw	fp,4(sp)
 4005648:	df000104 	addi	fp,sp,4
 400564c:	e13fff15 	stw	r4,-4(fp)
 4005650:	008100b4 	movhi	r2,1026
 4005654:	10809f04 	addi	r2,r2,636
 4005658:	e0ffff17 	ldw	r3,-4(fp)
 400565c:	18800015 	stw	r2,0(r3)
 4005660:	0001883a 	nop
 4005664:	e037883a 	mov	sp,fp
 4005668:	df000017 	ldw	fp,0(sp)
 400566c:	dec00104 	addi	sp,sp,4
 4005670:	f800283a 	ret

04005674 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 4005674:	defffc04 	addi	sp,sp,-16
 4005678:	dfc00315 	stw	ra,12(sp)
 400567c:	df000215 	stw	fp,8(sp)
 4005680:	df000204 	addi	fp,sp,8
 4005684:	e13ffe15 	stw	r4,-8(fp)
 4005688:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 400568c:	e0bffe17 	ldw	r2,-8(fp)
 4005690:	1009883a 	mov	r4,r2
 4005694:	40056400 	call	4005640 <_ZN13USBReadParserC1Ev>
 4005698:	008100b4 	movhi	r2,1026
 400569c:	10809904 	addi	r2,r2,612
 40056a0:	e0fffe17 	ldw	r3,-8(fp)
 40056a4:	18800015 	stw	r2,0(r3)
 40056a8:	e0bffe17 	ldw	r2,-8(fp)
 40056ac:	e0ffff17 	ldw	r3,-4(fp)
 40056b0:	10c00115 	stw	r3,4(r2)
 40056b4:	e0bffe17 	ldw	r2,-8(fp)
 40056b8:	10800204 	addi	r2,r2,8
 40056bc:	1009883a 	mov	r4,r2
 40056c0:	4004f300 	call	4004f30 <_ZN16MultiValueBufferC1Ev>
 40056c4:	e0bffe17 	ldw	r2,-8(fp)
 40056c8:	10800404 	addi	r2,r2,16
 40056cc:	1009883a 	mov	r4,r2
 40056d0:	4004f900 	call	4004f90 <_ZN20MultiByteValueParserC1Ev>
 40056d4:	e0bffe17 	ldw	r2,-8(fp)
 40056d8:	10800604 	addi	r2,r2,24
 40056dc:	1009883a 	mov	r4,r2
 40056e0:	400504c0 	call	400504c <_ZN11ByteSkipperC1Ev>
 40056e4:	e0bffe17 	ldw	r2,-8(fp)
 40056e8:	10000c05 	stb	zero,48(r2)
 40056ec:	e0bffe17 	ldw	r2,-8(fp)
 40056f0:	10000c45 	stb	zero,49(r2)
 40056f4:	e0bffe17 	ldw	r2,-8(fp)
 40056f8:	10000c85 	stb	zero,50(r2)
 40056fc:	e0bffe17 	ldw	r2,-8(fp)
 4005700:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
 4005704:	e0bffe17 	ldw	r2,-8(fp)
 4005708:	10c00804 	addi	r3,r2,32
 400570c:	e0bffe17 	ldw	r2,-8(fp)
 4005710:	19803fcc 	andi	r6,r3,255
 4005714:	11000243 	ldbu	r4,9(r2)
 4005718:	2008703a 	and	r4,r4,zero
 400571c:	200b883a 	mov	r5,r4
 4005720:	3009883a 	mov	r4,r6
 4005724:	2908b03a 	or	r4,r5,r4
 4005728:	11000245 	stb	r4,9(r2)
 400572c:	1808d23a 	srli	r4,r3,8
 4005730:	21803fcc 	andi	r6,r4,255
 4005734:	11000283 	ldbu	r4,10(r2)
 4005738:	2008703a 	and	r4,r4,zero
 400573c:	200b883a 	mov	r5,r4
 4005740:	3009883a 	mov	r4,r6
 4005744:	2908b03a 	or	r4,r5,r4
 4005748:	11000285 	stb	r4,10(r2)
 400574c:	1808d43a 	srli	r4,r3,16
 4005750:	21803fcc 	andi	r6,r4,255
 4005754:	110002c3 	ldbu	r4,11(r2)
 4005758:	2008703a 	and	r4,r4,zero
 400575c:	200b883a 	mov	r5,r4
 4005760:	3009883a 	mov	r4,r6
 4005764:	2908b03a 	or	r4,r5,r4
 4005768:	110002c5 	stb	r4,11(r2)
 400576c:	180ad63a 	srli	r5,r3,24
 4005770:	10c00303 	ldbu	r3,12(r2)
 4005774:	1806703a 	and	r3,r3,zero
 4005778:	1809883a 	mov	r4,r3
 400577c:	2807883a 	mov	r3,r5
 4005780:	20c6b03a 	or	r3,r4,r3
 4005784:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
 4005788:	e0bffe17 	ldw	r2,-8(fp)
 400578c:	10c00404 	addi	r3,r2,16
 4005790:	e0bffe17 	ldw	r2,-8(fp)
 4005794:	10800204 	addi	r2,r2,8
 4005798:	100b883a 	mov	r5,r2
 400579c:	1809883a 	mov	r4,r3
 40057a0:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 40057a4:	e0bffe17 	ldw	r2,-8(fp)
 40057a8:	10c00604 	addi	r3,r2,24
 40057ac:	e0bffe17 	ldw	r2,-8(fp)
 40057b0:	10800204 	addi	r2,r2,8
 40057b4:	100b883a 	mov	r5,r2
 40057b8:	1809883a 	mov	r4,r3
 40057bc:	40050880 	call	4005088 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 40057c0:	0001883a 	nop
 40057c4:	e037883a 	mov	sp,fp
 40057c8:	dfc00117 	ldw	ra,4(sp)
 40057cc:	df000017 	ldw	fp,0(sp)
 40057d0:	dec00204 	addi	sp,sp,8
 40057d4:	f800283a 	ret

040057d8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 40057d8:	defff804 	addi	sp,sp,-32
 40057dc:	dfc00715 	stw	ra,28(sp)
 40057e0:	df000615 	stw	fp,24(sp)
 40057e4:	df000604 	addi	fp,sp,24
 40057e8:	e13ffc15 	stw	r4,-16(fp)
 40057ec:	2805883a 	mov	r2,r5
 40057f0:	e1bffe15 	stw	r6,-8(fp)
 40057f4:	e1ffff15 	stw	r7,-4(fp)
 40057f8:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
 40057fc:	e0bffd0b 	ldhu	r2,-12(fp)
 4005800:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
 4005804:	e0bffe17 	ldw	r2,-8(fp)
 4005808:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
 400580c:	e0bffa0b 	ldhu	r2,-24(fp)
 4005810:	10bfffcc 	andi	r2,r2,65535
 4005814:	10000a26 	beq	r2,zero,4005840 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
 4005818:	e0bffb04 	addi	r2,fp,-20
 400581c:	e1bffa04 	addi	r6,fp,-24
 4005820:	100b883a 	mov	r5,r2
 4005824:	e13ffc17 	ldw	r4,-16(fp)
 4005828:	40058540 	call	4005854 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
 400582c:	1080005c 	xori	r2,r2,1
 4005830:	10803fcc 	andi	r2,r2,255
 4005834:	1000011e 	bne	r2,zero,400583c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
 4005838:	003ff406 	br	400580c <__alt_mem_onchip_memory2_0+0xfc00458c>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
 400583c:	0001883a 	nop
}
 4005840:	e037883a 	mov	sp,fp
 4005844:	dfc00117 	ldw	ra,4(sp)
 4005848:	df000017 	ldw	fp,0(sp)
 400584c:	dec00204 	addi	sp,sp,8
 4005850:	f800283a 	ret

04005854 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 4005854:	defff604 	addi	sp,sp,-40
 4005858:	dfc00915 	stw	ra,36(sp)
 400585c:	df000815 	stw	fp,32(sp)
 4005860:	df000804 	addi	fp,sp,32
 4005864:	e13ffc15 	stw	r4,-16(fp)
 4005868:	e17ffd15 	stw	r5,-12(fp)
 400586c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 4005870:	e0bffc17 	ldw	r2,-16(fp)
 4005874:	10800804 	addi	r2,r2,32
 4005878:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 400587c:	e0bffc17 	ldw	r2,-16(fp)
 4005880:	10800804 	addi	r2,r2,32
 4005884:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
 4005888:	e0bffc17 	ldw	r2,-16(fp)
 400588c:	10800c03 	ldbu	r2,48(r2)
 4005890:	10803fcc 	andi	r2,r2,255
 4005894:	10c00168 	cmpgeui	r3,r2,5
 4005898:	1801141e 	bne	r3,zero,4005cec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
 400589c:	100690ba 	slli	r3,r2,2
 40058a0:	00810034 	movhi	r2,1024
 40058a4:	10962d04 	addi	r2,r2,22708
 40058a8:	1885883a 	add	r2,r3,r2
 40058ac:	10800017 	ldw	r2,0(r2)
 40058b0:	1000683a 	jmp	r2
 40058b4:	040058c8 	cmpgei	r16,zero,355
 40058b8:	040058fc 	xorhi	r16,zero,355
 40058bc:	04005984 	movi	r16,358
 40058c0:	04005a18 	cmpnei	r16,zero,360
 40058c4:	04005a84 	movi	r16,362
                case 0:
                        theBuffer.valueSize = 2;
 40058c8:	e0bffc17 	ldw	r2,-16(fp)
 40058cc:	00c00084 	movi	r3,2
 40058d0:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 40058d4:	e0bffc17 	ldw	r2,-16(fp)
 40058d8:	10c00404 	addi	r3,r2,16
 40058dc:	e0bffc17 	ldw	r2,-16(fp)
 40058e0:	10800204 	addi	r2,r2,8
 40058e4:	100b883a 	mov	r5,r2
 40058e8:	1809883a 	mov	r4,r3
 40058ec:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 40058f0:	e0bffc17 	ldw	r2,-16(fp)
 40058f4:	00c00044 	movi	r3,1
 40058f8:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 40058fc:	e0bffc17 	ldw	r2,-16(fp)
 4005900:	10800404 	addi	r2,r2,16
 4005904:	e1bffe17 	ldw	r6,-8(fp)
 4005908:	e17ffd17 	ldw	r5,-12(fp)
 400590c:	1009883a 	mov	r4,r2
 4005910:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005914:	1080005c 	xori	r2,r2,1
 4005918:	10803fcc 	andi	r2,r2,255
 400591c:	10000226 	beq	r2,zero,4005928 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
 4005920:	0005883a 	mov	r2,zero
 4005924:	0000f206 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 4005928:	e0bffc17 	ldw	r2,-16(fp)
 400592c:	10c00217 	ldw	r3,8(r2)
 4005930:	1806d23a 	srli	r3,r3,8
 4005934:	10800317 	ldw	r2,12(r2)
 4005938:	10803fcc 	andi	r2,r2,255
 400593c:	1004963a 	slli	r2,r2,24
 4005940:	10c4b03a 	or	r2,r2,r3
 4005944:	10c00003 	ldbu	r3,0(r2)
 4005948:	e0bffc17 	ldw	r2,-16(fp)
 400594c:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 4005950:	e0bffc17 	ldw	r2,-16(fp)
 4005954:	10c00217 	ldw	r3,8(r2)
 4005958:	1806d23a 	srli	r3,r3,8
 400595c:	10800317 	ldw	r2,12(r2)
 4005960:	10803fcc 	andi	r2,r2,255
 4005964:	1004963a 	slli	r2,r2,24
 4005968:	10c4b03a 	or	r2,r2,r3
 400596c:	10c00043 	ldbu	r3,1(r2)
 4005970:	e0bffc17 	ldw	r2,-16(fp)
 4005974:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
 4005978:	e0bffc17 	ldw	r2,-16(fp)
 400597c:	00c00084 	movi	r3,2
 4005980:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 4005984:	e0bffc17 	ldw	r2,-16(fp)
 4005988:	10800804 	addi	r2,r2,32
 400598c:	10c00084 	addi	r3,r2,2
 4005990:	e0bffc17 	ldw	r2,-16(fp)
 4005994:	19803fcc 	andi	r6,r3,255
 4005998:	11000243 	ldbu	r4,9(r2)
 400599c:	2008703a 	and	r4,r4,zero
 40059a0:	200b883a 	mov	r5,r4
 40059a4:	3009883a 	mov	r4,r6
 40059a8:	2908b03a 	or	r4,r5,r4
 40059ac:	11000245 	stb	r4,9(r2)
 40059b0:	1808d23a 	srli	r4,r3,8
 40059b4:	21803fcc 	andi	r6,r4,255
 40059b8:	11000283 	ldbu	r4,10(r2)
 40059bc:	2008703a 	and	r4,r4,zero
 40059c0:	200b883a 	mov	r5,r4
 40059c4:	3009883a 	mov	r4,r6
 40059c8:	2908b03a 	or	r4,r5,r4
 40059cc:	11000285 	stb	r4,10(r2)
 40059d0:	1808d43a 	srli	r4,r3,16
 40059d4:	21803fcc 	andi	r6,r4,255
 40059d8:	110002c3 	ldbu	r4,11(r2)
 40059dc:	2008703a 	and	r4,r4,zero
 40059e0:	200b883a 	mov	r5,r4
 40059e4:	3009883a 	mov	r4,r6
 40059e8:	2908b03a 	or	r4,r5,r4
 40059ec:	110002c5 	stb	r4,11(r2)
 40059f0:	180ad63a 	srli	r5,r3,24
 40059f4:	10c00303 	ldbu	r3,12(r2)
 40059f8:	1806703a 	and	r3,r3,zero
 40059fc:	1809883a 	mov	r4,r3
 4005a00:	2807883a 	mov	r3,r5
 4005a04:	20c6b03a 	or	r3,r4,r3
 4005a08:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
 4005a0c:	e0bffc17 	ldw	r2,-16(fp)
 4005a10:	00c000c4 	movi	r3,3
 4005a14:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
 4005a18:	e0bffc17 	ldw	r2,-16(fp)
 4005a1c:	10800c83 	ldbu	r2,50(r2)
 4005a20:	10803fcc 	andi	r2,r2,255
 4005a24:	10c00120 	cmpeqi	r3,r2,4
 4005a28:	1800021e 	bne	r3,zero,4005a34 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
 4005a2c:	10800148 	cmpgei	r2,r2,5
 4005a30:	00000306 	br	4005a40 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 4005a34:	e0bffc17 	ldw	r2,-16(fp)
 4005a38:	10000cc5 	stb	zero,51(r2)
                                        break;
 4005a3c:	00000106 	br	4005a44 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
 4005a40:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
 4005a44:	e0bffc17 	ldw	r2,-16(fp)
 4005a48:	10800c43 	ldbu	r2,49(r2)
 4005a4c:	10bfff84 	addi	r2,r2,-2
 4005a50:	1007883a 	mov	r3,r2
 4005a54:	e0bffc17 	ldw	r2,-16(fp)
 4005a58:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 4005a5c:	e0bffc17 	ldw	r2,-16(fp)
 4005a60:	10c00404 	addi	r3,r2,16
 4005a64:	e0bffc17 	ldw	r2,-16(fp)
 4005a68:	10800204 	addi	r2,r2,8
 4005a6c:	100b883a 	mov	r5,r2
 4005a70:	1809883a 	mov	r4,r3
 4005a74:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 4005a78:	e0bffc17 	ldw	r2,-16(fp)
 4005a7c:	00c00104 	movi	r3,4
 4005a80:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
 4005a84:	e0bffc17 	ldw	r2,-16(fp)
 4005a88:	10800c83 	ldbu	r2,50(r2)
 4005a8c:	10803fcc 	andi	r2,r2,255
 4005a90:	10c00120 	cmpeqi	r3,r2,4
 4005a94:	1800141e 	bne	r3,zero,4005ae8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
 4005a98:	10c00160 	cmpeqi	r3,r2,5
 4005a9c:	1800311e 	bne	r3,zero,4005b64 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
 4005aa0:	108000a0 	cmpeqi	r2,r2,2
 4005aa4:	10005a26 	beq	r2,zero,4005c10 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 4005aa8:	e0bffc17 	ldw	r2,-16(fp)
 4005aac:	10800404 	addi	r2,r2,16
 4005ab0:	e1bffe17 	ldw	r6,-8(fp)
 4005ab4:	e17ffd17 	ldw	r5,-12(fp)
 4005ab8:	1009883a 	mov	r4,r2
 4005abc:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005ac0:	1080005c 	xori	r2,r2,1
 4005ac4:	10803fcc 	andi	r2,r2,255
 4005ac8:	10000226 	beq	r2,zero,4005ad4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
 4005acc:	0005883a 	mov	r2,zero
 4005ad0:	00008706 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
 4005ad4:	e0bffa17 	ldw	r2,-24(fp)
 4005ad8:	10c00143 	ldbu	r3,5(r2)
 4005adc:	e0bffc17 	ldw	r2,-16(fp)
 4005ae0:	10c00d05 	stb	r3,52(r2)
                                        break;
 4005ae4:	00005e06 	br	4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 4005ae8:	e0bffc17 	ldw	r2,-16(fp)
 4005aec:	10800404 	addi	r2,r2,16
 4005af0:	e1bffe17 	ldw	r6,-8(fp)
 4005af4:	e17ffd17 	ldw	r5,-12(fp)
 4005af8:	1009883a 	mov	r4,r2
 4005afc:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005b00:	1080005c 	xori	r2,r2,1
 4005b04:	10803fcc 	andi	r2,r2,255
 4005b08:	10000226 	beq	r2,zero,4005b14 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
 4005b0c:	0005883a 	mov	r2,zero
 4005b10:	00007706 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
 4005b14:	e0bffc17 	ldw	r2,-16(fp)
 4005b18:	10800e03 	ldbu	r2,56(r2)
 4005b1c:	10803fcc 	andi	r2,r2,255
 4005b20:	10004c1e 	bne	r2,zero,4005c54 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
 4005b24:	e0bffc17 	ldw	r2,-16(fp)
 4005b28:	00c00044 	movi	r3,1
 4005b2c:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
 4005b30:	e0bffb17 	ldw	r2,-20(fp)
 4005b34:	10c00083 	ldbu	r3,2(r2)
 4005b38:	e0bffc17 	ldw	r2,-16(fp)
 4005b3c:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
 4005b40:	e0bffb17 	ldw	r2,-20(fp)
 4005b44:	10c000c3 	ldbu	r3,3(r2)
 4005b48:	e0bffc17 	ldw	r2,-16(fp)
 4005b4c:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
 4005b50:	e0bffb17 	ldw	r2,-20(fp)
 4005b54:	10c001c3 	ldbu	r3,7(r2)
 4005b58:	e0bffc17 	ldw	r2,-16(fp)
 4005b5c:	10c00d45 	stb	r3,53(r2)
                                        break;
 4005b60:	00003f06 	br	4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 4005b64:	e0bffc17 	ldw	r2,-16(fp)
 4005b68:	10800404 	addi	r2,r2,16
 4005b6c:	e1bffe17 	ldw	r6,-8(fp)
 4005b70:	e17ffd17 	ldw	r5,-12(fp)
 4005b74:	1009883a 	mov	r4,r2
 4005b78:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005b7c:	1080005c 	xori	r2,r2,1
 4005b80:	10803fcc 	andi	r2,r2,255
 4005b84:	10000226 	beq	r2,zero,4005b90 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
 4005b88:	0005883a 	mov	r2,zero
 4005b8c:	00005806 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
 4005b90:	e0bffc17 	ldw	r2,-16(fp)
 4005b94:	10800cc3 	ldbu	r2,51(r2)
 4005b98:	10803fcc 	andi	r2,r2,255
 4005b9c:	10002f26 	beq	r2,zero,4005c5c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
 4005ba0:	e0bffc17 	ldw	r2,-16(fp)
 4005ba4:	10800117 	ldw	r2,4(r2)
 4005ba8:	10002c26 	beq	r2,zero,4005c5c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 4005bac:	e0bffc17 	ldw	r2,-16(fp)
 4005bb0:	10800117 	ldw	r2,4(r2)
 4005bb4:	10800017 	ldw	r2,0(r2)
 4005bb8:	10800017 	ldw	r2,0(r2)
 4005bbc:	e0fffc17 	ldw	r3,-16(fp)
 4005bc0:	1a000117 	ldw	r8,4(r3)
 4005bc4:	e0fffc17 	ldw	r3,-16(fp)
 4005bc8:	18c00d03 	ldbu	r3,52(r3)
 4005bcc:	19403fcc 	andi	r5,r3,255
 4005bd0:	e0fffc17 	ldw	r3,-16(fp)
 4005bd4:	18c00d83 	ldbu	r3,54(r3)
 4005bd8:	19803fcc 	andi	r6,r3,255
 4005bdc:	e0fffc17 	ldw	r3,-16(fp)
 4005be0:	18c00dc3 	ldbu	r3,55(r3)
 4005be4:	19c03fcc 	andi	r7,r3,255
 4005be8:	e0fffc17 	ldw	r3,-16(fp)
 4005bec:	18c00d43 	ldbu	r3,53(r3)
 4005bf0:	18c03fcc 	andi	r3,r3,255
 4005bf4:	e13ffc17 	ldw	r4,-16(fp)
 4005bf8:	21000804 	addi	r4,r4,32
 4005bfc:	d9000115 	stw	r4,4(sp)
 4005c00:	d8c00015 	stw	r3,0(sp)
 4005c04:	4009883a 	mov	r4,r8
 4005c08:	103ee83a 	callr	r2
                                        break;
 4005c0c:	00001306 	br	4005c5c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 4005c10:	e0bffc17 	ldw	r2,-16(fp)
 4005c14:	10c00604 	addi	r3,r2,24
 4005c18:	e0bffc17 	ldw	r2,-16(fp)
 4005c1c:	10800c43 	ldbu	r2,49(r2)
 4005c20:	10803fcc 	andi	r2,r2,255
 4005c24:	10bfff84 	addi	r2,r2,-2
 4005c28:	10bfffcc 	andi	r2,r2,65535
 4005c2c:	100f883a 	mov	r7,r2
 4005c30:	e1bffe17 	ldw	r6,-8(fp)
 4005c34:	e17ffd17 	ldw	r5,-12(fp)
 4005c38:	1809883a 	mov	r4,r3
 4005c3c:	40050f00 	call	40050f0 <_ZN11ByteSkipper4SkipEPPhPtt>
 4005c40:	1080005c 	xori	r2,r2,1
 4005c44:	10803fcc 	andi	r2,r2,255
 4005c48:	10000526 	beq	r2,zero,4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
 4005c4c:	0005883a 	mov	r2,zero
 4005c50:	00002706 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
 4005c54:	0001883a 	nop
 4005c58:	00000106 	br	4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
 4005c5c:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
 4005c60:	e0bffc17 	ldw	r2,-16(fp)
 4005c64:	10c00804 	addi	r3,r2,32
 4005c68:	e0bffc17 	ldw	r2,-16(fp)
 4005c6c:	19803fcc 	andi	r6,r3,255
 4005c70:	11000243 	ldbu	r4,9(r2)
 4005c74:	2008703a 	and	r4,r4,zero
 4005c78:	200b883a 	mov	r5,r4
 4005c7c:	3009883a 	mov	r4,r6
 4005c80:	2908b03a 	or	r4,r5,r4
 4005c84:	11000245 	stb	r4,9(r2)
 4005c88:	1808d23a 	srli	r4,r3,8
 4005c8c:	21803fcc 	andi	r6,r4,255
 4005c90:	11000283 	ldbu	r4,10(r2)
 4005c94:	2008703a 	and	r4,r4,zero
 4005c98:	200b883a 	mov	r5,r4
 4005c9c:	3009883a 	mov	r4,r6
 4005ca0:	2908b03a 	or	r4,r5,r4
 4005ca4:	11000285 	stb	r4,10(r2)
 4005ca8:	1808d43a 	srli	r4,r3,16
 4005cac:	21803fcc 	andi	r6,r4,255
 4005cb0:	110002c3 	ldbu	r4,11(r2)
 4005cb4:	2008703a 	and	r4,r4,zero
 4005cb8:	200b883a 	mov	r5,r4
 4005cbc:	3009883a 	mov	r4,r6
 4005cc0:	2908b03a 	or	r4,r5,r4
 4005cc4:	110002c5 	stb	r4,11(r2)
 4005cc8:	180ad63a 	srli	r5,r3,24
 4005ccc:	10c00303 	ldbu	r3,12(r2)
 4005cd0:	1806703a 	and	r3,r3,zero
 4005cd4:	1809883a 	mov	r4,r3
 4005cd8:	2807883a 	mov	r3,r5
 4005cdc:	20c6b03a 	or	r3,r4,r3
 4005ce0:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
 4005ce4:	e0bffc17 	ldw	r2,-16(fp)
 4005ce8:	10000c05 	stb	zero,48(r2)
        }
        return true;
 4005cec:	00800044 	movi	r2,1
}
 4005cf0:	e037883a 	mov	sp,fp
 4005cf4:	dfc00117 	ldw	ra,4(sp)
 4005cf8:	df000017 	ldw	fp,0(sp)
 4005cfc:	dec00204 	addi	sp,sp,8
 4005d00:	f800283a 	ret

04005d04 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
 4005d04:	defff904 	addi	sp,sp,-28
 4005d08:	dfc00615 	stw	ra,24(sp)
 4005d0c:	df000515 	stw	fp,20(sp)
 4005d10:	df000504 	addi	fp,sp,20
 4005d14:	e13ffc15 	stw	r4,-16(fp)
 4005d18:	e17ffd15 	stw	r5,-12(fp)
 4005d1c:	3007883a 	mov	r3,r6
 4005d20:	3805883a 	mov	r2,r7
 4005d24:	e0fffe05 	stb	r3,-8(fp)
 4005d28:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
 4005d2c:	e0800217 	ldw	r2,8(fp)
 4005d30:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
 4005d34:	e0bffc17 	ldw	r2,-16(fp)
 4005d38:	10800117 	ldw	r2,4(r2)
 4005d3c:	1080004c 	andi	r2,r2,1
 4005d40:	1007883a 	mov	r3,r2
 4005d44:	e0bffb17 	ldw	r2,-20(fp)
 4005d48:	10800003 	ldbu	r2,0(r2)
 4005d4c:	1080004c 	andi	r2,r2,1
 4005d50:	18c03fcc 	andi	r3,r3,255
 4005d54:	10803fcc 	andi	r2,r2,255
 4005d58:	18801426 	beq	r3,r2,4005dac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
 4005d5c:	e0bffb17 	ldw	r2,-20(fp)
 4005d60:	10800003 	ldbu	r2,0(r2)
 4005d64:	1080004c 	andi	r2,r2,1
 4005d68:	10803fcc 	andi	r2,r2,255
 4005d6c:	10000826 	beq	r2,zero,4005d90 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
 4005d70:	e0bffc17 	ldw	r2,-16(fp)
 4005d74:	10800017 	ldw	r2,0(r2)
 4005d78:	10800304 	addi	r2,r2,12
 4005d7c:	10800017 	ldw	r2,0(r2)
 4005d80:	e17ffb17 	ldw	r5,-20(fp)
 4005d84:	e13ffc17 	ldw	r4,-16(fp)
 4005d88:	103ee83a 	callr	r2
 4005d8c:	00000706 	br	4005dac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
 4005d90:	e0bffc17 	ldw	r2,-16(fp)
 4005d94:	10800017 	ldw	r2,0(r2)
 4005d98:	10800204 	addi	r2,r2,8
 4005d9c:	10800017 	ldw	r2,0(r2)
 4005da0:	e17ffb17 	ldw	r5,-20(fp)
 4005da4:	e13ffc17 	ldw	r4,-16(fp)
 4005da8:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
 4005dac:	e0bffc17 	ldw	r2,-16(fp)
 4005db0:	10800117 	ldw	r2,4(r2)
 4005db4:	1004d07a 	srli	r2,r2,1
 4005db8:	1080004c 	andi	r2,r2,1
 4005dbc:	1007883a 	mov	r3,r2
 4005dc0:	e0bffb17 	ldw	r2,-20(fp)
 4005dc4:	10800003 	ldbu	r2,0(r2)
 4005dc8:	1004d07a 	srli	r2,r2,1
 4005dcc:	1080004c 	andi	r2,r2,1
 4005dd0:	18c03fcc 	andi	r3,r3,255
 4005dd4:	10803fcc 	andi	r2,r2,255
 4005dd8:	18801426 	beq	r3,r2,4005e2c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
 4005ddc:	e0bffb17 	ldw	r2,-20(fp)
 4005de0:	10800003 	ldbu	r2,0(r2)
 4005de4:	1080008c 	andi	r2,r2,2
 4005de8:	10803fcc 	andi	r2,r2,255
 4005dec:	10000826 	beq	r2,zero,4005e10 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
 4005df0:	e0bffc17 	ldw	r2,-16(fp)
 4005df4:	10800017 	ldw	r2,0(r2)
 4005df8:	10800504 	addi	r2,r2,20
 4005dfc:	10800017 	ldw	r2,0(r2)
 4005e00:	e17ffb17 	ldw	r5,-20(fp)
 4005e04:	e13ffc17 	ldw	r4,-16(fp)
 4005e08:	103ee83a 	callr	r2
 4005e0c:	00000706 	br	4005e2c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
 4005e10:	e0bffc17 	ldw	r2,-16(fp)
 4005e14:	10800017 	ldw	r2,0(r2)
 4005e18:	10800404 	addi	r2,r2,16
 4005e1c:	10800017 	ldw	r2,0(r2)
 4005e20:	e17ffb17 	ldw	r5,-20(fp)
 4005e24:	e13ffc17 	ldw	r4,-16(fp)
 4005e28:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
 4005e2c:	e0bffc17 	ldw	r2,-16(fp)
 4005e30:	10800117 	ldw	r2,4(r2)
 4005e34:	1004d0ba 	srli	r2,r2,2
 4005e38:	1080004c 	andi	r2,r2,1
 4005e3c:	1007883a 	mov	r3,r2
 4005e40:	e0bffb17 	ldw	r2,-20(fp)
 4005e44:	10800003 	ldbu	r2,0(r2)
 4005e48:	1004d0ba 	srli	r2,r2,2
 4005e4c:	1080004c 	andi	r2,r2,1
 4005e50:	18c03fcc 	andi	r3,r3,255
 4005e54:	10803fcc 	andi	r2,r2,255
 4005e58:	18801426 	beq	r3,r2,4005eac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
 4005e5c:	e0bffb17 	ldw	r2,-20(fp)
 4005e60:	10800003 	ldbu	r2,0(r2)
 4005e64:	1080010c 	andi	r2,r2,4
 4005e68:	10803fcc 	andi	r2,r2,255
 4005e6c:	10000826 	beq	r2,zero,4005e90 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
 4005e70:	e0bffc17 	ldw	r2,-16(fp)
 4005e74:	10800017 	ldw	r2,0(r2)
 4005e78:	10800704 	addi	r2,r2,28
 4005e7c:	10800017 	ldw	r2,0(r2)
 4005e80:	e17ffb17 	ldw	r5,-20(fp)
 4005e84:	e13ffc17 	ldw	r4,-16(fp)
 4005e88:	103ee83a 	callr	r2
 4005e8c:	00000706 	br	4005eac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
 4005e90:	e0bffc17 	ldw	r2,-16(fp)
 4005e94:	10800017 	ldw	r2,0(r2)
 4005e98:	10800604 	addi	r2,r2,24
 4005e9c:	10800017 	ldw	r2,0(r2)
 4005ea0:	e17ffb17 	ldw	r5,-20(fp)
 4005ea4:	e13ffc17 	ldw	r4,-16(fp)
 4005ea8:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
 4005eac:	e0bffb17 	ldw	r2,-20(fp)
 4005eb0:	10800043 	ldbu	r2,1(r2)
 4005eb4:	10803fcc 	andi	r2,r2,255
 4005eb8:	1080201c 	xori	r2,r2,128
 4005ebc:	10bfe004 	addi	r2,r2,-128
 4005ec0:	1000061e 	bne	r2,zero,4005edc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
 4005ec4:	e0bffb17 	ldw	r2,-20(fp)
 4005ec8:	10800083 	ldbu	r2,2(r2)
 4005ecc:	10803fcc 	andi	r2,r2,255
 4005ed0:	1080201c 	xori	r2,r2,128
 4005ed4:	10bfe004 	addi	r2,r2,-128
 4005ed8:	10000726 	beq	r2,zero,4005ef8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
 4005edc:	e0bffc17 	ldw	r2,-16(fp)
 4005ee0:	10800017 	ldw	r2,0(r2)
 4005ee4:	10800104 	addi	r2,r2,4
 4005ee8:	10800017 	ldw	r2,0(r2)
 4005eec:	e17ffb17 	ldw	r5,-20(fp)
 4005ef0:	e13ffc17 	ldw	r4,-16(fp)
 4005ef4:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
 4005ef8:	e0800217 	ldw	r2,8(fp)
 4005efc:	10c00003 	ldbu	r3,0(r2)
 4005f00:	e0bffc17 	ldw	r2,-16(fp)
 4005f04:	10c00105 	stb	r3,4(r2)
#endif

};
 4005f08:	0001883a 	nop
 4005f0c:	e037883a 	mov	sp,fp
 4005f10:	dfc00117 	ldw	ra,4(sp)
 4005f14:	df000017 	ldw	fp,0(sp)
 4005f18:	dec00204 	addi	sp,sp,8
 4005f1c:	f800283a 	ret

04005f20 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
 4005f20:	defff804 	addi	sp,sp,-32
 4005f24:	dfc00715 	stw	ra,28(sp)
 4005f28:	df000615 	stw	fp,24(sp)
 4005f2c:	df000604 	addi	fp,sp,24
 4005f30:	e13ffc15 	stw	r4,-16(fp)
 4005f34:	e17ffd15 	stw	r5,-12(fp)
 4005f38:	3007883a 	mov	r3,r6
 4005f3c:	3805883a 	mov	r2,r7
 4005f40:	e0fffe05 	stb	r3,-8(fp)
 4005f44:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
 4005f48:	e0800217 	ldw	r2,8(fp)
 4005f4c:	10800084 	addi	r2,r2,2
 4005f50:	10800003 	ldbu	r2,0(r2)
 4005f54:	10803fcc 	andi	r2,r2,255
 4005f58:	10800058 	cmpnei	r2,r2,1
 4005f5c:	10009926 	beq	r2,zero,40061c4 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
 4005f60:	e0bffc17 	ldw	r2,-16(fp)
 4005f64:	10c00103 	ldbu	r3,4(r2)
 4005f68:	e0800217 	ldw	r2,8(fp)
 4005f6c:	10800003 	ldbu	r2,0(r2)
 4005f70:	18c03fcc 	andi	r3,r3,255
 4005f74:	10803fcc 	andi	r2,r2,255
 4005f78:	18800e26 	beq	r3,r2,4005fb4 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
 4005f7c:	e0bffc17 	ldw	r2,-16(fp)
 4005f80:	10800017 	ldw	r2,0(r2)
 4005f84:	10800204 	addi	r2,r2,8
 4005f88:	10800017 	ldw	r2,0(r2)
 4005f8c:	e0fffc17 	ldw	r3,-16(fp)
 4005f90:	18c00103 	ldbu	r3,4(r3)
 4005f94:	19003fcc 	andi	r4,r3,255
 4005f98:	e0c00217 	ldw	r3,8(fp)
 4005f9c:	18c00003 	ldbu	r3,0(r3)
 4005fa0:	18c03fcc 	andi	r3,r3,255
 4005fa4:	180d883a 	mov	r6,r3
 4005fa8:	200b883a 	mov	r5,r4
 4005fac:	e13ffc17 	ldw	r4,-16(fp)
 4005fb0:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
 4005fb4:	00800084 	movi	r2,2
 4005fb8:	e0bffa05 	stb	r2,-24(fp)
 4005fbc:	e0bffa03 	ldbu	r2,-24(fp)
 4005fc0:	10800228 	cmpgeui	r2,r2,8
 4005fc4:	10006e1e 	bne	r2,zero,4006180 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
 4005fc8:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
 4005fcc:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
 4005fd0:	00800084 	movi	r2,2
 4005fd4:	e0bffac5 	stb	r2,-21(fp)
 4005fd8:	e0bffac3 	ldbu	r2,-21(fp)
 4005fdc:	10800228 	cmpgeui	r2,r2,8
 4005fe0:	10002f1e 	bne	r2,zero,40060a0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
 4005fe4:	e0bffa03 	ldbu	r2,-24(fp)
 4005fe8:	e0c00217 	ldw	r3,8(fp)
 4005fec:	1885883a 	add	r2,r3,r2
 4005ff0:	11000003 	ldbu	r4,0(r2)
 4005ff4:	e0bffac3 	ldbu	r2,-21(fp)
 4005ff8:	e0fffc17 	ldw	r3,-16(fp)
 4005ffc:	1885883a 	add	r2,r3,r2
 4006000:	10800104 	addi	r2,r2,4
 4006004:	10800003 	ldbu	r2,0(r2)
 4006008:	20c03fcc 	andi	r3,r4,255
 400600c:	10803fcc 	andi	r2,r2,255
 4006010:	1880091e 	bne	r3,r2,4006038 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
 4006014:	e0bffa03 	ldbu	r2,-24(fp)
 4006018:	e0c00217 	ldw	r3,8(fp)
 400601c:	1885883a 	add	r2,r3,r2
 4006020:	10800003 	ldbu	r2,0(r2)
 4006024:	10803fcc 	andi	r2,r2,255
 4006028:	10800060 	cmpeqi	r2,r2,1
 400602c:	1000021e 	bne	r2,zero,4006038 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
 4006030:	00800044 	movi	r2,1
 4006034:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
 4006038:	e0bffac3 	ldbu	r2,-21(fp)
 400603c:	e0c00217 	ldw	r3,8(fp)
 4006040:	1885883a 	add	r2,r3,r2
 4006044:	11000003 	ldbu	r4,0(r2)
 4006048:	e0bffa03 	ldbu	r2,-24(fp)
 400604c:	e0fffc17 	ldw	r3,-16(fp)
 4006050:	1885883a 	add	r2,r3,r2
 4006054:	10800104 	addi	r2,r2,4
 4006058:	10800003 	ldbu	r2,0(r2)
 400605c:	20c03fcc 	andi	r3,r4,255
 4006060:	10803fcc 	andi	r2,r2,255
 4006064:	18800a1e 	bne	r3,r2,4006090 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
 4006068:	e0bffa03 	ldbu	r2,-24(fp)
 400606c:	e0fffc17 	ldw	r3,-16(fp)
 4006070:	1885883a 	add	r2,r3,r2
 4006074:	10800104 	addi	r2,r2,4
 4006078:	10800003 	ldbu	r2,0(r2)
 400607c:	10803fcc 	andi	r2,r2,255
 4006080:	10800060 	cmpeqi	r2,r2,1
 4006084:	1000021e 	bne	r2,zero,4006090 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
 4006088:	00800044 	movi	r2,1
 400608c:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
 4006090:	e0bffac3 	ldbu	r2,-21(fp)
 4006094:	10800044 	addi	r2,r2,1
 4006098:	e0bffac5 	stb	r2,-21(fp)
 400609c:	003fce06 	br	4005fd8 <__alt_mem_onchip_memory2_0+0xfc004d58>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
 40060a0:	e0bffa43 	ldbu	r2,-23(fp)
 40060a4:	1080005c 	xori	r2,r2,1
 40060a8:	10803fcc 	andi	r2,r2,255
 40060ac:	10001c26 	beq	r2,zero,4006120 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
 40060b0:	e0bffc17 	ldw	r2,-16(fp)
 40060b4:	10800017 	ldw	r2,0(r2)
 40060b8:	10800104 	addi	r2,r2,4
 40060bc:	10800017 	ldw	r2,0(r2)
 40060c0:	e0fffa03 	ldbu	r3,-24(fp)
 40060c4:	e1000217 	ldw	r4,8(fp)
 40060c8:	20c7883a 	add	r3,r4,r3
 40060cc:	18c00003 	ldbu	r3,0(r3)
 40060d0:	18c03fcc 	andi	r3,r3,255
 40060d4:	180d883a 	mov	r6,r3
 40060d8:	e17ffd17 	ldw	r5,-12(fp)
 40060dc:	e13ffc17 	ldw	r4,-16(fp)
 40060e0:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
 40060e4:	e0bffc17 	ldw	r2,-16(fp)
 40060e8:	10800017 	ldw	r2,0(r2)
 40060ec:	10800304 	addi	r2,r2,12
 40060f0:	10800017 	ldw	r2,0(r2)
 40060f4:	e0c00217 	ldw	r3,8(fp)
 40060f8:	18c00003 	ldbu	r3,0(r3)
 40060fc:	19403fcc 	andi	r5,r3,255
 4006100:	e0fffa03 	ldbu	r3,-24(fp)
 4006104:	e1000217 	ldw	r4,8(fp)
 4006108:	20c7883a 	add	r3,r4,r3
 400610c:	18c00003 	ldbu	r3,0(r3)
 4006110:	18c03fcc 	andi	r3,r3,255
 4006114:	180d883a 	mov	r6,r3
 4006118:	e13ffc17 	ldw	r4,-16(fp)
 400611c:	103ee83a 	callr	r2
                }
                if (!up)
 4006120:	e0bffa83 	ldbu	r2,-22(fp)
 4006124:	1080005c 	xori	r2,r2,1
 4006128:	10803fcc 	andi	r2,r2,255
 400612c:	10001026 	beq	r2,zero,4006170 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
 4006130:	e0bffc17 	ldw	r2,-16(fp)
 4006134:	10800017 	ldw	r2,0(r2)
 4006138:	10800404 	addi	r2,r2,16
 400613c:	10800017 	ldw	r2,0(r2)
 4006140:	e0fffc17 	ldw	r3,-16(fp)
 4006144:	18c00103 	ldbu	r3,4(r3)
 4006148:	19403fcc 	andi	r5,r3,255
 400614c:	e0fffa03 	ldbu	r3,-24(fp)
 4006150:	e13ffc17 	ldw	r4,-16(fp)
 4006154:	20c7883a 	add	r3,r4,r3
 4006158:	18c00104 	addi	r3,r3,4
 400615c:	18c00003 	ldbu	r3,0(r3)
 4006160:	18c03fcc 	andi	r3,r3,255
 4006164:	180d883a 	mov	r6,r3
 4006168:	e13ffc17 	ldw	r4,-16(fp)
 400616c:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
 4006170:	e0bffa03 	ldbu	r2,-24(fp)
 4006174:	10800044 	addi	r2,r2,1
 4006178:	e0bffa05 	stb	r2,-24(fp)
 400617c:	003f8f06 	br	4005fbc <__alt_mem_onchip_memory2_0+0xfc004d3c>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
 4006180:	e03ffb05 	stb	zero,-20(fp)
 4006184:	e0bffb03 	ldbu	r2,-20(fp)
 4006188:	10800228 	cmpgeui	r2,r2,8
 400618c:	10000e1e 	bne	r2,zero,40061c8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
 4006190:	e0bffb03 	ldbu	r2,-20(fp)
 4006194:	e0fffb03 	ldbu	r3,-20(fp)
 4006198:	e1000217 	ldw	r4,8(fp)
 400619c:	20c7883a 	add	r3,r4,r3
 40061a0:	18c00003 	ldbu	r3,0(r3)
 40061a4:	e13ffc17 	ldw	r4,-16(fp)
 40061a8:	2085883a 	add	r2,r4,r2
 40061ac:	10800104 	addi	r2,r2,4
 40061b0:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
 40061b4:	e0bffb03 	ldbu	r2,-20(fp)
 40061b8:	10800044 	addi	r2,r2,1
 40061bc:	e0bffb05 	stb	r2,-20(fp)
 40061c0:	003ff006 	br	4006184 <__alt_mem_onchip_memory2_0+0xfc004f04>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
 40061c4:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
 40061c8:	e037883a 	mov	sp,fp
 40061cc:	dfc00117 	ldw	ra,4(sp)
 40061d0:	df000017 	ldw	fp,0(sp)
 40061d4:	dec00204 	addi	sp,sp,8
 40061d8:	f800283a 	ret

040061dc <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
 40061dc:	defffa04 	addi	sp,sp,-24
 40061e0:	dfc00515 	stw	ra,20(sp)
 40061e4:	df000415 	stw	fp,16(sp)
 40061e8:	df000404 	addi	fp,sp,16
 40061ec:	e13ffd15 	stw	r4,-12(fp)
 40061f0:	2807883a 	mov	r3,r5
 40061f4:	3005883a 	mov	r2,r6
 40061f8:	e0fffe05 	stb	r3,-8(fp)
 40061fc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
 4006200:	e0bffe03 	ldbu	r2,-8(fp)
 4006204:	1080088c 	andi	r2,r2,34
 4006208:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
 400620c:	e0bfff03 	ldbu	r2,-4(fp)
 4006210:	10800130 	cmpltui	r2,r2,4
 4006214:	1000151e 	bne	r2,zero,400626c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
 4006218:	e0bfff03 	ldbu	r2,-4(fp)
 400621c:	108007a8 	cmpgeui	r2,r2,30
 4006220:	1000121e 	bne	r2,zero,400626c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
 4006224:	e0bffd17 	ldw	r2,-12(fp)
 4006228:	10800317 	ldw	r2,12(r2)
 400622c:	1080008c 	andi	r2,r2,2
 4006230:	1000021e 	bne	r2,zero,400623c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
 4006234:	e0bffc03 	ldbu	r2,-16(fp)
 4006238:	1000061e 	bne	r2,zero,4006254 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
 400623c:	e0bffd17 	ldw	r2,-12(fp)
 4006240:	10800317 	ldw	r2,12(r2)
 4006244:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
 4006248:	10000526 	beq	r2,zero,4006260 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
 400624c:	e0bffc03 	ldbu	r2,-16(fp)
 4006250:	1000031e 	bne	r2,zero,4006260 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
 4006254:	e0bfff03 	ldbu	r2,-4(fp)
 4006258:	10800f44 	addi	r2,r2,61
 400625c:	00008006 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
 4006260:	e0bfff03 	ldbu	r2,-4(fp)
 4006264:	10801744 	addi	r2,r2,93
 4006268:	00007d06 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
 400626c:	e0bfff03 	ldbu	r2,-4(fp)
 4006270:	108007b0 	cmpltui	r2,r2,30
 4006274:	1000191e 	bne	r2,zero,40062dc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
 4006278:	e0bfff03 	ldbu	r2,-4(fp)
 400627c:	10800a28 	cmpgeui	r2,r2,40
 4006280:	1000161e 	bne	r2,zero,40062dc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
 4006284:	e0bffc03 	ldbu	r2,-16(fp)
 4006288:	10000c26 	beq	r2,zero,40062bc <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
 400628c:	e0bffd17 	ldw	r2,-12(fp)
 4006290:	10800017 	ldw	r2,0(r2)
 4006294:	10800504 	addi	r2,r2,20
 4006298:	10800017 	ldw	r2,0(r2)
 400629c:	e13ffd17 	ldw	r4,-12(fp)
 40062a0:	103ee83a 	callr	r2
 40062a4:	1007883a 	mov	r3,r2
 40062a8:	e0bfff03 	ldbu	r2,-4(fp)
 40062ac:	10bff884 	addi	r2,r2,-30
 40062b0:	1885883a 	add	r2,r3,r2
 40062b4:	10800003 	ldbu	r2,0(r2)
 40062b8:	00006906 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
 40062bc:	e0bfff03 	ldbu	r2,-4(fp)
 40062c0:	108009e0 	cmpeqi	r2,r2,39
 40062c4:	1000031e 	bne	r2,zero,40062d4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
 40062c8:	e0bfff03 	ldbu	r2,-4(fp)
 40062cc:	108004c4 	addi	r2,r2,19
 40062d0:	00006306 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 40062d4:	00800c04 	movi	r2,48
 40062d8:	00006106 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
 40062dc:	e0bfff03 	ldbu	r2,-4(fp)
 40062e0:	10801670 	cmpltui	r2,r2,89
 40062e4:	10000a1e 	bne	r2,zero,4006310 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
 40062e8:	e0bfff03 	ldbu	r2,-4(fp)
 40062ec:	108018a8 	cmpgeui	r2,r2,98
 40062f0:	1000071e 	bne	r2,zero,4006310 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
 40062f4:	e0bffd17 	ldw	r2,-12(fp)
 40062f8:	10800317 	ldw	r2,12(r2)
 40062fc:	1080004c 	andi	r2,r2,1
 4006300:	10005626 	beq	r2,zero,400645c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
 4006304:	e0bfff03 	ldbu	r2,-4(fp)
 4006308:	10bff604 	addi	r2,r2,-40
 400630c:	00005406 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
 4006310:	e0bfff03 	ldbu	r2,-4(fp)
 4006314:	10800b70 	cmpltui	r2,r2,45
 4006318:	10001d1e 	bne	r2,zero,4006390 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
 400631c:	e0bfff03 	ldbu	r2,-4(fp)
 4006320:	10800e68 	cmpgeui	r2,r2,57
 4006324:	10001a1e 	bne	r2,zero,4006390 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
 4006328:	e0bffc03 	ldbu	r2,-16(fp)
 400632c:	10000c26 	beq	r2,zero,4006360 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
 4006330:	e0bffd17 	ldw	r2,-12(fp)
 4006334:	10800017 	ldw	r2,0(r2)
 4006338:	10800604 	addi	r2,r2,24
 400633c:	10800017 	ldw	r2,0(r2)
 4006340:	e13ffd17 	ldw	r4,-12(fp)
 4006344:	103ee83a 	callr	r2
 4006348:	1007883a 	mov	r3,r2
 400634c:	e0bfff03 	ldbu	r2,-4(fp)
 4006350:	10bff4c4 	addi	r2,r2,-45
 4006354:	1885883a 	add	r2,r3,r2
 4006358:	10800003 	ldbu	r2,0(r2)
 400635c:	00004006 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4006360:	e0bffd17 	ldw	r2,-12(fp)
 4006364:	10800017 	ldw	r2,0(r2)
 4006368:	10800704 	addi	r2,r2,28
 400636c:	10800017 	ldw	r2,0(r2)
 4006370:	e13ffd17 	ldw	r4,-12(fp)
 4006374:	103ee83a 	callr	r2
 4006378:	1007883a 	mov	r3,r2
 400637c:	e0bfff03 	ldbu	r2,-4(fp)
 4006380:	10bff4c4 	addi	r2,r2,-45
 4006384:	1885883a 	add	r2,r3,r2
 4006388:	10800003 	ldbu	r2,0(r2)
 400638c:	00003406 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
 4006390:	e0bfff03 	ldbu	r2,-4(fp)
 4006394:	10801530 	cmpltui	r2,r2,84
 4006398:	10000f1e 	bne	r2,zero,40063d8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
 400639c:	e0bfff03 	ldbu	r2,-4(fp)
 40063a0:	10801668 	cmpgeui	r2,r2,89
 40063a4:	10000c1e 	bne	r2,zero,40063d8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
 40063a8:	e0bffd17 	ldw	r2,-12(fp)
 40063ac:	10800017 	ldw	r2,0(r2)
 40063b0:	10800804 	addi	r2,r2,32
 40063b4:	10800017 	ldw	r2,0(r2)
 40063b8:	e13ffd17 	ldw	r4,-12(fp)
 40063bc:	103ee83a 	callr	r2
 40063c0:	1007883a 	mov	r3,r2
 40063c4:	e0bfff03 	ldbu	r2,-4(fp)
 40063c8:	10bfeb04 	addi	r2,r2,-84
 40063cc:	1885883a 	add	r2,r3,r2
 40063d0:	10800003 	ldbu	r2,0(r2)
 40063d4:	00002206 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
 40063d8:	e0bfff03 	ldbu	r2,-4(fp)
 40063dc:	10c00b20 	cmpeqi	r3,r2,44
 40063e0:	18000a1e 	bne	r3,zero,400640c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
 40063e4:	10c00b48 	cmpgei	r3,r2,45
 40063e8:	1800031e 	bne	r3,zero,40063f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
 40063ec:	10800a20 	cmpeqi	r2,r2,40
 40063f0:	1000081e 	bne	r2,zero,4006414 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
 40063f4:	00001906 	br	400645c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
 40063f8:	10c018a0 	cmpeqi	r3,r2,98
 40063fc:	1800071e 	bne	r3,zero,400641c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
 4006400:	108018e0 	cmpeqi	r2,r2,99
 4006404:	10000d1e 	bne	r2,zero,400643c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
 4006408:	00001406 	br	400645c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
 400640c:	00800804 	movi	r2,32
 4006410:	00001306 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
 4006414:	00800344 	movi	r2,13
 4006418:	00001106 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
 400641c:	e0bffd17 	ldw	r2,-12(fp)
 4006420:	10800317 	ldw	r2,12(r2)
 4006424:	1080004c 	andi	r2,r2,1
 4006428:	10000226 	beq	r2,zero,4006434 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
 400642c:	00800c04 	movi	r2,48
 4006430:	00000b06 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4006434:	0005883a 	mov	r2,zero
 4006438:	00000906 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
 400643c:	e0bffd17 	ldw	r2,-12(fp)
 4006440:	10800317 	ldw	r2,12(r2)
 4006444:	1080004c 	andi	r2,r2,1
 4006448:	10000226 	beq	r2,zero,4006454 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
 400644c:	00800b84 	movi	r2,46
 4006450:	00000306 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4006454:	0005883a 	mov	r2,zero
 4006458:	00000106 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
 400645c:	0005883a 	mov	r2,zero
}
 4006460:	e037883a 	mov	sp,fp
 4006464:	dfc00117 	ldw	ra,4(sp)
 4006468:	df000017 	ldw	fp,0(sp)
 400646c:	dec00204 	addi	sp,sp,8
 4006470:	f800283a 	ret

04006474 <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
 4006474:	defffd04 	addi	sp,sp,-12
 4006478:	df000215 	stw	fp,8(sp)
 400647c:	df000204 	addi	fp,sp,8
 4006480:	e13ffe15 	stw	r4,-8(fp)
 4006484:	e17fff15 	stw	r5,-4(fp)
        };
 4006488:	0001883a 	nop
 400648c:	e037883a 	mov	sp,fp
 4006490:	df000017 	ldw	fp,0(sp)
 4006494:	dec00104 	addi	sp,sp,4
 4006498:	f800283a 	ret

0400649c <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 400649c:	defffd04 	addi	sp,sp,-12
 40064a0:	df000215 	stw	fp,8(sp)
 40064a4:	df000204 	addi	fp,sp,8
 40064a8:	e13ffe15 	stw	r4,-8(fp)
 40064ac:	e17fff15 	stw	r5,-4(fp)
        };
 40064b0:	0001883a 	nop
 40064b4:	e037883a 	mov	sp,fp
 40064b8:	df000017 	ldw	fp,0(sp)
 40064bc:	dec00104 	addi	sp,sp,4
 40064c0:	f800283a 	ret

040064c4 <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 40064c4:	defffd04 	addi	sp,sp,-12
 40064c8:	df000215 	stw	fp,8(sp)
 40064cc:	df000204 	addi	fp,sp,8
 40064d0:	e13ffe15 	stw	r4,-8(fp)
 40064d4:	e17fff15 	stw	r5,-4(fp)
        };
 40064d8:	0001883a 	nop
 40064dc:	e037883a 	mov	sp,fp
 40064e0:	df000017 	ldw	fp,0(sp)
 40064e4:	dec00104 	addi	sp,sp,4
 40064e8:	f800283a 	ret

040064ec <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 40064ec:	defffd04 	addi	sp,sp,-12
 40064f0:	df000215 	stw	fp,8(sp)
 40064f4:	df000204 	addi	fp,sp,8
 40064f8:	e13ffe15 	stw	r4,-8(fp)
 40064fc:	e17fff15 	stw	r5,-4(fp)
        };
 4006500:	0001883a 	nop
 4006504:	e037883a 	mov	sp,fp
 4006508:	df000017 	ldw	fp,0(sp)
 400650c:	dec00104 	addi	sp,sp,4
 4006510:	f800283a 	ret

04006514 <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 4006514:	defffd04 	addi	sp,sp,-12
 4006518:	df000215 	stw	fp,8(sp)
 400651c:	df000204 	addi	fp,sp,8
 4006520:	e13ffe15 	stw	r4,-8(fp)
 4006524:	e17fff15 	stw	r5,-4(fp)
        };
 4006528:	0001883a 	nop
 400652c:	e037883a 	mov	sp,fp
 4006530:	df000017 	ldw	fp,0(sp)
 4006534:	dec00104 	addi	sp,sp,4
 4006538:	f800283a 	ret

0400653c <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 400653c:	defffd04 	addi	sp,sp,-12
 4006540:	df000215 	stw	fp,8(sp)
 4006544:	df000204 	addi	fp,sp,8
 4006548:	e13ffe15 	stw	r4,-8(fp)
 400654c:	e17fff15 	stw	r5,-4(fp)
        };
 4006550:	0001883a 	nop
 4006554:	e037883a 	mov	sp,fp
 4006558:	df000017 	ldw	fp,0(sp)
 400655c:	dec00104 	addi	sp,sp,4
 4006560:	f800283a 	ret

04006564 <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 4006564:	defffd04 	addi	sp,sp,-12
 4006568:	df000215 	stw	fp,8(sp)
 400656c:	df000204 	addi	fp,sp,8
 4006570:	e13ffe15 	stw	r4,-8(fp)
 4006574:	e17fff15 	stw	r5,-4(fp)
        };
 4006578:	0001883a 	nop
 400657c:	e037883a 	mov	sp,fp
 4006580:	df000017 	ldw	fp,0(sp)
 4006584:	dec00104 	addi	sp,sp,4
 4006588:	f800283a 	ret

0400658c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
 400658c:	defff704 	addi	sp,sp,-36
 4006590:	dfc00815 	stw	ra,32(sp)
 4006594:	df000715 	stw	fp,28(sp)
 4006598:	df000704 	addi	fp,sp,28
 400659c:	e13ffd15 	stw	r4,-12(fp)
 40065a0:	e17ffe15 	stw	r5,-8(fp)
 40065a4:	3005883a 	mov	r2,r6
 40065a8:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
 40065ac:	e0bffd17 	ldw	r2,-12(fp)
 40065b0:	10800303 	ldbu	r2,12(r2)
 40065b4:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
 40065b8:	e0bfff03 	ldbu	r2,-4(fp)
 40065bc:	10c011e0 	cmpeqi	r3,r2,71
 40065c0:	1800271e 	bne	r3,zero,4006660 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
 40065c4:	10c014e0 	cmpeqi	r3,r2,83
 40065c8:	1800031e 	bne	r3,zero,40065d8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
 40065cc:	10800e60 	cmpeqi	r2,r2,57
 40065d0:	1000111e 	bne	r2,zero,4006618 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
 40065d4:	00003506 	br	40066ac <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
 40065d8:	e0bffd17 	ldw	r2,-12(fp)
 40065dc:	10800317 	ldw	r2,12(r2)
 40065e0:	1080004c 	andi	r2,r2,1
 40065e4:	0084303a 	nor	r2,zero,r2
 40065e8:	1080004c 	andi	r2,r2,1
 40065ec:	1007883a 	mov	r3,r2
 40065f0:	e0bffd17 	ldw	r2,-12(fp)
 40065f4:	1940004c 	andi	r5,r3,1
 40065f8:	11000303 	ldbu	r4,12(r2)
 40065fc:	00ffff84 	movi	r3,-2
 4006600:	20c6703a 	and	r3,r4,r3
 4006604:	1809883a 	mov	r4,r3
 4006608:	2807883a 	mov	r3,r5
 400660c:	20c6b03a 	or	r3,r4,r3
 4006610:	10c00305 	stb	r3,12(r2)
                                break;
 4006614:	00002506 	br	40066ac <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
 4006618:	e0bffd17 	ldw	r2,-12(fp)
 400661c:	10800317 	ldw	r2,12(r2)
 4006620:	1004d07a 	srli	r2,r2,1
 4006624:	1080004c 	andi	r2,r2,1
 4006628:	0084303a 	nor	r2,zero,r2
 400662c:	1080004c 	andi	r2,r2,1
 4006630:	1007883a 	mov	r3,r2
 4006634:	e0bffd17 	ldw	r2,-12(fp)
 4006638:	18c0004c 	andi	r3,r3,1
 400663c:	18cb883a 	add	r5,r3,r3
 4006640:	11000303 	ldbu	r4,12(r2)
 4006644:	00ffff44 	movi	r3,-3
 4006648:	20c6703a 	and	r3,r4,r3
 400664c:	1809883a 	mov	r4,r3
 4006650:	2807883a 	mov	r3,r5
 4006654:	20c6b03a 	or	r3,r4,r3
 4006658:	10c00305 	stb	r3,12(r2)
                                break;
 400665c:	00001306 	br	40066ac <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
 4006660:	e0bffd17 	ldw	r2,-12(fp)
 4006664:	10800317 	ldw	r2,12(r2)
 4006668:	1004d0ba 	srli	r2,r2,2
 400666c:	1080004c 	andi	r2,r2,1
 4006670:	0084303a 	nor	r2,zero,r2
 4006674:	1080004c 	andi	r2,r2,1
 4006678:	1007883a 	mov	r3,r2
 400667c:	e0bffd17 	ldw	r2,-12(fp)
 4006680:	18c0004c 	andi	r3,r3,1
 4006684:	18c7883a 	add	r3,r3,r3
 4006688:	18cb883a 	add	r5,r3,r3
 400668c:	11000303 	ldbu	r4,12(r2)
 4006690:	00fffec4 	movi	r3,-5
 4006694:	20c6703a 	and	r3,r4,r3
 4006698:	1809883a 	mov	r4,r3
 400669c:	2807883a 	mov	r3,r5
 40066a0:	20c6b03a 	or	r3,r4,r3
 40066a4:	10c00305 	stb	r3,12(r2)
                                break;
 40066a8:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
 40066ac:	e0bffd17 	ldw	r2,-12(fp)
 40066b0:	10800303 	ldbu	r2,12(r2)
 40066b4:	10c03fcc 	andi	r3,r2,255
 40066b8:	e0bffc03 	ldbu	r2,-16(fp)
 40066bc:	18801026 	beq	r3,r2,4006700 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
 40066c0:	e0bffe17 	ldw	r2,-8(fp)
 40066c4:	10000e26 	beq	r2,zero,4006700 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
 40066c8:	e0bffd17 	ldw	r2,-12(fp)
 40066cc:	10800303 	ldbu	r2,12(r2)
 40066d0:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
 40066d4:	e0bffc44 	addi	r2,fp,-15
 40066d8:	d8800215 	stw	r2,8(sp)
 40066dc:	00800044 	movi	r2,1
 40066e0:	d8800115 	stw	r2,4(sp)
 40066e4:	d8000015 	stw	zero,0(sp)
 40066e8:	01c00084 	movi	r7,2
 40066ec:	000d883a 	mov	r6,zero
 40066f0:	000b883a 	mov	r5,zero
 40066f4:	e13ffe17 	ldw	r4,-8(fp)
 40066f8:	4008df00 	call	4008df0 <_ZN6USBHID9SetReportEhhhhtPh>
 40066fc:	00000106 	br	4006704 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
 4006700:	0005883a 	mov	r2,zero
        };
 4006704:	e037883a 	mov	sp,fp
 4006708:	dfc00117 	ldw	ra,4(sp)
 400670c:	df000017 	ldw	fp,0(sp)
 4006710:	dec00204 	addi	sp,sp,8
 4006714:	f800283a 	ret

04006718 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
 4006718:	defffc04 	addi	sp,sp,-16
 400671c:	df000315 	stw	fp,12(sp)
 4006720:	df000304 	addi	fp,sp,12
 4006724:	e13ffd15 	stw	r4,-12(fp)
 4006728:	2807883a 	mov	r3,r5
 400672c:	3005883a 	mov	r2,r6
 4006730:	e0fffe05 	stb	r3,-8(fp)
 4006734:	e0bfff05 	stb	r2,-4(fp)
        };
 4006738:	0001883a 	nop
 400673c:	e037883a 	mov	sp,fp
 4006740:	df000017 	ldw	fp,0(sp)
 4006744:	dec00104 	addi	sp,sp,4
 4006748:	f800283a 	ret

0400674c <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
 400674c:	defffc04 	addi	sp,sp,-16
 4006750:	df000315 	stw	fp,12(sp)
 4006754:	df000304 	addi	fp,sp,12
 4006758:	e13ffd15 	stw	r4,-12(fp)
 400675c:	2807883a 	mov	r3,r5
 4006760:	3005883a 	mov	r2,r6
 4006764:	e0fffe05 	stb	r3,-8(fp)
 4006768:	e0bfff05 	stb	r2,-4(fp)
        };
 400676c:	0001883a 	nop
 4006770:	e037883a 	mov	sp,fp
 4006774:	df000017 	ldw	fp,0(sp)
 4006778:	dec00104 	addi	sp,sp,4
 400677c:	f800283a 	ret

04006780 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
 4006780:	defffc04 	addi	sp,sp,-16
 4006784:	df000315 	stw	fp,12(sp)
 4006788:	df000304 	addi	fp,sp,12
 400678c:	e13ffd15 	stw	r4,-12(fp)
 4006790:	2807883a 	mov	r3,r5
 4006794:	3005883a 	mov	r2,r6
 4006798:	e0fffe05 	stb	r3,-8(fp)
 400679c:	e0bfff05 	stb	r2,-4(fp)
        };
 40067a0:	0001883a 	nop
 40067a4:	e037883a 	mov	sp,fp
 40067a8:	df000017 	ldw	fp,0(sp)
 40067ac:	dec00104 	addi	sp,sp,4
 40067b0:	f800283a 	ret

040067b4 <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
 40067b4:	defffe04 	addi	sp,sp,-8
 40067b8:	df000115 	stw	fp,4(sp)
 40067bc:	df000104 	addi	fp,sp,4
 40067c0:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
 40067c4:	008100b4 	movhi	r2,1026
 40067c8:	1088fe84 	addi	r2,r2,9210
        };
 40067cc:	e037883a 	mov	sp,fp
 40067d0:	df000017 	ldw	fp,0(sp)
 40067d4:	dec00104 	addi	sp,sp,4
 40067d8:	f800283a 	ret

040067dc <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
 40067dc:	defffe04 	addi	sp,sp,-8
 40067e0:	df000115 	stw	fp,4(sp)
 40067e4:	df000104 	addi	fp,sp,4
 40067e8:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
 40067ec:	008100b4 	movhi	r2,1026
 40067f0:	10890104 	addi	r2,r2,9220
        };
 40067f4:	e037883a 	mov	sp,fp
 40067f8:	df000017 	ldw	fp,0(sp)
 40067fc:	dec00104 	addi	sp,sp,4
 4006800:	f800283a 	ret

04006804 <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
 4006804:	defffe04 	addi	sp,sp,-8
 4006808:	df000115 	stw	fp,4(sp)
 400680c:	df000104 	addi	fp,sp,4
 4006810:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
 4006814:	008100b4 	movhi	r2,1026
 4006818:	10890404 	addi	r2,r2,9232
        };
 400681c:	e037883a 	mov	sp,fp
 4006820:	df000017 	ldw	fp,0(sp)
 4006824:	dec00104 	addi	sp,sp,4
 4006828:	f800283a 	ret

0400682c <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
 400682c:	defffe04 	addi	sp,sp,-8
 4006830:	df000115 	stw	fp,4(sp)
 4006834:	df000104 	addi	fp,sp,4
 4006838:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
 400683c:	d0a1e584 	addi	r2,gp,-30826
        };
 4006840:	e037883a 	mov	sp,fp
 4006844:	df000017 	ldw	fp,0(sp)
 4006848:	dec00104 	addi	sp,sp,4
 400684c:	f800283a 	ret

04006850 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
 4006850:	defffc04 	addi	sp,sp,-16
 4006854:	dfc00315 	stw	ra,12(sp)
 4006858:	df000215 	stw	fp,8(sp)
 400685c:	df000204 	addi	fp,sp,8
 4006860:	2005883a 	mov	r2,r4
 4006864:	e17fff15 	stw	r5,-4(fp)
 4006868:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
 400686c:	d0e1ea17 	ldw	r3,-30808(gp)
 4006870:	e0bfff17 	ldw	r2,-4(fp)
 4006874:	18800416 	blt	r3,r2,4006888 <_Z9E_Notifycci+0x38>
        printf("%c", c);
 4006878:	e0bffe07 	ldb	r2,-8(fp)
 400687c:	1009883a 	mov	r4,r2
 4006880:	400ec2c0 	call	400ec2c <putchar>
 4006884:	00000106 	br	400688c <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 4006888:	0001883a 	nop
        printf("%c", c);
}
 400688c:	e037883a 	mov	sp,fp
 4006890:	dfc00117 	ldw	ra,4(sp)
 4006894:	df000017 	ldw	fp,0(sp)
 4006898:	dec00204 	addi	sp,sp,8
 400689c:	f800283a 	ret

040068a0 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
 40068a0:	defffb04 	addi	sp,sp,-20
 40068a4:	dfc00415 	stw	ra,16(sp)
 40068a8:	df000315 	stw	fp,12(sp)
 40068ac:	df000304 	addi	fp,sp,12
 40068b0:	e13ffe15 	stw	r4,-8(fp)
 40068b4:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
 40068b8:	d0e1ea17 	ldw	r3,-30808(gp)
 40068bc:	e0bfff17 	ldw	r2,-4(fp)
 40068c0:	18801016 	blt	r3,r2,4006904 <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
 40068c4:	e0bffe17 	ldw	r2,-8(fp)
 40068c8:	10001026 	beq	r2,zero,400690c <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
 40068cc:	e0bffe17 	ldw	r2,-8(fp)
 40068d0:	10c00044 	addi	r3,r2,1
 40068d4:	e0fffe15 	stw	r3,-8(fp)
 40068d8:	10800003 	ldbu	r2,0(r2)
 40068dc:	e0bffd05 	stb	r2,-12(fp)
 40068e0:	e0bffd07 	ldb	r2,-12(fp)
 40068e4:	1004c03a 	cmpne	r2,r2,zero
 40068e8:	10803fcc 	andi	r2,r2,255
 40068ec:	10000826 	beq	r2,zero,4006910 <_Z8E_NotifyPKci+0x70>
 40068f0:	e0bffd07 	ldb	r2,-12(fp)
 40068f4:	e17fff17 	ldw	r5,-4(fp)
 40068f8:	1009883a 	mov	r4,r2
 40068fc:	40068500 	call	4006850 <_Z9E_Notifycci>
 4006900:	003ff206 	br	40068cc <__alt_mem_onchip_memory2_0+0xfc00564c>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 4006904:	0001883a 	nop
 4006908:	00000106 	br	4006910 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
 400690c:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
 4006910:	e037883a 	mov	sp,fp
 4006914:	dfc00117 	ldw	ra,4(sp)
 4006918:	df000017 	ldw	fp,0(sp)
 400691c:	dec00204 	addi	sp,sp,8
 4006920:	f800283a 	ret

04006924 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
 4006924:	defffb04 	addi	sp,sp,-20
 4006928:	dfc00415 	stw	ra,16(sp)
 400692c:	df000315 	stw	fp,12(sp)
 4006930:	df000304 	addi	fp,sp,12
 4006934:	e13ffe15 	stw	r4,-8(fp)
 4006938:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
 400693c:	d0e1ea17 	ldw	r3,-30808(gp)
 4006940:	e0bfff17 	ldw	r2,-4(fp)
 4006944:	18801016 	blt	r3,r2,4006988 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
 4006948:	e0bffe17 	ldw	r2,-8(fp)
 400694c:	10001026 	beq	r2,zero,4006990 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
 4006950:	e0bffe17 	ldw	r2,-8(fp)
 4006954:	10c00044 	addi	r3,r2,1
 4006958:	e0fffe15 	stw	r3,-8(fp)
 400695c:	10800003 	ldbu	r2,0(r2)
 4006960:	e0bffd05 	stb	r2,-12(fp)
 4006964:	e0bffd07 	ldb	r2,-12(fp)
 4006968:	1004c03a 	cmpne	r2,r2,zero
 400696c:	10803fcc 	andi	r2,r2,255
 4006970:	10000826 	beq	r2,zero,4006994 <_Z11E_NotifyStrPKci+0x70>
 4006974:	e0bffd07 	ldb	r2,-12(fp)
 4006978:	e17fff17 	ldw	r5,-4(fp)
 400697c:	1009883a 	mov	r4,r2
 4006980:	40068500 	call	4006850 <_Z9E_Notifycci>
 4006984:	003ff206 	br	4006950 <__alt_mem_onchip_memory2_0+0xfc0056d0>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 4006988:	0001883a 	nop
 400698c:	00000106 	br	4006994 <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
 4006990:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
 4006994:	e037883a 	mov	sp,fp
 4006998:	dfc00117 	ldw	ra,4(sp)
 400699c:	df000017 	ldw	fp,0(sp)
 40069a0:	dec00204 	addi	sp,sp,8
 40069a4:	f800283a 	ret

040069a8 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
 40069a8:	defffd04 	addi	sp,sp,-12
 40069ac:	df000215 	stw	fp,8(sp)
 40069b0:	df000204 	addi	fp,sp,8
 40069b4:	2005883a 	mov	r2,r4
 40069b8:	e17fff15 	stw	r5,-4(fp)
 40069bc:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
 40069c0:	e037883a 	mov	sp,fp
 40069c4:	df000017 	ldw	fp,0(sp)
 40069c8:	dec00104 	addi	sp,sp,4
 40069cc:	f800283a 	ret

040069d0 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
 40069d0:	defffc04 	addi	sp,sp,-16
 40069d4:	df000315 	stw	fp,12(sp)
 40069d8:	df000304 	addi	fp,sp,12
 40069dc:	e13ffd15 	stw	r4,-12(fp)
 40069e0:	e17ffe15 	stw	r5,-8(fp)
 40069e4:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
 40069e8:	e037883a 	mov	sp,fp
 40069ec:	df000017 	ldw	fp,0(sp)
 40069f0:	dec00104 	addi	sp,sp,4
 40069f4:	f800283a 	ret

040069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 40069f8:	defffc04 	addi	sp,sp,-16
 40069fc:	df000315 	stw	fp,12(sp)
 4006a00:	df000304 	addi	fp,sp,12
 4006a04:	e13ffd15 	stw	r4,-12(fp)
 4006a08:	e17ffe15 	stw	r5,-8(fp)
 4006a0c:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
 4006a10:	e0bffd17 	ldw	r2,-12(fp)
 4006a14:	10800017 	ldw	r2,0(r2)
 4006a18:	1000021e 	bne	r2,zero,4006a24 <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 4006a1c:	0005883a 	mov	r2,zero
 4006a20:	00003306 	br	4006af0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 4006a24:	e0bffd17 	ldw	r2,-12(fp)
 4006a28:	10800103 	ldbu	r2,4(r2)
 4006a2c:	10803fcc 	andi	r2,r2,255
 4006a30:	10002426 	beq	r2,zero,4006ac4 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
 4006a34:	e0bfff17 	ldw	r2,-4(fp)
 4006a38:	1080000b 	ldhu	r2,0(r2)
 4006a3c:	10bfffcc 	andi	r2,r2,65535
 4006a40:	10002026 	beq	r2,zero,4006ac4 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
 4006a44:	e0bffd17 	ldw	r2,-12(fp)
 4006a48:	10800017 	ldw	r2,0(r2)
 4006a4c:	e0fffd17 	ldw	r3,-12(fp)
 4006a50:	18c00143 	ldbu	r3,5(r3)
 4006a54:	19003fcc 	andi	r4,r3,255
 4006a58:	e0fffd17 	ldw	r3,-12(fp)
 4006a5c:	18c00103 	ldbu	r3,4(r3)
 4006a60:	18c03fcc 	andi	r3,r3,255
 4006a64:	20c7c83a 	sub	r3,r4,r3
 4006a68:	10c5883a 	add	r2,r2,r3
 4006a6c:	e0fffe17 	ldw	r3,-8(fp)
 4006a70:	18c00017 	ldw	r3,0(r3)
 4006a74:	18c00003 	ldbu	r3,0(r3)
 4006a78:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 4006a7c:	e0bffd17 	ldw	r2,-12(fp)
 4006a80:	10800103 	ldbu	r2,4(r2)
 4006a84:	10bfffc4 	addi	r2,r2,-1
 4006a88:	1007883a 	mov	r3,r2
 4006a8c:	e0bffd17 	ldw	r2,-12(fp)
 4006a90:	10c00105 	stb	r3,4(r2)
 4006a94:	e0bfff17 	ldw	r2,-4(fp)
 4006a98:	1080000b 	ldhu	r2,0(r2)
 4006a9c:	10bfffc4 	addi	r2,r2,-1
 4006aa0:	1007883a 	mov	r3,r2
 4006aa4:	e0bfff17 	ldw	r2,-4(fp)
 4006aa8:	10c0000d 	sth	r3,0(r2)
 4006aac:	e0bffe17 	ldw	r2,-8(fp)
 4006ab0:	10800017 	ldw	r2,0(r2)
 4006ab4:	10c00044 	addi	r3,r2,1
 4006ab8:	e0bffe17 	ldw	r2,-8(fp)
 4006abc:	10c00015 	stw	r3,0(r2)
 4006ac0:	003fd806 	br	4006a24 <__alt_mem_onchip_memory2_0+0xfc0057a4>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
 4006ac4:	e0bffd17 	ldw	r2,-12(fp)
 4006ac8:	10800103 	ldbu	r2,4(r2)
 4006acc:	10803fcc 	andi	r2,r2,255
 4006ad0:	10000226 	beq	r2,zero,4006adc <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
 4006ad4:	0005883a 	mov	r2,zero
 4006ad8:	00000506 	br	4006af0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
 4006adc:	e0bffd17 	ldw	r2,-12(fp)
 4006ae0:	10c00143 	ldbu	r3,5(r2)
 4006ae4:	e0bffd17 	ldw	r2,-12(fp)
 4006ae8:	10c00105 	stb	r3,4(r2)
        return true;
 4006aec:	00800044 	movi	r2,1
}
 4006af0:	e037883a 	mov	sp,fp
 4006af4:	df000017 	ldw	fp,0(sp)
 4006af8:	dec00104 	addi	sp,sp,4
 4006afc:	f800283a 	ret

04006b00 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
 4006b00:	defffa04 	addi	sp,sp,-24
 4006b04:	dfc00515 	stw	ra,20(sp)
 4006b08:	df000415 	stw	fp,16(sp)
 4006b0c:	df000404 	addi	fp,sp,16
 4006b10:	e13ffc15 	stw	r4,-16(fp)
 4006b14:	e17ffd15 	stw	r5,-12(fp)
 4006b18:	e1bffe15 	stw	r6,-8(fp)
 4006b1c:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
 4006b20:	e0bffc17 	ldw	r2,-16(fp)
 4006b24:	10800003 	ldbu	r2,0(r2)
 4006b28:	10803fcc 	andi	r2,r2,255
 4006b2c:	10c00060 	cmpeqi	r3,r2,1
 4006b30:	1800181e 	bne	r3,zero,4006b94 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
 4006b34:	10c00088 	cmpgei	r3,r2,2
 4006b38:	1800021e 	bne	r3,zero,4006b44 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
 4006b3c:	10000626 	beq	r2,zero,4006b58 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
 4006b40:	00007e06 	br	4006d3c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
 4006b44:	10c000a0 	cmpeqi	r3,r2,2
 4006b48:	18004a1e 	bne	r3,zero,4006c74 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
 4006b4c:	108000e0 	cmpeqi	r2,r2,3
 4006b50:	1000571e 	bne	r2,zero,4006cb0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
 4006b54:	00007906 	br	4006d3c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
 4006b58:	e0bffc17 	ldw	r2,-16(fp)
 4006b5c:	10800417 	ldw	r2,16(r2)
 4006b60:	e0fffc17 	ldw	r3,-16(fp)
 4006b64:	18c00303 	ldbu	r3,12(r3)
 4006b68:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
 4006b6c:	e0bffc17 	ldw	r2,-16(fp)
 4006b70:	10c00504 	addi	r3,r2,20
 4006b74:	e0bffc17 	ldw	r2,-16(fp)
 4006b78:	10800417 	ldw	r2,16(r2)
 4006b7c:	100b883a 	mov	r5,r2
 4006b80:	1809883a 	mov	r4,r3
 4006b84:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
 4006b88:	e0bffc17 	ldw	r2,-16(fp)
 4006b8c:	00c00044 	movi	r3,1
 4006b90:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
 4006b94:	e0bffc17 	ldw	r2,-16(fp)
 4006b98:	10800504 	addi	r2,r2,20
 4006b9c:	e1bffe17 	ldw	r6,-8(fp)
 4006ba0:	e17ffd17 	ldw	r5,-12(fp)
 4006ba4:	1009883a 	mov	r4,r2
 4006ba8:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4006bac:	1080005c 	xori	r2,r2,1
 4006bb0:	10803fcc 	andi	r2,r2,255
 4006bb4:	10000226 	beq	r2,zero,4006bc0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
 4006bb8:	0005883a 	mov	r2,zero
 4006bbc:	00006006 	br	4006d40 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
 4006bc0:	e0bffc17 	ldw	r2,-16(fp)
 4006bc4:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
 4006bc8:	e0bffc17 	ldw	r2,-16(fp)
 4006bcc:	10800417 	ldw	r2,16(r2)
 4006bd0:	10800003 	ldbu	r2,0(r2)
 4006bd4:	10803fcc 	andi	r2,r2,255
 4006bd8:	10800130 	cmpltui	r2,r2,4
 4006bdc:	10000e1e 	bne	r2,zero,4006c18 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
 4006be0:	e0bffc17 	ldw	r2,-16(fp)
 4006be4:	10800417 	ldw	r2,16(r2)
 4006be8:	10c00043 	ldbu	r3,1(r2)
 4006bec:	11000083 	ldbu	r4,2(r2)
 4006bf0:	2008923a 	slli	r4,r4,8
 4006bf4:	20c6b03a 	or	r3,r4,r3
 4006bf8:	110000c3 	ldbu	r4,3(r2)
 4006bfc:	2008943a 	slli	r4,r4,16
 4006c00:	20c6b03a 	or	r3,r4,r3
 4006c04:	10800103 	ldbu	r2,4(r2)
 4006c08:	1004963a 	slli	r2,r2,24
 4006c0c:	10c4b03a 	or	r2,r2,r3
 4006c10:	10800017 	ldw	r2,0(r2)
 4006c14:	00000e06 	br	4006c50 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
 4006c18:	e0bffc17 	ldw	r2,-16(fp)
 4006c1c:	10800417 	ldw	r2,16(r2)
 4006c20:	10c00043 	ldbu	r3,1(r2)
 4006c24:	11000083 	ldbu	r4,2(r2)
 4006c28:	2008923a 	slli	r4,r4,8
 4006c2c:	20c6b03a 	or	r3,r4,r3
 4006c30:	110000c3 	ldbu	r4,3(r2)
 4006c34:	2008943a 	slli	r4,r4,16
 4006c38:	20c6b03a 	or	r3,r4,r3
 4006c3c:	10800103 	ldbu	r2,4(r2)
 4006c40:	1004963a 	slli	r2,r2,24
 4006c44:	10c4b03a 	or	r2,r2,r3
 4006c48:	1080000b 	ldhu	r2,0(r2)
 4006c4c:	10bfffcc 	andi	r2,r2,65535
 4006c50:	e0fffc17 	ldw	r3,-16(fp)
 4006c54:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
 4006c58:	e0bffc17 	ldw	r2,-16(fp)
 4006c5c:	10c00117 	ldw	r3,4(r2)
 4006c60:	e0bffc17 	ldw	r2,-16(fp)
 4006c64:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
 4006c68:	e0bffc17 	ldw	r2,-16(fp)
 4006c6c:	00c00084 	movi	r3,2
 4006c70:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
 4006c74:	e0bffc17 	ldw	r2,-16(fp)
 4006c78:	10800417 	ldw	r2,16(r2)
 4006c7c:	e0fffc17 	ldw	r3,-16(fp)
 4006c80:	18c00343 	ldbu	r3,13(r3)
 4006c84:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
 4006c88:	e0bffc17 	ldw	r2,-16(fp)
 4006c8c:	10c00504 	addi	r3,r2,20
 4006c90:	e0bffc17 	ldw	r2,-16(fp)
 4006c94:	10800417 	ldw	r2,16(r2)
 4006c98:	100b883a 	mov	r5,r2
 4006c9c:	1809883a 	mov	r4,r3
 4006ca0:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
 4006ca4:	e0bffc17 	ldw	r2,-16(fp)
 4006ca8:	00c000c4 	movi	r3,3
 4006cac:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
 4006cb0:	e0bffc17 	ldw	r2,-16(fp)
 4006cb4:	10800217 	ldw	r2,8(r2)
 4006cb8:	10001e26 	beq	r2,zero,4006d34 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
 4006cbc:	e0bffc17 	ldw	r2,-16(fp)
 4006cc0:	10800504 	addi	r2,r2,20
 4006cc4:	e1bffe17 	ldw	r6,-8(fp)
 4006cc8:	e17ffd17 	ldw	r5,-12(fp)
 4006ccc:	1009883a 	mov	r4,r2
 4006cd0:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4006cd4:	1080005c 	xori	r2,r2,1
 4006cd8:	10803fcc 	andi	r2,r2,255
 4006cdc:	10000226 	beq	r2,zero,4006ce8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
 4006ce0:	0005883a 	mov	r2,zero
 4006ce4:	00001606 	br	4006d40 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
 4006ce8:	e0bfff17 	ldw	r2,-4(fp)
 4006cec:	10000b26 	beq	r2,zero,4006d1c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
 4006cf0:	e0bffc17 	ldw	r2,-16(fp)
 4006cf4:	11000417 	ldw	r4,16(r2)
 4006cf8:	e0bffc17 	ldw	r2,-16(fp)
 4006cfc:	10c00117 	ldw	r3,4(r2)
 4006d00:	e0bffc17 	ldw	r2,-16(fp)
 4006d04:	10800217 	ldw	r2,8(r2)
 4006d08:	1887c83a 	sub	r3,r3,r2
 4006d0c:	e0bfff17 	ldw	r2,-4(fp)
 4006d10:	e1800217 	ldw	r6,8(fp)
 4006d14:	180b883a 	mov	r5,r3
 4006d18:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
 4006d1c:	e0bffc17 	ldw	r2,-16(fp)
 4006d20:	10800217 	ldw	r2,8(r2)
 4006d24:	10ffffc4 	addi	r3,r2,-1
 4006d28:	e0bffc17 	ldw	r2,-16(fp)
 4006d2c:	10c00215 	stw	r3,8(r2)
 4006d30:	003fdf06 	br	4006cb0 <__alt_mem_onchip_memory2_0+0xfc005a30>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
 4006d34:	e0bffc17 	ldw	r2,-16(fp)
 4006d38:	10000005 	stb	zero,0(r2)
        }
        return true;
 4006d3c:	00800044 	movi	r2,1
}
 4006d40:	e037883a 	mov	sp,fp
 4006d44:	dfc00117 	ldw	ra,4(sp)
 4006d48:	df000017 	ldw	fp,0(sp)
 4006d4c:	dec00204 	addi	sp,sp,8
 4006d50:	f800283a 	ret

04006d54 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
 4006d54:	defffb04 	addi	sp,sp,-20
 4006d58:	dfc00415 	stw	ra,16(sp)
 4006d5c:	df000315 	stw	fp,12(sp)
 4006d60:	df000304 	addi	fp,sp,12
 4006d64:	e13ffe15 	stw	r4,-8(fp)
 4006d68:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
 4006d6c:	e0bffe17 	ldw	r2,-8(fp)
 4006d70:	1009883a 	mov	r4,r2
 4006d74:	40055d80 	call	40055d8 <_ZN15USBDeviceConfigC1Ev>
 4006d78:	e0bffe17 	ldw	r2,-8(fp)
 4006d7c:	10800104 	addi	r2,r2,4
 4006d80:	1009883a 	mov	r4,r2
 4006d84:	4008cf00 	call	4008cf0 <_ZN21UsbMidiConfigXtracterC1Ev>
 4006d88:	008100b4 	movhi	r2,1026
 4006d8c:	10893c04 	addi	r2,r2,9456
 4006d90:	e0fffe17 	ldw	r3,-8(fp)
 4006d94:	18800015 	stw	r2,0(r3)
 4006d98:	008100b4 	movhi	r2,1026
 4006d9c:	10894804 	addi	r2,r2,9504
 4006da0:	e0fffe17 	ldw	r3,-8(fp)
 4006da4:	18800115 	stw	r2,4(r3)
 4006da8:	e0bffe17 	ldw	r2,-8(fp)
 4006dac:	e0ffff17 	ldw	r3,-4(fp)
 4006db0:	10c00215 	stw	r3,8(r2)
 4006db4:	e0bffe17 	ldw	r2,-8(fp)
 4006db8:	10000305 	stb	zero,12(r2)
 4006dbc:	e0bffe17 	ldw	r2,-8(fp)
 4006dc0:	10000345 	stb	zero,13(r2)
 4006dc4:	e0bffe17 	ldw	r2,-8(fp)
 4006dc8:	10001705 	stb	zero,92(r2)
 4006dcc:	e0bffe17 	ldw	r2,-8(fp)
 4006dd0:	10001815 	stw	zero,96(r2)
 4006dd4:	e0bffe17 	ldw	r2,-8(fp)
 4006dd8:	10001915 	stw	zero,100(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
 4006ddc:	e03ffd05 	stb	zero,-12(fp)
 4006de0:	e0bffd03 	ldbu	r2,-12(fp)
 4006de4:	108000e8 	cmpgeui	r2,r2,3
 4006de8:	10002d1e 	bne	r2,zero,4006ea0 <_ZN9USBH_MIDIC1EP3USB+0x14c>
                epInfo[i].epAddr      = 0;
 4006dec:	e0fffd03 	ldbu	r3,-12(fp)
 4006df0:	e13ffe17 	ldw	r4,-8(fp)
 4006df4:	1805883a 	mov	r2,r3
 4006df8:	1085883a 	add	r2,r2,r2
 4006dfc:	10c5883a 	add	r2,r2,r3
 4006e00:	2085883a 	add	r2,r4,r2
 4006e04:	108004c4 	addi	r2,r2,19
 4006e08:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
 4006e0c:	e13ffd03 	ldbu	r4,-12(fp)
 4006e10:	e0bffd03 	ldbu	r2,-12(fp)
 4006e14:	10000226 	beq	r2,zero,4006e20 <_ZN9USBH_MIDIC1EP3USB+0xcc>
 4006e18:	0007883a 	mov	r3,zero
 4006e1c:	00000106 	br	4006e24 <_ZN9USBH_MIDIC1EP3USB+0xd0>
 4006e20:	00c00204 	movi	r3,8
 4006e24:	e17ffe17 	ldw	r5,-8(fp)
 4006e28:	2005883a 	mov	r2,r4
 4006e2c:	1085883a 	add	r2,r2,r2
 4006e30:	1105883a 	add	r2,r2,r4
 4006e34:	2885883a 	add	r2,r5,r2
 4006e38:	10800504 	addi	r2,r2,20
 4006e3c:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 4006e40:	e13ffd03 	ldbu	r4,-12(fp)
 4006e44:	e0bffd03 	ldbu	r2,-12(fp)
 4006e48:	10000226 	beq	r2,zero,4006e54 <_ZN9USBH_MIDIC1EP3USB+0x100>
 4006e4c:	00c00044 	movi	r3,1
 4006e50:	00000106 	br	4006e58 <_ZN9USBH_MIDIC1EP3USB+0x104>
 4006e54:	00c003c4 	movi	r3,15
 4006e58:	e17ffe17 	ldw	r5,-8(fp)
 4006e5c:	2005883a 	mov	r2,r4
 4006e60:	1085883a 	add	r2,r2,r2
 4006e64:	1105883a 	add	r2,r2,r4
 4006e68:	2885883a 	add	r2,r5,r2
 4006e6c:	10800404 	addi	r2,r2,16
 4006e70:	18c7883a 	add	r3,r3,r3
 4006e74:	18cb883a 	add	r5,r3,r3
 4006e78:	10c00143 	ldbu	r3,5(r2)
 4006e7c:	18c000cc 	andi	r3,r3,3
 4006e80:	1809883a 	mov	r4,r3
 4006e84:	2807883a 	mov	r3,r5
 4006e88:	20c6b03a 	or	r3,r4,r3
 4006e8c:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
 4006e90:	e0bffd03 	ldbu	r2,-12(fp)
 4006e94:	10800044 	addi	r2,r2,1
 4006e98:	e0bffd05 	stb	r2,-12(fp)
 4006e9c:	003fd006 	br	4006de0 <__alt_mem_onchip_memory2_0+0xfc005b60>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
 4006ea0:	e0bffe17 	ldw	r2,-8(fp)
 4006ea4:	10800217 	ldw	r2,8(r2)
 4006ea8:	10000626 	beq	r2,zero,4006ec4 <_ZN9USBH_MIDIC1EP3USB+0x170>
                pUsb->RegisterDeviceClass(this);
 4006eac:	e0bffe17 	ldw	r2,-8(fp)
 4006eb0:	10800217 	ldw	r2,8(r2)
 4006eb4:	e0fffe17 	ldw	r3,-8(fp)
 4006eb8:	180b883a 	mov	r5,r3
 4006ebc:	1009883a 	mov	r4,r2
 4006ec0:	400538c0 	call	400538c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
 4006ec4:	0001883a 	nop
 4006ec8:	e037883a 	mov	sp,fp
 4006ecc:	dfc00117 	ldw	ra,4(sp)
 4006ed0:	df000017 	ldw	fp,0(sp)
 4006ed4:	dec00204 	addi	sp,sp,8
 4006ed8:	f800283a 	ret

04006edc <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
 4006edc:	deffe004 	addi	sp,sp,-128
 4006ee0:	dfc01f15 	stw	ra,124(sp)
 4006ee4:	df001e15 	stw	fp,120(sp)
 4006ee8:	df001e04 	addi	fp,sp,120
 4006eec:	e13ffc15 	stw	r4,-16(fp)
 4006ef0:	2809883a 	mov	r4,r5
 4006ef4:	3007883a 	mov	r3,r6
 4006ef8:	3805883a 	mov	r2,r7
 4006efc:	e13ffd05 	stb	r4,-12(fp)
 4006f00:	e0fffe05 	stb	r3,-8(fp)
 4006f04:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 4006f08:	e0bfe944 	addi	r2,fp,-91
 4006f0c:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
 4006f10:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
 4006f14:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
 4006f18:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
 4006f1c:	00800044 	movi	r2,1
 4006f20:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
 4006f24:	00800044 	movi	r2,1
 4006f28:	e0bfe3c5 	stb	r2,-113(fp)
 4006f2c:	e0bfe3c3 	ldbu	r2,-113(fp)
 4006f30:	108000e8 	cmpgeui	r2,r2,3
 4006f34:	10001a1e 	bne	r2,zero,4006fa0 <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
 4006f38:	e0ffe3c3 	ldbu	r3,-113(fp)
 4006f3c:	e13ffc17 	ldw	r4,-16(fp)
 4006f40:	1805883a 	mov	r2,r3
 4006f44:	1085883a 	add	r2,r2,r2
 4006f48:	10c5883a 	add	r2,r2,r3
 4006f4c:	2085883a 	add	r2,r4,r2
 4006f50:	10800404 	addi	r2,r2,16
 4006f54:	11000143 	ldbu	r4,5(r2)
 4006f58:	00ffff84 	movi	r3,-2
 4006f5c:	20c6703a 	and	r3,r4,r3
 4006f60:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
 4006f64:	e0ffe3c3 	ldbu	r3,-113(fp)
 4006f68:	e13ffc17 	ldw	r4,-16(fp)
 4006f6c:	1805883a 	mov	r2,r3
 4006f70:	1085883a 	add	r2,r2,r2
 4006f74:	10c5883a 	add	r2,r2,r3
 4006f78:	2085883a 	add	r2,r4,r2
 4006f7c:	10800404 	addi	r2,r2,16
 4006f80:	11000143 	ldbu	r4,5(r2)
 4006f84:	00ffff44 	movi	r3,-3
 4006f88:	20c6703a 	and	r3,r4,r3
 4006f8c:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
 4006f90:	e0bfe3c3 	ldbu	r2,-113(fp)
 4006f94:	10800044 	addi	r2,r2,1
 4006f98:	e0bfe3c5 	stb	r2,-113(fp)
 4006f9c:	003fe306 	br	4006f2c <__alt_mem_onchip_memory2_0+0xfc005cac>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
 4006fa0:	e0bffc17 	ldw	r2,-16(fp)
 4006fa4:	10800217 	ldw	r2,8(r2)
 4006fa8:	1009883a 	mov	r4,r2
 4006fac:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 4006fb0:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
 4006fb4:	e0bffc17 	ldw	r2,-16(fp)
 4006fb8:	10800303 	ldbu	r2,12(r2)
 4006fbc:	10803fcc 	andi	r2,r2,255
 4006fc0:	10000226 	beq	r2,zero,4006fcc <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 4006fc4:	00bff644 	movi	r2,-39
 4006fc8:	0001c706 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
 4006fcc:	e0bfe817 	ldw	r2,-96(fp)
 4006fd0:	10800017 	ldw	r2,0(r2)
 4006fd4:	10800017 	ldw	r2,0(r2)
 4006fd8:	e0fffc17 	ldw	r3,-16(fp)
 4006fdc:	18c00303 	ldbu	r3,12(r3)
 4006fe0:	18c03fcc 	andi	r3,r3,255
 4006fe4:	180b883a 	mov	r5,r3
 4006fe8:	e13fe817 	ldw	r4,-96(fp)
 4006fec:	103ee83a 	callr	r2
 4006ff0:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
 4006ff4:	e0bfe617 	ldw	r2,-104(fp)
 4006ff8:	1000021e 	bne	r2,zero,4007004 <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4006ffc:	00bff584 	movi	r2,-42
 4007000:	0001b906 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
 4007004:	e0bfe617 	ldw	r2,-104(fp)
 4007008:	10c00003 	ldbu	r3,0(r2)
 400700c:	11000043 	ldbu	r4,1(r2)
 4007010:	2008923a 	slli	r4,r4,8
 4007014:	20c6b03a 	or	r3,r4,r3
 4007018:	11000083 	ldbu	r4,2(r2)
 400701c:	2008943a 	slli	r4,r4,16
 4007020:	20c6b03a 	or	r3,r4,r3
 4007024:	108000c3 	ldbu	r2,3(r2)
 4007028:	1004963a 	slli	r2,r2,24
 400702c:	10c4b03a 	or	r2,r2,r3
 4007030:	1000021e 	bne	r2,zero,400703c <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
 4007034:	00bff5c4 	movi	r2,-41
 4007038:	0001ab06 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 400703c:	e0bfe617 	ldw	r2,-104(fp)
 4007040:	10c00003 	ldbu	r3,0(r2)
 4007044:	11000043 	ldbu	r4,1(r2)
 4007048:	2008923a 	slli	r4,r4,8
 400704c:	20c6b03a 	or	r3,r4,r3
 4007050:	11000083 	ldbu	r4,2(r2)
 4007054:	2008943a 	slli	r4,r4,16
 4007058:	20c6b03a 	or	r3,r4,r3
 400705c:	108000c3 	ldbu	r2,3(r2)
 4007060:	1004963a 	slli	r2,r2,24
 4007064:	10c4b03a 	or	r2,r2,r3
 4007068:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
 400706c:	e0bffc17 	ldw	r2,-16(fp)
 4007070:	10c004c4 	addi	r3,r2,19
 4007074:	e0bfe617 	ldw	r2,-104(fp)
 4007078:	19803fcc 	andi	r6,r3,255
 400707c:	11000003 	ldbu	r4,0(r2)
 4007080:	2008703a 	and	r4,r4,zero
 4007084:	200b883a 	mov	r5,r4
 4007088:	3009883a 	mov	r4,r6
 400708c:	2908b03a 	or	r4,r5,r4
 4007090:	11000005 	stb	r4,0(r2)
 4007094:	1808d23a 	srli	r4,r3,8
 4007098:	21803fcc 	andi	r6,r4,255
 400709c:	11000043 	ldbu	r4,1(r2)
 40070a0:	2008703a 	and	r4,r4,zero
 40070a4:	200b883a 	mov	r5,r4
 40070a8:	3009883a 	mov	r4,r6
 40070ac:	2908b03a 	or	r4,r5,r4
 40070b0:	11000045 	stb	r4,1(r2)
 40070b4:	1808d43a 	srli	r4,r3,16
 40070b8:	21803fcc 	andi	r6,r4,255
 40070bc:	11000083 	ldbu	r4,2(r2)
 40070c0:	2008703a 	and	r4,r4,zero
 40070c4:	200b883a 	mov	r5,r4
 40070c8:	3009883a 	mov	r4,r6
 40070cc:	2908b03a 	or	r4,r5,r4
 40070d0:	11000085 	stb	r4,2(r2)
 40070d4:	180ad63a 	srli	r5,r3,24
 40070d8:	10c000c3 	ldbu	r3,3(r2)
 40070dc:	1806703a 	and	r3,r3,zero
 40070e0:	1809883a 	mov	r4,r3
 40070e4:	2807883a 	mov	r3,r5
 40070e8:	20c6b03a 	or	r3,r4,r3
 40070ec:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
 40070f0:	e0bfe617 	ldw	r2,-104(fp)
 40070f4:	e0ffff03 	ldbu	r3,-4(fp)
 40070f8:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
 40070fc:	e0bffc17 	ldw	r2,-16(fp)
 4007100:	10c00217 	ldw	r3,8(r2)
 4007104:	e0bfe944 	addi	r2,fp,-91
 4007108:	d8800015 	stw	r2,0(sp)
 400710c:	01c00204 	movi	r7,8
 4007110:	000d883a 	mov	r6,zero
 4007114:	000b883a 	mov	r5,zero
 4007118:	1809883a 	mov	r4,r3
 400711c:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 4007120:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 4007124:	e0bfe617 	ldw	r2,-104(fp)
 4007128:	e0ffe717 	ldw	r3,-100(fp)
 400712c:	19403fcc 	andi	r5,r3,255
 4007130:	10c00003 	ldbu	r3,0(r2)
 4007134:	1806703a 	and	r3,r3,zero
 4007138:	1809883a 	mov	r4,r3
 400713c:	2807883a 	mov	r3,r5
 4007140:	20c6b03a 	or	r3,r4,r3
 4007144:	10c00005 	stb	r3,0(r2)
 4007148:	e0ffe717 	ldw	r3,-100(fp)
 400714c:	1806d23a 	srli	r3,r3,8
 4007150:	19403fcc 	andi	r5,r3,255
 4007154:	10c00043 	ldbu	r3,1(r2)
 4007158:	1806703a 	and	r3,r3,zero
 400715c:	1809883a 	mov	r4,r3
 4007160:	2807883a 	mov	r3,r5
 4007164:	20c6b03a 	or	r3,r4,r3
 4007168:	10c00045 	stb	r3,1(r2)
 400716c:	e0ffe717 	ldw	r3,-100(fp)
 4007170:	1806d43a 	srli	r3,r3,16
 4007174:	19403fcc 	andi	r5,r3,255
 4007178:	10c00083 	ldbu	r3,2(r2)
 400717c:	1806703a 	and	r3,r3,zero
 4007180:	1809883a 	mov	r4,r3
 4007184:	2807883a 	mov	r3,r5
 4007188:	20c6b03a 	or	r3,r4,r3
 400718c:	10c00085 	stb	r3,2(r2)
 4007190:	e0ffe717 	ldw	r3,-100(fp)
 4007194:	180ad63a 	srli	r5,r3,24
 4007198:	10c000c3 	ldbu	r3,3(r2)
 400719c:	1806703a 	and	r3,r3,zero
 40071a0:	1809883a 	mov	r4,r3
 40071a4:	2807883a 	mov	r3,r5
 40071a8:	20c6b03a 	or	r3,r4,r3
 40071ac:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
 40071b0:	e0bfe303 	ldbu	r2,-116(fp)
 40071b4:	10013a1e 	bne	r2,zero,40076a0 <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
 40071b8:	e0bfe817 	ldw	r2,-96(fp)
 40071bc:	10800017 	ldw	r2,0(r2)
 40071c0:	10800104 	addi	r2,r2,4
 40071c4:	10800017 	ldw	r2,0(r2)
 40071c8:	e0fffd03 	ldbu	r3,-12(fp)
 40071cc:	e13ffe03 	ldbu	r4,-8(fp)
 40071d0:	200f883a 	mov	r7,r4
 40071d4:	000d883a 	mov	r6,zero
 40071d8:	180b883a 	mov	r5,r3
 40071dc:	e13fe817 	ldw	r4,-96(fp)
 40071e0:	103ee83a 	callr	r2
 40071e4:	1007883a 	mov	r3,r2
 40071e8:	e0bffc17 	ldw	r2,-16(fp)
 40071ec:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
 40071f0:	e0bffc17 	ldw	r2,-16(fp)
 40071f4:	10800303 	ldbu	r2,12(r2)
 40071f8:	10803fcc 	andi	r2,r2,255
 40071fc:	1000021e 	bne	r2,zero,4007208 <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 4007200:	00bff504 	movi	r2,-44
 4007204:	00013806 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
 4007208:	e0bfe517 	ldw	r2,-108(fp)
 400720c:	10c001c3 	ldbu	r3,7(r2)
 4007210:	e0bffc17 	ldw	r2,-16(fp)
 4007214:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
 4007218:	e0bffc17 	ldw	r2,-16(fp)
 400721c:	10c00217 	ldw	r3,8(r2)
 4007220:	e0bffc17 	ldw	r2,-16(fp)
 4007224:	10800303 	ldbu	r2,12(r2)
 4007228:	10803fcc 	andi	r2,r2,255
 400722c:	100f883a 	mov	r7,r2
 4007230:	000d883a 	mov	r6,zero
 4007234:	000b883a 	mov	r5,zero
 4007238:	1809883a 	mov	r4,r3
 400723c:	40032500 	call	4003250 <_ZN3USB7setAddrEhhh>
 4007240:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
 4007244:	e0bfe303 	ldbu	r2,-116(fp)
 4007248:	10001026 	beq	r2,zero,400728c <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
 400724c:	e0bfe617 	ldw	r2,-104(fp)
 4007250:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
 4007254:	e0bfe817 	ldw	r2,-96(fp)
 4007258:	10800017 	ldw	r2,0(r2)
 400725c:	10800204 	addi	r2,r2,8
 4007260:	10800017 	ldw	r2,0(r2)
 4007264:	e0fffc17 	ldw	r3,-16(fp)
 4007268:	18c00303 	ldbu	r3,12(r3)
 400726c:	18c03fcc 	andi	r3,r3,255
 4007270:	180b883a 	mov	r5,r3
 4007274:	e13fe817 	ldw	r4,-96(fp)
 4007278:	103ee83a 	callr	r2
                bAddress = 0;
 400727c:	e0bffc17 	ldw	r2,-16(fp)
 4007280:	10000305 	stb	zero,12(r2)
                return rcode;
 4007284:	e0bfe303 	ldbu	r2,-116(fp)
 4007288:	00011706 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
 400728c:	e0bffc17 	ldw	r2,-16(fp)
 4007290:	10800303 	ldbu	r2,12(r2)
 4007294:	10803fcc 	andi	r2,r2,255
 4007298:	01402004 	movi	r5,128
 400729c:	1009883a 	mov	r4,r2
 40072a0:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
 40072a4:	e0bfe617 	ldw	r2,-104(fp)
 40072a8:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
 40072ac:	e0bfe817 	ldw	r2,-96(fp)
 40072b0:	10800017 	ldw	r2,0(r2)
 40072b4:	10800017 	ldw	r2,0(r2)
 40072b8:	e0fffc17 	ldw	r3,-16(fp)
 40072bc:	18c00303 	ldbu	r3,12(r3)
 40072c0:	18c03fcc 	andi	r3,r3,255
 40072c4:	180b883a 	mov	r5,r3
 40072c8:	e13fe817 	ldw	r4,-96(fp)
 40072cc:	103ee83a 	callr	r2
 40072d0:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
 40072d4:	e0bfe617 	ldw	r2,-104(fp)
 40072d8:	1000021e 	bne	r2,zero,40072e4 <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40072dc:	00bff584 	movi	r2,-42
 40072e0:	00010106 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
 40072e4:	e0bfe617 	ldw	r2,-104(fp)
 40072e8:	e0ffff03 	ldbu	r3,-4(fp)
 40072ec:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
 40072f0:	e0bffc17 	ldw	r2,-16(fp)
 40072f4:	10c00217 	ldw	r3,8(r2)
 40072f8:	e0bffc17 	ldw	r2,-16(fp)
 40072fc:	10800303 	ldbu	r2,12(r2)
 4007300:	11003fcc 	andi	r4,r2,255
 4007304:	00800484 	movi	r2,18
 4007308:	117fffcc 	andi	r5,r2,65535
 400730c:	e0bfe944 	addi	r2,fp,-91
 4007310:	d8800015 	stw	r2,0(sp)
 4007314:	280f883a 	mov	r7,r5
 4007318:	000d883a 	mov	r6,zero
 400731c:	200b883a 	mov	r5,r4
 4007320:	1809883a 	mov	r4,r3
 4007324:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 4007328:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
 400732c:	e0bfe303 	ldbu	r2,-116(fp)
 4007330:	1000dd1e 	bne	r2,zero,40076a8 <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
 4007334:	e0bfe517 	ldw	r2,-108(fp)
 4007338:	10c00203 	ldbu	r3,8(r2)
 400733c:	10800243 	ldbu	r2,9(r2)
 4007340:	1004923a 	slli	r2,r2,8
 4007344:	10c4b03a 	or	r2,r2,r3
 4007348:	1007883a 	mov	r3,r2
 400734c:	e0bffc17 	ldw	r2,-16(fp)
 4007350:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
 4007354:	e0bfe517 	ldw	r2,-108(fp)
 4007358:	10c00283 	ldbu	r3,10(r2)
 400735c:	108002c3 	ldbu	r2,11(r2)
 4007360:	1004923a 	slli	r2,r2,8
 4007364:	10c4b03a 	or	r2,r2,r3
 4007368:	1007883a 	mov	r3,r2
 400736c:	e0bffc17 	ldw	r2,-16(fp)
 4007370:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
 4007374:	e0bfe517 	ldw	r2,-108(fp)
 4007378:	10800443 	ldbu	r2,17(r2)
 400737c:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
 4007380:	e0bffc17 	ldw	r2,-16(fp)
 4007384:	10c00217 	ldw	r3,8(r2)
 4007388:	e0bffc17 	ldw	r2,-16(fp)
 400738c:	10800303 	ldbu	r2,12(r2)
 4007390:	11003fcc 	andi	r4,r2,255
 4007394:	e0bffc17 	ldw	r2,-16(fp)
 4007398:	108004c4 	addi	r2,r2,19
 400739c:	100f883a 	mov	r7,r2
 40073a0:	01800044 	movi	r6,1
 40073a4:	200b883a 	mov	r5,r4
 40073a8:	1809883a 	mov	r4,r3
 40073ac:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 40073b0:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
 40073b4:	e0bfe303 	ldbu	r2,-116(fp)
 40073b8:	1000bd1e 	bne	r2,zero,40076b0 <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
 40073bc:	e0bffc17 	ldw	r2,-16(fp)
 40073c0:	1080040b 	ldhu	r2,16(r2)
 40073c4:	10bfffcc 	andi	r2,r2,65535
 40073c8:	01402004 	movi	r5,128
 40073cc:	1009883a 	mov	r4,r2
 40073d0:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
 40073d4:	e0bffc17 	ldw	r2,-16(fp)
 40073d8:	1080038b 	ldhu	r2,14(r2)
 40073dc:	10bfffcc 	andi	r2,r2,65535
 40073e0:	01402004 	movi	r5,128
 40073e4:	1009883a 	mov	r4,r2
 40073e8:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
 40073ec:	e0bfe903 	ldbu	r2,-92(fp)
 40073f0:	01402004 	movi	r5,128
 40073f4:	1009883a 	mov	r4,r2
 40073f8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
 40073fc:	e0bffc17 	ldw	r2,-16(fp)
 4007400:	00c000c4 	movi	r3,3
 4007404:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
 4007408:	e13ffc17 	ldw	r4,-16(fp)
 400740c:	400779c0 	call	400779c <_ZN9USBH_MIDI19setupDeviceSpecificEv>
        
        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
 4007410:	e03fe405 	stb	zero,-112(fp)
 4007414:	e0ffe403 	ldbu	r3,-112(fp)
 4007418:	e0bfe903 	ldbu	r2,-92(fp)
 400741c:	18802a2e 	bgeu	r3,r2,40074c8 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
 4007420:	e0bffc17 	ldw	r2,-16(fp)
 4007424:	10c00104 	addi	r3,r2,4
 4007428:	e0bfee04 	addi	r2,fp,-72
 400742c:	01800044 	movi	r6,1
 4007430:	180b883a 	mov	r5,r3
 4007434:	1009883a 	mov	r4,r2
 4007438:	40083000 	call	4008300 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
 400743c:	e0bffc17 	ldw	r2,-16(fp)
 4007440:	10c00217 	ldw	r3,8(r2)
 4007444:	e0bffc17 	ldw	r2,-16(fp)
 4007448:	10800303 	ldbu	r2,12(r2)
 400744c:	11003fcc 	andi	r4,r2,255
 4007450:	e17fe403 	ldbu	r5,-112(fp)
 4007454:	e0bfee04 	addi	r2,fp,-72
 4007458:	d8800015 	stw	r2,0(sp)
 400745c:	280f883a 	mov	r7,r5
 4007460:	000d883a 	mov	r6,zero
 4007464:	200b883a 	mov	r5,r4
 4007468:	1809883a 	mov	r4,r3
 400746c:	40030b00 	call	40030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 4007470:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
 4007474:	e0bfe303 	ldbu	r2,-116(fp)
 4007478:	10008f1e 	bne	r2,zero,40076b8 <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
 400747c:	e0bfee04 	addi	r2,fp,-72
 4007480:	1009883a 	mov	r4,r2
 4007484:	4008c0c0 	call	4008c0c <_ZN14MidiDescParser9getNumEPsEv>
 4007488:	1007883a 	mov	r3,r2
 400748c:	e0bfe383 	ldbu	r2,-114(fp)
 4007490:	10c5883a 	add	r2,r2,r3
 4007494:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
 4007498:	e0bfe383 	ldbu	r2,-114(fp)
 400749c:	108000b0 	cmpltui	r2,r2,2
 40074a0:	1000051e 	bne	r2,zero,40074b8 <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
 40074a4:	e0bfee04 	addi	r2,fp,-72
 40074a8:	1009883a 	mov	r4,r2
 40074ac:	4008be40 	call	4008be4 <_ZN14MidiDescParser12getConfValueEv>
 40074b0:	e0bfe345 	stb	r2,-115(fp)
 40074b4:	00000406 	br	40074c8 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();
        
        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
 40074b8:	e0bfe403 	ldbu	r2,-112(fp)
 40074bc:	10800044 	addi	r2,r2,1
 40074c0:	e0bfe405 	stb	r2,-112(fp)
 40074c4:	003fd306 	br	4007414 <__alt_mem_onchip_memory2_0+0xfc006194>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
 40074c8:	e0bfe383 	ldbu	r2,-114(fp)
 40074cc:	01402004 	movi	r5,128
 40074d0:	1009883a 	mov	r4,r2
 40074d4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
 40074d8:	e0bfe383 	ldbu	r2,-114(fp)
 40074dc:	10800058 	cmpnei	r2,r2,1
 40074e0:	1000321e 	bne	r2,zero,40075ac <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
 40074e4:	e03fe445 	stb	zero,-111(fp)
 40074e8:	e0ffe443 	ldbu	r3,-111(fp)
 40074ec:	e0bfe903 	ldbu	r2,-92(fp)
 40074f0:	18802a2e 	bgeu	r3,r2,400759c <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
 40074f4:	e0bffc17 	ldw	r2,-16(fp)
 40074f8:	10c00104 	addi	r3,r2,4
 40074fc:	e0bfee04 	addi	r2,fp,-72
 4007500:	000d883a 	mov	r6,zero
 4007504:	180b883a 	mov	r5,r3
 4007508:	1009883a 	mov	r4,r2
 400750c:	40083000 	call	4008300 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
 4007510:	e0bffc17 	ldw	r2,-16(fp)
 4007514:	10c00217 	ldw	r3,8(r2)
 4007518:	e0bffc17 	ldw	r2,-16(fp)
 400751c:	10800303 	ldbu	r2,12(r2)
 4007520:	11003fcc 	andi	r4,r2,255
 4007524:	e17fe443 	ldbu	r5,-111(fp)
 4007528:	e0bfee04 	addi	r2,fp,-72
 400752c:	d8800015 	stw	r2,0(sp)
 4007530:	280f883a 	mov	r7,r5
 4007534:	000d883a 	mov	r6,zero
 4007538:	200b883a 	mov	r5,r4
 400753c:	1809883a 	mov	r4,r3
 4007540:	40030b00 	call	40030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 4007544:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
 4007548:	e0bfe303 	ldbu	r2,-116(fp)
 400754c:	10005c1e 	bne	r2,zero,40076c0 <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
 4007550:	e0bfee04 	addi	r2,fp,-72
 4007554:	1009883a 	mov	r4,r2
 4007558:	4008c0c0 	call	4008c0c <_ZN14MidiDescParser9getNumEPsEv>
 400755c:	1007883a 	mov	r3,r2
 4007560:	e0bfe383 	ldbu	r2,-114(fp)
 4007564:	10c5883a 	add	r2,r2,r3
 4007568:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
 400756c:	e0bfe383 	ldbu	r2,-114(fp)
 4007570:	108000b0 	cmpltui	r2,r2,2
 4007574:	1000051e 	bne	r2,zero,400758c <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
 4007578:	e0bfee04 	addi	r2,fp,-72
 400757c:	1009883a 	mov	r4,r2
 4007580:	4008be40 	call	4008be4 <_ZN14MidiDescParser12getConfValueEv>
 4007584:	e0bfe345 	stb	r2,-115(fp)
 4007588:	00000406 	br	400759c <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
 400758c:	e0bfe443 	ldbu	r2,-111(fp)
 4007590:	10800044 	addi	r2,r2,1
 4007594:	e0bfe445 	stb	r2,-111(fp)
 4007598:	003fd306 	br	40074e8 <__alt_mem_onchip_memory2_0+0xfc006268>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
 400759c:	e0bfe383 	ldbu	r2,-114(fp)
 40075a0:	01402004 	movi	r5,128
 40075a4:	1009883a 	mov	r4,r2
 40075a8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
 40075ac:	e0bfe383 	ldbu	r2,-114(fp)
 40075b0:	108000a8 	cmpgeui	r2,r2,2
 40075b4:	1000031e 	bne	r2,zero,40075c4 <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
 40075b8:	00bfffc4 	movi	r2,-1
 40075bc:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
 40075c0:	00004206 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
 40075c4:	e0bffc17 	ldw	r2,-16(fp)
 40075c8:	10c00217 	ldw	r3,8(r2)
 40075cc:	e0bffc17 	ldw	r2,-16(fp)
 40075d0:	10800303 	ldbu	r2,12(r2)
 40075d4:	11003fcc 	andi	r4,r2,255
 40075d8:	e0bffc17 	ldw	r2,-16(fp)
 40075dc:	108004c4 	addi	r2,r2,19
 40075e0:	100f883a 	mov	r7,r2
 40075e4:	018000c4 	movi	r6,3
 40075e8:	200b883a 	mov	r5,r4
 40075ec:	1809883a 	mov	r4,r3
 40075f0:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 40075f4:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
 40075f8:	e0bfe343 	ldbu	r2,-115(fp)
 40075fc:	01402004 	movi	r5,128
 4007600:	1009883a 	mov	r4,r2
 4007604:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
 4007608:	e0bffc17 	ldw	r2,-16(fp)
 400760c:	10800583 	ldbu	r2,22(r2)
 4007610:	10bfe004 	addi	r2,r2,-128
 4007614:	10803fcc 	andi	r2,r2,255
 4007618:	01402004 	movi	r5,128
 400761c:	1009883a 	mov	r4,r2
 4007620:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
 4007624:	e0bffc17 	ldw	r2,-16(fp)
 4007628:	10800643 	ldbu	r2,25(r2)
 400762c:	10803fcc 	andi	r2,r2,255
 4007630:	01402004 	movi	r5,128
 4007634:	1009883a 	mov	r4,r2
 4007638:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
 400763c:	e0bffc17 	ldw	r2,-16(fp)
 4007640:	10c00217 	ldw	r3,8(r2)
 4007644:	e0bffc17 	ldw	r2,-16(fp)
 4007648:	10800303 	ldbu	r2,12(r2)
 400764c:	10803fcc 	andi	r2,r2,255
 4007650:	e13fe343 	ldbu	r4,-115(fp)
 4007654:	200f883a 	mov	r7,r4
 4007658:	000d883a 	mov	r6,zero
 400765c:	100b883a 	mov	r5,r2
 4007660:	1809883a 	mov	r4,r3
 4007664:	40032e40 	call	40032e4 <_ZN3USB7setConfEhhh>
 4007668:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
 400766c:	e0bfe303 	ldbu	r2,-116(fp)
 4007670:	1000151e 	bne	r2,zero,40076c8 <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        bPollEnable = true;
 4007674:	e0bffc17 	ldw	r2,-16(fp)
 4007678:	00c00044 	movi	r3,1
 400767c:	10c00345 	stb	r3,13(r2)

        if(pFuncOnInit)
 4007680:	e0bffc17 	ldw	r2,-16(fp)
 4007684:	10801817 	ldw	r2,96(r2)
 4007688:	10000326 	beq	r2,zero,4007698 <_ZN9USBH_MIDI4InitEhhb+0x7bc>
                pFuncOnInit(); // Call the user function
 400768c:	e0bffc17 	ldw	r2,-16(fp)
 4007690:	10801817 	ldw	r2,96(r2)
 4007694:	103ee83a 	callr	r2

        USBTRACE("Init done.\r\n");
        return 0;
 4007698:	0005883a 	mov	r2,zero
 400769c:	00001206 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
 40076a0:	0001883a 	nop
 40076a4:	00000906 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
 40076a8:	0001883a 	nop
 40076ac:	00000706 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
 40076b0:	0001883a 	nop
 40076b4:	00000506 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
 40076b8:	0001883a 	nop
 40076bc:	00000306 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
 40076c0:	0001883a 	nop
 40076c4:	00000106 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
 40076c8:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
 40076cc:	e0bffc17 	ldw	r2,-16(fp)
 40076d0:	10800017 	ldw	r2,0(r2)
 40076d4:	10800204 	addi	r2,r2,8
 40076d8:	10800017 	ldw	r2,0(r2)
 40076dc:	e13ffc17 	ldw	r4,-16(fp)
 40076e0:	103ee83a 	callr	r2
        return rcode;
 40076e4:	e0bfe303 	ldbu	r2,-116(fp)
}
 40076e8:	e037883a 	mov	sp,fp
 40076ec:	dfc00117 	ldw	ra,4(sp)
 40076f0:	df000017 	ldw	fp,0(sp)
 40076f4:	dec00204 	addi	sp,sp,8
 40076f8:	f800283a 	ret

040076fc <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
 40076fc:	defffd04 	addi	sp,sp,-12
 4007700:	dfc00215 	stw	ra,8(sp)
 4007704:	df000115 	stw	fp,4(sp)
 4007708:	df000104 	addi	fp,sp,4
 400770c:	e13fff15 	stw	r4,-4(fp)
        if(pFuncOnRelease && bPollEnable)
 4007710:	e0bfff17 	ldw	r2,-4(fp)
 4007714:	10801917 	ldw	r2,100(r2)
 4007718:	10000726 	beq	r2,zero,4007738 <_ZN9USBH_MIDI7ReleaseEv+0x3c>
 400771c:	e0bfff17 	ldw	r2,-4(fp)
 4007720:	10800343 	ldbu	r2,13(r2)
 4007724:	10803fcc 	andi	r2,r2,255
 4007728:	10000326 	beq	r2,zero,4007738 <_ZN9USBH_MIDI7ReleaseEv+0x3c>
                pFuncOnRelease(); // Call the user function
 400772c:	e0bfff17 	ldw	r2,-4(fp)
 4007730:	10801917 	ldw	r2,100(r2)
 4007734:	103ee83a 	callr	r2

        pUsb->GetAddressPool().FreeAddress(bAddress);
 4007738:	e0bfff17 	ldw	r2,-4(fp)
 400773c:	10800217 	ldw	r2,8(r2)
 4007740:	1009883a 	mov	r4,r2
 4007744:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 4007748:	1009883a 	mov	r4,r2
 400774c:	20800017 	ldw	r2,0(r4)
 4007750:	10800204 	addi	r2,r2,8
 4007754:	10800017 	ldw	r2,0(r2)
 4007758:	e0ffff17 	ldw	r3,-4(fp)
 400775c:	18c00303 	ldbu	r3,12(r3)
 4007760:	18c03fcc 	andi	r3,r3,255
 4007764:	180b883a 	mov	r5,r3
 4007768:	103ee83a 	callr	r2
        bAddress     = 0;
 400776c:	e0bfff17 	ldw	r2,-4(fp)
 4007770:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
 4007774:	e0bfff17 	ldw	r2,-4(fp)
 4007778:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
 400777c:	e0bfff17 	ldw	r2,-4(fp)
 4007780:	10001705 	stb	zero,92(r2)

        return 0;
 4007784:	0005883a 	mov	r2,zero
}
 4007788:	e037883a 	mov	sp,fp
 400778c:	dfc00117 	ldw	ra,4(sp)
 4007790:	df000017 	ldw	fp,0(sp)
 4007794:	dec00204 	addi	sp,sp,8
 4007798:	f800283a 	ret

0400779c <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
 400779c:	defffe04 	addi	sp,sp,-8
 40077a0:	df000115 	stw	fp,4(sp)
 40077a4:	df000104 	addi	fp,sp,4
 40077a8:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
 40077ac:	e0bfff17 	ldw	r2,-4(fp)
 40077b0:	1080040b 	ldhu	r2,16(r2)
 40077b4:	10bfffcc 	andi	r2,r2,65535
 40077b8:	10848d58 	cmpnei	r2,r2,4661
 40077bc:	10004e1e 	bne	r2,zero,40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
                // LaunchPad and LaunchKey endpoint attribute is interrupt 
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
 40077c0:	e0bfff17 	ldw	r2,-4(fp)
 40077c4:	1080038b 	ldhu	r2,14(r2)
 40077c8:	10bfffcc 	andi	r2,r2,65535
 40077cc:	10800820 	cmpeqi	r2,r2,32
 40077d0:	10000f1e 	bne	r2,zero,4007810 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
 40077d4:	e0bfff17 	ldw	r2,-4(fp)
 40077d8:	1080038b 	ldhu	r2,14(r2)
 40077dc:	10bfffcc 	andi	r2,r2,65535
 40077e0:	10800da0 	cmpeqi	r2,r2,54
 40077e4:	10000a1e 	bne	r2,zero,4007810 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
 40077e8:	e0bfff17 	ldw	r2,-4(fp)
 40077ec:	1080038b 	ldhu	r2,14(r2)
 40077f0:	10bfffcc 	andi	r2,r2,65535
 40077f4:	10801460 	cmpeqi	r2,r2,81
 40077f8:	1000051e 	bne	r2,zero,4007810 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
 40077fc:	e0bfff17 	ldw	r2,-4(fp)
 4007800:	1080038b 	ldhu	r2,14(r2)
 4007804:	10bfffcc 	andi	r2,r2,65535
 4007808:	10801a58 	cmpnei	r2,r2,105
 400780c:	1000041e 	bne	r2,zero,4007820 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
 4007810:	e0bfff17 	ldw	r2,-4(fp)
 4007814:	00c00084 	movi	r3,2
 4007818:	10c00485 	stb	r3,18(r2)
                        return;
 400781c:	00003606 	br	40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2, 0x0102,0x113-0x122:MiniMk3, 0x134-0x137:MK3
                if( (0x30 <= pid && pid <= 0x32) || pid == 0x35 || (0x7B <= pid && pid <= 0x7D) 
 4007820:	e0bfff17 	ldw	r2,-4(fp)
 4007824:	1080038b 	ldhu	r2,14(r2)
 4007828:	10bfffcc 	andi	r2,r2,65535
 400782c:	10800c30 	cmpltui	r2,r2,48
 4007830:	1000051e 	bne	r2,zero,4007848 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
 4007834:	e0bfff17 	ldw	r2,-4(fp)
 4007838:	1080038b 	ldhu	r2,14(r2)
 400783c:	10bfffcc 	andi	r2,r2,65535
 4007840:	10800cf0 	cmpltui	r2,r2,51
 4007844:	1000281e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 4007848:	e0bfff17 	ldw	r2,-4(fp)
 400784c:	1080038b 	ldhu	r2,14(r2)
 4007850:	10bfffcc 	andi	r2,r2,65535
 4007854:	10800d60 	cmpeqi	r2,r2,53
 4007858:	1000231e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 400785c:	e0bfff17 	ldw	r2,-4(fp)
 4007860:	1080038b 	ldhu	r2,14(r2)
 4007864:	10bfffcc 	andi	r2,r2,65535
 4007868:	10801ef0 	cmpltui	r2,r2,123
 400786c:	1000051e 	bne	r2,zero,4007884 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
 4007870:	e0bfff17 	ldw	r2,-4(fp)
 4007874:	1080038b 	ldhu	r2,14(r2)
 4007878:	10bfffcc 	andi	r2,r2,65535
 400787c:	10801fb0 	cmpltui	r2,r2,126
 4007880:	1000191e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
                  || pid == 0x102 || (0x113 <= pid && pid <= 0x122) || (0x134 <= pid && pid <= 0x137) ) {
 4007884:	e0bfff17 	ldw	r2,-4(fp)
 4007888:	1080038b 	ldhu	r2,14(r2)
 400788c:	10bfffcc 	andi	r2,r2,65535
 4007890:	108040a0 	cmpeqi	r2,r2,258
 4007894:	1000141e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 4007898:	e0bfff17 	ldw	r2,-4(fp)
 400789c:	1080038b 	ldhu	r2,14(r2)
 40078a0:	10bfffcc 	andi	r2,r2,65535
 40078a4:	108044f0 	cmpltui	r2,r2,275
 40078a8:	1000051e 	bne	r2,zero,40078c0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x124>
 40078ac:	e0bfff17 	ldw	r2,-4(fp)
 40078b0:	1080038b 	ldhu	r2,14(r2)
 40078b4:	10bfffcc 	andi	r2,r2,65535
 40078b8:	108048f0 	cmpltui	r2,r2,291
 40078bc:	10000a1e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 40078c0:	e0bfff17 	ldw	r2,-4(fp)
 40078c4:	1080038b 	ldhu	r2,14(r2)
 40078c8:	10bfffcc 	andi	r2,r2,65535
 40078cc:	10804d30 	cmpltui	r2,r2,308
 40078d0:	1000091e 	bne	r2,zero,40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
 40078d4:	e0bfff17 	ldw	r2,-4(fp)
 40078d8:	1080038b 	ldhu	r2,14(r2)
 40078dc:	10bfffcc 	andi	r2,r2,65535
 40078e0:	10804e28 	cmpgeui	r2,r2,312
 40078e4:	1000041e 	bne	r2,zero,40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
                        bTransferTypeMask = 2;
 40078e8:	e0bfff17 	ldw	r2,-4(fp)
 40078ec:	00c00084 	movi	r3,2
 40078f0:	10c00485 	stb	r3,18(r2)
                        return;
 40078f4:	0001883a 	nop
                }
        }
}
 40078f8:	e037883a 	mov	sp,fp
 40078fc:	df000017 	ldw	fp,0(sp)
 4007900:	dec00104 	addi	sp,sp,4
 4007904:	f800283a 	ret

04007908 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
 4007908:	defff804 	addi	sp,sp,-32
 400790c:	dfc00715 	stw	ra,28(sp)
 4007910:	df000615 	stw	fp,24(sp)
 4007914:	df000604 	addi	fp,sp,24
 4007918:	e13ffd15 	stw	r4,-12(fp)
 400791c:	e17ffe15 	stw	r5,-8(fp)
 4007920:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
 4007924:	e0bffd17 	ldw	r2,-12(fp)
 4007928:	108005c3 	ldbu	r2,23(r2)
 400792c:	10c03fcc 	andi	r3,r2,255
 4007930:	e0bffe17 	ldw	r2,-8(fp)
 4007934:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
 4007938:	e0bffd17 	ldw	r2,-12(fp)
 400793c:	10c00217 	ldw	r3,8(r2)
 4007940:	e0bffd17 	ldw	r2,-12(fp)
 4007944:	10800303 	ldbu	r2,12(r2)
 4007948:	11003fcc 	andi	r4,r2,255
 400794c:	e0bffd17 	ldw	r2,-12(fp)
 4007950:	10800583 	ldbu	r2,22(r2)
 4007954:	11403fcc 	andi	r5,r2,255
 4007958:	d8000115 	stw	zero,4(sp)
 400795c:	e0bfff17 	ldw	r2,-4(fp)
 4007960:	d8800015 	stw	r2,0(sp)
 4007964:	e1fffe17 	ldw	r7,-8(fp)
 4007968:	280d883a 	mov	r6,r5
 400796c:	200b883a 	mov	r5,r4
 4007970:	1809883a 	mov	r4,r3
 4007974:	40015fc0 	call	40015fc <_ZN3USB10inTransferEhhPtPhh>
 4007978:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
 400797c:	e0bffe17 	ldw	r2,-8(fp)
 4007980:	1080000b 	ldhu	r2,0(r2)
 4007984:	10bfffcc 	andi	r2,r2,65535
 4007988:	10800f28 	cmpgeui	r2,r2,60
 400798c:	10000d1e 	bne	r2,zero,40079c4 <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
 4007990:	e0bffe17 	ldw	r2,-8(fp)
 4007994:	1080000b 	ldhu	r2,0(r2)
 4007998:	10bfffcc 	andi	r2,r2,65535
 400799c:	e0ffff17 	ldw	r3,-4(fp)
 40079a0:	1885883a 	add	r2,r3,r2
 40079a4:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
 40079a8:	e0bffe17 	ldw	r2,-8(fp)
 40079ac:	1080000b 	ldhu	r2,0(r2)
 40079b0:	10bfffcc 	andi	r2,r2,65535
 40079b4:	10800044 	addi	r2,r2,1
 40079b8:	e0ffff17 	ldw	r3,-4(fp)
 40079bc:	1885883a 	add	r2,r3,r2
 40079c0:	10000005 	stb	zero,0(r2)
        }
        return r;
 40079c4:	e0bffc03 	ldbu	r2,-16(fp)
}
 40079c8:	e037883a 	mov	sp,fp
 40079cc:	dfc00117 	ldw	ra,4(sp)
 40079d0:	df000017 	ldw	fp,0(sp)
 40079d4:	dec00204 	addi	sp,sp,8
 40079d8:	f800283a 	ret

040079dc <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
 40079dc:	defff904 	addi	sp,sp,-28
 40079e0:	dfc00615 	stw	ra,24(sp)
 40079e4:	df000515 	stw	fp,20(sp)
 40079e8:	df000504 	addi	fp,sp,20
 40079ec:	e13ffd15 	stw	r4,-12(fp)
 40079f0:	e17ffe15 	stw	r5,-8(fp)
 40079f4:	3005883a 	mov	r2,r6
 40079f8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
 40079fc:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
 4007a00:	e0bffd17 	ldw	r2,-12(fp)
 4007a04:	10800343 	ldbu	r2,13(r2)
 4007a08:	1080005c 	xori	r2,r2,1
 4007a0c:	10803fcc 	andi	r2,r2,255
 4007a10:	10000226 	beq	r2,zero,4007a1c <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
 4007a14:	0005883a 	mov	r2,zero
 4007a18:	00008506 	br	4007c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
 4007a1c:	e0bffd17 	ldw	r2,-12(fp)
 4007a20:	10801703 	ldbu	r2,92(r2)
 4007a24:	10803fcc 	andi	r2,r2,255
 4007a28:	10001826 	beq	r2,zero,4007a8c <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
 4007a2c:	e0bffd17 	ldw	r2,-12(fp)
 4007a30:	10801703 	ldbu	r2,92(r2)
 4007a34:	10803fcc 	andi	r2,r2,255
 4007a38:	10801028 	cmpgeui	r2,r2,64
 4007a3c:	1000131e 	bne	r2,zero,4007a8c <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
 4007a40:	e0bffd17 	ldw	r2,-12(fp)
 4007a44:	10801703 	ldbu	r2,92(r2)
 4007a48:	10803fcc 	andi	r2,r2,255
 4007a4c:	e0fffd17 	ldw	r3,-12(fp)
 4007a50:	1885883a 	add	r2,r3,r2
 4007a54:	10800704 	addi	r2,r2,28
 4007a58:	10800003 	ldbu	r2,0(r2)
 4007a5c:	10803fcc 	andi	r2,r2,255
 4007a60:	10002a1e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007a64:	e0bffd17 	ldw	r2,-12(fp)
 4007a68:	10801703 	ldbu	r2,92(r2)
 4007a6c:	10803fcc 	andi	r2,r2,255
 4007a70:	10800044 	addi	r2,r2,1
 4007a74:	e0fffd17 	ldw	r3,-12(fp)
 4007a78:	1885883a 	add	r2,r3,r2
 4007a7c:	10800704 	addi	r2,r2,28
 4007a80:	10800003 	ldbu	r2,0(r2)
 4007a84:	10803fcc 	andi	r2,r2,255
 4007a88:	1000201e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
 4007a8c:	e0bffd17 	ldw	r2,-12(fp)
 4007a90:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
 4007a94:	e0bffd17 	ldw	r2,-12(fp)
 4007a98:	10c00704 	addi	r3,r2,28
 4007a9c:	e0bffc04 	addi	r2,fp,-16
 4007aa0:	180d883a 	mov	r6,r3
 4007aa4:	100b883a 	mov	r5,r2
 4007aa8:	e13ffd17 	ldw	r4,-12(fp)
 4007aac:	40079080 	call	4007908 <_ZN9USBH_MIDI8RecvDataEPtPh>
 4007ab0:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
 4007ab4:	e0bffb03 	ldbu	r2,-20(fp)
 4007ab8:	10000226 	beq	r2,zero,4007ac4 <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
 4007abc:	0005883a 	mov	r2,zero
 4007ac0:	00005b06 	br	4007c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
 4007ac4:	e0bffd17 	ldw	r2,-12(fp)
 4007ac8:	10800703 	ldbu	r2,28(r2)
 4007acc:	10803fcc 	andi	r2,r2,255
 4007ad0:	10000e1e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007ad4:	e0bffd17 	ldw	r2,-12(fp)
 4007ad8:	10800743 	ldbu	r2,29(r2)
 4007adc:	10803fcc 	andi	r2,r2,255
 4007ae0:	10000a1e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007ae4:	e0bffd17 	ldw	r2,-12(fp)
 4007ae8:	10800783 	ldbu	r2,30(r2)
 4007aec:	10803fcc 	andi	r2,r2,255
 4007af0:	1000061e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007af4:	e0bffd17 	ldw	r2,-12(fp)
 4007af8:	108007c3 	ldbu	r2,31(r2)
 4007afc:	10803fcc 	andi	r2,r2,255
 4007b00:	1000021e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
 4007b04:	0005883a 	mov	r2,zero
 4007b08:	00004906 	br	4007c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
 4007b0c:	e0bffd17 	ldw	r2,-12(fp)
 4007b10:	10801703 	ldbu	r2,92(r2)
 4007b14:	10803fcc 	andi	r2,r2,255
 4007b18:	e0fffd17 	ldw	r3,-12(fp)
 4007b1c:	1885883a 	add	r2,r3,r2
 4007b20:	10800704 	addi	r2,r2,28
 4007b24:	10800003 	ldbu	r2,0(r2)
 4007b28:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
 4007b2c:	e0bfff03 	ldbu	r2,-4(fp)
 4007b30:	10000526 	beq	r2,zero,4007b48 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
 4007b34:	e0bffe17 	ldw	r2,-8(fp)
 4007b38:	10c00044 	addi	r3,r2,1
 4007b3c:	e0fffe15 	stw	r3,-8(fp)
 4007b40:	e0fffb43 	ldbu	r3,-19(fp)
 4007b44:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
 4007b48:	e0bffd17 	ldw	r2,-12(fp)
 4007b4c:	10801703 	ldbu	r2,92(r2)
 4007b50:	10800044 	addi	r2,r2,1
 4007b54:	1007883a 	mov	r3,r2
 4007b58:	e0bffd17 	ldw	r2,-12(fp)
 4007b5c:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
 4007b60:	e0bffe17 	ldw	r2,-8(fp)
 4007b64:	10c00044 	addi	r3,r2,1
 4007b68:	e0fffe15 	stw	r3,-8(fp)
 4007b6c:	e0fffd17 	ldw	r3,-12(fp)
 4007b70:	18c01703 	ldbu	r3,92(r3)
 4007b74:	19000044 	addi	r4,r3,1
 4007b78:	200b883a 	mov	r5,r4
 4007b7c:	e13ffd17 	ldw	r4,-12(fp)
 4007b80:	21401705 	stb	r5,92(r4)
 4007b84:	18c03fcc 	andi	r3,r3,255
 4007b88:	e13ffd17 	ldw	r4,-12(fp)
 4007b8c:	20c7883a 	add	r3,r4,r3
 4007b90:	18c00704 	addi	r3,r3,28
 4007b94:	18c00003 	ldbu	r3,0(r3)
 4007b98:	e0fffb85 	stb	r3,-18(fp)
 4007b9c:	e0fffb83 	ldbu	r3,-18(fp)
 4007ba0:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
 4007ba4:	e0bffe17 	ldw	r2,-8(fp)
 4007ba8:	10c00044 	addi	r3,r2,1
 4007bac:	e0fffe15 	stw	r3,-8(fp)
 4007bb0:	e0fffd17 	ldw	r3,-12(fp)
 4007bb4:	18c01703 	ldbu	r3,92(r3)
 4007bb8:	19000044 	addi	r4,r3,1
 4007bbc:	200b883a 	mov	r5,r4
 4007bc0:	e13ffd17 	ldw	r4,-12(fp)
 4007bc4:	21401705 	stb	r5,92(r4)
 4007bc8:	18c03fcc 	andi	r3,r3,255
 4007bcc:	e13ffd17 	ldw	r4,-12(fp)
 4007bd0:	20c7883a 	add	r3,r4,r3
 4007bd4:	18c00704 	addi	r3,r3,28
 4007bd8:	18c00003 	ldbu	r3,0(r3)
 4007bdc:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
 4007be0:	e0bffe17 	ldw	r2,-8(fp)
 4007be4:	10c00044 	addi	r3,r2,1
 4007be8:	e0fffe15 	stw	r3,-8(fp)
 4007bec:	e0fffd17 	ldw	r3,-12(fp)
 4007bf0:	18c01703 	ldbu	r3,92(r3)
 4007bf4:	19000044 	addi	r4,r3,1
 4007bf8:	200b883a 	mov	r5,r4
 4007bfc:	e13ffd17 	ldw	r4,-12(fp)
 4007c00:	21401705 	stb	r5,92(r4)
 4007c04:	18c03fcc 	andi	r3,r3,255
 4007c08:	e13ffd17 	ldw	r4,-12(fp)
 4007c0c:	20c7883a 	add	r3,r4,r3
 4007c10:	18c00704 	addi	r3,r3,28
 4007c14:	18c00003 	ldbu	r3,0(r3)
 4007c18:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
 4007c1c:	e0bffb43 	ldbu	r2,-19(fp)
 4007c20:	108003cc 	andi	r2,r2,15
 4007c24:	100b883a 	mov	r5,r2
 4007c28:	e13ffd17 	ldw	r4,-12(fp)
 4007c2c:	4008c8c0 	call	4008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
 4007c30:	e037883a 	mov	sp,fp
 4007c34:	dfc00117 	ldw	ra,4(sp)
 4007c38:	df000017 	ldw	fp,0(sp)
 4007c3c:	dec00204 	addi	sp,sp,8
 4007c40:	f800283a 	ret

04007c44 <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
 4007c44:	defff804 	addi	sp,sp,-32
 4007c48:	dfc00715 	stw	ra,28(sp)
 4007c4c:	df000615 	stw	fp,24(sp)
 4007c50:	df000604 	addi	fp,sp,24
 4007c54:	e13ffd15 	stw	r4,-12(fp)
 4007c58:	e17ffe15 	stw	r5,-8(fp)
 4007c5c:	3005883a 	mov	r2,r6
 4007c60:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
 4007c64:	e0bffe17 	ldw	r2,-8(fp)
 4007c68:	10800003 	ldbu	r2,0(r2)
 4007c6c:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
 4007c70:	e0bffb03 	ldbu	r2,-20(fp)
 4007c74:	100b883a 	mov	r5,r2
 4007c78:	e13ffd17 	ldw	r4,-12(fp)
 4007c7c:	4008c340 	call	4008c34 <_ZN9USBH_MIDI17convertStatus2CinEh>
 4007c80:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
 4007c84:	e0bffb03 	ldbu	r2,-20(fp)
 4007c88:	10803c18 	cmpnei	r2,r2,240
 4007c8c:	10000b1e 	bne	r2,zero,4007cbc <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
 4007c90:	e17ffe17 	ldw	r5,-8(fp)
 4007c94:	e13ffd17 	ldw	r4,-12(fp)
 4007c98:	4007e040 	call	4007e04 <_ZN9USBH_MIDI18countSysExDataSizeEPh>
 4007c9c:	10bfffcc 	andi	r2,r2,65535
 4007ca0:	e0ffff03 	ldbu	r3,-4(fp)
 4007ca4:	180f883a 	mov	r7,r3
 4007ca8:	100d883a 	mov	r6,r2
 4007cac:	e17ffe17 	ldw	r5,-8(fp)
 4007cb0:	e13ffd17 	ldw	r4,-12(fp)
 4007cb4:	4007e8c0 	call	4007e8c <_ZN9USBH_MIDI9SendSysExEPhth>
 4007cb8:	00003406 	br	4007d8c <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
 4007cbc:	e0bfff03 	ldbu	r2,-4(fp)
 4007cc0:	1004913a 	slli	r2,r2,4
 4007cc4:	1007883a 	mov	r3,r2
 4007cc8:	e0bffb43 	ldbu	r2,-19(fp)
 4007ccc:	1884b03a 	or	r2,r3,r2
 4007cd0:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
 4007cd4:	e0bffe17 	ldw	r2,-8(fp)
 4007cd8:	10800003 	ldbu	r2,0(r2)
 4007cdc:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
 4007ce0:	e0bffb43 	ldbu	r2,-19(fp)
 4007ce4:	100b883a 	mov	r5,r2
 4007ce8:	e13ffd17 	ldw	r4,-12(fp)
 4007cec:	4008c8c0 	call	4008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
 4007cf0:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
 4007cf4:	e0bffb83 	ldbu	r2,-18(fp)
 4007cf8:	10c000a0 	cmpeqi	r3,r2,2
 4007cfc:	18000c1e 	bne	r3,zero,4007d30 <_ZN9USBH_MIDI8SendDataEPhh+0xec>
 4007d00:	10c000e0 	cmpeqi	r3,r2,3
 4007d04:	1800031e 	bne	r3,zero,4007d14 <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
 4007d08:	10800060 	cmpeqi	r2,r2,1
 4007d0c:	10000d1e 	bne	r2,zero,4007d44 <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
 4007d10:	00000f06 	br	4007d50 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
 4007d14:	e0bffe17 	ldw	r2,-8(fp)
 4007d18:	10800043 	ldbu	r2,1(r2)
 4007d1c:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
 4007d20:	e0bffe17 	ldw	r2,-8(fp)
 4007d24:	10800083 	ldbu	r2,2(r2)
 4007d28:	e0bffc85 	stb	r2,-14(fp)
                break;
 4007d2c:	00000806 	br	4007d50 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
 4007d30:	e0bffe17 	ldw	r2,-8(fp)
 4007d34:	10800043 	ldbu	r2,1(r2)
 4007d38:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
 4007d3c:	e03ffc85 	stb	zero,-14(fp)
                break;
 4007d40:	00000306 	br	4007d50 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
 4007d44:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
 4007d48:	e03ffc85 	stb	zero,-14(fp)
                break;
 4007d4c:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
 4007d50:	e0bffd17 	ldw	r2,-12(fp)
 4007d54:	10c00217 	ldw	r3,8(r2)
 4007d58:	e0bffd17 	ldw	r2,-12(fp)
 4007d5c:	10800303 	ldbu	r2,12(r2)
 4007d60:	11003fcc 	andi	r4,r2,255
 4007d64:	e0bffd17 	ldw	r2,-12(fp)
 4007d68:	10800643 	ldbu	r2,25(r2)
 4007d6c:	11403fcc 	andi	r5,r2,255
 4007d70:	e0bffbc4 	addi	r2,fp,-17
 4007d74:	d8800015 	stw	r2,0(sp)
 4007d78:	01c00104 	movi	r7,4
 4007d7c:	280d883a 	mov	r6,r5
 4007d80:	200b883a 	mov	r5,r4
 4007d84:	1809883a 	mov	r4,r3
 4007d88:	40019900 	call	4001990 <_ZN3USB11outTransferEhhtPh>
}
 4007d8c:	e037883a 	mov	sp,fp
 4007d90:	dfc00117 	ldw	ra,4(sp)
 4007d94:	df000017 	ldw	fp,0(sp)
 4007d98:	dec00204 	addi	sp,sp,8
 4007d9c:	f800283a 	ret

04007da0 <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
 4007da0:	defffb04 	addi	sp,sp,-20
 4007da4:	dfc00415 	stw	ra,16(sp)
 4007da8:	df000315 	stw	fp,12(sp)
 4007dac:	df000304 	addi	fp,sp,12
 4007db0:	e13ffd15 	stw	r4,-12(fp)
 4007db4:	2807883a 	mov	r3,r5
 4007db8:	3005883a 	mov	r2,r6
 4007dbc:	e0fffe05 	stb	r3,-8(fp)
 4007dc0:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
 4007dc4:	e0bfff03 	ldbu	r2,-4(fp)
 4007dc8:	1000051e 	bne	r2,zero,4007de0 <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
 4007dcc:	e0bffe03 	ldbu	r2,-8(fp)
 4007dd0:	100b883a 	mov	r5,r2
 4007dd4:	e13ffd17 	ldw	r4,-12(fp)
 4007dd8:	4008c340 	call	4008c34 <_ZN9USBH_MIDI17convertStatus2CinEh>
 4007ddc:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
 4007de0:	e0bfff03 	ldbu	r2,-4(fp)
 4007de4:	100b883a 	mov	r5,r2
 4007de8:	e13ffd17 	ldw	r4,-12(fp)
 4007dec:	4008c8c0 	call	4008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
 4007df0:	e037883a 	mov	sp,fp
 4007df4:	dfc00117 	ldw	ra,4(sp)
 4007df8:	df000017 	ldw	fp,0(sp)
 4007dfc:	dec00204 	addi	sp,sp,8
 4007e00:	f800283a 	ret

04007e04 <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
 4007e04:	defffc04 	addi	sp,sp,-16
 4007e08:	df000315 	stw	fp,12(sp)
 4007e0c:	df000304 	addi	fp,sp,12
 4007e10:	e13ffe15 	stw	r4,-8(fp)
 4007e14:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
 4007e18:	00800044 	movi	r2,1
 4007e1c:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
 4007e20:	e0bfff17 	ldw	r2,-4(fp)
 4007e24:	10800003 	ldbu	r2,0(r2)
 4007e28:	10803fcc 	andi	r2,r2,255
 4007e2c:	10803c20 	cmpeqi	r2,r2,240
 4007e30:	1000021e 	bne	r2,zero,4007e3c <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
 4007e34:	0005883a 	mov	r2,zero
 4007e38:	00001006 	br	4007e7c <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
 4007e3c:	e0bfff17 	ldw	r2,-4(fp)
 4007e40:	10800003 	ldbu	r2,0(r2)
 4007e44:	10803fcc 	andi	r2,r2,255
 4007e48:	10803de0 	cmpeqi	r2,r2,247
 4007e4c:	10000a1e 	bne	r2,zero,4007e78 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
 4007e50:	e0bfff17 	ldw	r2,-4(fp)
 4007e54:	10800044 	addi	r2,r2,1
 4007e58:	e0bfff15 	stw	r2,-4(fp)
                c++;
 4007e5c:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e60:	10800044 	addi	r2,r2,1
 4007e64:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
 4007e68:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e6c:	10804070 	cmpltui	r2,r2,257
 4007e70:	103ff21e 	bne	r2,zero,4007e3c <__alt_mem_onchip_memory2_0+0xfc006bbc>
                        c = 0;
 4007e74:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
 4007e78:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4007e7c:	e037883a 	mov	sp,fp
 4007e80:	df000017 	ldw	fp,0(sp)
 4007e84:	dec00104 	addi	sp,sp,4
 4007e88:	f800283a 	ret

04007e8c <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
 4007e8c:	deffe704 	addi	sp,sp,-100
 4007e90:	dfc01815 	stw	ra,96(sp)
 4007e94:	df001715 	stw	fp,92(sp)
 4007e98:	df001704 	addi	fp,sp,92
 4007e9c:	e13ffc15 	stw	r4,-16(fp)
 4007ea0:	e17ffd15 	stw	r5,-12(fp)
 4007ea4:	3007883a 	mov	r3,r6
 4007ea8:	3805883a 	mov	r2,r7
 4007eac:	e0fffe0d 	sth	r3,-8(fp)
 4007eb0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
 4007eb4:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
 4007eb8:	e0bffe0b 	ldhu	r2,-8(fp)
 4007ebc:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
 4007ec0:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
 4007ec4:	e0bffc17 	ldw	r2,-16(fp)
 4007ec8:	108005c3 	ldbu	r2,23(r2)
 4007ecc:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
 4007ed0:	e0bffe0b 	ldhu	r2,-8(fp)
 4007ed4:	01402004 	movi	r5,128
 4007ed8:	1009883a 	mov	r4,r2
 4007edc:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
 4007ee0:	e0bfea8b 	ldhu	r2,-86(fp)
 4007ee4:	1000b026 	beq	r2,zero,40081a8 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
 4007ee8:	e0bfeb03 	ldbu	r2,-84(fp)
 4007eec:	e0ffff03 	ldbu	r3,-4(fp)
 4007ef0:	1806913a 	slli	r3,r3,4
 4007ef4:	18c00114 	ori	r3,r3,4
 4007ef8:	1809883a 	mov	r4,r3
 4007efc:	e0ffeb84 	addi	r3,fp,-82
 4007f00:	1885883a 	add	r2,r3,r2
 4007f04:	11000005 	stb	r4,0(r2)

                switch ( n ) {
 4007f08:	e0bfea8b 	ldhu	r2,-86(fp)
 4007f0c:	10c000a0 	cmpeqi	r3,r2,2
 4007f10:	18002a1e 	bne	r3,zero,4007fbc <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
 4007f14:	10c000e0 	cmpeqi	r3,r2,3
 4007f18:	1800521e 	bne	r3,zero,4008064 <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
 4007f1c:	10800060 	cmpeqi	r2,r2,1
 4007f20:	10005826 	beq	r2,zero,4008084 <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
 4007f24:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f28:	10c00044 	addi	r3,r2,1
 4007f2c:	e0ffeb05 	stb	r3,-84(fp)
 4007f30:	10803fcc 	andi	r2,r2,255
 4007f34:	e0ffff03 	ldbu	r3,-4(fp)
 4007f38:	1806913a 	slli	r3,r3,4
 4007f3c:	18c00154 	ori	r3,r3,5
 4007f40:	1809883a 	mov	r4,r3
 4007f44:	e0ffeb84 	addi	r3,fp,-82
 4007f48:	1885883a 	add	r2,r3,r2
 4007f4c:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
 4007f50:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f54:	10c00044 	addi	r3,r2,1
 4007f58:	e0ffeb05 	stb	r3,-84(fp)
 4007f5c:	11003fcc 	andi	r4,r2,255
 4007f60:	e0bffd17 	ldw	r2,-12(fp)
 4007f64:	10c00044 	addi	r3,r2,1
 4007f68:	e0fffd15 	stw	r3,-12(fp)
 4007f6c:	10c00003 	ldbu	r3,0(r2)
 4007f70:	e0bfeb84 	addi	r2,fp,-82
 4007f74:	1105883a 	add	r2,r2,r4
 4007f78:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
 4007f7c:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f80:	10c00044 	addi	r3,r2,1
 4007f84:	e0ffeb05 	stb	r3,-84(fp)
 4007f88:	10803fcc 	andi	r2,r2,255
 4007f8c:	e0ffeb84 	addi	r3,fp,-82
 4007f90:	1885883a 	add	r2,r3,r2
 4007f94:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
 4007f98:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f9c:	10c00044 	addi	r3,r2,1
 4007fa0:	e0ffeb05 	stb	r3,-84(fp)
 4007fa4:	10803fcc 	andi	r2,r2,255
 4007fa8:	e0ffeb84 	addi	r3,fp,-82
 4007fac:	1885883a 	add	r2,r3,r2
 4007fb0:	10000005 	stb	zero,0(r2)
                        n = 0;
 4007fb4:	e03fea8d 	sth	zero,-86(fp)
                        break;
 4007fb8:	00005a06 	br	4008124 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
 4007fbc:	e0bfeb03 	ldbu	r2,-84(fp)
 4007fc0:	10c00044 	addi	r3,r2,1
 4007fc4:	e0ffeb05 	stb	r3,-84(fp)
 4007fc8:	10803fcc 	andi	r2,r2,255
 4007fcc:	e0ffff03 	ldbu	r3,-4(fp)
 4007fd0:	1806913a 	slli	r3,r3,4
 4007fd4:	18c00194 	ori	r3,r3,6
 4007fd8:	1809883a 	mov	r4,r3
 4007fdc:	e0ffeb84 	addi	r3,fp,-82
 4007fe0:	1885883a 	add	r2,r3,r2
 4007fe4:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
 4007fe8:	e0bfeb03 	ldbu	r2,-84(fp)
 4007fec:	10c00044 	addi	r3,r2,1
 4007ff0:	e0ffeb05 	stb	r3,-84(fp)
 4007ff4:	11003fcc 	andi	r4,r2,255
 4007ff8:	e0bffd17 	ldw	r2,-12(fp)
 4007ffc:	10c00044 	addi	r3,r2,1
 4008000:	e0fffd15 	stw	r3,-12(fp)
 4008004:	10c00003 	ldbu	r3,0(r2)
 4008008:	e0bfeb84 	addi	r2,fp,-82
 400800c:	1105883a 	add	r2,r2,r4
 4008010:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
 4008014:	e0bfeb03 	ldbu	r2,-84(fp)
 4008018:	10c00044 	addi	r3,r2,1
 400801c:	e0ffeb05 	stb	r3,-84(fp)
 4008020:	11003fcc 	andi	r4,r2,255
 4008024:	e0bffd17 	ldw	r2,-12(fp)
 4008028:	10c00044 	addi	r3,r2,1
 400802c:	e0fffd15 	stw	r3,-12(fp)
 4008030:	10c00003 	ldbu	r3,0(r2)
 4008034:	e0bfeb84 	addi	r2,fp,-82
 4008038:	1105883a 	add	r2,r2,r4
 400803c:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
 4008040:	e0bfeb03 	ldbu	r2,-84(fp)
 4008044:	10c00044 	addi	r3,r2,1
 4008048:	e0ffeb05 	stb	r3,-84(fp)
 400804c:	10803fcc 	andi	r2,r2,255
 4008050:	e0ffeb84 	addi	r3,fp,-82
 4008054:	1885883a 	add	r2,r3,r2
 4008058:	10000005 	stb	zero,0(r2)
                        n = 0;
 400805c:	e03fea8d 	sth	zero,-86(fp)
                        break;
 4008060:	00003006 	br	4008124 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
 4008064:	e0bfeb03 	ldbu	r2,-84(fp)
 4008068:	e0ffff03 	ldbu	r3,-4(fp)
 400806c:	1806913a 	slli	r3,r3,4
 4008070:	18c001d4 	ori	r3,r3,7
 4008074:	1809883a 	mov	r4,r3
 4008078:	e0ffeb84 	addi	r3,fp,-82
 400807c:	1885883a 	add	r2,r3,r2
 4008080:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
 4008084:	e0bfeb03 	ldbu	r2,-84(fp)
 4008088:	10800044 	addi	r2,r2,1
 400808c:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
 4008090:	e0bfeb03 	ldbu	r2,-84(fp)
 4008094:	10c00044 	addi	r3,r2,1
 4008098:	e0ffeb05 	stb	r3,-84(fp)
 400809c:	11003fcc 	andi	r4,r2,255
 40080a0:	e0bffd17 	ldw	r2,-12(fp)
 40080a4:	10c00044 	addi	r3,r2,1
 40080a8:	e0fffd15 	stw	r3,-12(fp)
 40080ac:	10c00003 	ldbu	r3,0(r2)
 40080b0:	e0bfeb84 	addi	r2,fp,-82
 40080b4:	1105883a 	add	r2,r2,r4
 40080b8:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
 40080bc:	e0bfeb03 	ldbu	r2,-84(fp)
 40080c0:	10c00044 	addi	r3,r2,1
 40080c4:	e0ffeb05 	stb	r3,-84(fp)
 40080c8:	11003fcc 	andi	r4,r2,255
 40080cc:	e0bffd17 	ldw	r2,-12(fp)
 40080d0:	10c00044 	addi	r3,r2,1
 40080d4:	e0fffd15 	stw	r3,-12(fp)
 40080d8:	10c00003 	ldbu	r3,0(r2)
 40080dc:	e0bfeb84 	addi	r2,fp,-82
 40080e0:	1105883a 	add	r2,r2,r4
 40080e4:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
 40080e8:	e0bfeb03 	ldbu	r2,-84(fp)
 40080ec:	10c00044 	addi	r3,r2,1
 40080f0:	e0ffeb05 	stb	r3,-84(fp)
 40080f4:	11003fcc 	andi	r4,r2,255
 40080f8:	e0bffd17 	ldw	r2,-12(fp)
 40080fc:	10c00044 	addi	r3,r2,1
 4008100:	e0fffd15 	stw	r3,-12(fp)
 4008104:	10c00003 	ldbu	r3,0(r2)
 4008108:	e0bfeb84 	addi	r2,fp,-82
 400810c:	1105883a 	add	r2,r2,r4
 4008110:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
 4008114:	e0bfea8b 	ldhu	r2,-86(fp)
 4008118:	10bfff44 	addi	r2,r2,-3
 400811c:	e0bfea8d 	sth	r2,-86(fp)
                        break;
 4008120:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
 4008124:	e0ffeb03 	ldbu	r3,-84(fp)
 4008128:	e0bfeb43 	ldbu	r2,-83(fp)
 400812c:	1880022e 	bgeu	r3,r2,4008138 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
 4008130:	e0bfea8b 	ldhu	r2,-86(fp)
 4008134:	103f6a1e 	bne	r2,zero,4007ee0 <__alt_mem_onchip_memory2_0+0xfc006c60>
                        USBTRACE2(" wptr:\t", wptr);
 4008138:	e0bfeb03 	ldbu	r2,-84(fp)
 400813c:	01402004 	movi	r5,128
 4008140:	1009883a 	mov	r4,r2
 4008144:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
 4008148:	e0bffc17 	ldw	r2,-16(fp)
 400814c:	10c00217 	ldw	r3,8(r2)
 4008150:	e0bffc17 	ldw	r2,-16(fp)
 4008154:	10800303 	ldbu	r2,12(r2)
 4008158:	11003fcc 	andi	r4,r2,255
 400815c:	e0bffc17 	ldw	r2,-16(fp)
 4008160:	10800643 	ldbu	r2,25(r2)
 4008164:	11403fcc 	andi	r5,r2,255
 4008168:	e1bfeb03 	ldbu	r6,-84(fp)
 400816c:	e0bfeb84 	addi	r2,fp,-82
 4008170:	d8800015 	stw	r2,0(sp)
 4008174:	300f883a 	mov	r7,r6
 4008178:	280d883a 	mov	r6,r5
 400817c:	200b883a 	mov	r5,r4
 4008180:	1809883a 	mov	r4,r3
 4008184:	40019900 	call	4001990 <_ZN3USB11outTransferEhhtPh>
 4008188:	e0bfea05 	stb	r2,-88(fp)
 400818c:	e0bfea03 	ldbu	r2,-88(fp)
 4008190:	1004c03a 	cmpne	r2,r2,zero
 4008194:	10803fcc 	andi	r2,r2,255
 4008198:	1000021e 	bne	r2,zero,40081a4 <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
 400819c:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
 40081a0:	003f4f06 	br	4007ee0 <__alt_mem_onchip_memory2_0+0xfc006c60>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
 40081a4:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
 40081a8:	e0bfea03 	ldbu	r2,-88(fp)
}
 40081ac:	e037883a 	mov	sp,fp
 40081b0:	dfc00117 	ldw	ra,4(sp)
 40081b4:	df000017 	ldw	fp,0(sp)
 40081b8:	dec00204 	addi	sp,sp,8
 40081bc:	f800283a 	ret

040081c0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
 40081c0:	defffb04 	addi	sp,sp,-20
 40081c4:	df000415 	stw	fp,16(sp)
 40081c8:	df000404 	addi	fp,sp,16
 40081cc:	e13ffd15 	stw	r4,-12(fp)
 40081d0:	e17ffe15 	stw	r5,-8(fp)
 40081d4:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
 40081d8:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
 40081dc:	e0bffe17 	ldw	r2,-8(fp)
 40081e0:	10800003 	ldbu	r2,0(r2)
 40081e4:	108003cc 	andi	r2,r2,15
 40081e8:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
 40081ec:	e0bffc43 	ldbu	r2,-15(fp)
 40081f0:	1080030c 	andi	r2,r2,12
 40081f4:	10800120 	cmpeqi	r2,r2,4
 40081f8:	1000021e 	bne	r2,zero,4008204 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
 40081fc:	e0bffc03 	ldbu	r2,-16(fp)
 4008200:	00003b06 	br	40082f0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
 4008204:	e0bffc43 	ldbu	r2,-15(fp)
 4008208:	10c00160 	cmpeqi	r3,r2,5
 400820c:	18002e1e 	bne	r3,zero,40082c8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
 4008210:	10c00188 	cmpgei	r3,r2,6
 4008214:	1800031e 	bne	r3,zero,4008224 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
 4008218:	10800120 	cmpeqi	r2,r2,4
 400821c:	1000061e 	bne	r2,zero,4008238 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
 4008220:	00003206 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
 4008224:	10c001a0 	cmpeqi	r3,r2,6
 4008228:	1800181e 	bne	r3,zero,400828c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
 400822c:	108001e0 	cmpeqi	r2,r2,7
 4008230:	1000011e 	bne	r2,zero,4008238 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
 4008234:	00002d06 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
 4008238:	e0bfff17 	ldw	r2,-4(fp)
 400823c:	10c00044 	addi	r3,r2,1
 4008240:	e0ffff15 	stw	r3,-4(fp)
 4008244:	e0fffe17 	ldw	r3,-8(fp)
 4008248:	18c00043 	ldbu	r3,1(r3)
 400824c:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
 4008250:	e0bfff17 	ldw	r2,-4(fp)
 4008254:	10c00044 	addi	r3,r2,1
 4008258:	e0ffff15 	stw	r3,-4(fp)
 400825c:	e0fffe17 	ldw	r3,-8(fp)
 4008260:	18c00083 	ldbu	r3,2(r3)
 4008264:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
 4008268:	e0bfff17 	ldw	r2,-4(fp)
 400826c:	10c00044 	addi	r3,r2,1
 4008270:	e0ffff15 	stw	r3,-4(fp)
 4008274:	e0fffe17 	ldw	r3,-8(fp)
 4008278:	18c000c3 	ldbu	r3,3(r3)
 400827c:	10c00005 	stb	r3,0(r2)
                rc = 3;
 4008280:	008000c4 	movi	r2,3
 4008284:	e0bffc05 	stb	r2,-16(fp)
                break;
 4008288:	00001806 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
 400828c:	e0bfff17 	ldw	r2,-4(fp)
 4008290:	10c00044 	addi	r3,r2,1
 4008294:	e0ffff15 	stw	r3,-4(fp)
 4008298:	e0fffe17 	ldw	r3,-8(fp)
 400829c:	18c00043 	ldbu	r3,1(r3)
 40082a0:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
 40082a4:	e0bfff17 	ldw	r2,-4(fp)
 40082a8:	10c00044 	addi	r3,r2,1
 40082ac:	e0ffff15 	stw	r3,-4(fp)
 40082b0:	e0fffe17 	ldw	r3,-8(fp)
 40082b4:	18c00083 	ldbu	r3,2(r3)
 40082b8:	10c00005 	stb	r3,0(r2)
                rc = 2;
 40082bc:	00800084 	movi	r2,2
 40082c0:	e0bffc05 	stb	r2,-16(fp)
                break;
 40082c4:	00000906 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
 40082c8:	e0bfff17 	ldw	r2,-4(fp)
 40082cc:	10c00044 	addi	r3,r2,1
 40082d0:	e0ffff15 	stw	r3,-4(fp)
 40082d4:	e0fffe17 	ldw	r3,-8(fp)
 40082d8:	18c00043 	ldbu	r3,1(r3)
 40082dc:	10c00005 	stb	r3,0(r2)
                rc = 1;
 40082e0:	00800044 	movi	r2,1
 40082e4:	e0bffc05 	stb	r2,-16(fp)
                break;
 40082e8:	0001883a 	nop
            default:
                break;
        }
        return(rc);
 40082ec:	e0bffc03 	ldbu	r2,-16(fp)
}
 40082f0:	e037883a 	mov	sp,fp
 40082f4:	df000017 	ldw	fp,0(sp)
 40082f8:	dec00104 	addi	sp,sp,4
 40082fc:	f800283a 	ret

04008300 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
 4008300:	defffb04 	addi	sp,sp,-20
 4008304:	dfc00415 	stw	ra,16(sp)
 4008308:	df000315 	stw	fp,12(sp)
 400830c:	df000304 	addi	fp,sp,12
 4008310:	e13ffd15 	stw	r4,-12(fp)
 4008314:	e17ffe15 	stw	r5,-8(fp)
 4008318:	3005883a 	mov	r2,r6
 400831c:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
 4008320:	e0bffd17 	ldw	r2,-12(fp)
 4008324:	1009883a 	mov	r4,r2
 4008328:	40056400 	call	4005640 <_ZN13USBReadParserC1Ev>
 400832c:	008100b4 	movhi	r2,1026
 4008330:	10894b04 	addi	r2,r2,9516
 4008334:	e0fffd17 	ldw	r3,-12(fp)
 4008338:	18800015 	stw	r2,0(r3)
 400833c:	e0bffd17 	ldw	r2,-12(fp)
 4008340:	e0fffe17 	ldw	r3,-8(fp)
 4008344:	10c00115 	stw	r3,4(r2)
 4008348:	e0bffd17 	ldw	r2,-12(fp)
 400834c:	10800204 	addi	r2,r2,8
 4008350:	1009883a 	mov	r4,r2
 4008354:	4004f300 	call	4004f30 <_ZN16MultiValueBufferC1Ev>
 4008358:	e0bffd17 	ldw	r2,-12(fp)
 400835c:	10800404 	addi	r2,r2,16
 4008360:	1009883a 	mov	r4,r2
 4008364:	4004f900 	call	4004f90 <_ZN20MultiByteValueParserC1Ev>
 4008368:	e0bffd17 	ldw	r2,-12(fp)
 400836c:	10800604 	addi	r2,r2,24
 4008370:	1009883a 	mov	r4,r2
 4008374:	400504c0 	call	400504c <_ZN11ByteSkipperC1Ev>
 4008378:	e0bffd17 	ldw	r2,-12(fp)
 400837c:	10000c05 	stb	zero,48(r2)
 4008380:	e0bffd17 	ldw	r2,-12(fp)
 4008384:	10000c45 	stb	zero,49(r2)
 4008388:	e0bffd17 	ldw	r2,-12(fp)
 400838c:	10000c85 	stb	zero,50(r2)
 4008390:	e0bffd17 	ldw	r2,-12(fp)
 4008394:	10000cc5 	stb	zero,51(r2)
 4008398:	e0bffd17 	ldw	r2,-12(fp)
 400839c:	e0ffff03 	ldbu	r3,-4(fp)
 40083a0:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
 40083a4:	e0bffd17 	ldw	r2,-12(fp)
 40083a8:	10c00804 	addi	r3,r2,32
 40083ac:	e0bffd17 	ldw	r2,-12(fp)
 40083b0:	19803fcc 	andi	r6,r3,255
 40083b4:	11000243 	ldbu	r4,9(r2)
 40083b8:	2008703a 	and	r4,r4,zero
 40083bc:	200b883a 	mov	r5,r4
 40083c0:	3009883a 	mov	r4,r6
 40083c4:	2908b03a 	or	r4,r5,r4
 40083c8:	11000245 	stb	r4,9(r2)
 40083cc:	1808d23a 	srli	r4,r3,8
 40083d0:	21803fcc 	andi	r6,r4,255
 40083d4:	11000283 	ldbu	r4,10(r2)
 40083d8:	2008703a 	and	r4,r4,zero
 40083dc:	200b883a 	mov	r5,r4
 40083e0:	3009883a 	mov	r4,r6
 40083e4:	2908b03a 	or	r4,r5,r4
 40083e8:	11000285 	stb	r4,10(r2)
 40083ec:	1808d43a 	srli	r4,r3,16
 40083f0:	21803fcc 	andi	r6,r4,255
 40083f4:	110002c3 	ldbu	r4,11(r2)
 40083f8:	2008703a 	and	r4,r4,zero
 40083fc:	200b883a 	mov	r5,r4
 4008400:	3009883a 	mov	r4,r6
 4008404:	2908b03a 	or	r4,r5,r4
 4008408:	110002c5 	stb	r4,11(r2)
 400840c:	180ad63a 	srli	r5,r3,24
 4008410:	10c00303 	ldbu	r3,12(r2)
 4008414:	1806703a 	and	r3,r3,zero
 4008418:	1809883a 	mov	r4,r3
 400841c:	2807883a 	mov	r3,r5
 4008420:	20c6b03a 	or	r3,r4,r3
 4008424:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
 4008428:	e0bffd17 	ldw	r2,-12(fp)
 400842c:	10c00404 	addi	r3,r2,16
 4008430:	e0bffd17 	ldw	r2,-12(fp)
 4008434:	10800204 	addi	r2,r2,8
 4008438:	100b883a 	mov	r5,r2
 400843c:	1809883a 	mov	r4,r3
 4008440:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 4008444:	e0bffd17 	ldw	r2,-12(fp)
 4008448:	10c00604 	addi	r3,r2,24
 400844c:	e0bffd17 	ldw	r2,-12(fp)
 4008450:	10800204 	addi	r2,r2,8
 4008454:	100b883a 	mov	r5,r2
 4008458:	1809883a 	mov	r4,r3
 400845c:	40050880 	call	4005088 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
 4008460:	0001883a 	nop
 4008464:	e037883a 	mov	sp,fp
 4008468:	dfc00117 	ldw	ra,4(sp)
 400846c:	df000017 	ldw	fp,0(sp)
 4008470:	dec00204 	addi	sp,sp,8
 4008474:	f800283a 	ret

04008478 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 4008478:	defff804 	addi	sp,sp,-32
 400847c:	dfc00715 	stw	ra,28(sp)
 4008480:	df000615 	stw	fp,24(sp)
 4008484:	df000604 	addi	fp,sp,24
 4008488:	e13ffc15 	stw	r4,-16(fp)
 400848c:	2805883a 	mov	r2,r5
 4008490:	e1bffe15 	stw	r6,-8(fp)
 4008494:	e1ffff15 	stw	r7,-4(fp)
 4008498:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
 400849c:	e0bffd0b 	ldhu	r2,-12(fp)
 40084a0:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
 40084a4:	e0bffe17 	ldw	r2,-8(fp)
 40084a8:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
 40084ac:	e0bffa0b 	ldhu	r2,-24(fp)
 40084b0:	10bfffcc 	andi	r2,r2,65535
 40084b4:	10000a26 	beq	r2,zero,40084e0 <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
 40084b8:	e0bffb04 	addi	r2,fp,-20
 40084bc:	e1bffa04 	addi	r6,fp,-24
 40084c0:	100b883a 	mov	r5,r2
 40084c4:	e13ffc17 	ldw	r4,-16(fp)
 40084c8:	40084f40 	call	40084f4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
 40084cc:	1080005c 	xori	r2,r2,1
 40084d0:	10803fcc 	andi	r2,r2,255
 40084d4:	1000011e 	bne	r2,zero,40084dc <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
 40084d8:	003ff406 	br	40084ac <__alt_mem_onchip_memory2_0+0xfc00722c>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
 40084dc:	0001883a 	nop
}
 40084e0:	e037883a 	mov	sp,fp
 40084e4:	dfc00117 	ldw	ra,4(sp)
 40084e8:	df000017 	ldw	fp,0(sp)
 40084ec:	dec00204 	addi	sp,sp,8
 40084f0:	f800283a 	ret

040084f4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 40084f4:	defff604 	addi	sp,sp,-40
 40084f8:	dfc00915 	stw	ra,36(sp)
 40084fc:	df000815 	stw	fp,32(sp)
 4008500:	df000804 	addi	fp,sp,32
 4008504:	e13ffc15 	stw	r4,-16(fp)
 4008508:	e17ffd15 	stw	r5,-12(fp)
 400850c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 4008510:	e0bffc17 	ldw	r2,-16(fp)
 4008514:	10800804 	addi	r2,r2,32
 4008518:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 400851c:	e0bffc17 	ldw	r2,-16(fp)
 4008520:	10800804 	addi	r2,r2,32
 4008524:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
 4008528:	e0bffc17 	ldw	r2,-16(fp)
 400852c:	10800c03 	ldbu	r2,48(r2)
 4008530:	10803fcc 	andi	r2,r2,255
 4008534:	10c00168 	cmpgeui	r3,r2,5
 4008538:	1801411e 	bne	r3,zero,4008a40 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
 400853c:	100690ba 	slli	r3,r2,2
 4008540:	00810074 	movhi	r2,1025
 4008544:	10a15504 	addi	r2,r2,-31404
 4008548:	1885883a 	add	r2,r3,r2
 400854c:	10800017 	ldw	r2,0(r2)
 4008550:	1000683a 	jmp	r2
 4008554:	04008568 	cmpgeui	r16,zero,533
 4008558:	0400859c 	xori	r16,zero,534
 400855c:	04008624 	muli	r16,zero,536
 4008560:	040086b8 	rdprs	r16,zero,538
 4008564:	04008724 	muli	r16,zero,540
                case 0:
                        theBuffer.valueSize = 2;
 4008568:	e0bffc17 	ldw	r2,-16(fp)
 400856c:	00c00084 	movi	r3,2
 4008570:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 4008574:	e0bffc17 	ldw	r2,-16(fp)
 4008578:	10c00404 	addi	r3,r2,16
 400857c:	e0bffc17 	ldw	r2,-16(fp)
 4008580:	10800204 	addi	r2,r2,8
 4008584:	100b883a 	mov	r5,r2
 4008588:	1809883a 	mov	r4,r3
 400858c:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 4008590:	e0bffc17 	ldw	r2,-16(fp)
 4008594:	00c00044 	movi	r3,1
 4008598:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 400859c:	e0bffc17 	ldw	r2,-16(fp)
 40085a0:	10800404 	addi	r2,r2,16
 40085a4:	e1bffe17 	ldw	r6,-8(fp)
 40085a8:	e17ffd17 	ldw	r5,-12(fp)
 40085ac:	1009883a 	mov	r4,r2
 40085b0:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 40085b4:	1080005c 	xori	r2,r2,1
 40085b8:	10803fcc 	andi	r2,r2,255
 40085bc:	10000226 	beq	r2,zero,40085c8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
 40085c0:	0005883a 	mov	r2,zero
 40085c4:	00011f06 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 40085c8:	e0bffc17 	ldw	r2,-16(fp)
 40085cc:	10c00217 	ldw	r3,8(r2)
 40085d0:	1806d23a 	srli	r3,r3,8
 40085d4:	10800317 	ldw	r2,12(r2)
 40085d8:	10803fcc 	andi	r2,r2,255
 40085dc:	1004963a 	slli	r2,r2,24
 40085e0:	10c4b03a 	or	r2,r2,r3
 40085e4:	10c00003 	ldbu	r3,0(r2)
 40085e8:	e0bffc17 	ldw	r2,-16(fp)
 40085ec:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 40085f0:	e0bffc17 	ldw	r2,-16(fp)
 40085f4:	10c00217 	ldw	r3,8(r2)
 40085f8:	1806d23a 	srli	r3,r3,8
 40085fc:	10800317 	ldw	r2,12(r2)
 4008600:	10803fcc 	andi	r2,r2,255
 4008604:	1004963a 	slli	r2,r2,24
 4008608:	10c4b03a 	or	r2,r2,r3
 400860c:	10c00043 	ldbu	r3,1(r2)
 4008610:	e0bffc17 	ldw	r2,-16(fp)
 4008614:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
 4008618:	e0bffc17 	ldw	r2,-16(fp)
 400861c:	00c00084 	movi	r3,2
 4008620:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 4008624:	e0bffc17 	ldw	r2,-16(fp)
 4008628:	10800804 	addi	r2,r2,32
 400862c:	10c00084 	addi	r3,r2,2
 4008630:	e0bffc17 	ldw	r2,-16(fp)
 4008634:	19803fcc 	andi	r6,r3,255
 4008638:	11000243 	ldbu	r4,9(r2)
 400863c:	2008703a 	and	r4,r4,zero
 4008640:	200b883a 	mov	r5,r4
 4008644:	3009883a 	mov	r4,r6
 4008648:	2908b03a 	or	r4,r5,r4
 400864c:	11000245 	stb	r4,9(r2)
 4008650:	1808d23a 	srli	r4,r3,8
 4008654:	21803fcc 	andi	r6,r4,255
 4008658:	11000283 	ldbu	r4,10(r2)
 400865c:	2008703a 	and	r4,r4,zero
 4008660:	200b883a 	mov	r5,r4
 4008664:	3009883a 	mov	r4,r6
 4008668:	2908b03a 	or	r4,r5,r4
 400866c:	11000285 	stb	r4,10(r2)
 4008670:	1808d43a 	srli	r4,r3,16
 4008674:	21803fcc 	andi	r6,r4,255
 4008678:	110002c3 	ldbu	r4,11(r2)
 400867c:	2008703a 	and	r4,r4,zero
 4008680:	200b883a 	mov	r5,r4
 4008684:	3009883a 	mov	r4,r6
 4008688:	2908b03a 	or	r4,r5,r4
 400868c:	110002c5 	stb	r4,11(r2)
 4008690:	180ad63a 	srli	r5,r3,24
 4008694:	10c00303 	ldbu	r3,12(r2)
 4008698:	1806703a 	and	r3,r3,zero
 400869c:	1809883a 	mov	r4,r3
 40086a0:	2807883a 	mov	r3,r5
 40086a4:	20c6b03a 	or	r3,r4,r3
 40086a8:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
 40086ac:	e0bffc17 	ldw	r2,-16(fp)
 40086b0:	00c000c4 	movi	r3,3
 40086b4:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
 40086b8:	e0bffc17 	ldw	r2,-16(fp)
 40086bc:	10800c83 	ldbu	r2,50(r2)
 40086c0:	10803fcc 	andi	r2,r2,255
 40086c4:	10c00120 	cmpeqi	r3,r2,4
 40086c8:	1800021e 	bne	r3,zero,40086d4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
 40086cc:	10800148 	cmpgei	r2,r2,5
 40086d0:	00000306 	br	40086e0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 40086d4:	e0bffc17 	ldw	r2,-16(fp)
 40086d8:	10000d45 	stb	zero,53(r2)
                                        break;
 40086dc:	00000106 	br	40086e4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
 40086e0:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
 40086e4:	e0bffc17 	ldw	r2,-16(fp)
 40086e8:	10800c43 	ldbu	r2,49(r2)
 40086ec:	10bfff84 	addi	r2,r2,-2
 40086f0:	1007883a 	mov	r3,r2
 40086f4:	e0bffc17 	ldw	r2,-16(fp)
 40086f8:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 40086fc:	e0bffc17 	ldw	r2,-16(fp)
 4008700:	10c00404 	addi	r3,r2,16
 4008704:	e0bffc17 	ldw	r2,-16(fp)
 4008708:	10800204 	addi	r2,r2,8
 400870c:	100b883a 	mov	r5,r2
 4008710:	1809883a 	mov	r4,r3
 4008714:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 4008718:	e0bffc17 	ldw	r2,-16(fp)
 400871c:	00c00104 	movi	r3,4
 4008720:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
 4008724:	e0bffc17 	ldw	r2,-16(fp)
 4008728:	10800c83 	ldbu	r2,50(r2)
 400872c:	10803fcc 	andi	r2,r2,255
 4008730:	10c00120 	cmpeqi	r3,r2,4
 4008734:	1800141e 	bne	r3,zero,4008788 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
 4008738:	10c00160 	cmpeqi	r3,r2,5
 400873c:	18005a1e 	bne	r3,zero,40088a8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
 4008740:	108000a0 	cmpeqi	r2,r2,2
 4008744:	10008526 	beq	r2,zero,400895c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 4008748:	e0bffc17 	ldw	r2,-16(fp)
 400874c:	10800404 	addi	r2,r2,16
 4008750:	e1bffe17 	ldw	r6,-8(fp)
 4008754:	e17ffd17 	ldw	r5,-12(fp)
 4008758:	1009883a 	mov	r4,r2
 400875c:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4008760:	1080005c 	xori	r2,r2,1
 4008764:	10803fcc 	andi	r2,r2,255
 4008768:	10000226 	beq	r2,zero,4008774 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
 400876c:	0005883a 	mov	r2,zero
 4008770:	0000b406 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
 4008774:	e0bffa17 	ldw	r2,-24(fp)
 4008778:	10c00143 	ldbu	r3,5(r2)
 400877c:	e0bffc17 	ldw	r2,-16(fp)
 4008780:	10c00d85 	stb	r3,54(r2)
                                        break;
 4008784:	00008b06 	br	40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 4008788:	e0bffc17 	ldw	r2,-16(fp)
 400878c:	10800404 	addi	r2,r2,16
 4008790:	e1bffe17 	ldw	r6,-8(fp)
 4008794:	e17ffd17 	ldw	r5,-12(fp)
 4008798:	1009883a 	mov	r4,r2
 400879c:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 40087a0:	1080005c 	xori	r2,r2,1
 40087a4:	10803fcc 	andi	r2,r2,255
 40087a8:	10000226 	beq	r2,zero,40087b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
 40087ac:	0005883a 	mov	r2,zero
 40087b0:	0000a406 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
 40087b4:	e0bffb17 	ldw	r2,-20(fp)
 40087b8:	10800083 	ldbu	r2,2(r2)
 40087bc:	10803fcc 	andi	r2,r2,255
 40087c0:	01402004 	movi	r5,128
 40087c4:	1009883a 	mov	r4,r2
 40087c8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
 40087cc:	e0bffb17 	ldw	r2,-20(fp)
 40087d0:	108000c3 	ldbu	r2,3(r2)
 40087d4:	10803fcc 	andi	r2,r2,255
 40087d8:	01402004 	movi	r5,128
 40087dc:	1009883a 	mov	r4,r2
 40087e0:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
 40087e4:	e0bffb17 	ldw	r2,-20(fp)
 40087e8:	10800103 	ldbu	r2,4(r2)
 40087ec:	10803fcc 	andi	r2,r2,255
 40087f0:	01402004 	movi	r5,128
 40087f4:	1009883a 	mov	r4,r2
 40087f8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
 40087fc:	e0bffb17 	ldw	r2,-20(fp)
 4008800:	10800143 	ldbu	r2,5(r2)
 4008804:	10803fcc 	andi	r2,r2,255
 4008808:	01402004 	movi	r5,128
 400880c:	1009883a 	mov	r4,r2
 4008810:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
 4008814:	e0bffb17 	ldw	r2,-20(fp)
 4008818:	10800183 	ldbu	r2,6(r2)
 400881c:	10803fcc 	andi	r2,r2,255
 4008820:	01402004 	movi	r5,128
 4008824:	1009883a 	mov	r4,r2
 4008828:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
 400882c:	e0bffb17 	ldw	r2,-20(fp)
 4008830:	108001c3 	ldbu	r2,7(r2)
 4008834:	10803fcc 	andi	r2,r2,255
 4008838:	01402004 	movi	r5,128
 400883c:	1009883a 	mov	r4,r2
 4008840:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
 4008844:	e0bffc17 	ldw	r2,-16(fp)
 4008848:	10800d03 	ldbu	r2,52(r2)
 400884c:	10803fcc 	andi	r2,r2,255
 4008850:	10000a26 	beq	r2,zero,400887c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
 4008854:	e0bffb17 	ldw	r2,-20(fp)
 4008858:	10800143 	ldbu	r2,5(r2)
 400885c:	10803fcc 	andi	r2,r2,255
 4008860:	10800058 	cmpnei	r2,r2,1
 4008864:	10004e1e 	bne	r2,zero,40089a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
 4008868:	e0bffb17 	ldw	r2,-20(fp)
 400886c:	10800183 	ldbu	r2,6(r2)
 4008870:	10803fcc 	andi	r2,r2,255
 4008874:	108000d8 	cmpnei	r2,r2,3
 4008878:	1000491e 	bne	r2,zero,40089a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
 400887c:	e0bffc17 	ldw	r2,-16(fp)
 4008880:	00c00044 	movi	r3,1
 4008884:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
 4008888:	e0bffc17 	ldw	r2,-16(fp)
 400888c:	10800cc3 	ldbu	r2,51(r2)
 4008890:	10803fcc 	andi	r2,r2,255
 4008894:	108000a8 	cmpgeui	r2,r2,2
 4008898:	1000431e 	bne	r2,zero,40089a8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
 400889c:	e0bffc17 	ldw	r2,-16(fp)
 40088a0:	10000cc5 	stb	zero,51(r2)
                                        break;
 40088a4:	00004006 	br	40089a8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 40088a8:	e0bffc17 	ldw	r2,-16(fp)
 40088ac:	10800404 	addi	r2,r2,16
 40088b0:	e1bffe17 	ldw	r6,-8(fp)
 40088b4:	e17ffd17 	ldw	r5,-12(fp)
 40088b8:	1009883a 	mov	r4,r2
 40088bc:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 40088c0:	1080005c 	xori	r2,r2,1
 40088c4:	10803fcc 	andi	r2,r2,255
 40088c8:	10000226 	beq	r2,zero,40088d4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
 40088cc:	0005883a 	mov	r2,zero
 40088d0:	00005c06 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
 40088d4:	e0bffc17 	ldw	r2,-16(fp)
 40088d8:	10800d43 	ldbu	r2,53(r2)
 40088dc:	10803fcc 	andi	r2,r2,255
 40088e0:	10003326 	beq	r2,zero,40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
 40088e4:	e0bffc17 	ldw	r2,-16(fp)
 40088e8:	10800cc3 	ldbu	r2,51(r2)
 40088ec:	10803fcc 	andi	r2,r2,255
 40088f0:	108000a8 	cmpgeui	r2,r2,2
 40088f4:	10002e1e 	bne	r2,zero,40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) ) 
 40088f8:	e0bffc17 	ldw	r2,-16(fp)
 40088fc:	10800117 	ldw	r2,4(r2)
 4008900:	10800017 	ldw	r2,0(r2)
 4008904:	10800017 	ldw	r2,0(r2)
 4008908:	e0fffc17 	ldw	r3,-16(fp)
 400890c:	19000117 	ldw	r4,4(r3)
 4008910:	e0fffc17 	ldw	r3,-16(fp)
 4008914:	18c00d83 	ldbu	r3,54(r3)
 4008918:	19403fcc 	andi	r5,r3,255
 400891c:	e0fffc17 	ldw	r3,-16(fp)
 4008920:	18c00804 	addi	r3,r3,32
 4008924:	d8c00115 	stw	r3,4(sp)
 4008928:	d8000015 	stw	zero,0(sp)
 400892c:	000f883a 	mov	r7,zero
 4008930:	000d883a 	mov	r6,zero
 4008934:	103ee83a 	callr	r2
 4008938:	10803fcc 	andi	r2,r2,255
 400893c:	10001c26 	beq	r2,zero,40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
 4008940:	e0bffc17 	ldw	r2,-16(fp)
 4008944:	10800cc3 	ldbu	r2,51(r2)
 4008948:	10800044 	addi	r2,r2,1
 400894c:	1007883a 	mov	r3,r2
 4008950:	e0bffc17 	ldw	r2,-16(fp)
 4008954:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
 4008958:	00001506 	br	40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 400895c:	e0bffc17 	ldw	r2,-16(fp)
 4008960:	10c00604 	addi	r3,r2,24
 4008964:	e0bffc17 	ldw	r2,-16(fp)
 4008968:	10800c43 	ldbu	r2,49(r2)
 400896c:	10803fcc 	andi	r2,r2,255
 4008970:	10bfff84 	addi	r2,r2,-2
 4008974:	10bfffcc 	andi	r2,r2,65535
 4008978:	100f883a 	mov	r7,r2
 400897c:	e1bffe17 	ldw	r6,-8(fp)
 4008980:	e17ffd17 	ldw	r5,-12(fp)
 4008984:	1809883a 	mov	r4,r3
 4008988:	40050f00 	call	40050f0 <_ZN11ByteSkipper4SkipEPPhPtt>
 400898c:	1080005c 	xori	r2,r2,1
 4008990:	10803fcc 	andi	r2,r2,255
 4008994:	10000726 	beq	r2,zero,40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
 4008998:	0005883a 	mov	r2,zero
 400899c:	00002906 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
 40089a0:	0001883a 	nop
 40089a4:	00000306 	br	40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
 40089a8:	0001883a 	nop
 40089ac:	00000106 	br	40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) ) 
                                                        nEPs++;
                                        }
                                        break;
 40089b0:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
 40089b4:	e0bffc17 	ldw	r2,-16(fp)
 40089b8:	10c00804 	addi	r3,r2,32
 40089bc:	e0bffc17 	ldw	r2,-16(fp)
 40089c0:	19803fcc 	andi	r6,r3,255
 40089c4:	11000243 	ldbu	r4,9(r2)
 40089c8:	2008703a 	and	r4,r4,zero
 40089cc:	200b883a 	mov	r5,r4
 40089d0:	3009883a 	mov	r4,r6
 40089d4:	2908b03a 	or	r4,r5,r4
 40089d8:	11000245 	stb	r4,9(r2)
 40089dc:	1808d23a 	srli	r4,r3,8
 40089e0:	21803fcc 	andi	r6,r4,255
 40089e4:	11000283 	ldbu	r4,10(r2)
 40089e8:	2008703a 	and	r4,r4,zero
 40089ec:	200b883a 	mov	r5,r4
 40089f0:	3009883a 	mov	r4,r6
 40089f4:	2908b03a 	or	r4,r5,r4
 40089f8:	11000285 	stb	r4,10(r2)
 40089fc:	1808d43a 	srli	r4,r3,16
 4008a00:	21803fcc 	andi	r6,r4,255
 4008a04:	110002c3 	ldbu	r4,11(r2)
 4008a08:	2008703a 	and	r4,r4,zero
 4008a0c:	200b883a 	mov	r5,r4
 4008a10:	3009883a 	mov	r4,r6
 4008a14:	2908b03a 	or	r4,r5,r4
 4008a18:	110002c5 	stb	r4,11(r2)
 4008a1c:	180ad63a 	srli	r5,r3,24
 4008a20:	10c00303 	ldbu	r3,12(r2)
 4008a24:	1806703a 	and	r3,r3,zero
 4008a28:	1809883a 	mov	r4,r3
 4008a2c:	2807883a 	mov	r3,r5
 4008a30:	20c6b03a 	or	r3,r4,r3
 4008a34:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
 4008a38:	e0bffc17 	ldw	r2,-16(fp)
 4008a3c:	10000c05 	stb	zero,48(r2)
        }
        return true;
 4008a40:	00800044 	movi	r2,1
}
 4008a44:	e037883a 	mov	sp,fp
 4008a48:	dfc00117 	ldw	ra,4(sp)
 4008a4c:	df000017 	ldw	fp,0(sp)
 4008a50:	dec00204 	addi	sp,sp,8
 4008a54:	f800283a 	ret

04008a58 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
 4008a58:	defff904 	addi	sp,sp,-28
 4008a5c:	df000615 	stw	fp,24(sp)
 4008a60:	df000604 	addi	fp,sp,24
 4008a64:	e13ffb15 	stw	r4,-20(fp)
 4008a68:	3009883a 	mov	r4,r6
 4008a6c:	3807883a 	mov	r3,r7
 4008a70:	e0800117 	ldw	r2,4(fp)
 4008a74:	e17ffc05 	stb	r5,-16(fp)
 4008a78:	e13ffd05 	stb	r4,-12(fp)
 4008a7c:	e0fffe05 	stb	r3,-8(fp)
 4008a80:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
 4008a84:	e0800217 	ldw	r2,8(fp)
 4008a88:	10c000c3 	ldbu	r3,3(r2)
 4008a8c:	e0bffb17 	ldw	r2,-20(fp)
 4008a90:	10800483 	ldbu	r2,18(r2)
 4008a94:	1884703a 	and	r2,r3,r2
 4008a98:	10803fcc 	andi	r2,r2,255
 4008a9c:	10800098 	cmpnei	r2,r2,2
 4008aa0:	10001f1e 	bne	r2,zero,4008b20 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
 4008aa4:	e0800217 	ldw	r2,8(fp)
 4008aa8:	10800083 	ldbu	r2,2(r2)
 4008aac:	10803fcc 	andi	r2,r2,255
 4008ab0:	1080201c 	xori	r2,r2,128
 4008ab4:	10bfe004 	addi	r2,r2,-128
 4008ab8:	1000020e 	bge	r2,zero,4008ac4 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
 4008abc:	00800044 	movi	r2,1
 4008ac0:	00000106 	br	4008ac8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
 4008ac4:	00800084 	movi	r2,2
 4008ac8:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        } 

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 4008acc:	e0fffa03 	ldbu	r3,-24(fp)
 4008ad0:	e0800217 	ldw	r2,8(fp)
 4008ad4:	10800083 	ldbu	r2,2(r2)
 4008ad8:	108003cc 	andi	r2,r2,15
 4008adc:	100b883a 	mov	r5,r2
 4008ae0:	e13ffb17 	ldw	r4,-20(fp)
 4008ae4:	1805883a 	mov	r2,r3
 4008ae8:	1085883a 	add	r2,r2,r2
 4008aec:	10c5883a 	add	r2,r2,r3
 4008af0:	2085883a 	add	r2,r4,r2
 4008af4:	108004c4 	addi	r2,r2,19
 4008af8:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
 4008afc:	e0800217 	ldw	r2,8(fp)
 4008b00:	10c00103 	ldbu	r3,4(r2)
 4008b04:	10800143 	ldbu	r2,5(r2)
 4008b08:	1004923a 	slli	r2,r2,8
 4008b0c:	10c4b03a 	or	r2,r2,r3
 4008b10:	10bfffcc 	andi	r2,r2,65535
 4008b14:	10801070 	cmpltui	r2,r2,65
 4008b18:	10000d1e 	bne	r2,zero,4008b50 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
 4008b1c:	00000206 	br	4008b28 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
 4008b20:	0005883a 	mov	r2,zero
 4008b24:	00001906 	br	4008b8c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
 4008b28:	e0fffa03 	ldbu	r3,-24(fp)
 4008b2c:	e13ffb17 	ldw	r4,-20(fp)
 4008b30:	1805883a 	mov	r2,r3
 4008b34:	1085883a 	add	r2,r2,r2
 4008b38:	10c5883a 	add	r2,r2,r3
 4008b3c:	2085883a 	add	r2,r4,r2
 4008b40:	10800504 	addi	r2,r2,20
 4008b44:	00c01004 	movi	r3,64
 4008b48:	10c00005 	stb	r3,0(r2)
 4008b4c:	00000e06 	br	4008b88 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 4008b50:	e0fffa03 	ldbu	r3,-24(fp)
 4008b54:	e0800217 	ldw	r2,8(fp)
 4008b58:	11000103 	ldbu	r4,4(r2)
 4008b5c:	10800143 	ldbu	r2,5(r2)
 4008b60:	1004923a 	slli	r2,r2,8
 4008b64:	1104b03a 	or	r2,r2,r4
 4008b68:	100b883a 	mov	r5,r2
 4008b6c:	e13ffb17 	ldw	r4,-20(fp)
 4008b70:	1805883a 	mov	r2,r3
 4008b74:	1085883a 	add	r2,r2,r2
 4008b78:	10c5883a 	add	r2,r2,r3
 4008b7c:	2085883a 	add	r2,r4,r2
 4008b80:	10800504 	addi	r2,r2,20
 4008b84:	11400005 	stb	r5,0(r2)
        }

        return true;
 4008b88:	00800044 	movi	r2,1
}
 4008b8c:	e037883a 	mov	sp,fp
 4008b90:	df000017 	ldw	fp,0(sp)
 4008b94:	dec00104 	addi	sp,sp,4
 4008b98:	f800283a 	ret

04008b9c <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 4008b9c:	213fff04 	addi	r4,r4,-4
 4008ba0:	4008a581 	jmpi	4008a58 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

04008ba4 <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 4008ba4:	defffa04 	addi	sp,sp,-24
 4008ba8:	df000515 	stw	fp,20(sp)
 4008bac:	df000504 	addi	fp,sp,20
 4008bb0:	e13ffb15 	stw	r4,-20(fp)
 4008bb4:	3009883a 	mov	r4,r6
 4008bb8:	3807883a 	mov	r3,r7
 4008bbc:	e0800117 	ldw	r2,4(fp)
 4008bc0:	e17ffc05 	stb	r5,-16(fp)
 4008bc4:	e13ffd05 	stb	r4,-12(fp)
 4008bc8:	e0fffe05 	stb	r3,-8(fp)
 4008bcc:	e0bfff05 	stb	r2,-4(fp)
                return true;
 4008bd0:	00800044 	movi	r2,1
        };
 4008bd4:	e037883a 	mov	sp,fp
 4008bd8:	df000017 	ldw	fp,0(sp)
 4008bdc:	dec00104 	addi	sp,sp,4
 4008be0:	f800283a 	ret

04008be4 <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
 4008be4:	defffe04 	addi	sp,sp,-8
 4008be8:	df000115 	stw	fp,4(sp)
 4008bec:	df000104 	addi	fp,sp,4
 4008bf0:	e13fff15 	stw	r4,-4(fp)
 4008bf4:	e0bfff17 	ldw	r2,-4(fp)
 4008bf8:	10800d83 	ldbu	r2,54(r2)
 4008bfc:	e037883a 	mov	sp,fp
 4008c00:	df000017 	ldw	fp,0(sp)
 4008c04:	dec00104 	addi	sp,sp,4
 4008c08:	f800283a 	ret

04008c0c <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
 4008c0c:	defffe04 	addi	sp,sp,-8
 4008c10:	df000115 	stw	fp,4(sp)
 4008c14:	df000104 	addi	fp,sp,4
 4008c18:	e13fff15 	stw	r4,-4(fp)
 4008c1c:	e0bfff17 	ldw	r2,-4(fp)
 4008c20:	10800cc3 	ldbu	r2,51(r2)
 4008c24:	e037883a 	mov	sp,fp
 4008c28:	df000017 	ldw	fp,0(sp)
 4008c2c:	dec00104 	addi	sp,sp,4
 4008c30:	f800283a 	ret

04008c34 <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
 4008c34:	defffd04 	addi	sp,sp,-12
 4008c38:	df000215 	stw	fp,8(sp)
 4008c3c:	df000204 	addi	fp,sp,8
 4008c40:	e13ffe15 	stw	r4,-8(fp)
 4008c44:	2805883a 	mov	r2,r5
 4008c48:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
 4008c4c:	e0bfff03 	ldbu	r2,-4(fp)
 4008c50:	10803c28 	cmpgeui	r2,r2,240
 4008c54:	1000031e 	bne	r2,zero,4008c64 <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
 4008c58:	e0bfff03 	ldbu	r2,-4(fp)
 4008c5c:	1004d13a 	srli	r2,r2,4
 4008c60:	00000606 	br	4008c7c <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
 4008c64:	e0bfff03 	ldbu	r2,-4(fp)
 4008c68:	10c003cc 	andi	r3,r2,15
 4008c6c:	008100b4 	movhi	r2,1026
 4008c70:	10893584 	addi	r2,r2,9430
 4008c74:	1885883a 	add	r2,r3,r2
 4008c78:	10800003 	ldbu	r2,0(r2)
        };
 4008c7c:	e037883a 	mov	sp,fp
 4008c80:	df000017 	ldw	fp,0(sp)
 4008c84:	dec00104 	addi	sp,sp,4
 4008c88:	f800283a 	ret

04008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
 4008c8c:	defffd04 	addi	sp,sp,-12
 4008c90:	df000215 	stw	fp,8(sp)
 4008c94:	df000204 	addi	fp,sp,8
 4008c98:	e13ffe15 	stw	r4,-8(fp)
 4008c9c:	2805883a 	mov	r2,r5
 4008ca0:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
 4008ca4:	e0ffff03 	ldbu	r3,-4(fp)
 4008ca8:	008100b4 	movhi	r2,1026
 4008cac:	10893184 	addi	r2,r2,9414
 4008cb0:	1885883a 	add	r2,r3,r2
 4008cb4:	10800003 	ldbu	r2,0(r2)
        };
 4008cb8:	e037883a 	mov	sp,fp
 4008cbc:	df000017 	ldw	fp,0(sp)
 4008cc0:	dec00104 	addi	sp,sp,4
 4008cc4:	f800283a 	ret

04008cc8 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
 4008cc8:	defffe04 	addi	sp,sp,-8
 4008ccc:	df000115 	stw	fp,4(sp)
 4008cd0:	df000104 	addi	fp,sp,4
 4008cd4:	e13fff15 	stw	r4,-4(fp)
 4008cd8:	e0bfff17 	ldw	r2,-4(fp)
 4008cdc:	10800303 	ldbu	r2,12(r2)
 4008ce0:	e037883a 	mov	sp,fp
 4008ce4:	df000017 	ldw	fp,0(sp)
 4008ce8:	dec00104 	addi	sp,sp,4
 4008cec:	f800283a 	ret

04008cf0 <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
 4008cf0:	defffe04 	addi	sp,sp,-8
 4008cf4:	df000115 	stw	fp,4(sp)
 4008cf8:	df000104 	addi	fp,sp,4
 4008cfc:	e13fff15 	stw	r4,-4(fp)
 4008d00:	008100b4 	movhi	r2,1026
 4008d04:	10894e04 	addi	r2,r2,9528
 4008d08:	e0ffff17 	ldw	r3,-4(fp)
 4008d0c:	18800015 	stw	r2,0(r3)
 4008d10:	0001883a 	nop
 4008d14:	e037883a 	mov	sp,fp
 4008d18:	df000017 	ldw	fp,0(sp)
 4008d1c:	dec00104 	addi	sp,sp,4
 4008d20:	f800283a 	ret

04008d24 <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 4008d24:	defffd04 	addi	sp,sp,-12
 4008d28:	df000215 	stw	fp,8(sp)
 4008d2c:	df000204 	addi	fp,sp,8
 4008d30:	2005883a 	mov	r2,r4
 4008d34:	e17fff15 	stw	r5,-4(fp)
 4008d38:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 4008d3c:	0001883a 	nop
 4008d40:	e037883a 	mov	sp,fp
 4008d44:	df000017 	ldw	fp,0(sp)
 4008d48:	dec00104 	addi	sp,sp,4
 4008d4c:	f800283a 	ret

04008d50 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
 4008d50:	deffe204 	addi	sp,sp,-120
 4008d54:	dfc01d15 	stw	ra,116(sp)
 4008d58:	df001c15 	stw	fp,112(sp)
 4008d5c:	df001c04 	addi	fp,sp,112
 4008d60:	e13ffd15 	stw	r4,-12(fp)
 4008d64:	2805883a 	mov	r2,r5
 4008d68:	e1bfff15 	stw	r6,-4(fp)
 4008d6c:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
 4008d70:	00801004 	movi	r2,64
 4008d74:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
 4008d78:	e0bffd17 	ldw	r2,-12(fp)
 4008d7c:	11000217 	ldw	r4,8(r2)
 4008d80:	e0bffd17 	ldw	r2,-12(fp)
 4008d84:	10800303 	ldbu	r2,12(r2)
 4008d88:	11403fcc 	andi	r5,r2,255
 4008d8c:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
 4008d90:	e0ffff17 	ldw	r3,-4(fp)
 4008d94:	d8c00715 	stw	r3,28(sp)
 4008d98:	e0ffec84 	addi	r3,fp,-78
 4008d9c:	d8c00615 	stw	r3,24(sp)
 4008da0:	00c01004 	movi	r3,64
 4008da4:	d8c00515 	stw	r3,20(sp)
 4008da8:	00c02004 	movi	r3,128
 4008dac:	d8c00415 	stw	r3,16(sp)
 4008db0:	d8800315 	stw	r2,12(sp)
 4008db4:	00800884 	movi	r2,34
 4008db8:	d8800215 	stw	r2,8(sp)
 4008dbc:	d8000115 	stw	zero,4(sp)
 4008dc0:	00800184 	movi	r2,6
 4008dc4:	d8800015 	stw	r2,0(sp)
 4008dc8:	01c02044 	movi	r7,129
 4008dcc:	000d883a 	mov	r6,zero
 4008dd0:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 4008dd4:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
 4008dd8:	e0bfec43 	ldbu	r2,-79(fp)
}
 4008ddc:	e037883a 	mov	sp,fp
 4008de0:	dfc00117 	ldw	ra,4(sp)
 4008de4:	df000017 	ldw	fp,0(sp)
 4008de8:	dec00204 	addi	sp,sp,8
 4008dec:	f800283a 	ret

04008df0 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
 4008df0:	defff004 	addi	sp,sp,-64
 4008df4:	dfc00f15 	stw	ra,60(sp)
 4008df8:	df000e15 	stw	fp,56(sp)
 4008dfc:	df000e04 	addi	fp,sp,56
 4008e00:	e13ffa15 	stw	r4,-24(fp)
 4008e04:	2811883a 	mov	r8,r5
 4008e08:	300b883a 	mov	r5,r6
 4008e0c:	3809883a 	mov	r4,r7
 4008e10:	e0c00217 	ldw	r3,8(fp)
 4008e14:	e0800317 	ldw	r2,12(fp)
 4008e18:	e23ffb05 	stb	r8,-20(fp)
 4008e1c:	e17ffc05 	stb	r5,-16(fp)
 4008e20:	e13ffd05 	stb	r4,-12(fp)
 4008e24:	e0fffe05 	stb	r3,-8(fp)
 4008e28:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
 4008e2c:	e0bffa17 	ldw	r2,-24(fp)
 4008e30:	12000217 	ldw	r8,8(r2)
 4008e34:	e0bffa17 	ldw	r2,-24(fp)
 4008e38:	10800303 	ldbu	r2,12(r2)
 4008e3c:	12403fcc 	andi	r9,r2,255
 4008e40:	e2bffb03 	ldbu	r10,-20(fp)
 4008e44:	e0bffe03 	ldbu	r2,-8(fp)
 4008e48:	e0fffd03 	ldbu	r3,-12(fp)
 4008e4c:	e13ffc03 	ldbu	r4,-16(fp)
 4008e50:	e17fff0b 	ldhu	r5,-4(fp)
 4008e54:	e1bfff0b 	ldhu	r6,-4(fp)
 4008e58:	d8000715 	stw	zero,28(sp)
 4008e5c:	e1c00417 	ldw	r7,16(fp)
 4008e60:	d9c00615 	stw	r7,24(sp)
 4008e64:	d9800515 	stw	r6,20(sp)
 4008e68:	d9400415 	stw	r5,16(sp)
 4008e6c:	d9000315 	stw	r4,12(sp)
 4008e70:	d8c00215 	stw	r3,8(sp)
 4008e74:	d8800115 	stw	r2,4(sp)
 4008e78:	00800244 	movi	r2,9
 4008e7c:	d8800015 	stw	r2,0(sp)
 4008e80:	01c00844 	movi	r7,33
 4008e84:	500d883a 	mov	r6,r10
 4008e88:	480b883a 	mov	r5,r9
 4008e8c:	4009883a 	mov	r4,r8
 4008e90:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4008e94:	e037883a 	mov	sp,fp
 4008e98:	dfc00117 	ldw	ra,4(sp)
 4008e9c:	df000017 	ldw	fp,0(sp)
 4008ea0:	dec00204 	addi	sp,sp,8
 4008ea4:	f800283a 	ret

04008ea8 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
 4008ea8:	defff004 	addi	sp,sp,-64
 4008eac:	dfc00f15 	stw	ra,60(sp)
 4008eb0:	df000e15 	stw	fp,56(sp)
 4008eb4:	df000e04 	addi	fp,sp,56
 4008eb8:	e13ffa15 	stw	r4,-24(fp)
 4008ebc:	2811883a 	mov	r8,r5
 4008ec0:	300b883a 	mov	r5,r6
 4008ec4:	3809883a 	mov	r4,r7
 4008ec8:	e0c00217 	ldw	r3,8(fp)
 4008ecc:	e0800317 	ldw	r2,12(fp)
 4008ed0:	e23ffb05 	stb	r8,-20(fp)
 4008ed4:	e17ffc05 	stb	r5,-16(fp)
 4008ed8:	e13ffd05 	stb	r4,-12(fp)
 4008edc:	e0fffe05 	stb	r3,-8(fp)
 4008ee0:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
 4008ee4:	e0bffa17 	ldw	r2,-24(fp)
 4008ee8:	12000217 	ldw	r8,8(r2)
 4008eec:	e0bffa17 	ldw	r2,-24(fp)
 4008ef0:	10800303 	ldbu	r2,12(r2)
 4008ef4:	12403fcc 	andi	r9,r2,255
 4008ef8:	e2bffb03 	ldbu	r10,-20(fp)
 4008efc:	e0bffe03 	ldbu	r2,-8(fp)
 4008f00:	e0fffd03 	ldbu	r3,-12(fp)
 4008f04:	e13ffc03 	ldbu	r4,-16(fp)
 4008f08:	e17fff0b 	ldhu	r5,-4(fp)
 4008f0c:	e1bfff0b 	ldhu	r6,-4(fp)
 4008f10:	d8000715 	stw	zero,28(sp)
 4008f14:	e1c00417 	ldw	r7,16(fp)
 4008f18:	d9c00615 	stw	r7,24(sp)
 4008f1c:	d9800515 	stw	r6,20(sp)
 4008f20:	d9400415 	stw	r5,16(sp)
 4008f24:	d9000315 	stw	r4,12(sp)
 4008f28:	d8c00215 	stw	r3,8(sp)
 4008f2c:	d8800115 	stw	r2,4(sp)
 4008f30:	00800044 	movi	r2,1
 4008f34:	d8800015 	stw	r2,0(sp)
 4008f38:	01c02844 	movi	r7,161
 4008f3c:	500d883a 	mov	r6,r10
 4008f40:	480b883a 	mov	r5,r9
 4008f44:	4009883a 	mov	r4,r8
 4008f48:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4008f4c:	e037883a 	mov	sp,fp
 4008f50:	dfc00117 	ldw	ra,4(sp)
 4008f54:	df000017 	ldw	fp,0(sp)
 4008f58:	dec00204 	addi	sp,sp,8
 4008f5c:	f800283a 	ret

04008f60 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
 4008f60:	defff204 	addi	sp,sp,-56
 4008f64:	dfc00d15 	stw	ra,52(sp)
 4008f68:	df000c15 	stw	fp,48(sp)
 4008f6c:	df000c04 	addi	fp,sp,48
 4008f70:	e13ffc15 	stw	r4,-16(fp)
 4008f74:	2807883a 	mov	r3,r5
 4008f78:	3005883a 	mov	r2,r6
 4008f7c:	e1ffff15 	stw	r7,-4(fp)
 4008f80:	e0fffd05 	stb	r3,-12(fp)
 4008f84:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
 4008f88:	e0bffc17 	ldw	r2,-16(fp)
 4008f8c:	12000217 	ldw	r8,8(r2)
 4008f90:	e0bffc17 	ldw	r2,-16(fp)
 4008f94:	10800303 	ldbu	r2,12(r2)
 4008f98:	11403fcc 	andi	r5,r2,255
 4008f9c:	e0bffe03 	ldbu	r2,-8(fp)
 4008fa0:	e0fffd03 	ldbu	r3,-12(fp)
 4008fa4:	d8000715 	stw	zero,28(sp)
 4008fa8:	e13fff17 	ldw	r4,-4(fp)
 4008fac:	d9000615 	stw	r4,24(sp)
 4008fb0:	01000044 	movi	r4,1
 4008fb4:	d9000515 	stw	r4,20(sp)
 4008fb8:	01000044 	movi	r4,1
 4008fbc:	d9000415 	stw	r4,16(sp)
 4008fc0:	d8c00315 	stw	r3,12(sp)
 4008fc4:	d8000215 	stw	zero,8(sp)
 4008fc8:	d8800115 	stw	r2,4(sp)
 4008fcc:	00800084 	movi	r2,2
 4008fd0:	d8800015 	stw	r2,0(sp)
 4008fd4:	01c02844 	movi	r7,161
 4008fd8:	000d883a 	mov	r6,zero
 4008fdc:	4009883a 	mov	r4,r8
 4008fe0:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4008fe4:	e037883a 	mov	sp,fp
 4008fe8:	dfc00117 	ldw	ra,4(sp)
 4008fec:	df000017 	ldw	fp,0(sp)
 4008ff0:	dec00204 	addi	sp,sp,8
 4008ff4:	f800283a 	ret

04008ff8 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
 4008ff8:	defff204 	addi	sp,sp,-56
 4008ffc:	dfc00d15 	stw	ra,52(sp)
 4009000:	df000c15 	stw	fp,48(sp)
 4009004:	df000c04 	addi	fp,sp,48
 4009008:	e13ffc15 	stw	r4,-16(fp)
 400900c:	2809883a 	mov	r4,r5
 4009010:	3007883a 	mov	r3,r6
 4009014:	3805883a 	mov	r2,r7
 4009018:	e13ffd05 	stb	r4,-12(fp)
 400901c:	e0fffe05 	stb	r3,-8(fp)
 4009020:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
 4009024:	e0bffc17 	ldw	r2,-16(fp)
 4009028:	12000217 	ldw	r8,8(r2)
 400902c:	e0bffc17 	ldw	r2,-16(fp)
 4009030:	10800303 	ldbu	r2,12(r2)
 4009034:	11403fcc 	andi	r5,r2,255
 4009038:	e0bffe03 	ldbu	r2,-8(fp)
 400903c:	e0ffff03 	ldbu	r3,-4(fp)
 4009040:	e13ffd03 	ldbu	r4,-12(fp)
 4009044:	d8000715 	stw	zero,28(sp)
 4009048:	d8000615 	stw	zero,24(sp)
 400904c:	d8000515 	stw	zero,20(sp)
 4009050:	d8000415 	stw	zero,16(sp)
 4009054:	d9000315 	stw	r4,12(sp)
 4009058:	d8c00215 	stw	r3,8(sp)
 400905c:	d8800115 	stw	r2,4(sp)
 4009060:	00800284 	movi	r2,10
 4009064:	d8800015 	stw	r2,0(sp)
 4009068:	01c00844 	movi	r7,33
 400906c:	000d883a 	mov	r6,zero
 4009070:	4009883a 	mov	r4,r8
 4009074:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4009078:	e037883a 	mov	sp,fp
 400907c:	dfc00117 	ldw	ra,4(sp)
 4009080:	df000017 	ldw	fp,0(sp)
 4009084:	dec00204 	addi	sp,sp,8
 4009088:	f800283a 	ret

0400908c <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
 400908c:	defff304 	addi	sp,sp,-52
 4009090:	dfc00c15 	stw	ra,48(sp)
 4009094:	df000b15 	stw	fp,44(sp)
 4009098:	df000b04 	addi	fp,sp,44
 400909c:	e13ffd15 	stw	r4,-12(fp)
 40090a0:	2807883a 	mov	r3,r5
 40090a4:	3005883a 	mov	r2,r6
 40090a8:	e0fffe05 	stb	r3,-8(fp)
 40090ac:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
 40090b0:	e0bffd17 	ldw	r2,-12(fp)
 40090b4:	11000217 	ldw	r4,8(r2)
 40090b8:	e0bffd17 	ldw	r2,-12(fp)
 40090bc:	10800303 	ldbu	r2,12(r2)
 40090c0:	11403fcc 	andi	r5,r2,255
 40090c4:	e0bfff03 	ldbu	r2,-4(fp)
 40090c8:	e0fffe03 	ldbu	r3,-8(fp)
 40090cc:	d8000715 	stw	zero,28(sp)
 40090d0:	d8000615 	stw	zero,24(sp)
 40090d4:	d8000515 	stw	zero,20(sp)
 40090d8:	d8000415 	stw	zero,16(sp)
 40090dc:	d8c00315 	stw	r3,12(sp)
 40090e0:	d8000215 	stw	zero,8(sp)
 40090e4:	d8800115 	stw	r2,4(sp)
 40090e8:	008002c4 	movi	r2,11
 40090ec:	d8800015 	stw	r2,0(sp)
 40090f0:	01c00844 	movi	r7,33
 40090f4:	000d883a 	mov	r6,zero
 40090f8:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 40090fc:	e037883a 	mov	sp,fp
 4009100:	dfc00117 	ldw	ra,4(sp)
 4009104:	df000017 	ldw	fp,0(sp)
 4009108:	dec00204 	addi	sp,sp,8
 400910c:	f800283a 	ret

04009110 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
 4009110:	defff304 	addi	sp,sp,-52
 4009114:	dfc00c15 	stw	ra,48(sp)
 4009118:	df000b15 	stw	fp,44(sp)
 400911c:	df000b04 	addi	fp,sp,44
 4009120:	e13ffd15 	stw	r4,-12(fp)
 4009124:	2805883a 	mov	r2,r5
 4009128:	e1bfff15 	stw	r6,-4(fp)
 400912c:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
 4009130:	e0bffd17 	ldw	r2,-12(fp)
 4009134:	11000217 	ldw	r4,8(r2)
 4009138:	e0bffd17 	ldw	r2,-12(fp)
 400913c:	10800303 	ldbu	r2,12(r2)
 4009140:	11403fcc 	andi	r5,r2,255
 4009144:	e0bffe03 	ldbu	r2,-8(fp)
 4009148:	d8000715 	stw	zero,28(sp)
 400914c:	e0ffff17 	ldw	r3,-4(fp)
 4009150:	d8c00615 	stw	r3,24(sp)
 4009154:	00c00044 	movi	r3,1
 4009158:	d8c00515 	stw	r3,20(sp)
 400915c:	00c00044 	movi	r3,1
 4009160:	d8c00415 	stw	r3,16(sp)
 4009164:	d8800315 	stw	r2,12(sp)
 4009168:	d8000215 	stw	zero,8(sp)
 400916c:	d8000115 	stw	zero,4(sp)
 4009170:	008000c4 	movi	r2,3
 4009174:	d8800015 	stw	r2,0(sp)
 4009178:	01c02844 	movi	r7,161
 400917c:	000d883a 	mov	r6,zero
 4009180:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4009184:	e037883a 	mov	sp,fp
 4009188:	dfc00117 	ldw	ra,4(sp)
 400918c:	df000017 	ldw	fp,0(sp)
 4009190:	dec00204 	addi	sp,sp,8
 4009194:	f800283a 	ret

04009198 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
 4009198:	defffc04 	addi	sp,sp,-16
 400919c:	dfc00315 	stw	ra,12(sp)
 40091a0:	df000215 	stw	fp,8(sp)
 40091a4:	df000204 	addi	fp,sp,8
 40091a8:	e13ffe15 	stw	r4,-8(fp)
 40091ac:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
 40091b0:	e0bfff17 	ldw	r2,-4(fp)
 40091b4:	10800003 	ldbu	r2,0(r2)
 40091b8:	10803fcc 	andi	r2,r2,255
 40091bc:	01402004 	movi	r5,128
 40091c0:	1009883a 	mov	r4,r2
 40091c4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
 40091c8:	e0bfff17 	ldw	r2,-4(fp)
 40091cc:	10800043 	ldbu	r2,1(r2)
 40091d0:	10803fcc 	andi	r2,r2,255
 40091d4:	01402004 	movi	r5,128
 40091d8:	1009883a 	mov	r4,r2
 40091dc:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
 40091e0:	e0bfff17 	ldw	r2,-4(fp)
 40091e4:	10800083 	ldbu	r2,2(r2)
 40091e8:	10803fcc 	andi	r2,r2,255
 40091ec:	01402004 	movi	r5,128
 40091f0:	1009883a 	mov	r4,r2
 40091f4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
 40091f8:	e0bfff17 	ldw	r2,-4(fp)
 40091fc:	108000c3 	ldbu	r2,3(r2)
 4009200:	10803fcc 	andi	r2,r2,255
 4009204:	01402004 	movi	r5,128
 4009208:	1009883a 	mov	r4,r2
 400920c:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
 4009210:	e0bfff17 	ldw	r2,-4(fp)
 4009214:	10c00103 	ldbu	r3,4(r2)
 4009218:	10800143 	ldbu	r2,5(r2)
 400921c:	1004923a 	slli	r2,r2,8
 4009220:	10c4b03a 	or	r2,r2,r3
 4009224:	10bfffcc 	andi	r2,r2,65535
 4009228:	01402004 	movi	r5,128
 400922c:	1009883a 	mov	r4,r2
 4009230:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
 4009234:	e0bfff17 	ldw	r2,-4(fp)
 4009238:	10800183 	ldbu	r2,6(r2)
 400923c:	10803fcc 	andi	r2,r2,255
 4009240:	01402004 	movi	r5,128
 4009244:	1009883a 	mov	r4,r2
 4009248:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
}
 400924c:	0001883a 	nop
 4009250:	e037883a 	mov	sp,fp
 4009254:	dfc00117 	ldw	ra,4(sp)
 4009258:	df000017 	ldw	fp,0(sp)
 400925c:	dec00204 	addi	sp,sp,8
 4009260:	f800283a 	ret

04009264 <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
 4009264:	defffc04 	addi	sp,sp,-16
 4009268:	dfc00315 	stw	ra,12(sp)
 400926c:	df000215 	stw	fp,8(sp)
 4009270:	df000204 	addi	fp,sp,8
 4009274:	e13ffe15 	stw	r4,-8(fp)
 4009278:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
 400927c:	e0bfff17 	ldw	r2,-4(fp)
 4009280:	10800003 	ldbu	r2,0(r2)
 4009284:	10803fcc 	andi	r2,r2,255
 4009288:	01402004 	movi	r5,128
 400928c:	1009883a 	mov	r4,r2
 4009290:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
 4009294:	e0bfff17 	ldw	r2,-4(fp)
 4009298:	10800043 	ldbu	r2,1(r2)
 400929c:	10803fcc 	andi	r2,r2,255
 40092a0:	01402004 	movi	r5,128
 40092a4:	1009883a 	mov	r4,r2
 40092a8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
 40092ac:	e0bfff17 	ldw	r2,-4(fp)
 40092b0:	10c00083 	ldbu	r3,2(r2)
 40092b4:	108000c3 	ldbu	r2,3(r2)
 40092b8:	1004923a 	slli	r2,r2,8
 40092bc:	10c4b03a 	or	r2,r2,r3
 40092c0:	10bfffcc 	andi	r2,r2,65535
 40092c4:	01402004 	movi	r5,128
 40092c8:	1009883a 	mov	r4,r2
 40092cc:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
 40092d0:	e0bfff17 	ldw	r2,-4(fp)
 40092d4:	10800103 	ldbu	r2,4(r2)
 40092d8:	10803fcc 	andi	r2,r2,255
 40092dc:	01402004 	movi	r5,128
 40092e0:	1009883a 	mov	r4,r2
 40092e4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
 40092e8:	e0bfff17 	ldw	r2,-4(fp)
 40092ec:	10800143 	ldbu	r2,5(r2)
 40092f0:	10803fcc 	andi	r2,r2,255
 40092f4:	01402004 	movi	r5,128
 40092f8:	1009883a 	mov	r4,r2
 40092fc:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
 4009300:	e0bfff17 	ldw	r2,-4(fp)
 4009304:	10800183 	ldbu	r2,6(r2)
 4009308:	10803fcc 	andi	r2,r2,255
 400930c:	01402004 	movi	r5,128
 4009310:	1009883a 	mov	r4,r2
 4009314:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
 4009318:	e0bfff17 	ldw	r2,-4(fp)
 400931c:	10c001c3 	ldbu	r3,7(r2)
 4009320:	10800203 	ldbu	r2,8(r2)
 4009324:	1004923a 	slli	r2,r2,8
 4009328:	10c4b03a 	or	r2,r2,r3
 400932c:	10bfffcc 	andi	r2,r2,65535
 4009330:	01402004 	movi	r5,128
 4009334:	1009883a 	mov	r4,r2
 4009338:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
}
 400933c:	0001883a 	nop
 4009340:	e037883a 	mov	sp,fp
 4009344:	dfc00117 	ldw	ra,4(sp)
 4009348:	df000017 	ldw	fp,0(sp)
 400934c:	dec00204 	addi	sp,sp,8
 4009350:	f800283a 	ret

04009354 <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
 4009354:	defffd04 	addi	sp,sp,-12
 4009358:	dfc00215 	stw	ra,8(sp)
 400935c:	df000115 	stw	fp,4(sp)
 4009360:	df000104 	addi	fp,sp,4
 4009364:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
 4009368:	010100b4 	movhi	r4,1026
 400936c:	21119604 	addi	r4,r4,18008
 4009370:	400ed040 	call	400ed04 <puts>
	vbusState = 0;
 4009374:	d0323745 	stb	zero,-14115(gp)
};
 4009378:	0001883a 	nop
 400937c:	e037883a 	mov	sp,fp
 4009380:	dfc00117 	ldw	ra,4(sp)
 4009384:	df000017 	ldw	fp,0(sp)
 4009388:	dec00204 	addi	sp,sp,8
 400938c:	f800283a 	ret

04009390 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
 4009390:	defffe04 	addi	sp,sp,-8
 4009394:	df000115 	stw	fp,4(sp)
 4009398:	df000104 	addi	fp,sp,4
 400939c:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
 40093a0:	d0b23743 	ldbu	r2,-14115(gp)
};
 40093a4:	e037883a 	mov	sp,fp
 40093a8:	df000017 	ldw	fp,0(sp)
 40093ac:	dec00104 	addi	sp,sp,4
 40093b0:	f800283a 	ret

040093b4 <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
 40093b4:	defff704 	addi	sp,sp,-36
 40093b8:	dfc00815 	stw	ra,32(sp)
 40093bc:	df000715 	stw	fp,28(sp)
 40093c0:	df000704 	addi	fp,sp,28
 40093c4:	e13ffd15 	stw	r4,-12(fp)
 40093c8:	2807883a 	mov	r3,r5
 40093cc:	3005883a 	mov	r2,r6
 40093d0:	e0fffe05 	stb	r3,-8(fp)
 40093d4:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
 40093d8:	e03ffc45 	stb	zero,-15(fp)
 40093dc:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
 40093e0:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
 40093e4:	e0bffe03 	ldbu	r2,-8(fp)
 40093e8:	10800084 	addi	r2,r2,2
 40093ec:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
 40093f0:	e0bfff03 	ldbu	r2,-4(fp)
 40093f4:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
 40093f8:	e0fffc44 	addi	r3,fp,-15
 40093fc:	d8000215 	stw	zero,8(sp)
 4009400:	e0bffcc4 	addi	r2,fp,-13
 4009404:	d8800115 	stw	r2,4(sp)
 4009408:	d8000015 	stw	zero,0(sp)
 400940c:	180f883a 	mov	r7,r3
 4009410:	01800084 	movi	r6,2
 4009414:	000b883a 	mov	r5,zero
 4009418:	01020034 	movhi	r4,2048
 400941c:	21043804 	addi	r4,r4,4320
 4009420:	401e6680 	call	401e668 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
 4009424:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
 4009428:	0001883a 	nop
 400942c:	e037883a 	mov	sp,fp
 4009430:	dfc00117 	ldw	ra,4(sp)
 4009434:	df000017 	ldw	fp,0(sp)
 4009438:	dec00204 	addi	sp,sp,8
 400943c:	f800283a 	ret

04009440 <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
 4009440:	defff304 	addi	sp,sp,-52
 4009444:	dfc00c15 	stw	ra,48(sp)
 4009448:	df000b15 	stw	fp,44(sp)
 400944c:	dc000a15 	stw	r16,40(sp)
 4009450:	df000b04 	addi	fp,sp,44
 4009454:	e13ffb15 	stw	r4,-20(fp)
 4009458:	3009883a 	mov	r4,r6
 400945c:	e1fffe15 	stw	r7,-8(fp)
 4009460:	e17ffc05 	stb	r5,-16(fp)
 4009464:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
 4009468:	d809883a 	mov	r4,sp
 400946c:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
 4009470:	e13ffd03 	ldbu	r4,-12(fp)
 4009474:	e13ff815 	stw	r4,-32(fp)
 4009478:	200b883a 	mov	r5,r4
 400947c:	29400044 	addi	r5,r5,1
 4009480:	2819883a 	mov	r12,r5
 4009484:	001b883a 	mov	r13,zero
 4009488:	600ad77a 	srli	r5,r12,29
 400948c:	681290fa 	slli	r9,r13,3
 4009490:	2a52b03a 	or	r9,r5,r9
 4009494:	601090fa 	slli	r8,r12,3
 4009498:	200b883a 	mov	r5,r4
 400949c:	29400044 	addi	r5,r5,1
 40094a0:	2815883a 	mov	r10,r5
 40094a4:	0017883a 	mov	r11,zero
 40094a8:	500ad77a 	srli	r5,r10,29
 40094ac:	580690fa 	slli	r3,r11,3
 40094b0:	28c6b03a 	or	r3,r5,r3
 40094b4:	500490fa 	slli	r2,r10,3
 40094b8:	2005883a 	mov	r2,r4
 40094bc:	10800044 	addi	r2,r2,1
 40094c0:	108000c4 	addi	r2,r2,3
 40094c4:	1004d0ba 	srli	r2,r2,2
 40094c8:	1085883a 	add	r2,r2,r2
 40094cc:	1085883a 	add	r2,r2,r2
 40094d0:	d8b7c83a 	sub	sp,sp,r2
 40094d4:	d8800304 	addi	r2,sp,12
 40094d8:	1005883a 	mov	r2,r2
 40094dc:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
 40094e0:	e0bffc03 	ldbu	r2,-16(fp)
 40094e4:	10800084 	addi	r2,r2,2
 40094e8:	1007883a 	mov	r3,r2
 40094ec:	e0bff917 	ldw	r2,-28(fp)
 40094f0:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
 40094f4:	e0bff917 	ldw	r2,-28(fp)
 40094f8:	10800044 	addi	r2,r2,1
 40094fc:	e0fffd03 	ldbu	r3,-12(fp)
 4009500:	180d883a 	mov	r6,r3
 4009504:	e17ffe17 	ldw	r5,-8(fp)
 4009508:	1009883a 	mov	r4,r2
 400950c:	400e9480 	call	400e948 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
 4009510:	e0bffd03 	ldbu	r2,-12(fp)
 4009514:	10800044 	addi	r2,r2,1
 4009518:	1009883a 	mov	r4,r2
 400951c:	e0fff917 	ldw	r3,-28(fp)
 4009520:	d8000215 	stw	zero,8(sp)
 4009524:	e0bffa44 	addi	r2,fp,-23
 4009528:	d8800115 	stw	r2,4(sp)
 400952c:	d8000015 	stw	zero,0(sp)
 4009530:	180f883a 	mov	r7,r3
 4009534:	200d883a 	mov	r6,r4
 4009538:	000b883a 	mov	r5,zero
 400953c:	01020034 	movhi	r4,2048
 4009540:	21043804 	addi	r4,r4,4320
 4009544:	401e6680 	call	401e668 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
 4009548:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
 400954c:	e0bffd03 	ldbu	r2,-12(fp)
 4009550:	e0fffe17 	ldw	r3,-8(fp)
 4009554:	1885883a 	add	r2,r3,r2
 4009558:	8037883a 	mov	sp,r16
}
 400955c:	e6ffff04 	addi	sp,fp,-4
 4009560:	dfc00217 	ldw	ra,8(sp)
 4009564:	df000117 	ldw	fp,4(sp)
 4009568:	dc000017 	ldw	r16,0(sp)
 400956c:	dec00304 	addi	sp,sp,12
 4009570:	f800283a 	ret

04009574 <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
 4009574:	defffc04 	addi	sp,sp,-16
 4009578:	dfc00315 	stw	ra,12(sp)
 400957c:	df000215 	stw	fp,8(sp)
 4009580:	df000204 	addi	fp,sp,8
 4009584:	e13ffe15 	stw	r4,-8(fp)
 4009588:	2805883a 	mov	r2,r5
 400958c:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
 4009590:	010100b4 	movhi	r4,1026
 4009594:	21119c04 	addi	r4,r4,18032
 4009598:	400ed040 	call	400ed04 <puts>
	regWr(rIOPINS1, data);
 400959c:	e0bfff03 	ldbu	r2,-4(fp)
 40095a0:	100d883a 	mov	r6,r2
 40095a4:	01402804 	movi	r5,160
 40095a8:	e13ffe17 	ldw	r4,-8(fp)
 40095ac:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
 40095b0:	e0bfff03 	ldbu	r2,-4(fp)
 40095b4:	1005d13a 	srai	r2,r2,4
 40095b8:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
 40095bc:	e0bfff03 	ldbu	r2,-4(fp)
 40095c0:	100d883a 	mov	r6,r2
 40095c4:	01402a04 	movi	r5,168
 40095c8:	e13ffe17 	ldw	r4,-8(fp)
 40095cc:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	return;
 40095d0:	0001883a 	nop
}
 40095d4:	e037883a 	mov	sp,fp
 40095d8:	dfc00117 	ldw	ra,4(sp)
 40095dc:	df000017 	ldw	fp,0(sp)
 40095e0:	dec00204 	addi	sp,sp,8
 40095e4:	f800283a 	ret

040095e8 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
 40095e8:	defff804 	addi	sp,sp,-32
 40095ec:	dfc00715 	stw	ra,28(sp)
 40095f0:	df000615 	stw	fp,24(sp)
 40095f4:	df000604 	addi	fp,sp,24
 40095f8:	e13ffe15 	stw	r4,-8(fp)
 40095fc:	2805883a 	mov	r2,r5
 4009600:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
 4009604:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
 4009608:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
 400960c:	e0bfff03 	ldbu	r2,-4(fp)
 4009610:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
 4009614:	e0fffd44 	addi	r3,fp,-11
 4009618:	d8000215 	stw	zero,8(sp)
 400961c:	e0bffd84 	addi	r2,fp,-10
 4009620:	d8800115 	stw	r2,4(sp)
 4009624:	00800044 	movi	r2,1
 4009628:	d8800015 	stw	r2,0(sp)
 400962c:	180f883a 	mov	r7,r3
 4009630:	01800044 	movi	r6,1
 4009634:	000b883a 	mov	r5,zero
 4009638:	01020034 	movhi	r4,2048
 400963c:	21043804 	addi	r4,r4,4320
 4009640:	401e6680 	call	401e668 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
 4009644:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
 4009648:	e0bffd83 	ldbu	r2,-10(fp)
}
 400964c:	e037883a 	mov	sp,fp
 4009650:	dfc00117 	ldw	ra,4(sp)
 4009654:	df000017 	ldw	fp,0(sp)
 4009658:	dec00204 	addi	sp,sp,8
 400965c:	f800283a 	ret

04009660 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
 4009660:	defff604 	addi	sp,sp,-40
 4009664:	dfc00915 	stw	ra,36(sp)
 4009668:	df000815 	stw	fp,32(sp)
 400966c:	df000804 	addi	fp,sp,32
 4009670:	e13ffc15 	stw	r4,-16(fp)
 4009674:	2807883a 	mov	r3,r5
 4009678:	3005883a 	mov	r2,r6
 400967c:	e1ffff15 	stw	r7,-4(fp)
 4009680:	e0fffd05 	stb	r3,-12(fp)
 4009684:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
 4009688:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
 400968c:	e0bffd03 	ldbu	r2,-12(fp)
 4009690:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
 4009694:	e0bffe03 	ldbu	r2,-8(fp)
 4009698:	e13ffb44 	addi	r4,fp,-19
 400969c:	d8000215 	stw	zero,8(sp)
 40096a0:	e0ffff17 	ldw	r3,-4(fp)
 40096a4:	d8c00115 	stw	r3,4(sp)
 40096a8:	d8800015 	stw	r2,0(sp)
 40096ac:	200f883a 	mov	r7,r4
 40096b0:	01800044 	movi	r6,1
 40096b4:	000b883a 	mov	r5,zero
 40096b8:	01020034 	movhi	r4,2048
 40096bc:	21043804 	addi	r4,r4,4320
 40096c0:	401e6680 	call	401e668 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
 40096c4:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
 40096c8:	e0bffe03 	ldbu	r2,-8(fp)
 40096cc:	e0ffff17 	ldw	r3,-4(fp)
 40096d0:	1885883a 	add	r2,r3,r2
}
 40096d4:	e037883a 	mov	sp,fp
 40096d8:	dfc00117 	ldw	ra,4(sp)
 40096dc:	df000017 	ldw	fp,0(sp)
 40096e0:	dec00204 	addi	sp,sp,8
 40096e4:	f800283a 	ret

040096e8 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
 40096e8:	defffc04 	addi	sp,sp,-16
 40096ec:	dfc00315 	stw	ra,12(sp)
 40096f0:	df000215 	stw	fp,8(sp)
 40096f4:	df000204 	addi	fp,sp,8
 40096f8:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
 40096fc:	010100b4 	movhi	r4,1026
 4009700:	2111a004 	addi	r4,r4,18048
 4009704:	400ed040 	call	400ed04 <puts>
	uint8_t gpin = 0;
 4009708:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
 400970c:	01402a04 	movi	r5,168
 4009710:	e13fff17 	ldw	r4,-4(fp)
 4009714:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009718:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
 400971c:	e0fffe03 	ldbu	r3,-8(fp)
 4009720:	00bffc04 	movi	r2,-16
 4009724:	1884703a 	and	r2,r3,r2
 4009728:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
 400972c:	01402804 	movi	r5,160
 4009730:	e13fff17 	ldw	r4,-4(fp)
 4009734:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009738:	10803fcc 	andi	r2,r2,255
 400973c:	1005d13a 	srai	r2,r2,4
 4009740:	1007883a 	mov	r3,r2
 4009744:	e0bffe03 	ldbu	r2,-8(fp)
 4009748:	1884b03a 	or	r2,r3,r2
 400974c:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
 4009750:	e0bffe03 	ldbu	r2,-8(fp)
}
 4009754:	e037883a 	mov	sp,fp
 4009758:	dfc00117 	ldw	ra,4(sp)
 400975c:	df000017 	ldw	fp,0(sp)
 4009760:	dec00204 	addi	sp,sp,8
 4009764:	f800283a 	ret

04009768 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
 4009768:	defffc04 	addi	sp,sp,-16
 400976c:	dfc00315 	stw	ra,12(sp)
 4009770:	df000215 	stw	fp,8(sp)
 4009774:	df000204 	addi	fp,sp,8
 4009778:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
 400977c:	010100b4 	movhi	r4,1026
 4009780:	2111a404 	addi	r4,r4,18064
 4009784:	400ed040 	call	400ed04 <puts>
	uint8_t gpout = 0;
 4009788:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
 400978c:	01402804 	movi	r5,160
 4009790:	e13fff17 	ldw	r4,-4(fp)
 4009794:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009798:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
 400979c:	e0bffe03 	ldbu	r2,-8(fp)
 40097a0:	108003cc 	andi	r2,r2,15
 40097a4:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
 40097a8:	01402a04 	movi	r5,168
 40097ac:	e13fff17 	ldw	r4,-4(fp)
 40097b0:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 40097b4:	10803fcc 	andi	r2,r2,255
 40097b8:	1004913a 	slli	r2,r2,4
 40097bc:	1007883a 	mov	r3,r2
 40097c0:	e0bffe03 	ldbu	r2,-8(fp)
 40097c4:	1884b03a 	or	r2,r3,r2
 40097c8:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
 40097cc:	e0bffe03 	ldbu	r2,-8(fp)
}
 40097d0:	e037883a 	mov	sp,fp
 40097d4:	dfc00117 	ldw	ra,4(sp)
 40097d8:	df000017 	ldw	fp,0(sp)
 40097dc:	dec00204 	addi	sp,sp,8
 40097e0:	f800283a 	ret

040097e4 <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
 40097e4:	defffc04 	addi	sp,sp,-16
 40097e8:	dfc00315 	stw	ra,12(sp)
 40097ec:	df000215 	stw	fp,8(sp)
 40097f0:	df000204 	addi	fp,sp,8
 40097f4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
 40097f8:	010100b4 	movhi	r4,1026
 40097fc:	2111aa04 	addi	r4,r4,18088
 4009800:	400ed040 	call	400ed04 <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 4009804:	0007883a 	mov	r3,zero
 4009808:	00820034 	movhi	r2,2048
 400980c:	10849004 	addi	r2,r2,4672
 4009810:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 4009814:	010003f4 	movhi	r4,15
 4009818:	21109004 	addi	r4,r4,16960
 400981c:	401bd9c0 	call	401bd9c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 4009820:	00c00044 	movi	r3,1
 4009824:	00820034 	movhi	r2,2048
 4009828:	10849004 	addi	r2,r2,4672
 400982c:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
 4009830:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
 4009834:	01800804 	movi	r6,32
 4009838:	01401e04 	movi	r5,120
 400983c:	e13fff17 	ldw	r4,-4(fp)
 4009840:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
 4009844:	000d883a 	mov	r6,zero
 4009848:	01401e04 	movi	r5,120
 400984c:	e13fff17 	ldw	r4,-4(fp)
 4009850:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	while(++i) {
 4009854:	e0bffe0b 	ldhu	r2,-8(fp)
 4009858:	10800044 	addi	r2,r2,1
 400985c:	e0bffe0d 	sth	r2,-8(fp)
 4009860:	e0bffe0b 	ldhu	r2,-8(fp)
 4009864:	1004c03a 	cmpne	r2,r2,zero
 4009868:	10803fcc 	andi	r2,r2,255
 400986c:	10000a26 	beq	r2,zero,4009898 <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 4009870:	01401a04 	movi	r5,104
 4009874:	e13fff17 	ldw	r4,-4(fp)
 4009878:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 400987c:	10803fcc 	andi	r2,r2,255
 4009880:	1080004c 	andi	r2,r2,1
 4009884:	1004c03a 	cmpne	r2,r2,zero
 4009888:	10803fcc 	andi	r2,r2,255
 400988c:	1000011e 	bne	r2,zero,4009894 <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
 4009890:	003ff006 	br	4009854 <__alt_mem_onchip_memory2_0+0xfc0085d4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
 4009894:	0001883a 	nop
		}
	}
	return ( i);
 4009898:	e0bffe0b 	ldhu	r2,-8(fp)
}
 400989c:	e037883a 	mov	sp,fp
 40098a0:	dfc00117 	ldw	ra,4(sp)
 40098a4:	df000017 	ldw	fp,0(sp)
 40098a8:	dec00204 	addi	sp,sp,8
 40098ac:	f800283a 	ret

040098b0 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
 40098b0:	defffe04 	addi	sp,sp,-8
 40098b4:	df000115 	stw	fp,4(sp)
 40098b8:	df000104 	addi	fp,sp,4
 40098bc:	2005883a 	mov	r2,r4
 40098c0:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
 40098c4:	00800044 	movi	r2,1
}
 40098c8:	e037883a 	mov	sp,fp
 40098cc:	df000017 	ldw	fp,0(sp)
 40098d0:	dec00104 	addi	sp,sp,4
 40098d4:	f800283a 	ret

040098d8 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
 40098d8:	defffd04 	addi	sp,sp,-12
 40098dc:	dfc00215 	stw	ra,8(sp)
 40098e0:	df000115 	stw	fp,4(sp)
 40098e4:	df000104 	addi	fp,sp,4
 40098e8:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
 40098ec:	010100b4 	movhi	r4,1026
 40098f0:	2111ae04 	addi	r4,r4,18104
 40098f4:	400ed040 	call	400ed04 <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 40098f8:	01800604 	movi	r6,24
 40098fc:	01402204 	movi	r5,136
 4009900:	e13fff17 	ldw	r4,-4(fp)
 4009904:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 4009908:	e13fff17 	ldw	r4,-4(fp)
 400990c:	40097e40 	call	40097e4 <_ZN8MAX3421e5resetEv>
 4009910:	10bfffcc 	andi	r2,r2,65535
 4009914:	1005003a 	cmpeq	r2,r2,zero
 4009918:	10803fcc 	andi	r2,r2,255
 400991c:	10000226 	beq	r2,zero,4009928 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
 4009920:	00bfffc4 	movi	r2,-1
 4009924:	00002006 	br	40099a8 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 4009928:	01803044 	movi	r6,193
 400992c:	01403604 	movi	r5,216
 4009930:	e13fff17 	ldw	r4,-4(fp)
 4009934:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 4009938:	01801804 	movi	r6,96
 400993c:	01403404 	movi	r5,208
 4009940:	e13fff17 	ldw	r4,-4(fp)
 4009944:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 4009948:	01800104 	movi	r6,4
 400994c:	01403a04 	movi	r5,232
 4009950:	e13fff17 	ldw	r4,-4(fp)
 4009954:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 4009958:	01403a04 	movi	r5,232
 400995c:	e13fff17 	ldw	r4,-4(fp)
 4009960:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009964:	10803fcc 	andi	r2,r2,255
 4009968:	1080010c 	andi	r2,r2,4
 400996c:	1005003a 	cmpeq	r2,r2,zero
 4009970:	10803fcc 	andi	r2,r2,255
 4009974:	10000126 	beq	r2,zero,400997c <_ZN8MAX3421e4InitEv+0xa4>
 4009978:	003ff706 	br	4009958 <__alt_mem_onchip_memory2_0+0xfc0086d8>

	busprobe(); //check if anything is connected
 400997c:	e13fff17 	ldw	r4,-4(fp)
 4009980:	4009ad40 	call	4009ad4 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 4009984:	01800804 	movi	r6,32
 4009988:	01403204 	movi	r5,200
 400998c:	e13fff17 	ldw	r4,-4(fp)
 4009990:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
 4009994:	01800044 	movi	r6,1
 4009998:	01402004 	movi	r5,128
 400999c:	e13fff17 	ldw	r4,-4(fp)
 40099a0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
 40099a4:	0005883a 	mov	r2,zero
}
 40099a8:	e037883a 	mov	sp,fp
 40099ac:	dfc00117 	ldw	ra,4(sp)
 40099b0:	df000017 	ldw	fp,0(sp)
 40099b4:	dec00204 	addi	sp,sp,8
 40099b8:	f800283a 	ret

040099bc <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
 40099bc:	defffc04 	addi	sp,sp,-16
 40099c0:	dfc00315 	stw	ra,12(sp)
 40099c4:	df000215 	stw	fp,8(sp)
 40099c8:	df000204 	addi	fp,sp,8
 40099cc:	e13ffe15 	stw	r4,-8(fp)
 40099d0:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
 40099d4:	010100b4 	movhi	r4,1026
 40099d8:	2111b204 	addi	r4,r4,18120
 40099dc:	400ed040 	call	400ed04 <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
 40099e0:	01800644 	movi	r6,25
 40099e4:	01402204 	movi	r5,136
 40099e8:	e13ffe17 	ldw	r4,-8(fp)
 40099ec:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 40099f0:	e13ffe17 	ldw	r4,-8(fp)
 40099f4:	40097e40 	call	40097e4 <_ZN8MAX3421e5resetEv>
 40099f8:	10bfffcc 	andi	r2,r2,65535
 40099fc:	1005003a 	cmpeq	r2,r2,zero
 4009a00:	10803fcc 	andi	r2,r2,255
 4009a04:	10000226 	beq	r2,zero,4009a10 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
 4009a08:	00bfffc4 	movi	r2,-1
 4009a0c:	00002c06 	br	4009ac0 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
 4009a10:	e0bfff17 	ldw	r2,-4(fp)
 4009a14:	1080fa08 	cmpgei	r2,r2,1000
 4009a18:	1000021e 	bne	r2,zero,4009a24 <_ZN8MAX3421e4InitEi+0x68>
 4009a1c:	0080fa04 	movi	r2,1000
 4009a20:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
 4009a24:	e0bfff17 	ldw	r2,-4(fp)
 4009a28:	1009883a 	mov	r4,r2
 4009a2c:	4000dd40 	call	4000dd4 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 4009a30:	01803044 	movi	r6,193
 4009a34:	01403604 	movi	r5,216
 4009a38:	e13ffe17 	ldw	r4,-8(fp)
 4009a3c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 4009a40:	01801804 	movi	r6,96
 4009a44:	01403404 	movi	r5,208
 4009a48:	e13ffe17 	ldw	r4,-8(fp)
 4009a4c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 4009a50:	01800104 	movi	r6,4
 4009a54:	01403a04 	movi	r5,232
 4009a58:	e13ffe17 	ldw	r4,-8(fp)
 4009a5c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 4009a60:	01403a04 	movi	r5,232
 4009a64:	e13ffe17 	ldw	r4,-8(fp)
 4009a68:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009a6c:	10803fcc 	andi	r2,r2,255
 4009a70:	1080010c 	andi	r2,r2,4
 4009a74:	1005003a 	cmpeq	r2,r2,zero
 4009a78:	10803fcc 	andi	r2,r2,255
 4009a7c:	10000126 	beq	r2,zero,4009a84 <_ZN8MAX3421e4InitEi+0xc8>
 4009a80:	003ff706 	br	4009a60 <__alt_mem_onchip_memory2_0+0xfc0087e0>

	busprobe(); //check if anything is connected
 4009a84:	e13ffe17 	ldw	r4,-8(fp)
 4009a88:	4009ad40 	call	4009ad4 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 4009a8c:	01800804 	movi	r6,32
 4009a90:	01403204 	movi	r5,200
 4009a94:	e13ffe17 	ldw	r4,-8(fp)
 4009a98:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
 4009a9c:	01800044 	movi	r6,1
 4009aa0:	01402004 	movi	r5,128
 4009aa4:	e13ffe17 	ldw	r4,-8(fp)
 4009aa8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 4009aac:	01800604 	movi	r6,24
 4009ab0:	01402204 	movi	r5,136
 4009ab4:	e13ffe17 	ldw	r4,-8(fp)
 4009ab8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	return ( 0);
 4009abc:	0005883a 	mov	r2,zero
}
 4009ac0:	e037883a 	mov	sp,fp
 4009ac4:	dfc00117 	ldw	ra,4(sp)
 4009ac8:	df000017 	ldw	fp,0(sp)
 4009acc:	dec00204 	addi	sp,sp,8
 4009ad0:	f800283a 	ret

04009ad4 <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
 4009ad4:	defffc04 	addi	sp,sp,-16
 4009ad8:	dfc00315 	stw	ra,12(sp)
 4009adc:	df000215 	stw	fp,8(sp)
 4009ae0:	df000204 	addi	fp,sp,8
 4009ae4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
 4009ae8:	010100b4 	movhi	r4,1026
 4009aec:	2111b804 	addi	r4,r4,18144
 4009af0:	400ed040 	call	400ed04 <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
 4009af4:	01403e04 	movi	r5,248
 4009af8:	e13fff17 	ldw	r4,-4(fp)
 4009afc:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009b00:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 4009b04:	e0fffe03 	ldbu	r3,-8(fp)
 4009b08:	00bff004 	movi	r2,-64
 4009b0c:	1884703a 	and	r2,r3,r2
 4009b10:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
 4009b14:	e0bffe03 	ldbu	r2,-8(fp)
 4009b18:	10c01020 	cmpeqi	r3,r2,64
 4009b1c:	1800251e 	bne	r3,zero,4009bb4 <_ZN8MAX3421e8busprobeEv+0xe0>
 4009b20:	10c01048 	cmpgei	r3,r2,65
 4009b24:	1800021e 	bne	r3,zero,4009b30 <_ZN8MAX3421e8busprobeEv+0x5c>
 4009b28:	10003b26 	beq	r2,zero,4009c18 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
 4009b2c:	00004006 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
 4009b30:	10c02020 	cmpeqi	r3,r2,128
 4009b34:	1800031e 	bne	r3,zero,4009b44 <_ZN8MAX3421e8busprobeEv+0x70>
 4009b38:	10803020 	cmpeqi	r2,r2,192
 4009b3c:	1000331e 	bne	r2,zero,4009c0c <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
 4009b40:	00003b06 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
 4009b44:	01403604 	movi	r5,216
 4009b48:	e13fff17 	ldw	r4,-4(fp)
 4009b4c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009b50:	10803fcc 	andi	r2,r2,255
 4009b54:	1080008c 	andi	r2,r2,2
 4009b58:	1005003a 	cmpeq	r2,r2,zero
 4009b5c:	10803fcc 	andi	r2,r2,255
 4009b60:	10000a26 	beq	r2,zero,4009b8c <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
 4009b64:	010100b4 	movhi	r4,1026
 4009b68:	2111bd04 	addi	r4,r4,18164
 4009b6c:	400ed040 	call	400ed04 <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
 4009b70:	01803244 	movi	r6,201
 4009b74:	01403604 	movi	r5,216
 4009b78:	e13fff17 	ldw	r4,-4(fp)
 4009b7c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
 4009b80:	00800084 	movi	r2,2
 4009b84:	d0b23745 	stb	r2,-14115(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
 4009b88:	00002906 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
 4009b8c:	010100b4 	movhi	r4,1026
 4009b90:	2111c404 	addi	r4,r4,18192
 4009b94:	400ed040 	call	400ed04 <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
 4009b98:	018032c4 	movi	r6,203
 4009b9c:	01403604 	movi	r5,216
 4009ba0:	e13fff17 	ldw	r4,-4(fp)
 4009ba4:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
 4009ba8:	008000c4 	movi	r2,3
 4009bac:	d0b23745 	stb	r2,-14115(gp)
			}
			break;
 4009bb0:	00001f06 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
 4009bb4:	01403604 	movi	r5,216
 4009bb8:	e13fff17 	ldw	r4,-4(fp)
 4009bbc:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009bc0:	10803fcc 	andi	r2,r2,255
 4009bc4:	1080008c 	andi	r2,r2,2
 4009bc8:	1005003a 	cmpeq	r2,r2,zero
 4009bcc:	10803fcc 	andi	r2,r2,255
 4009bd0:	10000726 	beq	r2,zero,4009bf0 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
 4009bd4:	018032c4 	movi	r6,203
 4009bd8:	01403604 	movi	r5,216
 4009bdc:	e13fff17 	ldw	r4,-4(fp)
 4009be0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
 4009be4:	008000c4 	movi	r2,3
 4009be8:	d0b23745 	stb	r2,-14115(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
 4009bec:	00001006 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
 4009bf0:	01803244 	movi	r6,201
 4009bf4:	01403604 	movi	r5,216
 4009bf8:	e13fff17 	ldw	r4,-4(fp)
 4009bfc:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
 4009c00:	00800084 	movi	r2,2
 4009c04:	d0b23745 	stb	r2,-14115(gp)
			}
			break;
 4009c08:	00000906 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
 4009c0c:	00800044 	movi	r2,1
 4009c10:	d0b23745 	stb	r2,-14115(gp)
			break;
 4009c14:	00000606 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 4009c18:	01803444 	movi	r6,209
 4009c1c:	01403604 	movi	r5,216
 4009c20:	e13fff17 	ldw	r4,-4(fp)
 4009c24:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
 4009c28:	d0323745 	stb	zero,-14115(gp)
			break;
 4009c2c:	0001883a 	nop
	}//end switch( bus_sample )
}
 4009c30:	0001883a 	nop
 4009c34:	e037883a 	mov	sp,fp
 4009c38:	dfc00117 	ldw	ra,4(sp)
 4009c3c:	df000017 	ldw	fp,0(sp)
 4009c40:	dec00204 	addi	sp,sp,8
 4009c44:	f800283a 	ret

04009c48 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
 4009c48:	defffc04 	addi	sp,sp,-16
 4009c4c:	dfc00315 	stw	ra,12(sp)
 4009c50:	df000215 	stw	fp,8(sp)
 4009c54:	df000204 	addi	fp,sp,8
 4009c58:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
 4009c5c:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
 4009c60:	00820034 	movhi	r2,2048
 4009c64:	10849804 	addi	r2,r2,4704
 4009c68:	10800003 	ldbu	r2,0(r2)
 4009c6c:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 4009c70:	00820034 	movhi	r2,2048
 4009c74:	10849804 	addi	r2,r2,4704
 4009c78:	10800037 	ldwio	r2,0(r2)
 4009c7c:	1005003a 	cmpeq	r2,r2,zero
 4009c80:	10803fcc 	andi	r2,r2,255
 4009c84:	10000326 	beq	r2,zero,4009c94 <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
 4009c88:	e13fff17 	ldw	r4,-4(fp)
 4009c8c:	4009cac0 	call	4009cac <_ZN8MAX3421e10IntHandlerEv>
 4009c90:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
 4009c94:	e0bffe03 	ldbu	r2,-8(fp)
}
 4009c98:	e037883a 	mov	sp,fp
 4009c9c:	dfc00117 	ldw	ra,4(sp)
 4009ca0:	df000017 	ldw	fp,0(sp)
 4009ca4:	dec00204 	addi	sp,sp,8
 4009ca8:	f800283a 	ret

04009cac <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
 4009cac:	defffc04 	addi	sp,sp,-16
 4009cb0:	dfc00315 	stw	ra,12(sp)
 4009cb4:	df000215 	stw	fp,8(sp)
 4009cb8:	df000204 	addi	fp,sp,8
 4009cbc:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
 4009cc0:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
 4009cc4:	01403204 	movi	r5,200
 4009cc8:	e13fff17 	ldw	r4,-4(fp)
 4009ccc:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009cd0:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
 4009cd4:	e0bffe43 	ldbu	r2,-7(fp)
 4009cd8:	1080080c 	andi	r2,r2,32
 4009cdc:	10000526 	beq	r2,zero,4009cf4 <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
 4009ce0:	e13fff17 	ldw	r4,-4(fp)
 4009ce4:	4009ad40 	call	4009ad4 <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
 4009ce8:	e0bffe03 	ldbu	r2,-8(fp)
 4009cec:	10800814 	ori	r2,r2,32
 4009cf0:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
 4009cf4:	e0bffe03 	ldbu	r2,-8(fp)
 4009cf8:	100d883a 	mov	r6,r2
 4009cfc:	01403204 	movi	r5,200
 4009d00:	e13fff17 	ldw	r4,-4(fp)
 4009d04:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
 4009d08:	e0bffe03 	ldbu	r2,-8(fp)
}
 4009d0c:	e037883a 	mov	sp,fp
 4009d10:	dfc00117 	ldw	ra,4(sp)
 4009d14:	df000017 	ldw	fp,0(sp)
 4009d18:	dec00204 	addi	sp,sp,8
 4009d1c:	f800283a 	ret

04009d20 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
 4009d20:	defffe04 	addi	sp,sp,-8
 4009d24:	df000115 	stw	fp,4(sp)
 4009d28:	df000104 	addi	fp,sp,4
 4009d2c:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
 4009d30:	0005883a 	mov	r2,zero
}
 4009d34:	e037883a 	mov	sp,fp
 4009d38:	df000017 	ldw	fp,0(sp)
 4009d3c:	dec00104 	addi	sp,sp,4
 4009d40:	f800283a 	ret

04009d44 <_Z8toBinaryh>:
USB_DEVICE_DESCRIPTOR buf;
USB Usb;


void toBinary(uint8_t a)
{
 4009d44:	defffc04 	addi	sp,sp,-16
 4009d48:	dfc00315 	stw	ra,12(sp)
 4009d4c:	df000215 	stw	fp,8(sp)
 4009d50:	df000204 	addi	fp,sp,8
 4009d54:	2005883a 	mov	r2,r4
 4009d58:	e0bfff05 	stb	r2,-4(fp)
    uint8_t i;

    for(i=0x80;i!=0;i>>=1)
 4009d5c:	00bfe004 	movi	r2,-128
 4009d60:	e0bffe05 	stb	r2,-8(fp)
 4009d64:	e0bffe03 	ldbu	r2,-8(fp)
 4009d68:	10000e26 	beq	r2,zero,4009da4 <_Z8toBinaryh+0x60>
        printf("%c",(a&i)?'1':'0');
 4009d6c:	e0ffff03 	ldbu	r3,-4(fp)
 4009d70:	e0bffe03 	ldbu	r2,-8(fp)
 4009d74:	1884703a 	and	r2,r3,r2
 4009d78:	10803fcc 	andi	r2,r2,255
 4009d7c:	10000226 	beq	r2,zero,4009d88 <_Z8toBinaryh+0x44>
 4009d80:	00800c44 	movi	r2,49
 4009d84:	00000106 	br	4009d8c <_Z8toBinaryh+0x48>
 4009d88:	00800c04 	movi	r2,48
 4009d8c:	1009883a 	mov	r4,r2
 4009d90:	400ec2c0 	call	400ec2c <putchar>

void toBinary(uint8_t a)
{
    uint8_t i;

    for(i=0x80;i!=0;i>>=1)
 4009d94:	e0bffe03 	ldbu	r2,-8(fp)
 4009d98:	1005d07a 	srai	r2,r2,1
 4009d9c:	e0bffe05 	stb	r2,-8(fp)
 4009da0:	003ff006 	br	4009d64 <__alt_mem_onchip_memory2_0+0xfc008ae4>
        printf("%c",(a&i)?'1':'0');
}
 4009da4:	0001883a 	nop
 4009da8:	e037883a 	mov	sp,fp
 4009dac:	dfc00117 	ldw	ra,4(sp)
 4009db0:	df000017 	ldw	fp,0(sp)
 4009db4:	dec00204 	addi	sp,sp,8
 4009db8:	f800283a 	ret

04009dbc <main>:

extern "C" {
        #include "sgtl5000_test.h"
}

int main() {
 4009dbc:	deffde04 	addi	sp,sp,-136
 4009dc0:	dfc02115 	stw	ra,132(sp)
 4009dc4:	df002015 	stw	fp,128(sp)
 4009dc8:	df002004 	addi	fp,sp,128
	printf("Initializing SGTL5000...\n");
 4009dcc:	010100b4 	movhi	r4,1026
 4009dd0:	211a0004 	addi	r4,r4,26624
 4009dd4:	400ed040 	call	400ed04 <puts>
	initialize_sgtl5000();
 4009dd8:	40006bc0 	call	40006bc <initialize_sgtl5000>
	printf("Initializing MIDI connection...\n");
 4009ddc:	010100b4 	movhi	r4,1026
 4009de0:	211a0704 	addi	r4,r4,26652
 4009de4:	400ed040 	call	400ed04 <puts>
	USBH_MIDI Midi(&Usb);
 4009de8:	e0bfe504 	addi	r2,fp,-108
 4009dec:	014100f4 	movhi	r5,1027
 4009df0:	29754904 	addi	r5,r5,-10972
 4009df4:	1009883a 	mov	r4,r2
 4009df8:	4006d540 	call	4006d54 <_ZN9USBH_MIDIC1EP3USB>
	if(Usb.Init() == -1){
 4009dfc:	010100f4 	movhi	r4,1027
 4009e00:	21354904 	addi	r4,r4,-10972
 4009e04:	40098d80 	call	40098d8 <_ZN8MAX3421e4InitEv>
 4009e08:	10803fcc 	andi	r2,r2,255
 4009e0c:	1080201c 	xori	r2,r2,128
 4009e10:	10bfe004 	addi	r2,r2,-128
 4009e14:	10bfffe0 	cmpeqi	r2,r2,-1
 4009e18:	10803fcc 	andi	r2,r2,255
 4009e1c:	10000426 	beq	r2,zero,4009e30 <main+0x74>
		printf("Halted...");
 4009e20:	010100b4 	movhi	r4,1026
 4009e24:	211a0f04 	addi	r4,r4,26684
 4009e28:	400ebe80 	call	400ebe8 <printf>
		while(1);
 4009e2c:	003fff06 	br	4009e2c <__alt_mem_onchip_memory2_0+0xfc008bac>
	}
	delay(200);
 4009e30:	01003204 	movi	r4,200
 4009e34:	4000dd40 	call	4000dd4 <_Z5delaym>

	/* Pointers to PIOs */
	volatile unsigned int *note_vol_0 = (unsigned int*)0x08001200;
 4009e38:	00820034 	movhi	r2,2048
 4009e3c:	10848004 	addi	r2,r2,4608
 4009e40:	e0bfe015 	stw	r2,-128(fp)
	volatile unsigned int *note_vol_1 = (unsigned int*)0x080011f0;
 4009e44:	00820034 	movhi	r2,2048
 4009e48:	10847c04 	addi	r2,r2,4592
 4009e4c:	e0bfe115 	stw	r2,-124(fp)
	volatile unsigned int *note_vol_2 = (unsigned int*)0x080011e0;
 4009e50:	00820034 	movhi	r2,2048
 4009e54:	10847804 	addi	r2,r2,4576
 4009e58:	e0bfe215 	stw	r2,-120(fp)
	volatile unsigned int *note_vol_3 = (unsigned int*)0x080011d0;
 4009e5c:	00820034 	movhi	r2,2048
 4009e60:	10847404 	addi	r2,r2,4560
 4009e64:	e0bfe315 	stw	r2,-116(fp)

	/* Initialize all notes/volumes to 0 */
	*note_vol_0 = (unsigned int) 0x3C20;	//C4
 4009e68:	e0bfe017 	ldw	r2,-128(fp)
 4009e6c:	00cf0804 	movi	r3,15392
 4009e70:	10c00015 	stw	r3,0(r2)
	*note_vol_1 = (unsigned int) 0x4020;	//E4
 4009e74:	e0bfe117 	ldw	r2,-124(fp)
 4009e78:	00d00804 	movi	r3,16416
 4009e7c:	10c00015 	stw	r3,0(r2)
	*note_vol_2 = (unsigned int) 0x4320;	//G4
 4009e80:	e0bfe217 	ldw	r2,-120(fp)
 4009e84:	00d0c804 	movi	r3,17184
 4009e88:	10c00015 	stw	r3,0(r2)
	*note_vol_3 = (unsigned int) 0;
 4009e8c:	e0bfe317 	ldw	r2,-116(fp)
 4009e90:	10000015 	stw	zero,0(r2)

	while(1){
		Usb.Task();
 4009e94:	010100f4 	movhi	r4,1027
 4009e98:	21354904 	addi	r4,r4,-10972
 4009e9c:	4001f6c0 	call	4001f6c <_ZN3USB4TaskEv>
		if(Midi){
 4009ea0:	e0bfe504 	addi	r2,fp,-108
 4009ea4:	1009883a 	mov	r4,r2
 4009ea8:	400a59c0 	call	400a59c <_ZN9USBH_MIDIcvbEv>
 4009eac:	10803fcc 	andi	r2,r2,255
 4009eb0:	103ff826 	beq	r2,zero,4009e94 <__alt_mem_onchip_memory2_0+0xfc008c14>
			uint8_t MIDI_packet[ 3 ];
			uint8_t size;

			do {
				if ( (size = Midi.RecvData(MIDI_packet)) > 0 ) {
 4009eb4:	e0ffff04 	addi	r3,fp,-4
 4009eb8:	e0bfe504 	addi	r2,fp,-108
 4009ebc:	000d883a 	mov	r6,zero
 4009ec0:	180b883a 	mov	r5,r3
 4009ec4:	1009883a 	mov	r4,r2
 4009ec8:	40079dc0 	call	40079dc <_ZN9USBH_MIDI8RecvDataEPhb>
 4009ecc:	e0bfe405 	stb	r2,-112(fp)
 4009ed0:	e0bfe403 	ldbu	r2,-112(fp)
 4009ed4:	1004c03a 	cmpne	r2,r2,zero
 4009ed8:	10803fcc 	andi	r2,r2,255
 4009edc:	10001526 	beq	r2,zero,4009f34 <main+0x178>
					printf("........\n");
 4009ee0:	010100b4 	movhi	r4,1026
 4009ee4:	211a1204 	addi	r4,r4,26696
 4009ee8:	400ed040 	call	400ed04 <puts>
					toBinary(MIDI_packet[0]); printf("\n");
 4009eec:	e0bfff03 	ldbu	r2,-4(fp)
 4009ef0:	10803fcc 	andi	r2,r2,255
 4009ef4:	1009883a 	mov	r4,r2
 4009ef8:	4009d440 	call	4009d44 <_Z8toBinaryh>
 4009efc:	01000284 	movi	r4,10
 4009f00:	400ec2c0 	call	400ec2c <putchar>
					toBinary(MIDI_packet[1]); printf("\n");
 4009f04:	e0bfff43 	ldbu	r2,-3(fp)
 4009f08:	10803fcc 	andi	r2,r2,255
 4009f0c:	1009883a 	mov	r4,r2
 4009f10:	4009d440 	call	4009d44 <_Z8toBinaryh>
 4009f14:	01000284 	movi	r4,10
 4009f18:	400ec2c0 	call	400ec2c <putchar>
					toBinary(MIDI_packet[2]); printf("\n");
 4009f1c:	e0bfff83 	ldbu	r2,-2(fp)
 4009f20:	10803fcc 	andi	r2,r2,255
 4009f24:	1009883a 	mov	r4,r2
 4009f28:	4009d440 	call	4009d44 <_Z8toBinaryh>
 4009f2c:	01000284 	movi	r4,10
 4009f30:	400ec2c0 	call	400ec2c <putchar>
					//TODO: Logic for assigning note_vols based on incoming data
					//Also add PIOs for wheels, knobs, and buttons. Drum pads can be added later
				}
			} while (size > 0);
 4009f34:	e0bfe403 	ldbu	r2,-112(fp)
 4009f38:	103fd626 	beq	r2,zero,4009e94 <__alt_mem_onchip_memory2_0+0xfc008c14>
		Usb.Task();
		if(Midi){
			uint8_t MIDI_packet[ 3 ];
			uint8_t size;

			do {
 4009f3c:	003fdd06 	br	4009eb4 <__alt_mem_onchip_memory2_0+0xfc008c34>

04009f40 <_Z9test_loopv>:
		}
	}
}


void test_loop() {
 4009f40:	defffd04 	addi	sp,sp,-12
 4009f44:	dfc00215 	stw	ra,8(sp)
 4009f48:	df000115 	stw	fp,4(sp)
 4009f4c:	df000104 	addi	fp,sp,4
        delay(200);
 4009f50:	01003204 	movi	r4,200
 4009f54:	4000dd40 	call	4000dd4 <_Z5delaym>
        Usb.Task();
 4009f58:	010100f4 	movhi	r4,1027
 4009f5c:	21354904 	addi	r4,r4,-10972
 4009f60:	4001f6c0 	call	4001f6c <_ZN3USB4TaskEv>
        usbstate = Usb.getUsbTaskState();
 4009f64:	010100f4 	movhi	r4,1027
 4009f68:	21354904 	addi	r4,r4,-10972
 4009f6c:	4000ed80 	call	4000ed8 <_ZN3USB15getUsbTaskStateEv>
 4009f70:	d0b237c5 	stb	r2,-14113(gp)
        if(usbstate != laststate) {
 4009f74:	d0f237c3 	ldbu	r3,-14113(gp)
 4009f78:	d0b23803 	ldbu	r2,-14112(gp)
 4009f7c:	18c03fcc 	andi	r3,r3,255
 4009f80:	10803fcc 	andi	r2,r2,255
 4009f84:	1880fc26 	beq	r3,r2,400a378 <_Z9test_loopv+0x438>
                laststate = usbstate;
 4009f88:	d0b237c3 	ldbu	r2,-14113(gp)
 4009f8c:	d0b23805 	stb	r2,-14112(gp)
                /**/
                switch(usbstate) {
 4009f90:	d0b237c3 	ldbu	r2,-14113(gp)
 4009f94:	10803fcc 	andi	r2,r2,255
 4009f98:	10c01820 	cmpeqi	r3,r2,96
 4009f9c:	18001f1e 	bne	r3,zero,400a01c <_Z9test_loopv+0xdc>
 4009fa0:	10c01848 	cmpgei	r3,r2,97
 4009fa4:	1800071e 	bne	r3,zero,4009fc4 <_Z9test_loopv+0x84>
 4009fa8:	10c00c20 	cmpeqi	r3,r2,48
 4009fac:	1800111e 	bne	r3,zero,4009ff4 <_Z9test_loopv+0xb4>
 4009fb0:	10c01420 	cmpeqi	r3,r2,80
 4009fb4:	1800141e 	bne	r3,zero,400a008 <_Z9test_loopv+0xc8>
 4009fb8:	108004a0 	cmpeqi	r2,r2,18
 4009fbc:	1000081e 	bne	r2,zero,4009fe0 <_Z9test_loopv+0xa0>
                        case( USB_STATE_ERROR):
                                E_Notify(PSTR("\r\nUSB state machine reached error state"), 0x80);
                                break;

                        default:
                                break;
 4009fc0:	0000ed06 	br	400a378 <_Z9test_loopv+0x438>
        Usb.Task();
        usbstate = Usb.getUsbTaskState();
        if(usbstate != laststate) {
                laststate = usbstate;
                /**/
                switch(usbstate) {
 4009fc4:	10c02420 	cmpeqi	r3,r2,144
 4009fc8:	18001e1e 	bne	r3,zero,400a044 <_Z9test_loopv+0x104>
 4009fcc:	10c02820 	cmpeqi	r3,r2,160
 4009fd0:	1800e41e 	bne	r3,zero,400a364 <_Z9test_loopv+0x424>
 4009fd4:	10801c20 	cmpeqi	r2,r2,112
 4009fd8:	1000151e 	bne	r2,zero,400a030 <_Z9test_loopv+0xf0>
                        case( USB_STATE_ERROR):
                                E_Notify(PSTR("\r\nUSB state machine reached error state"), 0x80);
                                break;

                        default:
                                break;
 4009fdc:	0000e606 	br	400a378 <_Z9test_loopv+0x438>
        if(usbstate != laststate) {
                laststate = usbstate;
                /**/
                switch(usbstate) {
                        case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE):
                                E_Notify(PSTR("\r\nWaiting for device..."), 0x80);
 4009fe0:	01402004 	movi	r5,128
 4009fe4:	010100b4 	movhi	r4,1026
 4009fe8:	211a1504 	addi	r4,r4,26708
 4009fec:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 4009ff0:	0000e106 	br	400a378 <_Z9test_loopv+0x438>
                        case( USB_ATTACHED_SUBSTATE_RESET_DEVICE):
                                E_Notify(PSTR("\r\nDevice connected. Resetting..."), 0x80);
 4009ff4:	01402004 	movi	r5,128
 4009ff8:	010100b4 	movhi	r4,1026
 4009ffc:	211a1b04 	addi	r4,r4,26732
 400a000:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a004:	0000dc06 	br	400a378 <_Z9test_loopv+0x438>
                        case( USB_ATTACHED_SUBSTATE_WAIT_SOF):
                                E_Notify(PSTR("\r\nReset complete. Waiting for the first SOF..."), 0x80);
 400a008:	01402004 	movi	r5,128
 400a00c:	010100b4 	movhi	r4,1026
 400a010:	211a2404 	addi	r4,r4,26768
 400a014:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a018:	0000d706 	br	400a378 <_Z9test_loopv+0x438>
                        case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE):
                                E_Notify(PSTR("\r\nSOF generation started. Enumerating device..."), 0x80);
 400a01c:	01402004 	movi	r5,128
 400a020:	010100b4 	movhi	r4,1026
 400a024:	211a3004 	addi	r4,r4,26816
 400a028:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a02c:	0000d206 	br	400a378 <_Z9test_loopv+0x438>
                        case( USB_STATE_ADDRESSING):
                                E_Notify(PSTR("\r\nSetting device address..."), 0x80);
 400a030:	01402004 	movi	r5,128
 400a034:	010100b4 	movhi	r4,1026
 400a038:	211a3c04 	addi	r4,r4,26864
 400a03c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a040:	0000cd06 	br	400a378 <_Z9test_loopv+0x438>
                        case( USB_STATE_RUNNING):
                                E_Notify(PSTR("\r\nGetting device descriptor"), 0x80);
 400a044:	01402004 	movi	r5,128
 400a048:	010100b4 	movhi	r4,1026
 400a04c:	211a4304 	addi	r4,r4,26892
 400a050:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                rcode = Usb.getDevDescr(1, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*) & buf);
 400a054:	00800484 	movi	r2,18
 400a058:	10ffffcc 	andi	r3,r2,65535
 400a05c:	008100f4 	movhi	r2,1027
 400a060:	10b54404 	addi	r2,r2,-10992
 400a064:	d8800015 	stw	r2,0(sp)
 400a068:	180f883a 	mov	r7,r3
 400a06c:	000d883a 	mov	r6,zero
 400a070:	01400044 	movi	r5,1
 400a074:	010100f4 	movhi	r4,1027
 400a078:	21354904 	addi	r4,r4,-10972
 400a07c:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 400a080:	d0b23785 	stb	r2,-14114(gp)

                                if(rcode) {
 400a084:	d0b23783 	ldbu	r2,-14114(gp)
 400a088:	10803fcc 	andi	r2,r2,255
 400a08c:	10000a26 	beq	r2,zero,400a0b8 <_Z9test_loopv+0x178>
                                        E_Notify(PSTR("\r\nError reading device descriptor. Error code "), 0x80);
 400a090:	01402004 	movi	r5,128
 400a094:	010100b4 	movhi	r4,1026
 400a098:	211a4a04 	addi	r4,r4,26920
 400a09c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(rcode, 8);
 400a0a0:	d0b23783 	ldbu	r2,-14114(gp)
 400a0a4:	10803fcc 	andi	r2,r2,255
 400a0a8:	01400204 	movi	r5,8
 400a0ac:	1009883a 	mov	r4,r2
 400a0b0:	400a3e80 	call	400a3e8 <_Z9print_hexii>
#ifdef ESP8266
                                                yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif

                                }
                                break;
 400a0b4:	0000b006 	br	400a378 <_Z9test_loopv+0x438>
                                if(rcode) {
                                        E_Notify(PSTR("\r\nError reading device descriptor. Error code "), 0x80);
                                        print_hex(rcode, 8);
                                } else {
                                        /**/
                                        E_Notify(PSTR("\r\nDescriptor Length:\t"), 0x80);
 400a0b8:	01402004 	movi	r5,128
 400a0bc:	010100b4 	movhi	r4,1026
 400a0c0:	211a5604 	addi	r4,r4,26968
 400a0c4:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bLength, 8);
 400a0c8:	008100f4 	movhi	r2,1027
 400a0cc:	10b54404 	addi	r2,r2,-10992
 400a0d0:	10800003 	ldbu	r2,0(r2)
 400a0d4:	10803fcc 	andi	r2,r2,255
 400a0d8:	01400204 	movi	r5,8
 400a0dc:	1009883a 	mov	r4,r2
 400a0e0:	400a3e80 	call	400a3e8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDescriptor type:\t"), 0x80);
 400a0e4:	01402004 	movi	r5,128
 400a0e8:	010100b4 	movhi	r4,1026
 400a0ec:	211a5c04 	addi	r4,r4,26992
 400a0f0:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDescriptorType, 8);
 400a0f4:	008100f4 	movhi	r2,1027
 400a0f8:	10b54404 	addi	r2,r2,-10992
 400a0fc:	10800043 	ldbu	r2,1(r2)
 400a100:	10803fcc 	andi	r2,r2,255
 400a104:	01400204 	movi	r5,8
 400a108:	1009883a 	mov	r4,r2
 400a10c:	400a3e80 	call	400a3e8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nUSB version:\t\t"), 0x80);
 400a110:	01402004 	movi	r5,128
 400a114:	010100b4 	movhi	r4,1026
 400a118:	211a6104 	addi	r4,r4,27012
 400a11c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bcdUSB, 16);
 400a120:	008100f4 	movhi	r2,1027
 400a124:	10b54404 	addi	r2,r2,-10992
 400a128:	10c00083 	ldbu	r3,2(r2)
 400a12c:	108000c3 	ldbu	r2,3(r2)
 400a130:	1004923a 	slli	r2,r2,8
 400a134:	10c4b03a 	or	r2,r2,r3
 400a138:	10bfffcc 	andi	r2,r2,65535
 400a13c:	01400404 	movi	r5,16
 400a140:	1009883a 	mov	r4,r2
 400a144:	400a3e80 	call	400a3e8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDevice class:\t\t"), 0x80);
 400a148:	01402004 	movi	r5,128
 400a14c:	010100b4 	movhi	r4,1026
 400a150:	211a6604 	addi	r4,r4,27032
 400a154:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDeviceClass, 8);
 400a158:	008100f4 	movhi	r2,1027
 400a15c:	10b54404 	addi	r2,r2,-10992
 400a160:	10800103 	ldbu	r2,4(r2)
 400a164:	10803fcc 	andi	r2,r2,255
 400a168:	01400204 	movi	r5,8
 400a16c:	1009883a 	mov	r4,r2
 400a170:	400a3e80 	call	400a3e8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDevice Subclass:\t"), 0x80);
 400a174:	01402004 	movi	r5,128
 400a178:	010100b4 	movhi	r4,1026
 400a17c:	211a6b04 	addi	r4,r4,27052
 400a180:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDeviceSubClass, 8);
 400a184:	008100f4 	movhi	r2,1027
 400a188:	10b54404 	addi	r2,r2,-10992
 400a18c:	10800143 	ldbu	r2,5(r2)
 400a190:	10803fcc 	andi	r2,r2,255
 400a194:	01400204 	movi	r5,8
 400a198:	1009883a 	mov	r4,r2
 400a19c:	400a3e80 	call	400a3e8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDevice Protocol:\t"), 0x80);
 400a1a0:	01402004 	movi	r5,128
 400a1a4:	010100b4 	movhi	r4,1026
 400a1a8:	211a7004 	addi	r4,r4,27072
 400a1ac:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDeviceProtocol, 8);
 400a1b0:	008100f4 	movhi	r2,1027
 400a1b4:	10b54404 	addi	r2,r2,-10992
 400a1b8:	10800183 	ldbu	r2,6(r2)
 400a1bc:	10803fcc 	andi	r2,r2,255
 400a1c0:	01400204 	movi	r5,8
 400a1c4:	1009883a 	mov	r4,r2
 400a1c8:	400a3e80 	call	400a3e8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nMax.packet size:\t"), 0x80);
 400a1cc:	01402004 	movi	r5,128
 400a1d0:	010100b4 	movhi	r4,1026
 400a1d4:	211a7504 	addi	r4,r4,27092
 400a1d8:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bMaxPacketSize0, 8);
 400a1dc:	008100f4 	movhi	r2,1027
 400a1e0:	10b54404 	addi	r2,r2,-10992
 400a1e4:	108001c3 	ldbu	r2,7(r2)
 400a1e8:	10803fcc 	andi	r2,r2,255
 400a1ec:	01400204 	movi	r5,8
 400a1f0:	1009883a 	mov	r4,r2
 400a1f4:	400a3e80 	call	400a3e8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nVendor  ID:\t\t"), 0x80);
 400a1f8:	01402004 	movi	r5,128
 400a1fc:	010100b4 	movhi	r4,1026
 400a200:	211a7a04 	addi	r4,r4,27112
 400a204:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.idVendor, 16);
 400a208:	008100f4 	movhi	r2,1027
 400a20c:	10b54404 	addi	r2,r2,-10992
 400a210:	10c00203 	ldbu	r3,8(r2)
 400a214:	10800243 	ldbu	r2,9(r2)
 400a218:	1004923a 	slli	r2,r2,8
 400a21c:	10c4b03a 	or	r2,r2,r3
 400a220:	10bfffcc 	andi	r2,r2,65535
 400a224:	01400404 	movi	r5,16
 400a228:	1009883a 	mov	r4,r2
 400a22c:	400a3e80 	call	400a3e8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nProduct ID:\t\t"), 0x80);
 400a230:	01402004 	movi	r5,128
 400a234:	010100b4 	movhi	r4,1026
 400a238:	211a7e04 	addi	r4,r4,27128
 400a23c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.idProduct, 16);
 400a240:	008100f4 	movhi	r2,1027
 400a244:	10b54404 	addi	r2,r2,-10992
 400a248:	10c00283 	ldbu	r3,10(r2)
 400a24c:	108002c3 	ldbu	r2,11(r2)
 400a250:	1004923a 	slli	r2,r2,8
 400a254:	10c4b03a 	or	r2,r2,r3
 400a258:	10bfffcc 	andi	r2,r2,65535
 400a25c:	01400404 	movi	r5,16
 400a260:	1009883a 	mov	r4,r2
 400a264:	400a3e80 	call	400a3e8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nRevision ID:\t\t"), 0x80);
 400a268:	01402004 	movi	r5,128
 400a26c:	010100b4 	movhi	r4,1026
 400a270:	211a8204 	addi	r4,r4,27144
 400a274:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bcdDevice, 16);
 400a278:	008100f4 	movhi	r2,1027
 400a27c:	10b54404 	addi	r2,r2,-10992
 400a280:	10c00303 	ldbu	r3,12(r2)
 400a284:	10800343 	ldbu	r2,13(r2)
 400a288:	1004923a 	slli	r2,r2,8
 400a28c:	10c4b03a 	or	r2,r2,r3
 400a290:	10bfffcc 	andi	r2,r2,65535
 400a294:	01400404 	movi	r5,16
 400a298:	1009883a 	mov	r4,r2
 400a29c:	400a3e80 	call	400a3e8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nMfg.string index:\t"), 0x80);
 400a2a0:	01402004 	movi	r5,128
 400a2a4:	010100b4 	movhi	r4,1026
 400a2a8:	211a8704 	addi	r4,r4,27164
 400a2ac:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.iManufacturer, 8);
 400a2b0:	008100f4 	movhi	r2,1027
 400a2b4:	10b54404 	addi	r2,r2,-10992
 400a2b8:	10800383 	ldbu	r2,14(r2)
 400a2bc:	10803fcc 	andi	r2,r2,255
 400a2c0:	01400204 	movi	r5,8
 400a2c4:	1009883a 	mov	r4,r2
 400a2c8:	400a3e80 	call	400a3e8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nProd.string index:\t"), 0x80);
 400a2cc:	01402004 	movi	r5,128
 400a2d0:	010100b4 	movhi	r4,1026
 400a2d4:	211a8d04 	addi	r4,r4,27188
 400a2d8:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.iProduct, 8);
 400a2dc:	008100f4 	movhi	r2,1027
 400a2e0:	10b54404 	addi	r2,r2,-10992
 400a2e4:	108003c3 	ldbu	r2,15(r2)
 400a2e8:	10803fcc 	andi	r2,r2,255
 400a2ec:	01400204 	movi	r5,8
 400a2f0:	1009883a 	mov	r4,r2
 400a2f4:	400a3e80 	call	400a3e8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nSerial number index:\t"), 0x80);
 400a2f8:	01402004 	movi	r5,128
 400a2fc:	010100b4 	movhi	r4,1026
 400a300:	211a9304 	addi	r4,r4,27212
 400a304:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.iSerialNumber, 8);
 400a308:	008100f4 	movhi	r2,1027
 400a30c:	10b54404 	addi	r2,r2,-10992
 400a310:	10800403 	ldbu	r2,16(r2)
 400a314:	10803fcc 	andi	r2,r2,255
 400a318:	01400204 	movi	r5,8
 400a31c:	1009883a 	mov	r4,r2
 400a320:	400a3e80 	call	400a3e8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nNumber of conf.:\t"), 0x80);
 400a324:	01402004 	movi	r5,128
 400a328:	010100b4 	movhi	r4,1026
 400a32c:	211a9904 	addi	r4,r4,27236
 400a330:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bNumConfigurations, 8);
 400a334:	008100f4 	movhi	r2,1027
 400a338:	10b54404 	addi	r2,r2,-10992
 400a33c:	10800443 	ldbu	r2,17(r2)
 400a340:	10803fcc 	andi	r2,r2,255
 400a344:	01400204 	movi	r5,8
 400a348:	1009883a 	mov	r4,r2
 400a34c:	400a3e80 	call	400a3e8 <_Z9print_hexii>
                                        /**/
                                        E_Notify(PSTR("\r\n\nAll tests passed. Press RESET to restart test"), 0x80);
 400a350:	01402004 	movi	r5,128
 400a354:	010100b4 	movhi	r4,1026
 400a358:	211a9e04 	addi	r4,r4,27256
 400a35c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
#ifdef ESP8266
                                                yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif

                                }
                                break;
 400a360:	00000506 	br	400a378 <_Z9test_loopv+0x438>
                        case( USB_STATE_ERROR):
                                E_Notify(PSTR("\r\nUSB state machine reached error state"), 0x80);
 400a364:	01402004 	movi	r5,128
 400a368:	010100b4 	movhi	r4,1026
 400a36c:	211aab04 	addi	r4,r4,27308
 400a370:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a374:	0001883a 	nop

                        default:
                                break;
                }//switch( usbstate...
        }
}//loop()...
 400a378:	0001883a 	nop
 400a37c:	e037883a 	mov	sp,fp
 400a380:	dfc00117 	ldw	ra,4(sp)
 400a384:	df000017 	ldw	fp,0(sp)
 400a388:	dec00204 	addi	sp,sp,8
 400a38c:	f800283a 	ret

0400a390 <_Z6halt55v>:

/* constantly transmits 0x55 via SPI to aid probing */
void halt55() {
 400a390:	defffe04 	addi	sp,sp,-8
 400a394:	dfc00115 	stw	ra,4(sp)
 400a398:	df000015 	stw	fp,0(sp)
 400a39c:	d839883a 	mov	fp,sp

        E_Notify(PSTR("\r\nUnrecoverable error - test halted!!"), 0x80);
 400a3a0:	01402004 	movi	r5,128
 400a3a4:	010100b4 	movhi	r4,1026
 400a3a8:	211ab504 	addi	r4,r4,27348
 400a3ac:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
        E_Notify(PSTR("\r\n0x55 pattern is transmitted via SPI"), 0x80);
 400a3b0:	01402004 	movi	r5,128
 400a3b4:	010100b4 	movhi	r4,1026
 400a3b8:	211abf04 	addi	r4,r4,27388
 400a3bc:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
        E_Notify(PSTR("\r\nPress RESET to restart test"), 0x80);
 400a3c0:	01402004 	movi	r5,128
 400a3c4:	010100b4 	movhi	r4,1026
 400a3c8:	211ac904 	addi	r4,r4,27428
 400a3cc:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>

        while(1) {
                Usb.regWr(0x55, 0x55);
 400a3d0:	01801544 	movi	r6,85
 400a3d4:	01401544 	movi	r5,85
 400a3d8:	010100f4 	movhi	r4,1027
 400a3dc:	21354904 	addi	r4,r4,-10972
 400a3e0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        E_Notify(PSTR("\r\nUnrecoverable error - test halted!!"), 0x80);
        E_Notify(PSTR("\r\n0x55 pattern is transmitted via SPI"), 0x80);
        E_Notify(PSTR("\r\nPress RESET to restart test"), 0x80);

        while(1) {
 400a3e4:	003ffa06 	br	400a3d0 <__alt_mem_onchip_memory2_0+0xfc009150>

0400a3e8 <_Z9print_hexii>:
#endif
        }
}

/* prints hex numbers with leading zeroes */
void print_hex(int v, int num_places) {
 400a3e8:	defff804 	addi	sp,sp,-32
 400a3ec:	dfc00715 	stw	ra,28(sp)
 400a3f0:	df000615 	stw	fp,24(sp)
 400a3f4:	df000604 	addi	fp,sp,24
 400a3f8:	e13ffe15 	stw	r4,-8(fp)
 400a3fc:	e17fff15 	stw	r5,-4(fp)
        int mask = 0, n, num_nibbles, digit;
 400a400:	e03ffa15 	stw	zero,-24(fp)

        for(n = 1; n <= num_places; n++) {
 400a404:	00800044 	movi	r2,1
 400a408:	e0bffb15 	stw	r2,-20(fp)
 400a40c:	e0bffb17 	ldw	r2,-20(fp)
 400a410:	e0ffff17 	ldw	r3,-4(fp)
 400a414:	18800816 	blt	r3,r2,400a438 <_Z9print_hexii+0x50>
                mask = (mask << 1) | 0x0001;
 400a418:	e0bffa17 	ldw	r2,-24(fp)
 400a41c:	1085883a 	add	r2,r2,r2
 400a420:	10800054 	ori	r2,r2,1
 400a424:	e0bffa15 	stw	r2,-24(fp)

/* prints hex numbers with leading zeroes */
void print_hex(int v, int num_places) {
        int mask = 0, n, num_nibbles, digit;

        for(n = 1; n <= num_places; n++) {
 400a428:	e0bffb17 	ldw	r2,-20(fp)
 400a42c:	10800044 	addi	r2,r2,1
 400a430:	e0bffb15 	stw	r2,-20(fp)
 400a434:	003ff506 	br	400a40c <__alt_mem_onchip_memory2_0+0xfc00918c>
                mask = (mask << 1) | 0x0001;
        }
        v = v & mask; // truncate v to specified number of places
 400a438:	e0fffe17 	ldw	r3,-8(fp)
 400a43c:	e0bffa17 	ldw	r2,-24(fp)
 400a440:	1884703a 	and	r2,r3,r2
 400a444:	e0bffe15 	stw	r2,-8(fp)

        num_nibbles = num_places / 4;
 400a448:	e0bfff17 	ldw	r2,-4(fp)
 400a44c:	1000010e 	bge	r2,zero,400a454 <_Z9print_hexii+0x6c>
 400a450:	108000c4 	addi	r2,r2,3
 400a454:	1005d0ba 	srai	r2,r2,2
 400a458:	e0bffc15 	stw	r2,-16(fp)
        if((num_places % 4) != 0) {
 400a45c:	e0bfff17 	ldw	r2,-4(fp)
 400a460:	108000cc 	andi	r2,r2,3
 400a464:	10000326 	beq	r2,zero,400a474 <_Z9print_hexii+0x8c>
                ++num_nibbles;
 400a468:	e0bffc17 	ldw	r2,-16(fp)
 400a46c:	10800044 	addi	r2,r2,1
 400a470:	e0bffc15 	stw	r2,-16(fp)
        }
        do {
                digit = ((v >> (num_nibbles - 1) * 4)) & 0x0f;
 400a474:	e0bffc17 	ldw	r2,-16(fp)
 400a478:	10bfffc4 	addi	r2,r2,-1
 400a47c:	1085883a 	add	r2,r2,r2
 400a480:	1085883a 	add	r2,r2,r2
 400a484:	1007883a 	mov	r3,r2
 400a488:	e0bffe17 	ldw	r2,-8(fp)
 400a48c:	10c5d83a 	sra	r2,r2,r3
 400a490:	108003cc 	andi	r2,r2,15
 400a494:	e0bffd15 	stw	r2,-12(fp)
                printf("%x\n", digit);
 400a498:	e17ffd17 	ldw	r5,-12(fp)
 400a49c:	010100b4 	movhi	r4,1026
 400a4a0:	211ad104 	addi	r4,r4,27460
 400a4a4:	400ebe80 	call	400ebe8 <printf>

        num_nibbles = num_places / 4;
        if((num_places % 4) != 0) {
                ++num_nibbles;
        }
        do {
 400a4a8:	e0bffc17 	ldw	r2,-16(fp)
 400a4ac:	10bfffc4 	addi	r2,r2,-1
 400a4b0:	e0bffc15 	stw	r2,-16(fp)
 400a4b4:	e0bffc17 	ldw	r2,-16(fp)
 400a4b8:	1004c03a 	cmpne	r2,r2,zero
 400a4bc:	10803fcc 	andi	r2,r2,255
 400a4c0:	10000126 	beq	r2,zero,400a4c8 <_Z9print_hexii+0xe0>
 400a4c4:	003feb06 	br	400a474 <__alt_mem_onchip_memory2_0+0xfc0091f4>
                digit = ((v >> (num_nibbles - 1) * 4)) & 0x0f;
                printf("%x\n", digit);
        } while(--num_nibbles);
}
 400a4c8:	0001883a 	nop
 400a4cc:	e037883a 	mov	sp,fp
 400a4d0:	dfc00117 	ldw	ra,4(sp)
 400a4d4:	df000017 	ldw	fp,0(sp)
 400a4d8:	dec00204 	addi	sp,sp,8
 400a4dc:	f800283a 	ret

0400a4e0 <_Z13press_any_keyv>:

/* prints "Press any key" and returns when key is pressed */
void press_any_key() {
 400a4e0:	defffe04 	addi	sp,sp,-8
 400a4e4:	dfc00115 	stw	ra,4(sp)
 400a4e8:	df000015 	stw	fp,0(sp)
 400a4ec:	d839883a 	mov	fp,sp
        E_Notify(PSTR("\r\nPress any key to continue..."), 0x80);
 400a4f0:	01402004 	movi	r5,128
 400a4f4:	010100b4 	movhi	r4,1026
 400a4f8:	211ad204 	addi	r4,r4,27464
 400a4fc:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
//        char x;
//        scanf("%s", &x);
}
 400a500:	0001883a 	nop
 400a504:	e037883a 	mov	sp,fp
 400a508:	dfc00117 	ldw	ra,4(sp)
 400a50c:	df000017 	ldw	fp,0(sp)
 400a510:	dec00204 	addi	sp,sp,8
 400a514:	f800283a 	ret

0400a518 <_Z41__static_initialization_and_destruction_0ii>:
 400a518:	defffc04 	addi	sp,sp,-16
 400a51c:	dfc00315 	stw	ra,12(sp)
 400a520:	df000215 	stw	fp,8(sp)
 400a524:	df000204 	addi	fp,sp,8
 400a528:	e13ffe15 	stw	r4,-8(fp)
 400a52c:	e17fff15 	stw	r5,-4(fp)
 400a530:	e0bffe17 	ldw	r2,-8(fp)
 400a534:	10800058 	cmpnei	r2,r2,1
 400a538:	1000061e 	bne	r2,zero,400a554 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 400a53c:	e0ffff17 	ldw	r3,-4(fp)
 400a540:	00bfffd4 	movui	r2,65535
 400a544:	1880031e 	bne	r3,r2,400a554 <_Z41__static_initialization_and_destruction_0ii+0x3c>
uint8_t rcode;
uint8_t usbstate;
uint8_t laststate;
//uint8_t buf[sizeof(USB_DEVICE_DESCRIPTOR)];
USB_DEVICE_DESCRIPTOR buf;
USB Usb;
 400a548:	010100f4 	movhi	r4,1027
 400a54c:	21354904 	addi	r4,r4,-10972
 400a550:	4000e540 	call	4000e54 <_ZN3USBC1Ev>
/* prints "Press any key" and returns when key is pressed */
void press_any_key() {
        E_Notify(PSTR("\r\nPress any key to continue..."), 0x80);
//        char x;
//        scanf("%s", &x);
}
 400a554:	0001883a 	nop
 400a558:	e037883a 	mov	sp,fp
 400a55c:	dfc00117 	ldw	ra,4(sp)
 400a560:	df000017 	ldw	fp,0(sp)
 400a564:	dec00204 	addi	sp,sp,8
 400a568:	f800283a 	ret

0400a56c <_GLOBAL__sub_I_rcode>:
 400a56c:	defffe04 	addi	sp,sp,-8
 400a570:	dfc00115 	stw	ra,4(sp)
 400a574:	df000015 	stw	fp,0(sp)
 400a578:	d839883a 	mov	fp,sp
 400a57c:	017fffd4 	movui	r5,65535
 400a580:	01000044 	movi	r4,1
 400a584:	400a5180 	call	400a518 <_Z41__static_initialization_and_destruction_0ii>
 400a588:	e037883a 	mov	sp,fp
 400a58c:	dfc00117 	ldw	ra,4(sp)
 400a590:	df000017 	ldw	fp,0(sp)
 400a594:	dec00204 	addi	sp,sp,8
 400a598:	f800283a 	ret

0400a59c <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
 400a59c:	defffe04 	addi	sp,sp,-8
 400a5a0:	df000115 	stw	fp,4(sp)
 400a5a4:	df000104 	addi	fp,sp,4
 400a5a8:	e13fff15 	stw	r4,-4(fp)
 400a5ac:	e0bfff17 	ldw	r2,-4(fp)
 400a5b0:	10800343 	ldbu	r2,13(r2)
 400a5b4:	e037883a 	mov	sp,fp
 400a5b8:	df000017 	ldw	fp,0(sp)
 400a5bc:	dec00104 	addi	sp,sp,4
 400a5c0:	f800283a 	ret

0400a5c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 400a5c4:	008100b4 	movhi	r2,1026
 400a5c8:	109ae904 	addi	r2,r2,27556
 400a5cc:	20800015 	stw	r2,0(r4)
 400a5d0:	400b39c1 	jmpi	400b39c <_ZN10__cxxabiv117__class_type_infoD1Ev>

0400a5d4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 400a5d4:	defffe04 	addi	sp,sp,-8
 400a5d8:	008100b4 	movhi	r2,1026
 400a5dc:	dc000015 	stw	r16,0(sp)
 400a5e0:	dfc00115 	stw	ra,4(sp)
 400a5e4:	109ae904 	addi	r2,r2,27556
 400a5e8:	20800015 	stw	r2,0(r4)
 400a5ec:	2021883a 	mov	r16,r4
 400a5f0:	400b39c0 	call	400b39c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 400a5f4:	8009883a 	mov	r4,r16
 400a5f8:	dfc00117 	ldw	ra,4(sp)
 400a5fc:	dc000017 	ldw	r16,0(sp)
 400a600:	dec00204 	addi	sp,sp,8
 400a604:	400b2c81 	jmpi	400b2c8 <_ZdlPv>

0400a608 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 400a608:	defff504 	addi	sp,sp,-44
 400a60c:	dc000115 	stw	r16,4(sp)
 400a610:	38800117 	ldw	r2,4(r7)
 400a614:	24000117 	ldw	r16,4(r4)
 400a618:	df000915 	stw	fp,36(sp)
 400a61c:	ddc00815 	stw	r23,32(sp)
 400a620:	dd800715 	stw	r22,28(sp)
 400a624:	dcc00415 	stw	r19,16(sp)
 400a628:	dc800315 	stw	r18,12(sp)
 400a62c:	dc400215 	stw	r17,8(sp)
 400a630:	dfc00a15 	stw	ra,40(sp)
 400a634:	dd400615 	stw	r21,24(sp)
 400a638:	dd000515 	stw	r20,20(sp)
 400a63c:	2823883a 	mov	r17,r5
 400a640:	3039883a 	mov	fp,r6
 400a644:	dcc00b17 	ldw	r19,44(sp)
 400a648:	ddc00c17 	ldw	r23,48(sp)
 400a64c:	dd800d17 	ldw	r22,52(sp)
 400a650:	dc800e17 	ldw	r18,56(sp)
 400a654:	80800b26 	beq	r16,r2,400a684 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
 400a658:	80c00007 	ldb	r3,0(r16)
 400a65c:	2029883a 	mov	r20,r4
 400a660:	01000a84 	movi	r4,42
 400a664:	382b883a 	mov	r21,r7
 400a668:	19001a26 	beq	r3,r4,400a6d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 400a66c:	100b883a 	mov	r5,r2
 400a670:	8009883a 	mov	r4,r16
 400a674:	d8c00015 	stw	r3,0(sp)
 400a678:	400f0700 	call	400f070 <strcmp>
 400a67c:	d8c00017 	ldw	r3,0(sp)
 400a680:	1000141e 	bne	r2,zero,400a6d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 400a684:	94c00015 	stw	r19,0(r18)
 400a688:	97000115 	stw	fp,4(r18)
 400a68c:	88002816 	blt	r17,zero,400a730 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
 400a690:	9c63883a 	add	r17,r19,r17
 400a694:	b4403226 	beq	r22,r17,400a760 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
 400a698:	00800044 	movi	r2,1
 400a69c:	90800315 	stw	r2,12(r18)
 400a6a0:	0005883a 	mov	r2,zero
 400a6a4:	dfc00a17 	ldw	ra,40(sp)
 400a6a8:	df000917 	ldw	fp,36(sp)
 400a6ac:	ddc00817 	ldw	r23,32(sp)
 400a6b0:	dd800717 	ldw	r22,28(sp)
 400a6b4:	dd400617 	ldw	r21,24(sp)
 400a6b8:	dd000517 	ldw	r20,20(sp)
 400a6bc:	dcc00417 	ldw	r19,16(sp)
 400a6c0:	dc800317 	ldw	r18,12(sp)
 400a6c4:	dc400217 	ldw	r17,8(sp)
 400a6c8:	dc000117 	ldw	r16,4(sp)
 400a6cc:	dec00b04 	addi	sp,sp,44
 400a6d0:	f800283a 	ret
 400a6d4:	9d801926 	beq	r19,r22,400a73c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 400a6d8:	a1000217 	ldw	r4,8(r20)
 400a6dc:	a80f883a 	mov	r7,r21
 400a6e0:	e00d883a 	mov	r6,fp
 400a6e4:	20800017 	ldw	r2,0(r4)
 400a6e8:	dc800e15 	stw	r18,56(sp)
 400a6ec:	dd800d15 	stw	r22,52(sp)
 400a6f0:	ddc00c15 	stw	r23,48(sp)
 400a6f4:	dcc00b15 	stw	r19,44(sp)
 400a6f8:	10800717 	ldw	r2,28(r2)
 400a6fc:	880b883a 	mov	r5,r17
 400a700:	dfc00a17 	ldw	ra,40(sp)
 400a704:	df000917 	ldw	fp,36(sp)
 400a708:	ddc00817 	ldw	r23,32(sp)
 400a70c:	dd800717 	ldw	r22,28(sp)
 400a710:	dd400617 	ldw	r21,24(sp)
 400a714:	dd000517 	ldw	r20,20(sp)
 400a718:	dcc00417 	ldw	r19,16(sp)
 400a71c:	dc800317 	ldw	r18,12(sp)
 400a720:	dc400217 	ldw	r17,8(sp)
 400a724:	dc000117 	ldw	r16,4(sp)
 400a728:	dec00b04 	addi	sp,sp,44
 400a72c:	1000683a 	jmp	r2
 400a730:	00bfff84 	movi	r2,-2
 400a734:	88bfda1e 	bne	r17,r2,400a6a0 <__alt_mem_onchip_memory2_0+0xfc009420>
 400a738:	003fd706 	br	400a698 <__alt_mem_onchip_memory2_0+0xfc009418>
 400a73c:	b9400117 	ldw	r5,4(r23)
 400a740:	81400526 	beq	r16,r5,400a758 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 400a744:	00800a84 	movi	r2,42
 400a748:	18bfe326 	beq	r3,r2,400a6d8 <__alt_mem_onchip_memory2_0+0xfc009458>
 400a74c:	8009883a 	mov	r4,r16
 400a750:	400f0700 	call	400f070 <strcmp>
 400a754:	103fe01e 	bne	r2,zero,400a6d8 <__alt_mem_onchip_memory2_0+0xfc009458>
 400a758:	97000215 	stw	fp,8(r18)
 400a75c:	003fd006 	br	400a6a0 <__alt_mem_onchip_memory2_0+0xfc009420>
 400a760:	00800184 	movi	r2,6
 400a764:	003fcd06 	br	400a69c <__alt_mem_onchip_memory2_0+0xfc00941c>

0400a768 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 400a768:	defffa04 	addi	sp,sp,-24
 400a76c:	dc000215 	stw	r16,8(sp)
 400a770:	dc000617 	ldw	r16,24(sp)
 400a774:	dc800415 	stw	r18,16(sp)
 400a778:	dc400315 	stw	r17,12(sp)
 400a77c:	dfc00515 	stw	ra,20(sp)
 400a780:	2023883a 	mov	r17,r4
 400a784:	2825883a 	mov	r18,r5
 400a788:	81800b26 	beq	r16,r6,400a7b8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
 400a78c:	89000217 	ldw	r4,8(r17)
 400a790:	900b883a 	mov	r5,r18
 400a794:	20800017 	ldw	r2,0(r4)
 400a798:	dc000615 	stw	r16,24(sp)
 400a79c:	10800817 	ldw	r2,32(r2)
 400a7a0:	dfc00517 	ldw	ra,20(sp)
 400a7a4:	dc800417 	ldw	r18,16(sp)
 400a7a8:	dc400317 	ldw	r17,12(sp)
 400a7ac:	dc000217 	ldw	r16,8(sp)
 400a7b0:	dec00604 	addi	sp,sp,24
 400a7b4:	1000683a 	jmp	r2
 400a7b8:	21000117 	ldw	r4,4(r4)
 400a7bc:	39400117 	ldw	r5,4(r7)
 400a7c0:	21400926 	beq	r4,r5,400a7e8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
 400a7c4:	20c00007 	ldb	r3,0(r4)
 400a7c8:	00800a84 	movi	r2,42
 400a7cc:	18bfef26 	beq	r3,r2,400a78c <__alt_mem_onchip_memory2_0+0xfc00950c>
 400a7d0:	d9800015 	stw	r6,0(sp)
 400a7d4:	d9c00115 	stw	r7,4(sp)
 400a7d8:	400f0700 	call	400f070 <strcmp>
 400a7dc:	d9800017 	ldw	r6,0(sp)
 400a7e0:	d9c00117 	ldw	r7,4(sp)
 400a7e4:	103fe91e 	bne	r2,zero,400a78c <__alt_mem_onchip_memory2_0+0xfc00950c>
 400a7e8:	00800184 	movi	r2,6
 400a7ec:	dfc00517 	ldw	ra,20(sp)
 400a7f0:	dc800417 	ldw	r18,16(sp)
 400a7f4:	dc400317 	ldw	r17,12(sp)
 400a7f8:	dc000217 	ldw	r16,8(sp)
 400a7fc:	dec00604 	addi	sp,sp,24
 400a800:	f800283a 	ret

0400a804 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 400a804:	defffb04 	addi	sp,sp,-20
 400a808:	dcc00315 	stw	r19,12(sp)
 400a80c:	dc800215 	stw	r18,8(sp)
 400a810:	dc400115 	stw	r17,4(sp)
 400a814:	dc000015 	stw	r16,0(sp)
 400a818:	dfc00415 	stw	ra,16(sp)
 400a81c:	2027883a 	mov	r19,r4
 400a820:	2821883a 	mov	r16,r5
 400a824:	3023883a 	mov	r17,r6
 400a828:	3825883a 	mov	r18,r7
 400a82c:	400b3e00 	call	400b3e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 400a830:	10c03fcc 	andi	r3,r2,255
 400a834:	18000726 	beq	r3,zero,400a854 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
 400a838:	dfc00417 	ldw	ra,16(sp)
 400a83c:	dcc00317 	ldw	r19,12(sp)
 400a840:	dc800217 	ldw	r18,8(sp)
 400a844:	dc400117 	ldw	r17,4(sp)
 400a848:	dc000017 	ldw	r16,0(sp)
 400a84c:	dec00504 	addi	sp,sp,20
 400a850:	f800283a 	ret
 400a854:	99000217 	ldw	r4,8(r19)
 400a858:	900f883a 	mov	r7,r18
 400a85c:	880d883a 	mov	r6,r17
 400a860:	20800017 	ldw	r2,0(r4)
 400a864:	800b883a 	mov	r5,r16
 400a868:	10800617 	ldw	r2,24(r2)
 400a86c:	dfc00417 	ldw	ra,16(sp)
 400a870:	dcc00317 	ldw	r19,12(sp)
 400a874:	dc800217 	ldw	r18,8(sp)
 400a878:	dc400117 	ldw	r17,4(sp)
 400a87c:	dc000017 	ldw	r16,0(sp)
 400a880:	dec00504 	addi	sp,sp,20
 400a884:	1000683a 	jmp	r2

0400a888 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 400a888:	008100b4 	movhi	r2,1026
 400a88c:	109b0104 	addi	r2,r2,27652
 400a890:	20800015 	stw	r2,0(r4)
 400a894:	400b39c1 	jmpi	400b39c <_ZN10__cxxabiv117__class_type_infoD1Ev>

0400a898 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 400a898:	defffe04 	addi	sp,sp,-8
 400a89c:	008100b4 	movhi	r2,1026
 400a8a0:	dc000015 	stw	r16,0(sp)
 400a8a4:	dfc00115 	stw	ra,4(sp)
 400a8a8:	109b0104 	addi	r2,r2,27652
 400a8ac:	20800015 	stw	r2,0(r4)
 400a8b0:	2021883a 	mov	r16,r4
 400a8b4:	400b39c0 	call	400b39c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 400a8b8:	8009883a 	mov	r4,r16
 400a8bc:	dfc00117 	ldw	ra,4(sp)
 400a8c0:	dc000017 	ldw	r16,0(sp)
 400a8c4:	dec00204 	addi	sp,sp,8
 400a8c8:	400b2c81 	jmpi	400b2c8 <_ZdlPv>

0400a8cc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 400a8cc:	defff504 	addi	sp,sp,-44
 400a8d0:	dc400215 	stw	r17,8(sp)
 400a8d4:	dc400b17 	ldw	r17,44(sp)
 400a8d8:	df000915 	stw	fp,36(sp)
 400a8dc:	ddc00815 	stw	r23,32(sp)
 400a8e0:	dd800715 	stw	r22,28(sp)
 400a8e4:	dc000115 	stw	r16,4(sp)
 400a8e8:	dfc00a15 	stw	ra,40(sp)
 400a8ec:	dd400615 	stw	r21,24(sp)
 400a8f0:	dd000515 	stw	r20,20(sp)
 400a8f4:	dcc00415 	stw	r19,16(sp)
 400a8f8:	dc800315 	stw	r18,12(sp)
 400a8fc:	3039883a 	mov	fp,r6
 400a900:	2021883a 	mov	r16,r4
 400a904:	282d883a 	mov	r22,r5
 400a908:	382f883a 	mov	r23,r7
 400a90c:	34402c26 	beq	r6,r17,400a9c0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
 400a910:	85000317 	ldw	r20,12(r16)
 400a914:	048000c4 	movi	r18,3
 400a918:	04ffff44 	movi	r19,-3
 400a91c:	a484983a 	sll	r2,r20,r18
 400a920:	b80f883a 	mov	r7,r23
 400a924:	b00b883a 	mov	r5,r22
 400a928:	10800304 	addi	r2,r2,12
 400a92c:	80a1883a 	add	r16,r16,r2
 400a930:	a0001626 	beq	r20,zero,400a98c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
 400a934:	81800017 	ldw	r6,0(r16)
 400a938:	a53fffc4 	addi	r20,r20,-1
 400a93c:	3080008c 	andi	r2,r6,2
 400a940:	3540004c 	andi	r21,r6,1
 400a944:	10000d26 	beq	r2,zero,400a97c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
 400a948:	300dd23a 	srai	r6,r6,8
 400a94c:	a8000426 	beq	r21,zero,400a960 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
 400a950:	b4c00a26 	beq	r22,r19,400a97c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
 400a954:	e0800017 	ldw	r2,0(fp)
 400a958:	118d883a 	add	r6,r2,r6
 400a95c:	31800017 	ldw	r6,0(r6)
 400a960:	813fff17 	ldw	r4,-4(r16)
 400a964:	e18d883a 	add	r6,fp,r6
 400a968:	20800017 	ldw	r2,0(r4)
 400a96c:	dc400015 	stw	r17,0(sp)
 400a970:	10800817 	ldw	r2,32(r2)
 400a974:	103ee83a 	callr	r2
 400a978:	90801b16 	blt	r18,r2,400a9e8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
 400a97c:	843ffe04 	addi	r16,r16,-8
 400a980:	b80f883a 	mov	r7,r23
 400a984:	b00b883a 	mov	r5,r22
 400a988:	a03fea1e 	bne	r20,zero,400a934 <__alt_mem_onchip_memory2_0+0xfc0096b4>
 400a98c:	00800044 	movi	r2,1
 400a990:	dfc00a17 	ldw	ra,40(sp)
 400a994:	df000917 	ldw	fp,36(sp)
 400a998:	ddc00817 	ldw	r23,32(sp)
 400a99c:	dd800717 	ldw	r22,28(sp)
 400a9a0:	dd400617 	ldw	r21,24(sp)
 400a9a4:	dd000517 	ldw	r20,20(sp)
 400a9a8:	dcc00417 	ldw	r19,16(sp)
 400a9ac:	dc800317 	ldw	r18,12(sp)
 400a9b0:	dc400217 	ldw	r17,8(sp)
 400a9b4:	dc000117 	ldw	r16,4(sp)
 400a9b8:	dec00b04 	addi	sp,sp,44
 400a9bc:	f800283a 	ret
 400a9c0:	21000117 	ldw	r4,4(r4)
 400a9c4:	39400117 	ldw	r5,4(r7)
 400a9c8:	21400526 	beq	r4,r5,400a9e0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
 400a9cc:	20c00007 	ldb	r3,0(r4)
 400a9d0:	00800a84 	movi	r2,42
 400a9d4:	18bfce26 	beq	r3,r2,400a910 <__alt_mem_onchip_memory2_0+0xfc009690>
 400a9d8:	400f0700 	call	400f070 <strcmp>
 400a9dc:	103fcc1e 	bne	r2,zero,400a910 <__alt_mem_onchip_memory2_0+0xfc009690>
 400a9e0:	00800184 	movi	r2,6
 400a9e4:	003fea06 	br	400a990 <__alt_mem_onchip_memory2_0+0xfc009710>
 400a9e8:	a83fe926 	beq	r21,zero,400a990 <__alt_mem_onchip_memory2_0+0xfc009710>
 400a9ec:	10800054 	ori	r2,r2,1
 400a9f0:	003fe706 	br	400a990 <__alt_mem_onchip_memory2_0+0xfc009710>

0400a9f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 400a9f4:	deffe804 	addi	sp,sp,-96
 400a9f8:	df001615 	stw	fp,88(sp)
 400a9fc:	df001b17 	ldw	fp,108(sp)
 400aa00:	ddc01515 	stw	r23,84(sp)
 400aa04:	dd001215 	stw	r20,72(sp)
 400aa08:	e0800417 	ldw	r2,16(fp)
 400aa0c:	dcc01115 	stw	r19,68(sp)
 400aa10:	dfc01715 	stw	ra,92(sp)
 400aa14:	dd801415 	stw	r22,80(sp)
 400aa18:	dd401315 	stw	r21,76(sp)
 400aa1c:	dc801015 	stw	r18,64(sp)
 400aa20:	dc400f15 	stw	r17,60(sp)
 400aa24:	dc000e15 	stw	r16,56(sp)
 400aa28:	d9000b15 	stw	r4,44(sp)
 400aa2c:	d9c00915 	stw	r7,36(sp)
 400aa30:	1080040c 	andi	r2,r2,16
 400aa34:	282f883a 	mov	r23,r5
 400aa38:	3027883a 	mov	r19,r6
 400aa3c:	dd001817 	ldw	r20,96(sp)
 400aa40:	10000226 	beq	r2,zero,400aa4c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
 400aa44:	20800217 	ldw	r2,8(r4)
 400aa48:	e0800415 	stw	r2,16(fp)
 400aa4c:	d8c01a17 	ldw	r3,104(sp)
 400aa50:	a0c0cb26 	beq	r20,r3,400ad80 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
 400aa54:	d8c00b17 	ldw	r3,44(sp)
 400aa58:	1c000117 	ldw	r16,4(r3)
 400aa5c:	d8c00917 	ldw	r3,36(sp)
 400aa60:	19400117 	ldw	r5,4(r3)
 400aa64:	2c000626 	beq	r5,r16,400aa80 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 400aa68:	80c00007 	ldb	r3,0(r16)
 400aa6c:	00800a84 	movi	r2,42
 400aa70:	18801b26 	beq	r3,r2,400aae0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 400aa74:	8009883a 	mov	r4,r16
 400aa78:	400f0700 	call	400f070 <strcmp>
 400aa7c:	1000181e 	bne	r2,zero,400aae0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 400aa80:	e5000015 	stw	r20,0(fp)
 400aa84:	e4c00115 	stw	r19,4(fp)
 400aa88:	b8010916 	blt	r23,zero,400aeb0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
 400aa8c:	d8c01a17 	ldw	r3,104(sp)
 400aa90:	a5d9883a 	add	r12,r20,r23
 400aa94:	1b014126 	beq	r3,r12,400af9c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
 400aa98:	00800044 	movi	r2,1
 400aa9c:	e0800315 	stw	r2,12(fp)
 400aaa0:	0005883a 	mov	r2,zero
 400aaa4:	dfc01717 	ldw	ra,92(sp)
 400aaa8:	df001617 	ldw	fp,88(sp)
 400aaac:	ddc01517 	ldw	r23,84(sp)
 400aab0:	dd801417 	ldw	r22,80(sp)
 400aab4:	dd401317 	ldw	r21,76(sp)
 400aab8:	dd001217 	ldw	r20,72(sp)
 400aabc:	dcc01117 	ldw	r19,68(sp)
 400aac0:	dc801017 	ldw	r18,64(sp)
 400aac4:	dc400f17 	ldw	r17,60(sp)
 400aac8:	dc000e17 	ldw	r16,56(sp)
 400aacc:	dec01804 	addi	sp,sp,96
 400aad0:	f800283a 	ret
 400aad4:	d8c00917 	ldw	r3,36(sp)
 400aad8:	18800117 	ldw	r2,4(r3)
 400aadc:	80bfe826 	beq	r16,r2,400aa80 <__alt_mem_onchip_memory2_0+0xfc009800>
 400aae0:	b800ef16 	blt	r23,zero,400aea0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
 400aae4:	d8c01a17 	ldw	r3,104(sp)
 400aae8:	1dedc83a 	sub	r22,r3,r23
 400aaec:	e005883a 	mov	r2,fp
 400aaf0:	00c00044 	movi	r3,1
 400aaf4:	b039883a 	mov	fp,r22
 400aaf8:	0021883a 	mov	r16,zero
 400aafc:	a02d883a 	mov	r22,r20
 400ab00:	d8000a45 	stb	zero,41(sp)
 400ab04:	d8c00a05 	stb	r3,40(sp)
 400ab08:	048000c4 	movi	r18,3
 400ab0c:	1029883a 	mov	r20,r2
 400ab10:	d8c00b17 	ldw	r3,44(sp)
 400ab14:	b805883a 	mov	r2,r23
 400ab18:	1ac00317 	ldw	r11,12(r3)
 400ab1c:	581490fa 	slli	r10,r11,3
 400ab20:	52800304 	addi	r10,r10,12
 400ab24:	1aab883a 	add	r21,r3,r10
 400ab28:	b007883a 	mov	r3,r22
 400ab2c:	582d883a 	mov	r22,r11
 400ab30:	a82f883a 	mov	r23,r21
 400ab34:	1823883a 	mov	r17,r3
 400ab38:	102b883a 	mov	r21,r2
 400ab3c:	b0005526 	beq	r22,zero,400ac94 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
 400ab40:	b8800017 	ldw	r2,0(r23)
 400ab44:	a1400417 	ldw	r5,16(r20)
 400ab48:	d8000415 	stw	zero,16(sp)
 400ab4c:	d8000515 	stw	zero,20(sp)
 400ab50:	d8000615 	stw	zero,24(sp)
 400ab54:	d8000715 	stw	zero,28(sp)
 400ab58:	d9400815 	stw	r5,32(sp)
 400ab5c:	1100004c 	andi	r4,r2,1
 400ab60:	1007d23a 	srai	r3,r2,8
 400ab64:	20007526 	beq	r4,zero,400ad3c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
 400ab68:	89000017 	ldw	r4,0(r17)
 400ab6c:	99800054 	ori	r6,r19,1
 400ab70:	20c7883a 	add	r3,r4,r3
 400ab74:	18c00017 	ldw	r3,0(r3)
 400ab78:	88c7883a 	add	r3,r17,r3
 400ab7c:	e0000326 	beq	fp,zero,400ab8c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
 400ab80:	d9c00a03 	ldbu	r7,40(sp)
 400ab84:	e0c9803a 	cmpltu	r4,fp,r3
 400ab88:	21c07226 	beq	r4,r7,400ad54 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
 400ab8c:	1080008c 	andi	r2,r2,2
 400ab90:	1000041e 	bne	r2,zero,400aba4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
 400ab94:	013fff84 	movi	r4,-2
 400ab98:	a9007126 	beq	r21,r4,400ad60 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
 400ab9c:	00bfff44 	movi	r2,-3
 400aba0:	308c703a 	and	r6,r6,r2
 400aba4:	b93fff17 	ldw	r4,-4(r23)
 400aba8:	d9400404 	addi	r5,sp,16
 400abac:	d9c00917 	ldw	r7,36(sp)
 400abb0:	20800017 	ldw	r2,0(r4)
 400abb4:	d9400315 	stw	r5,12(sp)
 400abb8:	d9401a17 	ldw	r5,104(sp)
 400abbc:	d8c00015 	stw	r3,0(sp)
 400abc0:	d9400215 	stw	r5,8(sp)
 400abc4:	d9401917 	ldw	r5,100(sp)
 400abc8:	d9400115 	stw	r5,4(sp)
 400abcc:	10800717 	ldw	r2,28(r2)
 400abd0:	a80b883a 	mov	r5,r21
 400abd4:	103ee83a 	callr	r2
 400abd8:	a1400217 	ldw	r5,8(r20)
 400abdc:	d9000617 	ldw	r4,24(sp)
 400abe0:	d8c00717 	ldw	r3,28(sp)
 400abe4:	2908b03a 	or	r4,r5,r4
 400abe8:	a1000215 	stw	r4,8(r20)
 400abec:	01400184 	movi	r5,6
 400abf0:	1940a426 	beq	r3,r5,400ae84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 400abf4:	01400084 	movi	r5,2
 400abf8:	1940a226 	beq	r3,r5,400ae84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 400abfc:	81403fcc 	andi	r5,r16,255
 400ac00:	a1800017 	ldw	r6,0(r20)
 400ac04:	28004f1e 	bne	r5,zero,400ad44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
 400ac08:	30007926 	beq	r6,zero,400adf0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
 400ac0c:	d9400417 	ldw	r5,16(sp)
 400ac10:	29806926 	beq	r5,r6,400adb8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
 400ac14:	28006d26 	beq	r5,zero,400adcc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
 400ac18:	a2800317 	ldw	r10,12(r20)
 400ac1c:	9100250e 	bge	r18,r4,400acb4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
 400ac20:	2100004c 	andi	r4,r4,1
 400ac24:	20000326 	beq	r4,zero,400ac34 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
 400ac28:	a0800417 	ldw	r2,16(r20)
 400ac2c:	1080008c 	andi	r2,r2,2
 400ac30:	1000201e 	bne	r2,zero,400acb4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
 400ac34:	50004d1e 	bne	r10,zero,400ad6c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
 400ac38:	18002626 	beq	r3,zero,400acd4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
 400ac3c:	02800044 	movi	r10,1
 400ac40:	181b883a 	mov	r13,r3
 400ac44:	1a84f03a 	xor	r2,r3,r10
 400ac48:	501f883a 	mov	r15,r10
 400ac4c:	90801f0e 	bge	r18,r2,400accc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
 400ac50:	90c0880e 	bge	r18,r3,400ae74 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
 400ac54:	d9400417 	ldw	r5,16(sp)
 400ac58:	1880008c 	andi	r2,r3,2
 400ac5c:	d9000517 	ldw	r4,20(sp)
 400ac60:	a1400015 	stw	r5,0(r20)
 400ac64:	0021883a 	mov	r16,zero
 400ac68:	a1000115 	stw	r4,4(r20)
 400ac6c:	a0c00315 	stw	r3,12(r20)
 400ac70:	10004f1e 	bne	r2,zero,400adb0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 400ac74:	6b40004c 	andi	r13,r13,1
 400ac78:	68004d26 	beq	r13,zero,400adb0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 400ac7c:	a1000217 	ldw	r4,8(r20)
 400ac80:	01400104 	movi	r5,4
 400ac84:	21408826 	beq	r4,r5,400aea8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400ac88:	b5bfffc4 	addi	r22,r22,-1
 400ac8c:	bdfffe04 	addi	r23,r23,-8
 400ac90:	b03fab1e 	bne	r22,zero,400ab40 <__alt_mem_onchip_memory2_0+0xfc0098c0>
 400ac94:	d8800a43 	ldbu	r2,41(sp)
 400ac98:	a82f883a 	mov	r23,r21
 400ac9c:	882d883a 	mov	r22,r17
 400aca0:	10008126 	beq	r2,zero,400aea8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400aca4:	dd400a03 	ldbu	r21,40(sp)
 400aca8:	a8007f26 	beq	r21,zero,400aea8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400acac:	d8000a05 	stb	zero,40(sp)
 400acb0:	003f9706 	br	400ab10 <__alt_mem_onchip_memory2_0+0xfc009890>
 400acb4:	501f883a 	mov	r15,r10
 400acb8:	181b883a 	mov	r13,r3
 400acbc:	02800b0e 	bge	zero,r10,400acec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
 400acc0:	00c0570e 	bge	zero,r3,400ae20 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
 400acc4:	1a84f03a 	xor	r2,r3,r10
 400acc8:	90bfe116 	blt	r18,r2,400ac50 <__alt_mem_onchip_memory2_0+0xfc0099d0>
 400accc:	1bc6703a 	and	r3,r3,r15
 400acd0:	90c09916 	blt	r18,r3,400af38 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
 400acd4:	01000044 	movi	r4,1
 400acd8:	a1000315 	stw	r4,12(r20)
 400acdc:	a0000015 	stw	zero,0(r20)
 400ace0:	a1000217 	ldw	r4,8(r20)
 400ace4:	04000044 	movi	r16,1
 400ace8:	003fe506 	br	400ac80 <__alt_mem_onchip_memory2_0+0xfc009a00>
 400acec:	90c00a0e 	bge	r18,r3,400ad18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 400acf0:	1880004c 	andi	r2,r3,1
 400acf4:	10000426 	beq	r2,zero,400ad08 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
 400acf8:	d9000b17 	ldw	r4,44(sp)
 400acfc:	20800217 	ldw	r2,8(r4)
 400ad00:	1080008c 	andi	r2,r2,2
 400ad04:	1000041e 	bne	r2,zero,400ad18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 400ad08:	1880005c 	xori	r2,r3,1
 400ad0c:	90bfd216 	blt	r18,r2,400ac58 <__alt_mem_onchip_memory2_0+0xfc0099d8>
 400ad10:	03c00044 	movi	r15,1
 400ad14:	003fed06 	br	400accc <__alt_mem_onchip_memory2_0+0xfc009a4c>
 400ad18:	a8006e16 	blt	r21,zero,400aed4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
 400ad1c:	d8801a17 	ldw	r2,104(sp)
 400ad20:	354d883a 	add	r6,r6,r21
 400ad24:	11805026 	beq	r2,r6,400ae68 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
 400ad28:	00c0a50e 	bge	zero,r3,400afc0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
 400ad2c:	03c00044 	movi	r15,1
 400ad30:	1bc4f03a 	xor	r2,r3,r15
 400ad34:	7815883a 	mov	r10,r15
 400ad38:	003fc406 	br	400ac4c <__alt_mem_onchip_memory2_0+0xfc0099cc>
 400ad3c:	980d883a 	mov	r6,r19
 400ad40:	003f8d06 	br	400ab78 <__alt_mem_onchip_memory2_0+0xfc0098f8>
 400ad44:	303fb11e 	bne	r6,zero,400ac0c <__alt_mem_onchip_memory2_0+0xfc00998c>
 400ad48:	d9400417 	ldw	r5,16(sp)
 400ad4c:	283fb21e 	bne	r5,zero,400ac18 <__alt_mem_onchip_memory2_0+0xfc009998>
 400ad50:	003fcb06 	br	400ac80 <__alt_mem_onchip_memory2_0+0xfc009a00>
 400ad54:	00c00044 	movi	r3,1
 400ad58:	d8c00a45 	stb	r3,41(sp)
 400ad5c:	003fca06 	br	400ac88 <__alt_mem_onchip_memory2_0+0xfc009a08>
 400ad60:	294000cc 	andi	r5,r5,3
 400ad64:	283fc826 	beq	r5,zero,400ac88 <__alt_mem_onchip_memory2_0+0xfc009a08>
 400ad68:	003f8c06 	br	400ab9c <__alt_mem_onchip_memory2_0+0xfc00991c>
 400ad6c:	18001a26 	beq	r3,zero,400add8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
 400ad70:	181b883a 	mov	r13,r3
 400ad74:	501f883a 	mov	r15,r10
 400ad78:	50c4f03a 	xor	r2,r10,r3
 400ad7c:	003fb306 	br	400ac4c <__alt_mem_onchip_memory2_0+0xfc0099cc>
 400ad80:	d8c00b17 	ldw	r3,44(sp)
 400ad84:	1c000117 	ldw	r16,4(r3)
 400ad88:	d8c01917 	ldw	r3,100(sp)
 400ad8c:	19400117 	ldw	r5,4(r3)
 400ad90:	81400626 	beq	r16,r5,400adac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
 400ad94:	80c00007 	ldb	r3,0(r16)
 400ad98:	00800a84 	movi	r2,42
 400ad9c:	18bf4d26 	beq	r3,r2,400aad4 <__alt_mem_onchip_memory2_0+0xfc009854>
 400ada0:	8009883a 	mov	r4,r16
 400ada4:	400f0700 	call	400f070 <strcmp>
 400ada8:	10005c1e 	bne	r2,zero,400af1c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
 400adac:	e4c00215 	stw	r19,8(fp)
 400adb0:	0005883a 	mov	r2,zero
 400adb4:	003f3b06 	br	400aaa4 <__alt_mem_onchip_memory2_0+0xfc009824>
 400adb8:	a0c00117 	ldw	r3,4(r20)
 400adbc:	d8800517 	ldw	r2,20(sp)
 400adc0:	1884b03a 	or	r2,r3,r2
 400adc4:	a0800115 	stw	r2,4(r20)
 400adc8:	003fad06 	br	400ac80 <__alt_mem_onchip_memory2_0+0xfc009a00>
 400adcc:	10803fcc 	andi	r2,r2,255
 400add0:	103f911e 	bne	r2,zero,400ac18 <__alt_mem_onchip_memory2_0+0xfc009998>
 400add4:	003faa06 	br	400ac80 <__alt_mem_onchip_memory2_0+0xfc009a00>
 400add8:	501b883a 	mov	r13,r10
 400addc:	5080005c 	xori	r2,r10,1
 400ade0:	5007883a 	mov	r3,r10
 400ade4:	90bfbb0e 	bge	r18,r2,400acd4 <__alt_mem_onchip_memory2_0+0xfc009a54>
 400ade8:	6880008c 	andi	r2,r13,2
 400adec:	003f9f06 	br	400ac6c <__alt_mem_onchip_memory2_0+0xfc0099ec>
 400adf0:	d8c00417 	ldw	r3,16(sp)
 400adf4:	d9400517 	ldw	r5,20(sp)
 400adf8:	a0c00015 	stw	r3,0(r20)
 400adfc:	a1400115 	stw	r5,4(r20)
 400ae00:	18000526 	beq	r3,zero,400ae18 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
 400ae04:	20001626 	beq	r4,zero,400ae60 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
 400ae08:	d9400b17 	ldw	r5,44(sp)
 400ae0c:	28c00217 	ldw	r3,8(r5)
 400ae10:	18c0004c 	andi	r3,r3,1
 400ae14:	183f2326 	beq	r3,zero,400aaa4 <__alt_mem_onchip_memory2_0+0xfc009824>
 400ae18:	1021883a 	mov	r16,r2
 400ae1c:	003f9806 	br	400ac80 <__alt_mem_onchip_memory2_0+0xfc009a00>
 400ae20:	9280060e 	bge	r18,r10,400ae3c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
 400ae24:	5080004c 	andi	r2,r10,1
 400ae28:	10002426 	beq	r2,zero,400aebc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
 400ae2c:	d8c00b17 	ldw	r3,44(sp)
 400ae30:	18800217 	ldw	r2,8(r3)
 400ae34:	1080008c 	andi	r2,r2,2
 400ae38:	10003c26 	beq	r2,zero,400af2c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
 400ae3c:	d9400417 	ldw	r5,16(sp)
 400ae40:	a8004216 	blt	r21,zero,400af4c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
 400ae44:	d8c01a17 	ldw	r3,104(sp)
 400ae48:	2d45883a 	add	r2,r5,r21
 400ae4c:	18805726 	beq	r3,r2,400afac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
 400ae50:	7880005c 	xori	r2,r15,1
 400ae54:	781b883a 	mov	r13,r15
 400ae58:	5007883a 	mov	r3,r10
 400ae5c:	003fe106 	br	400ade4 <__alt_mem_onchip_memory2_0+0xfc009b64>
 400ae60:	1021883a 	mov	r16,r2
 400ae64:	003f8806 	br	400ac88 <__alt_mem_onchip_memory2_0+0xfc009a08>
 400ae68:	03c00184 	movi	r15,6
 400ae6c:	00ffb016 	blt	zero,r3,400ad30 <__alt_mem_onchip_memory2_0+0xfc009ab0>
 400ae70:	7815883a 	mov	r10,r15
 400ae74:	7880008c 	andi	r2,r15,2
 400ae78:	781b883a 	mov	r13,r15
 400ae7c:	5007883a 	mov	r3,r10
 400ae80:	003f7a06 	br	400ac6c <__alt_mem_onchip_memory2_0+0xfc0099ec>
 400ae84:	a039883a 	mov	fp,r20
 400ae88:	e0c00315 	stw	r3,12(fp)
 400ae8c:	d8c00417 	ldw	r3,16(sp)
 400ae90:	a0c00015 	stw	r3,0(r20)
 400ae94:	d8c00517 	ldw	r3,20(sp)
 400ae98:	a0c00115 	stw	r3,4(r20)
 400ae9c:	003f0106 	br	400aaa4 <__alt_mem_onchip_memory2_0+0xfc009824>
 400aea0:	002d883a 	mov	r22,zero
 400aea4:	003f1106 	br	400aaec <__alt_mem_onchip_memory2_0+0xfc00986c>
 400aea8:	8005883a 	mov	r2,r16
 400aeac:	003efd06 	br	400aaa4 <__alt_mem_onchip_memory2_0+0xfc009824>
 400aeb0:	00bfff84 	movi	r2,-2
 400aeb4:	b8bfbe1e 	bne	r23,r2,400adb0 <__alt_mem_onchip_memory2_0+0xfc009b30>
 400aeb8:	003ef706 	br	400aa98 <__alt_mem_onchip_memory2_0+0xfc009818>
 400aebc:	5080005c 	xori	r2,r10,1
 400aec0:	90bf840e 	bge	r18,r2,400acd4 <__alt_mem_onchip_memory2_0+0xfc009a54>
 400aec4:	501b883a 	mov	r13,r10
 400aec8:	5080008c 	andi	r2,r10,2
 400aecc:	5007883a 	mov	r3,r10
 400aed0:	003f6606 	br	400ac6c <__alt_mem_onchip_memory2_0+0xfc0099ec>
 400aed4:	013fff84 	movi	r4,-2
 400aed8:	a9003226 	beq	r21,r4,400afa4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
 400aedc:	d9400917 	ldw	r5,36(sp)
 400aee0:	d9001a17 	ldw	r4,104(sp)
 400aee4:	d9c01917 	ldw	r7,100(sp)
 400aee8:	28800017 	ldw	r2,0(r5)
 400aeec:	d9000015 	stw	r4,0(sp)
 400aef0:	d9000917 	ldw	r4,36(sp)
 400aef4:	10800817 	ldw	r2,32(r2)
 400aef8:	a80b883a 	mov	r5,r21
 400aefc:	d8c00d15 	stw	r3,52(sp)
 400af00:	db400c15 	stw	r13,48(sp)
 400af04:	103ee83a 	callr	r2
 400af08:	1015883a 	mov	r10,r2
 400af0c:	101f883a 	mov	r15,r2
 400af10:	db400c17 	ldw	r13,48(sp)
 400af14:	d8c00d17 	ldw	r3,52(sp)
 400af18:	003f6906 	br	400acc0 <__alt_mem_onchip_memory2_0+0xfc009a40>
 400af1c:	d8c00917 	ldw	r3,36(sp)
 400af20:	19400117 	ldw	r5,4(r3)
 400af24:	817ed31e 	bne	r16,r5,400aa74 <__alt_mem_onchip_memory2_0+0xfc0097f4>
 400af28:	003ed506 	br	400aa80 <__alt_mem_onchip_memory2_0+0xfc009800>
 400af2c:	5080005c 	xori	r2,r10,1
 400af30:	90bfe416 	blt	r18,r2,400aec4 <__alt_mem_onchip_memory2_0+0xfc009c44>
 400af34:	003f6706 	br	400acd4 <__alt_mem_onchip_memory2_0+0xfc009a54>
 400af38:	00800084 	movi	r2,2
 400af3c:	a0800315 	stw	r2,12(r20)
 400af40:	a0000015 	stw	zero,0(r20)
 400af44:	00800044 	movi	r2,1
 400af48:	003ed606 	br	400aaa4 <__alt_mem_onchip_memory2_0+0xfc009824>
 400af4c:	013fff84 	movi	r4,-2
 400af50:	a9002526 	beq	r21,r4,400afe8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
 400af54:	d8c00917 	ldw	r3,36(sp)
 400af58:	d9c01917 	ldw	r7,100(sp)
 400af5c:	d9000917 	ldw	r4,36(sp)
 400af60:	18800017 	ldw	r2,0(r3)
 400af64:	d8c01a17 	ldw	r3,104(sp)
 400af68:	280d883a 	mov	r6,r5
 400af6c:	a80b883a 	mov	r5,r21
 400af70:	d8c00015 	stw	r3,0(sp)
 400af74:	10800817 	ldw	r2,32(r2)
 400af78:	da800c15 	stw	r10,48(sp)
 400af7c:	dbc00d15 	stw	r15,52(sp)
 400af80:	103ee83a 	callr	r2
 400af84:	da800c17 	ldw	r10,48(sp)
 400af88:	1007883a 	mov	r3,r2
 400af8c:	101b883a 	mov	r13,r2
 400af90:	dbc00d17 	ldw	r15,52(sp)
 400af94:	1284f03a 	xor	r2,r2,r10
 400af98:	003f2c06 	br	400ac4c <__alt_mem_onchip_memory2_0+0xfc0099cc>
 400af9c:	00800184 	movi	r2,6
 400afa0:	003ebe06 	br	400aa9c <__alt_mem_onchip_memory2_0+0xfc00981c>
 400afa4:	00ff4b0e 	bge	zero,r3,400acd4 <__alt_mem_onchip_memory2_0+0xfc009a54>
 400afa8:	003f6006 	br	400ad2c <__alt_mem_onchip_memory2_0+0xfc009aac>
 400afac:	5080019c 	xori	r2,r10,6
 400afb0:	90800916 	blt	r18,r2,400afd8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
 400afb4:	50c0018c 	andi	r3,r10,6
 400afb8:	90ff460e 	bge	r18,r3,400acd4 <__alt_mem_onchip_memory2_0+0xfc009a54>
 400afbc:	003fde06 	br	400af38 <__alt_mem_onchip_memory2_0+0xfc009cb8>
 400afc0:	d8c01a17 	ldw	r3,104(sp)
 400afc4:	2d45883a 	add	r2,r5,r21
 400afc8:	18800326 	beq	r3,r2,400afd8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
 400afcc:	02800044 	movi	r10,1
 400afd0:	501f883a 	mov	r15,r10
 400afd4:	003f9e06 	br	400ae50 <__alt_mem_onchip_memory2_0+0xfc009bd0>
 400afd8:	03400184 	movi	r13,6
 400afdc:	00800084 	movi	r2,2
 400afe0:	6807883a 	mov	r3,r13
 400afe4:	003f1d06 	br	400ac5c <__alt_mem_onchip_memory2_0+0xfc0099dc>
 400afe8:	501b883a 	mov	r13,r10
 400afec:	5080005c 	xori	r2,r10,1
 400aff0:	5007883a 	mov	r3,r10
 400aff4:	003f7b06 	br	400ade4 <__alt_mem_onchip_memory2_0+0xfc009b64>

0400aff8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 400aff8:	deffef04 	addi	sp,sp,-68
 400affc:	ddc00e15 	stw	r23,56(sp)
 400b000:	dd000b15 	stw	r20,44(sp)
 400b004:	dc400815 	stw	r17,32(sp)
 400b008:	3029883a 	mov	r20,r6
 400b00c:	dfc01015 	stw	ra,64(sp)
 400b010:	df000f15 	stw	fp,60(sp)
 400b014:	dd800d15 	stw	r22,52(sp)
 400b018:	dd400c15 	stw	r21,48(sp)
 400b01c:	dcc00a15 	stw	r19,40(sp)
 400b020:	dc800915 	stw	r18,36(sp)
 400b024:	dc000715 	stw	r16,28(sp)
 400b028:	d9000515 	stw	r4,20(sp)
 400b02c:	2823883a 	mov	r17,r5
 400b030:	382f883a 	mov	r23,r7
 400b034:	400b3e00 	call	400b3e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 400b038:	100d883a 	mov	r6,r2
 400b03c:	10803fcc 	andi	r2,r2,255
 400b040:	1000441e 	bne	r2,zero,400b154 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
 400b044:	bc000217 	ldw	r16,8(r23)
 400b048:	8080040c 	andi	r2,r16,16
 400b04c:	10000226 	beq	r2,zero,400b058 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
 400b050:	d8c00517 	ldw	r3,20(sp)
 400b054:	1c000217 	ldw	r16,8(r3)
 400b058:	d8c00517 	ldw	r3,20(sp)
 400b05c:	d8800517 	ldw	r2,20(sp)
 400b060:	1f000317 	ldw	fp,12(r3)
 400b064:	e01090fa 	slli	r8,fp,3
 400b068:	40c00304 	addi	r3,r8,12
 400b06c:	10ed883a 	add	r22,r2,r3
 400b070:	80c0004c 	andi	r3,r16,1
 400b074:	42000204 	addi	r8,r8,8
 400b078:	d8c00415 	stw	r3,16(sp)
 400b07c:	122b883a 	add	r21,r2,r8
 400b080:	e0003226 	beq	fp,zero,400b14c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
 400b084:	b1800017 	ldw	r6,0(r22)
 400b088:	d8000015 	stw	zero,0(sp)
 400b08c:	d8000115 	stw	zero,4(sp)
 400b090:	dc000215 	stw	r16,8(sp)
 400b094:	d8000315 	stw	zero,12(sp)
 400b098:	34c0008c 	andi	r19,r6,2
 400b09c:	3480004c 	andi	r18,r6,1
 400b0a0:	9800021e 	bne	r19,zero,400b0ac <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
 400b0a4:	d8c00417 	ldw	r3,16(sp)
 400b0a8:	18002426 	beq	r3,zero,400b13c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
 400b0ac:	a0003626 	beq	r20,zero,400b188 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
 400b0b0:	300dd23a 	srai	r6,r6,8
 400b0b4:	90000326 	beq	r18,zero,400b0c4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 400b0b8:	a0800017 	ldw	r2,0(r20)
 400b0bc:	118d883a 	add	r6,r2,r6
 400b0c0:	31800017 	ldw	r6,0(r6)
 400b0c4:	a18d883a 	add	r6,r20,r6
 400b0c8:	a9000017 	ldw	r4,0(r21)
 400b0cc:	d80f883a 	mov	r7,sp
 400b0d0:	880b883a 	mov	r5,r17
 400b0d4:	20800017 	ldw	r2,0(r4)
 400b0d8:	10800617 	ldw	r2,24(r2)
 400b0dc:	103ee83a 	callr	r2
 400b0e0:	100d883a 	mov	r6,r2
 400b0e4:	10803fcc 	andi	r2,r2,255
 400b0e8:	10001426 	beq	r2,zero,400b13c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
 400b0ec:	d8800317 	ldw	r2,12(sp)
 400b0f0:	00c00204 	movi	r3,8
 400b0f4:	10c02626 	beq	r2,r3,400b190 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
 400b0f8:	d8800117 	ldw	r2,4(sp)
 400b0fc:	00c000c4 	movi	r3,3
 400b100:	1880040e 	bge	r3,r2,400b114 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 400b104:	9800031e 	bne	r19,zero,400b114 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 400b108:	00ffff44 	movi	r3,-3
 400b10c:	10c4703a 	and	r2,r2,r3
 400b110:	d8800115 	stw	r2,4(sp)
 400b114:	b9400317 	ldw	r5,12(r23)
 400b118:	28002126 	beq	r5,zero,400b1a0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
 400b11c:	b8800017 	ldw	r2,0(r23)
 400b120:	d9000017 	ldw	r4,0(sp)
 400b124:	11004d1e 	bne	r2,r4,400b25c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
 400b128:	10003126 	beq	r2,zero,400b1f0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
 400b12c:	b9000117 	ldw	r4,4(r23)
 400b130:	d8800117 	ldw	r2,4(sp)
 400b134:	2084b03a 	or	r2,r4,r2
 400b138:	b8800115 	stw	r2,4(r23)
 400b13c:	e73fffc4 	addi	fp,fp,-1
 400b140:	b5bffe04 	addi	r22,r22,-8
 400b144:	ad7ffe04 	addi	r21,r21,-8
 400b148:	e03fce1e 	bne	fp,zero,400b084 <__alt_mem_onchip_memory2_0+0xfc009e04>
 400b14c:	b9800117 	ldw	r6,4(r23)
 400b150:	300cc03a 	cmpne	r6,r6,zero
 400b154:	3005883a 	mov	r2,r6
 400b158:	dfc01017 	ldw	ra,64(sp)
 400b15c:	df000f17 	ldw	fp,60(sp)
 400b160:	ddc00e17 	ldw	r23,56(sp)
 400b164:	dd800d17 	ldw	r22,52(sp)
 400b168:	dd400c17 	ldw	r21,48(sp)
 400b16c:	dd000b17 	ldw	r20,44(sp)
 400b170:	dcc00a17 	ldw	r19,40(sp)
 400b174:	dc800917 	ldw	r18,36(sp)
 400b178:	dc400817 	ldw	r17,32(sp)
 400b17c:	dc000717 	ldw	r16,28(sp)
 400b180:	dec01104 	addi	sp,sp,68
 400b184:	f800283a 	ret
 400b188:	000d883a 	mov	r6,zero
 400b18c:	003fce06 	br	400b0c8 <__alt_mem_onchip_memory2_0+0xfc009e48>
 400b190:	903fd926 	beq	r18,zero,400b0f8 <__alt_mem_onchip_memory2_0+0xfc009e78>
 400b194:	a8800017 	ldw	r2,0(r21)
 400b198:	d8800315 	stw	r2,12(sp)
 400b19c:	003fd606 	br	400b0f8 <__alt_mem_onchip_memory2_0+0xfc009e78>
 400b1a0:	d9000017 	ldw	r4,0(sp)
 400b1a4:	d8800117 	ldw	r2,4(sp)
 400b1a8:	00c000c4 	movi	r3,3
 400b1ac:	b9000015 	stw	r4,0(r23)
 400b1b0:	d9000217 	ldw	r4,8(sp)
 400b1b4:	b8800115 	stw	r2,4(r23)
 400b1b8:	b9000215 	stw	r4,8(r23)
 400b1bc:	d9000317 	ldw	r4,12(sp)
 400b1c0:	b9000315 	stw	r4,12(r23)
 400b1c4:	18bfe30e 	bge	r3,r2,400b154 <__alt_mem_onchip_memory2_0+0xfc009ed4>
 400b1c8:	1100008c 	andi	r4,r2,2
 400b1cc:	20001926 	beq	r4,zero,400b234 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
 400b1d0:	d8c00517 	ldw	r3,20(sp)
 400b1d4:	18800217 	ldw	r2,8(r3)
 400b1d8:	1080004c 	andi	r2,r2,1
 400b1dc:	103fdd26 	beq	r2,zero,400b154 <__alt_mem_onchip_memory2_0+0xfc009ed4>
 400b1e0:	e73fffc4 	addi	fp,fp,-1
 400b1e4:	b5bffe04 	addi	r22,r22,-8
 400b1e8:	ad7ffe04 	addi	r21,r21,-8
 400b1ec:	003fd606 	br	400b148 <__alt_mem_onchip_memory2_0+0xfc009ec8>
 400b1f0:	d8800317 	ldw	r2,12(sp)
 400b1f4:	00c00204 	movi	r3,8
 400b1f8:	10c00b26 	beq	r2,r3,400b228 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 400b1fc:	28c00a26 	beq	r5,r3,400b228 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 400b200:	11000117 	ldw	r4,4(r2)
 400b204:	29400117 	ldw	r5,4(r5)
 400b208:	217fc826 	beq	r4,r5,400b12c <__alt_mem_onchip_memory2_0+0xfc009eac>
 400b20c:	20800007 	ldb	r2,0(r4)
 400b210:	00c00a84 	movi	r3,42
 400b214:	10c00426 	beq	r2,r3,400b228 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 400b218:	d9800615 	stw	r6,24(sp)
 400b21c:	400f0700 	call	400f070 <strcmp>
 400b220:	d9800617 	ldw	r6,24(sp)
 400b224:	103fc126 	beq	r2,zero,400b12c <__alt_mem_onchip_memory2_0+0xfc009eac>
 400b228:	00800084 	movi	r2,2
 400b22c:	b8800115 	stw	r2,4(r23)
 400b230:	003fc806 	br	400b154 <__alt_mem_onchip_memory2_0+0xfc009ed4>
 400b234:	1080004c 	andi	r2,r2,1
 400b238:	103fc626 	beq	r2,zero,400b154 <__alt_mem_onchip_memory2_0+0xfc009ed4>
 400b23c:	d8c00517 	ldw	r3,20(sp)
 400b240:	18800217 	ldw	r2,8(r3)
 400b244:	1080008c 	andi	r2,r2,2
 400b248:	103fc226 	beq	r2,zero,400b154 <__alt_mem_onchip_memory2_0+0xfc009ed4>
 400b24c:	e73fffc4 	addi	fp,fp,-1
 400b250:	b5bffe04 	addi	r22,r22,-8
 400b254:	ad7ffe04 	addi	r21,r21,-8
 400b258:	003fbb06 	br	400b148 <__alt_mem_onchip_memory2_0+0xfc009ec8>
 400b25c:	00800084 	movi	r2,2
 400b260:	b8000015 	stw	zero,0(r23)
 400b264:	b8800115 	stw	r2,4(r23)
 400b268:	003fba06 	br	400b154 <__alt_mem_onchip_memory2_0+0xfc009ed4>

0400b26c <_ZNSt9type_infoD1Ev>:
 400b26c:	f800283a 	ret

0400b270 <_ZNKSt9type_info14__is_pointer_pEv>:
 400b270:	0005883a 	mov	r2,zero
 400b274:	f800283a 	ret

0400b278 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 400b278:	0005883a 	mov	r2,zero
 400b27c:	f800283a 	ret

0400b280 <_ZNSt9type_infoD0Ev>:
 400b280:	400b2c81 	jmpi	400b2c8 <_ZdlPv>

0400b284 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 400b284:	21000117 	ldw	r4,4(r4)
 400b288:	29400117 	ldw	r5,4(r5)
 400b28c:	21400c26 	beq	r4,r5,400b2c0 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
 400b290:	20c00007 	ldb	r3,0(r4)
 400b294:	00800a84 	movi	r2,42
 400b298:	18800726 	beq	r3,r2,400b2b8 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
 400b29c:	deffff04 	addi	sp,sp,-4
 400b2a0:	dfc00015 	stw	ra,0(sp)
 400b2a4:	400f0700 	call	400f070 <strcmp>
 400b2a8:	1005003a 	cmpeq	r2,r2,zero
 400b2ac:	dfc00017 	ldw	ra,0(sp)
 400b2b0:	dec00104 	addi	sp,sp,4
 400b2b4:	f800283a 	ret
 400b2b8:	0005883a 	mov	r2,zero
 400b2bc:	f800283a 	ret
 400b2c0:	00800044 	movi	r2,1
 400b2c4:	f800283a 	ret

0400b2c8 <_ZdlPv>:
 400b2c8:	400e1281 	jmpi	400e128 <free>

0400b2cc <__cxa_pure_virtual>:
 400b2cc:	014100b4 	movhi	r5,1026
 400b2d0:	deffff04 	addi	sp,sp,-4
 400b2d4:	295b1604 	addi	r5,r5,27736
 400b2d8:	018006c4 	movi	r6,27
 400b2dc:	01000084 	movi	r4,2
 400b2e0:	dfc00015 	stw	ra,0(sp)
 400b2e4:	401be080 	call	401be08 <write>
 400b2e8:	400b6940 	call	400b694 <_ZSt9terminatev>

0400b2ec <__cxa_deleted_virtual>:
 400b2ec:	014100b4 	movhi	r5,1026
 400b2f0:	deffff04 	addi	sp,sp,-4
 400b2f4:	295b1d04 	addi	r5,r5,27764
 400b2f8:	01800784 	movi	r6,30
 400b2fc:	01000084 	movi	r4,2
 400b300:	dfc00015 	stw	ra,0(sp)
 400b304:	401be080 	call	401be08 <write>
 400b308:	400b6940 	call	400b694 <_ZSt9terminatev>

0400b30c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 400b30c:	20800017 	ldw	r2,0(r4)
 400b310:	defffa04 	addi	sp,sp,-24
 400b314:	dc000415 	stw	r16,16(sp)
 400b318:	10800617 	ldw	r2,24(r2)
 400b31c:	3021883a 	mov	r16,r6
 400b320:	31800017 	ldw	r6,0(r6)
 400b324:	00c00404 	movi	r3,16
 400b328:	d8c00215 	stw	r3,8(sp)
 400b32c:	dfc00515 	stw	ra,20(sp)
 400b330:	d8000015 	stw	zero,0(sp)
 400b334:	d8000115 	stw	zero,4(sp)
 400b338:	d8000315 	stw	zero,12(sp)
 400b33c:	d80f883a 	mov	r7,sp
 400b340:	103ee83a 	callr	r2
 400b344:	d8800117 	ldw	r2,4(sp)
 400b348:	00c00184 	movi	r3,6
 400b34c:	1080018c 	andi	r2,r2,6
 400b350:	10c00526 	beq	r2,r3,400b368 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
 400b354:	0005883a 	mov	r2,zero
 400b358:	dfc00517 	ldw	ra,20(sp)
 400b35c:	dc000417 	ldw	r16,16(sp)
 400b360:	dec00604 	addi	sp,sp,24
 400b364:	f800283a 	ret
 400b368:	d8c00017 	ldw	r3,0(sp)
 400b36c:	00800044 	movi	r2,1
 400b370:	80c00015 	stw	r3,0(r16)
 400b374:	dfc00517 	ldw	ra,20(sp)
 400b378:	dc000417 	ldw	r16,16(sp)
 400b37c:	dec00604 	addi	sp,sp,24
 400b380:	f800283a 	ret

0400b384 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 400b384:	d8800017 	ldw	r2,0(sp)
 400b388:	11800226 	beq	r2,r6,400b394 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
 400b38c:	00800044 	movi	r2,1
 400b390:	f800283a 	ret
 400b394:	00800184 	movi	r2,6
 400b398:	f800283a 	ret

0400b39c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 400b39c:	008100b4 	movhi	r2,1026
 400b3a0:	109b3304 	addi	r2,r2,27852
 400b3a4:	20800015 	stw	r2,0(r4)
 400b3a8:	400b26c1 	jmpi	400b26c <_ZNSt9type_infoD1Ev>

0400b3ac <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 400b3ac:	defffe04 	addi	sp,sp,-8
 400b3b0:	008100b4 	movhi	r2,1026
 400b3b4:	dc000015 	stw	r16,0(sp)
 400b3b8:	dfc00115 	stw	ra,4(sp)
 400b3bc:	109b3304 	addi	r2,r2,27852
 400b3c0:	20800015 	stw	r2,0(r4)
 400b3c4:	2021883a 	mov	r16,r4
 400b3c8:	400b26c0 	call	400b26c <_ZNSt9type_infoD1Ev>
 400b3cc:	8009883a 	mov	r4,r16
 400b3d0:	dfc00117 	ldw	ra,4(sp)
 400b3d4:	dc000017 	ldw	r16,0(sp)
 400b3d8:	dec00204 	addi	sp,sp,8
 400b3dc:	400b2c81 	jmpi	400b2c8 <_ZdlPv>

0400b3e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 400b3e0:	21000117 	ldw	r4,4(r4)
 400b3e4:	29400117 	ldw	r5,4(r5)
 400b3e8:	defffd04 	addi	sp,sp,-12
 400b3ec:	dc400115 	stw	r17,4(sp)
 400b3f0:	dc000015 	stw	r16,0(sp)
 400b3f4:	dfc00215 	stw	ra,8(sp)
 400b3f8:	3023883a 	mov	r17,r6
 400b3fc:	3821883a 	mov	r16,r7
 400b400:	21400526 	beq	r4,r5,400b418 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
 400b404:	20c00007 	ldb	r3,0(r4)
 400b408:	00800a84 	movi	r2,42
 400b40c:	18800d26 	beq	r3,r2,400b444 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400b410:	400f0700 	call	400f070 <strcmp>
 400b414:	10000b1e 	bne	r2,zero,400b444 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400b418:	00800204 	movi	r2,8
 400b41c:	80800315 	stw	r2,12(r16)
 400b420:	00800184 	movi	r2,6
 400b424:	80800115 	stw	r2,4(r16)
 400b428:	84400015 	stw	r17,0(r16)
 400b42c:	00800044 	movi	r2,1
 400b430:	dfc00217 	ldw	ra,8(sp)
 400b434:	dc400117 	ldw	r17,4(sp)
 400b438:	dc000017 	ldw	r16,0(sp)
 400b43c:	dec00304 	addi	sp,sp,12
 400b440:	f800283a 	ret
 400b444:	0005883a 	mov	r2,zero
 400b448:	003ff906 	br	400b430 <__alt_mem_onchip_memory2_0+0xfc00a1b0>

0400b44c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 400b44c:	defffa04 	addi	sp,sp,-24
 400b450:	dc800415 	stw	r18,16(sp)
 400b454:	d8800817 	ldw	r2,32(sp)
 400b458:	dc800617 	ldw	r18,24(sp)
 400b45c:	dc400315 	stw	r17,12(sp)
 400b460:	dc000215 	stw	r16,8(sp)
 400b464:	dfc00515 	stw	ra,20(sp)
 400b468:	dc400917 	ldw	r17,36(sp)
 400b46c:	24000117 	ldw	r16,4(r4)
 400b470:	90801526 	beq	r18,r2,400b4c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
 400b474:	39400117 	ldw	r5,4(r7)
 400b478:	2c000826 	beq	r5,r16,400b49c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
 400b47c:	80c00007 	ldb	r3,0(r16)
 400b480:	00800a84 	movi	r2,42
 400b484:	18800926 	beq	r3,r2,400b4ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400b488:	8009883a 	mov	r4,r16
 400b48c:	d9800115 	stw	r6,4(sp)
 400b490:	400f0700 	call	400f070 <strcmp>
 400b494:	d9800117 	ldw	r6,4(sp)
 400b498:	1000041e 	bne	r2,zero,400b4ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400b49c:	00800044 	movi	r2,1
 400b4a0:	8c800015 	stw	r18,0(r17)
 400b4a4:	89800115 	stw	r6,4(r17)
 400b4a8:	88800315 	stw	r2,12(r17)
 400b4ac:	0005883a 	mov	r2,zero
 400b4b0:	dfc00517 	ldw	ra,20(sp)
 400b4b4:	dc800417 	ldw	r18,16(sp)
 400b4b8:	dc400317 	ldw	r17,12(sp)
 400b4bc:	dc000217 	ldw	r16,8(sp)
 400b4c0:	dec00604 	addi	sp,sp,24
 400b4c4:	f800283a 	ret
 400b4c8:	d8800717 	ldw	r2,28(sp)
 400b4cc:	11400117 	ldw	r5,4(r2)
 400b4d0:	81400a26 	beq	r16,r5,400b4fc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
 400b4d4:	80c00007 	ldb	r3,0(r16)
 400b4d8:	00800a84 	movi	r2,42
 400b4dc:	18800c26 	beq	r3,r2,400b510 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 400b4e0:	8009883a 	mov	r4,r16
 400b4e4:	d9800115 	stw	r6,4(sp)
 400b4e8:	d9c00015 	stw	r7,0(sp)
 400b4ec:	400f0700 	call	400f070 <strcmp>
 400b4f0:	d9800117 	ldw	r6,4(sp)
 400b4f4:	d9c00017 	ldw	r7,0(sp)
 400b4f8:	1000021e 	bne	r2,zero,400b504 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 400b4fc:	89800215 	stw	r6,8(r17)
 400b500:	003fea06 	br	400b4ac <__alt_mem_onchip_memory2_0+0xfc00a22c>
 400b504:	39400117 	ldw	r5,4(r7)
 400b508:	817fdf1e 	bne	r16,r5,400b488 <__alt_mem_onchip_memory2_0+0xfc00a208>
 400b50c:	003fe306 	br	400b49c <__alt_mem_onchip_memory2_0+0xfc00a21c>
 400b510:	38800117 	ldw	r2,4(r7)
 400b514:	80bfe51e 	bne	r16,r2,400b4ac <__alt_mem_onchip_memory2_0+0xfc00a22c>
 400b518:	003fe006 	br	400b49c <__alt_mem_onchip_memory2_0+0xfc00a21c>

0400b51c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 400b51c:	20800117 	ldw	r2,4(r4)
 400b520:	28c00117 	ldw	r3,4(r5)
 400b524:	10c02926 	beq	r2,r3,400b5cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
 400b528:	defffb04 	addi	sp,sp,-20
 400b52c:	dcc00315 	stw	r19,12(sp)
 400b530:	dc800215 	stw	r18,8(sp)
 400b534:	dc400115 	stw	r17,4(sp)
 400b538:	dc000015 	stw	r16,0(sp)
 400b53c:	dfc00415 	stw	ra,16(sp)
 400b540:	2821883a 	mov	r16,r5
 400b544:	11400007 	ldb	r5,0(r2)
 400b548:	2025883a 	mov	r18,r4
 400b54c:	01000a84 	movi	r4,42
 400b550:	3823883a 	mov	r17,r7
 400b554:	3027883a 	mov	r19,r6
 400b558:	29000626 	beq	r5,r4,400b574 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400b55c:	180b883a 	mov	r5,r3
 400b560:	1009883a 	mov	r4,r2
 400b564:	400f0700 	call	400f070 <strcmp>
 400b568:	1000021e 	bne	r2,zero,400b574 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400b56c:	00800044 	movi	r2,1
 400b570:	00000306 	br	400b580 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
 400b574:	008000c4 	movi	r2,3
 400b578:	1440082e 	bgeu	r2,r17,400b59c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 400b57c:	0005883a 	mov	r2,zero
 400b580:	dfc00417 	ldw	ra,16(sp)
 400b584:	dcc00317 	ldw	r19,12(sp)
 400b588:	dc800217 	ldw	r18,8(sp)
 400b58c:	dc400117 	ldw	r17,4(sp)
 400b590:	dc000017 	ldw	r16,0(sp)
 400b594:	dec00504 	addi	sp,sp,20
 400b598:	f800283a 	ret
 400b59c:	80800017 	ldw	r2,0(r16)
 400b5a0:	980d883a 	mov	r6,r19
 400b5a4:	900b883a 	mov	r5,r18
 400b5a8:	10800517 	ldw	r2,20(r2)
 400b5ac:	8009883a 	mov	r4,r16
 400b5b0:	dfc00417 	ldw	ra,16(sp)
 400b5b4:	dcc00317 	ldw	r19,12(sp)
 400b5b8:	dc800217 	ldw	r18,8(sp)
 400b5bc:	dc400117 	ldw	r17,4(sp)
 400b5c0:	dc000017 	ldw	r16,0(sp)
 400b5c4:	dec00504 	addi	sp,sp,20
 400b5c8:	1000683a 	jmp	r2
 400b5cc:	00800044 	movi	r2,1
 400b5d0:	f800283a 	ret

0400b5d4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 400b5d4:	00810074 	movhi	r2,1025
 400b5d8:	deffef04 	addi	sp,sp,-68
 400b5dc:	10afcf04 	addi	r2,r2,-16580
 400b5e0:	d8800615 	stw	r2,24(sp)
 400b5e4:	008100b4 	movhi	r2,1026
 400b5e8:	10bfb204 	addi	r2,r2,-312
 400b5ec:	d8800715 	stw	r2,28(sp)
 400b5f0:	00810074 	movhi	r2,1025
 400b5f4:	10ad8b04 	addi	r2,r2,-18900
 400b5f8:	d9000d15 	stw	r4,52(sp)
 400b5fc:	d809883a 	mov	r4,sp
 400b600:	d8800915 	stw	r2,36(sp)
 400b604:	dfc01015 	stw	ra,64(sp)
 400b608:	df000f15 	stw	fp,60(sp)
 400b60c:	dec00815 	stw	sp,32(sp)
 400b610:	dec00a15 	stw	sp,40(sp)
 400b614:	400dd340 	call	400dd34 <_Unwind_SjLj_Register>
 400b618:	00800044 	movi	r2,1
 400b61c:	d8800115 	stw	r2,4(sp)
 400b620:	d8800d17 	ldw	r2,52(sp)
 400b624:	103ee83a 	callr	r2
 400b628:	400e0b00 	call	400e0b0 <abort>
 400b62c:	d8c00217 	ldw	r3,8(sp)
 400b630:	d8800117 	ldw	r2,4(sp)
 400b634:	d8c00d15 	stw	r3,52(sp)
 400b638:	d8c00317 	ldw	r3,12(sp)
 400b63c:	d8c00e15 	stw	r3,56(sp)
 400b640:	10000b26 	beq	r2,zero,400b670 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
 400b644:	10bfffc4 	addi	r2,r2,-1
 400b648:	10000126 	beq	r2,zero,400b650 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
 400b64c:	003b68fa 	trap	3
 400b650:	d8000115 	stw	zero,4(sp)
 400b654:	400c9800 	call	400c980 <__cxa_end_catch>
 400b658:	d8c00e17 	ldw	r3,56(sp)
 400b65c:	00bfffc4 	movi	r2,-1
 400b660:	18800826 	beq	r3,r2,400b684 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
 400b664:	d9000d17 	ldw	r4,52(sp)
 400b668:	d8800115 	stw	r2,4(sp)
 400b66c:	400df300 	call	400df30 <_Unwind_SjLj_Resume>
 400b670:	d9000d17 	ldw	r4,52(sp)
 400b674:	400c8cc0 	call	400c8cc <__cxa_begin_catch>
 400b678:	00800084 	movi	r2,2
 400b67c:	d8800115 	stw	r2,4(sp)
 400b680:	400e0b00 	call	400e0b0 <abort>
 400b684:	d8800e17 	ldw	r2,56(sp)
 400b688:	d9000d17 	ldw	r4,52(sp)
 400b68c:	d8800115 	stw	r2,4(sp)
 400b690:	400c53c0 	call	400c53c <__cxa_call_unexpected>

0400b694 <_ZSt9terminatev>:
 400b694:	008100f4 	movhi	r2,1027
 400b698:	10a89f04 	addi	r2,r2,-23940
 400b69c:	11000017 	ldw	r4,0(r2)
 400b6a0:	deffff04 	addi	sp,sp,-4
 400b6a4:	dfc00015 	stw	ra,0(sp)
 400b6a8:	400b5d40 	call	400b5d4 <_ZN10__cxxabiv111__terminateEPFvvE>

0400b6ac <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 400b6ac:	deffff04 	addi	sp,sp,-4
 400b6b0:	dfc00015 	stw	ra,0(sp)
 400b6b4:	203ee83a 	callr	r4
 400b6b8:	400b6940 	call	400b694 <_ZSt9terminatev>

0400b6bc <_ZSt10unexpectedv>:
 400b6bc:	008100f4 	movhi	r2,1027
 400b6c0:	10a89e04 	addi	r2,r2,-23944
 400b6c4:	11000017 	ldw	r4,0(r2)
 400b6c8:	deffff04 	addi	sp,sp,-4
 400b6cc:	dfc00015 	stw	ra,0(sp)
 400b6d0:	400b6ac0 	call	400b6ac <_ZN10__cxxabiv112__unexpectedEPFvvE>

0400b6d4 <_ZSt13set_terminatePFvvE>:
 400b6d4:	00c100f4 	movhi	r3,1027
 400b6d8:	18e89f04 	addi	r3,r3,-23940
 400b6dc:	18800017 	ldw	r2,0(r3)
 400b6e0:	19000015 	stw	r4,0(r3)
 400b6e4:	f800283a 	ret

0400b6e8 <_ZSt13get_terminatev>:
 400b6e8:	008100f4 	movhi	r2,1027
 400b6ec:	10a89f04 	addi	r2,r2,-23940
 400b6f0:	10800017 	ldw	r2,0(r2)
 400b6f4:	f800283a 	ret

0400b6f8 <_ZSt14set_unexpectedPFvvE>:
 400b6f8:	00c100f4 	movhi	r3,1027
 400b6fc:	18e89e04 	addi	r3,r3,-23944
 400b700:	18800017 	ldw	r2,0(r3)
 400b704:	19000015 	stw	r4,0(r3)
 400b708:	f800283a 	ret

0400b70c <_ZSt14get_unexpectedv>:
 400b70c:	008100f4 	movhi	r2,1027
 400b710:	10a89e04 	addi	r2,r2,-23944
 400b714:	10800017 	ldw	r2,0(r2)
 400b718:	f800283a 	ret

0400b71c <_ZL21size_of_encoded_valueh>:
 400b71c:	deffff04 	addi	sp,sp,-4
 400b720:	dfc00015 	stw	ra,0(sp)
 400b724:	20c03fcc 	andi	r3,r4,255
 400b728:	00803fc4 	movi	r2,255
 400b72c:	18802026 	beq	r3,r2,400b7b0 <_ZL21size_of_encoded_valueh+0x94>
 400b730:	210001cc 	andi	r4,r4,7
 400b734:	00800144 	movi	r2,5
 400b738:	11001c36 	bltu	r2,r4,400b7ac <_ZL21size_of_encoded_valueh+0x90>
 400b73c:	200890ba 	slli	r4,r4,2
 400b740:	00810074 	movhi	r2,1025
 400b744:	10add504 	addi	r2,r2,-18604
 400b748:	2089883a 	add	r4,r4,r2
 400b74c:	20800017 	ldw	r2,0(r4)
 400b750:	1000683a 	jmp	r2
 400b754:	0400b76c 	andhi	r16,zero,733
 400b758:	0400b7ac 	andhi	r16,zero,734
 400b75c:	0400b77c 	xorhi	r16,zero,733
 400b760:	0400b76c 	andhi	r16,zero,733
 400b764:	0400b79c 	xori	r16,zero,734
 400b768:	0400b78c 	andi	r16,zero,734
 400b76c:	00800104 	movi	r2,4
 400b770:	dfc00017 	ldw	ra,0(sp)
 400b774:	dec00104 	addi	sp,sp,4
 400b778:	f800283a 	ret
 400b77c:	00800084 	movi	r2,2
 400b780:	dfc00017 	ldw	ra,0(sp)
 400b784:	dec00104 	addi	sp,sp,4
 400b788:	f800283a 	ret
 400b78c:	00800044 	movi	r2,1
 400b790:	dfc00017 	ldw	ra,0(sp)
 400b794:	dec00104 	addi	sp,sp,4
 400b798:	f800283a 	ret
 400b79c:	00800204 	movi	r2,8
 400b7a0:	dfc00017 	ldw	ra,0(sp)
 400b7a4:	dec00104 	addi	sp,sp,4
 400b7a8:	f800283a 	ret
 400b7ac:	400e0b00 	call	400e0b0 <abort>
 400b7b0:	0005883a 	mov	r2,zero
 400b7b4:	dfc00017 	ldw	ra,0(sp)
 400b7b8:	dec00104 	addi	sp,sp,4
 400b7bc:	f800283a 	ret

0400b7c0 <_ZL28read_encoded_value_with_basehjPKhPj>:
 400b7c0:	deffff04 	addi	sp,sp,-4
 400b7c4:	dfc00015 	stw	ra,0(sp)
 400b7c8:	20c03fcc 	andi	r3,r4,255
 400b7cc:	00801404 	movi	r2,80
 400b7d0:	18807326 	beq	r3,r2,400b9a0 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
 400b7d4:	20c003cc 	andi	r3,r4,15
 400b7d8:	00800304 	movi	r2,12
 400b7dc:	10c06f36 	bltu	r2,r3,400b99c <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
 400b7e0:	180690ba 	slli	r3,r3,2
 400b7e4:	02010074 	movhi	r8,1025
 400b7e8:	422dfe04 	addi	r8,r8,-18440
 400b7ec:	1a07883a 	add	r3,r3,r8
 400b7f0:	18800017 	ldw	r2,0(r3)
 400b7f4:	1000683a 	jmp	r2
 400b7f8:	0400b82c 	andhi	r16,zero,736
 400b7fc:	0400b948 	cmpgei	r16,zero,741
 400b800:	0400b984 	movi	r16,742
 400b804:	0400b82c 	andhi	r16,zero,736
 400b808:	0400b890 	cmplti	r16,zero,738
 400b80c:	0400b8e4 	muli	r16,zero,739
 400b810:	0400b99c 	xori	r16,zero,742
 400b814:	0400b99c 	xori	r16,zero,742
 400b818:	0400b99c 	xori	r16,zero,742
 400b81c:	0400b8f0 	cmpltui	r16,zero,739
 400b820:	0400b8c0 	call	400b8c <__alt_mem_sdram-0x3bff474>
 400b824:	0400b82c 	andhi	r16,zero,736
 400b828:	0400b890 	cmplti	r16,zero,738
 400b82c:	30800043 	ldbu	r2,1(r6)
 400b830:	30c00083 	ldbu	r3,2(r6)
 400b834:	324000c3 	ldbu	r9,3(r6)
 400b838:	32000003 	ldbu	r8,0(r6)
 400b83c:	1004923a 	slli	r2,r2,8
 400b840:	1806943a 	slli	r3,r3,16
 400b844:	4812963a 	slli	r9,r9,24
 400b848:	1204b03a 	or	r2,r2,r8
 400b84c:	1884b03a 	or	r2,r3,r2
 400b850:	4886b03a 	or	r3,r9,r2
 400b854:	30800104 	addi	r2,r6,4
 400b858:	18000926 	beq	r3,zero,400b880 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 400b85c:	22001c0c 	andi	r8,r4,112
 400b860:	02400404 	movi	r9,16
 400b864:	42405726 	beq	r8,r9,400b9c4 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
 400b868:	21003fcc 	andi	r4,r4,255
 400b86c:	2100201c 	xori	r4,r4,128
 400b870:	213fe004 	addi	r4,r4,-128
 400b874:	1947883a 	add	r3,r3,r5
 400b878:	2000010e 	bge	r4,zero,400b880 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 400b87c:	18c00017 	ldw	r3,0(r3)
 400b880:	38c00015 	stw	r3,0(r7)
 400b884:	dfc00017 	ldw	ra,0(sp)
 400b888:	dec00104 	addi	sp,sp,4
 400b88c:	f800283a 	ret
 400b890:	30800043 	ldbu	r2,1(r6)
 400b894:	30c00083 	ldbu	r3,2(r6)
 400b898:	324000c3 	ldbu	r9,3(r6)
 400b89c:	32000003 	ldbu	r8,0(r6)
 400b8a0:	1004923a 	slli	r2,r2,8
 400b8a4:	1806943a 	slli	r3,r3,16
 400b8a8:	4812963a 	slli	r9,r9,24
 400b8ac:	1204b03a 	or	r2,r2,r8
 400b8b0:	1884b03a 	or	r2,r3,r2
 400b8b4:	4886b03a 	or	r3,r9,r2
 400b8b8:	30800204 	addi	r2,r6,8
 400b8bc:	003fe606 	br	400b858 <__alt_mem_onchip_memory2_0+0xfc00a5d8>
 400b8c0:	30c00043 	ldbu	r3,1(r6)
 400b8c4:	32000003 	ldbu	r8,0(r6)
 400b8c8:	30800084 	addi	r2,r6,2
 400b8cc:	1806923a 	slli	r3,r3,8
 400b8d0:	1a06b03a 	or	r3,r3,r8
 400b8d4:	18ffffcc 	andi	r3,r3,65535
 400b8d8:	18e0001c 	xori	r3,r3,32768
 400b8dc:	18e00004 	addi	r3,r3,-32768
 400b8e0:	003fdd06 	br	400b858 <__alt_mem_onchip_memory2_0+0xfc00a5d8>
 400b8e4:	30c00003 	ldbu	r3,0(r6)
 400b8e8:	30800044 	addi	r2,r6,1
 400b8ec:	003fda06 	br	400b858 <__alt_mem_onchip_memory2_0+0xfc00a5d8>
 400b8f0:	3017883a 	mov	r11,r6
 400b8f4:	0007883a 	mov	r3,zero
 400b8f8:	0013883a 	mov	r9,zero
 400b8fc:	5a800003 	ldbu	r10,0(r11)
 400b900:	58800044 	addi	r2,r11,1
 400b904:	1017883a 	mov	r11,r2
 400b908:	52001fcc 	andi	r8,r10,127
 400b90c:	4250983a 	sll	r8,r8,r9
 400b910:	53003fcc 	andi	r12,r10,255
 400b914:	6300201c 	xori	r12,r12,128
 400b918:	633fe004 	addi	r12,r12,-128
 400b91c:	1a06b03a 	or	r3,r3,r8
 400b920:	4a4001c4 	addi	r9,r9,7
 400b924:	603ff516 	blt	r12,zero,400b8fc <__alt_mem_onchip_memory2_0+0xfc00a67c>
 400b928:	020007c4 	movi	r8,31
 400b92c:	427fca36 	bltu	r8,r9,400b858 <__alt_mem_onchip_memory2_0+0xfc00a5d8>
 400b930:	5280100c 	andi	r10,r10,64
 400b934:	503fc826 	beq	r10,zero,400b858 <__alt_mem_onchip_memory2_0+0xfc00a5d8>
 400b938:	023fffc4 	movi	r8,-1
 400b93c:	4252983a 	sll	r9,r8,r9
 400b940:	1a46b03a 	or	r3,r3,r9
 400b944:	003fc506 	br	400b85c <__alt_mem_onchip_memory2_0+0xfc00a5dc>
 400b948:	3017883a 	mov	r11,r6
 400b94c:	0007883a 	mov	r3,zero
 400b950:	0015883a 	mov	r10,zero
 400b954:	5a000003 	ldbu	r8,0(r11)
 400b958:	58800044 	addi	r2,r11,1
 400b95c:	1017883a 	mov	r11,r2
 400b960:	42401fcc 	andi	r9,r8,127
 400b964:	4a92983a 	sll	r9,r9,r10
 400b968:	42003fcc 	andi	r8,r8,255
 400b96c:	4200201c 	xori	r8,r8,128
 400b970:	423fe004 	addi	r8,r8,-128
 400b974:	1a46b03a 	or	r3,r3,r9
 400b978:	528001c4 	addi	r10,r10,7
 400b97c:	403ff516 	blt	r8,zero,400b954 <__alt_mem_onchip_memory2_0+0xfc00a6d4>
 400b980:	003fb506 	br	400b858 <__alt_mem_onchip_memory2_0+0xfc00a5d8>
 400b984:	30c00043 	ldbu	r3,1(r6)
 400b988:	32000003 	ldbu	r8,0(r6)
 400b98c:	30800084 	addi	r2,r6,2
 400b990:	1806923a 	slli	r3,r3,8
 400b994:	1a06b03a 	or	r3,r3,r8
 400b998:	003faf06 	br	400b858 <__alt_mem_onchip_memory2_0+0xfc00a5d8>
 400b99c:	400e0b00 	call	400e0b0 <abort>
 400b9a0:	308000c4 	addi	r2,r6,3
 400b9a4:	00ffff04 	movi	r3,-4
 400b9a8:	10c4703a 	and	r2,r2,r3
 400b9ac:	10c00017 	ldw	r3,0(r2)
 400b9b0:	10800104 	addi	r2,r2,4
 400b9b4:	38c00015 	stw	r3,0(r7)
 400b9b8:	dfc00017 	ldw	ra,0(sp)
 400b9bc:	dec00104 	addi	sp,sp,4
 400b9c0:	f800283a 	ret
 400b9c4:	300b883a 	mov	r5,r6
 400b9c8:	003fa706 	br	400b868 <__alt_mem_onchip_memory2_0+0xfc00a5e8>

0400b9cc <_ZL15get_ttype_entryP16lsda_header_infom>:
 400b9cc:	defffc04 	addi	sp,sp,-16
 400b9d0:	dfc00315 	stw	ra,12(sp)
 400b9d4:	dc000215 	stw	r16,8(sp)
 400b9d8:	2021883a 	mov	r16,r4
 400b9dc:	21000503 	ldbu	r4,20(r4)
 400b9e0:	d9400115 	stw	r5,4(sp)
 400b9e4:	400b71c0 	call	400b71c <_ZL21size_of_encoded_valueh>
 400b9e8:	d9400117 	ldw	r5,4(sp)
 400b9ec:	1009883a 	mov	r4,r2
 400b9f0:	400cfd40 	call	400cfd4 <__mulsi3>
 400b9f4:	81800317 	ldw	r6,12(r16)
 400b9f8:	81400217 	ldw	r5,8(r16)
 400b9fc:	81000503 	ldbu	r4,20(r16)
 400ba00:	d80f883a 	mov	r7,sp
 400ba04:	308dc83a 	sub	r6,r6,r2
 400ba08:	400b7c00 	call	400b7c0 <_ZL28read_encoded_value_with_basehjPKhPj>
 400ba0c:	d8800017 	ldw	r2,0(sp)
 400ba10:	dfc00317 	ldw	ra,12(sp)
 400ba14:	dc000217 	ldw	r16,8(sp)
 400ba18:	dec00404 	addi	sp,sp,16
 400ba1c:	f800283a 	ret

0400ba20 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 400ba20:	deffff04 	addi	sp,sp,-4
 400ba24:	dfc00015 	stw	ra,0(sp)
 400ba28:	20c03fcc 	andi	r3,r4,255
 400ba2c:	00803fc4 	movi	r2,255
 400ba30:	18800e26 	beq	r3,r2,400ba6c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 400ba34:	20801c0c 	andi	r2,r4,112
 400ba38:	00c00804 	movi	r3,32
 400ba3c:	10c01726 	beq	r2,r3,400ba9c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
 400ba40:	18800e2e 	bgeu	r3,r2,400ba7c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
 400ba44:	00c01004 	movi	r3,64
 400ba48:	10c01026 	beq	r2,r3,400ba8c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
 400ba4c:	00c01404 	movi	r3,80
 400ba50:	10c00626 	beq	r2,r3,400ba6c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 400ba54:	00c00c04 	movi	r3,48
 400ba58:	10c00b1e 	bne	r2,r3,400ba88 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
 400ba5c:	2809883a 	mov	r4,r5
 400ba60:	dfc00017 	ldw	ra,0(sp)
 400ba64:	dec00104 	addi	sp,sp,4
 400ba68:	400de0c1 	jmpi	400de0c <_Unwind_GetDataRelBase>
 400ba6c:	0005883a 	mov	r2,zero
 400ba70:	dfc00017 	ldw	ra,0(sp)
 400ba74:	dec00104 	addi	sp,sp,4
 400ba78:	f800283a 	ret
 400ba7c:	103ffb26 	beq	r2,zero,400ba6c <__alt_mem_onchip_memory2_0+0xfc00a7ec>
 400ba80:	00c00404 	movi	r3,16
 400ba84:	10fff926 	beq	r2,r3,400ba6c <__alt_mem_onchip_memory2_0+0xfc00a7ec>
 400ba88:	400e0b00 	call	400e0b0 <abort>
 400ba8c:	2809883a 	mov	r4,r5
 400ba90:	dfc00017 	ldw	ra,0(sp)
 400ba94:	dec00104 	addi	sp,sp,4
 400ba98:	400ddfc1 	jmpi	400ddfc <_Unwind_GetRegionStart>
 400ba9c:	2809883a 	mov	r4,r5
 400baa0:	dfc00017 	ldw	ra,0(sp)
 400baa4:	dec00104 	addi	sp,sp,4
 400baa8:	400de141 	jmpi	400de14 <_Unwind_GetTextRelBase>

0400baac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 400baac:	defffb04 	addi	sp,sp,-20
 400bab0:	dcc00315 	stw	r19,12(sp)
 400bab4:	dc400115 	stw	r17,4(sp)
 400bab8:	dc000015 	stw	r16,0(sp)
 400babc:	dfc00415 	stw	ra,16(sp)
 400bac0:	dc800215 	stw	r18,8(sp)
 400bac4:	2027883a 	mov	r19,r4
 400bac8:	2821883a 	mov	r16,r5
 400bacc:	3023883a 	mov	r17,r6
 400bad0:	20003f26 	beq	r4,zero,400bbd0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
 400bad4:	400ddfc0 	call	400ddfc <_Unwind_GetRegionStart>
 400bad8:	88800015 	stw	r2,0(r17)
 400badc:	84800003 	ldbu	r18,0(r16)
 400bae0:	00c03fc4 	movi	r3,255
 400bae4:	84000044 	addi	r16,r16,1
 400bae8:	90c03726 	beq	r18,r3,400bbc8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
 400baec:	980b883a 	mov	r5,r19
 400baf0:	9009883a 	mov	r4,r18
 400baf4:	400ba200 	call	400ba20 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400baf8:	800d883a 	mov	r6,r16
 400bafc:	89c00104 	addi	r7,r17,4
 400bb00:	100b883a 	mov	r5,r2
 400bb04:	9009883a 	mov	r4,r18
 400bb08:	400b7c00 	call	400b7c0 <_ZL28read_encoded_value_with_basehjPKhPj>
 400bb0c:	1021883a 	mov	r16,r2
 400bb10:	80c00003 	ldbu	r3,0(r16)
 400bb14:	01003fc4 	movi	r4,255
 400bb18:	80800044 	addi	r2,r16,1
 400bb1c:	88c00505 	stb	r3,20(r17)
 400bb20:	18c03fcc 	andi	r3,r3,255
 400bb24:	19002c26 	beq	r3,r4,400bbd8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
 400bb28:	100f883a 	mov	r7,r2
 400bb2c:	000d883a 	mov	r6,zero
 400bb30:	000b883a 	mov	r5,zero
 400bb34:	38c00003 	ldbu	r3,0(r7)
 400bb38:	10800044 	addi	r2,r2,1
 400bb3c:	100f883a 	mov	r7,r2
 400bb40:	19001fcc 	andi	r4,r3,127
 400bb44:	2148983a 	sll	r4,r4,r5
 400bb48:	18c03fcc 	andi	r3,r3,255
 400bb4c:	18c0201c 	xori	r3,r3,128
 400bb50:	18ffe004 	addi	r3,r3,-128
 400bb54:	310cb03a 	or	r6,r6,r4
 400bb58:	294001c4 	addi	r5,r5,7
 400bb5c:	183ff516 	blt	r3,zero,400bb34 <__alt_mem_onchip_memory2_0+0xfc00a8b4>
 400bb60:	118d883a 	add	r6,r2,r6
 400bb64:	89800315 	stw	r6,12(r17)
 400bb68:	10c00003 	ldbu	r3,0(r2)
 400bb6c:	000d883a 	mov	r6,zero
 400bb70:	10800044 	addi	r2,r2,1
 400bb74:	88c00545 	stb	r3,21(r17)
 400bb78:	000b883a 	mov	r5,zero
 400bb7c:	10c00003 	ldbu	r3,0(r2)
 400bb80:	10800044 	addi	r2,r2,1
 400bb84:	19001fcc 	andi	r4,r3,127
 400bb88:	2148983a 	sll	r4,r4,r5
 400bb8c:	18c03fcc 	andi	r3,r3,255
 400bb90:	18c0201c 	xori	r3,r3,128
 400bb94:	18ffe004 	addi	r3,r3,-128
 400bb98:	310cb03a 	or	r6,r6,r4
 400bb9c:	294001c4 	addi	r5,r5,7
 400bba0:	183ff616 	blt	r3,zero,400bb7c <__alt_mem_onchip_memory2_0+0xfc00a8fc>
 400bba4:	118d883a 	add	r6,r2,r6
 400bba8:	89800415 	stw	r6,16(r17)
 400bbac:	dfc00417 	ldw	ra,16(sp)
 400bbb0:	dcc00317 	ldw	r19,12(sp)
 400bbb4:	dc800217 	ldw	r18,8(sp)
 400bbb8:	dc400117 	ldw	r17,4(sp)
 400bbbc:	dc000017 	ldw	r16,0(sp)
 400bbc0:	dec00504 	addi	sp,sp,20
 400bbc4:	f800283a 	ret
 400bbc8:	88800115 	stw	r2,4(r17)
 400bbcc:	003fd006 	br	400bb10 <__alt_mem_onchip_memory2_0+0xfc00a890>
 400bbd0:	0005883a 	mov	r2,zero
 400bbd4:	003fc006 	br	400bad8 <__alt_mem_onchip_memory2_0+0xfc00a858>
 400bbd8:	88000315 	stw	zero,12(r17)
 400bbdc:	003fe206 	br	400bb68 <__alt_mem_onchip_memory2_0+0xfc00a8e8>

0400bbe0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
 400bbe0:	28800017 	ldw	r2,0(r5)
 400bbe4:	30c00017 	ldw	r3,0(r6)
 400bbe8:	defffb04 	addi	sp,sp,-20
 400bbec:	10800217 	ldw	r2,8(r2)
 400bbf0:	dc400315 	stw	r17,12(sp)
 400bbf4:	dc000215 	stw	r16,8(sp)
 400bbf8:	d9400115 	stw	r5,4(sp)
 400bbfc:	dfc00415 	stw	ra,16(sp)
 400bc00:	2021883a 	mov	r16,r4
 400bc04:	d8c00015 	stw	r3,0(sp)
 400bc08:	2809883a 	mov	r4,r5
 400bc0c:	3023883a 	mov	r17,r6
 400bc10:	103ee83a 	callr	r2
 400bc14:	10803fcc 	andi	r2,r2,255
 400bc18:	d9400117 	ldw	r5,4(sp)
 400bc1c:	10000326 	beq	r2,zero,400bc2c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
 400bc20:	d8800017 	ldw	r2,0(sp)
 400bc24:	10800017 	ldw	r2,0(r2)
 400bc28:	d8800015 	stw	r2,0(sp)
 400bc2c:	80800017 	ldw	r2,0(r16)
 400bc30:	01c00044 	movi	r7,1
 400bc34:	d80d883a 	mov	r6,sp
 400bc38:	10800417 	ldw	r2,16(r2)
 400bc3c:	8009883a 	mov	r4,r16
 400bc40:	103ee83a 	callr	r2
 400bc44:	10c03fcc 	andi	r3,r2,255
 400bc48:	18000226 	beq	r3,zero,400bc54 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
 400bc4c:	d8c00017 	ldw	r3,0(sp)
 400bc50:	88c00015 	stw	r3,0(r17)
 400bc54:	dfc00417 	ldw	ra,16(sp)
 400bc58:	dc400317 	ldw	r17,12(sp)
 400bc5c:	dc000217 	ldw	r16,8(sp)
 400bc60:	dec00504 	addi	sp,sp,20
 400bc64:	f800283a 	ret

0400bc68 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
 400bc68:	defff304 	addi	sp,sp,-52
 400bc6c:	dc800615 	stw	r18,24(sp)
 400bc70:	3825d23a 	srai	r18,r7,8
 400bc74:	dd000815 	stw	r20,32(sp)
 400bc78:	dcc00715 	stw	r19,28(sp)
 400bc7c:	dfc00c15 	stw	ra,48(sp)
 400bc80:	ddc00b15 	stw	r23,44(sp)
 400bc84:	dd800a15 	stw	r22,40(sp)
 400bc88:	dd400915 	stw	r21,36(sp)
 400bc8c:	dc400515 	stw	r17,20(sp)
 400bc90:	dc000415 	stw	r16,16(sp)
 400bc94:	d9400215 	stw	r5,8(sp)
 400bc98:	3827883a 	mov	r19,r7
 400bc9c:	2029883a 	mov	r20,r4
 400bca0:	9000010e 	bge	r18,zero,400bca8 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
 400bca4:	04a5c83a 	sub	r18,zero,r18
 400bca8:	000b883a 	mov	r5,zero
 400bcac:	01000144 	movi	r4,5
 400bcb0:	d9800315 	stw	r6,12(sp)
 400bcb4:	400ba200 	call	400ba20 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400bcb8:	d9800317 	ldw	r6,12(sp)
 400bcbc:	d9c00104 	addi	r7,sp,4
 400bcc0:	100b883a 	mov	r5,r2
 400bcc4:	01000144 	movi	r4,5
 400bcc8:	400b7c00 	call	400b7c0 <_ZL28read_encoded_value_with_basehjPKhPj>
 400bccc:	017ffe44 	movi	r5,-7
 400bcd0:	1009883a 	mov	r4,r2
 400bcd4:	1021883a 	mov	r16,r2
 400bcd8:	400cfd40 	call	400cfd4 <__mulsi3>
 400bcdc:	102d883a 	mov	r22,r2
 400bce0:	0023883a 	mov	r17,zero
 400bce4:	85400003 	ldbu	r21,0(r16)
 400bce8:	8009883a 	mov	r4,r16
 400bcec:	014001c4 	movi	r5,7
 400bcf0:	400cfd40 	call	400cfd4 <__mulsi3>
 400bcf4:	a8c01fcc 	andi	r3,r21,127
 400bcf8:	1585883a 	add	r2,r2,r22
 400bcfc:	1886983a 	sll	r3,r3,r2
 400bd00:	ad403fcc 	andi	r21,r21,255
 400bd04:	ad40201c 	xori	r21,r21,128
 400bd08:	ad7fe004 	addi	r21,r21,-128
 400bd0c:	84000044 	addi	r16,r16,1
 400bd10:	88e2b03a 	or	r17,r17,r3
 400bd14:	a83ff316 	blt	r21,zero,400bce4 <__alt_mem_onchip_memory2_0+0xfc00aa64>
 400bd18:	8461883a 	add	r16,r16,r17
 400bd1c:	017ffe44 	movi	r5,-7
 400bd20:	8009883a 	mov	r4,r16
 400bd24:	400cfd40 	call	400cfd4 <__mulsi3>
 400bd28:	102d883a 	mov	r22,r2
 400bd2c:	002b883a 	mov	r21,zero
 400bd30:	84400003 	ldbu	r17,0(r16)
 400bd34:	8009883a 	mov	r4,r16
 400bd38:	014001c4 	movi	r5,7
 400bd3c:	400cfd40 	call	400cfd4 <__mulsi3>
 400bd40:	88c01fcc 	andi	r3,r17,127
 400bd44:	1585883a 	add	r2,r2,r22
 400bd48:	1886983a 	sll	r3,r3,r2
 400bd4c:	8c403fcc 	andi	r17,r17,255
 400bd50:	8c40201c 	xori	r17,r17,128
 400bd54:	8c7fe004 	addi	r17,r17,-128
 400bd58:	84000044 	addi	r16,r16,1
 400bd5c:	a8eab03a 	or	r21,r21,r3
 400bd60:	883ff316 	blt	r17,zero,400bd30 <__alt_mem_onchip_memory2_0+0xfc00aab0>
 400bd64:	94403fcc 	andi	r17,r18,255
 400bd68:	8c7fffc4 	addi	r17,r17,-1
 400bd6c:	8463883a 	add	r17,r16,r17
 400bd70:	ad4000c4 	addi	r21,r21,3
 400bd74:	00bfff04 	movi	r2,-4
 400bd78:	ac21883a 	add	r16,r21,r16
 400bd7c:	017ffe44 	movi	r5,-7
 400bd80:	8809883a 	mov	r4,r17
 400bd84:	80a0703a 	and	r16,r16,r2
 400bd88:	400cfd40 	call	400cfd4 <__mulsi3>
 400bd8c:	0025883a 	mov	r18,zero
 400bd90:	102f883a 	mov	r23,r2
 400bd94:	8d800003 	ldbu	r22,0(r17)
 400bd98:	8809883a 	mov	r4,r17
 400bd9c:	014001c4 	movi	r5,7
 400bda0:	400cfd40 	call	400cfd4 <__mulsi3>
 400bda4:	b0c01fcc 	andi	r3,r22,127
 400bda8:	15c5883a 	add	r2,r2,r23
 400bdac:	1886983a 	sll	r3,r3,r2
 400bdb0:	b5803fcc 	andi	r22,r22,255
 400bdb4:	b580201c 	xori	r22,r22,128
 400bdb8:	8d400044 	addi	r21,r17,1
 400bdbc:	b5bfe004 	addi	r22,r22,-128
 400bdc0:	90e4b03a 	or	r18,r18,r3
 400bdc4:	a823883a 	mov	r17,r21
 400bdc8:	b03ff216 	blt	r22,zero,400bd94 <__alt_mem_onchip_memory2_0+0xfc00ab14>
 400bdcc:	9cc03fcc 	andi	r19,r19,255
 400bdd0:	90002426 	beq	r18,zero,400be64 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
 400bdd4:	9809883a 	mov	r4,r19
 400bdd8:	400b71c0 	call	400b71c <_ZL21size_of_encoded_valueh>
 400bddc:	100b883a 	mov	r5,r2
 400bde0:	913fffc4 	addi	r4,r18,-1
 400bde4:	400cfd40 	call	400cfd4 <__mulsi3>
 400bde8:	d9400d17 	ldw	r5,52(sp)
 400bdec:	d80f883a 	mov	r7,sp
 400bdf0:	9809883a 	mov	r4,r19
 400bdf4:	140d883a 	add	r6,r2,r16
 400bdf8:	400b7c00 	call	400b7c0 <_ZL28read_encoded_value_with_basehjPKhPj>
 400bdfc:	d9000017 	ldw	r4,0(sp)
 400be00:	d9800204 	addi	r6,sp,8
 400be04:	a00b883a 	mov	r5,r20
 400be08:	400bbe00 	call	400bbe0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400be0c:	10c03fcc 	andi	r3,r2,255
 400be10:	1800151e 	bne	r3,zero,400be68 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
 400be14:	a809883a 	mov	r4,r21
 400be18:	017ffe44 	movi	r5,-7
 400be1c:	400cfd40 	call	400cfd4 <__mulsi3>
 400be20:	102d883a 	mov	r22,r2
 400be24:	a809883a 	mov	r4,r21
 400be28:	0025883a 	mov	r18,zero
 400be2c:	24400003 	ldbu	r17,0(r4)
 400be30:	014001c4 	movi	r5,7
 400be34:	400cfd40 	call	400cfd4 <__mulsi3>
 400be38:	88c01fcc 	andi	r3,r17,127
 400be3c:	1585883a 	add	r2,r2,r22
 400be40:	1886983a 	sll	r3,r3,r2
 400be44:	8c403fcc 	andi	r17,r17,255
 400be48:	8c40201c 	xori	r17,r17,128
 400be4c:	ad400044 	addi	r21,r21,1
 400be50:	8c7fe004 	addi	r17,r17,-128
 400be54:	90e4b03a 	or	r18,r18,r3
 400be58:	a809883a 	mov	r4,r21
 400be5c:	883ff316 	blt	r17,zero,400be2c <__alt_mem_onchip_memory2_0+0xfc00abac>
 400be60:	003fdb06 	br	400bdd0 <__alt_mem_onchip_memory2_0+0xfc00ab50>
 400be64:	0005883a 	mov	r2,zero
 400be68:	dfc00c17 	ldw	ra,48(sp)
 400be6c:	ddc00b17 	ldw	r23,44(sp)
 400be70:	dd800a17 	ldw	r22,40(sp)
 400be74:	dd400917 	ldw	r21,36(sp)
 400be78:	dd000817 	ldw	r20,32(sp)
 400be7c:	dcc00717 	ldw	r19,28(sp)
 400be80:	dc800617 	ldw	r18,24(sp)
 400be84:	dc400517 	ldw	r17,20(sp)
 400be88:	dc000417 	ldw	r16,16(sp)
 400be8c:	dec00d04 	addi	sp,sp,52
 400be90:	f800283a 	ret

0400be94 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
 400be94:	defffb04 	addi	sp,sp,-20
 400be98:	dc000115 	stw	r16,4(sp)
 400be9c:	24000317 	ldw	r16,12(r4)
 400bea0:	01ce303a 	nor	r7,zero,r7
 400bea4:	dc800315 	stw	r18,12(sp)
 400bea8:	dc400215 	stw	r17,8(sp)
 400beac:	dfc00415 	stw	ra,16(sp)
 400beb0:	2023883a 	mov	r17,r4
 400beb4:	2825883a 	mov	r18,r5
 400beb8:	d9800015 	stw	r6,0(sp)
 400bebc:	81e1883a 	add	r16,r16,r7
 400bec0:	800d883a 	mov	r6,r16
 400bec4:	000b883a 	mov	r5,zero
 400bec8:	0009883a 	mov	r4,zero
 400becc:	30800003 	ldbu	r2,0(r6)
 400bed0:	84000044 	addi	r16,r16,1
 400bed4:	800d883a 	mov	r6,r16
 400bed8:	10c01fcc 	andi	r3,r2,127
 400bedc:	1906983a 	sll	r3,r3,r4
 400bee0:	10803fcc 	andi	r2,r2,255
 400bee4:	1080201c 	xori	r2,r2,128
 400bee8:	10bfe004 	addi	r2,r2,-128
 400beec:	28cab03a 	or	r5,r5,r3
 400bef0:	210001c4 	addi	r4,r4,7
 400bef4:	103ff516 	blt	r2,zero,400becc <__alt_mem_onchip_memory2_0+0xfc00ac4c>
 400bef8:	28000e26 	beq	r5,zero,400bf34 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
 400befc:	8809883a 	mov	r4,r17
 400bf00:	400b9cc0 	call	400b9cc <_ZL15get_ttype_entryP16lsda_header_infom>
 400bf04:	d80d883a 	mov	r6,sp
 400bf08:	900b883a 	mov	r5,r18
 400bf0c:	1009883a 	mov	r4,r2
 400bf10:	400bbe00 	call	400bbe0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400bf14:	10c03fcc 	andi	r3,r2,255
 400bf18:	183fe926 	beq	r3,zero,400bec0 <__alt_mem_onchip_memory2_0+0xfc00ac40>
 400bf1c:	dfc00417 	ldw	ra,16(sp)
 400bf20:	dc800317 	ldw	r18,12(sp)
 400bf24:	dc400217 	ldw	r17,8(sp)
 400bf28:	dc000117 	ldw	r16,4(sp)
 400bf2c:	dec00504 	addi	sp,sp,20
 400bf30:	f800283a 	ret
 400bf34:	0005883a 	mov	r2,zero
 400bf38:	003ff806 	br	400bf1c <__alt_mem_onchip_memory2_0+0xfc00ac9c>

0400bf3c <__gxx_personality_sj0>:
 400bf3c:	00810074 	movhi	r2,1025
 400bf40:	deffdd04 	addi	sp,sp,-140
 400bf44:	10afcf04 	addi	r2,r2,-16580
 400bf48:	d8800e15 	stw	r2,56(sp)
 400bf4c:	008100b4 	movhi	r2,1026
 400bf50:	10bfb804 	addi	r2,r2,-288
 400bf54:	d8800f15 	stw	r2,60(sp)
 400bf58:	00810074 	movhi	r2,1025
 400bf5c:	10b14504 	addi	r2,r2,-15084
 400bf60:	d9001515 	stw	r4,84(sp)
 400bf64:	d9000804 	addi	r4,sp,32
 400bf68:	d8801115 	stw	r2,68(sp)
 400bf6c:	dfc02215 	stw	ra,136(sp)
 400bf70:	df002115 	stw	fp,132(sp)
 400bf74:	dec01015 	stw	sp,64(sp)
 400bf78:	dec01215 	stw	sp,72(sp)
 400bf7c:	d9401915 	stw	r5,100(sp)
 400bf80:	d9801615 	stw	r6,88(sp)
 400bf84:	d9c01715 	stw	r7,92(sp)
 400bf88:	400dd340 	call	400dd34 <_Unwind_SjLj_Register>
 400bf8c:	d8c01517 	ldw	r3,84(sp)
 400bf90:	d8000715 	stw	zero,28(sp)
 400bf94:	d8000615 	stw	zero,24(sp)
 400bf98:	00800044 	movi	r2,1
 400bf9c:	18800926 	beq	r3,r2,400bfc4 <__gxx_personality_sj0+0x88>
 400bfa0:	01c000c4 	movi	r7,3
 400bfa4:	d9c01515 	stw	r7,84(sp)
 400bfa8:	d9000804 	addi	r4,sp,32
 400bfac:	400dd4c0 	call	400dd4c <_Unwind_SjLj_Unregister>
 400bfb0:	d8801517 	ldw	r2,84(sp)
 400bfb4:	dfc02217 	ldw	ra,136(sp)
 400bfb8:	df002117 	ldw	fp,132(sp)
 400bfbc:	dec02304 	addi	sp,sp,140
 400bfc0:	f800283a 	ret
 400bfc4:	d9001617 	ldw	r4,88(sp)
 400bfc8:	00af3574 	movhi	r2,48341
 400bfcc:	d9c01717 	ldw	r7,92(sp)
 400bfd0:	10b54004 	addi	r2,r2,-11008
 400bfd4:	00ee2cb4 	movhi	r3,47282
 400bfd8:	2085883a 	add	r2,r4,r2
 400bfdc:	18eaaf04 	addi	r3,r3,-21828
 400bfe0:	d8801b15 	stw	r2,108(sp)
 400bfe4:	38c7883a 	add	r3,r7,r3
 400bfe8:	1105803a 	cmpltu	r2,r2,r4
 400bfec:	10c7883a 	add	r3,r2,r3
 400bff0:	d8c01c15 	stw	r3,112(sp)
 400bff4:	d8c01917 	ldw	r3,100(sp)
 400bff8:	00800184 	movi	r2,6
 400bffc:	18805426 	beq	r3,r2,400c150 <__gxx_personality_sj0+0x214>
 400c000:	d9002417 	ldw	r4,144(sp)
 400c004:	00bfffc4 	movi	r2,-1
 400c008:	d8800915 	stw	r2,36(sp)
 400c00c:	400ddf00 	call	400ddf0 <_Unwind_GetLanguageSpecificData>
 400c010:	d8801a15 	stw	r2,104(sp)
 400c014:	1000c926 	beq	r2,zero,400c33c <__gxx_personality_sj0+0x400>
 400c018:	d9002417 	ldw	r4,144(sp)
 400c01c:	d80d883a 	mov	r6,sp
 400c020:	100b883a 	mov	r5,r2
 400c024:	400baac0 	call	400baac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400c028:	d9402417 	ldw	r5,144(sp)
 400c02c:	d9000503 	ldbu	r4,20(sp)
 400c030:	d8801515 	stw	r2,84(sp)
 400c034:	400ba200 	call	400ba20 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c038:	d9002417 	ldw	r4,144(sp)
 400c03c:	d9400604 	addi	r5,sp,24
 400c040:	d8800215 	stw	r2,8(sp)
 400c044:	400ddc00 	call	400ddc0 <_Unwind_GetIPInfo>
 400c048:	d8c00617 	ldw	r3,24(sp)
 400c04c:	18006126 	beq	r3,zero,400c1d4 <__gxx_personality_sj0+0x298>
 400c050:	1000ba16 	blt	r2,zero,400c33c <__gxx_personality_sj0+0x400>
 400c054:	10002f1e 	bne	r2,zero,400c114 <__gxx_personality_sj0+0x1d8>
 400c058:	d8001515 	stw	zero,84(sp)
 400c05c:	d8001f15 	stw	zero,124(sp)
 400c060:	d8001815 	stw	zero,96(sp)
 400c064:	00c00044 	movi	r3,1
 400c068:	d9001917 	ldw	r4,100(sp)
 400c06c:	2080004c 	andi	r2,r4,1
 400c070:	1000b51e 	bne	r2,zero,400c348 <__gxx_personality_sj0+0x40c>
 400c074:	d9001917 	ldw	r4,100(sp)
 400c078:	2080020c 	andi	r2,r4,8
 400c07c:	1000b71e 	bne	r2,zero,400c35c <__gxx_personality_sj0+0x420>
 400c080:	d9c01c17 	ldw	r7,112(sp)
 400c084:	3800b826 	beq	r7,zero,400c368 <__gxx_personality_sj0+0x42c>
 400c088:	00800044 	movi	r2,1
 400c08c:	1880b526 	beq	r3,r2,400c364 <__gxx_personality_sj0+0x428>
 400c090:	d9c01517 	ldw	r7,84(sp)
 400c094:	3800f516 	blt	r7,zero,400c46c <__gxx_personality_sj0+0x530>
 400c098:	d9002417 	ldw	r4,144(sp)
 400c09c:	d9802317 	ldw	r6,140(sp)
 400c0a0:	00bfffc4 	movi	r2,-1
 400c0a4:	000b883a 	mov	r5,zero
 400c0a8:	d8800915 	stw	r2,36(sp)
 400c0ac:	400dd940 	call	400dd94 <_Unwind_SetGR>
 400c0b0:	d9801517 	ldw	r6,84(sp)
 400c0b4:	d9002417 	ldw	r4,144(sp)
 400c0b8:	01400044 	movi	r5,1
 400c0bc:	400dd940 	call	400dd94 <_Unwind_SetGR>
 400c0c0:	d9002417 	ldw	r4,144(sp)
 400c0c4:	d9401f17 	ldw	r5,124(sp)
 400c0c8:	400dde00 	call	400dde0 <_Unwind_SetIP>
 400c0cc:	010001c4 	movi	r4,7
 400c0d0:	d9001515 	stw	r4,84(sp)
 400c0d4:	003fb406 	br	400bfa8 <__alt_mem_onchip_memory2_0+0xfc00ad28>
 400c0d8:	000f883a 	mov	r7,zero
 400c0dc:	000d883a 	mov	r6,zero
 400c0e0:	19000003 	ldbu	r4,0(r3)
 400c0e4:	18c00044 	addi	r3,r3,1
 400c0e8:	d8c01515 	stw	r3,84(sp)
 400c0ec:	21401fcc 	andi	r5,r4,127
 400c0f0:	298a983a 	sll	r5,r5,r6
 400c0f4:	21003fcc 	andi	r4,r4,255
 400c0f8:	2100201c 	xori	r4,r4,128
 400c0fc:	213fe004 	addi	r4,r4,-128
 400c100:	394eb03a 	or	r7,r7,r5
 400c104:	318001c4 	addi	r6,r6,7
 400c108:	203ff516 	blt	r4,zero,400c0e0 <__alt_mem_onchip_memory2_0+0xfc00ae60>
 400c10c:	10bfffc4 	addi	r2,r2,-1
 400c110:	10003226 	beq	r2,zero,400c1dc <__gxx_personality_sj0+0x2a0>
 400c114:	d9c01517 	ldw	r7,84(sp)
 400c118:	0011883a 	mov	r8,zero
 400c11c:	000d883a 	mov	r6,zero
 400c120:	39000003 	ldbu	r4,0(r7)
 400c124:	38c00044 	addi	r3,r7,1
 400c128:	180f883a 	mov	r7,r3
 400c12c:	21401fcc 	andi	r5,r4,127
 400c130:	298a983a 	sll	r5,r5,r6
 400c134:	21003fcc 	andi	r4,r4,255
 400c138:	2100201c 	xori	r4,r4,128
 400c13c:	213fe004 	addi	r4,r4,-128
 400c140:	4150b03a 	or	r8,r8,r5
 400c144:	318001c4 	addi	r6,r6,7
 400c148:	203ff516 	blt	r4,zero,400c120 <__alt_mem_onchip_memory2_0+0xfc00aea0>
 400c14c:	003fe206 	br	400c0d8 <__alt_mem_onchip_memory2_0+0xfc00ae58>
 400c150:	d9001c17 	ldw	r4,112(sp)
 400c154:	203faa1e 	bne	r4,zero,400c000 <__alt_mem_onchip_memory2_0+0xfc00ad80>
 400c158:	d9c01517 	ldw	r7,84(sp)
 400c15c:	d8801b17 	ldw	r2,108(sp)
 400c160:	38bfa736 	bltu	r7,r2,400c000 <__alt_mem_onchip_memory2_0+0xfc00ad80>
 400c164:	d8c02317 	ldw	r3,140(sp)
 400c168:	18fffe17 	ldw	r3,-8(r3)
 400c16c:	d8c01f15 	stw	r3,124(sp)
 400c170:	18008226 	beq	r3,zero,400c37c <__gxx_personality_sj0+0x440>
 400c174:	d9002317 	ldw	r4,140(sp)
 400c178:	d9c02317 	ldw	r7,140(sp)
 400c17c:	213ffb17 	ldw	r4,-20(r4)
 400c180:	39fffd17 	ldw	r7,-12(r7)
 400c184:	d9001515 	stw	r4,84(sp)
 400c188:	d9c01a15 	stw	r7,104(sp)
 400c18c:	d8801517 	ldw	r2,84(sp)
 400c190:	103fc10e 	bge	r2,zero,400c098 <__alt_mem_onchip_memory2_0+0xfc00ae18>
 400c194:	d9002417 	ldw	r4,144(sp)
 400c198:	d9401a17 	ldw	r5,104(sp)
 400c19c:	d80d883a 	mov	r6,sp
 400c1a0:	00bfffc4 	movi	r2,-1
 400c1a4:	d8800915 	stw	r2,36(sp)
 400c1a8:	400baac0 	call	400baac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400c1ac:	d9402417 	ldw	r5,144(sp)
 400c1b0:	d9000503 	ldbu	r4,20(sp)
 400c1b4:	400ba200 	call	400ba20 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c1b8:	d9000503 	ldbu	r4,20(sp)
 400c1bc:	d9402417 	ldw	r5,144(sp)
 400c1c0:	d8800215 	stw	r2,8(sp)
 400c1c4:	400ba200 	call	400ba20 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c1c8:	d8c02317 	ldw	r3,140(sp)
 400c1cc:	18bffe15 	stw	r2,-8(r3)
 400c1d0:	003fb106 	br	400c098 <__alt_mem_onchip_memory2_0+0xfc00ae18>
 400c1d4:	10bfffc4 	addi	r2,r2,-1
 400c1d8:	003f9d06 	br	400c050 <__alt_mem_onchip_memory2_0+0xfc00add0>
 400c1dc:	42000044 	addi	r8,r8,1
 400c1e0:	da001f15 	stw	r8,124(sp)
 400c1e4:	38005326 	beq	r7,zero,400c334 <__gxx_personality_sj0+0x3f8>
 400c1e8:	d8800417 	ldw	r2,16(sp)
 400c1ec:	39ffffc4 	addi	r7,r7,-1
 400c1f0:	11c5883a 	add	r2,r2,r7
 400c1f4:	d8801815 	stw	r2,96(sp)
 400c1f8:	40005026 	beq	r8,zero,400c33c <__gxx_personality_sj0+0x400>
 400c1fc:	10007426 	beq	r2,zero,400c3d0 <__gxx_personality_sj0+0x494>
 400c200:	d8801917 	ldw	r2,100(sp)
 400c204:	1080020c 	andi	r2,r2,8
 400c208:	d8802015 	stw	r2,128(sp)
 400c20c:	1000a21e 	bne	r2,zero,400c498 <__gxx_personality_sj0+0x55c>
 400c210:	d8c01c17 	ldw	r3,112(sp)
 400c214:	1800b026 	beq	r3,zero,400c4d8 <__gxx_personality_sj0+0x59c>
 400c218:	01c100f4 	movhi	r7,1027
 400c21c:	39e8a404 	addi	r7,r7,-23920
 400c220:	d9c01e15 	stw	r7,120(sp)
 400c224:	d8001d05 	stb	zero,116(sp)
 400c228:	d8c01817 	ldw	r3,96(sp)
 400c22c:	d8001515 	stw	zero,84(sp)
 400c230:	0009883a 	mov	r4,zero
 400c234:	19400003 	ldbu	r5,0(r3)
 400c238:	18800044 	addi	r2,r3,1
 400c23c:	d9c01517 	ldw	r7,84(sp)
 400c240:	28c01fcc 	andi	r3,r5,127
 400c244:	1906983a 	sll	r3,r3,r4
 400c248:	29803fcc 	andi	r6,r5,255
 400c24c:	3180201c 	xori	r6,r6,128
 400c250:	38ceb03a 	or	r7,r7,r3
 400c254:	d8801715 	stw	r2,92(sp)
 400c258:	31bfe004 	addi	r6,r6,-128
 400c25c:	d9c01515 	stw	r7,84(sp)
 400c260:	210001c4 	addi	r4,r4,7
 400c264:	1007883a 	mov	r3,r2
 400c268:	303ff216 	blt	r6,zero,400c234 <__alt_mem_onchip_memory2_0+0xfc00afb4>
 400c26c:	00c007c4 	movi	r3,31
 400c270:	19000836 	bltu	r3,r4,400c294 <__gxx_personality_sj0+0x358>
 400c274:	2940100c 	andi	r5,r5,64
 400c278:	28000626 	beq	r5,zero,400c294 <__gxx_personality_sj0+0x358>
 400c27c:	01c00044 	movi	r7,1
 400c280:	3908983a 	sll	r4,r7,r4
 400c284:	d8c01517 	ldw	r3,84(sp)
 400c288:	0109c83a 	sub	r4,zero,r4
 400c28c:	1906b03a 	or	r3,r3,r4
 400c290:	d8c01515 	stw	r3,84(sp)
 400c294:	d8001615 	stw	zero,88(sp)
 400c298:	0009883a 	mov	r4,zero
 400c29c:	11400003 	ldbu	r5,0(r2)
 400c2a0:	d9c01617 	ldw	r7,88(sp)
 400c2a4:	10800044 	addi	r2,r2,1
 400c2a8:	28c01fcc 	andi	r3,r5,127
 400c2ac:	1906983a 	sll	r3,r3,r4
 400c2b0:	29803fcc 	andi	r6,r5,255
 400c2b4:	3180201c 	xori	r6,r6,128
 400c2b8:	38ceb03a 	or	r7,r7,r3
 400c2bc:	31bfe004 	addi	r6,r6,-128
 400c2c0:	d9c01615 	stw	r7,88(sp)
 400c2c4:	210001c4 	addi	r4,r4,7
 400c2c8:	303ff416 	blt	r6,zero,400c29c <__alt_mem_onchip_memory2_0+0xfc00b01c>
 400c2cc:	008007c4 	movi	r2,31
 400c2d0:	11000736 	bltu	r2,r4,400c2f0 <__gxx_personality_sj0+0x3b4>
 400c2d4:	2940100c 	andi	r5,r5,64
 400c2d8:	28000526 	beq	r5,zero,400c2f0 <__gxx_personality_sj0+0x3b4>
 400c2dc:	00c00044 	movi	r3,1
 400c2e0:	1908983a 	sll	r4,r3,r4
 400c2e4:	0109c83a 	sub	r4,zero,r4
 400c2e8:	390eb03a 	or	r7,r7,r4
 400c2ec:	d9c01615 	stw	r7,88(sp)
 400c2f0:	d9001517 	ldw	r4,84(sp)
 400c2f4:	20003c26 	beq	r4,zero,400c3e8 <__gxx_personality_sj0+0x4ac>
 400c2f8:	01003e0e 	bge	zero,r4,400c3f4 <__gxx_personality_sj0+0x4b8>
 400c2fc:	01ffffc4 	movi	r7,-1
 400c300:	200b883a 	mov	r5,r4
 400c304:	d809883a 	mov	r4,sp
 400c308:	d9c00915 	stw	r7,36(sp)
 400c30c:	400b9cc0 	call	400b9cc <_ZL15get_ttype_entryP16lsda_header_infom>
 400c310:	10005f26 	beq	r2,zero,400c490 <__gxx_personality_sj0+0x554>
 400c314:	d8c01e17 	ldw	r3,120(sp)
 400c318:	1800571e 	bne	r3,zero,400c478 <__gxx_personality_sj0+0x53c>
 400c31c:	d9001617 	ldw	r4,88(sp)
 400c320:	20002926 	beq	r4,zero,400c3c8 <__gxx_personality_sj0+0x48c>
 400c324:	d9c01717 	ldw	r7,92(sp)
 400c328:	390f883a 	add	r7,r7,r4
 400c32c:	d9c01815 	stw	r7,96(sp)
 400c330:	003fbd06 	br	400c228 <__alt_mem_onchip_memory2_0+0xfc00afa8>
 400c334:	d8c01f17 	ldw	r3,124(sp)
 400c338:	1800251e 	bne	r3,zero,400c3d0 <__gxx_personality_sj0+0x494>
 400c33c:	01000204 	movi	r4,8
 400c340:	d9001515 	stw	r4,84(sp)
 400c344:	003f1806 	br	400bfa8 <__alt_mem_onchip_memory2_0+0xfc00ad28>
 400c348:	d8801c17 	ldw	r2,112(sp)
 400c34c:	10000d26 	beq	r2,zero,400c384 <__gxx_personality_sj0+0x448>
 400c350:	00800184 	movi	r2,6
 400c354:	d8801515 	stw	r2,84(sp)
 400c358:	003f1306 	br	400bfa8 <__alt_mem_onchip_memory2_0+0xfc00ad28>
 400c35c:	00800044 	movi	r2,1
 400c360:	18bf4d1e 	bne	r3,r2,400c098 <__alt_mem_onchip_memory2_0+0xfc00ae18>
 400c364:	400b6940 	call	400b694 <_ZSt9terminatev>
 400c368:	d9001b17 	ldw	r4,108(sp)
 400c36c:	00800044 	movi	r2,1
 400c370:	113f4536 	bltu	r2,r4,400c088 <__alt_mem_onchip_memory2_0+0xfc00ae08>
 400c374:	00800044 	movi	r2,1
 400c378:	18bf841e 	bne	r3,r2,400c18c <__alt_mem_onchip_memory2_0+0xfc00af0c>
 400c37c:	d9002317 	ldw	r4,140(sp)
 400c380:	400cd180 	call	400cd18 <__cxa_call_terminate>
 400c384:	d8c01b17 	ldw	r3,108(sp)
 400c388:	00800044 	movi	r2,1
 400c38c:	10fff036 	bltu	r2,r3,400c350 <__alt_mem_onchip_memory2_0+0xfc00b0d0>
 400c390:	d9002317 	ldw	r4,140(sp)
 400c394:	d8801817 	ldw	r2,96(sp)
 400c398:	d9c01517 	ldw	r7,84(sp)
 400c39c:	d8c01a17 	ldw	r3,104(sp)
 400c3a0:	20bffc15 	stw	r2,-16(r4)
 400c3a4:	d8800717 	ldw	r2,28(sp)
 400c3a8:	21fffb15 	stw	r7,-20(r4)
 400c3ac:	d9c01f17 	ldw	r7,124(sp)
 400c3b0:	20bfff15 	stw	r2,-4(r4)
 400c3b4:	00800184 	movi	r2,6
 400c3b8:	20fffd15 	stw	r3,-12(r4)
 400c3bc:	21fffe15 	stw	r7,-8(r4)
 400c3c0:	d8801515 	stw	r2,84(sp)
 400c3c4:	003ef806 	br	400bfa8 <__alt_mem_onchip_memory2_0+0xfc00ad28>
 400c3c8:	d8801d03 	ldbu	r2,116(sp)
 400c3cc:	103fdb26 	beq	r2,zero,400c33c <__alt_mem_onchip_memory2_0+0xfc00b0bc>
 400c3d0:	d8c01917 	ldw	r3,100(sp)
 400c3d4:	1880004c 	andi	r2,r3,1
 400c3d8:	103fd81e 	bne	r2,zero,400c33c <__alt_mem_onchip_memory2_0+0xfc00b0bc>
 400c3dc:	d8001515 	stw	zero,84(sp)
 400c3e0:	00c00084 	movi	r3,2
 400c3e4:	003f2306 	br	400c074 <__alt_mem_onchip_memory2_0+0xfc00adf4>
 400c3e8:	00c00044 	movi	r3,1
 400c3ec:	d8c01d05 	stb	r3,116(sp)
 400c3f0:	003fca06 	br	400c31c <__alt_mem_onchip_memory2_0+0xfc00b09c>
 400c3f4:	d9001e17 	ldw	r4,120(sp)
 400c3f8:	20000426 	beq	r4,zero,400c40c <__gxx_personality_sj0+0x4d0>
 400c3fc:	d9c02017 	ldw	r7,128(sp)
 400c400:	3800021e 	bne	r7,zero,400c40c <__gxx_personality_sj0+0x4d0>
 400c404:	d8801c17 	ldw	r2,112(sp)
 400c408:	10002726 	beq	r2,zero,400c4a8 <__gxx_personality_sj0+0x56c>
 400c40c:	d8801517 	ldw	r2,84(sp)
 400c410:	000d883a 	mov	r6,zero
 400c414:	000b883a 	mov	r5,zero
 400c418:	0088303a 	nor	r4,zero,r2
 400c41c:	d8800317 	ldw	r2,12(sp)
 400c420:	1109883a 	add	r4,r2,r4
 400c424:	20800003 	ldbu	r2,0(r4)
 400c428:	21000044 	addi	r4,r4,1
 400c42c:	10c01fcc 	andi	r3,r2,127
 400c430:	1946983a 	sll	r3,r3,r5
 400c434:	10803fcc 	andi	r2,r2,255
 400c438:	1080201c 	xori	r2,r2,128
 400c43c:	10bfe004 	addi	r2,r2,-128
 400c440:	30ccb03a 	or	r6,r6,r3
 400c444:	294001c4 	addi	r5,r5,7
 400c448:	103ff616 	blt	r2,zero,400c424 <__alt_mem_onchip_memory2_0+0xfc00b1a4>
 400c44c:	3005003a 	cmpeq	r2,r6,zero
 400c450:	10803fcc 	andi	r2,r2,255
 400c454:	103fb126 	beq	r2,zero,400c31c <__alt_mem_onchip_memory2_0+0xfc00b09c>
 400c458:	d9c01917 	ldw	r7,100(sp)
 400c45c:	3880004c 	andi	r2,r7,1
 400c460:	103fb91e 	bne	r2,zero,400c348 <__alt_mem_onchip_memory2_0+0xfc00b0c8>
 400c464:	d8802017 	ldw	r2,128(sp)
 400c468:	10002d26 	beq	r2,zero,400c520 <__gxx_personality_sj0+0x5e4>
 400c46c:	00800044 	movi	r2,1
 400c470:	d8800915 	stw	r2,36(sp)
 400c474:	400b6bc0 	call	400b6bc <_ZSt10unexpectedv>
 400c478:	d9800704 	addi	r6,sp,28
 400c47c:	180b883a 	mov	r5,r3
 400c480:	1009883a 	mov	r4,r2
 400c484:	400bbe00 	call	400bbe0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400c488:	10803fcc 	andi	r2,r2,255
 400c48c:	103fa326 	beq	r2,zero,400c31c <__alt_mem_onchip_memory2_0+0xfc00b09c>
 400c490:	00c000c4 	movi	r3,3
 400c494:	003ef406 	br	400c068 <__alt_mem_onchip_memory2_0+0xfc00ade8>
 400c498:	010100f4 	movhi	r4,1027
 400c49c:	2128a204 	addi	r4,r4,-23928
 400c4a0:	d9001e15 	stw	r4,120(sp)
 400c4a4:	003f5f06 	br	400c224 <__alt_mem_onchip_memory2_0+0xfc00afa4>
 400c4a8:	d9001b17 	ldw	r4,108(sp)
 400c4ac:	00c00044 	movi	r3,1
 400c4b0:	193fd636 	bltu	r3,r4,400c40c <__alt_mem_onchip_memory2_0+0xfc00b18c>
 400c4b4:	01ffffc4 	movi	r7,-1
 400c4b8:	d9c00915 	stw	r7,36(sp)
 400c4bc:	d9800717 	ldw	r6,28(sp)
 400c4c0:	d9c01517 	ldw	r7,84(sp)
 400c4c4:	d9401e17 	ldw	r5,120(sp)
 400c4c8:	d809883a 	mov	r4,sp
 400c4cc:	400be940 	call	400be94 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400c4d0:	1080005c 	xori	r2,r2,1
 400c4d4:	003fde06 	br	400c450 <__alt_mem_onchip_memory2_0+0xfc00b1d0>
 400c4d8:	d9001b17 	ldw	r4,108(sp)
 400c4dc:	00800044 	movi	r2,1
 400c4e0:	113f4d36 	bltu	r2,r4,400c218 <__alt_mem_onchip_memory2_0+0xfc00af98>
 400c4e4:	d9c02317 	ldw	r7,140(sp)
 400c4e8:	38800017 	ldw	r2,0(r7)
 400c4ec:	1080004c 	andi	r2,r2,1
 400c4f0:	1000061e 	bne	r2,zero,400c50c <__gxx_personality_sj0+0x5d0>
 400c4f4:	d8c02317 	ldw	r3,140(sp)
 400c4f8:	18800504 	addi	r2,r3,20
 400c4fc:	d8800715 	stw	r2,28(sp)
 400c500:	10bff017 	ldw	r2,-64(r2)
 400c504:	d8801e15 	stw	r2,120(sp)
 400c508:	003f4606 	br	400c224 <__alt_mem_onchip_memory2_0+0xfc00afa4>
 400c50c:	38bff517 	ldw	r2,-44(r7)
 400c510:	003ffa06 	br	400c4fc <__alt_mem_onchip_memory2_0+0xfc00b27c>
 400c514:	d9000a17 	ldw	r4,40(sp)
 400c518:	400c8cc0 	call	400c8cc <__cxa_begin_catch>
 400c51c:	003f9106 	br	400c364 <__alt_mem_onchip_memory2_0+0xfc00b0e4>
 400c520:	d9c01c17 	ldw	r7,112(sp)
 400c524:	383eda1e 	bne	r7,zero,400c090 <__alt_mem_onchip_memory2_0+0xfc00ae10>
 400c528:	d8c01b17 	ldw	r3,108(sp)
 400c52c:	00800044 	movi	r2,1
 400c530:	10fed736 	bltu	r2,r3,400c090 <__alt_mem_onchip_memory2_0+0xfc00ae10>
 400c534:	00c000c4 	movi	r3,3
 400c538:	003f8e06 	br	400c374 <__alt_mem_onchip_memory2_0+0xfc00b0f4>

0400c53c <__cxa_call_unexpected>:
 400c53c:	00810074 	movhi	r2,1025
 400c540:	deffe604 	addi	sp,sp,-104
 400c544:	10afcf04 	addi	r2,r2,-16580
 400c548:	d8800d15 	stw	r2,52(sp)
 400c54c:	008100b4 	movhi	r2,1026
 400c550:	10bfbc04 	addi	r2,r2,-272
 400c554:	d8800e15 	stw	r2,56(sp)
 400c558:	d8800104 	addi	r2,sp,4
 400c55c:	d8800f15 	stw	r2,60(sp)
 400c560:	00810074 	movhi	r2,1025
 400c564:	10b17204 	addi	r2,r2,-14904
 400c568:	d9001415 	stw	r4,80(sp)
 400c56c:	d9000704 	addi	r4,sp,28
 400c570:	dfc01915 	stw	ra,100(sp)
 400c574:	d8801015 	stw	r2,64(sp)
 400c578:	df001815 	stw	fp,96(sp)
 400c57c:	dec01115 	stw	sp,68(sp)
 400c580:	400dd340 	call	400dd34 <_Unwind_SjLj_Register>
 400c584:	d9001417 	ldw	r4,80(sp)
 400c588:	400c8cc0 	call	400c8cc <__cxa_begin_catch>
 400c58c:	d8c01417 	ldw	r3,80(sp)
 400c590:	18bffe17 	ldw	r2,-8(r3)
 400c594:	193ff717 	ldw	r4,-36(r3)
 400c598:	18fffd17 	ldw	r3,-12(r3)
 400c59c:	d8800315 	stw	r2,12(sp)
 400c5a0:	d8c01615 	stw	r3,88(sp)
 400c5a4:	d8c01417 	ldw	r3,80(sp)
 400c5a8:	18fffb17 	ldw	r3,-20(r3)
 400c5ac:	d8c01515 	stw	r3,84(sp)
 400c5b0:	d8c01417 	ldw	r3,80(sp)
 400c5b4:	18fff817 	ldw	r3,-32(r3)
 400c5b8:	d8c01415 	stw	r3,80(sp)
 400c5bc:	00c00044 	movi	r3,1
 400c5c0:	d8c00815 	stw	r3,32(sp)
 400c5c4:	400b6ac0 	call	400b6ac <_ZN10__cxxabiv112__unexpectedEPFvvE>
 400c5c8:	d8c00917 	ldw	r3,36(sp)
 400c5cc:	d8800817 	ldw	r2,32(sp)
 400c5d0:	d8c01715 	stw	r3,92(sp)
 400c5d4:	10000a26 	beq	r2,zero,400c600 <__cxa_call_unexpected+0xc4>
 400c5d8:	10bfffc4 	addi	r2,r2,-1
 400c5dc:	10000126 	beq	r2,zero,400c5e4 <__cxa_call_unexpected+0xa8>
 400c5e0:	003b68fa 	trap	3
 400c5e4:	d8000815 	stw	zero,32(sp)
 400c5e8:	400c9800 	call	400c980 <__cxa_end_catch>
 400c5ec:	400c9800 	call	400c980 <__cxa_end_catch>
 400c5f0:	d9001717 	ldw	r4,92(sp)
 400c5f4:	00bfffc4 	movi	r2,-1
 400c5f8:	d8800815 	stw	r2,32(sp)
 400c5fc:	400df300 	call	400df30 <_Unwind_SjLj_Resume>
 400c600:	d9001717 	ldw	r4,92(sp)
 400c604:	400c8cc0 	call	400c8cc <__cxa_begin_catch>
 400c608:	400cd700 	call	400cd70 <__cxa_get_globals_fast>
 400c60c:	10800017 	ldw	r2,0(r2)
 400c610:	10c00b17 	ldw	r3,44(r2)
 400c614:	18c0004c 	andi	r3,r3,1
 400c618:	18001e26 	beq	r3,zero,400c694 <__cxa_call_unexpected+0x158>
 400c61c:	10800017 	ldw	r2,0(r2)
 400c620:	d8801715 	stw	r2,92(sp)
 400c624:	d8801517 	ldw	r2,84(sp)
 400c628:	00802b0e 	bge	zero,r2,400c6d8 <__cxa_call_unexpected+0x19c>
 400c62c:	d8c01717 	ldw	r3,92(sp)
 400c630:	d8800317 	ldw	r2,12(sp)
 400c634:	d9c01517 	ldw	r7,84(sp)
 400c638:	193ff017 	ldw	r4,-64(r3)
 400c63c:	d9801617 	ldw	r6,88(sp)
 400c640:	d8800015 	stw	r2,0(sp)
 400c644:	180b883a 	mov	r5,r3
 400c648:	00800084 	movi	r2,2
 400c64c:	d8800815 	stw	r2,32(sp)
 400c650:	400bc680 	call	400bc68 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400c654:	10803fcc 	andi	r2,r2,255
 400c658:	10001e1e 	bne	r2,zero,400c6d4 <__cxa_call_unexpected+0x198>
 400c65c:	d8800317 	ldw	r2,12(sp)
 400c660:	d9c01517 	ldw	r7,84(sp)
 400c664:	d9801617 	ldw	r6,88(sp)
 400c668:	010100b4 	movhi	r4,1026
 400c66c:	d8800015 	stw	r2,0(sp)
 400c670:	211b4e04 	addi	r4,r4,27960
 400c674:	00800084 	movi	r2,2
 400c678:	000b883a 	mov	r5,zero
 400c67c:	d8800815 	stw	r2,32(sp)
 400c680:	400bc680 	call	400bc68 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400c684:	10803fcc 	andi	r2,r2,255
 400c688:	1000051e 	bne	r2,zero,400c6a0 <__cxa_call_unexpected+0x164>
 400c68c:	d9001417 	ldw	r4,80(sp)
 400c690:	400b5d40 	call	400b5d4 <_ZN10__cxxabiv111__terminateEPFvvE>
 400c694:	10801004 	addi	r2,r2,64
 400c698:	d8801715 	stw	r2,92(sp)
 400c69c:	003fe106 	br	400c624 <__alt_mem_onchip_memory2_0+0xfc00b3a4>
 400c6a0:	01000104 	movi	r4,4
 400c6a4:	400cbb40 	call	400cbb4 <__cxa_allocate_exception>
 400c6a8:	00c100b4 	movhi	r3,1026
 400c6ac:	18db6904 	addi	r3,r3,28068
 400c6b0:	01810074 	movhi	r6,1025
 400c6b4:	014100b4 	movhi	r5,1026
 400c6b8:	10c00015 	stw	r3,0(r2)
 400c6bc:	31b36304 	addi	r6,r6,-12916
 400c6c0:	00c00084 	movi	r3,2
 400c6c4:	295b4e04 	addi	r5,r5,27960
 400c6c8:	1009883a 	mov	r4,r2
 400c6cc:	d8c00815 	stw	r3,32(sp)
 400c6d0:	400c7b00 	call	400c7b0 <__cxa_throw>
 400c6d4:	400c8400 	call	400c840 <__cxa_rethrow>
 400c6d8:	d9401617 	ldw	r5,88(sp)
 400c6dc:	00800084 	movi	r2,2
 400c6e0:	d9800104 	addi	r6,sp,4
 400c6e4:	0009883a 	mov	r4,zero
 400c6e8:	d8800815 	stw	r2,32(sp)
 400c6ec:	400baac0 	call	400baac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400c6f0:	d9801717 	ldw	r6,92(sp)
 400c6f4:	d9c01517 	ldw	r7,84(sp)
 400c6f8:	d9000104 	addi	r4,sp,4
 400c6fc:	317ff017 	ldw	r5,-64(r6)
 400c700:	400be940 	call	400be94 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400c704:	10803fcc 	andi	r2,r2,255
 400c708:	1000171e 	bne	r2,zero,400c768 <__cxa_call_unexpected+0x22c>
 400c70c:	d9c01517 	ldw	r7,84(sp)
 400c710:	014100b4 	movhi	r5,1026
 400c714:	00800084 	movi	r2,2
 400c718:	295b4e04 	addi	r5,r5,27960
 400c71c:	000d883a 	mov	r6,zero
 400c720:	d9000104 	addi	r4,sp,4
 400c724:	d8800815 	stw	r2,32(sp)
 400c728:	400be940 	call	400be94 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400c72c:	10803fcc 	andi	r2,r2,255
 400c730:	103fd626 	beq	r2,zero,400c68c <__alt_mem_onchip_memory2_0+0xfc00b40c>
 400c734:	01000104 	movi	r4,4
 400c738:	400cbb40 	call	400cbb4 <__cxa_allocate_exception>
 400c73c:	00c100b4 	movhi	r3,1026
 400c740:	18db6904 	addi	r3,r3,28068
 400c744:	01810074 	movhi	r6,1025
 400c748:	014100b4 	movhi	r5,1026
 400c74c:	10c00015 	stw	r3,0(r2)
 400c750:	31b36304 	addi	r6,r6,-12916
 400c754:	00c00084 	movi	r3,2
 400c758:	295b4e04 	addi	r5,r5,27960
 400c75c:	1009883a 	mov	r4,r2
 400c760:	d8c00815 	stw	r3,32(sp)
 400c764:	400c7b00 	call	400c7b0 <__cxa_throw>
 400c768:	400c8400 	call	400c840 <__cxa_rethrow>

0400c76c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 400c76c:	defffe04 	addi	sp,sp,-8
 400c770:	dfc00115 	stw	ra,4(sp)
 400c774:	dc000015 	stw	r16,0(sp)
 400c778:	00800044 	movi	r2,1
 400c77c:	11000a36 	bltu	r2,r4,400c7a8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
 400c780:	28bff617 	ldw	r2,-40(r5)
 400c784:	2c000504 	addi	r16,r5,20
 400c788:	10000226 	beq	r2,zero,400c794 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
 400c78c:	8009883a 	mov	r4,r16
 400c790:	103ee83a 	callr	r2
 400c794:	8009883a 	mov	r4,r16
 400c798:	dfc00117 	ldw	ra,4(sp)
 400c79c:	dc000017 	ldw	r16,0(sp)
 400c7a0:	dec00204 	addi	sp,sp,8
 400c7a4:	400cc141 	jmpi	400cc14 <__cxa_free_exception>
 400c7a8:	293ff817 	ldw	r4,-32(r5)
 400c7ac:	400b5d40 	call	400b5d4 <_ZN10__cxxabiv111__terminateEPFvvE>

0400c7b0 <__cxa_throw>:
 400c7b0:	defffb04 	addi	sp,sp,-20
 400c7b4:	dfc00415 	stw	ra,16(sp)
 400c7b8:	dcc00315 	stw	r19,12(sp)
 400c7bc:	dc800215 	stw	r18,8(sp)
 400c7c0:	2827883a 	mov	r19,r5
 400c7c4:	3025883a 	mov	r18,r6
 400c7c8:	dc400115 	stw	r17,4(sp)
 400c7cc:	dc000015 	stw	r16,0(sp)
 400c7d0:	2021883a 	mov	r16,r4
 400c7d4:	400cd7c0 	call	400cd7c <__cxa_get_globals>
 400c7d8:	10c00117 	ldw	r3,4(r2)
 400c7dc:	847ffb04 	addi	r17,r16,-20
 400c7e0:	18c00044 	addi	r3,r3,1
 400c7e4:	10c00115 	stw	r3,4(r2)
 400c7e8:	00800044 	movi	r2,1
 400c7ec:	80bfef15 	stw	r2,-68(r16)
 400c7f0:	84fff015 	stw	r19,-64(r16)
 400c7f4:	84bff115 	stw	r18,-60(r16)
 400c7f8:	400b70c0 	call	400b70c <_ZSt14get_unexpectedv>
 400c7fc:	80bff215 	stw	r2,-56(r16)
 400c800:	400b6e80 	call	400b6e8 <_ZSt13get_terminatev>
 400c804:	80bff315 	stw	r2,-52(r16)
 400c808:	0090caf4 	movhi	r2,17195
 400c80c:	108ac004 	addi	r2,r2,11008
 400c810:	80bffb15 	stw	r2,-20(r16)
 400c814:	0091d3b4 	movhi	r2,18254
 400c818:	109550c4 	addi	r2,r2,21827
 400c81c:	80bffc15 	stw	r2,-16(r16)
 400c820:	00810074 	movhi	r2,1025
 400c824:	10b1db04 	addi	r2,r2,-14484
 400c828:	8809883a 	mov	r4,r17
 400c82c:	80bffd15 	stw	r2,-12(r16)
 400c830:	400de1c0 	call	400de1c <_Unwind_SjLj_RaiseException>
 400c834:	8809883a 	mov	r4,r17
 400c838:	400c8cc0 	call	400c8cc <__cxa_begin_catch>
 400c83c:	400b6940 	call	400b694 <_ZSt9terminatev>

0400c840 <__cxa_rethrow>:
 400c840:	defffe04 	addi	sp,sp,-8
 400c844:	dfc00115 	stw	ra,4(sp)
 400c848:	dc000015 	stw	r16,0(sp)
 400c84c:	400cd7c0 	call	400cd7c <__cxa_get_globals>
 400c850:	10c00117 	ldw	r3,4(r2)
 400c854:	11000017 	ldw	r4,0(r2)
 400c858:	18c00044 	addi	r3,r3,1
 400c85c:	10c00115 	stw	r3,4(r2)
 400c860:	20001126 	beq	r4,zero,400c8a8 <__cxa_rethrow+0x68>
 400c864:	21400b17 	ldw	r5,44(r4)
 400c868:	01ef3574 	movhi	r7,48341
 400c86c:	39f54004 	addi	r7,r7,-11008
 400c870:	29cf883a 	add	r7,r5,r7
 400c874:	20c00c17 	ldw	r3,48(r4)
 400c878:	394d803a 	cmpltu	r6,r7,r5
 400c87c:	016e2cb4 	movhi	r5,47282
 400c880:	296aaf04 	addi	r5,r5,-21828
 400c884:	1947883a 	add	r3,r3,r5
 400c888:	30c7883a 	add	r3,r6,r3
 400c88c:	18000726 	beq	r3,zero,400c8ac <__cxa_rethrow+0x6c>
 400c890:	10000015 	stw	zero,0(r2)
 400c894:	24000b04 	addi	r16,r4,44
 400c898:	8009883a 	mov	r4,r16
 400c89c:	400df740 	call	400df74 <_Unwind_SjLj_Resume_or_Rethrow>
 400c8a0:	8009883a 	mov	r4,r16
 400c8a4:	400c8cc0 	call	400c8cc <__cxa_begin_catch>
 400c8a8:	400b6940 	call	400b694 <_ZSt9terminatev>
 400c8ac:	00c00044 	movi	r3,1
 400c8b0:	19fff736 	bltu	r3,r7,400c890 <__alt_mem_onchip_memory2_0+0xfc00b610>
 400c8b4:	20800517 	ldw	r2,20(r4)
 400c8b8:	0085c83a 	sub	r2,zero,r2
 400c8bc:	20800515 	stw	r2,20(r4)
 400c8c0:	003ff406 	br	400c894 <__alt_mem_onchip_memory2_0+0xfc00b614>

0400c8c4 <__cxa_get_exception_ptr>:
 400c8c4:	20bfff17 	ldw	r2,-4(r4)
 400c8c8:	f800283a 	ret

0400c8cc <__cxa_begin_catch>:
 400c8cc:	defffe04 	addi	sp,sp,-8
 400c8d0:	dc000015 	stw	r16,0(sp)
 400c8d4:	dfc00115 	stw	ra,4(sp)
 400c8d8:	2021883a 	mov	r16,r4
 400c8dc:	400cd7c0 	call	400cd7c <__cxa_get_globals>
 400c8e0:	81000017 	ldw	r4,0(r16)
 400c8e4:	80c00117 	ldw	r3,4(r16)
 400c8e8:	01af3574 	movhi	r6,48341
 400c8ec:	31b54004 	addi	r6,r6,-11008
 400c8f0:	016e2cb4 	movhi	r5,47282
 400c8f4:	296aaf04 	addi	r5,r5,-21828
 400c8f8:	218d883a 	add	r6,r4,r6
 400c8fc:	3109803a 	cmpltu	r4,r6,r4
 400c900:	1947883a 	add	r3,r3,r5
 400c904:	20c7883a 	add	r3,r4,r3
 400c908:	817ff504 	addi	r5,r16,-44
 400c90c:	11000017 	ldw	r4,0(r2)
 400c910:	18000726 	beq	r3,zero,400c930 <__cxa_begin_catch+0x64>
 400c914:	2000191e 	bne	r4,zero,400c97c <__cxa_begin_catch+0xb0>
 400c918:	11400015 	stw	r5,0(r2)
 400c91c:	0005883a 	mov	r2,zero
 400c920:	dfc00117 	ldw	ra,4(sp)
 400c924:	dc000017 	ldw	r16,0(sp)
 400c928:	dec00204 	addi	sp,sp,8
 400c92c:	f800283a 	ret
 400c930:	01c00044 	movi	r7,1
 400c934:	39bff736 	bltu	r7,r6,400c914 <__alt_mem_onchip_memory2_0+0xfc00b694>
 400c938:	80fffa17 	ldw	r3,-24(r16)
 400c93c:	18000d16 	blt	r3,zero,400c974 <__cxa_begin_catch+0xa8>
 400c940:	18c00044 	addi	r3,r3,1
 400c944:	11800117 	ldw	r6,4(r2)
 400c948:	80fffa15 	stw	r3,-24(r16)
 400c94c:	30ffffc4 	addi	r3,r6,-1
 400c950:	10c00115 	stw	r3,4(r2)
 400c954:	21400226 	beq	r4,r5,400c960 <__cxa_begin_catch+0x94>
 400c958:	813ff915 	stw	r4,-28(r16)
 400c95c:	11400015 	stw	r5,0(r2)
 400c960:	80bfff17 	ldw	r2,-4(r16)
 400c964:	dfc00117 	ldw	ra,4(sp)
 400c968:	dc000017 	ldw	r16,0(sp)
 400c96c:	dec00204 	addi	sp,sp,8
 400c970:	f800283a 	ret
 400c974:	38c7c83a 	sub	r3,r7,r3
 400c978:	003ff206 	br	400c944 <__alt_mem_onchip_memory2_0+0xfc00b6c4>
 400c97c:	400b6940 	call	400b694 <_ZSt9terminatev>

0400c980 <__cxa_end_catch>:
 400c980:	deffff04 	addi	sp,sp,-4
 400c984:	dfc00015 	stw	ra,0(sp)
 400c988:	400cd700 	call	400cd70 <__cxa_get_globals_fast>
 400c98c:	11000017 	ldw	r4,0(r2)
 400c990:	20001426 	beq	r4,zero,400c9e4 <__cxa_end_catch+0x64>
 400c994:	21400b17 	ldw	r5,44(r4)
 400c998:	01ef3574 	movhi	r7,48341
 400c99c:	39f54004 	addi	r7,r7,-11008
 400c9a0:	29cf883a 	add	r7,r5,r7
 400c9a4:	20c00c17 	ldw	r3,48(r4)
 400c9a8:	394d803a 	cmpltu	r6,r7,r5
 400c9ac:	016e2cb4 	movhi	r5,47282
 400c9b0:	296aaf04 	addi	r5,r5,-21828
 400c9b4:	1947883a 	add	r3,r3,r5
 400c9b8:	30c7883a 	add	r3,r6,r3
 400c9bc:	18000c1e 	bne	r3,zero,400c9f0 <__cxa_end_catch+0x70>
 400c9c0:	00c00044 	movi	r3,1
 400c9c4:	19c00a36 	bltu	r3,r7,400c9f0 <__cxa_end_catch+0x70>
 400c9c8:	20c00517 	ldw	r3,20(r4)
 400c9cc:	18000d16 	blt	r3,zero,400ca04 <__cxa_end_catch+0x84>
 400c9d0:	18ffffc4 	addi	r3,r3,-1
 400c9d4:	18001026 	beq	r3,zero,400ca18 <__cxa_end_catch+0x98>
 400c9d8:	00bfffc4 	movi	r2,-1
 400c9dc:	18801426 	beq	r3,r2,400ca30 <__cxa_end_catch+0xb0>
 400c9e0:	20c00515 	stw	r3,20(r4)
 400c9e4:	dfc00017 	ldw	ra,0(sp)
 400c9e8:	dec00104 	addi	sp,sp,4
 400c9ec:	f800283a 	ret
 400c9f0:	21000b04 	addi	r4,r4,44
 400c9f4:	10000015 	stw	zero,0(r2)
 400c9f8:	dfc00017 	ldw	ra,0(sp)
 400c9fc:	dec00104 	addi	sp,sp,4
 400ca00:	400dfc01 	jmpi	400dfc0 <_Unwind_DeleteException>
 400ca04:	18c00044 	addi	r3,r3,1
 400ca08:	183ff51e 	bne	r3,zero,400c9e0 <__alt_mem_onchip_memory2_0+0xfc00b760>
 400ca0c:	21400417 	ldw	r5,16(r4)
 400ca10:	11400015 	stw	r5,0(r2)
 400ca14:	003ff206 	br	400c9e0 <__alt_mem_onchip_memory2_0+0xfc00b760>
 400ca18:	20c00417 	ldw	r3,16(r4)
 400ca1c:	21000b04 	addi	r4,r4,44
 400ca20:	10c00015 	stw	r3,0(r2)
 400ca24:	dfc00017 	ldw	ra,0(sp)
 400ca28:	dec00104 	addi	sp,sp,4
 400ca2c:	400dfc01 	jmpi	400dfc0 <_Unwind_DeleteException>
 400ca30:	400b6940 	call	400b694 <_ZSt9terminatev>

0400ca34 <_ZSt18uncaught_exceptionv>:
 400ca34:	deffff04 	addi	sp,sp,-4
 400ca38:	dfc00015 	stw	ra,0(sp)
 400ca3c:	400cd7c0 	call	400cd7c <__cxa_get_globals>
 400ca40:	10800117 	ldw	r2,4(r2)
 400ca44:	1004c03a 	cmpne	r2,r2,zero
 400ca48:	dfc00017 	ldw	ra,0(sp)
 400ca4c:	dec00104 	addi	sp,sp,4
 400ca50:	f800283a 	ret

0400ca54 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 400ca54:	018100f4 	movhi	r6,1027
 400ca58:	31b57804 	addi	r6,r6,-10784
 400ca5c:	31400117 	ldw	r5,4(r6)
 400ca60:	223fff04 	addi	r8,r4,-4
 400ca64:	227fff17 	ldw	r9,-4(r4)
 400ca68:	28001326 	beq	r5,zero,400cab8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
 400ca6c:	424f883a 	add	r7,r8,r9
 400ca70:	29c01426 	beq	r5,r7,400cac4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
 400ca74:	28c00117 	ldw	r3,4(r5)
 400ca78:	18001c26 	beq	r3,zero,400caec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
 400ca7c:	38c00336 	bltu	r7,r3,400ca8c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 400ca80:	00001e06 	br	400cafc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
 400ca84:	3880052e 	bgeu	r7,r2,400ca9c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
 400ca88:	1007883a 	mov	r3,r2
 400ca8c:	18800117 	ldw	r2,4(r3)
 400ca90:	29800104 	addi	r6,r5,4
 400ca94:	180b883a 	mov	r5,r3
 400ca98:	103ffa1e 	bne	r2,zero,400ca84 <__alt_mem_onchip_memory2_0+0xfc00b804>
 400ca9c:	19400017 	ldw	r5,0(r3)
 400caa0:	194f883a 	add	r7,r3,r5
 400caa4:	41c00e26 	beq	r8,r7,400cae0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
 400caa8:	20800015 	stw	r2,0(r4)
 400caac:	30800017 	ldw	r2,0(r6)
 400cab0:	12000115 	stw	r8,4(r2)
 400cab4:	f800283a 	ret
 400cab8:	20000015 	stw	zero,0(r4)
 400cabc:	32000115 	stw	r8,4(r6)
 400cac0:	f800283a 	ret
 400cac4:	28c00017 	ldw	r3,0(r5)
 400cac8:	28800117 	ldw	r2,4(r5)
 400cacc:	1a53883a 	add	r9,r3,r9
 400cad0:	227fff15 	stw	r9,-4(r4)
 400cad4:	20800015 	stw	r2,0(r4)
 400cad8:	32000115 	stw	r8,4(r6)
 400cadc:	f800283a 	ret
 400cae0:	494b883a 	add	r5,r9,r5
 400cae4:	19400015 	stw	r5,0(r3)
 400cae8:	f800283a 	ret
 400caec:	0005883a 	mov	r2,zero
 400caf0:	2807883a 	mov	r3,r5
 400caf4:	31800104 	addi	r6,r6,4
 400caf8:	003fe806 	br	400ca9c <__alt_mem_onchip_memory2_0+0xfc00b81c>
 400cafc:	1805883a 	mov	r2,r3
 400cb00:	31800104 	addi	r6,r6,4
 400cb04:	2807883a 	mov	r3,r5
 400cb08:	003fe406 	br	400ca9c <__alt_mem_onchip_memory2_0+0xfc00b81c>

0400cb0c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 400cb0c:	20800104 	addi	r2,r4,4
 400cb10:	00c001c4 	movi	r3,7
 400cb14:	1880112e 	bgeu	r3,r2,400cb5c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 400cb18:	20c9883a 	add	r4,r4,r3
 400cb1c:	00bfff04 	movi	r2,-4
 400cb20:	208a703a 	and	r5,r4,r2
 400cb24:	018100f4 	movhi	r6,1027
 400cb28:	31b57804 	addi	r6,r6,-10784
 400cb2c:	30c00117 	ldw	r3,4(r6)
 400cb30:	18000826 	beq	r3,zero,400cb54 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 400cb34:	19000017 	ldw	r4,0(r3)
 400cb38:	21400436 	bltu	r4,r5,400cb4c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
 400cb3c:	00001a06 	br	400cba8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
 400cb40:	11000017 	ldw	r4,0(r2)
 400cb44:	2140072e 	bgeu	r4,r5,400cb64 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 400cb48:	1007883a 	mov	r3,r2
 400cb4c:	18800117 	ldw	r2,4(r3)
 400cb50:	103ffb1e 	bne	r2,zero,400cb40 <__alt_mem_onchip_memory2_0+0xfc00b8c0>
 400cb54:	0005883a 	mov	r2,zero
 400cb58:	f800283a 	ret
 400cb5c:	01400204 	movi	r5,8
 400cb60:	003ff006 	br	400cb24 <__alt_mem_onchip_memory2_0+0xfc00b8a4>
 400cb64:	18c00104 	addi	r3,r3,4
 400cb68:	2149c83a 	sub	r4,r4,r5
 400cb6c:	018001c4 	movi	r6,7
 400cb70:	3100092e 	bgeu	r6,r4,400cb98 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
 400cb74:	11c00117 	ldw	r7,4(r2)
 400cb78:	114d883a 	add	r6,r2,r5
 400cb7c:	31000015 	stw	r4,0(r6)
 400cb80:	31c00115 	stw	r7,4(r6)
 400cb84:	18800017 	ldw	r2,0(r3)
 400cb88:	11400015 	stw	r5,0(r2)
 400cb8c:	19800015 	stw	r6,0(r3)
 400cb90:	10800104 	addi	r2,r2,4
 400cb94:	f800283a 	ret
 400cb98:	11000117 	ldw	r4,4(r2)
 400cb9c:	10800104 	addi	r2,r2,4
 400cba0:	19000015 	stw	r4,0(r3)
 400cba4:	f800283a 	ret
 400cba8:	1805883a 	mov	r2,r3
 400cbac:	30c00104 	addi	r3,r6,4
 400cbb0:	003fed06 	br	400cb68 <__alt_mem_onchip_memory2_0+0xfc00b8e8>

0400cbb4 <__cxa_allocate_exception>:
 400cbb4:	defffd04 	addi	sp,sp,-12
 400cbb8:	dc400115 	stw	r17,4(sp)
 400cbbc:	24401104 	addi	r17,r4,68
 400cbc0:	8809883a 	mov	r4,r17
 400cbc4:	dc000015 	stw	r16,0(sp)
 400cbc8:	dfc00215 	stw	ra,8(sp)
 400cbcc:	400e1140 	call	400e114 <malloc>
 400cbd0:	1021883a 	mov	r16,r2
 400cbd4:	10000a26 	beq	r2,zero,400cc00 <__cxa_allocate_exception+0x4c>
 400cbd8:	01801104 	movi	r6,68
 400cbdc:	000b883a 	mov	r5,zero
 400cbe0:	8009883a 	mov	r4,r16
 400cbe4:	400ea900 	call	400ea90 <memset>
 400cbe8:	80801104 	addi	r2,r16,68
 400cbec:	dfc00217 	ldw	ra,8(sp)
 400cbf0:	dc400117 	ldw	r17,4(sp)
 400cbf4:	dc000017 	ldw	r16,0(sp)
 400cbf8:	dec00304 	addi	sp,sp,12
 400cbfc:	f800283a 	ret
 400cc00:	8809883a 	mov	r4,r17
 400cc04:	400cb0c0 	call	400cb0c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400cc08:	1021883a 	mov	r16,r2
 400cc0c:	103ff21e 	bne	r2,zero,400cbd8 <__alt_mem_onchip_memory2_0+0xfc00b958>
 400cc10:	400b6940 	call	400b694 <_ZSt9terminatev>

0400cc14 <__cxa_free_exception>:
 400cc14:	00c100f4 	movhi	r3,1027
 400cc18:	18f57804 	addi	r3,r3,-10784
 400cc1c:	18800217 	ldw	r2,8(r3)
 400cc20:	213fef04 	addi	r4,r4,-68
 400cc24:	1100042e 	bgeu	r2,r4,400cc38 <__cxa_free_exception+0x24>
 400cc28:	18c00317 	ldw	r3,12(r3)
 400cc2c:	10c5883a 	add	r2,r2,r3
 400cc30:	2080012e 	bgeu	r4,r2,400cc38 <__cxa_free_exception+0x24>
 400cc34:	400ca541 	jmpi	400ca54 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400cc38:	400e1281 	jmpi	400e128 <free>

0400cc3c <__cxa_allocate_dependent_exception>:
 400cc3c:	defffe04 	addi	sp,sp,-8
 400cc40:	01001004 	movi	r4,64
 400cc44:	dc000015 	stw	r16,0(sp)
 400cc48:	dfc00115 	stw	ra,4(sp)
 400cc4c:	400e1140 	call	400e114 <malloc>
 400cc50:	1021883a 	mov	r16,r2
 400cc54:	10000926 	beq	r2,zero,400cc7c <__cxa_allocate_dependent_exception+0x40>
 400cc58:	01801004 	movi	r6,64
 400cc5c:	000b883a 	mov	r5,zero
 400cc60:	8009883a 	mov	r4,r16
 400cc64:	400ea900 	call	400ea90 <memset>
 400cc68:	8005883a 	mov	r2,r16
 400cc6c:	dfc00117 	ldw	ra,4(sp)
 400cc70:	dc000017 	ldw	r16,0(sp)
 400cc74:	dec00204 	addi	sp,sp,8
 400cc78:	f800283a 	ret
 400cc7c:	01001004 	movi	r4,64
 400cc80:	400cb0c0 	call	400cb0c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400cc84:	1021883a 	mov	r16,r2
 400cc88:	103ff31e 	bne	r2,zero,400cc58 <__alt_mem_onchip_memory2_0+0xfc00b9d8>
 400cc8c:	400b6940 	call	400b694 <_ZSt9terminatev>

0400cc90 <__cxa_free_dependent_exception>:
 400cc90:	014100f4 	movhi	r5,1027
 400cc94:	29757804 	addi	r5,r5,-10784
 400cc98:	28c00217 	ldw	r3,8(r5)
 400cc9c:	2005883a 	mov	r2,r4
 400cca0:	1900042e 	bgeu	r3,r4,400ccb4 <__cxa_free_dependent_exception+0x24>
 400cca4:	29400317 	ldw	r5,12(r5)
 400cca8:	1947883a 	add	r3,r3,r5
 400ccac:	20c0012e 	bgeu	r4,r3,400ccb4 <__cxa_free_dependent_exception+0x24>
 400ccb0:	400ca541 	jmpi	400ca54 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400ccb4:	1009883a 	mov	r4,r2
 400ccb8:	400e1281 	jmpi	400e128 <free>

0400ccbc <_GLOBAL__sub_I___cxa_allocate_exception>:
 400ccbc:	defffd04 	addi	sp,sp,-12
 400ccc0:	dc400115 	stw	r17,4(sp)
 400ccc4:	dc000015 	stw	r16,0(sp)
 400ccc8:	04424004 	movi	r17,2304
 400cccc:	040100f4 	movhi	r16,1027
 400ccd0:	84357804 	addi	r16,r16,-10784
 400ccd4:	8809883a 	mov	r4,r17
 400ccd8:	dfc00215 	stw	ra,8(sp)
 400ccdc:	84400315 	stw	r17,12(r16)
 400cce0:	400e1140 	call	400e114 <malloc>
 400cce4:	80800215 	stw	r2,8(r16)
 400cce8:	10000826 	beq	r2,zero,400cd0c <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
 400ccec:	80800115 	stw	r2,4(r16)
 400ccf0:	14400015 	stw	r17,0(r2)
 400ccf4:	10000115 	stw	zero,4(r2)
 400ccf8:	dfc00217 	ldw	ra,8(sp)
 400ccfc:	dc400117 	ldw	r17,4(sp)
 400cd00:	dc000017 	ldw	r16,0(sp)
 400cd04:	dec00304 	addi	sp,sp,12
 400cd08:	f800283a 	ret
 400cd0c:	80000315 	stw	zero,12(r16)
 400cd10:	80000115 	stw	zero,4(r16)
 400cd14:	003ff806 	br	400ccf8 <__alt_mem_onchip_memory2_0+0xfc00ba78>

0400cd18 <__cxa_call_terminate>:
 400cd18:	defffe04 	addi	sp,sp,-8
 400cd1c:	dfc00115 	stw	ra,4(sp)
 400cd20:	dc000015 	stw	r16,0(sp)
 400cd24:	20000d26 	beq	r4,zero,400cd5c <__cxa_call_terminate+0x44>
 400cd28:	2021883a 	mov	r16,r4
 400cd2c:	400c8cc0 	call	400c8cc <__cxa_begin_catch>
 400cd30:	80c00017 	ldw	r3,0(r16)
 400cd34:	016f3574 	movhi	r5,48341
 400cd38:	29754004 	addi	r5,r5,-11008
 400cd3c:	194b883a 	add	r5,r3,r5
 400cd40:	80800117 	ldw	r2,4(r16)
 400cd44:	28c9803a 	cmpltu	r4,r5,r3
 400cd48:	00ee2cb4 	movhi	r3,47282
 400cd4c:	18eaaf04 	addi	r3,r3,-21828
 400cd50:	10c5883a 	add	r2,r2,r3
 400cd54:	2085883a 	add	r2,r4,r2
 400cd58:	10000126 	beq	r2,zero,400cd60 <__cxa_call_terminate+0x48>
 400cd5c:	400b6940 	call	400b694 <_ZSt9terminatev>
 400cd60:	00800044 	movi	r2,1
 400cd64:	117ffd36 	bltu	r2,r5,400cd5c <__alt_mem_onchip_memory2_0+0xfc00badc>
 400cd68:	813ff817 	ldw	r4,-32(r16)
 400cd6c:	400b5d40 	call	400b5d4 <_ZN10__cxxabiv111__terminateEPFvvE>

0400cd70 <__cxa_get_globals_fast>:
 400cd70:	008100f4 	movhi	r2,1027
 400cd74:	10b53304 	addi	r2,r2,-11060
 400cd78:	f800283a 	ret

0400cd7c <__cxa_get_globals>:
 400cd7c:	008100f4 	movhi	r2,1027
 400cd80:	10b53304 	addi	r2,r2,-11060
 400cd84:	f800283a 	ret

0400cd88 <_ZNSt9exceptionD1Ev>:
 400cd88:	f800283a 	ret

0400cd8c <_ZNSt13bad_exceptionD1Ev>:
 400cd8c:	f800283a 	ret

0400cd90 <_ZNKSt9exception4whatEv>:
 400cd90:	008100b4 	movhi	r2,1026
 400cd94:	109b3c04 	addi	r2,r2,27888
 400cd98:	f800283a 	ret

0400cd9c <_ZNKSt13bad_exception4whatEv>:
 400cd9c:	008100b4 	movhi	r2,1026
 400cda0:	109b4004 	addi	r2,r2,27904
 400cda4:	f800283a 	ret

0400cda8 <_ZNSt9exceptionD0Ev>:
 400cda8:	400b2c81 	jmpi	400b2c8 <_ZdlPv>

0400cdac <_ZNSt13bad_exceptionD0Ev>:
 400cdac:	400b2c81 	jmpi	400b2c8 <_ZdlPv>

0400cdb0 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
 400cdb0:	f800283a 	ret

0400cdb4 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
 400cdb4:	400b2c81 	jmpi	400b2c8 <_ZdlPv>

0400cdb8 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
 400cdb8:	f800283a 	ret

0400cdbc <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
 400cdbc:	400b2c81 	jmpi	400b2c8 <_ZdlPv>

0400cdc0 <__fixunssfsi>:
 400cdc0:	defffd04 	addi	sp,sp,-12
 400cdc4:	dc000015 	stw	r16,0(sp)
 400cdc8:	0413c034 	movhi	r16,20224
 400cdcc:	800b883a 	mov	r5,r16
 400cdd0:	dc400115 	stw	r17,4(sp)
 400cdd4:	dfc00215 	stw	ra,8(sp)
 400cdd8:	2023883a 	mov	r17,r4
 400cddc:	400cffc0 	call	400cffc <__gesf2>
 400cde0:	1000070e 	bge	r2,zero,400ce00 <__fixunssfsi+0x40>
 400cde4:	8809883a 	mov	r4,r17
 400cde8:	400d9cc0 	call	400d9cc <__fixsfsi>
 400cdec:	dfc00217 	ldw	ra,8(sp)
 400cdf0:	dc400117 	ldw	r17,4(sp)
 400cdf4:	dc000017 	ldw	r16,0(sp)
 400cdf8:	dec00304 	addi	sp,sp,12
 400cdfc:	f800283a 	ret
 400ce00:	800b883a 	mov	r5,r16
 400ce04:	8809883a 	mov	r4,r17
 400ce08:	400d4e80 	call	400d4e8 <__subsf3>
 400ce0c:	1009883a 	mov	r4,r2
 400ce10:	400d9cc0 	call	400d9cc <__fixsfsi>
 400ce14:	00e00034 	movhi	r3,32768
 400ce18:	10c5883a 	add	r2,r2,r3
 400ce1c:	003ff306 	br	400cdec <__alt_mem_onchip_memory2_0+0xfc00bb6c>

0400ce20 <__divsi3>:
 400ce20:	20001b16 	blt	r4,zero,400ce90 <__divsi3+0x70>
 400ce24:	000f883a 	mov	r7,zero
 400ce28:	28001616 	blt	r5,zero,400ce84 <__divsi3+0x64>
 400ce2c:	200d883a 	mov	r6,r4
 400ce30:	29001a2e 	bgeu	r5,r4,400ce9c <__divsi3+0x7c>
 400ce34:	00800804 	movi	r2,32
 400ce38:	00c00044 	movi	r3,1
 400ce3c:	00000106 	br	400ce44 <__divsi3+0x24>
 400ce40:	10000d26 	beq	r2,zero,400ce78 <__divsi3+0x58>
 400ce44:	294b883a 	add	r5,r5,r5
 400ce48:	10bfffc4 	addi	r2,r2,-1
 400ce4c:	18c7883a 	add	r3,r3,r3
 400ce50:	293ffb36 	bltu	r5,r4,400ce40 <__alt_mem_onchip_memory2_0+0xfc00bbc0>
 400ce54:	0005883a 	mov	r2,zero
 400ce58:	18000726 	beq	r3,zero,400ce78 <__divsi3+0x58>
 400ce5c:	0005883a 	mov	r2,zero
 400ce60:	31400236 	bltu	r6,r5,400ce6c <__divsi3+0x4c>
 400ce64:	314dc83a 	sub	r6,r6,r5
 400ce68:	10c4b03a 	or	r2,r2,r3
 400ce6c:	1806d07a 	srli	r3,r3,1
 400ce70:	280ad07a 	srli	r5,r5,1
 400ce74:	183ffa1e 	bne	r3,zero,400ce60 <__alt_mem_onchip_memory2_0+0xfc00bbe0>
 400ce78:	38000126 	beq	r7,zero,400ce80 <__divsi3+0x60>
 400ce7c:	0085c83a 	sub	r2,zero,r2
 400ce80:	f800283a 	ret
 400ce84:	014bc83a 	sub	r5,zero,r5
 400ce88:	39c0005c 	xori	r7,r7,1
 400ce8c:	003fe706 	br	400ce2c <__alt_mem_onchip_memory2_0+0xfc00bbac>
 400ce90:	0109c83a 	sub	r4,zero,r4
 400ce94:	01c00044 	movi	r7,1
 400ce98:	003fe306 	br	400ce28 <__alt_mem_onchip_memory2_0+0xfc00bba8>
 400ce9c:	00c00044 	movi	r3,1
 400cea0:	003fee06 	br	400ce5c <__alt_mem_onchip_memory2_0+0xfc00bbdc>

0400cea4 <__modsi3>:
 400cea4:	20001716 	blt	r4,zero,400cf04 <__modsi3+0x60>
 400cea8:	000f883a 	mov	r7,zero
 400ceac:	2005883a 	mov	r2,r4
 400ceb0:	28001216 	blt	r5,zero,400cefc <__modsi3+0x58>
 400ceb4:	2900162e 	bgeu	r5,r4,400cf10 <__modsi3+0x6c>
 400ceb8:	01800804 	movi	r6,32
 400cebc:	00c00044 	movi	r3,1
 400cec0:	00000106 	br	400cec8 <__modsi3+0x24>
 400cec4:	30000a26 	beq	r6,zero,400cef0 <__modsi3+0x4c>
 400cec8:	294b883a 	add	r5,r5,r5
 400cecc:	31bfffc4 	addi	r6,r6,-1
 400ced0:	18c7883a 	add	r3,r3,r3
 400ced4:	293ffb36 	bltu	r5,r4,400cec4 <__alt_mem_onchip_memory2_0+0xfc00bc44>
 400ced8:	18000526 	beq	r3,zero,400cef0 <__modsi3+0x4c>
 400cedc:	1806d07a 	srli	r3,r3,1
 400cee0:	11400136 	bltu	r2,r5,400cee8 <__modsi3+0x44>
 400cee4:	1145c83a 	sub	r2,r2,r5
 400cee8:	280ad07a 	srli	r5,r5,1
 400ceec:	183ffb1e 	bne	r3,zero,400cedc <__alt_mem_onchip_memory2_0+0xfc00bc5c>
 400cef0:	38000126 	beq	r7,zero,400cef8 <__modsi3+0x54>
 400cef4:	0085c83a 	sub	r2,zero,r2
 400cef8:	f800283a 	ret
 400cefc:	014bc83a 	sub	r5,zero,r5
 400cf00:	003fec06 	br	400ceb4 <__alt_mem_onchip_memory2_0+0xfc00bc34>
 400cf04:	0109c83a 	sub	r4,zero,r4
 400cf08:	01c00044 	movi	r7,1
 400cf0c:	003fe706 	br	400ceac <__alt_mem_onchip_memory2_0+0xfc00bc2c>
 400cf10:	00c00044 	movi	r3,1
 400cf14:	003ff106 	br	400cedc <__alt_mem_onchip_memory2_0+0xfc00bc5c>

0400cf18 <__udivsi3>:
 400cf18:	200d883a 	mov	r6,r4
 400cf1c:	2900152e 	bgeu	r5,r4,400cf74 <__udivsi3+0x5c>
 400cf20:	28001416 	blt	r5,zero,400cf74 <__udivsi3+0x5c>
 400cf24:	00800804 	movi	r2,32
 400cf28:	00c00044 	movi	r3,1
 400cf2c:	00000206 	br	400cf38 <__udivsi3+0x20>
 400cf30:	10000e26 	beq	r2,zero,400cf6c <__udivsi3+0x54>
 400cf34:	28000516 	blt	r5,zero,400cf4c <__udivsi3+0x34>
 400cf38:	294b883a 	add	r5,r5,r5
 400cf3c:	10bfffc4 	addi	r2,r2,-1
 400cf40:	18c7883a 	add	r3,r3,r3
 400cf44:	293ffa36 	bltu	r5,r4,400cf30 <__alt_mem_onchip_memory2_0+0xfc00bcb0>
 400cf48:	18000826 	beq	r3,zero,400cf6c <__udivsi3+0x54>
 400cf4c:	0005883a 	mov	r2,zero
 400cf50:	31400236 	bltu	r6,r5,400cf5c <__udivsi3+0x44>
 400cf54:	314dc83a 	sub	r6,r6,r5
 400cf58:	10c4b03a 	or	r2,r2,r3
 400cf5c:	1806d07a 	srli	r3,r3,1
 400cf60:	280ad07a 	srli	r5,r5,1
 400cf64:	183ffa1e 	bne	r3,zero,400cf50 <__alt_mem_onchip_memory2_0+0xfc00bcd0>
 400cf68:	f800283a 	ret
 400cf6c:	0005883a 	mov	r2,zero
 400cf70:	f800283a 	ret
 400cf74:	00c00044 	movi	r3,1
 400cf78:	003ff406 	br	400cf4c <__alt_mem_onchip_memory2_0+0xfc00bccc>

0400cf7c <__umodsi3>:
 400cf7c:	2005883a 	mov	r2,r4
 400cf80:	2900122e 	bgeu	r5,r4,400cfcc <__umodsi3+0x50>
 400cf84:	28001116 	blt	r5,zero,400cfcc <__umodsi3+0x50>
 400cf88:	01800804 	movi	r6,32
 400cf8c:	00c00044 	movi	r3,1
 400cf90:	00000206 	br	400cf9c <__umodsi3+0x20>
 400cf94:	30000c26 	beq	r6,zero,400cfc8 <__umodsi3+0x4c>
 400cf98:	28000516 	blt	r5,zero,400cfb0 <__umodsi3+0x34>
 400cf9c:	294b883a 	add	r5,r5,r5
 400cfa0:	31bfffc4 	addi	r6,r6,-1
 400cfa4:	18c7883a 	add	r3,r3,r3
 400cfa8:	293ffa36 	bltu	r5,r4,400cf94 <__alt_mem_onchip_memory2_0+0xfc00bd14>
 400cfac:	18000626 	beq	r3,zero,400cfc8 <__umodsi3+0x4c>
 400cfb0:	1806d07a 	srli	r3,r3,1
 400cfb4:	11400136 	bltu	r2,r5,400cfbc <__umodsi3+0x40>
 400cfb8:	1145c83a 	sub	r2,r2,r5
 400cfbc:	280ad07a 	srli	r5,r5,1
 400cfc0:	183ffb1e 	bne	r3,zero,400cfb0 <__alt_mem_onchip_memory2_0+0xfc00bd30>
 400cfc4:	f800283a 	ret
 400cfc8:	f800283a 	ret
 400cfcc:	00c00044 	movi	r3,1
 400cfd0:	003ff706 	br	400cfb0 <__alt_mem_onchip_memory2_0+0xfc00bd30>

0400cfd4 <__mulsi3>:
 400cfd4:	0005883a 	mov	r2,zero
 400cfd8:	20000726 	beq	r4,zero,400cff8 <__mulsi3+0x24>
 400cfdc:	20c0004c 	andi	r3,r4,1
 400cfe0:	2008d07a 	srli	r4,r4,1
 400cfe4:	18000126 	beq	r3,zero,400cfec <__mulsi3+0x18>
 400cfe8:	1145883a 	add	r2,r2,r5
 400cfec:	294b883a 	add	r5,r5,r5
 400cff0:	203ffa1e 	bne	r4,zero,400cfdc <__alt_mem_onchip_memory2_0+0xfc00bd5c>
 400cff4:	f800283a 	ret
 400cff8:	f800283a 	ret

0400cffc <__gesf2>:
 400cffc:	2004d5fa 	srli	r2,r4,23
 400d000:	2806d5fa 	srli	r3,r5,23
 400d004:	01802034 	movhi	r6,128
 400d008:	31bfffc4 	addi	r6,r6,-1
 400d00c:	10803fcc 	andi	r2,r2,255
 400d010:	01c03fc4 	movi	r7,255
 400d014:	3110703a 	and	r8,r6,r4
 400d018:	18c03fcc 	andi	r3,r3,255
 400d01c:	314c703a 	and	r6,r6,r5
 400d020:	2008d7fa 	srli	r4,r4,31
 400d024:	280ad7fa 	srli	r5,r5,31
 400d028:	11c01926 	beq	r2,r7,400d090 <__gesf2+0x94>
 400d02c:	01c03fc4 	movi	r7,255
 400d030:	19c00f26 	beq	r3,r7,400d070 <__gesf2+0x74>
 400d034:	1000061e 	bne	r2,zero,400d050 <__gesf2+0x54>
 400d038:	400f003a 	cmpeq	r7,r8,zero
 400d03c:	1800071e 	bne	r3,zero,400d05c <__gesf2+0x60>
 400d040:	3000061e 	bne	r6,zero,400d05c <__gesf2+0x60>
 400d044:	0005883a 	mov	r2,zero
 400d048:	40000e1e 	bne	r8,zero,400d084 <__gesf2+0x88>
 400d04c:	f800283a 	ret
 400d050:	18000a1e 	bne	r3,zero,400d07c <__gesf2+0x80>
 400d054:	30000b26 	beq	r6,zero,400d084 <__gesf2+0x88>
 400d058:	000f883a 	mov	r7,zero
 400d05c:	29403fcc 	andi	r5,r5,255
 400d060:	38000726 	beq	r7,zero,400d080 <__gesf2+0x84>
 400d064:	28000826 	beq	r5,zero,400d088 <__gesf2+0x8c>
 400d068:	00800044 	movi	r2,1
 400d06c:	f800283a 	ret
 400d070:	303ff026 	beq	r6,zero,400d034 <__alt_mem_onchip_memory2_0+0xfc00bdb4>
 400d074:	00bfff84 	movi	r2,-2
 400d078:	f800283a 	ret
 400d07c:	29403fcc 	andi	r5,r5,255
 400d080:	21400526 	beq	r4,r5,400d098 <__gesf2+0x9c>
 400d084:	203ff826 	beq	r4,zero,400d068 <__alt_mem_onchip_memory2_0+0xfc00bde8>
 400d088:	00bfffc4 	movi	r2,-1
 400d08c:	f800283a 	ret
 400d090:	403fe626 	beq	r8,zero,400d02c <__alt_mem_onchip_memory2_0+0xfc00bdac>
 400d094:	003ff706 	br	400d074 <__alt_mem_onchip_memory2_0+0xfc00bdf4>
 400d098:	18bffa16 	blt	r3,r2,400d084 <__alt_mem_onchip_memory2_0+0xfc00be04>
 400d09c:	10c00216 	blt	r2,r3,400d0a8 <__gesf2+0xac>
 400d0a0:	323ff836 	bltu	r6,r8,400d084 <__alt_mem_onchip_memory2_0+0xfc00be04>
 400d0a4:	4180022e 	bgeu	r8,r6,400d0b0 <__gesf2+0xb4>
 400d0a8:	203fef1e 	bne	r4,zero,400d068 <__alt_mem_onchip_memory2_0+0xfc00bde8>
 400d0ac:	003ff606 	br	400d088 <__alt_mem_onchip_memory2_0+0xfc00be08>
 400d0b0:	0005883a 	mov	r2,zero
 400d0b4:	f800283a 	ret

0400d0b8 <__mulsf3>:
 400d0b8:	defff504 	addi	sp,sp,-44
 400d0bc:	dc000115 	stw	r16,4(sp)
 400d0c0:	2020d5fa 	srli	r16,r4,23
 400d0c4:	dd400615 	stw	r21,24(sp)
 400d0c8:	202ad7fa 	srli	r21,r4,31
 400d0cc:	dc800315 	stw	r18,12(sp)
 400d0d0:	04802034 	movhi	r18,128
 400d0d4:	df000915 	stw	fp,36(sp)
 400d0d8:	dd000515 	stw	r20,20(sp)
 400d0dc:	94bfffc4 	addi	r18,r18,-1
 400d0e0:	dfc00a15 	stw	ra,40(sp)
 400d0e4:	ddc00815 	stw	r23,32(sp)
 400d0e8:	dd800715 	stw	r22,28(sp)
 400d0ec:	dcc00415 	stw	r19,16(sp)
 400d0f0:	dc400215 	stw	r17,8(sp)
 400d0f4:	84003fcc 	andi	r16,r16,255
 400d0f8:	9124703a 	and	r18,r18,r4
 400d0fc:	a829883a 	mov	r20,r21
 400d100:	af003fcc 	andi	fp,r21,255
 400d104:	80005426 	beq	r16,zero,400d258 <__mulsf3+0x1a0>
 400d108:	00803fc4 	movi	r2,255
 400d10c:	80802f26 	beq	r16,r2,400d1cc <__mulsf3+0x114>
 400d110:	91002034 	orhi	r4,r18,128
 400d114:	202490fa 	slli	r18,r4,3
 400d118:	843fe044 	addi	r16,r16,-127
 400d11c:	0023883a 	mov	r17,zero
 400d120:	002f883a 	mov	r23,zero
 400d124:	2804d5fa 	srli	r2,r5,23
 400d128:	282cd7fa 	srli	r22,r5,31
 400d12c:	01002034 	movhi	r4,128
 400d130:	213fffc4 	addi	r4,r4,-1
 400d134:	10803fcc 	andi	r2,r2,255
 400d138:	2166703a 	and	r19,r4,r5
 400d13c:	b1803fcc 	andi	r6,r22,255
 400d140:	10004c26 	beq	r2,zero,400d274 <__mulsf3+0x1bc>
 400d144:	00c03fc4 	movi	r3,255
 400d148:	10c04726 	beq	r2,r3,400d268 <__mulsf3+0x1b0>
 400d14c:	99002034 	orhi	r4,r19,128
 400d150:	202690fa 	slli	r19,r4,3
 400d154:	10bfe044 	addi	r2,r2,-127
 400d158:	0007883a 	mov	r3,zero
 400d15c:	80a1883a 	add	r16,r16,r2
 400d160:	010003c4 	movi	r4,15
 400d164:	1c44b03a 	or	r2,r3,r17
 400d168:	b56af03a 	xor	r21,r22,r21
 400d16c:	81c00044 	addi	r7,r16,1
 400d170:	20806b36 	bltu	r4,r2,400d320 <__mulsf3+0x268>
 400d174:	100490ba 	slli	r2,r2,2
 400d178:	01010074 	movhi	r4,1025
 400d17c:	21346304 	addi	r4,r4,-11892
 400d180:	1105883a 	add	r2,r2,r4
 400d184:	10800017 	ldw	r2,0(r2)
 400d188:	1000683a 	jmp	r2
 400d18c:	0400d320 	cmpeqi	r16,zero,844
 400d190:	0400d1e0 	cmpeqi	r16,zero,839
 400d194:	0400d1e0 	cmpeqi	r16,zero,839
 400d198:	0400d1dc 	xori	r16,zero,839
 400d19c:	0400d304 	movi	r16,844
 400d1a0:	0400d304 	movi	r16,844
 400d1a4:	0400d2f0 	cmpltui	r16,zero,843
 400d1a8:	0400d1dc 	xori	r16,zero,839
 400d1ac:	0400d304 	movi	r16,844
 400d1b0:	0400d2f0 	cmpltui	r16,zero,843
 400d1b4:	0400d304 	movi	r16,844
 400d1b8:	0400d1dc 	xori	r16,zero,839
 400d1bc:	0400d310 	cmplti	r16,zero,844
 400d1c0:	0400d310 	cmplti	r16,zero,844
 400d1c4:	0400d310 	cmplti	r16,zero,844
 400d1c8:	0400d420 	cmpeqi	r16,zero,848
 400d1cc:	90003b1e 	bne	r18,zero,400d2bc <__mulsf3+0x204>
 400d1d0:	04400204 	movi	r17,8
 400d1d4:	05c00084 	movi	r23,2
 400d1d8:	003fd206 	br	400d124 <__alt_mem_onchip_memory2_0+0xfc00bea4>
 400d1dc:	302b883a 	mov	r21,r6
 400d1e0:	00800084 	movi	r2,2
 400d1e4:	18802626 	beq	r3,r2,400d280 <__mulsf3+0x1c8>
 400d1e8:	008000c4 	movi	r2,3
 400d1ec:	1880b826 	beq	r3,r2,400d4d0 <__mulsf3+0x418>
 400d1f0:	00800044 	movi	r2,1
 400d1f4:	1880af1e 	bne	r3,r2,400d4b4 <__mulsf3+0x3fc>
 400d1f8:	a829883a 	mov	r20,r21
 400d1fc:	0007883a 	mov	r3,zero
 400d200:	0009883a 	mov	r4,zero
 400d204:	18803fcc 	andi	r2,r3,255
 400d208:	100695fa 	slli	r3,r2,23
 400d20c:	a0803fcc 	andi	r2,r20,255
 400d210:	100a97fa 	slli	r5,r2,31
 400d214:	00802034 	movhi	r2,128
 400d218:	10bfffc4 	addi	r2,r2,-1
 400d21c:	2084703a 	and	r2,r4,r2
 400d220:	10c4b03a 	or	r2,r2,r3
 400d224:	1144b03a 	or	r2,r2,r5
 400d228:	dfc00a17 	ldw	ra,40(sp)
 400d22c:	df000917 	ldw	fp,36(sp)
 400d230:	ddc00817 	ldw	r23,32(sp)
 400d234:	dd800717 	ldw	r22,28(sp)
 400d238:	dd400617 	ldw	r21,24(sp)
 400d23c:	dd000517 	ldw	r20,20(sp)
 400d240:	dcc00417 	ldw	r19,16(sp)
 400d244:	dc800317 	ldw	r18,12(sp)
 400d248:	dc400217 	ldw	r17,8(sp)
 400d24c:	dc000117 	ldw	r16,4(sp)
 400d250:	dec00b04 	addi	sp,sp,44
 400d254:	f800283a 	ret
 400d258:	90000d1e 	bne	r18,zero,400d290 <__mulsf3+0x1d8>
 400d25c:	04400104 	movi	r17,4
 400d260:	05c00044 	movi	r23,1
 400d264:	003faf06 	br	400d124 <__alt_mem_onchip_memory2_0+0xfc00bea4>
 400d268:	9806c03a 	cmpne	r3,r19,zero
 400d26c:	18c00084 	addi	r3,r3,2
 400d270:	003fba06 	br	400d15c <__alt_mem_onchip_memory2_0+0xfc00bedc>
 400d274:	9800141e 	bne	r19,zero,400d2c8 <__mulsf3+0x210>
 400d278:	00c00044 	movi	r3,1
 400d27c:	003fb706 	br	400d15c <__alt_mem_onchip_memory2_0+0xfc00bedc>
 400d280:	a829883a 	mov	r20,r21
 400d284:	00ffffc4 	movi	r3,-1
 400d288:	0009883a 	mov	r4,zero
 400d28c:	003fdd06 	br	400d204 <__alt_mem_onchip_memory2_0+0xfc00bf84>
 400d290:	9009883a 	mov	r4,r18
 400d294:	d9400015 	stw	r5,0(sp)
 400d298:	400e04c0 	call	400e04c <__clzsi2>
 400d29c:	10fffec4 	addi	r3,r2,-5
 400d2a0:	10801d84 	addi	r2,r2,118
 400d2a4:	90e4983a 	sll	r18,r18,r3
 400d2a8:	00a1c83a 	sub	r16,zero,r2
 400d2ac:	0023883a 	mov	r17,zero
 400d2b0:	002f883a 	mov	r23,zero
 400d2b4:	d9400017 	ldw	r5,0(sp)
 400d2b8:	003f9a06 	br	400d124 <__alt_mem_onchip_memory2_0+0xfc00bea4>
 400d2bc:	04400304 	movi	r17,12
 400d2c0:	05c000c4 	movi	r23,3
 400d2c4:	003f9706 	br	400d124 <__alt_mem_onchip_memory2_0+0xfc00bea4>
 400d2c8:	9809883a 	mov	r4,r19
 400d2cc:	d9800015 	stw	r6,0(sp)
 400d2d0:	400e04c0 	call	400e04c <__clzsi2>
 400d2d4:	10fffec4 	addi	r3,r2,-5
 400d2d8:	10801d84 	addi	r2,r2,118
 400d2dc:	98e6983a 	sll	r19,r19,r3
 400d2e0:	0085c83a 	sub	r2,zero,r2
 400d2e4:	0007883a 	mov	r3,zero
 400d2e8:	d9800017 	ldw	r6,0(sp)
 400d2ec:	003f9b06 	br	400d15c <__alt_mem_onchip_memory2_0+0xfc00bedc>
 400d2f0:	01002034 	movhi	r4,128
 400d2f4:	0029883a 	mov	r20,zero
 400d2f8:	213fffc4 	addi	r4,r4,-1
 400d2fc:	00ffffc4 	movi	r3,-1
 400d300:	003fc006 	br	400d204 <__alt_mem_onchip_memory2_0+0xfc00bf84>
 400d304:	9027883a 	mov	r19,r18
 400d308:	b807883a 	mov	r3,r23
 400d30c:	003fb406 	br	400d1e0 <__alt_mem_onchip_memory2_0+0xfc00bf60>
 400d310:	9027883a 	mov	r19,r18
 400d314:	e02b883a 	mov	r21,fp
 400d318:	b807883a 	mov	r3,r23
 400d31c:	003fb006 	br	400d1e0 <__alt_mem_onchip_memory2_0+0xfc00bf60>
 400d320:	9028d43a 	srli	r20,r18,16
 400d324:	982cd43a 	srli	r22,r19,16
 400d328:	94bfffcc 	andi	r18,r18,65535
 400d32c:	9cffffcc 	andi	r19,r19,65535
 400d330:	980b883a 	mov	r5,r19
 400d334:	9009883a 	mov	r4,r18
 400d338:	d9c00015 	stw	r7,0(sp)
 400d33c:	400cfd40 	call	400cfd4 <__mulsi3>
 400d340:	a00b883a 	mov	r5,r20
 400d344:	9809883a 	mov	r4,r19
 400d348:	1023883a 	mov	r17,r2
 400d34c:	400cfd40 	call	400cfd4 <__mulsi3>
 400d350:	a009883a 	mov	r4,r20
 400d354:	b00b883a 	mov	r5,r22
 400d358:	1027883a 	mov	r19,r2
 400d35c:	400cfd40 	call	400cfd4 <__mulsi3>
 400d360:	b00b883a 	mov	r5,r22
 400d364:	9009883a 	mov	r4,r18
 400d368:	1029883a 	mov	r20,r2
 400d36c:	400cfd40 	call	400cfd4 <__mulsi3>
 400d370:	8806d43a 	srli	r3,r17,16
 400d374:	14c5883a 	add	r2,r2,r19
 400d378:	d9c00017 	ldw	r7,0(sp)
 400d37c:	1885883a 	add	r2,r3,r2
 400d380:	14c0022e 	bgeu	r2,r19,400d38c <__mulsf3+0x2d4>
 400d384:	00c00074 	movhi	r3,1
 400d388:	a0e9883a 	add	r20,r20,r3
 400d38c:	1026943a 	slli	r19,r2,16
 400d390:	8c7fffcc 	andi	r17,r17,65535
 400d394:	1004d43a 	srli	r2,r2,16
 400d398:	9c63883a 	add	r17,r19,r17
 400d39c:	882691ba 	slli	r19,r17,6
 400d3a0:	1505883a 	add	r2,r2,r20
 400d3a4:	8822d6ba 	srli	r17,r17,26
 400d3a8:	100891ba 	slli	r4,r2,6
 400d3ac:	9826c03a 	cmpne	r19,r19,zero
 400d3b0:	9c62b03a 	or	r17,r19,r17
 400d3b4:	8926b03a 	or	r19,r17,r4
 400d3b8:	9882002c 	andhi	r2,r19,2048
 400d3bc:	10000426 	beq	r2,zero,400d3d0 <__mulsf3+0x318>
 400d3c0:	9804d07a 	srli	r2,r19,1
 400d3c4:	9900004c 	andi	r4,r19,1
 400d3c8:	3821883a 	mov	r16,r7
 400d3cc:	1126b03a 	or	r19,r2,r4
 400d3d0:	80c01fc4 	addi	r3,r16,127
 400d3d4:	00c0210e 	bge	zero,r3,400d45c <__mulsf3+0x3a4>
 400d3d8:	988001cc 	andi	r2,r19,7
 400d3dc:	10000426 	beq	r2,zero,400d3f0 <__mulsf3+0x338>
 400d3e0:	988003cc 	andi	r2,r19,15
 400d3e4:	01000104 	movi	r4,4
 400d3e8:	11000126 	beq	r2,r4,400d3f0 <__mulsf3+0x338>
 400d3ec:	9927883a 	add	r19,r19,r4
 400d3f0:	9882002c 	andhi	r2,r19,2048
 400d3f4:	10000426 	beq	r2,zero,400d408 <__mulsf3+0x350>
 400d3f8:	00be0034 	movhi	r2,63488
 400d3fc:	10bfffc4 	addi	r2,r2,-1
 400d400:	80c02004 	addi	r3,r16,128
 400d404:	98a6703a 	and	r19,r19,r2
 400d408:	00803f84 	movi	r2,254
 400d40c:	10ff9c16 	blt	r2,r3,400d280 <__alt_mem_onchip_memory2_0+0xfc00c000>
 400d410:	980891ba 	slli	r4,r19,6
 400d414:	a829883a 	mov	r20,r21
 400d418:	2008d27a 	srli	r4,r4,9
 400d41c:	003f7906 	br	400d204 <__alt_mem_onchip_memory2_0+0xfc00bf84>
 400d420:	9080102c 	andhi	r2,r18,64
 400d424:	10000826 	beq	r2,zero,400d448 <__mulsf3+0x390>
 400d428:	9880102c 	andhi	r2,r19,64
 400d42c:	1000061e 	bne	r2,zero,400d448 <__mulsf3+0x390>
 400d430:	00802034 	movhi	r2,128
 400d434:	99001034 	orhi	r4,r19,64
 400d438:	10bfffc4 	addi	r2,r2,-1
 400d43c:	b029883a 	mov	r20,r22
 400d440:	2088703a 	and	r4,r4,r2
 400d444:	003fad06 	br	400d2fc <__alt_mem_onchip_memory2_0+0xfc00c07c>
 400d448:	00802034 	movhi	r2,128
 400d44c:	91001034 	orhi	r4,r18,64
 400d450:	10bfffc4 	addi	r2,r2,-1
 400d454:	2088703a 	and	r4,r4,r2
 400d458:	003fa806 	br	400d2fc <__alt_mem_onchip_memory2_0+0xfc00c07c>
 400d45c:	00800044 	movi	r2,1
 400d460:	10c7c83a 	sub	r3,r2,r3
 400d464:	008006c4 	movi	r2,27
 400d468:	10ff6316 	blt	r2,r3,400d1f8 <__alt_mem_onchip_memory2_0+0xfc00bf78>
 400d46c:	00800804 	movi	r2,32
 400d470:	10c5c83a 	sub	r2,r2,r3
 400d474:	9884983a 	sll	r2,r19,r2
 400d478:	98c6d83a 	srl	r3,r19,r3
 400d47c:	1004c03a 	cmpne	r2,r2,zero
 400d480:	1884b03a 	or	r2,r3,r2
 400d484:	10c001cc 	andi	r3,r2,7
 400d488:	18000426 	beq	r3,zero,400d49c <__mulsf3+0x3e4>
 400d48c:	10c003cc 	andi	r3,r2,15
 400d490:	01000104 	movi	r4,4
 400d494:	19000126 	beq	r3,r4,400d49c <__mulsf3+0x3e4>
 400d498:	1105883a 	add	r2,r2,r4
 400d49c:	10c1002c 	andhi	r3,r2,1024
 400d4a0:	18000626 	beq	r3,zero,400d4bc <__mulsf3+0x404>
 400d4a4:	a829883a 	mov	r20,r21
 400d4a8:	00c00044 	movi	r3,1
 400d4ac:	0009883a 	mov	r4,zero
 400d4b0:	003f5406 	br	400d204 <__alt_mem_onchip_memory2_0+0xfc00bf84>
 400d4b4:	3821883a 	mov	r16,r7
 400d4b8:	003fc506 	br	400d3d0 <__alt_mem_onchip_memory2_0+0xfc00c150>
 400d4bc:	100491ba 	slli	r2,r2,6
 400d4c0:	a829883a 	mov	r20,r21
 400d4c4:	0007883a 	mov	r3,zero
 400d4c8:	1008d27a 	srli	r4,r2,9
 400d4cc:	003f4d06 	br	400d204 <__alt_mem_onchip_memory2_0+0xfc00bf84>
 400d4d0:	00802034 	movhi	r2,128
 400d4d4:	99001034 	orhi	r4,r19,64
 400d4d8:	10bfffc4 	addi	r2,r2,-1
 400d4dc:	a829883a 	mov	r20,r21
 400d4e0:	2088703a 	and	r4,r4,r2
 400d4e4:	003f8506 	br	400d2fc <__alt_mem_onchip_memory2_0+0xfc00c07c>

0400d4e8 <__subsf3>:
 400d4e8:	defffc04 	addi	sp,sp,-16
 400d4ec:	280cd5fa 	srli	r6,r5,23
 400d4f0:	dc000015 	stw	r16,0(sp)
 400d4f4:	01c02034 	movhi	r7,128
 400d4f8:	2020d5fa 	srli	r16,r4,23
 400d4fc:	39ffffc4 	addi	r7,r7,-1
 400d500:	3906703a 	and	r3,r7,r4
 400d504:	dc400115 	stw	r17,4(sp)
 400d508:	394e703a 	and	r7,r7,r5
 400d50c:	2022d7fa 	srli	r17,r4,31
 400d510:	dfc00315 	stw	ra,12(sp)
 400d514:	dc800215 	stw	r18,8(sp)
 400d518:	31803fcc 	andi	r6,r6,255
 400d51c:	01003fc4 	movi	r4,255
 400d520:	84003fcc 	andi	r16,r16,255
 400d524:	180690fa 	slli	r3,r3,3
 400d528:	2804d7fa 	srli	r2,r5,31
 400d52c:	380e90fa 	slli	r7,r7,3
 400d530:	31006d26 	beq	r6,r4,400d6e8 <__subsf3+0x200>
 400d534:	1080005c 	xori	r2,r2,1
 400d538:	8189c83a 	sub	r4,r16,r6
 400d53c:	14404f26 	beq	r2,r17,400d67c <__subsf3+0x194>
 400d540:	0100770e 	bge	zero,r4,400d720 <__subsf3+0x238>
 400d544:	30001e1e 	bne	r6,zero,400d5c0 <__subsf3+0xd8>
 400d548:	38006a1e 	bne	r7,zero,400d6f4 <__subsf3+0x20c>
 400d54c:	188001cc 	andi	r2,r3,7
 400d550:	10000426 	beq	r2,zero,400d564 <__subsf3+0x7c>
 400d554:	188003cc 	andi	r2,r3,15
 400d558:	01000104 	movi	r4,4
 400d55c:	11000126 	beq	r2,r4,400d564 <__subsf3+0x7c>
 400d560:	1907883a 	add	r3,r3,r4
 400d564:	1881002c 	andhi	r2,r3,1024
 400d568:	10003926 	beq	r2,zero,400d650 <__subsf3+0x168>
 400d56c:	84000044 	addi	r16,r16,1
 400d570:	00803fc4 	movi	r2,255
 400d574:	80807526 	beq	r16,r2,400d74c <__subsf3+0x264>
 400d578:	180691ba 	slli	r3,r3,6
 400d57c:	8880004c 	andi	r2,r17,1
 400d580:	180ad27a 	srli	r5,r3,9
 400d584:	84003fcc 	andi	r16,r16,255
 400d588:	800695fa 	slli	r3,r16,23
 400d58c:	10803fcc 	andi	r2,r2,255
 400d590:	01002034 	movhi	r4,128
 400d594:	213fffc4 	addi	r4,r4,-1
 400d598:	100497fa 	slli	r2,r2,31
 400d59c:	2920703a 	and	r16,r5,r4
 400d5a0:	80e0b03a 	or	r16,r16,r3
 400d5a4:	8084b03a 	or	r2,r16,r2
 400d5a8:	dfc00317 	ldw	ra,12(sp)
 400d5ac:	dc800217 	ldw	r18,8(sp)
 400d5b0:	dc400117 	ldw	r17,4(sp)
 400d5b4:	dc000017 	ldw	r16,0(sp)
 400d5b8:	dec00404 	addi	sp,sp,16
 400d5bc:	f800283a 	ret
 400d5c0:	00803fc4 	movi	r2,255
 400d5c4:	80bfe126 	beq	r16,r2,400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d5c8:	39c10034 	orhi	r7,r7,1024
 400d5cc:	008006c4 	movi	r2,27
 400d5d0:	11007416 	blt	r2,r4,400d7a4 <__subsf3+0x2bc>
 400d5d4:	00800804 	movi	r2,32
 400d5d8:	1105c83a 	sub	r2,r2,r4
 400d5dc:	3884983a 	sll	r2,r7,r2
 400d5e0:	390ed83a 	srl	r7,r7,r4
 400d5e4:	1008c03a 	cmpne	r4,r2,zero
 400d5e8:	390eb03a 	or	r7,r7,r4
 400d5ec:	19c7c83a 	sub	r3,r3,r7
 400d5f0:	1881002c 	andhi	r2,r3,1024
 400d5f4:	10001426 	beq	r2,zero,400d648 <__subsf3+0x160>
 400d5f8:	04810034 	movhi	r18,1024
 400d5fc:	94bfffc4 	addi	r18,r18,-1
 400d600:	1ca4703a 	and	r18,r3,r18
 400d604:	9009883a 	mov	r4,r18
 400d608:	400e04c0 	call	400e04c <__clzsi2>
 400d60c:	10bffec4 	addi	r2,r2,-5
 400d610:	90a4983a 	sll	r18,r18,r2
 400d614:	14005116 	blt	r2,r16,400d75c <__subsf3+0x274>
 400d618:	1405c83a 	sub	r2,r2,r16
 400d61c:	10c00044 	addi	r3,r2,1
 400d620:	00800804 	movi	r2,32
 400d624:	10c5c83a 	sub	r2,r2,r3
 400d628:	9084983a 	sll	r2,r18,r2
 400d62c:	90e4d83a 	srl	r18,r18,r3
 400d630:	0021883a 	mov	r16,zero
 400d634:	1006c03a 	cmpne	r3,r2,zero
 400d638:	90c6b03a 	or	r3,r18,r3
 400d63c:	003fc306 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d640:	2000e026 	beq	r4,zero,400d9c4 <__subsf3+0x4dc>
 400d644:	2007883a 	mov	r3,r4
 400d648:	188001cc 	andi	r2,r3,7
 400d64c:	103fc11e 	bne	r2,zero,400d554 <__alt_mem_onchip_memory2_0+0xfc00c2d4>
 400d650:	180ad0fa 	srli	r5,r3,3
 400d654:	00c03fc4 	movi	r3,255
 400d658:	8880004c 	andi	r2,r17,1
 400d65c:	80c0031e 	bne	r16,r3,400d66c <__subsf3+0x184>
 400d660:	28006d26 	beq	r5,zero,400d818 <__subsf3+0x330>
 400d664:	29401034 	orhi	r5,r5,64
 400d668:	043fffc4 	movi	r16,-1
 400d66c:	00c02034 	movhi	r3,128
 400d670:	18ffffc4 	addi	r3,r3,-1
 400d674:	28ca703a 	and	r5,r5,r3
 400d678:	003fc206 	br	400d584 <__alt_mem_onchip_memory2_0+0xfc00c304>
 400d67c:	01003c0e 	bge	zero,r4,400d770 <__subsf3+0x288>
 400d680:	30002126 	beq	r6,zero,400d708 <__subsf3+0x220>
 400d684:	01403fc4 	movi	r5,255
 400d688:	817fb026 	beq	r16,r5,400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d68c:	39c10034 	orhi	r7,r7,1024
 400d690:	014006c4 	movi	r5,27
 400d694:	29007416 	blt	r5,r4,400d868 <__subsf3+0x380>
 400d698:	01400804 	movi	r5,32
 400d69c:	290bc83a 	sub	r5,r5,r4
 400d6a0:	394a983a 	sll	r5,r7,r5
 400d6a4:	390ed83a 	srl	r7,r7,r4
 400d6a8:	2808c03a 	cmpne	r4,r5,zero
 400d6ac:	390eb03a 	or	r7,r7,r4
 400d6b0:	19c7883a 	add	r3,r3,r7
 400d6b4:	1901002c 	andhi	r4,r3,1024
 400d6b8:	20003826 	beq	r4,zero,400d79c <__subsf3+0x2b4>
 400d6bc:	84000044 	addi	r16,r16,1
 400d6c0:	01003fc4 	movi	r4,255
 400d6c4:	81005426 	beq	r16,r4,400d818 <__subsf3+0x330>
 400d6c8:	1023883a 	mov	r17,r2
 400d6cc:	00bf0034 	movhi	r2,64512
 400d6d0:	10bfffc4 	addi	r2,r2,-1
 400d6d4:	1900004c 	andi	r4,r3,1
 400d6d8:	1886703a 	and	r3,r3,r2
 400d6dc:	1806d07a 	srli	r3,r3,1
 400d6e0:	1906b03a 	or	r3,r3,r4
 400d6e4:	003f9906 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d6e8:	383f9226 	beq	r7,zero,400d534 <__alt_mem_onchip_memory2_0+0xfc00c2b4>
 400d6ec:	10803fcc 	andi	r2,r2,255
 400d6f0:	003f9106 	br	400d538 <__alt_mem_onchip_memory2_0+0xfc00c2b8>
 400d6f4:	213fffc4 	addi	r4,r4,-1
 400d6f8:	203fbc26 	beq	r4,zero,400d5ec <__alt_mem_onchip_memory2_0+0xfc00c36c>
 400d6fc:	00803fc4 	movi	r2,255
 400d700:	80bfb21e 	bne	r16,r2,400d5cc <__alt_mem_onchip_memory2_0+0xfc00c34c>
 400d704:	003f9106 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d708:	383f9026 	beq	r7,zero,400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d70c:	213fffc4 	addi	r4,r4,-1
 400d710:	203fe726 	beq	r4,zero,400d6b0 <__alt_mem_onchip_memory2_0+0xfc00c430>
 400d714:	01403fc4 	movi	r5,255
 400d718:	817fdd1e 	bne	r16,r5,400d690 <__alt_mem_onchip_memory2_0+0xfc00c410>
 400d71c:	003f8b06 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d720:	2000221e 	bne	r4,zero,400d7ac <__subsf3+0x2c4>
 400d724:	81000044 	addi	r4,r16,1
 400d728:	21003fcc 	andi	r4,r4,255
 400d72c:	01400044 	movi	r5,1
 400d730:	2900470e 	bge	r5,r4,400d850 <__subsf3+0x368>
 400d734:	19e5c83a 	sub	r18,r3,r7
 400d738:	9141002c 	andhi	r5,r18,1024
 400d73c:	28002d26 	beq	r5,zero,400d7f4 <__subsf3+0x30c>
 400d740:	38e5c83a 	sub	r18,r7,r3
 400d744:	1023883a 	mov	r17,r2
 400d748:	003fae06 	br	400d604 <__alt_mem_onchip_memory2_0+0xfc00c384>
 400d74c:	8880004c 	andi	r2,r17,1
 400d750:	043fffc4 	movi	r16,-1
 400d754:	000b883a 	mov	r5,zero
 400d758:	003f8a06 	br	400d584 <__alt_mem_onchip_memory2_0+0xfc00c304>
 400d75c:	00ff0034 	movhi	r3,64512
 400d760:	18ffffc4 	addi	r3,r3,-1
 400d764:	80a1c83a 	sub	r16,r16,r2
 400d768:	90c6703a 	and	r3,r18,r3
 400d76c:	003f7706 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d770:	2000431e 	bne	r4,zero,400d880 <__subsf3+0x398>
 400d774:	81000044 	addi	r4,r16,1
 400d778:	21803fcc 	andi	r6,r4,255
 400d77c:	01400044 	movi	r5,1
 400d780:	2980280e 	bge	r5,r6,400d824 <__subsf3+0x33c>
 400d784:	01403fc4 	movi	r5,255
 400d788:	21402326 	beq	r4,r5,400d818 <__subsf3+0x330>
 400d78c:	19c7883a 	add	r3,r3,r7
 400d790:	1806d07a 	srli	r3,r3,1
 400d794:	2021883a 	mov	r16,r4
 400d798:	003f6c06 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d79c:	1023883a 	mov	r17,r2
 400d7a0:	003fa906 	br	400d648 <__alt_mem_onchip_memory2_0+0xfc00c3c8>
 400d7a4:	01c00044 	movi	r7,1
 400d7a8:	003f9006 	br	400d5ec <__alt_mem_onchip_memory2_0+0xfc00c36c>
 400d7ac:	8000151e 	bne	r16,zero,400d804 <__subsf3+0x31c>
 400d7b0:	18002f26 	beq	r3,zero,400d870 <__subsf3+0x388>
 400d7b4:	0108303a 	nor	r4,zero,r4
 400d7b8:	20000a26 	beq	r4,zero,400d7e4 <__subsf3+0x2fc>
 400d7bc:	01403fc4 	movi	r5,255
 400d7c0:	31402b26 	beq	r6,r5,400d870 <__subsf3+0x388>
 400d7c4:	014006c4 	movi	r5,27
 400d7c8:	29006e16 	blt	r5,r4,400d984 <__subsf3+0x49c>
 400d7cc:	01400804 	movi	r5,32
 400d7d0:	290bc83a 	sub	r5,r5,r4
 400d7d4:	194a983a 	sll	r5,r3,r5
 400d7d8:	1908d83a 	srl	r4,r3,r4
 400d7dc:	2806c03a 	cmpne	r3,r5,zero
 400d7e0:	20c6b03a 	or	r3,r4,r3
 400d7e4:	38c7c83a 	sub	r3,r7,r3
 400d7e8:	3021883a 	mov	r16,r6
 400d7ec:	1023883a 	mov	r17,r2
 400d7f0:	003f7f06 	br	400d5f0 <__alt_mem_onchip_memory2_0+0xfc00c370>
 400d7f4:	903f831e 	bne	r18,zero,400d604 <__alt_mem_onchip_memory2_0+0xfc00c384>
 400d7f8:	0005883a 	mov	r2,zero
 400d7fc:	0021883a 	mov	r16,zero
 400d800:	003f9a06 	br	400d66c <__alt_mem_onchip_memory2_0+0xfc00c3ec>
 400d804:	01403fc4 	movi	r5,255
 400d808:	31401926 	beq	r6,r5,400d870 <__subsf3+0x388>
 400d80c:	0109c83a 	sub	r4,zero,r4
 400d810:	18c10034 	orhi	r3,r3,1024
 400d814:	003feb06 	br	400d7c4 <__alt_mem_onchip_memory2_0+0xfc00c544>
 400d818:	043fffc4 	movi	r16,-1
 400d81c:	000b883a 	mov	r5,zero
 400d820:	003f5806 	br	400d584 <__alt_mem_onchip_memory2_0+0xfc00c304>
 400d824:	8000481e 	bne	r16,zero,400d948 <__subsf3+0x460>
 400d828:	18006226 	beq	r3,zero,400d9b4 <__subsf3+0x4cc>
 400d82c:	383f4726 	beq	r7,zero,400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d830:	19c7883a 	add	r3,r3,r7
 400d834:	1881002c 	andhi	r2,r3,1024
 400d838:	103f8326 	beq	r2,zero,400d648 <__alt_mem_onchip_memory2_0+0xfc00c3c8>
 400d83c:	00bf0034 	movhi	r2,64512
 400d840:	10bfffc4 	addi	r2,r2,-1
 400d844:	2821883a 	mov	r16,r5
 400d848:	1886703a 	and	r3,r3,r2
 400d84c:	003f3f06 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d850:	80001c1e 	bne	r16,zero,400d8c4 <__subsf3+0x3dc>
 400d854:	1800261e 	bne	r3,zero,400d8f0 <__subsf3+0x408>
 400d858:	38004c26 	beq	r7,zero,400d98c <__subsf3+0x4a4>
 400d85c:	3807883a 	mov	r3,r7
 400d860:	1023883a 	mov	r17,r2
 400d864:	003f3906 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d868:	01c00044 	movi	r7,1
 400d86c:	003f9006 	br	400d6b0 <__alt_mem_onchip_memory2_0+0xfc00c430>
 400d870:	3807883a 	mov	r3,r7
 400d874:	3021883a 	mov	r16,r6
 400d878:	1023883a 	mov	r17,r2
 400d87c:	003f3306 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d880:	8000161e 	bne	r16,zero,400d8dc <__subsf3+0x3f4>
 400d884:	18002d26 	beq	r3,zero,400d93c <__subsf3+0x454>
 400d888:	0108303a 	nor	r4,zero,r4
 400d88c:	20000a26 	beq	r4,zero,400d8b8 <__subsf3+0x3d0>
 400d890:	01403fc4 	movi	r5,255
 400d894:	31402926 	beq	r6,r5,400d93c <__subsf3+0x454>
 400d898:	014006c4 	movi	r5,27
 400d89c:	29004716 	blt	r5,r4,400d9bc <__subsf3+0x4d4>
 400d8a0:	01400804 	movi	r5,32
 400d8a4:	290bc83a 	sub	r5,r5,r4
 400d8a8:	194a983a 	sll	r5,r3,r5
 400d8ac:	1908d83a 	srl	r4,r3,r4
 400d8b0:	2806c03a 	cmpne	r3,r5,zero
 400d8b4:	20c6b03a 	or	r3,r4,r3
 400d8b8:	19c7883a 	add	r3,r3,r7
 400d8bc:	3021883a 	mov	r16,r6
 400d8c0:	003f7c06 	br	400d6b4 <__alt_mem_onchip_memory2_0+0xfc00c434>
 400d8c4:	1800111e 	bne	r3,zero,400d90c <__subsf3+0x424>
 400d8c8:	38003326 	beq	r7,zero,400d998 <__subsf3+0x4b0>
 400d8cc:	3807883a 	mov	r3,r7
 400d8d0:	1023883a 	mov	r17,r2
 400d8d4:	04003fc4 	movi	r16,255
 400d8d8:	003f1c06 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d8dc:	01403fc4 	movi	r5,255
 400d8e0:	31401626 	beq	r6,r5,400d93c <__subsf3+0x454>
 400d8e4:	0109c83a 	sub	r4,zero,r4
 400d8e8:	18c10034 	orhi	r3,r3,1024
 400d8ec:	003fea06 	br	400d898 <__alt_mem_onchip_memory2_0+0xfc00c618>
 400d8f0:	383f1626 	beq	r7,zero,400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d8f4:	19c9c83a 	sub	r4,r3,r7
 400d8f8:	2141002c 	andhi	r5,r4,1024
 400d8fc:	283f5026 	beq	r5,zero,400d640 <__alt_mem_onchip_memory2_0+0xfc00c3c0>
 400d900:	38c7c83a 	sub	r3,r7,r3
 400d904:	1023883a 	mov	r17,r2
 400d908:	003f1006 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d90c:	38001b26 	beq	r7,zero,400d97c <__subsf3+0x494>
 400d910:	1806d0fa 	srli	r3,r3,3
 400d914:	1900102c 	andhi	r4,r3,64
 400d918:	20000526 	beq	r4,zero,400d930 <__subsf3+0x448>
 400d91c:	380ed0fa 	srli	r7,r7,3
 400d920:	3900102c 	andhi	r4,r7,64
 400d924:	2000021e 	bne	r4,zero,400d930 <__subsf3+0x448>
 400d928:	3807883a 	mov	r3,r7
 400d92c:	1023883a 	mov	r17,r2
 400d930:	180690fa 	slli	r3,r3,3
 400d934:	04003fc4 	movi	r16,255
 400d938:	003f0406 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d93c:	3807883a 	mov	r3,r7
 400d940:	3021883a 	mov	r16,r6
 400d944:	003f0106 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d948:	18001726 	beq	r3,zero,400d9a8 <__subsf3+0x4c0>
 400d94c:	38000b26 	beq	r7,zero,400d97c <__subsf3+0x494>
 400d950:	1806d0fa 	srli	r3,r3,3
 400d954:	1900102c 	andhi	r4,r3,64
 400d958:	20000426 	beq	r4,zero,400d96c <__subsf3+0x484>
 400d95c:	380ed0fa 	srli	r7,r7,3
 400d960:	3900102c 	andhi	r4,r7,64
 400d964:	2000011e 	bne	r4,zero,400d96c <__subsf3+0x484>
 400d968:	3807883a 	mov	r3,r7
 400d96c:	180690fa 	slli	r3,r3,3
 400d970:	1023883a 	mov	r17,r2
 400d974:	04003fc4 	movi	r16,255
 400d978:	003ef406 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d97c:	04003fc4 	movi	r16,255
 400d980:	003ef206 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d984:	00c00044 	movi	r3,1
 400d988:	003f9606 	br	400d7e4 <__alt_mem_onchip_memory2_0+0xfc00c564>
 400d98c:	000b883a 	mov	r5,zero
 400d990:	0005883a 	mov	r2,zero
 400d994:	003f3506 	br	400d66c <__alt_mem_onchip_memory2_0+0xfc00c3ec>
 400d998:	01402034 	movhi	r5,128
 400d99c:	297fffc4 	addi	r5,r5,-1
 400d9a0:	0005883a 	mov	r2,zero
 400d9a4:	003f2f06 	br	400d664 <__alt_mem_onchip_memory2_0+0xfc00c3e4>
 400d9a8:	3807883a 	mov	r3,r7
 400d9ac:	04003fc4 	movi	r16,255
 400d9b0:	003ee606 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d9b4:	3807883a 	mov	r3,r7
 400d9b8:	003ee406 	br	400d54c <__alt_mem_onchip_memory2_0+0xfc00c2cc>
 400d9bc:	00c00044 	movi	r3,1
 400d9c0:	003fbd06 	br	400d8b8 <__alt_mem_onchip_memory2_0+0xfc00c638>
 400d9c4:	0005883a 	mov	r2,zero
 400d9c8:	003f2806 	br	400d66c <__alt_mem_onchip_memory2_0+0xfc00c3ec>

0400d9cc <__fixsfsi>:
 400d9cc:	200ad5fa 	srli	r5,r4,23
 400d9d0:	00c02034 	movhi	r3,128
 400d9d4:	18ffffc4 	addi	r3,r3,-1
 400d9d8:	29403fcc 	andi	r5,r5,255
 400d9dc:	00801f84 	movi	r2,126
 400d9e0:	1906703a 	and	r3,r3,r4
 400d9e4:	2008d7fa 	srli	r4,r4,31
 400d9e8:	11400e0e 	bge	r2,r5,400da24 <__fixsfsi+0x58>
 400d9ec:	00802744 	movi	r2,157
 400d9f0:	11400816 	blt	r2,r5,400da14 <__fixsfsi+0x48>
 400d9f4:	00802544 	movi	r2,149
 400d9f8:	18c02034 	orhi	r3,r3,128
 400d9fc:	11400b0e 	bge	r2,r5,400da2c <__fixsfsi+0x60>
 400da00:	28bfda84 	addi	r2,r5,-150
 400da04:	1884983a 	sll	r2,r3,r2
 400da08:	20000726 	beq	r4,zero,400da28 <__fixsfsi+0x5c>
 400da0c:	0085c83a 	sub	r2,zero,r2
 400da10:	f800283a 	ret
 400da14:	00a00034 	movhi	r2,32768
 400da18:	10bfffc4 	addi	r2,r2,-1
 400da1c:	2085883a 	add	r2,r4,r2
 400da20:	f800283a 	ret
 400da24:	0005883a 	mov	r2,zero
 400da28:	f800283a 	ret
 400da2c:	00802584 	movi	r2,150
 400da30:	1145c83a 	sub	r2,r2,r5
 400da34:	1884d83a 	srl	r2,r3,r2
 400da38:	003ff306 	br	400da08 <__alt_mem_onchip_memory2_0+0xfc00c788>

0400da3c <__floatunsisf>:
 400da3c:	defffe04 	addi	sp,sp,-8
 400da40:	dfc00115 	stw	ra,4(sp)
 400da44:	dc000015 	stw	r16,0(sp)
 400da48:	20002c26 	beq	r4,zero,400dafc <__floatunsisf+0xc0>
 400da4c:	2021883a 	mov	r16,r4
 400da50:	400e04c0 	call	400e04c <__clzsi2>
 400da54:	00c02784 	movi	r3,158
 400da58:	1887c83a 	sub	r3,r3,r2
 400da5c:	01002584 	movi	r4,150
 400da60:	20c00f16 	blt	r4,r3,400daa0 <__floatunsisf+0x64>
 400da64:	20c9c83a 	sub	r4,r4,r3
 400da68:	8108983a 	sll	r4,r16,r4
 400da6c:	00802034 	movhi	r2,128
 400da70:	10bfffc4 	addi	r2,r2,-1
 400da74:	2088703a 	and	r4,r4,r2
 400da78:	18803fcc 	andi	r2,r3,255
 400da7c:	100695fa 	slli	r3,r2,23
 400da80:	00802034 	movhi	r2,128
 400da84:	10bfffc4 	addi	r2,r2,-1
 400da88:	2084703a 	and	r2,r4,r2
 400da8c:	10c4b03a 	or	r2,r2,r3
 400da90:	dfc00117 	ldw	ra,4(sp)
 400da94:	dc000017 	ldw	r16,0(sp)
 400da98:	dec00204 	addi	sp,sp,8
 400da9c:	f800283a 	ret
 400daa0:	01002644 	movi	r4,153
 400daa4:	20c01816 	blt	r4,r3,400db08 <__floatunsisf+0xcc>
 400daa8:	20c9c83a 	sub	r4,r4,r3
 400daac:	8108983a 	sll	r4,r16,r4
 400dab0:	017f0034 	movhi	r5,64512
 400dab4:	297fffc4 	addi	r5,r5,-1
 400dab8:	218001cc 	andi	r6,r4,7
 400dabc:	214a703a 	and	r5,r4,r5
 400dac0:	30000426 	beq	r6,zero,400dad4 <__floatunsisf+0x98>
 400dac4:	210003cc 	andi	r4,r4,15
 400dac8:	01800104 	movi	r6,4
 400dacc:	21800126 	beq	r4,r6,400dad4 <__floatunsisf+0x98>
 400dad0:	298b883a 	add	r5,r5,r6
 400dad4:	2901002c 	andhi	r4,r5,1024
 400dad8:	20000526 	beq	r4,zero,400daf0 <__floatunsisf+0xb4>
 400dadc:	00c027c4 	movi	r3,159
 400dae0:	1887c83a 	sub	r3,r3,r2
 400dae4:	00bf0034 	movhi	r2,64512
 400dae8:	10bfffc4 	addi	r2,r2,-1
 400daec:	288a703a 	and	r5,r5,r2
 400daf0:	280891ba 	slli	r4,r5,6
 400daf4:	2008d27a 	srli	r4,r4,9
 400daf8:	003fdf06 	br	400da78 <__alt_mem_onchip_memory2_0+0xfc00c7f8>
 400dafc:	0007883a 	mov	r3,zero
 400db00:	0009883a 	mov	r4,zero
 400db04:	003fdc06 	br	400da78 <__alt_mem_onchip_memory2_0+0xfc00c7f8>
 400db08:	01402e44 	movi	r5,185
 400db0c:	28cbc83a 	sub	r5,r5,r3
 400db10:	01000144 	movi	r4,5
 400db14:	2089c83a 	sub	r4,r4,r2
 400db18:	814a983a 	sll	r5,r16,r5
 400db1c:	8108d83a 	srl	r4,r16,r4
 400db20:	2820c03a 	cmpne	r16,r5,zero
 400db24:	2408b03a 	or	r4,r4,r16
 400db28:	003fe106 	br	400dab0 <__alt_mem_onchip_memory2_0+0xfc00c830>

0400db2c <_Unwind_ForcedUnwind_Phase2>:
 400db2c:	defff404 	addi	sp,sp,-48
 400db30:	dd800915 	stw	r22,36(sp)
 400db34:	058100f4 	movhi	r22,1027
 400db38:	ddc00a15 	stw	r23,40(sp)
 400db3c:	dd400815 	stw	r21,32(sp)
 400db40:	dd000715 	stw	r20,28(sp)
 400db44:	dcc00615 	stw	r19,24(sp)
 400db48:	dc400415 	stw	r17,16(sp)
 400db4c:	dc000315 	stw	r16,12(sp)
 400db50:	dfc00b15 	stw	ra,44(sp)
 400db54:	dc800515 	stw	r18,20(sp)
 400db58:	2021883a 	mov	r16,r4
 400db5c:	2823883a 	mov	r17,r5
 400db60:	24c00317 	ldw	r19,12(r4)
 400db64:	25000417 	ldw	r20,16(r4)
 400db68:	28c00017 	ldw	r3,0(r5)
 400db6c:	b5b53504 	addi	r22,r22,-11052
 400db70:	054001c4 	movi	r21,7
 400db74:	05c00204 	movi	r23,8
 400db78:	00001606 	br	400dbd4 <_Unwind_ForcedUnwind_Phase2+0xa8>
 400db7c:	81800017 	ldw	r6,0(r16)
 400db80:	81c00117 	ldw	r7,4(r16)
 400db84:	1c800617 	ldw	r18,24(r3)
 400db88:	dd000215 	stw	r20,8(sp)
 400db8c:	dc400115 	stw	r17,4(sp)
 400db90:	dc000015 	stw	r16,0(sp)
 400db94:	983ee83a 	callr	r19
 400db98:	01400284 	movi	r5,10
 400db9c:	01000044 	movi	r4,1
 400dba0:	1000241e 	bne	r2,zero,400dc34 <_Unwind_ForcedUnwind_Phase2+0x108>
 400dba4:	90000726 	beq	r18,zero,400dbc4 <_Unwind_ForcedUnwind_Phase2+0x98>
 400dba8:	81800017 	ldw	r6,0(r16)
 400dbac:	81c00117 	ldw	r7,4(r16)
 400dbb0:	dc400115 	stw	r17,4(sp)
 400dbb4:	dc000015 	stw	r16,0(sp)
 400dbb8:	903ee83a 	callr	r18
 400dbbc:	15401f26 	beq	r2,r21,400dc3c <_Unwind_ForcedUnwind_Phase2+0x110>
 400dbc0:	15c01c1e 	bne	r2,r23,400dc34 <_Unwind_ForcedUnwind_Phase2+0x108>
 400dbc4:	88800017 	ldw	r2,0(r17)
 400dbc8:	10c00017 	ldw	r3,0(r2)
 400dbcc:	b0c00015 	stw	r3,0(r22)
 400dbd0:	88c00015 	stw	r3,0(r17)
 400dbd4:	01400284 	movi	r5,10
 400dbd8:	01000044 	movi	r4,1
 400dbdc:	183fe71e 	bne	r3,zero,400db7c <__alt_mem_onchip_memory2_0+0xfc00c8fc>
 400dbe0:	81800017 	ldw	r6,0(r16)
 400dbe4:	81c00117 	ldw	r7,4(r16)
 400dbe8:	01400684 	movi	r5,26
 400dbec:	dd000215 	stw	r20,8(sp)
 400dbf0:	dc400115 	stw	r17,4(sp)
 400dbf4:	dc000015 	stw	r16,0(sp)
 400dbf8:	01000044 	movi	r4,1
 400dbfc:	983ee83a 	callr	r19
 400dc00:	10000c1e 	bne	r2,zero,400dc34 <_Unwind_ForcedUnwind_Phase2+0x108>
 400dc04:	00800144 	movi	r2,5
 400dc08:	dfc00b17 	ldw	ra,44(sp)
 400dc0c:	ddc00a17 	ldw	r23,40(sp)
 400dc10:	dd800917 	ldw	r22,36(sp)
 400dc14:	dd400817 	ldw	r21,32(sp)
 400dc18:	dd000717 	ldw	r20,28(sp)
 400dc1c:	dcc00617 	ldw	r19,24(sp)
 400dc20:	dc800517 	ldw	r18,20(sp)
 400dc24:	dc400417 	ldw	r17,16(sp)
 400dc28:	dc000317 	ldw	r16,12(sp)
 400dc2c:	dec00c04 	addi	sp,sp,48
 400dc30:	f800283a 	ret
 400dc34:	00800084 	movi	r2,2
 400dc38:	003ff306 	br	400dc08 <__alt_mem_onchip_memory2_0+0xfc00c988>
 400dc3c:	a805883a 	mov	r2,r21
 400dc40:	003ff106 	br	400dc08 <__alt_mem_onchip_memory2_0+0xfc00c988>

0400dc44 <_Unwind_RaiseException_Phase2>:
 400dc44:	28c00017 	ldw	r3,0(r5)
 400dc48:	defff804 	addi	sp,sp,-32
 400dc4c:	dcc00515 	stw	r19,20(sp)
 400dc50:	dc800415 	stw	r18,16(sp)
 400dc54:	dc400315 	stw	r17,12(sp)
 400dc58:	dc000215 	stw	r16,8(sp)
 400dc5c:	dfc00715 	stw	ra,28(sp)
 400dc60:	dd000615 	stw	r20,24(sp)
 400dc64:	2823883a 	mov	r17,r5
 400dc68:	2021883a 	mov	r16,r4
 400dc6c:	048001c4 	movi	r18,7
 400dc70:	04c00204 	movi	r19,8
 400dc74:	18001326 	beq	r3,zero,400dcc4 <_Unwind_RaiseException_Phase2+0x80>
 400dc78:	81000417 	ldw	r4,16(r16)
 400dc7c:	1a000617 	ldw	r8,24(r3)
 400dc80:	19001926 	beq	r3,r4,400dce8 <_Unwind_RaiseException_Phase2+0xa4>
 400dc84:	40000c26 	beq	r8,zero,400dcb8 <_Unwind_RaiseException_Phase2+0x74>
 400dc88:	01400084 	movi	r5,2
 400dc8c:	0029883a 	mov	r20,zero
 400dc90:	81800017 	ldw	r6,0(r16)
 400dc94:	81c00117 	ldw	r7,4(r16)
 400dc98:	01000044 	movi	r4,1
 400dc9c:	dc400115 	stw	r17,4(sp)
 400dca0:	dc000015 	stw	r16,0(sp)
 400dca4:	403ee83a 	callr	r8
 400dca8:	14801326 	beq	r2,r18,400dcf8 <_Unwind_RaiseException_Phase2+0xb4>
 400dcac:	14c0051e 	bne	r2,r19,400dcc4 <_Unwind_RaiseException_Phase2+0x80>
 400dcb0:	a000131e 	bne	r20,zero,400dd00 <_Unwind_RaiseException_Phase2+0xbc>
 400dcb4:	88c00017 	ldw	r3,0(r17)
 400dcb8:	18c00017 	ldw	r3,0(r3)
 400dcbc:	88c00015 	stw	r3,0(r17)
 400dcc0:	183fed1e 	bne	r3,zero,400dc78 <__alt_mem_onchip_memory2_0+0xfc00c9f8>
 400dcc4:	00800084 	movi	r2,2
 400dcc8:	dfc00717 	ldw	ra,28(sp)
 400dccc:	dd000617 	ldw	r20,24(sp)
 400dcd0:	dcc00517 	ldw	r19,20(sp)
 400dcd4:	dc800417 	ldw	r18,16(sp)
 400dcd8:	dc400317 	ldw	r17,12(sp)
 400dcdc:	dc000217 	ldw	r16,8(sp)
 400dce0:	dec00804 	addi	sp,sp,32
 400dce4:	f800283a 	ret
 400dce8:	40000526 	beq	r8,zero,400dd00 <_Unwind_RaiseException_Phase2+0xbc>
 400dcec:	01400184 	movi	r5,6
 400dcf0:	05000104 	movi	r20,4
 400dcf4:	003fe606 	br	400dc90 <__alt_mem_onchip_memory2_0+0xfc00ca10>
 400dcf8:	9005883a 	mov	r2,r18
 400dcfc:	003ff206 	br	400dcc8 <__alt_mem_onchip_memory2_0+0xfc00ca48>
 400dd00:	400e0b00 	call	400e0b0 <abort>

0400dd04 <uw_install_context.isra.1>:
 400dd04:	20c00017 	ldw	r3,0(r4)
 400dd08:	deffff04 	addi	sp,sp,-4
 400dd0c:	014100f4 	movhi	r5,1027
 400dd10:	19000917 	ldw	r4,36(r3)
 400dd14:	df000015 	stw	fp,0(sp)
 400dd18:	18800804 	addi	r2,r3,32
 400dd1c:	d839883a 	mov	fp,sp
 400dd20:	29753504 	addi	r5,r5,-11052
 400dd24:	28c00015 	stw	r3,0(r5)
 400dd28:	17000017 	ldw	fp,0(r2)
 400dd2c:	1ec00a17 	ldw	sp,40(r3)
 400dd30:	2000683a 	jmp	r4

0400dd34 <_Unwind_SjLj_Register>:
 400dd34:	008100f4 	movhi	r2,1027
 400dd38:	10b53504 	addi	r2,r2,-11052
 400dd3c:	10c00017 	ldw	r3,0(r2)
 400dd40:	11000015 	stw	r4,0(r2)
 400dd44:	20c00015 	stw	r3,0(r4)
 400dd48:	f800283a 	ret

0400dd4c <_Unwind_SjLj_Unregister>:
 400dd4c:	20c00017 	ldw	r3,0(r4)
 400dd50:	008100f4 	movhi	r2,1027
 400dd54:	10b53504 	addi	r2,r2,-11052
 400dd58:	10c00015 	stw	r3,0(r2)
 400dd5c:	f800283a 	ret

0400dd60 <_Unwind_GetGR>:
 400dd60:	20800017 	ldw	r2,0(r4)
 400dd64:	29400084 	addi	r5,r5,2
 400dd68:	294b883a 	add	r5,r5,r5
 400dd6c:	294b883a 	add	r5,r5,r5
 400dd70:	114b883a 	add	r5,r2,r5
 400dd74:	28800017 	ldw	r2,0(r5)
 400dd78:	f800283a 	ret

0400dd7c <_Unwind_GetCFA>:
 400dd7c:	20800017 	ldw	r2,0(r4)
 400dd80:	10000226 	beq	r2,zero,400dd8c <_Unwind_GetCFA+0x10>
 400dd84:	10800a17 	ldw	r2,40(r2)
 400dd88:	f800283a 	ret
 400dd8c:	0005883a 	mov	r2,zero
 400dd90:	f800283a 	ret

0400dd94 <_Unwind_SetGR>:
 400dd94:	20800017 	ldw	r2,0(r4)
 400dd98:	29400084 	addi	r5,r5,2
 400dd9c:	294b883a 	add	r5,r5,r5
 400dda0:	294b883a 	add	r5,r5,r5
 400dda4:	114b883a 	add	r5,r2,r5
 400dda8:	29800015 	stw	r6,0(r5)
 400ddac:	f800283a 	ret

0400ddb0 <_Unwind_GetIP>:
 400ddb0:	20800017 	ldw	r2,0(r4)
 400ddb4:	10800117 	ldw	r2,4(r2)
 400ddb8:	10800044 	addi	r2,r2,1
 400ddbc:	f800283a 	ret

0400ddc0 <_Unwind_GetIPInfo>:
 400ddc0:	20800017 	ldw	r2,0(r4)
 400ddc4:	28000015 	stw	zero,0(r5)
 400ddc8:	10000326 	beq	r2,zero,400ddd8 <_Unwind_GetIPInfo+0x18>
 400ddcc:	10800117 	ldw	r2,4(r2)
 400ddd0:	10800044 	addi	r2,r2,1
 400ddd4:	f800283a 	ret
 400ddd8:	0005883a 	mov	r2,zero
 400dddc:	f800283a 	ret

0400dde0 <_Unwind_SetIP>:
 400dde0:	20800017 	ldw	r2,0(r4)
 400dde4:	297fffc4 	addi	r5,r5,-1
 400dde8:	11400115 	stw	r5,4(r2)
 400ddec:	f800283a 	ret

0400ddf0 <_Unwind_GetLanguageSpecificData>:
 400ddf0:	20800017 	ldw	r2,0(r4)
 400ddf4:	10800717 	ldw	r2,28(r2)
 400ddf8:	f800283a 	ret

0400ddfc <_Unwind_GetRegionStart>:
 400ddfc:	0005883a 	mov	r2,zero
 400de00:	f800283a 	ret

0400de04 <_Unwind_FindEnclosingFunction>:
 400de04:	0005883a 	mov	r2,zero
 400de08:	f800283a 	ret

0400de0c <_Unwind_GetDataRelBase>:
 400de0c:	0005883a 	mov	r2,zero
 400de10:	f800283a 	ret

0400de14 <_Unwind_GetTextRelBase>:
 400de14:	0005883a 	mov	r2,zero
 400de18:	f800283a 	ret

0400de1c <_Unwind_SjLj_RaiseException>:
 400de1c:	008100f4 	movhi	r2,1027
 400de20:	defff804 	addi	sp,sp,-32
 400de24:	10b53504 	addi	r2,r2,-11052
 400de28:	dc800515 	stw	r18,20(sp)
 400de2c:	14800017 	ldw	r18,0(r2)
 400de30:	dfc00715 	stw	ra,28(sp)
 400de34:	dcc00615 	stw	r19,24(sp)
 400de38:	dc400415 	stw	r17,16(sp)
 400de3c:	dc000315 	stw	r16,12(sp)
 400de40:	dc800215 	stw	r18,8(sp)
 400de44:	90001426 	beq	r18,zero,400de98 <_Unwind_SjLj_RaiseException+0x7c>
 400de48:	2021883a 	mov	r16,r4
 400de4c:	9005883a 	mov	r2,r18
 400de50:	04400184 	movi	r17,6
 400de54:	04c00204 	movi	r19,8
 400de58:	10800617 	ldw	r2,24(r2)
 400de5c:	10000a26 	beq	r2,zero,400de88 <_Unwind_SjLj_RaiseException+0x6c>
 400de60:	81800017 	ldw	r6,0(r16)
 400de64:	81c00117 	ldw	r7,4(r16)
 400de68:	01400044 	movi	r5,1
 400de6c:	d8c00204 	addi	r3,sp,8
 400de70:	d8c00115 	stw	r3,4(sp)
 400de74:	dc000015 	stw	r16,0(sp)
 400de78:	2809883a 	mov	r4,r5
 400de7c:	103ee83a 	callr	r2
 400de80:	14400d26 	beq	r2,r17,400deb8 <_Unwind_SjLj_RaiseException+0x9c>
 400de84:	14c0171e 	bne	r2,r19,400dee4 <_Unwind_SjLj_RaiseException+0xc8>
 400de88:	d8800217 	ldw	r2,8(sp)
 400de8c:	10800017 	ldw	r2,0(r2)
 400de90:	d8800215 	stw	r2,8(sp)
 400de94:	103ff01e 	bne	r2,zero,400de58 <__alt_mem_onchip_memory2_0+0xfc00cbd8>
 400de98:	00800144 	movi	r2,5
 400de9c:	dfc00717 	ldw	ra,28(sp)
 400dea0:	dcc00617 	ldw	r19,24(sp)
 400dea4:	dc800517 	ldw	r18,20(sp)
 400dea8:	dc400417 	ldw	r17,16(sp)
 400deac:	dc000317 	ldw	r16,12(sp)
 400deb0:	dec00804 	addi	sp,sp,32
 400deb4:	f800283a 	ret
 400deb8:	d8800217 	ldw	r2,8(sp)
 400debc:	80000315 	stw	zero,12(r16)
 400dec0:	d9400204 	addi	r5,sp,8
 400dec4:	80800415 	stw	r2,16(r16)
 400dec8:	8009883a 	mov	r4,r16
 400decc:	dc800215 	stw	r18,8(sp)
 400ded0:	400dc440 	call	400dc44 <_Unwind_RaiseException_Phase2>
 400ded4:	00c001c4 	movi	r3,7
 400ded8:	10fff01e 	bne	r2,r3,400de9c <__alt_mem_onchip_memory2_0+0xfc00cc1c>
 400dedc:	d9000204 	addi	r4,sp,8
 400dee0:	400dd040 	call	400dd04 <uw_install_context.isra.1>
 400dee4:	008000c4 	movi	r2,3
 400dee8:	003fec06 	br	400de9c <__alt_mem_onchip_memory2_0+0xfc00cc1c>

0400deec <_Unwind_SjLj_ForcedUnwind>:
 400deec:	00c100f4 	movhi	r3,1027
 400def0:	18f53504 	addi	r3,r3,-11052
 400def4:	defffe04 	addi	sp,sp,-8
 400def8:	18c00017 	ldw	r3,0(r3)
 400defc:	dfc00115 	stw	ra,4(sp)
 400df00:	21400315 	stw	r5,12(r4)
 400df04:	21800415 	stw	r6,16(r4)
 400df08:	d80b883a 	mov	r5,sp
 400df0c:	d8c00015 	stw	r3,0(sp)
 400df10:	400db2c0 	call	400db2c <_Unwind_ForcedUnwind_Phase2>
 400df14:	00c001c4 	movi	r3,7
 400df18:	10c00326 	beq	r2,r3,400df28 <_Unwind_SjLj_ForcedUnwind+0x3c>
 400df1c:	dfc00117 	ldw	ra,4(sp)
 400df20:	dec00204 	addi	sp,sp,8
 400df24:	f800283a 	ret
 400df28:	d809883a 	mov	r4,sp
 400df2c:	400dd040 	call	400dd04 <uw_install_context.isra.1>

0400df30 <_Unwind_SjLj_Resume>:
 400df30:	00c100f4 	movhi	r3,1027
 400df34:	18f53504 	addi	r3,r3,-11052
 400df38:	18c00017 	ldw	r3,0(r3)
 400df3c:	20800317 	ldw	r2,12(r4)
 400df40:	defffe04 	addi	sp,sp,-8
 400df44:	dfc00115 	stw	ra,4(sp)
 400df48:	d8c00015 	stw	r3,0(sp)
 400df4c:	d80b883a 	mov	r5,sp
 400df50:	1000041e 	bne	r2,zero,400df64 <_Unwind_SjLj_Resume+0x34>
 400df54:	400dc440 	call	400dc44 <_Unwind_RaiseException_Phase2>
 400df58:	00c001c4 	movi	r3,7
 400df5c:	10c00326 	beq	r2,r3,400df6c <_Unwind_SjLj_Resume+0x3c>
 400df60:	400e0b00 	call	400e0b0 <abort>
 400df64:	400db2c0 	call	400db2c <_Unwind_ForcedUnwind_Phase2>
 400df68:	003ffb06 	br	400df58 <__alt_mem_onchip_memory2_0+0xfc00ccd8>
 400df6c:	d809883a 	mov	r4,sp
 400df70:	400dd040 	call	400dd04 <uw_install_context.isra.1>

0400df74 <_Unwind_SjLj_Resume_or_Rethrow>:
 400df74:	20800317 	ldw	r2,12(r4)
 400df78:	defffe04 	addi	sp,sp,-8
 400df7c:	dfc00115 	stw	ra,4(sp)
 400df80:	1000041e 	bne	r2,zero,400df94 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
 400df84:	400de1c0 	call	400de1c <_Unwind_SjLj_RaiseException>
 400df88:	dfc00117 	ldw	ra,4(sp)
 400df8c:	dec00204 	addi	sp,sp,8
 400df90:	f800283a 	ret
 400df94:	008100f4 	movhi	r2,1027
 400df98:	10b53504 	addi	r2,r2,-11052
 400df9c:	10800017 	ldw	r2,0(r2)
 400dfa0:	d80b883a 	mov	r5,sp
 400dfa4:	d8800015 	stw	r2,0(sp)
 400dfa8:	400db2c0 	call	400db2c <_Unwind_ForcedUnwind_Phase2>
 400dfac:	00c001c4 	movi	r3,7
 400dfb0:	10c00126 	beq	r2,r3,400dfb8 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
 400dfb4:	400e0b00 	call	400e0b0 <abort>
 400dfb8:	d809883a 	mov	r4,sp
 400dfbc:	400dd040 	call	400dd04 <uw_install_context.isra.1>

0400dfc0 <_Unwind_DeleteException>:
 400dfc0:	20800217 	ldw	r2,8(r4)
 400dfc4:	10000326 	beq	r2,zero,400dfd4 <_Unwind_DeleteException+0x14>
 400dfc8:	200b883a 	mov	r5,r4
 400dfcc:	01000044 	movi	r4,1
 400dfd0:	1000683a 	jmp	r2
 400dfd4:	f800283a 	ret

0400dfd8 <_Unwind_Backtrace>:
 400dfd8:	008100f4 	movhi	r2,1027
 400dfdc:	10b53504 	addi	r2,r2,-11052
 400dfe0:	10800017 	ldw	r2,0(r2)
 400dfe4:	defffc04 	addi	sp,sp,-16
 400dfe8:	dc400215 	stw	r17,8(sp)
 400dfec:	dc000115 	stw	r16,4(sp)
 400dff0:	dfc00315 	stw	ra,12(sp)
 400dff4:	2023883a 	mov	r17,r4
 400dff8:	2821883a 	mov	r16,r5
 400dffc:	d8800015 	stw	r2,0(sp)
 400e000:	00000506 	br	400e018 <_Unwind_Backtrace+0x40>
 400e004:	883ee83a 	callr	r17
 400e008:	10000e1e 	bne	r2,zero,400e044 <_Unwind_Backtrace+0x6c>
 400e00c:	d8800017 	ldw	r2,0(sp)
 400e010:	10800017 	ldw	r2,0(r2)
 400e014:	d8800015 	stw	r2,0(sp)
 400e018:	800b883a 	mov	r5,r16
 400e01c:	d809883a 	mov	r4,sp
 400e020:	103ff81e 	bne	r2,zero,400e004 <__alt_mem_onchip_memory2_0+0xfc00cd84>
 400e024:	883ee83a 	callr	r17
 400e028:	1000061e 	bne	r2,zero,400e044 <_Unwind_Backtrace+0x6c>
 400e02c:	00800144 	movi	r2,5
 400e030:	dfc00317 	ldw	ra,12(sp)
 400e034:	dc400217 	ldw	r17,8(sp)
 400e038:	dc000117 	ldw	r16,4(sp)
 400e03c:	dec00404 	addi	sp,sp,16
 400e040:	f800283a 	ret
 400e044:	008000c4 	movi	r2,3
 400e048:	003ff906 	br	400e030 <__alt_mem_onchip_memory2_0+0xfc00cdb0>

0400e04c <__clzsi2>:
 400e04c:	00bfffd4 	movui	r2,65535
 400e050:	11000536 	bltu	r2,r4,400e068 <__clzsi2+0x1c>
 400e054:	00803fc4 	movi	r2,255
 400e058:	11000f36 	bltu	r2,r4,400e098 <__clzsi2+0x4c>
 400e05c:	00800804 	movi	r2,32
 400e060:	0007883a 	mov	r3,zero
 400e064:	00000506 	br	400e07c <__clzsi2+0x30>
 400e068:	00804034 	movhi	r2,256
 400e06c:	10bfffc4 	addi	r2,r2,-1
 400e070:	11000c2e 	bgeu	r2,r4,400e0a4 <__clzsi2+0x58>
 400e074:	00800204 	movi	r2,8
 400e078:	00c00604 	movi	r3,24
 400e07c:	20c8d83a 	srl	r4,r4,r3
 400e080:	00c100b4 	movhi	r3,1026
 400e084:	18db7604 	addi	r3,r3,28120
 400e088:	1909883a 	add	r4,r3,r4
 400e08c:	20c00003 	ldbu	r3,0(r4)
 400e090:	10c5c83a 	sub	r2,r2,r3
 400e094:	f800283a 	ret
 400e098:	00800604 	movi	r2,24
 400e09c:	00c00204 	movi	r3,8
 400e0a0:	003ff606 	br	400e07c <__alt_mem_onchip_memory2_0+0xfc00cdfc>
 400e0a4:	00800404 	movi	r2,16
 400e0a8:	1007883a 	mov	r3,r2
 400e0ac:	003ff306 	br	400e07c <__alt_mem_onchip_memory2_0+0xfc00cdfc>

0400e0b0 <abort>:
 400e0b0:	deffff04 	addi	sp,sp,-4
 400e0b4:	01000184 	movi	r4,6
 400e0b8:	dfc00015 	stw	ra,0(sp)
 400e0bc:	400efc00 	call	400efc0 <raise>
 400e0c0:	01000044 	movi	r4,1
 400e0c4:	401b4100 	call	401b410 <_exit>

0400e0c8 <clock>:
 400e0c8:	008100f4 	movhi	r2,1027
 400e0cc:	10a8a704 	addi	r2,r2,-23908
 400e0d0:	11000017 	ldw	r4,0(r2)
 400e0d4:	defffb04 	addi	sp,sp,-20
 400e0d8:	d80b883a 	mov	r5,sp
 400e0dc:	dfc00415 	stw	ra,16(sp)
 400e0e0:	400f1e40 	call	400f1e4 <_times_r>
 400e0e4:	00ffffc4 	movi	r3,-1
 400e0e8:	10c00726 	beq	r2,r3,400e108 <clock+0x40>
 400e0ec:	d8c00017 	ldw	r3,0(sp)
 400e0f0:	d8800117 	ldw	r2,4(sp)
 400e0f4:	1885883a 	add	r2,r3,r2
 400e0f8:	d8c00217 	ldw	r3,8(sp)
 400e0fc:	10c7883a 	add	r3,r2,r3
 400e100:	d8800317 	ldw	r2,12(sp)
 400e104:	1885883a 	add	r2,r3,r2
 400e108:	dfc00417 	ldw	ra,16(sp)
 400e10c:	dec00504 	addi	sp,sp,20
 400e110:	f800283a 	ret

0400e114 <malloc>:
 400e114:	008100f4 	movhi	r2,1027
 400e118:	10a8a704 	addi	r2,r2,-23908
 400e11c:	200b883a 	mov	r5,r4
 400e120:	11000017 	ldw	r4,0(r2)
 400e124:	400e13c1 	jmpi	400e13c <_malloc_r>

0400e128 <free>:
 400e128:	008100f4 	movhi	r2,1027
 400e12c:	10a8a704 	addi	r2,r2,-23908
 400e130:	200b883a 	mov	r5,r4
 400e134:	11000017 	ldw	r4,0(r2)
 400e138:	40137201 	jmpi	4013720 <_free_r>

0400e13c <_malloc_r>:
 400e13c:	defff504 	addi	sp,sp,-44
 400e140:	dc800315 	stw	r18,12(sp)
 400e144:	dfc00a15 	stw	ra,40(sp)
 400e148:	df000915 	stw	fp,36(sp)
 400e14c:	ddc00815 	stw	r23,32(sp)
 400e150:	dd800715 	stw	r22,28(sp)
 400e154:	dd400615 	stw	r21,24(sp)
 400e158:	dd000515 	stw	r20,20(sp)
 400e15c:	dcc00415 	stw	r19,16(sp)
 400e160:	dc400215 	stw	r17,8(sp)
 400e164:	dc000115 	stw	r16,4(sp)
 400e168:	288002c4 	addi	r2,r5,11
 400e16c:	00c00584 	movi	r3,22
 400e170:	2025883a 	mov	r18,r4
 400e174:	18807f2e 	bgeu	r3,r2,400e374 <_malloc_r+0x238>
 400e178:	047ffe04 	movi	r17,-8
 400e17c:	1462703a 	and	r17,r2,r17
 400e180:	8800a316 	blt	r17,zero,400e410 <_malloc_r+0x2d4>
 400e184:	8940a236 	bltu	r17,r5,400e410 <_malloc_r+0x2d4>
 400e188:	401ba2c0 	call	401ba2c <__malloc_lock>
 400e18c:	00807dc4 	movi	r2,503
 400e190:	1441e92e 	bgeu	r2,r17,400e938 <_malloc_r+0x7fc>
 400e194:	8804d27a 	srli	r2,r17,9
 400e198:	1000a126 	beq	r2,zero,400e420 <_malloc_r+0x2e4>
 400e19c:	00c00104 	movi	r3,4
 400e1a0:	18811e36 	bltu	r3,r2,400e61c <_malloc_r+0x4e0>
 400e1a4:	8804d1ba 	srli	r2,r17,6
 400e1a8:	12000e44 	addi	r8,r2,57
 400e1ac:	11c00e04 	addi	r7,r2,56
 400e1b0:	4209883a 	add	r4,r8,r8
 400e1b4:	04c100b4 	movhi	r19,1026
 400e1b8:	2109883a 	add	r4,r4,r4
 400e1bc:	9cdd4a04 	addi	r19,r19,29992
 400e1c0:	2109883a 	add	r4,r4,r4
 400e1c4:	9909883a 	add	r4,r19,r4
 400e1c8:	24000117 	ldw	r16,4(r4)
 400e1cc:	213ffe04 	addi	r4,r4,-8
 400e1d0:	24009726 	beq	r4,r16,400e430 <_malloc_r+0x2f4>
 400e1d4:	80800117 	ldw	r2,4(r16)
 400e1d8:	01bfff04 	movi	r6,-4
 400e1dc:	014003c4 	movi	r5,15
 400e1e0:	1184703a 	and	r2,r2,r6
 400e1e4:	1447c83a 	sub	r3,r2,r17
 400e1e8:	28c00716 	blt	r5,r3,400e208 <_malloc_r+0xcc>
 400e1ec:	1800920e 	bge	r3,zero,400e438 <_malloc_r+0x2fc>
 400e1f0:	84000317 	ldw	r16,12(r16)
 400e1f4:	24008e26 	beq	r4,r16,400e430 <_malloc_r+0x2f4>
 400e1f8:	80800117 	ldw	r2,4(r16)
 400e1fc:	1184703a 	and	r2,r2,r6
 400e200:	1447c83a 	sub	r3,r2,r17
 400e204:	28fff90e 	bge	r5,r3,400e1ec <__alt_mem_onchip_memory2_0+0xfc00cf6c>
 400e208:	3809883a 	mov	r4,r7
 400e20c:	018100b4 	movhi	r6,1026
 400e210:	9c000417 	ldw	r16,16(r19)
 400e214:	319d4a04 	addi	r6,r6,29992
 400e218:	32000204 	addi	r8,r6,8
 400e21c:	82013426 	beq	r16,r8,400e6f0 <_malloc_r+0x5b4>
 400e220:	80c00117 	ldw	r3,4(r16)
 400e224:	00bfff04 	movi	r2,-4
 400e228:	188e703a 	and	r7,r3,r2
 400e22c:	3c45c83a 	sub	r2,r7,r17
 400e230:	00c003c4 	movi	r3,15
 400e234:	18811f16 	blt	r3,r2,400e6b4 <_malloc_r+0x578>
 400e238:	32000515 	stw	r8,20(r6)
 400e23c:	32000415 	stw	r8,16(r6)
 400e240:	10007f0e 	bge	r2,zero,400e440 <_malloc_r+0x304>
 400e244:	00807fc4 	movi	r2,511
 400e248:	11c0fd36 	bltu	r2,r7,400e640 <_malloc_r+0x504>
 400e24c:	3806d0fa 	srli	r3,r7,3
 400e250:	01c00044 	movi	r7,1
 400e254:	30800117 	ldw	r2,4(r6)
 400e258:	19400044 	addi	r5,r3,1
 400e25c:	294b883a 	add	r5,r5,r5
 400e260:	1807d0ba 	srai	r3,r3,2
 400e264:	294b883a 	add	r5,r5,r5
 400e268:	294b883a 	add	r5,r5,r5
 400e26c:	298b883a 	add	r5,r5,r6
 400e270:	38c6983a 	sll	r3,r7,r3
 400e274:	29c00017 	ldw	r7,0(r5)
 400e278:	2a7ffe04 	addi	r9,r5,-8
 400e27c:	1886b03a 	or	r3,r3,r2
 400e280:	82400315 	stw	r9,12(r16)
 400e284:	81c00215 	stw	r7,8(r16)
 400e288:	30c00115 	stw	r3,4(r6)
 400e28c:	2c000015 	stw	r16,0(r5)
 400e290:	3c000315 	stw	r16,12(r7)
 400e294:	2005d0ba 	srai	r2,r4,2
 400e298:	01400044 	movi	r5,1
 400e29c:	288a983a 	sll	r5,r5,r2
 400e2a0:	19406f36 	bltu	r3,r5,400e460 <_malloc_r+0x324>
 400e2a4:	28c4703a 	and	r2,r5,r3
 400e2a8:	10000a1e 	bne	r2,zero,400e2d4 <_malloc_r+0x198>
 400e2ac:	00bfff04 	movi	r2,-4
 400e2b0:	294b883a 	add	r5,r5,r5
 400e2b4:	2088703a 	and	r4,r4,r2
 400e2b8:	28c4703a 	and	r2,r5,r3
 400e2bc:	21000104 	addi	r4,r4,4
 400e2c0:	1000041e 	bne	r2,zero,400e2d4 <_malloc_r+0x198>
 400e2c4:	294b883a 	add	r5,r5,r5
 400e2c8:	28c4703a 	and	r2,r5,r3
 400e2cc:	21000104 	addi	r4,r4,4
 400e2d0:	103ffc26 	beq	r2,zero,400e2c4 <__alt_mem_onchip_memory2_0+0xfc00d044>
 400e2d4:	02bfff04 	movi	r10,-4
 400e2d8:	024003c4 	movi	r9,15
 400e2dc:	21800044 	addi	r6,r4,1
 400e2e0:	318d883a 	add	r6,r6,r6
 400e2e4:	318d883a 	add	r6,r6,r6
 400e2e8:	318d883a 	add	r6,r6,r6
 400e2ec:	998d883a 	add	r6,r19,r6
 400e2f0:	333ffe04 	addi	r12,r6,-8
 400e2f4:	2017883a 	mov	r11,r4
 400e2f8:	31800104 	addi	r6,r6,4
 400e2fc:	34000017 	ldw	r16,0(r6)
 400e300:	31fffd04 	addi	r7,r6,-12
 400e304:	81c0041e 	bne	r16,r7,400e318 <_malloc_r+0x1dc>
 400e308:	0000fb06 	br	400e6f8 <_malloc_r+0x5bc>
 400e30c:	1801030e 	bge	r3,zero,400e71c <_malloc_r+0x5e0>
 400e310:	84000317 	ldw	r16,12(r16)
 400e314:	81c0f826 	beq	r16,r7,400e6f8 <_malloc_r+0x5bc>
 400e318:	80800117 	ldw	r2,4(r16)
 400e31c:	1284703a 	and	r2,r2,r10
 400e320:	1447c83a 	sub	r3,r2,r17
 400e324:	48fff90e 	bge	r9,r3,400e30c <__alt_mem_onchip_memory2_0+0xfc00d08c>
 400e328:	80800317 	ldw	r2,12(r16)
 400e32c:	81000217 	ldw	r4,8(r16)
 400e330:	89400054 	ori	r5,r17,1
 400e334:	81400115 	stw	r5,4(r16)
 400e338:	20800315 	stw	r2,12(r4)
 400e33c:	11000215 	stw	r4,8(r2)
 400e340:	8463883a 	add	r17,r16,r17
 400e344:	9c400515 	stw	r17,20(r19)
 400e348:	9c400415 	stw	r17,16(r19)
 400e34c:	18800054 	ori	r2,r3,1
 400e350:	88800115 	stw	r2,4(r17)
 400e354:	8a000315 	stw	r8,12(r17)
 400e358:	8a000215 	stw	r8,8(r17)
 400e35c:	88e3883a 	add	r17,r17,r3
 400e360:	88c00015 	stw	r3,0(r17)
 400e364:	9009883a 	mov	r4,r18
 400e368:	401ba500 	call	401ba50 <__malloc_unlock>
 400e36c:	80800204 	addi	r2,r16,8
 400e370:	00001b06 	br	400e3e0 <_malloc_r+0x2a4>
 400e374:	04400404 	movi	r17,16
 400e378:	89402536 	bltu	r17,r5,400e410 <_malloc_r+0x2d4>
 400e37c:	401ba2c0 	call	401ba2c <__malloc_lock>
 400e380:	00800184 	movi	r2,6
 400e384:	01000084 	movi	r4,2
 400e388:	04c100b4 	movhi	r19,1026
 400e38c:	1085883a 	add	r2,r2,r2
 400e390:	9cdd4a04 	addi	r19,r19,29992
 400e394:	1085883a 	add	r2,r2,r2
 400e398:	9885883a 	add	r2,r19,r2
 400e39c:	14000117 	ldw	r16,4(r2)
 400e3a0:	10fffe04 	addi	r3,r2,-8
 400e3a4:	80c0d926 	beq	r16,r3,400e70c <_malloc_r+0x5d0>
 400e3a8:	80c00117 	ldw	r3,4(r16)
 400e3ac:	81000317 	ldw	r4,12(r16)
 400e3b0:	00bfff04 	movi	r2,-4
 400e3b4:	1884703a 	and	r2,r3,r2
 400e3b8:	81400217 	ldw	r5,8(r16)
 400e3bc:	8085883a 	add	r2,r16,r2
 400e3c0:	10c00117 	ldw	r3,4(r2)
 400e3c4:	29000315 	stw	r4,12(r5)
 400e3c8:	21400215 	stw	r5,8(r4)
 400e3cc:	18c00054 	ori	r3,r3,1
 400e3d0:	10c00115 	stw	r3,4(r2)
 400e3d4:	9009883a 	mov	r4,r18
 400e3d8:	401ba500 	call	401ba50 <__malloc_unlock>
 400e3dc:	80800204 	addi	r2,r16,8
 400e3e0:	dfc00a17 	ldw	ra,40(sp)
 400e3e4:	df000917 	ldw	fp,36(sp)
 400e3e8:	ddc00817 	ldw	r23,32(sp)
 400e3ec:	dd800717 	ldw	r22,28(sp)
 400e3f0:	dd400617 	ldw	r21,24(sp)
 400e3f4:	dd000517 	ldw	r20,20(sp)
 400e3f8:	dcc00417 	ldw	r19,16(sp)
 400e3fc:	dc800317 	ldw	r18,12(sp)
 400e400:	dc400217 	ldw	r17,8(sp)
 400e404:	dc000117 	ldw	r16,4(sp)
 400e408:	dec00b04 	addi	sp,sp,44
 400e40c:	f800283a 	ret
 400e410:	00800304 	movi	r2,12
 400e414:	90800015 	stw	r2,0(r18)
 400e418:	0005883a 	mov	r2,zero
 400e41c:	003ff006 	br	400e3e0 <__alt_mem_onchip_memory2_0+0xfc00d160>
 400e420:	01002004 	movi	r4,128
 400e424:	02001004 	movi	r8,64
 400e428:	01c00fc4 	movi	r7,63
 400e42c:	003f6106 	br	400e1b4 <__alt_mem_onchip_memory2_0+0xfc00cf34>
 400e430:	4009883a 	mov	r4,r8
 400e434:	003f7506 	br	400e20c <__alt_mem_onchip_memory2_0+0xfc00cf8c>
 400e438:	81000317 	ldw	r4,12(r16)
 400e43c:	003fde06 	br	400e3b8 <__alt_mem_onchip_memory2_0+0xfc00d138>
 400e440:	81c5883a 	add	r2,r16,r7
 400e444:	11400117 	ldw	r5,4(r2)
 400e448:	9009883a 	mov	r4,r18
 400e44c:	29400054 	ori	r5,r5,1
 400e450:	11400115 	stw	r5,4(r2)
 400e454:	401ba500 	call	401ba50 <__malloc_unlock>
 400e458:	80800204 	addi	r2,r16,8
 400e45c:	003fe006 	br	400e3e0 <__alt_mem_onchip_memory2_0+0xfc00d160>
 400e460:	9c000217 	ldw	r16,8(r19)
 400e464:	00bfff04 	movi	r2,-4
 400e468:	85800117 	ldw	r22,4(r16)
 400e46c:	b0ac703a 	and	r22,r22,r2
 400e470:	b4400336 	bltu	r22,r17,400e480 <_malloc_r+0x344>
 400e474:	b445c83a 	sub	r2,r22,r17
 400e478:	00c003c4 	movi	r3,15
 400e47c:	18805d16 	blt	r3,r2,400e5f4 <_malloc_r+0x4b8>
 400e480:	05c100f4 	movhi	r23,1027
 400e484:	008100f4 	movhi	r2,1027
 400e488:	10b53804 	addi	r2,r2,-11040
 400e48c:	bde8a804 	addi	r23,r23,-23904
 400e490:	15400017 	ldw	r21,0(r2)
 400e494:	b8c00017 	ldw	r3,0(r23)
 400e498:	00bfffc4 	movi	r2,-1
 400e49c:	858d883a 	add	r6,r16,r22
 400e4a0:	8d6b883a 	add	r21,r17,r21
 400e4a4:	1880ea26 	beq	r3,r2,400e850 <_malloc_r+0x714>
 400e4a8:	ad4403c4 	addi	r21,r21,4111
 400e4ac:	00bc0004 	movi	r2,-4096
 400e4b0:	a8aa703a 	and	r21,r21,r2
 400e4b4:	a80b883a 	mov	r5,r21
 400e4b8:	9009883a 	mov	r4,r18
 400e4bc:	d9800015 	stw	r6,0(sp)
 400e4c0:	400ed180 	call	400ed18 <_sbrk_r>
 400e4c4:	1029883a 	mov	r20,r2
 400e4c8:	00bfffc4 	movi	r2,-1
 400e4cc:	d9800017 	ldw	r6,0(sp)
 400e4d0:	a080e826 	beq	r20,r2,400e874 <_malloc_r+0x738>
 400e4d4:	a180a636 	bltu	r20,r6,400e770 <_malloc_r+0x634>
 400e4d8:	070100f4 	movhi	fp,1027
 400e4dc:	e7357c04 	addi	fp,fp,-10768
 400e4e0:	e0800017 	ldw	r2,0(fp)
 400e4e4:	a887883a 	add	r3,r21,r2
 400e4e8:	e0c00015 	stw	r3,0(fp)
 400e4ec:	3500e626 	beq	r6,r20,400e888 <_malloc_r+0x74c>
 400e4f0:	b9000017 	ldw	r4,0(r23)
 400e4f4:	00bfffc4 	movi	r2,-1
 400e4f8:	2080ee26 	beq	r4,r2,400e8b4 <_malloc_r+0x778>
 400e4fc:	a185c83a 	sub	r2,r20,r6
 400e500:	10c5883a 	add	r2,r2,r3
 400e504:	e0800015 	stw	r2,0(fp)
 400e508:	a0c001cc 	andi	r3,r20,7
 400e50c:	1800bc26 	beq	r3,zero,400e800 <_malloc_r+0x6c4>
 400e510:	a0e9c83a 	sub	r20,r20,r3
 400e514:	00840204 	movi	r2,4104
 400e518:	a5000204 	addi	r20,r20,8
 400e51c:	10c7c83a 	sub	r3,r2,r3
 400e520:	a545883a 	add	r2,r20,r21
 400e524:	1083ffcc 	andi	r2,r2,4095
 400e528:	18abc83a 	sub	r21,r3,r2
 400e52c:	a80b883a 	mov	r5,r21
 400e530:	9009883a 	mov	r4,r18
 400e534:	400ed180 	call	400ed18 <_sbrk_r>
 400e538:	00ffffc4 	movi	r3,-1
 400e53c:	10c0e126 	beq	r2,r3,400e8c4 <_malloc_r+0x788>
 400e540:	1505c83a 	sub	r2,r2,r20
 400e544:	1545883a 	add	r2,r2,r21
 400e548:	10800054 	ori	r2,r2,1
 400e54c:	e0c00017 	ldw	r3,0(fp)
 400e550:	9d000215 	stw	r20,8(r19)
 400e554:	a0800115 	stw	r2,4(r20)
 400e558:	a8c7883a 	add	r3,r21,r3
 400e55c:	e0c00015 	stw	r3,0(fp)
 400e560:	84c00e26 	beq	r16,r19,400e59c <_malloc_r+0x460>
 400e564:	018003c4 	movi	r6,15
 400e568:	3580a72e 	bgeu	r6,r22,400e808 <_malloc_r+0x6cc>
 400e56c:	81400117 	ldw	r5,4(r16)
 400e570:	013ffe04 	movi	r4,-8
 400e574:	b0bffd04 	addi	r2,r22,-12
 400e578:	1104703a 	and	r2,r2,r4
 400e57c:	2900004c 	andi	r4,r5,1
 400e580:	2088b03a 	or	r4,r4,r2
 400e584:	81000115 	stw	r4,4(r16)
 400e588:	01400144 	movi	r5,5
 400e58c:	8089883a 	add	r4,r16,r2
 400e590:	21400115 	stw	r5,4(r4)
 400e594:	21400215 	stw	r5,8(r4)
 400e598:	3080cd36 	bltu	r6,r2,400e8d0 <_malloc_r+0x794>
 400e59c:	008100f4 	movhi	r2,1027
 400e5a0:	10b53704 	addi	r2,r2,-11044
 400e5a4:	11000017 	ldw	r4,0(r2)
 400e5a8:	20c0012e 	bgeu	r4,r3,400e5b0 <_malloc_r+0x474>
 400e5ac:	10c00015 	stw	r3,0(r2)
 400e5b0:	008100f4 	movhi	r2,1027
 400e5b4:	10b53604 	addi	r2,r2,-11048
 400e5b8:	11000017 	ldw	r4,0(r2)
 400e5bc:	9c000217 	ldw	r16,8(r19)
 400e5c0:	20c0012e 	bgeu	r4,r3,400e5c8 <_malloc_r+0x48c>
 400e5c4:	10c00015 	stw	r3,0(r2)
 400e5c8:	80c00117 	ldw	r3,4(r16)
 400e5cc:	00bfff04 	movi	r2,-4
 400e5d0:	1886703a 	and	r3,r3,r2
 400e5d4:	1c45c83a 	sub	r2,r3,r17
 400e5d8:	1c400236 	bltu	r3,r17,400e5e4 <_malloc_r+0x4a8>
 400e5dc:	00c003c4 	movi	r3,15
 400e5e0:	18800416 	blt	r3,r2,400e5f4 <_malloc_r+0x4b8>
 400e5e4:	9009883a 	mov	r4,r18
 400e5e8:	401ba500 	call	401ba50 <__malloc_unlock>
 400e5ec:	0005883a 	mov	r2,zero
 400e5f0:	003f7b06 	br	400e3e0 <__alt_mem_onchip_memory2_0+0xfc00d160>
 400e5f4:	88c00054 	ori	r3,r17,1
 400e5f8:	80c00115 	stw	r3,4(r16)
 400e5fc:	8463883a 	add	r17,r16,r17
 400e600:	10800054 	ori	r2,r2,1
 400e604:	9c400215 	stw	r17,8(r19)
 400e608:	88800115 	stw	r2,4(r17)
 400e60c:	9009883a 	mov	r4,r18
 400e610:	401ba500 	call	401ba50 <__malloc_unlock>
 400e614:	80800204 	addi	r2,r16,8
 400e618:	003f7106 	br	400e3e0 <__alt_mem_onchip_memory2_0+0xfc00d160>
 400e61c:	00c00504 	movi	r3,20
 400e620:	18804a2e 	bgeu	r3,r2,400e74c <_malloc_r+0x610>
 400e624:	00c01504 	movi	r3,84
 400e628:	18806e36 	bltu	r3,r2,400e7e4 <_malloc_r+0x6a8>
 400e62c:	8804d33a 	srli	r2,r17,12
 400e630:	12001bc4 	addi	r8,r2,111
 400e634:	11c01b84 	addi	r7,r2,110
 400e638:	4209883a 	add	r4,r8,r8
 400e63c:	003edd06 	br	400e1b4 <__alt_mem_onchip_memory2_0+0xfc00cf34>
 400e640:	3804d27a 	srli	r2,r7,9
 400e644:	00c00104 	movi	r3,4
 400e648:	1880442e 	bgeu	r3,r2,400e75c <_malloc_r+0x620>
 400e64c:	00c00504 	movi	r3,20
 400e650:	18808136 	bltu	r3,r2,400e858 <_malloc_r+0x71c>
 400e654:	11401704 	addi	r5,r2,92
 400e658:	10c016c4 	addi	r3,r2,91
 400e65c:	294b883a 	add	r5,r5,r5
 400e660:	294b883a 	add	r5,r5,r5
 400e664:	294b883a 	add	r5,r5,r5
 400e668:	994b883a 	add	r5,r19,r5
 400e66c:	28800017 	ldw	r2,0(r5)
 400e670:	018100b4 	movhi	r6,1026
 400e674:	297ffe04 	addi	r5,r5,-8
 400e678:	319d4a04 	addi	r6,r6,29992
 400e67c:	28806526 	beq	r5,r2,400e814 <_malloc_r+0x6d8>
 400e680:	01bfff04 	movi	r6,-4
 400e684:	10c00117 	ldw	r3,4(r2)
 400e688:	1986703a 	and	r3,r3,r6
 400e68c:	38c0022e 	bgeu	r7,r3,400e698 <_malloc_r+0x55c>
 400e690:	10800217 	ldw	r2,8(r2)
 400e694:	28bffb1e 	bne	r5,r2,400e684 <__alt_mem_onchip_memory2_0+0xfc00d404>
 400e698:	11400317 	ldw	r5,12(r2)
 400e69c:	98c00117 	ldw	r3,4(r19)
 400e6a0:	81400315 	stw	r5,12(r16)
 400e6a4:	80800215 	stw	r2,8(r16)
 400e6a8:	2c000215 	stw	r16,8(r5)
 400e6ac:	14000315 	stw	r16,12(r2)
 400e6b0:	003ef806 	br	400e294 <__alt_mem_onchip_memory2_0+0xfc00d014>
 400e6b4:	88c00054 	ori	r3,r17,1
 400e6b8:	80c00115 	stw	r3,4(r16)
 400e6bc:	8463883a 	add	r17,r16,r17
 400e6c0:	34400515 	stw	r17,20(r6)
 400e6c4:	34400415 	stw	r17,16(r6)
 400e6c8:	10c00054 	ori	r3,r2,1
 400e6cc:	8a000315 	stw	r8,12(r17)
 400e6d0:	8a000215 	stw	r8,8(r17)
 400e6d4:	88c00115 	stw	r3,4(r17)
 400e6d8:	88a3883a 	add	r17,r17,r2
 400e6dc:	88800015 	stw	r2,0(r17)
 400e6e0:	9009883a 	mov	r4,r18
 400e6e4:	401ba500 	call	401ba50 <__malloc_unlock>
 400e6e8:	80800204 	addi	r2,r16,8
 400e6ec:	003f3c06 	br	400e3e0 <__alt_mem_onchip_memory2_0+0xfc00d160>
 400e6f0:	30c00117 	ldw	r3,4(r6)
 400e6f4:	003ee706 	br	400e294 <__alt_mem_onchip_memory2_0+0xfc00d014>
 400e6f8:	5ac00044 	addi	r11,r11,1
 400e6fc:	588000cc 	andi	r2,r11,3
 400e700:	31800204 	addi	r6,r6,8
 400e704:	103efd1e 	bne	r2,zero,400e2fc <__alt_mem_onchip_memory2_0+0xfc00d07c>
 400e708:	00002406 	br	400e79c <_malloc_r+0x660>
 400e70c:	14000317 	ldw	r16,12(r2)
 400e710:	143f251e 	bne	r2,r16,400e3a8 <__alt_mem_onchip_memory2_0+0xfc00d128>
 400e714:	21000084 	addi	r4,r4,2
 400e718:	003ebc06 	br	400e20c <__alt_mem_onchip_memory2_0+0xfc00cf8c>
 400e71c:	8085883a 	add	r2,r16,r2
 400e720:	10c00117 	ldw	r3,4(r2)
 400e724:	81000317 	ldw	r4,12(r16)
 400e728:	81400217 	ldw	r5,8(r16)
 400e72c:	18c00054 	ori	r3,r3,1
 400e730:	10c00115 	stw	r3,4(r2)
 400e734:	29000315 	stw	r4,12(r5)
 400e738:	21400215 	stw	r5,8(r4)
 400e73c:	9009883a 	mov	r4,r18
 400e740:	401ba500 	call	401ba50 <__malloc_unlock>
 400e744:	80800204 	addi	r2,r16,8
 400e748:	003f2506 	br	400e3e0 <__alt_mem_onchip_memory2_0+0xfc00d160>
 400e74c:	12001704 	addi	r8,r2,92
 400e750:	11c016c4 	addi	r7,r2,91
 400e754:	4209883a 	add	r4,r8,r8
 400e758:	003e9606 	br	400e1b4 <__alt_mem_onchip_memory2_0+0xfc00cf34>
 400e75c:	3804d1ba 	srli	r2,r7,6
 400e760:	11400e44 	addi	r5,r2,57
 400e764:	10c00e04 	addi	r3,r2,56
 400e768:	294b883a 	add	r5,r5,r5
 400e76c:	003fbc06 	br	400e660 <__alt_mem_onchip_memory2_0+0xfc00d3e0>
 400e770:	84ff5926 	beq	r16,r19,400e4d8 <__alt_mem_onchip_memory2_0+0xfc00d258>
 400e774:	008100b4 	movhi	r2,1026
 400e778:	109d4a04 	addi	r2,r2,29992
 400e77c:	14000217 	ldw	r16,8(r2)
 400e780:	00bfff04 	movi	r2,-4
 400e784:	80c00117 	ldw	r3,4(r16)
 400e788:	1886703a 	and	r3,r3,r2
 400e78c:	003f9106 	br	400e5d4 <__alt_mem_onchip_memory2_0+0xfc00d354>
 400e790:	60800217 	ldw	r2,8(r12)
 400e794:	213fffc4 	addi	r4,r4,-1
 400e798:	1300651e 	bne	r2,r12,400e930 <_malloc_r+0x7f4>
 400e79c:	208000cc 	andi	r2,r4,3
 400e7a0:	633ffe04 	addi	r12,r12,-8
 400e7a4:	103ffa1e 	bne	r2,zero,400e790 <__alt_mem_onchip_memory2_0+0xfc00d510>
 400e7a8:	98800117 	ldw	r2,4(r19)
 400e7ac:	0146303a 	nor	r3,zero,r5
 400e7b0:	1884703a 	and	r2,r3,r2
 400e7b4:	98800115 	stw	r2,4(r19)
 400e7b8:	294b883a 	add	r5,r5,r5
 400e7bc:	117f2836 	bltu	r2,r5,400e460 <__alt_mem_onchip_memory2_0+0xfc00d1e0>
 400e7c0:	283f2726 	beq	r5,zero,400e460 <__alt_mem_onchip_memory2_0+0xfc00d1e0>
 400e7c4:	2886703a 	and	r3,r5,r2
 400e7c8:	5809883a 	mov	r4,r11
 400e7cc:	183ec31e 	bne	r3,zero,400e2dc <__alt_mem_onchip_memory2_0+0xfc00d05c>
 400e7d0:	294b883a 	add	r5,r5,r5
 400e7d4:	2886703a 	and	r3,r5,r2
 400e7d8:	21000104 	addi	r4,r4,4
 400e7dc:	183ffc26 	beq	r3,zero,400e7d0 <__alt_mem_onchip_memory2_0+0xfc00d550>
 400e7e0:	003ebe06 	br	400e2dc <__alt_mem_onchip_memory2_0+0xfc00d05c>
 400e7e4:	00c05504 	movi	r3,340
 400e7e8:	18801236 	bltu	r3,r2,400e834 <_malloc_r+0x6f8>
 400e7ec:	8804d3fa 	srli	r2,r17,15
 400e7f0:	12001e04 	addi	r8,r2,120
 400e7f4:	11c01dc4 	addi	r7,r2,119
 400e7f8:	4209883a 	add	r4,r8,r8
 400e7fc:	003e6d06 	br	400e1b4 <__alt_mem_onchip_memory2_0+0xfc00cf34>
 400e800:	00c40004 	movi	r3,4096
 400e804:	003f4606 	br	400e520 <__alt_mem_onchip_memory2_0+0xfc00d2a0>
 400e808:	00800044 	movi	r2,1
 400e80c:	a0800115 	stw	r2,4(r20)
 400e810:	003f7406 	br	400e5e4 <__alt_mem_onchip_memory2_0+0xfc00d364>
 400e814:	1805d0ba 	srai	r2,r3,2
 400e818:	01c00044 	movi	r7,1
 400e81c:	30c00117 	ldw	r3,4(r6)
 400e820:	388e983a 	sll	r7,r7,r2
 400e824:	2805883a 	mov	r2,r5
 400e828:	38c6b03a 	or	r3,r7,r3
 400e82c:	30c00115 	stw	r3,4(r6)
 400e830:	003f9b06 	br	400e6a0 <__alt_mem_onchip_memory2_0+0xfc00d420>
 400e834:	00c15504 	movi	r3,1364
 400e838:	18801a36 	bltu	r3,r2,400e8a4 <_malloc_r+0x768>
 400e83c:	8804d4ba 	srli	r2,r17,18
 400e840:	12001f44 	addi	r8,r2,125
 400e844:	11c01f04 	addi	r7,r2,124
 400e848:	4209883a 	add	r4,r8,r8
 400e84c:	003e5906 	br	400e1b4 <__alt_mem_onchip_memory2_0+0xfc00cf34>
 400e850:	ad400404 	addi	r21,r21,16
 400e854:	003f1706 	br	400e4b4 <__alt_mem_onchip_memory2_0+0xfc00d234>
 400e858:	00c01504 	movi	r3,84
 400e85c:	18802336 	bltu	r3,r2,400e8ec <_malloc_r+0x7b0>
 400e860:	3804d33a 	srli	r2,r7,12
 400e864:	11401bc4 	addi	r5,r2,111
 400e868:	10c01b84 	addi	r3,r2,110
 400e86c:	294b883a 	add	r5,r5,r5
 400e870:	003f7b06 	br	400e660 <__alt_mem_onchip_memory2_0+0xfc00d3e0>
 400e874:	9c000217 	ldw	r16,8(r19)
 400e878:	00bfff04 	movi	r2,-4
 400e87c:	80c00117 	ldw	r3,4(r16)
 400e880:	1886703a 	and	r3,r3,r2
 400e884:	003f5306 	br	400e5d4 <__alt_mem_onchip_memory2_0+0xfc00d354>
 400e888:	3083ffcc 	andi	r2,r6,4095
 400e88c:	103f181e 	bne	r2,zero,400e4f0 <__alt_mem_onchip_memory2_0+0xfc00d270>
 400e890:	99000217 	ldw	r4,8(r19)
 400e894:	b545883a 	add	r2,r22,r21
 400e898:	10800054 	ori	r2,r2,1
 400e89c:	20800115 	stw	r2,4(r4)
 400e8a0:	003f3e06 	br	400e59c <__alt_mem_onchip_memory2_0+0xfc00d31c>
 400e8a4:	01003f84 	movi	r4,254
 400e8a8:	02001fc4 	movi	r8,127
 400e8ac:	01c01f84 	movi	r7,126
 400e8b0:	003e4006 	br	400e1b4 <__alt_mem_onchip_memory2_0+0xfc00cf34>
 400e8b4:	008100f4 	movhi	r2,1027
 400e8b8:	10a8a804 	addi	r2,r2,-23904
 400e8bc:	15000015 	stw	r20,0(r2)
 400e8c0:	003f1106 	br	400e508 <__alt_mem_onchip_memory2_0+0xfc00d288>
 400e8c4:	00800044 	movi	r2,1
 400e8c8:	002b883a 	mov	r21,zero
 400e8cc:	003f1f06 	br	400e54c <__alt_mem_onchip_memory2_0+0xfc00d2cc>
 400e8d0:	81400204 	addi	r5,r16,8
 400e8d4:	9009883a 	mov	r4,r18
 400e8d8:	40137200 	call	4013720 <_free_r>
 400e8dc:	008100f4 	movhi	r2,1027
 400e8e0:	10b57c04 	addi	r2,r2,-10768
 400e8e4:	10c00017 	ldw	r3,0(r2)
 400e8e8:	003f2c06 	br	400e59c <__alt_mem_onchip_memory2_0+0xfc00d31c>
 400e8ec:	00c05504 	movi	r3,340
 400e8f0:	18800536 	bltu	r3,r2,400e908 <_malloc_r+0x7cc>
 400e8f4:	3804d3fa 	srli	r2,r7,15
 400e8f8:	11401e04 	addi	r5,r2,120
 400e8fc:	10c01dc4 	addi	r3,r2,119
 400e900:	294b883a 	add	r5,r5,r5
 400e904:	003f5606 	br	400e660 <__alt_mem_onchip_memory2_0+0xfc00d3e0>
 400e908:	00c15504 	movi	r3,1364
 400e90c:	18800536 	bltu	r3,r2,400e924 <_malloc_r+0x7e8>
 400e910:	3804d4ba 	srli	r2,r7,18
 400e914:	11401f44 	addi	r5,r2,125
 400e918:	10c01f04 	addi	r3,r2,124
 400e91c:	294b883a 	add	r5,r5,r5
 400e920:	003f4f06 	br	400e660 <__alt_mem_onchip_memory2_0+0xfc00d3e0>
 400e924:	01403f84 	movi	r5,254
 400e928:	00c01f84 	movi	r3,126
 400e92c:	003f4c06 	br	400e660 <__alt_mem_onchip_memory2_0+0xfc00d3e0>
 400e930:	98800117 	ldw	r2,4(r19)
 400e934:	003fa006 	br	400e7b8 <__alt_mem_onchip_memory2_0+0xfc00d538>
 400e938:	8808d0fa 	srli	r4,r17,3
 400e93c:	20800044 	addi	r2,r4,1
 400e940:	1085883a 	add	r2,r2,r2
 400e944:	003e9006 	br	400e388 <__alt_mem_onchip_memory2_0+0xfc00d108>

0400e948 <memcpy>:
 400e948:	defffd04 	addi	sp,sp,-12
 400e94c:	dfc00215 	stw	ra,8(sp)
 400e950:	dc400115 	stw	r17,4(sp)
 400e954:	dc000015 	stw	r16,0(sp)
 400e958:	00c003c4 	movi	r3,15
 400e95c:	2005883a 	mov	r2,r4
 400e960:	1980452e 	bgeu	r3,r6,400ea78 <memcpy+0x130>
 400e964:	2906b03a 	or	r3,r5,r4
 400e968:	18c000cc 	andi	r3,r3,3
 400e96c:	1800441e 	bne	r3,zero,400ea80 <memcpy+0x138>
 400e970:	347ffc04 	addi	r17,r6,-16
 400e974:	8822d13a 	srli	r17,r17,4
 400e978:	28c00104 	addi	r3,r5,4
 400e97c:	23400104 	addi	r13,r4,4
 400e980:	8820913a 	slli	r16,r17,4
 400e984:	2b000204 	addi	r12,r5,8
 400e988:	22c00204 	addi	r11,r4,8
 400e98c:	84000504 	addi	r16,r16,20
 400e990:	2a800304 	addi	r10,r5,12
 400e994:	22400304 	addi	r9,r4,12
 400e998:	2c21883a 	add	r16,r5,r16
 400e99c:	2811883a 	mov	r8,r5
 400e9a0:	200f883a 	mov	r7,r4
 400e9a4:	41000017 	ldw	r4,0(r8)
 400e9a8:	1fc00017 	ldw	ra,0(r3)
 400e9ac:	63c00017 	ldw	r15,0(r12)
 400e9b0:	39000015 	stw	r4,0(r7)
 400e9b4:	53800017 	ldw	r14,0(r10)
 400e9b8:	6fc00015 	stw	ra,0(r13)
 400e9bc:	5bc00015 	stw	r15,0(r11)
 400e9c0:	4b800015 	stw	r14,0(r9)
 400e9c4:	18c00404 	addi	r3,r3,16
 400e9c8:	39c00404 	addi	r7,r7,16
 400e9cc:	42000404 	addi	r8,r8,16
 400e9d0:	6b400404 	addi	r13,r13,16
 400e9d4:	63000404 	addi	r12,r12,16
 400e9d8:	5ac00404 	addi	r11,r11,16
 400e9dc:	52800404 	addi	r10,r10,16
 400e9e0:	4a400404 	addi	r9,r9,16
 400e9e4:	1c3fef1e 	bne	r3,r16,400e9a4 <__alt_mem_onchip_memory2_0+0xfc00d724>
 400e9e8:	89c00044 	addi	r7,r17,1
 400e9ec:	380e913a 	slli	r7,r7,4
 400e9f0:	310003cc 	andi	r4,r6,15
 400e9f4:	02c000c4 	movi	r11,3
 400e9f8:	11c7883a 	add	r3,r2,r7
 400e9fc:	29cb883a 	add	r5,r5,r7
 400ea00:	5900212e 	bgeu	r11,r4,400ea88 <memcpy+0x140>
 400ea04:	1813883a 	mov	r9,r3
 400ea08:	2811883a 	mov	r8,r5
 400ea0c:	200f883a 	mov	r7,r4
 400ea10:	42800017 	ldw	r10,0(r8)
 400ea14:	4a400104 	addi	r9,r9,4
 400ea18:	39ffff04 	addi	r7,r7,-4
 400ea1c:	4abfff15 	stw	r10,-4(r9)
 400ea20:	42000104 	addi	r8,r8,4
 400ea24:	59fffa36 	bltu	r11,r7,400ea10 <__alt_mem_onchip_memory2_0+0xfc00d790>
 400ea28:	213fff04 	addi	r4,r4,-4
 400ea2c:	2008d0ba 	srli	r4,r4,2
 400ea30:	318000cc 	andi	r6,r6,3
 400ea34:	21000044 	addi	r4,r4,1
 400ea38:	2109883a 	add	r4,r4,r4
 400ea3c:	2109883a 	add	r4,r4,r4
 400ea40:	1907883a 	add	r3,r3,r4
 400ea44:	290b883a 	add	r5,r5,r4
 400ea48:	30000626 	beq	r6,zero,400ea64 <memcpy+0x11c>
 400ea4c:	198d883a 	add	r6,r3,r6
 400ea50:	29c00003 	ldbu	r7,0(r5)
 400ea54:	18c00044 	addi	r3,r3,1
 400ea58:	29400044 	addi	r5,r5,1
 400ea5c:	19ffffc5 	stb	r7,-1(r3)
 400ea60:	19bffb1e 	bne	r3,r6,400ea50 <__alt_mem_onchip_memory2_0+0xfc00d7d0>
 400ea64:	dfc00217 	ldw	ra,8(sp)
 400ea68:	dc400117 	ldw	r17,4(sp)
 400ea6c:	dc000017 	ldw	r16,0(sp)
 400ea70:	dec00304 	addi	sp,sp,12
 400ea74:	f800283a 	ret
 400ea78:	2007883a 	mov	r3,r4
 400ea7c:	003ff206 	br	400ea48 <__alt_mem_onchip_memory2_0+0xfc00d7c8>
 400ea80:	2007883a 	mov	r3,r4
 400ea84:	003ff106 	br	400ea4c <__alt_mem_onchip_memory2_0+0xfc00d7cc>
 400ea88:	200d883a 	mov	r6,r4
 400ea8c:	003fee06 	br	400ea48 <__alt_mem_onchip_memory2_0+0xfc00d7c8>

0400ea90 <memset>:
 400ea90:	20c000cc 	andi	r3,r4,3
 400ea94:	2005883a 	mov	r2,r4
 400ea98:	18004426 	beq	r3,zero,400ebac <memset+0x11c>
 400ea9c:	31ffffc4 	addi	r7,r6,-1
 400eaa0:	30004026 	beq	r6,zero,400eba4 <memset+0x114>
 400eaa4:	2813883a 	mov	r9,r5
 400eaa8:	200d883a 	mov	r6,r4
 400eaac:	2007883a 	mov	r3,r4
 400eab0:	00000406 	br	400eac4 <memset+0x34>
 400eab4:	3a3fffc4 	addi	r8,r7,-1
 400eab8:	31800044 	addi	r6,r6,1
 400eabc:	38003926 	beq	r7,zero,400eba4 <memset+0x114>
 400eac0:	400f883a 	mov	r7,r8
 400eac4:	18c00044 	addi	r3,r3,1
 400eac8:	32400005 	stb	r9,0(r6)
 400eacc:	1a0000cc 	andi	r8,r3,3
 400ead0:	403ff81e 	bne	r8,zero,400eab4 <__alt_mem_onchip_memory2_0+0xfc00d834>
 400ead4:	010000c4 	movi	r4,3
 400ead8:	21c02d2e 	bgeu	r4,r7,400eb90 <memset+0x100>
 400eadc:	29003fcc 	andi	r4,r5,255
 400eae0:	200c923a 	slli	r6,r4,8
 400eae4:	3108b03a 	or	r4,r6,r4
 400eae8:	200c943a 	slli	r6,r4,16
 400eaec:	218cb03a 	or	r6,r4,r6
 400eaf0:	010003c4 	movi	r4,15
 400eaf4:	21c0182e 	bgeu	r4,r7,400eb58 <memset+0xc8>
 400eaf8:	3b3ffc04 	addi	r12,r7,-16
 400eafc:	6018d13a 	srli	r12,r12,4
 400eb00:	1a000104 	addi	r8,r3,4
 400eb04:	1ac00204 	addi	r11,r3,8
 400eb08:	6008913a 	slli	r4,r12,4
 400eb0c:	1a800304 	addi	r10,r3,12
 400eb10:	1813883a 	mov	r9,r3
 400eb14:	21000504 	addi	r4,r4,20
 400eb18:	1909883a 	add	r4,r3,r4
 400eb1c:	49800015 	stw	r6,0(r9)
 400eb20:	41800015 	stw	r6,0(r8)
 400eb24:	59800015 	stw	r6,0(r11)
 400eb28:	51800015 	stw	r6,0(r10)
 400eb2c:	42000404 	addi	r8,r8,16
 400eb30:	4a400404 	addi	r9,r9,16
 400eb34:	5ac00404 	addi	r11,r11,16
 400eb38:	52800404 	addi	r10,r10,16
 400eb3c:	413ff71e 	bne	r8,r4,400eb1c <__alt_mem_onchip_memory2_0+0xfc00d89c>
 400eb40:	63000044 	addi	r12,r12,1
 400eb44:	6018913a 	slli	r12,r12,4
 400eb48:	39c003cc 	andi	r7,r7,15
 400eb4c:	010000c4 	movi	r4,3
 400eb50:	1b07883a 	add	r3,r3,r12
 400eb54:	21c00e2e 	bgeu	r4,r7,400eb90 <memset+0x100>
 400eb58:	1813883a 	mov	r9,r3
 400eb5c:	3811883a 	mov	r8,r7
 400eb60:	010000c4 	movi	r4,3
 400eb64:	49800015 	stw	r6,0(r9)
 400eb68:	423fff04 	addi	r8,r8,-4
 400eb6c:	4a400104 	addi	r9,r9,4
 400eb70:	223ffc36 	bltu	r4,r8,400eb64 <__alt_mem_onchip_memory2_0+0xfc00d8e4>
 400eb74:	393fff04 	addi	r4,r7,-4
 400eb78:	2008d0ba 	srli	r4,r4,2
 400eb7c:	39c000cc 	andi	r7,r7,3
 400eb80:	21000044 	addi	r4,r4,1
 400eb84:	2109883a 	add	r4,r4,r4
 400eb88:	2109883a 	add	r4,r4,r4
 400eb8c:	1907883a 	add	r3,r3,r4
 400eb90:	38000526 	beq	r7,zero,400eba8 <memset+0x118>
 400eb94:	19cf883a 	add	r7,r3,r7
 400eb98:	19400005 	stb	r5,0(r3)
 400eb9c:	18c00044 	addi	r3,r3,1
 400eba0:	38fffd1e 	bne	r7,r3,400eb98 <__alt_mem_onchip_memory2_0+0xfc00d918>
 400eba4:	f800283a 	ret
 400eba8:	f800283a 	ret
 400ebac:	2007883a 	mov	r3,r4
 400ebb0:	300f883a 	mov	r7,r6
 400ebb4:	003fc706 	br	400ead4 <__alt_mem_onchip_memory2_0+0xfc00d854>

0400ebb8 <_printf_r>:
 400ebb8:	defffd04 	addi	sp,sp,-12
 400ebbc:	2805883a 	mov	r2,r5
 400ebc0:	dfc00015 	stw	ra,0(sp)
 400ebc4:	d9800115 	stw	r6,4(sp)
 400ebc8:	d9c00215 	stw	r7,8(sp)
 400ebcc:	21400217 	ldw	r5,8(r4)
 400ebd0:	d9c00104 	addi	r7,sp,4
 400ebd4:	100d883a 	mov	r6,r2
 400ebd8:	400f1ec0 	call	400f1ec <___vfprintf_internal_r>
 400ebdc:	dfc00017 	ldw	ra,0(sp)
 400ebe0:	dec00304 	addi	sp,sp,12
 400ebe4:	f800283a 	ret

0400ebe8 <printf>:
 400ebe8:	defffc04 	addi	sp,sp,-16
 400ebec:	dfc00015 	stw	ra,0(sp)
 400ebf0:	d9400115 	stw	r5,4(sp)
 400ebf4:	d9800215 	stw	r6,8(sp)
 400ebf8:	d9c00315 	stw	r7,12(sp)
 400ebfc:	008100f4 	movhi	r2,1027
 400ec00:	10a8a704 	addi	r2,r2,-23908
 400ec04:	10800017 	ldw	r2,0(r2)
 400ec08:	200b883a 	mov	r5,r4
 400ec0c:	d9800104 	addi	r6,sp,4
 400ec10:	11000217 	ldw	r4,8(r2)
 400ec14:	40114c80 	call	40114c8 <__vfprintf_internal>
 400ec18:	dfc00017 	ldw	ra,0(sp)
 400ec1c:	dec00404 	addi	sp,sp,16
 400ec20:	f800283a 	ret

0400ec24 <_putchar_r>:
 400ec24:	21800217 	ldw	r6,8(r4)
 400ec28:	40156101 	jmpi	4015610 <_putc_r>

0400ec2c <putchar>:
 400ec2c:	008100f4 	movhi	r2,1027
 400ec30:	10a8a704 	addi	r2,r2,-23908
 400ec34:	200b883a 	mov	r5,r4
 400ec38:	11000017 	ldw	r4,0(r2)
 400ec3c:	21800217 	ldw	r6,8(r4)
 400ec40:	40156101 	jmpi	4015610 <_putc_r>

0400ec44 <_puts_r>:
 400ec44:	defff604 	addi	sp,sp,-40
 400ec48:	dc000715 	stw	r16,28(sp)
 400ec4c:	2021883a 	mov	r16,r4
 400ec50:	2809883a 	mov	r4,r5
 400ec54:	dc400815 	stw	r17,32(sp)
 400ec58:	dfc00915 	stw	ra,36(sp)
 400ec5c:	2823883a 	mov	r17,r5
 400ec60:	400f14c0 	call	400f14c <strlen>
 400ec64:	10c00044 	addi	r3,r2,1
 400ec68:	d8800115 	stw	r2,4(sp)
 400ec6c:	008100b4 	movhi	r2,1026
 400ec70:	109bb704 	addi	r2,r2,28380
 400ec74:	d8800215 	stw	r2,8(sp)
 400ec78:	00800044 	movi	r2,1
 400ec7c:	d8800315 	stw	r2,12(sp)
 400ec80:	00800084 	movi	r2,2
 400ec84:	dc400015 	stw	r17,0(sp)
 400ec88:	d8c00615 	stw	r3,24(sp)
 400ec8c:	dec00415 	stw	sp,16(sp)
 400ec90:	d8800515 	stw	r2,20(sp)
 400ec94:	80000226 	beq	r16,zero,400eca0 <_puts_r+0x5c>
 400ec98:	80800e17 	ldw	r2,56(r16)
 400ec9c:	10001426 	beq	r2,zero,400ecf0 <_puts_r+0xac>
 400eca0:	81400217 	ldw	r5,8(r16)
 400eca4:	2880030b 	ldhu	r2,12(r5)
 400eca8:	10c8000c 	andi	r3,r2,8192
 400ecac:	1800061e 	bne	r3,zero,400ecc8 <_puts_r+0x84>
 400ecb0:	29001917 	ldw	r4,100(r5)
 400ecb4:	00f7ffc4 	movi	r3,-8193
 400ecb8:	10880014 	ori	r2,r2,8192
 400ecbc:	20c6703a 	and	r3,r4,r3
 400ecc0:	2880030d 	sth	r2,12(r5)
 400ecc4:	28c01915 	stw	r3,100(r5)
 400ecc8:	d9800404 	addi	r6,sp,16
 400eccc:	8009883a 	mov	r4,r16
 400ecd0:	4013a300 	call	4013a30 <__sfvwrite_r>
 400ecd4:	1000091e 	bne	r2,zero,400ecfc <_puts_r+0xb8>
 400ecd8:	00800284 	movi	r2,10
 400ecdc:	dfc00917 	ldw	ra,36(sp)
 400ece0:	dc400817 	ldw	r17,32(sp)
 400ece4:	dc000717 	ldw	r16,28(sp)
 400ece8:	dec00a04 	addi	sp,sp,40
 400ecec:	f800283a 	ret
 400ecf0:	8009883a 	mov	r4,r16
 400ecf4:	40135ac0 	call	40135ac <__sinit>
 400ecf8:	003fe906 	br	400eca0 <__alt_mem_onchip_memory2_0+0xfc00da20>
 400ecfc:	00bfffc4 	movi	r2,-1
 400ed00:	003ff606 	br	400ecdc <__alt_mem_onchip_memory2_0+0xfc00da5c>

0400ed04 <puts>:
 400ed04:	008100f4 	movhi	r2,1027
 400ed08:	10a8a704 	addi	r2,r2,-23908
 400ed0c:	200b883a 	mov	r5,r4
 400ed10:	11000017 	ldw	r4,0(r2)
 400ed14:	400ec441 	jmpi	400ec44 <_puts_r>

0400ed18 <_sbrk_r>:
 400ed18:	defffd04 	addi	sp,sp,-12
 400ed1c:	dc000015 	stw	r16,0(sp)
 400ed20:	040100f4 	movhi	r16,1027
 400ed24:	dc400115 	stw	r17,4(sp)
 400ed28:	84353904 	addi	r16,r16,-11036
 400ed2c:	2023883a 	mov	r17,r4
 400ed30:	2809883a 	mov	r4,r5
 400ed34:	dfc00215 	stw	ra,8(sp)
 400ed38:	80000015 	stw	zero,0(r16)
 400ed3c:	401bc380 	call	401bc38 <sbrk>
 400ed40:	00ffffc4 	movi	r3,-1
 400ed44:	10c00526 	beq	r2,r3,400ed5c <_sbrk_r+0x44>
 400ed48:	dfc00217 	ldw	ra,8(sp)
 400ed4c:	dc400117 	ldw	r17,4(sp)
 400ed50:	dc000017 	ldw	r16,0(sp)
 400ed54:	dec00304 	addi	sp,sp,12
 400ed58:	f800283a 	ret
 400ed5c:	80c00017 	ldw	r3,0(r16)
 400ed60:	183ff926 	beq	r3,zero,400ed48 <__alt_mem_onchip_memory2_0+0xfc00dac8>
 400ed64:	88c00015 	stw	r3,0(r17)
 400ed68:	003ff706 	br	400ed48 <__alt_mem_onchip_memory2_0+0xfc00dac8>

0400ed6c <_init_signal_r>:
 400ed6c:	2080b717 	ldw	r2,732(r4)
 400ed70:	10000226 	beq	r2,zero,400ed7c <_init_signal_r+0x10>
 400ed74:	0005883a 	mov	r2,zero
 400ed78:	f800283a 	ret
 400ed7c:	defffe04 	addi	sp,sp,-8
 400ed80:	01402004 	movi	r5,128
 400ed84:	dc000015 	stw	r16,0(sp)
 400ed88:	dfc00115 	stw	ra,4(sp)
 400ed8c:	2021883a 	mov	r16,r4
 400ed90:	400e13c0 	call	400e13c <_malloc_r>
 400ed94:	8080b715 	stw	r2,732(r16)
 400ed98:	10000d26 	beq	r2,zero,400edd0 <_init_signal_r+0x64>
 400ed9c:	0007883a 	mov	r3,zero
 400eda0:	01002004 	movi	r4,128
 400eda4:	00000106 	br	400edac <_init_signal_r+0x40>
 400eda8:	8080b717 	ldw	r2,732(r16)
 400edac:	10c5883a 	add	r2,r2,r3
 400edb0:	10000015 	stw	zero,0(r2)
 400edb4:	18c00104 	addi	r3,r3,4
 400edb8:	193ffb1e 	bne	r3,r4,400eda8 <__alt_mem_onchip_memory2_0+0xfc00db28>
 400edbc:	0005883a 	mov	r2,zero
 400edc0:	dfc00117 	ldw	ra,4(sp)
 400edc4:	dc000017 	ldw	r16,0(sp)
 400edc8:	dec00204 	addi	sp,sp,8
 400edcc:	f800283a 	ret
 400edd0:	00bfffc4 	movi	r2,-1
 400edd4:	003ffa06 	br	400edc0 <__alt_mem_onchip_memory2_0+0xfc00db40>

0400edd8 <_signal_r>:
 400edd8:	00c007c4 	movi	r3,31
 400eddc:	19401536 	bltu	r3,r5,400ee34 <_signal_r+0x5c>
 400ede0:	2080b717 	ldw	r2,732(r4)
 400ede4:	defffc04 	addi	sp,sp,-16
 400ede8:	dc800215 	stw	r18,8(sp)
 400edec:	dc400115 	stw	r17,4(sp)
 400edf0:	dc000015 	stw	r16,0(sp)
 400edf4:	dfc00315 	stw	ra,12(sp)
 400edf8:	3023883a 	mov	r17,r6
 400edfc:	2021883a 	mov	r16,r4
 400ee00:	2825883a 	mov	r18,r5
 400ee04:	10000f26 	beq	r2,zero,400ee44 <_signal_r+0x6c>
 400ee08:	948b883a 	add	r5,r18,r18
 400ee0c:	294b883a 	add	r5,r5,r5
 400ee10:	114b883a 	add	r5,r2,r5
 400ee14:	28800017 	ldw	r2,0(r5)
 400ee18:	2c400015 	stw	r17,0(r5)
 400ee1c:	dfc00317 	ldw	ra,12(sp)
 400ee20:	dc800217 	ldw	r18,8(sp)
 400ee24:	dc400117 	ldw	r17,4(sp)
 400ee28:	dc000017 	ldw	r16,0(sp)
 400ee2c:	dec00404 	addi	sp,sp,16
 400ee30:	f800283a 	ret
 400ee34:	00c00584 	movi	r3,22
 400ee38:	20c00015 	stw	r3,0(r4)
 400ee3c:	00bfffc4 	movi	r2,-1
 400ee40:	f800283a 	ret
 400ee44:	400ed6c0 	call	400ed6c <_init_signal_r>
 400ee48:	1000021e 	bne	r2,zero,400ee54 <_signal_r+0x7c>
 400ee4c:	8080b717 	ldw	r2,732(r16)
 400ee50:	003fed06 	br	400ee08 <__alt_mem_onchip_memory2_0+0xfc00db88>
 400ee54:	00bfffc4 	movi	r2,-1
 400ee58:	003ff006 	br	400ee1c <__alt_mem_onchip_memory2_0+0xfc00db9c>

0400ee5c <_raise_r>:
 400ee5c:	008007c4 	movi	r2,31
 400ee60:	11402936 	bltu	r2,r5,400ef08 <_raise_r+0xac>
 400ee64:	20c0b717 	ldw	r3,732(r4)
 400ee68:	defffd04 	addi	sp,sp,-12
 400ee6c:	dc400115 	stw	r17,4(sp)
 400ee70:	dc000015 	stw	r16,0(sp)
 400ee74:	dfc00215 	stw	ra,8(sp)
 400ee78:	2021883a 	mov	r16,r4
 400ee7c:	2823883a 	mov	r17,r5
 400ee80:	18001726 	beq	r3,zero,400eee0 <_raise_r+0x84>
 400ee84:	2945883a 	add	r2,r5,r5
 400ee88:	1085883a 	add	r2,r2,r2
 400ee8c:	1887883a 	add	r3,r3,r2
 400ee90:	19800017 	ldw	r6,0(r3)
 400ee94:	30001226 	beq	r6,zero,400eee0 <_raise_r+0x84>
 400ee98:	00800044 	movi	r2,1
 400ee9c:	30800e26 	beq	r6,r2,400eed8 <_raise_r+0x7c>
 400eea0:	013fffc4 	movi	r4,-1
 400eea4:	31000926 	beq	r6,r4,400eecc <_raise_r+0x70>
 400eea8:	18000015 	stw	zero,0(r3)
 400eeac:	2809883a 	mov	r4,r5
 400eeb0:	303ee83a 	callr	r6
 400eeb4:	0005883a 	mov	r2,zero
 400eeb8:	dfc00217 	ldw	ra,8(sp)
 400eebc:	dc400117 	ldw	r17,4(sp)
 400eec0:	dc000017 	ldw	r16,0(sp)
 400eec4:	dec00304 	addi	sp,sp,12
 400eec8:	f800283a 	ret
 400eecc:	00c00584 	movi	r3,22
 400eed0:	80c00015 	stw	r3,0(r16)
 400eed4:	003ff806 	br	400eeb8 <__alt_mem_onchip_memory2_0+0xfc00dc38>
 400eed8:	0005883a 	mov	r2,zero
 400eedc:	003ff606 	br	400eeb8 <__alt_mem_onchip_memory2_0+0xfc00dc38>
 400eee0:	8009883a 	mov	r4,r16
 400eee4:	400f06c0 	call	400f06c <_getpid_r>
 400eee8:	880d883a 	mov	r6,r17
 400eeec:	100b883a 	mov	r5,r2
 400eef0:	8009883a 	mov	r4,r16
 400eef4:	dfc00217 	ldw	ra,8(sp)
 400eef8:	dc400117 	ldw	r17,4(sp)
 400eefc:	dc000017 	ldw	r16,0(sp)
 400ef00:	dec00304 	addi	sp,sp,12
 400ef04:	400f0101 	jmpi	400f010 <_kill_r>
 400ef08:	00800584 	movi	r2,22
 400ef0c:	20800015 	stw	r2,0(r4)
 400ef10:	00bfffc4 	movi	r2,-1
 400ef14:	f800283a 	ret

0400ef18 <__sigtramp_r>:
 400ef18:	008007c4 	movi	r2,31
 400ef1c:	11402436 	bltu	r2,r5,400efb0 <__sigtramp_r+0x98>
 400ef20:	20c0b717 	ldw	r3,732(r4)
 400ef24:	defffd04 	addi	sp,sp,-12
 400ef28:	dc400115 	stw	r17,4(sp)
 400ef2c:	dc000015 	stw	r16,0(sp)
 400ef30:	dfc00215 	stw	ra,8(sp)
 400ef34:	2021883a 	mov	r16,r4
 400ef38:	2823883a 	mov	r17,r5
 400ef3c:	18001826 	beq	r3,zero,400efa0 <__sigtramp_r+0x88>
 400ef40:	8c45883a 	add	r2,r17,r17
 400ef44:	1085883a 	add	r2,r2,r2
 400ef48:	1885883a 	add	r2,r3,r2
 400ef4c:	10c00017 	ldw	r3,0(r2)
 400ef50:	18001126 	beq	r3,zero,400ef98 <__sigtramp_r+0x80>
 400ef54:	013fffc4 	movi	r4,-1
 400ef58:	19000d26 	beq	r3,r4,400ef90 <__sigtramp_r+0x78>
 400ef5c:	01000044 	movi	r4,1
 400ef60:	19000926 	beq	r3,r4,400ef88 <__sigtramp_r+0x70>
 400ef64:	10000015 	stw	zero,0(r2)
 400ef68:	8809883a 	mov	r4,r17
 400ef6c:	183ee83a 	callr	r3
 400ef70:	0005883a 	mov	r2,zero
 400ef74:	dfc00217 	ldw	ra,8(sp)
 400ef78:	dc400117 	ldw	r17,4(sp)
 400ef7c:	dc000017 	ldw	r16,0(sp)
 400ef80:	dec00304 	addi	sp,sp,12
 400ef84:	f800283a 	ret
 400ef88:	008000c4 	movi	r2,3
 400ef8c:	003ff906 	br	400ef74 <__alt_mem_onchip_memory2_0+0xfc00dcf4>
 400ef90:	00800084 	movi	r2,2
 400ef94:	003ff706 	br	400ef74 <__alt_mem_onchip_memory2_0+0xfc00dcf4>
 400ef98:	00800044 	movi	r2,1
 400ef9c:	003ff506 	br	400ef74 <__alt_mem_onchip_memory2_0+0xfc00dcf4>
 400efa0:	400ed6c0 	call	400ed6c <_init_signal_r>
 400efa4:	1000041e 	bne	r2,zero,400efb8 <__sigtramp_r+0xa0>
 400efa8:	80c0b717 	ldw	r3,732(r16)
 400efac:	003fe406 	br	400ef40 <__alt_mem_onchip_memory2_0+0xfc00dcc0>
 400efb0:	00bfffc4 	movi	r2,-1
 400efb4:	f800283a 	ret
 400efb8:	00bfffc4 	movi	r2,-1
 400efbc:	003fed06 	br	400ef74 <__alt_mem_onchip_memory2_0+0xfc00dcf4>

0400efc0 <raise>:
 400efc0:	008100f4 	movhi	r2,1027
 400efc4:	10a8a704 	addi	r2,r2,-23908
 400efc8:	200b883a 	mov	r5,r4
 400efcc:	11000017 	ldw	r4,0(r2)
 400efd0:	400ee5c1 	jmpi	400ee5c <_raise_r>

0400efd4 <signal>:
 400efd4:	008100f4 	movhi	r2,1027
 400efd8:	10a8a704 	addi	r2,r2,-23908
 400efdc:	280d883a 	mov	r6,r5
 400efe0:	200b883a 	mov	r5,r4
 400efe4:	11000017 	ldw	r4,0(r2)
 400efe8:	400edd81 	jmpi	400edd8 <_signal_r>

0400efec <_init_signal>:
 400efec:	008100f4 	movhi	r2,1027
 400eff0:	10a8a704 	addi	r2,r2,-23908
 400eff4:	11000017 	ldw	r4,0(r2)
 400eff8:	400ed6c1 	jmpi	400ed6c <_init_signal_r>

0400effc <__sigtramp>:
 400effc:	008100f4 	movhi	r2,1027
 400f000:	10a8a704 	addi	r2,r2,-23908
 400f004:	200b883a 	mov	r5,r4
 400f008:	11000017 	ldw	r4,0(r2)
 400f00c:	400ef181 	jmpi	400ef18 <__sigtramp_r>

0400f010 <_kill_r>:
 400f010:	defffd04 	addi	sp,sp,-12
 400f014:	2805883a 	mov	r2,r5
 400f018:	dc000015 	stw	r16,0(sp)
 400f01c:	040100f4 	movhi	r16,1027
 400f020:	dc400115 	stw	r17,4(sp)
 400f024:	84353904 	addi	r16,r16,-11036
 400f028:	2023883a 	mov	r17,r4
 400f02c:	300b883a 	mov	r5,r6
 400f030:	1009883a 	mov	r4,r2
 400f034:	dfc00215 	stw	ra,8(sp)
 400f038:	80000015 	stw	zero,0(r16)
 400f03c:	401b67c0 	call	401b67c <kill>
 400f040:	00ffffc4 	movi	r3,-1
 400f044:	10c00526 	beq	r2,r3,400f05c <_kill_r+0x4c>
 400f048:	dfc00217 	ldw	ra,8(sp)
 400f04c:	dc400117 	ldw	r17,4(sp)
 400f050:	dc000017 	ldw	r16,0(sp)
 400f054:	dec00304 	addi	sp,sp,12
 400f058:	f800283a 	ret
 400f05c:	80c00017 	ldw	r3,0(r16)
 400f060:	183ff926 	beq	r3,zero,400f048 <__alt_mem_onchip_memory2_0+0xfc00ddc8>
 400f064:	88c00015 	stw	r3,0(r17)
 400f068:	003ff706 	br	400f048 <__alt_mem_onchip_memory2_0+0xfc00ddc8>

0400f06c <_getpid_r>:
 400f06c:	401b5381 	jmpi	401b538 <getpid>

0400f070 <strcmp>:
 400f070:	2144b03a 	or	r2,r4,r5
 400f074:	108000cc 	andi	r2,r2,3
 400f078:	1000171e 	bne	r2,zero,400f0d8 <strcmp+0x68>
 400f07c:	20800017 	ldw	r2,0(r4)
 400f080:	28c00017 	ldw	r3,0(r5)
 400f084:	10c0141e 	bne	r2,r3,400f0d8 <strcmp+0x68>
 400f088:	027fbff4 	movhi	r9,65279
 400f08c:	4a7fbfc4 	addi	r9,r9,-257
 400f090:	0086303a 	nor	r3,zero,r2
 400f094:	02202074 	movhi	r8,32897
 400f098:	1245883a 	add	r2,r2,r9
 400f09c:	42202004 	addi	r8,r8,-32640
 400f0a0:	10c4703a 	and	r2,r2,r3
 400f0a4:	1204703a 	and	r2,r2,r8
 400f0a8:	10000226 	beq	r2,zero,400f0b4 <strcmp+0x44>
 400f0ac:	00002306 	br	400f13c <strcmp+0xcc>
 400f0b0:	1000221e 	bne	r2,zero,400f13c <strcmp+0xcc>
 400f0b4:	21000104 	addi	r4,r4,4
 400f0b8:	20c00017 	ldw	r3,0(r4)
 400f0bc:	29400104 	addi	r5,r5,4
 400f0c0:	29800017 	ldw	r6,0(r5)
 400f0c4:	1a4f883a 	add	r7,r3,r9
 400f0c8:	00c4303a 	nor	r2,zero,r3
 400f0cc:	3884703a 	and	r2,r7,r2
 400f0d0:	1204703a 	and	r2,r2,r8
 400f0d4:	19bff626 	beq	r3,r6,400f0b0 <__alt_mem_onchip_memory2_0+0xfc00de30>
 400f0d8:	20800003 	ldbu	r2,0(r4)
 400f0dc:	10c03fcc 	andi	r3,r2,255
 400f0e0:	18c0201c 	xori	r3,r3,128
 400f0e4:	18ffe004 	addi	r3,r3,-128
 400f0e8:	18000c26 	beq	r3,zero,400f11c <strcmp+0xac>
 400f0ec:	29800007 	ldb	r6,0(r5)
 400f0f0:	19800326 	beq	r3,r6,400f100 <strcmp+0x90>
 400f0f4:	00001306 	br	400f144 <strcmp+0xd4>
 400f0f8:	29800007 	ldb	r6,0(r5)
 400f0fc:	11800b1e 	bne	r2,r6,400f12c <strcmp+0xbc>
 400f100:	21000044 	addi	r4,r4,1
 400f104:	20c00003 	ldbu	r3,0(r4)
 400f108:	29400044 	addi	r5,r5,1
 400f10c:	18803fcc 	andi	r2,r3,255
 400f110:	1080201c 	xori	r2,r2,128
 400f114:	10bfe004 	addi	r2,r2,-128
 400f118:	103ff71e 	bne	r2,zero,400f0f8 <__alt_mem_onchip_memory2_0+0xfc00de78>
 400f11c:	0007883a 	mov	r3,zero
 400f120:	28800003 	ldbu	r2,0(r5)
 400f124:	1885c83a 	sub	r2,r3,r2
 400f128:	f800283a 	ret
 400f12c:	28800003 	ldbu	r2,0(r5)
 400f130:	18c03fcc 	andi	r3,r3,255
 400f134:	1885c83a 	sub	r2,r3,r2
 400f138:	f800283a 	ret
 400f13c:	0005883a 	mov	r2,zero
 400f140:	f800283a 	ret
 400f144:	10c03fcc 	andi	r3,r2,255
 400f148:	003ff506 	br	400f120 <__alt_mem_onchip_memory2_0+0xfc00dea0>

0400f14c <strlen>:
 400f14c:	208000cc 	andi	r2,r4,3
 400f150:	10002026 	beq	r2,zero,400f1d4 <strlen+0x88>
 400f154:	20800007 	ldb	r2,0(r4)
 400f158:	10002026 	beq	r2,zero,400f1dc <strlen+0x90>
 400f15c:	2005883a 	mov	r2,r4
 400f160:	00000206 	br	400f16c <strlen+0x20>
 400f164:	10c00007 	ldb	r3,0(r2)
 400f168:	18001826 	beq	r3,zero,400f1cc <strlen+0x80>
 400f16c:	10800044 	addi	r2,r2,1
 400f170:	10c000cc 	andi	r3,r2,3
 400f174:	183ffb1e 	bne	r3,zero,400f164 <__alt_mem_onchip_memory2_0+0xfc00dee4>
 400f178:	10c00017 	ldw	r3,0(r2)
 400f17c:	01ffbff4 	movhi	r7,65279
 400f180:	39ffbfc4 	addi	r7,r7,-257
 400f184:	00ca303a 	nor	r5,zero,r3
 400f188:	01a02074 	movhi	r6,32897
 400f18c:	19c7883a 	add	r3,r3,r7
 400f190:	31a02004 	addi	r6,r6,-32640
 400f194:	1946703a 	and	r3,r3,r5
 400f198:	1986703a 	and	r3,r3,r6
 400f19c:	1800091e 	bne	r3,zero,400f1c4 <strlen+0x78>
 400f1a0:	10800104 	addi	r2,r2,4
 400f1a4:	10c00017 	ldw	r3,0(r2)
 400f1a8:	19cb883a 	add	r5,r3,r7
 400f1ac:	00c6303a 	nor	r3,zero,r3
 400f1b0:	28c6703a 	and	r3,r5,r3
 400f1b4:	1986703a 	and	r3,r3,r6
 400f1b8:	183ff926 	beq	r3,zero,400f1a0 <__alt_mem_onchip_memory2_0+0xfc00df20>
 400f1bc:	00000106 	br	400f1c4 <strlen+0x78>
 400f1c0:	10800044 	addi	r2,r2,1
 400f1c4:	10c00007 	ldb	r3,0(r2)
 400f1c8:	183ffd1e 	bne	r3,zero,400f1c0 <__alt_mem_onchip_memory2_0+0xfc00df40>
 400f1cc:	1105c83a 	sub	r2,r2,r4
 400f1d0:	f800283a 	ret
 400f1d4:	2005883a 	mov	r2,r4
 400f1d8:	003fe706 	br	400f178 <__alt_mem_onchip_memory2_0+0xfc00def8>
 400f1dc:	0005883a 	mov	r2,zero
 400f1e0:	f800283a 	ret

0400f1e4 <_times_r>:
 400f1e4:	2809883a 	mov	r4,r5
 400f1e8:	401bd241 	jmpi	401bd24 <times>

0400f1ec <___vfprintf_internal_r>:
 400f1ec:	deffb804 	addi	sp,sp,-288
 400f1f0:	dfc04715 	stw	ra,284(sp)
 400f1f4:	ddc04515 	stw	r23,276(sp)
 400f1f8:	dd404315 	stw	r21,268(sp)
 400f1fc:	d9002d15 	stw	r4,180(sp)
 400f200:	282f883a 	mov	r23,r5
 400f204:	302b883a 	mov	r21,r6
 400f208:	d9c02e15 	stw	r7,184(sp)
 400f20c:	df004615 	stw	fp,280(sp)
 400f210:	dd804415 	stw	r22,272(sp)
 400f214:	dd004215 	stw	r20,264(sp)
 400f218:	dcc04115 	stw	r19,260(sp)
 400f21c:	dc804015 	stw	r18,256(sp)
 400f220:	dc403f15 	stw	r17,252(sp)
 400f224:	dc003e15 	stw	r16,248(sp)
 400f228:	401412c0 	call	401412c <_localeconv_r>
 400f22c:	10800017 	ldw	r2,0(r2)
 400f230:	1009883a 	mov	r4,r2
 400f234:	d8803415 	stw	r2,208(sp)
 400f238:	400f14c0 	call	400f14c <strlen>
 400f23c:	d8803715 	stw	r2,220(sp)
 400f240:	d8802d17 	ldw	r2,180(sp)
 400f244:	10000226 	beq	r2,zero,400f250 <___vfprintf_internal_r+0x64>
 400f248:	10800e17 	ldw	r2,56(r2)
 400f24c:	1000fb26 	beq	r2,zero,400f63c <___vfprintf_internal_r+0x450>
 400f250:	b880030b 	ldhu	r2,12(r23)
 400f254:	10c8000c 	andi	r3,r2,8192
 400f258:	1800061e 	bne	r3,zero,400f274 <___vfprintf_internal_r+0x88>
 400f25c:	b9001917 	ldw	r4,100(r23)
 400f260:	00f7ffc4 	movi	r3,-8193
 400f264:	10880014 	ori	r2,r2,8192
 400f268:	20c6703a 	and	r3,r4,r3
 400f26c:	b880030d 	sth	r2,12(r23)
 400f270:	b8c01915 	stw	r3,100(r23)
 400f274:	10c0020c 	andi	r3,r2,8
 400f278:	1800c326 	beq	r3,zero,400f588 <___vfprintf_internal_r+0x39c>
 400f27c:	b8c00417 	ldw	r3,16(r23)
 400f280:	1800c126 	beq	r3,zero,400f588 <___vfprintf_internal_r+0x39c>
 400f284:	1080068c 	andi	r2,r2,26
 400f288:	00c00284 	movi	r3,10
 400f28c:	10c0c626 	beq	r2,r3,400f5a8 <___vfprintf_internal_r+0x3bc>
 400f290:	d8c00404 	addi	r3,sp,16
 400f294:	050100b4 	movhi	r20,1026
 400f298:	d9001e04 	addi	r4,sp,120
 400f29c:	a51bc884 	addi	r20,r20,28450
 400f2a0:	d8c01e15 	stw	r3,120(sp)
 400f2a4:	d8002015 	stw	zero,128(sp)
 400f2a8:	d8001f15 	stw	zero,124(sp)
 400f2ac:	d8003315 	stw	zero,204(sp)
 400f2b0:	d8003615 	stw	zero,216(sp)
 400f2b4:	d8003815 	stw	zero,224(sp)
 400f2b8:	1811883a 	mov	r8,r3
 400f2bc:	d8003915 	stw	zero,228(sp)
 400f2c0:	d8003a15 	stw	zero,232(sp)
 400f2c4:	d8002f15 	stw	zero,188(sp)
 400f2c8:	d9002815 	stw	r4,160(sp)
 400f2cc:	a8800007 	ldb	r2,0(r21)
 400f2d0:	10028b26 	beq	r2,zero,400fd00 <___vfprintf_internal_r+0xb14>
 400f2d4:	00c00944 	movi	r3,37
 400f2d8:	a823883a 	mov	r17,r21
 400f2dc:	10c0021e 	bne	r2,r3,400f2e8 <___vfprintf_internal_r+0xfc>
 400f2e0:	00001406 	br	400f334 <___vfprintf_internal_r+0x148>
 400f2e4:	10c00326 	beq	r2,r3,400f2f4 <___vfprintf_internal_r+0x108>
 400f2e8:	8c400044 	addi	r17,r17,1
 400f2ec:	88800007 	ldb	r2,0(r17)
 400f2f0:	103ffc1e 	bne	r2,zero,400f2e4 <__alt_mem_onchip_memory2_0+0xfc00e064>
 400f2f4:	8d61c83a 	sub	r16,r17,r21
 400f2f8:	80000e26 	beq	r16,zero,400f334 <___vfprintf_internal_r+0x148>
 400f2fc:	d8c02017 	ldw	r3,128(sp)
 400f300:	d8801f17 	ldw	r2,124(sp)
 400f304:	45400015 	stw	r21,0(r8)
 400f308:	1c07883a 	add	r3,r3,r16
 400f30c:	10800044 	addi	r2,r2,1
 400f310:	d8c02015 	stw	r3,128(sp)
 400f314:	44000115 	stw	r16,4(r8)
 400f318:	d8801f15 	stw	r2,124(sp)
 400f31c:	00c001c4 	movi	r3,7
 400f320:	1880a916 	blt	r3,r2,400f5c8 <___vfprintf_internal_r+0x3dc>
 400f324:	42000204 	addi	r8,r8,8
 400f328:	d9402f17 	ldw	r5,188(sp)
 400f32c:	2c0b883a 	add	r5,r5,r16
 400f330:	d9402f15 	stw	r5,188(sp)
 400f334:	88800007 	ldb	r2,0(r17)
 400f338:	1000aa26 	beq	r2,zero,400f5e4 <___vfprintf_internal_r+0x3f8>
 400f33c:	8d400044 	addi	r21,r17,1
 400f340:	8c400047 	ldb	r17,1(r17)
 400f344:	0021883a 	mov	r16,zero
 400f348:	00bfffc4 	movi	r2,-1
 400f34c:	0025883a 	mov	r18,zero
 400f350:	dc002905 	stb	r16,164(sp)
 400f354:	d8002785 	stb	zero,158(sp)
 400f358:	d8002b05 	stb	zero,172(sp)
 400f35c:	d8802a15 	stw	r2,168(sp)
 400f360:	d8003115 	stw	zero,196(sp)
 400f364:	04c01604 	movi	r19,88
 400f368:	05800244 	movi	r22,9
 400f36c:	9021883a 	mov	r16,r18
 400f370:	4039883a 	mov	fp,r8
 400f374:	ad400044 	addi	r21,r21,1
 400f378:	88bff804 	addi	r2,r17,-32
 400f37c:	98833236 	bltu	r19,r2,4010048 <___vfprintf_internal_r+0xe5c>
 400f380:	100490ba 	slli	r2,r2,2
 400f384:	00c10074 	movhi	r3,1025
 400f388:	18fce604 	addi	r3,r3,-3176
 400f38c:	10c5883a 	add	r2,r2,r3
 400f390:	10800017 	ldw	r2,0(r2)
 400f394:	1000683a 	jmp	r2
 400f398:	0400ff40 	call	400ff4 <__alt_mem_sdram-0x3bff00c>
 400f39c:	04010048 	cmpgei	r16,zero,1025
 400f3a0:	04010048 	cmpgei	r16,zero,1025
 400f3a4:	0400ff60 	cmpeqi	r16,zero,1021
 400f3a8:	04010048 	cmpgei	r16,zero,1025
 400f3ac:	04010048 	cmpgei	r16,zero,1025
 400f3b0:	04010048 	cmpgei	r16,zero,1025
 400f3b4:	04010048 	cmpgei	r16,zero,1025
 400f3b8:	04010048 	cmpgei	r16,zero,1025
 400f3bc:	04010048 	cmpgei	r16,zero,1025
 400f3c0:	0400f648 	cmpgei	r16,zero,985
 400f3c4:	0400fe50 	cmplti	r16,zero,1017
 400f3c8:	04010048 	cmpgei	r16,zero,1025
 400f3cc:	0400f50c 	andi	r16,zero,980
 400f3d0:	0400f66c 	andhi	r16,zero,985
 400f3d4:	04010048 	cmpgei	r16,zero,1025
 400f3d8:	0400f6bc 	xorhi	r16,zero,986
 400f3dc:	0400f6c8 	cmpgei	r16,zero,987
 400f3e0:	0400f6c8 	cmpgei	r16,zero,987
 400f3e4:	0400f6c8 	cmpgei	r16,zero,987
 400f3e8:	0400f6c8 	cmpgei	r16,zero,987
 400f3ec:	0400f6c8 	cmpgei	r16,zero,987
 400f3f0:	0400f6c8 	cmpgei	r16,zero,987
 400f3f4:	0400f6c8 	cmpgei	r16,zero,987
 400f3f8:	0400f6c8 	cmpgei	r16,zero,987
 400f3fc:	0400f6c8 	cmpgei	r16,zero,987
 400f400:	04010048 	cmpgei	r16,zero,1025
 400f404:	04010048 	cmpgei	r16,zero,1025
 400f408:	04010048 	cmpgei	r16,zero,1025
 400f40c:	04010048 	cmpgei	r16,zero,1025
 400f410:	04010048 	cmpgei	r16,zero,1025
 400f414:	04010048 	cmpgei	r16,zero,1025
 400f418:	04010048 	cmpgei	r16,zero,1025
 400f41c:	04010048 	cmpgei	r16,zero,1025
 400f420:	04010048 	cmpgei	r16,zero,1025
 400f424:	04010048 	cmpgei	r16,zero,1025
 400f428:	0400f704 	movi	r16,988
 400f42c:	0400f7cc 	andi	r16,zero,991
 400f430:	04010048 	cmpgei	r16,zero,1025
 400f434:	0400f7cc 	andi	r16,zero,991
 400f438:	04010048 	cmpgei	r16,zero,1025
 400f43c:	04010048 	cmpgei	r16,zero,1025
 400f440:	04010048 	cmpgei	r16,zero,1025
 400f444:	04010048 	cmpgei	r16,zero,1025
 400f448:	0400f878 	rdprs	r16,zero,993
 400f44c:	04010048 	cmpgei	r16,zero,1025
 400f450:	04010048 	cmpgei	r16,zero,1025
 400f454:	0400f884 	movi	r16,994
 400f458:	04010048 	cmpgei	r16,zero,1025
 400f45c:	04010048 	cmpgei	r16,zero,1025
 400f460:	04010048 	cmpgei	r16,zero,1025
 400f464:	04010048 	cmpgei	r16,zero,1025
 400f468:	04010048 	cmpgei	r16,zero,1025
 400f46c:	0400fd08 	cmpgei	r16,zero,1012
 400f470:	04010048 	cmpgei	r16,zero,1025
 400f474:	04010048 	cmpgei	r16,zero,1025
 400f478:	0400fd74 	movhi	r16,1013
 400f47c:	04010048 	cmpgei	r16,zero,1025
 400f480:	04010048 	cmpgei	r16,zero,1025
 400f484:	04010048 	cmpgei	r16,zero,1025
 400f488:	04010048 	cmpgei	r16,zero,1025
 400f48c:	04010048 	cmpgei	r16,zero,1025
 400f490:	04010048 	cmpgei	r16,zero,1025
 400f494:	04010048 	cmpgei	r16,zero,1025
 400f498:	04010048 	cmpgei	r16,zero,1025
 400f49c:	04010048 	cmpgei	r16,zero,1025
 400f4a0:	04010048 	cmpgei	r16,zero,1025
 400f4a4:	0400ffec 	andhi	r16,zero,1023
 400f4a8:	0400ff6c 	andhi	r16,zero,1021
 400f4ac:	0400f7cc 	andi	r16,zero,991
 400f4b0:	0400f7cc 	andi	r16,zero,991
 400f4b4:	0400f7cc 	andi	r16,zero,991
 400f4b8:	0400ff8c 	andi	r16,zero,1022
 400f4bc:	0400ff6c 	andhi	r16,zero,1021
 400f4c0:	04010048 	cmpgei	r16,zero,1025
 400f4c4:	04010048 	cmpgei	r16,zero,1025
 400f4c8:	0400ff98 	cmpnei	r16,zero,1022
 400f4cc:	04010048 	cmpgei	r16,zero,1025
 400f4d0:	0400ffac 	andhi	r16,zero,1022
 400f4d4:	0400fe30 	cmpltui	r16,zero,1016
 400f4d8:	0400f518 	cmpnei	r16,zero,980
 400f4dc:	0400fe68 	cmpgeui	r16,zero,1017
 400f4e0:	04010048 	cmpgei	r16,zero,1025
 400f4e4:	0400fe74 	movhi	r16,1017
 400f4e8:	04010048 	cmpgei	r16,zero,1025
 400f4ec:	0400fed8 	cmpnei	r16,zero,1019
 400f4f0:	04010048 	cmpgei	r16,zero,1025
 400f4f4:	04010048 	cmpgei	r16,zero,1025
 400f4f8:	0400fef8 	rdprs	r16,zero,1019
 400f4fc:	d8c03117 	ldw	r3,196(sp)
 400f500:	d8802e15 	stw	r2,184(sp)
 400f504:	00c7c83a 	sub	r3,zero,r3
 400f508:	d8c03115 	stw	r3,196(sp)
 400f50c:	84000114 	ori	r16,r16,4
 400f510:	ac400007 	ldb	r17,0(r21)
 400f514:	003f9706 	br	400f374 <__alt_mem_onchip_memory2_0+0xfc00e0f4>
 400f518:	00800c04 	movi	r2,48
 400f51c:	d8802705 	stb	r2,156(sp)
 400f520:	00801e04 	movi	r2,120
 400f524:	d8802745 	stb	r2,157(sp)
 400f528:	d9002a17 	ldw	r4,168(sp)
 400f52c:	d8802e17 	ldw	r2,184(sp)
 400f530:	d8002785 	stb	zero,158(sp)
 400f534:	e011883a 	mov	r8,fp
 400f538:	10c00104 	addi	r3,r2,4
 400f53c:	14c00017 	ldw	r19,0(r2)
 400f540:	002d883a 	mov	r22,zero
 400f544:	80800094 	ori	r2,r16,2
 400f548:	2002ca16 	blt	r4,zero,4010074 <___vfprintf_internal_r+0xe88>
 400f54c:	00bfdfc4 	movi	r2,-129
 400f550:	80a4703a 	and	r18,r16,r2
 400f554:	d8c02e15 	stw	r3,184(sp)
 400f558:	94800094 	ori	r18,r18,2
 400f55c:	9802b41e 	bne	r19,zero,4010030 <___vfprintf_internal_r+0xe44>
 400f560:	014100b4 	movhi	r5,1026
 400f564:	295bc104 	addi	r5,r5,28420
 400f568:	d9403915 	stw	r5,228(sp)
 400f56c:	04401e04 	movi	r17,120
 400f570:	d8802a17 	ldw	r2,168(sp)
 400f574:	0039883a 	mov	fp,zero
 400f578:	1001fa26 	beq	r2,zero,400fd64 <___vfprintf_internal_r+0xb78>
 400f57c:	0027883a 	mov	r19,zero
 400f580:	002d883a 	mov	r22,zero
 400f584:	00021906 	br	400fdec <___vfprintf_internal_r+0xc00>
 400f588:	d9002d17 	ldw	r4,180(sp)
 400f58c:	b80b883a 	mov	r5,r23
 400f590:	40115a00 	call	40115a0 <__swsetup_r>
 400f594:	1005dc1e 	bne	r2,zero,4010d08 <___vfprintf_internal_r+0x1b1c>
 400f598:	b880030b 	ldhu	r2,12(r23)
 400f59c:	00c00284 	movi	r3,10
 400f5a0:	1080068c 	andi	r2,r2,26
 400f5a4:	10ff3a1e 	bne	r2,r3,400f290 <__alt_mem_onchip_memory2_0+0xfc00e010>
 400f5a8:	b880038f 	ldh	r2,14(r23)
 400f5ac:	103f3816 	blt	r2,zero,400f290 <__alt_mem_onchip_memory2_0+0xfc00e010>
 400f5b0:	d9c02e17 	ldw	r7,184(sp)
 400f5b4:	d9002d17 	ldw	r4,180(sp)
 400f5b8:	a80d883a 	mov	r6,r21
 400f5bc:	b80b883a 	mov	r5,r23
 400f5c0:	40114e40 	call	40114e4 <__sbprintf>
 400f5c4:	00001106 	br	400f60c <___vfprintf_internal_r+0x420>
 400f5c8:	d9002d17 	ldw	r4,180(sp)
 400f5cc:	d9801e04 	addi	r6,sp,120
 400f5d0:	b80b883a 	mov	r5,r23
 400f5d4:	4015f880 	call	4015f88 <__sprint_r>
 400f5d8:	1000081e 	bne	r2,zero,400f5fc <___vfprintf_internal_r+0x410>
 400f5dc:	da000404 	addi	r8,sp,16
 400f5e0:	003f5106 	br	400f328 <__alt_mem_onchip_memory2_0+0xfc00e0a8>
 400f5e4:	d8802017 	ldw	r2,128(sp)
 400f5e8:	10000426 	beq	r2,zero,400f5fc <___vfprintf_internal_r+0x410>
 400f5ec:	d9002d17 	ldw	r4,180(sp)
 400f5f0:	d9801e04 	addi	r6,sp,120
 400f5f4:	b80b883a 	mov	r5,r23
 400f5f8:	4015f880 	call	4015f88 <__sprint_r>
 400f5fc:	b880030b 	ldhu	r2,12(r23)
 400f600:	1080100c 	andi	r2,r2,64
 400f604:	1005c01e 	bne	r2,zero,4010d08 <___vfprintf_internal_r+0x1b1c>
 400f608:	d8802f17 	ldw	r2,188(sp)
 400f60c:	dfc04717 	ldw	ra,284(sp)
 400f610:	df004617 	ldw	fp,280(sp)
 400f614:	ddc04517 	ldw	r23,276(sp)
 400f618:	dd804417 	ldw	r22,272(sp)
 400f61c:	dd404317 	ldw	r21,268(sp)
 400f620:	dd004217 	ldw	r20,264(sp)
 400f624:	dcc04117 	ldw	r19,260(sp)
 400f628:	dc804017 	ldw	r18,256(sp)
 400f62c:	dc403f17 	ldw	r17,252(sp)
 400f630:	dc003e17 	ldw	r16,248(sp)
 400f634:	dec04804 	addi	sp,sp,288
 400f638:	f800283a 	ret
 400f63c:	d9002d17 	ldw	r4,180(sp)
 400f640:	40135ac0 	call	40135ac <__sinit>
 400f644:	003f0206 	br	400f250 <__alt_mem_onchip_memory2_0+0xfc00dfd0>
 400f648:	d9002e17 	ldw	r4,184(sp)
 400f64c:	d9402e17 	ldw	r5,184(sp)
 400f650:	21000017 	ldw	r4,0(r4)
 400f654:	28800104 	addi	r2,r5,4
 400f658:	d9003115 	stw	r4,196(sp)
 400f65c:	203fa716 	blt	r4,zero,400f4fc <__alt_mem_onchip_memory2_0+0xfc00e27c>
 400f660:	d8802e15 	stw	r2,184(sp)
 400f664:	ac400007 	ldb	r17,0(r21)
 400f668:	003f4206 	br	400f374 <__alt_mem_onchip_memory2_0+0xfc00e0f4>
 400f66c:	ac400007 	ldb	r17,0(r21)
 400f670:	01000a84 	movi	r4,42
 400f674:	a8c00044 	addi	r3,r21,1
 400f678:	89075826 	beq	r17,r4,40113dc <___vfprintf_internal_r+0x21f0>
 400f67c:	8cbff404 	addi	r18,r17,-48
 400f680:	b486ae36 	bltu	r22,r18,401113c <___vfprintf_internal_r+0x1f50>
 400f684:	0009883a 	mov	r4,zero
 400f688:	1823883a 	mov	r17,r3
 400f68c:	01400284 	movi	r5,10
 400f690:	400cfd40 	call	400cfd4 <__mulsi3>
 400f694:	88c00007 	ldb	r3,0(r17)
 400f698:	1489883a 	add	r4,r2,r18
 400f69c:	8d400044 	addi	r21,r17,1
 400f6a0:	1cbff404 	addi	r18,r3,-48
 400f6a4:	a823883a 	mov	r17,r21
 400f6a8:	b4bff82e 	bgeu	r22,r18,400f68c <__alt_mem_onchip_memory2_0+0xfc00e40c>
 400f6ac:	1823883a 	mov	r17,r3
 400f6b0:	2005f616 	blt	r4,zero,4010e8c <___vfprintf_internal_r+0x1ca0>
 400f6b4:	d9002a15 	stw	r4,168(sp)
 400f6b8:	003f2f06 	br	400f378 <__alt_mem_onchip_memory2_0+0xfc00e0f8>
 400f6bc:	84002014 	ori	r16,r16,128
 400f6c0:	ac400007 	ldb	r17,0(r21)
 400f6c4:	003f2b06 	br	400f374 <__alt_mem_onchip_memory2_0+0xfc00e0f4>
 400f6c8:	8cbff404 	addi	r18,r17,-48
 400f6cc:	d8003115 	stw	zero,196(sp)
 400f6d0:	0009883a 	mov	r4,zero
 400f6d4:	a823883a 	mov	r17,r21
 400f6d8:	01400284 	movi	r5,10
 400f6dc:	400cfd40 	call	400cfd4 <__mulsi3>
 400f6e0:	88c00007 	ldb	r3,0(r17)
 400f6e4:	9089883a 	add	r4,r18,r2
 400f6e8:	ad400044 	addi	r21,r21,1
 400f6ec:	1cbff404 	addi	r18,r3,-48
 400f6f0:	a823883a 	mov	r17,r21
 400f6f4:	b4bff82e 	bgeu	r22,r18,400f6d8 <__alt_mem_onchip_memory2_0+0xfc00e458>
 400f6f8:	1823883a 	mov	r17,r3
 400f6fc:	d9003115 	stw	r4,196(sp)
 400f700:	003f1d06 	br	400f378 <__alt_mem_onchip_memory2_0+0xfc00e0f8>
 400f704:	8025883a 	mov	r18,r16
 400f708:	dc002903 	ldbu	r16,164(sp)
 400f70c:	e011883a 	mov	r8,fp
 400f710:	84003fcc 	andi	r16,r16,255
 400f714:	8007531e 	bne	r16,zero,4011464 <___vfprintf_internal_r+0x2278>
 400f718:	94800414 	ori	r18,r18,16
 400f71c:	9080080c 	andi	r2,r18,32
 400f720:	1003a326 	beq	r2,zero,40105b0 <___vfprintf_internal_r+0x13c4>
 400f724:	d9002e17 	ldw	r4,184(sp)
 400f728:	20800117 	ldw	r2,4(r4)
 400f72c:	24c00017 	ldw	r19,0(r4)
 400f730:	21000204 	addi	r4,r4,8
 400f734:	d9002e15 	stw	r4,184(sp)
 400f738:	102d883a 	mov	r22,r2
 400f73c:	10047316 	blt	r2,zero,401090c <___vfprintf_internal_r+0x1720>
 400f740:	d9002a17 	ldw	r4,168(sp)
 400f744:	df002783 	ldbu	fp,158(sp)
 400f748:	2003e416 	blt	r4,zero,40106dc <___vfprintf_internal_r+0x14f0>
 400f74c:	00ffdfc4 	movi	r3,-129
 400f750:	9d84b03a 	or	r2,r19,r22
 400f754:	90e4703a 	and	r18,r18,r3
 400f758:	10018026 	beq	r2,zero,400fd5c <___vfprintf_internal_r+0xb70>
 400f75c:	b003ab26 	beq	r22,zero,401060c <___vfprintf_internal_r+0x1420>
 400f760:	dc402915 	stw	r17,164(sp)
 400f764:	dc001e04 	addi	r16,sp,120
 400f768:	b023883a 	mov	r17,r22
 400f76c:	402d883a 	mov	r22,r8
 400f770:	9809883a 	mov	r4,r19
 400f774:	880b883a 	mov	r5,r17
 400f778:	01800284 	movi	r6,10
 400f77c:	000f883a 	mov	r7,zero
 400f780:	40184cc0 	call	40184cc <__umoddi3>
 400f784:	10800c04 	addi	r2,r2,48
 400f788:	843fffc4 	addi	r16,r16,-1
 400f78c:	9809883a 	mov	r4,r19
 400f790:	880b883a 	mov	r5,r17
 400f794:	80800005 	stb	r2,0(r16)
 400f798:	01800284 	movi	r6,10
 400f79c:	000f883a 	mov	r7,zero
 400f7a0:	4017ed00 	call	4017ed0 <__udivdi3>
 400f7a4:	1027883a 	mov	r19,r2
 400f7a8:	10c4b03a 	or	r2,r2,r3
 400f7ac:	1823883a 	mov	r17,r3
 400f7b0:	103fef1e 	bne	r2,zero,400f770 <__alt_mem_onchip_memory2_0+0xfc00e4f0>
 400f7b4:	d8c02817 	ldw	r3,160(sp)
 400f7b8:	dc402917 	ldw	r17,164(sp)
 400f7bc:	b011883a 	mov	r8,r22
 400f7c0:	1c07c83a 	sub	r3,r3,r16
 400f7c4:	d8c02b15 	stw	r3,172(sp)
 400f7c8:	00005f06 	br	400f948 <___vfprintf_internal_r+0x75c>
 400f7cc:	8025883a 	mov	r18,r16
 400f7d0:	dc002903 	ldbu	r16,164(sp)
 400f7d4:	e011883a 	mov	r8,fp
 400f7d8:	84003fcc 	andi	r16,r16,255
 400f7dc:	80071e1e 	bne	r16,zero,4011458 <___vfprintf_internal_r+0x226c>
 400f7e0:	9080020c 	andi	r2,r18,8
 400f7e4:	1004af26 	beq	r2,zero,4010aa4 <___vfprintf_internal_r+0x18b8>
 400f7e8:	d9002e17 	ldw	r4,184(sp)
 400f7ec:	d9402e17 	ldw	r5,184(sp)
 400f7f0:	d8802e17 	ldw	r2,184(sp)
 400f7f4:	21000017 	ldw	r4,0(r4)
 400f7f8:	29400117 	ldw	r5,4(r5)
 400f7fc:	10800204 	addi	r2,r2,8
 400f800:	d9003615 	stw	r4,216(sp)
 400f804:	d9403815 	stw	r5,224(sp)
 400f808:	d8802e15 	stw	r2,184(sp)
 400f80c:	d9003617 	ldw	r4,216(sp)
 400f810:	d9403817 	ldw	r5,224(sp)
 400f814:	da003d15 	stw	r8,244(sp)
 400f818:	04000044 	movi	r16,1
 400f81c:	4015cdc0 	call	4015cdc <__fpclassifyd>
 400f820:	da003d17 	ldw	r8,244(sp)
 400f824:	1404441e 	bne	r2,r16,4010938 <___vfprintf_internal_r+0x174c>
 400f828:	d9003617 	ldw	r4,216(sp)
 400f82c:	d9403817 	ldw	r5,224(sp)
 400f830:	000d883a 	mov	r6,zero
 400f834:	000f883a 	mov	r7,zero
 400f838:	4019e700 	call	4019e70 <__ledf2>
 400f83c:	da003d17 	ldw	r8,244(sp)
 400f840:	1005e316 	blt	r2,zero,4010fd0 <___vfprintf_internal_r+0x1de4>
 400f844:	df002783 	ldbu	fp,158(sp)
 400f848:	008011c4 	movi	r2,71
 400f84c:	1445580e 	bge	r2,r17,4010db0 <___vfprintf_internal_r+0x1bc4>
 400f850:	040100b4 	movhi	r16,1026
 400f854:	841bb904 	addi	r16,r16,28388
 400f858:	00c000c4 	movi	r3,3
 400f85c:	00bfdfc4 	movi	r2,-129
 400f860:	d8c02915 	stw	r3,164(sp)
 400f864:	90a4703a 	and	r18,r18,r2
 400f868:	d8c02b15 	stw	r3,172(sp)
 400f86c:	d8002a15 	stw	zero,168(sp)
 400f870:	d8003215 	stw	zero,200(sp)
 400f874:	00003a06 	br	400f960 <___vfprintf_internal_r+0x774>
 400f878:	84000214 	ori	r16,r16,8
 400f87c:	ac400007 	ldb	r17,0(r21)
 400f880:	003ebc06 	br	400f374 <__alt_mem_onchip_memory2_0+0xfc00e0f4>
 400f884:	8025883a 	mov	r18,r16
 400f888:	dc002903 	ldbu	r16,164(sp)
 400f88c:	e011883a 	mov	r8,fp
 400f890:	84003fcc 	andi	r16,r16,255
 400f894:	8007001e 	bne	r16,zero,4011498 <___vfprintf_internal_r+0x22ac>
 400f898:	94800414 	ori	r18,r18,16
 400f89c:	9080080c 	andi	r2,r18,32
 400f8a0:	1002fa26 	beq	r2,zero,401048c <___vfprintf_internal_r+0x12a0>
 400f8a4:	d9002e17 	ldw	r4,184(sp)
 400f8a8:	d9402a17 	ldw	r5,168(sp)
 400f8ac:	d8002785 	stb	zero,158(sp)
 400f8b0:	20800204 	addi	r2,r4,8
 400f8b4:	24c00017 	ldw	r19,0(r4)
 400f8b8:	25800117 	ldw	r22,4(r4)
 400f8bc:	2804b116 	blt	r5,zero,4010b84 <___vfprintf_internal_r+0x1998>
 400f8c0:	013fdfc4 	movi	r4,-129
 400f8c4:	9d86b03a 	or	r3,r19,r22
 400f8c8:	d8802e15 	stw	r2,184(sp)
 400f8cc:	9124703a 	and	r18,r18,r4
 400f8d0:	1802fb1e 	bne	r3,zero,40104c0 <___vfprintf_internal_r+0x12d4>
 400f8d4:	d8c02a17 	ldw	r3,168(sp)
 400f8d8:	0039883a 	mov	fp,zero
 400f8dc:	1805e526 	beq	r3,zero,4011074 <___vfprintf_internal_r+0x1e88>
 400f8e0:	0027883a 	mov	r19,zero
 400f8e4:	002d883a 	mov	r22,zero
 400f8e8:	dc001e04 	addi	r16,sp,120
 400f8ec:	9806d0fa 	srli	r3,r19,3
 400f8f0:	b008977a 	slli	r4,r22,29
 400f8f4:	b02cd0fa 	srli	r22,r22,3
 400f8f8:	9cc001cc 	andi	r19,r19,7
 400f8fc:	98800c04 	addi	r2,r19,48
 400f900:	843fffc4 	addi	r16,r16,-1
 400f904:	20e6b03a 	or	r19,r4,r3
 400f908:	80800005 	stb	r2,0(r16)
 400f90c:	9d86b03a 	or	r3,r19,r22
 400f910:	183ff61e 	bne	r3,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 400f914:	90c0004c 	andi	r3,r18,1
 400f918:	18014126 	beq	r3,zero,400fe20 <___vfprintf_internal_r+0xc34>
 400f91c:	10803fcc 	andi	r2,r2,255
 400f920:	1080201c 	xori	r2,r2,128
 400f924:	10bfe004 	addi	r2,r2,-128
 400f928:	00c00c04 	movi	r3,48
 400f92c:	10c13c26 	beq	r2,r3,400fe20 <___vfprintf_internal_r+0xc34>
 400f930:	80ffffc5 	stb	r3,-1(r16)
 400f934:	d8c02817 	ldw	r3,160(sp)
 400f938:	80bfffc4 	addi	r2,r16,-1
 400f93c:	1021883a 	mov	r16,r2
 400f940:	1887c83a 	sub	r3,r3,r2
 400f944:	d8c02b15 	stw	r3,172(sp)
 400f948:	d8802b17 	ldw	r2,172(sp)
 400f94c:	d9002a17 	ldw	r4,168(sp)
 400f950:	1100010e 	bge	r2,r4,400f958 <___vfprintf_internal_r+0x76c>
 400f954:	2005883a 	mov	r2,r4
 400f958:	d8802915 	stw	r2,164(sp)
 400f95c:	d8003215 	stw	zero,200(sp)
 400f960:	e7003fcc 	andi	fp,fp,255
 400f964:	e700201c 	xori	fp,fp,128
 400f968:	e73fe004 	addi	fp,fp,-128
 400f96c:	e0000326 	beq	fp,zero,400f97c <___vfprintf_internal_r+0x790>
 400f970:	d8c02917 	ldw	r3,164(sp)
 400f974:	18c00044 	addi	r3,r3,1
 400f978:	d8c02915 	stw	r3,164(sp)
 400f97c:	90c0008c 	andi	r3,r18,2
 400f980:	d8c02c15 	stw	r3,176(sp)
 400f984:	18000326 	beq	r3,zero,400f994 <___vfprintf_internal_r+0x7a8>
 400f988:	d8c02917 	ldw	r3,164(sp)
 400f98c:	18c00084 	addi	r3,r3,2
 400f990:	d8c02915 	stw	r3,164(sp)
 400f994:	90c0210c 	andi	r3,r18,132
 400f998:	d8c03015 	stw	r3,192(sp)
 400f99c:	1801c51e 	bne	r3,zero,40100b4 <___vfprintf_internal_r+0xec8>
 400f9a0:	d9003117 	ldw	r4,196(sp)
 400f9a4:	d8c02917 	ldw	r3,164(sp)
 400f9a8:	20e7c83a 	sub	r19,r4,r3
 400f9ac:	04c1c10e 	bge	zero,r19,40100b4 <___vfprintf_internal_r+0xec8>
 400f9b0:	02400404 	movi	r9,16
 400f9b4:	d8c02017 	ldw	r3,128(sp)
 400f9b8:	d8801f17 	ldw	r2,124(sp)
 400f9bc:	4cc52f0e 	bge	r9,r19,4010e7c <___vfprintf_internal_r+0x1c90>
 400f9c0:	014100b4 	movhi	r5,1026
 400f9c4:	295bcc84 	addi	r5,r5,28466
 400f9c8:	dc403b15 	stw	r17,236(sp)
 400f9cc:	d9403515 	stw	r5,212(sp)
 400f9d0:	9823883a 	mov	r17,r19
 400f9d4:	482d883a 	mov	r22,r9
 400f9d8:	9027883a 	mov	r19,r18
 400f9dc:	070001c4 	movi	fp,7
 400f9e0:	8025883a 	mov	r18,r16
 400f9e4:	dc002d17 	ldw	r16,180(sp)
 400f9e8:	00000306 	br	400f9f8 <___vfprintf_internal_r+0x80c>
 400f9ec:	8c7ffc04 	addi	r17,r17,-16
 400f9f0:	42000204 	addi	r8,r8,8
 400f9f4:	b440130e 	bge	r22,r17,400fa44 <___vfprintf_internal_r+0x858>
 400f9f8:	010100b4 	movhi	r4,1026
 400f9fc:	18c00404 	addi	r3,r3,16
 400fa00:	10800044 	addi	r2,r2,1
 400fa04:	211bcc84 	addi	r4,r4,28466
 400fa08:	41000015 	stw	r4,0(r8)
 400fa0c:	45800115 	stw	r22,4(r8)
 400fa10:	d8c02015 	stw	r3,128(sp)
 400fa14:	d8801f15 	stw	r2,124(sp)
 400fa18:	e0bff40e 	bge	fp,r2,400f9ec <__alt_mem_onchip_memory2_0+0xfc00e76c>
 400fa1c:	d9801e04 	addi	r6,sp,120
 400fa20:	b80b883a 	mov	r5,r23
 400fa24:	8009883a 	mov	r4,r16
 400fa28:	4015f880 	call	4015f88 <__sprint_r>
 400fa2c:	103ef31e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 400fa30:	8c7ffc04 	addi	r17,r17,-16
 400fa34:	d8c02017 	ldw	r3,128(sp)
 400fa38:	d8801f17 	ldw	r2,124(sp)
 400fa3c:	da000404 	addi	r8,sp,16
 400fa40:	b47fed16 	blt	r22,r17,400f9f8 <__alt_mem_onchip_memory2_0+0xfc00e778>
 400fa44:	9021883a 	mov	r16,r18
 400fa48:	9825883a 	mov	r18,r19
 400fa4c:	8827883a 	mov	r19,r17
 400fa50:	dc403b17 	ldw	r17,236(sp)
 400fa54:	d9403517 	ldw	r5,212(sp)
 400fa58:	98c7883a 	add	r3,r19,r3
 400fa5c:	10800044 	addi	r2,r2,1
 400fa60:	41400015 	stw	r5,0(r8)
 400fa64:	44c00115 	stw	r19,4(r8)
 400fa68:	d8c02015 	stw	r3,128(sp)
 400fa6c:	d8801f15 	stw	r2,124(sp)
 400fa70:	010001c4 	movi	r4,7
 400fa74:	2082c516 	blt	r4,r2,401058c <___vfprintf_internal_r+0x13a0>
 400fa78:	df002787 	ldb	fp,158(sp)
 400fa7c:	42000204 	addi	r8,r8,8
 400fa80:	e0000c26 	beq	fp,zero,400fab4 <___vfprintf_internal_r+0x8c8>
 400fa84:	d8801f17 	ldw	r2,124(sp)
 400fa88:	d9002784 	addi	r4,sp,158
 400fa8c:	18c00044 	addi	r3,r3,1
 400fa90:	10800044 	addi	r2,r2,1
 400fa94:	41000015 	stw	r4,0(r8)
 400fa98:	01000044 	movi	r4,1
 400fa9c:	41000115 	stw	r4,4(r8)
 400faa0:	d8c02015 	stw	r3,128(sp)
 400faa4:	d8801f15 	stw	r2,124(sp)
 400faa8:	010001c4 	movi	r4,7
 400faac:	20825e16 	blt	r4,r2,4010428 <___vfprintf_internal_r+0x123c>
 400fab0:	42000204 	addi	r8,r8,8
 400fab4:	d8802c17 	ldw	r2,176(sp)
 400fab8:	10000c26 	beq	r2,zero,400faec <___vfprintf_internal_r+0x900>
 400fabc:	d8801f17 	ldw	r2,124(sp)
 400fac0:	d9002704 	addi	r4,sp,156
 400fac4:	18c00084 	addi	r3,r3,2
 400fac8:	10800044 	addi	r2,r2,1
 400facc:	41000015 	stw	r4,0(r8)
 400fad0:	01000084 	movi	r4,2
 400fad4:	41000115 	stw	r4,4(r8)
 400fad8:	d8c02015 	stw	r3,128(sp)
 400fadc:	d8801f15 	stw	r2,124(sp)
 400fae0:	010001c4 	movi	r4,7
 400fae4:	20825816 	blt	r4,r2,4010448 <___vfprintf_internal_r+0x125c>
 400fae8:	42000204 	addi	r8,r8,8
 400faec:	d9003017 	ldw	r4,192(sp)
 400faf0:	00802004 	movi	r2,128
 400faf4:	2081bb26 	beq	r4,r2,40101e4 <___vfprintf_internal_r+0xff8>
 400faf8:	d9402a17 	ldw	r5,168(sp)
 400fafc:	d8802b17 	ldw	r2,172(sp)
 400fb00:	28adc83a 	sub	r22,r5,r2
 400fb04:	0580310e 	bge	zero,r22,400fbcc <___vfprintf_internal_r+0x9e0>
 400fb08:	07000404 	movi	fp,16
 400fb0c:	d8801f17 	ldw	r2,124(sp)
 400fb10:	e584360e 	bge	fp,r22,4010bec <___vfprintf_internal_r+0x1a00>
 400fb14:	014100b4 	movhi	r5,1026
 400fb18:	295bc884 	addi	r5,r5,28450
 400fb1c:	dc402a15 	stw	r17,168(sp)
 400fb20:	d9402c15 	stw	r5,176(sp)
 400fb24:	b023883a 	mov	r17,r22
 400fb28:	04c001c4 	movi	r19,7
 400fb2c:	a82d883a 	mov	r22,r21
 400fb30:	902b883a 	mov	r21,r18
 400fb34:	8025883a 	mov	r18,r16
 400fb38:	dc002d17 	ldw	r16,180(sp)
 400fb3c:	00000306 	br	400fb4c <___vfprintf_internal_r+0x960>
 400fb40:	8c7ffc04 	addi	r17,r17,-16
 400fb44:	42000204 	addi	r8,r8,8
 400fb48:	e440110e 	bge	fp,r17,400fb90 <___vfprintf_internal_r+0x9a4>
 400fb4c:	18c00404 	addi	r3,r3,16
 400fb50:	10800044 	addi	r2,r2,1
 400fb54:	45000015 	stw	r20,0(r8)
 400fb58:	47000115 	stw	fp,4(r8)
 400fb5c:	d8c02015 	stw	r3,128(sp)
 400fb60:	d8801f15 	stw	r2,124(sp)
 400fb64:	98bff60e 	bge	r19,r2,400fb40 <__alt_mem_onchip_memory2_0+0xfc00e8c0>
 400fb68:	d9801e04 	addi	r6,sp,120
 400fb6c:	b80b883a 	mov	r5,r23
 400fb70:	8009883a 	mov	r4,r16
 400fb74:	4015f880 	call	4015f88 <__sprint_r>
 400fb78:	103ea01e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 400fb7c:	8c7ffc04 	addi	r17,r17,-16
 400fb80:	d8c02017 	ldw	r3,128(sp)
 400fb84:	d8801f17 	ldw	r2,124(sp)
 400fb88:	da000404 	addi	r8,sp,16
 400fb8c:	e47fef16 	blt	fp,r17,400fb4c <__alt_mem_onchip_memory2_0+0xfc00e8cc>
 400fb90:	9021883a 	mov	r16,r18
 400fb94:	a825883a 	mov	r18,r21
 400fb98:	b02b883a 	mov	r21,r22
 400fb9c:	882d883a 	mov	r22,r17
 400fba0:	dc402a17 	ldw	r17,168(sp)
 400fba4:	d9002c17 	ldw	r4,176(sp)
 400fba8:	1d87883a 	add	r3,r3,r22
 400fbac:	10800044 	addi	r2,r2,1
 400fbb0:	41000015 	stw	r4,0(r8)
 400fbb4:	45800115 	stw	r22,4(r8)
 400fbb8:	d8c02015 	stw	r3,128(sp)
 400fbbc:	d8801f15 	stw	r2,124(sp)
 400fbc0:	010001c4 	movi	r4,7
 400fbc4:	20821016 	blt	r4,r2,4010408 <___vfprintf_internal_r+0x121c>
 400fbc8:	42000204 	addi	r8,r8,8
 400fbcc:	9080400c 	andi	r2,r18,256
 400fbd0:	10013a1e 	bne	r2,zero,40100bc <___vfprintf_internal_r+0xed0>
 400fbd4:	d9402b17 	ldw	r5,172(sp)
 400fbd8:	d8801f17 	ldw	r2,124(sp)
 400fbdc:	44000015 	stw	r16,0(r8)
 400fbe0:	1947883a 	add	r3,r3,r5
 400fbe4:	10800044 	addi	r2,r2,1
 400fbe8:	41400115 	stw	r5,4(r8)
 400fbec:	d8c02015 	stw	r3,128(sp)
 400fbf0:	d8801f15 	stw	r2,124(sp)
 400fbf4:	010001c4 	movi	r4,7
 400fbf8:	2081f516 	blt	r4,r2,40103d0 <___vfprintf_internal_r+0x11e4>
 400fbfc:	42000204 	addi	r8,r8,8
 400fc00:	9480010c 	andi	r18,r18,4
 400fc04:	90003226 	beq	r18,zero,400fcd0 <___vfprintf_internal_r+0xae4>
 400fc08:	d9403117 	ldw	r5,196(sp)
 400fc0c:	d8802917 	ldw	r2,164(sp)
 400fc10:	28a1c83a 	sub	r16,r5,r2
 400fc14:	04002e0e 	bge	zero,r16,400fcd0 <___vfprintf_internal_r+0xae4>
 400fc18:	04400404 	movi	r17,16
 400fc1c:	d8801f17 	ldw	r2,124(sp)
 400fc20:	8c04c40e 	bge	r17,r16,4010f34 <___vfprintf_internal_r+0x1d48>
 400fc24:	014100b4 	movhi	r5,1026
 400fc28:	295bcc84 	addi	r5,r5,28466
 400fc2c:	d9403515 	stw	r5,212(sp)
 400fc30:	048001c4 	movi	r18,7
 400fc34:	dcc02d17 	ldw	r19,180(sp)
 400fc38:	00000306 	br	400fc48 <___vfprintf_internal_r+0xa5c>
 400fc3c:	843ffc04 	addi	r16,r16,-16
 400fc40:	42000204 	addi	r8,r8,8
 400fc44:	8c00130e 	bge	r17,r16,400fc94 <___vfprintf_internal_r+0xaa8>
 400fc48:	010100b4 	movhi	r4,1026
 400fc4c:	18c00404 	addi	r3,r3,16
 400fc50:	10800044 	addi	r2,r2,1
 400fc54:	211bcc84 	addi	r4,r4,28466
 400fc58:	41000015 	stw	r4,0(r8)
 400fc5c:	44400115 	stw	r17,4(r8)
 400fc60:	d8c02015 	stw	r3,128(sp)
 400fc64:	d8801f15 	stw	r2,124(sp)
 400fc68:	90bff40e 	bge	r18,r2,400fc3c <__alt_mem_onchip_memory2_0+0xfc00e9bc>
 400fc6c:	d9801e04 	addi	r6,sp,120
 400fc70:	b80b883a 	mov	r5,r23
 400fc74:	9809883a 	mov	r4,r19
 400fc78:	4015f880 	call	4015f88 <__sprint_r>
 400fc7c:	103e5f1e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 400fc80:	843ffc04 	addi	r16,r16,-16
 400fc84:	d8c02017 	ldw	r3,128(sp)
 400fc88:	d8801f17 	ldw	r2,124(sp)
 400fc8c:	da000404 	addi	r8,sp,16
 400fc90:	8c3fed16 	blt	r17,r16,400fc48 <__alt_mem_onchip_memory2_0+0xfc00e9c8>
 400fc94:	d9403517 	ldw	r5,212(sp)
 400fc98:	1c07883a 	add	r3,r3,r16
 400fc9c:	10800044 	addi	r2,r2,1
 400fca0:	41400015 	stw	r5,0(r8)
 400fca4:	44000115 	stw	r16,4(r8)
 400fca8:	d8c02015 	stw	r3,128(sp)
 400fcac:	d8801f15 	stw	r2,124(sp)
 400fcb0:	010001c4 	movi	r4,7
 400fcb4:	2080060e 	bge	r4,r2,400fcd0 <___vfprintf_internal_r+0xae4>
 400fcb8:	d9002d17 	ldw	r4,180(sp)
 400fcbc:	d9801e04 	addi	r6,sp,120
 400fcc0:	b80b883a 	mov	r5,r23
 400fcc4:	4015f880 	call	4015f88 <__sprint_r>
 400fcc8:	103e4c1e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 400fccc:	d8c02017 	ldw	r3,128(sp)
 400fcd0:	d8803117 	ldw	r2,196(sp)
 400fcd4:	d9002917 	ldw	r4,164(sp)
 400fcd8:	1100010e 	bge	r2,r4,400fce0 <___vfprintf_internal_r+0xaf4>
 400fcdc:	2005883a 	mov	r2,r4
 400fce0:	d9402f17 	ldw	r5,188(sp)
 400fce4:	288b883a 	add	r5,r5,r2
 400fce8:	d9402f15 	stw	r5,188(sp)
 400fcec:	1801c01e 	bne	r3,zero,40103f0 <___vfprintf_internal_r+0x1204>
 400fcf0:	a8800007 	ldb	r2,0(r21)
 400fcf4:	d8001f15 	stw	zero,124(sp)
 400fcf8:	da000404 	addi	r8,sp,16
 400fcfc:	103d751e 	bne	r2,zero,400f2d4 <__alt_mem_onchip_memory2_0+0xfc00e054>
 400fd00:	a823883a 	mov	r17,r21
 400fd04:	003d8b06 	br	400f334 <__alt_mem_onchip_memory2_0+0xfc00e0b4>
 400fd08:	8025883a 	mov	r18,r16
 400fd0c:	dc002903 	ldbu	r16,164(sp)
 400fd10:	e011883a 	mov	r8,fp
 400fd14:	84003fcc 	andi	r16,r16,255
 400fd18:	8005e51e 	bne	r16,zero,40114b0 <___vfprintf_internal_r+0x22c4>
 400fd1c:	94800414 	ori	r18,r18,16
 400fd20:	9080080c 	andi	r2,r18,32
 400fd24:	10022b26 	beq	r2,zero,40105d4 <___vfprintf_internal_r+0x13e8>
 400fd28:	d9002e17 	ldw	r4,184(sp)
 400fd2c:	d9402a17 	ldw	r5,168(sp)
 400fd30:	d8002785 	stb	zero,158(sp)
 400fd34:	20c00204 	addi	r3,r4,8
 400fd38:	24c00017 	ldw	r19,0(r4)
 400fd3c:	25800117 	ldw	r22,4(r4)
 400fd40:	28042e16 	blt	r5,zero,4010dfc <___vfprintf_internal_r+0x1c10>
 400fd44:	013fdfc4 	movi	r4,-129
 400fd48:	9d84b03a 	or	r2,r19,r22
 400fd4c:	d8c02e15 	stw	r3,184(sp)
 400fd50:	9124703a 	and	r18,r18,r4
 400fd54:	0039883a 	mov	fp,zero
 400fd58:	103e801e 	bne	r2,zero,400f75c <__alt_mem_onchip_memory2_0+0xfc00e4dc>
 400fd5c:	d9002a17 	ldw	r4,168(sp)
 400fd60:	2002e01e 	bne	r4,zero,40108e4 <___vfprintf_internal_r+0x16f8>
 400fd64:	d8002a15 	stw	zero,168(sp)
 400fd68:	d8002b15 	stw	zero,172(sp)
 400fd6c:	dc001e04 	addi	r16,sp,120
 400fd70:	003ef506 	br	400f948 <__alt_mem_onchip_memory2_0+0xfc00e6c8>
 400fd74:	8025883a 	mov	r18,r16
 400fd78:	dc002903 	ldbu	r16,164(sp)
 400fd7c:	e011883a 	mov	r8,fp
 400fd80:	84003fcc 	andi	r16,r16,255
 400fd84:	8005ba1e 	bne	r16,zero,4011470 <___vfprintf_internal_r+0x2284>
 400fd88:	010100b4 	movhi	r4,1026
 400fd8c:	211bbc04 	addi	r4,r4,28400
 400fd90:	d9003915 	stw	r4,228(sp)
 400fd94:	9080080c 	andi	r2,r18,32
 400fd98:	10006126 	beq	r2,zero,400ff20 <___vfprintf_internal_r+0xd34>
 400fd9c:	d9402e17 	ldw	r5,184(sp)
 400fda0:	2cc00017 	ldw	r19,0(r5)
 400fda4:	2d800117 	ldw	r22,4(r5)
 400fda8:	29400204 	addi	r5,r5,8
 400fdac:	d9402e15 	stw	r5,184(sp)
 400fdb0:	9080004c 	andi	r2,r18,1
 400fdb4:	1001ac26 	beq	r2,zero,4010468 <___vfprintf_internal_r+0x127c>
 400fdb8:	9d84b03a 	or	r2,r19,r22
 400fdbc:	10038526 	beq	r2,zero,4010bd4 <___vfprintf_internal_r+0x19e8>
 400fdc0:	d8c02a17 	ldw	r3,168(sp)
 400fdc4:	00800c04 	movi	r2,48
 400fdc8:	d8802705 	stb	r2,156(sp)
 400fdcc:	dc402745 	stb	r17,157(sp)
 400fdd0:	d8002785 	stb	zero,158(sp)
 400fdd4:	90800094 	ori	r2,r18,2
 400fdd8:	18047916 	blt	r3,zero,4010fc0 <___vfprintf_internal_r+0x1dd4>
 400fddc:	00bfdfc4 	movi	r2,-129
 400fde0:	90a4703a 	and	r18,r18,r2
 400fde4:	94800094 	ori	r18,r18,2
 400fde8:	0039883a 	mov	fp,zero
 400fdec:	d9003917 	ldw	r4,228(sp)
 400fdf0:	dc001e04 	addi	r16,sp,120
 400fdf4:	988003cc 	andi	r2,r19,15
 400fdf8:	b006973a 	slli	r3,r22,28
 400fdfc:	2085883a 	add	r2,r4,r2
 400fe00:	9826d13a 	srli	r19,r19,4
 400fe04:	10800003 	ldbu	r2,0(r2)
 400fe08:	b02cd13a 	srli	r22,r22,4
 400fe0c:	843fffc4 	addi	r16,r16,-1
 400fe10:	1ce6b03a 	or	r19,r3,r19
 400fe14:	80800005 	stb	r2,0(r16)
 400fe18:	9d84b03a 	or	r2,r19,r22
 400fe1c:	103ff51e 	bne	r2,zero,400fdf4 <__alt_mem_onchip_memory2_0+0xfc00eb74>
 400fe20:	d8c02817 	ldw	r3,160(sp)
 400fe24:	1c07c83a 	sub	r3,r3,r16
 400fe28:	d8c02b15 	stw	r3,172(sp)
 400fe2c:	003ec606 	br	400f948 <__alt_mem_onchip_memory2_0+0xfc00e6c8>
 400fe30:	8025883a 	mov	r18,r16
 400fe34:	dc002903 	ldbu	r16,164(sp)
 400fe38:	e011883a 	mov	r8,fp
 400fe3c:	84003fcc 	andi	r16,r16,255
 400fe40:	803e9626 	beq	r16,zero,400f89c <__alt_mem_onchip_memory2_0+0xfc00e61c>
 400fe44:	d8c02b03 	ldbu	r3,172(sp)
 400fe48:	d8c02785 	stb	r3,158(sp)
 400fe4c:	003e9306 	br	400f89c <__alt_mem_onchip_memory2_0+0xfc00e61c>
 400fe50:	00c00044 	movi	r3,1
 400fe54:	d8c02905 	stb	r3,164(sp)
 400fe58:	00c00ac4 	movi	r3,43
 400fe5c:	d8c02b05 	stb	r3,172(sp)
 400fe60:	ac400007 	ldb	r17,0(r21)
 400fe64:	003d4306 	br	400f374 <__alt_mem_onchip_memory2_0+0xfc00e0f4>
 400fe68:	84000814 	ori	r16,r16,32
 400fe6c:	ac400007 	ldb	r17,0(r21)
 400fe70:	003d4006 	br	400f374 <__alt_mem_onchip_memory2_0+0xfc00e0f4>
 400fe74:	d8802e17 	ldw	r2,184(sp)
 400fe78:	8025883a 	mov	r18,r16
 400fe7c:	d8002785 	stb	zero,158(sp)
 400fe80:	14000017 	ldw	r16,0(r2)
 400fe84:	e011883a 	mov	r8,fp
 400fe88:	14c00104 	addi	r19,r2,4
 400fe8c:	80042d26 	beq	r16,zero,4010f44 <___vfprintf_internal_r+0x1d58>
 400fe90:	d8c02a17 	ldw	r3,168(sp)
 400fe94:	1803e416 	blt	r3,zero,4010e28 <___vfprintf_internal_r+0x1c3c>
 400fe98:	180d883a 	mov	r6,r3
 400fe9c:	000b883a 	mov	r5,zero
 400fea0:	8009883a 	mov	r4,r16
 400fea4:	df003d15 	stw	fp,244(sp)
 400fea8:	40143180 	call	4014318 <memchr>
 400feac:	da003d17 	ldw	r8,244(sp)
 400feb0:	10046826 	beq	r2,zero,4011054 <___vfprintf_internal_r+0x1e68>
 400feb4:	1405c83a 	sub	r2,r2,r16
 400feb8:	d8802b15 	stw	r2,172(sp)
 400febc:	1003e016 	blt	r2,zero,4010e40 <___vfprintf_internal_r+0x1c54>
 400fec0:	df002783 	ldbu	fp,158(sp)
 400fec4:	d8802915 	stw	r2,164(sp)
 400fec8:	dcc02e15 	stw	r19,184(sp)
 400fecc:	d8002a15 	stw	zero,168(sp)
 400fed0:	d8003215 	stw	zero,200(sp)
 400fed4:	003ea206 	br	400f960 <__alt_mem_onchip_memory2_0+0xfc00e6e0>
 400fed8:	8025883a 	mov	r18,r16
 400fedc:	dc002903 	ldbu	r16,164(sp)
 400fee0:	e011883a 	mov	r8,fp
 400fee4:	84003fcc 	andi	r16,r16,255
 400fee8:	803f8d26 	beq	r16,zero,400fd20 <__alt_mem_onchip_memory2_0+0xfc00eaa0>
 400feec:	d8c02b03 	ldbu	r3,172(sp)
 400fef0:	d8c02785 	stb	r3,158(sp)
 400fef4:	003f8a06 	br	400fd20 <__alt_mem_onchip_memory2_0+0xfc00eaa0>
 400fef8:	8025883a 	mov	r18,r16
 400fefc:	dc002903 	ldbu	r16,164(sp)
 400ff00:	e011883a 	mov	r8,fp
 400ff04:	84003fcc 	andi	r16,r16,255
 400ff08:	8005661e 	bne	r16,zero,40114a4 <___vfprintf_internal_r+0x22b8>
 400ff0c:	010100b4 	movhi	r4,1026
 400ff10:	211bc104 	addi	r4,r4,28420
 400ff14:	d9003915 	stw	r4,228(sp)
 400ff18:	9080080c 	andi	r2,r18,32
 400ff1c:	103f9f1e 	bne	r2,zero,400fd9c <__alt_mem_onchip_memory2_0+0xfc00eb1c>
 400ff20:	9080040c 	andi	r2,r18,16
 400ff24:	1002eb26 	beq	r2,zero,4010ad4 <___vfprintf_internal_r+0x18e8>
 400ff28:	d8802e17 	ldw	r2,184(sp)
 400ff2c:	002d883a 	mov	r22,zero
 400ff30:	14c00017 	ldw	r19,0(r2)
 400ff34:	10800104 	addi	r2,r2,4
 400ff38:	d8802e15 	stw	r2,184(sp)
 400ff3c:	003f9c06 	br	400fdb0 <__alt_mem_onchip_memory2_0+0xfc00eb30>
 400ff40:	d8802b07 	ldb	r2,172(sp)
 400ff44:	1002e11e 	bne	r2,zero,4010acc <___vfprintf_internal_r+0x18e0>
 400ff48:	00c00044 	movi	r3,1
 400ff4c:	d8c02905 	stb	r3,164(sp)
 400ff50:	00c00804 	movi	r3,32
 400ff54:	d8c02b05 	stb	r3,172(sp)
 400ff58:	ac400007 	ldb	r17,0(r21)
 400ff5c:	003d0506 	br	400f374 <__alt_mem_onchip_memory2_0+0xfc00e0f4>
 400ff60:	84000054 	ori	r16,r16,1
 400ff64:	ac400007 	ldb	r17,0(r21)
 400ff68:	003d0206 	br	400f374 <__alt_mem_onchip_memory2_0+0xfc00e0f4>
 400ff6c:	8025883a 	mov	r18,r16
 400ff70:	dc002903 	ldbu	r16,164(sp)
 400ff74:	e011883a 	mov	r8,fp
 400ff78:	84003fcc 	andi	r16,r16,255
 400ff7c:	803de726 	beq	r16,zero,400f71c <__alt_mem_onchip_memory2_0+0xfc00e49c>
 400ff80:	d8c02b03 	ldbu	r3,172(sp)
 400ff84:	d8c02785 	stb	r3,158(sp)
 400ff88:	003de406 	br	400f71c <__alt_mem_onchip_memory2_0+0xfc00e49c>
 400ff8c:	84001014 	ori	r16,r16,64
 400ff90:	ac400007 	ldb	r17,0(r21)
 400ff94:	003cf706 	br	400f374 <__alt_mem_onchip_memory2_0+0xfc00e0f4>
 400ff98:	ac400007 	ldb	r17,0(r21)
 400ff9c:	00801b04 	movi	r2,108
 400ffa0:	88838f26 	beq	r17,r2,4010de0 <___vfprintf_internal_r+0x1bf4>
 400ffa4:	84000414 	ori	r16,r16,16
 400ffa8:	003cf206 	br	400f374 <__alt_mem_onchip_memory2_0+0xfc00e0f4>
 400ffac:	8025883a 	mov	r18,r16
 400ffb0:	dc002903 	ldbu	r16,164(sp)
 400ffb4:	e011883a 	mov	r8,fp
 400ffb8:	84003fcc 	andi	r16,r16,255
 400ffbc:	80053f1e 	bne	r16,zero,40114bc <___vfprintf_internal_r+0x22d0>
 400ffc0:	9080080c 	andi	r2,r18,32
 400ffc4:	1002d226 	beq	r2,zero,4010b10 <___vfprintf_internal_r+0x1924>
 400ffc8:	d9002e17 	ldw	r4,184(sp)
 400ffcc:	d9402f17 	ldw	r5,188(sp)
 400ffd0:	20800017 	ldw	r2,0(r4)
 400ffd4:	2807d7fa 	srai	r3,r5,31
 400ffd8:	21000104 	addi	r4,r4,4
 400ffdc:	d9002e15 	stw	r4,184(sp)
 400ffe0:	11400015 	stw	r5,0(r2)
 400ffe4:	10c00115 	stw	r3,4(r2)
 400ffe8:	003cb806 	br	400f2cc <__alt_mem_onchip_memory2_0+0xfc00e04c>
 400ffec:	d8c02e17 	ldw	r3,184(sp)
 400fff0:	d9002e17 	ldw	r4,184(sp)
 400fff4:	8025883a 	mov	r18,r16
 400fff8:	18800017 	ldw	r2,0(r3)
 400fffc:	21000104 	addi	r4,r4,4
 4010000:	00c00044 	movi	r3,1
 4010004:	e011883a 	mov	r8,fp
 4010008:	d8c02915 	stw	r3,164(sp)
 401000c:	d8002785 	stb	zero,158(sp)
 4010010:	d8801405 	stb	r2,80(sp)
 4010014:	d9002e15 	stw	r4,184(sp)
 4010018:	d8c02b15 	stw	r3,172(sp)
 401001c:	d8002a15 	stw	zero,168(sp)
 4010020:	d8003215 	stw	zero,200(sp)
 4010024:	dc001404 	addi	r16,sp,80
 4010028:	0039883a 	mov	fp,zero
 401002c:	003e5306 	br	400f97c <__alt_mem_onchip_memory2_0+0xfc00e6fc>
 4010030:	010100b4 	movhi	r4,1026
 4010034:	211bc104 	addi	r4,r4,28420
 4010038:	0039883a 	mov	fp,zero
 401003c:	d9003915 	stw	r4,228(sp)
 4010040:	04401e04 	movi	r17,120
 4010044:	003f6906 	br	400fdec <__alt_mem_onchip_memory2_0+0xfc00eb6c>
 4010048:	8025883a 	mov	r18,r16
 401004c:	dc002903 	ldbu	r16,164(sp)
 4010050:	e011883a 	mov	r8,fp
 4010054:	84003fcc 	andi	r16,r16,255
 4010058:	8005081e 	bne	r16,zero,401147c <___vfprintf_internal_r+0x2290>
 401005c:	883d6126 	beq	r17,zero,400f5e4 <__alt_mem_onchip_memory2_0+0xfc00e364>
 4010060:	00c00044 	movi	r3,1
 4010064:	d8c02915 	stw	r3,164(sp)
 4010068:	dc401405 	stb	r17,80(sp)
 401006c:	d8002785 	stb	zero,158(sp)
 4010070:	003fe906 	br	4010018 <__alt_mem_onchip_memory2_0+0xfc00ed98>
 4010074:	014100b4 	movhi	r5,1026
 4010078:	295bc104 	addi	r5,r5,28420
 401007c:	d9403915 	stw	r5,228(sp)
 4010080:	d8c02e15 	stw	r3,184(sp)
 4010084:	1025883a 	mov	r18,r2
 4010088:	04401e04 	movi	r17,120
 401008c:	9d84b03a 	or	r2,r19,r22
 4010090:	1000fc1e 	bne	r2,zero,4010484 <___vfprintf_internal_r+0x1298>
 4010094:	0039883a 	mov	fp,zero
 4010098:	00800084 	movi	r2,2
 401009c:	10803fcc 	andi	r2,r2,255
 40100a0:	00c00044 	movi	r3,1
 40100a4:	10c20f26 	beq	r2,r3,40108e4 <___vfprintf_internal_r+0x16f8>
 40100a8:	00c00084 	movi	r3,2
 40100ac:	10fd3326 	beq	r2,r3,400f57c <__alt_mem_onchip_memory2_0+0xfc00e2fc>
 40100b0:	003e0b06 	br	400f8e0 <__alt_mem_onchip_memory2_0+0xfc00e660>
 40100b4:	d8c02017 	ldw	r3,128(sp)
 40100b8:	003e7106 	br	400fa80 <__alt_mem_onchip_memory2_0+0xfc00e800>
 40100bc:	00801944 	movi	r2,101
 40100c0:	14407e0e 	bge	r2,r17,40102bc <___vfprintf_internal_r+0x10d0>
 40100c4:	d9003617 	ldw	r4,216(sp)
 40100c8:	d9403817 	ldw	r5,224(sp)
 40100cc:	000d883a 	mov	r6,zero
 40100d0:	000f883a 	mov	r7,zero
 40100d4:	d8c03c15 	stw	r3,240(sp)
 40100d8:	da003d15 	stw	r8,244(sp)
 40100dc:	4019d0c0 	call	4019d0c <__eqdf2>
 40100e0:	d8c03c17 	ldw	r3,240(sp)
 40100e4:	da003d17 	ldw	r8,244(sp)
 40100e8:	1000f71e 	bne	r2,zero,40104c8 <___vfprintf_internal_r+0x12dc>
 40100ec:	d8801f17 	ldw	r2,124(sp)
 40100f0:	010100b4 	movhi	r4,1026
 40100f4:	211bc804 	addi	r4,r4,28448
 40100f8:	18c00044 	addi	r3,r3,1
 40100fc:	10800044 	addi	r2,r2,1
 4010100:	41000015 	stw	r4,0(r8)
 4010104:	01000044 	movi	r4,1
 4010108:	41000115 	stw	r4,4(r8)
 401010c:	d8c02015 	stw	r3,128(sp)
 4010110:	d8801f15 	stw	r2,124(sp)
 4010114:	010001c4 	movi	r4,7
 4010118:	2082b816 	blt	r4,r2,4010bfc <___vfprintf_internal_r+0x1a10>
 401011c:	42000204 	addi	r8,r8,8
 4010120:	d8802617 	ldw	r2,152(sp)
 4010124:	d9403317 	ldw	r5,204(sp)
 4010128:	11400216 	blt	r2,r5,4010134 <___vfprintf_internal_r+0xf48>
 401012c:	9080004c 	andi	r2,r18,1
 4010130:	103eb326 	beq	r2,zero,400fc00 <__alt_mem_onchip_memory2_0+0xfc00e980>
 4010134:	d8803717 	ldw	r2,220(sp)
 4010138:	d9003417 	ldw	r4,208(sp)
 401013c:	d9403717 	ldw	r5,220(sp)
 4010140:	1887883a 	add	r3,r3,r2
 4010144:	d8801f17 	ldw	r2,124(sp)
 4010148:	41000015 	stw	r4,0(r8)
 401014c:	41400115 	stw	r5,4(r8)
 4010150:	10800044 	addi	r2,r2,1
 4010154:	d8c02015 	stw	r3,128(sp)
 4010158:	d8801f15 	stw	r2,124(sp)
 401015c:	010001c4 	movi	r4,7
 4010160:	20832916 	blt	r4,r2,4010e08 <___vfprintf_internal_r+0x1c1c>
 4010164:	42000204 	addi	r8,r8,8
 4010168:	d8803317 	ldw	r2,204(sp)
 401016c:	143fffc4 	addi	r16,r2,-1
 4010170:	043ea30e 	bge	zero,r16,400fc00 <__alt_mem_onchip_memory2_0+0xfc00e980>
 4010174:	04400404 	movi	r17,16
 4010178:	d8801f17 	ldw	r2,124(sp)
 401017c:	8c00880e 	bge	r17,r16,40103a0 <___vfprintf_internal_r+0x11b4>
 4010180:	014100b4 	movhi	r5,1026
 4010184:	295bc884 	addi	r5,r5,28450
 4010188:	d9402c15 	stw	r5,176(sp)
 401018c:	058001c4 	movi	r22,7
 4010190:	dcc02d17 	ldw	r19,180(sp)
 4010194:	00000306 	br	40101a4 <___vfprintf_internal_r+0xfb8>
 4010198:	42000204 	addi	r8,r8,8
 401019c:	843ffc04 	addi	r16,r16,-16
 40101a0:	8c00820e 	bge	r17,r16,40103ac <___vfprintf_internal_r+0x11c0>
 40101a4:	18c00404 	addi	r3,r3,16
 40101a8:	10800044 	addi	r2,r2,1
 40101ac:	45000015 	stw	r20,0(r8)
 40101b0:	44400115 	stw	r17,4(r8)
 40101b4:	d8c02015 	stw	r3,128(sp)
 40101b8:	d8801f15 	stw	r2,124(sp)
 40101bc:	b0bff60e 	bge	r22,r2,4010198 <__alt_mem_onchip_memory2_0+0xfc00ef18>
 40101c0:	d9801e04 	addi	r6,sp,120
 40101c4:	b80b883a 	mov	r5,r23
 40101c8:	9809883a 	mov	r4,r19
 40101cc:	4015f880 	call	4015f88 <__sprint_r>
 40101d0:	103d0a1e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 40101d4:	d8c02017 	ldw	r3,128(sp)
 40101d8:	d8801f17 	ldw	r2,124(sp)
 40101dc:	da000404 	addi	r8,sp,16
 40101e0:	003fee06 	br	401019c <__alt_mem_onchip_memory2_0+0xfc00ef1c>
 40101e4:	d9403117 	ldw	r5,196(sp)
 40101e8:	d8802917 	ldw	r2,164(sp)
 40101ec:	28adc83a 	sub	r22,r5,r2
 40101f0:	05be410e 	bge	zero,r22,400faf8 <__alt_mem_onchip_memory2_0+0xfc00e878>
 40101f4:	07000404 	movi	fp,16
 40101f8:	d8801f17 	ldw	r2,124(sp)
 40101fc:	e5838f0e 	bge	fp,r22,401103c <___vfprintf_internal_r+0x1e50>
 4010200:	014100b4 	movhi	r5,1026
 4010204:	295bc884 	addi	r5,r5,28450
 4010208:	dc403015 	stw	r17,192(sp)
 401020c:	d9402c15 	stw	r5,176(sp)
 4010210:	b023883a 	mov	r17,r22
 4010214:	04c001c4 	movi	r19,7
 4010218:	a82d883a 	mov	r22,r21
 401021c:	902b883a 	mov	r21,r18
 4010220:	8025883a 	mov	r18,r16
 4010224:	dc002d17 	ldw	r16,180(sp)
 4010228:	00000306 	br	4010238 <___vfprintf_internal_r+0x104c>
 401022c:	8c7ffc04 	addi	r17,r17,-16
 4010230:	42000204 	addi	r8,r8,8
 4010234:	e440110e 	bge	fp,r17,401027c <___vfprintf_internal_r+0x1090>
 4010238:	18c00404 	addi	r3,r3,16
 401023c:	10800044 	addi	r2,r2,1
 4010240:	45000015 	stw	r20,0(r8)
 4010244:	47000115 	stw	fp,4(r8)
 4010248:	d8c02015 	stw	r3,128(sp)
 401024c:	d8801f15 	stw	r2,124(sp)
 4010250:	98bff60e 	bge	r19,r2,401022c <__alt_mem_onchip_memory2_0+0xfc00efac>
 4010254:	d9801e04 	addi	r6,sp,120
 4010258:	b80b883a 	mov	r5,r23
 401025c:	8009883a 	mov	r4,r16
 4010260:	4015f880 	call	4015f88 <__sprint_r>
 4010264:	103ce51e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 4010268:	8c7ffc04 	addi	r17,r17,-16
 401026c:	d8c02017 	ldw	r3,128(sp)
 4010270:	d8801f17 	ldw	r2,124(sp)
 4010274:	da000404 	addi	r8,sp,16
 4010278:	e47fef16 	blt	fp,r17,4010238 <__alt_mem_onchip_memory2_0+0xfc00efb8>
 401027c:	9021883a 	mov	r16,r18
 4010280:	a825883a 	mov	r18,r21
 4010284:	b02b883a 	mov	r21,r22
 4010288:	882d883a 	mov	r22,r17
 401028c:	dc403017 	ldw	r17,192(sp)
 4010290:	d9002c17 	ldw	r4,176(sp)
 4010294:	1d87883a 	add	r3,r3,r22
 4010298:	10800044 	addi	r2,r2,1
 401029c:	41000015 	stw	r4,0(r8)
 40102a0:	45800115 	stw	r22,4(r8)
 40102a4:	d8c02015 	stw	r3,128(sp)
 40102a8:	d8801f15 	stw	r2,124(sp)
 40102ac:	010001c4 	movi	r4,7
 40102b0:	20818e16 	blt	r4,r2,40108ec <___vfprintf_internal_r+0x1700>
 40102b4:	42000204 	addi	r8,r8,8
 40102b8:	003e0f06 	br	400faf8 <__alt_mem_onchip_memory2_0+0xfc00e878>
 40102bc:	d9403317 	ldw	r5,204(sp)
 40102c0:	00800044 	movi	r2,1
 40102c4:	18c00044 	addi	r3,r3,1
 40102c8:	1141530e 	bge	r2,r5,4010818 <___vfprintf_internal_r+0x162c>
 40102cc:	dc401f17 	ldw	r17,124(sp)
 40102d0:	00800044 	movi	r2,1
 40102d4:	40800115 	stw	r2,4(r8)
 40102d8:	8c400044 	addi	r17,r17,1
 40102dc:	44000015 	stw	r16,0(r8)
 40102e0:	d8c02015 	stw	r3,128(sp)
 40102e4:	dc401f15 	stw	r17,124(sp)
 40102e8:	008001c4 	movi	r2,7
 40102ec:	14416b16 	blt	r2,r17,401089c <___vfprintf_internal_r+0x16b0>
 40102f0:	42000204 	addi	r8,r8,8
 40102f4:	d8803717 	ldw	r2,220(sp)
 40102f8:	d9003417 	ldw	r4,208(sp)
 40102fc:	8c400044 	addi	r17,r17,1
 4010300:	10c7883a 	add	r3,r2,r3
 4010304:	40800115 	stw	r2,4(r8)
 4010308:	41000015 	stw	r4,0(r8)
 401030c:	d8c02015 	stw	r3,128(sp)
 4010310:	dc401f15 	stw	r17,124(sp)
 4010314:	008001c4 	movi	r2,7
 4010318:	14416916 	blt	r2,r17,40108c0 <___vfprintf_internal_r+0x16d4>
 401031c:	45800204 	addi	r22,r8,8
 4010320:	d9003617 	ldw	r4,216(sp)
 4010324:	d9403817 	ldw	r5,224(sp)
 4010328:	000d883a 	mov	r6,zero
 401032c:	000f883a 	mov	r7,zero
 4010330:	d8c03c15 	stw	r3,240(sp)
 4010334:	4019d0c0 	call	4019d0c <__eqdf2>
 4010338:	d8c03c17 	ldw	r3,240(sp)
 401033c:	1000bc26 	beq	r2,zero,4010630 <___vfprintf_internal_r+0x1444>
 4010340:	d9403317 	ldw	r5,204(sp)
 4010344:	84000044 	addi	r16,r16,1
 4010348:	8c400044 	addi	r17,r17,1
 401034c:	28bfffc4 	addi	r2,r5,-1
 4010350:	1887883a 	add	r3,r3,r2
 4010354:	b0800115 	stw	r2,4(r22)
 4010358:	b4000015 	stw	r16,0(r22)
 401035c:	d8c02015 	stw	r3,128(sp)
 4010360:	dc401f15 	stw	r17,124(sp)
 4010364:	008001c4 	movi	r2,7
 4010368:	14414316 	blt	r2,r17,4010878 <___vfprintf_internal_r+0x168c>
 401036c:	b5800204 	addi	r22,r22,8
 4010370:	d9003a17 	ldw	r4,232(sp)
 4010374:	df0022c4 	addi	fp,sp,139
 4010378:	8c400044 	addi	r17,r17,1
 401037c:	20c7883a 	add	r3,r4,r3
 4010380:	b7000015 	stw	fp,0(r22)
 4010384:	b1000115 	stw	r4,4(r22)
 4010388:	d8c02015 	stw	r3,128(sp)
 401038c:	dc401f15 	stw	r17,124(sp)
 4010390:	008001c4 	movi	r2,7
 4010394:	14400e16 	blt	r2,r17,40103d0 <___vfprintf_internal_r+0x11e4>
 4010398:	b2000204 	addi	r8,r22,8
 401039c:	003e1806 	br	400fc00 <__alt_mem_onchip_memory2_0+0xfc00e980>
 40103a0:	010100b4 	movhi	r4,1026
 40103a4:	211bc884 	addi	r4,r4,28450
 40103a8:	d9002c15 	stw	r4,176(sp)
 40103ac:	d9002c17 	ldw	r4,176(sp)
 40103b0:	1c07883a 	add	r3,r3,r16
 40103b4:	44000115 	stw	r16,4(r8)
 40103b8:	41000015 	stw	r4,0(r8)
 40103bc:	10800044 	addi	r2,r2,1
 40103c0:	d8c02015 	stw	r3,128(sp)
 40103c4:	d8801f15 	stw	r2,124(sp)
 40103c8:	010001c4 	movi	r4,7
 40103cc:	20be0b0e 	bge	r4,r2,400fbfc <__alt_mem_onchip_memory2_0+0xfc00e97c>
 40103d0:	d9002d17 	ldw	r4,180(sp)
 40103d4:	d9801e04 	addi	r6,sp,120
 40103d8:	b80b883a 	mov	r5,r23
 40103dc:	4015f880 	call	4015f88 <__sprint_r>
 40103e0:	103c861e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 40103e4:	d8c02017 	ldw	r3,128(sp)
 40103e8:	da000404 	addi	r8,sp,16
 40103ec:	003e0406 	br	400fc00 <__alt_mem_onchip_memory2_0+0xfc00e980>
 40103f0:	d9002d17 	ldw	r4,180(sp)
 40103f4:	d9801e04 	addi	r6,sp,120
 40103f8:	b80b883a 	mov	r5,r23
 40103fc:	4015f880 	call	4015f88 <__sprint_r>
 4010400:	103e3b26 	beq	r2,zero,400fcf0 <__alt_mem_onchip_memory2_0+0xfc00ea70>
 4010404:	003c7d06 	br	400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 4010408:	d9002d17 	ldw	r4,180(sp)
 401040c:	d9801e04 	addi	r6,sp,120
 4010410:	b80b883a 	mov	r5,r23
 4010414:	4015f880 	call	4015f88 <__sprint_r>
 4010418:	103c781e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 401041c:	d8c02017 	ldw	r3,128(sp)
 4010420:	da000404 	addi	r8,sp,16
 4010424:	003de906 	br	400fbcc <__alt_mem_onchip_memory2_0+0xfc00e94c>
 4010428:	d9002d17 	ldw	r4,180(sp)
 401042c:	d9801e04 	addi	r6,sp,120
 4010430:	b80b883a 	mov	r5,r23
 4010434:	4015f880 	call	4015f88 <__sprint_r>
 4010438:	103c701e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 401043c:	d8c02017 	ldw	r3,128(sp)
 4010440:	da000404 	addi	r8,sp,16
 4010444:	003d9b06 	br	400fab4 <__alt_mem_onchip_memory2_0+0xfc00e834>
 4010448:	d9002d17 	ldw	r4,180(sp)
 401044c:	d9801e04 	addi	r6,sp,120
 4010450:	b80b883a 	mov	r5,r23
 4010454:	4015f880 	call	4015f88 <__sprint_r>
 4010458:	103c681e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 401045c:	d8c02017 	ldw	r3,128(sp)
 4010460:	da000404 	addi	r8,sp,16
 4010464:	003da106 	br	400faec <__alt_mem_onchip_memory2_0+0xfc00e86c>
 4010468:	d9402a17 	ldw	r5,168(sp)
 401046c:	d8002785 	stb	zero,158(sp)
 4010470:	283f0616 	blt	r5,zero,401008c <__alt_mem_onchip_memory2_0+0xfc00ee0c>
 4010474:	00ffdfc4 	movi	r3,-129
 4010478:	9d84b03a 	or	r2,r19,r22
 401047c:	90e4703a 	and	r18,r18,r3
 4010480:	103c3b26 	beq	r2,zero,400f570 <__alt_mem_onchip_memory2_0+0xfc00e2f0>
 4010484:	0039883a 	mov	fp,zero
 4010488:	003e5806 	br	400fdec <__alt_mem_onchip_memory2_0+0xfc00eb6c>
 401048c:	9080040c 	andi	r2,r18,16
 4010490:	1001b326 	beq	r2,zero,4010b60 <___vfprintf_internal_r+0x1974>
 4010494:	d8c02e17 	ldw	r3,184(sp)
 4010498:	d9002a17 	ldw	r4,168(sp)
 401049c:	d8002785 	stb	zero,158(sp)
 40104a0:	18800104 	addi	r2,r3,4
 40104a4:	1cc00017 	ldw	r19,0(r3)
 40104a8:	002d883a 	mov	r22,zero
 40104ac:	2001b516 	blt	r4,zero,4010b84 <___vfprintf_internal_r+0x1998>
 40104b0:	00ffdfc4 	movi	r3,-129
 40104b4:	d8802e15 	stw	r2,184(sp)
 40104b8:	90e4703a 	and	r18,r18,r3
 40104bc:	983d0526 	beq	r19,zero,400f8d4 <__alt_mem_onchip_memory2_0+0xfc00e654>
 40104c0:	0039883a 	mov	fp,zero
 40104c4:	003d0806 	br	400f8e8 <__alt_mem_onchip_memory2_0+0xfc00e668>
 40104c8:	dc402617 	ldw	r17,152(sp)
 40104cc:	0441d30e 	bge	zero,r17,4010c1c <___vfprintf_internal_r+0x1a30>
 40104d0:	dc403217 	ldw	r17,200(sp)
 40104d4:	d8803317 	ldw	r2,204(sp)
 40104d8:	1440010e 	bge	r2,r17,40104e0 <___vfprintf_internal_r+0x12f4>
 40104dc:	1023883a 	mov	r17,r2
 40104e0:	04400a0e 	bge	zero,r17,401050c <___vfprintf_internal_r+0x1320>
 40104e4:	d8801f17 	ldw	r2,124(sp)
 40104e8:	1c47883a 	add	r3,r3,r17
 40104ec:	44000015 	stw	r16,0(r8)
 40104f0:	10800044 	addi	r2,r2,1
 40104f4:	44400115 	stw	r17,4(r8)
 40104f8:	d8c02015 	stw	r3,128(sp)
 40104fc:	d8801f15 	stw	r2,124(sp)
 4010500:	010001c4 	movi	r4,7
 4010504:	20826516 	blt	r4,r2,4010e9c <___vfprintf_internal_r+0x1cb0>
 4010508:	42000204 	addi	r8,r8,8
 401050c:	88026116 	blt	r17,zero,4010e94 <___vfprintf_internal_r+0x1ca8>
 4010510:	d9003217 	ldw	r4,200(sp)
 4010514:	2463c83a 	sub	r17,r4,r17
 4010518:	04407b0e 	bge	zero,r17,4010708 <___vfprintf_internal_r+0x151c>
 401051c:	05800404 	movi	r22,16
 4010520:	d8801f17 	ldw	r2,124(sp)
 4010524:	b4419d0e 	bge	r22,r17,4010b9c <___vfprintf_internal_r+0x19b0>
 4010528:	010100b4 	movhi	r4,1026
 401052c:	211bc884 	addi	r4,r4,28450
 4010530:	d9002c15 	stw	r4,176(sp)
 4010534:	070001c4 	movi	fp,7
 4010538:	dcc02d17 	ldw	r19,180(sp)
 401053c:	00000306 	br	401054c <___vfprintf_internal_r+0x1360>
 4010540:	42000204 	addi	r8,r8,8
 4010544:	8c7ffc04 	addi	r17,r17,-16
 4010548:	b441970e 	bge	r22,r17,4010ba8 <___vfprintf_internal_r+0x19bc>
 401054c:	18c00404 	addi	r3,r3,16
 4010550:	10800044 	addi	r2,r2,1
 4010554:	45000015 	stw	r20,0(r8)
 4010558:	45800115 	stw	r22,4(r8)
 401055c:	d8c02015 	stw	r3,128(sp)
 4010560:	d8801f15 	stw	r2,124(sp)
 4010564:	e0bff60e 	bge	fp,r2,4010540 <__alt_mem_onchip_memory2_0+0xfc00f2c0>
 4010568:	d9801e04 	addi	r6,sp,120
 401056c:	b80b883a 	mov	r5,r23
 4010570:	9809883a 	mov	r4,r19
 4010574:	4015f880 	call	4015f88 <__sprint_r>
 4010578:	103c201e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 401057c:	d8c02017 	ldw	r3,128(sp)
 4010580:	d8801f17 	ldw	r2,124(sp)
 4010584:	da000404 	addi	r8,sp,16
 4010588:	003fee06 	br	4010544 <__alt_mem_onchip_memory2_0+0xfc00f2c4>
 401058c:	d9002d17 	ldw	r4,180(sp)
 4010590:	d9801e04 	addi	r6,sp,120
 4010594:	b80b883a 	mov	r5,r23
 4010598:	4015f880 	call	4015f88 <__sprint_r>
 401059c:	103c171e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 40105a0:	d8c02017 	ldw	r3,128(sp)
 40105a4:	df002787 	ldb	fp,158(sp)
 40105a8:	da000404 	addi	r8,sp,16
 40105ac:	003d3406 	br	400fa80 <__alt_mem_onchip_memory2_0+0xfc00e800>
 40105b0:	9080040c 	andi	r2,r18,16
 40105b4:	10016126 	beq	r2,zero,4010b3c <___vfprintf_internal_r+0x1950>
 40105b8:	d9402e17 	ldw	r5,184(sp)
 40105bc:	2cc00017 	ldw	r19,0(r5)
 40105c0:	29400104 	addi	r5,r5,4
 40105c4:	d9402e15 	stw	r5,184(sp)
 40105c8:	982dd7fa 	srai	r22,r19,31
 40105cc:	b005883a 	mov	r2,r22
 40105d0:	003c5a06 	br	400f73c <__alt_mem_onchip_memory2_0+0xfc00e4bc>
 40105d4:	9080040c 	andi	r2,r18,16
 40105d8:	10003526 	beq	r2,zero,40106b0 <___vfprintf_internal_r+0x14c4>
 40105dc:	d8c02e17 	ldw	r3,184(sp)
 40105e0:	d9002a17 	ldw	r4,168(sp)
 40105e4:	d8002785 	stb	zero,158(sp)
 40105e8:	18800104 	addi	r2,r3,4
 40105ec:	1cc00017 	ldw	r19,0(r3)
 40105f0:	002d883a 	mov	r22,zero
 40105f4:	20003716 	blt	r4,zero,40106d4 <___vfprintf_internal_r+0x14e8>
 40105f8:	00ffdfc4 	movi	r3,-129
 40105fc:	d8802e15 	stw	r2,184(sp)
 4010600:	90e4703a 	and	r18,r18,r3
 4010604:	0039883a 	mov	fp,zero
 4010608:	983dd426 	beq	r19,zero,400fd5c <__alt_mem_onchip_memory2_0+0xfc00eadc>
 401060c:	00800244 	movi	r2,9
 4010610:	14fc5336 	bltu	r2,r19,400f760 <__alt_mem_onchip_memory2_0+0xfc00e4e0>
 4010614:	d8c02817 	ldw	r3,160(sp)
 4010618:	dc001dc4 	addi	r16,sp,119
 401061c:	9cc00c04 	addi	r19,r19,48
 4010620:	1c07c83a 	sub	r3,r3,r16
 4010624:	dcc01dc5 	stb	r19,119(sp)
 4010628:	d8c02b15 	stw	r3,172(sp)
 401062c:	003cc606 	br	400f948 <__alt_mem_onchip_memory2_0+0xfc00e6c8>
 4010630:	d8803317 	ldw	r2,204(sp)
 4010634:	143fffc4 	addi	r16,r2,-1
 4010638:	043f4d0e 	bge	zero,r16,4010370 <__alt_mem_onchip_memory2_0+0xfc00f0f0>
 401063c:	07000404 	movi	fp,16
 4010640:	e400810e 	bge	fp,r16,4010848 <___vfprintf_internal_r+0x165c>
 4010644:	014100b4 	movhi	r5,1026
 4010648:	295bc884 	addi	r5,r5,28450
 401064c:	d9402c15 	stw	r5,176(sp)
 4010650:	01c001c4 	movi	r7,7
 4010654:	dcc02d17 	ldw	r19,180(sp)
 4010658:	00000306 	br	4010668 <___vfprintf_internal_r+0x147c>
 401065c:	b5800204 	addi	r22,r22,8
 4010660:	843ffc04 	addi	r16,r16,-16
 4010664:	e4007b0e 	bge	fp,r16,4010854 <___vfprintf_internal_r+0x1668>
 4010668:	18c00404 	addi	r3,r3,16
 401066c:	8c400044 	addi	r17,r17,1
 4010670:	b5000015 	stw	r20,0(r22)
 4010674:	b7000115 	stw	fp,4(r22)
 4010678:	d8c02015 	stw	r3,128(sp)
 401067c:	dc401f15 	stw	r17,124(sp)
 4010680:	3c7ff60e 	bge	r7,r17,401065c <__alt_mem_onchip_memory2_0+0xfc00f3dc>
 4010684:	d9801e04 	addi	r6,sp,120
 4010688:	b80b883a 	mov	r5,r23
 401068c:	9809883a 	mov	r4,r19
 4010690:	d9c03c15 	stw	r7,240(sp)
 4010694:	4015f880 	call	4015f88 <__sprint_r>
 4010698:	d9c03c17 	ldw	r7,240(sp)
 401069c:	103bd71e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 40106a0:	d8c02017 	ldw	r3,128(sp)
 40106a4:	dc401f17 	ldw	r17,124(sp)
 40106a8:	dd800404 	addi	r22,sp,16
 40106ac:	003fec06 	br	4010660 <__alt_mem_onchip_memory2_0+0xfc00f3e0>
 40106b0:	9080100c 	andi	r2,r18,64
 40106b4:	d8002785 	stb	zero,158(sp)
 40106b8:	10010e26 	beq	r2,zero,4010af4 <___vfprintf_internal_r+0x1908>
 40106bc:	d9402e17 	ldw	r5,184(sp)
 40106c0:	d8c02a17 	ldw	r3,168(sp)
 40106c4:	002d883a 	mov	r22,zero
 40106c8:	28800104 	addi	r2,r5,4
 40106cc:	2cc0000b 	ldhu	r19,0(r5)
 40106d0:	183fc90e 	bge	r3,zero,40105f8 <__alt_mem_onchip_memory2_0+0xfc00f378>
 40106d4:	d8802e15 	stw	r2,184(sp)
 40106d8:	0039883a 	mov	fp,zero
 40106dc:	9d84b03a 	or	r2,r19,r22
 40106e0:	103c1e1e 	bne	r2,zero,400f75c <__alt_mem_onchip_memory2_0+0xfc00e4dc>
 40106e4:	00800044 	movi	r2,1
 40106e8:	003e6c06 	br	401009c <__alt_mem_onchip_memory2_0+0xfc00ee1c>
 40106ec:	d9002d17 	ldw	r4,180(sp)
 40106f0:	d9801e04 	addi	r6,sp,120
 40106f4:	b80b883a 	mov	r5,r23
 40106f8:	4015f880 	call	4015f88 <__sprint_r>
 40106fc:	103bbf1e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 4010700:	d8c02017 	ldw	r3,128(sp)
 4010704:	da000404 	addi	r8,sp,16
 4010708:	d9003217 	ldw	r4,200(sp)
 401070c:	d8802617 	ldw	r2,152(sp)
 4010710:	d9403317 	ldw	r5,204(sp)
 4010714:	8123883a 	add	r17,r16,r4
 4010718:	11400216 	blt	r2,r5,4010724 <___vfprintf_internal_r+0x1538>
 401071c:	9100004c 	andi	r4,r18,1
 4010720:	20000d26 	beq	r4,zero,4010758 <___vfprintf_internal_r+0x156c>
 4010724:	d9003717 	ldw	r4,220(sp)
 4010728:	d9403417 	ldw	r5,208(sp)
 401072c:	1907883a 	add	r3,r3,r4
 4010730:	d9001f17 	ldw	r4,124(sp)
 4010734:	41400015 	stw	r5,0(r8)
 4010738:	d9403717 	ldw	r5,220(sp)
 401073c:	21000044 	addi	r4,r4,1
 4010740:	d8c02015 	stw	r3,128(sp)
 4010744:	41400115 	stw	r5,4(r8)
 4010748:	d9001f15 	stw	r4,124(sp)
 401074c:	014001c4 	movi	r5,7
 4010750:	2901e816 	blt	r5,r4,4010ef4 <___vfprintf_internal_r+0x1d08>
 4010754:	42000204 	addi	r8,r8,8
 4010758:	d9003317 	ldw	r4,204(sp)
 401075c:	8121883a 	add	r16,r16,r4
 4010760:	2085c83a 	sub	r2,r4,r2
 4010764:	8461c83a 	sub	r16,r16,r17
 4010768:	1400010e 	bge	r2,r16,4010770 <___vfprintf_internal_r+0x1584>
 401076c:	1021883a 	mov	r16,r2
 4010770:	04000a0e 	bge	zero,r16,401079c <___vfprintf_internal_r+0x15b0>
 4010774:	d9001f17 	ldw	r4,124(sp)
 4010778:	1c07883a 	add	r3,r3,r16
 401077c:	44400015 	stw	r17,0(r8)
 4010780:	21000044 	addi	r4,r4,1
 4010784:	44000115 	stw	r16,4(r8)
 4010788:	d8c02015 	stw	r3,128(sp)
 401078c:	d9001f15 	stw	r4,124(sp)
 4010790:	014001c4 	movi	r5,7
 4010794:	2901fb16 	blt	r5,r4,4010f84 <___vfprintf_internal_r+0x1d98>
 4010798:	42000204 	addi	r8,r8,8
 401079c:	8001f716 	blt	r16,zero,4010f7c <___vfprintf_internal_r+0x1d90>
 40107a0:	1421c83a 	sub	r16,r2,r16
 40107a4:	043d160e 	bge	zero,r16,400fc00 <__alt_mem_onchip_memory2_0+0xfc00e980>
 40107a8:	04400404 	movi	r17,16
 40107ac:	d8801f17 	ldw	r2,124(sp)
 40107b0:	8c3efb0e 	bge	r17,r16,40103a0 <__alt_mem_onchip_memory2_0+0xfc00f120>
 40107b4:	014100b4 	movhi	r5,1026
 40107b8:	295bc884 	addi	r5,r5,28450
 40107bc:	d9402c15 	stw	r5,176(sp)
 40107c0:	058001c4 	movi	r22,7
 40107c4:	dcc02d17 	ldw	r19,180(sp)
 40107c8:	00000306 	br	40107d8 <___vfprintf_internal_r+0x15ec>
 40107cc:	42000204 	addi	r8,r8,8
 40107d0:	843ffc04 	addi	r16,r16,-16
 40107d4:	8c3ef50e 	bge	r17,r16,40103ac <__alt_mem_onchip_memory2_0+0xfc00f12c>
 40107d8:	18c00404 	addi	r3,r3,16
 40107dc:	10800044 	addi	r2,r2,1
 40107e0:	45000015 	stw	r20,0(r8)
 40107e4:	44400115 	stw	r17,4(r8)
 40107e8:	d8c02015 	stw	r3,128(sp)
 40107ec:	d8801f15 	stw	r2,124(sp)
 40107f0:	b0bff60e 	bge	r22,r2,40107cc <__alt_mem_onchip_memory2_0+0xfc00f54c>
 40107f4:	d9801e04 	addi	r6,sp,120
 40107f8:	b80b883a 	mov	r5,r23
 40107fc:	9809883a 	mov	r4,r19
 4010800:	4015f880 	call	4015f88 <__sprint_r>
 4010804:	103b7d1e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 4010808:	d8c02017 	ldw	r3,128(sp)
 401080c:	d8801f17 	ldw	r2,124(sp)
 4010810:	da000404 	addi	r8,sp,16
 4010814:	003fee06 	br	40107d0 <__alt_mem_onchip_memory2_0+0xfc00f550>
 4010818:	9088703a 	and	r4,r18,r2
 401081c:	203eab1e 	bne	r4,zero,40102cc <__alt_mem_onchip_memory2_0+0xfc00f04c>
 4010820:	dc401f17 	ldw	r17,124(sp)
 4010824:	40800115 	stw	r2,4(r8)
 4010828:	44000015 	stw	r16,0(r8)
 401082c:	8c400044 	addi	r17,r17,1
 4010830:	d8c02015 	stw	r3,128(sp)
 4010834:	dc401f15 	stw	r17,124(sp)
 4010838:	008001c4 	movi	r2,7
 401083c:	14400e16 	blt	r2,r17,4010878 <___vfprintf_internal_r+0x168c>
 4010840:	45800204 	addi	r22,r8,8
 4010844:	003eca06 	br	4010370 <__alt_mem_onchip_memory2_0+0xfc00f0f0>
 4010848:	010100b4 	movhi	r4,1026
 401084c:	211bc884 	addi	r4,r4,28450
 4010850:	d9002c15 	stw	r4,176(sp)
 4010854:	d8802c17 	ldw	r2,176(sp)
 4010858:	1c07883a 	add	r3,r3,r16
 401085c:	8c400044 	addi	r17,r17,1
 4010860:	b0800015 	stw	r2,0(r22)
 4010864:	b4000115 	stw	r16,4(r22)
 4010868:	d8c02015 	stw	r3,128(sp)
 401086c:	dc401f15 	stw	r17,124(sp)
 4010870:	008001c4 	movi	r2,7
 4010874:	147ebd0e 	bge	r2,r17,401036c <__alt_mem_onchip_memory2_0+0xfc00f0ec>
 4010878:	d9002d17 	ldw	r4,180(sp)
 401087c:	d9801e04 	addi	r6,sp,120
 4010880:	b80b883a 	mov	r5,r23
 4010884:	4015f880 	call	4015f88 <__sprint_r>
 4010888:	103b5c1e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 401088c:	d8c02017 	ldw	r3,128(sp)
 4010890:	dc401f17 	ldw	r17,124(sp)
 4010894:	dd800404 	addi	r22,sp,16
 4010898:	003eb506 	br	4010370 <__alt_mem_onchip_memory2_0+0xfc00f0f0>
 401089c:	d9002d17 	ldw	r4,180(sp)
 40108a0:	d9801e04 	addi	r6,sp,120
 40108a4:	b80b883a 	mov	r5,r23
 40108a8:	4015f880 	call	4015f88 <__sprint_r>
 40108ac:	103b531e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 40108b0:	d8c02017 	ldw	r3,128(sp)
 40108b4:	dc401f17 	ldw	r17,124(sp)
 40108b8:	da000404 	addi	r8,sp,16
 40108bc:	003e8d06 	br	40102f4 <__alt_mem_onchip_memory2_0+0xfc00f074>
 40108c0:	d9002d17 	ldw	r4,180(sp)
 40108c4:	d9801e04 	addi	r6,sp,120
 40108c8:	b80b883a 	mov	r5,r23
 40108cc:	4015f880 	call	4015f88 <__sprint_r>
 40108d0:	103b4a1e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 40108d4:	d8c02017 	ldw	r3,128(sp)
 40108d8:	dc401f17 	ldw	r17,124(sp)
 40108dc:	dd800404 	addi	r22,sp,16
 40108e0:	003e8f06 	br	4010320 <__alt_mem_onchip_memory2_0+0xfc00f0a0>
 40108e4:	0027883a 	mov	r19,zero
 40108e8:	003f4a06 	br	4010614 <__alt_mem_onchip_memory2_0+0xfc00f394>
 40108ec:	d9002d17 	ldw	r4,180(sp)
 40108f0:	d9801e04 	addi	r6,sp,120
 40108f4:	b80b883a 	mov	r5,r23
 40108f8:	4015f880 	call	4015f88 <__sprint_r>
 40108fc:	103b3f1e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 4010900:	d8c02017 	ldw	r3,128(sp)
 4010904:	da000404 	addi	r8,sp,16
 4010908:	003c7b06 	br	400faf8 <__alt_mem_onchip_memory2_0+0xfc00e878>
 401090c:	d9402a17 	ldw	r5,168(sp)
 4010910:	04e7c83a 	sub	r19,zero,r19
 4010914:	07000b44 	movi	fp,45
 4010918:	9804c03a 	cmpne	r2,r19,zero
 401091c:	05adc83a 	sub	r22,zero,r22
 4010920:	df002785 	stb	fp,158(sp)
 4010924:	b0adc83a 	sub	r22,r22,r2
 4010928:	28017b16 	blt	r5,zero,4010f18 <___vfprintf_internal_r+0x1d2c>
 401092c:	00bfdfc4 	movi	r2,-129
 4010930:	90a4703a 	and	r18,r18,r2
 4010934:	003b8906 	br	400f75c <__alt_mem_onchip_memory2_0+0xfc00e4dc>
 4010938:	d9003617 	ldw	r4,216(sp)
 401093c:	d9403817 	ldw	r5,224(sp)
 4010940:	da003d15 	stw	r8,244(sp)
 4010944:	4015cdc0 	call	4015cdc <__fpclassifyd>
 4010948:	da003d17 	ldw	r8,244(sp)
 401094c:	1000f026 	beq	r2,zero,4010d10 <___vfprintf_internal_r+0x1b24>
 4010950:	d9002a17 	ldw	r4,168(sp)
 4010954:	05bff7c4 	movi	r22,-33
 4010958:	00bfffc4 	movi	r2,-1
 401095c:	8dac703a 	and	r22,r17,r22
 4010960:	20820026 	beq	r4,r2,4011164 <___vfprintf_internal_r+0x1f78>
 4010964:	008011c4 	movi	r2,71
 4010968:	b081f726 	beq	r22,r2,4011148 <___vfprintf_internal_r+0x1f5c>
 401096c:	d9003817 	ldw	r4,224(sp)
 4010970:	90c04014 	ori	r3,r18,256
 4010974:	d8c02c15 	stw	r3,176(sp)
 4010978:	20021516 	blt	r4,zero,40111d0 <___vfprintf_internal_r+0x1fe4>
 401097c:	dcc03817 	ldw	r19,224(sp)
 4010980:	d8002905 	stb	zero,164(sp)
 4010984:	00801984 	movi	r2,102
 4010988:	8881f926 	beq	r17,r2,4011170 <___vfprintf_internal_r+0x1f84>
 401098c:	00801184 	movi	r2,70
 4010990:	88821c26 	beq	r17,r2,4011204 <___vfprintf_internal_r+0x2018>
 4010994:	00801144 	movi	r2,69
 4010998:	b081ef26 	beq	r22,r2,4011158 <___vfprintf_internal_r+0x1f6c>
 401099c:	d8c02a17 	ldw	r3,168(sp)
 40109a0:	d8802104 	addi	r2,sp,132
 40109a4:	d8800315 	stw	r2,12(sp)
 40109a8:	d9403617 	ldw	r5,216(sp)
 40109ac:	d8802504 	addi	r2,sp,148
 40109b0:	d9002d17 	ldw	r4,180(sp)
 40109b4:	d8800215 	stw	r2,8(sp)
 40109b8:	d8802604 	addi	r2,sp,152
 40109bc:	d8c00015 	stw	r3,0(sp)
 40109c0:	d8800115 	stw	r2,4(sp)
 40109c4:	01c00084 	movi	r7,2
 40109c8:	980d883a 	mov	r6,r19
 40109cc:	d8c03c15 	stw	r3,240(sp)
 40109d0:	da003d15 	stw	r8,244(sp)
 40109d4:	401191c0 	call	401191c <_dtoa_r>
 40109d8:	1021883a 	mov	r16,r2
 40109dc:	008019c4 	movi	r2,103
 40109e0:	d8c03c17 	ldw	r3,240(sp)
 40109e4:	da003d17 	ldw	r8,244(sp)
 40109e8:	88817126 	beq	r17,r2,4010fb0 <___vfprintf_internal_r+0x1dc4>
 40109ec:	008011c4 	movi	r2,71
 40109f0:	88829126 	beq	r17,r2,4011438 <___vfprintf_internal_r+0x224c>
 40109f4:	80f9883a 	add	fp,r16,r3
 40109f8:	d9003617 	ldw	r4,216(sp)
 40109fc:	000d883a 	mov	r6,zero
 4010a00:	000f883a 	mov	r7,zero
 4010a04:	980b883a 	mov	r5,r19
 4010a08:	da003d15 	stw	r8,244(sp)
 4010a0c:	4019d0c0 	call	4019d0c <__eqdf2>
 4010a10:	da003d17 	ldw	r8,244(sp)
 4010a14:	10018d26 	beq	r2,zero,401104c <___vfprintf_internal_r+0x1e60>
 4010a18:	d8802117 	ldw	r2,132(sp)
 4010a1c:	1700062e 	bgeu	r2,fp,4010a38 <___vfprintf_internal_r+0x184c>
 4010a20:	01000c04 	movi	r4,48
 4010a24:	10c00044 	addi	r3,r2,1
 4010a28:	d8c02115 	stw	r3,132(sp)
 4010a2c:	11000005 	stb	r4,0(r2)
 4010a30:	d8802117 	ldw	r2,132(sp)
 4010a34:	173ffb36 	bltu	r2,fp,4010a24 <__alt_mem_onchip_memory2_0+0xfc00f7a4>
 4010a38:	1405c83a 	sub	r2,r2,r16
 4010a3c:	d8803315 	stw	r2,204(sp)
 4010a40:	008011c4 	movi	r2,71
 4010a44:	b0817626 	beq	r22,r2,4011020 <___vfprintf_internal_r+0x1e34>
 4010a48:	00801944 	movi	r2,101
 4010a4c:	1442800e 	bge	r2,r17,4011450 <___vfprintf_internal_r+0x2264>
 4010a50:	d8c02617 	ldw	r3,152(sp)
 4010a54:	00801984 	movi	r2,102
 4010a58:	d8c03215 	stw	r3,200(sp)
 4010a5c:	8881fe26 	beq	r17,r2,4011258 <___vfprintf_internal_r+0x206c>
 4010a60:	d8c03217 	ldw	r3,200(sp)
 4010a64:	d9003317 	ldw	r4,204(sp)
 4010a68:	1901dd16 	blt	r3,r4,40111e0 <___vfprintf_internal_r+0x1ff4>
 4010a6c:	9480004c 	andi	r18,r18,1
 4010a70:	90022b1e 	bne	r18,zero,4011320 <___vfprintf_internal_r+0x2134>
 4010a74:	1805883a 	mov	r2,r3
 4010a78:	18028316 	blt	r3,zero,4011488 <___vfprintf_internal_r+0x229c>
 4010a7c:	d8c03217 	ldw	r3,200(sp)
 4010a80:	044019c4 	movi	r17,103
 4010a84:	d8c02b15 	stw	r3,172(sp)
 4010a88:	df002907 	ldb	fp,164(sp)
 4010a8c:	e001531e 	bne	fp,zero,4010fdc <___vfprintf_internal_r+0x1df0>
 4010a90:	df002783 	ldbu	fp,158(sp)
 4010a94:	d8802915 	stw	r2,164(sp)
 4010a98:	dc802c17 	ldw	r18,176(sp)
 4010a9c:	d8002a15 	stw	zero,168(sp)
 4010aa0:	003baf06 	br	400f960 <__alt_mem_onchip_memory2_0+0xfc00e6e0>
 4010aa4:	d8c02e17 	ldw	r3,184(sp)
 4010aa8:	d9002e17 	ldw	r4,184(sp)
 4010aac:	d9402e17 	ldw	r5,184(sp)
 4010ab0:	18c00017 	ldw	r3,0(r3)
 4010ab4:	21000117 	ldw	r4,4(r4)
 4010ab8:	29400204 	addi	r5,r5,8
 4010abc:	d8c03615 	stw	r3,216(sp)
 4010ac0:	d9003815 	stw	r4,224(sp)
 4010ac4:	d9402e15 	stw	r5,184(sp)
 4010ac8:	003b5006 	br	400f80c <__alt_mem_onchip_memory2_0+0xfc00e58c>
 4010acc:	ac400007 	ldb	r17,0(r21)
 4010ad0:	003a2806 	br	400f374 <__alt_mem_onchip_memory2_0+0xfc00e0f4>
 4010ad4:	9080100c 	andi	r2,r18,64
 4010ad8:	1000a826 	beq	r2,zero,4010d7c <___vfprintf_internal_r+0x1b90>
 4010adc:	d8c02e17 	ldw	r3,184(sp)
 4010ae0:	002d883a 	mov	r22,zero
 4010ae4:	1cc0000b 	ldhu	r19,0(r3)
 4010ae8:	18c00104 	addi	r3,r3,4
 4010aec:	d8c02e15 	stw	r3,184(sp)
 4010af0:	003caf06 	br	400fdb0 <__alt_mem_onchip_memory2_0+0xfc00eb30>
 4010af4:	d9002e17 	ldw	r4,184(sp)
 4010af8:	d9402a17 	ldw	r5,168(sp)
 4010afc:	002d883a 	mov	r22,zero
 4010b00:	20800104 	addi	r2,r4,4
 4010b04:	24c00017 	ldw	r19,0(r4)
 4010b08:	283ebb0e 	bge	r5,zero,40105f8 <__alt_mem_onchip_memory2_0+0xfc00f378>
 4010b0c:	003ef106 	br	40106d4 <__alt_mem_onchip_memory2_0+0xfc00f454>
 4010b10:	9080040c 	andi	r2,r18,16
 4010b14:	1000921e 	bne	r2,zero,4010d60 <___vfprintf_internal_r+0x1b74>
 4010b18:	9480100c 	andi	r18,r18,64
 4010b1c:	90013926 	beq	r18,zero,4011004 <___vfprintf_internal_r+0x1e18>
 4010b20:	d9402e17 	ldw	r5,184(sp)
 4010b24:	d8c02f17 	ldw	r3,188(sp)
 4010b28:	28800017 	ldw	r2,0(r5)
 4010b2c:	29400104 	addi	r5,r5,4
 4010b30:	d9402e15 	stw	r5,184(sp)
 4010b34:	10c0000d 	sth	r3,0(r2)
 4010b38:	0039e406 	br	400f2cc <__alt_mem_onchip_memory2_0+0xfc00e04c>
 4010b3c:	9080100c 	andi	r2,r18,64
 4010b40:	10008026 	beq	r2,zero,4010d44 <___vfprintf_internal_r+0x1b58>
 4010b44:	d8802e17 	ldw	r2,184(sp)
 4010b48:	14c0000f 	ldh	r19,0(r2)
 4010b4c:	10800104 	addi	r2,r2,4
 4010b50:	d8802e15 	stw	r2,184(sp)
 4010b54:	982dd7fa 	srai	r22,r19,31
 4010b58:	b005883a 	mov	r2,r22
 4010b5c:	003af706 	br	400f73c <__alt_mem_onchip_memory2_0+0xfc00e4bc>
 4010b60:	9080100c 	andi	r2,r18,64
 4010b64:	d8002785 	stb	zero,158(sp)
 4010b68:	10008a1e 	bne	r2,zero,4010d94 <___vfprintf_internal_r+0x1ba8>
 4010b6c:	d9002e17 	ldw	r4,184(sp)
 4010b70:	d9402a17 	ldw	r5,168(sp)
 4010b74:	002d883a 	mov	r22,zero
 4010b78:	20800104 	addi	r2,r4,4
 4010b7c:	24c00017 	ldw	r19,0(r4)
 4010b80:	283e4b0e 	bge	r5,zero,40104b0 <__alt_mem_onchip_memory2_0+0xfc00f230>
 4010b84:	9d86b03a 	or	r3,r19,r22
 4010b88:	d8802e15 	stw	r2,184(sp)
 4010b8c:	183e4c1e 	bne	r3,zero,40104c0 <__alt_mem_onchip_memory2_0+0xfc00f240>
 4010b90:	0039883a 	mov	fp,zero
 4010b94:	0005883a 	mov	r2,zero
 4010b98:	003d4006 	br	401009c <__alt_mem_onchip_memory2_0+0xfc00ee1c>
 4010b9c:	014100b4 	movhi	r5,1026
 4010ba0:	295bc884 	addi	r5,r5,28450
 4010ba4:	d9402c15 	stw	r5,176(sp)
 4010ba8:	d9402c17 	ldw	r5,176(sp)
 4010bac:	1c47883a 	add	r3,r3,r17
 4010bb0:	10800044 	addi	r2,r2,1
 4010bb4:	41400015 	stw	r5,0(r8)
 4010bb8:	44400115 	stw	r17,4(r8)
 4010bbc:	d8c02015 	stw	r3,128(sp)
 4010bc0:	d8801f15 	stw	r2,124(sp)
 4010bc4:	010001c4 	movi	r4,7
 4010bc8:	20bec816 	blt	r4,r2,40106ec <__alt_mem_onchip_memory2_0+0xfc00f46c>
 4010bcc:	42000204 	addi	r8,r8,8
 4010bd0:	003ecd06 	br	4010708 <__alt_mem_onchip_memory2_0+0xfc00f488>
 4010bd4:	d9002a17 	ldw	r4,168(sp)
 4010bd8:	d8002785 	stb	zero,158(sp)
 4010bdc:	203d2d16 	blt	r4,zero,4010094 <__alt_mem_onchip_memory2_0+0xfc00ee14>
 4010be0:	00bfdfc4 	movi	r2,-129
 4010be4:	90a4703a 	and	r18,r18,r2
 4010be8:	003a6106 	br	400f570 <__alt_mem_onchip_memory2_0+0xfc00e2f0>
 4010bec:	010100b4 	movhi	r4,1026
 4010bf0:	211bc884 	addi	r4,r4,28450
 4010bf4:	d9002c15 	stw	r4,176(sp)
 4010bf8:	003bea06 	br	400fba4 <__alt_mem_onchip_memory2_0+0xfc00e924>
 4010bfc:	d9002d17 	ldw	r4,180(sp)
 4010c00:	d9801e04 	addi	r6,sp,120
 4010c04:	b80b883a 	mov	r5,r23
 4010c08:	4015f880 	call	4015f88 <__sprint_r>
 4010c0c:	103a7b1e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 4010c10:	d8c02017 	ldw	r3,128(sp)
 4010c14:	da000404 	addi	r8,sp,16
 4010c18:	003d4106 	br	4010120 <__alt_mem_onchip_memory2_0+0xfc00eea0>
 4010c1c:	d8801f17 	ldw	r2,124(sp)
 4010c20:	014100b4 	movhi	r5,1026
 4010c24:	01000044 	movi	r4,1
 4010c28:	18c00044 	addi	r3,r3,1
 4010c2c:	10800044 	addi	r2,r2,1
 4010c30:	295bc804 	addi	r5,r5,28448
 4010c34:	41000115 	stw	r4,4(r8)
 4010c38:	41400015 	stw	r5,0(r8)
 4010c3c:	d8c02015 	stw	r3,128(sp)
 4010c40:	d8801f15 	stw	r2,124(sp)
 4010c44:	010001c4 	movi	r4,7
 4010c48:	20805c16 	blt	r4,r2,4010dbc <___vfprintf_internal_r+0x1bd0>
 4010c4c:	42000204 	addi	r8,r8,8
 4010c50:	8800041e 	bne	r17,zero,4010c64 <___vfprintf_internal_r+0x1a78>
 4010c54:	d8803317 	ldw	r2,204(sp)
 4010c58:	1000021e 	bne	r2,zero,4010c64 <___vfprintf_internal_r+0x1a78>
 4010c5c:	9080004c 	andi	r2,r18,1
 4010c60:	103be726 	beq	r2,zero,400fc00 <__alt_mem_onchip_memory2_0+0xfc00e980>
 4010c64:	d9003717 	ldw	r4,220(sp)
 4010c68:	d8801f17 	ldw	r2,124(sp)
 4010c6c:	d9403417 	ldw	r5,208(sp)
 4010c70:	20c7883a 	add	r3,r4,r3
 4010c74:	10800044 	addi	r2,r2,1
 4010c78:	41000115 	stw	r4,4(r8)
 4010c7c:	41400015 	stw	r5,0(r8)
 4010c80:	d8c02015 	stw	r3,128(sp)
 4010c84:	d8801f15 	stw	r2,124(sp)
 4010c88:	010001c4 	movi	r4,7
 4010c8c:	20812116 	blt	r4,r2,4011114 <___vfprintf_internal_r+0x1f28>
 4010c90:	42000204 	addi	r8,r8,8
 4010c94:	0463c83a 	sub	r17,zero,r17
 4010c98:	0440730e 	bge	zero,r17,4010e68 <___vfprintf_internal_r+0x1c7c>
 4010c9c:	05800404 	movi	r22,16
 4010ca0:	b440860e 	bge	r22,r17,4010ebc <___vfprintf_internal_r+0x1cd0>
 4010ca4:	014100b4 	movhi	r5,1026
 4010ca8:	295bc884 	addi	r5,r5,28450
 4010cac:	d9402c15 	stw	r5,176(sp)
 4010cb0:	070001c4 	movi	fp,7
 4010cb4:	dcc02d17 	ldw	r19,180(sp)
 4010cb8:	00000306 	br	4010cc8 <___vfprintf_internal_r+0x1adc>
 4010cbc:	42000204 	addi	r8,r8,8
 4010cc0:	8c7ffc04 	addi	r17,r17,-16
 4010cc4:	b440800e 	bge	r22,r17,4010ec8 <___vfprintf_internal_r+0x1cdc>
 4010cc8:	18c00404 	addi	r3,r3,16
 4010ccc:	10800044 	addi	r2,r2,1
 4010cd0:	45000015 	stw	r20,0(r8)
 4010cd4:	45800115 	stw	r22,4(r8)
 4010cd8:	d8c02015 	stw	r3,128(sp)
 4010cdc:	d8801f15 	stw	r2,124(sp)
 4010ce0:	e0bff60e 	bge	fp,r2,4010cbc <__alt_mem_onchip_memory2_0+0xfc00fa3c>
 4010ce4:	d9801e04 	addi	r6,sp,120
 4010ce8:	b80b883a 	mov	r5,r23
 4010cec:	9809883a 	mov	r4,r19
 4010cf0:	4015f880 	call	4015f88 <__sprint_r>
 4010cf4:	103a411e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 4010cf8:	d8c02017 	ldw	r3,128(sp)
 4010cfc:	d8801f17 	ldw	r2,124(sp)
 4010d00:	da000404 	addi	r8,sp,16
 4010d04:	003fee06 	br	4010cc0 <__alt_mem_onchip_memory2_0+0xfc00fa40>
 4010d08:	00bfffc4 	movi	r2,-1
 4010d0c:	003a3f06 	br	400f60c <__alt_mem_onchip_memory2_0+0xfc00e38c>
 4010d10:	008011c4 	movi	r2,71
 4010d14:	1440b816 	blt	r2,r17,4010ff8 <___vfprintf_internal_r+0x1e0c>
 4010d18:	040100b4 	movhi	r16,1026
 4010d1c:	841bba04 	addi	r16,r16,28392
 4010d20:	00c000c4 	movi	r3,3
 4010d24:	00bfdfc4 	movi	r2,-129
 4010d28:	d8c02915 	stw	r3,164(sp)
 4010d2c:	90a4703a 	and	r18,r18,r2
 4010d30:	df002783 	ldbu	fp,158(sp)
 4010d34:	d8c02b15 	stw	r3,172(sp)
 4010d38:	d8002a15 	stw	zero,168(sp)
 4010d3c:	d8003215 	stw	zero,200(sp)
 4010d40:	003b0706 	br	400f960 <__alt_mem_onchip_memory2_0+0xfc00e6e0>
 4010d44:	d8c02e17 	ldw	r3,184(sp)
 4010d48:	1cc00017 	ldw	r19,0(r3)
 4010d4c:	18c00104 	addi	r3,r3,4
 4010d50:	d8c02e15 	stw	r3,184(sp)
 4010d54:	982dd7fa 	srai	r22,r19,31
 4010d58:	b005883a 	mov	r2,r22
 4010d5c:	003a7706 	br	400f73c <__alt_mem_onchip_memory2_0+0xfc00e4bc>
 4010d60:	d8c02e17 	ldw	r3,184(sp)
 4010d64:	d9002f17 	ldw	r4,188(sp)
 4010d68:	18800017 	ldw	r2,0(r3)
 4010d6c:	18c00104 	addi	r3,r3,4
 4010d70:	d8c02e15 	stw	r3,184(sp)
 4010d74:	11000015 	stw	r4,0(r2)
 4010d78:	00395406 	br	400f2cc <__alt_mem_onchip_memory2_0+0xfc00e04c>
 4010d7c:	d9002e17 	ldw	r4,184(sp)
 4010d80:	002d883a 	mov	r22,zero
 4010d84:	24c00017 	ldw	r19,0(r4)
 4010d88:	21000104 	addi	r4,r4,4
 4010d8c:	d9002e15 	stw	r4,184(sp)
 4010d90:	003c0706 	br	400fdb0 <__alt_mem_onchip_memory2_0+0xfc00eb30>
 4010d94:	d9402e17 	ldw	r5,184(sp)
 4010d98:	d8c02a17 	ldw	r3,168(sp)
 4010d9c:	002d883a 	mov	r22,zero
 4010da0:	28800104 	addi	r2,r5,4
 4010da4:	2cc0000b 	ldhu	r19,0(r5)
 4010da8:	183dc10e 	bge	r3,zero,40104b0 <__alt_mem_onchip_memory2_0+0xfc00f230>
 4010dac:	003f7506 	br	4010b84 <__alt_mem_onchip_memory2_0+0xfc00f904>
 4010db0:	040100b4 	movhi	r16,1026
 4010db4:	841bb804 	addi	r16,r16,28384
 4010db8:	003aa706 	br	400f858 <__alt_mem_onchip_memory2_0+0xfc00e5d8>
 4010dbc:	d9002d17 	ldw	r4,180(sp)
 4010dc0:	d9801e04 	addi	r6,sp,120
 4010dc4:	b80b883a 	mov	r5,r23
 4010dc8:	4015f880 	call	4015f88 <__sprint_r>
 4010dcc:	103a0b1e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 4010dd0:	dc402617 	ldw	r17,152(sp)
 4010dd4:	d8c02017 	ldw	r3,128(sp)
 4010dd8:	da000404 	addi	r8,sp,16
 4010ddc:	003f9c06 	br	4010c50 <__alt_mem_onchip_memory2_0+0xfc00f9d0>
 4010de0:	ac400043 	ldbu	r17,1(r21)
 4010de4:	84000814 	ori	r16,r16,32
 4010de8:	ad400044 	addi	r21,r21,1
 4010dec:	8c403fcc 	andi	r17,r17,255
 4010df0:	8c40201c 	xori	r17,r17,128
 4010df4:	8c7fe004 	addi	r17,r17,-128
 4010df8:	00395e06 	br	400f374 <__alt_mem_onchip_memory2_0+0xfc00e0f4>
 4010dfc:	d8c02e15 	stw	r3,184(sp)
 4010e00:	0039883a 	mov	fp,zero
 4010e04:	003e3506 	br	40106dc <__alt_mem_onchip_memory2_0+0xfc00f45c>
 4010e08:	d9002d17 	ldw	r4,180(sp)
 4010e0c:	d9801e04 	addi	r6,sp,120
 4010e10:	b80b883a 	mov	r5,r23
 4010e14:	4015f880 	call	4015f88 <__sprint_r>
 4010e18:	1039f81e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 4010e1c:	d8c02017 	ldw	r3,128(sp)
 4010e20:	da000404 	addi	r8,sp,16
 4010e24:	003cd006 	br	4010168 <__alt_mem_onchip_memory2_0+0xfc00eee8>
 4010e28:	8009883a 	mov	r4,r16
 4010e2c:	df003d15 	stw	fp,244(sp)
 4010e30:	400f14c0 	call	400f14c <strlen>
 4010e34:	d8802b15 	stw	r2,172(sp)
 4010e38:	da003d17 	ldw	r8,244(sp)
 4010e3c:	103c200e 	bge	r2,zero,400fec0 <__alt_mem_onchip_memory2_0+0xfc00ec40>
 4010e40:	0005883a 	mov	r2,zero
 4010e44:	003c1e06 	br	400fec0 <__alt_mem_onchip_memory2_0+0xfc00ec40>
 4010e48:	d9002d17 	ldw	r4,180(sp)
 4010e4c:	d9801e04 	addi	r6,sp,120
 4010e50:	b80b883a 	mov	r5,r23
 4010e54:	4015f880 	call	4015f88 <__sprint_r>
 4010e58:	1039e81e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 4010e5c:	d8c02017 	ldw	r3,128(sp)
 4010e60:	d8801f17 	ldw	r2,124(sp)
 4010e64:	da000404 	addi	r8,sp,16
 4010e68:	d9403317 	ldw	r5,204(sp)
 4010e6c:	10800044 	addi	r2,r2,1
 4010e70:	44000015 	stw	r16,0(r8)
 4010e74:	28c7883a 	add	r3,r5,r3
 4010e78:	003b5b06 	br	400fbe8 <__alt_mem_onchip_memory2_0+0xfc00e968>
 4010e7c:	010100b4 	movhi	r4,1026
 4010e80:	211bcc84 	addi	r4,r4,28466
 4010e84:	d9003515 	stw	r4,212(sp)
 4010e88:	003af206 	br	400fa54 <__alt_mem_onchip_memory2_0+0xfc00e7d4>
 4010e8c:	013fffc4 	movi	r4,-1
 4010e90:	003a0806 	br	400f6b4 <__alt_mem_onchip_memory2_0+0xfc00e434>
 4010e94:	0023883a 	mov	r17,zero
 4010e98:	003d9d06 	br	4010510 <__alt_mem_onchip_memory2_0+0xfc00f290>
 4010e9c:	d9002d17 	ldw	r4,180(sp)
 4010ea0:	d9801e04 	addi	r6,sp,120
 4010ea4:	b80b883a 	mov	r5,r23
 4010ea8:	4015f880 	call	4015f88 <__sprint_r>
 4010eac:	1039d31e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 4010eb0:	d8c02017 	ldw	r3,128(sp)
 4010eb4:	da000404 	addi	r8,sp,16
 4010eb8:	003d9406 	br	401050c <__alt_mem_onchip_memory2_0+0xfc00f28c>
 4010ebc:	010100b4 	movhi	r4,1026
 4010ec0:	211bc884 	addi	r4,r4,28450
 4010ec4:	d9002c15 	stw	r4,176(sp)
 4010ec8:	d9002c17 	ldw	r4,176(sp)
 4010ecc:	1c47883a 	add	r3,r3,r17
 4010ed0:	10800044 	addi	r2,r2,1
 4010ed4:	41000015 	stw	r4,0(r8)
 4010ed8:	44400115 	stw	r17,4(r8)
 4010edc:	d8c02015 	stw	r3,128(sp)
 4010ee0:	d8801f15 	stw	r2,124(sp)
 4010ee4:	010001c4 	movi	r4,7
 4010ee8:	20bfd716 	blt	r4,r2,4010e48 <__alt_mem_onchip_memory2_0+0xfc00fbc8>
 4010eec:	42000204 	addi	r8,r8,8
 4010ef0:	003fdd06 	br	4010e68 <__alt_mem_onchip_memory2_0+0xfc00fbe8>
 4010ef4:	d9002d17 	ldw	r4,180(sp)
 4010ef8:	d9801e04 	addi	r6,sp,120
 4010efc:	b80b883a 	mov	r5,r23
 4010f00:	4015f880 	call	4015f88 <__sprint_r>
 4010f04:	1039bd1e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 4010f08:	d8802617 	ldw	r2,152(sp)
 4010f0c:	d8c02017 	ldw	r3,128(sp)
 4010f10:	da000404 	addi	r8,sp,16
 4010f14:	003e1006 	br	4010758 <__alt_mem_onchip_memory2_0+0xfc00f4d8>
 4010f18:	00800044 	movi	r2,1
 4010f1c:	10803fcc 	andi	r2,r2,255
 4010f20:	00c00044 	movi	r3,1
 4010f24:	10fa0d26 	beq	r2,r3,400f75c <__alt_mem_onchip_memory2_0+0xfc00e4dc>
 4010f28:	00c00084 	movi	r3,2
 4010f2c:	10fbaf26 	beq	r2,r3,400fdec <__alt_mem_onchip_memory2_0+0xfc00eb6c>
 4010f30:	003a6d06 	br	400f8e8 <__alt_mem_onchip_memory2_0+0xfc00e668>
 4010f34:	010100b4 	movhi	r4,1026
 4010f38:	211bcc84 	addi	r4,r4,28466
 4010f3c:	d9003515 	stw	r4,212(sp)
 4010f40:	003b5406 	br	400fc94 <__alt_mem_onchip_memory2_0+0xfc00ea14>
 4010f44:	d8802a17 	ldw	r2,168(sp)
 4010f48:	00c00184 	movi	r3,6
 4010f4c:	1880012e 	bgeu	r3,r2,4010f54 <___vfprintf_internal_r+0x1d68>
 4010f50:	1805883a 	mov	r2,r3
 4010f54:	d8802b15 	stw	r2,172(sp)
 4010f58:	1000ef16 	blt	r2,zero,4011318 <___vfprintf_internal_r+0x212c>
 4010f5c:	040100b4 	movhi	r16,1026
 4010f60:	d8802915 	stw	r2,164(sp)
 4010f64:	dcc02e15 	stw	r19,184(sp)
 4010f68:	d8002a15 	stw	zero,168(sp)
 4010f6c:	d8003215 	stw	zero,200(sp)
 4010f70:	841bc604 	addi	r16,r16,28440
 4010f74:	0039883a 	mov	fp,zero
 4010f78:	003a8006 	br	400f97c <__alt_mem_onchip_memory2_0+0xfc00e6fc>
 4010f7c:	0021883a 	mov	r16,zero
 4010f80:	003e0706 	br	40107a0 <__alt_mem_onchip_memory2_0+0xfc00f520>
 4010f84:	d9002d17 	ldw	r4,180(sp)
 4010f88:	d9801e04 	addi	r6,sp,120
 4010f8c:	b80b883a 	mov	r5,r23
 4010f90:	4015f880 	call	4015f88 <__sprint_r>
 4010f94:	1039991e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 4010f98:	d8802617 	ldw	r2,152(sp)
 4010f9c:	d9403317 	ldw	r5,204(sp)
 4010fa0:	d8c02017 	ldw	r3,128(sp)
 4010fa4:	da000404 	addi	r8,sp,16
 4010fa8:	2885c83a 	sub	r2,r5,r2
 4010fac:	003dfb06 	br	401079c <__alt_mem_onchip_memory2_0+0xfc00f51c>
 4010fb0:	9080004c 	andi	r2,r18,1
 4010fb4:	103e8f1e 	bne	r2,zero,40109f4 <__alt_mem_onchip_memory2_0+0xfc00f774>
 4010fb8:	d8802117 	ldw	r2,132(sp)
 4010fbc:	003e9e06 	br	4010a38 <__alt_mem_onchip_memory2_0+0xfc00f7b8>
 4010fc0:	1025883a 	mov	r18,r2
 4010fc4:	0039883a 	mov	fp,zero
 4010fc8:	00800084 	movi	r2,2
 4010fcc:	003fd306 	br	4010f1c <__alt_mem_onchip_memory2_0+0xfc00fc9c>
 4010fd0:	07000b44 	movi	fp,45
 4010fd4:	df002785 	stb	fp,158(sp)
 4010fd8:	003a1b06 	br	400f848 <__alt_mem_onchip_memory2_0+0xfc00e5c8>
 4010fdc:	00c00b44 	movi	r3,45
 4010fe0:	d8c02785 	stb	r3,158(sp)
 4010fe4:	d8802915 	stw	r2,164(sp)
 4010fe8:	dc802c17 	ldw	r18,176(sp)
 4010fec:	d8002a15 	stw	zero,168(sp)
 4010ff0:	07000b44 	movi	fp,45
 4010ff4:	003a5e06 	br	400f970 <__alt_mem_onchip_memory2_0+0xfc00e6f0>
 4010ff8:	040100b4 	movhi	r16,1026
 4010ffc:	841bbb04 	addi	r16,r16,28396
 4011000:	003f4706 	br	4010d20 <__alt_mem_onchip_memory2_0+0xfc00faa0>
 4011004:	d9002e17 	ldw	r4,184(sp)
 4011008:	d9402f17 	ldw	r5,188(sp)
 401100c:	20800017 	ldw	r2,0(r4)
 4011010:	21000104 	addi	r4,r4,4
 4011014:	d9002e15 	stw	r4,184(sp)
 4011018:	11400015 	stw	r5,0(r2)
 401101c:	0038ab06 	br	400f2cc <__alt_mem_onchip_memory2_0+0xfc00e04c>
 4011020:	dd802617 	ldw	r22,152(sp)
 4011024:	00bfff44 	movi	r2,-3
 4011028:	b0801c16 	blt	r22,r2,401109c <___vfprintf_internal_r+0x1eb0>
 401102c:	d9402a17 	ldw	r5,168(sp)
 4011030:	2d801a16 	blt	r5,r22,401109c <___vfprintf_internal_r+0x1eb0>
 4011034:	dd803215 	stw	r22,200(sp)
 4011038:	003e8906 	br	4010a60 <__alt_mem_onchip_memory2_0+0xfc00f7e0>
 401103c:	010100b4 	movhi	r4,1026
 4011040:	211bc884 	addi	r4,r4,28450
 4011044:	d9002c15 	stw	r4,176(sp)
 4011048:	003c9106 	br	4010290 <__alt_mem_onchip_memory2_0+0xfc00f010>
 401104c:	e005883a 	mov	r2,fp
 4011050:	003e7906 	br	4010a38 <__alt_mem_onchip_memory2_0+0xfc00f7b8>
 4011054:	d9002a17 	ldw	r4,168(sp)
 4011058:	df002783 	ldbu	fp,158(sp)
 401105c:	dcc02e15 	stw	r19,184(sp)
 4011060:	d9002915 	stw	r4,164(sp)
 4011064:	d9002b15 	stw	r4,172(sp)
 4011068:	d8002a15 	stw	zero,168(sp)
 401106c:	d8003215 	stw	zero,200(sp)
 4011070:	003a3b06 	br	400f960 <__alt_mem_onchip_memory2_0+0xfc00e6e0>
 4011074:	9080004c 	andi	r2,r18,1
 4011078:	0039883a 	mov	fp,zero
 401107c:	10000426 	beq	r2,zero,4011090 <___vfprintf_internal_r+0x1ea4>
 4011080:	00800c04 	movi	r2,48
 4011084:	dc001dc4 	addi	r16,sp,119
 4011088:	d8801dc5 	stb	r2,119(sp)
 401108c:	003b6406 	br	400fe20 <__alt_mem_onchip_memory2_0+0xfc00eba0>
 4011090:	d8002b15 	stw	zero,172(sp)
 4011094:	dc001e04 	addi	r16,sp,120
 4011098:	003a2b06 	br	400f948 <__alt_mem_onchip_memory2_0+0xfc00e6c8>
 401109c:	8c7fff84 	addi	r17,r17,-2
 40110a0:	b5bfffc4 	addi	r22,r22,-1
 40110a4:	dd802615 	stw	r22,152(sp)
 40110a8:	dc4022c5 	stb	r17,139(sp)
 40110ac:	b000bf16 	blt	r22,zero,40113ac <___vfprintf_internal_r+0x21c0>
 40110b0:	00800ac4 	movi	r2,43
 40110b4:	d8802305 	stb	r2,140(sp)
 40110b8:	00800244 	movi	r2,9
 40110bc:	15807016 	blt	r2,r22,4011280 <___vfprintf_internal_r+0x2094>
 40110c0:	00800c04 	movi	r2,48
 40110c4:	b5800c04 	addi	r22,r22,48
 40110c8:	d8802345 	stb	r2,141(sp)
 40110cc:	dd802385 	stb	r22,142(sp)
 40110d0:	d88023c4 	addi	r2,sp,143
 40110d4:	df0022c4 	addi	fp,sp,139
 40110d8:	d8c03317 	ldw	r3,204(sp)
 40110dc:	1739c83a 	sub	fp,r2,fp
 40110e0:	d9003317 	ldw	r4,204(sp)
 40110e4:	e0c7883a 	add	r3,fp,r3
 40110e8:	df003a15 	stw	fp,232(sp)
 40110ec:	d8c02b15 	stw	r3,172(sp)
 40110f0:	00800044 	movi	r2,1
 40110f4:	1100b30e 	bge	r2,r4,40113c4 <___vfprintf_internal_r+0x21d8>
 40110f8:	d8c02b17 	ldw	r3,172(sp)
 40110fc:	18c00044 	addi	r3,r3,1
 4011100:	d8c02b15 	stw	r3,172(sp)
 4011104:	1805883a 	mov	r2,r3
 4011108:	1800ac16 	blt	r3,zero,40113bc <___vfprintf_internal_r+0x21d0>
 401110c:	d8003215 	stw	zero,200(sp)
 4011110:	003e5d06 	br	4010a88 <__alt_mem_onchip_memory2_0+0xfc00f808>
 4011114:	d9002d17 	ldw	r4,180(sp)
 4011118:	d9801e04 	addi	r6,sp,120
 401111c:	b80b883a 	mov	r5,r23
 4011120:	4015f880 	call	4015f88 <__sprint_r>
 4011124:	1039351e 	bne	r2,zero,400f5fc <__alt_mem_onchip_memory2_0+0xfc00e37c>
 4011128:	dc402617 	ldw	r17,152(sp)
 401112c:	d8c02017 	ldw	r3,128(sp)
 4011130:	d8801f17 	ldw	r2,124(sp)
 4011134:	da000404 	addi	r8,sp,16
 4011138:	003ed606 	br	4010c94 <__alt_mem_onchip_memory2_0+0xfc00fa14>
 401113c:	182b883a 	mov	r21,r3
 4011140:	d8002a15 	stw	zero,168(sp)
 4011144:	00388c06 	br	400f378 <__alt_mem_onchip_memory2_0+0xfc00e0f8>
 4011148:	d8802a17 	ldw	r2,168(sp)
 401114c:	103e071e 	bne	r2,zero,401096c <__alt_mem_onchip_memory2_0+0xfc00f6ec>
 4011150:	dc002a15 	stw	r16,168(sp)
 4011154:	003e0506 	br	401096c <__alt_mem_onchip_memory2_0+0xfc00f6ec>
 4011158:	d9002a17 	ldw	r4,168(sp)
 401115c:	20c00044 	addi	r3,r4,1
 4011160:	003e0f06 	br	40109a0 <__alt_mem_onchip_memory2_0+0xfc00f720>
 4011164:	01400184 	movi	r5,6
 4011168:	d9402a15 	stw	r5,168(sp)
 401116c:	003dff06 	br	401096c <__alt_mem_onchip_memory2_0+0xfc00f6ec>
 4011170:	d8802104 	addi	r2,sp,132
 4011174:	d8800315 	stw	r2,12(sp)
 4011178:	d8802504 	addi	r2,sp,148
 401117c:	d8800215 	stw	r2,8(sp)
 4011180:	d8802604 	addi	r2,sp,152
 4011184:	d8800115 	stw	r2,4(sp)
 4011188:	d8802a17 	ldw	r2,168(sp)
 401118c:	d9403617 	ldw	r5,216(sp)
 4011190:	d9002d17 	ldw	r4,180(sp)
 4011194:	d8800015 	stw	r2,0(sp)
 4011198:	01c000c4 	movi	r7,3
 401119c:	980d883a 	mov	r6,r19
 40111a0:	da003d15 	stw	r8,244(sp)
 40111a4:	401191c0 	call	401191c <_dtoa_r>
 40111a8:	d8c02a17 	ldw	r3,168(sp)
 40111ac:	da003d17 	ldw	r8,244(sp)
 40111b0:	1021883a 	mov	r16,r2
 40111b4:	10f9883a 	add	fp,r2,r3
 40111b8:	81000007 	ldb	r4,0(r16)
 40111bc:	00800c04 	movi	r2,48
 40111c0:	20805e26 	beq	r4,r2,401133c <___vfprintf_internal_r+0x2150>
 40111c4:	d8c02617 	ldw	r3,152(sp)
 40111c8:	e0f9883a 	add	fp,fp,r3
 40111cc:	003e0a06 	br	40109f8 <__alt_mem_onchip_memory2_0+0xfc00f778>
 40111d0:	00c00b44 	movi	r3,45
 40111d4:	24e0003c 	xorhi	r19,r4,32768
 40111d8:	d8c02905 	stb	r3,164(sp)
 40111dc:	003de906 	br	4010984 <__alt_mem_onchip_memory2_0+0xfc00f704>
 40111e0:	d8c03217 	ldw	r3,200(sp)
 40111e4:	00c07a0e 	bge	zero,r3,40113d0 <___vfprintf_internal_r+0x21e4>
 40111e8:	00800044 	movi	r2,1
 40111ec:	d9003317 	ldw	r4,204(sp)
 40111f0:	1105883a 	add	r2,r2,r4
 40111f4:	d8802b15 	stw	r2,172(sp)
 40111f8:	10004e16 	blt	r2,zero,4011334 <___vfprintf_internal_r+0x2148>
 40111fc:	044019c4 	movi	r17,103
 4011200:	003e2106 	br	4010a88 <__alt_mem_onchip_memory2_0+0xfc00f808>
 4011204:	d9002a17 	ldw	r4,168(sp)
 4011208:	d8802104 	addi	r2,sp,132
 401120c:	d8800315 	stw	r2,12(sp)
 4011210:	d9000015 	stw	r4,0(sp)
 4011214:	d8802504 	addi	r2,sp,148
 4011218:	d9403617 	ldw	r5,216(sp)
 401121c:	d9002d17 	ldw	r4,180(sp)
 4011220:	d8800215 	stw	r2,8(sp)
 4011224:	d8802604 	addi	r2,sp,152
 4011228:	d8800115 	stw	r2,4(sp)
 401122c:	01c000c4 	movi	r7,3
 4011230:	980d883a 	mov	r6,r19
 4011234:	da003d15 	stw	r8,244(sp)
 4011238:	401191c0 	call	401191c <_dtoa_r>
 401123c:	d8c02a17 	ldw	r3,168(sp)
 4011240:	da003d17 	ldw	r8,244(sp)
 4011244:	1021883a 	mov	r16,r2
 4011248:	00801184 	movi	r2,70
 401124c:	80f9883a 	add	fp,r16,r3
 4011250:	88bfd926 	beq	r17,r2,40111b8 <__alt_mem_onchip_memory2_0+0xfc00ff38>
 4011254:	003de806 	br	40109f8 <__alt_mem_onchip_memory2_0+0xfc00f778>
 4011258:	d9002a17 	ldw	r4,168(sp)
 401125c:	00c04d0e 	bge	zero,r3,4011394 <___vfprintf_internal_r+0x21a8>
 4011260:	2000441e 	bne	r4,zero,4011374 <___vfprintf_internal_r+0x2188>
 4011264:	9480004c 	andi	r18,r18,1
 4011268:	9000421e 	bne	r18,zero,4011374 <___vfprintf_internal_r+0x2188>
 401126c:	1805883a 	mov	r2,r3
 4011270:	18006f16 	blt	r3,zero,4011430 <___vfprintf_internal_r+0x2244>
 4011274:	d8c03217 	ldw	r3,200(sp)
 4011278:	d8c02b15 	stw	r3,172(sp)
 401127c:	003e0206 	br	4010a88 <__alt_mem_onchip_memory2_0+0xfc00f808>
 4011280:	df0022c4 	addi	fp,sp,139
 4011284:	dc002a15 	stw	r16,168(sp)
 4011288:	4027883a 	mov	r19,r8
 401128c:	e021883a 	mov	r16,fp
 4011290:	b009883a 	mov	r4,r22
 4011294:	01400284 	movi	r5,10
 4011298:	400cea40 	call	400cea4 <__modsi3>
 401129c:	10800c04 	addi	r2,r2,48
 40112a0:	843fffc4 	addi	r16,r16,-1
 40112a4:	b009883a 	mov	r4,r22
 40112a8:	01400284 	movi	r5,10
 40112ac:	80800005 	stb	r2,0(r16)
 40112b0:	400ce200 	call	400ce20 <__divsi3>
 40112b4:	102d883a 	mov	r22,r2
 40112b8:	00800244 	movi	r2,9
 40112bc:	15bff416 	blt	r2,r22,4011290 <__alt_mem_onchip_memory2_0+0xfc010010>
 40112c0:	9811883a 	mov	r8,r19
 40112c4:	b0800c04 	addi	r2,r22,48
 40112c8:	8027883a 	mov	r19,r16
 40112cc:	997fffc4 	addi	r5,r19,-1
 40112d0:	98bfffc5 	stb	r2,-1(r19)
 40112d4:	dc002a17 	ldw	r16,168(sp)
 40112d8:	2f006d2e 	bgeu	r5,fp,4011490 <___vfprintf_internal_r+0x22a4>
 40112dc:	d9c02384 	addi	r7,sp,142
 40112e0:	3ccfc83a 	sub	r7,r7,r19
 40112e4:	d9002344 	addi	r4,sp,141
 40112e8:	e1cf883a 	add	r7,fp,r7
 40112ec:	00000106 	br	40112f4 <___vfprintf_internal_r+0x2108>
 40112f0:	28800003 	ldbu	r2,0(r5)
 40112f4:	20800005 	stb	r2,0(r4)
 40112f8:	21000044 	addi	r4,r4,1
 40112fc:	29400044 	addi	r5,r5,1
 4011300:	393ffb1e 	bne	r7,r4,40112f0 <__alt_mem_onchip_memory2_0+0xfc010070>
 4011304:	d8802304 	addi	r2,sp,140
 4011308:	14c5c83a 	sub	r2,r2,r19
 401130c:	d8c02344 	addi	r3,sp,141
 4011310:	1885883a 	add	r2,r3,r2
 4011314:	003f7006 	br	40110d8 <__alt_mem_onchip_memory2_0+0xfc00fe58>
 4011318:	0005883a 	mov	r2,zero
 401131c:	003f0f06 	br	4010f5c <__alt_mem_onchip_memory2_0+0xfc00fcdc>
 4011320:	d8c03217 	ldw	r3,200(sp)
 4011324:	18c00044 	addi	r3,r3,1
 4011328:	d8c02b15 	stw	r3,172(sp)
 401132c:	1805883a 	mov	r2,r3
 4011330:	183fb20e 	bge	r3,zero,40111fc <__alt_mem_onchip_memory2_0+0xfc00ff7c>
 4011334:	0005883a 	mov	r2,zero
 4011338:	003fb006 	br	40111fc <__alt_mem_onchip_memory2_0+0xfc00ff7c>
 401133c:	d9003617 	ldw	r4,216(sp)
 4011340:	000d883a 	mov	r6,zero
 4011344:	000f883a 	mov	r7,zero
 4011348:	980b883a 	mov	r5,r19
 401134c:	d8c03c15 	stw	r3,240(sp)
 4011350:	da003d15 	stw	r8,244(sp)
 4011354:	4019d0c0 	call	4019d0c <__eqdf2>
 4011358:	d8c03c17 	ldw	r3,240(sp)
 401135c:	da003d17 	ldw	r8,244(sp)
 4011360:	103f9826 	beq	r2,zero,40111c4 <__alt_mem_onchip_memory2_0+0xfc00ff44>
 4011364:	00800044 	movi	r2,1
 4011368:	10c7c83a 	sub	r3,r2,r3
 401136c:	d8c02615 	stw	r3,152(sp)
 4011370:	003f9506 	br	40111c8 <__alt_mem_onchip_memory2_0+0xfc00ff48>
 4011374:	d9002a17 	ldw	r4,168(sp)
 4011378:	d8c03217 	ldw	r3,200(sp)
 401137c:	20800044 	addi	r2,r4,1
 4011380:	1885883a 	add	r2,r3,r2
 4011384:	d8802b15 	stw	r2,172(sp)
 4011388:	103dbf0e 	bge	r2,zero,4010a88 <__alt_mem_onchip_memory2_0+0xfc00f808>
 401138c:	0005883a 	mov	r2,zero
 4011390:	003dbd06 	br	4010a88 <__alt_mem_onchip_memory2_0+0xfc00f808>
 4011394:	2000201e 	bne	r4,zero,4011418 <___vfprintf_internal_r+0x222c>
 4011398:	9480004c 	andi	r18,r18,1
 401139c:	90001e1e 	bne	r18,zero,4011418 <___vfprintf_internal_r+0x222c>
 40113a0:	00800044 	movi	r2,1
 40113a4:	d8802b15 	stw	r2,172(sp)
 40113a8:	003db706 	br	4010a88 <__alt_mem_onchip_memory2_0+0xfc00f808>
 40113ac:	00800b44 	movi	r2,45
 40113b0:	05adc83a 	sub	r22,zero,r22
 40113b4:	d8802305 	stb	r2,140(sp)
 40113b8:	003f3f06 	br	40110b8 <__alt_mem_onchip_memory2_0+0xfc00fe38>
 40113bc:	0005883a 	mov	r2,zero
 40113c0:	003f5206 	br	401110c <__alt_mem_onchip_memory2_0+0xfc00fe8c>
 40113c4:	90a4703a 	and	r18,r18,r2
 40113c8:	903f4e26 	beq	r18,zero,4011104 <__alt_mem_onchip_memory2_0+0xfc00fe84>
 40113cc:	003f4a06 	br	40110f8 <__alt_mem_onchip_memory2_0+0xfc00fe78>
 40113d0:	00800084 	movi	r2,2
 40113d4:	10c5c83a 	sub	r2,r2,r3
 40113d8:	003f8406 	br	40111ec <__alt_mem_onchip_memory2_0+0xfc00ff6c>
 40113dc:	d9402e17 	ldw	r5,184(sp)
 40113e0:	d9002e17 	ldw	r4,184(sp)
 40113e4:	ac400043 	ldbu	r17,1(r21)
 40113e8:	29400017 	ldw	r5,0(r5)
 40113ec:	20800104 	addi	r2,r4,4
 40113f0:	d8802e15 	stw	r2,184(sp)
 40113f4:	d9402a15 	stw	r5,168(sp)
 40113f8:	182b883a 	mov	r21,r3
 40113fc:	283e7b0e 	bge	r5,zero,4010dec <__alt_mem_onchip_memory2_0+0xfc00fb6c>
 4011400:	8c403fcc 	andi	r17,r17,255
 4011404:	017fffc4 	movi	r5,-1
 4011408:	8c40201c 	xori	r17,r17,128
 401140c:	d9402a15 	stw	r5,168(sp)
 4011410:	8c7fe004 	addi	r17,r17,-128
 4011414:	0037d706 	br	400f374 <__alt_mem_onchip_memory2_0+0xfc00e0f4>
 4011418:	d8c02a17 	ldw	r3,168(sp)
 401141c:	18c00084 	addi	r3,r3,2
 4011420:	d8c02b15 	stw	r3,172(sp)
 4011424:	1805883a 	mov	r2,r3
 4011428:	183d970e 	bge	r3,zero,4010a88 <__alt_mem_onchip_memory2_0+0xfc00f808>
 401142c:	003fd706 	br	401138c <__alt_mem_onchip_memory2_0+0xfc01010c>
 4011430:	0005883a 	mov	r2,zero
 4011434:	003f8f06 	br	4011274 <__alt_mem_onchip_memory2_0+0xfc00fff4>
 4011438:	9080004c 	andi	r2,r18,1
 401143c:	103f821e 	bne	r2,zero,4011248 <__alt_mem_onchip_memory2_0+0xfc00ffc8>
 4011440:	d8802117 	ldw	r2,132(sp)
 4011444:	1405c83a 	sub	r2,r2,r16
 4011448:	d8803315 	stw	r2,204(sp)
 401144c:	b47ef426 	beq	r22,r17,4011020 <__alt_mem_onchip_memory2_0+0xfc00fda0>
 4011450:	dd802617 	ldw	r22,152(sp)
 4011454:	003f1206 	br	40110a0 <__alt_mem_onchip_memory2_0+0xfc00fe20>
 4011458:	d8c02b03 	ldbu	r3,172(sp)
 401145c:	d8c02785 	stb	r3,158(sp)
 4011460:	0038df06 	br	400f7e0 <__alt_mem_onchip_memory2_0+0xfc00e560>
 4011464:	d8c02b03 	ldbu	r3,172(sp)
 4011468:	d8c02785 	stb	r3,158(sp)
 401146c:	0038aa06 	br	400f718 <__alt_mem_onchip_memory2_0+0xfc00e498>
 4011470:	d8c02b03 	ldbu	r3,172(sp)
 4011474:	d8c02785 	stb	r3,158(sp)
 4011478:	003a4306 	br	400fd88 <__alt_mem_onchip_memory2_0+0xfc00eb08>
 401147c:	d8c02b03 	ldbu	r3,172(sp)
 4011480:	d8c02785 	stb	r3,158(sp)
 4011484:	003af506 	br	401005c <__alt_mem_onchip_memory2_0+0xfc00eddc>
 4011488:	0005883a 	mov	r2,zero
 401148c:	003d7b06 	br	4010a7c <__alt_mem_onchip_memory2_0+0xfc00f7fc>
 4011490:	d8802344 	addi	r2,sp,141
 4011494:	003f1006 	br	40110d8 <__alt_mem_onchip_memory2_0+0xfc00fe58>
 4011498:	d8c02b03 	ldbu	r3,172(sp)
 401149c:	d8c02785 	stb	r3,158(sp)
 40114a0:	0038fd06 	br	400f898 <__alt_mem_onchip_memory2_0+0xfc00e618>
 40114a4:	d8c02b03 	ldbu	r3,172(sp)
 40114a8:	d8c02785 	stb	r3,158(sp)
 40114ac:	003a9706 	br	400ff0c <__alt_mem_onchip_memory2_0+0xfc00ec8c>
 40114b0:	d8c02b03 	ldbu	r3,172(sp)
 40114b4:	d8c02785 	stb	r3,158(sp)
 40114b8:	003a1806 	br	400fd1c <__alt_mem_onchip_memory2_0+0xfc00ea9c>
 40114bc:	d8c02b03 	ldbu	r3,172(sp)
 40114c0:	d8c02785 	stb	r3,158(sp)
 40114c4:	003abe06 	br	400ffc0 <__alt_mem_onchip_memory2_0+0xfc00ed40>

040114c8 <__vfprintf_internal>:
 40114c8:	008100f4 	movhi	r2,1027
 40114cc:	10a8a704 	addi	r2,r2,-23908
 40114d0:	300f883a 	mov	r7,r6
 40114d4:	280d883a 	mov	r6,r5
 40114d8:	200b883a 	mov	r5,r4
 40114dc:	11000017 	ldw	r4,0(r2)
 40114e0:	400f1ec1 	jmpi	400f1ec <___vfprintf_internal_r>

040114e4 <__sbprintf>:
 40114e4:	2880030b 	ldhu	r2,12(r5)
 40114e8:	2ac01917 	ldw	r11,100(r5)
 40114ec:	2a80038b 	ldhu	r10,14(r5)
 40114f0:	2a400717 	ldw	r9,28(r5)
 40114f4:	2a000917 	ldw	r8,36(r5)
 40114f8:	defee204 	addi	sp,sp,-1144
 40114fc:	00c10004 	movi	r3,1024
 4011500:	dc011a15 	stw	r16,1128(sp)
 4011504:	10bfff4c 	andi	r2,r2,65533
 4011508:	2821883a 	mov	r16,r5
 401150c:	d8cb883a 	add	r5,sp,r3
 4011510:	dc811c15 	stw	r18,1136(sp)
 4011514:	dc411b15 	stw	r17,1132(sp)
 4011518:	dfc11d15 	stw	ra,1140(sp)
 401151c:	2025883a 	mov	r18,r4
 4011520:	d881030d 	sth	r2,1036(sp)
 4011524:	dac11915 	stw	r11,1124(sp)
 4011528:	da81038d 	sth	r10,1038(sp)
 401152c:	da410715 	stw	r9,1052(sp)
 4011530:	da010915 	stw	r8,1060(sp)
 4011534:	dec10015 	stw	sp,1024(sp)
 4011538:	dec10415 	stw	sp,1040(sp)
 401153c:	d8c10215 	stw	r3,1032(sp)
 4011540:	d8c10515 	stw	r3,1044(sp)
 4011544:	d8010615 	stw	zero,1048(sp)
 4011548:	400f1ec0 	call	400f1ec <___vfprintf_internal_r>
 401154c:	1023883a 	mov	r17,r2
 4011550:	10000416 	blt	r2,zero,4011564 <__sbprintf+0x80>
 4011554:	d9410004 	addi	r5,sp,1024
 4011558:	9009883a 	mov	r4,r18
 401155c:	40131c00 	call	40131c0 <_fflush_r>
 4011560:	10000d1e 	bne	r2,zero,4011598 <__sbprintf+0xb4>
 4011564:	d881030b 	ldhu	r2,1036(sp)
 4011568:	1080100c 	andi	r2,r2,64
 401156c:	10000326 	beq	r2,zero,401157c <__sbprintf+0x98>
 4011570:	8080030b 	ldhu	r2,12(r16)
 4011574:	10801014 	ori	r2,r2,64
 4011578:	8080030d 	sth	r2,12(r16)
 401157c:	8805883a 	mov	r2,r17
 4011580:	dfc11d17 	ldw	ra,1140(sp)
 4011584:	dc811c17 	ldw	r18,1136(sp)
 4011588:	dc411b17 	ldw	r17,1132(sp)
 401158c:	dc011a17 	ldw	r16,1128(sp)
 4011590:	dec11e04 	addi	sp,sp,1144
 4011594:	f800283a 	ret
 4011598:	047fffc4 	movi	r17,-1
 401159c:	003ff106 	br	4011564 <__alt_mem_onchip_memory2_0+0xfc0102e4>

040115a0 <__swsetup_r>:
 40115a0:	008100f4 	movhi	r2,1027
 40115a4:	defffd04 	addi	sp,sp,-12
 40115a8:	10a8a704 	addi	r2,r2,-23908
 40115ac:	dc400115 	stw	r17,4(sp)
 40115b0:	2023883a 	mov	r17,r4
 40115b4:	11000017 	ldw	r4,0(r2)
 40115b8:	dc000015 	stw	r16,0(sp)
 40115bc:	dfc00215 	stw	ra,8(sp)
 40115c0:	2821883a 	mov	r16,r5
 40115c4:	20000226 	beq	r4,zero,40115d0 <__swsetup_r+0x30>
 40115c8:	20800e17 	ldw	r2,56(r4)
 40115cc:	10003126 	beq	r2,zero,4011694 <__swsetup_r+0xf4>
 40115d0:	8080030b 	ldhu	r2,12(r16)
 40115d4:	10c0020c 	andi	r3,r2,8
 40115d8:	1009883a 	mov	r4,r2
 40115dc:	18000f26 	beq	r3,zero,401161c <__swsetup_r+0x7c>
 40115e0:	80c00417 	ldw	r3,16(r16)
 40115e4:	18001526 	beq	r3,zero,401163c <__swsetup_r+0x9c>
 40115e8:	1100004c 	andi	r4,r2,1
 40115ec:	20001c1e 	bne	r4,zero,4011660 <__swsetup_r+0xc0>
 40115f0:	1080008c 	andi	r2,r2,2
 40115f4:	1000291e 	bne	r2,zero,401169c <__swsetup_r+0xfc>
 40115f8:	80800517 	ldw	r2,20(r16)
 40115fc:	80800215 	stw	r2,8(r16)
 4011600:	18001c26 	beq	r3,zero,4011674 <__swsetup_r+0xd4>
 4011604:	0005883a 	mov	r2,zero
 4011608:	dfc00217 	ldw	ra,8(sp)
 401160c:	dc400117 	ldw	r17,4(sp)
 4011610:	dc000017 	ldw	r16,0(sp)
 4011614:	dec00304 	addi	sp,sp,12
 4011618:	f800283a 	ret
 401161c:	2080040c 	andi	r2,r4,16
 4011620:	10002e26 	beq	r2,zero,40116dc <__swsetup_r+0x13c>
 4011624:	2080010c 	andi	r2,r4,4
 4011628:	10001e1e 	bne	r2,zero,40116a4 <__swsetup_r+0x104>
 401162c:	80c00417 	ldw	r3,16(r16)
 4011630:	20800214 	ori	r2,r4,8
 4011634:	8080030d 	sth	r2,12(r16)
 4011638:	183feb1e 	bne	r3,zero,40115e8 <__alt_mem_onchip_memory2_0+0xfc010368>
 401163c:	1100a00c 	andi	r4,r2,640
 4011640:	01408004 	movi	r5,512
 4011644:	217fe826 	beq	r4,r5,40115e8 <__alt_mem_onchip_memory2_0+0xfc010368>
 4011648:	800b883a 	mov	r5,r16
 401164c:	8809883a 	mov	r4,r17
 4011650:	401415c0 	call	401415c <__smakebuf_r>
 4011654:	8080030b 	ldhu	r2,12(r16)
 4011658:	80c00417 	ldw	r3,16(r16)
 401165c:	003fe206 	br	40115e8 <__alt_mem_onchip_memory2_0+0xfc010368>
 4011660:	80800517 	ldw	r2,20(r16)
 4011664:	80000215 	stw	zero,8(r16)
 4011668:	0085c83a 	sub	r2,zero,r2
 401166c:	80800615 	stw	r2,24(r16)
 4011670:	183fe41e 	bne	r3,zero,4011604 <__alt_mem_onchip_memory2_0+0xfc010384>
 4011674:	80c0030b 	ldhu	r3,12(r16)
 4011678:	0005883a 	mov	r2,zero
 401167c:	1900200c 	andi	r4,r3,128
 4011680:	203fe126 	beq	r4,zero,4011608 <__alt_mem_onchip_memory2_0+0xfc010388>
 4011684:	18c01014 	ori	r3,r3,64
 4011688:	80c0030d 	sth	r3,12(r16)
 401168c:	00bfffc4 	movi	r2,-1
 4011690:	003fdd06 	br	4011608 <__alt_mem_onchip_memory2_0+0xfc010388>
 4011694:	40135ac0 	call	40135ac <__sinit>
 4011698:	003fcd06 	br	40115d0 <__alt_mem_onchip_memory2_0+0xfc010350>
 401169c:	0005883a 	mov	r2,zero
 40116a0:	003fd606 	br	40115fc <__alt_mem_onchip_memory2_0+0xfc01037c>
 40116a4:	81400c17 	ldw	r5,48(r16)
 40116a8:	28000626 	beq	r5,zero,40116c4 <__swsetup_r+0x124>
 40116ac:	80801004 	addi	r2,r16,64
 40116b0:	28800326 	beq	r5,r2,40116c0 <__swsetup_r+0x120>
 40116b4:	8809883a 	mov	r4,r17
 40116b8:	40137200 	call	4013720 <_free_r>
 40116bc:	8100030b 	ldhu	r4,12(r16)
 40116c0:	80000c15 	stw	zero,48(r16)
 40116c4:	80c00417 	ldw	r3,16(r16)
 40116c8:	00bff6c4 	movi	r2,-37
 40116cc:	1108703a 	and	r4,r2,r4
 40116d0:	80000115 	stw	zero,4(r16)
 40116d4:	80c00015 	stw	r3,0(r16)
 40116d8:	003fd506 	br	4011630 <__alt_mem_onchip_memory2_0+0xfc0103b0>
 40116dc:	00800244 	movi	r2,9
 40116e0:	88800015 	stw	r2,0(r17)
 40116e4:	20801014 	ori	r2,r4,64
 40116e8:	8080030d 	sth	r2,12(r16)
 40116ec:	00bfffc4 	movi	r2,-1
 40116f0:	003fc506 	br	4011608 <__alt_mem_onchip_memory2_0+0xfc010388>

040116f4 <quorem>:
 40116f4:	defff204 	addi	sp,sp,-56
 40116f8:	ddc00b15 	stw	r23,44(sp)
 40116fc:	20800417 	ldw	r2,16(r4)
 4011700:	2dc00417 	ldw	r23,16(r5)
 4011704:	dfc00d15 	stw	ra,52(sp)
 4011708:	df000c15 	stw	fp,48(sp)
 401170c:	dd800a15 	stw	r22,40(sp)
 4011710:	dd400915 	stw	r21,36(sp)
 4011714:	dd000815 	stw	r20,32(sp)
 4011718:	dcc00715 	stw	r19,28(sp)
 401171c:	dc800615 	stw	r18,24(sp)
 4011720:	dc400515 	stw	r17,20(sp)
 4011724:	dc000415 	stw	r16,16(sp)
 4011728:	15c07a16 	blt	r2,r23,4011914 <quorem+0x220>
 401172c:	bdffffc4 	addi	r23,r23,-1
 4011730:	bde9883a 	add	r20,r23,r23
 4011734:	28c00504 	addi	r3,r5,20
 4011738:	a529883a 	add	r20,r20,r20
 401173c:	1d39883a 	add	fp,r3,r20
 4011740:	24c00504 	addi	r19,r4,20
 4011744:	d9400215 	stw	r5,8(sp)
 4011748:	9d29883a 	add	r20,r19,r20
 401174c:	e1400017 	ldw	r5,0(fp)
 4011750:	d9000015 	stw	r4,0(sp)
 4011754:	a1000017 	ldw	r4,0(r20)
 4011758:	29400044 	addi	r5,r5,1
 401175c:	d8c00115 	stw	r3,4(sp)
 4011760:	dd000315 	stw	r20,12(sp)
 4011764:	400cf180 	call	400cf18 <__udivsi3>
 4011768:	1025883a 	mov	r18,r2
 401176c:	10003026 	beq	r2,zero,4011830 <quorem+0x13c>
 4011770:	dc400117 	ldw	r17,4(sp)
 4011774:	9829883a 	mov	r20,r19
 4011778:	002d883a 	mov	r22,zero
 401177c:	0021883a 	mov	r16,zero
 4011780:	8d400017 	ldw	r21,0(r17)
 4011784:	900b883a 	mov	r5,r18
 4011788:	8c400104 	addi	r17,r17,4
 401178c:	a93fffcc 	andi	r4,r21,65535
 4011790:	400cfd40 	call	400cfd4 <__mulsi3>
 4011794:	a808d43a 	srli	r4,r21,16
 4011798:	900b883a 	mov	r5,r18
 401179c:	15ad883a 	add	r22,r2,r22
 40117a0:	400cfd40 	call	400cfd4 <__mulsi3>
 40117a4:	a1000017 	ldw	r4,0(r20)
 40117a8:	b00cd43a 	srli	r6,r22,16
 40117ac:	b0ffffcc 	andi	r3,r22,65535
 40117b0:	217fffcc 	andi	r5,r4,65535
 40117b4:	2c21883a 	add	r16,r5,r16
 40117b8:	80c7c83a 	sub	r3,r16,r3
 40117bc:	2008d43a 	srli	r4,r4,16
 40117c0:	1185883a 	add	r2,r2,r6
 40117c4:	1821d43a 	srai	r16,r3,16
 40117c8:	117fffcc 	andi	r5,r2,65535
 40117cc:	2149c83a 	sub	r4,r4,r5
 40117d0:	2421883a 	add	r16,r4,r16
 40117d4:	8008943a 	slli	r4,r16,16
 40117d8:	18ffffcc 	andi	r3,r3,65535
 40117dc:	102cd43a 	srli	r22,r2,16
 40117e0:	20c8b03a 	or	r4,r4,r3
 40117e4:	a1000015 	stw	r4,0(r20)
 40117e8:	8021d43a 	srai	r16,r16,16
 40117ec:	a5000104 	addi	r20,r20,4
 40117f0:	e47fe32e 	bgeu	fp,r17,4011780 <__alt_mem_onchip_memory2_0+0xfc010500>
 40117f4:	d8c00317 	ldw	r3,12(sp)
 40117f8:	18800017 	ldw	r2,0(r3)
 40117fc:	10000c1e 	bne	r2,zero,4011830 <quorem+0x13c>
 4011800:	18bfff04 	addi	r2,r3,-4
 4011804:	9880082e 	bgeu	r19,r2,4011828 <quorem+0x134>
 4011808:	18ffff17 	ldw	r3,-4(r3)
 401180c:	18000326 	beq	r3,zero,401181c <quorem+0x128>
 4011810:	00000506 	br	4011828 <quorem+0x134>
 4011814:	10c00017 	ldw	r3,0(r2)
 4011818:	1800031e 	bne	r3,zero,4011828 <quorem+0x134>
 401181c:	10bfff04 	addi	r2,r2,-4
 4011820:	bdffffc4 	addi	r23,r23,-1
 4011824:	98bffb36 	bltu	r19,r2,4011814 <__alt_mem_onchip_memory2_0+0xfc010594>
 4011828:	d8c00017 	ldw	r3,0(sp)
 401182c:	1dc00415 	stw	r23,16(r3)
 4011830:	d9400217 	ldw	r5,8(sp)
 4011834:	d9000017 	ldw	r4,0(sp)
 4011838:	4014edc0 	call	4014edc <__mcmp>
 401183c:	10002816 	blt	r2,zero,40118e0 <quorem+0x1ec>
 4011840:	dc400117 	ldw	r17,4(sp)
 4011844:	94800044 	addi	r18,r18,1
 4011848:	980d883a 	mov	r6,r19
 401184c:	0007883a 	mov	r3,zero
 4011850:	31000017 	ldw	r4,0(r6)
 4011854:	89400017 	ldw	r5,0(r17)
 4011858:	31800104 	addi	r6,r6,4
 401185c:	20bfffcc 	andi	r2,r4,65535
 4011860:	10c7883a 	add	r3,r2,r3
 4011864:	28bfffcc 	andi	r2,r5,65535
 4011868:	1885c83a 	sub	r2,r3,r2
 401186c:	280ad43a 	srli	r5,r5,16
 4011870:	2008d43a 	srli	r4,r4,16
 4011874:	1007d43a 	srai	r3,r2,16
 4011878:	10bfffcc 	andi	r2,r2,65535
 401187c:	2149c83a 	sub	r4,r4,r5
 4011880:	20c9883a 	add	r4,r4,r3
 4011884:	200a943a 	slli	r5,r4,16
 4011888:	8c400104 	addi	r17,r17,4
 401188c:	2007d43a 	srai	r3,r4,16
 4011890:	2884b03a 	or	r2,r5,r2
 4011894:	30bfff15 	stw	r2,-4(r6)
 4011898:	e47fed2e 	bgeu	fp,r17,4011850 <__alt_mem_onchip_memory2_0+0xfc0105d0>
 401189c:	bdc5883a 	add	r2,r23,r23
 40118a0:	1085883a 	add	r2,r2,r2
 40118a4:	9887883a 	add	r3,r19,r2
 40118a8:	18800017 	ldw	r2,0(r3)
 40118ac:	10000c1e 	bne	r2,zero,40118e0 <quorem+0x1ec>
 40118b0:	18bfff04 	addi	r2,r3,-4
 40118b4:	9880082e 	bgeu	r19,r2,40118d8 <quorem+0x1e4>
 40118b8:	18ffff17 	ldw	r3,-4(r3)
 40118bc:	18000326 	beq	r3,zero,40118cc <quorem+0x1d8>
 40118c0:	00000506 	br	40118d8 <quorem+0x1e4>
 40118c4:	10c00017 	ldw	r3,0(r2)
 40118c8:	1800031e 	bne	r3,zero,40118d8 <quorem+0x1e4>
 40118cc:	10bfff04 	addi	r2,r2,-4
 40118d0:	bdffffc4 	addi	r23,r23,-1
 40118d4:	98bffb36 	bltu	r19,r2,40118c4 <__alt_mem_onchip_memory2_0+0xfc010644>
 40118d8:	d8c00017 	ldw	r3,0(sp)
 40118dc:	1dc00415 	stw	r23,16(r3)
 40118e0:	9005883a 	mov	r2,r18
 40118e4:	dfc00d17 	ldw	ra,52(sp)
 40118e8:	df000c17 	ldw	fp,48(sp)
 40118ec:	ddc00b17 	ldw	r23,44(sp)
 40118f0:	dd800a17 	ldw	r22,40(sp)
 40118f4:	dd400917 	ldw	r21,36(sp)
 40118f8:	dd000817 	ldw	r20,32(sp)
 40118fc:	dcc00717 	ldw	r19,28(sp)
 4011900:	dc800617 	ldw	r18,24(sp)
 4011904:	dc400517 	ldw	r17,20(sp)
 4011908:	dc000417 	ldw	r16,16(sp)
 401190c:	dec00e04 	addi	sp,sp,56
 4011910:	f800283a 	ret
 4011914:	0005883a 	mov	r2,zero
 4011918:	003ff206 	br	40118e4 <__alt_mem_onchip_memory2_0+0xfc010664>

0401191c <_dtoa_r>:
 401191c:	20801017 	ldw	r2,64(r4)
 4011920:	deffde04 	addi	sp,sp,-136
 4011924:	df002015 	stw	fp,128(sp)
 4011928:	dcc01b15 	stw	r19,108(sp)
 401192c:	dc801a15 	stw	r18,104(sp)
 4011930:	dc401915 	stw	r17,100(sp)
 4011934:	dc001815 	stw	r16,96(sp)
 4011938:	dfc02115 	stw	ra,132(sp)
 401193c:	ddc01f15 	stw	r23,124(sp)
 4011940:	dd801e15 	stw	r22,120(sp)
 4011944:	dd401d15 	stw	r21,116(sp)
 4011948:	dd001c15 	stw	r20,112(sp)
 401194c:	d9c00315 	stw	r7,12(sp)
 4011950:	2039883a 	mov	fp,r4
 4011954:	3023883a 	mov	r17,r6
 4011958:	2825883a 	mov	r18,r5
 401195c:	dc002417 	ldw	r16,144(sp)
 4011960:	3027883a 	mov	r19,r6
 4011964:	10000826 	beq	r2,zero,4011988 <_dtoa_r+0x6c>
 4011968:	21801117 	ldw	r6,68(r4)
 401196c:	00c00044 	movi	r3,1
 4011970:	100b883a 	mov	r5,r2
 4011974:	1986983a 	sll	r3,r3,r6
 4011978:	11800115 	stw	r6,4(r2)
 401197c:	10c00215 	stw	r3,8(r2)
 4011980:	40146000 	call	4014600 <_Bfree>
 4011984:	e0001015 	stw	zero,64(fp)
 4011988:	88002e16 	blt	r17,zero,4011a44 <_dtoa_r+0x128>
 401198c:	80000015 	stw	zero,0(r16)
 4011990:	889ffc2c 	andhi	r2,r17,32752
 4011994:	00dffc34 	movhi	r3,32752
 4011998:	10c01c26 	beq	r2,r3,4011a0c <_dtoa_r+0xf0>
 401199c:	000d883a 	mov	r6,zero
 40119a0:	000f883a 	mov	r7,zero
 40119a4:	9009883a 	mov	r4,r18
 40119a8:	980b883a 	mov	r5,r19
 40119ac:	4019d0c0 	call	4019d0c <__eqdf2>
 40119b0:	10002b1e 	bne	r2,zero,4011a60 <_dtoa_r+0x144>
 40119b4:	d9c02317 	ldw	r7,140(sp)
 40119b8:	00800044 	movi	r2,1
 40119bc:	38800015 	stw	r2,0(r7)
 40119c0:	d8802517 	ldw	r2,148(sp)
 40119c4:	10019e26 	beq	r2,zero,4012040 <_dtoa_r+0x724>
 40119c8:	d8c02517 	ldw	r3,148(sp)
 40119cc:	008100b4 	movhi	r2,1026
 40119d0:	109bc844 	addi	r2,r2,28449
 40119d4:	18800015 	stw	r2,0(r3)
 40119d8:	10bfffc4 	addi	r2,r2,-1
 40119dc:	dfc02117 	ldw	ra,132(sp)
 40119e0:	df002017 	ldw	fp,128(sp)
 40119e4:	ddc01f17 	ldw	r23,124(sp)
 40119e8:	dd801e17 	ldw	r22,120(sp)
 40119ec:	dd401d17 	ldw	r21,116(sp)
 40119f0:	dd001c17 	ldw	r20,112(sp)
 40119f4:	dcc01b17 	ldw	r19,108(sp)
 40119f8:	dc801a17 	ldw	r18,104(sp)
 40119fc:	dc401917 	ldw	r17,100(sp)
 4011a00:	dc001817 	ldw	r16,96(sp)
 4011a04:	dec02204 	addi	sp,sp,136
 4011a08:	f800283a 	ret
 4011a0c:	d8c02317 	ldw	r3,140(sp)
 4011a10:	0089c3c4 	movi	r2,9999
 4011a14:	18800015 	stw	r2,0(r3)
 4011a18:	90017726 	beq	r18,zero,4011ff8 <_dtoa_r+0x6dc>
 4011a1c:	008100b4 	movhi	r2,1026
 4011a20:	109bd404 	addi	r2,r2,28496
 4011a24:	d9002517 	ldw	r4,148(sp)
 4011a28:	203fec26 	beq	r4,zero,40119dc <__alt_mem_onchip_memory2_0+0xfc01075c>
 4011a2c:	10c000c7 	ldb	r3,3(r2)
 4011a30:	1801781e 	bne	r3,zero,4012014 <_dtoa_r+0x6f8>
 4011a34:	10c000c4 	addi	r3,r2,3
 4011a38:	d9802517 	ldw	r6,148(sp)
 4011a3c:	30c00015 	stw	r3,0(r6)
 4011a40:	003fe606 	br	40119dc <__alt_mem_onchip_memory2_0+0xfc01075c>
 4011a44:	04e00034 	movhi	r19,32768
 4011a48:	9cffffc4 	addi	r19,r19,-1
 4011a4c:	00800044 	movi	r2,1
 4011a50:	8ce6703a 	and	r19,r17,r19
 4011a54:	80800015 	stw	r2,0(r16)
 4011a58:	9823883a 	mov	r17,r19
 4011a5c:	003fcc06 	br	4011990 <__alt_mem_onchip_memory2_0+0xfc010710>
 4011a60:	d8800204 	addi	r2,sp,8
 4011a64:	d8800015 	stw	r2,0(sp)
 4011a68:	d9c00104 	addi	r7,sp,4
 4011a6c:	900b883a 	mov	r5,r18
 4011a70:	980d883a 	mov	r6,r19
 4011a74:	e009883a 	mov	r4,fp
 4011a78:	8820d53a 	srli	r16,r17,20
 4011a7c:	40152a80 	call	40152a8 <__d2b>
 4011a80:	d8800915 	stw	r2,36(sp)
 4011a84:	8001651e 	bne	r16,zero,401201c <_dtoa_r+0x700>
 4011a88:	dd800217 	ldw	r22,8(sp)
 4011a8c:	dc000117 	ldw	r16,4(sp)
 4011a90:	00800804 	movi	r2,32
 4011a94:	b421883a 	add	r16,r22,r16
 4011a98:	80c10c84 	addi	r3,r16,1074
 4011a9c:	10c2d10e 	bge	r2,r3,40125e4 <_dtoa_r+0xcc8>
 4011aa0:	00801004 	movi	r2,64
 4011aa4:	81010484 	addi	r4,r16,1042
 4011aa8:	10c7c83a 	sub	r3,r2,r3
 4011aac:	9108d83a 	srl	r4,r18,r4
 4011ab0:	88e2983a 	sll	r17,r17,r3
 4011ab4:	2448b03a 	or	r4,r4,r17
 4011ab8:	401b2280 	call	401b228 <__floatunsidf>
 4011abc:	017f8434 	movhi	r5,65040
 4011ac0:	01800044 	movi	r6,1
 4011ac4:	1009883a 	mov	r4,r2
 4011ac8:	194b883a 	add	r5,r3,r5
 4011acc:	843fffc4 	addi	r16,r16,-1
 4011ad0:	d9801115 	stw	r6,68(sp)
 4011ad4:	000d883a 	mov	r6,zero
 4011ad8:	01cffe34 	movhi	r7,16376
 4011adc:	401a7d00 	call	401a7d0 <__subdf3>
 4011ae0:	0198dbf4 	movhi	r6,25455
 4011ae4:	01cff4f4 	movhi	r7,16339
 4011ae8:	3190d844 	addi	r6,r6,17249
 4011aec:	39e1e9c4 	addi	r7,r7,-30809
 4011af0:	1009883a 	mov	r4,r2
 4011af4:	180b883a 	mov	r5,r3
 4011af8:	4019f640 	call	4019f64 <__muldf3>
 4011afc:	01a2d874 	movhi	r6,35681
 4011b00:	01cff1f4 	movhi	r7,16327
 4011b04:	31b22cc4 	addi	r6,r6,-14157
 4011b08:	39e28a04 	addi	r7,r7,-30168
 4011b0c:	180b883a 	mov	r5,r3
 4011b10:	1009883a 	mov	r4,r2
 4011b14:	4018a900 	call	4018a90 <__adddf3>
 4011b18:	8009883a 	mov	r4,r16
 4011b1c:	1029883a 	mov	r20,r2
 4011b20:	1823883a 	mov	r17,r3
 4011b24:	401b14c0 	call	401b14c <__floatsidf>
 4011b28:	019427f4 	movhi	r6,20639
 4011b2c:	01cff4f4 	movhi	r7,16339
 4011b30:	319e7ec4 	addi	r6,r6,31227
 4011b34:	39d104c4 	addi	r7,r7,17427
 4011b38:	1009883a 	mov	r4,r2
 4011b3c:	180b883a 	mov	r5,r3
 4011b40:	4019f640 	call	4019f64 <__muldf3>
 4011b44:	100d883a 	mov	r6,r2
 4011b48:	180f883a 	mov	r7,r3
 4011b4c:	a009883a 	mov	r4,r20
 4011b50:	880b883a 	mov	r5,r17
 4011b54:	4018a900 	call	4018a90 <__adddf3>
 4011b58:	1009883a 	mov	r4,r2
 4011b5c:	180b883a 	mov	r5,r3
 4011b60:	1029883a 	mov	r20,r2
 4011b64:	1823883a 	mov	r17,r3
 4011b68:	401b0cc0 	call	401b0cc <__fixdfsi>
 4011b6c:	000d883a 	mov	r6,zero
 4011b70:	000f883a 	mov	r7,zero
 4011b74:	a009883a 	mov	r4,r20
 4011b78:	880b883a 	mov	r5,r17
 4011b7c:	d8800515 	stw	r2,20(sp)
 4011b80:	4019e700 	call	4019e70 <__ledf2>
 4011b84:	10028716 	blt	r2,zero,40125a4 <_dtoa_r+0xc88>
 4011b88:	d8c00517 	ldw	r3,20(sp)
 4011b8c:	00800584 	movi	r2,22
 4011b90:	10c27536 	bltu	r2,r3,4012568 <_dtoa_r+0xc4c>
 4011b94:	180490fa 	slli	r2,r3,3
 4011b98:	00c100b4 	movhi	r3,1026
 4011b9c:	18dbef04 	addi	r3,r3,28604
 4011ba0:	1885883a 	add	r2,r3,r2
 4011ba4:	11000017 	ldw	r4,0(r2)
 4011ba8:	11400117 	ldw	r5,4(r2)
 4011bac:	900d883a 	mov	r6,r18
 4011bb0:	980f883a 	mov	r7,r19
 4011bb4:	4019d940 	call	4019d94 <__gedf2>
 4011bb8:	00828d0e 	bge	zero,r2,40125f0 <_dtoa_r+0xcd4>
 4011bbc:	d9000517 	ldw	r4,20(sp)
 4011bc0:	d8000e15 	stw	zero,56(sp)
 4011bc4:	213fffc4 	addi	r4,r4,-1
 4011bc8:	d9000515 	stw	r4,20(sp)
 4011bcc:	b42dc83a 	sub	r22,r22,r16
 4011bd0:	b5bfffc4 	addi	r22,r22,-1
 4011bd4:	b0026f16 	blt	r22,zero,4012594 <_dtoa_r+0xc78>
 4011bd8:	d8000815 	stw	zero,32(sp)
 4011bdc:	d9c00517 	ldw	r7,20(sp)
 4011be0:	38026416 	blt	r7,zero,4012574 <_dtoa_r+0xc58>
 4011be4:	b1ed883a 	add	r22,r22,r7
 4011be8:	d9c00d15 	stw	r7,52(sp)
 4011bec:	d8000a15 	stw	zero,40(sp)
 4011bf0:	d9800317 	ldw	r6,12(sp)
 4011bf4:	00800244 	movi	r2,9
 4011bf8:	11811436 	bltu	r2,r6,401204c <_dtoa_r+0x730>
 4011bfc:	00800144 	movi	r2,5
 4011c00:	1184e10e 	bge	r2,r6,4012f88 <_dtoa_r+0x166c>
 4011c04:	31bfff04 	addi	r6,r6,-4
 4011c08:	d9800315 	stw	r6,12(sp)
 4011c0c:	0023883a 	mov	r17,zero
 4011c10:	d9800317 	ldw	r6,12(sp)
 4011c14:	008000c4 	movi	r2,3
 4011c18:	30836726 	beq	r6,r2,40129b8 <_dtoa_r+0x109c>
 4011c1c:	1183410e 	bge	r2,r6,4012924 <_dtoa_r+0x1008>
 4011c20:	d9c00317 	ldw	r7,12(sp)
 4011c24:	00800104 	movi	r2,4
 4011c28:	38827c26 	beq	r7,r2,401261c <_dtoa_r+0xd00>
 4011c2c:	00800144 	movi	r2,5
 4011c30:	3884c41e 	bne	r7,r2,4012f44 <_dtoa_r+0x1628>
 4011c34:	00800044 	movi	r2,1
 4011c38:	d8800b15 	stw	r2,44(sp)
 4011c3c:	d8c00517 	ldw	r3,20(sp)
 4011c40:	d9002217 	ldw	r4,136(sp)
 4011c44:	1907883a 	add	r3,r3,r4
 4011c48:	19800044 	addi	r6,r3,1
 4011c4c:	d8c00c15 	stw	r3,48(sp)
 4011c50:	d9800615 	stw	r6,24(sp)
 4011c54:	0183a40e 	bge	zero,r6,4012ae8 <_dtoa_r+0x11cc>
 4011c58:	d9800617 	ldw	r6,24(sp)
 4011c5c:	3021883a 	mov	r16,r6
 4011c60:	e0001115 	stw	zero,68(fp)
 4011c64:	008005c4 	movi	r2,23
 4011c68:	1184c92e 	bgeu	r2,r6,4012f90 <_dtoa_r+0x1674>
 4011c6c:	00c00044 	movi	r3,1
 4011c70:	00800104 	movi	r2,4
 4011c74:	1085883a 	add	r2,r2,r2
 4011c78:	11000504 	addi	r4,r2,20
 4011c7c:	180b883a 	mov	r5,r3
 4011c80:	18c00044 	addi	r3,r3,1
 4011c84:	313ffb2e 	bgeu	r6,r4,4011c74 <__alt_mem_onchip_memory2_0+0xfc0109f4>
 4011c88:	e1401115 	stw	r5,68(fp)
 4011c8c:	e009883a 	mov	r4,fp
 4011c90:	40145580 	call	4014558 <_Balloc>
 4011c94:	d8800715 	stw	r2,28(sp)
 4011c98:	e0801015 	stw	r2,64(fp)
 4011c9c:	00800384 	movi	r2,14
 4011ca0:	1400f736 	bltu	r2,r16,4012080 <_dtoa_r+0x764>
 4011ca4:	8800f626 	beq	r17,zero,4012080 <_dtoa_r+0x764>
 4011ca8:	d9c00517 	ldw	r7,20(sp)
 4011cac:	01c39a0e 	bge	zero,r7,4012b18 <_dtoa_r+0x11fc>
 4011cb0:	388003cc 	andi	r2,r7,15
 4011cb4:	100490fa 	slli	r2,r2,3
 4011cb8:	382bd13a 	srai	r21,r7,4
 4011cbc:	00c100b4 	movhi	r3,1026
 4011cc0:	18dbef04 	addi	r3,r3,28604
 4011cc4:	1885883a 	add	r2,r3,r2
 4011cc8:	a8c0040c 	andi	r3,r21,16
 4011ccc:	12400017 	ldw	r9,0(r2)
 4011cd0:	12000117 	ldw	r8,4(r2)
 4011cd4:	18037926 	beq	r3,zero,4012abc <_dtoa_r+0x11a0>
 4011cd8:	008100b4 	movhi	r2,1026
 4011cdc:	109be504 	addi	r2,r2,28564
 4011ce0:	11800817 	ldw	r6,32(r2)
 4011ce4:	11c00917 	ldw	r7,36(r2)
 4011ce8:	9009883a 	mov	r4,r18
 4011cec:	980b883a 	mov	r5,r19
 4011cf0:	da001715 	stw	r8,92(sp)
 4011cf4:	da401615 	stw	r9,88(sp)
 4011cf8:	401933c0 	call	401933c <__divdf3>
 4011cfc:	da001717 	ldw	r8,92(sp)
 4011d00:	da401617 	ldw	r9,88(sp)
 4011d04:	ad4003cc 	andi	r21,r21,15
 4011d08:	040000c4 	movi	r16,3
 4011d0c:	1023883a 	mov	r17,r2
 4011d10:	1829883a 	mov	r20,r3
 4011d14:	a8001126 	beq	r21,zero,4011d5c <_dtoa_r+0x440>
 4011d18:	05c100b4 	movhi	r23,1026
 4011d1c:	bddbe504 	addi	r23,r23,28564
 4011d20:	4805883a 	mov	r2,r9
 4011d24:	4007883a 	mov	r3,r8
 4011d28:	a980004c 	andi	r6,r21,1
 4011d2c:	1009883a 	mov	r4,r2
 4011d30:	a82bd07a 	srai	r21,r21,1
 4011d34:	180b883a 	mov	r5,r3
 4011d38:	30000426 	beq	r6,zero,4011d4c <_dtoa_r+0x430>
 4011d3c:	b9800017 	ldw	r6,0(r23)
 4011d40:	b9c00117 	ldw	r7,4(r23)
 4011d44:	84000044 	addi	r16,r16,1
 4011d48:	4019f640 	call	4019f64 <__muldf3>
 4011d4c:	bdc00204 	addi	r23,r23,8
 4011d50:	a83ff51e 	bne	r21,zero,4011d28 <__alt_mem_onchip_memory2_0+0xfc010aa8>
 4011d54:	1013883a 	mov	r9,r2
 4011d58:	1811883a 	mov	r8,r3
 4011d5c:	480d883a 	mov	r6,r9
 4011d60:	400f883a 	mov	r7,r8
 4011d64:	8809883a 	mov	r4,r17
 4011d68:	a00b883a 	mov	r5,r20
 4011d6c:	401933c0 	call	401933c <__divdf3>
 4011d70:	d8800f15 	stw	r2,60(sp)
 4011d74:	d8c01015 	stw	r3,64(sp)
 4011d78:	d8c00e17 	ldw	r3,56(sp)
 4011d7c:	18000626 	beq	r3,zero,4011d98 <_dtoa_r+0x47c>
 4011d80:	d9000f17 	ldw	r4,60(sp)
 4011d84:	d9401017 	ldw	r5,64(sp)
 4011d88:	000d883a 	mov	r6,zero
 4011d8c:	01cffc34 	movhi	r7,16368
 4011d90:	4019e700 	call	4019e70 <__ledf2>
 4011d94:	10040b16 	blt	r2,zero,4012dc4 <_dtoa_r+0x14a8>
 4011d98:	8009883a 	mov	r4,r16
 4011d9c:	401b14c0 	call	401b14c <__floatsidf>
 4011da0:	d9800f17 	ldw	r6,60(sp)
 4011da4:	d9c01017 	ldw	r7,64(sp)
 4011da8:	1009883a 	mov	r4,r2
 4011dac:	180b883a 	mov	r5,r3
 4011db0:	4019f640 	call	4019f64 <__muldf3>
 4011db4:	000d883a 	mov	r6,zero
 4011db8:	01d00734 	movhi	r7,16412
 4011dbc:	1009883a 	mov	r4,r2
 4011dc0:	180b883a 	mov	r5,r3
 4011dc4:	4018a900 	call	4018a90 <__adddf3>
 4011dc8:	1021883a 	mov	r16,r2
 4011dcc:	d8800617 	ldw	r2,24(sp)
 4011dd0:	047f3034 	movhi	r17,64704
 4011dd4:	1c63883a 	add	r17,r3,r17
 4011dd8:	10031826 	beq	r2,zero,4012a3c <_dtoa_r+0x1120>
 4011ddc:	d8c00517 	ldw	r3,20(sp)
 4011de0:	db000617 	ldw	r12,24(sp)
 4011de4:	d8c01315 	stw	r3,76(sp)
 4011de8:	d9000b17 	ldw	r4,44(sp)
 4011dec:	20038f26 	beq	r4,zero,4012c2c <_dtoa_r+0x1310>
 4011df0:	60bfffc4 	addi	r2,r12,-1
 4011df4:	100490fa 	slli	r2,r2,3
 4011df8:	00c100b4 	movhi	r3,1026
 4011dfc:	18dbef04 	addi	r3,r3,28604
 4011e00:	1885883a 	add	r2,r3,r2
 4011e04:	11800017 	ldw	r6,0(r2)
 4011e08:	11c00117 	ldw	r7,4(r2)
 4011e0c:	d8800717 	ldw	r2,28(sp)
 4011e10:	0009883a 	mov	r4,zero
 4011e14:	014ff834 	movhi	r5,16352
 4011e18:	db001615 	stw	r12,88(sp)
 4011e1c:	15c00044 	addi	r23,r2,1
 4011e20:	401933c0 	call	401933c <__divdf3>
 4011e24:	800d883a 	mov	r6,r16
 4011e28:	880f883a 	mov	r7,r17
 4011e2c:	1009883a 	mov	r4,r2
 4011e30:	180b883a 	mov	r5,r3
 4011e34:	401a7d00 	call	401a7d0 <__subdf3>
 4011e38:	d9401017 	ldw	r5,64(sp)
 4011e3c:	d9000f17 	ldw	r4,60(sp)
 4011e40:	102b883a 	mov	r21,r2
 4011e44:	d8c01215 	stw	r3,72(sp)
 4011e48:	401b0cc0 	call	401b0cc <__fixdfsi>
 4011e4c:	1009883a 	mov	r4,r2
 4011e50:	1029883a 	mov	r20,r2
 4011e54:	401b14c0 	call	401b14c <__floatsidf>
 4011e58:	d9000f17 	ldw	r4,60(sp)
 4011e5c:	d9401017 	ldw	r5,64(sp)
 4011e60:	100d883a 	mov	r6,r2
 4011e64:	180f883a 	mov	r7,r3
 4011e68:	401a7d00 	call	401a7d0 <__subdf3>
 4011e6c:	1823883a 	mov	r17,r3
 4011e70:	d8c00717 	ldw	r3,28(sp)
 4011e74:	d9401217 	ldw	r5,72(sp)
 4011e78:	a2000c04 	addi	r8,r20,48
 4011e7c:	1021883a 	mov	r16,r2
 4011e80:	1a000005 	stb	r8,0(r3)
 4011e84:	800d883a 	mov	r6,r16
 4011e88:	880f883a 	mov	r7,r17
 4011e8c:	a809883a 	mov	r4,r21
 4011e90:	4029883a 	mov	r20,r8
 4011e94:	4019d940 	call	4019d94 <__gedf2>
 4011e98:	00841d16 	blt	zero,r2,4012f10 <_dtoa_r+0x15f4>
 4011e9c:	800d883a 	mov	r6,r16
 4011ea0:	880f883a 	mov	r7,r17
 4011ea4:	0009883a 	mov	r4,zero
 4011ea8:	014ffc34 	movhi	r5,16368
 4011eac:	401a7d00 	call	401a7d0 <__subdf3>
 4011eb0:	d9401217 	ldw	r5,72(sp)
 4011eb4:	100d883a 	mov	r6,r2
 4011eb8:	180f883a 	mov	r7,r3
 4011ebc:	a809883a 	mov	r4,r21
 4011ec0:	4019d940 	call	4019d94 <__gedf2>
 4011ec4:	db001617 	ldw	r12,88(sp)
 4011ec8:	00840e16 	blt	zero,r2,4012f04 <_dtoa_r+0x15e8>
 4011ecc:	00800044 	movi	r2,1
 4011ed0:	13006b0e 	bge	r2,r12,4012080 <_dtoa_r+0x764>
 4011ed4:	d9000717 	ldw	r4,28(sp)
 4011ed8:	dd800f15 	stw	r22,60(sp)
 4011edc:	dcc01015 	stw	r19,64(sp)
 4011ee0:	2319883a 	add	r12,r4,r12
 4011ee4:	dcc01217 	ldw	r19,72(sp)
 4011ee8:	602d883a 	mov	r22,r12
 4011eec:	dc801215 	stw	r18,72(sp)
 4011ef0:	b825883a 	mov	r18,r23
 4011ef4:	00000906 	br	4011f1c <_dtoa_r+0x600>
 4011ef8:	401a7d00 	call	401a7d0 <__subdf3>
 4011efc:	a80d883a 	mov	r6,r21
 4011f00:	980f883a 	mov	r7,r19
 4011f04:	1009883a 	mov	r4,r2
 4011f08:	180b883a 	mov	r5,r3
 4011f0c:	4019e700 	call	4019e70 <__ledf2>
 4011f10:	1003e816 	blt	r2,zero,4012eb4 <_dtoa_r+0x1598>
 4011f14:	b825883a 	mov	r18,r23
 4011f18:	bd83e926 	beq	r23,r22,4012ec0 <_dtoa_r+0x15a4>
 4011f1c:	a809883a 	mov	r4,r21
 4011f20:	980b883a 	mov	r5,r19
 4011f24:	000d883a 	mov	r6,zero
 4011f28:	01d00934 	movhi	r7,16420
 4011f2c:	4019f640 	call	4019f64 <__muldf3>
 4011f30:	000d883a 	mov	r6,zero
 4011f34:	01d00934 	movhi	r7,16420
 4011f38:	8009883a 	mov	r4,r16
 4011f3c:	880b883a 	mov	r5,r17
 4011f40:	102b883a 	mov	r21,r2
 4011f44:	1827883a 	mov	r19,r3
 4011f48:	4019f640 	call	4019f64 <__muldf3>
 4011f4c:	180b883a 	mov	r5,r3
 4011f50:	1009883a 	mov	r4,r2
 4011f54:	1821883a 	mov	r16,r3
 4011f58:	1023883a 	mov	r17,r2
 4011f5c:	401b0cc0 	call	401b0cc <__fixdfsi>
 4011f60:	1009883a 	mov	r4,r2
 4011f64:	1029883a 	mov	r20,r2
 4011f68:	401b14c0 	call	401b14c <__floatsidf>
 4011f6c:	8809883a 	mov	r4,r17
 4011f70:	800b883a 	mov	r5,r16
 4011f74:	100d883a 	mov	r6,r2
 4011f78:	180f883a 	mov	r7,r3
 4011f7c:	401a7d00 	call	401a7d0 <__subdf3>
 4011f80:	a5000c04 	addi	r20,r20,48
 4011f84:	a80d883a 	mov	r6,r21
 4011f88:	980f883a 	mov	r7,r19
 4011f8c:	1009883a 	mov	r4,r2
 4011f90:	180b883a 	mov	r5,r3
 4011f94:	95000005 	stb	r20,0(r18)
 4011f98:	1021883a 	mov	r16,r2
 4011f9c:	1823883a 	mov	r17,r3
 4011fa0:	4019e700 	call	4019e70 <__ledf2>
 4011fa4:	bdc00044 	addi	r23,r23,1
 4011fa8:	800d883a 	mov	r6,r16
 4011fac:	880f883a 	mov	r7,r17
 4011fb0:	0009883a 	mov	r4,zero
 4011fb4:	014ffc34 	movhi	r5,16368
 4011fb8:	103fcf0e 	bge	r2,zero,4011ef8 <__alt_mem_onchip_memory2_0+0xfc010c78>
 4011fbc:	d8c01317 	ldw	r3,76(sp)
 4011fc0:	d8c00515 	stw	r3,20(sp)
 4011fc4:	d9400917 	ldw	r5,36(sp)
 4011fc8:	e009883a 	mov	r4,fp
 4011fcc:	40146000 	call	4014600 <_Bfree>
 4011fd0:	d9000517 	ldw	r4,20(sp)
 4011fd4:	d9802317 	ldw	r6,140(sp)
 4011fd8:	d9c02517 	ldw	r7,148(sp)
 4011fdc:	b8000005 	stb	zero,0(r23)
 4011fe0:	20800044 	addi	r2,r4,1
 4011fe4:	30800015 	stw	r2,0(r6)
 4011fe8:	3802aa26 	beq	r7,zero,4012a94 <_dtoa_r+0x1178>
 4011fec:	3dc00015 	stw	r23,0(r7)
 4011ff0:	d8800717 	ldw	r2,28(sp)
 4011ff4:	003e7906 	br	40119dc <__alt_mem_onchip_memory2_0+0xfc01075c>
 4011ff8:	00800434 	movhi	r2,16
 4011ffc:	10bfffc4 	addi	r2,r2,-1
 4012000:	88a2703a 	and	r17,r17,r2
 4012004:	883e851e 	bne	r17,zero,4011a1c <__alt_mem_onchip_memory2_0+0xfc01079c>
 4012008:	008100b4 	movhi	r2,1026
 401200c:	109bd104 	addi	r2,r2,28484
 4012010:	003e8406 	br	4011a24 <__alt_mem_onchip_memory2_0+0xfc0107a4>
 4012014:	10c00204 	addi	r3,r2,8
 4012018:	003e8706 	br	4011a38 <__alt_mem_onchip_memory2_0+0xfc0107b8>
 401201c:	01400434 	movhi	r5,16
 4012020:	297fffc4 	addi	r5,r5,-1
 4012024:	994a703a 	and	r5,r19,r5
 4012028:	9009883a 	mov	r4,r18
 401202c:	843f0044 	addi	r16,r16,-1023
 4012030:	294ffc34 	orhi	r5,r5,16368
 4012034:	dd800217 	ldw	r22,8(sp)
 4012038:	d8001115 	stw	zero,68(sp)
 401203c:	003ea506 	br	4011ad4 <__alt_mem_onchip_memory2_0+0xfc010854>
 4012040:	008100b4 	movhi	r2,1026
 4012044:	109bc804 	addi	r2,r2,28448
 4012048:	003e6406 	br	40119dc <__alt_mem_onchip_memory2_0+0xfc01075c>
 401204c:	e0001115 	stw	zero,68(fp)
 4012050:	000b883a 	mov	r5,zero
 4012054:	e009883a 	mov	r4,fp
 4012058:	40145580 	call	4014558 <_Balloc>
 401205c:	01bfffc4 	movi	r6,-1
 4012060:	01c00044 	movi	r7,1
 4012064:	d8800715 	stw	r2,28(sp)
 4012068:	d9800c15 	stw	r6,48(sp)
 401206c:	e0801015 	stw	r2,64(fp)
 4012070:	d8000315 	stw	zero,12(sp)
 4012074:	d9c00b15 	stw	r7,44(sp)
 4012078:	d9800615 	stw	r6,24(sp)
 401207c:	d8002215 	stw	zero,136(sp)
 4012080:	d8800117 	ldw	r2,4(sp)
 4012084:	10008916 	blt	r2,zero,40122ac <_dtoa_r+0x990>
 4012088:	d9000517 	ldw	r4,20(sp)
 401208c:	00c00384 	movi	r3,14
 4012090:	19008616 	blt	r3,r4,40122ac <_dtoa_r+0x990>
 4012094:	200490fa 	slli	r2,r4,3
 4012098:	00c100b4 	movhi	r3,1026
 401209c:	d9802217 	ldw	r6,136(sp)
 40120a0:	18dbef04 	addi	r3,r3,28604
 40120a4:	1885883a 	add	r2,r3,r2
 40120a8:	14000017 	ldw	r16,0(r2)
 40120ac:	14400117 	ldw	r17,4(r2)
 40120b0:	30016316 	blt	r6,zero,4012640 <_dtoa_r+0xd24>
 40120b4:	800d883a 	mov	r6,r16
 40120b8:	880f883a 	mov	r7,r17
 40120bc:	9009883a 	mov	r4,r18
 40120c0:	980b883a 	mov	r5,r19
 40120c4:	401933c0 	call	401933c <__divdf3>
 40120c8:	180b883a 	mov	r5,r3
 40120cc:	1009883a 	mov	r4,r2
 40120d0:	401b0cc0 	call	401b0cc <__fixdfsi>
 40120d4:	1009883a 	mov	r4,r2
 40120d8:	102b883a 	mov	r21,r2
 40120dc:	401b14c0 	call	401b14c <__floatsidf>
 40120e0:	800d883a 	mov	r6,r16
 40120e4:	880f883a 	mov	r7,r17
 40120e8:	1009883a 	mov	r4,r2
 40120ec:	180b883a 	mov	r5,r3
 40120f0:	4019f640 	call	4019f64 <__muldf3>
 40120f4:	100d883a 	mov	r6,r2
 40120f8:	180f883a 	mov	r7,r3
 40120fc:	9009883a 	mov	r4,r18
 4012100:	980b883a 	mov	r5,r19
 4012104:	401a7d00 	call	401a7d0 <__subdf3>
 4012108:	d9c00717 	ldw	r7,28(sp)
 401210c:	1009883a 	mov	r4,r2
 4012110:	a8800c04 	addi	r2,r21,48
 4012114:	38800005 	stb	r2,0(r7)
 4012118:	3dc00044 	addi	r23,r7,1
 401211c:	d9c00617 	ldw	r7,24(sp)
 4012120:	01800044 	movi	r6,1
 4012124:	180b883a 	mov	r5,r3
 4012128:	2005883a 	mov	r2,r4
 401212c:	39803826 	beq	r7,r6,4012210 <_dtoa_r+0x8f4>
 4012130:	000d883a 	mov	r6,zero
 4012134:	01d00934 	movhi	r7,16420
 4012138:	4019f640 	call	4019f64 <__muldf3>
 401213c:	000d883a 	mov	r6,zero
 4012140:	000f883a 	mov	r7,zero
 4012144:	1009883a 	mov	r4,r2
 4012148:	180b883a 	mov	r5,r3
 401214c:	1025883a 	mov	r18,r2
 4012150:	1827883a 	mov	r19,r3
 4012154:	4019d0c0 	call	4019d0c <__eqdf2>
 4012158:	103f9a26 	beq	r2,zero,4011fc4 <__alt_mem_onchip_memory2_0+0xfc010d44>
 401215c:	d9c00617 	ldw	r7,24(sp)
 4012160:	d8c00717 	ldw	r3,28(sp)
 4012164:	b829883a 	mov	r20,r23
 4012168:	38bfffc4 	addi	r2,r7,-1
 401216c:	18ad883a 	add	r22,r3,r2
 4012170:	00000a06 	br	401219c <_dtoa_r+0x880>
 4012174:	4019f640 	call	4019f64 <__muldf3>
 4012178:	000d883a 	mov	r6,zero
 401217c:	000f883a 	mov	r7,zero
 4012180:	1009883a 	mov	r4,r2
 4012184:	180b883a 	mov	r5,r3
 4012188:	1025883a 	mov	r18,r2
 401218c:	1827883a 	mov	r19,r3
 4012190:	b829883a 	mov	r20,r23
 4012194:	4019d0c0 	call	4019d0c <__eqdf2>
 4012198:	103f8a26 	beq	r2,zero,4011fc4 <__alt_mem_onchip_memory2_0+0xfc010d44>
 401219c:	800d883a 	mov	r6,r16
 40121a0:	880f883a 	mov	r7,r17
 40121a4:	9009883a 	mov	r4,r18
 40121a8:	980b883a 	mov	r5,r19
 40121ac:	401933c0 	call	401933c <__divdf3>
 40121b0:	180b883a 	mov	r5,r3
 40121b4:	1009883a 	mov	r4,r2
 40121b8:	401b0cc0 	call	401b0cc <__fixdfsi>
 40121bc:	1009883a 	mov	r4,r2
 40121c0:	102b883a 	mov	r21,r2
 40121c4:	401b14c0 	call	401b14c <__floatsidf>
 40121c8:	800d883a 	mov	r6,r16
 40121cc:	880f883a 	mov	r7,r17
 40121d0:	1009883a 	mov	r4,r2
 40121d4:	180b883a 	mov	r5,r3
 40121d8:	4019f640 	call	4019f64 <__muldf3>
 40121dc:	100d883a 	mov	r6,r2
 40121e0:	180f883a 	mov	r7,r3
 40121e4:	9009883a 	mov	r4,r18
 40121e8:	980b883a 	mov	r5,r19
 40121ec:	401a7d00 	call	401a7d0 <__subdf3>
 40121f0:	aa000c04 	addi	r8,r21,48
 40121f4:	a2000005 	stb	r8,0(r20)
 40121f8:	000d883a 	mov	r6,zero
 40121fc:	01d00934 	movhi	r7,16420
 4012200:	1009883a 	mov	r4,r2
 4012204:	180b883a 	mov	r5,r3
 4012208:	a5c00044 	addi	r23,r20,1
 401220c:	b53fd91e 	bne	r22,r20,4012174 <__alt_mem_onchip_memory2_0+0xfc010ef4>
 4012210:	100d883a 	mov	r6,r2
 4012214:	180f883a 	mov	r7,r3
 4012218:	1009883a 	mov	r4,r2
 401221c:	180b883a 	mov	r5,r3
 4012220:	4018a900 	call	4018a90 <__adddf3>
 4012224:	100d883a 	mov	r6,r2
 4012228:	180f883a 	mov	r7,r3
 401222c:	8009883a 	mov	r4,r16
 4012230:	880b883a 	mov	r5,r17
 4012234:	1027883a 	mov	r19,r2
 4012238:	1825883a 	mov	r18,r3
 401223c:	4019e700 	call	4019e70 <__ledf2>
 4012240:	10000816 	blt	r2,zero,4012264 <_dtoa_r+0x948>
 4012244:	980d883a 	mov	r6,r19
 4012248:	900f883a 	mov	r7,r18
 401224c:	8009883a 	mov	r4,r16
 4012250:	880b883a 	mov	r5,r17
 4012254:	4019d0c0 	call	4019d0c <__eqdf2>
 4012258:	103f5a1e 	bne	r2,zero,4011fc4 <__alt_mem_onchip_memory2_0+0xfc010d44>
 401225c:	ad40004c 	andi	r21,r21,1
 4012260:	a83f5826 	beq	r21,zero,4011fc4 <__alt_mem_onchip_memory2_0+0xfc010d44>
 4012264:	bd3fffc3 	ldbu	r20,-1(r23)
 4012268:	b8bfffc4 	addi	r2,r23,-1
 401226c:	1007883a 	mov	r3,r2
 4012270:	01400e44 	movi	r5,57
 4012274:	d9800717 	ldw	r6,28(sp)
 4012278:	00000506 	br	4012290 <_dtoa_r+0x974>
 401227c:	18ffffc4 	addi	r3,r3,-1
 4012280:	11824726 	beq	r2,r6,4012ba0 <_dtoa_r+0x1284>
 4012284:	1d000003 	ldbu	r20,0(r3)
 4012288:	102f883a 	mov	r23,r2
 401228c:	10bfffc4 	addi	r2,r2,-1
 4012290:	a1003fcc 	andi	r4,r20,255
 4012294:	2100201c 	xori	r4,r4,128
 4012298:	213fe004 	addi	r4,r4,-128
 401229c:	217ff726 	beq	r4,r5,401227c <__alt_mem_onchip_memory2_0+0xfc010ffc>
 40122a0:	a2000044 	addi	r8,r20,1
 40122a4:	12000005 	stb	r8,0(r2)
 40122a8:	003f4606 	br	4011fc4 <__alt_mem_onchip_memory2_0+0xfc010d44>
 40122ac:	d9000b17 	ldw	r4,44(sp)
 40122b0:	2000c826 	beq	r4,zero,40125d4 <_dtoa_r+0xcb8>
 40122b4:	d9800317 	ldw	r6,12(sp)
 40122b8:	00c00044 	movi	r3,1
 40122bc:	1980f90e 	bge	r3,r6,40126a4 <_dtoa_r+0xd88>
 40122c0:	d8800617 	ldw	r2,24(sp)
 40122c4:	d8c00a17 	ldw	r3,40(sp)
 40122c8:	157fffc4 	addi	r21,r2,-1
 40122cc:	1d41f316 	blt	r3,r21,4012a9c <_dtoa_r+0x1180>
 40122d0:	1d6bc83a 	sub	r21,r3,r21
 40122d4:	d9c00617 	ldw	r7,24(sp)
 40122d8:	3802aa16 	blt	r7,zero,4012d84 <_dtoa_r+0x1468>
 40122dc:	dd000817 	ldw	r20,32(sp)
 40122e0:	d8800617 	ldw	r2,24(sp)
 40122e4:	d8c00817 	ldw	r3,32(sp)
 40122e8:	01400044 	movi	r5,1
 40122ec:	e009883a 	mov	r4,fp
 40122f0:	1887883a 	add	r3,r3,r2
 40122f4:	d8c00815 	stw	r3,32(sp)
 40122f8:	b0ad883a 	add	r22,r22,r2
 40122fc:	401498c0 	call	401498c <__i2b>
 4012300:	1023883a 	mov	r17,r2
 4012304:	a0000826 	beq	r20,zero,4012328 <_dtoa_r+0xa0c>
 4012308:	0580070e 	bge	zero,r22,4012328 <_dtoa_r+0xa0c>
 401230c:	a005883a 	mov	r2,r20
 4012310:	b500b916 	blt	r22,r20,40125f8 <_dtoa_r+0xcdc>
 4012314:	d9000817 	ldw	r4,32(sp)
 4012318:	a0a9c83a 	sub	r20,r20,r2
 401231c:	b0adc83a 	sub	r22,r22,r2
 4012320:	2089c83a 	sub	r4,r4,r2
 4012324:	d9000815 	stw	r4,32(sp)
 4012328:	d9800a17 	ldw	r6,40(sp)
 401232c:	0181810e 	bge	zero,r6,4012934 <_dtoa_r+0x1018>
 4012330:	d9c00b17 	ldw	r7,44(sp)
 4012334:	3800b326 	beq	r7,zero,4012604 <_dtoa_r+0xce8>
 4012338:	a800b226 	beq	r21,zero,4012604 <_dtoa_r+0xce8>
 401233c:	880b883a 	mov	r5,r17
 4012340:	a80d883a 	mov	r6,r21
 4012344:	e009883a 	mov	r4,fp
 4012348:	4014c540 	call	4014c54 <__pow5mult>
 401234c:	d9800917 	ldw	r6,36(sp)
 4012350:	100b883a 	mov	r5,r2
 4012354:	e009883a 	mov	r4,fp
 4012358:	1023883a 	mov	r17,r2
 401235c:	40149c80 	call	40149c8 <__multiply>
 4012360:	1021883a 	mov	r16,r2
 4012364:	d8800a17 	ldw	r2,40(sp)
 4012368:	d9400917 	ldw	r5,36(sp)
 401236c:	e009883a 	mov	r4,fp
 4012370:	1545c83a 	sub	r2,r2,r21
 4012374:	d8800a15 	stw	r2,40(sp)
 4012378:	40146000 	call	4014600 <_Bfree>
 401237c:	d8c00a17 	ldw	r3,40(sp)
 4012380:	18009f1e 	bne	r3,zero,4012600 <_dtoa_r+0xce4>
 4012384:	05c00044 	movi	r23,1
 4012388:	e009883a 	mov	r4,fp
 401238c:	b80b883a 	mov	r5,r23
 4012390:	401498c0 	call	401498c <__i2b>
 4012394:	d9000d17 	ldw	r4,52(sp)
 4012398:	102b883a 	mov	r21,r2
 401239c:	2000ce26 	beq	r4,zero,40126d8 <_dtoa_r+0xdbc>
 40123a0:	200d883a 	mov	r6,r4
 40123a4:	100b883a 	mov	r5,r2
 40123a8:	e009883a 	mov	r4,fp
 40123ac:	4014c540 	call	4014c54 <__pow5mult>
 40123b0:	d9800317 	ldw	r6,12(sp)
 40123b4:	102b883a 	mov	r21,r2
 40123b8:	b981810e 	bge	r23,r6,40129c0 <_dtoa_r+0x10a4>
 40123bc:	0027883a 	mov	r19,zero
 40123c0:	a8800417 	ldw	r2,16(r21)
 40123c4:	05c00804 	movi	r23,32
 40123c8:	10800104 	addi	r2,r2,4
 40123cc:	1085883a 	add	r2,r2,r2
 40123d0:	1085883a 	add	r2,r2,r2
 40123d4:	a885883a 	add	r2,r21,r2
 40123d8:	11000017 	ldw	r4,0(r2)
 40123dc:	40148740 	call	4014874 <__hi0bits>
 40123e0:	b885c83a 	sub	r2,r23,r2
 40123e4:	1585883a 	add	r2,r2,r22
 40123e8:	108007cc 	andi	r2,r2,31
 40123ec:	1000b326 	beq	r2,zero,40126bc <_dtoa_r+0xda0>
 40123f0:	00c00804 	movi	r3,32
 40123f4:	1887c83a 	sub	r3,r3,r2
 40123f8:	01000104 	movi	r4,4
 40123fc:	20c2cd0e 	bge	r4,r3,4012f34 <_dtoa_r+0x1618>
 4012400:	00c00704 	movi	r3,28
 4012404:	1885c83a 	sub	r2,r3,r2
 4012408:	d8c00817 	ldw	r3,32(sp)
 401240c:	a0a9883a 	add	r20,r20,r2
 4012410:	b0ad883a 	add	r22,r22,r2
 4012414:	1887883a 	add	r3,r3,r2
 4012418:	d8c00815 	stw	r3,32(sp)
 401241c:	d9800817 	ldw	r6,32(sp)
 4012420:	0180040e 	bge	zero,r6,4012434 <_dtoa_r+0xb18>
 4012424:	800b883a 	mov	r5,r16
 4012428:	e009883a 	mov	r4,fp
 401242c:	4014d940 	call	4014d94 <__lshift>
 4012430:	1021883a 	mov	r16,r2
 4012434:	0580050e 	bge	zero,r22,401244c <_dtoa_r+0xb30>
 4012438:	a80b883a 	mov	r5,r21
 401243c:	b00d883a 	mov	r6,r22
 4012440:	e009883a 	mov	r4,fp
 4012444:	4014d940 	call	4014d94 <__lshift>
 4012448:	102b883a 	mov	r21,r2
 401244c:	d9c00e17 	ldw	r7,56(sp)
 4012450:	3801211e 	bne	r7,zero,40128d8 <_dtoa_r+0xfbc>
 4012454:	d9800617 	ldw	r6,24(sp)
 4012458:	0181380e 	bge	zero,r6,401293c <_dtoa_r+0x1020>
 401245c:	d8c00b17 	ldw	r3,44(sp)
 4012460:	1800ab1e 	bne	r3,zero,4012710 <_dtoa_r+0xdf4>
 4012464:	dc800717 	ldw	r18,28(sp)
 4012468:	dcc00617 	ldw	r19,24(sp)
 401246c:	9029883a 	mov	r20,r18
 4012470:	00000206 	br	401247c <_dtoa_r+0xb60>
 4012474:	40146280 	call	4014628 <__multadd>
 4012478:	1021883a 	mov	r16,r2
 401247c:	a80b883a 	mov	r5,r21
 4012480:	8009883a 	mov	r4,r16
 4012484:	40116f40 	call	40116f4 <quorem>
 4012488:	10800c04 	addi	r2,r2,48
 401248c:	90800005 	stb	r2,0(r18)
 4012490:	94800044 	addi	r18,r18,1
 4012494:	9507c83a 	sub	r3,r18,r20
 4012498:	000f883a 	mov	r7,zero
 401249c:	01800284 	movi	r6,10
 40124a0:	800b883a 	mov	r5,r16
 40124a4:	e009883a 	mov	r4,fp
 40124a8:	1cfff216 	blt	r3,r19,4012474 <__alt_mem_onchip_memory2_0+0xfc0111f4>
 40124ac:	1011883a 	mov	r8,r2
 40124b0:	d8800617 	ldw	r2,24(sp)
 40124b4:	0082370e 	bge	zero,r2,4012d94 <_dtoa_r+0x1478>
 40124b8:	d9000717 	ldw	r4,28(sp)
 40124bc:	0025883a 	mov	r18,zero
 40124c0:	20af883a 	add	r23,r4,r2
 40124c4:	01800044 	movi	r6,1
 40124c8:	800b883a 	mov	r5,r16
 40124cc:	e009883a 	mov	r4,fp
 40124d0:	da001715 	stw	r8,92(sp)
 40124d4:	4014d940 	call	4014d94 <__lshift>
 40124d8:	a80b883a 	mov	r5,r21
 40124dc:	1009883a 	mov	r4,r2
 40124e0:	d8800915 	stw	r2,36(sp)
 40124e4:	4014edc0 	call	4014edc <__mcmp>
 40124e8:	da001717 	ldw	r8,92(sp)
 40124ec:	0081800e 	bge	zero,r2,4012af0 <_dtoa_r+0x11d4>
 40124f0:	b93fffc3 	ldbu	r4,-1(r23)
 40124f4:	b8bfffc4 	addi	r2,r23,-1
 40124f8:	1007883a 	mov	r3,r2
 40124fc:	01800e44 	movi	r6,57
 4012500:	d9c00717 	ldw	r7,28(sp)
 4012504:	00000506 	br	401251c <_dtoa_r+0xc00>
 4012508:	18ffffc4 	addi	r3,r3,-1
 401250c:	11c12326 	beq	r2,r7,401299c <_dtoa_r+0x1080>
 4012510:	19000003 	ldbu	r4,0(r3)
 4012514:	102f883a 	mov	r23,r2
 4012518:	10bfffc4 	addi	r2,r2,-1
 401251c:	21403fcc 	andi	r5,r4,255
 4012520:	2940201c 	xori	r5,r5,128
 4012524:	297fe004 	addi	r5,r5,-128
 4012528:	29bff726 	beq	r5,r6,4012508 <__alt_mem_onchip_memory2_0+0xfc011288>
 401252c:	21000044 	addi	r4,r4,1
 4012530:	11000005 	stb	r4,0(r2)
 4012534:	a80b883a 	mov	r5,r21
 4012538:	e009883a 	mov	r4,fp
 401253c:	40146000 	call	4014600 <_Bfree>
 4012540:	883ea026 	beq	r17,zero,4011fc4 <__alt_mem_onchip_memory2_0+0xfc010d44>
 4012544:	90000426 	beq	r18,zero,4012558 <_dtoa_r+0xc3c>
 4012548:	94400326 	beq	r18,r17,4012558 <_dtoa_r+0xc3c>
 401254c:	900b883a 	mov	r5,r18
 4012550:	e009883a 	mov	r4,fp
 4012554:	40146000 	call	4014600 <_Bfree>
 4012558:	880b883a 	mov	r5,r17
 401255c:	e009883a 	mov	r4,fp
 4012560:	40146000 	call	4014600 <_Bfree>
 4012564:	003e9706 	br	4011fc4 <__alt_mem_onchip_memory2_0+0xfc010d44>
 4012568:	01800044 	movi	r6,1
 401256c:	d9800e15 	stw	r6,56(sp)
 4012570:	003d9606 	br	4011bcc <__alt_mem_onchip_memory2_0+0xfc01094c>
 4012574:	d8800817 	ldw	r2,32(sp)
 4012578:	d8c00517 	ldw	r3,20(sp)
 401257c:	d8000d15 	stw	zero,52(sp)
 4012580:	10c5c83a 	sub	r2,r2,r3
 4012584:	00c9c83a 	sub	r4,zero,r3
 4012588:	d8800815 	stw	r2,32(sp)
 401258c:	d9000a15 	stw	r4,40(sp)
 4012590:	003d9706 	br	4011bf0 <__alt_mem_onchip_memory2_0+0xfc010970>
 4012594:	05adc83a 	sub	r22,zero,r22
 4012598:	dd800815 	stw	r22,32(sp)
 401259c:	002d883a 	mov	r22,zero
 40125a0:	003d8e06 	br	4011bdc <__alt_mem_onchip_memory2_0+0xfc01095c>
 40125a4:	d9000517 	ldw	r4,20(sp)
 40125a8:	401b14c0 	call	401b14c <__floatsidf>
 40125ac:	100d883a 	mov	r6,r2
 40125b0:	180f883a 	mov	r7,r3
 40125b4:	a009883a 	mov	r4,r20
 40125b8:	880b883a 	mov	r5,r17
 40125bc:	4019d0c0 	call	4019d0c <__eqdf2>
 40125c0:	103d7126 	beq	r2,zero,4011b88 <__alt_mem_onchip_memory2_0+0xfc010908>
 40125c4:	d9c00517 	ldw	r7,20(sp)
 40125c8:	39ffffc4 	addi	r7,r7,-1
 40125cc:	d9c00515 	stw	r7,20(sp)
 40125d0:	003d6d06 	br	4011b88 <__alt_mem_onchip_memory2_0+0xfc010908>
 40125d4:	dd400a17 	ldw	r21,40(sp)
 40125d8:	dd000817 	ldw	r20,32(sp)
 40125dc:	0023883a 	mov	r17,zero
 40125e0:	003f4806 	br	4012304 <__alt_mem_onchip_memory2_0+0xfc011084>
 40125e4:	10e3c83a 	sub	r17,r2,r3
 40125e8:	9448983a 	sll	r4,r18,r17
 40125ec:	003d3206 	br	4011ab8 <__alt_mem_onchip_memory2_0+0xfc010838>
 40125f0:	d8000e15 	stw	zero,56(sp)
 40125f4:	003d7506 	br	4011bcc <__alt_mem_onchip_memory2_0+0xfc01094c>
 40125f8:	b005883a 	mov	r2,r22
 40125fc:	003f4506 	br	4012314 <__alt_mem_onchip_memory2_0+0xfc011094>
 4012600:	dc000915 	stw	r16,36(sp)
 4012604:	d9800a17 	ldw	r6,40(sp)
 4012608:	d9400917 	ldw	r5,36(sp)
 401260c:	e009883a 	mov	r4,fp
 4012610:	4014c540 	call	4014c54 <__pow5mult>
 4012614:	1021883a 	mov	r16,r2
 4012618:	003f5a06 	br	4012384 <__alt_mem_onchip_memory2_0+0xfc011104>
 401261c:	01c00044 	movi	r7,1
 4012620:	d9c00b15 	stw	r7,44(sp)
 4012624:	d8802217 	ldw	r2,136(sp)
 4012628:	0081280e 	bge	zero,r2,4012acc <_dtoa_r+0x11b0>
 401262c:	100d883a 	mov	r6,r2
 4012630:	1021883a 	mov	r16,r2
 4012634:	d8800c15 	stw	r2,48(sp)
 4012638:	d8800615 	stw	r2,24(sp)
 401263c:	003d8806 	br	4011c60 <__alt_mem_onchip_memory2_0+0xfc0109e0>
 4012640:	d8800617 	ldw	r2,24(sp)
 4012644:	00be9b16 	blt	zero,r2,40120b4 <__alt_mem_onchip_memory2_0+0xfc010e34>
 4012648:	10010f1e 	bne	r2,zero,4012a88 <_dtoa_r+0x116c>
 401264c:	880b883a 	mov	r5,r17
 4012650:	000d883a 	mov	r6,zero
 4012654:	01d00534 	movhi	r7,16404
 4012658:	8009883a 	mov	r4,r16
 401265c:	4019f640 	call	4019f64 <__muldf3>
 4012660:	900d883a 	mov	r6,r18
 4012664:	980f883a 	mov	r7,r19
 4012668:	1009883a 	mov	r4,r2
 401266c:	180b883a 	mov	r5,r3
 4012670:	4019d940 	call	4019d94 <__gedf2>
 4012674:	002b883a 	mov	r21,zero
 4012678:	0023883a 	mov	r17,zero
 401267c:	1000bf16 	blt	r2,zero,401297c <_dtoa_r+0x1060>
 4012680:	d9802217 	ldw	r6,136(sp)
 4012684:	ddc00717 	ldw	r23,28(sp)
 4012688:	018c303a 	nor	r6,zero,r6
 401268c:	d9800515 	stw	r6,20(sp)
 4012690:	a80b883a 	mov	r5,r21
 4012694:	e009883a 	mov	r4,fp
 4012698:	40146000 	call	4014600 <_Bfree>
 401269c:	883e4926 	beq	r17,zero,4011fc4 <__alt_mem_onchip_memory2_0+0xfc010d44>
 40126a0:	003fad06 	br	4012558 <__alt_mem_onchip_memory2_0+0xfc0112d8>
 40126a4:	d9c01117 	ldw	r7,68(sp)
 40126a8:	3801bc26 	beq	r7,zero,4012d9c <_dtoa_r+0x1480>
 40126ac:	10810cc4 	addi	r2,r2,1075
 40126b0:	dd400a17 	ldw	r21,40(sp)
 40126b4:	dd000817 	ldw	r20,32(sp)
 40126b8:	003f0a06 	br	40122e4 <__alt_mem_onchip_memory2_0+0xfc011064>
 40126bc:	00800704 	movi	r2,28
 40126c0:	d9000817 	ldw	r4,32(sp)
 40126c4:	a0a9883a 	add	r20,r20,r2
 40126c8:	b0ad883a 	add	r22,r22,r2
 40126cc:	2089883a 	add	r4,r4,r2
 40126d0:	d9000815 	stw	r4,32(sp)
 40126d4:	003f5106 	br	401241c <__alt_mem_onchip_memory2_0+0xfc01119c>
 40126d8:	d8c00317 	ldw	r3,12(sp)
 40126dc:	b8c1fc0e 	bge	r23,r3,4012ed0 <_dtoa_r+0x15b4>
 40126e0:	0027883a 	mov	r19,zero
 40126e4:	b805883a 	mov	r2,r23
 40126e8:	003f3e06 	br	40123e4 <__alt_mem_onchip_memory2_0+0xfc011164>
 40126ec:	880b883a 	mov	r5,r17
 40126f0:	e009883a 	mov	r4,fp
 40126f4:	000f883a 	mov	r7,zero
 40126f8:	01800284 	movi	r6,10
 40126fc:	40146280 	call	4014628 <__multadd>
 4012700:	d9000c17 	ldw	r4,48(sp)
 4012704:	1023883a 	mov	r17,r2
 4012708:	0102040e 	bge	zero,r4,4012f1c <_dtoa_r+0x1600>
 401270c:	d9000615 	stw	r4,24(sp)
 4012710:	0500050e 	bge	zero,r20,4012728 <_dtoa_r+0xe0c>
 4012714:	880b883a 	mov	r5,r17
 4012718:	a00d883a 	mov	r6,r20
 401271c:	e009883a 	mov	r4,fp
 4012720:	4014d940 	call	4014d94 <__lshift>
 4012724:	1023883a 	mov	r17,r2
 4012728:	9801241e 	bne	r19,zero,4012bbc <_dtoa_r+0x12a0>
 401272c:	8829883a 	mov	r20,r17
 4012730:	d9000617 	ldw	r4,24(sp)
 4012734:	dcc00717 	ldw	r19,28(sp)
 4012738:	9480004c 	andi	r18,r18,1
 401273c:	20bfffc4 	addi	r2,r4,-1
 4012740:	9885883a 	add	r2,r19,r2
 4012744:	d8800415 	stw	r2,16(sp)
 4012748:	dc800615 	stw	r18,24(sp)
 401274c:	a80b883a 	mov	r5,r21
 4012750:	8009883a 	mov	r4,r16
 4012754:	40116f40 	call	40116f4 <quorem>
 4012758:	880b883a 	mov	r5,r17
 401275c:	8009883a 	mov	r4,r16
 4012760:	102f883a 	mov	r23,r2
 4012764:	4014edc0 	call	4014edc <__mcmp>
 4012768:	a80b883a 	mov	r5,r21
 401276c:	a00d883a 	mov	r6,r20
 4012770:	e009883a 	mov	r4,fp
 4012774:	102d883a 	mov	r22,r2
 4012778:	4014f3c0 	call	4014f3c <__mdiff>
 401277c:	1007883a 	mov	r3,r2
 4012780:	10800317 	ldw	r2,12(r2)
 4012784:	bc800c04 	addi	r18,r23,48
 4012788:	180b883a 	mov	r5,r3
 401278c:	10004e1e 	bne	r2,zero,40128c8 <_dtoa_r+0xfac>
 4012790:	8009883a 	mov	r4,r16
 4012794:	d8c01615 	stw	r3,88(sp)
 4012798:	4014edc0 	call	4014edc <__mcmp>
 401279c:	d8c01617 	ldw	r3,88(sp)
 40127a0:	e009883a 	mov	r4,fp
 40127a4:	d8801615 	stw	r2,88(sp)
 40127a8:	180b883a 	mov	r5,r3
 40127ac:	40146000 	call	4014600 <_Bfree>
 40127b0:	d8801617 	ldw	r2,88(sp)
 40127b4:	1000041e 	bne	r2,zero,40127c8 <_dtoa_r+0xeac>
 40127b8:	d9800317 	ldw	r6,12(sp)
 40127bc:	3000021e 	bne	r6,zero,40127c8 <_dtoa_r+0xeac>
 40127c0:	d8c00617 	ldw	r3,24(sp)
 40127c4:	18003726 	beq	r3,zero,40128a4 <_dtoa_r+0xf88>
 40127c8:	b0002016 	blt	r22,zero,401284c <_dtoa_r+0xf30>
 40127cc:	b000041e 	bne	r22,zero,40127e0 <_dtoa_r+0xec4>
 40127d0:	d9000317 	ldw	r4,12(sp)
 40127d4:	2000021e 	bne	r4,zero,40127e0 <_dtoa_r+0xec4>
 40127d8:	d8c00617 	ldw	r3,24(sp)
 40127dc:	18001b26 	beq	r3,zero,401284c <_dtoa_r+0xf30>
 40127e0:	00810716 	blt	zero,r2,4012c00 <_dtoa_r+0x12e4>
 40127e4:	d8c00417 	ldw	r3,16(sp)
 40127e8:	9d800044 	addi	r22,r19,1
 40127ec:	9c800005 	stb	r18,0(r19)
 40127f0:	b02f883a 	mov	r23,r22
 40127f4:	98c10626 	beq	r19,r3,4012c10 <_dtoa_r+0x12f4>
 40127f8:	800b883a 	mov	r5,r16
 40127fc:	000f883a 	mov	r7,zero
 4012800:	01800284 	movi	r6,10
 4012804:	e009883a 	mov	r4,fp
 4012808:	40146280 	call	4014628 <__multadd>
 401280c:	1021883a 	mov	r16,r2
 4012810:	000f883a 	mov	r7,zero
 4012814:	01800284 	movi	r6,10
 4012818:	880b883a 	mov	r5,r17
 401281c:	e009883a 	mov	r4,fp
 4012820:	8d002526 	beq	r17,r20,40128b8 <_dtoa_r+0xf9c>
 4012824:	40146280 	call	4014628 <__multadd>
 4012828:	a00b883a 	mov	r5,r20
 401282c:	000f883a 	mov	r7,zero
 4012830:	01800284 	movi	r6,10
 4012834:	e009883a 	mov	r4,fp
 4012838:	1023883a 	mov	r17,r2
 401283c:	40146280 	call	4014628 <__multadd>
 4012840:	1029883a 	mov	r20,r2
 4012844:	b027883a 	mov	r19,r22
 4012848:	003fc006 	br	401274c <__alt_mem_onchip_memory2_0+0xfc0114cc>
 401284c:	9011883a 	mov	r8,r18
 4012850:	00800e0e 	bge	zero,r2,401288c <_dtoa_r+0xf70>
 4012854:	800b883a 	mov	r5,r16
 4012858:	01800044 	movi	r6,1
 401285c:	e009883a 	mov	r4,fp
 4012860:	da001715 	stw	r8,92(sp)
 4012864:	4014d940 	call	4014d94 <__lshift>
 4012868:	a80b883a 	mov	r5,r21
 401286c:	1009883a 	mov	r4,r2
 4012870:	1021883a 	mov	r16,r2
 4012874:	4014edc0 	call	4014edc <__mcmp>
 4012878:	da001717 	ldw	r8,92(sp)
 401287c:	0081960e 	bge	zero,r2,4012ed8 <_dtoa_r+0x15bc>
 4012880:	00800e44 	movi	r2,57
 4012884:	40817026 	beq	r8,r2,4012e48 <_dtoa_r+0x152c>
 4012888:	ba000c44 	addi	r8,r23,49
 401288c:	8825883a 	mov	r18,r17
 4012890:	9dc00044 	addi	r23,r19,1
 4012894:	9a000005 	stb	r8,0(r19)
 4012898:	a023883a 	mov	r17,r20
 401289c:	dc000915 	stw	r16,36(sp)
 40128a0:	003f2406 	br	4012534 <__alt_mem_onchip_memory2_0+0xfc0112b4>
 40128a4:	00800e44 	movi	r2,57
 40128a8:	9011883a 	mov	r8,r18
 40128ac:	90816626 	beq	r18,r2,4012e48 <_dtoa_r+0x152c>
 40128b0:	05bff516 	blt	zero,r22,4012888 <__alt_mem_onchip_memory2_0+0xfc011608>
 40128b4:	003ff506 	br	401288c <__alt_mem_onchip_memory2_0+0xfc01160c>
 40128b8:	40146280 	call	4014628 <__multadd>
 40128bc:	1023883a 	mov	r17,r2
 40128c0:	1029883a 	mov	r20,r2
 40128c4:	003fdf06 	br	4012844 <__alt_mem_onchip_memory2_0+0xfc0115c4>
 40128c8:	e009883a 	mov	r4,fp
 40128cc:	40146000 	call	4014600 <_Bfree>
 40128d0:	00800044 	movi	r2,1
 40128d4:	003fbc06 	br	40127c8 <__alt_mem_onchip_memory2_0+0xfc011548>
 40128d8:	a80b883a 	mov	r5,r21
 40128dc:	8009883a 	mov	r4,r16
 40128e0:	4014edc0 	call	4014edc <__mcmp>
 40128e4:	103edb0e 	bge	r2,zero,4012454 <__alt_mem_onchip_memory2_0+0xfc0111d4>
 40128e8:	800b883a 	mov	r5,r16
 40128ec:	000f883a 	mov	r7,zero
 40128f0:	01800284 	movi	r6,10
 40128f4:	e009883a 	mov	r4,fp
 40128f8:	40146280 	call	4014628 <__multadd>
 40128fc:	1021883a 	mov	r16,r2
 4012900:	d8800517 	ldw	r2,20(sp)
 4012904:	d8c00b17 	ldw	r3,44(sp)
 4012908:	10bfffc4 	addi	r2,r2,-1
 401290c:	d8800515 	stw	r2,20(sp)
 4012910:	183f761e 	bne	r3,zero,40126ec <__alt_mem_onchip_memory2_0+0xfc01146c>
 4012914:	d9000c17 	ldw	r4,48(sp)
 4012918:	0101730e 	bge	zero,r4,4012ee8 <_dtoa_r+0x15cc>
 401291c:	d9000615 	stw	r4,24(sp)
 4012920:	003ed006 	br	4012464 <__alt_mem_onchip_memory2_0+0xfc0111e4>
 4012924:	00800084 	movi	r2,2
 4012928:	3081861e 	bne	r6,r2,4012f44 <_dtoa_r+0x1628>
 401292c:	d8000b15 	stw	zero,44(sp)
 4012930:	003f3c06 	br	4012624 <__alt_mem_onchip_memory2_0+0xfc0113a4>
 4012934:	dc000917 	ldw	r16,36(sp)
 4012938:	003e9206 	br	4012384 <__alt_mem_onchip_memory2_0+0xfc011104>
 401293c:	d9c00317 	ldw	r7,12(sp)
 4012940:	00800084 	movi	r2,2
 4012944:	11fec50e 	bge	r2,r7,401245c <__alt_mem_onchip_memory2_0+0xfc0111dc>
 4012948:	d9000617 	ldw	r4,24(sp)
 401294c:	20013c1e 	bne	r4,zero,4012e40 <_dtoa_r+0x1524>
 4012950:	a80b883a 	mov	r5,r21
 4012954:	000f883a 	mov	r7,zero
 4012958:	01800144 	movi	r6,5
 401295c:	e009883a 	mov	r4,fp
 4012960:	40146280 	call	4014628 <__multadd>
 4012964:	100b883a 	mov	r5,r2
 4012968:	8009883a 	mov	r4,r16
 401296c:	102b883a 	mov	r21,r2
 4012970:	4014edc0 	call	4014edc <__mcmp>
 4012974:	dc000915 	stw	r16,36(sp)
 4012978:	00bf410e 	bge	zero,r2,4012680 <__alt_mem_onchip_memory2_0+0xfc011400>
 401297c:	d9c00717 	ldw	r7,28(sp)
 4012980:	00800c44 	movi	r2,49
 4012984:	38800005 	stb	r2,0(r7)
 4012988:	d8800517 	ldw	r2,20(sp)
 401298c:	3dc00044 	addi	r23,r7,1
 4012990:	10800044 	addi	r2,r2,1
 4012994:	d8800515 	stw	r2,20(sp)
 4012998:	003f3d06 	br	4012690 <__alt_mem_onchip_memory2_0+0xfc011410>
 401299c:	d9800517 	ldw	r6,20(sp)
 40129a0:	d9c00717 	ldw	r7,28(sp)
 40129a4:	00800c44 	movi	r2,49
 40129a8:	31800044 	addi	r6,r6,1
 40129ac:	d9800515 	stw	r6,20(sp)
 40129b0:	38800005 	stb	r2,0(r7)
 40129b4:	003edf06 	br	4012534 <__alt_mem_onchip_memory2_0+0xfc0112b4>
 40129b8:	d8000b15 	stw	zero,44(sp)
 40129bc:	003c9f06 	br	4011c3c <__alt_mem_onchip_memory2_0+0xfc0109bc>
 40129c0:	903e7e1e 	bne	r18,zero,40123bc <__alt_mem_onchip_memory2_0+0xfc01113c>
 40129c4:	00800434 	movhi	r2,16
 40129c8:	10bfffc4 	addi	r2,r2,-1
 40129cc:	9884703a 	and	r2,r19,r2
 40129d0:	1000ea1e 	bne	r2,zero,4012d7c <_dtoa_r+0x1460>
 40129d4:	9cdffc2c 	andhi	r19,r19,32752
 40129d8:	9800e826 	beq	r19,zero,4012d7c <_dtoa_r+0x1460>
 40129dc:	d9c00817 	ldw	r7,32(sp)
 40129e0:	b5800044 	addi	r22,r22,1
 40129e4:	04c00044 	movi	r19,1
 40129e8:	39c00044 	addi	r7,r7,1
 40129ec:	d9c00815 	stw	r7,32(sp)
 40129f0:	d8800d17 	ldw	r2,52(sp)
 40129f4:	103e721e 	bne	r2,zero,40123c0 <__alt_mem_onchip_memory2_0+0xfc011140>
 40129f8:	00800044 	movi	r2,1
 40129fc:	003e7906 	br	40123e4 <__alt_mem_onchip_memory2_0+0xfc011164>
 4012a00:	8009883a 	mov	r4,r16
 4012a04:	401b14c0 	call	401b14c <__floatsidf>
 4012a08:	d9800f17 	ldw	r6,60(sp)
 4012a0c:	d9c01017 	ldw	r7,64(sp)
 4012a10:	1009883a 	mov	r4,r2
 4012a14:	180b883a 	mov	r5,r3
 4012a18:	4019f640 	call	4019f64 <__muldf3>
 4012a1c:	000d883a 	mov	r6,zero
 4012a20:	01d00734 	movhi	r7,16412
 4012a24:	1009883a 	mov	r4,r2
 4012a28:	180b883a 	mov	r5,r3
 4012a2c:	4018a900 	call	4018a90 <__adddf3>
 4012a30:	047f3034 	movhi	r17,64704
 4012a34:	1021883a 	mov	r16,r2
 4012a38:	1c63883a 	add	r17,r3,r17
 4012a3c:	d9000f17 	ldw	r4,60(sp)
 4012a40:	d9401017 	ldw	r5,64(sp)
 4012a44:	000d883a 	mov	r6,zero
 4012a48:	01d00534 	movhi	r7,16404
 4012a4c:	401a7d00 	call	401a7d0 <__subdf3>
 4012a50:	800d883a 	mov	r6,r16
 4012a54:	880f883a 	mov	r7,r17
 4012a58:	1009883a 	mov	r4,r2
 4012a5c:	180b883a 	mov	r5,r3
 4012a60:	102b883a 	mov	r21,r2
 4012a64:	1829883a 	mov	r20,r3
 4012a68:	4019d940 	call	4019d94 <__gedf2>
 4012a6c:	00806c16 	blt	zero,r2,4012c20 <_dtoa_r+0x1304>
 4012a70:	89e0003c 	xorhi	r7,r17,32768
 4012a74:	800d883a 	mov	r6,r16
 4012a78:	a809883a 	mov	r4,r21
 4012a7c:	a00b883a 	mov	r5,r20
 4012a80:	4019e700 	call	4019e70 <__ledf2>
 4012a84:	103d7e0e 	bge	r2,zero,4012080 <__alt_mem_onchip_memory2_0+0xfc010e00>
 4012a88:	002b883a 	mov	r21,zero
 4012a8c:	0023883a 	mov	r17,zero
 4012a90:	003efb06 	br	4012680 <__alt_mem_onchip_memory2_0+0xfc011400>
 4012a94:	d8800717 	ldw	r2,28(sp)
 4012a98:	003bd006 	br	40119dc <__alt_mem_onchip_memory2_0+0xfc01075c>
 4012a9c:	d9000a17 	ldw	r4,40(sp)
 4012aa0:	d9800d17 	ldw	r6,52(sp)
 4012aa4:	dd400a15 	stw	r21,40(sp)
 4012aa8:	a905c83a 	sub	r2,r21,r4
 4012aac:	308d883a 	add	r6,r6,r2
 4012ab0:	d9800d15 	stw	r6,52(sp)
 4012ab4:	002b883a 	mov	r21,zero
 4012ab8:	003e0606 	br	40122d4 <__alt_mem_onchip_memory2_0+0xfc011054>
 4012abc:	9023883a 	mov	r17,r18
 4012ac0:	9829883a 	mov	r20,r19
 4012ac4:	04000084 	movi	r16,2
 4012ac8:	003c9206 	br	4011d14 <__alt_mem_onchip_memory2_0+0xfc010a94>
 4012acc:	04000044 	movi	r16,1
 4012ad0:	dc000c15 	stw	r16,48(sp)
 4012ad4:	dc000615 	stw	r16,24(sp)
 4012ad8:	dc002215 	stw	r16,136(sp)
 4012adc:	e0001115 	stw	zero,68(fp)
 4012ae0:	000b883a 	mov	r5,zero
 4012ae4:	003c6906 	br	4011c8c <__alt_mem_onchip_memory2_0+0xfc010a0c>
 4012ae8:	3021883a 	mov	r16,r6
 4012aec:	003ffb06 	br	4012adc <__alt_mem_onchip_memory2_0+0xfc01185c>
 4012af0:	1000021e 	bne	r2,zero,4012afc <_dtoa_r+0x11e0>
 4012af4:	4200004c 	andi	r8,r8,1
 4012af8:	403e7d1e 	bne	r8,zero,40124f0 <__alt_mem_onchip_memory2_0+0xfc011270>
 4012afc:	01000c04 	movi	r4,48
 4012b00:	00000106 	br	4012b08 <_dtoa_r+0x11ec>
 4012b04:	102f883a 	mov	r23,r2
 4012b08:	b8bfffc4 	addi	r2,r23,-1
 4012b0c:	10c00007 	ldb	r3,0(r2)
 4012b10:	193ffc26 	beq	r3,r4,4012b04 <__alt_mem_onchip_memory2_0+0xfc011884>
 4012b14:	003e8706 	br	4012534 <__alt_mem_onchip_memory2_0+0xfc0112b4>
 4012b18:	d8800517 	ldw	r2,20(sp)
 4012b1c:	00a3c83a 	sub	r17,zero,r2
 4012b20:	8800a426 	beq	r17,zero,4012db4 <_dtoa_r+0x1498>
 4012b24:	888003cc 	andi	r2,r17,15
 4012b28:	100490fa 	slli	r2,r2,3
 4012b2c:	00c100b4 	movhi	r3,1026
 4012b30:	18dbef04 	addi	r3,r3,28604
 4012b34:	1885883a 	add	r2,r3,r2
 4012b38:	11800017 	ldw	r6,0(r2)
 4012b3c:	11c00117 	ldw	r7,4(r2)
 4012b40:	9009883a 	mov	r4,r18
 4012b44:	980b883a 	mov	r5,r19
 4012b48:	8823d13a 	srai	r17,r17,4
 4012b4c:	4019f640 	call	4019f64 <__muldf3>
 4012b50:	d8800f15 	stw	r2,60(sp)
 4012b54:	d8c01015 	stw	r3,64(sp)
 4012b58:	8800e826 	beq	r17,zero,4012efc <_dtoa_r+0x15e0>
 4012b5c:	050100b4 	movhi	r20,1026
 4012b60:	a51be504 	addi	r20,r20,28564
 4012b64:	04000084 	movi	r16,2
 4012b68:	8980004c 	andi	r6,r17,1
 4012b6c:	1009883a 	mov	r4,r2
 4012b70:	8823d07a 	srai	r17,r17,1
 4012b74:	180b883a 	mov	r5,r3
 4012b78:	30000426 	beq	r6,zero,4012b8c <_dtoa_r+0x1270>
 4012b7c:	a1800017 	ldw	r6,0(r20)
 4012b80:	a1c00117 	ldw	r7,4(r20)
 4012b84:	84000044 	addi	r16,r16,1
 4012b88:	4019f640 	call	4019f64 <__muldf3>
 4012b8c:	a5000204 	addi	r20,r20,8
 4012b90:	883ff51e 	bne	r17,zero,4012b68 <__alt_mem_onchip_memory2_0+0xfc0118e8>
 4012b94:	d8800f15 	stw	r2,60(sp)
 4012b98:	d8c01015 	stw	r3,64(sp)
 4012b9c:	003c7606 	br	4011d78 <__alt_mem_onchip_memory2_0+0xfc010af8>
 4012ba0:	00c00c04 	movi	r3,48
 4012ba4:	10c00005 	stb	r3,0(r2)
 4012ba8:	d8c00517 	ldw	r3,20(sp)
 4012bac:	bd3fffc3 	ldbu	r20,-1(r23)
 4012bb0:	18c00044 	addi	r3,r3,1
 4012bb4:	d8c00515 	stw	r3,20(sp)
 4012bb8:	003db906 	br	40122a0 <__alt_mem_onchip_memory2_0+0xfc011020>
 4012bbc:	89400117 	ldw	r5,4(r17)
 4012bc0:	e009883a 	mov	r4,fp
 4012bc4:	40145580 	call	4014558 <_Balloc>
 4012bc8:	89800417 	ldw	r6,16(r17)
 4012bcc:	89400304 	addi	r5,r17,12
 4012bd0:	11000304 	addi	r4,r2,12
 4012bd4:	31800084 	addi	r6,r6,2
 4012bd8:	318d883a 	add	r6,r6,r6
 4012bdc:	318d883a 	add	r6,r6,r6
 4012be0:	1027883a 	mov	r19,r2
 4012be4:	400e9480 	call	400e948 <memcpy>
 4012be8:	01800044 	movi	r6,1
 4012bec:	980b883a 	mov	r5,r19
 4012bf0:	e009883a 	mov	r4,fp
 4012bf4:	4014d940 	call	4014d94 <__lshift>
 4012bf8:	1029883a 	mov	r20,r2
 4012bfc:	003ecc06 	br	4012730 <__alt_mem_onchip_memory2_0+0xfc0114b0>
 4012c00:	00800e44 	movi	r2,57
 4012c04:	90809026 	beq	r18,r2,4012e48 <_dtoa_r+0x152c>
 4012c08:	92000044 	addi	r8,r18,1
 4012c0c:	003f1f06 	br	401288c <__alt_mem_onchip_memory2_0+0xfc01160c>
 4012c10:	9011883a 	mov	r8,r18
 4012c14:	8825883a 	mov	r18,r17
 4012c18:	a023883a 	mov	r17,r20
 4012c1c:	003e2906 	br	40124c4 <__alt_mem_onchip_memory2_0+0xfc011244>
 4012c20:	002b883a 	mov	r21,zero
 4012c24:	0023883a 	mov	r17,zero
 4012c28:	003f5406 	br	401297c <__alt_mem_onchip_memory2_0+0xfc0116fc>
 4012c2c:	61bfffc4 	addi	r6,r12,-1
 4012c30:	300490fa 	slli	r2,r6,3
 4012c34:	00c100b4 	movhi	r3,1026
 4012c38:	18dbef04 	addi	r3,r3,28604
 4012c3c:	1885883a 	add	r2,r3,r2
 4012c40:	11000017 	ldw	r4,0(r2)
 4012c44:	11400117 	ldw	r5,4(r2)
 4012c48:	d8800717 	ldw	r2,28(sp)
 4012c4c:	880f883a 	mov	r7,r17
 4012c50:	d9801215 	stw	r6,72(sp)
 4012c54:	800d883a 	mov	r6,r16
 4012c58:	db001615 	stw	r12,88(sp)
 4012c5c:	15c00044 	addi	r23,r2,1
 4012c60:	4019f640 	call	4019f64 <__muldf3>
 4012c64:	d9401017 	ldw	r5,64(sp)
 4012c68:	d9000f17 	ldw	r4,60(sp)
 4012c6c:	d8c01515 	stw	r3,84(sp)
 4012c70:	d8801415 	stw	r2,80(sp)
 4012c74:	401b0cc0 	call	401b0cc <__fixdfsi>
 4012c78:	1009883a 	mov	r4,r2
 4012c7c:	1021883a 	mov	r16,r2
 4012c80:	401b14c0 	call	401b14c <__floatsidf>
 4012c84:	d9000f17 	ldw	r4,60(sp)
 4012c88:	d9401017 	ldw	r5,64(sp)
 4012c8c:	100d883a 	mov	r6,r2
 4012c90:	180f883a 	mov	r7,r3
 4012c94:	401a7d00 	call	401a7d0 <__subdf3>
 4012c98:	1829883a 	mov	r20,r3
 4012c9c:	d8c00717 	ldw	r3,28(sp)
 4012ca0:	84000c04 	addi	r16,r16,48
 4012ca4:	1023883a 	mov	r17,r2
 4012ca8:	1c000005 	stb	r16,0(r3)
 4012cac:	db001617 	ldw	r12,88(sp)
 4012cb0:	00800044 	movi	r2,1
 4012cb4:	60802226 	beq	r12,r2,4012d40 <_dtoa_r+0x1424>
 4012cb8:	d9c00717 	ldw	r7,28(sp)
 4012cbc:	8805883a 	mov	r2,r17
 4012cc0:	b82b883a 	mov	r21,r23
 4012cc4:	3b19883a 	add	r12,r7,r12
 4012cc8:	6023883a 	mov	r17,r12
 4012ccc:	a007883a 	mov	r3,r20
 4012cd0:	dc800f15 	stw	r18,60(sp)
 4012cd4:	000d883a 	mov	r6,zero
 4012cd8:	01d00934 	movhi	r7,16420
 4012cdc:	1009883a 	mov	r4,r2
 4012ce0:	180b883a 	mov	r5,r3
 4012ce4:	4019f640 	call	4019f64 <__muldf3>
 4012ce8:	180b883a 	mov	r5,r3
 4012cec:	1009883a 	mov	r4,r2
 4012cf0:	1829883a 	mov	r20,r3
 4012cf4:	1025883a 	mov	r18,r2
 4012cf8:	401b0cc0 	call	401b0cc <__fixdfsi>
 4012cfc:	1009883a 	mov	r4,r2
 4012d00:	1021883a 	mov	r16,r2
 4012d04:	401b14c0 	call	401b14c <__floatsidf>
 4012d08:	100d883a 	mov	r6,r2
 4012d0c:	180f883a 	mov	r7,r3
 4012d10:	9009883a 	mov	r4,r18
 4012d14:	a00b883a 	mov	r5,r20
 4012d18:	84000c04 	addi	r16,r16,48
 4012d1c:	401a7d00 	call	401a7d0 <__subdf3>
 4012d20:	ad400044 	addi	r21,r21,1
 4012d24:	ac3fffc5 	stb	r16,-1(r21)
 4012d28:	ac7fea1e 	bne	r21,r17,4012cd4 <__alt_mem_onchip_memory2_0+0xfc011a54>
 4012d2c:	1023883a 	mov	r17,r2
 4012d30:	d8801217 	ldw	r2,72(sp)
 4012d34:	dc800f17 	ldw	r18,60(sp)
 4012d38:	1829883a 	mov	r20,r3
 4012d3c:	b8af883a 	add	r23,r23,r2
 4012d40:	d9001417 	ldw	r4,80(sp)
 4012d44:	d9401517 	ldw	r5,84(sp)
 4012d48:	000d883a 	mov	r6,zero
 4012d4c:	01cff834 	movhi	r7,16352
 4012d50:	4018a900 	call	4018a90 <__adddf3>
 4012d54:	880d883a 	mov	r6,r17
 4012d58:	a00f883a 	mov	r7,r20
 4012d5c:	1009883a 	mov	r4,r2
 4012d60:	180b883a 	mov	r5,r3
 4012d64:	4019e700 	call	4019e70 <__ledf2>
 4012d68:	10003e0e 	bge	r2,zero,4012e64 <_dtoa_r+0x1548>
 4012d6c:	d9001317 	ldw	r4,76(sp)
 4012d70:	bd3fffc3 	ldbu	r20,-1(r23)
 4012d74:	d9000515 	stw	r4,20(sp)
 4012d78:	003d3b06 	br	4012268 <__alt_mem_onchip_memory2_0+0xfc010fe8>
 4012d7c:	0027883a 	mov	r19,zero
 4012d80:	003f1b06 	br	40129f0 <__alt_mem_onchip_memory2_0+0xfc011770>
 4012d84:	d8800817 	ldw	r2,32(sp)
 4012d88:	11e9c83a 	sub	r20,r2,r7
 4012d8c:	0005883a 	mov	r2,zero
 4012d90:	003d5406 	br	40122e4 <__alt_mem_onchip_memory2_0+0xfc011064>
 4012d94:	00800044 	movi	r2,1
 4012d98:	003dc706 	br	40124b8 <__alt_mem_onchip_memory2_0+0xfc011238>
 4012d9c:	d8c00217 	ldw	r3,8(sp)
 4012da0:	00800d84 	movi	r2,54
 4012da4:	dd400a17 	ldw	r21,40(sp)
 4012da8:	10c5c83a 	sub	r2,r2,r3
 4012dac:	dd000817 	ldw	r20,32(sp)
 4012db0:	003d4c06 	br	40122e4 <__alt_mem_onchip_memory2_0+0xfc011064>
 4012db4:	dc800f15 	stw	r18,60(sp)
 4012db8:	dcc01015 	stw	r19,64(sp)
 4012dbc:	04000084 	movi	r16,2
 4012dc0:	003bed06 	br	4011d78 <__alt_mem_onchip_memory2_0+0xfc010af8>
 4012dc4:	d9000617 	ldw	r4,24(sp)
 4012dc8:	203f0d26 	beq	r4,zero,4012a00 <__alt_mem_onchip_memory2_0+0xfc011780>
 4012dcc:	d9800c17 	ldw	r6,48(sp)
 4012dd0:	01bcab0e 	bge	zero,r6,4012080 <__alt_mem_onchip_memory2_0+0xfc010e00>
 4012dd4:	d9401017 	ldw	r5,64(sp)
 4012dd8:	d9000f17 	ldw	r4,60(sp)
 4012ddc:	000d883a 	mov	r6,zero
 4012de0:	01d00934 	movhi	r7,16420
 4012de4:	4019f640 	call	4019f64 <__muldf3>
 4012de8:	81000044 	addi	r4,r16,1
 4012dec:	d8800f15 	stw	r2,60(sp)
 4012df0:	d8c01015 	stw	r3,64(sp)
 4012df4:	401b14c0 	call	401b14c <__floatsidf>
 4012df8:	d9800f17 	ldw	r6,60(sp)
 4012dfc:	d9c01017 	ldw	r7,64(sp)
 4012e00:	1009883a 	mov	r4,r2
 4012e04:	180b883a 	mov	r5,r3
 4012e08:	4019f640 	call	4019f64 <__muldf3>
 4012e0c:	01d00734 	movhi	r7,16412
 4012e10:	000d883a 	mov	r6,zero
 4012e14:	1009883a 	mov	r4,r2
 4012e18:	180b883a 	mov	r5,r3
 4012e1c:	4018a900 	call	4018a90 <__adddf3>
 4012e20:	d9c00517 	ldw	r7,20(sp)
 4012e24:	047f3034 	movhi	r17,64704
 4012e28:	1021883a 	mov	r16,r2
 4012e2c:	39ffffc4 	addi	r7,r7,-1
 4012e30:	d9c01315 	stw	r7,76(sp)
 4012e34:	1c63883a 	add	r17,r3,r17
 4012e38:	db000c17 	ldw	r12,48(sp)
 4012e3c:	003bea06 	br	4011de8 <__alt_mem_onchip_memory2_0+0xfc010b68>
 4012e40:	dc000915 	stw	r16,36(sp)
 4012e44:	003e0e06 	br	4012680 <__alt_mem_onchip_memory2_0+0xfc011400>
 4012e48:	01000e44 	movi	r4,57
 4012e4c:	8825883a 	mov	r18,r17
 4012e50:	9dc00044 	addi	r23,r19,1
 4012e54:	99000005 	stb	r4,0(r19)
 4012e58:	a023883a 	mov	r17,r20
 4012e5c:	dc000915 	stw	r16,36(sp)
 4012e60:	003da406 	br	40124f4 <__alt_mem_onchip_memory2_0+0xfc011274>
 4012e64:	d9801417 	ldw	r6,80(sp)
 4012e68:	d9c01517 	ldw	r7,84(sp)
 4012e6c:	0009883a 	mov	r4,zero
 4012e70:	014ff834 	movhi	r5,16352
 4012e74:	401a7d00 	call	401a7d0 <__subdf3>
 4012e78:	880d883a 	mov	r6,r17
 4012e7c:	a00f883a 	mov	r7,r20
 4012e80:	1009883a 	mov	r4,r2
 4012e84:	180b883a 	mov	r5,r3
 4012e88:	4019d940 	call	4019d94 <__gedf2>
 4012e8c:	00bc7c0e 	bge	zero,r2,4012080 <__alt_mem_onchip_memory2_0+0xfc010e00>
 4012e90:	01000c04 	movi	r4,48
 4012e94:	00000106 	br	4012e9c <_dtoa_r+0x1580>
 4012e98:	102f883a 	mov	r23,r2
 4012e9c:	b8bfffc4 	addi	r2,r23,-1
 4012ea0:	10c00007 	ldb	r3,0(r2)
 4012ea4:	193ffc26 	beq	r3,r4,4012e98 <__alt_mem_onchip_memory2_0+0xfc011c18>
 4012ea8:	d9801317 	ldw	r6,76(sp)
 4012eac:	d9800515 	stw	r6,20(sp)
 4012eb0:	003c4406 	br	4011fc4 <__alt_mem_onchip_memory2_0+0xfc010d44>
 4012eb4:	d9801317 	ldw	r6,76(sp)
 4012eb8:	d9800515 	stw	r6,20(sp)
 4012ebc:	003cea06 	br	4012268 <__alt_mem_onchip_memory2_0+0xfc010fe8>
 4012ec0:	dd800f17 	ldw	r22,60(sp)
 4012ec4:	dcc01017 	ldw	r19,64(sp)
 4012ec8:	dc801217 	ldw	r18,72(sp)
 4012ecc:	003c6c06 	br	4012080 <__alt_mem_onchip_memory2_0+0xfc010e00>
 4012ed0:	903e031e 	bne	r18,zero,40126e0 <__alt_mem_onchip_memory2_0+0xfc011460>
 4012ed4:	003ebb06 	br	40129c4 <__alt_mem_onchip_memory2_0+0xfc011744>
 4012ed8:	103e6c1e 	bne	r2,zero,401288c <__alt_mem_onchip_memory2_0+0xfc01160c>
 4012edc:	4080004c 	andi	r2,r8,1
 4012ee0:	103e6a26 	beq	r2,zero,401288c <__alt_mem_onchip_memory2_0+0xfc01160c>
 4012ee4:	003e6606 	br	4012880 <__alt_mem_onchip_memory2_0+0xfc011600>
 4012ee8:	d8c00317 	ldw	r3,12(sp)
 4012eec:	00800084 	movi	r2,2
 4012ef0:	10c02916 	blt	r2,r3,4012f98 <_dtoa_r+0x167c>
 4012ef4:	d9000c17 	ldw	r4,48(sp)
 4012ef8:	003e8806 	br	401291c <__alt_mem_onchip_memory2_0+0xfc01169c>
 4012efc:	04000084 	movi	r16,2
 4012f00:	003b9d06 	br	4011d78 <__alt_mem_onchip_memory2_0+0xfc010af8>
 4012f04:	d9001317 	ldw	r4,76(sp)
 4012f08:	d9000515 	stw	r4,20(sp)
 4012f0c:	003cd606 	br	4012268 <__alt_mem_onchip_memory2_0+0xfc010fe8>
 4012f10:	d8801317 	ldw	r2,76(sp)
 4012f14:	d8800515 	stw	r2,20(sp)
 4012f18:	003c2a06 	br	4011fc4 <__alt_mem_onchip_memory2_0+0xfc010d44>
 4012f1c:	d9800317 	ldw	r6,12(sp)
 4012f20:	00800084 	movi	r2,2
 4012f24:	11801516 	blt	r2,r6,4012f7c <_dtoa_r+0x1660>
 4012f28:	d9c00c17 	ldw	r7,48(sp)
 4012f2c:	d9c00615 	stw	r7,24(sp)
 4012f30:	003df706 	br	4012710 <__alt_mem_onchip_memory2_0+0xfc011490>
 4012f34:	193d3926 	beq	r3,r4,401241c <__alt_mem_onchip_memory2_0+0xfc01119c>
 4012f38:	00c00f04 	movi	r3,60
 4012f3c:	1885c83a 	sub	r2,r3,r2
 4012f40:	003ddf06 	br	40126c0 <__alt_mem_onchip_memory2_0+0xfc011440>
 4012f44:	e009883a 	mov	r4,fp
 4012f48:	e0001115 	stw	zero,68(fp)
 4012f4c:	000b883a 	mov	r5,zero
 4012f50:	40145580 	call	4014558 <_Balloc>
 4012f54:	d8800715 	stw	r2,28(sp)
 4012f58:	d8c00717 	ldw	r3,28(sp)
 4012f5c:	00bfffc4 	movi	r2,-1
 4012f60:	01000044 	movi	r4,1
 4012f64:	d8800c15 	stw	r2,48(sp)
 4012f68:	e0c01015 	stw	r3,64(fp)
 4012f6c:	d9000b15 	stw	r4,44(sp)
 4012f70:	d8800615 	stw	r2,24(sp)
 4012f74:	d8002215 	stw	zero,136(sp)
 4012f78:	003c4106 	br	4012080 <__alt_mem_onchip_memory2_0+0xfc010e00>
 4012f7c:	d8c00c17 	ldw	r3,48(sp)
 4012f80:	d8c00615 	stw	r3,24(sp)
 4012f84:	003e7006 	br	4012948 <__alt_mem_onchip_memory2_0+0xfc0116c8>
 4012f88:	04400044 	movi	r17,1
 4012f8c:	003b2006 	br	4011c10 <__alt_mem_onchip_memory2_0+0xfc010990>
 4012f90:	000b883a 	mov	r5,zero
 4012f94:	003b3d06 	br	4011c8c <__alt_mem_onchip_memory2_0+0xfc010a0c>
 4012f98:	d8800c17 	ldw	r2,48(sp)
 4012f9c:	d8800615 	stw	r2,24(sp)
 4012fa0:	003e6906 	br	4012948 <__alt_mem_onchip_memory2_0+0xfc0116c8>

04012fa4 <__sflush_r>:
 4012fa4:	2880030b 	ldhu	r2,12(r5)
 4012fa8:	defffb04 	addi	sp,sp,-20
 4012fac:	dcc00315 	stw	r19,12(sp)
 4012fb0:	dc400115 	stw	r17,4(sp)
 4012fb4:	dfc00415 	stw	ra,16(sp)
 4012fb8:	dc800215 	stw	r18,8(sp)
 4012fbc:	dc000015 	stw	r16,0(sp)
 4012fc0:	10c0020c 	andi	r3,r2,8
 4012fc4:	2823883a 	mov	r17,r5
 4012fc8:	2027883a 	mov	r19,r4
 4012fcc:	1800311e 	bne	r3,zero,4013094 <__sflush_r+0xf0>
 4012fd0:	28c00117 	ldw	r3,4(r5)
 4012fd4:	10820014 	ori	r2,r2,2048
 4012fd8:	2880030d 	sth	r2,12(r5)
 4012fdc:	00c04b0e 	bge	zero,r3,401310c <__sflush_r+0x168>
 4012fe0:	8a000a17 	ldw	r8,40(r17)
 4012fe4:	40002326 	beq	r8,zero,4013074 <__sflush_r+0xd0>
 4012fe8:	9c000017 	ldw	r16,0(r19)
 4012fec:	10c4000c 	andi	r3,r2,4096
 4012ff0:	98000015 	stw	zero,0(r19)
 4012ff4:	18004826 	beq	r3,zero,4013118 <__sflush_r+0x174>
 4012ff8:	89801417 	ldw	r6,80(r17)
 4012ffc:	10c0010c 	andi	r3,r2,4
 4013000:	18000626 	beq	r3,zero,401301c <__sflush_r+0x78>
 4013004:	88c00117 	ldw	r3,4(r17)
 4013008:	88800c17 	ldw	r2,48(r17)
 401300c:	30cdc83a 	sub	r6,r6,r3
 4013010:	10000226 	beq	r2,zero,401301c <__sflush_r+0x78>
 4013014:	88800f17 	ldw	r2,60(r17)
 4013018:	308dc83a 	sub	r6,r6,r2
 401301c:	89400717 	ldw	r5,28(r17)
 4013020:	000f883a 	mov	r7,zero
 4013024:	9809883a 	mov	r4,r19
 4013028:	403ee83a 	callr	r8
 401302c:	00ffffc4 	movi	r3,-1
 4013030:	10c04426 	beq	r2,r3,4013144 <__sflush_r+0x1a0>
 4013034:	88c0030b 	ldhu	r3,12(r17)
 4013038:	89000417 	ldw	r4,16(r17)
 401303c:	88000115 	stw	zero,4(r17)
 4013040:	197dffcc 	andi	r5,r3,63487
 4013044:	8940030d 	sth	r5,12(r17)
 4013048:	89000015 	stw	r4,0(r17)
 401304c:	18c4000c 	andi	r3,r3,4096
 4013050:	18002c1e 	bne	r3,zero,4013104 <__sflush_r+0x160>
 4013054:	89400c17 	ldw	r5,48(r17)
 4013058:	9c000015 	stw	r16,0(r19)
 401305c:	28000526 	beq	r5,zero,4013074 <__sflush_r+0xd0>
 4013060:	88801004 	addi	r2,r17,64
 4013064:	28800226 	beq	r5,r2,4013070 <__sflush_r+0xcc>
 4013068:	9809883a 	mov	r4,r19
 401306c:	40137200 	call	4013720 <_free_r>
 4013070:	88000c15 	stw	zero,48(r17)
 4013074:	0005883a 	mov	r2,zero
 4013078:	dfc00417 	ldw	ra,16(sp)
 401307c:	dcc00317 	ldw	r19,12(sp)
 4013080:	dc800217 	ldw	r18,8(sp)
 4013084:	dc400117 	ldw	r17,4(sp)
 4013088:	dc000017 	ldw	r16,0(sp)
 401308c:	dec00504 	addi	sp,sp,20
 4013090:	f800283a 	ret
 4013094:	2c800417 	ldw	r18,16(r5)
 4013098:	903ff626 	beq	r18,zero,4013074 <__alt_mem_onchip_memory2_0+0xfc011df4>
 401309c:	2c000017 	ldw	r16,0(r5)
 40130a0:	108000cc 	andi	r2,r2,3
 40130a4:	2c800015 	stw	r18,0(r5)
 40130a8:	84a1c83a 	sub	r16,r16,r18
 40130ac:	1000131e 	bne	r2,zero,40130fc <__sflush_r+0x158>
 40130b0:	28800517 	ldw	r2,20(r5)
 40130b4:	88800215 	stw	r2,8(r17)
 40130b8:	04000316 	blt	zero,r16,40130c8 <__sflush_r+0x124>
 40130bc:	003fed06 	br	4013074 <__alt_mem_onchip_memory2_0+0xfc011df4>
 40130c0:	90a5883a 	add	r18,r18,r2
 40130c4:	043feb0e 	bge	zero,r16,4013074 <__alt_mem_onchip_memory2_0+0xfc011df4>
 40130c8:	88800917 	ldw	r2,36(r17)
 40130cc:	89400717 	ldw	r5,28(r17)
 40130d0:	800f883a 	mov	r7,r16
 40130d4:	900d883a 	mov	r6,r18
 40130d8:	9809883a 	mov	r4,r19
 40130dc:	103ee83a 	callr	r2
 40130e0:	80a1c83a 	sub	r16,r16,r2
 40130e4:	00bff616 	blt	zero,r2,40130c0 <__alt_mem_onchip_memory2_0+0xfc011e40>
 40130e8:	88c0030b 	ldhu	r3,12(r17)
 40130ec:	00bfffc4 	movi	r2,-1
 40130f0:	18c01014 	ori	r3,r3,64
 40130f4:	88c0030d 	sth	r3,12(r17)
 40130f8:	003fdf06 	br	4013078 <__alt_mem_onchip_memory2_0+0xfc011df8>
 40130fc:	0005883a 	mov	r2,zero
 4013100:	003fec06 	br	40130b4 <__alt_mem_onchip_memory2_0+0xfc011e34>
 4013104:	88801415 	stw	r2,80(r17)
 4013108:	003fd206 	br	4013054 <__alt_mem_onchip_memory2_0+0xfc011dd4>
 401310c:	28c00f17 	ldw	r3,60(r5)
 4013110:	00ffb316 	blt	zero,r3,4012fe0 <__alt_mem_onchip_memory2_0+0xfc011d60>
 4013114:	003fd706 	br	4013074 <__alt_mem_onchip_memory2_0+0xfc011df4>
 4013118:	89400717 	ldw	r5,28(r17)
 401311c:	000d883a 	mov	r6,zero
 4013120:	01c00044 	movi	r7,1
 4013124:	9809883a 	mov	r4,r19
 4013128:	403ee83a 	callr	r8
 401312c:	100d883a 	mov	r6,r2
 4013130:	00bfffc4 	movi	r2,-1
 4013134:	30801426 	beq	r6,r2,4013188 <__sflush_r+0x1e4>
 4013138:	8880030b 	ldhu	r2,12(r17)
 401313c:	8a000a17 	ldw	r8,40(r17)
 4013140:	003fae06 	br	4012ffc <__alt_mem_onchip_memory2_0+0xfc011d7c>
 4013144:	98c00017 	ldw	r3,0(r19)
 4013148:	183fba26 	beq	r3,zero,4013034 <__alt_mem_onchip_memory2_0+0xfc011db4>
 401314c:	01000744 	movi	r4,29
 4013150:	19000626 	beq	r3,r4,401316c <__sflush_r+0x1c8>
 4013154:	01000584 	movi	r4,22
 4013158:	19000426 	beq	r3,r4,401316c <__sflush_r+0x1c8>
 401315c:	88c0030b 	ldhu	r3,12(r17)
 4013160:	18c01014 	ori	r3,r3,64
 4013164:	88c0030d 	sth	r3,12(r17)
 4013168:	003fc306 	br	4013078 <__alt_mem_onchip_memory2_0+0xfc011df8>
 401316c:	8880030b 	ldhu	r2,12(r17)
 4013170:	88c00417 	ldw	r3,16(r17)
 4013174:	88000115 	stw	zero,4(r17)
 4013178:	10bdffcc 	andi	r2,r2,63487
 401317c:	8880030d 	sth	r2,12(r17)
 4013180:	88c00015 	stw	r3,0(r17)
 4013184:	003fb306 	br	4013054 <__alt_mem_onchip_memory2_0+0xfc011dd4>
 4013188:	98800017 	ldw	r2,0(r19)
 401318c:	103fea26 	beq	r2,zero,4013138 <__alt_mem_onchip_memory2_0+0xfc011eb8>
 4013190:	00c00744 	movi	r3,29
 4013194:	10c00226 	beq	r2,r3,40131a0 <__sflush_r+0x1fc>
 4013198:	00c00584 	movi	r3,22
 401319c:	10c0031e 	bne	r2,r3,40131ac <__sflush_r+0x208>
 40131a0:	9c000015 	stw	r16,0(r19)
 40131a4:	0005883a 	mov	r2,zero
 40131a8:	003fb306 	br	4013078 <__alt_mem_onchip_memory2_0+0xfc011df8>
 40131ac:	88c0030b 	ldhu	r3,12(r17)
 40131b0:	3005883a 	mov	r2,r6
 40131b4:	18c01014 	ori	r3,r3,64
 40131b8:	88c0030d 	sth	r3,12(r17)
 40131bc:	003fae06 	br	4013078 <__alt_mem_onchip_memory2_0+0xfc011df8>

040131c0 <_fflush_r>:
 40131c0:	defffd04 	addi	sp,sp,-12
 40131c4:	dc000115 	stw	r16,4(sp)
 40131c8:	dfc00215 	stw	ra,8(sp)
 40131cc:	2021883a 	mov	r16,r4
 40131d0:	20000226 	beq	r4,zero,40131dc <_fflush_r+0x1c>
 40131d4:	20800e17 	ldw	r2,56(r4)
 40131d8:	10000c26 	beq	r2,zero,401320c <_fflush_r+0x4c>
 40131dc:	2880030f 	ldh	r2,12(r5)
 40131e0:	1000051e 	bne	r2,zero,40131f8 <_fflush_r+0x38>
 40131e4:	0005883a 	mov	r2,zero
 40131e8:	dfc00217 	ldw	ra,8(sp)
 40131ec:	dc000117 	ldw	r16,4(sp)
 40131f0:	dec00304 	addi	sp,sp,12
 40131f4:	f800283a 	ret
 40131f8:	8009883a 	mov	r4,r16
 40131fc:	dfc00217 	ldw	ra,8(sp)
 4013200:	dc000117 	ldw	r16,4(sp)
 4013204:	dec00304 	addi	sp,sp,12
 4013208:	4012fa41 	jmpi	4012fa4 <__sflush_r>
 401320c:	d9400015 	stw	r5,0(sp)
 4013210:	40135ac0 	call	40135ac <__sinit>
 4013214:	d9400017 	ldw	r5,0(sp)
 4013218:	003ff006 	br	40131dc <__alt_mem_onchip_memory2_0+0xfc011f5c>

0401321c <fflush>:
 401321c:	20000526 	beq	r4,zero,4013234 <fflush+0x18>
 4013220:	008100f4 	movhi	r2,1027
 4013224:	10a8a704 	addi	r2,r2,-23908
 4013228:	200b883a 	mov	r5,r4
 401322c:	11000017 	ldw	r4,0(r2)
 4013230:	40131c01 	jmpi	40131c0 <_fflush_r>
 4013234:	008100f4 	movhi	r2,1027
 4013238:	10a8a604 	addi	r2,r2,-23912
 401323c:	11000017 	ldw	r4,0(r2)
 4013240:	01410074 	movhi	r5,1025
 4013244:	294c7004 	addi	r5,r5,12736
 4013248:	4013fbc1 	jmpi	4013fbc <_fwalk_reent>

0401324c <__fp_unlock>:
 401324c:	0005883a 	mov	r2,zero
 4013250:	f800283a 	ret

04013254 <_cleanup_r>:
 4013254:	01410074 	movhi	r5,1025
 4013258:	295e1b04 	addi	r5,r5,30828
 401325c:	4013fbc1 	jmpi	4013fbc <_fwalk_reent>

04013260 <__sinit.part.1>:
 4013260:	defff704 	addi	sp,sp,-36
 4013264:	00c10074 	movhi	r3,1025
 4013268:	dfc00815 	stw	ra,32(sp)
 401326c:	ddc00715 	stw	r23,28(sp)
 4013270:	dd800615 	stw	r22,24(sp)
 4013274:	dd400515 	stw	r21,20(sp)
 4013278:	dd000415 	stw	r20,16(sp)
 401327c:	dcc00315 	stw	r19,12(sp)
 4013280:	dc800215 	stw	r18,8(sp)
 4013284:	dc400115 	stw	r17,4(sp)
 4013288:	dc000015 	stw	r16,0(sp)
 401328c:	18cc9504 	addi	r3,r3,12884
 4013290:	24000117 	ldw	r16,4(r4)
 4013294:	20c00f15 	stw	r3,60(r4)
 4013298:	2080bb04 	addi	r2,r4,748
 401329c:	00c000c4 	movi	r3,3
 40132a0:	20c0b915 	stw	r3,740(r4)
 40132a4:	2080ba15 	stw	r2,744(r4)
 40132a8:	2000b815 	stw	zero,736(r4)
 40132ac:	05c00204 	movi	r23,8
 40132b0:	00800104 	movi	r2,4
 40132b4:	2025883a 	mov	r18,r4
 40132b8:	b80d883a 	mov	r6,r23
 40132bc:	81001704 	addi	r4,r16,92
 40132c0:	000b883a 	mov	r5,zero
 40132c4:	80000015 	stw	zero,0(r16)
 40132c8:	80000115 	stw	zero,4(r16)
 40132cc:	80000215 	stw	zero,8(r16)
 40132d0:	8080030d 	sth	r2,12(r16)
 40132d4:	80001915 	stw	zero,100(r16)
 40132d8:	8000038d 	sth	zero,14(r16)
 40132dc:	80000415 	stw	zero,16(r16)
 40132e0:	80000515 	stw	zero,20(r16)
 40132e4:	80000615 	stw	zero,24(r16)
 40132e8:	400ea900 	call	400ea90 <memset>
 40132ec:	05810074 	movhi	r22,1025
 40132f0:	94400217 	ldw	r17,8(r18)
 40132f4:	05410074 	movhi	r21,1025
 40132f8:	05010074 	movhi	r20,1025
 40132fc:	04c10074 	movhi	r19,1025
 4013300:	b5975404 	addi	r22,r22,23888
 4013304:	ad576b04 	addi	r21,r21,23980
 4013308:	a5178a04 	addi	r20,r20,24104
 401330c:	9cd7a104 	addi	r19,r19,24196
 4013310:	85800815 	stw	r22,32(r16)
 4013314:	85400915 	stw	r21,36(r16)
 4013318:	85000a15 	stw	r20,40(r16)
 401331c:	84c00b15 	stw	r19,44(r16)
 4013320:	84000715 	stw	r16,28(r16)
 4013324:	00800284 	movi	r2,10
 4013328:	8880030d 	sth	r2,12(r17)
 401332c:	00800044 	movi	r2,1
 4013330:	b80d883a 	mov	r6,r23
 4013334:	89001704 	addi	r4,r17,92
 4013338:	000b883a 	mov	r5,zero
 401333c:	88000015 	stw	zero,0(r17)
 4013340:	88000115 	stw	zero,4(r17)
 4013344:	88000215 	stw	zero,8(r17)
 4013348:	88001915 	stw	zero,100(r17)
 401334c:	8880038d 	sth	r2,14(r17)
 4013350:	88000415 	stw	zero,16(r17)
 4013354:	88000515 	stw	zero,20(r17)
 4013358:	88000615 	stw	zero,24(r17)
 401335c:	400ea900 	call	400ea90 <memset>
 4013360:	94000317 	ldw	r16,12(r18)
 4013364:	00800484 	movi	r2,18
 4013368:	8c400715 	stw	r17,28(r17)
 401336c:	8d800815 	stw	r22,32(r17)
 4013370:	8d400915 	stw	r21,36(r17)
 4013374:	8d000a15 	stw	r20,40(r17)
 4013378:	8cc00b15 	stw	r19,44(r17)
 401337c:	8080030d 	sth	r2,12(r16)
 4013380:	00800084 	movi	r2,2
 4013384:	80000015 	stw	zero,0(r16)
 4013388:	80000115 	stw	zero,4(r16)
 401338c:	80000215 	stw	zero,8(r16)
 4013390:	80001915 	stw	zero,100(r16)
 4013394:	8080038d 	sth	r2,14(r16)
 4013398:	80000415 	stw	zero,16(r16)
 401339c:	80000515 	stw	zero,20(r16)
 40133a0:	80000615 	stw	zero,24(r16)
 40133a4:	b80d883a 	mov	r6,r23
 40133a8:	000b883a 	mov	r5,zero
 40133ac:	81001704 	addi	r4,r16,92
 40133b0:	400ea900 	call	400ea90 <memset>
 40133b4:	00800044 	movi	r2,1
 40133b8:	84000715 	stw	r16,28(r16)
 40133bc:	85800815 	stw	r22,32(r16)
 40133c0:	85400915 	stw	r21,36(r16)
 40133c4:	85000a15 	stw	r20,40(r16)
 40133c8:	84c00b15 	stw	r19,44(r16)
 40133cc:	90800e15 	stw	r2,56(r18)
 40133d0:	dfc00817 	ldw	ra,32(sp)
 40133d4:	ddc00717 	ldw	r23,28(sp)
 40133d8:	dd800617 	ldw	r22,24(sp)
 40133dc:	dd400517 	ldw	r21,20(sp)
 40133e0:	dd000417 	ldw	r20,16(sp)
 40133e4:	dcc00317 	ldw	r19,12(sp)
 40133e8:	dc800217 	ldw	r18,8(sp)
 40133ec:	dc400117 	ldw	r17,4(sp)
 40133f0:	dc000017 	ldw	r16,0(sp)
 40133f4:	dec00904 	addi	sp,sp,36
 40133f8:	f800283a 	ret

040133fc <__fp_lock>:
 40133fc:	0005883a 	mov	r2,zero
 4013400:	f800283a 	ret

04013404 <__sfmoreglue>:
 4013404:	defffc04 	addi	sp,sp,-16
 4013408:	dc800215 	stw	r18,8(sp)
 401340c:	2825883a 	mov	r18,r5
 4013410:	dc000015 	stw	r16,0(sp)
 4013414:	01401a04 	movi	r5,104
 4013418:	2021883a 	mov	r16,r4
 401341c:	913fffc4 	addi	r4,r18,-1
 4013420:	dfc00315 	stw	ra,12(sp)
 4013424:	dc400115 	stw	r17,4(sp)
 4013428:	400cfd40 	call	400cfd4 <__mulsi3>
 401342c:	8009883a 	mov	r4,r16
 4013430:	11401d04 	addi	r5,r2,116
 4013434:	1023883a 	mov	r17,r2
 4013438:	400e13c0 	call	400e13c <_malloc_r>
 401343c:	1021883a 	mov	r16,r2
 4013440:	10000726 	beq	r2,zero,4013460 <__sfmoreglue+0x5c>
 4013444:	11000304 	addi	r4,r2,12
 4013448:	10000015 	stw	zero,0(r2)
 401344c:	14800115 	stw	r18,4(r2)
 4013450:	11000215 	stw	r4,8(r2)
 4013454:	89801a04 	addi	r6,r17,104
 4013458:	000b883a 	mov	r5,zero
 401345c:	400ea900 	call	400ea90 <memset>
 4013460:	8005883a 	mov	r2,r16
 4013464:	dfc00317 	ldw	ra,12(sp)
 4013468:	dc800217 	ldw	r18,8(sp)
 401346c:	dc400117 	ldw	r17,4(sp)
 4013470:	dc000017 	ldw	r16,0(sp)
 4013474:	dec00404 	addi	sp,sp,16
 4013478:	f800283a 	ret

0401347c <__sfp>:
 401347c:	defffb04 	addi	sp,sp,-20
 4013480:	dc000015 	stw	r16,0(sp)
 4013484:	040100f4 	movhi	r16,1027
 4013488:	8428a604 	addi	r16,r16,-23912
 401348c:	dcc00315 	stw	r19,12(sp)
 4013490:	2027883a 	mov	r19,r4
 4013494:	81000017 	ldw	r4,0(r16)
 4013498:	dfc00415 	stw	ra,16(sp)
 401349c:	dc800215 	stw	r18,8(sp)
 40134a0:	20800e17 	ldw	r2,56(r4)
 40134a4:	dc400115 	stw	r17,4(sp)
 40134a8:	1000021e 	bne	r2,zero,40134b4 <__sfp+0x38>
 40134ac:	40132600 	call	4013260 <__sinit.part.1>
 40134b0:	81000017 	ldw	r4,0(r16)
 40134b4:	2480b804 	addi	r18,r4,736
 40134b8:	047fffc4 	movi	r17,-1
 40134bc:	91000117 	ldw	r4,4(r18)
 40134c0:	94000217 	ldw	r16,8(r18)
 40134c4:	213fffc4 	addi	r4,r4,-1
 40134c8:	20000a16 	blt	r4,zero,40134f4 <__sfp+0x78>
 40134cc:	8080030f 	ldh	r2,12(r16)
 40134d0:	10000c26 	beq	r2,zero,4013504 <__sfp+0x88>
 40134d4:	80c01d04 	addi	r3,r16,116
 40134d8:	00000206 	br	40134e4 <__sfp+0x68>
 40134dc:	18bfe60f 	ldh	r2,-104(r3)
 40134e0:	10000826 	beq	r2,zero,4013504 <__sfp+0x88>
 40134e4:	213fffc4 	addi	r4,r4,-1
 40134e8:	1c3ffd04 	addi	r16,r3,-12
 40134ec:	18c01a04 	addi	r3,r3,104
 40134f0:	247ffa1e 	bne	r4,r17,40134dc <__alt_mem_onchip_memory2_0+0xfc01225c>
 40134f4:	90800017 	ldw	r2,0(r18)
 40134f8:	10001d26 	beq	r2,zero,4013570 <__sfp+0xf4>
 40134fc:	1025883a 	mov	r18,r2
 4013500:	003fee06 	br	40134bc <__alt_mem_onchip_memory2_0+0xfc01223c>
 4013504:	00bfffc4 	movi	r2,-1
 4013508:	8080038d 	sth	r2,14(r16)
 401350c:	00800044 	movi	r2,1
 4013510:	8080030d 	sth	r2,12(r16)
 4013514:	80001915 	stw	zero,100(r16)
 4013518:	80000015 	stw	zero,0(r16)
 401351c:	80000215 	stw	zero,8(r16)
 4013520:	80000115 	stw	zero,4(r16)
 4013524:	80000415 	stw	zero,16(r16)
 4013528:	80000515 	stw	zero,20(r16)
 401352c:	80000615 	stw	zero,24(r16)
 4013530:	01800204 	movi	r6,8
 4013534:	000b883a 	mov	r5,zero
 4013538:	81001704 	addi	r4,r16,92
 401353c:	400ea900 	call	400ea90 <memset>
 4013540:	8005883a 	mov	r2,r16
 4013544:	80000c15 	stw	zero,48(r16)
 4013548:	80000d15 	stw	zero,52(r16)
 401354c:	80001115 	stw	zero,68(r16)
 4013550:	80001215 	stw	zero,72(r16)
 4013554:	dfc00417 	ldw	ra,16(sp)
 4013558:	dcc00317 	ldw	r19,12(sp)
 401355c:	dc800217 	ldw	r18,8(sp)
 4013560:	dc400117 	ldw	r17,4(sp)
 4013564:	dc000017 	ldw	r16,0(sp)
 4013568:	dec00504 	addi	sp,sp,20
 401356c:	f800283a 	ret
 4013570:	01400104 	movi	r5,4
 4013574:	9809883a 	mov	r4,r19
 4013578:	40134040 	call	4013404 <__sfmoreglue>
 401357c:	90800015 	stw	r2,0(r18)
 4013580:	103fde1e 	bne	r2,zero,40134fc <__alt_mem_onchip_memory2_0+0xfc01227c>
 4013584:	00800304 	movi	r2,12
 4013588:	98800015 	stw	r2,0(r19)
 401358c:	0005883a 	mov	r2,zero
 4013590:	003ff006 	br	4013554 <__alt_mem_onchip_memory2_0+0xfc0122d4>

04013594 <_cleanup>:
 4013594:	008100f4 	movhi	r2,1027
 4013598:	10a8a604 	addi	r2,r2,-23912
 401359c:	11000017 	ldw	r4,0(r2)
 40135a0:	01410074 	movhi	r5,1025
 40135a4:	295e1b04 	addi	r5,r5,30828
 40135a8:	4013fbc1 	jmpi	4013fbc <_fwalk_reent>

040135ac <__sinit>:
 40135ac:	20800e17 	ldw	r2,56(r4)
 40135b0:	10000126 	beq	r2,zero,40135b8 <__sinit+0xc>
 40135b4:	f800283a 	ret
 40135b8:	40132601 	jmpi	4013260 <__sinit.part.1>

040135bc <__sfp_lock_acquire>:
 40135bc:	f800283a 	ret

040135c0 <__sfp_lock_release>:
 40135c0:	f800283a 	ret

040135c4 <__sinit_lock_acquire>:
 40135c4:	f800283a 	ret

040135c8 <__sinit_lock_release>:
 40135c8:	f800283a 	ret

040135cc <__fp_lock_all>:
 40135cc:	008100f4 	movhi	r2,1027
 40135d0:	10a8a704 	addi	r2,r2,-23908
 40135d4:	11000017 	ldw	r4,0(r2)
 40135d8:	01410074 	movhi	r5,1025
 40135dc:	294cff04 	addi	r5,r5,13308
 40135e0:	4013ef81 	jmpi	4013ef8 <_fwalk>

040135e4 <__fp_unlock_all>:
 40135e4:	008100f4 	movhi	r2,1027
 40135e8:	10a8a704 	addi	r2,r2,-23908
 40135ec:	11000017 	ldw	r4,0(r2)
 40135f0:	01410074 	movhi	r5,1025
 40135f4:	294c9304 	addi	r5,r5,12876
 40135f8:	4013ef81 	jmpi	4013ef8 <_fwalk>

040135fc <_malloc_trim_r>:
 40135fc:	defffb04 	addi	sp,sp,-20
 4013600:	dcc00315 	stw	r19,12(sp)
 4013604:	04c100b4 	movhi	r19,1026
 4013608:	dc800215 	stw	r18,8(sp)
 401360c:	dc400115 	stw	r17,4(sp)
 4013610:	dc000015 	stw	r16,0(sp)
 4013614:	dfc00415 	stw	ra,16(sp)
 4013618:	2821883a 	mov	r16,r5
 401361c:	9cdd4a04 	addi	r19,r19,29992
 4013620:	2025883a 	mov	r18,r4
 4013624:	401ba2c0 	call	401ba2c <__malloc_lock>
 4013628:	98800217 	ldw	r2,8(r19)
 401362c:	14400117 	ldw	r17,4(r2)
 4013630:	00bfff04 	movi	r2,-4
 4013634:	88a2703a 	and	r17,r17,r2
 4013638:	8c21c83a 	sub	r16,r17,r16
 401363c:	8403fbc4 	addi	r16,r16,4079
 4013640:	8020d33a 	srli	r16,r16,12
 4013644:	0083ffc4 	movi	r2,4095
 4013648:	843fffc4 	addi	r16,r16,-1
 401364c:	8020933a 	slli	r16,r16,12
 4013650:	1400060e 	bge	r2,r16,401366c <_malloc_trim_r+0x70>
 4013654:	000b883a 	mov	r5,zero
 4013658:	9009883a 	mov	r4,r18
 401365c:	400ed180 	call	400ed18 <_sbrk_r>
 4013660:	98c00217 	ldw	r3,8(r19)
 4013664:	1c47883a 	add	r3,r3,r17
 4013668:	10c00a26 	beq	r2,r3,4013694 <_malloc_trim_r+0x98>
 401366c:	9009883a 	mov	r4,r18
 4013670:	401ba500 	call	401ba50 <__malloc_unlock>
 4013674:	0005883a 	mov	r2,zero
 4013678:	dfc00417 	ldw	ra,16(sp)
 401367c:	dcc00317 	ldw	r19,12(sp)
 4013680:	dc800217 	ldw	r18,8(sp)
 4013684:	dc400117 	ldw	r17,4(sp)
 4013688:	dc000017 	ldw	r16,0(sp)
 401368c:	dec00504 	addi	sp,sp,20
 4013690:	f800283a 	ret
 4013694:	040bc83a 	sub	r5,zero,r16
 4013698:	9009883a 	mov	r4,r18
 401369c:	400ed180 	call	400ed18 <_sbrk_r>
 40136a0:	00ffffc4 	movi	r3,-1
 40136a4:	10c00d26 	beq	r2,r3,40136dc <_malloc_trim_r+0xe0>
 40136a8:	00c100f4 	movhi	r3,1027
 40136ac:	18f57c04 	addi	r3,r3,-10768
 40136b0:	18800017 	ldw	r2,0(r3)
 40136b4:	99000217 	ldw	r4,8(r19)
 40136b8:	8c23c83a 	sub	r17,r17,r16
 40136bc:	8c400054 	ori	r17,r17,1
 40136c0:	1421c83a 	sub	r16,r2,r16
 40136c4:	24400115 	stw	r17,4(r4)
 40136c8:	9009883a 	mov	r4,r18
 40136cc:	1c000015 	stw	r16,0(r3)
 40136d0:	401ba500 	call	401ba50 <__malloc_unlock>
 40136d4:	00800044 	movi	r2,1
 40136d8:	003fe706 	br	4013678 <__alt_mem_onchip_memory2_0+0xfc0123f8>
 40136dc:	000b883a 	mov	r5,zero
 40136e0:	9009883a 	mov	r4,r18
 40136e4:	400ed180 	call	400ed18 <_sbrk_r>
 40136e8:	99000217 	ldw	r4,8(r19)
 40136ec:	014003c4 	movi	r5,15
 40136f0:	1107c83a 	sub	r3,r2,r4
 40136f4:	28ffdd0e 	bge	r5,r3,401366c <__alt_mem_onchip_memory2_0+0xfc0123ec>
 40136f8:	014100f4 	movhi	r5,1027
 40136fc:	2968a804 	addi	r5,r5,-23904
 4013700:	29400017 	ldw	r5,0(r5)
 4013704:	18c00054 	ori	r3,r3,1
 4013708:	20c00115 	stw	r3,4(r4)
 401370c:	00c100f4 	movhi	r3,1027
 4013710:	1145c83a 	sub	r2,r2,r5
 4013714:	18f57c04 	addi	r3,r3,-10768
 4013718:	18800015 	stw	r2,0(r3)
 401371c:	003fd306 	br	401366c <__alt_mem_onchip_memory2_0+0xfc0123ec>

04013720 <_free_r>:
 4013720:	28004126 	beq	r5,zero,4013828 <_free_r+0x108>
 4013724:	defffd04 	addi	sp,sp,-12
 4013728:	dc400115 	stw	r17,4(sp)
 401372c:	dc000015 	stw	r16,0(sp)
 4013730:	2023883a 	mov	r17,r4
 4013734:	2821883a 	mov	r16,r5
 4013738:	dfc00215 	stw	ra,8(sp)
 401373c:	401ba2c0 	call	401ba2c <__malloc_lock>
 4013740:	81ffff17 	ldw	r7,-4(r16)
 4013744:	00bfff84 	movi	r2,-2
 4013748:	010100b4 	movhi	r4,1026
 401374c:	81bffe04 	addi	r6,r16,-8
 4013750:	3884703a 	and	r2,r7,r2
 4013754:	211d4a04 	addi	r4,r4,29992
 4013758:	308b883a 	add	r5,r6,r2
 401375c:	2a400117 	ldw	r9,4(r5)
 4013760:	22000217 	ldw	r8,8(r4)
 4013764:	00ffff04 	movi	r3,-4
 4013768:	48c6703a 	and	r3,r9,r3
 401376c:	2a005726 	beq	r5,r8,40138cc <_free_r+0x1ac>
 4013770:	28c00115 	stw	r3,4(r5)
 4013774:	39c0004c 	andi	r7,r7,1
 4013778:	3800091e 	bne	r7,zero,40137a0 <_free_r+0x80>
 401377c:	823ffe17 	ldw	r8,-8(r16)
 4013780:	22400204 	addi	r9,r4,8
 4013784:	320dc83a 	sub	r6,r6,r8
 4013788:	31c00217 	ldw	r7,8(r6)
 401378c:	1205883a 	add	r2,r2,r8
 4013790:	3a406526 	beq	r7,r9,4013928 <_free_r+0x208>
 4013794:	32000317 	ldw	r8,12(r6)
 4013798:	3a000315 	stw	r8,12(r7)
 401379c:	41c00215 	stw	r7,8(r8)
 40137a0:	28cf883a 	add	r7,r5,r3
 40137a4:	39c00117 	ldw	r7,4(r7)
 40137a8:	39c0004c 	andi	r7,r7,1
 40137ac:	38003a26 	beq	r7,zero,4013898 <_free_r+0x178>
 40137b0:	10c00054 	ori	r3,r2,1
 40137b4:	30c00115 	stw	r3,4(r6)
 40137b8:	3087883a 	add	r3,r6,r2
 40137bc:	18800015 	stw	r2,0(r3)
 40137c0:	00c07fc4 	movi	r3,511
 40137c4:	18801936 	bltu	r3,r2,401382c <_free_r+0x10c>
 40137c8:	1004d0fa 	srli	r2,r2,3
 40137cc:	01c00044 	movi	r7,1
 40137d0:	21400117 	ldw	r5,4(r4)
 40137d4:	10c00044 	addi	r3,r2,1
 40137d8:	18c7883a 	add	r3,r3,r3
 40137dc:	1005d0ba 	srai	r2,r2,2
 40137e0:	18c7883a 	add	r3,r3,r3
 40137e4:	18c7883a 	add	r3,r3,r3
 40137e8:	1907883a 	add	r3,r3,r4
 40137ec:	3884983a 	sll	r2,r7,r2
 40137f0:	19c00017 	ldw	r7,0(r3)
 40137f4:	1a3ffe04 	addi	r8,r3,-8
 40137f8:	1144b03a 	or	r2,r2,r5
 40137fc:	32000315 	stw	r8,12(r6)
 4013800:	31c00215 	stw	r7,8(r6)
 4013804:	20800115 	stw	r2,4(r4)
 4013808:	19800015 	stw	r6,0(r3)
 401380c:	39800315 	stw	r6,12(r7)
 4013810:	8809883a 	mov	r4,r17
 4013814:	dfc00217 	ldw	ra,8(sp)
 4013818:	dc400117 	ldw	r17,4(sp)
 401381c:	dc000017 	ldw	r16,0(sp)
 4013820:	dec00304 	addi	sp,sp,12
 4013824:	401ba501 	jmpi	401ba50 <__malloc_unlock>
 4013828:	f800283a 	ret
 401382c:	100ad27a 	srli	r5,r2,9
 4013830:	00c00104 	movi	r3,4
 4013834:	19404a36 	bltu	r3,r5,4013960 <_free_r+0x240>
 4013838:	100ad1ba 	srli	r5,r2,6
 401383c:	28c00e44 	addi	r3,r5,57
 4013840:	18c7883a 	add	r3,r3,r3
 4013844:	29400e04 	addi	r5,r5,56
 4013848:	18c7883a 	add	r3,r3,r3
 401384c:	18c7883a 	add	r3,r3,r3
 4013850:	1909883a 	add	r4,r3,r4
 4013854:	20c00017 	ldw	r3,0(r4)
 4013858:	01c100b4 	movhi	r7,1026
 401385c:	213ffe04 	addi	r4,r4,-8
 4013860:	39dd4a04 	addi	r7,r7,29992
 4013864:	20c04426 	beq	r4,r3,4013978 <_free_r+0x258>
 4013868:	01ffff04 	movi	r7,-4
 401386c:	19400117 	ldw	r5,4(r3)
 4013870:	29ca703a 	and	r5,r5,r7
 4013874:	1140022e 	bgeu	r2,r5,4013880 <_free_r+0x160>
 4013878:	18c00217 	ldw	r3,8(r3)
 401387c:	20fffb1e 	bne	r4,r3,401386c <__alt_mem_onchip_memory2_0+0xfc0125ec>
 4013880:	19000317 	ldw	r4,12(r3)
 4013884:	31000315 	stw	r4,12(r6)
 4013888:	30c00215 	stw	r3,8(r6)
 401388c:	21800215 	stw	r6,8(r4)
 4013890:	19800315 	stw	r6,12(r3)
 4013894:	003fde06 	br	4013810 <__alt_mem_onchip_memory2_0+0xfc012590>
 4013898:	29c00217 	ldw	r7,8(r5)
 401389c:	10c5883a 	add	r2,r2,r3
 40138a0:	00c100b4 	movhi	r3,1026
 40138a4:	18dd4c04 	addi	r3,r3,30000
 40138a8:	38c03b26 	beq	r7,r3,4013998 <_free_r+0x278>
 40138ac:	2a000317 	ldw	r8,12(r5)
 40138b0:	11400054 	ori	r5,r2,1
 40138b4:	3087883a 	add	r3,r6,r2
 40138b8:	3a000315 	stw	r8,12(r7)
 40138bc:	41c00215 	stw	r7,8(r8)
 40138c0:	31400115 	stw	r5,4(r6)
 40138c4:	18800015 	stw	r2,0(r3)
 40138c8:	003fbd06 	br	40137c0 <__alt_mem_onchip_memory2_0+0xfc012540>
 40138cc:	39c0004c 	andi	r7,r7,1
 40138d0:	10c5883a 	add	r2,r2,r3
 40138d4:	3800071e 	bne	r7,zero,40138f4 <_free_r+0x1d4>
 40138d8:	81fffe17 	ldw	r7,-8(r16)
 40138dc:	31cdc83a 	sub	r6,r6,r7
 40138e0:	30c00317 	ldw	r3,12(r6)
 40138e4:	31400217 	ldw	r5,8(r6)
 40138e8:	11c5883a 	add	r2,r2,r7
 40138ec:	28c00315 	stw	r3,12(r5)
 40138f0:	19400215 	stw	r5,8(r3)
 40138f4:	10c00054 	ori	r3,r2,1
 40138f8:	30c00115 	stw	r3,4(r6)
 40138fc:	00c100f4 	movhi	r3,1027
 4013900:	18e8a904 	addi	r3,r3,-23900
 4013904:	18c00017 	ldw	r3,0(r3)
 4013908:	21800215 	stw	r6,8(r4)
 401390c:	10ffc036 	bltu	r2,r3,4013810 <__alt_mem_onchip_memory2_0+0xfc012590>
 4013910:	008100f4 	movhi	r2,1027
 4013914:	10b53804 	addi	r2,r2,-11040
 4013918:	11400017 	ldw	r5,0(r2)
 401391c:	8809883a 	mov	r4,r17
 4013920:	40135fc0 	call	40135fc <_malloc_trim_r>
 4013924:	003fba06 	br	4013810 <__alt_mem_onchip_memory2_0+0xfc012590>
 4013928:	28c9883a 	add	r4,r5,r3
 401392c:	21000117 	ldw	r4,4(r4)
 4013930:	2100004c 	andi	r4,r4,1
 4013934:	2000391e 	bne	r4,zero,4013a1c <_free_r+0x2fc>
 4013938:	29c00217 	ldw	r7,8(r5)
 401393c:	29000317 	ldw	r4,12(r5)
 4013940:	1885883a 	add	r2,r3,r2
 4013944:	10c00054 	ori	r3,r2,1
 4013948:	39000315 	stw	r4,12(r7)
 401394c:	21c00215 	stw	r7,8(r4)
 4013950:	30c00115 	stw	r3,4(r6)
 4013954:	308d883a 	add	r6,r6,r2
 4013958:	30800015 	stw	r2,0(r6)
 401395c:	003fac06 	br	4013810 <__alt_mem_onchip_memory2_0+0xfc012590>
 4013960:	00c00504 	movi	r3,20
 4013964:	19401536 	bltu	r3,r5,40139bc <_free_r+0x29c>
 4013968:	28c01704 	addi	r3,r5,92
 401396c:	18c7883a 	add	r3,r3,r3
 4013970:	294016c4 	addi	r5,r5,91
 4013974:	003fb406 	br	4013848 <__alt_mem_onchip_memory2_0+0xfc0125c8>
 4013978:	280bd0ba 	srai	r5,r5,2
 401397c:	00c00044 	movi	r3,1
 4013980:	38800117 	ldw	r2,4(r7)
 4013984:	194a983a 	sll	r5,r3,r5
 4013988:	2007883a 	mov	r3,r4
 401398c:	2884b03a 	or	r2,r5,r2
 4013990:	38800115 	stw	r2,4(r7)
 4013994:	003fbb06 	br	4013884 <__alt_mem_onchip_memory2_0+0xfc012604>
 4013998:	21800515 	stw	r6,20(r4)
 401399c:	21800415 	stw	r6,16(r4)
 40139a0:	10c00054 	ori	r3,r2,1
 40139a4:	31c00315 	stw	r7,12(r6)
 40139a8:	31c00215 	stw	r7,8(r6)
 40139ac:	30c00115 	stw	r3,4(r6)
 40139b0:	308d883a 	add	r6,r6,r2
 40139b4:	30800015 	stw	r2,0(r6)
 40139b8:	003f9506 	br	4013810 <__alt_mem_onchip_memory2_0+0xfc012590>
 40139bc:	00c01504 	movi	r3,84
 40139c0:	19400536 	bltu	r3,r5,40139d8 <_free_r+0x2b8>
 40139c4:	100ad33a 	srli	r5,r2,12
 40139c8:	28c01bc4 	addi	r3,r5,111
 40139cc:	18c7883a 	add	r3,r3,r3
 40139d0:	29401b84 	addi	r5,r5,110
 40139d4:	003f9c06 	br	4013848 <__alt_mem_onchip_memory2_0+0xfc0125c8>
 40139d8:	00c05504 	movi	r3,340
 40139dc:	19400536 	bltu	r3,r5,40139f4 <_free_r+0x2d4>
 40139e0:	100ad3fa 	srli	r5,r2,15
 40139e4:	28c01e04 	addi	r3,r5,120
 40139e8:	18c7883a 	add	r3,r3,r3
 40139ec:	29401dc4 	addi	r5,r5,119
 40139f0:	003f9506 	br	4013848 <__alt_mem_onchip_memory2_0+0xfc0125c8>
 40139f4:	00c15504 	movi	r3,1364
 40139f8:	19400536 	bltu	r3,r5,4013a10 <_free_r+0x2f0>
 40139fc:	100ad4ba 	srli	r5,r2,18
 4013a00:	28c01f44 	addi	r3,r5,125
 4013a04:	18c7883a 	add	r3,r3,r3
 4013a08:	29401f04 	addi	r5,r5,124
 4013a0c:	003f8e06 	br	4013848 <__alt_mem_onchip_memory2_0+0xfc0125c8>
 4013a10:	00c03f84 	movi	r3,254
 4013a14:	01401f84 	movi	r5,126
 4013a18:	003f8b06 	br	4013848 <__alt_mem_onchip_memory2_0+0xfc0125c8>
 4013a1c:	10c00054 	ori	r3,r2,1
 4013a20:	30c00115 	stw	r3,4(r6)
 4013a24:	308d883a 	add	r6,r6,r2
 4013a28:	30800015 	stw	r2,0(r6)
 4013a2c:	003f7806 	br	4013810 <__alt_mem_onchip_memory2_0+0xfc012590>

04013a30 <__sfvwrite_r>:
 4013a30:	30800217 	ldw	r2,8(r6)
 4013a34:	10006726 	beq	r2,zero,4013bd4 <__sfvwrite_r+0x1a4>
 4013a38:	28c0030b 	ldhu	r3,12(r5)
 4013a3c:	defff404 	addi	sp,sp,-48
 4013a40:	dd400715 	stw	r21,28(sp)
 4013a44:	dd000615 	stw	r20,24(sp)
 4013a48:	dc000215 	stw	r16,8(sp)
 4013a4c:	dfc00b15 	stw	ra,44(sp)
 4013a50:	df000a15 	stw	fp,40(sp)
 4013a54:	ddc00915 	stw	r23,36(sp)
 4013a58:	dd800815 	stw	r22,32(sp)
 4013a5c:	dcc00515 	stw	r19,20(sp)
 4013a60:	dc800415 	stw	r18,16(sp)
 4013a64:	dc400315 	stw	r17,12(sp)
 4013a68:	1880020c 	andi	r2,r3,8
 4013a6c:	2821883a 	mov	r16,r5
 4013a70:	202b883a 	mov	r21,r4
 4013a74:	3029883a 	mov	r20,r6
 4013a78:	10002726 	beq	r2,zero,4013b18 <__sfvwrite_r+0xe8>
 4013a7c:	28800417 	ldw	r2,16(r5)
 4013a80:	10002526 	beq	r2,zero,4013b18 <__sfvwrite_r+0xe8>
 4013a84:	1880008c 	andi	r2,r3,2
 4013a88:	a4400017 	ldw	r17,0(r20)
 4013a8c:	10002a26 	beq	r2,zero,4013b38 <__sfvwrite_r+0x108>
 4013a90:	05a00034 	movhi	r22,32768
 4013a94:	0027883a 	mov	r19,zero
 4013a98:	0025883a 	mov	r18,zero
 4013a9c:	b5bf0004 	addi	r22,r22,-1024
 4013aa0:	980d883a 	mov	r6,r19
 4013aa4:	a809883a 	mov	r4,r21
 4013aa8:	90004626 	beq	r18,zero,4013bc4 <__sfvwrite_r+0x194>
 4013aac:	900f883a 	mov	r7,r18
 4013ab0:	b480022e 	bgeu	r22,r18,4013abc <__sfvwrite_r+0x8c>
 4013ab4:	01e00034 	movhi	r7,32768
 4013ab8:	39ff0004 	addi	r7,r7,-1024
 4013abc:	80800917 	ldw	r2,36(r16)
 4013ac0:	81400717 	ldw	r5,28(r16)
 4013ac4:	103ee83a 	callr	r2
 4013ac8:	00805a0e 	bge	zero,r2,4013c34 <__sfvwrite_r+0x204>
 4013acc:	a0c00217 	ldw	r3,8(r20)
 4013ad0:	98a7883a 	add	r19,r19,r2
 4013ad4:	90a5c83a 	sub	r18,r18,r2
 4013ad8:	1885c83a 	sub	r2,r3,r2
 4013adc:	a0800215 	stw	r2,8(r20)
 4013ae0:	103fef1e 	bne	r2,zero,4013aa0 <__alt_mem_onchip_memory2_0+0xfc012820>
 4013ae4:	0005883a 	mov	r2,zero
 4013ae8:	dfc00b17 	ldw	ra,44(sp)
 4013aec:	df000a17 	ldw	fp,40(sp)
 4013af0:	ddc00917 	ldw	r23,36(sp)
 4013af4:	dd800817 	ldw	r22,32(sp)
 4013af8:	dd400717 	ldw	r21,28(sp)
 4013afc:	dd000617 	ldw	r20,24(sp)
 4013b00:	dcc00517 	ldw	r19,20(sp)
 4013b04:	dc800417 	ldw	r18,16(sp)
 4013b08:	dc400317 	ldw	r17,12(sp)
 4013b0c:	dc000217 	ldw	r16,8(sp)
 4013b10:	dec00c04 	addi	sp,sp,48
 4013b14:	f800283a 	ret
 4013b18:	800b883a 	mov	r5,r16
 4013b1c:	a809883a 	mov	r4,r21
 4013b20:	40115a00 	call	40115a0 <__swsetup_r>
 4013b24:	1000ee1e 	bne	r2,zero,4013ee0 <__sfvwrite_r+0x4b0>
 4013b28:	80c0030b 	ldhu	r3,12(r16)
 4013b2c:	a4400017 	ldw	r17,0(r20)
 4013b30:	1880008c 	andi	r2,r3,2
 4013b34:	103fd61e 	bne	r2,zero,4013a90 <__alt_mem_onchip_memory2_0+0xfc012810>
 4013b38:	1880004c 	andi	r2,r3,1
 4013b3c:	1000421e 	bne	r2,zero,4013c48 <__sfvwrite_r+0x218>
 4013b40:	0039883a 	mov	fp,zero
 4013b44:	0025883a 	mov	r18,zero
 4013b48:	90001a26 	beq	r18,zero,4013bb4 <__sfvwrite_r+0x184>
 4013b4c:	1880800c 	andi	r2,r3,512
 4013b50:	84c00217 	ldw	r19,8(r16)
 4013b54:	10002126 	beq	r2,zero,4013bdc <__sfvwrite_r+0x1ac>
 4013b58:	982f883a 	mov	r23,r19
 4013b5c:	94c09636 	bltu	r18,r19,4013db8 <__sfvwrite_r+0x388>
 4013b60:	1881200c 	andi	r2,r3,1152
 4013b64:	1000a11e 	bne	r2,zero,4013dec <__sfvwrite_r+0x3bc>
 4013b68:	81000017 	ldw	r4,0(r16)
 4013b6c:	b80d883a 	mov	r6,r23
 4013b70:	e00b883a 	mov	r5,fp
 4013b74:	40143fc0 	call	40143fc <memmove>
 4013b78:	80c00217 	ldw	r3,8(r16)
 4013b7c:	81000017 	ldw	r4,0(r16)
 4013b80:	9005883a 	mov	r2,r18
 4013b84:	1ce7c83a 	sub	r19,r3,r19
 4013b88:	25cf883a 	add	r7,r4,r23
 4013b8c:	84c00215 	stw	r19,8(r16)
 4013b90:	81c00015 	stw	r7,0(r16)
 4013b94:	a0c00217 	ldw	r3,8(r20)
 4013b98:	e0b9883a 	add	fp,fp,r2
 4013b9c:	90a5c83a 	sub	r18,r18,r2
 4013ba0:	18a7c83a 	sub	r19,r3,r2
 4013ba4:	a4c00215 	stw	r19,8(r20)
 4013ba8:	983fce26 	beq	r19,zero,4013ae4 <__alt_mem_onchip_memory2_0+0xfc012864>
 4013bac:	80c0030b 	ldhu	r3,12(r16)
 4013bb0:	903fe61e 	bne	r18,zero,4013b4c <__alt_mem_onchip_memory2_0+0xfc0128cc>
 4013bb4:	8f000017 	ldw	fp,0(r17)
 4013bb8:	8c800117 	ldw	r18,4(r17)
 4013bbc:	8c400204 	addi	r17,r17,8
 4013bc0:	003fe106 	br	4013b48 <__alt_mem_onchip_memory2_0+0xfc0128c8>
 4013bc4:	8cc00017 	ldw	r19,0(r17)
 4013bc8:	8c800117 	ldw	r18,4(r17)
 4013bcc:	8c400204 	addi	r17,r17,8
 4013bd0:	003fb306 	br	4013aa0 <__alt_mem_onchip_memory2_0+0xfc012820>
 4013bd4:	0005883a 	mov	r2,zero
 4013bd8:	f800283a 	ret
 4013bdc:	81000017 	ldw	r4,0(r16)
 4013be0:	80800417 	ldw	r2,16(r16)
 4013be4:	11005a36 	bltu	r2,r4,4013d50 <__sfvwrite_r+0x320>
 4013be8:	85c00517 	ldw	r23,20(r16)
 4013bec:	95c05836 	bltu	r18,r23,4013d50 <__sfvwrite_r+0x320>
 4013bf0:	00a00034 	movhi	r2,32768
 4013bf4:	10bfffc4 	addi	r2,r2,-1
 4013bf8:	9009883a 	mov	r4,r18
 4013bfc:	1480012e 	bgeu	r2,r18,4013c04 <__sfvwrite_r+0x1d4>
 4013c00:	1009883a 	mov	r4,r2
 4013c04:	b80b883a 	mov	r5,r23
 4013c08:	400ce200 	call	400ce20 <__divsi3>
 4013c0c:	b80b883a 	mov	r5,r23
 4013c10:	1009883a 	mov	r4,r2
 4013c14:	400cfd40 	call	400cfd4 <__mulsi3>
 4013c18:	81400717 	ldw	r5,28(r16)
 4013c1c:	80c00917 	ldw	r3,36(r16)
 4013c20:	100f883a 	mov	r7,r2
 4013c24:	e00d883a 	mov	r6,fp
 4013c28:	a809883a 	mov	r4,r21
 4013c2c:	183ee83a 	callr	r3
 4013c30:	00bfd816 	blt	zero,r2,4013b94 <__alt_mem_onchip_memory2_0+0xfc012914>
 4013c34:	8080030b 	ldhu	r2,12(r16)
 4013c38:	10801014 	ori	r2,r2,64
 4013c3c:	8080030d 	sth	r2,12(r16)
 4013c40:	00bfffc4 	movi	r2,-1
 4013c44:	003fa806 	br	4013ae8 <__alt_mem_onchip_memory2_0+0xfc012868>
 4013c48:	0027883a 	mov	r19,zero
 4013c4c:	0011883a 	mov	r8,zero
 4013c50:	0039883a 	mov	fp,zero
 4013c54:	0025883a 	mov	r18,zero
 4013c58:	90001f26 	beq	r18,zero,4013cd8 <__sfvwrite_r+0x2a8>
 4013c5c:	40005a26 	beq	r8,zero,4013dc8 <__sfvwrite_r+0x398>
 4013c60:	982d883a 	mov	r22,r19
 4013c64:	94c0012e 	bgeu	r18,r19,4013c6c <__sfvwrite_r+0x23c>
 4013c68:	902d883a 	mov	r22,r18
 4013c6c:	81000017 	ldw	r4,0(r16)
 4013c70:	80800417 	ldw	r2,16(r16)
 4013c74:	b02f883a 	mov	r23,r22
 4013c78:	81c00517 	ldw	r7,20(r16)
 4013c7c:	1100032e 	bgeu	r2,r4,4013c8c <__sfvwrite_r+0x25c>
 4013c80:	80c00217 	ldw	r3,8(r16)
 4013c84:	38c7883a 	add	r3,r7,r3
 4013c88:	1d801816 	blt	r3,r22,4013cec <__sfvwrite_r+0x2bc>
 4013c8c:	b1c03e16 	blt	r22,r7,4013d88 <__sfvwrite_r+0x358>
 4013c90:	80800917 	ldw	r2,36(r16)
 4013c94:	81400717 	ldw	r5,28(r16)
 4013c98:	e00d883a 	mov	r6,fp
 4013c9c:	da000115 	stw	r8,4(sp)
 4013ca0:	a809883a 	mov	r4,r21
 4013ca4:	103ee83a 	callr	r2
 4013ca8:	102f883a 	mov	r23,r2
 4013cac:	da000117 	ldw	r8,4(sp)
 4013cb0:	00bfe00e 	bge	zero,r2,4013c34 <__alt_mem_onchip_memory2_0+0xfc0129b4>
 4013cb4:	9de7c83a 	sub	r19,r19,r23
 4013cb8:	98001f26 	beq	r19,zero,4013d38 <__sfvwrite_r+0x308>
 4013cbc:	a0800217 	ldw	r2,8(r20)
 4013cc0:	e5f9883a 	add	fp,fp,r23
 4013cc4:	95e5c83a 	sub	r18,r18,r23
 4013cc8:	15efc83a 	sub	r23,r2,r23
 4013ccc:	a5c00215 	stw	r23,8(r20)
 4013cd0:	b83f8426 	beq	r23,zero,4013ae4 <__alt_mem_onchip_memory2_0+0xfc012864>
 4013cd4:	903fe11e 	bne	r18,zero,4013c5c <__alt_mem_onchip_memory2_0+0xfc0129dc>
 4013cd8:	8f000017 	ldw	fp,0(r17)
 4013cdc:	8c800117 	ldw	r18,4(r17)
 4013ce0:	0011883a 	mov	r8,zero
 4013ce4:	8c400204 	addi	r17,r17,8
 4013ce8:	003fdb06 	br	4013c58 <__alt_mem_onchip_memory2_0+0xfc0129d8>
 4013cec:	180d883a 	mov	r6,r3
 4013cf0:	e00b883a 	mov	r5,fp
 4013cf4:	da000115 	stw	r8,4(sp)
 4013cf8:	d8c00015 	stw	r3,0(sp)
 4013cfc:	40143fc0 	call	40143fc <memmove>
 4013d00:	d8c00017 	ldw	r3,0(sp)
 4013d04:	80800017 	ldw	r2,0(r16)
 4013d08:	800b883a 	mov	r5,r16
 4013d0c:	a809883a 	mov	r4,r21
 4013d10:	10c5883a 	add	r2,r2,r3
 4013d14:	80800015 	stw	r2,0(r16)
 4013d18:	d8c00015 	stw	r3,0(sp)
 4013d1c:	40131c00 	call	40131c0 <_fflush_r>
 4013d20:	d8c00017 	ldw	r3,0(sp)
 4013d24:	da000117 	ldw	r8,4(sp)
 4013d28:	103fc21e 	bne	r2,zero,4013c34 <__alt_mem_onchip_memory2_0+0xfc0129b4>
 4013d2c:	182f883a 	mov	r23,r3
 4013d30:	9de7c83a 	sub	r19,r19,r23
 4013d34:	983fe11e 	bne	r19,zero,4013cbc <__alt_mem_onchip_memory2_0+0xfc012a3c>
 4013d38:	800b883a 	mov	r5,r16
 4013d3c:	a809883a 	mov	r4,r21
 4013d40:	40131c00 	call	40131c0 <_fflush_r>
 4013d44:	103fbb1e 	bne	r2,zero,4013c34 <__alt_mem_onchip_memory2_0+0xfc0129b4>
 4013d48:	0011883a 	mov	r8,zero
 4013d4c:	003fdb06 	br	4013cbc <__alt_mem_onchip_memory2_0+0xfc012a3c>
 4013d50:	94c0012e 	bgeu	r18,r19,4013d58 <__sfvwrite_r+0x328>
 4013d54:	9027883a 	mov	r19,r18
 4013d58:	980d883a 	mov	r6,r19
 4013d5c:	e00b883a 	mov	r5,fp
 4013d60:	40143fc0 	call	40143fc <memmove>
 4013d64:	80800217 	ldw	r2,8(r16)
 4013d68:	80c00017 	ldw	r3,0(r16)
 4013d6c:	14c5c83a 	sub	r2,r2,r19
 4013d70:	1cc7883a 	add	r3,r3,r19
 4013d74:	80800215 	stw	r2,8(r16)
 4013d78:	80c00015 	stw	r3,0(r16)
 4013d7c:	10004326 	beq	r2,zero,4013e8c <__sfvwrite_r+0x45c>
 4013d80:	9805883a 	mov	r2,r19
 4013d84:	003f8306 	br	4013b94 <__alt_mem_onchip_memory2_0+0xfc012914>
 4013d88:	b00d883a 	mov	r6,r22
 4013d8c:	e00b883a 	mov	r5,fp
 4013d90:	da000115 	stw	r8,4(sp)
 4013d94:	40143fc0 	call	40143fc <memmove>
 4013d98:	80800217 	ldw	r2,8(r16)
 4013d9c:	80c00017 	ldw	r3,0(r16)
 4013da0:	da000117 	ldw	r8,4(sp)
 4013da4:	1585c83a 	sub	r2,r2,r22
 4013da8:	1dad883a 	add	r22,r3,r22
 4013dac:	80800215 	stw	r2,8(r16)
 4013db0:	85800015 	stw	r22,0(r16)
 4013db4:	003fbf06 	br	4013cb4 <__alt_mem_onchip_memory2_0+0xfc012a34>
 4013db8:	81000017 	ldw	r4,0(r16)
 4013dbc:	9027883a 	mov	r19,r18
 4013dc0:	902f883a 	mov	r23,r18
 4013dc4:	003f6906 	br	4013b6c <__alt_mem_onchip_memory2_0+0xfc0128ec>
 4013dc8:	900d883a 	mov	r6,r18
 4013dcc:	01400284 	movi	r5,10
 4013dd0:	e009883a 	mov	r4,fp
 4013dd4:	40143180 	call	4014318 <memchr>
 4013dd8:	10003e26 	beq	r2,zero,4013ed4 <__sfvwrite_r+0x4a4>
 4013ddc:	10800044 	addi	r2,r2,1
 4013de0:	1727c83a 	sub	r19,r2,fp
 4013de4:	02000044 	movi	r8,1
 4013de8:	003f9d06 	br	4013c60 <__alt_mem_onchip_memory2_0+0xfc0129e0>
 4013dec:	80800517 	ldw	r2,20(r16)
 4013df0:	81400417 	ldw	r5,16(r16)
 4013df4:	81c00017 	ldw	r7,0(r16)
 4013df8:	10a7883a 	add	r19,r2,r2
 4013dfc:	9885883a 	add	r2,r19,r2
 4013e00:	1026d7fa 	srli	r19,r2,31
 4013e04:	396dc83a 	sub	r22,r7,r5
 4013e08:	b1000044 	addi	r4,r22,1
 4013e0c:	9885883a 	add	r2,r19,r2
 4013e10:	1027d07a 	srai	r19,r2,1
 4013e14:	2485883a 	add	r2,r4,r18
 4013e18:	980d883a 	mov	r6,r19
 4013e1c:	9880022e 	bgeu	r19,r2,4013e28 <__sfvwrite_r+0x3f8>
 4013e20:	1027883a 	mov	r19,r2
 4013e24:	100d883a 	mov	r6,r2
 4013e28:	18c1000c 	andi	r3,r3,1024
 4013e2c:	18001c26 	beq	r3,zero,4013ea0 <__sfvwrite_r+0x470>
 4013e30:	300b883a 	mov	r5,r6
 4013e34:	a809883a 	mov	r4,r21
 4013e38:	400e13c0 	call	400e13c <_malloc_r>
 4013e3c:	102f883a 	mov	r23,r2
 4013e40:	10002926 	beq	r2,zero,4013ee8 <__sfvwrite_r+0x4b8>
 4013e44:	81400417 	ldw	r5,16(r16)
 4013e48:	b00d883a 	mov	r6,r22
 4013e4c:	1009883a 	mov	r4,r2
 4013e50:	400e9480 	call	400e948 <memcpy>
 4013e54:	8080030b 	ldhu	r2,12(r16)
 4013e58:	00fedfc4 	movi	r3,-1153
 4013e5c:	10c4703a 	and	r2,r2,r3
 4013e60:	10802014 	ori	r2,r2,128
 4013e64:	8080030d 	sth	r2,12(r16)
 4013e68:	bd89883a 	add	r4,r23,r22
 4013e6c:	9d8fc83a 	sub	r7,r19,r22
 4013e70:	85c00415 	stw	r23,16(r16)
 4013e74:	84c00515 	stw	r19,20(r16)
 4013e78:	81000015 	stw	r4,0(r16)
 4013e7c:	9027883a 	mov	r19,r18
 4013e80:	81c00215 	stw	r7,8(r16)
 4013e84:	902f883a 	mov	r23,r18
 4013e88:	003f3806 	br	4013b6c <__alt_mem_onchip_memory2_0+0xfc0128ec>
 4013e8c:	800b883a 	mov	r5,r16
 4013e90:	a809883a 	mov	r4,r21
 4013e94:	40131c00 	call	40131c0 <_fflush_r>
 4013e98:	103fb926 	beq	r2,zero,4013d80 <__alt_mem_onchip_memory2_0+0xfc012b00>
 4013e9c:	003f6506 	br	4013c34 <__alt_mem_onchip_memory2_0+0xfc0129b4>
 4013ea0:	a809883a 	mov	r4,r21
 4013ea4:	40157780 	call	4015778 <_realloc_r>
 4013ea8:	102f883a 	mov	r23,r2
 4013eac:	103fee1e 	bne	r2,zero,4013e68 <__alt_mem_onchip_memory2_0+0xfc012be8>
 4013eb0:	81400417 	ldw	r5,16(r16)
 4013eb4:	a809883a 	mov	r4,r21
 4013eb8:	40137200 	call	4013720 <_free_r>
 4013ebc:	8080030b 	ldhu	r2,12(r16)
 4013ec0:	00ffdfc4 	movi	r3,-129
 4013ec4:	1884703a 	and	r2,r3,r2
 4013ec8:	00c00304 	movi	r3,12
 4013ecc:	a8c00015 	stw	r3,0(r21)
 4013ed0:	003f5906 	br	4013c38 <__alt_mem_onchip_memory2_0+0xfc0129b8>
 4013ed4:	94c00044 	addi	r19,r18,1
 4013ed8:	02000044 	movi	r8,1
 4013edc:	003f6006 	br	4013c60 <__alt_mem_onchip_memory2_0+0xfc0129e0>
 4013ee0:	00bfffc4 	movi	r2,-1
 4013ee4:	003f0006 	br	4013ae8 <__alt_mem_onchip_memory2_0+0xfc012868>
 4013ee8:	00800304 	movi	r2,12
 4013eec:	a8800015 	stw	r2,0(r21)
 4013ef0:	8080030b 	ldhu	r2,12(r16)
 4013ef4:	003f5006 	br	4013c38 <__alt_mem_onchip_memory2_0+0xfc0129b8>

04013ef8 <_fwalk>:
 4013ef8:	defff704 	addi	sp,sp,-36
 4013efc:	dd000415 	stw	r20,16(sp)
 4013f00:	dfc00815 	stw	ra,32(sp)
 4013f04:	ddc00715 	stw	r23,28(sp)
 4013f08:	dd800615 	stw	r22,24(sp)
 4013f0c:	dd400515 	stw	r21,20(sp)
 4013f10:	dcc00315 	stw	r19,12(sp)
 4013f14:	dc800215 	stw	r18,8(sp)
 4013f18:	dc400115 	stw	r17,4(sp)
 4013f1c:	dc000015 	stw	r16,0(sp)
 4013f20:	2500b804 	addi	r20,r4,736
 4013f24:	a0002326 	beq	r20,zero,4013fb4 <_fwalk+0xbc>
 4013f28:	282b883a 	mov	r21,r5
 4013f2c:	002f883a 	mov	r23,zero
 4013f30:	05800044 	movi	r22,1
 4013f34:	04ffffc4 	movi	r19,-1
 4013f38:	a4400117 	ldw	r17,4(r20)
 4013f3c:	a4800217 	ldw	r18,8(r20)
 4013f40:	8c7fffc4 	addi	r17,r17,-1
 4013f44:	88000d16 	blt	r17,zero,4013f7c <_fwalk+0x84>
 4013f48:	94000304 	addi	r16,r18,12
 4013f4c:	94800384 	addi	r18,r18,14
 4013f50:	8080000b 	ldhu	r2,0(r16)
 4013f54:	8c7fffc4 	addi	r17,r17,-1
 4013f58:	813ffd04 	addi	r4,r16,-12
 4013f5c:	b080042e 	bgeu	r22,r2,4013f70 <_fwalk+0x78>
 4013f60:	9080000f 	ldh	r2,0(r18)
 4013f64:	14c00226 	beq	r2,r19,4013f70 <_fwalk+0x78>
 4013f68:	a83ee83a 	callr	r21
 4013f6c:	b8aeb03a 	or	r23,r23,r2
 4013f70:	84001a04 	addi	r16,r16,104
 4013f74:	94801a04 	addi	r18,r18,104
 4013f78:	8cfff51e 	bne	r17,r19,4013f50 <__alt_mem_onchip_memory2_0+0xfc012cd0>
 4013f7c:	a5000017 	ldw	r20,0(r20)
 4013f80:	a03fed1e 	bne	r20,zero,4013f38 <__alt_mem_onchip_memory2_0+0xfc012cb8>
 4013f84:	b805883a 	mov	r2,r23
 4013f88:	dfc00817 	ldw	ra,32(sp)
 4013f8c:	ddc00717 	ldw	r23,28(sp)
 4013f90:	dd800617 	ldw	r22,24(sp)
 4013f94:	dd400517 	ldw	r21,20(sp)
 4013f98:	dd000417 	ldw	r20,16(sp)
 4013f9c:	dcc00317 	ldw	r19,12(sp)
 4013fa0:	dc800217 	ldw	r18,8(sp)
 4013fa4:	dc400117 	ldw	r17,4(sp)
 4013fa8:	dc000017 	ldw	r16,0(sp)
 4013fac:	dec00904 	addi	sp,sp,36
 4013fb0:	f800283a 	ret
 4013fb4:	002f883a 	mov	r23,zero
 4013fb8:	003ff206 	br	4013f84 <__alt_mem_onchip_memory2_0+0xfc012d04>

04013fbc <_fwalk_reent>:
 4013fbc:	defff704 	addi	sp,sp,-36
 4013fc0:	dd000415 	stw	r20,16(sp)
 4013fc4:	dfc00815 	stw	ra,32(sp)
 4013fc8:	ddc00715 	stw	r23,28(sp)
 4013fcc:	dd800615 	stw	r22,24(sp)
 4013fd0:	dd400515 	stw	r21,20(sp)
 4013fd4:	dcc00315 	stw	r19,12(sp)
 4013fd8:	dc800215 	stw	r18,8(sp)
 4013fdc:	dc400115 	stw	r17,4(sp)
 4013fe0:	dc000015 	stw	r16,0(sp)
 4013fe4:	2500b804 	addi	r20,r4,736
 4013fe8:	a0002326 	beq	r20,zero,4014078 <_fwalk_reent+0xbc>
 4013fec:	282b883a 	mov	r21,r5
 4013ff0:	2027883a 	mov	r19,r4
 4013ff4:	002f883a 	mov	r23,zero
 4013ff8:	05800044 	movi	r22,1
 4013ffc:	04bfffc4 	movi	r18,-1
 4014000:	a4400117 	ldw	r17,4(r20)
 4014004:	a4000217 	ldw	r16,8(r20)
 4014008:	8c7fffc4 	addi	r17,r17,-1
 401400c:	88000c16 	blt	r17,zero,4014040 <_fwalk_reent+0x84>
 4014010:	84000304 	addi	r16,r16,12
 4014014:	8080000b 	ldhu	r2,0(r16)
 4014018:	8c7fffc4 	addi	r17,r17,-1
 401401c:	817ffd04 	addi	r5,r16,-12
 4014020:	b080052e 	bgeu	r22,r2,4014038 <_fwalk_reent+0x7c>
 4014024:	8080008f 	ldh	r2,2(r16)
 4014028:	9809883a 	mov	r4,r19
 401402c:	14800226 	beq	r2,r18,4014038 <_fwalk_reent+0x7c>
 4014030:	a83ee83a 	callr	r21
 4014034:	b8aeb03a 	or	r23,r23,r2
 4014038:	84001a04 	addi	r16,r16,104
 401403c:	8cbff51e 	bne	r17,r18,4014014 <__alt_mem_onchip_memory2_0+0xfc012d94>
 4014040:	a5000017 	ldw	r20,0(r20)
 4014044:	a03fee1e 	bne	r20,zero,4014000 <__alt_mem_onchip_memory2_0+0xfc012d80>
 4014048:	b805883a 	mov	r2,r23
 401404c:	dfc00817 	ldw	ra,32(sp)
 4014050:	ddc00717 	ldw	r23,28(sp)
 4014054:	dd800617 	ldw	r22,24(sp)
 4014058:	dd400517 	ldw	r21,20(sp)
 401405c:	dd000417 	ldw	r20,16(sp)
 4014060:	dcc00317 	ldw	r19,12(sp)
 4014064:	dc800217 	ldw	r18,8(sp)
 4014068:	dc400117 	ldw	r17,4(sp)
 401406c:	dc000017 	ldw	r16,0(sp)
 4014070:	dec00904 	addi	sp,sp,36
 4014074:	f800283a 	ret
 4014078:	002f883a 	mov	r23,zero
 401407c:	003ff206 	br	4014048 <__alt_mem_onchip_memory2_0+0xfc012dc8>

04014080 <_setlocale_r>:
 4014080:	30001b26 	beq	r6,zero,40140f0 <_setlocale_r+0x70>
 4014084:	014100b4 	movhi	r5,1026
 4014088:	defffe04 	addi	sp,sp,-8
 401408c:	295bd504 	addi	r5,r5,28500
 4014090:	3009883a 	mov	r4,r6
 4014094:	dc000015 	stw	r16,0(sp)
 4014098:	dfc00115 	stw	ra,4(sp)
 401409c:	3021883a 	mov	r16,r6
 40140a0:	400f0700 	call	400f070 <strcmp>
 40140a4:	1000061e 	bne	r2,zero,40140c0 <_setlocale_r+0x40>
 40140a8:	008100b4 	movhi	r2,1026
 40140ac:	109bb604 	addi	r2,r2,28376
 40140b0:	dfc00117 	ldw	ra,4(sp)
 40140b4:	dc000017 	ldw	r16,0(sp)
 40140b8:	dec00204 	addi	sp,sp,8
 40140bc:	f800283a 	ret
 40140c0:	014100b4 	movhi	r5,1026
 40140c4:	295bb604 	addi	r5,r5,28376
 40140c8:	8009883a 	mov	r4,r16
 40140cc:	400f0700 	call	400f070 <strcmp>
 40140d0:	103ff526 	beq	r2,zero,40140a8 <__alt_mem_onchip_memory2_0+0xfc012e28>
 40140d4:	014100b4 	movhi	r5,1026
 40140d8:	295bc004 	addi	r5,r5,28416
 40140dc:	8009883a 	mov	r4,r16
 40140e0:	400f0700 	call	400f070 <strcmp>
 40140e4:	103ff026 	beq	r2,zero,40140a8 <__alt_mem_onchip_memory2_0+0xfc012e28>
 40140e8:	0005883a 	mov	r2,zero
 40140ec:	003ff006 	br	40140b0 <__alt_mem_onchip_memory2_0+0xfc012e30>
 40140f0:	008100b4 	movhi	r2,1026
 40140f4:	109bb604 	addi	r2,r2,28376
 40140f8:	f800283a 	ret

040140fc <__locale_charset>:
 40140fc:	008100b4 	movhi	r2,1026
 4014100:	109e5404 	addi	r2,r2,31056
 4014104:	f800283a 	ret

04014108 <__locale_mb_cur_max>:
 4014108:	008100f4 	movhi	r2,1027
 401410c:	10a8aa04 	addi	r2,r2,-23896
 4014110:	10800017 	ldw	r2,0(r2)
 4014114:	f800283a 	ret

04014118 <__locale_msgcharset>:
 4014118:	008100b4 	movhi	r2,1026
 401411c:	109e4c04 	addi	r2,r2,31024
 4014120:	f800283a 	ret

04014124 <__locale_cjk_lang>:
 4014124:	0005883a 	mov	r2,zero
 4014128:	f800283a 	ret

0401412c <_localeconv_r>:
 401412c:	008100b4 	movhi	r2,1026
 4014130:	109e5c04 	addi	r2,r2,31088
 4014134:	f800283a 	ret

04014138 <setlocale>:
 4014138:	008100f4 	movhi	r2,1027
 401413c:	10a8a704 	addi	r2,r2,-23908
 4014140:	280d883a 	mov	r6,r5
 4014144:	200b883a 	mov	r5,r4
 4014148:	11000017 	ldw	r4,0(r2)
 401414c:	40140801 	jmpi	4014080 <_setlocale_r>

04014150 <localeconv>:
 4014150:	008100b4 	movhi	r2,1026
 4014154:	109e5c04 	addi	r2,r2,31088
 4014158:	f800283a 	ret

0401415c <__smakebuf_r>:
 401415c:	2880030b 	ldhu	r2,12(r5)
 4014160:	10c0008c 	andi	r3,r2,2
 4014164:	1800411e 	bne	r3,zero,401426c <__smakebuf_r+0x110>
 4014168:	deffec04 	addi	sp,sp,-80
 401416c:	dc000f15 	stw	r16,60(sp)
 4014170:	2821883a 	mov	r16,r5
 4014174:	2940038f 	ldh	r5,14(r5)
 4014178:	dc401015 	stw	r17,64(sp)
 401417c:	dfc01315 	stw	ra,76(sp)
 4014180:	dcc01215 	stw	r19,72(sp)
 4014184:	dc801115 	stw	r18,68(sp)
 4014188:	2023883a 	mov	r17,r4
 401418c:	28001c16 	blt	r5,zero,4014200 <__smakebuf_r+0xa4>
 4014190:	d80d883a 	mov	r6,sp
 4014194:	4017b780 	call	4017b78 <_fstat_r>
 4014198:	10001816 	blt	r2,zero,40141fc <__smakebuf_r+0xa0>
 401419c:	d8800117 	ldw	r2,4(sp)
 40141a0:	00e00014 	movui	r3,32768
 40141a4:	10bc000c 	andi	r2,r2,61440
 40141a8:	14c80020 	cmpeqi	r19,r2,8192
 40141ac:	10c03726 	beq	r2,r3,401428c <__smakebuf_r+0x130>
 40141b0:	80c0030b 	ldhu	r3,12(r16)
 40141b4:	18c20014 	ori	r3,r3,2048
 40141b8:	80c0030d 	sth	r3,12(r16)
 40141bc:	00c80004 	movi	r3,8192
 40141c0:	10c0521e 	bne	r2,r3,401430c <__smakebuf_r+0x1b0>
 40141c4:	8140038f 	ldh	r5,14(r16)
 40141c8:	8809883a 	mov	r4,r17
 40141cc:	4017bd40 	call	4017bd4 <_isatty_r>
 40141d0:	10004c26 	beq	r2,zero,4014304 <__smakebuf_r+0x1a8>
 40141d4:	8080030b 	ldhu	r2,12(r16)
 40141d8:	80c010c4 	addi	r3,r16,67
 40141dc:	80c00015 	stw	r3,0(r16)
 40141e0:	10800054 	ori	r2,r2,1
 40141e4:	8080030d 	sth	r2,12(r16)
 40141e8:	00800044 	movi	r2,1
 40141ec:	80c00415 	stw	r3,16(r16)
 40141f0:	80800515 	stw	r2,20(r16)
 40141f4:	04810004 	movi	r18,1024
 40141f8:	00000706 	br	4014218 <__smakebuf_r+0xbc>
 40141fc:	8080030b 	ldhu	r2,12(r16)
 4014200:	10c0200c 	andi	r3,r2,128
 4014204:	18001f1e 	bne	r3,zero,4014284 <__smakebuf_r+0x128>
 4014208:	04810004 	movi	r18,1024
 401420c:	10820014 	ori	r2,r2,2048
 4014210:	8080030d 	sth	r2,12(r16)
 4014214:	0027883a 	mov	r19,zero
 4014218:	900b883a 	mov	r5,r18
 401421c:	8809883a 	mov	r4,r17
 4014220:	400e13c0 	call	400e13c <_malloc_r>
 4014224:	10002c26 	beq	r2,zero,40142d8 <__smakebuf_r+0x17c>
 4014228:	80c0030b 	ldhu	r3,12(r16)
 401422c:	01010074 	movhi	r4,1025
 4014230:	210c9504 	addi	r4,r4,12884
 4014234:	89000f15 	stw	r4,60(r17)
 4014238:	18c02014 	ori	r3,r3,128
 401423c:	80c0030d 	sth	r3,12(r16)
 4014240:	80800015 	stw	r2,0(r16)
 4014244:	80800415 	stw	r2,16(r16)
 4014248:	84800515 	stw	r18,20(r16)
 401424c:	98001a1e 	bne	r19,zero,40142b8 <__smakebuf_r+0x15c>
 4014250:	dfc01317 	ldw	ra,76(sp)
 4014254:	dcc01217 	ldw	r19,72(sp)
 4014258:	dc801117 	ldw	r18,68(sp)
 401425c:	dc401017 	ldw	r17,64(sp)
 4014260:	dc000f17 	ldw	r16,60(sp)
 4014264:	dec01404 	addi	sp,sp,80
 4014268:	f800283a 	ret
 401426c:	288010c4 	addi	r2,r5,67
 4014270:	28800015 	stw	r2,0(r5)
 4014274:	28800415 	stw	r2,16(r5)
 4014278:	00800044 	movi	r2,1
 401427c:	28800515 	stw	r2,20(r5)
 4014280:	f800283a 	ret
 4014284:	04801004 	movi	r18,64
 4014288:	003fe006 	br	401420c <__alt_mem_onchip_memory2_0+0xfc012f8c>
 401428c:	81000a17 	ldw	r4,40(r16)
 4014290:	00c10074 	movhi	r3,1025
 4014294:	18d78a04 	addi	r3,r3,24104
 4014298:	20ffc51e 	bne	r4,r3,40141b0 <__alt_mem_onchip_memory2_0+0xfc012f30>
 401429c:	8080030b 	ldhu	r2,12(r16)
 40142a0:	04810004 	movi	r18,1024
 40142a4:	84801315 	stw	r18,76(r16)
 40142a8:	1484b03a 	or	r2,r2,r18
 40142ac:	8080030d 	sth	r2,12(r16)
 40142b0:	0027883a 	mov	r19,zero
 40142b4:	003fd806 	br	4014218 <__alt_mem_onchip_memory2_0+0xfc012f98>
 40142b8:	8140038f 	ldh	r5,14(r16)
 40142bc:	8809883a 	mov	r4,r17
 40142c0:	4017bd40 	call	4017bd4 <_isatty_r>
 40142c4:	103fe226 	beq	r2,zero,4014250 <__alt_mem_onchip_memory2_0+0xfc012fd0>
 40142c8:	8080030b 	ldhu	r2,12(r16)
 40142cc:	10800054 	ori	r2,r2,1
 40142d0:	8080030d 	sth	r2,12(r16)
 40142d4:	003fde06 	br	4014250 <__alt_mem_onchip_memory2_0+0xfc012fd0>
 40142d8:	8080030b 	ldhu	r2,12(r16)
 40142dc:	10c0800c 	andi	r3,r2,512
 40142e0:	183fdb1e 	bne	r3,zero,4014250 <__alt_mem_onchip_memory2_0+0xfc012fd0>
 40142e4:	10800094 	ori	r2,r2,2
 40142e8:	80c010c4 	addi	r3,r16,67
 40142ec:	8080030d 	sth	r2,12(r16)
 40142f0:	00800044 	movi	r2,1
 40142f4:	80c00015 	stw	r3,0(r16)
 40142f8:	80c00415 	stw	r3,16(r16)
 40142fc:	80800515 	stw	r2,20(r16)
 4014300:	003fd306 	br	4014250 <__alt_mem_onchip_memory2_0+0xfc012fd0>
 4014304:	04810004 	movi	r18,1024
 4014308:	003fc306 	br	4014218 <__alt_mem_onchip_memory2_0+0xfc012f98>
 401430c:	0027883a 	mov	r19,zero
 4014310:	04810004 	movi	r18,1024
 4014314:	003fc006 	br	4014218 <__alt_mem_onchip_memory2_0+0xfc012f98>

04014318 <memchr>:
 4014318:	208000cc 	andi	r2,r4,3
 401431c:	280f883a 	mov	r7,r5
 4014320:	10003426 	beq	r2,zero,40143f4 <memchr+0xdc>
 4014324:	30bfffc4 	addi	r2,r6,-1
 4014328:	30001a26 	beq	r6,zero,4014394 <memchr+0x7c>
 401432c:	20c00003 	ldbu	r3,0(r4)
 4014330:	29803fcc 	andi	r6,r5,255
 4014334:	30c0051e 	bne	r6,r3,401434c <memchr+0x34>
 4014338:	00001806 	br	401439c <memchr+0x84>
 401433c:	10001526 	beq	r2,zero,4014394 <memchr+0x7c>
 4014340:	20c00003 	ldbu	r3,0(r4)
 4014344:	10bfffc4 	addi	r2,r2,-1
 4014348:	30c01426 	beq	r6,r3,401439c <memchr+0x84>
 401434c:	21000044 	addi	r4,r4,1
 4014350:	20c000cc 	andi	r3,r4,3
 4014354:	183ff91e 	bne	r3,zero,401433c <__alt_mem_onchip_memory2_0+0xfc0130bc>
 4014358:	020000c4 	movi	r8,3
 401435c:	40801136 	bltu	r8,r2,40143a4 <memchr+0x8c>
 4014360:	10000c26 	beq	r2,zero,4014394 <memchr+0x7c>
 4014364:	20c00003 	ldbu	r3,0(r4)
 4014368:	29403fcc 	andi	r5,r5,255
 401436c:	28c00b26 	beq	r5,r3,401439c <memchr+0x84>
 4014370:	20c00044 	addi	r3,r4,1
 4014374:	39803fcc 	andi	r6,r7,255
 4014378:	2089883a 	add	r4,r4,r2
 401437c:	00000306 	br	401438c <memchr+0x74>
 4014380:	18c00044 	addi	r3,r3,1
 4014384:	197fffc3 	ldbu	r5,-1(r3)
 4014388:	31400526 	beq	r6,r5,40143a0 <memchr+0x88>
 401438c:	1805883a 	mov	r2,r3
 4014390:	20fffb1e 	bne	r4,r3,4014380 <__alt_mem_onchip_memory2_0+0xfc013100>
 4014394:	0005883a 	mov	r2,zero
 4014398:	f800283a 	ret
 401439c:	2005883a 	mov	r2,r4
 40143a0:	f800283a 	ret
 40143a4:	28c03fcc 	andi	r3,r5,255
 40143a8:	1812923a 	slli	r9,r3,8
 40143ac:	02ffbff4 	movhi	r11,65279
 40143b0:	02a02074 	movhi	r10,32897
 40143b4:	48d2b03a 	or	r9,r9,r3
 40143b8:	4806943a 	slli	r3,r9,16
 40143bc:	5affbfc4 	addi	r11,r11,-257
 40143c0:	52a02004 	addi	r10,r10,-32640
 40143c4:	48d2b03a 	or	r9,r9,r3
 40143c8:	20c00017 	ldw	r3,0(r4)
 40143cc:	48c6f03a 	xor	r3,r9,r3
 40143d0:	1acd883a 	add	r6,r3,r11
 40143d4:	00c6303a 	nor	r3,zero,r3
 40143d8:	30c6703a 	and	r3,r6,r3
 40143dc:	1a86703a 	and	r3,r3,r10
 40143e0:	183fe01e 	bne	r3,zero,4014364 <__alt_mem_onchip_memory2_0+0xfc0130e4>
 40143e4:	10bfff04 	addi	r2,r2,-4
 40143e8:	21000104 	addi	r4,r4,4
 40143ec:	40bff636 	bltu	r8,r2,40143c8 <__alt_mem_onchip_memory2_0+0xfc013148>
 40143f0:	003fdb06 	br	4014360 <__alt_mem_onchip_memory2_0+0xfc0130e0>
 40143f4:	3005883a 	mov	r2,r6
 40143f8:	003fd706 	br	4014358 <__alt_mem_onchip_memory2_0+0xfc0130d8>

040143fc <memmove>:
 40143fc:	2005883a 	mov	r2,r4
 4014400:	29000b2e 	bgeu	r5,r4,4014430 <memmove+0x34>
 4014404:	298f883a 	add	r7,r5,r6
 4014408:	21c0092e 	bgeu	r4,r7,4014430 <memmove+0x34>
 401440c:	2187883a 	add	r3,r4,r6
 4014410:	198bc83a 	sub	r5,r3,r6
 4014414:	30004826 	beq	r6,zero,4014538 <memmove+0x13c>
 4014418:	39ffffc4 	addi	r7,r7,-1
 401441c:	39000003 	ldbu	r4,0(r7)
 4014420:	18ffffc4 	addi	r3,r3,-1
 4014424:	19000005 	stb	r4,0(r3)
 4014428:	28fffb1e 	bne	r5,r3,4014418 <__alt_mem_onchip_memory2_0+0xfc013198>
 401442c:	f800283a 	ret
 4014430:	00c003c4 	movi	r3,15
 4014434:	1980412e 	bgeu	r3,r6,401453c <memmove+0x140>
 4014438:	2886b03a 	or	r3,r5,r2
 401443c:	18c000cc 	andi	r3,r3,3
 4014440:	1800401e 	bne	r3,zero,4014544 <memmove+0x148>
 4014444:	33fffc04 	addi	r15,r6,-16
 4014448:	781ed13a 	srli	r15,r15,4
 401444c:	28c00104 	addi	r3,r5,4
 4014450:	13400104 	addi	r13,r2,4
 4014454:	781c913a 	slli	r14,r15,4
 4014458:	2b000204 	addi	r12,r5,8
 401445c:	12c00204 	addi	r11,r2,8
 4014460:	73800504 	addi	r14,r14,20
 4014464:	2a800304 	addi	r10,r5,12
 4014468:	12400304 	addi	r9,r2,12
 401446c:	2b9d883a 	add	r14,r5,r14
 4014470:	2811883a 	mov	r8,r5
 4014474:	100f883a 	mov	r7,r2
 4014478:	41000017 	ldw	r4,0(r8)
 401447c:	39c00404 	addi	r7,r7,16
 4014480:	18c00404 	addi	r3,r3,16
 4014484:	393ffc15 	stw	r4,-16(r7)
 4014488:	193ffc17 	ldw	r4,-16(r3)
 401448c:	6b400404 	addi	r13,r13,16
 4014490:	5ac00404 	addi	r11,r11,16
 4014494:	693ffc15 	stw	r4,-16(r13)
 4014498:	61000017 	ldw	r4,0(r12)
 401449c:	4a400404 	addi	r9,r9,16
 40144a0:	42000404 	addi	r8,r8,16
 40144a4:	593ffc15 	stw	r4,-16(r11)
 40144a8:	51000017 	ldw	r4,0(r10)
 40144ac:	63000404 	addi	r12,r12,16
 40144b0:	52800404 	addi	r10,r10,16
 40144b4:	493ffc15 	stw	r4,-16(r9)
 40144b8:	1bbfef1e 	bne	r3,r14,4014478 <__alt_mem_onchip_memory2_0+0xfc0131f8>
 40144bc:	79000044 	addi	r4,r15,1
 40144c0:	2008913a 	slli	r4,r4,4
 40144c4:	328003cc 	andi	r10,r6,15
 40144c8:	02c000c4 	movi	r11,3
 40144cc:	1107883a 	add	r3,r2,r4
 40144d0:	290b883a 	add	r5,r5,r4
 40144d4:	5a801e2e 	bgeu	r11,r10,4014550 <memmove+0x154>
 40144d8:	1813883a 	mov	r9,r3
 40144dc:	2811883a 	mov	r8,r5
 40144e0:	500f883a 	mov	r7,r10
 40144e4:	41000017 	ldw	r4,0(r8)
 40144e8:	4a400104 	addi	r9,r9,4
 40144ec:	39ffff04 	addi	r7,r7,-4
 40144f0:	493fff15 	stw	r4,-4(r9)
 40144f4:	42000104 	addi	r8,r8,4
 40144f8:	59fffa36 	bltu	r11,r7,40144e4 <__alt_mem_onchip_memory2_0+0xfc013264>
 40144fc:	513fff04 	addi	r4,r10,-4
 4014500:	2008d0ba 	srli	r4,r4,2
 4014504:	318000cc 	andi	r6,r6,3
 4014508:	21000044 	addi	r4,r4,1
 401450c:	2109883a 	add	r4,r4,r4
 4014510:	2109883a 	add	r4,r4,r4
 4014514:	1907883a 	add	r3,r3,r4
 4014518:	290b883a 	add	r5,r5,r4
 401451c:	30000b26 	beq	r6,zero,401454c <memmove+0x150>
 4014520:	198d883a 	add	r6,r3,r6
 4014524:	29c00003 	ldbu	r7,0(r5)
 4014528:	18c00044 	addi	r3,r3,1
 401452c:	29400044 	addi	r5,r5,1
 4014530:	19ffffc5 	stb	r7,-1(r3)
 4014534:	19bffb1e 	bne	r3,r6,4014524 <__alt_mem_onchip_memory2_0+0xfc0132a4>
 4014538:	f800283a 	ret
 401453c:	1007883a 	mov	r3,r2
 4014540:	003ff606 	br	401451c <__alt_mem_onchip_memory2_0+0xfc01329c>
 4014544:	1007883a 	mov	r3,r2
 4014548:	003ff506 	br	4014520 <__alt_mem_onchip_memory2_0+0xfc0132a0>
 401454c:	f800283a 	ret
 4014550:	500d883a 	mov	r6,r10
 4014554:	003ff106 	br	401451c <__alt_mem_onchip_memory2_0+0xfc01329c>

04014558 <_Balloc>:
 4014558:	20801317 	ldw	r2,76(r4)
 401455c:	defffc04 	addi	sp,sp,-16
 4014560:	dc400115 	stw	r17,4(sp)
 4014564:	dc000015 	stw	r16,0(sp)
 4014568:	dfc00315 	stw	ra,12(sp)
 401456c:	dc800215 	stw	r18,8(sp)
 4014570:	2023883a 	mov	r17,r4
 4014574:	2821883a 	mov	r16,r5
 4014578:	10000f26 	beq	r2,zero,40145b8 <_Balloc+0x60>
 401457c:	8407883a 	add	r3,r16,r16
 4014580:	18c7883a 	add	r3,r3,r3
 4014584:	10c7883a 	add	r3,r2,r3
 4014588:	18800017 	ldw	r2,0(r3)
 401458c:	10001126 	beq	r2,zero,40145d4 <_Balloc+0x7c>
 4014590:	11000017 	ldw	r4,0(r2)
 4014594:	19000015 	stw	r4,0(r3)
 4014598:	10000415 	stw	zero,16(r2)
 401459c:	10000315 	stw	zero,12(r2)
 40145a0:	dfc00317 	ldw	ra,12(sp)
 40145a4:	dc800217 	ldw	r18,8(sp)
 40145a8:	dc400117 	ldw	r17,4(sp)
 40145ac:	dc000017 	ldw	r16,0(sp)
 40145b0:	dec00404 	addi	sp,sp,16
 40145b4:	f800283a 	ret
 40145b8:	01800844 	movi	r6,33
 40145bc:	01400104 	movi	r5,4
 40145c0:	40177900 	call	4017790 <_calloc_r>
 40145c4:	88801315 	stw	r2,76(r17)
 40145c8:	103fec1e 	bne	r2,zero,401457c <__alt_mem_onchip_memory2_0+0xfc0132fc>
 40145cc:	0005883a 	mov	r2,zero
 40145d0:	003ff306 	br	40145a0 <__alt_mem_onchip_memory2_0+0xfc013320>
 40145d4:	01400044 	movi	r5,1
 40145d8:	2c24983a 	sll	r18,r5,r16
 40145dc:	8809883a 	mov	r4,r17
 40145e0:	91800144 	addi	r6,r18,5
 40145e4:	318d883a 	add	r6,r6,r6
 40145e8:	318d883a 	add	r6,r6,r6
 40145ec:	40177900 	call	4017790 <_calloc_r>
 40145f0:	103ff626 	beq	r2,zero,40145cc <__alt_mem_onchip_memory2_0+0xfc01334c>
 40145f4:	14000115 	stw	r16,4(r2)
 40145f8:	14800215 	stw	r18,8(r2)
 40145fc:	003fe606 	br	4014598 <__alt_mem_onchip_memory2_0+0xfc013318>

04014600 <_Bfree>:
 4014600:	28000826 	beq	r5,zero,4014624 <_Bfree+0x24>
 4014604:	28c00117 	ldw	r3,4(r5)
 4014608:	20801317 	ldw	r2,76(r4)
 401460c:	18c7883a 	add	r3,r3,r3
 4014610:	18c7883a 	add	r3,r3,r3
 4014614:	10c5883a 	add	r2,r2,r3
 4014618:	10c00017 	ldw	r3,0(r2)
 401461c:	28c00015 	stw	r3,0(r5)
 4014620:	11400015 	stw	r5,0(r2)
 4014624:	f800283a 	ret

04014628 <__multadd>:
 4014628:	defff704 	addi	sp,sp,-36
 401462c:	dc800215 	stw	r18,8(sp)
 4014630:	2c800417 	ldw	r18,16(r5)
 4014634:	dd800615 	stw	r22,24(sp)
 4014638:	dd400515 	stw	r21,20(sp)
 401463c:	dd000415 	stw	r20,16(sp)
 4014640:	dcc00315 	stw	r19,12(sp)
 4014644:	dc400115 	stw	r17,4(sp)
 4014648:	dc000015 	stw	r16,0(sp)
 401464c:	dfc00815 	stw	ra,32(sp)
 4014650:	ddc00715 	stw	r23,28(sp)
 4014654:	2827883a 	mov	r19,r5
 4014658:	2029883a 	mov	r20,r4
 401465c:	3023883a 	mov	r17,r6
 4014660:	3821883a 	mov	r16,r7
 4014664:	2d400504 	addi	r21,r5,20
 4014668:	002d883a 	mov	r22,zero
 401466c:	adc00017 	ldw	r23,0(r21)
 4014670:	880b883a 	mov	r5,r17
 4014674:	ad400104 	addi	r21,r21,4
 4014678:	b93fffcc 	andi	r4,r23,65535
 401467c:	400cfd40 	call	400cfd4 <__mulsi3>
 4014680:	b808d43a 	srli	r4,r23,16
 4014684:	880b883a 	mov	r5,r17
 4014688:	1421883a 	add	r16,r2,r16
 401468c:	400cfd40 	call	400cfd4 <__mulsi3>
 4014690:	800ed43a 	srli	r7,r16,16
 4014694:	80ffffcc 	andi	r3,r16,65535
 4014698:	b5800044 	addi	r22,r22,1
 401469c:	11c5883a 	add	r2,r2,r7
 40146a0:	100e943a 	slli	r7,r2,16
 40146a4:	1020d43a 	srli	r16,r2,16
 40146a8:	38c7883a 	add	r3,r7,r3
 40146ac:	a8ffff15 	stw	r3,-4(r21)
 40146b0:	b4bfee16 	blt	r22,r18,401466c <__alt_mem_onchip_memory2_0+0xfc0133ec>
 40146b4:	80000926 	beq	r16,zero,40146dc <__multadd+0xb4>
 40146b8:	98800217 	ldw	r2,8(r19)
 40146bc:	9080130e 	bge	r18,r2,401470c <__multadd+0xe4>
 40146c0:	90800144 	addi	r2,r18,5
 40146c4:	1085883a 	add	r2,r2,r2
 40146c8:	1085883a 	add	r2,r2,r2
 40146cc:	9885883a 	add	r2,r19,r2
 40146d0:	14000015 	stw	r16,0(r2)
 40146d4:	94800044 	addi	r18,r18,1
 40146d8:	9c800415 	stw	r18,16(r19)
 40146dc:	9805883a 	mov	r2,r19
 40146e0:	dfc00817 	ldw	ra,32(sp)
 40146e4:	ddc00717 	ldw	r23,28(sp)
 40146e8:	dd800617 	ldw	r22,24(sp)
 40146ec:	dd400517 	ldw	r21,20(sp)
 40146f0:	dd000417 	ldw	r20,16(sp)
 40146f4:	dcc00317 	ldw	r19,12(sp)
 40146f8:	dc800217 	ldw	r18,8(sp)
 40146fc:	dc400117 	ldw	r17,4(sp)
 4014700:	dc000017 	ldw	r16,0(sp)
 4014704:	dec00904 	addi	sp,sp,36
 4014708:	f800283a 	ret
 401470c:	99400117 	ldw	r5,4(r19)
 4014710:	a009883a 	mov	r4,r20
 4014714:	29400044 	addi	r5,r5,1
 4014718:	40145580 	call	4014558 <_Balloc>
 401471c:	99800417 	ldw	r6,16(r19)
 4014720:	99400304 	addi	r5,r19,12
 4014724:	11000304 	addi	r4,r2,12
 4014728:	31800084 	addi	r6,r6,2
 401472c:	318d883a 	add	r6,r6,r6
 4014730:	318d883a 	add	r6,r6,r6
 4014734:	1023883a 	mov	r17,r2
 4014738:	400e9480 	call	400e948 <memcpy>
 401473c:	98000a26 	beq	r19,zero,4014768 <__multadd+0x140>
 4014740:	98c00117 	ldw	r3,4(r19)
 4014744:	a0801317 	ldw	r2,76(r20)
 4014748:	18c7883a 	add	r3,r3,r3
 401474c:	18c7883a 	add	r3,r3,r3
 4014750:	10c5883a 	add	r2,r2,r3
 4014754:	10c00017 	ldw	r3,0(r2)
 4014758:	98c00015 	stw	r3,0(r19)
 401475c:	14c00015 	stw	r19,0(r2)
 4014760:	8827883a 	mov	r19,r17
 4014764:	003fd606 	br	40146c0 <__alt_mem_onchip_memory2_0+0xfc013440>
 4014768:	8827883a 	mov	r19,r17
 401476c:	003fd406 	br	40146c0 <__alt_mem_onchip_memory2_0+0xfc013440>

04014770 <__s2b>:
 4014770:	defff904 	addi	sp,sp,-28
 4014774:	dc400115 	stw	r17,4(sp)
 4014778:	dc000015 	stw	r16,0(sp)
 401477c:	2023883a 	mov	r17,r4
 4014780:	2821883a 	mov	r16,r5
 4014784:	39000204 	addi	r4,r7,8
 4014788:	01400244 	movi	r5,9
 401478c:	dcc00315 	stw	r19,12(sp)
 4014790:	dc800215 	stw	r18,8(sp)
 4014794:	dfc00615 	stw	ra,24(sp)
 4014798:	dd400515 	stw	r21,20(sp)
 401479c:	dd000415 	stw	r20,16(sp)
 40147a0:	3825883a 	mov	r18,r7
 40147a4:	3027883a 	mov	r19,r6
 40147a8:	400ce200 	call	400ce20 <__divsi3>
 40147ac:	00c00044 	movi	r3,1
 40147b0:	000b883a 	mov	r5,zero
 40147b4:	1880030e 	bge	r3,r2,40147c4 <__s2b+0x54>
 40147b8:	18c7883a 	add	r3,r3,r3
 40147bc:	29400044 	addi	r5,r5,1
 40147c0:	18bffd16 	blt	r3,r2,40147b8 <__alt_mem_onchip_memory2_0+0xfc013538>
 40147c4:	8809883a 	mov	r4,r17
 40147c8:	40145580 	call	4014558 <_Balloc>
 40147cc:	d8c00717 	ldw	r3,28(sp)
 40147d0:	10c00515 	stw	r3,20(r2)
 40147d4:	00c00044 	movi	r3,1
 40147d8:	10c00415 	stw	r3,16(r2)
 40147dc:	00c00244 	movi	r3,9
 40147e0:	1cc0210e 	bge	r3,r19,4014868 <__s2b+0xf8>
 40147e4:	80eb883a 	add	r21,r16,r3
 40147e8:	a829883a 	mov	r20,r21
 40147ec:	84e1883a 	add	r16,r16,r19
 40147f0:	a1c00007 	ldb	r7,0(r20)
 40147f4:	01800284 	movi	r6,10
 40147f8:	a5000044 	addi	r20,r20,1
 40147fc:	100b883a 	mov	r5,r2
 4014800:	39fff404 	addi	r7,r7,-48
 4014804:	8809883a 	mov	r4,r17
 4014808:	40146280 	call	4014628 <__multadd>
 401480c:	a43ff81e 	bne	r20,r16,40147f0 <__alt_mem_onchip_memory2_0+0xfc013570>
 4014810:	ace1883a 	add	r16,r21,r19
 4014814:	843ffe04 	addi	r16,r16,-8
 4014818:	9c800a0e 	bge	r19,r18,4014844 <__s2b+0xd4>
 401481c:	94e5c83a 	sub	r18,r18,r19
 4014820:	84a5883a 	add	r18,r16,r18
 4014824:	81c00007 	ldb	r7,0(r16)
 4014828:	01800284 	movi	r6,10
 401482c:	84000044 	addi	r16,r16,1
 4014830:	100b883a 	mov	r5,r2
 4014834:	39fff404 	addi	r7,r7,-48
 4014838:	8809883a 	mov	r4,r17
 401483c:	40146280 	call	4014628 <__multadd>
 4014840:	84bff81e 	bne	r16,r18,4014824 <__alt_mem_onchip_memory2_0+0xfc0135a4>
 4014844:	dfc00617 	ldw	ra,24(sp)
 4014848:	dd400517 	ldw	r21,20(sp)
 401484c:	dd000417 	ldw	r20,16(sp)
 4014850:	dcc00317 	ldw	r19,12(sp)
 4014854:	dc800217 	ldw	r18,8(sp)
 4014858:	dc400117 	ldw	r17,4(sp)
 401485c:	dc000017 	ldw	r16,0(sp)
 4014860:	dec00704 	addi	sp,sp,28
 4014864:	f800283a 	ret
 4014868:	84000284 	addi	r16,r16,10
 401486c:	1827883a 	mov	r19,r3
 4014870:	003fe906 	br	4014818 <__alt_mem_onchip_memory2_0+0xfc013598>

04014874 <__hi0bits>:
 4014874:	20bfffec 	andhi	r2,r4,65535
 4014878:	1000141e 	bne	r2,zero,40148cc <__hi0bits+0x58>
 401487c:	2008943a 	slli	r4,r4,16
 4014880:	00800404 	movi	r2,16
 4014884:	20ffc02c 	andhi	r3,r4,65280
 4014888:	1800021e 	bne	r3,zero,4014894 <__hi0bits+0x20>
 401488c:	2008923a 	slli	r4,r4,8
 4014890:	10800204 	addi	r2,r2,8
 4014894:	20fc002c 	andhi	r3,r4,61440
 4014898:	1800021e 	bne	r3,zero,40148a4 <__hi0bits+0x30>
 401489c:	2008913a 	slli	r4,r4,4
 40148a0:	10800104 	addi	r2,r2,4
 40148a4:	20f0002c 	andhi	r3,r4,49152
 40148a8:	1800031e 	bne	r3,zero,40148b8 <__hi0bits+0x44>
 40148ac:	2109883a 	add	r4,r4,r4
 40148b0:	10800084 	addi	r2,r2,2
 40148b4:	2109883a 	add	r4,r4,r4
 40148b8:	20000316 	blt	r4,zero,40148c8 <__hi0bits+0x54>
 40148bc:	2110002c 	andhi	r4,r4,16384
 40148c0:	2000041e 	bne	r4,zero,40148d4 <__hi0bits+0x60>
 40148c4:	00800804 	movi	r2,32
 40148c8:	f800283a 	ret
 40148cc:	0005883a 	mov	r2,zero
 40148d0:	003fec06 	br	4014884 <__alt_mem_onchip_memory2_0+0xfc013604>
 40148d4:	10800044 	addi	r2,r2,1
 40148d8:	f800283a 	ret

040148dc <__lo0bits>:
 40148dc:	20c00017 	ldw	r3,0(r4)
 40148e0:	188001cc 	andi	r2,r3,7
 40148e4:	10000826 	beq	r2,zero,4014908 <__lo0bits+0x2c>
 40148e8:	1880004c 	andi	r2,r3,1
 40148ec:	1000211e 	bne	r2,zero,4014974 <__lo0bits+0x98>
 40148f0:	1880008c 	andi	r2,r3,2
 40148f4:	1000211e 	bne	r2,zero,401497c <__lo0bits+0xa0>
 40148f8:	1806d0ba 	srli	r3,r3,2
 40148fc:	00800084 	movi	r2,2
 4014900:	20c00015 	stw	r3,0(r4)
 4014904:	f800283a 	ret
 4014908:	18bfffcc 	andi	r2,r3,65535
 401490c:	10001326 	beq	r2,zero,401495c <__lo0bits+0x80>
 4014910:	0005883a 	mov	r2,zero
 4014914:	19403fcc 	andi	r5,r3,255
 4014918:	2800021e 	bne	r5,zero,4014924 <__lo0bits+0x48>
 401491c:	1806d23a 	srli	r3,r3,8
 4014920:	10800204 	addi	r2,r2,8
 4014924:	194003cc 	andi	r5,r3,15
 4014928:	2800021e 	bne	r5,zero,4014934 <__lo0bits+0x58>
 401492c:	1806d13a 	srli	r3,r3,4
 4014930:	10800104 	addi	r2,r2,4
 4014934:	194000cc 	andi	r5,r3,3
 4014938:	2800021e 	bne	r5,zero,4014944 <__lo0bits+0x68>
 401493c:	1806d0ba 	srli	r3,r3,2
 4014940:	10800084 	addi	r2,r2,2
 4014944:	1940004c 	andi	r5,r3,1
 4014948:	2800081e 	bne	r5,zero,401496c <__lo0bits+0x90>
 401494c:	1806d07a 	srli	r3,r3,1
 4014950:	1800051e 	bne	r3,zero,4014968 <__lo0bits+0x8c>
 4014954:	00800804 	movi	r2,32
 4014958:	f800283a 	ret
 401495c:	1806d43a 	srli	r3,r3,16
 4014960:	00800404 	movi	r2,16
 4014964:	003feb06 	br	4014914 <__alt_mem_onchip_memory2_0+0xfc013694>
 4014968:	10800044 	addi	r2,r2,1
 401496c:	20c00015 	stw	r3,0(r4)
 4014970:	f800283a 	ret
 4014974:	0005883a 	mov	r2,zero
 4014978:	f800283a 	ret
 401497c:	1806d07a 	srli	r3,r3,1
 4014980:	00800044 	movi	r2,1
 4014984:	20c00015 	stw	r3,0(r4)
 4014988:	f800283a 	ret

0401498c <__i2b>:
 401498c:	defffd04 	addi	sp,sp,-12
 4014990:	dc000015 	stw	r16,0(sp)
 4014994:	04000044 	movi	r16,1
 4014998:	dc400115 	stw	r17,4(sp)
 401499c:	2823883a 	mov	r17,r5
 40149a0:	800b883a 	mov	r5,r16
 40149a4:	dfc00215 	stw	ra,8(sp)
 40149a8:	40145580 	call	4014558 <_Balloc>
 40149ac:	14400515 	stw	r17,20(r2)
 40149b0:	14000415 	stw	r16,16(r2)
 40149b4:	dfc00217 	ldw	ra,8(sp)
 40149b8:	dc400117 	ldw	r17,4(sp)
 40149bc:	dc000017 	ldw	r16,0(sp)
 40149c0:	dec00304 	addi	sp,sp,12
 40149c4:	f800283a 	ret

040149c8 <__multiply>:
 40149c8:	deffef04 	addi	sp,sp,-68
 40149cc:	dc400815 	stw	r17,32(sp)
 40149d0:	dc000715 	stw	r16,28(sp)
 40149d4:	34400417 	ldw	r17,16(r6)
 40149d8:	2c000417 	ldw	r16,16(r5)
 40149dc:	dd800d15 	stw	r22,52(sp)
 40149e0:	dc800915 	stw	r18,36(sp)
 40149e4:	dfc01015 	stw	ra,64(sp)
 40149e8:	df000f15 	stw	fp,60(sp)
 40149ec:	ddc00e15 	stw	r23,56(sp)
 40149f0:	dd400c15 	stw	r21,48(sp)
 40149f4:	dd000b15 	stw	r20,44(sp)
 40149f8:	dcc00a15 	stw	r19,40(sp)
 40149fc:	2825883a 	mov	r18,r5
 4014a00:	302d883a 	mov	r22,r6
 4014a04:	8440050e 	bge	r16,r17,4014a1c <__multiply+0x54>
 4014a08:	8007883a 	mov	r3,r16
 4014a0c:	3025883a 	mov	r18,r6
 4014a10:	8821883a 	mov	r16,r17
 4014a14:	282d883a 	mov	r22,r5
 4014a18:	1823883a 	mov	r17,r3
 4014a1c:	90800217 	ldw	r2,8(r18)
 4014a20:	8447883a 	add	r3,r16,r17
 4014a24:	d8c00215 	stw	r3,8(sp)
 4014a28:	91400117 	ldw	r5,4(r18)
 4014a2c:	10c0010e 	bge	r2,r3,4014a34 <__multiply+0x6c>
 4014a30:	29400044 	addi	r5,r5,1
 4014a34:	40145580 	call	4014558 <_Balloc>
 4014a38:	d8c00217 	ldw	r3,8(sp)
 4014a3c:	d8800615 	stw	r2,24(sp)
 4014a40:	18eb883a 	add	r21,r3,r3
 4014a44:	ad6b883a 	add	r21,r21,r21
 4014a48:	10c00504 	addi	r3,r2,20
 4014a4c:	1d6b883a 	add	r21,r3,r21
 4014a50:	d8c00115 	stw	r3,4(sp)
 4014a54:	dd400315 	stw	r21,12(sp)
 4014a58:	1805883a 	mov	r2,r3
 4014a5c:	1d40042e 	bgeu	r3,r21,4014a70 <__multiply+0xa8>
 4014a60:	d8c00317 	ldw	r3,12(sp)
 4014a64:	10000015 	stw	zero,0(r2)
 4014a68:	10800104 	addi	r2,r2,4
 4014a6c:	10fffc36 	bltu	r2,r3,4014a60 <__alt_mem_onchip_memory2_0+0xfc0137e0>
 4014a70:	8c63883a 	add	r17,r17,r17
 4014a74:	b5800504 	addi	r22,r22,20
 4014a78:	8c63883a 	add	r17,r17,r17
 4014a7c:	94800504 	addi	r18,r18,20
 4014a80:	8421883a 	add	r16,r16,r16
 4014a84:	b463883a 	add	r17,r22,r17
 4014a88:	8421883a 	add	r16,r16,r16
 4014a8c:	dd800015 	stw	r22,0(sp)
 4014a90:	dc800415 	stw	r18,16(sp)
 4014a94:	dc400515 	stw	r17,20(sp)
 4014a98:	9429883a 	add	r20,r18,r16
 4014a9c:	b4404f2e 	bgeu	r22,r17,4014bdc <__multiply+0x214>
 4014aa0:	d8c00017 	ldw	r3,0(sp)
 4014aa4:	1c800017 	ldw	r18,0(r3)
 4014aa8:	947fffcc 	andi	r17,r18,65535
 4014aac:	88001e26 	beq	r17,zero,4014b28 <__multiply+0x160>
 4014ab0:	dd800117 	ldw	r22,4(sp)
 4014ab4:	dd400417 	ldw	r21,16(sp)
 4014ab8:	0027883a 	mov	r19,zero
 4014abc:	ac800017 	ldw	r18,0(r21)
 4014ac0:	b4000017 	ldw	r16,0(r22)
 4014ac4:	880b883a 	mov	r5,r17
 4014ac8:	913fffcc 	andi	r4,r18,65535
 4014acc:	400cfd40 	call	400cfd4 <__mulsi3>
 4014ad0:	9008d43a 	srli	r4,r18,16
 4014ad4:	84bfffcc 	andi	r18,r16,65535
 4014ad8:	1485883a 	add	r2,r2,r18
 4014adc:	14e5883a 	add	r18,r2,r19
 4014ae0:	8020d43a 	srli	r16,r16,16
 4014ae4:	9026d43a 	srli	r19,r18,16
 4014ae8:	880b883a 	mov	r5,r17
 4014aec:	400cfd40 	call	400cfd4 <__mulsi3>
 4014af0:	1405883a 	add	r2,r2,r16
 4014af4:	14e1883a 	add	r16,r2,r19
 4014af8:	90ffffcc 	andi	r3,r18,65535
 4014afc:	8024943a 	slli	r18,r16,16
 4014b00:	ad400104 	addi	r21,r21,4
 4014b04:	b005883a 	mov	r2,r22
 4014b08:	90c6b03a 	or	r3,r18,r3
 4014b0c:	b0c00015 	stw	r3,0(r22)
 4014b10:	8026d43a 	srli	r19,r16,16
 4014b14:	b5800104 	addi	r22,r22,4
 4014b18:	ad3fe836 	bltu	r21,r20,4014abc <__alt_mem_onchip_memory2_0+0xfc01383c>
 4014b1c:	d8c00017 	ldw	r3,0(sp)
 4014b20:	14c00115 	stw	r19,4(r2)
 4014b24:	1c800017 	ldw	r18,0(r3)
 4014b28:	9024d43a 	srli	r18,r18,16
 4014b2c:	90002226 	beq	r18,zero,4014bb8 <__multiply+0x1f0>
 4014b30:	d8c00117 	ldw	r3,4(sp)
 4014b34:	dd800417 	ldw	r22,16(sp)
 4014b38:	002f883a 	mov	r23,zero
 4014b3c:	1f000017 	ldw	fp,0(r3)
 4014b40:	1823883a 	mov	r17,r3
 4014b44:	182b883a 	mov	r21,r3
 4014b48:	e021883a 	mov	r16,fp
 4014b4c:	00000106 	br	4014b54 <__multiply+0x18c>
 4014b50:	982b883a 	mov	r21,r19
 4014b54:	b100000b 	ldhu	r4,0(r22)
 4014b58:	8020d43a 	srli	r16,r16,16
 4014b5c:	900b883a 	mov	r5,r18
 4014b60:	400cfd40 	call	400cfd4 <__mulsi3>
 4014b64:	1405883a 	add	r2,r2,r16
 4014b68:	15ef883a 	add	r23,r2,r23
 4014b6c:	b804943a 	slli	r2,r23,16
 4014b70:	e0ffffcc 	andi	r3,fp,65535
 4014b74:	8c400104 	addi	r17,r17,4
 4014b78:	10c6b03a 	or	r3,r2,r3
 4014b7c:	88ffff15 	stw	r3,-4(r17)
 4014b80:	b5800104 	addi	r22,r22,4
 4014b84:	b13fff17 	ldw	r4,-4(r22)
 4014b88:	acc00104 	addi	r19,r21,4
 4014b8c:	900b883a 	mov	r5,r18
 4014b90:	2008d43a 	srli	r4,r4,16
 4014b94:	9c000017 	ldw	r16,0(r19)
 4014b98:	400cfd40 	call	400cfd4 <__mulsi3>
 4014b9c:	b806d43a 	srli	r3,r23,16
 4014ba0:	813fffcc 	andi	r4,r16,65535
 4014ba4:	1105883a 	add	r2,r2,r4
 4014ba8:	10f9883a 	add	fp,r2,r3
 4014bac:	e02ed43a 	srli	r23,fp,16
 4014bb0:	b53fe736 	bltu	r22,r20,4014b50 <__alt_mem_onchip_memory2_0+0xfc0138d0>
 4014bb4:	af000115 	stw	fp,4(r21)
 4014bb8:	d8c00017 	ldw	r3,0(sp)
 4014bbc:	d9000517 	ldw	r4,20(sp)
 4014bc0:	18c00104 	addi	r3,r3,4
 4014bc4:	d8c00015 	stw	r3,0(sp)
 4014bc8:	d8c00117 	ldw	r3,4(sp)
 4014bcc:	18c00104 	addi	r3,r3,4
 4014bd0:	d8c00115 	stw	r3,4(sp)
 4014bd4:	d8c00017 	ldw	r3,0(sp)
 4014bd8:	193fb136 	bltu	r3,r4,4014aa0 <__alt_mem_onchip_memory2_0+0xfc013820>
 4014bdc:	d8c00217 	ldw	r3,8(sp)
 4014be0:	00c00c0e 	bge	zero,r3,4014c14 <__multiply+0x24c>
 4014be4:	d8c00317 	ldw	r3,12(sp)
 4014be8:	18bfff17 	ldw	r2,-4(r3)
 4014bec:	1d7fff04 	addi	r21,r3,-4
 4014bf0:	10000326 	beq	r2,zero,4014c00 <__multiply+0x238>
 4014bf4:	00000706 	br	4014c14 <__multiply+0x24c>
 4014bf8:	a8800017 	ldw	r2,0(r21)
 4014bfc:	1000051e 	bne	r2,zero,4014c14 <__multiply+0x24c>
 4014c00:	d8c00217 	ldw	r3,8(sp)
 4014c04:	ad7fff04 	addi	r21,r21,-4
 4014c08:	18ffffc4 	addi	r3,r3,-1
 4014c0c:	d8c00215 	stw	r3,8(sp)
 4014c10:	183ff91e 	bne	r3,zero,4014bf8 <__alt_mem_onchip_memory2_0+0xfc013978>
 4014c14:	d8c00617 	ldw	r3,24(sp)
 4014c18:	d9000217 	ldw	r4,8(sp)
 4014c1c:	1805883a 	mov	r2,r3
 4014c20:	19000415 	stw	r4,16(r3)
 4014c24:	dfc01017 	ldw	ra,64(sp)
 4014c28:	df000f17 	ldw	fp,60(sp)
 4014c2c:	ddc00e17 	ldw	r23,56(sp)
 4014c30:	dd800d17 	ldw	r22,52(sp)
 4014c34:	dd400c17 	ldw	r21,48(sp)
 4014c38:	dd000b17 	ldw	r20,44(sp)
 4014c3c:	dcc00a17 	ldw	r19,40(sp)
 4014c40:	dc800917 	ldw	r18,36(sp)
 4014c44:	dc400817 	ldw	r17,32(sp)
 4014c48:	dc000717 	ldw	r16,28(sp)
 4014c4c:	dec01104 	addi	sp,sp,68
 4014c50:	f800283a 	ret

04014c54 <__pow5mult>:
 4014c54:	defffa04 	addi	sp,sp,-24
 4014c58:	dcc00315 	stw	r19,12(sp)
 4014c5c:	dc000015 	stw	r16,0(sp)
 4014c60:	dfc00515 	stw	ra,20(sp)
 4014c64:	dd000415 	stw	r20,16(sp)
 4014c68:	dc800215 	stw	r18,8(sp)
 4014c6c:	dc400115 	stw	r17,4(sp)
 4014c70:	308000cc 	andi	r2,r6,3
 4014c74:	3021883a 	mov	r16,r6
 4014c78:	2027883a 	mov	r19,r4
 4014c7c:	10002f1e 	bne	r2,zero,4014d3c <__pow5mult+0xe8>
 4014c80:	2825883a 	mov	r18,r5
 4014c84:	8021d0ba 	srai	r16,r16,2
 4014c88:	80001a26 	beq	r16,zero,4014cf4 <__pow5mult+0xa0>
 4014c8c:	9c401217 	ldw	r17,72(r19)
 4014c90:	8800061e 	bne	r17,zero,4014cac <__pow5mult+0x58>
 4014c94:	00003406 	br	4014d68 <__pow5mult+0x114>
 4014c98:	8021d07a 	srai	r16,r16,1
 4014c9c:	80001526 	beq	r16,zero,4014cf4 <__pow5mult+0xa0>
 4014ca0:	88800017 	ldw	r2,0(r17)
 4014ca4:	10001c26 	beq	r2,zero,4014d18 <__pow5mult+0xc4>
 4014ca8:	1023883a 	mov	r17,r2
 4014cac:	8080004c 	andi	r2,r16,1
 4014cb0:	103ff926 	beq	r2,zero,4014c98 <__alt_mem_onchip_memory2_0+0xfc013a18>
 4014cb4:	880d883a 	mov	r6,r17
 4014cb8:	900b883a 	mov	r5,r18
 4014cbc:	9809883a 	mov	r4,r19
 4014cc0:	40149c80 	call	40149c8 <__multiply>
 4014cc4:	90001b26 	beq	r18,zero,4014d34 <__pow5mult+0xe0>
 4014cc8:	91000117 	ldw	r4,4(r18)
 4014ccc:	98c01317 	ldw	r3,76(r19)
 4014cd0:	8021d07a 	srai	r16,r16,1
 4014cd4:	2109883a 	add	r4,r4,r4
 4014cd8:	2109883a 	add	r4,r4,r4
 4014cdc:	1907883a 	add	r3,r3,r4
 4014ce0:	19000017 	ldw	r4,0(r3)
 4014ce4:	91000015 	stw	r4,0(r18)
 4014ce8:	1c800015 	stw	r18,0(r3)
 4014cec:	1025883a 	mov	r18,r2
 4014cf0:	803feb1e 	bne	r16,zero,4014ca0 <__alt_mem_onchip_memory2_0+0xfc013a20>
 4014cf4:	9005883a 	mov	r2,r18
 4014cf8:	dfc00517 	ldw	ra,20(sp)
 4014cfc:	dd000417 	ldw	r20,16(sp)
 4014d00:	dcc00317 	ldw	r19,12(sp)
 4014d04:	dc800217 	ldw	r18,8(sp)
 4014d08:	dc400117 	ldw	r17,4(sp)
 4014d0c:	dc000017 	ldw	r16,0(sp)
 4014d10:	dec00604 	addi	sp,sp,24
 4014d14:	f800283a 	ret
 4014d18:	880d883a 	mov	r6,r17
 4014d1c:	880b883a 	mov	r5,r17
 4014d20:	9809883a 	mov	r4,r19
 4014d24:	40149c80 	call	40149c8 <__multiply>
 4014d28:	88800015 	stw	r2,0(r17)
 4014d2c:	10000015 	stw	zero,0(r2)
 4014d30:	003fdd06 	br	4014ca8 <__alt_mem_onchip_memory2_0+0xfc013a28>
 4014d34:	1025883a 	mov	r18,r2
 4014d38:	003fd706 	br	4014c98 <__alt_mem_onchip_memory2_0+0xfc013a18>
 4014d3c:	10bfffc4 	addi	r2,r2,-1
 4014d40:	1085883a 	add	r2,r2,r2
 4014d44:	00c100b4 	movhi	r3,1026
 4014d48:	18dbd804 	addi	r3,r3,28512
 4014d4c:	1085883a 	add	r2,r2,r2
 4014d50:	1885883a 	add	r2,r3,r2
 4014d54:	11800017 	ldw	r6,0(r2)
 4014d58:	000f883a 	mov	r7,zero
 4014d5c:	40146280 	call	4014628 <__multadd>
 4014d60:	1025883a 	mov	r18,r2
 4014d64:	003fc706 	br	4014c84 <__alt_mem_onchip_memory2_0+0xfc013a04>
 4014d68:	05000044 	movi	r20,1
 4014d6c:	a00b883a 	mov	r5,r20
 4014d70:	9809883a 	mov	r4,r19
 4014d74:	40145580 	call	4014558 <_Balloc>
 4014d78:	1023883a 	mov	r17,r2
 4014d7c:	00809c44 	movi	r2,625
 4014d80:	88800515 	stw	r2,20(r17)
 4014d84:	8d000415 	stw	r20,16(r17)
 4014d88:	9c401215 	stw	r17,72(r19)
 4014d8c:	88000015 	stw	zero,0(r17)
 4014d90:	003fc606 	br	4014cac <__alt_mem_onchip_memory2_0+0xfc013a2c>

04014d94 <__lshift>:
 4014d94:	defff904 	addi	sp,sp,-28
 4014d98:	dd400515 	stw	r21,20(sp)
 4014d9c:	dcc00315 	stw	r19,12(sp)
 4014da0:	302bd17a 	srai	r21,r6,5
 4014da4:	2cc00417 	ldw	r19,16(r5)
 4014da8:	28800217 	ldw	r2,8(r5)
 4014dac:	dd000415 	stw	r20,16(sp)
 4014db0:	ace7883a 	add	r19,r21,r19
 4014db4:	dc800215 	stw	r18,8(sp)
 4014db8:	dc400115 	stw	r17,4(sp)
 4014dbc:	dc000015 	stw	r16,0(sp)
 4014dc0:	dfc00615 	stw	ra,24(sp)
 4014dc4:	9c000044 	addi	r16,r19,1
 4014dc8:	2823883a 	mov	r17,r5
 4014dcc:	3029883a 	mov	r20,r6
 4014dd0:	2025883a 	mov	r18,r4
 4014dd4:	29400117 	ldw	r5,4(r5)
 4014dd8:	1400030e 	bge	r2,r16,4014de8 <__lshift+0x54>
 4014ddc:	1085883a 	add	r2,r2,r2
 4014de0:	29400044 	addi	r5,r5,1
 4014de4:	143ffd16 	blt	r2,r16,4014ddc <__alt_mem_onchip_memory2_0+0xfc013b5c>
 4014de8:	9009883a 	mov	r4,r18
 4014dec:	40145580 	call	4014558 <_Balloc>
 4014df0:	10c00504 	addi	r3,r2,20
 4014df4:	0540070e 	bge	zero,r21,4014e14 <__lshift+0x80>
 4014df8:	ad6b883a 	add	r21,r21,r21
 4014dfc:	ad6b883a 	add	r21,r21,r21
 4014e00:	1809883a 	mov	r4,r3
 4014e04:	1d47883a 	add	r3,r3,r21
 4014e08:	20000015 	stw	zero,0(r4)
 4014e0c:	21000104 	addi	r4,r4,4
 4014e10:	193ffd1e 	bne	r3,r4,4014e08 <__alt_mem_onchip_memory2_0+0xfc013b88>
 4014e14:	8a000417 	ldw	r8,16(r17)
 4014e18:	89000504 	addi	r4,r17,20
 4014e1c:	a18007cc 	andi	r6,r20,31
 4014e20:	4211883a 	add	r8,r8,r8
 4014e24:	4211883a 	add	r8,r8,r8
 4014e28:	2211883a 	add	r8,r4,r8
 4014e2c:	30002326 	beq	r6,zero,4014ebc <__lshift+0x128>
 4014e30:	02400804 	movi	r9,32
 4014e34:	4993c83a 	sub	r9,r9,r6
 4014e38:	000b883a 	mov	r5,zero
 4014e3c:	21c00017 	ldw	r7,0(r4)
 4014e40:	1815883a 	mov	r10,r3
 4014e44:	18c00104 	addi	r3,r3,4
 4014e48:	398e983a 	sll	r7,r7,r6
 4014e4c:	21000104 	addi	r4,r4,4
 4014e50:	394ab03a 	or	r5,r7,r5
 4014e54:	197fff15 	stw	r5,-4(r3)
 4014e58:	217fff17 	ldw	r5,-4(r4)
 4014e5c:	2a4ad83a 	srl	r5,r5,r9
 4014e60:	223ff636 	bltu	r4,r8,4014e3c <__alt_mem_onchip_memory2_0+0xfc013bbc>
 4014e64:	51400115 	stw	r5,4(r10)
 4014e68:	28001a1e 	bne	r5,zero,4014ed4 <__lshift+0x140>
 4014e6c:	843fffc4 	addi	r16,r16,-1
 4014e70:	14000415 	stw	r16,16(r2)
 4014e74:	88000826 	beq	r17,zero,4014e98 <__lshift+0x104>
 4014e78:	89000117 	ldw	r4,4(r17)
 4014e7c:	90c01317 	ldw	r3,76(r18)
 4014e80:	2109883a 	add	r4,r4,r4
 4014e84:	2109883a 	add	r4,r4,r4
 4014e88:	1907883a 	add	r3,r3,r4
 4014e8c:	19000017 	ldw	r4,0(r3)
 4014e90:	89000015 	stw	r4,0(r17)
 4014e94:	1c400015 	stw	r17,0(r3)
 4014e98:	dfc00617 	ldw	ra,24(sp)
 4014e9c:	dd400517 	ldw	r21,20(sp)
 4014ea0:	dd000417 	ldw	r20,16(sp)
 4014ea4:	dcc00317 	ldw	r19,12(sp)
 4014ea8:	dc800217 	ldw	r18,8(sp)
 4014eac:	dc400117 	ldw	r17,4(sp)
 4014eb0:	dc000017 	ldw	r16,0(sp)
 4014eb4:	dec00704 	addi	sp,sp,28
 4014eb8:	f800283a 	ret
 4014ebc:	21400017 	ldw	r5,0(r4)
 4014ec0:	18c00104 	addi	r3,r3,4
 4014ec4:	21000104 	addi	r4,r4,4
 4014ec8:	197fff15 	stw	r5,-4(r3)
 4014ecc:	223ffb36 	bltu	r4,r8,4014ebc <__alt_mem_onchip_memory2_0+0xfc013c3c>
 4014ed0:	003fe606 	br	4014e6c <__alt_mem_onchip_memory2_0+0xfc013bec>
 4014ed4:	9c000084 	addi	r16,r19,2
 4014ed8:	003fe406 	br	4014e6c <__alt_mem_onchip_memory2_0+0xfc013bec>

04014edc <__mcmp>:
 4014edc:	20800417 	ldw	r2,16(r4)
 4014ee0:	28c00417 	ldw	r3,16(r5)
 4014ee4:	10c5c83a 	sub	r2,r2,r3
 4014ee8:	1000111e 	bne	r2,zero,4014f30 <__mcmp+0x54>
 4014eec:	18c7883a 	add	r3,r3,r3
 4014ef0:	18c7883a 	add	r3,r3,r3
 4014ef4:	21000504 	addi	r4,r4,20
 4014ef8:	29400504 	addi	r5,r5,20
 4014efc:	20c5883a 	add	r2,r4,r3
 4014f00:	28cb883a 	add	r5,r5,r3
 4014f04:	00000106 	br	4014f0c <__mcmp+0x30>
 4014f08:	20800a2e 	bgeu	r4,r2,4014f34 <__mcmp+0x58>
 4014f0c:	10bfff04 	addi	r2,r2,-4
 4014f10:	297fff04 	addi	r5,r5,-4
 4014f14:	11800017 	ldw	r6,0(r2)
 4014f18:	28c00017 	ldw	r3,0(r5)
 4014f1c:	30fffa26 	beq	r6,r3,4014f08 <__alt_mem_onchip_memory2_0+0xfc013c88>
 4014f20:	30c00236 	bltu	r6,r3,4014f2c <__mcmp+0x50>
 4014f24:	00800044 	movi	r2,1
 4014f28:	f800283a 	ret
 4014f2c:	00bfffc4 	movi	r2,-1
 4014f30:	f800283a 	ret
 4014f34:	0005883a 	mov	r2,zero
 4014f38:	f800283a 	ret

04014f3c <__mdiff>:
 4014f3c:	28c00417 	ldw	r3,16(r5)
 4014f40:	30800417 	ldw	r2,16(r6)
 4014f44:	defffa04 	addi	sp,sp,-24
 4014f48:	dcc00315 	stw	r19,12(sp)
 4014f4c:	dc800215 	stw	r18,8(sp)
 4014f50:	dfc00515 	stw	ra,20(sp)
 4014f54:	dd000415 	stw	r20,16(sp)
 4014f58:	dc400115 	stw	r17,4(sp)
 4014f5c:	dc000015 	stw	r16,0(sp)
 4014f60:	1887c83a 	sub	r3,r3,r2
 4014f64:	2825883a 	mov	r18,r5
 4014f68:	3027883a 	mov	r19,r6
 4014f6c:	1800141e 	bne	r3,zero,4014fc0 <__mdiff+0x84>
 4014f70:	1085883a 	add	r2,r2,r2
 4014f74:	1085883a 	add	r2,r2,r2
 4014f78:	2a000504 	addi	r8,r5,20
 4014f7c:	34000504 	addi	r16,r6,20
 4014f80:	4087883a 	add	r3,r8,r2
 4014f84:	8085883a 	add	r2,r16,r2
 4014f88:	00000106 	br	4014f90 <__mdiff+0x54>
 4014f8c:	40c0592e 	bgeu	r8,r3,40150f4 <__mdiff+0x1b8>
 4014f90:	18ffff04 	addi	r3,r3,-4
 4014f94:	10bfff04 	addi	r2,r2,-4
 4014f98:	19c00017 	ldw	r7,0(r3)
 4014f9c:	11400017 	ldw	r5,0(r2)
 4014fa0:	397ffa26 	beq	r7,r5,4014f8c <__alt_mem_onchip_memory2_0+0xfc013d0c>
 4014fa4:	3940592e 	bgeu	r7,r5,401510c <__mdiff+0x1d0>
 4014fa8:	9005883a 	mov	r2,r18
 4014fac:	4023883a 	mov	r17,r8
 4014fb0:	9825883a 	mov	r18,r19
 4014fb4:	05000044 	movi	r20,1
 4014fb8:	1027883a 	mov	r19,r2
 4014fbc:	00000406 	br	4014fd0 <__mdiff+0x94>
 4014fc0:	18005616 	blt	r3,zero,401511c <__mdiff+0x1e0>
 4014fc4:	34400504 	addi	r17,r6,20
 4014fc8:	2c000504 	addi	r16,r5,20
 4014fcc:	0029883a 	mov	r20,zero
 4014fd0:	91400117 	ldw	r5,4(r18)
 4014fd4:	40145580 	call	4014558 <_Balloc>
 4014fd8:	92400417 	ldw	r9,16(r18)
 4014fdc:	9b000417 	ldw	r12,16(r19)
 4014fe0:	12c00504 	addi	r11,r2,20
 4014fe4:	4a51883a 	add	r8,r9,r9
 4014fe8:	6319883a 	add	r12,r12,r12
 4014fec:	4211883a 	add	r8,r8,r8
 4014ff0:	6319883a 	add	r12,r12,r12
 4014ff4:	15000315 	stw	r20,12(r2)
 4014ff8:	8211883a 	add	r8,r16,r8
 4014ffc:	8b19883a 	add	r12,r17,r12
 4015000:	0007883a 	mov	r3,zero
 4015004:	81400017 	ldw	r5,0(r16)
 4015008:	89c00017 	ldw	r7,0(r17)
 401500c:	59800104 	addi	r6,r11,4
 4015010:	293fffcc 	andi	r4,r5,65535
 4015014:	20c7883a 	add	r3,r4,r3
 4015018:	393fffcc 	andi	r4,r7,65535
 401501c:	1909c83a 	sub	r4,r3,r4
 4015020:	280ad43a 	srli	r5,r5,16
 4015024:	380ed43a 	srli	r7,r7,16
 4015028:	2007d43a 	srai	r3,r4,16
 401502c:	213fffcc 	andi	r4,r4,65535
 4015030:	29cbc83a 	sub	r5,r5,r7
 4015034:	28c7883a 	add	r3,r5,r3
 4015038:	180a943a 	slli	r5,r3,16
 401503c:	8c400104 	addi	r17,r17,4
 4015040:	84000104 	addi	r16,r16,4
 4015044:	2908b03a 	or	r4,r5,r4
 4015048:	59000015 	stw	r4,0(r11)
 401504c:	1807d43a 	srai	r3,r3,16
 4015050:	3015883a 	mov	r10,r6
 4015054:	3017883a 	mov	r11,r6
 4015058:	8b3fea36 	bltu	r17,r12,4015004 <__alt_mem_onchip_memory2_0+0xfc013d84>
 401505c:	8200162e 	bgeu	r16,r8,40150b8 <__mdiff+0x17c>
 4015060:	8017883a 	mov	r11,r16
 4015064:	59400017 	ldw	r5,0(r11)
 4015068:	31800104 	addi	r6,r6,4
 401506c:	5ac00104 	addi	r11,r11,4
 4015070:	293fffcc 	andi	r4,r5,65535
 4015074:	20c7883a 	add	r3,r4,r3
 4015078:	280ed43a 	srli	r7,r5,16
 401507c:	180bd43a 	srai	r5,r3,16
 4015080:	193fffcc 	andi	r4,r3,65535
 4015084:	3947883a 	add	r3,r7,r5
 4015088:	180a943a 	slli	r5,r3,16
 401508c:	1807d43a 	srai	r3,r3,16
 4015090:	2908b03a 	or	r4,r5,r4
 4015094:	313fff15 	stw	r4,-4(r6)
 4015098:	5a3ff236 	bltu	r11,r8,4015064 <__alt_mem_onchip_memory2_0+0xfc013de4>
 401509c:	0406303a 	nor	r3,zero,r16
 40150a0:	1a07883a 	add	r3,r3,r8
 40150a4:	1806d0ba 	srli	r3,r3,2
 40150a8:	18c00044 	addi	r3,r3,1
 40150ac:	18c7883a 	add	r3,r3,r3
 40150b0:	18c7883a 	add	r3,r3,r3
 40150b4:	50d5883a 	add	r10,r10,r3
 40150b8:	50ffff04 	addi	r3,r10,-4
 40150bc:	2000041e 	bne	r4,zero,40150d0 <__mdiff+0x194>
 40150c0:	18ffff04 	addi	r3,r3,-4
 40150c4:	19000017 	ldw	r4,0(r3)
 40150c8:	4a7fffc4 	addi	r9,r9,-1
 40150cc:	203ffc26 	beq	r4,zero,40150c0 <__alt_mem_onchip_memory2_0+0xfc013e40>
 40150d0:	12400415 	stw	r9,16(r2)
 40150d4:	dfc00517 	ldw	ra,20(sp)
 40150d8:	dd000417 	ldw	r20,16(sp)
 40150dc:	dcc00317 	ldw	r19,12(sp)
 40150e0:	dc800217 	ldw	r18,8(sp)
 40150e4:	dc400117 	ldw	r17,4(sp)
 40150e8:	dc000017 	ldw	r16,0(sp)
 40150ec:	dec00604 	addi	sp,sp,24
 40150f0:	f800283a 	ret
 40150f4:	000b883a 	mov	r5,zero
 40150f8:	40145580 	call	4014558 <_Balloc>
 40150fc:	00c00044 	movi	r3,1
 4015100:	10c00415 	stw	r3,16(r2)
 4015104:	10000515 	stw	zero,20(r2)
 4015108:	003ff206 	br	40150d4 <__alt_mem_onchip_memory2_0+0xfc013e54>
 401510c:	8023883a 	mov	r17,r16
 4015110:	0029883a 	mov	r20,zero
 4015114:	4021883a 	mov	r16,r8
 4015118:	003fad06 	br	4014fd0 <__alt_mem_onchip_memory2_0+0xfc013d50>
 401511c:	9005883a 	mov	r2,r18
 4015120:	94400504 	addi	r17,r18,20
 4015124:	9c000504 	addi	r16,r19,20
 4015128:	9825883a 	mov	r18,r19
 401512c:	05000044 	movi	r20,1
 4015130:	1027883a 	mov	r19,r2
 4015134:	003fa606 	br	4014fd0 <__alt_mem_onchip_memory2_0+0xfc013d50>

04015138 <__ulp>:
 4015138:	295ffc2c 	andhi	r5,r5,32752
 401513c:	00bf3034 	movhi	r2,64704
 4015140:	2887883a 	add	r3,r5,r2
 4015144:	00c0020e 	bge	zero,r3,4015150 <__ulp+0x18>
 4015148:	0005883a 	mov	r2,zero
 401514c:	f800283a 	ret
 4015150:	00c7c83a 	sub	r3,zero,r3
 4015154:	1807d53a 	srai	r3,r3,20
 4015158:	008004c4 	movi	r2,19
 401515c:	10c00b0e 	bge	r2,r3,401518c <__ulp+0x54>
 4015160:	18bffb04 	addi	r2,r3,-20
 4015164:	01000784 	movi	r4,30
 4015168:	0007883a 	mov	r3,zero
 401516c:	20800516 	blt	r4,r2,4015184 <__ulp+0x4c>
 4015170:	010007c4 	movi	r4,31
 4015174:	2089c83a 	sub	r4,r4,r2
 4015178:	00800044 	movi	r2,1
 401517c:	1104983a 	sll	r2,r2,r4
 4015180:	f800283a 	ret
 4015184:	00800044 	movi	r2,1
 4015188:	f800283a 	ret
 401518c:	01400234 	movhi	r5,8
 4015190:	28c7d83a 	sra	r3,r5,r3
 4015194:	0005883a 	mov	r2,zero
 4015198:	f800283a 	ret

0401519c <__b2d>:
 401519c:	defffa04 	addi	sp,sp,-24
 40151a0:	dc000015 	stw	r16,0(sp)
 40151a4:	24000417 	ldw	r16,16(r4)
 40151a8:	dc400115 	stw	r17,4(sp)
 40151ac:	24400504 	addi	r17,r4,20
 40151b0:	8421883a 	add	r16,r16,r16
 40151b4:	8421883a 	add	r16,r16,r16
 40151b8:	8c21883a 	add	r16,r17,r16
 40151bc:	dc800215 	stw	r18,8(sp)
 40151c0:	84bfff17 	ldw	r18,-4(r16)
 40151c4:	dd000415 	stw	r20,16(sp)
 40151c8:	dcc00315 	stw	r19,12(sp)
 40151cc:	9009883a 	mov	r4,r18
 40151d0:	2829883a 	mov	r20,r5
 40151d4:	dfc00515 	stw	ra,20(sp)
 40151d8:	40148740 	call	4014874 <__hi0bits>
 40151dc:	00c00804 	movi	r3,32
 40151e0:	1889c83a 	sub	r4,r3,r2
 40151e4:	a1000015 	stw	r4,0(r20)
 40151e8:	01000284 	movi	r4,10
 40151ec:	84ffff04 	addi	r19,r16,-4
 40151f0:	20801216 	blt	r4,r2,401523c <__b2d+0xa0>
 40151f4:	018002c4 	movi	r6,11
 40151f8:	308dc83a 	sub	r6,r6,r2
 40151fc:	9186d83a 	srl	r3,r18,r6
 4015200:	18cffc34 	orhi	r3,r3,16368
 4015204:	8cc0212e 	bgeu	r17,r19,401528c <__b2d+0xf0>
 4015208:	813ffe17 	ldw	r4,-8(r16)
 401520c:	218cd83a 	srl	r6,r4,r6
 4015210:	10800544 	addi	r2,r2,21
 4015214:	9084983a 	sll	r2,r18,r2
 4015218:	1184b03a 	or	r2,r2,r6
 401521c:	dfc00517 	ldw	ra,20(sp)
 4015220:	dd000417 	ldw	r20,16(sp)
 4015224:	dcc00317 	ldw	r19,12(sp)
 4015228:	dc800217 	ldw	r18,8(sp)
 401522c:	dc400117 	ldw	r17,4(sp)
 4015230:	dc000017 	ldw	r16,0(sp)
 4015234:	dec00604 	addi	sp,sp,24
 4015238:	f800283a 	ret
 401523c:	8cc00f2e 	bgeu	r17,r19,401527c <__b2d+0xe0>
 4015240:	117ffd44 	addi	r5,r2,-11
 4015244:	80bffe17 	ldw	r2,-8(r16)
 4015248:	28000e26 	beq	r5,zero,4015284 <__b2d+0xe8>
 401524c:	1949c83a 	sub	r4,r3,r5
 4015250:	9164983a 	sll	r18,r18,r5
 4015254:	1106d83a 	srl	r3,r2,r4
 4015258:	81bffe04 	addi	r6,r16,-8
 401525c:	948ffc34 	orhi	r18,r18,16368
 4015260:	90c6b03a 	or	r3,r18,r3
 4015264:	89800e2e 	bgeu	r17,r6,40152a0 <__b2d+0x104>
 4015268:	81bffd17 	ldw	r6,-12(r16)
 401526c:	1144983a 	sll	r2,r2,r5
 4015270:	310ad83a 	srl	r5,r6,r4
 4015274:	2884b03a 	or	r2,r5,r2
 4015278:	003fe806 	br	401521c <__alt_mem_onchip_memory2_0+0xfc013f9c>
 401527c:	10bffd44 	addi	r2,r2,-11
 4015280:	1000041e 	bne	r2,zero,4015294 <__b2d+0xf8>
 4015284:	90cffc34 	orhi	r3,r18,16368
 4015288:	003fe406 	br	401521c <__alt_mem_onchip_memory2_0+0xfc013f9c>
 401528c:	000d883a 	mov	r6,zero
 4015290:	003fdf06 	br	4015210 <__alt_mem_onchip_memory2_0+0xfc013f90>
 4015294:	90a4983a 	sll	r18,r18,r2
 4015298:	0005883a 	mov	r2,zero
 401529c:	003ff906 	br	4015284 <__alt_mem_onchip_memory2_0+0xfc014004>
 40152a0:	1144983a 	sll	r2,r2,r5
 40152a4:	003fdd06 	br	401521c <__alt_mem_onchip_memory2_0+0xfc013f9c>

040152a8 <__d2b>:
 40152a8:	defff804 	addi	sp,sp,-32
 40152ac:	dc000215 	stw	r16,8(sp)
 40152b0:	3021883a 	mov	r16,r6
 40152b4:	dc400315 	stw	r17,12(sp)
 40152b8:	8022907a 	slli	r17,r16,1
 40152bc:	dd000615 	stw	r20,24(sp)
 40152c0:	2829883a 	mov	r20,r5
 40152c4:	01400044 	movi	r5,1
 40152c8:	dcc00515 	stw	r19,20(sp)
 40152cc:	dc800415 	stw	r18,16(sp)
 40152d0:	dfc00715 	stw	ra,28(sp)
 40152d4:	3825883a 	mov	r18,r7
 40152d8:	8822d57a 	srli	r17,r17,21
 40152dc:	40145580 	call	4014558 <_Balloc>
 40152e0:	1027883a 	mov	r19,r2
 40152e4:	00800434 	movhi	r2,16
 40152e8:	10bfffc4 	addi	r2,r2,-1
 40152ec:	808c703a 	and	r6,r16,r2
 40152f0:	88000126 	beq	r17,zero,40152f8 <__d2b+0x50>
 40152f4:	31800434 	orhi	r6,r6,16
 40152f8:	d9800015 	stw	r6,0(sp)
 40152fc:	a0002426 	beq	r20,zero,4015390 <__d2b+0xe8>
 4015300:	d9000104 	addi	r4,sp,4
 4015304:	dd000115 	stw	r20,4(sp)
 4015308:	40148dc0 	call	40148dc <__lo0bits>
 401530c:	d8c00017 	ldw	r3,0(sp)
 4015310:	10002f1e 	bne	r2,zero,40153d0 <__d2b+0x128>
 4015314:	d9000117 	ldw	r4,4(sp)
 4015318:	99000515 	stw	r4,20(r19)
 401531c:	1821003a 	cmpeq	r16,r3,zero
 4015320:	01000084 	movi	r4,2
 4015324:	2421c83a 	sub	r16,r4,r16
 4015328:	98c00615 	stw	r3,24(r19)
 401532c:	9c000415 	stw	r16,16(r19)
 4015330:	88001f1e 	bne	r17,zero,40153b0 <__d2b+0x108>
 4015334:	10bef384 	addi	r2,r2,-1074
 4015338:	90800015 	stw	r2,0(r18)
 401533c:	00900034 	movhi	r2,16384
 4015340:	10bfffc4 	addi	r2,r2,-1
 4015344:	8085883a 	add	r2,r16,r2
 4015348:	1085883a 	add	r2,r2,r2
 401534c:	1085883a 	add	r2,r2,r2
 4015350:	9885883a 	add	r2,r19,r2
 4015354:	11000517 	ldw	r4,20(r2)
 4015358:	8020917a 	slli	r16,r16,5
 401535c:	40148740 	call	4014874 <__hi0bits>
 4015360:	d8c00817 	ldw	r3,32(sp)
 4015364:	8085c83a 	sub	r2,r16,r2
 4015368:	18800015 	stw	r2,0(r3)
 401536c:	9805883a 	mov	r2,r19
 4015370:	dfc00717 	ldw	ra,28(sp)
 4015374:	dd000617 	ldw	r20,24(sp)
 4015378:	dcc00517 	ldw	r19,20(sp)
 401537c:	dc800417 	ldw	r18,16(sp)
 4015380:	dc400317 	ldw	r17,12(sp)
 4015384:	dc000217 	ldw	r16,8(sp)
 4015388:	dec00804 	addi	sp,sp,32
 401538c:	f800283a 	ret
 4015390:	d809883a 	mov	r4,sp
 4015394:	40148dc0 	call	40148dc <__lo0bits>
 4015398:	d8c00017 	ldw	r3,0(sp)
 401539c:	04000044 	movi	r16,1
 40153a0:	9c000415 	stw	r16,16(r19)
 40153a4:	98c00515 	stw	r3,20(r19)
 40153a8:	10800804 	addi	r2,r2,32
 40153ac:	883fe126 	beq	r17,zero,4015334 <__alt_mem_onchip_memory2_0+0xfc0140b4>
 40153b0:	00c00d44 	movi	r3,53
 40153b4:	8c7ef344 	addi	r17,r17,-1075
 40153b8:	88a3883a 	add	r17,r17,r2
 40153bc:	1885c83a 	sub	r2,r3,r2
 40153c0:	d8c00817 	ldw	r3,32(sp)
 40153c4:	94400015 	stw	r17,0(r18)
 40153c8:	18800015 	stw	r2,0(r3)
 40153cc:	003fe706 	br	401536c <__alt_mem_onchip_memory2_0+0xfc0140ec>
 40153d0:	01000804 	movi	r4,32
 40153d4:	2089c83a 	sub	r4,r4,r2
 40153d8:	1908983a 	sll	r4,r3,r4
 40153dc:	d9400117 	ldw	r5,4(sp)
 40153e0:	1886d83a 	srl	r3,r3,r2
 40153e4:	2148b03a 	or	r4,r4,r5
 40153e8:	99000515 	stw	r4,20(r19)
 40153ec:	d8c00015 	stw	r3,0(sp)
 40153f0:	003fca06 	br	401531c <__alt_mem_onchip_memory2_0+0xfc01409c>

040153f4 <__ratio>:
 40153f4:	defff904 	addi	sp,sp,-28
 40153f8:	dc400315 	stw	r17,12(sp)
 40153fc:	2823883a 	mov	r17,r5
 4015400:	d9400104 	addi	r5,sp,4
 4015404:	dfc00615 	stw	ra,24(sp)
 4015408:	dcc00515 	stw	r19,20(sp)
 401540c:	dc800415 	stw	r18,16(sp)
 4015410:	2027883a 	mov	r19,r4
 4015414:	dc000215 	stw	r16,8(sp)
 4015418:	401519c0 	call	401519c <__b2d>
 401541c:	d80b883a 	mov	r5,sp
 4015420:	8809883a 	mov	r4,r17
 4015424:	1025883a 	mov	r18,r2
 4015428:	1821883a 	mov	r16,r3
 401542c:	401519c0 	call	401519c <__b2d>
 4015430:	8a000417 	ldw	r8,16(r17)
 4015434:	99000417 	ldw	r4,16(r19)
 4015438:	d9400117 	ldw	r5,4(sp)
 401543c:	2209c83a 	sub	r4,r4,r8
 4015440:	2010917a 	slli	r8,r4,5
 4015444:	d9000017 	ldw	r4,0(sp)
 4015448:	2909c83a 	sub	r4,r5,r4
 401544c:	4109883a 	add	r4,r8,r4
 4015450:	01000e0e 	bge	zero,r4,401548c <__ratio+0x98>
 4015454:	2008953a 	slli	r4,r4,20
 4015458:	2421883a 	add	r16,r4,r16
 401545c:	100d883a 	mov	r6,r2
 4015460:	180f883a 	mov	r7,r3
 4015464:	9009883a 	mov	r4,r18
 4015468:	800b883a 	mov	r5,r16
 401546c:	401933c0 	call	401933c <__divdf3>
 4015470:	dfc00617 	ldw	ra,24(sp)
 4015474:	dcc00517 	ldw	r19,20(sp)
 4015478:	dc800417 	ldw	r18,16(sp)
 401547c:	dc400317 	ldw	r17,12(sp)
 4015480:	dc000217 	ldw	r16,8(sp)
 4015484:	dec00704 	addi	sp,sp,28
 4015488:	f800283a 	ret
 401548c:	2008953a 	slli	r4,r4,20
 4015490:	1907c83a 	sub	r3,r3,r4
 4015494:	003ff106 	br	401545c <__alt_mem_onchip_memory2_0+0xfc0141dc>

04015498 <_mprec_log10>:
 4015498:	defffe04 	addi	sp,sp,-8
 401549c:	dc000015 	stw	r16,0(sp)
 40154a0:	dfc00115 	stw	ra,4(sp)
 40154a4:	008005c4 	movi	r2,23
 40154a8:	2021883a 	mov	r16,r4
 40154ac:	11000d0e 	bge	r2,r4,40154e4 <_mprec_log10+0x4c>
 40154b0:	0005883a 	mov	r2,zero
 40154b4:	00cffc34 	movhi	r3,16368
 40154b8:	843fffc4 	addi	r16,r16,-1
 40154bc:	000d883a 	mov	r6,zero
 40154c0:	01d00934 	movhi	r7,16420
 40154c4:	1009883a 	mov	r4,r2
 40154c8:	180b883a 	mov	r5,r3
 40154cc:	4019f640 	call	4019f64 <__muldf3>
 40154d0:	803ff91e 	bne	r16,zero,40154b8 <__alt_mem_onchip_memory2_0+0xfc014238>
 40154d4:	dfc00117 	ldw	ra,4(sp)
 40154d8:	dc000017 	ldw	r16,0(sp)
 40154dc:	dec00204 	addi	sp,sp,8
 40154e0:	f800283a 	ret
 40154e4:	202090fa 	slli	r16,r4,3
 40154e8:	008100b4 	movhi	r2,1026
 40154ec:	109bef04 	addi	r2,r2,28604
 40154f0:	1421883a 	add	r16,r2,r16
 40154f4:	80800017 	ldw	r2,0(r16)
 40154f8:	80c00117 	ldw	r3,4(r16)
 40154fc:	dfc00117 	ldw	ra,4(sp)
 4015500:	dc000017 	ldw	r16,0(sp)
 4015504:	dec00204 	addi	sp,sp,8
 4015508:	f800283a 	ret

0401550c <__copybits>:
 401550c:	297fffc4 	addi	r5,r5,-1
 4015510:	280fd17a 	srai	r7,r5,5
 4015514:	30c00417 	ldw	r3,16(r6)
 4015518:	30800504 	addi	r2,r6,20
 401551c:	39c00044 	addi	r7,r7,1
 4015520:	18c7883a 	add	r3,r3,r3
 4015524:	39cf883a 	add	r7,r7,r7
 4015528:	18c7883a 	add	r3,r3,r3
 401552c:	39cf883a 	add	r7,r7,r7
 4015530:	10c7883a 	add	r3,r2,r3
 4015534:	21cf883a 	add	r7,r4,r7
 4015538:	10c00d2e 	bgeu	r2,r3,4015570 <__copybits+0x64>
 401553c:	200b883a 	mov	r5,r4
 4015540:	12000017 	ldw	r8,0(r2)
 4015544:	29400104 	addi	r5,r5,4
 4015548:	10800104 	addi	r2,r2,4
 401554c:	2a3fff15 	stw	r8,-4(r5)
 4015550:	10fffb36 	bltu	r2,r3,4015540 <__alt_mem_onchip_memory2_0+0xfc0142c0>
 4015554:	1985c83a 	sub	r2,r3,r6
 4015558:	10bffac4 	addi	r2,r2,-21
 401555c:	1004d0ba 	srli	r2,r2,2
 4015560:	10800044 	addi	r2,r2,1
 4015564:	1085883a 	add	r2,r2,r2
 4015568:	1085883a 	add	r2,r2,r2
 401556c:	2089883a 	add	r4,r4,r2
 4015570:	21c0032e 	bgeu	r4,r7,4015580 <__copybits+0x74>
 4015574:	20000015 	stw	zero,0(r4)
 4015578:	21000104 	addi	r4,r4,4
 401557c:	21fffd36 	bltu	r4,r7,4015574 <__alt_mem_onchip_memory2_0+0xfc0142f4>
 4015580:	f800283a 	ret

04015584 <__any_on>:
 4015584:	20c00417 	ldw	r3,16(r4)
 4015588:	2805d17a 	srai	r2,r5,5
 401558c:	21000504 	addi	r4,r4,20
 4015590:	18800d0e 	bge	r3,r2,40155c8 <__any_on+0x44>
 4015594:	18c7883a 	add	r3,r3,r3
 4015598:	18c7883a 	add	r3,r3,r3
 401559c:	20c7883a 	add	r3,r4,r3
 40155a0:	20c0192e 	bgeu	r4,r3,4015608 <__any_on+0x84>
 40155a4:	18bfff17 	ldw	r2,-4(r3)
 40155a8:	18ffff04 	addi	r3,r3,-4
 40155ac:	1000041e 	bne	r2,zero,40155c0 <__any_on+0x3c>
 40155b0:	20c0142e 	bgeu	r4,r3,4015604 <__any_on+0x80>
 40155b4:	18ffff04 	addi	r3,r3,-4
 40155b8:	19400017 	ldw	r5,0(r3)
 40155bc:	283ffc26 	beq	r5,zero,40155b0 <__alt_mem_onchip_memory2_0+0xfc014330>
 40155c0:	00800044 	movi	r2,1
 40155c4:	f800283a 	ret
 40155c8:	10c00a0e 	bge	r2,r3,40155f4 <__any_on+0x70>
 40155cc:	1085883a 	add	r2,r2,r2
 40155d0:	1085883a 	add	r2,r2,r2
 40155d4:	294007cc 	andi	r5,r5,31
 40155d8:	2087883a 	add	r3,r4,r2
 40155dc:	283ff026 	beq	r5,zero,40155a0 <__alt_mem_onchip_memory2_0+0xfc014320>
 40155e0:	19800017 	ldw	r6,0(r3)
 40155e4:	3144d83a 	srl	r2,r6,r5
 40155e8:	114a983a 	sll	r5,r2,r5
 40155ec:	317ff41e 	bne	r6,r5,40155c0 <__alt_mem_onchip_memory2_0+0xfc014340>
 40155f0:	003feb06 	br	40155a0 <__alt_mem_onchip_memory2_0+0xfc014320>
 40155f4:	1085883a 	add	r2,r2,r2
 40155f8:	1085883a 	add	r2,r2,r2
 40155fc:	2087883a 	add	r3,r4,r2
 4015600:	003fe706 	br	40155a0 <__alt_mem_onchip_memory2_0+0xfc014320>
 4015604:	f800283a 	ret
 4015608:	0005883a 	mov	r2,zero
 401560c:	f800283a 	ret

04015610 <_putc_r>:
 4015610:	defffc04 	addi	sp,sp,-16
 4015614:	dc000215 	stw	r16,8(sp)
 4015618:	dfc00315 	stw	ra,12(sp)
 401561c:	2021883a 	mov	r16,r4
 4015620:	20000226 	beq	r4,zero,401562c <_putc_r+0x1c>
 4015624:	20800e17 	ldw	r2,56(r4)
 4015628:	10001b26 	beq	r2,zero,4015698 <_putc_r+0x88>
 401562c:	30800217 	ldw	r2,8(r6)
 4015630:	10bfffc4 	addi	r2,r2,-1
 4015634:	30800215 	stw	r2,8(r6)
 4015638:	10000a16 	blt	r2,zero,4015664 <_putc_r+0x54>
 401563c:	30800017 	ldw	r2,0(r6)
 4015640:	11400005 	stb	r5,0(r2)
 4015644:	30800017 	ldw	r2,0(r6)
 4015648:	10c00044 	addi	r3,r2,1
 401564c:	30c00015 	stw	r3,0(r6)
 4015650:	10800003 	ldbu	r2,0(r2)
 4015654:	dfc00317 	ldw	ra,12(sp)
 4015658:	dc000217 	ldw	r16,8(sp)
 401565c:	dec00404 	addi	sp,sp,16
 4015660:	f800283a 	ret
 4015664:	30c00617 	ldw	r3,24(r6)
 4015668:	10c00616 	blt	r2,r3,4015684 <_putc_r+0x74>
 401566c:	30800017 	ldw	r2,0(r6)
 4015670:	00c00284 	movi	r3,10
 4015674:	11400005 	stb	r5,0(r2)
 4015678:	30800017 	ldw	r2,0(r6)
 401567c:	11400003 	ldbu	r5,0(r2)
 4015680:	28fff11e 	bne	r5,r3,4015648 <__alt_mem_onchip_memory2_0+0xfc0143c8>
 4015684:	8009883a 	mov	r4,r16
 4015688:	dfc00317 	ldw	ra,12(sp)
 401568c:	dc000217 	ldw	r16,8(sp)
 4015690:	dec00404 	addi	sp,sp,16
 4015694:	40175841 	jmpi	4017584 <__swbuf_r>
 4015698:	d9400015 	stw	r5,0(sp)
 401569c:	d9800115 	stw	r6,4(sp)
 40156a0:	40135ac0 	call	40135ac <__sinit>
 40156a4:	d9800117 	ldw	r6,4(sp)
 40156a8:	d9400017 	ldw	r5,0(sp)
 40156ac:	003fdf06 	br	401562c <__alt_mem_onchip_memory2_0+0xfc0143ac>

040156b0 <putc>:
 40156b0:	008100f4 	movhi	r2,1027
 40156b4:	defffc04 	addi	sp,sp,-16
 40156b8:	10a8a704 	addi	r2,r2,-23908
 40156bc:	dc000115 	stw	r16,4(sp)
 40156c0:	14000017 	ldw	r16,0(r2)
 40156c4:	dc400215 	stw	r17,8(sp)
 40156c8:	dfc00315 	stw	ra,12(sp)
 40156cc:	2023883a 	mov	r17,r4
 40156d0:	80000226 	beq	r16,zero,40156dc <putc+0x2c>
 40156d4:	80800e17 	ldw	r2,56(r16)
 40156d8:	10001a26 	beq	r2,zero,4015744 <putc+0x94>
 40156dc:	28800217 	ldw	r2,8(r5)
 40156e0:	10bfffc4 	addi	r2,r2,-1
 40156e4:	28800215 	stw	r2,8(r5)
 40156e8:	10000b16 	blt	r2,zero,4015718 <putc+0x68>
 40156ec:	28800017 	ldw	r2,0(r5)
 40156f0:	14400005 	stb	r17,0(r2)
 40156f4:	28800017 	ldw	r2,0(r5)
 40156f8:	10c00044 	addi	r3,r2,1
 40156fc:	28c00015 	stw	r3,0(r5)
 4015700:	10800003 	ldbu	r2,0(r2)
 4015704:	dfc00317 	ldw	ra,12(sp)
 4015708:	dc400217 	ldw	r17,8(sp)
 401570c:	dc000117 	ldw	r16,4(sp)
 4015710:	dec00404 	addi	sp,sp,16
 4015714:	f800283a 	ret
 4015718:	28c00617 	ldw	r3,24(r5)
 401571c:	10c00e16 	blt	r2,r3,4015758 <putc+0xa8>
 4015720:	28800017 	ldw	r2,0(r5)
 4015724:	01000284 	movi	r4,10
 4015728:	14400005 	stb	r17,0(r2)
 401572c:	28800017 	ldw	r2,0(r5)
 4015730:	10c00003 	ldbu	r3,0(r2)
 4015734:	193ff01e 	bne	r3,r4,40156f8 <__alt_mem_onchip_memory2_0+0xfc014478>
 4015738:	280d883a 	mov	r6,r5
 401573c:	180b883a 	mov	r5,r3
 4015740:	00000706 	br	4015760 <putc+0xb0>
 4015744:	8009883a 	mov	r4,r16
 4015748:	d9400015 	stw	r5,0(sp)
 401574c:	40135ac0 	call	40135ac <__sinit>
 4015750:	d9400017 	ldw	r5,0(sp)
 4015754:	003fe106 	br	40156dc <__alt_mem_onchip_memory2_0+0xfc01445c>
 4015758:	280d883a 	mov	r6,r5
 401575c:	880b883a 	mov	r5,r17
 4015760:	8009883a 	mov	r4,r16
 4015764:	dfc00317 	ldw	ra,12(sp)
 4015768:	dc400217 	ldw	r17,8(sp)
 401576c:	dc000117 	ldw	r16,4(sp)
 4015770:	dec00404 	addi	sp,sp,16
 4015774:	40175841 	jmpi	4017584 <__swbuf_r>

04015778 <_realloc_r>:
 4015778:	defff604 	addi	sp,sp,-40
 401577c:	dc800215 	stw	r18,8(sp)
 4015780:	dfc00915 	stw	ra,36(sp)
 4015784:	df000815 	stw	fp,32(sp)
 4015788:	ddc00715 	stw	r23,28(sp)
 401578c:	dd800615 	stw	r22,24(sp)
 4015790:	dd400515 	stw	r21,20(sp)
 4015794:	dd000415 	stw	r20,16(sp)
 4015798:	dcc00315 	stw	r19,12(sp)
 401579c:	dc400115 	stw	r17,4(sp)
 40157a0:	dc000015 	stw	r16,0(sp)
 40157a4:	3025883a 	mov	r18,r6
 40157a8:	2800b726 	beq	r5,zero,4015a88 <_realloc_r+0x310>
 40157ac:	282b883a 	mov	r21,r5
 40157b0:	2029883a 	mov	r20,r4
 40157b4:	401ba2c0 	call	401ba2c <__malloc_lock>
 40157b8:	a8bfff17 	ldw	r2,-4(r21)
 40157bc:	043fff04 	movi	r16,-4
 40157c0:	90c002c4 	addi	r3,r18,11
 40157c4:	01000584 	movi	r4,22
 40157c8:	acfffe04 	addi	r19,r21,-8
 40157cc:	1420703a 	and	r16,r2,r16
 40157d0:	20c0332e 	bgeu	r4,r3,40158a0 <_realloc_r+0x128>
 40157d4:	047ffe04 	movi	r17,-8
 40157d8:	1c62703a 	and	r17,r3,r17
 40157dc:	8807883a 	mov	r3,r17
 40157e0:	88005816 	blt	r17,zero,4015944 <_realloc_r+0x1cc>
 40157e4:	8c805736 	bltu	r17,r18,4015944 <_realloc_r+0x1cc>
 40157e8:	80c0300e 	bge	r16,r3,40158ac <_realloc_r+0x134>
 40157ec:	070100b4 	movhi	fp,1026
 40157f0:	e71d4a04 	addi	fp,fp,29992
 40157f4:	e1c00217 	ldw	r7,8(fp)
 40157f8:	9c09883a 	add	r4,r19,r16
 40157fc:	22000117 	ldw	r8,4(r4)
 4015800:	21c06326 	beq	r4,r7,4015990 <_realloc_r+0x218>
 4015804:	017fff84 	movi	r5,-2
 4015808:	414a703a 	and	r5,r8,r5
 401580c:	214b883a 	add	r5,r4,r5
 4015810:	29800117 	ldw	r6,4(r5)
 4015814:	3180004c 	andi	r6,r6,1
 4015818:	30003f26 	beq	r6,zero,4015918 <_realloc_r+0x1a0>
 401581c:	1080004c 	andi	r2,r2,1
 4015820:	10008326 	beq	r2,zero,4015a30 <_realloc_r+0x2b8>
 4015824:	900b883a 	mov	r5,r18
 4015828:	a009883a 	mov	r4,r20
 401582c:	400e13c0 	call	400e13c <_malloc_r>
 4015830:	1025883a 	mov	r18,r2
 4015834:	10011e26 	beq	r2,zero,4015cb0 <_realloc_r+0x538>
 4015838:	a93fff17 	ldw	r4,-4(r21)
 401583c:	10fffe04 	addi	r3,r2,-8
 4015840:	00bfff84 	movi	r2,-2
 4015844:	2084703a 	and	r2,r4,r2
 4015848:	9885883a 	add	r2,r19,r2
 401584c:	1880ee26 	beq	r3,r2,4015c08 <_realloc_r+0x490>
 4015850:	81bfff04 	addi	r6,r16,-4
 4015854:	00800904 	movi	r2,36
 4015858:	1180b836 	bltu	r2,r6,4015b3c <_realloc_r+0x3c4>
 401585c:	00c004c4 	movi	r3,19
 4015860:	19809636 	bltu	r3,r6,4015abc <_realloc_r+0x344>
 4015864:	9005883a 	mov	r2,r18
 4015868:	a807883a 	mov	r3,r21
 401586c:	19000017 	ldw	r4,0(r3)
 4015870:	11000015 	stw	r4,0(r2)
 4015874:	19000117 	ldw	r4,4(r3)
 4015878:	11000115 	stw	r4,4(r2)
 401587c:	18c00217 	ldw	r3,8(r3)
 4015880:	10c00215 	stw	r3,8(r2)
 4015884:	a80b883a 	mov	r5,r21
 4015888:	a009883a 	mov	r4,r20
 401588c:	40137200 	call	4013720 <_free_r>
 4015890:	a009883a 	mov	r4,r20
 4015894:	401ba500 	call	401ba50 <__malloc_unlock>
 4015898:	9005883a 	mov	r2,r18
 401589c:	00001206 	br	40158e8 <_realloc_r+0x170>
 40158a0:	00c00404 	movi	r3,16
 40158a4:	1823883a 	mov	r17,r3
 40158a8:	003fce06 	br	40157e4 <__alt_mem_onchip_memory2_0+0xfc014564>
 40158ac:	a825883a 	mov	r18,r21
 40158b0:	8445c83a 	sub	r2,r16,r17
 40158b4:	00c003c4 	movi	r3,15
 40158b8:	18802636 	bltu	r3,r2,4015954 <_realloc_r+0x1dc>
 40158bc:	99800117 	ldw	r6,4(r19)
 40158c0:	9c07883a 	add	r3,r19,r16
 40158c4:	3180004c 	andi	r6,r6,1
 40158c8:	3420b03a 	or	r16,r6,r16
 40158cc:	9c000115 	stw	r16,4(r19)
 40158d0:	18800117 	ldw	r2,4(r3)
 40158d4:	10800054 	ori	r2,r2,1
 40158d8:	18800115 	stw	r2,4(r3)
 40158dc:	a009883a 	mov	r4,r20
 40158e0:	401ba500 	call	401ba50 <__malloc_unlock>
 40158e4:	9005883a 	mov	r2,r18
 40158e8:	dfc00917 	ldw	ra,36(sp)
 40158ec:	df000817 	ldw	fp,32(sp)
 40158f0:	ddc00717 	ldw	r23,28(sp)
 40158f4:	dd800617 	ldw	r22,24(sp)
 40158f8:	dd400517 	ldw	r21,20(sp)
 40158fc:	dd000417 	ldw	r20,16(sp)
 4015900:	dcc00317 	ldw	r19,12(sp)
 4015904:	dc800217 	ldw	r18,8(sp)
 4015908:	dc400117 	ldw	r17,4(sp)
 401590c:	dc000017 	ldw	r16,0(sp)
 4015910:	dec00a04 	addi	sp,sp,40
 4015914:	f800283a 	ret
 4015918:	017fff04 	movi	r5,-4
 401591c:	414a703a 	and	r5,r8,r5
 4015920:	814d883a 	add	r6,r16,r5
 4015924:	30c01f16 	blt	r6,r3,40159a4 <_realloc_r+0x22c>
 4015928:	20800317 	ldw	r2,12(r4)
 401592c:	20c00217 	ldw	r3,8(r4)
 4015930:	a825883a 	mov	r18,r21
 4015934:	3021883a 	mov	r16,r6
 4015938:	18800315 	stw	r2,12(r3)
 401593c:	10c00215 	stw	r3,8(r2)
 4015940:	003fdb06 	br	40158b0 <__alt_mem_onchip_memory2_0+0xfc014630>
 4015944:	00800304 	movi	r2,12
 4015948:	a0800015 	stw	r2,0(r20)
 401594c:	0005883a 	mov	r2,zero
 4015950:	003fe506 	br	40158e8 <__alt_mem_onchip_memory2_0+0xfc014668>
 4015954:	98c00117 	ldw	r3,4(r19)
 4015958:	9c4b883a 	add	r5,r19,r17
 401595c:	11000054 	ori	r4,r2,1
 4015960:	18c0004c 	andi	r3,r3,1
 4015964:	1c62b03a 	or	r17,r3,r17
 4015968:	9c400115 	stw	r17,4(r19)
 401596c:	29000115 	stw	r4,4(r5)
 4015970:	2885883a 	add	r2,r5,r2
 4015974:	10c00117 	ldw	r3,4(r2)
 4015978:	29400204 	addi	r5,r5,8
 401597c:	a009883a 	mov	r4,r20
 4015980:	18c00054 	ori	r3,r3,1
 4015984:	10c00115 	stw	r3,4(r2)
 4015988:	40137200 	call	4013720 <_free_r>
 401598c:	003fd306 	br	40158dc <__alt_mem_onchip_memory2_0+0xfc01465c>
 4015990:	017fff04 	movi	r5,-4
 4015994:	414a703a 	and	r5,r8,r5
 4015998:	89800404 	addi	r6,r17,16
 401599c:	8151883a 	add	r8,r16,r5
 40159a0:	4180590e 	bge	r8,r6,4015b08 <_realloc_r+0x390>
 40159a4:	1080004c 	andi	r2,r2,1
 40159a8:	103f9e1e 	bne	r2,zero,4015824 <__alt_mem_onchip_memory2_0+0xfc0145a4>
 40159ac:	adbffe17 	ldw	r22,-8(r21)
 40159b0:	00bfff04 	movi	r2,-4
 40159b4:	9dadc83a 	sub	r22,r19,r22
 40159b8:	b1800117 	ldw	r6,4(r22)
 40159bc:	3084703a 	and	r2,r6,r2
 40159c0:	20002026 	beq	r4,zero,4015a44 <_realloc_r+0x2cc>
 40159c4:	80af883a 	add	r23,r16,r2
 40159c8:	b96f883a 	add	r23,r23,r5
 40159cc:	21c05f26 	beq	r4,r7,4015b4c <_realloc_r+0x3d4>
 40159d0:	b8c01c16 	blt	r23,r3,4015a44 <_realloc_r+0x2cc>
 40159d4:	20800317 	ldw	r2,12(r4)
 40159d8:	20c00217 	ldw	r3,8(r4)
 40159dc:	81bfff04 	addi	r6,r16,-4
 40159e0:	01000904 	movi	r4,36
 40159e4:	18800315 	stw	r2,12(r3)
 40159e8:	10c00215 	stw	r3,8(r2)
 40159ec:	b0c00217 	ldw	r3,8(r22)
 40159f0:	b0800317 	ldw	r2,12(r22)
 40159f4:	b4800204 	addi	r18,r22,8
 40159f8:	18800315 	stw	r2,12(r3)
 40159fc:	10c00215 	stw	r3,8(r2)
 4015a00:	21801b36 	bltu	r4,r6,4015a70 <_realloc_r+0x2f8>
 4015a04:	008004c4 	movi	r2,19
 4015a08:	1180352e 	bgeu	r2,r6,4015ae0 <_realloc_r+0x368>
 4015a0c:	a8800017 	ldw	r2,0(r21)
 4015a10:	b0800215 	stw	r2,8(r22)
 4015a14:	a8800117 	ldw	r2,4(r21)
 4015a18:	b0800315 	stw	r2,12(r22)
 4015a1c:	008006c4 	movi	r2,27
 4015a20:	11807f36 	bltu	r2,r6,4015c20 <_realloc_r+0x4a8>
 4015a24:	b0800404 	addi	r2,r22,16
 4015a28:	ad400204 	addi	r21,r21,8
 4015a2c:	00002d06 	br	4015ae4 <_realloc_r+0x36c>
 4015a30:	adbffe17 	ldw	r22,-8(r21)
 4015a34:	00bfff04 	movi	r2,-4
 4015a38:	9dadc83a 	sub	r22,r19,r22
 4015a3c:	b1000117 	ldw	r4,4(r22)
 4015a40:	2084703a 	and	r2,r4,r2
 4015a44:	b03f7726 	beq	r22,zero,4015824 <__alt_mem_onchip_memory2_0+0xfc0145a4>
 4015a48:	80af883a 	add	r23,r16,r2
 4015a4c:	b8ff7516 	blt	r23,r3,4015824 <__alt_mem_onchip_memory2_0+0xfc0145a4>
 4015a50:	b0800317 	ldw	r2,12(r22)
 4015a54:	b0c00217 	ldw	r3,8(r22)
 4015a58:	81bfff04 	addi	r6,r16,-4
 4015a5c:	01000904 	movi	r4,36
 4015a60:	18800315 	stw	r2,12(r3)
 4015a64:	10c00215 	stw	r3,8(r2)
 4015a68:	b4800204 	addi	r18,r22,8
 4015a6c:	21bfe52e 	bgeu	r4,r6,4015a04 <__alt_mem_onchip_memory2_0+0xfc014784>
 4015a70:	a80b883a 	mov	r5,r21
 4015a74:	9009883a 	mov	r4,r18
 4015a78:	40143fc0 	call	40143fc <memmove>
 4015a7c:	b821883a 	mov	r16,r23
 4015a80:	b027883a 	mov	r19,r22
 4015a84:	003f8a06 	br	40158b0 <__alt_mem_onchip_memory2_0+0xfc014630>
 4015a88:	300b883a 	mov	r5,r6
 4015a8c:	dfc00917 	ldw	ra,36(sp)
 4015a90:	df000817 	ldw	fp,32(sp)
 4015a94:	ddc00717 	ldw	r23,28(sp)
 4015a98:	dd800617 	ldw	r22,24(sp)
 4015a9c:	dd400517 	ldw	r21,20(sp)
 4015aa0:	dd000417 	ldw	r20,16(sp)
 4015aa4:	dcc00317 	ldw	r19,12(sp)
 4015aa8:	dc800217 	ldw	r18,8(sp)
 4015aac:	dc400117 	ldw	r17,4(sp)
 4015ab0:	dc000017 	ldw	r16,0(sp)
 4015ab4:	dec00a04 	addi	sp,sp,40
 4015ab8:	400e13c1 	jmpi	400e13c <_malloc_r>
 4015abc:	a8c00017 	ldw	r3,0(r21)
 4015ac0:	90c00015 	stw	r3,0(r18)
 4015ac4:	a8c00117 	ldw	r3,4(r21)
 4015ac8:	90c00115 	stw	r3,4(r18)
 4015acc:	00c006c4 	movi	r3,27
 4015ad0:	19804536 	bltu	r3,r6,4015be8 <_realloc_r+0x470>
 4015ad4:	90800204 	addi	r2,r18,8
 4015ad8:	a8c00204 	addi	r3,r21,8
 4015adc:	003f6306 	br	401586c <__alt_mem_onchip_memory2_0+0xfc0145ec>
 4015ae0:	9005883a 	mov	r2,r18
 4015ae4:	a8c00017 	ldw	r3,0(r21)
 4015ae8:	b821883a 	mov	r16,r23
 4015aec:	b027883a 	mov	r19,r22
 4015af0:	10c00015 	stw	r3,0(r2)
 4015af4:	a8c00117 	ldw	r3,4(r21)
 4015af8:	10c00115 	stw	r3,4(r2)
 4015afc:	a8c00217 	ldw	r3,8(r21)
 4015b00:	10c00215 	stw	r3,8(r2)
 4015b04:	003f6a06 	br	40158b0 <__alt_mem_onchip_memory2_0+0xfc014630>
 4015b08:	9c67883a 	add	r19,r19,r17
 4015b0c:	4445c83a 	sub	r2,r8,r17
 4015b10:	e4c00215 	stw	r19,8(fp)
 4015b14:	10800054 	ori	r2,r2,1
 4015b18:	98800115 	stw	r2,4(r19)
 4015b1c:	a8bfff17 	ldw	r2,-4(r21)
 4015b20:	a009883a 	mov	r4,r20
 4015b24:	1080004c 	andi	r2,r2,1
 4015b28:	1462b03a 	or	r17,r2,r17
 4015b2c:	ac7fff15 	stw	r17,-4(r21)
 4015b30:	401ba500 	call	401ba50 <__malloc_unlock>
 4015b34:	a805883a 	mov	r2,r21
 4015b38:	003f6b06 	br	40158e8 <__alt_mem_onchip_memory2_0+0xfc014668>
 4015b3c:	a80b883a 	mov	r5,r21
 4015b40:	9009883a 	mov	r4,r18
 4015b44:	40143fc0 	call	40143fc <memmove>
 4015b48:	003f4e06 	br	4015884 <__alt_mem_onchip_memory2_0+0xfc014604>
 4015b4c:	89000404 	addi	r4,r17,16
 4015b50:	b93fbc16 	blt	r23,r4,4015a44 <__alt_mem_onchip_memory2_0+0xfc0147c4>
 4015b54:	b0800317 	ldw	r2,12(r22)
 4015b58:	b0c00217 	ldw	r3,8(r22)
 4015b5c:	81bfff04 	addi	r6,r16,-4
 4015b60:	01000904 	movi	r4,36
 4015b64:	18800315 	stw	r2,12(r3)
 4015b68:	10c00215 	stw	r3,8(r2)
 4015b6c:	b4800204 	addi	r18,r22,8
 4015b70:	21804336 	bltu	r4,r6,4015c80 <_realloc_r+0x508>
 4015b74:	008004c4 	movi	r2,19
 4015b78:	11803f2e 	bgeu	r2,r6,4015c78 <_realloc_r+0x500>
 4015b7c:	a8800017 	ldw	r2,0(r21)
 4015b80:	b0800215 	stw	r2,8(r22)
 4015b84:	a8800117 	ldw	r2,4(r21)
 4015b88:	b0800315 	stw	r2,12(r22)
 4015b8c:	008006c4 	movi	r2,27
 4015b90:	11803f36 	bltu	r2,r6,4015c90 <_realloc_r+0x518>
 4015b94:	b0800404 	addi	r2,r22,16
 4015b98:	ad400204 	addi	r21,r21,8
 4015b9c:	a8c00017 	ldw	r3,0(r21)
 4015ba0:	10c00015 	stw	r3,0(r2)
 4015ba4:	a8c00117 	ldw	r3,4(r21)
 4015ba8:	10c00115 	stw	r3,4(r2)
 4015bac:	a8c00217 	ldw	r3,8(r21)
 4015bb0:	10c00215 	stw	r3,8(r2)
 4015bb4:	b447883a 	add	r3,r22,r17
 4015bb8:	bc45c83a 	sub	r2,r23,r17
 4015bbc:	e0c00215 	stw	r3,8(fp)
 4015bc0:	10800054 	ori	r2,r2,1
 4015bc4:	18800115 	stw	r2,4(r3)
 4015bc8:	b0800117 	ldw	r2,4(r22)
 4015bcc:	a009883a 	mov	r4,r20
 4015bd0:	1080004c 	andi	r2,r2,1
 4015bd4:	1462b03a 	or	r17,r2,r17
 4015bd8:	b4400115 	stw	r17,4(r22)
 4015bdc:	401ba500 	call	401ba50 <__malloc_unlock>
 4015be0:	9005883a 	mov	r2,r18
 4015be4:	003f4006 	br	40158e8 <__alt_mem_onchip_memory2_0+0xfc014668>
 4015be8:	a8c00217 	ldw	r3,8(r21)
 4015bec:	90c00215 	stw	r3,8(r18)
 4015bf0:	a8c00317 	ldw	r3,12(r21)
 4015bf4:	90c00315 	stw	r3,12(r18)
 4015bf8:	30801126 	beq	r6,r2,4015c40 <_realloc_r+0x4c8>
 4015bfc:	90800404 	addi	r2,r18,16
 4015c00:	a8c00404 	addi	r3,r21,16
 4015c04:	003f1906 	br	401586c <__alt_mem_onchip_memory2_0+0xfc0145ec>
 4015c08:	90ffff17 	ldw	r3,-4(r18)
 4015c0c:	00bfff04 	movi	r2,-4
 4015c10:	a825883a 	mov	r18,r21
 4015c14:	1884703a 	and	r2,r3,r2
 4015c18:	80a1883a 	add	r16,r16,r2
 4015c1c:	003f2406 	br	40158b0 <__alt_mem_onchip_memory2_0+0xfc014630>
 4015c20:	a8800217 	ldw	r2,8(r21)
 4015c24:	b0800415 	stw	r2,16(r22)
 4015c28:	a8800317 	ldw	r2,12(r21)
 4015c2c:	b0800515 	stw	r2,20(r22)
 4015c30:	31000a26 	beq	r6,r4,4015c5c <_realloc_r+0x4e4>
 4015c34:	b0800604 	addi	r2,r22,24
 4015c38:	ad400404 	addi	r21,r21,16
 4015c3c:	003fa906 	br	4015ae4 <__alt_mem_onchip_memory2_0+0xfc014864>
 4015c40:	a9000417 	ldw	r4,16(r21)
 4015c44:	90800604 	addi	r2,r18,24
 4015c48:	a8c00604 	addi	r3,r21,24
 4015c4c:	91000415 	stw	r4,16(r18)
 4015c50:	a9000517 	ldw	r4,20(r21)
 4015c54:	91000515 	stw	r4,20(r18)
 4015c58:	003f0406 	br	401586c <__alt_mem_onchip_memory2_0+0xfc0145ec>
 4015c5c:	a8c00417 	ldw	r3,16(r21)
 4015c60:	ad400604 	addi	r21,r21,24
 4015c64:	b0800804 	addi	r2,r22,32
 4015c68:	b0c00615 	stw	r3,24(r22)
 4015c6c:	a8ffff17 	ldw	r3,-4(r21)
 4015c70:	b0c00715 	stw	r3,28(r22)
 4015c74:	003f9b06 	br	4015ae4 <__alt_mem_onchip_memory2_0+0xfc014864>
 4015c78:	9005883a 	mov	r2,r18
 4015c7c:	003fc706 	br	4015b9c <__alt_mem_onchip_memory2_0+0xfc01491c>
 4015c80:	a80b883a 	mov	r5,r21
 4015c84:	9009883a 	mov	r4,r18
 4015c88:	40143fc0 	call	40143fc <memmove>
 4015c8c:	003fc906 	br	4015bb4 <__alt_mem_onchip_memory2_0+0xfc014934>
 4015c90:	a8800217 	ldw	r2,8(r21)
 4015c94:	b0800415 	stw	r2,16(r22)
 4015c98:	a8800317 	ldw	r2,12(r21)
 4015c9c:	b0800515 	stw	r2,20(r22)
 4015ca0:	31000726 	beq	r6,r4,4015cc0 <_realloc_r+0x548>
 4015ca4:	b0800604 	addi	r2,r22,24
 4015ca8:	ad400404 	addi	r21,r21,16
 4015cac:	003fbb06 	br	4015b9c <__alt_mem_onchip_memory2_0+0xfc01491c>
 4015cb0:	a009883a 	mov	r4,r20
 4015cb4:	401ba500 	call	401ba50 <__malloc_unlock>
 4015cb8:	0005883a 	mov	r2,zero
 4015cbc:	003f0a06 	br	40158e8 <__alt_mem_onchip_memory2_0+0xfc014668>
 4015cc0:	a8c00417 	ldw	r3,16(r21)
 4015cc4:	ad400604 	addi	r21,r21,24
 4015cc8:	b0800804 	addi	r2,r22,32
 4015ccc:	b0c00615 	stw	r3,24(r22)
 4015cd0:	a8ffff17 	ldw	r3,-4(r21)
 4015cd4:	b0c00715 	stw	r3,28(r22)
 4015cd8:	003fb006 	br	4015b9c <__alt_mem_onchip_memory2_0+0xfc01491c>

04015cdc <__fpclassifyd>:
 4015cdc:	00a00034 	movhi	r2,32768
 4015ce0:	10bfffc4 	addi	r2,r2,-1
 4015ce4:	2884703a 	and	r2,r5,r2
 4015ce8:	10000726 	beq	r2,zero,4015d08 <__fpclassifyd+0x2c>
 4015cec:	00fffc34 	movhi	r3,65520
 4015cf0:	019ff834 	movhi	r6,32736
 4015cf4:	28c7883a 	add	r3,r5,r3
 4015cf8:	31bfffc4 	addi	r6,r6,-1
 4015cfc:	30c00536 	bltu	r6,r3,4015d14 <__fpclassifyd+0x38>
 4015d00:	00800104 	movi	r2,4
 4015d04:	f800283a 	ret
 4015d08:	2000021e 	bne	r4,zero,4015d14 <__fpclassifyd+0x38>
 4015d0c:	00800084 	movi	r2,2
 4015d10:	f800283a 	ret
 4015d14:	00dffc34 	movhi	r3,32752
 4015d18:	019ff834 	movhi	r6,32736
 4015d1c:	28cb883a 	add	r5,r5,r3
 4015d20:	31bfffc4 	addi	r6,r6,-1
 4015d24:	317ff62e 	bgeu	r6,r5,4015d00 <__alt_mem_onchip_memory2_0+0xfc014a80>
 4015d28:	01400434 	movhi	r5,16
 4015d2c:	297fffc4 	addi	r5,r5,-1
 4015d30:	28800236 	bltu	r5,r2,4015d3c <__fpclassifyd+0x60>
 4015d34:	008000c4 	movi	r2,3
 4015d38:	f800283a 	ret
 4015d3c:	10c00226 	beq	r2,r3,4015d48 <__fpclassifyd+0x6c>
 4015d40:	0005883a 	mov	r2,zero
 4015d44:	f800283a 	ret
 4015d48:	2005003a 	cmpeq	r2,r4,zero
 4015d4c:	f800283a 	ret

04015d50 <__sread>:
 4015d50:	defffe04 	addi	sp,sp,-8
 4015d54:	dc000015 	stw	r16,0(sp)
 4015d58:	2821883a 	mov	r16,r5
 4015d5c:	2940038f 	ldh	r5,14(r5)
 4015d60:	dfc00115 	stw	ra,4(sp)
 4015d64:	4017c880 	call	4017c88 <_read_r>
 4015d68:	10000716 	blt	r2,zero,4015d88 <__sread+0x38>
 4015d6c:	80c01417 	ldw	r3,80(r16)
 4015d70:	1887883a 	add	r3,r3,r2
 4015d74:	80c01415 	stw	r3,80(r16)
 4015d78:	dfc00117 	ldw	ra,4(sp)
 4015d7c:	dc000017 	ldw	r16,0(sp)
 4015d80:	dec00204 	addi	sp,sp,8
 4015d84:	f800283a 	ret
 4015d88:	80c0030b 	ldhu	r3,12(r16)
 4015d8c:	18fbffcc 	andi	r3,r3,61439
 4015d90:	80c0030d 	sth	r3,12(r16)
 4015d94:	dfc00117 	ldw	ra,4(sp)
 4015d98:	dc000017 	ldw	r16,0(sp)
 4015d9c:	dec00204 	addi	sp,sp,8
 4015da0:	f800283a 	ret

04015da4 <__seofread>:
 4015da4:	0005883a 	mov	r2,zero
 4015da8:	f800283a 	ret

04015dac <__swrite>:
 4015dac:	2880030b 	ldhu	r2,12(r5)
 4015db0:	defffb04 	addi	sp,sp,-20
 4015db4:	dcc00315 	stw	r19,12(sp)
 4015db8:	dc800215 	stw	r18,8(sp)
 4015dbc:	dc400115 	stw	r17,4(sp)
 4015dc0:	dc000015 	stw	r16,0(sp)
 4015dc4:	dfc00415 	stw	ra,16(sp)
 4015dc8:	10c0400c 	andi	r3,r2,256
 4015dcc:	2821883a 	mov	r16,r5
 4015dd0:	2023883a 	mov	r17,r4
 4015dd4:	3025883a 	mov	r18,r6
 4015dd8:	3827883a 	mov	r19,r7
 4015ddc:	18000526 	beq	r3,zero,4015df4 <__swrite+0x48>
 4015de0:	2940038f 	ldh	r5,14(r5)
 4015de4:	01c00084 	movi	r7,2
 4015de8:	000d883a 	mov	r6,zero
 4015dec:	4017c280 	call	4017c28 <_lseek_r>
 4015df0:	8080030b 	ldhu	r2,12(r16)
 4015df4:	8140038f 	ldh	r5,14(r16)
 4015df8:	10bbffcc 	andi	r2,r2,61439
 4015dfc:	980f883a 	mov	r7,r19
 4015e00:	900d883a 	mov	r6,r18
 4015e04:	8809883a 	mov	r4,r17
 4015e08:	8080030d 	sth	r2,12(r16)
 4015e0c:	dfc00417 	ldw	ra,16(sp)
 4015e10:	dcc00317 	ldw	r19,12(sp)
 4015e14:	dc800217 	ldw	r18,8(sp)
 4015e18:	dc400117 	ldw	r17,4(sp)
 4015e1c:	dc000017 	ldw	r16,0(sp)
 4015e20:	dec00504 	addi	sp,sp,20
 4015e24:	40176dc1 	jmpi	40176dc <_write_r>

04015e28 <__sseek>:
 4015e28:	defffe04 	addi	sp,sp,-8
 4015e2c:	dc000015 	stw	r16,0(sp)
 4015e30:	2821883a 	mov	r16,r5
 4015e34:	2940038f 	ldh	r5,14(r5)
 4015e38:	dfc00115 	stw	ra,4(sp)
 4015e3c:	4017c280 	call	4017c28 <_lseek_r>
 4015e40:	00ffffc4 	movi	r3,-1
 4015e44:	10c00826 	beq	r2,r3,4015e68 <__sseek+0x40>
 4015e48:	80c0030b 	ldhu	r3,12(r16)
 4015e4c:	80801415 	stw	r2,80(r16)
 4015e50:	18c40014 	ori	r3,r3,4096
 4015e54:	80c0030d 	sth	r3,12(r16)
 4015e58:	dfc00117 	ldw	ra,4(sp)
 4015e5c:	dc000017 	ldw	r16,0(sp)
 4015e60:	dec00204 	addi	sp,sp,8
 4015e64:	f800283a 	ret
 4015e68:	80c0030b 	ldhu	r3,12(r16)
 4015e6c:	18fbffcc 	andi	r3,r3,61439
 4015e70:	80c0030d 	sth	r3,12(r16)
 4015e74:	dfc00117 	ldw	ra,4(sp)
 4015e78:	dc000017 	ldw	r16,0(sp)
 4015e7c:	dec00204 	addi	sp,sp,8
 4015e80:	f800283a 	ret

04015e84 <__sclose>:
 4015e84:	2940038f 	ldh	r5,14(r5)
 4015e88:	401773c1 	jmpi	401773c <_close_r>

04015e8c <__sprint_r.part.0>:
 4015e8c:	28801917 	ldw	r2,100(r5)
 4015e90:	defff604 	addi	sp,sp,-40
 4015e94:	dd400515 	stw	r21,20(sp)
 4015e98:	dfc00915 	stw	ra,36(sp)
 4015e9c:	df000815 	stw	fp,32(sp)
 4015ea0:	ddc00715 	stw	r23,28(sp)
 4015ea4:	dd800615 	stw	r22,24(sp)
 4015ea8:	dd000415 	stw	r20,16(sp)
 4015eac:	dcc00315 	stw	r19,12(sp)
 4015eb0:	dc800215 	stw	r18,8(sp)
 4015eb4:	dc400115 	stw	r17,4(sp)
 4015eb8:	dc000015 	stw	r16,0(sp)
 4015ebc:	1088000c 	andi	r2,r2,8192
 4015ec0:	302b883a 	mov	r21,r6
 4015ec4:	10002e26 	beq	r2,zero,4015f80 <__sprint_r.part.0+0xf4>
 4015ec8:	30800217 	ldw	r2,8(r6)
 4015ecc:	35800017 	ldw	r22,0(r6)
 4015ed0:	10002926 	beq	r2,zero,4015f78 <__sprint_r.part.0+0xec>
 4015ed4:	2827883a 	mov	r19,r5
 4015ed8:	2029883a 	mov	r20,r4
 4015edc:	b5c00104 	addi	r23,r22,4
 4015ee0:	04bfffc4 	movi	r18,-1
 4015ee4:	bc400017 	ldw	r17,0(r23)
 4015ee8:	b4000017 	ldw	r16,0(r22)
 4015eec:	0039883a 	mov	fp,zero
 4015ef0:	8822d0ba 	srli	r17,r17,2
 4015ef4:	8800031e 	bne	r17,zero,4015f04 <__sprint_r.part.0+0x78>
 4015ef8:	00001806 	br	4015f5c <__sprint_r.part.0+0xd0>
 4015efc:	84000104 	addi	r16,r16,4
 4015f00:	8f001526 	beq	r17,fp,4015f58 <__sprint_r.part.0+0xcc>
 4015f04:	81400017 	ldw	r5,0(r16)
 4015f08:	980d883a 	mov	r6,r19
 4015f0c:	a009883a 	mov	r4,r20
 4015f10:	4017ad40 	call	4017ad4 <_fputwc_r>
 4015f14:	e7000044 	addi	fp,fp,1
 4015f18:	14bff81e 	bne	r2,r18,4015efc <__alt_mem_onchip_memory2_0+0xfc014c7c>
 4015f1c:	9005883a 	mov	r2,r18
 4015f20:	a8000215 	stw	zero,8(r21)
 4015f24:	a8000115 	stw	zero,4(r21)
 4015f28:	dfc00917 	ldw	ra,36(sp)
 4015f2c:	df000817 	ldw	fp,32(sp)
 4015f30:	ddc00717 	ldw	r23,28(sp)
 4015f34:	dd800617 	ldw	r22,24(sp)
 4015f38:	dd400517 	ldw	r21,20(sp)
 4015f3c:	dd000417 	ldw	r20,16(sp)
 4015f40:	dcc00317 	ldw	r19,12(sp)
 4015f44:	dc800217 	ldw	r18,8(sp)
 4015f48:	dc400117 	ldw	r17,4(sp)
 4015f4c:	dc000017 	ldw	r16,0(sp)
 4015f50:	dec00a04 	addi	sp,sp,40
 4015f54:	f800283a 	ret
 4015f58:	a8800217 	ldw	r2,8(r21)
 4015f5c:	8c63883a 	add	r17,r17,r17
 4015f60:	8c63883a 	add	r17,r17,r17
 4015f64:	1445c83a 	sub	r2,r2,r17
 4015f68:	a8800215 	stw	r2,8(r21)
 4015f6c:	b5800204 	addi	r22,r22,8
 4015f70:	bdc00204 	addi	r23,r23,8
 4015f74:	103fdb1e 	bne	r2,zero,4015ee4 <__alt_mem_onchip_memory2_0+0xfc014c64>
 4015f78:	0005883a 	mov	r2,zero
 4015f7c:	003fe806 	br	4015f20 <__alt_mem_onchip_memory2_0+0xfc014ca0>
 4015f80:	4013a300 	call	4013a30 <__sfvwrite_r>
 4015f84:	003fe606 	br	4015f20 <__alt_mem_onchip_memory2_0+0xfc014ca0>

04015f88 <__sprint_r>:
 4015f88:	30c00217 	ldw	r3,8(r6)
 4015f8c:	18000126 	beq	r3,zero,4015f94 <__sprint_r+0xc>
 4015f90:	4015e8c1 	jmpi	4015e8c <__sprint_r.part.0>
 4015f94:	30000115 	stw	zero,4(r6)
 4015f98:	0005883a 	mov	r2,zero
 4015f9c:	f800283a 	ret

04015fa0 <___vfiprintf_internal_r>:
 4015fa0:	deffca04 	addi	sp,sp,-216
 4015fa4:	dd403115 	stw	r21,196(sp)
 4015fa8:	dfc03515 	stw	ra,212(sp)
 4015fac:	df003415 	stw	fp,208(sp)
 4015fb0:	ddc03315 	stw	r23,204(sp)
 4015fb4:	dd803215 	stw	r22,200(sp)
 4015fb8:	dd003015 	stw	r20,192(sp)
 4015fbc:	dcc02f15 	stw	r19,188(sp)
 4015fc0:	dc802e15 	stw	r18,184(sp)
 4015fc4:	dc402d15 	stw	r17,180(sp)
 4015fc8:	dc002c15 	stw	r16,176(sp)
 4015fcc:	d9002115 	stw	r4,132(sp)
 4015fd0:	d9402015 	stw	r5,128(sp)
 4015fd4:	d9c02215 	stw	r7,136(sp)
 4015fd8:	302b883a 	mov	r21,r6
 4015fdc:	20000226 	beq	r4,zero,4015fe8 <___vfiprintf_internal_r+0x48>
 4015fe0:	20800e17 	ldw	r2,56(r4)
 4015fe4:	1000cf26 	beq	r2,zero,4016324 <___vfiprintf_internal_r+0x384>
 4015fe8:	d8c02017 	ldw	r3,128(sp)
 4015fec:	1880030b 	ldhu	r2,12(r3)
 4015ff0:	10c8000c 	andi	r3,r2,8192
 4015ff4:	1800071e 	bne	r3,zero,4016014 <___vfiprintf_internal_r+0x74>
 4015ff8:	d9402017 	ldw	r5,128(sp)
 4015ffc:	00f7ffc4 	movi	r3,-8193
 4016000:	10880014 	ori	r2,r2,8192
 4016004:	29001917 	ldw	r4,100(r5)
 4016008:	2880030d 	sth	r2,12(r5)
 401600c:	20c6703a 	and	r3,r4,r3
 4016010:	28c01915 	stw	r3,100(r5)
 4016014:	10c0020c 	andi	r3,r2,8
 4016018:	1800a526 	beq	r3,zero,40162b0 <___vfiprintf_internal_r+0x310>
 401601c:	d9002017 	ldw	r4,128(sp)
 4016020:	20c00417 	ldw	r3,16(r4)
 4016024:	1800a226 	beq	r3,zero,40162b0 <___vfiprintf_internal_r+0x310>
 4016028:	1080068c 	andi	r2,r2,26
 401602c:	00c00284 	movi	r3,10
 4016030:	10c0a826 	beq	r2,r3,40162d4 <___vfiprintf_internal_r+0x334>
 4016034:	d9001a04 	addi	r4,sp,104
 4016038:	d94019c4 	addi	r5,sp,103
 401603c:	048100b4 	movhi	r18,1026
 4016040:	2145c83a 	sub	r2,r4,r5
 4016044:	949c2104 	addi	r18,r18,28804
 4016048:	d9001e15 	stw	r4,120(sp)
 401604c:	d9401f15 	stw	r5,124(sp)
 4016050:	dec01a15 	stw	sp,104(sp)
 4016054:	d8001c15 	stw	zero,112(sp)
 4016058:	d8001b15 	stw	zero,108(sp)
 401605c:	d811883a 	mov	r8,sp
 4016060:	d8002615 	stw	zero,152(sp)
 4016064:	d8002415 	stw	zero,144(sp)
 4016068:	d8802815 	stw	r2,160(sp)
 401606c:	a82d883a 	mov	r22,r21
 4016070:	b0800007 	ldb	r2,0(r22)
 4016074:	10040d26 	beq	r2,zero,40170ac <___vfiprintf_internal_r+0x110c>
 4016078:	00c00944 	movi	r3,37
 401607c:	b029883a 	mov	r20,r22
 4016080:	10c0021e 	bne	r2,r3,401608c <___vfiprintf_internal_r+0xec>
 4016084:	00001606 	br	40160e0 <___vfiprintf_internal_r+0x140>
 4016088:	10c00326 	beq	r2,r3,4016098 <___vfiprintf_internal_r+0xf8>
 401608c:	a5000044 	addi	r20,r20,1
 4016090:	a0800007 	ldb	r2,0(r20)
 4016094:	103ffc1e 	bne	r2,zero,4016088 <__alt_mem_onchip_memory2_0+0xfc014e08>
 4016098:	a5a1c83a 	sub	r16,r20,r22
 401609c:	80001026 	beq	r16,zero,40160e0 <___vfiprintf_internal_r+0x140>
 40160a0:	d8c01c17 	ldw	r3,112(sp)
 40160a4:	d8801b17 	ldw	r2,108(sp)
 40160a8:	45800015 	stw	r22,0(r8)
 40160ac:	80c7883a 	add	r3,r16,r3
 40160b0:	10800044 	addi	r2,r2,1
 40160b4:	44000115 	stw	r16,4(r8)
 40160b8:	d8c01c15 	stw	r3,112(sp)
 40160bc:	d8801b15 	stw	r2,108(sp)
 40160c0:	010001c4 	movi	r4,7
 40160c4:	2080750e 	bge	r4,r2,401629c <___vfiprintf_internal_r+0x2fc>
 40160c8:	1803951e 	bne	r3,zero,4016f20 <___vfiprintf_internal_r+0xf80>
 40160cc:	d8c02417 	ldw	r3,144(sp)
 40160d0:	d8001b15 	stw	zero,108(sp)
 40160d4:	d811883a 	mov	r8,sp
 40160d8:	1c07883a 	add	r3,r3,r16
 40160dc:	d8c02415 	stw	r3,144(sp)
 40160e0:	a0800007 	ldb	r2,0(r20)
 40160e4:	1002e026 	beq	r2,zero,4016c68 <___vfiprintf_internal_r+0xcc8>
 40160e8:	a5800044 	addi	r22,r20,1
 40160ec:	a0c00047 	ldb	r3,1(r20)
 40160f0:	d8001d85 	stb	zero,118(sp)
 40160f4:	0027883a 	mov	r19,zero
 40160f8:	d8002305 	stb	zero,140(sp)
 40160fc:	043fffc4 	movi	r16,-1
 4016100:	d8002515 	stw	zero,148(sp)
 4016104:	0023883a 	mov	r17,zero
 4016108:	05001604 	movi	r20,88
 401610c:	05400244 	movi	r21,9
 4016110:	402f883a 	mov	r23,r8
 4016114:	b5800044 	addi	r22,r22,1
 4016118:	18bff804 	addi	r2,r3,-32
 401611c:	a0827736 	bltu	r20,r2,4016afc <___vfiprintf_internal_r+0xb5c>
 4016120:	100490ba 	slli	r2,r2,2
 4016124:	01010074 	movhi	r4,1025
 4016128:	21184e04 	addi	r4,r4,24888
 401612c:	1105883a 	add	r2,r2,r4
 4016130:	10800017 	ldw	r2,0(r2)
 4016134:	1000683a 	jmp	r2
 4016138:	040167fc 	xorhi	r16,zero,1439
 401613c:	04016afc 	xorhi	r16,zero,1451
 4016140:	04016afc 	xorhi	r16,zero,1451
 4016144:	04016818 	cmpnei	r16,zero,1440
 4016148:	04016afc 	xorhi	r16,zero,1451
 401614c:	04016afc 	xorhi	r16,zero,1451
 4016150:	04016afc 	xorhi	r16,zero,1451
 4016154:	04016afc 	xorhi	r16,zero,1451
 4016158:	04016afc 	xorhi	r16,zero,1451
 401615c:	04016afc 	xorhi	r16,zero,1451
 4016160:	04016a20 	cmpeqi	r16,zero,1448
 4016164:	04016a44 	movi	r16,1449
 4016168:	04016afc 	xorhi	r16,zero,1451
 401616c:	0401633c 	xorhi	r16,zero,1420
 4016170:	04016a58 	cmpnei	r16,zero,1449
 4016174:	04016afc 	xorhi	r16,zero,1451
 4016178:	04016824 	muli	r16,zero,1440
 401617c:	04016830 	cmpltui	r16,zero,1440
 4016180:	04016830 	cmpltui	r16,zero,1440
 4016184:	04016830 	cmpltui	r16,zero,1440
 4016188:	04016830 	cmpltui	r16,zero,1440
 401618c:	04016830 	cmpltui	r16,zero,1440
 4016190:	04016830 	cmpltui	r16,zero,1440
 4016194:	04016830 	cmpltui	r16,zero,1440
 4016198:	04016830 	cmpltui	r16,zero,1440
 401619c:	04016830 	cmpltui	r16,zero,1440
 40161a0:	04016afc 	xorhi	r16,zero,1451
 40161a4:	04016afc 	xorhi	r16,zero,1451
 40161a8:	04016afc 	xorhi	r16,zero,1451
 40161ac:	04016afc 	xorhi	r16,zero,1451
 40161b0:	04016afc 	xorhi	r16,zero,1451
 40161b4:	04016afc 	xorhi	r16,zero,1451
 40161b8:	04016afc 	xorhi	r16,zero,1451
 40161bc:	04016afc 	xorhi	r16,zero,1451
 40161c0:	04016afc 	xorhi	r16,zero,1451
 40161c4:	04016afc 	xorhi	r16,zero,1451
 40161c8:	04016870 	cmpltui	r16,zero,1441
 40161cc:	04016afc 	xorhi	r16,zero,1451
 40161d0:	04016afc 	xorhi	r16,zero,1451
 40161d4:	04016afc 	xorhi	r16,zero,1451
 40161d8:	04016afc 	xorhi	r16,zero,1451
 40161dc:	04016afc 	xorhi	r16,zero,1451
 40161e0:	04016afc 	xorhi	r16,zero,1451
 40161e4:	04016afc 	xorhi	r16,zero,1451
 40161e8:	04016afc 	xorhi	r16,zero,1451
 40161ec:	04016afc 	xorhi	r16,zero,1451
 40161f0:	04016afc 	xorhi	r16,zero,1451
 40161f4:	040168ac 	andhi	r16,zero,1442
 40161f8:	04016afc 	xorhi	r16,zero,1451
 40161fc:	04016afc 	xorhi	r16,zero,1451
 4016200:	04016afc 	xorhi	r16,zero,1451
 4016204:	04016afc 	xorhi	r16,zero,1451
 4016208:	04016afc 	xorhi	r16,zero,1451
 401620c:	04016908 	cmpgei	r16,zero,1444
 4016210:	04016afc 	xorhi	r16,zero,1451
 4016214:	04016afc 	xorhi	r16,zero,1451
 4016218:	0401697c 	xorhi	r16,zero,1445
 401621c:	04016afc 	xorhi	r16,zero,1451
 4016220:	04016afc 	xorhi	r16,zero,1451
 4016224:	04016afc 	xorhi	r16,zero,1451
 4016228:	04016afc 	xorhi	r16,zero,1451
 401622c:	04016afc 	xorhi	r16,zero,1451
 4016230:	04016afc 	xorhi	r16,zero,1451
 4016234:	04016afc 	xorhi	r16,zero,1451
 4016238:	04016afc 	xorhi	r16,zero,1451
 401623c:	04016afc 	xorhi	r16,zero,1451
 4016240:	04016afc 	xorhi	r16,zero,1451
 4016244:	04016724 	muli	r16,zero,1436
 4016248:	04016754 	movui	r16,1437
 401624c:	04016afc 	xorhi	r16,zero,1451
 4016250:	04016afc 	xorhi	r16,zero,1451
 4016254:	04016afc 	xorhi	r16,zero,1451
 4016258:	04016aa4 	muli	r16,zero,1450
 401625c:	04016754 	movui	r16,1437
 4016260:	04016afc 	xorhi	r16,zero,1451
 4016264:	04016afc 	xorhi	r16,zero,1451
 4016268:	040165fc 	xorhi	r16,zero,1431
 401626c:	04016afc 	xorhi	r16,zero,1451
 4016270:	04016610 	cmplti	r16,zero,1432
 4016274:	04016648 	cmpgei	r16,zero,1433
 4016278:	04016348 	cmpgei	r16,zero,1421
 401627c:	040165f0 	cmpltui	r16,zero,1431
 4016280:	04016afc 	xorhi	r16,zero,1451
 4016284:	040169bc 	xorhi	r16,zero,1446
 4016288:	04016afc 	xorhi	r16,zero,1451
 401628c:	04016a08 	cmpgei	r16,zero,1448
 4016290:	04016afc 	xorhi	r16,zero,1451
 4016294:	04016afc 	xorhi	r16,zero,1451
 4016298:	040166cc 	andi	r16,zero,1435
 401629c:	42000204 	addi	r8,r8,8
 40162a0:	d8c02417 	ldw	r3,144(sp)
 40162a4:	1c07883a 	add	r3,r3,r16
 40162a8:	d8c02415 	stw	r3,144(sp)
 40162ac:	003f8c06 	br	40160e0 <__alt_mem_onchip_memory2_0+0xfc014e60>
 40162b0:	d9402017 	ldw	r5,128(sp)
 40162b4:	d9002117 	ldw	r4,132(sp)
 40162b8:	40115a00 	call	40115a0 <__swsetup_r>
 40162bc:	1003c11e 	bne	r2,zero,40171c4 <___vfiprintf_internal_r+0x1224>
 40162c0:	d9402017 	ldw	r5,128(sp)
 40162c4:	00c00284 	movi	r3,10
 40162c8:	2880030b 	ldhu	r2,12(r5)
 40162cc:	1080068c 	andi	r2,r2,26
 40162d0:	10ff581e 	bne	r2,r3,4016034 <__alt_mem_onchip_memory2_0+0xfc014db4>
 40162d4:	d8c02017 	ldw	r3,128(sp)
 40162d8:	1880038f 	ldh	r2,14(r3)
 40162dc:	103f5516 	blt	r2,zero,4016034 <__alt_mem_onchip_memory2_0+0xfc014db4>
 40162e0:	d9c02217 	ldw	r7,136(sp)
 40162e4:	d9002117 	ldw	r4,132(sp)
 40162e8:	a80d883a 	mov	r6,r21
 40162ec:	180b883a 	mov	r5,r3
 40162f0:	40174c80 	call	40174c8 <__sbprintf>
 40162f4:	dfc03517 	ldw	ra,212(sp)
 40162f8:	df003417 	ldw	fp,208(sp)
 40162fc:	ddc03317 	ldw	r23,204(sp)
 4016300:	dd803217 	ldw	r22,200(sp)
 4016304:	dd403117 	ldw	r21,196(sp)
 4016308:	dd003017 	ldw	r20,192(sp)
 401630c:	dcc02f17 	ldw	r19,188(sp)
 4016310:	dc802e17 	ldw	r18,184(sp)
 4016314:	dc402d17 	ldw	r17,180(sp)
 4016318:	dc002c17 	ldw	r16,176(sp)
 401631c:	dec03604 	addi	sp,sp,216
 4016320:	f800283a 	ret
 4016324:	40135ac0 	call	40135ac <__sinit>
 4016328:	003f2f06 	br	4015fe8 <__alt_mem_onchip_memory2_0+0xfc014d68>
 401632c:	d8c02517 	ldw	r3,148(sp)
 4016330:	d8802215 	stw	r2,136(sp)
 4016334:	00c7c83a 	sub	r3,zero,r3
 4016338:	d8c02515 	stw	r3,148(sp)
 401633c:	8c400114 	ori	r17,r17,4
 4016340:	b0c00007 	ldb	r3,0(r22)
 4016344:	003f7306 	br	4016114 <__alt_mem_onchip_memory2_0+0xfc014e94>
 4016348:	00800c04 	movi	r2,48
 401634c:	d9402217 	ldw	r5,136(sp)
 4016350:	d8801d05 	stb	r2,116(sp)
 4016354:	00801e04 	movi	r2,120
 4016358:	d8801d45 	stb	r2,117(sp)
 401635c:	d8001d85 	stb	zero,118(sp)
 4016360:	b811883a 	mov	r8,r23
 4016364:	28c00104 	addi	r3,r5,4
 4016368:	2cc00017 	ldw	r19,0(r5)
 401636c:	0029883a 	mov	r20,zero
 4016370:	88800094 	ori	r2,r17,2
 4016374:	80032516 	blt	r16,zero,401700c <___vfiprintf_internal_r+0x106c>
 4016378:	00bfdfc4 	movi	r2,-129
 401637c:	88a2703a 	and	r17,r17,r2
 4016380:	d8c02215 	stw	r3,136(sp)
 4016384:	8c400094 	ori	r17,r17,2
 4016388:	98032a1e 	bne	r19,zero,4017034 <___vfiprintf_internal_r+0x1094>
 401638c:	008100b4 	movhi	r2,1026
 4016390:	109bc104 	addi	r2,r2,28420
 4016394:	d8802615 	stw	r2,152(sp)
 4016398:	002b883a 	mov	r21,zero
 401639c:	8001741e 	bne	r16,zero,4016970 <___vfiprintf_internal_r+0x9d0>
 40163a0:	0021883a 	mov	r16,zero
 40163a4:	0029883a 	mov	r20,zero
 40163a8:	ddc01a04 	addi	r23,sp,104
 40163ac:	8027883a 	mov	r19,r16
 40163b0:	8500010e 	bge	r16,r20,40163b8 <___vfiprintf_internal_r+0x418>
 40163b4:	a027883a 	mov	r19,r20
 40163b8:	ad403fcc 	andi	r21,r21,255
 40163bc:	ad40201c 	xori	r21,r21,128
 40163c0:	ad7fe004 	addi	r21,r21,-128
 40163c4:	a8000126 	beq	r21,zero,40163cc <___vfiprintf_internal_r+0x42c>
 40163c8:	9cc00044 	addi	r19,r19,1
 40163cc:	89c0008c 	andi	r7,r17,2
 40163d0:	38000126 	beq	r7,zero,40163d8 <___vfiprintf_internal_r+0x438>
 40163d4:	9cc00084 	addi	r19,r19,2
 40163d8:	88c0210c 	andi	r3,r17,132
 40163dc:	1801dd1e 	bne	r3,zero,4016b54 <___vfiprintf_internal_r+0xbb4>
 40163e0:	d9402517 	ldw	r5,148(sp)
 40163e4:	2cebc83a 	sub	r21,r5,r19
 40163e8:	0541da0e 	bge	zero,r21,4016b54 <___vfiprintf_internal_r+0xbb4>
 40163ec:	07000404 	movi	fp,16
 40163f0:	d8801c17 	ldw	r2,112(sp)
 40163f4:	e543be0e 	bge	fp,r21,40172f0 <___vfiprintf_internal_r+0x1350>
 40163f8:	014100b4 	movhi	r5,1026
 40163fc:	295c2504 	addi	r5,r5,28820
 4016400:	dc002715 	stw	r16,156(sp)
 4016404:	d9801b17 	ldw	r6,108(sp)
 4016408:	a821883a 	mov	r16,r21
 401640c:	d9402315 	stw	r5,140(sp)
 4016410:	028001c4 	movi	r10,7
 4016414:	d9c02915 	stw	r7,164(sp)
 4016418:	182b883a 	mov	r21,r3
 401641c:	00000506 	br	4016434 <___vfiprintf_internal_r+0x494>
 4016420:	31000084 	addi	r4,r6,2
 4016424:	42000204 	addi	r8,r8,8
 4016428:	180d883a 	mov	r6,r3
 401642c:	843ffc04 	addi	r16,r16,-16
 4016430:	e4000f0e 	bge	fp,r16,4016470 <___vfiprintf_internal_r+0x4d0>
 4016434:	010100b4 	movhi	r4,1026
 4016438:	10800404 	addi	r2,r2,16
 401643c:	30c00044 	addi	r3,r6,1
 4016440:	211c2504 	addi	r4,r4,28820
 4016444:	41000015 	stw	r4,0(r8)
 4016448:	47000115 	stw	fp,4(r8)
 401644c:	d8801c15 	stw	r2,112(sp)
 4016450:	d8c01b15 	stw	r3,108(sp)
 4016454:	50fff20e 	bge	r10,r3,4016420 <__alt_mem_onchip_memory2_0+0xfc0151a0>
 4016458:	1001b21e 	bne	r2,zero,4016b24 <___vfiprintf_internal_r+0xb84>
 401645c:	843ffc04 	addi	r16,r16,-16
 4016460:	000d883a 	mov	r6,zero
 4016464:	01000044 	movi	r4,1
 4016468:	d811883a 	mov	r8,sp
 401646c:	e43ff116 	blt	fp,r16,4016434 <__alt_mem_onchip_memory2_0+0xfc0151b4>
 4016470:	a807883a 	mov	r3,r21
 4016474:	d9c02917 	ldw	r7,164(sp)
 4016478:	802b883a 	mov	r21,r16
 401647c:	dc002717 	ldw	r16,156(sp)
 4016480:	d9402317 	ldw	r5,140(sp)
 4016484:	a885883a 	add	r2,r21,r2
 4016488:	45400115 	stw	r21,4(r8)
 401648c:	41400015 	stw	r5,0(r8)
 4016490:	d8801c15 	stw	r2,112(sp)
 4016494:	d9001b15 	stw	r4,108(sp)
 4016498:	014001c4 	movi	r5,7
 401649c:	29026216 	blt	r5,r4,4016e28 <___vfiprintf_internal_r+0xe88>
 40164a0:	d9801d87 	ldb	r6,118(sp)
 40164a4:	42000204 	addi	r8,r8,8
 40164a8:	21400044 	addi	r5,r4,1
 40164ac:	3001ae1e 	bne	r6,zero,4016b68 <___vfiprintf_internal_r+0xbc8>
 40164b0:	3801bb26 	beq	r7,zero,4016ba0 <___vfiprintf_internal_r+0xc00>
 40164b4:	d9001d04 	addi	r4,sp,116
 40164b8:	10800084 	addi	r2,r2,2
 40164bc:	41000015 	stw	r4,0(r8)
 40164c0:	01000084 	movi	r4,2
 40164c4:	41000115 	stw	r4,4(r8)
 40164c8:	d8801c15 	stw	r2,112(sp)
 40164cc:	d9401b15 	stw	r5,108(sp)
 40164d0:	010001c4 	movi	r4,7
 40164d4:	2142680e 	bge	r4,r5,4016e78 <___vfiprintf_internal_r+0xed8>
 40164d8:	1002b11e 	bne	r2,zero,4016fa0 <___vfiprintf_internal_r+0x1000>
 40164dc:	01802004 	movi	r6,128
 40164e0:	01400044 	movi	r5,1
 40164e4:	0009883a 	mov	r4,zero
 40164e8:	d811883a 	mov	r8,sp
 40164ec:	1981ae1e 	bne	r3,r6,4016ba8 <___vfiprintf_internal_r+0xc08>
 40164f0:	d8c02517 	ldw	r3,148(sp)
 40164f4:	1cf9c83a 	sub	fp,r3,r19
 40164f8:	0701ab0e 	bge	zero,fp,4016ba8 <___vfiprintf_internal_r+0xc08>
 40164fc:	05400404 	movi	r21,16
 4016500:	af03a90e 	bge	r21,fp,40173a8 <___vfiprintf_internal_r+0x1408>
 4016504:	014100b4 	movhi	r5,1026
 4016508:	295c2104 	addi	r5,r5,28804
 401650c:	d9402315 	stw	r5,140(sp)
 4016510:	01c001c4 	movi	r7,7
 4016514:	00000506 	br	401652c <___vfiprintf_internal_r+0x58c>
 4016518:	21800084 	addi	r6,r4,2
 401651c:	42000204 	addi	r8,r8,8
 4016520:	1809883a 	mov	r4,r3
 4016524:	e73ffc04 	addi	fp,fp,-16
 4016528:	af000d0e 	bge	r21,fp,4016560 <___vfiprintf_internal_r+0x5c0>
 401652c:	10800404 	addi	r2,r2,16
 4016530:	20c00044 	addi	r3,r4,1
 4016534:	44800015 	stw	r18,0(r8)
 4016538:	45400115 	stw	r21,4(r8)
 401653c:	d8801c15 	stw	r2,112(sp)
 4016540:	d8c01b15 	stw	r3,108(sp)
 4016544:	38fff40e 	bge	r7,r3,4016518 <__alt_mem_onchip_memory2_0+0xfc015298>
 4016548:	10022b1e 	bne	r2,zero,4016df8 <___vfiprintf_internal_r+0xe58>
 401654c:	e73ffc04 	addi	fp,fp,-16
 4016550:	01800044 	movi	r6,1
 4016554:	0009883a 	mov	r4,zero
 4016558:	d811883a 	mov	r8,sp
 401655c:	af3ff316 	blt	r21,fp,401652c <__alt_mem_onchip_memory2_0+0xfc0152ac>
 4016560:	d8c02317 	ldw	r3,140(sp)
 4016564:	1705883a 	add	r2,r2,fp
 4016568:	47000115 	stw	fp,4(r8)
 401656c:	40c00015 	stw	r3,0(r8)
 4016570:	d8801c15 	stw	r2,112(sp)
 4016574:	d9801b15 	stw	r6,108(sp)
 4016578:	00c001c4 	movi	r3,7
 401657c:	19829416 	blt	r3,r6,4016fd0 <___vfiprintf_internal_r+0x1030>
 4016580:	8521c83a 	sub	r16,r16,r20
 4016584:	42000204 	addi	r8,r8,8
 4016588:	31400044 	addi	r5,r6,1
 401658c:	3009883a 	mov	r4,r6
 4016590:	04018716 	blt	zero,r16,4016bb0 <___vfiprintf_internal_r+0xc10>
 4016594:	a085883a 	add	r2,r20,r2
 4016598:	45c00015 	stw	r23,0(r8)
 401659c:	45000115 	stw	r20,4(r8)
 40165a0:	d8801c15 	stw	r2,112(sp)
 40165a4:	d9401b15 	stw	r5,108(sp)
 40165a8:	00c001c4 	movi	r3,7
 40165ac:	1941c20e 	bge	r3,r5,4016cb8 <___vfiprintf_internal_r+0xd18>
 40165b0:	1002531e 	bne	r2,zero,4016f00 <___vfiprintf_internal_r+0xf60>
 40165b4:	d8001b15 	stw	zero,108(sp)
 40165b8:	8c40010c 	andi	r17,r17,4
 40165bc:	88023226 	beq	r17,zero,4016e88 <___vfiprintf_internal_r+0xee8>
 40165c0:	d9002517 	ldw	r4,148(sp)
 40165c4:	24e3c83a 	sub	r17,r4,r19
 40165c8:	04432916 	blt	zero,r17,4017270 <___vfiprintf_internal_r+0x12d0>
 40165cc:	d8802517 	ldw	r2,148(sp)
 40165d0:	14c0010e 	bge	r2,r19,40165d8 <___vfiprintf_internal_r+0x638>
 40165d4:	9805883a 	mov	r2,r19
 40165d8:	d8c02417 	ldw	r3,144(sp)
 40165dc:	1887883a 	add	r3,r3,r2
 40165e0:	d8c02415 	stw	r3,144(sp)
 40165e4:	d8001b15 	stw	zero,108(sp)
 40165e8:	d811883a 	mov	r8,sp
 40165ec:	003ea006 	br	4016070 <__alt_mem_onchip_memory2_0+0xfc014df0>
 40165f0:	8c400814 	ori	r17,r17,32
 40165f4:	b0c00007 	ldb	r3,0(r22)
 40165f8:	003ec606 	br	4016114 <__alt_mem_onchip_memory2_0+0xfc014e94>
 40165fc:	b0c00007 	ldb	r3,0(r22)
 4016600:	00801b04 	movi	r2,108
 4016604:	18832026 	beq	r3,r2,4017288 <___vfiprintf_internal_r+0x12e8>
 4016608:	8c400414 	ori	r17,r17,16
 401660c:	003ec106 	br	4016114 <__alt_mem_onchip_memory2_0+0xfc014e94>
 4016610:	9cc03fcc 	andi	r19,r19,255
 4016614:	b811883a 	mov	r8,r23
 4016618:	9803981e 	bne	r19,zero,401747c <___vfiprintf_internal_r+0x14dc>
 401661c:	8880080c 	andi	r2,r17,32
 4016620:	1002be26 	beq	r2,zero,401711c <___vfiprintf_internal_r+0x117c>
 4016624:	d9002217 	ldw	r4,136(sp)
 4016628:	d9402417 	ldw	r5,144(sp)
 401662c:	20800017 	ldw	r2,0(r4)
 4016630:	2807d7fa 	srai	r3,r5,31
 4016634:	21000104 	addi	r4,r4,4
 4016638:	d9002215 	stw	r4,136(sp)
 401663c:	11400015 	stw	r5,0(r2)
 4016640:	10c00115 	stw	r3,4(r2)
 4016644:	003e8a06 	br	4016070 <__alt_mem_onchip_memory2_0+0xfc014df0>
 4016648:	9cc03fcc 	andi	r19,r19,255
 401664c:	b811883a 	mov	r8,r23
 4016650:	9803871e 	bne	r19,zero,4017470 <___vfiprintf_internal_r+0x14d0>
 4016654:	8880080c 	andi	r2,r17,32
 4016658:	10009a26 	beq	r2,zero,40168c4 <___vfiprintf_internal_r+0x924>
 401665c:	d9002217 	ldw	r4,136(sp)
 4016660:	d8001d85 	stb	zero,118(sp)
 4016664:	20800204 	addi	r2,r4,8
 4016668:	24c00017 	ldw	r19,0(r4)
 401666c:	25000117 	ldw	r20,4(r4)
 4016670:	8002a416 	blt	r16,zero,4017104 <___vfiprintf_internal_r+0x1164>
 4016674:	013fdfc4 	movi	r4,-129
 4016678:	9d06b03a 	or	r3,r19,r20
 401667c:	d8802215 	stw	r2,136(sp)
 4016680:	8922703a 	and	r17,r17,r4
 4016684:	18009b26 	beq	r3,zero,40168f4 <___vfiprintf_internal_r+0x954>
 4016688:	002b883a 	mov	r21,zero
 401668c:	ddc01a04 	addi	r23,sp,104
 4016690:	9806d0fa 	srli	r3,r19,3
 4016694:	a008977a 	slli	r4,r20,29
 4016698:	a028d0fa 	srli	r20,r20,3
 401669c:	9cc001cc 	andi	r19,r19,7
 40166a0:	98800c04 	addi	r2,r19,48
 40166a4:	bdffffc4 	addi	r23,r23,-1
 40166a8:	20e6b03a 	or	r19,r4,r3
 40166ac:	b8800005 	stb	r2,0(r23)
 40166b0:	9d06b03a 	or	r3,r19,r20
 40166b4:	183ff61e 	bne	r3,zero,4016690 <__alt_mem_onchip_memory2_0+0xfc015410>
 40166b8:	88c0004c 	andi	r3,r17,1
 40166bc:	18021f1e 	bne	r3,zero,4016f3c <___vfiprintf_internal_r+0xf9c>
 40166c0:	d9401e17 	ldw	r5,120(sp)
 40166c4:	2de9c83a 	sub	r20,r5,r23
 40166c8:	003f3806 	br	40163ac <__alt_mem_onchip_memory2_0+0xfc01512c>
 40166cc:	9cc03fcc 	andi	r19,r19,255
 40166d0:	b811883a 	mov	r8,r23
 40166d4:	98034f1e 	bne	r19,zero,4017414 <___vfiprintf_internal_r+0x1474>
 40166d8:	008100b4 	movhi	r2,1026
 40166dc:	109bc104 	addi	r2,r2,28420
 40166e0:	d8802615 	stw	r2,152(sp)
 40166e4:	8880080c 	andi	r2,r17,32
 40166e8:	1000ac26 	beq	r2,zero,401699c <___vfiprintf_internal_r+0x9fc>
 40166ec:	d9002217 	ldw	r4,136(sp)
 40166f0:	24c00017 	ldw	r19,0(r4)
 40166f4:	25000117 	ldw	r20,4(r4)
 40166f8:	21000204 	addi	r4,r4,8
 40166fc:	d9002215 	stw	r4,136(sp)
 4016700:	8880004c 	andi	r2,r17,1
 4016704:	1001e726 	beq	r2,zero,4016ea4 <___vfiprintf_internal_r+0xf04>
 4016708:	9d04b03a 	or	r2,r19,r20
 401670c:	10025c1e 	bne	r2,zero,4017080 <___vfiprintf_internal_r+0x10e0>
 4016710:	d8001d85 	stb	zero,118(sp)
 4016714:	80024416 	blt	r16,zero,4017028 <___vfiprintf_internal_r+0x1088>
 4016718:	00bfdfc4 	movi	r2,-129
 401671c:	88a2703a 	and	r17,r17,r2
 4016720:	003f1d06 	br	4016398 <__alt_mem_onchip_memory2_0+0xfc015118>
 4016724:	d8c02217 	ldw	r3,136(sp)
 4016728:	04c00044 	movi	r19,1
 401672c:	b811883a 	mov	r8,r23
 4016730:	18800017 	ldw	r2,0(r3)
 4016734:	18c00104 	addi	r3,r3,4
 4016738:	d8001d85 	stb	zero,118(sp)
 401673c:	d8801005 	stb	r2,64(sp)
 4016740:	d8c02215 	stw	r3,136(sp)
 4016744:	9829883a 	mov	r20,r19
 4016748:	ddc01004 	addi	r23,sp,64
 401674c:	0021883a 	mov	r16,zero
 4016750:	003f1e06 	br	40163cc <__alt_mem_onchip_memory2_0+0xfc01514c>
 4016754:	9cc03fcc 	andi	r19,r19,255
 4016758:	b811883a 	mov	r8,r23
 401675c:	9803331e 	bne	r19,zero,401742c <___vfiprintf_internal_r+0x148c>
 4016760:	8880080c 	andi	r2,r17,32
 4016764:	10004826 	beq	r2,zero,4016888 <___vfiprintf_internal_r+0x8e8>
 4016768:	d9002217 	ldw	r4,136(sp)
 401676c:	20800117 	ldw	r2,4(r4)
 4016770:	24c00017 	ldw	r19,0(r4)
 4016774:	21000204 	addi	r4,r4,8
 4016778:	d9002215 	stw	r4,136(sp)
 401677c:	1029883a 	mov	r20,r2
 4016780:	10024c16 	blt	r2,zero,40170b4 <___vfiprintf_internal_r+0x1114>
 4016784:	dd401d83 	ldbu	r21,118(sp)
 4016788:	80007116 	blt	r16,zero,4016950 <___vfiprintf_internal_r+0x9b0>
 401678c:	00ffdfc4 	movi	r3,-129
 4016790:	9d04b03a 	or	r2,r19,r20
 4016794:	88e2703a 	and	r17,r17,r3
 4016798:	1000d126 	beq	r2,zero,4016ae0 <___vfiprintf_internal_r+0xb40>
 401679c:	a0023526 	beq	r20,zero,4017074 <___vfiprintf_internal_r+0x10d4>
 40167a0:	ddc01a04 	addi	r23,sp,104
 40167a4:	4039883a 	mov	fp,r8
 40167a8:	9809883a 	mov	r4,r19
 40167ac:	a00b883a 	mov	r5,r20
 40167b0:	01800284 	movi	r6,10
 40167b4:	000f883a 	mov	r7,zero
 40167b8:	40184cc0 	call	40184cc <__umoddi3>
 40167bc:	10800c04 	addi	r2,r2,48
 40167c0:	bdffffc4 	addi	r23,r23,-1
 40167c4:	9809883a 	mov	r4,r19
 40167c8:	a00b883a 	mov	r5,r20
 40167cc:	b8800005 	stb	r2,0(r23)
 40167d0:	01800284 	movi	r6,10
 40167d4:	000f883a 	mov	r7,zero
 40167d8:	4017ed00 	call	4017ed0 <__udivdi3>
 40167dc:	1027883a 	mov	r19,r2
 40167e0:	10c4b03a 	or	r2,r2,r3
 40167e4:	1829883a 	mov	r20,r3
 40167e8:	103fef1e 	bne	r2,zero,40167a8 <__alt_mem_onchip_memory2_0+0xfc015528>
 40167ec:	d9001e17 	ldw	r4,120(sp)
 40167f0:	e011883a 	mov	r8,fp
 40167f4:	25e9c83a 	sub	r20,r4,r23
 40167f8:	003eec06 	br	40163ac <__alt_mem_onchip_memory2_0+0xfc01512c>
 40167fc:	d8802307 	ldb	r2,140(sp)
 4016800:	1002361e 	bne	r2,zero,40170dc <___vfiprintf_internal_r+0x113c>
 4016804:	00c00804 	movi	r3,32
 4016808:	d8c02305 	stb	r3,140(sp)
 401680c:	04c00044 	movi	r19,1
 4016810:	b0c00007 	ldb	r3,0(r22)
 4016814:	003e3f06 	br	4016114 <__alt_mem_onchip_memory2_0+0xfc014e94>
 4016818:	8c400054 	ori	r17,r17,1
 401681c:	b0c00007 	ldb	r3,0(r22)
 4016820:	003e3c06 	br	4016114 <__alt_mem_onchip_memory2_0+0xfc014e94>
 4016824:	8c402014 	ori	r17,r17,128
 4016828:	b0c00007 	ldb	r3,0(r22)
 401682c:	003e3906 	br	4016114 <__alt_mem_onchip_memory2_0+0xfc014e94>
 4016830:	dc002715 	stw	r16,156(sp)
 4016834:	d8002515 	stw	zero,148(sp)
 4016838:	1f3ff404 	addi	fp,r3,-48
 401683c:	0009883a 	mov	r4,zero
 4016840:	b021883a 	mov	r16,r22
 4016844:	01400284 	movi	r5,10
 4016848:	400cfd40 	call	400cfd4 <__mulsi3>
 401684c:	80c00007 	ldb	r3,0(r16)
 4016850:	e089883a 	add	r4,fp,r2
 4016854:	b5800044 	addi	r22,r22,1
 4016858:	1f3ff404 	addi	fp,r3,-48
 401685c:	b021883a 	mov	r16,r22
 4016860:	af3ff82e 	bgeu	r21,fp,4016844 <__alt_mem_onchip_memory2_0+0xfc0155c4>
 4016864:	d9002515 	stw	r4,148(sp)
 4016868:	dc002717 	ldw	r16,156(sp)
 401686c:	003e2a06 	br	4016118 <__alt_mem_onchip_memory2_0+0xfc014e98>
 4016870:	9cc03fcc 	andi	r19,r19,255
 4016874:	b811883a 	mov	r8,r23
 4016878:	9802e91e 	bne	r19,zero,4017420 <___vfiprintf_internal_r+0x1480>
 401687c:	8c400414 	ori	r17,r17,16
 4016880:	8880080c 	andi	r2,r17,32
 4016884:	103fb81e 	bne	r2,zero,4016768 <__alt_mem_onchip_memory2_0+0xfc0154e8>
 4016888:	8880040c 	andi	r2,r17,16
 401688c:	10022e26 	beq	r2,zero,4017148 <___vfiprintf_internal_r+0x11a8>
 4016890:	d9402217 	ldw	r5,136(sp)
 4016894:	2cc00017 	ldw	r19,0(r5)
 4016898:	29400104 	addi	r5,r5,4
 401689c:	d9402215 	stw	r5,136(sp)
 40168a0:	9829d7fa 	srai	r20,r19,31
 40168a4:	a005883a 	mov	r2,r20
 40168a8:	003fb506 	br	4016780 <__alt_mem_onchip_memory2_0+0xfc015500>
 40168ac:	9cc03fcc 	andi	r19,r19,255
 40168b0:	b811883a 	mov	r8,r23
 40168b4:	9802fa1e 	bne	r19,zero,40174a0 <___vfiprintf_internal_r+0x1500>
 40168b8:	8c400414 	ori	r17,r17,16
 40168bc:	8880080c 	andi	r2,r17,32
 40168c0:	103f661e 	bne	r2,zero,401665c <__alt_mem_onchip_memory2_0+0xfc0153dc>
 40168c4:	8880040c 	andi	r2,r17,16
 40168c8:	10020626 	beq	r2,zero,40170e4 <___vfiprintf_internal_r+0x1144>
 40168cc:	d9402217 	ldw	r5,136(sp)
 40168d0:	d8001d85 	stb	zero,118(sp)
 40168d4:	0029883a 	mov	r20,zero
 40168d8:	28800104 	addi	r2,r5,4
 40168dc:	2cc00017 	ldw	r19,0(r5)
 40168e0:	80020816 	blt	r16,zero,4017104 <___vfiprintf_internal_r+0x1164>
 40168e4:	00ffdfc4 	movi	r3,-129
 40168e8:	d8802215 	stw	r2,136(sp)
 40168ec:	88e2703a 	and	r17,r17,r3
 40168f0:	983f651e 	bne	r19,zero,4016688 <__alt_mem_onchip_memory2_0+0xfc015408>
 40168f4:	002b883a 	mov	r21,zero
 40168f8:	8002cf26 	beq	r16,zero,4017438 <___vfiprintf_internal_r+0x1498>
 40168fc:	0027883a 	mov	r19,zero
 4016900:	0029883a 	mov	r20,zero
 4016904:	003f6106 	br	401668c <__alt_mem_onchip_memory2_0+0xfc01540c>
 4016908:	9cc03fcc 	andi	r19,r19,255
 401690c:	b811883a 	mov	r8,r23
 4016910:	9802e01e 	bne	r19,zero,4017494 <___vfiprintf_internal_r+0x14f4>
 4016914:	8c400414 	ori	r17,r17,16
 4016918:	8880080c 	andi	r2,r17,32
 401691c:	1000641e 	bne	r2,zero,4016ab0 <___vfiprintf_internal_r+0xb10>
 4016920:	8880040c 	andi	r2,r17,16
 4016924:	1001c81e 	bne	r2,zero,4017048 <___vfiprintf_internal_r+0x10a8>
 4016928:	8880100c 	andi	r2,r17,64
 401692c:	d8001d85 	stb	zero,118(sp)
 4016930:	1002281e 	bne	r2,zero,40171d4 <___vfiprintf_internal_r+0x1234>
 4016934:	d9002217 	ldw	r4,136(sp)
 4016938:	0029883a 	mov	r20,zero
 401693c:	20800104 	addi	r2,r4,4
 4016940:	24c00017 	ldw	r19,0(r4)
 4016944:	8001c60e 	bge	r16,zero,4017060 <___vfiprintf_internal_r+0x10c0>
 4016948:	d8802215 	stw	r2,136(sp)
 401694c:	002b883a 	mov	r21,zero
 4016950:	9d04b03a 	or	r2,r19,r20
 4016954:	103f911e 	bne	r2,zero,401679c <__alt_mem_onchip_memory2_0+0xfc01551c>
 4016958:	00800044 	movi	r2,1
 401695c:	10803fcc 	andi	r2,r2,255
 4016960:	00c00044 	movi	r3,1
 4016964:	10c05f26 	beq	r2,r3,4016ae4 <___vfiprintf_internal_r+0xb44>
 4016968:	00c00084 	movi	r3,2
 401696c:	10ffe31e 	bne	r2,r3,40168fc <__alt_mem_onchip_memory2_0+0xfc01567c>
 4016970:	0027883a 	mov	r19,zero
 4016974:	0029883a 	mov	r20,zero
 4016978:	00015106 	br	4016ec0 <___vfiprintf_internal_r+0xf20>
 401697c:	9cc03fcc 	andi	r19,r19,255
 4016980:	b811883a 	mov	r8,r23
 4016984:	9802c01e 	bne	r19,zero,4017488 <___vfiprintf_internal_r+0x14e8>
 4016988:	014100b4 	movhi	r5,1026
 401698c:	295bbc04 	addi	r5,r5,28400
 4016990:	d9402615 	stw	r5,152(sp)
 4016994:	8880080c 	andi	r2,r17,32
 4016998:	103f541e 	bne	r2,zero,40166ec <__alt_mem_onchip_memory2_0+0xfc01546c>
 401699c:	8880040c 	andi	r2,r17,16
 40169a0:	1001f226 	beq	r2,zero,401716c <___vfiprintf_internal_r+0x11cc>
 40169a4:	d9402217 	ldw	r5,136(sp)
 40169a8:	0029883a 	mov	r20,zero
 40169ac:	2cc00017 	ldw	r19,0(r5)
 40169b0:	29400104 	addi	r5,r5,4
 40169b4:	d9402215 	stw	r5,136(sp)
 40169b8:	003f5106 	br	4016700 <__alt_mem_onchip_memory2_0+0xfc015480>
 40169bc:	d8c02217 	ldw	r3,136(sp)
 40169c0:	b811883a 	mov	r8,r23
 40169c4:	d8001d85 	stb	zero,118(sp)
 40169c8:	1dc00017 	ldw	r23,0(r3)
 40169cc:	1f000104 	addi	fp,r3,4
 40169d0:	b8025926 	beq	r23,zero,4017338 <___vfiprintf_internal_r+0x1398>
 40169d4:	80023316 	blt	r16,zero,40172a4 <___vfiprintf_internal_r+0x1304>
 40169d8:	800d883a 	mov	r6,r16
 40169dc:	000b883a 	mov	r5,zero
 40169e0:	b809883a 	mov	r4,r23
 40169e4:	da002a15 	stw	r8,168(sp)
 40169e8:	40143180 	call	4014318 <memchr>
 40169ec:	da002a17 	ldw	r8,168(sp)
 40169f0:	10026826 	beq	r2,zero,4017394 <___vfiprintf_internal_r+0x13f4>
 40169f4:	15e9c83a 	sub	r20,r2,r23
 40169f8:	dd401d83 	ldbu	r21,118(sp)
 40169fc:	df002215 	stw	fp,136(sp)
 4016a00:	0021883a 	mov	r16,zero
 4016a04:	003e6906 	br	40163ac <__alt_mem_onchip_memory2_0+0xfc01512c>
 4016a08:	9cc03fcc 	andi	r19,r19,255
 4016a0c:	b811883a 	mov	r8,r23
 4016a10:	983fc126 	beq	r19,zero,4016918 <__alt_mem_onchip_memory2_0+0xfc015698>
 4016a14:	d8c02303 	ldbu	r3,140(sp)
 4016a18:	d8c01d85 	stb	r3,118(sp)
 4016a1c:	003fbe06 	br	4016918 <__alt_mem_onchip_memory2_0+0xfc015698>
 4016a20:	d9002217 	ldw	r4,136(sp)
 4016a24:	d9402217 	ldw	r5,136(sp)
 4016a28:	21000017 	ldw	r4,0(r4)
 4016a2c:	28800104 	addi	r2,r5,4
 4016a30:	d9002515 	stw	r4,148(sp)
 4016a34:	203e3d16 	blt	r4,zero,401632c <__alt_mem_onchip_memory2_0+0xfc0150ac>
 4016a38:	d8802215 	stw	r2,136(sp)
 4016a3c:	b0c00007 	ldb	r3,0(r22)
 4016a40:	003db406 	br	4016114 <__alt_mem_onchip_memory2_0+0xfc014e94>
 4016a44:	00c00ac4 	movi	r3,43
 4016a48:	d8c02305 	stb	r3,140(sp)
 4016a4c:	04c00044 	movi	r19,1
 4016a50:	b0c00007 	ldb	r3,0(r22)
 4016a54:	003daf06 	br	4016114 <__alt_mem_onchip_memory2_0+0xfc014e94>
 4016a58:	b0c00007 	ldb	r3,0(r22)
 4016a5c:	01000a84 	movi	r4,42
 4016a60:	b4000044 	addi	r16,r22,1
 4016a64:	19025e26 	beq	r3,r4,40173e0 <___vfiprintf_internal_r+0x1440>
 4016a68:	1f3ff404 	addi	fp,r3,-48
 4016a6c:	0009883a 	mov	r4,zero
 4016a70:	af025236 	bltu	r21,fp,40173bc <___vfiprintf_internal_r+0x141c>
 4016a74:	01400284 	movi	r5,10
 4016a78:	400cfd40 	call	400cfd4 <__mulsi3>
 4016a7c:	80c00007 	ldb	r3,0(r16)
 4016a80:	1709883a 	add	r4,r2,fp
 4016a84:	85800044 	addi	r22,r16,1
 4016a88:	1f3ff404 	addi	fp,r3,-48
 4016a8c:	b021883a 	mov	r16,r22
 4016a90:	af3ff82e 	bgeu	r21,fp,4016a74 <__alt_mem_onchip_memory2_0+0xfc0157f4>
 4016a94:	2021883a 	mov	r16,r4
 4016a98:	203d9f0e 	bge	r4,zero,4016118 <__alt_mem_onchip_memory2_0+0xfc014e98>
 4016a9c:	043fffc4 	movi	r16,-1
 4016aa0:	003d9d06 	br	4016118 <__alt_mem_onchip_memory2_0+0xfc014e98>
 4016aa4:	8c401014 	ori	r17,r17,64
 4016aa8:	b0c00007 	ldb	r3,0(r22)
 4016aac:	003d9906 	br	4016114 <__alt_mem_onchip_memory2_0+0xfc014e94>
 4016ab0:	d9002217 	ldw	r4,136(sp)
 4016ab4:	d8001d85 	stb	zero,118(sp)
 4016ab8:	20c00204 	addi	r3,r4,8
 4016abc:	24c00017 	ldw	r19,0(r4)
 4016ac0:	25000117 	ldw	r20,4(r4)
 4016ac4:	8001e716 	blt	r16,zero,4017264 <___vfiprintf_internal_r+0x12c4>
 4016ac8:	013fdfc4 	movi	r4,-129
 4016acc:	9d04b03a 	or	r2,r19,r20
 4016ad0:	d8c02215 	stw	r3,136(sp)
 4016ad4:	8922703a 	and	r17,r17,r4
 4016ad8:	002b883a 	mov	r21,zero
 4016adc:	103f2f1e 	bne	r2,zero,401679c <__alt_mem_onchip_memory2_0+0xfc01551c>
 4016ae0:	803e2f26 	beq	r16,zero,40163a0 <__alt_mem_onchip_memory2_0+0xfc015120>
 4016ae4:	0027883a 	mov	r19,zero
 4016ae8:	9cc00c04 	addi	r19,r19,48
 4016aec:	dcc019c5 	stb	r19,103(sp)
 4016af0:	dd002817 	ldw	r20,160(sp)
 4016af4:	ddc019c4 	addi	r23,sp,103
 4016af8:	003e2c06 	br	40163ac <__alt_mem_onchip_memory2_0+0xfc01512c>
 4016afc:	9cc03fcc 	andi	r19,r19,255
 4016b00:	b811883a 	mov	r8,r23
 4016b04:	9802571e 	bne	r19,zero,4017464 <___vfiprintf_internal_r+0x14c4>
 4016b08:	18005726 	beq	r3,zero,4016c68 <___vfiprintf_internal_r+0xcc8>
 4016b0c:	04c00044 	movi	r19,1
 4016b10:	d8c01005 	stb	r3,64(sp)
 4016b14:	d8001d85 	stb	zero,118(sp)
 4016b18:	9829883a 	mov	r20,r19
 4016b1c:	ddc01004 	addi	r23,sp,64
 4016b20:	003f0a06 	br	401674c <__alt_mem_onchip_memory2_0+0xfc0154cc>
 4016b24:	d9402017 	ldw	r5,128(sp)
 4016b28:	d9002117 	ldw	r4,132(sp)
 4016b2c:	d9801a04 	addi	r6,sp,104
 4016b30:	da802a15 	stw	r10,168(sp)
 4016b34:	4015e8c0 	call	4015e8c <__sprint_r.part.0>
 4016b38:	da802a17 	ldw	r10,168(sp)
 4016b3c:	1000501e 	bne	r2,zero,4016c80 <___vfiprintf_internal_r+0xce0>
 4016b40:	d9801b17 	ldw	r6,108(sp)
 4016b44:	d8801c17 	ldw	r2,112(sp)
 4016b48:	d811883a 	mov	r8,sp
 4016b4c:	31000044 	addi	r4,r6,1
 4016b50:	003e3606 	br	401642c <__alt_mem_onchip_memory2_0+0xfc0151ac>
 4016b54:	d9001b17 	ldw	r4,108(sp)
 4016b58:	d8801c17 	ldw	r2,112(sp)
 4016b5c:	21400044 	addi	r5,r4,1
 4016b60:	d9801d87 	ldb	r6,118(sp)
 4016b64:	303e5226 	beq	r6,zero,40164b0 <__alt_mem_onchip_memory2_0+0xfc015230>
 4016b68:	01800044 	movi	r6,1
 4016b6c:	d9001d84 	addi	r4,sp,118
 4016b70:	1185883a 	add	r2,r2,r6
 4016b74:	41000015 	stw	r4,0(r8)
 4016b78:	41800115 	stw	r6,4(r8)
 4016b7c:	d8801c15 	stw	r2,112(sp)
 4016b80:	d9401b15 	stw	r5,108(sp)
 4016b84:	010001c4 	movi	r4,7
 4016b88:	2140b00e 	bge	r4,r5,4016e4c <___vfiprintf_internal_r+0xeac>
 4016b8c:	1000f61e 	bne	r2,zero,4016f68 <___vfiprintf_internal_r+0xfc8>
 4016b90:	3800b31e 	bne	r7,zero,4016e60 <___vfiprintf_internal_r+0xec0>
 4016b94:	0009883a 	mov	r4,zero
 4016b98:	300b883a 	mov	r5,r6
 4016b9c:	d811883a 	mov	r8,sp
 4016ba0:	01802004 	movi	r6,128
 4016ba4:	19be5226 	beq	r3,r6,40164f0 <__alt_mem_onchip_memory2_0+0xfc015270>
 4016ba8:	8521c83a 	sub	r16,r16,r20
 4016bac:	043e790e 	bge	zero,r16,4016594 <__alt_mem_onchip_memory2_0+0xfc015314>
 4016bb0:	05400404 	movi	r21,16
 4016bb4:	ac01b00e 	bge	r21,r16,4017278 <___vfiprintf_internal_r+0x12d8>
 4016bb8:	014100b4 	movhi	r5,1026
 4016bbc:	295c2104 	addi	r5,r5,28804
 4016bc0:	d9402315 	stw	r5,140(sp)
 4016bc4:	070001c4 	movi	fp,7
 4016bc8:	00000506 	br	4016be0 <___vfiprintf_internal_r+0xc40>
 4016bcc:	21400084 	addi	r5,r4,2
 4016bd0:	42000204 	addi	r8,r8,8
 4016bd4:	1809883a 	mov	r4,r3
 4016bd8:	843ffc04 	addi	r16,r16,-16
 4016bdc:	ac000d0e 	bge	r21,r16,4016c14 <___vfiprintf_internal_r+0xc74>
 4016be0:	10800404 	addi	r2,r2,16
 4016be4:	20c00044 	addi	r3,r4,1
 4016be8:	44800015 	stw	r18,0(r8)
 4016bec:	45400115 	stw	r21,4(r8)
 4016bf0:	d8801c15 	stw	r2,112(sp)
 4016bf4:	d8c01b15 	stw	r3,108(sp)
 4016bf8:	e0fff40e 	bge	fp,r3,4016bcc <__alt_mem_onchip_memory2_0+0xfc01594c>
 4016bfc:	1000101e 	bne	r2,zero,4016c40 <___vfiprintf_internal_r+0xca0>
 4016c00:	843ffc04 	addi	r16,r16,-16
 4016c04:	01400044 	movi	r5,1
 4016c08:	0009883a 	mov	r4,zero
 4016c0c:	d811883a 	mov	r8,sp
 4016c10:	ac3ff316 	blt	r21,r16,4016be0 <__alt_mem_onchip_memory2_0+0xfc015960>
 4016c14:	d8c02317 	ldw	r3,140(sp)
 4016c18:	1405883a 	add	r2,r2,r16
 4016c1c:	44000115 	stw	r16,4(r8)
 4016c20:	40c00015 	stw	r3,0(r8)
 4016c24:	d8801c15 	stw	r2,112(sp)
 4016c28:	d9401b15 	stw	r5,108(sp)
 4016c2c:	00c001c4 	movi	r3,7
 4016c30:	19401916 	blt	r3,r5,4016c98 <___vfiprintf_internal_r+0xcf8>
 4016c34:	42000204 	addi	r8,r8,8
 4016c38:	29400044 	addi	r5,r5,1
 4016c3c:	003e5506 	br	4016594 <__alt_mem_onchip_memory2_0+0xfc015314>
 4016c40:	d9402017 	ldw	r5,128(sp)
 4016c44:	d9002117 	ldw	r4,132(sp)
 4016c48:	d9801a04 	addi	r6,sp,104
 4016c4c:	4015e8c0 	call	4015e8c <__sprint_r.part.0>
 4016c50:	10000b1e 	bne	r2,zero,4016c80 <___vfiprintf_internal_r+0xce0>
 4016c54:	d9001b17 	ldw	r4,108(sp)
 4016c58:	d8801c17 	ldw	r2,112(sp)
 4016c5c:	d811883a 	mov	r8,sp
 4016c60:	21400044 	addi	r5,r4,1
 4016c64:	003fdc06 	br	4016bd8 <__alt_mem_onchip_memory2_0+0xfc015958>
 4016c68:	d8801c17 	ldw	r2,112(sp)
 4016c6c:	10000426 	beq	r2,zero,4016c80 <___vfiprintf_internal_r+0xce0>
 4016c70:	d9402017 	ldw	r5,128(sp)
 4016c74:	d9002117 	ldw	r4,132(sp)
 4016c78:	d9801a04 	addi	r6,sp,104
 4016c7c:	4015e8c0 	call	4015e8c <__sprint_r.part.0>
 4016c80:	d9402017 	ldw	r5,128(sp)
 4016c84:	2880030b 	ldhu	r2,12(r5)
 4016c88:	1080100c 	andi	r2,r2,64
 4016c8c:	10014d1e 	bne	r2,zero,40171c4 <___vfiprintf_internal_r+0x1224>
 4016c90:	d8802417 	ldw	r2,144(sp)
 4016c94:	003d9706 	br	40162f4 <__alt_mem_onchip_memory2_0+0xfc015074>
 4016c98:	1000d21e 	bne	r2,zero,4016fe4 <___vfiprintf_internal_r+0x1044>
 4016c9c:	00c00044 	movi	r3,1
 4016ca0:	a005883a 	mov	r2,r20
 4016ca4:	ddc00015 	stw	r23,0(sp)
 4016ca8:	dd000115 	stw	r20,4(sp)
 4016cac:	dd001c15 	stw	r20,112(sp)
 4016cb0:	d8c01b15 	stw	r3,108(sp)
 4016cb4:	d811883a 	mov	r8,sp
 4016cb8:	42000204 	addi	r8,r8,8
 4016cbc:	8c40010c 	andi	r17,r17,4
 4016cc0:	88004026 	beq	r17,zero,4016dc4 <___vfiprintf_internal_r+0xe24>
 4016cc4:	d9002517 	ldw	r4,148(sp)
 4016cc8:	24e3c83a 	sub	r17,r4,r19
 4016ccc:	04403d0e 	bge	zero,r17,4016dc4 <___vfiprintf_internal_r+0xe24>
 4016cd0:	04000404 	movi	r16,16
 4016cd4:	8441a90e 	bge	r16,r17,401737c <___vfiprintf_internal_r+0x13dc>
 4016cd8:	00c100b4 	movhi	r3,1026
 4016cdc:	18dc2504 	addi	r3,r3,28820
 4016ce0:	d9001b17 	ldw	r4,108(sp)
 4016ce4:	d8c02315 	stw	r3,140(sp)
 4016ce8:	050001c4 	movi	r20,7
 4016cec:	dd402117 	ldw	r21,132(sp)
 4016cf0:	ddc02017 	ldw	r23,128(sp)
 4016cf4:	00000506 	br	4016d0c <___vfiprintf_internal_r+0xd6c>
 4016cf8:	21400084 	addi	r5,r4,2
 4016cfc:	42000204 	addi	r8,r8,8
 4016d00:	1809883a 	mov	r4,r3
 4016d04:	8c7ffc04 	addi	r17,r17,-16
 4016d08:	84400f0e 	bge	r16,r17,4016d48 <___vfiprintf_internal_r+0xda8>
 4016d0c:	014100b4 	movhi	r5,1026
 4016d10:	10800404 	addi	r2,r2,16
 4016d14:	20c00044 	addi	r3,r4,1
 4016d18:	295c2504 	addi	r5,r5,28820
 4016d1c:	41400015 	stw	r5,0(r8)
 4016d20:	44000115 	stw	r16,4(r8)
 4016d24:	d8801c15 	stw	r2,112(sp)
 4016d28:	d8c01b15 	stw	r3,108(sp)
 4016d2c:	a0fff20e 	bge	r20,r3,4016cf8 <__alt_mem_onchip_memory2_0+0xfc015a78>
 4016d30:	1000141e 	bne	r2,zero,4016d84 <___vfiprintf_internal_r+0xde4>
 4016d34:	8c7ffc04 	addi	r17,r17,-16
 4016d38:	01400044 	movi	r5,1
 4016d3c:	0009883a 	mov	r4,zero
 4016d40:	d811883a 	mov	r8,sp
 4016d44:	847ff116 	blt	r16,r17,4016d0c <__alt_mem_onchip_memory2_0+0xfc015a8c>
 4016d48:	d8c02317 	ldw	r3,140(sp)
 4016d4c:	1445883a 	add	r2,r2,r17
 4016d50:	44400115 	stw	r17,4(r8)
 4016d54:	40c00015 	stw	r3,0(r8)
 4016d58:	d8801c15 	stw	r2,112(sp)
 4016d5c:	d9401b15 	stw	r5,108(sp)
 4016d60:	00c001c4 	movi	r3,7
 4016d64:	1940170e 	bge	r3,r5,4016dc4 <___vfiprintf_internal_r+0xe24>
 4016d68:	1000101e 	bne	r2,zero,4016dac <___vfiprintf_internal_r+0xe0c>
 4016d6c:	d8802517 	ldw	r2,148(sp)
 4016d70:	14c11616 	blt	r2,r19,40171cc <___vfiprintf_internal_r+0x122c>
 4016d74:	d9002417 	ldw	r4,144(sp)
 4016d78:	2089883a 	add	r4,r4,r2
 4016d7c:	d9002415 	stw	r4,144(sp)
 4016d80:	003e1806 	br	40165e4 <__alt_mem_onchip_memory2_0+0xfc015364>
 4016d84:	d9801a04 	addi	r6,sp,104
 4016d88:	b80b883a 	mov	r5,r23
 4016d8c:	a809883a 	mov	r4,r21
 4016d90:	4015e8c0 	call	4015e8c <__sprint_r.part.0>
 4016d94:	103fba1e 	bne	r2,zero,4016c80 <__alt_mem_onchip_memory2_0+0xfc015a00>
 4016d98:	d9001b17 	ldw	r4,108(sp)
 4016d9c:	d8801c17 	ldw	r2,112(sp)
 4016da0:	d811883a 	mov	r8,sp
 4016da4:	21400044 	addi	r5,r4,1
 4016da8:	003fd606 	br	4016d04 <__alt_mem_onchip_memory2_0+0xfc015a84>
 4016dac:	d9402017 	ldw	r5,128(sp)
 4016db0:	d9002117 	ldw	r4,132(sp)
 4016db4:	d9801a04 	addi	r6,sp,104
 4016db8:	4015e8c0 	call	4015e8c <__sprint_r.part.0>
 4016dbc:	103fb01e 	bne	r2,zero,4016c80 <__alt_mem_onchip_memory2_0+0xfc015a00>
 4016dc0:	d8801c17 	ldw	r2,112(sp)
 4016dc4:	d8c02517 	ldw	r3,148(sp)
 4016dc8:	1cc0010e 	bge	r3,r19,4016dd0 <___vfiprintf_internal_r+0xe30>
 4016dcc:	9807883a 	mov	r3,r19
 4016dd0:	d9002417 	ldw	r4,144(sp)
 4016dd4:	20c9883a 	add	r4,r4,r3
 4016dd8:	d9002415 	stw	r4,144(sp)
 4016ddc:	103e0126 	beq	r2,zero,40165e4 <__alt_mem_onchip_memory2_0+0xfc015364>
 4016de0:	d9402017 	ldw	r5,128(sp)
 4016de4:	d9002117 	ldw	r4,132(sp)
 4016de8:	d9801a04 	addi	r6,sp,104
 4016dec:	4015e8c0 	call	4015e8c <__sprint_r.part.0>
 4016df0:	103dfc26 	beq	r2,zero,40165e4 <__alt_mem_onchip_memory2_0+0xfc015364>
 4016df4:	003fa206 	br	4016c80 <__alt_mem_onchip_memory2_0+0xfc015a00>
 4016df8:	d9402017 	ldw	r5,128(sp)
 4016dfc:	d9002117 	ldw	r4,132(sp)
 4016e00:	d9801a04 	addi	r6,sp,104
 4016e04:	d9c02b15 	stw	r7,172(sp)
 4016e08:	4015e8c0 	call	4015e8c <__sprint_r.part.0>
 4016e0c:	d9c02b17 	ldw	r7,172(sp)
 4016e10:	103f9b1e 	bne	r2,zero,4016c80 <__alt_mem_onchip_memory2_0+0xfc015a00>
 4016e14:	d9001b17 	ldw	r4,108(sp)
 4016e18:	d8801c17 	ldw	r2,112(sp)
 4016e1c:	d811883a 	mov	r8,sp
 4016e20:	21800044 	addi	r6,r4,1
 4016e24:	003dbf06 	br	4016524 <__alt_mem_onchip_memory2_0+0xfc0152a4>
 4016e28:	1000d81e 	bne	r2,zero,401718c <___vfiprintf_internal_r+0x11ec>
 4016e2c:	d9001d87 	ldb	r4,118(sp)
 4016e30:	20000a26 	beq	r4,zero,4016e5c <___vfiprintf_internal_r+0xebc>
 4016e34:	00800044 	movi	r2,1
 4016e38:	d9001d84 	addi	r4,sp,118
 4016e3c:	100b883a 	mov	r5,r2
 4016e40:	d9000015 	stw	r4,0(sp)
 4016e44:	d8800115 	stw	r2,4(sp)
 4016e48:	d811883a 	mov	r8,sp
 4016e4c:	2809883a 	mov	r4,r5
 4016e50:	42000204 	addi	r8,r8,8
 4016e54:	29400044 	addi	r5,r5,1
 4016e58:	003d9506 	br	40164b0 <__alt_mem_onchip_memory2_0+0xfc015230>
 4016e5c:	3800fd26 	beq	r7,zero,4017254 <___vfiprintf_internal_r+0x12b4>
 4016e60:	00800084 	movi	r2,2
 4016e64:	d9001d04 	addi	r4,sp,116
 4016e68:	d9000015 	stw	r4,0(sp)
 4016e6c:	d8800115 	stw	r2,4(sp)
 4016e70:	01400044 	movi	r5,1
 4016e74:	d811883a 	mov	r8,sp
 4016e78:	2809883a 	mov	r4,r5
 4016e7c:	42000204 	addi	r8,r8,8
 4016e80:	29400044 	addi	r5,r5,1
 4016e84:	003f4606 	br	4016ba0 <__alt_mem_onchip_memory2_0+0xfc015920>
 4016e88:	d8802517 	ldw	r2,148(sp)
 4016e8c:	14c0010e 	bge	r2,r19,4016e94 <___vfiprintf_internal_r+0xef4>
 4016e90:	9805883a 	mov	r2,r19
 4016e94:	d9402417 	ldw	r5,144(sp)
 4016e98:	288b883a 	add	r5,r5,r2
 4016e9c:	d9402415 	stw	r5,144(sp)
 4016ea0:	003dd006 	br	40165e4 <__alt_mem_onchip_memory2_0+0xfc015364>
 4016ea4:	d8001d85 	stb	zero,118(sp)
 4016ea8:	80005d16 	blt	r16,zero,4017020 <___vfiprintf_internal_r+0x1080>
 4016eac:	00ffdfc4 	movi	r3,-129
 4016eb0:	9d04b03a 	or	r2,r19,r20
 4016eb4:	88e2703a 	and	r17,r17,r3
 4016eb8:	103d3726 	beq	r2,zero,4016398 <__alt_mem_onchip_memory2_0+0xfc015118>
 4016ebc:	002b883a 	mov	r21,zero
 4016ec0:	d9002617 	ldw	r4,152(sp)
 4016ec4:	ddc01a04 	addi	r23,sp,104
 4016ec8:	988003cc 	andi	r2,r19,15
 4016ecc:	a006973a 	slli	r3,r20,28
 4016ed0:	2085883a 	add	r2,r4,r2
 4016ed4:	9826d13a 	srli	r19,r19,4
 4016ed8:	10800003 	ldbu	r2,0(r2)
 4016edc:	a028d13a 	srli	r20,r20,4
 4016ee0:	bdffffc4 	addi	r23,r23,-1
 4016ee4:	1ce6b03a 	or	r19,r3,r19
 4016ee8:	b8800005 	stb	r2,0(r23)
 4016eec:	9d04b03a 	or	r2,r19,r20
 4016ef0:	103ff51e 	bne	r2,zero,4016ec8 <__alt_mem_onchip_memory2_0+0xfc015c48>
 4016ef4:	d8801e17 	ldw	r2,120(sp)
 4016ef8:	15e9c83a 	sub	r20,r2,r23
 4016efc:	003d2b06 	br	40163ac <__alt_mem_onchip_memory2_0+0xfc01512c>
 4016f00:	d9402017 	ldw	r5,128(sp)
 4016f04:	d9002117 	ldw	r4,132(sp)
 4016f08:	d9801a04 	addi	r6,sp,104
 4016f0c:	4015e8c0 	call	4015e8c <__sprint_r.part.0>
 4016f10:	103f5b1e 	bne	r2,zero,4016c80 <__alt_mem_onchip_memory2_0+0xfc015a00>
 4016f14:	d8801c17 	ldw	r2,112(sp)
 4016f18:	d811883a 	mov	r8,sp
 4016f1c:	003f6706 	br	4016cbc <__alt_mem_onchip_memory2_0+0xfc015a3c>
 4016f20:	d9402017 	ldw	r5,128(sp)
 4016f24:	d9002117 	ldw	r4,132(sp)
 4016f28:	d9801a04 	addi	r6,sp,104
 4016f2c:	4015e8c0 	call	4015e8c <__sprint_r.part.0>
 4016f30:	103f531e 	bne	r2,zero,4016c80 <__alt_mem_onchip_memory2_0+0xfc015a00>
 4016f34:	d811883a 	mov	r8,sp
 4016f38:	003cd906 	br	40162a0 <__alt_mem_onchip_memory2_0+0xfc015020>
 4016f3c:	10803fcc 	andi	r2,r2,255
 4016f40:	1080201c 	xori	r2,r2,128
 4016f44:	10bfe004 	addi	r2,r2,-128
 4016f48:	00c00c04 	movi	r3,48
 4016f4c:	10ffe926 	beq	r2,r3,4016ef4 <__alt_mem_onchip_memory2_0+0xfc015c74>
 4016f50:	b8ffffc5 	stb	r3,-1(r23)
 4016f54:	d8c01e17 	ldw	r3,120(sp)
 4016f58:	b8bfffc4 	addi	r2,r23,-1
 4016f5c:	102f883a 	mov	r23,r2
 4016f60:	18a9c83a 	sub	r20,r3,r2
 4016f64:	003d1106 	br	40163ac <__alt_mem_onchip_memory2_0+0xfc01512c>
 4016f68:	d9402017 	ldw	r5,128(sp)
 4016f6c:	d9002117 	ldw	r4,132(sp)
 4016f70:	d9801a04 	addi	r6,sp,104
 4016f74:	d8c02a15 	stw	r3,168(sp)
 4016f78:	d9c02b15 	stw	r7,172(sp)
 4016f7c:	4015e8c0 	call	4015e8c <__sprint_r.part.0>
 4016f80:	d8c02a17 	ldw	r3,168(sp)
 4016f84:	d9c02b17 	ldw	r7,172(sp)
 4016f88:	103f3d1e 	bne	r2,zero,4016c80 <__alt_mem_onchip_memory2_0+0xfc015a00>
 4016f8c:	d9001b17 	ldw	r4,108(sp)
 4016f90:	d8801c17 	ldw	r2,112(sp)
 4016f94:	d811883a 	mov	r8,sp
 4016f98:	21400044 	addi	r5,r4,1
 4016f9c:	003d4406 	br	40164b0 <__alt_mem_onchip_memory2_0+0xfc015230>
 4016fa0:	d9402017 	ldw	r5,128(sp)
 4016fa4:	d9002117 	ldw	r4,132(sp)
 4016fa8:	d9801a04 	addi	r6,sp,104
 4016fac:	d8c02a15 	stw	r3,168(sp)
 4016fb0:	4015e8c0 	call	4015e8c <__sprint_r.part.0>
 4016fb4:	d8c02a17 	ldw	r3,168(sp)
 4016fb8:	103f311e 	bne	r2,zero,4016c80 <__alt_mem_onchip_memory2_0+0xfc015a00>
 4016fbc:	d9001b17 	ldw	r4,108(sp)
 4016fc0:	d8801c17 	ldw	r2,112(sp)
 4016fc4:	d811883a 	mov	r8,sp
 4016fc8:	21400044 	addi	r5,r4,1
 4016fcc:	003ef406 	br	4016ba0 <__alt_mem_onchip_memory2_0+0xfc015920>
 4016fd0:	1000bd1e 	bne	r2,zero,40172c8 <___vfiprintf_internal_r+0x1328>
 4016fd4:	01400044 	movi	r5,1
 4016fd8:	0009883a 	mov	r4,zero
 4016fdc:	d811883a 	mov	r8,sp
 4016fe0:	003ef106 	br	4016ba8 <__alt_mem_onchip_memory2_0+0xfc015928>
 4016fe4:	d9402017 	ldw	r5,128(sp)
 4016fe8:	d9002117 	ldw	r4,132(sp)
 4016fec:	d9801a04 	addi	r6,sp,104
 4016ff0:	4015e8c0 	call	4015e8c <__sprint_r.part.0>
 4016ff4:	103f221e 	bne	r2,zero,4016c80 <__alt_mem_onchip_memory2_0+0xfc015a00>
 4016ff8:	d9401b17 	ldw	r5,108(sp)
 4016ffc:	d8801c17 	ldw	r2,112(sp)
 4017000:	d811883a 	mov	r8,sp
 4017004:	29400044 	addi	r5,r5,1
 4017008:	003d6206 	br	4016594 <__alt_mem_onchip_memory2_0+0xfc015314>
 401700c:	014100b4 	movhi	r5,1026
 4017010:	295bc104 	addi	r5,r5,28420
 4017014:	d9402615 	stw	r5,152(sp)
 4017018:	d8c02215 	stw	r3,136(sp)
 401701c:	1023883a 	mov	r17,r2
 4017020:	9d04b03a 	or	r2,r19,r20
 4017024:	103fa51e 	bne	r2,zero,4016ebc <__alt_mem_onchip_memory2_0+0xfc015c3c>
 4017028:	002b883a 	mov	r21,zero
 401702c:	00800084 	movi	r2,2
 4017030:	003e4a06 	br	401695c <__alt_mem_onchip_memory2_0+0xfc0156dc>
 4017034:	014100b4 	movhi	r5,1026
 4017038:	295bc104 	addi	r5,r5,28420
 401703c:	002b883a 	mov	r21,zero
 4017040:	d9402615 	stw	r5,152(sp)
 4017044:	003f9e06 	br	4016ec0 <__alt_mem_onchip_memory2_0+0xfc015c40>
 4017048:	d9402217 	ldw	r5,136(sp)
 401704c:	d8001d85 	stb	zero,118(sp)
 4017050:	0029883a 	mov	r20,zero
 4017054:	28800104 	addi	r2,r5,4
 4017058:	2cc00017 	ldw	r19,0(r5)
 401705c:	803e3a16 	blt	r16,zero,4016948 <__alt_mem_onchip_memory2_0+0xfc0156c8>
 4017060:	00ffdfc4 	movi	r3,-129
 4017064:	d8802215 	stw	r2,136(sp)
 4017068:	88e2703a 	and	r17,r17,r3
 401706c:	002b883a 	mov	r21,zero
 4017070:	983e9b26 	beq	r19,zero,4016ae0 <__alt_mem_onchip_memory2_0+0xfc015860>
 4017074:	00800244 	movi	r2,9
 4017078:	14fdc936 	bltu	r2,r19,40167a0 <__alt_mem_onchip_memory2_0+0xfc015520>
 401707c:	003e9a06 	br	4016ae8 <__alt_mem_onchip_memory2_0+0xfc015868>
 4017080:	00800c04 	movi	r2,48
 4017084:	d8c01d45 	stb	r3,117(sp)
 4017088:	d8801d05 	stb	r2,116(sp)
 401708c:	d8001d85 	stb	zero,118(sp)
 4017090:	88c00094 	ori	r3,r17,2
 4017094:	80009c16 	blt	r16,zero,4017308 <___vfiprintf_internal_r+0x1368>
 4017098:	00bfdfc4 	movi	r2,-129
 401709c:	88a2703a 	and	r17,r17,r2
 40170a0:	8c400094 	ori	r17,r17,2
 40170a4:	002b883a 	mov	r21,zero
 40170a8:	003f8506 	br	4016ec0 <__alt_mem_onchip_memory2_0+0xfc015c40>
 40170ac:	b029883a 	mov	r20,r22
 40170b0:	003c0b06 	br	40160e0 <__alt_mem_onchip_memory2_0+0xfc014e60>
 40170b4:	04e7c83a 	sub	r19,zero,r19
 40170b8:	05400b44 	movi	r21,45
 40170bc:	9804c03a 	cmpne	r2,r19,zero
 40170c0:	0529c83a 	sub	r20,zero,r20
 40170c4:	dd401d85 	stb	r21,118(sp)
 40170c8:	a0a9c83a 	sub	r20,r20,r2
 40170cc:	80009716 	blt	r16,zero,401732c <___vfiprintf_internal_r+0x138c>
 40170d0:	00bfdfc4 	movi	r2,-129
 40170d4:	88a2703a 	and	r17,r17,r2
 40170d8:	003db006 	br	401679c <__alt_mem_onchip_memory2_0+0xfc01551c>
 40170dc:	b0c00007 	ldb	r3,0(r22)
 40170e0:	003c0c06 	br	4016114 <__alt_mem_onchip_memory2_0+0xfc014e94>
 40170e4:	8880100c 	andi	r2,r17,64
 40170e8:	d8001d85 	stb	zero,118(sp)
 40170ec:	1000461e 	bne	r2,zero,4017208 <___vfiprintf_internal_r+0x1268>
 40170f0:	d9002217 	ldw	r4,136(sp)
 40170f4:	0029883a 	mov	r20,zero
 40170f8:	20800104 	addi	r2,r4,4
 40170fc:	24c00017 	ldw	r19,0(r4)
 4017100:	803df80e 	bge	r16,zero,40168e4 <__alt_mem_onchip_memory2_0+0xfc015664>
 4017104:	9d06b03a 	or	r3,r19,r20
 4017108:	d8802215 	stw	r2,136(sp)
 401710c:	183d5e1e 	bne	r3,zero,4016688 <__alt_mem_onchip_memory2_0+0xfc015408>
 4017110:	002b883a 	mov	r21,zero
 4017114:	0005883a 	mov	r2,zero
 4017118:	003e1006 	br	401695c <__alt_mem_onchip_memory2_0+0xfc0156dc>
 401711c:	8880040c 	andi	r2,r17,16
 4017120:	1000321e 	bne	r2,zero,40171ec <___vfiprintf_internal_r+0x124c>
 4017124:	8c40100c 	andi	r17,r17,64
 4017128:	88008d26 	beq	r17,zero,4017360 <___vfiprintf_internal_r+0x13c0>
 401712c:	d9402217 	ldw	r5,136(sp)
 4017130:	d8c02417 	ldw	r3,144(sp)
 4017134:	28800017 	ldw	r2,0(r5)
 4017138:	29400104 	addi	r5,r5,4
 401713c:	d9402215 	stw	r5,136(sp)
 4017140:	10c0000d 	sth	r3,0(r2)
 4017144:	003bca06 	br	4016070 <__alt_mem_onchip_memory2_0+0xfc014df0>
 4017148:	8880100c 	andi	r2,r17,64
 401714c:	10003a26 	beq	r2,zero,4017238 <___vfiprintf_internal_r+0x1298>
 4017150:	d8802217 	ldw	r2,136(sp)
 4017154:	14c0000f 	ldh	r19,0(r2)
 4017158:	10800104 	addi	r2,r2,4
 401715c:	d8802215 	stw	r2,136(sp)
 4017160:	9829d7fa 	srai	r20,r19,31
 4017164:	a005883a 	mov	r2,r20
 4017168:	003d8506 	br	4016780 <__alt_mem_onchip_memory2_0+0xfc015500>
 401716c:	8880100c 	andi	r2,r17,64
 4017170:	10002b26 	beq	r2,zero,4017220 <___vfiprintf_internal_r+0x1280>
 4017174:	d8802217 	ldw	r2,136(sp)
 4017178:	0029883a 	mov	r20,zero
 401717c:	14c0000b 	ldhu	r19,0(r2)
 4017180:	10800104 	addi	r2,r2,4
 4017184:	d8802215 	stw	r2,136(sp)
 4017188:	003d5d06 	br	4016700 <__alt_mem_onchip_memory2_0+0xfc015480>
 401718c:	d9402017 	ldw	r5,128(sp)
 4017190:	d9002117 	ldw	r4,132(sp)
 4017194:	d9801a04 	addi	r6,sp,104
 4017198:	d8c02a15 	stw	r3,168(sp)
 401719c:	d9c02b15 	stw	r7,172(sp)
 40171a0:	4015e8c0 	call	4015e8c <__sprint_r.part.0>
 40171a4:	d8c02a17 	ldw	r3,168(sp)
 40171a8:	d9c02b17 	ldw	r7,172(sp)
 40171ac:	103eb41e 	bne	r2,zero,4016c80 <__alt_mem_onchip_memory2_0+0xfc015a00>
 40171b0:	d9001b17 	ldw	r4,108(sp)
 40171b4:	d8801c17 	ldw	r2,112(sp)
 40171b8:	d811883a 	mov	r8,sp
 40171bc:	21400044 	addi	r5,r4,1
 40171c0:	003e6706 	br	4016b60 <__alt_mem_onchip_memory2_0+0xfc0158e0>
 40171c4:	00bfffc4 	movi	r2,-1
 40171c8:	003c4a06 	br	40162f4 <__alt_mem_onchip_memory2_0+0xfc015074>
 40171cc:	9805883a 	mov	r2,r19
 40171d0:	003ee806 	br	4016d74 <__alt_mem_onchip_memory2_0+0xfc015af4>
 40171d4:	d8c02217 	ldw	r3,136(sp)
 40171d8:	0029883a 	mov	r20,zero
 40171dc:	18800104 	addi	r2,r3,4
 40171e0:	1cc0000b 	ldhu	r19,0(r3)
 40171e4:	803f9e0e 	bge	r16,zero,4017060 <__alt_mem_onchip_memory2_0+0xfc015de0>
 40171e8:	003dd706 	br	4016948 <__alt_mem_onchip_memory2_0+0xfc0156c8>
 40171ec:	d8c02217 	ldw	r3,136(sp)
 40171f0:	d9002417 	ldw	r4,144(sp)
 40171f4:	18800017 	ldw	r2,0(r3)
 40171f8:	18c00104 	addi	r3,r3,4
 40171fc:	d8c02215 	stw	r3,136(sp)
 4017200:	11000015 	stw	r4,0(r2)
 4017204:	003b9a06 	br	4016070 <__alt_mem_onchip_memory2_0+0xfc014df0>
 4017208:	d8c02217 	ldw	r3,136(sp)
 401720c:	0029883a 	mov	r20,zero
 4017210:	18800104 	addi	r2,r3,4
 4017214:	1cc0000b 	ldhu	r19,0(r3)
 4017218:	803db20e 	bge	r16,zero,40168e4 <__alt_mem_onchip_memory2_0+0xfc015664>
 401721c:	003fb906 	br	4017104 <__alt_mem_onchip_memory2_0+0xfc015e84>
 4017220:	d9002217 	ldw	r4,136(sp)
 4017224:	0029883a 	mov	r20,zero
 4017228:	24c00017 	ldw	r19,0(r4)
 401722c:	21000104 	addi	r4,r4,4
 4017230:	d9002215 	stw	r4,136(sp)
 4017234:	003d3206 	br	4016700 <__alt_mem_onchip_memory2_0+0xfc015480>
 4017238:	d8c02217 	ldw	r3,136(sp)
 401723c:	1cc00017 	ldw	r19,0(r3)
 4017240:	18c00104 	addi	r3,r3,4
 4017244:	d8c02215 	stw	r3,136(sp)
 4017248:	9829d7fa 	srai	r20,r19,31
 401724c:	a005883a 	mov	r2,r20
 4017250:	003d4b06 	br	4016780 <__alt_mem_onchip_memory2_0+0xfc015500>
 4017254:	0009883a 	mov	r4,zero
 4017258:	01400044 	movi	r5,1
 401725c:	d811883a 	mov	r8,sp
 4017260:	003e4f06 	br	4016ba0 <__alt_mem_onchip_memory2_0+0xfc015920>
 4017264:	d8c02215 	stw	r3,136(sp)
 4017268:	002b883a 	mov	r21,zero
 401726c:	003db806 	br	4016950 <__alt_mem_onchip_memory2_0+0xfc0156d0>
 4017270:	d811883a 	mov	r8,sp
 4017274:	003e9606 	br	4016cd0 <__alt_mem_onchip_memory2_0+0xfc015a50>
 4017278:	010100b4 	movhi	r4,1026
 401727c:	211c2104 	addi	r4,r4,28804
 4017280:	d9002315 	stw	r4,140(sp)
 4017284:	003e6306 	br	4016c14 <__alt_mem_onchip_memory2_0+0xfc015994>
 4017288:	b0c00043 	ldbu	r3,1(r22)
 401728c:	8c400814 	ori	r17,r17,32
 4017290:	b5800044 	addi	r22,r22,1
 4017294:	18c03fcc 	andi	r3,r3,255
 4017298:	18c0201c 	xori	r3,r3,128
 401729c:	18ffe004 	addi	r3,r3,-128
 40172a0:	003b9c06 	br	4016114 <__alt_mem_onchip_memory2_0+0xfc014e94>
 40172a4:	b809883a 	mov	r4,r23
 40172a8:	da002a15 	stw	r8,168(sp)
 40172ac:	400f14c0 	call	400f14c <strlen>
 40172b0:	1029883a 	mov	r20,r2
 40172b4:	dd401d83 	ldbu	r21,118(sp)
 40172b8:	df002215 	stw	fp,136(sp)
 40172bc:	0021883a 	mov	r16,zero
 40172c0:	da002a17 	ldw	r8,168(sp)
 40172c4:	003c3906 	br	40163ac <__alt_mem_onchip_memory2_0+0xfc01512c>
 40172c8:	d9402017 	ldw	r5,128(sp)
 40172cc:	d9002117 	ldw	r4,132(sp)
 40172d0:	d9801a04 	addi	r6,sp,104
 40172d4:	4015e8c0 	call	4015e8c <__sprint_r.part.0>
 40172d8:	103e691e 	bne	r2,zero,4016c80 <__alt_mem_onchip_memory2_0+0xfc015a00>
 40172dc:	d9001b17 	ldw	r4,108(sp)
 40172e0:	d8801c17 	ldw	r2,112(sp)
 40172e4:	d811883a 	mov	r8,sp
 40172e8:	21400044 	addi	r5,r4,1
 40172ec:	003e2e06 	br	4016ba8 <__alt_mem_onchip_memory2_0+0xfc015928>
 40172f0:	010100b4 	movhi	r4,1026
 40172f4:	211c2504 	addi	r4,r4,28820
 40172f8:	d9002315 	stw	r4,140(sp)
 40172fc:	d9001b17 	ldw	r4,108(sp)
 4017300:	21000044 	addi	r4,r4,1
 4017304:	003c5e06 	br	4016480 <__alt_mem_onchip_memory2_0+0xfc015200>
 4017308:	002b883a 	mov	r21,zero
 401730c:	00800084 	movi	r2,2
 4017310:	10803fcc 	andi	r2,r2,255
 4017314:	01000044 	movi	r4,1
 4017318:	11002b26 	beq	r2,r4,40173c8 <___vfiprintf_internal_r+0x1428>
 401731c:	01000084 	movi	r4,2
 4017320:	11002b1e 	bne	r2,r4,40173d0 <___vfiprintf_internal_r+0x1430>
 4017324:	1823883a 	mov	r17,r3
 4017328:	003ee506 	br	4016ec0 <__alt_mem_onchip_memory2_0+0xfc015c40>
 401732c:	8807883a 	mov	r3,r17
 4017330:	00800044 	movi	r2,1
 4017334:	003ff606 	br	4017310 <__alt_mem_onchip_memory2_0+0xfc016090>
 4017338:	00800184 	movi	r2,6
 401733c:	1400012e 	bgeu	r2,r16,4017344 <___vfiprintf_internal_r+0x13a4>
 4017340:	1021883a 	mov	r16,r2
 4017344:	8029883a 	mov	r20,r16
 4017348:	8027883a 	mov	r19,r16
 401734c:	80002216 	blt	r16,zero,40173d8 <___vfiprintf_internal_r+0x1438>
 4017350:	05c100b4 	movhi	r23,1026
 4017354:	df002215 	stw	fp,136(sp)
 4017358:	bddbc604 	addi	r23,r23,28440
 401735c:	003cfb06 	br	401674c <__alt_mem_onchip_memory2_0+0xfc0154cc>
 4017360:	d9002217 	ldw	r4,136(sp)
 4017364:	d9402417 	ldw	r5,144(sp)
 4017368:	20800017 	ldw	r2,0(r4)
 401736c:	21000104 	addi	r4,r4,4
 4017370:	d9002215 	stw	r4,136(sp)
 4017374:	11400015 	stw	r5,0(r2)
 4017378:	003b3d06 	br	4016070 <__alt_mem_onchip_memory2_0+0xfc014df0>
 401737c:	014100b4 	movhi	r5,1026
 4017380:	295c2504 	addi	r5,r5,28820
 4017384:	d9402315 	stw	r5,140(sp)
 4017388:	d9401b17 	ldw	r5,108(sp)
 401738c:	29400044 	addi	r5,r5,1
 4017390:	003e6d06 	br	4016d48 <__alt_mem_onchip_memory2_0+0xfc015ac8>
 4017394:	8029883a 	mov	r20,r16
 4017398:	dd401d83 	ldbu	r21,118(sp)
 401739c:	df002215 	stw	fp,136(sp)
 40173a0:	0021883a 	mov	r16,zero
 40173a4:	003c0106 	br	40163ac <__alt_mem_onchip_memory2_0+0xfc01512c>
 40173a8:	00c100b4 	movhi	r3,1026
 40173ac:	18dc2104 	addi	r3,r3,28804
 40173b0:	d8c02315 	stw	r3,140(sp)
 40173b4:	280d883a 	mov	r6,r5
 40173b8:	003c6906 	br	4016560 <__alt_mem_onchip_memory2_0+0xfc0152e0>
 40173bc:	802d883a 	mov	r22,r16
 40173c0:	0021883a 	mov	r16,zero
 40173c4:	003b5406 	br	4016118 <__alt_mem_onchip_memory2_0+0xfc014e98>
 40173c8:	1823883a 	mov	r17,r3
 40173cc:	003cf306 	br	401679c <__alt_mem_onchip_memory2_0+0xfc01551c>
 40173d0:	1823883a 	mov	r17,r3
 40173d4:	003cad06 	br	401668c <__alt_mem_onchip_memory2_0+0xfc01540c>
 40173d8:	0027883a 	mov	r19,zero
 40173dc:	003fdc06 	br	4017350 <__alt_mem_onchip_memory2_0+0xfc0160d0>
 40173e0:	d9402217 	ldw	r5,136(sp)
 40173e4:	8005883a 	mov	r2,r16
 40173e8:	b0c00043 	ldbu	r3,1(r22)
 40173ec:	2c000017 	ldw	r16,0(r5)
 40173f0:	29000104 	addi	r4,r5,4
 40173f4:	d9002215 	stw	r4,136(sp)
 40173f8:	102d883a 	mov	r22,r2
 40173fc:	803fa50e 	bge	r16,zero,4017294 <__alt_mem_onchip_memory2_0+0xfc016014>
 4017400:	18c03fcc 	andi	r3,r3,255
 4017404:	18c0201c 	xori	r3,r3,128
 4017408:	043fffc4 	movi	r16,-1
 401740c:	18ffe004 	addi	r3,r3,-128
 4017410:	003b4006 	br	4016114 <__alt_mem_onchip_memory2_0+0xfc014e94>
 4017414:	d9402303 	ldbu	r5,140(sp)
 4017418:	d9401d85 	stb	r5,118(sp)
 401741c:	003cae06 	br	40166d8 <__alt_mem_onchip_memory2_0+0xfc015458>
 4017420:	d8c02303 	ldbu	r3,140(sp)
 4017424:	d8c01d85 	stb	r3,118(sp)
 4017428:	003d1406 	br	401687c <__alt_mem_onchip_memory2_0+0xfc0155fc>
 401742c:	d8c02303 	ldbu	r3,140(sp)
 4017430:	d8c01d85 	stb	r3,118(sp)
 4017434:	003cca06 	br	4016760 <__alt_mem_onchip_memory2_0+0xfc0154e0>
 4017438:	8880004c 	andi	r2,r17,1
 401743c:	002b883a 	mov	r21,zero
 4017440:	10000526 	beq	r2,zero,4017458 <___vfiprintf_internal_r+0x14b8>
 4017444:	00800c04 	movi	r2,48
 4017448:	d88019c5 	stb	r2,103(sp)
 401744c:	dd002817 	ldw	r20,160(sp)
 4017450:	ddc019c4 	addi	r23,sp,103
 4017454:	003bd506 	br	40163ac <__alt_mem_onchip_memory2_0+0xfc01512c>
 4017458:	0029883a 	mov	r20,zero
 401745c:	ddc01a04 	addi	r23,sp,104
 4017460:	003bd206 	br	40163ac <__alt_mem_onchip_memory2_0+0xfc01512c>
 4017464:	d9002303 	ldbu	r4,140(sp)
 4017468:	d9001d85 	stb	r4,118(sp)
 401746c:	003da606 	br	4016b08 <__alt_mem_onchip_memory2_0+0xfc015888>
 4017470:	d8c02303 	ldbu	r3,140(sp)
 4017474:	d8c01d85 	stb	r3,118(sp)
 4017478:	003c7606 	br	4016654 <__alt_mem_onchip_memory2_0+0xfc0153d4>
 401747c:	d8c02303 	ldbu	r3,140(sp)
 4017480:	d8c01d85 	stb	r3,118(sp)
 4017484:	003c6506 	br	401661c <__alt_mem_onchip_memory2_0+0xfc01539c>
 4017488:	d9002303 	ldbu	r4,140(sp)
 401748c:	d9001d85 	stb	r4,118(sp)
 4017490:	003d3d06 	br	4016988 <__alt_mem_onchip_memory2_0+0xfc015708>
 4017494:	d8c02303 	ldbu	r3,140(sp)
 4017498:	d8c01d85 	stb	r3,118(sp)
 401749c:	003d1d06 	br	4016914 <__alt_mem_onchip_memory2_0+0xfc015694>
 40174a0:	d8c02303 	ldbu	r3,140(sp)
 40174a4:	d8c01d85 	stb	r3,118(sp)
 40174a8:	003d0306 	br	40168b8 <__alt_mem_onchip_memory2_0+0xfc015638>

040174ac <__vfiprintf_internal>:
 40174ac:	008100f4 	movhi	r2,1027
 40174b0:	10a8a704 	addi	r2,r2,-23908
 40174b4:	300f883a 	mov	r7,r6
 40174b8:	280d883a 	mov	r6,r5
 40174bc:	200b883a 	mov	r5,r4
 40174c0:	11000017 	ldw	r4,0(r2)
 40174c4:	4015fa01 	jmpi	4015fa0 <___vfiprintf_internal_r>

040174c8 <__sbprintf>:
 40174c8:	2880030b 	ldhu	r2,12(r5)
 40174cc:	2ac01917 	ldw	r11,100(r5)
 40174d0:	2a80038b 	ldhu	r10,14(r5)
 40174d4:	2a400717 	ldw	r9,28(r5)
 40174d8:	2a000917 	ldw	r8,36(r5)
 40174dc:	defee204 	addi	sp,sp,-1144
 40174e0:	00c10004 	movi	r3,1024
 40174e4:	dc011a15 	stw	r16,1128(sp)
 40174e8:	10bfff4c 	andi	r2,r2,65533
 40174ec:	2821883a 	mov	r16,r5
 40174f0:	d8cb883a 	add	r5,sp,r3
 40174f4:	dc811c15 	stw	r18,1136(sp)
 40174f8:	dc411b15 	stw	r17,1132(sp)
 40174fc:	dfc11d15 	stw	ra,1140(sp)
 4017500:	2025883a 	mov	r18,r4
 4017504:	d881030d 	sth	r2,1036(sp)
 4017508:	dac11915 	stw	r11,1124(sp)
 401750c:	da81038d 	sth	r10,1038(sp)
 4017510:	da410715 	stw	r9,1052(sp)
 4017514:	da010915 	stw	r8,1060(sp)
 4017518:	dec10015 	stw	sp,1024(sp)
 401751c:	dec10415 	stw	sp,1040(sp)
 4017520:	d8c10215 	stw	r3,1032(sp)
 4017524:	d8c10515 	stw	r3,1044(sp)
 4017528:	d8010615 	stw	zero,1048(sp)
 401752c:	4015fa00 	call	4015fa0 <___vfiprintf_internal_r>
 4017530:	1023883a 	mov	r17,r2
 4017534:	10000416 	blt	r2,zero,4017548 <__sbprintf+0x80>
 4017538:	d9410004 	addi	r5,sp,1024
 401753c:	9009883a 	mov	r4,r18
 4017540:	40131c00 	call	40131c0 <_fflush_r>
 4017544:	10000d1e 	bne	r2,zero,401757c <__sbprintf+0xb4>
 4017548:	d881030b 	ldhu	r2,1036(sp)
 401754c:	1080100c 	andi	r2,r2,64
 4017550:	10000326 	beq	r2,zero,4017560 <__sbprintf+0x98>
 4017554:	8080030b 	ldhu	r2,12(r16)
 4017558:	10801014 	ori	r2,r2,64
 401755c:	8080030d 	sth	r2,12(r16)
 4017560:	8805883a 	mov	r2,r17
 4017564:	dfc11d17 	ldw	ra,1140(sp)
 4017568:	dc811c17 	ldw	r18,1136(sp)
 401756c:	dc411b17 	ldw	r17,1132(sp)
 4017570:	dc011a17 	ldw	r16,1128(sp)
 4017574:	dec11e04 	addi	sp,sp,1144
 4017578:	f800283a 	ret
 401757c:	047fffc4 	movi	r17,-1
 4017580:	003ff106 	br	4017548 <__alt_mem_onchip_memory2_0+0xfc0162c8>

04017584 <__swbuf_r>:
 4017584:	defffb04 	addi	sp,sp,-20
 4017588:	dcc00315 	stw	r19,12(sp)
 401758c:	dc800215 	stw	r18,8(sp)
 4017590:	dc000015 	stw	r16,0(sp)
 4017594:	dfc00415 	stw	ra,16(sp)
 4017598:	dc400115 	stw	r17,4(sp)
 401759c:	2025883a 	mov	r18,r4
 40175a0:	2827883a 	mov	r19,r5
 40175a4:	3021883a 	mov	r16,r6
 40175a8:	20000226 	beq	r4,zero,40175b4 <__swbuf_r+0x30>
 40175ac:	20800e17 	ldw	r2,56(r4)
 40175b0:	10004226 	beq	r2,zero,40176bc <__swbuf_r+0x138>
 40175b4:	80800617 	ldw	r2,24(r16)
 40175b8:	8100030b 	ldhu	r4,12(r16)
 40175bc:	80800215 	stw	r2,8(r16)
 40175c0:	2080020c 	andi	r2,r4,8
 40175c4:	10003626 	beq	r2,zero,40176a0 <__swbuf_r+0x11c>
 40175c8:	80c00417 	ldw	r3,16(r16)
 40175cc:	18003426 	beq	r3,zero,40176a0 <__swbuf_r+0x11c>
 40175d0:	2088000c 	andi	r2,r4,8192
 40175d4:	9c403fcc 	andi	r17,r19,255
 40175d8:	10001a26 	beq	r2,zero,4017644 <__swbuf_r+0xc0>
 40175dc:	80800017 	ldw	r2,0(r16)
 40175e0:	81000517 	ldw	r4,20(r16)
 40175e4:	10c7c83a 	sub	r3,r2,r3
 40175e8:	1900200e 	bge	r3,r4,401766c <__swbuf_r+0xe8>
 40175ec:	18c00044 	addi	r3,r3,1
 40175f0:	81000217 	ldw	r4,8(r16)
 40175f4:	11400044 	addi	r5,r2,1
 40175f8:	81400015 	stw	r5,0(r16)
 40175fc:	213fffc4 	addi	r4,r4,-1
 4017600:	81000215 	stw	r4,8(r16)
 4017604:	14c00005 	stb	r19,0(r2)
 4017608:	80800517 	ldw	r2,20(r16)
 401760c:	10c01e26 	beq	r2,r3,4017688 <__swbuf_r+0x104>
 4017610:	8080030b 	ldhu	r2,12(r16)
 4017614:	1080004c 	andi	r2,r2,1
 4017618:	10000226 	beq	r2,zero,4017624 <__swbuf_r+0xa0>
 401761c:	00800284 	movi	r2,10
 4017620:	88801926 	beq	r17,r2,4017688 <__swbuf_r+0x104>
 4017624:	8805883a 	mov	r2,r17
 4017628:	dfc00417 	ldw	ra,16(sp)
 401762c:	dcc00317 	ldw	r19,12(sp)
 4017630:	dc800217 	ldw	r18,8(sp)
 4017634:	dc400117 	ldw	r17,4(sp)
 4017638:	dc000017 	ldw	r16,0(sp)
 401763c:	dec00504 	addi	sp,sp,20
 4017640:	f800283a 	ret
 4017644:	81401917 	ldw	r5,100(r16)
 4017648:	00b7ffc4 	movi	r2,-8193
 401764c:	21080014 	ori	r4,r4,8192
 4017650:	2884703a 	and	r2,r5,r2
 4017654:	80801915 	stw	r2,100(r16)
 4017658:	80800017 	ldw	r2,0(r16)
 401765c:	8100030d 	sth	r4,12(r16)
 4017660:	81000517 	ldw	r4,20(r16)
 4017664:	10c7c83a 	sub	r3,r2,r3
 4017668:	193fe016 	blt	r3,r4,40175ec <__alt_mem_onchip_memory2_0+0xfc01636c>
 401766c:	800b883a 	mov	r5,r16
 4017670:	9009883a 	mov	r4,r18
 4017674:	40131c00 	call	40131c0 <_fflush_r>
 4017678:	1000071e 	bne	r2,zero,4017698 <__swbuf_r+0x114>
 401767c:	80800017 	ldw	r2,0(r16)
 4017680:	00c00044 	movi	r3,1
 4017684:	003fda06 	br	40175f0 <__alt_mem_onchip_memory2_0+0xfc016370>
 4017688:	800b883a 	mov	r5,r16
 401768c:	9009883a 	mov	r4,r18
 4017690:	40131c00 	call	40131c0 <_fflush_r>
 4017694:	103fe326 	beq	r2,zero,4017624 <__alt_mem_onchip_memory2_0+0xfc0163a4>
 4017698:	00bfffc4 	movi	r2,-1
 401769c:	003fe206 	br	4017628 <__alt_mem_onchip_memory2_0+0xfc0163a8>
 40176a0:	800b883a 	mov	r5,r16
 40176a4:	9009883a 	mov	r4,r18
 40176a8:	40115a00 	call	40115a0 <__swsetup_r>
 40176ac:	103ffa1e 	bne	r2,zero,4017698 <__alt_mem_onchip_memory2_0+0xfc016418>
 40176b0:	8100030b 	ldhu	r4,12(r16)
 40176b4:	80c00417 	ldw	r3,16(r16)
 40176b8:	003fc506 	br	40175d0 <__alt_mem_onchip_memory2_0+0xfc016350>
 40176bc:	40135ac0 	call	40135ac <__sinit>
 40176c0:	003fbc06 	br	40175b4 <__alt_mem_onchip_memory2_0+0xfc016334>

040176c4 <__swbuf>:
 40176c4:	008100f4 	movhi	r2,1027
 40176c8:	10a8a704 	addi	r2,r2,-23908
 40176cc:	280d883a 	mov	r6,r5
 40176d0:	200b883a 	mov	r5,r4
 40176d4:	11000017 	ldw	r4,0(r2)
 40176d8:	40175841 	jmpi	4017584 <__swbuf_r>

040176dc <_write_r>:
 40176dc:	defffd04 	addi	sp,sp,-12
 40176e0:	2805883a 	mov	r2,r5
 40176e4:	dc000015 	stw	r16,0(sp)
 40176e8:	040100f4 	movhi	r16,1027
 40176ec:	dc400115 	stw	r17,4(sp)
 40176f0:	300b883a 	mov	r5,r6
 40176f4:	84353904 	addi	r16,r16,-11036
 40176f8:	2023883a 	mov	r17,r4
 40176fc:	380d883a 	mov	r6,r7
 4017700:	1009883a 	mov	r4,r2
 4017704:	dfc00215 	stw	ra,8(sp)
 4017708:	80000015 	stw	zero,0(r16)
 401770c:	401be080 	call	401be08 <write>
 4017710:	00ffffc4 	movi	r3,-1
 4017714:	10c00526 	beq	r2,r3,401772c <_write_r+0x50>
 4017718:	dfc00217 	ldw	ra,8(sp)
 401771c:	dc400117 	ldw	r17,4(sp)
 4017720:	dc000017 	ldw	r16,0(sp)
 4017724:	dec00304 	addi	sp,sp,12
 4017728:	f800283a 	ret
 401772c:	80c00017 	ldw	r3,0(r16)
 4017730:	183ff926 	beq	r3,zero,4017718 <__alt_mem_onchip_memory2_0+0xfc016498>
 4017734:	88c00015 	stw	r3,0(r17)
 4017738:	003ff706 	br	4017718 <__alt_mem_onchip_memory2_0+0xfc016498>

0401773c <_close_r>:
 401773c:	defffd04 	addi	sp,sp,-12
 4017740:	dc000015 	stw	r16,0(sp)
 4017744:	040100f4 	movhi	r16,1027
 4017748:	dc400115 	stw	r17,4(sp)
 401774c:	84353904 	addi	r16,r16,-11036
 4017750:	2023883a 	mov	r17,r4
 4017754:	2809883a 	mov	r4,r5
 4017758:	dfc00215 	stw	ra,8(sp)
 401775c:	80000015 	stw	zero,0(r16)
 4017760:	401b30c0 	call	401b30c <close>
 4017764:	00ffffc4 	movi	r3,-1
 4017768:	10c00526 	beq	r2,r3,4017780 <_close_r+0x44>
 401776c:	dfc00217 	ldw	ra,8(sp)
 4017770:	dc400117 	ldw	r17,4(sp)
 4017774:	dc000017 	ldw	r16,0(sp)
 4017778:	dec00304 	addi	sp,sp,12
 401777c:	f800283a 	ret
 4017780:	80c00017 	ldw	r3,0(r16)
 4017784:	183ff926 	beq	r3,zero,401776c <__alt_mem_onchip_memory2_0+0xfc0164ec>
 4017788:	88c00015 	stw	r3,0(r17)
 401778c:	003ff706 	br	401776c <__alt_mem_onchip_memory2_0+0xfc0164ec>

04017790 <_calloc_r>:
 4017790:	defffe04 	addi	sp,sp,-8
 4017794:	2805883a 	mov	r2,r5
 4017798:	dc000015 	stw	r16,0(sp)
 401779c:	300b883a 	mov	r5,r6
 40177a0:	2021883a 	mov	r16,r4
 40177a4:	1009883a 	mov	r4,r2
 40177a8:	dfc00115 	stw	ra,4(sp)
 40177ac:	400cfd40 	call	400cfd4 <__mulsi3>
 40177b0:	100b883a 	mov	r5,r2
 40177b4:	8009883a 	mov	r4,r16
 40177b8:	400e13c0 	call	400e13c <_malloc_r>
 40177bc:	10002926 	beq	r2,zero,4017864 <_calloc_r+0xd4>
 40177c0:	11bfff17 	ldw	r6,-4(r2)
 40177c4:	1021883a 	mov	r16,r2
 40177c8:	00bfff04 	movi	r2,-4
 40177cc:	308c703a 	and	r6,r6,r2
 40177d0:	00c00904 	movi	r3,36
 40177d4:	308d883a 	add	r6,r6,r2
 40177d8:	19801636 	bltu	r3,r6,4017834 <_calloc_r+0xa4>
 40177dc:	008004c4 	movi	r2,19
 40177e0:	11800b2e 	bgeu	r2,r6,4017810 <_calloc_r+0x80>
 40177e4:	80000015 	stw	zero,0(r16)
 40177e8:	80000115 	stw	zero,4(r16)
 40177ec:	008006c4 	movi	r2,27
 40177f0:	11801a2e 	bgeu	r2,r6,401785c <_calloc_r+0xcc>
 40177f4:	80000215 	stw	zero,8(r16)
 40177f8:	80000315 	stw	zero,12(r16)
 40177fc:	30c0151e 	bne	r6,r3,4017854 <_calloc_r+0xc4>
 4017800:	80000415 	stw	zero,16(r16)
 4017804:	80800604 	addi	r2,r16,24
 4017808:	80000515 	stw	zero,20(r16)
 401780c:	00000106 	br	4017814 <_calloc_r+0x84>
 4017810:	8005883a 	mov	r2,r16
 4017814:	10000015 	stw	zero,0(r2)
 4017818:	10000115 	stw	zero,4(r2)
 401781c:	10000215 	stw	zero,8(r2)
 4017820:	8005883a 	mov	r2,r16
 4017824:	dfc00117 	ldw	ra,4(sp)
 4017828:	dc000017 	ldw	r16,0(sp)
 401782c:	dec00204 	addi	sp,sp,8
 4017830:	f800283a 	ret
 4017834:	000b883a 	mov	r5,zero
 4017838:	8009883a 	mov	r4,r16
 401783c:	400ea900 	call	400ea90 <memset>
 4017840:	8005883a 	mov	r2,r16
 4017844:	dfc00117 	ldw	ra,4(sp)
 4017848:	dc000017 	ldw	r16,0(sp)
 401784c:	dec00204 	addi	sp,sp,8
 4017850:	f800283a 	ret
 4017854:	80800404 	addi	r2,r16,16
 4017858:	003fee06 	br	4017814 <__alt_mem_onchip_memory2_0+0xfc016594>
 401785c:	80800204 	addi	r2,r16,8
 4017860:	003fec06 	br	4017814 <__alt_mem_onchip_memory2_0+0xfc016594>
 4017864:	0005883a 	mov	r2,zero
 4017868:	003fee06 	br	4017824 <__alt_mem_onchip_memory2_0+0xfc0165a4>

0401786c <_fclose_r>:
 401786c:	28003926 	beq	r5,zero,4017954 <_fclose_r+0xe8>
 4017870:	defffc04 	addi	sp,sp,-16
 4017874:	dc400115 	stw	r17,4(sp)
 4017878:	dc000015 	stw	r16,0(sp)
 401787c:	dfc00315 	stw	ra,12(sp)
 4017880:	dc800215 	stw	r18,8(sp)
 4017884:	2023883a 	mov	r17,r4
 4017888:	2821883a 	mov	r16,r5
 401788c:	20000226 	beq	r4,zero,4017898 <_fclose_r+0x2c>
 4017890:	20800e17 	ldw	r2,56(r4)
 4017894:	10002726 	beq	r2,zero,4017934 <_fclose_r+0xc8>
 4017898:	8080030f 	ldh	r2,12(r16)
 401789c:	1000071e 	bne	r2,zero,40178bc <_fclose_r+0x50>
 40178a0:	0005883a 	mov	r2,zero
 40178a4:	dfc00317 	ldw	ra,12(sp)
 40178a8:	dc800217 	ldw	r18,8(sp)
 40178ac:	dc400117 	ldw	r17,4(sp)
 40178b0:	dc000017 	ldw	r16,0(sp)
 40178b4:	dec00404 	addi	sp,sp,16
 40178b8:	f800283a 	ret
 40178bc:	800b883a 	mov	r5,r16
 40178c0:	8809883a 	mov	r4,r17
 40178c4:	4012fa40 	call	4012fa4 <__sflush_r>
 40178c8:	1025883a 	mov	r18,r2
 40178cc:	80800b17 	ldw	r2,44(r16)
 40178d0:	10000426 	beq	r2,zero,40178e4 <_fclose_r+0x78>
 40178d4:	81400717 	ldw	r5,28(r16)
 40178d8:	8809883a 	mov	r4,r17
 40178dc:	103ee83a 	callr	r2
 40178e0:	10001616 	blt	r2,zero,401793c <_fclose_r+0xd0>
 40178e4:	8080030b 	ldhu	r2,12(r16)
 40178e8:	1080200c 	andi	r2,r2,128
 40178ec:	1000151e 	bne	r2,zero,4017944 <_fclose_r+0xd8>
 40178f0:	81400c17 	ldw	r5,48(r16)
 40178f4:	28000526 	beq	r5,zero,401790c <_fclose_r+0xa0>
 40178f8:	80801004 	addi	r2,r16,64
 40178fc:	28800226 	beq	r5,r2,4017908 <_fclose_r+0x9c>
 4017900:	8809883a 	mov	r4,r17
 4017904:	40137200 	call	4013720 <_free_r>
 4017908:	80000c15 	stw	zero,48(r16)
 401790c:	81401117 	ldw	r5,68(r16)
 4017910:	28000326 	beq	r5,zero,4017920 <_fclose_r+0xb4>
 4017914:	8809883a 	mov	r4,r17
 4017918:	40137200 	call	4013720 <_free_r>
 401791c:	80001115 	stw	zero,68(r16)
 4017920:	40135bc0 	call	40135bc <__sfp_lock_acquire>
 4017924:	8000030d 	sth	zero,12(r16)
 4017928:	40135c00 	call	40135c0 <__sfp_lock_release>
 401792c:	9005883a 	mov	r2,r18
 4017930:	003fdc06 	br	40178a4 <__alt_mem_onchip_memory2_0+0xfc016624>
 4017934:	40135ac0 	call	40135ac <__sinit>
 4017938:	003fd706 	br	4017898 <__alt_mem_onchip_memory2_0+0xfc016618>
 401793c:	04bfffc4 	movi	r18,-1
 4017940:	003fe806 	br	40178e4 <__alt_mem_onchip_memory2_0+0xfc016664>
 4017944:	81400417 	ldw	r5,16(r16)
 4017948:	8809883a 	mov	r4,r17
 401794c:	40137200 	call	4013720 <_free_r>
 4017950:	003fe706 	br	40178f0 <__alt_mem_onchip_memory2_0+0xfc016670>
 4017954:	0005883a 	mov	r2,zero
 4017958:	f800283a 	ret

0401795c <fclose>:
 401795c:	008100f4 	movhi	r2,1027
 4017960:	10a8a704 	addi	r2,r2,-23908
 4017964:	200b883a 	mov	r5,r4
 4017968:	11000017 	ldw	r4,0(r2)
 401796c:	401786c1 	jmpi	401786c <_fclose_r>

04017970 <__fputwc>:
 4017970:	defff804 	addi	sp,sp,-32
 4017974:	dcc00415 	stw	r19,16(sp)
 4017978:	dc800315 	stw	r18,12(sp)
 401797c:	dc000115 	stw	r16,4(sp)
 4017980:	dfc00715 	stw	ra,28(sp)
 4017984:	dd400615 	stw	r21,24(sp)
 4017988:	dd000515 	stw	r20,20(sp)
 401798c:	dc400215 	stw	r17,8(sp)
 4017990:	2027883a 	mov	r19,r4
 4017994:	2825883a 	mov	r18,r5
 4017998:	3021883a 	mov	r16,r6
 401799c:	40141080 	call	4014108 <__locale_mb_cur_max>
 40179a0:	00c00044 	movi	r3,1
 40179a4:	10c03e26 	beq	r2,r3,4017aa0 <__fputwc+0x130>
 40179a8:	81c01704 	addi	r7,r16,92
 40179ac:	900d883a 	mov	r6,r18
 40179b0:	d80b883a 	mov	r5,sp
 40179b4:	9809883a 	mov	r4,r19
 40179b8:	4017ce80 	call	4017ce8 <_wcrtomb_r>
 40179bc:	1029883a 	mov	r20,r2
 40179c0:	00bfffc4 	movi	r2,-1
 40179c4:	a0802026 	beq	r20,r2,4017a48 <__fputwc+0xd8>
 40179c8:	d9400003 	ldbu	r5,0(sp)
 40179cc:	a0001c26 	beq	r20,zero,4017a40 <__fputwc+0xd0>
 40179d0:	0023883a 	mov	r17,zero
 40179d4:	05400284 	movi	r21,10
 40179d8:	00000906 	br	4017a00 <__fputwc+0x90>
 40179dc:	80800017 	ldw	r2,0(r16)
 40179e0:	11400005 	stb	r5,0(r2)
 40179e4:	80c00017 	ldw	r3,0(r16)
 40179e8:	18c00044 	addi	r3,r3,1
 40179ec:	80c00015 	stw	r3,0(r16)
 40179f0:	8c400044 	addi	r17,r17,1
 40179f4:	dc45883a 	add	r2,sp,r17
 40179f8:	8d00112e 	bgeu	r17,r20,4017a40 <__fputwc+0xd0>
 40179fc:	11400003 	ldbu	r5,0(r2)
 4017a00:	80c00217 	ldw	r3,8(r16)
 4017a04:	18ffffc4 	addi	r3,r3,-1
 4017a08:	80c00215 	stw	r3,8(r16)
 4017a0c:	183ff30e 	bge	r3,zero,40179dc <__alt_mem_onchip_memory2_0+0xfc01675c>
 4017a10:	80800617 	ldw	r2,24(r16)
 4017a14:	18801916 	blt	r3,r2,4017a7c <__fputwc+0x10c>
 4017a18:	80800017 	ldw	r2,0(r16)
 4017a1c:	11400005 	stb	r5,0(r2)
 4017a20:	80800017 	ldw	r2,0(r16)
 4017a24:	10c00003 	ldbu	r3,0(r2)
 4017a28:	10800044 	addi	r2,r2,1
 4017a2c:	1d402326 	beq	r3,r21,4017abc <__fputwc+0x14c>
 4017a30:	80800015 	stw	r2,0(r16)
 4017a34:	8c400044 	addi	r17,r17,1
 4017a38:	dc45883a 	add	r2,sp,r17
 4017a3c:	8d3fef36 	bltu	r17,r20,40179fc <__alt_mem_onchip_memory2_0+0xfc01677c>
 4017a40:	9005883a 	mov	r2,r18
 4017a44:	00000406 	br	4017a58 <__fputwc+0xe8>
 4017a48:	80c0030b 	ldhu	r3,12(r16)
 4017a4c:	a005883a 	mov	r2,r20
 4017a50:	18c01014 	ori	r3,r3,64
 4017a54:	80c0030d 	sth	r3,12(r16)
 4017a58:	dfc00717 	ldw	ra,28(sp)
 4017a5c:	dd400617 	ldw	r21,24(sp)
 4017a60:	dd000517 	ldw	r20,20(sp)
 4017a64:	dcc00417 	ldw	r19,16(sp)
 4017a68:	dc800317 	ldw	r18,12(sp)
 4017a6c:	dc400217 	ldw	r17,8(sp)
 4017a70:	dc000117 	ldw	r16,4(sp)
 4017a74:	dec00804 	addi	sp,sp,32
 4017a78:	f800283a 	ret
 4017a7c:	800d883a 	mov	r6,r16
 4017a80:	29403fcc 	andi	r5,r5,255
 4017a84:	9809883a 	mov	r4,r19
 4017a88:	40175840 	call	4017584 <__swbuf_r>
 4017a8c:	10bfffe0 	cmpeqi	r2,r2,-1
 4017a90:	10803fcc 	andi	r2,r2,255
 4017a94:	103fd626 	beq	r2,zero,40179f0 <__alt_mem_onchip_memory2_0+0xfc016770>
 4017a98:	00bfffc4 	movi	r2,-1
 4017a9c:	003fee06 	br	4017a58 <__alt_mem_onchip_memory2_0+0xfc0167d8>
 4017aa0:	90ffffc4 	addi	r3,r18,-1
 4017aa4:	01003f84 	movi	r4,254
 4017aa8:	20ffbf36 	bltu	r4,r3,40179a8 <__alt_mem_onchip_memory2_0+0xfc016728>
 4017aac:	900b883a 	mov	r5,r18
 4017ab0:	dc800005 	stb	r18,0(sp)
 4017ab4:	1029883a 	mov	r20,r2
 4017ab8:	003fc506 	br	40179d0 <__alt_mem_onchip_memory2_0+0xfc016750>
 4017abc:	800d883a 	mov	r6,r16
 4017ac0:	a80b883a 	mov	r5,r21
 4017ac4:	9809883a 	mov	r4,r19
 4017ac8:	40175840 	call	4017584 <__swbuf_r>
 4017acc:	10bfffe0 	cmpeqi	r2,r2,-1
 4017ad0:	003fef06 	br	4017a90 <__alt_mem_onchip_memory2_0+0xfc016810>

04017ad4 <_fputwc_r>:
 4017ad4:	3080030b 	ldhu	r2,12(r6)
 4017ad8:	10c8000c 	andi	r3,r2,8192
 4017adc:	1800051e 	bne	r3,zero,4017af4 <_fputwc_r+0x20>
 4017ae0:	30c01917 	ldw	r3,100(r6)
 4017ae4:	10880014 	ori	r2,r2,8192
 4017ae8:	3080030d 	sth	r2,12(r6)
 4017aec:	18880014 	ori	r2,r3,8192
 4017af0:	30801915 	stw	r2,100(r6)
 4017af4:	40179701 	jmpi	4017970 <__fputwc>

04017af8 <fputwc>:
 4017af8:	008100f4 	movhi	r2,1027
 4017afc:	defffc04 	addi	sp,sp,-16
 4017b00:	10a8a704 	addi	r2,r2,-23908
 4017b04:	dc000115 	stw	r16,4(sp)
 4017b08:	14000017 	ldw	r16,0(r2)
 4017b0c:	dc400215 	stw	r17,8(sp)
 4017b10:	dfc00315 	stw	ra,12(sp)
 4017b14:	2023883a 	mov	r17,r4
 4017b18:	80000226 	beq	r16,zero,4017b24 <fputwc+0x2c>
 4017b1c:	80800e17 	ldw	r2,56(r16)
 4017b20:	10001026 	beq	r2,zero,4017b64 <fputwc+0x6c>
 4017b24:	2880030b 	ldhu	r2,12(r5)
 4017b28:	10c8000c 	andi	r3,r2,8192
 4017b2c:	1800051e 	bne	r3,zero,4017b44 <fputwc+0x4c>
 4017b30:	28c01917 	ldw	r3,100(r5)
 4017b34:	10880014 	ori	r2,r2,8192
 4017b38:	2880030d 	sth	r2,12(r5)
 4017b3c:	18880014 	ori	r2,r3,8192
 4017b40:	28801915 	stw	r2,100(r5)
 4017b44:	280d883a 	mov	r6,r5
 4017b48:	8009883a 	mov	r4,r16
 4017b4c:	880b883a 	mov	r5,r17
 4017b50:	dfc00317 	ldw	ra,12(sp)
 4017b54:	dc400217 	ldw	r17,8(sp)
 4017b58:	dc000117 	ldw	r16,4(sp)
 4017b5c:	dec00404 	addi	sp,sp,16
 4017b60:	40179701 	jmpi	4017970 <__fputwc>
 4017b64:	8009883a 	mov	r4,r16
 4017b68:	d9400015 	stw	r5,0(sp)
 4017b6c:	40135ac0 	call	40135ac <__sinit>
 4017b70:	d9400017 	ldw	r5,0(sp)
 4017b74:	003feb06 	br	4017b24 <__alt_mem_onchip_memory2_0+0xfc0168a4>

04017b78 <_fstat_r>:
 4017b78:	defffd04 	addi	sp,sp,-12
 4017b7c:	2805883a 	mov	r2,r5
 4017b80:	dc000015 	stw	r16,0(sp)
 4017b84:	040100f4 	movhi	r16,1027
 4017b88:	dc400115 	stw	r17,4(sp)
 4017b8c:	84353904 	addi	r16,r16,-11036
 4017b90:	2023883a 	mov	r17,r4
 4017b94:	300b883a 	mov	r5,r6
 4017b98:	1009883a 	mov	r4,r2
 4017b9c:	dfc00215 	stw	ra,8(sp)
 4017ba0:	80000015 	stw	zero,0(r16)
 4017ba4:	401b4800 	call	401b480 <fstat>
 4017ba8:	00ffffc4 	movi	r3,-1
 4017bac:	10c00526 	beq	r2,r3,4017bc4 <_fstat_r+0x4c>
 4017bb0:	dfc00217 	ldw	ra,8(sp)
 4017bb4:	dc400117 	ldw	r17,4(sp)
 4017bb8:	dc000017 	ldw	r16,0(sp)
 4017bbc:	dec00304 	addi	sp,sp,12
 4017bc0:	f800283a 	ret
 4017bc4:	80c00017 	ldw	r3,0(r16)
 4017bc8:	183ff926 	beq	r3,zero,4017bb0 <__alt_mem_onchip_memory2_0+0xfc016930>
 4017bcc:	88c00015 	stw	r3,0(r17)
 4017bd0:	003ff706 	br	4017bb0 <__alt_mem_onchip_memory2_0+0xfc016930>

04017bd4 <_isatty_r>:
 4017bd4:	defffd04 	addi	sp,sp,-12
 4017bd8:	dc000015 	stw	r16,0(sp)
 4017bdc:	040100f4 	movhi	r16,1027
 4017be0:	dc400115 	stw	r17,4(sp)
 4017be4:	84353904 	addi	r16,r16,-11036
 4017be8:	2023883a 	mov	r17,r4
 4017bec:	2809883a 	mov	r4,r5
 4017bf0:	dfc00215 	stw	ra,8(sp)
 4017bf4:	80000015 	stw	zero,0(r16)
 4017bf8:	401b5940 	call	401b594 <isatty>
 4017bfc:	00ffffc4 	movi	r3,-1
 4017c00:	10c00526 	beq	r2,r3,4017c18 <_isatty_r+0x44>
 4017c04:	dfc00217 	ldw	ra,8(sp)
 4017c08:	dc400117 	ldw	r17,4(sp)
 4017c0c:	dc000017 	ldw	r16,0(sp)
 4017c10:	dec00304 	addi	sp,sp,12
 4017c14:	f800283a 	ret
 4017c18:	80c00017 	ldw	r3,0(r16)
 4017c1c:	183ff926 	beq	r3,zero,4017c04 <__alt_mem_onchip_memory2_0+0xfc016984>
 4017c20:	88c00015 	stw	r3,0(r17)
 4017c24:	003ff706 	br	4017c04 <__alt_mem_onchip_memory2_0+0xfc016984>

04017c28 <_lseek_r>:
 4017c28:	defffd04 	addi	sp,sp,-12
 4017c2c:	2805883a 	mov	r2,r5
 4017c30:	dc000015 	stw	r16,0(sp)
 4017c34:	040100f4 	movhi	r16,1027
 4017c38:	dc400115 	stw	r17,4(sp)
 4017c3c:	300b883a 	mov	r5,r6
 4017c40:	84353904 	addi	r16,r16,-11036
 4017c44:	2023883a 	mov	r17,r4
 4017c48:	380d883a 	mov	r6,r7
 4017c4c:	1009883a 	mov	r4,r2
 4017c50:	dfc00215 	stw	ra,8(sp)
 4017c54:	80000015 	stw	zero,0(r16)
 4017c58:	401b8d40 	call	401b8d4 <lseek>
 4017c5c:	00ffffc4 	movi	r3,-1
 4017c60:	10c00526 	beq	r2,r3,4017c78 <_lseek_r+0x50>
 4017c64:	dfc00217 	ldw	ra,8(sp)
 4017c68:	dc400117 	ldw	r17,4(sp)
 4017c6c:	dc000017 	ldw	r16,0(sp)
 4017c70:	dec00304 	addi	sp,sp,12
 4017c74:	f800283a 	ret
 4017c78:	80c00017 	ldw	r3,0(r16)
 4017c7c:	183ff926 	beq	r3,zero,4017c64 <__alt_mem_onchip_memory2_0+0xfc0169e4>
 4017c80:	88c00015 	stw	r3,0(r17)
 4017c84:	003ff706 	br	4017c64 <__alt_mem_onchip_memory2_0+0xfc0169e4>

04017c88 <_read_r>:
 4017c88:	defffd04 	addi	sp,sp,-12
 4017c8c:	2805883a 	mov	r2,r5
 4017c90:	dc000015 	stw	r16,0(sp)
 4017c94:	040100f4 	movhi	r16,1027
 4017c98:	dc400115 	stw	r17,4(sp)
 4017c9c:	300b883a 	mov	r5,r6
 4017ca0:	84353904 	addi	r16,r16,-11036
 4017ca4:	2023883a 	mov	r17,r4
 4017ca8:	380d883a 	mov	r6,r7
 4017cac:	1009883a 	mov	r4,r2
 4017cb0:	dfc00215 	stw	ra,8(sp)
 4017cb4:	80000015 	stw	zero,0(r16)
 4017cb8:	401bab00 	call	401bab0 <read>
 4017cbc:	00ffffc4 	movi	r3,-1
 4017cc0:	10c00526 	beq	r2,r3,4017cd8 <_read_r+0x50>
 4017cc4:	dfc00217 	ldw	ra,8(sp)
 4017cc8:	dc400117 	ldw	r17,4(sp)
 4017ccc:	dc000017 	ldw	r16,0(sp)
 4017cd0:	dec00304 	addi	sp,sp,12
 4017cd4:	f800283a 	ret
 4017cd8:	80c00017 	ldw	r3,0(r16)
 4017cdc:	183ff926 	beq	r3,zero,4017cc4 <__alt_mem_onchip_memory2_0+0xfc016a44>
 4017ce0:	88c00015 	stw	r3,0(r17)
 4017ce4:	003ff706 	br	4017cc4 <__alt_mem_onchip_memory2_0+0xfc016a44>

04017ce8 <_wcrtomb_r>:
 4017ce8:	defff604 	addi	sp,sp,-40
 4017cec:	008100f4 	movhi	r2,1027
 4017cf0:	dc800815 	stw	r18,32(sp)
 4017cf4:	dc400715 	stw	r17,28(sp)
 4017cf8:	dc000615 	stw	r16,24(sp)
 4017cfc:	10a8ab04 	addi	r2,r2,-23892
 4017d00:	dfc00915 	stw	ra,36(sp)
 4017d04:	2021883a 	mov	r16,r4
 4017d08:	3823883a 	mov	r17,r7
 4017d0c:	14800017 	ldw	r18,0(r2)
 4017d10:	28001426 	beq	r5,zero,4017d64 <_wcrtomb_r+0x7c>
 4017d14:	d9400415 	stw	r5,16(sp)
 4017d18:	d9800515 	stw	r6,20(sp)
 4017d1c:	40140fc0 	call	40140fc <__locale_charset>
 4017d20:	d9800517 	ldw	r6,20(sp)
 4017d24:	d9400417 	ldw	r5,16(sp)
 4017d28:	100f883a 	mov	r7,r2
 4017d2c:	dc400015 	stw	r17,0(sp)
 4017d30:	8009883a 	mov	r4,r16
 4017d34:	903ee83a 	callr	r18
 4017d38:	00ffffc4 	movi	r3,-1
 4017d3c:	10c0031e 	bne	r2,r3,4017d4c <_wcrtomb_r+0x64>
 4017d40:	88000015 	stw	zero,0(r17)
 4017d44:	00c02284 	movi	r3,138
 4017d48:	80c00015 	stw	r3,0(r16)
 4017d4c:	dfc00917 	ldw	ra,36(sp)
 4017d50:	dc800817 	ldw	r18,32(sp)
 4017d54:	dc400717 	ldw	r17,28(sp)
 4017d58:	dc000617 	ldw	r16,24(sp)
 4017d5c:	dec00a04 	addi	sp,sp,40
 4017d60:	f800283a 	ret
 4017d64:	40140fc0 	call	40140fc <__locale_charset>
 4017d68:	100f883a 	mov	r7,r2
 4017d6c:	dc400015 	stw	r17,0(sp)
 4017d70:	000d883a 	mov	r6,zero
 4017d74:	d9400104 	addi	r5,sp,4
 4017d78:	8009883a 	mov	r4,r16
 4017d7c:	903ee83a 	callr	r18
 4017d80:	003fed06 	br	4017d38 <__alt_mem_onchip_memory2_0+0xfc016ab8>

04017d84 <wcrtomb>:
 4017d84:	defff604 	addi	sp,sp,-40
 4017d88:	008100f4 	movhi	r2,1027
 4017d8c:	dc800615 	stw	r18,24(sp)
 4017d90:	dc400515 	stw	r17,20(sp)
 4017d94:	10a8a704 	addi	r2,r2,-23908
 4017d98:	dfc00915 	stw	ra,36(sp)
 4017d9c:	dd000815 	stw	r20,32(sp)
 4017da0:	dcc00715 	stw	r19,28(sp)
 4017da4:	dc000415 	stw	r16,16(sp)
 4017da8:	3025883a 	mov	r18,r6
 4017dac:	14400017 	ldw	r17,0(r2)
 4017db0:	20001926 	beq	r4,zero,4017e18 <wcrtomb+0x94>
 4017db4:	008100f4 	movhi	r2,1027
 4017db8:	10a8ab04 	addi	r2,r2,-23892
 4017dbc:	15000017 	ldw	r20,0(r2)
 4017dc0:	2021883a 	mov	r16,r4
 4017dc4:	2827883a 	mov	r19,r5
 4017dc8:	40140fc0 	call	40140fc <__locale_charset>
 4017dcc:	100f883a 	mov	r7,r2
 4017dd0:	dc800015 	stw	r18,0(sp)
 4017dd4:	980d883a 	mov	r6,r19
 4017dd8:	800b883a 	mov	r5,r16
 4017ddc:	8809883a 	mov	r4,r17
 4017de0:	a03ee83a 	callr	r20
 4017de4:	00ffffc4 	movi	r3,-1
 4017de8:	10c0031e 	bne	r2,r3,4017df8 <wcrtomb+0x74>
 4017dec:	90000015 	stw	zero,0(r18)
 4017df0:	00c02284 	movi	r3,138
 4017df4:	88c00015 	stw	r3,0(r17)
 4017df8:	dfc00917 	ldw	ra,36(sp)
 4017dfc:	dd000817 	ldw	r20,32(sp)
 4017e00:	dcc00717 	ldw	r19,28(sp)
 4017e04:	dc800617 	ldw	r18,24(sp)
 4017e08:	dc400517 	ldw	r17,20(sp)
 4017e0c:	dc000417 	ldw	r16,16(sp)
 4017e10:	dec00a04 	addi	sp,sp,40
 4017e14:	f800283a 	ret
 4017e18:	008100f4 	movhi	r2,1027
 4017e1c:	10a8ab04 	addi	r2,r2,-23892
 4017e20:	14000017 	ldw	r16,0(r2)
 4017e24:	40140fc0 	call	40140fc <__locale_charset>
 4017e28:	100f883a 	mov	r7,r2
 4017e2c:	dc800015 	stw	r18,0(sp)
 4017e30:	000d883a 	mov	r6,zero
 4017e34:	d9400104 	addi	r5,sp,4
 4017e38:	8809883a 	mov	r4,r17
 4017e3c:	803ee83a 	callr	r16
 4017e40:	003fe806 	br	4017de4 <__alt_mem_onchip_memory2_0+0xfc016b64>

04017e44 <__ascii_wctomb>:
 4017e44:	28000526 	beq	r5,zero,4017e5c <__ascii_wctomb+0x18>
 4017e48:	00803fc4 	movi	r2,255
 4017e4c:	11800536 	bltu	r2,r6,4017e64 <__ascii_wctomb+0x20>
 4017e50:	29800005 	stb	r6,0(r5)
 4017e54:	00800044 	movi	r2,1
 4017e58:	f800283a 	ret
 4017e5c:	0005883a 	mov	r2,zero
 4017e60:	f800283a 	ret
 4017e64:	00802284 	movi	r2,138
 4017e68:	20800015 	stw	r2,0(r4)
 4017e6c:	00bfffc4 	movi	r2,-1
 4017e70:	f800283a 	ret

04017e74 <_wctomb_r>:
 4017e74:	008100f4 	movhi	r2,1027
 4017e78:	defff904 	addi	sp,sp,-28
 4017e7c:	10a8ab04 	addi	r2,r2,-23892
 4017e80:	dfc00615 	stw	ra,24(sp)
 4017e84:	dc400515 	stw	r17,20(sp)
 4017e88:	dc000415 	stw	r16,16(sp)
 4017e8c:	3823883a 	mov	r17,r7
 4017e90:	14000017 	ldw	r16,0(r2)
 4017e94:	d9000115 	stw	r4,4(sp)
 4017e98:	d9400215 	stw	r5,8(sp)
 4017e9c:	d9800315 	stw	r6,12(sp)
 4017ea0:	40140fc0 	call	40140fc <__locale_charset>
 4017ea4:	d9800317 	ldw	r6,12(sp)
 4017ea8:	d9400217 	ldw	r5,8(sp)
 4017eac:	d9000117 	ldw	r4,4(sp)
 4017eb0:	100f883a 	mov	r7,r2
 4017eb4:	dc400015 	stw	r17,0(sp)
 4017eb8:	803ee83a 	callr	r16
 4017ebc:	dfc00617 	ldw	ra,24(sp)
 4017ec0:	dc400517 	ldw	r17,20(sp)
 4017ec4:	dc000417 	ldw	r16,16(sp)
 4017ec8:	dec00704 	addi	sp,sp,28
 4017ecc:	f800283a 	ret

04017ed0 <__udivdi3>:
 4017ed0:	defff404 	addi	sp,sp,-48
 4017ed4:	dcc00515 	stw	r19,20(sp)
 4017ed8:	dc000215 	stw	r16,8(sp)
 4017edc:	dfc00b15 	stw	ra,44(sp)
 4017ee0:	df000a15 	stw	fp,40(sp)
 4017ee4:	ddc00915 	stw	r23,36(sp)
 4017ee8:	dd800815 	stw	r22,32(sp)
 4017eec:	dd400715 	stw	r21,28(sp)
 4017ef0:	dd000615 	stw	r20,24(sp)
 4017ef4:	dc800415 	stw	r18,16(sp)
 4017ef8:	dc400315 	stw	r17,12(sp)
 4017efc:	2027883a 	mov	r19,r4
 4017f00:	2821883a 	mov	r16,r5
 4017f04:	3800461e 	bne	r7,zero,4018020 <__udivdi3+0x150>
 4017f08:	3023883a 	mov	r17,r6
 4017f0c:	2025883a 	mov	r18,r4
 4017f10:	2980572e 	bgeu	r5,r6,4018070 <__udivdi3+0x1a0>
 4017f14:	00bfffd4 	movui	r2,65535
 4017f18:	282d883a 	mov	r22,r5
 4017f1c:	1180b236 	bltu	r2,r6,40181e8 <__udivdi3+0x318>
 4017f20:	00803fc4 	movi	r2,255
 4017f24:	1185803a 	cmpltu	r2,r2,r6
 4017f28:	100490fa 	slli	r2,r2,3
 4017f2c:	3086d83a 	srl	r3,r6,r2
 4017f30:	010100b4 	movhi	r4,1026
 4017f34:	211b7604 	addi	r4,r4,28120
 4017f38:	20c7883a 	add	r3,r4,r3
 4017f3c:	18c00003 	ldbu	r3,0(r3)
 4017f40:	1885883a 	add	r2,r3,r2
 4017f44:	00c00804 	movi	r3,32
 4017f48:	1887c83a 	sub	r3,r3,r2
 4017f4c:	18000526 	beq	r3,zero,4017f64 <__udivdi3+0x94>
 4017f50:	80e0983a 	sll	r16,r16,r3
 4017f54:	9884d83a 	srl	r2,r19,r2
 4017f58:	30e2983a 	sll	r17,r6,r3
 4017f5c:	98e4983a 	sll	r18,r19,r3
 4017f60:	142cb03a 	or	r22,r2,r16
 4017f64:	882ad43a 	srli	r21,r17,16
 4017f68:	b009883a 	mov	r4,r22
 4017f6c:	8d3fffcc 	andi	r20,r17,65535
 4017f70:	a80b883a 	mov	r5,r21
 4017f74:	400cf7c0 	call	400cf7c <__umodsi3>
 4017f78:	b009883a 	mov	r4,r22
 4017f7c:	a80b883a 	mov	r5,r21
 4017f80:	1027883a 	mov	r19,r2
 4017f84:	400cf180 	call	400cf18 <__udivsi3>
 4017f88:	100b883a 	mov	r5,r2
 4017f8c:	a009883a 	mov	r4,r20
 4017f90:	102d883a 	mov	r22,r2
 4017f94:	400cfd40 	call	400cfd4 <__mulsi3>
 4017f98:	9826943a 	slli	r19,r19,16
 4017f9c:	9006d43a 	srli	r3,r18,16
 4017fa0:	1cc6b03a 	or	r3,r3,r19
 4017fa4:	1880052e 	bgeu	r3,r2,4017fbc <__udivdi3+0xec>
 4017fa8:	1c47883a 	add	r3,r3,r17
 4017fac:	b13fffc4 	addi	r4,r22,-1
 4017fb0:	1c400136 	bltu	r3,r17,4017fb8 <__udivdi3+0xe8>
 4017fb4:	18814236 	bltu	r3,r2,40184c0 <__udivdi3+0x5f0>
 4017fb8:	202d883a 	mov	r22,r4
 4017fbc:	18a1c83a 	sub	r16,r3,r2
 4017fc0:	8009883a 	mov	r4,r16
 4017fc4:	a80b883a 	mov	r5,r21
 4017fc8:	400cf7c0 	call	400cf7c <__umodsi3>
 4017fcc:	1027883a 	mov	r19,r2
 4017fd0:	8009883a 	mov	r4,r16
 4017fd4:	a80b883a 	mov	r5,r21
 4017fd8:	9826943a 	slli	r19,r19,16
 4017fdc:	400cf180 	call	400cf18 <__udivsi3>
 4017fe0:	100b883a 	mov	r5,r2
 4017fe4:	a009883a 	mov	r4,r20
 4017fe8:	94bfffcc 	andi	r18,r18,65535
 4017fec:	1021883a 	mov	r16,r2
 4017ff0:	94e4b03a 	or	r18,r18,r19
 4017ff4:	400cfd40 	call	400cfd4 <__mulsi3>
 4017ff8:	9080052e 	bgeu	r18,r2,4018010 <__udivdi3+0x140>
 4017ffc:	8ca5883a 	add	r18,r17,r18
 4018000:	80ffffc4 	addi	r3,r16,-1
 4018004:	94410c36 	bltu	r18,r17,4018438 <__udivdi3+0x568>
 4018008:	90810b2e 	bgeu	r18,r2,4018438 <__udivdi3+0x568>
 401800c:	843fff84 	addi	r16,r16,-2
 4018010:	b004943a 	slli	r2,r22,16
 4018014:	0007883a 	mov	r3,zero
 4018018:	1404b03a 	or	r2,r2,r16
 401801c:	00005e06 	br	4018198 <__udivdi3+0x2c8>
 4018020:	29c05b36 	bltu	r5,r7,4018190 <__udivdi3+0x2c0>
 4018024:	00bfffd4 	movui	r2,65535
 4018028:	11c0672e 	bgeu	r2,r7,40181c8 <__udivdi3+0x2f8>
 401802c:	00804034 	movhi	r2,256
 4018030:	10bfffc4 	addi	r2,r2,-1
 4018034:	11c10a36 	bltu	r2,r7,4018460 <__udivdi3+0x590>
 4018038:	00800404 	movi	r2,16
 401803c:	3886d83a 	srl	r3,r7,r2
 4018040:	010100b4 	movhi	r4,1026
 4018044:	211b7604 	addi	r4,r4,28120
 4018048:	20c7883a 	add	r3,r4,r3
 401804c:	18c00003 	ldbu	r3,0(r3)
 4018050:	05c00804 	movi	r23,32
 4018054:	1885883a 	add	r2,r3,r2
 4018058:	b8afc83a 	sub	r23,r23,r2
 401805c:	b800671e 	bne	r23,zero,40181fc <__udivdi3+0x32c>
 4018060:	3c010536 	bltu	r7,r16,4018478 <__udivdi3+0x5a8>
 4018064:	9985403a 	cmpgeu	r2,r19,r6
 4018068:	0007883a 	mov	r3,zero
 401806c:	00004a06 	br	4018198 <__udivdi3+0x2c8>
 4018070:	3000041e 	bne	r6,zero,4018084 <__udivdi3+0x1b4>
 4018074:	000b883a 	mov	r5,zero
 4018078:	01000044 	movi	r4,1
 401807c:	400cf180 	call	400cf18 <__udivsi3>
 4018080:	1023883a 	mov	r17,r2
 4018084:	00bfffd4 	movui	r2,65535
 4018088:	1440532e 	bgeu	r2,r17,40181d8 <__udivdi3+0x308>
 401808c:	00804034 	movhi	r2,256
 4018090:	10bfffc4 	addi	r2,r2,-1
 4018094:	1440f436 	bltu	r2,r17,4018468 <__udivdi3+0x598>
 4018098:	00800404 	movi	r2,16
 401809c:	8886d83a 	srl	r3,r17,r2
 40180a0:	010100b4 	movhi	r4,1026
 40180a4:	211b7604 	addi	r4,r4,28120
 40180a8:	20c7883a 	add	r3,r4,r3
 40180ac:	18c00003 	ldbu	r3,0(r3)
 40180b0:	1885883a 	add	r2,r3,r2
 40180b4:	00c00804 	movi	r3,32
 40180b8:	1887c83a 	sub	r3,r3,r2
 40180bc:	1800a51e 	bne	r3,zero,4018354 <__udivdi3+0x484>
 40180c0:	882ad43a 	srli	r21,r17,16
 40180c4:	8461c83a 	sub	r16,r16,r17
 40180c8:	8d3fffcc 	andi	r20,r17,65535
 40180cc:	00c00044 	movi	r3,1
 40180d0:	a80b883a 	mov	r5,r21
 40180d4:	8009883a 	mov	r4,r16
 40180d8:	d8c00115 	stw	r3,4(sp)
 40180dc:	400cf7c0 	call	400cf7c <__umodsi3>
 40180e0:	a80b883a 	mov	r5,r21
 40180e4:	8009883a 	mov	r4,r16
 40180e8:	1027883a 	mov	r19,r2
 40180ec:	400cf180 	call	400cf18 <__udivsi3>
 40180f0:	a00b883a 	mov	r5,r20
 40180f4:	1009883a 	mov	r4,r2
 40180f8:	102d883a 	mov	r22,r2
 40180fc:	400cfd40 	call	400cfd4 <__mulsi3>
 4018100:	9826943a 	slli	r19,r19,16
 4018104:	900ed43a 	srli	r7,r18,16
 4018108:	d8c00117 	ldw	r3,4(sp)
 401810c:	3cceb03a 	or	r7,r7,r19
 4018110:	3880052e 	bgeu	r7,r2,4018128 <__udivdi3+0x258>
 4018114:	3c4f883a 	add	r7,r7,r17
 4018118:	b13fffc4 	addi	r4,r22,-1
 401811c:	3c400136 	bltu	r7,r17,4018124 <__udivdi3+0x254>
 4018120:	3880e436 	bltu	r7,r2,40184b4 <__udivdi3+0x5e4>
 4018124:	202d883a 	mov	r22,r4
 4018128:	38a1c83a 	sub	r16,r7,r2
 401812c:	8009883a 	mov	r4,r16
 4018130:	a80b883a 	mov	r5,r21
 4018134:	d8c00115 	stw	r3,4(sp)
 4018138:	400cf7c0 	call	400cf7c <__umodsi3>
 401813c:	1027883a 	mov	r19,r2
 4018140:	8009883a 	mov	r4,r16
 4018144:	a80b883a 	mov	r5,r21
 4018148:	9826943a 	slli	r19,r19,16
 401814c:	400cf180 	call	400cf18 <__udivsi3>
 4018150:	a00b883a 	mov	r5,r20
 4018154:	1009883a 	mov	r4,r2
 4018158:	94bfffcc 	andi	r18,r18,65535
 401815c:	1021883a 	mov	r16,r2
 4018160:	94e4b03a 	or	r18,r18,r19
 4018164:	400cfd40 	call	400cfd4 <__mulsi3>
 4018168:	d8c00117 	ldw	r3,4(sp)
 401816c:	9080052e 	bgeu	r18,r2,4018184 <__udivdi3+0x2b4>
 4018170:	8ca5883a 	add	r18,r17,r18
 4018174:	813fffc4 	addi	r4,r16,-1
 4018178:	9440ad36 	bltu	r18,r17,4018430 <__udivdi3+0x560>
 401817c:	9080ac2e 	bgeu	r18,r2,4018430 <__udivdi3+0x560>
 4018180:	843fff84 	addi	r16,r16,-2
 4018184:	b004943a 	slli	r2,r22,16
 4018188:	1404b03a 	or	r2,r2,r16
 401818c:	00000206 	br	4018198 <__udivdi3+0x2c8>
 4018190:	0007883a 	mov	r3,zero
 4018194:	0005883a 	mov	r2,zero
 4018198:	dfc00b17 	ldw	ra,44(sp)
 401819c:	df000a17 	ldw	fp,40(sp)
 40181a0:	ddc00917 	ldw	r23,36(sp)
 40181a4:	dd800817 	ldw	r22,32(sp)
 40181a8:	dd400717 	ldw	r21,28(sp)
 40181ac:	dd000617 	ldw	r20,24(sp)
 40181b0:	dcc00517 	ldw	r19,20(sp)
 40181b4:	dc800417 	ldw	r18,16(sp)
 40181b8:	dc400317 	ldw	r17,12(sp)
 40181bc:	dc000217 	ldw	r16,8(sp)
 40181c0:	dec00c04 	addi	sp,sp,48
 40181c4:	f800283a 	ret
 40181c8:	00803fc4 	movi	r2,255
 40181cc:	11c5803a 	cmpltu	r2,r2,r7
 40181d0:	100490fa 	slli	r2,r2,3
 40181d4:	003f9906 	br	401803c <__alt_mem_onchip_memory2_0+0xfc016dbc>
 40181d8:	00803fc4 	movi	r2,255
 40181dc:	1445803a 	cmpltu	r2,r2,r17
 40181e0:	100490fa 	slli	r2,r2,3
 40181e4:	003fad06 	br	401809c <__alt_mem_onchip_memory2_0+0xfc016e1c>
 40181e8:	00804034 	movhi	r2,256
 40181ec:	10bfffc4 	addi	r2,r2,-1
 40181f0:	11809f36 	bltu	r2,r6,4018470 <__udivdi3+0x5a0>
 40181f4:	00800404 	movi	r2,16
 40181f8:	003f4c06 	br	4017f2c <__alt_mem_onchip_memory2_0+0xfc016cac>
 40181fc:	3dce983a 	sll	r7,r7,r23
 4018200:	30b8d83a 	srl	fp,r6,r2
 4018204:	80a2d83a 	srl	r17,r16,r2
 4018208:	35cc983a 	sll	r6,r6,r23
 401820c:	3f38b03a 	or	fp,r7,fp
 4018210:	e024d43a 	srli	r18,fp,16
 4018214:	9884d83a 	srl	r2,r19,r2
 4018218:	85e0983a 	sll	r16,r16,r23
 401821c:	8809883a 	mov	r4,r17
 4018220:	900b883a 	mov	r5,r18
 4018224:	d9800015 	stw	r6,0(sp)
 4018228:	1420b03a 	or	r16,r2,r16
 401822c:	400cf7c0 	call	400cf7c <__umodsi3>
 4018230:	900b883a 	mov	r5,r18
 4018234:	8809883a 	mov	r4,r17
 4018238:	1029883a 	mov	r20,r2
 401823c:	e5bfffcc 	andi	r22,fp,65535
 4018240:	400cf180 	call	400cf18 <__udivsi3>
 4018244:	100b883a 	mov	r5,r2
 4018248:	b009883a 	mov	r4,r22
 401824c:	102b883a 	mov	r21,r2
 4018250:	400cfd40 	call	400cfd4 <__mulsi3>
 4018254:	a028943a 	slli	r20,r20,16
 4018258:	8006d43a 	srli	r3,r16,16
 401825c:	1d06b03a 	or	r3,r3,r20
 4018260:	1880042e 	bgeu	r3,r2,4018274 <__udivdi3+0x3a4>
 4018264:	1f07883a 	add	r3,r3,fp
 4018268:	a93fffc4 	addi	r4,r21,-1
 401826c:	1f00892e 	bgeu	r3,fp,4018494 <__udivdi3+0x5c4>
 4018270:	202b883a 	mov	r21,r4
 4018274:	18a3c83a 	sub	r17,r3,r2
 4018278:	8809883a 	mov	r4,r17
 401827c:	900b883a 	mov	r5,r18
 4018280:	400cf7c0 	call	400cf7c <__umodsi3>
 4018284:	1029883a 	mov	r20,r2
 4018288:	8809883a 	mov	r4,r17
 401828c:	900b883a 	mov	r5,r18
 4018290:	a028943a 	slli	r20,r20,16
 4018294:	400cf180 	call	400cf18 <__udivsi3>
 4018298:	100b883a 	mov	r5,r2
 401829c:	b009883a 	mov	r4,r22
 40182a0:	843fffcc 	andi	r16,r16,65535
 40182a4:	1023883a 	mov	r17,r2
 40182a8:	8520b03a 	or	r16,r16,r20
 40182ac:	400cfd40 	call	400cfd4 <__mulsi3>
 40182b0:	8080042e 	bgeu	r16,r2,40182c4 <__udivdi3+0x3f4>
 40182b4:	8721883a 	add	r16,r16,fp
 40182b8:	88ffffc4 	addi	r3,r17,-1
 40182bc:	8700712e 	bgeu	r16,fp,4018484 <__udivdi3+0x5b4>
 40182c0:	1823883a 	mov	r17,r3
 40182c4:	a80e943a 	slli	r7,r21,16
 40182c8:	d8c00017 	ldw	r3,0(sp)
 40182cc:	80a1c83a 	sub	r16,r16,r2
 40182d0:	3c64b03a 	or	r18,r7,r17
 40182d4:	1d3fffcc 	andi	r20,r3,65535
 40182d8:	9022d43a 	srli	r17,r18,16
 40182dc:	95bfffcc 	andi	r22,r18,65535
 40182e0:	a00b883a 	mov	r5,r20
 40182e4:	b009883a 	mov	r4,r22
 40182e8:	182ad43a 	srli	r21,r3,16
 40182ec:	400cfd40 	call	400cfd4 <__mulsi3>
 40182f0:	a00b883a 	mov	r5,r20
 40182f4:	8809883a 	mov	r4,r17
 40182f8:	1039883a 	mov	fp,r2
 40182fc:	400cfd40 	call	400cfd4 <__mulsi3>
 4018300:	8809883a 	mov	r4,r17
 4018304:	a80b883a 	mov	r5,r21
 4018308:	1029883a 	mov	r20,r2
 401830c:	400cfd40 	call	400cfd4 <__mulsi3>
 4018310:	a80b883a 	mov	r5,r21
 4018314:	b009883a 	mov	r4,r22
 4018318:	1023883a 	mov	r17,r2
 401831c:	400cfd40 	call	400cfd4 <__mulsi3>
 4018320:	e006d43a 	srli	r3,fp,16
 4018324:	1505883a 	add	r2,r2,r20
 4018328:	1887883a 	add	r3,r3,r2
 401832c:	1d00022e 	bgeu	r3,r20,4018338 <__udivdi3+0x468>
 4018330:	00800074 	movhi	r2,1
 4018334:	88a3883a 	add	r17,r17,r2
 4018338:	1804d43a 	srli	r2,r3,16
 401833c:	1463883a 	add	r17,r2,r17
 4018340:	84404436 	bltu	r16,r17,4018454 <__udivdi3+0x584>
 4018344:	84403e26 	beq	r16,r17,4018440 <__udivdi3+0x570>
 4018348:	9005883a 	mov	r2,r18
 401834c:	0007883a 	mov	r3,zero
 4018350:	003f9106 	br	4018198 <__alt_mem_onchip_memory2_0+0xfc016f18>
 4018354:	88e2983a 	sll	r17,r17,r3
 4018358:	80aed83a 	srl	r23,r16,r2
 401835c:	80e0983a 	sll	r16,r16,r3
 4018360:	882ad43a 	srli	r21,r17,16
 4018364:	9884d83a 	srl	r2,r19,r2
 4018368:	b809883a 	mov	r4,r23
 401836c:	a80b883a 	mov	r5,r21
 4018370:	98e4983a 	sll	r18,r19,r3
 4018374:	142cb03a 	or	r22,r2,r16
 4018378:	400cf7c0 	call	400cf7c <__umodsi3>
 401837c:	b809883a 	mov	r4,r23
 4018380:	a80b883a 	mov	r5,r21
 4018384:	1027883a 	mov	r19,r2
 4018388:	8d3fffcc 	andi	r20,r17,65535
 401838c:	400cf180 	call	400cf18 <__udivsi3>
 4018390:	a009883a 	mov	r4,r20
 4018394:	100b883a 	mov	r5,r2
 4018398:	102f883a 	mov	r23,r2
 401839c:	400cfd40 	call	400cfd4 <__mulsi3>
 40183a0:	9826943a 	slli	r19,r19,16
 40183a4:	b008d43a 	srli	r4,r22,16
 40183a8:	24c8b03a 	or	r4,r4,r19
 40183ac:	2080062e 	bgeu	r4,r2,40183c8 <__udivdi3+0x4f8>
 40183b0:	2449883a 	add	r4,r4,r17
 40183b4:	b8ffffc4 	addi	r3,r23,-1
 40183b8:	24403c36 	bltu	r4,r17,40184ac <__udivdi3+0x5dc>
 40183bc:	20803b2e 	bgeu	r4,r2,40184ac <__udivdi3+0x5dc>
 40183c0:	bdffff84 	addi	r23,r23,-2
 40183c4:	2449883a 	add	r4,r4,r17
 40183c8:	20a1c83a 	sub	r16,r4,r2
 40183cc:	a80b883a 	mov	r5,r21
 40183d0:	8009883a 	mov	r4,r16
 40183d4:	400cf7c0 	call	400cf7c <__umodsi3>
 40183d8:	a80b883a 	mov	r5,r21
 40183dc:	8009883a 	mov	r4,r16
 40183e0:	1027883a 	mov	r19,r2
 40183e4:	400cf180 	call	400cf18 <__udivsi3>
 40183e8:	a009883a 	mov	r4,r20
 40183ec:	100b883a 	mov	r5,r2
 40183f0:	9826943a 	slli	r19,r19,16
 40183f4:	1039883a 	mov	fp,r2
 40183f8:	400cfd40 	call	400cfd4 <__mulsi3>
 40183fc:	b13fffcc 	andi	r4,r22,65535
 4018400:	24c8b03a 	or	r4,r4,r19
 4018404:	2080062e 	bgeu	r4,r2,4018420 <__udivdi3+0x550>
 4018408:	2449883a 	add	r4,r4,r17
 401840c:	e0ffffc4 	addi	r3,fp,-1
 4018410:	24402436 	bltu	r4,r17,40184a4 <__udivdi3+0x5d4>
 4018414:	2080232e 	bgeu	r4,r2,40184a4 <__udivdi3+0x5d4>
 4018418:	e73fff84 	addi	fp,fp,-2
 401841c:	2449883a 	add	r4,r4,r17
 4018420:	b82e943a 	slli	r23,r23,16
 4018424:	20a1c83a 	sub	r16,r4,r2
 4018428:	bf06b03a 	or	r3,r23,fp
 401842c:	003f2806 	br	40180d0 <__alt_mem_onchip_memory2_0+0xfc016e50>
 4018430:	2021883a 	mov	r16,r4
 4018434:	003f5306 	br	4018184 <__alt_mem_onchip_memory2_0+0xfc016f04>
 4018438:	1821883a 	mov	r16,r3
 401843c:	003ef406 	br	4018010 <__alt_mem_onchip_memory2_0+0xfc016d90>
 4018440:	1806943a 	slli	r3,r3,16
 4018444:	9de6983a 	sll	r19,r19,r23
 4018448:	e73fffcc 	andi	fp,fp,65535
 401844c:	1f07883a 	add	r3,r3,fp
 4018450:	98ffbd2e 	bgeu	r19,r3,4018348 <__alt_mem_onchip_memory2_0+0xfc0170c8>
 4018454:	90bfffc4 	addi	r2,r18,-1
 4018458:	0007883a 	mov	r3,zero
 401845c:	003f4e06 	br	4018198 <__alt_mem_onchip_memory2_0+0xfc016f18>
 4018460:	00800604 	movi	r2,24
 4018464:	003ef506 	br	401803c <__alt_mem_onchip_memory2_0+0xfc016dbc>
 4018468:	00800604 	movi	r2,24
 401846c:	003f0b06 	br	401809c <__alt_mem_onchip_memory2_0+0xfc016e1c>
 4018470:	00800604 	movi	r2,24
 4018474:	003ead06 	br	4017f2c <__alt_mem_onchip_memory2_0+0xfc016cac>
 4018478:	0007883a 	mov	r3,zero
 401847c:	00800044 	movi	r2,1
 4018480:	003f4506 	br	4018198 <__alt_mem_onchip_memory2_0+0xfc016f18>
 4018484:	80bf8e2e 	bgeu	r16,r2,40182c0 <__alt_mem_onchip_memory2_0+0xfc017040>
 4018488:	8c7fff84 	addi	r17,r17,-2
 401848c:	8721883a 	add	r16,r16,fp
 4018490:	003f8c06 	br	40182c4 <__alt_mem_onchip_memory2_0+0xfc017044>
 4018494:	18bf762e 	bgeu	r3,r2,4018270 <__alt_mem_onchip_memory2_0+0xfc016ff0>
 4018498:	ad7fff84 	addi	r21,r21,-2
 401849c:	1f07883a 	add	r3,r3,fp
 40184a0:	003f7406 	br	4018274 <__alt_mem_onchip_memory2_0+0xfc016ff4>
 40184a4:	1839883a 	mov	fp,r3
 40184a8:	003fdd06 	br	4018420 <__alt_mem_onchip_memory2_0+0xfc0171a0>
 40184ac:	182f883a 	mov	r23,r3
 40184b0:	003fc506 	br	40183c8 <__alt_mem_onchip_memory2_0+0xfc017148>
 40184b4:	b5bfff84 	addi	r22,r22,-2
 40184b8:	3c4f883a 	add	r7,r7,r17
 40184bc:	003f1a06 	br	4018128 <__alt_mem_onchip_memory2_0+0xfc016ea8>
 40184c0:	b5bfff84 	addi	r22,r22,-2
 40184c4:	1c47883a 	add	r3,r3,r17
 40184c8:	003ebc06 	br	4017fbc <__alt_mem_onchip_memory2_0+0xfc016d3c>

040184cc <__umoddi3>:
 40184cc:	defff304 	addi	sp,sp,-52
 40184d0:	df000b15 	stw	fp,44(sp)
 40184d4:	dc400415 	stw	r17,16(sp)
 40184d8:	dc000315 	stw	r16,12(sp)
 40184dc:	dfc00c15 	stw	ra,48(sp)
 40184e0:	ddc00a15 	stw	r23,40(sp)
 40184e4:	dd800915 	stw	r22,36(sp)
 40184e8:	dd400815 	stw	r21,32(sp)
 40184ec:	dd000715 	stw	r20,28(sp)
 40184f0:	dcc00615 	stw	r19,24(sp)
 40184f4:	dc800515 	stw	r18,20(sp)
 40184f8:	2021883a 	mov	r16,r4
 40184fc:	2823883a 	mov	r17,r5
 4018500:	2839883a 	mov	fp,r5
 4018504:	3800401e 	bne	r7,zero,4018608 <__umoddi3+0x13c>
 4018508:	3027883a 	mov	r19,r6
 401850c:	2029883a 	mov	r20,r4
 4018510:	2980552e 	bgeu	r5,r6,4018668 <__umoddi3+0x19c>
 4018514:	00bfffd4 	movui	r2,65535
 4018518:	1180a236 	bltu	r2,r6,40187a4 <__umoddi3+0x2d8>
 401851c:	01003fc4 	movi	r4,255
 4018520:	2189803a 	cmpltu	r4,r4,r6
 4018524:	200890fa 	slli	r4,r4,3
 4018528:	3104d83a 	srl	r2,r6,r4
 401852c:	00c100b4 	movhi	r3,1026
 4018530:	18db7604 	addi	r3,r3,28120
 4018534:	1885883a 	add	r2,r3,r2
 4018538:	10c00003 	ldbu	r3,0(r2)
 401853c:	00800804 	movi	r2,32
 4018540:	1909883a 	add	r4,r3,r4
 4018544:	1125c83a 	sub	r18,r2,r4
 4018548:	90000526 	beq	r18,zero,4018560 <__umoddi3+0x94>
 401854c:	8ca2983a 	sll	r17,r17,r18
 4018550:	8108d83a 	srl	r4,r16,r4
 4018554:	34a6983a 	sll	r19,r6,r18
 4018558:	84a8983a 	sll	r20,r16,r18
 401855c:	2478b03a 	or	fp,r4,r17
 4018560:	982cd43a 	srli	r22,r19,16
 4018564:	e009883a 	mov	r4,fp
 4018568:	9dffffcc 	andi	r23,r19,65535
 401856c:	b00b883a 	mov	r5,r22
 4018570:	400cf7c0 	call	400cf7c <__umodsi3>
 4018574:	b00b883a 	mov	r5,r22
 4018578:	e009883a 	mov	r4,fp
 401857c:	102b883a 	mov	r21,r2
 4018580:	400cf180 	call	400cf18 <__udivsi3>
 4018584:	100b883a 	mov	r5,r2
 4018588:	b809883a 	mov	r4,r23
 401858c:	400cfd40 	call	400cfd4 <__mulsi3>
 4018590:	a82a943a 	slli	r21,r21,16
 4018594:	a006d43a 	srli	r3,r20,16
 4018598:	1d46b03a 	or	r3,r3,r21
 401859c:	1880032e 	bgeu	r3,r2,40185ac <__umoddi3+0xe0>
 40185a0:	1cc7883a 	add	r3,r3,r19
 40185a4:	1cc00136 	bltu	r3,r19,40185ac <__umoddi3+0xe0>
 40185a8:	18813136 	bltu	r3,r2,4018a70 <__umoddi3+0x5a4>
 40185ac:	18a1c83a 	sub	r16,r3,r2
 40185b0:	b00b883a 	mov	r5,r22
 40185b4:	8009883a 	mov	r4,r16
 40185b8:	400cf7c0 	call	400cf7c <__umodsi3>
 40185bc:	b00b883a 	mov	r5,r22
 40185c0:	8009883a 	mov	r4,r16
 40185c4:	1023883a 	mov	r17,r2
 40185c8:	400cf180 	call	400cf18 <__udivsi3>
 40185cc:	100b883a 	mov	r5,r2
 40185d0:	b809883a 	mov	r4,r23
 40185d4:	8822943a 	slli	r17,r17,16
 40185d8:	400cfd40 	call	400cfd4 <__mulsi3>
 40185dc:	a0ffffcc 	andi	r3,r20,65535
 40185e0:	1c46b03a 	or	r3,r3,r17
 40185e4:	1880042e 	bgeu	r3,r2,40185f8 <__umoddi3+0x12c>
 40185e8:	1cc7883a 	add	r3,r3,r19
 40185ec:	1cc00236 	bltu	r3,r19,40185f8 <__umoddi3+0x12c>
 40185f0:	1880012e 	bgeu	r3,r2,40185f8 <__umoddi3+0x12c>
 40185f4:	1cc7883a 	add	r3,r3,r19
 40185f8:	1885c83a 	sub	r2,r3,r2
 40185fc:	1484d83a 	srl	r2,r2,r18
 4018600:	0007883a 	mov	r3,zero
 4018604:	00005306 	br	4018754 <__umoddi3+0x288>
 4018608:	29c05036 	bltu	r5,r7,401874c <__umoddi3+0x280>
 401860c:	00bfffd4 	movui	r2,65535
 4018610:	11c05c2e 	bgeu	r2,r7,4018784 <__umoddi3+0x2b8>
 4018614:	00804034 	movhi	r2,256
 4018618:	10bfffc4 	addi	r2,r2,-1
 401861c:	11c10636 	bltu	r2,r7,4018a38 <__umoddi3+0x56c>
 4018620:	01000404 	movi	r4,16
 4018624:	3904d83a 	srl	r2,r7,r4
 4018628:	00c100b4 	movhi	r3,1026
 401862c:	18db7604 	addi	r3,r3,28120
 4018630:	1885883a 	add	r2,r3,r2
 4018634:	14c00003 	ldbu	r19,0(r2)
 4018638:	00c00804 	movi	r3,32
 401863c:	9927883a 	add	r19,r19,r4
 4018640:	1ce9c83a 	sub	r20,r3,r19
 4018644:	a0005c1e 	bne	r20,zero,40187b8 <__umoddi3+0x2ec>
 4018648:	3c400136 	bltu	r7,r17,4018650 <__umoddi3+0x184>
 401864c:	81810a36 	bltu	r16,r6,4018a78 <__umoddi3+0x5ac>
 4018650:	8185c83a 	sub	r2,r16,r6
 4018654:	89e3c83a 	sub	r17,r17,r7
 4018658:	8089803a 	cmpltu	r4,r16,r2
 401865c:	8939c83a 	sub	fp,r17,r4
 4018660:	e007883a 	mov	r3,fp
 4018664:	00003b06 	br	4018754 <__umoddi3+0x288>
 4018668:	3000041e 	bne	r6,zero,401867c <__umoddi3+0x1b0>
 401866c:	000b883a 	mov	r5,zero
 4018670:	01000044 	movi	r4,1
 4018674:	400cf180 	call	400cf18 <__udivsi3>
 4018678:	1027883a 	mov	r19,r2
 401867c:	00bfffd4 	movui	r2,65535
 4018680:	14c0442e 	bgeu	r2,r19,4018794 <__umoddi3+0x2c8>
 4018684:	00804034 	movhi	r2,256
 4018688:	10bfffc4 	addi	r2,r2,-1
 401868c:	14c0ec36 	bltu	r2,r19,4018a40 <__umoddi3+0x574>
 4018690:	00800404 	movi	r2,16
 4018694:	9886d83a 	srl	r3,r19,r2
 4018698:	010100b4 	movhi	r4,1026
 401869c:	211b7604 	addi	r4,r4,28120
 40186a0:	20c7883a 	add	r3,r4,r3
 40186a4:	18c00003 	ldbu	r3,0(r3)
 40186a8:	1887883a 	add	r3,r3,r2
 40186ac:	00800804 	movi	r2,32
 40186b0:	10e5c83a 	sub	r18,r2,r3
 40186b4:	9000ab1e 	bne	r18,zero,4018964 <__umoddi3+0x498>
 40186b8:	982cd43a 	srli	r22,r19,16
 40186bc:	8ce3c83a 	sub	r17,r17,r19
 40186c0:	9dffffcc 	andi	r23,r19,65535
 40186c4:	b00b883a 	mov	r5,r22
 40186c8:	8809883a 	mov	r4,r17
 40186cc:	400cf7c0 	call	400cf7c <__umodsi3>
 40186d0:	b00b883a 	mov	r5,r22
 40186d4:	8809883a 	mov	r4,r17
 40186d8:	102b883a 	mov	r21,r2
 40186dc:	400cf180 	call	400cf18 <__udivsi3>
 40186e0:	b80b883a 	mov	r5,r23
 40186e4:	1009883a 	mov	r4,r2
 40186e8:	400cfd40 	call	400cfd4 <__mulsi3>
 40186ec:	a82a943a 	slli	r21,r21,16
 40186f0:	a006d43a 	srli	r3,r20,16
 40186f4:	1d46b03a 	or	r3,r3,r21
 40186f8:	1880042e 	bgeu	r3,r2,401870c <__umoddi3+0x240>
 40186fc:	1cc7883a 	add	r3,r3,r19
 4018700:	1cc00236 	bltu	r3,r19,401870c <__umoddi3+0x240>
 4018704:	1880012e 	bgeu	r3,r2,401870c <__umoddi3+0x240>
 4018708:	1cc7883a 	add	r3,r3,r19
 401870c:	18a1c83a 	sub	r16,r3,r2
 4018710:	b00b883a 	mov	r5,r22
 4018714:	8009883a 	mov	r4,r16
 4018718:	400cf7c0 	call	400cf7c <__umodsi3>
 401871c:	1023883a 	mov	r17,r2
 4018720:	b00b883a 	mov	r5,r22
 4018724:	8009883a 	mov	r4,r16
 4018728:	400cf180 	call	400cf18 <__udivsi3>
 401872c:	8822943a 	slli	r17,r17,16
 4018730:	b80b883a 	mov	r5,r23
 4018734:	1009883a 	mov	r4,r2
 4018738:	400cfd40 	call	400cfd4 <__mulsi3>
 401873c:	a53fffcc 	andi	r20,r20,65535
 4018740:	a446b03a 	or	r3,r20,r17
 4018744:	18bfac2e 	bgeu	r3,r2,40185f8 <__alt_mem_onchip_memory2_0+0xfc017378>
 4018748:	003fa706 	br	40185e8 <__alt_mem_onchip_memory2_0+0xfc017368>
 401874c:	2005883a 	mov	r2,r4
 4018750:	2807883a 	mov	r3,r5
 4018754:	dfc00c17 	ldw	ra,48(sp)
 4018758:	df000b17 	ldw	fp,44(sp)
 401875c:	ddc00a17 	ldw	r23,40(sp)
 4018760:	dd800917 	ldw	r22,36(sp)
 4018764:	dd400817 	ldw	r21,32(sp)
 4018768:	dd000717 	ldw	r20,28(sp)
 401876c:	dcc00617 	ldw	r19,24(sp)
 4018770:	dc800517 	ldw	r18,20(sp)
 4018774:	dc400417 	ldw	r17,16(sp)
 4018778:	dc000317 	ldw	r16,12(sp)
 401877c:	dec00d04 	addi	sp,sp,52
 4018780:	f800283a 	ret
 4018784:	04c03fc4 	movi	r19,255
 4018788:	99c9803a 	cmpltu	r4,r19,r7
 401878c:	200890fa 	slli	r4,r4,3
 4018790:	003fa406 	br	4018624 <__alt_mem_onchip_memory2_0+0xfc0173a4>
 4018794:	00803fc4 	movi	r2,255
 4018798:	14c5803a 	cmpltu	r2,r2,r19
 401879c:	100490fa 	slli	r2,r2,3
 40187a0:	003fbc06 	br	4018694 <__alt_mem_onchip_memory2_0+0xfc017414>
 40187a4:	00804034 	movhi	r2,256
 40187a8:	10bfffc4 	addi	r2,r2,-1
 40187ac:	1180a636 	bltu	r2,r6,4018a48 <__umoddi3+0x57c>
 40187b0:	01000404 	movi	r4,16
 40187b4:	003f5c06 	br	4018528 <__alt_mem_onchip_memory2_0+0xfc0172a8>
 40187b8:	3d0e983a 	sll	r7,r7,r20
 40187bc:	34ead83a 	srl	r21,r6,r19
 40187c0:	8cc6d83a 	srl	r3,r17,r19
 40187c4:	8d10983a 	sll	r8,r17,r20
 40187c8:	3d6ab03a 	or	r21,r7,r21
 40187cc:	a82cd43a 	srli	r22,r21,16
 40187d0:	84e2d83a 	srl	r17,r16,r19
 40187d4:	1809883a 	mov	r4,r3
 40187d8:	b00b883a 	mov	r5,r22
 40187dc:	8a22b03a 	or	r17,r17,r8
 40187e0:	3524983a 	sll	r18,r6,r20
 40187e4:	dc400015 	stw	r17,0(sp)
 40187e8:	d8c00115 	stw	r3,4(sp)
 40187ec:	400cf7c0 	call	400cf7c <__umodsi3>
 40187f0:	d8c00117 	ldw	r3,4(sp)
 40187f4:	b00b883a 	mov	r5,r22
 40187f8:	1039883a 	mov	fp,r2
 40187fc:	1809883a 	mov	r4,r3
 4018800:	400cf180 	call	400cf18 <__udivsi3>
 4018804:	adffffcc 	andi	r23,r21,65535
 4018808:	100b883a 	mov	r5,r2
 401880c:	b809883a 	mov	r4,r23
 4018810:	1023883a 	mov	r17,r2
 4018814:	400cfd40 	call	400cfd4 <__mulsi3>
 4018818:	d9400017 	ldw	r5,0(sp)
 401881c:	e008943a 	slli	r4,fp,16
 4018820:	8520983a 	sll	r16,r16,r20
 4018824:	2806d43a 	srli	r3,r5,16
 4018828:	1906b03a 	or	r3,r3,r4
 401882c:	1880042e 	bgeu	r3,r2,4018840 <__umoddi3+0x374>
 4018830:	1d47883a 	add	r3,r3,r21
 4018834:	893fffc4 	addi	r4,r17,-1
 4018838:	1d40892e 	bgeu	r3,r21,4018a60 <__umoddi3+0x594>
 401883c:	2023883a 	mov	r17,r4
 4018840:	18b9c83a 	sub	fp,r3,r2
 4018844:	b00b883a 	mov	r5,r22
 4018848:	e009883a 	mov	r4,fp
 401884c:	400cf7c0 	call	400cf7c <__umodsi3>
 4018850:	b00b883a 	mov	r5,r22
 4018854:	e009883a 	mov	r4,fp
 4018858:	d8800215 	stw	r2,8(sp)
 401885c:	400cf180 	call	400cf18 <__udivsi3>
 4018860:	100b883a 	mov	r5,r2
 4018864:	b809883a 	mov	r4,r23
 4018868:	102d883a 	mov	r22,r2
 401886c:	400cfd40 	call	400cfd4 <__mulsi3>
 4018870:	d9800217 	ldw	r6,8(sp)
 4018874:	d8c00017 	ldw	r3,0(sp)
 4018878:	300c943a 	slli	r6,r6,16
 401887c:	1a3fffcc 	andi	r8,r3,65535
 4018880:	4190b03a 	or	r8,r8,r6
 4018884:	4080042e 	bgeu	r8,r2,4018898 <__umoddi3+0x3cc>
 4018888:	4551883a 	add	r8,r8,r21
 401888c:	b0ffffc4 	addi	r3,r22,-1
 4018890:	45406f2e 	bgeu	r8,r21,4018a50 <__umoddi3+0x584>
 4018894:	182d883a 	mov	r22,r3
 4018898:	880e943a 	slli	r7,r17,16
 401889c:	9006d43a 	srli	r3,r18,16
 40188a0:	91bfffcc 	andi	r6,r18,65535
 40188a4:	3dacb03a 	or	r22,r7,r22
 40188a8:	b02ed43a 	srli	r23,r22,16
 40188ac:	b5bfffcc 	andi	r22,r22,65535
 40188b0:	300b883a 	mov	r5,r6
 40188b4:	b009883a 	mov	r4,r22
 40188b8:	40a3c83a 	sub	r17,r8,r2
 40188bc:	d8c00115 	stw	r3,4(sp)
 40188c0:	d9800215 	stw	r6,8(sp)
 40188c4:	400cfd40 	call	400cfd4 <__mulsi3>
 40188c8:	d9800217 	ldw	r6,8(sp)
 40188cc:	b809883a 	mov	r4,r23
 40188d0:	1039883a 	mov	fp,r2
 40188d4:	300b883a 	mov	r5,r6
 40188d8:	400cfd40 	call	400cfd4 <__mulsi3>
 40188dc:	d8c00117 	ldw	r3,4(sp)
 40188e0:	b809883a 	mov	r4,r23
 40188e4:	d8800215 	stw	r2,8(sp)
 40188e8:	180b883a 	mov	r5,r3
 40188ec:	400cfd40 	call	400cfd4 <__mulsi3>
 40188f0:	d8c00117 	ldw	r3,4(sp)
 40188f4:	b009883a 	mov	r4,r22
 40188f8:	102f883a 	mov	r23,r2
 40188fc:	180b883a 	mov	r5,r3
 4018900:	400cfd40 	call	400cfd4 <__mulsi3>
 4018904:	d9800217 	ldw	r6,8(sp)
 4018908:	e006d43a 	srli	r3,fp,16
 401890c:	1185883a 	add	r2,r2,r6
 4018910:	1885883a 	add	r2,r3,r2
 4018914:	1180022e 	bgeu	r2,r6,4018920 <__umoddi3+0x454>
 4018918:	00c00074 	movhi	r3,1
 401891c:	b8ef883a 	add	r23,r23,r3
 4018920:	1006d43a 	srli	r3,r2,16
 4018924:	1004943a 	slli	r2,r2,16
 4018928:	e73fffcc 	andi	fp,fp,65535
 401892c:	1dc7883a 	add	r3,r3,r23
 4018930:	1739883a 	add	fp,r2,fp
 4018934:	88c03a36 	bltu	r17,r3,4018a20 <__umoddi3+0x554>
 4018938:	88c05126 	beq	r17,r3,4018a80 <__umoddi3+0x5b4>
 401893c:	88c9c83a 	sub	r4,r17,r3
 4018940:	e00f883a 	mov	r7,fp
 4018944:	81cfc83a 	sub	r7,r16,r7
 4018948:	81c7803a 	cmpltu	r3,r16,r7
 401894c:	20c7c83a 	sub	r3,r4,r3
 4018950:	1cc4983a 	sll	r2,r3,r19
 4018954:	3d0ed83a 	srl	r7,r7,r20
 4018958:	1d06d83a 	srl	r3,r3,r20
 401895c:	11c4b03a 	or	r2,r2,r7
 4018960:	003f7c06 	br	4018754 <__alt_mem_onchip_memory2_0+0xfc0174d4>
 4018964:	9ca6983a 	sll	r19,r19,r18
 4018968:	88f8d83a 	srl	fp,r17,r3
 401896c:	80c4d83a 	srl	r2,r16,r3
 4018970:	982cd43a 	srli	r22,r19,16
 4018974:	8ca2983a 	sll	r17,r17,r18
 4018978:	e009883a 	mov	r4,fp
 401897c:	b00b883a 	mov	r5,r22
 4018980:	146ab03a 	or	r21,r2,r17
 4018984:	400cf7c0 	call	400cf7c <__umodsi3>
 4018988:	b00b883a 	mov	r5,r22
 401898c:	e009883a 	mov	r4,fp
 4018990:	1029883a 	mov	r20,r2
 4018994:	9dffffcc 	andi	r23,r19,65535
 4018998:	400cf180 	call	400cf18 <__udivsi3>
 401899c:	b809883a 	mov	r4,r23
 40189a0:	100b883a 	mov	r5,r2
 40189a4:	400cfd40 	call	400cfd4 <__mulsi3>
 40189a8:	a008943a 	slli	r4,r20,16
 40189ac:	a806d43a 	srli	r3,r21,16
 40189b0:	84a8983a 	sll	r20,r16,r18
 40189b4:	1906b03a 	or	r3,r3,r4
 40189b8:	1880042e 	bgeu	r3,r2,40189cc <__umoddi3+0x500>
 40189bc:	1cc7883a 	add	r3,r3,r19
 40189c0:	1cc00236 	bltu	r3,r19,40189cc <__umoddi3+0x500>
 40189c4:	1880012e 	bgeu	r3,r2,40189cc <__umoddi3+0x500>
 40189c8:	1cc7883a 	add	r3,r3,r19
 40189cc:	18a3c83a 	sub	r17,r3,r2
 40189d0:	b00b883a 	mov	r5,r22
 40189d4:	8809883a 	mov	r4,r17
 40189d8:	400cf7c0 	call	400cf7c <__umodsi3>
 40189dc:	b00b883a 	mov	r5,r22
 40189e0:	8809883a 	mov	r4,r17
 40189e4:	1021883a 	mov	r16,r2
 40189e8:	400cf180 	call	400cf18 <__udivsi3>
 40189ec:	100b883a 	mov	r5,r2
 40189f0:	b809883a 	mov	r4,r23
 40189f4:	8020943a 	slli	r16,r16,16
 40189f8:	400cfd40 	call	400cfd4 <__mulsi3>
 40189fc:	a8ffffcc 	andi	r3,r21,65535
 4018a00:	1c06b03a 	or	r3,r3,r16
 4018a04:	1880042e 	bgeu	r3,r2,4018a18 <__umoddi3+0x54c>
 4018a08:	1cc7883a 	add	r3,r3,r19
 4018a0c:	1cc00236 	bltu	r3,r19,4018a18 <__umoddi3+0x54c>
 4018a10:	1880012e 	bgeu	r3,r2,4018a18 <__umoddi3+0x54c>
 4018a14:	1cc7883a 	add	r3,r3,r19
 4018a18:	18a3c83a 	sub	r17,r3,r2
 4018a1c:	003f2906 	br	40186c4 <__alt_mem_onchip_memory2_0+0xfc017444>
 4018a20:	e48fc83a 	sub	r7,fp,r18
 4018a24:	1d49c83a 	sub	r4,r3,r21
 4018a28:	e1f9803a 	cmpltu	fp,fp,r7
 4018a2c:	2739c83a 	sub	fp,r4,fp
 4018a30:	8f09c83a 	sub	r4,r17,fp
 4018a34:	003fc306 	br	4018944 <__alt_mem_onchip_memory2_0+0xfc0176c4>
 4018a38:	01000604 	movi	r4,24
 4018a3c:	003ef906 	br	4018624 <__alt_mem_onchip_memory2_0+0xfc0173a4>
 4018a40:	00800604 	movi	r2,24
 4018a44:	003f1306 	br	4018694 <__alt_mem_onchip_memory2_0+0xfc017414>
 4018a48:	01000604 	movi	r4,24
 4018a4c:	003eb606 	br	4018528 <__alt_mem_onchip_memory2_0+0xfc0172a8>
 4018a50:	40bf902e 	bgeu	r8,r2,4018894 <__alt_mem_onchip_memory2_0+0xfc017614>
 4018a54:	b5bfff84 	addi	r22,r22,-2
 4018a58:	4551883a 	add	r8,r8,r21
 4018a5c:	003f8e06 	br	4018898 <__alt_mem_onchip_memory2_0+0xfc017618>
 4018a60:	18bf762e 	bgeu	r3,r2,401883c <__alt_mem_onchip_memory2_0+0xfc0175bc>
 4018a64:	8c7fff84 	addi	r17,r17,-2
 4018a68:	1d47883a 	add	r3,r3,r21
 4018a6c:	003f7406 	br	4018840 <__alt_mem_onchip_memory2_0+0xfc0175c0>
 4018a70:	1cc7883a 	add	r3,r3,r19
 4018a74:	003ecd06 	br	40185ac <__alt_mem_onchip_memory2_0+0xfc01732c>
 4018a78:	8005883a 	mov	r2,r16
 4018a7c:	003ef806 	br	4018660 <__alt_mem_onchip_memory2_0+0xfc0173e0>
 4018a80:	873fe736 	bltu	r16,fp,4018a20 <__alt_mem_onchip_memory2_0+0xfc0177a0>
 4018a84:	e00f883a 	mov	r7,fp
 4018a88:	0009883a 	mov	r4,zero
 4018a8c:	003fad06 	br	4018944 <__alt_mem_onchip_memory2_0+0xfc0176c4>

04018a90 <__adddf3>:
 4018a90:	02c00434 	movhi	r11,16
 4018a94:	5affffc4 	addi	r11,r11,-1
 4018a98:	2806d7fa 	srli	r3,r5,31
 4018a9c:	2ad4703a 	and	r10,r5,r11
 4018aa0:	3ad2703a 	and	r9,r7,r11
 4018aa4:	3804d53a 	srli	r2,r7,20
 4018aa8:	3018d77a 	srli	r12,r6,29
 4018aac:	280ad53a 	srli	r5,r5,20
 4018ab0:	501490fa 	slli	r10,r10,3
 4018ab4:	2010d77a 	srli	r8,r4,29
 4018ab8:	481290fa 	slli	r9,r9,3
 4018abc:	380ed7fa 	srli	r7,r7,31
 4018ac0:	defffb04 	addi	sp,sp,-20
 4018ac4:	dc800215 	stw	r18,8(sp)
 4018ac8:	dc400115 	stw	r17,4(sp)
 4018acc:	dc000015 	stw	r16,0(sp)
 4018ad0:	dfc00415 	stw	ra,16(sp)
 4018ad4:	dcc00315 	stw	r19,12(sp)
 4018ad8:	1c803fcc 	andi	r18,r3,255
 4018adc:	2c01ffcc 	andi	r16,r5,2047
 4018ae0:	5210b03a 	or	r8,r10,r8
 4018ae4:	202290fa 	slli	r17,r4,3
 4018ae8:	1081ffcc 	andi	r2,r2,2047
 4018aec:	4b12b03a 	or	r9,r9,r12
 4018af0:	300c90fa 	slli	r6,r6,3
 4018af4:	91c07526 	beq	r18,r7,4018ccc <__adddf3+0x23c>
 4018af8:	8087c83a 	sub	r3,r16,r2
 4018afc:	00c0ab0e 	bge	zero,r3,4018dac <__adddf3+0x31c>
 4018b00:	10002a1e 	bne	r2,zero,4018bac <__adddf3+0x11c>
 4018b04:	4984b03a 	or	r2,r9,r6
 4018b08:	1000961e 	bne	r2,zero,4018d64 <__adddf3+0x2d4>
 4018b0c:	888001cc 	andi	r2,r17,7
 4018b10:	10000726 	beq	r2,zero,4018b30 <__adddf3+0xa0>
 4018b14:	888003cc 	andi	r2,r17,15
 4018b18:	00c00104 	movi	r3,4
 4018b1c:	10c00426 	beq	r2,r3,4018b30 <__adddf3+0xa0>
 4018b20:	88c7883a 	add	r3,r17,r3
 4018b24:	1c63803a 	cmpltu	r17,r3,r17
 4018b28:	4451883a 	add	r8,r8,r17
 4018b2c:	1823883a 	mov	r17,r3
 4018b30:	4080202c 	andhi	r2,r8,128
 4018b34:	10005926 	beq	r2,zero,4018c9c <__adddf3+0x20c>
 4018b38:	84000044 	addi	r16,r16,1
 4018b3c:	0081ffc4 	movi	r2,2047
 4018b40:	8080ba26 	beq	r16,r2,4018e2c <__adddf3+0x39c>
 4018b44:	00bfe034 	movhi	r2,65408
 4018b48:	10bfffc4 	addi	r2,r2,-1
 4018b4c:	4090703a 	and	r8,r8,r2
 4018b50:	4004977a 	slli	r2,r8,29
 4018b54:	4010927a 	slli	r8,r8,9
 4018b58:	8822d0fa 	srli	r17,r17,3
 4018b5c:	8401ffcc 	andi	r16,r16,2047
 4018b60:	4010d33a 	srli	r8,r8,12
 4018b64:	9007883a 	mov	r3,r18
 4018b68:	1444b03a 	or	r2,r2,r17
 4018b6c:	8401ffcc 	andi	r16,r16,2047
 4018b70:	8020953a 	slli	r16,r16,20
 4018b74:	18c03fcc 	andi	r3,r3,255
 4018b78:	01000434 	movhi	r4,16
 4018b7c:	213fffc4 	addi	r4,r4,-1
 4018b80:	180697fa 	slli	r3,r3,31
 4018b84:	4110703a 	and	r8,r8,r4
 4018b88:	4410b03a 	or	r8,r8,r16
 4018b8c:	40c6b03a 	or	r3,r8,r3
 4018b90:	dfc00417 	ldw	ra,16(sp)
 4018b94:	dcc00317 	ldw	r19,12(sp)
 4018b98:	dc800217 	ldw	r18,8(sp)
 4018b9c:	dc400117 	ldw	r17,4(sp)
 4018ba0:	dc000017 	ldw	r16,0(sp)
 4018ba4:	dec00504 	addi	sp,sp,20
 4018ba8:	f800283a 	ret
 4018bac:	0081ffc4 	movi	r2,2047
 4018bb0:	80bfd626 	beq	r16,r2,4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4018bb4:	4a402034 	orhi	r9,r9,128
 4018bb8:	00800e04 	movi	r2,56
 4018bbc:	10c09f16 	blt	r2,r3,4018e3c <__adddf3+0x3ac>
 4018bc0:	008007c4 	movi	r2,31
 4018bc4:	10c0c216 	blt	r2,r3,4018ed0 <__adddf3+0x440>
 4018bc8:	00800804 	movi	r2,32
 4018bcc:	10c5c83a 	sub	r2,r2,r3
 4018bd0:	488a983a 	sll	r5,r9,r2
 4018bd4:	30c8d83a 	srl	r4,r6,r3
 4018bd8:	3084983a 	sll	r2,r6,r2
 4018bdc:	48c6d83a 	srl	r3,r9,r3
 4018be0:	290cb03a 	or	r6,r5,r4
 4018be4:	1004c03a 	cmpne	r2,r2,zero
 4018be8:	308cb03a 	or	r6,r6,r2
 4018bec:	898dc83a 	sub	r6,r17,r6
 4018bf0:	89a3803a 	cmpltu	r17,r17,r6
 4018bf4:	40d1c83a 	sub	r8,r8,r3
 4018bf8:	4451c83a 	sub	r8,r8,r17
 4018bfc:	3023883a 	mov	r17,r6
 4018c00:	4080202c 	andhi	r2,r8,128
 4018c04:	10002326 	beq	r2,zero,4018c94 <__adddf3+0x204>
 4018c08:	04c02034 	movhi	r19,128
 4018c0c:	9cffffc4 	addi	r19,r19,-1
 4018c10:	44e6703a 	and	r19,r8,r19
 4018c14:	98007626 	beq	r19,zero,4018df0 <__adddf3+0x360>
 4018c18:	9809883a 	mov	r4,r19
 4018c1c:	400e04c0 	call	400e04c <__clzsi2>
 4018c20:	10fffe04 	addi	r3,r2,-8
 4018c24:	010007c4 	movi	r4,31
 4018c28:	20c07716 	blt	r4,r3,4018e08 <__adddf3+0x378>
 4018c2c:	00800804 	movi	r2,32
 4018c30:	10c5c83a 	sub	r2,r2,r3
 4018c34:	8884d83a 	srl	r2,r17,r2
 4018c38:	98d0983a 	sll	r8,r19,r3
 4018c3c:	88e2983a 	sll	r17,r17,r3
 4018c40:	1204b03a 	or	r2,r2,r8
 4018c44:	1c007416 	blt	r3,r16,4018e18 <__adddf3+0x388>
 4018c48:	1c21c83a 	sub	r16,r3,r16
 4018c4c:	82000044 	addi	r8,r16,1
 4018c50:	00c007c4 	movi	r3,31
 4018c54:	1a009116 	blt	r3,r8,4018e9c <__adddf3+0x40c>
 4018c58:	00c00804 	movi	r3,32
 4018c5c:	1a07c83a 	sub	r3,r3,r8
 4018c60:	8a08d83a 	srl	r4,r17,r8
 4018c64:	88e2983a 	sll	r17,r17,r3
 4018c68:	10c6983a 	sll	r3,r2,r3
 4018c6c:	1210d83a 	srl	r8,r2,r8
 4018c70:	8804c03a 	cmpne	r2,r17,zero
 4018c74:	1906b03a 	or	r3,r3,r4
 4018c78:	18a2b03a 	or	r17,r3,r2
 4018c7c:	0021883a 	mov	r16,zero
 4018c80:	003fa206 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4018c84:	1890b03a 	or	r8,r3,r2
 4018c88:	40017d26 	beq	r8,zero,4019280 <__adddf3+0x7f0>
 4018c8c:	1011883a 	mov	r8,r2
 4018c90:	1823883a 	mov	r17,r3
 4018c94:	888001cc 	andi	r2,r17,7
 4018c98:	103f9e1e 	bne	r2,zero,4018b14 <__alt_mem_onchip_memory2_0+0xfc017894>
 4018c9c:	4004977a 	slli	r2,r8,29
 4018ca0:	8822d0fa 	srli	r17,r17,3
 4018ca4:	4010d0fa 	srli	r8,r8,3
 4018ca8:	9007883a 	mov	r3,r18
 4018cac:	1444b03a 	or	r2,r2,r17
 4018cb0:	0101ffc4 	movi	r4,2047
 4018cb4:	81002426 	beq	r16,r4,4018d48 <__adddf3+0x2b8>
 4018cb8:	8120703a 	and	r16,r16,r4
 4018cbc:	01000434 	movhi	r4,16
 4018cc0:	213fffc4 	addi	r4,r4,-1
 4018cc4:	4110703a 	and	r8,r8,r4
 4018cc8:	003fa806 	br	4018b6c <__alt_mem_onchip_memory2_0+0xfc0178ec>
 4018ccc:	8089c83a 	sub	r4,r16,r2
 4018cd0:	01005e0e 	bge	zero,r4,4018e4c <__adddf3+0x3bc>
 4018cd4:	10002b26 	beq	r2,zero,4018d84 <__adddf3+0x2f4>
 4018cd8:	0081ffc4 	movi	r2,2047
 4018cdc:	80bf8b26 	beq	r16,r2,4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4018ce0:	4a402034 	orhi	r9,r9,128
 4018ce4:	00800e04 	movi	r2,56
 4018ce8:	1100a40e 	bge	r2,r4,4018f7c <__adddf3+0x4ec>
 4018cec:	498cb03a 	or	r6,r9,r6
 4018cf0:	300ac03a 	cmpne	r5,r6,zero
 4018cf4:	0013883a 	mov	r9,zero
 4018cf8:	2c4b883a 	add	r5,r5,r17
 4018cfc:	2c63803a 	cmpltu	r17,r5,r17
 4018d00:	4a11883a 	add	r8,r9,r8
 4018d04:	8a11883a 	add	r8,r17,r8
 4018d08:	2823883a 	mov	r17,r5
 4018d0c:	4080202c 	andhi	r2,r8,128
 4018d10:	103fe026 	beq	r2,zero,4018c94 <__alt_mem_onchip_memory2_0+0xfc017a14>
 4018d14:	84000044 	addi	r16,r16,1
 4018d18:	0081ffc4 	movi	r2,2047
 4018d1c:	8080d226 	beq	r16,r2,4019068 <__adddf3+0x5d8>
 4018d20:	00bfe034 	movhi	r2,65408
 4018d24:	10bfffc4 	addi	r2,r2,-1
 4018d28:	4090703a 	and	r8,r8,r2
 4018d2c:	880ad07a 	srli	r5,r17,1
 4018d30:	400897fa 	slli	r4,r8,31
 4018d34:	88c0004c 	andi	r3,r17,1
 4018d38:	28e2b03a 	or	r17,r5,r3
 4018d3c:	4010d07a 	srli	r8,r8,1
 4018d40:	2462b03a 	or	r17,r4,r17
 4018d44:	003f7106 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4018d48:	4088b03a 	or	r4,r8,r2
 4018d4c:	20014526 	beq	r4,zero,4019264 <__adddf3+0x7d4>
 4018d50:	01000434 	movhi	r4,16
 4018d54:	42000234 	orhi	r8,r8,8
 4018d58:	213fffc4 	addi	r4,r4,-1
 4018d5c:	4110703a 	and	r8,r8,r4
 4018d60:	003f8206 	br	4018b6c <__alt_mem_onchip_memory2_0+0xfc0178ec>
 4018d64:	18ffffc4 	addi	r3,r3,-1
 4018d68:	1800491e 	bne	r3,zero,4018e90 <__adddf3+0x400>
 4018d6c:	898bc83a 	sub	r5,r17,r6
 4018d70:	8963803a 	cmpltu	r17,r17,r5
 4018d74:	4251c83a 	sub	r8,r8,r9
 4018d78:	4451c83a 	sub	r8,r8,r17
 4018d7c:	2823883a 	mov	r17,r5
 4018d80:	003f9f06 	br	4018c00 <__alt_mem_onchip_memory2_0+0xfc017980>
 4018d84:	4984b03a 	or	r2,r9,r6
 4018d88:	103f6026 	beq	r2,zero,4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4018d8c:	213fffc4 	addi	r4,r4,-1
 4018d90:	2000931e 	bne	r4,zero,4018fe0 <__adddf3+0x550>
 4018d94:	898d883a 	add	r6,r17,r6
 4018d98:	3463803a 	cmpltu	r17,r6,r17
 4018d9c:	4251883a 	add	r8,r8,r9
 4018da0:	8a11883a 	add	r8,r17,r8
 4018da4:	3023883a 	mov	r17,r6
 4018da8:	003fd806 	br	4018d0c <__alt_mem_onchip_memory2_0+0xfc017a8c>
 4018dac:	1800541e 	bne	r3,zero,4018f00 <__adddf3+0x470>
 4018db0:	80800044 	addi	r2,r16,1
 4018db4:	1081ffcc 	andi	r2,r2,2047
 4018db8:	00c00044 	movi	r3,1
 4018dbc:	1880a00e 	bge	r3,r2,4019040 <__adddf3+0x5b0>
 4018dc0:	8989c83a 	sub	r4,r17,r6
 4018dc4:	8905803a 	cmpltu	r2,r17,r4
 4018dc8:	4267c83a 	sub	r19,r8,r9
 4018dcc:	98a7c83a 	sub	r19,r19,r2
 4018dd0:	9880202c 	andhi	r2,r19,128
 4018dd4:	10006326 	beq	r2,zero,4018f64 <__adddf3+0x4d4>
 4018dd8:	3463c83a 	sub	r17,r6,r17
 4018ddc:	4a07c83a 	sub	r3,r9,r8
 4018de0:	344d803a 	cmpltu	r6,r6,r17
 4018de4:	19a7c83a 	sub	r19,r3,r6
 4018de8:	3825883a 	mov	r18,r7
 4018dec:	983f8a1e 	bne	r19,zero,4018c18 <__alt_mem_onchip_memory2_0+0xfc017998>
 4018df0:	8809883a 	mov	r4,r17
 4018df4:	400e04c0 	call	400e04c <__clzsi2>
 4018df8:	10800804 	addi	r2,r2,32
 4018dfc:	10fffe04 	addi	r3,r2,-8
 4018e00:	010007c4 	movi	r4,31
 4018e04:	20ff890e 	bge	r4,r3,4018c2c <__alt_mem_onchip_memory2_0+0xfc0179ac>
 4018e08:	10bff604 	addi	r2,r2,-40
 4018e0c:	8884983a 	sll	r2,r17,r2
 4018e10:	0023883a 	mov	r17,zero
 4018e14:	1c3f8c0e 	bge	r3,r16,4018c48 <__alt_mem_onchip_memory2_0+0xfc0179c8>
 4018e18:	023fe034 	movhi	r8,65408
 4018e1c:	423fffc4 	addi	r8,r8,-1
 4018e20:	80e1c83a 	sub	r16,r16,r3
 4018e24:	1210703a 	and	r8,r2,r8
 4018e28:	003f3806 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4018e2c:	9007883a 	mov	r3,r18
 4018e30:	0011883a 	mov	r8,zero
 4018e34:	0005883a 	mov	r2,zero
 4018e38:	003f4c06 	br	4018b6c <__alt_mem_onchip_memory2_0+0xfc0178ec>
 4018e3c:	498cb03a 	or	r6,r9,r6
 4018e40:	300cc03a 	cmpne	r6,r6,zero
 4018e44:	0007883a 	mov	r3,zero
 4018e48:	003f6806 	br	4018bec <__alt_mem_onchip_memory2_0+0xfc01796c>
 4018e4c:	20009c1e 	bne	r4,zero,40190c0 <__adddf3+0x630>
 4018e50:	80800044 	addi	r2,r16,1
 4018e54:	1141ffcc 	andi	r5,r2,2047
 4018e58:	01000044 	movi	r4,1
 4018e5c:	2140670e 	bge	r4,r5,4018ffc <__adddf3+0x56c>
 4018e60:	0101ffc4 	movi	r4,2047
 4018e64:	11007f26 	beq	r2,r4,4019064 <__adddf3+0x5d4>
 4018e68:	898d883a 	add	r6,r17,r6
 4018e6c:	4247883a 	add	r3,r8,r9
 4018e70:	3451803a 	cmpltu	r8,r6,r17
 4018e74:	40d1883a 	add	r8,r8,r3
 4018e78:	402297fa 	slli	r17,r8,31
 4018e7c:	300cd07a 	srli	r6,r6,1
 4018e80:	4010d07a 	srli	r8,r8,1
 4018e84:	1021883a 	mov	r16,r2
 4018e88:	89a2b03a 	or	r17,r17,r6
 4018e8c:	003f1f06 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4018e90:	0081ffc4 	movi	r2,2047
 4018e94:	80bf481e 	bne	r16,r2,4018bb8 <__alt_mem_onchip_memory2_0+0xfc017938>
 4018e98:	003f1c06 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4018e9c:	843ff844 	addi	r16,r16,-31
 4018ea0:	01000804 	movi	r4,32
 4018ea4:	1406d83a 	srl	r3,r2,r16
 4018ea8:	41005026 	beq	r8,r4,4018fec <__adddf3+0x55c>
 4018eac:	01001004 	movi	r4,64
 4018eb0:	2211c83a 	sub	r8,r4,r8
 4018eb4:	1204983a 	sll	r2,r2,r8
 4018eb8:	88a2b03a 	or	r17,r17,r2
 4018ebc:	8822c03a 	cmpne	r17,r17,zero
 4018ec0:	1c62b03a 	or	r17,r3,r17
 4018ec4:	0011883a 	mov	r8,zero
 4018ec8:	0021883a 	mov	r16,zero
 4018ecc:	003f7106 	br	4018c94 <__alt_mem_onchip_memory2_0+0xfc017a14>
 4018ed0:	193ff804 	addi	r4,r3,-32
 4018ed4:	00800804 	movi	r2,32
 4018ed8:	4908d83a 	srl	r4,r9,r4
 4018edc:	18804526 	beq	r3,r2,4018ff4 <__adddf3+0x564>
 4018ee0:	00801004 	movi	r2,64
 4018ee4:	10c5c83a 	sub	r2,r2,r3
 4018ee8:	4886983a 	sll	r3,r9,r2
 4018eec:	198cb03a 	or	r6,r3,r6
 4018ef0:	300cc03a 	cmpne	r6,r6,zero
 4018ef4:	218cb03a 	or	r6,r4,r6
 4018ef8:	0007883a 	mov	r3,zero
 4018efc:	003f3b06 	br	4018bec <__alt_mem_onchip_memory2_0+0xfc01796c>
 4018f00:	80002a26 	beq	r16,zero,4018fac <__adddf3+0x51c>
 4018f04:	0101ffc4 	movi	r4,2047
 4018f08:	11006826 	beq	r2,r4,40190ac <__adddf3+0x61c>
 4018f0c:	00c7c83a 	sub	r3,zero,r3
 4018f10:	42002034 	orhi	r8,r8,128
 4018f14:	01000e04 	movi	r4,56
 4018f18:	20c07c16 	blt	r4,r3,401910c <__adddf3+0x67c>
 4018f1c:	010007c4 	movi	r4,31
 4018f20:	20c0da16 	blt	r4,r3,401928c <__adddf3+0x7fc>
 4018f24:	01000804 	movi	r4,32
 4018f28:	20c9c83a 	sub	r4,r4,r3
 4018f2c:	4114983a 	sll	r10,r8,r4
 4018f30:	88cad83a 	srl	r5,r17,r3
 4018f34:	8908983a 	sll	r4,r17,r4
 4018f38:	40c6d83a 	srl	r3,r8,r3
 4018f3c:	5162b03a 	or	r17,r10,r5
 4018f40:	2008c03a 	cmpne	r4,r4,zero
 4018f44:	8922b03a 	or	r17,r17,r4
 4018f48:	3463c83a 	sub	r17,r6,r17
 4018f4c:	48c7c83a 	sub	r3,r9,r3
 4018f50:	344d803a 	cmpltu	r6,r6,r17
 4018f54:	1991c83a 	sub	r8,r3,r6
 4018f58:	1021883a 	mov	r16,r2
 4018f5c:	3825883a 	mov	r18,r7
 4018f60:	003f2706 	br	4018c00 <__alt_mem_onchip_memory2_0+0xfc017980>
 4018f64:	24d0b03a 	or	r8,r4,r19
 4018f68:	40001b1e 	bne	r8,zero,4018fd8 <__adddf3+0x548>
 4018f6c:	0005883a 	mov	r2,zero
 4018f70:	0007883a 	mov	r3,zero
 4018f74:	0021883a 	mov	r16,zero
 4018f78:	003f4d06 	br	4018cb0 <__alt_mem_onchip_memory2_0+0xfc017a30>
 4018f7c:	008007c4 	movi	r2,31
 4018f80:	11003c16 	blt	r2,r4,4019074 <__adddf3+0x5e4>
 4018f84:	00800804 	movi	r2,32
 4018f88:	1105c83a 	sub	r2,r2,r4
 4018f8c:	488e983a 	sll	r7,r9,r2
 4018f90:	310ad83a 	srl	r5,r6,r4
 4018f94:	3084983a 	sll	r2,r6,r2
 4018f98:	4912d83a 	srl	r9,r9,r4
 4018f9c:	394ab03a 	or	r5,r7,r5
 4018fa0:	1004c03a 	cmpne	r2,r2,zero
 4018fa4:	288ab03a 	or	r5,r5,r2
 4018fa8:	003f5306 	br	4018cf8 <__alt_mem_onchip_memory2_0+0xfc017a78>
 4018fac:	4448b03a 	or	r4,r8,r17
 4018fb0:	20003e26 	beq	r4,zero,40190ac <__adddf3+0x61c>
 4018fb4:	00c6303a 	nor	r3,zero,r3
 4018fb8:	18003a1e 	bne	r3,zero,40190a4 <__adddf3+0x614>
 4018fbc:	3463c83a 	sub	r17,r6,r17
 4018fc0:	4a07c83a 	sub	r3,r9,r8
 4018fc4:	344d803a 	cmpltu	r6,r6,r17
 4018fc8:	1991c83a 	sub	r8,r3,r6
 4018fcc:	1021883a 	mov	r16,r2
 4018fd0:	3825883a 	mov	r18,r7
 4018fd4:	003f0a06 	br	4018c00 <__alt_mem_onchip_memory2_0+0xfc017980>
 4018fd8:	2023883a 	mov	r17,r4
 4018fdc:	003f0d06 	br	4018c14 <__alt_mem_onchip_memory2_0+0xfc017994>
 4018fe0:	0081ffc4 	movi	r2,2047
 4018fe4:	80bf3f1e 	bne	r16,r2,4018ce4 <__alt_mem_onchip_memory2_0+0xfc017a64>
 4018fe8:	003ec806 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4018fec:	0005883a 	mov	r2,zero
 4018ff0:	003fb106 	br	4018eb8 <__alt_mem_onchip_memory2_0+0xfc017c38>
 4018ff4:	0007883a 	mov	r3,zero
 4018ff8:	003fbc06 	br	4018eec <__alt_mem_onchip_memory2_0+0xfc017c6c>
 4018ffc:	4444b03a 	or	r2,r8,r17
 4019000:	8000871e 	bne	r16,zero,4019220 <__adddf3+0x790>
 4019004:	1000ba26 	beq	r2,zero,40192f0 <__adddf3+0x860>
 4019008:	4984b03a 	or	r2,r9,r6
 401900c:	103ebf26 	beq	r2,zero,4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4019010:	8985883a 	add	r2,r17,r6
 4019014:	4247883a 	add	r3,r8,r9
 4019018:	1451803a 	cmpltu	r8,r2,r17
 401901c:	40d1883a 	add	r8,r8,r3
 4019020:	40c0202c 	andhi	r3,r8,128
 4019024:	1023883a 	mov	r17,r2
 4019028:	183f1a26 	beq	r3,zero,4018c94 <__alt_mem_onchip_memory2_0+0xfc017a14>
 401902c:	00bfe034 	movhi	r2,65408
 4019030:	10bfffc4 	addi	r2,r2,-1
 4019034:	2021883a 	mov	r16,r4
 4019038:	4090703a 	and	r8,r8,r2
 401903c:	003eb306 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4019040:	4444b03a 	or	r2,r8,r17
 4019044:	8000291e 	bne	r16,zero,40190ec <__adddf3+0x65c>
 4019048:	10004b1e 	bne	r2,zero,4019178 <__adddf3+0x6e8>
 401904c:	4990b03a 	or	r8,r9,r6
 4019050:	40008b26 	beq	r8,zero,4019280 <__adddf3+0x7f0>
 4019054:	4811883a 	mov	r8,r9
 4019058:	3023883a 	mov	r17,r6
 401905c:	3825883a 	mov	r18,r7
 4019060:	003eaa06 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4019064:	1021883a 	mov	r16,r2
 4019068:	0011883a 	mov	r8,zero
 401906c:	0005883a 	mov	r2,zero
 4019070:	003f0f06 	br	4018cb0 <__alt_mem_onchip_memory2_0+0xfc017a30>
 4019074:	217ff804 	addi	r5,r4,-32
 4019078:	00800804 	movi	r2,32
 401907c:	494ad83a 	srl	r5,r9,r5
 4019080:	20807d26 	beq	r4,r2,4019278 <__adddf3+0x7e8>
 4019084:	00801004 	movi	r2,64
 4019088:	1109c83a 	sub	r4,r2,r4
 401908c:	4912983a 	sll	r9,r9,r4
 4019090:	498cb03a 	or	r6,r9,r6
 4019094:	300cc03a 	cmpne	r6,r6,zero
 4019098:	298ab03a 	or	r5,r5,r6
 401909c:	0013883a 	mov	r9,zero
 40190a0:	003f1506 	br	4018cf8 <__alt_mem_onchip_memory2_0+0xfc017a78>
 40190a4:	0101ffc4 	movi	r4,2047
 40190a8:	113f9a1e 	bne	r2,r4,4018f14 <__alt_mem_onchip_memory2_0+0xfc017c94>
 40190ac:	4811883a 	mov	r8,r9
 40190b0:	3023883a 	mov	r17,r6
 40190b4:	1021883a 	mov	r16,r2
 40190b8:	3825883a 	mov	r18,r7
 40190bc:	003e9306 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 40190c0:	8000161e 	bne	r16,zero,401911c <__adddf3+0x68c>
 40190c4:	444ab03a 	or	r5,r8,r17
 40190c8:	28005126 	beq	r5,zero,4019210 <__adddf3+0x780>
 40190cc:	0108303a 	nor	r4,zero,r4
 40190d0:	20004d1e 	bne	r4,zero,4019208 <__adddf3+0x778>
 40190d4:	89a3883a 	add	r17,r17,r6
 40190d8:	4253883a 	add	r9,r8,r9
 40190dc:	898d803a 	cmpltu	r6,r17,r6
 40190e0:	3251883a 	add	r8,r6,r9
 40190e4:	1021883a 	mov	r16,r2
 40190e8:	003f0806 	br	4018d0c <__alt_mem_onchip_memory2_0+0xfc017a8c>
 40190ec:	1000301e 	bne	r2,zero,40191b0 <__adddf3+0x720>
 40190f0:	4984b03a 	or	r2,r9,r6
 40190f4:	10007126 	beq	r2,zero,40192bc <__adddf3+0x82c>
 40190f8:	4811883a 	mov	r8,r9
 40190fc:	3023883a 	mov	r17,r6
 4019100:	3825883a 	mov	r18,r7
 4019104:	0401ffc4 	movi	r16,2047
 4019108:	003e8006 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 401910c:	4462b03a 	or	r17,r8,r17
 4019110:	8822c03a 	cmpne	r17,r17,zero
 4019114:	0007883a 	mov	r3,zero
 4019118:	003f8b06 	br	4018f48 <__alt_mem_onchip_memory2_0+0xfc017cc8>
 401911c:	0141ffc4 	movi	r5,2047
 4019120:	11403b26 	beq	r2,r5,4019210 <__adddf3+0x780>
 4019124:	0109c83a 	sub	r4,zero,r4
 4019128:	42002034 	orhi	r8,r8,128
 401912c:	01400e04 	movi	r5,56
 4019130:	29006716 	blt	r5,r4,40192d0 <__adddf3+0x840>
 4019134:	014007c4 	movi	r5,31
 4019138:	29007016 	blt	r5,r4,40192fc <__adddf3+0x86c>
 401913c:	01400804 	movi	r5,32
 4019140:	290bc83a 	sub	r5,r5,r4
 4019144:	4154983a 	sll	r10,r8,r5
 4019148:	890ed83a 	srl	r7,r17,r4
 401914c:	894a983a 	sll	r5,r17,r5
 4019150:	4108d83a 	srl	r4,r8,r4
 4019154:	51e2b03a 	or	r17,r10,r7
 4019158:	280ac03a 	cmpne	r5,r5,zero
 401915c:	8962b03a 	or	r17,r17,r5
 4019160:	89a3883a 	add	r17,r17,r6
 4019164:	2253883a 	add	r9,r4,r9
 4019168:	898d803a 	cmpltu	r6,r17,r6
 401916c:	3251883a 	add	r8,r6,r9
 4019170:	1021883a 	mov	r16,r2
 4019174:	003ee506 	br	4018d0c <__alt_mem_onchip_memory2_0+0xfc017a8c>
 4019178:	4984b03a 	or	r2,r9,r6
 401917c:	103e6326 	beq	r2,zero,4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4019180:	8987c83a 	sub	r3,r17,r6
 4019184:	88c9803a 	cmpltu	r4,r17,r3
 4019188:	4245c83a 	sub	r2,r8,r9
 401918c:	1105c83a 	sub	r2,r2,r4
 4019190:	1100202c 	andhi	r4,r2,128
 4019194:	203ebb26 	beq	r4,zero,4018c84 <__alt_mem_onchip_memory2_0+0xfc017a04>
 4019198:	3463c83a 	sub	r17,r6,r17
 401919c:	4a07c83a 	sub	r3,r9,r8
 40191a0:	344d803a 	cmpltu	r6,r6,r17
 40191a4:	1991c83a 	sub	r8,r3,r6
 40191a8:	3825883a 	mov	r18,r7
 40191ac:	003e5706 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 40191b0:	4984b03a 	or	r2,r9,r6
 40191b4:	10002e26 	beq	r2,zero,4019270 <__adddf3+0x7e0>
 40191b8:	4004d0fa 	srli	r2,r8,3
 40191bc:	8822d0fa 	srli	r17,r17,3
 40191c0:	4010977a 	slli	r8,r8,29
 40191c4:	10c0022c 	andhi	r3,r2,8
 40191c8:	4462b03a 	or	r17,r8,r17
 40191cc:	18000826 	beq	r3,zero,40191f0 <__adddf3+0x760>
 40191d0:	4808d0fa 	srli	r4,r9,3
 40191d4:	20c0022c 	andhi	r3,r4,8
 40191d8:	1800051e 	bne	r3,zero,40191f0 <__adddf3+0x760>
 40191dc:	300cd0fa 	srli	r6,r6,3
 40191e0:	4806977a 	slli	r3,r9,29
 40191e4:	2005883a 	mov	r2,r4
 40191e8:	3825883a 	mov	r18,r7
 40191ec:	19a2b03a 	or	r17,r3,r6
 40191f0:	8810d77a 	srli	r8,r17,29
 40191f4:	100490fa 	slli	r2,r2,3
 40191f8:	882290fa 	slli	r17,r17,3
 40191fc:	0401ffc4 	movi	r16,2047
 4019200:	4090b03a 	or	r8,r8,r2
 4019204:	003e4106 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4019208:	0141ffc4 	movi	r5,2047
 401920c:	117fc71e 	bne	r2,r5,401912c <__alt_mem_onchip_memory2_0+0xfc017eac>
 4019210:	4811883a 	mov	r8,r9
 4019214:	3023883a 	mov	r17,r6
 4019218:	1021883a 	mov	r16,r2
 401921c:	003e3b06 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4019220:	10002f26 	beq	r2,zero,40192e0 <__adddf3+0x850>
 4019224:	4984b03a 	or	r2,r9,r6
 4019228:	10001126 	beq	r2,zero,4019270 <__adddf3+0x7e0>
 401922c:	4004d0fa 	srli	r2,r8,3
 4019230:	8822d0fa 	srli	r17,r17,3
 4019234:	4010977a 	slli	r8,r8,29
 4019238:	10c0022c 	andhi	r3,r2,8
 401923c:	4462b03a 	or	r17,r8,r17
 4019240:	183feb26 	beq	r3,zero,40191f0 <__alt_mem_onchip_memory2_0+0xfc017f70>
 4019244:	4808d0fa 	srli	r4,r9,3
 4019248:	20c0022c 	andhi	r3,r4,8
 401924c:	183fe81e 	bne	r3,zero,40191f0 <__alt_mem_onchip_memory2_0+0xfc017f70>
 4019250:	300cd0fa 	srli	r6,r6,3
 4019254:	4806977a 	slli	r3,r9,29
 4019258:	2005883a 	mov	r2,r4
 401925c:	19a2b03a 	or	r17,r3,r6
 4019260:	003fe306 	br	40191f0 <__alt_mem_onchip_memory2_0+0xfc017f70>
 4019264:	0011883a 	mov	r8,zero
 4019268:	0005883a 	mov	r2,zero
 401926c:	003e3f06 	br	4018b6c <__alt_mem_onchip_memory2_0+0xfc0178ec>
 4019270:	0401ffc4 	movi	r16,2047
 4019274:	003e2506 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 4019278:	0013883a 	mov	r9,zero
 401927c:	003f8406 	br	4019090 <__alt_mem_onchip_memory2_0+0xfc017e10>
 4019280:	0005883a 	mov	r2,zero
 4019284:	0007883a 	mov	r3,zero
 4019288:	003e8906 	br	4018cb0 <__alt_mem_onchip_memory2_0+0xfc017a30>
 401928c:	197ff804 	addi	r5,r3,-32
 4019290:	01000804 	movi	r4,32
 4019294:	414ad83a 	srl	r5,r8,r5
 4019298:	19002426 	beq	r3,r4,401932c <__adddf3+0x89c>
 401929c:	01001004 	movi	r4,64
 40192a0:	20c7c83a 	sub	r3,r4,r3
 40192a4:	40c6983a 	sll	r3,r8,r3
 40192a8:	1c46b03a 	or	r3,r3,r17
 40192ac:	1806c03a 	cmpne	r3,r3,zero
 40192b0:	28e2b03a 	or	r17,r5,r3
 40192b4:	0007883a 	mov	r3,zero
 40192b8:	003f2306 	br	4018f48 <__alt_mem_onchip_memory2_0+0xfc017cc8>
 40192bc:	0007883a 	mov	r3,zero
 40192c0:	5811883a 	mov	r8,r11
 40192c4:	00bfffc4 	movi	r2,-1
 40192c8:	0401ffc4 	movi	r16,2047
 40192cc:	003e7806 	br	4018cb0 <__alt_mem_onchip_memory2_0+0xfc017a30>
 40192d0:	4462b03a 	or	r17,r8,r17
 40192d4:	8822c03a 	cmpne	r17,r17,zero
 40192d8:	0009883a 	mov	r4,zero
 40192dc:	003fa006 	br	4019160 <__alt_mem_onchip_memory2_0+0xfc017ee0>
 40192e0:	4811883a 	mov	r8,r9
 40192e4:	3023883a 	mov	r17,r6
 40192e8:	0401ffc4 	movi	r16,2047
 40192ec:	003e0706 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 40192f0:	4811883a 	mov	r8,r9
 40192f4:	3023883a 	mov	r17,r6
 40192f8:	003e0406 	br	4018b0c <__alt_mem_onchip_memory2_0+0xfc01788c>
 40192fc:	21fff804 	addi	r7,r4,-32
 4019300:	01400804 	movi	r5,32
 4019304:	41ced83a 	srl	r7,r8,r7
 4019308:	21400a26 	beq	r4,r5,4019334 <__adddf3+0x8a4>
 401930c:	01401004 	movi	r5,64
 4019310:	2909c83a 	sub	r4,r5,r4
 4019314:	4108983a 	sll	r4,r8,r4
 4019318:	2448b03a 	or	r4,r4,r17
 401931c:	2008c03a 	cmpne	r4,r4,zero
 4019320:	3922b03a 	or	r17,r7,r4
 4019324:	0009883a 	mov	r4,zero
 4019328:	003f8d06 	br	4019160 <__alt_mem_onchip_memory2_0+0xfc017ee0>
 401932c:	0007883a 	mov	r3,zero
 4019330:	003fdd06 	br	40192a8 <__alt_mem_onchip_memory2_0+0xfc018028>
 4019334:	0009883a 	mov	r4,zero
 4019338:	003ff706 	br	4019318 <__alt_mem_onchip_memory2_0+0xfc018098>

0401933c <__divdf3>:
 401933c:	defff004 	addi	sp,sp,-64
 4019340:	dc800815 	stw	r18,32(sp)
 4019344:	2824d53a 	srli	r18,r5,20
 4019348:	dd800c15 	stw	r22,48(sp)
 401934c:	282cd7fa 	srli	r22,r5,31
 4019350:	dc000615 	stw	r16,24(sp)
 4019354:	04000434 	movhi	r16,16
 4019358:	843fffc4 	addi	r16,r16,-1
 401935c:	dfc00f15 	stw	ra,60(sp)
 4019360:	df000e15 	stw	fp,56(sp)
 4019364:	ddc00d15 	stw	r23,52(sp)
 4019368:	dd400b15 	stw	r21,44(sp)
 401936c:	dd000a15 	stw	r20,40(sp)
 4019370:	dcc00915 	stw	r19,36(sp)
 4019374:	dc400715 	stw	r17,28(sp)
 4019378:	9481ffcc 	andi	r18,r18,2047
 401937c:	2c20703a 	and	r16,r5,r16
 4019380:	b2003fcc 	andi	r8,r22,255
 4019384:	90006126 	beq	r18,zero,401950c <__divdf3+0x1d0>
 4019388:	0081ffc4 	movi	r2,2047
 401938c:	202b883a 	mov	r21,r4
 4019390:	90803726 	beq	r18,r2,4019470 <__divdf3+0x134>
 4019394:	80800434 	orhi	r2,r16,16
 4019398:	100490fa 	slli	r2,r2,3
 401939c:	2020d77a 	srli	r16,r4,29
 40193a0:	202a90fa 	slli	r21,r4,3
 40193a4:	94bf0044 	addi	r18,r18,-1023
 40193a8:	80a0b03a 	or	r16,r16,r2
 40193ac:	0013883a 	mov	r9,zero
 40193b0:	000b883a 	mov	r5,zero
 40193b4:	3806d53a 	srli	r3,r7,20
 40193b8:	382ed7fa 	srli	r23,r7,31
 40193bc:	04400434 	movhi	r17,16
 40193c0:	8c7fffc4 	addi	r17,r17,-1
 40193c4:	18c1ffcc 	andi	r3,r3,2047
 40193c8:	3029883a 	mov	r20,r6
 40193cc:	3c62703a 	and	r17,r7,r17
 40193d0:	bf003fcc 	andi	fp,r23,255
 40193d4:	18006e26 	beq	r3,zero,4019590 <__divdf3+0x254>
 40193d8:	0081ffc4 	movi	r2,2047
 40193dc:	18806626 	beq	r3,r2,4019578 <__divdf3+0x23c>
 40193e0:	88800434 	orhi	r2,r17,16
 40193e4:	100490fa 	slli	r2,r2,3
 40193e8:	3022d77a 	srli	r17,r6,29
 40193ec:	302890fa 	slli	r20,r6,3
 40193f0:	18ff0044 	addi	r3,r3,-1023
 40193f4:	88a2b03a 	or	r17,r17,r2
 40193f8:	000f883a 	mov	r7,zero
 40193fc:	b5e6f03a 	xor	r19,r22,r23
 4019400:	3a4cb03a 	or	r6,r7,r9
 4019404:	008003c4 	movi	r2,15
 4019408:	9809883a 	mov	r4,r19
 401940c:	90c7c83a 	sub	r3,r18,r3
 4019410:	9cc03fcc 	andi	r19,r19,255
 4019414:	11809636 	bltu	r2,r6,4019670 <__divdf3+0x334>
 4019418:	300c90ba 	slli	r6,r6,2
 401941c:	008100b4 	movhi	r2,1026
 4019420:	10a50c04 	addi	r2,r2,-27600
 4019424:	308d883a 	add	r6,r6,r2
 4019428:	30800017 	ldw	r2,0(r6)
 401942c:	1000683a 	jmp	r2
 4019430:	04019670 	cmpltui	r16,zero,1625
 4019434:	040194a8 	cmpgeui	r16,zero,1618
 4019438:	04019660 	cmpeqi	r16,zero,1625
 401943c:	0401949c 	xori	r16,zero,1618
 4019440:	04019660 	cmpeqi	r16,zero,1625
 4019444:	04019634 	movhi	r16,1624
 4019448:	04019660 	cmpeqi	r16,zero,1625
 401944c:	0401949c 	xori	r16,zero,1618
 4019450:	040194a8 	cmpgeui	r16,zero,1618
 4019454:	040194a8 	cmpgeui	r16,zero,1618
 4019458:	04019634 	movhi	r16,1624
 401945c:	0401949c 	xori	r16,zero,1618
 4019460:	0401948c 	andi	r16,zero,1618
 4019464:	0401948c 	andi	r16,zero,1618
 4019468:	0401948c 	andi	r16,zero,1618
 401946c:	040199f8 	rdprs	r16,zero,1639
 4019470:	2404b03a 	or	r2,r4,r16
 4019474:	10006c1e 	bne	r2,zero,4019628 <__divdf3+0x2ec>
 4019478:	02400204 	movi	r9,8
 401947c:	0021883a 	mov	r16,zero
 4019480:	002b883a 	mov	r21,zero
 4019484:	01400084 	movi	r5,2
 4019488:	003fca06 	br	40193b4 <__alt_mem_onchip_memory2_0+0xfc018134>
 401948c:	8023883a 	mov	r17,r16
 4019490:	a829883a 	mov	r20,r21
 4019494:	4039883a 	mov	fp,r8
 4019498:	280f883a 	mov	r7,r5
 401949c:	00800084 	movi	r2,2
 40194a0:	3881601e 	bne	r7,r2,4019a24 <__divdf3+0x6e8>
 40194a4:	e027883a 	mov	r19,fp
 40194a8:	9900004c 	andi	r4,r19,1
 40194ac:	0081ffc4 	movi	r2,2047
 40194b0:	0021883a 	mov	r16,zero
 40194b4:	002b883a 	mov	r21,zero
 40194b8:	1004953a 	slli	r2,r2,20
 40194bc:	20c03fcc 	andi	r3,r4,255
 40194c0:	01400434 	movhi	r5,16
 40194c4:	297fffc4 	addi	r5,r5,-1
 40194c8:	180697fa 	slli	r3,r3,31
 40194cc:	8160703a 	and	r16,r16,r5
 40194d0:	80a0b03a 	or	r16,r16,r2
 40194d4:	80c6b03a 	or	r3,r16,r3
 40194d8:	a805883a 	mov	r2,r21
 40194dc:	dfc00f17 	ldw	ra,60(sp)
 40194e0:	df000e17 	ldw	fp,56(sp)
 40194e4:	ddc00d17 	ldw	r23,52(sp)
 40194e8:	dd800c17 	ldw	r22,48(sp)
 40194ec:	dd400b17 	ldw	r21,44(sp)
 40194f0:	dd000a17 	ldw	r20,40(sp)
 40194f4:	dcc00917 	ldw	r19,36(sp)
 40194f8:	dc800817 	ldw	r18,32(sp)
 40194fc:	dc400717 	ldw	r17,28(sp)
 4019500:	dc000617 	ldw	r16,24(sp)
 4019504:	dec01004 	addi	sp,sp,64
 4019508:	f800283a 	ret
 401950c:	2404b03a 	or	r2,r4,r16
 4019510:	2023883a 	mov	r17,r4
 4019514:	10003f26 	beq	r2,zero,4019614 <__divdf3+0x2d8>
 4019518:	80015e26 	beq	r16,zero,4019a94 <__divdf3+0x758>
 401951c:	8009883a 	mov	r4,r16
 4019520:	d9800215 	stw	r6,8(sp)
 4019524:	d9c00515 	stw	r7,20(sp)
 4019528:	da000415 	stw	r8,16(sp)
 401952c:	400e04c0 	call	400e04c <__clzsi2>
 4019530:	d9800217 	ldw	r6,8(sp)
 4019534:	d9c00517 	ldw	r7,20(sp)
 4019538:	da000417 	ldw	r8,16(sp)
 401953c:	113ffd44 	addi	r4,r2,-11
 4019540:	00c00704 	movi	r3,28
 4019544:	19014f16 	blt	r3,r4,4019a84 <__divdf3+0x748>
 4019548:	00c00744 	movi	r3,29
 401954c:	157ffe04 	addi	r21,r2,-8
 4019550:	1907c83a 	sub	r3,r3,r4
 4019554:	8560983a 	sll	r16,r16,r21
 4019558:	88c6d83a 	srl	r3,r17,r3
 401955c:	8d6a983a 	sll	r21,r17,r21
 4019560:	1c20b03a 	or	r16,r3,r16
 4019564:	1080fcc4 	addi	r2,r2,1011
 4019568:	00a5c83a 	sub	r18,zero,r2
 401956c:	0013883a 	mov	r9,zero
 4019570:	000b883a 	mov	r5,zero
 4019574:	003f8f06 	br	40193b4 <__alt_mem_onchip_memory2_0+0xfc018134>
 4019578:	3444b03a 	or	r2,r6,r17
 401957c:	1000231e 	bne	r2,zero,401960c <__divdf3+0x2d0>
 4019580:	0023883a 	mov	r17,zero
 4019584:	0029883a 	mov	r20,zero
 4019588:	01c00084 	movi	r7,2
 401958c:	003f9b06 	br	40193fc <__alt_mem_onchip_memory2_0+0xfc01817c>
 4019590:	3444b03a 	or	r2,r6,r17
 4019594:	10001926 	beq	r2,zero,40195fc <__divdf3+0x2c0>
 4019598:	88014b26 	beq	r17,zero,4019ac8 <__divdf3+0x78c>
 401959c:	8809883a 	mov	r4,r17
 40195a0:	d9400115 	stw	r5,4(sp)
 40195a4:	d9800215 	stw	r6,8(sp)
 40195a8:	da000415 	stw	r8,16(sp)
 40195ac:	da400315 	stw	r9,12(sp)
 40195b0:	400e04c0 	call	400e04c <__clzsi2>
 40195b4:	d9400117 	ldw	r5,4(sp)
 40195b8:	d9800217 	ldw	r6,8(sp)
 40195bc:	da000417 	ldw	r8,16(sp)
 40195c0:	da400317 	ldw	r9,12(sp)
 40195c4:	113ffd44 	addi	r4,r2,-11
 40195c8:	00c00704 	movi	r3,28
 40195cc:	19013a16 	blt	r3,r4,4019ab8 <__divdf3+0x77c>
 40195d0:	00c00744 	movi	r3,29
 40195d4:	153ffe04 	addi	r20,r2,-8
 40195d8:	1907c83a 	sub	r3,r3,r4
 40195dc:	8d22983a 	sll	r17,r17,r20
 40195e0:	30c6d83a 	srl	r3,r6,r3
 40195e4:	3528983a 	sll	r20,r6,r20
 40195e8:	1c62b03a 	or	r17,r3,r17
 40195ec:	1080fcc4 	addi	r2,r2,1011
 40195f0:	0087c83a 	sub	r3,zero,r2
 40195f4:	000f883a 	mov	r7,zero
 40195f8:	003f8006 	br	40193fc <__alt_mem_onchip_memory2_0+0xfc01817c>
 40195fc:	0023883a 	mov	r17,zero
 4019600:	0029883a 	mov	r20,zero
 4019604:	01c00044 	movi	r7,1
 4019608:	003f7c06 	br	40193fc <__alt_mem_onchip_memory2_0+0xfc01817c>
 401960c:	01c000c4 	movi	r7,3
 4019610:	003f7a06 	br	40193fc <__alt_mem_onchip_memory2_0+0xfc01817c>
 4019614:	02400104 	movi	r9,4
 4019618:	0021883a 	mov	r16,zero
 401961c:	002b883a 	mov	r21,zero
 4019620:	01400044 	movi	r5,1
 4019624:	003f6306 	br	40193b4 <__alt_mem_onchip_memory2_0+0xfc018134>
 4019628:	02400304 	movi	r9,12
 401962c:	014000c4 	movi	r5,3
 4019630:	003f6006 	br	40193b4 <__alt_mem_onchip_memory2_0+0xfc018134>
 4019634:	04000434 	movhi	r16,16
 4019638:	0009883a 	mov	r4,zero
 401963c:	843fffc4 	addi	r16,r16,-1
 4019640:	057fffc4 	movi	r21,-1
 4019644:	0081ffc4 	movi	r2,2047
 4019648:	003f9b06 	br	40194b8 <__alt_mem_onchip_memory2_0+0xfc018238>
 401964c:	00c00044 	movi	r3,1
 4019650:	1887c83a 	sub	r3,r3,r2
 4019654:	01000e04 	movi	r4,56
 4019658:	20c1530e 	bge	r4,r3,4019ba8 <__divdf3+0x86c>
 401965c:	9900004c 	andi	r4,r19,1
 4019660:	0005883a 	mov	r2,zero
 4019664:	0021883a 	mov	r16,zero
 4019668:	002b883a 	mov	r21,zero
 401966c:	003f9206 	br	40194b8 <__alt_mem_onchip_memory2_0+0xfc018238>
 4019670:	8c012e36 	bltu	r17,r16,4019b2c <__divdf3+0x7f0>
 4019674:	84412c26 	beq	r16,r17,4019b28 <__divdf3+0x7ec>
 4019678:	a82f883a 	mov	r23,r21
 401967c:	18ffffc4 	addi	r3,r3,-1
 4019680:	002b883a 	mov	r21,zero
 4019684:	a004d63a 	srli	r2,r20,24
 4019688:	8822923a 	slli	r17,r17,8
 401968c:	a028923a 	slli	r20,r20,8
 4019690:	8009883a 	mov	r4,r16
 4019694:	88acb03a 	or	r22,r17,r2
 4019698:	dd000015 	stw	r20,0(sp)
 401969c:	b028d43a 	srli	r20,r22,16
 40196a0:	d8c00215 	stw	r3,8(sp)
 40196a4:	b4bfffcc 	andi	r18,r22,65535
 40196a8:	a00b883a 	mov	r5,r20
 40196ac:	400cf180 	call	400cf18 <__udivsi3>
 40196b0:	100b883a 	mov	r5,r2
 40196b4:	9009883a 	mov	r4,r18
 40196b8:	1023883a 	mov	r17,r2
 40196bc:	400cfd40 	call	400cfd4 <__mulsi3>
 40196c0:	8009883a 	mov	r4,r16
 40196c4:	a00b883a 	mov	r5,r20
 40196c8:	1039883a 	mov	fp,r2
 40196cc:	400cf7c0 	call	400cf7c <__umodsi3>
 40196d0:	1004943a 	slli	r2,r2,16
 40196d4:	b808d43a 	srli	r4,r23,16
 40196d8:	d8c00217 	ldw	r3,8(sp)
 40196dc:	2084b03a 	or	r2,r4,r2
 40196e0:	1700062e 	bgeu	r2,fp,40196fc <__divdf3+0x3c0>
 40196e4:	1585883a 	add	r2,r2,r22
 40196e8:	893fffc4 	addi	r4,r17,-1
 40196ec:	15811d36 	bltu	r2,r22,4019b64 <__divdf3+0x828>
 40196f0:	17011c2e 	bgeu	r2,fp,4019b64 <__divdf3+0x828>
 40196f4:	8c7fff84 	addi	r17,r17,-2
 40196f8:	1585883a 	add	r2,r2,r22
 40196fc:	1739c83a 	sub	fp,r2,fp
 4019700:	a00b883a 	mov	r5,r20
 4019704:	e009883a 	mov	r4,fp
 4019708:	d8c00215 	stw	r3,8(sp)
 401970c:	400cf180 	call	400cf18 <__udivsi3>
 4019710:	100b883a 	mov	r5,r2
 4019714:	9009883a 	mov	r4,r18
 4019718:	1021883a 	mov	r16,r2
 401971c:	400cfd40 	call	400cfd4 <__mulsi3>
 4019720:	a00b883a 	mov	r5,r20
 4019724:	e009883a 	mov	r4,fp
 4019728:	d8800415 	stw	r2,16(sp)
 401972c:	400cf7c0 	call	400cf7c <__umodsi3>
 4019730:	1004943a 	slli	r2,r2,16
 4019734:	da000417 	ldw	r8,16(sp)
 4019738:	bdffffcc 	andi	r23,r23,65535
 401973c:	b884b03a 	or	r2,r23,r2
 4019740:	d8c00217 	ldw	r3,8(sp)
 4019744:	1200062e 	bgeu	r2,r8,4019760 <__divdf3+0x424>
 4019748:	1585883a 	add	r2,r2,r22
 401974c:	813fffc4 	addi	r4,r16,-1
 4019750:	15810236 	bltu	r2,r22,4019b5c <__divdf3+0x820>
 4019754:	1201012e 	bgeu	r2,r8,4019b5c <__divdf3+0x820>
 4019758:	843fff84 	addi	r16,r16,-2
 401975c:	1585883a 	add	r2,r2,r22
 4019760:	8822943a 	slli	r17,r17,16
 4019764:	d9800017 	ldw	r6,0(sp)
 4019768:	1211c83a 	sub	r8,r2,r8
 401976c:	8c22b03a 	or	r17,r17,r16
 4019770:	373fffcc 	andi	fp,r6,65535
 4019774:	8abfffcc 	andi	r10,r17,65535
 4019778:	8820d43a 	srli	r16,r17,16
 401977c:	5009883a 	mov	r4,r10
 4019780:	e00b883a 	mov	r5,fp
 4019784:	302ed43a 	srli	r23,r6,16
 4019788:	d8c00215 	stw	r3,8(sp)
 401978c:	da000415 	stw	r8,16(sp)
 4019790:	da800115 	stw	r10,4(sp)
 4019794:	400cfd40 	call	400cfd4 <__mulsi3>
 4019798:	800b883a 	mov	r5,r16
 401979c:	e009883a 	mov	r4,fp
 40197a0:	d8800515 	stw	r2,20(sp)
 40197a4:	400cfd40 	call	400cfd4 <__mulsi3>
 40197a8:	8009883a 	mov	r4,r16
 40197ac:	b80b883a 	mov	r5,r23
 40197b0:	d8800315 	stw	r2,12(sp)
 40197b4:	400cfd40 	call	400cfd4 <__mulsi3>
 40197b8:	da800117 	ldw	r10,4(sp)
 40197bc:	b80b883a 	mov	r5,r23
 40197c0:	1021883a 	mov	r16,r2
 40197c4:	5009883a 	mov	r4,r10
 40197c8:	400cfd40 	call	400cfd4 <__mulsi3>
 40197cc:	d9c00517 	ldw	r7,20(sp)
 40197d0:	da400317 	ldw	r9,12(sp)
 40197d4:	d8c00217 	ldw	r3,8(sp)
 40197d8:	3808d43a 	srli	r4,r7,16
 40197dc:	1245883a 	add	r2,r2,r9
 40197e0:	da000417 	ldw	r8,16(sp)
 40197e4:	2085883a 	add	r2,r4,r2
 40197e8:	1240022e 	bgeu	r2,r9,40197f4 <__divdf3+0x4b8>
 40197ec:	01000074 	movhi	r4,1
 40197f0:	8121883a 	add	r16,r16,r4
 40197f4:	1008d43a 	srli	r4,r2,16
 40197f8:	1004943a 	slli	r2,r2,16
 40197fc:	39ffffcc 	andi	r7,r7,65535
 4019800:	2409883a 	add	r4,r4,r16
 4019804:	11c5883a 	add	r2,r2,r7
 4019808:	4100bb36 	bltu	r8,r4,4019af8 <__divdf3+0x7bc>
 401980c:	4100d726 	beq	r8,r4,4019b6c <__divdf3+0x830>
 4019810:	4109c83a 	sub	r4,r8,r4
 4019814:	a8a1c83a 	sub	r16,r21,r2
 4019818:	ac2b803a 	cmpltu	r21,r21,r16
 401981c:	256bc83a 	sub	r21,r4,r21
 4019820:	b540d926 	beq	r22,r21,4019b88 <__divdf3+0x84c>
 4019824:	a00b883a 	mov	r5,r20
 4019828:	a809883a 	mov	r4,r21
 401982c:	d8c00215 	stw	r3,8(sp)
 4019830:	400cf180 	call	400cf18 <__udivsi3>
 4019834:	100b883a 	mov	r5,r2
 4019838:	9009883a 	mov	r4,r18
 401983c:	d8800515 	stw	r2,20(sp)
 4019840:	400cfd40 	call	400cfd4 <__mulsi3>
 4019844:	a809883a 	mov	r4,r21
 4019848:	a00b883a 	mov	r5,r20
 401984c:	d8800415 	stw	r2,16(sp)
 4019850:	400cf7c0 	call	400cf7c <__umodsi3>
 4019854:	1004943a 	slli	r2,r2,16
 4019858:	8008d43a 	srli	r4,r16,16
 401985c:	da000417 	ldw	r8,16(sp)
 4019860:	d8c00217 	ldw	r3,8(sp)
 4019864:	2084b03a 	or	r2,r4,r2
 4019868:	d9c00517 	ldw	r7,20(sp)
 401986c:	1200062e 	bgeu	r2,r8,4019888 <__divdf3+0x54c>
 4019870:	1585883a 	add	r2,r2,r22
 4019874:	393fffc4 	addi	r4,r7,-1
 4019878:	1580c536 	bltu	r2,r22,4019b90 <__divdf3+0x854>
 401987c:	1200c42e 	bgeu	r2,r8,4019b90 <__divdf3+0x854>
 4019880:	39ffff84 	addi	r7,r7,-2
 4019884:	1585883a 	add	r2,r2,r22
 4019888:	122bc83a 	sub	r21,r2,r8
 401988c:	a00b883a 	mov	r5,r20
 4019890:	a809883a 	mov	r4,r21
 4019894:	d8c00215 	stw	r3,8(sp)
 4019898:	d9c00515 	stw	r7,20(sp)
 401989c:	400cf180 	call	400cf18 <__udivsi3>
 40198a0:	9009883a 	mov	r4,r18
 40198a4:	100b883a 	mov	r5,r2
 40198a8:	d8800415 	stw	r2,16(sp)
 40198ac:	400cfd40 	call	400cfd4 <__mulsi3>
 40198b0:	a809883a 	mov	r4,r21
 40198b4:	a00b883a 	mov	r5,r20
 40198b8:	1025883a 	mov	r18,r2
 40198bc:	400cf7c0 	call	400cf7c <__umodsi3>
 40198c0:	1004943a 	slli	r2,r2,16
 40198c4:	813fffcc 	andi	r4,r16,65535
 40198c8:	d8c00217 	ldw	r3,8(sp)
 40198cc:	20a0b03a 	or	r16,r4,r2
 40198d0:	d9c00517 	ldw	r7,20(sp)
 40198d4:	da000417 	ldw	r8,16(sp)
 40198d8:	8480062e 	bgeu	r16,r18,40198f4 <__divdf3+0x5b8>
 40198dc:	85a1883a 	add	r16,r16,r22
 40198e0:	40bfffc4 	addi	r2,r8,-1
 40198e4:	8580ac36 	bltu	r16,r22,4019b98 <__divdf3+0x85c>
 40198e8:	8480ab2e 	bgeu	r16,r18,4019b98 <__divdf3+0x85c>
 40198ec:	423fff84 	addi	r8,r8,-2
 40198f0:	85a1883a 	add	r16,r16,r22
 40198f4:	3804943a 	slli	r2,r7,16
 40198f8:	84a1c83a 	sub	r16,r16,r18
 40198fc:	e009883a 	mov	r4,fp
 4019900:	1228b03a 	or	r20,r2,r8
 4019904:	a1ffffcc 	andi	r7,r20,65535
 4019908:	a024d43a 	srli	r18,r20,16
 401990c:	380b883a 	mov	r5,r7
 4019910:	d8c00215 	stw	r3,8(sp)
 4019914:	d9c00515 	stw	r7,20(sp)
 4019918:	400cfd40 	call	400cfd4 <__mulsi3>
 401991c:	900b883a 	mov	r5,r18
 4019920:	e009883a 	mov	r4,fp
 4019924:	102b883a 	mov	r21,r2
 4019928:	400cfd40 	call	400cfd4 <__mulsi3>
 401992c:	900b883a 	mov	r5,r18
 4019930:	b809883a 	mov	r4,r23
 4019934:	1039883a 	mov	fp,r2
 4019938:	400cfd40 	call	400cfd4 <__mulsi3>
 401993c:	d9c00517 	ldw	r7,20(sp)
 4019940:	b80b883a 	mov	r5,r23
 4019944:	1025883a 	mov	r18,r2
 4019948:	3809883a 	mov	r4,r7
 401994c:	400cfd40 	call	400cfd4 <__mulsi3>
 4019950:	a808d43a 	srli	r4,r21,16
 4019954:	1705883a 	add	r2,r2,fp
 4019958:	d8c00217 	ldw	r3,8(sp)
 401995c:	2085883a 	add	r2,r4,r2
 4019960:	1700022e 	bgeu	r2,fp,401996c <__divdf3+0x630>
 4019964:	01000074 	movhi	r4,1
 4019968:	9125883a 	add	r18,r18,r4
 401996c:	1008d43a 	srli	r4,r2,16
 4019970:	1004943a 	slli	r2,r2,16
 4019974:	ad7fffcc 	andi	r21,r21,65535
 4019978:	2489883a 	add	r4,r4,r18
 401997c:	1545883a 	add	r2,r2,r21
 4019980:	81003836 	bltu	r16,r4,4019a64 <__divdf3+0x728>
 4019984:	81003626 	beq	r16,r4,4019a60 <__divdf3+0x724>
 4019988:	a5000054 	ori	r20,r20,1
 401998c:	1880ffc4 	addi	r2,r3,1023
 4019990:	00bf2e0e 	bge	zero,r2,401964c <__alt_mem_onchip_memory2_0+0xfc0183cc>
 4019994:	a10001cc 	andi	r4,r20,7
 4019998:	20000726 	beq	r4,zero,40199b8 <__divdf3+0x67c>
 401999c:	a10003cc 	andi	r4,r20,15
 40199a0:	01400104 	movi	r5,4
 40199a4:	21400426 	beq	r4,r5,40199b8 <__divdf3+0x67c>
 40199a8:	a149883a 	add	r4,r20,r5
 40199ac:	2529803a 	cmpltu	r20,r4,r20
 40199b0:	8d23883a 	add	r17,r17,r20
 40199b4:	2029883a 	mov	r20,r4
 40199b8:	8900402c 	andhi	r4,r17,256
 40199bc:	20000426 	beq	r4,zero,40199d0 <__divdf3+0x694>
 40199c0:	18810004 	addi	r2,r3,1024
 40199c4:	00ffc034 	movhi	r3,65280
 40199c8:	18ffffc4 	addi	r3,r3,-1
 40199cc:	88e2703a 	and	r17,r17,r3
 40199d0:	00c1ff84 	movi	r3,2046
 40199d4:	18beb416 	blt	r3,r2,40194a8 <__alt_mem_onchip_memory2_0+0xfc018228>
 40199d8:	a028d0fa 	srli	r20,r20,3
 40199dc:	882a977a 	slli	r21,r17,29
 40199e0:	8820927a 	slli	r16,r17,9
 40199e4:	1081ffcc 	andi	r2,r2,2047
 40199e8:	ad2ab03a 	or	r21,r21,r20
 40199ec:	8020d33a 	srli	r16,r16,12
 40199f0:	9900004c 	andi	r4,r19,1
 40199f4:	003eb006 	br	40194b8 <__alt_mem_onchip_memory2_0+0xfc018238>
 40199f8:	8080022c 	andhi	r2,r16,8
 40199fc:	10001226 	beq	r2,zero,4019a48 <__divdf3+0x70c>
 4019a00:	8880022c 	andhi	r2,r17,8
 4019a04:	1000101e 	bne	r2,zero,4019a48 <__divdf3+0x70c>
 4019a08:	00800434 	movhi	r2,16
 4019a0c:	8c000234 	orhi	r16,r17,8
 4019a10:	10bfffc4 	addi	r2,r2,-1
 4019a14:	b809883a 	mov	r4,r23
 4019a18:	80a0703a 	and	r16,r16,r2
 4019a1c:	a02b883a 	mov	r21,r20
 4019a20:	003f0806 	br	4019644 <__alt_mem_onchip_memory2_0+0xfc0183c4>
 4019a24:	008000c4 	movi	r2,3
 4019a28:	3880b126 	beq	r7,r2,4019cf0 <__divdf3+0x9b4>
 4019a2c:	00800044 	movi	r2,1
 4019a30:	38805b1e 	bne	r7,r2,4019ba0 <__divdf3+0x864>
 4019a34:	e009883a 	mov	r4,fp
 4019a38:	0005883a 	mov	r2,zero
 4019a3c:	0021883a 	mov	r16,zero
 4019a40:	002b883a 	mov	r21,zero
 4019a44:	003e9c06 	br	40194b8 <__alt_mem_onchip_memory2_0+0xfc018238>
 4019a48:	00800434 	movhi	r2,16
 4019a4c:	84000234 	orhi	r16,r16,8
 4019a50:	10bfffc4 	addi	r2,r2,-1
 4019a54:	b009883a 	mov	r4,r22
 4019a58:	80a0703a 	and	r16,r16,r2
 4019a5c:	003ef906 	br	4019644 <__alt_mem_onchip_memory2_0+0xfc0183c4>
 4019a60:	103fca26 	beq	r2,zero,401998c <__alt_mem_onchip_memory2_0+0xfc01870c>
 4019a64:	b421883a 	add	r16,r22,r16
 4019a68:	a17fffc4 	addi	r5,r20,-1
 4019a6c:	8580422e 	bgeu	r16,r22,4019b78 <__divdf3+0x83c>
 4019a70:	2829883a 	mov	r20,r5
 4019a74:	813fc41e 	bne	r16,r4,4019988 <__alt_mem_onchip_memory2_0+0xfc018708>
 4019a78:	d9800017 	ldw	r6,0(sp)
 4019a7c:	30bfc21e 	bne	r6,r2,4019988 <__alt_mem_onchip_memory2_0+0xfc018708>
 4019a80:	003fc206 	br	401998c <__alt_mem_onchip_memory2_0+0xfc01870c>
 4019a84:	143ff604 	addi	r16,r2,-40
 4019a88:	8c20983a 	sll	r16,r17,r16
 4019a8c:	002b883a 	mov	r21,zero
 4019a90:	003eb406 	br	4019564 <__alt_mem_onchip_memory2_0+0xfc0182e4>
 4019a94:	d9800215 	stw	r6,8(sp)
 4019a98:	d9c00515 	stw	r7,20(sp)
 4019a9c:	da000415 	stw	r8,16(sp)
 4019aa0:	400e04c0 	call	400e04c <__clzsi2>
 4019aa4:	10800804 	addi	r2,r2,32
 4019aa8:	da000417 	ldw	r8,16(sp)
 4019aac:	d9c00517 	ldw	r7,20(sp)
 4019ab0:	d9800217 	ldw	r6,8(sp)
 4019ab4:	003ea106 	br	401953c <__alt_mem_onchip_memory2_0+0xfc0182bc>
 4019ab8:	147ff604 	addi	r17,r2,-40
 4019abc:	3462983a 	sll	r17,r6,r17
 4019ac0:	0029883a 	mov	r20,zero
 4019ac4:	003ec906 	br	40195ec <__alt_mem_onchip_memory2_0+0xfc01836c>
 4019ac8:	3009883a 	mov	r4,r6
 4019acc:	d9400115 	stw	r5,4(sp)
 4019ad0:	d9800215 	stw	r6,8(sp)
 4019ad4:	da000415 	stw	r8,16(sp)
 4019ad8:	da400315 	stw	r9,12(sp)
 4019adc:	400e04c0 	call	400e04c <__clzsi2>
 4019ae0:	10800804 	addi	r2,r2,32
 4019ae4:	da400317 	ldw	r9,12(sp)
 4019ae8:	da000417 	ldw	r8,16(sp)
 4019aec:	d9800217 	ldw	r6,8(sp)
 4019af0:	d9400117 	ldw	r5,4(sp)
 4019af4:	003eb306 	br	40195c4 <__alt_mem_onchip_memory2_0+0xfc018344>
 4019af8:	d9800017 	ldw	r6,0(sp)
 4019afc:	a9ab883a 	add	r21,r21,r6
 4019b00:	a98b803a 	cmpltu	r5,r21,r6
 4019b04:	2d8b883a 	add	r5,r5,r22
 4019b08:	2a11883a 	add	r8,r5,r8
 4019b0c:	897fffc4 	addi	r5,r17,-1
 4019b10:	b2000c2e 	bgeu	r22,r8,4019b44 <__divdf3+0x808>
 4019b14:	41003f36 	bltu	r8,r4,4019c14 <__divdf3+0x8d8>
 4019b18:	22006c26 	beq	r4,r8,4019ccc <__divdf3+0x990>
 4019b1c:	4109c83a 	sub	r4,r8,r4
 4019b20:	2823883a 	mov	r17,r5
 4019b24:	003f3b06 	br	4019814 <__alt_mem_onchip_memory2_0+0xfc018594>
 4019b28:	ad3ed336 	bltu	r21,r20,4019678 <__alt_mem_onchip_memory2_0+0xfc0183f8>
 4019b2c:	a804d07a 	srli	r2,r21,1
 4019b30:	802e97fa 	slli	r23,r16,31
 4019b34:	a82a97fa 	slli	r21,r21,31
 4019b38:	8020d07a 	srli	r16,r16,1
 4019b3c:	b8aeb03a 	or	r23,r23,r2
 4019b40:	003ed006 	br	4019684 <__alt_mem_onchip_memory2_0+0xfc018404>
 4019b44:	b23ff51e 	bne	r22,r8,4019b1c <__alt_mem_onchip_memory2_0+0xfc01889c>
 4019b48:	d9800017 	ldw	r6,0(sp)
 4019b4c:	a9bff12e 	bgeu	r21,r6,4019b14 <__alt_mem_onchip_memory2_0+0xfc018894>
 4019b50:	b109c83a 	sub	r4,r22,r4
 4019b54:	2823883a 	mov	r17,r5
 4019b58:	003f2e06 	br	4019814 <__alt_mem_onchip_memory2_0+0xfc018594>
 4019b5c:	2021883a 	mov	r16,r4
 4019b60:	003eff06 	br	4019760 <__alt_mem_onchip_memory2_0+0xfc0184e0>
 4019b64:	2023883a 	mov	r17,r4
 4019b68:	003ee406 	br	40196fc <__alt_mem_onchip_memory2_0+0xfc01847c>
 4019b6c:	a8bfe236 	bltu	r21,r2,4019af8 <__alt_mem_onchip_memory2_0+0xfc018878>
 4019b70:	0009883a 	mov	r4,zero
 4019b74:	003f2706 	br	4019814 <__alt_mem_onchip_memory2_0+0xfc018594>
 4019b78:	81002d36 	bltu	r16,r4,4019c30 <__divdf3+0x8f4>
 4019b7c:	24005626 	beq	r4,r16,4019cd8 <__divdf3+0x99c>
 4019b80:	2829883a 	mov	r20,r5
 4019b84:	003f8006 	br	4019988 <__alt_mem_onchip_memory2_0+0xfc018708>
 4019b88:	053fffc4 	movi	r20,-1
 4019b8c:	003f7f06 	br	401998c <__alt_mem_onchip_memory2_0+0xfc01870c>
 4019b90:	200f883a 	mov	r7,r4
 4019b94:	003f3c06 	br	4019888 <__alt_mem_onchip_memory2_0+0xfc018608>
 4019b98:	1011883a 	mov	r8,r2
 4019b9c:	003f5506 	br	40198f4 <__alt_mem_onchip_memory2_0+0xfc018674>
 4019ba0:	e027883a 	mov	r19,fp
 4019ba4:	003f7906 	br	401998c <__alt_mem_onchip_memory2_0+0xfc01870c>
 4019ba8:	010007c4 	movi	r4,31
 4019bac:	20c02816 	blt	r4,r3,4019c50 <__divdf3+0x914>
 4019bb0:	00800804 	movi	r2,32
 4019bb4:	10c5c83a 	sub	r2,r2,r3
 4019bb8:	888a983a 	sll	r5,r17,r2
 4019bbc:	a0c8d83a 	srl	r4,r20,r3
 4019bc0:	a084983a 	sll	r2,r20,r2
 4019bc4:	88e2d83a 	srl	r17,r17,r3
 4019bc8:	2906b03a 	or	r3,r5,r4
 4019bcc:	1004c03a 	cmpne	r2,r2,zero
 4019bd0:	1886b03a 	or	r3,r3,r2
 4019bd4:	188001cc 	andi	r2,r3,7
 4019bd8:	10000726 	beq	r2,zero,4019bf8 <__divdf3+0x8bc>
 4019bdc:	188003cc 	andi	r2,r3,15
 4019be0:	01000104 	movi	r4,4
 4019be4:	11000426 	beq	r2,r4,4019bf8 <__divdf3+0x8bc>
 4019be8:	1805883a 	mov	r2,r3
 4019bec:	10c00104 	addi	r3,r2,4
 4019bf0:	1885803a 	cmpltu	r2,r3,r2
 4019bf4:	88a3883a 	add	r17,r17,r2
 4019bf8:	8880202c 	andhi	r2,r17,128
 4019bfc:	10002926 	beq	r2,zero,4019ca4 <__divdf3+0x968>
 4019c00:	9900004c 	andi	r4,r19,1
 4019c04:	00800044 	movi	r2,1
 4019c08:	0021883a 	mov	r16,zero
 4019c0c:	002b883a 	mov	r21,zero
 4019c10:	003e2906 	br	40194b8 <__alt_mem_onchip_memory2_0+0xfc018238>
 4019c14:	d9800017 	ldw	r6,0(sp)
 4019c18:	8c7fff84 	addi	r17,r17,-2
 4019c1c:	a9ab883a 	add	r21,r21,r6
 4019c20:	a98b803a 	cmpltu	r5,r21,r6
 4019c24:	2d8b883a 	add	r5,r5,r22
 4019c28:	2a11883a 	add	r8,r5,r8
 4019c2c:	003ef806 	br	4019810 <__alt_mem_onchip_memory2_0+0xfc018590>
 4019c30:	d9800017 	ldw	r6,0(sp)
 4019c34:	318f883a 	add	r7,r6,r6
 4019c38:	398b803a 	cmpltu	r5,r7,r6
 4019c3c:	2d8d883a 	add	r6,r5,r22
 4019c40:	81a1883a 	add	r16,r16,r6
 4019c44:	a17fff84 	addi	r5,r20,-2
 4019c48:	d9c00015 	stw	r7,0(sp)
 4019c4c:	003f8806 	br	4019a70 <__alt_mem_onchip_memory2_0+0xfc0187f0>
 4019c50:	013ff844 	movi	r4,-31
 4019c54:	2085c83a 	sub	r2,r4,r2
 4019c58:	8888d83a 	srl	r4,r17,r2
 4019c5c:	00800804 	movi	r2,32
 4019c60:	18802126 	beq	r3,r2,4019ce8 <__divdf3+0x9ac>
 4019c64:	04001004 	movi	r16,64
 4019c68:	80c7c83a 	sub	r3,r16,r3
 4019c6c:	88e0983a 	sll	r16,r17,r3
 4019c70:	8504b03a 	or	r2,r16,r20
 4019c74:	1004c03a 	cmpne	r2,r2,zero
 4019c78:	2084b03a 	or	r2,r4,r2
 4019c7c:	144001cc 	andi	r17,r2,7
 4019c80:	88000d1e 	bne	r17,zero,4019cb8 <__divdf3+0x97c>
 4019c84:	0021883a 	mov	r16,zero
 4019c88:	102ad0fa 	srli	r21,r2,3
 4019c8c:	9900004c 	andi	r4,r19,1
 4019c90:	0005883a 	mov	r2,zero
 4019c94:	ac6ab03a 	or	r21,r21,r17
 4019c98:	003e0706 	br	40194b8 <__alt_mem_onchip_memory2_0+0xfc018238>
 4019c9c:	1007883a 	mov	r3,r2
 4019ca0:	0023883a 	mov	r17,zero
 4019ca4:	8820927a 	slli	r16,r17,9
 4019ca8:	1805883a 	mov	r2,r3
 4019cac:	8822977a 	slli	r17,r17,29
 4019cb0:	8020d33a 	srli	r16,r16,12
 4019cb4:	003ff406 	br	4019c88 <__alt_mem_onchip_memory2_0+0xfc018a08>
 4019cb8:	10c003cc 	andi	r3,r2,15
 4019cbc:	01000104 	movi	r4,4
 4019cc0:	193ff626 	beq	r3,r4,4019c9c <__alt_mem_onchip_memory2_0+0xfc018a1c>
 4019cc4:	0023883a 	mov	r17,zero
 4019cc8:	003fc806 	br	4019bec <__alt_mem_onchip_memory2_0+0xfc01896c>
 4019ccc:	a8bfd136 	bltu	r21,r2,4019c14 <__alt_mem_onchip_memory2_0+0xfc018994>
 4019cd0:	2823883a 	mov	r17,r5
 4019cd4:	003fa606 	br	4019b70 <__alt_mem_onchip_memory2_0+0xfc0188f0>
 4019cd8:	d9800017 	ldw	r6,0(sp)
 4019cdc:	30bfd436 	bltu	r6,r2,4019c30 <__alt_mem_onchip_memory2_0+0xfc0189b0>
 4019ce0:	2829883a 	mov	r20,r5
 4019ce4:	003f6406 	br	4019a78 <__alt_mem_onchip_memory2_0+0xfc0187f8>
 4019ce8:	0021883a 	mov	r16,zero
 4019cec:	003fe006 	br	4019c70 <__alt_mem_onchip_memory2_0+0xfc0189f0>
 4019cf0:	00800434 	movhi	r2,16
 4019cf4:	8c000234 	orhi	r16,r17,8
 4019cf8:	10bfffc4 	addi	r2,r2,-1
 4019cfc:	e009883a 	mov	r4,fp
 4019d00:	80a0703a 	and	r16,r16,r2
 4019d04:	a02b883a 	mov	r21,r20
 4019d08:	003e4e06 	br	4019644 <__alt_mem_onchip_memory2_0+0xfc0183c4>

04019d0c <__eqdf2>:
 4019d0c:	2804d53a 	srli	r2,r5,20
 4019d10:	3806d53a 	srli	r3,r7,20
 4019d14:	02000434 	movhi	r8,16
 4019d18:	423fffc4 	addi	r8,r8,-1
 4019d1c:	1081ffcc 	andi	r2,r2,2047
 4019d20:	0281ffc4 	movi	r10,2047
 4019d24:	2a12703a 	and	r9,r5,r8
 4019d28:	18c1ffcc 	andi	r3,r3,2047
 4019d2c:	3a10703a 	and	r8,r7,r8
 4019d30:	280ad7fa 	srli	r5,r5,31
 4019d34:	380ed7fa 	srli	r7,r7,31
 4019d38:	12801026 	beq	r2,r10,4019d7c <__eqdf2+0x70>
 4019d3c:	0281ffc4 	movi	r10,2047
 4019d40:	1a800a26 	beq	r3,r10,4019d6c <__eqdf2+0x60>
 4019d44:	10c00226 	beq	r2,r3,4019d50 <__eqdf2+0x44>
 4019d48:	00800044 	movi	r2,1
 4019d4c:	f800283a 	ret
 4019d50:	4a3ffd1e 	bne	r9,r8,4019d48 <__alt_mem_onchip_memory2_0+0xfc018ac8>
 4019d54:	21bffc1e 	bne	r4,r6,4019d48 <__alt_mem_onchip_memory2_0+0xfc018ac8>
 4019d58:	29c00c26 	beq	r5,r7,4019d8c <__eqdf2+0x80>
 4019d5c:	103ffa1e 	bne	r2,zero,4019d48 <__alt_mem_onchip_memory2_0+0xfc018ac8>
 4019d60:	2244b03a 	or	r2,r4,r9
 4019d64:	1004c03a 	cmpne	r2,r2,zero
 4019d68:	f800283a 	ret
 4019d6c:	3214b03a 	or	r10,r6,r8
 4019d70:	503ff426 	beq	r10,zero,4019d44 <__alt_mem_onchip_memory2_0+0xfc018ac4>
 4019d74:	00800044 	movi	r2,1
 4019d78:	f800283a 	ret
 4019d7c:	2254b03a 	or	r10,r4,r9
 4019d80:	503fee26 	beq	r10,zero,4019d3c <__alt_mem_onchip_memory2_0+0xfc018abc>
 4019d84:	00800044 	movi	r2,1
 4019d88:	f800283a 	ret
 4019d8c:	0005883a 	mov	r2,zero
 4019d90:	f800283a 	ret

04019d94 <__gedf2>:
 4019d94:	2804d53a 	srli	r2,r5,20
 4019d98:	3806d53a 	srli	r3,r7,20
 4019d9c:	02000434 	movhi	r8,16
 4019da0:	423fffc4 	addi	r8,r8,-1
 4019da4:	1081ffcc 	andi	r2,r2,2047
 4019da8:	0241ffc4 	movi	r9,2047
 4019dac:	2a14703a 	and	r10,r5,r8
 4019db0:	18c1ffcc 	andi	r3,r3,2047
 4019db4:	3a10703a 	and	r8,r7,r8
 4019db8:	280ad7fa 	srli	r5,r5,31
 4019dbc:	380ed7fa 	srli	r7,r7,31
 4019dc0:	12401d26 	beq	r2,r9,4019e38 <__gedf2+0xa4>
 4019dc4:	0241ffc4 	movi	r9,2047
 4019dc8:	1a401226 	beq	r3,r9,4019e14 <__gedf2+0x80>
 4019dcc:	1000081e 	bne	r2,zero,4019df0 <__gedf2+0x5c>
 4019dd0:	2296b03a 	or	r11,r4,r10
 4019dd4:	5813003a 	cmpeq	r9,r11,zero
 4019dd8:	1800091e 	bne	r3,zero,4019e00 <__gedf2+0x6c>
 4019ddc:	3218b03a 	or	r12,r6,r8
 4019de0:	6000071e 	bne	r12,zero,4019e00 <__gedf2+0x6c>
 4019de4:	0005883a 	mov	r2,zero
 4019de8:	5800101e 	bne	r11,zero,4019e2c <__gedf2+0x98>
 4019dec:	f800283a 	ret
 4019df0:	18000c1e 	bne	r3,zero,4019e24 <__gedf2+0x90>
 4019df4:	3212b03a 	or	r9,r6,r8
 4019df8:	48000c26 	beq	r9,zero,4019e2c <__gedf2+0x98>
 4019dfc:	0013883a 	mov	r9,zero
 4019e00:	39c03fcc 	andi	r7,r7,255
 4019e04:	48000826 	beq	r9,zero,4019e28 <__gedf2+0x94>
 4019e08:	38000926 	beq	r7,zero,4019e30 <__gedf2+0x9c>
 4019e0c:	00800044 	movi	r2,1
 4019e10:	f800283a 	ret
 4019e14:	3212b03a 	or	r9,r6,r8
 4019e18:	483fec26 	beq	r9,zero,4019dcc <__alt_mem_onchip_memory2_0+0xfc018b4c>
 4019e1c:	00bfff84 	movi	r2,-2
 4019e20:	f800283a 	ret
 4019e24:	39c03fcc 	andi	r7,r7,255
 4019e28:	29c00626 	beq	r5,r7,4019e44 <__gedf2+0xb0>
 4019e2c:	283ff726 	beq	r5,zero,4019e0c <__alt_mem_onchip_memory2_0+0xfc018b8c>
 4019e30:	00bfffc4 	movi	r2,-1
 4019e34:	f800283a 	ret
 4019e38:	2292b03a 	or	r9,r4,r10
 4019e3c:	483fe126 	beq	r9,zero,4019dc4 <__alt_mem_onchip_memory2_0+0xfc018b44>
 4019e40:	003ff606 	br	4019e1c <__alt_mem_onchip_memory2_0+0xfc018b9c>
 4019e44:	18bff916 	blt	r3,r2,4019e2c <__alt_mem_onchip_memory2_0+0xfc018bac>
 4019e48:	10c00316 	blt	r2,r3,4019e58 <__gedf2+0xc4>
 4019e4c:	42bff736 	bltu	r8,r10,4019e2c <__alt_mem_onchip_memory2_0+0xfc018bac>
 4019e50:	52000326 	beq	r10,r8,4019e60 <__gedf2+0xcc>
 4019e54:	5200042e 	bgeu	r10,r8,4019e68 <__gedf2+0xd4>
 4019e58:	283fec1e 	bne	r5,zero,4019e0c <__alt_mem_onchip_memory2_0+0xfc018b8c>
 4019e5c:	003ff406 	br	4019e30 <__alt_mem_onchip_memory2_0+0xfc018bb0>
 4019e60:	313ff236 	bltu	r6,r4,4019e2c <__alt_mem_onchip_memory2_0+0xfc018bac>
 4019e64:	21bffc36 	bltu	r4,r6,4019e58 <__alt_mem_onchip_memory2_0+0xfc018bd8>
 4019e68:	0005883a 	mov	r2,zero
 4019e6c:	f800283a 	ret

04019e70 <__ledf2>:
 4019e70:	2804d53a 	srli	r2,r5,20
 4019e74:	3810d53a 	srli	r8,r7,20
 4019e78:	00c00434 	movhi	r3,16
 4019e7c:	18ffffc4 	addi	r3,r3,-1
 4019e80:	1081ffcc 	andi	r2,r2,2047
 4019e84:	0241ffc4 	movi	r9,2047
 4019e88:	28d4703a 	and	r10,r5,r3
 4019e8c:	4201ffcc 	andi	r8,r8,2047
 4019e90:	38c6703a 	and	r3,r7,r3
 4019e94:	280ad7fa 	srli	r5,r5,31
 4019e98:	380ed7fa 	srli	r7,r7,31
 4019e9c:	12401f26 	beq	r2,r9,4019f1c <__ledf2+0xac>
 4019ea0:	0241ffc4 	movi	r9,2047
 4019ea4:	42401426 	beq	r8,r9,4019ef8 <__ledf2+0x88>
 4019ea8:	1000091e 	bne	r2,zero,4019ed0 <__ledf2+0x60>
 4019eac:	2296b03a 	or	r11,r4,r10
 4019eb0:	5813003a 	cmpeq	r9,r11,zero
 4019eb4:	29403fcc 	andi	r5,r5,255
 4019eb8:	40000a1e 	bne	r8,zero,4019ee4 <__ledf2+0x74>
 4019ebc:	30d8b03a 	or	r12,r6,r3
 4019ec0:	6000081e 	bne	r12,zero,4019ee4 <__ledf2+0x74>
 4019ec4:	0005883a 	mov	r2,zero
 4019ec8:	5800111e 	bne	r11,zero,4019f10 <__ledf2+0xa0>
 4019ecc:	f800283a 	ret
 4019ed0:	29403fcc 	andi	r5,r5,255
 4019ed4:	40000c1e 	bne	r8,zero,4019f08 <__ledf2+0x98>
 4019ed8:	30d2b03a 	or	r9,r6,r3
 4019edc:	48000c26 	beq	r9,zero,4019f10 <__ledf2+0xa0>
 4019ee0:	0013883a 	mov	r9,zero
 4019ee4:	39c03fcc 	andi	r7,r7,255
 4019ee8:	48000826 	beq	r9,zero,4019f0c <__ledf2+0x9c>
 4019eec:	38001126 	beq	r7,zero,4019f34 <__ledf2+0xc4>
 4019ef0:	00800044 	movi	r2,1
 4019ef4:	f800283a 	ret
 4019ef8:	30d2b03a 	or	r9,r6,r3
 4019efc:	483fea26 	beq	r9,zero,4019ea8 <__alt_mem_onchip_memory2_0+0xfc018c28>
 4019f00:	00800084 	movi	r2,2
 4019f04:	f800283a 	ret
 4019f08:	39c03fcc 	andi	r7,r7,255
 4019f0c:	39400726 	beq	r7,r5,4019f2c <__ledf2+0xbc>
 4019f10:	2800081e 	bne	r5,zero,4019f34 <__ledf2+0xc4>
 4019f14:	00800044 	movi	r2,1
 4019f18:	f800283a 	ret
 4019f1c:	2292b03a 	or	r9,r4,r10
 4019f20:	483fdf26 	beq	r9,zero,4019ea0 <__alt_mem_onchip_memory2_0+0xfc018c20>
 4019f24:	00800084 	movi	r2,2
 4019f28:	f800283a 	ret
 4019f2c:	4080030e 	bge	r8,r2,4019f3c <__ledf2+0xcc>
 4019f30:	383fef26 	beq	r7,zero,4019ef0 <__alt_mem_onchip_memory2_0+0xfc018c70>
 4019f34:	00bfffc4 	movi	r2,-1
 4019f38:	f800283a 	ret
 4019f3c:	123feb16 	blt	r2,r8,4019eec <__alt_mem_onchip_memory2_0+0xfc018c6c>
 4019f40:	1abff336 	bltu	r3,r10,4019f10 <__alt_mem_onchip_memory2_0+0xfc018c90>
 4019f44:	50c00326 	beq	r10,r3,4019f54 <__ledf2+0xe4>
 4019f48:	50c0042e 	bgeu	r10,r3,4019f5c <__ledf2+0xec>
 4019f4c:	283fe81e 	bne	r5,zero,4019ef0 <__alt_mem_onchip_memory2_0+0xfc018c70>
 4019f50:	003ff806 	br	4019f34 <__alt_mem_onchip_memory2_0+0xfc018cb4>
 4019f54:	313fee36 	bltu	r6,r4,4019f10 <__alt_mem_onchip_memory2_0+0xfc018c90>
 4019f58:	21bffc36 	bltu	r4,r6,4019f4c <__alt_mem_onchip_memory2_0+0xfc018ccc>
 4019f5c:	0005883a 	mov	r2,zero
 4019f60:	f800283a 	ret

04019f64 <__muldf3>:
 4019f64:	deffee04 	addi	sp,sp,-72
 4019f68:	dd000c15 	stw	r20,48(sp)
 4019f6c:	2828d53a 	srli	r20,r5,20
 4019f70:	ddc00f15 	stw	r23,60(sp)
 4019f74:	282ed7fa 	srli	r23,r5,31
 4019f78:	dc000815 	stw	r16,32(sp)
 4019f7c:	04000434 	movhi	r16,16
 4019f80:	dcc00b15 	stw	r19,44(sp)
 4019f84:	843fffc4 	addi	r16,r16,-1
 4019f88:	dfc01115 	stw	ra,68(sp)
 4019f8c:	df001015 	stw	fp,64(sp)
 4019f90:	dd800e15 	stw	r22,56(sp)
 4019f94:	dd400d15 	stw	r21,52(sp)
 4019f98:	dc800a15 	stw	r18,40(sp)
 4019f9c:	dc400915 	stw	r17,36(sp)
 4019fa0:	a501ffcc 	andi	r20,r20,2047
 4019fa4:	2c20703a 	and	r16,r5,r16
 4019fa8:	b827883a 	mov	r19,r23
 4019fac:	ba403fcc 	andi	r9,r23,255
 4019fb0:	a0006026 	beq	r20,zero,401a134 <__muldf3+0x1d0>
 4019fb4:	0081ffc4 	movi	r2,2047
 4019fb8:	202d883a 	mov	r22,r4
 4019fbc:	a0803626 	beq	r20,r2,401a098 <__muldf3+0x134>
 4019fc0:	84000434 	orhi	r16,r16,16
 4019fc4:	200ad77a 	srli	r5,r4,29
 4019fc8:	800490fa 	slli	r2,r16,3
 4019fcc:	202c90fa 	slli	r22,r4,3
 4019fd0:	a53f0044 	addi	r20,r20,-1023
 4019fd4:	28a0b03a 	or	r16,r5,r2
 4019fd8:	002b883a 	mov	r21,zero
 4019fdc:	000b883a 	mov	r5,zero
 4019fe0:	3804d53a 	srli	r2,r7,20
 4019fe4:	3838d7fa 	srli	fp,r7,31
 4019fe8:	04400434 	movhi	r17,16
 4019fec:	8c7fffc4 	addi	r17,r17,-1
 4019ff0:	1081ffcc 	andi	r2,r2,2047
 4019ff4:	3025883a 	mov	r18,r6
 4019ff8:	3c62703a 	and	r17,r7,r17
 4019ffc:	e2803fcc 	andi	r10,fp,255
 401a000:	10006d26 	beq	r2,zero,401a1b8 <__muldf3+0x254>
 401a004:	00c1ffc4 	movi	r3,2047
 401a008:	10c06526 	beq	r2,r3,401a1a0 <__muldf3+0x23c>
 401a00c:	8c400434 	orhi	r17,r17,16
 401a010:	300ed77a 	srli	r7,r6,29
 401a014:	880690fa 	slli	r3,r17,3
 401a018:	302490fa 	slli	r18,r6,3
 401a01c:	10bf0044 	addi	r2,r2,-1023
 401a020:	38e2b03a 	or	r17,r7,r3
 401a024:	000f883a 	mov	r7,zero
 401a028:	a087883a 	add	r3,r20,r2
 401a02c:	010003c4 	movi	r4,15
 401a030:	3d44b03a 	or	r2,r7,r21
 401a034:	e5ccf03a 	xor	r6,fp,r23
 401a038:	1a000044 	addi	r8,r3,1
 401a03c:	20809b36 	bltu	r4,r2,401a2ac <__muldf3+0x348>
 401a040:	100490ba 	slli	r2,r2,2
 401a044:	010100b4 	movhi	r4,1026
 401a048:	21281604 	addi	r4,r4,-24488
 401a04c:	1105883a 	add	r2,r2,r4
 401a050:	10800017 	ldw	r2,0(r2)
 401a054:	1000683a 	jmp	r2
 401a058:	0401a2ac 	andhi	r16,zero,1674
 401a05c:	0401a0b8 	rdprs	r16,zero,1666
 401a060:	0401a0b8 	rdprs	r16,zero,1666
 401a064:	0401a0b4 	movhi	r16,1666
 401a068:	0401a288 	cmpgei	r16,zero,1674
 401a06c:	0401a288 	cmpgei	r16,zero,1674
 401a070:	0401a270 	cmpltui	r16,zero,1673
 401a074:	0401a0b4 	movhi	r16,1666
 401a078:	0401a288 	cmpgei	r16,zero,1674
 401a07c:	0401a270 	cmpltui	r16,zero,1673
 401a080:	0401a288 	cmpgei	r16,zero,1674
 401a084:	0401a0b4 	movhi	r16,1666
 401a088:	0401a298 	cmpnei	r16,zero,1674
 401a08c:	0401a298 	cmpnei	r16,zero,1674
 401a090:	0401a298 	cmpnei	r16,zero,1674
 401a094:	0401a5f8 	rdprs	r16,zero,1687
 401a098:	2404b03a 	or	r2,r4,r16
 401a09c:	1000711e 	bne	r2,zero,401a264 <__muldf3+0x300>
 401a0a0:	05400204 	movi	r21,8
 401a0a4:	0021883a 	mov	r16,zero
 401a0a8:	002d883a 	mov	r22,zero
 401a0ac:	01400084 	movi	r5,2
 401a0b0:	003fcb06 	br	4019fe0 <__alt_mem_onchip_memory2_0+0xfc018d60>
 401a0b4:	500d883a 	mov	r6,r10
 401a0b8:	00800084 	movi	r2,2
 401a0bc:	38805926 	beq	r7,r2,401a224 <__muldf3+0x2c0>
 401a0c0:	008000c4 	movi	r2,3
 401a0c4:	3881bb26 	beq	r7,r2,401a7b4 <__muldf3+0x850>
 401a0c8:	00800044 	movi	r2,1
 401a0cc:	3881961e 	bne	r7,r2,401a728 <__muldf3+0x7c4>
 401a0d0:	3027883a 	mov	r19,r6
 401a0d4:	0005883a 	mov	r2,zero
 401a0d8:	0021883a 	mov	r16,zero
 401a0dc:	002d883a 	mov	r22,zero
 401a0e0:	1004953a 	slli	r2,r2,20
 401a0e4:	98c03fcc 	andi	r3,r19,255
 401a0e8:	04400434 	movhi	r17,16
 401a0ec:	8c7fffc4 	addi	r17,r17,-1
 401a0f0:	180697fa 	slli	r3,r3,31
 401a0f4:	8460703a 	and	r16,r16,r17
 401a0f8:	80a0b03a 	or	r16,r16,r2
 401a0fc:	80c6b03a 	or	r3,r16,r3
 401a100:	b005883a 	mov	r2,r22
 401a104:	dfc01117 	ldw	ra,68(sp)
 401a108:	df001017 	ldw	fp,64(sp)
 401a10c:	ddc00f17 	ldw	r23,60(sp)
 401a110:	dd800e17 	ldw	r22,56(sp)
 401a114:	dd400d17 	ldw	r21,52(sp)
 401a118:	dd000c17 	ldw	r20,48(sp)
 401a11c:	dcc00b17 	ldw	r19,44(sp)
 401a120:	dc800a17 	ldw	r18,40(sp)
 401a124:	dc400917 	ldw	r17,36(sp)
 401a128:	dc000817 	ldw	r16,32(sp)
 401a12c:	dec01204 	addi	sp,sp,72
 401a130:	f800283a 	ret
 401a134:	2404b03a 	or	r2,r4,r16
 401a138:	202b883a 	mov	r21,r4
 401a13c:	10004426 	beq	r2,zero,401a250 <__muldf3+0x2ec>
 401a140:	80015126 	beq	r16,zero,401a688 <__muldf3+0x724>
 401a144:	8009883a 	mov	r4,r16
 401a148:	d9800715 	stw	r6,28(sp)
 401a14c:	d9c00215 	stw	r7,8(sp)
 401a150:	da400415 	stw	r9,16(sp)
 401a154:	400e04c0 	call	400e04c <__clzsi2>
 401a158:	d9800717 	ldw	r6,28(sp)
 401a15c:	d9c00217 	ldw	r7,8(sp)
 401a160:	da400417 	ldw	r9,16(sp)
 401a164:	113ffd44 	addi	r4,r2,-11
 401a168:	00c00704 	movi	r3,28
 401a16c:	19014216 	blt	r3,r4,401a678 <__muldf3+0x714>
 401a170:	00c00744 	movi	r3,29
 401a174:	15bffe04 	addi	r22,r2,-8
 401a178:	1907c83a 	sub	r3,r3,r4
 401a17c:	85a0983a 	sll	r16,r16,r22
 401a180:	a8c6d83a 	srl	r3,r21,r3
 401a184:	adac983a 	sll	r22,r21,r22
 401a188:	1c20b03a 	or	r16,r3,r16
 401a18c:	1080fcc4 	addi	r2,r2,1011
 401a190:	00a9c83a 	sub	r20,zero,r2
 401a194:	002b883a 	mov	r21,zero
 401a198:	000b883a 	mov	r5,zero
 401a19c:	003f9006 	br	4019fe0 <__alt_mem_onchip_memory2_0+0xfc018d60>
 401a1a0:	3446b03a 	or	r3,r6,r17
 401a1a4:	1800281e 	bne	r3,zero,401a248 <__muldf3+0x2e4>
 401a1a8:	0023883a 	mov	r17,zero
 401a1ac:	0025883a 	mov	r18,zero
 401a1b0:	01c00084 	movi	r7,2
 401a1b4:	003f9c06 	br	401a028 <__alt_mem_onchip_memory2_0+0xfc018da8>
 401a1b8:	3446b03a 	or	r3,r6,r17
 401a1bc:	18001e26 	beq	r3,zero,401a238 <__muldf3+0x2d4>
 401a1c0:	88012126 	beq	r17,zero,401a648 <__muldf3+0x6e4>
 401a1c4:	8809883a 	mov	r4,r17
 401a1c8:	d9400215 	stw	r5,8(sp)
 401a1cc:	d9800715 	stw	r6,28(sp)
 401a1d0:	da400415 	stw	r9,16(sp)
 401a1d4:	da800315 	stw	r10,12(sp)
 401a1d8:	400e04c0 	call	400e04c <__clzsi2>
 401a1dc:	d9400217 	ldw	r5,8(sp)
 401a1e0:	d9800717 	ldw	r6,28(sp)
 401a1e4:	da400417 	ldw	r9,16(sp)
 401a1e8:	da800317 	ldw	r10,12(sp)
 401a1ec:	113ffd44 	addi	r4,r2,-11
 401a1f0:	00c00704 	movi	r3,28
 401a1f4:	19011016 	blt	r3,r4,401a638 <__muldf3+0x6d4>
 401a1f8:	00c00744 	movi	r3,29
 401a1fc:	14bffe04 	addi	r18,r2,-8
 401a200:	1907c83a 	sub	r3,r3,r4
 401a204:	8ca2983a 	sll	r17,r17,r18
 401a208:	30c6d83a 	srl	r3,r6,r3
 401a20c:	34a4983a 	sll	r18,r6,r18
 401a210:	1c62b03a 	or	r17,r3,r17
 401a214:	1080fcc4 	addi	r2,r2,1011
 401a218:	0085c83a 	sub	r2,zero,r2
 401a21c:	000f883a 	mov	r7,zero
 401a220:	003f8106 	br	401a028 <__alt_mem_onchip_memory2_0+0xfc018da8>
 401a224:	3027883a 	mov	r19,r6
 401a228:	0081ffc4 	movi	r2,2047
 401a22c:	0021883a 	mov	r16,zero
 401a230:	002d883a 	mov	r22,zero
 401a234:	003faa06 	br	401a0e0 <__alt_mem_onchip_memory2_0+0xfc018e60>
 401a238:	0023883a 	mov	r17,zero
 401a23c:	0025883a 	mov	r18,zero
 401a240:	01c00044 	movi	r7,1
 401a244:	003f7806 	br	401a028 <__alt_mem_onchip_memory2_0+0xfc018da8>
 401a248:	01c000c4 	movi	r7,3
 401a24c:	003f7606 	br	401a028 <__alt_mem_onchip_memory2_0+0xfc018da8>
 401a250:	05400104 	movi	r21,4
 401a254:	0021883a 	mov	r16,zero
 401a258:	002d883a 	mov	r22,zero
 401a25c:	01400044 	movi	r5,1
 401a260:	003f5f06 	br	4019fe0 <__alt_mem_onchip_memory2_0+0xfc018d60>
 401a264:	05400304 	movi	r21,12
 401a268:	014000c4 	movi	r5,3
 401a26c:	003f5c06 	br	4019fe0 <__alt_mem_onchip_memory2_0+0xfc018d60>
 401a270:	04000434 	movhi	r16,16
 401a274:	0027883a 	mov	r19,zero
 401a278:	843fffc4 	addi	r16,r16,-1
 401a27c:	05bfffc4 	movi	r22,-1
 401a280:	0081ffc4 	movi	r2,2047
 401a284:	003f9606 	br	401a0e0 <__alt_mem_onchip_memory2_0+0xfc018e60>
 401a288:	8023883a 	mov	r17,r16
 401a28c:	b025883a 	mov	r18,r22
 401a290:	280f883a 	mov	r7,r5
 401a294:	003f8806 	br	401a0b8 <__alt_mem_onchip_memory2_0+0xfc018e38>
 401a298:	8023883a 	mov	r17,r16
 401a29c:	b025883a 	mov	r18,r22
 401a2a0:	480d883a 	mov	r6,r9
 401a2a4:	280f883a 	mov	r7,r5
 401a2a8:	003f8306 	br	401a0b8 <__alt_mem_onchip_memory2_0+0xfc018e38>
 401a2ac:	b026d43a 	srli	r19,r22,16
 401a2b0:	902ed43a 	srli	r23,r18,16
 401a2b4:	b5bfffcc 	andi	r22,r22,65535
 401a2b8:	94bfffcc 	andi	r18,r18,65535
 401a2bc:	b00b883a 	mov	r5,r22
 401a2c0:	9009883a 	mov	r4,r18
 401a2c4:	d8c00515 	stw	r3,20(sp)
 401a2c8:	d9800715 	stw	r6,28(sp)
 401a2cc:	da000615 	stw	r8,24(sp)
 401a2d0:	400cfd40 	call	400cfd4 <__mulsi3>
 401a2d4:	980b883a 	mov	r5,r19
 401a2d8:	9009883a 	mov	r4,r18
 401a2dc:	1029883a 	mov	r20,r2
 401a2e0:	400cfd40 	call	400cfd4 <__mulsi3>
 401a2e4:	b80b883a 	mov	r5,r23
 401a2e8:	9809883a 	mov	r4,r19
 401a2ec:	102b883a 	mov	r21,r2
 401a2f0:	400cfd40 	call	400cfd4 <__mulsi3>
 401a2f4:	b809883a 	mov	r4,r23
 401a2f8:	b00b883a 	mov	r5,r22
 401a2fc:	1039883a 	mov	fp,r2
 401a300:	400cfd40 	call	400cfd4 <__mulsi3>
 401a304:	a008d43a 	srli	r4,r20,16
 401a308:	1545883a 	add	r2,r2,r21
 401a30c:	d8c00517 	ldw	r3,20(sp)
 401a310:	2085883a 	add	r2,r4,r2
 401a314:	d9800717 	ldw	r6,28(sp)
 401a318:	da000617 	ldw	r8,24(sp)
 401a31c:	1540022e 	bgeu	r2,r21,401a328 <__muldf3+0x3c4>
 401a320:	01000074 	movhi	r4,1
 401a324:	e139883a 	add	fp,fp,r4
 401a328:	100e943a 	slli	r7,r2,16
 401a32c:	1004d43a 	srli	r2,r2,16
 401a330:	882ad43a 	srli	r21,r17,16
 401a334:	a53fffcc 	andi	r20,r20,65535
 401a338:	8c7fffcc 	andi	r17,r17,65535
 401a33c:	3d29883a 	add	r20,r7,r20
 401a340:	b00b883a 	mov	r5,r22
 401a344:	8809883a 	mov	r4,r17
 401a348:	d8c00515 	stw	r3,20(sp)
 401a34c:	d9800715 	stw	r6,28(sp)
 401a350:	da000615 	stw	r8,24(sp)
 401a354:	dd000115 	stw	r20,4(sp)
 401a358:	d8800015 	stw	r2,0(sp)
 401a35c:	400cfd40 	call	400cfd4 <__mulsi3>
 401a360:	980b883a 	mov	r5,r19
 401a364:	8809883a 	mov	r4,r17
 401a368:	d8800215 	stw	r2,8(sp)
 401a36c:	400cfd40 	call	400cfd4 <__mulsi3>
 401a370:	9809883a 	mov	r4,r19
 401a374:	a80b883a 	mov	r5,r21
 401a378:	1029883a 	mov	r20,r2
 401a37c:	400cfd40 	call	400cfd4 <__mulsi3>
 401a380:	b00b883a 	mov	r5,r22
 401a384:	a809883a 	mov	r4,r21
 401a388:	d8800415 	stw	r2,16(sp)
 401a38c:	400cfd40 	call	400cfd4 <__mulsi3>
 401a390:	d9c00217 	ldw	r7,8(sp)
 401a394:	1505883a 	add	r2,r2,r20
 401a398:	d8c00517 	ldw	r3,20(sp)
 401a39c:	3826d43a 	srli	r19,r7,16
 401a3a0:	d9800717 	ldw	r6,28(sp)
 401a3a4:	da000617 	ldw	r8,24(sp)
 401a3a8:	9885883a 	add	r2,r19,r2
 401a3ac:	da400417 	ldw	r9,16(sp)
 401a3b0:	1500022e 	bgeu	r2,r20,401a3bc <__muldf3+0x458>
 401a3b4:	01000074 	movhi	r4,1
 401a3b8:	4913883a 	add	r9,r9,r4
 401a3bc:	1028d43a 	srli	r20,r2,16
 401a3c0:	1004943a 	slli	r2,r2,16
 401a3c4:	802cd43a 	srli	r22,r16,16
 401a3c8:	843fffcc 	andi	r16,r16,65535
 401a3cc:	3cffffcc 	andi	r19,r7,65535
 401a3d0:	9009883a 	mov	r4,r18
 401a3d4:	800b883a 	mov	r5,r16
 401a3d8:	a269883a 	add	r20,r20,r9
 401a3dc:	d8c00515 	stw	r3,20(sp)
 401a3e0:	d9800715 	stw	r6,28(sp)
 401a3e4:	da000615 	stw	r8,24(sp)
 401a3e8:	14e7883a 	add	r19,r2,r19
 401a3ec:	400cfd40 	call	400cfd4 <__mulsi3>
 401a3f0:	9009883a 	mov	r4,r18
 401a3f4:	b00b883a 	mov	r5,r22
 401a3f8:	d8800315 	stw	r2,12(sp)
 401a3fc:	400cfd40 	call	400cfd4 <__mulsi3>
 401a400:	b809883a 	mov	r4,r23
 401a404:	b00b883a 	mov	r5,r22
 401a408:	d8800215 	stw	r2,8(sp)
 401a40c:	400cfd40 	call	400cfd4 <__mulsi3>
 401a410:	b80b883a 	mov	r5,r23
 401a414:	8009883a 	mov	r4,r16
 401a418:	d8800415 	stw	r2,16(sp)
 401a41c:	400cfd40 	call	400cfd4 <__mulsi3>
 401a420:	da800317 	ldw	r10,12(sp)
 401a424:	d9c00217 	ldw	r7,8(sp)
 401a428:	d9000017 	ldw	r4,0(sp)
 401a42c:	502ed43a 	srli	r23,r10,16
 401a430:	11c5883a 	add	r2,r2,r7
 401a434:	24e5883a 	add	r18,r4,r19
 401a438:	b885883a 	add	r2,r23,r2
 401a43c:	d8c00517 	ldw	r3,20(sp)
 401a440:	d9800717 	ldw	r6,28(sp)
 401a444:	da000617 	ldw	r8,24(sp)
 401a448:	da400417 	ldw	r9,16(sp)
 401a44c:	11c0022e 	bgeu	r2,r7,401a458 <__muldf3+0x4f4>
 401a450:	01000074 	movhi	r4,1
 401a454:	4913883a 	add	r9,r9,r4
 401a458:	100ed43a 	srli	r7,r2,16
 401a45c:	1004943a 	slli	r2,r2,16
 401a460:	55ffffcc 	andi	r23,r10,65535
 401a464:	3a53883a 	add	r9,r7,r9
 401a468:	8809883a 	mov	r4,r17
 401a46c:	800b883a 	mov	r5,r16
 401a470:	d8c00515 	stw	r3,20(sp)
 401a474:	d9800715 	stw	r6,28(sp)
 401a478:	da000615 	stw	r8,24(sp)
 401a47c:	da400415 	stw	r9,16(sp)
 401a480:	15ef883a 	add	r23,r2,r23
 401a484:	400cfd40 	call	400cfd4 <__mulsi3>
 401a488:	8809883a 	mov	r4,r17
 401a48c:	b00b883a 	mov	r5,r22
 401a490:	d8800215 	stw	r2,8(sp)
 401a494:	400cfd40 	call	400cfd4 <__mulsi3>
 401a498:	b00b883a 	mov	r5,r22
 401a49c:	a809883a 	mov	r4,r21
 401a4a0:	d8800315 	stw	r2,12(sp)
 401a4a4:	400cfd40 	call	400cfd4 <__mulsi3>
 401a4a8:	8009883a 	mov	r4,r16
 401a4ac:	a80b883a 	mov	r5,r21
 401a4b0:	1023883a 	mov	r17,r2
 401a4b4:	400cfd40 	call	400cfd4 <__mulsi3>
 401a4b8:	d9c00217 	ldw	r7,8(sp)
 401a4bc:	da800317 	ldw	r10,12(sp)
 401a4c0:	d8c00517 	ldw	r3,20(sp)
 401a4c4:	3808d43a 	srli	r4,r7,16
 401a4c8:	1285883a 	add	r2,r2,r10
 401a4cc:	d9800717 	ldw	r6,28(sp)
 401a4d0:	2085883a 	add	r2,r4,r2
 401a4d4:	da000617 	ldw	r8,24(sp)
 401a4d8:	da400417 	ldw	r9,16(sp)
 401a4dc:	1280022e 	bgeu	r2,r10,401a4e8 <__muldf3+0x584>
 401a4e0:	01000074 	movhi	r4,1
 401a4e4:	8923883a 	add	r17,r17,r4
 401a4e8:	1008943a 	slli	r4,r2,16
 401a4ec:	39ffffcc 	andi	r7,r7,65535
 401a4f0:	e4b9883a 	add	fp,fp,r18
 401a4f4:	21cf883a 	add	r7,r4,r7
 401a4f8:	e4e7803a 	cmpltu	r19,fp,r19
 401a4fc:	3d0f883a 	add	r7,r7,r20
 401a500:	bf39883a 	add	fp,r23,fp
 401a504:	99c9883a 	add	r4,r19,r7
 401a508:	e5ef803a 	cmpltu	r23,fp,r23
 401a50c:	490b883a 	add	r5,r9,r4
 401a510:	1004d43a 	srli	r2,r2,16
 401a514:	b965883a 	add	r18,r23,r5
 401a518:	24c9803a 	cmpltu	r4,r4,r19
 401a51c:	3d29803a 	cmpltu	r20,r7,r20
 401a520:	a128b03a 	or	r20,r20,r4
 401a524:	95ef803a 	cmpltu	r23,r18,r23
 401a528:	2a53803a 	cmpltu	r9,r5,r9
 401a52c:	a0a9883a 	add	r20,r20,r2
 401a530:	4deeb03a 	or	r23,r9,r23
 401a534:	a5ef883a 	add	r23,r20,r23
 401a538:	bc63883a 	add	r17,r23,r17
 401a53c:	e004927a 	slli	r2,fp,9
 401a540:	d9000117 	ldw	r4,4(sp)
 401a544:	882e927a 	slli	r23,r17,9
 401a548:	9022d5fa 	srli	r17,r18,23
 401a54c:	e038d5fa 	srli	fp,fp,23
 401a550:	1104b03a 	or	r2,r2,r4
 401a554:	9024927a 	slli	r18,r18,9
 401a558:	1004c03a 	cmpne	r2,r2,zero
 401a55c:	bc62b03a 	or	r17,r23,r17
 401a560:	1738b03a 	or	fp,r2,fp
 401a564:	8880402c 	andhi	r2,r17,256
 401a568:	e4a4b03a 	or	r18,fp,r18
 401a56c:	10000726 	beq	r2,zero,401a58c <__muldf3+0x628>
 401a570:	9006d07a 	srli	r3,r18,1
 401a574:	880497fa 	slli	r2,r17,31
 401a578:	9480004c 	andi	r18,r18,1
 401a57c:	8822d07a 	srli	r17,r17,1
 401a580:	1ca4b03a 	or	r18,r3,r18
 401a584:	14a4b03a 	or	r18,r2,r18
 401a588:	4007883a 	mov	r3,r8
 401a58c:	1880ffc4 	addi	r2,r3,1023
 401a590:	0080460e 	bge	zero,r2,401a6ac <__muldf3+0x748>
 401a594:	910001cc 	andi	r4,r18,7
 401a598:	20000726 	beq	r4,zero,401a5b8 <__muldf3+0x654>
 401a59c:	910003cc 	andi	r4,r18,15
 401a5a0:	01400104 	movi	r5,4
 401a5a4:	21400426 	beq	r4,r5,401a5b8 <__muldf3+0x654>
 401a5a8:	9149883a 	add	r4,r18,r5
 401a5ac:	24a5803a 	cmpltu	r18,r4,r18
 401a5b0:	8ca3883a 	add	r17,r17,r18
 401a5b4:	2025883a 	mov	r18,r4
 401a5b8:	8900402c 	andhi	r4,r17,256
 401a5bc:	20000426 	beq	r4,zero,401a5d0 <__muldf3+0x66c>
 401a5c0:	18810004 	addi	r2,r3,1024
 401a5c4:	00ffc034 	movhi	r3,65280
 401a5c8:	18ffffc4 	addi	r3,r3,-1
 401a5cc:	88e2703a 	and	r17,r17,r3
 401a5d0:	00c1ff84 	movi	r3,2046
 401a5d4:	18bf1316 	blt	r3,r2,401a224 <__alt_mem_onchip_memory2_0+0xfc018fa4>
 401a5d8:	882c977a 	slli	r22,r17,29
 401a5dc:	9024d0fa 	srli	r18,r18,3
 401a5e0:	8822927a 	slli	r17,r17,9
 401a5e4:	1081ffcc 	andi	r2,r2,2047
 401a5e8:	b4acb03a 	or	r22,r22,r18
 401a5ec:	8820d33a 	srli	r16,r17,12
 401a5f0:	3027883a 	mov	r19,r6
 401a5f4:	003eba06 	br	401a0e0 <__alt_mem_onchip_memory2_0+0xfc018e60>
 401a5f8:	8080022c 	andhi	r2,r16,8
 401a5fc:	10000926 	beq	r2,zero,401a624 <__muldf3+0x6c0>
 401a600:	8880022c 	andhi	r2,r17,8
 401a604:	1000071e 	bne	r2,zero,401a624 <__muldf3+0x6c0>
 401a608:	00800434 	movhi	r2,16
 401a60c:	8c000234 	orhi	r16,r17,8
 401a610:	10bfffc4 	addi	r2,r2,-1
 401a614:	e027883a 	mov	r19,fp
 401a618:	80a0703a 	and	r16,r16,r2
 401a61c:	902d883a 	mov	r22,r18
 401a620:	003f1706 	br	401a280 <__alt_mem_onchip_memory2_0+0xfc019000>
 401a624:	00800434 	movhi	r2,16
 401a628:	84000234 	orhi	r16,r16,8
 401a62c:	10bfffc4 	addi	r2,r2,-1
 401a630:	80a0703a 	and	r16,r16,r2
 401a634:	003f1206 	br	401a280 <__alt_mem_onchip_memory2_0+0xfc019000>
 401a638:	147ff604 	addi	r17,r2,-40
 401a63c:	3462983a 	sll	r17,r6,r17
 401a640:	0025883a 	mov	r18,zero
 401a644:	003ef306 	br	401a214 <__alt_mem_onchip_memory2_0+0xfc018f94>
 401a648:	3009883a 	mov	r4,r6
 401a64c:	d9400215 	stw	r5,8(sp)
 401a650:	d9800715 	stw	r6,28(sp)
 401a654:	da400415 	stw	r9,16(sp)
 401a658:	da800315 	stw	r10,12(sp)
 401a65c:	400e04c0 	call	400e04c <__clzsi2>
 401a660:	10800804 	addi	r2,r2,32
 401a664:	da800317 	ldw	r10,12(sp)
 401a668:	da400417 	ldw	r9,16(sp)
 401a66c:	d9800717 	ldw	r6,28(sp)
 401a670:	d9400217 	ldw	r5,8(sp)
 401a674:	003edd06 	br	401a1ec <__alt_mem_onchip_memory2_0+0xfc018f6c>
 401a678:	143ff604 	addi	r16,r2,-40
 401a67c:	ac20983a 	sll	r16,r21,r16
 401a680:	002d883a 	mov	r22,zero
 401a684:	003ec106 	br	401a18c <__alt_mem_onchip_memory2_0+0xfc018f0c>
 401a688:	d9800715 	stw	r6,28(sp)
 401a68c:	d9c00215 	stw	r7,8(sp)
 401a690:	da400415 	stw	r9,16(sp)
 401a694:	400e04c0 	call	400e04c <__clzsi2>
 401a698:	10800804 	addi	r2,r2,32
 401a69c:	da400417 	ldw	r9,16(sp)
 401a6a0:	d9c00217 	ldw	r7,8(sp)
 401a6a4:	d9800717 	ldw	r6,28(sp)
 401a6a8:	003eae06 	br	401a164 <__alt_mem_onchip_memory2_0+0xfc018ee4>
 401a6ac:	00c00044 	movi	r3,1
 401a6b0:	1887c83a 	sub	r3,r3,r2
 401a6b4:	01000e04 	movi	r4,56
 401a6b8:	20fe8516 	blt	r4,r3,401a0d0 <__alt_mem_onchip_memory2_0+0xfc018e50>
 401a6bc:	010007c4 	movi	r4,31
 401a6c0:	20c01b16 	blt	r4,r3,401a730 <__muldf3+0x7cc>
 401a6c4:	00800804 	movi	r2,32
 401a6c8:	10c5c83a 	sub	r2,r2,r3
 401a6cc:	888a983a 	sll	r5,r17,r2
 401a6d0:	90c8d83a 	srl	r4,r18,r3
 401a6d4:	9084983a 	sll	r2,r18,r2
 401a6d8:	88e2d83a 	srl	r17,r17,r3
 401a6dc:	2906b03a 	or	r3,r5,r4
 401a6e0:	1004c03a 	cmpne	r2,r2,zero
 401a6e4:	1886b03a 	or	r3,r3,r2
 401a6e8:	188001cc 	andi	r2,r3,7
 401a6ec:	10000726 	beq	r2,zero,401a70c <__muldf3+0x7a8>
 401a6f0:	188003cc 	andi	r2,r3,15
 401a6f4:	01000104 	movi	r4,4
 401a6f8:	11000426 	beq	r2,r4,401a70c <__muldf3+0x7a8>
 401a6fc:	1805883a 	mov	r2,r3
 401a700:	10c00104 	addi	r3,r2,4
 401a704:	1885803a 	cmpltu	r2,r3,r2
 401a708:	88a3883a 	add	r17,r17,r2
 401a70c:	8880202c 	andhi	r2,r17,128
 401a710:	10001c26 	beq	r2,zero,401a784 <__muldf3+0x820>
 401a714:	3027883a 	mov	r19,r6
 401a718:	00800044 	movi	r2,1
 401a71c:	0021883a 	mov	r16,zero
 401a720:	002d883a 	mov	r22,zero
 401a724:	003e6e06 	br	401a0e0 <__alt_mem_onchip_memory2_0+0xfc018e60>
 401a728:	4007883a 	mov	r3,r8
 401a72c:	003f9706 	br	401a58c <__alt_mem_onchip_memory2_0+0xfc01930c>
 401a730:	017ff844 	movi	r5,-31
 401a734:	2885c83a 	sub	r2,r5,r2
 401a738:	888ad83a 	srl	r5,r17,r2
 401a73c:	00800804 	movi	r2,32
 401a740:	18801a26 	beq	r3,r2,401a7ac <__muldf3+0x848>
 401a744:	01001004 	movi	r4,64
 401a748:	20c7c83a 	sub	r3,r4,r3
 401a74c:	88e2983a 	sll	r17,r17,r3
 401a750:	8ca4b03a 	or	r18,r17,r18
 401a754:	9004c03a 	cmpne	r2,r18,zero
 401a758:	2884b03a 	or	r2,r5,r2
 401a75c:	144001cc 	andi	r17,r2,7
 401a760:	88000d1e 	bne	r17,zero,401a798 <__muldf3+0x834>
 401a764:	0021883a 	mov	r16,zero
 401a768:	102cd0fa 	srli	r22,r2,3
 401a76c:	3027883a 	mov	r19,r6
 401a770:	0005883a 	mov	r2,zero
 401a774:	b46cb03a 	or	r22,r22,r17
 401a778:	003e5906 	br	401a0e0 <__alt_mem_onchip_memory2_0+0xfc018e60>
 401a77c:	1007883a 	mov	r3,r2
 401a780:	0023883a 	mov	r17,zero
 401a784:	8820927a 	slli	r16,r17,9
 401a788:	1805883a 	mov	r2,r3
 401a78c:	8822977a 	slli	r17,r17,29
 401a790:	8020d33a 	srli	r16,r16,12
 401a794:	003ff406 	br	401a768 <__alt_mem_onchip_memory2_0+0xfc0194e8>
 401a798:	10c003cc 	andi	r3,r2,15
 401a79c:	01000104 	movi	r4,4
 401a7a0:	193ff626 	beq	r3,r4,401a77c <__alt_mem_onchip_memory2_0+0xfc0194fc>
 401a7a4:	0023883a 	mov	r17,zero
 401a7a8:	003fd506 	br	401a700 <__alt_mem_onchip_memory2_0+0xfc019480>
 401a7ac:	0023883a 	mov	r17,zero
 401a7b0:	003fe706 	br	401a750 <__alt_mem_onchip_memory2_0+0xfc0194d0>
 401a7b4:	00800434 	movhi	r2,16
 401a7b8:	8c000234 	orhi	r16,r17,8
 401a7bc:	10bfffc4 	addi	r2,r2,-1
 401a7c0:	3027883a 	mov	r19,r6
 401a7c4:	80a0703a 	and	r16,r16,r2
 401a7c8:	902d883a 	mov	r22,r18
 401a7cc:	003eac06 	br	401a280 <__alt_mem_onchip_memory2_0+0xfc019000>

0401a7d0 <__subdf3>:
 401a7d0:	02000434 	movhi	r8,16
 401a7d4:	423fffc4 	addi	r8,r8,-1
 401a7d8:	defffb04 	addi	sp,sp,-20
 401a7dc:	2a14703a 	and	r10,r5,r8
 401a7e0:	3812d53a 	srli	r9,r7,20
 401a7e4:	3a10703a 	and	r8,r7,r8
 401a7e8:	2006d77a 	srli	r3,r4,29
 401a7ec:	3004d77a 	srli	r2,r6,29
 401a7f0:	dc000015 	stw	r16,0(sp)
 401a7f4:	501490fa 	slli	r10,r10,3
 401a7f8:	2820d53a 	srli	r16,r5,20
 401a7fc:	401090fa 	slli	r8,r8,3
 401a800:	dc800215 	stw	r18,8(sp)
 401a804:	dc400115 	stw	r17,4(sp)
 401a808:	dfc00415 	stw	ra,16(sp)
 401a80c:	202290fa 	slli	r17,r4,3
 401a810:	dcc00315 	stw	r19,12(sp)
 401a814:	4a41ffcc 	andi	r9,r9,2047
 401a818:	0101ffc4 	movi	r4,2047
 401a81c:	2824d7fa 	srli	r18,r5,31
 401a820:	8401ffcc 	andi	r16,r16,2047
 401a824:	50c6b03a 	or	r3,r10,r3
 401a828:	380ed7fa 	srli	r7,r7,31
 401a82c:	408ab03a 	or	r5,r8,r2
 401a830:	300c90fa 	slli	r6,r6,3
 401a834:	49009626 	beq	r9,r4,401aa90 <__subdf3+0x2c0>
 401a838:	39c0005c 	xori	r7,r7,1
 401a83c:	8245c83a 	sub	r2,r16,r9
 401a840:	3c807426 	beq	r7,r18,401aa14 <__subdf3+0x244>
 401a844:	0080af0e 	bge	zero,r2,401ab04 <__subdf3+0x334>
 401a848:	48002a1e 	bne	r9,zero,401a8f4 <__subdf3+0x124>
 401a84c:	2988b03a 	or	r4,r5,r6
 401a850:	20009a1e 	bne	r4,zero,401aabc <__subdf3+0x2ec>
 401a854:	888001cc 	andi	r2,r17,7
 401a858:	10000726 	beq	r2,zero,401a878 <__subdf3+0xa8>
 401a85c:	888003cc 	andi	r2,r17,15
 401a860:	01000104 	movi	r4,4
 401a864:	11000426 	beq	r2,r4,401a878 <__subdf3+0xa8>
 401a868:	890b883a 	add	r5,r17,r4
 401a86c:	2c63803a 	cmpltu	r17,r5,r17
 401a870:	1c47883a 	add	r3,r3,r17
 401a874:	2823883a 	mov	r17,r5
 401a878:	1880202c 	andhi	r2,r3,128
 401a87c:	10005926 	beq	r2,zero,401a9e4 <__subdf3+0x214>
 401a880:	84000044 	addi	r16,r16,1
 401a884:	0081ffc4 	movi	r2,2047
 401a888:	8080be26 	beq	r16,r2,401ab84 <__subdf3+0x3b4>
 401a88c:	017fe034 	movhi	r5,65408
 401a890:	297fffc4 	addi	r5,r5,-1
 401a894:	1946703a 	and	r3,r3,r5
 401a898:	1804977a 	slli	r2,r3,29
 401a89c:	1806927a 	slli	r3,r3,9
 401a8a0:	8822d0fa 	srli	r17,r17,3
 401a8a4:	8401ffcc 	andi	r16,r16,2047
 401a8a8:	180ad33a 	srli	r5,r3,12
 401a8ac:	9100004c 	andi	r4,r18,1
 401a8b0:	1444b03a 	or	r2,r2,r17
 401a8b4:	80c1ffcc 	andi	r3,r16,2047
 401a8b8:	1820953a 	slli	r16,r3,20
 401a8bc:	20c03fcc 	andi	r3,r4,255
 401a8c0:	180897fa 	slli	r4,r3,31
 401a8c4:	00c00434 	movhi	r3,16
 401a8c8:	18ffffc4 	addi	r3,r3,-1
 401a8cc:	28c6703a 	and	r3,r5,r3
 401a8d0:	1c06b03a 	or	r3,r3,r16
 401a8d4:	1906b03a 	or	r3,r3,r4
 401a8d8:	dfc00417 	ldw	ra,16(sp)
 401a8dc:	dcc00317 	ldw	r19,12(sp)
 401a8e0:	dc800217 	ldw	r18,8(sp)
 401a8e4:	dc400117 	ldw	r17,4(sp)
 401a8e8:	dc000017 	ldw	r16,0(sp)
 401a8ec:	dec00504 	addi	sp,sp,20
 401a8f0:	f800283a 	ret
 401a8f4:	0101ffc4 	movi	r4,2047
 401a8f8:	813fd626 	beq	r16,r4,401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401a8fc:	29402034 	orhi	r5,r5,128
 401a900:	01000e04 	movi	r4,56
 401a904:	2080a316 	blt	r4,r2,401ab94 <__subdf3+0x3c4>
 401a908:	010007c4 	movi	r4,31
 401a90c:	2080c616 	blt	r4,r2,401ac28 <__subdf3+0x458>
 401a910:	01000804 	movi	r4,32
 401a914:	2089c83a 	sub	r4,r4,r2
 401a918:	2910983a 	sll	r8,r5,r4
 401a91c:	308ed83a 	srl	r7,r6,r2
 401a920:	3108983a 	sll	r4,r6,r4
 401a924:	2884d83a 	srl	r2,r5,r2
 401a928:	41ccb03a 	or	r6,r8,r7
 401a92c:	2008c03a 	cmpne	r4,r4,zero
 401a930:	310cb03a 	or	r6,r6,r4
 401a934:	898dc83a 	sub	r6,r17,r6
 401a938:	89a3803a 	cmpltu	r17,r17,r6
 401a93c:	1887c83a 	sub	r3,r3,r2
 401a940:	1c47c83a 	sub	r3,r3,r17
 401a944:	3023883a 	mov	r17,r6
 401a948:	1880202c 	andhi	r2,r3,128
 401a94c:	10002326 	beq	r2,zero,401a9dc <__subdf3+0x20c>
 401a950:	04c02034 	movhi	r19,128
 401a954:	9cffffc4 	addi	r19,r19,-1
 401a958:	1ce6703a 	and	r19,r3,r19
 401a95c:	98007a26 	beq	r19,zero,401ab48 <__subdf3+0x378>
 401a960:	9809883a 	mov	r4,r19
 401a964:	400e04c0 	call	400e04c <__clzsi2>
 401a968:	113ffe04 	addi	r4,r2,-8
 401a96c:	00c007c4 	movi	r3,31
 401a970:	19007b16 	blt	r3,r4,401ab60 <__subdf3+0x390>
 401a974:	00800804 	movi	r2,32
 401a978:	1105c83a 	sub	r2,r2,r4
 401a97c:	8884d83a 	srl	r2,r17,r2
 401a980:	9906983a 	sll	r3,r19,r4
 401a984:	8922983a 	sll	r17,r17,r4
 401a988:	10c4b03a 	or	r2,r2,r3
 401a98c:	24007816 	blt	r4,r16,401ab70 <__subdf3+0x3a0>
 401a990:	2421c83a 	sub	r16,r4,r16
 401a994:	80c00044 	addi	r3,r16,1
 401a998:	010007c4 	movi	r4,31
 401a99c:	20c09516 	blt	r4,r3,401abf4 <__subdf3+0x424>
 401a9a0:	01400804 	movi	r5,32
 401a9a4:	28cbc83a 	sub	r5,r5,r3
 401a9a8:	88c8d83a 	srl	r4,r17,r3
 401a9ac:	8962983a 	sll	r17,r17,r5
 401a9b0:	114a983a 	sll	r5,r2,r5
 401a9b4:	10c6d83a 	srl	r3,r2,r3
 401a9b8:	8804c03a 	cmpne	r2,r17,zero
 401a9bc:	290ab03a 	or	r5,r5,r4
 401a9c0:	28a2b03a 	or	r17,r5,r2
 401a9c4:	0021883a 	mov	r16,zero
 401a9c8:	003fa206 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401a9cc:	2090b03a 	or	r8,r4,r2
 401a9d0:	40018e26 	beq	r8,zero,401b00c <__subdf3+0x83c>
 401a9d4:	1007883a 	mov	r3,r2
 401a9d8:	2023883a 	mov	r17,r4
 401a9dc:	888001cc 	andi	r2,r17,7
 401a9e0:	103f9e1e 	bne	r2,zero,401a85c <__alt_mem_onchip_memory2_0+0xfc0195dc>
 401a9e4:	1804977a 	slli	r2,r3,29
 401a9e8:	8822d0fa 	srli	r17,r17,3
 401a9ec:	1810d0fa 	srli	r8,r3,3
 401a9f0:	9100004c 	andi	r4,r18,1
 401a9f4:	1444b03a 	or	r2,r2,r17
 401a9f8:	00c1ffc4 	movi	r3,2047
 401a9fc:	80c02826 	beq	r16,r3,401aaa0 <__subdf3+0x2d0>
 401aa00:	01400434 	movhi	r5,16
 401aa04:	297fffc4 	addi	r5,r5,-1
 401aa08:	80e0703a 	and	r16,r16,r3
 401aa0c:	414a703a 	and	r5,r8,r5
 401aa10:	003fa806 	br	401a8b4 <__alt_mem_onchip_memory2_0+0xfc019634>
 401aa14:	0080630e 	bge	zero,r2,401aba4 <__subdf3+0x3d4>
 401aa18:	48003026 	beq	r9,zero,401aadc <__subdf3+0x30c>
 401aa1c:	0101ffc4 	movi	r4,2047
 401aa20:	813f8c26 	beq	r16,r4,401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401aa24:	29402034 	orhi	r5,r5,128
 401aa28:	01000e04 	movi	r4,56
 401aa2c:	2080a90e 	bge	r4,r2,401acd4 <__subdf3+0x504>
 401aa30:	298cb03a 	or	r6,r5,r6
 401aa34:	3012c03a 	cmpne	r9,r6,zero
 401aa38:	0005883a 	mov	r2,zero
 401aa3c:	4c53883a 	add	r9,r9,r17
 401aa40:	4c63803a 	cmpltu	r17,r9,r17
 401aa44:	10c7883a 	add	r3,r2,r3
 401aa48:	88c7883a 	add	r3,r17,r3
 401aa4c:	4823883a 	mov	r17,r9
 401aa50:	1880202c 	andhi	r2,r3,128
 401aa54:	1000d026 	beq	r2,zero,401ad98 <__subdf3+0x5c8>
 401aa58:	84000044 	addi	r16,r16,1
 401aa5c:	0081ffc4 	movi	r2,2047
 401aa60:	8080fe26 	beq	r16,r2,401ae5c <__subdf3+0x68c>
 401aa64:	00bfe034 	movhi	r2,65408
 401aa68:	10bfffc4 	addi	r2,r2,-1
 401aa6c:	1886703a 	and	r3,r3,r2
 401aa70:	880ad07a 	srli	r5,r17,1
 401aa74:	180497fa 	slli	r2,r3,31
 401aa78:	8900004c 	andi	r4,r17,1
 401aa7c:	2922b03a 	or	r17,r5,r4
 401aa80:	1806d07a 	srli	r3,r3,1
 401aa84:	1462b03a 	or	r17,r2,r17
 401aa88:	3825883a 	mov	r18,r7
 401aa8c:	003f7106 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401aa90:	2984b03a 	or	r2,r5,r6
 401aa94:	103f6826 	beq	r2,zero,401a838 <__alt_mem_onchip_memory2_0+0xfc0195b8>
 401aa98:	39c03fcc 	andi	r7,r7,255
 401aa9c:	003f6706 	br	401a83c <__alt_mem_onchip_memory2_0+0xfc0195bc>
 401aaa0:	4086b03a 	or	r3,r8,r2
 401aaa4:	18015226 	beq	r3,zero,401aff0 <__subdf3+0x820>
 401aaa8:	00c00434 	movhi	r3,16
 401aaac:	41400234 	orhi	r5,r8,8
 401aab0:	18ffffc4 	addi	r3,r3,-1
 401aab4:	28ca703a 	and	r5,r5,r3
 401aab8:	003f7e06 	br	401a8b4 <__alt_mem_onchip_memory2_0+0xfc019634>
 401aabc:	10bfffc4 	addi	r2,r2,-1
 401aac0:	1000491e 	bne	r2,zero,401abe8 <__subdf3+0x418>
 401aac4:	898fc83a 	sub	r7,r17,r6
 401aac8:	89e3803a 	cmpltu	r17,r17,r7
 401aacc:	1947c83a 	sub	r3,r3,r5
 401aad0:	1c47c83a 	sub	r3,r3,r17
 401aad4:	3823883a 	mov	r17,r7
 401aad8:	003f9b06 	br	401a948 <__alt_mem_onchip_memory2_0+0xfc0196c8>
 401aadc:	2988b03a 	or	r4,r5,r6
 401aae0:	203f5c26 	beq	r4,zero,401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401aae4:	10bfffc4 	addi	r2,r2,-1
 401aae8:	1000931e 	bne	r2,zero,401ad38 <__subdf3+0x568>
 401aaec:	898d883a 	add	r6,r17,r6
 401aaf0:	3463803a 	cmpltu	r17,r6,r17
 401aaf4:	1947883a 	add	r3,r3,r5
 401aaf8:	88c7883a 	add	r3,r17,r3
 401aafc:	3023883a 	mov	r17,r6
 401ab00:	003fd306 	br	401aa50 <__alt_mem_onchip_memory2_0+0xfc0197d0>
 401ab04:	1000541e 	bne	r2,zero,401ac58 <__subdf3+0x488>
 401ab08:	80800044 	addi	r2,r16,1
 401ab0c:	1081ffcc 	andi	r2,r2,2047
 401ab10:	01000044 	movi	r4,1
 401ab14:	2080a20e 	bge	r4,r2,401ada0 <__subdf3+0x5d0>
 401ab18:	8989c83a 	sub	r4,r17,r6
 401ab1c:	8905803a 	cmpltu	r2,r17,r4
 401ab20:	1967c83a 	sub	r19,r3,r5
 401ab24:	98a7c83a 	sub	r19,r19,r2
 401ab28:	9880202c 	andhi	r2,r19,128
 401ab2c:	10006326 	beq	r2,zero,401acbc <__subdf3+0x4ec>
 401ab30:	3463c83a 	sub	r17,r6,r17
 401ab34:	28c7c83a 	sub	r3,r5,r3
 401ab38:	344d803a 	cmpltu	r6,r6,r17
 401ab3c:	19a7c83a 	sub	r19,r3,r6
 401ab40:	3825883a 	mov	r18,r7
 401ab44:	983f861e 	bne	r19,zero,401a960 <__alt_mem_onchip_memory2_0+0xfc0196e0>
 401ab48:	8809883a 	mov	r4,r17
 401ab4c:	400e04c0 	call	400e04c <__clzsi2>
 401ab50:	10800804 	addi	r2,r2,32
 401ab54:	113ffe04 	addi	r4,r2,-8
 401ab58:	00c007c4 	movi	r3,31
 401ab5c:	193f850e 	bge	r3,r4,401a974 <__alt_mem_onchip_memory2_0+0xfc0196f4>
 401ab60:	10bff604 	addi	r2,r2,-40
 401ab64:	8884983a 	sll	r2,r17,r2
 401ab68:	0023883a 	mov	r17,zero
 401ab6c:	243f880e 	bge	r4,r16,401a990 <__alt_mem_onchip_memory2_0+0xfc019710>
 401ab70:	00ffe034 	movhi	r3,65408
 401ab74:	18ffffc4 	addi	r3,r3,-1
 401ab78:	8121c83a 	sub	r16,r16,r4
 401ab7c:	10c6703a 	and	r3,r2,r3
 401ab80:	003f3406 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401ab84:	9100004c 	andi	r4,r18,1
 401ab88:	000b883a 	mov	r5,zero
 401ab8c:	0005883a 	mov	r2,zero
 401ab90:	003f4806 	br	401a8b4 <__alt_mem_onchip_memory2_0+0xfc019634>
 401ab94:	298cb03a 	or	r6,r5,r6
 401ab98:	300cc03a 	cmpne	r6,r6,zero
 401ab9c:	0005883a 	mov	r2,zero
 401aba0:	003f6406 	br	401a934 <__alt_mem_onchip_memory2_0+0xfc0196b4>
 401aba4:	10009a1e 	bne	r2,zero,401ae10 <__subdf3+0x640>
 401aba8:	82400044 	addi	r9,r16,1
 401abac:	4881ffcc 	andi	r2,r9,2047
 401abb0:	02800044 	movi	r10,1
 401abb4:	5080670e 	bge	r10,r2,401ad54 <__subdf3+0x584>
 401abb8:	0081ffc4 	movi	r2,2047
 401abbc:	4880af26 	beq	r9,r2,401ae7c <__subdf3+0x6ac>
 401abc0:	898d883a 	add	r6,r17,r6
 401abc4:	1945883a 	add	r2,r3,r5
 401abc8:	3447803a 	cmpltu	r3,r6,r17
 401abcc:	1887883a 	add	r3,r3,r2
 401abd0:	182297fa 	slli	r17,r3,31
 401abd4:	300cd07a 	srli	r6,r6,1
 401abd8:	1806d07a 	srli	r3,r3,1
 401abdc:	4821883a 	mov	r16,r9
 401abe0:	89a2b03a 	or	r17,r17,r6
 401abe4:	003f1b06 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401abe8:	0101ffc4 	movi	r4,2047
 401abec:	813f441e 	bne	r16,r4,401a900 <__alt_mem_onchip_memory2_0+0xfc019680>
 401abf0:	003f1806 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401abf4:	843ff844 	addi	r16,r16,-31
 401abf8:	01400804 	movi	r5,32
 401abfc:	1408d83a 	srl	r4,r2,r16
 401ac00:	19405026 	beq	r3,r5,401ad44 <__subdf3+0x574>
 401ac04:	01401004 	movi	r5,64
 401ac08:	28c7c83a 	sub	r3,r5,r3
 401ac0c:	10c4983a 	sll	r2,r2,r3
 401ac10:	88a2b03a 	or	r17,r17,r2
 401ac14:	8822c03a 	cmpne	r17,r17,zero
 401ac18:	2462b03a 	or	r17,r4,r17
 401ac1c:	0007883a 	mov	r3,zero
 401ac20:	0021883a 	mov	r16,zero
 401ac24:	003f6d06 	br	401a9dc <__alt_mem_onchip_memory2_0+0xfc01975c>
 401ac28:	11fff804 	addi	r7,r2,-32
 401ac2c:	01000804 	movi	r4,32
 401ac30:	29ced83a 	srl	r7,r5,r7
 401ac34:	11004526 	beq	r2,r4,401ad4c <__subdf3+0x57c>
 401ac38:	01001004 	movi	r4,64
 401ac3c:	2089c83a 	sub	r4,r4,r2
 401ac40:	2904983a 	sll	r2,r5,r4
 401ac44:	118cb03a 	or	r6,r2,r6
 401ac48:	300cc03a 	cmpne	r6,r6,zero
 401ac4c:	398cb03a 	or	r6,r7,r6
 401ac50:	0005883a 	mov	r2,zero
 401ac54:	003f3706 	br	401a934 <__alt_mem_onchip_memory2_0+0xfc0196b4>
 401ac58:	80002a26 	beq	r16,zero,401ad04 <__subdf3+0x534>
 401ac5c:	0101ffc4 	movi	r4,2047
 401ac60:	49006626 	beq	r9,r4,401adfc <__subdf3+0x62c>
 401ac64:	0085c83a 	sub	r2,zero,r2
 401ac68:	18c02034 	orhi	r3,r3,128
 401ac6c:	01000e04 	movi	r4,56
 401ac70:	20807e16 	blt	r4,r2,401ae6c <__subdf3+0x69c>
 401ac74:	010007c4 	movi	r4,31
 401ac78:	2080e716 	blt	r4,r2,401b018 <__subdf3+0x848>
 401ac7c:	01000804 	movi	r4,32
 401ac80:	2089c83a 	sub	r4,r4,r2
 401ac84:	1914983a 	sll	r10,r3,r4
 401ac88:	8890d83a 	srl	r8,r17,r2
 401ac8c:	8908983a 	sll	r4,r17,r4
 401ac90:	1884d83a 	srl	r2,r3,r2
 401ac94:	5222b03a 	or	r17,r10,r8
 401ac98:	2006c03a 	cmpne	r3,r4,zero
 401ac9c:	88e2b03a 	or	r17,r17,r3
 401aca0:	3463c83a 	sub	r17,r6,r17
 401aca4:	2885c83a 	sub	r2,r5,r2
 401aca8:	344d803a 	cmpltu	r6,r6,r17
 401acac:	1187c83a 	sub	r3,r2,r6
 401acb0:	4821883a 	mov	r16,r9
 401acb4:	3825883a 	mov	r18,r7
 401acb8:	003f2306 	br	401a948 <__alt_mem_onchip_memory2_0+0xfc0196c8>
 401acbc:	24d0b03a 	or	r8,r4,r19
 401acc0:	40001b1e 	bne	r8,zero,401ad30 <__subdf3+0x560>
 401acc4:	0005883a 	mov	r2,zero
 401acc8:	0009883a 	mov	r4,zero
 401accc:	0021883a 	mov	r16,zero
 401acd0:	003f4906 	br	401a9f8 <__alt_mem_onchip_memory2_0+0xfc019778>
 401acd4:	010007c4 	movi	r4,31
 401acd8:	20803a16 	blt	r4,r2,401adc4 <__subdf3+0x5f4>
 401acdc:	01000804 	movi	r4,32
 401ace0:	2089c83a 	sub	r4,r4,r2
 401ace4:	2912983a 	sll	r9,r5,r4
 401ace8:	3090d83a 	srl	r8,r6,r2
 401acec:	3108983a 	sll	r4,r6,r4
 401acf0:	2884d83a 	srl	r2,r5,r2
 401acf4:	4a12b03a 	or	r9,r9,r8
 401acf8:	2008c03a 	cmpne	r4,r4,zero
 401acfc:	4912b03a 	or	r9,r9,r4
 401ad00:	003f4e06 	br	401aa3c <__alt_mem_onchip_memory2_0+0xfc0197bc>
 401ad04:	1c48b03a 	or	r4,r3,r17
 401ad08:	20003c26 	beq	r4,zero,401adfc <__subdf3+0x62c>
 401ad0c:	0084303a 	nor	r2,zero,r2
 401ad10:	1000381e 	bne	r2,zero,401adf4 <__subdf3+0x624>
 401ad14:	3463c83a 	sub	r17,r6,r17
 401ad18:	28c5c83a 	sub	r2,r5,r3
 401ad1c:	344d803a 	cmpltu	r6,r6,r17
 401ad20:	1187c83a 	sub	r3,r2,r6
 401ad24:	4821883a 	mov	r16,r9
 401ad28:	3825883a 	mov	r18,r7
 401ad2c:	003f0606 	br	401a948 <__alt_mem_onchip_memory2_0+0xfc0196c8>
 401ad30:	2023883a 	mov	r17,r4
 401ad34:	003f0906 	br	401a95c <__alt_mem_onchip_memory2_0+0xfc0196dc>
 401ad38:	0101ffc4 	movi	r4,2047
 401ad3c:	813f3a1e 	bne	r16,r4,401aa28 <__alt_mem_onchip_memory2_0+0xfc0197a8>
 401ad40:	003ec406 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401ad44:	0005883a 	mov	r2,zero
 401ad48:	003fb106 	br	401ac10 <__alt_mem_onchip_memory2_0+0xfc019990>
 401ad4c:	0005883a 	mov	r2,zero
 401ad50:	003fbc06 	br	401ac44 <__alt_mem_onchip_memory2_0+0xfc0199c4>
 401ad54:	1c44b03a 	or	r2,r3,r17
 401ad58:	80008e1e 	bne	r16,zero,401af94 <__subdf3+0x7c4>
 401ad5c:	1000c826 	beq	r2,zero,401b080 <__subdf3+0x8b0>
 401ad60:	2984b03a 	or	r2,r5,r6
 401ad64:	103ebb26 	beq	r2,zero,401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401ad68:	8989883a 	add	r4,r17,r6
 401ad6c:	1945883a 	add	r2,r3,r5
 401ad70:	2447803a 	cmpltu	r3,r4,r17
 401ad74:	1887883a 	add	r3,r3,r2
 401ad78:	1880202c 	andhi	r2,r3,128
 401ad7c:	2023883a 	mov	r17,r4
 401ad80:	103f1626 	beq	r2,zero,401a9dc <__alt_mem_onchip_memory2_0+0xfc01975c>
 401ad84:	00bfe034 	movhi	r2,65408
 401ad88:	10bfffc4 	addi	r2,r2,-1
 401ad8c:	5021883a 	mov	r16,r10
 401ad90:	1886703a 	and	r3,r3,r2
 401ad94:	003eaf06 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401ad98:	3825883a 	mov	r18,r7
 401ad9c:	003f0f06 	br	401a9dc <__alt_mem_onchip_memory2_0+0xfc01975c>
 401ada0:	1c44b03a 	or	r2,r3,r17
 401ada4:	8000251e 	bne	r16,zero,401ae3c <__subdf3+0x66c>
 401ada8:	1000661e 	bne	r2,zero,401af44 <__subdf3+0x774>
 401adac:	2990b03a 	or	r8,r5,r6
 401adb0:	40009626 	beq	r8,zero,401b00c <__subdf3+0x83c>
 401adb4:	2807883a 	mov	r3,r5
 401adb8:	3023883a 	mov	r17,r6
 401adbc:	3825883a 	mov	r18,r7
 401adc0:	003ea406 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401adc4:	127ff804 	addi	r9,r2,-32
 401adc8:	01000804 	movi	r4,32
 401adcc:	2a52d83a 	srl	r9,r5,r9
 401add0:	11008c26 	beq	r2,r4,401b004 <__subdf3+0x834>
 401add4:	01001004 	movi	r4,64
 401add8:	2085c83a 	sub	r2,r4,r2
 401addc:	2884983a 	sll	r2,r5,r2
 401ade0:	118cb03a 	or	r6,r2,r6
 401ade4:	300cc03a 	cmpne	r6,r6,zero
 401ade8:	4992b03a 	or	r9,r9,r6
 401adec:	0005883a 	mov	r2,zero
 401adf0:	003f1206 	br	401aa3c <__alt_mem_onchip_memory2_0+0xfc0197bc>
 401adf4:	0101ffc4 	movi	r4,2047
 401adf8:	493f9c1e 	bne	r9,r4,401ac6c <__alt_mem_onchip_memory2_0+0xfc0199ec>
 401adfc:	2807883a 	mov	r3,r5
 401ae00:	3023883a 	mov	r17,r6
 401ae04:	4821883a 	mov	r16,r9
 401ae08:	3825883a 	mov	r18,r7
 401ae0c:	003e9106 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401ae10:	80001f1e 	bne	r16,zero,401ae90 <__subdf3+0x6c0>
 401ae14:	1c48b03a 	or	r4,r3,r17
 401ae18:	20005a26 	beq	r4,zero,401af84 <__subdf3+0x7b4>
 401ae1c:	0084303a 	nor	r2,zero,r2
 401ae20:	1000561e 	bne	r2,zero,401af7c <__subdf3+0x7ac>
 401ae24:	89a3883a 	add	r17,r17,r6
 401ae28:	1945883a 	add	r2,r3,r5
 401ae2c:	898d803a 	cmpltu	r6,r17,r6
 401ae30:	3087883a 	add	r3,r6,r2
 401ae34:	4821883a 	mov	r16,r9
 401ae38:	003f0506 	br	401aa50 <__alt_mem_onchip_memory2_0+0xfc0197d0>
 401ae3c:	10002b1e 	bne	r2,zero,401aeec <__subdf3+0x71c>
 401ae40:	2984b03a 	or	r2,r5,r6
 401ae44:	10008026 	beq	r2,zero,401b048 <__subdf3+0x878>
 401ae48:	2807883a 	mov	r3,r5
 401ae4c:	3023883a 	mov	r17,r6
 401ae50:	3825883a 	mov	r18,r7
 401ae54:	0401ffc4 	movi	r16,2047
 401ae58:	003e7e06 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401ae5c:	3809883a 	mov	r4,r7
 401ae60:	0011883a 	mov	r8,zero
 401ae64:	0005883a 	mov	r2,zero
 401ae68:	003ee306 	br	401a9f8 <__alt_mem_onchip_memory2_0+0xfc019778>
 401ae6c:	1c62b03a 	or	r17,r3,r17
 401ae70:	8822c03a 	cmpne	r17,r17,zero
 401ae74:	0005883a 	mov	r2,zero
 401ae78:	003f8906 	br	401aca0 <__alt_mem_onchip_memory2_0+0xfc019a20>
 401ae7c:	3809883a 	mov	r4,r7
 401ae80:	4821883a 	mov	r16,r9
 401ae84:	0011883a 	mov	r8,zero
 401ae88:	0005883a 	mov	r2,zero
 401ae8c:	003eda06 	br	401a9f8 <__alt_mem_onchip_memory2_0+0xfc019778>
 401ae90:	0101ffc4 	movi	r4,2047
 401ae94:	49003b26 	beq	r9,r4,401af84 <__subdf3+0x7b4>
 401ae98:	0085c83a 	sub	r2,zero,r2
 401ae9c:	18c02034 	orhi	r3,r3,128
 401aea0:	01000e04 	movi	r4,56
 401aea4:	20806e16 	blt	r4,r2,401b060 <__subdf3+0x890>
 401aea8:	010007c4 	movi	r4,31
 401aeac:	20807716 	blt	r4,r2,401b08c <__subdf3+0x8bc>
 401aeb0:	01000804 	movi	r4,32
 401aeb4:	2089c83a 	sub	r4,r4,r2
 401aeb8:	1914983a 	sll	r10,r3,r4
 401aebc:	8890d83a 	srl	r8,r17,r2
 401aec0:	8908983a 	sll	r4,r17,r4
 401aec4:	1884d83a 	srl	r2,r3,r2
 401aec8:	5222b03a 	or	r17,r10,r8
 401aecc:	2006c03a 	cmpne	r3,r4,zero
 401aed0:	88e2b03a 	or	r17,r17,r3
 401aed4:	89a3883a 	add	r17,r17,r6
 401aed8:	1145883a 	add	r2,r2,r5
 401aedc:	898d803a 	cmpltu	r6,r17,r6
 401aee0:	3087883a 	add	r3,r6,r2
 401aee4:	4821883a 	mov	r16,r9
 401aee8:	003ed906 	br	401aa50 <__alt_mem_onchip_memory2_0+0xfc0197d0>
 401aeec:	2984b03a 	or	r2,r5,r6
 401aef0:	10004226 	beq	r2,zero,401affc <__subdf3+0x82c>
 401aef4:	1808d0fa 	srli	r4,r3,3
 401aef8:	8822d0fa 	srli	r17,r17,3
 401aefc:	1806977a 	slli	r3,r3,29
 401af00:	2080022c 	andhi	r2,r4,8
 401af04:	1c62b03a 	or	r17,r3,r17
 401af08:	10000826 	beq	r2,zero,401af2c <__subdf3+0x75c>
 401af0c:	2812d0fa 	srli	r9,r5,3
 401af10:	4880022c 	andhi	r2,r9,8
 401af14:	1000051e 	bne	r2,zero,401af2c <__subdf3+0x75c>
 401af18:	300cd0fa 	srli	r6,r6,3
 401af1c:	2804977a 	slli	r2,r5,29
 401af20:	4809883a 	mov	r4,r9
 401af24:	3825883a 	mov	r18,r7
 401af28:	11a2b03a 	or	r17,r2,r6
 401af2c:	8806d77a 	srli	r3,r17,29
 401af30:	200890fa 	slli	r4,r4,3
 401af34:	882290fa 	slli	r17,r17,3
 401af38:	0401ffc4 	movi	r16,2047
 401af3c:	1906b03a 	or	r3,r3,r4
 401af40:	003e4406 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401af44:	2984b03a 	or	r2,r5,r6
 401af48:	103e4226 	beq	r2,zero,401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401af4c:	8989c83a 	sub	r4,r17,r6
 401af50:	8911803a 	cmpltu	r8,r17,r4
 401af54:	1945c83a 	sub	r2,r3,r5
 401af58:	1205c83a 	sub	r2,r2,r8
 401af5c:	1200202c 	andhi	r8,r2,128
 401af60:	403e9a26 	beq	r8,zero,401a9cc <__alt_mem_onchip_memory2_0+0xfc01974c>
 401af64:	3463c83a 	sub	r17,r6,r17
 401af68:	28c5c83a 	sub	r2,r5,r3
 401af6c:	344d803a 	cmpltu	r6,r6,r17
 401af70:	1187c83a 	sub	r3,r2,r6
 401af74:	3825883a 	mov	r18,r7
 401af78:	003e3606 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401af7c:	0101ffc4 	movi	r4,2047
 401af80:	493fc71e 	bne	r9,r4,401aea0 <__alt_mem_onchip_memory2_0+0xfc019c20>
 401af84:	2807883a 	mov	r3,r5
 401af88:	3023883a 	mov	r17,r6
 401af8c:	4821883a 	mov	r16,r9
 401af90:	003e3006 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401af94:	10003626 	beq	r2,zero,401b070 <__subdf3+0x8a0>
 401af98:	2984b03a 	or	r2,r5,r6
 401af9c:	10001726 	beq	r2,zero,401affc <__subdf3+0x82c>
 401afa0:	1808d0fa 	srli	r4,r3,3
 401afa4:	8822d0fa 	srli	r17,r17,3
 401afa8:	1806977a 	slli	r3,r3,29
 401afac:	2080022c 	andhi	r2,r4,8
 401afb0:	1c62b03a 	or	r17,r3,r17
 401afb4:	10000726 	beq	r2,zero,401afd4 <__subdf3+0x804>
 401afb8:	2812d0fa 	srli	r9,r5,3
 401afbc:	4880022c 	andhi	r2,r9,8
 401afc0:	1000041e 	bne	r2,zero,401afd4 <__subdf3+0x804>
 401afc4:	300cd0fa 	srli	r6,r6,3
 401afc8:	2804977a 	slli	r2,r5,29
 401afcc:	4809883a 	mov	r4,r9
 401afd0:	11a2b03a 	or	r17,r2,r6
 401afd4:	8806d77a 	srli	r3,r17,29
 401afd8:	200890fa 	slli	r4,r4,3
 401afdc:	882290fa 	slli	r17,r17,3
 401afe0:	3825883a 	mov	r18,r7
 401afe4:	1906b03a 	or	r3,r3,r4
 401afe8:	0401ffc4 	movi	r16,2047
 401afec:	003e1906 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401aff0:	000b883a 	mov	r5,zero
 401aff4:	0005883a 	mov	r2,zero
 401aff8:	003e2e06 	br	401a8b4 <__alt_mem_onchip_memory2_0+0xfc019634>
 401affc:	0401ffc4 	movi	r16,2047
 401b000:	003e1406 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401b004:	0005883a 	mov	r2,zero
 401b008:	003f7506 	br	401ade0 <__alt_mem_onchip_memory2_0+0xfc019b60>
 401b00c:	0005883a 	mov	r2,zero
 401b010:	0009883a 	mov	r4,zero
 401b014:	003e7806 	br	401a9f8 <__alt_mem_onchip_memory2_0+0xfc019778>
 401b018:	123ff804 	addi	r8,r2,-32
 401b01c:	01000804 	movi	r4,32
 401b020:	1a10d83a 	srl	r8,r3,r8
 401b024:	11002526 	beq	r2,r4,401b0bc <__subdf3+0x8ec>
 401b028:	01001004 	movi	r4,64
 401b02c:	2085c83a 	sub	r2,r4,r2
 401b030:	1884983a 	sll	r2,r3,r2
 401b034:	1444b03a 	or	r2,r2,r17
 401b038:	1004c03a 	cmpne	r2,r2,zero
 401b03c:	40a2b03a 	or	r17,r8,r2
 401b040:	0005883a 	mov	r2,zero
 401b044:	003f1606 	br	401aca0 <__alt_mem_onchip_memory2_0+0xfc019a20>
 401b048:	02000434 	movhi	r8,16
 401b04c:	0009883a 	mov	r4,zero
 401b050:	423fffc4 	addi	r8,r8,-1
 401b054:	00bfffc4 	movi	r2,-1
 401b058:	0401ffc4 	movi	r16,2047
 401b05c:	003e6606 	br	401a9f8 <__alt_mem_onchip_memory2_0+0xfc019778>
 401b060:	1c62b03a 	or	r17,r3,r17
 401b064:	8822c03a 	cmpne	r17,r17,zero
 401b068:	0005883a 	mov	r2,zero
 401b06c:	003f9906 	br	401aed4 <__alt_mem_onchip_memory2_0+0xfc019c54>
 401b070:	2807883a 	mov	r3,r5
 401b074:	3023883a 	mov	r17,r6
 401b078:	0401ffc4 	movi	r16,2047
 401b07c:	003df506 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401b080:	2807883a 	mov	r3,r5
 401b084:	3023883a 	mov	r17,r6
 401b088:	003df206 	br	401a854 <__alt_mem_onchip_memory2_0+0xfc0195d4>
 401b08c:	123ff804 	addi	r8,r2,-32
 401b090:	01000804 	movi	r4,32
 401b094:	1a10d83a 	srl	r8,r3,r8
 401b098:	11000a26 	beq	r2,r4,401b0c4 <__subdf3+0x8f4>
 401b09c:	01001004 	movi	r4,64
 401b0a0:	2085c83a 	sub	r2,r4,r2
 401b0a4:	1884983a 	sll	r2,r3,r2
 401b0a8:	1444b03a 	or	r2,r2,r17
 401b0ac:	1004c03a 	cmpne	r2,r2,zero
 401b0b0:	40a2b03a 	or	r17,r8,r2
 401b0b4:	0005883a 	mov	r2,zero
 401b0b8:	003f8606 	br	401aed4 <__alt_mem_onchip_memory2_0+0xfc019c54>
 401b0bc:	0005883a 	mov	r2,zero
 401b0c0:	003fdc06 	br	401b034 <__alt_mem_onchip_memory2_0+0xfc019db4>
 401b0c4:	0005883a 	mov	r2,zero
 401b0c8:	003ff706 	br	401b0a8 <__alt_mem_onchip_memory2_0+0xfc019e28>

0401b0cc <__fixdfsi>:
 401b0cc:	280cd53a 	srli	r6,r5,20
 401b0d0:	00c00434 	movhi	r3,16
 401b0d4:	18ffffc4 	addi	r3,r3,-1
 401b0d8:	3181ffcc 	andi	r6,r6,2047
 401b0dc:	01c0ff84 	movi	r7,1022
 401b0e0:	28c6703a 	and	r3,r5,r3
 401b0e4:	280ad7fa 	srli	r5,r5,31
 401b0e8:	3980120e 	bge	r7,r6,401b134 <__fixdfsi+0x68>
 401b0ec:	00810744 	movi	r2,1053
 401b0f0:	11800c16 	blt	r2,r6,401b124 <__fixdfsi+0x58>
 401b0f4:	00810cc4 	movi	r2,1075
 401b0f8:	1185c83a 	sub	r2,r2,r6
 401b0fc:	01c007c4 	movi	r7,31
 401b100:	18c00434 	orhi	r3,r3,16
 401b104:	38800d16 	blt	r7,r2,401b13c <__fixdfsi+0x70>
 401b108:	31befb44 	addi	r6,r6,-1043
 401b10c:	2084d83a 	srl	r2,r4,r2
 401b110:	1986983a 	sll	r3,r3,r6
 401b114:	1884b03a 	or	r2,r3,r2
 401b118:	28000726 	beq	r5,zero,401b138 <__fixdfsi+0x6c>
 401b11c:	0085c83a 	sub	r2,zero,r2
 401b120:	f800283a 	ret
 401b124:	00a00034 	movhi	r2,32768
 401b128:	10bfffc4 	addi	r2,r2,-1
 401b12c:	2885883a 	add	r2,r5,r2
 401b130:	f800283a 	ret
 401b134:	0005883a 	mov	r2,zero
 401b138:	f800283a 	ret
 401b13c:	008104c4 	movi	r2,1043
 401b140:	1185c83a 	sub	r2,r2,r6
 401b144:	1884d83a 	srl	r2,r3,r2
 401b148:	003ff306 	br	401b118 <__alt_mem_onchip_memory2_0+0xfc019e98>

0401b14c <__floatsidf>:
 401b14c:	defffd04 	addi	sp,sp,-12
 401b150:	dfc00215 	stw	ra,8(sp)
 401b154:	dc400115 	stw	r17,4(sp)
 401b158:	dc000015 	stw	r16,0(sp)
 401b15c:	20002b26 	beq	r4,zero,401b20c <__floatsidf+0xc0>
 401b160:	2023883a 	mov	r17,r4
 401b164:	2020d7fa 	srli	r16,r4,31
 401b168:	20002d16 	blt	r4,zero,401b220 <__floatsidf+0xd4>
 401b16c:	8809883a 	mov	r4,r17
 401b170:	400e04c0 	call	400e04c <__clzsi2>
 401b174:	01410784 	movi	r5,1054
 401b178:	288bc83a 	sub	r5,r5,r2
 401b17c:	01010cc4 	movi	r4,1075
 401b180:	2149c83a 	sub	r4,r4,r5
 401b184:	00c007c4 	movi	r3,31
 401b188:	1900160e 	bge	r3,r4,401b1e4 <__floatsidf+0x98>
 401b18c:	00c104c4 	movi	r3,1043
 401b190:	1947c83a 	sub	r3,r3,r5
 401b194:	88c6983a 	sll	r3,r17,r3
 401b198:	00800434 	movhi	r2,16
 401b19c:	10bfffc4 	addi	r2,r2,-1
 401b1a0:	1886703a 	and	r3,r3,r2
 401b1a4:	2941ffcc 	andi	r5,r5,2047
 401b1a8:	800d883a 	mov	r6,r16
 401b1ac:	0005883a 	mov	r2,zero
 401b1b0:	280a953a 	slli	r5,r5,20
 401b1b4:	31803fcc 	andi	r6,r6,255
 401b1b8:	01000434 	movhi	r4,16
 401b1bc:	300c97fa 	slli	r6,r6,31
 401b1c0:	213fffc4 	addi	r4,r4,-1
 401b1c4:	1906703a 	and	r3,r3,r4
 401b1c8:	1946b03a 	or	r3,r3,r5
 401b1cc:	1986b03a 	or	r3,r3,r6
 401b1d0:	dfc00217 	ldw	ra,8(sp)
 401b1d4:	dc400117 	ldw	r17,4(sp)
 401b1d8:	dc000017 	ldw	r16,0(sp)
 401b1dc:	dec00304 	addi	sp,sp,12
 401b1e0:	f800283a 	ret
 401b1e4:	00c002c4 	movi	r3,11
 401b1e8:	1887c83a 	sub	r3,r3,r2
 401b1ec:	88c6d83a 	srl	r3,r17,r3
 401b1f0:	8904983a 	sll	r2,r17,r4
 401b1f4:	01000434 	movhi	r4,16
 401b1f8:	213fffc4 	addi	r4,r4,-1
 401b1fc:	2941ffcc 	andi	r5,r5,2047
 401b200:	1906703a 	and	r3,r3,r4
 401b204:	800d883a 	mov	r6,r16
 401b208:	003fe906 	br	401b1b0 <__alt_mem_onchip_memory2_0+0xfc019f30>
 401b20c:	000d883a 	mov	r6,zero
 401b210:	000b883a 	mov	r5,zero
 401b214:	0007883a 	mov	r3,zero
 401b218:	0005883a 	mov	r2,zero
 401b21c:	003fe406 	br	401b1b0 <__alt_mem_onchip_memory2_0+0xfc019f30>
 401b220:	0123c83a 	sub	r17,zero,r4
 401b224:	003fd106 	br	401b16c <__alt_mem_onchip_memory2_0+0xfc019eec>

0401b228 <__floatunsidf>:
 401b228:	defffe04 	addi	sp,sp,-8
 401b22c:	dc000015 	stw	r16,0(sp)
 401b230:	dfc00115 	stw	ra,4(sp)
 401b234:	2021883a 	mov	r16,r4
 401b238:	20002226 	beq	r4,zero,401b2c4 <__floatunsidf+0x9c>
 401b23c:	400e04c0 	call	400e04c <__clzsi2>
 401b240:	01010784 	movi	r4,1054
 401b244:	2089c83a 	sub	r4,r4,r2
 401b248:	01810cc4 	movi	r6,1075
 401b24c:	310dc83a 	sub	r6,r6,r4
 401b250:	00c007c4 	movi	r3,31
 401b254:	1980120e 	bge	r3,r6,401b2a0 <__floatunsidf+0x78>
 401b258:	00c104c4 	movi	r3,1043
 401b25c:	1907c83a 	sub	r3,r3,r4
 401b260:	80ca983a 	sll	r5,r16,r3
 401b264:	00800434 	movhi	r2,16
 401b268:	10bfffc4 	addi	r2,r2,-1
 401b26c:	2101ffcc 	andi	r4,r4,2047
 401b270:	0021883a 	mov	r16,zero
 401b274:	288a703a 	and	r5,r5,r2
 401b278:	2008953a 	slli	r4,r4,20
 401b27c:	00c00434 	movhi	r3,16
 401b280:	18ffffc4 	addi	r3,r3,-1
 401b284:	28c6703a 	and	r3,r5,r3
 401b288:	8005883a 	mov	r2,r16
 401b28c:	1906b03a 	or	r3,r3,r4
 401b290:	dfc00117 	ldw	ra,4(sp)
 401b294:	dc000017 	ldw	r16,0(sp)
 401b298:	dec00204 	addi	sp,sp,8
 401b29c:	f800283a 	ret
 401b2a0:	00c002c4 	movi	r3,11
 401b2a4:	188bc83a 	sub	r5,r3,r2
 401b2a8:	814ad83a 	srl	r5,r16,r5
 401b2ac:	00c00434 	movhi	r3,16
 401b2b0:	18ffffc4 	addi	r3,r3,-1
 401b2b4:	81a0983a 	sll	r16,r16,r6
 401b2b8:	2101ffcc 	andi	r4,r4,2047
 401b2bc:	28ca703a 	and	r5,r5,r3
 401b2c0:	003fed06 	br	401b278 <__alt_mem_onchip_memory2_0+0xfc019ff8>
 401b2c4:	0009883a 	mov	r4,zero
 401b2c8:	000b883a 	mov	r5,zero
 401b2cc:	003fea06 	br	401b278 <__alt_mem_onchip_memory2_0+0xfc019ff8>

0401b2d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b2d0:	defffe04 	addi	sp,sp,-8
 401b2d4:	dfc00115 	stw	ra,4(sp)
 401b2d8:	df000015 	stw	fp,0(sp)
 401b2dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b2e0:	d0a5b717 	ldw	r2,-26916(gp)
 401b2e4:	10000326 	beq	r2,zero,401b2f4 <alt_get_errno+0x24>
 401b2e8:	d0a5b717 	ldw	r2,-26916(gp)
 401b2ec:	103ee83a 	callr	r2
 401b2f0:	00000106 	br	401b2f8 <alt_get_errno+0x28>
 401b2f4:	d0b23f04 	addi	r2,gp,-14084
}
 401b2f8:	e037883a 	mov	sp,fp
 401b2fc:	dfc00117 	ldw	ra,4(sp)
 401b300:	df000017 	ldw	fp,0(sp)
 401b304:	dec00204 	addi	sp,sp,8
 401b308:	f800283a 	ret

0401b30c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 401b30c:	defffb04 	addi	sp,sp,-20
 401b310:	dfc00415 	stw	ra,16(sp)
 401b314:	df000315 	stw	fp,12(sp)
 401b318:	df000304 	addi	fp,sp,12
 401b31c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 401b320:	e0bfff17 	ldw	r2,-4(fp)
 401b324:	10000816 	blt	r2,zero,401b348 <close+0x3c>
 401b328:	01400304 	movi	r5,12
 401b32c:	e13fff17 	ldw	r4,-4(fp)
 401b330:	400cfd40 	call	400cfd4 <__mulsi3>
 401b334:	1007883a 	mov	r3,r2
 401b338:	008100b4 	movhi	r2,1026
 401b33c:	109e7404 	addi	r2,r2,31184
 401b340:	1885883a 	add	r2,r3,r2
 401b344:	00000106 	br	401b34c <close+0x40>
 401b348:	0005883a 	mov	r2,zero
 401b34c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 401b350:	e0bffd17 	ldw	r2,-12(fp)
 401b354:	10001926 	beq	r2,zero,401b3bc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 401b358:	e0bffd17 	ldw	r2,-12(fp)
 401b35c:	10800017 	ldw	r2,0(r2)
 401b360:	10800417 	ldw	r2,16(r2)
 401b364:	10000626 	beq	r2,zero,401b380 <close+0x74>
 401b368:	e0bffd17 	ldw	r2,-12(fp)
 401b36c:	10800017 	ldw	r2,0(r2)
 401b370:	10800417 	ldw	r2,16(r2)
 401b374:	e13ffd17 	ldw	r4,-12(fp)
 401b378:	103ee83a 	callr	r2
 401b37c:	00000106 	br	401b384 <close+0x78>
 401b380:	0005883a 	mov	r2,zero
 401b384:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 401b388:	e13fff17 	ldw	r4,-4(fp)
 401b38c:	401bbb40 	call	401bbb4 <alt_release_fd>
    if (rval < 0)
 401b390:	e0bffe17 	ldw	r2,-8(fp)
 401b394:	1000070e 	bge	r2,zero,401b3b4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 401b398:	401b2d00 	call	401b2d0 <alt_get_errno>
 401b39c:	1007883a 	mov	r3,r2
 401b3a0:	e0bffe17 	ldw	r2,-8(fp)
 401b3a4:	0085c83a 	sub	r2,zero,r2
 401b3a8:	18800015 	stw	r2,0(r3)
      return -1;
 401b3ac:	00bfffc4 	movi	r2,-1
 401b3b0:	00000706 	br	401b3d0 <close+0xc4>
    }
    return 0;
 401b3b4:	0005883a 	mov	r2,zero
 401b3b8:	00000506 	br	401b3d0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401b3bc:	401b2d00 	call	401b2d0 <alt_get_errno>
 401b3c0:	1007883a 	mov	r3,r2
 401b3c4:	00801444 	movi	r2,81
 401b3c8:	18800015 	stw	r2,0(r3)
    return -1;
 401b3cc:	00bfffc4 	movi	r2,-1
  }
}
 401b3d0:	e037883a 	mov	sp,fp
 401b3d4:	dfc00117 	ldw	ra,4(sp)
 401b3d8:	df000017 	ldw	fp,0(sp)
 401b3dc:	dec00204 	addi	sp,sp,8
 401b3e0:	f800283a 	ret

0401b3e4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 401b3e4:	defffc04 	addi	sp,sp,-16
 401b3e8:	df000315 	stw	fp,12(sp)
 401b3ec:	df000304 	addi	fp,sp,12
 401b3f0:	e13ffd15 	stw	r4,-12(fp)
 401b3f4:	e17ffe15 	stw	r5,-8(fp)
 401b3f8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 401b3fc:	e0bfff17 	ldw	r2,-4(fp)
}
 401b400:	e037883a 	mov	sp,fp
 401b404:	df000017 	ldw	fp,0(sp)
 401b408:	dec00104 	addi	sp,sp,4
 401b40c:	f800283a 	ret

0401b410 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401b410:	defffd04 	addi	sp,sp,-12
 401b414:	df000215 	stw	fp,8(sp)
 401b418:	df000204 	addi	fp,sp,8
 401b41c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401b420:	0001883a 	nop
 401b424:	e0bfff17 	ldw	r2,-4(fp)
 401b428:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 401b42c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401b430:	10000226 	beq	r2,zero,401b43c <_exit+0x2c>
    ALT_SIM_FAIL();
 401b434:	002af070 	cmpltui	zero,zero,43969
 401b438:	00000106 	br	401b440 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 401b43c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401b440:	003fff06 	br	401b440 <__alt_mem_onchip_memory2_0+0xfc01a1c0>

0401b444 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b444:	defffe04 	addi	sp,sp,-8
 401b448:	dfc00115 	stw	ra,4(sp)
 401b44c:	df000015 	stw	fp,0(sp)
 401b450:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b454:	d0a5b717 	ldw	r2,-26916(gp)
 401b458:	10000326 	beq	r2,zero,401b468 <alt_get_errno+0x24>
 401b45c:	d0a5b717 	ldw	r2,-26916(gp)
 401b460:	103ee83a 	callr	r2
 401b464:	00000106 	br	401b46c <alt_get_errno+0x28>
 401b468:	d0b23f04 	addi	r2,gp,-14084
}
 401b46c:	e037883a 	mov	sp,fp
 401b470:	dfc00117 	ldw	ra,4(sp)
 401b474:	df000017 	ldw	fp,0(sp)
 401b478:	dec00204 	addi	sp,sp,8
 401b47c:	f800283a 	ret

0401b480 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 401b480:	defffb04 	addi	sp,sp,-20
 401b484:	dfc00415 	stw	ra,16(sp)
 401b488:	df000315 	stw	fp,12(sp)
 401b48c:	df000304 	addi	fp,sp,12
 401b490:	e13ffe15 	stw	r4,-8(fp)
 401b494:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401b498:	e0bffe17 	ldw	r2,-8(fp)
 401b49c:	10000816 	blt	r2,zero,401b4c0 <fstat+0x40>
 401b4a0:	01400304 	movi	r5,12
 401b4a4:	e13ffe17 	ldw	r4,-8(fp)
 401b4a8:	400cfd40 	call	400cfd4 <__mulsi3>
 401b4ac:	1007883a 	mov	r3,r2
 401b4b0:	008100b4 	movhi	r2,1026
 401b4b4:	109e7404 	addi	r2,r2,31184
 401b4b8:	1885883a 	add	r2,r3,r2
 401b4bc:	00000106 	br	401b4c4 <fstat+0x44>
 401b4c0:	0005883a 	mov	r2,zero
 401b4c4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 401b4c8:	e0bffd17 	ldw	r2,-12(fp)
 401b4cc:	10001026 	beq	r2,zero,401b510 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 401b4d0:	e0bffd17 	ldw	r2,-12(fp)
 401b4d4:	10800017 	ldw	r2,0(r2)
 401b4d8:	10800817 	ldw	r2,32(r2)
 401b4dc:	10000726 	beq	r2,zero,401b4fc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 401b4e0:	e0bffd17 	ldw	r2,-12(fp)
 401b4e4:	10800017 	ldw	r2,0(r2)
 401b4e8:	10800817 	ldw	r2,32(r2)
 401b4ec:	e17fff17 	ldw	r5,-4(fp)
 401b4f0:	e13ffd17 	ldw	r4,-12(fp)
 401b4f4:	103ee83a 	callr	r2
 401b4f8:	00000a06 	br	401b524 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 401b4fc:	e0bfff17 	ldw	r2,-4(fp)
 401b500:	00c80004 	movi	r3,8192
 401b504:	10c00115 	stw	r3,4(r2)
      return 0;
 401b508:	0005883a 	mov	r2,zero
 401b50c:	00000506 	br	401b524 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401b510:	401b4440 	call	401b444 <alt_get_errno>
 401b514:	1007883a 	mov	r3,r2
 401b518:	00801444 	movi	r2,81
 401b51c:	18800015 	stw	r2,0(r3)
    return -1;
 401b520:	00bfffc4 	movi	r2,-1
  }
}
 401b524:	e037883a 	mov	sp,fp
 401b528:	dfc00117 	ldw	ra,4(sp)
 401b52c:	df000017 	ldw	fp,0(sp)
 401b530:	dec00204 	addi	sp,sp,8
 401b534:	f800283a 	ret

0401b538 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 401b538:	deffff04 	addi	sp,sp,-4
 401b53c:	df000015 	stw	fp,0(sp)
 401b540:	d839883a 	mov	fp,sp
  return 0;
 401b544:	0005883a 	mov	r2,zero
}
 401b548:	e037883a 	mov	sp,fp
 401b54c:	df000017 	ldw	fp,0(sp)
 401b550:	dec00104 	addi	sp,sp,4
 401b554:	f800283a 	ret

0401b558 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b558:	defffe04 	addi	sp,sp,-8
 401b55c:	dfc00115 	stw	ra,4(sp)
 401b560:	df000015 	stw	fp,0(sp)
 401b564:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b568:	d0a5b717 	ldw	r2,-26916(gp)
 401b56c:	10000326 	beq	r2,zero,401b57c <alt_get_errno+0x24>
 401b570:	d0a5b717 	ldw	r2,-26916(gp)
 401b574:	103ee83a 	callr	r2
 401b578:	00000106 	br	401b580 <alt_get_errno+0x28>
 401b57c:	d0b23f04 	addi	r2,gp,-14084
}
 401b580:	e037883a 	mov	sp,fp
 401b584:	dfc00117 	ldw	ra,4(sp)
 401b588:	df000017 	ldw	fp,0(sp)
 401b58c:	dec00204 	addi	sp,sp,8
 401b590:	f800283a 	ret

0401b594 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 401b594:	deffed04 	addi	sp,sp,-76
 401b598:	dfc01215 	stw	ra,72(sp)
 401b59c:	df001115 	stw	fp,68(sp)
 401b5a0:	df001104 	addi	fp,sp,68
 401b5a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401b5a8:	e0bfff17 	ldw	r2,-4(fp)
 401b5ac:	10000816 	blt	r2,zero,401b5d0 <isatty+0x3c>
 401b5b0:	01400304 	movi	r5,12
 401b5b4:	e13fff17 	ldw	r4,-4(fp)
 401b5b8:	400cfd40 	call	400cfd4 <__mulsi3>
 401b5bc:	1007883a 	mov	r3,r2
 401b5c0:	008100b4 	movhi	r2,1026
 401b5c4:	109e7404 	addi	r2,r2,31184
 401b5c8:	1885883a 	add	r2,r3,r2
 401b5cc:	00000106 	br	401b5d4 <isatty+0x40>
 401b5d0:	0005883a 	mov	r2,zero
 401b5d4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 401b5d8:	e0bfef17 	ldw	r2,-68(fp)
 401b5dc:	10000e26 	beq	r2,zero,401b618 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 401b5e0:	e0bfef17 	ldw	r2,-68(fp)
 401b5e4:	10800017 	ldw	r2,0(r2)
 401b5e8:	10800817 	ldw	r2,32(r2)
 401b5ec:	1000021e 	bne	r2,zero,401b5f8 <isatty+0x64>
    {
      return 1;
 401b5f0:	00800044 	movi	r2,1
 401b5f4:	00000d06 	br	401b62c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 401b5f8:	e0bff004 	addi	r2,fp,-64
 401b5fc:	100b883a 	mov	r5,r2
 401b600:	e13fff17 	ldw	r4,-4(fp)
 401b604:	401b4800 	call	401b480 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 401b608:	e0bff117 	ldw	r2,-60(fp)
 401b60c:	10880020 	cmpeqi	r2,r2,8192
 401b610:	10803fcc 	andi	r2,r2,255
 401b614:	00000506 	br	401b62c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401b618:	401b5580 	call	401b558 <alt_get_errno>
 401b61c:	1007883a 	mov	r3,r2
 401b620:	00801444 	movi	r2,81
 401b624:	18800015 	stw	r2,0(r3)
    return 0;
 401b628:	0005883a 	mov	r2,zero
  }
}
 401b62c:	e037883a 	mov	sp,fp
 401b630:	dfc00117 	ldw	ra,4(sp)
 401b634:	df000017 	ldw	fp,0(sp)
 401b638:	dec00204 	addi	sp,sp,8
 401b63c:	f800283a 	ret

0401b640 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b640:	defffe04 	addi	sp,sp,-8
 401b644:	dfc00115 	stw	ra,4(sp)
 401b648:	df000015 	stw	fp,0(sp)
 401b64c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b650:	d0a5b717 	ldw	r2,-26916(gp)
 401b654:	10000326 	beq	r2,zero,401b664 <alt_get_errno+0x24>
 401b658:	d0a5b717 	ldw	r2,-26916(gp)
 401b65c:	103ee83a 	callr	r2
 401b660:	00000106 	br	401b668 <alt_get_errno+0x28>
 401b664:	d0b23f04 	addi	r2,gp,-14084
}
 401b668:	e037883a 	mov	sp,fp
 401b66c:	dfc00117 	ldw	ra,4(sp)
 401b670:	df000017 	ldw	fp,0(sp)
 401b674:	dec00204 	addi	sp,sp,8
 401b678:	f800283a 	ret

0401b67c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 401b67c:	defffb04 	addi	sp,sp,-20
 401b680:	dfc00415 	stw	ra,16(sp)
 401b684:	df000315 	stw	fp,12(sp)
 401b688:	df000304 	addi	fp,sp,12
 401b68c:	e13ffe15 	stw	r4,-8(fp)
 401b690:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 401b694:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 401b698:	e0bffe17 	ldw	r2,-8(fp)
 401b69c:	00802f16 	blt	zero,r2,401b75c <kill+0xe0>
  {
    switch (sig)
 401b6a0:	e0bfff17 	ldw	r2,-4(fp)
 401b6a4:	10800828 	cmpgeui	r2,r2,32
 401b6a8:	1000291e 	bne	r2,zero,401b750 <kill+0xd4>
 401b6ac:	e0bfff17 	ldw	r2,-4(fp)
 401b6b0:	100690ba 	slli	r3,r2,2
 401b6b4:	008100b4 	movhi	r2,1026
 401b6b8:	10adb204 	addi	r2,r2,-18744
 401b6bc:	1885883a 	add	r2,r3,r2
 401b6c0:	10800017 	ldw	r2,0(r2)
 401b6c4:	1000683a 	jmp	r2
 401b6c8:	0401b770 	cmpltui	r16,zero,1757
 401b6cc:	0401b750 	cmplti	r16,zero,1757
 401b6d0:	0401b750 	cmplti	r16,zero,1757
 401b6d4:	0401b748 	cmpgei	r16,zero,1757
 401b6d8:	0401b748 	cmpgei	r16,zero,1757
 401b6dc:	0401b748 	cmpgei	r16,zero,1757
 401b6e0:	0401b748 	cmpgei	r16,zero,1757
 401b6e4:	0401b750 	cmplti	r16,zero,1757
 401b6e8:	0401b748 	cmpgei	r16,zero,1757
 401b6ec:	0401b748 	cmpgei	r16,zero,1757
 401b6f0:	0401b748 	cmpgei	r16,zero,1757
 401b6f4:	0401b748 	cmpgei	r16,zero,1757
 401b6f8:	0401b748 	cmpgei	r16,zero,1757
 401b6fc:	0401b748 	cmpgei	r16,zero,1757
 401b700:	0401b748 	cmpgei	r16,zero,1757
 401b704:	0401b748 	cmpgei	r16,zero,1757
 401b708:	0401b770 	cmpltui	r16,zero,1757
 401b70c:	0401b750 	cmplti	r16,zero,1757
 401b710:	0401b750 	cmplti	r16,zero,1757
 401b714:	0401b750 	cmplti	r16,zero,1757
 401b718:	0401b770 	cmpltui	r16,zero,1757
 401b71c:	0401b750 	cmplti	r16,zero,1757
 401b720:	0401b750 	cmplti	r16,zero,1757
 401b724:	0401b748 	cmpgei	r16,zero,1757
 401b728:	0401b748 	cmpgei	r16,zero,1757
 401b72c:	0401b748 	cmpgei	r16,zero,1757
 401b730:	0401b748 	cmpgei	r16,zero,1757
 401b734:	0401b748 	cmpgei	r16,zero,1757
 401b738:	0401b750 	cmplti	r16,zero,1757
 401b73c:	0401b750 	cmplti	r16,zero,1757
 401b740:	0401b748 	cmpgei	r16,zero,1757
 401b744:	0401b748 	cmpgei	r16,zero,1757
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 401b748:	0009883a 	mov	r4,zero
 401b74c:	401b4100 	call	401b410 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 401b750:	00800584 	movi	r2,22
 401b754:	e0bffd15 	stw	r2,-12(fp)
 401b758:	00000606 	br	401b774 <kill+0xf8>
    }
  }

  else if (pid > 0)
 401b75c:	e0bffe17 	ldw	r2,-8(fp)
 401b760:	0080040e 	bge	zero,r2,401b774 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 401b764:	008000c4 	movi	r2,3
 401b768:	e0bffd15 	stw	r2,-12(fp)
 401b76c:	00000106 	br	401b774 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 401b770:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 401b774:	e0bffd17 	ldw	r2,-12(fp)
 401b778:	10000626 	beq	r2,zero,401b794 <kill+0x118>
  {
    ALT_ERRNO = status;
 401b77c:	401b6400 	call	401b640 <alt_get_errno>
 401b780:	1007883a 	mov	r3,r2
 401b784:	e0bffd17 	ldw	r2,-12(fp)
 401b788:	18800015 	stw	r2,0(r3)
    return -1;
 401b78c:	00bfffc4 	movi	r2,-1
 401b790:	00000106 	br	401b798 <kill+0x11c>
  }

  return 0;
 401b794:	0005883a 	mov	r2,zero
}
 401b798:	e037883a 	mov	sp,fp
 401b79c:	dfc00117 	ldw	ra,4(sp)
 401b7a0:	df000017 	ldw	fp,0(sp)
 401b7a4:	dec00204 	addi	sp,sp,8
 401b7a8:	f800283a 	ret

0401b7ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 401b7ac:	defffc04 	addi	sp,sp,-16
 401b7b0:	df000315 	stw	fp,12(sp)
 401b7b4:	df000304 	addi	fp,sp,12
 401b7b8:	e13ffd15 	stw	r4,-12(fp)
 401b7bc:	e17ffe15 	stw	r5,-8(fp)
 401b7c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 401b7c4:	e0fffe17 	ldw	r3,-8(fp)
 401b7c8:	e0bffd17 	ldw	r2,-12(fp)
 401b7cc:	18800c26 	beq	r3,r2,401b800 <alt_load_section+0x54>
  {
    while( to != end )
 401b7d0:	00000806 	br	401b7f4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 401b7d4:	e0bffe17 	ldw	r2,-8(fp)
 401b7d8:	10c00104 	addi	r3,r2,4
 401b7dc:	e0fffe15 	stw	r3,-8(fp)
 401b7e0:	e0fffd17 	ldw	r3,-12(fp)
 401b7e4:	19000104 	addi	r4,r3,4
 401b7e8:	e13ffd15 	stw	r4,-12(fp)
 401b7ec:	18c00017 	ldw	r3,0(r3)
 401b7f0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 401b7f4:	e0fffe17 	ldw	r3,-8(fp)
 401b7f8:	e0bfff17 	ldw	r2,-4(fp)
 401b7fc:	18bff51e 	bne	r3,r2,401b7d4 <__alt_mem_onchip_memory2_0+0xfc01a554>
    {
      *to++ = *from++;
    }
  }
}
 401b800:	0001883a 	nop
 401b804:	e037883a 	mov	sp,fp
 401b808:	df000017 	ldw	fp,0(sp)
 401b80c:	dec00104 	addi	sp,sp,4
 401b810:	f800283a 	ret

0401b814 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 401b814:	defffe04 	addi	sp,sp,-8
 401b818:	dfc00115 	stw	ra,4(sp)
 401b81c:	df000015 	stw	fp,0(sp)
 401b820:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 401b824:	018100f4 	movhi	r6,1027
 401b828:	31a8b804 	addi	r6,r6,-23840
 401b82c:	014100b4 	movhi	r5,1026
 401b830:	295c4104 	addi	r5,r5,28932
 401b834:	010100f4 	movhi	r4,1027
 401b838:	2128b804 	addi	r4,r4,-23840
 401b83c:	401b7ac0 	call	401b7ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 401b840:	01810034 	movhi	r6,1024
 401b844:	31808c04 	addi	r6,r6,560
 401b848:	01410034 	movhi	r5,1024
 401b84c:	29400804 	addi	r5,r5,32
 401b850:	01010034 	movhi	r4,1024
 401b854:	21000804 	addi	r4,r4,32
 401b858:	401b7ac0 	call	401b7ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 401b85c:	018100b4 	movhi	r6,1026
 401b860:	319c4104 	addi	r6,r6,28932
 401b864:	014100b4 	movhi	r5,1026
 401b868:	297fc204 	addi	r5,r5,-248
 401b86c:	010100b4 	movhi	r4,1026
 401b870:	213fc204 	addi	r4,r4,-248
 401b874:	401b7ac0 	call	401b7ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 401b878:	401ebdc0 	call	401ebdc <alt_dcache_flush_all>
  alt_icache_flush_all();
 401b87c:	401ee2c0 	call	401ee2c <alt_icache_flush_all>
}
 401b880:	0001883a 	nop
 401b884:	e037883a 	mov	sp,fp
 401b888:	dfc00117 	ldw	ra,4(sp)
 401b88c:	df000017 	ldw	fp,0(sp)
 401b890:	dec00204 	addi	sp,sp,8
 401b894:	f800283a 	ret

0401b898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b898:	defffe04 	addi	sp,sp,-8
 401b89c:	dfc00115 	stw	ra,4(sp)
 401b8a0:	df000015 	stw	fp,0(sp)
 401b8a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b8a8:	d0a5b717 	ldw	r2,-26916(gp)
 401b8ac:	10000326 	beq	r2,zero,401b8bc <alt_get_errno+0x24>
 401b8b0:	d0a5b717 	ldw	r2,-26916(gp)
 401b8b4:	103ee83a 	callr	r2
 401b8b8:	00000106 	br	401b8c0 <alt_get_errno+0x28>
 401b8bc:	d0b23f04 	addi	r2,gp,-14084
}
 401b8c0:	e037883a 	mov	sp,fp
 401b8c4:	dfc00117 	ldw	ra,4(sp)
 401b8c8:	df000017 	ldw	fp,0(sp)
 401b8cc:	dec00204 	addi	sp,sp,8
 401b8d0:	f800283a 	ret

0401b8d4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 401b8d4:	defff904 	addi	sp,sp,-28
 401b8d8:	dfc00615 	stw	ra,24(sp)
 401b8dc:	df000515 	stw	fp,20(sp)
 401b8e0:	df000504 	addi	fp,sp,20
 401b8e4:	e13ffd15 	stw	r4,-12(fp)
 401b8e8:	e17ffe15 	stw	r5,-8(fp)
 401b8ec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 401b8f0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401b8f4:	e0bffd17 	ldw	r2,-12(fp)
 401b8f8:	10000816 	blt	r2,zero,401b91c <lseek+0x48>
 401b8fc:	01400304 	movi	r5,12
 401b900:	e13ffd17 	ldw	r4,-12(fp)
 401b904:	400cfd40 	call	400cfd4 <__mulsi3>
 401b908:	1007883a 	mov	r3,r2
 401b90c:	008100b4 	movhi	r2,1026
 401b910:	109e7404 	addi	r2,r2,31184
 401b914:	1885883a 	add	r2,r3,r2
 401b918:	00000106 	br	401b920 <lseek+0x4c>
 401b91c:	0005883a 	mov	r2,zero
 401b920:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 401b924:	e0bffc17 	ldw	r2,-16(fp)
 401b928:	10001026 	beq	r2,zero,401b96c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 401b92c:	e0bffc17 	ldw	r2,-16(fp)
 401b930:	10800017 	ldw	r2,0(r2)
 401b934:	10800717 	ldw	r2,28(r2)
 401b938:	10000926 	beq	r2,zero,401b960 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 401b93c:	e0bffc17 	ldw	r2,-16(fp)
 401b940:	10800017 	ldw	r2,0(r2)
 401b944:	10800717 	ldw	r2,28(r2)
 401b948:	e1bfff17 	ldw	r6,-4(fp)
 401b94c:	e17ffe17 	ldw	r5,-8(fp)
 401b950:	e13ffc17 	ldw	r4,-16(fp)
 401b954:	103ee83a 	callr	r2
 401b958:	e0bffb15 	stw	r2,-20(fp)
 401b95c:	00000506 	br	401b974 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 401b960:	00bfde84 	movi	r2,-134
 401b964:	e0bffb15 	stw	r2,-20(fp)
 401b968:	00000206 	br	401b974 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 401b96c:	00bfebc4 	movi	r2,-81
 401b970:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 401b974:	e0bffb17 	ldw	r2,-20(fp)
 401b978:	1000070e 	bge	r2,zero,401b998 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 401b97c:	401b8980 	call	401b898 <alt_get_errno>
 401b980:	1007883a 	mov	r3,r2
 401b984:	e0bffb17 	ldw	r2,-20(fp)
 401b988:	0085c83a 	sub	r2,zero,r2
 401b98c:	18800015 	stw	r2,0(r3)
    rc = -1;
 401b990:	00bfffc4 	movi	r2,-1
 401b994:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 401b998:	e0bffb17 	ldw	r2,-20(fp)
}
 401b99c:	e037883a 	mov	sp,fp
 401b9a0:	dfc00117 	ldw	ra,4(sp)
 401b9a4:	df000017 	ldw	fp,0(sp)
 401b9a8:	dec00204 	addi	sp,sp,8
 401b9ac:	f800283a 	ret

0401b9b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 401b9b0:	defffd04 	addi	sp,sp,-12
 401b9b4:	dfc00215 	stw	ra,8(sp)
 401b9b8:	df000115 	stw	fp,4(sp)
 401b9bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 401b9c0:	0009883a 	mov	r4,zero
 401b9c4:	401bf3c0 	call	401bf3c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 401b9c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 401b9cc:	401bf740 	call	401bf74 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 401b9d0:	018100b4 	movhi	r6,1026
 401b9d4:	319c2c04 	addi	r6,r6,28848
 401b9d8:	014100b4 	movhi	r5,1026
 401b9dc:	295c2c04 	addi	r5,r5,28848
 401b9e0:	010100b4 	movhi	r4,1026
 401b9e4:	211c2c04 	addi	r4,r4,28848
 401b9e8:	401f1d00 	call	401f1d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 401b9ec:	401ecdc0 	call	401ecdc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 401b9f0:	010100b4 	movhi	r4,1026
 401b9f4:	213b4f04 	addi	r4,r4,-4804
 401b9f8:	401fb680 	call	401fb68 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 401b9fc:	d0b24317 	ldw	r2,-14068(gp)
 401ba00:	d0f24417 	ldw	r3,-14064(gp)
 401ba04:	d1324517 	ldw	r4,-14060(gp)
 401ba08:	200d883a 	mov	r6,r4
 401ba0c:	180b883a 	mov	r5,r3
 401ba10:	1009883a 	mov	r4,r2
 401ba14:	4009dbc0 	call	4009dbc <main>
 401ba18:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 401ba1c:	01000044 	movi	r4,1
 401ba20:	401b30c0 	call	401b30c <close>
  exit (result);
 401ba24:	e13fff17 	ldw	r4,-4(fp)
 401ba28:	401fb7c0 	call	401fb7c <exit>

0401ba2c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 401ba2c:	defffe04 	addi	sp,sp,-8
 401ba30:	df000115 	stw	fp,4(sp)
 401ba34:	df000104 	addi	fp,sp,4
 401ba38:	e13fff15 	stw	r4,-4(fp)
}
 401ba3c:	0001883a 	nop
 401ba40:	e037883a 	mov	sp,fp
 401ba44:	df000017 	ldw	fp,0(sp)
 401ba48:	dec00104 	addi	sp,sp,4
 401ba4c:	f800283a 	ret

0401ba50 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 401ba50:	defffe04 	addi	sp,sp,-8
 401ba54:	df000115 	stw	fp,4(sp)
 401ba58:	df000104 	addi	fp,sp,4
 401ba5c:	e13fff15 	stw	r4,-4(fp)
}
 401ba60:	0001883a 	nop
 401ba64:	e037883a 	mov	sp,fp
 401ba68:	df000017 	ldw	fp,0(sp)
 401ba6c:	dec00104 	addi	sp,sp,4
 401ba70:	f800283a 	ret

0401ba74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401ba74:	defffe04 	addi	sp,sp,-8
 401ba78:	dfc00115 	stw	ra,4(sp)
 401ba7c:	df000015 	stw	fp,0(sp)
 401ba80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401ba84:	d0a5b717 	ldw	r2,-26916(gp)
 401ba88:	10000326 	beq	r2,zero,401ba98 <alt_get_errno+0x24>
 401ba8c:	d0a5b717 	ldw	r2,-26916(gp)
 401ba90:	103ee83a 	callr	r2
 401ba94:	00000106 	br	401ba9c <alt_get_errno+0x28>
 401ba98:	d0b23f04 	addi	r2,gp,-14084
}
 401ba9c:	e037883a 	mov	sp,fp
 401baa0:	dfc00117 	ldw	ra,4(sp)
 401baa4:	df000017 	ldw	fp,0(sp)
 401baa8:	dec00204 	addi	sp,sp,8
 401baac:	f800283a 	ret

0401bab0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 401bab0:	defff904 	addi	sp,sp,-28
 401bab4:	dfc00615 	stw	ra,24(sp)
 401bab8:	df000515 	stw	fp,20(sp)
 401babc:	df000504 	addi	fp,sp,20
 401bac0:	e13ffd15 	stw	r4,-12(fp)
 401bac4:	e17ffe15 	stw	r5,-8(fp)
 401bac8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401bacc:	e0bffd17 	ldw	r2,-12(fp)
 401bad0:	10000816 	blt	r2,zero,401baf4 <read+0x44>
 401bad4:	01400304 	movi	r5,12
 401bad8:	e13ffd17 	ldw	r4,-12(fp)
 401badc:	400cfd40 	call	400cfd4 <__mulsi3>
 401bae0:	1007883a 	mov	r3,r2
 401bae4:	008100b4 	movhi	r2,1026
 401bae8:	109e7404 	addi	r2,r2,31184
 401baec:	1885883a 	add	r2,r3,r2
 401baf0:	00000106 	br	401baf8 <read+0x48>
 401baf4:	0005883a 	mov	r2,zero
 401baf8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401bafc:	e0bffb17 	ldw	r2,-20(fp)
 401bb00:	10002226 	beq	r2,zero,401bb8c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401bb04:	e0bffb17 	ldw	r2,-20(fp)
 401bb08:	10800217 	ldw	r2,8(r2)
 401bb0c:	108000cc 	andi	r2,r2,3
 401bb10:	10800060 	cmpeqi	r2,r2,1
 401bb14:	1000181e 	bne	r2,zero,401bb78 <read+0xc8>
        (fd->dev->read))
 401bb18:	e0bffb17 	ldw	r2,-20(fp)
 401bb1c:	10800017 	ldw	r2,0(r2)
 401bb20:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401bb24:	10001426 	beq	r2,zero,401bb78 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 401bb28:	e0bffb17 	ldw	r2,-20(fp)
 401bb2c:	10800017 	ldw	r2,0(r2)
 401bb30:	10800517 	ldw	r2,20(r2)
 401bb34:	e0ffff17 	ldw	r3,-4(fp)
 401bb38:	180d883a 	mov	r6,r3
 401bb3c:	e17ffe17 	ldw	r5,-8(fp)
 401bb40:	e13ffb17 	ldw	r4,-20(fp)
 401bb44:	103ee83a 	callr	r2
 401bb48:	e0bffc15 	stw	r2,-16(fp)
 401bb4c:	e0bffc17 	ldw	r2,-16(fp)
 401bb50:	1000070e 	bge	r2,zero,401bb70 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 401bb54:	401ba740 	call	401ba74 <alt_get_errno>
 401bb58:	1007883a 	mov	r3,r2
 401bb5c:	e0bffc17 	ldw	r2,-16(fp)
 401bb60:	0085c83a 	sub	r2,zero,r2
 401bb64:	18800015 	stw	r2,0(r3)
          return -1;
 401bb68:	00bfffc4 	movi	r2,-1
 401bb6c:	00000c06 	br	401bba0 <read+0xf0>
        }
        return rval;
 401bb70:	e0bffc17 	ldw	r2,-16(fp)
 401bb74:	00000a06 	br	401bba0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 401bb78:	401ba740 	call	401ba74 <alt_get_errno>
 401bb7c:	1007883a 	mov	r3,r2
 401bb80:	00800344 	movi	r2,13
 401bb84:	18800015 	stw	r2,0(r3)
 401bb88:	00000406 	br	401bb9c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 401bb8c:	401ba740 	call	401ba74 <alt_get_errno>
 401bb90:	1007883a 	mov	r3,r2
 401bb94:	00801444 	movi	r2,81
 401bb98:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401bb9c:	00bfffc4 	movi	r2,-1
}
 401bba0:	e037883a 	mov	sp,fp
 401bba4:	dfc00117 	ldw	ra,4(sp)
 401bba8:	df000017 	ldw	fp,0(sp)
 401bbac:	dec00204 	addi	sp,sp,8
 401bbb0:	f800283a 	ret

0401bbb4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 401bbb4:	defffc04 	addi	sp,sp,-16
 401bbb8:	dfc00315 	stw	ra,12(sp)
 401bbbc:	df000215 	stw	fp,8(sp)
 401bbc0:	dc000115 	stw	r16,4(sp)
 401bbc4:	df000204 	addi	fp,sp,8
 401bbc8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 401bbcc:	e0bffe17 	ldw	r2,-8(fp)
 401bbd0:	108000d0 	cmplti	r2,r2,3
 401bbd4:	1000111e 	bne	r2,zero,401bc1c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 401bbd8:	040100b4 	movhi	r16,1026
 401bbdc:	841e7404 	addi	r16,r16,31184
 401bbe0:	e0bffe17 	ldw	r2,-8(fp)
 401bbe4:	01400304 	movi	r5,12
 401bbe8:	1009883a 	mov	r4,r2
 401bbec:	400cfd40 	call	400cfd4 <__mulsi3>
 401bbf0:	8085883a 	add	r2,r16,r2
 401bbf4:	10800204 	addi	r2,r2,8
 401bbf8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 401bbfc:	040100b4 	movhi	r16,1026
 401bc00:	841e7404 	addi	r16,r16,31184
 401bc04:	e0bffe17 	ldw	r2,-8(fp)
 401bc08:	01400304 	movi	r5,12
 401bc0c:	1009883a 	mov	r4,r2
 401bc10:	400cfd40 	call	400cfd4 <__mulsi3>
 401bc14:	8085883a 	add	r2,r16,r2
 401bc18:	10000015 	stw	zero,0(r2)
  }
}
 401bc1c:	0001883a 	nop
 401bc20:	e6ffff04 	addi	sp,fp,-4
 401bc24:	dfc00217 	ldw	ra,8(sp)
 401bc28:	df000117 	ldw	fp,4(sp)
 401bc2c:	dc000017 	ldw	r16,0(sp)
 401bc30:	dec00304 	addi	sp,sp,12
 401bc34:	f800283a 	ret

0401bc38 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 401bc38:	defff904 	addi	sp,sp,-28
 401bc3c:	df000615 	stw	fp,24(sp)
 401bc40:	df000604 	addi	fp,sp,24
 401bc44:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401bc48:	0005303a 	rdctl	r2,status
 401bc4c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401bc50:	e0fffe17 	ldw	r3,-8(fp)
 401bc54:	00bfff84 	movi	r2,-2
 401bc58:	1884703a 	and	r2,r3,r2
 401bc5c:	1001703a 	wrctl	status,r2
  
  return context;
 401bc60:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 401bc64:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 401bc68:	d0a5b817 	ldw	r2,-26912(gp)
 401bc6c:	10c000c4 	addi	r3,r2,3
 401bc70:	00bfff04 	movi	r2,-4
 401bc74:	1884703a 	and	r2,r3,r2
 401bc78:	d0a5b815 	stw	r2,-26912(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 401bc7c:	d0e5b817 	ldw	r3,-26912(gp)
 401bc80:	e0bfff17 	ldw	r2,-4(fp)
 401bc84:	1887883a 	add	r3,r3,r2
 401bc88:	00820034 	movhi	r2,2048
 401bc8c:	10800004 	addi	r2,r2,0
 401bc90:	10c0062e 	bgeu	r2,r3,401bcac <sbrk+0x74>
 401bc94:	e0bffb17 	ldw	r2,-20(fp)
 401bc98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401bc9c:	e0bffa17 	ldw	r2,-24(fp)
 401bca0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 401bca4:	00bfffc4 	movi	r2,-1
 401bca8:	00000b06 	br	401bcd8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 401bcac:	d0a5b817 	ldw	r2,-26912(gp)
 401bcb0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 401bcb4:	d0e5b817 	ldw	r3,-26912(gp)
 401bcb8:	e0bfff17 	ldw	r2,-4(fp)
 401bcbc:	1885883a 	add	r2,r3,r2
 401bcc0:	d0a5b815 	stw	r2,-26912(gp)
 401bcc4:	e0bffb17 	ldw	r2,-20(fp)
 401bcc8:	e0bffc15 	stw	r2,-16(fp)
 401bccc:	e0bffc17 	ldw	r2,-16(fp)
 401bcd0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 401bcd4:	e0bffd17 	ldw	r2,-12(fp)
} 
 401bcd8:	e037883a 	mov	sp,fp
 401bcdc:	df000017 	ldw	fp,0(sp)
 401bce0:	dec00104 	addi	sp,sp,4
 401bce4:	f800283a 	ret

0401bce8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401bce8:	defffe04 	addi	sp,sp,-8
 401bcec:	dfc00115 	stw	ra,4(sp)
 401bcf0:	df000015 	stw	fp,0(sp)
 401bcf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401bcf8:	d0a5b717 	ldw	r2,-26916(gp)
 401bcfc:	10000326 	beq	r2,zero,401bd0c <alt_get_errno+0x24>
 401bd00:	d0a5b717 	ldw	r2,-26916(gp)
 401bd04:	103ee83a 	callr	r2
 401bd08:	00000106 	br	401bd10 <alt_get_errno+0x28>
 401bd0c:	d0b23f04 	addi	r2,gp,-14084
}
 401bd10:	e037883a 	mov	sp,fp
 401bd14:	dfc00117 	ldw	ra,4(sp)
 401bd18:	df000017 	ldw	fp,0(sp)
 401bd1c:	dec00204 	addi	sp,sp,8
 401bd20:	f800283a 	ret

0401bd24 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 401bd24:	defffc04 	addi	sp,sp,-16
 401bd28:	dfc00315 	stw	ra,12(sp)
 401bd2c:	df000215 	stw	fp,8(sp)
 401bd30:	df000204 	addi	fp,sp,8
 401bd34:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401bd38:	d0b24817 	ldw	r2,-14048(gp)
  clock_t ticks = alt_nticks(); 
 401bd3c:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401bd40:	d0b24717 	ldw	r2,-14052(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 401bd44:	1000061e 	bne	r2,zero,401bd60 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
 401bd48:	401bce80 	call	401bce8 <alt_get_errno>
 401bd4c:	1007883a 	mov	r3,r2
 401bd50:	00801604 	movi	r2,88
 401bd54:	18800015 	stw	r2,0(r3)
    return 0;
 401bd58:	0005883a 	mov	r2,zero
 401bd5c:	00000a06 	br	401bd88 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 401bd60:	e0bfff17 	ldw	r2,-4(fp)
 401bd64:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 401bd68:	e0bfff17 	ldw	r2,-4(fp)
 401bd6c:	e0fffe17 	ldw	r3,-8(fp)
 401bd70:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 401bd74:	e0bfff17 	ldw	r2,-4(fp)
 401bd78:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 401bd7c:	e0bfff17 	ldw	r2,-4(fp)
 401bd80:	10000315 	stw	zero,12(r2)

  return ticks;
 401bd84:	e0bffe17 	ldw	r2,-8(fp)
}
 401bd88:	e037883a 	mov	sp,fp
 401bd8c:	dfc00117 	ldw	ra,4(sp)
 401bd90:	df000017 	ldw	fp,0(sp)
 401bd94:	dec00204 	addi	sp,sp,8
 401bd98:	f800283a 	ret

0401bd9c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 401bd9c:	defffd04 	addi	sp,sp,-12
 401bda0:	dfc00215 	stw	ra,8(sp)
 401bda4:	df000115 	stw	fp,4(sp)
 401bda8:	df000104 	addi	fp,sp,4
 401bdac:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 401bdb0:	e13fff17 	ldw	r4,-4(fp)
 401bdb4:	401ea840 	call	401ea84 <alt_busy_sleep>
}
 401bdb8:	e037883a 	mov	sp,fp
 401bdbc:	dfc00117 	ldw	ra,4(sp)
 401bdc0:	df000017 	ldw	fp,0(sp)
 401bdc4:	dec00204 	addi	sp,sp,8
 401bdc8:	f800283a 	ret

0401bdcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401bdcc:	defffe04 	addi	sp,sp,-8
 401bdd0:	dfc00115 	stw	ra,4(sp)
 401bdd4:	df000015 	stw	fp,0(sp)
 401bdd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401bddc:	d0a5b717 	ldw	r2,-26916(gp)
 401bde0:	10000326 	beq	r2,zero,401bdf0 <alt_get_errno+0x24>
 401bde4:	d0a5b717 	ldw	r2,-26916(gp)
 401bde8:	103ee83a 	callr	r2
 401bdec:	00000106 	br	401bdf4 <alt_get_errno+0x28>
 401bdf0:	d0b23f04 	addi	r2,gp,-14084
}
 401bdf4:	e037883a 	mov	sp,fp
 401bdf8:	dfc00117 	ldw	ra,4(sp)
 401bdfc:	df000017 	ldw	fp,0(sp)
 401be00:	dec00204 	addi	sp,sp,8
 401be04:	f800283a 	ret

0401be08 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 401be08:	defff904 	addi	sp,sp,-28
 401be0c:	dfc00615 	stw	ra,24(sp)
 401be10:	df000515 	stw	fp,20(sp)
 401be14:	df000504 	addi	fp,sp,20
 401be18:	e13ffd15 	stw	r4,-12(fp)
 401be1c:	e17ffe15 	stw	r5,-8(fp)
 401be20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401be24:	e0bffd17 	ldw	r2,-12(fp)
 401be28:	10000816 	blt	r2,zero,401be4c <write+0x44>
 401be2c:	01400304 	movi	r5,12
 401be30:	e13ffd17 	ldw	r4,-12(fp)
 401be34:	400cfd40 	call	400cfd4 <__mulsi3>
 401be38:	1007883a 	mov	r3,r2
 401be3c:	008100b4 	movhi	r2,1026
 401be40:	109e7404 	addi	r2,r2,31184
 401be44:	1885883a 	add	r2,r3,r2
 401be48:	00000106 	br	401be50 <write+0x48>
 401be4c:	0005883a 	mov	r2,zero
 401be50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401be54:	e0bffb17 	ldw	r2,-20(fp)
 401be58:	10002126 	beq	r2,zero,401bee0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 401be5c:	e0bffb17 	ldw	r2,-20(fp)
 401be60:	10800217 	ldw	r2,8(r2)
 401be64:	108000cc 	andi	r2,r2,3
 401be68:	10001826 	beq	r2,zero,401becc <write+0xc4>
 401be6c:	e0bffb17 	ldw	r2,-20(fp)
 401be70:	10800017 	ldw	r2,0(r2)
 401be74:	10800617 	ldw	r2,24(r2)
 401be78:	10001426 	beq	r2,zero,401becc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 401be7c:	e0bffb17 	ldw	r2,-20(fp)
 401be80:	10800017 	ldw	r2,0(r2)
 401be84:	10800617 	ldw	r2,24(r2)
 401be88:	e0ffff17 	ldw	r3,-4(fp)
 401be8c:	180d883a 	mov	r6,r3
 401be90:	e17ffe17 	ldw	r5,-8(fp)
 401be94:	e13ffb17 	ldw	r4,-20(fp)
 401be98:	103ee83a 	callr	r2
 401be9c:	e0bffc15 	stw	r2,-16(fp)
 401bea0:	e0bffc17 	ldw	r2,-16(fp)
 401bea4:	1000070e 	bge	r2,zero,401bec4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 401bea8:	401bdcc0 	call	401bdcc <alt_get_errno>
 401beac:	1007883a 	mov	r3,r2
 401beb0:	e0bffc17 	ldw	r2,-16(fp)
 401beb4:	0085c83a 	sub	r2,zero,r2
 401beb8:	18800015 	stw	r2,0(r3)
        return -1;
 401bebc:	00bfffc4 	movi	r2,-1
 401bec0:	00000c06 	br	401bef4 <write+0xec>
      }
      return rval;
 401bec4:	e0bffc17 	ldw	r2,-16(fp)
 401bec8:	00000a06 	br	401bef4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 401becc:	401bdcc0 	call	401bdcc <alt_get_errno>
 401bed0:	1007883a 	mov	r3,r2
 401bed4:	00800344 	movi	r2,13
 401bed8:	18800015 	stw	r2,0(r3)
 401bedc:	00000406 	br	401bef0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 401bee0:	401bdcc0 	call	401bdcc <alt_get_errno>
 401bee4:	1007883a 	mov	r3,r2
 401bee8:	00801444 	movi	r2,81
 401beec:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401bef0:	00bfffc4 	movi	r2,-1
}
 401bef4:	e037883a 	mov	sp,fp
 401bef8:	dfc00117 	ldw	ra,4(sp)
 401befc:	df000017 	ldw	fp,0(sp)
 401bf00:	dec00204 	addi	sp,sp,8
 401bf04:	f800283a 	ret

0401bf08 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 401bf08:	defffd04 	addi	sp,sp,-12
 401bf0c:	dfc00215 	stw	ra,8(sp)
 401bf10:	df000115 	stw	fp,4(sp)
 401bf14:	df000104 	addi	fp,sp,4
 401bf18:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 401bf1c:	d165b404 	addi	r5,gp,-26928
 401bf20:	e13fff17 	ldw	r4,-4(fp)
 401bf24:	401ec380 	call	401ec38 <alt_dev_llist_insert>
}
 401bf28:	e037883a 	mov	sp,fp
 401bf2c:	dfc00117 	ldw	ra,4(sp)
 401bf30:	df000017 	ldw	fp,0(sp)
 401bf34:	dec00204 	addi	sp,sp,8
 401bf38:	f800283a 	ret

0401bf3c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 401bf3c:	defffd04 	addi	sp,sp,-12
 401bf40:	dfc00215 	stw	ra,8(sp)
 401bf44:	df000115 	stw	fp,4(sp)
 401bf48:	df000104 	addi	fp,sp,4
 401bf4c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 401bf50:	401f8dc0 	call	401f8dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 401bf54:	00800044 	movi	r2,1
 401bf58:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 401bf5c:	0001883a 	nop
 401bf60:	e037883a 	mov	sp,fp
 401bf64:	dfc00117 	ldw	ra,4(sp)
 401bf68:	df000017 	ldw	fp,0(sp)
 401bf6c:	dec00204 	addi	sp,sp,8
 401bf70:	f800283a 	ret

0401bf74 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 401bf74:	defffe04 	addi	sp,sp,-8
 401bf78:	dfc00115 	stw	ra,4(sp)
 401bf7c:	df000015 	stw	fp,0(sp)
 401bf80:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 401bf84:	01c0fa04 	movi	r7,1000
 401bf88:	01800084 	movi	r6,2
 401bf8c:	000b883a 	mov	r5,zero
 401bf90:	01020034 	movhi	r4,2048
 401bf94:	21041004 	addi	r4,r4,4160
 401bf98:	401e8dc0 	call	401e8dc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 401bf9c:	010100b4 	movhi	r4,1026
 401bfa0:	211ed404 	addi	r4,r4,31568
 401bfa4:	401c2380 	call	401c238 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 401bfa8:	01800044 	movi	r6,1
 401bfac:	000b883a 	mov	r5,zero
 401bfb0:	010100b4 	movhi	r4,1026
 401bfb4:	211eec04 	addi	r4,r4,31664
 401bfb8:	401dd640 	call	401dd64 <altera_avalon_jtag_uart_init>
 401bfbc:	010100b4 	movhi	r4,1026
 401bfc0:	211ee204 	addi	r4,r4,31624
 401bfc4:	401bf080 	call	401bf08 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 401bfc8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 401bfcc:	0001883a 	nop
}
 401bfd0:	0001883a 	nop
 401bfd4:	e037883a 	mov	sp,fp
 401bfd8:	dfc00117 	ldw	ra,4(sp)
 401bfdc:	df000017 	ldw	fp,0(sp)
 401bfe0:	dec00204 	addi	sp,sp,8
 401bfe4:	f800283a 	ret

0401bfe8 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 401bfe8:	defff904 	addi	sp,sp,-28
 401bfec:	dfc00615 	stw	ra,24(sp)
 401bff0:	df000515 	stw	fp,20(sp)
 401bff4:	df000504 	addi	fp,sp,20
 401bff8:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 401bffc:	008000b4 	movhi	r2,2
 401c000:	10a1a804 	addi	r2,r2,-31072
 401c004:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 401c008:	e0bfff17 	ldw	r2,-4(fp)
 401c00c:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 401c010:	e0bffc17 	ldw	r2,-16(fp)
 401c014:	10800717 	ldw	r2,28(r2)
 401c018:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 401c01c:	e0bffd17 	ldw	r2,-12(fp)
 401c020:	10800217 	ldw	r2,8(r2)
 401c024:	10800098 	cmpnei	r2,r2,2
 401c028:	1000251e 	bne	r2,zero,401c0c0 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 401c02c:	e0bffd17 	ldw	r2,-12(fp)
 401c030:	10c00017 	ldw	r3,0(r2)
 401c034:	e0bffd17 	ldw	r2,-12(fp)
 401c038:	10800117 	ldw	r2,4(r2)
 401c03c:	e13ffe04 	addi	r4,fp,-8
 401c040:	200f883a 	mov	r7,r4
 401c044:	100d883a 	mov	r6,r2
 401c048:	180b883a 	mov	r5,r3
 401c04c:	e13ffc17 	ldw	r4,-16(fp)
 401c050:	401c7980 	call	401c798 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 401c054:	e0bffd17 	ldw	r2,-12(fp)
 401c058:	10c00117 	ldw	r3,4(r2)
 401c05c:	e0bffe17 	ldw	r2,-8(fp)
 401c060:	1887c83a 	sub	r3,r3,r2
 401c064:	e0bffd17 	ldw	r2,-12(fp)
 401c068:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 401c06c:	e0bffd17 	ldw	r2,-12(fp)
 401c070:	10c00017 	ldw	r3,0(r2)
 401c074:	e0bffe17 	ldw	r2,-8(fp)
 401c078:	1887883a 	add	r3,r3,r2
 401c07c:	e0bffd17 	ldw	r2,-12(fp)
 401c080:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 401c084:	e0bffd17 	ldw	r2,-12(fp)
 401c088:	10800117 	ldw	r2,4(r2)
 401c08c:	10000c26 	beq	r2,zero,401c0c0 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401c090:	01400704 	movi	r5,28
 401c094:	e13ffc17 	ldw	r4,-16(fp)
 401c098:	401d9500 	call	401d950 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 401c09c:	01400084 	movi	r5,2
 401c0a0:	e13ffc17 	ldw	r4,-16(fp)
 401c0a4:	401d9f40 	call	401d9f4 <alt_avalon_i2c_int_enable>
 401c0a8:	00000e06 	br	401c0e4 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 401c0ac:	e0bffb17 	ldw	r2,-20(fp)
 401c0b0:	10bfffc4 	addi	r2,r2,-1
 401c0b4:	e0bffb15 	stw	r2,-20(fp)
 401c0b8:	e0bffb17 	ldw	r2,-20(fp)
 401c0bc:	10000426 	beq	r2,zero,401c0d0 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 401c0c0:	e13ffc17 	ldw	r4,-16(fp)
 401c0c4:	401c7540 	call	401c754 <alt_avalon_i2c_is_busy>
 401c0c8:	103ff81e 	bne	r2,zero,401c0ac <__alt_mem_onchip_memory2_0+0xfc01ae2c>
 401c0cc:	00000106 	br	401c0d4 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 401c0d0:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 401c0d4:	e13ffc17 	ldw	r4,-16(fp)
 401c0d8:	401c3fc0 	call	401c3fc <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 401c0dc:	e0bffd17 	ldw	r2,-12(fp)
 401c0e0:	10000215 	stw	zero,8(r2)
}
 401c0e4:	e037883a 	mov	sp,fp
 401c0e8:	dfc00117 	ldw	ra,4(sp)
 401c0ec:	df000017 	ldw	fp,0(sp)
 401c0f0:	dec00204 	addi	sp,sp,8
 401c0f4:	f800283a 	ret

0401c0f8 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 401c0f8:	defffc04 	addi	sp,sp,-16
 401c0fc:	dfc00315 	stw	ra,12(sp)
 401c100:	df000215 	stw	fp,8(sp)
 401c104:	df000204 	addi	fp,sp,8
 401c108:	e13ffe15 	stw	r4,-8(fp)
 401c10c:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 401c110:	e0bfff17 	ldw	r2,-4(fp)
 401c114:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 401c118:	e1ffff17 	ldw	r7,-4(fp)
 401c11c:	000d883a 	mov	r6,zero
 401c120:	014100b4 	movhi	r5,1026
 401c124:	296ffa04 	addi	r5,r5,-16408
 401c128:	e13ffe17 	ldw	r4,-8(fp)
 401c12c:	401c1e40 	call	401c1e4 <alt_avalon_i2c_register_callback>
}
 401c130:	0001883a 	nop
 401c134:	e037883a 	mov	sp,fp
 401c138:	dfc00117 	ldw	ra,4(sp)
 401c13c:	df000017 	ldw	fp,0(sp)
 401c140:	dec00204 	addi	sp,sp,8
 401c144:	f800283a 	ret

0401c148 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 401c148:	defff904 	addi	sp,sp,-28
 401c14c:	dfc00615 	stw	ra,24(sp)
 401c150:	df000515 	stw	fp,20(sp)
 401c154:	df000504 	addi	fp,sp,20
 401c158:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 401c15c:	e0bfff17 	ldw	r2,-4(fp)
 401c160:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 401c164:	014007c4 	movi	r5,31
 401c168:	e13ffb17 	ldw	r4,-20(fp)
 401c16c:	401d98c0 	call	401d98c <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401c170:	01400704 	movi	r5,28
 401c174:	e13ffb17 	ldw	r4,-20(fp)
 401c178:	401d9500 	call	401d950 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 401c17c:	e0bffb17 	ldw	r2,-20(fp)
 401c180:	10800617 	ldw	r2,24(r2)
 401c184:	10001126 	beq	r2,zero,401c1cc <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c188:	0005303a 	rdctl	r2,status
 401c18c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c190:	e0fffd17 	ldw	r3,-12(fp)
 401c194:	00bfff84 	movi	r2,-2
 401c198:	1884703a 	and	r2,r3,r2
 401c19c:	1001703a 	wrctl	status,r2
  
  return context;
 401c1a0:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 401c1a4:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 401c1a8:	e0bffb17 	ldw	r2,-20(fp)
 401c1ac:	10800617 	ldw	r2,24(r2)
 401c1b0:	e13ffb17 	ldw	r4,-20(fp)
 401c1b4:	103ee83a 	callr	r2
 401c1b8:	e0bffc17 	ldw	r2,-16(fp)
 401c1bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c1c0:	e0bffe17 	ldw	r2,-8(fp)
 401c1c4:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 401c1c8:	0001883a 	nop
 401c1cc:	0001883a 	nop
}
 401c1d0:	e037883a 	mov	sp,fp
 401c1d4:	dfc00117 	ldw	ra,4(sp)
 401c1d8:	df000017 	ldw	fp,0(sp)
 401c1dc:	dec00204 	addi	sp,sp,8
 401c1e0:	f800283a 	ret

0401c1e4 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 401c1e4:	defffb04 	addi	sp,sp,-20
 401c1e8:	df000415 	stw	fp,16(sp)
 401c1ec:	df000404 	addi	fp,sp,16
 401c1f0:	e13ffc15 	stw	r4,-16(fp)
 401c1f4:	e17ffd15 	stw	r5,-12(fp)
 401c1f8:	e1bffe15 	stw	r6,-8(fp)
 401c1fc:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 401c200:	e0bffc17 	ldw	r2,-16(fp)
 401c204:	e0fffd17 	ldw	r3,-12(fp)
 401c208:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 401c20c:	e0bffc17 	ldw	r2,-16(fp)
 401c210:	e0ffff17 	ldw	r3,-4(fp)
 401c214:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 401c218:	e0bffc17 	ldw	r2,-16(fp)
 401c21c:	e0fffe17 	ldw	r3,-8(fp)
 401c220:	10c00815 	stw	r3,32(r2)

    return ;
 401c224:	0001883a 	nop
}
 401c228:	e037883a 	mov	sp,fp
 401c22c:	df000017 	ldw	fp,0(sp)
 401c230:	dec00104 	addi	sp,sp,4
 401c234:	f800283a 	ret

0401c238 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 401c238:	defff704 	addi	sp,sp,-36
 401c23c:	dfc00815 	stw	ra,32(sp)
 401c240:	df000715 	stw	fp,28(sp)
 401c244:	df000704 	addi	fp,sp,28
 401c248:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 401c24c:	e13fff17 	ldw	r4,-4(fp)
 401c250:	401c3fc0 	call	401c3fc <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 401c254:	014007c4 	movi	r5,31
 401c258:	e13fff17 	ldw	r4,-4(fp)
 401c25c:	401d98c0 	call	401d98c <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401c260:	01400704 	movi	r5,28
 401c264:	e13fff17 	ldw	r4,-4(fp)
 401c268:	401d9500 	call	401d950 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 401c26c:	014000c4 	movi	r5,3
 401c270:	e13fff17 	ldw	r4,-4(fp)
 401c274:	401db980 	call	401db98 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 401c278:	014000c4 	movi	r5,3
 401c27c:	e13fff17 	ldw	r4,-4(fp)
 401c280:	401dae80 	call	401dae8 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 401c284:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 401c288:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 401c28c:	e0bffb04 	addi	r2,fp,-20
 401c290:	018000b4 	movhi	r6,2
 401c294:	31a1a804 	addi	r6,r6,-31072
 401c298:	100b883a 	mov	r5,r2
 401c29c:	e13fff17 	ldw	r4,-4(fp)
 401c2a0:	401c6580 	call	401c658 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 401c2a4:	e0bffb04 	addi	r2,fp,-20
 401c2a8:	100b883a 	mov	r5,r2
 401c2ac:	e13fff17 	ldw	r4,-4(fp)
 401c2b0:	401c4f80 	call	401c4f8 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 401c2b4:	d165b904 	addi	r5,gp,-26908
 401c2b8:	e13fff17 	ldw	r4,-4(fp)
 401c2bc:	401ec380 	call	401ec38 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 401c2c0:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 401c2c4:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 401c2c8:	e0bffa17 	ldw	r2,-24(fp)
 401c2cc:	10000c1e 	bne	r2,zero,401c300 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 401c2d0:	e0bfff17 	ldw	r2,-4(fp)
 401c2d4:	10c00417 	ldw	r3,16(r2)
 401c2d8:	e0bfff17 	ldw	r2,-4(fp)
 401c2dc:	10800517 	ldw	r2,20(r2)
 401c2e0:	d8000015 	stw	zero,0(sp)
 401c2e4:	e1ffff17 	ldw	r7,-4(fp)
 401c2e8:	018100b4 	movhi	r6,1026
 401c2ec:	31b05204 	addi	r6,r6,-16056
 401c2f0:	100b883a 	mov	r5,r2
 401c2f4:	1809883a 	mov	r4,r3
 401c2f8:	401ee4c0 	call	401ee4c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 401c2fc:	00000406 	br	401c310 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 401c300:	010100b4 	movhi	r4,1026
 401c304:	211c3904 	addi	r4,r4,28900
 401c308:	401f4d00 	call	401f4d0 <alt_printf>
    }

    return;
 401c30c:	0001883a 	nop

}
 401c310:	e037883a 	mov	sp,fp
 401c314:	dfc00117 	ldw	ra,4(sp)
 401c318:	df000017 	ldw	fp,0(sp)
 401c31c:	dec00204 	addi	sp,sp,8
 401c320:	f800283a 	ret

0401c324 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 401c324:	defffc04 	addi	sp,sp,-16
 401c328:	dfc00315 	stw	ra,12(sp)
 401c32c:	df000215 	stw	fp,8(sp)
 401c330:	df000204 	addi	fp,sp,8
 401c334:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 401c338:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 401c33c:	d165b904 	addi	r5,gp,-26908
 401c340:	e13fff17 	ldw	r4,-4(fp)
 401c344:	401ed9c0 	call	401ed9c <alt_find_dev>
 401c348:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 401c34c:	e0bffe17 	ldw	r2,-8(fp)
}
 401c350:	e037883a 	mov	sp,fp
 401c354:	dfc00117 	ldw	ra,4(sp)
 401c358:	df000017 	ldw	fp,0(sp)
 401c35c:	dec00204 	addi	sp,sp,8
 401c360:	f800283a 	ret

0401c364 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401c364:	defffc04 	addi	sp,sp,-16
 401c368:	df000315 	stw	fp,12(sp)
 401c36c:	df000304 	addi	fp,sp,12
 401c370:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 401c374:	e0bfff17 	ldw	r2,-4(fp)
 401c378:	10800717 	ldw	r2,28(r2)
 401c37c:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 401c380:	e0bfff17 	ldw	r2,-4(fp)
 401c384:	10800317 	ldw	r2,12(r2)
 401c388:	10800204 	addi	r2,r2,8
 401c38c:	10800037 	ldwio	r2,0(r2)
 401c390:	1080004c 	andi	r2,r2,1
 401c394:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 401c398:	e0bffe17 	ldw	r2,-8(fp)
 401c39c:	10000226 	beq	r2,zero,401c3a8 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 401c3a0:	00bffe44 	movi	r2,-7
 401c3a4:	00001106 	br	401c3ec <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 401c3a8:	e0bfff17 	ldw	r2,-4(fp)
 401c3ac:	10c00617 	ldw	r3,24(r2)
 401c3b0:	008100b4 	movhi	r2,1026
 401c3b4:	10affa04 	addi	r2,r2,-16408
 401c3b8:	1880021e 	bne	r3,r2,401c3c4 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 401c3bc:	e0bffd17 	ldw	r2,-12(fp)
 401c3c0:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 401c3c4:	e0bfff17 	ldw	r2,-4(fp)
 401c3c8:	10800317 	ldw	r2,12(r2)
 401c3cc:	10800204 	addi	r2,r2,8
 401c3d0:	e0ffff17 	ldw	r3,-4(fp)
 401c3d4:	18c00317 	ldw	r3,12(r3)
 401c3d8:	18c00204 	addi	r3,r3,8
 401c3dc:	18c00037 	ldwio	r3,0(r3)
 401c3e0:	18c00054 	ori	r3,r3,1
 401c3e4:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 401c3e8:	0005883a 	mov	r2,zero
}
 401c3ec:	e037883a 	mov	sp,fp
 401c3f0:	df000017 	ldw	fp,0(sp)
 401c3f4:	dec00104 	addi	sp,sp,4
 401c3f8:	f800283a 	ret

0401c3fc <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401c3fc:	defffe04 	addi	sp,sp,-8
 401c400:	df000115 	stw	fp,4(sp)
 401c404:	df000104 	addi	fp,sp,4
 401c408:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 401c40c:	e0bfff17 	ldw	r2,-4(fp)
 401c410:	10800317 	ldw	r2,12(r2)
 401c414:	10800204 	addi	r2,r2,8
 401c418:	e0ffff17 	ldw	r3,-4(fp)
 401c41c:	18c00317 	ldw	r3,12(r3)
 401c420:	18c00204 	addi	r3,r3,8
 401c424:	19000037 	ldwio	r4,0(r3)
 401c428:	00ffff84 	movi	r3,-2
 401c42c:	20c6703a 	and	r3,r4,r3
 401c430:	10c00035 	stwio	r3,0(r2)

}
 401c434:	0001883a 	nop
 401c438:	e037883a 	mov	sp,fp
 401c43c:	df000017 	ldw	fp,0(sp)
 401c440:	dec00104 	addi	sp,sp,4
 401c444:	f800283a 	ret

0401c448 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 401c448:	defffd04 	addi	sp,sp,-12
 401c44c:	df000215 	stw	fp,8(sp)
 401c450:	df000204 	addi	fp,sp,8
 401c454:	e13ffe15 	stw	r4,-8(fp)
 401c458:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 401c45c:	e0bffe17 	ldw	r2,-8(fp)
 401c460:	10c00d17 	ldw	r3,52(r2)
 401c464:	e0bfff17 	ldw	r2,-4(fp)
 401c468:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 401c46c:	e0bffe17 	ldw	r2,-8(fp)
 401c470:	10800317 	ldw	r2,12(r2)
 401c474:	10800204 	addi	r2,r2,8
 401c478:	10800037 	ldwio	r2,0(r2)
 401c47c:	1080008c 	andi	r2,r2,2
 401c480:	1005d07a 	srai	r2,r2,1
 401c484:	1007883a 	mov	r3,r2
 401c488:	e0bfff17 	ldw	r2,-4(fp)
 401c48c:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 401c490:	e0bffe17 	ldw	r2,-8(fp)
 401c494:	10800317 	ldw	r2,12(r2)
 401c498:	10800904 	addi	r2,r2,36
 401c49c:	10800037 	ldwio	r2,0(r2)
 401c4a0:	1007883a 	mov	r3,r2
 401c4a4:	e0bfff17 	ldw	r2,-4(fp)
 401c4a8:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 401c4ac:	e0bffe17 	ldw	r2,-8(fp)
 401c4b0:	10800317 	ldw	r2,12(r2)
 401c4b4:	10800804 	addi	r2,r2,32
 401c4b8:	10800037 	ldwio	r2,0(r2)
 401c4bc:	1007883a 	mov	r3,r2
 401c4c0:	e0bfff17 	ldw	r2,-4(fp)
 401c4c4:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 401c4c8:	e0bffe17 	ldw	r2,-8(fp)
 401c4cc:	10800317 	ldw	r2,12(r2)
 401c4d0:	10800a04 	addi	r2,r2,40
 401c4d4:	10800037 	ldwio	r2,0(r2)
 401c4d8:	1007883a 	mov	r3,r2
 401c4dc:	e0bfff17 	ldw	r2,-4(fp)
 401c4e0:	10c0030d 	sth	r3,12(r2)
}
 401c4e4:	0001883a 	nop
 401c4e8:	e037883a 	mov	sp,fp
 401c4ec:	df000017 	ldw	fp,0(sp)
 401c4f0:	dec00104 	addi	sp,sp,4
 401c4f4:	f800283a 	ret

0401c4f8 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 401c4f8:	defffd04 	addi	sp,sp,-12
 401c4fc:	df000215 	stw	fp,8(sp)
 401c500:	df000204 	addi	fp,sp,8
 401c504:	e13ffe15 	stw	r4,-8(fp)
 401c508:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 401c50c:	e0bfff17 	ldw	r2,-4(fp)
 401c510:	10c00017 	ldw	r3,0(r2)
 401c514:	e0bffe17 	ldw	r2,-8(fp)
 401c518:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 401c51c:	e0bffe17 	ldw	r2,-8(fp)
 401c520:	10800317 	ldw	r2,12(r2)
 401c524:	10c00204 	addi	r3,r2,8
 401c528:	e0bffe17 	ldw	r2,-8(fp)
 401c52c:	10800317 	ldw	r2,12(r2)
 401c530:	10800204 	addi	r2,r2,8
 401c534:	10800037 	ldwio	r2,0(r2)
 401c538:	1009883a 	mov	r4,r2
 401c53c:	00bfff44 	movi	r2,-3
 401c540:	2088703a 	and	r4,r4,r2
 401c544:	e0bfff17 	ldw	r2,-4(fp)
 401c548:	10800117 	ldw	r2,4(r2)
 401c54c:	1085883a 	add	r2,r2,r2
 401c550:	1080008c 	andi	r2,r2,2
 401c554:	2084b03a 	or	r2,r4,r2
 401c558:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 401c55c:	e0bffe17 	ldw	r2,-8(fp)
 401c560:	10800317 	ldw	r2,12(r2)
 401c564:	10800904 	addi	r2,r2,36
 401c568:	e0ffff17 	ldw	r3,-4(fp)
 401c56c:	18c0020b 	ldhu	r3,8(r3)
 401c570:	18ffffcc 	andi	r3,r3,65535
 401c574:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 401c578:	e0bffe17 	ldw	r2,-8(fp)
 401c57c:	10800317 	ldw	r2,12(r2)
 401c580:	10800804 	addi	r2,r2,32
 401c584:	e0ffff17 	ldw	r3,-4(fp)
 401c588:	18c0028b 	ldhu	r3,10(r3)
 401c58c:	18ffffcc 	andi	r3,r3,65535
 401c590:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 401c594:	e0bffe17 	ldw	r2,-8(fp)
 401c598:	10800317 	ldw	r2,12(r2)
 401c59c:	10800a04 	addi	r2,r2,40
 401c5a0:	e0ffff17 	ldw	r3,-4(fp)
 401c5a4:	18c0030b 	ldhu	r3,12(r3)
 401c5a8:	18ffffcc 	andi	r3,r3,65535
 401c5ac:	10c00035 	stwio	r3,0(r2)
}
 401c5b0:	0001883a 	nop
 401c5b4:	e037883a 	mov	sp,fp
 401c5b8:	df000017 	ldw	fp,0(sp)
 401c5bc:	dec00104 	addi	sp,sp,4
 401c5c0:	f800283a 	ret

0401c5c4 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 401c5c4:	defffb04 	addi	sp,sp,-20
 401c5c8:	dfc00415 	stw	ra,16(sp)
 401c5cc:	df000315 	stw	fp,12(sp)
 401c5d0:	df000304 	addi	fp,sp,12
 401c5d4:	e13ffd15 	stw	r4,-12(fp)
 401c5d8:	e17ffe15 	stw	r5,-8(fp)
 401c5dc:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 401c5e0:	e0bffe17 	ldw	r2,-8(fp)
 401c5e4:	1080028b 	ldhu	r2,10(r2)
 401c5e8:	10bfffcc 	andi	r2,r2,65535
 401c5ec:	10000426 	beq	r2,zero,401c600 <alt_avalon_i2c_master_config_speed_get+0x3c>
 401c5f0:	e0bffe17 	ldw	r2,-8(fp)
 401c5f4:	1080020b 	ldhu	r2,8(r2)
 401c5f8:	10bfffcc 	andi	r2,r2,65535
 401c5fc:	1000021e 	bne	r2,zero,401c608 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 401c600:	00bfff44 	movi	r2,-3
 401c604:	00000f06 	br	401c644 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 401c608:	e0bffd17 	ldw	r2,-12(fp)
 401c60c:	11000c17 	ldw	r4,48(r2)
 401c610:	e0bffe17 	ldw	r2,-8(fp)
 401c614:	1080028b 	ldhu	r2,10(r2)
 401c618:	10ffffcc 	andi	r3,r2,65535
 401c61c:	e0bffe17 	ldw	r2,-8(fp)
 401c620:	1080020b 	ldhu	r2,8(r2)
 401c624:	10bfffcc 	andi	r2,r2,65535
 401c628:	1885883a 	add	r2,r3,r2
 401c62c:	100b883a 	mov	r5,r2
 401c630:	400cf180 	call	400cf18 <__udivsi3>
 401c634:	1007883a 	mov	r3,r2
 401c638:	e0bfff17 	ldw	r2,-4(fp)
 401c63c:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 401c640:	0005883a 	mov	r2,zero
}
 401c644:	e037883a 	mov	sp,fp
 401c648:	dfc00117 	ldw	ra,4(sp)
 401c64c:	df000017 	ldw	fp,0(sp)
 401c650:	dec00204 	addi	sp,sp,8
 401c654:	f800283a 	ret

0401c658 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 401c658:	defff904 	addi	sp,sp,-28
 401c65c:	dfc00615 	stw	ra,24(sp)
 401c660:	df000515 	stw	fp,20(sp)
 401c664:	df000504 	addi	fp,sp,20
 401c668:	e13ffd15 	stw	r4,-12(fp)
 401c66c:	e17ffe15 	stw	r5,-8(fp)
 401c670:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 401c674:	e0ffff17 	ldw	r3,-4(fp)
 401c678:	008001b4 	movhi	r2,6
 401c67c:	1086a004 	addi	r2,r2,6784
 401c680:	10c00436 	bltu	r2,r3,401c694 <alt_avalon_i2c_master_config_speed_set+0x3c>
 401c684:	e0bfff17 	ldw	r2,-4(fp)
 401c688:	10000226 	beq	r2,zero,401c694 <alt_avalon_i2c_master_config_speed_set+0x3c>
 401c68c:	e0bfff17 	ldw	r2,-4(fp)
 401c690:	1000021e 	bne	r2,zero,401c69c <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 401c694:	00bfff04 	movi	r2,-4
 401c698:	00002906 	br	401c740 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 401c69c:	e0bffd17 	ldw	r2,-12(fp)
 401c6a0:	10c00c17 	ldw	r3,48(r2)
 401c6a4:	e0bfff17 	ldw	r2,-4(fp)
 401c6a8:	1085883a 	add	r2,r2,r2
 401c6ac:	100b883a 	mov	r5,r2
 401c6b0:	1809883a 	mov	r4,r3
 401c6b4:	400cf180 	call	400cf18 <__udivsi3>
 401c6b8:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 401c6bc:	e0bffb17 	ldw	r2,-20(fp)
 401c6c0:	10800f04 	addi	r2,r2,60
 401c6c4:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 401c6c8:	e0bffb17 	ldw	r2,-20(fp)
 401c6cc:	10bff104 	addi	r2,r2,-60
 401c6d0:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 401c6d4:	e0ffff17 	ldw	r3,-4(fp)
 401c6d8:	008000b4 	movhi	r2,2
 401c6dc:	10a1a804 	addi	r2,r2,-31072
 401c6e0:	10c0042e 	bgeu	r2,r3,401c6f4 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 401c6e4:	e0bffe17 	ldw	r2,-8(fp)
 401c6e8:	00c00044 	movi	r3,1
 401c6ec:	10c00115 	stw	r3,4(r2)
 401c6f0:	00000206 	br	401c6fc <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 401c6f4:	e0bffe17 	ldw	r2,-8(fp)
 401c6f8:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 401c6fc:	e0bffb17 	ldw	r2,-20(fp)
 401c700:	1007883a 	mov	r3,r2
 401c704:	e0bffe17 	ldw	r2,-8(fp)
 401c708:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 401c70c:	e0bffc17 	ldw	r2,-16(fp)
 401c710:	1007883a 	mov	r3,r2
 401c714:	e0bffe17 	ldw	r2,-8(fp)
 401c718:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 401c71c:	e0bffb17 	ldw	r2,-20(fp)
 401c720:	1007883a 	mov	r3,r2
 401c724:	e0bffb17 	ldw	r2,-20(fp)
 401c728:	1004d07a 	srli	r2,r2,1
 401c72c:	1885c83a 	sub	r2,r3,r2
 401c730:	1007883a 	mov	r3,r2
 401c734:	e0bffe17 	ldw	r2,-8(fp)
 401c738:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 401c73c:	0005883a 	mov	r2,zero

}
 401c740:	e037883a 	mov	sp,fp
 401c744:	dfc00117 	ldw	ra,4(sp)
 401c748:	df000017 	ldw	fp,0(sp)
 401c74c:	dec00204 	addi	sp,sp,8
 401c750:	f800283a 	ret

0401c754 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401c754:	defffe04 	addi	sp,sp,-8
 401c758:	df000115 	stw	fp,4(sp)
 401c75c:	df000104 	addi	fp,sp,4
 401c760:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 401c764:	e0bfff17 	ldw	r2,-4(fp)
 401c768:	10800317 	ldw	r2,12(r2)
 401c76c:	10800504 	addi	r2,r2,20
 401c770:	10800037 	ldwio	r2,0(r2)
 401c774:	1080004c 	andi	r2,r2,1
 401c778:	10000226 	beq	r2,zero,401c784 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 401c77c:	00800044 	movi	r2,1
 401c780:	00000106 	br	401c788 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 401c784:	0005883a 	mov	r2,zero
}
 401c788:	e037883a 	mov	sp,fp
 401c78c:	df000017 	ldw	fp,0(sp)
 401c790:	dec00104 	addi	sp,sp,4
 401c794:	f800283a 	ret

0401c798 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 401c798:	defffb04 	addi	sp,sp,-20
 401c79c:	df000415 	stw	fp,16(sp)
 401c7a0:	df000404 	addi	fp,sp,16
 401c7a4:	e13ffc15 	stw	r4,-16(fp)
 401c7a8:	e17ffd15 	stw	r5,-12(fp)
 401c7ac:	e1bffe15 	stw	r6,-8(fp)
 401c7b0:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 401c7b4:	e0bfff17 	ldw	r2,-4(fp)
 401c7b8:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 401c7bc:	00001406 	br	401c810 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 401c7c0:	e0bfff17 	ldw	r2,-4(fp)
 401c7c4:	10800017 	ldw	r2,0(r2)
 401c7c8:	e0fffd17 	ldw	r3,-12(fp)
 401c7cc:	1885883a 	add	r2,r3,r2
 401c7d0:	e0fffc17 	ldw	r3,-16(fp)
 401c7d4:	18c00317 	ldw	r3,12(r3)
 401c7d8:	18c00104 	addi	r3,r3,4
 401c7dc:	18c00037 	ldwio	r3,0(r3)
 401c7e0:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 401c7e4:	e0bfff17 	ldw	r2,-4(fp)
 401c7e8:	10800017 	ldw	r2,0(r2)
 401c7ec:	10c00044 	addi	r3,r2,1
 401c7f0:	e0bfff17 	ldw	r2,-4(fp)
 401c7f4:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 401c7f8:	e0bfff17 	ldw	r2,-4(fp)
 401c7fc:	10c00017 	ldw	r3,0(r2)
 401c800:	e0bffe17 	ldw	r2,-8(fp)
 401c804:	1880021e 	bne	r3,r2,401c810 <alt_avalon_i2c_rx_read_available+0x78>
 401c808:	e0bffe17 	ldw	r2,-8(fp)
 401c80c:	1000061e 	bne	r2,zero,401c828 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 401c810:	e0bffc17 	ldw	r2,-16(fp)
 401c814:	10800317 	ldw	r2,12(r2)
 401c818:	10800704 	addi	r2,r2,28
 401c81c:	10800037 	ldwio	r2,0(r2)
 401c820:	103fe71e 	bne	r2,zero,401c7c0 <__alt_mem_onchip_memory2_0+0xfc01b540>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 401c824:	00000106 	br	401c82c <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 401c828:	0001883a 	nop
    }
}
 401c82c:	0001883a 	nop
 401c830:	e037883a 	mov	sp,fp
 401c834:	df000017 	ldw	fp,0(sp)
 401c838:	dec00104 	addi	sp,sp,4
 401c83c:	f800283a 	ret

0401c840 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 401c840:	defffa04 	addi	sp,sp,-24
 401c844:	dfc00515 	stw	ra,20(sp)
 401c848:	df000415 	stw	fp,16(sp)
 401c84c:	df000404 	addi	fp,sp,16
 401c850:	e13ffe15 	stw	r4,-8(fp)
 401c854:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 401c858:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 401c85c:	008000b4 	movhi	r2,2
 401c860:	10a1a804 	addi	r2,r2,-31072
 401c864:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 401c868:	00000d06 	br	401c8a0 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 401c86c:	e0bffd17 	ldw	r2,-12(fp)
 401c870:	108002a8 	cmpgeui	r2,r2,10
 401c874:	1000021e 	bne	r2,zero,401c880 <alt_avalon_i2c_rx_read+0x40>
 401c878:	0109c404 	movi	r4,10000
 401c87c:	401ea840 	call	401ea84 <alt_busy_sleep>
      if (--timeout == 0)
 401c880:	e0bffd17 	ldw	r2,-12(fp)
 401c884:	10bfffc4 	addi	r2,r2,-1
 401c888:	e0bffd15 	stw	r2,-12(fp)
 401c88c:	e0bffd17 	ldw	r2,-12(fp)
 401c890:	1000031e 	bne	r2,zero,401c8a0 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 401c894:	00bfff84 	movi	r2,-2
 401c898:	e0bffc15 	stw	r2,-16(fp)
        break;
 401c89c:	00000506 	br	401c8b4 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 401c8a0:	e0bffe17 	ldw	r2,-8(fp)
 401c8a4:	10800317 	ldw	r2,12(r2)
 401c8a8:	10800704 	addi	r2,r2,28
 401c8ac:	10800037 	ldwio	r2,0(r2)
 401c8b0:	103fee26 	beq	r2,zero,401c86c <__alt_mem_onchip_memory2_0+0xfc01b5ec>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 401c8b4:	e0bffe17 	ldw	r2,-8(fp)
 401c8b8:	10800317 	ldw	r2,12(r2)
 401c8bc:	10800104 	addi	r2,r2,4
 401c8c0:	10800037 	ldwio	r2,0(r2)
 401c8c4:	1007883a 	mov	r3,r2
 401c8c8:	e0bfff17 	ldw	r2,-4(fp)
 401c8cc:	10c00005 	stb	r3,0(r2)
        
    return status;
 401c8d0:	e0bffc17 	ldw	r2,-16(fp)
}
 401c8d4:	e037883a 	mov	sp,fp
 401c8d8:	dfc00117 	ldw	ra,4(sp)
 401c8dc:	df000017 	ldw	fp,0(sp)
 401c8e0:	dec00204 	addi	sp,sp,8
 401c8e4:	f800283a 	ret

0401c8e8 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 401c8e8:	defff804 	addi	sp,sp,-32
 401c8ec:	dfc00715 	stw	ra,28(sp)
 401c8f0:	df000615 	stw	fp,24(sp)
 401c8f4:	df000604 	addi	fp,sp,24
 401c8f8:	e13ffc15 	stw	r4,-16(fp)
 401c8fc:	2809883a 	mov	r4,r5
 401c900:	3007883a 	mov	r3,r6
 401c904:	3805883a 	mov	r2,r7
 401c908:	e13ffd05 	stb	r4,-12(fp)
 401c90c:	e0fffe05 	stb	r3,-8(fp)
 401c910:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 401c914:	0089c404 	movi	r2,10000
 401c918:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401c91c:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 401c920:	00000c06 	br	401c954 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 401c924:	e0bffa17 	ldw	r2,-24(fp)
 401c928:	108002a8 	cmpgeui	r2,r2,10
 401c92c:	1000021e 	bne	r2,zero,401c938 <alt_avalon_i2c_cmd_write+0x50>
 401c930:	0109c404 	movi	r4,10000
 401c934:	401ea840 	call	401ea84 <alt_busy_sleep>
      if (--timeout == 0)
 401c938:	e0bffa17 	ldw	r2,-24(fp)
 401c93c:	10bfffc4 	addi	r2,r2,-1
 401c940:	e0bffa15 	stw	r2,-24(fp)
 401c944:	e0bffa17 	ldw	r2,-24(fp)
 401c948:	1000021e 	bne	r2,zero,401c954 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 401c94c:	00bfff84 	movi	r2,-2
 401c950:	00001906 	br	401c9b8 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 401c954:	e0bffc17 	ldw	r2,-16(fp)
 401c958:	10800317 	ldw	r2,12(r2)
 401c95c:	10800404 	addi	r2,r2,16
 401c960:	10800037 	ldwio	r2,0(r2)
 401c964:	1080004c 	andi	r2,r2,1
 401c968:	103fee26 	beq	r2,zero,401c924 <__alt_mem_onchip_memory2_0+0xfc01b6a4>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 401c96c:	e0bffc17 	ldw	r2,-16(fp)
 401c970:	10800317 	ldw	r2,12(r2)
 401c974:	e13ffd03 	ldbu	r4,-12(fp)
 401c978:	e0fffe03 	ldbu	r3,-8(fp)
 401c97c:	1806927a 	slli	r3,r3,9
 401c980:	20c8b03a 	or	r4,r4,r3
 401c984:	e0ffff03 	ldbu	r3,-4(fp)
 401c988:	1806923a 	slli	r3,r3,8
 401c98c:	20c6b03a 	or	r3,r4,r3
 401c990:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 401c994:	e0bffb04 	addi	r2,fp,-20
 401c998:	100b883a 	mov	r5,r2
 401c99c:	e13ffc17 	ldw	r4,-16(fp)
 401c9a0:	401cb280 	call	401cb28 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 401c9a4:	e0bffb04 	addi	r2,fp,-20
 401c9a8:	100b883a 	mov	r5,r2
 401c9ac:	e13ffc17 	ldw	r4,-16(fp)
 401c9b0:	401cb740 	call	401cb74 <alt_avalon_i2c_check_arblost>
    
    return status;
 401c9b4:	e0bffb17 	ldw	r2,-20(fp)
}
 401c9b8:	e037883a 	mov	sp,fp
 401c9bc:	dfc00117 	ldw	ra,4(sp)
 401c9c0:	df000017 	ldw	fp,0(sp)
 401c9c4:	dec00204 	addi	sp,sp,8
 401c9c8:	f800283a 	ret

0401c9cc <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 401c9cc:	defffa04 	addi	sp,sp,-24
 401c9d0:	dfc00515 	stw	ra,20(sp)
 401c9d4:	df000415 	stw	fp,16(sp)
 401c9d8:	df000404 	addi	fp,sp,16
 401c9dc:	e13ffd15 	stw	r4,-12(fp)
 401c9e0:	e17ffe15 	stw	r5,-8(fp)
 401c9e4:	3005883a 	mov	r2,r6
 401c9e8:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 401c9ec:	e0bffd17 	ldw	r2,-12(fp)
 401c9f0:	10800d17 	ldw	r2,52(r2)
 401c9f4:	10800058 	cmpnei	r2,r2,1
 401c9f8:	10001c1e 	bne	r2,zero,401ca6c <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 401c9fc:	e0bffd17 	ldw	r2,-12(fp)
 401ca00:	10800917 	ldw	r2,36(r2)
 401ca04:	109e0014 	ori	r2,r2,30720
 401ca08:	1004d1fa 	srli	r2,r2,7
 401ca0c:	1007883a 	mov	r3,r2
 401ca10:	00bfff84 	movi	r2,-2
 401ca14:	1884703a 	and	r2,r3,r2
 401ca18:	1007883a 	mov	r3,r2
 401ca1c:	e0bffe17 	ldw	r2,-8(fp)
 401ca20:	1884b03a 	or	r2,r3,r2
 401ca24:	10803fcc 	andi	r2,r2,255
 401ca28:	e0ffff03 	ldbu	r3,-4(fp)
 401ca2c:	000f883a 	mov	r7,zero
 401ca30:	180d883a 	mov	r6,r3
 401ca34:	100b883a 	mov	r5,r2
 401ca38:	e13ffd17 	ldw	r4,-12(fp)
 401ca3c:	401c8e80 	call	401c8e8 <alt_avalon_i2c_cmd_write>
 401ca40:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 401ca44:	e0bffd17 	ldw	r2,-12(fp)
 401ca48:	10800917 	ldw	r2,36(r2)
 401ca4c:	10803fcc 	andi	r2,r2,255
 401ca50:	000f883a 	mov	r7,zero
 401ca54:	000d883a 	mov	r6,zero
 401ca58:	100b883a 	mov	r5,r2
 401ca5c:	e13ffd17 	ldw	r4,-12(fp)
 401ca60:	401c8e80 	call	401c8e8 <alt_avalon_i2c_cmd_write>
 401ca64:	e0bffc15 	stw	r2,-16(fp)
 401ca68:	00000e06 	br	401caa4 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 401ca6c:	e0bffd17 	ldw	r2,-12(fp)
 401ca70:	10800917 	ldw	r2,36(r2)
 401ca74:	1085883a 	add	r2,r2,r2
 401ca78:	1007883a 	mov	r3,r2
 401ca7c:	e0bffe17 	ldw	r2,-8(fp)
 401ca80:	1884b03a 	or	r2,r3,r2
 401ca84:	10803fcc 	andi	r2,r2,255
 401ca88:	e0ffff03 	ldbu	r3,-4(fp)
 401ca8c:	000f883a 	mov	r7,zero
 401ca90:	180d883a 	mov	r6,r3
 401ca94:	100b883a 	mov	r5,r2
 401ca98:	e13ffd17 	ldw	r4,-12(fp)
 401ca9c:	401c8e80 	call	401c8e8 <alt_avalon_i2c_cmd_write>
 401caa0:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 401caa4:	e0bffc17 	ldw	r2,-16(fp)
}
 401caa8:	e037883a 	mov	sp,fp
 401caac:	dfc00117 	ldw	ra,4(sp)
 401cab0:	df000017 	ldw	fp,0(sp)
 401cab4:	dec00204 	addi	sp,sp,8
 401cab8:	f800283a 	ret

0401cabc <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 401cabc:	defffd04 	addi	sp,sp,-12
 401cac0:	df000215 	stw	fp,8(sp)
 401cac4:	df000204 	addi	fp,sp,8
 401cac8:	e13ffe15 	stw	r4,-8(fp)
 401cacc:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 401cad0:	e0bffe17 	ldw	r2,-8(fp)
 401cad4:	10c00917 	ldw	r3,36(r2)
 401cad8:	e0bfff17 	ldw	r2,-4(fp)
 401cadc:	10c00015 	stw	r3,0(r2)
}
 401cae0:	0001883a 	nop
 401cae4:	e037883a 	mov	sp,fp
 401cae8:	df000017 	ldw	fp,0(sp)
 401caec:	dec00104 	addi	sp,sp,4
 401caf0:	f800283a 	ret

0401caf4 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 401caf4:	defffd04 	addi	sp,sp,-12
 401caf8:	df000215 	stw	fp,8(sp)
 401cafc:	df000204 	addi	fp,sp,8
 401cb00:	e13ffe15 	stw	r4,-8(fp)
 401cb04:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 401cb08:	e0bffe17 	ldw	r2,-8(fp)
 401cb0c:	e0ffff17 	ldw	r3,-4(fp)
 401cb10:	10c00915 	stw	r3,36(r2)
}
 401cb14:	0001883a 	nop
 401cb18:	e037883a 	mov	sp,fp
 401cb1c:	df000017 	ldw	fp,0(sp)
 401cb20:	dec00104 	addi	sp,sp,4
 401cb24:	f800283a 	ret

0401cb28 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 401cb28:	defffd04 	addi	sp,sp,-12
 401cb2c:	df000215 	stw	fp,8(sp)
 401cb30:	df000204 	addi	fp,sp,8
 401cb34:	e13ffe15 	stw	r4,-8(fp)
 401cb38:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 401cb3c:	e0bffe17 	ldw	r2,-8(fp)
 401cb40:	10800317 	ldw	r2,12(r2)
 401cb44:	10800404 	addi	r2,r2,16
 401cb48:	10800037 	ldwio	r2,0(r2)
 401cb4c:	1080010c 	andi	r2,r2,4
 401cb50:	10000326 	beq	r2,zero,401cb60 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 401cb54:	e0bfff17 	ldw	r2,-4(fp)
 401cb58:	00fffec4 	movi	r3,-5
 401cb5c:	10c00015 	stw	r3,0(r2)
    }
}
 401cb60:	0001883a 	nop
 401cb64:	e037883a 	mov	sp,fp
 401cb68:	df000017 	ldw	fp,0(sp)
 401cb6c:	dec00104 	addi	sp,sp,4
 401cb70:	f800283a 	ret

0401cb74 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 401cb74:	defffd04 	addi	sp,sp,-12
 401cb78:	df000215 	stw	fp,8(sp)
 401cb7c:	df000204 	addi	fp,sp,8
 401cb80:	e13ffe15 	stw	r4,-8(fp)
 401cb84:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 401cb88:	e0bffe17 	ldw	r2,-8(fp)
 401cb8c:	10800317 	ldw	r2,12(r2)
 401cb90:	10800404 	addi	r2,r2,16
 401cb94:	10800037 	ldwio	r2,0(r2)
 401cb98:	1080020c 	andi	r2,r2,8
 401cb9c:	10000326 	beq	r2,zero,401cbac <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 401cba0:	e0bfff17 	ldw	r2,-4(fp)
 401cba4:	00fffe84 	movi	r3,-6
 401cba8:	10c00015 	stw	r3,0(r2)
    }
}
 401cbac:	0001883a 	nop
 401cbb0:	e037883a 	mov	sp,fp
 401cbb4:	df000017 	ldw	fp,0(sp)
 401cbb8:	dec00104 	addi	sp,sp,4
 401cbbc:	f800283a 	ret

0401cbc0 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401cbc0:	defff804 	addi	sp,sp,-32
 401cbc4:	dfc00715 	stw	ra,28(sp)
 401cbc8:	df000615 	stw	fp,24(sp)
 401cbcc:	df000604 	addi	fp,sp,24
 401cbd0:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401cbd4:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 401cbd8:	e0bfff17 	ldw	r2,-4(fp)
 401cbdc:	10800717 	ldw	r2,28(r2)
 401cbe0:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 401cbe4:	e0bffb17 	ldw	r2,-20(fp)
 401cbe8:	10800117 	ldw	r2,4(r2)
 401cbec:	10800044 	addi	r2,r2,1
 401cbf0:	0149c404 	movi	r5,10000
 401cbf4:	1009883a 	mov	r4,r2
 401cbf8:	400cfd40 	call	400cfd4 <__mulsi3>
 401cbfc:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 401cc00:	e0bffd04 	addi	r2,fp,-12
 401cc04:	100b883a 	mov	r5,r2
 401cc08:	e13fff17 	ldw	r4,-4(fp)
 401cc0c:	401da580 	call	401da58 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 401cc10:	e0bffd17 	ldw	r2,-12(fp)
 401cc14:	100b883a 	mov	r5,r2
 401cc18:	e13fff17 	ldw	r4,-4(fp)
 401cc1c:	401d98c0 	call	401d98c <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 401cc20:	e0bffc04 	addi	r2,fp,-16
 401cc24:	100b883a 	mov	r5,r2
 401cc28:	e13fff17 	ldw	r4,-4(fp)
 401cc2c:	401cb280 	call	401cb28 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 401cc30:	e0bffc17 	ldw	r2,-16(fp)
 401cc34:	10002226 	beq	r2,zero,401ccc0 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 401cc38:	e0bffb17 	ldw	r2,-20(fp)
 401cc3c:	10800217 	ldw	r2,8(r2)
 401cc40:	10001d26 	beq	r2,zero,401ccb8 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401cc44:	00000d06 	br	401cc7c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 401cc48:	e0bffa17 	ldw	r2,-24(fp)
 401cc4c:	108002a8 	cmpgeui	r2,r2,10
 401cc50:	1000021e 	bne	r2,zero,401cc5c <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 401cc54:	0109c404 	movi	r4,10000
 401cc58:	401ea840 	call	401ea84 <alt_busy_sleep>
              if (--timeout == 0)
 401cc5c:	e0bffa17 	ldw	r2,-24(fp)
 401cc60:	10bfffc4 	addi	r2,r2,-1
 401cc64:	e0bffa15 	stw	r2,-24(fp)
 401cc68:	e0bffa17 	ldw	r2,-24(fp)
 401cc6c:	1000031e 	bne	r2,zero,401cc7c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 401cc70:	00bfff84 	movi	r2,-2
 401cc74:	e0bffc15 	stw	r2,-16(fp)
                 break;
 401cc78:	00000306 	br	401cc88 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401cc7c:	e13fff17 	ldw	r4,-4(fp)
 401cc80:	401c7540 	call	401c754 <alt_avalon_i2c_is_busy>
 401cc84:	103ff01e 	bne	r2,zero,401cc48 <__alt_mem_onchip_memory2_0+0xfc01b9c8>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 401cc88:	e0bffb17 	ldw	r2,-20(fp)
 401cc8c:	10800017 	ldw	r2,0(r2)
 401cc90:	e0fffe04 	addi	r3,fp,-8
 401cc94:	180f883a 	mov	r7,r3
 401cc98:	000d883a 	mov	r6,zero
 401cc9c:	100b883a 	mov	r5,r2
 401cca0:	e13fff17 	ldw	r4,-4(fp)
 401cca4:	401c7980 	call	401c798 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 401cca8:	e13fff17 	ldw	r4,-4(fp)
 401ccac:	401c3fc0 	call	401c3fc <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 401ccb0:	e0bffb17 	ldw	r2,-20(fp)
 401ccb4:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 401ccb8:	e0bffc17 	ldw	r2,-16(fp)
 401ccbc:	00000a06 	br	401cce8 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 401ccc0:	e0bffb17 	ldw	r2,-20(fp)
 401ccc4:	10800217 	ldw	r2,8(r2)
 401ccc8:	10000626 	beq	r2,zero,401cce4 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 401cccc:	e0bffd17 	ldw	r2,-12(fp)
 401ccd0:	100b883a 	mov	r5,r2
 401ccd4:	e13fff17 	ldw	r4,-4(fp)
 401ccd8:	401d9f40 	call	401d9f4 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 401ccdc:	00bffe44 	movi	r2,-7
 401cce0:	00000106 	br	401cce8 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 401cce4:	0005883a 	mov	r2,zero
}
 401cce8:	e037883a 	mov	sp,fp
 401ccec:	dfc00117 	ldw	ra,4(sp)
 401ccf0:	df000017 	ldw	fp,0(sp)
 401ccf4:	dec00204 	addi	sp,sp,8
 401ccf8:	f800283a 	ret

0401ccfc <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 401ccfc:	defff704 	addi	sp,sp,-36
 401cd00:	dfc00815 	stw	ra,32(sp)
 401cd04:	df000715 	stw	fp,28(sp)
 401cd08:	df000704 	addi	fp,sp,28
 401cd0c:	e13ffc15 	stw	r4,-16(fp)
 401cd10:	e17ffd15 	stw	r5,-12(fp)
 401cd14:	e1bffe15 	stw	r6,-8(fp)
 401cd18:	3805883a 	mov	r2,r7
 401cd1c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401cd20:	0089c404 	movi	r2,10000
 401cd24:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 401cd28:	00002206 	br	401cdb4 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 401cd2c:	e0bffb17 	ldw	r2,-20(fp)
 401cd30:	108002a8 	cmpgeui	r2,r2,10
 401cd34:	1000021e 	bne	r2,zero,401cd40 <alt_avalon_i2c_master_tx+0x44>
 401cd38:	0109c404 	movi	r4,10000
 401cd3c:	401ea840 	call	401ea84 <alt_busy_sleep>
      if (use_interrupts)
 401cd40:	e0bfff03 	ldbu	r2,-4(fp)
 401cd44:	10000926 	beq	r2,zero,401cd6c <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 401cd48:	00800044 	movi	r2,1
 401cd4c:	d8800015 	stw	r2,0(sp)
 401cd50:	000f883a 	mov	r7,zero
 401cd54:	e1bffe17 	ldw	r6,-8(fp)
 401cd58:	e17ffd17 	ldw	r5,-12(fp)
 401cd5c:	e13ffc17 	ldw	r4,-16(fp)
 401cd60:	401d2a80 	call	401d2a8 <alt_avalon_i2c_master_transmit_using_interrupts>
 401cd64:	e0bffa15 	stw	r2,-24(fp)
 401cd68:	00000806 	br	401cd8c <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 401cd6c:	00800044 	movi	r2,1
 401cd70:	d8800015 	stw	r2,0(sp)
 401cd74:	000f883a 	mov	r7,zero
 401cd78:	e1bffe17 	ldw	r6,-8(fp)
 401cd7c:	e17ffd17 	ldw	r5,-12(fp)
 401cd80:	e13ffc17 	ldw	r4,-16(fp)
 401cd84:	401d0e80 	call	401d0e8 <alt_avalon_i2c_master_transmit>
 401cd88:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401cd8c:	e0bffa17 	ldw	r2,-24(fp)
 401cd90:	10bffea0 	cmpeqi	r2,r2,-6
 401cd94:	1000061e 	bne	r2,zero,401cdb0 <alt_avalon_i2c_master_tx+0xb4>
 401cd98:	e0bffa17 	ldw	r2,-24(fp)
 401cd9c:	10bffee0 	cmpeqi	r2,r2,-5
 401cda0:	1000031e 	bne	r2,zero,401cdb0 <alt_avalon_i2c_master_tx+0xb4>
 401cda4:	e0bffa17 	ldw	r2,-24(fp)
 401cda8:	10bffe58 	cmpnei	r2,r2,-7
 401cdac:	1000061e 	bne	r2,zero,401cdc8 <alt_avalon_i2c_master_tx+0xcc>
 401cdb0:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 401cdb4:	e0bffb17 	ldw	r2,-20(fp)
 401cdb8:	10ffffc4 	addi	r3,r2,-1
 401cdbc:	e0fffb15 	stw	r3,-20(fp)
 401cdc0:	103fda1e 	bne	r2,zero,401cd2c <__alt_mem_onchip_memory2_0+0xfc01baac>
 401cdc4:	00000106 	br	401cdcc <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 401cdc8:	0001883a 	nop
    }

    return status;
 401cdcc:	e0bffa17 	ldw	r2,-24(fp)
}        
 401cdd0:	e037883a 	mov	sp,fp
 401cdd4:	dfc00117 	ldw	ra,4(sp)
 401cdd8:	df000017 	ldw	fp,0(sp)
 401cddc:	dec00204 	addi	sp,sp,8
 401cde0:	f800283a 	ret

0401cde4 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 401cde4:	defff704 	addi	sp,sp,-36
 401cde8:	dfc00815 	stw	ra,32(sp)
 401cdec:	df000715 	stw	fp,28(sp)
 401cdf0:	df000704 	addi	fp,sp,28
 401cdf4:	e13ffc15 	stw	r4,-16(fp)
 401cdf8:	e17ffd15 	stw	r5,-12(fp)
 401cdfc:	e1bffe15 	stw	r6,-8(fp)
 401ce00:	3805883a 	mov	r2,r7
 401ce04:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401ce08:	0089c404 	movi	r2,10000
 401ce0c:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 401ce10:	e0bfff03 	ldbu	r2,-4(fp)
 401ce14:	10003426 	beq	r2,zero,401cee8 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 401ce18:	00001706 	br	401ce78 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 401ce1c:	e0bffb17 	ldw	r2,-20(fp)
 401ce20:	108002a8 	cmpgeui	r2,r2,10
 401ce24:	1000021e 	bne	r2,zero,401ce30 <alt_avalon_i2c_master_rx+0x4c>
 401ce28:	0109c404 	movi	r4,10000
 401ce2c:	401ea840 	call	401ea84 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 401ce30:	00800044 	movi	r2,1
 401ce34:	d8800015 	stw	r2,0(sp)
 401ce38:	000f883a 	mov	r7,zero
 401ce3c:	e1bffe17 	ldw	r6,-8(fp)
 401ce40:	e17ffd17 	ldw	r5,-12(fp)
 401ce44:	e13ffc17 	ldw	r4,-16(fp)
 401ce48:	401d6c40 	call	401d6c4 <alt_avalon_i2c_master_receive_using_interrupts>
 401ce4c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401ce50:	e0bffa17 	ldw	r2,-24(fp)
 401ce54:	10bffea0 	cmpeqi	r2,r2,-6
 401ce58:	1000061e 	bne	r2,zero,401ce74 <alt_avalon_i2c_master_rx+0x90>
 401ce5c:	e0bffa17 	ldw	r2,-24(fp)
 401ce60:	10bffee0 	cmpeqi	r2,r2,-5
 401ce64:	1000031e 	bne	r2,zero,401ce74 <alt_avalon_i2c_master_rx+0x90>
 401ce68:	e0bffa17 	ldw	r2,-24(fp)
 401ce6c:	10bffe58 	cmpnei	r2,r2,-7
 401ce70:	1000221e 	bne	r2,zero,401cefc <alt_avalon_i2c_master_rx+0x118>
 401ce74:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 401ce78:	e0bffb17 	ldw	r2,-20(fp)
 401ce7c:	10ffffc4 	addi	r3,r2,-1
 401ce80:	e0fffb15 	stw	r3,-20(fp)
 401ce84:	103fe51e 	bne	r2,zero,401ce1c <__alt_mem_onchip_memory2_0+0xfc01bb9c>
 401ce88:	00001f06 	br	401cf08 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 401ce8c:	e0bffb17 	ldw	r2,-20(fp)
 401ce90:	108002a8 	cmpgeui	r2,r2,10
 401ce94:	1000021e 	bne	r2,zero,401cea0 <alt_avalon_i2c_master_rx+0xbc>
 401ce98:	0109c404 	movi	r4,10000
 401ce9c:	401ea840 	call	401ea84 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 401cea0:	00800044 	movi	r2,1
 401cea4:	d8800015 	stw	r2,0(sp)
 401cea8:	000f883a 	mov	r7,zero
 401ceac:	e1bffe17 	ldw	r6,-8(fp)
 401ceb0:	e17ffd17 	ldw	r5,-12(fp)
 401ceb4:	e13ffc17 	ldw	r4,-16(fp)
 401ceb8:	401d4b40 	call	401d4b4 <alt_avalon_i2c_master_receive>
 401cebc:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401cec0:	e0bffa17 	ldw	r2,-24(fp)
 401cec4:	10bffea0 	cmpeqi	r2,r2,-6
 401cec8:	1000061e 	bne	r2,zero,401cee4 <alt_avalon_i2c_master_rx+0x100>
 401cecc:	e0bffa17 	ldw	r2,-24(fp)
 401ced0:	10bffee0 	cmpeqi	r2,r2,-5
 401ced4:	1000031e 	bne	r2,zero,401cee4 <alt_avalon_i2c_master_rx+0x100>
 401ced8:	e0bffa17 	ldw	r2,-24(fp)
 401cedc:	10bffe58 	cmpnei	r2,r2,-7
 401cee0:	1000081e 	bne	r2,zero,401cf04 <alt_avalon_i2c_master_rx+0x120>
 401cee4:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 401cee8:	e0bffb17 	ldw	r2,-20(fp)
 401ceec:	10ffffc4 	addi	r3,r2,-1
 401cef0:	e0fffb15 	stw	r3,-20(fp)
 401cef4:	103fe51e 	bne	r2,zero,401ce8c <__alt_mem_onchip_memory2_0+0xfc01bc0c>
 401cef8:	00000306 	br	401cf08 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 401cefc:	0001883a 	nop
 401cf00:	00000106 	br	401cf08 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 401cf04:	0001883a 	nop
      }
    }
    
    return status;
 401cf08:	e0bffa17 	ldw	r2,-24(fp)
}        
 401cf0c:	e037883a 	mov	sp,fp
 401cf10:	dfc00117 	ldw	ra,4(sp)
 401cf14:	df000017 	ldw	fp,0(sp)
 401cf18:	dec00204 	addi	sp,sp,8
 401cf1c:	f800283a 	ret

0401cf20 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 401cf20:	defff604 	addi	sp,sp,-40
 401cf24:	dfc00915 	stw	ra,36(sp)
 401cf28:	df000815 	stw	fp,32(sp)
 401cf2c:	df000804 	addi	fp,sp,32
 401cf30:	e13ffb15 	stw	r4,-20(fp)
 401cf34:	e17ffc15 	stw	r5,-16(fp)
 401cf38:	e1bffd15 	stw	r6,-12(fp)
 401cf3c:	e1fffe15 	stw	r7,-8(fp)
 401cf40:	e0800317 	ldw	r2,12(fp)
 401cf44:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401cf48:	0089c404 	movi	r2,10000
 401cf4c:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 401cf50:	e0bfff03 	ldbu	r2,-4(fp)
 401cf54:	10005626 	beq	r2,zero,401d0b0 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 401cf58:	00002806 	br	401cffc <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 401cf5c:	e0bffa17 	ldw	r2,-24(fp)
 401cf60:	108002a8 	cmpgeui	r2,r2,10
 401cf64:	1000021e 	bne	r2,zero,401cf70 <alt_avalon_i2c_master_tx_rx+0x50>
 401cf68:	0109c404 	movi	r4,10000
 401cf6c:	401ea840 	call	401ea84 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 401cf70:	d8000015 	stw	zero,0(sp)
 401cf74:	000f883a 	mov	r7,zero
 401cf78:	e1bffd17 	ldw	r6,-12(fp)
 401cf7c:	e17ffc17 	ldw	r5,-16(fp)
 401cf80:	e13ffb17 	ldw	r4,-20(fp)
 401cf84:	401d2a80 	call	401d2a8 <alt_avalon_i2c_master_transmit_using_interrupts>
 401cf88:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401cf8c:	e0bff917 	ldw	r2,-28(fp)
 401cf90:	10bffea0 	cmpeqi	r2,r2,-6
 401cf94:	1000191e 	bne	r2,zero,401cffc <alt_avalon_i2c_master_tx_rx+0xdc>
 401cf98:	e0bff917 	ldw	r2,-28(fp)
 401cf9c:	10bffee0 	cmpeqi	r2,r2,-5
 401cfa0:	1000161e 	bne	r2,zero,401cffc <alt_avalon_i2c_master_tx_rx+0xdc>
 401cfa4:	e0bff917 	ldw	r2,-28(fp)
 401cfa8:	10bffe58 	cmpnei	r2,r2,-7
 401cfac:	1000011e 	bne	r2,zero,401cfb4 <alt_avalon_i2c_master_tx_rx+0x94>
 401cfb0:	00001206 	br	401cffc <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 401cfb4:	00800044 	movi	r2,1
 401cfb8:	d8800015 	stw	r2,0(sp)
 401cfbc:	01c00044 	movi	r7,1
 401cfc0:	e1800217 	ldw	r6,8(fp)
 401cfc4:	e17ffe17 	ldw	r5,-8(fp)
 401cfc8:	e13ffb17 	ldw	r4,-20(fp)
 401cfcc:	401d6c40 	call	401d6c4 <alt_avalon_i2c_master_receive_using_interrupts>
 401cfd0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401cfd4:	e0bff917 	ldw	r2,-28(fp)
 401cfd8:	10bffea0 	cmpeqi	r2,r2,-6
 401cfdc:	1000061e 	bne	r2,zero,401cff8 <alt_avalon_i2c_master_tx_rx+0xd8>
 401cfe0:	e0bff917 	ldw	r2,-28(fp)
 401cfe4:	10bffee0 	cmpeqi	r2,r2,-5
 401cfe8:	1000031e 	bne	r2,zero,401cff8 <alt_avalon_i2c_master_tx_rx+0xd8>
 401cfec:	e0bff917 	ldw	r2,-28(fp)
 401cff0:	10bffe58 	cmpnei	r2,r2,-7
 401cff4:	1000331e 	bne	r2,zero,401d0c4 <alt_avalon_i2c_master_tx_rx+0x1a4>
 401cff8:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 401cffc:	e0bffa17 	ldw	r2,-24(fp)
 401d000:	10ffffc4 	addi	r3,r2,-1
 401d004:	e0fffa15 	stw	r3,-24(fp)
 401d008:	103fd41e 	bne	r2,zero,401cf5c <__alt_mem_onchip_memory2_0+0xfc01bcdc>
 401d00c:	00003006 	br	401d0d0 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 401d010:	e0bffa17 	ldw	r2,-24(fp)
 401d014:	108002a8 	cmpgeui	r2,r2,10
 401d018:	1000021e 	bne	r2,zero,401d024 <alt_avalon_i2c_master_tx_rx+0x104>
 401d01c:	0109c404 	movi	r4,10000
 401d020:	401ea840 	call	401ea84 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 401d024:	d8000015 	stw	zero,0(sp)
 401d028:	000f883a 	mov	r7,zero
 401d02c:	e1bffd17 	ldw	r6,-12(fp)
 401d030:	e17ffc17 	ldw	r5,-16(fp)
 401d034:	e13ffb17 	ldw	r4,-20(fp)
 401d038:	401d0e80 	call	401d0e8 <alt_avalon_i2c_master_transmit>
 401d03c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d040:	e0bff917 	ldw	r2,-28(fp)
 401d044:	10bffea0 	cmpeqi	r2,r2,-6
 401d048:	1000191e 	bne	r2,zero,401d0b0 <alt_avalon_i2c_master_tx_rx+0x190>
 401d04c:	e0bff917 	ldw	r2,-28(fp)
 401d050:	10bffee0 	cmpeqi	r2,r2,-5
 401d054:	1000161e 	bne	r2,zero,401d0b0 <alt_avalon_i2c_master_tx_rx+0x190>
 401d058:	e0bff917 	ldw	r2,-28(fp)
 401d05c:	10bffe58 	cmpnei	r2,r2,-7
 401d060:	1000011e 	bne	r2,zero,401d068 <alt_avalon_i2c_master_tx_rx+0x148>
 401d064:	00001206 	br	401d0b0 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 401d068:	00800044 	movi	r2,1
 401d06c:	d8800015 	stw	r2,0(sp)
 401d070:	01c00044 	movi	r7,1
 401d074:	e1800217 	ldw	r6,8(fp)
 401d078:	e17ffe17 	ldw	r5,-8(fp)
 401d07c:	e13ffb17 	ldw	r4,-20(fp)
 401d080:	401d4b40 	call	401d4b4 <alt_avalon_i2c_master_receive>
 401d084:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d088:	e0bff917 	ldw	r2,-28(fp)
 401d08c:	10bffea0 	cmpeqi	r2,r2,-6
 401d090:	1000061e 	bne	r2,zero,401d0ac <alt_avalon_i2c_master_tx_rx+0x18c>
 401d094:	e0bff917 	ldw	r2,-28(fp)
 401d098:	10bffee0 	cmpeqi	r2,r2,-5
 401d09c:	1000031e 	bne	r2,zero,401d0ac <alt_avalon_i2c_master_tx_rx+0x18c>
 401d0a0:	e0bff917 	ldw	r2,-28(fp)
 401d0a4:	10bffe58 	cmpnei	r2,r2,-7
 401d0a8:	1000081e 	bne	r2,zero,401d0cc <alt_avalon_i2c_master_tx_rx+0x1ac>
 401d0ac:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 401d0b0:	e0bffa17 	ldw	r2,-24(fp)
 401d0b4:	10ffffc4 	addi	r3,r2,-1
 401d0b8:	e0fffa15 	stw	r3,-24(fp)
 401d0bc:	103fd41e 	bne	r2,zero,401d010 <__alt_mem_onchip_memory2_0+0xfc01bd90>
 401d0c0:	00000306 	br	401d0d0 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 401d0c4:	0001883a 	nop
 401d0c8:	00000106 	br	401d0d0 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 401d0cc:	0001883a 	nop
      }
    }
    
    return status;
 401d0d0:	e0bff917 	ldw	r2,-28(fp)
}                                       
 401d0d4:	e037883a 	mov	sp,fp
 401d0d8:	dfc00117 	ldw	ra,4(sp)
 401d0dc:	df000017 	ldw	fp,0(sp)
 401d0e0:	dec00204 	addi	sp,sp,8
 401d0e4:	f800283a 	ret

0401d0e8 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 401d0e8:	defff704 	addi	sp,sp,-36
 401d0ec:	dfc00815 	stw	ra,32(sp)
 401d0f0:	df000715 	stw	fp,28(sp)
 401d0f4:	df000704 	addi	fp,sp,28
 401d0f8:	e13ffb15 	stw	r4,-20(fp)
 401d0fc:	e17ffc15 	stw	r5,-16(fp)
 401d100:	e1bffd15 	stw	r6,-12(fp)
 401d104:	3807883a 	mov	r3,r7
 401d108:	e0800217 	ldw	r2,8(fp)
 401d10c:	e0fffe05 	stb	r3,-8(fp)
 401d110:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d114:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 401d118:	0149c404 	movi	r5,10000
 401d11c:	e13ffd17 	ldw	r4,-12(fp)
 401d120:	400cfd40 	call	400cfd4 <__mulsi3>
 401d124:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 401d128:	e0bffd17 	ldw	r2,-12(fp)
 401d12c:	1000021e 	bne	r2,zero,401d138 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401d130:	0005883a 	mov	r2,zero
 401d134:	00005706 	br	401d294 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401d138:	e0bffe03 	ldbu	r2,-8(fp)
 401d13c:	10000a1e 	bne	r2,zero,401d168 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401d140:	e13ffb17 	ldw	r4,-20(fp)
 401d144:	401c3640 	call	401c364 <alt_avalon_i2c_enable>
 401d148:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401d14c:	e0bffa17 	ldw	r2,-24(fp)
 401d150:	10000226 	beq	r2,zero,401d15c <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 401d154:	e0bffa17 	ldw	r2,-24(fp)
 401d158:	00004e06 	br	401d294 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401d15c:	01400704 	movi	r5,28
 401d160:	e13ffb17 	ldw	r4,-20(fp)
 401d164:	401d9500 	call	401d950 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 401d168:	e0bffe03 	ldbu	r2,-8(fp)
 401d16c:	100d883a 	mov	r6,r2
 401d170:	000b883a 	mov	r5,zero
 401d174:	e13ffb17 	ldw	r4,-20(fp)
 401d178:	401c9cc0 	call	401c9cc <alt_avalon_i2c_send_address>
 401d17c:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 401d180:	e0bffa17 	ldw	r2,-24(fp)
 401d184:	1000271e 	bne	r2,zero,401d224 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401d188:	00000f06 	br	401d1c8 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401d18c:	e0bffc17 	ldw	r2,-16(fp)
 401d190:	10800003 	ldbu	r2,0(r2)
 401d194:	10803fcc 	andi	r2,r2,255
 401d198:	000f883a 	mov	r7,zero
 401d19c:	000d883a 	mov	r6,zero
 401d1a0:	100b883a 	mov	r5,r2
 401d1a4:	e13ffb17 	ldw	r4,-20(fp)
 401d1a8:	401c8e80 	call	401c8e8 <alt_avalon_i2c_cmd_write>
 401d1ac:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 401d1b0:	e0bffc17 	ldw	r2,-16(fp)
 401d1b4:	10800044 	addi	r2,r2,1
 401d1b8:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401d1bc:	e0bffd17 	ldw	r2,-12(fp)
 401d1c0:	10bfffc4 	addi	r2,r2,-1
 401d1c4:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401d1c8:	e0bffd17 	ldw	r2,-12(fp)
 401d1cc:	108000b0 	cmpltui	r2,r2,2
 401d1d0:	1000021e 	bne	r2,zero,401d1dc <alt_avalon_i2c_master_transmit+0xf4>
 401d1d4:	e0bffa17 	ldw	r2,-24(fp)
 401d1d8:	103fec26 	beq	r2,zero,401d18c <__alt_mem_onchip_memory2_0+0xfc01bf0c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401d1dc:	e0bffa17 	ldw	r2,-24(fp)
 401d1e0:	1000101e 	bne	r2,zero,401d224 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401d1e4:	e0bffc17 	ldw	r2,-16(fp)
 401d1e8:	10800003 	ldbu	r2,0(r2)
 401d1ec:	10803fcc 	andi	r2,r2,255
 401d1f0:	e0ffff03 	ldbu	r3,-4(fp)
 401d1f4:	180f883a 	mov	r7,r3
 401d1f8:	000d883a 	mov	r6,zero
 401d1fc:	100b883a 	mov	r5,r2
 401d200:	e13ffb17 	ldw	r4,-20(fp)
 401d204:	401c8e80 	call	401c8e8 <alt_avalon_i2c_cmd_write>
 401d208:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 401d20c:	e0bffc17 	ldw	r2,-16(fp)
 401d210:	10800044 	addi	r2,r2,1
 401d214:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401d218:	e0bffd17 	ldw	r2,-12(fp)
 401d21c:	10bfffc4 	addi	r2,r2,-1
 401d220:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 401d224:	e0bfff03 	ldbu	r2,-4(fp)
 401d228:	1000101e 	bne	r2,zero,401d26c <alt_avalon_i2c_master_transmit+0x184>
 401d22c:	e0bffa17 	ldw	r2,-24(fp)
 401d230:	10001726 	beq	r2,zero,401d290 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d234:	00000d06 	br	401d26c <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401d238:	e0bff917 	ldw	r2,-28(fp)
 401d23c:	108002a8 	cmpgeui	r2,r2,10
 401d240:	1000021e 	bne	r2,zero,401d24c <alt_avalon_i2c_master_transmit+0x164>
 401d244:	0109c404 	movi	r4,10000
 401d248:	401ea840 	call	401ea84 <alt_busy_sleep>
            if (--timeout == 0)
 401d24c:	e0bff917 	ldw	r2,-28(fp)
 401d250:	10bfffc4 	addi	r2,r2,-1
 401d254:	e0bff915 	stw	r2,-28(fp)
 401d258:	e0bff917 	ldw	r2,-28(fp)
 401d25c:	1000031e 	bne	r2,zero,401d26c <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401d260:	00bfff84 	movi	r2,-2
 401d264:	e0bffa15 	stw	r2,-24(fp)
               break;
 401d268:	00000306 	br	401d278 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d26c:	e13ffb17 	ldw	r4,-20(fp)
 401d270:	401c7540 	call	401c754 <alt_avalon_i2c_is_busy>
 401d274:	103ff01e 	bne	r2,zero,401d238 <__alt_mem_onchip_memory2_0+0xfc01bfb8>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 401d278:	e0bffa04 	addi	r2,fp,-24
 401d27c:	100b883a 	mov	r5,r2
 401d280:	e13ffb17 	ldw	r4,-20(fp)
 401d284:	401cb280 	call	401cb28 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401d288:	e13ffb17 	ldw	r4,-20(fp)
 401d28c:	401c3fc0 	call	401c3fc <alt_avalon_i2c_disable>
    }


    return status;
 401d290:	e0bffa17 	ldw	r2,-24(fp)
}
 401d294:	e037883a 	mov	sp,fp
 401d298:	dfc00117 	ldw	ra,4(sp)
 401d29c:	df000017 	ldw	fp,0(sp)
 401d2a0:	dec00204 	addi	sp,sp,8
 401d2a4:	f800283a 	ret

0401d2a8 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 401d2a8:	defff604 	addi	sp,sp,-40
 401d2ac:	dfc00915 	stw	ra,36(sp)
 401d2b0:	df000815 	stw	fp,32(sp)
 401d2b4:	df000804 	addi	fp,sp,32
 401d2b8:	e13ffb15 	stw	r4,-20(fp)
 401d2bc:	e17ffc15 	stw	r5,-16(fp)
 401d2c0:	e1bffd15 	stw	r6,-12(fp)
 401d2c4:	3807883a 	mov	r3,r7
 401d2c8:	e0800217 	ldw	r2,8(fp)
 401d2cc:	e0fffe05 	stb	r3,-8(fp)
 401d2d0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d2d4:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 401d2d8:	0149c404 	movi	r5,10000
 401d2dc:	e13ffd17 	ldw	r4,-12(fp)
 401d2e0:	400cfd40 	call	400cfd4 <__mulsi3>
 401d2e4:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 401d2e8:	e0bffb17 	ldw	r2,-20(fp)
 401d2ec:	10800717 	ldw	r2,28(r2)
 401d2f0:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 401d2f4:	e0bffd17 	ldw	r2,-12(fp)
 401d2f8:	1000021e 	bne	r2,zero,401d304 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401d2fc:	0005883a 	mov	r2,zero
 401d300:	00006706 	br	401d4a0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 401d304:	e0bffb17 	ldw	r2,-20(fp)
 401d308:	10c00617 	ldw	r3,24(r2)
 401d30c:	008100b4 	movhi	r2,1026
 401d310:	10affa04 	addi	r2,r2,-16408
 401d314:	18800226 	beq	r3,r2,401d320 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 401d318:	00bfff44 	movi	r2,-3
 401d31c:	00006006 	br	401d4a0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401d320:	e0bffe03 	ldbu	r2,-8(fp)
 401d324:	10000a1e 	bne	r2,zero,401d350 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401d328:	e13ffb17 	ldw	r4,-20(fp)
 401d32c:	401c3640 	call	401c364 <alt_avalon_i2c_enable>
 401d330:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401d334:	e0bff817 	ldw	r2,-32(fp)
 401d338:	10000226 	beq	r2,zero,401d344 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 401d33c:	e0bff817 	ldw	r2,-32(fp)
 401d340:	00005706 	br	401d4a0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401d344:	01400704 	movi	r5,28
 401d348:	e13ffb17 	ldw	r4,-20(fp)
 401d34c:	401d9500 	call	401d950 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 401d350:	e0bffe03 	ldbu	r2,-8(fp)
 401d354:	100d883a 	mov	r6,r2
 401d358:	000b883a 	mov	r5,zero
 401d35c:	e13ffb17 	ldw	r4,-20(fp)
 401d360:	401c9cc0 	call	401c9cc <alt_avalon_i2c_send_address>
 401d364:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 401d368:	e0bff817 	ldw	r2,-32(fp)
 401d36c:	1000271e 	bne	r2,zero,401d40c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401d370:	00000f06 	br	401d3b0 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401d374:	e0bffc17 	ldw	r2,-16(fp)
 401d378:	10800003 	ldbu	r2,0(r2)
 401d37c:	10803fcc 	andi	r2,r2,255
 401d380:	000f883a 	mov	r7,zero
 401d384:	000d883a 	mov	r6,zero
 401d388:	100b883a 	mov	r5,r2
 401d38c:	e13ffb17 	ldw	r4,-20(fp)
 401d390:	401c8e80 	call	401c8e8 <alt_avalon_i2c_cmd_write>
 401d394:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 401d398:	e0bffc17 	ldw	r2,-16(fp)
 401d39c:	10800044 	addi	r2,r2,1
 401d3a0:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401d3a4:	e0bffd17 	ldw	r2,-12(fp)
 401d3a8:	10bfffc4 	addi	r2,r2,-1
 401d3ac:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401d3b0:	e0bffd17 	ldw	r2,-12(fp)
 401d3b4:	108000b0 	cmpltui	r2,r2,2
 401d3b8:	1000021e 	bne	r2,zero,401d3c4 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 401d3bc:	e0bff817 	ldw	r2,-32(fp)
 401d3c0:	103fec26 	beq	r2,zero,401d374 <__alt_mem_onchip_memory2_0+0xfc01c0f4>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401d3c4:	e0bff817 	ldw	r2,-32(fp)
 401d3c8:	1000101e 	bne	r2,zero,401d40c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401d3cc:	e0bffc17 	ldw	r2,-16(fp)
 401d3d0:	10800003 	ldbu	r2,0(r2)
 401d3d4:	10803fcc 	andi	r2,r2,255
 401d3d8:	e0ffff03 	ldbu	r3,-4(fp)
 401d3dc:	180f883a 	mov	r7,r3
 401d3e0:	000d883a 	mov	r6,zero
 401d3e4:	100b883a 	mov	r5,r2
 401d3e8:	e13ffb17 	ldw	r4,-20(fp)
 401d3ec:	401c8e80 	call	401c8e8 <alt_avalon_i2c_cmd_write>
 401d3f0:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 401d3f4:	e0bffc17 	ldw	r2,-16(fp)
 401d3f8:	10800044 	addi	r2,r2,1
 401d3fc:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401d400:	e0bffd17 	ldw	r2,-12(fp)
 401d404:	10bfffc4 	addi	r2,r2,-1
 401d408:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 401d40c:	e0bff817 	ldw	r2,-32(fp)
 401d410:	10001426 	beq	r2,zero,401d464 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d414:	00000d06 	br	401d44c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 401d418:	e0bff917 	ldw	r2,-28(fp)
 401d41c:	108002a8 	cmpgeui	r2,r2,10
 401d420:	1000021e 	bne	r2,zero,401d42c <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 401d424:	0109c404 	movi	r4,10000
 401d428:	401ea840 	call	401ea84 <alt_busy_sleep>
            if (--timeout == 0)
 401d42c:	e0bff917 	ldw	r2,-28(fp)
 401d430:	10bfffc4 	addi	r2,r2,-1
 401d434:	e0bff915 	stw	r2,-28(fp)
 401d438:	e0bff917 	ldw	r2,-28(fp)
 401d43c:	1000031e 	bne	r2,zero,401d44c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401d440:	00bfff84 	movi	r2,-2
 401d444:	e0bff815 	stw	r2,-32(fp)
               break;
 401d448:	00000306 	br	401d458 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d44c:	e13ffb17 	ldw	r4,-20(fp)
 401d450:	401c7540 	call	401c754 <alt_avalon_i2c_is_busy>
 401d454:	103ff01e 	bne	r2,zero,401d418 <__alt_mem_onchip_memory2_0+0xfc01c198>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401d458:	e13ffb17 	ldw	r4,-20(fp)
 401d45c:	401c3fc0 	call	401c3fc <alt_avalon_i2c_disable>
 401d460:	00000e06 	br	401d49c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 401d464:	e0bfff03 	ldbu	r2,-4(fp)
 401d468:	10000c26 	beq	r2,zero,401d49c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401d46c:	01400704 	movi	r5,28
 401d470:	e13ffb17 	ldw	r4,-20(fp)
 401d474:	401d9500 	call	401d950 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 401d478:	000b883a 	mov	r5,zero
 401d47c:	e13ffb17 	ldw	r4,-20(fp)
 401d480:	401db980 	call	401db98 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 401d484:	e0bffa17 	ldw	r2,-24(fp)
 401d488:	00c00044 	movi	r3,1
 401d48c:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 401d490:	01400044 	movi	r5,1
 401d494:	e13ffb17 	ldw	r4,-20(fp)
 401d498:	401d9f40 	call	401d9f4 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 401d49c:	e0bff817 	ldw	r2,-32(fp)
}
 401d4a0:	e037883a 	mov	sp,fp
 401d4a4:	dfc00117 	ldw	ra,4(sp)
 401d4a8:	df000017 	ldw	fp,0(sp)
 401d4ac:	dec00204 	addi	sp,sp,8
 401d4b0:	f800283a 	ret

0401d4b4 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 401d4b4:	defff404 	addi	sp,sp,-48
 401d4b8:	dfc00b15 	stw	ra,44(sp)
 401d4bc:	df000a15 	stw	fp,40(sp)
 401d4c0:	df000a04 	addi	fp,sp,40
 401d4c4:	e13ffb15 	stw	r4,-20(fp)
 401d4c8:	e17ffc15 	stw	r5,-16(fp)
 401d4cc:	e1bffd15 	stw	r6,-12(fp)
 401d4d0:	3807883a 	mov	r3,r7
 401d4d4:	e0800217 	ldw	r2,8(fp)
 401d4d8:	e0fffe05 	stb	r3,-8(fp)
 401d4dc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d4e0:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 401d4e4:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 401d4e8:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 401d4ec:	e0bffd17 	ldw	r2,-12(fp)
 401d4f0:	1000021e 	bne	r2,zero,401d4fc <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401d4f4:	0005883a 	mov	r2,zero
 401d4f8:	00006d06 	br	401d6b0 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401d4fc:	e0bffe03 	ldbu	r2,-8(fp)
 401d500:	10000a1e 	bne	r2,zero,401d52c <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401d504:	e13ffb17 	ldw	r4,-20(fp)
 401d508:	401c3640 	call	401c364 <alt_avalon_i2c_enable>
 401d50c:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401d510:	e0bff917 	ldw	r2,-28(fp)
 401d514:	10000226 	beq	r2,zero,401d520 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 401d518:	e0bff917 	ldw	r2,-28(fp)
 401d51c:	00006406 	br	401d6b0 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401d520:	01400704 	movi	r5,28
 401d524:	e13ffb17 	ldw	r4,-20(fp)
 401d528:	401d9500 	call	401d950 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 401d52c:	e0bffe03 	ldbu	r2,-8(fp)
 401d530:	100d883a 	mov	r6,r2
 401d534:	01400044 	movi	r5,1
 401d538:	e13ffb17 	ldw	r4,-20(fp)
 401d53c:	401c9cc0 	call	401c9cc <alt_avalon_i2c_send_address>
 401d540:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 401d544:	e0bff917 	ldw	r2,-28(fp)
 401d548:	1000341e 	bne	r2,zero,401d61c <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401d54c:	00001906 	br	401d5b4 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401d550:	000f883a 	mov	r7,zero
 401d554:	000d883a 	mov	r6,zero
 401d558:	000b883a 	mov	r5,zero
 401d55c:	e13ffb17 	ldw	r4,-20(fp)
 401d560:	401c8e80 	call	401c8e8 <alt_avalon_i2c_cmd_write>
 401d564:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 401d568:	e0bff817 	ldw	r2,-32(fp)
 401d56c:	10800044 	addi	r2,r2,1
 401d570:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 401d574:	e0bff917 	ldw	r2,-28(fp)
 401d578:	10000e1e 	bne	r2,zero,401d5b4 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 401d57c:	e0bffa04 	addi	r2,fp,-24
 401d580:	100f883a 	mov	r7,r2
 401d584:	000d883a 	mov	r6,zero
 401d588:	e17ffc17 	ldw	r5,-16(fp)
 401d58c:	e13ffb17 	ldw	r4,-20(fp)
 401d590:	401c7980 	call	401c798 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 401d594:	e0bffa17 	ldw	r2,-24(fp)
 401d598:	e0fffc17 	ldw	r3,-16(fp)
 401d59c:	1885883a 	add	r2,r3,r2
 401d5a0:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 401d5a4:	e0bffa17 	ldw	r2,-24(fp)
 401d5a8:	e0fff717 	ldw	r3,-36(fp)
 401d5ac:	1885883a 	add	r2,r3,r2
 401d5b0:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401d5b4:	e0bffd17 	ldw	r2,-12(fp)
 401d5b8:	10bfffc4 	addi	r2,r2,-1
 401d5bc:	e0fff817 	ldw	r3,-32(fp)
 401d5c0:	1880022e 	bgeu	r3,r2,401d5cc <alt_avalon_i2c_master_receive+0x118>
 401d5c4:	e0bff917 	ldw	r2,-28(fp)
 401d5c8:	103fe126 	beq	r2,zero,401d550 <__alt_mem_onchip_memory2_0+0xfc01c2d0>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401d5cc:	e0bff917 	ldw	r2,-28(fp)
 401d5d0:	1000121e 	bne	r2,zero,401d61c <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401d5d4:	e0bfff03 	ldbu	r2,-4(fp)
 401d5d8:	100f883a 	mov	r7,r2
 401d5dc:	000d883a 	mov	r6,zero
 401d5e0:	000b883a 	mov	r5,zero
 401d5e4:	e13ffb17 	ldw	r4,-20(fp)
 401d5e8:	401c8e80 	call	401c8e8 <alt_avalon_i2c_cmd_write>
 401d5ec:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 401d5f0:	00000a06 	br	401d61c <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 401d5f4:	e17ffc17 	ldw	r5,-16(fp)
 401d5f8:	e13ffb17 	ldw	r4,-20(fp)
 401d5fc:	401c8400 	call	401c840 <alt_avalon_i2c_rx_read>
 401d600:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 401d604:	e0bffc17 	ldw	r2,-16(fp)
 401d608:	10800044 	addi	r2,r2,1
 401d60c:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 401d610:	e0bff717 	ldw	r2,-36(fp)
 401d614:	10800044 	addi	r2,r2,1
 401d618:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 401d61c:	e0fff717 	ldw	r3,-36(fp)
 401d620:	e0bffd17 	ldw	r2,-12(fp)
 401d624:	1880022e 	bgeu	r3,r2,401d630 <alt_avalon_i2c_master_receive+0x17c>
 401d628:	e0bff917 	ldw	r2,-28(fp)
 401d62c:	103ff126 	beq	r2,zero,401d5f4 <__alt_mem_onchip_memory2_0+0xfc01c374>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 401d630:	e0bfff03 	ldbu	r2,-4(fp)
 401d634:	1000021e 	bne	r2,zero,401d640 <alt_avalon_i2c_master_receive+0x18c>
 401d638:	e0bff917 	ldw	r2,-28(fp)
 401d63c:	10001b26 	beq	r2,zero,401d6ac <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 401d640:	0149c404 	movi	r5,10000
 401d644:	e13ffd17 	ldw	r4,-12(fp)
 401d648:	400cfd40 	call	400cfd4 <__mulsi3>
 401d64c:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d650:	00000d06 	br	401d688 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401d654:	e0bff617 	ldw	r2,-40(fp)
 401d658:	108002a8 	cmpgeui	r2,r2,10
 401d65c:	1000021e 	bne	r2,zero,401d668 <alt_avalon_i2c_master_receive+0x1b4>
 401d660:	0109c404 	movi	r4,10000
 401d664:	401ea840 	call	401ea84 <alt_busy_sleep>
            if (--timeout == 0)
 401d668:	e0bff617 	ldw	r2,-40(fp)
 401d66c:	10bfffc4 	addi	r2,r2,-1
 401d670:	e0bff615 	stw	r2,-40(fp)
 401d674:	e0bff617 	ldw	r2,-40(fp)
 401d678:	1000031e 	bne	r2,zero,401d688 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401d67c:	00bfff84 	movi	r2,-2
 401d680:	e0bff915 	stw	r2,-28(fp)
               break;
 401d684:	00000306 	br	401d694 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d688:	e13ffb17 	ldw	r4,-20(fp)
 401d68c:	401c7540 	call	401c754 <alt_avalon_i2c_is_busy>
 401d690:	103ff01e 	bne	r2,zero,401d654 <__alt_mem_onchip_memory2_0+0xfc01c3d4>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 401d694:	e0bff904 	addi	r2,fp,-28
 401d698:	100b883a 	mov	r5,r2
 401d69c:	e13ffb17 	ldw	r4,-20(fp)
 401d6a0:	401cb280 	call	401cb28 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401d6a4:	e13ffb17 	ldw	r4,-20(fp)
 401d6a8:	401c3fc0 	call	401c3fc <alt_avalon_i2c_disable>
    }

    return status;
 401d6ac:	e0bff917 	ldw	r2,-28(fp)
}
 401d6b0:	e037883a 	mov	sp,fp
 401d6b4:	dfc00117 	ldw	ra,4(sp)
 401d6b8:	df000017 	ldw	fp,0(sp)
 401d6bc:	dec00204 	addi	sp,sp,8
 401d6c0:	f800283a 	ret

0401d6c4 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 401d6c4:	defff504 	addi	sp,sp,-44
 401d6c8:	dfc00a15 	stw	ra,40(sp)
 401d6cc:	df000915 	stw	fp,36(sp)
 401d6d0:	df000904 	addi	fp,sp,36
 401d6d4:	e13ffb15 	stw	r4,-20(fp)
 401d6d8:	e17ffc15 	stw	r5,-16(fp)
 401d6dc:	e1bffd15 	stw	r6,-12(fp)
 401d6e0:	3807883a 	mov	r3,r7
 401d6e4:	e0800217 	ldw	r2,8(fp)
 401d6e8:	e0fffe05 	stb	r3,-8(fp)
 401d6ec:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d6f0:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 401d6f4:	e0bffb17 	ldw	r2,-20(fp)
 401d6f8:	10800717 	ldw	r2,28(r2)
 401d6fc:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 401d700:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 401d704:	e0bffd17 	ldw	r2,-12(fp)
 401d708:	1000021e 	bne	r2,zero,401d714 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401d70c:	0005883a 	mov	r2,zero
 401d710:	00006306 	br	401d8a0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 401d714:	e0bffb17 	ldw	r2,-20(fp)
 401d718:	10c00617 	ldw	r3,24(r2)
 401d71c:	008100b4 	movhi	r2,1026
 401d720:	10affa04 	addi	r2,r2,-16408
 401d724:	18800226 	beq	r3,r2,401d730 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 401d728:	00bfff44 	movi	r2,-3
 401d72c:	00005c06 	br	401d8a0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401d730:	e0bffe03 	ldbu	r2,-8(fp)
 401d734:	10000a1e 	bne	r2,zero,401d760 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401d738:	e13ffb17 	ldw	r4,-20(fp)
 401d73c:	401c3640 	call	401c364 <alt_avalon_i2c_enable>
 401d740:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401d744:	e0bff717 	ldw	r2,-36(fp)
 401d748:	10000226 	beq	r2,zero,401d754 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 401d74c:	e0bff717 	ldw	r2,-36(fp)
 401d750:	00005306 	br	401d8a0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401d754:	01400704 	movi	r5,28
 401d758:	e13ffb17 	ldw	r4,-20(fp)
 401d75c:	401d9500 	call	401d950 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 401d760:	e0bffe03 	ldbu	r2,-8(fp)
 401d764:	100d883a 	mov	r6,r2
 401d768:	01400044 	movi	r5,1
 401d76c:	e13ffb17 	ldw	r4,-20(fp)
 401d770:	401c9cc0 	call	401c9cc <alt_avalon_i2c_send_address>
 401d774:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 401d778:	e0bff717 	ldw	r2,-36(fp)
 401d77c:	1000191e 	bne	r2,zero,401d7e4 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401d780:	00000906 	br	401d7a8 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401d784:	000f883a 	mov	r7,zero
 401d788:	000d883a 	mov	r6,zero
 401d78c:	000b883a 	mov	r5,zero
 401d790:	e13ffb17 	ldw	r4,-20(fp)
 401d794:	401c8e80 	call	401c8e8 <alt_avalon_i2c_cmd_write>
 401d798:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 401d79c:	e0bff917 	ldw	r2,-28(fp)
 401d7a0:	10800044 	addi	r2,r2,1
 401d7a4:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401d7a8:	e0bffd17 	ldw	r2,-12(fp)
 401d7ac:	10bfffc4 	addi	r2,r2,-1
 401d7b0:	e0fff917 	ldw	r3,-28(fp)
 401d7b4:	1880022e 	bgeu	r3,r2,401d7c0 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 401d7b8:	e0bff717 	ldw	r2,-36(fp)
 401d7bc:	103ff126 	beq	r2,zero,401d784 <__alt_mem_onchip_memory2_0+0xfc01c504>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401d7c0:	e0bff717 	ldw	r2,-36(fp)
 401d7c4:	1000071e 	bne	r2,zero,401d7e4 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401d7c8:	e0bfff03 	ldbu	r2,-4(fp)
 401d7cc:	100f883a 	mov	r7,r2
 401d7d0:	000d883a 	mov	r6,zero
 401d7d4:	000b883a 	mov	r5,zero
 401d7d8:	e13ffb17 	ldw	r4,-20(fp)
 401d7dc:	401c8e80 	call	401c8e8 <alt_avalon_i2c_cmd_write>
 401d7e0:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 401d7e4:	e0bff717 	ldw	r2,-36(fp)
 401d7e8:	10001826 	beq	r2,zero,401d84c <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 401d7ec:	0149c404 	movi	r5,10000
 401d7f0:	e13ffd17 	ldw	r4,-12(fp)
 401d7f4:	400cfd40 	call	400cfd4 <__mulsi3>
 401d7f8:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d7fc:	00000d06 	br	401d834 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401d800:	e0bff817 	ldw	r2,-32(fp)
 401d804:	108002a8 	cmpgeui	r2,r2,10
 401d808:	1000021e 	bne	r2,zero,401d814 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 401d80c:	0109c404 	movi	r4,10000
 401d810:	401ea840 	call	401ea84 <alt_busy_sleep>
            if (--timeout == 0)
 401d814:	e0bff817 	ldw	r2,-32(fp)
 401d818:	10bfffc4 	addi	r2,r2,-1
 401d81c:	e0bff815 	stw	r2,-32(fp)
 401d820:	e0bff817 	ldw	r2,-32(fp)
 401d824:	1000031e 	bne	r2,zero,401d834 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401d828:	00bfff84 	movi	r2,-2
 401d82c:	e0bff715 	stw	r2,-36(fp)
               break;
 401d830:	00000306 	br	401d840 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d834:	e13ffb17 	ldw	r4,-20(fp)
 401d838:	401c7540 	call	401c754 <alt_avalon_i2c_is_busy>
 401d83c:	103ff01e 	bne	r2,zero,401d800 <__alt_mem_onchip_memory2_0+0xfc01c580>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401d840:	e13ffb17 	ldw	r4,-20(fp)
 401d844:	401c3fc0 	call	401c3fc <alt_avalon_i2c_disable>
 401d848:	00001406 	br	401d89c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 401d84c:	e0bfff03 	ldbu	r2,-4(fp)
 401d850:	10001226 	beq	r2,zero,401d89c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401d854:	01400704 	movi	r5,28
 401d858:	e13ffb17 	ldw	r4,-20(fp)
 401d85c:	401d9500 	call	401d950 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 401d860:	000b883a 	mov	r5,zero
 401d864:	e13ffb17 	ldw	r4,-20(fp)
 401d868:	401dae80 	call	401dae8 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 401d86c:	e0bffa17 	ldw	r2,-24(fp)
 401d870:	00c00084 	movi	r3,2
 401d874:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 401d878:	e0bffa17 	ldw	r2,-24(fp)
 401d87c:	e0fffc17 	ldw	r3,-16(fp)
 401d880:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 401d884:	e0bffa17 	ldw	r2,-24(fp)
 401d888:	e0fffd17 	ldw	r3,-12(fp)
 401d88c:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 401d890:	01400084 	movi	r5,2
 401d894:	e13ffb17 	ldw	r4,-20(fp)
 401d898:	401d9f40 	call	401d9f4 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 401d89c:	e0bff717 	ldw	r2,-36(fp)
}
 401d8a0:	e037883a 	mov	sp,fp
 401d8a4:	dfc00117 	ldw	ra,4(sp)
 401d8a8:	df000017 	ldw	fp,0(sp)
 401d8ac:	dec00204 	addi	sp,sp,8
 401d8b0:	f800283a 	ret

0401d8b4 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 401d8b4:	defffd04 	addi	sp,sp,-12
 401d8b8:	df000215 	stw	fp,8(sp)
 401d8bc:	df000204 	addi	fp,sp,8
 401d8c0:	e13ffe15 	stw	r4,-8(fp)
 401d8c4:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 401d8c8:	e0bffe17 	ldw	r2,-8(fp)
 401d8cc:	10800317 	ldw	r2,12(r2)
 401d8d0:	10800404 	addi	r2,r2,16
 401d8d4:	10c00037 	ldwio	r3,0(r2)
 401d8d8:	e0bffe17 	ldw	r2,-8(fp)
 401d8dc:	10800317 	ldw	r2,12(r2)
 401d8e0:	10800304 	addi	r2,r2,12
 401d8e4:	10800037 	ldwio	r2,0(r2)
 401d8e8:	1884703a 	and	r2,r3,r2
 401d8ec:	1007883a 	mov	r3,r2
 401d8f0:	e0bfff17 	ldw	r2,-4(fp)
 401d8f4:	10c00015 	stw	r3,0(r2)
}
 401d8f8:	0001883a 	nop
 401d8fc:	e037883a 	mov	sp,fp
 401d900:	df000017 	ldw	fp,0(sp)
 401d904:	dec00104 	addi	sp,sp,4
 401d908:	f800283a 	ret

0401d90c <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 401d90c:	defffd04 	addi	sp,sp,-12
 401d910:	df000215 	stw	fp,8(sp)
 401d914:	df000204 	addi	fp,sp,8
 401d918:	e13ffe15 	stw	r4,-8(fp)
 401d91c:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 401d920:	e0bffe17 	ldw	r2,-8(fp)
 401d924:	10800317 	ldw	r2,12(r2)
 401d928:	10800404 	addi	r2,r2,16
 401d92c:	10800037 	ldwio	r2,0(r2)
 401d930:	1007883a 	mov	r3,r2
 401d934:	e0bfff17 	ldw	r2,-4(fp)
 401d938:	10c00015 	stw	r3,0(r2)
}
 401d93c:	0001883a 	nop
 401d940:	e037883a 	mov	sp,fp
 401d944:	df000017 	ldw	fp,0(sp)
 401d948:	dec00104 	addi	sp,sp,4
 401d94c:	f800283a 	ret

0401d950 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 401d950:	defffd04 	addi	sp,sp,-12
 401d954:	df000215 	stw	fp,8(sp)
 401d958:	df000204 	addi	fp,sp,8
 401d95c:	e13ffe15 	stw	r4,-8(fp)
 401d960:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 401d964:	e0bffe17 	ldw	r2,-8(fp)
 401d968:	10800317 	ldw	r2,12(r2)
 401d96c:	10800404 	addi	r2,r2,16
 401d970:	e0ffff17 	ldw	r3,-4(fp)
 401d974:	10c00035 	stwio	r3,0(r2)
}
 401d978:	0001883a 	nop
 401d97c:	e037883a 	mov	sp,fp
 401d980:	df000017 	ldw	fp,0(sp)
 401d984:	dec00104 	addi	sp,sp,4
 401d988:	f800283a 	ret

0401d98c <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 401d98c:	defffb04 	addi	sp,sp,-20
 401d990:	dfc00415 	stw	ra,16(sp)
 401d994:	df000315 	stw	fp,12(sp)
 401d998:	df000304 	addi	fp,sp,12
 401d99c:	e13ffe15 	stw	r4,-8(fp)
 401d9a0:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 401d9a4:	e17ffd04 	addi	r5,fp,-12
 401d9a8:	e13ffe17 	ldw	r4,-8(fp)
 401d9ac:	401da580 	call	401da58 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 401d9b0:	e0bfff17 	ldw	r2,-4(fp)
 401d9b4:	0086303a 	nor	r3,zero,r2
 401d9b8:	e0bffd17 	ldw	r2,-12(fp)
 401d9bc:	1884703a 	and	r2,r3,r2
 401d9c0:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 401d9c4:	e0bffe17 	ldw	r2,-8(fp)
 401d9c8:	10800317 	ldw	r2,12(r2)
 401d9cc:	10800304 	addi	r2,r2,12
 401d9d0:	e0fffd17 	ldw	r3,-12(fp)
 401d9d4:	18c007cc 	andi	r3,r3,31
 401d9d8:	10c00035 	stwio	r3,0(r2)
}
 401d9dc:	0001883a 	nop
 401d9e0:	e037883a 	mov	sp,fp
 401d9e4:	dfc00117 	ldw	ra,4(sp)
 401d9e8:	df000017 	ldw	fp,0(sp)
 401d9ec:	dec00204 	addi	sp,sp,8
 401d9f0:	f800283a 	ret

0401d9f4 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 401d9f4:	defffb04 	addi	sp,sp,-20
 401d9f8:	dfc00415 	stw	ra,16(sp)
 401d9fc:	df000315 	stw	fp,12(sp)
 401da00:	df000304 	addi	fp,sp,12
 401da04:	e13ffe15 	stw	r4,-8(fp)
 401da08:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 401da0c:	e17ffd04 	addi	r5,fp,-12
 401da10:	e13ffe17 	ldw	r4,-8(fp)
 401da14:	401da580 	call	401da58 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 401da18:	e0fffd17 	ldw	r3,-12(fp)
 401da1c:	e0bfff17 	ldw	r2,-4(fp)
 401da20:	1884b03a 	or	r2,r3,r2
 401da24:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 401da28:	e0bffe17 	ldw	r2,-8(fp)
 401da2c:	10800317 	ldw	r2,12(r2)
 401da30:	10800304 	addi	r2,r2,12
 401da34:	e0fffd17 	ldw	r3,-12(fp)
 401da38:	18c007cc 	andi	r3,r3,31
 401da3c:	10c00035 	stwio	r3,0(r2)
}
 401da40:	0001883a 	nop
 401da44:	e037883a 	mov	sp,fp
 401da48:	dfc00117 	ldw	ra,4(sp)
 401da4c:	df000017 	ldw	fp,0(sp)
 401da50:	dec00204 	addi	sp,sp,8
 401da54:	f800283a 	ret

0401da58 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 401da58:	defffd04 	addi	sp,sp,-12
 401da5c:	df000215 	stw	fp,8(sp)
 401da60:	df000204 	addi	fp,sp,8
 401da64:	e13ffe15 	stw	r4,-8(fp)
 401da68:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 401da6c:	e0bffe17 	ldw	r2,-8(fp)
 401da70:	10800317 	ldw	r2,12(r2)
 401da74:	10800304 	addi	r2,r2,12
 401da78:	10800037 	ldwio	r2,0(r2)
 401da7c:	10c007cc 	andi	r3,r2,31
 401da80:	e0bfff17 	ldw	r2,-4(fp)
 401da84:	10c00015 	stw	r3,0(r2)
}
 401da88:	0001883a 	nop
 401da8c:	e037883a 	mov	sp,fp
 401da90:	df000017 	ldw	fp,0(sp)
 401da94:	dec00104 	addi	sp,sp,4
 401da98:	f800283a 	ret

0401da9c <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 401da9c:	defffd04 	addi	sp,sp,-12
 401daa0:	df000215 	stw	fp,8(sp)
 401daa4:	df000204 	addi	fp,sp,8
 401daa8:	e13ffe15 	stw	r4,-8(fp)
 401daac:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 401dab0:	e0bffe17 	ldw	r2,-8(fp)
 401dab4:	10800317 	ldw	r2,12(r2)
 401dab8:	10800204 	addi	r2,r2,8
 401dabc:	10800037 	ldwio	r2,0(r2)
 401dac0:	10800c0c 	andi	r2,r2,48
 401dac4:	1005d13a 	srai	r2,r2,4
 401dac8:	1007883a 	mov	r3,r2
 401dacc:	e0bfff17 	ldw	r2,-4(fp)
 401dad0:	10c00015 	stw	r3,0(r2)
}
 401dad4:	0001883a 	nop
 401dad8:	e037883a 	mov	sp,fp
 401dadc:	df000017 	ldw	fp,0(sp)
 401dae0:	dec00104 	addi	sp,sp,4
 401dae4:	f800283a 	ret

0401dae8 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 401dae8:	defffd04 	addi	sp,sp,-12
 401daec:	df000215 	stw	fp,8(sp)
 401daf0:	df000204 	addi	fp,sp,8
 401daf4:	e13ffe15 	stw	r4,-8(fp)
 401daf8:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 401dafc:	e0bffe17 	ldw	r2,-8(fp)
 401db00:	10800317 	ldw	r2,12(r2)
 401db04:	10800204 	addi	r2,r2,8
 401db08:	e0fffe17 	ldw	r3,-8(fp)
 401db0c:	18c00317 	ldw	r3,12(r3)
 401db10:	18c00204 	addi	r3,r3,8
 401db14:	18c00037 	ldwio	r3,0(r3)
 401db18:	1809883a 	mov	r4,r3
 401db1c:	00fff3c4 	movi	r3,-49
 401db20:	20c8703a 	and	r4,r4,r3
 401db24:	e0ffff17 	ldw	r3,-4(fp)
 401db28:	1806913a 	slli	r3,r3,4
 401db2c:	18c00c0c 	andi	r3,r3,48
 401db30:	20c6b03a 	or	r3,r4,r3
 401db34:	10c00035 	stwio	r3,0(r2)
}
 401db38:	0001883a 	nop
 401db3c:	e037883a 	mov	sp,fp
 401db40:	df000017 	ldw	fp,0(sp)
 401db44:	dec00104 	addi	sp,sp,4
 401db48:	f800283a 	ret

0401db4c <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 401db4c:	defffd04 	addi	sp,sp,-12
 401db50:	df000215 	stw	fp,8(sp)
 401db54:	df000204 	addi	fp,sp,8
 401db58:	e13ffe15 	stw	r4,-8(fp)
 401db5c:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 401db60:	e0bffe17 	ldw	r2,-8(fp)
 401db64:	10800317 	ldw	r2,12(r2)
 401db68:	10800204 	addi	r2,r2,8
 401db6c:	10800037 	ldwio	r2,0(r2)
 401db70:	1080030c 	andi	r2,r2,12
 401db74:	1005d0ba 	srai	r2,r2,2
 401db78:	1007883a 	mov	r3,r2
 401db7c:	e0bfff17 	ldw	r2,-4(fp)
 401db80:	10c00015 	stw	r3,0(r2)
}
 401db84:	0001883a 	nop
 401db88:	e037883a 	mov	sp,fp
 401db8c:	df000017 	ldw	fp,0(sp)
 401db90:	dec00104 	addi	sp,sp,4
 401db94:	f800283a 	ret

0401db98 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 401db98:	defffd04 	addi	sp,sp,-12
 401db9c:	df000215 	stw	fp,8(sp)
 401dba0:	df000204 	addi	fp,sp,8
 401dba4:	e13ffe15 	stw	r4,-8(fp)
 401dba8:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 401dbac:	e0bffe17 	ldw	r2,-8(fp)
 401dbb0:	10800317 	ldw	r2,12(r2)
 401dbb4:	10c00204 	addi	r3,r2,8
 401dbb8:	e0bffe17 	ldw	r2,-8(fp)
 401dbbc:	10800317 	ldw	r2,12(r2)
 401dbc0:	10800204 	addi	r2,r2,8
 401dbc4:	10800037 	ldwio	r2,0(r2)
 401dbc8:	1009883a 	mov	r4,r2
 401dbcc:	00bffcc4 	movi	r2,-13
 401dbd0:	2088703a 	and	r4,r4,r2
 401dbd4:	e0bfff17 	ldw	r2,-4(fp)
 401dbd8:	1085883a 	add	r2,r2,r2
 401dbdc:	1085883a 	add	r2,r2,r2
 401dbe0:	1080030c 	andi	r2,r2,12
 401dbe4:	2084b03a 	or	r2,r4,r2
 401dbe8:	18800035 	stwio	r2,0(r3)
}
 401dbec:	0001883a 	nop
 401dbf0:	e037883a 	mov	sp,fp
 401dbf4:	df000017 	ldw	fp,0(sp)
 401dbf8:	dec00104 	addi	sp,sp,4
 401dbfc:	f800283a 	ret

0401dc00 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 401dc00:	defffa04 	addi	sp,sp,-24
 401dc04:	dfc00515 	stw	ra,20(sp)
 401dc08:	df000415 	stw	fp,16(sp)
 401dc0c:	df000404 	addi	fp,sp,16
 401dc10:	e13ffd15 	stw	r4,-12(fp)
 401dc14:	e17ffe15 	stw	r5,-8(fp)
 401dc18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401dc1c:	e0bffd17 	ldw	r2,-12(fp)
 401dc20:	10800017 	ldw	r2,0(r2)
 401dc24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 401dc28:	e0bffc17 	ldw	r2,-16(fp)
 401dc2c:	10c00a04 	addi	r3,r2,40
 401dc30:	e0bffd17 	ldw	r2,-12(fp)
 401dc34:	10800217 	ldw	r2,8(r2)
 401dc38:	100f883a 	mov	r7,r2
 401dc3c:	e1bfff17 	ldw	r6,-4(fp)
 401dc40:	e17ffe17 	ldw	r5,-8(fp)
 401dc44:	1809883a 	mov	r4,r3
 401dc48:	401e2280 	call	401e228 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 401dc4c:	e037883a 	mov	sp,fp
 401dc50:	dfc00117 	ldw	ra,4(sp)
 401dc54:	df000017 	ldw	fp,0(sp)
 401dc58:	dec00204 	addi	sp,sp,8
 401dc5c:	f800283a 	ret

0401dc60 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 401dc60:	defffa04 	addi	sp,sp,-24
 401dc64:	dfc00515 	stw	ra,20(sp)
 401dc68:	df000415 	stw	fp,16(sp)
 401dc6c:	df000404 	addi	fp,sp,16
 401dc70:	e13ffd15 	stw	r4,-12(fp)
 401dc74:	e17ffe15 	stw	r5,-8(fp)
 401dc78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401dc7c:	e0bffd17 	ldw	r2,-12(fp)
 401dc80:	10800017 	ldw	r2,0(r2)
 401dc84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 401dc88:	e0bffc17 	ldw	r2,-16(fp)
 401dc8c:	10c00a04 	addi	r3,r2,40
 401dc90:	e0bffd17 	ldw	r2,-12(fp)
 401dc94:	10800217 	ldw	r2,8(r2)
 401dc98:	100f883a 	mov	r7,r2
 401dc9c:	e1bfff17 	ldw	r6,-4(fp)
 401dca0:	e17ffe17 	ldw	r5,-8(fp)
 401dca4:	1809883a 	mov	r4,r3
 401dca8:	401e4440 	call	401e444 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 401dcac:	e037883a 	mov	sp,fp
 401dcb0:	dfc00117 	ldw	ra,4(sp)
 401dcb4:	df000017 	ldw	fp,0(sp)
 401dcb8:	dec00204 	addi	sp,sp,8
 401dcbc:	f800283a 	ret

0401dcc0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 401dcc0:	defffc04 	addi	sp,sp,-16
 401dcc4:	dfc00315 	stw	ra,12(sp)
 401dcc8:	df000215 	stw	fp,8(sp)
 401dccc:	df000204 	addi	fp,sp,8
 401dcd0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401dcd4:	e0bfff17 	ldw	r2,-4(fp)
 401dcd8:	10800017 	ldw	r2,0(r2)
 401dcdc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 401dce0:	e0bffe17 	ldw	r2,-8(fp)
 401dce4:	10c00a04 	addi	r3,r2,40
 401dce8:	e0bfff17 	ldw	r2,-4(fp)
 401dcec:	10800217 	ldw	r2,8(r2)
 401dcf0:	100b883a 	mov	r5,r2
 401dcf4:	1809883a 	mov	r4,r3
 401dcf8:	401e0d00 	call	401e0d0 <altera_avalon_jtag_uart_close>
}
 401dcfc:	e037883a 	mov	sp,fp
 401dd00:	dfc00117 	ldw	ra,4(sp)
 401dd04:	df000017 	ldw	fp,0(sp)
 401dd08:	dec00204 	addi	sp,sp,8
 401dd0c:	f800283a 	ret

0401dd10 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 401dd10:	defffa04 	addi	sp,sp,-24
 401dd14:	dfc00515 	stw	ra,20(sp)
 401dd18:	df000415 	stw	fp,16(sp)
 401dd1c:	df000404 	addi	fp,sp,16
 401dd20:	e13ffd15 	stw	r4,-12(fp)
 401dd24:	e17ffe15 	stw	r5,-8(fp)
 401dd28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 401dd2c:	e0bffd17 	ldw	r2,-12(fp)
 401dd30:	10800017 	ldw	r2,0(r2)
 401dd34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 401dd38:	e0bffc17 	ldw	r2,-16(fp)
 401dd3c:	10800a04 	addi	r2,r2,40
 401dd40:	e1bfff17 	ldw	r6,-4(fp)
 401dd44:	e17ffe17 	ldw	r5,-8(fp)
 401dd48:	1009883a 	mov	r4,r2
 401dd4c:	401e1380 	call	401e138 <altera_avalon_jtag_uart_ioctl>
}
 401dd50:	e037883a 	mov	sp,fp
 401dd54:	dfc00117 	ldw	ra,4(sp)
 401dd58:	df000017 	ldw	fp,0(sp)
 401dd5c:	dec00204 	addi	sp,sp,8
 401dd60:	f800283a 	ret

0401dd64 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 401dd64:	defffa04 	addi	sp,sp,-24
 401dd68:	dfc00515 	stw	ra,20(sp)
 401dd6c:	df000415 	stw	fp,16(sp)
 401dd70:	df000404 	addi	fp,sp,16
 401dd74:	e13ffd15 	stw	r4,-12(fp)
 401dd78:	e17ffe15 	stw	r5,-8(fp)
 401dd7c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401dd80:	e0bffd17 	ldw	r2,-12(fp)
 401dd84:	00c00044 	movi	r3,1
 401dd88:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 401dd8c:	e0bffd17 	ldw	r2,-12(fp)
 401dd90:	10800017 	ldw	r2,0(r2)
 401dd94:	10800104 	addi	r2,r2,4
 401dd98:	1007883a 	mov	r3,r2
 401dd9c:	e0bffd17 	ldw	r2,-12(fp)
 401dda0:	10800817 	ldw	r2,32(r2)
 401dda4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 401dda8:	e0bffe17 	ldw	r2,-8(fp)
 401ddac:	e0ffff17 	ldw	r3,-4(fp)
 401ddb0:	d8000015 	stw	zero,0(sp)
 401ddb4:	e1fffd17 	ldw	r7,-12(fp)
 401ddb8:	018100b4 	movhi	r6,1026
 401ddbc:	31b78904 	addi	r6,r6,-8668
 401ddc0:	180b883a 	mov	r5,r3
 401ddc4:	1009883a 	mov	r4,r2
 401ddc8:	401ee4c0 	call	401ee4c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 401ddcc:	e0bffd17 	ldw	r2,-12(fp)
 401ddd0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 401ddd4:	e0bffd17 	ldw	r2,-12(fp)
 401ddd8:	10800204 	addi	r2,r2,8
 401dddc:	d0f24717 	ldw	r3,-14052(gp)
 401dde0:	e1fffd17 	ldw	r7,-12(fp)
 401dde4:	018100b4 	movhi	r6,1026
 401dde8:	31b80c04 	addi	r6,r6,-8144
 401ddec:	180b883a 	mov	r5,r3
 401ddf0:	1009883a 	mov	r4,r2
 401ddf4:	401e9580 	call	401e958 <alt_alarm_start>
 401ddf8:	1000040e 	bge	r2,zero,401de0c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 401ddfc:	e0fffd17 	ldw	r3,-12(fp)
 401de00:	00a00034 	movhi	r2,32768
 401de04:	10bfffc4 	addi	r2,r2,-1
 401de08:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 401de0c:	0001883a 	nop
 401de10:	e037883a 	mov	sp,fp
 401de14:	dfc00117 	ldw	ra,4(sp)
 401de18:	df000017 	ldw	fp,0(sp)
 401de1c:	dec00204 	addi	sp,sp,8
 401de20:	f800283a 	ret

0401de24 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 401de24:	defff804 	addi	sp,sp,-32
 401de28:	df000715 	stw	fp,28(sp)
 401de2c:	df000704 	addi	fp,sp,28
 401de30:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 401de34:	e0bfff17 	ldw	r2,-4(fp)
 401de38:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 401de3c:	e0bffb17 	ldw	r2,-20(fp)
 401de40:	10800017 	ldw	r2,0(r2)
 401de44:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401de48:	e0bffc17 	ldw	r2,-16(fp)
 401de4c:	10800104 	addi	r2,r2,4
 401de50:	10800037 	ldwio	r2,0(r2)
 401de54:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 401de58:	e0bffd17 	ldw	r2,-12(fp)
 401de5c:	1080c00c 	andi	r2,r2,768
 401de60:	10006d26 	beq	r2,zero,401e018 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 401de64:	e0bffd17 	ldw	r2,-12(fp)
 401de68:	1080400c 	andi	r2,r2,256
 401de6c:	10003526 	beq	r2,zero,401df44 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 401de70:	00800074 	movhi	r2,1
 401de74:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401de78:	e0bffb17 	ldw	r2,-20(fp)
 401de7c:	10800a17 	ldw	r2,40(r2)
 401de80:	10800044 	addi	r2,r2,1
 401de84:	1081ffcc 	andi	r2,r2,2047
 401de88:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 401de8c:	e0bffb17 	ldw	r2,-20(fp)
 401de90:	10c00b17 	ldw	r3,44(r2)
 401de94:	e0bffe17 	ldw	r2,-8(fp)
 401de98:	18801526 	beq	r3,r2,401def0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 401de9c:	e0bffc17 	ldw	r2,-16(fp)
 401dea0:	10800037 	ldwio	r2,0(r2)
 401dea4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 401dea8:	e0bff917 	ldw	r2,-28(fp)
 401deac:	10a0000c 	andi	r2,r2,32768
 401deb0:	10001126 	beq	r2,zero,401def8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 401deb4:	e0bffb17 	ldw	r2,-20(fp)
 401deb8:	10800a17 	ldw	r2,40(r2)
 401debc:	e0fff917 	ldw	r3,-28(fp)
 401dec0:	1809883a 	mov	r4,r3
 401dec4:	e0fffb17 	ldw	r3,-20(fp)
 401dec8:	1885883a 	add	r2,r3,r2
 401decc:	10800e04 	addi	r2,r2,56
 401ded0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401ded4:	e0bffb17 	ldw	r2,-20(fp)
 401ded8:	10800a17 	ldw	r2,40(r2)
 401dedc:	10800044 	addi	r2,r2,1
 401dee0:	10c1ffcc 	andi	r3,r2,2047
 401dee4:	e0bffb17 	ldw	r2,-20(fp)
 401dee8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 401deec:	003fe206 	br	401de78 <__alt_mem_onchip_memory2_0+0xfc01cbf8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 401def0:	0001883a 	nop
 401def4:	00000106 	br	401defc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 401def8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 401defc:	e0bff917 	ldw	r2,-28(fp)
 401df00:	10bfffec 	andhi	r2,r2,65535
 401df04:	10000f26 	beq	r2,zero,401df44 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401df08:	e0bffb17 	ldw	r2,-20(fp)
 401df0c:	10c00817 	ldw	r3,32(r2)
 401df10:	00bfff84 	movi	r2,-2
 401df14:	1886703a 	and	r3,r3,r2
 401df18:	e0bffb17 	ldw	r2,-20(fp)
 401df1c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 401df20:	e0bffc17 	ldw	r2,-16(fp)
 401df24:	10800104 	addi	r2,r2,4
 401df28:	1007883a 	mov	r3,r2
 401df2c:	e0bffb17 	ldw	r2,-20(fp)
 401df30:	10800817 	ldw	r2,32(r2)
 401df34:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401df38:	e0bffc17 	ldw	r2,-16(fp)
 401df3c:	10800104 	addi	r2,r2,4
 401df40:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 401df44:	e0bffd17 	ldw	r2,-12(fp)
 401df48:	1080800c 	andi	r2,r2,512
 401df4c:	103fbe26 	beq	r2,zero,401de48 <__alt_mem_onchip_memory2_0+0xfc01cbc8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 401df50:	e0bffd17 	ldw	r2,-12(fp)
 401df54:	1004d43a 	srli	r2,r2,16
 401df58:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 401df5c:	00001406 	br	401dfb0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 401df60:	e0bffc17 	ldw	r2,-16(fp)
 401df64:	e0fffb17 	ldw	r3,-20(fp)
 401df68:	18c00d17 	ldw	r3,52(r3)
 401df6c:	e13ffb17 	ldw	r4,-20(fp)
 401df70:	20c7883a 	add	r3,r4,r3
 401df74:	18c20e04 	addi	r3,r3,2104
 401df78:	18c00003 	ldbu	r3,0(r3)
 401df7c:	18c03fcc 	andi	r3,r3,255
 401df80:	18c0201c 	xori	r3,r3,128
 401df84:	18ffe004 	addi	r3,r3,-128
 401df88:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401df8c:	e0bffb17 	ldw	r2,-20(fp)
 401df90:	10800d17 	ldw	r2,52(r2)
 401df94:	10800044 	addi	r2,r2,1
 401df98:	10c1ffcc 	andi	r3,r2,2047
 401df9c:	e0bffb17 	ldw	r2,-20(fp)
 401dfa0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 401dfa4:	e0bffa17 	ldw	r2,-24(fp)
 401dfa8:	10bfffc4 	addi	r2,r2,-1
 401dfac:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 401dfb0:	e0bffa17 	ldw	r2,-24(fp)
 401dfb4:	10000526 	beq	r2,zero,401dfcc <altera_avalon_jtag_uart_irq+0x1a8>
 401dfb8:	e0bffb17 	ldw	r2,-20(fp)
 401dfbc:	10c00d17 	ldw	r3,52(r2)
 401dfc0:	e0bffb17 	ldw	r2,-20(fp)
 401dfc4:	10800c17 	ldw	r2,48(r2)
 401dfc8:	18bfe51e 	bne	r3,r2,401df60 <__alt_mem_onchip_memory2_0+0xfc01cce0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 401dfcc:	e0bffa17 	ldw	r2,-24(fp)
 401dfd0:	103f9d26 	beq	r2,zero,401de48 <__alt_mem_onchip_memory2_0+0xfc01cbc8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401dfd4:	e0bffb17 	ldw	r2,-20(fp)
 401dfd8:	10c00817 	ldw	r3,32(r2)
 401dfdc:	00bfff44 	movi	r2,-3
 401dfe0:	1886703a 	and	r3,r3,r2
 401dfe4:	e0bffb17 	ldw	r2,-20(fp)
 401dfe8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401dfec:	e0bffb17 	ldw	r2,-20(fp)
 401dff0:	10800017 	ldw	r2,0(r2)
 401dff4:	10800104 	addi	r2,r2,4
 401dff8:	1007883a 	mov	r3,r2
 401dffc:	e0bffb17 	ldw	r2,-20(fp)
 401e000:	10800817 	ldw	r2,32(r2)
 401e004:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401e008:	e0bffc17 	ldw	r2,-16(fp)
 401e00c:	10800104 	addi	r2,r2,4
 401e010:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 401e014:	003f8c06 	br	401de48 <__alt_mem_onchip_memory2_0+0xfc01cbc8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 401e018:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 401e01c:	0001883a 	nop
 401e020:	e037883a 	mov	sp,fp
 401e024:	df000017 	ldw	fp,0(sp)
 401e028:	dec00104 	addi	sp,sp,4
 401e02c:	f800283a 	ret

0401e030 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 401e030:	defff804 	addi	sp,sp,-32
 401e034:	df000715 	stw	fp,28(sp)
 401e038:	df000704 	addi	fp,sp,28
 401e03c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 401e040:	e0bffb17 	ldw	r2,-20(fp)
 401e044:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 401e048:	e0bff917 	ldw	r2,-28(fp)
 401e04c:	10800017 	ldw	r2,0(r2)
 401e050:	10800104 	addi	r2,r2,4
 401e054:	10800037 	ldwio	r2,0(r2)
 401e058:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 401e05c:	e0bffa17 	ldw	r2,-24(fp)
 401e060:	1081000c 	andi	r2,r2,1024
 401e064:	10000b26 	beq	r2,zero,401e094 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 401e068:	e0bff917 	ldw	r2,-28(fp)
 401e06c:	10800017 	ldw	r2,0(r2)
 401e070:	10800104 	addi	r2,r2,4
 401e074:	1007883a 	mov	r3,r2
 401e078:	e0bff917 	ldw	r2,-28(fp)
 401e07c:	10800817 	ldw	r2,32(r2)
 401e080:	10810014 	ori	r2,r2,1024
 401e084:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 401e088:	e0bff917 	ldw	r2,-28(fp)
 401e08c:	10000915 	stw	zero,36(r2)
 401e090:	00000a06 	br	401e0bc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 401e094:	e0bff917 	ldw	r2,-28(fp)
 401e098:	10c00917 	ldw	r3,36(r2)
 401e09c:	00a00034 	movhi	r2,32768
 401e0a0:	10bfff04 	addi	r2,r2,-4
 401e0a4:	10c00536 	bltu	r2,r3,401e0bc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 401e0a8:	e0bff917 	ldw	r2,-28(fp)
 401e0ac:	10800917 	ldw	r2,36(r2)
 401e0b0:	10c00044 	addi	r3,r2,1
 401e0b4:	e0bff917 	ldw	r2,-28(fp)
 401e0b8:	10c00915 	stw	r3,36(r2)
 401e0bc:	d0b24717 	ldw	r2,-14052(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 401e0c0:	e037883a 	mov	sp,fp
 401e0c4:	df000017 	ldw	fp,0(sp)
 401e0c8:	dec00104 	addi	sp,sp,4
 401e0cc:	f800283a 	ret

0401e0d0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 401e0d0:	defffd04 	addi	sp,sp,-12
 401e0d4:	df000215 	stw	fp,8(sp)
 401e0d8:	df000204 	addi	fp,sp,8
 401e0dc:	e13ffe15 	stw	r4,-8(fp)
 401e0e0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401e0e4:	00000506 	br	401e0fc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 401e0e8:	e0bfff17 	ldw	r2,-4(fp)
 401e0ec:	1090000c 	andi	r2,r2,16384
 401e0f0:	10000226 	beq	r2,zero,401e0fc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 401e0f4:	00bffd44 	movi	r2,-11
 401e0f8:	00000b06 	br	401e128 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401e0fc:	e0bffe17 	ldw	r2,-8(fp)
 401e100:	10c00d17 	ldw	r3,52(r2)
 401e104:	e0bffe17 	ldw	r2,-8(fp)
 401e108:	10800c17 	ldw	r2,48(r2)
 401e10c:	18800526 	beq	r3,r2,401e124 <altera_avalon_jtag_uart_close+0x54>
 401e110:	e0bffe17 	ldw	r2,-8(fp)
 401e114:	10c00917 	ldw	r3,36(r2)
 401e118:	e0bffe17 	ldw	r2,-8(fp)
 401e11c:	10800117 	ldw	r2,4(r2)
 401e120:	18bff136 	bltu	r3,r2,401e0e8 <__alt_mem_onchip_memory2_0+0xfc01ce68>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 401e124:	0005883a 	mov	r2,zero
}
 401e128:	e037883a 	mov	sp,fp
 401e12c:	df000017 	ldw	fp,0(sp)
 401e130:	dec00104 	addi	sp,sp,4
 401e134:	f800283a 	ret

0401e138 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 401e138:	defffa04 	addi	sp,sp,-24
 401e13c:	df000515 	stw	fp,20(sp)
 401e140:	df000504 	addi	fp,sp,20
 401e144:	e13ffd15 	stw	r4,-12(fp)
 401e148:	e17ffe15 	stw	r5,-8(fp)
 401e14c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 401e150:	00bff9c4 	movi	r2,-25
 401e154:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 401e158:	e0bffe17 	ldw	r2,-8(fp)
 401e15c:	10da8060 	cmpeqi	r3,r2,27137
 401e160:	1800031e 	bne	r3,zero,401e170 <altera_avalon_jtag_uart_ioctl+0x38>
 401e164:	109a80a0 	cmpeqi	r2,r2,27138
 401e168:	1000181e 	bne	r2,zero,401e1cc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 401e16c:	00002906 	br	401e214 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 401e170:	e0bffd17 	ldw	r2,-12(fp)
 401e174:	10c00117 	ldw	r3,4(r2)
 401e178:	00a00034 	movhi	r2,32768
 401e17c:	10bfffc4 	addi	r2,r2,-1
 401e180:	18802126 	beq	r3,r2,401e208 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 401e184:	e0bfff17 	ldw	r2,-4(fp)
 401e188:	10800017 	ldw	r2,0(r2)
 401e18c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 401e190:	e0bffc17 	ldw	r2,-16(fp)
 401e194:	10800090 	cmplti	r2,r2,2
 401e198:	1000061e 	bne	r2,zero,401e1b4 <altera_avalon_jtag_uart_ioctl+0x7c>
 401e19c:	e0fffc17 	ldw	r3,-16(fp)
 401e1a0:	00a00034 	movhi	r2,32768
 401e1a4:	10bfffc4 	addi	r2,r2,-1
 401e1a8:	18800226 	beq	r3,r2,401e1b4 <altera_avalon_jtag_uart_ioctl+0x7c>
 401e1ac:	e0bffc17 	ldw	r2,-16(fp)
 401e1b0:	00000206 	br	401e1bc <altera_avalon_jtag_uart_ioctl+0x84>
 401e1b4:	00a00034 	movhi	r2,32768
 401e1b8:	10bfff84 	addi	r2,r2,-2
 401e1bc:	e0fffd17 	ldw	r3,-12(fp)
 401e1c0:	18800115 	stw	r2,4(r3)
      rc = 0;
 401e1c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401e1c8:	00000f06 	br	401e208 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401e1cc:	e0bffd17 	ldw	r2,-12(fp)
 401e1d0:	10c00117 	ldw	r3,4(r2)
 401e1d4:	00a00034 	movhi	r2,32768
 401e1d8:	10bfffc4 	addi	r2,r2,-1
 401e1dc:	18800c26 	beq	r3,r2,401e210 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 401e1e0:	e0bffd17 	ldw	r2,-12(fp)
 401e1e4:	10c00917 	ldw	r3,36(r2)
 401e1e8:	e0bffd17 	ldw	r2,-12(fp)
 401e1ec:	10800117 	ldw	r2,4(r2)
 401e1f0:	1885803a 	cmpltu	r2,r3,r2
 401e1f4:	10c03fcc 	andi	r3,r2,255
 401e1f8:	e0bfff17 	ldw	r2,-4(fp)
 401e1fc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 401e200:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401e204:	00000206 	br	401e210 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 401e208:	0001883a 	nop
 401e20c:	00000106 	br	401e214 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 401e210:	0001883a 	nop

  default:
    break;
  }

  return rc;
 401e214:	e0bffb17 	ldw	r2,-20(fp)
}
 401e218:	e037883a 	mov	sp,fp
 401e21c:	df000017 	ldw	fp,0(sp)
 401e220:	dec00104 	addi	sp,sp,4
 401e224:	f800283a 	ret

0401e228 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 401e228:	defff304 	addi	sp,sp,-52
 401e22c:	dfc00c15 	stw	ra,48(sp)
 401e230:	df000b15 	stw	fp,44(sp)
 401e234:	df000b04 	addi	fp,sp,44
 401e238:	e13ffc15 	stw	r4,-16(fp)
 401e23c:	e17ffd15 	stw	r5,-12(fp)
 401e240:	e1bffe15 	stw	r6,-8(fp)
 401e244:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 401e248:	e0bffd17 	ldw	r2,-12(fp)
 401e24c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401e250:	00004706 	br	401e370 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401e254:	e0bffc17 	ldw	r2,-16(fp)
 401e258:	10800a17 	ldw	r2,40(r2)
 401e25c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 401e260:	e0bffc17 	ldw	r2,-16(fp)
 401e264:	10800b17 	ldw	r2,44(r2)
 401e268:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 401e26c:	e0fff717 	ldw	r3,-36(fp)
 401e270:	e0bff817 	ldw	r2,-32(fp)
 401e274:	18800536 	bltu	r3,r2,401e28c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 401e278:	e0fff717 	ldw	r3,-36(fp)
 401e27c:	e0bff817 	ldw	r2,-32(fp)
 401e280:	1885c83a 	sub	r2,r3,r2
 401e284:	e0bff615 	stw	r2,-40(fp)
 401e288:	00000406 	br	401e29c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 401e28c:	00c20004 	movi	r3,2048
 401e290:	e0bff817 	ldw	r2,-32(fp)
 401e294:	1885c83a 	sub	r2,r3,r2
 401e298:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401e29c:	e0bff617 	ldw	r2,-40(fp)
 401e2a0:	10001e26 	beq	r2,zero,401e31c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 401e2a4:	e0fffe17 	ldw	r3,-8(fp)
 401e2a8:	e0bff617 	ldw	r2,-40(fp)
 401e2ac:	1880022e 	bgeu	r3,r2,401e2b8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 401e2b0:	e0bffe17 	ldw	r2,-8(fp)
 401e2b4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 401e2b8:	e0bffc17 	ldw	r2,-16(fp)
 401e2bc:	10c00e04 	addi	r3,r2,56
 401e2c0:	e0bff817 	ldw	r2,-32(fp)
 401e2c4:	1885883a 	add	r2,r3,r2
 401e2c8:	e1bff617 	ldw	r6,-40(fp)
 401e2cc:	100b883a 	mov	r5,r2
 401e2d0:	e13ff517 	ldw	r4,-44(fp)
 401e2d4:	400e9480 	call	400e948 <memcpy>
      ptr   += n;
 401e2d8:	e0fff517 	ldw	r3,-44(fp)
 401e2dc:	e0bff617 	ldw	r2,-40(fp)
 401e2e0:	1885883a 	add	r2,r3,r2
 401e2e4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 401e2e8:	e0fffe17 	ldw	r3,-8(fp)
 401e2ec:	e0bff617 	ldw	r2,-40(fp)
 401e2f0:	1885c83a 	sub	r2,r3,r2
 401e2f4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e2f8:	e0fff817 	ldw	r3,-32(fp)
 401e2fc:	e0bff617 	ldw	r2,-40(fp)
 401e300:	1885883a 	add	r2,r3,r2
 401e304:	10c1ffcc 	andi	r3,r2,2047
 401e308:	e0bffc17 	ldw	r2,-16(fp)
 401e30c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 401e310:	e0bffe17 	ldw	r2,-8(fp)
 401e314:	00bfcf16 	blt	zero,r2,401e254 <__alt_mem_onchip_memory2_0+0xfc01cfd4>
 401e318:	00000106 	br	401e320 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 401e31c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 401e320:	e0fff517 	ldw	r3,-44(fp)
 401e324:	e0bffd17 	ldw	r2,-12(fp)
 401e328:	1880141e 	bne	r3,r2,401e37c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401e32c:	e0bfff17 	ldw	r2,-4(fp)
 401e330:	1090000c 	andi	r2,r2,16384
 401e334:	1000131e 	bne	r2,zero,401e384 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 401e338:	0001883a 	nop
 401e33c:	e0bffc17 	ldw	r2,-16(fp)
 401e340:	10c00a17 	ldw	r3,40(r2)
 401e344:	e0bff717 	ldw	r2,-36(fp)
 401e348:	1880051e 	bne	r3,r2,401e360 <altera_avalon_jtag_uart_read+0x138>
 401e34c:	e0bffc17 	ldw	r2,-16(fp)
 401e350:	10c00917 	ldw	r3,36(r2)
 401e354:	e0bffc17 	ldw	r2,-16(fp)
 401e358:	10800117 	ldw	r2,4(r2)
 401e35c:	18bff736 	bltu	r3,r2,401e33c <__alt_mem_onchip_memory2_0+0xfc01d0bc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 401e360:	e0bffc17 	ldw	r2,-16(fp)
 401e364:	10c00a17 	ldw	r3,40(r2)
 401e368:	e0bff717 	ldw	r2,-36(fp)
 401e36c:	18800726 	beq	r3,r2,401e38c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401e370:	e0bffe17 	ldw	r2,-8(fp)
 401e374:	00bfb716 	blt	zero,r2,401e254 <__alt_mem_onchip_memory2_0+0xfc01cfd4>
 401e378:	00000506 	br	401e390 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 401e37c:	0001883a 	nop
 401e380:	00000306 	br	401e390 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 401e384:	0001883a 	nop
 401e388:	00000106 	br	401e390 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 401e38c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 401e390:	e0fff517 	ldw	r3,-44(fp)
 401e394:	e0bffd17 	ldw	r2,-12(fp)
 401e398:	18801826 	beq	r3,r2,401e3fc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e39c:	0005303a 	rdctl	r2,status
 401e3a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e3a4:	e0fffb17 	ldw	r3,-20(fp)
 401e3a8:	00bfff84 	movi	r2,-2
 401e3ac:	1884703a 	and	r2,r3,r2
 401e3b0:	1001703a 	wrctl	status,r2
  
  return context;
 401e3b4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 401e3b8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401e3bc:	e0bffc17 	ldw	r2,-16(fp)
 401e3c0:	10800817 	ldw	r2,32(r2)
 401e3c4:	10c00054 	ori	r3,r2,1
 401e3c8:	e0bffc17 	ldw	r2,-16(fp)
 401e3cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401e3d0:	e0bffc17 	ldw	r2,-16(fp)
 401e3d4:	10800017 	ldw	r2,0(r2)
 401e3d8:	10800104 	addi	r2,r2,4
 401e3dc:	1007883a 	mov	r3,r2
 401e3e0:	e0bffc17 	ldw	r2,-16(fp)
 401e3e4:	10800817 	ldw	r2,32(r2)
 401e3e8:	18800035 	stwio	r2,0(r3)
 401e3ec:	e0bffa17 	ldw	r2,-24(fp)
 401e3f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e3f4:	e0bff917 	ldw	r2,-28(fp)
 401e3f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 401e3fc:	e0fff517 	ldw	r3,-44(fp)
 401e400:	e0bffd17 	ldw	r2,-12(fp)
 401e404:	18800426 	beq	r3,r2,401e418 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 401e408:	e0fff517 	ldw	r3,-44(fp)
 401e40c:	e0bffd17 	ldw	r2,-12(fp)
 401e410:	1885c83a 	sub	r2,r3,r2
 401e414:	00000606 	br	401e430 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 401e418:	e0bfff17 	ldw	r2,-4(fp)
 401e41c:	1090000c 	andi	r2,r2,16384
 401e420:	10000226 	beq	r2,zero,401e42c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 401e424:	00bffd44 	movi	r2,-11
 401e428:	00000106 	br	401e430 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 401e42c:	00bffec4 	movi	r2,-5
}
 401e430:	e037883a 	mov	sp,fp
 401e434:	dfc00117 	ldw	ra,4(sp)
 401e438:	df000017 	ldw	fp,0(sp)
 401e43c:	dec00204 	addi	sp,sp,8
 401e440:	f800283a 	ret

0401e444 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401e444:	defff304 	addi	sp,sp,-52
 401e448:	dfc00c15 	stw	ra,48(sp)
 401e44c:	df000b15 	stw	fp,44(sp)
 401e450:	df000b04 	addi	fp,sp,44
 401e454:	e13ffc15 	stw	r4,-16(fp)
 401e458:	e17ffd15 	stw	r5,-12(fp)
 401e45c:	e1bffe15 	stw	r6,-8(fp)
 401e460:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401e464:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 401e468:	e0bffd17 	ldw	r2,-12(fp)
 401e46c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401e470:	00003706 	br	401e550 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 401e474:	e0bffc17 	ldw	r2,-16(fp)
 401e478:	10800c17 	ldw	r2,48(r2)
 401e47c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 401e480:	e0bffc17 	ldw	r2,-16(fp)
 401e484:	10800d17 	ldw	r2,52(r2)
 401e488:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 401e48c:	e0fff917 	ldw	r3,-28(fp)
 401e490:	e0bff517 	ldw	r2,-44(fp)
 401e494:	1880062e 	bgeu	r3,r2,401e4b0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 401e498:	e0fff517 	ldw	r3,-44(fp)
 401e49c:	e0bff917 	ldw	r2,-28(fp)
 401e4a0:	1885c83a 	sub	r2,r3,r2
 401e4a4:	10bfffc4 	addi	r2,r2,-1
 401e4a8:	e0bff615 	stw	r2,-40(fp)
 401e4ac:	00000b06 	br	401e4dc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 401e4b0:	e0bff517 	ldw	r2,-44(fp)
 401e4b4:	10000526 	beq	r2,zero,401e4cc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 401e4b8:	00c20004 	movi	r3,2048
 401e4bc:	e0bff917 	ldw	r2,-28(fp)
 401e4c0:	1885c83a 	sub	r2,r3,r2
 401e4c4:	e0bff615 	stw	r2,-40(fp)
 401e4c8:	00000406 	br	401e4dc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 401e4cc:	00c1ffc4 	movi	r3,2047
 401e4d0:	e0bff917 	ldw	r2,-28(fp)
 401e4d4:	1885c83a 	sub	r2,r3,r2
 401e4d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401e4dc:	e0bff617 	ldw	r2,-40(fp)
 401e4e0:	10001e26 	beq	r2,zero,401e55c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 401e4e4:	e0fffe17 	ldw	r3,-8(fp)
 401e4e8:	e0bff617 	ldw	r2,-40(fp)
 401e4ec:	1880022e 	bgeu	r3,r2,401e4f8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 401e4f0:	e0bffe17 	ldw	r2,-8(fp)
 401e4f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 401e4f8:	e0bffc17 	ldw	r2,-16(fp)
 401e4fc:	10c20e04 	addi	r3,r2,2104
 401e500:	e0bff917 	ldw	r2,-28(fp)
 401e504:	1885883a 	add	r2,r3,r2
 401e508:	e1bff617 	ldw	r6,-40(fp)
 401e50c:	e17ffd17 	ldw	r5,-12(fp)
 401e510:	1009883a 	mov	r4,r2
 401e514:	400e9480 	call	400e948 <memcpy>
      ptr   += n;
 401e518:	e0fffd17 	ldw	r3,-12(fp)
 401e51c:	e0bff617 	ldw	r2,-40(fp)
 401e520:	1885883a 	add	r2,r3,r2
 401e524:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 401e528:	e0fffe17 	ldw	r3,-8(fp)
 401e52c:	e0bff617 	ldw	r2,-40(fp)
 401e530:	1885c83a 	sub	r2,r3,r2
 401e534:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e538:	e0fff917 	ldw	r3,-28(fp)
 401e53c:	e0bff617 	ldw	r2,-40(fp)
 401e540:	1885883a 	add	r2,r3,r2
 401e544:	10c1ffcc 	andi	r3,r2,2047
 401e548:	e0bffc17 	ldw	r2,-16(fp)
 401e54c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401e550:	e0bffe17 	ldw	r2,-8(fp)
 401e554:	00bfc716 	blt	zero,r2,401e474 <__alt_mem_onchip_memory2_0+0xfc01d1f4>
 401e558:	00000106 	br	401e560 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 401e55c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e560:	0005303a 	rdctl	r2,status
 401e564:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e568:	e0fffb17 	ldw	r3,-20(fp)
 401e56c:	00bfff84 	movi	r2,-2
 401e570:	1884703a 	and	r2,r3,r2
 401e574:	1001703a 	wrctl	status,r2
  
  return context;
 401e578:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 401e57c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401e580:	e0bffc17 	ldw	r2,-16(fp)
 401e584:	10800817 	ldw	r2,32(r2)
 401e588:	10c00094 	ori	r3,r2,2
 401e58c:	e0bffc17 	ldw	r2,-16(fp)
 401e590:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401e594:	e0bffc17 	ldw	r2,-16(fp)
 401e598:	10800017 	ldw	r2,0(r2)
 401e59c:	10800104 	addi	r2,r2,4
 401e5a0:	1007883a 	mov	r3,r2
 401e5a4:	e0bffc17 	ldw	r2,-16(fp)
 401e5a8:	10800817 	ldw	r2,32(r2)
 401e5ac:	18800035 	stwio	r2,0(r3)
 401e5b0:	e0bffa17 	ldw	r2,-24(fp)
 401e5b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e5b8:	e0bff817 	ldw	r2,-32(fp)
 401e5bc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 401e5c0:	e0bffe17 	ldw	r2,-8(fp)
 401e5c4:	0080100e 	bge	zero,r2,401e608 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 401e5c8:	e0bfff17 	ldw	r2,-4(fp)
 401e5cc:	1090000c 	andi	r2,r2,16384
 401e5d0:	1000101e 	bne	r2,zero,401e614 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401e5d4:	0001883a 	nop
 401e5d8:	e0bffc17 	ldw	r2,-16(fp)
 401e5dc:	10c00d17 	ldw	r3,52(r2)
 401e5e0:	e0bff517 	ldw	r2,-44(fp)
 401e5e4:	1880051e 	bne	r3,r2,401e5fc <altera_avalon_jtag_uart_write+0x1b8>
 401e5e8:	e0bffc17 	ldw	r2,-16(fp)
 401e5ec:	10c00917 	ldw	r3,36(r2)
 401e5f0:	e0bffc17 	ldw	r2,-16(fp)
 401e5f4:	10800117 	ldw	r2,4(r2)
 401e5f8:	18bff736 	bltu	r3,r2,401e5d8 <__alt_mem_onchip_memory2_0+0xfc01d358>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 401e5fc:	e0bffc17 	ldw	r2,-16(fp)
 401e600:	10800917 	ldw	r2,36(r2)
 401e604:	1000051e 	bne	r2,zero,401e61c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 401e608:	e0bffe17 	ldw	r2,-8(fp)
 401e60c:	00bfd016 	blt	zero,r2,401e550 <__alt_mem_onchip_memory2_0+0xfc01d2d0>
 401e610:	00000306 	br	401e620 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401e614:	0001883a 	nop
 401e618:	00000106 	br	401e620 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 401e61c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 401e620:	e0fffd17 	ldw	r3,-12(fp)
 401e624:	e0bff717 	ldw	r2,-36(fp)
 401e628:	18800426 	beq	r3,r2,401e63c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 401e62c:	e0fffd17 	ldw	r3,-12(fp)
 401e630:	e0bff717 	ldw	r2,-36(fp)
 401e634:	1885c83a 	sub	r2,r3,r2
 401e638:	00000606 	br	401e654 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 401e63c:	e0bfff17 	ldw	r2,-4(fp)
 401e640:	1090000c 	andi	r2,r2,16384
 401e644:	10000226 	beq	r2,zero,401e650 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 401e648:	00bffd44 	movi	r2,-11
 401e64c:	00000106 	br	401e654 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 401e650:	00bffec4 	movi	r2,-5
}
 401e654:	e037883a 	mov	sp,fp
 401e658:	dfc00117 	ldw	ra,4(sp)
 401e65c:	df000017 	ldw	fp,0(sp)
 401e660:	dec00204 	addi	sp,sp,8
 401e664:	f800283a 	ret

0401e668 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 401e668:	defff404 	addi	sp,sp,-48
 401e66c:	df000b15 	stw	fp,44(sp)
 401e670:	df000b04 	addi	fp,sp,44
 401e674:	e13ffc15 	stw	r4,-16(fp)
 401e678:	e17ffd15 	stw	r5,-12(fp)
 401e67c:	e1bffe15 	stw	r6,-8(fp)
 401e680:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 401e684:	e0ffff17 	ldw	r3,-4(fp)
 401e688:	e0bffe17 	ldw	r2,-8(fp)
 401e68c:	1885883a 	add	r2,r3,r2
 401e690:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 401e694:	e0c00217 	ldw	r3,8(fp)
 401e698:	e0800117 	ldw	r2,4(fp)
 401e69c:	1885883a 	add	r2,r3,r2
 401e6a0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 401e6a4:	e0800117 	ldw	r2,4(fp)
 401e6a8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 401e6ac:	e0bffe17 	ldw	r2,-8(fp)
 401e6b0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 401e6b4:	00800044 	movi	r2,1
 401e6b8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 401e6bc:	e0bffc17 	ldw	r2,-16(fp)
 401e6c0:	10800504 	addi	r2,r2,20
 401e6c4:	1009883a 	mov	r4,r2
 401e6c8:	00c00044 	movi	r3,1
 401e6cc:	e0bffd17 	ldw	r2,-12(fp)
 401e6d0:	1884983a 	sll	r2,r3,r2
 401e6d4:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 401e6d8:	e0800317 	ldw	r2,12(fp)
 401e6dc:	1080008c 	andi	r2,r2,2
 401e6e0:	1000051e 	bne	r2,zero,401e6f8 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 401e6e4:	e0bffc17 	ldw	r2,-16(fp)
 401e6e8:	10800304 	addi	r2,r2,12
 401e6ec:	1007883a 	mov	r3,r2
 401e6f0:	00810004 	movi	r2,1024
 401e6f4:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401e6f8:	e0bffc17 	ldw	r2,-16(fp)
 401e6fc:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401e700:	e0bffc17 	ldw	r2,-16(fp)
 401e704:	10800204 	addi	r2,r2,8
 401e708:	10800037 	ldwio	r2,0(r2)
 401e70c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401e710:	e0bffa17 	ldw	r2,-24(fp)
 401e714:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401e718:	10000226 	beq	r2,zero,401e724 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401e71c:	e0bff717 	ldw	r2,-36(fp)
 401e720:	1000031e 	bne	r2,zero,401e730 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401e724:	e0bffa17 	ldw	r2,-24(fp)
 401e728:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401e72c:	103ff426 	beq	r2,zero,401e700 <__alt_mem_onchip_memory2_0+0xfc01d480>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 401e730:	e0bffa17 	ldw	r2,-24(fp)
 401e734:	1080100c 	andi	r2,r2,64
 401e738:	10001e26 	beq	r2,zero,401e7b4 <alt_avalon_spi_command+0x14c>
 401e73c:	e0bff717 	ldw	r2,-36(fp)
 401e740:	00801c0e 	bge	zero,r2,401e7b4 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 401e744:	e0bff717 	ldw	r2,-36(fp)
 401e748:	10bfffc4 	addi	r2,r2,-1
 401e74c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 401e750:	e0ffff17 	ldw	r3,-4(fp)
 401e754:	e0bff817 	ldw	r2,-32(fp)
 401e758:	18800a2e 	bgeu	r3,r2,401e784 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 401e75c:	e0bffc17 	ldw	r2,-16(fp)
 401e760:	10800104 	addi	r2,r2,4
 401e764:	1009883a 	mov	r4,r2
 401e768:	e0bfff17 	ldw	r2,-4(fp)
 401e76c:	10c00044 	addi	r3,r2,1
 401e770:	e0ffff15 	stw	r3,-4(fp)
 401e774:	10800003 	ldbu	r2,0(r2)
 401e778:	10803fcc 	andi	r2,r2,255
 401e77c:	20800035 	stwio	r2,0(r4)
 401e780:	00000c06 	br	401e7b4 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 401e784:	e0bff517 	ldw	r2,-44(fp)
 401e788:	10000826 	beq	r2,zero,401e7ac <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 401e78c:	e0bff517 	ldw	r2,-44(fp)
 401e790:	10bfffc4 	addi	r2,r2,-1
 401e794:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 401e798:	e0bffc17 	ldw	r2,-16(fp)
 401e79c:	10800104 	addi	r2,r2,4
 401e7a0:	0007883a 	mov	r3,zero
 401e7a4:	10c00035 	stwio	r3,0(r2)
 401e7a8:	00000206 	br	401e7b4 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 401e7ac:	00bf0004 	movi	r2,-1024
 401e7b0:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 401e7b4:	e0bffa17 	ldw	r2,-24(fp)
 401e7b8:	1080200c 	andi	r2,r2,128
 401e7bc:	103fd026 	beq	r2,zero,401e700 <__alt_mem_onchip_memory2_0+0xfc01d480>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401e7c0:	e0bffc17 	ldw	r2,-16(fp)
 401e7c4:	10800037 	ldwio	r2,0(r2)
 401e7c8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 401e7cc:	e0bff617 	ldw	r2,-40(fp)
 401e7d0:	10000426 	beq	r2,zero,401e7e4 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 401e7d4:	e0bff617 	ldw	r2,-40(fp)
 401e7d8:	10bfffc4 	addi	r2,r2,-1
 401e7dc:	e0bff615 	stw	r2,-40(fp)
 401e7e0:	00000506 	br	401e7f8 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 401e7e4:	e0800217 	ldw	r2,8(fp)
 401e7e8:	10c00044 	addi	r3,r2,1
 401e7ec:	e0c00215 	stw	r3,8(fp)
 401e7f0:	e0fffb17 	ldw	r3,-20(fp)
 401e7f4:	10c00005 	stb	r3,0(r2)
      credits++;
 401e7f8:	e0bff717 	ldw	r2,-36(fp)
 401e7fc:	10800044 	addi	r2,r2,1
 401e800:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 401e804:	e0bff617 	ldw	r2,-40(fp)
 401e808:	103fbd1e 	bne	r2,zero,401e700 <__alt_mem_onchip_memory2_0+0xfc01d480>
 401e80c:	e0c00217 	ldw	r3,8(fp)
 401e810:	e0bff917 	ldw	r2,-28(fp)
 401e814:	18bfba1e 	bne	r3,r2,401e700 <__alt_mem_onchip_memory2_0+0xfc01d480>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401e818:	e0bffc17 	ldw	r2,-16(fp)
 401e81c:	10800204 	addi	r2,r2,8
 401e820:	10800037 	ldwio	r2,0(r2)
 401e824:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 401e828:	e0bffa17 	ldw	r2,-24(fp)
 401e82c:	1080080c 	andi	r2,r2,32
 401e830:	103ff926 	beq	r2,zero,401e818 <__alt_mem_onchip_memory2_0+0xfc01d598>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 401e834:	e0800317 	ldw	r2,12(fp)
 401e838:	1080004c 	andi	r2,r2,1
 401e83c:	1000041e 	bne	r2,zero,401e850 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 401e840:	e0bffc17 	ldw	r2,-16(fp)
 401e844:	10800304 	addi	r2,r2,12
 401e848:	0007883a 	mov	r3,zero
 401e84c:	10c00035 	stwio	r3,0(r2)

  return read_length;
 401e850:	e0800117 	ldw	r2,4(fp)
}
 401e854:	e037883a 	mov	sp,fp
 401e858:	df000017 	ldw	fp,0(sp)
 401e85c:	dec00104 	addi	sp,sp,4
 401e860:	f800283a 	ret

0401e864 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 401e864:	defffa04 	addi	sp,sp,-24
 401e868:	dfc00515 	stw	ra,20(sp)
 401e86c:	df000415 	stw	fp,16(sp)
 401e870:	df000404 	addi	fp,sp,16
 401e874:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 401e878:	0007883a 	mov	r3,zero
 401e87c:	e0bfff17 	ldw	r2,-4(fp)
 401e880:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401e884:	e0bfff17 	ldw	r2,-4(fp)
 401e888:	10800104 	addi	r2,r2,4
 401e88c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e890:	0005303a 	rdctl	r2,status
 401e894:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e898:	e0fffd17 	ldw	r3,-12(fp)
 401e89c:	00bfff84 	movi	r2,-2
 401e8a0:	1884703a 	and	r2,r3,r2
 401e8a4:	1001703a 	wrctl	status,r2
  
  return context;
 401e8a8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 401e8ac:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 401e8b0:	401f7d40 	call	401f7d4 <alt_tick>
 401e8b4:	e0bffc17 	ldw	r2,-16(fp)
 401e8b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e8bc:	e0bffe17 	ldw	r2,-8(fp)
 401e8c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 401e8c4:	0001883a 	nop
 401e8c8:	e037883a 	mov	sp,fp
 401e8cc:	dfc00117 	ldw	ra,4(sp)
 401e8d0:	df000017 	ldw	fp,0(sp)
 401e8d4:	dec00204 	addi	sp,sp,8
 401e8d8:	f800283a 	ret

0401e8dc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 401e8dc:	defff804 	addi	sp,sp,-32
 401e8e0:	dfc00715 	stw	ra,28(sp)
 401e8e4:	df000615 	stw	fp,24(sp)
 401e8e8:	df000604 	addi	fp,sp,24
 401e8ec:	e13ffc15 	stw	r4,-16(fp)
 401e8f0:	e17ffd15 	stw	r5,-12(fp)
 401e8f4:	e1bffe15 	stw	r6,-8(fp)
 401e8f8:	e1ffff15 	stw	r7,-4(fp)
 401e8fc:	e0bfff17 	ldw	r2,-4(fp)
 401e900:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 401e904:	d0b24717 	ldw	r2,-14052(gp)
 401e908:	1000021e 	bne	r2,zero,401e914 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 401e90c:	e0bffb17 	ldw	r2,-20(fp)
 401e910:	d0b24715 	stw	r2,-14052(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401e914:	e0bffc17 	ldw	r2,-16(fp)
 401e918:	10800104 	addi	r2,r2,4
 401e91c:	00c001c4 	movi	r3,7
 401e920:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 401e924:	d8000015 	stw	zero,0(sp)
 401e928:	e1fffc17 	ldw	r7,-16(fp)
 401e92c:	018100b4 	movhi	r6,1026
 401e930:	31ba1904 	addi	r6,r6,-6044
 401e934:	e17ffe17 	ldw	r5,-8(fp)
 401e938:	e13ffd17 	ldw	r4,-12(fp)
 401e93c:	401ee4c0 	call	401ee4c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401e940:	0001883a 	nop
 401e944:	e037883a 	mov	sp,fp
 401e948:	dfc00117 	ldw	ra,4(sp)
 401e94c:	df000017 	ldw	fp,0(sp)
 401e950:	dec00204 	addi	sp,sp,8
 401e954:	f800283a 	ret

0401e958 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 401e958:	defff504 	addi	sp,sp,-44
 401e95c:	df000a15 	stw	fp,40(sp)
 401e960:	df000a04 	addi	fp,sp,40
 401e964:	e13ffc15 	stw	r4,-16(fp)
 401e968:	e17ffd15 	stw	r5,-12(fp)
 401e96c:	e1bffe15 	stw	r6,-8(fp)
 401e970:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 401e974:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401e978:	d0b24717 	ldw	r2,-14052(gp)
  
  if (alt_ticks_per_second ())
 401e97c:	10003c26 	beq	r2,zero,401ea70 <alt_alarm_start+0x118>
  {
    if (alarm)
 401e980:	e0bffc17 	ldw	r2,-16(fp)
 401e984:	10003826 	beq	r2,zero,401ea68 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 401e988:	e0bffc17 	ldw	r2,-16(fp)
 401e98c:	e0fffe17 	ldw	r3,-8(fp)
 401e990:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 401e994:	e0bffc17 	ldw	r2,-16(fp)
 401e998:	e0ffff17 	ldw	r3,-4(fp)
 401e99c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e9a0:	0005303a 	rdctl	r2,status
 401e9a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e9a8:	e0fff917 	ldw	r3,-28(fp)
 401e9ac:	00bfff84 	movi	r2,-2
 401e9b0:	1884703a 	and	r2,r3,r2
 401e9b4:	1001703a 	wrctl	status,r2
  
  return context;
 401e9b8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 401e9bc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401e9c0:	d0b24817 	ldw	r2,-14048(gp)
      
      current_nticks = alt_nticks();
 401e9c4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 401e9c8:	e0fffd17 	ldw	r3,-12(fp)
 401e9cc:	e0bff617 	ldw	r2,-40(fp)
 401e9d0:	1885883a 	add	r2,r3,r2
 401e9d4:	10c00044 	addi	r3,r2,1
 401e9d8:	e0bffc17 	ldw	r2,-16(fp)
 401e9dc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 401e9e0:	e0bffc17 	ldw	r2,-16(fp)
 401e9e4:	10c00217 	ldw	r3,8(r2)
 401e9e8:	e0bff617 	ldw	r2,-40(fp)
 401e9ec:	1880042e 	bgeu	r3,r2,401ea00 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 401e9f0:	e0bffc17 	ldw	r2,-16(fp)
 401e9f4:	00c00044 	movi	r3,1
 401e9f8:	10c00405 	stb	r3,16(r2)
 401e9fc:	00000206 	br	401ea08 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 401ea00:	e0bffc17 	ldw	r2,-16(fp)
 401ea04:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 401ea08:	e0bffc17 	ldw	r2,-16(fp)
 401ea0c:	d0e5bc04 	addi	r3,gp,-26896
 401ea10:	e0fffa15 	stw	r3,-24(fp)
 401ea14:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401ea18:	e0bffb17 	ldw	r2,-20(fp)
 401ea1c:	e0fffa17 	ldw	r3,-24(fp)
 401ea20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401ea24:	e0bffa17 	ldw	r2,-24(fp)
 401ea28:	10c00017 	ldw	r3,0(r2)
 401ea2c:	e0bffb17 	ldw	r2,-20(fp)
 401ea30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401ea34:	e0bffa17 	ldw	r2,-24(fp)
 401ea38:	10800017 	ldw	r2,0(r2)
 401ea3c:	e0fffb17 	ldw	r3,-20(fp)
 401ea40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401ea44:	e0bffa17 	ldw	r2,-24(fp)
 401ea48:	e0fffb17 	ldw	r3,-20(fp)
 401ea4c:	10c00015 	stw	r3,0(r2)
 401ea50:	e0bff817 	ldw	r2,-32(fp)
 401ea54:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ea58:	e0bff717 	ldw	r2,-36(fp)
 401ea5c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 401ea60:	0005883a 	mov	r2,zero
 401ea64:	00000306 	br	401ea74 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 401ea68:	00bffa84 	movi	r2,-22
 401ea6c:	00000106 	br	401ea74 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 401ea70:	00bfde84 	movi	r2,-134
  }
}
 401ea74:	e037883a 	mov	sp,fp
 401ea78:	df000017 	ldw	fp,0(sp)
 401ea7c:	dec00104 	addi	sp,sp,4
 401ea80:	f800283a 	ret

0401ea84 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 401ea84:	defffa04 	addi	sp,sp,-24
 401ea88:	dfc00515 	stw	ra,20(sp)
 401ea8c:	df000415 	stw	fp,16(sp)
 401ea90:	df000404 	addi	fp,sp,16
 401ea94:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 401ea98:	00800244 	movi	r2,9
 401ea9c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 401eaa0:	014003f4 	movhi	r5,15
 401eaa4:	29509004 	addi	r5,r5,16960
 401eaa8:	e13ffd17 	ldw	r4,-12(fp)
 401eaac:	400cfd40 	call	400cfd4 <__mulsi3>
 401eab0:	100b883a 	mov	r5,r2
 401eab4:	0100bef4 	movhi	r4,763
 401eab8:	213c2004 	addi	r4,r4,-3968
 401eabc:	400cf180 	call	400cf18 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401eac0:	100b883a 	mov	r5,r2
 401eac4:	01200034 	movhi	r4,32768
 401eac8:	213fffc4 	addi	r4,r4,-1
 401eacc:	400cf180 	call	400cf18 <__udivsi3>
 401ead0:	100b883a 	mov	r5,r2
 401ead4:	e13fff17 	ldw	r4,-4(fp)
 401ead8:	400cf180 	call	400cf18 <__udivsi3>
 401eadc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 401eae0:	e0bffe17 	ldw	r2,-8(fp)
 401eae4:	10002a26 	beq	r2,zero,401eb90 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 401eae8:	e03ffc15 	stw	zero,-16(fp)
 401eaec:	00001706 	br	401eb4c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 401eaf0:	00a00034 	movhi	r2,32768
 401eaf4:	10bfffc4 	addi	r2,r2,-1
 401eaf8:	10bfffc4 	addi	r2,r2,-1
 401eafc:	103ffe1e 	bne	r2,zero,401eaf8 <__alt_mem_onchip_memory2_0+0xfc01d878>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 401eb00:	014003f4 	movhi	r5,15
 401eb04:	29509004 	addi	r5,r5,16960
 401eb08:	e13ffd17 	ldw	r4,-12(fp)
 401eb0c:	400cfd40 	call	400cfd4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 401eb10:	100b883a 	mov	r5,r2
 401eb14:	0100bef4 	movhi	r4,763
 401eb18:	213c2004 	addi	r4,r4,-3968
 401eb1c:	400cf180 	call	400cf18 <__udivsi3>
 401eb20:	100b883a 	mov	r5,r2
 401eb24:	01200034 	movhi	r4,32768
 401eb28:	213fffc4 	addi	r4,r4,-1
 401eb2c:	400cf180 	call	400cf18 <__udivsi3>
 401eb30:	1007883a 	mov	r3,r2
 401eb34:	e0bfff17 	ldw	r2,-4(fp)
 401eb38:	10c5c83a 	sub	r2,r2,r3
 401eb3c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 401eb40:	e0bffc17 	ldw	r2,-16(fp)
 401eb44:	10800044 	addi	r2,r2,1
 401eb48:	e0bffc15 	stw	r2,-16(fp)
 401eb4c:	e0fffc17 	ldw	r3,-16(fp)
 401eb50:	e0bffe17 	ldw	r2,-8(fp)
 401eb54:	18bfe616 	blt	r3,r2,401eaf0 <__alt_mem_onchip_memory2_0+0xfc01d870>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401eb58:	014003f4 	movhi	r5,15
 401eb5c:	29509004 	addi	r5,r5,16960
 401eb60:	e13ffd17 	ldw	r4,-12(fp)
 401eb64:	400cfd40 	call	400cfd4 <__mulsi3>
 401eb68:	100b883a 	mov	r5,r2
 401eb6c:	0100bef4 	movhi	r4,763
 401eb70:	213c2004 	addi	r4,r4,-3968
 401eb74:	400cf180 	call	400cf18 <__udivsi3>
 401eb78:	e17fff17 	ldw	r5,-4(fp)
 401eb7c:	1009883a 	mov	r4,r2
 401eb80:	400cfd40 	call	400cfd4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401eb84:	10bfffc4 	addi	r2,r2,-1
 401eb88:	103ffe1e 	bne	r2,zero,401eb84 <__alt_mem_onchip_memory2_0+0xfc01d904>
 401eb8c:	00000d06 	br	401ebc4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401eb90:	014003f4 	movhi	r5,15
 401eb94:	29509004 	addi	r5,r5,16960
 401eb98:	e13ffd17 	ldw	r4,-12(fp)
 401eb9c:	400cfd40 	call	400cfd4 <__mulsi3>
 401eba0:	100b883a 	mov	r5,r2
 401eba4:	0100bef4 	movhi	r4,763
 401eba8:	213c2004 	addi	r4,r4,-3968
 401ebac:	400cf180 	call	400cf18 <__udivsi3>
 401ebb0:	e17fff17 	ldw	r5,-4(fp)
 401ebb4:	1009883a 	mov	r4,r2
 401ebb8:	400cfd40 	call	400cfd4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401ebbc:	10bfffc4 	addi	r2,r2,-1
 401ebc0:	00bffe16 	blt	zero,r2,401ebbc <__alt_mem_onchip_memory2_0+0xfc01d93c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 401ebc4:	0005883a 	mov	r2,zero
}
 401ebc8:	e037883a 	mov	sp,fp
 401ebcc:	dfc00117 	ldw	ra,4(sp)
 401ebd0:	df000017 	ldw	fp,0(sp)
 401ebd4:	dec00204 	addi	sp,sp,8
 401ebd8:	f800283a 	ret

0401ebdc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401ebdc:	deffff04 	addi	sp,sp,-4
 401ebe0:	df000015 	stw	fp,0(sp)
 401ebe4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 401ebe8:	0001883a 	nop
 401ebec:	e037883a 	mov	sp,fp
 401ebf0:	df000017 	ldw	fp,0(sp)
 401ebf4:	dec00104 	addi	sp,sp,4
 401ebf8:	f800283a 	ret

0401ebfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401ebfc:	defffe04 	addi	sp,sp,-8
 401ec00:	dfc00115 	stw	ra,4(sp)
 401ec04:	df000015 	stw	fp,0(sp)
 401ec08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401ec0c:	d0a5b717 	ldw	r2,-26916(gp)
 401ec10:	10000326 	beq	r2,zero,401ec20 <alt_get_errno+0x24>
 401ec14:	d0a5b717 	ldw	r2,-26916(gp)
 401ec18:	103ee83a 	callr	r2
 401ec1c:	00000106 	br	401ec24 <alt_get_errno+0x28>
 401ec20:	d0b23f04 	addi	r2,gp,-14084
}
 401ec24:	e037883a 	mov	sp,fp
 401ec28:	dfc00117 	ldw	ra,4(sp)
 401ec2c:	df000017 	ldw	fp,0(sp)
 401ec30:	dec00204 	addi	sp,sp,8
 401ec34:	f800283a 	ret

0401ec38 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 401ec38:	defffa04 	addi	sp,sp,-24
 401ec3c:	dfc00515 	stw	ra,20(sp)
 401ec40:	df000415 	stw	fp,16(sp)
 401ec44:	df000404 	addi	fp,sp,16
 401ec48:	e13ffe15 	stw	r4,-8(fp)
 401ec4c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 401ec50:	e0bffe17 	ldw	r2,-8(fp)
 401ec54:	10000326 	beq	r2,zero,401ec64 <alt_dev_llist_insert+0x2c>
 401ec58:	e0bffe17 	ldw	r2,-8(fp)
 401ec5c:	10800217 	ldw	r2,8(r2)
 401ec60:	1000061e 	bne	r2,zero,401ec7c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 401ec64:	401ebfc0 	call	401ebfc <alt_get_errno>
 401ec68:	1007883a 	mov	r3,r2
 401ec6c:	00800584 	movi	r2,22
 401ec70:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 401ec74:	00bffa84 	movi	r2,-22
 401ec78:	00001306 	br	401ecc8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 401ec7c:	e0bffe17 	ldw	r2,-8(fp)
 401ec80:	e0ffff17 	ldw	r3,-4(fp)
 401ec84:	e0fffc15 	stw	r3,-16(fp)
 401ec88:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401ec8c:	e0bffd17 	ldw	r2,-12(fp)
 401ec90:	e0fffc17 	ldw	r3,-16(fp)
 401ec94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401ec98:	e0bffc17 	ldw	r2,-16(fp)
 401ec9c:	10c00017 	ldw	r3,0(r2)
 401eca0:	e0bffd17 	ldw	r2,-12(fp)
 401eca4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401eca8:	e0bffc17 	ldw	r2,-16(fp)
 401ecac:	10800017 	ldw	r2,0(r2)
 401ecb0:	e0fffd17 	ldw	r3,-12(fp)
 401ecb4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401ecb8:	e0bffc17 	ldw	r2,-16(fp)
 401ecbc:	e0fffd17 	ldw	r3,-12(fp)
 401ecc0:	10c00015 	stw	r3,0(r2)

  return 0;  
 401ecc4:	0005883a 	mov	r2,zero
}
 401ecc8:	e037883a 	mov	sp,fp
 401eccc:	dfc00117 	ldw	ra,4(sp)
 401ecd0:	df000017 	ldw	fp,0(sp)
 401ecd4:	dec00204 	addi	sp,sp,8
 401ecd8:	f800283a 	ret

0401ecdc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 401ecdc:	defffd04 	addi	sp,sp,-12
 401ece0:	dfc00215 	stw	ra,8(sp)
 401ece4:	df000115 	stw	fp,4(sp)
 401ece8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401ecec:	008100b4 	movhi	r2,1026
 401ecf0:	10bfc104 	addi	r2,r2,-252
 401ecf4:	e0bfff15 	stw	r2,-4(fp)
 401ecf8:	00000606 	br	401ed14 <_do_ctors+0x38>
        (*ctor) (); 
 401ecfc:	e0bfff17 	ldw	r2,-4(fp)
 401ed00:	10800017 	ldw	r2,0(r2)
 401ed04:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401ed08:	e0bfff17 	ldw	r2,-4(fp)
 401ed0c:	10bfff04 	addi	r2,r2,-4
 401ed10:	e0bfff15 	stw	r2,-4(fp)
 401ed14:	e0ffff17 	ldw	r3,-4(fp)
 401ed18:	008100b4 	movhi	r2,1026
 401ed1c:	10bfc004 	addi	r2,r2,-256
 401ed20:	18bff62e 	bgeu	r3,r2,401ecfc <__alt_mem_onchip_memory2_0+0xfc01da7c>
        (*ctor) (); 
}
 401ed24:	0001883a 	nop
 401ed28:	e037883a 	mov	sp,fp
 401ed2c:	dfc00117 	ldw	ra,4(sp)
 401ed30:	df000017 	ldw	fp,0(sp)
 401ed34:	dec00204 	addi	sp,sp,8
 401ed38:	f800283a 	ret

0401ed3c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 401ed3c:	defffd04 	addi	sp,sp,-12
 401ed40:	dfc00215 	stw	ra,8(sp)
 401ed44:	df000115 	stw	fp,4(sp)
 401ed48:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401ed4c:	008100b4 	movhi	r2,1026
 401ed50:	10bfc104 	addi	r2,r2,-252
 401ed54:	e0bfff15 	stw	r2,-4(fp)
 401ed58:	00000606 	br	401ed74 <_do_dtors+0x38>
        (*dtor) (); 
 401ed5c:	e0bfff17 	ldw	r2,-4(fp)
 401ed60:	10800017 	ldw	r2,0(r2)
 401ed64:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401ed68:	e0bfff17 	ldw	r2,-4(fp)
 401ed6c:	10bfff04 	addi	r2,r2,-4
 401ed70:	e0bfff15 	stw	r2,-4(fp)
 401ed74:	e0ffff17 	ldw	r3,-4(fp)
 401ed78:	008100b4 	movhi	r2,1026
 401ed7c:	10bfc204 	addi	r2,r2,-248
 401ed80:	18bff62e 	bgeu	r3,r2,401ed5c <__alt_mem_onchip_memory2_0+0xfc01dadc>
        (*dtor) (); 
}
 401ed84:	0001883a 	nop
 401ed88:	e037883a 	mov	sp,fp
 401ed8c:	dfc00117 	ldw	ra,4(sp)
 401ed90:	df000017 	ldw	fp,0(sp)
 401ed94:	dec00204 	addi	sp,sp,8
 401ed98:	f800283a 	ret

0401ed9c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401ed9c:	defffa04 	addi	sp,sp,-24
 401eda0:	dfc00515 	stw	ra,20(sp)
 401eda4:	df000415 	stw	fp,16(sp)
 401eda8:	df000404 	addi	fp,sp,16
 401edac:	e13ffe15 	stw	r4,-8(fp)
 401edb0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 401edb4:	e0bfff17 	ldw	r2,-4(fp)
 401edb8:	10800017 	ldw	r2,0(r2)
 401edbc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 401edc0:	e13ffe17 	ldw	r4,-8(fp)
 401edc4:	400f14c0 	call	400f14c <strlen>
 401edc8:	10800044 	addi	r2,r2,1
 401edcc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401edd0:	00000d06 	br	401ee08 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 401edd4:	e0bffc17 	ldw	r2,-16(fp)
 401edd8:	10800217 	ldw	r2,8(r2)
 401eddc:	e0fffd17 	ldw	r3,-12(fp)
 401ede0:	180d883a 	mov	r6,r3
 401ede4:	e17ffe17 	ldw	r5,-8(fp)
 401ede8:	1009883a 	mov	r4,r2
 401edec:	401fbb40 	call	401fbb4 <memcmp>
 401edf0:	1000021e 	bne	r2,zero,401edfc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 401edf4:	e0bffc17 	ldw	r2,-16(fp)
 401edf8:	00000706 	br	401ee18 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401edfc:	e0bffc17 	ldw	r2,-16(fp)
 401ee00:	10800017 	ldw	r2,0(r2)
 401ee04:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401ee08:	e0fffc17 	ldw	r3,-16(fp)
 401ee0c:	e0bfff17 	ldw	r2,-4(fp)
 401ee10:	18bff01e 	bne	r3,r2,401edd4 <__alt_mem_onchip_memory2_0+0xfc01db54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 401ee14:	0005883a 	mov	r2,zero
}
 401ee18:	e037883a 	mov	sp,fp
 401ee1c:	dfc00117 	ldw	ra,4(sp)
 401ee20:	df000017 	ldw	fp,0(sp)
 401ee24:	dec00204 	addi	sp,sp,8
 401ee28:	f800283a 	ret

0401ee2c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 401ee2c:	deffff04 	addi	sp,sp,-4
 401ee30:	df000015 	stw	fp,0(sp)
 401ee34:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 401ee38:	0001883a 	nop
 401ee3c:	e037883a 	mov	sp,fp
 401ee40:	df000017 	ldw	fp,0(sp)
 401ee44:	dec00104 	addi	sp,sp,4
 401ee48:	f800283a 	ret

0401ee4c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401ee4c:	defff904 	addi	sp,sp,-28
 401ee50:	dfc00615 	stw	ra,24(sp)
 401ee54:	df000515 	stw	fp,20(sp)
 401ee58:	df000504 	addi	fp,sp,20
 401ee5c:	e13ffc15 	stw	r4,-16(fp)
 401ee60:	e17ffd15 	stw	r5,-12(fp)
 401ee64:	e1bffe15 	stw	r6,-8(fp)
 401ee68:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 401ee6c:	e0800217 	ldw	r2,8(fp)
 401ee70:	d8800015 	stw	r2,0(sp)
 401ee74:	e1ffff17 	ldw	r7,-4(fp)
 401ee78:	e1bffe17 	ldw	r6,-8(fp)
 401ee7c:	e17ffd17 	ldw	r5,-12(fp)
 401ee80:	e13ffc17 	ldw	r4,-16(fp)
 401ee84:	401effc0 	call	401effc <alt_iic_isr_register>
}  
 401ee88:	e037883a 	mov	sp,fp
 401ee8c:	dfc00117 	ldw	ra,4(sp)
 401ee90:	df000017 	ldw	fp,0(sp)
 401ee94:	dec00204 	addi	sp,sp,8
 401ee98:	f800283a 	ret

0401ee9c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 401ee9c:	defff904 	addi	sp,sp,-28
 401eea0:	df000615 	stw	fp,24(sp)
 401eea4:	df000604 	addi	fp,sp,24
 401eea8:	e13ffe15 	stw	r4,-8(fp)
 401eeac:	e17fff15 	stw	r5,-4(fp)
 401eeb0:	e0bfff17 	ldw	r2,-4(fp)
 401eeb4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401eeb8:	0005303a 	rdctl	r2,status
 401eebc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401eec0:	e0fffb17 	ldw	r3,-20(fp)
 401eec4:	00bfff84 	movi	r2,-2
 401eec8:	1884703a 	and	r2,r3,r2
 401eecc:	1001703a 	wrctl	status,r2
  
  return context;
 401eed0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401eed4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 401eed8:	00c00044 	movi	r3,1
 401eedc:	e0bffa17 	ldw	r2,-24(fp)
 401eee0:	1884983a 	sll	r2,r3,r2
 401eee4:	1007883a 	mov	r3,r2
 401eee8:	d0b24617 	ldw	r2,-14056(gp)
 401eeec:	1884b03a 	or	r2,r3,r2
 401eef0:	d0b24615 	stw	r2,-14056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401eef4:	d0b24617 	ldw	r2,-14056(gp)
 401eef8:	100170fa 	wrctl	ienable,r2
 401eefc:	e0bffc17 	ldw	r2,-16(fp)
 401ef00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ef04:	e0bffd17 	ldw	r2,-12(fp)
 401ef08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401ef0c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 401ef10:	0001883a 	nop
}
 401ef14:	e037883a 	mov	sp,fp
 401ef18:	df000017 	ldw	fp,0(sp)
 401ef1c:	dec00104 	addi	sp,sp,4
 401ef20:	f800283a 	ret

0401ef24 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 401ef24:	defff904 	addi	sp,sp,-28
 401ef28:	df000615 	stw	fp,24(sp)
 401ef2c:	df000604 	addi	fp,sp,24
 401ef30:	e13ffe15 	stw	r4,-8(fp)
 401ef34:	e17fff15 	stw	r5,-4(fp)
 401ef38:	e0bfff17 	ldw	r2,-4(fp)
 401ef3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ef40:	0005303a 	rdctl	r2,status
 401ef44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ef48:	e0fffb17 	ldw	r3,-20(fp)
 401ef4c:	00bfff84 	movi	r2,-2
 401ef50:	1884703a 	and	r2,r3,r2
 401ef54:	1001703a 	wrctl	status,r2
  
  return context;
 401ef58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401ef5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 401ef60:	00c00044 	movi	r3,1
 401ef64:	e0bffa17 	ldw	r2,-24(fp)
 401ef68:	1884983a 	sll	r2,r3,r2
 401ef6c:	0084303a 	nor	r2,zero,r2
 401ef70:	1007883a 	mov	r3,r2
 401ef74:	d0b24617 	ldw	r2,-14056(gp)
 401ef78:	1884703a 	and	r2,r3,r2
 401ef7c:	d0b24615 	stw	r2,-14056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401ef80:	d0b24617 	ldw	r2,-14056(gp)
 401ef84:	100170fa 	wrctl	ienable,r2
 401ef88:	e0bffc17 	ldw	r2,-16(fp)
 401ef8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ef90:	e0bffd17 	ldw	r2,-12(fp)
 401ef94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401ef98:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 401ef9c:	0001883a 	nop
}
 401efa0:	e037883a 	mov	sp,fp
 401efa4:	df000017 	ldw	fp,0(sp)
 401efa8:	dec00104 	addi	sp,sp,4
 401efac:	f800283a 	ret

0401efb0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401efb0:	defffc04 	addi	sp,sp,-16
 401efb4:	df000315 	stw	fp,12(sp)
 401efb8:	df000304 	addi	fp,sp,12
 401efbc:	e13ffe15 	stw	r4,-8(fp)
 401efc0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 401efc4:	000530fa 	rdctl	r2,ienable
 401efc8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 401efcc:	00c00044 	movi	r3,1
 401efd0:	e0bfff17 	ldw	r2,-4(fp)
 401efd4:	1884983a 	sll	r2,r3,r2
 401efd8:	1007883a 	mov	r3,r2
 401efdc:	e0bffd17 	ldw	r2,-12(fp)
 401efe0:	1884703a 	and	r2,r3,r2
 401efe4:	1004c03a 	cmpne	r2,r2,zero
 401efe8:	10803fcc 	andi	r2,r2,255
}
 401efec:	e037883a 	mov	sp,fp
 401eff0:	df000017 	ldw	fp,0(sp)
 401eff4:	dec00104 	addi	sp,sp,4
 401eff8:	f800283a 	ret

0401effc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401effc:	defff504 	addi	sp,sp,-44
 401f000:	dfc00a15 	stw	ra,40(sp)
 401f004:	df000915 	stw	fp,36(sp)
 401f008:	df000904 	addi	fp,sp,36
 401f00c:	e13ffc15 	stw	r4,-16(fp)
 401f010:	e17ffd15 	stw	r5,-12(fp)
 401f014:	e1bffe15 	stw	r6,-8(fp)
 401f018:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 401f01c:	00bffa84 	movi	r2,-22
 401f020:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 401f024:	e0bffd17 	ldw	r2,-12(fp)
 401f028:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401f02c:	e0bff817 	ldw	r2,-32(fp)
 401f030:	10800808 	cmpgei	r2,r2,32
 401f034:	1000271e 	bne	r2,zero,401f0d4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f038:	0005303a 	rdctl	r2,status
 401f03c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f040:	e0fffb17 	ldw	r3,-20(fp)
 401f044:	00bfff84 	movi	r2,-2
 401f048:	1884703a 	and	r2,r3,r2
 401f04c:	1001703a 	wrctl	status,r2
  
  return context;
 401f050:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401f054:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 401f058:	008100f4 	movhi	r2,1027
 401f05c:	10b58604 	addi	r2,r2,-10728
 401f060:	e0fff817 	ldw	r3,-32(fp)
 401f064:	180690fa 	slli	r3,r3,3
 401f068:	10c5883a 	add	r2,r2,r3
 401f06c:	e0fffe17 	ldw	r3,-8(fp)
 401f070:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 401f074:	008100f4 	movhi	r2,1027
 401f078:	10b58604 	addi	r2,r2,-10728
 401f07c:	e0fff817 	ldw	r3,-32(fp)
 401f080:	180690fa 	slli	r3,r3,3
 401f084:	10c5883a 	add	r2,r2,r3
 401f088:	10800104 	addi	r2,r2,4
 401f08c:	e0ffff17 	ldw	r3,-4(fp)
 401f090:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401f094:	e0bffe17 	ldw	r2,-8(fp)
 401f098:	10000526 	beq	r2,zero,401f0b0 <alt_iic_isr_register+0xb4>
 401f09c:	e0bff817 	ldw	r2,-32(fp)
 401f0a0:	100b883a 	mov	r5,r2
 401f0a4:	e13ffc17 	ldw	r4,-16(fp)
 401f0a8:	401ee9c0 	call	401ee9c <alt_ic_irq_enable>
 401f0ac:	00000406 	br	401f0c0 <alt_iic_isr_register+0xc4>
 401f0b0:	e0bff817 	ldw	r2,-32(fp)
 401f0b4:	100b883a 	mov	r5,r2
 401f0b8:	e13ffc17 	ldw	r4,-16(fp)
 401f0bc:	401ef240 	call	401ef24 <alt_ic_irq_disable>
 401f0c0:	e0bff715 	stw	r2,-36(fp)
 401f0c4:	e0bffa17 	ldw	r2,-24(fp)
 401f0c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f0cc:	e0bff917 	ldw	r2,-28(fp)
 401f0d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 401f0d4:	e0bff717 	ldw	r2,-36(fp)
}
 401f0d8:	e037883a 	mov	sp,fp
 401f0dc:	dfc00117 	ldw	ra,4(sp)
 401f0e0:	df000017 	ldw	fp,0(sp)
 401f0e4:	dec00204 	addi	sp,sp,8
 401f0e8:	f800283a 	ret

0401f0ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401f0ec:	defff804 	addi	sp,sp,-32
 401f0f0:	dfc00715 	stw	ra,28(sp)
 401f0f4:	df000615 	stw	fp,24(sp)
 401f0f8:	dc000515 	stw	r16,20(sp)
 401f0fc:	df000604 	addi	fp,sp,24
 401f100:	e13ffb15 	stw	r4,-20(fp)
 401f104:	e17ffc15 	stw	r5,-16(fp)
 401f108:	e1bffd15 	stw	r6,-12(fp)
 401f10c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 401f110:	e1bffe17 	ldw	r6,-8(fp)
 401f114:	e17ffd17 	ldw	r5,-12(fp)
 401f118:	e13ffc17 	ldw	r4,-16(fp)
 401f11c:	401f3740 	call	401f374 <open>
 401f120:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 401f124:	e0bffa17 	ldw	r2,-24(fp)
 401f128:	10002216 	blt	r2,zero,401f1b4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 401f12c:	040100b4 	movhi	r16,1026
 401f130:	841e7404 	addi	r16,r16,31184
 401f134:	e0bffa17 	ldw	r2,-24(fp)
 401f138:	01400304 	movi	r5,12
 401f13c:	1009883a 	mov	r4,r2
 401f140:	400cfd40 	call	400cfd4 <__mulsi3>
 401f144:	8085883a 	add	r2,r16,r2
 401f148:	10c00017 	ldw	r3,0(r2)
 401f14c:	e0bffb17 	ldw	r2,-20(fp)
 401f150:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401f154:	040100b4 	movhi	r16,1026
 401f158:	841e7404 	addi	r16,r16,31184
 401f15c:	e0bffa17 	ldw	r2,-24(fp)
 401f160:	01400304 	movi	r5,12
 401f164:	1009883a 	mov	r4,r2
 401f168:	400cfd40 	call	400cfd4 <__mulsi3>
 401f16c:	8085883a 	add	r2,r16,r2
 401f170:	10800104 	addi	r2,r2,4
 401f174:	10c00017 	ldw	r3,0(r2)
 401f178:	e0bffb17 	ldw	r2,-20(fp)
 401f17c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401f180:	040100b4 	movhi	r16,1026
 401f184:	841e7404 	addi	r16,r16,31184
 401f188:	e0bffa17 	ldw	r2,-24(fp)
 401f18c:	01400304 	movi	r5,12
 401f190:	1009883a 	mov	r4,r2
 401f194:	400cfd40 	call	400cfd4 <__mulsi3>
 401f198:	8085883a 	add	r2,r16,r2
 401f19c:	10800204 	addi	r2,r2,8
 401f1a0:	10c00017 	ldw	r3,0(r2)
 401f1a4:	e0bffb17 	ldw	r2,-20(fp)
 401f1a8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401f1ac:	e13ffa17 	ldw	r4,-24(fp)
 401f1b0:	401bbb40 	call	401bbb4 <alt_release_fd>
  }
} 
 401f1b4:	0001883a 	nop
 401f1b8:	e6ffff04 	addi	sp,fp,-4
 401f1bc:	dfc00217 	ldw	ra,8(sp)
 401f1c0:	df000117 	ldw	fp,4(sp)
 401f1c4:	dc000017 	ldw	r16,0(sp)
 401f1c8:	dec00304 	addi	sp,sp,12
 401f1cc:	f800283a 	ret

0401f1d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401f1d0:	defffb04 	addi	sp,sp,-20
 401f1d4:	dfc00415 	stw	ra,16(sp)
 401f1d8:	df000315 	stw	fp,12(sp)
 401f1dc:	df000304 	addi	fp,sp,12
 401f1e0:	e13ffd15 	stw	r4,-12(fp)
 401f1e4:	e17ffe15 	stw	r5,-8(fp)
 401f1e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401f1ec:	01c07fc4 	movi	r7,511
 401f1f0:	01800044 	movi	r6,1
 401f1f4:	e17ffd17 	ldw	r5,-12(fp)
 401f1f8:	010100b4 	movhi	r4,1026
 401f1fc:	211e7704 	addi	r4,r4,31196
 401f200:	401f0ec0 	call	401f0ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 401f204:	01c07fc4 	movi	r7,511
 401f208:	000d883a 	mov	r6,zero
 401f20c:	e17ffe17 	ldw	r5,-8(fp)
 401f210:	010100b4 	movhi	r4,1026
 401f214:	211e7404 	addi	r4,r4,31184
 401f218:	401f0ec0 	call	401f0ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401f21c:	01c07fc4 	movi	r7,511
 401f220:	01800044 	movi	r6,1
 401f224:	e17fff17 	ldw	r5,-4(fp)
 401f228:	010100b4 	movhi	r4,1026
 401f22c:	211e7a04 	addi	r4,r4,31208
 401f230:	401f0ec0 	call	401f0ec <alt_open_fd>
}  
 401f234:	0001883a 	nop
 401f238:	e037883a 	mov	sp,fp
 401f23c:	dfc00117 	ldw	ra,4(sp)
 401f240:	df000017 	ldw	fp,0(sp)
 401f244:	dec00204 	addi	sp,sp,8
 401f248:	f800283a 	ret

0401f24c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401f24c:	defffe04 	addi	sp,sp,-8
 401f250:	dfc00115 	stw	ra,4(sp)
 401f254:	df000015 	stw	fp,0(sp)
 401f258:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401f25c:	d0a5b717 	ldw	r2,-26916(gp)
 401f260:	10000326 	beq	r2,zero,401f270 <alt_get_errno+0x24>
 401f264:	d0a5b717 	ldw	r2,-26916(gp)
 401f268:	103ee83a 	callr	r2
 401f26c:	00000106 	br	401f274 <alt_get_errno+0x28>
 401f270:	d0b23f04 	addi	r2,gp,-14084
}
 401f274:	e037883a 	mov	sp,fp
 401f278:	dfc00117 	ldw	ra,4(sp)
 401f27c:	df000017 	ldw	fp,0(sp)
 401f280:	dec00204 	addi	sp,sp,8
 401f284:	f800283a 	ret

0401f288 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 401f288:	defffb04 	addi	sp,sp,-20
 401f28c:	dfc00415 	stw	ra,16(sp)
 401f290:	df000315 	stw	fp,12(sp)
 401f294:	dc000215 	stw	r16,8(sp)
 401f298:	df000304 	addi	fp,sp,12
 401f29c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401f2a0:	e0bffe17 	ldw	r2,-8(fp)
 401f2a4:	10800217 	ldw	r2,8(r2)
 401f2a8:	10d00034 	orhi	r3,r2,16384
 401f2ac:	e0bffe17 	ldw	r2,-8(fp)
 401f2b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401f2b4:	e03ffd15 	stw	zero,-12(fp)
 401f2b8:	00002306 	br	401f348 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401f2bc:	040100b4 	movhi	r16,1026
 401f2c0:	841e7404 	addi	r16,r16,31184
 401f2c4:	e0bffd17 	ldw	r2,-12(fp)
 401f2c8:	01400304 	movi	r5,12
 401f2cc:	1009883a 	mov	r4,r2
 401f2d0:	400cfd40 	call	400cfd4 <__mulsi3>
 401f2d4:	8085883a 	add	r2,r16,r2
 401f2d8:	10c00017 	ldw	r3,0(r2)
 401f2dc:	e0bffe17 	ldw	r2,-8(fp)
 401f2e0:	10800017 	ldw	r2,0(r2)
 401f2e4:	1880151e 	bne	r3,r2,401f33c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401f2e8:	040100b4 	movhi	r16,1026
 401f2ec:	841e7404 	addi	r16,r16,31184
 401f2f0:	e0bffd17 	ldw	r2,-12(fp)
 401f2f4:	01400304 	movi	r5,12
 401f2f8:	1009883a 	mov	r4,r2
 401f2fc:	400cfd40 	call	400cfd4 <__mulsi3>
 401f300:	8085883a 	add	r2,r16,r2
 401f304:	10800204 	addi	r2,r2,8
 401f308:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401f30c:	10000b0e 	bge	r2,zero,401f33c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 401f310:	01400304 	movi	r5,12
 401f314:	e13ffd17 	ldw	r4,-12(fp)
 401f318:	400cfd40 	call	400cfd4 <__mulsi3>
 401f31c:	1007883a 	mov	r3,r2
 401f320:	008100b4 	movhi	r2,1026
 401f324:	109e7404 	addi	r2,r2,31184
 401f328:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401f32c:	e0bffe17 	ldw	r2,-8(fp)
 401f330:	18800226 	beq	r3,r2,401f33c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401f334:	00bffcc4 	movi	r2,-13
 401f338:	00000806 	br	401f35c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401f33c:	e0bffd17 	ldw	r2,-12(fp)
 401f340:	10800044 	addi	r2,r2,1
 401f344:	e0bffd15 	stw	r2,-12(fp)
 401f348:	d0a5b617 	ldw	r2,-26920(gp)
 401f34c:	1007883a 	mov	r3,r2
 401f350:	e0bffd17 	ldw	r2,-12(fp)
 401f354:	18bfd92e 	bgeu	r3,r2,401f2bc <__alt_mem_onchip_memory2_0+0xfc01e03c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 401f358:	0005883a 	mov	r2,zero
}
 401f35c:	e6ffff04 	addi	sp,fp,-4
 401f360:	dfc00217 	ldw	ra,8(sp)
 401f364:	df000117 	ldw	fp,4(sp)
 401f368:	dc000017 	ldw	r16,0(sp)
 401f36c:	dec00304 	addi	sp,sp,12
 401f370:	f800283a 	ret

0401f374 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401f374:	defff604 	addi	sp,sp,-40
 401f378:	dfc00915 	stw	ra,36(sp)
 401f37c:	df000815 	stw	fp,32(sp)
 401f380:	df000804 	addi	fp,sp,32
 401f384:	e13ffd15 	stw	r4,-12(fp)
 401f388:	e17ffe15 	stw	r5,-8(fp)
 401f38c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401f390:	00bfffc4 	movi	r2,-1
 401f394:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 401f398:	00bffb44 	movi	r2,-19
 401f39c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401f3a0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401f3a4:	d165b404 	addi	r5,gp,-26928
 401f3a8:	e13ffd17 	ldw	r4,-12(fp)
 401f3ac:	401ed9c0 	call	401ed9c <alt_find_dev>
 401f3b0:	e0bff815 	stw	r2,-32(fp)
 401f3b4:	e0bff817 	ldw	r2,-32(fp)
 401f3b8:	1000051e 	bne	r2,zero,401f3d0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401f3bc:	e13ffd17 	ldw	r4,-12(fp)
 401f3c0:	401f9000 	call	401f900 <alt_find_file>
 401f3c4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 401f3c8:	00800044 	movi	r2,1
 401f3cc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401f3d0:	e0bff817 	ldw	r2,-32(fp)
 401f3d4:	10002b26 	beq	r2,zero,401f484 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401f3d8:	e13ff817 	ldw	r4,-32(fp)
 401f3dc:	401fa080 	call	401fa08 <alt_get_fd>
 401f3e0:	e0bff915 	stw	r2,-28(fp)
 401f3e4:	e0bff917 	ldw	r2,-28(fp)
 401f3e8:	1000030e 	bge	r2,zero,401f3f8 <open+0x84>
    {
      status = index;
 401f3ec:	e0bff917 	ldw	r2,-28(fp)
 401f3f0:	e0bffa15 	stw	r2,-24(fp)
 401f3f4:	00002506 	br	401f48c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 401f3f8:	01400304 	movi	r5,12
 401f3fc:	e13ff917 	ldw	r4,-28(fp)
 401f400:	400cfd40 	call	400cfd4 <__mulsi3>
 401f404:	1007883a 	mov	r3,r2
 401f408:	008100b4 	movhi	r2,1026
 401f40c:	109e7404 	addi	r2,r2,31184
 401f410:	1885883a 	add	r2,r3,r2
 401f414:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401f418:	e0fffe17 	ldw	r3,-8(fp)
 401f41c:	00900034 	movhi	r2,16384
 401f420:	10bfffc4 	addi	r2,r2,-1
 401f424:	1886703a 	and	r3,r3,r2
 401f428:	e0bffc17 	ldw	r2,-16(fp)
 401f42c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401f430:	e0bffb17 	ldw	r2,-20(fp)
 401f434:	1000051e 	bne	r2,zero,401f44c <open+0xd8>
 401f438:	e13ffc17 	ldw	r4,-16(fp)
 401f43c:	401f2880 	call	401f288 <alt_file_locked>
 401f440:	e0bffa15 	stw	r2,-24(fp)
 401f444:	e0bffa17 	ldw	r2,-24(fp)
 401f448:	10001016 	blt	r2,zero,401f48c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401f44c:	e0bff817 	ldw	r2,-32(fp)
 401f450:	10800317 	ldw	r2,12(r2)
 401f454:	10000826 	beq	r2,zero,401f478 <open+0x104>
 401f458:	e0bff817 	ldw	r2,-32(fp)
 401f45c:	10800317 	ldw	r2,12(r2)
 401f460:	e1ffff17 	ldw	r7,-4(fp)
 401f464:	e1bffe17 	ldw	r6,-8(fp)
 401f468:	e17ffd17 	ldw	r5,-12(fp)
 401f46c:	e13ffc17 	ldw	r4,-16(fp)
 401f470:	103ee83a 	callr	r2
 401f474:	00000106 	br	401f47c <open+0x108>
 401f478:	0005883a 	mov	r2,zero
 401f47c:	e0bffa15 	stw	r2,-24(fp)
 401f480:	00000206 	br	401f48c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401f484:	00bffb44 	movi	r2,-19
 401f488:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401f48c:	e0bffa17 	ldw	r2,-24(fp)
 401f490:	1000090e 	bge	r2,zero,401f4b8 <open+0x144>
  {
    alt_release_fd (index);  
 401f494:	e13ff917 	ldw	r4,-28(fp)
 401f498:	401bbb40 	call	401bbb4 <alt_release_fd>
    ALT_ERRNO = -status;
 401f49c:	401f24c0 	call	401f24c <alt_get_errno>
 401f4a0:	1007883a 	mov	r3,r2
 401f4a4:	e0bffa17 	ldw	r2,-24(fp)
 401f4a8:	0085c83a 	sub	r2,zero,r2
 401f4ac:	18800015 	stw	r2,0(r3)
    return -1;
 401f4b0:	00bfffc4 	movi	r2,-1
 401f4b4:	00000106 	br	401f4bc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 401f4b8:	e0bff917 	ldw	r2,-28(fp)
}
 401f4bc:	e037883a 	mov	sp,fp
 401f4c0:	dfc00117 	ldw	ra,4(sp)
 401f4c4:	df000017 	ldw	fp,0(sp)
 401f4c8:	dec00204 	addi	sp,sp,8
 401f4cc:	f800283a 	ret

0401f4d0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 401f4d0:	defff204 	addi	sp,sp,-56
 401f4d4:	dfc00a15 	stw	ra,40(sp)
 401f4d8:	df000915 	stw	fp,36(sp)
 401f4dc:	df000904 	addi	fp,sp,36
 401f4e0:	e13fff15 	stw	r4,-4(fp)
 401f4e4:	e1400215 	stw	r5,8(fp)
 401f4e8:	e1800315 	stw	r6,12(fp)
 401f4ec:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 401f4f0:	e0800204 	addi	r2,fp,8
 401f4f4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 401f4f8:	e0bfff17 	ldw	r2,-4(fp)
 401f4fc:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 401f500:	00006f06 	br	401f6c0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 401f504:	e0bff807 	ldb	r2,-32(fp)
 401f508:	10800960 	cmpeqi	r2,r2,37
 401f50c:	1000041e 	bne	r2,zero,401f520 <alt_printf+0x50>
        {
            alt_putchar(c);
 401f510:	e0bff807 	ldb	r2,-32(fp)
 401f514:	1009883a 	mov	r4,r2
 401f518:	401f6fc0 	call	401f6fc <alt_putchar>
 401f51c:	00006806 	br	401f6c0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 401f520:	e0bff717 	ldw	r2,-36(fp)
 401f524:	10c00044 	addi	r3,r2,1
 401f528:	e0fff715 	stw	r3,-36(fp)
 401f52c:	10800003 	ldbu	r2,0(r2)
 401f530:	e0bff805 	stb	r2,-32(fp)
 401f534:	e0bff807 	ldb	r2,-32(fp)
 401f538:	10006926 	beq	r2,zero,401f6e0 <alt_printf+0x210>
            {
                if (c == '%')
 401f53c:	e0bff807 	ldb	r2,-32(fp)
 401f540:	10800958 	cmpnei	r2,r2,37
 401f544:	1000041e 	bne	r2,zero,401f558 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 401f548:	e0bff807 	ldb	r2,-32(fp)
 401f54c:	1009883a 	mov	r4,r2
 401f550:	401f6fc0 	call	401f6fc <alt_putchar>
 401f554:	00005a06 	br	401f6c0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 401f558:	e0bff807 	ldb	r2,-32(fp)
 401f55c:	108018d8 	cmpnei	r2,r2,99
 401f560:	1000081e 	bne	r2,zero,401f584 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 401f564:	e0bffe17 	ldw	r2,-8(fp)
 401f568:	10c00104 	addi	r3,r2,4
 401f56c:	e0fffe15 	stw	r3,-8(fp)
 401f570:	10800017 	ldw	r2,0(r2)
 401f574:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 401f578:	e13ffd17 	ldw	r4,-12(fp)
 401f57c:	401f6fc0 	call	401f6fc <alt_putchar>
 401f580:	00004f06 	br	401f6c0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 401f584:	e0bff807 	ldb	r2,-32(fp)
 401f588:	10801e18 	cmpnei	r2,r2,120
 401f58c:	1000341e 	bne	r2,zero,401f660 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 401f590:	e0bffe17 	ldw	r2,-8(fp)
 401f594:	10c00104 	addi	r3,r2,4
 401f598:	e0fffe15 	stw	r3,-8(fp)
 401f59c:	10800017 	ldw	r2,0(r2)
 401f5a0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 401f5a4:	e0bffb17 	ldw	r2,-20(fp)
 401f5a8:	1000031e 	bne	r2,zero,401f5b8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 401f5ac:	01000c04 	movi	r4,48
 401f5b0:	401f6fc0 	call	401f6fc <alt_putchar>
                        continue;
 401f5b4:	00004206 	br	401f6c0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 401f5b8:	00800704 	movi	r2,28
 401f5bc:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 401f5c0:	00000306 	br	401f5d0 <alt_printf+0x100>
                        digit_shift -= 4;
 401f5c4:	e0bff917 	ldw	r2,-28(fp)
 401f5c8:	10bfff04 	addi	r2,r2,-4
 401f5cc:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 401f5d0:	00c003c4 	movi	r3,15
 401f5d4:	e0bff917 	ldw	r2,-28(fp)
 401f5d8:	1884983a 	sll	r2,r3,r2
 401f5dc:	1007883a 	mov	r3,r2
 401f5e0:	e0bffb17 	ldw	r2,-20(fp)
 401f5e4:	1884703a 	and	r2,r3,r2
 401f5e8:	103ff626 	beq	r2,zero,401f5c4 <__alt_mem_onchip_memory2_0+0xfc01e344>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 401f5ec:	00001906 	br	401f654 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 401f5f0:	00c003c4 	movi	r3,15
 401f5f4:	e0bff917 	ldw	r2,-28(fp)
 401f5f8:	1884983a 	sll	r2,r3,r2
 401f5fc:	1007883a 	mov	r3,r2
 401f600:	e0bffb17 	ldw	r2,-20(fp)
 401f604:	1886703a 	and	r3,r3,r2
 401f608:	e0bff917 	ldw	r2,-28(fp)
 401f60c:	1884d83a 	srl	r2,r3,r2
 401f610:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 401f614:	e0bffc17 	ldw	r2,-16(fp)
 401f618:	108002a8 	cmpgeui	r2,r2,10
 401f61c:	1000041e 	bne	r2,zero,401f630 <alt_printf+0x160>
                            c = '0' + digit;
 401f620:	e0bffc17 	ldw	r2,-16(fp)
 401f624:	10800c04 	addi	r2,r2,48
 401f628:	e0bff805 	stb	r2,-32(fp)
 401f62c:	00000306 	br	401f63c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 401f630:	e0bffc17 	ldw	r2,-16(fp)
 401f634:	108015c4 	addi	r2,r2,87
 401f638:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 401f63c:	e0bff807 	ldb	r2,-32(fp)
 401f640:	1009883a 	mov	r4,r2
 401f644:	401f6fc0 	call	401f6fc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 401f648:	e0bff917 	ldw	r2,-28(fp)
 401f64c:	10bfff04 	addi	r2,r2,-4
 401f650:	e0bff915 	stw	r2,-28(fp)
 401f654:	e0bff917 	ldw	r2,-28(fp)
 401f658:	103fe50e 	bge	r2,zero,401f5f0 <__alt_mem_onchip_memory2_0+0xfc01e370>
 401f65c:	00001806 	br	401f6c0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 401f660:	e0bff807 	ldb	r2,-32(fp)
 401f664:	10801cd8 	cmpnei	r2,r2,115
 401f668:	1000151e 	bne	r2,zero,401f6c0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 401f66c:	e0bffe17 	ldw	r2,-8(fp)
 401f670:	10c00104 	addi	r3,r2,4
 401f674:	e0fffe15 	stw	r3,-8(fp)
 401f678:	10800017 	ldw	r2,0(r2)
 401f67c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 401f680:	00000906 	br	401f6a8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 401f684:	e0bffa17 	ldw	r2,-24(fp)
 401f688:	10c00044 	addi	r3,r2,1
 401f68c:	e0fffa15 	stw	r3,-24(fp)
 401f690:	10800003 	ldbu	r2,0(r2)
 401f694:	10803fcc 	andi	r2,r2,255
 401f698:	1080201c 	xori	r2,r2,128
 401f69c:	10bfe004 	addi	r2,r2,-128
 401f6a0:	1009883a 	mov	r4,r2
 401f6a4:	401f6fc0 	call	401f6fc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 401f6a8:	e0bffa17 	ldw	r2,-24(fp)
 401f6ac:	10800003 	ldbu	r2,0(r2)
 401f6b0:	10803fcc 	andi	r2,r2,255
 401f6b4:	1080201c 	xori	r2,r2,128
 401f6b8:	10bfe004 	addi	r2,r2,-128
 401f6bc:	103ff11e 	bne	r2,zero,401f684 <__alt_mem_onchip_memory2_0+0xfc01e404>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 401f6c0:	e0bff717 	ldw	r2,-36(fp)
 401f6c4:	10c00044 	addi	r3,r2,1
 401f6c8:	e0fff715 	stw	r3,-36(fp)
 401f6cc:	10800003 	ldbu	r2,0(r2)
 401f6d0:	e0bff805 	stb	r2,-32(fp)
 401f6d4:	e0bff807 	ldb	r2,-32(fp)
 401f6d8:	103f8a1e 	bne	r2,zero,401f504 <__alt_mem_onchip_memory2_0+0xfc01e284>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 401f6dc:	00000106 	br	401f6e4 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 401f6e0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 401f6e4:	0001883a 	nop
 401f6e8:	e037883a 	mov	sp,fp
 401f6ec:	dfc00117 	ldw	ra,4(sp)
 401f6f0:	df000017 	ldw	fp,0(sp)
 401f6f4:	dec00504 	addi	sp,sp,20
 401f6f8:	f800283a 	ret

0401f6fc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 401f6fc:	defffd04 	addi	sp,sp,-12
 401f700:	dfc00215 	stw	ra,8(sp)
 401f704:	df000115 	stw	fp,4(sp)
 401f708:	df000104 	addi	fp,sp,4
 401f70c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 401f710:	d0a5ad17 	ldw	r2,-26956(gp)
 401f714:	10800217 	ldw	r2,8(r2)
 401f718:	100b883a 	mov	r5,r2
 401f71c:	e13fff17 	ldw	r4,-4(fp)
 401f720:	40156b00 	call	40156b0 <putc>
#endif
#endif
}
 401f724:	e037883a 	mov	sp,fp
 401f728:	dfc00117 	ldw	ra,4(sp)
 401f72c:	df000017 	ldw	fp,0(sp)
 401f730:	dec00204 	addi	sp,sp,8
 401f734:	f800283a 	ret

0401f738 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 401f738:	defffa04 	addi	sp,sp,-24
 401f73c:	df000515 	stw	fp,20(sp)
 401f740:	df000504 	addi	fp,sp,20
 401f744:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f748:	0005303a 	rdctl	r2,status
 401f74c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f750:	e0fffc17 	ldw	r3,-16(fp)
 401f754:	00bfff84 	movi	r2,-2
 401f758:	1884703a 	and	r2,r3,r2
 401f75c:	1001703a 	wrctl	status,r2
  
  return context;
 401f760:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 401f764:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 401f768:	e0bfff17 	ldw	r2,-4(fp)
 401f76c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401f770:	e0bffd17 	ldw	r2,-12(fp)
 401f774:	10800017 	ldw	r2,0(r2)
 401f778:	e0fffd17 	ldw	r3,-12(fp)
 401f77c:	18c00117 	ldw	r3,4(r3)
 401f780:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 401f784:	e0bffd17 	ldw	r2,-12(fp)
 401f788:	10800117 	ldw	r2,4(r2)
 401f78c:	e0fffd17 	ldw	r3,-12(fp)
 401f790:	18c00017 	ldw	r3,0(r3)
 401f794:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 401f798:	e0bffd17 	ldw	r2,-12(fp)
 401f79c:	e0fffd17 	ldw	r3,-12(fp)
 401f7a0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 401f7a4:	e0bffd17 	ldw	r2,-12(fp)
 401f7a8:	e0fffd17 	ldw	r3,-12(fp)
 401f7ac:	10c00015 	stw	r3,0(r2)
 401f7b0:	e0bffb17 	ldw	r2,-20(fp)
 401f7b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f7b8:	e0bffe17 	ldw	r2,-8(fp)
 401f7bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 401f7c0:	0001883a 	nop
 401f7c4:	e037883a 	mov	sp,fp
 401f7c8:	df000017 	ldw	fp,0(sp)
 401f7cc:	dec00104 	addi	sp,sp,4
 401f7d0:	f800283a 	ret

0401f7d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 401f7d4:	defffb04 	addi	sp,sp,-20
 401f7d8:	dfc00415 	stw	ra,16(sp)
 401f7dc:	df000315 	stw	fp,12(sp)
 401f7e0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 401f7e4:	d0a5bc17 	ldw	r2,-26896(gp)
 401f7e8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 401f7ec:	d0b24817 	ldw	r2,-14048(gp)
 401f7f0:	10800044 	addi	r2,r2,1
 401f7f4:	d0b24815 	stw	r2,-14048(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401f7f8:	00002e06 	br	401f8b4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 401f7fc:	e0bffd17 	ldw	r2,-12(fp)
 401f800:	10800017 	ldw	r2,0(r2)
 401f804:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401f808:	e0bffd17 	ldw	r2,-12(fp)
 401f80c:	10800403 	ldbu	r2,16(r2)
 401f810:	10803fcc 	andi	r2,r2,255
 401f814:	10000426 	beq	r2,zero,401f828 <alt_tick+0x54>
 401f818:	d0b24817 	ldw	r2,-14048(gp)
 401f81c:	1000021e 	bne	r2,zero,401f828 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 401f820:	e0bffd17 	ldw	r2,-12(fp)
 401f824:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401f828:	e0bffd17 	ldw	r2,-12(fp)
 401f82c:	10800217 	ldw	r2,8(r2)
 401f830:	d0f24817 	ldw	r3,-14048(gp)
 401f834:	18801d36 	bltu	r3,r2,401f8ac <alt_tick+0xd8>
 401f838:	e0bffd17 	ldw	r2,-12(fp)
 401f83c:	10800403 	ldbu	r2,16(r2)
 401f840:	10803fcc 	andi	r2,r2,255
 401f844:	1000191e 	bne	r2,zero,401f8ac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 401f848:	e0bffd17 	ldw	r2,-12(fp)
 401f84c:	10800317 	ldw	r2,12(r2)
 401f850:	e0fffd17 	ldw	r3,-12(fp)
 401f854:	18c00517 	ldw	r3,20(r3)
 401f858:	1809883a 	mov	r4,r3
 401f85c:	103ee83a 	callr	r2
 401f860:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 401f864:	e0bfff17 	ldw	r2,-4(fp)
 401f868:	1000031e 	bne	r2,zero,401f878 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 401f86c:	e13ffd17 	ldw	r4,-12(fp)
 401f870:	401f7380 	call	401f738 <alt_alarm_stop>
 401f874:	00000d06 	br	401f8ac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 401f878:	e0bffd17 	ldw	r2,-12(fp)
 401f87c:	10c00217 	ldw	r3,8(r2)
 401f880:	e0bfff17 	ldw	r2,-4(fp)
 401f884:	1887883a 	add	r3,r3,r2
 401f888:	e0bffd17 	ldw	r2,-12(fp)
 401f88c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 401f890:	e0bffd17 	ldw	r2,-12(fp)
 401f894:	10c00217 	ldw	r3,8(r2)
 401f898:	d0b24817 	ldw	r2,-14048(gp)
 401f89c:	1880032e 	bgeu	r3,r2,401f8ac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 401f8a0:	e0bffd17 	ldw	r2,-12(fp)
 401f8a4:	00c00044 	movi	r3,1
 401f8a8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 401f8ac:	e0bffe17 	ldw	r2,-8(fp)
 401f8b0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401f8b4:	e0fffd17 	ldw	r3,-12(fp)
 401f8b8:	d0a5bc04 	addi	r2,gp,-26896
 401f8bc:	18bfcf1e 	bne	r3,r2,401f7fc <__alt_mem_onchip_memory2_0+0xfc01e57c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 401f8c0:	0001883a 	nop
}
 401f8c4:	0001883a 	nop
 401f8c8:	e037883a 	mov	sp,fp
 401f8cc:	dfc00117 	ldw	ra,4(sp)
 401f8d0:	df000017 	ldw	fp,0(sp)
 401f8d4:	dec00204 	addi	sp,sp,8
 401f8d8:	f800283a 	ret

0401f8dc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 401f8dc:	deffff04 	addi	sp,sp,-4
 401f8e0:	df000015 	stw	fp,0(sp)
 401f8e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 401f8e8:	000170fa 	wrctl	ienable,zero
}
 401f8ec:	0001883a 	nop
 401f8f0:	e037883a 	mov	sp,fp
 401f8f4:	df000017 	ldw	fp,0(sp)
 401f8f8:	dec00104 	addi	sp,sp,4
 401f8fc:	f800283a 	ret

0401f900 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401f900:	defffb04 	addi	sp,sp,-20
 401f904:	dfc00415 	stw	ra,16(sp)
 401f908:	df000315 	stw	fp,12(sp)
 401f90c:	df000304 	addi	fp,sp,12
 401f910:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 401f914:	d0a5b217 	ldw	r2,-26936(gp)
 401f918:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401f91c:	00003106 	br	401f9e4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 401f920:	e0bffd17 	ldw	r2,-12(fp)
 401f924:	10800217 	ldw	r2,8(r2)
 401f928:	1009883a 	mov	r4,r2
 401f92c:	400f14c0 	call	400f14c <strlen>
 401f930:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 401f934:	e0bffd17 	ldw	r2,-12(fp)
 401f938:	10c00217 	ldw	r3,8(r2)
 401f93c:	e0bffe17 	ldw	r2,-8(fp)
 401f940:	10bfffc4 	addi	r2,r2,-1
 401f944:	1885883a 	add	r2,r3,r2
 401f948:	10800003 	ldbu	r2,0(r2)
 401f94c:	10803fcc 	andi	r2,r2,255
 401f950:	1080201c 	xori	r2,r2,128
 401f954:	10bfe004 	addi	r2,r2,-128
 401f958:	10800bd8 	cmpnei	r2,r2,47
 401f95c:	1000031e 	bne	r2,zero,401f96c <alt_find_file+0x6c>
    {
      len -= 1;
 401f960:	e0bffe17 	ldw	r2,-8(fp)
 401f964:	10bfffc4 	addi	r2,r2,-1
 401f968:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401f96c:	e0bffe17 	ldw	r2,-8(fp)
 401f970:	e0ffff17 	ldw	r3,-4(fp)
 401f974:	1885883a 	add	r2,r3,r2
 401f978:	10800003 	ldbu	r2,0(r2)
 401f97c:	10803fcc 	andi	r2,r2,255
 401f980:	1080201c 	xori	r2,r2,128
 401f984:	10bfe004 	addi	r2,r2,-128
 401f988:	10800be0 	cmpeqi	r2,r2,47
 401f98c:	1000081e 	bne	r2,zero,401f9b0 <alt_find_file+0xb0>
 401f990:	e0bffe17 	ldw	r2,-8(fp)
 401f994:	e0ffff17 	ldw	r3,-4(fp)
 401f998:	1885883a 	add	r2,r3,r2
 401f99c:	10800003 	ldbu	r2,0(r2)
 401f9a0:	10803fcc 	andi	r2,r2,255
 401f9a4:	1080201c 	xori	r2,r2,128
 401f9a8:	10bfe004 	addi	r2,r2,-128
 401f9ac:	10000a1e 	bne	r2,zero,401f9d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401f9b0:	e0bffd17 	ldw	r2,-12(fp)
 401f9b4:	10800217 	ldw	r2,8(r2)
 401f9b8:	e0fffe17 	ldw	r3,-8(fp)
 401f9bc:	180d883a 	mov	r6,r3
 401f9c0:	e17fff17 	ldw	r5,-4(fp)
 401f9c4:	1009883a 	mov	r4,r2
 401f9c8:	401fbb40 	call	401fbb4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401f9cc:	1000021e 	bne	r2,zero,401f9d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401f9d0:	e0bffd17 	ldw	r2,-12(fp)
 401f9d4:	00000706 	br	401f9f4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 401f9d8:	e0bffd17 	ldw	r2,-12(fp)
 401f9dc:	10800017 	ldw	r2,0(r2)
 401f9e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401f9e4:	e0fffd17 	ldw	r3,-12(fp)
 401f9e8:	d0a5b204 	addi	r2,gp,-26936
 401f9ec:	18bfcc1e 	bne	r3,r2,401f920 <__alt_mem_onchip_memory2_0+0xfc01e6a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401f9f0:	0005883a 	mov	r2,zero
}
 401f9f4:	e037883a 	mov	sp,fp
 401f9f8:	dfc00117 	ldw	ra,4(sp)
 401f9fc:	df000017 	ldw	fp,0(sp)
 401fa00:	dec00204 	addi	sp,sp,8
 401fa04:	f800283a 	ret

0401fa08 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 401fa08:	defffa04 	addi	sp,sp,-24
 401fa0c:	dfc00515 	stw	ra,20(sp)
 401fa10:	df000415 	stw	fp,16(sp)
 401fa14:	dc000315 	stw	r16,12(sp)
 401fa18:	df000404 	addi	fp,sp,16
 401fa1c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 401fa20:	00bffa04 	movi	r2,-24
 401fa24:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401fa28:	e03ffc15 	stw	zero,-16(fp)
 401fa2c:	00001d06 	br	401faa4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 401fa30:	040100b4 	movhi	r16,1026
 401fa34:	841e7404 	addi	r16,r16,31184
 401fa38:	e0bffc17 	ldw	r2,-16(fp)
 401fa3c:	01400304 	movi	r5,12
 401fa40:	1009883a 	mov	r4,r2
 401fa44:	400cfd40 	call	400cfd4 <__mulsi3>
 401fa48:	8085883a 	add	r2,r16,r2
 401fa4c:	10800017 	ldw	r2,0(r2)
 401fa50:	1000111e 	bne	r2,zero,401fa98 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 401fa54:	040100b4 	movhi	r16,1026
 401fa58:	841e7404 	addi	r16,r16,31184
 401fa5c:	e0bffc17 	ldw	r2,-16(fp)
 401fa60:	01400304 	movi	r5,12
 401fa64:	1009883a 	mov	r4,r2
 401fa68:	400cfd40 	call	400cfd4 <__mulsi3>
 401fa6c:	8085883a 	add	r2,r16,r2
 401fa70:	e0fffe17 	ldw	r3,-8(fp)
 401fa74:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 401fa78:	d0e5b617 	ldw	r3,-26920(gp)
 401fa7c:	e0bffc17 	ldw	r2,-16(fp)
 401fa80:	1880020e 	bge	r3,r2,401fa8c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 401fa84:	e0bffc17 	ldw	r2,-16(fp)
 401fa88:	d0a5b615 	stw	r2,-26920(gp)
      }
      rc = i;
 401fa8c:	e0bffc17 	ldw	r2,-16(fp)
 401fa90:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 401fa94:	00000606 	br	401fab0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401fa98:	e0bffc17 	ldw	r2,-16(fp)
 401fa9c:	10800044 	addi	r2,r2,1
 401faa0:	e0bffc15 	stw	r2,-16(fp)
 401faa4:	e0bffc17 	ldw	r2,-16(fp)
 401faa8:	10800810 	cmplti	r2,r2,32
 401faac:	103fe01e 	bne	r2,zero,401fa30 <__alt_mem_onchip_memory2_0+0xfc01e7b0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 401fab0:	e0bffd17 	ldw	r2,-12(fp)
}
 401fab4:	e6ffff04 	addi	sp,fp,-4
 401fab8:	dfc00217 	ldw	ra,8(sp)
 401fabc:	df000117 	ldw	fp,4(sp)
 401fac0:	dc000017 	ldw	r16,0(sp)
 401fac4:	dec00304 	addi	sp,sp,12
 401fac8:	f800283a 	ret

0401facc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 401facc:	defffe04 	addi	sp,sp,-8
 401fad0:	df000115 	stw	fp,4(sp)
 401fad4:	df000104 	addi	fp,sp,4
 401fad8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 401fadc:	e0bfff17 	ldw	r2,-4(fp)
 401fae0:	10bffe84 	addi	r2,r2,-6
 401fae4:	10c00428 	cmpgeui	r3,r2,16
 401fae8:	18001a1e 	bne	r3,zero,401fb54 <alt_exception_cause_generated_bad_addr+0x88>
 401faec:	100690ba 	slli	r3,r2,2
 401faf0:	008100b4 	movhi	r2,1026
 401faf4:	10bec104 	addi	r2,r2,-1276
 401faf8:	1885883a 	add	r2,r3,r2
 401fafc:	10800017 	ldw	r2,0(r2)
 401fb00:	1000683a 	jmp	r2
 401fb04:	0401fb44 	movi	r16,2029
 401fb08:	0401fb44 	movi	r16,2029
 401fb0c:	0401fb54 	movui	r16,2029
 401fb10:	0401fb54 	movui	r16,2029
 401fb14:	0401fb54 	movui	r16,2029
 401fb18:	0401fb44 	movi	r16,2029
 401fb1c:	0401fb4c 	andi	r16,zero,2029
 401fb20:	0401fb54 	movui	r16,2029
 401fb24:	0401fb44 	movi	r16,2029
 401fb28:	0401fb44 	movi	r16,2029
 401fb2c:	0401fb54 	movui	r16,2029
 401fb30:	0401fb44 	movi	r16,2029
 401fb34:	0401fb4c 	andi	r16,zero,2029
 401fb38:	0401fb54 	movui	r16,2029
 401fb3c:	0401fb54 	movui	r16,2029
 401fb40:	0401fb44 	movi	r16,2029
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 401fb44:	00800044 	movi	r2,1
 401fb48:	00000306 	br	401fb58 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 401fb4c:	0005883a 	mov	r2,zero
 401fb50:	00000106 	br	401fb58 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 401fb54:	0005883a 	mov	r2,zero
  }
}
 401fb58:	e037883a 	mov	sp,fp
 401fb5c:	df000017 	ldw	fp,0(sp)
 401fb60:	dec00104 	addi	sp,sp,4
 401fb64:	f800283a 	ret

0401fb68 <atexit>:
 401fb68:	200b883a 	mov	r5,r4
 401fb6c:	000f883a 	mov	r7,zero
 401fb70:	000d883a 	mov	r6,zero
 401fb74:	0009883a 	mov	r4,zero
 401fb78:	401fc301 	jmpi	401fc30 <__register_exitproc>

0401fb7c <exit>:
 401fb7c:	defffe04 	addi	sp,sp,-8
 401fb80:	000b883a 	mov	r5,zero
 401fb84:	dc000015 	stw	r16,0(sp)
 401fb88:	dfc00115 	stw	ra,4(sp)
 401fb8c:	2021883a 	mov	r16,r4
 401fb90:	401fd480 	call	401fd48 <__call_exitprocs>
 401fb94:	008100f4 	movhi	r2,1027
 401fb98:	10a8a604 	addi	r2,r2,-23912
 401fb9c:	11000017 	ldw	r4,0(r2)
 401fba0:	20800f17 	ldw	r2,60(r4)
 401fba4:	10000126 	beq	r2,zero,401fbac <exit+0x30>
 401fba8:	103ee83a 	callr	r2
 401fbac:	8009883a 	mov	r4,r16
 401fbb0:	401b4100 	call	401b410 <_exit>

0401fbb4 <memcmp>:
 401fbb4:	01c000c4 	movi	r7,3
 401fbb8:	3980192e 	bgeu	r7,r6,401fc20 <memcmp+0x6c>
 401fbbc:	2144b03a 	or	r2,r4,r5
 401fbc0:	11c4703a 	and	r2,r2,r7
 401fbc4:	10000f26 	beq	r2,zero,401fc04 <memcmp+0x50>
 401fbc8:	20800003 	ldbu	r2,0(r4)
 401fbcc:	28c00003 	ldbu	r3,0(r5)
 401fbd0:	10c0151e 	bne	r2,r3,401fc28 <memcmp+0x74>
 401fbd4:	31bfff84 	addi	r6,r6,-2
 401fbd8:	01ffffc4 	movi	r7,-1
 401fbdc:	00000406 	br	401fbf0 <memcmp+0x3c>
 401fbe0:	20800003 	ldbu	r2,0(r4)
 401fbe4:	28c00003 	ldbu	r3,0(r5)
 401fbe8:	31bfffc4 	addi	r6,r6,-1
 401fbec:	10c00e1e 	bne	r2,r3,401fc28 <memcmp+0x74>
 401fbf0:	21000044 	addi	r4,r4,1
 401fbf4:	29400044 	addi	r5,r5,1
 401fbf8:	31fff91e 	bne	r6,r7,401fbe0 <__alt_mem_onchip_memory2_0+0xfc01e960>
 401fbfc:	0005883a 	mov	r2,zero
 401fc00:	f800283a 	ret
 401fc04:	20c00017 	ldw	r3,0(r4)
 401fc08:	28800017 	ldw	r2,0(r5)
 401fc0c:	18bfee1e 	bne	r3,r2,401fbc8 <__alt_mem_onchip_memory2_0+0xfc01e948>
 401fc10:	31bfff04 	addi	r6,r6,-4
 401fc14:	21000104 	addi	r4,r4,4
 401fc18:	29400104 	addi	r5,r5,4
 401fc1c:	39bff936 	bltu	r7,r6,401fc04 <__alt_mem_onchip_memory2_0+0xfc01e984>
 401fc20:	303fe91e 	bne	r6,zero,401fbc8 <__alt_mem_onchip_memory2_0+0xfc01e948>
 401fc24:	003ff506 	br	401fbfc <__alt_mem_onchip_memory2_0+0xfc01e97c>
 401fc28:	10c5c83a 	sub	r2,r2,r3
 401fc2c:	f800283a 	ret

0401fc30 <__register_exitproc>:
 401fc30:	defffa04 	addi	sp,sp,-24
 401fc34:	dc000315 	stw	r16,12(sp)
 401fc38:	040100f4 	movhi	r16,1027
 401fc3c:	8428a604 	addi	r16,r16,-23912
 401fc40:	80c00017 	ldw	r3,0(r16)
 401fc44:	dc400415 	stw	r17,16(sp)
 401fc48:	dfc00515 	stw	ra,20(sp)
 401fc4c:	18805217 	ldw	r2,328(r3)
 401fc50:	2023883a 	mov	r17,r4
 401fc54:	10003726 	beq	r2,zero,401fd34 <__register_exitproc+0x104>
 401fc58:	10c00117 	ldw	r3,4(r2)
 401fc5c:	010007c4 	movi	r4,31
 401fc60:	20c00e16 	blt	r4,r3,401fc9c <__register_exitproc+0x6c>
 401fc64:	1a000044 	addi	r8,r3,1
 401fc68:	8800221e 	bne	r17,zero,401fcf4 <__register_exitproc+0xc4>
 401fc6c:	18c00084 	addi	r3,r3,2
 401fc70:	18c7883a 	add	r3,r3,r3
 401fc74:	18c7883a 	add	r3,r3,r3
 401fc78:	12000115 	stw	r8,4(r2)
 401fc7c:	10c7883a 	add	r3,r2,r3
 401fc80:	19400015 	stw	r5,0(r3)
 401fc84:	0005883a 	mov	r2,zero
 401fc88:	dfc00517 	ldw	ra,20(sp)
 401fc8c:	dc400417 	ldw	r17,16(sp)
 401fc90:	dc000317 	ldw	r16,12(sp)
 401fc94:	dec00604 	addi	sp,sp,24
 401fc98:	f800283a 	ret
 401fc9c:	00810074 	movhi	r2,1025
 401fca0:	10b84504 	addi	r2,r2,-7916
 401fca4:	10002626 	beq	r2,zero,401fd40 <__register_exitproc+0x110>
 401fca8:	01006404 	movi	r4,400
 401fcac:	d9400015 	stw	r5,0(sp)
 401fcb0:	d9800115 	stw	r6,4(sp)
 401fcb4:	d9c00215 	stw	r7,8(sp)
 401fcb8:	400e1140 	call	400e114 <malloc>
 401fcbc:	d9400017 	ldw	r5,0(sp)
 401fcc0:	d9800117 	ldw	r6,4(sp)
 401fcc4:	d9c00217 	ldw	r7,8(sp)
 401fcc8:	10001d26 	beq	r2,zero,401fd40 <__register_exitproc+0x110>
 401fccc:	81000017 	ldw	r4,0(r16)
 401fcd0:	10000115 	stw	zero,4(r2)
 401fcd4:	02000044 	movi	r8,1
 401fcd8:	22405217 	ldw	r9,328(r4)
 401fcdc:	0007883a 	mov	r3,zero
 401fce0:	12400015 	stw	r9,0(r2)
 401fce4:	20805215 	stw	r2,328(r4)
 401fce8:	10006215 	stw	zero,392(r2)
 401fcec:	10006315 	stw	zero,396(r2)
 401fcf0:	883fde26 	beq	r17,zero,401fc6c <__alt_mem_onchip_memory2_0+0xfc01e9ec>
 401fcf4:	18c9883a 	add	r4,r3,r3
 401fcf8:	2109883a 	add	r4,r4,r4
 401fcfc:	1109883a 	add	r4,r2,r4
 401fd00:	21802215 	stw	r6,136(r4)
 401fd04:	01800044 	movi	r6,1
 401fd08:	12406217 	ldw	r9,392(r2)
 401fd0c:	30cc983a 	sll	r6,r6,r3
 401fd10:	4992b03a 	or	r9,r9,r6
 401fd14:	12406215 	stw	r9,392(r2)
 401fd18:	21c04215 	stw	r7,264(r4)
 401fd1c:	01000084 	movi	r4,2
 401fd20:	893fd21e 	bne	r17,r4,401fc6c <__alt_mem_onchip_memory2_0+0xfc01e9ec>
 401fd24:	11006317 	ldw	r4,396(r2)
 401fd28:	218cb03a 	or	r6,r4,r6
 401fd2c:	11806315 	stw	r6,396(r2)
 401fd30:	003fce06 	br	401fc6c <__alt_mem_onchip_memory2_0+0xfc01e9ec>
 401fd34:	18805304 	addi	r2,r3,332
 401fd38:	18805215 	stw	r2,328(r3)
 401fd3c:	003fc606 	br	401fc58 <__alt_mem_onchip_memory2_0+0xfc01e9d8>
 401fd40:	00bfffc4 	movi	r2,-1
 401fd44:	003fd006 	br	401fc88 <__alt_mem_onchip_memory2_0+0xfc01ea08>

0401fd48 <__call_exitprocs>:
 401fd48:	defff504 	addi	sp,sp,-44
 401fd4c:	df000915 	stw	fp,36(sp)
 401fd50:	dd400615 	stw	r21,24(sp)
 401fd54:	dc800315 	stw	r18,12(sp)
 401fd58:	dfc00a15 	stw	ra,40(sp)
 401fd5c:	ddc00815 	stw	r23,32(sp)
 401fd60:	dd800715 	stw	r22,28(sp)
 401fd64:	dd000515 	stw	r20,20(sp)
 401fd68:	dcc00415 	stw	r19,16(sp)
 401fd6c:	dc400215 	stw	r17,8(sp)
 401fd70:	dc000115 	stw	r16,4(sp)
 401fd74:	d9000015 	stw	r4,0(sp)
 401fd78:	2839883a 	mov	fp,r5
 401fd7c:	04800044 	movi	r18,1
 401fd80:	057fffc4 	movi	r21,-1
 401fd84:	008100f4 	movhi	r2,1027
 401fd88:	10a8a604 	addi	r2,r2,-23912
 401fd8c:	12000017 	ldw	r8,0(r2)
 401fd90:	45005217 	ldw	r20,328(r8)
 401fd94:	44c05204 	addi	r19,r8,328
 401fd98:	a0001c26 	beq	r20,zero,401fe0c <__call_exitprocs+0xc4>
 401fd9c:	a0800117 	ldw	r2,4(r20)
 401fda0:	15ffffc4 	addi	r23,r2,-1
 401fda4:	b8000d16 	blt	r23,zero,401fddc <__call_exitprocs+0x94>
 401fda8:	14000044 	addi	r16,r2,1
 401fdac:	8421883a 	add	r16,r16,r16
 401fdb0:	8421883a 	add	r16,r16,r16
 401fdb4:	84402004 	addi	r17,r16,128
 401fdb8:	a463883a 	add	r17,r20,r17
 401fdbc:	a421883a 	add	r16,r20,r16
 401fdc0:	e0001e26 	beq	fp,zero,401fe3c <__call_exitprocs+0xf4>
 401fdc4:	80804017 	ldw	r2,256(r16)
 401fdc8:	e0801c26 	beq	fp,r2,401fe3c <__call_exitprocs+0xf4>
 401fdcc:	bdffffc4 	addi	r23,r23,-1
 401fdd0:	843fff04 	addi	r16,r16,-4
 401fdd4:	8c7fff04 	addi	r17,r17,-4
 401fdd8:	bd7ff91e 	bne	r23,r21,401fdc0 <__alt_mem_onchip_memory2_0+0xfc01eb40>
 401fddc:	00810074 	movhi	r2,1025
 401fde0:	10b84a04 	addi	r2,r2,-7896
 401fde4:	10000926 	beq	r2,zero,401fe0c <__call_exitprocs+0xc4>
 401fde8:	a0800117 	ldw	r2,4(r20)
 401fdec:	1000301e 	bne	r2,zero,401feb0 <__call_exitprocs+0x168>
 401fdf0:	a0800017 	ldw	r2,0(r20)
 401fdf4:	10003226 	beq	r2,zero,401fec0 <__call_exitprocs+0x178>
 401fdf8:	a009883a 	mov	r4,r20
 401fdfc:	98800015 	stw	r2,0(r19)
 401fe00:	400e1280 	call	400e128 <free>
 401fe04:	9d000017 	ldw	r20,0(r19)
 401fe08:	a03fe41e 	bne	r20,zero,401fd9c <__alt_mem_onchip_memory2_0+0xfc01eb1c>
 401fe0c:	dfc00a17 	ldw	ra,40(sp)
 401fe10:	df000917 	ldw	fp,36(sp)
 401fe14:	ddc00817 	ldw	r23,32(sp)
 401fe18:	dd800717 	ldw	r22,28(sp)
 401fe1c:	dd400617 	ldw	r21,24(sp)
 401fe20:	dd000517 	ldw	r20,20(sp)
 401fe24:	dcc00417 	ldw	r19,16(sp)
 401fe28:	dc800317 	ldw	r18,12(sp)
 401fe2c:	dc400217 	ldw	r17,8(sp)
 401fe30:	dc000117 	ldw	r16,4(sp)
 401fe34:	dec00b04 	addi	sp,sp,44
 401fe38:	f800283a 	ret
 401fe3c:	a0800117 	ldw	r2,4(r20)
 401fe40:	80c00017 	ldw	r3,0(r16)
 401fe44:	10bfffc4 	addi	r2,r2,-1
 401fe48:	15c01426 	beq	r2,r23,401fe9c <__call_exitprocs+0x154>
 401fe4c:	80000015 	stw	zero,0(r16)
 401fe50:	183fde26 	beq	r3,zero,401fdcc <__alt_mem_onchip_memory2_0+0xfc01eb4c>
 401fe54:	95c8983a 	sll	r4,r18,r23
 401fe58:	a0806217 	ldw	r2,392(r20)
 401fe5c:	a5800117 	ldw	r22,4(r20)
 401fe60:	2084703a 	and	r2,r4,r2
 401fe64:	10000b26 	beq	r2,zero,401fe94 <__call_exitprocs+0x14c>
 401fe68:	a0806317 	ldw	r2,396(r20)
 401fe6c:	2088703a 	and	r4,r4,r2
 401fe70:	20000c1e 	bne	r4,zero,401fea4 <__call_exitprocs+0x15c>
 401fe74:	89400017 	ldw	r5,0(r17)
 401fe78:	d9000017 	ldw	r4,0(sp)
 401fe7c:	183ee83a 	callr	r3
 401fe80:	a0800117 	ldw	r2,4(r20)
 401fe84:	15bfbf1e 	bne	r2,r22,401fd84 <__alt_mem_onchip_memory2_0+0xfc01eb04>
 401fe88:	98800017 	ldw	r2,0(r19)
 401fe8c:	153fcf26 	beq	r2,r20,401fdcc <__alt_mem_onchip_memory2_0+0xfc01eb4c>
 401fe90:	003fbc06 	br	401fd84 <__alt_mem_onchip_memory2_0+0xfc01eb04>
 401fe94:	183ee83a 	callr	r3
 401fe98:	003ff906 	br	401fe80 <__alt_mem_onchip_memory2_0+0xfc01ec00>
 401fe9c:	a5c00115 	stw	r23,4(r20)
 401fea0:	003feb06 	br	401fe50 <__alt_mem_onchip_memory2_0+0xfc01ebd0>
 401fea4:	89000017 	ldw	r4,0(r17)
 401fea8:	183ee83a 	callr	r3
 401feac:	003ff406 	br	401fe80 <__alt_mem_onchip_memory2_0+0xfc01ec00>
 401feb0:	a0800017 	ldw	r2,0(r20)
 401feb4:	a027883a 	mov	r19,r20
 401feb8:	1029883a 	mov	r20,r2
 401febc:	003fb606 	br	401fd98 <__alt_mem_onchip_memory2_0+0xfc01eb18>
 401fec0:	0005883a 	mov	r2,zero
 401fec4:	003ffb06 	br	401feb4 <__alt_mem_onchip_memory2_0+0xfc01ec34>
 401fec8:	01110bff 	0x1110bff
 401fecc:	01010004 	movi	r4,1024
 401fed0:	7f000105 	stb	fp,4(r15)
 401fed4:	007d0000 	call	7d000 <__alt_mem_sdram-0x3f83000>
 401fed8:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 401fedc:	01883a00 	call	1883a0 <__alt_mem_sdram-0x3e77c60>
 401fee0:	010d0bff 	0x10d0bff
 401fee4:	01010002 	0x1010002
	...
 401fef0:	010d0bff 	0x10d0bff
 401fef4:	01010004 	movi	r4,1024
 401fef8:	00000100 	call	10 <__alt_mem_sdram-0x3fffff0>
 401fefc:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 401ff00:	0400a56c 	andhi	r16,zero,661
 401ff04:	0400ccbc 	xorhi	r16,zero,818
