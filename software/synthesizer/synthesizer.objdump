
synthesizer.elf:     file format elf32-littlenios2
synthesizer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000273c8 memsz 0x000273c8 flags r-x
    LOAD off    0x000283e8 vaddr 0x040273e8 paddr 0x0402a5c4 align 2**12
         filesz 0x000031dc memsz 0x000031dc flags rw-
    LOAD off    0x0002b7a0 vaddr 0x0402d7a0 paddr 0x0402d7a0 align 2**12
         filesz 0x00000000 memsz 0x0000025c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001ffc8  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000071f0  040201f8  040201f8  000211f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031dc  040273e8  0402a5c4  000283e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000025c  0402d7a0  0402d7a0  0002b7a0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0402d9fc  0402d9fc  0002b5c4  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08001280  08001280  0002b5c4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0002b5c4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000019f0  00000000  00000000  0002b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000500aa  00000000  00000000  0002cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00010462  00000000  00000000  0007d082  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013e05  00000000  00000000  0008d4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000577c  00000000  00000000  000a12ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000fcd5  00000000  00000000  000a6a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001eafd  00000000  00000000  000b673d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000070  00000000  00000000  000d523c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000029f0  00000000  00000000  000d52b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000f040a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000f040d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000f0419  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000f041a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000f041b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000f041f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000f0423  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000f0427  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000f0432  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000f043d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  000f0448  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000020  00000000  00000000  000f0457  2**0
                  CONTENTS, READONLY
 30 .jdi          000057d2  00000000  00000000  000f0477  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000a5861  00000000  00000000  000f5c49  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
040201f8 l    d  .rodata	00000000 .rodata
040273e8 l    d  .rwdata	00000000 .rwdata
0402d7a0 l    d  .bss	00000000 .bss
0402d9fc l    d  .sdram	00000000 .sdram
08001280 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../synthesizer_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
04028ecc l     O .rwdata	00000001 _ZL9SPI_MODE0
04028ecd l     O .rwdata	00000001 _ZL9SPI_MODE1
04028ece l     O .rwdata	00000001 _ZL9SPI_MODE2
04028ecf l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
04028ed0 l     O .rwdata	00000001 _ZL9SPI_MODE0
04028ed1 l     O .rwdata	00000001 _ZL9SPI_MODE1
04028ed2 l     O .rwdata	00000001 _ZL9SPI_MODE2
04028ed3 l     O .rwdata	00000001 _ZL9SPI_MODE3
0402d7a0 l     O .bss	00000001 _ZL9usb_error
0402d7a1 l     O .bss	00000001 _ZL14usb_task_state
0402d7a4 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
04028edc l     O .rwdata	00000001 _ZL9SPI_MODE0
04028edd l     O .rwdata	00000001 _ZL9SPI_MODE1
04028ede l     O .rwdata	00000001 _ZL9SPI_MODE2
04028edf l     O .rwdata	00000001 _ZL9SPI_MODE3
04028ee0 l     O .rwdata	00000006 _ZL9XBOX_LEDS
040204e6 l     O .rodata	00000024 _ZL12XBOX_BUTTONS
04004454 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 hidboot.cpp
04028f00 l     O .rwdata	00000001 _ZL9SPI_MODE0
04028f01 l     O .rwdata	00000001 _ZL9SPI_MODE1
04028f02 l     O .rwdata	00000001 _ZL9SPI_MODE2
04028f03 l     O .rwdata	00000001 _ZL9SPI_MODE3
04028f04 l     O .rwdata	00000002 _ZL9pstrSpace
04028f08 l     O .rwdata	00000003 _ZL8pstrCRLF
04028f0c l     O .rwdata	00000002 _ZL13pstrSingleTab
04028f10 l     O .rwdata	00000003 _ZL13pstrDoubleTab
04028f14 l     O .rwdata	00000004 _ZL13pstrTripleTab
04028f18 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
04020634 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
04020648 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
04020654 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
04020660 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
0402066c l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
04020678 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
04020688 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
04028f20 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
04028f28 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
04028f30 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
04028f38 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
04020694 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
040206a0 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
04028f3c l     O .rwdata	00000004 _ZL16pstrUsagePagePID
04028f40 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
040206ac l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
040206bc l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
04028f48 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
04028f50 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
040206cc l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
04028f58 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
040206dc l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
04028f60 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
040206f4 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
04028f64 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
04020700 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
0402070c l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
04028f6c l     O .rwdata	00000008 _ZL16pstrUsagePointer
04028f74 l     O .rwdata	00000006 _ZL14pstrUsageMouse
04020718 l     O .rodata	00000009 _ZL17pstrUsageJoystick
04020724 l     O .rodata	00000009 _ZL16pstrUsageGamePad
04028f7c l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
04028f84 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
04020730 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
04020740 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
04028f8c l     O .rwdata	00000002 _ZL10pstrUsageX
04028f90 l     O .rwdata	00000002 _ZL10pstrUsageY
04028f94 l     O .rwdata	00000002 _ZL10pstrUsageZ
04028f98 l     O .rwdata	00000003 _ZL11pstrUsageRx
04028f9c l     O .rwdata	00000003 _ZL11pstrUsageRy
04028fa0 l     O .rwdata	00000003 _ZL11pstrUsageRz
04028fa4 l     O .rwdata	00000007 _ZL15pstrUsageSlider
04028fac l     O .rwdata	00000005 _ZL13pstrUsageDial
04028fb4 l     O .rwdata	00000006 _ZL14pstrUsageWheel
04020754 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
04020760 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
0402076c l     O .rodata	0000000b _ZL18pstrUsageByteCount
04020778 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
04028fbc l     O .rwdata	00000006 _ZL14pstrUsageStart
04028fc4 l     O .rwdata	00000004 _ZL15pstrUsageSelect
04028fc8 l     O .rwdata	00000003 _ZL11pstrUsageVx
04028fcc l     O .rwdata	00000003 _ZL11pstrUsageVy
04028fd0 l     O .rwdata	00000003 _ZL11pstrUsageVz
04028fd4 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
04028fdc l     O .rwdata	00000005 _ZL13pstrUsageVbry
04028fe4 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
04028fec l     O .rwdata	00000004 _ZL12pstrUsageVno
04020788 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
04020798 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
040207a4 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
040207b0 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
040207c0 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
040207cc l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
040207d8 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
040207ec l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
040207fc l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
0402080c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
0402081c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
0402082c l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
0402083c l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
0402084c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
0402085c l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
04020868 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
04020878 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
0402088c l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
040208a0 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
040208ac l     O .rodata	0000000b _ZL17pstrUsageDPadDown
040208b8 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
040208c4 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
040208d0 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
040208dc l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
040208e8 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
040208f4 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
04020900 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
0402090c l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
04020918 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
04020924 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
04020934 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
04020940 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
04020950 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
04020960 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
04020970 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
04020980 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
04020990 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
040209a8 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
040209c0 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
040209d8 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
040209e8 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
040209f8 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
04020a08 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
04020a18 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
04020a28 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
04020a38 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
04020a48 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
04020a58 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
04020a68 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
04020a78 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
04020a90 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
04020aa0 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
04020ab4 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
04020ac4 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
04020ad0 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
04020adc l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
04020ae8 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
04028ff0 l     O .rwdata	00000008 _ZL16pstrUsageAileron
04020af4 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
04020b04 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
04020b18 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
04020b2c l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
04020b3c l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
04020b4c l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
04020b58 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
04020b6c l     O .rodata	00000009 _ZL17pstrUsageElevator
04020b78 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
04028ff8 l     O .rwdata	00000007 _ZL15pstrUsageRudder
04020b88 l     O .rodata	00000009 _ZL17pstrUsageThrottle
04020b94 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
04020ba0 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
04020bb0 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
04020bc0 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
04029000 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
04020bcc l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
04020bd8 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
04020be4 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
04029008 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
04029010 l     O .rwdata	00000006 _ZL14pstrUsageBrake
04029018 l     O .rwdata	00000007 _ZL15pstrUsageClutch
04029020 l     O .rwdata	00000008 _ZL16pstrUsageShifter
04020bf0 l     O .rodata	00000009 _ZL17pstrUsageSteering
04020bfc l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
04020c08 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
04020c14 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
04029028 l     O .rwdata	00000008 _ZL16pstrUsageBallast
04020c20 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
04020c30 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
04020c3c l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
04020c48 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
04029030 l     O .rwdata	00000005 _ZL13pstrUsageBelt
04020c54 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
04029038 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
04029040 l     O .rwdata	00000006 _ZL14pstrUsageGlove
04020c60 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
04020c6c l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
04020c78 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
04020c84 l     O .rodata	0000000b _ZL19pstrUsageOculometer
04029048 l     O .rwdata	00000005 _ZL13pstrUsageVest
04020c90 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
04020c9c l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
04020ca8 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
04020cb8 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
04020cc8 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
04020cd4 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
04020ce0 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
04029050 l     O .rwdata	00000004 _ZL12pstrUsageOar
04029054 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0402905c l     O .rwdata	00000005 _ZL13pstrUsageRate
04020cec l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
04020cf8 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
04020d08 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
04020d18 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
04020d28 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
04020d34 l     O .rodata	0000000b _ZL18pstrUsageStickType
04020d40 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
04029064 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0402906c l     O .rwdata	00000007 _ZL14pstrUsage1Iron
04029074 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0402907c l     O .rwdata	00000007 _ZL14pstrUsage3Iron
04029084 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0402908c l     O .rwdata	00000007 _ZL14pstrUsage5Iron
04029094 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0402909c l     O .rwdata	00000007 _ZL14pstrUsage7Iron
040290a4 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
040290ac l     O .rwdata	00000007 _ZL14pstrUsage9Iron
040290b4 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
040290bc l     O .rwdata	00000008 _ZL15pstrUsage11Iron
04020d4c l     O .rodata	0000000b _ZL18pstrUsageSandWedge
04020d58 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
04020d64 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
040290c4 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
040290cc l     O .rwdata	00000007 _ZL14pstrUsage3Wood
040290d4 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
040290dc l     O .rwdata	00000007 _ZL14pstrUsage7Wood
040290e4 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
04020d70 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
04020d80 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
040290ec l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
040290f4 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
04020d8c l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
04020d9c l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
04020dac l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
04020dbc l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
04020dcc l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
04020ddc l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
04020dec l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
04020dfc l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
04020e0c l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
040290f8 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
04020e1c l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
04029100 l     O .rwdata	00000005 _ZL13pstrUsageBump
04020e2c l     O .rodata	00000009 _ZL16pstrUsageNewGame
04020e38 l     O .rodata	0000000b _ZL18pstrUsageShootBall
04029108 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
04020e44 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
04020e50 l     O .rodata	00000009 _ZL16pstrUsageGunClip
04029110 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
04020e5c l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
04020e6c l     O .rodata	0000000a _ZL17pstrUsageGunBurst
04020e78 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
04020e84 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
04020e90 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
04020ea4 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
04020eb4 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
04020ec4 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
04020ed0 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
04020edc l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
04020ef4 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
04020f08 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
04020f20 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
04020f34 l     O .rodata	00000009 _ZL16pstrUsageNumLock
04020f40 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
04020f4c l     O .rodata	0000000c _ZL19pstrUsageScrollLock
04029118 l     O .rwdata	00000008 _ZL16pstrUsageCompose
04029120 l     O .rwdata	00000005 _ZL13pstrUsageKana
04029128 l     O .rwdata	00000004 _ZL14pstrUsagePower
0402912c l     O .rwdata	00000006 _ZL14pstrUsageShift
04029134 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
04029138 l     O .rwdata	00000005 _ZL13pstrUsageMute
04020f58 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
04020f64 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
04020f74 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
04029140 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
04020f84 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
04020f94 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
04029148 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
04029150 l     O .rwdata	00000007 _ZL15pstrUsageStereo
04020fa0 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
04020fb4 l     O .rodata	00000009 _ZL17pstrUsageSpinning
04029158 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0402915c l     O .rwdata	00000004 _ZL12pstrUsageCLV
04020fc0 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
04020fd4 l     O .rodata	00000009 _ZL16pstrUsageOffHook
04029160 l     O .rwdata	00000005 _ZL13pstrUsageRing
04020fe0 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
04020fec l     O .rodata	0000000a _ZL17pstrUsageDataMode
04029168 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
04029170 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
04029178 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
04029180 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
04020ff8 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
04029188 l     O .rwdata	00000005 _ZL13pstrUsageHold
04029190 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
04021004 l     O .rodata	00000009 _ZL17pstrUsageCoverage
04021010 l     O .rodata	0000000b _ZL18pstrUsageNightMode
0402101c l     O .rodata	0000000b _ZL18pstrUsageSendCalls
04021028 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
04029194 l     O .rwdata	00000005 _ZL19pstrUsageConference
04021034 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0402919c l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
040291a4 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
040291ac l     O .rwdata	00000008 _ZL15pstrUsageOnLine
04021040 l     O .rodata	00000009 _ZL16pstrUsageOffLine
040291b4 l     O .rwdata	00000005 _ZL13pstrUsageBusy
040291bc l     O .rwdata	00000006 _ZL14pstrUsageReady
0402104c l     O .rodata	0000000a _ZL17pstrUsagePaperOut
04021058 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
040291c4 l     O .rwdata	00000007 _ZL15pstrUsageRemote
040291cc l     O .rwdata	00000004 _ZL16pstrUsageForward
040291d0 l     O .rwdata	00000004 _ZL16pstrUsageReverse
040291d4 l     O .rwdata	00000005 _ZL13pstrUsageStop
040291dc l     O .rwdata	00000007 _ZL15pstrUsageRewind
04021064 l     O .rodata	00000009 _ZL20pstrUsageFastForward
040291e4 l     O .rwdata	00000005 _ZL13pstrUsagePlay
040291ec l     O .rwdata	00000006 _ZL14pstrUsagePause
040291f4 l     O .rwdata	00000004 _ZL15pstrUsageRecord
040291f8 l     O .rwdata	00000006 _ZL14pstrUsageError
04021070 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
04021080 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
04021094 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
04029200 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
040210ac l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
040210b8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
040210c8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
04029208 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
040210d8 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
040210e8 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
040210fc l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
04021110 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
04021124 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
04021138 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
04029210 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
04021148 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
04021154 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
04029218 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
04021160 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
0402116c l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
04029220 l     O .rwdata	00000006 _ZL14pstrUsagePhone
0402117c l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
04021188 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
04029228 l     O .rwdata	00000008 _ZL16pstrUsageHandset
04029230 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
04021194 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
040211a0 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
04029238 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
04029240 l     O .rwdata	00000006 _ZL14pstrUsageFlash
04029248 l     O .rwdata	00000008 _ZL16pstrUsageFeature
04029250 l     O .rwdata	00000007 _ZL15pstrUsageRedial
040211ac l     O .rodata	00000009 _ZL17pstrUsageTransfer
04029258 l     O .rwdata	00000005 _ZL13pstrUsageDrop
04029260 l     O .rwdata	00000005 _ZL13pstrUsagePark
040211b8 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
040211c4 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
04029268 l     O .rwdata	00000005 _ZL13pstrUsageLine
040211d0 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
040211dc l     O .rodata	0000000a _ZL19pstrUsageRingEnable
040211e8 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
040211f4 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
04021200 l     O .rodata	0000000a _ZL17pstrUsageCallerID
04029270 l     O .rwdata	00000005 _ZL13pstrUsageSend
0402120c l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
04021218 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
04021224 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
04021230 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
0402123c l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
04021248 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
04029278 l     O .rwdata	00000004 _ZL16pstrUsageMessage
04021258 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
04021268 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
0402127c l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
04021290 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
040212a4 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
040212b8 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
040212c8 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
040212d8 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
040212ec l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
040212fc l     O .rodata	0000000d _ZL20pstrUsageReorderTone
0402130c l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
0402131c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
04021328 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
04021334 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
04021340 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0402927c l     O .rwdata	00000007 _ZL15pstrUsageRinger
04029284 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
04029288 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0402928c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
04029290 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
04029294 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
04029298 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0402929c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
040292a0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
040292a4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
040292a8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
040292ac l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
040292b0 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
040292b4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
040292b8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
040292bc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
040292c0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
04021354 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
04021364 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
04021370 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
0402137c l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
040292c4 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
040292c8 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
040292d0 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
040292d8 l     O .rwdata	00000006 _ZL14pstrUsageReset
040292e0 l     O .rwdata	00000006 _ZL14pstrUsageSleep
04021388 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
04021394 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
040292e8 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
040213a0 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
040292f0 l     O .rwdata	00000005 _ZL13pstrUsageMenu
040213ac l     O .rodata	0000000a _ZL17pstrUsageMenuPick
040292f8 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
040213b8 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
040213c4 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
040213d0 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
040213dc l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
040213e8 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
040213f8 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
04021408 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
04021414 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
04021420 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
04029300 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
04021430 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
04021440 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
04029308 l     O .rwdata	00000006 _ZL14pstrUsageStill
04029310 l     O .rwdata	00000004 _ZL18pstrUsageSelection
0402144c l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
04021458 l     O .rodata	0000000a _ZL17pstrUsageModeStep
04021464 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
04021470 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
04021480 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
04029314 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0402931c l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
0402148c l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
0402149c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
040214a8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
040214b4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
040214c0 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
040214cc l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
040214d8 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
040214e4 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
040214f4 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
04021500 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
0402150c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
04021518 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
04029324 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0402932c l     O .rwdata	00000005 _ZL13pstrUsageHelp
04021528 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
04021538 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
04021544 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
04021550 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
04021560 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
04021570 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
04029334 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0402933c l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
04021580 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
04029344 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0402934c l     O .rwdata	00000005 _ZL13pstrUsageOnce
04029354 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0402935c l     O .rwdata	00000007 _ZL15pstrUsageWeekly
04029364 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
0402158c l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
04021598 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0402936c l     O .rwdata	00000006 _ZL14pstrUsageEject
04029374 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
040215a4 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
040215b0 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
040215bc l     O .rodata	00000009 _ZL17pstrUsageTracking
040215c8 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
040215d4 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0402937c l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
040215e0 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
04029384 l     O .rwdata	00000005 _ZL13pstrUsageMark
040215ec l     O .rodata	00000009 _ZL18pstrUsageClearMark
040215f8 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
04021604 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
04021610 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
04021620 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
04021634 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
04021644 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
04021654 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
04021660 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
0402166c l     O .rodata	0000000b _ZL18pstrUsageStopEject
04021678 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
04021684 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0402938c l     O .rwdata	00000004 _ZL15pstrUsageVolume
04029390 l     O .rwdata	00000008 _ZL16pstrUsageBalance
04029398 l     O .rwdata	00000005 _ZL13pstrUsageBass
040293a0 l     O .rwdata	00000007 _ZL15pstrUsageTreble
04021690 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
0402169c l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
040293a8 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
040293b0 l     O .rwdata	00000004 _ZL12pstrUsageMPX
040293b4 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
040293bc l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
040293c4 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
040216a8 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
040216b4 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
040216c0 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
040216cc l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
040293cc l     O .rwdata	00000005 _ZL13pstrUsageSlow
040216d8 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
040216e4 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
040216f0 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
040216fc l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
0402170c l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
0402171c l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
04021728 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
04021734 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
04021740 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
040293d4 l     O .rwdata	00000005 _ZL18pstrUsageProximity
040293dc l     O .rwdata	00000007 _ZL15pstrUsageMotion
0402174c l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
04021758 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
040293e4 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
04021764 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
04021774 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
04021784 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
04021790 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
0402179c l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
040217a8 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
040293ec l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
040293f4 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
040217b4 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
040217c0 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
040217cc l     O .rodata	00000009 _ZL21pstrUsageChannelFront
040217d8 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
040293fc l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
040217e8 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
040217f4 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
04029404 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0402940c l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
04029414 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
04021804 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
04021810 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0402181c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
04021828 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
04021834 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
04021844 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
04021858 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
04021864 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
04021878 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
04021888 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
04021894 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
040218a4 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
040218b4 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
040218c4 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
040218d0 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
040218e0 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
040218ec l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
040218fc l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0402190c l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0402191c l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0402192c l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
04021940 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0402941c l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
04021950 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
04021964 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
04021978 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
04021988 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
04021998 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
040219a8 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
040219b4 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
040219c0 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
040219cc l     O .rodata	00000009 _ZL16pstrUsageALLogon
040219d8 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
040219e4 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
040219f4 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
04021a0c l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
04021a18 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
04021a24 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
04021a30 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
04021a3c l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
04021a48 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
04021a54 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
04021a68 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
04029424 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
04021a74 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0402942c l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
04021a80 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
04021a8c l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
04021a9c l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
04021aa8 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
04021ab8 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
04021ac8 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
04021ad8 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
04021ae4 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
04021af0 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
04021afc l     O .rodata	00000009 _ZL16pstrUsageALClock
04021b08 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
04021b18 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
04021b24 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
04021b30 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
04021b3c l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
04021b48 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
04021b5c l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
04021b6c l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
04021b78 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
04021b8c l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
04021b98 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
04021ba8 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
04021bbc l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
04021bd0 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
04021be4 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
04021bf4 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
04021c0c l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
04021c20 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
04021c30 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
04021c40 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
04029434 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0402943c l     O .rwdata	00000008 _ZL15pstrUsageACOpen
04021c54 l     O .rodata	00000009 _ZL16pstrUsageACClose
04029444 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0402944c l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
04029454 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0402945c l     O .rwdata	00000008 _ZL15pstrUsageACSave
04021c60 l     O .rodata	00000009 _ZL16pstrUsageACPrint
04029464 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0402946c l     O .rwdata	00000008 _ZL15pstrUsageACUndo
04029474 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0402947c l     O .rwdata	00000007 _ZL14pstrUsageACCut
04021c6c l     O .rodata	00000009 _ZL16pstrUsageACPaste
04021c78 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
04029484 l     O .rwdata	00000008 _ZL15pstrUsageACFind
04021c84 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
04021c94 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0402948c l     O .rwdata	00000008 _ZL15pstrUsageACGoto
04029494 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0402949c l     O .rwdata	00000008 _ZL15pstrUsageACBack
040294a4 l     O .rwdata	00000007 _ZL18pstrUsageACForward
040294ac l     O .rwdata	00000008 _ZL15pstrUsageACStop
04021ca0 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
04021cac l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
04021cbc l     O .rodata	0000000d _ZL19pstrUsageACNextLink
04021ccc l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
040294b4 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
04021cd8 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
04021ce4 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
04021cf0 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
040294bc l     O .rwdata	00000008 _ZL15pstrUsageACZoom
04021cfc l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
04021d08 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
04021d18 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
04021d24 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
04021d34 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
04021d44 l     O .rodata	0000000a _ZL17pstrUsageACScroll
04021d50 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
04021d5c l     O .rodata	0000000d _ZL19pstrUsageACPanRight
040294c4 l     O .rwdata	00000007 _ZL14pstrUsageACPan
04021d6c l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
04021d78 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
04021d88 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
040294cc l     O .rwdata	00000008 _ZL17pstrUsageACFormat
040294d4 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
040294dc l     O .rwdata	00000008 _ZL15pstrUsageACBold
040294e4 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
04021d98 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
04021da4 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
040294ec l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
04021db0 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
04021dbc l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
04021dc8 l     O .rodata	0000000a _ZL17pstrUsageACRotate
04021dd4 l     O .rodata	0000000a _ZL17pstrUsageACResize
04021de0 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
04021dec l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
04021df8 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
04021e04 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
04021e10 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
04021e1c l     O .rodata	0000000b _ZL20pstrUsageACFontColor
04021e28 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
04021e34 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
04021e44 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
04021e54 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
04021e64 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
04021e74 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
04021e80 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
04021e90 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
04021e9c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
04021eac l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
04021ebc l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
04021ecc l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
04021ed8 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
04021ee4 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
04021ef0 l     O .rodata	0000000b _ZL18pstrUsageACPromote
04021efc l     O .rodata	0000000a _ZL17pstrUsageACDemote
040294f4 l     O .rwdata	00000007 _ZL14pstrUsageACYes
040294fc l     O .rwdata	00000006 _ZL13pstrUsageACNo
04021f08 l     O .rodata	0000000a _ZL17pstrUsageACCancel
04029504 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0402950c l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
04021f14 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
04029514 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
04021f20 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
04021f30 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
04021f3c l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
04021f4c l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
04021f5c l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
04021f6c l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0402951c l     O .rwdata	00000007 _ZL17pstrUsageACDelete
04029524 l     O .rwdata	00000008 _ZL15pstrUsageACLock
04021f78 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0402952c l     O .rwdata	00000008 _ZL18pstrUsageACProtect
04021f84 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
04021f90 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
04021fa0 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
04021fac l     O .rodata	0000000d _ZL22pstrUsageACViewComment
04021fbc l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
04021fc8 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
04021fd4 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
04021fe0 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
04021fec l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
04021ff8 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
04022004 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
04029534 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0402953c l     O .rwdata	00000008 _ZL15pstrUsageACSort
04022010 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
0402201c l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
04029544 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
0402202c l     O .rodata	0000000b _ZL19pstrUsageACSetClock
04022038 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
04022044 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
04022054 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
04022064 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
04022070 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
0402207c l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
04022088 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0402954c l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
04022094 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
040220a0 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
040220ac l     O .rodata	00000009 _ZL16pstrUsageACReply
040220b8 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
040220c8 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
04029554 l     O .rwdata	00000007 _ZL15pstrUsageACSend
040220d4 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0402955c l     O .rwdata	00000008 _ZL17pstrUsageACUpload
04029564 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
040220e0 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
040220ec l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
040220f8 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
04022104 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
04022110 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
0402211c l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
04022128 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
04022134 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
04022140 l     O .rodata	0000000a _ZL17pstrUsageACRename
0402214c l     O .rodata	00000009 _ZL16pstrUsageACMerge
04022158 l     O .rodata	00000009 _ZL16pstrUsageACSplit
04022164 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
04022170 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
0402217c l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0402956c l     O .rwdata	00000004 _ZL12pstrUsagePen
04022188 l     O .rodata	0000000a _ZL17pstrUsageLightPen
04022194 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
040221a0 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
040221ac l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
040221b8 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
04029570 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
040221c8 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
04029578 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
040221d4 l     O .rodata	00000009 _ZL17pstrUsageArmature
040221e0 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
040221f4 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
04029580 l     O .rwdata	00000007 _ZL15pstrUsageStylus
04029588 l     O .rwdata	00000005 _ZL13pstrUsagePuck
04029590 l     O .rwdata	00000007 _ZL15pstrUsageFinger
04022204 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
04022210 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
0402221c l     O .rodata	00000009 _ZL16pstrUsageInRange
04029598 l     O .rwdata	00000006 _ZL14pstrUsageTouch
040295a0 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
040295a8 l     O .rwdata	00000004 _ZL12pstrUsageTap
040295ac l     O .rwdata	00000005 _ZL16pstrUsageQuality
04022228 l     O .rodata	0000000b _ZL18pstrUsageDataValid
04022234 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
04022244 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
04022254 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
040295b4 l     O .rwdata	00000007 _ZL15pstrUsageInvert
040295bc l     O .rwdata	00000007 _ZL14pstrUsageXTilt
040295c4 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
040295cc l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
04022264 l     O .rodata	00000009 _ZL17pstrUsageAltitude
040295d4 l     O .rwdata	00000006 _ZL14pstrUsageTwist
040295dc l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
04022270 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
040295e4 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
040295ec l     O .rwdata	00000007 _ZL15pstrUsageEraser
0402227c l     O .rodata	00000009 _ZL19pstrUsageTabletPick
04022288 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
04022298 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
040222a4 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
040222b4 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
040222c0 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
040222d0 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
040222dc l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
040222ec l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
040222f8 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
04022308 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
04022318 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
04022324 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
04022330 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
0402233c l     O .rodata	0000000a _ZL20pstrUsageDisplayData
04022348 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
04022354 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
04022360 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0402236c l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0402237c l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0402238c l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
040295f4 l     O .rwdata	00000004 _ZL12pstrUsageRow
040295f8 l     O .rwdata	00000004 _ZL15pstrUsageColumn
040295fc l     O .rwdata	00000005 _ZL13pstrUsageRows
04029604 l     O .rwdata	00000005 _ZL16pstrUsageColumns
04022398 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
040223a4 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
040223b0 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
040223bc l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0402960c l     O .rwdata	00000008 _ZL19pstrUsageFontReport
040223c8 l     O .rodata	00000009 _ZL17pstrUsageFontData
040223d4 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
040223e0 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
040223ec l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
040223fc l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0402240c l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0402241c l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
04022428 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
04022434 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
04022440 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0402244c l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
04022458 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
04022464 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
04022470 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0402247c l     O .rodata	0000000a _ZL22pstrUsageAttributeData
04022488 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
04022498 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
040224a8 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
040224b8 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
040224c4 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
040224d0 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
040224e0 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
04029614 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
040224ec l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
040224fc l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0402250c l     O .rodata	00000009 _ZL20pstrUsagePaletteData
04022518 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
04022524 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
04022534 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
04022544 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
04022554 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
04022564 l     O .rodata	0000000a _ZL17pstrUsageBlitData
04022570 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0402257c l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
04022588 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
04022598 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
040225a8 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
040225b8 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
040225c8 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0402961c l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
04029624 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
040225d8 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0402962c l     O .rwdata	00000007 _ZL15pstrUsageUpdate
04029634 l     O .rwdata	00000005 _ZL13pstrUsageNext
0402963c l     O .rwdata	00000005 _ZL13pstrUsageSave
04029644 l     O .rwdata	00000006 _ZL14pstrUsagePrint
040225e4 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0402964c l     O .rwdata	00000005 _ZL13pstrUsageCine
040225f0 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
04029654 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0402965c l     O .rwdata	00000006 _ZL14pstrUsageDepth
040225fc l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0402260c l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0402261c l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0402262c l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
04022638 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
04022644 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
04022658 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0402266c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
04022680 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
04022694 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
040226a4 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
040226b4 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
040226c0 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
040226cc l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
040226dc l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
04029670 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029671 l     O .rwdata	00000001 _ZL9SPI_MODE1
04029672 l     O .rwdata	00000001 _ZL9SPI_MODE2
04029673 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
04029678 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029679 l     O .rwdata	00000001 _ZL9SPI_MODE1
0402967a l     O .rwdata	00000001 _ZL9SPI_MODE2
0402967b l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 usbh_midi.cpp
0402967c l     O .rwdata	00000001 _ZL9SPI_MODE0
0402967d l     O .rwdata	00000001 _ZL9SPI_MODE1
0402967e l     O .rwdata	00000001 _ZL9SPI_MODE2
0402967f l     O .rwdata	00000001 _ZL9SPI_MODE3
040227b6 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
040227c6 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
04008a58 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
04029688 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029689 l     O .rwdata	00000001 _ZL9SPI_MODE1
0402968a l     O .rwdata	00000001 _ZL9SPI_MODE2
0402968b l     O .rwdata	00000001 _ZL9SPI_MODE3
0402968c l     O .rwdata	00000002 _ZL9pstrSpace
04029690 l     O .rwdata	00000003 _ZL8pstrCRLF
04029694 l     O .rwdata	00000002 _ZL13pstrSingleTab
04029698 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0402969c l     O .rwdata	00000004 _ZL13pstrTripleTab
040296a0 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
04022890 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
040228a4 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
040228b0 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
040228bc l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
040228c8 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
040228d4 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
040228e4 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
040296a8 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
040296b0 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
040296b8 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
040296c0 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
040228f0 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
040228fc l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
040296c4 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
040296c8 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
04022908 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
04022918 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
040296d0 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
040296d8 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
04022928 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
040296e0 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
04022938 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
040296e8 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
04022950 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
040296ec l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
0402295c l     O .rodata	00000009 _ZL21pstrUsagePageReserved
04022968 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
040296f4 l     O .rwdata	00000008 _ZL16pstrUsagePointer
040296fc l     O .rwdata	00000006 _ZL14pstrUsageMouse
04022974 l     O .rodata	00000009 _ZL17pstrUsageJoystick
04022980 l     O .rodata	00000009 _ZL16pstrUsageGamePad
04029704 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0402970c l     O .rwdata	00000007 _ZL15pstrUsageKeypad
0402298c l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
0402299c l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
04029714 l     O .rwdata	00000002 _ZL10pstrUsageX
04029718 l     O .rwdata	00000002 _ZL10pstrUsageY
0402971c l     O .rwdata	00000002 _ZL10pstrUsageZ
04029720 l     O .rwdata	00000003 _ZL11pstrUsageRx
04029724 l     O .rwdata	00000003 _ZL11pstrUsageRy
04029728 l     O .rwdata	00000003 _ZL11pstrUsageRz
0402972c l     O .rwdata	00000007 _ZL15pstrUsageSlider
04029734 l     O .rwdata	00000005 _ZL13pstrUsageDial
0402973c l     O .rwdata	00000006 _ZL14pstrUsageWheel
040229b0 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
040229bc l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
040229c8 l     O .rodata	0000000b _ZL18pstrUsageByteCount
040229d4 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
04029744 l     O .rwdata	00000006 _ZL14pstrUsageStart
0402974c l     O .rwdata	00000004 _ZL15pstrUsageSelect
04029750 l     O .rwdata	00000003 _ZL11pstrUsageVx
04029754 l     O .rwdata	00000003 _ZL11pstrUsageVy
04029758 l     O .rwdata	00000003 _ZL11pstrUsageVz
0402975c l     O .rwdata	00000005 _ZL13pstrUsageVbrx
04029764 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0402976c l     O .rwdata	00000005 _ZL13pstrUsageVbrz
04029774 l     O .rwdata	00000004 _ZL12pstrUsageVno
040229e4 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
040229f4 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
04022a00 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
04022a0c l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
04022a1c l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
04022a28 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
04022a34 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
04022a48 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
04022a58 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
04022a68 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
04022a78 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
04022a88 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
04022a98 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
04022aa8 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
04022ab8 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
04022ac4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
04022ad4 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
04022ae8 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
04022afc l     O .rodata	00000009 _ZL15pstrUsageDPadUp
04022b08 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
04022b14 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
04022b20 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
04022b2c l     O .rodata	00000009 _ZL19pstrUsageSystemDock
04022b38 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
04022b44 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
04022b50 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
04022b5c l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
04022b68 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
04022b74 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
04022b80 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
04022b90 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
04022b9c l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
04022bac l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
04022bbc l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
04022bcc l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
04022bdc l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
04022bec l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
04022c04 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
04022c1c l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
04022c34 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
04022c44 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
04022c54 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
04022c64 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
04022c74 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
04022c84 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
04022c94 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
04022ca4 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
04022cb4 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
04022cc4 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
04022cd4 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
04022cec l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
04022cfc l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
04022d10 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
04022d20 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
04022d2c l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
04022d38 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
04022d44 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
04029778 l     O .rwdata	00000008 _ZL16pstrUsageAileron
04022d50 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
04022d60 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
04022d74 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
04022d88 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
04022d98 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
04022da8 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
04022db4 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
04022dc8 l     O .rodata	00000009 _ZL17pstrUsageElevator
04022dd4 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
04029780 l     O .rwdata	00000007 _ZL15pstrUsageRudder
04022de4 l     O .rodata	00000009 _ZL17pstrUsageThrottle
04022df0 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
04022dfc l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
04022e0c l     O .rodata	0000000d _ZL20pstrUsageLandingGear
04022e1c l     O .rodata	0000000a _ZL17pstrUsageToeBrake
04029788 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
04022e28 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
04022e34 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
04022e40 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
04029790 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
04029798 l     O .rwdata	00000006 _ZL14pstrUsageBrake
040297a0 l     O .rwdata	00000007 _ZL15pstrUsageClutch
040297a8 l     O .rwdata	00000008 _ZL16pstrUsageShifter
04022e4c l     O .rodata	00000009 _ZL17pstrUsageSteering
04022e58 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
04022e64 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
04022e70 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
040297b0 l     O .rwdata	00000008 _ZL16pstrUsageBallast
04022e7c l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
04022e8c l     O .rodata	0000000c _ZL19pstrUsageHandleBars
04022e98 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
04022ea4 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
040297b8 l     O .rwdata	00000005 _ZL13pstrUsageBelt
04022eb0 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
040297c0 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
040297c8 l     O .rwdata	00000006 _ZL14pstrUsageGlove
04022ebc l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
04022ec8 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
04022ed4 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
04022ee0 l     O .rodata	0000000b _ZL19pstrUsageOculometer
040297d0 l     O .rwdata	00000005 _ZL13pstrUsageVest
04022eec l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
04022ef8 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
04022f04 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
04022f14 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
04022f24 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
04022f30 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
04022f3c l     O .rodata	0000000a _ZL18pstrUsageTreadmill
040297d8 l     O .rwdata	00000004 _ZL12pstrUsageOar
040297dc l     O .rwdata	00000006 _ZL14pstrUsageSlope
040297e4 l     O .rwdata	00000005 _ZL13pstrUsageRate
04022f48 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
04022f54 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
04022f64 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
04022f74 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
04022f84 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
04022f90 l     O .rodata	0000000b _ZL18pstrUsageStickType
04022f9c l     O .rodata	0000000b _ZL20pstrUsageStickHeight
040297ec l     O .rwdata	00000007 _ZL15pstrUsagePutter
040297f4 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
040297fc l     O .rwdata	00000007 _ZL14pstrUsage2Iron
04029804 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0402980c l     O .rwdata	00000007 _ZL14pstrUsage4Iron
04029814 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0402981c l     O .rwdata	00000007 _ZL14pstrUsage6Iron
04029824 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0402982c l     O .rwdata	00000007 _ZL14pstrUsage8Iron
04029834 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0402983c l     O .rwdata	00000008 _ZL15pstrUsage10Iron
04029844 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
04022fa8 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
04022fb4 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
04022fc0 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0402984c l     O .rwdata	00000007 _ZL14pstrUsage1Wood
04029854 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0402985c l     O .rwdata	00000007 _ZL14pstrUsage5Wood
04029864 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0402986c l     O .rwdata	00000007 _ZL14pstrUsage9Wood
04022fcc l     O .rodata	0000000d _ZL25pstrUsage3DGameController
04022fdc l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
04029874 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0402987c l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
04022fe8 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
04022ff8 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
04023008 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
04023018 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
04023028 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
04023038 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
04023048 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
04023058 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
04023068 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
04029880 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
04023078 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
04029888 l     O .rwdata	00000005 _ZL13pstrUsageBump
04023088 l     O .rodata	00000009 _ZL16pstrUsageNewGame
04023094 l     O .rodata	0000000b _ZL18pstrUsageShootBall
04029890 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
040230a0 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
040230ac l     O .rodata	00000009 _ZL16pstrUsageGunClip
04029898 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
040230b8 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
040230c8 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
040230d4 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
040230e0 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
040230ec l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
04023100 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
04023110 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
04023120 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
0402312c l     O .rodata	0000000c _ZL19pstrUsageWirelessID
04023138 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
04023150 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
04023164 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
0402317c l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
04023190 l     O .rodata	00000009 _ZL16pstrUsageNumLock
0402319c l     O .rodata	0000000a _ZL17pstrUsageCapsLock
040231a8 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
040298a0 l     O .rwdata	00000008 _ZL16pstrUsageCompose
040298a8 l     O .rwdata	00000005 _ZL13pstrUsageKana
040298b0 l     O .rwdata	00000004 _ZL14pstrUsagePower
040298b4 l     O .rwdata	00000006 _ZL14pstrUsageShift
040298bc l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
040298c0 l     O .rwdata	00000005 _ZL13pstrUsageMute
040231b4 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
040231c0 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
040231d0 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
040298c8 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
040231e0 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
040231f0 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
040298d0 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
040298d8 l     O .rwdata	00000007 _ZL15pstrUsageStereo
040231fc l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
04023210 l     O .rodata	00000009 _ZL17pstrUsageSpinning
040298e0 l     O .rwdata	00000004 _ZL12pstrUsageCAV
040298e4 l     O .rwdata	00000004 _ZL12pstrUsageCLV
0402321c l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
04023230 l     O .rodata	00000009 _ZL16pstrUsageOffHook
040298e8 l     O .rwdata	00000005 _ZL13pstrUsageRing
0402323c l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
04023248 l     O .rodata	0000000a _ZL17pstrUsageDataMode
040298f0 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
040298f8 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
04029900 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
04029908 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
04023254 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
04029910 l     O .rwdata	00000005 _ZL13pstrUsageHold
04029918 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
04023260 l     O .rodata	00000009 _ZL17pstrUsageCoverage
0402326c l     O .rodata	0000000b _ZL18pstrUsageNightMode
04023278 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
04023284 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0402991c l     O .rwdata	00000005 _ZL19pstrUsageConference
04023290 l     O .rodata	00000009 _ZL16pstrUsageStandBy
04029924 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0402992c l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
04029934 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
0402329c l     O .rodata	00000009 _ZL16pstrUsageOffLine
0402993c l     O .rwdata	00000005 _ZL13pstrUsageBusy
04029944 l     O .rwdata	00000006 _ZL14pstrUsageReady
040232a8 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
040232b4 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0402994c l     O .rwdata	00000007 _ZL15pstrUsageRemote
04029954 l     O .rwdata	00000004 _ZL16pstrUsageForward
04029958 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0402995c l     O .rwdata	00000005 _ZL13pstrUsageStop
04029964 l     O .rwdata	00000007 _ZL15pstrUsageRewind
040232c0 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0402996c l     O .rwdata	00000005 _ZL13pstrUsagePlay
04029974 l     O .rwdata	00000006 _ZL14pstrUsagePause
0402997c l     O .rwdata	00000004 _ZL15pstrUsageRecord
04029980 l     O .rwdata	00000006 _ZL14pstrUsageError
040232cc l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
040232dc l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
040232f0 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
04029988 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
04023308 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
04023314 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
04023324 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
04029990 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
04023334 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
04023344 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
04023358 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
0402336c l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
04023380 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
04023394 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
04029998 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
040233a4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
040233b0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
040299a0 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
040233bc l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
040233c8 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
040299a8 l     O .rwdata	00000006 _ZL14pstrUsagePhone
040233d8 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
040233e4 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
040299b0 l     O .rwdata	00000008 _ZL16pstrUsageHandset
040299b8 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
040233f0 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
040233fc l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
040299c0 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
040299c8 l     O .rwdata	00000006 _ZL14pstrUsageFlash
040299d0 l     O .rwdata	00000008 _ZL16pstrUsageFeature
040299d8 l     O .rwdata	00000007 _ZL15pstrUsageRedial
04023408 l     O .rodata	00000009 _ZL17pstrUsageTransfer
040299e0 l     O .rwdata	00000005 _ZL13pstrUsageDrop
040299e8 l     O .rwdata	00000005 _ZL13pstrUsagePark
04023414 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
04023420 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
040299f0 l     O .rwdata	00000005 _ZL13pstrUsageLine
0402342c l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
04023438 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
04023444 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
04023450 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
0402345c l     O .rodata	0000000a _ZL17pstrUsageCallerID
040299f8 l     O .rwdata	00000005 _ZL13pstrUsageSend
04023468 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
04023474 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
04023480 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
0402348c l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
04023498 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
040234a4 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
04029a00 l     O .rwdata	00000004 _ZL16pstrUsageMessage
040234b4 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
040234c4 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
040234d8 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
040234ec l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
04023500 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
04023514 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
04023524 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
04023534 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
04023548 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
04023558 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
04023568 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
04023578 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
04023584 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
04023590 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
0402359c l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
04029a04 l     O .rwdata	00000007 _ZL15pstrUsageRinger
04029a0c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
04029a10 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
04029a14 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
04029a18 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
04029a1c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
04029a20 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
04029a24 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
04029a28 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
04029a2c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
04029a30 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
04029a34 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
04029a38 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
04029a3c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
04029a40 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
04029a44 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
04029a48 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
040235b0 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
040235c0 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
040235cc l     O .rodata	0000000a _ZL18pstrUsageHeadphone
040235d8 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
04029a4c l     O .rwdata	00000004 _ZL15pstrUsagePlus10
04029a50 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
04029a58 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
04029a60 l     O .rwdata	00000006 _ZL14pstrUsageReset
04029a68 l     O .rwdata	00000006 _ZL14pstrUsageSleep
040235e4 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
040235f0 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
04029a70 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
040235fc l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
04029a78 l     O .rwdata	00000005 _ZL13pstrUsageMenu
04023608 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
04029a80 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
04023614 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
04023620 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
0402362c l     O .rodata	0000000b _ZL18pstrUsageMenuRight
04023638 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
04023644 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
04023654 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
04023664 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
04023670 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
0402367c l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
04029a88 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
0402368c l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
0402369c l     O .rodata	00000009 _ZL17pstrUsageSnapshot
04029a90 l     O .rwdata	00000006 _ZL14pstrUsageStill
04029a98 l     O .rwdata	00000004 _ZL18pstrUsageSelection
040236a8 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
040236b4 l     O .rodata	0000000a _ZL17pstrUsageModeStep
040236c0 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
040236cc l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
040236dc l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
04029a9c l     O .rwdata	00000008 _ZL16pstrUsageChannel
04029aa4 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
040236e8 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
040236f8 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
04023704 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
04023710 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
0402371c l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
04023728 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
04023734 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
04023740 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
04023750 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
0402375c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
04023768 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
04023774 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
04029aac l     O .rwdata	00000005 _ZL13pstrUsageQuit
04029ab4 l     O .rwdata	00000005 _ZL13pstrUsageHelp
04023784 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
04023794 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
040237a0 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
040237ac l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
040237bc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
040237cc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
04029abc l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
04029ac4 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
040237dc l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
04029acc l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
04029ad4 l     O .rwdata	00000005 _ZL13pstrUsageOnce
04029adc l     O .rwdata	00000006 _ZL14pstrUsageDaily
04029ae4 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
04029aec l     O .rwdata	00000008 _ZL16pstrUsageMonthly
040237e8 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
040237f4 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
04029af4 l     O .rwdata	00000006 _ZL14pstrUsageEject
04029afc l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
04023800 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
0402380c l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
04023818 l     O .rodata	00000009 _ZL17pstrUsageTracking
04023824 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
04023830 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
04029b04 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
0402383c l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
04029b0c l     O .rwdata	00000005 _ZL13pstrUsageMark
04023848 l     O .rodata	00000009 _ZL18pstrUsageClearMark
04023854 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
04023860 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0402386c l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
0402387c l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
04023890 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
040238a0 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
040238b0 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
040238bc l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
040238c8 l     O .rodata	0000000b _ZL18pstrUsageStopEject
040238d4 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
040238e0 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
04029b14 l     O .rwdata	00000004 _ZL15pstrUsageVolume
04029b18 l     O .rwdata	00000008 _ZL16pstrUsageBalance
04029b20 l     O .rwdata	00000005 _ZL13pstrUsageBass
04029b28 l     O .rwdata	00000007 _ZL15pstrUsageTreble
040238ec l     O .rodata	0000000b _ZL18pstrUsageBassBoost
040238f8 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
04029b30 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
04029b38 l     O .rwdata	00000004 _ZL12pstrUsageMPX
04029b3c l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
04029b44 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
04029b4c l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
04023904 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
04023910 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
0402391c l     O .rodata	0000000a _ZL17pstrUsageLongPlay
04023928 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
04029b54 l     O .rwdata	00000005 _ZL13pstrUsageSlow
04023934 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
04023940 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
0402394c l     O .rodata	0000000b _ZL20pstrUsageLightEnable
04023958 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
04023968 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
04023978 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
04023984 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
04023990 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
0402399c l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
04029b5c l     O .rwdata	00000005 _ZL18pstrUsageProximity
04029b64 l     O .rwdata	00000007 _ZL15pstrUsageMotion
040239a8 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
040239b4 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
04029b6c l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
040239c0 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
040239d0 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
040239e0 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
040239ec l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
040239f8 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
04023a04 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
04029b74 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
04029b7c l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
04023a10 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
04023a1c l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
04023a28 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
04023a34 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
04029b84 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
04023a44 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
04023a50 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
04029b8c l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
04029b94 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
04029b9c l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
04023a60 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
04023a6c l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
04023a78 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
04023a84 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
04023a90 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
04023aa0 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
04023ab4 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
04023ac0 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
04023ad4 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
04023ae4 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
04023af0 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
04023b00 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
04023b10 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
04023b20 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
04023b2c l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
04023b3c l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
04023b48 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
04023b58 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
04023b68 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
04023b78 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
04023b88 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
04023b9c l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
04029ba4 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
04023bac l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
04023bc0 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
04023bd4 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
04023be4 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
04023bf4 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
04023c04 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
04023c10 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
04023c1c l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
04023c28 l     O .rodata	00000009 _ZL16pstrUsageALLogon
04023c34 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
04023c40 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
04023c50 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
04023c68 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
04023c74 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
04023c80 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
04023c8c l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
04023c98 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
04023ca4 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
04023cb0 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
04023cc4 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
04029bac l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
04023cd0 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
04029bb4 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
04023cdc l     O .rodata	0000000b _ZL18pstrUsageALDesktop
04023ce8 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
04023cf8 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
04023d04 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
04023d14 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
04023d24 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
04023d34 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
04023d40 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
04023d4c l     O .rodata	0000000a _ZL17pstrUsageALAlarms
04023d58 l     O .rodata	00000009 _ZL16pstrUsageALClock
04023d64 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
04023d74 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
04023d80 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
04023d8c l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
04023d98 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
04023da4 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
04023db8 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
04023dc8 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
04023dd4 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
04023de8 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
04023df4 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
04023e04 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
04023e18 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
04023e2c l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
04023e40 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
04023e50 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
04023e68 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
04023e7c l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
04023e8c l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
04023e9c l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
04029bbc l     O .rwdata	00000007 _ZL14pstrUsageACNew
04029bc4 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
04023eb0 l     O .rodata	00000009 _ZL16pstrUsageACClose
04029bcc l     O .rwdata	00000008 _ZL15pstrUsageACExit
04029bd4 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
04029bdc l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
04029be4 l     O .rwdata	00000008 _ZL15pstrUsageACSave
04023ebc l     O .rodata	00000009 _ZL16pstrUsageACPrint
04029bec l     O .rwdata	00000008 _ZL21pstrUsageACProperties
04029bf4 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
04029bfc l     O .rwdata	00000008 _ZL15pstrUsageACCopy
04029c04 l     O .rwdata	00000007 _ZL14pstrUsageACCut
04023ec8 l     O .rodata	00000009 _ZL16pstrUsageACPaste
04023ed4 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
04029c0c l     O .rwdata	00000008 _ZL15pstrUsageACFind
04023ee0 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
04023ef0 l     O .rodata	0000000a _ZL17pstrUsageACSearch
04029c14 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
04029c1c l     O .rwdata	00000008 _ZL15pstrUsageACHome
04029c24 l     O .rwdata	00000008 _ZL15pstrUsageACBack
04029c2c l     O .rwdata	00000007 _ZL18pstrUsageACForward
04029c34 l     O .rwdata	00000008 _ZL15pstrUsageACStop
04023efc l     O .rodata	0000000b _ZL18pstrUsageACRefresh
04023f08 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
04023f18 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
04023f28 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
04029c3c l     O .rwdata	00000008 _ZL18pstrUsageACHistory
04023f34 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
04023f40 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
04023f4c l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
04029c44 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
04023f58 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
04023f64 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
04023f74 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
04023f80 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
04023f90 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
04023fa0 l     O .rodata	0000000a _ZL17pstrUsageACScroll
04023fac l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
04023fb8 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
04029c4c l     O .rwdata	00000007 _ZL14pstrUsageACPan
04023fc8 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
04023fd4 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
04023fe4 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
04029c54 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
04029c5c l     O .rwdata	00000008 _ZL15pstrUsageACEdit
04029c64 l     O .rwdata	00000008 _ZL15pstrUsageACBold
04029c6c l     O .rwdata	00000008 _ZL18pstrUsageACItalics
04023ff4 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
04024000 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
04029c74 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
0402400c l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
04024018 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
04024024 l     O .rodata	0000000a _ZL17pstrUsageACRotate
04024030 l     O .rodata	0000000a _ZL17pstrUsageACResize
0402403c l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
04024048 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
04024054 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
04024060 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
0402406c l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
04024078 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
04024084 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
04024090 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
040240a0 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
040240b0 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
040240c0 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
040240d0 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
040240dc l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
040240ec l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
040240f8 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
04024108 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
04024118 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
04024128 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
04024134 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
04024140 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
0402414c l     O .rodata	0000000b _ZL18pstrUsageACPromote
04024158 l     O .rodata	0000000a _ZL17pstrUsageACDemote
04029c7c l     O .rwdata	00000007 _ZL14pstrUsageACYes
04029c84 l     O .rwdata	00000006 _ZL13pstrUsageACNo
04024164 l     O .rodata	0000000a _ZL17pstrUsageACCancel
04029c8c l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
04029c94 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
04024170 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
04029c9c l     O .rwdata	00000008 _ZL17pstrUsageACExpand
0402417c l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
0402418c l     O .rodata	0000000c _ZL19pstrUsageACCollapse
04024198 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
040241a8 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
040241b8 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
040241c8 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
04029ca4 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
04029cac l     O .rwdata	00000008 _ZL15pstrUsageACLock
040241d4 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
04029cb4 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
040241e0 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
040241ec l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
040241fc l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
04024208 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
04024218 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
04024224 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
04024230 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
0402423c l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
04024248 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
04024254 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
04024260 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
04029cbc l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
04029cc4 l     O .rwdata	00000008 _ZL15pstrUsageACSort
0402426c l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
04024278 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
04029ccc l     O .rwdata	00000008 _ZL17pstrUsageACFilter
04024288 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
04024294 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
040242a0 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
040242b0 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
040242c0 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
040242cc l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
040242d8 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
040242e4 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
04029cd4 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
040242f0 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
040242fc l     O .rodata	0000000a _ZL17pstrUsageACSendTo
04024308 l     O .rodata	00000009 _ZL16pstrUsageACReply
04024314 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
04024324 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
04029cdc l     O .rwdata	00000007 _ZL15pstrUsageACSend
04024330 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
04029ce4 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
04029cec l     O .rwdata	00000008 _ZL19pstrUsageACDownload
0402433c l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
04024348 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
04024354 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
04024360 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
0402436c l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
04024378 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
04024384 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
04024390 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
0402439c l     O .rodata	0000000a _ZL17pstrUsageACRename
040243a8 l     O .rodata	00000009 _ZL16pstrUsageACMerge
040243b4 l     O .rodata	00000009 _ZL16pstrUsageACSplit
040243c0 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
040243cc l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
040243d8 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
04029cf4 l     O .rwdata	00000004 _ZL12pstrUsagePen
040243e4 l     O .rodata	0000000a _ZL17pstrUsageLightPen
040243f0 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
040243fc l     O .rodata	0000000a _ZL17pstrUsageTouchPad
04024408 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
04024414 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
04029cf8 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
04024424 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
04029d00 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
04024430 l     O .rodata	00000009 _ZL17pstrUsageArmature
0402443c l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
04024450 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
04029d08 l     O .rwdata	00000007 _ZL15pstrUsageStylus
04029d10 l     O .rwdata	00000005 _ZL13pstrUsagePuck
04029d18 l     O .rwdata	00000007 _ZL15pstrUsageFinger
04024460 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0402446c l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
04024478 l     O .rodata	00000009 _ZL16pstrUsageInRange
04029d20 l     O .rwdata	00000006 _ZL14pstrUsageTouch
04029d28 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
04029d30 l     O .rwdata	00000004 _ZL12pstrUsageTap
04029d34 l     O .rwdata	00000005 _ZL16pstrUsageQuality
04024484 l     O .rodata	0000000b _ZL18pstrUsageDataValid
04024490 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
040244a0 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
040244b0 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
04029d3c l     O .rwdata	00000007 _ZL15pstrUsageInvert
04029d44 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
04029d4c l     O .rwdata	00000007 _ZL14pstrUsageYTilt
04029d54 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
040244c0 l     O .rodata	00000009 _ZL17pstrUsageAltitude
04029d5c l     O .rwdata	00000006 _ZL14pstrUsageTwist
04029d64 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
040244cc l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
04029d6c l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
04029d74 l     O .rwdata	00000007 _ZL15pstrUsageEraser
040244d8 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
040244e4 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
040244f4 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
04024500 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
04024510 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
0402451c l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
0402452c l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
04024538 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
04024548 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
04024554 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
04024564 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
04024574 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
04024580 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0402458c l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
04024598 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
040245a4 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
040245b0 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
040245bc l     O .rodata	0000000b _ZL20pstrUsageStatusReady
040245c8 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
040245d8 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
040245e8 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
04029d7c l     O .rwdata	00000004 _ZL12pstrUsageRow
04029d80 l     O .rwdata	00000004 _ZL15pstrUsageColumn
04029d84 l     O .rwdata	00000005 _ZL13pstrUsageRows
04029d8c l     O .rwdata	00000005 _ZL16pstrUsageColumns
040245f4 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
04024600 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
0402460c l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
04024618 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
04029d94 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
04024624 l     O .rodata	00000009 _ZL17pstrUsageFontData
04024630 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
0402463c l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
04024648 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
04024658 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
04024668 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
04024678 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
04024684 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
04024690 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0402469c l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
040246a8 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
040246b4 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
040246c0 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
040246cc l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
040246d8 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
040246e4 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
040246f4 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
04024704 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
04024714 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
04024720 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
0402472c l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
0402473c l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
04029d9c l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
04024748 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
04024758 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
04024768 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
04024774 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
04024780 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
04024790 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
040247a0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
040247b0 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
040247c0 l     O .rodata	0000000a _ZL17pstrUsageBlitData
040247cc l     O .rodata	00000009 _ZL19pstrUsageSoftButton
040247d8 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
040247e4 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
040247f4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
04024804 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
04024814 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
04024824 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
04029da4 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
04029dac l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
04024834 l     O .rodata	0000000b _ZL18pstrUsageClipStore
04029db4 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
04029dbc l     O .rwdata	00000005 _ZL13pstrUsageNext
04029dc4 l     O .rwdata	00000005 _ZL13pstrUsageSave
04029dcc l     O .rwdata	00000006 _ZL14pstrUsagePrint
04024840 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
04029dd4 l     O .rwdata	00000005 _ZL13pstrUsageCine
0402484c l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
04029ddc l     O .rwdata	00000006 _ZL14pstrUsageFocus
04029de4 l     O .rwdata	00000006 _ZL14pstrUsageDepth
04024858 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
04024868 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
04024878 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
04024888 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
04024894 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
040248a0 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
040248b4 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
040248c8 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
040248dc l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
040248f0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
04024900 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
04024910 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
0402491c l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
04024928 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
04024938 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
04029dea l     O .rwdata	00000001 _ZL9SPI_MODE0
04029deb l     O .rwdata	00000001 _ZL9SPI_MODE1
04029dec l     O .rwdata	00000001 _ZL9SPI_MODE2
04029ded l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
04029df0 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029df1 l     O .rwdata	00000001 _ZL9SPI_MODE1
04029df2 l     O .rwdata	00000001 _ZL9SPI_MODE2
04029df3 l     O .rwdata	00000001 _ZL9SPI_MODE3
04029df4 l     O .rwdata	00000002 _ZL9pstrSpace
04029df8 l     O .rwdata	00000003 _ZL8pstrCRLF
04029dfc l     O .rwdata	00000002 _ZL13pstrSingleTab
04029e00 l     O .rwdata	00000003 _ZL13pstrDoubleTab
04029e04 l     O .rwdata	00000004 _ZL13pstrTripleTab
04029e08 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
04024a18 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
04024a2c l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
04024a38 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
04024a44 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
04024a50 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
04024a5c l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
04024a6c l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
04029e10 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
04029e18 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
04029e20 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
04029e28 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
04024a78 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
04024a84 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
04029e2c l     O .rwdata	00000004 _ZL16pstrUsagePagePID
04029e30 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
04024a90 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
04024aa0 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
04029e38 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
04029e40 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
04024ab0 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
04029e48 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
04024ac0 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
04029e50 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
04024ad8 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
04029e54 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
04024ae4 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
04024af0 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
04029e5c l     O .rwdata	00000008 _ZL16pstrUsagePointer
04029e64 l     O .rwdata	00000006 _ZL14pstrUsageMouse
04024afc l     O .rodata	00000009 _ZL17pstrUsageJoystick
04024b08 l     O .rodata	00000009 _ZL16pstrUsageGamePad
04029e6c l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
04029e74 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
04024b14 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
04024b24 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
04029e7c l     O .rwdata	00000002 _ZL10pstrUsageX
04029e80 l     O .rwdata	00000002 _ZL10pstrUsageY
04029e84 l     O .rwdata	00000002 _ZL10pstrUsageZ
04029e88 l     O .rwdata	00000003 _ZL11pstrUsageRx
04029e8c l     O .rwdata	00000003 _ZL11pstrUsageRy
04029e90 l     O .rwdata	00000003 _ZL11pstrUsageRz
04029e94 l     O .rwdata	00000007 _ZL15pstrUsageSlider
04029e9c l     O .rwdata	00000005 _ZL13pstrUsageDial
04029ea4 l     O .rwdata	00000006 _ZL14pstrUsageWheel
04024b38 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
04024b44 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
04024b50 l     O .rodata	0000000b _ZL18pstrUsageByteCount
04024b5c l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
04029eac l     O .rwdata	00000006 _ZL14pstrUsageStart
04029eb4 l     O .rwdata	00000004 _ZL15pstrUsageSelect
04029eb8 l     O .rwdata	00000003 _ZL11pstrUsageVx
04029ebc l     O .rwdata	00000003 _ZL11pstrUsageVy
04029ec0 l     O .rwdata	00000003 _ZL11pstrUsageVz
04029ec4 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
04029ecc l     O .rwdata	00000005 _ZL13pstrUsageVbry
04029ed4 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
04029edc l     O .rwdata	00000004 _ZL12pstrUsageVno
04024b6c l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
04024b7c l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
04024b88 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
04024b94 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
04024ba4 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
04024bb0 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
04024bbc l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
04024bd0 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
04024be0 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
04024bf0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
04024c00 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
04024c10 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
04024c20 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
04024c30 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
04024c40 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
04024c4c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
04024c5c l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
04024c70 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
04024c84 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
04024c90 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
04024c9c l     O .rodata	0000000c _ZL18pstrUsageDPadRight
04024ca8 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
04024cb4 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
04024cc0 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
04024ccc l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
04024cd8 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
04024ce4 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
04024cf0 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
04024cfc l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
04024d08 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
04024d18 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
04024d24 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
04024d34 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
04024d44 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
04024d54 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
04024d64 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
04024d74 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
04024d8c l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
04024da4 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
04024dbc l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
04024dcc l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
04024ddc l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
04024dec l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
04024dfc l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
04024e0c l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
04024e1c l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
04024e2c l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
04024e3c l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
04024e4c l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
04024e5c l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
04024e74 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
04024e84 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
04024e98 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
04024ea8 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
04024eb4 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
04024ec0 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
04024ecc l     O .rodata	0000000b _ZL21pstrUsageTrackControl
04029ee0 l     O .rwdata	00000008 _ZL16pstrUsageAileron
04024ed8 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
04024ee8 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
04024efc l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
04024f10 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
04024f20 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
04024f30 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
04024f3c l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
04024f50 l     O .rodata	00000009 _ZL17pstrUsageElevator
04024f5c l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
04029ee8 l     O .rwdata	00000007 _ZL15pstrUsageRudder
04024f6c l     O .rodata	00000009 _ZL17pstrUsageThrottle
04024f78 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
04024f84 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
04024f94 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
04024fa4 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
04029ef0 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
04024fb0 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
04024fbc l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
04024fc8 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
04029ef8 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
04029f00 l     O .rwdata	00000006 _ZL14pstrUsageBrake
04029f08 l     O .rwdata	00000007 _ZL15pstrUsageClutch
04029f10 l     O .rwdata	00000008 _ZL16pstrUsageShifter
04024fd4 l     O .rodata	00000009 _ZL17pstrUsageSteering
04024fe0 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
04024fec l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
04024ff8 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
04029f18 l     O .rwdata	00000008 _ZL16pstrUsageBallast
04025004 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
04025014 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
04025020 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
0402502c l     O .rodata	0000000b _ZL18pstrUsageRearBrake
04029f20 l     O .rwdata	00000005 _ZL13pstrUsageBelt
04025038 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
04029f28 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
04029f30 l     O .rwdata	00000006 _ZL14pstrUsageGlove
04025044 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
04025050 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
0402505c l     O .rodata	0000000b _ZL20pstrUsageHandTracker
04025068 l     O .rodata	0000000b _ZL19pstrUsageOculometer
04029f38 l     O .rwdata	00000005 _ZL13pstrUsageVest
04025074 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
04025080 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
0402508c l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
0402509c l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
040250ac l     O .rodata	0000000a _ZL17pstrUsageGolfClub
040250b8 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
040250c4 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
04029f40 l     O .rwdata	00000004 _ZL12pstrUsageOar
04029f44 l     O .rwdata	00000006 _ZL14pstrUsageSlope
04029f4c l     O .rwdata	00000005 _ZL13pstrUsageRate
040250d0 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
040250dc l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
040250ec l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
040250fc l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
0402510c l     O .rodata	0000000c _ZL19pstrUsageStickTempo
04025118 l     O .rodata	0000000b _ZL18pstrUsageStickType
04025124 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
04029f54 l     O .rwdata	00000007 _ZL15pstrUsagePutter
04029f5c l     O .rwdata	00000007 _ZL14pstrUsage1Iron
04029f64 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
04029f6c l     O .rwdata	00000007 _ZL14pstrUsage3Iron
04029f74 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
04029f7c l     O .rwdata	00000007 _ZL14pstrUsage5Iron
04029f84 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
04029f8c l     O .rwdata	00000007 _ZL14pstrUsage7Iron
04029f94 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
04029f9c l     O .rwdata	00000007 _ZL14pstrUsage9Iron
04029fa4 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
04029fac l     O .rwdata	00000008 _ZL15pstrUsage11Iron
04025130 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
0402513c l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
04025148 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
04029fb4 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
04029fbc l     O .rwdata	00000007 _ZL14pstrUsage3Wood
04029fc4 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
04029fcc l     O .rwdata	00000007 _ZL14pstrUsage7Wood
04029fd4 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
04025154 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
04025164 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
04029fdc l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
04029fe4 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
04025170 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
04025180 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
04025190 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
040251a0 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
040251b0 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
040251c0 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
040251d0 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
040251e0 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
040251f0 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
04029fe8 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
04025200 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
04029ff0 l     O .rwdata	00000005 _ZL13pstrUsageBump
04025210 l     O .rodata	00000009 _ZL16pstrUsageNewGame
0402521c l     O .rodata	0000000b _ZL18pstrUsageShootBall
04029ff8 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
04025228 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
04025234 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0402a000 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
04025240 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
04025250 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
0402525c l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
04025268 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
04025274 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
04025288 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
04025298 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
040252a8 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
040252b4 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
040252c0 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
040252d8 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
040252ec l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
04025304 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
04025318 l     O .rodata	00000009 _ZL16pstrUsageNumLock
04025324 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
04025330 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0402a008 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0402a010 l     O .rwdata	00000005 _ZL13pstrUsageKana
0402a018 l     O .rwdata	00000004 _ZL14pstrUsagePower
0402a01c l     O .rwdata	00000006 _ZL14pstrUsageShift
0402a024 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0402a028 l     O .rwdata	00000005 _ZL13pstrUsageMute
0402533c l     O .rodata	0000000a _ZL19pstrUsageToneEnable
04025348 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
04025358 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0402a030 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
04025368 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
04025378 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0402a038 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0402a040 l     O .rwdata	00000007 _ZL15pstrUsageStereo
04025384 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
04025398 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0402a048 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0402a04c l     O .rwdata	00000004 _ZL12pstrUsageCLV
040253a4 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
040253b8 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0402a050 l     O .rwdata	00000005 _ZL13pstrUsageRing
040253c4 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
040253d0 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0402a058 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0402a060 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0402a068 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0402a070 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
040253dc l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0402a078 l     O .rwdata	00000005 _ZL13pstrUsageHold
0402a080 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
040253e8 l     O .rodata	00000009 _ZL17pstrUsageCoverage
040253f4 l     O .rodata	0000000b _ZL18pstrUsageNightMode
04025400 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
0402540c l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0402a084 l     O .rwdata	00000005 _ZL19pstrUsageConference
04025418 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0402a08c l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0402a094 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0402a09c l     O .rwdata	00000008 _ZL15pstrUsageOnLine
04025424 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0402a0a4 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0402a0ac l     O .rwdata	00000006 _ZL14pstrUsageReady
04025430 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
0402543c l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0402a0b4 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0402a0bc l     O .rwdata	00000004 _ZL16pstrUsageForward
0402a0c0 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0402a0c4 l     O .rwdata	00000005 _ZL13pstrUsageStop
0402a0cc l     O .rwdata	00000007 _ZL15pstrUsageRewind
04025448 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0402a0d4 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0402a0dc l     O .rwdata	00000006 _ZL14pstrUsagePause
0402a0e4 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0402a0e8 l     O .rwdata	00000006 _ZL14pstrUsageError
04025454 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
04025464 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
04025478 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0402a0f0 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
04025490 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
0402549c l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
040254ac l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0402a0f8 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
040254bc l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
040254cc l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
040254e0 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
040254f4 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
04025508 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
0402551c l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0402a100 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
0402552c l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
04025538 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0402a108 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
04025544 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
04025550 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0402a110 l     O .rwdata	00000006 _ZL14pstrUsagePhone
04025560 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
0402556c l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0402a118 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0402a120 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
04025578 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
04025584 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0402a128 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0402a130 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0402a138 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0402a140 l     O .rwdata	00000007 _ZL15pstrUsageRedial
04025590 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0402a148 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0402a150 l     O .rwdata	00000005 _ZL13pstrUsagePark
0402559c l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
040255a8 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0402a158 l     O .rwdata	00000005 _ZL13pstrUsageLine
040255b4 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
040255c0 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
040255cc l     O .rodata	00000009 _ZL19pstrUsageRingSelect
040255d8 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
040255e4 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0402a160 l     O .rwdata	00000005 _ZL13pstrUsageSend
040255f0 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
040255fc l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
04025608 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
04025614 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
04025620 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
0402562c l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0402a168 l     O .rwdata	00000004 _ZL16pstrUsageMessage
0402563c l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
0402564c l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
04025660 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
04025674 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
04025688 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
0402569c l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
040256ac l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
040256bc l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
040256d0 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
040256e0 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
040256f0 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
04025700 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
0402570c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
04025718 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
04025724 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0402a16c l     O .rwdata	00000007 _ZL15pstrUsageRinger
0402a174 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0402a178 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0402a17c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0402a180 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0402a184 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0402a188 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0402a18c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0402a190 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0402a194 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0402a198 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0402a19c l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0402a1a0 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0402a1a4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0402a1a8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0402a1ac l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0402a1b0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
04025738 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
04025748 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
04025754 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
04025760 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0402a1b4 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0402a1b8 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0402a1c0 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0402a1c8 l     O .rwdata	00000006 _ZL14pstrUsageReset
0402a1d0 l     O .rwdata	00000006 _ZL14pstrUsageSleep
0402576c l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
04025778 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0402a1d8 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
04025784 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0402a1e0 l     O .rwdata	00000005 _ZL13pstrUsageMenu
04025790 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0402a1e8 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
0402579c l     O .rodata	0000000a _ZL17pstrUsageMenuDown
040257a8 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
040257b4 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
040257c0 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
040257cc l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
040257dc l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
040257ec l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
040257f8 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
04025804 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0402a1f0 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
04025814 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
04025824 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0402a1f8 l     O .rwdata	00000006 _ZL14pstrUsageStill
0402a200 l     O .rwdata	00000004 _ZL18pstrUsageSelection
04025830 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
0402583c l     O .rodata	0000000a _ZL17pstrUsageModeStep
04025848 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
04025854 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
04025864 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0402a204 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0402a20c l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
04025870 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
04025880 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
0402588c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
04025898 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
040258a4 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
040258b0 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
040258bc l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
040258c8 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
040258d8 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
040258e4 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
040258f0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
040258fc l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0402a214 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0402a21c l     O .rwdata	00000005 _ZL13pstrUsageHelp
0402590c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
0402591c l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
04025928 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
04025934 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
04025944 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
04025954 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0402a224 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0402a22c l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
04025964 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0402a234 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0402a23c l     O .rwdata	00000005 _ZL13pstrUsageOnce
0402a244 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0402a24c l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0402a254 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
04025970 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
0402597c l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0402a25c l     O .rwdata	00000006 _ZL14pstrUsageEject
0402a264 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
04025988 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
04025994 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
040259a0 l     O .rodata	00000009 _ZL17pstrUsageTracking
040259ac l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
040259b8 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0402a26c l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
040259c4 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0402a274 l     O .rwdata	00000005 _ZL13pstrUsageMark
040259d0 l     O .rodata	00000009 _ZL18pstrUsageClearMark
040259dc l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
040259e8 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
040259f4 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
04025a04 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
04025a18 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
04025a28 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
04025a38 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
04025a44 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
04025a50 l     O .rodata	0000000b _ZL18pstrUsageStopEject
04025a5c l     O .rodata	0000000b _ZL18pstrUsagePlayPause
04025a68 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0402a27c l     O .rwdata	00000004 _ZL15pstrUsageVolume
0402a280 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0402a288 l     O .rwdata	00000005 _ZL13pstrUsageBass
0402a290 l     O .rwdata	00000007 _ZL15pstrUsageTreble
04025a74 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
04025a80 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0402a298 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0402a2a0 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0402a2a4 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0402a2ac l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0402a2b4 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
04025a8c l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
04025a98 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
04025aa4 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
04025ab0 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0402a2bc l     O .rwdata	00000005 _ZL13pstrUsageSlow
04025abc l     O .rodata	00000009 _ZL18pstrUsageFanEnable
04025ac8 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
04025ad4 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
04025ae0 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
04025af0 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
04025b00 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
04025b0c l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
04025b18 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
04025b24 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0402a2c4 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0402a2cc l     O .rwdata	00000007 _ZL15pstrUsageMotion
04025b30 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
04025b3c l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0402a2d4 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
04025b48 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
04025b58 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
04025b68 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
04025b74 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
04025b80 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
04025b8c l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0402a2dc l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0402a2e4 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
04025b98 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
04025ba4 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
04025bb0 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
04025bbc l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0402a2ec l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
04025bcc l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
04025bd8 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0402a2f4 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0402a2fc l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0402a304 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
04025be8 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
04025bf4 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
04025c00 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
04025c0c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
04025c18 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
04025c28 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
04025c3c l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
04025c48 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
04025c5c l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
04025c6c l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
04025c78 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
04025c88 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
04025c98 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
04025ca8 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
04025cb4 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
04025cc4 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
04025cd0 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
04025ce0 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
04025cf0 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
04025d00 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
04025d10 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
04025d24 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0402a30c l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
04025d34 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
04025d48 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
04025d5c l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
04025d6c l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
04025d7c l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
04025d8c l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
04025d98 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
04025da4 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
04025db0 l     O .rodata	00000009 _ZL16pstrUsageALLogon
04025dbc l     O .rodata	0000000a _ZL17pstrUsageALLogoff
04025dc8 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
04025dd8 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
04025df0 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
04025dfc l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
04025e08 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
04025e14 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
04025e20 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
04025e2c l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
04025e38 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
04025e4c l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0402a314 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
04025e58 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0402a31c l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
04025e64 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
04025e70 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
04025e80 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
04025e8c l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
04025e9c l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
04025eac l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
04025ebc l     O .rodata	0000000b _ZL21pstrUsageALEncryption
04025ec8 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
04025ed4 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
04025ee0 l     O .rodata	00000009 _ZL16pstrUsageALClock
04025eec l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
04025efc l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
04025f08 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
04025f14 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
04025f20 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
04025f2c l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
04025f40 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
04025f50 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
04025f5c l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
04025f70 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
04025f7c l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
04025f8c l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
04025fa0 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
04025fb4 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
04025fc8 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
04025fd8 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
04025ff0 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
04026004 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
04026014 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
04026024 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0402a324 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0402a32c l     O .rwdata	00000008 _ZL15pstrUsageACOpen
04026038 l     O .rodata	00000009 _ZL16pstrUsageACClose
0402a334 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0402a33c l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0402a344 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0402a34c l     O .rwdata	00000008 _ZL15pstrUsageACSave
04026044 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0402a354 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0402a35c l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0402a364 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0402a36c l     O .rwdata	00000007 _ZL14pstrUsageACCut
04026050 l     O .rodata	00000009 _ZL16pstrUsageACPaste
0402605c l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0402a374 l     O .rwdata	00000008 _ZL15pstrUsageACFind
04026068 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
04026078 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0402a37c l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0402a384 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0402a38c l     O .rwdata	00000008 _ZL15pstrUsageACBack
0402a394 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0402a39c l     O .rwdata	00000008 _ZL15pstrUsageACStop
04026084 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
04026090 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
040260a0 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
040260b0 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0402a3a4 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
040260bc l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
040260c8 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
040260d4 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0402a3ac l     O .rwdata	00000008 _ZL15pstrUsageACZoom
040260e0 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
040260ec l     O .rodata	0000000d _ZL21pstrUsageACNormalView
040260fc l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
04026108 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
04026118 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
04026128 l     O .rodata	0000000a _ZL17pstrUsageACScroll
04026134 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
04026140 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0402a3b4 l     O .rwdata	00000007 _ZL14pstrUsageACPan
04026150 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
0402615c l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
0402616c l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0402a3bc l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0402a3c4 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0402a3cc l     O .rwdata	00000008 _ZL15pstrUsageACBold
0402a3d4 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
0402617c l     O .rodata	00000009 _ZL20pstrUsageACUnderline
04026188 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0402a3dc l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
04026194 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
040261a0 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
040261ac l     O .rodata	0000000a _ZL17pstrUsageACRotate
040261b8 l     O .rodata	0000000a _ZL17pstrUsageACResize
040261c4 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
040261d0 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
040261dc l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
040261e8 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
040261f4 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
04026200 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
0402620c l     O .rodata	0000000c _ZL19pstrUsageACFontSize
04026218 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
04026228 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
04026238 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
04026248 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
04026258 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
04026264 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
04026274 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
04026280 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
04026290 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
040262a0 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
040262b0 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
040262bc l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
040262c8 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
040262d4 l     O .rodata	0000000b _ZL18pstrUsageACPromote
040262e0 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0402a3e4 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0402a3ec l     O .rwdata	00000006 _ZL13pstrUsageACNo
040262ec l     O .rodata	0000000a _ZL17pstrUsageACCancel
0402a3f4 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0402a3fc l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
040262f8 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0402a404 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
04026304 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
04026314 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
04026320 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
04026330 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
04026340 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
04026350 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0402a40c l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0402a414 l     O .rwdata	00000008 _ZL15pstrUsageACLock
0402635c l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0402a41c l     O .rwdata	00000008 _ZL18pstrUsageACProtect
04026368 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
04026374 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
04026384 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
04026390 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
040263a0 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
040263ac l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
040263b8 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
040263c4 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
040263d0 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
040263dc l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
040263e8 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0402a424 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0402a42c l     O .rwdata	00000008 _ZL15pstrUsageACSort
040263f4 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
04026400 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0402a434 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
04026410 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
0402641c l     O .rodata	0000000c _ZL20pstrUsageACViewClock
04026428 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
04026438 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
04026448 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
04026454 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
04026460 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
0402646c l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0402a43c l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
04026478 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
04026484 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
04026490 l     O .rodata	00000009 _ZL16pstrUsageACReply
0402649c l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
040264ac l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0402a444 l     O .rwdata	00000007 _ZL15pstrUsageACSend
040264b8 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0402a44c l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0402a454 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
040264c4 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
040264d0 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
040264dc l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
040264e8 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
040264f4 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
04026500 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
0402650c l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
04026518 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
04026524 l     O .rodata	0000000a _ZL17pstrUsageACRename
04026530 l     O .rodata	00000009 _ZL16pstrUsageACMerge
0402653c l     O .rodata	00000009 _ZL16pstrUsageACSplit
04026548 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
04026554 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
04026560 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0402a45c l     O .rwdata	00000004 _ZL12pstrUsagePen
0402656c l     O .rodata	0000000a _ZL17pstrUsageLightPen
04026578 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
04026584 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
04026590 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
0402659c l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0402a460 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
040265ac l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0402a468 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
040265b8 l     O .rodata	00000009 _ZL17pstrUsageArmature
040265c4 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
040265d8 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0402a470 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0402a478 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0402a480 l     O .rwdata	00000007 _ZL15pstrUsageFinger
040265e8 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
040265f4 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
04026600 l     O .rodata	00000009 _ZL16pstrUsageInRange
0402a488 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0402a490 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0402a498 l     O .rwdata	00000004 _ZL12pstrUsageTap
0402a49c l     O .rwdata	00000005 _ZL16pstrUsageQuality
0402660c l     O .rodata	0000000b _ZL18pstrUsageDataValid
04026618 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
04026628 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
04026638 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0402a4a4 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0402a4ac l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0402a4b4 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0402a4bc l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
04026648 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0402a4c4 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0402a4cc l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
04026654 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0402a4d4 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0402a4dc l     O .rwdata	00000007 _ZL15pstrUsageEraser
04026660 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0402666c l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0402667c l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
04026688 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
04026698 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
040266a4 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
040266b4 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
040266c0 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
040266d0 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
040266dc l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
040266ec l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
040266fc l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
04026708 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
04026714 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
04026720 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0402672c l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
04026738 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
04026744 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
04026750 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
04026760 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
04026770 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0402a4e4 l     O .rwdata	00000004 _ZL12pstrUsageRow
0402a4e8 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0402a4ec l     O .rwdata	00000005 _ZL13pstrUsageRows
0402a4f4 l     O .rwdata	00000005 _ZL16pstrUsageColumns
0402677c l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
04026788 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
04026794 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
040267a0 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0402a4fc l     O .rwdata	00000008 _ZL19pstrUsageFontReport
040267ac l     O .rodata	00000009 _ZL17pstrUsageFontData
040267b8 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
040267c4 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
040267d0 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
040267e0 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
040267f0 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
04026800 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0402680c l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
04026818 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
04026824 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
04026830 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0402683c l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
04026848 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
04026854 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
04026860 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0402686c l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0402687c l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0402688c l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
0402689c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
040268a8 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
040268b4 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
040268c4 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0402a504 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
040268d0 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
040268e0 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
040268f0 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
040268fc l     O .rodata	00000009 _ZL19pstrUsageBlitReport
04026908 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
04026918 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
04026928 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
04026938 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
04026948 l     O .rodata	0000000a _ZL17pstrUsageBlitData
04026954 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
04026960 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0402696c l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0402697c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0402698c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
0402699c l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
040269ac l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0402a50c l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0402a514 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
040269bc l     O .rodata	0000000b _ZL18pstrUsageClipStore
0402a51c l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0402a524 l     O .rwdata	00000005 _ZL13pstrUsageNext
0402a52c l     O .rwdata	00000005 _ZL13pstrUsageSave
0402a534 l     O .rwdata	00000006 _ZL14pstrUsagePrint
040269c8 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0402a53c l     O .rwdata	00000005 _ZL13pstrUsageCine
040269d4 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0402a544 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0402a54c l     O .rwdata	00000006 _ZL14pstrUsageDepth
040269e0 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
040269f0 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
04026a00 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
04026a10 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
04026a1c l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
04026a28 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
04026a3c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
04026a50 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
04026a64 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
04026a78 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
04026a88 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
04026a98 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
04026aa4 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
04026ab0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
04026ac0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
04026ace l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
04026ade l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0400a808 l     F .text	00000054 _Z41__static_initialization_and_destruction_0ii
0400a85c l     F .text	00000030 _GLOBAL__sub_I_rcode
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0400ba0c l     F .text	000000a4 _ZL21size_of_encoded_valueh
0400bab0 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0400bcbc l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0400bd10 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0400bd9c l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0400bed0 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0400bf58 l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0400c184 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0400ca5c l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0400cd44 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
0402d8c4 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0400cdfc l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0400cfac l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
0402d7b0 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0400de1c l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
0402d7b8 l     O .bss	00000004 fc_static
0400df34 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0400dff4 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
040273e8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
04027206 l     O .rodata	00000010 zeroes.4404
040117d4 l     F .text	000000bc __sbprintf
04027216 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
040119e4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0401353c l     F .text	00000008 __fp_unlock
04013550 l     F .text	0000019c __sinit.part.1
040136ec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
04027c34 l     O .rwdata	00000020 lc_ctype_charset
04027c14 l     O .rwdata	00000020 lc_message_charset
04027c54 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
04027244 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401617c l     F .text	000000fc __sprint_r.part.0
04027368 l     O .rodata	00000010 zeroes.4349
040177b8 l     F .text	000000bc __sbprintf
04027378 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0401b5c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0401b6d4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0401b734 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0401b848 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0401b930 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0401ba9c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0401bb88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0401bd64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0402a5ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0401bfd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0401c0bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401c1f8 l     F .text	00000034 alt_dev_reg
04027e34 l     O .rwdata	00000038 i2c_0
04027e6c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0401c2d8 l     F .text	00000110 optional_irq_callback
0401c438 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0401e114 l     F .text	0000020c altera_avalon_jtag_uart_irq
0401e320 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0401eb54 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401eeec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401f3dc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0401f53c l     F .text	0000003c alt_get_errno
0401f578 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0402d7f0 g     O .bss	00000004 alt_instruction_exception_handler
0400cf04 g     F .text	00000028 __cxa_free_exception
0402054c  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0400ef1c g     F .text	00000018 putchar
0400b560 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
04015788 g     F .text	00000074 _mprec_log10
04004f90  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0400b9ac g     F .text	00000018 _ZSt10unexpectedv
04015874 g     F .text	0000008c __any_on
04017ec4 g     F .text	00000054 _isatty_r
04027250 g     O .rodata	00000028 __mprec_tinytens
0401bca0 g     F .text	0000007c alt_main
0400ef34 g     F .text	000000c0 _puts_r
04000e54 g     F .text	00000058 _ZN3USBC1Ev
0402d8fc g     O .bss	00000100 alt_irq
0400d0a0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
04009264 g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
04017f18 g     F .text	00000060 _lseek_r
0400e0b0 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0402a5c4 g       *ABS*	00000000 __flash_rwdata_start
040069f8 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
04019ffc g     F .text	00000088 .hidden __eqdf2
04004f90  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
0400301c g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0400cb30 g     F .text	00000084 __cxa_rethrow
0400e03c g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0400b9e8 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
0400e0a0 g     F .text	00000010 .hidden _Unwind_GetIP
0402d9fc g       *ABS*	00000000 __alt_heap_start
04008ba4  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0400f300 g     F .text	0000005c _kill_r
04006d54 g     F .text	00000188 _ZN9USBH_MIDIC2EP3USB
0400eed8 g     F .text	0000003c printf
04020570  w    O .rodata	0000002c _ZTV15USBDeviceConfig
04017fd8 g     F .text	0000009c _wcrtomb_r
0400f0c8 g     F .text	00000084 _signal_r
04006780  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
04016118 g     F .text	0000005c __sseek
0401389c g     F .text	00000010 __sinit
04017874 g     F .text	00000140 __swbuf_r
040098d8 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0400cf80 g     F .text	0000002c __cxa_free_dependent_exception
0400a8b4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
04004f30  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
04014370 g     F .text	0000007c _setlocale_r
04026e4c  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
040136f4 g     F .text	00000078 __sfmoreglue
0401cb30 g     F .text	000000a8 alt_avalon_i2c_rx_read
0401bd40 g     F .text	00000024 __malloc_unlock
0400d0a0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
040084f4 g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0400b2e8 g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04008c8c  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
0400274c g     F .text	00000710 _ZN3USB11ConfiguringEhhb
0400cd24 g     F .text	00000020 _ZSt18uncaught_exceptionv
0400a6d8 g     F .text	000000f8 _Z9print_hexii
0401dd48 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
040024bc g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
04009cac g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0402d7ac g     O .bss	00000001 laststate
0400b5dc g     F .text	00000020 __cxa_deleted_virtual
0401c8b4 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
0400348c  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
04008d50 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
040096e8 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
040146ec g     F .text	0000015c memmove
0400649c  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0400d078 g     F .text	00000004 _ZNSt9exceptionD2Ev
04013884 g     F .text	00000018 _cleanup
0401d598 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
04014848 g     F .text	000000a8 _Balloc
0400dcbc g     F .text	00000070 .hidden __fixsfsi
04004590 g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0400a680 g     F .text	00000058 _Z6halt55v
0401a084 g     F .text	000000dc .hidden __gtdf2
04004654 g     F .text	000000f8 _ZN7XBOXONE4PollEv
04027080  w    O .rodata	00000014 _ZTVSt13bad_exception
0401fbcc g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
0401c014 g     F .text	00000078 times
04008c0c  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0400e0ec g     F .text	00000008 .hidden _Unwind_GetRegionStart
04028ee8  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
04000020 g       *ABS*	00000000 __flash_exceptions_start
04008478 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
04000ae0 g     F .text	0000003c _ZN6SPI_SS3SetEh
0400545c  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
04017e68 g     F .text	0000005c _fstat_r
040093b4 g     F .text	0000008c _ZN8MAX3421e5regWrEhh
04001160 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
0402d7c8 g     O .bss	00000004 errno
040061dc g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
04016094 g     F .text	00000008 __seofread
04008f60 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
0400e2c8 g     F .text	00000074 .hidden _Unwind_Backtrace
0402d7dc g     O .bss	00000004 alt_argv
04003c1c g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
04030ecc g       *ABS*	00000000 _gp
0401c08c g     F .text	00000030 usleep
0401dd8c g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0400d7d8 g     F .text	000004e4 .hidden __subsf3
04007e04 g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
04029680  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0401b828 g     F .text	00000020 getpid
0400c82c g     F .text	00000230 __cxa_call_unexpected
0400cbb4 g     F .text	00000008 __cxa_get_exception_ptr
0401ca44 g     F .text	00000044 alt_avalon_i2c_is_busy
04027cb4 g     O .rwdata	00000180 alt_fd_list
04009110 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
040204bc  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
04006d54 g     F .text	00000188 _ZN9USBH_MIDIC1EP3USB
04000dd4 g     F .text	00000058 _Z5delaym
04004d68 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0400ef14 g     F .text	00000008 _putchar_r
0400e1dc g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
0401c7e8 g     F .text	000000cc alt_avalon_i2c_master_config_set
0400235c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0400e06c g     F .text	00000018 .hidden _Unwind_GetCFA
0400b9c4 g     F .text	00000014 _ZSt13set_terminatePFvvE
0401f08c g     F .text	00000090 alt_find_dev
040204b0  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
0400f4d4 g     F .text	00000008 _times_r
0400ec38 g     F .text	00000148 memcpy
04000ed8 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
04006564  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
04000b1c g     F .text	0000003c _ZN6SPI_SS5ClearEh
0400cf2c g     F .text	00000054 __cxa_allocate_dependent_exception
04013544 g     F .text	0000000c _cleanup_r
0400b674 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0401b43c g     F .text	000000dc .hidden __floatsidf
04020564  w    O .rodata	0000000c _ZTV13USBReadParser
0401f4c0 g     F .text	0000007c alt_io_redirect
0401a160 g     F .text	000000f4 .hidden __ltdf2
040052b0  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
040006bc g     F .text	00000300 initialize_sgtl5000
04000efc g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
040201f8 g       *ABS*	00000000 __DTOR_END__
0400b68c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0401d3d8 g     F .text	000001c0 alt_avalon_i2c_master_transmit
0400eff4 g     F .text	00000014 puts
04026ed4  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
0401fdbc g     F .text	0000009c alt_exception_cause_generated_bad_addr
04007e8c g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
04009198 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
04015fcc g     F .text	00000074 __fpclassifyd
040156e4 g     F .text	000000a4 __ratio
0401779c g     F .text	0000001c __vfiprintf_internal
04007908 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
0401e518 g     F .text	0000021c altera_avalon_jtag_uart_read
0400e404 g     F .text	00000014 malloc
0400eea8 g     F .text	00000030 _printf_r
08001280 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0400d208 g     F .text	00000064 .hidden __udivsi3
0401b884 g     F .text	000000ac isatty
0400f14c g     F .text	000000bc _raise_r
04009354 g     F .text	0000003c _ZN8MAX3421eC2Ev
040272a0 g     O .rodata	000000c8 __mprec_tens
040143ec g     F .text	0000000c __locale_charset
04000e54 g     F .text	00000058 _ZN3USBC2Ev
04005268  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
0401c654 g     F .text	00000098 alt_avalon_i2c_enable
0402d7c4 g     O .bss	00000004 __malloc_top_pad
0400f35c g     F .text	00000004 _getpid_r
0401dc7c g     F .text	00000068 alt_avalon_i2c_int_disable
0402d7a8 g     O .bss	00000001 usb_task_state
0402a58c g     O .rwdata	00000004 __mb_cur_max
0401441c g     F .text	0000000c _localeconv_r
0400ab78 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
040045c0 g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
04006edc g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
04014c7c g     F .text	0000003c __i2b
04013d20 g     F .text	000004c8 __sfvwrite_r
0400b80c g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0400f208 g     F .text	000000a8 __sigtramp_r
040081c0 g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
04003544  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
0400f008 g     F .text	00000054 _sbrk_r
04026f1c  w    O .rodata	00000020 _ZTVSt9type_info
04005360  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
04008ff8 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
04017f78 g     F .text	00000060 _read_r
0400d080 g     F .text	0000000c _ZNKSt9exception4whatEv
0400026c g     F .text	000000b4 SGTL5000_Reg_Rd
0402a5a4 g     O .rwdata	00000004 alt_max_fd
04006850 g     F .text	00000050 _Z9E_Notifycci
04008300 g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
04017b5c g     F .text	000000f0 _fclose_r
0401350c g     F .text	00000030 fflush
0402d7c0 g     O .bss	00000004 __malloc_max_sbrked_mem
04009660 g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
0401d7a4 g     F .text	00000210 alt_avalon_i2c_master_receive
0402284c  w    O .rodata	0000000b _ZTS9USBH_MIDI
04018d80 g     F .text	000008ac .hidden __adddf3
04026e80  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
0400538c  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
04008a58 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0401548c g     F .text	0000010c __b2d
040187bc g     F .text	000005c4 .hidden __umoddi3
0401bbc4 g     F .text	000000dc lseek
0400658c  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0400b6d0 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
040069a8 g     F .text	00000028 _Z8E_Notifyhi
0400b5b8 g     F .text	00000004 _ZdlPv
0401dce4 g     F .text	00000064 alt_avalon_i2c_int_enable
0402a57c g     O .rwdata	00000004 _global_impure_ptr
0400ab88 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
04015a68 g     F .text	00000564 _realloc_r
0402d9fc g       *ABS*	00000000 __bss_end
0401f2ec g     F .text	000000f0 alt_iic_isr_register
0401fac4 g     F .text	00000108 alt_tick
04000aac g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0400e024 g     F .text	00000018 .hidden _Unwind_SjLj_Register
040181c0 g     F .text	000005fc .hidden __udivdi3
0401dba4 g     F .text	00000058 alt_avalon_i2c_int_status_get
04017dc4 g     F .text	00000024 _fputwc_r
04027278 g     O .rodata	00000028 __mprec_bigtens
04014a60 g     F .text	00000104 __s2b
0400e3a0 g     F .text	00000018 abort
0401b518 g     F .text	000000a8 .hidden __floatunsidf
04022790  w    O .rodata	00000014 _ZTS17MouseReportParser
040151cc g     F .text	00000060 __mcmp
04000e2c g     F .text	00000028 _Z6millisv
04008cc8  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
04003e00 g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0400cc70 g     F .text	000000b4 __cxa_end_catch
0400908c g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
040138bc g     F .text	00000018 __fp_lock_all
040205a8  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
0401f2a0 g     F .text	0000004c alt_ic_irq_enabled
0400d07c g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
04003810  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
0400653c  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
0401fa28 g     F .text	0000009c alt_alarm_stop
04000a70 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
040227d8  w    O .rodata	0000003c _ZTV9USBH_MIDI
04000f30 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
0401c4d4 g     F .text	00000054 alt_avalon_i2c_register_callback
0402d7e4 g     O .bss	00000004 alt_irq_active
0401c528 g     F .text	000000ec alt_avalon_i2c_init
0400b984 g     F .text	00000018 _ZSt9terminatev
040000fc g     F .exceptions	000000d4 alt_irq_handler
04027c8c g     O .rwdata	00000028 alt_dev_null
0400abbc g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
040067b4  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0400d0a8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
0400560c  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
040039bc  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
040032e4 g     F .text	00000084 _ZN3USB7setConfEhhh
04008b9c g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
04026f78  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
04001044 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
0401eecc g     F .text	00000020 alt_dcache_flush_all
04014b64 g     F .text	00000068 __hi0bits
04022858  w    O .rodata	0000000c _ZTI14MidiDescParser
040098b0 g     F .text	00000028 _Z10Vbus_powerb
0402a564  w    O .rwdata	00000008 _ZTISt9exception
0401b3bc g     F .text	00000080 .hidden __fixdfsi
040227a4  w    O .rodata	00000012 _ZTS15HIDReportParser
0400a88c  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
04001990 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0400a230 g     F .text	00000450 _Z9test_loopv
0402a5c4 g       *ABS*	00000000 __ram_rwdata_end
0400b55c g     F .text	00000004 _ZNSt9type_infoD1Ev
0402a59c g     O .rwdata	00000008 alt_dev_list
0400d0a8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0401c0f8 g     F .text	00000100 write
04015900 g     F .text	000000a0 _putc_r
04009d20 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
0401ce64 g     F .text	0000004c alt_avalon_i2c_check_arblost
0400b570 g     F .text	00000004 _ZNSt9type_infoD0Ev
04005484  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0400d2ec g     F .text	000000bc .hidden __gtsf2
0400a7d0 g     F .text	00000038 _Z13press_any_keyv
0401dc40 g     F .text	0000003c alt_avalon_i2c_int_clear
04008d24  w    F .text	0000002c _Z10D_PrintHexItEvT_i
0402049c  w    O .rodata	00000014 _ZTV11AddressPool
040273e8 g       *ABS*	00000000 __ram_rodata_end
0401b770 g     F .text	000000b8 fstat
040033c0  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0401b96c g     F .text	00000130 kill
0400682c  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0401a160 g     F .text	000000f4 .hidden __ledf2
040205d0  w    O .rodata	00000020 _ZTI7XBOXONE
0402a5b0 g     O .rwdata	00000008 alt_avalon_i2c_list
040051f0  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
040226ea g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
04014f44 g     F .text	00000140 __pow5mult
040057d8  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
04016290 g     F .text	0000150c ___vfiprintf_internal_r
0402d7d4 g     O .bss	00000004 __nlocale_changed
0400d26c g     F .text	00000058 .hidden __umodsi3
0400b568 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
04004fcc  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
04002e5c g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0400b9d8 g     F .text	00000010 _ZSt13get_terminatev
0402d9fc g       *ABS*	00000000 end
04020558  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
040055d8  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
04009574 g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
0400674c  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0400e2b0 g     F .text	00000018 .hidden _Unwind_DeleteException
0401e054 g     F .text	000000c0 altera_avalon_jtag_uart_init
04006514  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0401c614 g     F .text	00000040 alt_avalon_i2c_open
04022700 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
0400b73c g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0400ab78 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
04029674 g     O .rwdata	00000004 UsbDEBUGlvl
040201f0 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0401cfec g     F .text	000000e8 alt_avalon_i2c_master_tx
0401ebcc g     F .text	0000007c alt_avalon_timer_sc_init
0400e33c g     F .text	00000064 .hidden __clzsi2
0400b5fc g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0401e734 g     F .text	00000224 altera_avalon_jtag_uart_write
040138ac g     F .text	00000004 __sfp_lock_acquire
04027008  w    O .rodata	00000012 _ZTSSt13bad_exception
04014608 g     F .text	000000e4 memchr
0400f4dc g     F .text	000022dc ___vfprintf_internal_r
04004f30  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
04013a10 g     F .text	00000310 _free_r
0401f7c0 g     F .text	0000022c alt_printf
040143f8 g     F .text	00000010 __locale_mb_cur_max
04020038 g     F .text	00000180 __call_exitprocs
04000b58 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
0402d7d0 g     O .bss	00000004 __mlocale_changed
0401c3e8 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0402a584 g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
04004598 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
0402d7e8 g     O .bss	00000004 _alt_tick_rate
04026f0c  w    O .rodata	0000000d _ZTSSt9type_info
0401d9b4 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0400b5bc g     F .text	00000020 __cxa_pure_virtual
04020488  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
04020610  w    O .rodata	00000010 _ZTS13USBReadParser
0401ddd8 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
04015084 g     F .text	00000148 __lshift
0401e958 g     F .text	000001fc alt_avalon_spi_command
0402d7ec g     O .bss	00000004 _alt_nticks
0400f2c4 g     F .text	00000018 signal
0401bda0 g     F .text	00000104 read
04005d04 g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
0401c264 g     F .text	00000074 alt_sys_init
0402050c  w    O .rodata	00000040 _ZTV7XBOXONE
04001a40 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
04000c7c g     F .text	00000158 _Z14alt_busy_sleepj
0401ff20 g     F .text	00000118 __register_exitproc
04003250 g     F .text	00000094 _ZN3USB7setAddrEhhh
040068a0 g     F .text	00000084 _Z8E_NotifyPKci
04022814  w    O .rodata	0000000c _ZTV14MidiDescParser
04008c34  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
04003a50  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
04009d44 g     F .text	00000078 _Z8toBinaryh
0400a8f8 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
04006718  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
0400541c  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0401d210 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
04014cb8 g     F .text	0000028c __multiply
040031a8 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
04029662 g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
0401e3c0 g     F .text	00000068 altera_avalon_jtag_uart_close
040033c0  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0400d2c4 g     F .text	00000028 .hidden __mulsi3
040273e8 g       *ABS*	00000000 __ram_rwdata_start
0400e10c g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
040201f8 g       *ABS*	00000000 __ram_rodata_start
0402d8d4 g     O .bss	00000028 __malloc_current_mallinfo
04005674  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0400e220 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
04015598 g     F .text	0000014c __d2b
040270a8  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0400b55c g     F .text	00000004 _ZNSt9type_infoD2Ev
04008be4  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
04005088  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
04028ed4  w    O .rwdata	00000008 _ZTI11AddressPool
0400d0ac g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0400aaf4 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04022864  w    O .rodata	00000011 _ZTS14MidiDescParser
0400040c g     F .text	00000050 clearLED
04026eac  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
0401def0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0401fcf8 g     F .text	000000c4 alt_get_fd
04005f20 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
0401ed74 g     F .text	00000158 alt_busy_sleep
0402a574  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
04017a2c g     F .text	00000054 _close_r
0401fea4 g     F .text	0000007c memcmp
0401ca88 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
0401dfb0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040079dc g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
0402d9fc g       *ABS*	00000000 __alt_stack_base
0401e000 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0400a8b4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
04007c44 g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
04004cc8 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
04011890 g     F .text	00000154 __swsetup_r
0400e264 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
0401962c g     F .text	000009d0 .hidden __divdf3
0401376c g     F .text	00000118 __sfp
040157fc g     F .text	00000078 __copybits
0400b560 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0402780c g     O .rwdata	00000408 __malloc_av_
0400504c  w    F .text	0000003c _ZN11ByteSkipperC1Ev
04000b94 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
040138b8 g     F .text	00000004 __sinit_lock_release
0401a254 g     F .text	0000086c .hidden __muldf3
04016040 g     F .text	00000054 __sread
04005640  w    F .text	00000034 _ZN13USBReadParserC2Ev
0402706c  w    O .rodata	00000014 _ZTVSt9exception
0400d0a4 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
0400338c  w    F .text	00000034 _ZN11AddressPoolC2Ev
0401fbf0 g     F .text	00000108 alt_find_file
04005334  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
0401ef28 g     F .text	000000a4 alt_dev_llist_insert
0401bd1c g     F .text	00000024 __malloc_lock
0401bf28 g     F .text	000000b0 sbrk
0401ceb0 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0401ce18 g     F .text	0000004c alt_avalon_i2c_check_nack
04026fa8  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0400caa0 g     F .text	00000090 __cxa_throw
040134b0 g     F .text	0000005c _fflush_r
0400e0d0 g     F .text	00000010 .hidden _Unwind_SetIP
040012ec g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
04017a80 g     F .text	000000dc _calloc_r
040205fc  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
040069d0 g     F .text	00000028 _Z8E_Notifydi
0400779c g     F .text	0000016c _ZN9USBH_MIDI19setupDeviceSpecificEv
0402d7a0 g       *ABS*	00000000 __bss_start
04028ef8  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0400ed80 g     F .text	00000128 memset
04008300 g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
04005854  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
04009dbc g     F .text	00000474 main
040095e8 g     F .text	00000078 _ZN8MAX3421e5regRdEh
040097e4 g     F .text	000000cc _ZN8MAX3421e5resetEv
0401cde4 g     F .text	00000034 alt_avalon_i2c_master_target_set
0402d7e0 g     O .bss	00000004 alt_envp
04020620  w    O .rodata	00000012 _ZTS15USBDeviceConfig
0402d7bc g     O .bss	00000004 __malloc_max_total_mem
0401df50 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0402d7a9 g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
040179b4 g     F .text	00000018 __swbuf
0400d060 g     F .text	0000000c __cxa_get_globals_fast
0401dbfc g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
04009354 g     F .text	0000003c _ZN8MAX3421eC1Ev
0400560c  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
04003368  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
04016174 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04017c4c g     F .text	00000014 fclose
04004b9c g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
04006924 g     F .text	00000084 _Z11E_NotifyStrPKci
04000bd0 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
04011c0c g     F .text	00001688 _dtoa_r
0400e42c g     F .text	0000080c _malloc_r
04018134 g     F .text	00000030 __ascii_wctomb
0400d08c g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0402a5a8 g     O .rwdata	00000004 alt_errno
04022784  w    O .rodata	0000000c _ZTI17MouseReportParser
0400f2dc g     F .text	00000010 _init_signal
040030b0 g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
04026f9c  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
04004e0c g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
040141e8 g     F .text	000000c4 _fwalk
04009390 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
04003954  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0400d07c g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
040159a0 g     F .text	000000c8 putc
0400d110 g     F .text	00000084 .hidden __divsi3
04022878  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
0400057c g     F .text	00000140 printSignedHex1
040138ec g     F .text	00000124 _malloc_trim_r
040201f8 g       *ABS*	00000000 __CTOR_END__
0400d3a8 g     F .text	00000430 .hidden __mulsf3
0400522c  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
04008cf0  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
04022738  w    O .rodata	00000028 _ZTV17MouseReportParser
0400f360 g     F .text	000000dc strcmp
04003c1c g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
040201f8 g       *ABS*	00000000 __flash_rodata_start
04027094  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
040201f8 g       *ABS*	00000000 __DTOR_LIST__
04022820  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
04000320 g     F .text	000000a0 SGTL5000_Reg_Wr
0402d7ab g     O .bss	00000001 usbstate
04019ffc g     F .text	00000088 .hidden __nedf2
0401c22c g     F .text	00000038 alt_irq_init
0401bea4 g     F .text	00000084 alt_release_fd
0400a8c4 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
040205f0  w    O .rodata	00000009 _ZTS7XBOXONE
040270bc g     O .rodata	00000100 .hidden __clz_tab
0402d7cc g     O .bss	00000004 _PathLocale
0401fe58 g     F .text	00000014 atexit
0400d2ec g     F .text	000000bc .hidden __gesf2
040179cc g     F .text	00000060 _write_r
04002f94 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
04003518  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
04014428 g     F .text	00000018 setlocale
04000c48 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
0402270c  w    O .rodata	0000002c _ZTV20KeyboardReportParser
04009768 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0400e104 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
04026ee0  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0400d008 g     F .text	00000058 __cxa_call_terminate
0402a580 g     O .rwdata	00000004 _impure_ptr
0402a56c  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
040204d8  w    O .rodata	0000000e _ZTS11AddressPool
0402d7d8 g     O .bss	00000004 alt_argc
04003b54  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
04013294 g     F .text	0000021c __sflush_r
04008cf0  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
040037a4  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
0401f02c g     F .text	00000060 _do_dtors
04014414 g     F .text	00000008 __locale_cjk_lang
0401cdac g     F .text	00000038 alt_avalon_i2c_master_target_get
0401ccbc g     F .text	000000f0 alt_avalon_i2c_send_address
0402d7f4 g     O .bss	00000012 buf
0400b9fc g     F .text	00000010 _ZSt14get_unexpectedv
04000020 g       .exceptions	00000000 alt_irq_entry
0400338c  w    F .text	00000034 _ZN11AddressPoolC1Ev
04000eac g     F .text	0000002c _ZN3USB4initEv
04015428 g     F .text	00000064 __ulp
0400e0f4 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
040138d4 g     F .text	00000018 __fp_unlock_all
04005674  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
04004c8c g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
040052d4  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0402a594 g     O .rwdata	00000008 alt_fs_list
04027048  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
0402276c  w    O .rodata	00000017 _ZTS20KeyboardReportParser
04005640  w    F .text	00000034 _ZN13USBReadParserC1Ev
0400e0e0 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
04005300  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0400cbbc g     F .text	000000b4 __cxa_begin_catch
04004e84 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
0400b68c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0400b99c g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
040064ec  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
04000020 g       *ABS*	00000000 __ram_exceptions_start
04014440 g     F .text	0000000c localeconv
04009ad4 g     F .text	00000174 _ZN8MAX3421e8busprobeEv
040009bc g     F .text	0000003c _ZN6SPI_SS5WriteEh
040003c0 g     F .text	0000004c setLED
040054ac  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0400d09c g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
0401de88 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0402a560 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
04000c0c g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
04008df0 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
0401f13c g     F .text	00000050 alt_ic_isr_register
0401c6ec g     F .text	0000004c alt_avalon_i2c_disable
0400cea4 g     F .text	00000060 __cxa_allocate_exception
04026e74  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0402a5c4 g       *ABS*	00000000 _edata
040055d8  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
0402d9fc g       *ABS*	00000000 _end
0400ace4 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0400c22c g     F .text	00000600 __gxx_personality_sj0
04017c60 g     F .text	00000164 __fputwc
04000230 g       *ABS*	00000000 __ram_exceptions_end
04001f6c g     F .text	000003f0 _ZN3USB4TaskEv
0401e428 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
040009f8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
04028ef0  w    O .rwdata	00000008 _ZTI13USBReadParser
0401c738 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0400d078 g     F .text	00000004 _ZNSt9exceptionD1Ev
0401f214 g     F .text	0000008c alt_ic_irq_disable
04006474  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
0401609c g     F .text	0000007c __swrite
0402a588 g     O .rwdata	00000004 __malloc_trim_threshold
04014408 g     F .text	0000000c __locale_msgcharset
0401fe6c g     F .text	00000038 exit
0400e084 g     F .text	0000001c .hidden _Unwind_SetGR
040064c4  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
040142ac g     F .text	000000c4 _fwalk_reent
0400aa58 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0400dd2c g     F .text	000000f0 .hidden __floatunsisf
0401522c g     F .text	000001fc __mdiff
0400b8c4 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0400d194 g     F .text	00000074 .hidden __modsi3
040016e4 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0402d7aa g     O .bss	00000001 rcode
040138b0 g     F .text	00000004 __sfp_lock_release
0402701c  w    O .rodata	0000000c _ZTISt13bad_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
040067dc  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
0400474c g     F .text	000003c8 _ZN7XBOXONE10readReportEv
0401c948 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
040099bc g     F .text	00000118 _ZN8MAX3421e4InitEi
04001dec g     F .text	00000180 _ZN3USB11dispatchPktEhht
0401cbd8 g     F .text	000000e4 alt_avalon_i2c_cmd_write
0402282c  w    O .rodata	00000020 _ZTI9USBH_MIDI
04004b14 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0400d0b0 g     F .text	00000060 .hidden __fixunssfsi
040076fc g     F .text	000000a0 _ZN9USBH_MIDI7ReleaseEv
0401b700 g     F .text	00000034 _exit
0401ec48 g     F .text	0000012c alt_alarm_start
04022760  w    O .rodata	0000000c _ZTI20KeyboardReportParser
04007da0 g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0400045c g     F .text	00000120 printSignedHex0
0400e050 g     F .text	0000001c .hidden _Unwind_GetGR
0400d06c g     F .text	0000000c __cxa_get_globals
04006b00 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
0401444c g     F .text	000001bc __smakebuf_r
0402a55c g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0400528c  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0400f43c g     F .text	00000098 strlen
0400f05c g     F .text	0000006c _init_signal_r
0402a554  w    O .rwdata	00000008 _ZTISt9type_info
0401f664 g     F .text	0000015c open
0401a084 g     F .text	000000dc .hidden __gedf2
0401f9ec g     F .text	0000003c alt_putchar
04026ff8  w    O .rodata	0000000d _ZTSSt9exception
0400e3b8 g     F .text	0000004c clock
04006804  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
04009c48 g     F .text	00000064 _ZN8MAX3421e4TaskEv
040226f4 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
04009440 g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0402a590 g     O .rwdata	00000004 __wctomb
0400d098 g     F .text	00000004 _ZNSt9exceptionD0Ev
04016278 g     F .text	00000018 __sprint_r
0401f11c g     F .text	00000020 alt_icache_flush_all
0400e0fc g     F .text	00000008 .hidden _Unwind_GetDataRelBase
0402d808 g     O .bss	000000bc Usb
0402a5b8 g     O .rwdata	00000004 alt_priority_mask
0400504c  w    F .text	0000003c _ZN11ByteSkipperC2Ev
0401f18c g     F .text	00000088 alt_ic_irq_enable
040117b8 g     F .text	0000001c __vfprintf_internal
04000a3c g     F .text	00000034 _ZN6SPI_SS4ReadEv
04018164 g     F .text	0000005c _wctomb_r
0401aac0 g     F .text	000008fc .hidden __subdf3
040015fc g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
04004454 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
04014bcc g     F .text	000000b0 __lo0bits
0402a5bc g     O .rwdata	00000008 alt_alarm_list
0401efcc g     F .text	00000060 _do_ctors
0402059c  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0400f2ec g     F .text	00000014 __sigtramp
04008ea8 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
04018074 g     F .text	000000c0 wcrtomb
0401b5fc g     F .text	000000d8 close
0401de3c g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
04027028  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0401bb04 g     F .text	00000084 alt_load
0401d0d4 g     F .text	0000013c alt_avalon_i2c_master_rx
0400b574 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
040050f0  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
04017de8 g     F .text	00000080 fputwc
0400f2b0 g     F .text	00000014 raise
04029668  w    O .rwdata	00000008 _ZTI15HIDReportParser
0400e418 g     F .text	00000014 free
040138b4 g     F .text	00000004 __sinit_lock_acquire
04014918 g     F .text	00000148 __multadd
0400b69c g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
040148f0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100f4 	movhi	r2,1027
 4000140:	10b63f04 	addi	r2,r2,-9988
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100f4 	movhi	r2,1027
 4000158:	10b63f04 	addi	r2,r2,-9988
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_mem_onchip_memory2_0+0xfbffeeac>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_mem_onchip_memory2_0+0xfbffeea0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0b24917 	ldw	r2,-14044(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0b24917 	ldw	r2,-14044(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 400023c:	d683b314 	ori	gp,gp,3788
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	008100b4 	movhi	r2,1026
    ori r2, r2, %lo(__bss_start)
 4000244:	10b5e814 	ori	r2,r2,55200

    movhi r3, %hi(__bss_end)
 4000248:	00c100b4 	movhi	r3,1026
    ori r3, r3, %lo(__bss_end)
 400024c:	18f67f14 	ori	r3,r3,55804

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_mem_onchip_memory2_0+0xfbffefd4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	401bb040 	call	401bb04 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	401bca00 	call	401bca0 <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_mem_onchip_memory2_0+0xfbffefe8>

0400026c <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
 400026c:	defff804 	addi	sp,sp,-32
 4000270:	dfc00715 	stw	ra,28(sp)
 4000274:	df000615 	stw	fp,24(sp)
 4000278:	df000604 	addi	fp,sp,24
 400027c:	e13ffe15 	stw	r4,-8(fp)
 4000280:	2805883a 	mov	r2,r5
 4000284:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
 4000288:	e0bfff0b 	ldhu	r2,-4(fp)
 400028c:	1004d23a 	srli	r2,r2,8
 4000290:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
 4000294:	e0bfff0b 	ldhu	r2,-4(fp)
 4000298:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
 400029c:	e13ffd84 	addi	r4,fp,-10
 40002a0:	e0fffd84 	addi	r3,fp,-10
 40002a4:	d8000115 	stw	zero,4(sp)
 40002a8:	00800084 	movi	r2,2
 40002ac:	d8800015 	stw	r2,0(sp)
 40002b0:	200f883a 	mov	r7,r4
 40002b4:	01800084 	movi	r6,2
 40002b8:	180b883a 	mov	r5,r3
 40002bc:	e13ffe17 	ldw	r4,-8(fp)
 40002c0:	401d2100 	call	401d210 <alt_avalon_i2c_master_tx_rx>
 40002c4:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 40002c8:	e0bffc17 	ldw	r2,-16(fp)
 40002cc:	10000626 	beq	r2,zero,40002e8 <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 40002d0:	e0bfff0b 	ldhu	r2,-4(fp)
 40002d4:	100b883a 	mov	r5,r2
 40002d8:	010100b4 	movhi	r4,1026
 40002dc:	21007e04 	addi	r4,r4,504
 40002e0:	400eed80 	call	400eed8 <printf>
		while (1)
		{
			//hang here
		}
 40002e4:	003fff06 	br	40002e4 <__alt_mem_onchip_memory2_0+0xfbfff064>
	}
	value = (buffer[0] << 8) | buffer[1];
 40002e8:	e0bffd83 	ldbu	r2,-10(fp)
 40002ec:	10803fcc 	andi	r2,r2,255
 40002f0:	1004923a 	slli	r2,r2,8
 40002f4:	1007883a 	mov	r3,r2
 40002f8:	e0bffdc3 	ldbu	r2,-9(fp)
 40002fc:	10803fcc 	andi	r2,r2,255
 4000300:	1884b03a 	or	r2,r3,r2
 4000304:	e0bffd0d 	sth	r2,-12(fp)
	return value;
 4000308:	e0bffd0b 	ldhu	r2,-12(fp)
}
 400030c:	e037883a 	mov	sp,fp
 4000310:	dfc00117 	ldw	ra,4(sp)
 4000314:	df000017 	ldw	fp,0(sp)
 4000318:	dec00204 	addi	sp,sp,8
 400031c:	f800283a 	ret

04000320 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
 4000320:	defff904 	addi	sp,sp,-28
 4000324:	dfc00615 	stw	ra,24(sp)
 4000328:	df000515 	stw	fp,20(sp)
 400032c:	df000504 	addi	fp,sp,20
 4000330:	e13ffd15 	stw	r4,-12(fp)
 4000334:	2807883a 	mov	r3,r5
 4000338:	3005883a 	mov	r2,r6
 400033c:	e0fffe0d 	sth	r3,-8(fp)
 4000340:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
 4000344:	e0bffe0b 	ldhu	r2,-8(fp)
 4000348:	1004d23a 	srli	r2,r2,8
 400034c:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
 4000350:	e0bffe0b 	ldhu	r2,-8(fp)
 4000354:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
 4000358:	e0bfff0b 	ldhu	r2,-4(fp)
 400035c:	1004d23a 	srli	r2,r2,8
 4000360:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
 4000364:	e0bfff0b 	ldhu	r2,-4(fp)
 4000368:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
 400036c:	e0bffc04 	addi	r2,fp,-16
 4000370:	000f883a 	mov	r7,zero
 4000374:	01800104 	movi	r6,4
 4000378:	100b883a 	mov	r5,r2
 400037c:	e13ffd17 	ldw	r4,-12(fp)
 4000380:	401cfec0 	call	401cfec <alt_avalon_i2c_master_tx>
 4000384:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 4000388:	e0bffb17 	ldw	r2,-20(fp)
 400038c:	10000626 	beq	r2,zero,40003a8 <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 4000390:	e0bffe0b 	ldhu	r2,-8(fp)
 4000394:	100b883a 	mov	r5,r2
 4000398:	010100b4 	movhi	r4,1026
 400039c:	21007e04 	addi	r4,r4,504
 40003a0:	400eed80 	call	400eed8 <printf>
		while (1)
		{
			//hang here
		}
 40003a4:	003fff06 	br	40003a4 <__alt_mem_onchip_memory2_0+0xfbfff124>
	}
	return DATA;
 40003a8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 40003ac:	e037883a 	mov	sp,fp
 40003b0:	dfc00117 	ldw	ra,4(sp)
 40003b4:	df000017 	ldw	fp,0(sp)
 40003b8:	dec00204 	addi	sp,sp,8
 40003bc:	f800283a 	ret

040003c0 <setLED>:
#include "sgtl5000/GenericTypeDefs.h"
#include "sgtl5000/sgtl5000.h"
#include "sgtl5000_test.h"

void setLED(int LED)
{
 40003c0:	defffe04 	addi	sp,sp,-8
 40003c4:	df000115 	stw	fp,4(sp)
 40003c8:	df000104 	addi	fp,sp,4
 40003cc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
 40003d0:	00820034 	movhi	r2,2048
 40003d4:	10848804 	addi	r2,r2,4640
 40003d8:	10c00037 	ldwio	r3,0(r2)
 40003dc:	01000044 	movi	r4,1
 40003e0:	e0bfff17 	ldw	r2,-4(fp)
 40003e4:	2084983a 	sll	r2,r4,r2
 40003e8:	1886b03a 	or	r3,r3,r2
 40003ec:	00820034 	movhi	r2,2048
 40003f0:	10848804 	addi	r2,r2,4640
 40003f4:	10c00035 	stwio	r3,0(r2)
}
 40003f8:	0001883a 	nop
 40003fc:	e037883a 	mov	sp,fp
 4000400:	df000017 	ldw	fp,0(sp)
 4000404:	dec00104 	addi	sp,sp,4
 4000408:	f800283a 	ret

0400040c <clearLED>:

void clearLED(int LED)
{
 400040c:	defffe04 	addi	sp,sp,-8
 4000410:	df000115 	stw	fp,4(sp)
 4000414:	df000104 	addi	fp,sp,4
 4000418:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));
 400041c:	00820034 	movhi	r2,2048
 4000420:	10848804 	addi	r2,r2,4640
 4000424:	10c00037 	ldwio	r3,0(r2)
 4000428:	01000044 	movi	r4,1
 400042c:	e0bfff17 	ldw	r2,-4(fp)
 4000430:	2084983a 	sll	r2,r4,r2
 4000434:	0084303a 	nor	r2,zero,r2
 4000438:	1886703a 	and	r3,r3,r2
 400043c:	00820034 	movhi	r2,2048
 4000440:	10848804 	addi	r2,r2,4640
 4000444:	10c00035 	stwio	r3,0(r2)

}
 4000448:	0001883a 	nop
 400044c:	e037883a 	mov	sp,fp
 4000450:	df000017 	ldw	fp,0(sp)
 4000454:	dec00104 	addi	sp,sp,4
 4000458:	f800283a 	ret

0400045c <printSignedHex0>:

void printSignedHex0(signed char value)
{
 400045c:	defffc04 	addi	sp,sp,-16
 4000460:	dfc00315 	stw	ra,12(sp)
 4000464:	df000215 	stw	fp,8(sp)
 4000468:	df000204 	addi	fp,sp,8
 400046c:	2005883a 	mov	r2,r4
 4000470:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000474:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 4000478:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 400047c:	00820034 	movhi	r2,2048
 4000480:	10848c04 	addi	r2,r2,4656
 4000484:	10800037 	ldwio	r2,0(r2)
 4000488:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0)
 400048c:	e0bfff07 	ldb	r2,-4(fp)
 4000490:	1000060e 	bge	r2,zero,40004ac <printSignedHex0+0x50>
	{
		setLED(11);
 4000494:	010002c4 	movi	r4,11
 4000498:	40003c00 	call	40003c0 <setLED>
		value = -value;
 400049c:	e0bfff03 	ldbu	r2,-4(fp)
 40004a0:	0085c83a 	sub	r2,zero,r2
 40004a4:	e0bfff05 	stb	r2,-4(fp)
 40004a8:	00000206 	br	40004b4 <printSignedHex0+0x58>
	}
	else
	{
		clearLED(11);
 40004ac:	010002c4 	movi	r4,11
 40004b0:	400040c0 	call	400040c <clearLED>
	}
	//handled hundreds
	if (value / 100)
 40004b4:	e0bfff03 	ldbu	r2,-4(fp)
 40004b8:	108018c4 	addi	r2,r2,99
 40004bc:	10803fcc 	andi	r2,r2,255
 40004c0:	108031f0 	cmpltui	r2,r2,199
 40004c4:	1000031e 	bne	r2,zero,40004d4 <printSignedHex0+0x78>
		setLED(13);
 40004c8:	01000344 	movi	r4,13
 40004cc:	40003c00 	call	40003c0 <setLED>
 40004d0:	00000206 	br	40004dc <printSignedHex0+0x80>
	else
		clearLED(13);
 40004d4:	01000344 	movi	r4,13
 40004d8:	400040c0 	call	400040c <clearLED>

	value = value % 100;
 40004dc:	e0bfff07 	ldb	r2,-4(fp)
 40004e0:	01401904 	movi	r5,100
 40004e4:	1009883a 	mov	r4,r2
 40004e8:	400d1940 	call	400d194 <__modsi3>
 40004ec:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 40004f0:	e0bfff07 	ldb	r2,-4(fp)
 40004f4:	01400284 	movi	r5,10
 40004f8:	1009883a 	mov	r4,r2
 40004fc:	400d1100 	call	400d110 <__divsi3>
 4000500:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 4000504:	e0bfff07 	ldb	r2,-4(fp)
 4000508:	01400284 	movi	r5,10
 400050c:	1009883a 	mov	r4,r2
 4000510:	400d1940 	call	400d194 <__modsi3>
 4000514:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 4000518:	e0bffe8b 	ldhu	r2,-6(fp)
 400051c:	10803fcc 	andi	r2,r2,255
 4000520:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 4000524:	e0bffe03 	ldbu	r2,-8(fp)
 4000528:	1004933a 	slli	r2,r2,12
 400052c:	1007883a 	mov	r3,r2
 4000530:	e0bffe8b 	ldhu	r2,-6(fp)
 4000534:	1884b03a 	or	r2,r3,r2
 4000538:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 400053c:	e0bffe43 	ldbu	r2,-7(fp)
 4000540:	1004923a 	slli	r2,r2,8
 4000544:	1007883a 	mov	r3,r2
 4000548:	e0bffe8b 	ldhu	r2,-6(fp)
 400054c:	1884b03a 	or	r2,r3,r2
 4000550:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000554:	e0fffe8b 	ldhu	r3,-6(fp)
 4000558:	00820034 	movhi	r2,2048
 400055c:	10848c04 	addi	r2,r2,4656
 4000560:	10c00035 	stwio	r3,0(r2)
}
 4000564:	0001883a 	nop
 4000568:	e037883a 	mov	sp,fp
 400056c:	dfc00117 	ldw	ra,4(sp)
 4000570:	df000017 	ldw	fp,0(sp)
 4000574:	dec00204 	addi	sp,sp,8
 4000578:	f800283a 	ret

0400057c <printSignedHex1>:

void printSignedHex1(signed char value)
{
 400057c:	defffb04 	addi	sp,sp,-20
 4000580:	dfc00415 	stw	ra,16(sp)
 4000584:	df000315 	stw	fp,12(sp)
 4000588:	df000304 	addi	fp,sp,12
 400058c:	2005883a 	mov	r2,r4
 4000590:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000594:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 4000598:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 400059c:	00820034 	movhi	r2,2048
 40005a0:	10848c04 	addi	r2,r2,4656
 40005a4:	10800037 	ldwio	r2,0(r2)
 40005a8:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0)
 40005ac:	e0bfff07 	ldb	r2,-4(fp)
 40005b0:	1000060e 	bge	r2,zero,40005cc <printSignedHex1+0x50>
	{
		setLED(10);
 40005b4:	01000284 	movi	r4,10
 40005b8:	40003c00 	call	40003c0 <setLED>
		value = -value;
 40005bc:	e0bfff03 	ldbu	r2,-4(fp)
 40005c0:	0085c83a 	sub	r2,zero,r2
 40005c4:	e0bfff05 	stb	r2,-4(fp)
 40005c8:	00000206 	br	40005d4 <printSignedHex1+0x58>
	}
	else
	{
		clearLED(10);
 40005cc:	01000284 	movi	r4,10
 40005d0:	400040c0 	call	400040c <clearLED>
	}
	//handled hundreds
	if (value / 100)
 40005d4:	e0bfff03 	ldbu	r2,-4(fp)
 40005d8:	108018c4 	addi	r2,r2,99
 40005dc:	10803fcc 	andi	r2,r2,255
 40005e0:	108031f0 	cmpltui	r2,r2,199
 40005e4:	1000031e 	bne	r2,zero,40005f4 <printSignedHex1+0x78>
		setLED(12);
 40005e8:	01000304 	movi	r4,12
 40005ec:	40003c00 	call	40003c0 <setLED>
 40005f0:	00000206 	br	40005fc <printSignedHex1+0x80>
	else
		clearLED(12);
 40005f4:	01000304 	movi	r4,12
 40005f8:	400040c0 	call	400040c <clearLED>

	value = value % 100;
 40005fc:	e0bfff07 	ldb	r2,-4(fp)
 4000600:	01401904 	movi	r5,100
 4000604:	1009883a 	mov	r4,r2
 4000608:	400d1940 	call	400d194 <__modsi3>
 400060c:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 4000610:	e0bfff07 	ldb	r2,-4(fp)
 4000614:	01400284 	movi	r5,10
 4000618:	1009883a 	mov	r4,r2
 400061c:	400d1100 	call	400d110 <__divsi3>
 4000620:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 4000624:	e0bfff07 	ldb	r2,-4(fp)
 4000628:	01400284 	movi	r5,10
 400062c:	1009883a 	mov	r4,r2
 4000630:	400d1940 	call	400d194 <__modsi3>
 4000634:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 4000638:	e0bfff07 	ldb	r2,-4(fp)
 400063c:	01400284 	movi	r5,10
 4000640:	1009883a 	mov	r4,r2
 4000644:	400d1100 	call	400d110 <__divsi3>
 4000648:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 400064c:	e0bfff07 	ldb	r2,-4(fp)
 4000650:	01400284 	movi	r5,10
 4000654:	1009883a 	mov	r4,r2
 4000658:	400d1940 	call	400d194 <__modsi3>
 400065c:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 4000660:	e0bffe17 	ldw	r2,-8(fp)
 4000664:	10bfc00c 	andi	r2,r2,65280
 4000668:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 400066c:	e0bffd03 	ldbu	r2,-12(fp)
 4000670:	1004913a 	slli	r2,r2,4
 4000674:	1007883a 	mov	r3,r2
 4000678:	e0bffe17 	ldw	r2,-8(fp)
 400067c:	10c4b03a 	or	r2,r2,r3
 4000680:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 4000684:	e0bffd43 	ldbu	r2,-11(fp)
 4000688:	e0fffe17 	ldw	r3,-8(fp)
 400068c:	1884b03a 	or	r2,r3,r2
 4000690:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000694:	e0fffe17 	ldw	r3,-8(fp)
 4000698:	00820034 	movhi	r2,2048
 400069c:	10848c04 	addi	r2,r2,4656
 40006a0:	10c00035 	stwio	r3,0(r2)
}
 40006a4:	0001883a 	nop
 40006a8:	e037883a 	mov	sp,fp
 40006ac:	dfc00117 	ldw	ra,4(sp)
 40006b0:	df000017 	ldw	fp,0(sp)
 40006b4:	dec00204 	addi	sp,sp,8
 40006b8:	f800283a 	ret

040006bc <initialize_sgtl5000>:


int initialize_sgtl5000()
{
 40006bc:	defffc04 	addi	sp,sp,-16
 40006c0:	dfc00315 	stw	ra,12(sp)
 40006c4:	df000215 	stw	fp,8(sp)
 40006c8:	df000204 	addi	fp,sp,8
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
 40006cc:	010100b4 	movhi	r4,1026
 40006d0:	21008604 	addi	r4,r4,536
 40006d4:	401c6140 	call	401c614 <alt_avalon_i2c_open>
 40006d8:	e0bffe15 	stw	r2,-8(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
 40006dc:	e0bffe17 	ldw	r2,-8(fp)
 40006e0:	1000051e 	bne	r2,zero,40006f8 <initialize_sgtl5000+0x3c>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
 40006e4:	010100b4 	movhi	r4,1026
 40006e8:	21008904 	addi	r4,r4,548
 40006ec:	400eff40 	call	400eff4 <puts>
		return 1;
 40006f0:	00800044 	movi	r2,1
 40006f4:	0000ac06 	br	40009a8 <initialize_sgtl5000+0x2ec>
	}
	printf ("I2C Test Program\n");
 40006f8:	010100b4 	movhi	r4,1026
 40006fc:	21009104 	addi	r4,r4,580
 4000700:	400eff40 	call	400eff4 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
 4000704:	01400284 	movi	r5,10
 4000708:	e13ffe17 	ldw	r4,-8(fp)
 400070c:	401cde40 	call	401cde4 <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
 4000710:	000b883a 	mov	r5,zero
 4000714:	e13ffe17 	ldw	r4,-8(fp)
 4000718:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 400071c:	10bfffcc 	andi	r2,r2,65535
 4000720:	100b883a 	mov	r5,r2
 4000724:	010100b4 	movhi	r4,1026
 4000728:	21009604 	addi	r4,r4,600
 400072c:	400eed80 	call	400eed8 <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
 4000730:	00800384 	movi	r2,14
 4000734:	e0bfff05 	stb	r2,-4(fp)
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
 4000738:	e0bfff03 	ldbu	r2,-4(fp)
 400073c:	1009883a 	mov	r4,r2
 4000740:	400dd2c0 	call	400dd2c <__floatunsisf>
 4000744:	1007883a 	mov	r3,r2
 4000748:	180b883a 	mov	r5,r3
 400074c:	011059f4 	movhi	r4,16743
 4000750:	210d8144 	addi	r4,r4,13829
 4000754:	400d7d80 	call	400d7d8 <__subsf3>
 4000758:	1007883a 	mov	r3,r2
 400075c:	1805883a 	mov	r2,r3
 4000760:	01514034 	movhi	r5,17664
 4000764:	1009883a 	mov	r4,r2
 4000768:	400d3a80 	call	400d3a8 <__mulsf3>
 400076c:	1007883a 	mov	r3,r2
 4000770:	1805883a 	mov	r2,r3
 4000774:	1009883a 	mov	r4,r2
 4000778:	400d0b00 	call	400d0b0 <__fixunssfsi>
 400077c:	e0bfff8d 	sth	r2,-2(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
 4000780:	e0bfff03 	ldbu	r2,-4(fp)
 4000784:	e0ffff8b 	ldhu	r3,-2(fp)
 4000788:	180d883a 	mov	r6,r3
 400078c:	100b883a 	mov	r5,r2
 4000790:	010100b4 	movhi	r4,1026
 4000794:	21009c04 	addi	r4,r4,624
 4000798:	400eed80 	call	400eed8 <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
 400079c:	e0bfff03 	ldbu	r2,-4(fp)
 40007a0:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
 40007a4:	1007883a 	mov	r3,r2
 40007a8:	e0bfff8b 	ldhu	r2,-2(fp)
 40007ac:	1884b03a 	or	r2,r3,r2
 40007b0:	10bfffcc 	andi	r2,r2,65535
 40007b4:	100d883a 	mov	r6,r2
 40007b8:	01400c84 	movi	r5,50
 40007bc:	e13ffe17 	ldw	r4,-8(fp)
 40007c0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
 40007c4:	01400c84 	movi	r5,50
 40007c8:	e13ffe17 	ldw	r4,-8(fp)
 40007cc:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40007d0:	10bfffcc 	andi	r2,r2,65535
 40007d4:	100b883a 	mov	r5,r2
 40007d8:	010100b4 	movhi	r4,1026
 40007dc:	2100ad04 	addi	r4,r4,692
 40007e0:	400eed80 	call	400eed8 <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
 40007e4:	01917f84 	movi	r6,17918
 40007e8:	01400c04 	movi	r5,48
 40007ec:	e13ffe17 	ldw	r4,-8(fp)
 40007f0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
 40007f4:	01400c04 	movi	r5,48
 40007f8:	e13ffe17 	ldw	r4,-8(fp)
 40007fc:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000800:	10bfffcc 	andi	r2,r2,65535
 4000804:	100b883a 	mov	r5,r2
 4000808:	010100b4 	movhi	r4,1026
 400080c:	2100b404 	addi	r4,r4,720
 4000810:	400eed80 	call	400eed8 <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
 4000814:	01801384 	movi	r6,78
 4000818:	01400a04 	movi	r5,40
 400081c:	e13ffe17 	ldw	r4,-8(fp)
 4000820:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
 4000824:	01400a04 	movi	r5,40
 4000828:	e13ffe17 	ldw	r4,-8(fp)
 400082c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000830:	10bfffcc 	andi	r2,r2,65535
 4000834:	100b883a 	mov	r5,r2
 4000838:	010100b4 	movhi	r4,1026
 400083c:	2100bc04 	addi	r4,r4,752
 4000840:	400eed80 	call	400eed8 <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
 4000844:	018018c4 	movi	r6,99
 4000848:	01400084 	movi	r5,2
 400084c:	e13ffe17 	ldw	r4,-8(fp)
 4000850:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
 4000854:	01400084 	movi	r5,2
 4000858:	e13ffe17 	ldw	r4,-8(fp)
 400085c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000860:	10bfffcc 	andi	r2,r2,65535
 4000864:	100b883a 	mov	r5,r2
 4000868:	010100b4 	movhi	r4,1026
 400086c:	2100c304 	addi	r4,r4,780
 4000870:	400eed80 	call	400eed8 <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
 4000874:	018001c4 	movi	r6,7
 4000878:	01400104 	movi	r5,4
 400087c:	e13ffe17 	ldw	r4,-8(fp)
 4000880:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
 4000884:	01400104 	movi	r5,4
 4000888:	e13ffe17 	ldw	r4,-8(fp)
 400088c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000890:	10bfffcc 	andi	r2,r2,65535
 4000894:	100b883a 	mov	r5,r2
 4000898:	010100b4 	movhi	r4,1026
 400089c:	2100cb04 	addi	r4,r4,812
 40008a0:	400eed80 	call	400eed8 <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
 40008a4:	01802004 	movi	r6,128
 40008a8:	01400184 	movi	r5,6
 40008ac:	e13ffe17 	ldw	r4,-8(fp)
 40008b0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
 40008b4:	01400184 	movi	r5,6
 40008b8:	e13ffe17 	ldw	r4,-8(fp)
 40008bc:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40008c0:	10bfffcc 	andi	r2,r2,65535
 40008c4:	100b883a 	mov	r5,r2
 40008c8:	010100b4 	movhi	r4,1026
 40008cc:	2100d204 	addi	r4,r4,840
 40008d0:	400eed80 	call	400eed8 <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
 40008d4:	01800104 	movi	r6,4
 40008d8:	01400904 	movi	r5,36
 40008dc:	e13ffe17 	ldw	r4,-8(fp)
 40008e0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 40008e4:	01400904 	movi	r5,36
 40008e8:	e13ffe17 	ldw	r4,-8(fp)
 40008ec:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40008f0:	10bfffcc 	andi	r2,r2,65535
 40008f4:	100b883a 	mov	r5,r2
 40008f8:	010100b4 	movhi	r4,1026
 40008fc:	2100d904 	addi	r4,r4,868
 4000900:	400eed80 	call	400eed8 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
 4000904:	01800404 	movi	r6,16
 4000908:	01400284 	movi	r5,10
 400090c:	e13ffe17 	ldw	r4,-8(fp)
 4000910:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
 4000914:	01400284 	movi	r5,10
 4000918:	e13ffe17 	ldw	r4,-8(fp)
 400091c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000920:	10bfffcc 	andi	r2,r2,65535
 4000924:	100b883a 	mov	r5,r2
 4000928:	010100b4 	movhi	r4,1026
 400092c:	2100e004 	addi	r4,r4,896
 4000930:	400eed80 	call	400eed8 <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 4000934:	01400904 	movi	r5,36
 4000938:	e13ffe17 	ldw	r4,-8(fp)
 400093c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000940:	10bfffcc 	andi	r2,r2,65535
 4000944:	100b883a 	mov	r5,r2
 4000948:	010100b4 	movhi	r4,1026
 400094c:	2100d904 	addi	r4,r4,868
 4000950:	400eed80 	call	400eed8 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
 4000954:	000d883a 	mov	r6,zero
 4000958:	01400384 	movi	r5,14
 400095c:	e13ffe17 	ldw	r4,-8(fp)
 4000960:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
 4000964:	01400384 	movi	r5,14
 4000968:	e13ffe17 	ldw	r4,-8(fp)
 400096c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000970:	10bfffcc 	andi	r2,r2,65535
 4000974:	100b883a 	mov	r5,r2
 4000978:	010100b4 	movhi	r4,1026
 400097c:	2100e704 	addi	r4,r4,924
 4000980:	400eed80 	call	400eed8 <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
 4000984:	01400504 	movi	r5,20
 4000988:	e13ffe17 	ldw	r4,-8(fp)
 400098c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000990:	10bfffcc 	andi	r2,r2,65535
 4000994:	100b883a 	mov	r5,r2
 4000998:	010100b4 	movhi	r4,1026
 400099c:	2100ef04 	addi	r4,r4,956
 40009a0:	400eed80 	call	400eed8 <printf>


	return 0;
 40009a4:	0005883a 	mov	r2,zero
}
 40009a8:	e037883a 	mov	sp,fp
 40009ac:	dfc00117 	ldw	ra,4(sp)
 40009b0:	df000017 	ldw	fp,0(sp)
 40009b4:	dec00204 	addi	sp,sp,8
 40009b8:	f800283a 	ret

040009bc <_ZN6SPI_SS5WriteEh>:
 40009bc:	defffd04 	addi	sp,sp,-12
 40009c0:	dfc00215 	stw	ra,8(sp)
 40009c4:	df000115 	stw	fp,4(sp)
 40009c8:	df000104 	addi	fp,sp,4
 40009cc:	2005883a 	mov	r2,r4
 40009d0:	e0bfff05 	stb	r2,-4(fp)
 40009d4:	010100b4 	movhi	r4,1026
 40009d8:	2100f704 	addi	r4,r4,988
 40009dc:	400eff40 	call	400eff4 <puts>
 40009e0:	0001883a 	nop
 40009e4:	e037883a 	mov	sp,fp
 40009e8:	dfc00117 	ldw	ra,4(sp)
 40009ec:	df000017 	ldw	fp,0(sp)
 40009f0:	dec00204 	addi	sp,sp,8
 40009f4:	f800283a 	ret

040009f8 <_ZN6SPI_SS11ClearAndSetEhh>:
 40009f8:	defffc04 	addi	sp,sp,-16
 40009fc:	dfc00315 	stw	ra,12(sp)
 4000a00:	df000215 	stw	fp,8(sp)
 4000a04:	df000204 	addi	fp,sp,8
 4000a08:	2007883a 	mov	r3,r4
 4000a0c:	2805883a 	mov	r2,r5
 4000a10:	e0fffe05 	stb	r3,-8(fp)
 4000a14:	e0bfff05 	stb	r2,-4(fp)
 4000a18:	010100b4 	movhi	r4,1026
 4000a1c:	2100fa04 	addi	r4,r4,1000
 4000a20:	400eff40 	call	400eff4 <puts>
 4000a24:	0001883a 	nop
 4000a28:	e037883a 	mov	sp,fp
 4000a2c:	dfc00117 	ldw	ra,4(sp)
 4000a30:	df000017 	ldw	fp,0(sp)
 4000a34:	dec00204 	addi	sp,sp,8
 4000a38:	f800283a 	ret

04000a3c <_ZN6SPI_SS4ReadEv>:
 4000a3c:	defffe04 	addi	sp,sp,-8
 4000a40:	dfc00115 	stw	ra,4(sp)
 4000a44:	df000015 	stw	fp,0(sp)
 4000a48:	d839883a 	mov	fp,sp
 4000a4c:	010100b4 	movhi	r4,1026
 4000a50:	2100ff04 	addi	r4,r4,1020
 4000a54:	400eff40 	call	400eff4 <puts>
 4000a58:	0001883a 	nop
 4000a5c:	e037883a 	mov	sp,fp
 4000a60:	dfc00117 	ldw	ra,4(sp)
 4000a64:	df000017 	ldw	fp,0(sp)
 4000a68:	dec00204 	addi	sp,sp,8
 4000a6c:	f800283a 	ret

04000a70 <_ZN6SPI_SS8DirWriteEh>:
 4000a70:	defffd04 	addi	sp,sp,-12
 4000a74:	dfc00215 	stw	ra,8(sp)
 4000a78:	df000115 	stw	fp,4(sp)
 4000a7c:	df000104 	addi	fp,sp,4
 4000a80:	2005883a 	mov	r2,r4
 4000a84:	e0bfff05 	stb	r2,-4(fp)
 4000a88:	010100b4 	movhi	r4,1026
 4000a8c:	21010204 	addi	r4,r4,1032
 4000a90:	400eff40 	call	400eff4 <puts>
 4000a94:	0001883a 	nop
 4000a98:	e037883a 	mov	sp,fp
 4000a9c:	dfc00117 	ldw	ra,4(sp)
 4000aa0:	df000017 	ldw	fp,0(sp)
 4000aa4:	dec00204 	addi	sp,sp,8
 4000aa8:	f800283a 	ret

04000aac <_ZN6SPI_SS7DirReadEv>:
 4000aac:	defffe04 	addi	sp,sp,-8
 4000ab0:	dfc00115 	stw	ra,4(sp)
 4000ab4:	df000015 	stw	fp,0(sp)
 4000ab8:	d839883a 	mov	fp,sp
 4000abc:	010100b4 	movhi	r4,1026
 4000ac0:	21010604 	addi	r4,r4,1048
 4000ac4:	400eff40 	call	400eff4 <puts>
 4000ac8:	0001883a 	nop
 4000acc:	e037883a 	mov	sp,fp
 4000ad0:	dfc00117 	ldw	ra,4(sp)
 4000ad4:	df000017 	ldw	fp,0(sp)
 4000ad8:	dec00204 	addi	sp,sp,8
 4000adc:	f800283a 	ret

04000ae0 <_ZN6SPI_SS3SetEh>:
 4000ae0:	defffd04 	addi	sp,sp,-12
 4000ae4:	dfc00215 	stw	ra,8(sp)
 4000ae8:	df000115 	stw	fp,4(sp)
 4000aec:	df000104 	addi	fp,sp,4
 4000af0:	2005883a 	mov	r2,r4
 4000af4:	e0bfff05 	stb	r2,-4(fp)
 4000af8:	010100b4 	movhi	r4,1026
 4000afc:	21010a04 	addi	r4,r4,1064
 4000b00:	400eff40 	call	400eff4 <puts>
 4000b04:	0001883a 	nop
 4000b08:	e037883a 	mov	sp,fp
 4000b0c:	dfc00117 	ldw	ra,4(sp)
 4000b10:	df000017 	ldw	fp,0(sp)
 4000b14:	dec00204 	addi	sp,sp,8
 4000b18:	f800283a 	ret

04000b1c <_ZN6SPI_SS5ClearEh>:
 4000b1c:	defffd04 	addi	sp,sp,-12
 4000b20:	dfc00215 	stw	ra,8(sp)
 4000b24:	df000115 	stw	fp,4(sp)
 4000b28:	df000104 	addi	fp,sp,4
 4000b2c:	2005883a 	mov	r2,r4
 4000b30:	e0bfff05 	stb	r2,-4(fp)
 4000b34:	010100b4 	movhi	r4,1026
 4000b38:	21010d04 	addi	r4,r4,1076
 4000b3c:	400eff40 	call	400eff4 <puts>
 4000b40:	0001883a 	nop
 4000b44:	e037883a 	mov	sp,fp
 4000b48:	dfc00117 	ldw	ra,4(sp)
 4000b4c:	df000017 	ldw	fp,0(sp)
 4000b50:	dec00204 	addi	sp,sp,8
 4000b54:	f800283a 	ret

04000b58 <_ZN6SPI_SS6ToggleEh>:
 4000b58:	defffd04 	addi	sp,sp,-12
 4000b5c:	dfc00215 	stw	ra,8(sp)
 4000b60:	df000115 	stw	fp,4(sp)
 4000b64:	df000104 	addi	fp,sp,4
 4000b68:	2005883a 	mov	r2,r4
 4000b6c:	e0bfff05 	stb	r2,-4(fp)
 4000b70:	010100b4 	movhi	r4,1026
 4000b74:	21011004 	addi	r4,r4,1088
 4000b78:	400eff40 	call	400eff4 <puts>
 4000b7c:	0001883a 	nop
 4000b80:	e037883a 	mov	sp,fp
 4000b84:	dfc00117 	ldw	ra,4(sp)
 4000b88:	df000017 	ldw	fp,0(sp)
 4000b8c:	dec00204 	addi	sp,sp,8
 4000b90:	f800283a 	ret

04000b94 <_ZN6SPI_SS6DirSetEh>:
 4000b94:	defffd04 	addi	sp,sp,-12
 4000b98:	dfc00215 	stw	ra,8(sp)
 4000b9c:	df000115 	stw	fp,4(sp)
 4000ba0:	df000104 	addi	fp,sp,4
 4000ba4:	2005883a 	mov	r2,r4
 4000ba8:	e0bfff05 	stb	r2,-4(fp)
 4000bac:	010100b4 	movhi	r4,1026
 4000bb0:	21011304 	addi	r4,r4,1100
 4000bb4:	400eff40 	call	400eff4 <puts>
 4000bb8:	0001883a 	nop
 4000bbc:	e037883a 	mov	sp,fp
 4000bc0:	dfc00117 	ldw	ra,4(sp)
 4000bc4:	df000017 	ldw	fp,0(sp)
 4000bc8:	dec00204 	addi	sp,sp,8
 4000bcc:	f800283a 	ret

04000bd0 <_ZN6SPI_SS8DirClearEh>:
 4000bd0:	defffd04 	addi	sp,sp,-12
 4000bd4:	dfc00215 	stw	ra,8(sp)
 4000bd8:	df000115 	stw	fp,4(sp)
 4000bdc:	df000104 	addi	fp,sp,4
 4000be0:	2005883a 	mov	r2,r4
 4000be4:	e0bfff05 	stb	r2,-4(fp)
 4000be8:	010100b4 	movhi	r4,1026
 4000bec:	21011604 	addi	r4,r4,1112
 4000bf0:	400eff40 	call	400eff4 <puts>
 4000bf4:	0001883a 	nop
 4000bf8:	e037883a 	mov	sp,fp
 4000bfc:	dfc00117 	ldw	ra,4(sp)
 4000c00:	df000017 	ldw	fp,0(sp)
 4000c04:	dec00204 	addi	sp,sp,8
 4000c08:	f800283a 	ret

04000c0c <_ZN6SPI_SS9DirToggleEh>:
 4000c0c:	defffd04 	addi	sp,sp,-12
 4000c10:	dfc00215 	stw	ra,8(sp)
 4000c14:	df000115 	stw	fp,4(sp)
 4000c18:	df000104 	addi	fp,sp,4
 4000c1c:	2005883a 	mov	r2,r4
 4000c20:	e0bfff05 	stb	r2,-4(fp)
 4000c24:	010100b4 	movhi	r4,1026
 4000c28:	21011a04 	addi	r4,r4,1128
 4000c2c:	400eff40 	call	400eff4 <puts>
 4000c30:	0001883a 	nop
 4000c34:	e037883a 	mov	sp,fp
 4000c38:	dfc00117 	ldw	ra,4(sp)
 4000c3c:	df000017 	ldw	fp,0(sp)
 4000c40:	dec00204 	addi	sp,sp,8
 4000c44:	f800283a 	ret

04000c48 <_ZN6SPI_SS7PinReadEv>:
 4000c48:	defffe04 	addi	sp,sp,-8
 4000c4c:	dfc00115 	stw	ra,4(sp)
 4000c50:	df000015 	stw	fp,0(sp)
 4000c54:	d839883a 	mov	fp,sp
 4000c58:	010100b4 	movhi	r4,1026
 4000c5c:	21011e04 	addi	r4,r4,1144
 4000c60:	400eff40 	call	400eff4 <puts>
 4000c64:	0001883a 	nop
 4000c68:	e037883a 	mov	sp,fp
 4000c6c:	dfc00117 	ldw	ra,4(sp)
 4000c70:	df000017 	ldw	fp,0(sp)
 4000c74:	dec00204 	addi	sp,sp,8
 4000c78:	f800283a 	ret

04000c7c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4000c7c:	defffa04 	addi	sp,sp,-24
 4000c80:	dfc00515 	stw	ra,20(sp)
 4000c84:	df000415 	stw	fp,16(sp)
 4000c88:	df000404 	addi	fp,sp,16
 4000c8c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4000c90:	00800244 	movi	r2,9
 4000c94:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4000c98:	014003f4 	movhi	r5,15
 4000c9c:	29509004 	addi	r5,r5,16960
 4000ca0:	e13ffd17 	ldw	r4,-12(fp)
 4000ca4:	400d2c40 	call	400d2c4 <__mulsi3>
 4000ca8:	100b883a 	mov	r5,r2
 4000cac:	0100bef4 	movhi	r4,763
 4000cb0:	213c2004 	addi	r4,r4,-3968
 4000cb4:	400d2080 	call	400d208 <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
 4000cb8:	100b883a 	mov	r5,r2
 4000cbc:	01200034 	movhi	r4,32768
 4000cc0:	213fffc4 	addi	r4,r4,-1
 4000cc4:	400d2080 	call	400d208 <__udivsi3>
 4000cc8:	100b883a 	mov	r5,r2
 4000ccc:	e13fff17 	ldw	r4,-4(fp)
 4000cd0:	400d2080 	call	400d208 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4000cd4:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
 4000cd8:	e0bffe17 	ldw	r2,-8(fp)
 4000cdc:	10002a26 	beq	r2,zero,4000d88 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4000ce0:	e03ffc15 	stw	zero,-16(fp)
 4000ce4:	e0fffc17 	ldw	r3,-16(fp)
 4000ce8:	e0bffe17 	ldw	r2,-8(fp)
 4000cec:	1880180e 	bge	r3,r2,4000d50 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
 4000cf0:	00a00034 	movhi	r2,32768
 4000cf4:	10bfffc4 	addi	r2,r2,-1
 4000cf8:	10bfffc4 	addi	r2,r2,-1
 4000cfc:	103ffe1e 	bne	r2,zero,4000cf8 <__alt_mem_onchip_memory2_0+0xfbfffa78>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4000d00:	014003f4 	movhi	r5,15
 4000d04:	29509004 	addi	r5,r5,16960
 4000d08:	e13ffd17 	ldw	r4,-12(fp)
 4000d0c:	400d2c40 	call	400d2c4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4000d10:	100b883a 	mov	r5,r2
 4000d14:	0100bef4 	movhi	r4,763
 4000d18:	213c2004 	addi	r4,r4,-3968
 4000d1c:	400d2080 	call	400d208 <__udivsi3>
 4000d20:	100b883a 	mov	r5,r2
 4000d24:	01200034 	movhi	r4,32768
 4000d28:	213fffc4 	addi	r4,r4,-1
 4000d2c:	400d2080 	call	400d208 <__udivsi3>
 4000d30:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
 4000d34:	e0bfff17 	ldw	r2,-4(fp)
 4000d38:	10c5c83a 	sub	r2,r2,r3
 4000d3c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4000d40:	e0bffc17 	ldw	r2,-16(fp)
 4000d44:	10800044 	addi	r2,r2,1
 4000d48:	e0bffc15 	stw	r2,-16(fp)
 4000d4c:	003fe506 	br	4000ce4 <__alt_mem_onchip_memory2_0+0xfbfffa64>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4000d50:	014003f4 	movhi	r5,15
 4000d54:	29509004 	addi	r5,r5,16960
 4000d58:	e13ffd17 	ldw	r4,-12(fp)
 4000d5c:	400d2c40 	call	400d2c4 <__mulsi3>
 4000d60:	100b883a 	mov	r5,r2
 4000d64:	0100bef4 	movhi	r4,763
 4000d68:	213c2004 	addi	r4,r4,-3968
 4000d6c:	400d2080 	call	400d208 <__udivsi3>
 4000d70:	e17fff17 	ldw	r5,-4(fp)
 4000d74:	1009883a 	mov	r4,r2
 4000d78:	400d2c40 	call	400d2c4 <__mulsi3>
 4000d7c:	10bfffc4 	addi	r2,r2,-1
 4000d80:	103ffe1e 	bne	r2,zero,4000d7c <__alt_mem_onchip_memory2_0+0xfbfffafc>
 4000d84:	00000d06 	br	4000dbc <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4000d88:	014003f4 	movhi	r5,15
 4000d8c:	29509004 	addi	r5,r5,16960
 4000d90:	e13ffd17 	ldw	r4,-12(fp)
 4000d94:	400d2c40 	call	400d2c4 <__mulsi3>
 4000d98:	100b883a 	mov	r5,r2
 4000d9c:	0100bef4 	movhi	r4,763
 4000da0:	213c2004 	addi	r4,r4,-3968
 4000da4:	400d2080 	call	400d208 <__udivsi3>
 4000da8:	e17fff17 	ldw	r5,-4(fp)
 4000dac:	1009883a 	mov	r4,r2
 4000db0:	400d2c40 	call	400d2c4 <__mulsi3>
 4000db4:	10bfffc4 	addi	r2,r2,-1
 4000db8:	00bffe16 	blt	zero,r2,4000db4 <__alt_mem_onchip_memory2_0+0xfbfffb34>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4000dbc:	0005883a 	mov	r2,zero
}
 4000dc0:	e037883a 	mov	sp,fp
 4000dc4:	dfc00117 	ldw	ra,4(sp)
 4000dc8:	df000017 	ldw	fp,0(sp)
 4000dcc:	dec00204 	addi	sp,sp,8
 4000dd0:	f800283a 	ret

04000dd4 <_Z5delaym>:

void delay(uint32_t a) {
 4000dd4:	defffc04 	addi	sp,sp,-16
 4000dd8:	dfc00315 	stw	ra,12(sp)
 4000ddc:	df000215 	stw	fp,8(sp)
 4000de0:	df000204 	addi	fp,sp,8
 4000de4:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
 4000de8:	400e3b80 	call	400e3b8 <clock>
 4000dec:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
 4000df0:	400e3b80 	call	400e3b8 <clock>
 4000df4:	1007883a 	mov	r3,r2
 4000df8:	e0bffe17 	ldw	r2,-8(fp)
 4000dfc:	1887c83a 	sub	r3,r3,r2
 4000e00:	e0bfff17 	ldw	r2,-4(fp)
 4000e04:	1885803a 	cmpltu	r2,r3,r2
 4000e08:	10803fcc 	andi	r2,r2,255
 4000e0c:	10000126 	beq	r2,zero,4000e14 <_Z5delaym+0x40>
 4000e10:	003ff706 	br	4000df0 <__alt_mem_onchip_memory2_0+0xfbfffb70>
}
 4000e14:	0001883a 	nop
 4000e18:	e037883a 	mov	sp,fp
 4000e1c:	dfc00117 	ldw	ra,4(sp)
 4000e20:	df000017 	ldw	fp,0(sp)
 4000e24:	dec00204 	addi	sp,sp,8
 4000e28:	f800283a 	ret

04000e2c <_Z6millisv>:
uint32_t millis() {
 4000e2c:	defffe04 	addi	sp,sp,-8
 4000e30:	dfc00115 	stw	ra,4(sp)
 4000e34:	df000015 	stw	fp,0(sp)
 4000e38:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
 4000e3c:	400e3b80 	call	400e3b8 <clock>
}
 4000e40:	e037883a 	mov	sp,fp
 4000e44:	dfc00117 	ldw	ra,4(sp)
 4000e48:	df000017 	ldw	fp,0(sp)
 4000e4c:	dec00204 	addi	sp,sp,8
 4000e50:	f800283a 	ret

04000e54 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 4000e54:	defffd04 	addi	sp,sp,-12
 4000e58:	dfc00215 	stw	ra,8(sp)
 4000e5c:	df000115 	stw	fp,4(sp)
 4000e60:	df000104 	addi	fp,sp,4
 4000e64:	e13fff15 	stw	r4,-4(fp)
 4000e68:	e13fff17 	ldw	r4,-4(fp)
 4000e6c:	40093540 	call	4009354 <_ZN8MAX3421eC1Ev>
 4000e70:	e0bfff17 	ldw	r2,-4(fp)
 4000e74:	1009883a 	mov	r4,r2
 4000e78:	40033c00 	call	40033c0 <_ZN15AddressPoolImplILh16EEC1Ev>
 4000e7c:	e0bfff17 	ldw	r2,-4(fp)
 4000e80:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 4000e84:	00800444 	movi	r2,17
 4000e88:	d0b23545 	stb	r2,-14123(gp)
        init();
 4000e8c:	e13fff17 	ldw	r4,-4(fp)
 4000e90:	4000eac0 	call	4000eac <_ZN3USB4initEv>
}
 4000e94:	0001883a 	nop
 4000e98:	e037883a 	mov	sp,fp
 4000e9c:	dfc00117 	ldw	ra,4(sp)
 4000ea0:	df000017 	ldw	fp,0(sp)
 4000ea4:	dec00204 	addi	sp,sp,8
 4000ea8:	f800283a 	ret

04000eac <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 4000eac:	defffe04 	addi	sp,sp,-8
 4000eb0:	df000115 	stw	fp,4(sp)
 4000eb4:	df000104 	addi	fp,sp,4
 4000eb8:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
 4000ebc:	e0bfff17 	ldw	r2,-4(fp)
 4000ec0:	10002e05 	stb	zero,184(r2)
}
 4000ec4:	0001883a 	nop
 4000ec8:	e037883a 	mov	sp,fp
 4000ecc:	df000017 	ldw	fp,0(sp)
 4000ed0:	dec00104 	addi	sp,sp,4
 4000ed4:	f800283a 	ret

04000ed8 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
 4000ed8:	defffe04 	addi	sp,sp,-8
 4000edc:	df000115 	stw	fp,4(sp)
 4000ee0:	df000104 	addi	fp,sp,4
 4000ee4:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
 4000ee8:	d0b23543 	ldbu	r2,-14123(gp)
}
 4000eec:	e037883a 	mov	sp,fp
 4000ef0:	df000017 	ldw	fp,0(sp)
 4000ef4:	dec00104 	addi	sp,sp,4
 4000ef8:	f800283a 	ret

04000efc <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
 4000efc:	defffd04 	addi	sp,sp,-12
 4000f00:	df000215 	stw	fp,8(sp)
 4000f04:	df000204 	addi	fp,sp,8
 4000f08:	e13ffe15 	stw	r4,-8(fp)
 4000f0c:	2805883a 	mov	r2,r5
 4000f10:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
 4000f14:	e0bfff03 	ldbu	r2,-4(fp)
 4000f18:	d0b23545 	stb	r2,-14123(gp)
}
 4000f1c:	0001883a 	nop
 4000f20:	e037883a 	mov	sp,fp
 4000f24:	df000017 	ldw	fp,0(sp)
 4000f28:	dec00104 	addi	sp,sp,4
 4000f2c:	f800283a 	ret

04000f30 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 4000f30:	defff804 	addi	sp,sp,-32
 4000f34:	dfc00715 	stw	ra,28(sp)
 4000f38:	df000615 	stw	fp,24(sp)
 4000f3c:	df000604 	addi	fp,sp,24
 4000f40:	e13ffd15 	stw	r4,-12(fp)
 4000f44:	2807883a 	mov	r3,r5
 4000f48:	3005883a 	mov	r2,r6
 4000f4c:	e0fffe05 	stb	r3,-8(fp)
 4000f50:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 4000f54:	e0bffd17 	ldw	r2,-12(fp)
 4000f58:	e0fffe03 	ldbu	r3,-8(fp)
 4000f5c:	180b883a 	mov	r5,r3
 4000f60:	1009883a 	mov	r4,r2
 4000f64:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4000f68:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
 4000f6c:	e0bffc17 	ldw	r2,-16(fp)
 4000f70:	10000c26 	beq	r2,zero,4000fa4 <_ZN3USB14getEpInfoEntryEhh+0x74>
 4000f74:	e0bffc17 	ldw	r2,-16(fp)
 4000f78:	10c00003 	ldbu	r3,0(r2)
 4000f7c:	11000043 	ldbu	r4,1(r2)
 4000f80:	2008923a 	slli	r4,r4,8
 4000f84:	20c6b03a 	or	r3,r4,r3
 4000f88:	11000083 	ldbu	r4,2(r2)
 4000f8c:	2008943a 	slli	r4,r4,16
 4000f90:	20c6b03a 	or	r3,r4,r3
 4000f94:	108000c3 	ldbu	r2,3(r2)
 4000f98:	1004963a 	slli	r2,r2,24
 4000f9c:	10c4b03a 	or	r2,r2,r3
 4000fa0:	1000021e 	bne	r2,zero,4000fac <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
 4000fa4:	0005883a 	mov	r2,zero
 4000fa8:	00002106 	br	4001030 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
 4000fac:	e0bffc17 	ldw	r2,-16(fp)
 4000fb0:	10c00003 	ldbu	r3,0(r2)
 4000fb4:	11000043 	ldbu	r4,1(r2)
 4000fb8:	2008923a 	slli	r4,r4,8
 4000fbc:	20c6b03a 	or	r3,r4,r3
 4000fc0:	11000083 	ldbu	r4,2(r2)
 4000fc4:	2008943a 	slli	r4,r4,16
 4000fc8:	20c6b03a 	or	r3,r4,r3
 4000fcc:	108000c3 	ldbu	r2,3(r2)
 4000fd0:	1004963a 	slli	r2,r2,24
 4000fd4:	10c4b03a 	or	r2,r2,r3
 4000fd8:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
 4000fdc:	e03ffb05 	stb	zero,-20(fp)
 4000fe0:	e0bffc17 	ldw	r2,-16(fp)
 4000fe4:	10800143 	ldbu	r2,5(r2)
 4000fe8:	10803fcc 	andi	r2,r2,255
 4000fec:	e0fffb03 	ldbu	r3,-20(fp)
 4000ff0:	18800e2e 	bgeu	r3,r2,400102c <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
 4000ff4:	e0bffa17 	ldw	r2,-24(fp)
 4000ff8:	10800003 	ldbu	r2,0(r2)
 4000ffc:	10c03fcc 	andi	r3,r2,255
 4001000:	e0bfff03 	ldbu	r2,-4(fp)
 4001004:	1880021e 	bne	r3,r2,4001010 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
 4001008:	e0bffa17 	ldw	r2,-24(fp)
 400100c:	00000806 	br	4001030 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
 4001010:	e0bffa17 	ldw	r2,-24(fp)
 4001014:	108000c4 	addi	r2,r2,3
 4001018:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
 400101c:	e0bffb03 	ldbu	r2,-20(fp)
 4001020:	10800044 	addi	r2,r2,1
 4001024:	e0bffb05 	stb	r2,-20(fp)
 4001028:	003fed06 	br	4000fe0 <__alt_mem_onchip_memory2_0+0xfbfffd60>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
 400102c:	0005883a 	mov	r2,zero
}
 4001030:	e037883a 	mov	sp,fp
 4001034:	dfc00117 	ldw	ra,4(sp)
 4001038:	df000017 	ldw	fp,0(sp)
 400103c:	dec00204 	addi	sp,sp,8
 4001040:	f800283a 	ret

04001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 4001044:	defff904 	addi	sp,sp,-28
 4001048:	dfc00615 	stw	ra,24(sp)
 400104c:	df000515 	stw	fp,20(sp)
 4001050:	df000504 	addi	fp,sp,20
 4001054:	e13ffc15 	stw	r4,-16(fp)
 4001058:	2807883a 	mov	r3,r5
 400105c:	3005883a 	mov	r2,r6
 4001060:	e1ffff15 	stw	r7,-4(fp)
 4001064:	e0fffd05 	stb	r3,-12(fp)
 4001068:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
 400106c:	e0bfff17 	ldw	r2,-4(fp)
 4001070:	1000021e 	bne	r2,zero,400107c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
 4001074:	00bff604 	movi	r2,-40
 4001078:	00003406 	br	400114c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 400107c:	e0bffc17 	ldw	r2,-16(fp)
 4001080:	e0fffd03 	ldbu	r3,-12(fp)
 4001084:	180b883a 	mov	r5,r3
 4001088:	1009883a 	mov	r4,r2
 400108c:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4001090:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
 4001094:	e0bffb17 	ldw	r2,-20(fp)
 4001098:	1000021e 	bne	r2,zero,40010a4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 400109c:	00bff584 	movi	r2,-42
 40010a0:	00002a06 	br	400114c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
 40010a4:	e0bffb17 	ldw	r2,-20(fp)
 40010a8:	e0fffd03 	ldbu	r3,-12(fp)
 40010ac:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
 40010b0:	e0bffb17 	ldw	r2,-20(fp)
 40010b4:	e0ffff17 	ldw	r3,-4(fp)
 40010b8:	19403fcc 	andi	r5,r3,255
 40010bc:	10c00003 	ldbu	r3,0(r2)
 40010c0:	1806703a 	and	r3,r3,zero
 40010c4:	1809883a 	mov	r4,r3
 40010c8:	2807883a 	mov	r3,r5
 40010cc:	20c6b03a 	or	r3,r4,r3
 40010d0:	10c00005 	stb	r3,0(r2)
 40010d4:	e0ffff17 	ldw	r3,-4(fp)
 40010d8:	1806d23a 	srli	r3,r3,8
 40010dc:	19403fcc 	andi	r5,r3,255
 40010e0:	10c00043 	ldbu	r3,1(r2)
 40010e4:	1806703a 	and	r3,r3,zero
 40010e8:	1809883a 	mov	r4,r3
 40010ec:	2807883a 	mov	r3,r5
 40010f0:	20c6b03a 	or	r3,r4,r3
 40010f4:	10c00045 	stb	r3,1(r2)
 40010f8:	e0ffff17 	ldw	r3,-4(fp)
 40010fc:	1806d43a 	srli	r3,r3,16
 4001100:	19403fcc 	andi	r5,r3,255
 4001104:	10c00083 	ldbu	r3,2(r2)
 4001108:	1806703a 	and	r3,r3,zero
 400110c:	1809883a 	mov	r4,r3
 4001110:	2807883a 	mov	r3,r5
 4001114:	20c6b03a 	or	r3,r4,r3
 4001118:	10c00085 	stb	r3,2(r2)
 400111c:	e0ffff17 	ldw	r3,-4(fp)
 4001120:	180ad63a 	srli	r5,r3,24
 4001124:	10c000c3 	ldbu	r3,3(r2)
 4001128:	1806703a 	and	r3,r3,zero
 400112c:	1809883a 	mov	r4,r3
 4001130:	2807883a 	mov	r3,r5
 4001134:	20c6b03a 	or	r3,r4,r3
 4001138:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
 400113c:	e0bffb17 	ldw	r2,-20(fp)
 4001140:	e0fffe03 	ldbu	r3,-8(fp)
 4001144:	10c00145 	stb	r3,5(r2)

        return 0;
 4001148:	0005883a 	mov	r2,zero
}
 400114c:	e037883a 	mov	sp,fp
 4001150:	dfc00117 	ldw	ra,4(sp)
 4001154:	df000017 	ldw	fp,0(sp)
 4001158:	dec00204 	addi	sp,sp,8
 400115c:	f800283a 	ret

04001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 4001160:	defff804 	addi	sp,sp,-32
 4001164:	dfc00715 	stw	ra,28(sp)
 4001168:	df000615 	stw	fp,24(sp)
 400116c:	df000604 	addi	fp,sp,24
 4001170:	e13ffc15 	stw	r4,-16(fp)
 4001174:	2807883a 	mov	r3,r5
 4001178:	3005883a 	mov	r2,r6
 400117c:	e1ffff15 	stw	r7,-4(fp)
 4001180:	e0fffd05 	stb	r3,-12(fp)
 4001184:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 4001188:	e0bffc17 	ldw	r2,-16(fp)
 400118c:	e0fffd03 	ldbu	r3,-12(fp)
 4001190:	180b883a 	mov	r5,r3
 4001194:	1009883a 	mov	r4,r2
 4001198:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 400119c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
 40011a0:	e0bffa17 	ldw	r2,-24(fp)
 40011a4:	1000021e 	bne	r2,zero,40011b0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40011a8:	00bff584 	movi	r2,-42
 40011ac:	00004a06 	br	40012d8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
 40011b0:	e0bffa17 	ldw	r2,-24(fp)
 40011b4:	10c00003 	ldbu	r3,0(r2)
 40011b8:	11000043 	ldbu	r4,1(r2)
 40011bc:	2008923a 	slli	r4,r4,8
 40011c0:	20c6b03a 	or	r3,r4,r3
 40011c4:	11000083 	ldbu	r4,2(r2)
 40011c8:	2008943a 	slli	r4,r4,16
 40011cc:	20c6b03a 	or	r3,r4,r3
 40011d0:	108000c3 	ldbu	r2,3(r2)
 40011d4:	1004963a 	slli	r2,r2,24
 40011d8:	10c4b03a 	or	r2,r2,r3
 40011dc:	1000021e 	bne	r2,zero,40011e8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
 40011e0:	00bff5c4 	movi	r2,-41
 40011e4:	00003c06 	br	40012d8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
 40011e8:	e0bffd03 	ldbu	r2,-12(fp)
 40011ec:	e0fffe03 	ldbu	r3,-8(fp)
 40011f0:	180d883a 	mov	r6,r3
 40011f4:	100b883a 	mov	r5,r2
 40011f8:	e13ffc17 	ldw	r4,-16(fp)
 40011fc:	4000f300 	call	4000f30 <_ZN3USB14getEpInfoEntryEhh>
 4001200:	1007883a 	mov	r3,r2
 4001204:	e0bfff17 	ldw	r2,-4(fp)
 4001208:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
 400120c:	e0bfff17 	ldw	r2,-4(fp)
 4001210:	10800017 	ldw	r2,0(r2)
 4001214:	1000021e 	bne	r2,zero,4001220 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 4001218:	00bff6c4 	movi	r2,-37
 400121c:	00002e06 	br	40012d8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 4001220:	e0bfff17 	ldw	r2,-4(fp)
 4001224:	10800017 	ldw	r2,0(r2)
 4001228:	10800083 	ldbu	r2,2(r2)
 400122c:	1004d0ba 	srli	r2,r2,2
 4001230:	10803fcc 	andi	r2,r2,255
 4001234:	10c00410 	cmplti	r3,r2,16
 4001238:	1800011e 	bne	r3,zero,4001240 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
 400123c:	008003c4 	movi	r2,15
 4001240:	00c00044 	movi	r3,1
 4001244:	1884983a 	sll	r2,r3,r2
 4001248:	1007883a 	mov	r3,r2
 400124c:	e0800217 	ldw	r2,8(fp)
 4001250:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
 4001254:	e0800217 	ldw	r2,8(fp)
 4001258:	1080000b 	ldhu	r2,0(r2)
 400125c:	10bfffc4 	addi	r2,r2,-1
 4001260:	1007883a 	mov	r3,r2
 4001264:	e0800217 	ldw	r2,8(fp)
 4001268:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 400126c:	e0bffd03 	ldbu	r2,-12(fp)
 4001270:	100d883a 	mov	r6,r2
 4001274:	01403804 	movi	r5,224
 4001278:	e13ffc17 	ldw	r4,-16(fp)
 400127c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
 4001280:	01403604 	movi	r5,216
 4001284:	e13ffc17 	ldw	r4,-16(fp)
 4001288:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 400128c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 4001290:	e0bffa17 	ldw	r2,-24(fp)
 4001294:	10800183 	ldbu	r2,6(r2)
 4001298:	10803fcc 	andi	r2,r2,255
 400129c:	10000726 	beq	r2,zero,40012bc <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
 40012a0:	e0bffc17 	ldw	r2,-16(fp)
 40012a4:	10c02e03 	ldbu	r3,184(r2)
 40012a8:	e0bffb03 	ldbu	r2,-20(fp)
 40012ac:	1884b03a 	or	r2,r3,r2
 40012b0:	10800094 	ori	r2,r2,2
 40012b4:	10803fcc 	andi	r2,r2,255
 40012b8:	00000206 	br	40012c4 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
 40012bc:	e0bffb03 	ldbu	r2,-20(fp)
 40012c0:	10803e4c 	andi	r2,r2,249
 40012c4:	100d883a 	mov	r6,r2
 40012c8:	01403604 	movi	r5,216
 40012cc:	e13ffc17 	ldw	r4,-16(fp)
 40012d0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        return 0;
 40012d4:	0005883a 	mov	r2,zero
}
 40012d8:	e037883a 	mov	sp,fp
 40012dc:	dfc00117 	ldw	ra,4(sp)
 40012e0:	df000017 	ldw	fp,0(sp)
 40012e4:	dec00204 	addi	sp,sp,8
 40012e8:	f800283a 	ret

040012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 40012ec:	deffeb04 	addi	sp,sp,-84
 40012f0:	dfc01415 	stw	ra,80(sp)
 40012f4:	df001315 	stw	fp,76(sp)
 40012f8:	dc001215 	stw	r16,72(sp)
 40012fc:	df001304 	addi	fp,sp,76
 4001300:	e13ff515 	stw	r4,-44(fp)
 4001304:	2815883a 	mov	r10,r5
 4001308:	3013883a 	mov	r9,r6
 400130c:	3811883a 	mov	r8,r7
 4001310:	e1c00217 	ldw	r7,8(fp)
 4001314:	e1800317 	ldw	r6,12(fp)
 4001318:	e1400417 	ldw	r5,16(fp)
 400131c:	e1000517 	ldw	r4,20(fp)
 4001320:	e0c00617 	ldw	r3,24(fp)
 4001324:	e0800717 	ldw	r2,28(fp)
 4001328:	e2bff605 	stb	r10,-40(fp)
 400132c:	e27ff705 	stb	r9,-36(fp)
 4001330:	e23ff805 	stb	r8,-32(fp)
 4001334:	e1fff905 	stb	r7,-28(fp)
 4001338:	e1bffa05 	stb	r6,-24(fp)
 400133c:	e17ffb05 	stb	r5,-20(fp)
 4001340:	e13ffc0d 	sth	r4,-16(fp)
 4001344:	e0fffd0d 	sth	r3,-12(fp)
 4001348:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
 400134c:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 4001350:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
 4001354:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 4001358:	e0fff603 	ldbu	r3,-40(fp)
 400135c:	e13ff703 	ldbu	r4,-36(fp)
 4001360:	e17ff304 	addi	r5,fp,-52
 4001364:	e0bff404 	addi	r2,fp,-48
 4001368:	d8800015 	stw	r2,0(sp)
 400136c:	280f883a 	mov	r7,r5
 4001370:	200d883a 	mov	r6,r4
 4001374:	180b883a 	mov	r5,r3
 4001378:	e13ff517 	ldw	r4,-44(fp)
 400137c:	40011600 	call	4001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 4001380:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
 4001384:	e0bfef03 	ldbu	r2,-68(fp)
 4001388:	10000226 	beq	r2,zero,4001394 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
 400138c:	e0bfef03 	ldbu	r2,-68(fp)
 4001390:	00009406 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
 4001394:	e0bff803 	ldbu	r2,-32(fp)
 4001398:	1080200c 	andi	r2,r2,128
 400139c:	0084803a 	cmplt	r2,zero,r2
 40013a0:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 40013a4:	e0bff803 	ldbu	r2,-32(fp)
 40013a8:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
 40013ac:	e0bff903 	ldbu	r2,-28(fp)
 40013b0:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
 40013b4:	e0bffa03 	ldbu	r2,-24(fp)
 40013b8:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
 40013bc:	e0bffb03 	ldbu	r2,-20(fp)
 40013c0:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
 40013c4:	e0bffc0b 	ldhu	r2,-16(fp)
 40013c8:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
 40013cc:	e0bffd0b 	ldhu	r2,-12(fp)
 40013d0:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 40013d4:	e0bff104 	addi	r2,fp,-60
 40013d8:	100f883a 	mov	r7,r2
 40013dc:	01800204 	movi	r6,8
 40013e0:	01400804 	movi	r5,32
 40013e4:	e13ff517 	ldw	r4,-44(fp)
 40013e8:	40094400 	call	4009440 <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 40013ec:	e0bff703 	ldbu	r2,-36(fp)
 40013f0:	e0fff40b 	ldhu	r3,-48(fp)
 40013f4:	18ffffcc 	andi	r3,r3,65535
 40013f8:	180f883a 	mov	r7,r3
 40013fc:	100d883a 	mov	r6,r2
 4001400:	01400404 	movi	r5,16
 4001404:	e13ff517 	ldw	r4,-44(fp)
 4001408:	4001dec0 	call	4001dec <_ZN3USB11dispatchPktEhht>
 400140c:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
 4001410:	e0bfef03 	ldbu	r2,-68(fp)
 4001414:	10000226 	beq	r2,zero,4001420 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
 4001418:	e0bfef03 	ldbu	r2,-68(fp)
 400141c:	00007106 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
 4001420:	e0800817 	ldw	r2,32(fp)
 4001424:	10006226 	beq	r2,zero,40015b0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
 4001428:	e0bff003 	ldbu	r2,-64(fp)
 400142c:	10004a26 	beq	r2,zero,4001558 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
 4001430:	e0bffd0b 	ldhu	r2,-12(fp)
 4001434:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 4001438:	e0bff317 	ldw	r2,-52(fp)
 400143c:	10c00083 	ldbu	r3,2(r2)
 4001440:	18c00094 	ori	r3,r3,2
 4001444:	10c00085 	stb	r3,2(r2)

                        while(left) {
 4001448:	e0bfef8b 	ldhu	r2,-66(fp)
 400144c:	10005426 	beq	r2,zero,40015a0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 4001450:	e0bffe0b 	ldhu	r2,-8(fp)
 4001454:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 4001458:	e0fff317 	ldw	r3,-52(fp)
 400145c:	e0bff40b 	ldhu	r2,-48(fp)
 4001460:	113fffcc 	andi	r4,r2,65535
 4001464:	e17ff484 	addi	r5,fp,-46
 4001468:	d8000115 	stw	zero,4(sp)
 400146c:	e0800817 	ldw	r2,32(fp)
 4001470:	d8800015 	stw	r2,0(sp)
 4001474:	280f883a 	mov	r7,r5
 4001478:	200d883a 	mov	r6,r4
 400147c:	180b883a 	mov	r5,r3
 4001480:	e13ff517 	ldw	r4,-44(fp)
 4001484:	40016e40 	call	40016e4 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 4001488:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
 400148c:	e0bfef03 	ldbu	r2,-68(fp)
 4001490:	10800198 	cmpnei	r2,r2,6
 4001494:	1000111e 	bne	r2,zero,40014dc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 4001498:	e43ff317 	ldw	r16,-52(fp)
 400149c:	01403e04 	movi	r5,248
 40014a0:	e13ff517 	ldw	r4,-44(fp)
 40014a4:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 40014a8:	10803fcc 	andi	r2,r2,255
 40014ac:	1080080c 	andi	r2,r2,32
 40014b0:	1005003a 	cmpeq	r2,r2,zero
 40014b4:	1080004c 	andi	r2,r2,1
 40014b8:	1089883a 	add	r4,r2,r2
 40014bc:	80c00083 	ldbu	r3,2(r16)
 40014c0:	00bfff44 	movi	r2,-3
 40014c4:	1884703a 	and	r2,r3,r2
 40014c8:	1007883a 	mov	r3,r2
 40014cc:	2005883a 	mov	r2,r4
 40014d0:	1884b03a 	or	r2,r3,r2
 40014d4:	80800085 	stb	r2,2(r16)
 40014d8:	003fdb06 	br	4001448 <__alt_mem_onchip_memory2_0+0xfc0001c8>
                                        continue;
                                }

                                if(rcode)
 40014dc:	e0bfef03 	ldbu	r2,-68(fp)
 40014e0:	10000226 	beq	r2,zero,40014ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
 40014e4:	e0bfef03 	ldbu	r2,-68(fp)
 40014e8:	00003e06 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 40014ec:	e0bfef03 	ldbu	r2,-68(fp)
 40014f0:	1000101e 	bne	r2,zero,4001534 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
 40014f4:	e0800917 	ldw	r2,36(fp)
 40014f8:	10000e26 	beq	r2,zero,4001534 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 40014fc:	e0800917 	ldw	r2,36(fp)
 4001500:	10800017 	ldw	r2,0(r2)
 4001504:	10800017 	ldw	r2,0(r2)
 4001508:	e0fff48b 	ldhu	r3,-46(fp)
 400150c:	197fffcc 	andi	r5,r3,65535
 4001510:	e13ffd0b 	ldhu	r4,-12(fp)
 4001514:	e0ffef8b 	ldhu	r3,-66(fp)
 4001518:	20c7c83a 	sub	r3,r4,r3
 400151c:	e0fff08d 	sth	r3,-62(fp)
 4001520:	e0fff084 	addi	r3,fp,-62
 4001524:	180f883a 	mov	r7,r3
 4001528:	e1800817 	ldw	r6,32(fp)
 400152c:	e1000917 	ldw	r4,36(fp)
 4001530:	103ee83a 	callr	r2

                                left -= read;
 4001534:	e0bff48b 	ldhu	r2,-46(fp)
 4001538:	e0ffef8b 	ldhu	r3,-66(fp)
 400153c:	1885c83a 	sub	r2,r3,r2
 4001540:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
 4001544:	e0bff48b 	ldhu	r2,-46(fp)
 4001548:	10ffffcc 	andi	r3,r2,65535
 400154c:	e0bffe0b 	ldhu	r2,-8(fp)
 4001550:	18801236 	bltu	r3,r2,400159c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
 4001554:	003fbc06 	br	4001448 <__alt_mem_onchip_memory2_0+0xfc0001c8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 4001558:	e0bff317 	ldw	r2,-52(fp)
 400155c:	10c00083 	ldbu	r3,2(r2)
 4001560:	18c00054 	ori	r3,r3,1
 4001564:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 4001568:	e0fff317 	ldw	r3,-52(fp)
 400156c:	e0bff40b 	ldhu	r2,-48(fp)
 4001570:	113fffcc 	andi	r4,r2,65535
 4001574:	e17ffe0b 	ldhu	r5,-8(fp)
 4001578:	e0800817 	ldw	r2,32(fp)
 400157c:	d8800015 	stw	r2,0(sp)
 4001580:	280f883a 	mov	r7,r5
 4001584:	200d883a 	mov	r6,r4
 4001588:	180b883a 	mov	r5,r3
 400158c:	e13ff517 	ldw	r4,-44(fp)
 4001590:	4001a400 	call	4001a40 <_ZN3USB11OutTransferEP6EpInfottPh>
 4001594:	e0bfef05 	stb	r2,-68(fp)
 4001598:	00000106 	br	40015a0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
 400159c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
 40015a0:	e0bfef03 	ldbu	r2,-68(fp)
 40015a4:	10000226 	beq	r2,zero,40015b0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
 40015a8:	e0bfef03 	ldbu	r2,-68(fp)
 40015ac:	00000d06 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 40015b0:	e0bff003 	ldbu	r2,-64(fp)
 40015b4:	10000226 	beq	r2,zero,40015c0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
 40015b8:	00802804 	movi	r2,160
 40015bc:	00000106 	br	40015c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
 40015c0:	00802004 	movi	r2,128
 40015c4:	e0fff703 	ldbu	r3,-36(fp)
 40015c8:	e13ff40b 	ldhu	r4,-48(fp)
 40015cc:	213fffcc 	andi	r4,r4,65535
 40015d0:	200f883a 	mov	r7,r4
 40015d4:	180d883a 	mov	r6,r3
 40015d8:	100b883a 	mov	r5,r2
 40015dc:	e13ff517 	ldw	r4,-44(fp)
 40015e0:	4001dec0 	call	4001dec <_ZN3USB11dispatchPktEhht>
}
 40015e4:	e6ffff04 	addi	sp,fp,-4
 40015e8:	dfc00217 	ldw	ra,8(sp)
 40015ec:	df000117 	ldw	fp,4(sp)
 40015f0:	dc000017 	ldw	r16,0(sp)
 40015f4:	dec00304 	addi	sp,sp,12
 40015f8:	f800283a 	ret

040015fc <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 40015fc:	defff404 	addi	sp,sp,-48
 4001600:	dfc00b15 	stw	ra,44(sp)
 4001604:	df000a15 	stw	fp,40(sp)
 4001608:	df000a04 	addi	fp,sp,40
 400160c:	e13ffb15 	stw	r4,-20(fp)
 4001610:	2809883a 	mov	r4,r5
 4001614:	3007883a 	mov	r3,r6
 4001618:	e1fffe15 	stw	r7,-8(fp)
 400161c:	e0800317 	ldw	r2,12(fp)
 4001620:	e13ffc05 	stb	r4,-16(fp)
 4001624:	e0fffd05 	stb	r3,-12(fp)
 4001628:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
 400162c:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
 4001630:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 4001634:	e0fffc03 	ldbu	r3,-16(fp)
 4001638:	e13ffd03 	ldbu	r4,-12(fp)
 400163c:	e17ff904 	addi	r5,fp,-28
 4001640:	e0bffa04 	addi	r2,fp,-24
 4001644:	d8800015 	stw	r2,0(sp)
 4001648:	280f883a 	mov	r7,r5
 400164c:	200d883a 	mov	r6,r4
 4001650:	180b883a 	mov	r5,r3
 4001654:	e13ffb17 	ldw	r4,-20(fp)
 4001658:	40011600 	call	4001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 400165c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
 4001660:	e0bff803 	ldbu	r2,-32(fp)
 4001664:	10000e26 	beq	r2,zero,40016a0 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 4001668:	e0bff803 	ldbu	r2,-32(fp)
 400166c:	01402044 	movi	r5,129
 4001670:	1009883a 	mov	r4,r2
 4001674:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 4001678:	e0bffc03 	ldbu	r2,-16(fp)
 400167c:	01402044 	movi	r5,129
 4001680:	1009883a 	mov	r4,r2
 4001684:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 4001688:	e0bffd03 	ldbu	r2,-12(fp)
 400168c:	01402044 	movi	r5,129
 4001690:	1009883a 	mov	r4,r2
 4001694:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 4001698:	e0bff803 	ldbu	r2,-32(fp)
 400169c:	00000c06 	br	40016d0 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 40016a0:	e0fff917 	ldw	r3,-28(fp)
 40016a4:	e0bffa0b 	ldhu	r2,-24(fp)
 40016a8:	113fffcc 	andi	r4,r2,65535
 40016ac:	e0bfff03 	ldbu	r2,-4(fp)
 40016b0:	d8800115 	stw	r2,4(sp)
 40016b4:	e0800217 	ldw	r2,8(fp)
 40016b8:	d8800015 	stw	r2,0(sp)
 40016bc:	e1fffe17 	ldw	r7,-8(fp)
 40016c0:	200d883a 	mov	r6,r4
 40016c4:	180b883a 	mov	r5,r3
 40016c8:	e13ffb17 	ldw	r4,-20(fp)
 40016cc:	40016e40 	call	40016e4 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
 40016d0:	e037883a 	mov	sp,fp
 40016d4:	dfc00117 	ldw	ra,4(sp)
 40016d8:	df000017 	ldw	fp,0(sp)
 40016dc:	dec00204 	addi	sp,sp,8
 40016e0:	f800283a 	ret

040016e4 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 40016e4:	defff704 	addi	sp,sp,-36
 40016e8:	dfc00815 	stw	ra,32(sp)
 40016ec:	df000715 	stw	fp,28(sp)
 40016f0:	df000704 	addi	fp,sp,28
 40016f4:	e13ffb15 	stw	r4,-20(fp)
 40016f8:	e17ffc15 	stw	r5,-16(fp)
 40016fc:	3007883a 	mov	r3,r6
 4001700:	e1fffe15 	stw	r7,-8(fp)
 4001704:	e0800317 	ldw	r2,12(fp)
 4001708:	e0fffd0d 	sth	r3,-12(fp)
 400170c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
 4001710:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 4001714:	e0bffe17 	ldw	r2,-8(fp)
 4001718:	1080000b 	ldhu	r2,0(r2)
 400171c:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 4001720:	e0bffc17 	ldw	r2,-16(fp)
 4001724:	10800043 	ldbu	r2,1(r2)
 4001728:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
 400172c:	e0bffe17 	ldw	r2,-8(fp)
 4001730:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 4001734:	e0bffc17 	ldw	r2,-16(fp)
 4001738:	10800083 	ldbu	r2,2(r2)
 400173c:	1080008c 	andi	r2,r2,2
 4001740:	10803fcc 	andi	r2,r2,255
 4001744:	10000226 	beq	r2,zero,4001750 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
 4001748:	00800804 	movi	r2,32
 400174c:	00000106 	br	4001754 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
 4001750:	00800404 	movi	r2,16
 4001754:	100d883a 	mov	r6,r2
 4001758:	01403a04 	movi	r5,232
 400175c:	e13ffb17 	ldw	r4,-20(fp)
 4001760:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 4001764:	e0bffc17 	ldw	r2,-16(fp)
 4001768:	10800003 	ldbu	r2,0(r2)
 400176c:	10803fcc 	andi	r2,r2,255
 4001770:	e0fffd0b 	ldhu	r3,-12(fp)
 4001774:	180f883a 	mov	r7,r3
 4001778:	100d883a 	mov	r6,r2
 400177c:	000b883a 	mov	r5,zero
 4001780:	e13ffb17 	ldw	r4,-20(fp)
 4001784:	4001dec0 	call	4001dec <_ZN3USB11dispatchPktEhht>
 4001788:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
 400178c:	e0bff903 	ldbu	r2,-28(fp)
 4001790:	10800198 	cmpnei	r2,r2,6
 4001794:	10001e1e 	bne	r2,zero,4001810 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 4001798:	01403e04 	movi	r5,248
 400179c:	e13ffb17 	ldw	r4,-20(fp)
 40017a0:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 40017a4:	10803fcc 	andi	r2,r2,255
 40017a8:	1080040c 	andi	r2,r2,16
 40017ac:	1005003a 	cmpeq	r2,r2,zero
 40017b0:	1007883a 	mov	r3,r2
 40017b4:	e0bffc17 	ldw	r2,-16(fp)
 40017b8:	18c0004c 	andi	r3,r3,1
 40017bc:	18cb883a 	add	r5,r3,r3
 40017c0:	11000083 	ldbu	r4,2(r2)
 40017c4:	00ffff44 	movi	r3,-3
 40017c8:	20c6703a 	and	r3,r4,r3
 40017cc:	1809883a 	mov	r4,r3
 40017d0:	2807883a 	mov	r3,r5
 40017d4:	20c6b03a 	or	r3,r4,r3
 40017d8:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 40017dc:	e0bffc17 	ldw	r2,-16(fp)
 40017e0:	10800083 	ldbu	r2,2(r2)
 40017e4:	1080008c 	andi	r2,r2,2
 40017e8:	10803fcc 	andi	r2,r2,255
 40017ec:	10000226 	beq	r2,zero,40017f8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
 40017f0:	00800804 	movi	r2,32
 40017f4:	00000106 	br	40017fc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
 40017f8:	00800404 	movi	r2,16
 40017fc:	100d883a 	mov	r6,r2
 4001800:	01403a04 	movi	r5,232
 4001804:	e13ffb17 	ldw	r4,-20(fp)
 4001808:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        continue;
 400180c:	00005806 	br	4001970 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
 4001810:	e0bff903 	ldbu	r2,-28(fp)
 4001814:	1000571e 	bne	r2,zero,4001974 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 4001818:	01403204 	movi	r5,200
 400181c:	e13ffb17 	ldw	r4,-20(fp)
 4001820:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001824:	10803fcc 	andi	r2,r2,255
 4001828:	1080010c 	andi	r2,r2,4
 400182c:	1005003a 	cmpeq	r2,r2,zero
 4001830:	10803fcc 	andi	r2,r2,255
 4001834:	10000326 	beq	r2,zero,4001844 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 4001838:	00bffc04 	movi	r2,-16
 400183c:	e0bff905 	stb	r2,-28(fp)
                        break;
 4001840:	00004d06 	br	4001978 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 4001844:	01400c04 	movi	r5,48
 4001848:	e13ffb17 	ldw	r4,-20(fp)
 400184c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001850:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 4001854:	e0bff943 	ldbu	r2,-27(fp)
 4001858:	10bfffcc 	andi	r2,r2,65535
 400185c:	e0fffa0b 	ldhu	r3,-24(fp)
 4001860:	1880022e 	bgeu	r3,r2,400186c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 4001864:	e0bffa0b 	ldhu	r2,-24(fp)
 4001868:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 400186c:	e0bffe17 	ldw	r2,-8(fp)
 4001870:	1080000b 	ldhu	r2,0(r2)
 4001874:	1007883a 	mov	r3,r2
 4001878:	e0bffa0b 	ldhu	r2,-24(fp)
 400187c:	10c5c83a 	sub	r2,r2,r3
 4001880:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
 4001884:	e0bff98f 	ldh	r2,-26(fp)
 4001888:	1000010e 	bge	r2,zero,4001890 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
 400188c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 4001890:	e0bff943 	ldbu	r2,-27(fp)
 4001894:	e0fff98f 	ldh	r3,-26(fp)
 4001898:	1880010e 	bge	r3,r2,40018a0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
 400189c:	1805883a 	mov	r2,r3
 40018a0:	10803fcc 	andi	r2,r2,255
 40018a4:	e1c00217 	ldw	r7,8(fp)
 40018a8:	100d883a 	mov	r6,r2
 40018ac:	01400204 	movi	r5,8
 40018b0:	e13ffb17 	ldw	r4,-20(fp)
 40018b4:	40096600 	call	4009660 <_ZN8MAX3421e7bytesRdEhhPh>
 40018b8:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 40018bc:	01800104 	movi	r6,4
 40018c0:	01403204 	movi	r5,200
 40018c4:	e13ffb17 	ldw	r4,-20(fp)
 40018c8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 40018cc:	e0bffe17 	ldw	r2,-8(fp)
 40018d0:	10c0000b 	ldhu	r3,0(r2)
 40018d4:	e0bff943 	ldbu	r2,-27(fp)
 40018d8:	1885883a 	add	r2,r3,r2
 40018dc:	1007883a 	mov	r3,r2
 40018e0:	e0bffe17 	ldw	r2,-8(fp)
 40018e4:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 40018e8:	e0fff943 	ldbu	r3,-27(fp)
 40018ec:	e0bffa83 	ldbu	r2,-22(fp)
 40018f0:	18800536 	bltu	r3,r2,4001908 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
 40018f4:	e0bffe17 	ldw	r2,-8(fp)
 40018f8:	1080000b 	ldhu	r2,0(r2)
 40018fc:	10ffffcc 	andi	r3,r2,65535
 4001900:	e0bffa0b 	ldhu	r2,-24(fp)
 4001904:	18801536 	bltu	r3,r2,400195c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 4001908:	01403e04 	movi	r5,248
 400190c:	e13ffb17 	ldw	r4,-20(fp)
 4001910:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001914:	10803fcc 	andi	r2,r2,255
 4001918:	1080040c 	andi	r2,r2,16
 400191c:	10000226 	beq	r2,zero,4001928 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
 4001920:	00c00044 	movi	r3,1
 4001924:	00000106 	br	400192c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
 4001928:	0007883a 	mov	r3,zero
 400192c:	e0bffc17 	ldw	r2,-16(fp)
 4001930:	18c0004c 	andi	r3,r3,1
 4001934:	18cb883a 	add	r5,r3,r3
 4001938:	11000083 	ldbu	r4,2(r2)
 400193c:	00ffff44 	movi	r3,-3
 4001940:	20c6703a 	and	r3,r4,r3
 4001944:	1809883a 	mov	r4,r3
 4001948:	2807883a 	mov	r3,r5
 400194c:	20c6b03a 	or	r3,r4,r3
 4001950:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
 4001954:	e03ff905 	stb	zero,-28(fp)
                        break;
 4001958:	00000706 	br	4001978 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
 400195c:	e0bfff03 	ldbu	r2,-4(fp)
 4001960:	103f8026 	beq	r2,zero,4001764 <__alt_mem_onchip_memory2_0+0xfc0004e4>
                        delay(bInterval); // Delay according to polling interval
 4001964:	e0bfff03 	ldbu	r2,-4(fp)
 4001968:	1009883a 	mov	r4,r2
 400196c:	4000dd40 	call	4000dd4 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
 4001970:	003f7c06 	br	4001764 <__alt_mem_onchip_memory2_0+0xfc0004e4>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
 4001974:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
 4001978:	e0bff903 	ldbu	r2,-28(fp)
}
 400197c:	e037883a 	mov	sp,fp
 4001980:	dfc00117 	ldw	ra,4(sp)
 4001984:	df000017 	ldw	fp,0(sp)
 4001988:	dec00204 	addi	sp,sp,8
 400198c:	f800283a 	ret

04001990 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 4001990:	defff604 	addi	sp,sp,-40
 4001994:	dfc00915 	stw	ra,36(sp)
 4001998:	df000815 	stw	fp,32(sp)
 400199c:	df000804 	addi	fp,sp,32
 40019a0:	e13ffc15 	stw	r4,-16(fp)
 40019a4:	2809883a 	mov	r4,r5
 40019a8:	3007883a 	mov	r3,r6
 40019ac:	3805883a 	mov	r2,r7
 40019b0:	e13ffd05 	stb	r4,-12(fp)
 40019b4:	e0fffe05 	stb	r3,-8(fp)
 40019b8:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
 40019bc:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
 40019c0:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 40019c4:	e0fffd03 	ldbu	r3,-12(fp)
 40019c8:	e13ffe03 	ldbu	r4,-8(fp)
 40019cc:	e17ffa04 	addi	r5,fp,-24
 40019d0:	e0bffb04 	addi	r2,fp,-20
 40019d4:	d8800015 	stw	r2,0(sp)
 40019d8:	280f883a 	mov	r7,r5
 40019dc:	200d883a 	mov	r6,r4
 40019e0:	180b883a 	mov	r5,r3
 40019e4:	e13ffc17 	ldw	r4,-16(fp)
 40019e8:	40011600 	call	4001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 40019ec:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
 40019f0:	e0bff903 	ldbu	r2,-28(fp)
 40019f4:	10000226 	beq	r2,zero,4001a00 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
 40019f8:	e0bff903 	ldbu	r2,-28(fp)
 40019fc:	00000b06 	br	4001a2c <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 4001a00:	e0fffa17 	ldw	r3,-24(fp)
 4001a04:	e0bffb0b 	ldhu	r2,-20(fp)
 4001a08:	113fffcc 	andi	r4,r2,65535
 4001a0c:	e17fff0b 	ldhu	r5,-4(fp)
 4001a10:	e0800217 	ldw	r2,8(fp)
 4001a14:	d8800015 	stw	r2,0(sp)
 4001a18:	280f883a 	mov	r7,r5
 4001a1c:	200d883a 	mov	r6,r4
 4001a20:	180b883a 	mov	r5,r3
 4001a24:	e13ffc17 	ldw	r4,-16(fp)
 4001a28:	4001a400 	call	4001a40 <_ZN3USB11OutTransferEP6EpInfottPh>
}
 4001a2c:	e037883a 	mov	sp,fp
 4001a30:	dfc00117 	ldw	ra,4(sp)
 4001a34:	df000017 	ldw	fp,0(sp)
 4001a38:	dec00204 	addi	sp,sp,8
 4001a3c:	f800283a 	ret

04001a40 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 4001a40:	defff404 	addi	sp,sp,-48
 4001a44:	dfc00b15 	stw	ra,44(sp)
 4001a48:	df000a15 	stw	fp,40(sp)
 4001a4c:	df000a04 	addi	fp,sp,40
 4001a50:	e13ffc15 	stw	r4,-16(fp)
 4001a54:	e17ffd15 	stw	r5,-12(fp)
 4001a58:	3007883a 	mov	r3,r6
 4001a5c:	3805883a 	mov	r2,r7
 4001a60:	e0fffe0d 	sth	r3,-8(fp)
 4001a64:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
 4001a68:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
 4001a6c:	e0800217 	ldw	r2,8(fp)
 4001a70:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 4001a74:	e0bfff0b 	ldhu	r2,-4(fp)
 4001a78:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
 4001a7c:	e0bffd17 	ldw	r2,-12(fp)
 4001a80:	10800043 	ldbu	r2,1(r2)
 4001a84:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
 4001a88:	e0bff903 	ldbu	r2,-28(fp)
 4001a8c:	10000326 	beq	r2,zero,4001a9c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 4001a90:	e0bff903 	ldbu	r2,-28(fp)
 4001a94:	10801070 	cmpltui	r2,r2,65
 4001a98:	1000021e 	bne	r2,zero,4001aa4 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 4001a9c:	00bff684 	movi	r2,-38
 4001aa0:	0000cd06 	br	4001dd8 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 4001aa4:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001aa8:	1084e204 	addi	r2,r2,5000
 4001aac:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 4001ab0:	e0bffd17 	ldw	r2,-12(fp)
 4001ab4:	10800083 	ldbu	r2,2(r2)
 4001ab8:	1080004c 	andi	r2,r2,1
 4001abc:	10803fcc 	andi	r2,r2,255
 4001ac0:	10000226 	beq	r2,zero,4001acc <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
 4001ac4:	00802004 	movi	r2,128
 4001ac8:	00000106 	br	4001ad0 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
 4001acc:	00801004 	movi	r2,64
 4001ad0:	100d883a 	mov	r6,r2
 4001ad4:	01403a04 	movi	r5,232
 4001ad8:	e13ffc17 	ldw	r4,-16(fp)
 4001adc:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
 4001ae0:	e0bff88b 	ldhu	r2,-30(fp)
 4001ae4:	1000a926 	beq	r2,zero,4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 4001ae8:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
 4001aec:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 4001af0:	e0bff903 	ldbu	r2,-28(fp)
 4001af4:	e17ff88b 	ldhu	r5,-30(fp)
 4001af8:	10ffffcc 	andi	r3,r2,65535
 4001afc:	293fffcc 	andi	r4,r5,65535
 4001b00:	20c0012e 	bgeu	r4,r3,4001b08 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
 4001b04:	2805883a 	mov	r2,r5
 4001b08:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 4001b0c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001b10:	10803fcc 	andi	r2,r2,255
 4001b14:	e1fff717 	ldw	r7,-36(fp)
 4001b18:	100d883a 	mov	r6,r2
 4001b1c:	01400404 	movi	r5,16
 4001b20:	e13ffc17 	ldw	r4,-16(fp)
 4001b24:	40094400 	call	4009440 <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 4001b28:	e0bffb0b 	ldhu	r2,-20(fp)
 4001b2c:	10803fcc 	andi	r2,r2,255
 4001b30:	100d883a 	mov	r6,r2
 4001b34:	01400e04 	movi	r5,56
 4001b38:	e13ffc17 	ldw	r4,-16(fp)
 4001b3c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 4001b40:	e0bffd17 	ldw	r2,-12(fp)
 4001b44:	10800003 	ldbu	r2,0(r2)
 4001b48:	10800814 	ori	r2,r2,32
 4001b4c:	10803fcc 	andi	r2,r2,255
 4001b50:	100d883a 	mov	r6,r2
 4001b54:	01403c04 	movi	r5,240
 4001b58:	e13ffc17 	ldw	r4,-16(fp)
 4001b5c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 4001b60:	01403204 	movi	r5,200
 4001b64:	e13ffc17 	ldw	r4,-16(fp)
 4001b68:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001b6c:	0084303a 	nor	r2,zero,r2
 4001b70:	10803fcc 	andi	r2,r2,255
 4001b74:	1004d1fa 	srli	r2,r2,7
 4001b78:	10803fcc 	andi	r2,r2,255
 4001b7c:	10000126 	beq	r2,zero,4001b84 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
 4001b80:	003ff706 	br	4001b60 <__alt_mem_onchip_memory2_0+0xfc0008e0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 4001b84:	01802004 	movi	r6,128
 4001b88:	01403204 	movi	r5,200
 4001b8c:	e13ffc17 	ldw	r4,-16(fp)
 4001b90:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 4001b94:	01403e04 	movi	r5,248
 4001b98:	e13ffc17 	ldw	r4,-16(fp)
 4001b9c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001ba0:	108003cc 	andi	r2,r2,15
 4001ba4:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 4001ba8:	e0bff603 	ldbu	r2,-40(fp)
 4001bac:	10000726 	beq	r2,zero,4001bcc <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 4001bb0:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001bb4:	1007883a 	mov	r3,r2
 4001bb8:	e0bffa17 	ldw	r2,-24(fp)
 4001bbc:	1885c83a 	sub	r2,r3,r2
 4001bc0:	1000020e 	bge	r2,zero,4001bcc <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 4001bc4:	00800044 	movi	r2,1
 4001bc8:	00000106 	br	4001bd0 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
 4001bcc:	0005883a 	mov	r2,zero
 4001bd0:	10803fcc 	andi	r2,r2,255
 4001bd4:	10006426 	beq	r2,zero,4001d68 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 4001bd8:	e0bff603 	ldbu	r2,-40(fp)
 4001bdc:	10c001a0 	cmpeqi	r3,r2,6
 4001be0:	1800151e 	bne	r3,zero,4001c38 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
 4001be4:	10c003a0 	cmpeqi	r3,r2,14
 4001be8:	18000c1e 	bne	r3,zero,4001c1c <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
 4001bec:	10800120 	cmpeqi	r2,r2,4
 4001bf0:	1000011e 	bne	r2,zero,4001bf8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 4001bf4:	00006506 	br	4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
 4001bf8:	e0bff80b 	ldhu	r2,-32(fp)
 4001bfc:	10800044 	addi	r2,r2,1
 4001c00:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
 4001c04:	e0bffe0b 	ldhu	r2,-8(fp)
 4001c08:	10002826 	beq	r2,zero,4001cac <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
 4001c0c:	e0fff80b 	ldhu	r3,-32(fp)
 4001c10:	e0bffe0b 	ldhu	r2,-8(fp)
 4001c14:	1880251e 	bne	r3,r2,4001cac <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
 4001c18:	00005c06 	br	4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
 4001c1c:	e0bff643 	ldbu	r2,-39(fp)
 4001c20:	10800044 	addi	r2,r2,1
 4001c24:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
 4001c28:	e0bff643 	ldbu	r2,-39(fp)
 4001c2c:	108000d8 	cmpnei	r2,r2,3
 4001c30:	1000201e 	bne	r2,zero,4001cb4 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
 4001c34:	00005506 	br	4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 4001c38:	01403e04 	movi	r5,248
 4001c3c:	e13ffc17 	ldw	r4,-16(fp)
 4001c40:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001c44:	10803fcc 	andi	r2,r2,255
 4001c48:	1080080c 	andi	r2,r2,32
 4001c4c:	1005003a 	cmpeq	r2,r2,zero
 4001c50:	1007883a 	mov	r3,r2
 4001c54:	e0bffd17 	ldw	r2,-12(fp)
 4001c58:	1940004c 	andi	r5,r3,1
 4001c5c:	11000083 	ldbu	r4,2(r2)
 4001c60:	00ffff84 	movi	r3,-2
 4001c64:	20c6703a 	and	r3,r4,r3
 4001c68:	1809883a 	mov	r4,r3
 4001c6c:	2807883a 	mov	r3,r5
 4001c70:	20c6b03a 	or	r3,r4,r3
 4001c74:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 4001c78:	e0bffd17 	ldw	r2,-12(fp)
 4001c7c:	10800083 	ldbu	r2,2(r2)
 4001c80:	1080004c 	andi	r2,r2,1
 4001c84:	10803fcc 	andi	r2,r2,255
 4001c88:	10000226 	beq	r2,zero,4001c94 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
 4001c8c:	00802004 	movi	r2,128
 4001c90:	00000106 	br	4001c98 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
 4001c94:	00801004 	movi	r2,64
 4001c98:	100d883a 	mov	r6,r2
 4001c9c:	01403a04 	movi	r5,232
 4001ca0:	e13ffc17 	ldw	r4,-16(fp)
 4001ca4:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                                        break;
 4001ca8:	00000306 	br	4001cb8 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
 4001cac:	0001883a 	nop
 4001cb0:	00000106 	br	4001cb8 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
 4001cb4:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 4001cb8:	000d883a 	mov	r6,zero
 4001cbc:	01400e04 	movi	r5,56
 4001cc0:	e13ffc17 	ldw	r4,-16(fp)
 4001cc4:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 4001cc8:	e0bff717 	ldw	r2,-36(fp)
 4001ccc:	10800003 	ldbu	r2,0(r2)
 4001cd0:	10803fcc 	andi	r2,r2,255
 4001cd4:	100d883a 	mov	r6,r2
 4001cd8:	01400404 	movi	r5,16
 4001cdc:	e13ffc17 	ldw	r4,-16(fp)
 4001ce0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 4001ce4:	e0bffb0b 	ldhu	r2,-20(fp)
 4001ce8:	10803fcc 	andi	r2,r2,255
 4001cec:	100d883a 	mov	r6,r2
 4001cf0:	01400e04 	movi	r5,56
 4001cf4:	e13ffc17 	ldw	r4,-16(fp)
 4001cf8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 4001cfc:	e0bffd17 	ldw	r2,-12(fp)
 4001d00:	10800003 	ldbu	r2,0(r2)
 4001d04:	10800814 	ori	r2,r2,32
 4001d08:	10803fcc 	andi	r2,r2,255
 4001d0c:	100d883a 	mov	r6,r2
 4001d10:	01403c04 	movi	r5,240
 4001d14:	e13ffc17 	ldw	r4,-16(fp)
 4001d18:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 4001d1c:	01403204 	movi	r5,200
 4001d20:	e13ffc17 	ldw	r4,-16(fp)
 4001d24:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001d28:	0084303a 	nor	r2,zero,r2
 4001d2c:	10803fcc 	andi	r2,r2,255
 4001d30:	1004d1fa 	srli	r2,r2,7
 4001d34:	10803fcc 	andi	r2,r2,255
 4001d38:	10000126 	beq	r2,zero,4001d40 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
 4001d3c:	003ff706 	br	4001d1c <__alt_mem_onchip_memory2_0+0xfc000a9c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 4001d40:	01802004 	movi	r6,128
 4001d44:	01403204 	movi	r5,200
 4001d48:	e13ffc17 	ldw	r4,-16(fp)
 4001d4c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 4001d50:	01403e04 	movi	r5,248
 4001d54:	e13ffc17 	ldw	r4,-16(fp)
 4001d58:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001d5c:	108003cc 	andi	r2,r2,15
 4001d60:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 4001d64:	003f9006 	br	4001ba8 <__alt_mem_onchip_memory2_0+0xfc000928>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 4001d68:	e0fff88b 	ldhu	r3,-30(fp)
 4001d6c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001d70:	1885c83a 	sub	r2,r3,r2
 4001d74:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
 4001d78:	e0bffb0b 	ldhu	r2,-20(fp)
 4001d7c:	e0fff717 	ldw	r3,-36(fp)
 4001d80:	1885883a 	add	r2,r3,r2
 4001d84:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
 4001d88:	003f5506 	br	4001ae0 <__alt_mem_onchip_memory2_0+0xfc000860>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 4001d8c:	01403e04 	movi	r5,248
 4001d90:	e13ffc17 	ldw	r4,-16(fp)
 4001d94:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001d98:	10803fcc 	andi	r2,r2,255
 4001d9c:	1080080c 	andi	r2,r2,32
 4001da0:	10000226 	beq	r2,zero,4001dac <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
 4001da4:	00c00044 	movi	r3,1
 4001da8:	00000106 	br	4001db0 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
 4001dac:	0007883a 	mov	r3,zero
 4001db0:	e0bffd17 	ldw	r2,-12(fp)
 4001db4:	1940004c 	andi	r5,r3,1
 4001db8:	11000083 	ldbu	r4,2(r2)
 4001dbc:	00ffff84 	movi	r3,-2
 4001dc0:	20c6703a 	and	r3,r4,r3
 4001dc4:	1809883a 	mov	r4,r3
 4001dc8:	2807883a 	mov	r3,r5
 4001dcc:	20c6b03a 	or	r3,r4,r3
 4001dd0:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
 4001dd4:	e0bff603 	ldbu	r2,-40(fp)
}
 4001dd8:	e037883a 	mov	sp,fp
 4001ddc:	dfc00117 	ldw	ra,4(sp)
 4001de0:	df000017 	ldw	fp,0(sp)
 4001de4:	dec00204 	addi	sp,sp,8
 4001de8:	f800283a 	ret

04001dec <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 4001dec:	defff704 	addi	sp,sp,-36
 4001df0:	dfc00815 	stw	ra,32(sp)
 4001df4:	df000715 	stw	fp,28(sp)
 4001df8:	df000704 	addi	fp,sp,28
 4001dfc:	e13ffc15 	stw	r4,-16(fp)
 4001e00:	2809883a 	mov	r4,r5
 4001e04:	3007883a 	mov	r3,r6
 4001e08:	3805883a 	mov	r2,r7
 4001e0c:	e13ffd05 	stb	r4,-12(fp)
 4001e10:	e0fffe05 	stb	r3,-8(fp)
 4001e14:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 4001e18:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001e1c:	1084e204 	addi	r2,r2,5000
 4001e20:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 4001e24:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
 4001e28:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
 4001e2c:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 4001e30:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001e34:	1007883a 	mov	r3,r2
 4001e38:	e0bffa17 	ldw	r2,-24(fp)
 4001e3c:	1885c83a 	sub	r2,r3,r2
 4001e40:	1004d7fa 	srli	r2,r2,31
 4001e44:	10803fcc 	andi	r2,r2,255
 4001e48:	10004226 	beq	r2,zero,4001f54 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 4001e4c:	e0fffd03 	ldbu	r3,-12(fp)
 4001e50:	e0bffe03 	ldbu	r2,-8(fp)
 4001e54:	1884b03a 	or	r2,r3,r2
 4001e58:	10803fcc 	andi	r2,r2,255
 4001e5c:	100d883a 	mov	r6,r2
 4001e60:	01403c04 	movi	r5,240
 4001e64:	e13ffc17 	ldw	r4,-16(fp)
 4001e68:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 4001e6c:	00bfffc4 	movi	r2,-1
 4001e70:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 4001e74:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001e78:	1007883a 	mov	r3,r2
 4001e7c:	e0bffa17 	ldw	r2,-24(fp)
 4001e80:	1885c83a 	sub	r2,r3,r2
 4001e84:	1004d7fa 	srli	r2,r2,31
 4001e88:	10803fcc 	andi	r2,r2,255
 4001e8c:	10000e26 	beq	r2,zero,4001ec8 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 4001e90:	01403204 	movi	r5,200
 4001e94:	e13ffc17 	ldw	r4,-16(fp)
 4001e98:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001e9c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
 4001ea0:	e0bffb03 	ldbu	r2,-20(fp)
 4001ea4:	10803fcc 	andi	r2,r2,255
 4001ea8:	1080201c 	xori	r2,r2,128
 4001eac:	10bfe004 	addi	r2,r2,-128
 4001eb0:	103ff00e 	bge	r2,zero,4001e74 <__alt_mem_onchip_memory2_0+0xfc000bf4>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 4001eb4:	01802004 	movi	r6,128
 4001eb8:	01403204 	movi	r5,200
 4001ebc:	e13ffc17 	ldw	r4,-16(fp)
 4001ec0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
 4001ec4:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 4001ec8:	01403e04 	movi	r5,248
 4001ecc:	e13ffc17 	ldw	r4,-16(fp)
 4001ed0:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001ed4:	108003cc 	andi	r2,r2,15
 4001ed8:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
 4001edc:	e0bff903 	ldbu	r2,-28(fp)
 4001ee0:	10c00120 	cmpeqi	r3,r2,4
 4001ee4:	1800031e 	bne	r3,zero,4001ef4 <_ZN3USB11dispatchPktEhht+0x108>
 4001ee8:	108003a0 	cmpeqi	r2,r2,14
 4001eec:	10000b1e 	bne	r2,zero,4001f1c <_ZN3USB11dispatchPktEhht+0x130>
 4001ef0:	00001206 	br	4001f3c <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
 4001ef4:	e0bff98b 	ldhu	r2,-26(fp)
 4001ef8:	10800044 	addi	r2,r2,1
 4001efc:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
 4001f00:	e0bfff0b 	ldhu	r2,-4(fp)
 4001f04:	10000f26 	beq	r2,zero,4001f44 <_ZN3USB11dispatchPktEhht+0x158>
 4001f08:	e0fff98b 	ldhu	r3,-26(fp)
 4001f0c:	e0bfff0b 	ldhu	r2,-4(fp)
 4001f10:	18800c1e 	bne	r3,r2,4001f44 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
 4001f14:	e0bff903 	ldbu	r2,-28(fp)
 4001f18:	00000f06 	br	4001f58 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 4001f1c:	e0bff943 	ldbu	r2,-27(fp)
 4001f20:	10800044 	addi	r2,r2,1
 4001f24:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
 4001f28:	e0bff943 	ldbu	r2,-27(fp)
 4001f2c:	108000d8 	cmpnei	r2,r2,3
 4001f30:	1000061e 	bne	r2,zero,4001f4c <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
 4001f34:	e0bff903 	ldbu	r2,-28(fp)
 4001f38:	00000706 	br	4001f58 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
 4001f3c:	e0bff903 	ldbu	r2,-28(fp)
 4001f40:	00000506 	br	4001f58 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
 4001f44:	0001883a 	nop
 4001f48:	003fb906 	br	4001e30 <__alt_mem_onchip_memory2_0+0xfc000bb0>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
 4001f4c:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 4001f50:	003fb706 	br	4001e30 <__alt_mem_onchip_memory2_0+0xfc000bb0>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 4001f54:	e0bff903 	ldbu	r2,-28(fp)
}
 4001f58:	e037883a 	mov	sp,fp
 4001f5c:	dfc00117 	ldw	ra,4(sp)
 4001f60:	df000017 	ldw	fp,0(sp)
 4001f64:	dec00204 	addi	sp,sp,8
 4001f68:	f800283a 	ret

04001f6c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 4001f6c:	defffa04 	addi	sp,sp,-24
 4001f70:	dfc00515 	stw	ra,20(sp)
 4001f74:	df000415 	stw	fp,16(sp)
 4001f78:	df000404 	addi	fp,sp,16
 4001f7c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 4001f80:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
 4001f84:	e13ffe17 	ldw	r4,-8(fp)
 4001f88:	4009c480 	call	4009c48 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
 4001f8c:	e13ffe17 	ldw	r4,-8(fp)
 4001f90:	40093900 	call	4009390 <_ZN8MAX3421e12getVbusStateEv>
 4001f94:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 4001f98:	e0bffcc3 	ldbu	r2,-13(fp)
 4001f9c:	10c00060 	cmpeqi	r3,r2,1
 4001fa0:	1800091e 	bne	r3,zero,4001fc8 <_ZN3USB4TaskEv+0x5c>
 4001fa4:	10c00088 	cmpgei	r3,r2,2
 4001fa8:	1800021e 	bne	r3,zero,4001fb4 <_ZN3USB4TaskEv+0x48>
 4001fac:	10000a26 	beq	r2,zero,4001fd8 <_ZN3USB4TaskEv+0x6c>
 4001fb0:	00001f06 	br	4002030 <_ZN3USB4TaskEv+0xc4>
 4001fb4:	10c000a0 	cmpeqi	r3,r2,2
 4001fb8:	1800121e 	bne	r3,zero,4002004 <_ZN3USB4TaskEv+0x98>
 4001fbc:	108000e0 	cmpeqi	r2,r2,3
 4001fc0:	10000e1e 	bne	r2,zero,4001ffc <_ZN3USB4TaskEv+0x90>
 4001fc4:	00001a06 	br	4002030 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 4001fc8:	008004c4 	movi	r2,19
 4001fcc:	d0b23545 	stb	r2,-14123(gp)
                        lowspeed = false;
 4001fd0:	e03ffc05 	stb	zero,-16(fp)
                        break;
 4001fd4:	00001606 	br	4002030 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 4001fd8:	d0b23543 	ldbu	r2,-14123(gp)
 4001fdc:	10803fcc 	andi	r2,r2,255
 4001fe0:	10803c0c 	andi	r2,r2,240
 4001fe4:	10800420 	cmpeqi	r2,r2,16
 4001fe8:	1000021e 	bne	r2,zero,4001ff4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 4001fec:	00800444 	movi	r2,17
 4001ff0:	d0b23545 	stb	r2,-14123(gp)
                        lowspeed = false;
 4001ff4:	e03ffc05 	stb	zero,-16(fp)
                        break;
 4001ff8:	00000d06 	br	4002030 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
 4001ffc:	00800044 	movi	r2,1
 4002000:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 4002004:	d0b23543 	ldbu	r2,-14123(gp)
 4002008:	10803fcc 	andi	r2,r2,255
 400200c:	10803c0c 	andi	r2,r2,240
 4002010:	10800418 	cmpnei	r2,r2,16
 4002014:	1000051e 	bne	r2,zero,400202c <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 4002018:	4000e2c0 	call	4000e2c <_Z6millisv>
 400201c:	10803204 	addi	r2,r2,200
 4002020:	d0b23615 	stw	r2,-14120(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 4002024:	00800804 	movi	r2,32
 4002028:	d0b23545 	stb	r2,-14123(gp)
                        }
                        break;
 400202c:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 4002030:	e03ffc45 	stb	zero,-15(fp)
 4002034:	e0bffc43 	ldbu	r2,-15(fp)
 4002038:	10800428 	cmpgeui	r2,r2,16
 400203c:	1000201e 	bne	r2,zero,40020c0 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
 4002040:	e0bffc43 	ldbu	r2,-15(fp)
 4002044:	e0fffe17 	ldw	r3,-8(fp)
 4002048:	10800784 	addi	r2,r2,30
 400204c:	1085883a 	add	r2,r2,r2
 4002050:	1085883a 	add	r2,r2,r2
 4002054:	1885883a 	add	r2,r3,r2
 4002058:	10800017 	ldw	r2,0(r2)
 400205c:	10001426 	beq	r2,zero,40020b0 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
 4002060:	e0bffc43 	ldbu	r2,-15(fp)
 4002064:	e0fffe17 	ldw	r3,-8(fp)
 4002068:	10800784 	addi	r2,r2,30
 400206c:	1085883a 	add	r2,r2,r2
 4002070:	1085883a 	add	r2,r2,r2
 4002074:	1885883a 	add	r2,r3,r2
 4002078:	10800017 	ldw	r2,0(r2)
 400207c:	10800017 	ldw	r2,0(r2)
 4002080:	10800304 	addi	r2,r2,12
 4002084:	10c00017 	ldw	r3,0(r2)
 4002088:	e0bffc43 	ldbu	r2,-15(fp)
 400208c:	e13ffe17 	ldw	r4,-8(fp)
 4002090:	10800784 	addi	r2,r2,30
 4002094:	1085883a 	add	r2,r2,r2
 4002098:	1085883a 	add	r2,r2,r2
 400209c:	2085883a 	add	r2,r4,r2
 40020a0:	10800017 	ldw	r2,0(r2)
 40020a4:	1009883a 	mov	r4,r2
 40020a8:	183ee83a 	callr	r3
 40020ac:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 40020b0:	e0bffc43 	ldbu	r2,-15(fp)
 40020b4:	10800044 	addi	r2,r2,1
 40020b8:	e0bffc45 	stb	r2,-15(fp)
 40020bc:	003fdd06 	br	4002034 <__alt_mem_onchip_memory2_0+0xfc000db4>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 40020c0:	d0b23543 	ldbu	r2,-14123(gp)
 40020c4:	10803fcc 	andi	r2,r2,255
 40020c8:	10c01020 	cmpeqi	r3,r2,64
 40020cc:	1800511e 	bne	r3,zero,4002214 <_ZN3USB4TaskEv+0x2a8>
 40020d0:	10c01048 	cmpgei	r3,r2,65
 40020d4:	18000c1e 	bne	r3,zero,4002108 <_ZN3USB4TaskEv+0x19c>
 40020d8:	10c004e0 	cmpeqi	r3,r2,19
 40020dc:	18008e1e 	bne	r3,zero,4002318 <_ZN3USB4TaskEv+0x3ac>
 40020e0:	10c00508 	cmpgei	r3,r2,20
 40020e4:	1800031e 	bne	r3,zero,40020f4 <_ZN3USB4TaskEv+0x188>
 40020e8:	10800460 	cmpeqi	r2,r2,17
 40020ec:	10000f1e 	bne	r2,zero,400212c <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
 40020f0:	00009406 	br	4002344 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 40020f4:	10c00820 	cmpeqi	r3,r2,32
 40020f8:	1800351e 	bne	r3,zero,40021d0 <_ZN3USB4TaskEv+0x264>
 40020fc:	10800c20 	cmpeqi	r2,r2,48
 4002100:	10003d1e 	bne	r2,zero,40021f8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 4002104:	00008f06 	br	4002344 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 4002108:	10c02020 	cmpeqi	r3,r2,128
 400210c:	18006e1e 	bne	r3,zero,40022c8 <_ZN3USB4TaskEv+0x35c>
 4002110:	10c02048 	cmpgei	r3,r2,129
 4002114:	18008b1e 	bne	r3,zero,4002344 <_ZN3USB4TaskEv+0x3d8>
 4002118:	10c01420 	cmpeqi	r3,r2,80
 400211c:	1800521e 	bne	r3,zero,4002268 <_ZN3USB4TaskEv+0x2fc>
 4002120:	10801460 	cmpeqi	r2,r2,81
 4002124:	10005e1e 	bne	r2,zero,40022a0 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 4002128:	00008606 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
 400212c:	e13ffe17 	ldw	r4,-8(fp)
 4002130:	4000eac0 	call	4000eac <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 4002134:	e03ffc85 	stb	zero,-14(fp)
 4002138:	e0bffc83 	ldbu	r2,-14(fp)
 400213c:	10800428 	cmpgeui	r2,r2,16
 4002140:	1000201e 	bne	r2,zero,40021c4 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
 4002144:	e0bffc83 	ldbu	r2,-14(fp)
 4002148:	e0fffe17 	ldw	r3,-8(fp)
 400214c:	10800784 	addi	r2,r2,30
 4002150:	1085883a 	add	r2,r2,r2
 4002154:	1085883a 	add	r2,r2,r2
 4002158:	1885883a 	add	r2,r3,r2
 400215c:	10800017 	ldw	r2,0(r2)
 4002160:	10001426 	beq	r2,zero,40021b4 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
 4002164:	e0bffc83 	ldbu	r2,-14(fp)
 4002168:	e0fffe17 	ldw	r3,-8(fp)
 400216c:	10800784 	addi	r2,r2,30
 4002170:	1085883a 	add	r2,r2,r2
 4002174:	1085883a 	add	r2,r2,r2
 4002178:	1885883a 	add	r2,r3,r2
 400217c:	10800017 	ldw	r2,0(r2)
 4002180:	10800017 	ldw	r2,0(r2)
 4002184:	10800204 	addi	r2,r2,8
 4002188:	10c00017 	ldw	r3,0(r2)
 400218c:	e0bffc83 	ldbu	r2,-14(fp)
 4002190:	e13ffe17 	ldw	r4,-8(fp)
 4002194:	10800784 	addi	r2,r2,30
 4002198:	1085883a 	add	r2,r2,r2
 400219c:	1085883a 	add	r2,r2,r2
 40021a0:	2085883a 	add	r2,r4,r2
 40021a4:	10800017 	ldw	r2,0(r2)
 40021a8:	1009883a 	mov	r4,r2
 40021ac:	183ee83a 	callr	r3
 40021b0:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 40021b4:	e0bffc83 	ldbu	r2,-14(fp)
 40021b8:	10800044 	addi	r2,r2,1
 40021bc:	e0bffc85 	stb	r2,-14(fp)
 40021c0:	003fdd06 	br	4002138 <__alt_mem_onchip_memory2_0+0xfc000eb8>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 40021c4:	00800484 	movi	r2,18
 40021c8:	d0b23545 	stb	r2,-14123(gp)
                        break;
 40021cc:	00005d06 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 40021d0:	4000e2c0 	call	4000e2c <_Z6millisv>
 40021d4:	1007883a 	mov	r3,r2
 40021d8:	d0b23617 	ldw	r2,-14120(gp)
 40021dc:	1885c83a 	sub	r2,r3,r2
 40021e0:	0084303a 	nor	r2,zero,r2
 40021e4:	1004d7fa 	srli	r2,r2,31
 40021e8:	10803fcc 	andi	r2,r2,255
 40021ec:	10004c26 	beq	r2,zero,4002320 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 40021f0:	00800c04 	movi	r2,48
 40021f4:	d0b23545 	stb	r2,-14123(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 40021f8:	01800044 	movi	r6,1
 40021fc:	01403a04 	movi	r5,232
 4002200:	e13ffe17 	ldw	r4,-8(fp)
 4002204:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 4002208:	00801004 	movi	r2,64
 400220c:	d0b23545 	stb	r2,-14123(gp)
                        break;
 4002210:	00004c06 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 4002214:	01403a04 	movi	r5,232
 4002218:	e13ffe17 	ldw	r4,-8(fp)
 400221c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4002220:	10803fcc 	andi	r2,r2,255
 4002224:	1080004c 	andi	r2,r2,1
 4002228:	1005003a 	cmpeq	r2,r2,zero
 400222c:	10803fcc 	andi	r2,r2,255
 4002230:	10003d26 	beq	r2,zero,4002328 <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 4002234:	01403604 	movi	r5,216
 4002238:	e13ffe17 	ldw	r4,-8(fp)
 400223c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4002240:	10800214 	ori	r2,r2,8
 4002244:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
 4002248:	e0bffcc3 	ldbu	r2,-13(fp)
 400224c:	100d883a 	mov	r6,r2
 4002250:	01403604 	movi	r5,216
 4002254:	e13ffe17 	ldw	r4,-8(fp)
 4002258:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 400225c:	00801404 	movi	r2,80
 4002260:	d0b23545 	stb	r2,-14123(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
 4002264:	00003006 	br	4002328 <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 4002268:	01403204 	movi	r5,200
 400226c:	e13ffe17 	ldw	r4,-8(fp)
 4002270:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4002274:	10803fcc 	andi	r2,r2,255
 4002278:	1080100c 	andi	r2,r2,64
 400227c:	1004c03a 	cmpne	r2,r2,zero
 4002280:	10803fcc 	andi	r2,r2,255
 4002284:	10002a26 	beq	r2,zero,4002330 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 4002288:	00801444 	movi	r2,81
 400228c:	d0b23545 	stb	r2,-14123(gp)
                                delay = (uint32_t)millis() + 20;
 4002290:	4000e2c0 	call	4000e2c <_Z6millisv>
 4002294:	10800504 	addi	r2,r2,20
 4002298:	d0b23615 	stw	r2,-14120(gp)
                        }
                        break;
 400229c:	00002406 	br	4002330 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 40022a0:	4000e2c0 	call	4000e2c <_Z6millisv>
 40022a4:	1007883a 	mov	r3,r2
 40022a8:	d0b23617 	ldw	r2,-14120(gp)
 40022ac:	1885c83a 	sub	r2,r3,r2
 40022b0:	0084303a 	nor	r2,zero,r2
 40022b4:	1004d7fa 	srli	r2,r2,31
 40022b8:	10803fcc 	andi	r2,r2,255
 40022bc:	10001e26 	beq	r2,zero,4002338 <_ZN3USB4TaskEv+0x3cc>
 40022c0:	00bfe004 	movi	r2,-128
 40022c4:	d0b23545 	stb	r2,-14123(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
 40022c8:	e0bffc03 	ldbu	r2,-16(fp)
 40022cc:	100f883a 	mov	r7,r2
 40022d0:	000d883a 	mov	r6,zero
 40022d4:	000b883a 	mov	r5,zero
 40022d8:	e13ffe17 	ldw	r4,-8(fp)
 40022dc:	400274c0 	call	400274c <_ZN3USB11ConfiguringEhhb>
 40022e0:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
 40022e4:	e0bffd03 	ldbu	r2,-12(fp)
 40022e8:	10000826 	beq	r2,zero,400230c <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 40022ec:	e0bffd03 	ldbu	r2,-12(fp)
 40022f0:	108034a0 	cmpeqi	r2,r2,210
 40022f4:	1000121e 	bne	r2,zero,4002340 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
 40022f8:	e0bffd03 	ldbu	r2,-12(fp)
 40022fc:	d0b23505 	stb	r2,-14124(gp)
                                        usb_task_state = USB_STATE_ERROR;
 4002300:	00bfe804 	movi	r2,-96
 4002304:	d0b23545 	stb	r2,-14123(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
 4002308:	00000d06 	br	4002340 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
 400230c:	00bfe404 	movi	r2,-112
 4002310:	d0b23545 	stb	r2,-14123(gp)
                        break;
 4002314:	00000a06 	br	4002340 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
 4002318:	0001883a 	nop
 400231c:	00000906 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
 4002320:	0001883a 	nop
 4002324:	00000706 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
 4002328:	0001883a 	nop
 400232c:	00000506 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
 4002330:	0001883a 	nop
 4002334:	00000306 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
 4002338:	0001883a 	nop
 400233c:	00000106 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
 4002340:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 4002344:	0001883a 	nop
 4002348:	e037883a 	mov	sp,fp
 400234c:	dfc00117 	ldw	ra,4(sp)
 4002350:	df000017 	ldw	fp,0(sp)
 4002354:	dec00204 	addi	sp,sp,8
 4002358:	f800283a 	ret

0400235c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 400235c:	defff704 	addi	sp,sp,-36
 4002360:	dfc00815 	stw	ra,32(sp)
 4002364:	df000715 	stw	fp,28(sp)
 4002368:	df000704 	addi	fp,sp,28
 400236c:	e13ffc15 	stw	r4,-16(fp)
 4002370:	2809883a 	mov	r4,r5
 4002374:	3007883a 	mov	r3,r6
 4002378:	3805883a 	mov	r2,r7
 400237c:	e13ffd05 	stb	r4,-12(fp)
 4002380:	e0fffe05 	stb	r3,-8(fp)
 4002384:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 4002388:	e03ff915 	stw	zero,-28(fp)
 400238c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 4002390:	e0bffc17 	ldw	r2,-16(fp)
 4002394:	000b883a 	mov	r5,zero
 4002398:	1009883a 	mov	r4,r2
 400239c:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 40023a0:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
 40023a4:	e0bff917 	ldw	r2,-28(fp)
 40023a8:	1000021e 	bne	r2,zero,40023b4 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40023ac:	00bff584 	movi	r2,-42
 40023b0:	00003d06 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
 40023b4:	e0bff917 	ldw	r2,-28(fp)
 40023b8:	10c00003 	ldbu	r3,0(r2)
 40023bc:	11000043 	ldbu	r4,1(r2)
 40023c0:	2008923a 	slli	r4,r4,8
 40023c4:	20c6b03a 	or	r3,r4,r3
 40023c8:	11000083 	ldbu	r4,2(r2)
 40023cc:	2008943a 	slli	r4,r4,16
 40023d0:	20c6b03a 	or	r3,r4,r3
 40023d4:	108000c3 	ldbu	r2,3(r2)
 40023d8:	1004963a 	slli	r2,r2,24
 40023dc:	10c4b03a 	or	r2,r2,r3
 40023e0:	1000021e 	bne	r2,zero,40023ec <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
 40023e4:	00bff5c4 	movi	r2,-41
 40023e8:	00002f06 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
 40023ec:	e0bff917 	ldw	r2,-28(fp)
 40023f0:	e0ffff03 	ldbu	r3,-4(fp)
 40023f4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 40023f8:	e0bffc17 	ldw	r2,-16(fp)
 40023fc:	e0fffd03 	ldbu	r3,-12(fp)
 4002400:	e13ffe03 	ldbu	r4,-8(fp)
 4002404:	200f883a 	mov	r7,r4
 4002408:	000d883a 	mov	r6,zero
 400240c:	180b883a 	mov	r5,r3
 4002410:	1009883a 	mov	r4,r2
 4002414:	40035440 	call	4003544 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 4002418:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
 400241c:	e0bffb03 	ldbu	r2,-20(fp)
 4002420:	1000021e 	bne	r2,zero,400242c <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 4002424:	00bff504 	movi	r2,-44
 4002428:	00001f06 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
 400242c:	e0bffc17 	ldw	r2,-16(fp)
 4002430:	e0fffb03 	ldbu	r3,-20(fp)
 4002434:	180b883a 	mov	r5,r3
 4002438:	1009883a 	mov	r4,r2
 400243c:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4002440:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
 4002444:	e0bffa17 	ldw	r2,-24(fp)
 4002448:	1000021e 	bne	r2,zero,4002454 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 400244c:	00bff584 	movi	r2,-42
 4002450:	00001506 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
 4002454:	e0bffa17 	ldw	r2,-24(fp)
 4002458:	e0ffff03 	ldbu	r3,-4(fp)
 400245c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 4002460:	e0bffb03 	ldbu	r2,-20(fp)
 4002464:	100f883a 	mov	r7,r2
 4002468:	000d883a 	mov	r6,zero
 400246c:	000b883a 	mov	r5,zero
 4002470:	e13ffc17 	ldw	r4,-16(fp)
 4002474:	40032500 	call	4003250 <_ZN3USB7setAddrEhhh>
 4002478:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
 400247c:	e0bffb43 	ldbu	r2,-19(fp)
 4002480:	10000826 	beq	r2,zero,40024a4 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
 4002484:	e0bffc17 	ldw	r2,-16(fp)
 4002488:	e0fffb03 	ldbu	r3,-20(fp)
 400248c:	180b883a 	mov	r5,r3
 4002490:	1009883a 	mov	r4,r2
 4002494:	40037a40 	call	40037a4 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 4002498:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
 400249c:	e0bffb43 	ldbu	r2,-19(fp)
 40024a0:	00000106 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
 40024a4:	0005883a 	mov	r2,zero
};
 40024a8:	e037883a 	mov	sp,fp
 40024ac:	dfc00117 	ldw	ra,4(sp)
 40024b0:	df000017 	ldw	fp,0(sp)
 40024b4:	dec00204 	addi	sp,sp,8
 40024b8:	f800283a 	ret

040024bc <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 40024bc:	defff804 	addi	sp,sp,-32
 40024c0:	dfc00715 	stw	ra,28(sp)
 40024c4:	df000615 	stw	fp,24(sp)
 40024c8:	df000604 	addi	fp,sp,24
 40024cc:	e13ffb15 	stw	r4,-20(fp)
 40024d0:	3009883a 	mov	r4,r6
 40024d4:	3807883a 	mov	r3,r7
 40024d8:	e0800217 	ldw	r2,8(fp)
 40024dc:	e17ffc05 	stb	r5,-16(fp)
 40024e0:	e13ffd05 	stb	r4,-12(fp)
 40024e4:	e0fffe05 	stb	r3,-8(fp)
 40024e8:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 40024ec:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 40024f0:	e0bffc03 	ldbu	r2,-16(fp)
 40024f4:	e0fffb17 	ldw	r3,-20(fp)
 40024f8:	10800784 	addi	r2,r2,30
 40024fc:	1085883a 	add	r2,r2,r2
 4002500:	1085883a 	add	r2,r2,r2
 4002504:	1885883a 	add	r2,r3,r2
 4002508:	10800017 	ldw	r2,0(r2)
 400250c:	10800017 	ldw	r2,0(r2)
 4002510:	10800104 	addi	r2,r2,4
 4002514:	10c00017 	ldw	r3,0(r2)
 4002518:	e0bffc03 	ldbu	r2,-16(fp)
 400251c:	e13ffb17 	ldw	r4,-20(fp)
 4002520:	10800784 	addi	r2,r2,30
 4002524:	1085883a 	add	r2,r2,r2
 4002528:	1085883a 	add	r2,r2,r2
 400252c:	2085883a 	add	r2,r4,r2
 4002530:	10800017 	ldw	r2,0(r2)
 4002534:	e13ffd03 	ldbu	r4,-12(fp)
 4002538:	e17ffe03 	ldbu	r5,-8(fp)
 400253c:	e1bfff03 	ldbu	r6,-4(fp)
 4002540:	300f883a 	mov	r7,r6
 4002544:	280d883a 	mov	r6,r5
 4002548:	200b883a 	mov	r5,r4
 400254c:	1009883a 	mov	r4,r2
 4002550:	183ee83a 	callr	r3
 4002554:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 4002558:	e0bffa43 	ldbu	r2,-23(fp)
 400255c:	10803818 	cmpnei	r2,r2,224
 4002560:	10001f1e 	bne	r2,zero,40025e0 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
 4002564:	e0bffd03 	ldbu	r2,-12(fp)
 4002568:	1000071e 	bne	r2,zero,4002588 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 400256c:	01800044 	movi	r6,1
 4002570:	01403a04 	movi	r5,232
 4002574:	e13ffb17 	ldw	r4,-20(fp)
 4002578:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 400257c:	01001984 	movi	r4,102
 4002580:	4000dd40 	call	4000dd4 <_Z5delaym>
 4002584:	00002606 	br	4002620 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 4002588:	e0bffd03 	ldbu	r2,-12(fp)
 400258c:	e0fffb17 	ldw	r3,-20(fp)
 4002590:	10800784 	addi	r2,r2,30
 4002594:	1085883a 	add	r2,r2,r2
 4002598:	1085883a 	add	r2,r2,r2
 400259c:	1885883a 	add	r2,r3,r2
 40025a0:	10800017 	ldw	r2,0(r2)
 40025a4:	10800017 	ldw	r2,0(r2)
 40025a8:	10800504 	addi	r2,r2,20
 40025ac:	10c00017 	ldw	r3,0(r2)
 40025b0:	e0bffd03 	ldbu	r2,-12(fp)
 40025b4:	e13ffb17 	ldw	r4,-20(fp)
 40025b8:	10800784 	addi	r2,r2,30
 40025bc:	1085883a 	add	r2,r2,r2
 40025c0:	1085883a 	add	r2,r2,r2
 40025c4:	2085883a 	add	r2,r4,r2
 40025c8:	10800017 	ldw	r2,0(r2)
 40025cc:	e13ffe03 	ldbu	r4,-8(fp)
 40025d0:	200b883a 	mov	r5,r4
 40025d4:	1009883a 	mov	r4,r2
 40025d8:	183ee83a 	callr	r3
 40025dc:	00001006 	br	4002620 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 40025e0:	e0bffa43 	ldbu	r2,-23(fp)
 40025e4:	10800358 	cmpnei	r2,r2,13
 40025e8:	1000091e 	bne	r2,zero,4002610 <_ZN3USB13AttemptConfigEhhhb+0x154>
 40025ec:	e0bffa03 	ldbu	r2,-24(fp)
 40025f0:	108000e8 	cmpgeui	r2,r2,3
 40025f4:	1000061e 	bne	r2,zero,4002610 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
 40025f8:	01001904 	movi	r4,100
 40025fc:	4000dd40 	call	4000dd4 <_Z5delaym>
                retries++;
 4002600:	e0bffa03 	ldbu	r2,-24(fp)
 4002604:	10800044 	addi	r2,r2,1
 4002608:	e0bffa05 	stb	r2,-24(fp)
                goto again;
 400260c:	003fb806 	br	40024f0 <__alt_mem_onchip_memory2_0+0xfc001270>
        } else if(rcode)
 4002610:	e0bffa43 	ldbu	r2,-23(fp)
 4002614:	10000226 	beq	r2,zero,4002620 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
 4002618:	e0bffa43 	ldbu	r2,-23(fp)
 400261c:	00004606 	br	4002738 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 4002620:	e0bffc03 	ldbu	r2,-16(fp)
 4002624:	e0fffb17 	ldw	r3,-20(fp)
 4002628:	10800784 	addi	r2,r2,30
 400262c:	1085883a 	add	r2,r2,r2
 4002630:	1085883a 	add	r2,r2,r2
 4002634:	1885883a 	add	r2,r3,r2
 4002638:	10800017 	ldw	r2,0(r2)
 400263c:	10800017 	ldw	r2,0(r2)
 4002640:	10c00017 	ldw	r3,0(r2)
 4002644:	e0bffc03 	ldbu	r2,-16(fp)
 4002648:	e13ffb17 	ldw	r4,-20(fp)
 400264c:	10800784 	addi	r2,r2,30
 4002650:	1085883a 	add	r2,r2,r2
 4002654:	1085883a 	add	r2,r2,r2
 4002658:	2085883a 	add	r2,r4,r2
 400265c:	10800017 	ldw	r2,0(r2)
 4002660:	e13ffd03 	ldbu	r4,-12(fp)
 4002664:	e17ffe03 	ldbu	r5,-8(fp)
 4002668:	e1bfff03 	ldbu	r6,-4(fp)
 400266c:	300f883a 	mov	r7,r6
 4002670:	280d883a 	mov	r6,r5
 4002674:	200b883a 	mov	r5,r4
 4002678:	1009883a 	mov	r4,r2
 400267c:	183ee83a 	callr	r3
 4002680:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 4002684:	e0bffa43 	ldbu	r2,-23(fp)
 4002688:	10800358 	cmpnei	r2,r2,13
 400268c:	1000091e 	bne	r2,zero,40026b4 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
 4002690:	e0bffa03 	ldbu	r2,-24(fp)
 4002694:	108000e8 	cmpgeui	r2,r2,3
 4002698:	1000061e 	bne	r2,zero,40026b4 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
 400269c:	01001904 	movi	r4,100
 40026a0:	4000dd40 	call	4000dd4 <_Z5delaym>
                retries++;
 40026a4:	e0bffa03 	ldbu	r2,-24(fp)
 40026a8:	10800044 	addi	r2,r2,1
 40026ac:	e0bffa05 	stb	r2,-24(fp)
                goto again;
 40026b0:	003f8f06 	br	40024f0 <__alt_mem_onchip_memory2_0+0xfc001270>
        }
        if(rcode) {
 40026b4:	e0bffa43 	ldbu	r2,-23(fp)
 40026b8:	10001e26 	beq	r2,zero,4002734 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 40026bc:	e0bffd03 	ldbu	r2,-12(fp)
 40026c0:	1000071e 	bne	r2,zero,40026e0 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 40026c4:	01800044 	movi	r6,1
 40026c8:	01403a04 	movi	r5,232
 40026cc:	e13ffb17 	ldw	r4,-20(fp)
 40026d0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 40026d4:	01001984 	movi	r4,102
 40026d8:	4000dd40 	call	4000dd4 <_Z5delaym>
 40026dc:	00001506 	br	4002734 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 40026e0:	e0bffd03 	ldbu	r2,-12(fp)
 40026e4:	e0fffb17 	ldw	r3,-20(fp)
 40026e8:	10800784 	addi	r2,r2,30
 40026ec:	1085883a 	add	r2,r2,r2
 40026f0:	1085883a 	add	r2,r2,r2
 40026f4:	1885883a 	add	r2,r3,r2
 40026f8:	10800017 	ldw	r2,0(r2)
 40026fc:	10800017 	ldw	r2,0(r2)
 4002700:	10800504 	addi	r2,r2,20
 4002704:	10c00017 	ldw	r3,0(r2)
 4002708:	e0bffd03 	ldbu	r2,-12(fp)
 400270c:	e13ffb17 	ldw	r4,-20(fp)
 4002710:	10800784 	addi	r2,r2,30
 4002714:	1085883a 	add	r2,r2,r2
 4002718:	1085883a 	add	r2,r2,r2
 400271c:	2085883a 	add	r2,r4,r2
 4002720:	10800017 	ldw	r2,0(r2)
 4002724:	e13ffe03 	ldbu	r4,-8(fp)
 4002728:	200b883a 	mov	r5,r4
 400272c:	1009883a 	mov	r4,r2
 4002730:	183ee83a 	callr	r3
                }
        }
        return rcode;
 4002734:	e0bffa43 	ldbu	r2,-23(fp)
}
 4002738:	e037883a 	mov	sp,fp
 400273c:	dfc00117 	ldw	ra,4(sp)
 4002740:	df000017 	ldw	fp,0(sp)
 4002744:	dec00204 	addi	sp,sp,8
 4002748:	f800283a 	ret

0400274c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 400274c:	deffed04 	addi	sp,sp,-76
 4002750:	dfc01215 	stw	ra,72(sp)
 4002754:	df001115 	stw	fp,68(sp)
 4002758:	df001104 	addi	fp,sp,68
 400275c:	e13ffc15 	stw	r4,-16(fp)
 4002760:	2809883a 	mov	r4,r5
 4002764:	3007883a 	mov	r3,r6
 4002768:	3805883a 	mov	r2,r7
 400276c:	e13ffd05 	stb	r4,-12(fp)
 4002770:	e0fffe05 	stb	r3,-8(fp)
 4002774:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 4002778:	e03ff045 	stb	zero,-63(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 400277c:	e0bff684 	addi	r2,fp,-38
 4002780:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
 4002784:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
 4002788:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
 400278c:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
 4002790:	00800204 	movi	r2,8
 4002794:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
 4002798:	e0fffb83 	ldbu	r3,-18(fp)
 400279c:	00bfff84 	movi	r2,-2
 40027a0:	1884703a 	and	r2,r3,r2
 40027a4:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
 40027a8:	e0fffb83 	ldbu	r3,-18(fp)
 40027ac:	00bfff44 	movi	r2,-3
 40027b0:	1884703a 	and	r2,r3,r2
 40027b4:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 40027b8:	e0bffb83 	ldbu	r2,-18(fp)
 40027bc:	108000cc 	andi	r2,r2,3
 40027c0:	10800f14 	ori	r2,r2,60
 40027c4:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 40027c8:	e13ffc17 	ldw	r4,-16(fp)
 40027cc:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 40027d0:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 40027d4:	e0bff417 	ldw	r2,-48(fp)
 40027d8:	10800017 	ldw	r2,0(r2)
 40027dc:	10800017 	ldw	r2,0(r2)
 40027e0:	000b883a 	mov	r5,zero
 40027e4:	e13ff417 	ldw	r4,-48(fp)
 40027e8:	103ee83a 	callr	r2
 40027ec:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
 40027f0:	e0bff217 	ldw	r2,-56(fp)
 40027f4:	1000021e 	bne	r2,zero,4002800 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40027f8:	00bff584 	movi	r2,-42
 40027fc:	00019206 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 4002800:	e0bff217 	ldw	r2,-56(fp)
 4002804:	10c00003 	ldbu	r3,0(r2)
 4002808:	11000043 	ldbu	r4,1(r2)
 400280c:	2008923a 	slli	r4,r4,8
 4002810:	20c6b03a 	or	r3,r4,r3
 4002814:	11000083 	ldbu	r4,2(r2)
 4002818:	2008943a 	slli	r4,r4,16
 400281c:	20c6b03a 	or	r3,r4,r3
 4002820:	108000c3 	ldbu	r2,3(r2)
 4002824:	1004963a 	slli	r2,r2,24
 4002828:	10c4b03a 	or	r2,r2,r3
 400282c:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 4002830:	e0bff217 	ldw	r2,-56(fp)
 4002834:	e0fffb04 	addi	r3,fp,-20
 4002838:	19803fcc 	andi	r6,r3,255
 400283c:	11000003 	ldbu	r4,0(r2)
 4002840:	2008703a 	and	r4,r4,zero
 4002844:	200b883a 	mov	r5,r4
 4002848:	3009883a 	mov	r4,r6
 400284c:	2908b03a 	or	r4,r5,r4
 4002850:	11000005 	stb	r4,0(r2)
 4002854:	1808d23a 	srli	r4,r3,8
 4002858:	21803fcc 	andi	r6,r4,255
 400285c:	11000043 	ldbu	r4,1(r2)
 4002860:	2008703a 	and	r4,r4,zero
 4002864:	200b883a 	mov	r5,r4
 4002868:	3009883a 	mov	r4,r6
 400286c:	2908b03a 	or	r4,r5,r4
 4002870:	11000045 	stb	r4,1(r2)
 4002874:	1808d43a 	srli	r4,r3,16
 4002878:	21803fcc 	andi	r6,r4,255
 400287c:	11000083 	ldbu	r4,2(r2)
 4002880:	2008703a 	and	r4,r4,zero
 4002884:	200b883a 	mov	r5,r4
 4002888:	3009883a 	mov	r4,r6
 400288c:	2908b03a 	or	r4,r5,r4
 4002890:	11000085 	stb	r4,2(r2)
 4002894:	180ad63a 	srli	r5,r3,24
 4002898:	10c000c3 	ldbu	r3,3(r2)
 400289c:	1806703a 	and	r3,r3,zero
 40028a0:	1809883a 	mov	r4,r3
 40028a4:	2807883a 	mov	r3,r5
 40028a8:	20c6b03a 	or	r3,r4,r3
 40028ac:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
 40028b0:	e0bff217 	ldw	r2,-56(fp)
 40028b4:	e0ffff03 	ldbu	r3,-4(fp)
 40028b8:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 40028bc:	00800484 	movi	r2,18
 40028c0:	10ffffcc 	andi	r3,r2,65535
 40028c4:	e0bff684 	addi	r2,fp,-38
 40028c8:	d8800015 	stw	r2,0(sp)
 40028cc:	180f883a 	mov	r7,r3
 40028d0:	000d883a 	mov	r6,zero
 40028d4:	000b883a 	mov	r5,zero
 40028d8:	e13ffc17 	ldw	r4,-16(fp)
 40028dc:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 40028e0:	e0bff045 	stb	r2,-63(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 40028e4:	e0bff217 	ldw	r2,-56(fp)
 40028e8:	e0fff317 	ldw	r3,-52(fp)
 40028ec:	19403fcc 	andi	r5,r3,255
 40028f0:	10c00003 	ldbu	r3,0(r2)
 40028f4:	1806703a 	and	r3,r3,zero
 40028f8:	1809883a 	mov	r4,r3
 40028fc:	2807883a 	mov	r3,r5
 4002900:	20c6b03a 	or	r3,r4,r3
 4002904:	10c00005 	stb	r3,0(r2)
 4002908:	e0fff317 	ldw	r3,-52(fp)
 400290c:	1806d23a 	srli	r3,r3,8
 4002910:	19403fcc 	andi	r5,r3,255
 4002914:	10c00043 	ldbu	r3,1(r2)
 4002918:	1806703a 	and	r3,r3,zero
 400291c:	1809883a 	mov	r4,r3
 4002920:	2807883a 	mov	r3,r5
 4002924:	20c6b03a 	or	r3,r4,r3
 4002928:	10c00045 	stb	r3,1(r2)
 400292c:	e0fff317 	ldw	r3,-52(fp)
 4002930:	1806d43a 	srli	r3,r3,16
 4002934:	19403fcc 	andi	r5,r3,255
 4002938:	10c00083 	ldbu	r3,2(r2)
 400293c:	1806703a 	and	r3,r3,zero
 4002940:	1809883a 	mov	r4,r3
 4002944:	2807883a 	mov	r3,r5
 4002948:	20c6b03a 	or	r3,r4,r3
 400294c:	10c00085 	stb	r3,2(r2)
 4002950:	e0fff317 	ldw	r3,-52(fp)
 4002954:	180ad63a 	srli	r5,r3,24
 4002958:	10c000c3 	ldbu	r3,3(r2)
 400295c:	1806703a 	and	r3,r3,zero
 4002960:	1809883a 	mov	r4,r3
 4002964:	2807883a 	mov	r3,r5
 4002968:	20c6b03a 	or	r3,r4,r3
 400296c:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
 4002970:	e0bff043 	ldbu	r2,-63(fp)
 4002974:	10000226 	beq	r2,zero,4002980 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 4002978:	e0bff043 	ldbu	r2,-63(fp)
 400297c:	00013206 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 4002980:	e0bff117 	ldw	r2,-60(fp)
 4002984:	10c00203 	ldbu	r3,8(r2)
 4002988:	10800243 	ldbu	r2,9(r2)
 400298c:	1004923a 	slli	r2,r2,8
 4002990:	10c4b03a 	or	r2,r2,r3
 4002994:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
 4002998:	e0bff117 	ldw	r2,-60(fp)
 400299c:	10c00283 	ldbu	r3,10(r2)
 40029a0:	108002c3 	ldbu	r2,11(r2)
 40029a4:	1004923a 	slli	r2,r2,8
 40029a8:	10c4b03a 	or	r2,r2,r3
 40029ac:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
 40029b0:	e0bff117 	ldw	r2,-60(fp)
 40029b4:	10800103 	ldbu	r2,4(r2)
 40029b8:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
 40029bc:	e0bff117 	ldw	r2,-60(fp)
 40029c0:	10800143 	ldbu	r2,5(r2)
 40029c4:	e0bff645 	stb	r2,-39(fp)
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 40029c8:	e03ff005 	stb	zero,-64(fp)
 40029cc:	e0bff003 	ldbu	r2,-64(fp)
 40029d0:	10800428 	cmpgeui	r2,r2,16
 40029d4:	1000821e 	bne	r2,zero,4002be0 <_ZN3USB11ConfiguringEhhb+0x494>
                if(!devConfig[devConfigIndex]) continue; // no driver
 40029d8:	e0bff003 	ldbu	r2,-64(fp)
 40029dc:	e0fffc17 	ldw	r3,-16(fp)
 40029e0:	10800784 	addi	r2,r2,30
 40029e4:	1085883a 	add	r2,r2,r2
 40029e8:	1085883a 	add	r2,r2,r2
 40029ec:	1885883a 	add	r2,r3,r2
 40029f0:	10800017 	ldw	r2,0(r2)
 40029f4:	10007226 	beq	r2,zero,4002bc0 <_ZN3USB11ConfiguringEhhb+0x474>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 40029f8:	e0bff003 	ldbu	r2,-64(fp)
 40029fc:	e0fffc17 	ldw	r3,-16(fp)
 4002a00:	10800784 	addi	r2,r2,30
 4002a04:	1085883a 	add	r2,r2,r2
 4002a08:	1085883a 	add	r2,r2,r2
 4002a0c:	1885883a 	add	r2,r3,r2
 4002a10:	10800017 	ldw	r2,0(r2)
 4002a14:	10800017 	ldw	r2,0(r2)
 4002a18:	10800404 	addi	r2,r2,16
 4002a1c:	10c00017 	ldw	r3,0(r2)
 4002a20:	e0bff003 	ldbu	r2,-64(fp)
 4002a24:	e13ffc17 	ldw	r4,-16(fp)
 4002a28:	10800784 	addi	r2,r2,30
 4002a2c:	1085883a 	add	r2,r2,r2
 4002a30:	1085883a 	add	r2,r2,r2
 4002a34:	2085883a 	add	r2,r4,r2
 4002a38:	10800017 	ldw	r2,0(r2)
 4002a3c:	1009883a 	mov	r4,r2
 4002a40:	183ee83a 	callr	r3
 4002a44:	10803fcc 	andi	r2,r2,255
 4002a48:	1004c03a 	cmpne	r2,r2,zero
 4002a4c:	10803fcc 	andi	r2,r2,255
 4002a50:	10005d1e 	bne	r2,zero,4002bc8 <_ZN3USB11ConfiguringEhhb+0x47c>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 4002a54:	e0bff003 	ldbu	r2,-64(fp)
 4002a58:	e0fffc17 	ldw	r3,-16(fp)
 4002a5c:	10800784 	addi	r2,r2,30
 4002a60:	1085883a 	add	r2,r2,r2
 4002a64:	1085883a 	add	r2,r2,r2
 4002a68:	1885883a 	add	r2,r3,r2
 4002a6c:	10800017 	ldw	r2,0(r2)
 4002a70:	10800017 	ldw	r2,0(r2)
 4002a74:	10800804 	addi	r2,r2,32
 4002a78:	10c00017 	ldw	r3,0(r2)
 4002a7c:	e0bff003 	ldbu	r2,-64(fp)
 4002a80:	e13ffc17 	ldw	r4,-16(fp)
 4002a84:	10800784 	addi	r2,r2,30
 4002a88:	1085883a 	add	r2,r2,r2
 4002a8c:	1085883a 	add	r2,r2,r2
 4002a90:	2085883a 	add	r2,r4,r2
 4002a94:	10800017 	ldw	r2,0(r2)
 4002a98:	e13ff643 	ldbu	r4,-39(fp)
 4002a9c:	200b883a 	mov	r5,r4
 4002aa0:	1009883a 	mov	r4,r2
 4002aa4:	183ee83a 	callr	r3
 4002aa8:	10803fcc 	andi	r2,r2,255
 4002aac:	10003226 	beq	r2,zero,4002b78 <_ZN3USB11ConfiguringEhhb+0x42c>
 4002ab0:	e0bff003 	ldbu	r2,-64(fp)
 4002ab4:	e0fffc17 	ldw	r3,-16(fp)
 4002ab8:	10800784 	addi	r2,r2,30
 4002abc:	1085883a 	add	r2,r2,r2
 4002ac0:	1085883a 	add	r2,r2,r2
 4002ac4:	1885883a 	add	r2,r3,r2
 4002ac8:	10800017 	ldw	r2,0(r2)
 4002acc:	10800017 	ldw	r2,0(r2)
 4002ad0:	10800604 	addi	r2,r2,24
 4002ad4:	10c00017 	ldw	r3,0(r2)
 4002ad8:	e0bff003 	ldbu	r2,-64(fp)
 4002adc:	e13ffc17 	ldw	r4,-16(fp)
 4002ae0:	10800784 	addi	r2,r2,30
 4002ae4:	1085883a 	add	r2,r2,r2
 4002ae8:	1085883a 	add	r2,r2,r2
 4002aec:	2085883a 	add	r2,r4,r2
 4002af0:	10800017 	ldw	r2,0(r2)
 4002af4:	e13ff50b 	ldhu	r4,-44(fp)
 4002af8:	e17ff58b 	ldhu	r5,-42(fp)
 4002afc:	280d883a 	mov	r6,r5
 4002b00:	200b883a 	mov	r5,r4
 4002b04:	1009883a 	mov	r4,r2
 4002b08:	183ee83a 	callr	r3
 4002b0c:	10803fcc 	andi	r2,r2,255
 4002b10:	1000171e 	bne	r2,zero,4002b70 <_ZN3USB11ConfiguringEhhb+0x424>
 4002b14:	e0bff003 	ldbu	r2,-64(fp)
 4002b18:	e0fffc17 	ldw	r3,-16(fp)
 4002b1c:	10800784 	addi	r2,r2,30
 4002b20:	1085883a 	add	r2,r2,r2
 4002b24:	1085883a 	add	r2,r2,r2
 4002b28:	1885883a 	add	r2,r3,r2
 4002b2c:	10800017 	ldw	r2,0(r2)
 4002b30:	10800017 	ldw	r2,0(r2)
 4002b34:	10800704 	addi	r2,r2,28
 4002b38:	10c00017 	ldw	r3,0(r2)
 4002b3c:	e0bff003 	ldbu	r2,-64(fp)
 4002b40:	e13ffc17 	ldw	r4,-16(fp)
 4002b44:	10800784 	addi	r2,r2,30
 4002b48:	1085883a 	add	r2,r2,r2
 4002b4c:	1085883a 	add	r2,r2,r2
 4002b50:	2085883a 	add	r2,r4,r2
 4002b54:	10800017 	ldw	r2,0(r2)
 4002b58:	e13ff603 	ldbu	r4,-40(fp)
 4002b5c:	200b883a 	mov	r5,r4
 4002b60:	1009883a 	mov	r4,r2
 4002b64:	183ee83a 	callr	r3
 4002b68:	10803fcc 	andi	r2,r2,255
 4002b6c:	10000226 	beq	r2,zero,4002b78 <_ZN3USB11ConfiguringEhhb+0x42c>
 4002b70:	00800044 	movi	r2,1
 4002b74:	00000106 	br	4002b7c <_ZN3USB11ConfiguringEhhb+0x430>
 4002b78:	0005883a 	mov	r2,zero
 4002b7c:	10803fcc 	andi	r2,r2,255
 4002b80:	10001226 	beq	r2,zero,4002bcc <_ZN3USB11ConfiguringEhhb+0x480>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 4002b84:	e0fff003 	ldbu	r3,-64(fp)
 4002b88:	e13ffd03 	ldbu	r4,-12(fp)
 4002b8c:	e17ffe03 	ldbu	r5,-8(fp)
 4002b90:	e0bfff03 	ldbu	r2,-4(fp)
 4002b94:	d8800015 	stw	r2,0(sp)
 4002b98:	280f883a 	mov	r7,r5
 4002b9c:	200d883a 	mov	r6,r4
 4002ba0:	180b883a 	mov	r5,r3
 4002ba4:	e13ffc17 	ldw	r4,-16(fp)
 4002ba8:	40024bc0 	call	40024bc <_ZN3USB13AttemptConfigEhhhb>
 4002bac:	e0bff045 	stb	r2,-63(fp)
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 4002bb0:	e0bff043 	ldbu	r2,-63(fp)
 4002bb4:	10803460 	cmpeqi	r2,r2,209
 4002bb8:	10000826 	beq	r2,zero,4002bdc <_ZN3USB11ConfiguringEhhb+0x490>
 4002bbc:	00000306 	br	4002bcc <_ZN3USB11ConfiguringEhhb+0x480>
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue; // no driver
 4002bc0:	0001883a 	nop
 4002bc4:	00000106 	br	4002bcc <_ZN3USB11ConfiguringEhhb+0x480>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002bc8:	0001883a 	nop
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002bcc:	e0bff003 	ldbu	r2,-64(fp)
 4002bd0:	10800044 	addi	r2,r2,1
 4002bd4:	e0bff005 	stb	r2,-64(fp)
 4002bd8:	003f7c06 	br	40029cc <__alt_mem_onchip_memory2_0+0xfc00174c>
                if(!devConfig[devConfigIndex]) continue; // no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
                                break;
 4002bdc:	0001883a 	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 4002be0:	e0bff003 	ldbu	r2,-64(fp)
 4002be4:	10800428 	cmpgeui	r2,r2,16
 4002be8:	1000021e 	bne	r2,zero,4002bf4 <_ZN3USB11ConfiguringEhhb+0x4a8>
                return rcode;
 4002bec:	e0bff043 	ldbu	r2,-63(fp)
 4002bf0:	00009506 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002bf4:	e03ff005 	stb	zero,-64(fp)
 4002bf8:	e0bff003 	ldbu	r2,-64(fp)
 4002bfc:	10800428 	cmpgeui	r2,r2,16
 4002c00:	1000871e 	bne	r2,zero,4002e20 <_ZN3USB11ConfiguringEhhb+0x6d4>
                if(!devConfig[devConfigIndex]) continue;
 4002c04:	e0bff003 	ldbu	r2,-64(fp)
 4002c08:	e0fffc17 	ldw	r3,-16(fp)
 4002c0c:	10800784 	addi	r2,r2,30
 4002c10:	1085883a 	add	r2,r2,r2
 4002c14:	1085883a 	add	r2,r2,r2
 4002c18:	1885883a 	add	r2,r3,r2
 4002c1c:	10800017 	ldw	r2,0(r2)
 4002c20:	10007626 	beq	r2,zero,4002dfc <_ZN3USB11ConfiguringEhhb+0x6b0>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002c24:	e0bff003 	ldbu	r2,-64(fp)
 4002c28:	e0fffc17 	ldw	r3,-16(fp)
 4002c2c:	10800784 	addi	r2,r2,30
 4002c30:	1085883a 	add	r2,r2,r2
 4002c34:	1085883a 	add	r2,r2,r2
 4002c38:	1885883a 	add	r2,r3,r2
 4002c3c:	10800017 	ldw	r2,0(r2)
 4002c40:	10800017 	ldw	r2,0(r2)
 4002c44:	10800404 	addi	r2,r2,16
 4002c48:	10c00017 	ldw	r3,0(r2)
 4002c4c:	e0bff003 	ldbu	r2,-64(fp)
 4002c50:	e13ffc17 	ldw	r4,-16(fp)
 4002c54:	10800784 	addi	r2,r2,30
 4002c58:	1085883a 	add	r2,r2,r2
 4002c5c:	1085883a 	add	r2,r2,r2
 4002c60:	2085883a 	add	r2,r4,r2
 4002c64:	10800017 	ldw	r2,0(r2)
 4002c68:	1009883a 	mov	r4,r2
 4002c6c:	183ee83a 	callr	r3
 4002c70:	10803fcc 	andi	r2,r2,255
 4002c74:	1004c03a 	cmpne	r2,r2,zero
 4002c78:	10803fcc 	andi	r2,r2,255
 4002c7c:	1000611e 	bne	r2,zero,4002e04 <_ZN3USB11ConfiguringEhhb+0x6b8>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 4002c80:	e0bff003 	ldbu	r2,-64(fp)
 4002c84:	e0fffc17 	ldw	r3,-16(fp)
 4002c88:	10800784 	addi	r2,r2,30
 4002c8c:	1085883a 	add	r2,r2,r2
 4002c90:	1085883a 	add	r2,r2,r2
 4002c94:	1885883a 	add	r2,r3,r2
 4002c98:	10800017 	ldw	r2,0(r2)
 4002c9c:	10800017 	ldw	r2,0(r2)
 4002ca0:	10800804 	addi	r2,r2,32
 4002ca4:	10c00017 	ldw	r3,0(r2)
 4002ca8:	e0bff003 	ldbu	r2,-64(fp)
 4002cac:	e13ffc17 	ldw	r4,-16(fp)
 4002cb0:	10800784 	addi	r2,r2,30
 4002cb4:	1085883a 	add	r2,r2,r2
 4002cb8:	1085883a 	add	r2,r2,r2
 4002cbc:	2085883a 	add	r2,r4,r2
 4002cc0:	10800017 	ldw	r2,0(r2)
 4002cc4:	e13ff643 	ldbu	r4,-39(fp)
 4002cc8:	200b883a 	mov	r5,r4
 4002ccc:	1009883a 	mov	r4,r2
 4002cd0:	183ee83a 	callr	r3
 4002cd4:	10803fcc 	andi	r2,r2,255
 4002cd8:	10003226 	beq	r2,zero,4002da4 <_ZN3USB11ConfiguringEhhb+0x658>
 4002cdc:	e0bff003 	ldbu	r2,-64(fp)
 4002ce0:	e0fffc17 	ldw	r3,-16(fp)
 4002ce4:	10800784 	addi	r2,r2,30
 4002ce8:	1085883a 	add	r2,r2,r2
 4002cec:	1085883a 	add	r2,r2,r2
 4002cf0:	1885883a 	add	r2,r3,r2
 4002cf4:	10800017 	ldw	r2,0(r2)
 4002cf8:	10800017 	ldw	r2,0(r2)
 4002cfc:	10800604 	addi	r2,r2,24
 4002d00:	10c00017 	ldw	r3,0(r2)
 4002d04:	e0bff003 	ldbu	r2,-64(fp)
 4002d08:	e13ffc17 	ldw	r4,-16(fp)
 4002d0c:	10800784 	addi	r2,r2,30
 4002d10:	1085883a 	add	r2,r2,r2
 4002d14:	1085883a 	add	r2,r2,r2
 4002d18:	2085883a 	add	r2,r4,r2
 4002d1c:	10800017 	ldw	r2,0(r2)
 4002d20:	e13ff50b 	ldhu	r4,-44(fp)
 4002d24:	e17ff58b 	ldhu	r5,-42(fp)
 4002d28:	280d883a 	mov	r6,r5
 4002d2c:	200b883a 	mov	r5,r4
 4002d30:	1009883a 	mov	r4,r2
 4002d34:	183ee83a 	callr	r3
 4002d38:	10803fcc 	andi	r2,r2,255
 4002d3c:	1000171e 	bne	r2,zero,4002d9c <_ZN3USB11ConfiguringEhhb+0x650>
 4002d40:	e0bff003 	ldbu	r2,-64(fp)
 4002d44:	e0fffc17 	ldw	r3,-16(fp)
 4002d48:	10800784 	addi	r2,r2,30
 4002d4c:	1085883a 	add	r2,r2,r2
 4002d50:	1085883a 	add	r2,r2,r2
 4002d54:	1885883a 	add	r2,r3,r2
 4002d58:	10800017 	ldw	r2,0(r2)
 4002d5c:	10800017 	ldw	r2,0(r2)
 4002d60:	10800704 	addi	r2,r2,28
 4002d64:	10c00017 	ldw	r3,0(r2)
 4002d68:	e0bff003 	ldbu	r2,-64(fp)
 4002d6c:	e13ffc17 	ldw	r4,-16(fp)
 4002d70:	10800784 	addi	r2,r2,30
 4002d74:	1085883a 	add	r2,r2,r2
 4002d78:	1085883a 	add	r2,r2,r2
 4002d7c:	2085883a 	add	r2,r4,r2
 4002d80:	10800017 	ldw	r2,0(r2)
 4002d84:	e13ff603 	ldbu	r4,-40(fp)
 4002d88:	200b883a 	mov	r5,r4
 4002d8c:	1009883a 	mov	r4,r2
 4002d90:	183ee83a 	callr	r3
 4002d94:	10803fcc 	andi	r2,r2,255
 4002d98:	10000226 	beq	r2,zero,4002da4 <_ZN3USB11ConfiguringEhhb+0x658>
 4002d9c:	00800044 	movi	r2,1
 4002da0:	00000106 	br	4002da8 <_ZN3USB11ConfiguringEhhb+0x65c>
 4002da4:	0005883a 	mov	r2,zero
 4002da8:	10803fcc 	andi	r2,r2,255
 4002dac:	1000171e 	bne	r2,zero,4002e0c <_ZN3USB11ConfiguringEhhb+0x6c0>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 4002db0:	e0fff003 	ldbu	r3,-64(fp)
 4002db4:	e13ffd03 	ldbu	r4,-12(fp)
 4002db8:	e17ffe03 	ldbu	r5,-8(fp)
 4002dbc:	e0bfff03 	ldbu	r2,-4(fp)
 4002dc0:	d8800015 	stw	r2,0(sp)
 4002dc4:	280f883a 	mov	r7,r5
 4002dc8:	200d883a 	mov	r6,r4
 4002dcc:	180b883a 	mov	r5,r3
 4002dd0:	e13ffc17 	ldw	r4,-16(fp)
 4002dd4:	40024bc0 	call	40024bc <_ZN3USB13AttemptConfigEhhhb>
 4002dd8:	e0bff045 	stb	r2,-63(fp)

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 4002ddc:	e0bff043 	ldbu	r2,-63(fp)
 4002de0:	10803460 	cmpeqi	r2,r2,209
 4002de4:	10000a1e 	bne	r2,zero,4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
 4002de8:	e0bff043 	ldbu	r2,-63(fp)
 4002dec:	10803660 	cmpeqi	r2,r2,217
 4002df0:	1000071e 	bne	r2,zero,4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 4002df4:	e0bff043 	ldbu	r2,-63(fp)
 4002df8:	00001306 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;
 4002dfc:	0001883a 	nop
 4002e00:	00000306 	br	4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002e04:	0001883a 	nop
 4002e08:	00000106 	br	4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 4002e0c:	0001883a 	nop
                return rcode;
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002e10:	e0bff003 	ldbu	r2,-64(fp)
 4002e14:	10800044 	addi	r2,r2,1
 4002e18:	e0bff005 	stb	r2,-64(fp)
 4002e1c:	003f7606 	br	4002bf8 <__alt_mem_onchip_memory2_0+0xfc001978>
                        //        devConfigIndex = 0;
                        return rcode;
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 4002e20:	e0bffd03 	ldbu	r2,-12(fp)
 4002e24:	e0fffe03 	ldbu	r3,-8(fp)
 4002e28:	e13fff03 	ldbu	r4,-4(fp)
 4002e2c:	200f883a 	mov	r7,r4
 4002e30:	180d883a 	mov	r6,r3
 4002e34:	100b883a 	mov	r5,r2
 4002e38:	e13ffc17 	ldw	r4,-16(fp)
 4002e3c:	400235c0 	call	400235c <_ZN3USB17DefaultAddressingEhhb>
 4002e40:	e0bff045 	stb	r2,-63(fp)

        return rcode;
 4002e44:	e0bff043 	ldbu	r2,-63(fp)
}
 4002e48:	e037883a 	mov	sp,fp
 4002e4c:	dfc00117 	ldw	ra,4(sp)
 4002e50:	df000017 	ldw	fp,0(sp)
 4002e54:	dec00204 	addi	sp,sp,8
 4002e58:	f800283a 	ret

04002e5c <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
 4002e5c:	defffb04 	addi	sp,sp,-20
 4002e60:	dfc00415 	stw	ra,16(sp)
 4002e64:	df000315 	stw	fp,12(sp)
 4002e68:	df000304 	addi	fp,sp,12
 4002e6c:	e13ffe15 	stw	r4,-8(fp)
 4002e70:	2805883a 	mov	r2,r5
 4002e74:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
 4002e78:	e0bfff03 	ldbu	r2,-4(fp)
 4002e7c:	1000021e 	bne	r2,zero,4002e88 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
 4002e80:	0005883a 	mov	r2,zero
 4002e84:	00003e06 	br	4002f80 <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 4002e88:	e03ffd05 	stb	zero,-12(fp)
 4002e8c:	e0bffd03 	ldbu	r2,-12(fp)
 4002e90:	10800428 	cmpgeui	r2,r2,16
 4002e94:	1000391e 	bne	r2,zero,4002f7c <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
 4002e98:	e0bffd03 	ldbu	r2,-12(fp)
 4002e9c:	e0fffe17 	ldw	r3,-8(fp)
 4002ea0:	10800784 	addi	r2,r2,30
 4002ea4:	1085883a 	add	r2,r2,r2
 4002ea8:	1085883a 	add	r2,r2,r2
 4002eac:	1885883a 	add	r2,r3,r2
 4002eb0:	10800017 	ldw	r2,0(r2)
 4002eb4:	10002c26 	beq	r2,zero,4002f68 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
 4002eb8:	e0bffd03 	ldbu	r2,-12(fp)
 4002ebc:	e0fffe17 	ldw	r3,-8(fp)
 4002ec0:	10800784 	addi	r2,r2,30
 4002ec4:	1085883a 	add	r2,r2,r2
 4002ec8:	1085883a 	add	r2,r2,r2
 4002ecc:	1885883a 	add	r2,r3,r2
 4002ed0:	10800017 	ldw	r2,0(r2)
 4002ed4:	10800017 	ldw	r2,0(r2)
 4002ed8:	10800404 	addi	r2,r2,16
 4002edc:	10c00017 	ldw	r3,0(r2)
 4002ee0:	e0bffd03 	ldbu	r2,-12(fp)
 4002ee4:	e13ffe17 	ldw	r4,-8(fp)
 4002ee8:	10800784 	addi	r2,r2,30
 4002eec:	1085883a 	add	r2,r2,r2
 4002ef0:	1085883a 	add	r2,r2,r2
 4002ef4:	2085883a 	add	r2,r4,r2
 4002ef8:	10800017 	ldw	r2,0(r2)
 4002efc:	1009883a 	mov	r4,r2
 4002f00:	183ee83a 	callr	r3
 4002f04:	10c03fcc 	andi	r3,r2,255
 4002f08:	e0bfff03 	ldbu	r2,-4(fp)
 4002f0c:	1885003a 	cmpeq	r2,r3,r2
 4002f10:	10803fcc 	andi	r2,r2,255
 4002f14:	10001526 	beq	r2,zero,4002f6c <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
 4002f18:	e0bffd03 	ldbu	r2,-12(fp)
 4002f1c:	e0fffe17 	ldw	r3,-8(fp)
 4002f20:	10800784 	addi	r2,r2,30
 4002f24:	1085883a 	add	r2,r2,r2
 4002f28:	1085883a 	add	r2,r2,r2
 4002f2c:	1885883a 	add	r2,r3,r2
 4002f30:	10800017 	ldw	r2,0(r2)
 4002f34:	10800017 	ldw	r2,0(r2)
 4002f38:	10800204 	addi	r2,r2,8
 4002f3c:	10c00017 	ldw	r3,0(r2)
 4002f40:	e0bffd03 	ldbu	r2,-12(fp)
 4002f44:	e13ffe17 	ldw	r4,-8(fp)
 4002f48:	10800784 	addi	r2,r2,30
 4002f4c:	1085883a 	add	r2,r2,r2
 4002f50:	1085883a 	add	r2,r2,r2
 4002f54:	2085883a 	add	r2,r4,r2
 4002f58:	10800017 	ldw	r2,0(r2)
 4002f5c:	1009883a 	mov	r4,r2
 4002f60:	183ee83a 	callr	r3
 4002f64:	00000606 	br	4002f80 <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
 4002f68:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 4002f6c:	e0bffd03 	ldbu	r2,-12(fp)
 4002f70:	10800044 	addi	r2,r2,1
 4002f74:	e0bffd05 	stb	r2,-12(fp)
 4002f78:	003fc406 	br	4002e8c <__alt_mem_onchip_memory2_0+0xfc001c0c>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
 4002f7c:	0005883a 	mov	r2,zero
}
 4002f80:	e037883a 	mov	sp,fp
 4002f84:	dfc00117 	ldw	ra,4(sp)
 4002f88:	df000017 	ldw	fp,0(sp)
 4002f8c:	dec00204 	addi	sp,sp,8
 4002f90:	f800283a 	ret

04002f94 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 4002f94:	defff204 	addi	sp,sp,-56
 4002f98:	dfc00d15 	stw	ra,52(sp)
 4002f9c:	df000c15 	stw	fp,48(sp)
 4002fa0:	df000c04 	addi	fp,sp,48
 4002fa4:	e13ffc15 	stw	r4,-16(fp)
 4002fa8:	2809883a 	mov	r4,r5
 4002fac:	3007883a 	mov	r3,r6
 4002fb0:	3805883a 	mov	r2,r7
 4002fb4:	e13ffd05 	stb	r4,-12(fp)
 4002fb8:	e0fffe05 	stb	r3,-8(fp)
 4002fbc:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 4002fc0:	e17ffd03 	ldbu	r5,-12(fp)
 4002fc4:	e1bffe03 	ldbu	r6,-8(fp)
 4002fc8:	e0bfff0b 	ldhu	r2,-4(fp)
 4002fcc:	e0ffff0b 	ldhu	r3,-4(fp)
 4002fd0:	d8000715 	stw	zero,28(sp)
 4002fd4:	e1000217 	ldw	r4,8(fp)
 4002fd8:	d9000615 	stw	r4,24(sp)
 4002fdc:	d8c00515 	stw	r3,20(sp)
 4002fe0:	d8800415 	stw	r2,16(sp)
 4002fe4:	d8000315 	stw	zero,12(sp)
 4002fe8:	00800044 	movi	r2,1
 4002fec:	d8800215 	stw	r2,8(sp)
 4002ff0:	d8000115 	stw	zero,4(sp)
 4002ff4:	00800184 	movi	r2,6
 4002ff8:	d8800015 	stw	r2,0(sp)
 4002ffc:	01c02004 	movi	r7,128
 4003000:	e13ffc17 	ldw	r4,-16(fp)
 4003004:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4003008:	e037883a 	mov	sp,fp
 400300c:	dfc00117 	ldw	ra,4(sp)
 4003010:	df000017 	ldw	fp,0(sp)
 4003014:	dec00204 	addi	sp,sp,8
 4003018:	f800283a 	ret

0400301c <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 400301c:	defff104 	addi	sp,sp,-60
 4003020:	dfc00e15 	stw	ra,56(sp)
 4003024:	df000d15 	stw	fp,52(sp)
 4003028:	df000d04 	addi	fp,sp,52
 400302c:	e13ffb15 	stw	r4,-20(fp)
 4003030:	3009883a 	mov	r4,r6
 4003034:	3807883a 	mov	r3,r7
 4003038:	e0800217 	ldw	r2,8(fp)
 400303c:	e17ffc05 	stb	r5,-16(fp)
 4003040:	e13ffd05 	stb	r4,-12(fp)
 4003044:	e0fffe0d 	sth	r3,-8(fp)
 4003048:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 400304c:	e23ffc03 	ldbu	r8,-16(fp)
 4003050:	e1bffd03 	ldbu	r6,-12(fp)
 4003054:	e0bfff03 	ldbu	r2,-4(fp)
 4003058:	e0fffe0b 	ldhu	r3,-8(fp)
 400305c:	e13ffe0b 	ldhu	r4,-8(fp)
 4003060:	d8000715 	stw	zero,28(sp)
 4003064:	e1400317 	ldw	r5,12(fp)
 4003068:	d9400615 	stw	r5,24(sp)
 400306c:	d9000515 	stw	r4,20(sp)
 4003070:	d8c00415 	stw	r3,16(sp)
 4003074:	d8000315 	stw	zero,12(sp)
 4003078:	00c00084 	movi	r3,2
 400307c:	d8c00215 	stw	r3,8(sp)
 4003080:	d8800115 	stw	r2,4(sp)
 4003084:	00800184 	movi	r2,6
 4003088:	d8800015 	stw	r2,0(sp)
 400308c:	01c02004 	movi	r7,128
 4003090:	400b883a 	mov	r5,r8
 4003094:	e13ffb17 	ldw	r4,-20(fp)
 4003098:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 400309c:	e037883a 	mov	sp,fp
 40030a0:	dfc00117 	ldw	ra,4(sp)
 40030a4:	df000017 	ldw	fp,0(sp)
 40030a8:	dec00204 	addi	sp,sp,8
 40030ac:	f800283a 	ret

040030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 40030b0:	deffdf04 	addi	sp,sp,-132
 40030b4:	dfc02015 	stw	ra,128(sp)
 40030b8:	df001f15 	stw	fp,124(sp)
 40030bc:	df001f04 	addi	fp,sp,124
 40030c0:	e13ffc15 	stw	r4,-16(fp)
 40030c4:	2809883a 	mov	r4,r5
 40030c8:	3007883a 	mov	r3,r6
 40030cc:	3805883a 	mov	r2,r7
 40030d0:	e13ffd05 	stb	r4,-12(fp)
 40030d4:	e0fffe05 	stb	r3,-8(fp)
 40030d8:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
 40030dc:	00801004 	movi	r2,64
 40030e0:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 40030e4:	e0bfec04 	addi	r2,fp,-80
 40030e8:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 40030ec:	e13ffd03 	ldbu	r4,-12(fp)
 40030f0:	e17ffe03 	ldbu	r5,-8(fp)
 40030f4:	e0bfff03 	ldbu	r2,-4(fp)
 40030f8:	e0ffec04 	addi	r3,fp,-80
 40030fc:	d8c00115 	stw	r3,4(sp)
 4003100:	d8800015 	stw	r2,0(sp)
 4003104:	01c00244 	movi	r7,9
 4003108:	280d883a 	mov	r6,r5
 400310c:	200b883a 	mov	r5,r4
 4003110:	e13ffc17 	ldw	r4,-16(fp)
 4003114:	400301c0 	call	400301c <_ZN3USB12getConfDescrEhhthPh>
 4003118:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
 400311c:	e0bfeb03 	ldbu	r2,-84(fp)
 4003120:	10000226 	beq	r2,zero,400312c <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
 4003124:	e0bfeb03 	ldbu	r2,-84(fp)
 4003128:	00001a06 	br	4003194 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
 400312c:	e0bfea17 	ldw	r2,-88(fp)
 4003130:	10c00083 	ldbu	r3,2(r2)
 4003134:	108000c3 	ldbu	r2,3(r2)
 4003138:	1004923a 	slli	r2,r2,8
 400313c:	10c4b03a 	or	r2,r2,r3
 4003140:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 4003144:	e17ffd03 	ldbu	r5,-12(fp)
 4003148:	e1bffe03 	ldbu	r6,-8(fp)
 400314c:	e0bfff03 	ldbu	r2,-4(fp)
 4003150:	e0ffeb8b 	ldhu	r3,-82(fp)
 4003154:	e1000217 	ldw	r4,8(fp)
 4003158:	d9000715 	stw	r4,28(sp)
 400315c:	e13fec04 	addi	r4,fp,-80
 4003160:	d9000615 	stw	r4,24(sp)
 4003164:	01001004 	movi	r4,64
 4003168:	d9000515 	stw	r4,20(sp)
 400316c:	d8c00415 	stw	r3,16(sp)
 4003170:	d8000315 	stw	zero,12(sp)
 4003174:	00c00084 	movi	r3,2
 4003178:	d8c00215 	stw	r3,8(sp)
 400317c:	d8800115 	stw	r2,4(sp)
 4003180:	00800184 	movi	r2,6
 4003184:	d8800015 	stw	r2,0(sp)
 4003188:	01c02004 	movi	r7,128
 400318c:	e13ffc17 	ldw	r4,-16(fp)
 4003190:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4003194:	e037883a 	mov	sp,fp
 4003198:	dfc00117 	ldw	ra,4(sp)
 400319c:	df000017 	ldw	fp,0(sp)
 40031a0:	dec00204 	addi	sp,sp,8
 40031a4:	f800283a 	ret

040031a8 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
 40031a8:	defff004 	addi	sp,sp,-64
 40031ac:	dfc00f15 	stw	ra,60(sp)
 40031b0:	df000e15 	stw	fp,56(sp)
 40031b4:	df000e04 	addi	fp,sp,56
 40031b8:	e13ffa15 	stw	r4,-24(fp)
 40031bc:	2811883a 	mov	r8,r5
 40031c0:	300b883a 	mov	r5,r6
 40031c4:	3809883a 	mov	r4,r7
 40031c8:	e0c00217 	ldw	r3,8(fp)
 40031cc:	e0800317 	ldw	r2,12(fp)
 40031d0:	e23ffb05 	stb	r8,-20(fp)
 40031d4:	e17ffc05 	stb	r5,-16(fp)
 40031d8:	e13ffd0d 	sth	r4,-12(fp)
 40031dc:	e0fffe05 	stb	r3,-8(fp)
 40031e0:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
 40031e4:	e23ffb03 	ldbu	r8,-20(fp)
 40031e8:	e27ffc03 	ldbu	r9,-16(fp)
 40031ec:	e0bffe03 	ldbu	r2,-8(fp)
 40031f0:	e0ffff0b 	ldhu	r3,-4(fp)
 40031f4:	e13ffd0b 	ldhu	r4,-12(fp)
 40031f8:	e17ffd0b 	ldhu	r5,-12(fp)
 40031fc:	d8000715 	stw	zero,28(sp)
 4003200:	e1800417 	ldw	r6,16(fp)
 4003204:	d9800615 	stw	r6,24(sp)
 4003208:	d9400515 	stw	r5,20(sp)
 400320c:	d9000415 	stw	r4,16(sp)
 4003210:	d8c00315 	stw	r3,12(sp)
 4003214:	00c000c4 	movi	r3,3
 4003218:	d8c00215 	stw	r3,8(sp)
 400321c:	d8800115 	stw	r2,4(sp)
 4003220:	00800184 	movi	r2,6
 4003224:	d8800015 	stw	r2,0(sp)
 4003228:	01c02004 	movi	r7,128
 400322c:	480d883a 	mov	r6,r9
 4003230:	400b883a 	mov	r5,r8
 4003234:	e13ffa17 	ldw	r4,-24(fp)
 4003238:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 400323c:	e037883a 	mov	sp,fp
 4003240:	dfc00117 	ldw	ra,4(sp)
 4003244:	df000017 	ldw	fp,0(sp)
 4003248:	dec00204 	addi	sp,sp,8
 400324c:	f800283a 	ret

04003250 <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 4003250:	defff104 	addi	sp,sp,-60
 4003254:	dfc00e15 	stw	ra,56(sp)
 4003258:	df000d15 	stw	fp,52(sp)
 400325c:	df000d04 	addi	fp,sp,52
 4003260:	e13ffc15 	stw	r4,-16(fp)
 4003264:	2809883a 	mov	r4,r5
 4003268:	3007883a 	mov	r3,r6
 400326c:	3805883a 	mov	r2,r7
 4003270:	e13ffd05 	stb	r4,-12(fp)
 4003274:	e0fffe05 	stb	r3,-8(fp)
 4003278:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 400327c:	e0fffd03 	ldbu	r3,-12(fp)
 4003280:	e13ffe03 	ldbu	r4,-8(fp)
 4003284:	e0bfff03 	ldbu	r2,-4(fp)
 4003288:	d8000715 	stw	zero,28(sp)
 400328c:	d8000615 	stw	zero,24(sp)
 4003290:	d8000515 	stw	zero,20(sp)
 4003294:	d8000415 	stw	zero,16(sp)
 4003298:	d8000315 	stw	zero,12(sp)
 400329c:	d8000215 	stw	zero,8(sp)
 40032a0:	d8800115 	stw	r2,4(sp)
 40032a4:	00800144 	movi	r2,5
 40032a8:	d8800015 	stw	r2,0(sp)
 40032ac:	000f883a 	mov	r7,zero
 40032b0:	200d883a 	mov	r6,r4
 40032b4:	180b883a 	mov	r5,r3
 40032b8:	e13ffc17 	ldw	r4,-16(fp)
 40032bc:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 40032c0:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 40032c4:	01004b04 	movi	r4,300
 40032c8:	4000dd40 	call	4000dd4 <_Z5delaym>
        return rcode;
 40032cc:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 40032d0:	e037883a 	mov	sp,fp
 40032d4:	dfc00117 	ldw	ra,4(sp)
 40032d8:	df000017 	ldw	fp,0(sp)
 40032dc:	dec00204 	addi	sp,sp,8
 40032e0:	f800283a 	ret

040032e4 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 40032e4:	defff204 	addi	sp,sp,-56
 40032e8:	dfc00d15 	stw	ra,52(sp)
 40032ec:	df000c15 	stw	fp,48(sp)
 40032f0:	df000c04 	addi	fp,sp,48
 40032f4:	e13ffc15 	stw	r4,-16(fp)
 40032f8:	2809883a 	mov	r4,r5
 40032fc:	3007883a 	mov	r3,r6
 4003300:	3805883a 	mov	r2,r7
 4003304:	e13ffd05 	stb	r4,-12(fp)
 4003308:	e0fffe05 	stb	r3,-8(fp)
 400330c:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 4003310:	e0fffd03 	ldbu	r3,-12(fp)
 4003314:	e13ffe03 	ldbu	r4,-8(fp)
 4003318:	e0bfff03 	ldbu	r2,-4(fp)
 400331c:	d8000715 	stw	zero,28(sp)
 4003320:	d8000615 	stw	zero,24(sp)
 4003324:	d8000515 	stw	zero,20(sp)
 4003328:	d8000415 	stw	zero,16(sp)
 400332c:	d8000315 	stw	zero,12(sp)
 4003330:	d8000215 	stw	zero,8(sp)
 4003334:	d8800115 	stw	r2,4(sp)
 4003338:	00800244 	movi	r2,9
 400333c:	d8800015 	stw	r2,0(sp)
 4003340:	000f883a 	mov	r7,zero
 4003344:	200d883a 	mov	r6,r4
 4003348:	180b883a 	mov	r5,r3
 400334c:	e13ffc17 	ldw	r4,-16(fp)
 4003350:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4003354:	e037883a 	mov	sp,fp
 4003358:	dfc00117 	ldw	ra,4(sp)
 400335c:	df000017 	ldw	fp,0(sp)
 4003360:	dec00204 	addi	sp,sp,8
 4003364:	f800283a 	ret

04003368 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 4003368:	defffe04 	addi	sp,sp,-8
 400336c:	df000115 	stw	fp,4(sp)
 4003370:	df000104 	addi	fp,sp,4
 4003374:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
 4003378:	e0bfff17 	ldw	r2,-4(fp)
        };
 400337c:	e037883a 	mov	sp,fp
 4003380:	df000017 	ldw	fp,0(sp)
 4003384:	dec00104 	addi	sp,sp,4
 4003388:	f800283a 	ret

0400338c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 400338c:	defffe04 	addi	sp,sp,-8
 4003390:	df000115 	stw	fp,4(sp)
 4003394:	df000104 	addi	fp,sp,4
 4003398:	e13fff15 	stw	r4,-4(fp)
 400339c:	008100b4 	movhi	r2,1026
 40033a0:	10812904 	addi	r2,r2,1188
 40033a4:	e0ffff17 	ldw	r3,-4(fp)
 40033a8:	18800015 	stw	r2,0(r3)
 40033ac:	0001883a 	nop
 40033b0:	e037883a 	mov	sp,fp
 40033b4:	df000017 	ldw	fp,0(sp)
 40033b8:	dec00104 	addi	sp,sp,4
 40033bc:	f800283a 	ret

040033c0 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 40033c0:	defffd04 	addi	sp,sp,-12
 40033c4:	dfc00215 	stw	ra,8(sp)
 40033c8:	df000115 	stw	fp,4(sp)
 40033cc:	df000104 	addi	fp,sp,4
 40033d0:	e13fff15 	stw	r4,-4(fp)
 40033d4:	e0bfff17 	ldw	r2,-4(fp)
 40033d8:	1009883a 	mov	r4,r2
 40033dc:	400338c0 	call	400338c <_ZN11AddressPoolC1Ev>
 40033e0:	008100b4 	movhi	r2,1026
 40033e4:	10812404 	addi	r2,r2,1168
 40033e8:	e0ffff17 	ldw	r3,-4(fp)
 40033ec:	18800015 	stw	r2,0(r3)
 40033f0:	e0bfff17 	ldw	r2,-4(fp)
 40033f4:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
 40033f8:	000b883a 	mov	r5,zero
 40033fc:	e13fff17 	ldw	r4,-4(fp)
 4003400:	40038100 	call	4003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 4003404:	e0bfff17 	ldw	r2,-4(fp)
 4003408:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
 400340c:	e0bfff17 	ldw	r2,-4(fp)
 4003410:	10c00104 	addi	r3,r2,4
 4003414:	e0bfff17 	ldw	r2,-4(fp)
 4003418:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
 400341c:	e0bfff17 	ldw	r2,-4(fp)
 4003420:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
 4003424:	e0bfff17 	ldw	r2,-4(fp)
 4003428:	00c00204 	movi	r3,8
 400342c:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 4003430:	e0bfff17 	ldw	r2,-4(fp)
 4003434:	11000183 	ldbu	r4,6(r2)
 4003438:	00ffff84 	movi	r3,-2
 400343c:	20c6703a 	and	r3,r4,r3
 4003440:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
 4003444:	e0bfff17 	ldw	r2,-4(fp)
 4003448:	11000183 	ldbu	r4,6(r2)
 400344c:	00ffff44 	movi	r3,-3
 4003450:	20c6703a 	and	r3,r4,r3
 4003454:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 4003458:	e0bfff17 	ldw	r2,-4(fp)
 400345c:	10c00183 	ldbu	r3,6(r2)
 4003460:	18c000cc 	andi	r3,r3,3
 4003464:	18c00f14 	ori	r3,r3,60
 4003468:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
 400346c:	e13fff17 	ldw	r4,-4(fp)
 4003470:	40039540 	call	4003954 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 4003474:	0001883a 	nop
 4003478:	e037883a 	mov	sp,fp
 400347c:	dfc00117 	ldw	ra,4(sp)
 4003480:	df000017 	ldw	fp,0(sp)
 4003484:	dec00204 	addi	sp,sp,8
 4003488:	f800283a 	ret

0400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 400348c:	defffa04 	addi	sp,sp,-24
 4003490:	dfc00515 	stw	ra,20(sp)
 4003494:	df000415 	stw	fp,16(sp)
 4003498:	dc000315 	stw	r16,12(sp)
 400349c:	df000404 	addi	fp,sp,16
 40034a0:	e13ffd15 	stw	r4,-12(fp)
 40034a4:	2805883a 	mov	r2,r5
 40034a8:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
 40034ac:	e0bffe03 	ldbu	r2,-8(fp)
 40034b0:	1000031e 	bne	r2,zero,40034c0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
 40034b4:	e0bffd17 	ldw	r2,-12(fp)
 40034b8:	10800204 	addi	r2,r2,8
 40034bc:	00001006 	br	4003500 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
 40034c0:	e0bffe03 	ldbu	r2,-8(fp)
 40034c4:	100b883a 	mov	r5,r2
 40034c8:	e13ffd17 	ldw	r4,-12(fp)
 40034cc:	40039bc0 	call	40039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 40034d0:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
 40034d4:	e0bffc03 	ldbu	r2,-16(fp)
 40034d8:	10000826 	beq	r2,zero,40034fc <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
 40034dc:	e0bffd17 	ldw	r2,-12(fp)
 40034e0:	14000204 	addi	r16,r2,8
 40034e4:	e0bffc03 	ldbu	r2,-16(fp)
 40034e8:	014001c4 	movi	r5,7
 40034ec:	1009883a 	mov	r4,r2
 40034f0:	400d2c40 	call	400d2c4 <__mulsi3>
 40034f4:	8085883a 	add	r2,r16,r2
 40034f8:	00000106 	br	4003500 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
 40034fc:	0005883a 	mov	r2,zero
        };
 4003500:	e6ffff04 	addi	sp,fp,-4
 4003504:	dfc00217 	ldw	ra,8(sp)
 4003508:	df000117 	ldw	fp,4(sp)
 400350c:	dc000017 	ldw	r16,0(sp)
 4003510:	dec00304 	addi	sp,sp,12
 4003514:	f800283a 	ret

04003518 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 4003518:	defffd04 	addi	sp,sp,-12
 400351c:	df000215 	stw	fp,8(sp)
 4003520:	df000204 	addi	fp,sp,8
 4003524:	2005883a 	mov	r2,r4
 4003528:	e17fff15 	stw	r5,-4(fp)
 400352c:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 4003530:	0001883a 	nop
 4003534:	e037883a 	mov	sp,fp
 4003538:	df000017 	ldw	fp,0(sp)
 400353c:	dec00104 	addi	sp,sp,4
 4003540:	f800283a 	ret

04003544 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 4003544:	defff804 	addi	sp,sp,-32
 4003548:	dfc00715 	stw	ra,28(sp)
 400354c:	df000615 	stw	fp,24(sp)
 4003550:	dc000515 	stw	r16,20(sp)
 4003554:	df000604 	addi	fp,sp,24
 4003558:	e13ffb15 	stw	r4,-20(fp)
 400355c:	2809883a 	mov	r4,r5
 4003560:	3007883a 	mov	r3,r6
 4003564:	3805883a 	mov	r2,r7
 4003568:	e13ffc05 	stb	r4,-16(fp)
 400356c:	e0fffd05 	stb	r3,-12(fp)
 4003570:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 4003574:	e0bffc03 	ldbu	r2,-16(fp)
 4003578:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
 400357c:	e0fffa43 	ldbu	r3,-23(fp)
 4003580:	00bfe004 	movi	r2,-128
 4003584:	1884703a 	and	r2,r3,r2
 4003588:	10803fcc 	andi	r2,r2,255
 400358c:	1000031e 	bne	r2,zero,400359c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
 4003590:	e0bffe03 	ldbu	r2,-8(fp)
 4003594:	10800230 	cmpltui	r2,r2,8
 4003598:	1000021e 	bne	r2,zero,40035a4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
 400359c:	0005883a 	mov	r2,zero
 40035a0:	00007a06 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
 40035a4:	e0bffd03 	ldbu	r2,-12(fp)
 40035a8:	10000726 	beq	r2,zero,40035c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
 40035ac:	e0bffb17 	ldw	r2,-20(fp)
 40035b0:	108001c3 	ldbu	r2,7(r2)
 40035b4:	10803fcc 	andi	r2,r2,255
 40035b8:	108001d8 	cmpnei	r2,r2,7
 40035bc:	1000021e 	bne	r2,zero,40035c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
 40035c0:	0005883a 	mov	r2,zero
 40035c4:	00007106 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 40035c8:	000b883a 	mov	r5,zero
 40035cc:	e13ffb17 	ldw	r4,-20(fp)
 40035d0:	40039bc0 	call	40039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 40035d4:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
 40035d8:	e0bffa03 	ldbu	r2,-24(fp)
 40035dc:	1000021e 	bne	r2,zero,40035e8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
 40035e0:	0005883a 	mov	r2,zero
 40035e4:	00006906 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
 40035e8:	e0bffa43 	ldbu	r2,-23(fp)
 40035ec:	10803fcc 	andi	r2,r2,255
 40035f0:	1000241e 	bne	r2,zero,4003684 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
 40035f4:	e0bffd03 	ldbu	r2,-12(fp)
 40035f8:	10001026 	beq	r2,zero,400363c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
 40035fc:	e0bffa03 	ldbu	r2,-24(fp)
 4003600:	e43ffb17 	ldw	r16,-20(fp)
 4003604:	014001c4 	movi	r5,7
 4003608:	1009883a 	mov	r4,r2
 400360c:	400d2c40 	call	400d2c4 <__mulsi3>
 4003610:	8085883a 	add	r2,r16,r2
 4003614:	10800304 	addi	r2,r2,12
 4003618:	00c01044 	movi	r3,65
 400361c:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
 4003620:	e0bffb17 	ldw	r2,-20(fp)
 4003624:	108001c3 	ldbu	r2,7(r2)
 4003628:	10800044 	addi	r2,r2,1
 400362c:	1007883a 	mov	r3,r2
 4003630:	e0bffb17 	ldw	r2,-20(fp)
 4003634:	10c001c5 	stb	r3,7(r2)
 4003638:	00000906 	br	4003660 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
 400363c:	e0bffa03 	ldbu	r2,-24(fp)
 4003640:	e43ffb17 	ldw	r16,-20(fp)
 4003644:	014001c4 	movi	r5,7
 4003648:	1009883a 	mov	r4,r2
 400364c:	400d2c40 	call	400d2c4 <__mulsi3>
 4003650:	8085883a 	add	r2,r16,r2
 4003654:	10800304 	addi	r2,r2,12
 4003658:	00c00044 	movi	r3,1
 400365c:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
 4003660:	e0bffa03 	ldbu	r2,-24(fp)
 4003664:	e43ffb17 	ldw	r16,-20(fp)
 4003668:	014001c4 	movi	r5,7
 400366c:	1009883a 	mov	r4,r2
 4003670:	400d2c40 	call	400d2c4 <__mulsi3>
 4003674:	8085883a 	add	r2,r16,r2
 4003678:	10800304 	addi	r2,r2,12
 400367c:	10800003 	ldbu	r2,0(r2)
 4003680:	00004206 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 4003684:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
 4003688:	e0bffa43 	ldbu	r2,-23(fp)
 400368c:	108001cc 	andi	r2,r2,7
 4003690:	108001cc 	andi	r2,r2,7
 4003694:	100890fa 	slli	r4,r2,3
 4003698:	e0fffa83 	ldbu	r3,-22(fp)
 400369c:	00bff1c4 	movi	r2,-57
 40036a0:	1884703a 	and	r2,r3,r2
 40036a4:	1007883a 	mov	r3,r2
 40036a8:	2005883a 	mov	r2,r4
 40036ac:	1884b03a 	or	r2,r3,r2
 40036b0:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
 40036b4:	e0bffd03 	ldbu	r2,-12(fp)
 40036b8:	10001526 	beq	r2,zero,4003710 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
 40036bc:	e0bffa83 	ldbu	r2,-22(fp)
 40036c0:	10801014 	ori	r2,r2,64
 40036c4:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
 40036c8:	e0bffb17 	ldw	r2,-20(fp)
 40036cc:	108001c3 	ldbu	r2,7(r2)
 40036d0:	10800044 	addi	r2,r2,1
 40036d4:	1007883a 	mov	r3,r2
 40036d8:	e0bffb17 	ldw	r2,-20(fp)
 40036dc:	10c001c5 	stb	r3,7(r2)
 40036e0:	e0bffb17 	ldw	r2,-20(fp)
 40036e4:	108001c3 	ldbu	r2,7(r2)
 40036e8:	108001cc 	andi	r2,r2,7
 40036ec:	110001cc 	andi	r4,r2,7
 40036f0:	e0fffa83 	ldbu	r3,-22(fp)
 40036f4:	00bffe04 	movi	r2,-8
 40036f8:	1884703a 	and	r2,r3,r2
 40036fc:	1007883a 	mov	r3,r2
 4003700:	2005883a 	mov	r2,r4
 4003704:	1884b03a 	or	r2,r3,r2
 4003708:	e0bffa85 	stb	r2,-22(fp)
 400370c:	00000e06 	br	4003748 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
 4003710:	e0fffa83 	ldbu	r3,-22(fp)
 4003714:	00bfefc4 	movi	r2,-65
 4003718:	1884703a 	and	r2,r3,r2
 400371c:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
 4003720:	e0bffe03 	ldbu	r2,-8(fp)
 4003724:	108001cc 	andi	r2,r2,7
 4003728:	110001cc 	andi	r4,r2,7
 400372c:	e0fffa83 	ldbu	r3,-22(fp)
 4003730:	00bffe04 	movi	r2,-8
 4003734:	1884703a 	and	r2,r3,r2
 4003738:	1007883a 	mov	r3,r2
 400373c:	2005883a 	mov	r2,r4
 4003740:	1884b03a 	or	r2,r3,r2
 4003744:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
 4003748:	e0bffa03 	ldbu	r2,-24(fp)
 400374c:	e43ffb17 	ldw	r16,-20(fp)
 4003750:	014001c4 	movi	r5,7
 4003754:	1009883a 	mov	r4,r2
 4003758:	400d2c40 	call	400d2c4 <__mulsi3>
 400375c:	8085883a 	add	r2,r16,r2
 4003760:	10800304 	addi	r2,r2,12
 4003764:	e0fffa83 	ldbu	r3,-22(fp)
 4003768:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 400376c:	e0bffa03 	ldbu	r2,-24(fp)
 4003770:	e43ffb17 	ldw	r16,-20(fp)
 4003774:	014001c4 	movi	r5,7
 4003778:	1009883a 	mov	r4,r2
 400377c:	400d2c40 	call	400d2c4 <__mulsi3>
 4003780:	8085883a 	add	r2,r16,r2
 4003784:	10800304 	addi	r2,r2,12
 4003788:	10800003 	ldbu	r2,0(r2)
        };
 400378c:	e6ffff04 	addi	sp,fp,-4
 4003790:	dfc00217 	ldw	ra,8(sp)
 4003794:	df000117 	ldw	fp,4(sp)
 4003798:	dc000017 	ldw	r16,0(sp)
 400379c:	dec00304 	addi	sp,sp,12
 40037a0:	f800283a 	ret

040037a4 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 40037a4:	defffb04 	addi	sp,sp,-20
 40037a8:	dfc00415 	stw	ra,16(sp)
 40037ac:	df000315 	stw	fp,12(sp)
 40037b0:	df000304 	addi	fp,sp,12
 40037b4:	e13ffe15 	stw	r4,-8(fp)
 40037b8:	2805883a 	mov	r2,r5
 40037bc:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 40037c0:	e0bfff03 	ldbu	r2,-4(fp)
 40037c4:	10801058 	cmpnei	r2,r2,65
 40037c8:	1000031e 	bne	r2,zero,40037d8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
 40037cc:	e13ffe17 	ldw	r4,-8(fp)
 40037d0:	40039540 	call	4003954 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 40037d4:	00000906 	br	40037fc <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
 40037d8:	e0bfff03 	ldbu	r2,-4(fp)
 40037dc:	100b883a 	mov	r5,r2
 40037e0:	e13ffe17 	ldw	r4,-8(fp)
 40037e4:	40039bc0 	call	40039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 40037e8:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
 40037ec:	e0bffd03 	ldbu	r2,-12(fp)
 40037f0:	100b883a 	mov	r5,r2
 40037f4:	e13ffe17 	ldw	r4,-8(fp)
 40037f8:	4003a500 	call	4003a50 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 40037fc:	e037883a 	mov	sp,fp
 4003800:	dfc00117 	ldw	ra,4(sp)
 4003804:	df000017 	ldw	fp,0(sp)
 4003808:	dec00204 	addi	sp,sp,8
 400380c:	f800283a 	ret

04003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
 4003810:	defffa04 	addi	sp,sp,-24
 4003814:	dfc00515 	stw	ra,20(sp)
 4003818:	df000415 	stw	fp,16(sp)
 400381c:	dc400315 	stw	r17,12(sp)
 4003820:	dc000215 	stw	r16,8(sp)
 4003824:	df000404 	addi	fp,sp,16
 4003828:	e13ffc15 	stw	r4,-16(fp)
 400382c:	2805883a 	mov	r2,r5
 4003830:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
 4003834:	e0bffd03 	ldbu	r2,-12(fp)
 4003838:	e43ffc17 	ldw	r16,-16(fp)
 400383c:	014001c4 	movi	r5,7
 4003840:	1009883a 	mov	r4,r2
 4003844:	400d2c40 	call	400d2c4 <__mulsi3>
 4003848:	8085883a 	add	r2,r16,r2
 400384c:	10800304 	addi	r2,r2,12
 4003850:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
 4003854:	e0bffd03 	ldbu	r2,-12(fp)
 4003858:	e43ffc17 	ldw	r16,-16(fp)
 400385c:	014001c4 	movi	r5,7
 4003860:	1009883a 	mov	r4,r2
 4003864:	400d2c40 	call	400d2c4 <__mulsi3>
 4003868:	8085883a 	add	r2,r16,r2
 400386c:	10800344 	addi	r2,r2,13
 4003870:	00c00044 	movi	r3,1
 4003874:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
 4003878:	e0bffd03 	ldbu	r2,-12(fp)
 400387c:	e43ffc17 	ldw	r16,-16(fp)
 4003880:	014001c4 	movi	r5,7
 4003884:	1009883a 	mov	r4,r2
 4003888:	400d2c40 	call	400d2c4 <__mulsi3>
 400388c:	8085883a 	add	r2,r16,r2
 4003890:	10800384 	addi	r2,r2,14
 4003894:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
 4003898:	e0fffd03 	ldbu	r3,-12(fp)
 400389c:	e0bffc17 	ldw	r2,-16(fp)
 40038a0:	14000104 	addi	r16,r2,4
 40038a4:	e47ffc17 	ldw	r17,-16(fp)
 40038a8:	014001c4 	movi	r5,7
 40038ac:	1809883a 	mov	r4,r3
 40038b0:	400d2c40 	call	400d2c4 <__mulsi3>
 40038b4:	8885883a 	add	r2,r17,r2
 40038b8:	10800204 	addi	r2,r2,8
 40038bc:	81403fcc 	andi	r5,r16,255
 40038c0:	10c00003 	ldbu	r3,0(r2)
 40038c4:	1806703a 	and	r3,r3,zero
 40038c8:	1809883a 	mov	r4,r3
 40038cc:	2807883a 	mov	r3,r5
 40038d0:	20c6b03a 	or	r3,r4,r3
 40038d4:	10c00005 	stb	r3,0(r2)
 40038d8:	8006d23a 	srli	r3,r16,8
 40038dc:	19403fcc 	andi	r5,r3,255
 40038e0:	10c00043 	ldbu	r3,1(r2)
 40038e4:	1806703a 	and	r3,r3,zero
 40038e8:	1809883a 	mov	r4,r3
 40038ec:	2807883a 	mov	r3,r5
 40038f0:	20c6b03a 	or	r3,r4,r3
 40038f4:	10c00045 	stb	r3,1(r2)
 40038f8:	8006d43a 	srli	r3,r16,16
 40038fc:	19403fcc 	andi	r5,r3,255
 4003900:	10c00083 	ldbu	r3,2(r2)
 4003904:	1806703a 	and	r3,r3,zero
 4003908:	1809883a 	mov	r4,r3
 400390c:	2807883a 	mov	r3,r5
 4003910:	20c6b03a 	or	r3,r4,r3
 4003914:	10c00085 	stb	r3,2(r2)
 4003918:	800ad63a 	srli	r5,r16,24
 400391c:	10c000c3 	ldbu	r3,3(r2)
 4003920:	1806703a 	and	r3,r3,zero
 4003924:	1809883a 	mov	r4,r3
 4003928:	2807883a 	mov	r3,r5
 400392c:	20c6b03a 	or	r3,r4,r3
 4003930:	10c000c5 	stb	r3,3(r2)
        };
 4003934:	0001883a 	nop
 4003938:	e6fffe04 	addi	sp,fp,-8
 400393c:	dfc00317 	ldw	ra,12(sp)
 4003940:	df000217 	ldw	fp,8(sp)
 4003944:	dc400117 	ldw	r17,4(sp)
 4003948:	dc000017 	ldw	r16,0(sp)
 400394c:	dec00404 	addi	sp,sp,16
 4003950:	f800283a 	ret

04003954 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
 4003954:	defffc04 	addi	sp,sp,-16
 4003958:	dfc00315 	stw	ra,12(sp)
 400395c:	df000215 	stw	fp,8(sp)
 4003960:	df000204 	addi	fp,sp,8
 4003964:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 4003968:	00800044 	movi	r2,1
 400396c:	e0bffe05 	stb	r2,-8(fp)
 4003970:	e0bffe03 	ldbu	r2,-8(fp)
 4003974:	10800428 	cmpgeui	r2,r2,16
 4003978:	1000081e 	bne	r2,zero,400399c <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
 400397c:	e0bffe03 	ldbu	r2,-8(fp)
 4003980:	100b883a 	mov	r5,r2
 4003984:	e13fff17 	ldw	r4,-4(fp)
 4003988:	40038100 	call	4003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 400398c:	e0bffe03 	ldbu	r2,-8(fp)
 4003990:	10800044 	addi	r2,r2,1
 4003994:	e0bffe05 	stb	r2,-8(fp)
 4003998:	003ff506 	br	4003970 <__alt_mem_onchip_memory2_0+0xfc0026f0>
                        InitEntry(i);

                hubCounter = 0;
 400399c:	e0bfff17 	ldw	r2,-4(fp)
 40039a0:	100001c5 	stb	zero,7(r2)
        };
 40039a4:	0001883a 	nop
 40039a8:	e037883a 	mov	sp,fp
 40039ac:	dfc00117 	ldw	ra,4(sp)
 40039b0:	df000017 	ldw	fp,0(sp)
 40039b4:	dec00204 	addi	sp,sp,8
 40039b8:	f800283a 	ret

040039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
 40039bc:	defffa04 	addi	sp,sp,-24
 40039c0:	dfc00515 	stw	ra,20(sp)
 40039c4:	df000415 	stw	fp,16(sp)
 40039c8:	dc000315 	stw	r16,12(sp)
 40039cc:	df000404 	addi	fp,sp,16
 40039d0:	e13ffd15 	stw	r4,-12(fp)
 40039d4:	2805883a 	mov	r2,r5
 40039d8:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 40039dc:	00800044 	movi	r2,1
 40039e0:	e0bffc05 	stb	r2,-16(fp)
 40039e4:	e0bffc03 	ldbu	r2,-16(fp)
 40039e8:	10800428 	cmpgeui	r2,r2,16
 40039ec:	1000111e 	bne	r2,zero,4003a34 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
 40039f0:	e0bffc03 	ldbu	r2,-16(fp)
 40039f4:	e43ffd17 	ldw	r16,-12(fp)
 40039f8:	014001c4 	movi	r5,7
 40039fc:	1009883a 	mov	r4,r2
 4003a00:	400d2c40 	call	400d2c4 <__mulsi3>
 4003a04:	8085883a 	add	r2,r16,r2
 4003a08:	10800304 	addi	r2,r2,12
 4003a0c:	10800003 	ldbu	r2,0(r2)
 4003a10:	10c03fcc 	andi	r3,r2,255
 4003a14:	e0bffe03 	ldbu	r2,-8(fp)
 4003a18:	1880021e 	bne	r3,r2,4003a24 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
 4003a1c:	e0bffc03 	ldbu	r2,-16(fp)
 4003a20:	00000506 	br	4003a38 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 4003a24:	e0bffc03 	ldbu	r2,-16(fp)
 4003a28:	10800044 	addi	r2,r2,1
 4003a2c:	e0bffc05 	stb	r2,-16(fp)
 4003a30:	003fec06 	br	40039e4 <__alt_mem_onchip_memory2_0+0xfc002764>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
 4003a34:	0005883a 	mov	r2,zero
        };
 4003a38:	e6ffff04 	addi	sp,fp,-4
 4003a3c:	dfc00217 	ldw	ra,8(sp)
 4003a40:	df000117 	ldw	fp,4(sp)
 4003a44:	dc000017 	ldw	r16,0(sp)
 4003a48:	dec00304 	addi	sp,sp,12
 4003a4c:	f800283a 	ret

04003a50 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
 4003a50:	defffa04 	addi	sp,sp,-24
 4003a54:	dfc00515 	stw	ra,20(sp)
 4003a58:	df000415 	stw	fp,16(sp)
 4003a5c:	dc000315 	stw	r16,12(sp)
 4003a60:	df000404 	addi	fp,sp,16
 4003a64:	e13ffd15 	stw	r4,-12(fp)
 4003a68:	2805883a 	mov	r2,r5
 4003a6c:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
 4003a70:	e0bffe03 	ldbu	r2,-8(fp)
 4003a74:	10003026 	beq	r2,zero,4003b38 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
 4003a78:	e0bffe03 	ldbu	r2,-8(fp)
 4003a7c:	e43ffd17 	ldw	r16,-12(fp)
 4003a80:	014001c4 	movi	r5,7
 4003a84:	1009883a 	mov	r4,r2
 4003a88:	400d2c40 	call	400d2c4 <__mulsi3>
 4003a8c:	8085883a 	add	r2,r16,r2
 4003a90:	10800304 	addi	r2,r2,12
 4003a94:	10800003 	ldbu	r2,0(r2)
 4003a98:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
 4003a9c:	e0bffc43 	ldbu	r2,-15(fp)
 4003aa0:	1080100c 	andi	r2,r2,64
 4003aa4:	10803fcc 	andi	r2,r2,255
 4003aa8:	10001e26 	beq	r2,zero,4003b24 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 4003aac:	00800044 	movi	r2,1
 4003ab0:	e0bffc05 	stb	r2,-16(fp)
 4003ab4:	e0bffc03 	ldbu	r2,-16(fp)
 4003ab8:	100d883a 	mov	r6,r2
 4003abc:	e17ffc43 	ldbu	r5,-15(fp)
 4003ac0:	e13ffd17 	ldw	r4,-12(fp)
 4003ac4:	4003b540 	call	4003b54 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 4003ac8:	e0bffc05 	stb	r2,-16(fp)
 4003acc:	e0bffc03 	ldbu	r2,-16(fp)
 4003ad0:	1004c03a 	cmpne	r2,r2,zero
 4003ad4:	10803fcc 	andi	r2,r2,255
 4003ad8:	10000526 	beq	r2,zero,4003af0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
 4003adc:	e0bffc03 	ldbu	r2,-16(fp)
 4003ae0:	100b883a 	mov	r5,r2
 4003ae4:	e13ffd17 	ldw	r4,-12(fp)
 4003ae8:	4003a500 	call	4003a50 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 4003aec:	003ff106 	br	4003ab4 <__alt_mem_onchip_memory2_0+0xfc002834>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
 4003af0:	e0bffd17 	ldw	r2,-12(fp)
 4003af4:	10c001c3 	ldbu	r3,7(r2)
 4003af8:	e0bffc43 	ldbu	r2,-15(fp)
 4003afc:	108001cc 	andi	r2,r2,7
 4003b00:	18c03fcc 	andi	r3,r3,255
 4003b04:	10803fcc 	andi	r2,r2,255
 4003b08:	1880061e 	bne	r3,r2,4003b24 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
 4003b0c:	e0bffd17 	ldw	r2,-12(fp)
 4003b10:	108001c3 	ldbu	r2,7(r2)
 4003b14:	10bfffc4 	addi	r2,r2,-1
 4003b18:	1007883a 	mov	r3,r2
 4003b1c:	e0bffd17 	ldw	r2,-12(fp)
 4003b20:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
 4003b24:	e0bffe03 	ldbu	r2,-8(fp)
 4003b28:	100b883a 	mov	r5,r2
 4003b2c:	e13ffd17 	ldw	r4,-12(fp)
 4003b30:	40038100 	call	4003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 4003b34:	00000106 	br	4003b3c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
 4003b38:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
 4003b3c:	e6ffff04 	addi	sp,fp,-4
 4003b40:	dfc00217 	ldw	ra,8(sp)
 4003b44:	df000117 	ldw	fp,4(sp)
 4003b48:	dc000017 	ldw	r16,0(sp)
 4003b4c:	dec00304 	addi	sp,sp,12
 4003b50:	f800283a 	ret

04003b54 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 4003b54:	defff904 	addi	sp,sp,-28
 4003b58:	dfc00615 	stw	ra,24(sp)
 4003b5c:	df000515 	stw	fp,20(sp)
 4003b60:	dc000415 	stw	r16,16(sp)
 4003b64:	df000504 	addi	fp,sp,20
 4003b68:	e13ffc15 	stw	r4,-16(fp)
 4003b6c:	e17ffd05 	stb	r5,-12(fp)
 4003b70:	3005883a 	mov	r2,r6
 4003b74:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 4003b78:	e0bffe03 	ldbu	r2,-8(fp)
 4003b7c:	10000526 	beq	r2,zero,4003b94 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
 4003b80:	e0bffe03 	ldbu	r2,-8(fp)
 4003b84:	10800428 	cmpgeui	r2,r2,16
 4003b88:	1000021e 	bne	r2,zero,4003b94 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
 4003b8c:	e0bffe03 	ldbu	r2,-8(fp)
 4003b90:	00000106 	br	4003b98 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
 4003b94:	00800044 	movi	r2,1
 4003b98:	e0bffb05 	stb	r2,-20(fp)
 4003b9c:	e0bffb03 	ldbu	r2,-20(fp)
 4003ba0:	10800428 	cmpgeui	r2,r2,16
 4003ba4:	1000161e 	bne	r2,zero,4003c00 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 4003ba8:	e0bffb03 	ldbu	r2,-20(fp)
 4003bac:	e43ffc17 	ldw	r16,-16(fp)
 4003bb0:	014001c4 	movi	r5,7
 4003bb4:	1009883a 	mov	r4,r2
 4003bb8:	400d2c40 	call	400d2c4 <__mulsi3>
 4003bbc:	8085883a 	add	r2,r16,r2
 4003bc0:	10800304 	addi	r2,r2,12
 4003bc4:	10800003 	ldbu	r2,0(r2)
 4003bc8:	1004d0fa 	srli	r2,r2,3
 4003bcc:	108001cc 	andi	r2,r2,7
 4003bd0:	1007883a 	mov	r3,r2
 4003bd4:	e0bffd03 	ldbu	r2,-12(fp)
 4003bd8:	108001cc 	andi	r2,r2,7
 4003bdc:	18c03fcc 	andi	r3,r3,255
 4003be0:	10803fcc 	andi	r2,r2,255
 4003be4:	1880021e 	bne	r3,r2,4003bf0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
 4003be8:	e0bffb03 	ldbu	r2,-20(fp)
 4003bec:	00000506 	br	4003c04 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 4003bf0:	e0bffb03 	ldbu	r2,-20(fp)
 4003bf4:	10800044 	addi	r2,r2,1
 4003bf8:	e0bffb05 	stb	r2,-20(fp)
 4003bfc:	003fe706 	br	4003b9c <__alt_mem_onchip_memory2_0+0xfc00291c>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
 4003c00:	0005883a 	mov	r2,zero
        };
 4003c04:	e6ffff04 	addi	sp,fp,-4
 4003c08:	dfc00217 	ldw	ra,8(sp)
 4003c0c:	df000117 	ldw	fp,4(sp)
 4003c10:	dc000017 	ldw	r16,0(sp)
 4003c14:	dec00304 	addi	sp,sp,12
 4003c18:	f800283a 	ret

04003c1c <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
 4003c1c:	defffb04 	addi	sp,sp,-20
 4003c20:	dfc00415 	stw	ra,16(sp)
 4003c24:	df000315 	stw	fp,12(sp)
 4003c28:	df000304 	addi	fp,sp,12
 4003c2c:	e13ffe15 	stw	r4,-8(fp)
 4003c30:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
 4003c34:	e0bffe17 	ldw	r2,-8(fp)
 4003c38:	1009883a 	mov	r4,r2
 4003c3c:	40055d80 	call	40055d8 <_ZN15USBDeviceConfigC1Ev>
 4003c40:	e0bffe17 	ldw	r2,-8(fp)
 4003c44:	10800104 	addi	r2,r2,4
 4003c48:	1009883a 	mov	r4,r2
 4003c4c:	400560c0 	call	400560c <_ZN17UsbConfigXtracterC1Ev>
 4003c50:	008100b4 	movhi	r2,1026
 4003c54:	10814504 	addi	r2,r2,1300
 4003c58:	e0fffe17 	ldw	r3,-8(fp)
 4003c5c:	18800015 	stw	r2,0(r3)
 4003c60:	008100b4 	movhi	r2,1026
 4003c64:	10815204 	addi	r2,r2,1352
 4003c68:	e0fffe17 	ldw	r3,-8(fp)
 4003c6c:	18800115 	stw	r2,4(r3)
 4003c70:	e0bffe17 	ldw	r2,-8(fp)
 4003c74:	e0ffff17 	ldw	r3,-4(fp)
 4003c78:	10c00315 	stw	r3,12(r2)
 4003c7c:	e0bffe17 	ldw	r2,-8(fp)
 4003c80:	10000405 	stb	zero,16(r2)
 4003c84:	e0bffe17 	ldw	r2,-8(fp)
 4003c88:	00c00044 	movi	r3,1
 4003c8c:	10c006c5 	stb	r3,27(r2)
 4003c90:	e0bffe17 	ldw	r2,-8(fp)
 4003c94:	10000715 	stw	zero,28(r2)
 4003c98:	e0bffe17 	ldw	r2,-8(fp)
 4003c9c:	10000905 	stb	zero,36(r2)
 4003ca0:	e0bffe17 	ldw	r2,-8(fp)
 4003ca4:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
 4003ca8:	e03ffd05 	stb	zero,-12(fp)
 4003cac:	e0bffd03 	ldbu	r2,-12(fp)
 4003cb0:	108000e8 	cmpgeui	r2,r2,3
 4003cb4:	1000431e 	bne	r2,zero,4003dc4 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
 4003cb8:	e0fffd03 	ldbu	r3,-12(fp)
 4003cbc:	e13ffe17 	ldw	r4,-8(fp)
 4003cc0:	1805883a 	mov	r2,r3
 4003cc4:	1085883a 	add	r2,r2,r2
 4003cc8:	10c5883a 	add	r2,r2,r3
 4003ccc:	2085883a 	add	r2,r4,r2
 4003cd0:	10800444 	addi	r2,r2,17
 4003cd4:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 4003cd8:	e13ffd03 	ldbu	r4,-12(fp)
 4003cdc:	e0bffd03 	ldbu	r2,-12(fp)
 4003ce0:	10000226 	beq	r2,zero,4003cec <_ZN7XBOXONEC1EP3USB+0xd0>
 4003ce4:	0007883a 	mov	r3,zero
 4003ce8:	00000106 	br	4003cf0 <_ZN7XBOXONEC1EP3USB+0xd4>
 4003cec:	00c00204 	movi	r3,8
 4003cf0:	e17ffe17 	ldw	r5,-8(fp)
 4003cf4:	2005883a 	mov	r2,r4
 4003cf8:	1085883a 	add	r2,r2,r2
 4003cfc:	1105883a 	add	r2,r2,r4
 4003d00:	2885883a 	add	r2,r5,r2
 4003d04:	10800484 	addi	r2,r2,18
 4003d08:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
 4003d0c:	e0fffd03 	ldbu	r3,-12(fp)
 4003d10:	e13ffe17 	ldw	r4,-8(fp)
 4003d14:	1805883a 	mov	r2,r3
 4003d18:	1085883a 	add	r2,r2,r2
 4003d1c:	10c5883a 	add	r2,r2,r3
 4003d20:	2085883a 	add	r2,r4,r2
 4003d24:	10800404 	addi	r2,r2,16
 4003d28:	110000c3 	ldbu	r4,3(r2)
 4003d2c:	00ffff84 	movi	r3,-2
 4003d30:	20c6703a 	and	r3,r4,r3
 4003d34:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
 4003d38:	e0fffd03 	ldbu	r3,-12(fp)
 4003d3c:	e13ffe17 	ldw	r4,-8(fp)
 4003d40:	1805883a 	mov	r2,r3
 4003d44:	1085883a 	add	r2,r2,r2
 4003d48:	10c5883a 	add	r2,r2,r3
 4003d4c:	2085883a 	add	r2,r4,r2
 4003d50:	10800404 	addi	r2,r2,16
 4003d54:	110000c3 	ldbu	r4,3(r2)
 4003d58:	00ffff44 	movi	r3,-3
 4003d5c:	20c6703a 	and	r3,r4,r3
 4003d60:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 4003d64:	e13ffd03 	ldbu	r4,-12(fp)
 4003d68:	e0bffd03 	ldbu	r2,-12(fp)
 4003d6c:	10000226 	beq	r2,zero,4003d78 <_ZN7XBOXONEC1EP3USB+0x15c>
 4003d70:	00c00044 	movi	r3,1
 4003d74:	00000106 	br	4003d7c <_ZN7XBOXONEC1EP3USB+0x160>
 4003d78:	00c003c4 	movi	r3,15
 4003d7c:	e17ffe17 	ldw	r5,-8(fp)
 4003d80:	2005883a 	mov	r2,r4
 4003d84:	1085883a 	add	r2,r2,r2
 4003d88:	1105883a 	add	r2,r2,r4
 4003d8c:	2885883a 	add	r2,r5,r2
 4003d90:	10800404 	addi	r2,r2,16
 4003d94:	18c7883a 	add	r3,r3,r3
 4003d98:	18cb883a 	add	r5,r3,r3
 4003d9c:	10c000c3 	ldbu	r3,3(r2)
 4003da0:	18c000cc 	andi	r3,r3,3
 4003da4:	1809883a 	mov	r4,r3
 4003da8:	2807883a 	mov	r3,r5
 4003dac:	20c6b03a 	or	r3,r4,r3
 4003db0:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
 4003db4:	e0bffd03 	ldbu	r2,-12(fp)
 4003db8:	10800044 	addi	r2,r2,1
 4003dbc:	e0bffd05 	stb	r2,-12(fp)
 4003dc0:	003fba06 	br	4003cac <__alt_mem_onchip_memory2_0+0xfc002a2c>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
 4003dc4:	e0bffe17 	ldw	r2,-8(fp)
 4003dc8:	10800317 	ldw	r2,12(r2)
 4003dcc:	10000626 	beq	r2,zero,4003de8 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
 4003dd0:	e0bffe17 	ldw	r2,-8(fp)
 4003dd4:	10800317 	ldw	r2,12(r2)
 4003dd8:	e0fffe17 	ldw	r3,-8(fp)
 4003ddc:	180b883a 	mov	r5,r3
 4003de0:	1009883a 	mov	r4,r2
 4003de4:	400538c0 	call	400538c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 4003de8:	0001883a 	nop
 4003dec:	e037883a 	mov	sp,fp
 4003df0:	dfc00117 	ldw	ra,4(sp)
 4003df4:	df000017 	ldw	fp,0(sp)
 4003df8:	dec00204 	addi	sp,sp,8
 4003dfc:	f800283a 	ret

04003e00 <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
 4003e00:	deffde04 	addi	sp,sp,-136
 4003e04:	dfc02115 	stw	ra,132(sp)
 4003e08:	df002015 	stw	fp,128(sp)
 4003e0c:	df002004 	addi	fp,sp,128
 4003e10:	e13ffc15 	stw	r4,-16(fp)
 4003e14:	2809883a 	mov	r4,r5
 4003e18:	3007883a 	mov	r3,r6
 4003e1c:	3805883a 	mov	r2,r7
 4003e20:	e13ffd05 	stb	r4,-12(fp)
 4003e24:	e0fffe05 	stb	r3,-8(fp)
 4003e28:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 4003e2c:	e0bfe744 	addi	r2,fp,-99
 4003e30:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
 4003e34:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
 4003e38:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
 4003e3c:	e0bffc17 	ldw	r2,-16(fp)
 4003e40:	10800317 	ldw	r2,12(r2)
 4003e44:	1009883a 	mov	r4,r2
 4003e48:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 4003e4c:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
 4003e50:	e0bffc17 	ldw	r2,-16(fp)
 4003e54:	10800403 	ldbu	r2,16(r2)
 4003e58:	10803fcc 	andi	r2,r2,255
 4003e5c:	10000226 	beq	r2,zero,4003e68 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 4003e60:	00bff644 	movi	r2,-39
 4003e64:	00017606 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 4003e68:	e0bfe517 	ldw	r2,-108(fp)
 4003e6c:	10800017 	ldw	r2,0(r2)
 4003e70:	10800017 	ldw	r2,0(r2)
 4003e74:	000b883a 	mov	r5,zero
 4003e78:	e13fe517 	ldw	r4,-108(fp)
 4003e7c:	103ee83a 	callr	r2
 4003e80:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
 4003e84:	e0bfe317 	ldw	r2,-116(fp)
 4003e88:	1000021e 	bne	r2,zero,4003e94 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4003e8c:	00bff584 	movi	r2,-42
 4003e90:	00016b06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
 4003e94:	e0bfe317 	ldw	r2,-116(fp)
 4003e98:	10c00003 	ldbu	r3,0(r2)
 4003e9c:	11000043 	ldbu	r4,1(r2)
 4003ea0:	2008923a 	slli	r4,r4,8
 4003ea4:	20c6b03a 	or	r3,r4,r3
 4003ea8:	11000083 	ldbu	r4,2(r2)
 4003eac:	2008943a 	slli	r4,r4,16
 4003eb0:	20c6b03a 	or	r3,r4,r3
 4003eb4:	108000c3 	ldbu	r2,3(r2)
 4003eb8:	1004963a 	slli	r2,r2,24
 4003ebc:	10c4b03a 	or	r2,r2,r3
 4003ec0:	1000021e 	bne	r2,zero,4003ecc <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 4003ec4:	00bff5c4 	movi	r2,-41
 4003ec8:	00015d06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 4003ecc:	e0bfe317 	ldw	r2,-116(fp)
 4003ed0:	10c00003 	ldbu	r3,0(r2)
 4003ed4:	11000043 	ldbu	r4,1(r2)
 4003ed8:	2008923a 	slli	r4,r4,8
 4003edc:	20c6b03a 	or	r3,r4,r3
 4003ee0:	11000083 	ldbu	r4,2(r2)
 4003ee4:	2008943a 	slli	r4,r4,16
 4003ee8:	20c6b03a 	or	r3,r4,r3
 4003eec:	108000c3 	ldbu	r2,3(r2)
 4003ef0:	1004963a 	slli	r2,r2,24
 4003ef4:	10c4b03a 	or	r2,r2,r3
 4003ef8:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
 4003efc:	e0bffc17 	ldw	r2,-16(fp)
 4003f00:	10c00444 	addi	r3,r2,17
 4003f04:	e0bfe317 	ldw	r2,-116(fp)
 4003f08:	19803fcc 	andi	r6,r3,255
 4003f0c:	11000003 	ldbu	r4,0(r2)
 4003f10:	2008703a 	and	r4,r4,zero
 4003f14:	200b883a 	mov	r5,r4
 4003f18:	3009883a 	mov	r4,r6
 4003f1c:	2908b03a 	or	r4,r5,r4
 4003f20:	11000005 	stb	r4,0(r2)
 4003f24:	1808d23a 	srli	r4,r3,8
 4003f28:	21803fcc 	andi	r6,r4,255
 4003f2c:	11000043 	ldbu	r4,1(r2)
 4003f30:	2008703a 	and	r4,r4,zero
 4003f34:	200b883a 	mov	r5,r4
 4003f38:	3009883a 	mov	r4,r6
 4003f3c:	2908b03a 	or	r4,r5,r4
 4003f40:	11000045 	stb	r4,1(r2)
 4003f44:	1808d43a 	srli	r4,r3,16
 4003f48:	21803fcc 	andi	r6,r4,255
 4003f4c:	11000083 	ldbu	r4,2(r2)
 4003f50:	2008703a 	and	r4,r4,zero
 4003f54:	200b883a 	mov	r5,r4
 4003f58:	3009883a 	mov	r4,r6
 4003f5c:	2908b03a 	or	r4,r5,r4
 4003f60:	11000085 	stb	r4,2(r2)
 4003f64:	180ad63a 	srli	r5,r3,24
 4003f68:	10c000c3 	ldbu	r3,3(r2)
 4003f6c:	1806703a 	and	r3,r3,zero
 4003f70:	1809883a 	mov	r4,r3
 4003f74:	2807883a 	mov	r3,r5
 4003f78:	20c6b03a 	or	r3,r4,r3
 4003f7c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
 4003f80:	e0bfe317 	ldw	r2,-116(fp)
 4003f84:	e0ffff03 	ldbu	r3,-4(fp)
 4003f88:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 4003f8c:	e0bffc17 	ldw	r2,-16(fp)
 4003f90:	10c00317 	ldw	r3,12(r2)
 4003f94:	00800484 	movi	r2,18
 4003f98:	113fffcc 	andi	r4,r2,65535
 4003f9c:	e0bfe744 	addi	r2,fp,-99
 4003fa0:	d8800015 	stw	r2,0(sp)
 4003fa4:	200f883a 	mov	r7,r4
 4003fa8:	000d883a 	mov	r6,zero
 4003fac:	000b883a 	mov	r5,zero
 4003fb0:	1809883a 	mov	r4,r3
 4003fb4:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 4003fb8:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 4003fbc:	e0bfe317 	ldw	r2,-116(fp)
 4003fc0:	e0ffe417 	ldw	r3,-112(fp)
 4003fc4:	19403fcc 	andi	r5,r3,255
 4003fc8:	10c00003 	ldbu	r3,0(r2)
 4003fcc:	1806703a 	and	r3,r3,zero
 4003fd0:	1809883a 	mov	r4,r3
 4003fd4:	2807883a 	mov	r3,r5
 4003fd8:	20c6b03a 	or	r3,r4,r3
 4003fdc:	10c00005 	stb	r3,0(r2)
 4003fe0:	e0ffe417 	ldw	r3,-112(fp)
 4003fe4:	1806d23a 	srli	r3,r3,8
 4003fe8:	19403fcc 	andi	r5,r3,255
 4003fec:	10c00043 	ldbu	r3,1(r2)
 4003ff0:	1806703a 	and	r3,r3,zero
 4003ff4:	1809883a 	mov	r4,r3
 4003ff8:	2807883a 	mov	r3,r5
 4003ffc:	20c6b03a 	or	r3,r4,r3
 4004000:	10c00045 	stb	r3,1(r2)
 4004004:	e0ffe417 	ldw	r3,-112(fp)
 4004008:	1806d43a 	srli	r3,r3,16
 400400c:	19403fcc 	andi	r5,r3,255
 4004010:	10c00083 	ldbu	r3,2(r2)
 4004014:	1806703a 	and	r3,r3,zero
 4004018:	1809883a 	mov	r4,r3
 400401c:	2807883a 	mov	r3,r5
 4004020:	20c6b03a 	or	r3,r4,r3
 4004024:	10c00085 	stb	r3,2(r2)
 4004028:	e0ffe417 	ldw	r3,-112(fp)
 400402c:	180ad63a 	srli	r5,r3,24
 4004030:	10c000c3 	ldbu	r3,3(r2)
 4004034:	1806703a 	and	r3,r3,zero
 4004038:	1809883a 	mov	r4,r3
 400403c:	2807883a 	mov	r3,r5
 4004040:	20c6b03a 	or	r3,r4,r3
 4004044:	10c000c5 	stb	r3,3(r2)

        if(rcode)
 4004048:	e0bfe103 	ldbu	r2,-124(fp)
 400404c:	1000e61e 	bne	r2,zero,40043e8 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
 4004050:	e0bfe217 	ldw	r2,-120(fp)
 4004054:	10c00203 	ldbu	r3,8(r2)
 4004058:	10800243 	ldbu	r2,9(r2)
 400405c:	1004923a 	slli	r2,r2,8
 4004060:	10c4b03a 	or	r2,r2,r3
 4004064:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
 4004068:	e0bfe217 	ldw	r2,-120(fp)
 400406c:	10c00283 	ldbu	r3,10(r2)
 4004070:	108002c3 	ldbu	r2,11(r2)
 4004074:	1004923a 	slli	r2,r2,8
 4004078:	10c4b03a 	or	r2,r2,r3
 400407c:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
 4004080:	e0bffc17 	ldw	r2,-16(fp)
 4004084:	10800017 	ldw	r2,0(r2)
 4004088:	10800604 	addi	r2,r2,24
 400408c:	10800017 	ldw	r2,0(r2)
 4004090:	e0ffe60b 	ldhu	r3,-104(fp)
 4004094:	e13fe68b 	ldhu	r4,-102(fp)
 4004098:	200d883a 	mov	r6,r4
 400409c:	180b883a 	mov	r5,r3
 40040a0:	e13ffc17 	ldw	r4,-16(fp)
 40040a4:	103ee83a 	callr	r2
 40040a8:	1080005c 	xori	r2,r2,1
 40040ac:	10803fcc 	andi	r2,r2,255
 40040b0:	1000d51e 	bne	r2,zero,4004408 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
 40040b4:	e0bfe517 	ldw	r2,-108(fp)
 40040b8:	10800017 	ldw	r2,0(r2)
 40040bc:	10800104 	addi	r2,r2,4
 40040c0:	10800017 	ldw	r2,0(r2)
 40040c4:	e0fffd03 	ldbu	r3,-12(fp)
 40040c8:	e13ffe03 	ldbu	r4,-8(fp)
 40040cc:	200f883a 	mov	r7,r4
 40040d0:	000d883a 	mov	r6,zero
 40040d4:	180b883a 	mov	r5,r3
 40040d8:	e13fe517 	ldw	r4,-108(fp)
 40040dc:	103ee83a 	callr	r2
 40040e0:	1007883a 	mov	r3,r2
 40040e4:	e0bffc17 	ldw	r2,-16(fp)
 40040e8:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
 40040ec:	e0bffc17 	ldw	r2,-16(fp)
 40040f0:	10800403 	ldbu	r2,16(r2)
 40040f4:	10803fcc 	andi	r2,r2,255
 40040f8:	1000021e 	bne	r2,zero,4004104 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 40040fc:	00bff504 	movi	r2,-44
 4004100:	0000cf06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
 4004104:	e0bfe217 	ldw	r2,-120(fp)
 4004108:	10c001c3 	ldbu	r3,7(r2)
 400410c:	e0bffc17 	ldw	r2,-16(fp)
 4004110:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
 4004114:	e0bffc17 	ldw	r2,-16(fp)
 4004118:	10c00317 	ldw	r3,12(r2)
 400411c:	e0bffc17 	ldw	r2,-16(fp)
 4004120:	10800403 	ldbu	r2,16(r2)
 4004124:	10803fcc 	andi	r2,r2,255
 4004128:	100f883a 	mov	r7,r2
 400412c:	000d883a 	mov	r6,zero
 4004130:	000b883a 	mov	r5,zero
 4004134:	1809883a 	mov	r4,r3
 4004138:	40032500 	call	4003250 <_ZN3USB7setAddrEhhh>
 400413c:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
 4004140:	e0bfe103 	ldbu	r2,-124(fp)
 4004144:	10001026 	beq	r2,zero,4004188 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
 4004148:	e0bfe317 	ldw	r2,-116(fp)
 400414c:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
 4004150:	e0bfe517 	ldw	r2,-108(fp)
 4004154:	10800017 	ldw	r2,0(r2)
 4004158:	10800204 	addi	r2,r2,8
 400415c:	10800017 	ldw	r2,0(r2)
 4004160:	e0fffc17 	ldw	r3,-16(fp)
 4004164:	18c00403 	ldbu	r3,16(r3)
 4004168:	18c03fcc 	andi	r3,r3,255
 400416c:	180b883a 	mov	r5,r3
 4004170:	e13fe517 	ldw	r4,-108(fp)
 4004174:	103ee83a 	callr	r2
                bAddress = 0;
 4004178:	e0bffc17 	ldw	r2,-16(fp)
 400417c:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
 4004180:	e0bfe103 	ldbu	r2,-124(fp)
 4004184:	0000ae06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
 4004188:	e0bfe317 	ldw	r2,-116(fp)
 400418c:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
 4004190:	e0bfe517 	ldw	r2,-108(fp)
 4004194:	10800017 	ldw	r2,0(r2)
 4004198:	10800017 	ldw	r2,0(r2)
 400419c:	e0fffc17 	ldw	r3,-16(fp)
 40041a0:	18c00403 	ldbu	r3,16(r3)
 40041a4:	18c03fcc 	andi	r3,r3,255
 40041a8:	180b883a 	mov	r5,r3
 40041ac:	e13fe517 	ldw	r4,-108(fp)
 40041b0:	103ee83a 	callr	r2
 40041b4:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
 40041b8:	e0bfe317 	ldw	r2,-116(fp)
 40041bc:	1000021e 	bne	r2,zero,40041c8 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40041c0:	00bff584 	movi	r2,-42
 40041c4:	00009e06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
 40041c8:	e0bfe317 	ldw	r2,-116(fp)
 40041cc:	e0ffff03 	ldbu	r3,-4(fp)
 40041d0:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
 40041d4:	e0bffc17 	ldw	r2,-16(fp)
 40041d8:	10c00317 	ldw	r3,12(r2)
 40041dc:	e0bffc17 	ldw	r2,-16(fp)
 40041e0:	10800403 	ldbu	r2,16(r2)
 40041e4:	11003fcc 	andi	r4,r2,255
 40041e8:	e0bffc17 	ldw	r2,-16(fp)
 40041ec:	10800444 	addi	r2,r2,17
 40041f0:	100f883a 	mov	r7,r2
 40041f4:	01800044 	movi	r6,1
 40041f8:	200b883a 	mov	r5,r4
 40041fc:	1809883a 	mov	r4,r3
 4004200:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 4004204:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 4004208:	e0bfe103 	ldbu	r2,-124(fp)
 400420c:	1000781e 	bne	r2,zero,40043f0 <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
 4004210:	e0bfe217 	ldw	r2,-120(fp)
 4004214:	10800443 	ldbu	r2,17(r2)
 4004218:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
 400421c:	e0bfe703 	ldbu	r2,-100(fp)
 4004220:	01402004 	movi	r5,128
 4004224:	1009883a 	mov	r4,r2
 4004228:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
 400422c:	e03fe145 	stb	zero,-123(fp)
 4004230:	e0ffe143 	ldbu	r3,-123(fp)
 4004234:	e0bfe703 	ldbu	r2,-100(fp)
 4004238:	1880222e 	bgeu	r3,r2,40042c4 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
 400423c:	e0bffc17 	ldw	r2,-16(fp)
 4004240:	10c00104 	addi	r3,r2,4
 4004244:	e0bfed04 	addi	r2,fp,-76
 4004248:	180b883a 	mov	r5,r3
 400424c:	1009883a 	mov	r4,r2
 4004250:	40056740 	call	4005674 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 4004254:	e0bffc17 	ldw	r2,-16(fp)
 4004258:	10c00317 	ldw	r3,12(r2)
 400425c:	e0bffc17 	ldw	r2,-16(fp)
 4004260:	10800403 	ldbu	r2,16(r2)
 4004264:	11003fcc 	andi	r4,r2,255
 4004268:	e17fe143 	ldbu	r5,-123(fp)
 400426c:	e0bfed04 	addi	r2,fp,-76
 4004270:	d8800015 	stw	r2,0(sp)
 4004274:	280f883a 	mov	r7,r5
 4004278:	000d883a 	mov	r6,zero
 400427c:	200b883a 	mov	r5,r4
 4004280:	1809883a 	mov	r4,r3
 4004284:	40030b00 	call	40030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 4004288:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
 400428c:	e0bfe103 	ldbu	r2,-124(fp)
 4004290:	10000226 	beq	r2,zero,400429c <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
 4004294:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 4004298:	00006206 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
 400429c:	e0bffc17 	ldw	r2,-16(fp)
 40042a0:	108006c3 	ldbu	r2,27(r2)
 40042a4:	10803fcc 	andi	r2,r2,255
 40042a8:	108000f0 	cmpltui	r2,r2,3
 40042ac:	10000426 	beq	r2,zero,40042c0 <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
 40042b0:	e0bfe143 	ldbu	r2,-123(fp)
 40042b4:	10800044 	addi	r2,r2,1
 40042b8:	e0bfe145 	stb	r2,-123(fp)
 40042bc:	003fdc06 	br	4004230 <__alt_mem_onchip_memory2_0+0xfc002fb0>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
 40042c0:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
 40042c4:	e0bffc17 	ldw	r2,-16(fp)
 40042c8:	108006c3 	ldbu	r2,27(r2)
 40042cc:	10803fcc 	andi	r2,r2,255
 40042d0:	108000e8 	cmpgeui	r2,r2,3
 40042d4:	10004e26 	beq	r2,zero,4004410 <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 40042d8:	e0bffc17 	ldw	r2,-16(fp)
 40042dc:	10c00317 	ldw	r3,12(r2)
 40042e0:	e0bffc17 	ldw	r2,-16(fp)
 40042e4:	10800403 	ldbu	r2,16(r2)
 40042e8:	11003fcc 	andi	r4,r2,255
 40042ec:	e0bffc17 	ldw	r2,-16(fp)
 40042f0:	108006c3 	ldbu	r2,27(r2)
 40042f4:	11403fcc 	andi	r5,r2,255
 40042f8:	e0bffc17 	ldw	r2,-16(fp)
 40042fc:	10800444 	addi	r2,r2,17
 4004300:	100f883a 	mov	r7,r2
 4004304:	280d883a 	mov	r6,r5
 4004308:	200b883a 	mov	r5,r4
 400430c:	1809883a 	mov	r4,r3
 4004310:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 4004314:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 4004318:	e0bfe103 	ldbu	r2,-124(fp)
 400431c:	1000361e 	bne	r2,zero,40043f8 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
 4004320:	01003204 	movi	r4,200
 4004324:	4000dd40 	call	4000dd4 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
 4004328:	e0bffc17 	ldw	r2,-16(fp)
 400432c:	10c00317 	ldw	r3,12(r2)
 4004330:	e0bffc17 	ldw	r2,-16(fp)
 4004334:	10800403 	ldbu	r2,16(r2)
 4004338:	11003fcc 	andi	r4,r2,255
 400433c:	e0bffc17 	ldw	r2,-16(fp)
 4004340:	10800443 	ldbu	r2,17(r2)
 4004344:	11403fcc 	andi	r5,r2,255
 4004348:	e0bffc17 	ldw	r2,-16(fp)
 400434c:	10800683 	ldbu	r2,26(r2)
 4004350:	10803fcc 	andi	r2,r2,255
 4004354:	100f883a 	mov	r7,r2
 4004358:	280d883a 	mov	r6,r5
 400435c:	200b883a 	mov	r5,r4
 4004360:	1809883a 	mov	r4,r3
 4004364:	40032e40 	call	40032e4 <_ZN3USB7setConfEhhh>
 4004368:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 400436c:	e0bfe103 	ldbu	r2,-124(fp)
 4004370:	1000231e 	bne	r2,zero,4004400 <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
 4004374:	01003204 	movi	r4,200
 4004378:	4000dd40 	call	4000dd4 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
 400437c:	e0bffc17 	ldw	r2,-16(fp)
 4004380:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
 4004384:	00800144 	movi	r2,5
 4004388:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
 400438c:	00800804 	movi	r2,32
 4004390:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
 4004394:	00800044 	movi	r2,1
 4004398:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
 400439c:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
 40043a0:	e0bfebc4 	addi	r2,fp,-81
 40043a4:	01800144 	movi	r6,5
 40043a8:	100b883a 	mov	r5,r2
 40043ac:	e13ffc17 	ldw	r4,-16(fp)
 40043b0:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>
 40043b4:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
 40043b8:	e0bfe103 	ldbu	r2,-124(fp)
 40043bc:	1000181e 	bne	r2,zero,4004420 <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
 40043c0:	e13ffc17 	ldw	r4,-16(fp)
 40043c4:	4004d680 	call	4004d68 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
 40043c8:	e0bffc17 	ldw	r2,-16(fp)
 40043cc:	00c00044 	movi	r3,1
 40043d0:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
 40043d4:	e0bffc17 	ldw	r2,-16(fp)
 40043d8:	00c00044 	movi	r3,1
 40043dc:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
 40043e0:	0005883a 	mov	r2,zero
 40043e4:	00001606 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
 40043e8:	0001883a 	nop
 40043ec:	00000d06 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
 40043f0:	0001883a 	nop
 40043f4:	00000b06 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
 40043f8:	0001883a 	nop
 40043fc:	00000906 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
 4004400:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 4004404:	00000706 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
 4004408:	0001883a 	nop
 400440c:	00000106 	br	4004414 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
 4004410:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 4004414:	00bff444 	movi	r2,-47
 4004418:	e0bfe105 	stb	r2,-124(fp)
 400441c:	00000106 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
 4004420:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 4004424:	e0bffc17 	ldw	r2,-16(fp)
 4004428:	10800017 	ldw	r2,0(r2)
 400442c:	10800204 	addi	r2,r2,8
 4004430:	10800017 	ldw	r2,0(r2)
 4004434:	e13ffc17 	ldw	r4,-16(fp)
 4004438:	103ee83a 	callr	r2
        return rcode;
 400443c:	e0bfe103 	ldbu	r2,-124(fp)
}
 4004440:	e037883a 	mov	sp,fp
 4004444:	dfc00117 	ldw	ra,4(sp)
 4004448:	df000017 	ldw	fp,0(sp)
 400444c:	dec00204 	addi	sp,sp,8
 4004450:	f800283a 	ret

04004454 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
 4004454:	defff904 	addi	sp,sp,-28
 4004458:	df000615 	stw	fp,24(sp)
 400445c:	df000604 	addi	fp,sp,24
 4004460:	e13ffb15 	stw	r4,-20(fp)
 4004464:	3009883a 	mov	r4,r6
 4004468:	3807883a 	mov	r3,r7
 400446c:	e0800117 	ldw	r2,4(fp)
 4004470:	e17ffc05 	stb	r5,-16(fp)
 4004474:	e13ffd05 	stb	r4,-12(fp)
 4004478:	e0fffe05 	stb	r3,-8(fp)
 400447c:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
 4004480:	e0bffb17 	ldw	r2,-20(fp)
 4004484:	e0fffc03 	ldbu	r3,-16(fp)
 4004488:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
 400448c:	e0800217 	ldw	r2,8(fp)
 4004490:	108000c3 	ldbu	r2,3(r2)
 4004494:	10803fcc 	andi	r2,r2,255
 4004498:	108000cc 	andi	r2,r2,3
 400449c:	108000d8 	cmpnei	r2,r2,3
 40044a0:	1000361e 	bne	r2,zero,400457c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
 40044a4:	e0800217 	ldw	r2,8(fp)
 40044a8:	10800083 	ldbu	r2,2(r2)
 40044ac:	10803fcc 	andi	r2,r2,255
 40044b0:	1080201c 	xori	r2,r2,128
 40044b4:	10bfe004 	addi	r2,r2,-128
 40044b8:	1000020e 	bge	r2,zero,40044c4 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
 40044bc:	00800084 	movi	r2,2
 40044c0:	00000106 	br	40044c8 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
 40044c4:	00800044 	movi	r2,1
 40044c8:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 40044cc:	e0fffa03 	ldbu	r3,-24(fp)
 40044d0:	e0800217 	ldw	r2,8(fp)
 40044d4:	10800083 	ldbu	r2,2(r2)
 40044d8:	108003cc 	andi	r2,r2,15
 40044dc:	100b883a 	mov	r5,r2
 40044e0:	e13ffb17 	ldw	r4,-20(fp)
 40044e4:	1805883a 	mov	r2,r3
 40044e8:	1085883a 	add	r2,r2,r2
 40044ec:	10c5883a 	add	r2,r2,r3
 40044f0:	2085883a 	add	r2,r4,r2
 40044f4:	10800444 	addi	r2,r2,17
 40044f8:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 40044fc:	e0fffa03 	ldbu	r3,-24(fp)
 4004500:	e0800217 	ldw	r2,8(fp)
 4004504:	11000103 	ldbu	r4,4(r2)
 4004508:	10800143 	ldbu	r2,5(r2)
 400450c:	1004923a 	slli	r2,r2,8
 4004510:	1104b03a 	or	r2,r2,r4
 4004514:	100b883a 	mov	r5,r2
 4004518:	e13ffb17 	ldw	r4,-20(fp)
 400451c:	1805883a 	mov	r2,r3
 4004520:	1085883a 	add	r2,r2,r2
 4004524:	10c5883a 	add	r2,r2,r3
 4004528:	2085883a 	add	r2,r4,r2
 400452c:	10800484 	addi	r2,r2,18
 4004530:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 4004534:	e0bffb17 	ldw	r2,-20(fp)
 4004538:	10c00903 	ldbu	r3,36(r2)
 400453c:	e0800217 	ldw	r2,8(fp)
 4004540:	10800183 	ldbu	r2,6(r2)
 4004544:	18c03fcc 	andi	r3,r3,255
 4004548:	10803fcc 	andi	r2,r2,255
 400454c:	1880042e 	bgeu	r3,r2,4004560 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
 4004550:	e0800217 	ldw	r2,8(fp)
 4004554:	10c00183 	ldbu	r3,6(r2)
 4004558:	e0bffb17 	ldw	r2,-20(fp)
 400455c:	10c00905 	stb	r3,36(r2)
        bNumEP++;
 4004560:	e0bffb17 	ldw	r2,-20(fp)
 4004564:	108006c3 	ldbu	r2,27(r2)
 4004568:	10800044 	addi	r2,r2,1
 400456c:	1007883a 	mov	r3,r2
 4004570:	e0bffb17 	ldw	r2,-20(fp)
 4004574:	10c006c5 	stb	r3,27(r2)
 4004578:	00000106 	br	4004580 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
 400457c:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
 4004580:	e037883a 	mov	sp,fp
 4004584:	df000017 	ldw	fp,0(sp)
 4004588:	dec00104 	addi	sp,sp,4
 400458c:	f800283a 	ret

04004590 <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 4004590:	213fff04 	addi	r4,r4,-4
 4004594:	40044541 	jmpi	4004454 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

04004598 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
 4004598:	defffd04 	addi	sp,sp,-12
 400459c:	df000215 	stw	fp,8(sp)
 40045a0:	df000204 	addi	fp,sp,8
 40045a4:	e13ffe15 	stw	r4,-8(fp)
 40045a8:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
 40045ac:	0001883a 	nop
 40045b0:	e037883a 	mov	sp,fp
 40045b4:	df000017 	ldw	fp,0(sp)
 40045b8:	dec00104 	addi	sp,sp,4
 40045bc:	f800283a 	ret

040045c0 <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
 40045c0:	defffd04 	addi	sp,sp,-12
 40045c4:	dfc00215 	stw	ra,8(sp)
 40045c8:	df000115 	stw	fp,4(sp)
 40045cc:	df000104 	addi	fp,sp,4
 40045d0:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
 40045d4:	e0bfff17 	ldw	r2,-4(fp)
 40045d8:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
 40045dc:	e0bfff17 	ldw	r2,-4(fp)
 40045e0:	10800317 	ldw	r2,12(r2)
 40045e4:	1009883a 	mov	r4,r2
 40045e8:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 40045ec:	1009883a 	mov	r4,r2
 40045f0:	20800017 	ldw	r2,0(r4)
 40045f4:	10800204 	addi	r2,r2,8
 40045f8:	10800017 	ldw	r2,0(r2)
 40045fc:	e0ffff17 	ldw	r3,-4(fp)
 4004600:	18c00403 	ldbu	r3,16(r3)
 4004604:	18c03fcc 	andi	r3,r3,255
 4004608:	180b883a 	mov	r5,r3
 400460c:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
 4004610:	e0bfff17 	ldw	r2,-4(fp)
 4004614:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
 4004618:	e0bfff17 	ldw	r2,-4(fp)
 400461c:	00c00044 	movi	r3,1
 4004620:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
 4004624:	e0bfff17 	ldw	r2,-4(fp)
 4004628:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
 400462c:	e0bfff17 	ldw	r2,-4(fp)
 4004630:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
 4004634:	e0bfff17 	ldw	r2,-4(fp)
 4004638:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
 400463c:	0005883a 	mov	r2,zero
}
 4004640:	e037883a 	mov	sp,fp
 4004644:	dfc00117 	ldw	ra,4(sp)
 4004648:	df000017 	ldw	fp,0(sp)
 400464c:	dec00204 	addi	sp,sp,8
 4004650:	f800283a 	ret

04004654 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
 4004654:	defffa04 	addi	sp,sp,-24
 4004658:	dfc00515 	stw	ra,20(sp)
 400465c:	df000415 	stw	fp,16(sp)
 4004660:	df000404 	addi	fp,sp,16
 4004664:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
 4004668:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
 400466c:	e0bfff17 	ldw	r2,-4(fp)
 4004670:	10800943 	ldbu	r2,37(r2)
 4004674:	1080005c 	xori	r2,r2,1
 4004678:	10803fcc 	andi	r2,r2,255
 400467c:	10000226 	beq	r2,zero,4004688 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
 4004680:	0005883a 	mov	r2,zero
 4004684:	00002c06 	br	4004738 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
 4004688:	4000e2c0 	call	4000e2c <_Z6millisv>
 400468c:	1007883a 	mov	r3,r2
 4004690:	e0bfff17 	ldw	r2,-4(fp)
 4004694:	10800717 	ldw	r2,28(r2)
 4004698:	1885c83a 	sub	r2,r3,r2
 400469c:	0084303a 	nor	r2,zero,r2
 40046a0:	1004d7fa 	srli	r2,r2,31
 40046a4:	10803fcc 	andi	r2,r2,255
 40046a8:	10002226 	beq	r2,zero,4004734 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 40046ac:	4000e2c0 	call	4000e2c <_Z6millisv>
 40046b0:	1007883a 	mov	r3,r2
 40046b4:	e0bfff17 	ldw	r2,-4(fp)
 40046b8:	10800903 	ldbu	r2,36(r2)
 40046bc:	10803fcc 	andi	r2,r2,255
 40046c0:	1887883a 	add	r3,r3,r2
 40046c4:	e0bfff17 	ldw	r2,-4(fp)
 40046c8:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
 40046cc:	e0bfff17 	ldw	r2,-4(fp)
 40046d0:	10800603 	ldbu	r2,24(r2)
 40046d4:	10803fcc 	andi	r2,r2,255
 40046d8:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
 40046dc:	e0bfff17 	ldw	r2,-4(fp)
 40046e0:	11000317 	ldw	r4,12(r2)
 40046e4:	e0bfff17 	ldw	r2,-4(fp)
 40046e8:	10800403 	ldbu	r2,16(r2)
 40046ec:	11403fcc 	andi	r5,r2,255
 40046f0:	e0bfff17 	ldw	r2,-4(fp)
 40046f4:	108005c3 	ldbu	r2,23(r2)
 40046f8:	11803fcc 	andi	r6,r2,255
 40046fc:	e0bfff17 	ldw	r2,-4(fp)
 4004700:	10800f84 	addi	r2,r2,62
 4004704:	e0ffff17 	ldw	r3,-4(fp)
 4004708:	18c00903 	ldbu	r3,36(r3)
 400470c:	18c03fcc 	andi	r3,r3,255
 4004710:	e1fffe84 	addi	r7,fp,-6
 4004714:	d8c00115 	stw	r3,4(sp)
 4004718:	d8800015 	stw	r2,0(sp)
 400471c:	40015fc0 	call	40015fc <_ZN3USB10inTransferEhhPtPhh>
 4004720:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
 4004724:	e0bffe43 	ldbu	r2,-7(fp)
 4004728:	1000021e 	bne	r2,zero,4004734 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
 400472c:	e13fff17 	ldw	r4,-4(fp)
 4004730:	400474c0 	call	400474c <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
 4004734:	e0bffe03 	ldbu	r2,-8(fp)
}
 4004738:	e037883a 	mov	sp,fp
 400473c:	dfc00117 	ldw	ra,4(sp)
 4004740:	df000017 	ldw	fp,0(sp)
 4004744:	dec00204 	addi	sp,sp,8
 4004748:	f800283a 	ret

0400474c <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
 400474c:	defffd04 	addi	sp,sp,-12
 4004750:	df000215 	stw	fp,8(sp)
 4004754:	df000204 	addi	fp,sp,8
 4004758:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
 400475c:	e0bfff17 	ldw	r2,-4(fp)
 4004760:	10800f83 	ldbu	r2,62(r2)
 4004764:	10803fcc 	andi	r2,r2,255
 4004768:	108001d8 	cmpnei	r2,r2,7
 400476c:	10002f1e 	bne	r2,zero,400482c <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
 4004770:	e0bfff17 	ldw	r2,-4(fp)
 4004774:	10801083 	ldbu	r2,66(r2)
 4004778:	10803fcc 	andi	r2,r2,255
 400477c:	10800058 	cmpnei	r2,r2,1
 4004780:	10000a1e 	bne	r2,zero,40047ac <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
 4004784:	e0bfff17 	ldw	r2,-4(fp)
 4004788:	10c0098b 	ldhu	r3,38(r2)
 400478c:	008100b4 	movhi	r2,1026
 4004790:	10814184 	addi	r2,r2,1286
 4004794:	1080000b 	ldhu	r2,0(r2)
 4004798:	1884b03a 	or	r2,r3,r2
 400479c:	1007883a 	mov	r3,r2
 40047a0:	e0bfff17 	ldw	r2,-4(fp)
 40047a4:	10c0098d 	sth	r3,38(r2)
 40047a8:	00000b06 	br	40047d8 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
 40047ac:	e0bfff17 	ldw	r2,-4(fp)
 40047b0:	1080098b 	ldhu	r2,38(r2)
 40047b4:	1007883a 	mov	r3,r2
 40047b8:	008100b4 	movhi	r2,1026
 40047bc:	10814184 	addi	r2,r2,1286
 40047c0:	1080000b 	ldhu	r2,0(r2)
 40047c4:	0084303a 	nor	r2,zero,r2
 40047c8:	1884703a 	and	r2,r3,r2
 40047cc:	1007883a 	mov	r3,r2
 40047d0:	e0bfff17 	ldw	r2,-4(fp)
 40047d4:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
 40047d8:	e0bfff17 	ldw	r2,-4(fp)
 40047dc:	10c0098b 	ldhu	r3,38(r2)
 40047e0:	e0bfff17 	ldw	r2,-4(fp)
 40047e4:	10800a0b 	ldhu	r2,40(r2)
 40047e8:	18ffffcc 	andi	r3,r3,65535
 40047ec:	10bfffcc 	andi	r2,r2,65535
 40047f0:	18800e26 	beq	r3,r2,400482c <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
 40047f4:	e0bfff17 	ldw	r2,-4(fp)
 40047f8:	1080098b 	ldhu	r2,38(r2)
 40047fc:	1007883a 	mov	r3,r2
 4004800:	e0bfff17 	ldw	r2,-4(fp)
 4004804:	10800a0b 	ldhu	r2,40(r2)
 4004808:	0084303a 	nor	r2,zero,r2
 400480c:	1884703a 	and	r2,r3,r2
 4004810:	1007883a 	mov	r3,r2
 4004814:	e0bfff17 	ldw	r2,-4(fp)
 4004818:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
 400481c:	e0bfff17 	ldw	r2,-4(fp)
 4004820:	10c0098b 	ldhu	r3,38(r2)
 4004824:	e0bfff17 	ldw	r2,-4(fp)
 4004828:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
 400482c:	e0bfff17 	ldw	r2,-4(fp)
 4004830:	10800f83 	ldbu	r2,62(r2)
 4004834:	10803fcc 	andi	r2,r2,255
 4004838:	10800820 	cmpeqi	r2,r2,32
 400483c:	1000b026 	beq	r2,zero,4004b00 <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
 4004840:	e0bfff17 	ldw	r2,-4(fp)
 4004844:	10c0098b 	ldhu	r3,38(r2)
 4004848:	008100b4 	movhi	r2,1026
 400484c:	10814184 	addi	r2,r2,1286
 4004850:	1080000b 	ldhu	r2,0(r2)
 4004854:	1884703a 	and	r2,r3,r2
 4004858:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
 400485c:	e0bfff17 	ldw	r2,-4(fp)
 4004860:	108010c3 	ldbu	r2,67(r2)
 4004864:	10803fcc 	andi	r2,r2,255
 4004868:	108003cc 	andi	r2,r2,15
 400486c:	1004923a 	slli	r2,r2,8
 4004870:	1007883a 	mov	r3,r2
 4004874:	e0bffe0b 	ldhu	r2,-8(fp)
 4004878:	1884b03a 	or	r2,r3,r2
 400487c:	1007883a 	mov	r3,r2
 4004880:	e0bfff17 	ldw	r2,-4(fp)
 4004884:	10801083 	ldbu	r2,66(r2)
 4004888:	10803fcc 	andi	r2,r2,255
 400488c:	10803c0c 	andi	r2,r2,240
 4004890:	1884b03a 	or	r2,r3,r2
 4004894:	1007883a 	mov	r3,r2
 4004898:	e0bfff17 	ldw	r2,-4(fp)
 400489c:	10801083 	ldbu	r2,66(r2)
 40048a0:	10803fcc 	andi	r2,r2,255
 40048a4:	1080030c 	andi	r2,r2,12
 40048a8:	100492ba 	slli	r2,r2,10
 40048ac:	1884b03a 	or	r2,r3,r2
 40048b0:	1007883a 	mov	r3,r2
 40048b4:	e0bfff17 	ldw	r2,-4(fp)
 40048b8:	10801083 	ldbu	r2,66(r2)
 40048bc:	10803fcc 	andi	r2,r2,255
 40048c0:	1080004c 	andi	r2,r2,1
 40048c4:	100490fa 	slli	r2,r2,3
 40048c8:	1884b03a 	or	r2,r3,r2
 40048cc:	1007883a 	mov	r3,r2
 40048d0:	e0bfff17 	ldw	r2,-4(fp)
 40048d4:	108010c3 	ldbu	r2,67(r2)
 40048d8:	10803fcc 	andi	r2,r2,255
 40048dc:	1080300c 	andi	r2,r2,192
 40048e0:	1004923a 	slli	r2,r2,8
 40048e4:	1884b03a 	or	r2,r3,r2
 40048e8:	1007883a 	mov	r3,r2
 40048ec:	e0bfff17 	ldw	r2,-4(fp)
 40048f0:	108010c3 	ldbu	r2,67(r2)
 40048f4:	10803fcc 	andi	r2,r2,255
 40048f8:	10800c0c 	andi	r2,r2,48
 40048fc:	1005d13a 	srai	r2,r2,4
 4004900:	1884b03a 	or	r2,r3,r2
 4004904:	1007883a 	mov	r3,r2
 4004908:	e0bfff17 	ldw	r2,-4(fp)
 400490c:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
 4004910:	e0bfff17 	ldw	r2,-4(fp)
 4004914:	10801143 	ldbu	r2,69(r2)
 4004918:	10803fcc 	andi	r2,r2,255
 400491c:	1004923a 	slli	r2,r2,8
 4004920:	1007883a 	mov	r3,r2
 4004924:	e0bfff17 	ldw	r2,-4(fp)
 4004928:	10801103 	ldbu	r2,68(r2)
 400492c:	10803fcc 	andi	r2,r2,255
 4004930:	1884b03a 	or	r2,r3,r2
 4004934:	1007883a 	mov	r3,r2
 4004938:	e0bfff17 	ldw	r2,-4(fp)
 400493c:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
 4004940:	e0bfff17 	ldw	r2,-4(fp)
 4004944:	108011c3 	ldbu	r2,71(r2)
 4004948:	10803fcc 	andi	r2,r2,255
 400494c:	1004923a 	slli	r2,r2,8
 4004950:	1007883a 	mov	r3,r2
 4004954:	e0bfff17 	ldw	r2,-4(fp)
 4004958:	10801183 	ldbu	r2,70(r2)
 400495c:	10803fcc 	andi	r2,r2,255
 4004960:	1884b03a 	or	r2,r3,r2
 4004964:	1007883a 	mov	r3,r2
 4004968:	e0bfff17 	ldw	r2,-4(fp)
 400496c:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
 4004970:	e0bfff17 	ldw	r2,-4(fp)
 4004974:	10801243 	ldbu	r2,73(r2)
 4004978:	10803fcc 	andi	r2,r2,255
 400497c:	1004923a 	slli	r2,r2,8
 4004980:	1007883a 	mov	r3,r2
 4004984:	e0bfff17 	ldw	r2,-4(fp)
 4004988:	10801203 	ldbu	r2,72(r2)
 400498c:	10803fcc 	andi	r2,r2,255
 4004990:	1884b03a 	or	r2,r3,r2
 4004994:	1007883a 	mov	r3,r2
 4004998:	e0bfff17 	ldw	r2,-4(fp)
 400499c:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
 40049a0:	e0bfff17 	ldw	r2,-4(fp)
 40049a4:	108012c3 	ldbu	r2,75(r2)
 40049a8:	10803fcc 	andi	r2,r2,255
 40049ac:	1004923a 	slli	r2,r2,8
 40049b0:	1007883a 	mov	r3,r2
 40049b4:	e0bfff17 	ldw	r2,-4(fp)
 40049b8:	10801283 	ldbu	r2,74(r2)
 40049bc:	10803fcc 	andi	r2,r2,255
 40049c0:	1884b03a 	or	r2,r3,r2
 40049c4:	1007883a 	mov	r3,r2
 40049c8:	e0bfff17 	ldw	r2,-4(fp)
 40049cc:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
 40049d0:	e0bfff17 	ldw	r2,-4(fp)
 40049d4:	10801343 	ldbu	r2,77(r2)
 40049d8:	10803fcc 	andi	r2,r2,255
 40049dc:	1004923a 	slli	r2,r2,8
 40049e0:	1007883a 	mov	r3,r2
 40049e4:	e0bfff17 	ldw	r2,-4(fp)
 40049e8:	10801303 	ldbu	r2,76(r2)
 40049ec:	10803fcc 	andi	r2,r2,255
 40049f0:	1884b03a 	or	r2,r3,r2
 40049f4:	1007883a 	mov	r3,r2
 40049f8:	e0bfff17 	ldw	r2,-4(fp)
 40049fc:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
 4004a00:	e0bfff17 	ldw	r2,-4(fp)
 4004a04:	108013c3 	ldbu	r2,79(r2)
 4004a08:	10803fcc 	andi	r2,r2,255
 4004a0c:	1004923a 	slli	r2,r2,8
 4004a10:	1007883a 	mov	r3,r2
 4004a14:	e0bfff17 	ldw	r2,-4(fp)
 4004a18:	10801383 	ldbu	r2,78(r2)
 4004a1c:	10803fcc 	andi	r2,r2,255
 4004a20:	1884b03a 	or	r2,r3,r2
 4004a24:	1007883a 	mov	r3,r2
 4004a28:	e0bfff17 	ldw	r2,-4(fp)
 4004a2c:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
 4004a30:	e0bfff17 	ldw	r2,-4(fp)
 4004a34:	10c0098b 	ldhu	r3,38(r2)
 4004a38:	e0bfff17 	ldw	r2,-4(fp)
 4004a3c:	10800a0b 	ldhu	r2,40(r2)
 4004a40:	18ffffcc 	andi	r3,r3,65535
 4004a44:	10bfffcc 	andi	r2,r2,65535
 4004a48:	18800e26 	beq	r3,r2,4004a84 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
 4004a4c:	e0bfff17 	ldw	r2,-4(fp)
 4004a50:	1080098b 	ldhu	r2,38(r2)
 4004a54:	1007883a 	mov	r3,r2
 4004a58:	e0bfff17 	ldw	r2,-4(fp)
 4004a5c:	10800a0b 	ldhu	r2,40(r2)
 4004a60:	0084303a 	nor	r2,zero,r2
 4004a64:	1884703a 	and	r2,r3,r2
 4004a68:	1007883a 	mov	r3,r2
 4004a6c:	e0bfff17 	ldw	r2,-4(fp)
 4004a70:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
 4004a74:	e0bfff17 	ldw	r2,-4(fp)
 4004a78:	10c0098b 	ldhu	r3,38(r2)
 4004a7c:	e0bfff17 	ldw	r2,-4(fp)
 4004a80:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
 4004a84:	e0bfff17 	ldw	r2,-4(fp)
 4004a88:	10800d0b 	ldhu	r2,52(r2)
 4004a8c:	10bfffcc 	andi	r2,r2,65535
 4004a90:	10000726 	beq	r2,zero,4004ab0 <_ZN7XBOXONE10readReportEv+0x364>
 4004a94:	e0bfff17 	ldw	r2,-4(fp)
 4004a98:	10800e0b 	ldhu	r2,56(r2)
 4004a9c:	10bfffcc 	andi	r2,r2,65535
 4004aa0:	1000031e 	bne	r2,zero,4004ab0 <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
 4004aa4:	e0bfff17 	ldw	r2,-4(fp)
 4004aa8:	00c00044 	movi	r3,1
 4004aac:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
 4004ab0:	e0bfff17 	ldw	r2,-4(fp)
 4004ab4:	10c00d0b 	ldhu	r3,52(r2)
 4004ab8:	e0bfff17 	ldw	r2,-4(fp)
 4004abc:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
 4004ac0:	e0bfff17 	ldw	r2,-4(fp)
 4004ac4:	10800d8b 	ldhu	r2,54(r2)
 4004ac8:	10bfffcc 	andi	r2,r2,65535
 4004acc:	10000726 	beq	r2,zero,4004aec <_ZN7XBOXONE10readReportEv+0x3a0>
 4004ad0:	e0bfff17 	ldw	r2,-4(fp)
 4004ad4:	10800e8b 	ldhu	r2,58(r2)
 4004ad8:	10bfffcc 	andi	r2,r2,65535
 4004adc:	1000031e 	bne	r2,zero,4004aec <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
 4004ae0:	e0bfff17 	ldw	r2,-4(fp)
 4004ae4:	00c00044 	movi	r3,1
 4004ae8:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
 4004aec:	e0bfff17 	ldw	r2,-4(fp)
 4004af0:	10c00d8b 	ldhu	r3,54(r2)
 4004af4:	e0bfff17 	ldw	r2,-4(fp)
 4004af8:	10c00e8d 	sth	r3,58(r2)
 4004afc:	00000106 	br	4004b04 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
 4004b00:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
 4004b04:	e037883a 	mov	sp,fp
 4004b08:	df000017 	ldw	fp,0(sp)
 4004b0c:	dec00104 	addi	sp,sp,4
 4004b10:	f800283a 	ret

04004b14 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
 4004b14:	defffd04 	addi	sp,sp,-12
 4004b18:	df000215 	stw	fp,8(sp)
 4004b1c:	df000204 	addi	fp,sp,8
 4004b20:	e13ffe15 	stw	r4,-8(fp)
 4004b24:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
 4004b28:	e0bfff17 	ldw	r2,-4(fp)
 4004b2c:	10800218 	cmpnei	r2,r2,8
 4004b30:	1000031e 	bne	r2,zero,4004b40 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
 4004b34:	e0bffe17 	ldw	r2,-8(fp)
 4004b38:	10800d0b 	ldhu	r2,52(r2)
 4004b3c:	00001306 	br	4004b8c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
 4004b40:	e0bfff17 	ldw	r2,-4(fp)
 4004b44:	10800258 	cmpnei	r2,r2,9
 4004b48:	1000031e 	bne	r2,zero,4004b58 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
 4004b4c:	e0bffe17 	ldw	r2,-8(fp)
 4004b50:	10800d8b 	ldhu	r2,54(r2)
 4004b54:	00000d06 	br	4004b8c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
 4004b58:	e0bffe17 	ldw	r2,-8(fp)
 4004b5c:	10c0098b 	ldhu	r3,38(r2)
 4004b60:	e0bfff17 	ldw	r2,-4(fp)
 4004b64:	10803fcc 	andi	r2,r2,255
 4004b68:	1089883a 	add	r4,r2,r2
 4004b6c:	008100b4 	movhi	r2,1026
 4004b70:	10813984 	addi	r2,r2,1254
 4004b74:	2085883a 	add	r2,r4,r2
 4004b78:	1080000b 	ldhu	r2,0(r2)
 4004b7c:	1884703a 	and	r2,r3,r2
 4004b80:	10bfffcc 	andi	r2,r2,65535
 4004b84:	1004c03a 	cmpne	r2,r2,zero
 4004b88:	10803fcc 	andi	r2,r2,255
}
 4004b8c:	e037883a 	mov	sp,fp
 4004b90:	df000017 	ldw	fp,0(sp)
 4004b94:	dec00104 	addi	sp,sp,4
 4004b98:	f800283a 	ret

04004b9c <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
 4004b9c:	defffc04 	addi	sp,sp,-16
 4004ba0:	df000315 	stw	fp,12(sp)
 4004ba4:	df000304 	addi	fp,sp,12
 4004ba8:	e13ffe15 	stw	r4,-8(fp)
 4004bac:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
 4004bb0:	e0bfff17 	ldw	r2,-4(fp)
 4004bb4:	10800218 	cmpnei	r2,r2,8
 4004bb8:	10000a1e 	bne	r2,zero,4004be4 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
 4004bbc:	e0bffe17 	ldw	r2,-8(fp)
 4004bc0:	10800f03 	ldbu	r2,60(r2)
 4004bc4:	10803fcc 	andi	r2,r2,255
 4004bc8:	10000426 	beq	r2,zero,4004bdc <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
 4004bcc:	e0bffe17 	ldw	r2,-8(fp)
 4004bd0:	10000f05 	stb	zero,60(r2)
                        return true;
 4004bd4:	00800044 	movi	r2,1
 4004bd8:	00002806 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
 4004bdc:	0005883a 	mov	r2,zero
 4004be0:	00002606 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
 4004be4:	e0bfff17 	ldw	r2,-4(fp)
 4004be8:	10800258 	cmpnei	r2,r2,9
 4004bec:	10000a1e 	bne	r2,zero,4004c18 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
 4004bf0:	e0bffe17 	ldw	r2,-8(fp)
 4004bf4:	10800f43 	ldbu	r2,61(r2)
 4004bf8:	10803fcc 	andi	r2,r2,255
 4004bfc:	10000426 	beq	r2,zero,4004c10 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
 4004c00:	e0bffe17 	ldw	r2,-8(fp)
 4004c04:	10000f45 	stb	zero,61(r2)
                        return true;
 4004c08:	00800044 	movi	r2,1
 4004c0c:	00001b06 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
 4004c10:	0005883a 	mov	r2,zero
 4004c14:	00001906 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
 4004c18:	e0bfff17 	ldw	r2,-4(fp)
 4004c1c:	10803fcc 	andi	r2,r2,255
 4004c20:	1087883a 	add	r3,r2,r2
 4004c24:	008100b4 	movhi	r2,1026
 4004c28:	10813984 	addi	r2,r2,1254
 4004c2c:	1885883a 	add	r2,r3,r2
 4004c30:	1080000b 	ldhu	r2,0(r2)
 4004c34:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
 4004c38:	e0bffe17 	ldw	r2,-8(fp)
 4004c3c:	10c00a8b 	ldhu	r3,42(r2)
 4004c40:	e0bffd0b 	ldhu	r2,-12(fp)
 4004c44:	1884703a 	and	r2,r3,r2
 4004c48:	10bfffcc 	andi	r2,r2,65535
 4004c4c:	1004c03a 	cmpne	r2,r2,zero
 4004c50:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
 4004c54:	e0bffe17 	ldw	r2,-8(fp)
 4004c58:	10800a8b 	ldhu	r2,42(r2)
 4004c5c:	1007883a 	mov	r3,r2
 4004c60:	e0bffd0b 	ldhu	r2,-12(fp)
 4004c64:	0084303a 	nor	r2,zero,r2
 4004c68:	1884703a 	and	r2,r3,r2
 4004c6c:	1007883a 	mov	r3,r2
 4004c70:	e0bffe17 	ldw	r2,-8(fp)
 4004c74:	10c00a8d 	sth	r3,42(r2)
        return click;
 4004c78:	e0bffd83 	ldbu	r2,-10(fp)
}
 4004c7c:	e037883a 	mov	sp,fp
 4004c80:	df000017 	ldw	fp,0(sp)
 4004c84:	dec00104 	addi	sp,sp,4
 4004c88:	f800283a 	ret

04004c8c <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
 4004c8c:	defffd04 	addi	sp,sp,-12
 4004c90:	df000215 	stw	fp,8(sp)
 4004c94:	df000204 	addi	fp,sp,8
 4004c98:	e13ffe15 	stw	r4,-8(fp)
 4004c9c:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
 4004ca0:	e0bfff17 	ldw	r2,-4(fp)
 4004ca4:	e0fffe17 	ldw	r3,-8(fp)
 4004ca8:	10800584 	addi	r2,r2,22
 4004cac:	1085883a 	add	r2,r2,r2
 4004cb0:	1885883a 	add	r2,r3,r2
 4004cb4:	1080000b 	ldhu	r2,0(r2)
}
 4004cb8:	e037883a 	mov	sp,fp
 4004cbc:	df000017 	ldw	fp,0(sp)
 4004cc0:	dec00104 	addi	sp,sp,4
 4004cc4:	f800283a 	ret

04004cc8 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
 4004cc8:	defff904 	addi	sp,sp,-28
 4004ccc:	dfc00615 	stw	ra,24(sp)
 4004cd0:	df000515 	stw	fp,20(sp)
 4004cd4:	df000504 	addi	fp,sp,20
 4004cd8:	e13ffd15 	stw	r4,-12(fp)
 4004cdc:	e17ffe15 	stw	r5,-8(fp)
 4004ce0:	3005883a 	mov	r2,r6
 4004ce4:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
 4004ce8:	e0bffe17 	ldw	r2,-8(fp)
 4004cec:	10c00084 	addi	r3,r2,2
 4004cf0:	e0bffd17 	ldw	r2,-12(fp)
 4004cf4:	10801f83 	ldbu	r2,126(r2)
 4004cf8:	11000044 	addi	r4,r2,1
 4004cfc:	200b883a 	mov	r5,r4
 4004d00:	e13ffd17 	ldw	r4,-12(fp)
 4004d04:	21401f85 	stb	r5,126(r4)
 4004d08:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
 4004d0c:	e0bffd17 	ldw	r2,-12(fp)
 4004d10:	10c00317 	ldw	r3,12(r2)
 4004d14:	e0bffd17 	ldw	r2,-12(fp)
 4004d18:	10800403 	ldbu	r2,16(r2)
 4004d1c:	11003fcc 	andi	r4,r2,255
 4004d20:	e0bffd17 	ldw	r2,-12(fp)
 4004d24:	10800503 	ldbu	r2,20(r2)
 4004d28:	11403fcc 	andi	r5,r2,255
 4004d2c:	e1bfff0b 	ldhu	r6,-4(fp)
 4004d30:	e0bffe17 	ldw	r2,-8(fp)
 4004d34:	d8800015 	stw	r2,0(sp)
 4004d38:	300f883a 	mov	r7,r6
 4004d3c:	280d883a 	mov	r6,r5
 4004d40:	200b883a 	mov	r5,r4
 4004d44:	1809883a 	mov	r4,r3
 4004d48:	40019900 	call	4001990 <_ZN3USB11outTransferEhhtPh>
 4004d4c:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
 4004d50:	e0bffc03 	ldbu	r2,-16(fp)
}
 4004d54:	e037883a 	mov	sp,fp
 4004d58:	dfc00117 	ldw	ra,4(sp)
 4004d5c:	df000017 	ldw	fp,0(sp)
 4004d60:	dec00204 	addi	sp,sp,8
 4004d64:	f800283a 	ret

04004d68 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
 4004d68:	defff904 	addi	sp,sp,-28
 4004d6c:	dfc00615 	stw	ra,24(sp)
 4004d70:	df000515 	stw	fp,20(sp)
 4004d74:	df000504 	addi	fp,sp,20
 4004d78:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004d7c:	00800244 	movi	r2,9
 4004d80:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
 4004d84:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004d88:	00800244 	movi	r2,9
 4004d8c:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
 4004d90:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004d94:	008003c4 	movi	r2,15
 4004d98:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
 4004d9c:	00800104 	movi	r2,4
 4004da0:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
 4004da4:	00800104 	movi	r2,4
 4004da8:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
 4004dac:	00800804 	movi	r2,32
 4004db0:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
 4004db4:	00800804 	movi	r2,32
 4004db8:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
 4004dbc:	00bfe004 	movi	r2,-128
 4004dc0:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
 4004dc4:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
 4004dc8:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
 4004dcc:	01800344 	movi	r6,13
 4004dd0:	e17ffb04 	addi	r5,fp,-20
 4004dd4:	e13fff17 	ldw	r4,-4(fp)
 4004dd8:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
 4004ddc:	e0bfff17 	ldw	r2,-4(fp)
 4004de0:	10800817 	ldw	r2,32(r2)
 4004de4:	10000326 	beq	r2,zero,4004df4 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
 4004de8:	e0bfff17 	ldw	r2,-4(fp)
 4004dec:	10800817 	ldw	r2,32(r2)
 4004df0:	103ee83a 	callr	r2
}
 4004df4:	0001883a 	nop
 4004df8:	e037883a 	mov	sp,fp
 4004dfc:	dfc00117 	ldw	ra,4(sp)
 4004e00:	df000017 	ldw	fp,0(sp)
 4004e04:	dec00204 	addi	sp,sp,8
 4004e08:	f800283a 	ret

04004e0c <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
 4004e0c:	defff904 	addi	sp,sp,-28
 4004e10:	dfc00615 	stw	ra,24(sp)
 4004e14:	df000515 	stw	fp,20(sp)
 4004e18:	df000504 	addi	fp,sp,20
 4004e1c:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004e20:	00800244 	movi	r2,9
 4004e24:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
 4004e28:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004e2c:	00800244 	movi	r2,9
 4004e30:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
 4004e34:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004e38:	008003c4 	movi	r2,15
 4004e3c:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
 4004e40:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
 4004e44:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
 4004e48:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
 4004e4c:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
 4004e50:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
 4004e54:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
 4004e58:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
 4004e5c:	01800344 	movi	r6,13
 4004e60:	e17ffb04 	addi	r5,fp,-20
 4004e64:	e13fff17 	ldw	r4,-4(fp)
 4004e68:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>
}
 4004e6c:	0001883a 	nop
 4004e70:	e037883a 	mov	sp,fp
 4004e74:	dfc00117 	ldw	ra,4(sp)
 4004e78:	df000017 	ldw	fp,0(sp)
 4004e7c:	dec00204 	addi	sp,sp,8
 4004e80:	f800283a 	ret

04004e84 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
 4004e84:	defff504 	addi	sp,sp,-44
 4004e88:	dfc00a15 	stw	ra,40(sp)
 4004e8c:	df000915 	stw	fp,36(sp)
 4004e90:	df000904 	addi	fp,sp,36
 4004e94:	e13ffb15 	stw	r4,-20(fp)
 4004e98:	3009883a 	mov	r4,r6
 4004e9c:	3807883a 	mov	r3,r7
 4004ea0:	e0800217 	ldw	r2,8(fp)
 4004ea4:	e17ffc05 	stb	r5,-16(fp)
 4004ea8:	e13ffd05 	stb	r4,-12(fp)
 4004eac:	e0fffe05 	stb	r3,-8(fp)
 4004eb0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004eb4:	00800244 	movi	r2,9
 4004eb8:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
 4004ebc:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004ec0:	00800244 	movi	r2,9
 4004ec4:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
 4004ec8:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004ecc:	008003c4 	movi	r2,15
 4004ed0:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
 4004ed4:	e0bffc03 	ldbu	r2,-16(fp)
 4004ed8:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
 4004edc:	e0bffd03 	ldbu	r2,-12(fp)
 4004ee0:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
 4004ee4:	e0bffe03 	ldbu	r2,-8(fp)
 4004ee8:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
 4004eec:	e0bfff03 	ldbu	r2,-4(fp)
 4004ef0:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
 4004ef4:	00bfffc4 	movi	r2,-1
 4004ef8:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
 4004efc:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
 4004f00:	00bfffc4 	movi	r2,-1
 4004f04:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
 4004f08:	01800344 	movi	r6,13
 4004f0c:	e17ff704 	addi	r5,fp,-36
 4004f10:	e13ffb17 	ldw	r4,-20(fp)
 4004f14:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>
}
 4004f18:	0001883a 	nop
 4004f1c:	e037883a 	mov	sp,fp
 4004f20:	dfc00117 	ldw	ra,4(sp)
 4004f24:	df000017 	ldw	fp,0(sp)
 4004f28:	dec00204 	addi	sp,sp,8
 4004f2c:	f800283a 	ret

04004f30 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 4004f30:	defffe04 	addi	sp,sp,-8
 4004f34:	df000115 	stw	fp,4(sp)
 4004f38:	df000104 	addi	fp,sp,4
 4004f3c:	e13fff15 	stw	r4,-4(fp)
 4004f40:	e0bfff17 	ldw	r2,-4(fp)
 4004f44:	10000005 	stb	zero,0(r2)
 4004f48:	e0bfff17 	ldw	r2,-4(fp)
 4004f4c:	10c00043 	ldbu	r3,1(r2)
 4004f50:	1806703a 	and	r3,r3,zero
 4004f54:	10c00045 	stb	r3,1(r2)
 4004f58:	10c00083 	ldbu	r3,2(r2)
 4004f5c:	1806703a 	and	r3,r3,zero
 4004f60:	10c00085 	stb	r3,2(r2)
 4004f64:	10c000c3 	ldbu	r3,3(r2)
 4004f68:	1806703a 	and	r3,r3,zero
 4004f6c:	10c000c5 	stb	r3,3(r2)
 4004f70:	10c00103 	ldbu	r3,4(r2)
 4004f74:	1806703a 	and	r3,r3,zero
 4004f78:	10c00105 	stb	r3,4(r2)
        };
 4004f7c:	0001883a 	nop
 4004f80:	e037883a 	mov	sp,fp
 4004f84:	df000017 	ldw	fp,0(sp)
 4004f88:	dec00104 	addi	sp,sp,4
 4004f8c:	f800283a 	ret

04004f90 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 4004f90:	defffe04 	addi	sp,sp,-8
 4004f94:	df000115 	stw	fp,4(sp)
 4004f98:	df000104 	addi	fp,sp,4
 4004f9c:	e13fff15 	stw	r4,-4(fp)
 4004fa0:	e0bfff17 	ldw	r2,-4(fp)
 4004fa4:	10000015 	stw	zero,0(r2)
 4004fa8:	e0bfff17 	ldw	r2,-4(fp)
 4004fac:	10000105 	stb	zero,4(r2)
 4004fb0:	e0bfff17 	ldw	r2,-4(fp)
 4004fb4:	10000145 	stb	zero,5(r2)
        };
 4004fb8:	0001883a 	nop
 4004fbc:	e037883a 	mov	sp,fp
 4004fc0:	df000017 	ldw	fp,0(sp)
 4004fc4:	dec00104 	addi	sp,sp,4
 4004fc8:	f800283a 	ret

04004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 4004fcc:	defffd04 	addi	sp,sp,-12
 4004fd0:	df000215 	stw	fp,8(sp)
 4004fd4:	df000204 	addi	fp,sp,8
 4004fd8:	e13ffe15 	stw	r4,-8(fp)
 4004fdc:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
 4004fe0:	e0bfff17 	ldw	r2,-4(fp)
 4004fe4:	10c00043 	ldbu	r3,1(r2)
 4004fe8:	11000083 	ldbu	r4,2(r2)
 4004fec:	2008923a 	slli	r4,r4,8
 4004ff0:	20c6b03a 	or	r3,r4,r3
 4004ff4:	110000c3 	ldbu	r4,3(r2)
 4004ff8:	2008943a 	slli	r4,r4,16
 4004ffc:	20c6b03a 	or	r3,r4,r3
 4005000:	10800103 	ldbu	r2,4(r2)
 4005004:	1004963a 	slli	r2,r2,24
 4005008:	10c4b03a 	or	r2,r2,r3
 400500c:	1007883a 	mov	r3,r2
 4005010:	e0bffe17 	ldw	r2,-8(fp)
 4005014:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
 4005018:	e0bfff17 	ldw	r2,-4(fp)
 400501c:	10c00003 	ldbu	r3,0(r2)
 4005020:	e0bffe17 	ldw	r2,-8(fp)
 4005024:	10c00145 	stb	r3,5(r2)
 4005028:	e0bffe17 	ldw	r2,-8(fp)
 400502c:	10c00143 	ldbu	r3,5(r2)
 4005030:	e0bffe17 	ldw	r2,-8(fp)
 4005034:	10c00105 	stb	r3,4(r2)
        };
 4005038:	0001883a 	nop
 400503c:	e037883a 	mov	sp,fp
 4005040:	df000017 	ldw	fp,0(sp)
 4005044:	dec00104 	addi	sp,sp,4
 4005048:	f800283a 	ret

0400504c <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 400504c:	defffe04 	addi	sp,sp,-8
 4005050:	df000115 	stw	fp,4(sp)
 4005054:	df000104 	addi	fp,sp,4
 4005058:	e13fff15 	stw	r4,-4(fp)
 400505c:	e0bfff17 	ldw	r2,-4(fp)
 4005060:	10000015 	stw	zero,0(r2)
 4005064:	e0bfff17 	ldw	r2,-4(fp)
 4005068:	10000105 	stb	zero,4(r2)
 400506c:	e0bfff17 	ldw	r2,-4(fp)
 4005070:	1000018d 	sth	zero,6(r2)
        };
 4005074:	0001883a 	nop
 4005078:	e037883a 	mov	sp,fp
 400507c:	df000017 	ldw	fp,0(sp)
 4005080:	dec00104 	addi	sp,sp,4
 4005084:	f800283a 	ret

04005088 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 4005088:	defffd04 	addi	sp,sp,-12
 400508c:	df000215 	stw	fp,8(sp)
 4005090:	df000204 	addi	fp,sp,8
 4005094:	e13ffe15 	stw	r4,-8(fp)
 4005098:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
 400509c:	e0bfff17 	ldw	r2,-4(fp)
 40050a0:	10c00043 	ldbu	r3,1(r2)
 40050a4:	11000083 	ldbu	r4,2(r2)
 40050a8:	2008923a 	slli	r4,r4,8
 40050ac:	20c6b03a 	or	r3,r4,r3
 40050b0:	110000c3 	ldbu	r4,3(r2)
 40050b4:	2008943a 	slli	r4,r4,16
 40050b8:	20c6b03a 	or	r3,r4,r3
 40050bc:	10800103 	ldbu	r2,4(r2)
 40050c0:	1004963a 	slli	r2,r2,24
 40050c4:	10c4b03a 	or	r2,r2,r3
 40050c8:	1007883a 	mov	r3,r2
 40050cc:	e0bffe17 	ldw	r2,-8(fp)
 40050d0:	10c00015 	stw	r3,0(r2)
                countDown = 0;
 40050d4:	e0bffe17 	ldw	r2,-8(fp)
 40050d8:	1000018d 	sth	zero,6(r2)
        };
 40050dc:	0001883a 	nop
 40050e0:	e037883a 	mov	sp,fp
 40050e4:	df000017 	ldw	fp,0(sp)
 40050e8:	dec00104 	addi	sp,sp,4
 40050ec:	f800283a 	ret

040050f0 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 40050f0:	defffb04 	addi	sp,sp,-20
 40050f4:	df000415 	stw	fp,16(sp)
 40050f8:	df000404 	addi	fp,sp,16
 40050fc:	e13ffc15 	stw	r4,-16(fp)
 4005100:	e17ffd15 	stw	r5,-12(fp)
 4005104:	e1bffe15 	stw	r6,-8(fp)
 4005108:	3805883a 	mov	r2,r7
 400510c:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
 4005110:	e0bffc17 	ldw	r2,-16(fp)
 4005114:	10800103 	ldbu	r2,4(r2)
 4005118:	10803fcc 	andi	r2,r2,255
 400511c:	10000326 	beq	r2,zero,400512c <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
 4005120:	10800060 	cmpeqi	r2,r2,1
 4005124:	10000a1e 	bne	r2,zero,4005150 <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
 4005128:	00002906 	br	40051d0 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
 400512c:	e0bffc17 	ldw	r2,-16(fp)
 4005130:	e0ffff0b 	ldhu	r3,-4(fp)
 4005134:	10c0018d 	sth	r3,6(r2)
                                nStage++;
 4005138:	e0bffc17 	ldw	r2,-16(fp)
 400513c:	10800103 	ldbu	r2,4(r2)
 4005140:	10800044 	addi	r2,r2,1
 4005144:	1007883a 	mov	r3,r2
 4005148:	e0bffc17 	ldw	r2,-16(fp)
 400514c:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 4005150:	e0bffc17 	ldw	r2,-16(fp)
 4005154:	1080018b 	ldhu	r2,6(r2)
 4005158:	10bfffcc 	andi	r2,r2,65535
 400515c:	10001626 	beq	r2,zero,40051b8 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
 4005160:	e0bffe17 	ldw	r2,-8(fp)
 4005164:	1080000b 	ldhu	r2,0(r2)
 4005168:	10bfffcc 	andi	r2,r2,65535
 400516c:	10001226 	beq	r2,zero,40051b8 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
 4005170:	e0bffc17 	ldw	r2,-16(fp)
 4005174:	1080018b 	ldhu	r2,6(r2)
 4005178:	10bfffc4 	addi	r2,r2,-1
 400517c:	1007883a 	mov	r3,r2
 4005180:	e0bffc17 	ldw	r2,-16(fp)
 4005184:	10c0018d 	sth	r3,6(r2)
 4005188:	e0bffd17 	ldw	r2,-12(fp)
 400518c:	10800017 	ldw	r2,0(r2)
 4005190:	10c00044 	addi	r3,r2,1
 4005194:	e0bffd17 	ldw	r2,-12(fp)
 4005198:	10c00015 	stw	r3,0(r2)
 400519c:	e0bffe17 	ldw	r2,-8(fp)
 40051a0:	1080000b 	ldhu	r2,0(r2)
 40051a4:	10bfffc4 	addi	r2,r2,-1
 40051a8:	1007883a 	mov	r3,r2
 40051ac:	e0bffe17 	ldw	r2,-8(fp)
 40051b0:	10c0000d 	sth	r3,0(r2)
 40051b4:	003fe606 	br	4005150 <__alt_mem_onchip_memory2_0+0xfc003ed0>

                                if(!countDown)
 40051b8:	e0bffc17 	ldw	r2,-16(fp)
 40051bc:	1080018b 	ldhu	r2,6(r2)
 40051c0:	10bfffcc 	andi	r2,r2,65535
 40051c4:	1000021e 	bne	r2,zero,40051d0 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
 40051c8:	e0bffc17 	ldw	r2,-16(fp)
 40051cc:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
 40051d0:	e0bffc17 	ldw	r2,-16(fp)
 40051d4:	1080018b 	ldhu	r2,6(r2)
 40051d8:	10bfffcc 	andi	r2,r2,65535
 40051dc:	1005003a 	cmpeq	r2,r2,zero
        };
 40051e0:	e037883a 	mov	sp,fp
 40051e4:	df000017 	ldw	fp,0(sp)
 40051e8:	dec00104 	addi	sp,sp,4
 40051ec:	f800283a 	ret

040051f0 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 40051f0:	defffb04 	addi	sp,sp,-20
 40051f4:	df000415 	stw	fp,16(sp)
 40051f8:	df000404 	addi	fp,sp,16
 40051fc:	e13ffc15 	stw	r4,-16(fp)
 4005200:	2809883a 	mov	r4,r5
 4005204:	3007883a 	mov	r3,r6
 4005208:	3805883a 	mov	r2,r7
 400520c:	e13ffd05 	stb	r4,-12(fp)
 4005210:	e0fffe05 	stb	r3,-8(fp)
 4005214:	e0bfff05 	stb	r2,-4(fp)
                return 0;
 4005218:	0005883a 	mov	r2,zero
        }
 400521c:	e037883a 	mov	sp,fp
 4005220:	df000017 	ldw	fp,0(sp)
 4005224:	dec00104 	addi	sp,sp,4
 4005228:	f800283a 	ret

0400522c <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 400522c:	defffb04 	addi	sp,sp,-20
 4005230:	df000415 	stw	fp,16(sp)
 4005234:	df000404 	addi	fp,sp,16
 4005238:	e13ffc15 	stw	r4,-16(fp)
 400523c:	2809883a 	mov	r4,r5
 4005240:	3007883a 	mov	r3,r6
 4005244:	3805883a 	mov	r2,r7
 4005248:	e13ffd05 	stb	r4,-12(fp)
 400524c:	e0fffe05 	stb	r3,-8(fp)
 4005250:	e0bfff05 	stb	r2,-4(fp)
                return 0;
 4005254:	0005883a 	mov	r2,zero
        }
 4005258:	e037883a 	mov	sp,fp
 400525c:	df000017 	ldw	fp,0(sp)
 4005260:	dec00104 	addi	sp,sp,4
 4005264:	f800283a 	ret

04005268 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 4005268:	defffe04 	addi	sp,sp,-8
 400526c:	df000115 	stw	fp,4(sp)
 4005270:	df000104 	addi	fp,sp,4
 4005274:	e13fff15 	stw	r4,-4(fp)
                return 0;
 4005278:	0005883a 	mov	r2,zero
        }
 400527c:	e037883a 	mov	sp,fp
 4005280:	df000017 	ldw	fp,0(sp)
 4005284:	dec00104 	addi	sp,sp,4
 4005288:	f800283a 	ret

0400528c <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 400528c:	defffe04 	addi	sp,sp,-8
 4005290:	df000115 	stw	fp,4(sp)
 4005294:	df000104 	addi	fp,sp,4
 4005298:	e13fff15 	stw	r4,-4(fp)
                return 0;
 400529c:	0005883a 	mov	r2,zero
        }
 40052a0:	e037883a 	mov	sp,fp
 40052a4:	df000017 	ldw	fp,0(sp)
 40052a8:	dec00104 	addi	sp,sp,4
 40052ac:	f800283a 	ret

040052b0 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 40052b0:	defffe04 	addi	sp,sp,-8
 40052b4:	df000115 	stw	fp,4(sp)
 40052b8:	df000104 	addi	fp,sp,4
 40052bc:	e13fff15 	stw	r4,-4(fp)
                return 0;
 40052c0:	0005883a 	mov	r2,zero
        }
 40052c4:	e037883a 	mov	sp,fp
 40052c8:	df000017 	ldw	fp,0(sp)
 40052cc:	dec00104 	addi	sp,sp,4
 40052d0:	f800283a 	ret

040052d4 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 40052d4:	defffd04 	addi	sp,sp,-12
 40052d8:	df000215 	stw	fp,8(sp)
 40052dc:	df000204 	addi	fp,sp,8
 40052e0:	e13ffe15 	stw	r4,-8(fp)
 40052e4:	2805883a 	mov	r2,r5
 40052e8:	e0bfff05 	stb	r2,-4(fp)
                return;
 40052ec:	0001883a 	nop
        } // Note used for hubs only!
 40052f0:	e037883a 	mov	sp,fp
 40052f4:	df000017 	ldw	fp,0(sp)
 40052f8:	dec00104 	addi	sp,sp,4
 40052fc:	f800283a 	ret

04005300 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 4005300:	defffc04 	addi	sp,sp,-16
 4005304:	df000315 	stw	fp,12(sp)
 4005308:	df000304 	addi	fp,sp,12
 400530c:	e13ffd15 	stw	r4,-12(fp)
 4005310:	2807883a 	mov	r3,r5
 4005314:	3005883a 	mov	r2,r6
 4005318:	e0fffe0d 	sth	r3,-8(fp)
 400531c:	e0bfff0d 	sth	r2,-4(fp)
                return false;
 4005320:	0005883a 	mov	r2,zero
        }
 4005324:	e037883a 	mov	sp,fp
 4005328:	df000017 	ldw	fp,0(sp)
 400532c:	dec00104 	addi	sp,sp,4
 4005330:	f800283a 	ret

04005334 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 4005334:	defffd04 	addi	sp,sp,-12
 4005338:	df000215 	stw	fp,8(sp)
 400533c:	df000204 	addi	fp,sp,8
 4005340:	e13ffe15 	stw	r4,-8(fp)
 4005344:	2805883a 	mov	r2,r5
 4005348:	e0bfff05 	stb	r2,-4(fp)
                return false;
 400534c:	0005883a 	mov	r2,zero
        }
 4005350:	e037883a 	mov	sp,fp
 4005354:	df000017 	ldw	fp,0(sp)
 4005358:	dec00104 	addi	sp,sp,4
 400535c:	f800283a 	ret

04005360 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 4005360:	defffd04 	addi	sp,sp,-12
 4005364:	df000215 	stw	fp,8(sp)
 4005368:	df000204 	addi	fp,sp,8
 400536c:	e13ffe15 	stw	r4,-8(fp)
 4005370:	2805883a 	mov	r2,r5
 4005374:	e0bfff05 	stb	r2,-4(fp)
                return true;
 4005378:	00800044 	movi	r2,1
        }
 400537c:	e037883a 	mov	sp,fp
 4005380:	df000017 	ldw	fp,0(sp)
 4005384:	dec00104 	addi	sp,sp,4
 4005388:	f800283a 	ret

0400538c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 400538c:	defffc04 	addi	sp,sp,-16
 4005390:	df000315 	stw	fp,12(sp)
 4005394:	df000304 	addi	fp,sp,12
 4005398:	e13ffe15 	stw	r4,-8(fp)
 400539c:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 40053a0:	e03ffd05 	stb	zero,-12(fp)
 40053a4:	e0bffd03 	ldbu	r2,-12(fp)
 40053a8:	10800428 	cmpgeui	r2,r2,16
 40053ac:	1000161e 	bne	r2,zero,4005408 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
 40053b0:	e0bffd03 	ldbu	r2,-12(fp)
 40053b4:	e0fffe17 	ldw	r3,-8(fp)
 40053b8:	10800784 	addi	r2,r2,30
 40053bc:	1085883a 	add	r2,r2,r2
 40053c0:	1085883a 	add	r2,r2,r2
 40053c4:	1885883a 	add	r2,r3,r2
 40053c8:	10800017 	ldw	r2,0(r2)
 40053cc:	10000a1e 	bne	r2,zero,40053f8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
 40053d0:	e0bffd03 	ldbu	r2,-12(fp)
 40053d4:	e0fffe17 	ldw	r3,-8(fp)
 40053d8:	10800784 	addi	r2,r2,30
 40053dc:	1085883a 	add	r2,r2,r2
 40053e0:	1085883a 	add	r2,r2,r2
 40053e4:	1885883a 	add	r2,r3,r2
 40053e8:	e0ffff17 	ldw	r3,-4(fp)
 40053ec:	10c00015 	stw	r3,0(r2)
                                return 0;
 40053f0:	0005883a 	mov	r2,zero
 40053f4:	00000506 	br	400540c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 40053f8:	e0bffd03 	ldbu	r2,-12(fp)
 40053fc:	10800044 	addi	r2,r2,1
 4005400:	e0bffd05 	stb	r2,-12(fp)
 4005404:	003fe706 	br	40053a4 <__alt_mem_onchip_memory2_0+0xfc004124>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 4005408:	00bff4c4 	movi	r2,-45
        };
 400540c:	e037883a 	mov	sp,fp
 4005410:	df000017 	ldw	fp,0(sp)
 4005414:	dec00104 	addi	sp,sp,4
 4005418:	f800283a 	ret

0400541c <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 400541c:	defffa04 	addi	sp,sp,-24
 4005420:	df000515 	stw	fp,20(sp)
 4005424:	df000504 	addi	fp,sp,20
 4005428:	e13ffb15 	stw	r4,-20(fp)
 400542c:	3009883a 	mov	r4,r6
 4005430:	3807883a 	mov	r3,r7
 4005434:	e0800117 	ldw	r2,4(fp)
 4005438:	e17ffc05 	stb	r5,-16(fp)
 400543c:	e13ffd05 	stb	r4,-12(fp)
 4005440:	e0fffe05 	stb	r3,-8(fp)
 4005444:	e0bfff05 	stb	r2,-4(fp)
        };
 4005448:	0001883a 	nop
 400544c:	e037883a 	mov	sp,fp
 4005450:	df000017 	ldw	fp,0(sp)
 4005454:	dec00104 	addi	sp,sp,4
 4005458:	f800283a 	ret

0400545c <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
 400545c:	defffe04 	addi	sp,sp,-8
 4005460:	df000115 	stw	fp,4(sp)
 4005464:	df000104 	addi	fp,sp,4
 4005468:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
 400546c:	e0bfff17 	ldw	r2,-4(fp)
 4005470:	10800403 	ldbu	r2,16(r2)
        };
 4005474:	e037883a 	mov	sp,fp
 4005478:	df000017 	ldw	fp,0(sp)
 400547c:	dec00104 	addi	sp,sp,4
 4005480:	f800283a 	ret

04005484 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
 4005484:	defffe04 	addi	sp,sp,-8
 4005488:	df000115 	stw	fp,4(sp)
 400548c:	df000104 	addi	fp,sp,4
 4005490:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
 4005494:	e0bfff17 	ldw	r2,-4(fp)
 4005498:	10800943 	ldbu	r2,37(r2)
        };
 400549c:	e037883a 	mov	sp,fp
 40054a0:	df000017 	ldw	fp,0(sp)
 40054a4:	dec00104 	addi	sp,sp,4
 40054a8:	f800283a 	ret

040054ac <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 40054ac:	defffc04 	addi	sp,sp,-16
 40054b0:	df000315 	stw	fp,12(sp)
 40054b4:	df000304 	addi	fp,sp,12
 40054b8:	e13ffd15 	stw	r4,-12(fp)
 40054bc:	2807883a 	mov	r3,r5
 40054c0:	3005883a 	mov	r2,r6
 40054c4:	e0fffe0d 	sth	r3,-8(fp)
 40054c8:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
 40054cc:	e0bffe0b 	ldhu	r2,-8(fp)
 40054d0:	108117a0 	cmpeqi	r2,r2,1118
 40054d4:	10000f1e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054d8:	e0bffe0b 	ldhu	r2,-8(fp)
 40054dc:	1081ce20 	cmpeqi	r2,r2,1848
 40054e0:	10000c1e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054e4:	e0bffe0b 	ldhu	r2,-8(fp)
 40054e8:	10839be0 	cmpeqi	r2,r2,3695
 40054ec:	1000091e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054f0:	e0bffe0b 	ldhu	r2,-8(fp)
 40054f4:	1083c360 	cmpeqi	r2,r2,3853
 40054f8:	1000061e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054fc:	e0bffe0b 	ldhu	r2,-8(fp)
 4005500:	10854ca0 	cmpeqi	r2,r2,5426
 4005504:	1000031e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 4005508:	e0bffe0b 	ldhu	r2,-8(fp)
 400550c:	10893198 	cmpnei	r2,r2,9414
 4005510:	10002c1e 	bne	r2,zero,40055c4 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
 4005514:	e0bfff0b 	ldhu	r2,-4(fp)
 4005518:	1080b460 	cmpeqi	r2,r2,721
 400551c:	1000271e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
 4005520:	e0bfff0b 	ldhu	r2,-4(fp)
 4005524:	1080b760 	cmpeqi	r2,r2,733
 4005528:	1000241e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 400552c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005530:	1080b8e0 	cmpeqi	r2,r2,739
 4005534:	1000211e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005538:	e0bfff0b 	ldhu	r2,-4(fp)
 400553c:	1080baa0 	cmpeqi	r2,r2,746
 4005540:	10001e1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005544:	e0bfff0b 	ldhu	r2,-4(fp)
 4005548:	10928060 	cmpeqi	r2,r2,18945
 400554c:	10001b1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
 4005550:	e0bfff0b 	ldhu	r2,-4(fp)
 4005554:	10804e60 	cmpeqi	r2,r2,313
 4005558:	1000181e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 400555c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005560:	108051a0 	cmpeqi	r2,r2,326
 4005564:	1000151e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005568:	e0bfff0b 	ldhu	r2,-4(fp)
 400556c:	108019e0 	cmpeqi	r2,r2,103
 4005570:	1000121e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005574:	e0bfff0b 	ldhu	r2,-4(fp)
 4005578:	108280e0 	cmpeqi	r2,r2,2563
 400557c:	10000f1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
 4005580:	e0bfff0b 	ldhu	r2,-4(fp)
 4005584:	109506a0 	cmpeqi	r2,r2,21530
 4005588:	10000c1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 400558c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005590:	10950aa0 	cmpeqi	r2,r2,21546
 4005594:	1000091e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005598:	e0bfff0b 	ldhu	r2,-4(fp)
 400559c:	10950ea0 	cmpeqi	r2,r2,21562
 40055a0:	1000061e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 40055a4:	e0bfff0b 	ldhu	r2,-4(fp)
 40055a8:	1082c2a0 	cmpeqi	r2,r2,2826
 40055ac:	1000031e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
 40055b0:	e0bfff0b 	ldhu	r2,-4(fp)
 40055b4:	1082c498 	cmpnei	r2,r2,2834
 40055b8:	1000021e 	bne	r2,zero,40055c4 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
 40055bc:	00800044 	movi	r2,1
 40055c0:	00000106 	br	40055c8 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
 40055c4:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
 40055c8:	e037883a 	mov	sp,fp
 40055cc:	df000017 	ldw	fp,0(sp)
 40055d0:	dec00104 	addi	sp,sp,4
 40055d4:	f800283a 	ret

040055d8 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
 40055d8:	defffe04 	addi	sp,sp,-8
 40055dc:	df000115 	stw	fp,4(sp)
 40055e0:	df000104 	addi	fp,sp,4
 40055e4:	e13fff15 	stw	r4,-4(fp)
 40055e8:	008100b4 	movhi	r2,1026
 40055ec:	10815e04 	addi	r2,r2,1400
 40055f0:	e0ffff17 	ldw	r3,-4(fp)
 40055f4:	18800015 	stw	r2,0(r3)
 40055f8:	0001883a 	nop
 40055fc:	e037883a 	mov	sp,fp
 4005600:	df000017 	ldw	fp,0(sp)
 4005604:	dec00104 	addi	sp,sp,4
 4005608:	f800283a 	ret

0400560c <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
 400560c:	defffe04 	addi	sp,sp,-8
 4005610:	df000115 	stw	fp,4(sp)
 4005614:	df000104 	addi	fp,sp,4
 4005618:	e13fff15 	stw	r4,-4(fp)
 400561c:	008100b4 	movhi	r2,1026
 4005620:	10815804 	addi	r2,r2,1376
 4005624:	e0ffff17 	ldw	r3,-4(fp)
 4005628:	18800015 	stw	r2,0(r3)
 400562c:	0001883a 	nop
 4005630:	e037883a 	mov	sp,fp
 4005634:	df000017 	ldw	fp,0(sp)
 4005638:	dec00104 	addi	sp,sp,4
 400563c:	f800283a 	ret

04005640 <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
 4005640:	defffe04 	addi	sp,sp,-8
 4005644:	df000115 	stw	fp,4(sp)
 4005648:	df000104 	addi	fp,sp,4
 400564c:	e13fff15 	stw	r4,-4(fp)
 4005650:	008100b4 	movhi	r2,1026
 4005654:	10815b04 	addi	r2,r2,1388
 4005658:	e0ffff17 	ldw	r3,-4(fp)
 400565c:	18800015 	stw	r2,0(r3)
 4005660:	0001883a 	nop
 4005664:	e037883a 	mov	sp,fp
 4005668:	df000017 	ldw	fp,0(sp)
 400566c:	dec00104 	addi	sp,sp,4
 4005670:	f800283a 	ret

04005674 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 4005674:	defffc04 	addi	sp,sp,-16
 4005678:	dfc00315 	stw	ra,12(sp)
 400567c:	df000215 	stw	fp,8(sp)
 4005680:	df000204 	addi	fp,sp,8
 4005684:	e13ffe15 	stw	r4,-8(fp)
 4005688:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 400568c:	e0bffe17 	ldw	r2,-8(fp)
 4005690:	1009883a 	mov	r4,r2
 4005694:	40056400 	call	4005640 <_ZN13USBReadParserC1Ev>
 4005698:	008100b4 	movhi	r2,1026
 400569c:	10815504 	addi	r2,r2,1364
 40056a0:	e0fffe17 	ldw	r3,-8(fp)
 40056a4:	18800015 	stw	r2,0(r3)
 40056a8:	e0bffe17 	ldw	r2,-8(fp)
 40056ac:	e0ffff17 	ldw	r3,-4(fp)
 40056b0:	10c00115 	stw	r3,4(r2)
 40056b4:	e0bffe17 	ldw	r2,-8(fp)
 40056b8:	10800204 	addi	r2,r2,8
 40056bc:	1009883a 	mov	r4,r2
 40056c0:	4004f300 	call	4004f30 <_ZN16MultiValueBufferC1Ev>
 40056c4:	e0bffe17 	ldw	r2,-8(fp)
 40056c8:	10800404 	addi	r2,r2,16
 40056cc:	1009883a 	mov	r4,r2
 40056d0:	4004f900 	call	4004f90 <_ZN20MultiByteValueParserC1Ev>
 40056d4:	e0bffe17 	ldw	r2,-8(fp)
 40056d8:	10800604 	addi	r2,r2,24
 40056dc:	1009883a 	mov	r4,r2
 40056e0:	400504c0 	call	400504c <_ZN11ByteSkipperC1Ev>
 40056e4:	e0bffe17 	ldw	r2,-8(fp)
 40056e8:	10000c05 	stb	zero,48(r2)
 40056ec:	e0bffe17 	ldw	r2,-8(fp)
 40056f0:	10000c45 	stb	zero,49(r2)
 40056f4:	e0bffe17 	ldw	r2,-8(fp)
 40056f8:	10000c85 	stb	zero,50(r2)
 40056fc:	e0bffe17 	ldw	r2,-8(fp)
 4005700:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
 4005704:	e0bffe17 	ldw	r2,-8(fp)
 4005708:	10c00804 	addi	r3,r2,32
 400570c:	e0bffe17 	ldw	r2,-8(fp)
 4005710:	19803fcc 	andi	r6,r3,255
 4005714:	11000243 	ldbu	r4,9(r2)
 4005718:	2008703a 	and	r4,r4,zero
 400571c:	200b883a 	mov	r5,r4
 4005720:	3009883a 	mov	r4,r6
 4005724:	2908b03a 	or	r4,r5,r4
 4005728:	11000245 	stb	r4,9(r2)
 400572c:	1808d23a 	srli	r4,r3,8
 4005730:	21803fcc 	andi	r6,r4,255
 4005734:	11000283 	ldbu	r4,10(r2)
 4005738:	2008703a 	and	r4,r4,zero
 400573c:	200b883a 	mov	r5,r4
 4005740:	3009883a 	mov	r4,r6
 4005744:	2908b03a 	or	r4,r5,r4
 4005748:	11000285 	stb	r4,10(r2)
 400574c:	1808d43a 	srli	r4,r3,16
 4005750:	21803fcc 	andi	r6,r4,255
 4005754:	110002c3 	ldbu	r4,11(r2)
 4005758:	2008703a 	and	r4,r4,zero
 400575c:	200b883a 	mov	r5,r4
 4005760:	3009883a 	mov	r4,r6
 4005764:	2908b03a 	or	r4,r5,r4
 4005768:	110002c5 	stb	r4,11(r2)
 400576c:	180ad63a 	srli	r5,r3,24
 4005770:	10c00303 	ldbu	r3,12(r2)
 4005774:	1806703a 	and	r3,r3,zero
 4005778:	1809883a 	mov	r4,r3
 400577c:	2807883a 	mov	r3,r5
 4005780:	20c6b03a 	or	r3,r4,r3
 4005784:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
 4005788:	e0bffe17 	ldw	r2,-8(fp)
 400578c:	10c00404 	addi	r3,r2,16
 4005790:	e0bffe17 	ldw	r2,-8(fp)
 4005794:	10800204 	addi	r2,r2,8
 4005798:	100b883a 	mov	r5,r2
 400579c:	1809883a 	mov	r4,r3
 40057a0:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 40057a4:	e0bffe17 	ldw	r2,-8(fp)
 40057a8:	10c00604 	addi	r3,r2,24
 40057ac:	e0bffe17 	ldw	r2,-8(fp)
 40057b0:	10800204 	addi	r2,r2,8
 40057b4:	100b883a 	mov	r5,r2
 40057b8:	1809883a 	mov	r4,r3
 40057bc:	40050880 	call	4005088 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 40057c0:	0001883a 	nop
 40057c4:	e037883a 	mov	sp,fp
 40057c8:	dfc00117 	ldw	ra,4(sp)
 40057cc:	df000017 	ldw	fp,0(sp)
 40057d0:	dec00204 	addi	sp,sp,8
 40057d4:	f800283a 	ret

040057d8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 40057d8:	defff804 	addi	sp,sp,-32
 40057dc:	dfc00715 	stw	ra,28(sp)
 40057e0:	df000615 	stw	fp,24(sp)
 40057e4:	df000604 	addi	fp,sp,24
 40057e8:	e13ffc15 	stw	r4,-16(fp)
 40057ec:	2805883a 	mov	r2,r5
 40057f0:	e1bffe15 	stw	r6,-8(fp)
 40057f4:	e1ffff15 	stw	r7,-4(fp)
 40057f8:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
 40057fc:	e0bffd0b 	ldhu	r2,-12(fp)
 4005800:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
 4005804:	e0bffe17 	ldw	r2,-8(fp)
 4005808:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
 400580c:	e0bffa0b 	ldhu	r2,-24(fp)
 4005810:	10bfffcc 	andi	r2,r2,65535
 4005814:	10000a26 	beq	r2,zero,4005840 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
 4005818:	e0bffb04 	addi	r2,fp,-20
 400581c:	e1bffa04 	addi	r6,fp,-24
 4005820:	100b883a 	mov	r5,r2
 4005824:	e13ffc17 	ldw	r4,-16(fp)
 4005828:	40058540 	call	4005854 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
 400582c:	1080005c 	xori	r2,r2,1
 4005830:	10803fcc 	andi	r2,r2,255
 4005834:	1000011e 	bne	r2,zero,400583c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
 4005838:	003ff406 	br	400580c <__alt_mem_onchip_memory2_0+0xfc00458c>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
 400583c:	0001883a 	nop
}
 4005840:	e037883a 	mov	sp,fp
 4005844:	dfc00117 	ldw	ra,4(sp)
 4005848:	df000017 	ldw	fp,0(sp)
 400584c:	dec00204 	addi	sp,sp,8
 4005850:	f800283a 	ret

04005854 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 4005854:	defff604 	addi	sp,sp,-40
 4005858:	dfc00915 	stw	ra,36(sp)
 400585c:	df000815 	stw	fp,32(sp)
 4005860:	df000804 	addi	fp,sp,32
 4005864:	e13ffc15 	stw	r4,-16(fp)
 4005868:	e17ffd15 	stw	r5,-12(fp)
 400586c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 4005870:	e0bffc17 	ldw	r2,-16(fp)
 4005874:	10800804 	addi	r2,r2,32
 4005878:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 400587c:	e0bffc17 	ldw	r2,-16(fp)
 4005880:	10800804 	addi	r2,r2,32
 4005884:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
 4005888:	e0bffc17 	ldw	r2,-16(fp)
 400588c:	10800c03 	ldbu	r2,48(r2)
 4005890:	10803fcc 	andi	r2,r2,255
 4005894:	10c00168 	cmpgeui	r3,r2,5
 4005898:	1801141e 	bne	r3,zero,4005cec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
 400589c:	100690ba 	slli	r3,r2,2
 40058a0:	00810034 	movhi	r2,1024
 40058a4:	10962d04 	addi	r2,r2,22708
 40058a8:	1885883a 	add	r2,r3,r2
 40058ac:	10800017 	ldw	r2,0(r2)
 40058b0:	1000683a 	jmp	r2
 40058b4:	040058c8 	cmpgei	r16,zero,355
 40058b8:	040058fc 	xorhi	r16,zero,355
 40058bc:	04005984 	movi	r16,358
 40058c0:	04005a18 	cmpnei	r16,zero,360
 40058c4:	04005a84 	movi	r16,362
                case 0:
                        theBuffer.valueSize = 2;
 40058c8:	e0bffc17 	ldw	r2,-16(fp)
 40058cc:	00c00084 	movi	r3,2
 40058d0:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 40058d4:	e0bffc17 	ldw	r2,-16(fp)
 40058d8:	10c00404 	addi	r3,r2,16
 40058dc:	e0bffc17 	ldw	r2,-16(fp)
 40058e0:	10800204 	addi	r2,r2,8
 40058e4:	100b883a 	mov	r5,r2
 40058e8:	1809883a 	mov	r4,r3
 40058ec:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 40058f0:	e0bffc17 	ldw	r2,-16(fp)
 40058f4:	00c00044 	movi	r3,1
 40058f8:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 40058fc:	e0bffc17 	ldw	r2,-16(fp)
 4005900:	10800404 	addi	r2,r2,16
 4005904:	e1bffe17 	ldw	r6,-8(fp)
 4005908:	e17ffd17 	ldw	r5,-12(fp)
 400590c:	1009883a 	mov	r4,r2
 4005910:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005914:	1080005c 	xori	r2,r2,1
 4005918:	10803fcc 	andi	r2,r2,255
 400591c:	10000226 	beq	r2,zero,4005928 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
 4005920:	0005883a 	mov	r2,zero
 4005924:	0000f206 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 4005928:	e0bffc17 	ldw	r2,-16(fp)
 400592c:	10c00217 	ldw	r3,8(r2)
 4005930:	1806d23a 	srli	r3,r3,8
 4005934:	10800317 	ldw	r2,12(r2)
 4005938:	10803fcc 	andi	r2,r2,255
 400593c:	1004963a 	slli	r2,r2,24
 4005940:	10c4b03a 	or	r2,r2,r3
 4005944:	10c00003 	ldbu	r3,0(r2)
 4005948:	e0bffc17 	ldw	r2,-16(fp)
 400594c:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 4005950:	e0bffc17 	ldw	r2,-16(fp)
 4005954:	10c00217 	ldw	r3,8(r2)
 4005958:	1806d23a 	srli	r3,r3,8
 400595c:	10800317 	ldw	r2,12(r2)
 4005960:	10803fcc 	andi	r2,r2,255
 4005964:	1004963a 	slli	r2,r2,24
 4005968:	10c4b03a 	or	r2,r2,r3
 400596c:	10c00043 	ldbu	r3,1(r2)
 4005970:	e0bffc17 	ldw	r2,-16(fp)
 4005974:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
 4005978:	e0bffc17 	ldw	r2,-16(fp)
 400597c:	00c00084 	movi	r3,2
 4005980:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 4005984:	e0bffc17 	ldw	r2,-16(fp)
 4005988:	10800804 	addi	r2,r2,32
 400598c:	10c00084 	addi	r3,r2,2
 4005990:	e0bffc17 	ldw	r2,-16(fp)
 4005994:	19803fcc 	andi	r6,r3,255
 4005998:	11000243 	ldbu	r4,9(r2)
 400599c:	2008703a 	and	r4,r4,zero
 40059a0:	200b883a 	mov	r5,r4
 40059a4:	3009883a 	mov	r4,r6
 40059a8:	2908b03a 	or	r4,r5,r4
 40059ac:	11000245 	stb	r4,9(r2)
 40059b0:	1808d23a 	srli	r4,r3,8
 40059b4:	21803fcc 	andi	r6,r4,255
 40059b8:	11000283 	ldbu	r4,10(r2)
 40059bc:	2008703a 	and	r4,r4,zero
 40059c0:	200b883a 	mov	r5,r4
 40059c4:	3009883a 	mov	r4,r6
 40059c8:	2908b03a 	or	r4,r5,r4
 40059cc:	11000285 	stb	r4,10(r2)
 40059d0:	1808d43a 	srli	r4,r3,16
 40059d4:	21803fcc 	andi	r6,r4,255
 40059d8:	110002c3 	ldbu	r4,11(r2)
 40059dc:	2008703a 	and	r4,r4,zero
 40059e0:	200b883a 	mov	r5,r4
 40059e4:	3009883a 	mov	r4,r6
 40059e8:	2908b03a 	or	r4,r5,r4
 40059ec:	110002c5 	stb	r4,11(r2)
 40059f0:	180ad63a 	srli	r5,r3,24
 40059f4:	10c00303 	ldbu	r3,12(r2)
 40059f8:	1806703a 	and	r3,r3,zero
 40059fc:	1809883a 	mov	r4,r3
 4005a00:	2807883a 	mov	r3,r5
 4005a04:	20c6b03a 	or	r3,r4,r3
 4005a08:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
 4005a0c:	e0bffc17 	ldw	r2,-16(fp)
 4005a10:	00c000c4 	movi	r3,3
 4005a14:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
 4005a18:	e0bffc17 	ldw	r2,-16(fp)
 4005a1c:	10800c83 	ldbu	r2,50(r2)
 4005a20:	10803fcc 	andi	r2,r2,255
 4005a24:	10c00120 	cmpeqi	r3,r2,4
 4005a28:	1800021e 	bne	r3,zero,4005a34 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
 4005a2c:	10800148 	cmpgei	r2,r2,5
 4005a30:	00000306 	br	4005a40 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 4005a34:	e0bffc17 	ldw	r2,-16(fp)
 4005a38:	10000cc5 	stb	zero,51(r2)
                                        break;
 4005a3c:	00000106 	br	4005a44 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
 4005a40:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
 4005a44:	e0bffc17 	ldw	r2,-16(fp)
 4005a48:	10800c43 	ldbu	r2,49(r2)
 4005a4c:	10bfff84 	addi	r2,r2,-2
 4005a50:	1007883a 	mov	r3,r2
 4005a54:	e0bffc17 	ldw	r2,-16(fp)
 4005a58:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 4005a5c:	e0bffc17 	ldw	r2,-16(fp)
 4005a60:	10c00404 	addi	r3,r2,16
 4005a64:	e0bffc17 	ldw	r2,-16(fp)
 4005a68:	10800204 	addi	r2,r2,8
 4005a6c:	100b883a 	mov	r5,r2
 4005a70:	1809883a 	mov	r4,r3
 4005a74:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 4005a78:	e0bffc17 	ldw	r2,-16(fp)
 4005a7c:	00c00104 	movi	r3,4
 4005a80:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
 4005a84:	e0bffc17 	ldw	r2,-16(fp)
 4005a88:	10800c83 	ldbu	r2,50(r2)
 4005a8c:	10803fcc 	andi	r2,r2,255
 4005a90:	10c00120 	cmpeqi	r3,r2,4
 4005a94:	1800141e 	bne	r3,zero,4005ae8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
 4005a98:	10c00160 	cmpeqi	r3,r2,5
 4005a9c:	1800311e 	bne	r3,zero,4005b64 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
 4005aa0:	108000a0 	cmpeqi	r2,r2,2
 4005aa4:	10005a26 	beq	r2,zero,4005c10 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 4005aa8:	e0bffc17 	ldw	r2,-16(fp)
 4005aac:	10800404 	addi	r2,r2,16
 4005ab0:	e1bffe17 	ldw	r6,-8(fp)
 4005ab4:	e17ffd17 	ldw	r5,-12(fp)
 4005ab8:	1009883a 	mov	r4,r2
 4005abc:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005ac0:	1080005c 	xori	r2,r2,1
 4005ac4:	10803fcc 	andi	r2,r2,255
 4005ac8:	10000226 	beq	r2,zero,4005ad4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
 4005acc:	0005883a 	mov	r2,zero
 4005ad0:	00008706 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
 4005ad4:	e0bffa17 	ldw	r2,-24(fp)
 4005ad8:	10c00143 	ldbu	r3,5(r2)
 4005adc:	e0bffc17 	ldw	r2,-16(fp)
 4005ae0:	10c00d05 	stb	r3,52(r2)
                                        break;
 4005ae4:	00005e06 	br	4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 4005ae8:	e0bffc17 	ldw	r2,-16(fp)
 4005aec:	10800404 	addi	r2,r2,16
 4005af0:	e1bffe17 	ldw	r6,-8(fp)
 4005af4:	e17ffd17 	ldw	r5,-12(fp)
 4005af8:	1009883a 	mov	r4,r2
 4005afc:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005b00:	1080005c 	xori	r2,r2,1
 4005b04:	10803fcc 	andi	r2,r2,255
 4005b08:	10000226 	beq	r2,zero,4005b14 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
 4005b0c:	0005883a 	mov	r2,zero
 4005b10:	00007706 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
 4005b14:	e0bffc17 	ldw	r2,-16(fp)
 4005b18:	10800e03 	ldbu	r2,56(r2)
 4005b1c:	10803fcc 	andi	r2,r2,255
 4005b20:	10004c1e 	bne	r2,zero,4005c54 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
 4005b24:	e0bffc17 	ldw	r2,-16(fp)
 4005b28:	00c00044 	movi	r3,1
 4005b2c:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
 4005b30:	e0bffb17 	ldw	r2,-20(fp)
 4005b34:	10c00083 	ldbu	r3,2(r2)
 4005b38:	e0bffc17 	ldw	r2,-16(fp)
 4005b3c:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
 4005b40:	e0bffb17 	ldw	r2,-20(fp)
 4005b44:	10c000c3 	ldbu	r3,3(r2)
 4005b48:	e0bffc17 	ldw	r2,-16(fp)
 4005b4c:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
 4005b50:	e0bffb17 	ldw	r2,-20(fp)
 4005b54:	10c001c3 	ldbu	r3,7(r2)
 4005b58:	e0bffc17 	ldw	r2,-16(fp)
 4005b5c:	10c00d45 	stb	r3,53(r2)
                                        break;
 4005b60:	00003f06 	br	4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 4005b64:	e0bffc17 	ldw	r2,-16(fp)
 4005b68:	10800404 	addi	r2,r2,16
 4005b6c:	e1bffe17 	ldw	r6,-8(fp)
 4005b70:	e17ffd17 	ldw	r5,-12(fp)
 4005b74:	1009883a 	mov	r4,r2
 4005b78:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005b7c:	1080005c 	xori	r2,r2,1
 4005b80:	10803fcc 	andi	r2,r2,255
 4005b84:	10000226 	beq	r2,zero,4005b90 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
 4005b88:	0005883a 	mov	r2,zero
 4005b8c:	00005806 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
 4005b90:	e0bffc17 	ldw	r2,-16(fp)
 4005b94:	10800cc3 	ldbu	r2,51(r2)
 4005b98:	10803fcc 	andi	r2,r2,255
 4005b9c:	10002f26 	beq	r2,zero,4005c5c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
 4005ba0:	e0bffc17 	ldw	r2,-16(fp)
 4005ba4:	10800117 	ldw	r2,4(r2)
 4005ba8:	10002c26 	beq	r2,zero,4005c5c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 4005bac:	e0bffc17 	ldw	r2,-16(fp)
 4005bb0:	10800117 	ldw	r2,4(r2)
 4005bb4:	10800017 	ldw	r2,0(r2)
 4005bb8:	10800017 	ldw	r2,0(r2)
 4005bbc:	e0fffc17 	ldw	r3,-16(fp)
 4005bc0:	1a000117 	ldw	r8,4(r3)
 4005bc4:	e0fffc17 	ldw	r3,-16(fp)
 4005bc8:	18c00d03 	ldbu	r3,52(r3)
 4005bcc:	19403fcc 	andi	r5,r3,255
 4005bd0:	e0fffc17 	ldw	r3,-16(fp)
 4005bd4:	18c00d83 	ldbu	r3,54(r3)
 4005bd8:	19803fcc 	andi	r6,r3,255
 4005bdc:	e0fffc17 	ldw	r3,-16(fp)
 4005be0:	18c00dc3 	ldbu	r3,55(r3)
 4005be4:	19c03fcc 	andi	r7,r3,255
 4005be8:	e0fffc17 	ldw	r3,-16(fp)
 4005bec:	18c00d43 	ldbu	r3,53(r3)
 4005bf0:	18c03fcc 	andi	r3,r3,255
 4005bf4:	e13ffc17 	ldw	r4,-16(fp)
 4005bf8:	21000804 	addi	r4,r4,32
 4005bfc:	d9000115 	stw	r4,4(sp)
 4005c00:	d8c00015 	stw	r3,0(sp)
 4005c04:	4009883a 	mov	r4,r8
 4005c08:	103ee83a 	callr	r2
                                        break;
 4005c0c:	00001306 	br	4005c5c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 4005c10:	e0bffc17 	ldw	r2,-16(fp)
 4005c14:	10c00604 	addi	r3,r2,24
 4005c18:	e0bffc17 	ldw	r2,-16(fp)
 4005c1c:	10800c43 	ldbu	r2,49(r2)
 4005c20:	10803fcc 	andi	r2,r2,255
 4005c24:	10bfff84 	addi	r2,r2,-2
 4005c28:	10bfffcc 	andi	r2,r2,65535
 4005c2c:	100f883a 	mov	r7,r2
 4005c30:	e1bffe17 	ldw	r6,-8(fp)
 4005c34:	e17ffd17 	ldw	r5,-12(fp)
 4005c38:	1809883a 	mov	r4,r3
 4005c3c:	40050f00 	call	40050f0 <_ZN11ByteSkipper4SkipEPPhPtt>
 4005c40:	1080005c 	xori	r2,r2,1
 4005c44:	10803fcc 	andi	r2,r2,255
 4005c48:	10000526 	beq	r2,zero,4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
 4005c4c:	0005883a 	mov	r2,zero
 4005c50:	00002706 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
 4005c54:	0001883a 	nop
 4005c58:	00000106 	br	4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
 4005c5c:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
 4005c60:	e0bffc17 	ldw	r2,-16(fp)
 4005c64:	10c00804 	addi	r3,r2,32
 4005c68:	e0bffc17 	ldw	r2,-16(fp)
 4005c6c:	19803fcc 	andi	r6,r3,255
 4005c70:	11000243 	ldbu	r4,9(r2)
 4005c74:	2008703a 	and	r4,r4,zero
 4005c78:	200b883a 	mov	r5,r4
 4005c7c:	3009883a 	mov	r4,r6
 4005c80:	2908b03a 	or	r4,r5,r4
 4005c84:	11000245 	stb	r4,9(r2)
 4005c88:	1808d23a 	srli	r4,r3,8
 4005c8c:	21803fcc 	andi	r6,r4,255
 4005c90:	11000283 	ldbu	r4,10(r2)
 4005c94:	2008703a 	and	r4,r4,zero
 4005c98:	200b883a 	mov	r5,r4
 4005c9c:	3009883a 	mov	r4,r6
 4005ca0:	2908b03a 	or	r4,r5,r4
 4005ca4:	11000285 	stb	r4,10(r2)
 4005ca8:	1808d43a 	srli	r4,r3,16
 4005cac:	21803fcc 	andi	r6,r4,255
 4005cb0:	110002c3 	ldbu	r4,11(r2)
 4005cb4:	2008703a 	and	r4,r4,zero
 4005cb8:	200b883a 	mov	r5,r4
 4005cbc:	3009883a 	mov	r4,r6
 4005cc0:	2908b03a 	or	r4,r5,r4
 4005cc4:	110002c5 	stb	r4,11(r2)
 4005cc8:	180ad63a 	srli	r5,r3,24
 4005ccc:	10c00303 	ldbu	r3,12(r2)
 4005cd0:	1806703a 	and	r3,r3,zero
 4005cd4:	1809883a 	mov	r4,r3
 4005cd8:	2807883a 	mov	r3,r5
 4005cdc:	20c6b03a 	or	r3,r4,r3
 4005ce0:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
 4005ce4:	e0bffc17 	ldw	r2,-16(fp)
 4005ce8:	10000c05 	stb	zero,48(r2)
        }
        return true;
 4005cec:	00800044 	movi	r2,1
}
 4005cf0:	e037883a 	mov	sp,fp
 4005cf4:	dfc00117 	ldw	ra,4(sp)
 4005cf8:	df000017 	ldw	fp,0(sp)
 4005cfc:	dec00204 	addi	sp,sp,8
 4005d00:	f800283a 	ret

04005d04 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
 4005d04:	defff904 	addi	sp,sp,-28
 4005d08:	dfc00615 	stw	ra,24(sp)
 4005d0c:	df000515 	stw	fp,20(sp)
 4005d10:	df000504 	addi	fp,sp,20
 4005d14:	e13ffc15 	stw	r4,-16(fp)
 4005d18:	e17ffd15 	stw	r5,-12(fp)
 4005d1c:	3007883a 	mov	r3,r6
 4005d20:	3805883a 	mov	r2,r7
 4005d24:	e0fffe05 	stb	r3,-8(fp)
 4005d28:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
 4005d2c:	e0800217 	ldw	r2,8(fp)
 4005d30:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
 4005d34:	e0bffc17 	ldw	r2,-16(fp)
 4005d38:	10800117 	ldw	r2,4(r2)
 4005d3c:	1080004c 	andi	r2,r2,1
 4005d40:	1007883a 	mov	r3,r2
 4005d44:	e0bffb17 	ldw	r2,-20(fp)
 4005d48:	10800003 	ldbu	r2,0(r2)
 4005d4c:	1080004c 	andi	r2,r2,1
 4005d50:	18c03fcc 	andi	r3,r3,255
 4005d54:	10803fcc 	andi	r2,r2,255
 4005d58:	18801426 	beq	r3,r2,4005dac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
 4005d5c:	e0bffb17 	ldw	r2,-20(fp)
 4005d60:	10800003 	ldbu	r2,0(r2)
 4005d64:	1080004c 	andi	r2,r2,1
 4005d68:	10803fcc 	andi	r2,r2,255
 4005d6c:	10000826 	beq	r2,zero,4005d90 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
 4005d70:	e0bffc17 	ldw	r2,-16(fp)
 4005d74:	10800017 	ldw	r2,0(r2)
 4005d78:	10800304 	addi	r2,r2,12
 4005d7c:	10800017 	ldw	r2,0(r2)
 4005d80:	e17ffb17 	ldw	r5,-20(fp)
 4005d84:	e13ffc17 	ldw	r4,-16(fp)
 4005d88:	103ee83a 	callr	r2
 4005d8c:	00000706 	br	4005dac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
 4005d90:	e0bffc17 	ldw	r2,-16(fp)
 4005d94:	10800017 	ldw	r2,0(r2)
 4005d98:	10800204 	addi	r2,r2,8
 4005d9c:	10800017 	ldw	r2,0(r2)
 4005da0:	e17ffb17 	ldw	r5,-20(fp)
 4005da4:	e13ffc17 	ldw	r4,-16(fp)
 4005da8:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
 4005dac:	e0bffc17 	ldw	r2,-16(fp)
 4005db0:	10800117 	ldw	r2,4(r2)
 4005db4:	1004d07a 	srli	r2,r2,1
 4005db8:	1080004c 	andi	r2,r2,1
 4005dbc:	1007883a 	mov	r3,r2
 4005dc0:	e0bffb17 	ldw	r2,-20(fp)
 4005dc4:	10800003 	ldbu	r2,0(r2)
 4005dc8:	1004d07a 	srli	r2,r2,1
 4005dcc:	1080004c 	andi	r2,r2,1
 4005dd0:	18c03fcc 	andi	r3,r3,255
 4005dd4:	10803fcc 	andi	r2,r2,255
 4005dd8:	18801426 	beq	r3,r2,4005e2c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
 4005ddc:	e0bffb17 	ldw	r2,-20(fp)
 4005de0:	10800003 	ldbu	r2,0(r2)
 4005de4:	1080008c 	andi	r2,r2,2
 4005de8:	10803fcc 	andi	r2,r2,255
 4005dec:	10000826 	beq	r2,zero,4005e10 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
 4005df0:	e0bffc17 	ldw	r2,-16(fp)
 4005df4:	10800017 	ldw	r2,0(r2)
 4005df8:	10800504 	addi	r2,r2,20
 4005dfc:	10800017 	ldw	r2,0(r2)
 4005e00:	e17ffb17 	ldw	r5,-20(fp)
 4005e04:	e13ffc17 	ldw	r4,-16(fp)
 4005e08:	103ee83a 	callr	r2
 4005e0c:	00000706 	br	4005e2c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
 4005e10:	e0bffc17 	ldw	r2,-16(fp)
 4005e14:	10800017 	ldw	r2,0(r2)
 4005e18:	10800404 	addi	r2,r2,16
 4005e1c:	10800017 	ldw	r2,0(r2)
 4005e20:	e17ffb17 	ldw	r5,-20(fp)
 4005e24:	e13ffc17 	ldw	r4,-16(fp)
 4005e28:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
 4005e2c:	e0bffc17 	ldw	r2,-16(fp)
 4005e30:	10800117 	ldw	r2,4(r2)
 4005e34:	1004d0ba 	srli	r2,r2,2
 4005e38:	1080004c 	andi	r2,r2,1
 4005e3c:	1007883a 	mov	r3,r2
 4005e40:	e0bffb17 	ldw	r2,-20(fp)
 4005e44:	10800003 	ldbu	r2,0(r2)
 4005e48:	1004d0ba 	srli	r2,r2,2
 4005e4c:	1080004c 	andi	r2,r2,1
 4005e50:	18c03fcc 	andi	r3,r3,255
 4005e54:	10803fcc 	andi	r2,r2,255
 4005e58:	18801426 	beq	r3,r2,4005eac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
 4005e5c:	e0bffb17 	ldw	r2,-20(fp)
 4005e60:	10800003 	ldbu	r2,0(r2)
 4005e64:	1080010c 	andi	r2,r2,4
 4005e68:	10803fcc 	andi	r2,r2,255
 4005e6c:	10000826 	beq	r2,zero,4005e90 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
 4005e70:	e0bffc17 	ldw	r2,-16(fp)
 4005e74:	10800017 	ldw	r2,0(r2)
 4005e78:	10800704 	addi	r2,r2,28
 4005e7c:	10800017 	ldw	r2,0(r2)
 4005e80:	e17ffb17 	ldw	r5,-20(fp)
 4005e84:	e13ffc17 	ldw	r4,-16(fp)
 4005e88:	103ee83a 	callr	r2
 4005e8c:	00000706 	br	4005eac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
 4005e90:	e0bffc17 	ldw	r2,-16(fp)
 4005e94:	10800017 	ldw	r2,0(r2)
 4005e98:	10800604 	addi	r2,r2,24
 4005e9c:	10800017 	ldw	r2,0(r2)
 4005ea0:	e17ffb17 	ldw	r5,-20(fp)
 4005ea4:	e13ffc17 	ldw	r4,-16(fp)
 4005ea8:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
 4005eac:	e0bffb17 	ldw	r2,-20(fp)
 4005eb0:	10800043 	ldbu	r2,1(r2)
 4005eb4:	10803fcc 	andi	r2,r2,255
 4005eb8:	1080201c 	xori	r2,r2,128
 4005ebc:	10bfe004 	addi	r2,r2,-128
 4005ec0:	1000061e 	bne	r2,zero,4005edc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
 4005ec4:	e0bffb17 	ldw	r2,-20(fp)
 4005ec8:	10800083 	ldbu	r2,2(r2)
 4005ecc:	10803fcc 	andi	r2,r2,255
 4005ed0:	1080201c 	xori	r2,r2,128
 4005ed4:	10bfe004 	addi	r2,r2,-128
 4005ed8:	10000726 	beq	r2,zero,4005ef8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
 4005edc:	e0bffc17 	ldw	r2,-16(fp)
 4005ee0:	10800017 	ldw	r2,0(r2)
 4005ee4:	10800104 	addi	r2,r2,4
 4005ee8:	10800017 	ldw	r2,0(r2)
 4005eec:	e17ffb17 	ldw	r5,-20(fp)
 4005ef0:	e13ffc17 	ldw	r4,-16(fp)
 4005ef4:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
 4005ef8:	e0800217 	ldw	r2,8(fp)
 4005efc:	10c00003 	ldbu	r3,0(r2)
 4005f00:	e0bffc17 	ldw	r2,-16(fp)
 4005f04:	10c00105 	stb	r3,4(r2)
#endif

};
 4005f08:	0001883a 	nop
 4005f0c:	e037883a 	mov	sp,fp
 4005f10:	dfc00117 	ldw	ra,4(sp)
 4005f14:	df000017 	ldw	fp,0(sp)
 4005f18:	dec00204 	addi	sp,sp,8
 4005f1c:	f800283a 	ret

04005f20 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
 4005f20:	defff804 	addi	sp,sp,-32
 4005f24:	dfc00715 	stw	ra,28(sp)
 4005f28:	df000615 	stw	fp,24(sp)
 4005f2c:	df000604 	addi	fp,sp,24
 4005f30:	e13ffc15 	stw	r4,-16(fp)
 4005f34:	e17ffd15 	stw	r5,-12(fp)
 4005f38:	3007883a 	mov	r3,r6
 4005f3c:	3805883a 	mov	r2,r7
 4005f40:	e0fffe05 	stb	r3,-8(fp)
 4005f44:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
 4005f48:	e0800217 	ldw	r2,8(fp)
 4005f4c:	10800084 	addi	r2,r2,2
 4005f50:	10800003 	ldbu	r2,0(r2)
 4005f54:	10803fcc 	andi	r2,r2,255
 4005f58:	10800058 	cmpnei	r2,r2,1
 4005f5c:	10009926 	beq	r2,zero,40061c4 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
 4005f60:	e0bffc17 	ldw	r2,-16(fp)
 4005f64:	10c00103 	ldbu	r3,4(r2)
 4005f68:	e0800217 	ldw	r2,8(fp)
 4005f6c:	10800003 	ldbu	r2,0(r2)
 4005f70:	18c03fcc 	andi	r3,r3,255
 4005f74:	10803fcc 	andi	r2,r2,255
 4005f78:	18800e26 	beq	r3,r2,4005fb4 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
 4005f7c:	e0bffc17 	ldw	r2,-16(fp)
 4005f80:	10800017 	ldw	r2,0(r2)
 4005f84:	10800204 	addi	r2,r2,8
 4005f88:	10800017 	ldw	r2,0(r2)
 4005f8c:	e0fffc17 	ldw	r3,-16(fp)
 4005f90:	18c00103 	ldbu	r3,4(r3)
 4005f94:	19003fcc 	andi	r4,r3,255
 4005f98:	e0c00217 	ldw	r3,8(fp)
 4005f9c:	18c00003 	ldbu	r3,0(r3)
 4005fa0:	18c03fcc 	andi	r3,r3,255
 4005fa4:	180d883a 	mov	r6,r3
 4005fa8:	200b883a 	mov	r5,r4
 4005fac:	e13ffc17 	ldw	r4,-16(fp)
 4005fb0:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
 4005fb4:	00800084 	movi	r2,2
 4005fb8:	e0bffa05 	stb	r2,-24(fp)
 4005fbc:	e0bffa03 	ldbu	r2,-24(fp)
 4005fc0:	10800228 	cmpgeui	r2,r2,8
 4005fc4:	10006e1e 	bne	r2,zero,4006180 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
 4005fc8:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
 4005fcc:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
 4005fd0:	00800084 	movi	r2,2
 4005fd4:	e0bffac5 	stb	r2,-21(fp)
 4005fd8:	e0bffac3 	ldbu	r2,-21(fp)
 4005fdc:	10800228 	cmpgeui	r2,r2,8
 4005fe0:	10002f1e 	bne	r2,zero,40060a0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
 4005fe4:	e0bffa03 	ldbu	r2,-24(fp)
 4005fe8:	e0c00217 	ldw	r3,8(fp)
 4005fec:	1885883a 	add	r2,r3,r2
 4005ff0:	11000003 	ldbu	r4,0(r2)
 4005ff4:	e0bffac3 	ldbu	r2,-21(fp)
 4005ff8:	e0fffc17 	ldw	r3,-16(fp)
 4005ffc:	1885883a 	add	r2,r3,r2
 4006000:	10800104 	addi	r2,r2,4
 4006004:	10800003 	ldbu	r2,0(r2)
 4006008:	20c03fcc 	andi	r3,r4,255
 400600c:	10803fcc 	andi	r2,r2,255
 4006010:	1880091e 	bne	r3,r2,4006038 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
 4006014:	e0bffa03 	ldbu	r2,-24(fp)
 4006018:	e0c00217 	ldw	r3,8(fp)
 400601c:	1885883a 	add	r2,r3,r2
 4006020:	10800003 	ldbu	r2,0(r2)
 4006024:	10803fcc 	andi	r2,r2,255
 4006028:	10800060 	cmpeqi	r2,r2,1
 400602c:	1000021e 	bne	r2,zero,4006038 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
 4006030:	00800044 	movi	r2,1
 4006034:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
 4006038:	e0bffac3 	ldbu	r2,-21(fp)
 400603c:	e0c00217 	ldw	r3,8(fp)
 4006040:	1885883a 	add	r2,r3,r2
 4006044:	11000003 	ldbu	r4,0(r2)
 4006048:	e0bffa03 	ldbu	r2,-24(fp)
 400604c:	e0fffc17 	ldw	r3,-16(fp)
 4006050:	1885883a 	add	r2,r3,r2
 4006054:	10800104 	addi	r2,r2,4
 4006058:	10800003 	ldbu	r2,0(r2)
 400605c:	20c03fcc 	andi	r3,r4,255
 4006060:	10803fcc 	andi	r2,r2,255
 4006064:	18800a1e 	bne	r3,r2,4006090 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
 4006068:	e0bffa03 	ldbu	r2,-24(fp)
 400606c:	e0fffc17 	ldw	r3,-16(fp)
 4006070:	1885883a 	add	r2,r3,r2
 4006074:	10800104 	addi	r2,r2,4
 4006078:	10800003 	ldbu	r2,0(r2)
 400607c:	10803fcc 	andi	r2,r2,255
 4006080:	10800060 	cmpeqi	r2,r2,1
 4006084:	1000021e 	bne	r2,zero,4006090 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
 4006088:	00800044 	movi	r2,1
 400608c:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
 4006090:	e0bffac3 	ldbu	r2,-21(fp)
 4006094:	10800044 	addi	r2,r2,1
 4006098:	e0bffac5 	stb	r2,-21(fp)
 400609c:	003fce06 	br	4005fd8 <__alt_mem_onchip_memory2_0+0xfc004d58>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
 40060a0:	e0bffa43 	ldbu	r2,-23(fp)
 40060a4:	1080005c 	xori	r2,r2,1
 40060a8:	10803fcc 	andi	r2,r2,255
 40060ac:	10001c26 	beq	r2,zero,4006120 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
 40060b0:	e0bffc17 	ldw	r2,-16(fp)
 40060b4:	10800017 	ldw	r2,0(r2)
 40060b8:	10800104 	addi	r2,r2,4
 40060bc:	10800017 	ldw	r2,0(r2)
 40060c0:	e0fffa03 	ldbu	r3,-24(fp)
 40060c4:	e1000217 	ldw	r4,8(fp)
 40060c8:	20c7883a 	add	r3,r4,r3
 40060cc:	18c00003 	ldbu	r3,0(r3)
 40060d0:	18c03fcc 	andi	r3,r3,255
 40060d4:	180d883a 	mov	r6,r3
 40060d8:	e17ffd17 	ldw	r5,-12(fp)
 40060dc:	e13ffc17 	ldw	r4,-16(fp)
 40060e0:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
 40060e4:	e0bffc17 	ldw	r2,-16(fp)
 40060e8:	10800017 	ldw	r2,0(r2)
 40060ec:	10800304 	addi	r2,r2,12
 40060f0:	10800017 	ldw	r2,0(r2)
 40060f4:	e0c00217 	ldw	r3,8(fp)
 40060f8:	18c00003 	ldbu	r3,0(r3)
 40060fc:	19403fcc 	andi	r5,r3,255
 4006100:	e0fffa03 	ldbu	r3,-24(fp)
 4006104:	e1000217 	ldw	r4,8(fp)
 4006108:	20c7883a 	add	r3,r4,r3
 400610c:	18c00003 	ldbu	r3,0(r3)
 4006110:	18c03fcc 	andi	r3,r3,255
 4006114:	180d883a 	mov	r6,r3
 4006118:	e13ffc17 	ldw	r4,-16(fp)
 400611c:	103ee83a 	callr	r2
                }
                if (!up)
 4006120:	e0bffa83 	ldbu	r2,-22(fp)
 4006124:	1080005c 	xori	r2,r2,1
 4006128:	10803fcc 	andi	r2,r2,255
 400612c:	10001026 	beq	r2,zero,4006170 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
 4006130:	e0bffc17 	ldw	r2,-16(fp)
 4006134:	10800017 	ldw	r2,0(r2)
 4006138:	10800404 	addi	r2,r2,16
 400613c:	10800017 	ldw	r2,0(r2)
 4006140:	e0fffc17 	ldw	r3,-16(fp)
 4006144:	18c00103 	ldbu	r3,4(r3)
 4006148:	19403fcc 	andi	r5,r3,255
 400614c:	e0fffa03 	ldbu	r3,-24(fp)
 4006150:	e13ffc17 	ldw	r4,-16(fp)
 4006154:	20c7883a 	add	r3,r4,r3
 4006158:	18c00104 	addi	r3,r3,4
 400615c:	18c00003 	ldbu	r3,0(r3)
 4006160:	18c03fcc 	andi	r3,r3,255
 4006164:	180d883a 	mov	r6,r3
 4006168:	e13ffc17 	ldw	r4,-16(fp)
 400616c:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
 4006170:	e0bffa03 	ldbu	r2,-24(fp)
 4006174:	10800044 	addi	r2,r2,1
 4006178:	e0bffa05 	stb	r2,-24(fp)
 400617c:	003f8f06 	br	4005fbc <__alt_mem_onchip_memory2_0+0xfc004d3c>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
 4006180:	e03ffb05 	stb	zero,-20(fp)
 4006184:	e0bffb03 	ldbu	r2,-20(fp)
 4006188:	10800228 	cmpgeui	r2,r2,8
 400618c:	10000e1e 	bne	r2,zero,40061c8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
 4006190:	e0bffb03 	ldbu	r2,-20(fp)
 4006194:	e0fffb03 	ldbu	r3,-20(fp)
 4006198:	e1000217 	ldw	r4,8(fp)
 400619c:	20c7883a 	add	r3,r4,r3
 40061a0:	18c00003 	ldbu	r3,0(r3)
 40061a4:	e13ffc17 	ldw	r4,-16(fp)
 40061a8:	2085883a 	add	r2,r4,r2
 40061ac:	10800104 	addi	r2,r2,4
 40061b0:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
 40061b4:	e0bffb03 	ldbu	r2,-20(fp)
 40061b8:	10800044 	addi	r2,r2,1
 40061bc:	e0bffb05 	stb	r2,-20(fp)
 40061c0:	003ff006 	br	4006184 <__alt_mem_onchip_memory2_0+0xfc004f04>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
 40061c4:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
 40061c8:	e037883a 	mov	sp,fp
 40061cc:	dfc00117 	ldw	ra,4(sp)
 40061d0:	df000017 	ldw	fp,0(sp)
 40061d4:	dec00204 	addi	sp,sp,8
 40061d8:	f800283a 	ret

040061dc <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
 40061dc:	defffa04 	addi	sp,sp,-24
 40061e0:	dfc00515 	stw	ra,20(sp)
 40061e4:	df000415 	stw	fp,16(sp)
 40061e8:	df000404 	addi	fp,sp,16
 40061ec:	e13ffd15 	stw	r4,-12(fp)
 40061f0:	2807883a 	mov	r3,r5
 40061f4:	3005883a 	mov	r2,r6
 40061f8:	e0fffe05 	stb	r3,-8(fp)
 40061fc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
 4006200:	e0bffe03 	ldbu	r2,-8(fp)
 4006204:	1080088c 	andi	r2,r2,34
 4006208:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
 400620c:	e0bfff03 	ldbu	r2,-4(fp)
 4006210:	10800130 	cmpltui	r2,r2,4
 4006214:	1000151e 	bne	r2,zero,400626c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
 4006218:	e0bfff03 	ldbu	r2,-4(fp)
 400621c:	108007a8 	cmpgeui	r2,r2,30
 4006220:	1000121e 	bne	r2,zero,400626c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
 4006224:	e0bffd17 	ldw	r2,-12(fp)
 4006228:	10800317 	ldw	r2,12(r2)
 400622c:	1080008c 	andi	r2,r2,2
 4006230:	1000021e 	bne	r2,zero,400623c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
 4006234:	e0bffc03 	ldbu	r2,-16(fp)
 4006238:	1000061e 	bne	r2,zero,4006254 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
 400623c:	e0bffd17 	ldw	r2,-12(fp)
 4006240:	10800317 	ldw	r2,12(r2)
 4006244:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
 4006248:	10000526 	beq	r2,zero,4006260 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
 400624c:	e0bffc03 	ldbu	r2,-16(fp)
 4006250:	1000031e 	bne	r2,zero,4006260 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
 4006254:	e0bfff03 	ldbu	r2,-4(fp)
 4006258:	10800f44 	addi	r2,r2,61
 400625c:	00008006 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
 4006260:	e0bfff03 	ldbu	r2,-4(fp)
 4006264:	10801744 	addi	r2,r2,93
 4006268:	00007d06 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
 400626c:	e0bfff03 	ldbu	r2,-4(fp)
 4006270:	108007b0 	cmpltui	r2,r2,30
 4006274:	1000191e 	bne	r2,zero,40062dc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
 4006278:	e0bfff03 	ldbu	r2,-4(fp)
 400627c:	10800a28 	cmpgeui	r2,r2,40
 4006280:	1000161e 	bne	r2,zero,40062dc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
 4006284:	e0bffc03 	ldbu	r2,-16(fp)
 4006288:	10000c26 	beq	r2,zero,40062bc <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
 400628c:	e0bffd17 	ldw	r2,-12(fp)
 4006290:	10800017 	ldw	r2,0(r2)
 4006294:	10800504 	addi	r2,r2,20
 4006298:	10800017 	ldw	r2,0(r2)
 400629c:	e13ffd17 	ldw	r4,-12(fp)
 40062a0:	103ee83a 	callr	r2
 40062a4:	1007883a 	mov	r3,r2
 40062a8:	e0bfff03 	ldbu	r2,-4(fp)
 40062ac:	10bff884 	addi	r2,r2,-30
 40062b0:	1885883a 	add	r2,r3,r2
 40062b4:	10800003 	ldbu	r2,0(r2)
 40062b8:	00006906 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
 40062bc:	e0bfff03 	ldbu	r2,-4(fp)
 40062c0:	108009e0 	cmpeqi	r2,r2,39
 40062c4:	1000031e 	bne	r2,zero,40062d4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
 40062c8:	e0bfff03 	ldbu	r2,-4(fp)
 40062cc:	108004c4 	addi	r2,r2,19
 40062d0:	00006306 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 40062d4:	00800c04 	movi	r2,48
 40062d8:	00006106 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
 40062dc:	e0bfff03 	ldbu	r2,-4(fp)
 40062e0:	10801670 	cmpltui	r2,r2,89
 40062e4:	10000a1e 	bne	r2,zero,4006310 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
 40062e8:	e0bfff03 	ldbu	r2,-4(fp)
 40062ec:	108018a8 	cmpgeui	r2,r2,98
 40062f0:	1000071e 	bne	r2,zero,4006310 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
 40062f4:	e0bffd17 	ldw	r2,-12(fp)
 40062f8:	10800317 	ldw	r2,12(r2)
 40062fc:	1080004c 	andi	r2,r2,1
 4006300:	10005626 	beq	r2,zero,400645c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
 4006304:	e0bfff03 	ldbu	r2,-4(fp)
 4006308:	10bff604 	addi	r2,r2,-40
 400630c:	00005406 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
 4006310:	e0bfff03 	ldbu	r2,-4(fp)
 4006314:	10800b70 	cmpltui	r2,r2,45
 4006318:	10001d1e 	bne	r2,zero,4006390 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
 400631c:	e0bfff03 	ldbu	r2,-4(fp)
 4006320:	10800e68 	cmpgeui	r2,r2,57
 4006324:	10001a1e 	bne	r2,zero,4006390 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
 4006328:	e0bffc03 	ldbu	r2,-16(fp)
 400632c:	10000c26 	beq	r2,zero,4006360 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
 4006330:	e0bffd17 	ldw	r2,-12(fp)
 4006334:	10800017 	ldw	r2,0(r2)
 4006338:	10800604 	addi	r2,r2,24
 400633c:	10800017 	ldw	r2,0(r2)
 4006340:	e13ffd17 	ldw	r4,-12(fp)
 4006344:	103ee83a 	callr	r2
 4006348:	1007883a 	mov	r3,r2
 400634c:	e0bfff03 	ldbu	r2,-4(fp)
 4006350:	10bff4c4 	addi	r2,r2,-45
 4006354:	1885883a 	add	r2,r3,r2
 4006358:	10800003 	ldbu	r2,0(r2)
 400635c:	00004006 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4006360:	e0bffd17 	ldw	r2,-12(fp)
 4006364:	10800017 	ldw	r2,0(r2)
 4006368:	10800704 	addi	r2,r2,28
 400636c:	10800017 	ldw	r2,0(r2)
 4006370:	e13ffd17 	ldw	r4,-12(fp)
 4006374:	103ee83a 	callr	r2
 4006378:	1007883a 	mov	r3,r2
 400637c:	e0bfff03 	ldbu	r2,-4(fp)
 4006380:	10bff4c4 	addi	r2,r2,-45
 4006384:	1885883a 	add	r2,r3,r2
 4006388:	10800003 	ldbu	r2,0(r2)
 400638c:	00003406 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
 4006390:	e0bfff03 	ldbu	r2,-4(fp)
 4006394:	10801530 	cmpltui	r2,r2,84
 4006398:	10000f1e 	bne	r2,zero,40063d8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
 400639c:	e0bfff03 	ldbu	r2,-4(fp)
 40063a0:	10801668 	cmpgeui	r2,r2,89
 40063a4:	10000c1e 	bne	r2,zero,40063d8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
 40063a8:	e0bffd17 	ldw	r2,-12(fp)
 40063ac:	10800017 	ldw	r2,0(r2)
 40063b0:	10800804 	addi	r2,r2,32
 40063b4:	10800017 	ldw	r2,0(r2)
 40063b8:	e13ffd17 	ldw	r4,-12(fp)
 40063bc:	103ee83a 	callr	r2
 40063c0:	1007883a 	mov	r3,r2
 40063c4:	e0bfff03 	ldbu	r2,-4(fp)
 40063c8:	10bfeb04 	addi	r2,r2,-84
 40063cc:	1885883a 	add	r2,r3,r2
 40063d0:	10800003 	ldbu	r2,0(r2)
 40063d4:	00002206 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
 40063d8:	e0bfff03 	ldbu	r2,-4(fp)
 40063dc:	10c00b20 	cmpeqi	r3,r2,44
 40063e0:	18000a1e 	bne	r3,zero,400640c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
 40063e4:	10c00b48 	cmpgei	r3,r2,45
 40063e8:	1800031e 	bne	r3,zero,40063f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
 40063ec:	10800a20 	cmpeqi	r2,r2,40
 40063f0:	1000081e 	bne	r2,zero,4006414 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
 40063f4:	00001906 	br	400645c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
 40063f8:	10c018a0 	cmpeqi	r3,r2,98
 40063fc:	1800071e 	bne	r3,zero,400641c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
 4006400:	108018e0 	cmpeqi	r2,r2,99
 4006404:	10000d1e 	bne	r2,zero,400643c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
 4006408:	00001406 	br	400645c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
 400640c:	00800804 	movi	r2,32
 4006410:	00001306 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
 4006414:	00800344 	movi	r2,13
 4006418:	00001106 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
 400641c:	e0bffd17 	ldw	r2,-12(fp)
 4006420:	10800317 	ldw	r2,12(r2)
 4006424:	1080004c 	andi	r2,r2,1
 4006428:	10000226 	beq	r2,zero,4006434 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
 400642c:	00800c04 	movi	r2,48
 4006430:	00000b06 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4006434:	0005883a 	mov	r2,zero
 4006438:	00000906 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
 400643c:	e0bffd17 	ldw	r2,-12(fp)
 4006440:	10800317 	ldw	r2,12(r2)
 4006444:	1080004c 	andi	r2,r2,1
 4006448:	10000226 	beq	r2,zero,4006454 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
 400644c:	00800b84 	movi	r2,46
 4006450:	00000306 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4006454:	0005883a 	mov	r2,zero
 4006458:	00000106 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
 400645c:	0005883a 	mov	r2,zero
}
 4006460:	e037883a 	mov	sp,fp
 4006464:	dfc00117 	ldw	ra,4(sp)
 4006468:	df000017 	ldw	fp,0(sp)
 400646c:	dec00204 	addi	sp,sp,8
 4006470:	f800283a 	ret

04006474 <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
 4006474:	defffd04 	addi	sp,sp,-12
 4006478:	df000215 	stw	fp,8(sp)
 400647c:	df000204 	addi	fp,sp,8
 4006480:	e13ffe15 	stw	r4,-8(fp)
 4006484:	e17fff15 	stw	r5,-4(fp)
        };
 4006488:	0001883a 	nop
 400648c:	e037883a 	mov	sp,fp
 4006490:	df000017 	ldw	fp,0(sp)
 4006494:	dec00104 	addi	sp,sp,4
 4006498:	f800283a 	ret

0400649c <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 400649c:	defffd04 	addi	sp,sp,-12
 40064a0:	df000215 	stw	fp,8(sp)
 40064a4:	df000204 	addi	fp,sp,8
 40064a8:	e13ffe15 	stw	r4,-8(fp)
 40064ac:	e17fff15 	stw	r5,-4(fp)
        };
 40064b0:	0001883a 	nop
 40064b4:	e037883a 	mov	sp,fp
 40064b8:	df000017 	ldw	fp,0(sp)
 40064bc:	dec00104 	addi	sp,sp,4
 40064c0:	f800283a 	ret

040064c4 <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 40064c4:	defffd04 	addi	sp,sp,-12
 40064c8:	df000215 	stw	fp,8(sp)
 40064cc:	df000204 	addi	fp,sp,8
 40064d0:	e13ffe15 	stw	r4,-8(fp)
 40064d4:	e17fff15 	stw	r5,-4(fp)
        };
 40064d8:	0001883a 	nop
 40064dc:	e037883a 	mov	sp,fp
 40064e0:	df000017 	ldw	fp,0(sp)
 40064e4:	dec00104 	addi	sp,sp,4
 40064e8:	f800283a 	ret

040064ec <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 40064ec:	defffd04 	addi	sp,sp,-12
 40064f0:	df000215 	stw	fp,8(sp)
 40064f4:	df000204 	addi	fp,sp,8
 40064f8:	e13ffe15 	stw	r4,-8(fp)
 40064fc:	e17fff15 	stw	r5,-4(fp)
        };
 4006500:	0001883a 	nop
 4006504:	e037883a 	mov	sp,fp
 4006508:	df000017 	ldw	fp,0(sp)
 400650c:	dec00104 	addi	sp,sp,4
 4006510:	f800283a 	ret

04006514 <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 4006514:	defffd04 	addi	sp,sp,-12
 4006518:	df000215 	stw	fp,8(sp)
 400651c:	df000204 	addi	fp,sp,8
 4006520:	e13ffe15 	stw	r4,-8(fp)
 4006524:	e17fff15 	stw	r5,-4(fp)
        };
 4006528:	0001883a 	nop
 400652c:	e037883a 	mov	sp,fp
 4006530:	df000017 	ldw	fp,0(sp)
 4006534:	dec00104 	addi	sp,sp,4
 4006538:	f800283a 	ret

0400653c <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 400653c:	defffd04 	addi	sp,sp,-12
 4006540:	df000215 	stw	fp,8(sp)
 4006544:	df000204 	addi	fp,sp,8
 4006548:	e13ffe15 	stw	r4,-8(fp)
 400654c:	e17fff15 	stw	r5,-4(fp)
        };
 4006550:	0001883a 	nop
 4006554:	e037883a 	mov	sp,fp
 4006558:	df000017 	ldw	fp,0(sp)
 400655c:	dec00104 	addi	sp,sp,4
 4006560:	f800283a 	ret

04006564 <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 4006564:	defffd04 	addi	sp,sp,-12
 4006568:	df000215 	stw	fp,8(sp)
 400656c:	df000204 	addi	fp,sp,8
 4006570:	e13ffe15 	stw	r4,-8(fp)
 4006574:	e17fff15 	stw	r5,-4(fp)
        };
 4006578:	0001883a 	nop
 400657c:	e037883a 	mov	sp,fp
 4006580:	df000017 	ldw	fp,0(sp)
 4006584:	dec00104 	addi	sp,sp,4
 4006588:	f800283a 	ret

0400658c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
 400658c:	defff704 	addi	sp,sp,-36
 4006590:	dfc00815 	stw	ra,32(sp)
 4006594:	df000715 	stw	fp,28(sp)
 4006598:	df000704 	addi	fp,sp,28
 400659c:	e13ffd15 	stw	r4,-12(fp)
 40065a0:	e17ffe15 	stw	r5,-8(fp)
 40065a4:	3005883a 	mov	r2,r6
 40065a8:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
 40065ac:	e0bffd17 	ldw	r2,-12(fp)
 40065b0:	10800303 	ldbu	r2,12(r2)
 40065b4:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
 40065b8:	e0bfff03 	ldbu	r2,-4(fp)
 40065bc:	10c011e0 	cmpeqi	r3,r2,71
 40065c0:	1800271e 	bne	r3,zero,4006660 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
 40065c4:	10c014e0 	cmpeqi	r3,r2,83
 40065c8:	1800031e 	bne	r3,zero,40065d8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
 40065cc:	10800e60 	cmpeqi	r2,r2,57
 40065d0:	1000111e 	bne	r2,zero,4006618 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
 40065d4:	00003506 	br	40066ac <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
 40065d8:	e0bffd17 	ldw	r2,-12(fp)
 40065dc:	10800317 	ldw	r2,12(r2)
 40065e0:	1080004c 	andi	r2,r2,1
 40065e4:	0084303a 	nor	r2,zero,r2
 40065e8:	1080004c 	andi	r2,r2,1
 40065ec:	1007883a 	mov	r3,r2
 40065f0:	e0bffd17 	ldw	r2,-12(fp)
 40065f4:	1940004c 	andi	r5,r3,1
 40065f8:	11000303 	ldbu	r4,12(r2)
 40065fc:	00ffff84 	movi	r3,-2
 4006600:	20c6703a 	and	r3,r4,r3
 4006604:	1809883a 	mov	r4,r3
 4006608:	2807883a 	mov	r3,r5
 400660c:	20c6b03a 	or	r3,r4,r3
 4006610:	10c00305 	stb	r3,12(r2)
                                break;
 4006614:	00002506 	br	40066ac <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
 4006618:	e0bffd17 	ldw	r2,-12(fp)
 400661c:	10800317 	ldw	r2,12(r2)
 4006620:	1004d07a 	srli	r2,r2,1
 4006624:	1080004c 	andi	r2,r2,1
 4006628:	0084303a 	nor	r2,zero,r2
 400662c:	1080004c 	andi	r2,r2,1
 4006630:	1007883a 	mov	r3,r2
 4006634:	e0bffd17 	ldw	r2,-12(fp)
 4006638:	18c0004c 	andi	r3,r3,1
 400663c:	18cb883a 	add	r5,r3,r3
 4006640:	11000303 	ldbu	r4,12(r2)
 4006644:	00ffff44 	movi	r3,-3
 4006648:	20c6703a 	and	r3,r4,r3
 400664c:	1809883a 	mov	r4,r3
 4006650:	2807883a 	mov	r3,r5
 4006654:	20c6b03a 	or	r3,r4,r3
 4006658:	10c00305 	stb	r3,12(r2)
                                break;
 400665c:	00001306 	br	40066ac <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
 4006660:	e0bffd17 	ldw	r2,-12(fp)
 4006664:	10800317 	ldw	r2,12(r2)
 4006668:	1004d0ba 	srli	r2,r2,2
 400666c:	1080004c 	andi	r2,r2,1
 4006670:	0084303a 	nor	r2,zero,r2
 4006674:	1080004c 	andi	r2,r2,1
 4006678:	1007883a 	mov	r3,r2
 400667c:	e0bffd17 	ldw	r2,-12(fp)
 4006680:	18c0004c 	andi	r3,r3,1
 4006684:	18c7883a 	add	r3,r3,r3
 4006688:	18cb883a 	add	r5,r3,r3
 400668c:	11000303 	ldbu	r4,12(r2)
 4006690:	00fffec4 	movi	r3,-5
 4006694:	20c6703a 	and	r3,r4,r3
 4006698:	1809883a 	mov	r4,r3
 400669c:	2807883a 	mov	r3,r5
 40066a0:	20c6b03a 	or	r3,r4,r3
 40066a4:	10c00305 	stb	r3,12(r2)
                                break;
 40066a8:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
 40066ac:	e0bffd17 	ldw	r2,-12(fp)
 40066b0:	10800303 	ldbu	r2,12(r2)
 40066b4:	10c03fcc 	andi	r3,r2,255
 40066b8:	e0bffc03 	ldbu	r2,-16(fp)
 40066bc:	18801026 	beq	r3,r2,4006700 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
 40066c0:	e0bffe17 	ldw	r2,-8(fp)
 40066c4:	10000e26 	beq	r2,zero,4006700 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
 40066c8:	e0bffd17 	ldw	r2,-12(fp)
 40066cc:	10800303 	ldbu	r2,12(r2)
 40066d0:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
 40066d4:	e0bffc44 	addi	r2,fp,-15
 40066d8:	d8800215 	stw	r2,8(sp)
 40066dc:	00800044 	movi	r2,1
 40066e0:	d8800115 	stw	r2,4(sp)
 40066e4:	d8000015 	stw	zero,0(sp)
 40066e8:	01c00084 	movi	r7,2
 40066ec:	000d883a 	mov	r6,zero
 40066f0:	000b883a 	mov	r5,zero
 40066f4:	e13ffe17 	ldw	r4,-8(fp)
 40066f8:	4008df00 	call	4008df0 <_ZN6USBHID9SetReportEhhhhtPh>
 40066fc:	00000106 	br	4006704 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
 4006700:	0005883a 	mov	r2,zero
        };
 4006704:	e037883a 	mov	sp,fp
 4006708:	dfc00117 	ldw	ra,4(sp)
 400670c:	df000017 	ldw	fp,0(sp)
 4006710:	dec00204 	addi	sp,sp,8
 4006714:	f800283a 	ret

04006718 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
 4006718:	defffc04 	addi	sp,sp,-16
 400671c:	df000315 	stw	fp,12(sp)
 4006720:	df000304 	addi	fp,sp,12
 4006724:	e13ffd15 	stw	r4,-12(fp)
 4006728:	2807883a 	mov	r3,r5
 400672c:	3005883a 	mov	r2,r6
 4006730:	e0fffe05 	stb	r3,-8(fp)
 4006734:	e0bfff05 	stb	r2,-4(fp)
        };
 4006738:	0001883a 	nop
 400673c:	e037883a 	mov	sp,fp
 4006740:	df000017 	ldw	fp,0(sp)
 4006744:	dec00104 	addi	sp,sp,4
 4006748:	f800283a 	ret

0400674c <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
 400674c:	defffc04 	addi	sp,sp,-16
 4006750:	df000315 	stw	fp,12(sp)
 4006754:	df000304 	addi	fp,sp,12
 4006758:	e13ffd15 	stw	r4,-12(fp)
 400675c:	2807883a 	mov	r3,r5
 4006760:	3005883a 	mov	r2,r6
 4006764:	e0fffe05 	stb	r3,-8(fp)
 4006768:	e0bfff05 	stb	r2,-4(fp)
        };
 400676c:	0001883a 	nop
 4006770:	e037883a 	mov	sp,fp
 4006774:	df000017 	ldw	fp,0(sp)
 4006778:	dec00104 	addi	sp,sp,4
 400677c:	f800283a 	ret

04006780 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
 4006780:	defffc04 	addi	sp,sp,-16
 4006784:	df000315 	stw	fp,12(sp)
 4006788:	df000304 	addi	fp,sp,12
 400678c:	e13ffd15 	stw	r4,-12(fp)
 4006790:	2807883a 	mov	r3,r5
 4006794:	3005883a 	mov	r2,r6
 4006798:	e0fffe05 	stb	r3,-8(fp)
 400679c:	e0bfff05 	stb	r2,-4(fp)
        };
 40067a0:	0001883a 	nop
 40067a4:	e037883a 	mov	sp,fp
 40067a8:	df000017 	ldw	fp,0(sp)
 40067ac:	dec00104 	addi	sp,sp,4
 40067b0:	f800283a 	ret

040067b4 <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
 40067b4:	defffe04 	addi	sp,sp,-8
 40067b8:	df000115 	stw	fp,4(sp)
 40067bc:	df000104 	addi	fp,sp,4
 40067c0:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
 40067c4:	008100b4 	movhi	r2,1026
 40067c8:	1089ba84 	addi	r2,r2,9962
        };
 40067cc:	e037883a 	mov	sp,fp
 40067d0:	df000017 	ldw	fp,0(sp)
 40067d4:	dec00104 	addi	sp,sp,4
 40067d8:	f800283a 	ret

040067dc <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
 40067dc:	defffe04 	addi	sp,sp,-8
 40067e0:	df000115 	stw	fp,4(sp)
 40067e4:	df000104 	addi	fp,sp,4
 40067e8:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
 40067ec:	008100b4 	movhi	r2,1026
 40067f0:	1089bd04 	addi	r2,r2,9972
        };
 40067f4:	e037883a 	mov	sp,fp
 40067f8:	df000017 	ldw	fp,0(sp)
 40067fc:	dec00104 	addi	sp,sp,4
 4006800:	f800283a 	ret

04006804 <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
 4006804:	defffe04 	addi	sp,sp,-8
 4006808:	df000115 	stw	fp,4(sp)
 400680c:	df000104 	addi	fp,sp,4
 4006810:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
 4006814:	008100b4 	movhi	r2,1026
 4006818:	1089c004 	addi	r2,r2,9984
        };
 400681c:	e037883a 	mov	sp,fp
 4006820:	df000017 	ldw	fp,0(sp)
 4006824:	dec00104 	addi	sp,sp,4
 4006828:	f800283a 	ret

0400682c <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
 400682c:	defffe04 	addi	sp,sp,-8
 4006830:	df000115 	stw	fp,4(sp)
 4006834:	df000104 	addi	fp,sp,4
 4006838:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
 400683c:	d0a1e584 	addi	r2,gp,-30826
        };
 4006840:	e037883a 	mov	sp,fp
 4006844:	df000017 	ldw	fp,0(sp)
 4006848:	dec00104 	addi	sp,sp,4
 400684c:	f800283a 	ret

04006850 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
 4006850:	defffc04 	addi	sp,sp,-16
 4006854:	dfc00315 	stw	ra,12(sp)
 4006858:	df000215 	stw	fp,8(sp)
 400685c:	df000204 	addi	fp,sp,8
 4006860:	2005883a 	mov	r2,r4
 4006864:	e17fff15 	stw	r5,-4(fp)
 4006868:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
 400686c:	d0e1ea17 	ldw	r3,-30808(gp)
 4006870:	e0bfff17 	ldw	r2,-4(fp)
 4006874:	18800416 	blt	r3,r2,4006888 <_Z9E_Notifycci+0x38>
        printf("%c", c);
 4006878:	e0bffe07 	ldb	r2,-8(fp)
 400687c:	1009883a 	mov	r4,r2
 4006880:	400ef1c0 	call	400ef1c <putchar>
 4006884:	00000106 	br	400688c <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 4006888:	0001883a 	nop
        printf("%c", c);
}
 400688c:	e037883a 	mov	sp,fp
 4006890:	dfc00117 	ldw	ra,4(sp)
 4006894:	df000017 	ldw	fp,0(sp)
 4006898:	dec00204 	addi	sp,sp,8
 400689c:	f800283a 	ret

040068a0 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
 40068a0:	defffb04 	addi	sp,sp,-20
 40068a4:	dfc00415 	stw	ra,16(sp)
 40068a8:	df000315 	stw	fp,12(sp)
 40068ac:	df000304 	addi	fp,sp,12
 40068b0:	e13ffe15 	stw	r4,-8(fp)
 40068b4:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
 40068b8:	d0e1ea17 	ldw	r3,-30808(gp)
 40068bc:	e0bfff17 	ldw	r2,-4(fp)
 40068c0:	18801016 	blt	r3,r2,4006904 <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
 40068c4:	e0bffe17 	ldw	r2,-8(fp)
 40068c8:	10001026 	beq	r2,zero,400690c <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
 40068cc:	e0bffe17 	ldw	r2,-8(fp)
 40068d0:	10c00044 	addi	r3,r2,1
 40068d4:	e0fffe15 	stw	r3,-8(fp)
 40068d8:	10800003 	ldbu	r2,0(r2)
 40068dc:	e0bffd05 	stb	r2,-12(fp)
 40068e0:	e0bffd07 	ldb	r2,-12(fp)
 40068e4:	1004c03a 	cmpne	r2,r2,zero
 40068e8:	10803fcc 	andi	r2,r2,255
 40068ec:	10000826 	beq	r2,zero,4006910 <_Z8E_NotifyPKci+0x70>
 40068f0:	e0bffd07 	ldb	r2,-12(fp)
 40068f4:	e17fff17 	ldw	r5,-4(fp)
 40068f8:	1009883a 	mov	r4,r2
 40068fc:	40068500 	call	4006850 <_Z9E_Notifycci>
 4006900:	003ff206 	br	40068cc <__alt_mem_onchip_memory2_0+0xfc00564c>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 4006904:	0001883a 	nop
 4006908:	00000106 	br	4006910 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
 400690c:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
 4006910:	e037883a 	mov	sp,fp
 4006914:	dfc00117 	ldw	ra,4(sp)
 4006918:	df000017 	ldw	fp,0(sp)
 400691c:	dec00204 	addi	sp,sp,8
 4006920:	f800283a 	ret

04006924 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
 4006924:	defffb04 	addi	sp,sp,-20
 4006928:	dfc00415 	stw	ra,16(sp)
 400692c:	df000315 	stw	fp,12(sp)
 4006930:	df000304 	addi	fp,sp,12
 4006934:	e13ffe15 	stw	r4,-8(fp)
 4006938:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
 400693c:	d0e1ea17 	ldw	r3,-30808(gp)
 4006940:	e0bfff17 	ldw	r2,-4(fp)
 4006944:	18801016 	blt	r3,r2,4006988 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
 4006948:	e0bffe17 	ldw	r2,-8(fp)
 400694c:	10001026 	beq	r2,zero,4006990 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
 4006950:	e0bffe17 	ldw	r2,-8(fp)
 4006954:	10c00044 	addi	r3,r2,1
 4006958:	e0fffe15 	stw	r3,-8(fp)
 400695c:	10800003 	ldbu	r2,0(r2)
 4006960:	e0bffd05 	stb	r2,-12(fp)
 4006964:	e0bffd07 	ldb	r2,-12(fp)
 4006968:	1004c03a 	cmpne	r2,r2,zero
 400696c:	10803fcc 	andi	r2,r2,255
 4006970:	10000826 	beq	r2,zero,4006994 <_Z11E_NotifyStrPKci+0x70>
 4006974:	e0bffd07 	ldb	r2,-12(fp)
 4006978:	e17fff17 	ldw	r5,-4(fp)
 400697c:	1009883a 	mov	r4,r2
 4006980:	40068500 	call	4006850 <_Z9E_Notifycci>
 4006984:	003ff206 	br	4006950 <__alt_mem_onchip_memory2_0+0xfc0056d0>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 4006988:	0001883a 	nop
 400698c:	00000106 	br	4006994 <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
 4006990:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
 4006994:	e037883a 	mov	sp,fp
 4006998:	dfc00117 	ldw	ra,4(sp)
 400699c:	df000017 	ldw	fp,0(sp)
 40069a0:	dec00204 	addi	sp,sp,8
 40069a4:	f800283a 	ret

040069a8 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
 40069a8:	defffd04 	addi	sp,sp,-12
 40069ac:	df000215 	stw	fp,8(sp)
 40069b0:	df000204 	addi	fp,sp,8
 40069b4:	2005883a 	mov	r2,r4
 40069b8:	e17fff15 	stw	r5,-4(fp)
 40069bc:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
 40069c0:	e037883a 	mov	sp,fp
 40069c4:	df000017 	ldw	fp,0(sp)
 40069c8:	dec00104 	addi	sp,sp,4
 40069cc:	f800283a 	ret

040069d0 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
 40069d0:	defffc04 	addi	sp,sp,-16
 40069d4:	df000315 	stw	fp,12(sp)
 40069d8:	df000304 	addi	fp,sp,12
 40069dc:	e13ffd15 	stw	r4,-12(fp)
 40069e0:	e17ffe15 	stw	r5,-8(fp)
 40069e4:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
 40069e8:	e037883a 	mov	sp,fp
 40069ec:	df000017 	ldw	fp,0(sp)
 40069f0:	dec00104 	addi	sp,sp,4
 40069f4:	f800283a 	ret

040069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 40069f8:	defffc04 	addi	sp,sp,-16
 40069fc:	df000315 	stw	fp,12(sp)
 4006a00:	df000304 	addi	fp,sp,12
 4006a04:	e13ffd15 	stw	r4,-12(fp)
 4006a08:	e17ffe15 	stw	r5,-8(fp)
 4006a0c:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
 4006a10:	e0bffd17 	ldw	r2,-12(fp)
 4006a14:	10800017 	ldw	r2,0(r2)
 4006a18:	1000021e 	bne	r2,zero,4006a24 <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 4006a1c:	0005883a 	mov	r2,zero
 4006a20:	00003306 	br	4006af0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 4006a24:	e0bffd17 	ldw	r2,-12(fp)
 4006a28:	10800103 	ldbu	r2,4(r2)
 4006a2c:	10803fcc 	andi	r2,r2,255
 4006a30:	10002426 	beq	r2,zero,4006ac4 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
 4006a34:	e0bfff17 	ldw	r2,-4(fp)
 4006a38:	1080000b 	ldhu	r2,0(r2)
 4006a3c:	10bfffcc 	andi	r2,r2,65535
 4006a40:	10002026 	beq	r2,zero,4006ac4 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
 4006a44:	e0bffd17 	ldw	r2,-12(fp)
 4006a48:	10800017 	ldw	r2,0(r2)
 4006a4c:	e0fffd17 	ldw	r3,-12(fp)
 4006a50:	18c00143 	ldbu	r3,5(r3)
 4006a54:	19003fcc 	andi	r4,r3,255
 4006a58:	e0fffd17 	ldw	r3,-12(fp)
 4006a5c:	18c00103 	ldbu	r3,4(r3)
 4006a60:	18c03fcc 	andi	r3,r3,255
 4006a64:	20c7c83a 	sub	r3,r4,r3
 4006a68:	10c5883a 	add	r2,r2,r3
 4006a6c:	e0fffe17 	ldw	r3,-8(fp)
 4006a70:	18c00017 	ldw	r3,0(r3)
 4006a74:	18c00003 	ldbu	r3,0(r3)
 4006a78:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 4006a7c:	e0bffd17 	ldw	r2,-12(fp)
 4006a80:	10800103 	ldbu	r2,4(r2)
 4006a84:	10bfffc4 	addi	r2,r2,-1
 4006a88:	1007883a 	mov	r3,r2
 4006a8c:	e0bffd17 	ldw	r2,-12(fp)
 4006a90:	10c00105 	stb	r3,4(r2)
 4006a94:	e0bfff17 	ldw	r2,-4(fp)
 4006a98:	1080000b 	ldhu	r2,0(r2)
 4006a9c:	10bfffc4 	addi	r2,r2,-1
 4006aa0:	1007883a 	mov	r3,r2
 4006aa4:	e0bfff17 	ldw	r2,-4(fp)
 4006aa8:	10c0000d 	sth	r3,0(r2)
 4006aac:	e0bffe17 	ldw	r2,-8(fp)
 4006ab0:	10800017 	ldw	r2,0(r2)
 4006ab4:	10c00044 	addi	r3,r2,1
 4006ab8:	e0bffe17 	ldw	r2,-8(fp)
 4006abc:	10c00015 	stw	r3,0(r2)
 4006ac0:	003fd806 	br	4006a24 <__alt_mem_onchip_memory2_0+0xfc0057a4>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
 4006ac4:	e0bffd17 	ldw	r2,-12(fp)
 4006ac8:	10800103 	ldbu	r2,4(r2)
 4006acc:	10803fcc 	andi	r2,r2,255
 4006ad0:	10000226 	beq	r2,zero,4006adc <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
 4006ad4:	0005883a 	mov	r2,zero
 4006ad8:	00000506 	br	4006af0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
 4006adc:	e0bffd17 	ldw	r2,-12(fp)
 4006ae0:	10c00143 	ldbu	r3,5(r2)
 4006ae4:	e0bffd17 	ldw	r2,-12(fp)
 4006ae8:	10c00105 	stb	r3,4(r2)
        return true;
 4006aec:	00800044 	movi	r2,1
}
 4006af0:	e037883a 	mov	sp,fp
 4006af4:	df000017 	ldw	fp,0(sp)
 4006af8:	dec00104 	addi	sp,sp,4
 4006afc:	f800283a 	ret

04006b00 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
 4006b00:	defffa04 	addi	sp,sp,-24
 4006b04:	dfc00515 	stw	ra,20(sp)
 4006b08:	df000415 	stw	fp,16(sp)
 4006b0c:	df000404 	addi	fp,sp,16
 4006b10:	e13ffc15 	stw	r4,-16(fp)
 4006b14:	e17ffd15 	stw	r5,-12(fp)
 4006b18:	e1bffe15 	stw	r6,-8(fp)
 4006b1c:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
 4006b20:	e0bffc17 	ldw	r2,-16(fp)
 4006b24:	10800003 	ldbu	r2,0(r2)
 4006b28:	10803fcc 	andi	r2,r2,255
 4006b2c:	10c00060 	cmpeqi	r3,r2,1
 4006b30:	1800181e 	bne	r3,zero,4006b94 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
 4006b34:	10c00088 	cmpgei	r3,r2,2
 4006b38:	1800021e 	bne	r3,zero,4006b44 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
 4006b3c:	10000626 	beq	r2,zero,4006b58 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
 4006b40:	00007e06 	br	4006d3c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
 4006b44:	10c000a0 	cmpeqi	r3,r2,2
 4006b48:	18004a1e 	bne	r3,zero,4006c74 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
 4006b4c:	108000e0 	cmpeqi	r2,r2,3
 4006b50:	1000571e 	bne	r2,zero,4006cb0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
 4006b54:	00007906 	br	4006d3c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
 4006b58:	e0bffc17 	ldw	r2,-16(fp)
 4006b5c:	10800417 	ldw	r2,16(r2)
 4006b60:	e0fffc17 	ldw	r3,-16(fp)
 4006b64:	18c00303 	ldbu	r3,12(r3)
 4006b68:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
 4006b6c:	e0bffc17 	ldw	r2,-16(fp)
 4006b70:	10c00504 	addi	r3,r2,20
 4006b74:	e0bffc17 	ldw	r2,-16(fp)
 4006b78:	10800417 	ldw	r2,16(r2)
 4006b7c:	100b883a 	mov	r5,r2
 4006b80:	1809883a 	mov	r4,r3
 4006b84:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
 4006b88:	e0bffc17 	ldw	r2,-16(fp)
 4006b8c:	00c00044 	movi	r3,1
 4006b90:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
 4006b94:	e0bffc17 	ldw	r2,-16(fp)
 4006b98:	10800504 	addi	r2,r2,20
 4006b9c:	e1bffe17 	ldw	r6,-8(fp)
 4006ba0:	e17ffd17 	ldw	r5,-12(fp)
 4006ba4:	1009883a 	mov	r4,r2
 4006ba8:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4006bac:	1080005c 	xori	r2,r2,1
 4006bb0:	10803fcc 	andi	r2,r2,255
 4006bb4:	10000226 	beq	r2,zero,4006bc0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
 4006bb8:	0005883a 	mov	r2,zero
 4006bbc:	00006006 	br	4006d40 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
 4006bc0:	e0bffc17 	ldw	r2,-16(fp)
 4006bc4:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
 4006bc8:	e0bffc17 	ldw	r2,-16(fp)
 4006bcc:	10800417 	ldw	r2,16(r2)
 4006bd0:	10800003 	ldbu	r2,0(r2)
 4006bd4:	10803fcc 	andi	r2,r2,255
 4006bd8:	10800130 	cmpltui	r2,r2,4
 4006bdc:	10000e1e 	bne	r2,zero,4006c18 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
 4006be0:	e0bffc17 	ldw	r2,-16(fp)
 4006be4:	10800417 	ldw	r2,16(r2)
 4006be8:	10c00043 	ldbu	r3,1(r2)
 4006bec:	11000083 	ldbu	r4,2(r2)
 4006bf0:	2008923a 	slli	r4,r4,8
 4006bf4:	20c6b03a 	or	r3,r4,r3
 4006bf8:	110000c3 	ldbu	r4,3(r2)
 4006bfc:	2008943a 	slli	r4,r4,16
 4006c00:	20c6b03a 	or	r3,r4,r3
 4006c04:	10800103 	ldbu	r2,4(r2)
 4006c08:	1004963a 	slli	r2,r2,24
 4006c0c:	10c4b03a 	or	r2,r2,r3
 4006c10:	10800017 	ldw	r2,0(r2)
 4006c14:	00000e06 	br	4006c50 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
 4006c18:	e0bffc17 	ldw	r2,-16(fp)
 4006c1c:	10800417 	ldw	r2,16(r2)
 4006c20:	10c00043 	ldbu	r3,1(r2)
 4006c24:	11000083 	ldbu	r4,2(r2)
 4006c28:	2008923a 	slli	r4,r4,8
 4006c2c:	20c6b03a 	or	r3,r4,r3
 4006c30:	110000c3 	ldbu	r4,3(r2)
 4006c34:	2008943a 	slli	r4,r4,16
 4006c38:	20c6b03a 	or	r3,r4,r3
 4006c3c:	10800103 	ldbu	r2,4(r2)
 4006c40:	1004963a 	slli	r2,r2,24
 4006c44:	10c4b03a 	or	r2,r2,r3
 4006c48:	1080000b 	ldhu	r2,0(r2)
 4006c4c:	10bfffcc 	andi	r2,r2,65535
 4006c50:	e0fffc17 	ldw	r3,-16(fp)
 4006c54:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
 4006c58:	e0bffc17 	ldw	r2,-16(fp)
 4006c5c:	10c00117 	ldw	r3,4(r2)
 4006c60:	e0bffc17 	ldw	r2,-16(fp)
 4006c64:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
 4006c68:	e0bffc17 	ldw	r2,-16(fp)
 4006c6c:	00c00084 	movi	r3,2
 4006c70:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
 4006c74:	e0bffc17 	ldw	r2,-16(fp)
 4006c78:	10800417 	ldw	r2,16(r2)
 4006c7c:	e0fffc17 	ldw	r3,-16(fp)
 4006c80:	18c00343 	ldbu	r3,13(r3)
 4006c84:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
 4006c88:	e0bffc17 	ldw	r2,-16(fp)
 4006c8c:	10c00504 	addi	r3,r2,20
 4006c90:	e0bffc17 	ldw	r2,-16(fp)
 4006c94:	10800417 	ldw	r2,16(r2)
 4006c98:	100b883a 	mov	r5,r2
 4006c9c:	1809883a 	mov	r4,r3
 4006ca0:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
 4006ca4:	e0bffc17 	ldw	r2,-16(fp)
 4006ca8:	00c000c4 	movi	r3,3
 4006cac:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
 4006cb0:	e0bffc17 	ldw	r2,-16(fp)
 4006cb4:	10800217 	ldw	r2,8(r2)
 4006cb8:	10001e26 	beq	r2,zero,4006d34 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
 4006cbc:	e0bffc17 	ldw	r2,-16(fp)
 4006cc0:	10800504 	addi	r2,r2,20
 4006cc4:	e1bffe17 	ldw	r6,-8(fp)
 4006cc8:	e17ffd17 	ldw	r5,-12(fp)
 4006ccc:	1009883a 	mov	r4,r2
 4006cd0:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4006cd4:	1080005c 	xori	r2,r2,1
 4006cd8:	10803fcc 	andi	r2,r2,255
 4006cdc:	10000226 	beq	r2,zero,4006ce8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
 4006ce0:	0005883a 	mov	r2,zero
 4006ce4:	00001606 	br	4006d40 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
 4006ce8:	e0bfff17 	ldw	r2,-4(fp)
 4006cec:	10000b26 	beq	r2,zero,4006d1c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
 4006cf0:	e0bffc17 	ldw	r2,-16(fp)
 4006cf4:	11000417 	ldw	r4,16(r2)
 4006cf8:	e0bffc17 	ldw	r2,-16(fp)
 4006cfc:	10c00117 	ldw	r3,4(r2)
 4006d00:	e0bffc17 	ldw	r2,-16(fp)
 4006d04:	10800217 	ldw	r2,8(r2)
 4006d08:	1887c83a 	sub	r3,r3,r2
 4006d0c:	e0bfff17 	ldw	r2,-4(fp)
 4006d10:	e1800217 	ldw	r6,8(fp)
 4006d14:	180b883a 	mov	r5,r3
 4006d18:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
 4006d1c:	e0bffc17 	ldw	r2,-16(fp)
 4006d20:	10800217 	ldw	r2,8(r2)
 4006d24:	10ffffc4 	addi	r3,r2,-1
 4006d28:	e0bffc17 	ldw	r2,-16(fp)
 4006d2c:	10c00215 	stw	r3,8(r2)
 4006d30:	003fdf06 	br	4006cb0 <__alt_mem_onchip_memory2_0+0xfc005a30>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
 4006d34:	e0bffc17 	ldw	r2,-16(fp)
 4006d38:	10000005 	stb	zero,0(r2)
        }
        return true;
 4006d3c:	00800044 	movi	r2,1
}
 4006d40:	e037883a 	mov	sp,fp
 4006d44:	dfc00117 	ldw	ra,4(sp)
 4006d48:	df000017 	ldw	fp,0(sp)
 4006d4c:	dec00204 	addi	sp,sp,8
 4006d50:	f800283a 	ret

04006d54 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
 4006d54:	defffb04 	addi	sp,sp,-20
 4006d58:	dfc00415 	stw	ra,16(sp)
 4006d5c:	df000315 	stw	fp,12(sp)
 4006d60:	df000304 	addi	fp,sp,12
 4006d64:	e13ffe15 	stw	r4,-8(fp)
 4006d68:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
 4006d6c:	e0bffe17 	ldw	r2,-8(fp)
 4006d70:	1009883a 	mov	r4,r2
 4006d74:	40055d80 	call	40055d8 <_ZN15USBDeviceConfigC1Ev>
 4006d78:	e0bffe17 	ldw	r2,-8(fp)
 4006d7c:	10800104 	addi	r2,r2,4
 4006d80:	1009883a 	mov	r4,r2
 4006d84:	4008cf00 	call	4008cf0 <_ZN21UsbMidiConfigXtracterC1Ev>
 4006d88:	008100b4 	movhi	r2,1026
 4006d8c:	1089f804 	addi	r2,r2,10208
 4006d90:	e0fffe17 	ldw	r3,-8(fp)
 4006d94:	18800015 	stw	r2,0(r3)
 4006d98:	008100b4 	movhi	r2,1026
 4006d9c:	108a0404 	addi	r2,r2,10256
 4006da0:	e0fffe17 	ldw	r3,-8(fp)
 4006da4:	18800115 	stw	r2,4(r3)
 4006da8:	e0bffe17 	ldw	r2,-8(fp)
 4006dac:	e0ffff17 	ldw	r3,-4(fp)
 4006db0:	10c00215 	stw	r3,8(r2)
 4006db4:	e0bffe17 	ldw	r2,-8(fp)
 4006db8:	10000305 	stb	zero,12(r2)
 4006dbc:	e0bffe17 	ldw	r2,-8(fp)
 4006dc0:	10000345 	stb	zero,13(r2)
 4006dc4:	e0bffe17 	ldw	r2,-8(fp)
 4006dc8:	10001705 	stb	zero,92(r2)
 4006dcc:	e0bffe17 	ldw	r2,-8(fp)
 4006dd0:	10001815 	stw	zero,96(r2)
 4006dd4:	e0bffe17 	ldw	r2,-8(fp)
 4006dd8:	10001915 	stw	zero,100(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
 4006ddc:	e03ffd05 	stb	zero,-12(fp)
 4006de0:	e0bffd03 	ldbu	r2,-12(fp)
 4006de4:	108000e8 	cmpgeui	r2,r2,3
 4006de8:	10002d1e 	bne	r2,zero,4006ea0 <_ZN9USBH_MIDIC1EP3USB+0x14c>
                epInfo[i].epAddr      = 0;
 4006dec:	e0fffd03 	ldbu	r3,-12(fp)
 4006df0:	e13ffe17 	ldw	r4,-8(fp)
 4006df4:	1805883a 	mov	r2,r3
 4006df8:	1085883a 	add	r2,r2,r2
 4006dfc:	10c5883a 	add	r2,r2,r3
 4006e00:	2085883a 	add	r2,r4,r2
 4006e04:	108004c4 	addi	r2,r2,19
 4006e08:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
 4006e0c:	e13ffd03 	ldbu	r4,-12(fp)
 4006e10:	e0bffd03 	ldbu	r2,-12(fp)
 4006e14:	10000226 	beq	r2,zero,4006e20 <_ZN9USBH_MIDIC1EP3USB+0xcc>
 4006e18:	0007883a 	mov	r3,zero
 4006e1c:	00000106 	br	4006e24 <_ZN9USBH_MIDIC1EP3USB+0xd0>
 4006e20:	00c00204 	movi	r3,8
 4006e24:	e17ffe17 	ldw	r5,-8(fp)
 4006e28:	2005883a 	mov	r2,r4
 4006e2c:	1085883a 	add	r2,r2,r2
 4006e30:	1105883a 	add	r2,r2,r4
 4006e34:	2885883a 	add	r2,r5,r2
 4006e38:	10800504 	addi	r2,r2,20
 4006e3c:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 4006e40:	e13ffd03 	ldbu	r4,-12(fp)
 4006e44:	e0bffd03 	ldbu	r2,-12(fp)
 4006e48:	10000226 	beq	r2,zero,4006e54 <_ZN9USBH_MIDIC1EP3USB+0x100>
 4006e4c:	00c00044 	movi	r3,1
 4006e50:	00000106 	br	4006e58 <_ZN9USBH_MIDIC1EP3USB+0x104>
 4006e54:	00c003c4 	movi	r3,15
 4006e58:	e17ffe17 	ldw	r5,-8(fp)
 4006e5c:	2005883a 	mov	r2,r4
 4006e60:	1085883a 	add	r2,r2,r2
 4006e64:	1105883a 	add	r2,r2,r4
 4006e68:	2885883a 	add	r2,r5,r2
 4006e6c:	10800404 	addi	r2,r2,16
 4006e70:	18c7883a 	add	r3,r3,r3
 4006e74:	18cb883a 	add	r5,r3,r3
 4006e78:	10c00143 	ldbu	r3,5(r2)
 4006e7c:	18c000cc 	andi	r3,r3,3
 4006e80:	1809883a 	mov	r4,r3
 4006e84:	2807883a 	mov	r3,r5
 4006e88:	20c6b03a 	or	r3,r4,r3
 4006e8c:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
 4006e90:	e0bffd03 	ldbu	r2,-12(fp)
 4006e94:	10800044 	addi	r2,r2,1
 4006e98:	e0bffd05 	stb	r2,-12(fp)
 4006e9c:	003fd006 	br	4006de0 <__alt_mem_onchip_memory2_0+0xfc005b60>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
 4006ea0:	e0bffe17 	ldw	r2,-8(fp)
 4006ea4:	10800217 	ldw	r2,8(r2)
 4006ea8:	10000626 	beq	r2,zero,4006ec4 <_ZN9USBH_MIDIC1EP3USB+0x170>
                pUsb->RegisterDeviceClass(this);
 4006eac:	e0bffe17 	ldw	r2,-8(fp)
 4006eb0:	10800217 	ldw	r2,8(r2)
 4006eb4:	e0fffe17 	ldw	r3,-8(fp)
 4006eb8:	180b883a 	mov	r5,r3
 4006ebc:	1009883a 	mov	r4,r2
 4006ec0:	400538c0 	call	400538c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
 4006ec4:	0001883a 	nop
 4006ec8:	e037883a 	mov	sp,fp
 4006ecc:	dfc00117 	ldw	ra,4(sp)
 4006ed0:	df000017 	ldw	fp,0(sp)
 4006ed4:	dec00204 	addi	sp,sp,8
 4006ed8:	f800283a 	ret

04006edc <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
 4006edc:	deffe004 	addi	sp,sp,-128
 4006ee0:	dfc01f15 	stw	ra,124(sp)
 4006ee4:	df001e15 	stw	fp,120(sp)
 4006ee8:	df001e04 	addi	fp,sp,120
 4006eec:	e13ffc15 	stw	r4,-16(fp)
 4006ef0:	2809883a 	mov	r4,r5
 4006ef4:	3007883a 	mov	r3,r6
 4006ef8:	3805883a 	mov	r2,r7
 4006efc:	e13ffd05 	stb	r4,-12(fp)
 4006f00:	e0fffe05 	stb	r3,-8(fp)
 4006f04:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 4006f08:	e0bfe944 	addi	r2,fp,-91
 4006f0c:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
 4006f10:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
 4006f14:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
 4006f18:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
 4006f1c:	00800044 	movi	r2,1
 4006f20:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
 4006f24:	00800044 	movi	r2,1
 4006f28:	e0bfe3c5 	stb	r2,-113(fp)
 4006f2c:	e0bfe3c3 	ldbu	r2,-113(fp)
 4006f30:	108000e8 	cmpgeui	r2,r2,3
 4006f34:	10001a1e 	bne	r2,zero,4006fa0 <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
 4006f38:	e0ffe3c3 	ldbu	r3,-113(fp)
 4006f3c:	e13ffc17 	ldw	r4,-16(fp)
 4006f40:	1805883a 	mov	r2,r3
 4006f44:	1085883a 	add	r2,r2,r2
 4006f48:	10c5883a 	add	r2,r2,r3
 4006f4c:	2085883a 	add	r2,r4,r2
 4006f50:	10800404 	addi	r2,r2,16
 4006f54:	11000143 	ldbu	r4,5(r2)
 4006f58:	00ffff84 	movi	r3,-2
 4006f5c:	20c6703a 	and	r3,r4,r3
 4006f60:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
 4006f64:	e0ffe3c3 	ldbu	r3,-113(fp)
 4006f68:	e13ffc17 	ldw	r4,-16(fp)
 4006f6c:	1805883a 	mov	r2,r3
 4006f70:	1085883a 	add	r2,r2,r2
 4006f74:	10c5883a 	add	r2,r2,r3
 4006f78:	2085883a 	add	r2,r4,r2
 4006f7c:	10800404 	addi	r2,r2,16
 4006f80:	11000143 	ldbu	r4,5(r2)
 4006f84:	00ffff44 	movi	r3,-3
 4006f88:	20c6703a 	and	r3,r4,r3
 4006f8c:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
 4006f90:	e0bfe3c3 	ldbu	r2,-113(fp)
 4006f94:	10800044 	addi	r2,r2,1
 4006f98:	e0bfe3c5 	stb	r2,-113(fp)
 4006f9c:	003fe306 	br	4006f2c <__alt_mem_onchip_memory2_0+0xfc005cac>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
 4006fa0:	e0bffc17 	ldw	r2,-16(fp)
 4006fa4:	10800217 	ldw	r2,8(r2)
 4006fa8:	1009883a 	mov	r4,r2
 4006fac:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 4006fb0:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
 4006fb4:	e0bffc17 	ldw	r2,-16(fp)
 4006fb8:	10800303 	ldbu	r2,12(r2)
 4006fbc:	10803fcc 	andi	r2,r2,255
 4006fc0:	10000226 	beq	r2,zero,4006fcc <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 4006fc4:	00bff644 	movi	r2,-39
 4006fc8:	0001c706 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
 4006fcc:	e0bfe817 	ldw	r2,-96(fp)
 4006fd0:	10800017 	ldw	r2,0(r2)
 4006fd4:	10800017 	ldw	r2,0(r2)
 4006fd8:	e0fffc17 	ldw	r3,-16(fp)
 4006fdc:	18c00303 	ldbu	r3,12(r3)
 4006fe0:	18c03fcc 	andi	r3,r3,255
 4006fe4:	180b883a 	mov	r5,r3
 4006fe8:	e13fe817 	ldw	r4,-96(fp)
 4006fec:	103ee83a 	callr	r2
 4006ff0:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
 4006ff4:	e0bfe617 	ldw	r2,-104(fp)
 4006ff8:	1000021e 	bne	r2,zero,4007004 <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4006ffc:	00bff584 	movi	r2,-42
 4007000:	0001b906 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
 4007004:	e0bfe617 	ldw	r2,-104(fp)
 4007008:	10c00003 	ldbu	r3,0(r2)
 400700c:	11000043 	ldbu	r4,1(r2)
 4007010:	2008923a 	slli	r4,r4,8
 4007014:	20c6b03a 	or	r3,r4,r3
 4007018:	11000083 	ldbu	r4,2(r2)
 400701c:	2008943a 	slli	r4,r4,16
 4007020:	20c6b03a 	or	r3,r4,r3
 4007024:	108000c3 	ldbu	r2,3(r2)
 4007028:	1004963a 	slli	r2,r2,24
 400702c:	10c4b03a 	or	r2,r2,r3
 4007030:	1000021e 	bne	r2,zero,400703c <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
 4007034:	00bff5c4 	movi	r2,-41
 4007038:	0001ab06 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 400703c:	e0bfe617 	ldw	r2,-104(fp)
 4007040:	10c00003 	ldbu	r3,0(r2)
 4007044:	11000043 	ldbu	r4,1(r2)
 4007048:	2008923a 	slli	r4,r4,8
 400704c:	20c6b03a 	or	r3,r4,r3
 4007050:	11000083 	ldbu	r4,2(r2)
 4007054:	2008943a 	slli	r4,r4,16
 4007058:	20c6b03a 	or	r3,r4,r3
 400705c:	108000c3 	ldbu	r2,3(r2)
 4007060:	1004963a 	slli	r2,r2,24
 4007064:	10c4b03a 	or	r2,r2,r3
 4007068:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
 400706c:	e0bffc17 	ldw	r2,-16(fp)
 4007070:	10c004c4 	addi	r3,r2,19
 4007074:	e0bfe617 	ldw	r2,-104(fp)
 4007078:	19803fcc 	andi	r6,r3,255
 400707c:	11000003 	ldbu	r4,0(r2)
 4007080:	2008703a 	and	r4,r4,zero
 4007084:	200b883a 	mov	r5,r4
 4007088:	3009883a 	mov	r4,r6
 400708c:	2908b03a 	or	r4,r5,r4
 4007090:	11000005 	stb	r4,0(r2)
 4007094:	1808d23a 	srli	r4,r3,8
 4007098:	21803fcc 	andi	r6,r4,255
 400709c:	11000043 	ldbu	r4,1(r2)
 40070a0:	2008703a 	and	r4,r4,zero
 40070a4:	200b883a 	mov	r5,r4
 40070a8:	3009883a 	mov	r4,r6
 40070ac:	2908b03a 	or	r4,r5,r4
 40070b0:	11000045 	stb	r4,1(r2)
 40070b4:	1808d43a 	srli	r4,r3,16
 40070b8:	21803fcc 	andi	r6,r4,255
 40070bc:	11000083 	ldbu	r4,2(r2)
 40070c0:	2008703a 	and	r4,r4,zero
 40070c4:	200b883a 	mov	r5,r4
 40070c8:	3009883a 	mov	r4,r6
 40070cc:	2908b03a 	or	r4,r5,r4
 40070d0:	11000085 	stb	r4,2(r2)
 40070d4:	180ad63a 	srli	r5,r3,24
 40070d8:	10c000c3 	ldbu	r3,3(r2)
 40070dc:	1806703a 	and	r3,r3,zero
 40070e0:	1809883a 	mov	r4,r3
 40070e4:	2807883a 	mov	r3,r5
 40070e8:	20c6b03a 	or	r3,r4,r3
 40070ec:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
 40070f0:	e0bfe617 	ldw	r2,-104(fp)
 40070f4:	e0ffff03 	ldbu	r3,-4(fp)
 40070f8:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
 40070fc:	e0bffc17 	ldw	r2,-16(fp)
 4007100:	10c00217 	ldw	r3,8(r2)
 4007104:	e0bfe944 	addi	r2,fp,-91
 4007108:	d8800015 	stw	r2,0(sp)
 400710c:	01c00204 	movi	r7,8
 4007110:	000d883a 	mov	r6,zero
 4007114:	000b883a 	mov	r5,zero
 4007118:	1809883a 	mov	r4,r3
 400711c:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 4007120:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 4007124:	e0bfe617 	ldw	r2,-104(fp)
 4007128:	e0ffe717 	ldw	r3,-100(fp)
 400712c:	19403fcc 	andi	r5,r3,255
 4007130:	10c00003 	ldbu	r3,0(r2)
 4007134:	1806703a 	and	r3,r3,zero
 4007138:	1809883a 	mov	r4,r3
 400713c:	2807883a 	mov	r3,r5
 4007140:	20c6b03a 	or	r3,r4,r3
 4007144:	10c00005 	stb	r3,0(r2)
 4007148:	e0ffe717 	ldw	r3,-100(fp)
 400714c:	1806d23a 	srli	r3,r3,8
 4007150:	19403fcc 	andi	r5,r3,255
 4007154:	10c00043 	ldbu	r3,1(r2)
 4007158:	1806703a 	and	r3,r3,zero
 400715c:	1809883a 	mov	r4,r3
 4007160:	2807883a 	mov	r3,r5
 4007164:	20c6b03a 	or	r3,r4,r3
 4007168:	10c00045 	stb	r3,1(r2)
 400716c:	e0ffe717 	ldw	r3,-100(fp)
 4007170:	1806d43a 	srli	r3,r3,16
 4007174:	19403fcc 	andi	r5,r3,255
 4007178:	10c00083 	ldbu	r3,2(r2)
 400717c:	1806703a 	and	r3,r3,zero
 4007180:	1809883a 	mov	r4,r3
 4007184:	2807883a 	mov	r3,r5
 4007188:	20c6b03a 	or	r3,r4,r3
 400718c:	10c00085 	stb	r3,2(r2)
 4007190:	e0ffe717 	ldw	r3,-100(fp)
 4007194:	180ad63a 	srli	r5,r3,24
 4007198:	10c000c3 	ldbu	r3,3(r2)
 400719c:	1806703a 	and	r3,r3,zero
 40071a0:	1809883a 	mov	r4,r3
 40071a4:	2807883a 	mov	r3,r5
 40071a8:	20c6b03a 	or	r3,r4,r3
 40071ac:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
 40071b0:	e0bfe303 	ldbu	r2,-116(fp)
 40071b4:	10013a1e 	bne	r2,zero,40076a0 <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
 40071b8:	e0bfe817 	ldw	r2,-96(fp)
 40071bc:	10800017 	ldw	r2,0(r2)
 40071c0:	10800104 	addi	r2,r2,4
 40071c4:	10800017 	ldw	r2,0(r2)
 40071c8:	e0fffd03 	ldbu	r3,-12(fp)
 40071cc:	e13ffe03 	ldbu	r4,-8(fp)
 40071d0:	200f883a 	mov	r7,r4
 40071d4:	000d883a 	mov	r6,zero
 40071d8:	180b883a 	mov	r5,r3
 40071dc:	e13fe817 	ldw	r4,-96(fp)
 40071e0:	103ee83a 	callr	r2
 40071e4:	1007883a 	mov	r3,r2
 40071e8:	e0bffc17 	ldw	r2,-16(fp)
 40071ec:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
 40071f0:	e0bffc17 	ldw	r2,-16(fp)
 40071f4:	10800303 	ldbu	r2,12(r2)
 40071f8:	10803fcc 	andi	r2,r2,255
 40071fc:	1000021e 	bne	r2,zero,4007208 <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 4007200:	00bff504 	movi	r2,-44
 4007204:	00013806 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
 4007208:	e0bfe517 	ldw	r2,-108(fp)
 400720c:	10c001c3 	ldbu	r3,7(r2)
 4007210:	e0bffc17 	ldw	r2,-16(fp)
 4007214:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
 4007218:	e0bffc17 	ldw	r2,-16(fp)
 400721c:	10c00217 	ldw	r3,8(r2)
 4007220:	e0bffc17 	ldw	r2,-16(fp)
 4007224:	10800303 	ldbu	r2,12(r2)
 4007228:	10803fcc 	andi	r2,r2,255
 400722c:	100f883a 	mov	r7,r2
 4007230:	000d883a 	mov	r6,zero
 4007234:	000b883a 	mov	r5,zero
 4007238:	1809883a 	mov	r4,r3
 400723c:	40032500 	call	4003250 <_ZN3USB7setAddrEhhh>
 4007240:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
 4007244:	e0bfe303 	ldbu	r2,-116(fp)
 4007248:	10001026 	beq	r2,zero,400728c <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
 400724c:	e0bfe617 	ldw	r2,-104(fp)
 4007250:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
 4007254:	e0bfe817 	ldw	r2,-96(fp)
 4007258:	10800017 	ldw	r2,0(r2)
 400725c:	10800204 	addi	r2,r2,8
 4007260:	10800017 	ldw	r2,0(r2)
 4007264:	e0fffc17 	ldw	r3,-16(fp)
 4007268:	18c00303 	ldbu	r3,12(r3)
 400726c:	18c03fcc 	andi	r3,r3,255
 4007270:	180b883a 	mov	r5,r3
 4007274:	e13fe817 	ldw	r4,-96(fp)
 4007278:	103ee83a 	callr	r2
                bAddress = 0;
 400727c:	e0bffc17 	ldw	r2,-16(fp)
 4007280:	10000305 	stb	zero,12(r2)
                return rcode;
 4007284:	e0bfe303 	ldbu	r2,-116(fp)
 4007288:	00011706 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
 400728c:	e0bffc17 	ldw	r2,-16(fp)
 4007290:	10800303 	ldbu	r2,12(r2)
 4007294:	10803fcc 	andi	r2,r2,255
 4007298:	01402004 	movi	r5,128
 400729c:	1009883a 	mov	r4,r2
 40072a0:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
 40072a4:	e0bfe617 	ldw	r2,-104(fp)
 40072a8:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
 40072ac:	e0bfe817 	ldw	r2,-96(fp)
 40072b0:	10800017 	ldw	r2,0(r2)
 40072b4:	10800017 	ldw	r2,0(r2)
 40072b8:	e0fffc17 	ldw	r3,-16(fp)
 40072bc:	18c00303 	ldbu	r3,12(r3)
 40072c0:	18c03fcc 	andi	r3,r3,255
 40072c4:	180b883a 	mov	r5,r3
 40072c8:	e13fe817 	ldw	r4,-96(fp)
 40072cc:	103ee83a 	callr	r2
 40072d0:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
 40072d4:	e0bfe617 	ldw	r2,-104(fp)
 40072d8:	1000021e 	bne	r2,zero,40072e4 <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40072dc:	00bff584 	movi	r2,-42
 40072e0:	00010106 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
 40072e4:	e0bfe617 	ldw	r2,-104(fp)
 40072e8:	e0ffff03 	ldbu	r3,-4(fp)
 40072ec:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
 40072f0:	e0bffc17 	ldw	r2,-16(fp)
 40072f4:	10c00217 	ldw	r3,8(r2)
 40072f8:	e0bffc17 	ldw	r2,-16(fp)
 40072fc:	10800303 	ldbu	r2,12(r2)
 4007300:	11003fcc 	andi	r4,r2,255
 4007304:	00800484 	movi	r2,18
 4007308:	117fffcc 	andi	r5,r2,65535
 400730c:	e0bfe944 	addi	r2,fp,-91
 4007310:	d8800015 	stw	r2,0(sp)
 4007314:	280f883a 	mov	r7,r5
 4007318:	000d883a 	mov	r6,zero
 400731c:	200b883a 	mov	r5,r4
 4007320:	1809883a 	mov	r4,r3
 4007324:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 4007328:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
 400732c:	e0bfe303 	ldbu	r2,-116(fp)
 4007330:	1000dd1e 	bne	r2,zero,40076a8 <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
 4007334:	e0bfe517 	ldw	r2,-108(fp)
 4007338:	10c00203 	ldbu	r3,8(r2)
 400733c:	10800243 	ldbu	r2,9(r2)
 4007340:	1004923a 	slli	r2,r2,8
 4007344:	10c4b03a 	or	r2,r2,r3
 4007348:	1007883a 	mov	r3,r2
 400734c:	e0bffc17 	ldw	r2,-16(fp)
 4007350:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
 4007354:	e0bfe517 	ldw	r2,-108(fp)
 4007358:	10c00283 	ldbu	r3,10(r2)
 400735c:	108002c3 	ldbu	r2,11(r2)
 4007360:	1004923a 	slli	r2,r2,8
 4007364:	10c4b03a 	or	r2,r2,r3
 4007368:	1007883a 	mov	r3,r2
 400736c:	e0bffc17 	ldw	r2,-16(fp)
 4007370:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
 4007374:	e0bfe517 	ldw	r2,-108(fp)
 4007378:	10800443 	ldbu	r2,17(r2)
 400737c:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
 4007380:	e0bffc17 	ldw	r2,-16(fp)
 4007384:	10c00217 	ldw	r3,8(r2)
 4007388:	e0bffc17 	ldw	r2,-16(fp)
 400738c:	10800303 	ldbu	r2,12(r2)
 4007390:	11003fcc 	andi	r4,r2,255
 4007394:	e0bffc17 	ldw	r2,-16(fp)
 4007398:	108004c4 	addi	r2,r2,19
 400739c:	100f883a 	mov	r7,r2
 40073a0:	01800044 	movi	r6,1
 40073a4:	200b883a 	mov	r5,r4
 40073a8:	1809883a 	mov	r4,r3
 40073ac:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 40073b0:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
 40073b4:	e0bfe303 	ldbu	r2,-116(fp)
 40073b8:	1000bd1e 	bne	r2,zero,40076b0 <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
 40073bc:	e0bffc17 	ldw	r2,-16(fp)
 40073c0:	1080040b 	ldhu	r2,16(r2)
 40073c4:	10bfffcc 	andi	r2,r2,65535
 40073c8:	01402004 	movi	r5,128
 40073cc:	1009883a 	mov	r4,r2
 40073d0:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
 40073d4:	e0bffc17 	ldw	r2,-16(fp)
 40073d8:	1080038b 	ldhu	r2,14(r2)
 40073dc:	10bfffcc 	andi	r2,r2,65535
 40073e0:	01402004 	movi	r5,128
 40073e4:	1009883a 	mov	r4,r2
 40073e8:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
 40073ec:	e0bfe903 	ldbu	r2,-92(fp)
 40073f0:	01402004 	movi	r5,128
 40073f4:	1009883a 	mov	r4,r2
 40073f8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
 40073fc:	e0bffc17 	ldw	r2,-16(fp)
 4007400:	00c000c4 	movi	r3,3
 4007404:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
 4007408:	e13ffc17 	ldw	r4,-16(fp)
 400740c:	400779c0 	call	400779c <_ZN9USBH_MIDI19setupDeviceSpecificEv>
        
        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
 4007410:	e03fe405 	stb	zero,-112(fp)
 4007414:	e0ffe403 	ldbu	r3,-112(fp)
 4007418:	e0bfe903 	ldbu	r2,-92(fp)
 400741c:	18802a2e 	bgeu	r3,r2,40074c8 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
 4007420:	e0bffc17 	ldw	r2,-16(fp)
 4007424:	10c00104 	addi	r3,r2,4
 4007428:	e0bfee04 	addi	r2,fp,-72
 400742c:	01800044 	movi	r6,1
 4007430:	180b883a 	mov	r5,r3
 4007434:	1009883a 	mov	r4,r2
 4007438:	40083000 	call	4008300 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
 400743c:	e0bffc17 	ldw	r2,-16(fp)
 4007440:	10c00217 	ldw	r3,8(r2)
 4007444:	e0bffc17 	ldw	r2,-16(fp)
 4007448:	10800303 	ldbu	r2,12(r2)
 400744c:	11003fcc 	andi	r4,r2,255
 4007450:	e17fe403 	ldbu	r5,-112(fp)
 4007454:	e0bfee04 	addi	r2,fp,-72
 4007458:	d8800015 	stw	r2,0(sp)
 400745c:	280f883a 	mov	r7,r5
 4007460:	000d883a 	mov	r6,zero
 4007464:	200b883a 	mov	r5,r4
 4007468:	1809883a 	mov	r4,r3
 400746c:	40030b00 	call	40030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 4007470:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
 4007474:	e0bfe303 	ldbu	r2,-116(fp)
 4007478:	10008f1e 	bne	r2,zero,40076b8 <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
 400747c:	e0bfee04 	addi	r2,fp,-72
 4007480:	1009883a 	mov	r4,r2
 4007484:	4008c0c0 	call	4008c0c <_ZN14MidiDescParser9getNumEPsEv>
 4007488:	1007883a 	mov	r3,r2
 400748c:	e0bfe383 	ldbu	r2,-114(fp)
 4007490:	10c5883a 	add	r2,r2,r3
 4007494:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
 4007498:	e0bfe383 	ldbu	r2,-114(fp)
 400749c:	108000b0 	cmpltui	r2,r2,2
 40074a0:	1000051e 	bne	r2,zero,40074b8 <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
 40074a4:	e0bfee04 	addi	r2,fp,-72
 40074a8:	1009883a 	mov	r4,r2
 40074ac:	4008be40 	call	4008be4 <_ZN14MidiDescParser12getConfValueEv>
 40074b0:	e0bfe345 	stb	r2,-115(fp)
 40074b4:	00000406 	br	40074c8 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();
        
        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
 40074b8:	e0bfe403 	ldbu	r2,-112(fp)
 40074bc:	10800044 	addi	r2,r2,1
 40074c0:	e0bfe405 	stb	r2,-112(fp)
 40074c4:	003fd306 	br	4007414 <__alt_mem_onchip_memory2_0+0xfc006194>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
 40074c8:	e0bfe383 	ldbu	r2,-114(fp)
 40074cc:	01402004 	movi	r5,128
 40074d0:	1009883a 	mov	r4,r2
 40074d4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
 40074d8:	e0bfe383 	ldbu	r2,-114(fp)
 40074dc:	10800058 	cmpnei	r2,r2,1
 40074e0:	1000321e 	bne	r2,zero,40075ac <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
 40074e4:	e03fe445 	stb	zero,-111(fp)
 40074e8:	e0ffe443 	ldbu	r3,-111(fp)
 40074ec:	e0bfe903 	ldbu	r2,-92(fp)
 40074f0:	18802a2e 	bgeu	r3,r2,400759c <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
 40074f4:	e0bffc17 	ldw	r2,-16(fp)
 40074f8:	10c00104 	addi	r3,r2,4
 40074fc:	e0bfee04 	addi	r2,fp,-72
 4007500:	000d883a 	mov	r6,zero
 4007504:	180b883a 	mov	r5,r3
 4007508:	1009883a 	mov	r4,r2
 400750c:	40083000 	call	4008300 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
 4007510:	e0bffc17 	ldw	r2,-16(fp)
 4007514:	10c00217 	ldw	r3,8(r2)
 4007518:	e0bffc17 	ldw	r2,-16(fp)
 400751c:	10800303 	ldbu	r2,12(r2)
 4007520:	11003fcc 	andi	r4,r2,255
 4007524:	e17fe443 	ldbu	r5,-111(fp)
 4007528:	e0bfee04 	addi	r2,fp,-72
 400752c:	d8800015 	stw	r2,0(sp)
 4007530:	280f883a 	mov	r7,r5
 4007534:	000d883a 	mov	r6,zero
 4007538:	200b883a 	mov	r5,r4
 400753c:	1809883a 	mov	r4,r3
 4007540:	40030b00 	call	40030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 4007544:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
 4007548:	e0bfe303 	ldbu	r2,-116(fp)
 400754c:	10005c1e 	bne	r2,zero,40076c0 <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
 4007550:	e0bfee04 	addi	r2,fp,-72
 4007554:	1009883a 	mov	r4,r2
 4007558:	4008c0c0 	call	4008c0c <_ZN14MidiDescParser9getNumEPsEv>
 400755c:	1007883a 	mov	r3,r2
 4007560:	e0bfe383 	ldbu	r2,-114(fp)
 4007564:	10c5883a 	add	r2,r2,r3
 4007568:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
 400756c:	e0bfe383 	ldbu	r2,-114(fp)
 4007570:	108000b0 	cmpltui	r2,r2,2
 4007574:	1000051e 	bne	r2,zero,400758c <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
 4007578:	e0bfee04 	addi	r2,fp,-72
 400757c:	1009883a 	mov	r4,r2
 4007580:	4008be40 	call	4008be4 <_ZN14MidiDescParser12getConfValueEv>
 4007584:	e0bfe345 	stb	r2,-115(fp)
 4007588:	00000406 	br	400759c <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
 400758c:	e0bfe443 	ldbu	r2,-111(fp)
 4007590:	10800044 	addi	r2,r2,1
 4007594:	e0bfe445 	stb	r2,-111(fp)
 4007598:	003fd306 	br	40074e8 <__alt_mem_onchip_memory2_0+0xfc006268>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
 400759c:	e0bfe383 	ldbu	r2,-114(fp)
 40075a0:	01402004 	movi	r5,128
 40075a4:	1009883a 	mov	r4,r2
 40075a8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
 40075ac:	e0bfe383 	ldbu	r2,-114(fp)
 40075b0:	108000a8 	cmpgeui	r2,r2,2
 40075b4:	1000031e 	bne	r2,zero,40075c4 <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
 40075b8:	00bfffc4 	movi	r2,-1
 40075bc:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
 40075c0:	00004206 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
 40075c4:	e0bffc17 	ldw	r2,-16(fp)
 40075c8:	10c00217 	ldw	r3,8(r2)
 40075cc:	e0bffc17 	ldw	r2,-16(fp)
 40075d0:	10800303 	ldbu	r2,12(r2)
 40075d4:	11003fcc 	andi	r4,r2,255
 40075d8:	e0bffc17 	ldw	r2,-16(fp)
 40075dc:	108004c4 	addi	r2,r2,19
 40075e0:	100f883a 	mov	r7,r2
 40075e4:	018000c4 	movi	r6,3
 40075e8:	200b883a 	mov	r5,r4
 40075ec:	1809883a 	mov	r4,r3
 40075f0:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 40075f4:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
 40075f8:	e0bfe343 	ldbu	r2,-115(fp)
 40075fc:	01402004 	movi	r5,128
 4007600:	1009883a 	mov	r4,r2
 4007604:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
 4007608:	e0bffc17 	ldw	r2,-16(fp)
 400760c:	10800583 	ldbu	r2,22(r2)
 4007610:	10bfe004 	addi	r2,r2,-128
 4007614:	10803fcc 	andi	r2,r2,255
 4007618:	01402004 	movi	r5,128
 400761c:	1009883a 	mov	r4,r2
 4007620:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
 4007624:	e0bffc17 	ldw	r2,-16(fp)
 4007628:	10800643 	ldbu	r2,25(r2)
 400762c:	10803fcc 	andi	r2,r2,255
 4007630:	01402004 	movi	r5,128
 4007634:	1009883a 	mov	r4,r2
 4007638:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
 400763c:	e0bffc17 	ldw	r2,-16(fp)
 4007640:	10c00217 	ldw	r3,8(r2)
 4007644:	e0bffc17 	ldw	r2,-16(fp)
 4007648:	10800303 	ldbu	r2,12(r2)
 400764c:	10803fcc 	andi	r2,r2,255
 4007650:	e13fe343 	ldbu	r4,-115(fp)
 4007654:	200f883a 	mov	r7,r4
 4007658:	000d883a 	mov	r6,zero
 400765c:	100b883a 	mov	r5,r2
 4007660:	1809883a 	mov	r4,r3
 4007664:	40032e40 	call	40032e4 <_ZN3USB7setConfEhhh>
 4007668:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
 400766c:	e0bfe303 	ldbu	r2,-116(fp)
 4007670:	1000151e 	bne	r2,zero,40076c8 <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        bPollEnable = true;
 4007674:	e0bffc17 	ldw	r2,-16(fp)
 4007678:	00c00044 	movi	r3,1
 400767c:	10c00345 	stb	r3,13(r2)

        if(pFuncOnInit)
 4007680:	e0bffc17 	ldw	r2,-16(fp)
 4007684:	10801817 	ldw	r2,96(r2)
 4007688:	10000326 	beq	r2,zero,4007698 <_ZN9USBH_MIDI4InitEhhb+0x7bc>
                pFuncOnInit(); // Call the user function
 400768c:	e0bffc17 	ldw	r2,-16(fp)
 4007690:	10801817 	ldw	r2,96(r2)
 4007694:	103ee83a 	callr	r2

        USBTRACE("Init done.\r\n");
        return 0;
 4007698:	0005883a 	mov	r2,zero
 400769c:	00001206 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
 40076a0:	0001883a 	nop
 40076a4:	00000906 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
 40076a8:	0001883a 	nop
 40076ac:	00000706 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
 40076b0:	0001883a 	nop
 40076b4:	00000506 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
 40076b8:	0001883a 	nop
 40076bc:	00000306 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
 40076c0:	0001883a 	nop
 40076c4:	00000106 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
 40076c8:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
 40076cc:	e0bffc17 	ldw	r2,-16(fp)
 40076d0:	10800017 	ldw	r2,0(r2)
 40076d4:	10800204 	addi	r2,r2,8
 40076d8:	10800017 	ldw	r2,0(r2)
 40076dc:	e13ffc17 	ldw	r4,-16(fp)
 40076e0:	103ee83a 	callr	r2
        return rcode;
 40076e4:	e0bfe303 	ldbu	r2,-116(fp)
}
 40076e8:	e037883a 	mov	sp,fp
 40076ec:	dfc00117 	ldw	ra,4(sp)
 40076f0:	df000017 	ldw	fp,0(sp)
 40076f4:	dec00204 	addi	sp,sp,8
 40076f8:	f800283a 	ret

040076fc <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
 40076fc:	defffd04 	addi	sp,sp,-12
 4007700:	dfc00215 	stw	ra,8(sp)
 4007704:	df000115 	stw	fp,4(sp)
 4007708:	df000104 	addi	fp,sp,4
 400770c:	e13fff15 	stw	r4,-4(fp)
        if(pFuncOnRelease && bPollEnable)
 4007710:	e0bfff17 	ldw	r2,-4(fp)
 4007714:	10801917 	ldw	r2,100(r2)
 4007718:	10000726 	beq	r2,zero,4007738 <_ZN9USBH_MIDI7ReleaseEv+0x3c>
 400771c:	e0bfff17 	ldw	r2,-4(fp)
 4007720:	10800343 	ldbu	r2,13(r2)
 4007724:	10803fcc 	andi	r2,r2,255
 4007728:	10000326 	beq	r2,zero,4007738 <_ZN9USBH_MIDI7ReleaseEv+0x3c>
                pFuncOnRelease(); // Call the user function
 400772c:	e0bfff17 	ldw	r2,-4(fp)
 4007730:	10801917 	ldw	r2,100(r2)
 4007734:	103ee83a 	callr	r2

        pUsb->GetAddressPool().FreeAddress(bAddress);
 4007738:	e0bfff17 	ldw	r2,-4(fp)
 400773c:	10800217 	ldw	r2,8(r2)
 4007740:	1009883a 	mov	r4,r2
 4007744:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 4007748:	1009883a 	mov	r4,r2
 400774c:	20800017 	ldw	r2,0(r4)
 4007750:	10800204 	addi	r2,r2,8
 4007754:	10800017 	ldw	r2,0(r2)
 4007758:	e0ffff17 	ldw	r3,-4(fp)
 400775c:	18c00303 	ldbu	r3,12(r3)
 4007760:	18c03fcc 	andi	r3,r3,255
 4007764:	180b883a 	mov	r5,r3
 4007768:	103ee83a 	callr	r2
        bAddress     = 0;
 400776c:	e0bfff17 	ldw	r2,-4(fp)
 4007770:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
 4007774:	e0bfff17 	ldw	r2,-4(fp)
 4007778:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
 400777c:	e0bfff17 	ldw	r2,-4(fp)
 4007780:	10001705 	stb	zero,92(r2)

        return 0;
 4007784:	0005883a 	mov	r2,zero
}
 4007788:	e037883a 	mov	sp,fp
 400778c:	dfc00117 	ldw	ra,4(sp)
 4007790:	df000017 	ldw	fp,0(sp)
 4007794:	dec00204 	addi	sp,sp,8
 4007798:	f800283a 	ret

0400779c <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
 400779c:	defffe04 	addi	sp,sp,-8
 40077a0:	df000115 	stw	fp,4(sp)
 40077a4:	df000104 	addi	fp,sp,4
 40077a8:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
 40077ac:	e0bfff17 	ldw	r2,-4(fp)
 40077b0:	1080040b 	ldhu	r2,16(r2)
 40077b4:	10bfffcc 	andi	r2,r2,65535
 40077b8:	10848d58 	cmpnei	r2,r2,4661
 40077bc:	10004e1e 	bne	r2,zero,40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
                // LaunchPad and LaunchKey endpoint attribute is interrupt 
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
 40077c0:	e0bfff17 	ldw	r2,-4(fp)
 40077c4:	1080038b 	ldhu	r2,14(r2)
 40077c8:	10bfffcc 	andi	r2,r2,65535
 40077cc:	10800820 	cmpeqi	r2,r2,32
 40077d0:	10000f1e 	bne	r2,zero,4007810 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
 40077d4:	e0bfff17 	ldw	r2,-4(fp)
 40077d8:	1080038b 	ldhu	r2,14(r2)
 40077dc:	10bfffcc 	andi	r2,r2,65535
 40077e0:	10800da0 	cmpeqi	r2,r2,54
 40077e4:	10000a1e 	bne	r2,zero,4007810 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
 40077e8:	e0bfff17 	ldw	r2,-4(fp)
 40077ec:	1080038b 	ldhu	r2,14(r2)
 40077f0:	10bfffcc 	andi	r2,r2,65535
 40077f4:	10801460 	cmpeqi	r2,r2,81
 40077f8:	1000051e 	bne	r2,zero,4007810 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
 40077fc:	e0bfff17 	ldw	r2,-4(fp)
 4007800:	1080038b 	ldhu	r2,14(r2)
 4007804:	10bfffcc 	andi	r2,r2,65535
 4007808:	10801a58 	cmpnei	r2,r2,105
 400780c:	1000041e 	bne	r2,zero,4007820 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
 4007810:	e0bfff17 	ldw	r2,-4(fp)
 4007814:	00c00084 	movi	r3,2
 4007818:	10c00485 	stb	r3,18(r2)
                        return;
 400781c:	00003606 	br	40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2, 0x0102,0x113-0x122:MiniMk3, 0x134-0x137:MK3
                if( (0x30 <= pid && pid <= 0x32) || pid == 0x35 || (0x7B <= pid && pid <= 0x7D) 
 4007820:	e0bfff17 	ldw	r2,-4(fp)
 4007824:	1080038b 	ldhu	r2,14(r2)
 4007828:	10bfffcc 	andi	r2,r2,65535
 400782c:	10800c30 	cmpltui	r2,r2,48
 4007830:	1000051e 	bne	r2,zero,4007848 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
 4007834:	e0bfff17 	ldw	r2,-4(fp)
 4007838:	1080038b 	ldhu	r2,14(r2)
 400783c:	10bfffcc 	andi	r2,r2,65535
 4007840:	10800cf0 	cmpltui	r2,r2,51
 4007844:	1000281e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 4007848:	e0bfff17 	ldw	r2,-4(fp)
 400784c:	1080038b 	ldhu	r2,14(r2)
 4007850:	10bfffcc 	andi	r2,r2,65535
 4007854:	10800d60 	cmpeqi	r2,r2,53
 4007858:	1000231e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 400785c:	e0bfff17 	ldw	r2,-4(fp)
 4007860:	1080038b 	ldhu	r2,14(r2)
 4007864:	10bfffcc 	andi	r2,r2,65535
 4007868:	10801ef0 	cmpltui	r2,r2,123
 400786c:	1000051e 	bne	r2,zero,4007884 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
 4007870:	e0bfff17 	ldw	r2,-4(fp)
 4007874:	1080038b 	ldhu	r2,14(r2)
 4007878:	10bfffcc 	andi	r2,r2,65535
 400787c:	10801fb0 	cmpltui	r2,r2,126
 4007880:	1000191e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
                  || pid == 0x102 || (0x113 <= pid && pid <= 0x122) || (0x134 <= pid && pid <= 0x137) ) {
 4007884:	e0bfff17 	ldw	r2,-4(fp)
 4007888:	1080038b 	ldhu	r2,14(r2)
 400788c:	10bfffcc 	andi	r2,r2,65535
 4007890:	108040a0 	cmpeqi	r2,r2,258
 4007894:	1000141e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 4007898:	e0bfff17 	ldw	r2,-4(fp)
 400789c:	1080038b 	ldhu	r2,14(r2)
 40078a0:	10bfffcc 	andi	r2,r2,65535
 40078a4:	108044f0 	cmpltui	r2,r2,275
 40078a8:	1000051e 	bne	r2,zero,40078c0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x124>
 40078ac:	e0bfff17 	ldw	r2,-4(fp)
 40078b0:	1080038b 	ldhu	r2,14(r2)
 40078b4:	10bfffcc 	andi	r2,r2,65535
 40078b8:	108048f0 	cmpltui	r2,r2,291
 40078bc:	10000a1e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 40078c0:	e0bfff17 	ldw	r2,-4(fp)
 40078c4:	1080038b 	ldhu	r2,14(r2)
 40078c8:	10bfffcc 	andi	r2,r2,65535
 40078cc:	10804d30 	cmpltui	r2,r2,308
 40078d0:	1000091e 	bne	r2,zero,40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
 40078d4:	e0bfff17 	ldw	r2,-4(fp)
 40078d8:	1080038b 	ldhu	r2,14(r2)
 40078dc:	10bfffcc 	andi	r2,r2,65535
 40078e0:	10804e28 	cmpgeui	r2,r2,312
 40078e4:	1000041e 	bne	r2,zero,40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
                        bTransferTypeMask = 2;
 40078e8:	e0bfff17 	ldw	r2,-4(fp)
 40078ec:	00c00084 	movi	r3,2
 40078f0:	10c00485 	stb	r3,18(r2)
                        return;
 40078f4:	0001883a 	nop
                }
        }
}
 40078f8:	e037883a 	mov	sp,fp
 40078fc:	df000017 	ldw	fp,0(sp)
 4007900:	dec00104 	addi	sp,sp,4
 4007904:	f800283a 	ret

04007908 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
 4007908:	defff804 	addi	sp,sp,-32
 400790c:	dfc00715 	stw	ra,28(sp)
 4007910:	df000615 	stw	fp,24(sp)
 4007914:	df000604 	addi	fp,sp,24
 4007918:	e13ffd15 	stw	r4,-12(fp)
 400791c:	e17ffe15 	stw	r5,-8(fp)
 4007920:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
 4007924:	e0bffd17 	ldw	r2,-12(fp)
 4007928:	108005c3 	ldbu	r2,23(r2)
 400792c:	10c03fcc 	andi	r3,r2,255
 4007930:	e0bffe17 	ldw	r2,-8(fp)
 4007934:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
 4007938:	e0bffd17 	ldw	r2,-12(fp)
 400793c:	10c00217 	ldw	r3,8(r2)
 4007940:	e0bffd17 	ldw	r2,-12(fp)
 4007944:	10800303 	ldbu	r2,12(r2)
 4007948:	11003fcc 	andi	r4,r2,255
 400794c:	e0bffd17 	ldw	r2,-12(fp)
 4007950:	10800583 	ldbu	r2,22(r2)
 4007954:	11403fcc 	andi	r5,r2,255
 4007958:	d8000115 	stw	zero,4(sp)
 400795c:	e0bfff17 	ldw	r2,-4(fp)
 4007960:	d8800015 	stw	r2,0(sp)
 4007964:	e1fffe17 	ldw	r7,-8(fp)
 4007968:	280d883a 	mov	r6,r5
 400796c:	200b883a 	mov	r5,r4
 4007970:	1809883a 	mov	r4,r3
 4007974:	40015fc0 	call	40015fc <_ZN3USB10inTransferEhhPtPhh>
 4007978:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
 400797c:	e0bffe17 	ldw	r2,-8(fp)
 4007980:	1080000b 	ldhu	r2,0(r2)
 4007984:	10bfffcc 	andi	r2,r2,65535
 4007988:	10800f28 	cmpgeui	r2,r2,60
 400798c:	10000d1e 	bne	r2,zero,40079c4 <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
 4007990:	e0bffe17 	ldw	r2,-8(fp)
 4007994:	1080000b 	ldhu	r2,0(r2)
 4007998:	10bfffcc 	andi	r2,r2,65535
 400799c:	e0ffff17 	ldw	r3,-4(fp)
 40079a0:	1885883a 	add	r2,r3,r2
 40079a4:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
 40079a8:	e0bffe17 	ldw	r2,-8(fp)
 40079ac:	1080000b 	ldhu	r2,0(r2)
 40079b0:	10bfffcc 	andi	r2,r2,65535
 40079b4:	10800044 	addi	r2,r2,1
 40079b8:	e0ffff17 	ldw	r3,-4(fp)
 40079bc:	1885883a 	add	r2,r3,r2
 40079c0:	10000005 	stb	zero,0(r2)
        }
        return r;
 40079c4:	e0bffc03 	ldbu	r2,-16(fp)
}
 40079c8:	e037883a 	mov	sp,fp
 40079cc:	dfc00117 	ldw	ra,4(sp)
 40079d0:	df000017 	ldw	fp,0(sp)
 40079d4:	dec00204 	addi	sp,sp,8
 40079d8:	f800283a 	ret

040079dc <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
 40079dc:	defff904 	addi	sp,sp,-28
 40079e0:	dfc00615 	stw	ra,24(sp)
 40079e4:	df000515 	stw	fp,20(sp)
 40079e8:	df000504 	addi	fp,sp,20
 40079ec:	e13ffd15 	stw	r4,-12(fp)
 40079f0:	e17ffe15 	stw	r5,-8(fp)
 40079f4:	3005883a 	mov	r2,r6
 40079f8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
 40079fc:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
 4007a00:	e0bffd17 	ldw	r2,-12(fp)
 4007a04:	10800343 	ldbu	r2,13(r2)
 4007a08:	1080005c 	xori	r2,r2,1
 4007a0c:	10803fcc 	andi	r2,r2,255
 4007a10:	10000226 	beq	r2,zero,4007a1c <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
 4007a14:	0005883a 	mov	r2,zero
 4007a18:	00008506 	br	4007c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
 4007a1c:	e0bffd17 	ldw	r2,-12(fp)
 4007a20:	10801703 	ldbu	r2,92(r2)
 4007a24:	10803fcc 	andi	r2,r2,255
 4007a28:	10001826 	beq	r2,zero,4007a8c <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
 4007a2c:	e0bffd17 	ldw	r2,-12(fp)
 4007a30:	10801703 	ldbu	r2,92(r2)
 4007a34:	10803fcc 	andi	r2,r2,255
 4007a38:	10801028 	cmpgeui	r2,r2,64
 4007a3c:	1000131e 	bne	r2,zero,4007a8c <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
 4007a40:	e0bffd17 	ldw	r2,-12(fp)
 4007a44:	10801703 	ldbu	r2,92(r2)
 4007a48:	10803fcc 	andi	r2,r2,255
 4007a4c:	e0fffd17 	ldw	r3,-12(fp)
 4007a50:	1885883a 	add	r2,r3,r2
 4007a54:	10800704 	addi	r2,r2,28
 4007a58:	10800003 	ldbu	r2,0(r2)
 4007a5c:	10803fcc 	andi	r2,r2,255
 4007a60:	10002a1e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007a64:	e0bffd17 	ldw	r2,-12(fp)
 4007a68:	10801703 	ldbu	r2,92(r2)
 4007a6c:	10803fcc 	andi	r2,r2,255
 4007a70:	10800044 	addi	r2,r2,1
 4007a74:	e0fffd17 	ldw	r3,-12(fp)
 4007a78:	1885883a 	add	r2,r3,r2
 4007a7c:	10800704 	addi	r2,r2,28
 4007a80:	10800003 	ldbu	r2,0(r2)
 4007a84:	10803fcc 	andi	r2,r2,255
 4007a88:	1000201e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
 4007a8c:	e0bffd17 	ldw	r2,-12(fp)
 4007a90:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
 4007a94:	e0bffd17 	ldw	r2,-12(fp)
 4007a98:	10c00704 	addi	r3,r2,28
 4007a9c:	e0bffc04 	addi	r2,fp,-16
 4007aa0:	180d883a 	mov	r6,r3
 4007aa4:	100b883a 	mov	r5,r2
 4007aa8:	e13ffd17 	ldw	r4,-12(fp)
 4007aac:	40079080 	call	4007908 <_ZN9USBH_MIDI8RecvDataEPtPh>
 4007ab0:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
 4007ab4:	e0bffb03 	ldbu	r2,-20(fp)
 4007ab8:	10000226 	beq	r2,zero,4007ac4 <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
 4007abc:	0005883a 	mov	r2,zero
 4007ac0:	00005b06 	br	4007c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
 4007ac4:	e0bffd17 	ldw	r2,-12(fp)
 4007ac8:	10800703 	ldbu	r2,28(r2)
 4007acc:	10803fcc 	andi	r2,r2,255
 4007ad0:	10000e1e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007ad4:	e0bffd17 	ldw	r2,-12(fp)
 4007ad8:	10800743 	ldbu	r2,29(r2)
 4007adc:	10803fcc 	andi	r2,r2,255
 4007ae0:	10000a1e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007ae4:	e0bffd17 	ldw	r2,-12(fp)
 4007ae8:	10800783 	ldbu	r2,30(r2)
 4007aec:	10803fcc 	andi	r2,r2,255
 4007af0:	1000061e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007af4:	e0bffd17 	ldw	r2,-12(fp)
 4007af8:	108007c3 	ldbu	r2,31(r2)
 4007afc:	10803fcc 	andi	r2,r2,255
 4007b00:	1000021e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
 4007b04:	0005883a 	mov	r2,zero
 4007b08:	00004906 	br	4007c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
 4007b0c:	e0bffd17 	ldw	r2,-12(fp)
 4007b10:	10801703 	ldbu	r2,92(r2)
 4007b14:	10803fcc 	andi	r2,r2,255
 4007b18:	e0fffd17 	ldw	r3,-12(fp)
 4007b1c:	1885883a 	add	r2,r3,r2
 4007b20:	10800704 	addi	r2,r2,28
 4007b24:	10800003 	ldbu	r2,0(r2)
 4007b28:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
 4007b2c:	e0bfff03 	ldbu	r2,-4(fp)
 4007b30:	10000526 	beq	r2,zero,4007b48 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
 4007b34:	e0bffe17 	ldw	r2,-8(fp)
 4007b38:	10c00044 	addi	r3,r2,1
 4007b3c:	e0fffe15 	stw	r3,-8(fp)
 4007b40:	e0fffb43 	ldbu	r3,-19(fp)
 4007b44:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
 4007b48:	e0bffd17 	ldw	r2,-12(fp)
 4007b4c:	10801703 	ldbu	r2,92(r2)
 4007b50:	10800044 	addi	r2,r2,1
 4007b54:	1007883a 	mov	r3,r2
 4007b58:	e0bffd17 	ldw	r2,-12(fp)
 4007b5c:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
 4007b60:	e0bffe17 	ldw	r2,-8(fp)
 4007b64:	10c00044 	addi	r3,r2,1
 4007b68:	e0fffe15 	stw	r3,-8(fp)
 4007b6c:	e0fffd17 	ldw	r3,-12(fp)
 4007b70:	18c01703 	ldbu	r3,92(r3)
 4007b74:	19000044 	addi	r4,r3,1
 4007b78:	200b883a 	mov	r5,r4
 4007b7c:	e13ffd17 	ldw	r4,-12(fp)
 4007b80:	21401705 	stb	r5,92(r4)
 4007b84:	18c03fcc 	andi	r3,r3,255
 4007b88:	e13ffd17 	ldw	r4,-12(fp)
 4007b8c:	20c7883a 	add	r3,r4,r3
 4007b90:	18c00704 	addi	r3,r3,28
 4007b94:	18c00003 	ldbu	r3,0(r3)
 4007b98:	e0fffb85 	stb	r3,-18(fp)
 4007b9c:	e0fffb83 	ldbu	r3,-18(fp)
 4007ba0:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
 4007ba4:	e0bffe17 	ldw	r2,-8(fp)
 4007ba8:	10c00044 	addi	r3,r2,1
 4007bac:	e0fffe15 	stw	r3,-8(fp)
 4007bb0:	e0fffd17 	ldw	r3,-12(fp)
 4007bb4:	18c01703 	ldbu	r3,92(r3)
 4007bb8:	19000044 	addi	r4,r3,1
 4007bbc:	200b883a 	mov	r5,r4
 4007bc0:	e13ffd17 	ldw	r4,-12(fp)
 4007bc4:	21401705 	stb	r5,92(r4)
 4007bc8:	18c03fcc 	andi	r3,r3,255
 4007bcc:	e13ffd17 	ldw	r4,-12(fp)
 4007bd0:	20c7883a 	add	r3,r4,r3
 4007bd4:	18c00704 	addi	r3,r3,28
 4007bd8:	18c00003 	ldbu	r3,0(r3)
 4007bdc:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
 4007be0:	e0bffe17 	ldw	r2,-8(fp)
 4007be4:	10c00044 	addi	r3,r2,1
 4007be8:	e0fffe15 	stw	r3,-8(fp)
 4007bec:	e0fffd17 	ldw	r3,-12(fp)
 4007bf0:	18c01703 	ldbu	r3,92(r3)
 4007bf4:	19000044 	addi	r4,r3,1
 4007bf8:	200b883a 	mov	r5,r4
 4007bfc:	e13ffd17 	ldw	r4,-12(fp)
 4007c00:	21401705 	stb	r5,92(r4)
 4007c04:	18c03fcc 	andi	r3,r3,255
 4007c08:	e13ffd17 	ldw	r4,-12(fp)
 4007c0c:	20c7883a 	add	r3,r4,r3
 4007c10:	18c00704 	addi	r3,r3,28
 4007c14:	18c00003 	ldbu	r3,0(r3)
 4007c18:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
 4007c1c:	e0bffb43 	ldbu	r2,-19(fp)
 4007c20:	108003cc 	andi	r2,r2,15
 4007c24:	100b883a 	mov	r5,r2
 4007c28:	e13ffd17 	ldw	r4,-12(fp)
 4007c2c:	4008c8c0 	call	4008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
 4007c30:	e037883a 	mov	sp,fp
 4007c34:	dfc00117 	ldw	ra,4(sp)
 4007c38:	df000017 	ldw	fp,0(sp)
 4007c3c:	dec00204 	addi	sp,sp,8
 4007c40:	f800283a 	ret

04007c44 <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
 4007c44:	defff804 	addi	sp,sp,-32
 4007c48:	dfc00715 	stw	ra,28(sp)
 4007c4c:	df000615 	stw	fp,24(sp)
 4007c50:	df000604 	addi	fp,sp,24
 4007c54:	e13ffd15 	stw	r4,-12(fp)
 4007c58:	e17ffe15 	stw	r5,-8(fp)
 4007c5c:	3005883a 	mov	r2,r6
 4007c60:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
 4007c64:	e0bffe17 	ldw	r2,-8(fp)
 4007c68:	10800003 	ldbu	r2,0(r2)
 4007c6c:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
 4007c70:	e0bffb03 	ldbu	r2,-20(fp)
 4007c74:	100b883a 	mov	r5,r2
 4007c78:	e13ffd17 	ldw	r4,-12(fp)
 4007c7c:	4008c340 	call	4008c34 <_ZN9USBH_MIDI17convertStatus2CinEh>
 4007c80:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
 4007c84:	e0bffb03 	ldbu	r2,-20(fp)
 4007c88:	10803c18 	cmpnei	r2,r2,240
 4007c8c:	10000b1e 	bne	r2,zero,4007cbc <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
 4007c90:	e17ffe17 	ldw	r5,-8(fp)
 4007c94:	e13ffd17 	ldw	r4,-12(fp)
 4007c98:	4007e040 	call	4007e04 <_ZN9USBH_MIDI18countSysExDataSizeEPh>
 4007c9c:	10bfffcc 	andi	r2,r2,65535
 4007ca0:	e0ffff03 	ldbu	r3,-4(fp)
 4007ca4:	180f883a 	mov	r7,r3
 4007ca8:	100d883a 	mov	r6,r2
 4007cac:	e17ffe17 	ldw	r5,-8(fp)
 4007cb0:	e13ffd17 	ldw	r4,-12(fp)
 4007cb4:	4007e8c0 	call	4007e8c <_ZN9USBH_MIDI9SendSysExEPhth>
 4007cb8:	00003406 	br	4007d8c <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
 4007cbc:	e0bfff03 	ldbu	r2,-4(fp)
 4007cc0:	1004913a 	slli	r2,r2,4
 4007cc4:	1007883a 	mov	r3,r2
 4007cc8:	e0bffb43 	ldbu	r2,-19(fp)
 4007ccc:	1884b03a 	or	r2,r3,r2
 4007cd0:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
 4007cd4:	e0bffe17 	ldw	r2,-8(fp)
 4007cd8:	10800003 	ldbu	r2,0(r2)
 4007cdc:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
 4007ce0:	e0bffb43 	ldbu	r2,-19(fp)
 4007ce4:	100b883a 	mov	r5,r2
 4007ce8:	e13ffd17 	ldw	r4,-12(fp)
 4007cec:	4008c8c0 	call	4008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
 4007cf0:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
 4007cf4:	e0bffb83 	ldbu	r2,-18(fp)
 4007cf8:	10c000a0 	cmpeqi	r3,r2,2
 4007cfc:	18000c1e 	bne	r3,zero,4007d30 <_ZN9USBH_MIDI8SendDataEPhh+0xec>
 4007d00:	10c000e0 	cmpeqi	r3,r2,3
 4007d04:	1800031e 	bne	r3,zero,4007d14 <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
 4007d08:	10800060 	cmpeqi	r2,r2,1
 4007d0c:	10000d1e 	bne	r2,zero,4007d44 <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
 4007d10:	00000f06 	br	4007d50 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
 4007d14:	e0bffe17 	ldw	r2,-8(fp)
 4007d18:	10800043 	ldbu	r2,1(r2)
 4007d1c:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
 4007d20:	e0bffe17 	ldw	r2,-8(fp)
 4007d24:	10800083 	ldbu	r2,2(r2)
 4007d28:	e0bffc85 	stb	r2,-14(fp)
                break;
 4007d2c:	00000806 	br	4007d50 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
 4007d30:	e0bffe17 	ldw	r2,-8(fp)
 4007d34:	10800043 	ldbu	r2,1(r2)
 4007d38:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
 4007d3c:	e03ffc85 	stb	zero,-14(fp)
                break;
 4007d40:	00000306 	br	4007d50 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
 4007d44:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
 4007d48:	e03ffc85 	stb	zero,-14(fp)
                break;
 4007d4c:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
 4007d50:	e0bffd17 	ldw	r2,-12(fp)
 4007d54:	10c00217 	ldw	r3,8(r2)
 4007d58:	e0bffd17 	ldw	r2,-12(fp)
 4007d5c:	10800303 	ldbu	r2,12(r2)
 4007d60:	11003fcc 	andi	r4,r2,255
 4007d64:	e0bffd17 	ldw	r2,-12(fp)
 4007d68:	10800643 	ldbu	r2,25(r2)
 4007d6c:	11403fcc 	andi	r5,r2,255
 4007d70:	e0bffbc4 	addi	r2,fp,-17
 4007d74:	d8800015 	stw	r2,0(sp)
 4007d78:	01c00104 	movi	r7,4
 4007d7c:	280d883a 	mov	r6,r5
 4007d80:	200b883a 	mov	r5,r4
 4007d84:	1809883a 	mov	r4,r3
 4007d88:	40019900 	call	4001990 <_ZN3USB11outTransferEhhtPh>
}
 4007d8c:	e037883a 	mov	sp,fp
 4007d90:	dfc00117 	ldw	ra,4(sp)
 4007d94:	df000017 	ldw	fp,0(sp)
 4007d98:	dec00204 	addi	sp,sp,8
 4007d9c:	f800283a 	ret

04007da0 <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
 4007da0:	defffb04 	addi	sp,sp,-20
 4007da4:	dfc00415 	stw	ra,16(sp)
 4007da8:	df000315 	stw	fp,12(sp)
 4007dac:	df000304 	addi	fp,sp,12
 4007db0:	e13ffd15 	stw	r4,-12(fp)
 4007db4:	2807883a 	mov	r3,r5
 4007db8:	3005883a 	mov	r2,r6
 4007dbc:	e0fffe05 	stb	r3,-8(fp)
 4007dc0:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
 4007dc4:	e0bfff03 	ldbu	r2,-4(fp)
 4007dc8:	1000051e 	bne	r2,zero,4007de0 <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
 4007dcc:	e0bffe03 	ldbu	r2,-8(fp)
 4007dd0:	100b883a 	mov	r5,r2
 4007dd4:	e13ffd17 	ldw	r4,-12(fp)
 4007dd8:	4008c340 	call	4008c34 <_ZN9USBH_MIDI17convertStatus2CinEh>
 4007ddc:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
 4007de0:	e0bfff03 	ldbu	r2,-4(fp)
 4007de4:	100b883a 	mov	r5,r2
 4007de8:	e13ffd17 	ldw	r4,-12(fp)
 4007dec:	4008c8c0 	call	4008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
 4007df0:	e037883a 	mov	sp,fp
 4007df4:	dfc00117 	ldw	ra,4(sp)
 4007df8:	df000017 	ldw	fp,0(sp)
 4007dfc:	dec00204 	addi	sp,sp,8
 4007e00:	f800283a 	ret

04007e04 <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
 4007e04:	defffc04 	addi	sp,sp,-16
 4007e08:	df000315 	stw	fp,12(sp)
 4007e0c:	df000304 	addi	fp,sp,12
 4007e10:	e13ffe15 	stw	r4,-8(fp)
 4007e14:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
 4007e18:	00800044 	movi	r2,1
 4007e1c:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
 4007e20:	e0bfff17 	ldw	r2,-4(fp)
 4007e24:	10800003 	ldbu	r2,0(r2)
 4007e28:	10803fcc 	andi	r2,r2,255
 4007e2c:	10803c20 	cmpeqi	r2,r2,240
 4007e30:	1000021e 	bne	r2,zero,4007e3c <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
 4007e34:	0005883a 	mov	r2,zero
 4007e38:	00001006 	br	4007e7c <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
 4007e3c:	e0bfff17 	ldw	r2,-4(fp)
 4007e40:	10800003 	ldbu	r2,0(r2)
 4007e44:	10803fcc 	andi	r2,r2,255
 4007e48:	10803de0 	cmpeqi	r2,r2,247
 4007e4c:	10000a1e 	bne	r2,zero,4007e78 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
 4007e50:	e0bfff17 	ldw	r2,-4(fp)
 4007e54:	10800044 	addi	r2,r2,1
 4007e58:	e0bfff15 	stw	r2,-4(fp)
                c++;
 4007e5c:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e60:	10800044 	addi	r2,r2,1
 4007e64:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
 4007e68:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e6c:	10804070 	cmpltui	r2,r2,257
 4007e70:	103ff21e 	bne	r2,zero,4007e3c <__alt_mem_onchip_memory2_0+0xfc006bbc>
                        c = 0;
 4007e74:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
 4007e78:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4007e7c:	e037883a 	mov	sp,fp
 4007e80:	df000017 	ldw	fp,0(sp)
 4007e84:	dec00104 	addi	sp,sp,4
 4007e88:	f800283a 	ret

04007e8c <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
 4007e8c:	deffe704 	addi	sp,sp,-100
 4007e90:	dfc01815 	stw	ra,96(sp)
 4007e94:	df001715 	stw	fp,92(sp)
 4007e98:	df001704 	addi	fp,sp,92
 4007e9c:	e13ffc15 	stw	r4,-16(fp)
 4007ea0:	e17ffd15 	stw	r5,-12(fp)
 4007ea4:	3007883a 	mov	r3,r6
 4007ea8:	3805883a 	mov	r2,r7
 4007eac:	e0fffe0d 	sth	r3,-8(fp)
 4007eb0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
 4007eb4:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
 4007eb8:	e0bffe0b 	ldhu	r2,-8(fp)
 4007ebc:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
 4007ec0:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
 4007ec4:	e0bffc17 	ldw	r2,-16(fp)
 4007ec8:	108005c3 	ldbu	r2,23(r2)
 4007ecc:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
 4007ed0:	e0bffe0b 	ldhu	r2,-8(fp)
 4007ed4:	01402004 	movi	r5,128
 4007ed8:	1009883a 	mov	r4,r2
 4007edc:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
 4007ee0:	e0bfea8b 	ldhu	r2,-86(fp)
 4007ee4:	1000b026 	beq	r2,zero,40081a8 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
 4007ee8:	e0bfeb03 	ldbu	r2,-84(fp)
 4007eec:	e0ffff03 	ldbu	r3,-4(fp)
 4007ef0:	1806913a 	slli	r3,r3,4
 4007ef4:	18c00114 	ori	r3,r3,4
 4007ef8:	1809883a 	mov	r4,r3
 4007efc:	e0ffeb84 	addi	r3,fp,-82
 4007f00:	1885883a 	add	r2,r3,r2
 4007f04:	11000005 	stb	r4,0(r2)

                switch ( n ) {
 4007f08:	e0bfea8b 	ldhu	r2,-86(fp)
 4007f0c:	10c000a0 	cmpeqi	r3,r2,2
 4007f10:	18002a1e 	bne	r3,zero,4007fbc <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
 4007f14:	10c000e0 	cmpeqi	r3,r2,3
 4007f18:	1800521e 	bne	r3,zero,4008064 <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
 4007f1c:	10800060 	cmpeqi	r2,r2,1
 4007f20:	10005826 	beq	r2,zero,4008084 <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
 4007f24:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f28:	10c00044 	addi	r3,r2,1
 4007f2c:	e0ffeb05 	stb	r3,-84(fp)
 4007f30:	10803fcc 	andi	r2,r2,255
 4007f34:	e0ffff03 	ldbu	r3,-4(fp)
 4007f38:	1806913a 	slli	r3,r3,4
 4007f3c:	18c00154 	ori	r3,r3,5
 4007f40:	1809883a 	mov	r4,r3
 4007f44:	e0ffeb84 	addi	r3,fp,-82
 4007f48:	1885883a 	add	r2,r3,r2
 4007f4c:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
 4007f50:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f54:	10c00044 	addi	r3,r2,1
 4007f58:	e0ffeb05 	stb	r3,-84(fp)
 4007f5c:	11003fcc 	andi	r4,r2,255
 4007f60:	e0bffd17 	ldw	r2,-12(fp)
 4007f64:	10c00044 	addi	r3,r2,1
 4007f68:	e0fffd15 	stw	r3,-12(fp)
 4007f6c:	10c00003 	ldbu	r3,0(r2)
 4007f70:	e0bfeb84 	addi	r2,fp,-82
 4007f74:	1105883a 	add	r2,r2,r4
 4007f78:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
 4007f7c:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f80:	10c00044 	addi	r3,r2,1
 4007f84:	e0ffeb05 	stb	r3,-84(fp)
 4007f88:	10803fcc 	andi	r2,r2,255
 4007f8c:	e0ffeb84 	addi	r3,fp,-82
 4007f90:	1885883a 	add	r2,r3,r2
 4007f94:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
 4007f98:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f9c:	10c00044 	addi	r3,r2,1
 4007fa0:	e0ffeb05 	stb	r3,-84(fp)
 4007fa4:	10803fcc 	andi	r2,r2,255
 4007fa8:	e0ffeb84 	addi	r3,fp,-82
 4007fac:	1885883a 	add	r2,r3,r2
 4007fb0:	10000005 	stb	zero,0(r2)
                        n = 0;
 4007fb4:	e03fea8d 	sth	zero,-86(fp)
                        break;
 4007fb8:	00005a06 	br	4008124 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
 4007fbc:	e0bfeb03 	ldbu	r2,-84(fp)
 4007fc0:	10c00044 	addi	r3,r2,1
 4007fc4:	e0ffeb05 	stb	r3,-84(fp)
 4007fc8:	10803fcc 	andi	r2,r2,255
 4007fcc:	e0ffff03 	ldbu	r3,-4(fp)
 4007fd0:	1806913a 	slli	r3,r3,4
 4007fd4:	18c00194 	ori	r3,r3,6
 4007fd8:	1809883a 	mov	r4,r3
 4007fdc:	e0ffeb84 	addi	r3,fp,-82
 4007fe0:	1885883a 	add	r2,r3,r2
 4007fe4:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
 4007fe8:	e0bfeb03 	ldbu	r2,-84(fp)
 4007fec:	10c00044 	addi	r3,r2,1
 4007ff0:	e0ffeb05 	stb	r3,-84(fp)
 4007ff4:	11003fcc 	andi	r4,r2,255
 4007ff8:	e0bffd17 	ldw	r2,-12(fp)
 4007ffc:	10c00044 	addi	r3,r2,1
 4008000:	e0fffd15 	stw	r3,-12(fp)
 4008004:	10c00003 	ldbu	r3,0(r2)
 4008008:	e0bfeb84 	addi	r2,fp,-82
 400800c:	1105883a 	add	r2,r2,r4
 4008010:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
 4008014:	e0bfeb03 	ldbu	r2,-84(fp)
 4008018:	10c00044 	addi	r3,r2,1
 400801c:	e0ffeb05 	stb	r3,-84(fp)
 4008020:	11003fcc 	andi	r4,r2,255
 4008024:	e0bffd17 	ldw	r2,-12(fp)
 4008028:	10c00044 	addi	r3,r2,1
 400802c:	e0fffd15 	stw	r3,-12(fp)
 4008030:	10c00003 	ldbu	r3,0(r2)
 4008034:	e0bfeb84 	addi	r2,fp,-82
 4008038:	1105883a 	add	r2,r2,r4
 400803c:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
 4008040:	e0bfeb03 	ldbu	r2,-84(fp)
 4008044:	10c00044 	addi	r3,r2,1
 4008048:	e0ffeb05 	stb	r3,-84(fp)
 400804c:	10803fcc 	andi	r2,r2,255
 4008050:	e0ffeb84 	addi	r3,fp,-82
 4008054:	1885883a 	add	r2,r3,r2
 4008058:	10000005 	stb	zero,0(r2)
                        n = 0;
 400805c:	e03fea8d 	sth	zero,-86(fp)
                        break;
 4008060:	00003006 	br	4008124 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
 4008064:	e0bfeb03 	ldbu	r2,-84(fp)
 4008068:	e0ffff03 	ldbu	r3,-4(fp)
 400806c:	1806913a 	slli	r3,r3,4
 4008070:	18c001d4 	ori	r3,r3,7
 4008074:	1809883a 	mov	r4,r3
 4008078:	e0ffeb84 	addi	r3,fp,-82
 400807c:	1885883a 	add	r2,r3,r2
 4008080:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
 4008084:	e0bfeb03 	ldbu	r2,-84(fp)
 4008088:	10800044 	addi	r2,r2,1
 400808c:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
 4008090:	e0bfeb03 	ldbu	r2,-84(fp)
 4008094:	10c00044 	addi	r3,r2,1
 4008098:	e0ffeb05 	stb	r3,-84(fp)
 400809c:	11003fcc 	andi	r4,r2,255
 40080a0:	e0bffd17 	ldw	r2,-12(fp)
 40080a4:	10c00044 	addi	r3,r2,1
 40080a8:	e0fffd15 	stw	r3,-12(fp)
 40080ac:	10c00003 	ldbu	r3,0(r2)
 40080b0:	e0bfeb84 	addi	r2,fp,-82
 40080b4:	1105883a 	add	r2,r2,r4
 40080b8:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
 40080bc:	e0bfeb03 	ldbu	r2,-84(fp)
 40080c0:	10c00044 	addi	r3,r2,1
 40080c4:	e0ffeb05 	stb	r3,-84(fp)
 40080c8:	11003fcc 	andi	r4,r2,255
 40080cc:	e0bffd17 	ldw	r2,-12(fp)
 40080d0:	10c00044 	addi	r3,r2,1
 40080d4:	e0fffd15 	stw	r3,-12(fp)
 40080d8:	10c00003 	ldbu	r3,0(r2)
 40080dc:	e0bfeb84 	addi	r2,fp,-82
 40080e0:	1105883a 	add	r2,r2,r4
 40080e4:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
 40080e8:	e0bfeb03 	ldbu	r2,-84(fp)
 40080ec:	10c00044 	addi	r3,r2,1
 40080f0:	e0ffeb05 	stb	r3,-84(fp)
 40080f4:	11003fcc 	andi	r4,r2,255
 40080f8:	e0bffd17 	ldw	r2,-12(fp)
 40080fc:	10c00044 	addi	r3,r2,1
 4008100:	e0fffd15 	stw	r3,-12(fp)
 4008104:	10c00003 	ldbu	r3,0(r2)
 4008108:	e0bfeb84 	addi	r2,fp,-82
 400810c:	1105883a 	add	r2,r2,r4
 4008110:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
 4008114:	e0bfea8b 	ldhu	r2,-86(fp)
 4008118:	10bfff44 	addi	r2,r2,-3
 400811c:	e0bfea8d 	sth	r2,-86(fp)
                        break;
 4008120:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
 4008124:	e0ffeb03 	ldbu	r3,-84(fp)
 4008128:	e0bfeb43 	ldbu	r2,-83(fp)
 400812c:	1880022e 	bgeu	r3,r2,4008138 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
 4008130:	e0bfea8b 	ldhu	r2,-86(fp)
 4008134:	103f6a1e 	bne	r2,zero,4007ee0 <__alt_mem_onchip_memory2_0+0xfc006c60>
                        USBTRACE2(" wptr:\t", wptr);
 4008138:	e0bfeb03 	ldbu	r2,-84(fp)
 400813c:	01402004 	movi	r5,128
 4008140:	1009883a 	mov	r4,r2
 4008144:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
 4008148:	e0bffc17 	ldw	r2,-16(fp)
 400814c:	10c00217 	ldw	r3,8(r2)
 4008150:	e0bffc17 	ldw	r2,-16(fp)
 4008154:	10800303 	ldbu	r2,12(r2)
 4008158:	11003fcc 	andi	r4,r2,255
 400815c:	e0bffc17 	ldw	r2,-16(fp)
 4008160:	10800643 	ldbu	r2,25(r2)
 4008164:	11403fcc 	andi	r5,r2,255
 4008168:	e1bfeb03 	ldbu	r6,-84(fp)
 400816c:	e0bfeb84 	addi	r2,fp,-82
 4008170:	d8800015 	stw	r2,0(sp)
 4008174:	300f883a 	mov	r7,r6
 4008178:	280d883a 	mov	r6,r5
 400817c:	200b883a 	mov	r5,r4
 4008180:	1809883a 	mov	r4,r3
 4008184:	40019900 	call	4001990 <_ZN3USB11outTransferEhhtPh>
 4008188:	e0bfea05 	stb	r2,-88(fp)
 400818c:	e0bfea03 	ldbu	r2,-88(fp)
 4008190:	1004c03a 	cmpne	r2,r2,zero
 4008194:	10803fcc 	andi	r2,r2,255
 4008198:	1000021e 	bne	r2,zero,40081a4 <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
 400819c:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
 40081a0:	003f4f06 	br	4007ee0 <__alt_mem_onchip_memory2_0+0xfc006c60>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
 40081a4:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
 40081a8:	e0bfea03 	ldbu	r2,-88(fp)
}
 40081ac:	e037883a 	mov	sp,fp
 40081b0:	dfc00117 	ldw	ra,4(sp)
 40081b4:	df000017 	ldw	fp,0(sp)
 40081b8:	dec00204 	addi	sp,sp,8
 40081bc:	f800283a 	ret

040081c0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
 40081c0:	defffb04 	addi	sp,sp,-20
 40081c4:	df000415 	stw	fp,16(sp)
 40081c8:	df000404 	addi	fp,sp,16
 40081cc:	e13ffd15 	stw	r4,-12(fp)
 40081d0:	e17ffe15 	stw	r5,-8(fp)
 40081d4:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
 40081d8:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
 40081dc:	e0bffe17 	ldw	r2,-8(fp)
 40081e0:	10800003 	ldbu	r2,0(r2)
 40081e4:	108003cc 	andi	r2,r2,15
 40081e8:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
 40081ec:	e0bffc43 	ldbu	r2,-15(fp)
 40081f0:	1080030c 	andi	r2,r2,12
 40081f4:	10800120 	cmpeqi	r2,r2,4
 40081f8:	1000021e 	bne	r2,zero,4008204 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
 40081fc:	e0bffc03 	ldbu	r2,-16(fp)
 4008200:	00003b06 	br	40082f0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
 4008204:	e0bffc43 	ldbu	r2,-15(fp)
 4008208:	10c00160 	cmpeqi	r3,r2,5
 400820c:	18002e1e 	bne	r3,zero,40082c8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
 4008210:	10c00188 	cmpgei	r3,r2,6
 4008214:	1800031e 	bne	r3,zero,4008224 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
 4008218:	10800120 	cmpeqi	r2,r2,4
 400821c:	1000061e 	bne	r2,zero,4008238 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
 4008220:	00003206 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
 4008224:	10c001a0 	cmpeqi	r3,r2,6
 4008228:	1800181e 	bne	r3,zero,400828c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
 400822c:	108001e0 	cmpeqi	r2,r2,7
 4008230:	1000011e 	bne	r2,zero,4008238 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
 4008234:	00002d06 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
 4008238:	e0bfff17 	ldw	r2,-4(fp)
 400823c:	10c00044 	addi	r3,r2,1
 4008240:	e0ffff15 	stw	r3,-4(fp)
 4008244:	e0fffe17 	ldw	r3,-8(fp)
 4008248:	18c00043 	ldbu	r3,1(r3)
 400824c:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
 4008250:	e0bfff17 	ldw	r2,-4(fp)
 4008254:	10c00044 	addi	r3,r2,1
 4008258:	e0ffff15 	stw	r3,-4(fp)
 400825c:	e0fffe17 	ldw	r3,-8(fp)
 4008260:	18c00083 	ldbu	r3,2(r3)
 4008264:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
 4008268:	e0bfff17 	ldw	r2,-4(fp)
 400826c:	10c00044 	addi	r3,r2,1
 4008270:	e0ffff15 	stw	r3,-4(fp)
 4008274:	e0fffe17 	ldw	r3,-8(fp)
 4008278:	18c000c3 	ldbu	r3,3(r3)
 400827c:	10c00005 	stb	r3,0(r2)
                rc = 3;
 4008280:	008000c4 	movi	r2,3
 4008284:	e0bffc05 	stb	r2,-16(fp)
                break;
 4008288:	00001806 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
 400828c:	e0bfff17 	ldw	r2,-4(fp)
 4008290:	10c00044 	addi	r3,r2,1
 4008294:	e0ffff15 	stw	r3,-4(fp)
 4008298:	e0fffe17 	ldw	r3,-8(fp)
 400829c:	18c00043 	ldbu	r3,1(r3)
 40082a0:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
 40082a4:	e0bfff17 	ldw	r2,-4(fp)
 40082a8:	10c00044 	addi	r3,r2,1
 40082ac:	e0ffff15 	stw	r3,-4(fp)
 40082b0:	e0fffe17 	ldw	r3,-8(fp)
 40082b4:	18c00083 	ldbu	r3,2(r3)
 40082b8:	10c00005 	stb	r3,0(r2)
                rc = 2;
 40082bc:	00800084 	movi	r2,2
 40082c0:	e0bffc05 	stb	r2,-16(fp)
                break;
 40082c4:	00000906 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
 40082c8:	e0bfff17 	ldw	r2,-4(fp)
 40082cc:	10c00044 	addi	r3,r2,1
 40082d0:	e0ffff15 	stw	r3,-4(fp)
 40082d4:	e0fffe17 	ldw	r3,-8(fp)
 40082d8:	18c00043 	ldbu	r3,1(r3)
 40082dc:	10c00005 	stb	r3,0(r2)
                rc = 1;
 40082e0:	00800044 	movi	r2,1
 40082e4:	e0bffc05 	stb	r2,-16(fp)
                break;
 40082e8:	0001883a 	nop
            default:
                break;
        }
        return(rc);
 40082ec:	e0bffc03 	ldbu	r2,-16(fp)
}
 40082f0:	e037883a 	mov	sp,fp
 40082f4:	df000017 	ldw	fp,0(sp)
 40082f8:	dec00104 	addi	sp,sp,4
 40082fc:	f800283a 	ret

04008300 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
 4008300:	defffb04 	addi	sp,sp,-20
 4008304:	dfc00415 	stw	ra,16(sp)
 4008308:	df000315 	stw	fp,12(sp)
 400830c:	df000304 	addi	fp,sp,12
 4008310:	e13ffd15 	stw	r4,-12(fp)
 4008314:	e17ffe15 	stw	r5,-8(fp)
 4008318:	3005883a 	mov	r2,r6
 400831c:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
 4008320:	e0bffd17 	ldw	r2,-12(fp)
 4008324:	1009883a 	mov	r4,r2
 4008328:	40056400 	call	4005640 <_ZN13USBReadParserC1Ev>
 400832c:	008100b4 	movhi	r2,1026
 4008330:	108a0704 	addi	r2,r2,10268
 4008334:	e0fffd17 	ldw	r3,-12(fp)
 4008338:	18800015 	stw	r2,0(r3)
 400833c:	e0bffd17 	ldw	r2,-12(fp)
 4008340:	e0fffe17 	ldw	r3,-8(fp)
 4008344:	10c00115 	stw	r3,4(r2)
 4008348:	e0bffd17 	ldw	r2,-12(fp)
 400834c:	10800204 	addi	r2,r2,8
 4008350:	1009883a 	mov	r4,r2
 4008354:	4004f300 	call	4004f30 <_ZN16MultiValueBufferC1Ev>
 4008358:	e0bffd17 	ldw	r2,-12(fp)
 400835c:	10800404 	addi	r2,r2,16
 4008360:	1009883a 	mov	r4,r2
 4008364:	4004f900 	call	4004f90 <_ZN20MultiByteValueParserC1Ev>
 4008368:	e0bffd17 	ldw	r2,-12(fp)
 400836c:	10800604 	addi	r2,r2,24
 4008370:	1009883a 	mov	r4,r2
 4008374:	400504c0 	call	400504c <_ZN11ByteSkipperC1Ev>
 4008378:	e0bffd17 	ldw	r2,-12(fp)
 400837c:	10000c05 	stb	zero,48(r2)
 4008380:	e0bffd17 	ldw	r2,-12(fp)
 4008384:	10000c45 	stb	zero,49(r2)
 4008388:	e0bffd17 	ldw	r2,-12(fp)
 400838c:	10000c85 	stb	zero,50(r2)
 4008390:	e0bffd17 	ldw	r2,-12(fp)
 4008394:	10000cc5 	stb	zero,51(r2)
 4008398:	e0bffd17 	ldw	r2,-12(fp)
 400839c:	e0ffff03 	ldbu	r3,-4(fp)
 40083a0:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
 40083a4:	e0bffd17 	ldw	r2,-12(fp)
 40083a8:	10c00804 	addi	r3,r2,32
 40083ac:	e0bffd17 	ldw	r2,-12(fp)
 40083b0:	19803fcc 	andi	r6,r3,255
 40083b4:	11000243 	ldbu	r4,9(r2)
 40083b8:	2008703a 	and	r4,r4,zero
 40083bc:	200b883a 	mov	r5,r4
 40083c0:	3009883a 	mov	r4,r6
 40083c4:	2908b03a 	or	r4,r5,r4
 40083c8:	11000245 	stb	r4,9(r2)
 40083cc:	1808d23a 	srli	r4,r3,8
 40083d0:	21803fcc 	andi	r6,r4,255
 40083d4:	11000283 	ldbu	r4,10(r2)
 40083d8:	2008703a 	and	r4,r4,zero
 40083dc:	200b883a 	mov	r5,r4
 40083e0:	3009883a 	mov	r4,r6
 40083e4:	2908b03a 	or	r4,r5,r4
 40083e8:	11000285 	stb	r4,10(r2)
 40083ec:	1808d43a 	srli	r4,r3,16
 40083f0:	21803fcc 	andi	r6,r4,255
 40083f4:	110002c3 	ldbu	r4,11(r2)
 40083f8:	2008703a 	and	r4,r4,zero
 40083fc:	200b883a 	mov	r5,r4
 4008400:	3009883a 	mov	r4,r6
 4008404:	2908b03a 	or	r4,r5,r4
 4008408:	110002c5 	stb	r4,11(r2)
 400840c:	180ad63a 	srli	r5,r3,24
 4008410:	10c00303 	ldbu	r3,12(r2)
 4008414:	1806703a 	and	r3,r3,zero
 4008418:	1809883a 	mov	r4,r3
 400841c:	2807883a 	mov	r3,r5
 4008420:	20c6b03a 	or	r3,r4,r3
 4008424:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
 4008428:	e0bffd17 	ldw	r2,-12(fp)
 400842c:	10c00404 	addi	r3,r2,16
 4008430:	e0bffd17 	ldw	r2,-12(fp)
 4008434:	10800204 	addi	r2,r2,8
 4008438:	100b883a 	mov	r5,r2
 400843c:	1809883a 	mov	r4,r3
 4008440:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 4008444:	e0bffd17 	ldw	r2,-12(fp)
 4008448:	10c00604 	addi	r3,r2,24
 400844c:	e0bffd17 	ldw	r2,-12(fp)
 4008450:	10800204 	addi	r2,r2,8
 4008454:	100b883a 	mov	r5,r2
 4008458:	1809883a 	mov	r4,r3
 400845c:	40050880 	call	4005088 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
 4008460:	0001883a 	nop
 4008464:	e037883a 	mov	sp,fp
 4008468:	dfc00117 	ldw	ra,4(sp)
 400846c:	df000017 	ldw	fp,0(sp)
 4008470:	dec00204 	addi	sp,sp,8
 4008474:	f800283a 	ret

04008478 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 4008478:	defff804 	addi	sp,sp,-32
 400847c:	dfc00715 	stw	ra,28(sp)
 4008480:	df000615 	stw	fp,24(sp)
 4008484:	df000604 	addi	fp,sp,24
 4008488:	e13ffc15 	stw	r4,-16(fp)
 400848c:	2805883a 	mov	r2,r5
 4008490:	e1bffe15 	stw	r6,-8(fp)
 4008494:	e1ffff15 	stw	r7,-4(fp)
 4008498:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
 400849c:	e0bffd0b 	ldhu	r2,-12(fp)
 40084a0:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
 40084a4:	e0bffe17 	ldw	r2,-8(fp)
 40084a8:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
 40084ac:	e0bffa0b 	ldhu	r2,-24(fp)
 40084b0:	10bfffcc 	andi	r2,r2,65535
 40084b4:	10000a26 	beq	r2,zero,40084e0 <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
 40084b8:	e0bffb04 	addi	r2,fp,-20
 40084bc:	e1bffa04 	addi	r6,fp,-24
 40084c0:	100b883a 	mov	r5,r2
 40084c4:	e13ffc17 	ldw	r4,-16(fp)
 40084c8:	40084f40 	call	40084f4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
 40084cc:	1080005c 	xori	r2,r2,1
 40084d0:	10803fcc 	andi	r2,r2,255
 40084d4:	1000011e 	bne	r2,zero,40084dc <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
 40084d8:	003ff406 	br	40084ac <__alt_mem_onchip_memory2_0+0xfc00722c>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
 40084dc:	0001883a 	nop
}
 40084e0:	e037883a 	mov	sp,fp
 40084e4:	dfc00117 	ldw	ra,4(sp)
 40084e8:	df000017 	ldw	fp,0(sp)
 40084ec:	dec00204 	addi	sp,sp,8
 40084f0:	f800283a 	ret

040084f4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 40084f4:	defff604 	addi	sp,sp,-40
 40084f8:	dfc00915 	stw	ra,36(sp)
 40084fc:	df000815 	stw	fp,32(sp)
 4008500:	df000804 	addi	fp,sp,32
 4008504:	e13ffc15 	stw	r4,-16(fp)
 4008508:	e17ffd15 	stw	r5,-12(fp)
 400850c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 4008510:	e0bffc17 	ldw	r2,-16(fp)
 4008514:	10800804 	addi	r2,r2,32
 4008518:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 400851c:	e0bffc17 	ldw	r2,-16(fp)
 4008520:	10800804 	addi	r2,r2,32
 4008524:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
 4008528:	e0bffc17 	ldw	r2,-16(fp)
 400852c:	10800c03 	ldbu	r2,48(r2)
 4008530:	10803fcc 	andi	r2,r2,255
 4008534:	10c00168 	cmpgeui	r3,r2,5
 4008538:	1801411e 	bne	r3,zero,4008a40 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
 400853c:	100690ba 	slli	r3,r2,2
 4008540:	00810074 	movhi	r2,1025
 4008544:	10a15504 	addi	r2,r2,-31404
 4008548:	1885883a 	add	r2,r3,r2
 400854c:	10800017 	ldw	r2,0(r2)
 4008550:	1000683a 	jmp	r2
 4008554:	04008568 	cmpgeui	r16,zero,533
 4008558:	0400859c 	xori	r16,zero,534
 400855c:	04008624 	muli	r16,zero,536
 4008560:	040086b8 	rdprs	r16,zero,538
 4008564:	04008724 	muli	r16,zero,540
                case 0:
                        theBuffer.valueSize = 2;
 4008568:	e0bffc17 	ldw	r2,-16(fp)
 400856c:	00c00084 	movi	r3,2
 4008570:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 4008574:	e0bffc17 	ldw	r2,-16(fp)
 4008578:	10c00404 	addi	r3,r2,16
 400857c:	e0bffc17 	ldw	r2,-16(fp)
 4008580:	10800204 	addi	r2,r2,8
 4008584:	100b883a 	mov	r5,r2
 4008588:	1809883a 	mov	r4,r3
 400858c:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 4008590:	e0bffc17 	ldw	r2,-16(fp)
 4008594:	00c00044 	movi	r3,1
 4008598:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 400859c:	e0bffc17 	ldw	r2,-16(fp)
 40085a0:	10800404 	addi	r2,r2,16
 40085a4:	e1bffe17 	ldw	r6,-8(fp)
 40085a8:	e17ffd17 	ldw	r5,-12(fp)
 40085ac:	1009883a 	mov	r4,r2
 40085b0:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 40085b4:	1080005c 	xori	r2,r2,1
 40085b8:	10803fcc 	andi	r2,r2,255
 40085bc:	10000226 	beq	r2,zero,40085c8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
 40085c0:	0005883a 	mov	r2,zero
 40085c4:	00011f06 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 40085c8:	e0bffc17 	ldw	r2,-16(fp)
 40085cc:	10c00217 	ldw	r3,8(r2)
 40085d0:	1806d23a 	srli	r3,r3,8
 40085d4:	10800317 	ldw	r2,12(r2)
 40085d8:	10803fcc 	andi	r2,r2,255
 40085dc:	1004963a 	slli	r2,r2,24
 40085e0:	10c4b03a 	or	r2,r2,r3
 40085e4:	10c00003 	ldbu	r3,0(r2)
 40085e8:	e0bffc17 	ldw	r2,-16(fp)
 40085ec:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 40085f0:	e0bffc17 	ldw	r2,-16(fp)
 40085f4:	10c00217 	ldw	r3,8(r2)
 40085f8:	1806d23a 	srli	r3,r3,8
 40085fc:	10800317 	ldw	r2,12(r2)
 4008600:	10803fcc 	andi	r2,r2,255
 4008604:	1004963a 	slli	r2,r2,24
 4008608:	10c4b03a 	or	r2,r2,r3
 400860c:	10c00043 	ldbu	r3,1(r2)
 4008610:	e0bffc17 	ldw	r2,-16(fp)
 4008614:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
 4008618:	e0bffc17 	ldw	r2,-16(fp)
 400861c:	00c00084 	movi	r3,2
 4008620:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 4008624:	e0bffc17 	ldw	r2,-16(fp)
 4008628:	10800804 	addi	r2,r2,32
 400862c:	10c00084 	addi	r3,r2,2
 4008630:	e0bffc17 	ldw	r2,-16(fp)
 4008634:	19803fcc 	andi	r6,r3,255
 4008638:	11000243 	ldbu	r4,9(r2)
 400863c:	2008703a 	and	r4,r4,zero
 4008640:	200b883a 	mov	r5,r4
 4008644:	3009883a 	mov	r4,r6
 4008648:	2908b03a 	or	r4,r5,r4
 400864c:	11000245 	stb	r4,9(r2)
 4008650:	1808d23a 	srli	r4,r3,8
 4008654:	21803fcc 	andi	r6,r4,255
 4008658:	11000283 	ldbu	r4,10(r2)
 400865c:	2008703a 	and	r4,r4,zero
 4008660:	200b883a 	mov	r5,r4
 4008664:	3009883a 	mov	r4,r6
 4008668:	2908b03a 	or	r4,r5,r4
 400866c:	11000285 	stb	r4,10(r2)
 4008670:	1808d43a 	srli	r4,r3,16
 4008674:	21803fcc 	andi	r6,r4,255
 4008678:	110002c3 	ldbu	r4,11(r2)
 400867c:	2008703a 	and	r4,r4,zero
 4008680:	200b883a 	mov	r5,r4
 4008684:	3009883a 	mov	r4,r6
 4008688:	2908b03a 	or	r4,r5,r4
 400868c:	110002c5 	stb	r4,11(r2)
 4008690:	180ad63a 	srli	r5,r3,24
 4008694:	10c00303 	ldbu	r3,12(r2)
 4008698:	1806703a 	and	r3,r3,zero
 400869c:	1809883a 	mov	r4,r3
 40086a0:	2807883a 	mov	r3,r5
 40086a4:	20c6b03a 	or	r3,r4,r3
 40086a8:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
 40086ac:	e0bffc17 	ldw	r2,-16(fp)
 40086b0:	00c000c4 	movi	r3,3
 40086b4:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
 40086b8:	e0bffc17 	ldw	r2,-16(fp)
 40086bc:	10800c83 	ldbu	r2,50(r2)
 40086c0:	10803fcc 	andi	r2,r2,255
 40086c4:	10c00120 	cmpeqi	r3,r2,4
 40086c8:	1800021e 	bne	r3,zero,40086d4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
 40086cc:	10800148 	cmpgei	r2,r2,5
 40086d0:	00000306 	br	40086e0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 40086d4:	e0bffc17 	ldw	r2,-16(fp)
 40086d8:	10000d45 	stb	zero,53(r2)
                                        break;
 40086dc:	00000106 	br	40086e4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
 40086e0:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
 40086e4:	e0bffc17 	ldw	r2,-16(fp)
 40086e8:	10800c43 	ldbu	r2,49(r2)
 40086ec:	10bfff84 	addi	r2,r2,-2
 40086f0:	1007883a 	mov	r3,r2
 40086f4:	e0bffc17 	ldw	r2,-16(fp)
 40086f8:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 40086fc:	e0bffc17 	ldw	r2,-16(fp)
 4008700:	10c00404 	addi	r3,r2,16
 4008704:	e0bffc17 	ldw	r2,-16(fp)
 4008708:	10800204 	addi	r2,r2,8
 400870c:	100b883a 	mov	r5,r2
 4008710:	1809883a 	mov	r4,r3
 4008714:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 4008718:	e0bffc17 	ldw	r2,-16(fp)
 400871c:	00c00104 	movi	r3,4
 4008720:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
 4008724:	e0bffc17 	ldw	r2,-16(fp)
 4008728:	10800c83 	ldbu	r2,50(r2)
 400872c:	10803fcc 	andi	r2,r2,255
 4008730:	10c00120 	cmpeqi	r3,r2,4
 4008734:	1800141e 	bne	r3,zero,4008788 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
 4008738:	10c00160 	cmpeqi	r3,r2,5
 400873c:	18005a1e 	bne	r3,zero,40088a8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
 4008740:	108000a0 	cmpeqi	r2,r2,2
 4008744:	10008526 	beq	r2,zero,400895c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 4008748:	e0bffc17 	ldw	r2,-16(fp)
 400874c:	10800404 	addi	r2,r2,16
 4008750:	e1bffe17 	ldw	r6,-8(fp)
 4008754:	e17ffd17 	ldw	r5,-12(fp)
 4008758:	1009883a 	mov	r4,r2
 400875c:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4008760:	1080005c 	xori	r2,r2,1
 4008764:	10803fcc 	andi	r2,r2,255
 4008768:	10000226 	beq	r2,zero,4008774 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
 400876c:	0005883a 	mov	r2,zero
 4008770:	0000b406 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
 4008774:	e0bffa17 	ldw	r2,-24(fp)
 4008778:	10c00143 	ldbu	r3,5(r2)
 400877c:	e0bffc17 	ldw	r2,-16(fp)
 4008780:	10c00d85 	stb	r3,54(r2)
                                        break;
 4008784:	00008b06 	br	40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 4008788:	e0bffc17 	ldw	r2,-16(fp)
 400878c:	10800404 	addi	r2,r2,16
 4008790:	e1bffe17 	ldw	r6,-8(fp)
 4008794:	e17ffd17 	ldw	r5,-12(fp)
 4008798:	1009883a 	mov	r4,r2
 400879c:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 40087a0:	1080005c 	xori	r2,r2,1
 40087a4:	10803fcc 	andi	r2,r2,255
 40087a8:	10000226 	beq	r2,zero,40087b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
 40087ac:	0005883a 	mov	r2,zero
 40087b0:	0000a406 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
 40087b4:	e0bffb17 	ldw	r2,-20(fp)
 40087b8:	10800083 	ldbu	r2,2(r2)
 40087bc:	10803fcc 	andi	r2,r2,255
 40087c0:	01402004 	movi	r5,128
 40087c4:	1009883a 	mov	r4,r2
 40087c8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
 40087cc:	e0bffb17 	ldw	r2,-20(fp)
 40087d0:	108000c3 	ldbu	r2,3(r2)
 40087d4:	10803fcc 	andi	r2,r2,255
 40087d8:	01402004 	movi	r5,128
 40087dc:	1009883a 	mov	r4,r2
 40087e0:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
 40087e4:	e0bffb17 	ldw	r2,-20(fp)
 40087e8:	10800103 	ldbu	r2,4(r2)
 40087ec:	10803fcc 	andi	r2,r2,255
 40087f0:	01402004 	movi	r5,128
 40087f4:	1009883a 	mov	r4,r2
 40087f8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
 40087fc:	e0bffb17 	ldw	r2,-20(fp)
 4008800:	10800143 	ldbu	r2,5(r2)
 4008804:	10803fcc 	andi	r2,r2,255
 4008808:	01402004 	movi	r5,128
 400880c:	1009883a 	mov	r4,r2
 4008810:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
 4008814:	e0bffb17 	ldw	r2,-20(fp)
 4008818:	10800183 	ldbu	r2,6(r2)
 400881c:	10803fcc 	andi	r2,r2,255
 4008820:	01402004 	movi	r5,128
 4008824:	1009883a 	mov	r4,r2
 4008828:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
 400882c:	e0bffb17 	ldw	r2,-20(fp)
 4008830:	108001c3 	ldbu	r2,7(r2)
 4008834:	10803fcc 	andi	r2,r2,255
 4008838:	01402004 	movi	r5,128
 400883c:	1009883a 	mov	r4,r2
 4008840:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
 4008844:	e0bffc17 	ldw	r2,-16(fp)
 4008848:	10800d03 	ldbu	r2,52(r2)
 400884c:	10803fcc 	andi	r2,r2,255
 4008850:	10000a26 	beq	r2,zero,400887c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
 4008854:	e0bffb17 	ldw	r2,-20(fp)
 4008858:	10800143 	ldbu	r2,5(r2)
 400885c:	10803fcc 	andi	r2,r2,255
 4008860:	10800058 	cmpnei	r2,r2,1
 4008864:	10004e1e 	bne	r2,zero,40089a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
 4008868:	e0bffb17 	ldw	r2,-20(fp)
 400886c:	10800183 	ldbu	r2,6(r2)
 4008870:	10803fcc 	andi	r2,r2,255
 4008874:	108000d8 	cmpnei	r2,r2,3
 4008878:	1000491e 	bne	r2,zero,40089a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
 400887c:	e0bffc17 	ldw	r2,-16(fp)
 4008880:	00c00044 	movi	r3,1
 4008884:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
 4008888:	e0bffc17 	ldw	r2,-16(fp)
 400888c:	10800cc3 	ldbu	r2,51(r2)
 4008890:	10803fcc 	andi	r2,r2,255
 4008894:	108000a8 	cmpgeui	r2,r2,2
 4008898:	1000431e 	bne	r2,zero,40089a8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
 400889c:	e0bffc17 	ldw	r2,-16(fp)
 40088a0:	10000cc5 	stb	zero,51(r2)
                                        break;
 40088a4:	00004006 	br	40089a8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 40088a8:	e0bffc17 	ldw	r2,-16(fp)
 40088ac:	10800404 	addi	r2,r2,16
 40088b0:	e1bffe17 	ldw	r6,-8(fp)
 40088b4:	e17ffd17 	ldw	r5,-12(fp)
 40088b8:	1009883a 	mov	r4,r2
 40088bc:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 40088c0:	1080005c 	xori	r2,r2,1
 40088c4:	10803fcc 	andi	r2,r2,255
 40088c8:	10000226 	beq	r2,zero,40088d4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
 40088cc:	0005883a 	mov	r2,zero
 40088d0:	00005c06 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
 40088d4:	e0bffc17 	ldw	r2,-16(fp)
 40088d8:	10800d43 	ldbu	r2,53(r2)
 40088dc:	10803fcc 	andi	r2,r2,255
 40088e0:	10003326 	beq	r2,zero,40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
 40088e4:	e0bffc17 	ldw	r2,-16(fp)
 40088e8:	10800cc3 	ldbu	r2,51(r2)
 40088ec:	10803fcc 	andi	r2,r2,255
 40088f0:	108000a8 	cmpgeui	r2,r2,2
 40088f4:	10002e1e 	bne	r2,zero,40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) ) 
 40088f8:	e0bffc17 	ldw	r2,-16(fp)
 40088fc:	10800117 	ldw	r2,4(r2)
 4008900:	10800017 	ldw	r2,0(r2)
 4008904:	10800017 	ldw	r2,0(r2)
 4008908:	e0fffc17 	ldw	r3,-16(fp)
 400890c:	19000117 	ldw	r4,4(r3)
 4008910:	e0fffc17 	ldw	r3,-16(fp)
 4008914:	18c00d83 	ldbu	r3,54(r3)
 4008918:	19403fcc 	andi	r5,r3,255
 400891c:	e0fffc17 	ldw	r3,-16(fp)
 4008920:	18c00804 	addi	r3,r3,32
 4008924:	d8c00115 	stw	r3,4(sp)
 4008928:	d8000015 	stw	zero,0(sp)
 400892c:	000f883a 	mov	r7,zero
 4008930:	000d883a 	mov	r6,zero
 4008934:	103ee83a 	callr	r2
 4008938:	10803fcc 	andi	r2,r2,255
 400893c:	10001c26 	beq	r2,zero,40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
 4008940:	e0bffc17 	ldw	r2,-16(fp)
 4008944:	10800cc3 	ldbu	r2,51(r2)
 4008948:	10800044 	addi	r2,r2,1
 400894c:	1007883a 	mov	r3,r2
 4008950:	e0bffc17 	ldw	r2,-16(fp)
 4008954:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
 4008958:	00001506 	br	40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 400895c:	e0bffc17 	ldw	r2,-16(fp)
 4008960:	10c00604 	addi	r3,r2,24
 4008964:	e0bffc17 	ldw	r2,-16(fp)
 4008968:	10800c43 	ldbu	r2,49(r2)
 400896c:	10803fcc 	andi	r2,r2,255
 4008970:	10bfff84 	addi	r2,r2,-2
 4008974:	10bfffcc 	andi	r2,r2,65535
 4008978:	100f883a 	mov	r7,r2
 400897c:	e1bffe17 	ldw	r6,-8(fp)
 4008980:	e17ffd17 	ldw	r5,-12(fp)
 4008984:	1809883a 	mov	r4,r3
 4008988:	40050f00 	call	40050f0 <_ZN11ByteSkipper4SkipEPPhPtt>
 400898c:	1080005c 	xori	r2,r2,1
 4008990:	10803fcc 	andi	r2,r2,255
 4008994:	10000726 	beq	r2,zero,40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
 4008998:	0005883a 	mov	r2,zero
 400899c:	00002906 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
 40089a0:	0001883a 	nop
 40089a4:	00000306 	br	40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
 40089a8:	0001883a 	nop
 40089ac:	00000106 	br	40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) ) 
                                                        nEPs++;
                                        }
                                        break;
 40089b0:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
 40089b4:	e0bffc17 	ldw	r2,-16(fp)
 40089b8:	10c00804 	addi	r3,r2,32
 40089bc:	e0bffc17 	ldw	r2,-16(fp)
 40089c0:	19803fcc 	andi	r6,r3,255
 40089c4:	11000243 	ldbu	r4,9(r2)
 40089c8:	2008703a 	and	r4,r4,zero
 40089cc:	200b883a 	mov	r5,r4
 40089d0:	3009883a 	mov	r4,r6
 40089d4:	2908b03a 	or	r4,r5,r4
 40089d8:	11000245 	stb	r4,9(r2)
 40089dc:	1808d23a 	srli	r4,r3,8
 40089e0:	21803fcc 	andi	r6,r4,255
 40089e4:	11000283 	ldbu	r4,10(r2)
 40089e8:	2008703a 	and	r4,r4,zero
 40089ec:	200b883a 	mov	r5,r4
 40089f0:	3009883a 	mov	r4,r6
 40089f4:	2908b03a 	or	r4,r5,r4
 40089f8:	11000285 	stb	r4,10(r2)
 40089fc:	1808d43a 	srli	r4,r3,16
 4008a00:	21803fcc 	andi	r6,r4,255
 4008a04:	110002c3 	ldbu	r4,11(r2)
 4008a08:	2008703a 	and	r4,r4,zero
 4008a0c:	200b883a 	mov	r5,r4
 4008a10:	3009883a 	mov	r4,r6
 4008a14:	2908b03a 	or	r4,r5,r4
 4008a18:	110002c5 	stb	r4,11(r2)
 4008a1c:	180ad63a 	srli	r5,r3,24
 4008a20:	10c00303 	ldbu	r3,12(r2)
 4008a24:	1806703a 	and	r3,r3,zero
 4008a28:	1809883a 	mov	r4,r3
 4008a2c:	2807883a 	mov	r3,r5
 4008a30:	20c6b03a 	or	r3,r4,r3
 4008a34:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
 4008a38:	e0bffc17 	ldw	r2,-16(fp)
 4008a3c:	10000c05 	stb	zero,48(r2)
        }
        return true;
 4008a40:	00800044 	movi	r2,1
}
 4008a44:	e037883a 	mov	sp,fp
 4008a48:	dfc00117 	ldw	ra,4(sp)
 4008a4c:	df000017 	ldw	fp,0(sp)
 4008a50:	dec00204 	addi	sp,sp,8
 4008a54:	f800283a 	ret

04008a58 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
 4008a58:	defff904 	addi	sp,sp,-28
 4008a5c:	df000615 	stw	fp,24(sp)
 4008a60:	df000604 	addi	fp,sp,24
 4008a64:	e13ffb15 	stw	r4,-20(fp)
 4008a68:	3009883a 	mov	r4,r6
 4008a6c:	3807883a 	mov	r3,r7
 4008a70:	e0800117 	ldw	r2,4(fp)
 4008a74:	e17ffc05 	stb	r5,-16(fp)
 4008a78:	e13ffd05 	stb	r4,-12(fp)
 4008a7c:	e0fffe05 	stb	r3,-8(fp)
 4008a80:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
 4008a84:	e0800217 	ldw	r2,8(fp)
 4008a88:	10c000c3 	ldbu	r3,3(r2)
 4008a8c:	e0bffb17 	ldw	r2,-20(fp)
 4008a90:	10800483 	ldbu	r2,18(r2)
 4008a94:	1884703a 	and	r2,r3,r2
 4008a98:	10803fcc 	andi	r2,r2,255
 4008a9c:	10800098 	cmpnei	r2,r2,2
 4008aa0:	10001f1e 	bne	r2,zero,4008b20 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
 4008aa4:	e0800217 	ldw	r2,8(fp)
 4008aa8:	10800083 	ldbu	r2,2(r2)
 4008aac:	10803fcc 	andi	r2,r2,255
 4008ab0:	1080201c 	xori	r2,r2,128
 4008ab4:	10bfe004 	addi	r2,r2,-128
 4008ab8:	1000020e 	bge	r2,zero,4008ac4 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
 4008abc:	00800044 	movi	r2,1
 4008ac0:	00000106 	br	4008ac8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
 4008ac4:	00800084 	movi	r2,2
 4008ac8:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        } 

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 4008acc:	e0fffa03 	ldbu	r3,-24(fp)
 4008ad0:	e0800217 	ldw	r2,8(fp)
 4008ad4:	10800083 	ldbu	r2,2(r2)
 4008ad8:	108003cc 	andi	r2,r2,15
 4008adc:	100b883a 	mov	r5,r2
 4008ae0:	e13ffb17 	ldw	r4,-20(fp)
 4008ae4:	1805883a 	mov	r2,r3
 4008ae8:	1085883a 	add	r2,r2,r2
 4008aec:	10c5883a 	add	r2,r2,r3
 4008af0:	2085883a 	add	r2,r4,r2
 4008af4:	108004c4 	addi	r2,r2,19
 4008af8:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
 4008afc:	e0800217 	ldw	r2,8(fp)
 4008b00:	10c00103 	ldbu	r3,4(r2)
 4008b04:	10800143 	ldbu	r2,5(r2)
 4008b08:	1004923a 	slli	r2,r2,8
 4008b0c:	10c4b03a 	or	r2,r2,r3
 4008b10:	10bfffcc 	andi	r2,r2,65535
 4008b14:	10801070 	cmpltui	r2,r2,65
 4008b18:	10000d1e 	bne	r2,zero,4008b50 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
 4008b1c:	00000206 	br	4008b28 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
 4008b20:	0005883a 	mov	r2,zero
 4008b24:	00001906 	br	4008b8c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
 4008b28:	e0fffa03 	ldbu	r3,-24(fp)
 4008b2c:	e13ffb17 	ldw	r4,-20(fp)
 4008b30:	1805883a 	mov	r2,r3
 4008b34:	1085883a 	add	r2,r2,r2
 4008b38:	10c5883a 	add	r2,r2,r3
 4008b3c:	2085883a 	add	r2,r4,r2
 4008b40:	10800504 	addi	r2,r2,20
 4008b44:	00c01004 	movi	r3,64
 4008b48:	10c00005 	stb	r3,0(r2)
 4008b4c:	00000e06 	br	4008b88 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 4008b50:	e0fffa03 	ldbu	r3,-24(fp)
 4008b54:	e0800217 	ldw	r2,8(fp)
 4008b58:	11000103 	ldbu	r4,4(r2)
 4008b5c:	10800143 	ldbu	r2,5(r2)
 4008b60:	1004923a 	slli	r2,r2,8
 4008b64:	1104b03a 	or	r2,r2,r4
 4008b68:	100b883a 	mov	r5,r2
 4008b6c:	e13ffb17 	ldw	r4,-20(fp)
 4008b70:	1805883a 	mov	r2,r3
 4008b74:	1085883a 	add	r2,r2,r2
 4008b78:	10c5883a 	add	r2,r2,r3
 4008b7c:	2085883a 	add	r2,r4,r2
 4008b80:	10800504 	addi	r2,r2,20
 4008b84:	11400005 	stb	r5,0(r2)
        }

        return true;
 4008b88:	00800044 	movi	r2,1
}
 4008b8c:	e037883a 	mov	sp,fp
 4008b90:	df000017 	ldw	fp,0(sp)
 4008b94:	dec00104 	addi	sp,sp,4
 4008b98:	f800283a 	ret

04008b9c <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 4008b9c:	213fff04 	addi	r4,r4,-4
 4008ba0:	4008a581 	jmpi	4008a58 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

04008ba4 <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 4008ba4:	defffa04 	addi	sp,sp,-24
 4008ba8:	df000515 	stw	fp,20(sp)
 4008bac:	df000504 	addi	fp,sp,20
 4008bb0:	e13ffb15 	stw	r4,-20(fp)
 4008bb4:	3009883a 	mov	r4,r6
 4008bb8:	3807883a 	mov	r3,r7
 4008bbc:	e0800117 	ldw	r2,4(fp)
 4008bc0:	e17ffc05 	stb	r5,-16(fp)
 4008bc4:	e13ffd05 	stb	r4,-12(fp)
 4008bc8:	e0fffe05 	stb	r3,-8(fp)
 4008bcc:	e0bfff05 	stb	r2,-4(fp)
                return true;
 4008bd0:	00800044 	movi	r2,1
        };
 4008bd4:	e037883a 	mov	sp,fp
 4008bd8:	df000017 	ldw	fp,0(sp)
 4008bdc:	dec00104 	addi	sp,sp,4
 4008be0:	f800283a 	ret

04008be4 <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
 4008be4:	defffe04 	addi	sp,sp,-8
 4008be8:	df000115 	stw	fp,4(sp)
 4008bec:	df000104 	addi	fp,sp,4
 4008bf0:	e13fff15 	stw	r4,-4(fp)
 4008bf4:	e0bfff17 	ldw	r2,-4(fp)
 4008bf8:	10800d83 	ldbu	r2,54(r2)
 4008bfc:	e037883a 	mov	sp,fp
 4008c00:	df000017 	ldw	fp,0(sp)
 4008c04:	dec00104 	addi	sp,sp,4
 4008c08:	f800283a 	ret

04008c0c <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
 4008c0c:	defffe04 	addi	sp,sp,-8
 4008c10:	df000115 	stw	fp,4(sp)
 4008c14:	df000104 	addi	fp,sp,4
 4008c18:	e13fff15 	stw	r4,-4(fp)
 4008c1c:	e0bfff17 	ldw	r2,-4(fp)
 4008c20:	10800cc3 	ldbu	r2,51(r2)
 4008c24:	e037883a 	mov	sp,fp
 4008c28:	df000017 	ldw	fp,0(sp)
 4008c2c:	dec00104 	addi	sp,sp,4
 4008c30:	f800283a 	ret

04008c34 <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
 4008c34:	defffd04 	addi	sp,sp,-12
 4008c38:	df000215 	stw	fp,8(sp)
 4008c3c:	df000204 	addi	fp,sp,8
 4008c40:	e13ffe15 	stw	r4,-8(fp)
 4008c44:	2805883a 	mov	r2,r5
 4008c48:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
 4008c4c:	e0bfff03 	ldbu	r2,-4(fp)
 4008c50:	10803c28 	cmpgeui	r2,r2,240
 4008c54:	1000031e 	bne	r2,zero,4008c64 <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
 4008c58:	e0bfff03 	ldbu	r2,-4(fp)
 4008c5c:	1004d13a 	srli	r2,r2,4
 4008c60:	00000606 	br	4008c7c <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
 4008c64:	e0bfff03 	ldbu	r2,-4(fp)
 4008c68:	10c003cc 	andi	r3,r2,15
 4008c6c:	008100b4 	movhi	r2,1026
 4008c70:	1089f184 	addi	r2,r2,10182
 4008c74:	1885883a 	add	r2,r3,r2
 4008c78:	10800003 	ldbu	r2,0(r2)
        };
 4008c7c:	e037883a 	mov	sp,fp
 4008c80:	df000017 	ldw	fp,0(sp)
 4008c84:	dec00104 	addi	sp,sp,4
 4008c88:	f800283a 	ret

04008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
 4008c8c:	defffd04 	addi	sp,sp,-12
 4008c90:	df000215 	stw	fp,8(sp)
 4008c94:	df000204 	addi	fp,sp,8
 4008c98:	e13ffe15 	stw	r4,-8(fp)
 4008c9c:	2805883a 	mov	r2,r5
 4008ca0:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
 4008ca4:	e0ffff03 	ldbu	r3,-4(fp)
 4008ca8:	008100b4 	movhi	r2,1026
 4008cac:	1089ed84 	addi	r2,r2,10166
 4008cb0:	1885883a 	add	r2,r3,r2
 4008cb4:	10800003 	ldbu	r2,0(r2)
        };
 4008cb8:	e037883a 	mov	sp,fp
 4008cbc:	df000017 	ldw	fp,0(sp)
 4008cc0:	dec00104 	addi	sp,sp,4
 4008cc4:	f800283a 	ret

04008cc8 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
 4008cc8:	defffe04 	addi	sp,sp,-8
 4008ccc:	df000115 	stw	fp,4(sp)
 4008cd0:	df000104 	addi	fp,sp,4
 4008cd4:	e13fff15 	stw	r4,-4(fp)
 4008cd8:	e0bfff17 	ldw	r2,-4(fp)
 4008cdc:	10800303 	ldbu	r2,12(r2)
 4008ce0:	e037883a 	mov	sp,fp
 4008ce4:	df000017 	ldw	fp,0(sp)
 4008ce8:	dec00104 	addi	sp,sp,4
 4008cec:	f800283a 	ret

04008cf0 <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
 4008cf0:	defffe04 	addi	sp,sp,-8
 4008cf4:	df000115 	stw	fp,4(sp)
 4008cf8:	df000104 	addi	fp,sp,4
 4008cfc:	e13fff15 	stw	r4,-4(fp)
 4008d00:	008100b4 	movhi	r2,1026
 4008d04:	108a0a04 	addi	r2,r2,10280
 4008d08:	e0ffff17 	ldw	r3,-4(fp)
 4008d0c:	18800015 	stw	r2,0(r3)
 4008d10:	0001883a 	nop
 4008d14:	e037883a 	mov	sp,fp
 4008d18:	df000017 	ldw	fp,0(sp)
 4008d1c:	dec00104 	addi	sp,sp,4
 4008d20:	f800283a 	ret

04008d24 <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 4008d24:	defffd04 	addi	sp,sp,-12
 4008d28:	df000215 	stw	fp,8(sp)
 4008d2c:	df000204 	addi	fp,sp,8
 4008d30:	2005883a 	mov	r2,r4
 4008d34:	e17fff15 	stw	r5,-4(fp)
 4008d38:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 4008d3c:	0001883a 	nop
 4008d40:	e037883a 	mov	sp,fp
 4008d44:	df000017 	ldw	fp,0(sp)
 4008d48:	dec00104 	addi	sp,sp,4
 4008d4c:	f800283a 	ret

04008d50 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
 4008d50:	deffe204 	addi	sp,sp,-120
 4008d54:	dfc01d15 	stw	ra,116(sp)
 4008d58:	df001c15 	stw	fp,112(sp)
 4008d5c:	df001c04 	addi	fp,sp,112
 4008d60:	e13ffd15 	stw	r4,-12(fp)
 4008d64:	2805883a 	mov	r2,r5
 4008d68:	e1bfff15 	stw	r6,-4(fp)
 4008d6c:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
 4008d70:	00801004 	movi	r2,64
 4008d74:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
 4008d78:	e0bffd17 	ldw	r2,-12(fp)
 4008d7c:	11000217 	ldw	r4,8(r2)
 4008d80:	e0bffd17 	ldw	r2,-12(fp)
 4008d84:	10800303 	ldbu	r2,12(r2)
 4008d88:	11403fcc 	andi	r5,r2,255
 4008d8c:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
 4008d90:	e0ffff17 	ldw	r3,-4(fp)
 4008d94:	d8c00715 	stw	r3,28(sp)
 4008d98:	e0ffec84 	addi	r3,fp,-78
 4008d9c:	d8c00615 	stw	r3,24(sp)
 4008da0:	00c01004 	movi	r3,64
 4008da4:	d8c00515 	stw	r3,20(sp)
 4008da8:	00c02004 	movi	r3,128
 4008dac:	d8c00415 	stw	r3,16(sp)
 4008db0:	d8800315 	stw	r2,12(sp)
 4008db4:	00800884 	movi	r2,34
 4008db8:	d8800215 	stw	r2,8(sp)
 4008dbc:	d8000115 	stw	zero,4(sp)
 4008dc0:	00800184 	movi	r2,6
 4008dc4:	d8800015 	stw	r2,0(sp)
 4008dc8:	01c02044 	movi	r7,129
 4008dcc:	000d883a 	mov	r6,zero
 4008dd0:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 4008dd4:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
 4008dd8:	e0bfec43 	ldbu	r2,-79(fp)
}
 4008ddc:	e037883a 	mov	sp,fp
 4008de0:	dfc00117 	ldw	ra,4(sp)
 4008de4:	df000017 	ldw	fp,0(sp)
 4008de8:	dec00204 	addi	sp,sp,8
 4008dec:	f800283a 	ret

04008df0 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
 4008df0:	defff004 	addi	sp,sp,-64
 4008df4:	dfc00f15 	stw	ra,60(sp)
 4008df8:	df000e15 	stw	fp,56(sp)
 4008dfc:	df000e04 	addi	fp,sp,56
 4008e00:	e13ffa15 	stw	r4,-24(fp)
 4008e04:	2811883a 	mov	r8,r5
 4008e08:	300b883a 	mov	r5,r6
 4008e0c:	3809883a 	mov	r4,r7
 4008e10:	e0c00217 	ldw	r3,8(fp)
 4008e14:	e0800317 	ldw	r2,12(fp)
 4008e18:	e23ffb05 	stb	r8,-20(fp)
 4008e1c:	e17ffc05 	stb	r5,-16(fp)
 4008e20:	e13ffd05 	stb	r4,-12(fp)
 4008e24:	e0fffe05 	stb	r3,-8(fp)
 4008e28:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
 4008e2c:	e0bffa17 	ldw	r2,-24(fp)
 4008e30:	12000217 	ldw	r8,8(r2)
 4008e34:	e0bffa17 	ldw	r2,-24(fp)
 4008e38:	10800303 	ldbu	r2,12(r2)
 4008e3c:	12403fcc 	andi	r9,r2,255
 4008e40:	e2bffb03 	ldbu	r10,-20(fp)
 4008e44:	e0bffe03 	ldbu	r2,-8(fp)
 4008e48:	e0fffd03 	ldbu	r3,-12(fp)
 4008e4c:	e13ffc03 	ldbu	r4,-16(fp)
 4008e50:	e17fff0b 	ldhu	r5,-4(fp)
 4008e54:	e1bfff0b 	ldhu	r6,-4(fp)
 4008e58:	d8000715 	stw	zero,28(sp)
 4008e5c:	e1c00417 	ldw	r7,16(fp)
 4008e60:	d9c00615 	stw	r7,24(sp)
 4008e64:	d9800515 	stw	r6,20(sp)
 4008e68:	d9400415 	stw	r5,16(sp)
 4008e6c:	d9000315 	stw	r4,12(sp)
 4008e70:	d8c00215 	stw	r3,8(sp)
 4008e74:	d8800115 	stw	r2,4(sp)
 4008e78:	00800244 	movi	r2,9
 4008e7c:	d8800015 	stw	r2,0(sp)
 4008e80:	01c00844 	movi	r7,33
 4008e84:	500d883a 	mov	r6,r10
 4008e88:	480b883a 	mov	r5,r9
 4008e8c:	4009883a 	mov	r4,r8
 4008e90:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4008e94:	e037883a 	mov	sp,fp
 4008e98:	dfc00117 	ldw	ra,4(sp)
 4008e9c:	df000017 	ldw	fp,0(sp)
 4008ea0:	dec00204 	addi	sp,sp,8
 4008ea4:	f800283a 	ret

04008ea8 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
 4008ea8:	defff004 	addi	sp,sp,-64
 4008eac:	dfc00f15 	stw	ra,60(sp)
 4008eb0:	df000e15 	stw	fp,56(sp)
 4008eb4:	df000e04 	addi	fp,sp,56
 4008eb8:	e13ffa15 	stw	r4,-24(fp)
 4008ebc:	2811883a 	mov	r8,r5
 4008ec0:	300b883a 	mov	r5,r6
 4008ec4:	3809883a 	mov	r4,r7
 4008ec8:	e0c00217 	ldw	r3,8(fp)
 4008ecc:	e0800317 	ldw	r2,12(fp)
 4008ed0:	e23ffb05 	stb	r8,-20(fp)
 4008ed4:	e17ffc05 	stb	r5,-16(fp)
 4008ed8:	e13ffd05 	stb	r4,-12(fp)
 4008edc:	e0fffe05 	stb	r3,-8(fp)
 4008ee0:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
 4008ee4:	e0bffa17 	ldw	r2,-24(fp)
 4008ee8:	12000217 	ldw	r8,8(r2)
 4008eec:	e0bffa17 	ldw	r2,-24(fp)
 4008ef0:	10800303 	ldbu	r2,12(r2)
 4008ef4:	12403fcc 	andi	r9,r2,255
 4008ef8:	e2bffb03 	ldbu	r10,-20(fp)
 4008efc:	e0bffe03 	ldbu	r2,-8(fp)
 4008f00:	e0fffd03 	ldbu	r3,-12(fp)
 4008f04:	e13ffc03 	ldbu	r4,-16(fp)
 4008f08:	e17fff0b 	ldhu	r5,-4(fp)
 4008f0c:	e1bfff0b 	ldhu	r6,-4(fp)
 4008f10:	d8000715 	stw	zero,28(sp)
 4008f14:	e1c00417 	ldw	r7,16(fp)
 4008f18:	d9c00615 	stw	r7,24(sp)
 4008f1c:	d9800515 	stw	r6,20(sp)
 4008f20:	d9400415 	stw	r5,16(sp)
 4008f24:	d9000315 	stw	r4,12(sp)
 4008f28:	d8c00215 	stw	r3,8(sp)
 4008f2c:	d8800115 	stw	r2,4(sp)
 4008f30:	00800044 	movi	r2,1
 4008f34:	d8800015 	stw	r2,0(sp)
 4008f38:	01c02844 	movi	r7,161
 4008f3c:	500d883a 	mov	r6,r10
 4008f40:	480b883a 	mov	r5,r9
 4008f44:	4009883a 	mov	r4,r8
 4008f48:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4008f4c:	e037883a 	mov	sp,fp
 4008f50:	dfc00117 	ldw	ra,4(sp)
 4008f54:	df000017 	ldw	fp,0(sp)
 4008f58:	dec00204 	addi	sp,sp,8
 4008f5c:	f800283a 	ret

04008f60 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
 4008f60:	defff204 	addi	sp,sp,-56
 4008f64:	dfc00d15 	stw	ra,52(sp)
 4008f68:	df000c15 	stw	fp,48(sp)
 4008f6c:	df000c04 	addi	fp,sp,48
 4008f70:	e13ffc15 	stw	r4,-16(fp)
 4008f74:	2807883a 	mov	r3,r5
 4008f78:	3005883a 	mov	r2,r6
 4008f7c:	e1ffff15 	stw	r7,-4(fp)
 4008f80:	e0fffd05 	stb	r3,-12(fp)
 4008f84:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
 4008f88:	e0bffc17 	ldw	r2,-16(fp)
 4008f8c:	12000217 	ldw	r8,8(r2)
 4008f90:	e0bffc17 	ldw	r2,-16(fp)
 4008f94:	10800303 	ldbu	r2,12(r2)
 4008f98:	11403fcc 	andi	r5,r2,255
 4008f9c:	e0bffe03 	ldbu	r2,-8(fp)
 4008fa0:	e0fffd03 	ldbu	r3,-12(fp)
 4008fa4:	d8000715 	stw	zero,28(sp)
 4008fa8:	e13fff17 	ldw	r4,-4(fp)
 4008fac:	d9000615 	stw	r4,24(sp)
 4008fb0:	01000044 	movi	r4,1
 4008fb4:	d9000515 	stw	r4,20(sp)
 4008fb8:	01000044 	movi	r4,1
 4008fbc:	d9000415 	stw	r4,16(sp)
 4008fc0:	d8c00315 	stw	r3,12(sp)
 4008fc4:	d8000215 	stw	zero,8(sp)
 4008fc8:	d8800115 	stw	r2,4(sp)
 4008fcc:	00800084 	movi	r2,2
 4008fd0:	d8800015 	stw	r2,0(sp)
 4008fd4:	01c02844 	movi	r7,161
 4008fd8:	000d883a 	mov	r6,zero
 4008fdc:	4009883a 	mov	r4,r8
 4008fe0:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4008fe4:	e037883a 	mov	sp,fp
 4008fe8:	dfc00117 	ldw	ra,4(sp)
 4008fec:	df000017 	ldw	fp,0(sp)
 4008ff0:	dec00204 	addi	sp,sp,8
 4008ff4:	f800283a 	ret

04008ff8 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
 4008ff8:	defff204 	addi	sp,sp,-56
 4008ffc:	dfc00d15 	stw	ra,52(sp)
 4009000:	df000c15 	stw	fp,48(sp)
 4009004:	df000c04 	addi	fp,sp,48
 4009008:	e13ffc15 	stw	r4,-16(fp)
 400900c:	2809883a 	mov	r4,r5
 4009010:	3007883a 	mov	r3,r6
 4009014:	3805883a 	mov	r2,r7
 4009018:	e13ffd05 	stb	r4,-12(fp)
 400901c:	e0fffe05 	stb	r3,-8(fp)
 4009020:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
 4009024:	e0bffc17 	ldw	r2,-16(fp)
 4009028:	12000217 	ldw	r8,8(r2)
 400902c:	e0bffc17 	ldw	r2,-16(fp)
 4009030:	10800303 	ldbu	r2,12(r2)
 4009034:	11403fcc 	andi	r5,r2,255
 4009038:	e0bffe03 	ldbu	r2,-8(fp)
 400903c:	e0ffff03 	ldbu	r3,-4(fp)
 4009040:	e13ffd03 	ldbu	r4,-12(fp)
 4009044:	d8000715 	stw	zero,28(sp)
 4009048:	d8000615 	stw	zero,24(sp)
 400904c:	d8000515 	stw	zero,20(sp)
 4009050:	d8000415 	stw	zero,16(sp)
 4009054:	d9000315 	stw	r4,12(sp)
 4009058:	d8c00215 	stw	r3,8(sp)
 400905c:	d8800115 	stw	r2,4(sp)
 4009060:	00800284 	movi	r2,10
 4009064:	d8800015 	stw	r2,0(sp)
 4009068:	01c00844 	movi	r7,33
 400906c:	000d883a 	mov	r6,zero
 4009070:	4009883a 	mov	r4,r8
 4009074:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4009078:	e037883a 	mov	sp,fp
 400907c:	dfc00117 	ldw	ra,4(sp)
 4009080:	df000017 	ldw	fp,0(sp)
 4009084:	dec00204 	addi	sp,sp,8
 4009088:	f800283a 	ret

0400908c <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
 400908c:	defff304 	addi	sp,sp,-52
 4009090:	dfc00c15 	stw	ra,48(sp)
 4009094:	df000b15 	stw	fp,44(sp)
 4009098:	df000b04 	addi	fp,sp,44
 400909c:	e13ffd15 	stw	r4,-12(fp)
 40090a0:	2807883a 	mov	r3,r5
 40090a4:	3005883a 	mov	r2,r6
 40090a8:	e0fffe05 	stb	r3,-8(fp)
 40090ac:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
 40090b0:	e0bffd17 	ldw	r2,-12(fp)
 40090b4:	11000217 	ldw	r4,8(r2)
 40090b8:	e0bffd17 	ldw	r2,-12(fp)
 40090bc:	10800303 	ldbu	r2,12(r2)
 40090c0:	11403fcc 	andi	r5,r2,255
 40090c4:	e0bfff03 	ldbu	r2,-4(fp)
 40090c8:	e0fffe03 	ldbu	r3,-8(fp)
 40090cc:	d8000715 	stw	zero,28(sp)
 40090d0:	d8000615 	stw	zero,24(sp)
 40090d4:	d8000515 	stw	zero,20(sp)
 40090d8:	d8000415 	stw	zero,16(sp)
 40090dc:	d8c00315 	stw	r3,12(sp)
 40090e0:	d8000215 	stw	zero,8(sp)
 40090e4:	d8800115 	stw	r2,4(sp)
 40090e8:	008002c4 	movi	r2,11
 40090ec:	d8800015 	stw	r2,0(sp)
 40090f0:	01c00844 	movi	r7,33
 40090f4:	000d883a 	mov	r6,zero
 40090f8:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 40090fc:	e037883a 	mov	sp,fp
 4009100:	dfc00117 	ldw	ra,4(sp)
 4009104:	df000017 	ldw	fp,0(sp)
 4009108:	dec00204 	addi	sp,sp,8
 400910c:	f800283a 	ret

04009110 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
 4009110:	defff304 	addi	sp,sp,-52
 4009114:	dfc00c15 	stw	ra,48(sp)
 4009118:	df000b15 	stw	fp,44(sp)
 400911c:	df000b04 	addi	fp,sp,44
 4009120:	e13ffd15 	stw	r4,-12(fp)
 4009124:	2805883a 	mov	r2,r5
 4009128:	e1bfff15 	stw	r6,-4(fp)
 400912c:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
 4009130:	e0bffd17 	ldw	r2,-12(fp)
 4009134:	11000217 	ldw	r4,8(r2)
 4009138:	e0bffd17 	ldw	r2,-12(fp)
 400913c:	10800303 	ldbu	r2,12(r2)
 4009140:	11403fcc 	andi	r5,r2,255
 4009144:	e0bffe03 	ldbu	r2,-8(fp)
 4009148:	d8000715 	stw	zero,28(sp)
 400914c:	e0ffff17 	ldw	r3,-4(fp)
 4009150:	d8c00615 	stw	r3,24(sp)
 4009154:	00c00044 	movi	r3,1
 4009158:	d8c00515 	stw	r3,20(sp)
 400915c:	00c00044 	movi	r3,1
 4009160:	d8c00415 	stw	r3,16(sp)
 4009164:	d8800315 	stw	r2,12(sp)
 4009168:	d8000215 	stw	zero,8(sp)
 400916c:	d8000115 	stw	zero,4(sp)
 4009170:	008000c4 	movi	r2,3
 4009174:	d8800015 	stw	r2,0(sp)
 4009178:	01c02844 	movi	r7,161
 400917c:	000d883a 	mov	r6,zero
 4009180:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4009184:	e037883a 	mov	sp,fp
 4009188:	dfc00117 	ldw	ra,4(sp)
 400918c:	df000017 	ldw	fp,0(sp)
 4009190:	dec00204 	addi	sp,sp,8
 4009194:	f800283a 	ret

04009198 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
 4009198:	defffc04 	addi	sp,sp,-16
 400919c:	dfc00315 	stw	ra,12(sp)
 40091a0:	df000215 	stw	fp,8(sp)
 40091a4:	df000204 	addi	fp,sp,8
 40091a8:	e13ffe15 	stw	r4,-8(fp)
 40091ac:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
 40091b0:	e0bfff17 	ldw	r2,-4(fp)
 40091b4:	10800003 	ldbu	r2,0(r2)
 40091b8:	10803fcc 	andi	r2,r2,255
 40091bc:	01402004 	movi	r5,128
 40091c0:	1009883a 	mov	r4,r2
 40091c4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
 40091c8:	e0bfff17 	ldw	r2,-4(fp)
 40091cc:	10800043 	ldbu	r2,1(r2)
 40091d0:	10803fcc 	andi	r2,r2,255
 40091d4:	01402004 	movi	r5,128
 40091d8:	1009883a 	mov	r4,r2
 40091dc:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
 40091e0:	e0bfff17 	ldw	r2,-4(fp)
 40091e4:	10800083 	ldbu	r2,2(r2)
 40091e8:	10803fcc 	andi	r2,r2,255
 40091ec:	01402004 	movi	r5,128
 40091f0:	1009883a 	mov	r4,r2
 40091f4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
 40091f8:	e0bfff17 	ldw	r2,-4(fp)
 40091fc:	108000c3 	ldbu	r2,3(r2)
 4009200:	10803fcc 	andi	r2,r2,255
 4009204:	01402004 	movi	r5,128
 4009208:	1009883a 	mov	r4,r2
 400920c:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
 4009210:	e0bfff17 	ldw	r2,-4(fp)
 4009214:	10c00103 	ldbu	r3,4(r2)
 4009218:	10800143 	ldbu	r2,5(r2)
 400921c:	1004923a 	slli	r2,r2,8
 4009220:	10c4b03a 	or	r2,r2,r3
 4009224:	10bfffcc 	andi	r2,r2,65535
 4009228:	01402004 	movi	r5,128
 400922c:	1009883a 	mov	r4,r2
 4009230:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
 4009234:	e0bfff17 	ldw	r2,-4(fp)
 4009238:	10800183 	ldbu	r2,6(r2)
 400923c:	10803fcc 	andi	r2,r2,255
 4009240:	01402004 	movi	r5,128
 4009244:	1009883a 	mov	r4,r2
 4009248:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
}
 400924c:	0001883a 	nop
 4009250:	e037883a 	mov	sp,fp
 4009254:	dfc00117 	ldw	ra,4(sp)
 4009258:	df000017 	ldw	fp,0(sp)
 400925c:	dec00204 	addi	sp,sp,8
 4009260:	f800283a 	ret

04009264 <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
 4009264:	defffc04 	addi	sp,sp,-16
 4009268:	dfc00315 	stw	ra,12(sp)
 400926c:	df000215 	stw	fp,8(sp)
 4009270:	df000204 	addi	fp,sp,8
 4009274:	e13ffe15 	stw	r4,-8(fp)
 4009278:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
 400927c:	e0bfff17 	ldw	r2,-4(fp)
 4009280:	10800003 	ldbu	r2,0(r2)
 4009284:	10803fcc 	andi	r2,r2,255
 4009288:	01402004 	movi	r5,128
 400928c:	1009883a 	mov	r4,r2
 4009290:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
 4009294:	e0bfff17 	ldw	r2,-4(fp)
 4009298:	10800043 	ldbu	r2,1(r2)
 400929c:	10803fcc 	andi	r2,r2,255
 40092a0:	01402004 	movi	r5,128
 40092a4:	1009883a 	mov	r4,r2
 40092a8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
 40092ac:	e0bfff17 	ldw	r2,-4(fp)
 40092b0:	10c00083 	ldbu	r3,2(r2)
 40092b4:	108000c3 	ldbu	r2,3(r2)
 40092b8:	1004923a 	slli	r2,r2,8
 40092bc:	10c4b03a 	or	r2,r2,r3
 40092c0:	10bfffcc 	andi	r2,r2,65535
 40092c4:	01402004 	movi	r5,128
 40092c8:	1009883a 	mov	r4,r2
 40092cc:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
 40092d0:	e0bfff17 	ldw	r2,-4(fp)
 40092d4:	10800103 	ldbu	r2,4(r2)
 40092d8:	10803fcc 	andi	r2,r2,255
 40092dc:	01402004 	movi	r5,128
 40092e0:	1009883a 	mov	r4,r2
 40092e4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
 40092e8:	e0bfff17 	ldw	r2,-4(fp)
 40092ec:	10800143 	ldbu	r2,5(r2)
 40092f0:	10803fcc 	andi	r2,r2,255
 40092f4:	01402004 	movi	r5,128
 40092f8:	1009883a 	mov	r4,r2
 40092fc:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
 4009300:	e0bfff17 	ldw	r2,-4(fp)
 4009304:	10800183 	ldbu	r2,6(r2)
 4009308:	10803fcc 	andi	r2,r2,255
 400930c:	01402004 	movi	r5,128
 4009310:	1009883a 	mov	r4,r2
 4009314:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
 4009318:	e0bfff17 	ldw	r2,-4(fp)
 400931c:	10c001c3 	ldbu	r3,7(r2)
 4009320:	10800203 	ldbu	r2,8(r2)
 4009324:	1004923a 	slli	r2,r2,8
 4009328:	10c4b03a 	or	r2,r2,r3
 400932c:	10bfffcc 	andi	r2,r2,65535
 4009330:	01402004 	movi	r5,128
 4009334:	1009883a 	mov	r4,r2
 4009338:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
}
 400933c:	0001883a 	nop
 4009340:	e037883a 	mov	sp,fp
 4009344:	dfc00117 	ldw	ra,4(sp)
 4009348:	df000017 	ldw	fp,0(sp)
 400934c:	dec00204 	addi	sp,sp,8
 4009350:	f800283a 	ret

04009354 <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
 4009354:	defffd04 	addi	sp,sp,-12
 4009358:	dfc00215 	stw	ra,8(sp)
 400935c:	df000115 	stw	fp,4(sp)
 4009360:	df000104 	addi	fp,sp,4
 4009364:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
 4009368:	010100b4 	movhi	r4,1026
 400936c:	21125204 	addi	r4,r4,18760
 4009370:	400eff40 	call	400eff4 <puts>
	vbusState = 0;
 4009374:	d0323745 	stb	zero,-14115(gp)
};
 4009378:	0001883a 	nop
 400937c:	e037883a 	mov	sp,fp
 4009380:	dfc00117 	ldw	ra,4(sp)
 4009384:	df000017 	ldw	fp,0(sp)
 4009388:	dec00204 	addi	sp,sp,8
 400938c:	f800283a 	ret

04009390 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
 4009390:	defffe04 	addi	sp,sp,-8
 4009394:	df000115 	stw	fp,4(sp)
 4009398:	df000104 	addi	fp,sp,4
 400939c:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
 40093a0:	d0b23743 	ldbu	r2,-14115(gp)
};
 40093a4:	e037883a 	mov	sp,fp
 40093a8:	df000017 	ldw	fp,0(sp)
 40093ac:	dec00104 	addi	sp,sp,4
 40093b0:	f800283a 	ret

040093b4 <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
 40093b4:	defff704 	addi	sp,sp,-36
 40093b8:	dfc00815 	stw	ra,32(sp)
 40093bc:	df000715 	stw	fp,28(sp)
 40093c0:	df000704 	addi	fp,sp,28
 40093c4:	e13ffd15 	stw	r4,-12(fp)
 40093c8:	2807883a 	mov	r3,r5
 40093cc:	3005883a 	mov	r2,r6
 40093d0:	e0fffe05 	stb	r3,-8(fp)
 40093d4:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
 40093d8:	e03ffc45 	stb	zero,-15(fp)
 40093dc:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
 40093e0:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
 40093e4:	e0bffe03 	ldbu	r2,-8(fp)
 40093e8:	10800084 	addi	r2,r2,2
 40093ec:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
 40093f0:	e0bfff03 	ldbu	r2,-4(fp)
 40093f4:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
 40093f8:	e0fffc44 	addi	r3,fp,-15
 40093fc:	d8000215 	stw	zero,8(sp)
 4009400:	e0bffcc4 	addi	r2,fp,-13
 4009404:	d8800115 	stw	r2,4(sp)
 4009408:	d8000015 	stw	zero,0(sp)
 400940c:	180f883a 	mov	r7,r3
 4009410:	01800084 	movi	r6,2
 4009414:	000b883a 	mov	r5,zero
 4009418:	01020034 	movhi	r4,2048
 400941c:	21043804 	addi	r4,r4,4320
 4009420:	401e9580 	call	401e958 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
 4009424:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
 4009428:	0001883a 	nop
 400942c:	e037883a 	mov	sp,fp
 4009430:	dfc00117 	ldw	ra,4(sp)
 4009434:	df000017 	ldw	fp,0(sp)
 4009438:	dec00204 	addi	sp,sp,8
 400943c:	f800283a 	ret

04009440 <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
 4009440:	defff304 	addi	sp,sp,-52
 4009444:	dfc00c15 	stw	ra,48(sp)
 4009448:	df000b15 	stw	fp,44(sp)
 400944c:	dc000a15 	stw	r16,40(sp)
 4009450:	df000b04 	addi	fp,sp,44
 4009454:	e13ffb15 	stw	r4,-20(fp)
 4009458:	3009883a 	mov	r4,r6
 400945c:	e1fffe15 	stw	r7,-8(fp)
 4009460:	e17ffc05 	stb	r5,-16(fp)
 4009464:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
 4009468:	d809883a 	mov	r4,sp
 400946c:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
 4009470:	e13ffd03 	ldbu	r4,-12(fp)
 4009474:	e13ff815 	stw	r4,-32(fp)
 4009478:	200b883a 	mov	r5,r4
 400947c:	29400044 	addi	r5,r5,1
 4009480:	2819883a 	mov	r12,r5
 4009484:	001b883a 	mov	r13,zero
 4009488:	600ad77a 	srli	r5,r12,29
 400948c:	681290fa 	slli	r9,r13,3
 4009490:	2a52b03a 	or	r9,r5,r9
 4009494:	601090fa 	slli	r8,r12,3
 4009498:	200b883a 	mov	r5,r4
 400949c:	29400044 	addi	r5,r5,1
 40094a0:	2815883a 	mov	r10,r5
 40094a4:	0017883a 	mov	r11,zero
 40094a8:	500ad77a 	srli	r5,r10,29
 40094ac:	580690fa 	slli	r3,r11,3
 40094b0:	28c6b03a 	or	r3,r5,r3
 40094b4:	500490fa 	slli	r2,r10,3
 40094b8:	2005883a 	mov	r2,r4
 40094bc:	10800044 	addi	r2,r2,1
 40094c0:	108000c4 	addi	r2,r2,3
 40094c4:	1004d0ba 	srli	r2,r2,2
 40094c8:	1085883a 	add	r2,r2,r2
 40094cc:	1085883a 	add	r2,r2,r2
 40094d0:	d8b7c83a 	sub	sp,sp,r2
 40094d4:	d8800304 	addi	r2,sp,12
 40094d8:	1005883a 	mov	r2,r2
 40094dc:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
 40094e0:	e0bffc03 	ldbu	r2,-16(fp)
 40094e4:	10800084 	addi	r2,r2,2
 40094e8:	1007883a 	mov	r3,r2
 40094ec:	e0bff917 	ldw	r2,-28(fp)
 40094f0:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
 40094f4:	e0bff917 	ldw	r2,-28(fp)
 40094f8:	10800044 	addi	r2,r2,1
 40094fc:	e0fffd03 	ldbu	r3,-12(fp)
 4009500:	180d883a 	mov	r6,r3
 4009504:	e17ffe17 	ldw	r5,-8(fp)
 4009508:	1009883a 	mov	r4,r2
 400950c:	400ec380 	call	400ec38 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
 4009510:	e0bffd03 	ldbu	r2,-12(fp)
 4009514:	10800044 	addi	r2,r2,1
 4009518:	1009883a 	mov	r4,r2
 400951c:	e0fff917 	ldw	r3,-28(fp)
 4009520:	d8000215 	stw	zero,8(sp)
 4009524:	e0bffa44 	addi	r2,fp,-23
 4009528:	d8800115 	stw	r2,4(sp)
 400952c:	d8000015 	stw	zero,0(sp)
 4009530:	180f883a 	mov	r7,r3
 4009534:	200d883a 	mov	r6,r4
 4009538:	000b883a 	mov	r5,zero
 400953c:	01020034 	movhi	r4,2048
 4009540:	21043804 	addi	r4,r4,4320
 4009544:	401e9580 	call	401e958 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
 4009548:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
 400954c:	e0bffd03 	ldbu	r2,-12(fp)
 4009550:	e0fffe17 	ldw	r3,-8(fp)
 4009554:	1885883a 	add	r2,r3,r2
 4009558:	8037883a 	mov	sp,r16
}
 400955c:	e6ffff04 	addi	sp,fp,-4
 4009560:	dfc00217 	ldw	ra,8(sp)
 4009564:	df000117 	ldw	fp,4(sp)
 4009568:	dc000017 	ldw	r16,0(sp)
 400956c:	dec00304 	addi	sp,sp,12
 4009570:	f800283a 	ret

04009574 <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
 4009574:	defffc04 	addi	sp,sp,-16
 4009578:	dfc00315 	stw	ra,12(sp)
 400957c:	df000215 	stw	fp,8(sp)
 4009580:	df000204 	addi	fp,sp,8
 4009584:	e13ffe15 	stw	r4,-8(fp)
 4009588:	2805883a 	mov	r2,r5
 400958c:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
 4009590:	010100b4 	movhi	r4,1026
 4009594:	21125804 	addi	r4,r4,18784
 4009598:	400eff40 	call	400eff4 <puts>
	regWr(rIOPINS1, data);
 400959c:	e0bfff03 	ldbu	r2,-4(fp)
 40095a0:	100d883a 	mov	r6,r2
 40095a4:	01402804 	movi	r5,160
 40095a8:	e13ffe17 	ldw	r4,-8(fp)
 40095ac:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
 40095b0:	e0bfff03 	ldbu	r2,-4(fp)
 40095b4:	1005d13a 	srai	r2,r2,4
 40095b8:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
 40095bc:	e0bfff03 	ldbu	r2,-4(fp)
 40095c0:	100d883a 	mov	r6,r2
 40095c4:	01402a04 	movi	r5,168
 40095c8:	e13ffe17 	ldw	r4,-8(fp)
 40095cc:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	return;
 40095d0:	0001883a 	nop
}
 40095d4:	e037883a 	mov	sp,fp
 40095d8:	dfc00117 	ldw	ra,4(sp)
 40095dc:	df000017 	ldw	fp,0(sp)
 40095e0:	dec00204 	addi	sp,sp,8
 40095e4:	f800283a 	ret

040095e8 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
 40095e8:	defff804 	addi	sp,sp,-32
 40095ec:	dfc00715 	stw	ra,28(sp)
 40095f0:	df000615 	stw	fp,24(sp)
 40095f4:	df000604 	addi	fp,sp,24
 40095f8:	e13ffe15 	stw	r4,-8(fp)
 40095fc:	2805883a 	mov	r2,r5
 4009600:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
 4009604:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
 4009608:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
 400960c:	e0bfff03 	ldbu	r2,-4(fp)
 4009610:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
 4009614:	e0fffd44 	addi	r3,fp,-11
 4009618:	d8000215 	stw	zero,8(sp)
 400961c:	e0bffd84 	addi	r2,fp,-10
 4009620:	d8800115 	stw	r2,4(sp)
 4009624:	00800044 	movi	r2,1
 4009628:	d8800015 	stw	r2,0(sp)
 400962c:	180f883a 	mov	r7,r3
 4009630:	01800044 	movi	r6,1
 4009634:	000b883a 	mov	r5,zero
 4009638:	01020034 	movhi	r4,2048
 400963c:	21043804 	addi	r4,r4,4320
 4009640:	401e9580 	call	401e958 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
 4009644:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
 4009648:	e0bffd83 	ldbu	r2,-10(fp)
}
 400964c:	e037883a 	mov	sp,fp
 4009650:	dfc00117 	ldw	ra,4(sp)
 4009654:	df000017 	ldw	fp,0(sp)
 4009658:	dec00204 	addi	sp,sp,8
 400965c:	f800283a 	ret

04009660 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
 4009660:	defff604 	addi	sp,sp,-40
 4009664:	dfc00915 	stw	ra,36(sp)
 4009668:	df000815 	stw	fp,32(sp)
 400966c:	df000804 	addi	fp,sp,32
 4009670:	e13ffc15 	stw	r4,-16(fp)
 4009674:	2807883a 	mov	r3,r5
 4009678:	3005883a 	mov	r2,r6
 400967c:	e1ffff15 	stw	r7,-4(fp)
 4009680:	e0fffd05 	stb	r3,-12(fp)
 4009684:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
 4009688:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
 400968c:	e0bffd03 	ldbu	r2,-12(fp)
 4009690:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
 4009694:	e0bffe03 	ldbu	r2,-8(fp)
 4009698:	e13ffb44 	addi	r4,fp,-19
 400969c:	d8000215 	stw	zero,8(sp)
 40096a0:	e0ffff17 	ldw	r3,-4(fp)
 40096a4:	d8c00115 	stw	r3,4(sp)
 40096a8:	d8800015 	stw	r2,0(sp)
 40096ac:	200f883a 	mov	r7,r4
 40096b0:	01800044 	movi	r6,1
 40096b4:	000b883a 	mov	r5,zero
 40096b8:	01020034 	movhi	r4,2048
 40096bc:	21043804 	addi	r4,r4,4320
 40096c0:	401e9580 	call	401e958 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
 40096c4:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
 40096c8:	e0bffe03 	ldbu	r2,-8(fp)
 40096cc:	e0ffff17 	ldw	r3,-4(fp)
 40096d0:	1885883a 	add	r2,r3,r2
}
 40096d4:	e037883a 	mov	sp,fp
 40096d8:	dfc00117 	ldw	ra,4(sp)
 40096dc:	df000017 	ldw	fp,0(sp)
 40096e0:	dec00204 	addi	sp,sp,8
 40096e4:	f800283a 	ret

040096e8 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
 40096e8:	defffc04 	addi	sp,sp,-16
 40096ec:	dfc00315 	stw	ra,12(sp)
 40096f0:	df000215 	stw	fp,8(sp)
 40096f4:	df000204 	addi	fp,sp,8
 40096f8:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
 40096fc:	010100b4 	movhi	r4,1026
 4009700:	21125c04 	addi	r4,r4,18800
 4009704:	400eff40 	call	400eff4 <puts>
	uint8_t gpin = 0;
 4009708:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
 400970c:	01402a04 	movi	r5,168
 4009710:	e13fff17 	ldw	r4,-4(fp)
 4009714:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009718:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
 400971c:	e0fffe03 	ldbu	r3,-8(fp)
 4009720:	00bffc04 	movi	r2,-16
 4009724:	1884703a 	and	r2,r3,r2
 4009728:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
 400972c:	01402804 	movi	r5,160
 4009730:	e13fff17 	ldw	r4,-4(fp)
 4009734:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009738:	10803fcc 	andi	r2,r2,255
 400973c:	1005d13a 	srai	r2,r2,4
 4009740:	1007883a 	mov	r3,r2
 4009744:	e0bffe03 	ldbu	r2,-8(fp)
 4009748:	1884b03a 	or	r2,r3,r2
 400974c:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
 4009750:	e0bffe03 	ldbu	r2,-8(fp)
}
 4009754:	e037883a 	mov	sp,fp
 4009758:	dfc00117 	ldw	ra,4(sp)
 400975c:	df000017 	ldw	fp,0(sp)
 4009760:	dec00204 	addi	sp,sp,8
 4009764:	f800283a 	ret

04009768 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
 4009768:	defffc04 	addi	sp,sp,-16
 400976c:	dfc00315 	stw	ra,12(sp)
 4009770:	df000215 	stw	fp,8(sp)
 4009774:	df000204 	addi	fp,sp,8
 4009778:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
 400977c:	010100b4 	movhi	r4,1026
 4009780:	21126004 	addi	r4,r4,18816
 4009784:	400eff40 	call	400eff4 <puts>
	uint8_t gpout = 0;
 4009788:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
 400978c:	01402804 	movi	r5,160
 4009790:	e13fff17 	ldw	r4,-4(fp)
 4009794:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009798:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
 400979c:	e0bffe03 	ldbu	r2,-8(fp)
 40097a0:	108003cc 	andi	r2,r2,15
 40097a4:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
 40097a8:	01402a04 	movi	r5,168
 40097ac:	e13fff17 	ldw	r4,-4(fp)
 40097b0:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 40097b4:	10803fcc 	andi	r2,r2,255
 40097b8:	1004913a 	slli	r2,r2,4
 40097bc:	1007883a 	mov	r3,r2
 40097c0:	e0bffe03 	ldbu	r2,-8(fp)
 40097c4:	1884b03a 	or	r2,r3,r2
 40097c8:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
 40097cc:	e0bffe03 	ldbu	r2,-8(fp)
}
 40097d0:	e037883a 	mov	sp,fp
 40097d4:	dfc00117 	ldw	ra,4(sp)
 40097d8:	df000017 	ldw	fp,0(sp)
 40097dc:	dec00204 	addi	sp,sp,8
 40097e0:	f800283a 	ret

040097e4 <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
 40097e4:	defffc04 	addi	sp,sp,-16
 40097e8:	dfc00315 	stw	ra,12(sp)
 40097ec:	df000215 	stw	fp,8(sp)
 40097f0:	df000204 	addi	fp,sp,8
 40097f4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
 40097f8:	010100b4 	movhi	r4,1026
 40097fc:	21126604 	addi	r4,r4,18840
 4009800:	400eff40 	call	400eff4 <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 4009804:	0007883a 	mov	r3,zero
 4009808:	00820034 	movhi	r2,2048
 400980c:	10849004 	addi	r2,r2,4672
 4009810:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 4009814:	010003f4 	movhi	r4,15
 4009818:	21109004 	addi	r4,r4,16960
 400981c:	401c08c0 	call	401c08c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 4009820:	00c00044 	movi	r3,1
 4009824:	00820034 	movhi	r2,2048
 4009828:	10849004 	addi	r2,r2,4672
 400982c:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
 4009830:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
 4009834:	01800804 	movi	r6,32
 4009838:	01401e04 	movi	r5,120
 400983c:	e13fff17 	ldw	r4,-4(fp)
 4009840:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
 4009844:	000d883a 	mov	r6,zero
 4009848:	01401e04 	movi	r5,120
 400984c:	e13fff17 	ldw	r4,-4(fp)
 4009850:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	while(++i) {
 4009854:	e0bffe0b 	ldhu	r2,-8(fp)
 4009858:	10800044 	addi	r2,r2,1
 400985c:	e0bffe0d 	sth	r2,-8(fp)
 4009860:	e0bffe0b 	ldhu	r2,-8(fp)
 4009864:	1004c03a 	cmpne	r2,r2,zero
 4009868:	10803fcc 	andi	r2,r2,255
 400986c:	10000a26 	beq	r2,zero,4009898 <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 4009870:	01401a04 	movi	r5,104
 4009874:	e13fff17 	ldw	r4,-4(fp)
 4009878:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 400987c:	10803fcc 	andi	r2,r2,255
 4009880:	1080004c 	andi	r2,r2,1
 4009884:	1004c03a 	cmpne	r2,r2,zero
 4009888:	10803fcc 	andi	r2,r2,255
 400988c:	1000011e 	bne	r2,zero,4009894 <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
 4009890:	003ff006 	br	4009854 <__alt_mem_onchip_memory2_0+0xfc0085d4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
 4009894:	0001883a 	nop
		}
	}
	return ( i);
 4009898:	e0bffe0b 	ldhu	r2,-8(fp)
}
 400989c:	e037883a 	mov	sp,fp
 40098a0:	dfc00117 	ldw	ra,4(sp)
 40098a4:	df000017 	ldw	fp,0(sp)
 40098a8:	dec00204 	addi	sp,sp,8
 40098ac:	f800283a 	ret

040098b0 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
 40098b0:	defffe04 	addi	sp,sp,-8
 40098b4:	df000115 	stw	fp,4(sp)
 40098b8:	df000104 	addi	fp,sp,4
 40098bc:	2005883a 	mov	r2,r4
 40098c0:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
 40098c4:	00800044 	movi	r2,1
}
 40098c8:	e037883a 	mov	sp,fp
 40098cc:	df000017 	ldw	fp,0(sp)
 40098d0:	dec00104 	addi	sp,sp,4
 40098d4:	f800283a 	ret

040098d8 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
 40098d8:	defffd04 	addi	sp,sp,-12
 40098dc:	dfc00215 	stw	ra,8(sp)
 40098e0:	df000115 	stw	fp,4(sp)
 40098e4:	df000104 	addi	fp,sp,4
 40098e8:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
 40098ec:	010100b4 	movhi	r4,1026
 40098f0:	21126a04 	addi	r4,r4,18856
 40098f4:	400eff40 	call	400eff4 <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 40098f8:	01800604 	movi	r6,24
 40098fc:	01402204 	movi	r5,136
 4009900:	e13fff17 	ldw	r4,-4(fp)
 4009904:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 4009908:	e13fff17 	ldw	r4,-4(fp)
 400990c:	40097e40 	call	40097e4 <_ZN8MAX3421e5resetEv>
 4009910:	10bfffcc 	andi	r2,r2,65535
 4009914:	1005003a 	cmpeq	r2,r2,zero
 4009918:	10803fcc 	andi	r2,r2,255
 400991c:	10000226 	beq	r2,zero,4009928 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
 4009920:	00bfffc4 	movi	r2,-1
 4009924:	00002006 	br	40099a8 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 4009928:	01803044 	movi	r6,193
 400992c:	01403604 	movi	r5,216
 4009930:	e13fff17 	ldw	r4,-4(fp)
 4009934:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 4009938:	01801804 	movi	r6,96
 400993c:	01403404 	movi	r5,208
 4009940:	e13fff17 	ldw	r4,-4(fp)
 4009944:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 4009948:	01800104 	movi	r6,4
 400994c:	01403a04 	movi	r5,232
 4009950:	e13fff17 	ldw	r4,-4(fp)
 4009954:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 4009958:	01403a04 	movi	r5,232
 400995c:	e13fff17 	ldw	r4,-4(fp)
 4009960:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009964:	10803fcc 	andi	r2,r2,255
 4009968:	1080010c 	andi	r2,r2,4
 400996c:	1005003a 	cmpeq	r2,r2,zero
 4009970:	10803fcc 	andi	r2,r2,255
 4009974:	10000126 	beq	r2,zero,400997c <_ZN8MAX3421e4InitEv+0xa4>
 4009978:	003ff706 	br	4009958 <__alt_mem_onchip_memory2_0+0xfc0086d8>

	busprobe(); //check if anything is connected
 400997c:	e13fff17 	ldw	r4,-4(fp)
 4009980:	4009ad40 	call	4009ad4 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 4009984:	01800804 	movi	r6,32
 4009988:	01403204 	movi	r5,200
 400998c:	e13fff17 	ldw	r4,-4(fp)
 4009990:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
 4009994:	01800044 	movi	r6,1
 4009998:	01402004 	movi	r5,128
 400999c:	e13fff17 	ldw	r4,-4(fp)
 40099a0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
 40099a4:	0005883a 	mov	r2,zero
}
 40099a8:	e037883a 	mov	sp,fp
 40099ac:	dfc00117 	ldw	ra,4(sp)
 40099b0:	df000017 	ldw	fp,0(sp)
 40099b4:	dec00204 	addi	sp,sp,8
 40099b8:	f800283a 	ret

040099bc <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
 40099bc:	defffc04 	addi	sp,sp,-16
 40099c0:	dfc00315 	stw	ra,12(sp)
 40099c4:	df000215 	stw	fp,8(sp)
 40099c8:	df000204 	addi	fp,sp,8
 40099cc:	e13ffe15 	stw	r4,-8(fp)
 40099d0:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
 40099d4:	010100b4 	movhi	r4,1026
 40099d8:	21126e04 	addi	r4,r4,18872
 40099dc:	400eff40 	call	400eff4 <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
 40099e0:	01800644 	movi	r6,25
 40099e4:	01402204 	movi	r5,136
 40099e8:	e13ffe17 	ldw	r4,-8(fp)
 40099ec:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 40099f0:	e13ffe17 	ldw	r4,-8(fp)
 40099f4:	40097e40 	call	40097e4 <_ZN8MAX3421e5resetEv>
 40099f8:	10bfffcc 	andi	r2,r2,65535
 40099fc:	1005003a 	cmpeq	r2,r2,zero
 4009a00:	10803fcc 	andi	r2,r2,255
 4009a04:	10000226 	beq	r2,zero,4009a10 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
 4009a08:	00bfffc4 	movi	r2,-1
 4009a0c:	00002c06 	br	4009ac0 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
 4009a10:	e0bfff17 	ldw	r2,-4(fp)
 4009a14:	1080fa08 	cmpgei	r2,r2,1000
 4009a18:	1000021e 	bne	r2,zero,4009a24 <_ZN8MAX3421e4InitEi+0x68>
 4009a1c:	0080fa04 	movi	r2,1000
 4009a20:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
 4009a24:	e0bfff17 	ldw	r2,-4(fp)
 4009a28:	1009883a 	mov	r4,r2
 4009a2c:	4000dd40 	call	4000dd4 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 4009a30:	01803044 	movi	r6,193
 4009a34:	01403604 	movi	r5,216
 4009a38:	e13ffe17 	ldw	r4,-8(fp)
 4009a3c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 4009a40:	01801804 	movi	r6,96
 4009a44:	01403404 	movi	r5,208
 4009a48:	e13ffe17 	ldw	r4,-8(fp)
 4009a4c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 4009a50:	01800104 	movi	r6,4
 4009a54:	01403a04 	movi	r5,232
 4009a58:	e13ffe17 	ldw	r4,-8(fp)
 4009a5c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 4009a60:	01403a04 	movi	r5,232
 4009a64:	e13ffe17 	ldw	r4,-8(fp)
 4009a68:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009a6c:	10803fcc 	andi	r2,r2,255
 4009a70:	1080010c 	andi	r2,r2,4
 4009a74:	1005003a 	cmpeq	r2,r2,zero
 4009a78:	10803fcc 	andi	r2,r2,255
 4009a7c:	10000126 	beq	r2,zero,4009a84 <_ZN8MAX3421e4InitEi+0xc8>
 4009a80:	003ff706 	br	4009a60 <__alt_mem_onchip_memory2_0+0xfc0087e0>

	busprobe(); //check if anything is connected
 4009a84:	e13ffe17 	ldw	r4,-8(fp)
 4009a88:	4009ad40 	call	4009ad4 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 4009a8c:	01800804 	movi	r6,32
 4009a90:	01403204 	movi	r5,200
 4009a94:	e13ffe17 	ldw	r4,-8(fp)
 4009a98:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
 4009a9c:	01800044 	movi	r6,1
 4009aa0:	01402004 	movi	r5,128
 4009aa4:	e13ffe17 	ldw	r4,-8(fp)
 4009aa8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 4009aac:	01800604 	movi	r6,24
 4009ab0:	01402204 	movi	r5,136
 4009ab4:	e13ffe17 	ldw	r4,-8(fp)
 4009ab8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	return ( 0);
 4009abc:	0005883a 	mov	r2,zero
}
 4009ac0:	e037883a 	mov	sp,fp
 4009ac4:	dfc00117 	ldw	ra,4(sp)
 4009ac8:	df000017 	ldw	fp,0(sp)
 4009acc:	dec00204 	addi	sp,sp,8
 4009ad0:	f800283a 	ret

04009ad4 <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
 4009ad4:	defffc04 	addi	sp,sp,-16
 4009ad8:	dfc00315 	stw	ra,12(sp)
 4009adc:	df000215 	stw	fp,8(sp)
 4009ae0:	df000204 	addi	fp,sp,8
 4009ae4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
 4009ae8:	010100b4 	movhi	r4,1026
 4009aec:	21127404 	addi	r4,r4,18896
 4009af0:	400eff40 	call	400eff4 <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
 4009af4:	01403e04 	movi	r5,248
 4009af8:	e13fff17 	ldw	r4,-4(fp)
 4009afc:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009b00:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 4009b04:	e0fffe03 	ldbu	r3,-8(fp)
 4009b08:	00bff004 	movi	r2,-64
 4009b0c:	1884703a 	and	r2,r3,r2
 4009b10:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
 4009b14:	e0bffe03 	ldbu	r2,-8(fp)
 4009b18:	10c01020 	cmpeqi	r3,r2,64
 4009b1c:	1800251e 	bne	r3,zero,4009bb4 <_ZN8MAX3421e8busprobeEv+0xe0>
 4009b20:	10c01048 	cmpgei	r3,r2,65
 4009b24:	1800021e 	bne	r3,zero,4009b30 <_ZN8MAX3421e8busprobeEv+0x5c>
 4009b28:	10003b26 	beq	r2,zero,4009c18 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
 4009b2c:	00004006 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
 4009b30:	10c02020 	cmpeqi	r3,r2,128
 4009b34:	1800031e 	bne	r3,zero,4009b44 <_ZN8MAX3421e8busprobeEv+0x70>
 4009b38:	10803020 	cmpeqi	r2,r2,192
 4009b3c:	1000331e 	bne	r2,zero,4009c0c <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
 4009b40:	00003b06 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
 4009b44:	01403604 	movi	r5,216
 4009b48:	e13fff17 	ldw	r4,-4(fp)
 4009b4c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009b50:	10803fcc 	andi	r2,r2,255
 4009b54:	1080008c 	andi	r2,r2,2
 4009b58:	1005003a 	cmpeq	r2,r2,zero
 4009b5c:	10803fcc 	andi	r2,r2,255
 4009b60:	10000a26 	beq	r2,zero,4009b8c <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
 4009b64:	010100b4 	movhi	r4,1026
 4009b68:	21127904 	addi	r4,r4,18916
 4009b6c:	400eff40 	call	400eff4 <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
 4009b70:	01803244 	movi	r6,201
 4009b74:	01403604 	movi	r5,216
 4009b78:	e13fff17 	ldw	r4,-4(fp)
 4009b7c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
 4009b80:	00800084 	movi	r2,2
 4009b84:	d0b23745 	stb	r2,-14115(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
 4009b88:	00002906 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
 4009b8c:	010100b4 	movhi	r4,1026
 4009b90:	21128004 	addi	r4,r4,18944
 4009b94:	400eff40 	call	400eff4 <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
 4009b98:	018032c4 	movi	r6,203
 4009b9c:	01403604 	movi	r5,216
 4009ba0:	e13fff17 	ldw	r4,-4(fp)
 4009ba4:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
 4009ba8:	008000c4 	movi	r2,3
 4009bac:	d0b23745 	stb	r2,-14115(gp)
			}
			break;
 4009bb0:	00001f06 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
 4009bb4:	01403604 	movi	r5,216
 4009bb8:	e13fff17 	ldw	r4,-4(fp)
 4009bbc:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009bc0:	10803fcc 	andi	r2,r2,255
 4009bc4:	1080008c 	andi	r2,r2,2
 4009bc8:	1005003a 	cmpeq	r2,r2,zero
 4009bcc:	10803fcc 	andi	r2,r2,255
 4009bd0:	10000726 	beq	r2,zero,4009bf0 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
 4009bd4:	018032c4 	movi	r6,203
 4009bd8:	01403604 	movi	r5,216
 4009bdc:	e13fff17 	ldw	r4,-4(fp)
 4009be0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
 4009be4:	008000c4 	movi	r2,3
 4009be8:	d0b23745 	stb	r2,-14115(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
 4009bec:	00001006 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
 4009bf0:	01803244 	movi	r6,201
 4009bf4:	01403604 	movi	r5,216
 4009bf8:	e13fff17 	ldw	r4,-4(fp)
 4009bfc:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
 4009c00:	00800084 	movi	r2,2
 4009c04:	d0b23745 	stb	r2,-14115(gp)
			}
			break;
 4009c08:	00000906 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
 4009c0c:	00800044 	movi	r2,1
 4009c10:	d0b23745 	stb	r2,-14115(gp)
			break;
 4009c14:	00000606 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 4009c18:	01803444 	movi	r6,209
 4009c1c:	01403604 	movi	r5,216
 4009c20:	e13fff17 	ldw	r4,-4(fp)
 4009c24:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
 4009c28:	d0323745 	stb	zero,-14115(gp)
			break;
 4009c2c:	0001883a 	nop
	}//end switch( bus_sample )
}
 4009c30:	0001883a 	nop
 4009c34:	e037883a 	mov	sp,fp
 4009c38:	dfc00117 	ldw	ra,4(sp)
 4009c3c:	df000017 	ldw	fp,0(sp)
 4009c40:	dec00204 	addi	sp,sp,8
 4009c44:	f800283a 	ret

04009c48 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
 4009c48:	defffc04 	addi	sp,sp,-16
 4009c4c:	dfc00315 	stw	ra,12(sp)
 4009c50:	df000215 	stw	fp,8(sp)
 4009c54:	df000204 	addi	fp,sp,8
 4009c58:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
 4009c5c:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
 4009c60:	00820034 	movhi	r2,2048
 4009c64:	10849804 	addi	r2,r2,4704
 4009c68:	10800003 	ldbu	r2,0(r2)
 4009c6c:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 4009c70:	00820034 	movhi	r2,2048
 4009c74:	10849804 	addi	r2,r2,4704
 4009c78:	10800037 	ldwio	r2,0(r2)
 4009c7c:	1005003a 	cmpeq	r2,r2,zero
 4009c80:	10803fcc 	andi	r2,r2,255
 4009c84:	10000326 	beq	r2,zero,4009c94 <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
 4009c88:	e13fff17 	ldw	r4,-4(fp)
 4009c8c:	4009cac0 	call	4009cac <_ZN8MAX3421e10IntHandlerEv>
 4009c90:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
 4009c94:	e0bffe03 	ldbu	r2,-8(fp)
}
 4009c98:	e037883a 	mov	sp,fp
 4009c9c:	dfc00117 	ldw	ra,4(sp)
 4009ca0:	df000017 	ldw	fp,0(sp)
 4009ca4:	dec00204 	addi	sp,sp,8
 4009ca8:	f800283a 	ret

04009cac <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
 4009cac:	defffc04 	addi	sp,sp,-16
 4009cb0:	dfc00315 	stw	ra,12(sp)
 4009cb4:	df000215 	stw	fp,8(sp)
 4009cb8:	df000204 	addi	fp,sp,8
 4009cbc:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
 4009cc0:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
 4009cc4:	01403204 	movi	r5,200
 4009cc8:	e13fff17 	ldw	r4,-4(fp)
 4009ccc:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009cd0:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
 4009cd4:	e0bffe43 	ldbu	r2,-7(fp)
 4009cd8:	1080080c 	andi	r2,r2,32
 4009cdc:	10000526 	beq	r2,zero,4009cf4 <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
 4009ce0:	e13fff17 	ldw	r4,-4(fp)
 4009ce4:	4009ad40 	call	4009ad4 <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
 4009ce8:	e0bffe03 	ldbu	r2,-8(fp)
 4009cec:	10800814 	ori	r2,r2,32
 4009cf0:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
 4009cf4:	e0bffe03 	ldbu	r2,-8(fp)
 4009cf8:	100d883a 	mov	r6,r2
 4009cfc:	01403204 	movi	r5,200
 4009d00:	e13fff17 	ldw	r4,-4(fp)
 4009d04:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
 4009d08:	e0bffe03 	ldbu	r2,-8(fp)
}
 4009d0c:	e037883a 	mov	sp,fp
 4009d10:	dfc00117 	ldw	ra,4(sp)
 4009d14:	df000017 	ldw	fp,0(sp)
 4009d18:	dec00204 	addi	sp,sp,8
 4009d1c:	f800283a 	ret

04009d20 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
 4009d20:	defffe04 	addi	sp,sp,-8
 4009d24:	df000115 	stw	fp,4(sp)
 4009d28:	df000104 	addi	fp,sp,4
 4009d2c:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
 4009d30:	0005883a 	mov	r2,zero
}
 4009d34:	e037883a 	mov	sp,fp
 4009d38:	df000017 	ldw	fp,0(sp)
 4009d3c:	dec00104 	addi	sp,sp,4
 4009d40:	f800283a 	ret

04009d44 <_Z8toBinaryh>:
USB_DEVICE_DESCRIPTOR buf;
USB Usb;


void toBinary(uint8_t a)
{
 4009d44:	defffc04 	addi	sp,sp,-16
 4009d48:	dfc00315 	stw	ra,12(sp)
 4009d4c:	df000215 	stw	fp,8(sp)
 4009d50:	df000204 	addi	fp,sp,8
 4009d54:	2005883a 	mov	r2,r4
 4009d58:	e0bfff05 	stb	r2,-4(fp)
    uint8_t i;

    for(i=0x80;i!=0;i>>=1)
 4009d5c:	00bfe004 	movi	r2,-128
 4009d60:	e0bffe05 	stb	r2,-8(fp)
 4009d64:	e0bffe03 	ldbu	r2,-8(fp)
 4009d68:	10000e26 	beq	r2,zero,4009da4 <_Z8toBinaryh+0x60>
        printf("%c",(a&i)?'1':'0');
 4009d6c:	e0ffff03 	ldbu	r3,-4(fp)
 4009d70:	e0bffe03 	ldbu	r2,-8(fp)
 4009d74:	1884703a 	and	r2,r3,r2
 4009d78:	10803fcc 	andi	r2,r2,255
 4009d7c:	10000226 	beq	r2,zero,4009d88 <_Z8toBinaryh+0x44>
 4009d80:	00800c44 	movi	r2,49
 4009d84:	00000106 	br	4009d8c <_Z8toBinaryh+0x48>
 4009d88:	00800c04 	movi	r2,48
 4009d8c:	1009883a 	mov	r4,r2
 4009d90:	400ef1c0 	call	400ef1c <putchar>

void toBinary(uint8_t a)
{
    uint8_t i;

    for(i=0x80;i!=0;i>>=1)
 4009d94:	e0bffe03 	ldbu	r2,-8(fp)
 4009d98:	1005d07a 	srai	r2,r2,1
 4009d9c:	e0bffe05 	stb	r2,-8(fp)
 4009da0:	003ff006 	br	4009d64 <__alt_mem_onchip_memory2_0+0xfc008ae4>
        printf("%c",(a&i)?'1':'0');
}
 4009da4:	0001883a 	nop
 4009da8:	e037883a 	mov	sp,fp
 4009dac:	dfc00117 	ldw	ra,4(sp)
 4009db0:	df000017 	ldw	fp,0(sp)
 4009db4:	dec00204 	addi	sp,sp,8
 4009db8:	f800283a 	ret

04009dbc <main>:

extern "C" {
        #include "sgtl5000_test.h"
}

int main() {
 4009dbc:	deffc804 	addi	sp,sp,-224
 4009dc0:	dfc03715 	stw	ra,220(sp)
 4009dc4:	df003615 	stw	fp,216(sp)
 4009dc8:	ddc03515 	stw	r23,212(sp)
 4009dcc:	dd803415 	stw	r22,208(sp)
 4009dd0:	dd403315 	stw	r21,204(sp)
 4009dd4:	dd003215 	stw	r20,200(sp)
 4009dd8:	dcc03115 	stw	r19,196(sp)
 4009ddc:	dc803015 	stw	r18,192(sp)
 4009de0:	dc402f15 	stw	r17,188(sp)
 4009de4:	dc002e15 	stw	r16,184(sp)
 4009de8:	df003604 	addi	fp,sp,216
	printf("Initializing SGTL5000...\n");
 4009dec:	010100b4 	movhi	r4,1026
 4009df0:	211abc04 	addi	r4,r4,27376
 4009df4:	400eff40 	call	400eff4 <puts>
	initialize_sgtl5000();
 4009df8:	40006bc0 	call	40006bc <initialize_sgtl5000>
	printf("Initializing MIDI connection...\n");
 4009dfc:	010100b4 	movhi	r4,1026
 4009e00:	211ac304 	addi	r4,r4,27404
 4009e04:	400eff40 	call	400eff4 <puts>
	USBH_MIDI Midi(&Usb);
 4009e08:	e0bfd504 	addi	r2,fp,-172
 4009e0c:	014100f4 	movhi	r5,1027
 4009e10:	29760204 	addi	r5,r5,-10232
 4009e14:	1009883a 	mov	r4,r2
 4009e18:	4006d540 	call	4006d54 <_ZN9USBH_MIDIC1EP3USB>
	if(Usb.Init() == -1){
 4009e1c:	010100f4 	movhi	r4,1027
 4009e20:	21360204 	addi	r4,r4,-10232
 4009e24:	40098d80 	call	40098d8 <_ZN8MAX3421e4InitEv>
 4009e28:	10803fcc 	andi	r2,r2,255
 4009e2c:	1080201c 	xori	r2,r2,128
 4009e30:	10bfe004 	addi	r2,r2,-128
 4009e34:	10bfffe0 	cmpeqi	r2,r2,-1
 4009e38:	10803fcc 	andi	r2,r2,255
 4009e3c:	10000426 	beq	r2,zero,4009e50 <main+0x94>
		printf("Halted...");
 4009e40:	010100b4 	movhi	r4,1026
 4009e44:	211acb04 	addi	r4,r4,27436
 4009e48:	400eed80 	call	400eed8 <printf>
		while(1);
 4009e4c:	003fff06 	br	4009e4c <__alt_mem_onchip_memory2_0+0xfc008bcc>
	}
	delay(200);
 4009e50:	01003204 	movi	r4,200
 4009e54:	4000dd40 	call	4000dd4 <_Z5delaym>

	/* Pointers to PIOs */
	int NUM_NOTES = 4;
 4009e58:	00800104 	movi	r2,4
 4009e5c:	e0bfcf15 	stw	r2,-196(fp)
//	volatile unsigned int *note_vol_0 = (unsigned int*)0x08001200;
//	volatile unsigned int *note_vol_1 = (unsigned int*)0x080011f0;
//	volatile unsigned int *note_vol_2 = (unsigned int*)0x080011e0;
//	volatile unsigned int *note_vol_3 = (unsigned int*)0x080011d0;

	volatile unsigned int* note_vol_array[NUM_NOTES] = {(unsigned int*)0x08001200, (unsigned int*)0x080011f0, (unsigned int*)0x080011e0, (unsigned int*)0x080011d0};
 4009e60:	e0bfcf17 	ldw	r2,-196(fp)
 4009e64:	10bfffc4 	addi	r2,r2,-1
 4009e68:	e0bfd015 	stw	r2,-192(fp)
 4009e6c:	1007883a 	mov	r3,r2
 4009e70:	18c00044 	addi	r3,r3,1
 4009e74:	e0fff015 	stw	r3,-64(fp)
 4009e78:	e03ff115 	stw	zero,-60(fp)
 4009e7c:	e13ff017 	ldw	r4,-64(fp)
 4009e80:	2006d6fa 	srli	r3,r4,27
 4009e84:	e13ff117 	ldw	r4,-60(fp)
 4009e88:	202e917a 	slli	r23,r4,5
 4009e8c:	1deeb03a 	or	r23,r3,r23
 4009e90:	e0fff017 	ldw	r3,-64(fp)
 4009e94:	182c917a 	slli	r22,r3,5
 4009e98:	1007883a 	mov	r3,r2
 4009e9c:	18c00044 	addi	r3,r3,1
 4009ea0:	e0fff215 	stw	r3,-56(fp)
 4009ea4:	e03ff315 	stw	zero,-52(fp)
 4009ea8:	e13ff217 	ldw	r4,-56(fp)
 4009eac:	2006d6fa 	srli	r3,r4,27
 4009eb0:	e13ff317 	ldw	r4,-52(fp)
 4009eb4:	202a917a 	slli	r21,r4,5
 4009eb8:	1d6ab03a 	or	r21,r3,r21
 4009ebc:	e0fff217 	ldw	r3,-56(fp)
 4009ec0:	1828917a 	slli	r20,r3,5
 4009ec4:	1007883a 	mov	r3,r2
 4009ec8:	18c00044 	addi	r3,r3,1
 4009ecc:	18c7883a 	add	r3,r3,r3
 4009ed0:	18c7883a 	add	r3,r3,r3
 4009ed4:	18c000c4 	addi	r3,r3,3
 4009ed8:	18c000c4 	addi	r3,r3,3
 4009edc:	1806d0ba 	srli	r3,r3,2
 4009ee0:	18c7883a 	add	r3,r3,r3
 4009ee4:	18c7883a 	add	r3,r3,r3
 4009ee8:	d8f7c83a 	sub	sp,sp,r3
 4009eec:	d807883a 	mov	r3,sp
 4009ef0:	18c000c4 	addi	r3,r3,3
 4009ef4:	1806d0ba 	srli	r3,r3,2
 4009ef8:	18c7883a 	add	r3,r3,r3
 4009efc:	18c7883a 	add	r3,r3,r3
 4009f00:	e0ffd115 	stw	r3,-188(fp)
 4009f04:	e0ffd117 	ldw	r3,-188(fp)
 4009f08:	1009883a 	mov	r4,r2
 4009f0c:	00820034 	movhi	r2,2048
 4009f10:	10848004 	addi	r2,r2,4608
 4009f14:	18800015 	stw	r2,0(r3)
 4009f18:	18c00104 	addi	r3,r3,4
 4009f1c:	213fffc4 	addi	r4,r4,-1
 4009f20:	00820034 	movhi	r2,2048
 4009f24:	10847c04 	addi	r2,r2,4592
 4009f28:	18800015 	stw	r2,0(r3)
 4009f2c:	18c00104 	addi	r3,r3,4
 4009f30:	213fffc4 	addi	r4,r4,-1
 4009f34:	00820034 	movhi	r2,2048
 4009f38:	10847804 	addi	r2,r2,4576
 4009f3c:	18800015 	stw	r2,0(r3)
 4009f40:	18c00104 	addi	r3,r3,4
 4009f44:	213fffc4 	addi	r4,r4,-1
 4009f48:	00820034 	movhi	r2,2048
 4009f4c:	10847404 	addi	r2,r2,4560
 4009f50:	18800015 	stw	r2,0(r3)
 4009f54:	18c00104 	addi	r3,r3,4
 4009f58:	20bfffc4 	addi	r2,r4,-1
 4009f5c:	113fffe0 	cmpeqi	r4,r2,-1
 4009f60:	2000041e 	bne	r4,zero,4009f74 <main+0x1b8>
 4009f64:	18000015 	stw	zero,0(r3)
 4009f68:	18c00104 	addi	r3,r3,4
 4009f6c:	10bfffc4 	addi	r2,r2,-1
 4009f70:	003ffa06 	br	4009f5c <__alt_mem_onchip_memory2_0+0xfc008cdc>
	/* Initialize all notes/volumes to 0 */
//	*note_vol_0 = (unsigned int) 0x3C20;	//C4
//	*note_vol_1 = (unsigned int) 0x4020;	//E4
//	*note_vol_2 = (unsigned int) 0x4320;	//G4
//	*note_vol_3 = (unsigned int) 0;
	for(int i = 0; i < NUM_NOTES; i++)
 4009f74:	e03fca15 	stw	zero,-216(fp)
 4009f78:	e0ffca17 	ldw	r3,-216(fp)
 4009f7c:	e0bfcf17 	ldw	r2,-196(fp)
 4009f80:	18800b0e 	bge	r3,r2,4009fb0 <main+0x1f4>
			*(note_vol_array[i]) = 0;
 4009f84:	e0ffd117 	ldw	r3,-188(fp)
 4009f88:	e0bfca17 	ldw	r2,-216(fp)
 4009f8c:	1085883a 	add	r2,r2,r2
 4009f90:	1085883a 	add	r2,r2,r2
 4009f94:	1885883a 	add	r2,r3,r2
 4009f98:	10800017 	ldw	r2,0(r2)
 4009f9c:	10000015 	stw	zero,0(r2)
	/* Initialize all notes/volumes to 0 */
//	*note_vol_0 = (unsigned int) 0x3C20;	//C4
//	*note_vol_1 = (unsigned int) 0x4020;	//E4
//	*note_vol_2 = (unsigned int) 0x4320;	//G4
//	*note_vol_3 = (unsigned int) 0;
	for(int i = 0; i < NUM_NOTES; i++)
 4009fa0:	e0bfca17 	ldw	r2,-216(fp)
 4009fa4:	10800044 	addi	r2,r2,1
 4009fa8:	e0bfca15 	stw	r2,-216(fp)
 4009fac:	003ff206 	br	4009f78 <__alt_mem_onchip_memory2_0+0xfc008cf8>
			*(note_vol_array[i]) = 0;

	int available_idx;
	bool note_used[NUM_NOTES] = {false};
 4009fb0:	e0bfcf17 	ldw	r2,-196(fp)
 4009fb4:	10bfffc4 	addi	r2,r2,-1
 4009fb8:	e0bfd215 	stw	r2,-184(fp)
 4009fbc:	1007883a 	mov	r3,r2
 4009fc0:	18c00044 	addi	r3,r3,1
 4009fc4:	e0fff415 	stw	r3,-48(fp)
 4009fc8:	e03ff515 	stw	zero,-44(fp)
 4009fcc:	e13ff417 	ldw	r4,-48(fp)
 4009fd0:	2006d77a 	srli	r3,r4,29
 4009fd4:	e13ff517 	ldw	r4,-44(fp)
 4009fd8:	202690fa 	slli	r19,r4,3
 4009fdc:	1ce6b03a 	or	r19,r3,r19
 4009fe0:	e0fff417 	ldw	r3,-48(fp)
 4009fe4:	182490fa 	slli	r18,r3,3
 4009fe8:	1007883a 	mov	r3,r2
 4009fec:	18c00044 	addi	r3,r3,1
 4009ff0:	e0fff615 	stw	r3,-40(fp)
 4009ff4:	e03ff715 	stw	zero,-36(fp)
 4009ff8:	e13ff617 	ldw	r4,-40(fp)
 4009ffc:	2006d77a 	srli	r3,r4,29
 400a000:	e13ff717 	ldw	r4,-36(fp)
 400a004:	202290fa 	slli	r17,r4,3
 400a008:	1c62b03a 	or	r17,r3,r17
 400a00c:	e0fff617 	ldw	r3,-40(fp)
 400a010:	182090fa 	slli	r16,r3,3
 400a014:	1007883a 	mov	r3,r2
 400a018:	18c00044 	addi	r3,r3,1
 400a01c:	18c000c4 	addi	r3,r3,3
 400a020:	1806d0ba 	srli	r3,r3,2
 400a024:	18c7883a 	add	r3,r3,r3
 400a028:	18c7883a 	add	r3,r3,r3
 400a02c:	d8f7c83a 	sub	sp,sp,r3
 400a030:	d807883a 	mov	r3,sp
 400a034:	1807883a 	mov	r3,r3
 400a038:	e0ffd315 	stw	r3,-180(fp)
 400a03c:	e0ffd317 	ldw	r3,-180(fp)
 400a040:	18000005 	stb	zero,0(r3)
 400a044:	18c00044 	addi	r3,r3,1
 400a048:	10bfffc4 	addi	r2,r2,-1
 400a04c:	113fffe0 	cmpeqi	r4,r2,-1
 400a050:	2000041e 	bne	r4,zero,400a064 <main+0x2a8>
 400a054:	18000005 	stb	zero,0(r3)
 400a058:	18c00044 	addi	r3,r3,1
 400a05c:	10bfffc4 	addi	r2,r2,-1
 400a060:	003ffa06 	br	400a04c <__alt_mem_onchip_memory2_0+0xfc008dcc>
	bool first_note = true;
 400a064:	00800044 	movi	r2,1
 400a068:	e0bfcc05 	stb	r2,-208(fp)
	while(1){
		Usb.Task();
 400a06c:	010100f4 	movhi	r4,1027
 400a070:	21360204 	addi	r4,r4,-10232
 400a074:	4001f6c0 	call	4001f6c <_ZN3USB4TaskEv>
		if(Midi){
 400a078:	e0bfd504 	addi	r2,fp,-172
 400a07c:	1009883a 	mov	r4,r2
 400a080:	400a88c0 	call	400a88c <_ZN9USBH_MIDIcvbEv>
 400a084:	10803fcc 	andi	r2,r2,255
 400a088:	103ff826 	beq	r2,zero,400a06c <__alt_mem_onchip_memory2_0+0xfc008dec>
			uint8_t MIDI_packet[ 3 ];
			uint8_t size;

			do {
				if ( (size = Midi.RecvData(MIDI_packet)) > 0 ) {
 400a08c:	e0ffef04 	addi	r3,fp,-68
 400a090:	e0bfd504 	addi	r2,fp,-172
 400a094:	000d883a 	mov	r6,zero
 400a098:	180b883a 	mov	r5,r3
 400a09c:	1009883a 	mov	r4,r2
 400a0a0:	40079dc0 	call	40079dc <_ZN9USBH_MIDI8RecvDataEPhb>
 400a0a4:	e0bfd405 	stb	r2,-176(fp)
 400a0a8:	e0bfd403 	ldbu	r2,-176(fp)
 400a0ac:	1004c03a 	cmpne	r2,r2,zero
 400a0b0:	10803fcc 	andi	r2,r2,255
 400a0b4:	10005b26 	beq	r2,zero,400a224 <main+0x468>
					//					printf("..........\n");
					//					toBinary(MIDI_packet[0]); printf("\n");
					//					toBinary(MIDI_packet[1]); printf("\n");
					//					toBinary(MIDI_packet[2]); printf("\n");

										switch(unsigned(MIDI_packet[0] >> 4)){
 400a0b8:	e0bfef03 	ldbu	r2,-68(fp)
 400a0bc:	10803fcc 	andi	r2,r2,255
 400a0c0:	1005d13a 	srai	r2,r2,4
 400a0c4:	10c00220 	cmpeqi	r3,r2,8
 400a0c8:	1800301e 	bne	r3,zero,400a18c <main+0x3d0>
 400a0cc:	10800260 	cmpeqi	r2,r2,9
 400a0d0:	10005426 	beq	r2,zero,400a224 <main+0x468>
										case 9:
											if(first_note){
 400a0d4:	e0bfcc03 	ldbu	r2,-208(fp)
 400a0d8:	10000226 	beq	r2,zero,400a0e4 <main+0x328>
												first_note = false;
 400a0dc:	e03fcc05 	stb	zero,-208(fp)
												break;
 400a0e0:	00005006 	br	400a224 <main+0x468>
											}
											/* Find first available note_vol */
											available_idx = -1;
 400a0e4:	00bfffc4 	movi	r2,-1
 400a0e8:	e0bfcb15 	stw	r2,-212(fp)
											for(int i = 0; i < NUM_NOTES; i++){
 400a0ec:	e03fcd15 	stw	zero,-204(fp)
 400a0f0:	e0ffcd17 	ldw	r3,-204(fp)
 400a0f4:	e0bfcf17 	ldw	r2,-196(fp)
 400a0f8:	1880130e 	bge	r3,r2,400a148 <main+0x38c>
												if(!note_used[i]){
 400a0fc:	e0ffd317 	ldw	r3,-180(fp)
 400a100:	e0bfcd17 	ldw	r2,-204(fp)
 400a104:	1885883a 	add	r2,r3,r2
 400a108:	10800003 	ldbu	r2,0(r2)
 400a10c:	1080005c 	xori	r2,r2,1
 400a110:	10803fcc 	andi	r2,r2,255
 400a114:	10000826 	beq	r2,zero,400a138 <main+0x37c>
													available_idx = i;
 400a118:	e0bfcd17 	ldw	r2,-204(fp)
 400a11c:	e0bfcb15 	stw	r2,-212(fp)
													note_used[i] = true;
 400a120:	e0ffd317 	ldw	r3,-180(fp)
 400a124:	e0bfcd17 	ldw	r2,-204(fp)
 400a128:	1885883a 	add	r2,r3,r2
 400a12c:	00c00044 	movi	r3,1
 400a130:	10c00005 	stb	r3,0(r2)
													break;
 400a134:	00000406 	br	400a148 <main+0x38c>
												first_note = false;
												break;
											}
											/* Find first available note_vol */
											available_idx = -1;
											for(int i = 0; i < NUM_NOTES; i++){
 400a138:	e0bfcd17 	ldw	r2,-204(fp)
 400a13c:	10800044 	addi	r2,r2,1
 400a140:	e0bfcd15 	stw	r2,-204(fp)
 400a144:	003fea06 	br	400a0f0 <__alt_mem_onchip_memory2_0+0xfc008e70>
													note_used[i] = true;
													break;
												}
											}
											/* If a note_vol is available, write to it*/
											if(available_idx != -1)
 400a148:	e0bfcb17 	ldw	r2,-212(fp)
 400a14c:	10bfffe0 	cmpeqi	r2,r2,-1
 400a150:	1000311e 	bne	r2,zero,400a218 <main+0x45c>
												*(note_vol_array[available_idx]) = (MIDI_packet[1] << 8) + MIDI_packet[2];
 400a154:	e0ffd117 	ldw	r3,-188(fp)
 400a158:	e0bfcb17 	ldw	r2,-212(fp)
 400a15c:	1085883a 	add	r2,r2,r2
 400a160:	1085883a 	add	r2,r2,r2
 400a164:	1885883a 	add	r2,r3,r2
 400a168:	10800017 	ldw	r2,0(r2)
 400a16c:	e0ffef43 	ldbu	r3,-67(fp)
 400a170:	18c03fcc 	andi	r3,r3,255
 400a174:	1808923a 	slli	r4,r3,8
 400a178:	e0ffef83 	ldbu	r3,-66(fp)
 400a17c:	18c03fcc 	andi	r3,r3,255
 400a180:	20c7883a 	add	r3,r4,r3
 400a184:	10c00015 	stw	r3,0(r2)
											break;
 400a188:	00002306 	br	400a218 <main+0x45c>

										case 8:
											for(int i = 0; i < NUM_NOTES; i++){    //iterate over all note_vols
 400a18c:	e03fce15 	stw	zero,-200(fp)
 400a190:	e0ffce17 	ldw	r3,-200(fp)
 400a194:	e0bfcf17 	ldw	r2,-196(fp)
 400a198:	1880210e 	bge	r3,r2,400a220 <main+0x464>
												if((*(note_vol_array[i]) >> 8) == unsigned(MIDI_packet[1])){  //we've found the note to turn off
 400a19c:	e0ffd117 	ldw	r3,-188(fp)
 400a1a0:	e0bfce17 	ldw	r2,-200(fp)
 400a1a4:	1085883a 	add	r2,r2,r2
 400a1a8:	1085883a 	add	r2,r2,r2
 400a1ac:	1885883a 	add	r2,r3,r2
 400a1b0:	10800017 	ldw	r2,0(r2)
 400a1b4:	10800017 	ldw	r2,0(r2)
 400a1b8:	1006d23a 	srli	r3,r2,8
 400a1bc:	e0bfef43 	ldbu	r2,-67(fp)
 400a1c0:	10803fcc 	andi	r2,r2,255
 400a1c4:	1885003a 	cmpeq	r2,r3,r2
 400a1c8:	10803fcc 	andi	r2,r2,255
 400a1cc:	10000e26 	beq	r2,zero,400a208 <main+0x44c>
													*(note_vol_array[i]) = 0;                  //note turned off
 400a1d0:	e0ffd117 	ldw	r3,-188(fp)
 400a1d4:	e0bfce17 	ldw	r2,-200(fp)
 400a1d8:	1085883a 	add	r2,r2,r2
 400a1dc:	1085883a 	add	r2,r2,r2
 400a1e0:	1885883a 	add	r2,r3,r2
 400a1e4:	10800017 	ldw	r2,0(r2)
 400a1e8:	10000015 	stw	zero,0(r2)
													note_used[i] = false;
 400a1ec:	e0ffd317 	ldw	r3,-180(fp)
 400a1f0:	e0bfce17 	ldw	r2,-200(fp)
 400a1f4:	1885883a 	add	r2,r3,r2
 400a1f8:	10000005 	stb	zero,0(r2)
													break;
 400a1fc:	0001883a 	nop
												}
											}
											break;
 400a200:	0001883a 	nop
 400a204:	00000606 	br	400a220 <main+0x464>
											if(available_idx != -1)
												*(note_vol_array[available_idx]) = (MIDI_packet[1] << 8) + MIDI_packet[2];
											break;

										case 8:
											for(int i = 0; i < NUM_NOTES; i++){    //iterate over all note_vols
 400a208:	e0bfce17 	ldw	r2,-200(fp)
 400a20c:	10800044 	addi	r2,r2,1
 400a210:	e0bfce15 	stw	r2,-200(fp)
 400a214:	003fde06 	br	400a190 <__alt_mem_onchip_memory2_0+0xfc008f10>
												}
											}
											/* If a note_vol is available, write to it*/
											if(available_idx != -1)
												*(note_vol_array[available_idx]) = (MIDI_packet[1] << 8) + MIDI_packet[2];
											break;
 400a218:	0001883a 	nop
 400a21c:	00000106 	br	400a224 <main+0x468>
													*(note_vol_array[i]) = 0;                  //note turned off
													note_used[i] = false;
													break;
												}
											}
											break;
 400a220:	0001883a 	nop
										}
				}
			} while (size > 0);
 400a224:	e0bfd403 	ldbu	r2,-176(fp)
 400a228:	103f9026 	beq	r2,zero,400a06c <__alt_mem_onchip_memory2_0+0xfc008dec>
		Usb.Task();
		if(Midi){
			uint8_t MIDI_packet[ 3 ];
			uint8_t size;

			do {
 400a22c:	003f9706 	br	400a08c <__alt_mem_onchip_memory2_0+0xfc008e0c>

0400a230 <_Z9test_loopv>:
		}
	}
}


void test_loop() {
 400a230:	defffd04 	addi	sp,sp,-12
 400a234:	dfc00215 	stw	ra,8(sp)
 400a238:	df000115 	stw	fp,4(sp)
 400a23c:	df000104 	addi	fp,sp,4
        delay(200);
 400a240:	01003204 	movi	r4,200
 400a244:	4000dd40 	call	4000dd4 <_Z5delaym>
        Usb.Task();
 400a248:	010100f4 	movhi	r4,1027
 400a24c:	21360204 	addi	r4,r4,-10232
 400a250:	4001f6c0 	call	4001f6c <_ZN3USB4TaskEv>
        usbstate = Usb.getUsbTaskState();
 400a254:	010100f4 	movhi	r4,1027
 400a258:	21360204 	addi	r4,r4,-10232
 400a25c:	4000ed80 	call	4000ed8 <_ZN3USB15getUsbTaskStateEv>
 400a260:	d0b237c5 	stb	r2,-14113(gp)
        if(usbstate != laststate) {
 400a264:	d0f237c3 	ldbu	r3,-14113(gp)
 400a268:	d0b23803 	ldbu	r2,-14112(gp)
 400a26c:	18c03fcc 	andi	r3,r3,255
 400a270:	10803fcc 	andi	r2,r2,255
 400a274:	1880fc26 	beq	r3,r2,400a668 <_Z9test_loopv+0x438>
                laststate = usbstate;
 400a278:	d0b237c3 	ldbu	r2,-14113(gp)
 400a27c:	d0b23805 	stb	r2,-14112(gp)
                /**/
                switch(usbstate) {
 400a280:	d0b237c3 	ldbu	r2,-14113(gp)
 400a284:	10803fcc 	andi	r2,r2,255
 400a288:	10c01820 	cmpeqi	r3,r2,96
 400a28c:	18001f1e 	bne	r3,zero,400a30c <_Z9test_loopv+0xdc>
 400a290:	10c01848 	cmpgei	r3,r2,97
 400a294:	1800071e 	bne	r3,zero,400a2b4 <_Z9test_loopv+0x84>
 400a298:	10c00c20 	cmpeqi	r3,r2,48
 400a29c:	1800111e 	bne	r3,zero,400a2e4 <_Z9test_loopv+0xb4>
 400a2a0:	10c01420 	cmpeqi	r3,r2,80
 400a2a4:	1800141e 	bne	r3,zero,400a2f8 <_Z9test_loopv+0xc8>
 400a2a8:	108004a0 	cmpeqi	r2,r2,18
 400a2ac:	1000081e 	bne	r2,zero,400a2d0 <_Z9test_loopv+0xa0>
                        case( USB_STATE_ERROR):
                                E_Notify(PSTR("\r\nUSB state machine reached error state"), 0x80);
                                break;

                        default:
                                break;
 400a2b0:	0000ed06 	br	400a668 <_Z9test_loopv+0x438>
        Usb.Task();
        usbstate = Usb.getUsbTaskState();
        if(usbstate != laststate) {
                laststate = usbstate;
                /**/
                switch(usbstate) {
 400a2b4:	10c02420 	cmpeqi	r3,r2,144
 400a2b8:	18001e1e 	bne	r3,zero,400a334 <_Z9test_loopv+0x104>
 400a2bc:	10c02820 	cmpeqi	r3,r2,160
 400a2c0:	1800e41e 	bne	r3,zero,400a654 <_Z9test_loopv+0x424>
 400a2c4:	10801c20 	cmpeqi	r2,r2,112
 400a2c8:	1000151e 	bne	r2,zero,400a320 <_Z9test_loopv+0xf0>
                        case( USB_STATE_ERROR):
                                E_Notify(PSTR("\r\nUSB state machine reached error state"), 0x80);
                                break;

                        default:
                                break;
 400a2cc:	0000e606 	br	400a668 <_Z9test_loopv+0x438>
        if(usbstate != laststate) {
                laststate = usbstate;
                /**/
                switch(usbstate) {
                        case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE):
                                E_Notify(PSTR("\r\nWaiting for device..."), 0x80);
 400a2d0:	01402004 	movi	r5,128
 400a2d4:	010100b4 	movhi	r4,1026
 400a2d8:	211ace04 	addi	r4,r4,27448
 400a2dc:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a2e0:	0000e106 	br	400a668 <_Z9test_loopv+0x438>
                        case( USB_ATTACHED_SUBSTATE_RESET_DEVICE):
                                E_Notify(PSTR("\r\nDevice connected. Resetting..."), 0x80);
 400a2e4:	01402004 	movi	r5,128
 400a2e8:	010100b4 	movhi	r4,1026
 400a2ec:	211ad404 	addi	r4,r4,27472
 400a2f0:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a2f4:	0000dc06 	br	400a668 <_Z9test_loopv+0x438>
                        case( USB_ATTACHED_SUBSTATE_WAIT_SOF):
                                E_Notify(PSTR("\r\nReset complete. Waiting for the first SOF..."), 0x80);
 400a2f8:	01402004 	movi	r5,128
 400a2fc:	010100b4 	movhi	r4,1026
 400a300:	211add04 	addi	r4,r4,27508
 400a304:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a308:	0000d706 	br	400a668 <_Z9test_loopv+0x438>
                        case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE):
                                E_Notify(PSTR("\r\nSOF generation started. Enumerating device..."), 0x80);
 400a30c:	01402004 	movi	r5,128
 400a310:	010100b4 	movhi	r4,1026
 400a314:	211ae904 	addi	r4,r4,27556
 400a318:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a31c:	0000d206 	br	400a668 <_Z9test_loopv+0x438>
                        case( USB_STATE_ADDRESSING):
                                E_Notify(PSTR("\r\nSetting device address..."), 0x80);
 400a320:	01402004 	movi	r5,128
 400a324:	010100b4 	movhi	r4,1026
 400a328:	211af504 	addi	r4,r4,27604
 400a32c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a330:	0000cd06 	br	400a668 <_Z9test_loopv+0x438>
                        case( USB_STATE_RUNNING):
                                E_Notify(PSTR("\r\nGetting device descriptor"), 0x80);
 400a334:	01402004 	movi	r5,128
 400a338:	010100b4 	movhi	r4,1026
 400a33c:	211afc04 	addi	r4,r4,27632
 400a340:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                rcode = Usb.getDevDescr(1, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*) & buf);
 400a344:	00800484 	movi	r2,18
 400a348:	10ffffcc 	andi	r3,r2,65535
 400a34c:	008100f4 	movhi	r2,1027
 400a350:	10b5fd04 	addi	r2,r2,-10252
 400a354:	d8800015 	stw	r2,0(sp)
 400a358:	180f883a 	mov	r7,r3
 400a35c:	000d883a 	mov	r6,zero
 400a360:	01400044 	movi	r5,1
 400a364:	010100f4 	movhi	r4,1027
 400a368:	21360204 	addi	r4,r4,-10232
 400a36c:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 400a370:	d0b23785 	stb	r2,-14114(gp)

                                if(rcode) {
 400a374:	d0b23783 	ldbu	r2,-14114(gp)
 400a378:	10803fcc 	andi	r2,r2,255
 400a37c:	10000a26 	beq	r2,zero,400a3a8 <_Z9test_loopv+0x178>
                                        E_Notify(PSTR("\r\nError reading device descriptor. Error code "), 0x80);
 400a380:	01402004 	movi	r5,128
 400a384:	010100b4 	movhi	r4,1026
 400a388:	211b0304 	addi	r4,r4,27660
 400a38c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(rcode, 8);
 400a390:	d0b23783 	ldbu	r2,-14114(gp)
 400a394:	10803fcc 	andi	r2,r2,255
 400a398:	01400204 	movi	r5,8
 400a39c:	1009883a 	mov	r4,r2
 400a3a0:	400a6d80 	call	400a6d8 <_Z9print_hexii>
#ifdef ESP8266
                                                yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif

                                }
                                break;
 400a3a4:	0000b006 	br	400a668 <_Z9test_loopv+0x438>
                                if(rcode) {
                                        E_Notify(PSTR("\r\nError reading device descriptor. Error code "), 0x80);
                                        print_hex(rcode, 8);
                                } else {
                                        /**/
                                        E_Notify(PSTR("\r\nDescriptor Length:\t"), 0x80);
 400a3a8:	01402004 	movi	r5,128
 400a3ac:	010100b4 	movhi	r4,1026
 400a3b0:	211b0f04 	addi	r4,r4,27708
 400a3b4:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bLength, 8);
 400a3b8:	008100f4 	movhi	r2,1027
 400a3bc:	10b5fd04 	addi	r2,r2,-10252
 400a3c0:	10800003 	ldbu	r2,0(r2)
 400a3c4:	10803fcc 	andi	r2,r2,255
 400a3c8:	01400204 	movi	r5,8
 400a3cc:	1009883a 	mov	r4,r2
 400a3d0:	400a6d80 	call	400a6d8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDescriptor type:\t"), 0x80);
 400a3d4:	01402004 	movi	r5,128
 400a3d8:	010100b4 	movhi	r4,1026
 400a3dc:	211b1504 	addi	r4,r4,27732
 400a3e0:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDescriptorType, 8);
 400a3e4:	008100f4 	movhi	r2,1027
 400a3e8:	10b5fd04 	addi	r2,r2,-10252
 400a3ec:	10800043 	ldbu	r2,1(r2)
 400a3f0:	10803fcc 	andi	r2,r2,255
 400a3f4:	01400204 	movi	r5,8
 400a3f8:	1009883a 	mov	r4,r2
 400a3fc:	400a6d80 	call	400a6d8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nUSB version:\t\t"), 0x80);
 400a400:	01402004 	movi	r5,128
 400a404:	010100b4 	movhi	r4,1026
 400a408:	211b1a04 	addi	r4,r4,27752
 400a40c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bcdUSB, 16);
 400a410:	008100f4 	movhi	r2,1027
 400a414:	10b5fd04 	addi	r2,r2,-10252
 400a418:	10c00083 	ldbu	r3,2(r2)
 400a41c:	108000c3 	ldbu	r2,3(r2)
 400a420:	1004923a 	slli	r2,r2,8
 400a424:	10c4b03a 	or	r2,r2,r3
 400a428:	10bfffcc 	andi	r2,r2,65535
 400a42c:	01400404 	movi	r5,16
 400a430:	1009883a 	mov	r4,r2
 400a434:	400a6d80 	call	400a6d8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDevice class:\t\t"), 0x80);
 400a438:	01402004 	movi	r5,128
 400a43c:	010100b4 	movhi	r4,1026
 400a440:	211b1f04 	addi	r4,r4,27772
 400a444:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDeviceClass, 8);
 400a448:	008100f4 	movhi	r2,1027
 400a44c:	10b5fd04 	addi	r2,r2,-10252
 400a450:	10800103 	ldbu	r2,4(r2)
 400a454:	10803fcc 	andi	r2,r2,255
 400a458:	01400204 	movi	r5,8
 400a45c:	1009883a 	mov	r4,r2
 400a460:	400a6d80 	call	400a6d8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDevice Subclass:\t"), 0x80);
 400a464:	01402004 	movi	r5,128
 400a468:	010100b4 	movhi	r4,1026
 400a46c:	211b2404 	addi	r4,r4,27792
 400a470:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDeviceSubClass, 8);
 400a474:	008100f4 	movhi	r2,1027
 400a478:	10b5fd04 	addi	r2,r2,-10252
 400a47c:	10800143 	ldbu	r2,5(r2)
 400a480:	10803fcc 	andi	r2,r2,255
 400a484:	01400204 	movi	r5,8
 400a488:	1009883a 	mov	r4,r2
 400a48c:	400a6d80 	call	400a6d8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDevice Protocol:\t"), 0x80);
 400a490:	01402004 	movi	r5,128
 400a494:	010100b4 	movhi	r4,1026
 400a498:	211b2904 	addi	r4,r4,27812
 400a49c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDeviceProtocol, 8);
 400a4a0:	008100f4 	movhi	r2,1027
 400a4a4:	10b5fd04 	addi	r2,r2,-10252
 400a4a8:	10800183 	ldbu	r2,6(r2)
 400a4ac:	10803fcc 	andi	r2,r2,255
 400a4b0:	01400204 	movi	r5,8
 400a4b4:	1009883a 	mov	r4,r2
 400a4b8:	400a6d80 	call	400a6d8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nMax.packet size:\t"), 0x80);
 400a4bc:	01402004 	movi	r5,128
 400a4c0:	010100b4 	movhi	r4,1026
 400a4c4:	211b2e04 	addi	r4,r4,27832
 400a4c8:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bMaxPacketSize0, 8);
 400a4cc:	008100f4 	movhi	r2,1027
 400a4d0:	10b5fd04 	addi	r2,r2,-10252
 400a4d4:	108001c3 	ldbu	r2,7(r2)
 400a4d8:	10803fcc 	andi	r2,r2,255
 400a4dc:	01400204 	movi	r5,8
 400a4e0:	1009883a 	mov	r4,r2
 400a4e4:	400a6d80 	call	400a6d8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nVendor  ID:\t\t"), 0x80);
 400a4e8:	01402004 	movi	r5,128
 400a4ec:	010100b4 	movhi	r4,1026
 400a4f0:	211b3304 	addi	r4,r4,27852
 400a4f4:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.idVendor, 16);
 400a4f8:	008100f4 	movhi	r2,1027
 400a4fc:	10b5fd04 	addi	r2,r2,-10252
 400a500:	10c00203 	ldbu	r3,8(r2)
 400a504:	10800243 	ldbu	r2,9(r2)
 400a508:	1004923a 	slli	r2,r2,8
 400a50c:	10c4b03a 	or	r2,r2,r3
 400a510:	10bfffcc 	andi	r2,r2,65535
 400a514:	01400404 	movi	r5,16
 400a518:	1009883a 	mov	r4,r2
 400a51c:	400a6d80 	call	400a6d8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nProduct ID:\t\t"), 0x80);
 400a520:	01402004 	movi	r5,128
 400a524:	010100b4 	movhi	r4,1026
 400a528:	211b3704 	addi	r4,r4,27868
 400a52c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.idProduct, 16);
 400a530:	008100f4 	movhi	r2,1027
 400a534:	10b5fd04 	addi	r2,r2,-10252
 400a538:	10c00283 	ldbu	r3,10(r2)
 400a53c:	108002c3 	ldbu	r2,11(r2)
 400a540:	1004923a 	slli	r2,r2,8
 400a544:	10c4b03a 	or	r2,r2,r3
 400a548:	10bfffcc 	andi	r2,r2,65535
 400a54c:	01400404 	movi	r5,16
 400a550:	1009883a 	mov	r4,r2
 400a554:	400a6d80 	call	400a6d8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nRevision ID:\t\t"), 0x80);
 400a558:	01402004 	movi	r5,128
 400a55c:	010100b4 	movhi	r4,1026
 400a560:	211b3b04 	addi	r4,r4,27884
 400a564:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bcdDevice, 16);
 400a568:	008100f4 	movhi	r2,1027
 400a56c:	10b5fd04 	addi	r2,r2,-10252
 400a570:	10c00303 	ldbu	r3,12(r2)
 400a574:	10800343 	ldbu	r2,13(r2)
 400a578:	1004923a 	slli	r2,r2,8
 400a57c:	10c4b03a 	or	r2,r2,r3
 400a580:	10bfffcc 	andi	r2,r2,65535
 400a584:	01400404 	movi	r5,16
 400a588:	1009883a 	mov	r4,r2
 400a58c:	400a6d80 	call	400a6d8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nMfg.string index:\t"), 0x80);
 400a590:	01402004 	movi	r5,128
 400a594:	010100b4 	movhi	r4,1026
 400a598:	211b4004 	addi	r4,r4,27904
 400a59c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.iManufacturer, 8);
 400a5a0:	008100f4 	movhi	r2,1027
 400a5a4:	10b5fd04 	addi	r2,r2,-10252
 400a5a8:	10800383 	ldbu	r2,14(r2)
 400a5ac:	10803fcc 	andi	r2,r2,255
 400a5b0:	01400204 	movi	r5,8
 400a5b4:	1009883a 	mov	r4,r2
 400a5b8:	400a6d80 	call	400a6d8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nProd.string index:\t"), 0x80);
 400a5bc:	01402004 	movi	r5,128
 400a5c0:	010100b4 	movhi	r4,1026
 400a5c4:	211b4604 	addi	r4,r4,27928
 400a5c8:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.iProduct, 8);
 400a5cc:	008100f4 	movhi	r2,1027
 400a5d0:	10b5fd04 	addi	r2,r2,-10252
 400a5d4:	108003c3 	ldbu	r2,15(r2)
 400a5d8:	10803fcc 	andi	r2,r2,255
 400a5dc:	01400204 	movi	r5,8
 400a5e0:	1009883a 	mov	r4,r2
 400a5e4:	400a6d80 	call	400a6d8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nSerial number index:\t"), 0x80);
 400a5e8:	01402004 	movi	r5,128
 400a5ec:	010100b4 	movhi	r4,1026
 400a5f0:	211b4c04 	addi	r4,r4,27952
 400a5f4:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.iSerialNumber, 8);
 400a5f8:	008100f4 	movhi	r2,1027
 400a5fc:	10b5fd04 	addi	r2,r2,-10252
 400a600:	10800403 	ldbu	r2,16(r2)
 400a604:	10803fcc 	andi	r2,r2,255
 400a608:	01400204 	movi	r5,8
 400a60c:	1009883a 	mov	r4,r2
 400a610:	400a6d80 	call	400a6d8 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nNumber of conf.:\t"), 0x80);
 400a614:	01402004 	movi	r5,128
 400a618:	010100b4 	movhi	r4,1026
 400a61c:	211b5204 	addi	r4,r4,27976
 400a620:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bNumConfigurations, 8);
 400a624:	008100f4 	movhi	r2,1027
 400a628:	10b5fd04 	addi	r2,r2,-10252
 400a62c:	10800443 	ldbu	r2,17(r2)
 400a630:	10803fcc 	andi	r2,r2,255
 400a634:	01400204 	movi	r5,8
 400a638:	1009883a 	mov	r4,r2
 400a63c:	400a6d80 	call	400a6d8 <_Z9print_hexii>
                                        /**/
                                        E_Notify(PSTR("\r\n\nAll tests passed. Press RESET to restart test"), 0x80);
 400a640:	01402004 	movi	r5,128
 400a644:	010100b4 	movhi	r4,1026
 400a648:	211b5704 	addi	r4,r4,27996
 400a64c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
#ifdef ESP8266
                                                yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif

                                }
                                break;
 400a650:	00000506 	br	400a668 <_Z9test_loopv+0x438>
                        case( USB_STATE_ERROR):
                                E_Notify(PSTR("\r\nUSB state machine reached error state"), 0x80);
 400a654:	01402004 	movi	r5,128
 400a658:	010100b4 	movhi	r4,1026
 400a65c:	211b6404 	addi	r4,r4,28048
 400a660:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a664:	0001883a 	nop

                        default:
                                break;
                }//switch( usbstate...
        }
}//loop()...
 400a668:	0001883a 	nop
 400a66c:	e037883a 	mov	sp,fp
 400a670:	dfc00117 	ldw	ra,4(sp)
 400a674:	df000017 	ldw	fp,0(sp)
 400a678:	dec00204 	addi	sp,sp,8
 400a67c:	f800283a 	ret

0400a680 <_Z6halt55v>:

/* constantly transmits 0x55 via SPI to aid probing */
void halt55() {
 400a680:	defffe04 	addi	sp,sp,-8
 400a684:	dfc00115 	stw	ra,4(sp)
 400a688:	df000015 	stw	fp,0(sp)
 400a68c:	d839883a 	mov	fp,sp

        E_Notify(PSTR("\r\nUnrecoverable error - test halted!!"), 0x80);
 400a690:	01402004 	movi	r5,128
 400a694:	010100b4 	movhi	r4,1026
 400a698:	211b6e04 	addi	r4,r4,28088
 400a69c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
        E_Notify(PSTR("\r\n0x55 pattern is transmitted via SPI"), 0x80);
 400a6a0:	01402004 	movi	r5,128
 400a6a4:	010100b4 	movhi	r4,1026
 400a6a8:	211b7804 	addi	r4,r4,28128
 400a6ac:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
        E_Notify(PSTR("\r\nPress RESET to restart test"), 0x80);
 400a6b0:	01402004 	movi	r5,128
 400a6b4:	010100b4 	movhi	r4,1026
 400a6b8:	211b8204 	addi	r4,r4,28168
 400a6bc:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>

        while(1) {
                Usb.regWr(0x55, 0x55);
 400a6c0:	01801544 	movi	r6,85
 400a6c4:	01401544 	movi	r5,85
 400a6c8:	010100f4 	movhi	r4,1027
 400a6cc:	21360204 	addi	r4,r4,-10232
 400a6d0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        E_Notify(PSTR("\r\nUnrecoverable error - test halted!!"), 0x80);
        E_Notify(PSTR("\r\n0x55 pattern is transmitted via SPI"), 0x80);
        E_Notify(PSTR("\r\nPress RESET to restart test"), 0x80);

        while(1) {
 400a6d4:	003ffa06 	br	400a6c0 <__alt_mem_onchip_memory2_0+0xfc009440>

0400a6d8 <_Z9print_hexii>:
#endif
        }
}

/* prints hex numbers with leading zeroes */
void print_hex(int v, int num_places) {
 400a6d8:	defff804 	addi	sp,sp,-32
 400a6dc:	dfc00715 	stw	ra,28(sp)
 400a6e0:	df000615 	stw	fp,24(sp)
 400a6e4:	df000604 	addi	fp,sp,24
 400a6e8:	e13ffe15 	stw	r4,-8(fp)
 400a6ec:	e17fff15 	stw	r5,-4(fp)
        int mask = 0, n, num_nibbles, digit;
 400a6f0:	e03ffa15 	stw	zero,-24(fp)

        for(n = 1; n <= num_places; n++) {
 400a6f4:	00800044 	movi	r2,1
 400a6f8:	e0bffb15 	stw	r2,-20(fp)
 400a6fc:	e0bffb17 	ldw	r2,-20(fp)
 400a700:	e0ffff17 	ldw	r3,-4(fp)
 400a704:	18800816 	blt	r3,r2,400a728 <_Z9print_hexii+0x50>
                mask = (mask << 1) | 0x0001;
 400a708:	e0bffa17 	ldw	r2,-24(fp)
 400a70c:	1085883a 	add	r2,r2,r2
 400a710:	10800054 	ori	r2,r2,1
 400a714:	e0bffa15 	stw	r2,-24(fp)

/* prints hex numbers with leading zeroes */
void print_hex(int v, int num_places) {
        int mask = 0, n, num_nibbles, digit;

        for(n = 1; n <= num_places; n++) {
 400a718:	e0bffb17 	ldw	r2,-20(fp)
 400a71c:	10800044 	addi	r2,r2,1
 400a720:	e0bffb15 	stw	r2,-20(fp)
 400a724:	003ff506 	br	400a6fc <__alt_mem_onchip_memory2_0+0xfc00947c>
                mask = (mask << 1) | 0x0001;
        }
        v = v & mask; // truncate v to specified number of places
 400a728:	e0fffe17 	ldw	r3,-8(fp)
 400a72c:	e0bffa17 	ldw	r2,-24(fp)
 400a730:	1884703a 	and	r2,r3,r2
 400a734:	e0bffe15 	stw	r2,-8(fp)

        num_nibbles = num_places / 4;
 400a738:	e0bfff17 	ldw	r2,-4(fp)
 400a73c:	1000010e 	bge	r2,zero,400a744 <_Z9print_hexii+0x6c>
 400a740:	108000c4 	addi	r2,r2,3
 400a744:	1005d0ba 	srai	r2,r2,2
 400a748:	e0bffc15 	stw	r2,-16(fp)
        if((num_places % 4) != 0) {
 400a74c:	e0bfff17 	ldw	r2,-4(fp)
 400a750:	108000cc 	andi	r2,r2,3
 400a754:	10000326 	beq	r2,zero,400a764 <_Z9print_hexii+0x8c>
                ++num_nibbles;
 400a758:	e0bffc17 	ldw	r2,-16(fp)
 400a75c:	10800044 	addi	r2,r2,1
 400a760:	e0bffc15 	stw	r2,-16(fp)
        }
        do {
                digit = ((v >> (num_nibbles - 1) * 4)) & 0x0f;
 400a764:	e0bffc17 	ldw	r2,-16(fp)
 400a768:	10bfffc4 	addi	r2,r2,-1
 400a76c:	1085883a 	add	r2,r2,r2
 400a770:	1085883a 	add	r2,r2,r2
 400a774:	1007883a 	mov	r3,r2
 400a778:	e0bffe17 	ldw	r2,-8(fp)
 400a77c:	10c5d83a 	sra	r2,r2,r3
 400a780:	108003cc 	andi	r2,r2,15
 400a784:	e0bffd15 	stw	r2,-12(fp)
                printf("%x\n", digit);
 400a788:	e17ffd17 	ldw	r5,-12(fp)
 400a78c:	010100b4 	movhi	r4,1026
 400a790:	211b8a04 	addi	r4,r4,28200
 400a794:	400eed80 	call	400eed8 <printf>

        num_nibbles = num_places / 4;
        if((num_places % 4) != 0) {
                ++num_nibbles;
        }
        do {
 400a798:	e0bffc17 	ldw	r2,-16(fp)
 400a79c:	10bfffc4 	addi	r2,r2,-1
 400a7a0:	e0bffc15 	stw	r2,-16(fp)
 400a7a4:	e0bffc17 	ldw	r2,-16(fp)
 400a7a8:	1004c03a 	cmpne	r2,r2,zero
 400a7ac:	10803fcc 	andi	r2,r2,255
 400a7b0:	10000126 	beq	r2,zero,400a7b8 <_Z9print_hexii+0xe0>
 400a7b4:	003feb06 	br	400a764 <__alt_mem_onchip_memory2_0+0xfc0094e4>
                digit = ((v >> (num_nibbles - 1) * 4)) & 0x0f;
                printf("%x\n", digit);
        } while(--num_nibbles);
}
 400a7b8:	0001883a 	nop
 400a7bc:	e037883a 	mov	sp,fp
 400a7c0:	dfc00117 	ldw	ra,4(sp)
 400a7c4:	df000017 	ldw	fp,0(sp)
 400a7c8:	dec00204 	addi	sp,sp,8
 400a7cc:	f800283a 	ret

0400a7d0 <_Z13press_any_keyv>:

/* prints "Press any key" and returns when key is pressed */
void press_any_key() {
 400a7d0:	defffe04 	addi	sp,sp,-8
 400a7d4:	dfc00115 	stw	ra,4(sp)
 400a7d8:	df000015 	stw	fp,0(sp)
 400a7dc:	d839883a 	mov	fp,sp
        E_Notify(PSTR("\r\nPress any key to continue..."), 0x80);
 400a7e0:	01402004 	movi	r5,128
 400a7e4:	010100b4 	movhi	r4,1026
 400a7e8:	211b8b04 	addi	r4,r4,28204
 400a7ec:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
//        char x;
//        scanf("%s", &x);
}
 400a7f0:	0001883a 	nop
 400a7f4:	e037883a 	mov	sp,fp
 400a7f8:	dfc00117 	ldw	ra,4(sp)
 400a7fc:	df000017 	ldw	fp,0(sp)
 400a800:	dec00204 	addi	sp,sp,8
 400a804:	f800283a 	ret

0400a808 <_Z41__static_initialization_and_destruction_0ii>:
 400a808:	defffc04 	addi	sp,sp,-16
 400a80c:	dfc00315 	stw	ra,12(sp)
 400a810:	df000215 	stw	fp,8(sp)
 400a814:	df000204 	addi	fp,sp,8
 400a818:	e13ffe15 	stw	r4,-8(fp)
 400a81c:	e17fff15 	stw	r5,-4(fp)
 400a820:	e0bffe17 	ldw	r2,-8(fp)
 400a824:	10800058 	cmpnei	r2,r2,1
 400a828:	1000061e 	bne	r2,zero,400a844 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 400a82c:	e0ffff17 	ldw	r3,-4(fp)
 400a830:	00bfffd4 	movui	r2,65535
 400a834:	1880031e 	bne	r3,r2,400a844 <_Z41__static_initialization_and_destruction_0ii+0x3c>
uint8_t rcode;
uint8_t usbstate;
uint8_t laststate;
//uint8_t buf[sizeof(USB_DEVICE_DESCRIPTOR)];
USB_DEVICE_DESCRIPTOR buf;
USB Usb;
 400a838:	010100f4 	movhi	r4,1027
 400a83c:	21360204 	addi	r4,r4,-10232
 400a840:	4000e540 	call	4000e54 <_ZN3USBC1Ev>
/* prints "Press any key" and returns when key is pressed */
void press_any_key() {
        E_Notify(PSTR("\r\nPress any key to continue..."), 0x80);
//        char x;
//        scanf("%s", &x);
}
 400a844:	0001883a 	nop
 400a848:	e037883a 	mov	sp,fp
 400a84c:	dfc00117 	ldw	ra,4(sp)
 400a850:	df000017 	ldw	fp,0(sp)
 400a854:	dec00204 	addi	sp,sp,8
 400a858:	f800283a 	ret

0400a85c <_GLOBAL__sub_I_rcode>:
 400a85c:	defffe04 	addi	sp,sp,-8
 400a860:	dfc00115 	stw	ra,4(sp)
 400a864:	df000015 	stw	fp,0(sp)
 400a868:	d839883a 	mov	fp,sp
 400a86c:	017fffd4 	movui	r5,65535
 400a870:	01000044 	movi	r4,1
 400a874:	400a8080 	call	400a808 <_Z41__static_initialization_and_destruction_0ii>
 400a878:	e037883a 	mov	sp,fp
 400a87c:	dfc00117 	ldw	ra,4(sp)
 400a880:	df000017 	ldw	fp,0(sp)
 400a884:	dec00204 	addi	sp,sp,8
 400a888:	f800283a 	ret

0400a88c <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
 400a88c:	defffe04 	addi	sp,sp,-8
 400a890:	df000115 	stw	fp,4(sp)
 400a894:	df000104 	addi	fp,sp,4
 400a898:	e13fff15 	stw	r4,-4(fp)
 400a89c:	e0bfff17 	ldw	r2,-4(fp)
 400a8a0:	10800343 	ldbu	r2,13(r2)
 400a8a4:	e037883a 	mov	sp,fp
 400a8a8:	df000017 	ldw	fp,0(sp)
 400a8ac:	dec00104 	addi	sp,sp,4
 400a8b0:	f800283a 	ret

0400a8b4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 400a8b4:	008100b4 	movhi	r2,1026
 400a8b8:	109ba204 	addi	r2,r2,28296
 400a8bc:	20800015 	stw	r2,0(r4)
 400a8c0:	400b68c1 	jmpi	400b68c <_ZN10__cxxabiv117__class_type_infoD1Ev>

0400a8c4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 400a8c4:	defffe04 	addi	sp,sp,-8
 400a8c8:	008100b4 	movhi	r2,1026
 400a8cc:	dc000015 	stw	r16,0(sp)
 400a8d0:	dfc00115 	stw	ra,4(sp)
 400a8d4:	109ba204 	addi	r2,r2,28296
 400a8d8:	20800015 	stw	r2,0(r4)
 400a8dc:	2021883a 	mov	r16,r4
 400a8e0:	400b68c0 	call	400b68c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 400a8e4:	8009883a 	mov	r4,r16
 400a8e8:	dfc00117 	ldw	ra,4(sp)
 400a8ec:	dc000017 	ldw	r16,0(sp)
 400a8f0:	dec00204 	addi	sp,sp,8
 400a8f4:	400b5b81 	jmpi	400b5b8 <_ZdlPv>

0400a8f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 400a8f8:	defff504 	addi	sp,sp,-44
 400a8fc:	dc000115 	stw	r16,4(sp)
 400a900:	38800117 	ldw	r2,4(r7)
 400a904:	24000117 	ldw	r16,4(r4)
 400a908:	df000915 	stw	fp,36(sp)
 400a90c:	ddc00815 	stw	r23,32(sp)
 400a910:	dd800715 	stw	r22,28(sp)
 400a914:	dcc00415 	stw	r19,16(sp)
 400a918:	dc800315 	stw	r18,12(sp)
 400a91c:	dc400215 	stw	r17,8(sp)
 400a920:	dfc00a15 	stw	ra,40(sp)
 400a924:	dd400615 	stw	r21,24(sp)
 400a928:	dd000515 	stw	r20,20(sp)
 400a92c:	2823883a 	mov	r17,r5
 400a930:	3039883a 	mov	fp,r6
 400a934:	dcc00b17 	ldw	r19,44(sp)
 400a938:	ddc00c17 	ldw	r23,48(sp)
 400a93c:	dd800d17 	ldw	r22,52(sp)
 400a940:	dc800e17 	ldw	r18,56(sp)
 400a944:	80800b26 	beq	r16,r2,400a974 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
 400a948:	80c00007 	ldb	r3,0(r16)
 400a94c:	2029883a 	mov	r20,r4
 400a950:	01000a84 	movi	r4,42
 400a954:	382b883a 	mov	r21,r7
 400a958:	19001a26 	beq	r3,r4,400a9c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 400a95c:	100b883a 	mov	r5,r2
 400a960:	8009883a 	mov	r4,r16
 400a964:	d8c00015 	stw	r3,0(sp)
 400a968:	400f3600 	call	400f360 <strcmp>
 400a96c:	d8c00017 	ldw	r3,0(sp)
 400a970:	1000141e 	bne	r2,zero,400a9c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 400a974:	94c00015 	stw	r19,0(r18)
 400a978:	97000115 	stw	fp,4(r18)
 400a97c:	88002816 	blt	r17,zero,400aa20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
 400a980:	9c63883a 	add	r17,r19,r17
 400a984:	b4403226 	beq	r22,r17,400aa50 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
 400a988:	00800044 	movi	r2,1
 400a98c:	90800315 	stw	r2,12(r18)
 400a990:	0005883a 	mov	r2,zero
 400a994:	dfc00a17 	ldw	ra,40(sp)
 400a998:	df000917 	ldw	fp,36(sp)
 400a99c:	ddc00817 	ldw	r23,32(sp)
 400a9a0:	dd800717 	ldw	r22,28(sp)
 400a9a4:	dd400617 	ldw	r21,24(sp)
 400a9a8:	dd000517 	ldw	r20,20(sp)
 400a9ac:	dcc00417 	ldw	r19,16(sp)
 400a9b0:	dc800317 	ldw	r18,12(sp)
 400a9b4:	dc400217 	ldw	r17,8(sp)
 400a9b8:	dc000117 	ldw	r16,4(sp)
 400a9bc:	dec00b04 	addi	sp,sp,44
 400a9c0:	f800283a 	ret
 400a9c4:	9d801926 	beq	r19,r22,400aa2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 400a9c8:	a1000217 	ldw	r4,8(r20)
 400a9cc:	a80f883a 	mov	r7,r21
 400a9d0:	e00d883a 	mov	r6,fp
 400a9d4:	20800017 	ldw	r2,0(r4)
 400a9d8:	dc800e15 	stw	r18,56(sp)
 400a9dc:	dd800d15 	stw	r22,52(sp)
 400a9e0:	ddc00c15 	stw	r23,48(sp)
 400a9e4:	dcc00b15 	stw	r19,44(sp)
 400a9e8:	10800717 	ldw	r2,28(r2)
 400a9ec:	880b883a 	mov	r5,r17
 400a9f0:	dfc00a17 	ldw	ra,40(sp)
 400a9f4:	df000917 	ldw	fp,36(sp)
 400a9f8:	ddc00817 	ldw	r23,32(sp)
 400a9fc:	dd800717 	ldw	r22,28(sp)
 400aa00:	dd400617 	ldw	r21,24(sp)
 400aa04:	dd000517 	ldw	r20,20(sp)
 400aa08:	dcc00417 	ldw	r19,16(sp)
 400aa0c:	dc800317 	ldw	r18,12(sp)
 400aa10:	dc400217 	ldw	r17,8(sp)
 400aa14:	dc000117 	ldw	r16,4(sp)
 400aa18:	dec00b04 	addi	sp,sp,44
 400aa1c:	1000683a 	jmp	r2
 400aa20:	00bfff84 	movi	r2,-2
 400aa24:	88bfda1e 	bne	r17,r2,400a990 <__alt_mem_onchip_memory2_0+0xfc009710>
 400aa28:	003fd706 	br	400a988 <__alt_mem_onchip_memory2_0+0xfc009708>
 400aa2c:	b9400117 	ldw	r5,4(r23)
 400aa30:	81400526 	beq	r16,r5,400aa48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 400aa34:	00800a84 	movi	r2,42
 400aa38:	18bfe326 	beq	r3,r2,400a9c8 <__alt_mem_onchip_memory2_0+0xfc009748>
 400aa3c:	8009883a 	mov	r4,r16
 400aa40:	400f3600 	call	400f360 <strcmp>
 400aa44:	103fe01e 	bne	r2,zero,400a9c8 <__alt_mem_onchip_memory2_0+0xfc009748>
 400aa48:	97000215 	stw	fp,8(r18)
 400aa4c:	003fd006 	br	400a990 <__alt_mem_onchip_memory2_0+0xfc009710>
 400aa50:	00800184 	movi	r2,6
 400aa54:	003fcd06 	br	400a98c <__alt_mem_onchip_memory2_0+0xfc00970c>

0400aa58 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 400aa58:	defffa04 	addi	sp,sp,-24
 400aa5c:	dc000215 	stw	r16,8(sp)
 400aa60:	dc000617 	ldw	r16,24(sp)
 400aa64:	dc800415 	stw	r18,16(sp)
 400aa68:	dc400315 	stw	r17,12(sp)
 400aa6c:	dfc00515 	stw	ra,20(sp)
 400aa70:	2023883a 	mov	r17,r4
 400aa74:	2825883a 	mov	r18,r5
 400aa78:	81800b26 	beq	r16,r6,400aaa8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
 400aa7c:	89000217 	ldw	r4,8(r17)
 400aa80:	900b883a 	mov	r5,r18
 400aa84:	20800017 	ldw	r2,0(r4)
 400aa88:	dc000615 	stw	r16,24(sp)
 400aa8c:	10800817 	ldw	r2,32(r2)
 400aa90:	dfc00517 	ldw	ra,20(sp)
 400aa94:	dc800417 	ldw	r18,16(sp)
 400aa98:	dc400317 	ldw	r17,12(sp)
 400aa9c:	dc000217 	ldw	r16,8(sp)
 400aaa0:	dec00604 	addi	sp,sp,24
 400aaa4:	1000683a 	jmp	r2
 400aaa8:	21000117 	ldw	r4,4(r4)
 400aaac:	39400117 	ldw	r5,4(r7)
 400aab0:	21400926 	beq	r4,r5,400aad8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
 400aab4:	20c00007 	ldb	r3,0(r4)
 400aab8:	00800a84 	movi	r2,42
 400aabc:	18bfef26 	beq	r3,r2,400aa7c <__alt_mem_onchip_memory2_0+0xfc0097fc>
 400aac0:	d9800015 	stw	r6,0(sp)
 400aac4:	d9c00115 	stw	r7,4(sp)
 400aac8:	400f3600 	call	400f360 <strcmp>
 400aacc:	d9800017 	ldw	r6,0(sp)
 400aad0:	d9c00117 	ldw	r7,4(sp)
 400aad4:	103fe91e 	bne	r2,zero,400aa7c <__alt_mem_onchip_memory2_0+0xfc0097fc>
 400aad8:	00800184 	movi	r2,6
 400aadc:	dfc00517 	ldw	ra,20(sp)
 400aae0:	dc800417 	ldw	r18,16(sp)
 400aae4:	dc400317 	ldw	r17,12(sp)
 400aae8:	dc000217 	ldw	r16,8(sp)
 400aaec:	dec00604 	addi	sp,sp,24
 400aaf0:	f800283a 	ret

0400aaf4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 400aaf4:	defffb04 	addi	sp,sp,-20
 400aaf8:	dcc00315 	stw	r19,12(sp)
 400aafc:	dc800215 	stw	r18,8(sp)
 400ab00:	dc400115 	stw	r17,4(sp)
 400ab04:	dc000015 	stw	r16,0(sp)
 400ab08:	dfc00415 	stw	ra,16(sp)
 400ab0c:	2027883a 	mov	r19,r4
 400ab10:	2821883a 	mov	r16,r5
 400ab14:	3023883a 	mov	r17,r6
 400ab18:	3825883a 	mov	r18,r7
 400ab1c:	400b6d00 	call	400b6d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 400ab20:	10c03fcc 	andi	r3,r2,255
 400ab24:	18000726 	beq	r3,zero,400ab44 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
 400ab28:	dfc00417 	ldw	ra,16(sp)
 400ab2c:	dcc00317 	ldw	r19,12(sp)
 400ab30:	dc800217 	ldw	r18,8(sp)
 400ab34:	dc400117 	ldw	r17,4(sp)
 400ab38:	dc000017 	ldw	r16,0(sp)
 400ab3c:	dec00504 	addi	sp,sp,20
 400ab40:	f800283a 	ret
 400ab44:	99000217 	ldw	r4,8(r19)
 400ab48:	900f883a 	mov	r7,r18
 400ab4c:	880d883a 	mov	r6,r17
 400ab50:	20800017 	ldw	r2,0(r4)
 400ab54:	800b883a 	mov	r5,r16
 400ab58:	10800617 	ldw	r2,24(r2)
 400ab5c:	dfc00417 	ldw	ra,16(sp)
 400ab60:	dcc00317 	ldw	r19,12(sp)
 400ab64:	dc800217 	ldw	r18,8(sp)
 400ab68:	dc400117 	ldw	r17,4(sp)
 400ab6c:	dc000017 	ldw	r16,0(sp)
 400ab70:	dec00504 	addi	sp,sp,20
 400ab74:	1000683a 	jmp	r2

0400ab78 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 400ab78:	008100b4 	movhi	r2,1026
 400ab7c:	109bba04 	addi	r2,r2,28392
 400ab80:	20800015 	stw	r2,0(r4)
 400ab84:	400b68c1 	jmpi	400b68c <_ZN10__cxxabiv117__class_type_infoD1Ev>

0400ab88 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 400ab88:	defffe04 	addi	sp,sp,-8
 400ab8c:	008100b4 	movhi	r2,1026
 400ab90:	dc000015 	stw	r16,0(sp)
 400ab94:	dfc00115 	stw	ra,4(sp)
 400ab98:	109bba04 	addi	r2,r2,28392
 400ab9c:	20800015 	stw	r2,0(r4)
 400aba0:	2021883a 	mov	r16,r4
 400aba4:	400b68c0 	call	400b68c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 400aba8:	8009883a 	mov	r4,r16
 400abac:	dfc00117 	ldw	ra,4(sp)
 400abb0:	dc000017 	ldw	r16,0(sp)
 400abb4:	dec00204 	addi	sp,sp,8
 400abb8:	400b5b81 	jmpi	400b5b8 <_ZdlPv>

0400abbc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 400abbc:	defff504 	addi	sp,sp,-44
 400abc0:	dc400215 	stw	r17,8(sp)
 400abc4:	dc400b17 	ldw	r17,44(sp)
 400abc8:	df000915 	stw	fp,36(sp)
 400abcc:	ddc00815 	stw	r23,32(sp)
 400abd0:	dd800715 	stw	r22,28(sp)
 400abd4:	dc000115 	stw	r16,4(sp)
 400abd8:	dfc00a15 	stw	ra,40(sp)
 400abdc:	dd400615 	stw	r21,24(sp)
 400abe0:	dd000515 	stw	r20,20(sp)
 400abe4:	dcc00415 	stw	r19,16(sp)
 400abe8:	dc800315 	stw	r18,12(sp)
 400abec:	3039883a 	mov	fp,r6
 400abf0:	2021883a 	mov	r16,r4
 400abf4:	282d883a 	mov	r22,r5
 400abf8:	382f883a 	mov	r23,r7
 400abfc:	34402c26 	beq	r6,r17,400acb0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
 400ac00:	85000317 	ldw	r20,12(r16)
 400ac04:	048000c4 	movi	r18,3
 400ac08:	04ffff44 	movi	r19,-3
 400ac0c:	a484983a 	sll	r2,r20,r18
 400ac10:	b80f883a 	mov	r7,r23
 400ac14:	b00b883a 	mov	r5,r22
 400ac18:	10800304 	addi	r2,r2,12
 400ac1c:	80a1883a 	add	r16,r16,r2
 400ac20:	a0001626 	beq	r20,zero,400ac7c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
 400ac24:	81800017 	ldw	r6,0(r16)
 400ac28:	a53fffc4 	addi	r20,r20,-1
 400ac2c:	3080008c 	andi	r2,r6,2
 400ac30:	3540004c 	andi	r21,r6,1
 400ac34:	10000d26 	beq	r2,zero,400ac6c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
 400ac38:	300dd23a 	srai	r6,r6,8
 400ac3c:	a8000426 	beq	r21,zero,400ac50 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
 400ac40:	b4c00a26 	beq	r22,r19,400ac6c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
 400ac44:	e0800017 	ldw	r2,0(fp)
 400ac48:	118d883a 	add	r6,r2,r6
 400ac4c:	31800017 	ldw	r6,0(r6)
 400ac50:	813fff17 	ldw	r4,-4(r16)
 400ac54:	e18d883a 	add	r6,fp,r6
 400ac58:	20800017 	ldw	r2,0(r4)
 400ac5c:	dc400015 	stw	r17,0(sp)
 400ac60:	10800817 	ldw	r2,32(r2)
 400ac64:	103ee83a 	callr	r2
 400ac68:	90801b16 	blt	r18,r2,400acd8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
 400ac6c:	843ffe04 	addi	r16,r16,-8
 400ac70:	b80f883a 	mov	r7,r23
 400ac74:	b00b883a 	mov	r5,r22
 400ac78:	a03fea1e 	bne	r20,zero,400ac24 <__alt_mem_onchip_memory2_0+0xfc0099a4>
 400ac7c:	00800044 	movi	r2,1
 400ac80:	dfc00a17 	ldw	ra,40(sp)
 400ac84:	df000917 	ldw	fp,36(sp)
 400ac88:	ddc00817 	ldw	r23,32(sp)
 400ac8c:	dd800717 	ldw	r22,28(sp)
 400ac90:	dd400617 	ldw	r21,24(sp)
 400ac94:	dd000517 	ldw	r20,20(sp)
 400ac98:	dcc00417 	ldw	r19,16(sp)
 400ac9c:	dc800317 	ldw	r18,12(sp)
 400aca0:	dc400217 	ldw	r17,8(sp)
 400aca4:	dc000117 	ldw	r16,4(sp)
 400aca8:	dec00b04 	addi	sp,sp,44
 400acac:	f800283a 	ret
 400acb0:	21000117 	ldw	r4,4(r4)
 400acb4:	39400117 	ldw	r5,4(r7)
 400acb8:	21400526 	beq	r4,r5,400acd0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
 400acbc:	20c00007 	ldb	r3,0(r4)
 400acc0:	00800a84 	movi	r2,42
 400acc4:	18bfce26 	beq	r3,r2,400ac00 <__alt_mem_onchip_memory2_0+0xfc009980>
 400acc8:	400f3600 	call	400f360 <strcmp>
 400accc:	103fcc1e 	bne	r2,zero,400ac00 <__alt_mem_onchip_memory2_0+0xfc009980>
 400acd0:	00800184 	movi	r2,6
 400acd4:	003fea06 	br	400ac80 <__alt_mem_onchip_memory2_0+0xfc009a00>
 400acd8:	a83fe926 	beq	r21,zero,400ac80 <__alt_mem_onchip_memory2_0+0xfc009a00>
 400acdc:	10800054 	ori	r2,r2,1
 400ace0:	003fe706 	br	400ac80 <__alt_mem_onchip_memory2_0+0xfc009a00>

0400ace4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 400ace4:	deffe804 	addi	sp,sp,-96
 400ace8:	df001615 	stw	fp,88(sp)
 400acec:	df001b17 	ldw	fp,108(sp)
 400acf0:	ddc01515 	stw	r23,84(sp)
 400acf4:	dd001215 	stw	r20,72(sp)
 400acf8:	e0800417 	ldw	r2,16(fp)
 400acfc:	dcc01115 	stw	r19,68(sp)
 400ad00:	dfc01715 	stw	ra,92(sp)
 400ad04:	dd801415 	stw	r22,80(sp)
 400ad08:	dd401315 	stw	r21,76(sp)
 400ad0c:	dc801015 	stw	r18,64(sp)
 400ad10:	dc400f15 	stw	r17,60(sp)
 400ad14:	dc000e15 	stw	r16,56(sp)
 400ad18:	d9000b15 	stw	r4,44(sp)
 400ad1c:	d9c00915 	stw	r7,36(sp)
 400ad20:	1080040c 	andi	r2,r2,16
 400ad24:	282f883a 	mov	r23,r5
 400ad28:	3027883a 	mov	r19,r6
 400ad2c:	dd001817 	ldw	r20,96(sp)
 400ad30:	10000226 	beq	r2,zero,400ad3c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
 400ad34:	20800217 	ldw	r2,8(r4)
 400ad38:	e0800415 	stw	r2,16(fp)
 400ad3c:	d8c01a17 	ldw	r3,104(sp)
 400ad40:	a0c0cb26 	beq	r20,r3,400b070 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
 400ad44:	d8c00b17 	ldw	r3,44(sp)
 400ad48:	1c000117 	ldw	r16,4(r3)
 400ad4c:	d8c00917 	ldw	r3,36(sp)
 400ad50:	19400117 	ldw	r5,4(r3)
 400ad54:	2c000626 	beq	r5,r16,400ad70 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 400ad58:	80c00007 	ldb	r3,0(r16)
 400ad5c:	00800a84 	movi	r2,42
 400ad60:	18801b26 	beq	r3,r2,400add0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 400ad64:	8009883a 	mov	r4,r16
 400ad68:	400f3600 	call	400f360 <strcmp>
 400ad6c:	1000181e 	bne	r2,zero,400add0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 400ad70:	e5000015 	stw	r20,0(fp)
 400ad74:	e4c00115 	stw	r19,4(fp)
 400ad78:	b8010916 	blt	r23,zero,400b1a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
 400ad7c:	d8c01a17 	ldw	r3,104(sp)
 400ad80:	a5d9883a 	add	r12,r20,r23
 400ad84:	1b014126 	beq	r3,r12,400b28c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
 400ad88:	00800044 	movi	r2,1
 400ad8c:	e0800315 	stw	r2,12(fp)
 400ad90:	0005883a 	mov	r2,zero
 400ad94:	dfc01717 	ldw	ra,92(sp)
 400ad98:	df001617 	ldw	fp,88(sp)
 400ad9c:	ddc01517 	ldw	r23,84(sp)
 400ada0:	dd801417 	ldw	r22,80(sp)
 400ada4:	dd401317 	ldw	r21,76(sp)
 400ada8:	dd001217 	ldw	r20,72(sp)
 400adac:	dcc01117 	ldw	r19,68(sp)
 400adb0:	dc801017 	ldw	r18,64(sp)
 400adb4:	dc400f17 	ldw	r17,60(sp)
 400adb8:	dc000e17 	ldw	r16,56(sp)
 400adbc:	dec01804 	addi	sp,sp,96
 400adc0:	f800283a 	ret
 400adc4:	d8c00917 	ldw	r3,36(sp)
 400adc8:	18800117 	ldw	r2,4(r3)
 400adcc:	80bfe826 	beq	r16,r2,400ad70 <__alt_mem_onchip_memory2_0+0xfc009af0>
 400add0:	b800ef16 	blt	r23,zero,400b190 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
 400add4:	d8c01a17 	ldw	r3,104(sp)
 400add8:	1dedc83a 	sub	r22,r3,r23
 400addc:	e005883a 	mov	r2,fp
 400ade0:	00c00044 	movi	r3,1
 400ade4:	b039883a 	mov	fp,r22
 400ade8:	0021883a 	mov	r16,zero
 400adec:	a02d883a 	mov	r22,r20
 400adf0:	d8000a45 	stb	zero,41(sp)
 400adf4:	d8c00a05 	stb	r3,40(sp)
 400adf8:	048000c4 	movi	r18,3
 400adfc:	1029883a 	mov	r20,r2
 400ae00:	d8c00b17 	ldw	r3,44(sp)
 400ae04:	b805883a 	mov	r2,r23
 400ae08:	1ac00317 	ldw	r11,12(r3)
 400ae0c:	581490fa 	slli	r10,r11,3
 400ae10:	52800304 	addi	r10,r10,12
 400ae14:	1aab883a 	add	r21,r3,r10
 400ae18:	b007883a 	mov	r3,r22
 400ae1c:	582d883a 	mov	r22,r11
 400ae20:	a82f883a 	mov	r23,r21
 400ae24:	1823883a 	mov	r17,r3
 400ae28:	102b883a 	mov	r21,r2
 400ae2c:	b0005526 	beq	r22,zero,400af84 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
 400ae30:	b8800017 	ldw	r2,0(r23)
 400ae34:	a1400417 	ldw	r5,16(r20)
 400ae38:	d8000415 	stw	zero,16(sp)
 400ae3c:	d8000515 	stw	zero,20(sp)
 400ae40:	d8000615 	stw	zero,24(sp)
 400ae44:	d8000715 	stw	zero,28(sp)
 400ae48:	d9400815 	stw	r5,32(sp)
 400ae4c:	1100004c 	andi	r4,r2,1
 400ae50:	1007d23a 	srai	r3,r2,8
 400ae54:	20007526 	beq	r4,zero,400b02c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
 400ae58:	89000017 	ldw	r4,0(r17)
 400ae5c:	99800054 	ori	r6,r19,1
 400ae60:	20c7883a 	add	r3,r4,r3
 400ae64:	18c00017 	ldw	r3,0(r3)
 400ae68:	88c7883a 	add	r3,r17,r3
 400ae6c:	e0000326 	beq	fp,zero,400ae7c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
 400ae70:	d9c00a03 	ldbu	r7,40(sp)
 400ae74:	e0c9803a 	cmpltu	r4,fp,r3
 400ae78:	21c07226 	beq	r4,r7,400b044 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
 400ae7c:	1080008c 	andi	r2,r2,2
 400ae80:	1000041e 	bne	r2,zero,400ae94 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
 400ae84:	013fff84 	movi	r4,-2
 400ae88:	a9007126 	beq	r21,r4,400b050 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
 400ae8c:	00bfff44 	movi	r2,-3
 400ae90:	308c703a 	and	r6,r6,r2
 400ae94:	b93fff17 	ldw	r4,-4(r23)
 400ae98:	d9400404 	addi	r5,sp,16
 400ae9c:	d9c00917 	ldw	r7,36(sp)
 400aea0:	20800017 	ldw	r2,0(r4)
 400aea4:	d9400315 	stw	r5,12(sp)
 400aea8:	d9401a17 	ldw	r5,104(sp)
 400aeac:	d8c00015 	stw	r3,0(sp)
 400aeb0:	d9400215 	stw	r5,8(sp)
 400aeb4:	d9401917 	ldw	r5,100(sp)
 400aeb8:	d9400115 	stw	r5,4(sp)
 400aebc:	10800717 	ldw	r2,28(r2)
 400aec0:	a80b883a 	mov	r5,r21
 400aec4:	103ee83a 	callr	r2
 400aec8:	a1400217 	ldw	r5,8(r20)
 400aecc:	d9000617 	ldw	r4,24(sp)
 400aed0:	d8c00717 	ldw	r3,28(sp)
 400aed4:	2908b03a 	or	r4,r5,r4
 400aed8:	a1000215 	stw	r4,8(r20)
 400aedc:	01400184 	movi	r5,6
 400aee0:	1940a426 	beq	r3,r5,400b174 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 400aee4:	01400084 	movi	r5,2
 400aee8:	1940a226 	beq	r3,r5,400b174 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 400aeec:	81403fcc 	andi	r5,r16,255
 400aef0:	a1800017 	ldw	r6,0(r20)
 400aef4:	28004f1e 	bne	r5,zero,400b034 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
 400aef8:	30007926 	beq	r6,zero,400b0e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
 400aefc:	d9400417 	ldw	r5,16(sp)
 400af00:	29806926 	beq	r5,r6,400b0a8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
 400af04:	28006d26 	beq	r5,zero,400b0bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
 400af08:	a2800317 	ldw	r10,12(r20)
 400af0c:	9100250e 	bge	r18,r4,400afa4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
 400af10:	2100004c 	andi	r4,r4,1
 400af14:	20000326 	beq	r4,zero,400af24 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
 400af18:	a0800417 	ldw	r2,16(r20)
 400af1c:	1080008c 	andi	r2,r2,2
 400af20:	1000201e 	bne	r2,zero,400afa4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
 400af24:	50004d1e 	bne	r10,zero,400b05c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
 400af28:	18002626 	beq	r3,zero,400afc4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
 400af2c:	02800044 	movi	r10,1
 400af30:	181b883a 	mov	r13,r3
 400af34:	1a84f03a 	xor	r2,r3,r10
 400af38:	501f883a 	mov	r15,r10
 400af3c:	90801f0e 	bge	r18,r2,400afbc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
 400af40:	90c0880e 	bge	r18,r3,400b164 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
 400af44:	d9400417 	ldw	r5,16(sp)
 400af48:	1880008c 	andi	r2,r3,2
 400af4c:	d9000517 	ldw	r4,20(sp)
 400af50:	a1400015 	stw	r5,0(r20)
 400af54:	0021883a 	mov	r16,zero
 400af58:	a1000115 	stw	r4,4(r20)
 400af5c:	a0c00315 	stw	r3,12(r20)
 400af60:	10004f1e 	bne	r2,zero,400b0a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 400af64:	6b40004c 	andi	r13,r13,1
 400af68:	68004d26 	beq	r13,zero,400b0a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 400af6c:	a1000217 	ldw	r4,8(r20)
 400af70:	01400104 	movi	r5,4
 400af74:	21408826 	beq	r4,r5,400b198 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400af78:	b5bfffc4 	addi	r22,r22,-1
 400af7c:	bdfffe04 	addi	r23,r23,-8
 400af80:	b03fab1e 	bne	r22,zero,400ae30 <__alt_mem_onchip_memory2_0+0xfc009bb0>
 400af84:	d8800a43 	ldbu	r2,41(sp)
 400af88:	a82f883a 	mov	r23,r21
 400af8c:	882d883a 	mov	r22,r17
 400af90:	10008126 	beq	r2,zero,400b198 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400af94:	dd400a03 	ldbu	r21,40(sp)
 400af98:	a8007f26 	beq	r21,zero,400b198 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400af9c:	d8000a05 	stb	zero,40(sp)
 400afa0:	003f9706 	br	400ae00 <__alt_mem_onchip_memory2_0+0xfc009b80>
 400afa4:	501f883a 	mov	r15,r10
 400afa8:	181b883a 	mov	r13,r3
 400afac:	02800b0e 	bge	zero,r10,400afdc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
 400afb0:	00c0570e 	bge	zero,r3,400b110 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
 400afb4:	1a84f03a 	xor	r2,r3,r10
 400afb8:	90bfe116 	blt	r18,r2,400af40 <__alt_mem_onchip_memory2_0+0xfc009cc0>
 400afbc:	1bc6703a 	and	r3,r3,r15
 400afc0:	90c09916 	blt	r18,r3,400b228 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
 400afc4:	01000044 	movi	r4,1
 400afc8:	a1000315 	stw	r4,12(r20)
 400afcc:	a0000015 	stw	zero,0(r20)
 400afd0:	a1000217 	ldw	r4,8(r20)
 400afd4:	04000044 	movi	r16,1
 400afd8:	003fe506 	br	400af70 <__alt_mem_onchip_memory2_0+0xfc009cf0>
 400afdc:	90c00a0e 	bge	r18,r3,400b008 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 400afe0:	1880004c 	andi	r2,r3,1
 400afe4:	10000426 	beq	r2,zero,400aff8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
 400afe8:	d9000b17 	ldw	r4,44(sp)
 400afec:	20800217 	ldw	r2,8(r4)
 400aff0:	1080008c 	andi	r2,r2,2
 400aff4:	1000041e 	bne	r2,zero,400b008 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 400aff8:	1880005c 	xori	r2,r3,1
 400affc:	90bfd216 	blt	r18,r2,400af48 <__alt_mem_onchip_memory2_0+0xfc009cc8>
 400b000:	03c00044 	movi	r15,1
 400b004:	003fed06 	br	400afbc <__alt_mem_onchip_memory2_0+0xfc009d3c>
 400b008:	a8006e16 	blt	r21,zero,400b1c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
 400b00c:	d8801a17 	ldw	r2,104(sp)
 400b010:	354d883a 	add	r6,r6,r21
 400b014:	11805026 	beq	r2,r6,400b158 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
 400b018:	00c0a50e 	bge	zero,r3,400b2b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
 400b01c:	03c00044 	movi	r15,1
 400b020:	1bc4f03a 	xor	r2,r3,r15
 400b024:	7815883a 	mov	r10,r15
 400b028:	003fc406 	br	400af3c <__alt_mem_onchip_memory2_0+0xfc009cbc>
 400b02c:	980d883a 	mov	r6,r19
 400b030:	003f8d06 	br	400ae68 <__alt_mem_onchip_memory2_0+0xfc009be8>
 400b034:	303fb11e 	bne	r6,zero,400aefc <__alt_mem_onchip_memory2_0+0xfc009c7c>
 400b038:	d9400417 	ldw	r5,16(sp)
 400b03c:	283fb21e 	bne	r5,zero,400af08 <__alt_mem_onchip_memory2_0+0xfc009c88>
 400b040:	003fcb06 	br	400af70 <__alt_mem_onchip_memory2_0+0xfc009cf0>
 400b044:	00c00044 	movi	r3,1
 400b048:	d8c00a45 	stb	r3,41(sp)
 400b04c:	003fca06 	br	400af78 <__alt_mem_onchip_memory2_0+0xfc009cf8>
 400b050:	294000cc 	andi	r5,r5,3
 400b054:	283fc826 	beq	r5,zero,400af78 <__alt_mem_onchip_memory2_0+0xfc009cf8>
 400b058:	003f8c06 	br	400ae8c <__alt_mem_onchip_memory2_0+0xfc009c0c>
 400b05c:	18001a26 	beq	r3,zero,400b0c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
 400b060:	181b883a 	mov	r13,r3
 400b064:	501f883a 	mov	r15,r10
 400b068:	50c4f03a 	xor	r2,r10,r3
 400b06c:	003fb306 	br	400af3c <__alt_mem_onchip_memory2_0+0xfc009cbc>
 400b070:	d8c00b17 	ldw	r3,44(sp)
 400b074:	1c000117 	ldw	r16,4(r3)
 400b078:	d8c01917 	ldw	r3,100(sp)
 400b07c:	19400117 	ldw	r5,4(r3)
 400b080:	81400626 	beq	r16,r5,400b09c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
 400b084:	80c00007 	ldb	r3,0(r16)
 400b088:	00800a84 	movi	r2,42
 400b08c:	18bf4d26 	beq	r3,r2,400adc4 <__alt_mem_onchip_memory2_0+0xfc009b44>
 400b090:	8009883a 	mov	r4,r16
 400b094:	400f3600 	call	400f360 <strcmp>
 400b098:	10005c1e 	bne	r2,zero,400b20c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
 400b09c:	e4c00215 	stw	r19,8(fp)
 400b0a0:	0005883a 	mov	r2,zero
 400b0a4:	003f3b06 	br	400ad94 <__alt_mem_onchip_memory2_0+0xfc009b14>
 400b0a8:	a0c00117 	ldw	r3,4(r20)
 400b0ac:	d8800517 	ldw	r2,20(sp)
 400b0b0:	1884b03a 	or	r2,r3,r2
 400b0b4:	a0800115 	stw	r2,4(r20)
 400b0b8:	003fad06 	br	400af70 <__alt_mem_onchip_memory2_0+0xfc009cf0>
 400b0bc:	10803fcc 	andi	r2,r2,255
 400b0c0:	103f911e 	bne	r2,zero,400af08 <__alt_mem_onchip_memory2_0+0xfc009c88>
 400b0c4:	003faa06 	br	400af70 <__alt_mem_onchip_memory2_0+0xfc009cf0>
 400b0c8:	501b883a 	mov	r13,r10
 400b0cc:	5080005c 	xori	r2,r10,1
 400b0d0:	5007883a 	mov	r3,r10
 400b0d4:	90bfbb0e 	bge	r18,r2,400afc4 <__alt_mem_onchip_memory2_0+0xfc009d44>
 400b0d8:	6880008c 	andi	r2,r13,2
 400b0dc:	003f9f06 	br	400af5c <__alt_mem_onchip_memory2_0+0xfc009cdc>
 400b0e0:	d8c00417 	ldw	r3,16(sp)
 400b0e4:	d9400517 	ldw	r5,20(sp)
 400b0e8:	a0c00015 	stw	r3,0(r20)
 400b0ec:	a1400115 	stw	r5,4(r20)
 400b0f0:	18000526 	beq	r3,zero,400b108 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
 400b0f4:	20001626 	beq	r4,zero,400b150 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
 400b0f8:	d9400b17 	ldw	r5,44(sp)
 400b0fc:	28c00217 	ldw	r3,8(r5)
 400b100:	18c0004c 	andi	r3,r3,1
 400b104:	183f2326 	beq	r3,zero,400ad94 <__alt_mem_onchip_memory2_0+0xfc009b14>
 400b108:	1021883a 	mov	r16,r2
 400b10c:	003f9806 	br	400af70 <__alt_mem_onchip_memory2_0+0xfc009cf0>
 400b110:	9280060e 	bge	r18,r10,400b12c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
 400b114:	5080004c 	andi	r2,r10,1
 400b118:	10002426 	beq	r2,zero,400b1ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
 400b11c:	d8c00b17 	ldw	r3,44(sp)
 400b120:	18800217 	ldw	r2,8(r3)
 400b124:	1080008c 	andi	r2,r2,2
 400b128:	10003c26 	beq	r2,zero,400b21c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
 400b12c:	d9400417 	ldw	r5,16(sp)
 400b130:	a8004216 	blt	r21,zero,400b23c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
 400b134:	d8c01a17 	ldw	r3,104(sp)
 400b138:	2d45883a 	add	r2,r5,r21
 400b13c:	18805726 	beq	r3,r2,400b29c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
 400b140:	7880005c 	xori	r2,r15,1
 400b144:	781b883a 	mov	r13,r15
 400b148:	5007883a 	mov	r3,r10
 400b14c:	003fe106 	br	400b0d4 <__alt_mem_onchip_memory2_0+0xfc009e54>
 400b150:	1021883a 	mov	r16,r2
 400b154:	003f8806 	br	400af78 <__alt_mem_onchip_memory2_0+0xfc009cf8>
 400b158:	03c00184 	movi	r15,6
 400b15c:	00ffb016 	blt	zero,r3,400b020 <__alt_mem_onchip_memory2_0+0xfc009da0>
 400b160:	7815883a 	mov	r10,r15
 400b164:	7880008c 	andi	r2,r15,2
 400b168:	781b883a 	mov	r13,r15
 400b16c:	5007883a 	mov	r3,r10
 400b170:	003f7a06 	br	400af5c <__alt_mem_onchip_memory2_0+0xfc009cdc>
 400b174:	a039883a 	mov	fp,r20
 400b178:	e0c00315 	stw	r3,12(fp)
 400b17c:	d8c00417 	ldw	r3,16(sp)
 400b180:	a0c00015 	stw	r3,0(r20)
 400b184:	d8c00517 	ldw	r3,20(sp)
 400b188:	a0c00115 	stw	r3,4(r20)
 400b18c:	003f0106 	br	400ad94 <__alt_mem_onchip_memory2_0+0xfc009b14>
 400b190:	002d883a 	mov	r22,zero
 400b194:	003f1106 	br	400addc <__alt_mem_onchip_memory2_0+0xfc009b5c>
 400b198:	8005883a 	mov	r2,r16
 400b19c:	003efd06 	br	400ad94 <__alt_mem_onchip_memory2_0+0xfc009b14>
 400b1a0:	00bfff84 	movi	r2,-2
 400b1a4:	b8bfbe1e 	bne	r23,r2,400b0a0 <__alt_mem_onchip_memory2_0+0xfc009e20>
 400b1a8:	003ef706 	br	400ad88 <__alt_mem_onchip_memory2_0+0xfc009b08>
 400b1ac:	5080005c 	xori	r2,r10,1
 400b1b0:	90bf840e 	bge	r18,r2,400afc4 <__alt_mem_onchip_memory2_0+0xfc009d44>
 400b1b4:	501b883a 	mov	r13,r10
 400b1b8:	5080008c 	andi	r2,r10,2
 400b1bc:	5007883a 	mov	r3,r10
 400b1c0:	003f6606 	br	400af5c <__alt_mem_onchip_memory2_0+0xfc009cdc>
 400b1c4:	013fff84 	movi	r4,-2
 400b1c8:	a9003226 	beq	r21,r4,400b294 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
 400b1cc:	d9400917 	ldw	r5,36(sp)
 400b1d0:	d9001a17 	ldw	r4,104(sp)
 400b1d4:	d9c01917 	ldw	r7,100(sp)
 400b1d8:	28800017 	ldw	r2,0(r5)
 400b1dc:	d9000015 	stw	r4,0(sp)
 400b1e0:	d9000917 	ldw	r4,36(sp)
 400b1e4:	10800817 	ldw	r2,32(r2)
 400b1e8:	a80b883a 	mov	r5,r21
 400b1ec:	d8c00d15 	stw	r3,52(sp)
 400b1f0:	db400c15 	stw	r13,48(sp)
 400b1f4:	103ee83a 	callr	r2
 400b1f8:	1015883a 	mov	r10,r2
 400b1fc:	101f883a 	mov	r15,r2
 400b200:	db400c17 	ldw	r13,48(sp)
 400b204:	d8c00d17 	ldw	r3,52(sp)
 400b208:	003f6906 	br	400afb0 <__alt_mem_onchip_memory2_0+0xfc009d30>
 400b20c:	d8c00917 	ldw	r3,36(sp)
 400b210:	19400117 	ldw	r5,4(r3)
 400b214:	817ed31e 	bne	r16,r5,400ad64 <__alt_mem_onchip_memory2_0+0xfc009ae4>
 400b218:	003ed506 	br	400ad70 <__alt_mem_onchip_memory2_0+0xfc009af0>
 400b21c:	5080005c 	xori	r2,r10,1
 400b220:	90bfe416 	blt	r18,r2,400b1b4 <__alt_mem_onchip_memory2_0+0xfc009f34>
 400b224:	003f6706 	br	400afc4 <__alt_mem_onchip_memory2_0+0xfc009d44>
 400b228:	00800084 	movi	r2,2
 400b22c:	a0800315 	stw	r2,12(r20)
 400b230:	a0000015 	stw	zero,0(r20)
 400b234:	00800044 	movi	r2,1
 400b238:	003ed606 	br	400ad94 <__alt_mem_onchip_memory2_0+0xfc009b14>
 400b23c:	013fff84 	movi	r4,-2
 400b240:	a9002526 	beq	r21,r4,400b2d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
 400b244:	d8c00917 	ldw	r3,36(sp)
 400b248:	d9c01917 	ldw	r7,100(sp)
 400b24c:	d9000917 	ldw	r4,36(sp)
 400b250:	18800017 	ldw	r2,0(r3)
 400b254:	d8c01a17 	ldw	r3,104(sp)
 400b258:	280d883a 	mov	r6,r5
 400b25c:	a80b883a 	mov	r5,r21
 400b260:	d8c00015 	stw	r3,0(sp)
 400b264:	10800817 	ldw	r2,32(r2)
 400b268:	da800c15 	stw	r10,48(sp)
 400b26c:	dbc00d15 	stw	r15,52(sp)
 400b270:	103ee83a 	callr	r2
 400b274:	da800c17 	ldw	r10,48(sp)
 400b278:	1007883a 	mov	r3,r2
 400b27c:	101b883a 	mov	r13,r2
 400b280:	dbc00d17 	ldw	r15,52(sp)
 400b284:	1284f03a 	xor	r2,r2,r10
 400b288:	003f2c06 	br	400af3c <__alt_mem_onchip_memory2_0+0xfc009cbc>
 400b28c:	00800184 	movi	r2,6
 400b290:	003ebe06 	br	400ad8c <__alt_mem_onchip_memory2_0+0xfc009b0c>
 400b294:	00ff4b0e 	bge	zero,r3,400afc4 <__alt_mem_onchip_memory2_0+0xfc009d44>
 400b298:	003f6006 	br	400b01c <__alt_mem_onchip_memory2_0+0xfc009d9c>
 400b29c:	5080019c 	xori	r2,r10,6
 400b2a0:	90800916 	blt	r18,r2,400b2c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
 400b2a4:	50c0018c 	andi	r3,r10,6
 400b2a8:	90ff460e 	bge	r18,r3,400afc4 <__alt_mem_onchip_memory2_0+0xfc009d44>
 400b2ac:	003fde06 	br	400b228 <__alt_mem_onchip_memory2_0+0xfc009fa8>
 400b2b0:	d8c01a17 	ldw	r3,104(sp)
 400b2b4:	2d45883a 	add	r2,r5,r21
 400b2b8:	18800326 	beq	r3,r2,400b2c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
 400b2bc:	02800044 	movi	r10,1
 400b2c0:	501f883a 	mov	r15,r10
 400b2c4:	003f9e06 	br	400b140 <__alt_mem_onchip_memory2_0+0xfc009ec0>
 400b2c8:	03400184 	movi	r13,6
 400b2cc:	00800084 	movi	r2,2
 400b2d0:	6807883a 	mov	r3,r13
 400b2d4:	003f1d06 	br	400af4c <__alt_mem_onchip_memory2_0+0xfc009ccc>
 400b2d8:	501b883a 	mov	r13,r10
 400b2dc:	5080005c 	xori	r2,r10,1
 400b2e0:	5007883a 	mov	r3,r10
 400b2e4:	003f7b06 	br	400b0d4 <__alt_mem_onchip_memory2_0+0xfc009e54>

0400b2e8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 400b2e8:	deffef04 	addi	sp,sp,-68
 400b2ec:	ddc00e15 	stw	r23,56(sp)
 400b2f0:	dd000b15 	stw	r20,44(sp)
 400b2f4:	dc400815 	stw	r17,32(sp)
 400b2f8:	3029883a 	mov	r20,r6
 400b2fc:	dfc01015 	stw	ra,64(sp)
 400b300:	df000f15 	stw	fp,60(sp)
 400b304:	dd800d15 	stw	r22,52(sp)
 400b308:	dd400c15 	stw	r21,48(sp)
 400b30c:	dcc00a15 	stw	r19,40(sp)
 400b310:	dc800915 	stw	r18,36(sp)
 400b314:	dc000715 	stw	r16,28(sp)
 400b318:	d9000515 	stw	r4,20(sp)
 400b31c:	2823883a 	mov	r17,r5
 400b320:	382f883a 	mov	r23,r7
 400b324:	400b6d00 	call	400b6d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 400b328:	100d883a 	mov	r6,r2
 400b32c:	10803fcc 	andi	r2,r2,255
 400b330:	1000441e 	bne	r2,zero,400b444 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
 400b334:	bc000217 	ldw	r16,8(r23)
 400b338:	8080040c 	andi	r2,r16,16
 400b33c:	10000226 	beq	r2,zero,400b348 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
 400b340:	d8c00517 	ldw	r3,20(sp)
 400b344:	1c000217 	ldw	r16,8(r3)
 400b348:	d8c00517 	ldw	r3,20(sp)
 400b34c:	d8800517 	ldw	r2,20(sp)
 400b350:	1f000317 	ldw	fp,12(r3)
 400b354:	e01090fa 	slli	r8,fp,3
 400b358:	40c00304 	addi	r3,r8,12
 400b35c:	10ed883a 	add	r22,r2,r3
 400b360:	80c0004c 	andi	r3,r16,1
 400b364:	42000204 	addi	r8,r8,8
 400b368:	d8c00415 	stw	r3,16(sp)
 400b36c:	122b883a 	add	r21,r2,r8
 400b370:	e0003226 	beq	fp,zero,400b43c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
 400b374:	b1800017 	ldw	r6,0(r22)
 400b378:	d8000015 	stw	zero,0(sp)
 400b37c:	d8000115 	stw	zero,4(sp)
 400b380:	dc000215 	stw	r16,8(sp)
 400b384:	d8000315 	stw	zero,12(sp)
 400b388:	34c0008c 	andi	r19,r6,2
 400b38c:	3480004c 	andi	r18,r6,1
 400b390:	9800021e 	bne	r19,zero,400b39c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
 400b394:	d8c00417 	ldw	r3,16(sp)
 400b398:	18002426 	beq	r3,zero,400b42c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
 400b39c:	a0003626 	beq	r20,zero,400b478 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
 400b3a0:	300dd23a 	srai	r6,r6,8
 400b3a4:	90000326 	beq	r18,zero,400b3b4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 400b3a8:	a0800017 	ldw	r2,0(r20)
 400b3ac:	118d883a 	add	r6,r2,r6
 400b3b0:	31800017 	ldw	r6,0(r6)
 400b3b4:	a18d883a 	add	r6,r20,r6
 400b3b8:	a9000017 	ldw	r4,0(r21)
 400b3bc:	d80f883a 	mov	r7,sp
 400b3c0:	880b883a 	mov	r5,r17
 400b3c4:	20800017 	ldw	r2,0(r4)
 400b3c8:	10800617 	ldw	r2,24(r2)
 400b3cc:	103ee83a 	callr	r2
 400b3d0:	100d883a 	mov	r6,r2
 400b3d4:	10803fcc 	andi	r2,r2,255
 400b3d8:	10001426 	beq	r2,zero,400b42c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
 400b3dc:	d8800317 	ldw	r2,12(sp)
 400b3e0:	00c00204 	movi	r3,8
 400b3e4:	10c02626 	beq	r2,r3,400b480 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
 400b3e8:	d8800117 	ldw	r2,4(sp)
 400b3ec:	00c000c4 	movi	r3,3
 400b3f0:	1880040e 	bge	r3,r2,400b404 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 400b3f4:	9800031e 	bne	r19,zero,400b404 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 400b3f8:	00ffff44 	movi	r3,-3
 400b3fc:	10c4703a 	and	r2,r2,r3
 400b400:	d8800115 	stw	r2,4(sp)
 400b404:	b9400317 	ldw	r5,12(r23)
 400b408:	28002126 	beq	r5,zero,400b490 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
 400b40c:	b8800017 	ldw	r2,0(r23)
 400b410:	d9000017 	ldw	r4,0(sp)
 400b414:	11004d1e 	bne	r2,r4,400b54c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
 400b418:	10003126 	beq	r2,zero,400b4e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
 400b41c:	b9000117 	ldw	r4,4(r23)
 400b420:	d8800117 	ldw	r2,4(sp)
 400b424:	2084b03a 	or	r2,r4,r2
 400b428:	b8800115 	stw	r2,4(r23)
 400b42c:	e73fffc4 	addi	fp,fp,-1
 400b430:	b5bffe04 	addi	r22,r22,-8
 400b434:	ad7ffe04 	addi	r21,r21,-8
 400b438:	e03fce1e 	bne	fp,zero,400b374 <__alt_mem_onchip_memory2_0+0xfc00a0f4>
 400b43c:	b9800117 	ldw	r6,4(r23)
 400b440:	300cc03a 	cmpne	r6,r6,zero
 400b444:	3005883a 	mov	r2,r6
 400b448:	dfc01017 	ldw	ra,64(sp)
 400b44c:	df000f17 	ldw	fp,60(sp)
 400b450:	ddc00e17 	ldw	r23,56(sp)
 400b454:	dd800d17 	ldw	r22,52(sp)
 400b458:	dd400c17 	ldw	r21,48(sp)
 400b45c:	dd000b17 	ldw	r20,44(sp)
 400b460:	dcc00a17 	ldw	r19,40(sp)
 400b464:	dc800917 	ldw	r18,36(sp)
 400b468:	dc400817 	ldw	r17,32(sp)
 400b46c:	dc000717 	ldw	r16,28(sp)
 400b470:	dec01104 	addi	sp,sp,68
 400b474:	f800283a 	ret
 400b478:	000d883a 	mov	r6,zero
 400b47c:	003fce06 	br	400b3b8 <__alt_mem_onchip_memory2_0+0xfc00a138>
 400b480:	903fd926 	beq	r18,zero,400b3e8 <__alt_mem_onchip_memory2_0+0xfc00a168>
 400b484:	a8800017 	ldw	r2,0(r21)
 400b488:	d8800315 	stw	r2,12(sp)
 400b48c:	003fd606 	br	400b3e8 <__alt_mem_onchip_memory2_0+0xfc00a168>
 400b490:	d9000017 	ldw	r4,0(sp)
 400b494:	d8800117 	ldw	r2,4(sp)
 400b498:	00c000c4 	movi	r3,3
 400b49c:	b9000015 	stw	r4,0(r23)
 400b4a0:	d9000217 	ldw	r4,8(sp)
 400b4a4:	b8800115 	stw	r2,4(r23)
 400b4a8:	b9000215 	stw	r4,8(r23)
 400b4ac:	d9000317 	ldw	r4,12(sp)
 400b4b0:	b9000315 	stw	r4,12(r23)
 400b4b4:	18bfe30e 	bge	r3,r2,400b444 <__alt_mem_onchip_memory2_0+0xfc00a1c4>
 400b4b8:	1100008c 	andi	r4,r2,2
 400b4bc:	20001926 	beq	r4,zero,400b524 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
 400b4c0:	d8c00517 	ldw	r3,20(sp)
 400b4c4:	18800217 	ldw	r2,8(r3)
 400b4c8:	1080004c 	andi	r2,r2,1
 400b4cc:	103fdd26 	beq	r2,zero,400b444 <__alt_mem_onchip_memory2_0+0xfc00a1c4>
 400b4d0:	e73fffc4 	addi	fp,fp,-1
 400b4d4:	b5bffe04 	addi	r22,r22,-8
 400b4d8:	ad7ffe04 	addi	r21,r21,-8
 400b4dc:	003fd606 	br	400b438 <__alt_mem_onchip_memory2_0+0xfc00a1b8>
 400b4e0:	d8800317 	ldw	r2,12(sp)
 400b4e4:	00c00204 	movi	r3,8
 400b4e8:	10c00b26 	beq	r2,r3,400b518 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 400b4ec:	28c00a26 	beq	r5,r3,400b518 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 400b4f0:	11000117 	ldw	r4,4(r2)
 400b4f4:	29400117 	ldw	r5,4(r5)
 400b4f8:	217fc826 	beq	r4,r5,400b41c <__alt_mem_onchip_memory2_0+0xfc00a19c>
 400b4fc:	20800007 	ldb	r2,0(r4)
 400b500:	00c00a84 	movi	r3,42
 400b504:	10c00426 	beq	r2,r3,400b518 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 400b508:	d9800615 	stw	r6,24(sp)
 400b50c:	400f3600 	call	400f360 <strcmp>
 400b510:	d9800617 	ldw	r6,24(sp)
 400b514:	103fc126 	beq	r2,zero,400b41c <__alt_mem_onchip_memory2_0+0xfc00a19c>
 400b518:	00800084 	movi	r2,2
 400b51c:	b8800115 	stw	r2,4(r23)
 400b520:	003fc806 	br	400b444 <__alt_mem_onchip_memory2_0+0xfc00a1c4>
 400b524:	1080004c 	andi	r2,r2,1
 400b528:	103fc626 	beq	r2,zero,400b444 <__alt_mem_onchip_memory2_0+0xfc00a1c4>
 400b52c:	d8c00517 	ldw	r3,20(sp)
 400b530:	18800217 	ldw	r2,8(r3)
 400b534:	1080008c 	andi	r2,r2,2
 400b538:	103fc226 	beq	r2,zero,400b444 <__alt_mem_onchip_memory2_0+0xfc00a1c4>
 400b53c:	e73fffc4 	addi	fp,fp,-1
 400b540:	b5bffe04 	addi	r22,r22,-8
 400b544:	ad7ffe04 	addi	r21,r21,-8
 400b548:	003fbb06 	br	400b438 <__alt_mem_onchip_memory2_0+0xfc00a1b8>
 400b54c:	00800084 	movi	r2,2
 400b550:	b8000015 	stw	zero,0(r23)
 400b554:	b8800115 	stw	r2,4(r23)
 400b558:	003fba06 	br	400b444 <__alt_mem_onchip_memory2_0+0xfc00a1c4>

0400b55c <_ZNSt9type_infoD1Ev>:
 400b55c:	f800283a 	ret

0400b560 <_ZNKSt9type_info14__is_pointer_pEv>:
 400b560:	0005883a 	mov	r2,zero
 400b564:	f800283a 	ret

0400b568 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 400b568:	0005883a 	mov	r2,zero
 400b56c:	f800283a 	ret

0400b570 <_ZNSt9type_infoD0Ev>:
 400b570:	400b5b81 	jmpi	400b5b8 <_ZdlPv>

0400b574 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 400b574:	21000117 	ldw	r4,4(r4)
 400b578:	29400117 	ldw	r5,4(r5)
 400b57c:	21400c26 	beq	r4,r5,400b5b0 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
 400b580:	20c00007 	ldb	r3,0(r4)
 400b584:	00800a84 	movi	r2,42
 400b588:	18800726 	beq	r3,r2,400b5a8 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
 400b58c:	deffff04 	addi	sp,sp,-4
 400b590:	dfc00015 	stw	ra,0(sp)
 400b594:	400f3600 	call	400f360 <strcmp>
 400b598:	1005003a 	cmpeq	r2,r2,zero
 400b59c:	dfc00017 	ldw	ra,0(sp)
 400b5a0:	dec00104 	addi	sp,sp,4
 400b5a4:	f800283a 	ret
 400b5a8:	0005883a 	mov	r2,zero
 400b5ac:	f800283a 	ret
 400b5b0:	00800044 	movi	r2,1
 400b5b4:	f800283a 	ret

0400b5b8 <_ZdlPv>:
 400b5b8:	400e4181 	jmpi	400e418 <free>

0400b5bc <__cxa_pure_virtual>:
 400b5bc:	014100b4 	movhi	r5,1026
 400b5c0:	deffff04 	addi	sp,sp,-4
 400b5c4:	295bcf04 	addi	r5,r5,28476
 400b5c8:	018006c4 	movi	r6,27
 400b5cc:	01000084 	movi	r4,2
 400b5d0:	dfc00015 	stw	ra,0(sp)
 400b5d4:	401c0f80 	call	401c0f8 <write>
 400b5d8:	400b9840 	call	400b984 <_ZSt9terminatev>

0400b5dc <__cxa_deleted_virtual>:
 400b5dc:	014100b4 	movhi	r5,1026
 400b5e0:	deffff04 	addi	sp,sp,-4
 400b5e4:	295bd604 	addi	r5,r5,28504
 400b5e8:	01800784 	movi	r6,30
 400b5ec:	01000084 	movi	r4,2
 400b5f0:	dfc00015 	stw	ra,0(sp)
 400b5f4:	401c0f80 	call	401c0f8 <write>
 400b5f8:	400b9840 	call	400b984 <_ZSt9terminatev>

0400b5fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 400b5fc:	20800017 	ldw	r2,0(r4)
 400b600:	defffa04 	addi	sp,sp,-24
 400b604:	dc000415 	stw	r16,16(sp)
 400b608:	10800617 	ldw	r2,24(r2)
 400b60c:	3021883a 	mov	r16,r6
 400b610:	31800017 	ldw	r6,0(r6)
 400b614:	00c00404 	movi	r3,16
 400b618:	d8c00215 	stw	r3,8(sp)
 400b61c:	dfc00515 	stw	ra,20(sp)
 400b620:	d8000015 	stw	zero,0(sp)
 400b624:	d8000115 	stw	zero,4(sp)
 400b628:	d8000315 	stw	zero,12(sp)
 400b62c:	d80f883a 	mov	r7,sp
 400b630:	103ee83a 	callr	r2
 400b634:	d8800117 	ldw	r2,4(sp)
 400b638:	00c00184 	movi	r3,6
 400b63c:	1080018c 	andi	r2,r2,6
 400b640:	10c00526 	beq	r2,r3,400b658 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
 400b644:	0005883a 	mov	r2,zero
 400b648:	dfc00517 	ldw	ra,20(sp)
 400b64c:	dc000417 	ldw	r16,16(sp)
 400b650:	dec00604 	addi	sp,sp,24
 400b654:	f800283a 	ret
 400b658:	d8c00017 	ldw	r3,0(sp)
 400b65c:	00800044 	movi	r2,1
 400b660:	80c00015 	stw	r3,0(r16)
 400b664:	dfc00517 	ldw	ra,20(sp)
 400b668:	dc000417 	ldw	r16,16(sp)
 400b66c:	dec00604 	addi	sp,sp,24
 400b670:	f800283a 	ret

0400b674 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 400b674:	d8800017 	ldw	r2,0(sp)
 400b678:	11800226 	beq	r2,r6,400b684 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
 400b67c:	00800044 	movi	r2,1
 400b680:	f800283a 	ret
 400b684:	00800184 	movi	r2,6
 400b688:	f800283a 	ret

0400b68c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 400b68c:	008100b4 	movhi	r2,1026
 400b690:	109bec04 	addi	r2,r2,28592
 400b694:	20800015 	stw	r2,0(r4)
 400b698:	400b55c1 	jmpi	400b55c <_ZNSt9type_infoD1Ev>

0400b69c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 400b69c:	defffe04 	addi	sp,sp,-8
 400b6a0:	008100b4 	movhi	r2,1026
 400b6a4:	dc000015 	stw	r16,0(sp)
 400b6a8:	dfc00115 	stw	ra,4(sp)
 400b6ac:	109bec04 	addi	r2,r2,28592
 400b6b0:	20800015 	stw	r2,0(r4)
 400b6b4:	2021883a 	mov	r16,r4
 400b6b8:	400b55c0 	call	400b55c <_ZNSt9type_infoD1Ev>
 400b6bc:	8009883a 	mov	r4,r16
 400b6c0:	dfc00117 	ldw	ra,4(sp)
 400b6c4:	dc000017 	ldw	r16,0(sp)
 400b6c8:	dec00204 	addi	sp,sp,8
 400b6cc:	400b5b81 	jmpi	400b5b8 <_ZdlPv>

0400b6d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 400b6d0:	21000117 	ldw	r4,4(r4)
 400b6d4:	29400117 	ldw	r5,4(r5)
 400b6d8:	defffd04 	addi	sp,sp,-12
 400b6dc:	dc400115 	stw	r17,4(sp)
 400b6e0:	dc000015 	stw	r16,0(sp)
 400b6e4:	dfc00215 	stw	ra,8(sp)
 400b6e8:	3023883a 	mov	r17,r6
 400b6ec:	3821883a 	mov	r16,r7
 400b6f0:	21400526 	beq	r4,r5,400b708 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
 400b6f4:	20c00007 	ldb	r3,0(r4)
 400b6f8:	00800a84 	movi	r2,42
 400b6fc:	18800d26 	beq	r3,r2,400b734 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400b700:	400f3600 	call	400f360 <strcmp>
 400b704:	10000b1e 	bne	r2,zero,400b734 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400b708:	00800204 	movi	r2,8
 400b70c:	80800315 	stw	r2,12(r16)
 400b710:	00800184 	movi	r2,6
 400b714:	80800115 	stw	r2,4(r16)
 400b718:	84400015 	stw	r17,0(r16)
 400b71c:	00800044 	movi	r2,1
 400b720:	dfc00217 	ldw	ra,8(sp)
 400b724:	dc400117 	ldw	r17,4(sp)
 400b728:	dc000017 	ldw	r16,0(sp)
 400b72c:	dec00304 	addi	sp,sp,12
 400b730:	f800283a 	ret
 400b734:	0005883a 	mov	r2,zero
 400b738:	003ff906 	br	400b720 <__alt_mem_onchip_memory2_0+0xfc00a4a0>

0400b73c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 400b73c:	defffa04 	addi	sp,sp,-24
 400b740:	dc800415 	stw	r18,16(sp)
 400b744:	d8800817 	ldw	r2,32(sp)
 400b748:	dc800617 	ldw	r18,24(sp)
 400b74c:	dc400315 	stw	r17,12(sp)
 400b750:	dc000215 	stw	r16,8(sp)
 400b754:	dfc00515 	stw	ra,20(sp)
 400b758:	dc400917 	ldw	r17,36(sp)
 400b75c:	24000117 	ldw	r16,4(r4)
 400b760:	90801526 	beq	r18,r2,400b7b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
 400b764:	39400117 	ldw	r5,4(r7)
 400b768:	2c000826 	beq	r5,r16,400b78c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
 400b76c:	80c00007 	ldb	r3,0(r16)
 400b770:	00800a84 	movi	r2,42
 400b774:	18800926 	beq	r3,r2,400b79c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400b778:	8009883a 	mov	r4,r16
 400b77c:	d9800115 	stw	r6,4(sp)
 400b780:	400f3600 	call	400f360 <strcmp>
 400b784:	d9800117 	ldw	r6,4(sp)
 400b788:	1000041e 	bne	r2,zero,400b79c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400b78c:	00800044 	movi	r2,1
 400b790:	8c800015 	stw	r18,0(r17)
 400b794:	89800115 	stw	r6,4(r17)
 400b798:	88800315 	stw	r2,12(r17)
 400b79c:	0005883a 	mov	r2,zero
 400b7a0:	dfc00517 	ldw	ra,20(sp)
 400b7a4:	dc800417 	ldw	r18,16(sp)
 400b7a8:	dc400317 	ldw	r17,12(sp)
 400b7ac:	dc000217 	ldw	r16,8(sp)
 400b7b0:	dec00604 	addi	sp,sp,24
 400b7b4:	f800283a 	ret
 400b7b8:	d8800717 	ldw	r2,28(sp)
 400b7bc:	11400117 	ldw	r5,4(r2)
 400b7c0:	81400a26 	beq	r16,r5,400b7ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
 400b7c4:	80c00007 	ldb	r3,0(r16)
 400b7c8:	00800a84 	movi	r2,42
 400b7cc:	18800c26 	beq	r3,r2,400b800 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 400b7d0:	8009883a 	mov	r4,r16
 400b7d4:	d9800115 	stw	r6,4(sp)
 400b7d8:	d9c00015 	stw	r7,0(sp)
 400b7dc:	400f3600 	call	400f360 <strcmp>
 400b7e0:	d9800117 	ldw	r6,4(sp)
 400b7e4:	d9c00017 	ldw	r7,0(sp)
 400b7e8:	1000021e 	bne	r2,zero,400b7f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 400b7ec:	89800215 	stw	r6,8(r17)
 400b7f0:	003fea06 	br	400b79c <__alt_mem_onchip_memory2_0+0xfc00a51c>
 400b7f4:	39400117 	ldw	r5,4(r7)
 400b7f8:	817fdf1e 	bne	r16,r5,400b778 <__alt_mem_onchip_memory2_0+0xfc00a4f8>
 400b7fc:	003fe306 	br	400b78c <__alt_mem_onchip_memory2_0+0xfc00a50c>
 400b800:	38800117 	ldw	r2,4(r7)
 400b804:	80bfe51e 	bne	r16,r2,400b79c <__alt_mem_onchip_memory2_0+0xfc00a51c>
 400b808:	003fe006 	br	400b78c <__alt_mem_onchip_memory2_0+0xfc00a50c>

0400b80c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 400b80c:	20800117 	ldw	r2,4(r4)
 400b810:	28c00117 	ldw	r3,4(r5)
 400b814:	10c02926 	beq	r2,r3,400b8bc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
 400b818:	defffb04 	addi	sp,sp,-20
 400b81c:	dcc00315 	stw	r19,12(sp)
 400b820:	dc800215 	stw	r18,8(sp)
 400b824:	dc400115 	stw	r17,4(sp)
 400b828:	dc000015 	stw	r16,0(sp)
 400b82c:	dfc00415 	stw	ra,16(sp)
 400b830:	2821883a 	mov	r16,r5
 400b834:	11400007 	ldb	r5,0(r2)
 400b838:	2025883a 	mov	r18,r4
 400b83c:	01000a84 	movi	r4,42
 400b840:	3823883a 	mov	r17,r7
 400b844:	3027883a 	mov	r19,r6
 400b848:	29000626 	beq	r5,r4,400b864 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400b84c:	180b883a 	mov	r5,r3
 400b850:	1009883a 	mov	r4,r2
 400b854:	400f3600 	call	400f360 <strcmp>
 400b858:	1000021e 	bne	r2,zero,400b864 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400b85c:	00800044 	movi	r2,1
 400b860:	00000306 	br	400b870 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
 400b864:	008000c4 	movi	r2,3
 400b868:	1440082e 	bgeu	r2,r17,400b88c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 400b86c:	0005883a 	mov	r2,zero
 400b870:	dfc00417 	ldw	ra,16(sp)
 400b874:	dcc00317 	ldw	r19,12(sp)
 400b878:	dc800217 	ldw	r18,8(sp)
 400b87c:	dc400117 	ldw	r17,4(sp)
 400b880:	dc000017 	ldw	r16,0(sp)
 400b884:	dec00504 	addi	sp,sp,20
 400b888:	f800283a 	ret
 400b88c:	80800017 	ldw	r2,0(r16)
 400b890:	980d883a 	mov	r6,r19
 400b894:	900b883a 	mov	r5,r18
 400b898:	10800517 	ldw	r2,20(r2)
 400b89c:	8009883a 	mov	r4,r16
 400b8a0:	dfc00417 	ldw	ra,16(sp)
 400b8a4:	dcc00317 	ldw	r19,12(sp)
 400b8a8:	dc800217 	ldw	r18,8(sp)
 400b8ac:	dc400117 	ldw	r17,4(sp)
 400b8b0:	dc000017 	ldw	r16,0(sp)
 400b8b4:	dec00504 	addi	sp,sp,20
 400b8b8:	1000683a 	jmp	r2
 400b8bc:	00800044 	movi	r2,1
 400b8c0:	f800283a 	ret

0400b8c4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 400b8c4:	00810074 	movhi	r2,1025
 400b8c8:	deffef04 	addi	sp,sp,-68
 400b8cc:	10b08b04 	addi	r2,r2,-15828
 400b8d0:	d8800615 	stw	r2,24(sp)
 400b8d4:	008100b4 	movhi	r2,1026
 400b8d8:	10806e04 	addi	r2,r2,440
 400b8dc:	d8800715 	stw	r2,28(sp)
 400b8e0:	00810074 	movhi	r2,1025
 400b8e4:	10ae4704 	addi	r2,r2,-18148
 400b8e8:	d9000d15 	stw	r4,52(sp)
 400b8ec:	d809883a 	mov	r4,sp
 400b8f0:	d8800915 	stw	r2,36(sp)
 400b8f4:	dfc01015 	stw	ra,64(sp)
 400b8f8:	df000f15 	stw	fp,60(sp)
 400b8fc:	dec00815 	stw	sp,32(sp)
 400b900:	dec00a15 	stw	sp,40(sp)
 400b904:	400e0240 	call	400e024 <_Unwind_SjLj_Register>
 400b908:	00800044 	movi	r2,1
 400b90c:	d8800115 	stw	r2,4(sp)
 400b910:	d8800d17 	ldw	r2,52(sp)
 400b914:	103ee83a 	callr	r2
 400b918:	400e3a00 	call	400e3a0 <abort>
 400b91c:	d8c00217 	ldw	r3,8(sp)
 400b920:	d8800117 	ldw	r2,4(sp)
 400b924:	d8c00d15 	stw	r3,52(sp)
 400b928:	d8c00317 	ldw	r3,12(sp)
 400b92c:	d8c00e15 	stw	r3,56(sp)
 400b930:	10000b26 	beq	r2,zero,400b960 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
 400b934:	10bfffc4 	addi	r2,r2,-1
 400b938:	10000126 	beq	r2,zero,400b940 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
 400b93c:	003b68fa 	trap	3
 400b940:	d8000115 	stw	zero,4(sp)
 400b944:	400cc700 	call	400cc70 <__cxa_end_catch>
 400b948:	d8c00e17 	ldw	r3,56(sp)
 400b94c:	00bfffc4 	movi	r2,-1
 400b950:	18800826 	beq	r3,r2,400b974 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
 400b954:	d9000d17 	ldw	r4,52(sp)
 400b958:	d8800115 	stw	r2,4(sp)
 400b95c:	400e2200 	call	400e220 <_Unwind_SjLj_Resume>
 400b960:	d9000d17 	ldw	r4,52(sp)
 400b964:	400cbbc0 	call	400cbbc <__cxa_begin_catch>
 400b968:	00800084 	movi	r2,2
 400b96c:	d8800115 	stw	r2,4(sp)
 400b970:	400e3a00 	call	400e3a0 <abort>
 400b974:	d8800e17 	ldw	r2,56(sp)
 400b978:	d9000d17 	ldw	r4,52(sp)
 400b97c:	d8800115 	stw	r2,4(sp)
 400b980:	400c82c0 	call	400c82c <__cxa_call_unexpected>

0400b984 <_ZSt9terminatev>:
 400b984:	008100f4 	movhi	r2,1027
 400b988:	10a95804 	addi	r2,r2,-23200
 400b98c:	11000017 	ldw	r4,0(r2)
 400b990:	deffff04 	addi	sp,sp,-4
 400b994:	dfc00015 	stw	ra,0(sp)
 400b998:	400b8c40 	call	400b8c4 <_ZN10__cxxabiv111__terminateEPFvvE>

0400b99c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 400b99c:	deffff04 	addi	sp,sp,-4
 400b9a0:	dfc00015 	stw	ra,0(sp)
 400b9a4:	203ee83a 	callr	r4
 400b9a8:	400b9840 	call	400b984 <_ZSt9terminatev>

0400b9ac <_ZSt10unexpectedv>:
 400b9ac:	008100f4 	movhi	r2,1027
 400b9b0:	10a95704 	addi	r2,r2,-23204
 400b9b4:	11000017 	ldw	r4,0(r2)
 400b9b8:	deffff04 	addi	sp,sp,-4
 400b9bc:	dfc00015 	stw	ra,0(sp)
 400b9c0:	400b99c0 	call	400b99c <_ZN10__cxxabiv112__unexpectedEPFvvE>

0400b9c4 <_ZSt13set_terminatePFvvE>:
 400b9c4:	00c100f4 	movhi	r3,1027
 400b9c8:	18e95804 	addi	r3,r3,-23200
 400b9cc:	18800017 	ldw	r2,0(r3)
 400b9d0:	19000015 	stw	r4,0(r3)
 400b9d4:	f800283a 	ret

0400b9d8 <_ZSt13get_terminatev>:
 400b9d8:	008100f4 	movhi	r2,1027
 400b9dc:	10a95804 	addi	r2,r2,-23200
 400b9e0:	10800017 	ldw	r2,0(r2)
 400b9e4:	f800283a 	ret

0400b9e8 <_ZSt14set_unexpectedPFvvE>:
 400b9e8:	00c100f4 	movhi	r3,1027
 400b9ec:	18e95704 	addi	r3,r3,-23204
 400b9f0:	18800017 	ldw	r2,0(r3)
 400b9f4:	19000015 	stw	r4,0(r3)
 400b9f8:	f800283a 	ret

0400b9fc <_ZSt14get_unexpectedv>:
 400b9fc:	008100f4 	movhi	r2,1027
 400ba00:	10a95704 	addi	r2,r2,-23204
 400ba04:	10800017 	ldw	r2,0(r2)
 400ba08:	f800283a 	ret

0400ba0c <_ZL21size_of_encoded_valueh>:
 400ba0c:	deffff04 	addi	sp,sp,-4
 400ba10:	dfc00015 	stw	ra,0(sp)
 400ba14:	20c03fcc 	andi	r3,r4,255
 400ba18:	00803fc4 	movi	r2,255
 400ba1c:	18802026 	beq	r3,r2,400baa0 <_ZL21size_of_encoded_valueh+0x94>
 400ba20:	210001cc 	andi	r4,r4,7
 400ba24:	00800144 	movi	r2,5
 400ba28:	11001c36 	bltu	r2,r4,400ba9c <_ZL21size_of_encoded_valueh+0x90>
 400ba2c:	200890ba 	slli	r4,r4,2
 400ba30:	00810074 	movhi	r2,1025
 400ba34:	10ae9104 	addi	r2,r2,-17852
 400ba38:	2089883a 	add	r4,r4,r2
 400ba3c:	20800017 	ldw	r2,0(r4)
 400ba40:	1000683a 	jmp	r2
 400ba44:	0400ba5c 	xori	r16,zero,745
 400ba48:	0400ba9c 	xori	r16,zero,746
 400ba4c:	0400ba6c 	andhi	r16,zero,745
 400ba50:	0400ba5c 	xori	r16,zero,745
 400ba54:	0400ba8c 	andi	r16,zero,746
 400ba58:	0400ba7c 	xorhi	r16,zero,745
 400ba5c:	00800104 	movi	r2,4
 400ba60:	dfc00017 	ldw	ra,0(sp)
 400ba64:	dec00104 	addi	sp,sp,4
 400ba68:	f800283a 	ret
 400ba6c:	00800084 	movi	r2,2
 400ba70:	dfc00017 	ldw	ra,0(sp)
 400ba74:	dec00104 	addi	sp,sp,4
 400ba78:	f800283a 	ret
 400ba7c:	00800044 	movi	r2,1
 400ba80:	dfc00017 	ldw	ra,0(sp)
 400ba84:	dec00104 	addi	sp,sp,4
 400ba88:	f800283a 	ret
 400ba8c:	00800204 	movi	r2,8
 400ba90:	dfc00017 	ldw	ra,0(sp)
 400ba94:	dec00104 	addi	sp,sp,4
 400ba98:	f800283a 	ret
 400ba9c:	400e3a00 	call	400e3a0 <abort>
 400baa0:	0005883a 	mov	r2,zero
 400baa4:	dfc00017 	ldw	ra,0(sp)
 400baa8:	dec00104 	addi	sp,sp,4
 400baac:	f800283a 	ret

0400bab0 <_ZL28read_encoded_value_with_basehjPKhPj>:
 400bab0:	deffff04 	addi	sp,sp,-4
 400bab4:	dfc00015 	stw	ra,0(sp)
 400bab8:	20c03fcc 	andi	r3,r4,255
 400babc:	00801404 	movi	r2,80
 400bac0:	18807326 	beq	r3,r2,400bc90 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
 400bac4:	20c003cc 	andi	r3,r4,15
 400bac8:	00800304 	movi	r2,12
 400bacc:	10c06f36 	bltu	r2,r3,400bc8c <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
 400bad0:	180690ba 	slli	r3,r3,2
 400bad4:	02010074 	movhi	r8,1025
 400bad8:	422eba04 	addi	r8,r8,-17688
 400badc:	1a07883a 	add	r3,r3,r8
 400bae0:	18800017 	ldw	r2,0(r3)
 400bae4:	1000683a 	jmp	r2
 400bae8:	0400bb1c 	xori	r16,zero,748
 400baec:	0400bc38 	rdprs	r16,zero,752
 400baf0:	0400bc74 	movhi	r16,753
 400baf4:	0400bb1c 	xori	r16,zero,748
 400baf8:	0400bb80 	call	400bb8 <__alt_mem_sdram-0x3bff448>
 400bafc:	0400bbd4 	movui	r16,751
 400bb00:	0400bc8c 	andi	r16,zero,754
 400bb04:	0400bc8c 	andi	r16,zero,754
 400bb08:	0400bc8c 	andi	r16,zero,754
 400bb0c:	0400bbe0 	cmpeqi	r16,zero,751
 400bb10:	0400bbb0 	cmpltui	r16,zero,750
 400bb14:	0400bb1c 	xori	r16,zero,748
 400bb18:	0400bb80 	call	400bb8 <__alt_mem_sdram-0x3bff448>
 400bb1c:	30800043 	ldbu	r2,1(r6)
 400bb20:	30c00083 	ldbu	r3,2(r6)
 400bb24:	324000c3 	ldbu	r9,3(r6)
 400bb28:	32000003 	ldbu	r8,0(r6)
 400bb2c:	1004923a 	slli	r2,r2,8
 400bb30:	1806943a 	slli	r3,r3,16
 400bb34:	4812963a 	slli	r9,r9,24
 400bb38:	1204b03a 	or	r2,r2,r8
 400bb3c:	1884b03a 	or	r2,r3,r2
 400bb40:	4886b03a 	or	r3,r9,r2
 400bb44:	30800104 	addi	r2,r6,4
 400bb48:	18000926 	beq	r3,zero,400bb70 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 400bb4c:	22001c0c 	andi	r8,r4,112
 400bb50:	02400404 	movi	r9,16
 400bb54:	42405726 	beq	r8,r9,400bcb4 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
 400bb58:	21003fcc 	andi	r4,r4,255
 400bb5c:	2100201c 	xori	r4,r4,128
 400bb60:	213fe004 	addi	r4,r4,-128
 400bb64:	1947883a 	add	r3,r3,r5
 400bb68:	2000010e 	bge	r4,zero,400bb70 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 400bb6c:	18c00017 	ldw	r3,0(r3)
 400bb70:	38c00015 	stw	r3,0(r7)
 400bb74:	dfc00017 	ldw	ra,0(sp)
 400bb78:	dec00104 	addi	sp,sp,4
 400bb7c:	f800283a 	ret
 400bb80:	30800043 	ldbu	r2,1(r6)
 400bb84:	30c00083 	ldbu	r3,2(r6)
 400bb88:	324000c3 	ldbu	r9,3(r6)
 400bb8c:	32000003 	ldbu	r8,0(r6)
 400bb90:	1004923a 	slli	r2,r2,8
 400bb94:	1806943a 	slli	r3,r3,16
 400bb98:	4812963a 	slli	r9,r9,24
 400bb9c:	1204b03a 	or	r2,r2,r8
 400bba0:	1884b03a 	or	r2,r3,r2
 400bba4:	4886b03a 	or	r3,r9,r2
 400bba8:	30800204 	addi	r2,r6,8
 400bbac:	003fe606 	br	400bb48 <__alt_mem_onchip_memory2_0+0xfc00a8c8>
 400bbb0:	30c00043 	ldbu	r3,1(r6)
 400bbb4:	32000003 	ldbu	r8,0(r6)
 400bbb8:	30800084 	addi	r2,r6,2
 400bbbc:	1806923a 	slli	r3,r3,8
 400bbc0:	1a06b03a 	or	r3,r3,r8
 400bbc4:	18ffffcc 	andi	r3,r3,65535
 400bbc8:	18e0001c 	xori	r3,r3,32768
 400bbcc:	18e00004 	addi	r3,r3,-32768
 400bbd0:	003fdd06 	br	400bb48 <__alt_mem_onchip_memory2_0+0xfc00a8c8>
 400bbd4:	30c00003 	ldbu	r3,0(r6)
 400bbd8:	30800044 	addi	r2,r6,1
 400bbdc:	003fda06 	br	400bb48 <__alt_mem_onchip_memory2_0+0xfc00a8c8>
 400bbe0:	3017883a 	mov	r11,r6
 400bbe4:	0007883a 	mov	r3,zero
 400bbe8:	0013883a 	mov	r9,zero
 400bbec:	5a800003 	ldbu	r10,0(r11)
 400bbf0:	58800044 	addi	r2,r11,1
 400bbf4:	1017883a 	mov	r11,r2
 400bbf8:	52001fcc 	andi	r8,r10,127
 400bbfc:	4250983a 	sll	r8,r8,r9
 400bc00:	53003fcc 	andi	r12,r10,255
 400bc04:	6300201c 	xori	r12,r12,128
 400bc08:	633fe004 	addi	r12,r12,-128
 400bc0c:	1a06b03a 	or	r3,r3,r8
 400bc10:	4a4001c4 	addi	r9,r9,7
 400bc14:	603ff516 	blt	r12,zero,400bbec <__alt_mem_onchip_memory2_0+0xfc00a96c>
 400bc18:	020007c4 	movi	r8,31
 400bc1c:	427fca36 	bltu	r8,r9,400bb48 <__alt_mem_onchip_memory2_0+0xfc00a8c8>
 400bc20:	5280100c 	andi	r10,r10,64
 400bc24:	503fc826 	beq	r10,zero,400bb48 <__alt_mem_onchip_memory2_0+0xfc00a8c8>
 400bc28:	023fffc4 	movi	r8,-1
 400bc2c:	4252983a 	sll	r9,r8,r9
 400bc30:	1a46b03a 	or	r3,r3,r9
 400bc34:	003fc506 	br	400bb4c <__alt_mem_onchip_memory2_0+0xfc00a8cc>
 400bc38:	3017883a 	mov	r11,r6
 400bc3c:	0007883a 	mov	r3,zero
 400bc40:	0015883a 	mov	r10,zero
 400bc44:	5a000003 	ldbu	r8,0(r11)
 400bc48:	58800044 	addi	r2,r11,1
 400bc4c:	1017883a 	mov	r11,r2
 400bc50:	42401fcc 	andi	r9,r8,127
 400bc54:	4a92983a 	sll	r9,r9,r10
 400bc58:	42003fcc 	andi	r8,r8,255
 400bc5c:	4200201c 	xori	r8,r8,128
 400bc60:	423fe004 	addi	r8,r8,-128
 400bc64:	1a46b03a 	or	r3,r3,r9
 400bc68:	528001c4 	addi	r10,r10,7
 400bc6c:	403ff516 	blt	r8,zero,400bc44 <__alt_mem_onchip_memory2_0+0xfc00a9c4>
 400bc70:	003fb506 	br	400bb48 <__alt_mem_onchip_memory2_0+0xfc00a8c8>
 400bc74:	30c00043 	ldbu	r3,1(r6)
 400bc78:	32000003 	ldbu	r8,0(r6)
 400bc7c:	30800084 	addi	r2,r6,2
 400bc80:	1806923a 	slli	r3,r3,8
 400bc84:	1a06b03a 	or	r3,r3,r8
 400bc88:	003faf06 	br	400bb48 <__alt_mem_onchip_memory2_0+0xfc00a8c8>
 400bc8c:	400e3a00 	call	400e3a0 <abort>
 400bc90:	308000c4 	addi	r2,r6,3
 400bc94:	00ffff04 	movi	r3,-4
 400bc98:	10c4703a 	and	r2,r2,r3
 400bc9c:	10c00017 	ldw	r3,0(r2)
 400bca0:	10800104 	addi	r2,r2,4
 400bca4:	38c00015 	stw	r3,0(r7)
 400bca8:	dfc00017 	ldw	ra,0(sp)
 400bcac:	dec00104 	addi	sp,sp,4
 400bcb0:	f800283a 	ret
 400bcb4:	300b883a 	mov	r5,r6
 400bcb8:	003fa706 	br	400bb58 <__alt_mem_onchip_memory2_0+0xfc00a8d8>

0400bcbc <_ZL15get_ttype_entryP16lsda_header_infom>:
 400bcbc:	defffc04 	addi	sp,sp,-16
 400bcc0:	dfc00315 	stw	ra,12(sp)
 400bcc4:	dc000215 	stw	r16,8(sp)
 400bcc8:	2021883a 	mov	r16,r4
 400bccc:	21000503 	ldbu	r4,20(r4)
 400bcd0:	d9400115 	stw	r5,4(sp)
 400bcd4:	400ba0c0 	call	400ba0c <_ZL21size_of_encoded_valueh>
 400bcd8:	d9400117 	ldw	r5,4(sp)
 400bcdc:	1009883a 	mov	r4,r2
 400bce0:	400d2c40 	call	400d2c4 <__mulsi3>
 400bce4:	81800317 	ldw	r6,12(r16)
 400bce8:	81400217 	ldw	r5,8(r16)
 400bcec:	81000503 	ldbu	r4,20(r16)
 400bcf0:	d80f883a 	mov	r7,sp
 400bcf4:	308dc83a 	sub	r6,r6,r2
 400bcf8:	400bab00 	call	400bab0 <_ZL28read_encoded_value_with_basehjPKhPj>
 400bcfc:	d8800017 	ldw	r2,0(sp)
 400bd00:	dfc00317 	ldw	ra,12(sp)
 400bd04:	dc000217 	ldw	r16,8(sp)
 400bd08:	dec00404 	addi	sp,sp,16
 400bd0c:	f800283a 	ret

0400bd10 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 400bd10:	deffff04 	addi	sp,sp,-4
 400bd14:	dfc00015 	stw	ra,0(sp)
 400bd18:	20c03fcc 	andi	r3,r4,255
 400bd1c:	00803fc4 	movi	r2,255
 400bd20:	18800e26 	beq	r3,r2,400bd5c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 400bd24:	20801c0c 	andi	r2,r4,112
 400bd28:	00c00804 	movi	r3,32
 400bd2c:	10c01726 	beq	r2,r3,400bd8c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
 400bd30:	18800e2e 	bgeu	r3,r2,400bd6c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
 400bd34:	00c01004 	movi	r3,64
 400bd38:	10c01026 	beq	r2,r3,400bd7c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
 400bd3c:	00c01404 	movi	r3,80
 400bd40:	10c00626 	beq	r2,r3,400bd5c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 400bd44:	00c00c04 	movi	r3,48
 400bd48:	10c00b1e 	bne	r2,r3,400bd78 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
 400bd4c:	2809883a 	mov	r4,r5
 400bd50:	dfc00017 	ldw	ra,0(sp)
 400bd54:	dec00104 	addi	sp,sp,4
 400bd58:	400e0fc1 	jmpi	400e0fc <_Unwind_GetDataRelBase>
 400bd5c:	0005883a 	mov	r2,zero
 400bd60:	dfc00017 	ldw	ra,0(sp)
 400bd64:	dec00104 	addi	sp,sp,4
 400bd68:	f800283a 	ret
 400bd6c:	103ffb26 	beq	r2,zero,400bd5c <__alt_mem_onchip_memory2_0+0xfc00aadc>
 400bd70:	00c00404 	movi	r3,16
 400bd74:	10fff926 	beq	r2,r3,400bd5c <__alt_mem_onchip_memory2_0+0xfc00aadc>
 400bd78:	400e3a00 	call	400e3a0 <abort>
 400bd7c:	2809883a 	mov	r4,r5
 400bd80:	dfc00017 	ldw	ra,0(sp)
 400bd84:	dec00104 	addi	sp,sp,4
 400bd88:	400e0ec1 	jmpi	400e0ec <_Unwind_GetRegionStart>
 400bd8c:	2809883a 	mov	r4,r5
 400bd90:	dfc00017 	ldw	ra,0(sp)
 400bd94:	dec00104 	addi	sp,sp,4
 400bd98:	400e1041 	jmpi	400e104 <_Unwind_GetTextRelBase>

0400bd9c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 400bd9c:	defffb04 	addi	sp,sp,-20
 400bda0:	dcc00315 	stw	r19,12(sp)
 400bda4:	dc400115 	stw	r17,4(sp)
 400bda8:	dc000015 	stw	r16,0(sp)
 400bdac:	dfc00415 	stw	ra,16(sp)
 400bdb0:	dc800215 	stw	r18,8(sp)
 400bdb4:	2027883a 	mov	r19,r4
 400bdb8:	2821883a 	mov	r16,r5
 400bdbc:	3023883a 	mov	r17,r6
 400bdc0:	20003f26 	beq	r4,zero,400bec0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
 400bdc4:	400e0ec0 	call	400e0ec <_Unwind_GetRegionStart>
 400bdc8:	88800015 	stw	r2,0(r17)
 400bdcc:	84800003 	ldbu	r18,0(r16)
 400bdd0:	00c03fc4 	movi	r3,255
 400bdd4:	84000044 	addi	r16,r16,1
 400bdd8:	90c03726 	beq	r18,r3,400beb8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
 400bddc:	980b883a 	mov	r5,r19
 400bde0:	9009883a 	mov	r4,r18
 400bde4:	400bd100 	call	400bd10 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400bde8:	800d883a 	mov	r6,r16
 400bdec:	89c00104 	addi	r7,r17,4
 400bdf0:	100b883a 	mov	r5,r2
 400bdf4:	9009883a 	mov	r4,r18
 400bdf8:	400bab00 	call	400bab0 <_ZL28read_encoded_value_with_basehjPKhPj>
 400bdfc:	1021883a 	mov	r16,r2
 400be00:	80c00003 	ldbu	r3,0(r16)
 400be04:	01003fc4 	movi	r4,255
 400be08:	80800044 	addi	r2,r16,1
 400be0c:	88c00505 	stb	r3,20(r17)
 400be10:	18c03fcc 	andi	r3,r3,255
 400be14:	19002c26 	beq	r3,r4,400bec8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
 400be18:	100f883a 	mov	r7,r2
 400be1c:	000d883a 	mov	r6,zero
 400be20:	000b883a 	mov	r5,zero
 400be24:	38c00003 	ldbu	r3,0(r7)
 400be28:	10800044 	addi	r2,r2,1
 400be2c:	100f883a 	mov	r7,r2
 400be30:	19001fcc 	andi	r4,r3,127
 400be34:	2148983a 	sll	r4,r4,r5
 400be38:	18c03fcc 	andi	r3,r3,255
 400be3c:	18c0201c 	xori	r3,r3,128
 400be40:	18ffe004 	addi	r3,r3,-128
 400be44:	310cb03a 	or	r6,r6,r4
 400be48:	294001c4 	addi	r5,r5,7
 400be4c:	183ff516 	blt	r3,zero,400be24 <__alt_mem_onchip_memory2_0+0xfc00aba4>
 400be50:	118d883a 	add	r6,r2,r6
 400be54:	89800315 	stw	r6,12(r17)
 400be58:	10c00003 	ldbu	r3,0(r2)
 400be5c:	000d883a 	mov	r6,zero
 400be60:	10800044 	addi	r2,r2,1
 400be64:	88c00545 	stb	r3,21(r17)
 400be68:	000b883a 	mov	r5,zero
 400be6c:	10c00003 	ldbu	r3,0(r2)
 400be70:	10800044 	addi	r2,r2,1
 400be74:	19001fcc 	andi	r4,r3,127
 400be78:	2148983a 	sll	r4,r4,r5
 400be7c:	18c03fcc 	andi	r3,r3,255
 400be80:	18c0201c 	xori	r3,r3,128
 400be84:	18ffe004 	addi	r3,r3,-128
 400be88:	310cb03a 	or	r6,r6,r4
 400be8c:	294001c4 	addi	r5,r5,7
 400be90:	183ff616 	blt	r3,zero,400be6c <__alt_mem_onchip_memory2_0+0xfc00abec>
 400be94:	118d883a 	add	r6,r2,r6
 400be98:	89800415 	stw	r6,16(r17)
 400be9c:	dfc00417 	ldw	ra,16(sp)
 400bea0:	dcc00317 	ldw	r19,12(sp)
 400bea4:	dc800217 	ldw	r18,8(sp)
 400bea8:	dc400117 	ldw	r17,4(sp)
 400beac:	dc000017 	ldw	r16,0(sp)
 400beb0:	dec00504 	addi	sp,sp,20
 400beb4:	f800283a 	ret
 400beb8:	88800115 	stw	r2,4(r17)
 400bebc:	003fd006 	br	400be00 <__alt_mem_onchip_memory2_0+0xfc00ab80>
 400bec0:	0005883a 	mov	r2,zero
 400bec4:	003fc006 	br	400bdc8 <__alt_mem_onchip_memory2_0+0xfc00ab48>
 400bec8:	88000315 	stw	zero,12(r17)
 400becc:	003fe206 	br	400be58 <__alt_mem_onchip_memory2_0+0xfc00abd8>

0400bed0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
 400bed0:	28800017 	ldw	r2,0(r5)
 400bed4:	30c00017 	ldw	r3,0(r6)
 400bed8:	defffb04 	addi	sp,sp,-20
 400bedc:	10800217 	ldw	r2,8(r2)
 400bee0:	dc400315 	stw	r17,12(sp)
 400bee4:	dc000215 	stw	r16,8(sp)
 400bee8:	d9400115 	stw	r5,4(sp)
 400beec:	dfc00415 	stw	ra,16(sp)
 400bef0:	2021883a 	mov	r16,r4
 400bef4:	d8c00015 	stw	r3,0(sp)
 400bef8:	2809883a 	mov	r4,r5
 400befc:	3023883a 	mov	r17,r6
 400bf00:	103ee83a 	callr	r2
 400bf04:	10803fcc 	andi	r2,r2,255
 400bf08:	d9400117 	ldw	r5,4(sp)
 400bf0c:	10000326 	beq	r2,zero,400bf1c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
 400bf10:	d8800017 	ldw	r2,0(sp)
 400bf14:	10800017 	ldw	r2,0(r2)
 400bf18:	d8800015 	stw	r2,0(sp)
 400bf1c:	80800017 	ldw	r2,0(r16)
 400bf20:	01c00044 	movi	r7,1
 400bf24:	d80d883a 	mov	r6,sp
 400bf28:	10800417 	ldw	r2,16(r2)
 400bf2c:	8009883a 	mov	r4,r16
 400bf30:	103ee83a 	callr	r2
 400bf34:	10c03fcc 	andi	r3,r2,255
 400bf38:	18000226 	beq	r3,zero,400bf44 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
 400bf3c:	d8c00017 	ldw	r3,0(sp)
 400bf40:	88c00015 	stw	r3,0(r17)
 400bf44:	dfc00417 	ldw	ra,16(sp)
 400bf48:	dc400317 	ldw	r17,12(sp)
 400bf4c:	dc000217 	ldw	r16,8(sp)
 400bf50:	dec00504 	addi	sp,sp,20
 400bf54:	f800283a 	ret

0400bf58 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
 400bf58:	defff304 	addi	sp,sp,-52
 400bf5c:	dc800615 	stw	r18,24(sp)
 400bf60:	3825d23a 	srai	r18,r7,8
 400bf64:	dd000815 	stw	r20,32(sp)
 400bf68:	dcc00715 	stw	r19,28(sp)
 400bf6c:	dfc00c15 	stw	ra,48(sp)
 400bf70:	ddc00b15 	stw	r23,44(sp)
 400bf74:	dd800a15 	stw	r22,40(sp)
 400bf78:	dd400915 	stw	r21,36(sp)
 400bf7c:	dc400515 	stw	r17,20(sp)
 400bf80:	dc000415 	stw	r16,16(sp)
 400bf84:	d9400215 	stw	r5,8(sp)
 400bf88:	3827883a 	mov	r19,r7
 400bf8c:	2029883a 	mov	r20,r4
 400bf90:	9000010e 	bge	r18,zero,400bf98 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
 400bf94:	04a5c83a 	sub	r18,zero,r18
 400bf98:	000b883a 	mov	r5,zero
 400bf9c:	01000144 	movi	r4,5
 400bfa0:	d9800315 	stw	r6,12(sp)
 400bfa4:	400bd100 	call	400bd10 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400bfa8:	d9800317 	ldw	r6,12(sp)
 400bfac:	d9c00104 	addi	r7,sp,4
 400bfb0:	100b883a 	mov	r5,r2
 400bfb4:	01000144 	movi	r4,5
 400bfb8:	400bab00 	call	400bab0 <_ZL28read_encoded_value_with_basehjPKhPj>
 400bfbc:	017ffe44 	movi	r5,-7
 400bfc0:	1009883a 	mov	r4,r2
 400bfc4:	1021883a 	mov	r16,r2
 400bfc8:	400d2c40 	call	400d2c4 <__mulsi3>
 400bfcc:	102d883a 	mov	r22,r2
 400bfd0:	0023883a 	mov	r17,zero
 400bfd4:	85400003 	ldbu	r21,0(r16)
 400bfd8:	8009883a 	mov	r4,r16
 400bfdc:	014001c4 	movi	r5,7
 400bfe0:	400d2c40 	call	400d2c4 <__mulsi3>
 400bfe4:	a8c01fcc 	andi	r3,r21,127
 400bfe8:	1585883a 	add	r2,r2,r22
 400bfec:	1886983a 	sll	r3,r3,r2
 400bff0:	ad403fcc 	andi	r21,r21,255
 400bff4:	ad40201c 	xori	r21,r21,128
 400bff8:	ad7fe004 	addi	r21,r21,-128
 400bffc:	84000044 	addi	r16,r16,1
 400c000:	88e2b03a 	or	r17,r17,r3
 400c004:	a83ff316 	blt	r21,zero,400bfd4 <__alt_mem_onchip_memory2_0+0xfc00ad54>
 400c008:	8461883a 	add	r16,r16,r17
 400c00c:	017ffe44 	movi	r5,-7
 400c010:	8009883a 	mov	r4,r16
 400c014:	400d2c40 	call	400d2c4 <__mulsi3>
 400c018:	102d883a 	mov	r22,r2
 400c01c:	002b883a 	mov	r21,zero
 400c020:	84400003 	ldbu	r17,0(r16)
 400c024:	8009883a 	mov	r4,r16
 400c028:	014001c4 	movi	r5,7
 400c02c:	400d2c40 	call	400d2c4 <__mulsi3>
 400c030:	88c01fcc 	andi	r3,r17,127
 400c034:	1585883a 	add	r2,r2,r22
 400c038:	1886983a 	sll	r3,r3,r2
 400c03c:	8c403fcc 	andi	r17,r17,255
 400c040:	8c40201c 	xori	r17,r17,128
 400c044:	8c7fe004 	addi	r17,r17,-128
 400c048:	84000044 	addi	r16,r16,1
 400c04c:	a8eab03a 	or	r21,r21,r3
 400c050:	883ff316 	blt	r17,zero,400c020 <__alt_mem_onchip_memory2_0+0xfc00ada0>
 400c054:	94403fcc 	andi	r17,r18,255
 400c058:	8c7fffc4 	addi	r17,r17,-1
 400c05c:	8463883a 	add	r17,r16,r17
 400c060:	ad4000c4 	addi	r21,r21,3
 400c064:	00bfff04 	movi	r2,-4
 400c068:	ac21883a 	add	r16,r21,r16
 400c06c:	017ffe44 	movi	r5,-7
 400c070:	8809883a 	mov	r4,r17
 400c074:	80a0703a 	and	r16,r16,r2
 400c078:	400d2c40 	call	400d2c4 <__mulsi3>
 400c07c:	0025883a 	mov	r18,zero
 400c080:	102f883a 	mov	r23,r2
 400c084:	8d800003 	ldbu	r22,0(r17)
 400c088:	8809883a 	mov	r4,r17
 400c08c:	014001c4 	movi	r5,7
 400c090:	400d2c40 	call	400d2c4 <__mulsi3>
 400c094:	b0c01fcc 	andi	r3,r22,127
 400c098:	15c5883a 	add	r2,r2,r23
 400c09c:	1886983a 	sll	r3,r3,r2
 400c0a0:	b5803fcc 	andi	r22,r22,255
 400c0a4:	b580201c 	xori	r22,r22,128
 400c0a8:	8d400044 	addi	r21,r17,1
 400c0ac:	b5bfe004 	addi	r22,r22,-128
 400c0b0:	90e4b03a 	or	r18,r18,r3
 400c0b4:	a823883a 	mov	r17,r21
 400c0b8:	b03ff216 	blt	r22,zero,400c084 <__alt_mem_onchip_memory2_0+0xfc00ae04>
 400c0bc:	9cc03fcc 	andi	r19,r19,255
 400c0c0:	90002426 	beq	r18,zero,400c154 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
 400c0c4:	9809883a 	mov	r4,r19
 400c0c8:	400ba0c0 	call	400ba0c <_ZL21size_of_encoded_valueh>
 400c0cc:	100b883a 	mov	r5,r2
 400c0d0:	913fffc4 	addi	r4,r18,-1
 400c0d4:	400d2c40 	call	400d2c4 <__mulsi3>
 400c0d8:	d9400d17 	ldw	r5,52(sp)
 400c0dc:	d80f883a 	mov	r7,sp
 400c0e0:	9809883a 	mov	r4,r19
 400c0e4:	140d883a 	add	r6,r2,r16
 400c0e8:	400bab00 	call	400bab0 <_ZL28read_encoded_value_with_basehjPKhPj>
 400c0ec:	d9000017 	ldw	r4,0(sp)
 400c0f0:	d9800204 	addi	r6,sp,8
 400c0f4:	a00b883a 	mov	r5,r20
 400c0f8:	400bed00 	call	400bed0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400c0fc:	10c03fcc 	andi	r3,r2,255
 400c100:	1800151e 	bne	r3,zero,400c158 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
 400c104:	a809883a 	mov	r4,r21
 400c108:	017ffe44 	movi	r5,-7
 400c10c:	400d2c40 	call	400d2c4 <__mulsi3>
 400c110:	102d883a 	mov	r22,r2
 400c114:	a809883a 	mov	r4,r21
 400c118:	0025883a 	mov	r18,zero
 400c11c:	24400003 	ldbu	r17,0(r4)
 400c120:	014001c4 	movi	r5,7
 400c124:	400d2c40 	call	400d2c4 <__mulsi3>
 400c128:	88c01fcc 	andi	r3,r17,127
 400c12c:	1585883a 	add	r2,r2,r22
 400c130:	1886983a 	sll	r3,r3,r2
 400c134:	8c403fcc 	andi	r17,r17,255
 400c138:	8c40201c 	xori	r17,r17,128
 400c13c:	ad400044 	addi	r21,r21,1
 400c140:	8c7fe004 	addi	r17,r17,-128
 400c144:	90e4b03a 	or	r18,r18,r3
 400c148:	a809883a 	mov	r4,r21
 400c14c:	883ff316 	blt	r17,zero,400c11c <__alt_mem_onchip_memory2_0+0xfc00ae9c>
 400c150:	003fdb06 	br	400c0c0 <__alt_mem_onchip_memory2_0+0xfc00ae40>
 400c154:	0005883a 	mov	r2,zero
 400c158:	dfc00c17 	ldw	ra,48(sp)
 400c15c:	ddc00b17 	ldw	r23,44(sp)
 400c160:	dd800a17 	ldw	r22,40(sp)
 400c164:	dd400917 	ldw	r21,36(sp)
 400c168:	dd000817 	ldw	r20,32(sp)
 400c16c:	dcc00717 	ldw	r19,28(sp)
 400c170:	dc800617 	ldw	r18,24(sp)
 400c174:	dc400517 	ldw	r17,20(sp)
 400c178:	dc000417 	ldw	r16,16(sp)
 400c17c:	dec00d04 	addi	sp,sp,52
 400c180:	f800283a 	ret

0400c184 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
 400c184:	defffb04 	addi	sp,sp,-20
 400c188:	dc000115 	stw	r16,4(sp)
 400c18c:	24000317 	ldw	r16,12(r4)
 400c190:	01ce303a 	nor	r7,zero,r7
 400c194:	dc800315 	stw	r18,12(sp)
 400c198:	dc400215 	stw	r17,8(sp)
 400c19c:	dfc00415 	stw	ra,16(sp)
 400c1a0:	2023883a 	mov	r17,r4
 400c1a4:	2825883a 	mov	r18,r5
 400c1a8:	d9800015 	stw	r6,0(sp)
 400c1ac:	81e1883a 	add	r16,r16,r7
 400c1b0:	800d883a 	mov	r6,r16
 400c1b4:	000b883a 	mov	r5,zero
 400c1b8:	0009883a 	mov	r4,zero
 400c1bc:	30800003 	ldbu	r2,0(r6)
 400c1c0:	84000044 	addi	r16,r16,1
 400c1c4:	800d883a 	mov	r6,r16
 400c1c8:	10c01fcc 	andi	r3,r2,127
 400c1cc:	1906983a 	sll	r3,r3,r4
 400c1d0:	10803fcc 	andi	r2,r2,255
 400c1d4:	1080201c 	xori	r2,r2,128
 400c1d8:	10bfe004 	addi	r2,r2,-128
 400c1dc:	28cab03a 	or	r5,r5,r3
 400c1e0:	210001c4 	addi	r4,r4,7
 400c1e4:	103ff516 	blt	r2,zero,400c1bc <__alt_mem_onchip_memory2_0+0xfc00af3c>
 400c1e8:	28000e26 	beq	r5,zero,400c224 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
 400c1ec:	8809883a 	mov	r4,r17
 400c1f0:	400bcbc0 	call	400bcbc <_ZL15get_ttype_entryP16lsda_header_infom>
 400c1f4:	d80d883a 	mov	r6,sp
 400c1f8:	900b883a 	mov	r5,r18
 400c1fc:	1009883a 	mov	r4,r2
 400c200:	400bed00 	call	400bed0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400c204:	10c03fcc 	andi	r3,r2,255
 400c208:	183fe926 	beq	r3,zero,400c1b0 <__alt_mem_onchip_memory2_0+0xfc00af30>
 400c20c:	dfc00417 	ldw	ra,16(sp)
 400c210:	dc800317 	ldw	r18,12(sp)
 400c214:	dc400217 	ldw	r17,8(sp)
 400c218:	dc000117 	ldw	r16,4(sp)
 400c21c:	dec00504 	addi	sp,sp,20
 400c220:	f800283a 	ret
 400c224:	0005883a 	mov	r2,zero
 400c228:	003ff806 	br	400c20c <__alt_mem_onchip_memory2_0+0xfc00af8c>

0400c22c <__gxx_personality_sj0>:
 400c22c:	00810074 	movhi	r2,1025
 400c230:	deffdd04 	addi	sp,sp,-140
 400c234:	10b08b04 	addi	r2,r2,-15828
 400c238:	d8800e15 	stw	r2,56(sp)
 400c23c:	008100b4 	movhi	r2,1026
 400c240:	10807404 	addi	r2,r2,464
 400c244:	d8800f15 	stw	r2,60(sp)
 400c248:	00810074 	movhi	r2,1025
 400c24c:	10b20104 	addi	r2,r2,-14332
 400c250:	d9001515 	stw	r4,84(sp)
 400c254:	d9000804 	addi	r4,sp,32
 400c258:	d8801115 	stw	r2,68(sp)
 400c25c:	dfc02215 	stw	ra,136(sp)
 400c260:	df002115 	stw	fp,132(sp)
 400c264:	dec01015 	stw	sp,64(sp)
 400c268:	dec01215 	stw	sp,72(sp)
 400c26c:	d9401915 	stw	r5,100(sp)
 400c270:	d9801615 	stw	r6,88(sp)
 400c274:	d9c01715 	stw	r7,92(sp)
 400c278:	400e0240 	call	400e024 <_Unwind_SjLj_Register>
 400c27c:	d8c01517 	ldw	r3,84(sp)
 400c280:	d8000715 	stw	zero,28(sp)
 400c284:	d8000615 	stw	zero,24(sp)
 400c288:	00800044 	movi	r2,1
 400c28c:	18800926 	beq	r3,r2,400c2b4 <__gxx_personality_sj0+0x88>
 400c290:	01c000c4 	movi	r7,3
 400c294:	d9c01515 	stw	r7,84(sp)
 400c298:	d9000804 	addi	r4,sp,32
 400c29c:	400e03c0 	call	400e03c <_Unwind_SjLj_Unregister>
 400c2a0:	d8801517 	ldw	r2,84(sp)
 400c2a4:	dfc02217 	ldw	ra,136(sp)
 400c2a8:	df002117 	ldw	fp,132(sp)
 400c2ac:	dec02304 	addi	sp,sp,140
 400c2b0:	f800283a 	ret
 400c2b4:	d9001617 	ldw	r4,88(sp)
 400c2b8:	00af3574 	movhi	r2,48341
 400c2bc:	d9c01717 	ldw	r7,92(sp)
 400c2c0:	10b54004 	addi	r2,r2,-11008
 400c2c4:	00ee2cb4 	movhi	r3,47282
 400c2c8:	2085883a 	add	r2,r4,r2
 400c2cc:	18eaaf04 	addi	r3,r3,-21828
 400c2d0:	d8801b15 	stw	r2,108(sp)
 400c2d4:	38c7883a 	add	r3,r7,r3
 400c2d8:	1105803a 	cmpltu	r2,r2,r4
 400c2dc:	10c7883a 	add	r3,r2,r3
 400c2e0:	d8c01c15 	stw	r3,112(sp)
 400c2e4:	d8c01917 	ldw	r3,100(sp)
 400c2e8:	00800184 	movi	r2,6
 400c2ec:	18805426 	beq	r3,r2,400c440 <__gxx_personality_sj0+0x214>
 400c2f0:	d9002417 	ldw	r4,144(sp)
 400c2f4:	00bfffc4 	movi	r2,-1
 400c2f8:	d8800915 	stw	r2,36(sp)
 400c2fc:	400e0e00 	call	400e0e0 <_Unwind_GetLanguageSpecificData>
 400c300:	d8801a15 	stw	r2,104(sp)
 400c304:	1000c926 	beq	r2,zero,400c62c <__gxx_personality_sj0+0x400>
 400c308:	d9002417 	ldw	r4,144(sp)
 400c30c:	d80d883a 	mov	r6,sp
 400c310:	100b883a 	mov	r5,r2
 400c314:	400bd9c0 	call	400bd9c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400c318:	d9402417 	ldw	r5,144(sp)
 400c31c:	d9000503 	ldbu	r4,20(sp)
 400c320:	d8801515 	stw	r2,84(sp)
 400c324:	400bd100 	call	400bd10 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c328:	d9002417 	ldw	r4,144(sp)
 400c32c:	d9400604 	addi	r5,sp,24
 400c330:	d8800215 	stw	r2,8(sp)
 400c334:	400e0b00 	call	400e0b0 <_Unwind_GetIPInfo>
 400c338:	d8c00617 	ldw	r3,24(sp)
 400c33c:	18006126 	beq	r3,zero,400c4c4 <__gxx_personality_sj0+0x298>
 400c340:	1000ba16 	blt	r2,zero,400c62c <__gxx_personality_sj0+0x400>
 400c344:	10002f1e 	bne	r2,zero,400c404 <__gxx_personality_sj0+0x1d8>
 400c348:	d8001515 	stw	zero,84(sp)
 400c34c:	d8001f15 	stw	zero,124(sp)
 400c350:	d8001815 	stw	zero,96(sp)
 400c354:	00c00044 	movi	r3,1
 400c358:	d9001917 	ldw	r4,100(sp)
 400c35c:	2080004c 	andi	r2,r4,1
 400c360:	1000b51e 	bne	r2,zero,400c638 <__gxx_personality_sj0+0x40c>
 400c364:	d9001917 	ldw	r4,100(sp)
 400c368:	2080020c 	andi	r2,r4,8
 400c36c:	1000b71e 	bne	r2,zero,400c64c <__gxx_personality_sj0+0x420>
 400c370:	d9c01c17 	ldw	r7,112(sp)
 400c374:	3800b826 	beq	r7,zero,400c658 <__gxx_personality_sj0+0x42c>
 400c378:	00800044 	movi	r2,1
 400c37c:	1880b526 	beq	r3,r2,400c654 <__gxx_personality_sj0+0x428>
 400c380:	d9c01517 	ldw	r7,84(sp)
 400c384:	3800f516 	blt	r7,zero,400c75c <__gxx_personality_sj0+0x530>
 400c388:	d9002417 	ldw	r4,144(sp)
 400c38c:	d9802317 	ldw	r6,140(sp)
 400c390:	00bfffc4 	movi	r2,-1
 400c394:	000b883a 	mov	r5,zero
 400c398:	d8800915 	stw	r2,36(sp)
 400c39c:	400e0840 	call	400e084 <_Unwind_SetGR>
 400c3a0:	d9801517 	ldw	r6,84(sp)
 400c3a4:	d9002417 	ldw	r4,144(sp)
 400c3a8:	01400044 	movi	r5,1
 400c3ac:	400e0840 	call	400e084 <_Unwind_SetGR>
 400c3b0:	d9002417 	ldw	r4,144(sp)
 400c3b4:	d9401f17 	ldw	r5,124(sp)
 400c3b8:	400e0d00 	call	400e0d0 <_Unwind_SetIP>
 400c3bc:	010001c4 	movi	r4,7
 400c3c0:	d9001515 	stw	r4,84(sp)
 400c3c4:	003fb406 	br	400c298 <__alt_mem_onchip_memory2_0+0xfc00b018>
 400c3c8:	000f883a 	mov	r7,zero
 400c3cc:	000d883a 	mov	r6,zero
 400c3d0:	19000003 	ldbu	r4,0(r3)
 400c3d4:	18c00044 	addi	r3,r3,1
 400c3d8:	d8c01515 	stw	r3,84(sp)
 400c3dc:	21401fcc 	andi	r5,r4,127
 400c3e0:	298a983a 	sll	r5,r5,r6
 400c3e4:	21003fcc 	andi	r4,r4,255
 400c3e8:	2100201c 	xori	r4,r4,128
 400c3ec:	213fe004 	addi	r4,r4,-128
 400c3f0:	394eb03a 	or	r7,r7,r5
 400c3f4:	318001c4 	addi	r6,r6,7
 400c3f8:	203ff516 	blt	r4,zero,400c3d0 <__alt_mem_onchip_memory2_0+0xfc00b150>
 400c3fc:	10bfffc4 	addi	r2,r2,-1
 400c400:	10003226 	beq	r2,zero,400c4cc <__gxx_personality_sj0+0x2a0>
 400c404:	d9c01517 	ldw	r7,84(sp)
 400c408:	0011883a 	mov	r8,zero
 400c40c:	000d883a 	mov	r6,zero
 400c410:	39000003 	ldbu	r4,0(r7)
 400c414:	38c00044 	addi	r3,r7,1
 400c418:	180f883a 	mov	r7,r3
 400c41c:	21401fcc 	andi	r5,r4,127
 400c420:	298a983a 	sll	r5,r5,r6
 400c424:	21003fcc 	andi	r4,r4,255
 400c428:	2100201c 	xori	r4,r4,128
 400c42c:	213fe004 	addi	r4,r4,-128
 400c430:	4150b03a 	or	r8,r8,r5
 400c434:	318001c4 	addi	r6,r6,7
 400c438:	203ff516 	blt	r4,zero,400c410 <__alt_mem_onchip_memory2_0+0xfc00b190>
 400c43c:	003fe206 	br	400c3c8 <__alt_mem_onchip_memory2_0+0xfc00b148>
 400c440:	d9001c17 	ldw	r4,112(sp)
 400c444:	203faa1e 	bne	r4,zero,400c2f0 <__alt_mem_onchip_memory2_0+0xfc00b070>
 400c448:	d9c01517 	ldw	r7,84(sp)
 400c44c:	d8801b17 	ldw	r2,108(sp)
 400c450:	38bfa736 	bltu	r7,r2,400c2f0 <__alt_mem_onchip_memory2_0+0xfc00b070>
 400c454:	d8c02317 	ldw	r3,140(sp)
 400c458:	18fffe17 	ldw	r3,-8(r3)
 400c45c:	d8c01f15 	stw	r3,124(sp)
 400c460:	18008226 	beq	r3,zero,400c66c <__gxx_personality_sj0+0x440>
 400c464:	d9002317 	ldw	r4,140(sp)
 400c468:	d9c02317 	ldw	r7,140(sp)
 400c46c:	213ffb17 	ldw	r4,-20(r4)
 400c470:	39fffd17 	ldw	r7,-12(r7)
 400c474:	d9001515 	stw	r4,84(sp)
 400c478:	d9c01a15 	stw	r7,104(sp)
 400c47c:	d8801517 	ldw	r2,84(sp)
 400c480:	103fc10e 	bge	r2,zero,400c388 <__alt_mem_onchip_memory2_0+0xfc00b108>
 400c484:	d9002417 	ldw	r4,144(sp)
 400c488:	d9401a17 	ldw	r5,104(sp)
 400c48c:	d80d883a 	mov	r6,sp
 400c490:	00bfffc4 	movi	r2,-1
 400c494:	d8800915 	stw	r2,36(sp)
 400c498:	400bd9c0 	call	400bd9c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400c49c:	d9402417 	ldw	r5,144(sp)
 400c4a0:	d9000503 	ldbu	r4,20(sp)
 400c4a4:	400bd100 	call	400bd10 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c4a8:	d9000503 	ldbu	r4,20(sp)
 400c4ac:	d9402417 	ldw	r5,144(sp)
 400c4b0:	d8800215 	stw	r2,8(sp)
 400c4b4:	400bd100 	call	400bd10 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c4b8:	d8c02317 	ldw	r3,140(sp)
 400c4bc:	18bffe15 	stw	r2,-8(r3)
 400c4c0:	003fb106 	br	400c388 <__alt_mem_onchip_memory2_0+0xfc00b108>
 400c4c4:	10bfffc4 	addi	r2,r2,-1
 400c4c8:	003f9d06 	br	400c340 <__alt_mem_onchip_memory2_0+0xfc00b0c0>
 400c4cc:	42000044 	addi	r8,r8,1
 400c4d0:	da001f15 	stw	r8,124(sp)
 400c4d4:	38005326 	beq	r7,zero,400c624 <__gxx_personality_sj0+0x3f8>
 400c4d8:	d8800417 	ldw	r2,16(sp)
 400c4dc:	39ffffc4 	addi	r7,r7,-1
 400c4e0:	11c5883a 	add	r2,r2,r7
 400c4e4:	d8801815 	stw	r2,96(sp)
 400c4e8:	40005026 	beq	r8,zero,400c62c <__gxx_personality_sj0+0x400>
 400c4ec:	10007426 	beq	r2,zero,400c6c0 <__gxx_personality_sj0+0x494>
 400c4f0:	d8801917 	ldw	r2,100(sp)
 400c4f4:	1080020c 	andi	r2,r2,8
 400c4f8:	d8802015 	stw	r2,128(sp)
 400c4fc:	1000a21e 	bne	r2,zero,400c788 <__gxx_personality_sj0+0x55c>
 400c500:	d8c01c17 	ldw	r3,112(sp)
 400c504:	1800b026 	beq	r3,zero,400c7c8 <__gxx_personality_sj0+0x59c>
 400c508:	01c100f4 	movhi	r7,1027
 400c50c:	39e95d04 	addi	r7,r7,-23180
 400c510:	d9c01e15 	stw	r7,120(sp)
 400c514:	d8001d05 	stb	zero,116(sp)
 400c518:	d8c01817 	ldw	r3,96(sp)
 400c51c:	d8001515 	stw	zero,84(sp)
 400c520:	0009883a 	mov	r4,zero
 400c524:	19400003 	ldbu	r5,0(r3)
 400c528:	18800044 	addi	r2,r3,1
 400c52c:	d9c01517 	ldw	r7,84(sp)
 400c530:	28c01fcc 	andi	r3,r5,127
 400c534:	1906983a 	sll	r3,r3,r4
 400c538:	29803fcc 	andi	r6,r5,255
 400c53c:	3180201c 	xori	r6,r6,128
 400c540:	38ceb03a 	or	r7,r7,r3
 400c544:	d8801715 	stw	r2,92(sp)
 400c548:	31bfe004 	addi	r6,r6,-128
 400c54c:	d9c01515 	stw	r7,84(sp)
 400c550:	210001c4 	addi	r4,r4,7
 400c554:	1007883a 	mov	r3,r2
 400c558:	303ff216 	blt	r6,zero,400c524 <__alt_mem_onchip_memory2_0+0xfc00b2a4>
 400c55c:	00c007c4 	movi	r3,31
 400c560:	19000836 	bltu	r3,r4,400c584 <__gxx_personality_sj0+0x358>
 400c564:	2940100c 	andi	r5,r5,64
 400c568:	28000626 	beq	r5,zero,400c584 <__gxx_personality_sj0+0x358>
 400c56c:	01c00044 	movi	r7,1
 400c570:	3908983a 	sll	r4,r7,r4
 400c574:	d8c01517 	ldw	r3,84(sp)
 400c578:	0109c83a 	sub	r4,zero,r4
 400c57c:	1906b03a 	or	r3,r3,r4
 400c580:	d8c01515 	stw	r3,84(sp)
 400c584:	d8001615 	stw	zero,88(sp)
 400c588:	0009883a 	mov	r4,zero
 400c58c:	11400003 	ldbu	r5,0(r2)
 400c590:	d9c01617 	ldw	r7,88(sp)
 400c594:	10800044 	addi	r2,r2,1
 400c598:	28c01fcc 	andi	r3,r5,127
 400c59c:	1906983a 	sll	r3,r3,r4
 400c5a0:	29803fcc 	andi	r6,r5,255
 400c5a4:	3180201c 	xori	r6,r6,128
 400c5a8:	38ceb03a 	or	r7,r7,r3
 400c5ac:	31bfe004 	addi	r6,r6,-128
 400c5b0:	d9c01615 	stw	r7,88(sp)
 400c5b4:	210001c4 	addi	r4,r4,7
 400c5b8:	303ff416 	blt	r6,zero,400c58c <__alt_mem_onchip_memory2_0+0xfc00b30c>
 400c5bc:	008007c4 	movi	r2,31
 400c5c0:	11000736 	bltu	r2,r4,400c5e0 <__gxx_personality_sj0+0x3b4>
 400c5c4:	2940100c 	andi	r5,r5,64
 400c5c8:	28000526 	beq	r5,zero,400c5e0 <__gxx_personality_sj0+0x3b4>
 400c5cc:	00c00044 	movi	r3,1
 400c5d0:	1908983a 	sll	r4,r3,r4
 400c5d4:	0109c83a 	sub	r4,zero,r4
 400c5d8:	390eb03a 	or	r7,r7,r4
 400c5dc:	d9c01615 	stw	r7,88(sp)
 400c5e0:	d9001517 	ldw	r4,84(sp)
 400c5e4:	20003c26 	beq	r4,zero,400c6d8 <__gxx_personality_sj0+0x4ac>
 400c5e8:	01003e0e 	bge	zero,r4,400c6e4 <__gxx_personality_sj0+0x4b8>
 400c5ec:	01ffffc4 	movi	r7,-1
 400c5f0:	200b883a 	mov	r5,r4
 400c5f4:	d809883a 	mov	r4,sp
 400c5f8:	d9c00915 	stw	r7,36(sp)
 400c5fc:	400bcbc0 	call	400bcbc <_ZL15get_ttype_entryP16lsda_header_infom>
 400c600:	10005f26 	beq	r2,zero,400c780 <__gxx_personality_sj0+0x554>
 400c604:	d8c01e17 	ldw	r3,120(sp)
 400c608:	1800571e 	bne	r3,zero,400c768 <__gxx_personality_sj0+0x53c>
 400c60c:	d9001617 	ldw	r4,88(sp)
 400c610:	20002926 	beq	r4,zero,400c6b8 <__gxx_personality_sj0+0x48c>
 400c614:	d9c01717 	ldw	r7,92(sp)
 400c618:	390f883a 	add	r7,r7,r4
 400c61c:	d9c01815 	stw	r7,96(sp)
 400c620:	003fbd06 	br	400c518 <__alt_mem_onchip_memory2_0+0xfc00b298>
 400c624:	d8c01f17 	ldw	r3,124(sp)
 400c628:	1800251e 	bne	r3,zero,400c6c0 <__gxx_personality_sj0+0x494>
 400c62c:	01000204 	movi	r4,8
 400c630:	d9001515 	stw	r4,84(sp)
 400c634:	003f1806 	br	400c298 <__alt_mem_onchip_memory2_0+0xfc00b018>
 400c638:	d8801c17 	ldw	r2,112(sp)
 400c63c:	10000d26 	beq	r2,zero,400c674 <__gxx_personality_sj0+0x448>
 400c640:	00800184 	movi	r2,6
 400c644:	d8801515 	stw	r2,84(sp)
 400c648:	003f1306 	br	400c298 <__alt_mem_onchip_memory2_0+0xfc00b018>
 400c64c:	00800044 	movi	r2,1
 400c650:	18bf4d1e 	bne	r3,r2,400c388 <__alt_mem_onchip_memory2_0+0xfc00b108>
 400c654:	400b9840 	call	400b984 <_ZSt9terminatev>
 400c658:	d9001b17 	ldw	r4,108(sp)
 400c65c:	00800044 	movi	r2,1
 400c660:	113f4536 	bltu	r2,r4,400c378 <__alt_mem_onchip_memory2_0+0xfc00b0f8>
 400c664:	00800044 	movi	r2,1
 400c668:	18bf841e 	bne	r3,r2,400c47c <__alt_mem_onchip_memory2_0+0xfc00b1fc>
 400c66c:	d9002317 	ldw	r4,140(sp)
 400c670:	400d0080 	call	400d008 <__cxa_call_terminate>
 400c674:	d8c01b17 	ldw	r3,108(sp)
 400c678:	00800044 	movi	r2,1
 400c67c:	10fff036 	bltu	r2,r3,400c640 <__alt_mem_onchip_memory2_0+0xfc00b3c0>
 400c680:	d9002317 	ldw	r4,140(sp)
 400c684:	d8801817 	ldw	r2,96(sp)
 400c688:	d9c01517 	ldw	r7,84(sp)
 400c68c:	d8c01a17 	ldw	r3,104(sp)
 400c690:	20bffc15 	stw	r2,-16(r4)
 400c694:	d8800717 	ldw	r2,28(sp)
 400c698:	21fffb15 	stw	r7,-20(r4)
 400c69c:	d9c01f17 	ldw	r7,124(sp)
 400c6a0:	20bfff15 	stw	r2,-4(r4)
 400c6a4:	00800184 	movi	r2,6
 400c6a8:	20fffd15 	stw	r3,-12(r4)
 400c6ac:	21fffe15 	stw	r7,-8(r4)
 400c6b0:	d8801515 	stw	r2,84(sp)
 400c6b4:	003ef806 	br	400c298 <__alt_mem_onchip_memory2_0+0xfc00b018>
 400c6b8:	d8801d03 	ldbu	r2,116(sp)
 400c6bc:	103fdb26 	beq	r2,zero,400c62c <__alt_mem_onchip_memory2_0+0xfc00b3ac>
 400c6c0:	d8c01917 	ldw	r3,100(sp)
 400c6c4:	1880004c 	andi	r2,r3,1
 400c6c8:	103fd81e 	bne	r2,zero,400c62c <__alt_mem_onchip_memory2_0+0xfc00b3ac>
 400c6cc:	d8001515 	stw	zero,84(sp)
 400c6d0:	00c00084 	movi	r3,2
 400c6d4:	003f2306 	br	400c364 <__alt_mem_onchip_memory2_0+0xfc00b0e4>
 400c6d8:	00c00044 	movi	r3,1
 400c6dc:	d8c01d05 	stb	r3,116(sp)
 400c6e0:	003fca06 	br	400c60c <__alt_mem_onchip_memory2_0+0xfc00b38c>
 400c6e4:	d9001e17 	ldw	r4,120(sp)
 400c6e8:	20000426 	beq	r4,zero,400c6fc <__gxx_personality_sj0+0x4d0>
 400c6ec:	d9c02017 	ldw	r7,128(sp)
 400c6f0:	3800021e 	bne	r7,zero,400c6fc <__gxx_personality_sj0+0x4d0>
 400c6f4:	d8801c17 	ldw	r2,112(sp)
 400c6f8:	10002726 	beq	r2,zero,400c798 <__gxx_personality_sj0+0x56c>
 400c6fc:	d8801517 	ldw	r2,84(sp)
 400c700:	000d883a 	mov	r6,zero
 400c704:	000b883a 	mov	r5,zero
 400c708:	0088303a 	nor	r4,zero,r2
 400c70c:	d8800317 	ldw	r2,12(sp)
 400c710:	1109883a 	add	r4,r2,r4
 400c714:	20800003 	ldbu	r2,0(r4)
 400c718:	21000044 	addi	r4,r4,1
 400c71c:	10c01fcc 	andi	r3,r2,127
 400c720:	1946983a 	sll	r3,r3,r5
 400c724:	10803fcc 	andi	r2,r2,255
 400c728:	1080201c 	xori	r2,r2,128
 400c72c:	10bfe004 	addi	r2,r2,-128
 400c730:	30ccb03a 	or	r6,r6,r3
 400c734:	294001c4 	addi	r5,r5,7
 400c738:	103ff616 	blt	r2,zero,400c714 <__alt_mem_onchip_memory2_0+0xfc00b494>
 400c73c:	3005003a 	cmpeq	r2,r6,zero
 400c740:	10803fcc 	andi	r2,r2,255
 400c744:	103fb126 	beq	r2,zero,400c60c <__alt_mem_onchip_memory2_0+0xfc00b38c>
 400c748:	d9c01917 	ldw	r7,100(sp)
 400c74c:	3880004c 	andi	r2,r7,1
 400c750:	103fb91e 	bne	r2,zero,400c638 <__alt_mem_onchip_memory2_0+0xfc00b3b8>
 400c754:	d8802017 	ldw	r2,128(sp)
 400c758:	10002d26 	beq	r2,zero,400c810 <__gxx_personality_sj0+0x5e4>
 400c75c:	00800044 	movi	r2,1
 400c760:	d8800915 	stw	r2,36(sp)
 400c764:	400b9ac0 	call	400b9ac <_ZSt10unexpectedv>
 400c768:	d9800704 	addi	r6,sp,28
 400c76c:	180b883a 	mov	r5,r3
 400c770:	1009883a 	mov	r4,r2
 400c774:	400bed00 	call	400bed0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400c778:	10803fcc 	andi	r2,r2,255
 400c77c:	103fa326 	beq	r2,zero,400c60c <__alt_mem_onchip_memory2_0+0xfc00b38c>
 400c780:	00c000c4 	movi	r3,3
 400c784:	003ef406 	br	400c358 <__alt_mem_onchip_memory2_0+0xfc00b0d8>
 400c788:	010100f4 	movhi	r4,1027
 400c78c:	21295b04 	addi	r4,r4,-23188
 400c790:	d9001e15 	stw	r4,120(sp)
 400c794:	003f5f06 	br	400c514 <__alt_mem_onchip_memory2_0+0xfc00b294>
 400c798:	d9001b17 	ldw	r4,108(sp)
 400c79c:	00c00044 	movi	r3,1
 400c7a0:	193fd636 	bltu	r3,r4,400c6fc <__alt_mem_onchip_memory2_0+0xfc00b47c>
 400c7a4:	01ffffc4 	movi	r7,-1
 400c7a8:	d9c00915 	stw	r7,36(sp)
 400c7ac:	d9800717 	ldw	r6,28(sp)
 400c7b0:	d9c01517 	ldw	r7,84(sp)
 400c7b4:	d9401e17 	ldw	r5,120(sp)
 400c7b8:	d809883a 	mov	r4,sp
 400c7bc:	400c1840 	call	400c184 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400c7c0:	1080005c 	xori	r2,r2,1
 400c7c4:	003fde06 	br	400c740 <__alt_mem_onchip_memory2_0+0xfc00b4c0>
 400c7c8:	d9001b17 	ldw	r4,108(sp)
 400c7cc:	00800044 	movi	r2,1
 400c7d0:	113f4d36 	bltu	r2,r4,400c508 <__alt_mem_onchip_memory2_0+0xfc00b288>
 400c7d4:	d9c02317 	ldw	r7,140(sp)
 400c7d8:	38800017 	ldw	r2,0(r7)
 400c7dc:	1080004c 	andi	r2,r2,1
 400c7e0:	1000061e 	bne	r2,zero,400c7fc <__gxx_personality_sj0+0x5d0>
 400c7e4:	d8c02317 	ldw	r3,140(sp)
 400c7e8:	18800504 	addi	r2,r3,20
 400c7ec:	d8800715 	stw	r2,28(sp)
 400c7f0:	10bff017 	ldw	r2,-64(r2)
 400c7f4:	d8801e15 	stw	r2,120(sp)
 400c7f8:	003f4606 	br	400c514 <__alt_mem_onchip_memory2_0+0xfc00b294>
 400c7fc:	38bff517 	ldw	r2,-44(r7)
 400c800:	003ffa06 	br	400c7ec <__alt_mem_onchip_memory2_0+0xfc00b56c>
 400c804:	d9000a17 	ldw	r4,40(sp)
 400c808:	400cbbc0 	call	400cbbc <__cxa_begin_catch>
 400c80c:	003f9106 	br	400c654 <__alt_mem_onchip_memory2_0+0xfc00b3d4>
 400c810:	d9c01c17 	ldw	r7,112(sp)
 400c814:	383eda1e 	bne	r7,zero,400c380 <__alt_mem_onchip_memory2_0+0xfc00b100>
 400c818:	d8c01b17 	ldw	r3,108(sp)
 400c81c:	00800044 	movi	r2,1
 400c820:	10fed736 	bltu	r2,r3,400c380 <__alt_mem_onchip_memory2_0+0xfc00b100>
 400c824:	00c000c4 	movi	r3,3
 400c828:	003f8e06 	br	400c664 <__alt_mem_onchip_memory2_0+0xfc00b3e4>

0400c82c <__cxa_call_unexpected>:
 400c82c:	00810074 	movhi	r2,1025
 400c830:	deffe604 	addi	sp,sp,-104
 400c834:	10b08b04 	addi	r2,r2,-15828
 400c838:	d8800d15 	stw	r2,52(sp)
 400c83c:	008100b4 	movhi	r2,1026
 400c840:	10807804 	addi	r2,r2,480
 400c844:	d8800e15 	stw	r2,56(sp)
 400c848:	d8800104 	addi	r2,sp,4
 400c84c:	d8800f15 	stw	r2,60(sp)
 400c850:	00810074 	movhi	r2,1025
 400c854:	10b22e04 	addi	r2,r2,-14152
 400c858:	d9001415 	stw	r4,80(sp)
 400c85c:	d9000704 	addi	r4,sp,28
 400c860:	dfc01915 	stw	ra,100(sp)
 400c864:	d8801015 	stw	r2,64(sp)
 400c868:	df001815 	stw	fp,96(sp)
 400c86c:	dec01115 	stw	sp,68(sp)
 400c870:	400e0240 	call	400e024 <_Unwind_SjLj_Register>
 400c874:	d9001417 	ldw	r4,80(sp)
 400c878:	400cbbc0 	call	400cbbc <__cxa_begin_catch>
 400c87c:	d8c01417 	ldw	r3,80(sp)
 400c880:	18bffe17 	ldw	r2,-8(r3)
 400c884:	193ff717 	ldw	r4,-36(r3)
 400c888:	18fffd17 	ldw	r3,-12(r3)
 400c88c:	d8800315 	stw	r2,12(sp)
 400c890:	d8c01615 	stw	r3,88(sp)
 400c894:	d8c01417 	ldw	r3,80(sp)
 400c898:	18fffb17 	ldw	r3,-20(r3)
 400c89c:	d8c01515 	stw	r3,84(sp)
 400c8a0:	d8c01417 	ldw	r3,80(sp)
 400c8a4:	18fff817 	ldw	r3,-32(r3)
 400c8a8:	d8c01415 	stw	r3,80(sp)
 400c8ac:	00c00044 	movi	r3,1
 400c8b0:	d8c00815 	stw	r3,32(sp)
 400c8b4:	400b99c0 	call	400b99c <_ZN10__cxxabiv112__unexpectedEPFvvE>
 400c8b8:	d8c00917 	ldw	r3,36(sp)
 400c8bc:	d8800817 	ldw	r2,32(sp)
 400c8c0:	d8c01715 	stw	r3,92(sp)
 400c8c4:	10000a26 	beq	r2,zero,400c8f0 <__cxa_call_unexpected+0xc4>
 400c8c8:	10bfffc4 	addi	r2,r2,-1
 400c8cc:	10000126 	beq	r2,zero,400c8d4 <__cxa_call_unexpected+0xa8>
 400c8d0:	003b68fa 	trap	3
 400c8d4:	d8000815 	stw	zero,32(sp)
 400c8d8:	400cc700 	call	400cc70 <__cxa_end_catch>
 400c8dc:	400cc700 	call	400cc70 <__cxa_end_catch>
 400c8e0:	d9001717 	ldw	r4,92(sp)
 400c8e4:	00bfffc4 	movi	r2,-1
 400c8e8:	d8800815 	stw	r2,32(sp)
 400c8ec:	400e2200 	call	400e220 <_Unwind_SjLj_Resume>
 400c8f0:	d9001717 	ldw	r4,92(sp)
 400c8f4:	400cbbc0 	call	400cbbc <__cxa_begin_catch>
 400c8f8:	400d0600 	call	400d060 <__cxa_get_globals_fast>
 400c8fc:	10800017 	ldw	r2,0(r2)
 400c900:	10c00b17 	ldw	r3,44(r2)
 400c904:	18c0004c 	andi	r3,r3,1
 400c908:	18001e26 	beq	r3,zero,400c984 <__cxa_call_unexpected+0x158>
 400c90c:	10800017 	ldw	r2,0(r2)
 400c910:	d8801715 	stw	r2,92(sp)
 400c914:	d8801517 	ldw	r2,84(sp)
 400c918:	00802b0e 	bge	zero,r2,400c9c8 <__cxa_call_unexpected+0x19c>
 400c91c:	d8c01717 	ldw	r3,92(sp)
 400c920:	d8800317 	ldw	r2,12(sp)
 400c924:	d9c01517 	ldw	r7,84(sp)
 400c928:	193ff017 	ldw	r4,-64(r3)
 400c92c:	d9801617 	ldw	r6,88(sp)
 400c930:	d8800015 	stw	r2,0(sp)
 400c934:	180b883a 	mov	r5,r3
 400c938:	00800084 	movi	r2,2
 400c93c:	d8800815 	stw	r2,32(sp)
 400c940:	400bf580 	call	400bf58 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400c944:	10803fcc 	andi	r2,r2,255
 400c948:	10001e1e 	bne	r2,zero,400c9c4 <__cxa_call_unexpected+0x198>
 400c94c:	d8800317 	ldw	r2,12(sp)
 400c950:	d9c01517 	ldw	r7,84(sp)
 400c954:	d9801617 	ldw	r6,88(sp)
 400c958:	010100b4 	movhi	r4,1026
 400c95c:	d8800015 	stw	r2,0(sp)
 400c960:	211c0704 	addi	r4,r4,28700
 400c964:	00800084 	movi	r2,2
 400c968:	000b883a 	mov	r5,zero
 400c96c:	d8800815 	stw	r2,32(sp)
 400c970:	400bf580 	call	400bf58 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400c974:	10803fcc 	andi	r2,r2,255
 400c978:	1000051e 	bne	r2,zero,400c990 <__cxa_call_unexpected+0x164>
 400c97c:	d9001417 	ldw	r4,80(sp)
 400c980:	400b8c40 	call	400b8c4 <_ZN10__cxxabiv111__terminateEPFvvE>
 400c984:	10801004 	addi	r2,r2,64
 400c988:	d8801715 	stw	r2,92(sp)
 400c98c:	003fe106 	br	400c914 <__alt_mem_onchip_memory2_0+0xfc00b694>
 400c990:	01000104 	movi	r4,4
 400c994:	400cea40 	call	400cea4 <__cxa_allocate_exception>
 400c998:	00c100b4 	movhi	r3,1026
 400c99c:	18dc2204 	addi	r3,r3,28808
 400c9a0:	01810074 	movhi	r6,1025
 400c9a4:	014100b4 	movhi	r5,1026
 400c9a8:	10c00015 	stw	r3,0(r2)
 400c9ac:	31b41f04 	addi	r6,r6,-12164
 400c9b0:	00c00084 	movi	r3,2
 400c9b4:	295c0704 	addi	r5,r5,28700
 400c9b8:	1009883a 	mov	r4,r2
 400c9bc:	d8c00815 	stw	r3,32(sp)
 400c9c0:	400caa00 	call	400caa0 <__cxa_throw>
 400c9c4:	400cb300 	call	400cb30 <__cxa_rethrow>
 400c9c8:	d9401617 	ldw	r5,88(sp)
 400c9cc:	00800084 	movi	r2,2
 400c9d0:	d9800104 	addi	r6,sp,4
 400c9d4:	0009883a 	mov	r4,zero
 400c9d8:	d8800815 	stw	r2,32(sp)
 400c9dc:	400bd9c0 	call	400bd9c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400c9e0:	d9801717 	ldw	r6,92(sp)
 400c9e4:	d9c01517 	ldw	r7,84(sp)
 400c9e8:	d9000104 	addi	r4,sp,4
 400c9ec:	317ff017 	ldw	r5,-64(r6)
 400c9f0:	400c1840 	call	400c184 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400c9f4:	10803fcc 	andi	r2,r2,255
 400c9f8:	1000171e 	bne	r2,zero,400ca58 <__cxa_call_unexpected+0x22c>
 400c9fc:	d9c01517 	ldw	r7,84(sp)
 400ca00:	014100b4 	movhi	r5,1026
 400ca04:	00800084 	movi	r2,2
 400ca08:	295c0704 	addi	r5,r5,28700
 400ca0c:	000d883a 	mov	r6,zero
 400ca10:	d9000104 	addi	r4,sp,4
 400ca14:	d8800815 	stw	r2,32(sp)
 400ca18:	400c1840 	call	400c184 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400ca1c:	10803fcc 	andi	r2,r2,255
 400ca20:	103fd626 	beq	r2,zero,400c97c <__alt_mem_onchip_memory2_0+0xfc00b6fc>
 400ca24:	01000104 	movi	r4,4
 400ca28:	400cea40 	call	400cea4 <__cxa_allocate_exception>
 400ca2c:	00c100b4 	movhi	r3,1026
 400ca30:	18dc2204 	addi	r3,r3,28808
 400ca34:	01810074 	movhi	r6,1025
 400ca38:	014100b4 	movhi	r5,1026
 400ca3c:	10c00015 	stw	r3,0(r2)
 400ca40:	31b41f04 	addi	r6,r6,-12164
 400ca44:	00c00084 	movi	r3,2
 400ca48:	295c0704 	addi	r5,r5,28700
 400ca4c:	1009883a 	mov	r4,r2
 400ca50:	d8c00815 	stw	r3,32(sp)
 400ca54:	400caa00 	call	400caa0 <__cxa_throw>
 400ca58:	400cb300 	call	400cb30 <__cxa_rethrow>

0400ca5c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 400ca5c:	defffe04 	addi	sp,sp,-8
 400ca60:	dfc00115 	stw	ra,4(sp)
 400ca64:	dc000015 	stw	r16,0(sp)
 400ca68:	00800044 	movi	r2,1
 400ca6c:	11000a36 	bltu	r2,r4,400ca98 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
 400ca70:	28bff617 	ldw	r2,-40(r5)
 400ca74:	2c000504 	addi	r16,r5,20
 400ca78:	10000226 	beq	r2,zero,400ca84 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
 400ca7c:	8009883a 	mov	r4,r16
 400ca80:	103ee83a 	callr	r2
 400ca84:	8009883a 	mov	r4,r16
 400ca88:	dfc00117 	ldw	ra,4(sp)
 400ca8c:	dc000017 	ldw	r16,0(sp)
 400ca90:	dec00204 	addi	sp,sp,8
 400ca94:	400cf041 	jmpi	400cf04 <__cxa_free_exception>
 400ca98:	293ff817 	ldw	r4,-32(r5)
 400ca9c:	400b8c40 	call	400b8c4 <_ZN10__cxxabiv111__terminateEPFvvE>

0400caa0 <__cxa_throw>:
 400caa0:	defffb04 	addi	sp,sp,-20
 400caa4:	dfc00415 	stw	ra,16(sp)
 400caa8:	dcc00315 	stw	r19,12(sp)
 400caac:	dc800215 	stw	r18,8(sp)
 400cab0:	2827883a 	mov	r19,r5
 400cab4:	3025883a 	mov	r18,r6
 400cab8:	dc400115 	stw	r17,4(sp)
 400cabc:	dc000015 	stw	r16,0(sp)
 400cac0:	2021883a 	mov	r16,r4
 400cac4:	400d06c0 	call	400d06c <__cxa_get_globals>
 400cac8:	10c00117 	ldw	r3,4(r2)
 400cacc:	847ffb04 	addi	r17,r16,-20
 400cad0:	18c00044 	addi	r3,r3,1
 400cad4:	10c00115 	stw	r3,4(r2)
 400cad8:	00800044 	movi	r2,1
 400cadc:	80bfef15 	stw	r2,-68(r16)
 400cae0:	84fff015 	stw	r19,-64(r16)
 400cae4:	84bff115 	stw	r18,-60(r16)
 400cae8:	400b9fc0 	call	400b9fc <_ZSt14get_unexpectedv>
 400caec:	80bff215 	stw	r2,-56(r16)
 400caf0:	400b9d80 	call	400b9d8 <_ZSt13get_terminatev>
 400caf4:	80bff315 	stw	r2,-52(r16)
 400caf8:	0090caf4 	movhi	r2,17195
 400cafc:	108ac004 	addi	r2,r2,11008
 400cb00:	80bffb15 	stw	r2,-20(r16)
 400cb04:	0091d3b4 	movhi	r2,18254
 400cb08:	109550c4 	addi	r2,r2,21827
 400cb0c:	80bffc15 	stw	r2,-16(r16)
 400cb10:	00810074 	movhi	r2,1025
 400cb14:	10b29704 	addi	r2,r2,-13732
 400cb18:	8809883a 	mov	r4,r17
 400cb1c:	80bffd15 	stw	r2,-12(r16)
 400cb20:	400e10c0 	call	400e10c <_Unwind_SjLj_RaiseException>
 400cb24:	8809883a 	mov	r4,r17
 400cb28:	400cbbc0 	call	400cbbc <__cxa_begin_catch>
 400cb2c:	400b9840 	call	400b984 <_ZSt9terminatev>

0400cb30 <__cxa_rethrow>:
 400cb30:	defffe04 	addi	sp,sp,-8
 400cb34:	dfc00115 	stw	ra,4(sp)
 400cb38:	dc000015 	stw	r16,0(sp)
 400cb3c:	400d06c0 	call	400d06c <__cxa_get_globals>
 400cb40:	10c00117 	ldw	r3,4(r2)
 400cb44:	11000017 	ldw	r4,0(r2)
 400cb48:	18c00044 	addi	r3,r3,1
 400cb4c:	10c00115 	stw	r3,4(r2)
 400cb50:	20001126 	beq	r4,zero,400cb98 <__cxa_rethrow+0x68>
 400cb54:	21400b17 	ldw	r5,44(r4)
 400cb58:	01ef3574 	movhi	r7,48341
 400cb5c:	39f54004 	addi	r7,r7,-11008
 400cb60:	29cf883a 	add	r7,r5,r7
 400cb64:	20c00c17 	ldw	r3,48(r4)
 400cb68:	394d803a 	cmpltu	r6,r7,r5
 400cb6c:	016e2cb4 	movhi	r5,47282
 400cb70:	296aaf04 	addi	r5,r5,-21828
 400cb74:	1947883a 	add	r3,r3,r5
 400cb78:	30c7883a 	add	r3,r6,r3
 400cb7c:	18000726 	beq	r3,zero,400cb9c <__cxa_rethrow+0x6c>
 400cb80:	10000015 	stw	zero,0(r2)
 400cb84:	24000b04 	addi	r16,r4,44
 400cb88:	8009883a 	mov	r4,r16
 400cb8c:	400e2640 	call	400e264 <_Unwind_SjLj_Resume_or_Rethrow>
 400cb90:	8009883a 	mov	r4,r16
 400cb94:	400cbbc0 	call	400cbbc <__cxa_begin_catch>
 400cb98:	400b9840 	call	400b984 <_ZSt9terminatev>
 400cb9c:	00c00044 	movi	r3,1
 400cba0:	19fff736 	bltu	r3,r7,400cb80 <__alt_mem_onchip_memory2_0+0xfc00b900>
 400cba4:	20800517 	ldw	r2,20(r4)
 400cba8:	0085c83a 	sub	r2,zero,r2
 400cbac:	20800515 	stw	r2,20(r4)
 400cbb0:	003ff406 	br	400cb84 <__alt_mem_onchip_memory2_0+0xfc00b904>

0400cbb4 <__cxa_get_exception_ptr>:
 400cbb4:	20bfff17 	ldw	r2,-4(r4)
 400cbb8:	f800283a 	ret

0400cbbc <__cxa_begin_catch>:
 400cbbc:	defffe04 	addi	sp,sp,-8
 400cbc0:	dc000015 	stw	r16,0(sp)
 400cbc4:	dfc00115 	stw	ra,4(sp)
 400cbc8:	2021883a 	mov	r16,r4
 400cbcc:	400d06c0 	call	400d06c <__cxa_get_globals>
 400cbd0:	81000017 	ldw	r4,0(r16)
 400cbd4:	80c00117 	ldw	r3,4(r16)
 400cbd8:	01af3574 	movhi	r6,48341
 400cbdc:	31b54004 	addi	r6,r6,-11008
 400cbe0:	016e2cb4 	movhi	r5,47282
 400cbe4:	296aaf04 	addi	r5,r5,-21828
 400cbe8:	218d883a 	add	r6,r4,r6
 400cbec:	3109803a 	cmpltu	r4,r6,r4
 400cbf0:	1947883a 	add	r3,r3,r5
 400cbf4:	20c7883a 	add	r3,r4,r3
 400cbf8:	817ff504 	addi	r5,r16,-44
 400cbfc:	11000017 	ldw	r4,0(r2)
 400cc00:	18000726 	beq	r3,zero,400cc20 <__cxa_begin_catch+0x64>
 400cc04:	2000191e 	bne	r4,zero,400cc6c <__cxa_begin_catch+0xb0>
 400cc08:	11400015 	stw	r5,0(r2)
 400cc0c:	0005883a 	mov	r2,zero
 400cc10:	dfc00117 	ldw	ra,4(sp)
 400cc14:	dc000017 	ldw	r16,0(sp)
 400cc18:	dec00204 	addi	sp,sp,8
 400cc1c:	f800283a 	ret
 400cc20:	01c00044 	movi	r7,1
 400cc24:	39bff736 	bltu	r7,r6,400cc04 <__alt_mem_onchip_memory2_0+0xfc00b984>
 400cc28:	80fffa17 	ldw	r3,-24(r16)
 400cc2c:	18000d16 	blt	r3,zero,400cc64 <__cxa_begin_catch+0xa8>
 400cc30:	18c00044 	addi	r3,r3,1
 400cc34:	11800117 	ldw	r6,4(r2)
 400cc38:	80fffa15 	stw	r3,-24(r16)
 400cc3c:	30ffffc4 	addi	r3,r6,-1
 400cc40:	10c00115 	stw	r3,4(r2)
 400cc44:	21400226 	beq	r4,r5,400cc50 <__cxa_begin_catch+0x94>
 400cc48:	813ff915 	stw	r4,-28(r16)
 400cc4c:	11400015 	stw	r5,0(r2)
 400cc50:	80bfff17 	ldw	r2,-4(r16)
 400cc54:	dfc00117 	ldw	ra,4(sp)
 400cc58:	dc000017 	ldw	r16,0(sp)
 400cc5c:	dec00204 	addi	sp,sp,8
 400cc60:	f800283a 	ret
 400cc64:	38c7c83a 	sub	r3,r7,r3
 400cc68:	003ff206 	br	400cc34 <__alt_mem_onchip_memory2_0+0xfc00b9b4>
 400cc6c:	400b9840 	call	400b984 <_ZSt9terminatev>

0400cc70 <__cxa_end_catch>:
 400cc70:	deffff04 	addi	sp,sp,-4
 400cc74:	dfc00015 	stw	ra,0(sp)
 400cc78:	400d0600 	call	400d060 <__cxa_get_globals_fast>
 400cc7c:	11000017 	ldw	r4,0(r2)
 400cc80:	20001426 	beq	r4,zero,400ccd4 <__cxa_end_catch+0x64>
 400cc84:	21400b17 	ldw	r5,44(r4)
 400cc88:	01ef3574 	movhi	r7,48341
 400cc8c:	39f54004 	addi	r7,r7,-11008
 400cc90:	29cf883a 	add	r7,r5,r7
 400cc94:	20c00c17 	ldw	r3,48(r4)
 400cc98:	394d803a 	cmpltu	r6,r7,r5
 400cc9c:	016e2cb4 	movhi	r5,47282
 400cca0:	296aaf04 	addi	r5,r5,-21828
 400cca4:	1947883a 	add	r3,r3,r5
 400cca8:	30c7883a 	add	r3,r6,r3
 400ccac:	18000c1e 	bne	r3,zero,400cce0 <__cxa_end_catch+0x70>
 400ccb0:	00c00044 	movi	r3,1
 400ccb4:	19c00a36 	bltu	r3,r7,400cce0 <__cxa_end_catch+0x70>
 400ccb8:	20c00517 	ldw	r3,20(r4)
 400ccbc:	18000d16 	blt	r3,zero,400ccf4 <__cxa_end_catch+0x84>
 400ccc0:	18ffffc4 	addi	r3,r3,-1
 400ccc4:	18001026 	beq	r3,zero,400cd08 <__cxa_end_catch+0x98>
 400ccc8:	00bfffc4 	movi	r2,-1
 400cccc:	18801426 	beq	r3,r2,400cd20 <__cxa_end_catch+0xb0>
 400ccd0:	20c00515 	stw	r3,20(r4)
 400ccd4:	dfc00017 	ldw	ra,0(sp)
 400ccd8:	dec00104 	addi	sp,sp,4
 400ccdc:	f800283a 	ret
 400cce0:	21000b04 	addi	r4,r4,44
 400cce4:	10000015 	stw	zero,0(r2)
 400cce8:	dfc00017 	ldw	ra,0(sp)
 400ccec:	dec00104 	addi	sp,sp,4
 400ccf0:	400e2b01 	jmpi	400e2b0 <_Unwind_DeleteException>
 400ccf4:	18c00044 	addi	r3,r3,1
 400ccf8:	183ff51e 	bne	r3,zero,400ccd0 <__alt_mem_onchip_memory2_0+0xfc00ba50>
 400ccfc:	21400417 	ldw	r5,16(r4)
 400cd00:	11400015 	stw	r5,0(r2)
 400cd04:	003ff206 	br	400ccd0 <__alt_mem_onchip_memory2_0+0xfc00ba50>
 400cd08:	20c00417 	ldw	r3,16(r4)
 400cd0c:	21000b04 	addi	r4,r4,44
 400cd10:	10c00015 	stw	r3,0(r2)
 400cd14:	dfc00017 	ldw	ra,0(sp)
 400cd18:	dec00104 	addi	sp,sp,4
 400cd1c:	400e2b01 	jmpi	400e2b0 <_Unwind_DeleteException>
 400cd20:	400b9840 	call	400b984 <_ZSt9terminatev>

0400cd24 <_ZSt18uncaught_exceptionv>:
 400cd24:	deffff04 	addi	sp,sp,-4
 400cd28:	dfc00015 	stw	ra,0(sp)
 400cd2c:	400d06c0 	call	400d06c <__cxa_get_globals>
 400cd30:	10800117 	ldw	r2,4(r2)
 400cd34:	1004c03a 	cmpne	r2,r2,zero
 400cd38:	dfc00017 	ldw	ra,0(sp)
 400cd3c:	dec00104 	addi	sp,sp,4
 400cd40:	f800283a 	ret

0400cd44 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 400cd44:	018100f4 	movhi	r6,1027
 400cd48:	31b63104 	addi	r6,r6,-10044
 400cd4c:	31400117 	ldw	r5,4(r6)
 400cd50:	223fff04 	addi	r8,r4,-4
 400cd54:	227fff17 	ldw	r9,-4(r4)
 400cd58:	28001326 	beq	r5,zero,400cda8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
 400cd5c:	424f883a 	add	r7,r8,r9
 400cd60:	29c01426 	beq	r5,r7,400cdb4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
 400cd64:	28c00117 	ldw	r3,4(r5)
 400cd68:	18001c26 	beq	r3,zero,400cddc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
 400cd6c:	38c00336 	bltu	r7,r3,400cd7c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 400cd70:	00001e06 	br	400cdec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
 400cd74:	3880052e 	bgeu	r7,r2,400cd8c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
 400cd78:	1007883a 	mov	r3,r2
 400cd7c:	18800117 	ldw	r2,4(r3)
 400cd80:	29800104 	addi	r6,r5,4
 400cd84:	180b883a 	mov	r5,r3
 400cd88:	103ffa1e 	bne	r2,zero,400cd74 <__alt_mem_onchip_memory2_0+0xfc00baf4>
 400cd8c:	19400017 	ldw	r5,0(r3)
 400cd90:	194f883a 	add	r7,r3,r5
 400cd94:	41c00e26 	beq	r8,r7,400cdd0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
 400cd98:	20800015 	stw	r2,0(r4)
 400cd9c:	30800017 	ldw	r2,0(r6)
 400cda0:	12000115 	stw	r8,4(r2)
 400cda4:	f800283a 	ret
 400cda8:	20000015 	stw	zero,0(r4)
 400cdac:	32000115 	stw	r8,4(r6)
 400cdb0:	f800283a 	ret
 400cdb4:	28c00017 	ldw	r3,0(r5)
 400cdb8:	28800117 	ldw	r2,4(r5)
 400cdbc:	1a53883a 	add	r9,r3,r9
 400cdc0:	227fff15 	stw	r9,-4(r4)
 400cdc4:	20800015 	stw	r2,0(r4)
 400cdc8:	32000115 	stw	r8,4(r6)
 400cdcc:	f800283a 	ret
 400cdd0:	494b883a 	add	r5,r9,r5
 400cdd4:	19400015 	stw	r5,0(r3)
 400cdd8:	f800283a 	ret
 400cddc:	0005883a 	mov	r2,zero
 400cde0:	2807883a 	mov	r3,r5
 400cde4:	31800104 	addi	r6,r6,4
 400cde8:	003fe806 	br	400cd8c <__alt_mem_onchip_memory2_0+0xfc00bb0c>
 400cdec:	1805883a 	mov	r2,r3
 400cdf0:	31800104 	addi	r6,r6,4
 400cdf4:	2807883a 	mov	r3,r5
 400cdf8:	003fe406 	br	400cd8c <__alt_mem_onchip_memory2_0+0xfc00bb0c>

0400cdfc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 400cdfc:	20800104 	addi	r2,r4,4
 400ce00:	00c001c4 	movi	r3,7
 400ce04:	1880112e 	bgeu	r3,r2,400ce4c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 400ce08:	20c9883a 	add	r4,r4,r3
 400ce0c:	00bfff04 	movi	r2,-4
 400ce10:	208a703a 	and	r5,r4,r2
 400ce14:	018100f4 	movhi	r6,1027
 400ce18:	31b63104 	addi	r6,r6,-10044
 400ce1c:	30c00117 	ldw	r3,4(r6)
 400ce20:	18000826 	beq	r3,zero,400ce44 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 400ce24:	19000017 	ldw	r4,0(r3)
 400ce28:	21400436 	bltu	r4,r5,400ce3c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
 400ce2c:	00001a06 	br	400ce98 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
 400ce30:	11000017 	ldw	r4,0(r2)
 400ce34:	2140072e 	bgeu	r4,r5,400ce54 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 400ce38:	1007883a 	mov	r3,r2
 400ce3c:	18800117 	ldw	r2,4(r3)
 400ce40:	103ffb1e 	bne	r2,zero,400ce30 <__alt_mem_onchip_memory2_0+0xfc00bbb0>
 400ce44:	0005883a 	mov	r2,zero
 400ce48:	f800283a 	ret
 400ce4c:	01400204 	movi	r5,8
 400ce50:	003ff006 	br	400ce14 <__alt_mem_onchip_memory2_0+0xfc00bb94>
 400ce54:	18c00104 	addi	r3,r3,4
 400ce58:	2149c83a 	sub	r4,r4,r5
 400ce5c:	018001c4 	movi	r6,7
 400ce60:	3100092e 	bgeu	r6,r4,400ce88 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
 400ce64:	11c00117 	ldw	r7,4(r2)
 400ce68:	114d883a 	add	r6,r2,r5
 400ce6c:	31000015 	stw	r4,0(r6)
 400ce70:	31c00115 	stw	r7,4(r6)
 400ce74:	18800017 	ldw	r2,0(r3)
 400ce78:	11400015 	stw	r5,0(r2)
 400ce7c:	19800015 	stw	r6,0(r3)
 400ce80:	10800104 	addi	r2,r2,4
 400ce84:	f800283a 	ret
 400ce88:	11000117 	ldw	r4,4(r2)
 400ce8c:	10800104 	addi	r2,r2,4
 400ce90:	19000015 	stw	r4,0(r3)
 400ce94:	f800283a 	ret
 400ce98:	1805883a 	mov	r2,r3
 400ce9c:	30c00104 	addi	r3,r6,4
 400cea0:	003fed06 	br	400ce58 <__alt_mem_onchip_memory2_0+0xfc00bbd8>

0400cea4 <__cxa_allocate_exception>:
 400cea4:	defffd04 	addi	sp,sp,-12
 400cea8:	dc400115 	stw	r17,4(sp)
 400ceac:	24401104 	addi	r17,r4,68
 400ceb0:	8809883a 	mov	r4,r17
 400ceb4:	dc000015 	stw	r16,0(sp)
 400ceb8:	dfc00215 	stw	ra,8(sp)
 400cebc:	400e4040 	call	400e404 <malloc>
 400cec0:	1021883a 	mov	r16,r2
 400cec4:	10000a26 	beq	r2,zero,400cef0 <__cxa_allocate_exception+0x4c>
 400cec8:	01801104 	movi	r6,68
 400cecc:	000b883a 	mov	r5,zero
 400ced0:	8009883a 	mov	r4,r16
 400ced4:	400ed800 	call	400ed80 <memset>
 400ced8:	80801104 	addi	r2,r16,68
 400cedc:	dfc00217 	ldw	ra,8(sp)
 400cee0:	dc400117 	ldw	r17,4(sp)
 400cee4:	dc000017 	ldw	r16,0(sp)
 400cee8:	dec00304 	addi	sp,sp,12
 400ceec:	f800283a 	ret
 400cef0:	8809883a 	mov	r4,r17
 400cef4:	400cdfc0 	call	400cdfc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400cef8:	1021883a 	mov	r16,r2
 400cefc:	103ff21e 	bne	r2,zero,400cec8 <__alt_mem_onchip_memory2_0+0xfc00bc48>
 400cf00:	400b9840 	call	400b984 <_ZSt9terminatev>

0400cf04 <__cxa_free_exception>:
 400cf04:	00c100f4 	movhi	r3,1027
 400cf08:	18f63104 	addi	r3,r3,-10044
 400cf0c:	18800217 	ldw	r2,8(r3)
 400cf10:	213fef04 	addi	r4,r4,-68
 400cf14:	1100042e 	bgeu	r2,r4,400cf28 <__cxa_free_exception+0x24>
 400cf18:	18c00317 	ldw	r3,12(r3)
 400cf1c:	10c5883a 	add	r2,r2,r3
 400cf20:	2080012e 	bgeu	r4,r2,400cf28 <__cxa_free_exception+0x24>
 400cf24:	400cd441 	jmpi	400cd44 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400cf28:	400e4181 	jmpi	400e418 <free>

0400cf2c <__cxa_allocate_dependent_exception>:
 400cf2c:	defffe04 	addi	sp,sp,-8
 400cf30:	01001004 	movi	r4,64
 400cf34:	dc000015 	stw	r16,0(sp)
 400cf38:	dfc00115 	stw	ra,4(sp)
 400cf3c:	400e4040 	call	400e404 <malloc>
 400cf40:	1021883a 	mov	r16,r2
 400cf44:	10000926 	beq	r2,zero,400cf6c <__cxa_allocate_dependent_exception+0x40>
 400cf48:	01801004 	movi	r6,64
 400cf4c:	000b883a 	mov	r5,zero
 400cf50:	8009883a 	mov	r4,r16
 400cf54:	400ed800 	call	400ed80 <memset>
 400cf58:	8005883a 	mov	r2,r16
 400cf5c:	dfc00117 	ldw	ra,4(sp)
 400cf60:	dc000017 	ldw	r16,0(sp)
 400cf64:	dec00204 	addi	sp,sp,8
 400cf68:	f800283a 	ret
 400cf6c:	01001004 	movi	r4,64
 400cf70:	400cdfc0 	call	400cdfc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400cf74:	1021883a 	mov	r16,r2
 400cf78:	103ff31e 	bne	r2,zero,400cf48 <__alt_mem_onchip_memory2_0+0xfc00bcc8>
 400cf7c:	400b9840 	call	400b984 <_ZSt9terminatev>

0400cf80 <__cxa_free_dependent_exception>:
 400cf80:	014100f4 	movhi	r5,1027
 400cf84:	29763104 	addi	r5,r5,-10044
 400cf88:	28c00217 	ldw	r3,8(r5)
 400cf8c:	2005883a 	mov	r2,r4
 400cf90:	1900042e 	bgeu	r3,r4,400cfa4 <__cxa_free_dependent_exception+0x24>
 400cf94:	29400317 	ldw	r5,12(r5)
 400cf98:	1947883a 	add	r3,r3,r5
 400cf9c:	20c0012e 	bgeu	r4,r3,400cfa4 <__cxa_free_dependent_exception+0x24>
 400cfa0:	400cd441 	jmpi	400cd44 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400cfa4:	1009883a 	mov	r4,r2
 400cfa8:	400e4181 	jmpi	400e418 <free>

0400cfac <_GLOBAL__sub_I___cxa_allocate_exception>:
 400cfac:	defffd04 	addi	sp,sp,-12
 400cfb0:	dc400115 	stw	r17,4(sp)
 400cfb4:	dc000015 	stw	r16,0(sp)
 400cfb8:	04424004 	movi	r17,2304
 400cfbc:	040100f4 	movhi	r16,1027
 400cfc0:	84363104 	addi	r16,r16,-10044
 400cfc4:	8809883a 	mov	r4,r17
 400cfc8:	dfc00215 	stw	ra,8(sp)
 400cfcc:	84400315 	stw	r17,12(r16)
 400cfd0:	400e4040 	call	400e404 <malloc>
 400cfd4:	80800215 	stw	r2,8(r16)
 400cfd8:	10000826 	beq	r2,zero,400cffc <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
 400cfdc:	80800115 	stw	r2,4(r16)
 400cfe0:	14400015 	stw	r17,0(r2)
 400cfe4:	10000115 	stw	zero,4(r2)
 400cfe8:	dfc00217 	ldw	ra,8(sp)
 400cfec:	dc400117 	ldw	r17,4(sp)
 400cff0:	dc000017 	ldw	r16,0(sp)
 400cff4:	dec00304 	addi	sp,sp,12
 400cff8:	f800283a 	ret
 400cffc:	80000315 	stw	zero,12(r16)
 400d000:	80000115 	stw	zero,4(r16)
 400d004:	003ff806 	br	400cfe8 <__alt_mem_onchip_memory2_0+0xfc00bd68>

0400d008 <__cxa_call_terminate>:
 400d008:	defffe04 	addi	sp,sp,-8
 400d00c:	dfc00115 	stw	ra,4(sp)
 400d010:	dc000015 	stw	r16,0(sp)
 400d014:	20000d26 	beq	r4,zero,400d04c <__cxa_call_terminate+0x44>
 400d018:	2021883a 	mov	r16,r4
 400d01c:	400cbbc0 	call	400cbbc <__cxa_begin_catch>
 400d020:	80c00017 	ldw	r3,0(r16)
 400d024:	016f3574 	movhi	r5,48341
 400d028:	29754004 	addi	r5,r5,-11008
 400d02c:	194b883a 	add	r5,r3,r5
 400d030:	80800117 	ldw	r2,4(r16)
 400d034:	28c9803a 	cmpltu	r4,r5,r3
 400d038:	00ee2cb4 	movhi	r3,47282
 400d03c:	18eaaf04 	addi	r3,r3,-21828
 400d040:	10c5883a 	add	r2,r2,r3
 400d044:	2085883a 	add	r2,r4,r2
 400d048:	10000126 	beq	r2,zero,400d050 <__cxa_call_terminate+0x48>
 400d04c:	400b9840 	call	400b984 <_ZSt9terminatev>
 400d050:	00800044 	movi	r2,1
 400d054:	117ffd36 	bltu	r2,r5,400d04c <__alt_mem_onchip_memory2_0+0xfc00bdcc>
 400d058:	813ff817 	ldw	r4,-32(r16)
 400d05c:	400b8c40 	call	400b8c4 <_ZN10__cxxabiv111__terminateEPFvvE>

0400d060 <__cxa_get_globals_fast>:
 400d060:	008100f4 	movhi	r2,1027
 400d064:	10b5ec04 	addi	r2,r2,-10320
 400d068:	f800283a 	ret

0400d06c <__cxa_get_globals>:
 400d06c:	008100f4 	movhi	r2,1027
 400d070:	10b5ec04 	addi	r2,r2,-10320
 400d074:	f800283a 	ret

0400d078 <_ZNSt9exceptionD1Ev>:
 400d078:	f800283a 	ret

0400d07c <_ZNSt13bad_exceptionD1Ev>:
 400d07c:	f800283a 	ret

0400d080 <_ZNKSt9exception4whatEv>:
 400d080:	008100b4 	movhi	r2,1026
 400d084:	109bf504 	addi	r2,r2,28628
 400d088:	f800283a 	ret

0400d08c <_ZNKSt13bad_exception4whatEv>:
 400d08c:	008100b4 	movhi	r2,1026
 400d090:	109bf904 	addi	r2,r2,28644
 400d094:	f800283a 	ret

0400d098 <_ZNSt9exceptionD0Ev>:
 400d098:	400b5b81 	jmpi	400b5b8 <_ZdlPv>

0400d09c <_ZNSt13bad_exceptionD0Ev>:
 400d09c:	400b5b81 	jmpi	400b5b8 <_ZdlPv>

0400d0a0 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
 400d0a0:	f800283a 	ret

0400d0a4 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
 400d0a4:	400b5b81 	jmpi	400b5b8 <_ZdlPv>

0400d0a8 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
 400d0a8:	f800283a 	ret

0400d0ac <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
 400d0ac:	400b5b81 	jmpi	400b5b8 <_ZdlPv>

0400d0b0 <__fixunssfsi>:
 400d0b0:	defffd04 	addi	sp,sp,-12
 400d0b4:	dc000015 	stw	r16,0(sp)
 400d0b8:	0413c034 	movhi	r16,20224
 400d0bc:	800b883a 	mov	r5,r16
 400d0c0:	dc400115 	stw	r17,4(sp)
 400d0c4:	dfc00215 	stw	ra,8(sp)
 400d0c8:	2023883a 	mov	r17,r4
 400d0cc:	400d2ec0 	call	400d2ec <__gesf2>
 400d0d0:	1000070e 	bge	r2,zero,400d0f0 <__fixunssfsi+0x40>
 400d0d4:	8809883a 	mov	r4,r17
 400d0d8:	400dcbc0 	call	400dcbc <__fixsfsi>
 400d0dc:	dfc00217 	ldw	ra,8(sp)
 400d0e0:	dc400117 	ldw	r17,4(sp)
 400d0e4:	dc000017 	ldw	r16,0(sp)
 400d0e8:	dec00304 	addi	sp,sp,12
 400d0ec:	f800283a 	ret
 400d0f0:	800b883a 	mov	r5,r16
 400d0f4:	8809883a 	mov	r4,r17
 400d0f8:	400d7d80 	call	400d7d8 <__subsf3>
 400d0fc:	1009883a 	mov	r4,r2
 400d100:	400dcbc0 	call	400dcbc <__fixsfsi>
 400d104:	00e00034 	movhi	r3,32768
 400d108:	10c5883a 	add	r2,r2,r3
 400d10c:	003ff306 	br	400d0dc <__alt_mem_onchip_memory2_0+0xfc00be5c>

0400d110 <__divsi3>:
 400d110:	20001b16 	blt	r4,zero,400d180 <__divsi3+0x70>
 400d114:	000f883a 	mov	r7,zero
 400d118:	28001616 	blt	r5,zero,400d174 <__divsi3+0x64>
 400d11c:	200d883a 	mov	r6,r4
 400d120:	29001a2e 	bgeu	r5,r4,400d18c <__divsi3+0x7c>
 400d124:	00800804 	movi	r2,32
 400d128:	00c00044 	movi	r3,1
 400d12c:	00000106 	br	400d134 <__divsi3+0x24>
 400d130:	10000d26 	beq	r2,zero,400d168 <__divsi3+0x58>
 400d134:	294b883a 	add	r5,r5,r5
 400d138:	10bfffc4 	addi	r2,r2,-1
 400d13c:	18c7883a 	add	r3,r3,r3
 400d140:	293ffb36 	bltu	r5,r4,400d130 <__alt_mem_onchip_memory2_0+0xfc00beb0>
 400d144:	0005883a 	mov	r2,zero
 400d148:	18000726 	beq	r3,zero,400d168 <__divsi3+0x58>
 400d14c:	0005883a 	mov	r2,zero
 400d150:	31400236 	bltu	r6,r5,400d15c <__divsi3+0x4c>
 400d154:	314dc83a 	sub	r6,r6,r5
 400d158:	10c4b03a 	or	r2,r2,r3
 400d15c:	1806d07a 	srli	r3,r3,1
 400d160:	280ad07a 	srli	r5,r5,1
 400d164:	183ffa1e 	bne	r3,zero,400d150 <__alt_mem_onchip_memory2_0+0xfc00bed0>
 400d168:	38000126 	beq	r7,zero,400d170 <__divsi3+0x60>
 400d16c:	0085c83a 	sub	r2,zero,r2
 400d170:	f800283a 	ret
 400d174:	014bc83a 	sub	r5,zero,r5
 400d178:	39c0005c 	xori	r7,r7,1
 400d17c:	003fe706 	br	400d11c <__alt_mem_onchip_memory2_0+0xfc00be9c>
 400d180:	0109c83a 	sub	r4,zero,r4
 400d184:	01c00044 	movi	r7,1
 400d188:	003fe306 	br	400d118 <__alt_mem_onchip_memory2_0+0xfc00be98>
 400d18c:	00c00044 	movi	r3,1
 400d190:	003fee06 	br	400d14c <__alt_mem_onchip_memory2_0+0xfc00becc>

0400d194 <__modsi3>:
 400d194:	20001716 	blt	r4,zero,400d1f4 <__modsi3+0x60>
 400d198:	000f883a 	mov	r7,zero
 400d19c:	2005883a 	mov	r2,r4
 400d1a0:	28001216 	blt	r5,zero,400d1ec <__modsi3+0x58>
 400d1a4:	2900162e 	bgeu	r5,r4,400d200 <__modsi3+0x6c>
 400d1a8:	01800804 	movi	r6,32
 400d1ac:	00c00044 	movi	r3,1
 400d1b0:	00000106 	br	400d1b8 <__modsi3+0x24>
 400d1b4:	30000a26 	beq	r6,zero,400d1e0 <__modsi3+0x4c>
 400d1b8:	294b883a 	add	r5,r5,r5
 400d1bc:	31bfffc4 	addi	r6,r6,-1
 400d1c0:	18c7883a 	add	r3,r3,r3
 400d1c4:	293ffb36 	bltu	r5,r4,400d1b4 <__alt_mem_onchip_memory2_0+0xfc00bf34>
 400d1c8:	18000526 	beq	r3,zero,400d1e0 <__modsi3+0x4c>
 400d1cc:	1806d07a 	srli	r3,r3,1
 400d1d0:	11400136 	bltu	r2,r5,400d1d8 <__modsi3+0x44>
 400d1d4:	1145c83a 	sub	r2,r2,r5
 400d1d8:	280ad07a 	srli	r5,r5,1
 400d1dc:	183ffb1e 	bne	r3,zero,400d1cc <__alt_mem_onchip_memory2_0+0xfc00bf4c>
 400d1e0:	38000126 	beq	r7,zero,400d1e8 <__modsi3+0x54>
 400d1e4:	0085c83a 	sub	r2,zero,r2
 400d1e8:	f800283a 	ret
 400d1ec:	014bc83a 	sub	r5,zero,r5
 400d1f0:	003fec06 	br	400d1a4 <__alt_mem_onchip_memory2_0+0xfc00bf24>
 400d1f4:	0109c83a 	sub	r4,zero,r4
 400d1f8:	01c00044 	movi	r7,1
 400d1fc:	003fe706 	br	400d19c <__alt_mem_onchip_memory2_0+0xfc00bf1c>
 400d200:	00c00044 	movi	r3,1
 400d204:	003ff106 	br	400d1cc <__alt_mem_onchip_memory2_0+0xfc00bf4c>

0400d208 <__udivsi3>:
 400d208:	200d883a 	mov	r6,r4
 400d20c:	2900152e 	bgeu	r5,r4,400d264 <__udivsi3+0x5c>
 400d210:	28001416 	blt	r5,zero,400d264 <__udivsi3+0x5c>
 400d214:	00800804 	movi	r2,32
 400d218:	00c00044 	movi	r3,1
 400d21c:	00000206 	br	400d228 <__udivsi3+0x20>
 400d220:	10000e26 	beq	r2,zero,400d25c <__udivsi3+0x54>
 400d224:	28000516 	blt	r5,zero,400d23c <__udivsi3+0x34>
 400d228:	294b883a 	add	r5,r5,r5
 400d22c:	10bfffc4 	addi	r2,r2,-1
 400d230:	18c7883a 	add	r3,r3,r3
 400d234:	293ffa36 	bltu	r5,r4,400d220 <__alt_mem_onchip_memory2_0+0xfc00bfa0>
 400d238:	18000826 	beq	r3,zero,400d25c <__udivsi3+0x54>
 400d23c:	0005883a 	mov	r2,zero
 400d240:	31400236 	bltu	r6,r5,400d24c <__udivsi3+0x44>
 400d244:	314dc83a 	sub	r6,r6,r5
 400d248:	10c4b03a 	or	r2,r2,r3
 400d24c:	1806d07a 	srli	r3,r3,1
 400d250:	280ad07a 	srli	r5,r5,1
 400d254:	183ffa1e 	bne	r3,zero,400d240 <__alt_mem_onchip_memory2_0+0xfc00bfc0>
 400d258:	f800283a 	ret
 400d25c:	0005883a 	mov	r2,zero
 400d260:	f800283a 	ret
 400d264:	00c00044 	movi	r3,1
 400d268:	003ff406 	br	400d23c <__alt_mem_onchip_memory2_0+0xfc00bfbc>

0400d26c <__umodsi3>:
 400d26c:	2005883a 	mov	r2,r4
 400d270:	2900122e 	bgeu	r5,r4,400d2bc <__umodsi3+0x50>
 400d274:	28001116 	blt	r5,zero,400d2bc <__umodsi3+0x50>
 400d278:	01800804 	movi	r6,32
 400d27c:	00c00044 	movi	r3,1
 400d280:	00000206 	br	400d28c <__umodsi3+0x20>
 400d284:	30000c26 	beq	r6,zero,400d2b8 <__umodsi3+0x4c>
 400d288:	28000516 	blt	r5,zero,400d2a0 <__umodsi3+0x34>
 400d28c:	294b883a 	add	r5,r5,r5
 400d290:	31bfffc4 	addi	r6,r6,-1
 400d294:	18c7883a 	add	r3,r3,r3
 400d298:	293ffa36 	bltu	r5,r4,400d284 <__alt_mem_onchip_memory2_0+0xfc00c004>
 400d29c:	18000626 	beq	r3,zero,400d2b8 <__umodsi3+0x4c>
 400d2a0:	1806d07a 	srli	r3,r3,1
 400d2a4:	11400136 	bltu	r2,r5,400d2ac <__umodsi3+0x40>
 400d2a8:	1145c83a 	sub	r2,r2,r5
 400d2ac:	280ad07a 	srli	r5,r5,1
 400d2b0:	183ffb1e 	bne	r3,zero,400d2a0 <__alt_mem_onchip_memory2_0+0xfc00c020>
 400d2b4:	f800283a 	ret
 400d2b8:	f800283a 	ret
 400d2bc:	00c00044 	movi	r3,1
 400d2c0:	003ff706 	br	400d2a0 <__alt_mem_onchip_memory2_0+0xfc00c020>

0400d2c4 <__mulsi3>:
 400d2c4:	0005883a 	mov	r2,zero
 400d2c8:	20000726 	beq	r4,zero,400d2e8 <__mulsi3+0x24>
 400d2cc:	20c0004c 	andi	r3,r4,1
 400d2d0:	2008d07a 	srli	r4,r4,1
 400d2d4:	18000126 	beq	r3,zero,400d2dc <__mulsi3+0x18>
 400d2d8:	1145883a 	add	r2,r2,r5
 400d2dc:	294b883a 	add	r5,r5,r5
 400d2e0:	203ffa1e 	bne	r4,zero,400d2cc <__alt_mem_onchip_memory2_0+0xfc00c04c>
 400d2e4:	f800283a 	ret
 400d2e8:	f800283a 	ret

0400d2ec <__gesf2>:
 400d2ec:	2004d5fa 	srli	r2,r4,23
 400d2f0:	2806d5fa 	srli	r3,r5,23
 400d2f4:	01802034 	movhi	r6,128
 400d2f8:	31bfffc4 	addi	r6,r6,-1
 400d2fc:	10803fcc 	andi	r2,r2,255
 400d300:	01c03fc4 	movi	r7,255
 400d304:	3110703a 	and	r8,r6,r4
 400d308:	18c03fcc 	andi	r3,r3,255
 400d30c:	314c703a 	and	r6,r6,r5
 400d310:	2008d7fa 	srli	r4,r4,31
 400d314:	280ad7fa 	srli	r5,r5,31
 400d318:	11c01926 	beq	r2,r7,400d380 <__gesf2+0x94>
 400d31c:	01c03fc4 	movi	r7,255
 400d320:	19c00f26 	beq	r3,r7,400d360 <__gesf2+0x74>
 400d324:	1000061e 	bne	r2,zero,400d340 <__gesf2+0x54>
 400d328:	400f003a 	cmpeq	r7,r8,zero
 400d32c:	1800071e 	bne	r3,zero,400d34c <__gesf2+0x60>
 400d330:	3000061e 	bne	r6,zero,400d34c <__gesf2+0x60>
 400d334:	0005883a 	mov	r2,zero
 400d338:	40000e1e 	bne	r8,zero,400d374 <__gesf2+0x88>
 400d33c:	f800283a 	ret
 400d340:	18000a1e 	bne	r3,zero,400d36c <__gesf2+0x80>
 400d344:	30000b26 	beq	r6,zero,400d374 <__gesf2+0x88>
 400d348:	000f883a 	mov	r7,zero
 400d34c:	29403fcc 	andi	r5,r5,255
 400d350:	38000726 	beq	r7,zero,400d370 <__gesf2+0x84>
 400d354:	28000826 	beq	r5,zero,400d378 <__gesf2+0x8c>
 400d358:	00800044 	movi	r2,1
 400d35c:	f800283a 	ret
 400d360:	303ff026 	beq	r6,zero,400d324 <__alt_mem_onchip_memory2_0+0xfc00c0a4>
 400d364:	00bfff84 	movi	r2,-2
 400d368:	f800283a 	ret
 400d36c:	29403fcc 	andi	r5,r5,255
 400d370:	21400526 	beq	r4,r5,400d388 <__gesf2+0x9c>
 400d374:	203ff826 	beq	r4,zero,400d358 <__alt_mem_onchip_memory2_0+0xfc00c0d8>
 400d378:	00bfffc4 	movi	r2,-1
 400d37c:	f800283a 	ret
 400d380:	403fe626 	beq	r8,zero,400d31c <__alt_mem_onchip_memory2_0+0xfc00c09c>
 400d384:	003ff706 	br	400d364 <__alt_mem_onchip_memory2_0+0xfc00c0e4>
 400d388:	18bffa16 	blt	r3,r2,400d374 <__alt_mem_onchip_memory2_0+0xfc00c0f4>
 400d38c:	10c00216 	blt	r2,r3,400d398 <__gesf2+0xac>
 400d390:	323ff836 	bltu	r6,r8,400d374 <__alt_mem_onchip_memory2_0+0xfc00c0f4>
 400d394:	4180022e 	bgeu	r8,r6,400d3a0 <__gesf2+0xb4>
 400d398:	203fef1e 	bne	r4,zero,400d358 <__alt_mem_onchip_memory2_0+0xfc00c0d8>
 400d39c:	003ff606 	br	400d378 <__alt_mem_onchip_memory2_0+0xfc00c0f8>
 400d3a0:	0005883a 	mov	r2,zero
 400d3a4:	f800283a 	ret

0400d3a8 <__mulsf3>:
 400d3a8:	defff504 	addi	sp,sp,-44
 400d3ac:	dc000115 	stw	r16,4(sp)
 400d3b0:	2020d5fa 	srli	r16,r4,23
 400d3b4:	dd400615 	stw	r21,24(sp)
 400d3b8:	202ad7fa 	srli	r21,r4,31
 400d3bc:	dc800315 	stw	r18,12(sp)
 400d3c0:	04802034 	movhi	r18,128
 400d3c4:	df000915 	stw	fp,36(sp)
 400d3c8:	dd000515 	stw	r20,20(sp)
 400d3cc:	94bfffc4 	addi	r18,r18,-1
 400d3d0:	dfc00a15 	stw	ra,40(sp)
 400d3d4:	ddc00815 	stw	r23,32(sp)
 400d3d8:	dd800715 	stw	r22,28(sp)
 400d3dc:	dcc00415 	stw	r19,16(sp)
 400d3e0:	dc400215 	stw	r17,8(sp)
 400d3e4:	84003fcc 	andi	r16,r16,255
 400d3e8:	9124703a 	and	r18,r18,r4
 400d3ec:	a829883a 	mov	r20,r21
 400d3f0:	af003fcc 	andi	fp,r21,255
 400d3f4:	80005426 	beq	r16,zero,400d548 <__mulsf3+0x1a0>
 400d3f8:	00803fc4 	movi	r2,255
 400d3fc:	80802f26 	beq	r16,r2,400d4bc <__mulsf3+0x114>
 400d400:	91002034 	orhi	r4,r18,128
 400d404:	202490fa 	slli	r18,r4,3
 400d408:	843fe044 	addi	r16,r16,-127
 400d40c:	0023883a 	mov	r17,zero
 400d410:	002f883a 	mov	r23,zero
 400d414:	2804d5fa 	srli	r2,r5,23
 400d418:	282cd7fa 	srli	r22,r5,31
 400d41c:	01002034 	movhi	r4,128
 400d420:	213fffc4 	addi	r4,r4,-1
 400d424:	10803fcc 	andi	r2,r2,255
 400d428:	2166703a 	and	r19,r4,r5
 400d42c:	b1803fcc 	andi	r6,r22,255
 400d430:	10004c26 	beq	r2,zero,400d564 <__mulsf3+0x1bc>
 400d434:	00c03fc4 	movi	r3,255
 400d438:	10c04726 	beq	r2,r3,400d558 <__mulsf3+0x1b0>
 400d43c:	99002034 	orhi	r4,r19,128
 400d440:	202690fa 	slli	r19,r4,3
 400d444:	10bfe044 	addi	r2,r2,-127
 400d448:	0007883a 	mov	r3,zero
 400d44c:	80a1883a 	add	r16,r16,r2
 400d450:	010003c4 	movi	r4,15
 400d454:	1c44b03a 	or	r2,r3,r17
 400d458:	b56af03a 	xor	r21,r22,r21
 400d45c:	81c00044 	addi	r7,r16,1
 400d460:	20806b36 	bltu	r4,r2,400d610 <__mulsf3+0x268>
 400d464:	100490ba 	slli	r2,r2,2
 400d468:	01010074 	movhi	r4,1025
 400d46c:	21351f04 	addi	r4,r4,-11140
 400d470:	1105883a 	add	r2,r2,r4
 400d474:	10800017 	ldw	r2,0(r2)
 400d478:	1000683a 	jmp	r2
 400d47c:	0400d610 	cmplti	r16,zero,856
 400d480:	0400d4d0 	cmplti	r16,zero,851
 400d484:	0400d4d0 	cmplti	r16,zero,851
 400d488:	0400d4cc 	andi	r16,zero,851
 400d48c:	0400d5f4 	movhi	r16,855
 400d490:	0400d5f4 	movhi	r16,855
 400d494:	0400d5e0 	cmpeqi	r16,zero,855
 400d498:	0400d4cc 	andi	r16,zero,851
 400d49c:	0400d5f4 	movhi	r16,855
 400d4a0:	0400d5e0 	cmpeqi	r16,zero,855
 400d4a4:	0400d5f4 	movhi	r16,855
 400d4a8:	0400d4cc 	andi	r16,zero,851
 400d4ac:	0400d600 	call	400d60 <__alt_mem_sdram-0x3bff2a0>
 400d4b0:	0400d600 	call	400d60 <__alt_mem_sdram-0x3bff2a0>
 400d4b4:	0400d600 	call	400d60 <__alt_mem_sdram-0x3bff2a0>
 400d4b8:	0400d710 	cmplti	r16,zero,860
 400d4bc:	90003b1e 	bne	r18,zero,400d5ac <__mulsf3+0x204>
 400d4c0:	04400204 	movi	r17,8
 400d4c4:	05c00084 	movi	r23,2
 400d4c8:	003fd206 	br	400d414 <__alt_mem_onchip_memory2_0+0xfc00c194>
 400d4cc:	302b883a 	mov	r21,r6
 400d4d0:	00800084 	movi	r2,2
 400d4d4:	18802626 	beq	r3,r2,400d570 <__mulsf3+0x1c8>
 400d4d8:	008000c4 	movi	r2,3
 400d4dc:	1880b826 	beq	r3,r2,400d7c0 <__mulsf3+0x418>
 400d4e0:	00800044 	movi	r2,1
 400d4e4:	1880af1e 	bne	r3,r2,400d7a4 <__mulsf3+0x3fc>
 400d4e8:	a829883a 	mov	r20,r21
 400d4ec:	0007883a 	mov	r3,zero
 400d4f0:	0009883a 	mov	r4,zero
 400d4f4:	18803fcc 	andi	r2,r3,255
 400d4f8:	100695fa 	slli	r3,r2,23
 400d4fc:	a0803fcc 	andi	r2,r20,255
 400d500:	100a97fa 	slli	r5,r2,31
 400d504:	00802034 	movhi	r2,128
 400d508:	10bfffc4 	addi	r2,r2,-1
 400d50c:	2084703a 	and	r2,r4,r2
 400d510:	10c4b03a 	or	r2,r2,r3
 400d514:	1144b03a 	or	r2,r2,r5
 400d518:	dfc00a17 	ldw	ra,40(sp)
 400d51c:	df000917 	ldw	fp,36(sp)
 400d520:	ddc00817 	ldw	r23,32(sp)
 400d524:	dd800717 	ldw	r22,28(sp)
 400d528:	dd400617 	ldw	r21,24(sp)
 400d52c:	dd000517 	ldw	r20,20(sp)
 400d530:	dcc00417 	ldw	r19,16(sp)
 400d534:	dc800317 	ldw	r18,12(sp)
 400d538:	dc400217 	ldw	r17,8(sp)
 400d53c:	dc000117 	ldw	r16,4(sp)
 400d540:	dec00b04 	addi	sp,sp,44
 400d544:	f800283a 	ret
 400d548:	90000d1e 	bne	r18,zero,400d580 <__mulsf3+0x1d8>
 400d54c:	04400104 	movi	r17,4
 400d550:	05c00044 	movi	r23,1
 400d554:	003faf06 	br	400d414 <__alt_mem_onchip_memory2_0+0xfc00c194>
 400d558:	9806c03a 	cmpne	r3,r19,zero
 400d55c:	18c00084 	addi	r3,r3,2
 400d560:	003fba06 	br	400d44c <__alt_mem_onchip_memory2_0+0xfc00c1cc>
 400d564:	9800141e 	bne	r19,zero,400d5b8 <__mulsf3+0x210>
 400d568:	00c00044 	movi	r3,1
 400d56c:	003fb706 	br	400d44c <__alt_mem_onchip_memory2_0+0xfc00c1cc>
 400d570:	a829883a 	mov	r20,r21
 400d574:	00ffffc4 	movi	r3,-1
 400d578:	0009883a 	mov	r4,zero
 400d57c:	003fdd06 	br	400d4f4 <__alt_mem_onchip_memory2_0+0xfc00c274>
 400d580:	9009883a 	mov	r4,r18
 400d584:	d9400015 	stw	r5,0(sp)
 400d588:	400e33c0 	call	400e33c <__clzsi2>
 400d58c:	10fffec4 	addi	r3,r2,-5
 400d590:	10801d84 	addi	r2,r2,118
 400d594:	90e4983a 	sll	r18,r18,r3
 400d598:	00a1c83a 	sub	r16,zero,r2
 400d59c:	0023883a 	mov	r17,zero
 400d5a0:	002f883a 	mov	r23,zero
 400d5a4:	d9400017 	ldw	r5,0(sp)
 400d5a8:	003f9a06 	br	400d414 <__alt_mem_onchip_memory2_0+0xfc00c194>
 400d5ac:	04400304 	movi	r17,12
 400d5b0:	05c000c4 	movi	r23,3
 400d5b4:	003f9706 	br	400d414 <__alt_mem_onchip_memory2_0+0xfc00c194>
 400d5b8:	9809883a 	mov	r4,r19
 400d5bc:	d9800015 	stw	r6,0(sp)
 400d5c0:	400e33c0 	call	400e33c <__clzsi2>
 400d5c4:	10fffec4 	addi	r3,r2,-5
 400d5c8:	10801d84 	addi	r2,r2,118
 400d5cc:	98e6983a 	sll	r19,r19,r3
 400d5d0:	0085c83a 	sub	r2,zero,r2
 400d5d4:	0007883a 	mov	r3,zero
 400d5d8:	d9800017 	ldw	r6,0(sp)
 400d5dc:	003f9b06 	br	400d44c <__alt_mem_onchip_memory2_0+0xfc00c1cc>
 400d5e0:	01002034 	movhi	r4,128
 400d5e4:	0029883a 	mov	r20,zero
 400d5e8:	213fffc4 	addi	r4,r4,-1
 400d5ec:	00ffffc4 	movi	r3,-1
 400d5f0:	003fc006 	br	400d4f4 <__alt_mem_onchip_memory2_0+0xfc00c274>
 400d5f4:	9027883a 	mov	r19,r18
 400d5f8:	b807883a 	mov	r3,r23
 400d5fc:	003fb406 	br	400d4d0 <__alt_mem_onchip_memory2_0+0xfc00c250>
 400d600:	9027883a 	mov	r19,r18
 400d604:	e02b883a 	mov	r21,fp
 400d608:	b807883a 	mov	r3,r23
 400d60c:	003fb006 	br	400d4d0 <__alt_mem_onchip_memory2_0+0xfc00c250>
 400d610:	9028d43a 	srli	r20,r18,16
 400d614:	982cd43a 	srli	r22,r19,16
 400d618:	94bfffcc 	andi	r18,r18,65535
 400d61c:	9cffffcc 	andi	r19,r19,65535
 400d620:	980b883a 	mov	r5,r19
 400d624:	9009883a 	mov	r4,r18
 400d628:	d9c00015 	stw	r7,0(sp)
 400d62c:	400d2c40 	call	400d2c4 <__mulsi3>
 400d630:	a00b883a 	mov	r5,r20
 400d634:	9809883a 	mov	r4,r19
 400d638:	1023883a 	mov	r17,r2
 400d63c:	400d2c40 	call	400d2c4 <__mulsi3>
 400d640:	a009883a 	mov	r4,r20
 400d644:	b00b883a 	mov	r5,r22
 400d648:	1027883a 	mov	r19,r2
 400d64c:	400d2c40 	call	400d2c4 <__mulsi3>
 400d650:	b00b883a 	mov	r5,r22
 400d654:	9009883a 	mov	r4,r18
 400d658:	1029883a 	mov	r20,r2
 400d65c:	400d2c40 	call	400d2c4 <__mulsi3>
 400d660:	8806d43a 	srli	r3,r17,16
 400d664:	14c5883a 	add	r2,r2,r19
 400d668:	d9c00017 	ldw	r7,0(sp)
 400d66c:	1885883a 	add	r2,r3,r2
 400d670:	14c0022e 	bgeu	r2,r19,400d67c <__mulsf3+0x2d4>
 400d674:	00c00074 	movhi	r3,1
 400d678:	a0e9883a 	add	r20,r20,r3
 400d67c:	1026943a 	slli	r19,r2,16
 400d680:	8c7fffcc 	andi	r17,r17,65535
 400d684:	1004d43a 	srli	r2,r2,16
 400d688:	9c63883a 	add	r17,r19,r17
 400d68c:	882691ba 	slli	r19,r17,6
 400d690:	1505883a 	add	r2,r2,r20
 400d694:	8822d6ba 	srli	r17,r17,26
 400d698:	100891ba 	slli	r4,r2,6
 400d69c:	9826c03a 	cmpne	r19,r19,zero
 400d6a0:	9c62b03a 	or	r17,r19,r17
 400d6a4:	8926b03a 	or	r19,r17,r4
 400d6a8:	9882002c 	andhi	r2,r19,2048
 400d6ac:	10000426 	beq	r2,zero,400d6c0 <__mulsf3+0x318>
 400d6b0:	9804d07a 	srli	r2,r19,1
 400d6b4:	9900004c 	andi	r4,r19,1
 400d6b8:	3821883a 	mov	r16,r7
 400d6bc:	1126b03a 	or	r19,r2,r4
 400d6c0:	80c01fc4 	addi	r3,r16,127
 400d6c4:	00c0210e 	bge	zero,r3,400d74c <__mulsf3+0x3a4>
 400d6c8:	988001cc 	andi	r2,r19,7
 400d6cc:	10000426 	beq	r2,zero,400d6e0 <__mulsf3+0x338>
 400d6d0:	988003cc 	andi	r2,r19,15
 400d6d4:	01000104 	movi	r4,4
 400d6d8:	11000126 	beq	r2,r4,400d6e0 <__mulsf3+0x338>
 400d6dc:	9927883a 	add	r19,r19,r4
 400d6e0:	9882002c 	andhi	r2,r19,2048
 400d6e4:	10000426 	beq	r2,zero,400d6f8 <__mulsf3+0x350>
 400d6e8:	00be0034 	movhi	r2,63488
 400d6ec:	10bfffc4 	addi	r2,r2,-1
 400d6f0:	80c02004 	addi	r3,r16,128
 400d6f4:	98a6703a 	and	r19,r19,r2
 400d6f8:	00803f84 	movi	r2,254
 400d6fc:	10ff9c16 	blt	r2,r3,400d570 <__alt_mem_onchip_memory2_0+0xfc00c2f0>
 400d700:	980891ba 	slli	r4,r19,6
 400d704:	a829883a 	mov	r20,r21
 400d708:	2008d27a 	srli	r4,r4,9
 400d70c:	003f7906 	br	400d4f4 <__alt_mem_onchip_memory2_0+0xfc00c274>
 400d710:	9080102c 	andhi	r2,r18,64
 400d714:	10000826 	beq	r2,zero,400d738 <__mulsf3+0x390>
 400d718:	9880102c 	andhi	r2,r19,64
 400d71c:	1000061e 	bne	r2,zero,400d738 <__mulsf3+0x390>
 400d720:	00802034 	movhi	r2,128
 400d724:	99001034 	orhi	r4,r19,64
 400d728:	10bfffc4 	addi	r2,r2,-1
 400d72c:	b029883a 	mov	r20,r22
 400d730:	2088703a 	and	r4,r4,r2
 400d734:	003fad06 	br	400d5ec <__alt_mem_onchip_memory2_0+0xfc00c36c>
 400d738:	00802034 	movhi	r2,128
 400d73c:	91001034 	orhi	r4,r18,64
 400d740:	10bfffc4 	addi	r2,r2,-1
 400d744:	2088703a 	and	r4,r4,r2
 400d748:	003fa806 	br	400d5ec <__alt_mem_onchip_memory2_0+0xfc00c36c>
 400d74c:	00800044 	movi	r2,1
 400d750:	10c7c83a 	sub	r3,r2,r3
 400d754:	008006c4 	movi	r2,27
 400d758:	10ff6316 	blt	r2,r3,400d4e8 <__alt_mem_onchip_memory2_0+0xfc00c268>
 400d75c:	00800804 	movi	r2,32
 400d760:	10c5c83a 	sub	r2,r2,r3
 400d764:	9884983a 	sll	r2,r19,r2
 400d768:	98c6d83a 	srl	r3,r19,r3
 400d76c:	1004c03a 	cmpne	r2,r2,zero
 400d770:	1884b03a 	or	r2,r3,r2
 400d774:	10c001cc 	andi	r3,r2,7
 400d778:	18000426 	beq	r3,zero,400d78c <__mulsf3+0x3e4>
 400d77c:	10c003cc 	andi	r3,r2,15
 400d780:	01000104 	movi	r4,4
 400d784:	19000126 	beq	r3,r4,400d78c <__mulsf3+0x3e4>
 400d788:	1105883a 	add	r2,r2,r4
 400d78c:	10c1002c 	andhi	r3,r2,1024
 400d790:	18000626 	beq	r3,zero,400d7ac <__mulsf3+0x404>
 400d794:	a829883a 	mov	r20,r21
 400d798:	00c00044 	movi	r3,1
 400d79c:	0009883a 	mov	r4,zero
 400d7a0:	003f5406 	br	400d4f4 <__alt_mem_onchip_memory2_0+0xfc00c274>
 400d7a4:	3821883a 	mov	r16,r7
 400d7a8:	003fc506 	br	400d6c0 <__alt_mem_onchip_memory2_0+0xfc00c440>
 400d7ac:	100491ba 	slli	r2,r2,6
 400d7b0:	a829883a 	mov	r20,r21
 400d7b4:	0007883a 	mov	r3,zero
 400d7b8:	1008d27a 	srli	r4,r2,9
 400d7bc:	003f4d06 	br	400d4f4 <__alt_mem_onchip_memory2_0+0xfc00c274>
 400d7c0:	00802034 	movhi	r2,128
 400d7c4:	99001034 	orhi	r4,r19,64
 400d7c8:	10bfffc4 	addi	r2,r2,-1
 400d7cc:	a829883a 	mov	r20,r21
 400d7d0:	2088703a 	and	r4,r4,r2
 400d7d4:	003f8506 	br	400d5ec <__alt_mem_onchip_memory2_0+0xfc00c36c>

0400d7d8 <__subsf3>:
 400d7d8:	defffc04 	addi	sp,sp,-16
 400d7dc:	280cd5fa 	srli	r6,r5,23
 400d7e0:	dc000015 	stw	r16,0(sp)
 400d7e4:	01c02034 	movhi	r7,128
 400d7e8:	2020d5fa 	srli	r16,r4,23
 400d7ec:	39ffffc4 	addi	r7,r7,-1
 400d7f0:	3906703a 	and	r3,r7,r4
 400d7f4:	dc400115 	stw	r17,4(sp)
 400d7f8:	394e703a 	and	r7,r7,r5
 400d7fc:	2022d7fa 	srli	r17,r4,31
 400d800:	dfc00315 	stw	ra,12(sp)
 400d804:	dc800215 	stw	r18,8(sp)
 400d808:	31803fcc 	andi	r6,r6,255
 400d80c:	01003fc4 	movi	r4,255
 400d810:	84003fcc 	andi	r16,r16,255
 400d814:	180690fa 	slli	r3,r3,3
 400d818:	2804d7fa 	srli	r2,r5,31
 400d81c:	380e90fa 	slli	r7,r7,3
 400d820:	31006d26 	beq	r6,r4,400d9d8 <__subsf3+0x200>
 400d824:	1080005c 	xori	r2,r2,1
 400d828:	8189c83a 	sub	r4,r16,r6
 400d82c:	14404f26 	beq	r2,r17,400d96c <__subsf3+0x194>
 400d830:	0100770e 	bge	zero,r4,400da10 <__subsf3+0x238>
 400d834:	30001e1e 	bne	r6,zero,400d8b0 <__subsf3+0xd8>
 400d838:	38006a1e 	bne	r7,zero,400d9e4 <__subsf3+0x20c>
 400d83c:	188001cc 	andi	r2,r3,7
 400d840:	10000426 	beq	r2,zero,400d854 <__subsf3+0x7c>
 400d844:	188003cc 	andi	r2,r3,15
 400d848:	01000104 	movi	r4,4
 400d84c:	11000126 	beq	r2,r4,400d854 <__subsf3+0x7c>
 400d850:	1907883a 	add	r3,r3,r4
 400d854:	1881002c 	andhi	r2,r3,1024
 400d858:	10003926 	beq	r2,zero,400d940 <__subsf3+0x168>
 400d85c:	84000044 	addi	r16,r16,1
 400d860:	00803fc4 	movi	r2,255
 400d864:	80807526 	beq	r16,r2,400da3c <__subsf3+0x264>
 400d868:	180691ba 	slli	r3,r3,6
 400d86c:	8880004c 	andi	r2,r17,1
 400d870:	180ad27a 	srli	r5,r3,9
 400d874:	84003fcc 	andi	r16,r16,255
 400d878:	800695fa 	slli	r3,r16,23
 400d87c:	10803fcc 	andi	r2,r2,255
 400d880:	01002034 	movhi	r4,128
 400d884:	213fffc4 	addi	r4,r4,-1
 400d888:	100497fa 	slli	r2,r2,31
 400d88c:	2920703a 	and	r16,r5,r4
 400d890:	80e0b03a 	or	r16,r16,r3
 400d894:	8084b03a 	or	r2,r16,r2
 400d898:	dfc00317 	ldw	ra,12(sp)
 400d89c:	dc800217 	ldw	r18,8(sp)
 400d8a0:	dc400117 	ldw	r17,4(sp)
 400d8a4:	dc000017 	ldw	r16,0(sp)
 400d8a8:	dec00404 	addi	sp,sp,16
 400d8ac:	f800283a 	ret
 400d8b0:	00803fc4 	movi	r2,255
 400d8b4:	80bfe126 	beq	r16,r2,400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400d8b8:	39c10034 	orhi	r7,r7,1024
 400d8bc:	008006c4 	movi	r2,27
 400d8c0:	11007416 	blt	r2,r4,400da94 <__subsf3+0x2bc>
 400d8c4:	00800804 	movi	r2,32
 400d8c8:	1105c83a 	sub	r2,r2,r4
 400d8cc:	3884983a 	sll	r2,r7,r2
 400d8d0:	390ed83a 	srl	r7,r7,r4
 400d8d4:	1008c03a 	cmpne	r4,r2,zero
 400d8d8:	390eb03a 	or	r7,r7,r4
 400d8dc:	19c7c83a 	sub	r3,r3,r7
 400d8e0:	1881002c 	andhi	r2,r3,1024
 400d8e4:	10001426 	beq	r2,zero,400d938 <__subsf3+0x160>
 400d8e8:	04810034 	movhi	r18,1024
 400d8ec:	94bfffc4 	addi	r18,r18,-1
 400d8f0:	1ca4703a 	and	r18,r3,r18
 400d8f4:	9009883a 	mov	r4,r18
 400d8f8:	400e33c0 	call	400e33c <__clzsi2>
 400d8fc:	10bffec4 	addi	r2,r2,-5
 400d900:	90a4983a 	sll	r18,r18,r2
 400d904:	14005116 	blt	r2,r16,400da4c <__subsf3+0x274>
 400d908:	1405c83a 	sub	r2,r2,r16
 400d90c:	10c00044 	addi	r3,r2,1
 400d910:	00800804 	movi	r2,32
 400d914:	10c5c83a 	sub	r2,r2,r3
 400d918:	9084983a 	sll	r2,r18,r2
 400d91c:	90e4d83a 	srl	r18,r18,r3
 400d920:	0021883a 	mov	r16,zero
 400d924:	1006c03a 	cmpne	r3,r2,zero
 400d928:	90c6b03a 	or	r3,r18,r3
 400d92c:	003fc306 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400d930:	2000e026 	beq	r4,zero,400dcb4 <__subsf3+0x4dc>
 400d934:	2007883a 	mov	r3,r4
 400d938:	188001cc 	andi	r2,r3,7
 400d93c:	103fc11e 	bne	r2,zero,400d844 <__alt_mem_onchip_memory2_0+0xfc00c5c4>
 400d940:	180ad0fa 	srli	r5,r3,3
 400d944:	00c03fc4 	movi	r3,255
 400d948:	8880004c 	andi	r2,r17,1
 400d94c:	80c0031e 	bne	r16,r3,400d95c <__subsf3+0x184>
 400d950:	28006d26 	beq	r5,zero,400db08 <__subsf3+0x330>
 400d954:	29401034 	orhi	r5,r5,64
 400d958:	043fffc4 	movi	r16,-1
 400d95c:	00c02034 	movhi	r3,128
 400d960:	18ffffc4 	addi	r3,r3,-1
 400d964:	28ca703a 	and	r5,r5,r3
 400d968:	003fc206 	br	400d874 <__alt_mem_onchip_memory2_0+0xfc00c5f4>
 400d96c:	01003c0e 	bge	zero,r4,400da60 <__subsf3+0x288>
 400d970:	30002126 	beq	r6,zero,400d9f8 <__subsf3+0x220>
 400d974:	01403fc4 	movi	r5,255
 400d978:	817fb026 	beq	r16,r5,400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400d97c:	39c10034 	orhi	r7,r7,1024
 400d980:	014006c4 	movi	r5,27
 400d984:	29007416 	blt	r5,r4,400db58 <__subsf3+0x380>
 400d988:	01400804 	movi	r5,32
 400d98c:	290bc83a 	sub	r5,r5,r4
 400d990:	394a983a 	sll	r5,r7,r5
 400d994:	390ed83a 	srl	r7,r7,r4
 400d998:	2808c03a 	cmpne	r4,r5,zero
 400d99c:	390eb03a 	or	r7,r7,r4
 400d9a0:	19c7883a 	add	r3,r3,r7
 400d9a4:	1901002c 	andhi	r4,r3,1024
 400d9a8:	20003826 	beq	r4,zero,400da8c <__subsf3+0x2b4>
 400d9ac:	84000044 	addi	r16,r16,1
 400d9b0:	01003fc4 	movi	r4,255
 400d9b4:	81005426 	beq	r16,r4,400db08 <__subsf3+0x330>
 400d9b8:	1023883a 	mov	r17,r2
 400d9bc:	00bf0034 	movhi	r2,64512
 400d9c0:	10bfffc4 	addi	r2,r2,-1
 400d9c4:	1900004c 	andi	r4,r3,1
 400d9c8:	1886703a 	and	r3,r3,r2
 400d9cc:	1806d07a 	srli	r3,r3,1
 400d9d0:	1906b03a 	or	r3,r3,r4
 400d9d4:	003f9906 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400d9d8:	383f9226 	beq	r7,zero,400d824 <__alt_mem_onchip_memory2_0+0xfc00c5a4>
 400d9dc:	10803fcc 	andi	r2,r2,255
 400d9e0:	003f9106 	br	400d828 <__alt_mem_onchip_memory2_0+0xfc00c5a8>
 400d9e4:	213fffc4 	addi	r4,r4,-1
 400d9e8:	203fbc26 	beq	r4,zero,400d8dc <__alt_mem_onchip_memory2_0+0xfc00c65c>
 400d9ec:	00803fc4 	movi	r2,255
 400d9f0:	80bfb21e 	bne	r16,r2,400d8bc <__alt_mem_onchip_memory2_0+0xfc00c63c>
 400d9f4:	003f9106 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400d9f8:	383f9026 	beq	r7,zero,400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400d9fc:	213fffc4 	addi	r4,r4,-1
 400da00:	203fe726 	beq	r4,zero,400d9a0 <__alt_mem_onchip_memory2_0+0xfc00c720>
 400da04:	01403fc4 	movi	r5,255
 400da08:	817fdd1e 	bne	r16,r5,400d980 <__alt_mem_onchip_memory2_0+0xfc00c700>
 400da0c:	003f8b06 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400da10:	2000221e 	bne	r4,zero,400da9c <__subsf3+0x2c4>
 400da14:	81000044 	addi	r4,r16,1
 400da18:	21003fcc 	andi	r4,r4,255
 400da1c:	01400044 	movi	r5,1
 400da20:	2900470e 	bge	r5,r4,400db40 <__subsf3+0x368>
 400da24:	19e5c83a 	sub	r18,r3,r7
 400da28:	9141002c 	andhi	r5,r18,1024
 400da2c:	28002d26 	beq	r5,zero,400dae4 <__subsf3+0x30c>
 400da30:	38e5c83a 	sub	r18,r7,r3
 400da34:	1023883a 	mov	r17,r2
 400da38:	003fae06 	br	400d8f4 <__alt_mem_onchip_memory2_0+0xfc00c674>
 400da3c:	8880004c 	andi	r2,r17,1
 400da40:	043fffc4 	movi	r16,-1
 400da44:	000b883a 	mov	r5,zero
 400da48:	003f8a06 	br	400d874 <__alt_mem_onchip_memory2_0+0xfc00c5f4>
 400da4c:	00ff0034 	movhi	r3,64512
 400da50:	18ffffc4 	addi	r3,r3,-1
 400da54:	80a1c83a 	sub	r16,r16,r2
 400da58:	90c6703a 	and	r3,r18,r3
 400da5c:	003f7706 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400da60:	2000431e 	bne	r4,zero,400db70 <__subsf3+0x398>
 400da64:	81000044 	addi	r4,r16,1
 400da68:	21803fcc 	andi	r6,r4,255
 400da6c:	01400044 	movi	r5,1
 400da70:	2980280e 	bge	r5,r6,400db14 <__subsf3+0x33c>
 400da74:	01403fc4 	movi	r5,255
 400da78:	21402326 	beq	r4,r5,400db08 <__subsf3+0x330>
 400da7c:	19c7883a 	add	r3,r3,r7
 400da80:	1806d07a 	srli	r3,r3,1
 400da84:	2021883a 	mov	r16,r4
 400da88:	003f6c06 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400da8c:	1023883a 	mov	r17,r2
 400da90:	003fa906 	br	400d938 <__alt_mem_onchip_memory2_0+0xfc00c6b8>
 400da94:	01c00044 	movi	r7,1
 400da98:	003f9006 	br	400d8dc <__alt_mem_onchip_memory2_0+0xfc00c65c>
 400da9c:	8000151e 	bne	r16,zero,400daf4 <__subsf3+0x31c>
 400daa0:	18002f26 	beq	r3,zero,400db60 <__subsf3+0x388>
 400daa4:	0108303a 	nor	r4,zero,r4
 400daa8:	20000a26 	beq	r4,zero,400dad4 <__subsf3+0x2fc>
 400daac:	01403fc4 	movi	r5,255
 400dab0:	31402b26 	beq	r6,r5,400db60 <__subsf3+0x388>
 400dab4:	014006c4 	movi	r5,27
 400dab8:	29006e16 	blt	r5,r4,400dc74 <__subsf3+0x49c>
 400dabc:	01400804 	movi	r5,32
 400dac0:	290bc83a 	sub	r5,r5,r4
 400dac4:	194a983a 	sll	r5,r3,r5
 400dac8:	1908d83a 	srl	r4,r3,r4
 400dacc:	2806c03a 	cmpne	r3,r5,zero
 400dad0:	20c6b03a 	or	r3,r4,r3
 400dad4:	38c7c83a 	sub	r3,r7,r3
 400dad8:	3021883a 	mov	r16,r6
 400dadc:	1023883a 	mov	r17,r2
 400dae0:	003f7f06 	br	400d8e0 <__alt_mem_onchip_memory2_0+0xfc00c660>
 400dae4:	903f831e 	bne	r18,zero,400d8f4 <__alt_mem_onchip_memory2_0+0xfc00c674>
 400dae8:	0005883a 	mov	r2,zero
 400daec:	0021883a 	mov	r16,zero
 400daf0:	003f9a06 	br	400d95c <__alt_mem_onchip_memory2_0+0xfc00c6dc>
 400daf4:	01403fc4 	movi	r5,255
 400daf8:	31401926 	beq	r6,r5,400db60 <__subsf3+0x388>
 400dafc:	0109c83a 	sub	r4,zero,r4
 400db00:	18c10034 	orhi	r3,r3,1024
 400db04:	003feb06 	br	400dab4 <__alt_mem_onchip_memory2_0+0xfc00c834>
 400db08:	043fffc4 	movi	r16,-1
 400db0c:	000b883a 	mov	r5,zero
 400db10:	003f5806 	br	400d874 <__alt_mem_onchip_memory2_0+0xfc00c5f4>
 400db14:	8000481e 	bne	r16,zero,400dc38 <__subsf3+0x460>
 400db18:	18006226 	beq	r3,zero,400dca4 <__subsf3+0x4cc>
 400db1c:	383f4726 	beq	r7,zero,400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400db20:	19c7883a 	add	r3,r3,r7
 400db24:	1881002c 	andhi	r2,r3,1024
 400db28:	103f8326 	beq	r2,zero,400d938 <__alt_mem_onchip_memory2_0+0xfc00c6b8>
 400db2c:	00bf0034 	movhi	r2,64512
 400db30:	10bfffc4 	addi	r2,r2,-1
 400db34:	2821883a 	mov	r16,r5
 400db38:	1886703a 	and	r3,r3,r2
 400db3c:	003f3f06 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400db40:	80001c1e 	bne	r16,zero,400dbb4 <__subsf3+0x3dc>
 400db44:	1800261e 	bne	r3,zero,400dbe0 <__subsf3+0x408>
 400db48:	38004c26 	beq	r7,zero,400dc7c <__subsf3+0x4a4>
 400db4c:	3807883a 	mov	r3,r7
 400db50:	1023883a 	mov	r17,r2
 400db54:	003f3906 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400db58:	01c00044 	movi	r7,1
 400db5c:	003f9006 	br	400d9a0 <__alt_mem_onchip_memory2_0+0xfc00c720>
 400db60:	3807883a 	mov	r3,r7
 400db64:	3021883a 	mov	r16,r6
 400db68:	1023883a 	mov	r17,r2
 400db6c:	003f3306 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400db70:	8000161e 	bne	r16,zero,400dbcc <__subsf3+0x3f4>
 400db74:	18002d26 	beq	r3,zero,400dc2c <__subsf3+0x454>
 400db78:	0108303a 	nor	r4,zero,r4
 400db7c:	20000a26 	beq	r4,zero,400dba8 <__subsf3+0x3d0>
 400db80:	01403fc4 	movi	r5,255
 400db84:	31402926 	beq	r6,r5,400dc2c <__subsf3+0x454>
 400db88:	014006c4 	movi	r5,27
 400db8c:	29004716 	blt	r5,r4,400dcac <__subsf3+0x4d4>
 400db90:	01400804 	movi	r5,32
 400db94:	290bc83a 	sub	r5,r5,r4
 400db98:	194a983a 	sll	r5,r3,r5
 400db9c:	1908d83a 	srl	r4,r3,r4
 400dba0:	2806c03a 	cmpne	r3,r5,zero
 400dba4:	20c6b03a 	or	r3,r4,r3
 400dba8:	19c7883a 	add	r3,r3,r7
 400dbac:	3021883a 	mov	r16,r6
 400dbb0:	003f7c06 	br	400d9a4 <__alt_mem_onchip_memory2_0+0xfc00c724>
 400dbb4:	1800111e 	bne	r3,zero,400dbfc <__subsf3+0x424>
 400dbb8:	38003326 	beq	r7,zero,400dc88 <__subsf3+0x4b0>
 400dbbc:	3807883a 	mov	r3,r7
 400dbc0:	1023883a 	mov	r17,r2
 400dbc4:	04003fc4 	movi	r16,255
 400dbc8:	003f1c06 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400dbcc:	01403fc4 	movi	r5,255
 400dbd0:	31401626 	beq	r6,r5,400dc2c <__subsf3+0x454>
 400dbd4:	0109c83a 	sub	r4,zero,r4
 400dbd8:	18c10034 	orhi	r3,r3,1024
 400dbdc:	003fea06 	br	400db88 <__alt_mem_onchip_memory2_0+0xfc00c908>
 400dbe0:	383f1626 	beq	r7,zero,400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400dbe4:	19c9c83a 	sub	r4,r3,r7
 400dbe8:	2141002c 	andhi	r5,r4,1024
 400dbec:	283f5026 	beq	r5,zero,400d930 <__alt_mem_onchip_memory2_0+0xfc00c6b0>
 400dbf0:	38c7c83a 	sub	r3,r7,r3
 400dbf4:	1023883a 	mov	r17,r2
 400dbf8:	003f1006 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400dbfc:	38001b26 	beq	r7,zero,400dc6c <__subsf3+0x494>
 400dc00:	1806d0fa 	srli	r3,r3,3
 400dc04:	1900102c 	andhi	r4,r3,64
 400dc08:	20000526 	beq	r4,zero,400dc20 <__subsf3+0x448>
 400dc0c:	380ed0fa 	srli	r7,r7,3
 400dc10:	3900102c 	andhi	r4,r7,64
 400dc14:	2000021e 	bne	r4,zero,400dc20 <__subsf3+0x448>
 400dc18:	3807883a 	mov	r3,r7
 400dc1c:	1023883a 	mov	r17,r2
 400dc20:	180690fa 	slli	r3,r3,3
 400dc24:	04003fc4 	movi	r16,255
 400dc28:	003f0406 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400dc2c:	3807883a 	mov	r3,r7
 400dc30:	3021883a 	mov	r16,r6
 400dc34:	003f0106 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400dc38:	18001726 	beq	r3,zero,400dc98 <__subsf3+0x4c0>
 400dc3c:	38000b26 	beq	r7,zero,400dc6c <__subsf3+0x494>
 400dc40:	1806d0fa 	srli	r3,r3,3
 400dc44:	1900102c 	andhi	r4,r3,64
 400dc48:	20000426 	beq	r4,zero,400dc5c <__subsf3+0x484>
 400dc4c:	380ed0fa 	srli	r7,r7,3
 400dc50:	3900102c 	andhi	r4,r7,64
 400dc54:	2000011e 	bne	r4,zero,400dc5c <__subsf3+0x484>
 400dc58:	3807883a 	mov	r3,r7
 400dc5c:	180690fa 	slli	r3,r3,3
 400dc60:	1023883a 	mov	r17,r2
 400dc64:	04003fc4 	movi	r16,255
 400dc68:	003ef406 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400dc6c:	04003fc4 	movi	r16,255
 400dc70:	003ef206 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400dc74:	00c00044 	movi	r3,1
 400dc78:	003f9606 	br	400dad4 <__alt_mem_onchip_memory2_0+0xfc00c854>
 400dc7c:	000b883a 	mov	r5,zero
 400dc80:	0005883a 	mov	r2,zero
 400dc84:	003f3506 	br	400d95c <__alt_mem_onchip_memory2_0+0xfc00c6dc>
 400dc88:	01402034 	movhi	r5,128
 400dc8c:	297fffc4 	addi	r5,r5,-1
 400dc90:	0005883a 	mov	r2,zero
 400dc94:	003f2f06 	br	400d954 <__alt_mem_onchip_memory2_0+0xfc00c6d4>
 400dc98:	3807883a 	mov	r3,r7
 400dc9c:	04003fc4 	movi	r16,255
 400dca0:	003ee606 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400dca4:	3807883a 	mov	r3,r7
 400dca8:	003ee406 	br	400d83c <__alt_mem_onchip_memory2_0+0xfc00c5bc>
 400dcac:	00c00044 	movi	r3,1
 400dcb0:	003fbd06 	br	400dba8 <__alt_mem_onchip_memory2_0+0xfc00c928>
 400dcb4:	0005883a 	mov	r2,zero
 400dcb8:	003f2806 	br	400d95c <__alt_mem_onchip_memory2_0+0xfc00c6dc>

0400dcbc <__fixsfsi>:
 400dcbc:	200ad5fa 	srli	r5,r4,23
 400dcc0:	00c02034 	movhi	r3,128
 400dcc4:	18ffffc4 	addi	r3,r3,-1
 400dcc8:	29403fcc 	andi	r5,r5,255
 400dccc:	00801f84 	movi	r2,126
 400dcd0:	1906703a 	and	r3,r3,r4
 400dcd4:	2008d7fa 	srli	r4,r4,31
 400dcd8:	11400e0e 	bge	r2,r5,400dd14 <__fixsfsi+0x58>
 400dcdc:	00802744 	movi	r2,157
 400dce0:	11400816 	blt	r2,r5,400dd04 <__fixsfsi+0x48>
 400dce4:	00802544 	movi	r2,149
 400dce8:	18c02034 	orhi	r3,r3,128
 400dcec:	11400b0e 	bge	r2,r5,400dd1c <__fixsfsi+0x60>
 400dcf0:	28bfda84 	addi	r2,r5,-150
 400dcf4:	1884983a 	sll	r2,r3,r2
 400dcf8:	20000726 	beq	r4,zero,400dd18 <__fixsfsi+0x5c>
 400dcfc:	0085c83a 	sub	r2,zero,r2
 400dd00:	f800283a 	ret
 400dd04:	00a00034 	movhi	r2,32768
 400dd08:	10bfffc4 	addi	r2,r2,-1
 400dd0c:	2085883a 	add	r2,r4,r2
 400dd10:	f800283a 	ret
 400dd14:	0005883a 	mov	r2,zero
 400dd18:	f800283a 	ret
 400dd1c:	00802584 	movi	r2,150
 400dd20:	1145c83a 	sub	r2,r2,r5
 400dd24:	1884d83a 	srl	r2,r3,r2
 400dd28:	003ff306 	br	400dcf8 <__alt_mem_onchip_memory2_0+0xfc00ca78>

0400dd2c <__floatunsisf>:
 400dd2c:	defffe04 	addi	sp,sp,-8
 400dd30:	dfc00115 	stw	ra,4(sp)
 400dd34:	dc000015 	stw	r16,0(sp)
 400dd38:	20002c26 	beq	r4,zero,400ddec <__floatunsisf+0xc0>
 400dd3c:	2021883a 	mov	r16,r4
 400dd40:	400e33c0 	call	400e33c <__clzsi2>
 400dd44:	00c02784 	movi	r3,158
 400dd48:	1887c83a 	sub	r3,r3,r2
 400dd4c:	01002584 	movi	r4,150
 400dd50:	20c00f16 	blt	r4,r3,400dd90 <__floatunsisf+0x64>
 400dd54:	20c9c83a 	sub	r4,r4,r3
 400dd58:	8108983a 	sll	r4,r16,r4
 400dd5c:	00802034 	movhi	r2,128
 400dd60:	10bfffc4 	addi	r2,r2,-1
 400dd64:	2088703a 	and	r4,r4,r2
 400dd68:	18803fcc 	andi	r2,r3,255
 400dd6c:	100695fa 	slli	r3,r2,23
 400dd70:	00802034 	movhi	r2,128
 400dd74:	10bfffc4 	addi	r2,r2,-1
 400dd78:	2084703a 	and	r2,r4,r2
 400dd7c:	10c4b03a 	or	r2,r2,r3
 400dd80:	dfc00117 	ldw	ra,4(sp)
 400dd84:	dc000017 	ldw	r16,0(sp)
 400dd88:	dec00204 	addi	sp,sp,8
 400dd8c:	f800283a 	ret
 400dd90:	01002644 	movi	r4,153
 400dd94:	20c01816 	blt	r4,r3,400ddf8 <__floatunsisf+0xcc>
 400dd98:	20c9c83a 	sub	r4,r4,r3
 400dd9c:	8108983a 	sll	r4,r16,r4
 400dda0:	017f0034 	movhi	r5,64512
 400dda4:	297fffc4 	addi	r5,r5,-1
 400dda8:	218001cc 	andi	r6,r4,7
 400ddac:	214a703a 	and	r5,r4,r5
 400ddb0:	30000426 	beq	r6,zero,400ddc4 <__floatunsisf+0x98>
 400ddb4:	210003cc 	andi	r4,r4,15
 400ddb8:	01800104 	movi	r6,4
 400ddbc:	21800126 	beq	r4,r6,400ddc4 <__floatunsisf+0x98>
 400ddc0:	298b883a 	add	r5,r5,r6
 400ddc4:	2901002c 	andhi	r4,r5,1024
 400ddc8:	20000526 	beq	r4,zero,400dde0 <__floatunsisf+0xb4>
 400ddcc:	00c027c4 	movi	r3,159
 400ddd0:	1887c83a 	sub	r3,r3,r2
 400ddd4:	00bf0034 	movhi	r2,64512
 400ddd8:	10bfffc4 	addi	r2,r2,-1
 400dddc:	288a703a 	and	r5,r5,r2
 400dde0:	280891ba 	slli	r4,r5,6
 400dde4:	2008d27a 	srli	r4,r4,9
 400dde8:	003fdf06 	br	400dd68 <__alt_mem_onchip_memory2_0+0xfc00cae8>
 400ddec:	0007883a 	mov	r3,zero
 400ddf0:	0009883a 	mov	r4,zero
 400ddf4:	003fdc06 	br	400dd68 <__alt_mem_onchip_memory2_0+0xfc00cae8>
 400ddf8:	01402e44 	movi	r5,185
 400ddfc:	28cbc83a 	sub	r5,r5,r3
 400de00:	01000144 	movi	r4,5
 400de04:	2089c83a 	sub	r4,r4,r2
 400de08:	814a983a 	sll	r5,r16,r5
 400de0c:	8108d83a 	srl	r4,r16,r4
 400de10:	2820c03a 	cmpne	r16,r5,zero
 400de14:	2408b03a 	or	r4,r4,r16
 400de18:	003fe106 	br	400dda0 <__alt_mem_onchip_memory2_0+0xfc00cb20>

0400de1c <_Unwind_ForcedUnwind_Phase2>:
 400de1c:	defff404 	addi	sp,sp,-48
 400de20:	dd800915 	stw	r22,36(sp)
 400de24:	058100f4 	movhi	r22,1027
 400de28:	ddc00a15 	stw	r23,40(sp)
 400de2c:	dd400815 	stw	r21,32(sp)
 400de30:	dd000715 	stw	r20,28(sp)
 400de34:	dcc00615 	stw	r19,24(sp)
 400de38:	dc400415 	stw	r17,16(sp)
 400de3c:	dc000315 	stw	r16,12(sp)
 400de40:	dfc00b15 	stw	ra,44(sp)
 400de44:	dc800515 	stw	r18,20(sp)
 400de48:	2021883a 	mov	r16,r4
 400de4c:	2823883a 	mov	r17,r5
 400de50:	24c00317 	ldw	r19,12(r4)
 400de54:	25000417 	ldw	r20,16(r4)
 400de58:	28c00017 	ldw	r3,0(r5)
 400de5c:	b5b5ee04 	addi	r22,r22,-10312
 400de60:	054001c4 	movi	r21,7
 400de64:	05c00204 	movi	r23,8
 400de68:	00001606 	br	400dec4 <_Unwind_ForcedUnwind_Phase2+0xa8>
 400de6c:	81800017 	ldw	r6,0(r16)
 400de70:	81c00117 	ldw	r7,4(r16)
 400de74:	1c800617 	ldw	r18,24(r3)
 400de78:	dd000215 	stw	r20,8(sp)
 400de7c:	dc400115 	stw	r17,4(sp)
 400de80:	dc000015 	stw	r16,0(sp)
 400de84:	983ee83a 	callr	r19
 400de88:	01400284 	movi	r5,10
 400de8c:	01000044 	movi	r4,1
 400de90:	1000241e 	bne	r2,zero,400df24 <_Unwind_ForcedUnwind_Phase2+0x108>
 400de94:	90000726 	beq	r18,zero,400deb4 <_Unwind_ForcedUnwind_Phase2+0x98>
 400de98:	81800017 	ldw	r6,0(r16)
 400de9c:	81c00117 	ldw	r7,4(r16)
 400dea0:	dc400115 	stw	r17,4(sp)
 400dea4:	dc000015 	stw	r16,0(sp)
 400dea8:	903ee83a 	callr	r18
 400deac:	15401f26 	beq	r2,r21,400df2c <_Unwind_ForcedUnwind_Phase2+0x110>
 400deb0:	15c01c1e 	bne	r2,r23,400df24 <_Unwind_ForcedUnwind_Phase2+0x108>
 400deb4:	88800017 	ldw	r2,0(r17)
 400deb8:	10c00017 	ldw	r3,0(r2)
 400debc:	b0c00015 	stw	r3,0(r22)
 400dec0:	88c00015 	stw	r3,0(r17)
 400dec4:	01400284 	movi	r5,10
 400dec8:	01000044 	movi	r4,1
 400decc:	183fe71e 	bne	r3,zero,400de6c <__alt_mem_onchip_memory2_0+0xfc00cbec>
 400ded0:	81800017 	ldw	r6,0(r16)
 400ded4:	81c00117 	ldw	r7,4(r16)
 400ded8:	01400684 	movi	r5,26
 400dedc:	dd000215 	stw	r20,8(sp)
 400dee0:	dc400115 	stw	r17,4(sp)
 400dee4:	dc000015 	stw	r16,0(sp)
 400dee8:	01000044 	movi	r4,1
 400deec:	983ee83a 	callr	r19
 400def0:	10000c1e 	bne	r2,zero,400df24 <_Unwind_ForcedUnwind_Phase2+0x108>
 400def4:	00800144 	movi	r2,5
 400def8:	dfc00b17 	ldw	ra,44(sp)
 400defc:	ddc00a17 	ldw	r23,40(sp)
 400df00:	dd800917 	ldw	r22,36(sp)
 400df04:	dd400817 	ldw	r21,32(sp)
 400df08:	dd000717 	ldw	r20,28(sp)
 400df0c:	dcc00617 	ldw	r19,24(sp)
 400df10:	dc800517 	ldw	r18,20(sp)
 400df14:	dc400417 	ldw	r17,16(sp)
 400df18:	dc000317 	ldw	r16,12(sp)
 400df1c:	dec00c04 	addi	sp,sp,48
 400df20:	f800283a 	ret
 400df24:	00800084 	movi	r2,2
 400df28:	003ff306 	br	400def8 <__alt_mem_onchip_memory2_0+0xfc00cc78>
 400df2c:	a805883a 	mov	r2,r21
 400df30:	003ff106 	br	400def8 <__alt_mem_onchip_memory2_0+0xfc00cc78>

0400df34 <_Unwind_RaiseException_Phase2>:
 400df34:	28c00017 	ldw	r3,0(r5)
 400df38:	defff804 	addi	sp,sp,-32
 400df3c:	dcc00515 	stw	r19,20(sp)
 400df40:	dc800415 	stw	r18,16(sp)
 400df44:	dc400315 	stw	r17,12(sp)
 400df48:	dc000215 	stw	r16,8(sp)
 400df4c:	dfc00715 	stw	ra,28(sp)
 400df50:	dd000615 	stw	r20,24(sp)
 400df54:	2823883a 	mov	r17,r5
 400df58:	2021883a 	mov	r16,r4
 400df5c:	048001c4 	movi	r18,7
 400df60:	04c00204 	movi	r19,8
 400df64:	18001326 	beq	r3,zero,400dfb4 <_Unwind_RaiseException_Phase2+0x80>
 400df68:	81000417 	ldw	r4,16(r16)
 400df6c:	1a000617 	ldw	r8,24(r3)
 400df70:	19001926 	beq	r3,r4,400dfd8 <_Unwind_RaiseException_Phase2+0xa4>
 400df74:	40000c26 	beq	r8,zero,400dfa8 <_Unwind_RaiseException_Phase2+0x74>
 400df78:	01400084 	movi	r5,2
 400df7c:	0029883a 	mov	r20,zero
 400df80:	81800017 	ldw	r6,0(r16)
 400df84:	81c00117 	ldw	r7,4(r16)
 400df88:	01000044 	movi	r4,1
 400df8c:	dc400115 	stw	r17,4(sp)
 400df90:	dc000015 	stw	r16,0(sp)
 400df94:	403ee83a 	callr	r8
 400df98:	14801326 	beq	r2,r18,400dfe8 <_Unwind_RaiseException_Phase2+0xb4>
 400df9c:	14c0051e 	bne	r2,r19,400dfb4 <_Unwind_RaiseException_Phase2+0x80>
 400dfa0:	a000131e 	bne	r20,zero,400dff0 <_Unwind_RaiseException_Phase2+0xbc>
 400dfa4:	88c00017 	ldw	r3,0(r17)
 400dfa8:	18c00017 	ldw	r3,0(r3)
 400dfac:	88c00015 	stw	r3,0(r17)
 400dfb0:	183fed1e 	bne	r3,zero,400df68 <__alt_mem_onchip_memory2_0+0xfc00cce8>
 400dfb4:	00800084 	movi	r2,2
 400dfb8:	dfc00717 	ldw	ra,28(sp)
 400dfbc:	dd000617 	ldw	r20,24(sp)
 400dfc0:	dcc00517 	ldw	r19,20(sp)
 400dfc4:	dc800417 	ldw	r18,16(sp)
 400dfc8:	dc400317 	ldw	r17,12(sp)
 400dfcc:	dc000217 	ldw	r16,8(sp)
 400dfd0:	dec00804 	addi	sp,sp,32
 400dfd4:	f800283a 	ret
 400dfd8:	40000526 	beq	r8,zero,400dff0 <_Unwind_RaiseException_Phase2+0xbc>
 400dfdc:	01400184 	movi	r5,6
 400dfe0:	05000104 	movi	r20,4
 400dfe4:	003fe606 	br	400df80 <__alt_mem_onchip_memory2_0+0xfc00cd00>
 400dfe8:	9005883a 	mov	r2,r18
 400dfec:	003ff206 	br	400dfb8 <__alt_mem_onchip_memory2_0+0xfc00cd38>
 400dff0:	400e3a00 	call	400e3a0 <abort>

0400dff4 <uw_install_context.isra.1>:
 400dff4:	20c00017 	ldw	r3,0(r4)
 400dff8:	deffff04 	addi	sp,sp,-4
 400dffc:	014100f4 	movhi	r5,1027
 400e000:	19000917 	ldw	r4,36(r3)
 400e004:	df000015 	stw	fp,0(sp)
 400e008:	18800804 	addi	r2,r3,32
 400e00c:	d839883a 	mov	fp,sp
 400e010:	2975ee04 	addi	r5,r5,-10312
 400e014:	28c00015 	stw	r3,0(r5)
 400e018:	17000017 	ldw	fp,0(r2)
 400e01c:	1ec00a17 	ldw	sp,40(r3)
 400e020:	2000683a 	jmp	r4

0400e024 <_Unwind_SjLj_Register>:
 400e024:	008100f4 	movhi	r2,1027
 400e028:	10b5ee04 	addi	r2,r2,-10312
 400e02c:	10c00017 	ldw	r3,0(r2)
 400e030:	11000015 	stw	r4,0(r2)
 400e034:	20c00015 	stw	r3,0(r4)
 400e038:	f800283a 	ret

0400e03c <_Unwind_SjLj_Unregister>:
 400e03c:	20c00017 	ldw	r3,0(r4)
 400e040:	008100f4 	movhi	r2,1027
 400e044:	10b5ee04 	addi	r2,r2,-10312
 400e048:	10c00015 	stw	r3,0(r2)
 400e04c:	f800283a 	ret

0400e050 <_Unwind_GetGR>:
 400e050:	20800017 	ldw	r2,0(r4)
 400e054:	29400084 	addi	r5,r5,2
 400e058:	294b883a 	add	r5,r5,r5
 400e05c:	294b883a 	add	r5,r5,r5
 400e060:	114b883a 	add	r5,r2,r5
 400e064:	28800017 	ldw	r2,0(r5)
 400e068:	f800283a 	ret

0400e06c <_Unwind_GetCFA>:
 400e06c:	20800017 	ldw	r2,0(r4)
 400e070:	10000226 	beq	r2,zero,400e07c <_Unwind_GetCFA+0x10>
 400e074:	10800a17 	ldw	r2,40(r2)
 400e078:	f800283a 	ret
 400e07c:	0005883a 	mov	r2,zero
 400e080:	f800283a 	ret

0400e084 <_Unwind_SetGR>:
 400e084:	20800017 	ldw	r2,0(r4)
 400e088:	29400084 	addi	r5,r5,2
 400e08c:	294b883a 	add	r5,r5,r5
 400e090:	294b883a 	add	r5,r5,r5
 400e094:	114b883a 	add	r5,r2,r5
 400e098:	29800015 	stw	r6,0(r5)
 400e09c:	f800283a 	ret

0400e0a0 <_Unwind_GetIP>:
 400e0a0:	20800017 	ldw	r2,0(r4)
 400e0a4:	10800117 	ldw	r2,4(r2)
 400e0a8:	10800044 	addi	r2,r2,1
 400e0ac:	f800283a 	ret

0400e0b0 <_Unwind_GetIPInfo>:
 400e0b0:	20800017 	ldw	r2,0(r4)
 400e0b4:	28000015 	stw	zero,0(r5)
 400e0b8:	10000326 	beq	r2,zero,400e0c8 <_Unwind_GetIPInfo+0x18>
 400e0bc:	10800117 	ldw	r2,4(r2)
 400e0c0:	10800044 	addi	r2,r2,1
 400e0c4:	f800283a 	ret
 400e0c8:	0005883a 	mov	r2,zero
 400e0cc:	f800283a 	ret

0400e0d0 <_Unwind_SetIP>:
 400e0d0:	20800017 	ldw	r2,0(r4)
 400e0d4:	297fffc4 	addi	r5,r5,-1
 400e0d8:	11400115 	stw	r5,4(r2)
 400e0dc:	f800283a 	ret

0400e0e0 <_Unwind_GetLanguageSpecificData>:
 400e0e0:	20800017 	ldw	r2,0(r4)
 400e0e4:	10800717 	ldw	r2,28(r2)
 400e0e8:	f800283a 	ret

0400e0ec <_Unwind_GetRegionStart>:
 400e0ec:	0005883a 	mov	r2,zero
 400e0f0:	f800283a 	ret

0400e0f4 <_Unwind_FindEnclosingFunction>:
 400e0f4:	0005883a 	mov	r2,zero
 400e0f8:	f800283a 	ret

0400e0fc <_Unwind_GetDataRelBase>:
 400e0fc:	0005883a 	mov	r2,zero
 400e100:	f800283a 	ret

0400e104 <_Unwind_GetTextRelBase>:
 400e104:	0005883a 	mov	r2,zero
 400e108:	f800283a 	ret

0400e10c <_Unwind_SjLj_RaiseException>:
 400e10c:	008100f4 	movhi	r2,1027
 400e110:	defff804 	addi	sp,sp,-32
 400e114:	10b5ee04 	addi	r2,r2,-10312
 400e118:	dc800515 	stw	r18,20(sp)
 400e11c:	14800017 	ldw	r18,0(r2)
 400e120:	dfc00715 	stw	ra,28(sp)
 400e124:	dcc00615 	stw	r19,24(sp)
 400e128:	dc400415 	stw	r17,16(sp)
 400e12c:	dc000315 	stw	r16,12(sp)
 400e130:	dc800215 	stw	r18,8(sp)
 400e134:	90001426 	beq	r18,zero,400e188 <_Unwind_SjLj_RaiseException+0x7c>
 400e138:	2021883a 	mov	r16,r4
 400e13c:	9005883a 	mov	r2,r18
 400e140:	04400184 	movi	r17,6
 400e144:	04c00204 	movi	r19,8
 400e148:	10800617 	ldw	r2,24(r2)
 400e14c:	10000a26 	beq	r2,zero,400e178 <_Unwind_SjLj_RaiseException+0x6c>
 400e150:	81800017 	ldw	r6,0(r16)
 400e154:	81c00117 	ldw	r7,4(r16)
 400e158:	01400044 	movi	r5,1
 400e15c:	d8c00204 	addi	r3,sp,8
 400e160:	d8c00115 	stw	r3,4(sp)
 400e164:	dc000015 	stw	r16,0(sp)
 400e168:	2809883a 	mov	r4,r5
 400e16c:	103ee83a 	callr	r2
 400e170:	14400d26 	beq	r2,r17,400e1a8 <_Unwind_SjLj_RaiseException+0x9c>
 400e174:	14c0171e 	bne	r2,r19,400e1d4 <_Unwind_SjLj_RaiseException+0xc8>
 400e178:	d8800217 	ldw	r2,8(sp)
 400e17c:	10800017 	ldw	r2,0(r2)
 400e180:	d8800215 	stw	r2,8(sp)
 400e184:	103ff01e 	bne	r2,zero,400e148 <__alt_mem_onchip_memory2_0+0xfc00cec8>
 400e188:	00800144 	movi	r2,5
 400e18c:	dfc00717 	ldw	ra,28(sp)
 400e190:	dcc00617 	ldw	r19,24(sp)
 400e194:	dc800517 	ldw	r18,20(sp)
 400e198:	dc400417 	ldw	r17,16(sp)
 400e19c:	dc000317 	ldw	r16,12(sp)
 400e1a0:	dec00804 	addi	sp,sp,32
 400e1a4:	f800283a 	ret
 400e1a8:	d8800217 	ldw	r2,8(sp)
 400e1ac:	80000315 	stw	zero,12(r16)
 400e1b0:	d9400204 	addi	r5,sp,8
 400e1b4:	80800415 	stw	r2,16(r16)
 400e1b8:	8009883a 	mov	r4,r16
 400e1bc:	dc800215 	stw	r18,8(sp)
 400e1c0:	400df340 	call	400df34 <_Unwind_RaiseException_Phase2>
 400e1c4:	00c001c4 	movi	r3,7
 400e1c8:	10fff01e 	bne	r2,r3,400e18c <__alt_mem_onchip_memory2_0+0xfc00cf0c>
 400e1cc:	d9000204 	addi	r4,sp,8
 400e1d0:	400dff40 	call	400dff4 <uw_install_context.isra.1>
 400e1d4:	008000c4 	movi	r2,3
 400e1d8:	003fec06 	br	400e18c <__alt_mem_onchip_memory2_0+0xfc00cf0c>

0400e1dc <_Unwind_SjLj_ForcedUnwind>:
 400e1dc:	00c100f4 	movhi	r3,1027
 400e1e0:	18f5ee04 	addi	r3,r3,-10312
 400e1e4:	defffe04 	addi	sp,sp,-8
 400e1e8:	18c00017 	ldw	r3,0(r3)
 400e1ec:	dfc00115 	stw	ra,4(sp)
 400e1f0:	21400315 	stw	r5,12(r4)
 400e1f4:	21800415 	stw	r6,16(r4)
 400e1f8:	d80b883a 	mov	r5,sp
 400e1fc:	d8c00015 	stw	r3,0(sp)
 400e200:	400de1c0 	call	400de1c <_Unwind_ForcedUnwind_Phase2>
 400e204:	00c001c4 	movi	r3,7
 400e208:	10c00326 	beq	r2,r3,400e218 <_Unwind_SjLj_ForcedUnwind+0x3c>
 400e20c:	dfc00117 	ldw	ra,4(sp)
 400e210:	dec00204 	addi	sp,sp,8
 400e214:	f800283a 	ret
 400e218:	d809883a 	mov	r4,sp
 400e21c:	400dff40 	call	400dff4 <uw_install_context.isra.1>

0400e220 <_Unwind_SjLj_Resume>:
 400e220:	00c100f4 	movhi	r3,1027
 400e224:	18f5ee04 	addi	r3,r3,-10312
 400e228:	18c00017 	ldw	r3,0(r3)
 400e22c:	20800317 	ldw	r2,12(r4)
 400e230:	defffe04 	addi	sp,sp,-8
 400e234:	dfc00115 	stw	ra,4(sp)
 400e238:	d8c00015 	stw	r3,0(sp)
 400e23c:	d80b883a 	mov	r5,sp
 400e240:	1000041e 	bne	r2,zero,400e254 <_Unwind_SjLj_Resume+0x34>
 400e244:	400df340 	call	400df34 <_Unwind_RaiseException_Phase2>
 400e248:	00c001c4 	movi	r3,7
 400e24c:	10c00326 	beq	r2,r3,400e25c <_Unwind_SjLj_Resume+0x3c>
 400e250:	400e3a00 	call	400e3a0 <abort>
 400e254:	400de1c0 	call	400de1c <_Unwind_ForcedUnwind_Phase2>
 400e258:	003ffb06 	br	400e248 <__alt_mem_onchip_memory2_0+0xfc00cfc8>
 400e25c:	d809883a 	mov	r4,sp
 400e260:	400dff40 	call	400dff4 <uw_install_context.isra.1>

0400e264 <_Unwind_SjLj_Resume_or_Rethrow>:
 400e264:	20800317 	ldw	r2,12(r4)
 400e268:	defffe04 	addi	sp,sp,-8
 400e26c:	dfc00115 	stw	ra,4(sp)
 400e270:	1000041e 	bne	r2,zero,400e284 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
 400e274:	400e10c0 	call	400e10c <_Unwind_SjLj_RaiseException>
 400e278:	dfc00117 	ldw	ra,4(sp)
 400e27c:	dec00204 	addi	sp,sp,8
 400e280:	f800283a 	ret
 400e284:	008100f4 	movhi	r2,1027
 400e288:	10b5ee04 	addi	r2,r2,-10312
 400e28c:	10800017 	ldw	r2,0(r2)
 400e290:	d80b883a 	mov	r5,sp
 400e294:	d8800015 	stw	r2,0(sp)
 400e298:	400de1c0 	call	400de1c <_Unwind_ForcedUnwind_Phase2>
 400e29c:	00c001c4 	movi	r3,7
 400e2a0:	10c00126 	beq	r2,r3,400e2a8 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
 400e2a4:	400e3a00 	call	400e3a0 <abort>
 400e2a8:	d809883a 	mov	r4,sp
 400e2ac:	400dff40 	call	400dff4 <uw_install_context.isra.1>

0400e2b0 <_Unwind_DeleteException>:
 400e2b0:	20800217 	ldw	r2,8(r4)
 400e2b4:	10000326 	beq	r2,zero,400e2c4 <_Unwind_DeleteException+0x14>
 400e2b8:	200b883a 	mov	r5,r4
 400e2bc:	01000044 	movi	r4,1
 400e2c0:	1000683a 	jmp	r2
 400e2c4:	f800283a 	ret

0400e2c8 <_Unwind_Backtrace>:
 400e2c8:	008100f4 	movhi	r2,1027
 400e2cc:	10b5ee04 	addi	r2,r2,-10312
 400e2d0:	10800017 	ldw	r2,0(r2)
 400e2d4:	defffc04 	addi	sp,sp,-16
 400e2d8:	dc400215 	stw	r17,8(sp)
 400e2dc:	dc000115 	stw	r16,4(sp)
 400e2e0:	dfc00315 	stw	ra,12(sp)
 400e2e4:	2023883a 	mov	r17,r4
 400e2e8:	2821883a 	mov	r16,r5
 400e2ec:	d8800015 	stw	r2,0(sp)
 400e2f0:	00000506 	br	400e308 <_Unwind_Backtrace+0x40>
 400e2f4:	883ee83a 	callr	r17
 400e2f8:	10000e1e 	bne	r2,zero,400e334 <_Unwind_Backtrace+0x6c>
 400e2fc:	d8800017 	ldw	r2,0(sp)
 400e300:	10800017 	ldw	r2,0(r2)
 400e304:	d8800015 	stw	r2,0(sp)
 400e308:	800b883a 	mov	r5,r16
 400e30c:	d809883a 	mov	r4,sp
 400e310:	103ff81e 	bne	r2,zero,400e2f4 <__alt_mem_onchip_memory2_0+0xfc00d074>
 400e314:	883ee83a 	callr	r17
 400e318:	1000061e 	bne	r2,zero,400e334 <_Unwind_Backtrace+0x6c>
 400e31c:	00800144 	movi	r2,5
 400e320:	dfc00317 	ldw	ra,12(sp)
 400e324:	dc400217 	ldw	r17,8(sp)
 400e328:	dc000117 	ldw	r16,4(sp)
 400e32c:	dec00404 	addi	sp,sp,16
 400e330:	f800283a 	ret
 400e334:	008000c4 	movi	r2,3
 400e338:	003ff906 	br	400e320 <__alt_mem_onchip_memory2_0+0xfc00d0a0>

0400e33c <__clzsi2>:
 400e33c:	00bfffd4 	movui	r2,65535
 400e340:	11000536 	bltu	r2,r4,400e358 <__clzsi2+0x1c>
 400e344:	00803fc4 	movi	r2,255
 400e348:	11000f36 	bltu	r2,r4,400e388 <__clzsi2+0x4c>
 400e34c:	00800804 	movi	r2,32
 400e350:	0007883a 	mov	r3,zero
 400e354:	00000506 	br	400e36c <__clzsi2+0x30>
 400e358:	00804034 	movhi	r2,256
 400e35c:	10bfffc4 	addi	r2,r2,-1
 400e360:	11000c2e 	bgeu	r2,r4,400e394 <__clzsi2+0x58>
 400e364:	00800204 	movi	r2,8
 400e368:	00c00604 	movi	r3,24
 400e36c:	20c8d83a 	srl	r4,r4,r3
 400e370:	00c100b4 	movhi	r3,1026
 400e374:	18dc2f04 	addi	r3,r3,28860
 400e378:	1909883a 	add	r4,r3,r4
 400e37c:	20c00003 	ldbu	r3,0(r4)
 400e380:	10c5c83a 	sub	r2,r2,r3
 400e384:	f800283a 	ret
 400e388:	00800604 	movi	r2,24
 400e38c:	00c00204 	movi	r3,8
 400e390:	003ff606 	br	400e36c <__alt_mem_onchip_memory2_0+0xfc00d0ec>
 400e394:	00800404 	movi	r2,16
 400e398:	1007883a 	mov	r3,r2
 400e39c:	003ff306 	br	400e36c <__alt_mem_onchip_memory2_0+0xfc00d0ec>

0400e3a0 <abort>:
 400e3a0:	deffff04 	addi	sp,sp,-4
 400e3a4:	01000184 	movi	r4,6
 400e3a8:	dfc00015 	stw	ra,0(sp)
 400e3ac:	400f2b00 	call	400f2b0 <raise>
 400e3b0:	01000044 	movi	r4,1
 400e3b4:	401b7000 	call	401b700 <_exit>

0400e3b8 <clock>:
 400e3b8:	008100f4 	movhi	r2,1027
 400e3bc:	10a96004 	addi	r2,r2,-23168
 400e3c0:	11000017 	ldw	r4,0(r2)
 400e3c4:	defffb04 	addi	sp,sp,-20
 400e3c8:	d80b883a 	mov	r5,sp
 400e3cc:	dfc00415 	stw	ra,16(sp)
 400e3d0:	400f4d40 	call	400f4d4 <_times_r>
 400e3d4:	00ffffc4 	movi	r3,-1
 400e3d8:	10c00726 	beq	r2,r3,400e3f8 <clock+0x40>
 400e3dc:	d8c00017 	ldw	r3,0(sp)
 400e3e0:	d8800117 	ldw	r2,4(sp)
 400e3e4:	1885883a 	add	r2,r3,r2
 400e3e8:	d8c00217 	ldw	r3,8(sp)
 400e3ec:	10c7883a 	add	r3,r2,r3
 400e3f0:	d8800317 	ldw	r2,12(sp)
 400e3f4:	1885883a 	add	r2,r3,r2
 400e3f8:	dfc00417 	ldw	ra,16(sp)
 400e3fc:	dec00504 	addi	sp,sp,20
 400e400:	f800283a 	ret

0400e404 <malloc>:
 400e404:	008100f4 	movhi	r2,1027
 400e408:	10a96004 	addi	r2,r2,-23168
 400e40c:	200b883a 	mov	r5,r4
 400e410:	11000017 	ldw	r4,0(r2)
 400e414:	400e42c1 	jmpi	400e42c <_malloc_r>

0400e418 <free>:
 400e418:	008100f4 	movhi	r2,1027
 400e41c:	10a96004 	addi	r2,r2,-23168
 400e420:	200b883a 	mov	r5,r4
 400e424:	11000017 	ldw	r4,0(r2)
 400e428:	4013a101 	jmpi	4013a10 <_free_r>

0400e42c <_malloc_r>:
 400e42c:	defff504 	addi	sp,sp,-44
 400e430:	dc800315 	stw	r18,12(sp)
 400e434:	dfc00a15 	stw	ra,40(sp)
 400e438:	df000915 	stw	fp,36(sp)
 400e43c:	ddc00815 	stw	r23,32(sp)
 400e440:	dd800715 	stw	r22,28(sp)
 400e444:	dd400615 	stw	r21,24(sp)
 400e448:	dd000515 	stw	r20,20(sp)
 400e44c:	dcc00415 	stw	r19,16(sp)
 400e450:	dc400215 	stw	r17,8(sp)
 400e454:	dc000115 	stw	r16,4(sp)
 400e458:	288002c4 	addi	r2,r5,11
 400e45c:	00c00584 	movi	r3,22
 400e460:	2025883a 	mov	r18,r4
 400e464:	18807f2e 	bgeu	r3,r2,400e664 <_malloc_r+0x238>
 400e468:	047ffe04 	movi	r17,-8
 400e46c:	1462703a 	and	r17,r2,r17
 400e470:	8800a316 	blt	r17,zero,400e700 <_malloc_r+0x2d4>
 400e474:	8940a236 	bltu	r17,r5,400e700 <_malloc_r+0x2d4>
 400e478:	401bd1c0 	call	401bd1c <__malloc_lock>
 400e47c:	00807dc4 	movi	r2,503
 400e480:	1441e92e 	bgeu	r2,r17,400ec28 <_malloc_r+0x7fc>
 400e484:	8804d27a 	srli	r2,r17,9
 400e488:	1000a126 	beq	r2,zero,400e710 <_malloc_r+0x2e4>
 400e48c:	00c00104 	movi	r3,4
 400e490:	18811e36 	bltu	r3,r2,400e90c <_malloc_r+0x4e0>
 400e494:	8804d1ba 	srli	r2,r17,6
 400e498:	12000e44 	addi	r8,r2,57
 400e49c:	11c00e04 	addi	r7,r2,56
 400e4a0:	4209883a 	add	r4,r8,r8
 400e4a4:	04c100b4 	movhi	r19,1026
 400e4a8:	2109883a 	add	r4,r4,r4
 400e4ac:	9cde0304 	addi	r19,r19,30732
 400e4b0:	2109883a 	add	r4,r4,r4
 400e4b4:	9909883a 	add	r4,r19,r4
 400e4b8:	24000117 	ldw	r16,4(r4)
 400e4bc:	213ffe04 	addi	r4,r4,-8
 400e4c0:	24009726 	beq	r4,r16,400e720 <_malloc_r+0x2f4>
 400e4c4:	80800117 	ldw	r2,4(r16)
 400e4c8:	01bfff04 	movi	r6,-4
 400e4cc:	014003c4 	movi	r5,15
 400e4d0:	1184703a 	and	r2,r2,r6
 400e4d4:	1447c83a 	sub	r3,r2,r17
 400e4d8:	28c00716 	blt	r5,r3,400e4f8 <_malloc_r+0xcc>
 400e4dc:	1800920e 	bge	r3,zero,400e728 <_malloc_r+0x2fc>
 400e4e0:	84000317 	ldw	r16,12(r16)
 400e4e4:	24008e26 	beq	r4,r16,400e720 <_malloc_r+0x2f4>
 400e4e8:	80800117 	ldw	r2,4(r16)
 400e4ec:	1184703a 	and	r2,r2,r6
 400e4f0:	1447c83a 	sub	r3,r2,r17
 400e4f4:	28fff90e 	bge	r5,r3,400e4dc <__alt_mem_onchip_memory2_0+0xfc00d25c>
 400e4f8:	3809883a 	mov	r4,r7
 400e4fc:	018100b4 	movhi	r6,1026
 400e500:	9c000417 	ldw	r16,16(r19)
 400e504:	319e0304 	addi	r6,r6,30732
 400e508:	32000204 	addi	r8,r6,8
 400e50c:	82013426 	beq	r16,r8,400e9e0 <_malloc_r+0x5b4>
 400e510:	80c00117 	ldw	r3,4(r16)
 400e514:	00bfff04 	movi	r2,-4
 400e518:	188e703a 	and	r7,r3,r2
 400e51c:	3c45c83a 	sub	r2,r7,r17
 400e520:	00c003c4 	movi	r3,15
 400e524:	18811f16 	blt	r3,r2,400e9a4 <_malloc_r+0x578>
 400e528:	32000515 	stw	r8,20(r6)
 400e52c:	32000415 	stw	r8,16(r6)
 400e530:	10007f0e 	bge	r2,zero,400e730 <_malloc_r+0x304>
 400e534:	00807fc4 	movi	r2,511
 400e538:	11c0fd36 	bltu	r2,r7,400e930 <_malloc_r+0x504>
 400e53c:	3806d0fa 	srli	r3,r7,3
 400e540:	01c00044 	movi	r7,1
 400e544:	30800117 	ldw	r2,4(r6)
 400e548:	19400044 	addi	r5,r3,1
 400e54c:	294b883a 	add	r5,r5,r5
 400e550:	1807d0ba 	srai	r3,r3,2
 400e554:	294b883a 	add	r5,r5,r5
 400e558:	294b883a 	add	r5,r5,r5
 400e55c:	298b883a 	add	r5,r5,r6
 400e560:	38c6983a 	sll	r3,r7,r3
 400e564:	29c00017 	ldw	r7,0(r5)
 400e568:	2a7ffe04 	addi	r9,r5,-8
 400e56c:	1886b03a 	or	r3,r3,r2
 400e570:	82400315 	stw	r9,12(r16)
 400e574:	81c00215 	stw	r7,8(r16)
 400e578:	30c00115 	stw	r3,4(r6)
 400e57c:	2c000015 	stw	r16,0(r5)
 400e580:	3c000315 	stw	r16,12(r7)
 400e584:	2005d0ba 	srai	r2,r4,2
 400e588:	01400044 	movi	r5,1
 400e58c:	288a983a 	sll	r5,r5,r2
 400e590:	19406f36 	bltu	r3,r5,400e750 <_malloc_r+0x324>
 400e594:	28c4703a 	and	r2,r5,r3
 400e598:	10000a1e 	bne	r2,zero,400e5c4 <_malloc_r+0x198>
 400e59c:	00bfff04 	movi	r2,-4
 400e5a0:	294b883a 	add	r5,r5,r5
 400e5a4:	2088703a 	and	r4,r4,r2
 400e5a8:	28c4703a 	and	r2,r5,r3
 400e5ac:	21000104 	addi	r4,r4,4
 400e5b0:	1000041e 	bne	r2,zero,400e5c4 <_malloc_r+0x198>
 400e5b4:	294b883a 	add	r5,r5,r5
 400e5b8:	28c4703a 	and	r2,r5,r3
 400e5bc:	21000104 	addi	r4,r4,4
 400e5c0:	103ffc26 	beq	r2,zero,400e5b4 <__alt_mem_onchip_memory2_0+0xfc00d334>
 400e5c4:	02bfff04 	movi	r10,-4
 400e5c8:	024003c4 	movi	r9,15
 400e5cc:	21800044 	addi	r6,r4,1
 400e5d0:	318d883a 	add	r6,r6,r6
 400e5d4:	318d883a 	add	r6,r6,r6
 400e5d8:	318d883a 	add	r6,r6,r6
 400e5dc:	998d883a 	add	r6,r19,r6
 400e5e0:	333ffe04 	addi	r12,r6,-8
 400e5e4:	2017883a 	mov	r11,r4
 400e5e8:	31800104 	addi	r6,r6,4
 400e5ec:	34000017 	ldw	r16,0(r6)
 400e5f0:	31fffd04 	addi	r7,r6,-12
 400e5f4:	81c0041e 	bne	r16,r7,400e608 <_malloc_r+0x1dc>
 400e5f8:	0000fb06 	br	400e9e8 <_malloc_r+0x5bc>
 400e5fc:	1801030e 	bge	r3,zero,400ea0c <_malloc_r+0x5e0>
 400e600:	84000317 	ldw	r16,12(r16)
 400e604:	81c0f826 	beq	r16,r7,400e9e8 <_malloc_r+0x5bc>
 400e608:	80800117 	ldw	r2,4(r16)
 400e60c:	1284703a 	and	r2,r2,r10
 400e610:	1447c83a 	sub	r3,r2,r17
 400e614:	48fff90e 	bge	r9,r3,400e5fc <__alt_mem_onchip_memory2_0+0xfc00d37c>
 400e618:	80800317 	ldw	r2,12(r16)
 400e61c:	81000217 	ldw	r4,8(r16)
 400e620:	89400054 	ori	r5,r17,1
 400e624:	81400115 	stw	r5,4(r16)
 400e628:	20800315 	stw	r2,12(r4)
 400e62c:	11000215 	stw	r4,8(r2)
 400e630:	8463883a 	add	r17,r16,r17
 400e634:	9c400515 	stw	r17,20(r19)
 400e638:	9c400415 	stw	r17,16(r19)
 400e63c:	18800054 	ori	r2,r3,1
 400e640:	88800115 	stw	r2,4(r17)
 400e644:	8a000315 	stw	r8,12(r17)
 400e648:	8a000215 	stw	r8,8(r17)
 400e64c:	88e3883a 	add	r17,r17,r3
 400e650:	88c00015 	stw	r3,0(r17)
 400e654:	9009883a 	mov	r4,r18
 400e658:	401bd400 	call	401bd40 <__malloc_unlock>
 400e65c:	80800204 	addi	r2,r16,8
 400e660:	00001b06 	br	400e6d0 <_malloc_r+0x2a4>
 400e664:	04400404 	movi	r17,16
 400e668:	89402536 	bltu	r17,r5,400e700 <_malloc_r+0x2d4>
 400e66c:	401bd1c0 	call	401bd1c <__malloc_lock>
 400e670:	00800184 	movi	r2,6
 400e674:	01000084 	movi	r4,2
 400e678:	04c100b4 	movhi	r19,1026
 400e67c:	1085883a 	add	r2,r2,r2
 400e680:	9cde0304 	addi	r19,r19,30732
 400e684:	1085883a 	add	r2,r2,r2
 400e688:	9885883a 	add	r2,r19,r2
 400e68c:	14000117 	ldw	r16,4(r2)
 400e690:	10fffe04 	addi	r3,r2,-8
 400e694:	80c0d926 	beq	r16,r3,400e9fc <_malloc_r+0x5d0>
 400e698:	80c00117 	ldw	r3,4(r16)
 400e69c:	81000317 	ldw	r4,12(r16)
 400e6a0:	00bfff04 	movi	r2,-4
 400e6a4:	1884703a 	and	r2,r3,r2
 400e6a8:	81400217 	ldw	r5,8(r16)
 400e6ac:	8085883a 	add	r2,r16,r2
 400e6b0:	10c00117 	ldw	r3,4(r2)
 400e6b4:	29000315 	stw	r4,12(r5)
 400e6b8:	21400215 	stw	r5,8(r4)
 400e6bc:	18c00054 	ori	r3,r3,1
 400e6c0:	10c00115 	stw	r3,4(r2)
 400e6c4:	9009883a 	mov	r4,r18
 400e6c8:	401bd400 	call	401bd40 <__malloc_unlock>
 400e6cc:	80800204 	addi	r2,r16,8
 400e6d0:	dfc00a17 	ldw	ra,40(sp)
 400e6d4:	df000917 	ldw	fp,36(sp)
 400e6d8:	ddc00817 	ldw	r23,32(sp)
 400e6dc:	dd800717 	ldw	r22,28(sp)
 400e6e0:	dd400617 	ldw	r21,24(sp)
 400e6e4:	dd000517 	ldw	r20,20(sp)
 400e6e8:	dcc00417 	ldw	r19,16(sp)
 400e6ec:	dc800317 	ldw	r18,12(sp)
 400e6f0:	dc400217 	ldw	r17,8(sp)
 400e6f4:	dc000117 	ldw	r16,4(sp)
 400e6f8:	dec00b04 	addi	sp,sp,44
 400e6fc:	f800283a 	ret
 400e700:	00800304 	movi	r2,12
 400e704:	90800015 	stw	r2,0(r18)
 400e708:	0005883a 	mov	r2,zero
 400e70c:	003ff006 	br	400e6d0 <__alt_mem_onchip_memory2_0+0xfc00d450>
 400e710:	01002004 	movi	r4,128
 400e714:	02001004 	movi	r8,64
 400e718:	01c00fc4 	movi	r7,63
 400e71c:	003f6106 	br	400e4a4 <__alt_mem_onchip_memory2_0+0xfc00d224>
 400e720:	4009883a 	mov	r4,r8
 400e724:	003f7506 	br	400e4fc <__alt_mem_onchip_memory2_0+0xfc00d27c>
 400e728:	81000317 	ldw	r4,12(r16)
 400e72c:	003fde06 	br	400e6a8 <__alt_mem_onchip_memory2_0+0xfc00d428>
 400e730:	81c5883a 	add	r2,r16,r7
 400e734:	11400117 	ldw	r5,4(r2)
 400e738:	9009883a 	mov	r4,r18
 400e73c:	29400054 	ori	r5,r5,1
 400e740:	11400115 	stw	r5,4(r2)
 400e744:	401bd400 	call	401bd40 <__malloc_unlock>
 400e748:	80800204 	addi	r2,r16,8
 400e74c:	003fe006 	br	400e6d0 <__alt_mem_onchip_memory2_0+0xfc00d450>
 400e750:	9c000217 	ldw	r16,8(r19)
 400e754:	00bfff04 	movi	r2,-4
 400e758:	85800117 	ldw	r22,4(r16)
 400e75c:	b0ac703a 	and	r22,r22,r2
 400e760:	b4400336 	bltu	r22,r17,400e770 <_malloc_r+0x344>
 400e764:	b445c83a 	sub	r2,r22,r17
 400e768:	00c003c4 	movi	r3,15
 400e76c:	18805d16 	blt	r3,r2,400e8e4 <_malloc_r+0x4b8>
 400e770:	05c100f4 	movhi	r23,1027
 400e774:	008100f4 	movhi	r2,1027
 400e778:	10b5f104 	addi	r2,r2,-10300
 400e77c:	bde96104 	addi	r23,r23,-23164
 400e780:	15400017 	ldw	r21,0(r2)
 400e784:	b8c00017 	ldw	r3,0(r23)
 400e788:	00bfffc4 	movi	r2,-1
 400e78c:	858d883a 	add	r6,r16,r22
 400e790:	8d6b883a 	add	r21,r17,r21
 400e794:	1880ea26 	beq	r3,r2,400eb40 <_malloc_r+0x714>
 400e798:	ad4403c4 	addi	r21,r21,4111
 400e79c:	00bc0004 	movi	r2,-4096
 400e7a0:	a8aa703a 	and	r21,r21,r2
 400e7a4:	a80b883a 	mov	r5,r21
 400e7a8:	9009883a 	mov	r4,r18
 400e7ac:	d9800015 	stw	r6,0(sp)
 400e7b0:	400f0080 	call	400f008 <_sbrk_r>
 400e7b4:	1029883a 	mov	r20,r2
 400e7b8:	00bfffc4 	movi	r2,-1
 400e7bc:	d9800017 	ldw	r6,0(sp)
 400e7c0:	a080e826 	beq	r20,r2,400eb64 <_malloc_r+0x738>
 400e7c4:	a180a636 	bltu	r20,r6,400ea60 <_malloc_r+0x634>
 400e7c8:	070100f4 	movhi	fp,1027
 400e7cc:	e7363504 	addi	fp,fp,-10028
 400e7d0:	e0800017 	ldw	r2,0(fp)
 400e7d4:	a887883a 	add	r3,r21,r2
 400e7d8:	e0c00015 	stw	r3,0(fp)
 400e7dc:	3500e626 	beq	r6,r20,400eb78 <_malloc_r+0x74c>
 400e7e0:	b9000017 	ldw	r4,0(r23)
 400e7e4:	00bfffc4 	movi	r2,-1
 400e7e8:	2080ee26 	beq	r4,r2,400eba4 <_malloc_r+0x778>
 400e7ec:	a185c83a 	sub	r2,r20,r6
 400e7f0:	10c5883a 	add	r2,r2,r3
 400e7f4:	e0800015 	stw	r2,0(fp)
 400e7f8:	a0c001cc 	andi	r3,r20,7
 400e7fc:	1800bc26 	beq	r3,zero,400eaf0 <_malloc_r+0x6c4>
 400e800:	a0e9c83a 	sub	r20,r20,r3
 400e804:	00840204 	movi	r2,4104
 400e808:	a5000204 	addi	r20,r20,8
 400e80c:	10c7c83a 	sub	r3,r2,r3
 400e810:	a545883a 	add	r2,r20,r21
 400e814:	1083ffcc 	andi	r2,r2,4095
 400e818:	18abc83a 	sub	r21,r3,r2
 400e81c:	a80b883a 	mov	r5,r21
 400e820:	9009883a 	mov	r4,r18
 400e824:	400f0080 	call	400f008 <_sbrk_r>
 400e828:	00ffffc4 	movi	r3,-1
 400e82c:	10c0e126 	beq	r2,r3,400ebb4 <_malloc_r+0x788>
 400e830:	1505c83a 	sub	r2,r2,r20
 400e834:	1545883a 	add	r2,r2,r21
 400e838:	10800054 	ori	r2,r2,1
 400e83c:	e0c00017 	ldw	r3,0(fp)
 400e840:	9d000215 	stw	r20,8(r19)
 400e844:	a0800115 	stw	r2,4(r20)
 400e848:	a8c7883a 	add	r3,r21,r3
 400e84c:	e0c00015 	stw	r3,0(fp)
 400e850:	84c00e26 	beq	r16,r19,400e88c <_malloc_r+0x460>
 400e854:	018003c4 	movi	r6,15
 400e858:	3580a72e 	bgeu	r6,r22,400eaf8 <_malloc_r+0x6cc>
 400e85c:	81400117 	ldw	r5,4(r16)
 400e860:	013ffe04 	movi	r4,-8
 400e864:	b0bffd04 	addi	r2,r22,-12
 400e868:	1104703a 	and	r2,r2,r4
 400e86c:	2900004c 	andi	r4,r5,1
 400e870:	2088b03a 	or	r4,r4,r2
 400e874:	81000115 	stw	r4,4(r16)
 400e878:	01400144 	movi	r5,5
 400e87c:	8089883a 	add	r4,r16,r2
 400e880:	21400115 	stw	r5,4(r4)
 400e884:	21400215 	stw	r5,8(r4)
 400e888:	3080cd36 	bltu	r6,r2,400ebc0 <_malloc_r+0x794>
 400e88c:	008100f4 	movhi	r2,1027
 400e890:	10b5f004 	addi	r2,r2,-10304
 400e894:	11000017 	ldw	r4,0(r2)
 400e898:	20c0012e 	bgeu	r4,r3,400e8a0 <_malloc_r+0x474>
 400e89c:	10c00015 	stw	r3,0(r2)
 400e8a0:	008100f4 	movhi	r2,1027
 400e8a4:	10b5ef04 	addi	r2,r2,-10308
 400e8a8:	11000017 	ldw	r4,0(r2)
 400e8ac:	9c000217 	ldw	r16,8(r19)
 400e8b0:	20c0012e 	bgeu	r4,r3,400e8b8 <_malloc_r+0x48c>
 400e8b4:	10c00015 	stw	r3,0(r2)
 400e8b8:	80c00117 	ldw	r3,4(r16)
 400e8bc:	00bfff04 	movi	r2,-4
 400e8c0:	1886703a 	and	r3,r3,r2
 400e8c4:	1c45c83a 	sub	r2,r3,r17
 400e8c8:	1c400236 	bltu	r3,r17,400e8d4 <_malloc_r+0x4a8>
 400e8cc:	00c003c4 	movi	r3,15
 400e8d0:	18800416 	blt	r3,r2,400e8e4 <_malloc_r+0x4b8>
 400e8d4:	9009883a 	mov	r4,r18
 400e8d8:	401bd400 	call	401bd40 <__malloc_unlock>
 400e8dc:	0005883a 	mov	r2,zero
 400e8e0:	003f7b06 	br	400e6d0 <__alt_mem_onchip_memory2_0+0xfc00d450>
 400e8e4:	88c00054 	ori	r3,r17,1
 400e8e8:	80c00115 	stw	r3,4(r16)
 400e8ec:	8463883a 	add	r17,r16,r17
 400e8f0:	10800054 	ori	r2,r2,1
 400e8f4:	9c400215 	stw	r17,8(r19)
 400e8f8:	88800115 	stw	r2,4(r17)
 400e8fc:	9009883a 	mov	r4,r18
 400e900:	401bd400 	call	401bd40 <__malloc_unlock>
 400e904:	80800204 	addi	r2,r16,8
 400e908:	003f7106 	br	400e6d0 <__alt_mem_onchip_memory2_0+0xfc00d450>
 400e90c:	00c00504 	movi	r3,20
 400e910:	18804a2e 	bgeu	r3,r2,400ea3c <_malloc_r+0x610>
 400e914:	00c01504 	movi	r3,84
 400e918:	18806e36 	bltu	r3,r2,400ead4 <_malloc_r+0x6a8>
 400e91c:	8804d33a 	srli	r2,r17,12
 400e920:	12001bc4 	addi	r8,r2,111
 400e924:	11c01b84 	addi	r7,r2,110
 400e928:	4209883a 	add	r4,r8,r8
 400e92c:	003edd06 	br	400e4a4 <__alt_mem_onchip_memory2_0+0xfc00d224>
 400e930:	3804d27a 	srli	r2,r7,9
 400e934:	00c00104 	movi	r3,4
 400e938:	1880442e 	bgeu	r3,r2,400ea4c <_malloc_r+0x620>
 400e93c:	00c00504 	movi	r3,20
 400e940:	18808136 	bltu	r3,r2,400eb48 <_malloc_r+0x71c>
 400e944:	11401704 	addi	r5,r2,92
 400e948:	10c016c4 	addi	r3,r2,91
 400e94c:	294b883a 	add	r5,r5,r5
 400e950:	294b883a 	add	r5,r5,r5
 400e954:	294b883a 	add	r5,r5,r5
 400e958:	994b883a 	add	r5,r19,r5
 400e95c:	28800017 	ldw	r2,0(r5)
 400e960:	018100b4 	movhi	r6,1026
 400e964:	297ffe04 	addi	r5,r5,-8
 400e968:	319e0304 	addi	r6,r6,30732
 400e96c:	28806526 	beq	r5,r2,400eb04 <_malloc_r+0x6d8>
 400e970:	01bfff04 	movi	r6,-4
 400e974:	10c00117 	ldw	r3,4(r2)
 400e978:	1986703a 	and	r3,r3,r6
 400e97c:	38c0022e 	bgeu	r7,r3,400e988 <_malloc_r+0x55c>
 400e980:	10800217 	ldw	r2,8(r2)
 400e984:	28bffb1e 	bne	r5,r2,400e974 <__alt_mem_onchip_memory2_0+0xfc00d6f4>
 400e988:	11400317 	ldw	r5,12(r2)
 400e98c:	98c00117 	ldw	r3,4(r19)
 400e990:	81400315 	stw	r5,12(r16)
 400e994:	80800215 	stw	r2,8(r16)
 400e998:	2c000215 	stw	r16,8(r5)
 400e99c:	14000315 	stw	r16,12(r2)
 400e9a0:	003ef806 	br	400e584 <__alt_mem_onchip_memory2_0+0xfc00d304>
 400e9a4:	88c00054 	ori	r3,r17,1
 400e9a8:	80c00115 	stw	r3,4(r16)
 400e9ac:	8463883a 	add	r17,r16,r17
 400e9b0:	34400515 	stw	r17,20(r6)
 400e9b4:	34400415 	stw	r17,16(r6)
 400e9b8:	10c00054 	ori	r3,r2,1
 400e9bc:	8a000315 	stw	r8,12(r17)
 400e9c0:	8a000215 	stw	r8,8(r17)
 400e9c4:	88c00115 	stw	r3,4(r17)
 400e9c8:	88a3883a 	add	r17,r17,r2
 400e9cc:	88800015 	stw	r2,0(r17)
 400e9d0:	9009883a 	mov	r4,r18
 400e9d4:	401bd400 	call	401bd40 <__malloc_unlock>
 400e9d8:	80800204 	addi	r2,r16,8
 400e9dc:	003f3c06 	br	400e6d0 <__alt_mem_onchip_memory2_0+0xfc00d450>
 400e9e0:	30c00117 	ldw	r3,4(r6)
 400e9e4:	003ee706 	br	400e584 <__alt_mem_onchip_memory2_0+0xfc00d304>
 400e9e8:	5ac00044 	addi	r11,r11,1
 400e9ec:	588000cc 	andi	r2,r11,3
 400e9f0:	31800204 	addi	r6,r6,8
 400e9f4:	103efd1e 	bne	r2,zero,400e5ec <__alt_mem_onchip_memory2_0+0xfc00d36c>
 400e9f8:	00002406 	br	400ea8c <_malloc_r+0x660>
 400e9fc:	14000317 	ldw	r16,12(r2)
 400ea00:	143f251e 	bne	r2,r16,400e698 <__alt_mem_onchip_memory2_0+0xfc00d418>
 400ea04:	21000084 	addi	r4,r4,2
 400ea08:	003ebc06 	br	400e4fc <__alt_mem_onchip_memory2_0+0xfc00d27c>
 400ea0c:	8085883a 	add	r2,r16,r2
 400ea10:	10c00117 	ldw	r3,4(r2)
 400ea14:	81000317 	ldw	r4,12(r16)
 400ea18:	81400217 	ldw	r5,8(r16)
 400ea1c:	18c00054 	ori	r3,r3,1
 400ea20:	10c00115 	stw	r3,4(r2)
 400ea24:	29000315 	stw	r4,12(r5)
 400ea28:	21400215 	stw	r5,8(r4)
 400ea2c:	9009883a 	mov	r4,r18
 400ea30:	401bd400 	call	401bd40 <__malloc_unlock>
 400ea34:	80800204 	addi	r2,r16,8
 400ea38:	003f2506 	br	400e6d0 <__alt_mem_onchip_memory2_0+0xfc00d450>
 400ea3c:	12001704 	addi	r8,r2,92
 400ea40:	11c016c4 	addi	r7,r2,91
 400ea44:	4209883a 	add	r4,r8,r8
 400ea48:	003e9606 	br	400e4a4 <__alt_mem_onchip_memory2_0+0xfc00d224>
 400ea4c:	3804d1ba 	srli	r2,r7,6
 400ea50:	11400e44 	addi	r5,r2,57
 400ea54:	10c00e04 	addi	r3,r2,56
 400ea58:	294b883a 	add	r5,r5,r5
 400ea5c:	003fbc06 	br	400e950 <__alt_mem_onchip_memory2_0+0xfc00d6d0>
 400ea60:	84ff5926 	beq	r16,r19,400e7c8 <__alt_mem_onchip_memory2_0+0xfc00d548>
 400ea64:	008100b4 	movhi	r2,1026
 400ea68:	109e0304 	addi	r2,r2,30732
 400ea6c:	14000217 	ldw	r16,8(r2)
 400ea70:	00bfff04 	movi	r2,-4
 400ea74:	80c00117 	ldw	r3,4(r16)
 400ea78:	1886703a 	and	r3,r3,r2
 400ea7c:	003f9106 	br	400e8c4 <__alt_mem_onchip_memory2_0+0xfc00d644>
 400ea80:	60800217 	ldw	r2,8(r12)
 400ea84:	213fffc4 	addi	r4,r4,-1
 400ea88:	1300651e 	bne	r2,r12,400ec20 <_malloc_r+0x7f4>
 400ea8c:	208000cc 	andi	r2,r4,3
 400ea90:	633ffe04 	addi	r12,r12,-8
 400ea94:	103ffa1e 	bne	r2,zero,400ea80 <__alt_mem_onchip_memory2_0+0xfc00d800>
 400ea98:	98800117 	ldw	r2,4(r19)
 400ea9c:	0146303a 	nor	r3,zero,r5
 400eaa0:	1884703a 	and	r2,r3,r2
 400eaa4:	98800115 	stw	r2,4(r19)
 400eaa8:	294b883a 	add	r5,r5,r5
 400eaac:	117f2836 	bltu	r2,r5,400e750 <__alt_mem_onchip_memory2_0+0xfc00d4d0>
 400eab0:	283f2726 	beq	r5,zero,400e750 <__alt_mem_onchip_memory2_0+0xfc00d4d0>
 400eab4:	2886703a 	and	r3,r5,r2
 400eab8:	5809883a 	mov	r4,r11
 400eabc:	183ec31e 	bne	r3,zero,400e5cc <__alt_mem_onchip_memory2_0+0xfc00d34c>
 400eac0:	294b883a 	add	r5,r5,r5
 400eac4:	2886703a 	and	r3,r5,r2
 400eac8:	21000104 	addi	r4,r4,4
 400eacc:	183ffc26 	beq	r3,zero,400eac0 <__alt_mem_onchip_memory2_0+0xfc00d840>
 400ead0:	003ebe06 	br	400e5cc <__alt_mem_onchip_memory2_0+0xfc00d34c>
 400ead4:	00c05504 	movi	r3,340
 400ead8:	18801236 	bltu	r3,r2,400eb24 <_malloc_r+0x6f8>
 400eadc:	8804d3fa 	srli	r2,r17,15
 400eae0:	12001e04 	addi	r8,r2,120
 400eae4:	11c01dc4 	addi	r7,r2,119
 400eae8:	4209883a 	add	r4,r8,r8
 400eaec:	003e6d06 	br	400e4a4 <__alt_mem_onchip_memory2_0+0xfc00d224>
 400eaf0:	00c40004 	movi	r3,4096
 400eaf4:	003f4606 	br	400e810 <__alt_mem_onchip_memory2_0+0xfc00d590>
 400eaf8:	00800044 	movi	r2,1
 400eafc:	a0800115 	stw	r2,4(r20)
 400eb00:	003f7406 	br	400e8d4 <__alt_mem_onchip_memory2_0+0xfc00d654>
 400eb04:	1805d0ba 	srai	r2,r3,2
 400eb08:	01c00044 	movi	r7,1
 400eb0c:	30c00117 	ldw	r3,4(r6)
 400eb10:	388e983a 	sll	r7,r7,r2
 400eb14:	2805883a 	mov	r2,r5
 400eb18:	38c6b03a 	or	r3,r7,r3
 400eb1c:	30c00115 	stw	r3,4(r6)
 400eb20:	003f9b06 	br	400e990 <__alt_mem_onchip_memory2_0+0xfc00d710>
 400eb24:	00c15504 	movi	r3,1364
 400eb28:	18801a36 	bltu	r3,r2,400eb94 <_malloc_r+0x768>
 400eb2c:	8804d4ba 	srli	r2,r17,18
 400eb30:	12001f44 	addi	r8,r2,125
 400eb34:	11c01f04 	addi	r7,r2,124
 400eb38:	4209883a 	add	r4,r8,r8
 400eb3c:	003e5906 	br	400e4a4 <__alt_mem_onchip_memory2_0+0xfc00d224>
 400eb40:	ad400404 	addi	r21,r21,16
 400eb44:	003f1706 	br	400e7a4 <__alt_mem_onchip_memory2_0+0xfc00d524>
 400eb48:	00c01504 	movi	r3,84
 400eb4c:	18802336 	bltu	r3,r2,400ebdc <_malloc_r+0x7b0>
 400eb50:	3804d33a 	srli	r2,r7,12
 400eb54:	11401bc4 	addi	r5,r2,111
 400eb58:	10c01b84 	addi	r3,r2,110
 400eb5c:	294b883a 	add	r5,r5,r5
 400eb60:	003f7b06 	br	400e950 <__alt_mem_onchip_memory2_0+0xfc00d6d0>
 400eb64:	9c000217 	ldw	r16,8(r19)
 400eb68:	00bfff04 	movi	r2,-4
 400eb6c:	80c00117 	ldw	r3,4(r16)
 400eb70:	1886703a 	and	r3,r3,r2
 400eb74:	003f5306 	br	400e8c4 <__alt_mem_onchip_memory2_0+0xfc00d644>
 400eb78:	3083ffcc 	andi	r2,r6,4095
 400eb7c:	103f181e 	bne	r2,zero,400e7e0 <__alt_mem_onchip_memory2_0+0xfc00d560>
 400eb80:	99000217 	ldw	r4,8(r19)
 400eb84:	b545883a 	add	r2,r22,r21
 400eb88:	10800054 	ori	r2,r2,1
 400eb8c:	20800115 	stw	r2,4(r4)
 400eb90:	003f3e06 	br	400e88c <__alt_mem_onchip_memory2_0+0xfc00d60c>
 400eb94:	01003f84 	movi	r4,254
 400eb98:	02001fc4 	movi	r8,127
 400eb9c:	01c01f84 	movi	r7,126
 400eba0:	003e4006 	br	400e4a4 <__alt_mem_onchip_memory2_0+0xfc00d224>
 400eba4:	008100f4 	movhi	r2,1027
 400eba8:	10a96104 	addi	r2,r2,-23164
 400ebac:	15000015 	stw	r20,0(r2)
 400ebb0:	003f1106 	br	400e7f8 <__alt_mem_onchip_memory2_0+0xfc00d578>
 400ebb4:	00800044 	movi	r2,1
 400ebb8:	002b883a 	mov	r21,zero
 400ebbc:	003f1f06 	br	400e83c <__alt_mem_onchip_memory2_0+0xfc00d5bc>
 400ebc0:	81400204 	addi	r5,r16,8
 400ebc4:	9009883a 	mov	r4,r18
 400ebc8:	4013a100 	call	4013a10 <_free_r>
 400ebcc:	008100f4 	movhi	r2,1027
 400ebd0:	10b63504 	addi	r2,r2,-10028
 400ebd4:	10c00017 	ldw	r3,0(r2)
 400ebd8:	003f2c06 	br	400e88c <__alt_mem_onchip_memory2_0+0xfc00d60c>
 400ebdc:	00c05504 	movi	r3,340
 400ebe0:	18800536 	bltu	r3,r2,400ebf8 <_malloc_r+0x7cc>
 400ebe4:	3804d3fa 	srli	r2,r7,15
 400ebe8:	11401e04 	addi	r5,r2,120
 400ebec:	10c01dc4 	addi	r3,r2,119
 400ebf0:	294b883a 	add	r5,r5,r5
 400ebf4:	003f5606 	br	400e950 <__alt_mem_onchip_memory2_0+0xfc00d6d0>
 400ebf8:	00c15504 	movi	r3,1364
 400ebfc:	18800536 	bltu	r3,r2,400ec14 <_malloc_r+0x7e8>
 400ec00:	3804d4ba 	srli	r2,r7,18
 400ec04:	11401f44 	addi	r5,r2,125
 400ec08:	10c01f04 	addi	r3,r2,124
 400ec0c:	294b883a 	add	r5,r5,r5
 400ec10:	003f4f06 	br	400e950 <__alt_mem_onchip_memory2_0+0xfc00d6d0>
 400ec14:	01403f84 	movi	r5,254
 400ec18:	00c01f84 	movi	r3,126
 400ec1c:	003f4c06 	br	400e950 <__alt_mem_onchip_memory2_0+0xfc00d6d0>
 400ec20:	98800117 	ldw	r2,4(r19)
 400ec24:	003fa006 	br	400eaa8 <__alt_mem_onchip_memory2_0+0xfc00d828>
 400ec28:	8808d0fa 	srli	r4,r17,3
 400ec2c:	20800044 	addi	r2,r4,1
 400ec30:	1085883a 	add	r2,r2,r2
 400ec34:	003e9006 	br	400e678 <__alt_mem_onchip_memory2_0+0xfc00d3f8>

0400ec38 <memcpy>:
 400ec38:	defffd04 	addi	sp,sp,-12
 400ec3c:	dfc00215 	stw	ra,8(sp)
 400ec40:	dc400115 	stw	r17,4(sp)
 400ec44:	dc000015 	stw	r16,0(sp)
 400ec48:	00c003c4 	movi	r3,15
 400ec4c:	2005883a 	mov	r2,r4
 400ec50:	1980452e 	bgeu	r3,r6,400ed68 <memcpy+0x130>
 400ec54:	2906b03a 	or	r3,r5,r4
 400ec58:	18c000cc 	andi	r3,r3,3
 400ec5c:	1800441e 	bne	r3,zero,400ed70 <memcpy+0x138>
 400ec60:	347ffc04 	addi	r17,r6,-16
 400ec64:	8822d13a 	srli	r17,r17,4
 400ec68:	28c00104 	addi	r3,r5,4
 400ec6c:	23400104 	addi	r13,r4,4
 400ec70:	8820913a 	slli	r16,r17,4
 400ec74:	2b000204 	addi	r12,r5,8
 400ec78:	22c00204 	addi	r11,r4,8
 400ec7c:	84000504 	addi	r16,r16,20
 400ec80:	2a800304 	addi	r10,r5,12
 400ec84:	22400304 	addi	r9,r4,12
 400ec88:	2c21883a 	add	r16,r5,r16
 400ec8c:	2811883a 	mov	r8,r5
 400ec90:	200f883a 	mov	r7,r4
 400ec94:	41000017 	ldw	r4,0(r8)
 400ec98:	1fc00017 	ldw	ra,0(r3)
 400ec9c:	63c00017 	ldw	r15,0(r12)
 400eca0:	39000015 	stw	r4,0(r7)
 400eca4:	53800017 	ldw	r14,0(r10)
 400eca8:	6fc00015 	stw	ra,0(r13)
 400ecac:	5bc00015 	stw	r15,0(r11)
 400ecb0:	4b800015 	stw	r14,0(r9)
 400ecb4:	18c00404 	addi	r3,r3,16
 400ecb8:	39c00404 	addi	r7,r7,16
 400ecbc:	42000404 	addi	r8,r8,16
 400ecc0:	6b400404 	addi	r13,r13,16
 400ecc4:	63000404 	addi	r12,r12,16
 400ecc8:	5ac00404 	addi	r11,r11,16
 400eccc:	52800404 	addi	r10,r10,16
 400ecd0:	4a400404 	addi	r9,r9,16
 400ecd4:	1c3fef1e 	bne	r3,r16,400ec94 <__alt_mem_onchip_memory2_0+0xfc00da14>
 400ecd8:	89c00044 	addi	r7,r17,1
 400ecdc:	380e913a 	slli	r7,r7,4
 400ece0:	310003cc 	andi	r4,r6,15
 400ece4:	02c000c4 	movi	r11,3
 400ece8:	11c7883a 	add	r3,r2,r7
 400ecec:	29cb883a 	add	r5,r5,r7
 400ecf0:	5900212e 	bgeu	r11,r4,400ed78 <memcpy+0x140>
 400ecf4:	1813883a 	mov	r9,r3
 400ecf8:	2811883a 	mov	r8,r5
 400ecfc:	200f883a 	mov	r7,r4
 400ed00:	42800017 	ldw	r10,0(r8)
 400ed04:	4a400104 	addi	r9,r9,4
 400ed08:	39ffff04 	addi	r7,r7,-4
 400ed0c:	4abfff15 	stw	r10,-4(r9)
 400ed10:	42000104 	addi	r8,r8,4
 400ed14:	59fffa36 	bltu	r11,r7,400ed00 <__alt_mem_onchip_memory2_0+0xfc00da80>
 400ed18:	213fff04 	addi	r4,r4,-4
 400ed1c:	2008d0ba 	srli	r4,r4,2
 400ed20:	318000cc 	andi	r6,r6,3
 400ed24:	21000044 	addi	r4,r4,1
 400ed28:	2109883a 	add	r4,r4,r4
 400ed2c:	2109883a 	add	r4,r4,r4
 400ed30:	1907883a 	add	r3,r3,r4
 400ed34:	290b883a 	add	r5,r5,r4
 400ed38:	30000626 	beq	r6,zero,400ed54 <memcpy+0x11c>
 400ed3c:	198d883a 	add	r6,r3,r6
 400ed40:	29c00003 	ldbu	r7,0(r5)
 400ed44:	18c00044 	addi	r3,r3,1
 400ed48:	29400044 	addi	r5,r5,1
 400ed4c:	19ffffc5 	stb	r7,-1(r3)
 400ed50:	19bffb1e 	bne	r3,r6,400ed40 <__alt_mem_onchip_memory2_0+0xfc00dac0>
 400ed54:	dfc00217 	ldw	ra,8(sp)
 400ed58:	dc400117 	ldw	r17,4(sp)
 400ed5c:	dc000017 	ldw	r16,0(sp)
 400ed60:	dec00304 	addi	sp,sp,12
 400ed64:	f800283a 	ret
 400ed68:	2007883a 	mov	r3,r4
 400ed6c:	003ff206 	br	400ed38 <__alt_mem_onchip_memory2_0+0xfc00dab8>
 400ed70:	2007883a 	mov	r3,r4
 400ed74:	003ff106 	br	400ed3c <__alt_mem_onchip_memory2_0+0xfc00dabc>
 400ed78:	200d883a 	mov	r6,r4
 400ed7c:	003fee06 	br	400ed38 <__alt_mem_onchip_memory2_0+0xfc00dab8>

0400ed80 <memset>:
 400ed80:	20c000cc 	andi	r3,r4,3
 400ed84:	2005883a 	mov	r2,r4
 400ed88:	18004426 	beq	r3,zero,400ee9c <memset+0x11c>
 400ed8c:	31ffffc4 	addi	r7,r6,-1
 400ed90:	30004026 	beq	r6,zero,400ee94 <memset+0x114>
 400ed94:	2813883a 	mov	r9,r5
 400ed98:	200d883a 	mov	r6,r4
 400ed9c:	2007883a 	mov	r3,r4
 400eda0:	00000406 	br	400edb4 <memset+0x34>
 400eda4:	3a3fffc4 	addi	r8,r7,-1
 400eda8:	31800044 	addi	r6,r6,1
 400edac:	38003926 	beq	r7,zero,400ee94 <memset+0x114>
 400edb0:	400f883a 	mov	r7,r8
 400edb4:	18c00044 	addi	r3,r3,1
 400edb8:	32400005 	stb	r9,0(r6)
 400edbc:	1a0000cc 	andi	r8,r3,3
 400edc0:	403ff81e 	bne	r8,zero,400eda4 <__alt_mem_onchip_memory2_0+0xfc00db24>
 400edc4:	010000c4 	movi	r4,3
 400edc8:	21c02d2e 	bgeu	r4,r7,400ee80 <memset+0x100>
 400edcc:	29003fcc 	andi	r4,r5,255
 400edd0:	200c923a 	slli	r6,r4,8
 400edd4:	3108b03a 	or	r4,r6,r4
 400edd8:	200c943a 	slli	r6,r4,16
 400eddc:	218cb03a 	or	r6,r4,r6
 400ede0:	010003c4 	movi	r4,15
 400ede4:	21c0182e 	bgeu	r4,r7,400ee48 <memset+0xc8>
 400ede8:	3b3ffc04 	addi	r12,r7,-16
 400edec:	6018d13a 	srli	r12,r12,4
 400edf0:	1a000104 	addi	r8,r3,4
 400edf4:	1ac00204 	addi	r11,r3,8
 400edf8:	6008913a 	slli	r4,r12,4
 400edfc:	1a800304 	addi	r10,r3,12
 400ee00:	1813883a 	mov	r9,r3
 400ee04:	21000504 	addi	r4,r4,20
 400ee08:	1909883a 	add	r4,r3,r4
 400ee0c:	49800015 	stw	r6,0(r9)
 400ee10:	41800015 	stw	r6,0(r8)
 400ee14:	59800015 	stw	r6,0(r11)
 400ee18:	51800015 	stw	r6,0(r10)
 400ee1c:	42000404 	addi	r8,r8,16
 400ee20:	4a400404 	addi	r9,r9,16
 400ee24:	5ac00404 	addi	r11,r11,16
 400ee28:	52800404 	addi	r10,r10,16
 400ee2c:	413ff71e 	bne	r8,r4,400ee0c <__alt_mem_onchip_memory2_0+0xfc00db8c>
 400ee30:	63000044 	addi	r12,r12,1
 400ee34:	6018913a 	slli	r12,r12,4
 400ee38:	39c003cc 	andi	r7,r7,15
 400ee3c:	010000c4 	movi	r4,3
 400ee40:	1b07883a 	add	r3,r3,r12
 400ee44:	21c00e2e 	bgeu	r4,r7,400ee80 <memset+0x100>
 400ee48:	1813883a 	mov	r9,r3
 400ee4c:	3811883a 	mov	r8,r7
 400ee50:	010000c4 	movi	r4,3
 400ee54:	49800015 	stw	r6,0(r9)
 400ee58:	423fff04 	addi	r8,r8,-4
 400ee5c:	4a400104 	addi	r9,r9,4
 400ee60:	223ffc36 	bltu	r4,r8,400ee54 <__alt_mem_onchip_memory2_0+0xfc00dbd4>
 400ee64:	393fff04 	addi	r4,r7,-4
 400ee68:	2008d0ba 	srli	r4,r4,2
 400ee6c:	39c000cc 	andi	r7,r7,3
 400ee70:	21000044 	addi	r4,r4,1
 400ee74:	2109883a 	add	r4,r4,r4
 400ee78:	2109883a 	add	r4,r4,r4
 400ee7c:	1907883a 	add	r3,r3,r4
 400ee80:	38000526 	beq	r7,zero,400ee98 <memset+0x118>
 400ee84:	19cf883a 	add	r7,r3,r7
 400ee88:	19400005 	stb	r5,0(r3)
 400ee8c:	18c00044 	addi	r3,r3,1
 400ee90:	38fffd1e 	bne	r7,r3,400ee88 <__alt_mem_onchip_memory2_0+0xfc00dc08>
 400ee94:	f800283a 	ret
 400ee98:	f800283a 	ret
 400ee9c:	2007883a 	mov	r3,r4
 400eea0:	300f883a 	mov	r7,r6
 400eea4:	003fc706 	br	400edc4 <__alt_mem_onchip_memory2_0+0xfc00db44>

0400eea8 <_printf_r>:
 400eea8:	defffd04 	addi	sp,sp,-12
 400eeac:	2805883a 	mov	r2,r5
 400eeb0:	dfc00015 	stw	ra,0(sp)
 400eeb4:	d9800115 	stw	r6,4(sp)
 400eeb8:	d9c00215 	stw	r7,8(sp)
 400eebc:	21400217 	ldw	r5,8(r4)
 400eec0:	d9c00104 	addi	r7,sp,4
 400eec4:	100d883a 	mov	r6,r2
 400eec8:	400f4dc0 	call	400f4dc <___vfprintf_internal_r>
 400eecc:	dfc00017 	ldw	ra,0(sp)
 400eed0:	dec00304 	addi	sp,sp,12
 400eed4:	f800283a 	ret

0400eed8 <printf>:
 400eed8:	defffc04 	addi	sp,sp,-16
 400eedc:	dfc00015 	stw	ra,0(sp)
 400eee0:	d9400115 	stw	r5,4(sp)
 400eee4:	d9800215 	stw	r6,8(sp)
 400eee8:	d9c00315 	stw	r7,12(sp)
 400eeec:	008100f4 	movhi	r2,1027
 400eef0:	10a96004 	addi	r2,r2,-23168
 400eef4:	10800017 	ldw	r2,0(r2)
 400eef8:	200b883a 	mov	r5,r4
 400eefc:	d9800104 	addi	r6,sp,4
 400ef00:	11000217 	ldw	r4,8(r2)
 400ef04:	40117b80 	call	40117b8 <__vfprintf_internal>
 400ef08:	dfc00017 	ldw	ra,0(sp)
 400ef0c:	dec00404 	addi	sp,sp,16
 400ef10:	f800283a 	ret

0400ef14 <_putchar_r>:
 400ef14:	21800217 	ldw	r6,8(r4)
 400ef18:	40159001 	jmpi	4015900 <_putc_r>

0400ef1c <putchar>:
 400ef1c:	008100f4 	movhi	r2,1027
 400ef20:	10a96004 	addi	r2,r2,-23168
 400ef24:	200b883a 	mov	r5,r4
 400ef28:	11000017 	ldw	r4,0(r2)
 400ef2c:	21800217 	ldw	r6,8(r4)
 400ef30:	40159001 	jmpi	4015900 <_putc_r>

0400ef34 <_puts_r>:
 400ef34:	defff604 	addi	sp,sp,-40
 400ef38:	dc000715 	stw	r16,28(sp)
 400ef3c:	2021883a 	mov	r16,r4
 400ef40:	2809883a 	mov	r4,r5
 400ef44:	dc400815 	stw	r17,32(sp)
 400ef48:	dfc00915 	stw	ra,36(sp)
 400ef4c:	2823883a 	mov	r17,r5
 400ef50:	400f43c0 	call	400f43c <strlen>
 400ef54:	10c00044 	addi	r3,r2,1
 400ef58:	d8800115 	stw	r2,4(sp)
 400ef5c:	008100b4 	movhi	r2,1026
 400ef60:	109c7004 	addi	r2,r2,29120
 400ef64:	d8800215 	stw	r2,8(sp)
 400ef68:	00800044 	movi	r2,1
 400ef6c:	d8800315 	stw	r2,12(sp)
 400ef70:	00800084 	movi	r2,2
 400ef74:	dc400015 	stw	r17,0(sp)
 400ef78:	d8c00615 	stw	r3,24(sp)
 400ef7c:	dec00415 	stw	sp,16(sp)
 400ef80:	d8800515 	stw	r2,20(sp)
 400ef84:	80000226 	beq	r16,zero,400ef90 <_puts_r+0x5c>
 400ef88:	80800e17 	ldw	r2,56(r16)
 400ef8c:	10001426 	beq	r2,zero,400efe0 <_puts_r+0xac>
 400ef90:	81400217 	ldw	r5,8(r16)
 400ef94:	2880030b 	ldhu	r2,12(r5)
 400ef98:	10c8000c 	andi	r3,r2,8192
 400ef9c:	1800061e 	bne	r3,zero,400efb8 <_puts_r+0x84>
 400efa0:	29001917 	ldw	r4,100(r5)
 400efa4:	00f7ffc4 	movi	r3,-8193
 400efa8:	10880014 	ori	r2,r2,8192
 400efac:	20c6703a 	and	r3,r4,r3
 400efb0:	2880030d 	sth	r2,12(r5)
 400efb4:	28c01915 	stw	r3,100(r5)
 400efb8:	d9800404 	addi	r6,sp,16
 400efbc:	8009883a 	mov	r4,r16
 400efc0:	4013d200 	call	4013d20 <__sfvwrite_r>
 400efc4:	1000091e 	bne	r2,zero,400efec <_puts_r+0xb8>
 400efc8:	00800284 	movi	r2,10
 400efcc:	dfc00917 	ldw	ra,36(sp)
 400efd0:	dc400817 	ldw	r17,32(sp)
 400efd4:	dc000717 	ldw	r16,28(sp)
 400efd8:	dec00a04 	addi	sp,sp,40
 400efdc:	f800283a 	ret
 400efe0:	8009883a 	mov	r4,r16
 400efe4:	401389c0 	call	401389c <__sinit>
 400efe8:	003fe906 	br	400ef90 <__alt_mem_onchip_memory2_0+0xfc00dd10>
 400efec:	00bfffc4 	movi	r2,-1
 400eff0:	003ff606 	br	400efcc <__alt_mem_onchip_memory2_0+0xfc00dd4c>

0400eff4 <puts>:
 400eff4:	008100f4 	movhi	r2,1027
 400eff8:	10a96004 	addi	r2,r2,-23168
 400effc:	200b883a 	mov	r5,r4
 400f000:	11000017 	ldw	r4,0(r2)
 400f004:	400ef341 	jmpi	400ef34 <_puts_r>

0400f008 <_sbrk_r>:
 400f008:	defffd04 	addi	sp,sp,-12
 400f00c:	dc000015 	stw	r16,0(sp)
 400f010:	040100f4 	movhi	r16,1027
 400f014:	dc400115 	stw	r17,4(sp)
 400f018:	8435f204 	addi	r16,r16,-10296
 400f01c:	2023883a 	mov	r17,r4
 400f020:	2809883a 	mov	r4,r5
 400f024:	dfc00215 	stw	ra,8(sp)
 400f028:	80000015 	stw	zero,0(r16)
 400f02c:	401bf280 	call	401bf28 <sbrk>
 400f030:	00ffffc4 	movi	r3,-1
 400f034:	10c00526 	beq	r2,r3,400f04c <_sbrk_r+0x44>
 400f038:	dfc00217 	ldw	ra,8(sp)
 400f03c:	dc400117 	ldw	r17,4(sp)
 400f040:	dc000017 	ldw	r16,0(sp)
 400f044:	dec00304 	addi	sp,sp,12
 400f048:	f800283a 	ret
 400f04c:	80c00017 	ldw	r3,0(r16)
 400f050:	183ff926 	beq	r3,zero,400f038 <__alt_mem_onchip_memory2_0+0xfc00ddb8>
 400f054:	88c00015 	stw	r3,0(r17)
 400f058:	003ff706 	br	400f038 <__alt_mem_onchip_memory2_0+0xfc00ddb8>

0400f05c <_init_signal_r>:
 400f05c:	2080b717 	ldw	r2,732(r4)
 400f060:	10000226 	beq	r2,zero,400f06c <_init_signal_r+0x10>
 400f064:	0005883a 	mov	r2,zero
 400f068:	f800283a 	ret
 400f06c:	defffe04 	addi	sp,sp,-8
 400f070:	01402004 	movi	r5,128
 400f074:	dc000015 	stw	r16,0(sp)
 400f078:	dfc00115 	stw	ra,4(sp)
 400f07c:	2021883a 	mov	r16,r4
 400f080:	400e42c0 	call	400e42c <_malloc_r>
 400f084:	8080b715 	stw	r2,732(r16)
 400f088:	10000d26 	beq	r2,zero,400f0c0 <_init_signal_r+0x64>
 400f08c:	0007883a 	mov	r3,zero
 400f090:	01002004 	movi	r4,128
 400f094:	00000106 	br	400f09c <_init_signal_r+0x40>
 400f098:	8080b717 	ldw	r2,732(r16)
 400f09c:	10c5883a 	add	r2,r2,r3
 400f0a0:	10000015 	stw	zero,0(r2)
 400f0a4:	18c00104 	addi	r3,r3,4
 400f0a8:	193ffb1e 	bne	r3,r4,400f098 <__alt_mem_onchip_memory2_0+0xfc00de18>
 400f0ac:	0005883a 	mov	r2,zero
 400f0b0:	dfc00117 	ldw	ra,4(sp)
 400f0b4:	dc000017 	ldw	r16,0(sp)
 400f0b8:	dec00204 	addi	sp,sp,8
 400f0bc:	f800283a 	ret
 400f0c0:	00bfffc4 	movi	r2,-1
 400f0c4:	003ffa06 	br	400f0b0 <__alt_mem_onchip_memory2_0+0xfc00de30>

0400f0c8 <_signal_r>:
 400f0c8:	00c007c4 	movi	r3,31
 400f0cc:	19401536 	bltu	r3,r5,400f124 <_signal_r+0x5c>
 400f0d0:	2080b717 	ldw	r2,732(r4)
 400f0d4:	defffc04 	addi	sp,sp,-16
 400f0d8:	dc800215 	stw	r18,8(sp)
 400f0dc:	dc400115 	stw	r17,4(sp)
 400f0e0:	dc000015 	stw	r16,0(sp)
 400f0e4:	dfc00315 	stw	ra,12(sp)
 400f0e8:	3023883a 	mov	r17,r6
 400f0ec:	2021883a 	mov	r16,r4
 400f0f0:	2825883a 	mov	r18,r5
 400f0f4:	10000f26 	beq	r2,zero,400f134 <_signal_r+0x6c>
 400f0f8:	948b883a 	add	r5,r18,r18
 400f0fc:	294b883a 	add	r5,r5,r5
 400f100:	114b883a 	add	r5,r2,r5
 400f104:	28800017 	ldw	r2,0(r5)
 400f108:	2c400015 	stw	r17,0(r5)
 400f10c:	dfc00317 	ldw	ra,12(sp)
 400f110:	dc800217 	ldw	r18,8(sp)
 400f114:	dc400117 	ldw	r17,4(sp)
 400f118:	dc000017 	ldw	r16,0(sp)
 400f11c:	dec00404 	addi	sp,sp,16
 400f120:	f800283a 	ret
 400f124:	00c00584 	movi	r3,22
 400f128:	20c00015 	stw	r3,0(r4)
 400f12c:	00bfffc4 	movi	r2,-1
 400f130:	f800283a 	ret
 400f134:	400f05c0 	call	400f05c <_init_signal_r>
 400f138:	1000021e 	bne	r2,zero,400f144 <_signal_r+0x7c>
 400f13c:	8080b717 	ldw	r2,732(r16)
 400f140:	003fed06 	br	400f0f8 <__alt_mem_onchip_memory2_0+0xfc00de78>
 400f144:	00bfffc4 	movi	r2,-1
 400f148:	003ff006 	br	400f10c <__alt_mem_onchip_memory2_0+0xfc00de8c>

0400f14c <_raise_r>:
 400f14c:	008007c4 	movi	r2,31
 400f150:	11402936 	bltu	r2,r5,400f1f8 <_raise_r+0xac>
 400f154:	20c0b717 	ldw	r3,732(r4)
 400f158:	defffd04 	addi	sp,sp,-12
 400f15c:	dc400115 	stw	r17,4(sp)
 400f160:	dc000015 	stw	r16,0(sp)
 400f164:	dfc00215 	stw	ra,8(sp)
 400f168:	2021883a 	mov	r16,r4
 400f16c:	2823883a 	mov	r17,r5
 400f170:	18001726 	beq	r3,zero,400f1d0 <_raise_r+0x84>
 400f174:	2945883a 	add	r2,r5,r5
 400f178:	1085883a 	add	r2,r2,r2
 400f17c:	1887883a 	add	r3,r3,r2
 400f180:	19800017 	ldw	r6,0(r3)
 400f184:	30001226 	beq	r6,zero,400f1d0 <_raise_r+0x84>
 400f188:	00800044 	movi	r2,1
 400f18c:	30800e26 	beq	r6,r2,400f1c8 <_raise_r+0x7c>
 400f190:	013fffc4 	movi	r4,-1
 400f194:	31000926 	beq	r6,r4,400f1bc <_raise_r+0x70>
 400f198:	18000015 	stw	zero,0(r3)
 400f19c:	2809883a 	mov	r4,r5
 400f1a0:	303ee83a 	callr	r6
 400f1a4:	0005883a 	mov	r2,zero
 400f1a8:	dfc00217 	ldw	ra,8(sp)
 400f1ac:	dc400117 	ldw	r17,4(sp)
 400f1b0:	dc000017 	ldw	r16,0(sp)
 400f1b4:	dec00304 	addi	sp,sp,12
 400f1b8:	f800283a 	ret
 400f1bc:	00c00584 	movi	r3,22
 400f1c0:	80c00015 	stw	r3,0(r16)
 400f1c4:	003ff806 	br	400f1a8 <__alt_mem_onchip_memory2_0+0xfc00df28>
 400f1c8:	0005883a 	mov	r2,zero
 400f1cc:	003ff606 	br	400f1a8 <__alt_mem_onchip_memory2_0+0xfc00df28>
 400f1d0:	8009883a 	mov	r4,r16
 400f1d4:	400f35c0 	call	400f35c <_getpid_r>
 400f1d8:	880d883a 	mov	r6,r17
 400f1dc:	100b883a 	mov	r5,r2
 400f1e0:	8009883a 	mov	r4,r16
 400f1e4:	dfc00217 	ldw	ra,8(sp)
 400f1e8:	dc400117 	ldw	r17,4(sp)
 400f1ec:	dc000017 	ldw	r16,0(sp)
 400f1f0:	dec00304 	addi	sp,sp,12
 400f1f4:	400f3001 	jmpi	400f300 <_kill_r>
 400f1f8:	00800584 	movi	r2,22
 400f1fc:	20800015 	stw	r2,0(r4)
 400f200:	00bfffc4 	movi	r2,-1
 400f204:	f800283a 	ret

0400f208 <__sigtramp_r>:
 400f208:	008007c4 	movi	r2,31
 400f20c:	11402436 	bltu	r2,r5,400f2a0 <__sigtramp_r+0x98>
 400f210:	20c0b717 	ldw	r3,732(r4)
 400f214:	defffd04 	addi	sp,sp,-12
 400f218:	dc400115 	stw	r17,4(sp)
 400f21c:	dc000015 	stw	r16,0(sp)
 400f220:	dfc00215 	stw	ra,8(sp)
 400f224:	2021883a 	mov	r16,r4
 400f228:	2823883a 	mov	r17,r5
 400f22c:	18001826 	beq	r3,zero,400f290 <__sigtramp_r+0x88>
 400f230:	8c45883a 	add	r2,r17,r17
 400f234:	1085883a 	add	r2,r2,r2
 400f238:	1885883a 	add	r2,r3,r2
 400f23c:	10c00017 	ldw	r3,0(r2)
 400f240:	18001126 	beq	r3,zero,400f288 <__sigtramp_r+0x80>
 400f244:	013fffc4 	movi	r4,-1
 400f248:	19000d26 	beq	r3,r4,400f280 <__sigtramp_r+0x78>
 400f24c:	01000044 	movi	r4,1
 400f250:	19000926 	beq	r3,r4,400f278 <__sigtramp_r+0x70>
 400f254:	10000015 	stw	zero,0(r2)
 400f258:	8809883a 	mov	r4,r17
 400f25c:	183ee83a 	callr	r3
 400f260:	0005883a 	mov	r2,zero
 400f264:	dfc00217 	ldw	ra,8(sp)
 400f268:	dc400117 	ldw	r17,4(sp)
 400f26c:	dc000017 	ldw	r16,0(sp)
 400f270:	dec00304 	addi	sp,sp,12
 400f274:	f800283a 	ret
 400f278:	008000c4 	movi	r2,3
 400f27c:	003ff906 	br	400f264 <__alt_mem_onchip_memory2_0+0xfc00dfe4>
 400f280:	00800084 	movi	r2,2
 400f284:	003ff706 	br	400f264 <__alt_mem_onchip_memory2_0+0xfc00dfe4>
 400f288:	00800044 	movi	r2,1
 400f28c:	003ff506 	br	400f264 <__alt_mem_onchip_memory2_0+0xfc00dfe4>
 400f290:	400f05c0 	call	400f05c <_init_signal_r>
 400f294:	1000041e 	bne	r2,zero,400f2a8 <__sigtramp_r+0xa0>
 400f298:	80c0b717 	ldw	r3,732(r16)
 400f29c:	003fe406 	br	400f230 <__alt_mem_onchip_memory2_0+0xfc00dfb0>
 400f2a0:	00bfffc4 	movi	r2,-1
 400f2a4:	f800283a 	ret
 400f2a8:	00bfffc4 	movi	r2,-1
 400f2ac:	003fed06 	br	400f264 <__alt_mem_onchip_memory2_0+0xfc00dfe4>

0400f2b0 <raise>:
 400f2b0:	008100f4 	movhi	r2,1027
 400f2b4:	10a96004 	addi	r2,r2,-23168
 400f2b8:	200b883a 	mov	r5,r4
 400f2bc:	11000017 	ldw	r4,0(r2)
 400f2c0:	400f14c1 	jmpi	400f14c <_raise_r>

0400f2c4 <signal>:
 400f2c4:	008100f4 	movhi	r2,1027
 400f2c8:	10a96004 	addi	r2,r2,-23168
 400f2cc:	280d883a 	mov	r6,r5
 400f2d0:	200b883a 	mov	r5,r4
 400f2d4:	11000017 	ldw	r4,0(r2)
 400f2d8:	400f0c81 	jmpi	400f0c8 <_signal_r>

0400f2dc <_init_signal>:
 400f2dc:	008100f4 	movhi	r2,1027
 400f2e0:	10a96004 	addi	r2,r2,-23168
 400f2e4:	11000017 	ldw	r4,0(r2)
 400f2e8:	400f05c1 	jmpi	400f05c <_init_signal_r>

0400f2ec <__sigtramp>:
 400f2ec:	008100f4 	movhi	r2,1027
 400f2f0:	10a96004 	addi	r2,r2,-23168
 400f2f4:	200b883a 	mov	r5,r4
 400f2f8:	11000017 	ldw	r4,0(r2)
 400f2fc:	400f2081 	jmpi	400f208 <__sigtramp_r>

0400f300 <_kill_r>:
 400f300:	defffd04 	addi	sp,sp,-12
 400f304:	2805883a 	mov	r2,r5
 400f308:	dc000015 	stw	r16,0(sp)
 400f30c:	040100f4 	movhi	r16,1027
 400f310:	dc400115 	stw	r17,4(sp)
 400f314:	8435f204 	addi	r16,r16,-10296
 400f318:	2023883a 	mov	r17,r4
 400f31c:	300b883a 	mov	r5,r6
 400f320:	1009883a 	mov	r4,r2
 400f324:	dfc00215 	stw	ra,8(sp)
 400f328:	80000015 	stw	zero,0(r16)
 400f32c:	401b96c0 	call	401b96c <kill>
 400f330:	00ffffc4 	movi	r3,-1
 400f334:	10c00526 	beq	r2,r3,400f34c <_kill_r+0x4c>
 400f338:	dfc00217 	ldw	ra,8(sp)
 400f33c:	dc400117 	ldw	r17,4(sp)
 400f340:	dc000017 	ldw	r16,0(sp)
 400f344:	dec00304 	addi	sp,sp,12
 400f348:	f800283a 	ret
 400f34c:	80c00017 	ldw	r3,0(r16)
 400f350:	183ff926 	beq	r3,zero,400f338 <__alt_mem_onchip_memory2_0+0xfc00e0b8>
 400f354:	88c00015 	stw	r3,0(r17)
 400f358:	003ff706 	br	400f338 <__alt_mem_onchip_memory2_0+0xfc00e0b8>

0400f35c <_getpid_r>:
 400f35c:	401b8281 	jmpi	401b828 <getpid>

0400f360 <strcmp>:
 400f360:	2144b03a 	or	r2,r4,r5
 400f364:	108000cc 	andi	r2,r2,3
 400f368:	1000171e 	bne	r2,zero,400f3c8 <strcmp+0x68>
 400f36c:	20800017 	ldw	r2,0(r4)
 400f370:	28c00017 	ldw	r3,0(r5)
 400f374:	10c0141e 	bne	r2,r3,400f3c8 <strcmp+0x68>
 400f378:	027fbff4 	movhi	r9,65279
 400f37c:	4a7fbfc4 	addi	r9,r9,-257
 400f380:	0086303a 	nor	r3,zero,r2
 400f384:	02202074 	movhi	r8,32897
 400f388:	1245883a 	add	r2,r2,r9
 400f38c:	42202004 	addi	r8,r8,-32640
 400f390:	10c4703a 	and	r2,r2,r3
 400f394:	1204703a 	and	r2,r2,r8
 400f398:	10000226 	beq	r2,zero,400f3a4 <strcmp+0x44>
 400f39c:	00002306 	br	400f42c <strcmp+0xcc>
 400f3a0:	1000221e 	bne	r2,zero,400f42c <strcmp+0xcc>
 400f3a4:	21000104 	addi	r4,r4,4
 400f3a8:	20c00017 	ldw	r3,0(r4)
 400f3ac:	29400104 	addi	r5,r5,4
 400f3b0:	29800017 	ldw	r6,0(r5)
 400f3b4:	1a4f883a 	add	r7,r3,r9
 400f3b8:	00c4303a 	nor	r2,zero,r3
 400f3bc:	3884703a 	and	r2,r7,r2
 400f3c0:	1204703a 	and	r2,r2,r8
 400f3c4:	19bff626 	beq	r3,r6,400f3a0 <__alt_mem_onchip_memory2_0+0xfc00e120>
 400f3c8:	20800003 	ldbu	r2,0(r4)
 400f3cc:	10c03fcc 	andi	r3,r2,255
 400f3d0:	18c0201c 	xori	r3,r3,128
 400f3d4:	18ffe004 	addi	r3,r3,-128
 400f3d8:	18000c26 	beq	r3,zero,400f40c <strcmp+0xac>
 400f3dc:	29800007 	ldb	r6,0(r5)
 400f3e0:	19800326 	beq	r3,r6,400f3f0 <strcmp+0x90>
 400f3e4:	00001306 	br	400f434 <strcmp+0xd4>
 400f3e8:	29800007 	ldb	r6,0(r5)
 400f3ec:	11800b1e 	bne	r2,r6,400f41c <strcmp+0xbc>
 400f3f0:	21000044 	addi	r4,r4,1
 400f3f4:	20c00003 	ldbu	r3,0(r4)
 400f3f8:	29400044 	addi	r5,r5,1
 400f3fc:	18803fcc 	andi	r2,r3,255
 400f400:	1080201c 	xori	r2,r2,128
 400f404:	10bfe004 	addi	r2,r2,-128
 400f408:	103ff71e 	bne	r2,zero,400f3e8 <__alt_mem_onchip_memory2_0+0xfc00e168>
 400f40c:	0007883a 	mov	r3,zero
 400f410:	28800003 	ldbu	r2,0(r5)
 400f414:	1885c83a 	sub	r2,r3,r2
 400f418:	f800283a 	ret
 400f41c:	28800003 	ldbu	r2,0(r5)
 400f420:	18c03fcc 	andi	r3,r3,255
 400f424:	1885c83a 	sub	r2,r3,r2
 400f428:	f800283a 	ret
 400f42c:	0005883a 	mov	r2,zero
 400f430:	f800283a 	ret
 400f434:	10c03fcc 	andi	r3,r2,255
 400f438:	003ff506 	br	400f410 <__alt_mem_onchip_memory2_0+0xfc00e190>

0400f43c <strlen>:
 400f43c:	208000cc 	andi	r2,r4,3
 400f440:	10002026 	beq	r2,zero,400f4c4 <strlen+0x88>
 400f444:	20800007 	ldb	r2,0(r4)
 400f448:	10002026 	beq	r2,zero,400f4cc <strlen+0x90>
 400f44c:	2005883a 	mov	r2,r4
 400f450:	00000206 	br	400f45c <strlen+0x20>
 400f454:	10c00007 	ldb	r3,0(r2)
 400f458:	18001826 	beq	r3,zero,400f4bc <strlen+0x80>
 400f45c:	10800044 	addi	r2,r2,1
 400f460:	10c000cc 	andi	r3,r2,3
 400f464:	183ffb1e 	bne	r3,zero,400f454 <__alt_mem_onchip_memory2_0+0xfc00e1d4>
 400f468:	10c00017 	ldw	r3,0(r2)
 400f46c:	01ffbff4 	movhi	r7,65279
 400f470:	39ffbfc4 	addi	r7,r7,-257
 400f474:	00ca303a 	nor	r5,zero,r3
 400f478:	01a02074 	movhi	r6,32897
 400f47c:	19c7883a 	add	r3,r3,r7
 400f480:	31a02004 	addi	r6,r6,-32640
 400f484:	1946703a 	and	r3,r3,r5
 400f488:	1986703a 	and	r3,r3,r6
 400f48c:	1800091e 	bne	r3,zero,400f4b4 <strlen+0x78>
 400f490:	10800104 	addi	r2,r2,4
 400f494:	10c00017 	ldw	r3,0(r2)
 400f498:	19cb883a 	add	r5,r3,r7
 400f49c:	00c6303a 	nor	r3,zero,r3
 400f4a0:	28c6703a 	and	r3,r5,r3
 400f4a4:	1986703a 	and	r3,r3,r6
 400f4a8:	183ff926 	beq	r3,zero,400f490 <__alt_mem_onchip_memory2_0+0xfc00e210>
 400f4ac:	00000106 	br	400f4b4 <strlen+0x78>
 400f4b0:	10800044 	addi	r2,r2,1
 400f4b4:	10c00007 	ldb	r3,0(r2)
 400f4b8:	183ffd1e 	bne	r3,zero,400f4b0 <__alt_mem_onchip_memory2_0+0xfc00e230>
 400f4bc:	1105c83a 	sub	r2,r2,r4
 400f4c0:	f800283a 	ret
 400f4c4:	2005883a 	mov	r2,r4
 400f4c8:	003fe706 	br	400f468 <__alt_mem_onchip_memory2_0+0xfc00e1e8>
 400f4cc:	0005883a 	mov	r2,zero
 400f4d0:	f800283a 	ret

0400f4d4 <_times_r>:
 400f4d4:	2809883a 	mov	r4,r5
 400f4d8:	401c0141 	jmpi	401c014 <times>

0400f4dc <___vfprintf_internal_r>:
 400f4dc:	deffb804 	addi	sp,sp,-288
 400f4e0:	dfc04715 	stw	ra,284(sp)
 400f4e4:	ddc04515 	stw	r23,276(sp)
 400f4e8:	dd404315 	stw	r21,268(sp)
 400f4ec:	d9002d15 	stw	r4,180(sp)
 400f4f0:	282f883a 	mov	r23,r5
 400f4f4:	302b883a 	mov	r21,r6
 400f4f8:	d9c02e15 	stw	r7,184(sp)
 400f4fc:	df004615 	stw	fp,280(sp)
 400f500:	dd804415 	stw	r22,272(sp)
 400f504:	dd004215 	stw	r20,264(sp)
 400f508:	dcc04115 	stw	r19,260(sp)
 400f50c:	dc804015 	stw	r18,256(sp)
 400f510:	dc403f15 	stw	r17,252(sp)
 400f514:	dc003e15 	stw	r16,248(sp)
 400f518:	401441c0 	call	401441c <_localeconv_r>
 400f51c:	10800017 	ldw	r2,0(r2)
 400f520:	1009883a 	mov	r4,r2
 400f524:	d8803415 	stw	r2,208(sp)
 400f528:	400f43c0 	call	400f43c <strlen>
 400f52c:	d8803715 	stw	r2,220(sp)
 400f530:	d8802d17 	ldw	r2,180(sp)
 400f534:	10000226 	beq	r2,zero,400f540 <___vfprintf_internal_r+0x64>
 400f538:	10800e17 	ldw	r2,56(r2)
 400f53c:	1000fb26 	beq	r2,zero,400f92c <___vfprintf_internal_r+0x450>
 400f540:	b880030b 	ldhu	r2,12(r23)
 400f544:	10c8000c 	andi	r3,r2,8192
 400f548:	1800061e 	bne	r3,zero,400f564 <___vfprintf_internal_r+0x88>
 400f54c:	b9001917 	ldw	r4,100(r23)
 400f550:	00f7ffc4 	movi	r3,-8193
 400f554:	10880014 	ori	r2,r2,8192
 400f558:	20c6703a 	and	r3,r4,r3
 400f55c:	b880030d 	sth	r2,12(r23)
 400f560:	b8c01915 	stw	r3,100(r23)
 400f564:	10c0020c 	andi	r3,r2,8
 400f568:	1800c326 	beq	r3,zero,400f878 <___vfprintf_internal_r+0x39c>
 400f56c:	b8c00417 	ldw	r3,16(r23)
 400f570:	1800c126 	beq	r3,zero,400f878 <___vfprintf_internal_r+0x39c>
 400f574:	1080068c 	andi	r2,r2,26
 400f578:	00c00284 	movi	r3,10
 400f57c:	10c0c626 	beq	r2,r3,400f898 <___vfprintf_internal_r+0x3bc>
 400f580:	d8c00404 	addi	r3,sp,16
 400f584:	050100b4 	movhi	r20,1026
 400f588:	d9001e04 	addi	r4,sp,120
 400f58c:	a51c8184 	addi	r20,r20,29190
 400f590:	d8c01e15 	stw	r3,120(sp)
 400f594:	d8002015 	stw	zero,128(sp)
 400f598:	d8001f15 	stw	zero,124(sp)
 400f59c:	d8003315 	stw	zero,204(sp)
 400f5a0:	d8003615 	stw	zero,216(sp)
 400f5a4:	d8003815 	stw	zero,224(sp)
 400f5a8:	1811883a 	mov	r8,r3
 400f5ac:	d8003915 	stw	zero,228(sp)
 400f5b0:	d8003a15 	stw	zero,232(sp)
 400f5b4:	d8002f15 	stw	zero,188(sp)
 400f5b8:	d9002815 	stw	r4,160(sp)
 400f5bc:	a8800007 	ldb	r2,0(r21)
 400f5c0:	10028b26 	beq	r2,zero,400fff0 <___vfprintf_internal_r+0xb14>
 400f5c4:	00c00944 	movi	r3,37
 400f5c8:	a823883a 	mov	r17,r21
 400f5cc:	10c0021e 	bne	r2,r3,400f5d8 <___vfprintf_internal_r+0xfc>
 400f5d0:	00001406 	br	400f624 <___vfprintf_internal_r+0x148>
 400f5d4:	10c00326 	beq	r2,r3,400f5e4 <___vfprintf_internal_r+0x108>
 400f5d8:	8c400044 	addi	r17,r17,1
 400f5dc:	88800007 	ldb	r2,0(r17)
 400f5e0:	103ffc1e 	bne	r2,zero,400f5d4 <__alt_mem_onchip_memory2_0+0xfc00e354>
 400f5e4:	8d61c83a 	sub	r16,r17,r21
 400f5e8:	80000e26 	beq	r16,zero,400f624 <___vfprintf_internal_r+0x148>
 400f5ec:	d8c02017 	ldw	r3,128(sp)
 400f5f0:	d8801f17 	ldw	r2,124(sp)
 400f5f4:	45400015 	stw	r21,0(r8)
 400f5f8:	1c07883a 	add	r3,r3,r16
 400f5fc:	10800044 	addi	r2,r2,1
 400f600:	d8c02015 	stw	r3,128(sp)
 400f604:	44000115 	stw	r16,4(r8)
 400f608:	d8801f15 	stw	r2,124(sp)
 400f60c:	00c001c4 	movi	r3,7
 400f610:	1880a916 	blt	r3,r2,400f8b8 <___vfprintf_internal_r+0x3dc>
 400f614:	42000204 	addi	r8,r8,8
 400f618:	d9402f17 	ldw	r5,188(sp)
 400f61c:	2c0b883a 	add	r5,r5,r16
 400f620:	d9402f15 	stw	r5,188(sp)
 400f624:	88800007 	ldb	r2,0(r17)
 400f628:	1000aa26 	beq	r2,zero,400f8d4 <___vfprintf_internal_r+0x3f8>
 400f62c:	8d400044 	addi	r21,r17,1
 400f630:	8c400047 	ldb	r17,1(r17)
 400f634:	0021883a 	mov	r16,zero
 400f638:	00bfffc4 	movi	r2,-1
 400f63c:	0025883a 	mov	r18,zero
 400f640:	dc002905 	stb	r16,164(sp)
 400f644:	d8002785 	stb	zero,158(sp)
 400f648:	d8002b05 	stb	zero,172(sp)
 400f64c:	d8802a15 	stw	r2,168(sp)
 400f650:	d8003115 	stw	zero,196(sp)
 400f654:	04c01604 	movi	r19,88
 400f658:	05800244 	movi	r22,9
 400f65c:	9021883a 	mov	r16,r18
 400f660:	4039883a 	mov	fp,r8
 400f664:	ad400044 	addi	r21,r21,1
 400f668:	88bff804 	addi	r2,r17,-32
 400f66c:	98833236 	bltu	r19,r2,4010338 <___vfprintf_internal_r+0xe5c>
 400f670:	100490ba 	slli	r2,r2,2
 400f674:	00c10074 	movhi	r3,1025
 400f678:	18fda204 	addi	r3,r3,-2424
 400f67c:	10c5883a 	add	r2,r2,r3
 400f680:	10800017 	ldw	r2,0(r2)
 400f684:	1000683a 	jmp	r2
 400f688:	04010230 	cmpltui	r16,zero,1032
 400f68c:	04010338 	rdprs	r16,zero,1036
 400f690:	04010338 	rdprs	r16,zero,1036
 400f694:	04010250 	cmplti	r16,zero,1033
 400f698:	04010338 	rdprs	r16,zero,1036
 400f69c:	04010338 	rdprs	r16,zero,1036
 400f6a0:	04010338 	rdprs	r16,zero,1036
 400f6a4:	04010338 	rdprs	r16,zero,1036
 400f6a8:	04010338 	rdprs	r16,zero,1036
 400f6ac:	04010338 	rdprs	r16,zero,1036
 400f6b0:	0400f938 	rdprs	r16,zero,996
 400f6b4:	04010140 	call	401014 <__alt_mem_sdram-0x3bfefec>
 400f6b8:	04010338 	rdprs	r16,zero,1036
 400f6bc:	0400f7fc 	xorhi	r16,zero,991
 400f6c0:	0400f95c 	xori	r16,zero,997
 400f6c4:	04010338 	rdprs	r16,zero,1036
 400f6c8:	0400f9ac 	andhi	r16,zero,998
 400f6cc:	0400f9b8 	rdprs	r16,zero,998
 400f6d0:	0400f9b8 	rdprs	r16,zero,998
 400f6d4:	0400f9b8 	rdprs	r16,zero,998
 400f6d8:	0400f9b8 	rdprs	r16,zero,998
 400f6dc:	0400f9b8 	rdprs	r16,zero,998
 400f6e0:	0400f9b8 	rdprs	r16,zero,998
 400f6e4:	0400f9b8 	rdprs	r16,zero,998
 400f6e8:	0400f9b8 	rdprs	r16,zero,998
 400f6ec:	0400f9b8 	rdprs	r16,zero,998
 400f6f0:	04010338 	rdprs	r16,zero,1036
 400f6f4:	04010338 	rdprs	r16,zero,1036
 400f6f8:	04010338 	rdprs	r16,zero,1036
 400f6fc:	04010338 	rdprs	r16,zero,1036
 400f700:	04010338 	rdprs	r16,zero,1036
 400f704:	04010338 	rdprs	r16,zero,1036
 400f708:	04010338 	rdprs	r16,zero,1036
 400f70c:	04010338 	rdprs	r16,zero,1036
 400f710:	04010338 	rdprs	r16,zero,1036
 400f714:	04010338 	rdprs	r16,zero,1036
 400f718:	0400f9f4 	movhi	r16,999
 400f71c:	0400fabc 	xorhi	r16,zero,1002
 400f720:	04010338 	rdprs	r16,zero,1036
 400f724:	0400fabc 	xorhi	r16,zero,1002
 400f728:	04010338 	rdprs	r16,zero,1036
 400f72c:	04010338 	rdprs	r16,zero,1036
 400f730:	04010338 	rdprs	r16,zero,1036
 400f734:	04010338 	rdprs	r16,zero,1036
 400f738:	0400fb68 	cmpgeui	r16,zero,1005
 400f73c:	04010338 	rdprs	r16,zero,1036
 400f740:	04010338 	rdprs	r16,zero,1036
 400f744:	0400fb74 	movhi	r16,1005
 400f748:	04010338 	rdprs	r16,zero,1036
 400f74c:	04010338 	rdprs	r16,zero,1036
 400f750:	04010338 	rdprs	r16,zero,1036
 400f754:	04010338 	rdprs	r16,zero,1036
 400f758:	04010338 	rdprs	r16,zero,1036
 400f75c:	0400fff8 	rdprs	r16,zero,1023
 400f760:	04010338 	rdprs	r16,zero,1036
 400f764:	04010338 	rdprs	r16,zero,1036
 400f768:	04010064 	muli	r16,zero,1025
 400f76c:	04010338 	rdprs	r16,zero,1036
 400f770:	04010338 	rdprs	r16,zero,1036
 400f774:	04010338 	rdprs	r16,zero,1036
 400f778:	04010338 	rdprs	r16,zero,1036
 400f77c:	04010338 	rdprs	r16,zero,1036
 400f780:	04010338 	rdprs	r16,zero,1036
 400f784:	04010338 	rdprs	r16,zero,1036
 400f788:	04010338 	rdprs	r16,zero,1036
 400f78c:	04010338 	rdprs	r16,zero,1036
 400f790:	04010338 	rdprs	r16,zero,1036
 400f794:	040102dc 	xori	r16,zero,1035
 400f798:	0401025c 	xori	r16,zero,1033
 400f79c:	0400fabc 	xorhi	r16,zero,1002
 400f7a0:	0400fabc 	xorhi	r16,zero,1002
 400f7a4:	0400fabc 	xorhi	r16,zero,1002
 400f7a8:	0401027c 	xorhi	r16,zero,1033
 400f7ac:	0401025c 	xori	r16,zero,1033
 400f7b0:	04010338 	rdprs	r16,zero,1036
 400f7b4:	04010338 	rdprs	r16,zero,1036
 400f7b8:	04010288 	cmpgei	r16,zero,1034
 400f7bc:	04010338 	rdprs	r16,zero,1036
 400f7c0:	0401029c 	xori	r16,zero,1034
 400f7c4:	04010120 	cmpeqi	r16,zero,1028
 400f7c8:	0400f808 	cmpgei	r16,zero,992
 400f7cc:	04010158 	cmpnei	r16,zero,1029
 400f7d0:	04010338 	rdprs	r16,zero,1036
 400f7d4:	04010164 	muli	r16,zero,1029
 400f7d8:	04010338 	rdprs	r16,zero,1036
 400f7dc:	040101c8 	cmpgei	r16,zero,1031
 400f7e0:	04010338 	rdprs	r16,zero,1036
 400f7e4:	04010338 	rdprs	r16,zero,1036
 400f7e8:	040101e8 	cmpgeui	r16,zero,1031
 400f7ec:	d8c03117 	ldw	r3,196(sp)
 400f7f0:	d8802e15 	stw	r2,184(sp)
 400f7f4:	00c7c83a 	sub	r3,zero,r3
 400f7f8:	d8c03115 	stw	r3,196(sp)
 400f7fc:	84000114 	ori	r16,r16,4
 400f800:	ac400007 	ldb	r17,0(r21)
 400f804:	003f9706 	br	400f664 <__alt_mem_onchip_memory2_0+0xfc00e3e4>
 400f808:	00800c04 	movi	r2,48
 400f80c:	d8802705 	stb	r2,156(sp)
 400f810:	00801e04 	movi	r2,120
 400f814:	d8802745 	stb	r2,157(sp)
 400f818:	d9002a17 	ldw	r4,168(sp)
 400f81c:	d8802e17 	ldw	r2,184(sp)
 400f820:	d8002785 	stb	zero,158(sp)
 400f824:	e011883a 	mov	r8,fp
 400f828:	10c00104 	addi	r3,r2,4
 400f82c:	14c00017 	ldw	r19,0(r2)
 400f830:	002d883a 	mov	r22,zero
 400f834:	80800094 	ori	r2,r16,2
 400f838:	2002ca16 	blt	r4,zero,4010364 <___vfprintf_internal_r+0xe88>
 400f83c:	00bfdfc4 	movi	r2,-129
 400f840:	80a4703a 	and	r18,r16,r2
 400f844:	d8c02e15 	stw	r3,184(sp)
 400f848:	94800094 	ori	r18,r18,2
 400f84c:	9802b41e 	bne	r19,zero,4010320 <___vfprintf_internal_r+0xe44>
 400f850:	014100b4 	movhi	r5,1026
 400f854:	295c7a04 	addi	r5,r5,29160
 400f858:	d9403915 	stw	r5,228(sp)
 400f85c:	04401e04 	movi	r17,120
 400f860:	d8802a17 	ldw	r2,168(sp)
 400f864:	0039883a 	mov	fp,zero
 400f868:	1001fa26 	beq	r2,zero,4010054 <___vfprintf_internal_r+0xb78>
 400f86c:	0027883a 	mov	r19,zero
 400f870:	002d883a 	mov	r22,zero
 400f874:	00021906 	br	40100dc <___vfprintf_internal_r+0xc00>
 400f878:	d9002d17 	ldw	r4,180(sp)
 400f87c:	b80b883a 	mov	r5,r23
 400f880:	40118900 	call	4011890 <__swsetup_r>
 400f884:	1005dc1e 	bne	r2,zero,4010ff8 <___vfprintf_internal_r+0x1b1c>
 400f888:	b880030b 	ldhu	r2,12(r23)
 400f88c:	00c00284 	movi	r3,10
 400f890:	1080068c 	andi	r2,r2,26
 400f894:	10ff3a1e 	bne	r2,r3,400f580 <__alt_mem_onchip_memory2_0+0xfc00e300>
 400f898:	b880038f 	ldh	r2,14(r23)
 400f89c:	103f3816 	blt	r2,zero,400f580 <__alt_mem_onchip_memory2_0+0xfc00e300>
 400f8a0:	d9c02e17 	ldw	r7,184(sp)
 400f8a4:	d9002d17 	ldw	r4,180(sp)
 400f8a8:	a80d883a 	mov	r6,r21
 400f8ac:	b80b883a 	mov	r5,r23
 400f8b0:	40117d40 	call	40117d4 <__sbprintf>
 400f8b4:	00001106 	br	400f8fc <___vfprintf_internal_r+0x420>
 400f8b8:	d9002d17 	ldw	r4,180(sp)
 400f8bc:	d9801e04 	addi	r6,sp,120
 400f8c0:	b80b883a 	mov	r5,r23
 400f8c4:	40162780 	call	4016278 <__sprint_r>
 400f8c8:	1000081e 	bne	r2,zero,400f8ec <___vfprintf_internal_r+0x410>
 400f8cc:	da000404 	addi	r8,sp,16
 400f8d0:	003f5106 	br	400f618 <__alt_mem_onchip_memory2_0+0xfc00e398>
 400f8d4:	d8802017 	ldw	r2,128(sp)
 400f8d8:	10000426 	beq	r2,zero,400f8ec <___vfprintf_internal_r+0x410>
 400f8dc:	d9002d17 	ldw	r4,180(sp)
 400f8e0:	d9801e04 	addi	r6,sp,120
 400f8e4:	b80b883a 	mov	r5,r23
 400f8e8:	40162780 	call	4016278 <__sprint_r>
 400f8ec:	b880030b 	ldhu	r2,12(r23)
 400f8f0:	1080100c 	andi	r2,r2,64
 400f8f4:	1005c01e 	bne	r2,zero,4010ff8 <___vfprintf_internal_r+0x1b1c>
 400f8f8:	d8802f17 	ldw	r2,188(sp)
 400f8fc:	dfc04717 	ldw	ra,284(sp)
 400f900:	df004617 	ldw	fp,280(sp)
 400f904:	ddc04517 	ldw	r23,276(sp)
 400f908:	dd804417 	ldw	r22,272(sp)
 400f90c:	dd404317 	ldw	r21,268(sp)
 400f910:	dd004217 	ldw	r20,264(sp)
 400f914:	dcc04117 	ldw	r19,260(sp)
 400f918:	dc804017 	ldw	r18,256(sp)
 400f91c:	dc403f17 	ldw	r17,252(sp)
 400f920:	dc003e17 	ldw	r16,248(sp)
 400f924:	dec04804 	addi	sp,sp,288
 400f928:	f800283a 	ret
 400f92c:	d9002d17 	ldw	r4,180(sp)
 400f930:	401389c0 	call	401389c <__sinit>
 400f934:	003f0206 	br	400f540 <__alt_mem_onchip_memory2_0+0xfc00e2c0>
 400f938:	d9002e17 	ldw	r4,184(sp)
 400f93c:	d9402e17 	ldw	r5,184(sp)
 400f940:	21000017 	ldw	r4,0(r4)
 400f944:	28800104 	addi	r2,r5,4
 400f948:	d9003115 	stw	r4,196(sp)
 400f94c:	203fa716 	blt	r4,zero,400f7ec <__alt_mem_onchip_memory2_0+0xfc00e56c>
 400f950:	d8802e15 	stw	r2,184(sp)
 400f954:	ac400007 	ldb	r17,0(r21)
 400f958:	003f4206 	br	400f664 <__alt_mem_onchip_memory2_0+0xfc00e3e4>
 400f95c:	ac400007 	ldb	r17,0(r21)
 400f960:	01000a84 	movi	r4,42
 400f964:	a8c00044 	addi	r3,r21,1
 400f968:	89075826 	beq	r17,r4,40116cc <___vfprintf_internal_r+0x21f0>
 400f96c:	8cbff404 	addi	r18,r17,-48
 400f970:	b486ae36 	bltu	r22,r18,401142c <___vfprintf_internal_r+0x1f50>
 400f974:	0009883a 	mov	r4,zero
 400f978:	1823883a 	mov	r17,r3
 400f97c:	01400284 	movi	r5,10
 400f980:	400d2c40 	call	400d2c4 <__mulsi3>
 400f984:	88c00007 	ldb	r3,0(r17)
 400f988:	1489883a 	add	r4,r2,r18
 400f98c:	8d400044 	addi	r21,r17,1
 400f990:	1cbff404 	addi	r18,r3,-48
 400f994:	a823883a 	mov	r17,r21
 400f998:	b4bff82e 	bgeu	r22,r18,400f97c <__alt_mem_onchip_memory2_0+0xfc00e6fc>
 400f99c:	1823883a 	mov	r17,r3
 400f9a0:	2005f616 	blt	r4,zero,401117c <___vfprintf_internal_r+0x1ca0>
 400f9a4:	d9002a15 	stw	r4,168(sp)
 400f9a8:	003f2f06 	br	400f668 <__alt_mem_onchip_memory2_0+0xfc00e3e8>
 400f9ac:	84002014 	ori	r16,r16,128
 400f9b0:	ac400007 	ldb	r17,0(r21)
 400f9b4:	003f2b06 	br	400f664 <__alt_mem_onchip_memory2_0+0xfc00e3e4>
 400f9b8:	8cbff404 	addi	r18,r17,-48
 400f9bc:	d8003115 	stw	zero,196(sp)
 400f9c0:	0009883a 	mov	r4,zero
 400f9c4:	a823883a 	mov	r17,r21
 400f9c8:	01400284 	movi	r5,10
 400f9cc:	400d2c40 	call	400d2c4 <__mulsi3>
 400f9d0:	88c00007 	ldb	r3,0(r17)
 400f9d4:	9089883a 	add	r4,r18,r2
 400f9d8:	ad400044 	addi	r21,r21,1
 400f9dc:	1cbff404 	addi	r18,r3,-48
 400f9e0:	a823883a 	mov	r17,r21
 400f9e4:	b4bff82e 	bgeu	r22,r18,400f9c8 <__alt_mem_onchip_memory2_0+0xfc00e748>
 400f9e8:	1823883a 	mov	r17,r3
 400f9ec:	d9003115 	stw	r4,196(sp)
 400f9f0:	003f1d06 	br	400f668 <__alt_mem_onchip_memory2_0+0xfc00e3e8>
 400f9f4:	8025883a 	mov	r18,r16
 400f9f8:	dc002903 	ldbu	r16,164(sp)
 400f9fc:	e011883a 	mov	r8,fp
 400fa00:	84003fcc 	andi	r16,r16,255
 400fa04:	8007531e 	bne	r16,zero,4011754 <___vfprintf_internal_r+0x2278>
 400fa08:	94800414 	ori	r18,r18,16
 400fa0c:	9080080c 	andi	r2,r18,32
 400fa10:	1003a326 	beq	r2,zero,40108a0 <___vfprintf_internal_r+0x13c4>
 400fa14:	d9002e17 	ldw	r4,184(sp)
 400fa18:	20800117 	ldw	r2,4(r4)
 400fa1c:	24c00017 	ldw	r19,0(r4)
 400fa20:	21000204 	addi	r4,r4,8
 400fa24:	d9002e15 	stw	r4,184(sp)
 400fa28:	102d883a 	mov	r22,r2
 400fa2c:	10047316 	blt	r2,zero,4010bfc <___vfprintf_internal_r+0x1720>
 400fa30:	d9002a17 	ldw	r4,168(sp)
 400fa34:	df002783 	ldbu	fp,158(sp)
 400fa38:	2003e416 	blt	r4,zero,40109cc <___vfprintf_internal_r+0x14f0>
 400fa3c:	00ffdfc4 	movi	r3,-129
 400fa40:	9d84b03a 	or	r2,r19,r22
 400fa44:	90e4703a 	and	r18,r18,r3
 400fa48:	10018026 	beq	r2,zero,401004c <___vfprintf_internal_r+0xb70>
 400fa4c:	b003ab26 	beq	r22,zero,40108fc <___vfprintf_internal_r+0x1420>
 400fa50:	dc402915 	stw	r17,164(sp)
 400fa54:	dc001e04 	addi	r16,sp,120
 400fa58:	b023883a 	mov	r17,r22
 400fa5c:	402d883a 	mov	r22,r8
 400fa60:	9809883a 	mov	r4,r19
 400fa64:	880b883a 	mov	r5,r17
 400fa68:	01800284 	movi	r6,10
 400fa6c:	000f883a 	mov	r7,zero
 400fa70:	40187bc0 	call	40187bc <__umoddi3>
 400fa74:	10800c04 	addi	r2,r2,48
 400fa78:	843fffc4 	addi	r16,r16,-1
 400fa7c:	9809883a 	mov	r4,r19
 400fa80:	880b883a 	mov	r5,r17
 400fa84:	80800005 	stb	r2,0(r16)
 400fa88:	01800284 	movi	r6,10
 400fa8c:	000f883a 	mov	r7,zero
 400fa90:	40181c00 	call	40181c0 <__udivdi3>
 400fa94:	1027883a 	mov	r19,r2
 400fa98:	10c4b03a 	or	r2,r2,r3
 400fa9c:	1823883a 	mov	r17,r3
 400faa0:	103fef1e 	bne	r2,zero,400fa60 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 400faa4:	d8c02817 	ldw	r3,160(sp)
 400faa8:	dc402917 	ldw	r17,164(sp)
 400faac:	b011883a 	mov	r8,r22
 400fab0:	1c07c83a 	sub	r3,r3,r16
 400fab4:	d8c02b15 	stw	r3,172(sp)
 400fab8:	00005f06 	br	400fc38 <___vfprintf_internal_r+0x75c>
 400fabc:	8025883a 	mov	r18,r16
 400fac0:	dc002903 	ldbu	r16,164(sp)
 400fac4:	e011883a 	mov	r8,fp
 400fac8:	84003fcc 	andi	r16,r16,255
 400facc:	80071e1e 	bne	r16,zero,4011748 <___vfprintf_internal_r+0x226c>
 400fad0:	9080020c 	andi	r2,r18,8
 400fad4:	1004af26 	beq	r2,zero,4010d94 <___vfprintf_internal_r+0x18b8>
 400fad8:	d9002e17 	ldw	r4,184(sp)
 400fadc:	d9402e17 	ldw	r5,184(sp)
 400fae0:	d8802e17 	ldw	r2,184(sp)
 400fae4:	21000017 	ldw	r4,0(r4)
 400fae8:	29400117 	ldw	r5,4(r5)
 400faec:	10800204 	addi	r2,r2,8
 400faf0:	d9003615 	stw	r4,216(sp)
 400faf4:	d9403815 	stw	r5,224(sp)
 400faf8:	d8802e15 	stw	r2,184(sp)
 400fafc:	d9003617 	ldw	r4,216(sp)
 400fb00:	d9403817 	ldw	r5,224(sp)
 400fb04:	da003d15 	stw	r8,244(sp)
 400fb08:	04000044 	movi	r16,1
 400fb0c:	4015fcc0 	call	4015fcc <__fpclassifyd>
 400fb10:	da003d17 	ldw	r8,244(sp)
 400fb14:	1404441e 	bne	r2,r16,4010c28 <___vfprintf_internal_r+0x174c>
 400fb18:	d9003617 	ldw	r4,216(sp)
 400fb1c:	d9403817 	ldw	r5,224(sp)
 400fb20:	000d883a 	mov	r6,zero
 400fb24:	000f883a 	mov	r7,zero
 400fb28:	401a1600 	call	401a160 <__ledf2>
 400fb2c:	da003d17 	ldw	r8,244(sp)
 400fb30:	1005e316 	blt	r2,zero,40112c0 <___vfprintf_internal_r+0x1de4>
 400fb34:	df002783 	ldbu	fp,158(sp)
 400fb38:	008011c4 	movi	r2,71
 400fb3c:	1445580e 	bge	r2,r17,40110a0 <___vfprintf_internal_r+0x1bc4>
 400fb40:	040100b4 	movhi	r16,1026
 400fb44:	841c7204 	addi	r16,r16,29128
 400fb48:	00c000c4 	movi	r3,3
 400fb4c:	00bfdfc4 	movi	r2,-129
 400fb50:	d8c02915 	stw	r3,164(sp)
 400fb54:	90a4703a 	and	r18,r18,r2
 400fb58:	d8c02b15 	stw	r3,172(sp)
 400fb5c:	d8002a15 	stw	zero,168(sp)
 400fb60:	d8003215 	stw	zero,200(sp)
 400fb64:	00003a06 	br	400fc50 <___vfprintf_internal_r+0x774>
 400fb68:	84000214 	ori	r16,r16,8
 400fb6c:	ac400007 	ldb	r17,0(r21)
 400fb70:	003ebc06 	br	400f664 <__alt_mem_onchip_memory2_0+0xfc00e3e4>
 400fb74:	8025883a 	mov	r18,r16
 400fb78:	dc002903 	ldbu	r16,164(sp)
 400fb7c:	e011883a 	mov	r8,fp
 400fb80:	84003fcc 	andi	r16,r16,255
 400fb84:	8007001e 	bne	r16,zero,4011788 <___vfprintf_internal_r+0x22ac>
 400fb88:	94800414 	ori	r18,r18,16
 400fb8c:	9080080c 	andi	r2,r18,32
 400fb90:	1002fa26 	beq	r2,zero,401077c <___vfprintf_internal_r+0x12a0>
 400fb94:	d9002e17 	ldw	r4,184(sp)
 400fb98:	d9402a17 	ldw	r5,168(sp)
 400fb9c:	d8002785 	stb	zero,158(sp)
 400fba0:	20800204 	addi	r2,r4,8
 400fba4:	24c00017 	ldw	r19,0(r4)
 400fba8:	25800117 	ldw	r22,4(r4)
 400fbac:	2804b116 	blt	r5,zero,4010e74 <___vfprintf_internal_r+0x1998>
 400fbb0:	013fdfc4 	movi	r4,-129
 400fbb4:	9d86b03a 	or	r3,r19,r22
 400fbb8:	d8802e15 	stw	r2,184(sp)
 400fbbc:	9124703a 	and	r18,r18,r4
 400fbc0:	1802fb1e 	bne	r3,zero,40107b0 <___vfprintf_internal_r+0x12d4>
 400fbc4:	d8c02a17 	ldw	r3,168(sp)
 400fbc8:	0039883a 	mov	fp,zero
 400fbcc:	1805e526 	beq	r3,zero,4011364 <___vfprintf_internal_r+0x1e88>
 400fbd0:	0027883a 	mov	r19,zero
 400fbd4:	002d883a 	mov	r22,zero
 400fbd8:	dc001e04 	addi	r16,sp,120
 400fbdc:	9806d0fa 	srli	r3,r19,3
 400fbe0:	b008977a 	slli	r4,r22,29
 400fbe4:	b02cd0fa 	srli	r22,r22,3
 400fbe8:	9cc001cc 	andi	r19,r19,7
 400fbec:	98800c04 	addi	r2,r19,48
 400fbf0:	843fffc4 	addi	r16,r16,-1
 400fbf4:	20e6b03a 	or	r19,r4,r3
 400fbf8:	80800005 	stb	r2,0(r16)
 400fbfc:	9d86b03a 	or	r3,r19,r22
 400fc00:	183ff61e 	bne	r3,zero,400fbdc <__alt_mem_onchip_memory2_0+0xfc00e95c>
 400fc04:	90c0004c 	andi	r3,r18,1
 400fc08:	18014126 	beq	r3,zero,4010110 <___vfprintf_internal_r+0xc34>
 400fc0c:	10803fcc 	andi	r2,r2,255
 400fc10:	1080201c 	xori	r2,r2,128
 400fc14:	10bfe004 	addi	r2,r2,-128
 400fc18:	00c00c04 	movi	r3,48
 400fc1c:	10c13c26 	beq	r2,r3,4010110 <___vfprintf_internal_r+0xc34>
 400fc20:	80ffffc5 	stb	r3,-1(r16)
 400fc24:	d8c02817 	ldw	r3,160(sp)
 400fc28:	80bfffc4 	addi	r2,r16,-1
 400fc2c:	1021883a 	mov	r16,r2
 400fc30:	1887c83a 	sub	r3,r3,r2
 400fc34:	d8c02b15 	stw	r3,172(sp)
 400fc38:	d8802b17 	ldw	r2,172(sp)
 400fc3c:	d9002a17 	ldw	r4,168(sp)
 400fc40:	1100010e 	bge	r2,r4,400fc48 <___vfprintf_internal_r+0x76c>
 400fc44:	2005883a 	mov	r2,r4
 400fc48:	d8802915 	stw	r2,164(sp)
 400fc4c:	d8003215 	stw	zero,200(sp)
 400fc50:	e7003fcc 	andi	fp,fp,255
 400fc54:	e700201c 	xori	fp,fp,128
 400fc58:	e73fe004 	addi	fp,fp,-128
 400fc5c:	e0000326 	beq	fp,zero,400fc6c <___vfprintf_internal_r+0x790>
 400fc60:	d8c02917 	ldw	r3,164(sp)
 400fc64:	18c00044 	addi	r3,r3,1
 400fc68:	d8c02915 	stw	r3,164(sp)
 400fc6c:	90c0008c 	andi	r3,r18,2
 400fc70:	d8c02c15 	stw	r3,176(sp)
 400fc74:	18000326 	beq	r3,zero,400fc84 <___vfprintf_internal_r+0x7a8>
 400fc78:	d8c02917 	ldw	r3,164(sp)
 400fc7c:	18c00084 	addi	r3,r3,2
 400fc80:	d8c02915 	stw	r3,164(sp)
 400fc84:	90c0210c 	andi	r3,r18,132
 400fc88:	d8c03015 	stw	r3,192(sp)
 400fc8c:	1801c51e 	bne	r3,zero,40103a4 <___vfprintf_internal_r+0xec8>
 400fc90:	d9003117 	ldw	r4,196(sp)
 400fc94:	d8c02917 	ldw	r3,164(sp)
 400fc98:	20e7c83a 	sub	r19,r4,r3
 400fc9c:	04c1c10e 	bge	zero,r19,40103a4 <___vfprintf_internal_r+0xec8>
 400fca0:	02400404 	movi	r9,16
 400fca4:	d8c02017 	ldw	r3,128(sp)
 400fca8:	d8801f17 	ldw	r2,124(sp)
 400fcac:	4cc52f0e 	bge	r9,r19,401116c <___vfprintf_internal_r+0x1c90>
 400fcb0:	014100b4 	movhi	r5,1026
 400fcb4:	295c8584 	addi	r5,r5,29206
 400fcb8:	dc403b15 	stw	r17,236(sp)
 400fcbc:	d9403515 	stw	r5,212(sp)
 400fcc0:	9823883a 	mov	r17,r19
 400fcc4:	482d883a 	mov	r22,r9
 400fcc8:	9027883a 	mov	r19,r18
 400fccc:	070001c4 	movi	fp,7
 400fcd0:	8025883a 	mov	r18,r16
 400fcd4:	dc002d17 	ldw	r16,180(sp)
 400fcd8:	00000306 	br	400fce8 <___vfprintf_internal_r+0x80c>
 400fcdc:	8c7ffc04 	addi	r17,r17,-16
 400fce0:	42000204 	addi	r8,r8,8
 400fce4:	b440130e 	bge	r22,r17,400fd34 <___vfprintf_internal_r+0x858>
 400fce8:	010100b4 	movhi	r4,1026
 400fcec:	18c00404 	addi	r3,r3,16
 400fcf0:	10800044 	addi	r2,r2,1
 400fcf4:	211c8584 	addi	r4,r4,29206
 400fcf8:	41000015 	stw	r4,0(r8)
 400fcfc:	45800115 	stw	r22,4(r8)
 400fd00:	d8c02015 	stw	r3,128(sp)
 400fd04:	d8801f15 	stw	r2,124(sp)
 400fd08:	e0bff40e 	bge	fp,r2,400fcdc <__alt_mem_onchip_memory2_0+0xfc00ea5c>
 400fd0c:	d9801e04 	addi	r6,sp,120
 400fd10:	b80b883a 	mov	r5,r23
 400fd14:	8009883a 	mov	r4,r16
 400fd18:	40162780 	call	4016278 <__sprint_r>
 400fd1c:	103ef31e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 400fd20:	8c7ffc04 	addi	r17,r17,-16
 400fd24:	d8c02017 	ldw	r3,128(sp)
 400fd28:	d8801f17 	ldw	r2,124(sp)
 400fd2c:	da000404 	addi	r8,sp,16
 400fd30:	b47fed16 	blt	r22,r17,400fce8 <__alt_mem_onchip_memory2_0+0xfc00ea68>
 400fd34:	9021883a 	mov	r16,r18
 400fd38:	9825883a 	mov	r18,r19
 400fd3c:	8827883a 	mov	r19,r17
 400fd40:	dc403b17 	ldw	r17,236(sp)
 400fd44:	d9403517 	ldw	r5,212(sp)
 400fd48:	98c7883a 	add	r3,r19,r3
 400fd4c:	10800044 	addi	r2,r2,1
 400fd50:	41400015 	stw	r5,0(r8)
 400fd54:	44c00115 	stw	r19,4(r8)
 400fd58:	d8c02015 	stw	r3,128(sp)
 400fd5c:	d8801f15 	stw	r2,124(sp)
 400fd60:	010001c4 	movi	r4,7
 400fd64:	2082c516 	blt	r4,r2,401087c <___vfprintf_internal_r+0x13a0>
 400fd68:	df002787 	ldb	fp,158(sp)
 400fd6c:	42000204 	addi	r8,r8,8
 400fd70:	e0000c26 	beq	fp,zero,400fda4 <___vfprintf_internal_r+0x8c8>
 400fd74:	d8801f17 	ldw	r2,124(sp)
 400fd78:	d9002784 	addi	r4,sp,158
 400fd7c:	18c00044 	addi	r3,r3,1
 400fd80:	10800044 	addi	r2,r2,1
 400fd84:	41000015 	stw	r4,0(r8)
 400fd88:	01000044 	movi	r4,1
 400fd8c:	41000115 	stw	r4,4(r8)
 400fd90:	d8c02015 	stw	r3,128(sp)
 400fd94:	d8801f15 	stw	r2,124(sp)
 400fd98:	010001c4 	movi	r4,7
 400fd9c:	20825e16 	blt	r4,r2,4010718 <___vfprintf_internal_r+0x123c>
 400fda0:	42000204 	addi	r8,r8,8
 400fda4:	d8802c17 	ldw	r2,176(sp)
 400fda8:	10000c26 	beq	r2,zero,400fddc <___vfprintf_internal_r+0x900>
 400fdac:	d8801f17 	ldw	r2,124(sp)
 400fdb0:	d9002704 	addi	r4,sp,156
 400fdb4:	18c00084 	addi	r3,r3,2
 400fdb8:	10800044 	addi	r2,r2,1
 400fdbc:	41000015 	stw	r4,0(r8)
 400fdc0:	01000084 	movi	r4,2
 400fdc4:	41000115 	stw	r4,4(r8)
 400fdc8:	d8c02015 	stw	r3,128(sp)
 400fdcc:	d8801f15 	stw	r2,124(sp)
 400fdd0:	010001c4 	movi	r4,7
 400fdd4:	20825816 	blt	r4,r2,4010738 <___vfprintf_internal_r+0x125c>
 400fdd8:	42000204 	addi	r8,r8,8
 400fddc:	d9003017 	ldw	r4,192(sp)
 400fde0:	00802004 	movi	r2,128
 400fde4:	2081bb26 	beq	r4,r2,40104d4 <___vfprintf_internal_r+0xff8>
 400fde8:	d9402a17 	ldw	r5,168(sp)
 400fdec:	d8802b17 	ldw	r2,172(sp)
 400fdf0:	28adc83a 	sub	r22,r5,r2
 400fdf4:	0580310e 	bge	zero,r22,400febc <___vfprintf_internal_r+0x9e0>
 400fdf8:	07000404 	movi	fp,16
 400fdfc:	d8801f17 	ldw	r2,124(sp)
 400fe00:	e584360e 	bge	fp,r22,4010edc <___vfprintf_internal_r+0x1a00>
 400fe04:	014100b4 	movhi	r5,1026
 400fe08:	295c8184 	addi	r5,r5,29190
 400fe0c:	dc402a15 	stw	r17,168(sp)
 400fe10:	d9402c15 	stw	r5,176(sp)
 400fe14:	b023883a 	mov	r17,r22
 400fe18:	04c001c4 	movi	r19,7
 400fe1c:	a82d883a 	mov	r22,r21
 400fe20:	902b883a 	mov	r21,r18
 400fe24:	8025883a 	mov	r18,r16
 400fe28:	dc002d17 	ldw	r16,180(sp)
 400fe2c:	00000306 	br	400fe3c <___vfprintf_internal_r+0x960>
 400fe30:	8c7ffc04 	addi	r17,r17,-16
 400fe34:	42000204 	addi	r8,r8,8
 400fe38:	e440110e 	bge	fp,r17,400fe80 <___vfprintf_internal_r+0x9a4>
 400fe3c:	18c00404 	addi	r3,r3,16
 400fe40:	10800044 	addi	r2,r2,1
 400fe44:	45000015 	stw	r20,0(r8)
 400fe48:	47000115 	stw	fp,4(r8)
 400fe4c:	d8c02015 	stw	r3,128(sp)
 400fe50:	d8801f15 	stw	r2,124(sp)
 400fe54:	98bff60e 	bge	r19,r2,400fe30 <__alt_mem_onchip_memory2_0+0xfc00ebb0>
 400fe58:	d9801e04 	addi	r6,sp,120
 400fe5c:	b80b883a 	mov	r5,r23
 400fe60:	8009883a 	mov	r4,r16
 400fe64:	40162780 	call	4016278 <__sprint_r>
 400fe68:	103ea01e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 400fe6c:	8c7ffc04 	addi	r17,r17,-16
 400fe70:	d8c02017 	ldw	r3,128(sp)
 400fe74:	d8801f17 	ldw	r2,124(sp)
 400fe78:	da000404 	addi	r8,sp,16
 400fe7c:	e47fef16 	blt	fp,r17,400fe3c <__alt_mem_onchip_memory2_0+0xfc00ebbc>
 400fe80:	9021883a 	mov	r16,r18
 400fe84:	a825883a 	mov	r18,r21
 400fe88:	b02b883a 	mov	r21,r22
 400fe8c:	882d883a 	mov	r22,r17
 400fe90:	dc402a17 	ldw	r17,168(sp)
 400fe94:	d9002c17 	ldw	r4,176(sp)
 400fe98:	1d87883a 	add	r3,r3,r22
 400fe9c:	10800044 	addi	r2,r2,1
 400fea0:	41000015 	stw	r4,0(r8)
 400fea4:	45800115 	stw	r22,4(r8)
 400fea8:	d8c02015 	stw	r3,128(sp)
 400feac:	d8801f15 	stw	r2,124(sp)
 400feb0:	010001c4 	movi	r4,7
 400feb4:	20821016 	blt	r4,r2,40106f8 <___vfprintf_internal_r+0x121c>
 400feb8:	42000204 	addi	r8,r8,8
 400febc:	9080400c 	andi	r2,r18,256
 400fec0:	10013a1e 	bne	r2,zero,40103ac <___vfprintf_internal_r+0xed0>
 400fec4:	d9402b17 	ldw	r5,172(sp)
 400fec8:	d8801f17 	ldw	r2,124(sp)
 400fecc:	44000015 	stw	r16,0(r8)
 400fed0:	1947883a 	add	r3,r3,r5
 400fed4:	10800044 	addi	r2,r2,1
 400fed8:	41400115 	stw	r5,4(r8)
 400fedc:	d8c02015 	stw	r3,128(sp)
 400fee0:	d8801f15 	stw	r2,124(sp)
 400fee4:	010001c4 	movi	r4,7
 400fee8:	2081f516 	blt	r4,r2,40106c0 <___vfprintf_internal_r+0x11e4>
 400feec:	42000204 	addi	r8,r8,8
 400fef0:	9480010c 	andi	r18,r18,4
 400fef4:	90003226 	beq	r18,zero,400ffc0 <___vfprintf_internal_r+0xae4>
 400fef8:	d9403117 	ldw	r5,196(sp)
 400fefc:	d8802917 	ldw	r2,164(sp)
 400ff00:	28a1c83a 	sub	r16,r5,r2
 400ff04:	04002e0e 	bge	zero,r16,400ffc0 <___vfprintf_internal_r+0xae4>
 400ff08:	04400404 	movi	r17,16
 400ff0c:	d8801f17 	ldw	r2,124(sp)
 400ff10:	8c04c40e 	bge	r17,r16,4011224 <___vfprintf_internal_r+0x1d48>
 400ff14:	014100b4 	movhi	r5,1026
 400ff18:	295c8584 	addi	r5,r5,29206
 400ff1c:	d9403515 	stw	r5,212(sp)
 400ff20:	048001c4 	movi	r18,7
 400ff24:	dcc02d17 	ldw	r19,180(sp)
 400ff28:	00000306 	br	400ff38 <___vfprintf_internal_r+0xa5c>
 400ff2c:	843ffc04 	addi	r16,r16,-16
 400ff30:	42000204 	addi	r8,r8,8
 400ff34:	8c00130e 	bge	r17,r16,400ff84 <___vfprintf_internal_r+0xaa8>
 400ff38:	010100b4 	movhi	r4,1026
 400ff3c:	18c00404 	addi	r3,r3,16
 400ff40:	10800044 	addi	r2,r2,1
 400ff44:	211c8584 	addi	r4,r4,29206
 400ff48:	41000015 	stw	r4,0(r8)
 400ff4c:	44400115 	stw	r17,4(r8)
 400ff50:	d8c02015 	stw	r3,128(sp)
 400ff54:	d8801f15 	stw	r2,124(sp)
 400ff58:	90bff40e 	bge	r18,r2,400ff2c <__alt_mem_onchip_memory2_0+0xfc00ecac>
 400ff5c:	d9801e04 	addi	r6,sp,120
 400ff60:	b80b883a 	mov	r5,r23
 400ff64:	9809883a 	mov	r4,r19
 400ff68:	40162780 	call	4016278 <__sprint_r>
 400ff6c:	103e5f1e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 400ff70:	843ffc04 	addi	r16,r16,-16
 400ff74:	d8c02017 	ldw	r3,128(sp)
 400ff78:	d8801f17 	ldw	r2,124(sp)
 400ff7c:	da000404 	addi	r8,sp,16
 400ff80:	8c3fed16 	blt	r17,r16,400ff38 <__alt_mem_onchip_memory2_0+0xfc00ecb8>
 400ff84:	d9403517 	ldw	r5,212(sp)
 400ff88:	1c07883a 	add	r3,r3,r16
 400ff8c:	10800044 	addi	r2,r2,1
 400ff90:	41400015 	stw	r5,0(r8)
 400ff94:	44000115 	stw	r16,4(r8)
 400ff98:	d8c02015 	stw	r3,128(sp)
 400ff9c:	d8801f15 	stw	r2,124(sp)
 400ffa0:	010001c4 	movi	r4,7
 400ffa4:	2080060e 	bge	r4,r2,400ffc0 <___vfprintf_internal_r+0xae4>
 400ffa8:	d9002d17 	ldw	r4,180(sp)
 400ffac:	d9801e04 	addi	r6,sp,120
 400ffb0:	b80b883a 	mov	r5,r23
 400ffb4:	40162780 	call	4016278 <__sprint_r>
 400ffb8:	103e4c1e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 400ffbc:	d8c02017 	ldw	r3,128(sp)
 400ffc0:	d8803117 	ldw	r2,196(sp)
 400ffc4:	d9002917 	ldw	r4,164(sp)
 400ffc8:	1100010e 	bge	r2,r4,400ffd0 <___vfprintf_internal_r+0xaf4>
 400ffcc:	2005883a 	mov	r2,r4
 400ffd0:	d9402f17 	ldw	r5,188(sp)
 400ffd4:	288b883a 	add	r5,r5,r2
 400ffd8:	d9402f15 	stw	r5,188(sp)
 400ffdc:	1801c01e 	bne	r3,zero,40106e0 <___vfprintf_internal_r+0x1204>
 400ffe0:	a8800007 	ldb	r2,0(r21)
 400ffe4:	d8001f15 	stw	zero,124(sp)
 400ffe8:	da000404 	addi	r8,sp,16
 400ffec:	103d751e 	bne	r2,zero,400f5c4 <__alt_mem_onchip_memory2_0+0xfc00e344>
 400fff0:	a823883a 	mov	r17,r21
 400fff4:	003d8b06 	br	400f624 <__alt_mem_onchip_memory2_0+0xfc00e3a4>
 400fff8:	8025883a 	mov	r18,r16
 400fffc:	dc002903 	ldbu	r16,164(sp)
 4010000:	e011883a 	mov	r8,fp
 4010004:	84003fcc 	andi	r16,r16,255
 4010008:	8005e51e 	bne	r16,zero,40117a0 <___vfprintf_internal_r+0x22c4>
 401000c:	94800414 	ori	r18,r18,16
 4010010:	9080080c 	andi	r2,r18,32
 4010014:	10022b26 	beq	r2,zero,40108c4 <___vfprintf_internal_r+0x13e8>
 4010018:	d9002e17 	ldw	r4,184(sp)
 401001c:	d9402a17 	ldw	r5,168(sp)
 4010020:	d8002785 	stb	zero,158(sp)
 4010024:	20c00204 	addi	r3,r4,8
 4010028:	24c00017 	ldw	r19,0(r4)
 401002c:	25800117 	ldw	r22,4(r4)
 4010030:	28042e16 	blt	r5,zero,40110ec <___vfprintf_internal_r+0x1c10>
 4010034:	013fdfc4 	movi	r4,-129
 4010038:	9d84b03a 	or	r2,r19,r22
 401003c:	d8c02e15 	stw	r3,184(sp)
 4010040:	9124703a 	and	r18,r18,r4
 4010044:	0039883a 	mov	fp,zero
 4010048:	103e801e 	bne	r2,zero,400fa4c <__alt_mem_onchip_memory2_0+0xfc00e7cc>
 401004c:	d9002a17 	ldw	r4,168(sp)
 4010050:	2002e01e 	bne	r4,zero,4010bd4 <___vfprintf_internal_r+0x16f8>
 4010054:	d8002a15 	stw	zero,168(sp)
 4010058:	d8002b15 	stw	zero,172(sp)
 401005c:	dc001e04 	addi	r16,sp,120
 4010060:	003ef506 	br	400fc38 <__alt_mem_onchip_memory2_0+0xfc00e9b8>
 4010064:	8025883a 	mov	r18,r16
 4010068:	dc002903 	ldbu	r16,164(sp)
 401006c:	e011883a 	mov	r8,fp
 4010070:	84003fcc 	andi	r16,r16,255
 4010074:	8005ba1e 	bne	r16,zero,4011760 <___vfprintf_internal_r+0x2284>
 4010078:	010100b4 	movhi	r4,1026
 401007c:	211c7504 	addi	r4,r4,29140
 4010080:	d9003915 	stw	r4,228(sp)
 4010084:	9080080c 	andi	r2,r18,32
 4010088:	10006126 	beq	r2,zero,4010210 <___vfprintf_internal_r+0xd34>
 401008c:	d9402e17 	ldw	r5,184(sp)
 4010090:	2cc00017 	ldw	r19,0(r5)
 4010094:	2d800117 	ldw	r22,4(r5)
 4010098:	29400204 	addi	r5,r5,8
 401009c:	d9402e15 	stw	r5,184(sp)
 40100a0:	9080004c 	andi	r2,r18,1
 40100a4:	1001ac26 	beq	r2,zero,4010758 <___vfprintf_internal_r+0x127c>
 40100a8:	9d84b03a 	or	r2,r19,r22
 40100ac:	10038526 	beq	r2,zero,4010ec4 <___vfprintf_internal_r+0x19e8>
 40100b0:	d8c02a17 	ldw	r3,168(sp)
 40100b4:	00800c04 	movi	r2,48
 40100b8:	d8802705 	stb	r2,156(sp)
 40100bc:	dc402745 	stb	r17,157(sp)
 40100c0:	d8002785 	stb	zero,158(sp)
 40100c4:	90800094 	ori	r2,r18,2
 40100c8:	18047916 	blt	r3,zero,40112b0 <___vfprintf_internal_r+0x1dd4>
 40100cc:	00bfdfc4 	movi	r2,-129
 40100d0:	90a4703a 	and	r18,r18,r2
 40100d4:	94800094 	ori	r18,r18,2
 40100d8:	0039883a 	mov	fp,zero
 40100dc:	d9003917 	ldw	r4,228(sp)
 40100e0:	dc001e04 	addi	r16,sp,120
 40100e4:	988003cc 	andi	r2,r19,15
 40100e8:	b006973a 	slli	r3,r22,28
 40100ec:	2085883a 	add	r2,r4,r2
 40100f0:	9826d13a 	srli	r19,r19,4
 40100f4:	10800003 	ldbu	r2,0(r2)
 40100f8:	b02cd13a 	srli	r22,r22,4
 40100fc:	843fffc4 	addi	r16,r16,-1
 4010100:	1ce6b03a 	or	r19,r3,r19
 4010104:	80800005 	stb	r2,0(r16)
 4010108:	9d84b03a 	or	r2,r19,r22
 401010c:	103ff51e 	bne	r2,zero,40100e4 <__alt_mem_onchip_memory2_0+0xfc00ee64>
 4010110:	d8c02817 	ldw	r3,160(sp)
 4010114:	1c07c83a 	sub	r3,r3,r16
 4010118:	d8c02b15 	stw	r3,172(sp)
 401011c:	003ec606 	br	400fc38 <__alt_mem_onchip_memory2_0+0xfc00e9b8>
 4010120:	8025883a 	mov	r18,r16
 4010124:	dc002903 	ldbu	r16,164(sp)
 4010128:	e011883a 	mov	r8,fp
 401012c:	84003fcc 	andi	r16,r16,255
 4010130:	803e9626 	beq	r16,zero,400fb8c <__alt_mem_onchip_memory2_0+0xfc00e90c>
 4010134:	d8c02b03 	ldbu	r3,172(sp)
 4010138:	d8c02785 	stb	r3,158(sp)
 401013c:	003e9306 	br	400fb8c <__alt_mem_onchip_memory2_0+0xfc00e90c>
 4010140:	00c00044 	movi	r3,1
 4010144:	d8c02905 	stb	r3,164(sp)
 4010148:	00c00ac4 	movi	r3,43
 401014c:	d8c02b05 	stb	r3,172(sp)
 4010150:	ac400007 	ldb	r17,0(r21)
 4010154:	003d4306 	br	400f664 <__alt_mem_onchip_memory2_0+0xfc00e3e4>
 4010158:	84000814 	ori	r16,r16,32
 401015c:	ac400007 	ldb	r17,0(r21)
 4010160:	003d4006 	br	400f664 <__alt_mem_onchip_memory2_0+0xfc00e3e4>
 4010164:	d8802e17 	ldw	r2,184(sp)
 4010168:	8025883a 	mov	r18,r16
 401016c:	d8002785 	stb	zero,158(sp)
 4010170:	14000017 	ldw	r16,0(r2)
 4010174:	e011883a 	mov	r8,fp
 4010178:	14c00104 	addi	r19,r2,4
 401017c:	80042d26 	beq	r16,zero,4011234 <___vfprintf_internal_r+0x1d58>
 4010180:	d8c02a17 	ldw	r3,168(sp)
 4010184:	1803e416 	blt	r3,zero,4011118 <___vfprintf_internal_r+0x1c3c>
 4010188:	180d883a 	mov	r6,r3
 401018c:	000b883a 	mov	r5,zero
 4010190:	8009883a 	mov	r4,r16
 4010194:	df003d15 	stw	fp,244(sp)
 4010198:	40146080 	call	4014608 <memchr>
 401019c:	da003d17 	ldw	r8,244(sp)
 40101a0:	10046826 	beq	r2,zero,4011344 <___vfprintf_internal_r+0x1e68>
 40101a4:	1405c83a 	sub	r2,r2,r16
 40101a8:	d8802b15 	stw	r2,172(sp)
 40101ac:	1003e016 	blt	r2,zero,4011130 <___vfprintf_internal_r+0x1c54>
 40101b0:	df002783 	ldbu	fp,158(sp)
 40101b4:	d8802915 	stw	r2,164(sp)
 40101b8:	dcc02e15 	stw	r19,184(sp)
 40101bc:	d8002a15 	stw	zero,168(sp)
 40101c0:	d8003215 	stw	zero,200(sp)
 40101c4:	003ea206 	br	400fc50 <__alt_mem_onchip_memory2_0+0xfc00e9d0>
 40101c8:	8025883a 	mov	r18,r16
 40101cc:	dc002903 	ldbu	r16,164(sp)
 40101d0:	e011883a 	mov	r8,fp
 40101d4:	84003fcc 	andi	r16,r16,255
 40101d8:	803f8d26 	beq	r16,zero,4010010 <__alt_mem_onchip_memory2_0+0xfc00ed90>
 40101dc:	d8c02b03 	ldbu	r3,172(sp)
 40101e0:	d8c02785 	stb	r3,158(sp)
 40101e4:	003f8a06 	br	4010010 <__alt_mem_onchip_memory2_0+0xfc00ed90>
 40101e8:	8025883a 	mov	r18,r16
 40101ec:	dc002903 	ldbu	r16,164(sp)
 40101f0:	e011883a 	mov	r8,fp
 40101f4:	84003fcc 	andi	r16,r16,255
 40101f8:	8005661e 	bne	r16,zero,4011794 <___vfprintf_internal_r+0x22b8>
 40101fc:	010100b4 	movhi	r4,1026
 4010200:	211c7a04 	addi	r4,r4,29160
 4010204:	d9003915 	stw	r4,228(sp)
 4010208:	9080080c 	andi	r2,r18,32
 401020c:	103f9f1e 	bne	r2,zero,401008c <__alt_mem_onchip_memory2_0+0xfc00ee0c>
 4010210:	9080040c 	andi	r2,r18,16
 4010214:	1002eb26 	beq	r2,zero,4010dc4 <___vfprintf_internal_r+0x18e8>
 4010218:	d8802e17 	ldw	r2,184(sp)
 401021c:	002d883a 	mov	r22,zero
 4010220:	14c00017 	ldw	r19,0(r2)
 4010224:	10800104 	addi	r2,r2,4
 4010228:	d8802e15 	stw	r2,184(sp)
 401022c:	003f9c06 	br	40100a0 <__alt_mem_onchip_memory2_0+0xfc00ee20>
 4010230:	d8802b07 	ldb	r2,172(sp)
 4010234:	1002e11e 	bne	r2,zero,4010dbc <___vfprintf_internal_r+0x18e0>
 4010238:	00c00044 	movi	r3,1
 401023c:	d8c02905 	stb	r3,164(sp)
 4010240:	00c00804 	movi	r3,32
 4010244:	d8c02b05 	stb	r3,172(sp)
 4010248:	ac400007 	ldb	r17,0(r21)
 401024c:	003d0506 	br	400f664 <__alt_mem_onchip_memory2_0+0xfc00e3e4>
 4010250:	84000054 	ori	r16,r16,1
 4010254:	ac400007 	ldb	r17,0(r21)
 4010258:	003d0206 	br	400f664 <__alt_mem_onchip_memory2_0+0xfc00e3e4>
 401025c:	8025883a 	mov	r18,r16
 4010260:	dc002903 	ldbu	r16,164(sp)
 4010264:	e011883a 	mov	r8,fp
 4010268:	84003fcc 	andi	r16,r16,255
 401026c:	803de726 	beq	r16,zero,400fa0c <__alt_mem_onchip_memory2_0+0xfc00e78c>
 4010270:	d8c02b03 	ldbu	r3,172(sp)
 4010274:	d8c02785 	stb	r3,158(sp)
 4010278:	003de406 	br	400fa0c <__alt_mem_onchip_memory2_0+0xfc00e78c>
 401027c:	84001014 	ori	r16,r16,64
 4010280:	ac400007 	ldb	r17,0(r21)
 4010284:	003cf706 	br	400f664 <__alt_mem_onchip_memory2_0+0xfc00e3e4>
 4010288:	ac400007 	ldb	r17,0(r21)
 401028c:	00801b04 	movi	r2,108
 4010290:	88838f26 	beq	r17,r2,40110d0 <___vfprintf_internal_r+0x1bf4>
 4010294:	84000414 	ori	r16,r16,16
 4010298:	003cf206 	br	400f664 <__alt_mem_onchip_memory2_0+0xfc00e3e4>
 401029c:	8025883a 	mov	r18,r16
 40102a0:	dc002903 	ldbu	r16,164(sp)
 40102a4:	e011883a 	mov	r8,fp
 40102a8:	84003fcc 	andi	r16,r16,255
 40102ac:	80053f1e 	bne	r16,zero,40117ac <___vfprintf_internal_r+0x22d0>
 40102b0:	9080080c 	andi	r2,r18,32
 40102b4:	1002d226 	beq	r2,zero,4010e00 <___vfprintf_internal_r+0x1924>
 40102b8:	d9002e17 	ldw	r4,184(sp)
 40102bc:	d9402f17 	ldw	r5,188(sp)
 40102c0:	20800017 	ldw	r2,0(r4)
 40102c4:	2807d7fa 	srai	r3,r5,31
 40102c8:	21000104 	addi	r4,r4,4
 40102cc:	d9002e15 	stw	r4,184(sp)
 40102d0:	11400015 	stw	r5,0(r2)
 40102d4:	10c00115 	stw	r3,4(r2)
 40102d8:	003cb806 	br	400f5bc <__alt_mem_onchip_memory2_0+0xfc00e33c>
 40102dc:	d8c02e17 	ldw	r3,184(sp)
 40102e0:	d9002e17 	ldw	r4,184(sp)
 40102e4:	8025883a 	mov	r18,r16
 40102e8:	18800017 	ldw	r2,0(r3)
 40102ec:	21000104 	addi	r4,r4,4
 40102f0:	00c00044 	movi	r3,1
 40102f4:	e011883a 	mov	r8,fp
 40102f8:	d8c02915 	stw	r3,164(sp)
 40102fc:	d8002785 	stb	zero,158(sp)
 4010300:	d8801405 	stb	r2,80(sp)
 4010304:	d9002e15 	stw	r4,184(sp)
 4010308:	d8c02b15 	stw	r3,172(sp)
 401030c:	d8002a15 	stw	zero,168(sp)
 4010310:	d8003215 	stw	zero,200(sp)
 4010314:	dc001404 	addi	r16,sp,80
 4010318:	0039883a 	mov	fp,zero
 401031c:	003e5306 	br	400fc6c <__alt_mem_onchip_memory2_0+0xfc00e9ec>
 4010320:	010100b4 	movhi	r4,1026
 4010324:	211c7a04 	addi	r4,r4,29160
 4010328:	0039883a 	mov	fp,zero
 401032c:	d9003915 	stw	r4,228(sp)
 4010330:	04401e04 	movi	r17,120
 4010334:	003f6906 	br	40100dc <__alt_mem_onchip_memory2_0+0xfc00ee5c>
 4010338:	8025883a 	mov	r18,r16
 401033c:	dc002903 	ldbu	r16,164(sp)
 4010340:	e011883a 	mov	r8,fp
 4010344:	84003fcc 	andi	r16,r16,255
 4010348:	8005081e 	bne	r16,zero,401176c <___vfprintf_internal_r+0x2290>
 401034c:	883d6126 	beq	r17,zero,400f8d4 <__alt_mem_onchip_memory2_0+0xfc00e654>
 4010350:	00c00044 	movi	r3,1
 4010354:	d8c02915 	stw	r3,164(sp)
 4010358:	dc401405 	stb	r17,80(sp)
 401035c:	d8002785 	stb	zero,158(sp)
 4010360:	003fe906 	br	4010308 <__alt_mem_onchip_memory2_0+0xfc00f088>
 4010364:	014100b4 	movhi	r5,1026
 4010368:	295c7a04 	addi	r5,r5,29160
 401036c:	d9403915 	stw	r5,228(sp)
 4010370:	d8c02e15 	stw	r3,184(sp)
 4010374:	1025883a 	mov	r18,r2
 4010378:	04401e04 	movi	r17,120
 401037c:	9d84b03a 	or	r2,r19,r22
 4010380:	1000fc1e 	bne	r2,zero,4010774 <___vfprintf_internal_r+0x1298>
 4010384:	0039883a 	mov	fp,zero
 4010388:	00800084 	movi	r2,2
 401038c:	10803fcc 	andi	r2,r2,255
 4010390:	00c00044 	movi	r3,1
 4010394:	10c20f26 	beq	r2,r3,4010bd4 <___vfprintf_internal_r+0x16f8>
 4010398:	00c00084 	movi	r3,2
 401039c:	10fd3326 	beq	r2,r3,400f86c <__alt_mem_onchip_memory2_0+0xfc00e5ec>
 40103a0:	003e0b06 	br	400fbd0 <__alt_mem_onchip_memory2_0+0xfc00e950>
 40103a4:	d8c02017 	ldw	r3,128(sp)
 40103a8:	003e7106 	br	400fd70 <__alt_mem_onchip_memory2_0+0xfc00eaf0>
 40103ac:	00801944 	movi	r2,101
 40103b0:	14407e0e 	bge	r2,r17,40105ac <___vfprintf_internal_r+0x10d0>
 40103b4:	d9003617 	ldw	r4,216(sp)
 40103b8:	d9403817 	ldw	r5,224(sp)
 40103bc:	000d883a 	mov	r6,zero
 40103c0:	000f883a 	mov	r7,zero
 40103c4:	d8c03c15 	stw	r3,240(sp)
 40103c8:	da003d15 	stw	r8,244(sp)
 40103cc:	4019ffc0 	call	4019ffc <__eqdf2>
 40103d0:	d8c03c17 	ldw	r3,240(sp)
 40103d4:	da003d17 	ldw	r8,244(sp)
 40103d8:	1000f71e 	bne	r2,zero,40107b8 <___vfprintf_internal_r+0x12dc>
 40103dc:	d8801f17 	ldw	r2,124(sp)
 40103e0:	010100b4 	movhi	r4,1026
 40103e4:	211c8104 	addi	r4,r4,29188
 40103e8:	18c00044 	addi	r3,r3,1
 40103ec:	10800044 	addi	r2,r2,1
 40103f0:	41000015 	stw	r4,0(r8)
 40103f4:	01000044 	movi	r4,1
 40103f8:	41000115 	stw	r4,4(r8)
 40103fc:	d8c02015 	stw	r3,128(sp)
 4010400:	d8801f15 	stw	r2,124(sp)
 4010404:	010001c4 	movi	r4,7
 4010408:	2082b816 	blt	r4,r2,4010eec <___vfprintf_internal_r+0x1a10>
 401040c:	42000204 	addi	r8,r8,8
 4010410:	d8802617 	ldw	r2,152(sp)
 4010414:	d9403317 	ldw	r5,204(sp)
 4010418:	11400216 	blt	r2,r5,4010424 <___vfprintf_internal_r+0xf48>
 401041c:	9080004c 	andi	r2,r18,1
 4010420:	103eb326 	beq	r2,zero,400fef0 <__alt_mem_onchip_memory2_0+0xfc00ec70>
 4010424:	d8803717 	ldw	r2,220(sp)
 4010428:	d9003417 	ldw	r4,208(sp)
 401042c:	d9403717 	ldw	r5,220(sp)
 4010430:	1887883a 	add	r3,r3,r2
 4010434:	d8801f17 	ldw	r2,124(sp)
 4010438:	41000015 	stw	r4,0(r8)
 401043c:	41400115 	stw	r5,4(r8)
 4010440:	10800044 	addi	r2,r2,1
 4010444:	d8c02015 	stw	r3,128(sp)
 4010448:	d8801f15 	stw	r2,124(sp)
 401044c:	010001c4 	movi	r4,7
 4010450:	20832916 	blt	r4,r2,40110f8 <___vfprintf_internal_r+0x1c1c>
 4010454:	42000204 	addi	r8,r8,8
 4010458:	d8803317 	ldw	r2,204(sp)
 401045c:	143fffc4 	addi	r16,r2,-1
 4010460:	043ea30e 	bge	zero,r16,400fef0 <__alt_mem_onchip_memory2_0+0xfc00ec70>
 4010464:	04400404 	movi	r17,16
 4010468:	d8801f17 	ldw	r2,124(sp)
 401046c:	8c00880e 	bge	r17,r16,4010690 <___vfprintf_internal_r+0x11b4>
 4010470:	014100b4 	movhi	r5,1026
 4010474:	295c8184 	addi	r5,r5,29190
 4010478:	d9402c15 	stw	r5,176(sp)
 401047c:	058001c4 	movi	r22,7
 4010480:	dcc02d17 	ldw	r19,180(sp)
 4010484:	00000306 	br	4010494 <___vfprintf_internal_r+0xfb8>
 4010488:	42000204 	addi	r8,r8,8
 401048c:	843ffc04 	addi	r16,r16,-16
 4010490:	8c00820e 	bge	r17,r16,401069c <___vfprintf_internal_r+0x11c0>
 4010494:	18c00404 	addi	r3,r3,16
 4010498:	10800044 	addi	r2,r2,1
 401049c:	45000015 	stw	r20,0(r8)
 40104a0:	44400115 	stw	r17,4(r8)
 40104a4:	d8c02015 	stw	r3,128(sp)
 40104a8:	d8801f15 	stw	r2,124(sp)
 40104ac:	b0bff60e 	bge	r22,r2,4010488 <__alt_mem_onchip_memory2_0+0xfc00f208>
 40104b0:	d9801e04 	addi	r6,sp,120
 40104b4:	b80b883a 	mov	r5,r23
 40104b8:	9809883a 	mov	r4,r19
 40104bc:	40162780 	call	4016278 <__sprint_r>
 40104c0:	103d0a1e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 40104c4:	d8c02017 	ldw	r3,128(sp)
 40104c8:	d8801f17 	ldw	r2,124(sp)
 40104cc:	da000404 	addi	r8,sp,16
 40104d0:	003fee06 	br	401048c <__alt_mem_onchip_memory2_0+0xfc00f20c>
 40104d4:	d9403117 	ldw	r5,196(sp)
 40104d8:	d8802917 	ldw	r2,164(sp)
 40104dc:	28adc83a 	sub	r22,r5,r2
 40104e0:	05be410e 	bge	zero,r22,400fde8 <__alt_mem_onchip_memory2_0+0xfc00eb68>
 40104e4:	07000404 	movi	fp,16
 40104e8:	d8801f17 	ldw	r2,124(sp)
 40104ec:	e5838f0e 	bge	fp,r22,401132c <___vfprintf_internal_r+0x1e50>
 40104f0:	014100b4 	movhi	r5,1026
 40104f4:	295c8184 	addi	r5,r5,29190
 40104f8:	dc403015 	stw	r17,192(sp)
 40104fc:	d9402c15 	stw	r5,176(sp)
 4010500:	b023883a 	mov	r17,r22
 4010504:	04c001c4 	movi	r19,7
 4010508:	a82d883a 	mov	r22,r21
 401050c:	902b883a 	mov	r21,r18
 4010510:	8025883a 	mov	r18,r16
 4010514:	dc002d17 	ldw	r16,180(sp)
 4010518:	00000306 	br	4010528 <___vfprintf_internal_r+0x104c>
 401051c:	8c7ffc04 	addi	r17,r17,-16
 4010520:	42000204 	addi	r8,r8,8
 4010524:	e440110e 	bge	fp,r17,401056c <___vfprintf_internal_r+0x1090>
 4010528:	18c00404 	addi	r3,r3,16
 401052c:	10800044 	addi	r2,r2,1
 4010530:	45000015 	stw	r20,0(r8)
 4010534:	47000115 	stw	fp,4(r8)
 4010538:	d8c02015 	stw	r3,128(sp)
 401053c:	d8801f15 	stw	r2,124(sp)
 4010540:	98bff60e 	bge	r19,r2,401051c <__alt_mem_onchip_memory2_0+0xfc00f29c>
 4010544:	d9801e04 	addi	r6,sp,120
 4010548:	b80b883a 	mov	r5,r23
 401054c:	8009883a 	mov	r4,r16
 4010550:	40162780 	call	4016278 <__sprint_r>
 4010554:	103ce51e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 4010558:	8c7ffc04 	addi	r17,r17,-16
 401055c:	d8c02017 	ldw	r3,128(sp)
 4010560:	d8801f17 	ldw	r2,124(sp)
 4010564:	da000404 	addi	r8,sp,16
 4010568:	e47fef16 	blt	fp,r17,4010528 <__alt_mem_onchip_memory2_0+0xfc00f2a8>
 401056c:	9021883a 	mov	r16,r18
 4010570:	a825883a 	mov	r18,r21
 4010574:	b02b883a 	mov	r21,r22
 4010578:	882d883a 	mov	r22,r17
 401057c:	dc403017 	ldw	r17,192(sp)
 4010580:	d9002c17 	ldw	r4,176(sp)
 4010584:	1d87883a 	add	r3,r3,r22
 4010588:	10800044 	addi	r2,r2,1
 401058c:	41000015 	stw	r4,0(r8)
 4010590:	45800115 	stw	r22,4(r8)
 4010594:	d8c02015 	stw	r3,128(sp)
 4010598:	d8801f15 	stw	r2,124(sp)
 401059c:	010001c4 	movi	r4,7
 40105a0:	20818e16 	blt	r4,r2,4010bdc <___vfprintf_internal_r+0x1700>
 40105a4:	42000204 	addi	r8,r8,8
 40105a8:	003e0f06 	br	400fde8 <__alt_mem_onchip_memory2_0+0xfc00eb68>
 40105ac:	d9403317 	ldw	r5,204(sp)
 40105b0:	00800044 	movi	r2,1
 40105b4:	18c00044 	addi	r3,r3,1
 40105b8:	1141530e 	bge	r2,r5,4010b08 <___vfprintf_internal_r+0x162c>
 40105bc:	dc401f17 	ldw	r17,124(sp)
 40105c0:	00800044 	movi	r2,1
 40105c4:	40800115 	stw	r2,4(r8)
 40105c8:	8c400044 	addi	r17,r17,1
 40105cc:	44000015 	stw	r16,0(r8)
 40105d0:	d8c02015 	stw	r3,128(sp)
 40105d4:	dc401f15 	stw	r17,124(sp)
 40105d8:	008001c4 	movi	r2,7
 40105dc:	14416b16 	blt	r2,r17,4010b8c <___vfprintf_internal_r+0x16b0>
 40105e0:	42000204 	addi	r8,r8,8
 40105e4:	d8803717 	ldw	r2,220(sp)
 40105e8:	d9003417 	ldw	r4,208(sp)
 40105ec:	8c400044 	addi	r17,r17,1
 40105f0:	10c7883a 	add	r3,r2,r3
 40105f4:	40800115 	stw	r2,4(r8)
 40105f8:	41000015 	stw	r4,0(r8)
 40105fc:	d8c02015 	stw	r3,128(sp)
 4010600:	dc401f15 	stw	r17,124(sp)
 4010604:	008001c4 	movi	r2,7
 4010608:	14416916 	blt	r2,r17,4010bb0 <___vfprintf_internal_r+0x16d4>
 401060c:	45800204 	addi	r22,r8,8
 4010610:	d9003617 	ldw	r4,216(sp)
 4010614:	d9403817 	ldw	r5,224(sp)
 4010618:	000d883a 	mov	r6,zero
 401061c:	000f883a 	mov	r7,zero
 4010620:	d8c03c15 	stw	r3,240(sp)
 4010624:	4019ffc0 	call	4019ffc <__eqdf2>
 4010628:	d8c03c17 	ldw	r3,240(sp)
 401062c:	1000bc26 	beq	r2,zero,4010920 <___vfprintf_internal_r+0x1444>
 4010630:	d9403317 	ldw	r5,204(sp)
 4010634:	84000044 	addi	r16,r16,1
 4010638:	8c400044 	addi	r17,r17,1
 401063c:	28bfffc4 	addi	r2,r5,-1
 4010640:	1887883a 	add	r3,r3,r2
 4010644:	b0800115 	stw	r2,4(r22)
 4010648:	b4000015 	stw	r16,0(r22)
 401064c:	d8c02015 	stw	r3,128(sp)
 4010650:	dc401f15 	stw	r17,124(sp)
 4010654:	008001c4 	movi	r2,7
 4010658:	14414316 	blt	r2,r17,4010b68 <___vfprintf_internal_r+0x168c>
 401065c:	b5800204 	addi	r22,r22,8
 4010660:	d9003a17 	ldw	r4,232(sp)
 4010664:	df0022c4 	addi	fp,sp,139
 4010668:	8c400044 	addi	r17,r17,1
 401066c:	20c7883a 	add	r3,r4,r3
 4010670:	b7000015 	stw	fp,0(r22)
 4010674:	b1000115 	stw	r4,4(r22)
 4010678:	d8c02015 	stw	r3,128(sp)
 401067c:	dc401f15 	stw	r17,124(sp)
 4010680:	008001c4 	movi	r2,7
 4010684:	14400e16 	blt	r2,r17,40106c0 <___vfprintf_internal_r+0x11e4>
 4010688:	b2000204 	addi	r8,r22,8
 401068c:	003e1806 	br	400fef0 <__alt_mem_onchip_memory2_0+0xfc00ec70>
 4010690:	010100b4 	movhi	r4,1026
 4010694:	211c8184 	addi	r4,r4,29190
 4010698:	d9002c15 	stw	r4,176(sp)
 401069c:	d9002c17 	ldw	r4,176(sp)
 40106a0:	1c07883a 	add	r3,r3,r16
 40106a4:	44000115 	stw	r16,4(r8)
 40106a8:	41000015 	stw	r4,0(r8)
 40106ac:	10800044 	addi	r2,r2,1
 40106b0:	d8c02015 	stw	r3,128(sp)
 40106b4:	d8801f15 	stw	r2,124(sp)
 40106b8:	010001c4 	movi	r4,7
 40106bc:	20be0b0e 	bge	r4,r2,400feec <__alt_mem_onchip_memory2_0+0xfc00ec6c>
 40106c0:	d9002d17 	ldw	r4,180(sp)
 40106c4:	d9801e04 	addi	r6,sp,120
 40106c8:	b80b883a 	mov	r5,r23
 40106cc:	40162780 	call	4016278 <__sprint_r>
 40106d0:	103c861e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 40106d4:	d8c02017 	ldw	r3,128(sp)
 40106d8:	da000404 	addi	r8,sp,16
 40106dc:	003e0406 	br	400fef0 <__alt_mem_onchip_memory2_0+0xfc00ec70>
 40106e0:	d9002d17 	ldw	r4,180(sp)
 40106e4:	d9801e04 	addi	r6,sp,120
 40106e8:	b80b883a 	mov	r5,r23
 40106ec:	40162780 	call	4016278 <__sprint_r>
 40106f0:	103e3b26 	beq	r2,zero,400ffe0 <__alt_mem_onchip_memory2_0+0xfc00ed60>
 40106f4:	003c7d06 	br	400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 40106f8:	d9002d17 	ldw	r4,180(sp)
 40106fc:	d9801e04 	addi	r6,sp,120
 4010700:	b80b883a 	mov	r5,r23
 4010704:	40162780 	call	4016278 <__sprint_r>
 4010708:	103c781e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 401070c:	d8c02017 	ldw	r3,128(sp)
 4010710:	da000404 	addi	r8,sp,16
 4010714:	003de906 	br	400febc <__alt_mem_onchip_memory2_0+0xfc00ec3c>
 4010718:	d9002d17 	ldw	r4,180(sp)
 401071c:	d9801e04 	addi	r6,sp,120
 4010720:	b80b883a 	mov	r5,r23
 4010724:	40162780 	call	4016278 <__sprint_r>
 4010728:	103c701e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 401072c:	d8c02017 	ldw	r3,128(sp)
 4010730:	da000404 	addi	r8,sp,16
 4010734:	003d9b06 	br	400fda4 <__alt_mem_onchip_memory2_0+0xfc00eb24>
 4010738:	d9002d17 	ldw	r4,180(sp)
 401073c:	d9801e04 	addi	r6,sp,120
 4010740:	b80b883a 	mov	r5,r23
 4010744:	40162780 	call	4016278 <__sprint_r>
 4010748:	103c681e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 401074c:	d8c02017 	ldw	r3,128(sp)
 4010750:	da000404 	addi	r8,sp,16
 4010754:	003da106 	br	400fddc <__alt_mem_onchip_memory2_0+0xfc00eb5c>
 4010758:	d9402a17 	ldw	r5,168(sp)
 401075c:	d8002785 	stb	zero,158(sp)
 4010760:	283f0616 	blt	r5,zero,401037c <__alt_mem_onchip_memory2_0+0xfc00f0fc>
 4010764:	00ffdfc4 	movi	r3,-129
 4010768:	9d84b03a 	or	r2,r19,r22
 401076c:	90e4703a 	and	r18,r18,r3
 4010770:	103c3b26 	beq	r2,zero,400f860 <__alt_mem_onchip_memory2_0+0xfc00e5e0>
 4010774:	0039883a 	mov	fp,zero
 4010778:	003e5806 	br	40100dc <__alt_mem_onchip_memory2_0+0xfc00ee5c>
 401077c:	9080040c 	andi	r2,r18,16
 4010780:	1001b326 	beq	r2,zero,4010e50 <___vfprintf_internal_r+0x1974>
 4010784:	d8c02e17 	ldw	r3,184(sp)
 4010788:	d9002a17 	ldw	r4,168(sp)
 401078c:	d8002785 	stb	zero,158(sp)
 4010790:	18800104 	addi	r2,r3,4
 4010794:	1cc00017 	ldw	r19,0(r3)
 4010798:	002d883a 	mov	r22,zero
 401079c:	2001b516 	blt	r4,zero,4010e74 <___vfprintf_internal_r+0x1998>
 40107a0:	00ffdfc4 	movi	r3,-129
 40107a4:	d8802e15 	stw	r2,184(sp)
 40107a8:	90e4703a 	and	r18,r18,r3
 40107ac:	983d0526 	beq	r19,zero,400fbc4 <__alt_mem_onchip_memory2_0+0xfc00e944>
 40107b0:	0039883a 	mov	fp,zero
 40107b4:	003d0806 	br	400fbd8 <__alt_mem_onchip_memory2_0+0xfc00e958>
 40107b8:	dc402617 	ldw	r17,152(sp)
 40107bc:	0441d30e 	bge	zero,r17,4010f0c <___vfprintf_internal_r+0x1a30>
 40107c0:	dc403217 	ldw	r17,200(sp)
 40107c4:	d8803317 	ldw	r2,204(sp)
 40107c8:	1440010e 	bge	r2,r17,40107d0 <___vfprintf_internal_r+0x12f4>
 40107cc:	1023883a 	mov	r17,r2
 40107d0:	04400a0e 	bge	zero,r17,40107fc <___vfprintf_internal_r+0x1320>
 40107d4:	d8801f17 	ldw	r2,124(sp)
 40107d8:	1c47883a 	add	r3,r3,r17
 40107dc:	44000015 	stw	r16,0(r8)
 40107e0:	10800044 	addi	r2,r2,1
 40107e4:	44400115 	stw	r17,4(r8)
 40107e8:	d8c02015 	stw	r3,128(sp)
 40107ec:	d8801f15 	stw	r2,124(sp)
 40107f0:	010001c4 	movi	r4,7
 40107f4:	20826516 	blt	r4,r2,401118c <___vfprintf_internal_r+0x1cb0>
 40107f8:	42000204 	addi	r8,r8,8
 40107fc:	88026116 	blt	r17,zero,4011184 <___vfprintf_internal_r+0x1ca8>
 4010800:	d9003217 	ldw	r4,200(sp)
 4010804:	2463c83a 	sub	r17,r4,r17
 4010808:	04407b0e 	bge	zero,r17,40109f8 <___vfprintf_internal_r+0x151c>
 401080c:	05800404 	movi	r22,16
 4010810:	d8801f17 	ldw	r2,124(sp)
 4010814:	b4419d0e 	bge	r22,r17,4010e8c <___vfprintf_internal_r+0x19b0>
 4010818:	010100b4 	movhi	r4,1026
 401081c:	211c8184 	addi	r4,r4,29190
 4010820:	d9002c15 	stw	r4,176(sp)
 4010824:	070001c4 	movi	fp,7
 4010828:	dcc02d17 	ldw	r19,180(sp)
 401082c:	00000306 	br	401083c <___vfprintf_internal_r+0x1360>
 4010830:	42000204 	addi	r8,r8,8
 4010834:	8c7ffc04 	addi	r17,r17,-16
 4010838:	b441970e 	bge	r22,r17,4010e98 <___vfprintf_internal_r+0x19bc>
 401083c:	18c00404 	addi	r3,r3,16
 4010840:	10800044 	addi	r2,r2,1
 4010844:	45000015 	stw	r20,0(r8)
 4010848:	45800115 	stw	r22,4(r8)
 401084c:	d8c02015 	stw	r3,128(sp)
 4010850:	d8801f15 	stw	r2,124(sp)
 4010854:	e0bff60e 	bge	fp,r2,4010830 <__alt_mem_onchip_memory2_0+0xfc00f5b0>
 4010858:	d9801e04 	addi	r6,sp,120
 401085c:	b80b883a 	mov	r5,r23
 4010860:	9809883a 	mov	r4,r19
 4010864:	40162780 	call	4016278 <__sprint_r>
 4010868:	103c201e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 401086c:	d8c02017 	ldw	r3,128(sp)
 4010870:	d8801f17 	ldw	r2,124(sp)
 4010874:	da000404 	addi	r8,sp,16
 4010878:	003fee06 	br	4010834 <__alt_mem_onchip_memory2_0+0xfc00f5b4>
 401087c:	d9002d17 	ldw	r4,180(sp)
 4010880:	d9801e04 	addi	r6,sp,120
 4010884:	b80b883a 	mov	r5,r23
 4010888:	40162780 	call	4016278 <__sprint_r>
 401088c:	103c171e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 4010890:	d8c02017 	ldw	r3,128(sp)
 4010894:	df002787 	ldb	fp,158(sp)
 4010898:	da000404 	addi	r8,sp,16
 401089c:	003d3406 	br	400fd70 <__alt_mem_onchip_memory2_0+0xfc00eaf0>
 40108a0:	9080040c 	andi	r2,r18,16
 40108a4:	10016126 	beq	r2,zero,4010e2c <___vfprintf_internal_r+0x1950>
 40108a8:	d9402e17 	ldw	r5,184(sp)
 40108ac:	2cc00017 	ldw	r19,0(r5)
 40108b0:	29400104 	addi	r5,r5,4
 40108b4:	d9402e15 	stw	r5,184(sp)
 40108b8:	982dd7fa 	srai	r22,r19,31
 40108bc:	b005883a 	mov	r2,r22
 40108c0:	003c5a06 	br	400fa2c <__alt_mem_onchip_memory2_0+0xfc00e7ac>
 40108c4:	9080040c 	andi	r2,r18,16
 40108c8:	10003526 	beq	r2,zero,40109a0 <___vfprintf_internal_r+0x14c4>
 40108cc:	d8c02e17 	ldw	r3,184(sp)
 40108d0:	d9002a17 	ldw	r4,168(sp)
 40108d4:	d8002785 	stb	zero,158(sp)
 40108d8:	18800104 	addi	r2,r3,4
 40108dc:	1cc00017 	ldw	r19,0(r3)
 40108e0:	002d883a 	mov	r22,zero
 40108e4:	20003716 	blt	r4,zero,40109c4 <___vfprintf_internal_r+0x14e8>
 40108e8:	00ffdfc4 	movi	r3,-129
 40108ec:	d8802e15 	stw	r2,184(sp)
 40108f0:	90e4703a 	and	r18,r18,r3
 40108f4:	0039883a 	mov	fp,zero
 40108f8:	983dd426 	beq	r19,zero,401004c <__alt_mem_onchip_memory2_0+0xfc00edcc>
 40108fc:	00800244 	movi	r2,9
 4010900:	14fc5336 	bltu	r2,r19,400fa50 <__alt_mem_onchip_memory2_0+0xfc00e7d0>
 4010904:	d8c02817 	ldw	r3,160(sp)
 4010908:	dc001dc4 	addi	r16,sp,119
 401090c:	9cc00c04 	addi	r19,r19,48
 4010910:	1c07c83a 	sub	r3,r3,r16
 4010914:	dcc01dc5 	stb	r19,119(sp)
 4010918:	d8c02b15 	stw	r3,172(sp)
 401091c:	003cc606 	br	400fc38 <__alt_mem_onchip_memory2_0+0xfc00e9b8>
 4010920:	d8803317 	ldw	r2,204(sp)
 4010924:	143fffc4 	addi	r16,r2,-1
 4010928:	043f4d0e 	bge	zero,r16,4010660 <__alt_mem_onchip_memory2_0+0xfc00f3e0>
 401092c:	07000404 	movi	fp,16
 4010930:	e400810e 	bge	fp,r16,4010b38 <___vfprintf_internal_r+0x165c>
 4010934:	014100b4 	movhi	r5,1026
 4010938:	295c8184 	addi	r5,r5,29190
 401093c:	d9402c15 	stw	r5,176(sp)
 4010940:	01c001c4 	movi	r7,7
 4010944:	dcc02d17 	ldw	r19,180(sp)
 4010948:	00000306 	br	4010958 <___vfprintf_internal_r+0x147c>
 401094c:	b5800204 	addi	r22,r22,8
 4010950:	843ffc04 	addi	r16,r16,-16
 4010954:	e4007b0e 	bge	fp,r16,4010b44 <___vfprintf_internal_r+0x1668>
 4010958:	18c00404 	addi	r3,r3,16
 401095c:	8c400044 	addi	r17,r17,1
 4010960:	b5000015 	stw	r20,0(r22)
 4010964:	b7000115 	stw	fp,4(r22)
 4010968:	d8c02015 	stw	r3,128(sp)
 401096c:	dc401f15 	stw	r17,124(sp)
 4010970:	3c7ff60e 	bge	r7,r17,401094c <__alt_mem_onchip_memory2_0+0xfc00f6cc>
 4010974:	d9801e04 	addi	r6,sp,120
 4010978:	b80b883a 	mov	r5,r23
 401097c:	9809883a 	mov	r4,r19
 4010980:	d9c03c15 	stw	r7,240(sp)
 4010984:	40162780 	call	4016278 <__sprint_r>
 4010988:	d9c03c17 	ldw	r7,240(sp)
 401098c:	103bd71e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 4010990:	d8c02017 	ldw	r3,128(sp)
 4010994:	dc401f17 	ldw	r17,124(sp)
 4010998:	dd800404 	addi	r22,sp,16
 401099c:	003fec06 	br	4010950 <__alt_mem_onchip_memory2_0+0xfc00f6d0>
 40109a0:	9080100c 	andi	r2,r18,64
 40109a4:	d8002785 	stb	zero,158(sp)
 40109a8:	10010e26 	beq	r2,zero,4010de4 <___vfprintf_internal_r+0x1908>
 40109ac:	d9402e17 	ldw	r5,184(sp)
 40109b0:	d8c02a17 	ldw	r3,168(sp)
 40109b4:	002d883a 	mov	r22,zero
 40109b8:	28800104 	addi	r2,r5,4
 40109bc:	2cc0000b 	ldhu	r19,0(r5)
 40109c0:	183fc90e 	bge	r3,zero,40108e8 <__alt_mem_onchip_memory2_0+0xfc00f668>
 40109c4:	d8802e15 	stw	r2,184(sp)
 40109c8:	0039883a 	mov	fp,zero
 40109cc:	9d84b03a 	or	r2,r19,r22
 40109d0:	103c1e1e 	bne	r2,zero,400fa4c <__alt_mem_onchip_memory2_0+0xfc00e7cc>
 40109d4:	00800044 	movi	r2,1
 40109d8:	003e6c06 	br	401038c <__alt_mem_onchip_memory2_0+0xfc00f10c>
 40109dc:	d9002d17 	ldw	r4,180(sp)
 40109e0:	d9801e04 	addi	r6,sp,120
 40109e4:	b80b883a 	mov	r5,r23
 40109e8:	40162780 	call	4016278 <__sprint_r>
 40109ec:	103bbf1e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 40109f0:	d8c02017 	ldw	r3,128(sp)
 40109f4:	da000404 	addi	r8,sp,16
 40109f8:	d9003217 	ldw	r4,200(sp)
 40109fc:	d8802617 	ldw	r2,152(sp)
 4010a00:	d9403317 	ldw	r5,204(sp)
 4010a04:	8123883a 	add	r17,r16,r4
 4010a08:	11400216 	blt	r2,r5,4010a14 <___vfprintf_internal_r+0x1538>
 4010a0c:	9100004c 	andi	r4,r18,1
 4010a10:	20000d26 	beq	r4,zero,4010a48 <___vfprintf_internal_r+0x156c>
 4010a14:	d9003717 	ldw	r4,220(sp)
 4010a18:	d9403417 	ldw	r5,208(sp)
 4010a1c:	1907883a 	add	r3,r3,r4
 4010a20:	d9001f17 	ldw	r4,124(sp)
 4010a24:	41400015 	stw	r5,0(r8)
 4010a28:	d9403717 	ldw	r5,220(sp)
 4010a2c:	21000044 	addi	r4,r4,1
 4010a30:	d8c02015 	stw	r3,128(sp)
 4010a34:	41400115 	stw	r5,4(r8)
 4010a38:	d9001f15 	stw	r4,124(sp)
 4010a3c:	014001c4 	movi	r5,7
 4010a40:	2901e816 	blt	r5,r4,40111e4 <___vfprintf_internal_r+0x1d08>
 4010a44:	42000204 	addi	r8,r8,8
 4010a48:	d9003317 	ldw	r4,204(sp)
 4010a4c:	8121883a 	add	r16,r16,r4
 4010a50:	2085c83a 	sub	r2,r4,r2
 4010a54:	8461c83a 	sub	r16,r16,r17
 4010a58:	1400010e 	bge	r2,r16,4010a60 <___vfprintf_internal_r+0x1584>
 4010a5c:	1021883a 	mov	r16,r2
 4010a60:	04000a0e 	bge	zero,r16,4010a8c <___vfprintf_internal_r+0x15b0>
 4010a64:	d9001f17 	ldw	r4,124(sp)
 4010a68:	1c07883a 	add	r3,r3,r16
 4010a6c:	44400015 	stw	r17,0(r8)
 4010a70:	21000044 	addi	r4,r4,1
 4010a74:	44000115 	stw	r16,4(r8)
 4010a78:	d8c02015 	stw	r3,128(sp)
 4010a7c:	d9001f15 	stw	r4,124(sp)
 4010a80:	014001c4 	movi	r5,7
 4010a84:	2901fb16 	blt	r5,r4,4011274 <___vfprintf_internal_r+0x1d98>
 4010a88:	42000204 	addi	r8,r8,8
 4010a8c:	8001f716 	blt	r16,zero,401126c <___vfprintf_internal_r+0x1d90>
 4010a90:	1421c83a 	sub	r16,r2,r16
 4010a94:	043d160e 	bge	zero,r16,400fef0 <__alt_mem_onchip_memory2_0+0xfc00ec70>
 4010a98:	04400404 	movi	r17,16
 4010a9c:	d8801f17 	ldw	r2,124(sp)
 4010aa0:	8c3efb0e 	bge	r17,r16,4010690 <__alt_mem_onchip_memory2_0+0xfc00f410>
 4010aa4:	014100b4 	movhi	r5,1026
 4010aa8:	295c8184 	addi	r5,r5,29190
 4010aac:	d9402c15 	stw	r5,176(sp)
 4010ab0:	058001c4 	movi	r22,7
 4010ab4:	dcc02d17 	ldw	r19,180(sp)
 4010ab8:	00000306 	br	4010ac8 <___vfprintf_internal_r+0x15ec>
 4010abc:	42000204 	addi	r8,r8,8
 4010ac0:	843ffc04 	addi	r16,r16,-16
 4010ac4:	8c3ef50e 	bge	r17,r16,401069c <__alt_mem_onchip_memory2_0+0xfc00f41c>
 4010ac8:	18c00404 	addi	r3,r3,16
 4010acc:	10800044 	addi	r2,r2,1
 4010ad0:	45000015 	stw	r20,0(r8)
 4010ad4:	44400115 	stw	r17,4(r8)
 4010ad8:	d8c02015 	stw	r3,128(sp)
 4010adc:	d8801f15 	stw	r2,124(sp)
 4010ae0:	b0bff60e 	bge	r22,r2,4010abc <__alt_mem_onchip_memory2_0+0xfc00f83c>
 4010ae4:	d9801e04 	addi	r6,sp,120
 4010ae8:	b80b883a 	mov	r5,r23
 4010aec:	9809883a 	mov	r4,r19
 4010af0:	40162780 	call	4016278 <__sprint_r>
 4010af4:	103b7d1e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 4010af8:	d8c02017 	ldw	r3,128(sp)
 4010afc:	d8801f17 	ldw	r2,124(sp)
 4010b00:	da000404 	addi	r8,sp,16
 4010b04:	003fee06 	br	4010ac0 <__alt_mem_onchip_memory2_0+0xfc00f840>
 4010b08:	9088703a 	and	r4,r18,r2
 4010b0c:	203eab1e 	bne	r4,zero,40105bc <__alt_mem_onchip_memory2_0+0xfc00f33c>
 4010b10:	dc401f17 	ldw	r17,124(sp)
 4010b14:	40800115 	stw	r2,4(r8)
 4010b18:	44000015 	stw	r16,0(r8)
 4010b1c:	8c400044 	addi	r17,r17,1
 4010b20:	d8c02015 	stw	r3,128(sp)
 4010b24:	dc401f15 	stw	r17,124(sp)
 4010b28:	008001c4 	movi	r2,7
 4010b2c:	14400e16 	blt	r2,r17,4010b68 <___vfprintf_internal_r+0x168c>
 4010b30:	45800204 	addi	r22,r8,8
 4010b34:	003eca06 	br	4010660 <__alt_mem_onchip_memory2_0+0xfc00f3e0>
 4010b38:	010100b4 	movhi	r4,1026
 4010b3c:	211c8184 	addi	r4,r4,29190
 4010b40:	d9002c15 	stw	r4,176(sp)
 4010b44:	d8802c17 	ldw	r2,176(sp)
 4010b48:	1c07883a 	add	r3,r3,r16
 4010b4c:	8c400044 	addi	r17,r17,1
 4010b50:	b0800015 	stw	r2,0(r22)
 4010b54:	b4000115 	stw	r16,4(r22)
 4010b58:	d8c02015 	stw	r3,128(sp)
 4010b5c:	dc401f15 	stw	r17,124(sp)
 4010b60:	008001c4 	movi	r2,7
 4010b64:	147ebd0e 	bge	r2,r17,401065c <__alt_mem_onchip_memory2_0+0xfc00f3dc>
 4010b68:	d9002d17 	ldw	r4,180(sp)
 4010b6c:	d9801e04 	addi	r6,sp,120
 4010b70:	b80b883a 	mov	r5,r23
 4010b74:	40162780 	call	4016278 <__sprint_r>
 4010b78:	103b5c1e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 4010b7c:	d8c02017 	ldw	r3,128(sp)
 4010b80:	dc401f17 	ldw	r17,124(sp)
 4010b84:	dd800404 	addi	r22,sp,16
 4010b88:	003eb506 	br	4010660 <__alt_mem_onchip_memory2_0+0xfc00f3e0>
 4010b8c:	d9002d17 	ldw	r4,180(sp)
 4010b90:	d9801e04 	addi	r6,sp,120
 4010b94:	b80b883a 	mov	r5,r23
 4010b98:	40162780 	call	4016278 <__sprint_r>
 4010b9c:	103b531e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 4010ba0:	d8c02017 	ldw	r3,128(sp)
 4010ba4:	dc401f17 	ldw	r17,124(sp)
 4010ba8:	da000404 	addi	r8,sp,16
 4010bac:	003e8d06 	br	40105e4 <__alt_mem_onchip_memory2_0+0xfc00f364>
 4010bb0:	d9002d17 	ldw	r4,180(sp)
 4010bb4:	d9801e04 	addi	r6,sp,120
 4010bb8:	b80b883a 	mov	r5,r23
 4010bbc:	40162780 	call	4016278 <__sprint_r>
 4010bc0:	103b4a1e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 4010bc4:	d8c02017 	ldw	r3,128(sp)
 4010bc8:	dc401f17 	ldw	r17,124(sp)
 4010bcc:	dd800404 	addi	r22,sp,16
 4010bd0:	003e8f06 	br	4010610 <__alt_mem_onchip_memory2_0+0xfc00f390>
 4010bd4:	0027883a 	mov	r19,zero
 4010bd8:	003f4a06 	br	4010904 <__alt_mem_onchip_memory2_0+0xfc00f684>
 4010bdc:	d9002d17 	ldw	r4,180(sp)
 4010be0:	d9801e04 	addi	r6,sp,120
 4010be4:	b80b883a 	mov	r5,r23
 4010be8:	40162780 	call	4016278 <__sprint_r>
 4010bec:	103b3f1e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 4010bf0:	d8c02017 	ldw	r3,128(sp)
 4010bf4:	da000404 	addi	r8,sp,16
 4010bf8:	003c7b06 	br	400fde8 <__alt_mem_onchip_memory2_0+0xfc00eb68>
 4010bfc:	d9402a17 	ldw	r5,168(sp)
 4010c00:	04e7c83a 	sub	r19,zero,r19
 4010c04:	07000b44 	movi	fp,45
 4010c08:	9804c03a 	cmpne	r2,r19,zero
 4010c0c:	05adc83a 	sub	r22,zero,r22
 4010c10:	df002785 	stb	fp,158(sp)
 4010c14:	b0adc83a 	sub	r22,r22,r2
 4010c18:	28017b16 	blt	r5,zero,4011208 <___vfprintf_internal_r+0x1d2c>
 4010c1c:	00bfdfc4 	movi	r2,-129
 4010c20:	90a4703a 	and	r18,r18,r2
 4010c24:	003b8906 	br	400fa4c <__alt_mem_onchip_memory2_0+0xfc00e7cc>
 4010c28:	d9003617 	ldw	r4,216(sp)
 4010c2c:	d9403817 	ldw	r5,224(sp)
 4010c30:	da003d15 	stw	r8,244(sp)
 4010c34:	4015fcc0 	call	4015fcc <__fpclassifyd>
 4010c38:	da003d17 	ldw	r8,244(sp)
 4010c3c:	1000f026 	beq	r2,zero,4011000 <___vfprintf_internal_r+0x1b24>
 4010c40:	d9002a17 	ldw	r4,168(sp)
 4010c44:	05bff7c4 	movi	r22,-33
 4010c48:	00bfffc4 	movi	r2,-1
 4010c4c:	8dac703a 	and	r22,r17,r22
 4010c50:	20820026 	beq	r4,r2,4011454 <___vfprintf_internal_r+0x1f78>
 4010c54:	008011c4 	movi	r2,71
 4010c58:	b081f726 	beq	r22,r2,4011438 <___vfprintf_internal_r+0x1f5c>
 4010c5c:	d9003817 	ldw	r4,224(sp)
 4010c60:	90c04014 	ori	r3,r18,256
 4010c64:	d8c02c15 	stw	r3,176(sp)
 4010c68:	20021516 	blt	r4,zero,40114c0 <___vfprintf_internal_r+0x1fe4>
 4010c6c:	dcc03817 	ldw	r19,224(sp)
 4010c70:	d8002905 	stb	zero,164(sp)
 4010c74:	00801984 	movi	r2,102
 4010c78:	8881f926 	beq	r17,r2,4011460 <___vfprintf_internal_r+0x1f84>
 4010c7c:	00801184 	movi	r2,70
 4010c80:	88821c26 	beq	r17,r2,40114f4 <___vfprintf_internal_r+0x2018>
 4010c84:	00801144 	movi	r2,69
 4010c88:	b081ef26 	beq	r22,r2,4011448 <___vfprintf_internal_r+0x1f6c>
 4010c8c:	d8c02a17 	ldw	r3,168(sp)
 4010c90:	d8802104 	addi	r2,sp,132
 4010c94:	d8800315 	stw	r2,12(sp)
 4010c98:	d9403617 	ldw	r5,216(sp)
 4010c9c:	d8802504 	addi	r2,sp,148
 4010ca0:	d9002d17 	ldw	r4,180(sp)
 4010ca4:	d8800215 	stw	r2,8(sp)
 4010ca8:	d8802604 	addi	r2,sp,152
 4010cac:	d8c00015 	stw	r3,0(sp)
 4010cb0:	d8800115 	stw	r2,4(sp)
 4010cb4:	01c00084 	movi	r7,2
 4010cb8:	980d883a 	mov	r6,r19
 4010cbc:	d8c03c15 	stw	r3,240(sp)
 4010cc0:	da003d15 	stw	r8,244(sp)
 4010cc4:	4011c0c0 	call	4011c0c <_dtoa_r>
 4010cc8:	1021883a 	mov	r16,r2
 4010ccc:	008019c4 	movi	r2,103
 4010cd0:	d8c03c17 	ldw	r3,240(sp)
 4010cd4:	da003d17 	ldw	r8,244(sp)
 4010cd8:	88817126 	beq	r17,r2,40112a0 <___vfprintf_internal_r+0x1dc4>
 4010cdc:	008011c4 	movi	r2,71
 4010ce0:	88829126 	beq	r17,r2,4011728 <___vfprintf_internal_r+0x224c>
 4010ce4:	80f9883a 	add	fp,r16,r3
 4010ce8:	d9003617 	ldw	r4,216(sp)
 4010cec:	000d883a 	mov	r6,zero
 4010cf0:	000f883a 	mov	r7,zero
 4010cf4:	980b883a 	mov	r5,r19
 4010cf8:	da003d15 	stw	r8,244(sp)
 4010cfc:	4019ffc0 	call	4019ffc <__eqdf2>
 4010d00:	da003d17 	ldw	r8,244(sp)
 4010d04:	10018d26 	beq	r2,zero,401133c <___vfprintf_internal_r+0x1e60>
 4010d08:	d8802117 	ldw	r2,132(sp)
 4010d0c:	1700062e 	bgeu	r2,fp,4010d28 <___vfprintf_internal_r+0x184c>
 4010d10:	01000c04 	movi	r4,48
 4010d14:	10c00044 	addi	r3,r2,1
 4010d18:	d8c02115 	stw	r3,132(sp)
 4010d1c:	11000005 	stb	r4,0(r2)
 4010d20:	d8802117 	ldw	r2,132(sp)
 4010d24:	173ffb36 	bltu	r2,fp,4010d14 <__alt_mem_onchip_memory2_0+0xfc00fa94>
 4010d28:	1405c83a 	sub	r2,r2,r16
 4010d2c:	d8803315 	stw	r2,204(sp)
 4010d30:	008011c4 	movi	r2,71
 4010d34:	b0817626 	beq	r22,r2,4011310 <___vfprintf_internal_r+0x1e34>
 4010d38:	00801944 	movi	r2,101
 4010d3c:	1442800e 	bge	r2,r17,4011740 <___vfprintf_internal_r+0x2264>
 4010d40:	d8c02617 	ldw	r3,152(sp)
 4010d44:	00801984 	movi	r2,102
 4010d48:	d8c03215 	stw	r3,200(sp)
 4010d4c:	8881fe26 	beq	r17,r2,4011548 <___vfprintf_internal_r+0x206c>
 4010d50:	d8c03217 	ldw	r3,200(sp)
 4010d54:	d9003317 	ldw	r4,204(sp)
 4010d58:	1901dd16 	blt	r3,r4,40114d0 <___vfprintf_internal_r+0x1ff4>
 4010d5c:	9480004c 	andi	r18,r18,1
 4010d60:	90022b1e 	bne	r18,zero,4011610 <___vfprintf_internal_r+0x2134>
 4010d64:	1805883a 	mov	r2,r3
 4010d68:	18028316 	blt	r3,zero,4011778 <___vfprintf_internal_r+0x229c>
 4010d6c:	d8c03217 	ldw	r3,200(sp)
 4010d70:	044019c4 	movi	r17,103
 4010d74:	d8c02b15 	stw	r3,172(sp)
 4010d78:	df002907 	ldb	fp,164(sp)
 4010d7c:	e001531e 	bne	fp,zero,40112cc <___vfprintf_internal_r+0x1df0>
 4010d80:	df002783 	ldbu	fp,158(sp)
 4010d84:	d8802915 	stw	r2,164(sp)
 4010d88:	dc802c17 	ldw	r18,176(sp)
 4010d8c:	d8002a15 	stw	zero,168(sp)
 4010d90:	003baf06 	br	400fc50 <__alt_mem_onchip_memory2_0+0xfc00e9d0>
 4010d94:	d8c02e17 	ldw	r3,184(sp)
 4010d98:	d9002e17 	ldw	r4,184(sp)
 4010d9c:	d9402e17 	ldw	r5,184(sp)
 4010da0:	18c00017 	ldw	r3,0(r3)
 4010da4:	21000117 	ldw	r4,4(r4)
 4010da8:	29400204 	addi	r5,r5,8
 4010dac:	d8c03615 	stw	r3,216(sp)
 4010db0:	d9003815 	stw	r4,224(sp)
 4010db4:	d9402e15 	stw	r5,184(sp)
 4010db8:	003b5006 	br	400fafc <__alt_mem_onchip_memory2_0+0xfc00e87c>
 4010dbc:	ac400007 	ldb	r17,0(r21)
 4010dc0:	003a2806 	br	400f664 <__alt_mem_onchip_memory2_0+0xfc00e3e4>
 4010dc4:	9080100c 	andi	r2,r18,64
 4010dc8:	1000a826 	beq	r2,zero,401106c <___vfprintf_internal_r+0x1b90>
 4010dcc:	d8c02e17 	ldw	r3,184(sp)
 4010dd0:	002d883a 	mov	r22,zero
 4010dd4:	1cc0000b 	ldhu	r19,0(r3)
 4010dd8:	18c00104 	addi	r3,r3,4
 4010ddc:	d8c02e15 	stw	r3,184(sp)
 4010de0:	003caf06 	br	40100a0 <__alt_mem_onchip_memory2_0+0xfc00ee20>
 4010de4:	d9002e17 	ldw	r4,184(sp)
 4010de8:	d9402a17 	ldw	r5,168(sp)
 4010dec:	002d883a 	mov	r22,zero
 4010df0:	20800104 	addi	r2,r4,4
 4010df4:	24c00017 	ldw	r19,0(r4)
 4010df8:	283ebb0e 	bge	r5,zero,40108e8 <__alt_mem_onchip_memory2_0+0xfc00f668>
 4010dfc:	003ef106 	br	40109c4 <__alt_mem_onchip_memory2_0+0xfc00f744>
 4010e00:	9080040c 	andi	r2,r18,16
 4010e04:	1000921e 	bne	r2,zero,4011050 <___vfprintf_internal_r+0x1b74>
 4010e08:	9480100c 	andi	r18,r18,64
 4010e0c:	90013926 	beq	r18,zero,40112f4 <___vfprintf_internal_r+0x1e18>
 4010e10:	d9402e17 	ldw	r5,184(sp)
 4010e14:	d8c02f17 	ldw	r3,188(sp)
 4010e18:	28800017 	ldw	r2,0(r5)
 4010e1c:	29400104 	addi	r5,r5,4
 4010e20:	d9402e15 	stw	r5,184(sp)
 4010e24:	10c0000d 	sth	r3,0(r2)
 4010e28:	0039e406 	br	400f5bc <__alt_mem_onchip_memory2_0+0xfc00e33c>
 4010e2c:	9080100c 	andi	r2,r18,64
 4010e30:	10008026 	beq	r2,zero,4011034 <___vfprintf_internal_r+0x1b58>
 4010e34:	d8802e17 	ldw	r2,184(sp)
 4010e38:	14c0000f 	ldh	r19,0(r2)
 4010e3c:	10800104 	addi	r2,r2,4
 4010e40:	d8802e15 	stw	r2,184(sp)
 4010e44:	982dd7fa 	srai	r22,r19,31
 4010e48:	b005883a 	mov	r2,r22
 4010e4c:	003af706 	br	400fa2c <__alt_mem_onchip_memory2_0+0xfc00e7ac>
 4010e50:	9080100c 	andi	r2,r18,64
 4010e54:	d8002785 	stb	zero,158(sp)
 4010e58:	10008a1e 	bne	r2,zero,4011084 <___vfprintf_internal_r+0x1ba8>
 4010e5c:	d9002e17 	ldw	r4,184(sp)
 4010e60:	d9402a17 	ldw	r5,168(sp)
 4010e64:	002d883a 	mov	r22,zero
 4010e68:	20800104 	addi	r2,r4,4
 4010e6c:	24c00017 	ldw	r19,0(r4)
 4010e70:	283e4b0e 	bge	r5,zero,40107a0 <__alt_mem_onchip_memory2_0+0xfc00f520>
 4010e74:	9d86b03a 	or	r3,r19,r22
 4010e78:	d8802e15 	stw	r2,184(sp)
 4010e7c:	183e4c1e 	bne	r3,zero,40107b0 <__alt_mem_onchip_memory2_0+0xfc00f530>
 4010e80:	0039883a 	mov	fp,zero
 4010e84:	0005883a 	mov	r2,zero
 4010e88:	003d4006 	br	401038c <__alt_mem_onchip_memory2_0+0xfc00f10c>
 4010e8c:	014100b4 	movhi	r5,1026
 4010e90:	295c8184 	addi	r5,r5,29190
 4010e94:	d9402c15 	stw	r5,176(sp)
 4010e98:	d9402c17 	ldw	r5,176(sp)
 4010e9c:	1c47883a 	add	r3,r3,r17
 4010ea0:	10800044 	addi	r2,r2,1
 4010ea4:	41400015 	stw	r5,0(r8)
 4010ea8:	44400115 	stw	r17,4(r8)
 4010eac:	d8c02015 	stw	r3,128(sp)
 4010eb0:	d8801f15 	stw	r2,124(sp)
 4010eb4:	010001c4 	movi	r4,7
 4010eb8:	20bec816 	blt	r4,r2,40109dc <__alt_mem_onchip_memory2_0+0xfc00f75c>
 4010ebc:	42000204 	addi	r8,r8,8
 4010ec0:	003ecd06 	br	40109f8 <__alt_mem_onchip_memory2_0+0xfc00f778>
 4010ec4:	d9002a17 	ldw	r4,168(sp)
 4010ec8:	d8002785 	stb	zero,158(sp)
 4010ecc:	203d2d16 	blt	r4,zero,4010384 <__alt_mem_onchip_memory2_0+0xfc00f104>
 4010ed0:	00bfdfc4 	movi	r2,-129
 4010ed4:	90a4703a 	and	r18,r18,r2
 4010ed8:	003a6106 	br	400f860 <__alt_mem_onchip_memory2_0+0xfc00e5e0>
 4010edc:	010100b4 	movhi	r4,1026
 4010ee0:	211c8184 	addi	r4,r4,29190
 4010ee4:	d9002c15 	stw	r4,176(sp)
 4010ee8:	003bea06 	br	400fe94 <__alt_mem_onchip_memory2_0+0xfc00ec14>
 4010eec:	d9002d17 	ldw	r4,180(sp)
 4010ef0:	d9801e04 	addi	r6,sp,120
 4010ef4:	b80b883a 	mov	r5,r23
 4010ef8:	40162780 	call	4016278 <__sprint_r>
 4010efc:	103a7b1e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 4010f00:	d8c02017 	ldw	r3,128(sp)
 4010f04:	da000404 	addi	r8,sp,16
 4010f08:	003d4106 	br	4010410 <__alt_mem_onchip_memory2_0+0xfc00f190>
 4010f0c:	d8801f17 	ldw	r2,124(sp)
 4010f10:	014100b4 	movhi	r5,1026
 4010f14:	01000044 	movi	r4,1
 4010f18:	18c00044 	addi	r3,r3,1
 4010f1c:	10800044 	addi	r2,r2,1
 4010f20:	295c8104 	addi	r5,r5,29188
 4010f24:	41000115 	stw	r4,4(r8)
 4010f28:	41400015 	stw	r5,0(r8)
 4010f2c:	d8c02015 	stw	r3,128(sp)
 4010f30:	d8801f15 	stw	r2,124(sp)
 4010f34:	010001c4 	movi	r4,7
 4010f38:	20805c16 	blt	r4,r2,40110ac <___vfprintf_internal_r+0x1bd0>
 4010f3c:	42000204 	addi	r8,r8,8
 4010f40:	8800041e 	bne	r17,zero,4010f54 <___vfprintf_internal_r+0x1a78>
 4010f44:	d8803317 	ldw	r2,204(sp)
 4010f48:	1000021e 	bne	r2,zero,4010f54 <___vfprintf_internal_r+0x1a78>
 4010f4c:	9080004c 	andi	r2,r18,1
 4010f50:	103be726 	beq	r2,zero,400fef0 <__alt_mem_onchip_memory2_0+0xfc00ec70>
 4010f54:	d9003717 	ldw	r4,220(sp)
 4010f58:	d8801f17 	ldw	r2,124(sp)
 4010f5c:	d9403417 	ldw	r5,208(sp)
 4010f60:	20c7883a 	add	r3,r4,r3
 4010f64:	10800044 	addi	r2,r2,1
 4010f68:	41000115 	stw	r4,4(r8)
 4010f6c:	41400015 	stw	r5,0(r8)
 4010f70:	d8c02015 	stw	r3,128(sp)
 4010f74:	d8801f15 	stw	r2,124(sp)
 4010f78:	010001c4 	movi	r4,7
 4010f7c:	20812116 	blt	r4,r2,4011404 <___vfprintf_internal_r+0x1f28>
 4010f80:	42000204 	addi	r8,r8,8
 4010f84:	0463c83a 	sub	r17,zero,r17
 4010f88:	0440730e 	bge	zero,r17,4011158 <___vfprintf_internal_r+0x1c7c>
 4010f8c:	05800404 	movi	r22,16
 4010f90:	b440860e 	bge	r22,r17,40111ac <___vfprintf_internal_r+0x1cd0>
 4010f94:	014100b4 	movhi	r5,1026
 4010f98:	295c8184 	addi	r5,r5,29190
 4010f9c:	d9402c15 	stw	r5,176(sp)
 4010fa0:	070001c4 	movi	fp,7
 4010fa4:	dcc02d17 	ldw	r19,180(sp)
 4010fa8:	00000306 	br	4010fb8 <___vfprintf_internal_r+0x1adc>
 4010fac:	42000204 	addi	r8,r8,8
 4010fb0:	8c7ffc04 	addi	r17,r17,-16
 4010fb4:	b440800e 	bge	r22,r17,40111b8 <___vfprintf_internal_r+0x1cdc>
 4010fb8:	18c00404 	addi	r3,r3,16
 4010fbc:	10800044 	addi	r2,r2,1
 4010fc0:	45000015 	stw	r20,0(r8)
 4010fc4:	45800115 	stw	r22,4(r8)
 4010fc8:	d8c02015 	stw	r3,128(sp)
 4010fcc:	d8801f15 	stw	r2,124(sp)
 4010fd0:	e0bff60e 	bge	fp,r2,4010fac <__alt_mem_onchip_memory2_0+0xfc00fd2c>
 4010fd4:	d9801e04 	addi	r6,sp,120
 4010fd8:	b80b883a 	mov	r5,r23
 4010fdc:	9809883a 	mov	r4,r19
 4010fe0:	40162780 	call	4016278 <__sprint_r>
 4010fe4:	103a411e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 4010fe8:	d8c02017 	ldw	r3,128(sp)
 4010fec:	d8801f17 	ldw	r2,124(sp)
 4010ff0:	da000404 	addi	r8,sp,16
 4010ff4:	003fee06 	br	4010fb0 <__alt_mem_onchip_memory2_0+0xfc00fd30>
 4010ff8:	00bfffc4 	movi	r2,-1
 4010ffc:	003a3f06 	br	400f8fc <__alt_mem_onchip_memory2_0+0xfc00e67c>
 4011000:	008011c4 	movi	r2,71
 4011004:	1440b816 	blt	r2,r17,40112e8 <___vfprintf_internal_r+0x1e0c>
 4011008:	040100b4 	movhi	r16,1026
 401100c:	841c7304 	addi	r16,r16,29132
 4011010:	00c000c4 	movi	r3,3
 4011014:	00bfdfc4 	movi	r2,-129
 4011018:	d8c02915 	stw	r3,164(sp)
 401101c:	90a4703a 	and	r18,r18,r2
 4011020:	df002783 	ldbu	fp,158(sp)
 4011024:	d8c02b15 	stw	r3,172(sp)
 4011028:	d8002a15 	stw	zero,168(sp)
 401102c:	d8003215 	stw	zero,200(sp)
 4011030:	003b0706 	br	400fc50 <__alt_mem_onchip_memory2_0+0xfc00e9d0>
 4011034:	d8c02e17 	ldw	r3,184(sp)
 4011038:	1cc00017 	ldw	r19,0(r3)
 401103c:	18c00104 	addi	r3,r3,4
 4011040:	d8c02e15 	stw	r3,184(sp)
 4011044:	982dd7fa 	srai	r22,r19,31
 4011048:	b005883a 	mov	r2,r22
 401104c:	003a7706 	br	400fa2c <__alt_mem_onchip_memory2_0+0xfc00e7ac>
 4011050:	d8c02e17 	ldw	r3,184(sp)
 4011054:	d9002f17 	ldw	r4,188(sp)
 4011058:	18800017 	ldw	r2,0(r3)
 401105c:	18c00104 	addi	r3,r3,4
 4011060:	d8c02e15 	stw	r3,184(sp)
 4011064:	11000015 	stw	r4,0(r2)
 4011068:	00395406 	br	400f5bc <__alt_mem_onchip_memory2_0+0xfc00e33c>
 401106c:	d9002e17 	ldw	r4,184(sp)
 4011070:	002d883a 	mov	r22,zero
 4011074:	24c00017 	ldw	r19,0(r4)
 4011078:	21000104 	addi	r4,r4,4
 401107c:	d9002e15 	stw	r4,184(sp)
 4011080:	003c0706 	br	40100a0 <__alt_mem_onchip_memory2_0+0xfc00ee20>
 4011084:	d9402e17 	ldw	r5,184(sp)
 4011088:	d8c02a17 	ldw	r3,168(sp)
 401108c:	002d883a 	mov	r22,zero
 4011090:	28800104 	addi	r2,r5,4
 4011094:	2cc0000b 	ldhu	r19,0(r5)
 4011098:	183dc10e 	bge	r3,zero,40107a0 <__alt_mem_onchip_memory2_0+0xfc00f520>
 401109c:	003f7506 	br	4010e74 <__alt_mem_onchip_memory2_0+0xfc00fbf4>
 40110a0:	040100b4 	movhi	r16,1026
 40110a4:	841c7104 	addi	r16,r16,29124
 40110a8:	003aa706 	br	400fb48 <__alt_mem_onchip_memory2_0+0xfc00e8c8>
 40110ac:	d9002d17 	ldw	r4,180(sp)
 40110b0:	d9801e04 	addi	r6,sp,120
 40110b4:	b80b883a 	mov	r5,r23
 40110b8:	40162780 	call	4016278 <__sprint_r>
 40110bc:	103a0b1e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 40110c0:	dc402617 	ldw	r17,152(sp)
 40110c4:	d8c02017 	ldw	r3,128(sp)
 40110c8:	da000404 	addi	r8,sp,16
 40110cc:	003f9c06 	br	4010f40 <__alt_mem_onchip_memory2_0+0xfc00fcc0>
 40110d0:	ac400043 	ldbu	r17,1(r21)
 40110d4:	84000814 	ori	r16,r16,32
 40110d8:	ad400044 	addi	r21,r21,1
 40110dc:	8c403fcc 	andi	r17,r17,255
 40110e0:	8c40201c 	xori	r17,r17,128
 40110e4:	8c7fe004 	addi	r17,r17,-128
 40110e8:	00395e06 	br	400f664 <__alt_mem_onchip_memory2_0+0xfc00e3e4>
 40110ec:	d8c02e15 	stw	r3,184(sp)
 40110f0:	0039883a 	mov	fp,zero
 40110f4:	003e3506 	br	40109cc <__alt_mem_onchip_memory2_0+0xfc00f74c>
 40110f8:	d9002d17 	ldw	r4,180(sp)
 40110fc:	d9801e04 	addi	r6,sp,120
 4011100:	b80b883a 	mov	r5,r23
 4011104:	40162780 	call	4016278 <__sprint_r>
 4011108:	1039f81e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 401110c:	d8c02017 	ldw	r3,128(sp)
 4011110:	da000404 	addi	r8,sp,16
 4011114:	003cd006 	br	4010458 <__alt_mem_onchip_memory2_0+0xfc00f1d8>
 4011118:	8009883a 	mov	r4,r16
 401111c:	df003d15 	stw	fp,244(sp)
 4011120:	400f43c0 	call	400f43c <strlen>
 4011124:	d8802b15 	stw	r2,172(sp)
 4011128:	da003d17 	ldw	r8,244(sp)
 401112c:	103c200e 	bge	r2,zero,40101b0 <__alt_mem_onchip_memory2_0+0xfc00ef30>
 4011130:	0005883a 	mov	r2,zero
 4011134:	003c1e06 	br	40101b0 <__alt_mem_onchip_memory2_0+0xfc00ef30>
 4011138:	d9002d17 	ldw	r4,180(sp)
 401113c:	d9801e04 	addi	r6,sp,120
 4011140:	b80b883a 	mov	r5,r23
 4011144:	40162780 	call	4016278 <__sprint_r>
 4011148:	1039e81e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 401114c:	d8c02017 	ldw	r3,128(sp)
 4011150:	d8801f17 	ldw	r2,124(sp)
 4011154:	da000404 	addi	r8,sp,16
 4011158:	d9403317 	ldw	r5,204(sp)
 401115c:	10800044 	addi	r2,r2,1
 4011160:	44000015 	stw	r16,0(r8)
 4011164:	28c7883a 	add	r3,r5,r3
 4011168:	003b5b06 	br	400fed8 <__alt_mem_onchip_memory2_0+0xfc00ec58>
 401116c:	010100b4 	movhi	r4,1026
 4011170:	211c8584 	addi	r4,r4,29206
 4011174:	d9003515 	stw	r4,212(sp)
 4011178:	003af206 	br	400fd44 <__alt_mem_onchip_memory2_0+0xfc00eac4>
 401117c:	013fffc4 	movi	r4,-1
 4011180:	003a0806 	br	400f9a4 <__alt_mem_onchip_memory2_0+0xfc00e724>
 4011184:	0023883a 	mov	r17,zero
 4011188:	003d9d06 	br	4010800 <__alt_mem_onchip_memory2_0+0xfc00f580>
 401118c:	d9002d17 	ldw	r4,180(sp)
 4011190:	d9801e04 	addi	r6,sp,120
 4011194:	b80b883a 	mov	r5,r23
 4011198:	40162780 	call	4016278 <__sprint_r>
 401119c:	1039d31e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 40111a0:	d8c02017 	ldw	r3,128(sp)
 40111a4:	da000404 	addi	r8,sp,16
 40111a8:	003d9406 	br	40107fc <__alt_mem_onchip_memory2_0+0xfc00f57c>
 40111ac:	010100b4 	movhi	r4,1026
 40111b0:	211c8184 	addi	r4,r4,29190
 40111b4:	d9002c15 	stw	r4,176(sp)
 40111b8:	d9002c17 	ldw	r4,176(sp)
 40111bc:	1c47883a 	add	r3,r3,r17
 40111c0:	10800044 	addi	r2,r2,1
 40111c4:	41000015 	stw	r4,0(r8)
 40111c8:	44400115 	stw	r17,4(r8)
 40111cc:	d8c02015 	stw	r3,128(sp)
 40111d0:	d8801f15 	stw	r2,124(sp)
 40111d4:	010001c4 	movi	r4,7
 40111d8:	20bfd716 	blt	r4,r2,4011138 <__alt_mem_onchip_memory2_0+0xfc00feb8>
 40111dc:	42000204 	addi	r8,r8,8
 40111e0:	003fdd06 	br	4011158 <__alt_mem_onchip_memory2_0+0xfc00fed8>
 40111e4:	d9002d17 	ldw	r4,180(sp)
 40111e8:	d9801e04 	addi	r6,sp,120
 40111ec:	b80b883a 	mov	r5,r23
 40111f0:	40162780 	call	4016278 <__sprint_r>
 40111f4:	1039bd1e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 40111f8:	d8802617 	ldw	r2,152(sp)
 40111fc:	d8c02017 	ldw	r3,128(sp)
 4011200:	da000404 	addi	r8,sp,16
 4011204:	003e1006 	br	4010a48 <__alt_mem_onchip_memory2_0+0xfc00f7c8>
 4011208:	00800044 	movi	r2,1
 401120c:	10803fcc 	andi	r2,r2,255
 4011210:	00c00044 	movi	r3,1
 4011214:	10fa0d26 	beq	r2,r3,400fa4c <__alt_mem_onchip_memory2_0+0xfc00e7cc>
 4011218:	00c00084 	movi	r3,2
 401121c:	10fbaf26 	beq	r2,r3,40100dc <__alt_mem_onchip_memory2_0+0xfc00ee5c>
 4011220:	003a6d06 	br	400fbd8 <__alt_mem_onchip_memory2_0+0xfc00e958>
 4011224:	010100b4 	movhi	r4,1026
 4011228:	211c8584 	addi	r4,r4,29206
 401122c:	d9003515 	stw	r4,212(sp)
 4011230:	003b5406 	br	400ff84 <__alt_mem_onchip_memory2_0+0xfc00ed04>
 4011234:	d8802a17 	ldw	r2,168(sp)
 4011238:	00c00184 	movi	r3,6
 401123c:	1880012e 	bgeu	r3,r2,4011244 <___vfprintf_internal_r+0x1d68>
 4011240:	1805883a 	mov	r2,r3
 4011244:	d8802b15 	stw	r2,172(sp)
 4011248:	1000ef16 	blt	r2,zero,4011608 <___vfprintf_internal_r+0x212c>
 401124c:	040100b4 	movhi	r16,1026
 4011250:	d8802915 	stw	r2,164(sp)
 4011254:	dcc02e15 	stw	r19,184(sp)
 4011258:	d8002a15 	stw	zero,168(sp)
 401125c:	d8003215 	stw	zero,200(sp)
 4011260:	841c7f04 	addi	r16,r16,29180
 4011264:	0039883a 	mov	fp,zero
 4011268:	003a8006 	br	400fc6c <__alt_mem_onchip_memory2_0+0xfc00e9ec>
 401126c:	0021883a 	mov	r16,zero
 4011270:	003e0706 	br	4010a90 <__alt_mem_onchip_memory2_0+0xfc00f810>
 4011274:	d9002d17 	ldw	r4,180(sp)
 4011278:	d9801e04 	addi	r6,sp,120
 401127c:	b80b883a 	mov	r5,r23
 4011280:	40162780 	call	4016278 <__sprint_r>
 4011284:	1039991e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 4011288:	d8802617 	ldw	r2,152(sp)
 401128c:	d9403317 	ldw	r5,204(sp)
 4011290:	d8c02017 	ldw	r3,128(sp)
 4011294:	da000404 	addi	r8,sp,16
 4011298:	2885c83a 	sub	r2,r5,r2
 401129c:	003dfb06 	br	4010a8c <__alt_mem_onchip_memory2_0+0xfc00f80c>
 40112a0:	9080004c 	andi	r2,r18,1
 40112a4:	103e8f1e 	bne	r2,zero,4010ce4 <__alt_mem_onchip_memory2_0+0xfc00fa64>
 40112a8:	d8802117 	ldw	r2,132(sp)
 40112ac:	003e9e06 	br	4010d28 <__alt_mem_onchip_memory2_0+0xfc00faa8>
 40112b0:	1025883a 	mov	r18,r2
 40112b4:	0039883a 	mov	fp,zero
 40112b8:	00800084 	movi	r2,2
 40112bc:	003fd306 	br	401120c <__alt_mem_onchip_memory2_0+0xfc00ff8c>
 40112c0:	07000b44 	movi	fp,45
 40112c4:	df002785 	stb	fp,158(sp)
 40112c8:	003a1b06 	br	400fb38 <__alt_mem_onchip_memory2_0+0xfc00e8b8>
 40112cc:	00c00b44 	movi	r3,45
 40112d0:	d8c02785 	stb	r3,158(sp)
 40112d4:	d8802915 	stw	r2,164(sp)
 40112d8:	dc802c17 	ldw	r18,176(sp)
 40112dc:	d8002a15 	stw	zero,168(sp)
 40112e0:	07000b44 	movi	fp,45
 40112e4:	003a5e06 	br	400fc60 <__alt_mem_onchip_memory2_0+0xfc00e9e0>
 40112e8:	040100b4 	movhi	r16,1026
 40112ec:	841c7404 	addi	r16,r16,29136
 40112f0:	003f4706 	br	4011010 <__alt_mem_onchip_memory2_0+0xfc00fd90>
 40112f4:	d9002e17 	ldw	r4,184(sp)
 40112f8:	d9402f17 	ldw	r5,188(sp)
 40112fc:	20800017 	ldw	r2,0(r4)
 4011300:	21000104 	addi	r4,r4,4
 4011304:	d9002e15 	stw	r4,184(sp)
 4011308:	11400015 	stw	r5,0(r2)
 401130c:	0038ab06 	br	400f5bc <__alt_mem_onchip_memory2_0+0xfc00e33c>
 4011310:	dd802617 	ldw	r22,152(sp)
 4011314:	00bfff44 	movi	r2,-3
 4011318:	b0801c16 	blt	r22,r2,401138c <___vfprintf_internal_r+0x1eb0>
 401131c:	d9402a17 	ldw	r5,168(sp)
 4011320:	2d801a16 	blt	r5,r22,401138c <___vfprintf_internal_r+0x1eb0>
 4011324:	dd803215 	stw	r22,200(sp)
 4011328:	003e8906 	br	4010d50 <__alt_mem_onchip_memory2_0+0xfc00fad0>
 401132c:	010100b4 	movhi	r4,1026
 4011330:	211c8184 	addi	r4,r4,29190
 4011334:	d9002c15 	stw	r4,176(sp)
 4011338:	003c9106 	br	4010580 <__alt_mem_onchip_memory2_0+0xfc00f300>
 401133c:	e005883a 	mov	r2,fp
 4011340:	003e7906 	br	4010d28 <__alt_mem_onchip_memory2_0+0xfc00faa8>
 4011344:	d9002a17 	ldw	r4,168(sp)
 4011348:	df002783 	ldbu	fp,158(sp)
 401134c:	dcc02e15 	stw	r19,184(sp)
 4011350:	d9002915 	stw	r4,164(sp)
 4011354:	d9002b15 	stw	r4,172(sp)
 4011358:	d8002a15 	stw	zero,168(sp)
 401135c:	d8003215 	stw	zero,200(sp)
 4011360:	003a3b06 	br	400fc50 <__alt_mem_onchip_memory2_0+0xfc00e9d0>
 4011364:	9080004c 	andi	r2,r18,1
 4011368:	0039883a 	mov	fp,zero
 401136c:	10000426 	beq	r2,zero,4011380 <___vfprintf_internal_r+0x1ea4>
 4011370:	00800c04 	movi	r2,48
 4011374:	dc001dc4 	addi	r16,sp,119
 4011378:	d8801dc5 	stb	r2,119(sp)
 401137c:	003b6406 	br	4010110 <__alt_mem_onchip_memory2_0+0xfc00ee90>
 4011380:	d8002b15 	stw	zero,172(sp)
 4011384:	dc001e04 	addi	r16,sp,120
 4011388:	003a2b06 	br	400fc38 <__alt_mem_onchip_memory2_0+0xfc00e9b8>
 401138c:	8c7fff84 	addi	r17,r17,-2
 4011390:	b5bfffc4 	addi	r22,r22,-1
 4011394:	dd802615 	stw	r22,152(sp)
 4011398:	dc4022c5 	stb	r17,139(sp)
 401139c:	b000bf16 	blt	r22,zero,401169c <___vfprintf_internal_r+0x21c0>
 40113a0:	00800ac4 	movi	r2,43
 40113a4:	d8802305 	stb	r2,140(sp)
 40113a8:	00800244 	movi	r2,9
 40113ac:	15807016 	blt	r2,r22,4011570 <___vfprintf_internal_r+0x2094>
 40113b0:	00800c04 	movi	r2,48
 40113b4:	b5800c04 	addi	r22,r22,48
 40113b8:	d8802345 	stb	r2,141(sp)
 40113bc:	dd802385 	stb	r22,142(sp)
 40113c0:	d88023c4 	addi	r2,sp,143
 40113c4:	df0022c4 	addi	fp,sp,139
 40113c8:	d8c03317 	ldw	r3,204(sp)
 40113cc:	1739c83a 	sub	fp,r2,fp
 40113d0:	d9003317 	ldw	r4,204(sp)
 40113d4:	e0c7883a 	add	r3,fp,r3
 40113d8:	df003a15 	stw	fp,232(sp)
 40113dc:	d8c02b15 	stw	r3,172(sp)
 40113e0:	00800044 	movi	r2,1
 40113e4:	1100b30e 	bge	r2,r4,40116b4 <___vfprintf_internal_r+0x21d8>
 40113e8:	d8c02b17 	ldw	r3,172(sp)
 40113ec:	18c00044 	addi	r3,r3,1
 40113f0:	d8c02b15 	stw	r3,172(sp)
 40113f4:	1805883a 	mov	r2,r3
 40113f8:	1800ac16 	blt	r3,zero,40116ac <___vfprintf_internal_r+0x21d0>
 40113fc:	d8003215 	stw	zero,200(sp)
 4011400:	003e5d06 	br	4010d78 <__alt_mem_onchip_memory2_0+0xfc00faf8>
 4011404:	d9002d17 	ldw	r4,180(sp)
 4011408:	d9801e04 	addi	r6,sp,120
 401140c:	b80b883a 	mov	r5,r23
 4011410:	40162780 	call	4016278 <__sprint_r>
 4011414:	1039351e 	bne	r2,zero,400f8ec <__alt_mem_onchip_memory2_0+0xfc00e66c>
 4011418:	dc402617 	ldw	r17,152(sp)
 401141c:	d8c02017 	ldw	r3,128(sp)
 4011420:	d8801f17 	ldw	r2,124(sp)
 4011424:	da000404 	addi	r8,sp,16
 4011428:	003ed606 	br	4010f84 <__alt_mem_onchip_memory2_0+0xfc00fd04>
 401142c:	182b883a 	mov	r21,r3
 4011430:	d8002a15 	stw	zero,168(sp)
 4011434:	00388c06 	br	400f668 <__alt_mem_onchip_memory2_0+0xfc00e3e8>
 4011438:	d8802a17 	ldw	r2,168(sp)
 401143c:	103e071e 	bne	r2,zero,4010c5c <__alt_mem_onchip_memory2_0+0xfc00f9dc>
 4011440:	dc002a15 	stw	r16,168(sp)
 4011444:	003e0506 	br	4010c5c <__alt_mem_onchip_memory2_0+0xfc00f9dc>
 4011448:	d9002a17 	ldw	r4,168(sp)
 401144c:	20c00044 	addi	r3,r4,1
 4011450:	003e0f06 	br	4010c90 <__alt_mem_onchip_memory2_0+0xfc00fa10>
 4011454:	01400184 	movi	r5,6
 4011458:	d9402a15 	stw	r5,168(sp)
 401145c:	003dff06 	br	4010c5c <__alt_mem_onchip_memory2_0+0xfc00f9dc>
 4011460:	d8802104 	addi	r2,sp,132
 4011464:	d8800315 	stw	r2,12(sp)
 4011468:	d8802504 	addi	r2,sp,148
 401146c:	d8800215 	stw	r2,8(sp)
 4011470:	d8802604 	addi	r2,sp,152
 4011474:	d8800115 	stw	r2,4(sp)
 4011478:	d8802a17 	ldw	r2,168(sp)
 401147c:	d9403617 	ldw	r5,216(sp)
 4011480:	d9002d17 	ldw	r4,180(sp)
 4011484:	d8800015 	stw	r2,0(sp)
 4011488:	01c000c4 	movi	r7,3
 401148c:	980d883a 	mov	r6,r19
 4011490:	da003d15 	stw	r8,244(sp)
 4011494:	4011c0c0 	call	4011c0c <_dtoa_r>
 4011498:	d8c02a17 	ldw	r3,168(sp)
 401149c:	da003d17 	ldw	r8,244(sp)
 40114a0:	1021883a 	mov	r16,r2
 40114a4:	10f9883a 	add	fp,r2,r3
 40114a8:	81000007 	ldb	r4,0(r16)
 40114ac:	00800c04 	movi	r2,48
 40114b0:	20805e26 	beq	r4,r2,401162c <___vfprintf_internal_r+0x2150>
 40114b4:	d8c02617 	ldw	r3,152(sp)
 40114b8:	e0f9883a 	add	fp,fp,r3
 40114bc:	003e0a06 	br	4010ce8 <__alt_mem_onchip_memory2_0+0xfc00fa68>
 40114c0:	00c00b44 	movi	r3,45
 40114c4:	24e0003c 	xorhi	r19,r4,32768
 40114c8:	d8c02905 	stb	r3,164(sp)
 40114cc:	003de906 	br	4010c74 <__alt_mem_onchip_memory2_0+0xfc00f9f4>
 40114d0:	d8c03217 	ldw	r3,200(sp)
 40114d4:	00c07a0e 	bge	zero,r3,40116c0 <___vfprintf_internal_r+0x21e4>
 40114d8:	00800044 	movi	r2,1
 40114dc:	d9003317 	ldw	r4,204(sp)
 40114e0:	1105883a 	add	r2,r2,r4
 40114e4:	d8802b15 	stw	r2,172(sp)
 40114e8:	10004e16 	blt	r2,zero,4011624 <___vfprintf_internal_r+0x2148>
 40114ec:	044019c4 	movi	r17,103
 40114f0:	003e2106 	br	4010d78 <__alt_mem_onchip_memory2_0+0xfc00faf8>
 40114f4:	d9002a17 	ldw	r4,168(sp)
 40114f8:	d8802104 	addi	r2,sp,132
 40114fc:	d8800315 	stw	r2,12(sp)
 4011500:	d9000015 	stw	r4,0(sp)
 4011504:	d8802504 	addi	r2,sp,148
 4011508:	d9403617 	ldw	r5,216(sp)
 401150c:	d9002d17 	ldw	r4,180(sp)
 4011510:	d8800215 	stw	r2,8(sp)
 4011514:	d8802604 	addi	r2,sp,152
 4011518:	d8800115 	stw	r2,4(sp)
 401151c:	01c000c4 	movi	r7,3
 4011520:	980d883a 	mov	r6,r19
 4011524:	da003d15 	stw	r8,244(sp)
 4011528:	4011c0c0 	call	4011c0c <_dtoa_r>
 401152c:	d8c02a17 	ldw	r3,168(sp)
 4011530:	da003d17 	ldw	r8,244(sp)
 4011534:	1021883a 	mov	r16,r2
 4011538:	00801184 	movi	r2,70
 401153c:	80f9883a 	add	fp,r16,r3
 4011540:	88bfd926 	beq	r17,r2,40114a8 <__alt_mem_onchip_memory2_0+0xfc010228>
 4011544:	003de806 	br	4010ce8 <__alt_mem_onchip_memory2_0+0xfc00fa68>
 4011548:	d9002a17 	ldw	r4,168(sp)
 401154c:	00c04d0e 	bge	zero,r3,4011684 <___vfprintf_internal_r+0x21a8>
 4011550:	2000441e 	bne	r4,zero,4011664 <___vfprintf_internal_r+0x2188>
 4011554:	9480004c 	andi	r18,r18,1
 4011558:	9000421e 	bne	r18,zero,4011664 <___vfprintf_internal_r+0x2188>
 401155c:	1805883a 	mov	r2,r3
 4011560:	18006f16 	blt	r3,zero,4011720 <___vfprintf_internal_r+0x2244>
 4011564:	d8c03217 	ldw	r3,200(sp)
 4011568:	d8c02b15 	stw	r3,172(sp)
 401156c:	003e0206 	br	4010d78 <__alt_mem_onchip_memory2_0+0xfc00faf8>
 4011570:	df0022c4 	addi	fp,sp,139
 4011574:	dc002a15 	stw	r16,168(sp)
 4011578:	4027883a 	mov	r19,r8
 401157c:	e021883a 	mov	r16,fp
 4011580:	b009883a 	mov	r4,r22
 4011584:	01400284 	movi	r5,10
 4011588:	400d1940 	call	400d194 <__modsi3>
 401158c:	10800c04 	addi	r2,r2,48
 4011590:	843fffc4 	addi	r16,r16,-1
 4011594:	b009883a 	mov	r4,r22
 4011598:	01400284 	movi	r5,10
 401159c:	80800005 	stb	r2,0(r16)
 40115a0:	400d1100 	call	400d110 <__divsi3>
 40115a4:	102d883a 	mov	r22,r2
 40115a8:	00800244 	movi	r2,9
 40115ac:	15bff416 	blt	r2,r22,4011580 <__alt_mem_onchip_memory2_0+0xfc010300>
 40115b0:	9811883a 	mov	r8,r19
 40115b4:	b0800c04 	addi	r2,r22,48
 40115b8:	8027883a 	mov	r19,r16
 40115bc:	997fffc4 	addi	r5,r19,-1
 40115c0:	98bfffc5 	stb	r2,-1(r19)
 40115c4:	dc002a17 	ldw	r16,168(sp)
 40115c8:	2f006d2e 	bgeu	r5,fp,4011780 <___vfprintf_internal_r+0x22a4>
 40115cc:	d9c02384 	addi	r7,sp,142
 40115d0:	3ccfc83a 	sub	r7,r7,r19
 40115d4:	d9002344 	addi	r4,sp,141
 40115d8:	e1cf883a 	add	r7,fp,r7
 40115dc:	00000106 	br	40115e4 <___vfprintf_internal_r+0x2108>
 40115e0:	28800003 	ldbu	r2,0(r5)
 40115e4:	20800005 	stb	r2,0(r4)
 40115e8:	21000044 	addi	r4,r4,1
 40115ec:	29400044 	addi	r5,r5,1
 40115f0:	393ffb1e 	bne	r7,r4,40115e0 <__alt_mem_onchip_memory2_0+0xfc010360>
 40115f4:	d8802304 	addi	r2,sp,140
 40115f8:	14c5c83a 	sub	r2,r2,r19
 40115fc:	d8c02344 	addi	r3,sp,141
 4011600:	1885883a 	add	r2,r3,r2
 4011604:	003f7006 	br	40113c8 <__alt_mem_onchip_memory2_0+0xfc010148>
 4011608:	0005883a 	mov	r2,zero
 401160c:	003f0f06 	br	401124c <__alt_mem_onchip_memory2_0+0xfc00ffcc>
 4011610:	d8c03217 	ldw	r3,200(sp)
 4011614:	18c00044 	addi	r3,r3,1
 4011618:	d8c02b15 	stw	r3,172(sp)
 401161c:	1805883a 	mov	r2,r3
 4011620:	183fb20e 	bge	r3,zero,40114ec <__alt_mem_onchip_memory2_0+0xfc01026c>
 4011624:	0005883a 	mov	r2,zero
 4011628:	003fb006 	br	40114ec <__alt_mem_onchip_memory2_0+0xfc01026c>
 401162c:	d9003617 	ldw	r4,216(sp)
 4011630:	000d883a 	mov	r6,zero
 4011634:	000f883a 	mov	r7,zero
 4011638:	980b883a 	mov	r5,r19
 401163c:	d8c03c15 	stw	r3,240(sp)
 4011640:	da003d15 	stw	r8,244(sp)
 4011644:	4019ffc0 	call	4019ffc <__eqdf2>
 4011648:	d8c03c17 	ldw	r3,240(sp)
 401164c:	da003d17 	ldw	r8,244(sp)
 4011650:	103f9826 	beq	r2,zero,40114b4 <__alt_mem_onchip_memory2_0+0xfc010234>
 4011654:	00800044 	movi	r2,1
 4011658:	10c7c83a 	sub	r3,r2,r3
 401165c:	d8c02615 	stw	r3,152(sp)
 4011660:	003f9506 	br	40114b8 <__alt_mem_onchip_memory2_0+0xfc010238>
 4011664:	d9002a17 	ldw	r4,168(sp)
 4011668:	d8c03217 	ldw	r3,200(sp)
 401166c:	20800044 	addi	r2,r4,1
 4011670:	1885883a 	add	r2,r3,r2
 4011674:	d8802b15 	stw	r2,172(sp)
 4011678:	103dbf0e 	bge	r2,zero,4010d78 <__alt_mem_onchip_memory2_0+0xfc00faf8>
 401167c:	0005883a 	mov	r2,zero
 4011680:	003dbd06 	br	4010d78 <__alt_mem_onchip_memory2_0+0xfc00faf8>
 4011684:	2000201e 	bne	r4,zero,4011708 <___vfprintf_internal_r+0x222c>
 4011688:	9480004c 	andi	r18,r18,1
 401168c:	90001e1e 	bne	r18,zero,4011708 <___vfprintf_internal_r+0x222c>
 4011690:	00800044 	movi	r2,1
 4011694:	d8802b15 	stw	r2,172(sp)
 4011698:	003db706 	br	4010d78 <__alt_mem_onchip_memory2_0+0xfc00faf8>
 401169c:	00800b44 	movi	r2,45
 40116a0:	05adc83a 	sub	r22,zero,r22
 40116a4:	d8802305 	stb	r2,140(sp)
 40116a8:	003f3f06 	br	40113a8 <__alt_mem_onchip_memory2_0+0xfc010128>
 40116ac:	0005883a 	mov	r2,zero
 40116b0:	003f5206 	br	40113fc <__alt_mem_onchip_memory2_0+0xfc01017c>
 40116b4:	90a4703a 	and	r18,r18,r2
 40116b8:	903f4e26 	beq	r18,zero,40113f4 <__alt_mem_onchip_memory2_0+0xfc010174>
 40116bc:	003f4a06 	br	40113e8 <__alt_mem_onchip_memory2_0+0xfc010168>
 40116c0:	00800084 	movi	r2,2
 40116c4:	10c5c83a 	sub	r2,r2,r3
 40116c8:	003f8406 	br	40114dc <__alt_mem_onchip_memory2_0+0xfc01025c>
 40116cc:	d9402e17 	ldw	r5,184(sp)
 40116d0:	d9002e17 	ldw	r4,184(sp)
 40116d4:	ac400043 	ldbu	r17,1(r21)
 40116d8:	29400017 	ldw	r5,0(r5)
 40116dc:	20800104 	addi	r2,r4,4
 40116e0:	d8802e15 	stw	r2,184(sp)
 40116e4:	d9402a15 	stw	r5,168(sp)
 40116e8:	182b883a 	mov	r21,r3
 40116ec:	283e7b0e 	bge	r5,zero,40110dc <__alt_mem_onchip_memory2_0+0xfc00fe5c>
 40116f0:	8c403fcc 	andi	r17,r17,255
 40116f4:	017fffc4 	movi	r5,-1
 40116f8:	8c40201c 	xori	r17,r17,128
 40116fc:	d9402a15 	stw	r5,168(sp)
 4011700:	8c7fe004 	addi	r17,r17,-128
 4011704:	0037d706 	br	400f664 <__alt_mem_onchip_memory2_0+0xfc00e3e4>
 4011708:	d8c02a17 	ldw	r3,168(sp)
 401170c:	18c00084 	addi	r3,r3,2
 4011710:	d8c02b15 	stw	r3,172(sp)
 4011714:	1805883a 	mov	r2,r3
 4011718:	183d970e 	bge	r3,zero,4010d78 <__alt_mem_onchip_memory2_0+0xfc00faf8>
 401171c:	003fd706 	br	401167c <__alt_mem_onchip_memory2_0+0xfc0103fc>
 4011720:	0005883a 	mov	r2,zero
 4011724:	003f8f06 	br	4011564 <__alt_mem_onchip_memory2_0+0xfc0102e4>
 4011728:	9080004c 	andi	r2,r18,1
 401172c:	103f821e 	bne	r2,zero,4011538 <__alt_mem_onchip_memory2_0+0xfc0102b8>
 4011730:	d8802117 	ldw	r2,132(sp)
 4011734:	1405c83a 	sub	r2,r2,r16
 4011738:	d8803315 	stw	r2,204(sp)
 401173c:	b47ef426 	beq	r22,r17,4011310 <__alt_mem_onchip_memory2_0+0xfc010090>
 4011740:	dd802617 	ldw	r22,152(sp)
 4011744:	003f1206 	br	4011390 <__alt_mem_onchip_memory2_0+0xfc010110>
 4011748:	d8c02b03 	ldbu	r3,172(sp)
 401174c:	d8c02785 	stb	r3,158(sp)
 4011750:	0038df06 	br	400fad0 <__alt_mem_onchip_memory2_0+0xfc00e850>
 4011754:	d8c02b03 	ldbu	r3,172(sp)
 4011758:	d8c02785 	stb	r3,158(sp)
 401175c:	0038aa06 	br	400fa08 <__alt_mem_onchip_memory2_0+0xfc00e788>
 4011760:	d8c02b03 	ldbu	r3,172(sp)
 4011764:	d8c02785 	stb	r3,158(sp)
 4011768:	003a4306 	br	4010078 <__alt_mem_onchip_memory2_0+0xfc00edf8>
 401176c:	d8c02b03 	ldbu	r3,172(sp)
 4011770:	d8c02785 	stb	r3,158(sp)
 4011774:	003af506 	br	401034c <__alt_mem_onchip_memory2_0+0xfc00f0cc>
 4011778:	0005883a 	mov	r2,zero
 401177c:	003d7b06 	br	4010d6c <__alt_mem_onchip_memory2_0+0xfc00faec>
 4011780:	d8802344 	addi	r2,sp,141
 4011784:	003f1006 	br	40113c8 <__alt_mem_onchip_memory2_0+0xfc010148>
 4011788:	d8c02b03 	ldbu	r3,172(sp)
 401178c:	d8c02785 	stb	r3,158(sp)
 4011790:	0038fd06 	br	400fb88 <__alt_mem_onchip_memory2_0+0xfc00e908>
 4011794:	d8c02b03 	ldbu	r3,172(sp)
 4011798:	d8c02785 	stb	r3,158(sp)
 401179c:	003a9706 	br	40101fc <__alt_mem_onchip_memory2_0+0xfc00ef7c>
 40117a0:	d8c02b03 	ldbu	r3,172(sp)
 40117a4:	d8c02785 	stb	r3,158(sp)
 40117a8:	003a1806 	br	401000c <__alt_mem_onchip_memory2_0+0xfc00ed8c>
 40117ac:	d8c02b03 	ldbu	r3,172(sp)
 40117b0:	d8c02785 	stb	r3,158(sp)
 40117b4:	003abe06 	br	40102b0 <__alt_mem_onchip_memory2_0+0xfc00f030>

040117b8 <__vfprintf_internal>:
 40117b8:	008100f4 	movhi	r2,1027
 40117bc:	10a96004 	addi	r2,r2,-23168
 40117c0:	300f883a 	mov	r7,r6
 40117c4:	280d883a 	mov	r6,r5
 40117c8:	200b883a 	mov	r5,r4
 40117cc:	11000017 	ldw	r4,0(r2)
 40117d0:	400f4dc1 	jmpi	400f4dc <___vfprintf_internal_r>

040117d4 <__sbprintf>:
 40117d4:	2880030b 	ldhu	r2,12(r5)
 40117d8:	2ac01917 	ldw	r11,100(r5)
 40117dc:	2a80038b 	ldhu	r10,14(r5)
 40117e0:	2a400717 	ldw	r9,28(r5)
 40117e4:	2a000917 	ldw	r8,36(r5)
 40117e8:	defee204 	addi	sp,sp,-1144
 40117ec:	00c10004 	movi	r3,1024
 40117f0:	dc011a15 	stw	r16,1128(sp)
 40117f4:	10bfff4c 	andi	r2,r2,65533
 40117f8:	2821883a 	mov	r16,r5
 40117fc:	d8cb883a 	add	r5,sp,r3
 4011800:	dc811c15 	stw	r18,1136(sp)
 4011804:	dc411b15 	stw	r17,1132(sp)
 4011808:	dfc11d15 	stw	ra,1140(sp)
 401180c:	2025883a 	mov	r18,r4
 4011810:	d881030d 	sth	r2,1036(sp)
 4011814:	dac11915 	stw	r11,1124(sp)
 4011818:	da81038d 	sth	r10,1038(sp)
 401181c:	da410715 	stw	r9,1052(sp)
 4011820:	da010915 	stw	r8,1060(sp)
 4011824:	dec10015 	stw	sp,1024(sp)
 4011828:	dec10415 	stw	sp,1040(sp)
 401182c:	d8c10215 	stw	r3,1032(sp)
 4011830:	d8c10515 	stw	r3,1044(sp)
 4011834:	d8010615 	stw	zero,1048(sp)
 4011838:	400f4dc0 	call	400f4dc <___vfprintf_internal_r>
 401183c:	1023883a 	mov	r17,r2
 4011840:	10000416 	blt	r2,zero,4011854 <__sbprintf+0x80>
 4011844:	d9410004 	addi	r5,sp,1024
 4011848:	9009883a 	mov	r4,r18
 401184c:	40134b00 	call	40134b0 <_fflush_r>
 4011850:	10000d1e 	bne	r2,zero,4011888 <__sbprintf+0xb4>
 4011854:	d881030b 	ldhu	r2,1036(sp)
 4011858:	1080100c 	andi	r2,r2,64
 401185c:	10000326 	beq	r2,zero,401186c <__sbprintf+0x98>
 4011860:	8080030b 	ldhu	r2,12(r16)
 4011864:	10801014 	ori	r2,r2,64
 4011868:	8080030d 	sth	r2,12(r16)
 401186c:	8805883a 	mov	r2,r17
 4011870:	dfc11d17 	ldw	ra,1140(sp)
 4011874:	dc811c17 	ldw	r18,1136(sp)
 4011878:	dc411b17 	ldw	r17,1132(sp)
 401187c:	dc011a17 	ldw	r16,1128(sp)
 4011880:	dec11e04 	addi	sp,sp,1144
 4011884:	f800283a 	ret
 4011888:	047fffc4 	movi	r17,-1
 401188c:	003ff106 	br	4011854 <__alt_mem_onchip_memory2_0+0xfc0105d4>

04011890 <__swsetup_r>:
 4011890:	008100f4 	movhi	r2,1027
 4011894:	defffd04 	addi	sp,sp,-12
 4011898:	10a96004 	addi	r2,r2,-23168
 401189c:	dc400115 	stw	r17,4(sp)
 40118a0:	2023883a 	mov	r17,r4
 40118a4:	11000017 	ldw	r4,0(r2)
 40118a8:	dc000015 	stw	r16,0(sp)
 40118ac:	dfc00215 	stw	ra,8(sp)
 40118b0:	2821883a 	mov	r16,r5
 40118b4:	20000226 	beq	r4,zero,40118c0 <__swsetup_r+0x30>
 40118b8:	20800e17 	ldw	r2,56(r4)
 40118bc:	10003126 	beq	r2,zero,4011984 <__swsetup_r+0xf4>
 40118c0:	8080030b 	ldhu	r2,12(r16)
 40118c4:	10c0020c 	andi	r3,r2,8
 40118c8:	1009883a 	mov	r4,r2
 40118cc:	18000f26 	beq	r3,zero,401190c <__swsetup_r+0x7c>
 40118d0:	80c00417 	ldw	r3,16(r16)
 40118d4:	18001526 	beq	r3,zero,401192c <__swsetup_r+0x9c>
 40118d8:	1100004c 	andi	r4,r2,1
 40118dc:	20001c1e 	bne	r4,zero,4011950 <__swsetup_r+0xc0>
 40118e0:	1080008c 	andi	r2,r2,2
 40118e4:	1000291e 	bne	r2,zero,401198c <__swsetup_r+0xfc>
 40118e8:	80800517 	ldw	r2,20(r16)
 40118ec:	80800215 	stw	r2,8(r16)
 40118f0:	18001c26 	beq	r3,zero,4011964 <__swsetup_r+0xd4>
 40118f4:	0005883a 	mov	r2,zero
 40118f8:	dfc00217 	ldw	ra,8(sp)
 40118fc:	dc400117 	ldw	r17,4(sp)
 4011900:	dc000017 	ldw	r16,0(sp)
 4011904:	dec00304 	addi	sp,sp,12
 4011908:	f800283a 	ret
 401190c:	2080040c 	andi	r2,r4,16
 4011910:	10002e26 	beq	r2,zero,40119cc <__swsetup_r+0x13c>
 4011914:	2080010c 	andi	r2,r4,4
 4011918:	10001e1e 	bne	r2,zero,4011994 <__swsetup_r+0x104>
 401191c:	80c00417 	ldw	r3,16(r16)
 4011920:	20800214 	ori	r2,r4,8
 4011924:	8080030d 	sth	r2,12(r16)
 4011928:	183feb1e 	bne	r3,zero,40118d8 <__alt_mem_onchip_memory2_0+0xfc010658>
 401192c:	1100a00c 	andi	r4,r2,640
 4011930:	01408004 	movi	r5,512
 4011934:	217fe826 	beq	r4,r5,40118d8 <__alt_mem_onchip_memory2_0+0xfc010658>
 4011938:	800b883a 	mov	r5,r16
 401193c:	8809883a 	mov	r4,r17
 4011940:	401444c0 	call	401444c <__smakebuf_r>
 4011944:	8080030b 	ldhu	r2,12(r16)
 4011948:	80c00417 	ldw	r3,16(r16)
 401194c:	003fe206 	br	40118d8 <__alt_mem_onchip_memory2_0+0xfc010658>
 4011950:	80800517 	ldw	r2,20(r16)
 4011954:	80000215 	stw	zero,8(r16)
 4011958:	0085c83a 	sub	r2,zero,r2
 401195c:	80800615 	stw	r2,24(r16)
 4011960:	183fe41e 	bne	r3,zero,40118f4 <__alt_mem_onchip_memory2_0+0xfc010674>
 4011964:	80c0030b 	ldhu	r3,12(r16)
 4011968:	0005883a 	mov	r2,zero
 401196c:	1900200c 	andi	r4,r3,128
 4011970:	203fe126 	beq	r4,zero,40118f8 <__alt_mem_onchip_memory2_0+0xfc010678>
 4011974:	18c01014 	ori	r3,r3,64
 4011978:	80c0030d 	sth	r3,12(r16)
 401197c:	00bfffc4 	movi	r2,-1
 4011980:	003fdd06 	br	40118f8 <__alt_mem_onchip_memory2_0+0xfc010678>
 4011984:	401389c0 	call	401389c <__sinit>
 4011988:	003fcd06 	br	40118c0 <__alt_mem_onchip_memory2_0+0xfc010640>
 401198c:	0005883a 	mov	r2,zero
 4011990:	003fd606 	br	40118ec <__alt_mem_onchip_memory2_0+0xfc01066c>
 4011994:	81400c17 	ldw	r5,48(r16)
 4011998:	28000626 	beq	r5,zero,40119b4 <__swsetup_r+0x124>
 401199c:	80801004 	addi	r2,r16,64
 40119a0:	28800326 	beq	r5,r2,40119b0 <__swsetup_r+0x120>
 40119a4:	8809883a 	mov	r4,r17
 40119a8:	4013a100 	call	4013a10 <_free_r>
 40119ac:	8100030b 	ldhu	r4,12(r16)
 40119b0:	80000c15 	stw	zero,48(r16)
 40119b4:	80c00417 	ldw	r3,16(r16)
 40119b8:	00bff6c4 	movi	r2,-37
 40119bc:	1108703a 	and	r4,r2,r4
 40119c0:	80000115 	stw	zero,4(r16)
 40119c4:	80c00015 	stw	r3,0(r16)
 40119c8:	003fd506 	br	4011920 <__alt_mem_onchip_memory2_0+0xfc0106a0>
 40119cc:	00800244 	movi	r2,9
 40119d0:	88800015 	stw	r2,0(r17)
 40119d4:	20801014 	ori	r2,r4,64
 40119d8:	8080030d 	sth	r2,12(r16)
 40119dc:	00bfffc4 	movi	r2,-1
 40119e0:	003fc506 	br	40118f8 <__alt_mem_onchip_memory2_0+0xfc010678>

040119e4 <quorem>:
 40119e4:	defff204 	addi	sp,sp,-56
 40119e8:	ddc00b15 	stw	r23,44(sp)
 40119ec:	20800417 	ldw	r2,16(r4)
 40119f0:	2dc00417 	ldw	r23,16(r5)
 40119f4:	dfc00d15 	stw	ra,52(sp)
 40119f8:	df000c15 	stw	fp,48(sp)
 40119fc:	dd800a15 	stw	r22,40(sp)
 4011a00:	dd400915 	stw	r21,36(sp)
 4011a04:	dd000815 	stw	r20,32(sp)
 4011a08:	dcc00715 	stw	r19,28(sp)
 4011a0c:	dc800615 	stw	r18,24(sp)
 4011a10:	dc400515 	stw	r17,20(sp)
 4011a14:	dc000415 	stw	r16,16(sp)
 4011a18:	15c07a16 	blt	r2,r23,4011c04 <quorem+0x220>
 4011a1c:	bdffffc4 	addi	r23,r23,-1
 4011a20:	bde9883a 	add	r20,r23,r23
 4011a24:	28c00504 	addi	r3,r5,20
 4011a28:	a529883a 	add	r20,r20,r20
 4011a2c:	1d39883a 	add	fp,r3,r20
 4011a30:	24c00504 	addi	r19,r4,20
 4011a34:	d9400215 	stw	r5,8(sp)
 4011a38:	9d29883a 	add	r20,r19,r20
 4011a3c:	e1400017 	ldw	r5,0(fp)
 4011a40:	d9000015 	stw	r4,0(sp)
 4011a44:	a1000017 	ldw	r4,0(r20)
 4011a48:	29400044 	addi	r5,r5,1
 4011a4c:	d8c00115 	stw	r3,4(sp)
 4011a50:	dd000315 	stw	r20,12(sp)
 4011a54:	400d2080 	call	400d208 <__udivsi3>
 4011a58:	1025883a 	mov	r18,r2
 4011a5c:	10003026 	beq	r2,zero,4011b20 <quorem+0x13c>
 4011a60:	dc400117 	ldw	r17,4(sp)
 4011a64:	9829883a 	mov	r20,r19
 4011a68:	002d883a 	mov	r22,zero
 4011a6c:	0021883a 	mov	r16,zero
 4011a70:	8d400017 	ldw	r21,0(r17)
 4011a74:	900b883a 	mov	r5,r18
 4011a78:	8c400104 	addi	r17,r17,4
 4011a7c:	a93fffcc 	andi	r4,r21,65535
 4011a80:	400d2c40 	call	400d2c4 <__mulsi3>
 4011a84:	a808d43a 	srli	r4,r21,16
 4011a88:	900b883a 	mov	r5,r18
 4011a8c:	15ad883a 	add	r22,r2,r22
 4011a90:	400d2c40 	call	400d2c4 <__mulsi3>
 4011a94:	a1000017 	ldw	r4,0(r20)
 4011a98:	b00cd43a 	srli	r6,r22,16
 4011a9c:	b0ffffcc 	andi	r3,r22,65535
 4011aa0:	217fffcc 	andi	r5,r4,65535
 4011aa4:	2c21883a 	add	r16,r5,r16
 4011aa8:	80c7c83a 	sub	r3,r16,r3
 4011aac:	2008d43a 	srli	r4,r4,16
 4011ab0:	1185883a 	add	r2,r2,r6
 4011ab4:	1821d43a 	srai	r16,r3,16
 4011ab8:	117fffcc 	andi	r5,r2,65535
 4011abc:	2149c83a 	sub	r4,r4,r5
 4011ac0:	2421883a 	add	r16,r4,r16
 4011ac4:	8008943a 	slli	r4,r16,16
 4011ac8:	18ffffcc 	andi	r3,r3,65535
 4011acc:	102cd43a 	srli	r22,r2,16
 4011ad0:	20c8b03a 	or	r4,r4,r3
 4011ad4:	a1000015 	stw	r4,0(r20)
 4011ad8:	8021d43a 	srai	r16,r16,16
 4011adc:	a5000104 	addi	r20,r20,4
 4011ae0:	e47fe32e 	bgeu	fp,r17,4011a70 <__alt_mem_onchip_memory2_0+0xfc0107f0>
 4011ae4:	d8c00317 	ldw	r3,12(sp)
 4011ae8:	18800017 	ldw	r2,0(r3)
 4011aec:	10000c1e 	bne	r2,zero,4011b20 <quorem+0x13c>
 4011af0:	18bfff04 	addi	r2,r3,-4
 4011af4:	9880082e 	bgeu	r19,r2,4011b18 <quorem+0x134>
 4011af8:	18ffff17 	ldw	r3,-4(r3)
 4011afc:	18000326 	beq	r3,zero,4011b0c <quorem+0x128>
 4011b00:	00000506 	br	4011b18 <quorem+0x134>
 4011b04:	10c00017 	ldw	r3,0(r2)
 4011b08:	1800031e 	bne	r3,zero,4011b18 <quorem+0x134>
 4011b0c:	10bfff04 	addi	r2,r2,-4
 4011b10:	bdffffc4 	addi	r23,r23,-1
 4011b14:	98bffb36 	bltu	r19,r2,4011b04 <__alt_mem_onchip_memory2_0+0xfc010884>
 4011b18:	d8c00017 	ldw	r3,0(sp)
 4011b1c:	1dc00415 	stw	r23,16(r3)
 4011b20:	d9400217 	ldw	r5,8(sp)
 4011b24:	d9000017 	ldw	r4,0(sp)
 4011b28:	40151cc0 	call	40151cc <__mcmp>
 4011b2c:	10002816 	blt	r2,zero,4011bd0 <quorem+0x1ec>
 4011b30:	dc400117 	ldw	r17,4(sp)
 4011b34:	94800044 	addi	r18,r18,1
 4011b38:	980d883a 	mov	r6,r19
 4011b3c:	0007883a 	mov	r3,zero
 4011b40:	31000017 	ldw	r4,0(r6)
 4011b44:	89400017 	ldw	r5,0(r17)
 4011b48:	31800104 	addi	r6,r6,4
 4011b4c:	20bfffcc 	andi	r2,r4,65535
 4011b50:	10c7883a 	add	r3,r2,r3
 4011b54:	28bfffcc 	andi	r2,r5,65535
 4011b58:	1885c83a 	sub	r2,r3,r2
 4011b5c:	280ad43a 	srli	r5,r5,16
 4011b60:	2008d43a 	srli	r4,r4,16
 4011b64:	1007d43a 	srai	r3,r2,16
 4011b68:	10bfffcc 	andi	r2,r2,65535
 4011b6c:	2149c83a 	sub	r4,r4,r5
 4011b70:	20c9883a 	add	r4,r4,r3
 4011b74:	200a943a 	slli	r5,r4,16
 4011b78:	8c400104 	addi	r17,r17,4
 4011b7c:	2007d43a 	srai	r3,r4,16
 4011b80:	2884b03a 	or	r2,r5,r2
 4011b84:	30bfff15 	stw	r2,-4(r6)
 4011b88:	e47fed2e 	bgeu	fp,r17,4011b40 <__alt_mem_onchip_memory2_0+0xfc0108c0>
 4011b8c:	bdc5883a 	add	r2,r23,r23
 4011b90:	1085883a 	add	r2,r2,r2
 4011b94:	9887883a 	add	r3,r19,r2
 4011b98:	18800017 	ldw	r2,0(r3)
 4011b9c:	10000c1e 	bne	r2,zero,4011bd0 <quorem+0x1ec>
 4011ba0:	18bfff04 	addi	r2,r3,-4
 4011ba4:	9880082e 	bgeu	r19,r2,4011bc8 <quorem+0x1e4>
 4011ba8:	18ffff17 	ldw	r3,-4(r3)
 4011bac:	18000326 	beq	r3,zero,4011bbc <quorem+0x1d8>
 4011bb0:	00000506 	br	4011bc8 <quorem+0x1e4>
 4011bb4:	10c00017 	ldw	r3,0(r2)
 4011bb8:	1800031e 	bne	r3,zero,4011bc8 <quorem+0x1e4>
 4011bbc:	10bfff04 	addi	r2,r2,-4
 4011bc0:	bdffffc4 	addi	r23,r23,-1
 4011bc4:	98bffb36 	bltu	r19,r2,4011bb4 <__alt_mem_onchip_memory2_0+0xfc010934>
 4011bc8:	d8c00017 	ldw	r3,0(sp)
 4011bcc:	1dc00415 	stw	r23,16(r3)
 4011bd0:	9005883a 	mov	r2,r18
 4011bd4:	dfc00d17 	ldw	ra,52(sp)
 4011bd8:	df000c17 	ldw	fp,48(sp)
 4011bdc:	ddc00b17 	ldw	r23,44(sp)
 4011be0:	dd800a17 	ldw	r22,40(sp)
 4011be4:	dd400917 	ldw	r21,36(sp)
 4011be8:	dd000817 	ldw	r20,32(sp)
 4011bec:	dcc00717 	ldw	r19,28(sp)
 4011bf0:	dc800617 	ldw	r18,24(sp)
 4011bf4:	dc400517 	ldw	r17,20(sp)
 4011bf8:	dc000417 	ldw	r16,16(sp)
 4011bfc:	dec00e04 	addi	sp,sp,56
 4011c00:	f800283a 	ret
 4011c04:	0005883a 	mov	r2,zero
 4011c08:	003ff206 	br	4011bd4 <__alt_mem_onchip_memory2_0+0xfc010954>

04011c0c <_dtoa_r>:
 4011c0c:	20801017 	ldw	r2,64(r4)
 4011c10:	deffde04 	addi	sp,sp,-136
 4011c14:	df002015 	stw	fp,128(sp)
 4011c18:	dcc01b15 	stw	r19,108(sp)
 4011c1c:	dc801a15 	stw	r18,104(sp)
 4011c20:	dc401915 	stw	r17,100(sp)
 4011c24:	dc001815 	stw	r16,96(sp)
 4011c28:	dfc02115 	stw	ra,132(sp)
 4011c2c:	ddc01f15 	stw	r23,124(sp)
 4011c30:	dd801e15 	stw	r22,120(sp)
 4011c34:	dd401d15 	stw	r21,116(sp)
 4011c38:	dd001c15 	stw	r20,112(sp)
 4011c3c:	d9c00315 	stw	r7,12(sp)
 4011c40:	2039883a 	mov	fp,r4
 4011c44:	3023883a 	mov	r17,r6
 4011c48:	2825883a 	mov	r18,r5
 4011c4c:	dc002417 	ldw	r16,144(sp)
 4011c50:	3027883a 	mov	r19,r6
 4011c54:	10000826 	beq	r2,zero,4011c78 <_dtoa_r+0x6c>
 4011c58:	21801117 	ldw	r6,68(r4)
 4011c5c:	00c00044 	movi	r3,1
 4011c60:	100b883a 	mov	r5,r2
 4011c64:	1986983a 	sll	r3,r3,r6
 4011c68:	11800115 	stw	r6,4(r2)
 4011c6c:	10c00215 	stw	r3,8(r2)
 4011c70:	40148f00 	call	40148f0 <_Bfree>
 4011c74:	e0001015 	stw	zero,64(fp)
 4011c78:	88002e16 	blt	r17,zero,4011d34 <_dtoa_r+0x128>
 4011c7c:	80000015 	stw	zero,0(r16)
 4011c80:	889ffc2c 	andhi	r2,r17,32752
 4011c84:	00dffc34 	movhi	r3,32752
 4011c88:	10c01c26 	beq	r2,r3,4011cfc <_dtoa_r+0xf0>
 4011c8c:	000d883a 	mov	r6,zero
 4011c90:	000f883a 	mov	r7,zero
 4011c94:	9009883a 	mov	r4,r18
 4011c98:	980b883a 	mov	r5,r19
 4011c9c:	4019ffc0 	call	4019ffc <__eqdf2>
 4011ca0:	10002b1e 	bne	r2,zero,4011d50 <_dtoa_r+0x144>
 4011ca4:	d9c02317 	ldw	r7,140(sp)
 4011ca8:	00800044 	movi	r2,1
 4011cac:	38800015 	stw	r2,0(r7)
 4011cb0:	d8802517 	ldw	r2,148(sp)
 4011cb4:	10019e26 	beq	r2,zero,4012330 <_dtoa_r+0x724>
 4011cb8:	d8c02517 	ldw	r3,148(sp)
 4011cbc:	008100b4 	movhi	r2,1026
 4011cc0:	109c8144 	addi	r2,r2,29189
 4011cc4:	18800015 	stw	r2,0(r3)
 4011cc8:	10bfffc4 	addi	r2,r2,-1
 4011ccc:	dfc02117 	ldw	ra,132(sp)
 4011cd0:	df002017 	ldw	fp,128(sp)
 4011cd4:	ddc01f17 	ldw	r23,124(sp)
 4011cd8:	dd801e17 	ldw	r22,120(sp)
 4011cdc:	dd401d17 	ldw	r21,116(sp)
 4011ce0:	dd001c17 	ldw	r20,112(sp)
 4011ce4:	dcc01b17 	ldw	r19,108(sp)
 4011ce8:	dc801a17 	ldw	r18,104(sp)
 4011cec:	dc401917 	ldw	r17,100(sp)
 4011cf0:	dc001817 	ldw	r16,96(sp)
 4011cf4:	dec02204 	addi	sp,sp,136
 4011cf8:	f800283a 	ret
 4011cfc:	d8c02317 	ldw	r3,140(sp)
 4011d00:	0089c3c4 	movi	r2,9999
 4011d04:	18800015 	stw	r2,0(r3)
 4011d08:	90017726 	beq	r18,zero,40122e8 <_dtoa_r+0x6dc>
 4011d0c:	008100b4 	movhi	r2,1026
 4011d10:	109c8d04 	addi	r2,r2,29236
 4011d14:	d9002517 	ldw	r4,148(sp)
 4011d18:	203fec26 	beq	r4,zero,4011ccc <__alt_mem_onchip_memory2_0+0xfc010a4c>
 4011d1c:	10c000c7 	ldb	r3,3(r2)
 4011d20:	1801781e 	bne	r3,zero,4012304 <_dtoa_r+0x6f8>
 4011d24:	10c000c4 	addi	r3,r2,3
 4011d28:	d9802517 	ldw	r6,148(sp)
 4011d2c:	30c00015 	stw	r3,0(r6)
 4011d30:	003fe606 	br	4011ccc <__alt_mem_onchip_memory2_0+0xfc010a4c>
 4011d34:	04e00034 	movhi	r19,32768
 4011d38:	9cffffc4 	addi	r19,r19,-1
 4011d3c:	00800044 	movi	r2,1
 4011d40:	8ce6703a 	and	r19,r17,r19
 4011d44:	80800015 	stw	r2,0(r16)
 4011d48:	9823883a 	mov	r17,r19
 4011d4c:	003fcc06 	br	4011c80 <__alt_mem_onchip_memory2_0+0xfc010a00>
 4011d50:	d8800204 	addi	r2,sp,8
 4011d54:	d8800015 	stw	r2,0(sp)
 4011d58:	d9c00104 	addi	r7,sp,4
 4011d5c:	900b883a 	mov	r5,r18
 4011d60:	980d883a 	mov	r6,r19
 4011d64:	e009883a 	mov	r4,fp
 4011d68:	8820d53a 	srli	r16,r17,20
 4011d6c:	40155980 	call	4015598 <__d2b>
 4011d70:	d8800915 	stw	r2,36(sp)
 4011d74:	8001651e 	bne	r16,zero,401230c <_dtoa_r+0x700>
 4011d78:	dd800217 	ldw	r22,8(sp)
 4011d7c:	dc000117 	ldw	r16,4(sp)
 4011d80:	00800804 	movi	r2,32
 4011d84:	b421883a 	add	r16,r22,r16
 4011d88:	80c10c84 	addi	r3,r16,1074
 4011d8c:	10c2d10e 	bge	r2,r3,40128d4 <_dtoa_r+0xcc8>
 4011d90:	00801004 	movi	r2,64
 4011d94:	81010484 	addi	r4,r16,1042
 4011d98:	10c7c83a 	sub	r3,r2,r3
 4011d9c:	9108d83a 	srl	r4,r18,r4
 4011da0:	88e2983a 	sll	r17,r17,r3
 4011da4:	2448b03a 	or	r4,r4,r17
 4011da8:	401b5180 	call	401b518 <__floatunsidf>
 4011dac:	017f8434 	movhi	r5,65040
 4011db0:	01800044 	movi	r6,1
 4011db4:	1009883a 	mov	r4,r2
 4011db8:	194b883a 	add	r5,r3,r5
 4011dbc:	843fffc4 	addi	r16,r16,-1
 4011dc0:	d9801115 	stw	r6,68(sp)
 4011dc4:	000d883a 	mov	r6,zero
 4011dc8:	01cffe34 	movhi	r7,16376
 4011dcc:	401aac00 	call	401aac0 <__subdf3>
 4011dd0:	0198dbf4 	movhi	r6,25455
 4011dd4:	01cff4f4 	movhi	r7,16339
 4011dd8:	3190d844 	addi	r6,r6,17249
 4011ddc:	39e1e9c4 	addi	r7,r7,-30809
 4011de0:	1009883a 	mov	r4,r2
 4011de4:	180b883a 	mov	r5,r3
 4011de8:	401a2540 	call	401a254 <__muldf3>
 4011dec:	01a2d874 	movhi	r6,35681
 4011df0:	01cff1f4 	movhi	r7,16327
 4011df4:	31b22cc4 	addi	r6,r6,-14157
 4011df8:	39e28a04 	addi	r7,r7,-30168
 4011dfc:	180b883a 	mov	r5,r3
 4011e00:	1009883a 	mov	r4,r2
 4011e04:	4018d800 	call	4018d80 <__adddf3>
 4011e08:	8009883a 	mov	r4,r16
 4011e0c:	1029883a 	mov	r20,r2
 4011e10:	1823883a 	mov	r17,r3
 4011e14:	401b43c0 	call	401b43c <__floatsidf>
 4011e18:	019427f4 	movhi	r6,20639
 4011e1c:	01cff4f4 	movhi	r7,16339
 4011e20:	319e7ec4 	addi	r6,r6,31227
 4011e24:	39d104c4 	addi	r7,r7,17427
 4011e28:	1009883a 	mov	r4,r2
 4011e2c:	180b883a 	mov	r5,r3
 4011e30:	401a2540 	call	401a254 <__muldf3>
 4011e34:	100d883a 	mov	r6,r2
 4011e38:	180f883a 	mov	r7,r3
 4011e3c:	a009883a 	mov	r4,r20
 4011e40:	880b883a 	mov	r5,r17
 4011e44:	4018d800 	call	4018d80 <__adddf3>
 4011e48:	1009883a 	mov	r4,r2
 4011e4c:	180b883a 	mov	r5,r3
 4011e50:	1029883a 	mov	r20,r2
 4011e54:	1823883a 	mov	r17,r3
 4011e58:	401b3bc0 	call	401b3bc <__fixdfsi>
 4011e5c:	000d883a 	mov	r6,zero
 4011e60:	000f883a 	mov	r7,zero
 4011e64:	a009883a 	mov	r4,r20
 4011e68:	880b883a 	mov	r5,r17
 4011e6c:	d8800515 	stw	r2,20(sp)
 4011e70:	401a1600 	call	401a160 <__ledf2>
 4011e74:	10028716 	blt	r2,zero,4012894 <_dtoa_r+0xc88>
 4011e78:	d8c00517 	ldw	r3,20(sp)
 4011e7c:	00800584 	movi	r2,22
 4011e80:	10c27536 	bltu	r2,r3,4012858 <_dtoa_r+0xc4c>
 4011e84:	180490fa 	slli	r2,r3,3
 4011e88:	00c100b4 	movhi	r3,1026
 4011e8c:	18dca804 	addi	r3,r3,29344
 4011e90:	1885883a 	add	r2,r3,r2
 4011e94:	11000017 	ldw	r4,0(r2)
 4011e98:	11400117 	ldw	r5,4(r2)
 4011e9c:	900d883a 	mov	r6,r18
 4011ea0:	980f883a 	mov	r7,r19
 4011ea4:	401a0840 	call	401a084 <__gedf2>
 4011ea8:	00828d0e 	bge	zero,r2,40128e0 <_dtoa_r+0xcd4>
 4011eac:	d9000517 	ldw	r4,20(sp)
 4011eb0:	d8000e15 	stw	zero,56(sp)
 4011eb4:	213fffc4 	addi	r4,r4,-1
 4011eb8:	d9000515 	stw	r4,20(sp)
 4011ebc:	b42dc83a 	sub	r22,r22,r16
 4011ec0:	b5bfffc4 	addi	r22,r22,-1
 4011ec4:	b0026f16 	blt	r22,zero,4012884 <_dtoa_r+0xc78>
 4011ec8:	d8000815 	stw	zero,32(sp)
 4011ecc:	d9c00517 	ldw	r7,20(sp)
 4011ed0:	38026416 	blt	r7,zero,4012864 <_dtoa_r+0xc58>
 4011ed4:	b1ed883a 	add	r22,r22,r7
 4011ed8:	d9c00d15 	stw	r7,52(sp)
 4011edc:	d8000a15 	stw	zero,40(sp)
 4011ee0:	d9800317 	ldw	r6,12(sp)
 4011ee4:	00800244 	movi	r2,9
 4011ee8:	11811436 	bltu	r2,r6,401233c <_dtoa_r+0x730>
 4011eec:	00800144 	movi	r2,5
 4011ef0:	1184e10e 	bge	r2,r6,4013278 <_dtoa_r+0x166c>
 4011ef4:	31bfff04 	addi	r6,r6,-4
 4011ef8:	d9800315 	stw	r6,12(sp)
 4011efc:	0023883a 	mov	r17,zero
 4011f00:	d9800317 	ldw	r6,12(sp)
 4011f04:	008000c4 	movi	r2,3
 4011f08:	30836726 	beq	r6,r2,4012ca8 <_dtoa_r+0x109c>
 4011f0c:	1183410e 	bge	r2,r6,4012c14 <_dtoa_r+0x1008>
 4011f10:	d9c00317 	ldw	r7,12(sp)
 4011f14:	00800104 	movi	r2,4
 4011f18:	38827c26 	beq	r7,r2,401290c <_dtoa_r+0xd00>
 4011f1c:	00800144 	movi	r2,5
 4011f20:	3884c41e 	bne	r7,r2,4013234 <_dtoa_r+0x1628>
 4011f24:	00800044 	movi	r2,1
 4011f28:	d8800b15 	stw	r2,44(sp)
 4011f2c:	d8c00517 	ldw	r3,20(sp)
 4011f30:	d9002217 	ldw	r4,136(sp)
 4011f34:	1907883a 	add	r3,r3,r4
 4011f38:	19800044 	addi	r6,r3,1
 4011f3c:	d8c00c15 	stw	r3,48(sp)
 4011f40:	d9800615 	stw	r6,24(sp)
 4011f44:	0183a40e 	bge	zero,r6,4012dd8 <_dtoa_r+0x11cc>
 4011f48:	d9800617 	ldw	r6,24(sp)
 4011f4c:	3021883a 	mov	r16,r6
 4011f50:	e0001115 	stw	zero,68(fp)
 4011f54:	008005c4 	movi	r2,23
 4011f58:	1184c92e 	bgeu	r2,r6,4013280 <_dtoa_r+0x1674>
 4011f5c:	00c00044 	movi	r3,1
 4011f60:	00800104 	movi	r2,4
 4011f64:	1085883a 	add	r2,r2,r2
 4011f68:	11000504 	addi	r4,r2,20
 4011f6c:	180b883a 	mov	r5,r3
 4011f70:	18c00044 	addi	r3,r3,1
 4011f74:	313ffb2e 	bgeu	r6,r4,4011f64 <__alt_mem_onchip_memory2_0+0xfc010ce4>
 4011f78:	e1401115 	stw	r5,68(fp)
 4011f7c:	e009883a 	mov	r4,fp
 4011f80:	40148480 	call	4014848 <_Balloc>
 4011f84:	d8800715 	stw	r2,28(sp)
 4011f88:	e0801015 	stw	r2,64(fp)
 4011f8c:	00800384 	movi	r2,14
 4011f90:	1400f736 	bltu	r2,r16,4012370 <_dtoa_r+0x764>
 4011f94:	8800f626 	beq	r17,zero,4012370 <_dtoa_r+0x764>
 4011f98:	d9c00517 	ldw	r7,20(sp)
 4011f9c:	01c39a0e 	bge	zero,r7,4012e08 <_dtoa_r+0x11fc>
 4011fa0:	388003cc 	andi	r2,r7,15
 4011fa4:	100490fa 	slli	r2,r2,3
 4011fa8:	382bd13a 	srai	r21,r7,4
 4011fac:	00c100b4 	movhi	r3,1026
 4011fb0:	18dca804 	addi	r3,r3,29344
 4011fb4:	1885883a 	add	r2,r3,r2
 4011fb8:	a8c0040c 	andi	r3,r21,16
 4011fbc:	12400017 	ldw	r9,0(r2)
 4011fc0:	12000117 	ldw	r8,4(r2)
 4011fc4:	18037926 	beq	r3,zero,4012dac <_dtoa_r+0x11a0>
 4011fc8:	008100b4 	movhi	r2,1026
 4011fcc:	109c9e04 	addi	r2,r2,29304
 4011fd0:	11800817 	ldw	r6,32(r2)
 4011fd4:	11c00917 	ldw	r7,36(r2)
 4011fd8:	9009883a 	mov	r4,r18
 4011fdc:	980b883a 	mov	r5,r19
 4011fe0:	da001715 	stw	r8,92(sp)
 4011fe4:	da401615 	stw	r9,88(sp)
 4011fe8:	401962c0 	call	401962c <__divdf3>
 4011fec:	da001717 	ldw	r8,92(sp)
 4011ff0:	da401617 	ldw	r9,88(sp)
 4011ff4:	ad4003cc 	andi	r21,r21,15
 4011ff8:	040000c4 	movi	r16,3
 4011ffc:	1023883a 	mov	r17,r2
 4012000:	1829883a 	mov	r20,r3
 4012004:	a8001126 	beq	r21,zero,401204c <_dtoa_r+0x440>
 4012008:	05c100b4 	movhi	r23,1026
 401200c:	bddc9e04 	addi	r23,r23,29304
 4012010:	4805883a 	mov	r2,r9
 4012014:	4007883a 	mov	r3,r8
 4012018:	a980004c 	andi	r6,r21,1
 401201c:	1009883a 	mov	r4,r2
 4012020:	a82bd07a 	srai	r21,r21,1
 4012024:	180b883a 	mov	r5,r3
 4012028:	30000426 	beq	r6,zero,401203c <_dtoa_r+0x430>
 401202c:	b9800017 	ldw	r6,0(r23)
 4012030:	b9c00117 	ldw	r7,4(r23)
 4012034:	84000044 	addi	r16,r16,1
 4012038:	401a2540 	call	401a254 <__muldf3>
 401203c:	bdc00204 	addi	r23,r23,8
 4012040:	a83ff51e 	bne	r21,zero,4012018 <__alt_mem_onchip_memory2_0+0xfc010d98>
 4012044:	1013883a 	mov	r9,r2
 4012048:	1811883a 	mov	r8,r3
 401204c:	480d883a 	mov	r6,r9
 4012050:	400f883a 	mov	r7,r8
 4012054:	8809883a 	mov	r4,r17
 4012058:	a00b883a 	mov	r5,r20
 401205c:	401962c0 	call	401962c <__divdf3>
 4012060:	d8800f15 	stw	r2,60(sp)
 4012064:	d8c01015 	stw	r3,64(sp)
 4012068:	d8c00e17 	ldw	r3,56(sp)
 401206c:	18000626 	beq	r3,zero,4012088 <_dtoa_r+0x47c>
 4012070:	d9000f17 	ldw	r4,60(sp)
 4012074:	d9401017 	ldw	r5,64(sp)
 4012078:	000d883a 	mov	r6,zero
 401207c:	01cffc34 	movhi	r7,16368
 4012080:	401a1600 	call	401a160 <__ledf2>
 4012084:	10040b16 	blt	r2,zero,40130b4 <_dtoa_r+0x14a8>
 4012088:	8009883a 	mov	r4,r16
 401208c:	401b43c0 	call	401b43c <__floatsidf>
 4012090:	d9800f17 	ldw	r6,60(sp)
 4012094:	d9c01017 	ldw	r7,64(sp)
 4012098:	1009883a 	mov	r4,r2
 401209c:	180b883a 	mov	r5,r3
 40120a0:	401a2540 	call	401a254 <__muldf3>
 40120a4:	000d883a 	mov	r6,zero
 40120a8:	01d00734 	movhi	r7,16412
 40120ac:	1009883a 	mov	r4,r2
 40120b0:	180b883a 	mov	r5,r3
 40120b4:	4018d800 	call	4018d80 <__adddf3>
 40120b8:	1021883a 	mov	r16,r2
 40120bc:	d8800617 	ldw	r2,24(sp)
 40120c0:	047f3034 	movhi	r17,64704
 40120c4:	1c63883a 	add	r17,r3,r17
 40120c8:	10031826 	beq	r2,zero,4012d2c <_dtoa_r+0x1120>
 40120cc:	d8c00517 	ldw	r3,20(sp)
 40120d0:	db000617 	ldw	r12,24(sp)
 40120d4:	d8c01315 	stw	r3,76(sp)
 40120d8:	d9000b17 	ldw	r4,44(sp)
 40120dc:	20038f26 	beq	r4,zero,4012f1c <_dtoa_r+0x1310>
 40120e0:	60bfffc4 	addi	r2,r12,-1
 40120e4:	100490fa 	slli	r2,r2,3
 40120e8:	00c100b4 	movhi	r3,1026
 40120ec:	18dca804 	addi	r3,r3,29344
 40120f0:	1885883a 	add	r2,r3,r2
 40120f4:	11800017 	ldw	r6,0(r2)
 40120f8:	11c00117 	ldw	r7,4(r2)
 40120fc:	d8800717 	ldw	r2,28(sp)
 4012100:	0009883a 	mov	r4,zero
 4012104:	014ff834 	movhi	r5,16352
 4012108:	db001615 	stw	r12,88(sp)
 401210c:	15c00044 	addi	r23,r2,1
 4012110:	401962c0 	call	401962c <__divdf3>
 4012114:	800d883a 	mov	r6,r16
 4012118:	880f883a 	mov	r7,r17
 401211c:	1009883a 	mov	r4,r2
 4012120:	180b883a 	mov	r5,r3
 4012124:	401aac00 	call	401aac0 <__subdf3>
 4012128:	d9401017 	ldw	r5,64(sp)
 401212c:	d9000f17 	ldw	r4,60(sp)
 4012130:	102b883a 	mov	r21,r2
 4012134:	d8c01215 	stw	r3,72(sp)
 4012138:	401b3bc0 	call	401b3bc <__fixdfsi>
 401213c:	1009883a 	mov	r4,r2
 4012140:	1029883a 	mov	r20,r2
 4012144:	401b43c0 	call	401b43c <__floatsidf>
 4012148:	d9000f17 	ldw	r4,60(sp)
 401214c:	d9401017 	ldw	r5,64(sp)
 4012150:	100d883a 	mov	r6,r2
 4012154:	180f883a 	mov	r7,r3
 4012158:	401aac00 	call	401aac0 <__subdf3>
 401215c:	1823883a 	mov	r17,r3
 4012160:	d8c00717 	ldw	r3,28(sp)
 4012164:	d9401217 	ldw	r5,72(sp)
 4012168:	a2000c04 	addi	r8,r20,48
 401216c:	1021883a 	mov	r16,r2
 4012170:	1a000005 	stb	r8,0(r3)
 4012174:	800d883a 	mov	r6,r16
 4012178:	880f883a 	mov	r7,r17
 401217c:	a809883a 	mov	r4,r21
 4012180:	4029883a 	mov	r20,r8
 4012184:	401a0840 	call	401a084 <__gedf2>
 4012188:	00841d16 	blt	zero,r2,4013200 <_dtoa_r+0x15f4>
 401218c:	800d883a 	mov	r6,r16
 4012190:	880f883a 	mov	r7,r17
 4012194:	0009883a 	mov	r4,zero
 4012198:	014ffc34 	movhi	r5,16368
 401219c:	401aac00 	call	401aac0 <__subdf3>
 40121a0:	d9401217 	ldw	r5,72(sp)
 40121a4:	100d883a 	mov	r6,r2
 40121a8:	180f883a 	mov	r7,r3
 40121ac:	a809883a 	mov	r4,r21
 40121b0:	401a0840 	call	401a084 <__gedf2>
 40121b4:	db001617 	ldw	r12,88(sp)
 40121b8:	00840e16 	blt	zero,r2,40131f4 <_dtoa_r+0x15e8>
 40121bc:	00800044 	movi	r2,1
 40121c0:	13006b0e 	bge	r2,r12,4012370 <_dtoa_r+0x764>
 40121c4:	d9000717 	ldw	r4,28(sp)
 40121c8:	dd800f15 	stw	r22,60(sp)
 40121cc:	dcc01015 	stw	r19,64(sp)
 40121d0:	2319883a 	add	r12,r4,r12
 40121d4:	dcc01217 	ldw	r19,72(sp)
 40121d8:	602d883a 	mov	r22,r12
 40121dc:	dc801215 	stw	r18,72(sp)
 40121e0:	b825883a 	mov	r18,r23
 40121e4:	00000906 	br	401220c <_dtoa_r+0x600>
 40121e8:	401aac00 	call	401aac0 <__subdf3>
 40121ec:	a80d883a 	mov	r6,r21
 40121f0:	980f883a 	mov	r7,r19
 40121f4:	1009883a 	mov	r4,r2
 40121f8:	180b883a 	mov	r5,r3
 40121fc:	401a1600 	call	401a160 <__ledf2>
 4012200:	1003e816 	blt	r2,zero,40131a4 <_dtoa_r+0x1598>
 4012204:	b825883a 	mov	r18,r23
 4012208:	bd83e926 	beq	r23,r22,40131b0 <_dtoa_r+0x15a4>
 401220c:	a809883a 	mov	r4,r21
 4012210:	980b883a 	mov	r5,r19
 4012214:	000d883a 	mov	r6,zero
 4012218:	01d00934 	movhi	r7,16420
 401221c:	401a2540 	call	401a254 <__muldf3>
 4012220:	000d883a 	mov	r6,zero
 4012224:	01d00934 	movhi	r7,16420
 4012228:	8009883a 	mov	r4,r16
 401222c:	880b883a 	mov	r5,r17
 4012230:	102b883a 	mov	r21,r2
 4012234:	1827883a 	mov	r19,r3
 4012238:	401a2540 	call	401a254 <__muldf3>
 401223c:	180b883a 	mov	r5,r3
 4012240:	1009883a 	mov	r4,r2
 4012244:	1821883a 	mov	r16,r3
 4012248:	1023883a 	mov	r17,r2
 401224c:	401b3bc0 	call	401b3bc <__fixdfsi>
 4012250:	1009883a 	mov	r4,r2
 4012254:	1029883a 	mov	r20,r2
 4012258:	401b43c0 	call	401b43c <__floatsidf>
 401225c:	8809883a 	mov	r4,r17
 4012260:	800b883a 	mov	r5,r16
 4012264:	100d883a 	mov	r6,r2
 4012268:	180f883a 	mov	r7,r3
 401226c:	401aac00 	call	401aac0 <__subdf3>
 4012270:	a5000c04 	addi	r20,r20,48
 4012274:	a80d883a 	mov	r6,r21
 4012278:	980f883a 	mov	r7,r19
 401227c:	1009883a 	mov	r4,r2
 4012280:	180b883a 	mov	r5,r3
 4012284:	95000005 	stb	r20,0(r18)
 4012288:	1021883a 	mov	r16,r2
 401228c:	1823883a 	mov	r17,r3
 4012290:	401a1600 	call	401a160 <__ledf2>
 4012294:	bdc00044 	addi	r23,r23,1
 4012298:	800d883a 	mov	r6,r16
 401229c:	880f883a 	mov	r7,r17
 40122a0:	0009883a 	mov	r4,zero
 40122a4:	014ffc34 	movhi	r5,16368
 40122a8:	103fcf0e 	bge	r2,zero,40121e8 <__alt_mem_onchip_memory2_0+0xfc010f68>
 40122ac:	d8c01317 	ldw	r3,76(sp)
 40122b0:	d8c00515 	stw	r3,20(sp)
 40122b4:	d9400917 	ldw	r5,36(sp)
 40122b8:	e009883a 	mov	r4,fp
 40122bc:	40148f00 	call	40148f0 <_Bfree>
 40122c0:	d9000517 	ldw	r4,20(sp)
 40122c4:	d9802317 	ldw	r6,140(sp)
 40122c8:	d9c02517 	ldw	r7,148(sp)
 40122cc:	b8000005 	stb	zero,0(r23)
 40122d0:	20800044 	addi	r2,r4,1
 40122d4:	30800015 	stw	r2,0(r6)
 40122d8:	3802aa26 	beq	r7,zero,4012d84 <_dtoa_r+0x1178>
 40122dc:	3dc00015 	stw	r23,0(r7)
 40122e0:	d8800717 	ldw	r2,28(sp)
 40122e4:	003e7906 	br	4011ccc <__alt_mem_onchip_memory2_0+0xfc010a4c>
 40122e8:	00800434 	movhi	r2,16
 40122ec:	10bfffc4 	addi	r2,r2,-1
 40122f0:	88a2703a 	and	r17,r17,r2
 40122f4:	883e851e 	bne	r17,zero,4011d0c <__alt_mem_onchip_memory2_0+0xfc010a8c>
 40122f8:	008100b4 	movhi	r2,1026
 40122fc:	109c8a04 	addi	r2,r2,29224
 4012300:	003e8406 	br	4011d14 <__alt_mem_onchip_memory2_0+0xfc010a94>
 4012304:	10c00204 	addi	r3,r2,8
 4012308:	003e8706 	br	4011d28 <__alt_mem_onchip_memory2_0+0xfc010aa8>
 401230c:	01400434 	movhi	r5,16
 4012310:	297fffc4 	addi	r5,r5,-1
 4012314:	994a703a 	and	r5,r19,r5
 4012318:	9009883a 	mov	r4,r18
 401231c:	843f0044 	addi	r16,r16,-1023
 4012320:	294ffc34 	orhi	r5,r5,16368
 4012324:	dd800217 	ldw	r22,8(sp)
 4012328:	d8001115 	stw	zero,68(sp)
 401232c:	003ea506 	br	4011dc4 <__alt_mem_onchip_memory2_0+0xfc010b44>
 4012330:	008100b4 	movhi	r2,1026
 4012334:	109c8104 	addi	r2,r2,29188
 4012338:	003e6406 	br	4011ccc <__alt_mem_onchip_memory2_0+0xfc010a4c>
 401233c:	e0001115 	stw	zero,68(fp)
 4012340:	000b883a 	mov	r5,zero
 4012344:	e009883a 	mov	r4,fp
 4012348:	40148480 	call	4014848 <_Balloc>
 401234c:	01bfffc4 	movi	r6,-1
 4012350:	01c00044 	movi	r7,1
 4012354:	d8800715 	stw	r2,28(sp)
 4012358:	d9800c15 	stw	r6,48(sp)
 401235c:	e0801015 	stw	r2,64(fp)
 4012360:	d8000315 	stw	zero,12(sp)
 4012364:	d9c00b15 	stw	r7,44(sp)
 4012368:	d9800615 	stw	r6,24(sp)
 401236c:	d8002215 	stw	zero,136(sp)
 4012370:	d8800117 	ldw	r2,4(sp)
 4012374:	10008916 	blt	r2,zero,401259c <_dtoa_r+0x990>
 4012378:	d9000517 	ldw	r4,20(sp)
 401237c:	00c00384 	movi	r3,14
 4012380:	19008616 	blt	r3,r4,401259c <_dtoa_r+0x990>
 4012384:	200490fa 	slli	r2,r4,3
 4012388:	00c100b4 	movhi	r3,1026
 401238c:	d9802217 	ldw	r6,136(sp)
 4012390:	18dca804 	addi	r3,r3,29344
 4012394:	1885883a 	add	r2,r3,r2
 4012398:	14000017 	ldw	r16,0(r2)
 401239c:	14400117 	ldw	r17,4(r2)
 40123a0:	30016316 	blt	r6,zero,4012930 <_dtoa_r+0xd24>
 40123a4:	800d883a 	mov	r6,r16
 40123a8:	880f883a 	mov	r7,r17
 40123ac:	9009883a 	mov	r4,r18
 40123b0:	980b883a 	mov	r5,r19
 40123b4:	401962c0 	call	401962c <__divdf3>
 40123b8:	180b883a 	mov	r5,r3
 40123bc:	1009883a 	mov	r4,r2
 40123c0:	401b3bc0 	call	401b3bc <__fixdfsi>
 40123c4:	1009883a 	mov	r4,r2
 40123c8:	102b883a 	mov	r21,r2
 40123cc:	401b43c0 	call	401b43c <__floatsidf>
 40123d0:	800d883a 	mov	r6,r16
 40123d4:	880f883a 	mov	r7,r17
 40123d8:	1009883a 	mov	r4,r2
 40123dc:	180b883a 	mov	r5,r3
 40123e0:	401a2540 	call	401a254 <__muldf3>
 40123e4:	100d883a 	mov	r6,r2
 40123e8:	180f883a 	mov	r7,r3
 40123ec:	9009883a 	mov	r4,r18
 40123f0:	980b883a 	mov	r5,r19
 40123f4:	401aac00 	call	401aac0 <__subdf3>
 40123f8:	d9c00717 	ldw	r7,28(sp)
 40123fc:	1009883a 	mov	r4,r2
 4012400:	a8800c04 	addi	r2,r21,48
 4012404:	38800005 	stb	r2,0(r7)
 4012408:	3dc00044 	addi	r23,r7,1
 401240c:	d9c00617 	ldw	r7,24(sp)
 4012410:	01800044 	movi	r6,1
 4012414:	180b883a 	mov	r5,r3
 4012418:	2005883a 	mov	r2,r4
 401241c:	39803826 	beq	r7,r6,4012500 <_dtoa_r+0x8f4>
 4012420:	000d883a 	mov	r6,zero
 4012424:	01d00934 	movhi	r7,16420
 4012428:	401a2540 	call	401a254 <__muldf3>
 401242c:	000d883a 	mov	r6,zero
 4012430:	000f883a 	mov	r7,zero
 4012434:	1009883a 	mov	r4,r2
 4012438:	180b883a 	mov	r5,r3
 401243c:	1025883a 	mov	r18,r2
 4012440:	1827883a 	mov	r19,r3
 4012444:	4019ffc0 	call	4019ffc <__eqdf2>
 4012448:	103f9a26 	beq	r2,zero,40122b4 <__alt_mem_onchip_memory2_0+0xfc011034>
 401244c:	d9c00617 	ldw	r7,24(sp)
 4012450:	d8c00717 	ldw	r3,28(sp)
 4012454:	b829883a 	mov	r20,r23
 4012458:	38bfffc4 	addi	r2,r7,-1
 401245c:	18ad883a 	add	r22,r3,r2
 4012460:	00000a06 	br	401248c <_dtoa_r+0x880>
 4012464:	401a2540 	call	401a254 <__muldf3>
 4012468:	000d883a 	mov	r6,zero
 401246c:	000f883a 	mov	r7,zero
 4012470:	1009883a 	mov	r4,r2
 4012474:	180b883a 	mov	r5,r3
 4012478:	1025883a 	mov	r18,r2
 401247c:	1827883a 	mov	r19,r3
 4012480:	b829883a 	mov	r20,r23
 4012484:	4019ffc0 	call	4019ffc <__eqdf2>
 4012488:	103f8a26 	beq	r2,zero,40122b4 <__alt_mem_onchip_memory2_0+0xfc011034>
 401248c:	800d883a 	mov	r6,r16
 4012490:	880f883a 	mov	r7,r17
 4012494:	9009883a 	mov	r4,r18
 4012498:	980b883a 	mov	r5,r19
 401249c:	401962c0 	call	401962c <__divdf3>
 40124a0:	180b883a 	mov	r5,r3
 40124a4:	1009883a 	mov	r4,r2
 40124a8:	401b3bc0 	call	401b3bc <__fixdfsi>
 40124ac:	1009883a 	mov	r4,r2
 40124b0:	102b883a 	mov	r21,r2
 40124b4:	401b43c0 	call	401b43c <__floatsidf>
 40124b8:	800d883a 	mov	r6,r16
 40124bc:	880f883a 	mov	r7,r17
 40124c0:	1009883a 	mov	r4,r2
 40124c4:	180b883a 	mov	r5,r3
 40124c8:	401a2540 	call	401a254 <__muldf3>
 40124cc:	100d883a 	mov	r6,r2
 40124d0:	180f883a 	mov	r7,r3
 40124d4:	9009883a 	mov	r4,r18
 40124d8:	980b883a 	mov	r5,r19
 40124dc:	401aac00 	call	401aac0 <__subdf3>
 40124e0:	aa000c04 	addi	r8,r21,48
 40124e4:	a2000005 	stb	r8,0(r20)
 40124e8:	000d883a 	mov	r6,zero
 40124ec:	01d00934 	movhi	r7,16420
 40124f0:	1009883a 	mov	r4,r2
 40124f4:	180b883a 	mov	r5,r3
 40124f8:	a5c00044 	addi	r23,r20,1
 40124fc:	b53fd91e 	bne	r22,r20,4012464 <__alt_mem_onchip_memory2_0+0xfc0111e4>
 4012500:	100d883a 	mov	r6,r2
 4012504:	180f883a 	mov	r7,r3
 4012508:	1009883a 	mov	r4,r2
 401250c:	180b883a 	mov	r5,r3
 4012510:	4018d800 	call	4018d80 <__adddf3>
 4012514:	100d883a 	mov	r6,r2
 4012518:	180f883a 	mov	r7,r3
 401251c:	8009883a 	mov	r4,r16
 4012520:	880b883a 	mov	r5,r17
 4012524:	1027883a 	mov	r19,r2
 4012528:	1825883a 	mov	r18,r3
 401252c:	401a1600 	call	401a160 <__ledf2>
 4012530:	10000816 	blt	r2,zero,4012554 <_dtoa_r+0x948>
 4012534:	980d883a 	mov	r6,r19
 4012538:	900f883a 	mov	r7,r18
 401253c:	8009883a 	mov	r4,r16
 4012540:	880b883a 	mov	r5,r17
 4012544:	4019ffc0 	call	4019ffc <__eqdf2>
 4012548:	103f5a1e 	bne	r2,zero,40122b4 <__alt_mem_onchip_memory2_0+0xfc011034>
 401254c:	ad40004c 	andi	r21,r21,1
 4012550:	a83f5826 	beq	r21,zero,40122b4 <__alt_mem_onchip_memory2_0+0xfc011034>
 4012554:	bd3fffc3 	ldbu	r20,-1(r23)
 4012558:	b8bfffc4 	addi	r2,r23,-1
 401255c:	1007883a 	mov	r3,r2
 4012560:	01400e44 	movi	r5,57
 4012564:	d9800717 	ldw	r6,28(sp)
 4012568:	00000506 	br	4012580 <_dtoa_r+0x974>
 401256c:	18ffffc4 	addi	r3,r3,-1
 4012570:	11824726 	beq	r2,r6,4012e90 <_dtoa_r+0x1284>
 4012574:	1d000003 	ldbu	r20,0(r3)
 4012578:	102f883a 	mov	r23,r2
 401257c:	10bfffc4 	addi	r2,r2,-1
 4012580:	a1003fcc 	andi	r4,r20,255
 4012584:	2100201c 	xori	r4,r4,128
 4012588:	213fe004 	addi	r4,r4,-128
 401258c:	217ff726 	beq	r4,r5,401256c <__alt_mem_onchip_memory2_0+0xfc0112ec>
 4012590:	a2000044 	addi	r8,r20,1
 4012594:	12000005 	stb	r8,0(r2)
 4012598:	003f4606 	br	40122b4 <__alt_mem_onchip_memory2_0+0xfc011034>
 401259c:	d9000b17 	ldw	r4,44(sp)
 40125a0:	2000c826 	beq	r4,zero,40128c4 <_dtoa_r+0xcb8>
 40125a4:	d9800317 	ldw	r6,12(sp)
 40125a8:	00c00044 	movi	r3,1
 40125ac:	1980f90e 	bge	r3,r6,4012994 <_dtoa_r+0xd88>
 40125b0:	d8800617 	ldw	r2,24(sp)
 40125b4:	d8c00a17 	ldw	r3,40(sp)
 40125b8:	157fffc4 	addi	r21,r2,-1
 40125bc:	1d41f316 	blt	r3,r21,4012d8c <_dtoa_r+0x1180>
 40125c0:	1d6bc83a 	sub	r21,r3,r21
 40125c4:	d9c00617 	ldw	r7,24(sp)
 40125c8:	3802aa16 	blt	r7,zero,4013074 <_dtoa_r+0x1468>
 40125cc:	dd000817 	ldw	r20,32(sp)
 40125d0:	d8800617 	ldw	r2,24(sp)
 40125d4:	d8c00817 	ldw	r3,32(sp)
 40125d8:	01400044 	movi	r5,1
 40125dc:	e009883a 	mov	r4,fp
 40125e0:	1887883a 	add	r3,r3,r2
 40125e4:	d8c00815 	stw	r3,32(sp)
 40125e8:	b0ad883a 	add	r22,r22,r2
 40125ec:	4014c7c0 	call	4014c7c <__i2b>
 40125f0:	1023883a 	mov	r17,r2
 40125f4:	a0000826 	beq	r20,zero,4012618 <_dtoa_r+0xa0c>
 40125f8:	0580070e 	bge	zero,r22,4012618 <_dtoa_r+0xa0c>
 40125fc:	a005883a 	mov	r2,r20
 4012600:	b500b916 	blt	r22,r20,40128e8 <_dtoa_r+0xcdc>
 4012604:	d9000817 	ldw	r4,32(sp)
 4012608:	a0a9c83a 	sub	r20,r20,r2
 401260c:	b0adc83a 	sub	r22,r22,r2
 4012610:	2089c83a 	sub	r4,r4,r2
 4012614:	d9000815 	stw	r4,32(sp)
 4012618:	d9800a17 	ldw	r6,40(sp)
 401261c:	0181810e 	bge	zero,r6,4012c24 <_dtoa_r+0x1018>
 4012620:	d9c00b17 	ldw	r7,44(sp)
 4012624:	3800b326 	beq	r7,zero,40128f4 <_dtoa_r+0xce8>
 4012628:	a800b226 	beq	r21,zero,40128f4 <_dtoa_r+0xce8>
 401262c:	880b883a 	mov	r5,r17
 4012630:	a80d883a 	mov	r6,r21
 4012634:	e009883a 	mov	r4,fp
 4012638:	4014f440 	call	4014f44 <__pow5mult>
 401263c:	d9800917 	ldw	r6,36(sp)
 4012640:	100b883a 	mov	r5,r2
 4012644:	e009883a 	mov	r4,fp
 4012648:	1023883a 	mov	r17,r2
 401264c:	4014cb80 	call	4014cb8 <__multiply>
 4012650:	1021883a 	mov	r16,r2
 4012654:	d8800a17 	ldw	r2,40(sp)
 4012658:	d9400917 	ldw	r5,36(sp)
 401265c:	e009883a 	mov	r4,fp
 4012660:	1545c83a 	sub	r2,r2,r21
 4012664:	d8800a15 	stw	r2,40(sp)
 4012668:	40148f00 	call	40148f0 <_Bfree>
 401266c:	d8c00a17 	ldw	r3,40(sp)
 4012670:	18009f1e 	bne	r3,zero,40128f0 <_dtoa_r+0xce4>
 4012674:	05c00044 	movi	r23,1
 4012678:	e009883a 	mov	r4,fp
 401267c:	b80b883a 	mov	r5,r23
 4012680:	4014c7c0 	call	4014c7c <__i2b>
 4012684:	d9000d17 	ldw	r4,52(sp)
 4012688:	102b883a 	mov	r21,r2
 401268c:	2000ce26 	beq	r4,zero,40129c8 <_dtoa_r+0xdbc>
 4012690:	200d883a 	mov	r6,r4
 4012694:	100b883a 	mov	r5,r2
 4012698:	e009883a 	mov	r4,fp
 401269c:	4014f440 	call	4014f44 <__pow5mult>
 40126a0:	d9800317 	ldw	r6,12(sp)
 40126a4:	102b883a 	mov	r21,r2
 40126a8:	b981810e 	bge	r23,r6,4012cb0 <_dtoa_r+0x10a4>
 40126ac:	0027883a 	mov	r19,zero
 40126b0:	a8800417 	ldw	r2,16(r21)
 40126b4:	05c00804 	movi	r23,32
 40126b8:	10800104 	addi	r2,r2,4
 40126bc:	1085883a 	add	r2,r2,r2
 40126c0:	1085883a 	add	r2,r2,r2
 40126c4:	a885883a 	add	r2,r21,r2
 40126c8:	11000017 	ldw	r4,0(r2)
 40126cc:	4014b640 	call	4014b64 <__hi0bits>
 40126d0:	b885c83a 	sub	r2,r23,r2
 40126d4:	1585883a 	add	r2,r2,r22
 40126d8:	108007cc 	andi	r2,r2,31
 40126dc:	1000b326 	beq	r2,zero,40129ac <_dtoa_r+0xda0>
 40126e0:	00c00804 	movi	r3,32
 40126e4:	1887c83a 	sub	r3,r3,r2
 40126e8:	01000104 	movi	r4,4
 40126ec:	20c2cd0e 	bge	r4,r3,4013224 <_dtoa_r+0x1618>
 40126f0:	00c00704 	movi	r3,28
 40126f4:	1885c83a 	sub	r2,r3,r2
 40126f8:	d8c00817 	ldw	r3,32(sp)
 40126fc:	a0a9883a 	add	r20,r20,r2
 4012700:	b0ad883a 	add	r22,r22,r2
 4012704:	1887883a 	add	r3,r3,r2
 4012708:	d8c00815 	stw	r3,32(sp)
 401270c:	d9800817 	ldw	r6,32(sp)
 4012710:	0180040e 	bge	zero,r6,4012724 <_dtoa_r+0xb18>
 4012714:	800b883a 	mov	r5,r16
 4012718:	e009883a 	mov	r4,fp
 401271c:	40150840 	call	4015084 <__lshift>
 4012720:	1021883a 	mov	r16,r2
 4012724:	0580050e 	bge	zero,r22,401273c <_dtoa_r+0xb30>
 4012728:	a80b883a 	mov	r5,r21
 401272c:	b00d883a 	mov	r6,r22
 4012730:	e009883a 	mov	r4,fp
 4012734:	40150840 	call	4015084 <__lshift>
 4012738:	102b883a 	mov	r21,r2
 401273c:	d9c00e17 	ldw	r7,56(sp)
 4012740:	3801211e 	bne	r7,zero,4012bc8 <_dtoa_r+0xfbc>
 4012744:	d9800617 	ldw	r6,24(sp)
 4012748:	0181380e 	bge	zero,r6,4012c2c <_dtoa_r+0x1020>
 401274c:	d8c00b17 	ldw	r3,44(sp)
 4012750:	1800ab1e 	bne	r3,zero,4012a00 <_dtoa_r+0xdf4>
 4012754:	dc800717 	ldw	r18,28(sp)
 4012758:	dcc00617 	ldw	r19,24(sp)
 401275c:	9029883a 	mov	r20,r18
 4012760:	00000206 	br	401276c <_dtoa_r+0xb60>
 4012764:	40149180 	call	4014918 <__multadd>
 4012768:	1021883a 	mov	r16,r2
 401276c:	a80b883a 	mov	r5,r21
 4012770:	8009883a 	mov	r4,r16
 4012774:	40119e40 	call	40119e4 <quorem>
 4012778:	10800c04 	addi	r2,r2,48
 401277c:	90800005 	stb	r2,0(r18)
 4012780:	94800044 	addi	r18,r18,1
 4012784:	9507c83a 	sub	r3,r18,r20
 4012788:	000f883a 	mov	r7,zero
 401278c:	01800284 	movi	r6,10
 4012790:	800b883a 	mov	r5,r16
 4012794:	e009883a 	mov	r4,fp
 4012798:	1cfff216 	blt	r3,r19,4012764 <__alt_mem_onchip_memory2_0+0xfc0114e4>
 401279c:	1011883a 	mov	r8,r2
 40127a0:	d8800617 	ldw	r2,24(sp)
 40127a4:	0082370e 	bge	zero,r2,4013084 <_dtoa_r+0x1478>
 40127a8:	d9000717 	ldw	r4,28(sp)
 40127ac:	0025883a 	mov	r18,zero
 40127b0:	20af883a 	add	r23,r4,r2
 40127b4:	01800044 	movi	r6,1
 40127b8:	800b883a 	mov	r5,r16
 40127bc:	e009883a 	mov	r4,fp
 40127c0:	da001715 	stw	r8,92(sp)
 40127c4:	40150840 	call	4015084 <__lshift>
 40127c8:	a80b883a 	mov	r5,r21
 40127cc:	1009883a 	mov	r4,r2
 40127d0:	d8800915 	stw	r2,36(sp)
 40127d4:	40151cc0 	call	40151cc <__mcmp>
 40127d8:	da001717 	ldw	r8,92(sp)
 40127dc:	0081800e 	bge	zero,r2,4012de0 <_dtoa_r+0x11d4>
 40127e0:	b93fffc3 	ldbu	r4,-1(r23)
 40127e4:	b8bfffc4 	addi	r2,r23,-1
 40127e8:	1007883a 	mov	r3,r2
 40127ec:	01800e44 	movi	r6,57
 40127f0:	d9c00717 	ldw	r7,28(sp)
 40127f4:	00000506 	br	401280c <_dtoa_r+0xc00>
 40127f8:	18ffffc4 	addi	r3,r3,-1
 40127fc:	11c12326 	beq	r2,r7,4012c8c <_dtoa_r+0x1080>
 4012800:	19000003 	ldbu	r4,0(r3)
 4012804:	102f883a 	mov	r23,r2
 4012808:	10bfffc4 	addi	r2,r2,-1
 401280c:	21403fcc 	andi	r5,r4,255
 4012810:	2940201c 	xori	r5,r5,128
 4012814:	297fe004 	addi	r5,r5,-128
 4012818:	29bff726 	beq	r5,r6,40127f8 <__alt_mem_onchip_memory2_0+0xfc011578>
 401281c:	21000044 	addi	r4,r4,1
 4012820:	11000005 	stb	r4,0(r2)
 4012824:	a80b883a 	mov	r5,r21
 4012828:	e009883a 	mov	r4,fp
 401282c:	40148f00 	call	40148f0 <_Bfree>
 4012830:	883ea026 	beq	r17,zero,40122b4 <__alt_mem_onchip_memory2_0+0xfc011034>
 4012834:	90000426 	beq	r18,zero,4012848 <_dtoa_r+0xc3c>
 4012838:	94400326 	beq	r18,r17,4012848 <_dtoa_r+0xc3c>
 401283c:	900b883a 	mov	r5,r18
 4012840:	e009883a 	mov	r4,fp
 4012844:	40148f00 	call	40148f0 <_Bfree>
 4012848:	880b883a 	mov	r5,r17
 401284c:	e009883a 	mov	r4,fp
 4012850:	40148f00 	call	40148f0 <_Bfree>
 4012854:	003e9706 	br	40122b4 <__alt_mem_onchip_memory2_0+0xfc011034>
 4012858:	01800044 	movi	r6,1
 401285c:	d9800e15 	stw	r6,56(sp)
 4012860:	003d9606 	br	4011ebc <__alt_mem_onchip_memory2_0+0xfc010c3c>
 4012864:	d8800817 	ldw	r2,32(sp)
 4012868:	d8c00517 	ldw	r3,20(sp)
 401286c:	d8000d15 	stw	zero,52(sp)
 4012870:	10c5c83a 	sub	r2,r2,r3
 4012874:	00c9c83a 	sub	r4,zero,r3
 4012878:	d8800815 	stw	r2,32(sp)
 401287c:	d9000a15 	stw	r4,40(sp)
 4012880:	003d9706 	br	4011ee0 <__alt_mem_onchip_memory2_0+0xfc010c60>
 4012884:	05adc83a 	sub	r22,zero,r22
 4012888:	dd800815 	stw	r22,32(sp)
 401288c:	002d883a 	mov	r22,zero
 4012890:	003d8e06 	br	4011ecc <__alt_mem_onchip_memory2_0+0xfc010c4c>
 4012894:	d9000517 	ldw	r4,20(sp)
 4012898:	401b43c0 	call	401b43c <__floatsidf>
 401289c:	100d883a 	mov	r6,r2
 40128a0:	180f883a 	mov	r7,r3
 40128a4:	a009883a 	mov	r4,r20
 40128a8:	880b883a 	mov	r5,r17
 40128ac:	4019ffc0 	call	4019ffc <__eqdf2>
 40128b0:	103d7126 	beq	r2,zero,4011e78 <__alt_mem_onchip_memory2_0+0xfc010bf8>
 40128b4:	d9c00517 	ldw	r7,20(sp)
 40128b8:	39ffffc4 	addi	r7,r7,-1
 40128bc:	d9c00515 	stw	r7,20(sp)
 40128c0:	003d6d06 	br	4011e78 <__alt_mem_onchip_memory2_0+0xfc010bf8>
 40128c4:	dd400a17 	ldw	r21,40(sp)
 40128c8:	dd000817 	ldw	r20,32(sp)
 40128cc:	0023883a 	mov	r17,zero
 40128d0:	003f4806 	br	40125f4 <__alt_mem_onchip_memory2_0+0xfc011374>
 40128d4:	10e3c83a 	sub	r17,r2,r3
 40128d8:	9448983a 	sll	r4,r18,r17
 40128dc:	003d3206 	br	4011da8 <__alt_mem_onchip_memory2_0+0xfc010b28>
 40128e0:	d8000e15 	stw	zero,56(sp)
 40128e4:	003d7506 	br	4011ebc <__alt_mem_onchip_memory2_0+0xfc010c3c>
 40128e8:	b005883a 	mov	r2,r22
 40128ec:	003f4506 	br	4012604 <__alt_mem_onchip_memory2_0+0xfc011384>
 40128f0:	dc000915 	stw	r16,36(sp)
 40128f4:	d9800a17 	ldw	r6,40(sp)
 40128f8:	d9400917 	ldw	r5,36(sp)
 40128fc:	e009883a 	mov	r4,fp
 4012900:	4014f440 	call	4014f44 <__pow5mult>
 4012904:	1021883a 	mov	r16,r2
 4012908:	003f5a06 	br	4012674 <__alt_mem_onchip_memory2_0+0xfc0113f4>
 401290c:	01c00044 	movi	r7,1
 4012910:	d9c00b15 	stw	r7,44(sp)
 4012914:	d8802217 	ldw	r2,136(sp)
 4012918:	0081280e 	bge	zero,r2,4012dbc <_dtoa_r+0x11b0>
 401291c:	100d883a 	mov	r6,r2
 4012920:	1021883a 	mov	r16,r2
 4012924:	d8800c15 	stw	r2,48(sp)
 4012928:	d8800615 	stw	r2,24(sp)
 401292c:	003d8806 	br	4011f50 <__alt_mem_onchip_memory2_0+0xfc010cd0>
 4012930:	d8800617 	ldw	r2,24(sp)
 4012934:	00be9b16 	blt	zero,r2,40123a4 <__alt_mem_onchip_memory2_0+0xfc011124>
 4012938:	10010f1e 	bne	r2,zero,4012d78 <_dtoa_r+0x116c>
 401293c:	880b883a 	mov	r5,r17
 4012940:	000d883a 	mov	r6,zero
 4012944:	01d00534 	movhi	r7,16404
 4012948:	8009883a 	mov	r4,r16
 401294c:	401a2540 	call	401a254 <__muldf3>
 4012950:	900d883a 	mov	r6,r18
 4012954:	980f883a 	mov	r7,r19
 4012958:	1009883a 	mov	r4,r2
 401295c:	180b883a 	mov	r5,r3
 4012960:	401a0840 	call	401a084 <__gedf2>
 4012964:	002b883a 	mov	r21,zero
 4012968:	0023883a 	mov	r17,zero
 401296c:	1000bf16 	blt	r2,zero,4012c6c <_dtoa_r+0x1060>
 4012970:	d9802217 	ldw	r6,136(sp)
 4012974:	ddc00717 	ldw	r23,28(sp)
 4012978:	018c303a 	nor	r6,zero,r6
 401297c:	d9800515 	stw	r6,20(sp)
 4012980:	a80b883a 	mov	r5,r21
 4012984:	e009883a 	mov	r4,fp
 4012988:	40148f00 	call	40148f0 <_Bfree>
 401298c:	883e4926 	beq	r17,zero,40122b4 <__alt_mem_onchip_memory2_0+0xfc011034>
 4012990:	003fad06 	br	4012848 <__alt_mem_onchip_memory2_0+0xfc0115c8>
 4012994:	d9c01117 	ldw	r7,68(sp)
 4012998:	3801bc26 	beq	r7,zero,401308c <_dtoa_r+0x1480>
 401299c:	10810cc4 	addi	r2,r2,1075
 40129a0:	dd400a17 	ldw	r21,40(sp)
 40129a4:	dd000817 	ldw	r20,32(sp)
 40129a8:	003f0a06 	br	40125d4 <__alt_mem_onchip_memory2_0+0xfc011354>
 40129ac:	00800704 	movi	r2,28
 40129b0:	d9000817 	ldw	r4,32(sp)
 40129b4:	a0a9883a 	add	r20,r20,r2
 40129b8:	b0ad883a 	add	r22,r22,r2
 40129bc:	2089883a 	add	r4,r4,r2
 40129c0:	d9000815 	stw	r4,32(sp)
 40129c4:	003f5106 	br	401270c <__alt_mem_onchip_memory2_0+0xfc01148c>
 40129c8:	d8c00317 	ldw	r3,12(sp)
 40129cc:	b8c1fc0e 	bge	r23,r3,40131c0 <_dtoa_r+0x15b4>
 40129d0:	0027883a 	mov	r19,zero
 40129d4:	b805883a 	mov	r2,r23
 40129d8:	003f3e06 	br	40126d4 <__alt_mem_onchip_memory2_0+0xfc011454>
 40129dc:	880b883a 	mov	r5,r17
 40129e0:	e009883a 	mov	r4,fp
 40129e4:	000f883a 	mov	r7,zero
 40129e8:	01800284 	movi	r6,10
 40129ec:	40149180 	call	4014918 <__multadd>
 40129f0:	d9000c17 	ldw	r4,48(sp)
 40129f4:	1023883a 	mov	r17,r2
 40129f8:	0102040e 	bge	zero,r4,401320c <_dtoa_r+0x1600>
 40129fc:	d9000615 	stw	r4,24(sp)
 4012a00:	0500050e 	bge	zero,r20,4012a18 <_dtoa_r+0xe0c>
 4012a04:	880b883a 	mov	r5,r17
 4012a08:	a00d883a 	mov	r6,r20
 4012a0c:	e009883a 	mov	r4,fp
 4012a10:	40150840 	call	4015084 <__lshift>
 4012a14:	1023883a 	mov	r17,r2
 4012a18:	9801241e 	bne	r19,zero,4012eac <_dtoa_r+0x12a0>
 4012a1c:	8829883a 	mov	r20,r17
 4012a20:	d9000617 	ldw	r4,24(sp)
 4012a24:	dcc00717 	ldw	r19,28(sp)
 4012a28:	9480004c 	andi	r18,r18,1
 4012a2c:	20bfffc4 	addi	r2,r4,-1
 4012a30:	9885883a 	add	r2,r19,r2
 4012a34:	d8800415 	stw	r2,16(sp)
 4012a38:	dc800615 	stw	r18,24(sp)
 4012a3c:	a80b883a 	mov	r5,r21
 4012a40:	8009883a 	mov	r4,r16
 4012a44:	40119e40 	call	40119e4 <quorem>
 4012a48:	880b883a 	mov	r5,r17
 4012a4c:	8009883a 	mov	r4,r16
 4012a50:	102f883a 	mov	r23,r2
 4012a54:	40151cc0 	call	40151cc <__mcmp>
 4012a58:	a80b883a 	mov	r5,r21
 4012a5c:	a00d883a 	mov	r6,r20
 4012a60:	e009883a 	mov	r4,fp
 4012a64:	102d883a 	mov	r22,r2
 4012a68:	401522c0 	call	401522c <__mdiff>
 4012a6c:	1007883a 	mov	r3,r2
 4012a70:	10800317 	ldw	r2,12(r2)
 4012a74:	bc800c04 	addi	r18,r23,48
 4012a78:	180b883a 	mov	r5,r3
 4012a7c:	10004e1e 	bne	r2,zero,4012bb8 <_dtoa_r+0xfac>
 4012a80:	8009883a 	mov	r4,r16
 4012a84:	d8c01615 	stw	r3,88(sp)
 4012a88:	40151cc0 	call	40151cc <__mcmp>
 4012a8c:	d8c01617 	ldw	r3,88(sp)
 4012a90:	e009883a 	mov	r4,fp
 4012a94:	d8801615 	stw	r2,88(sp)
 4012a98:	180b883a 	mov	r5,r3
 4012a9c:	40148f00 	call	40148f0 <_Bfree>
 4012aa0:	d8801617 	ldw	r2,88(sp)
 4012aa4:	1000041e 	bne	r2,zero,4012ab8 <_dtoa_r+0xeac>
 4012aa8:	d9800317 	ldw	r6,12(sp)
 4012aac:	3000021e 	bne	r6,zero,4012ab8 <_dtoa_r+0xeac>
 4012ab0:	d8c00617 	ldw	r3,24(sp)
 4012ab4:	18003726 	beq	r3,zero,4012b94 <_dtoa_r+0xf88>
 4012ab8:	b0002016 	blt	r22,zero,4012b3c <_dtoa_r+0xf30>
 4012abc:	b000041e 	bne	r22,zero,4012ad0 <_dtoa_r+0xec4>
 4012ac0:	d9000317 	ldw	r4,12(sp)
 4012ac4:	2000021e 	bne	r4,zero,4012ad0 <_dtoa_r+0xec4>
 4012ac8:	d8c00617 	ldw	r3,24(sp)
 4012acc:	18001b26 	beq	r3,zero,4012b3c <_dtoa_r+0xf30>
 4012ad0:	00810716 	blt	zero,r2,4012ef0 <_dtoa_r+0x12e4>
 4012ad4:	d8c00417 	ldw	r3,16(sp)
 4012ad8:	9d800044 	addi	r22,r19,1
 4012adc:	9c800005 	stb	r18,0(r19)
 4012ae0:	b02f883a 	mov	r23,r22
 4012ae4:	98c10626 	beq	r19,r3,4012f00 <_dtoa_r+0x12f4>
 4012ae8:	800b883a 	mov	r5,r16
 4012aec:	000f883a 	mov	r7,zero
 4012af0:	01800284 	movi	r6,10
 4012af4:	e009883a 	mov	r4,fp
 4012af8:	40149180 	call	4014918 <__multadd>
 4012afc:	1021883a 	mov	r16,r2
 4012b00:	000f883a 	mov	r7,zero
 4012b04:	01800284 	movi	r6,10
 4012b08:	880b883a 	mov	r5,r17
 4012b0c:	e009883a 	mov	r4,fp
 4012b10:	8d002526 	beq	r17,r20,4012ba8 <_dtoa_r+0xf9c>
 4012b14:	40149180 	call	4014918 <__multadd>
 4012b18:	a00b883a 	mov	r5,r20
 4012b1c:	000f883a 	mov	r7,zero
 4012b20:	01800284 	movi	r6,10
 4012b24:	e009883a 	mov	r4,fp
 4012b28:	1023883a 	mov	r17,r2
 4012b2c:	40149180 	call	4014918 <__multadd>
 4012b30:	1029883a 	mov	r20,r2
 4012b34:	b027883a 	mov	r19,r22
 4012b38:	003fc006 	br	4012a3c <__alt_mem_onchip_memory2_0+0xfc0117bc>
 4012b3c:	9011883a 	mov	r8,r18
 4012b40:	00800e0e 	bge	zero,r2,4012b7c <_dtoa_r+0xf70>
 4012b44:	800b883a 	mov	r5,r16
 4012b48:	01800044 	movi	r6,1
 4012b4c:	e009883a 	mov	r4,fp
 4012b50:	da001715 	stw	r8,92(sp)
 4012b54:	40150840 	call	4015084 <__lshift>
 4012b58:	a80b883a 	mov	r5,r21
 4012b5c:	1009883a 	mov	r4,r2
 4012b60:	1021883a 	mov	r16,r2
 4012b64:	40151cc0 	call	40151cc <__mcmp>
 4012b68:	da001717 	ldw	r8,92(sp)
 4012b6c:	0081960e 	bge	zero,r2,40131c8 <_dtoa_r+0x15bc>
 4012b70:	00800e44 	movi	r2,57
 4012b74:	40817026 	beq	r8,r2,4013138 <_dtoa_r+0x152c>
 4012b78:	ba000c44 	addi	r8,r23,49
 4012b7c:	8825883a 	mov	r18,r17
 4012b80:	9dc00044 	addi	r23,r19,1
 4012b84:	9a000005 	stb	r8,0(r19)
 4012b88:	a023883a 	mov	r17,r20
 4012b8c:	dc000915 	stw	r16,36(sp)
 4012b90:	003f2406 	br	4012824 <__alt_mem_onchip_memory2_0+0xfc0115a4>
 4012b94:	00800e44 	movi	r2,57
 4012b98:	9011883a 	mov	r8,r18
 4012b9c:	90816626 	beq	r18,r2,4013138 <_dtoa_r+0x152c>
 4012ba0:	05bff516 	blt	zero,r22,4012b78 <__alt_mem_onchip_memory2_0+0xfc0118f8>
 4012ba4:	003ff506 	br	4012b7c <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4012ba8:	40149180 	call	4014918 <__multadd>
 4012bac:	1023883a 	mov	r17,r2
 4012bb0:	1029883a 	mov	r20,r2
 4012bb4:	003fdf06 	br	4012b34 <__alt_mem_onchip_memory2_0+0xfc0118b4>
 4012bb8:	e009883a 	mov	r4,fp
 4012bbc:	40148f00 	call	40148f0 <_Bfree>
 4012bc0:	00800044 	movi	r2,1
 4012bc4:	003fbc06 	br	4012ab8 <__alt_mem_onchip_memory2_0+0xfc011838>
 4012bc8:	a80b883a 	mov	r5,r21
 4012bcc:	8009883a 	mov	r4,r16
 4012bd0:	40151cc0 	call	40151cc <__mcmp>
 4012bd4:	103edb0e 	bge	r2,zero,4012744 <__alt_mem_onchip_memory2_0+0xfc0114c4>
 4012bd8:	800b883a 	mov	r5,r16
 4012bdc:	000f883a 	mov	r7,zero
 4012be0:	01800284 	movi	r6,10
 4012be4:	e009883a 	mov	r4,fp
 4012be8:	40149180 	call	4014918 <__multadd>
 4012bec:	1021883a 	mov	r16,r2
 4012bf0:	d8800517 	ldw	r2,20(sp)
 4012bf4:	d8c00b17 	ldw	r3,44(sp)
 4012bf8:	10bfffc4 	addi	r2,r2,-1
 4012bfc:	d8800515 	stw	r2,20(sp)
 4012c00:	183f761e 	bne	r3,zero,40129dc <__alt_mem_onchip_memory2_0+0xfc01175c>
 4012c04:	d9000c17 	ldw	r4,48(sp)
 4012c08:	0101730e 	bge	zero,r4,40131d8 <_dtoa_r+0x15cc>
 4012c0c:	d9000615 	stw	r4,24(sp)
 4012c10:	003ed006 	br	4012754 <__alt_mem_onchip_memory2_0+0xfc0114d4>
 4012c14:	00800084 	movi	r2,2
 4012c18:	3081861e 	bne	r6,r2,4013234 <_dtoa_r+0x1628>
 4012c1c:	d8000b15 	stw	zero,44(sp)
 4012c20:	003f3c06 	br	4012914 <__alt_mem_onchip_memory2_0+0xfc011694>
 4012c24:	dc000917 	ldw	r16,36(sp)
 4012c28:	003e9206 	br	4012674 <__alt_mem_onchip_memory2_0+0xfc0113f4>
 4012c2c:	d9c00317 	ldw	r7,12(sp)
 4012c30:	00800084 	movi	r2,2
 4012c34:	11fec50e 	bge	r2,r7,401274c <__alt_mem_onchip_memory2_0+0xfc0114cc>
 4012c38:	d9000617 	ldw	r4,24(sp)
 4012c3c:	20013c1e 	bne	r4,zero,4013130 <_dtoa_r+0x1524>
 4012c40:	a80b883a 	mov	r5,r21
 4012c44:	000f883a 	mov	r7,zero
 4012c48:	01800144 	movi	r6,5
 4012c4c:	e009883a 	mov	r4,fp
 4012c50:	40149180 	call	4014918 <__multadd>
 4012c54:	100b883a 	mov	r5,r2
 4012c58:	8009883a 	mov	r4,r16
 4012c5c:	102b883a 	mov	r21,r2
 4012c60:	40151cc0 	call	40151cc <__mcmp>
 4012c64:	dc000915 	stw	r16,36(sp)
 4012c68:	00bf410e 	bge	zero,r2,4012970 <__alt_mem_onchip_memory2_0+0xfc0116f0>
 4012c6c:	d9c00717 	ldw	r7,28(sp)
 4012c70:	00800c44 	movi	r2,49
 4012c74:	38800005 	stb	r2,0(r7)
 4012c78:	d8800517 	ldw	r2,20(sp)
 4012c7c:	3dc00044 	addi	r23,r7,1
 4012c80:	10800044 	addi	r2,r2,1
 4012c84:	d8800515 	stw	r2,20(sp)
 4012c88:	003f3d06 	br	4012980 <__alt_mem_onchip_memory2_0+0xfc011700>
 4012c8c:	d9800517 	ldw	r6,20(sp)
 4012c90:	d9c00717 	ldw	r7,28(sp)
 4012c94:	00800c44 	movi	r2,49
 4012c98:	31800044 	addi	r6,r6,1
 4012c9c:	d9800515 	stw	r6,20(sp)
 4012ca0:	38800005 	stb	r2,0(r7)
 4012ca4:	003edf06 	br	4012824 <__alt_mem_onchip_memory2_0+0xfc0115a4>
 4012ca8:	d8000b15 	stw	zero,44(sp)
 4012cac:	003c9f06 	br	4011f2c <__alt_mem_onchip_memory2_0+0xfc010cac>
 4012cb0:	903e7e1e 	bne	r18,zero,40126ac <__alt_mem_onchip_memory2_0+0xfc01142c>
 4012cb4:	00800434 	movhi	r2,16
 4012cb8:	10bfffc4 	addi	r2,r2,-1
 4012cbc:	9884703a 	and	r2,r19,r2
 4012cc0:	1000ea1e 	bne	r2,zero,401306c <_dtoa_r+0x1460>
 4012cc4:	9cdffc2c 	andhi	r19,r19,32752
 4012cc8:	9800e826 	beq	r19,zero,401306c <_dtoa_r+0x1460>
 4012ccc:	d9c00817 	ldw	r7,32(sp)
 4012cd0:	b5800044 	addi	r22,r22,1
 4012cd4:	04c00044 	movi	r19,1
 4012cd8:	39c00044 	addi	r7,r7,1
 4012cdc:	d9c00815 	stw	r7,32(sp)
 4012ce0:	d8800d17 	ldw	r2,52(sp)
 4012ce4:	103e721e 	bne	r2,zero,40126b0 <__alt_mem_onchip_memory2_0+0xfc011430>
 4012ce8:	00800044 	movi	r2,1
 4012cec:	003e7906 	br	40126d4 <__alt_mem_onchip_memory2_0+0xfc011454>
 4012cf0:	8009883a 	mov	r4,r16
 4012cf4:	401b43c0 	call	401b43c <__floatsidf>
 4012cf8:	d9800f17 	ldw	r6,60(sp)
 4012cfc:	d9c01017 	ldw	r7,64(sp)
 4012d00:	1009883a 	mov	r4,r2
 4012d04:	180b883a 	mov	r5,r3
 4012d08:	401a2540 	call	401a254 <__muldf3>
 4012d0c:	000d883a 	mov	r6,zero
 4012d10:	01d00734 	movhi	r7,16412
 4012d14:	1009883a 	mov	r4,r2
 4012d18:	180b883a 	mov	r5,r3
 4012d1c:	4018d800 	call	4018d80 <__adddf3>
 4012d20:	047f3034 	movhi	r17,64704
 4012d24:	1021883a 	mov	r16,r2
 4012d28:	1c63883a 	add	r17,r3,r17
 4012d2c:	d9000f17 	ldw	r4,60(sp)
 4012d30:	d9401017 	ldw	r5,64(sp)
 4012d34:	000d883a 	mov	r6,zero
 4012d38:	01d00534 	movhi	r7,16404
 4012d3c:	401aac00 	call	401aac0 <__subdf3>
 4012d40:	800d883a 	mov	r6,r16
 4012d44:	880f883a 	mov	r7,r17
 4012d48:	1009883a 	mov	r4,r2
 4012d4c:	180b883a 	mov	r5,r3
 4012d50:	102b883a 	mov	r21,r2
 4012d54:	1829883a 	mov	r20,r3
 4012d58:	401a0840 	call	401a084 <__gedf2>
 4012d5c:	00806c16 	blt	zero,r2,4012f10 <_dtoa_r+0x1304>
 4012d60:	89e0003c 	xorhi	r7,r17,32768
 4012d64:	800d883a 	mov	r6,r16
 4012d68:	a809883a 	mov	r4,r21
 4012d6c:	a00b883a 	mov	r5,r20
 4012d70:	401a1600 	call	401a160 <__ledf2>
 4012d74:	103d7e0e 	bge	r2,zero,4012370 <__alt_mem_onchip_memory2_0+0xfc0110f0>
 4012d78:	002b883a 	mov	r21,zero
 4012d7c:	0023883a 	mov	r17,zero
 4012d80:	003efb06 	br	4012970 <__alt_mem_onchip_memory2_0+0xfc0116f0>
 4012d84:	d8800717 	ldw	r2,28(sp)
 4012d88:	003bd006 	br	4011ccc <__alt_mem_onchip_memory2_0+0xfc010a4c>
 4012d8c:	d9000a17 	ldw	r4,40(sp)
 4012d90:	d9800d17 	ldw	r6,52(sp)
 4012d94:	dd400a15 	stw	r21,40(sp)
 4012d98:	a905c83a 	sub	r2,r21,r4
 4012d9c:	308d883a 	add	r6,r6,r2
 4012da0:	d9800d15 	stw	r6,52(sp)
 4012da4:	002b883a 	mov	r21,zero
 4012da8:	003e0606 	br	40125c4 <__alt_mem_onchip_memory2_0+0xfc011344>
 4012dac:	9023883a 	mov	r17,r18
 4012db0:	9829883a 	mov	r20,r19
 4012db4:	04000084 	movi	r16,2
 4012db8:	003c9206 	br	4012004 <__alt_mem_onchip_memory2_0+0xfc010d84>
 4012dbc:	04000044 	movi	r16,1
 4012dc0:	dc000c15 	stw	r16,48(sp)
 4012dc4:	dc000615 	stw	r16,24(sp)
 4012dc8:	dc002215 	stw	r16,136(sp)
 4012dcc:	e0001115 	stw	zero,68(fp)
 4012dd0:	000b883a 	mov	r5,zero
 4012dd4:	003c6906 	br	4011f7c <__alt_mem_onchip_memory2_0+0xfc010cfc>
 4012dd8:	3021883a 	mov	r16,r6
 4012ddc:	003ffb06 	br	4012dcc <__alt_mem_onchip_memory2_0+0xfc011b4c>
 4012de0:	1000021e 	bne	r2,zero,4012dec <_dtoa_r+0x11e0>
 4012de4:	4200004c 	andi	r8,r8,1
 4012de8:	403e7d1e 	bne	r8,zero,40127e0 <__alt_mem_onchip_memory2_0+0xfc011560>
 4012dec:	01000c04 	movi	r4,48
 4012df0:	00000106 	br	4012df8 <_dtoa_r+0x11ec>
 4012df4:	102f883a 	mov	r23,r2
 4012df8:	b8bfffc4 	addi	r2,r23,-1
 4012dfc:	10c00007 	ldb	r3,0(r2)
 4012e00:	193ffc26 	beq	r3,r4,4012df4 <__alt_mem_onchip_memory2_0+0xfc011b74>
 4012e04:	003e8706 	br	4012824 <__alt_mem_onchip_memory2_0+0xfc0115a4>
 4012e08:	d8800517 	ldw	r2,20(sp)
 4012e0c:	00a3c83a 	sub	r17,zero,r2
 4012e10:	8800a426 	beq	r17,zero,40130a4 <_dtoa_r+0x1498>
 4012e14:	888003cc 	andi	r2,r17,15
 4012e18:	100490fa 	slli	r2,r2,3
 4012e1c:	00c100b4 	movhi	r3,1026
 4012e20:	18dca804 	addi	r3,r3,29344
 4012e24:	1885883a 	add	r2,r3,r2
 4012e28:	11800017 	ldw	r6,0(r2)
 4012e2c:	11c00117 	ldw	r7,4(r2)
 4012e30:	9009883a 	mov	r4,r18
 4012e34:	980b883a 	mov	r5,r19
 4012e38:	8823d13a 	srai	r17,r17,4
 4012e3c:	401a2540 	call	401a254 <__muldf3>
 4012e40:	d8800f15 	stw	r2,60(sp)
 4012e44:	d8c01015 	stw	r3,64(sp)
 4012e48:	8800e826 	beq	r17,zero,40131ec <_dtoa_r+0x15e0>
 4012e4c:	050100b4 	movhi	r20,1026
 4012e50:	a51c9e04 	addi	r20,r20,29304
 4012e54:	04000084 	movi	r16,2
 4012e58:	8980004c 	andi	r6,r17,1
 4012e5c:	1009883a 	mov	r4,r2
 4012e60:	8823d07a 	srai	r17,r17,1
 4012e64:	180b883a 	mov	r5,r3
 4012e68:	30000426 	beq	r6,zero,4012e7c <_dtoa_r+0x1270>
 4012e6c:	a1800017 	ldw	r6,0(r20)
 4012e70:	a1c00117 	ldw	r7,4(r20)
 4012e74:	84000044 	addi	r16,r16,1
 4012e78:	401a2540 	call	401a254 <__muldf3>
 4012e7c:	a5000204 	addi	r20,r20,8
 4012e80:	883ff51e 	bne	r17,zero,4012e58 <__alt_mem_onchip_memory2_0+0xfc011bd8>
 4012e84:	d8800f15 	stw	r2,60(sp)
 4012e88:	d8c01015 	stw	r3,64(sp)
 4012e8c:	003c7606 	br	4012068 <__alt_mem_onchip_memory2_0+0xfc010de8>
 4012e90:	00c00c04 	movi	r3,48
 4012e94:	10c00005 	stb	r3,0(r2)
 4012e98:	d8c00517 	ldw	r3,20(sp)
 4012e9c:	bd3fffc3 	ldbu	r20,-1(r23)
 4012ea0:	18c00044 	addi	r3,r3,1
 4012ea4:	d8c00515 	stw	r3,20(sp)
 4012ea8:	003db906 	br	4012590 <__alt_mem_onchip_memory2_0+0xfc011310>
 4012eac:	89400117 	ldw	r5,4(r17)
 4012eb0:	e009883a 	mov	r4,fp
 4012eb4:	40148480 	call	4014848 <_Balloc>
 4012eb8:	89800417 	ldw	r6,16(r17)
 4012ebc:	89400304 	addi	r5,r17,12
 4012ec0:	11000304 	addi	r4,r2,12
 4012ec4:	31800084 	addi	r6,r6,2
 4012ec8:	318d883a 	add	r6,r6,r6
 4012ecc:	318d883a 	add	r6,r6,r6
 4012ed0:	1027883a 	mov	r19,r2
 4012ed4:	400ec380 	call	400ec38 <memcpy>
 4012ed8:	01800044 	movi	r6,1
 4012edc:	980b883a 	mov	r5,r19
 4012ee0:	e009883a 	mov	r4,fp
 4012ee4:	40150840 	call	4015084 <__lshift>
 4012ee8:	1029883a 	mov	r20,r2
 4012eec:	003ecc06 	br	4012a20 <__alt_mem_onchip_memory2_0+0xfc0117a0>
 4012ef0:	00800e44 	movi	r2,57
 4012ef4:	90809026 	beq	r18,r2,4013138 <_dtoa_r+0x152c>
 4012ef8:	92000044 	addi	r8,r18,1
 4012efc:	003f1f06 	br	4012b7c <__alt_mem_onchip_memory2_0+0xfc0118fc>
 4012f00:	9011883a 	mov	r8,r18
 4012f04:	8825883a 	mov	r18,r17
 4012f08:	a023883a 	mov	r17,r20
 4012f0c:	003e2906 	br	40127b4 <__alt_mem_onchip_memory2_0+0xfc011534>
 4012f10:	002b883a 	mov	r21,zero
 4012f14:	0023883a 	mov	r17,zero
 4012f18:	003f5406 	br	4012c6c <__alt_mem_onchip_memory2_0+0xfc0119ec>
 4012f1c:	61bfffc4 	addi	r6,r12,-1
 4012f20:	300490fa 	slli	r2,r6,3
 4012f24:	00c100b4 	movhi	r3,1026
 4012f28:	18dca804 	addi	r3,r3,29344
 4012f2c:	1885883a 	add	r2,r3,r2
 4012f30:	11000017 	ldw	r4,0(r2)
 4012f34:	11400117 	ldw	r5,4(r2)
 4012f38:	d8800717 	ldw	r2,28(sp)
 4012f3c:	880f883a 	mov	r7,r17
 4012f40:	d9801215 	stw	r6,72(sp)
 4012f44:	800d883a 	mov	r6,r16
 4012f48:	db001615 	stw	r12,88(sp)
 4012f4c:	15c00044 	addi	r23,r2,1
 4012f50:	401a2540 	call	401a254 <__muldf3>
 4012f54:	d9401017 	ldw	r5,64(sp)
 4012f58:	d9000f17 	ldw	r4,60(sp)
 4012f5c:	d8c01515 	stw	r3,84(sp)
 4012f60:	d8801415 	stw	r2,80(sp)
 4012f64:	401b3bc0 	call	401b3bc <__fixdfsi>
 4012f68:	1009883a 	mov	r4,r2
 4012f6c:	1021883a 	mov	r16,r2
 4012f70:	401b43c0 	call	401b43c <__floatsidf>
 4012f74:	d9000f17 	ldw	r4,60(sp)
 4012f78:	d9401017 	ldw	r5,64(sp)
 4012f7c:	100d883a 	mov	r6,r2
 4012f80:	180f883a 	mov	r7,r3
 4012f84:	401aac00 	call	401aac0 <__subdf3>
 4012f88:	1829883a 	mov	r20,r3
 4012f8c:	d8c00717 	ldw	r3,28(sp)
 4012f90:	84000c04 	addi	r16,r16,48
 4012f94:	1023883a 	mov	r17,r2
 4012f98:	1c000005 	stb	r16,0(r3)
 4012f9c:	db001617 	ldw	r12,88(sp)
 4012fa0:	00800044 	movi	r2,1
 4012fa4:	60802226 	beq	r12,r2,4013030 <_dtoa_r+0x1424>
 4012fa8:	d9c00717 	ldw	r7,28(sp)
 4012fac:	8805883a 	mov	r2,r17
 4012fb0:	b82b883a 	mov	r21,r23
 4012fb4:	3b19883a 	add	r12,r7,r12
 4012fb8:	6023883a 	mov	r17,r12
 4012fbc:	a007883a 	mov	r3,r20
 4012fc0:	dc800f15 	stw	r18,60(sp)
 4012fc4:	000d883a 	mov	r6,zero
 4012fc8:	01d00934 	movhi	r7,16420
 4012fcc:	1009883a 	mov	r4,r2
 4012fd0:	180b883a 	mov	r5,r3
 4012fd4:	401a2540 	call	401a254 <__muldf3>
 4012fd8:	180b883a 	mov	r5,r3
 4012fdc:	1009883a 	mov	r4,r2
 4012fe0:	1829883a 	mov	r20,r3
 4012fe4:	1025883a 	mov	r18,r2
 4012fe8:	401b3bc0 	call	401b3bc <__fixdfsi>
 4012fec:	1009883a 	mov	r4,r2
 4012ff0:	1021883a 	mov	r16,r2
 4012ff4:	401b43c0 	call	401b43c <__floatsidf>
 4012ff8:	100d883a 	mov	r6,r2
 4012ffc:	180f883a 	mov	r7,r3
 4013000:	9009883a 	mov	r4,r18
 4013004:	a00b883a 	mov	r5,r20
 4013008:	84000c04 	addi	r16,r16,48
 401300c:	401aac00 	call	401aac0 <__subdf3>
 4013010:	ad400044 	addi	r21,r21,1
 4013014:	ac3fffc5 	stb	r16,-1(r21)
 4013018:	ac7fea1e 	bne	r21,r17,4012fc4 <__alt_mem_onchip_memory2_0+0xfc011d44>
 401301c:	1023883a 	mov	r17,r2
 4013020:	d8801217 	ldw	r2,72(sp)
 4013024:	dc800f17 	ldw	r18,60(sp)
 4013028:	1829883a 	mov	r20,r3
 401302c:	b8af883a 	add	r23,r23,r2
 4013030:	d9001417 	ldw	r4,80(sp)
 4013034:	d9401517 	ldw	r5,84(sp)
 4013038:	000d883a 	mov	r6,zero
 401303c:	01cff834 	movhi	r7,16352
 4013040:	4018d800 	call	4018d80 <__adddf3>
 4013044:	880d883a 	mov	r6,r17
 4013048:	a00f883a 	mov	r7,r20
 401304c:	1009883a 	mov	r4,r2
 4013050:	180b883a 	mov	r5,r3
 4013054:	401a1600 	call	401a160 <__ledf2>
 4013058:	10003e0e 	bge	r2,zero,4013154 <_dtoa_r+0x1548>
 401305c:	d9001317 	ldw	r4,76(sp)
 4013060:	bd3fffc3 	ldbu	r20,-1(r23)
 4013064:	d9000515 	stw	r4,20(sp)
 4013068:	003d3b06 	br	4012558 <__alt_mem_onchip_memory2_0+0xfc0112d8>
 401306c:	0027883a 	mov	r19,zero
 4013070:	003f1b06 	br	4012ce0 <__alt_mem_onchip_memory2_0+0xfc011a60>
 4013074:	d8800817 	ldw	r2,32(sp)
 4013078:	11e9c83a 	sub	r20,r2,r7
 401307c:	0005883a 	mov	r2,zero
 4013080:	003d5406 	br	40125d4 <__alt_mem_onchip_memory2_0+0xfc011354>
 4013084:	00800044 	movi	r2,1
 4013088:	003dc706 	br	40127a8 <__alt_mem_onchip_memory2_0+0xfc011528>
 401308c:	d8c00217 	ldw	r3,8(sp)
 4013090:	00800d84 	movi	r2,54
 4013094:	dd400a17 	ldw	r21,40(sp)
 4013098:	10c5c83a 	sub	r2,r2,r3
 401309c:	dd000817 	ldw	r20,32(sp)
 40130a0:	003d4c06 	br	40125d4 <__alt_mem_onchip_memory2_0+0xfc011354>
 40130a4:	dc800f15 	stw	r18,60(sp)
 40130a8:	dcc01015 	stw	r19,64(sp)
 40130ac:	04000084 	movi	r16,2
 40130b0:	003bed06 	br	4012068 <__alt_mem_onchip_memory2_0+0xfc010de8>
 40130b4:	d9000617 	ldw	r4,24(sp)
 40130b8:	203f0d26 	beq	r4,zero,4012cf0 <__alt_mem_onchip_memory2_0+0xfc011a70>
 40130bc:	d9800c17 	ldw	r6,48(sp)
 40130c0:	01bcab0e 	bge	zero,r6,4012370 <__alt_mem_onchip_memory2_0+0xfc0110f0>
 40130c4:	d9401017 	ldw	r5,64(sp)
 40130c8:	d9000f17 	ldw	r4,60(sp)
 40130cc:	000d883a 	mov	r6,zero
 40130d0:	01d00934 	movhi	r7,16420
 40130d4:	401a2540 	call	401a254 <__muldf3>
 40130d8:	81000044 	addi	r4,r16,1
 40130dc:	d8800f15 	stw	r2,60(sp)
 40130e0:	d8c01015 	stw	r3,64(sp)
 40130e4:	401b43c0 	call	401b43c <__floatsidf>
 40130e8:	d9800f17 	ldw	r6,60(sp)
 40130ec:	d9c01017 	ldw	r7,64(sp)
 40130f0:	1009883a 	mov	r4,r2
 40130f4:	180b883a 	mov	r5,r3
 40130f8:	401a2540 	call	401a254 <__muldf3>
 40130fc:	01d00734 	movhi	r7,16412
 4013100:	000d883a 	mov	r6,zero
 4013104:	1009883a 	mov	r4,r2
 4013108:	180b883a 	mov	r5,r3
 401310c:	4018d800 	call	4018d80 <__adddf3>
 4013110:	d9c00517 	ldw	r7,20(sp)
 4013114:	047f3034 	movhi	r17,64704
 4013118:	1021883a 	mov	r16,r2
 401311c:	39ffffc4 	addi	r7,r7,-1
 4013120:	d9c01315 	stw	r7,76(sp)
 4013124:	1c63883a 	add	r17,r3,r17
 4013128:	db000c17 	ldw	r12,48(sp)
 401312c:	003bea06 	br	40120d8 <__alt_mem_onchip_memory2_0+0xfc010e58>
 4013130:	dc000915 	stw	r16,36(sp)
 4013134:	003e0e06 	br	4012970 <__alt_mem_onchip_memory2_0+0xfc0116f0>
 4013138:	01000e44 	movi	r4,57
 401313c:	8825883a 	mov	r18,r17
 4013140:	9dc00044 	addi	r23,r19,1
 4013144:	99000005 	stb	r4,0(r19)
 4013148:	a023883a 	mov	r17,r20
 401314c:	dc000915 	stw	r16,36(sp)
 4013150:	003da406 	br	40127e4 <__alt_mem_onchip_memory2_0+0xfc011564>
 4013154:	d9801417 	ldw	r6,80(sp)
 4013158:	d9c01517 	ldw	r7,84(sp)
 401315c:	0009883a 	mov	r4,zero
 4013160:	014ff834 	movhi	r5,16352
 4013164:	401aac00 	call	401aac0 <__subdf3>
 4013168:	880d883a 	mov	r6,r17
 401316c:	a00f883a 	mov	r7,r20
 4013170:	1009883a 	mov	r4,r2
 4013174:	180b883a 	mov	r5,r3
 4013178:	401a0840 	call	401a084 <__gedf2>
 401317c:	00bc7c0e 	bge	zero,r2,4012370 <__alt_mem_onchip_memory2_0+0xfc0110f0>
 4013180:	01000c04 	movi	r4,48
 4013184:	00000106 	br	401318c <_dtoa_r+0x1580>
 4013188:	102f883a 	mov	r23,r2
 401318c:	b8bfffc4 	addi	r2,r23,-1
 4013190:	10c00007 	ldb	r3,0(r2)
 4013194:	193ffc26 	beq	r3,r4,4013188 <__alt_mem_onchip_memory2_0+0xfc011f08>
 4013198:	d9801317 	ldw	r6,76(sp)
 401319c:	d9800515 	stw	r6,20(sp)
 40131a0:	003c4406 	br	40122b4 <__alt_mem_onchip_memory2_0+0xfc011034>
 40131a4:	d9801317 	ldw	r6,76(sp)
 40131a8:	d9800515 	stw	r6,20(sp)
 40131ac:	003cea06 	br	4012558 <__alt_mem_onchip_memory2_0+0xfc0112d8>
 40131b0:	dd800f17 	ldw	r22,60(sp)
 40131b4:	dcc01017 	ldw	r19,64(sp)
 40131b8:	dc801217 	ldw	r18,72(sp)
 40131bc:	003c6c06 	br	4012370 <__alt_mem_onchip_memory2_0+0xfc0110f0>
 40131c0:	903e031e 	bne	r18,zero,40129d0 <__alt_mem_onchip_memory2_0+0xfc011750>
 40131c4:	003ebb06 	br	4012cb4 <__alt_mem_onchip_memory2_0+0xfc011a34>
 40131c8:	103e6c1e 	bne	r2,zero,4012b7c <__alt_mem_onchip_memory2_0+0xfc0118fc>
 40131cc:	4080004c 	andi	r2,r8,1
 40131d0:	103e6a26 	beq	r2,zero,4012b7c <__alt_mem_onchip_memory2_0+0xfc0118fc>
 40131d4:	003e6606 	br	4012b70 <__alt_mem_onchip_memory2_0+0xfc0118f0>
 40131d8:	d8c00317 	ldw	r3,12(sp)
 40131dc:	00800084 	movi	r2,2
 40131e0:	10c02916 	blt	r2,r3,4013288 <_dtoa_r+0x167c>
 40131e4:	d9000c17 	ldw	r4,48(sp)
 40131e8:	003e8806 	br	4012c0c <__alt_mem_onchip_memory2_0+0xfc01198c>
 40131ec:	04000084 	movi	r16,2
 40131f0:	003b9d06 	br	4012068 <__alt_mem_onchip_memory2_0+0xfc010de8>
 40131f4:	d9001317 	ldw	r4,76(sp)
 40131f8:	d9000515 	stw	r4,20(sp)
 40131fc:	003cd606 	br	4012558 <__alt_mem_onchip_memory2_0+0xfc0112d8>
 4013200:	d8801317 	ldw	r2,76(sp)
 4013204:	d8800515 	stw	r2,20(sp)
 4013208:	003c2a06 	br	40122b4 <__alt_mem_onchip_memory2_0+0xfc011034>
 401320c:	d9800317 	ldw	r6,12(sp)
 4013210:	00800084 	movi	r2,2
 4013214:	11801516 	blt	r2,r6,401326c <_dtoa_r+0x1660>
 4013218:	d9c00c17 	ldw	r7,48(sp)
 401321c:	d9c00615 	stw	r7,24(sp)
 4013220:	003df706 	br	4012a00 <__alt_mem_onchip_memory2_0+0xfc011780>
 4013224:	193d3926 	beq	r3,r4,401270c <__alt_mem_onchip_memory2_0+0xfc01148c>
 4013228:	00c00f04 	movi	r3,60
 401322c:	1885c83a 	sub	r2,r3,r2
 4013230:	003ddf06 	br	40129b0 <__alt_mem_onchip_memory2_0+0xfc011730>
 4013234:	e009883a 	mov	r4,fp
 4013238:	e0001115 	stw	zero,68(fp)
 401323c:	000b883a 	mov	r5,zero
 4013240:	40148480 	call	4014848 <_Balloc>
 4013244:	d8800715 	stw	r2,28(sp)
 4013248:	d8c00717 	ldw	r3,28(sp)
 401324c:	00bfffc4 	movi	r2,-1
 4013250:	01000044 	movi	r4,1
 4013254:	d8800c15 	stw	r2,48(sp)
 4013258:	e0c01015 	stw	r3,64(fp)
 401325c:	d9000b15 	stw	r4,44(sp)
 4013260:	d8800615 	stw	r2,24(sp)
 4013264:	d8002215 	stw	zero,136(sp)
 4013268:	003c4106 	br	4012370 <__alt_mem_onchip_memory2_0+0xfc0110f0>
 401326c:	d8c00c17 	ldw	r3,48(sp)
 4013270:	d8c00615 	stw	r3,24(sp)
 4013274:	003e7006 	br	4012c38 <__alt_mem_onchip_memory2_0+0xfc0119b8>
 4013278:	04400044 	movi	r17,1
 401327c:	003b2006 	br	4011f00 <__alt_mem_onchip_memory2_0+0xfc010c80>
 4013280:	000b883a 	mov	r5,zero
 4013284:	003b3d06 	br	4011f7c <__alt_mem_onchip_memory2_0+0xfc010cfc>
 4013288:	d8800c17 	ldw	r2,48(sp)
 401328c:	d8800615 	stw	r2,24(sp)
 4013290:	003e6906 	br	4012c38 <__alt_mem_onchip_memory2_0+0xfc0119b8>

04013294 <__sflush_r>:
 4013294:	2880030b 	ldhu	r2,12(r5)
 4013298:	defffb04 	addi	sp,sp,-20
 401329c:	dcc00315 	stw	r19,12(sp)
 40132a0:	dc400115 	stw	r17,4(sp)
 40132a4:	dfc00415 	stw	ra,16(sp)
 40132a8:	dc800215 	stw	r18,8(sp)
 40132ac:	dc000015 	stw	r16,0(sp)
 40132b0:	10c0020c 	andi	r3,r2,8
 40132b4:	2823883a 	mov	r17,r5
 40132b8:	2027883a 	mov	r19,r4
 40132bc:	1800311e 	bne	r3,zero,4013384 <__sflush_r+0xf0>
 40132c0:	28c00117 	ldw	r3,4(r5)
 40132c4:	10820014 	ori	r2,r2,2048
 40132c8:	2880030d 	sth	r2,12(r5)
 40132cc:	00c04b0e 	bge	zero,r3,40133fc <__sflush_r+0x168>
 40132d0:	8a000a17 	ldw	r8,40(r17)
 40132d4:	40002326 	beq	r8,zero,4013364 <__sflush_r+0xd0>
 40132d8:	9c000017 	ldw	r16,0(r19)
 40132dc:	10c4000c 	andi	r3,r2,4096
 40132e0:	98000015 	stw	zero,0(r19)
 40132e4:	18004826 	beq	r3,zero,4013408 <__sflush_r+0x174>
 40132e8:	89801417 	ldw	r6,80(r17)
 40132ec:	10c0010c 	andi	r3,r2,4
 40132f0:	18000626 	beq	r3,zero,401330c <__sflush_r+0x78>
 40132f4:	88c00117 	ldw	r3,4(r17)
 40132f8:	88800c17 	ldw	r2,48(r17)
 40132fc:	30cdc83a 	sub	r6,r6,r3
 4013300:	10000226 	beq	r2,zero,401330c <__sflush_r+0x78>
 4013304:	88800f17 	ldw	r2,60(r17)
 4013308:	308dc83a 	sub	r6,r6,r2
 401330c:	89400717 	ldw	r5,28(r17)
 4013310:	000f883a 	mov	r7,zero
 4013314:	9809883a 	mov	r4,r19
 4013318:	403ee83a 	callr	r8
 401331c:	00ffffc4 	movi	r3,-1
 4013320:	10c04426 	beq	r2,r3,4013434 <__sflush_r+0x1a0>
 4013324:	88c0030b 	ldhu	r3,12(r17)
 4013328:	89000417 	ldw	r4,16(r17)
 401332c:	88000115 	stw	zero,4(r17)
 4013330:	197dffcc 	andi	r5,r3,63487
 4013334:	8940030d 	sth	r5,12(r17)
 4013338:	89000015 	stw	r4,0(r17)
 401333c:	18c4000c 	andi	r3,r3,4096
 4013340:	18002c1e 	bne	r3,zero,40133f4 <__sflush_r+0x160>
 4013344:	89400c17 	ldw	r5,48(r17)
 4013348:	9c000015 	stw	r16,0(r19)
 401334c:	28000526 	beq	r5,zero,4013364 <__sflush_r+0xd0>
 4013350:	88801004 	addi	r2,r17,64
 4013354:	28800226 	beq	r5,r2,4013360 <__sflush_r+0xcc>
 4013358:	9809883a 	mov	r4,r19
 401335c:	4013a100 	call	4013a10 <_free_r>
 4013360:	88000c15 	stw	zero,48(r17)
 4013364:	0005883a 	mov	r2,zero
 4013368:	dfc00417 	ldw	ra,16(sp)
 401336c:	dcc00317 	ldw	r19,12(sp)
 4013370:	dc800217 	ldw	r18,8(sp)
 4013374:	dc400117 	ldw	r17,4(sp)
 4013378:	dc000017 	ldw	r16,0(sp)
 401337c:	dec00504 	addi	sp,sp,20
 4013380:	f800283a 	ret
 4013384:	2c800417 	ldw	r18,16(r5)
 4013388:	903ff626 	beq	r18,zero,4013364 <__alt_mem_onchip_memory2_0+0xfc0120e4>
 401338c:	2c000017 	ldw	r16,0(r5)
 4013390:	108000cc 	andi	r2,r2,3
 4013394:	2c800015 	stw	r18,0(r5)
 4013398:	84a1c83a 	sub	r16,r16,r18
 401339c:	1000131e 	bne	r2,zero,40133ec <__sflush_r+0x158>
 40133a0:	28800517 	ldw	r2,20(r5)
 40133a4:	88800215 	stw	r2,8(r17)
 40133a8:	04000316 	blt	zero,r16,40133b8 <__sflush_r+0x124>
 40133ac:	003fed06 	br	4013364 <__alt_mem_onchip_memory2_0+0xfc0120e4>
 40133b0:	90a5883a 	add	r18,r18,r2
 40133b4:	043feb0e 	bge	zero,r16,4013364 <__alt_mem_onchip_memory2_0+0xfc0120e4>
 40133b8:	88800917 	ldw	r2,36(r17)
 40133bc:	89400717 	ldw	r5,28(r17)
 40133c0:	800f883a 	mov	r7,r16
 40133c4:	900d883a 	mov	r6,r18
 40133c8:	9809883a 	mov	r4,r19
 40133cc:	103ee83a 	callr	r2
 40133d0:	80a1c83a 	sub	r16,r16,r2
 40133d4:	00bff616 	blt	zero,r2,40133b0 <__alt_mem_onchip_memory2_0+0xfc012130>
 40133d8:	88c0030b 	ldhu	r3,12(r17)
 40133dc:	00bfffc4 	movi	r2,-1
 40133e0:	18c01014 	ori	r3,r3,64
 40133e4:	88c0030d 	sth	r3,12(r17)
 40133e8:	003fdf06 	br	4013368 <__alt_mem_onchip_memory2_0+0xfc0120e8>
 40133ec:	0005883a 	mov	r2,zero
 40133f0:	003fec06 	br	40133a4 <__alt_mem_onchip_memory2_0+0xfc012124>
 40133f4:	88801415 	stw	r2,80(r17)
 40133f8:	003fd206 	br	4013344 <__alt_mem_onchip_memory2_0+0xfc0120c4>
 40133fc:	28c00f17 	ldw	r3,60(r5)
 4013400:	00ffb316 	blt	zero,r3,40132d0 <__alt_mem_onchip_memory2_0+0xfc012050>
 4013404:	003fd706 	br	4013364 <__alt_mem_onchip_memory2_0+0xfc0120e4>
 4013408:	89400717 	ldw	r5,28(r17)
 401340c:	000d883a 	mov	r6,zero
 4013410:	01c00044 	movi	r7,1
 4013414:	9809883a 	mov	r4,r19
 4013418:	403ee83a 	callr	r8
 401341c:	100d883a 	mov	r6,r2
 4013420:	00bfffc4 	movi	r2,-1
 4013424:	30801426 	beq	r6,r2,4013478 <__sflush_r+0x1e4>
 4013428:	8880030b 	ldhu	r2,12(r17)
 401342c:	8a000a17 	ldw	r8,40(r17)
 4013430:	003fae06 	br	40132ec <__alt_mem_onchip_memory2_0+0xfc01206c>
 4013434:	98c00017 	ldw	r3,0(r19)
 4013438:	183fba26 	beq	r3,zero,4013324 <__alt_mem_onchip_memory2_0+0xfc0120a4>
 401343c:	01000744 	movi	r4,29
 4013440:	19000626 	beq	r3,r4,401345c <__sflush_r+0x1c8>
 4013444:	01000584 	movi	r4,22
 4013448:	19000426 	beq	r3,r4,401345c <__sflush_r+0x1c8>
 401344c:	88c0030b 	ldhu	r3,12(r17)
 4013450:	18c01014 	ori	r3,r3,64
 4013454:	88c0030d 	sth	r3,12(r17)
 4013458:	003fc306 	br	4013368 <__alt_mem_onchip_memory2_0+0xfc0120e8>
 401345c:	8880030b 	ldhu	r2,12(r17)
 4013460:	88c00417 	ldw	r3,16(r17)
 4013464:	88000115 	stw	zero,4(r17)
 4013468:	10bdffcc 	andi	r2,r2,63487
 401346c:	8880030d 	sth	r2,12(r17)
 4013470:	88c00015 	stw	r3,0(r17)
 4013474:	003fb306 	br	4013344 <__alt_mem_onchip_memory2_0+0xfc0120c4>
 4013478:	98800017 	ldw	r2,0(r19)
 401347c:	103fea26 	beq	r2,zero,4013428 <__alt_mem_onchip_memory2_0+0xfc0121a8>
 4013480:	00c00744 	movi	r3,29
 4013484:	10c00226 	beq	r2,r3,4013490 <__sflush_r+0x1fc>
 4013488:	00c00584 	movi	r3,22
 401348c:	10c0031e 	bne	r2,r3,401349c <__sflush_r+0x208>
 4013490:	9c000015 	stw	r16,0(r19)
 4013494:	0005883a 	mov	r2,zero
 4013498:	003fb306 	br	4013368 <__alt_mem_onchip_memory2_0+0xfc0120e8>
 401349c:	88c0030b 	ldhu	r3,12(r17)
 40134a0:	3005883a 	mov	r2,r6
 40134a4:	18c01014 	ori	r3,r3,64
 40134a8:	88c0030d 	sth	r3,12(r17)
 40134ac:	003fae06 	br	4013368 <__alt_mem_onchip_memory2_0+0xfc0120e8>

040134b0 <_fflush_r>:
 40134b0:	defffd04 	addi	sp,sp,-12
 40134b4:	dc000115 	stw	r16,4(sp)
 40134b8:	dfc00215 	stw	ra,8(sp)
 40134bc:	2021883a 	mov	r16,r4
 40134c0:	20000226 	beq	r4,zero,40134cc <_fflush_r+0x1c>
 40134c4:	20800e17 	ldw	r2,56(r4)
 40134c8:	10000c26 	beq	r2,zero,40134fc <_fflush_r+0x4c>
 40134cc:	2880030f 	ldh	r2,12(r5)
 40134d0:	1000051e 	bne	r2,zero,40134e8 <_fflush_r+0x38>
 40134d4:	0005883a 	mov	r2,zero
 40134d8:	dfc00217 	ldw	ra,8(sp)
 40134dc:	dc000117 	ldw	r16,4(sp)
 40134e0:	dec00304 	addi	sp,sp,12
 40134e4:	f800283a 	ret
 40134e8:	8009883a 	mov	r4,r16
 40134ec:	dfc00217 	ldw	ra,8(sp)
 40134f0:	dc000117 	ldw	r16,4(sp)
 40134f4:	dec00304 	addi	sp,sp,12
 40134f8:	40132941 	jmpi	4013294 <__sflush_r>
 40134fc:	d9400015 	stw	r5,0(sp)
 4013500:	401389c0 	call	401389c <__sinit>
 4013504:	d9400017 	ldw	r5,0(sp)
 4013508:	003ff006 	br	40134cc <__alt_mem_onchip_memory2_0+0xfc01224c>

0401350c <fflush>:
 401350c:	20000526 	beq	r4,zero,4013524 <fflush+0x18>
 4013510:	008100f4 	movhi	r2,1027
 4013514:	10a96004 	addi	r2,r2,-23168
 4013518:	200b883a 	mov	r5,r4
 401351c:	11000017 	ldw	r4,0(r2)
 4013520:	40134b01 	jmpi	40134b0 <_fflush_r>
 4013524:	008100f4 	movhi	r2,1027
 4013528:	10a95f04 	addi	r2,r2,-23172
 401352c:	11000017 	ldw	r4,0(r2)
 4013530:	01410074 	movhi	r5,1025
 4013534:	294d2c04 	addi	r5,r5,13488
 4013538:	40142ac1 	jmpi	40142ac <_fwalk_reent>

0401353c <__fp_unlock>:
 401353c:	0005883a 	mov	r2,zero
 4013540:	f800283a 	ret

04013544 <_cleanup_r>:
 4013544:	01410074 	movhi	r5,1025
 4013548:	295ed704 	addi	r5,r5,31580
 401354c:	40142ac1 	jmpi	40142ac <_fwalk_reent>

04013550 <__sinit.part.1>:
 4013550:	defff704 	addi	sp,sp,-36
 4013554:	00c10074 	movhi	r3,1025
 4013558:	dfc00815 	stw	ra,32(sp)
 401355c:	ddc00715 	stw	r23,28(sp)
 4013560:	dd800615 	stw	r22,24(sp)
 4013564:	dd400515 	stw	r21,20(sp)
 4013568:	dd000415 	stw	r20,16(sp)
 401356c:	dcc00315 	stw	r19,12(sp)
 4013570:	dc800215 	stw	r18,8(sp)
 4013574:	dc400115 	stw	r17,4(sp)
 4013578:	dc000015 	stw	r16,0(sp)
 401357c:	18cd5104 	addi	r3,r3,13636
 4013580:	24000117 	ldw	r16,4(r4)
 4013584:	20c00f15 	stw	r3,60(r4)
 4013588:	2080bb04 	addi	r2,r4,748
 401358c:	00c000c4 	movi	r3,3
 4013590:	20c0b915 	stw	r3,740(r4)
 4013594:	2080ba15 	stw	r2,744(r4)
 4013598:	2000b815 	stw	zero,736(r4)
 401359c:	05c00204 	movi	r23,8
 40135a0:	00800104 	movi	r2,4
 40135a4:	2025883a 	mov	r18,r4
 40135a8:	b80d883a 	mov	r6,r23
 40135ac:	81001704 	addi	r4,r16,92
 40135b0:	000b883a 	mov	r5,zero
 40135b4:	80000015 	stw	zero,0(r16)
 40135b8:	80000115 	stw	zero,4(r16)
 40135bc:	80000215 	stw	zero,8(r16)
 40135c0:	8080030d 	sth	r2,12(r16)
 40135c4:	80001915 	stw	zero,100(r16)
 40135c8:	8000038d 	sth	zero,14(r16)
 40135cc:	80000415 	stw	zero,16(r16)
 40135d0:	80000515 	stw	zero,20(r16)
 40135d4:	80000615 	stw	zero,24(r16)
 40135d8:	400ed800 	call	400ed80 <memset>
 40135dc:	05810074 	movhi	r22,1025
 40135e0:	94400217 	ldw	r17,8(r18)
 40135e4:	05410074 	movhi	r21,1025
 40135e8:	05010074 	movhi	r20,1025
 40135ec:	04c10074 	movhi	r19,1025
 40135f0:	b5981004 	addi	r22,r22,24640
 40135f4:	ad582704 	addi	r21,r21,24732
 40135f8:	a5184604 	addi	r20,r20,24856
 40135fc:	9cd85d04 	addi	r19,r19,24948
 4013600:	85800815 	stw	r22,32(r16)
 4013604:	85400915 	stw	r21,36(r16)
 4013608:	85000a15 	stw	r20,40(r16)
 401360c:	84c00b15 	stw	r19,44(r16)
 4013610:	84000715 	stw	r16,28(r16)
 4013614:	00800284 	movi	r2,10
 4013618:	8880030d 	sth	r2,12(r17)
 401361c:	00800044 	movi	r2,1
 4013620:	b80d883a 	mov	r6,r23
 4013624:	89001704 	addi	r4,r17,92
 4013628:	000b883a 	mov	r5,zero
 401362c:	88000015 	stw	zero,0(r17)
 4013630:	88000115 	stw	zero,4(r17)
 4013634:	88000215 	stw	zero,8(r17)
 4013638:	88001915 	stw	zero,100(r17)
 401363c:	8880038d 	sth	r2,14(r17)
 4013640:	88000415 	stw	zero,16(r17)
 4013644:	88000515 	stw	zero,20(r17)
 4013648:	88000615 	stw	zero,24(r17)
 401364c:	400ed800 	call	400ed80 <memset>
 4013650:	94000317 	ldw	r16,12(r18)
 4013654:	00800484 	movi	r2,18
 4013658:	8c400715 	stw	r17,28(r17)
 401365c:	8d800815 	stw	r22,32(r17)
 4013660:	8d400915 	stw	r21,36(r17)
 4013664:	8d000a15 	stw	r20,40(r17)
 4013668:	8cc00b15 	stw	r19,44(r17)
 401366c:	8080030d 	sth	r2,12(r16)
 4013670:	00800084 	movi	r2,2
 4013674:	80000015 	stw	zero,0(r16)
 4013678:	80000115 	stw	zero,4(r16)
 401367c:	80000215 	stw	zero,8(r16)
 4013680:	80001915 	stw	zero,100(r16)
 4013684:	8080038d 	sth	r2,14(r16)
 4013688:	80000415 	stw	zero,16(r16)
 401368c:	80000515 	stw	zero,20(r16)
 4013690:	80000615 	stw	zero,24(r16)
 4013694:	b80d883a 	mov	r6,r23
 4013698:	000b883a 	mov	r5,zero
 401369c:	81001704 	addi	r4,r16,92
 40136a0:	400ed800 	call	400ed80 <memset>
 40136a4:	00800044 	movi	r2,1
 40136a8:	84000715 	stw	r16,28(r16)
 40136ac:	85800815 	stw	r22,32(r16)
 40136b0:	85400915 	stw	r21,36(r16)
 40136b4:	85000a15 	stw	r20,40(r16)
 40136b8:	84c00b15 	stw	r19,44(r16)
 40136bc:	90800e15 	stw	r2,56(r18)
 40136c0:	dfc00817 	ldw	ra,32(sp)
 40136c4:	ddc00717 	ldw	r23,28(sp)
 40136c8:	dd800617 	ldw	r22,24(sp)
 40136cc:	dd400517 	ldw	r21,20(sp)
 40136d0:	dd000417 	ldw	r20,16(sp)
 40136d4:	dcc00317 	ldw	r19,12(sp)
 40136d8:	dc800217 	ldw	r18,8(sp)
 40136dc:	dc400117 	ldw	r17,4(sp)
 40136e0:	dc000017 	ldw	r16,0(sp)
 40136e4:	dec00904 	addi	sp,sp,36
 40136e8:	f800283a 	ret

040136ec <__fp_lock>:
 40136ec:	0005883a 	mov	r2,zero
 40136f0:	f800283a 	ret

040136f4 <__sfmoreglue>:
 40136f4:	defffc04 	addi	sp,sp,-16
 40136f8:	dc800215 	stw	r18,8(sp)
 40136fc:	2825883a 	mov	r18,r5
 4013700:	dc000015 	stw	r16,0(sp)
 4013704:	01401a04 	movi	r5,104
 4013708:	2021883a 	mov	r16,r4
 401370c:	913fffc4 	addi	r4,r18,-1
 4013710:	dfc00315 	stw	ra,12(sp)
 4013714:	dc400115 	stw	r17,4(sp)
 4013718:	400d2c40 	call	400d2c4 <__mulsi3>
 401371c:	8009883a 	mov	r4,r16
 4013720:	11401d04 	addi	r5,r2,116
 4013724:	1023883a 	mov	r17,r2
 4013728:	400e42c0 	call	400e42c <_malloc_r>
 401372c:	1021883a 	mov	r16,r2
 4013730:	10000726 	beq	r2,zero,4013750 <__sfmoreglue+0x5c>
 4013734:	11000304 	addi	r4,r2,12
 4013738:	10000015 	stw	zero,0(r2)
 401373c:	14800115 	stw	r18,4(r2)
 4013740:	11000215 	stw	r4,8(r2)
 4013744:	89801a04 	addi	r6,r17,104
 4013748:	000b883a 	mov	r5,zero
 401374c:	400ed800 	call	400ed80 <memset>
 4013750:	8005883a 	mov	r2,r16
 4013754:	dfc00317 	ldw	ra,12(sp)
 4013758:	dc800217 	ldw	r18,8(sp)
 401375c:	dc400117 	ldw	r17,4(sp)
 4013760:	dc000017 	ldw	r16,0(sp)
 4013764:	dec00404 	addi	sp,sp,16
 4013768:	f800283a 	ret

0401376c <__sfp>:
 401376c:	defffb04 	addi	sp,sp,-20
 4013770:	dc000015 	stw	r16,0(sp)
 4013774:	040100f4 	movhi	r16,1027
 4013778:	84295f04 	addi	r16,r16,-23172
 401377c:	dcc00315 	stw	r19,12(sp)
 4013780:	2027883a 	mov	r19,r4
 4013784:	81000017 	ldw	r4,0(r16)
 4013788:	dfc00415 	stw	ra,16(sp)
 401378c:	dc800215 	stw	r18,8(sp)
 4013790:	20800e17 	ldw	r2,56(r4)
 4013794:	dc400115 	stw	r17,4(sp)
 4013798:	1000021e 	bne	r2,zero,40137a4 <__sfp+0x38>
 401379c:	40135500 	call	4013550 <__sinit.part.1>
 40137a0:	81000017 	ldw	r4,0(r16)
 40137a4:	2480b804 	addi	r18,r4,736
 40137a8:	047fffc4 	movi	r17,-1
 40137ac:	91000117 	ldw	r4,4(r18)
 40137b0:	94000217 	ldw	r16,8(r18)
 40137b4:	213fffc4 	addi	r4,r4,-1
 40137b8:	20000a16 	blt	r4,zero,40137e4 <__sfp+0x78>
 40137bc:	8080030f 	ldh	r2,12(r16)
 40137c0:	10000c26 	beq	r2,zero,40137f4 <__sfp+0x88>
 40137c4:	80c01d04 	addi	r3,r16,116
 40137c8:	00000206 	br	40137d4 <__sfp+0x68>
 40137cc:	18bfe60f 	ldh	r2,-104(r3)
 40137d0:	10000826 	beq	r2,zero,40137f4 <__sfp+0x88>
 40137d4:	213fffc4 	addi	r4,r4,-1
 40137d8:	1c3ffd04 	addi	r16,r3,-12
 40137dc:	18c01a04 	addi	r3,r3,104
 40137e0:	247ffa1e 	bne	r4,r17,40137cc <__alt_mem_onchip_memory2_0+0xfc01254c>
 40137e4:	90800017 	ldw	r2,0(r18)
 40137e8:	10001d26 	beq	r2,zero,4013860 <__sfp+0xf4>
 40137ec:	1025883a 	mov	r18,r2
 40137f0:	003fee06 	br	40137ac <__alt_mem_onchip_memory2_0+0xfc01252c>
 40137f4:	00bfffc4 	movi	r2,-1
 40137f8:	8080038d 	sth	r2,14(r16)
 40137fc:	00800044 	movi	r2,1
 4013800:	8080030d 	sth	r2,12(r16)
 4013804:	80001915 	stw	zero,100(r16)
 4013808:	80000015 	stw	zero,0(r16)
 401380c:	80000215 	stw	zero,8(r16)
 4013810:	80000115 	stw	zero,4(r16)
 4013814:	80000415 	stw	zero,16(r16)
 4013818:	80000515 	stw	zero,20(r16)
 401381c:	80000615 	stw	zero,24(r16)
 4013820:	01800204 	movi	r6,8
 4013824:	000b883a 	mov	r5,zero
 4013828:	81001704 	addi	r4,r16,92
 401382c:	400ed800 	call	400ed80 <memset>
 4013830:	8005883a 	mov	r2,r16
 4013834:	80000c15 	stw	zero,48(r16)
 4013838:	80000d15 	stw	zero,52(r16)
 401383c:	80001115 	stw	zero,68(r16)
 4013840:	80001215 	stw	zero,72(r16)
 4013844:	dfc00417 	ldw	ra,16(sp)
 4013848:	dcc00317 	ldw	r19,12(sp)
 401384c:	dc800217 	ldw	r18,8(sp)
 4013850:	dc400117 	ldw	r17,4(sp)
 4013854:	dc000017 	ldw	r16,0(sp)
 4013858:	dec00504 	addi	sp,sp,20
 401385c:	f800283a 	ret
 4013860:	01400104 	movi	r5,4
 4013864:	9809883a 	mov	r4,r19
 4013868:	40136f40 	call	40136f4 <__sfmoreglue>
 401386c:	90800015 	stw	r2,0(r18)
 4013870:	103fde1e 	bne	r2,zero,40137ec <__alt_mem_onchip_memory2_0+0xfc01256c>
 4013874:	00800304 	movi	r2,12
 4013878:	98800015 	stw	r2,0(r19)
 401387c:	0005883a 	mov	r2,zero
 4013880:	003ff006 	br	4013844 <__alt_mem_onchip_memory2_0+0xfc0125c4>

04013884 <_cleanup>:
 4013884:	008100f4 	movhi	r2,1027
 4013888:	10a95f04 	addi	r2,r2,-23172
 401388c:	11000017 	ldw	r4,0(r2)
 4013890:	01410074 	movhi	r5,1025
 4013894:	295ed704 	addi	r5,r5,31580
 4013898:	40142ac1 	jmpi	40142ac <_fwalk_reent>

0401389c <__sinit>:
 401389c:	20800e17 	ldw	r2,56(r4)
 40138a0:	10000126 	beq	r2,zero,40138a8 <__sinit+0xc>
 40138a4:	f800283a 	ret
 40138a8:	40135501 	jmpi	4013550 <__sinit.part.1>

040138ac <__sfp_lock_acquire>:
 40138ac:	f800283a 	ret

040138b0 <__sfp_lock_release>:
 40138b0:	f800283a 	ret

040138b4 <__sinit_lock_acquire>:
 40138b4:	f800283a 	ret

040138b8 <__sinit_lock_release>:
 40138b8:	f800283a 	ret

040138bc <__fp_lock_all>:
 40138bc:	008100f4 	movhi	r2,1027
 40138c0:	10a96004 	addi	r2,r2,-23168
 40138c4:	11000017 	ldw	r4,0(r2)
 40138c8:	01410074 	movhi	r5,1025
 40138cc:	294dbb04 	addi	r5,r5,14060
 40138d0:	40141e81 	jmpi	40141e8 <_fwalk>

040138d4 <__fp_unlock_all>:
 40138d4:	008100f4 	movhi	r2,1027
 40138d8:	10a96004 	addi	r2,r2,-23168
 40138dc:	11000017 	ldw	r4,0(r2)
 40138e0:	01410074 	movhi	r5,1025
 40138e4:	294d4f04 	addi	r5,r5,13628
 40138e8:	40141e81 	jmpi	40141e8 <_fwalk>

040138ec <_malloc_trim_r>:
 40138ec:	defffb04 	addi	sp,sp,-20
 40138f0:	dcc00315 	stw	r19,12(sp)
 40138f4:	04c100b4 	movhi	r19,1026
 40138f8:	dc800215 	stw	r18,8(sp)
 40138fc:	dc400115 	stw	r17,4(sp)
 4013900:	dc000015 	stw	r16,0(sp)
 4013904:	dfc00415 	stw	ra,16(sp)
 4013908:	2821883a 	mov	r16,r5
 401390c:	9cde0304 	addi	r19,r19,30732
 4013910:	2025883a 	mov	r18,r4
 4013914:	401bd1c0 	call	401bd1c <__malloc_lock>
 4013918:	98800217 	ldw	r2,8(r19)
 401391c:	14400117 	ldw	r17,4(r2)
 4013920:	00bfff04 	movi	r2,-4
 4013924:	88a2703a 	and	r17,r17,r2
 4013928:	8c21c83a 	sub	r16,r17,r16
 401392c:	8403fbc4 	addi	r16,r16,4079
 4013930:	8020d33a 	srli	r16,r16,12
 4013934:	0083ffc4 	movi	r2,4095
 4013938:	843fffc4 	addi	r16,r16,-1
 401393c:	8020933a 	slli	r16,r16,12
 4013940:	1400060e 	bge	r2,r16,401395c <_malloc_trim_r+0x70>
 4013944:	000b883a 	mov	r5,zero
 4013948:	9009883a 	mov	r4,r18
 401394c:	400f0080 	call	400f008 <_sbrk_r>
 4013950:	98c00217 	ldw	r3,8(r19)
 4013954:	1c47883a 	add	r3,r3,r17
 4013958:	10c00a26 	beq	r2,r3,4013984 <_malloc_trim_r+0x98>
 401395c:	9009883a 	mov	r4,r18
 4013960:	401bd400 	call	401bd40 <__malloc_unlock>
 4013964:	0005883a 	mov	r2,zero
 4013968:	dfc00417 	ldw	ra,16(sp)
 401396c:	dcc00317 	ldw	r19,12(sp)
 4013970:	dc800217 	ldw	r18,8(sp)
 4013974:	dc400117 	ldw	r17,4(sp)
 4013978:	dc000017 	ldw	r16,0(sp)
 401397c:	dec00504 	addi	sp,sp,20
 4013980:	f800283a 	ret
 4013984:	040bc83a 	sub	r5,zero,r16
 4013988:	9009883a 	mov	r4,r18
 401398c:	400f0080 	call	400f008 <_sbrk_r>
 4013990:	00ffffc4 	movi	r3,-1
 4013994:	10c00d26 	beq	r2,r3,40139cc <_malloc_trim_r+0xe0>
 4013998:	00c100f4 	movhi	r3,1027
 401399c:	18f63504 	addi	r3,r3,-10028
 40139a0:	18800017 	ldw	r2,0(r3)
 40139a4:	99000217 	ldw	r4,8(r19)
 40139a8:	8c23c83a 	sub	r17,r17,r16
 40139ac:	8c400054 	ori	r17,r17,1
 40139b0:	1421c83a 	sub	r16,r2,r16
 40139b4:	24400115 	stw	r17,4(r4)
 40139b8:	9009883a 	mov	r4,r18
 40139bc:	1c000015 	stw	r16,0(r3)
 40139c0:	401bd400 	call	401bd40 <__malloc_unlock>
 40139c4:	00800044 	movi	r2,1
 40139c8:	003fe706 	br	4013968 <__alt_mem_onchip_memory2_0+0xfc0126e8>
 40139cc:	000b883a 	mov	r5,zero
 40139d0:	9009883a 	mov	r4,r18
 40139d4:	400f0080 	call	400f008 <_sbrk_r>
 40139d8:	99000217 	ldw	r4,8(r19)
 40139dc:	014003c4 	movi	r5,15
 40139e0:	1107c83a 	sub	r3,r2,r4
 40139e4:	28ffdd0e 	bge	r5,r3,401395c <__alt_mem_onchip_memory2_0+0xfc0126dc>
 40139e8:	014100f4 	movhi	r5,1027
 40139ec:	29696104 	addi	r5,r5,-23164
 40139f0:	29400017 	ldw	r5,0(r5)
 40139f4:	18c00054 	ori	r3,r3,1
 40139f8:	20c00115 	stw	r3,4(r4)
 40139fc:	00c100f4 	movhi	r3,1027
 4013a00:	1145c83a 	sub	r2,r2,r5
 4013a04:	18f63504 	addi	r3,r3,-10028
 4013a08:	18800015 	stw	r2,0(r3)
 4013a0c:	003fd306 	br	401395c <__alt_mem_onchip_memory2_0+0xfc0126dc>

04013a10 <_free_r>:
 4013a10:	28004126 	beq	r5,zero,4013b18 <_free_r+0x108>
 4013a14:	defffd04 	addi	sp,sp,-12
 4013a18:	dc400115 	stw	r17,4(sp)
 4013a1c:	dc000015 	stw	r16,0(sp)
 4013a20:	2023883a 	mov	r17,r4
 4013a24:	2821883a 	mov	r16,r5
 4013a28:	dfc00215 	stw	ra,8(sp)
 4013a2c:	401bd1c0 	call	401bd1c <__malloc_lock>
 4013a30:	81ffff17 	ldw	r7,-4(r16)
 4013a34:	00bfff84 	movi	r2,-2
 4013a38:	010100b4 	movhi	r4,1026
 4013a3c:	81bffe04 	addi	r6,r16,-8
 4013a40:	3884703a 	and	r2,r7,r2
 4013a44:	211e0304 	addi	r4,r4,30732
 4013a48:	308b883a 	add	r5,r6,r2
 4013a4c:	2a400117 	ldw	r9,4(r5)
 4013a50:	22000217 	ldw	r8,8(r4)
 4013a54:	00ffff04 	movi	r3,-4
 4013a58:	48c6703a 	and	r3,r9,r3
 4013a5c:	2a005726 	beq	r5,r8,4013bbc <_free_r+0x1ac>
 4013a60:	28c00115 	stw	r3,4(r5)
 4013a64:	39c0004c 	andi	r7,r7,1
 4013a68:	3800091e 	bne	r7,zero,4013a90 <_free_r+0x80>
 4013a6c:	823ffe17 	ldw	r8,-8(r16)
 4013a70:	22400204 	addi	r9,r4,8
 4013a74:	320dc83a 	sub	r6,r6,r8
 4013a78:	31c00217 	ldw	r7,8(r6)
 4013a7c:	1205883a 	add	r2,r2,r8
 4013a80:	3a406526 	beq	r7,r9,4013c18 <_free_r+0x208>
 4013a84:	32000317 	ldw	r8,12(r6)
 4013a88:	3a000315 	stw	r8,12(r7)
 4013a8c:	41c00215 	stw	r7,8(r8)
 4013a90:	28cf883a 	add	r7,r5,r3
 4013a94:	39c00117 	ldw	r7,4(r7)
 4013a98:	39c0004c 	andi	r7,r7,1
 4013a9c:	38003a26 	beq	r7,zero,4013b88 <_free_r+0x178>
 4013aa0:	10c00054 	ori	r3,r2,1
 4013aa4:	30c00115 	stw	r3,4(r6)
 4013aa8:	3087883a 	add	r3,r6,r2
 4013aac:	18800015 	stw	r2,0(r3)
 4013ab0:	00c07fc4 	movi	r3,511
 4013ab4:	18801936 	bltu	r3,r2,4013b1c <_free_r+0x10c>
 4013ab8:	1004d0fa 	srli	r2,r2,3
 4013abc:	01c00044 	movi	r7,1
 4013ac0:	21400117 	ldw	r5,4(r4)
 4013ac4:	10c00044 	addi	r3,r2,1
 4013ac8:	18c7883a 	add	r3,r3,r3
 4013acc:	1005d0ba 	srai	r2,r2,2
 4013ad0:	18c7883a 	add	r3,r3,r3
 4013ad4:	18c7883a 	add	r3,r3,r3
 4013ad8:	1907883a 	add	r3,r3,r4
 4013adc:	3884983a 	sll	r2,r7,r2
 4013ae0:	19c00017 	ldw	r7,0(r3)
 4013ae4:	1a3ffe04 	addi	r8,r3,-8
 4013ae8:	1144b03a 	or	r2,r2,r5
 4013aec:	32000315 	stw	r8,12(r6)
 4013af0:	31c00215 	stw	r7,8(r6)
 4013af4:	20800115 	stw	r2,4(r4)
 4013af8:	19800015 	stw	r6,0(r3)
 4013afc:	39800315 	stw	r6,12(r7)
 4013b00:	8809883a 	mov	r4,r17
 4013b04:	dfc00217 	ldw	ra,8(sp)
 4013b08:	dc400117 	ldw	r17,4(sp)
 4013b0c:	dc000017 	ldw	r16,0(sp)
 4013b10:	dec00304 	addi	sp,sp,12
 4013b14:	401bd401 	jmpi	401bd40 <__malloc_unlock>
 4013b18:	f800283a 	ret
 4013b1c:	100ad27a 	srli	r5,r2,9
 4013b20:	00c00104 	movi	r3,4
 4013b24:	19404a36 	bltu	r3,r5,4013c50 <_free_r+0x240>
 4013b28:	100ad1ba 	srli	r5,r2,6
 4013b2c:	28c00e44 	addi	r3,r5,57
 4013b30:	18c7883a 	add	r3,r3,r3
 4013b34:	29400e04 	addi	r5,r5,56
 4013b38:	18c7883a 	add	r3,r3,r3
 4013b3c:	18c7883a 	add	r3,r3,r3
 4013b40:	1909883a 	add	r4,r3,r4
 4013b44:	20c00017 	ldw	r3,0(r4)
 4013b48:	01c100b4 	movhi	r7,1026
 4013b4c:	213ffe04 	addi	r4,r4,-8
 4013b50:	39de0304 	addi	r7,r7,30732
 4013b54:	20c04426 	beq	r4,r3,4013c68 <_free_r+0x258>
 4013b58:	01ffff04 	movi	r7,-4
 4013b5c:	19400117 	ldw	r5,4(r3)
 4013b60:	29ca703a 	and	r5,r5,r7
 4013b64:	1140022e 	bgeu	r2,r5,4013b70 <_free_r+0x160>
 4013b68:	18c00217 	ldw	r3,8(r3)
 4013b6c:	20fffb1e 	bne	r4,r3,4013b5c <__alt_mem_onchip_memory2_0+0xfc0128dc>
 4013b70:	19000317 	ldw	r4,12(r3)
 4013b74:	31000315 	stw	r4,12(r6)
 4013b78:	30c00215 	stw	r3,8(r6)
 4013b7c:	21800215 	stw	r6,8(r4)
 4013b80:	19800315 	stw	r6,12(r3)
 4013b84:	003fde06 	br	4013b00 <__alt_mem_onchip_memory2_0+0xfc012880>
 4013b88:	29c00217 	ldw	r7,8(r5)
 4013b8c:	10c5883a 	add	r2,r2,r3
 4013b90:	00c100b4 	movhi	r3,1026
 4013b94:	18de0504 	addi	r3,r3,30740
 4013b98:	38c03b26 	beq	r7,r3,4013c88 <_free_r+0x278>
 4013b9c:	2a000317 	ldw	r8,12(r5)
 4013ba0:	11400054 	ori	r5,r2,1
 4013ba4:	3087883a 	add	r3,r6,r2
 4013ba8:	3a000315 	stw	r8,12(r7)
 4013bac:	41c00215 	stw	r7,8(r8)
 4013bb0:	31400115 	stw	r5,4(r6)
 4013bb4:	18800015 	stw	r2,0(r3)
 4013bb8:	003fbd06 	br	4013ab0 <__alt_mem_onchip_memory2_0+0xfc012830>
 4013bbc:	39c0004c 	andi	r7,r7,1
 4013bc0:	10c5883a 	add	r2,r2,r3
 4013bc4:	3800071e 	bne	r7,zero,4013be4 <_free_r+0x1d4>
 4013bc8:	81fffe17 	ldw	r7,-8(r16)
 4013bcc:	31cdc83a 	sub	r6,r6,r7
 4013bd0:	30c00317 	ldw	r3,12(r6)
 4013bd4:	31400217 	ldw	r5,8(r6)
 4013bd8:	11c5883a 	add	r2,r2,r7
 4013bdc:	28c00315 	stw	r3,12(r5)
 4013be0:	19400215 	stw	r5,8(r3)
 4013be4:	10c00054 	ori	r3,r2,1
 4013be8:	30c00115 	stw	r3,4(r6)
 4013bec:	00c100f4 	movhi	r3,1027
 4013bf0:	18e96204 	addi	r3,r3,-23160
 4013bf4:	18c00017 	ldw	r3,0(r3)
 4013bf8:	21800215 	stw	r6,8(r4)
 4013bfc:	10ffc036 	bltu	r2,r3,4013b00 <__alt_mem_onchip_memory2_0+0xfc012880>
 4013c00:	008100f4 	movhi	r2,1027
 4013c04:	10b5f104 	addi	r2,r2,-10300
 4013c08:	11400017 	ldw	r5,0(r2)
 4013c0c:	8809883a 	mov	r4,r17
 4013c10:	40138ec0 	call	40138ec <_malloc_trim_r>
 4013c14:	003fba06 	br	4013b00 <__alt_mem_onchip_memory2_0+0xfc012880>
 4013c18:	28c9883a 	add	r4,r5,r3
 4013c1c:	21000117 	ldw	r4,4(r4)
 4013c20:	2100004c 	andi	r4,r4,1
 4013c24:	2000391e 	bne	r4,zero,4013d0c <_free_r+0x2fc>
 4013c28:	29c00217 	ldw	r7,8(r5)
 4013c2c:	29000317 	ldw	r4,12(r5)
 4013c30:	1885883a 	add	r2,r3,r2
 4013c34:	10c00054 	ori	r3,r2,1
 4013c38:	39000315 	stw	r4,12(r7)
 4013c3c:	21c00215 	stw	r7,8(r4)
 4013c40:	30c00115 	stw	r3,4(r6)
 4013c44:	308d883a 	add	r6,r6,r2
 4013c48:	30800015 	stw	r2,0(r6)
 4013c4c:	003fac06 	br	4013b00 <__alt_mem_onchip_memory2_0+0xfc012880>
 4013c50:	00c00504 	movi	r3,20
 4013c54:	19401536 	bltu	r3,r5,4013cac <_free_r+0x29c>
 4013c58:	28c01704 	addi	r3,r5,92
 4013c5c:	18c7883a 	add	r3,r3,r3
 4013c60:	294016c4 	addi	r5,r5,91
 4013c64:	003fb406 	br	4013b38 <__alt_mem_onchip_memory2_0+0xfc0128b8>
 4013c68:	280bd0ba 	srai	r5,r5,2
 4013c6c:	00c00044 	movi	r3,1
 4013c70:	38800117 	ldw	r2,4(r7)
 4013c74:	194a983a 	sll	r5,r3,r5
 4013c78:	2007883a 	mov	r3,r4
 4013c7c:	2884b03a 	or	r2,r5,r2
 4013c80:	38800115 	stw	r2,4(r7)
 4013c84:	003fbb06 	br	4013b74 <__alt_mem_onchip_memory2_0+0xfc0128f4>
 4013c88:	21800515 	stw	r6,20(r4)
 4013c8c:	21800415 	stw	r6,16(r4)
 4013c90:	10c00054 	ori	r3,r2,1
 4013c94:	31c00315 	stw	r7,12(r6)
 4013c98:	31c00215 	stw	r7,8(r6)
 4013c9c:	30c00115 	stw	r3,4(r6)
 4013ca0:	308d883a 	add	r6,r6,r2
 4013ca4:	30800015 	stw	r2,0(r6)
 4013ca8:	003f9506 	br	4013b00 <__alt_mem_onchip_memory2_0+0xfc012880>
 4013cac:	00c01504 	movi	r3,84
 4013cb0:	19400536 	bltu	r3,r5,4013cc8 <_free_r+0x2b8>
 4013cb4:	100ad33a 	srli	r5,r2,12
 4013cb8:	28c01bc4 	addi	r3,r5,111
 4013cbc:	18c7883a 	add	r3,r3,r3
 4013cc0:	29401b84 	addi	r5,r5,110
 4013cc4:	003f9c06 	br	4013b38 <__alt_mem_onchip_memory2_0+0xfc0128b8>
 4013cc8:	00c05504 	movi	r3,340
 4013ccc:	19400536 	bltu	r3,r5,4013ce4 <_free_r+0x2d4>
 4013cd0:	100ad3fa 	srli	r5,r2,15
 4013cd4:	28c01e04 	addi	r3,r5,120
 4013cd8:	18c7883a 	add	r3,r3,r3
 4013cdc:	29401dc4 	addi	r5,r5,119
 4013ce0:	003f9506 	br	4013b38 <__alt_mem_onchip_memory2_0+0xfc0128b8>
 4013ce4:	00c15504 	movi	r3,1364
 4013ce8:	19400536 	bltu	r3,r5,4013d00 <_free_r+0x2f0>
 4013cec:	100ad4ba 	srli	r5,r2,18
 4013cf0:	28c01f44 	addi	r3,r5,125
 4013cf4:	18c7883a 	add	r3,r3,r3
 4013cf8:	29401f04 	addi	r5,r5,124
 4013cfc:	003f8e06 	br	4013b38 <__alt_mem_onchip_memory2_0+0xfc0128b8>
 4013d00:	00c03f84 	movi	r3,254
 4013d04:	01401f84 	movi	r5,126
 4013d08:	003f8b06 	br	4013b38 <__alt_mem_onchip_memory2_0+0xfc0128b8>
 4013d0c:	10c00054 	ori	r3,r2,1
 4013d10:	30c00115 	stw	r3,4(r6)
 4013d14:	308d883a 	add	r6,r6,r2
 4013d18:	30800015 	stw	r2,0(r6)
 4013d1c:	003f7806 	br	4013b00 <__alt_mem_onchip_memory2_0+0xfc012880>

04013d20 <__sfvwrite_r>:
 4013d20:	30800217 	ldw	r2,8(r6)
 4013d24:	10006726 	beq	r2,zero,4013ec4 <__sfvwrite_r+0x1a4>
 4013d28:	28c0030b 	ldhu	r3,12(r5)
 4013d2c:	defff404 	addi	sp,sp,-48
 4013d30:	dd400715 	stw	r21,28(sp)
 4013d34:	dd000615 	stw	r20,24(sp)
 4013d38:	dc000215 	stw	r16,8(sp)
 4013d3c:	dfc00b15 	stw	ra,44(sp)
 4013d40:	df000a15 	stw	fp,40(sp)
 4013d44:	ddc00915 	stw	r23,36(sp)
 4013d48:	dd800815 	stw	r22,32(sp)
 4013d4c:	dcc00515 	stw	r19,20(sp)
 4013d50:	dc800415 	stw	r18,16(sp)
 4013d54:	dc400315 	stw	r17,12(sp)
 4013d58:	1880020c 	andi	r2,r3,8
 4013d5c:	2821883a 	mov	r16,r5
 4013d60:	202b883a 	mov	r21,r4
 4013d64:	3029883a 	mov	r20,r6
 4013d68:	10002726 	beq	r2,zero,4013e08 <__sfvwrite_r+0xe8>
 4013d6c:	28800417 	ldw	r2,16(r5)
 4013d70:	10002526 	beq	r2,zero,4013e08 <__sfvwrite_r+0xe8>
 4013d74:	1880008c 	andi	r2,r3,2
 4013d78:	a4400017 	ldw	r17,0(r20)
 4013d7c:	10002a26 	beq	r2,zero,4013e28 <__sfvwrite_r+0x108>
 4013d80:	05a00034 	movhi	r22,32768
 4013d84:	0027883a 	mov	r19,zero
 4013d88:	0025883a 	mov	r18,zero
 4013d8c:	b5bf0004 	addi	r22,r22,-1024
 4013d90:	980d883a 	mov	r6,r19
 4013d94:	a809883a 	mov	r4,r21
 4013d98:	90004626 	beq	r18,zero,4013eb4 <__sfvwrite_r+0x194>
 4013d9c:	900f883a 	mov	r7,r18
 4013da0:	b480022e 	bgeu	r22,r18,4013dac <__sfvwrite_r+0x8c>
 4013da4:	01e00034 	movhi	r7,32768
 4013da8:	39ff0004 	addi	r7,r7,-1024
 4013dac:	80800917 	ldw	r2,36(r16)
 4013db0:	81400717 	ldw	r5,28(r16)
 4013db4:	103ee83a 	callr	r2
 4013db8:	00805a0e 	bge	zero,r2,4013f24 <__sfvwrite_r+0x204>
 4013dbc:	a0c00217 	ldw	r3,8(r20)
 4013dc0:	98a7883a 	add	r19,r19,r2
 4013dc4:	90a5c83a 	sub	r18,r18,r2
 4013dc8:	1885c83a 	sub	r2,r3,r2
 4013dcc:	a0800215 	stw	r2,8(r20)
 4013dd0:	103fef1e 	bne	r2,zero,4013d90 <__alt_mem_onchip_memory2_0+0xfc012b10>
 4013dd4:	0005883a 	mov	r2,zero
 4013dd8:	dfc00b17 	ldw	ra,44(sp)
 4013ddc:	df000a17 	ldw	fp,40(sp)
 4013de0:	ddc00917 	ldw	r23,36(sp)
 4013de4:	dd800817 	ldw	r22,32(sp)
 4013de8:	dd400717 	ldw	r21,28(sp)
 4013dec:	dd000617 	ldw	r20,24(sp)
 4013df0:	dcc00517 	ldw	r19,20(sp)
 4013df4:	dc800417 	ldw	r18,16(sp)
 4013df8:	dc400317 	ldw	r17,12(sp)
 4013dfc:	dc000217 	ldw	r16,8(sp)
 4013e00:	dec00c04 	addi	sp,sp,48
 4013e04:	f800283a 	ret
 4013e08:	800b883a 	mov	r5,r16
 4013e0c:	a809883a 	mov	r4,r21
 4013e10:	40118900 	call	4011890 <__swsetup_r>
 4013e14:	1000ee1e 	bne	r2,zero,40141d0 <__sfvwrite_r+0x4b0>
 4013e18:	80c0030b 	ldhu	r3,12(r16)
 4013e1c:	a4400017 	ldw	r17,0(r20)
 4013e20:	1880008c 	andi	r2,r3,2
 4013e24:	103fd61e 	bne	r2,zero,4013d80 <__alt_mem_onchip_memory2_0+0xfc012b00>
 4013e28:	1880004c 	andi	r2,r3,1
 4013e2c:	1000421e 	bne	r2,zero,4013f38 <__sfvwrite_r+0x218>
 4013e30:	0039883a 	mov	fp,zero
 4013e34:	0025883a 	mov	r18,zero
 4013e38:	90001a26 	beq	r18,zero,4013ea4 <__sfvwrite_r+0x184>
 4013e3c:	1880800c 	andi	r2,r3,512
 4013e40:	84c00217 	ldw	r19,8(r16)
 4013e44:	10002126 	beq	r2,zero,4013ecc <__sfvwrite_r+0x1ac>
 4013e48:	982f883a 	mov	r23,r19
 4013e4c:	94c09636 	bltu	r18,r19,40140a8 <__sfvwrite_r+0x388>
 4013e50:	1881200c 	andi	r2,r3,1152
 4013e54:	1000a11e 	bne	r2,zero,40140dc <__sfvwrite_r+0x3bc>
 4013e58:	81000017 	ldw	r4,0(r16)
 4013e5c:	b80d883a 	mov	r6,r23
 4013e60:	e00b883a 	mov	r5,fp
 4013e64:	40146ec0 	call	40146ec <memmove>
 4013e68:	80c00217 	ldw	r3,8(r16)
 4013e6c:	81000017 	ldw	r4,0(r16)
 4013e70:	9005883a 	mov	r2,r18
 4013e74:	1ce7c83a 	sub	r19,r3,r19
 4013e78:	25cf883a 	add	r7,r4,r23
 4013e7c:	84c00215 	stw	r19,8(r16)
 4013e80:	81c00015 	stw	r7,0(r16)
 4013e84:	a0c00217 	ldw	r3,8(r20)
 4013e88:	e0b9883a 	add	fp,fp,r2
 4013e8c:	90a5c83a 	sub	r18,r18,r2
 4013e90:	18a7c83a 	sub	r19,r3,r2
 4013e94:	a4c00215 	stw	r19,8(r20)
 4013e98:	983fce26 	beq	r19,zero,4013dd4 <__alt_mem_onchip_memory2_0+0xfc012b54>
 4013e9c:	80c0030b 	ldhu	r3,12(r16)
 4013ea0:	903fe61e 	bne	r18,zero,4013e3c <__alt_mem_onchip_memory2_0+0xfc012bbc>
 4013ea4:	8f000017 	ldw	fp,0(r17)
 4013ea8:	8c800117 	ldw	r18,4(r17)
 4013eac:	8c400204 	addi	r17,r17,8
 4013eb0:	003fe106 	br	4013e38 <__alt_mem_onchip_memory2_0+0xfc012bb8>
 4013eb4:	8cc00017 	ldw	r19,0(r17)
 4013eb8:	8c800117 	ldw	r18,4(r17)
 4013ebc:	8c400204 	addi	r17,r17,8
 4013ec0:	003fb306 	br	4013d90 <__alt_mem_onchip_memory2_0+0xfc012b10>
 4013ec4:	0005883a 	mov	r2,zero
 4013ec8:	f800283a 	ret
 4013ecc:	81000017 	ldw	r4,0(r16)
 4013ed0:	80800417 	ldw	r2,16(r16)
 4013ed4:	11005a36 	bltu	r2,r4,4014040 <__sfvwrite_r+0x320>
 4013ed8:	85c00517 	ldw	r23,20(r16)
 4013edc:	95c05836 	bltu	r18,r23,4014040 <__sfvwrite_r+0x320>
 4013ee0:	00a00034 	movhi	r2,32768
 4013ee4:	10bfffc4 	addi	r2,r2,-1
 4013ee8:	9009883a 	mov	r4,r18
 4013eec:	1480012e 	bgeu	r2,r18,4013ef4 <__sfvwrite_r+0x1d4>
 4013ef0:	1009883a 	mov	r4,r2
 4013ef4:	b80b883a 	mov	r5,r23
 4013ef8:	400d1100 	call	400d110 <__divsi3>
 4013efc:	b80b883a 	mov	r5,r23
 4013f00:	1009883a 	mov	r4,r2
 4013f04:	400d2c40 	call	400d2c4 <__mulsi3>
 4013f08:	81400717 	ldw	r5,28(r16)
 4013f0c:	80c00917 	ldw	r3,36(r16)
 4013f10:	100f883a 	mov	r7,r2
 4013f14:	e00d883a 	mov	r6,fp
 4013f18:	a809883a 	mov	r4,r21
 4013f1c:	183ee83a 	callr	r3
 4013f20:	00bfd816 	blt	zero,r2,4013e84 <__alt_mem_onchip_memory2_0+0xfc012c04>
 4013f24:	8080030b 	ldhu	r2,12(r16)
 4013f28:	10801014 	ori	r2,r2,64
 4013f2c:	8080030d 	sth	r2,12(r16)
 4013f30:	00bfffc4 	movi	r2,-1
 4013f34:	003fa806 	br	4013dd8 <__alt_mem_onchip_memory2_0+0xfc012b58>
 4013f38:	0027883a 	mov	r19,zero
 4013f3c:	0011883a 	mov	r8,zero
 4013f40:	0039883a 	mov	fp,zero
 4013f44:	0025883a 	mov	r18,zero
 4013f48:	90001f26 	beq	r18,zero,4013fc8 <__sfvwrite_r+0x2a8>
 4013f4c:	40005a26 	beq	r8,zero,40140b8 <__sfvwrite_r+0x398>
 4013f50:	982d883a 	mov	r22,r19
 4013f54:	94c0012e 	bgeu	r18,r19,4013f5c <__sfvwrite_r+0x23c>
 4013f58:	902d883a 	mov	r22,r18
 4013f5c:	81000017 	ldw	r4,0(r16)
 4013f60:	80800417 	ldw	r2,16(r16)
 4013f64:	b02f883a 	mov	r23,r22
 4013f68:	81c00517 	ldw	r7,20(r16)
 4013f6c:	1100032e 	bgeu	r2,r4,4013f7c <__sfvwrite_r+0x25c>
 4013f70:	80c00217 	ldw	r3,8(r16)
 4013f74:	38c7883a 	add	r3,r7,r3
 4013f78:	1d801816 	blt	r3,r22,4013fdc <__sfvwrite_r+0x2bc>
 4013f7c:	b1c03e16 	blt	r22,r7,4014078 <__sfvwrite_r+0x358>
 4013f80:	80800917 	ldw	r2,36(r16)
 4013f84:	81400717 	ldw	r5,28(r16)
 4013f88:	e00d883a 	mov	r6,fp
 4013f8c:	da000115 	stw	r8,4(sp)
 4013f90:	a809883a 	mov	r4,r21
 4013f94:	103ee83a 	callr	r2
 4013f98:	102f883a 	mov	r23,r2
 4013f9c:	da000117 	ldw	r8,4(sp)
 4013fa0:	00bfe00e 	bge	zero,r2,4013f24 <__alt_mem_onchip_memory2_0+0xfc012ca4>
 4013fa4:	9de7c83a 	sub	r19,r19,r23
 4013fa8:	98001f26 	beq	r19,zero,4014028 <__sfvwrite_r+0x308>
 4013fac:	a0800217 	ldw	r2,8(r20)
 4013fb0:	e5f9883a 	add	fp,fp,r23
 4013fb4:	95e5c83a 	sub	r18,r18,r23
 4013fb8:	15efc83a 	sub	r23,r2,r23
 4013fbc:	a5c00215 	stw	r23,8(r20)
 4013fc0:	b83f8426 	beq	r23,zero,4013dd4 <__alt_mem_onchip_memory2_0+0xfc012b54>
 4013fc4:	903fe11e 	bne	r18,zero,4013f4c <__alt_mem_onchip_memory2_0+0xfc012ccc>
 4013fc8:	8f000017 	ldw	fp,0(r17)
 4013fcc:	8c800117 	ldw	r18,4(r17)
 4013fd0:	0011883a 	mov	r8,zero
 4013fd4:	8c400204 	addi	r17,r17,8
 4013fd8:	003fdb06 	br	4013f48 <__alt_mem_onchip_memory2_0+0xfc012cc8>
 4013fdc:	180d883a 	mov	r6,r3
 4013fe0:	e00b883a 	mov	r5,fp
 4013fe4:	da000115 	stw	r8,4(sp)
 4013fe8:	d8c00015 	stw	r3,0(sp)
 4013fec:	40146ec0 	call	40146ec <memmove>
 4013ff0:	d8c00017 	ldw	r3,0(sp)
 4013ff4:	80800017 	ldw	r2,0(r16)
 4013ff8:	800b883a 	mov	r5,r16
 4013ffc:	a809883a 	mov	r4,r21
 4014000:	10c5883a 	add	r2,r2,r3
 4014004:	80800015 	stw	r2,0(r16)
 4014008:	d8c00015 	stw	r3,0(sp)
 401400c:	40134b00 	call	40134b0 <_fflush_r>
 4014010:	d8c00017 	ldw	r3,0(sp)
 4014014:	da000117 	ldw	r8,4(sp)
 4014018:	103fc21e 	bne	r2,zero,4013f24 <__alt_mem_onchip_memory2_0+0xfc012ca4>
 401401c:	182f883a 	mov	r23,r3
 4014020:	9de7c83a 	sub	r19,r19,r23
 4014024:	983fe11e 	bne	r19,zero,4013fac <__alt_mem_onchip_memory2_0+0xfc012d2c>
 4014028:	800b883a 	mov	r5,r16
 401402c:	a809883a 	mov	r4,r21
 4014030:	40134b00 	call	40134b0 <_fflush_r>
 4014034:	103fbb1e 	bne	r2,zero,4013f24 <__alt_mem_onchip_memory2_0+0xfc012ca4>
 4014038:	0011883a 	mov	r8,zero
 401403c:	003fdb06 	br	4013fac <__alt_mem_onchip_memory2_0+0xfc012d2c>
 4014040:	94c0012e 	bgeu	r18,r19,4014048 <__sfvwrite_r+0x328>
 4014044:	9027883a 	mov	r19,r18
 4014048:	980d883a 	mov	r6,r19
 401404c:	e00b883a 	mov	r5,fp
 4014050:	40146ec0 	call	40146ec <memmove>
 4014054:	80800217 	ldw	r2,8(r16)
 4014058:	80c00017 	ldw	r3,0(r16)
 401405c:	14c5c83a 	sub	r2,r2,r19
 4014060:	1cc7883a 	add	r3,r3,r19
 4014064:	80800215 	stw	r2,8(r16)
 4014068:	80c00015 	stw	r3,0(r16)
 401406c:	10004326 	beq	r2,zero,401417c <__sfvwrite_r+0x45c>
 4014070:	9805883a 	mov	r2,r19
 4014074:	003f8306 	br	4013e84 <__alt_mem_onchip_memory2_0+0xfc012c04>
 4014078:	b00d883a 	mov	r6,r22
 401407c:	e00b883a 	mov	r5,fp
 4014080:	da000115 	stw	r8,4(sp)
 4014084:	40146ec0 	call	40146ec <memmove>
 4014088:	80800217 	ldw	r2,8(r16)
 401408c:	80c00017 	ldw	r3,0(r16)
 4014090:	da000117 	ldw	r8,4(sp)
 4014094:	1585c83a 	sub	r2,r2,r22
 4014098:	1dad883a 	add	r22,r3,r22
 401409c:	80800215 	stw	r2,8(r16)
 40140a0:	85800015 	stw	r22,0(r16)
 40140a4:	003fbf06 	br	4013fa4 <__alt_mem_onchip_memory2_0+0xfc012d24>
 40140a8:	81000017 	ldw	r4,0(r16)
 40140ac:	9027883a 	mov	r19,r18
 40140b0:	902f883a 	mov	r23,r18
 40140b4:	003f6906 	br	4013e5c <__alt_mem_onchip_memory2_0+0xfc012bdc>
 40140b8:	900d883a 	mov	r6,r18
 40140bc:	01400284 	movi	r5,10
 40140c0:	e009883a 	mov	r4,fp
 40140c4:	40146080 	call	4014608 <memchr>
 40140c8:	10003e26 	beq	r2,zero,40141c4 <__sfvwrite_r+0x4a4>
 40140cc:	10800044 	addi	r2,r2,1
 40140d0:	1727c83a 	sub	r19,r2,fp
 40140d4:	02000044 	movi	r8,1
 40140d8:	003f9d06 	br	4013f50 <__alt_mem_onchip_memory2_0+0xfc012cd0>
 40140dc:	80800517 	ldw	r2,20(r16)
 40140e0:	81400417 	ldw	r5,16(r16)
 40140e4:	81c00017 	ldw	r7,0(r16)
 40140e8:	10a7883a 	add	r19,r2,r2
 40140ec:	9885883a 	add	r2,r19,r2
 40140f0:	1026d7fa 	srli	r19,r2,31
 40140f4:	396dc83a 	sub	r22,r7,r5
 40140f8:	b1000044 	addi	r4,r22,1
 40140fc:	9885883a 	add	r2,r19,r2
 4014100:	1027d07a 	srai	r19,r2,1
 4014104:	2485883a 	add	r2,r4,r18
 4014108:	980d883a 	mov	r6,r19
 401410c:	9880022e 	bgeu	r19,r2,4014118 <__sfvwrite_r+0x3f8>
 4014110:	1027883a 	mov	r19,r2
 4014114:	100d883a 	mov	r6,r2
 4014118:	18c1000c 	andi	r3,r3,1024
 401411c:	18001c26 	beq	r3,zero,4014190 <__sfvwrite_r+0x470>
 4014120:	300b883a 	mov	r5,r6
 4014124:	a809883a 	mov	r4,r21
 4014128:	400e42c0 	call	400e42c <_malloc_r>
 401412c:	102f883a 	mov	r23,r2
 4014130:	10002926 	beq	r2,zero,40141d8 <__sfvwrite_r+0x4b8>
 4014134:	81400417 	ldw	r5,16(r16)
 4014138:	b00d883a 	mov	r6,r22
 401413c:	1009883a 	mov	r4,r2
 4014140:	400ec380 	call	400ec38 <memcpy>
 4014144:	8080030b 	ldhu	r2,12(r16)
 4014148:	00fedfc4 	movi	r3,-1153
 401414c:	10c4703a 	and	r2,r2,r3
 4014150:	10802014 	ori	r2,r2,128
 4014154:	8080030d 	sth	r2,12(r16)
 4014158:	bd89883a 	add	r4,r23,r22
 401415c:	9d8fc83a 	sub	r7,r19,r22
 4014160:	85c00415 	stw	r23,16(r16)
 4014164:	84c00515 	stw	r19,20(r16)
 4014168:	81000015 	stw	r4,0(r16)
 401416c:	9027883a 	mov	r19,r18
 4014170:	81c00215 	stw	r7,8(r16)
 4014174:	902f883a 	mov	r23,r18
 4014178:	003f3806 	br	4013e5c <__alt_mem_onchip_memory2_0+0xfc012bdc>
 401417c:	800b883a 	mov	r5,r16
 4014180:	a809883a 	mov	r4,r21
 4014184:	40134b00 	call	40134b0 <_fflush_r>
 4014188:	103fb926 	beq	r2,zero,4014070 <__alt_mem_onchip_memory2_0+0xfc012df0>
 401418c:	003f6506 	br	4013f24 <__alt_mem_onchip_memory2_0+0xfc012ca4>
 4014190:	a809883a 	mov	r4,r21
 4014194:	4015a680 	call	4015a68 <_realloc_r>
 4014198:	102f883a 	mov	r23,r2
 401419c:	103fee1e 	bne	r2,zero,4014158 <__alt_mem_onchip_memory2_0+0xfc012ed8>
 40141a0:	81400417 	ldw	r5,16(r16)
 40141a4:	a809883a 	mov	r4,r21
 40141a8:	4013a100 	call	4013a10 <_free_r>
 40141ac:	8080030b 	ldhu	r2,12(r16)
 40141b0:	00ffdfc4 	movi	r3,-129
 40141b4:	1884703a 	and	r2,r3,r2
 40141b8:	00c00304 	movi	r3,12
 40141bc:	a8c00015 	stw	r3,0(r21)
 40141c0:	003f5906 	br	4013f28 <__alt_mem_onchip_memory2_0+0xfc012ca8>
 40141c4:	94c00044 	addi	r19,r18,1
 40141c8:	02000044 	movi	r8,1
 40141cc:	003f6006 	br	4013f50 <__alt_mem_onchip_memory2_0+0xfc012cd0>
 40141d0:	00bfffc4 	movi	r2,-1
 40141d4:	003f0006 	br	4013dd8 <__alt_mem_onchip_memory2_0+0xfc012b58>
 40141d8:	00800304 	movi	r2,12
 40141dc:	a8800015 	stw	r2,0(r21)
 40141e0:	8080030b 	ldhu	r2,12(r16)
 40141e4:	003f5006 	br	4013f28 <__alt_mem_onchip_memory2_0+0xfc012ca8>

040141e8 <_fwalk>:
 40141e8:	defff704 	addi	sp,sp,-36
 40141ec:	dd000415 	stw	r20,16(sp)
 40141f0:	dfc00815 	stw	ra,32(sp)
 40141f4:	ddc00715 	stw	r23,28(sp)
 40141f8:	dd800615 	stw	r22,24(sp)
 40141fc:	dd400515 	stw	r21,20(sp)
 4014200:	dcc00315 	stw	r19,12(sp)
 4014204:	dc800215 	stw	r18,8(sp)
 4014208:	dc400115 	stw	r17,4(sp)
 401420c:	dc000015 	stw	r16,0(sp)
 4014210:	2500b804 	addi	r20,r4,736
 4014214:	a0002326 	beq	r20,zero,40142a4 <_fwalk+0xbc>
 4014218:	282b883a 	mov	r21,r5
 401421c:	002f883a 	mov	r23,zero
 4014220:	05800044 	movi	r22,1
 4014224:	04ffffc4 	movi	r19,-1
 4014228:	a4400117 	ldw	r17,4(r20)
 401422c:	a4800217 	ldw	r18,8(r20)
 4014230:	8c7fffc4 	addi	r17,r17,-1
 4014234:	88000d16 	blt	r17,zero,401426c <_fwalk+0x84>
 4014238:	94000304 	addi	r16,r18,12
 401423c:	94800384 	addi	r18,r18,14
 4014240:	8080000b 	ldhu	r2,0(r16)
 4014244:	8c7fffc4 	addi	r17,r17,-1
 4014248:	813ffd04 	addi	r4,r16,-12
 401424c:	b080042e 	bgeu	r22,r2,4014260 <_fwalk+0x78>
 4014250:	9080000f 	ldh	r2,0(r18)
 4014254:	14c00226 	beq	r2,r19,4014260 <_fwalk+0x78>
 4014258:	a83ee83a 	callr	r21
 401425c:	b8aeb03a 	or	r23,r23,r2
 4014260:	84001a04 	addi	r16,r16,104
 4014264:	94801a04 	addi	r18,r18,104
 4014268:	8cfff51e 	bne	r17,r19,4014240 <__alt_mem_onchip_memory2_0+0xfc012fc0>
 401426c:	a5000017 	ldw	r20,0(r20)
 4014270:	a03fed1e 	bne	r20,zero,4014228 <__alt_mem_onchip_memory2_0+0xfc012fa8>
 4014274:	b805883a 	mov	r2,r23
 4014278:	dfc00817 	ldw	ra,32(sp)
 401427c:	ddc00717 	ldw	r23,28(sp)
 4014280:	dd800617 	ldw	r22,24(sp)
 4014284:	dd400517 	ldw	r21,20(sp)
 4014288:	dd000417 	ldw	r20,16(sp)
 401428c:	dcc00317 	ldw	r19,12(sp)
 4014290:	dc800217 	ldw	r18,8(sp)
 4014294:	dc400117 	ldw	r17,4(sp)
 4014298:	dc000017 	ldw	r16,0(sp)
 401429c:	dec00904 	addi	sp,sp,36
 40142a0:	f800283a 	ret
 40142a4:	002f883a 	mov	r23,zero
 40142a8:	003ff206 	br	4014274 <__alt_mem_onchip_memory2_0+0xfc012ff4>

040142ac <_fwalk_reent>:
 40142ac:	defff704 	addi	sp,sp,-36
 40142b0:	dd000415 	stw	r20,16(sp)
 40142b4:	dfc00815 	stw	ra,32(sp)
 40142b8:	ddc00715 	stw	r23,28(sp)
 40142bc:	dd800615 	stw	r22,24(sp)
 40142c0:	dd400515 	stw	r21,20(sp)
 40142c4:	dcc00315 	stw	r19,12(sp)
 40142c8:	dc800215 	stw	r18,8(sp)
 40142cc:	dc400115 	stw	r17,4(sp)
 40142d0:	dc000015 	stw	r16,0(sp)
 40142d4:	2500b804 	addi	r20,r4,736
 40142d8:	a0002326 	beq	r20,zero,4014368 <_fwalk_reent+0xbc>
 40142dc:	282b883a 	mov	r21,r5
 40142e0:	2027883a 	mov	r19,r4
 40142e4:	002f883a 	mov	r23,zero
 40142e8:	05800044 	movi	r22,1
 40142ec:	04bfffc4 	movi	r18,-1
 40142f0:	a4400117 	ldw	r17,4(r20)
 40142f4:	a4000217 	ldw	r16,8(r20)
 40142f8:	8c7fffc4 	addi	r17,r17,-1
 40142fc:	88000c16 	blt	r17,zero,4014330 <_fwalk_reent+0x84>
 4014300:	84000304 	addi	r16,r16,12
 4014304:	8080000b 	ldhu	r2,0(r16)
 4014308:	8c7fffc4 	addi	r17,r17,-1
 401430c:	817ffd04 	addi	r5,r16,-12
 4014310:	b080052e 	bgeu	r22,r2,4014328 <_fwalk_reent+0x7c>
 4014314:	8080008f 	ldh	r2,2(r16)
 4014318:	9809883a 	mov	r4,r19
 401431c:	14800226 	beq	r2,r18,4014328 <_fwalk_reent+0x7c>
 4014320:	a83ee83a 	callr	r21
 4014324:	b8aeb03a 	or	r23,r23,r2
 4014328:	84001a04 	addi	r16,r16,104
 401432c:	8cbff51e 	bne	r17,r18,4014304 <__alt_mem_onchip_memory2_0+0xfc013084>
 4014330:	a5000017 	ldw	r20,0(r20)
 4014334:	a03fee1e 	bne	r20,zero,40142f0 <__alt_mem_onchip_memory2_0+0xfc013070>
 4014338:	b805883a 	mov	r2,r23
 401433c:	dfc00817 	ldw	ra,32(sp)
 4014340:	ddc00717 	ldw	r23,28(sp)
 4014344:	dd800617 	ldw	r22,24(sp)
 4014348:	dd400517 	ldw	r21,20(sp)
 401434c:	dd000417 	ldw	r20,16(sp)
 4014350:	dcc00317 	ldw	r19,12(sp)
 4014354:	dc800217 	ldw	r18,8(sp)
 4014358:	dc400117 	ldw	r17,4(sp)
 401435c:	dc000017 	ldw	r16,0(sp)
 4014360:	dec00904 	addi	sp,sp,36
 4014364:	f800283a 	ret
 4014368:	002f883a 	mov	r23,zero
 401436c:	003ff206 	br	4014338 <__alt_mem_onchip_memory2_0+0xfc0130b8>

04014370 <_setlocale_r>:
 4014370:	30001b26 	beq	r6,zero,40143e0 <_setlocale_r+0x70>
 4014374:	014100b4 	movhi	r5,1026
 4014378:	defffe04 	addi	sp,sp,-8
 401437c:	295c8e04 	addi	r5,r5,29240
 4014380:	3009883a 	mov	r4,r6
 4014384:	dc000015 	stw	r16,0(sp)
 4014388:	dfc00115 	stw	ra,4(sp)
 401438c:	3021883a 	mov	r16,r6
 4014390:	400f3600 	call	400f360 <strcmp>
 4014394:	1000061e 	bne	r2,zero,40143b0 <_setlocale_r+0x40>
 4014398:	008100b4 	movhi	r2,1026
 401439c:	109c6f04 	addi	r2,r2,29116
 40143a0:	dfc00117 	ldw	ra,4(sp)
 40143a4:	dc000017 	ldw	r16,0(sp)
 40143a8:	dec00204 	addi	sp,sp,8
 40143ac:	f800283a 	ret
 40143b0:	014100b4 	movhi	r5,1026
 40143b4:	295c6f04 	addi	r5,r5,29116
 40143b8:	8009883a 	mov	r4,r16
 40143bc:	400f3600 	call	400f360 <strcmp>
 40143c0:	103ff526 	beq	r2,zero,4014398 <__alt_mem_onchip_memory2_0+0xfc013118>
 40143c4:	014100b4 	movhi	r5,1026
 40143c8:	295c7904 	addi	r5,r5,29156
 40143cc:	8009883a 	mov	r4,r16
 40143d0:	400f3600 	call	400f360 <strcmp>
 40143d4:	103ff026 	beq	r2,zero,4014398 <__alt_mem_onchip_memory2_0+0xfc013118>
 40143d8:	0005883a 	mov	r2,zero
 40143dc:	003ff006 	br	40143a0 <__alt_mem_onchip_memory2_0+0xfc013120>
 40143e0:	008100b4 	movhi	r2,1026
 40143e4:	109c6f04 	addi	r2,r2,29116
 40143e8:	f800283a 	ret

040143ec <__locale_charset>:
 40143ec:	008100b4 	movhi	r2,1026
 40143f0:	109f0d04 	addi	r2,r2,31796
 40143f4:	f800283a 	ret

040143f8 <__locale_mb_cur_max>:
 40143f8:	008100f4 	movhi	r2,1027
 40143fc:	10a96304 	addi	r2,r2,-23156
 4014400:	10800017 	ldw	r2,0(r2)
 4014404:	f800283a 	ret

04014408 <__locale_msgcharset>:
 4014408:	008100b4 	movhi	r2,1026
 401440c:	109f0504 	addi	r2,r2,31764
 4014410:	f800283a 	ret

04014414 <__locale_cjk_lang>:
 4014414:	0005883a 	mov	r2,zero
 4014418:	f800283a 	ret

0401441c <_localeconv_r>:
 401441c:	008100b4 	movhi	r2,1026
 4014420:	109f1504 	addi	r2,r2,31828
 4014424:	f800283a 	ret

04014428 <setlocale>:
 4014428:	008100f4 	movhi	r2,1027
 401442c:	10a96004 	addi	r2,r2,-23168
 4014430:	280d883a 	mov	r6,r5
 4014434:	200b883a 	mov	r5,r4
 4014438:	11000017 	ldw	r4,0(r2)
 401443c:	40143701 	jmpi	4014370 <_setlocale_r>

04014440 <localeconv>:
 4014440:	008100b4 	movhi	r2,1026
 4014444:	109f1504 	addi	r2,r2,31828
 4014448:	f800283a 	ret

0401444c <__smakebuf_r>:
 401444c:	2880030b 	ldhu	r2,12(r5)
 4014450:	10c0008c 	andi	r3,r2,2
 4014454:	1800411e 	bne	r3,zero,401455c <__smakebuf_r+0x110>
 4014458:	deffec04 	addi	sp,sp,-80
 401445c:	dc000f15 	stw	r16,60(sp)
 4014460:	2821883a 	mov	r16,r5
 4014464:	2940038f 	ldh	r5,14(r5)
 4014468:	dc401015 	stw	r17,64(sp)
 401446c:	dfc01315 	stw	ra,76(sp)
 4014470:	dcc01215 	stw	r19,72(sp)
 4014474:	dc801115 	stw	r18,68(sp)
 4014478:	2023883a 	mov	r17,r4
 401447c:	28001c16 	blt	r5,zero,40144f0 <__smakebuf_r+0xa4>
 4014480:	d80d883a 	mov	r6,sp
 4014484:	4017e680 	call	4017e68 <_fstat_r>
 4014488:	10001816 	blt	r2,zero,40144ec <__smakebuf_r+0xa0>
 401448c:	d8800117 	ldw	r2,4(sp)
 4014490:	00e00014 	movui	r3,32768
 4014494:	10bc000c 	andi	r2,r2,61440
 4014498:	14c80020 	cmpeqi	r19,r2,8192
 401449c:	10c03726 	beq	r2,r3,401457c <__smakebuf_r+0x130>
 40144a0:	80c0030b 	ldhu	r3,12(r16)
 40144a4:	18c20014 	ori	r3,r3,2048
 40144a8:	80c0030d 	sth	r3,12(r16)
 40144ac:	00c80004 	movi	r3,8192
 40144b0:	10c0521e 	bne	r2,r3,40145fc <__smakebuf_r+0x1b0>
 40144b4:	8140038f 	ldh	r5,14(r16)
 40144b8:	8809883a 	mov	r4,r17
 40144bc:	4017ec40 	call	4017ec4 <_isatty_r>
 40144c0:	10004c26 	beq	r2,zero,40145f4 <__smakebuf_r+0x1a8>
 40144c4:	8080030b 	ldhu	r2,12(r16)
 40144c8:	80c010c4 	addi	r3,r16,67
 40144cc:	80c00015 	stw	r3,0(r16)
 40144d0:	10800054 	ori	r2,r2,1
 40144d4:	8080030d 	sth	r2,12(r16)
 40144d8:	00800044 	movi	r2,1
 40144dc:	80c00415 	stw	r3,16(r16)
 40144e0:	80800515 	stw	r2,20(r16)
 40144e4:	04810004 	movi	r18,1024
 40144e8:	00000706 	br	4014508 <__smakebuf_r+0xbc>
 40144ec:	8080030b 	ldhu	r2,12(r16)
 40144f0:	10c0200c 	andi	r3,r2,128
 40144f4:	18001f1e 	bne	r3,zero,4014574 <__smakebuf_r+0x128>
 40144f8:	04810004 	movi	r18,1024
 40144fc:	10820014 	ori	r2,r2,2048
 4014500:	8080030d 	sth	r2,12(r16)
 4014504:	0027883a 	mov	r19,zero
 4014508:	900b883a 	mov	r5,r18
 401450c:	8809883a 	mov	r4,r17
 4014510:	400e42c0 	call	400e42c <_malloc_r>
 4014514:	10002c26 	beq	r2,zero,40145c8 <__smakebuf_r+0x17c>
 4014518:	80c0030b 	ldhu	r3,12(r16)
 401451c:	01010074 	movhi	r4,1025
 4014520:	210d5104 	addi	r4,r4,13636
 4014524:	89000f15 	stw	r4,60(r17)
 4014528:	18c02014 	ori	r3,r3,128
 401452c:	80c0030d 	sth	r3,12(r16)
 4014530:	80800015 	stw	r2,0(r16)
 4014534:	80800415 	stw	r2,16(r16)
 4014538:	84800515 	stw	r18,20(r16)
 401453c:	98001a1e 	bne	r19,zero,40145a8 <__smakebuf_r+0x15c>
 4014540:	dfc01317 	ldw	ra,76(sp)
 4014544:	dcc01217 	ldw	r19,72(sp)
 4014548:	dc801117 	ldw	r18,68(sp)
 401454c:	dc401017 	ldw	r17,64(sp)
 4014550:	dc000f17 	ldw	r16,60(sp)
 4014554:	dec01404 	addi	sp,sp,80
 4014558:	f800283a 	ret
 401455c:	288010c4 	addi	r2,r5,67
 4014560:	28800015 	stw	r2,0(r5)
 4014564:	28800415 	stw	r2,16(r5)
 4014568:	00800044 	movi	r2,1
 401456c:	28800515 	stw	r2,20(r5)
 4014570:	f800283a 	ret
 4014574:	04801004 	movi	r18,64
 4014578:	003fe006 	br	40144fc <__alt_mem_onchip_memory2_0+0xfc01327c>
 401457c:	81000a17 	ldw	r4,40(r16)
 4014580:	00c10074 	movhi	r3,1025
 4014584:	18d84604 	addi	r3,r3,24856
 4014588:	20ffc51e 	bne	r4,r3,40144a0 <__alt_mem_onchip_memory2_0+0xfc013220>
 401458c:	8080030b 	ldhu	r2,12(r16)
 4014590:	04810004 	movi	r18,1024
 4014594:	84801315 	stw	r18,76(r16)
 4014598:	1484b03a 	or	r2,r2,r18
 401459c:	8080030d 	sth	r2,12(r16)
 40145a0:	0027883a 	mov	r19,zero
 40145a4:	003fd806 	br	4014508 <__alt_mem_onchip_memory2_0+0xfc013288>
 40145a8:	8140038f 	ldh	r5,14(r16)
 40145ac:	8809883a 	mov	r4,r17
 40145b0:	4017ec40 	call	4017ec4 <_isatty_r>
 40145b4:	103fe226 	beq	r2,zero,4014540 <__alt_mem_onchip_memory2_0+0xfc0132c0>
 40145b8:	8080030b 	ldhu	r2,12(r16)
 40145bc:	10800054 	ori	r2,r2,1
 40145c0:	8080030d 	sth	r2,12(r16)
 40145c4:	003fde06 	br	4014540 <__alt_mem_onchip_memory2_0+0xfc0132c0>
 40145c8:	8080030b 	ldhu	r2,12(r16)
 40145cc:	10c0800c 	andi	r3,r2,512
 40145d0:	183fdb1e 	bne	r3,zero,4014540 <__alt_mem_onchip_memory2_0+0xfc0132c0>
 40145d4:	10800094 	ori	r2,r2,2
 40145d8:	80c010c4 	addi	r3,r16,67
 40145dc:	8080030d 	sth	r2,12(r16)
 40145e0:	00800044 	movi	r2,1
 40145e4:	80c00015 	stw	r3,0(r16)
 40145e8:	80c00415 	stw	r3,16(r16)
 40145ec:	80800515 	stw	r2,20(r16)
 40145f0:	003fd306 	br	4014540 <__alt_mem_onchip_memory2_0+0xfc0132c0>
 40145f4:	04810004 	movi	r18,1024
 40145f8:	003fc306 	br	4014508 <__alt_mem_onchip_memory2_0+0xfc013288>
 40145fc:	0027883a 	mov	r19,zero
 4014600:	04810004 	movi	r18,1024
 4014604:	003fc006 	br	4014508 <__alt_mem_onchip_memory2_0+0xfc013288>

04014608 <memchr>:
 4014608:	208000cc 	andi	r2,r4,3
 401460c:	280f883a 	mov	r7,r5
 4014610:	10003426 	beq	r2,zero,40146e4 <memchr+0xdc>
 4014614:	30bfffc4 	addi	r2,r6,-1
 4014618:	30001a26 	beq	r6,zero,4014684 <memchr+0x7c>
 401461c:	20c00003 	ldbu	r3,0(r4)
 4014620:	29803fcc 	andi	r6,r5,255
 4014624:	30c0051e 	bne	r6,r3,401463c <memchr+0x34>
 4014628:	00001806 	br	401468c <memchr+0x84>
 401462c:	10001526 	beq	r2,zero,4014684 <memchr+0x7c>
 4014630:	20c00003 	ldbu	r3,0(r4)
 4014634:	10bfffc4 	addi	r2,r2,-1
 4014638:	30c01426 	beq	r6,r3,401468c <memchr+0x84>
 401463c:	21000044 	addi	r4,r4,1
 4014640:	20c000cc 	andi	r3,r4,3
 4014644:	183ff91e 	bne	r3,zero,401462c <__alt_mem_onchip_memory2_0+0xfc0133ac>
 4014648:	020000c4 	movi	r8,3
 401464c:	40801136 	bltu	r8,r2,4014694 <memchr+0x8c>
 4014650:	10000c26 	beq	r2,zero,4014684 <memchr+0x7c>
 4014654:	20c00003 	ldbu	r3,0(r4)
 4014658:	29403fcc 	andi	r5,r5,255
 401465c:	28c00b26 	beq	r5,r3,401468c <memchr+0x84>
 4014660:	20c00044 	addi	r3,r4,1
 4014664:	39803fcc 	andi	r6,r7,255
 4014668:	2089883a 	add	r4,r4,r2
 401466c:	00000306 	br	401467c <memchr+0x74>
 4014670:	18c00044 	addi	r3,r3,1
 4014674:	197fffc3 	ldbu	r5,-1(r3)
 4014678:	31400526 	beq	r6,r5,4014690 <memchr+0x88>
 401467c:	1805883a 	mov	r2,r3
 4014680:	20fffb1e 	bne	r4,r3,4014670 <__alt_mem_onchip_memory2_0+0xfc0133f0>
 4014684:	0005883a 	mov	r2,zero
 4014688:	f800283a 	ret
 401468c:	2005883a 	mov	r2,r4
 4014690:	f800283a 	ret
 4014694:	28c03fcc 	andi	r3,r5,255
 4014698:	1812923a 	slli	r9,r3,8
 401469c:	02ffbff4 	movhi	r11,65279
 40146a0:	02a02074 	movhi	r10,32897
 40146a4:	48d2b03a 	or	r9,r9,r3
 40146a8:	4806943a 	slli	r3,r9,16
 40146ac:	5affbfc4 	addi	r11,r11,-257
 40146b0:	52a02004 	addi	r10,r10,-32640
 40146b4:	48d2b03a 	or	r9,r9,r3
 40146b8:	20c00017 	ldw	r3,0(r4)
 40146bc:	48c6f03a 	xor	r3,r9,r3
 40146c0:	1acd883a 	add	r6,r3,r11
 40146c4:	00c6303a 	nor	r3,zero,r3
 40146c8:	30c6703a 	and	r3,r6,r3
 40146cc:	1a86703a 	and	r3,r3,r10
 40146d0:	183fe01e 	bne	r3,zero,4014654 <__alt_mem_onchip_memory2_0+0xfc0133d4>
 40146d4:	10bfff04 	addi	r2,r2,-4
 40146d8:	21000104 	addi	r4,r4,4
 40146dc:	40bff636 	bltu	r8,r2,40146b8 <__alt_mem_onchip_memory2_0+0xfc013438>
 40146e0:	003fdb06 	br	4014650 <__alt_mem_onchip_memory2_0+0xfc0133d0>
 40146e4:	3005883a 	mov	r2,r6
 40146e8:	003fd706 	br	4014648 <__alt_mem_onchip_memory2_0+0xfc0133c8>

040146ec <memmove>:
 40146ec:	2005883a 	mov	r2,r4
 40146f0:	29000b2e 	bgeu	r5,r4,4014720 <memmove+0x34>
 40146f4:	298f883a 	add	r7,r5,r6
 40146f8:	21c0092e 	bgeu	r4,r7,4014720 <memmove+0x34>
 40146fc:	2187883a 	add	r3,r4,r6
 4014700:	198bc83a 	sub	r5,r3,r6
 4014704:	30004826 	beq	r6,zero,4014828 <memmove+0x13c>
 4014708:	39ffffc4 	addi	r7,r7,-1
 401470c:	39000003 	ldbu	r4,0(r7)
 4014710:	18ffffc4 	addi	r3,r3,-1
 4014714:	19000005 	stb	r4,0(r3)
 4014718:	28fffb1e 	bne	r5,r3,4014708 <__alt_mem_onchip_memory2_0+0xfc013488>
 401471c:	f800283a 	ret
 4014720:	00c003c4 	movi	r3,15
 4014724:	1980412e 	bgeu	r3,r6,401482c <memmove+0x140>
 4014728:	2886b03a 	or	r3,r5,r2
 401472c:	18c000cc 	andi	r3,r3,3
 4014730:	1800401e 	bne	r3,zero,4014834 <memmove+0x148>
 4014734:	33fffc04 	addi	r15,r6,-16
 4014738:	781ed13a 	srli	r15,r15,4
 401473c:	28c00104 	addi	r3,r5,4
 4014740:	13400104 	addi	r13,r2,4
 4014744:	781c913a 	slli	r14,r15,4
 4014748:	2b000204 	addi	r12,r5,8
 401474c:	12c00204 	addi	r11,r2,8
 4014750:	73800504 	addi	r14,r14,20
 4014754:	2a800304 	addi	r10,r5,12
 4014758:	12400304 	addi	r9,r2,12
 401475c:	2b9d883a 	add	r14,r5,r14
 4014760:	2811883a 	mov	r8,r5
 4014764:	100f883a 	mov	r7,r2
 4014768:	41000017 	ldw	r4,0(r8)
 401476c:	39c00404 	addi	r7,r7,16
 4014770:	18c00404 	addi	r3,r3,16
 4014774:	393ffc15 	stw	r4,-16(r7)
 4014778:	193ffc17 	ldw	r4,-16(r3)
 401477c:	6b400404 	addi	r13,r13,16
 4014780:	5ac00404 	addi	r11,r11,16
 4014784:	693ffc15 	stw	r4,-16(r13)
 4014788:	61000017 	ldw	r4,0(r12)
 401478c:	4a400404 	addi	r9,r9,16
 4014790:	42000404 	addi	r8,r8,16
 4014794:	593ffc15 	stw	r4,-16(r11)
 4014798:	51000017 	ldw	r4,0(r10)
 401479c:	63000404 	addi	r12,r12,16
 40147a0:	52800404 	addi	r10,r10,16
 40147a4:	493ffc15 	stw	r4,-16(r9)
 40147a8:	1bbfef1e 	bne	r3,r14,4014768 <__alt_mem_onchip_memory2_0+0xfc0134e8>
 40147ac:	79000044 	addi	r4,r15,1
 40147b0:	2008913a 	slli	r4,r4,4
 40147b4:	328003cc 	andi	r10,r6,15
 40147b8:	02c000c4 	movi	r11,3
 40147bc:	1107883a 	add	r3,r2,r4
 40147c0:	290b883a 	add	r5,r5,r4
 40147c4:	5a801e2e 	bgeu	r11,r10,4014840 <memmove+0x154>
 40147c8:	1813883a 	mov	r9,r3
 40147cc:	2811883a 	mov	r8,r5
 40147d0:	500f883a 	mov	r7,r10
 40147d4:	41000017 	ldw	r4,0(r8)
 40147d8:	4a400104 	addi	r9,r9,4
 40147dc:	39ffff04 	addi	r7,r7,-4
 40147e0:	493fff15 	stw	r4,-4(r9)
 40147e4:	42000104 	addi	r8,r8,4
 40147e8:	59fffa36 	bltu	r11,r7,40147d4 <__alt_mem_onchip_memory2_0+0xfc013554>
 40147ec:	513fff04 	addi	r4,r10,-4
 40147f0:	2008d0ba 	srli	r4,r4,2
 40147f4:	318000cc 	andi	r6,r6,3
 40147f8:	21000044 	addi	r4,r4,1
 40147fc:	2109883a 	add	r4,r4,r4
 4014800:	2109883a 	add	r4,r4,r4
 4014804:	1907883a 	add	r3,r3,r4
 4014808:	290b883a 	add	r5,r5,r4
 401480c:	30000b26 	beq	r6,zero,401483c <memmove+0x150>
 4014810:	198d883a 	add	r6,r3,r6
 4014814:	29c00003 	ldbu	r7,0(r5)
 4014818:	18c00044 	addi	r3,r3,1
 401481c:	29400044 	addi	r5,r5,1
 4014820:	19ffffc5 	stb	r7,-1(r3)
 4014824:	19bffb1e 	bne	r3,r6,4014814 <__alt_mem_onchip_memory2_0+0xfc013594>
 4014828:	f800283a 	ret
 401482c:	1007883a 	mov	r3,r2
 4014830:	003ff606 	br	401480c <__alt_mem_onchip_memory2_0+0xfc01358c>
 4014834:	1007883a 	mov	r3,r2
 4014838:	003ff506 	br	4014810 <__alt_mem_onchip_memory2_0+0xfc013590>
 401483c:	f800283a 	ret
 4014840:	500d883a 	mov	r6,r10
 4014844:	003ff106 	br	401480c <__alt_mem_onchip_memory2_0+0xfc01358c>

04014848 <_Balloc>:
 4014848:	20801317 	ldw	r2,76(r4)
 401484c:	defffc04 	addi	sp,sp,-16
 4014850:	dc400115 	stw	r17,4(sp)
 4014854:	dc000015 	stw	r16,0(sp)
 4014858:	dfc00315 	stw	ra,12(sp)
 401485c:	dc800215 	stw	r18,8(sp)
 4014860:	2023883a 	mov	r17,r4
 4014864:	2821883a 	mov	r16,r5
 4014868:	10000f26 	beq	r2,zero,40148a8 <_Balloc+0x60>
 401486c:	8407883a 	add	r3,r16,r16
 4014870:	18c7883a 	add	r3,r3,r3
 4014874:	10c7883a 	add	r3,r2,r3
 4014878:	18800017 	ldw	r2,0(r3)
 401487c:	10001126 	beq	r2,zero,40148c4 <_Balloc+0x7c>
 4014880:	11000017 	ldw	r4,0(r2)
 4014884:	19000015 	stw	r4,0(r3)
 4014888:	10000415 	stw	zero,16(r2)
 401488c:	10000315 	stw	zero,12(r2)
 4014890:	dfc00317 	ldw	ra,12(sp)
 4014894:	dc800217 	ldw	r18,8(sp)
 4014898:	dc400117 	ldw	r17,4(sp)
 401489c:	dc000017 	ldw	r16,0(sp)
 40148a0:	dec00404 	addi	sp,sp,16
 40148a4:	f800283a 	ret
 40148a8:	01800844 	movi	r6,33
 40148ac:	01400104 	movi	r5,4
 40148b0:	4017a800 	call	4017a80 <_calloc_r>
 40148b4:	88801315 	stw	r2,76(r17)
 40148b8:	103fec1e 	bne	r2,zero,401486c <__alt_mem_onchip_memory2_0+0xfc0135ec>
 40148bc:	0005883a 	mov	r2,zero
 40148c0:	003ff306 	br	4014890 <__alt_mem_onchip_memory2_0+0xfc013610>
 40148c4:	01400044 	movi	r5,1
 40148c8:	2c24983a 	sll	r18,r5,r16
 40148cc:	8809883a 	mov	r4,r17
 40148d0:	91800144 	addi	r6,r18,5
 40148d4:	318d883a 	add	r6,r6,r6
 40148d8:	318d883a 	add	r6,r6,r6
 40148dc:	4017a800 	call	4017a80 <_calloc_r>
 40148e0:	103ff626 	beq	r2,zero,40148bc <__alt_mem_onchip_memory2_0+0xfc01363c>
 40148e4:	14000115 	stw	r16,4(r2)
 40148e8:	14800215 	stw	r18,8(r2)
 40148ec:	003fe606 	br	4014888 <__alt_mem_onchip_memory2_0+0xfc013608>

040148f0 <_Bfree>:
 40148f0:	28000826 	beq	r5,zero,4014914 <_Bfree+0x24>
 40148f4:	28c00117 	ldw	r3,4(r5)
 40148f8:	20801317 	ldw	r2,76(r4)
 40148fc:	18c7883a 	add	r3,r3,r3
 4014900:	18c7883a 	add	r3,r3,r3
 4014904:	10c5883a 	add	r2,r2,r3
 4014908:	10c00017 	ldw	r3,0(r2)
 401490c:	28c00015 	stw	r3,0(r5)
 4014910:	11400015 	stw	r5,0(r2)
 4014914:	f800283a 	ret

04014918 <__multadd>:
 4014918:	defff704 	addi	sp,sp,-36
 401491c:	dc800215 	stw	r18,8(sp)
 4014920:	2c800417 	ldw	r18,16(r5)
 4014924:	dd800615 	stw	r22,24(sp)
 4014928:	dd400515 	stw	r21,20(sp)
 401492c:	dd000415 	stw	r20,16(sp)
 4014930:	dcc00315 	stw	r19,12(sp)
 4014934:	dc400115 	stw	r17,4(sp)
 4014938:	dc000015 	stw	r16,0(sp)
 401493c:	dfc00815 	stw	ra,32(sp)
 4014940:	ddc00715 	stw	r23,28(sp)
 4014944:	2827883a 	mov	r19,r5
 4014948:	2029883a 	mov	r20,r4
 401494c:	3023883a 	mov	r17,r6
 4014950:	3821883a 	mov	r16,r7
 4014954:	2d400504 	addi	r21,r5,20
 4014958:	002d883a 	mov	r22,zero
 401495c:	adc00017 	ldw	r23,0(r21)
 4014960:	880b883a 	mov	r5,r17
 4014964:	ad400104 	addi	r21,r21,4
 4014968:	b93fffcc 	andi	r4,r23,65535
 401496c:	400d2c40 	call	400d2c4 <__mulsi3>
 4014970:	b808d43a 	srli	r4,r23,16
 4014974:	880b883a 	mov	r5,r17
 4014978:	1421883a 	add	r16,r2,r16
 401497c:	400d2c40 	call	400d2c4 <__mulsi3>
 4014980:	800ed43a 	srli	r7,r16,16
 4014984:	80ffffcc 	andi	r3,r16,65535
 4014988:	b5800044 	addi	r22,r22,1
 401498c:	11c5883a 	add	r2,r2,r7
 4014990:	100e943a 	slli	r7,r2,16
 4014994:	1020d43a 	srli	r16,r2,16
 4014998:	38c7883a 	add	r3,r7,r3
 401499c:	a8ffff15 	stw	r3,-4(r21)
 40149a0:	b4bfee16 	blt	r22,r18,401495c <__alt_mem_onchip_memory2_0+0xfc0136dc>
 40149a4:	80000926 	beq	r16,zero,40149cc <__multadd+0xb4>
 40149a8:	98800217 	ldw	r2,8(r19)
 40149ac:	9080130e 	bge	r18,r2,40149fc <__multadd+0xe4>
 40149b0:	90800144 	addi	r2,r18,5
 40149b4:	1085883a 	add	r2,r2,r2
 40149b8:	1085883a 	add	r2,r2,r2
 40149bc:	9885883a 	add	r2,r19,r2
 40149c0:	14000015 	stw	r16,0(r2)
 40149c4:	94800044 	addi	r18,r18,1
 40149c8:	9c800415 	stw	r18,16(r19)
 40149cc:	9805883a 	mov	r2,r19
 40149d0:	dfc00817 	ldw	ra,32(sp)
 40149d4:	ddc00717 	ldw	r23,28(sp)
 40149d8:	dd800617 	ldw	r22,24(sp)
 40149dc:	dd400517 	ldw	r21,20(sp)
 40149e0:	dd000417 	ldw	r20,16(sp)
 40149e4:	dcc00317 	ldw	r19,12(sp)
 40149e8:	dc800217 	ldw	r18,8(sp)
 40149ec:	dc400117 	ldw	r17,4(sp)
 40149f0:	dc000017 	ldw	r16,0(sp)
 40149f4:	dec00904 	addi	sp,sp,36
 40149f8:	f800283a 	ret
 40149fc:	99400117 	ldw	r5,4(r19)
 4014a00:	a009883a 	mov	r4,r20
 4014a04:	29400044 	addi	r5,r5,1
 4014a08:	40148480 	call	4014848 <_Balloc>
 4014a0c:	99800417 	ldw	r6,16(r19)
 4014a10:	99400304 	addi	r5,r19,12
 4014a14:	11000304 	addi	r4,r2,12
 4014a18:	31800084 	addi	r6,r6,2
 4014a1c:	318d883a 	add	r6,r6,r6
 4014a20:	318d883a 	add	r6,r6,r6
 4014a24:	1023883a 	mov	r17,r2
 4014a28:	400ec380 	call	400ec38 <memcpy>
 4014a2c:	98000a26 	beq	r19,zero,4014a58 <__multadd+0x140>
 4014a30:	98c00117 	ldw	r3,4(r19)
 4014a34:	a0801317 	ldw	r2,76(r20)
 4014a38:	18c7883a 	add	r3,r3,r3
 4014a3c:	18c7883a 	add	r3,r3,r3
 4014a40:	10c5883a 	add	r2,r2,r3
 4014a44:	10c00017 	ldw	r3,0(r2)
 4014a48:	98c00015 	stw	r3,0(r19)
 4014a4c:	14c00015 	stw	r19,0(r2)
 4014a50:	8827883a 	mov	r19,r17
 4014a54:	003fd606 	br	40149b0 <__alt_mem_onchip_memory2_0+0xfc013730>
 4014a58:	8827883a 	mov	r19,r17
 4014a5c:	003fd406 	br	40149b0 <__alt_mem_onchip_memory2_0+0xfc013730>

04014a60 <__s2b>:
 4014a60:	defff904 	addi	sp,sp,-28
 4014a64:	dc400115 	stw	r17,4(sp)
 4014a68:	dc000015 	stw	r16,0(sp)
 4014a6c:	2023883a 	mov	r17,r4
 4014a70:	2821883a 	mov	r16,r5
 4014a74:	39000204 	addi	r4,r7,8
 4014a78:	01400244 	movi	r5,9
 4014a7c:	dcc00315 	stw	r19,12(sp)
 4014a80:	dc800215 	stw	r18,8(sp)
 4014a84:	dfc00615 	stw	ra,24(sp)
 4014a88:	dd400515 	stw	r21,20(sp)
 4014a8c:	dd000415 	stw	r20,16(sp)
 4014a90:	3825883a 	mov	r18,r7
 4014a94:	3027883a 	mov	r19,r6
 4014a98:	400d1100 	call	400d110 <__divsi3>
 4014a9c:	00c00044 	movi	r3,1
 4014aa0:	000b883a 	mov	r5,zero
 4014aa4:	1880030e 	bge	r3,r2,4014ab4 <__s2b+0x54>
 4014aa8:	18c7883a 	add	r3,r3,r3
 4014aac:	29400044 	addi	r5,r5,1
 4014ab0:	18bffd16 	blt	r3,r2,4014aa8 <__alt_mem_onchip_memory2_0+0xfc013828>
 4014ab4:	8809883a 	mov	r4,r17
 4014ab8:	40148480 	call	4014848 <_Balloc>
 4014abc:	d8c00717 	ldw	r3,28(sp)
 4014ac0:	10c00515 	stw	r3,20(r2)
 4014ac4:	00c00044 	movi	r3,1
 4014ac8:	10c00415 	stw	r3,16(r2)
 4014acc:	00c00244 	movi	r3,9
 4014ad0:	1cc0210e 	bge	r3,r19,4014b58 <__s2b+0xf8>
 4014ad4:	80eb883a 	add	r21,r16,r3
 4014ad8:	a829883a 	mov	r20,r21
 4014adc:	84e1883a 	add	r16,r16,r19
 4014ae0:	a1c00007 	ldb	r7,0(r20)
 4014ae4:	01800284 	movi	r6,10
 4014ae8:	a5000044 	addi	r20,r20,1
 4014aec:	100b883a 	mov	r5,r2
 4014af0:	39fff404 	addi	r7,r7,-48
 4014af4:	8809883a 	mov	r4,r17
 4014af8:	40149180 	call	4014918 <__multadd>
 4014afc:	a43ff81e 	bne	r20,r16,4014ae0 <__alt_mem_onchip_memory2_0+0xfc013860>
 4014b00:	ace1883a 	add	r16,r21,r19
 4014b04:	843ffe04 	addi	r16,r16,-8
 4014b08:	9c800a0e 	bge	r19,r18,4014b34 <__s2b+0xd4>
 4014b0c:	94e5c83a 	sub	r18,r18,r19
 4014b10:	84a5883a 	add	r18,r16,r18
 4014b14:	81c00007 	ldb	r7,0(r16)
 4014b18:	01800284 	movi	r6,10
 4014b1c:	84000044 	addi	r16,r16,1
 4014b20:	100b883a 	mov	r5,r2
 4014b24:	39fff404 	addi	r7,r7,-48
 4014b28:	8809883a 	mov	r4,r17
 4014b2c:	40149180 	call	4014918 <__multadd>
 4014b30:	84bff81e 	bne	r16,r18,4014b14 <__alt_mem_onchip_memory2_0+0xfc013894>
 4014b34:	dfc00617 	ldw	ra,24(sp)
 4014b38:	dd400517 	ldw	r21,20(sp)
 4014b3c:	dd000417 	ldw	r20,16(sp)
 4014b40:	dcc00317 	ldw	r19,12(sp)
 4014b44:	dc800217 	ldw	r18,8(sp)
 4014b48:	dc400117 	ldw	r17,4(sp)
 4014b4c:	dc000017 	ldw	r16,0(sp)
 4014b50:	dec00704 	addi	sp,sp,28
 4014b54:	f800283a 	ret
 4014b58:	84000284 	addi	r16,r16,10
 4014b5c:	1827883a 	mov	r19,r3
 4014b60:	003fe906 	br	4014b08 <__alt_mem_onchip_memory2_0+0xfc013888>

04014b64 <__hi0bits>:
 4014b64:	20bfffec 	andhi	r2,r4,65535
 4014b68:	1000141e 	bne	r2,zero,4014bbc <__hi0bits+0x58>
 4014b6c:	2008943a 	slli	r4,r4,16
 4014b70:	00800404 	movi	r2,16
 4014b74:	20ffc02c 	andhi	r3,r4,65280
 4014b78:	1800021e 	bne	r3,zero,4014b84 <__hi0bits+0x20>
 4014b7c:	2008923a 	slli	r4,r4,8
 4014b80:	10800204 	addi	r2,r2,8
 4014b84:	20fc002c 	andhi	r3,r4,61440
 4014b88:	1800021e 	bne	r3,zero,4014b94 <__hi0bits+0x30>
 4014b8c:	2008913a 	slli	r4,r4,4
 4014b90:	10800104 	addi	r2,r2,4
 4014b94:	20f0002c 	andhi	r3,r4,49152
 4014b98:	1800031e 	bne	r3,zero,4014ba8 <__hi0bits+0x44>
 4014b9c:	2109883a 	add	r4,r4,r4
 4014ba0:	10800084 	addi	r2,r2,2
 4014ba4:	2109883a 	add	r4,r4,r4
 4014ba8:	20000316 	blt	r4,zero,4014bb8 <__hi0bits+0x54>
 4014bac:	2110002c 	andhi	r4,r4,16384
 4014bb0:	2000041e 	bne	r4,zero,4014bc4 <__hi0bits+0x60>
 4014bb4:	00800804 	movi	r2,32
 4014bb8:	f800283a 	ret
 4014bbc:	0005883a 	mov	r2,zero
 4014bc0:	003fec06 	br	4014b74 <__alt_mem_onchip_memory2_0+0xfc0138f4>
 4014bc4:	10800044 	addi	r2,r2,1
 4014bc8:	f800283a 	ret

04014bcc <__lo0bits>:
 4014bcc:	20c00017 	ldw	r3,0(r4)
 4014bd0:	188001cc 	andi	r2,r3,7
 4014bd4:	10000826 	beq	r2,zero,4014bf8 <__lo0bits+0x2c>
 4014bd8:	1880004c 	andi	r2,r3,1
 4014bdc:	1000211e 	bne	r2,zero,4014c64 <__lo0bits+0x98>
 4014be0:	1880008c 	andi	r2,r3,2
 4014be4:	1000211e 	bne	r2,zero,4014c6c <__lo0bits+0xa0>
 4014be8:	1806d0ba 	srli	r3,r3,2
 4014bec:	00800084 	movi	r2,2
 4014bf0:	20c00015 	stw	r3,0(r4)
 4014bf4:	f800283a 	ret
 4014bf8:	18bfffcc 	andi	r2,r3,65535
 4014bfc:	10001326 	beq	r2,zero,4014c4c <__lo0bits+0x80>
 4014c00:	0005883a 	mov	r2,zero
 4014c04:	19403fcc 	andi	r5,r3,255
 4014c08:	2800021e 	bne	r5,zero,4014c14 <__lo0bits+0x48>
 4014c0c:	1806d23a 	srli	r3,r3,8
 4014c10:	10800204 	addi	r2,r2,8
 4014c14:	194003cc 	andi	r5,r3,15
 4014c18:	2800021e 	bne	r5,zero,4014c24 <__lo0bits+0x58>
 4014c1c:	1806d13a 	srli	r3,r3,4
 4014c20:	10800104 	addi	r2,r2,4
 4014c24:	194000cc 	andi	r5,r3,3
 4014c28:	2800021e 	bne	r5,zero,4014c34 <__lo0bits+0x68>
 4014c2c:	1806d0ba 	srli	r3,r3,2
 4014c30:	10800084 	addi	r2,r2,2
 4014c34:	1940004c 	andi	r5,r3,1
 4014c38:	2800081e 	bne	r5,zero,4014c5c <__lo0bits+0x90>
 4014c3c:	1806d07a 	srli	r3,r3,1
 4014c40:	1800051e 	bne	r3,zero,4014c58 <__lo0bits+0x8c>
 4014c44:	00800804 	movi	r2,32
 4014c48:	f800283a 	ret
 4014c4c:	1806d43a 	srli	r3,r3,16
 4014c50:	00800404 	movi	r2,16
 4014c54:	003feb06 	br	4014c04 <__alt_mem_onchip_memory2_0+0xfc013984>
 4014c58:	10800044 	addi	r2,r2,1
 4014c5c:	20c00015 	stw	r3,0(r4)
 4014c60:	f800283a 	ret
 4014c64:	0005883a 	mov	r2,zero
 4014c68:	f800283a 	ret
 4014c6c:	1806d07a 	srli	r3,r3,1
 4014c70:	00800044 	movi	r2,1
 4014c74:	20c00015 	stw	r3,0(r4)
 4014c78:	f800283a 	ret

04014c7c <__i2b>:
 4014c7c:	defffd04 	addi	sp,sp,-12
 4014c80:	dc000015 	stw	r16,0(sp)
 4014c84:	04000044 	movi	r16,1
 4014c88:	dc400115 	stw	r17,4(sp)
 4014c8c:	2823883a 	mov	r17,r5
 4014c90:	800b883a 	mov	r5,r16
 4014c94:	dfc00215 	stw	ra,8(sp)
 4014c98:	40148480 	call	4014848 <_Balloc>
 4014c9c:	14400515 	stw	r17,20(r2)
 4014ca0:	14000415 	stw	r16,16(r2)
 4014ca4:	dfc00217 	ldw	ra,8(sp)
 4014ca8:	dc400117 	ldw	r17,4(sp)
 4014cac:	dc000017 	ldw	r16,0(sp)
 4014cb0:	dec00304 	addi	sp,sp,12
 4014cb4:	f800283a 	ret

04014cb8 <__multiply>:
 4014cb8:	deffef04 	addi	sp,sp,-68
 4014cbc:	dc400815 	stw	r17,32(sp)
 4014cc0:	dc000715 	stw	r16,28(sp)
 4014cc4:	34400417 	ldw	r17,16(r6)
 4014cc8:	2c000417 	ldw	r16,16(r5)
 4014ccc:	dd800d15 	stw	r22,52(sp)
 4014cd0:	dc800915 	stw	r18,36(sp)
 4014cd4:	dfc01015 	stw	ra,64(sp)
 4014cd8:	df000f15 	stw	fp,60(sp)
 4014cdc:	ddc00e15 	stw	r23,56(sp)
 4014ce0:	dd400c15 	stw	r21,48(sp)
 4014ce4:	dd000b15 	stw	r20,44(sp)
 4014ce8:	dcc00a15 	stw	r19,40(sp)
 4014cec:	2825883a 	mov	r18,r5
 4014cf0:	302d883a 	mov	r22,r6
 4014cf4:	8440050e 	bge	r16,r17,4014d0c <__multiply+0x54>
 4014cf8:	8007883a 	mov	r3,r16
 4014cfc:	3025883a 	mov	r18,r6
 4014d00:	8821883a 	mov	r16,r17
 4014d04:	282d883a 	mov	r22,r5
 4014d08:	1823883a 	mov	r17,r3
 4014d0c:	90800217 	ldw	r2,8(r18)
 4014d10:	8447883a 	add	r3,r16,r17
 4014d14:	d8c00215 	stw	r3,8(sp)
 4014d18:	91400117 	ldw	r5,4(r18)
 4014d1c:	10c0010e 	bge	r2,r3,4014d24 <__multiply+0x6c>
 4014d20:	29400044 	addi	r5,r5,1
 4014d24:	40148480 	call	4014848 <_Balloc>
 4014d28:	d8c00217 	ldw	r3,8(sp)
 4014d2c:	d8800615 	stw	r2,24(sp)
 4014d30:	18eb883a 	add	r21,r3,r3
 4014d34:	ad6b883a 	add	r21,r21,r21
 4014d38:	10c00504 	addi	r3,r2,20
 4014d3c:	1d6b883a 	add	r21,r3,r21
 4014d40:	d8c00115 	stw	r3,4(sp)
 4014d44:	dd400315 	stw	r21,12(sp)
 4014d48:	1805883a 	mov	r2,r3
 4014d4c:	1d40042e 	bgeu	r3,r21,4014d60 <__multiply+0xa8>
 4014d50:	d8c00317 	ldw	r3,12(sp)
 4014d54:	10000015 	stw	zero,0(r2)
 4014d58:	10800104 	addi	r2,r2,4
 4014d5c:	10fffc36 	bltu	r2,r3,4014d50 <__alt_mem_onchip_memory2_0+0xfc013ad0>
 4014d60:	8c63883a 	add	r17,r17,r17
 4014d64:	b5800504 	addi	r22,r22,20
 4014d68:	8c63883a 	add	r17,r17,r17
 4014d6c:	94800504 	addi	r18,r18,20
 4014d70:	8421883a 	add	r16,r16,r16
 4014d74:	b463883a 	add	r17,r22,r17
 4014d78:	8421883a 	add	r16,r16,r16
 4014d7c:	dd800015 	stw	r22,0(sp)
 4014d80:	dc800415 	stw	r18,16(sp)
 4014d84:	dc400515 	stw	r17,20(sp)
 4014d88:	9429883a 	add	r20,r18,r16
 4014d8c:	b4404f2e 	bgeu	r22,r17,4014ecc <__multiply+0x214>
 4014d90:	d8c00017 	ldw	r3,0(sp)
 4014d94:	1c800017 	ldw	r18,0(r3)
 4014d98:	947fffcc 	andi	r17,r18,65535
 4014d9c:	88001e26 	beq	r17,zero,4014e18 <__multiply+0x160>
 4014da0:	dd800117 	ldw	r22,4(sp)
 4014da4:	dd400417 	ldw	r21,16(sp)
 4014da8:	0027883a 	mov	r19,zero
 4014dac:	ac800017 	ldw	r18,0(r21)
 4014db0:	b4000017 	ldw	r16,0(r22)
 4014db4:	880b883a 	mov	r5,r17
 4014db8:	913fffcc 	andi	r4,r18,65535
 4014dbc:	400d2c40 	call	400d2c4 <__mulsi3>
 4014dc0:	9008d43a 	srli	r4,r18,16
 4014dc4:	84bfffcc 	andi	r18,r16,65535
 4014dc8:	1485883a 	add	r2,r2,r18
 4014dcc:	14e5883a 	add	r18,r2,r19
 4014dd0:	8020d43a 	srli	r16,r16,16
 4014dd4:	9026d43a 	srli	r19,r18,16
 4014dd8:	880b883a 	mov	r5,r17
 4014ddc:	400d2c40 	call	400d2c4 <__mulsi3>
 4014de0:	1405883a 	add	r2,r2,r16
 4014de4:	14e1883a 	add	r16,r2,r19
 4014de8:	90ffffcc 	andi	r3,r18,65535
 4014dec:	8024943a 	slli	r18,r16,16
 4014df0:	ad400104 	addi	r21,r21,4
 4014df4:	b005883a 	mov	r2,r22
 4014df8:	90c6b03a 	or	r3,r18,r3
 4014dfc:	b0c00015 	stw	r3,0(r22)
 4014e00:	8026d43a 	srli	r19,r16,16
 4014e04:	b5800104 	addi	r22,r22,4
 4014e08:	ad3fe836 	bltu	r21,r20,4014dac <__alt_mem_onchip_memory2_0+0xfc013b2c>
 4014e0c:	d8c00017 	ldw	r3,0(sp)
 4014e10:	14c00115 	stw	r19,4(r2)
 4014e14:	1c800017 	ldw	r18,0(r3)
 4014e18:	9024d43a 	srli	r18,r18,16
 4014e1c:	90002226 	beq	r18,zero,4014ea8 <__multiply+0x1f0>
 4014e20:	d8c00117 	ldw	r3,4(sp)
 4014e24:	dd800417 	ldw	r22,16(sp)
 4014e28:	002f883a 	mov	r23,zero
 4014e2c:	1f000017 	ldw	fp,0(r3)
 4014e30:	1823883a 	mov	r17,r3
 4014e34:	182b883a 	mov	r21,r3
 4014e38:	e021883a 	mov	r16,fp
 4014e3c:	00000106 	br	4014e44 <__multiply+0x18c>
 4014e40:	982b883a 	mov	r21,r19
 4014e44:	b100000b 	ldhu	r4,0(r22)
 4014e48:	8020d43a 	srli	r16,r16,16
 4014e4c:	900b883a 	mov	r5,r18
 4014e50:	400d2c40 	call	400d2c4 <__mulsi3>
 4014e54:	1405883a 	add	r2,r2,r16
 4014e58:	15ef883a 	add	r23,r2,r23
 4014e5c:	b804943a 	slli	r2,r23,16
 4014e60:	e0ffffcc 	andi	r3,fp,65535
 4014e64:	8c400104 	addi	r17,r17,4
 4014e68:	10c6b03a 	or	r3,r2,r3
 4014e6c:	88ffff15 	stw	r3,-4(r17)
 4014e70:	b5800104 	addi	r22,r22,4
 4014e74:	b13fff17 	ldw	r4,-4(r22)
 4014e78:	acc00104 	addi	r19,r21,4
 4014e7c:	900b883a 	mov	r5,r18
 4014e80:	2008d43a 	srli	r4,r4,16
 4014e84:	9c000017 	ldw	r16,0(r19)
 4014e88:	400d2c40 	call	400d2c4 <__mulsi3>
 4014e8c:	b806d43a 	srli	r3,r23,16
 4014e90:	813fffcc 	andi	r4,r16,65535
 4014e94:	1105883a 	add	r2,r2,r4
 4014e98:	10f9883a 	add	fp,r2,r3
 4014e9c:	e02ed43a 	srli	r23,fp,16
 4014ea0:	b53fe736 	bltu	r22,r20,4014e40 <__alt_mem_onchip_memory2_0+0xfc013bc0>
 4014ea4:	af000115 	stw	fp,4(r21)
 4014ea8:	d8c00017 	ldw	r3,0(sp)
 4014eac:	d9000517 	ldw	r4,20(sp)
 4014eb0:	18c00104 	addi	r3,r3,4
 4014eb4:	d8c00015 	stw	r3,0(sp)
 4014eb8:	d8c00117 	ldw	r3,4(sp)
 4014ebc:	18c00104 	addi	r3,r3,4
 4014ec0:	d8c00115 	stw	r3,4(sp)
 4014ec4:	d8c00017 	ldw	r3,0(sp)
 4014ec8:	193fb136 	bltu	r3,r4,4014d90 <__alt_mem_onchip_memory2_0+0xfc013b10>
 4014ecc:	d8c00217 	ldw	r3,8(sp)
 4014ed0:	00c00c0e 	bge	zero,r3,4014f04 <__multiply+0x24c>
 4014ed4:	d8c00317 	ldw	r3,12(sp)
 4014ed8:	18bfff17 	ldw	r2,-4(r3)
 4014edc:	1d7fff04 	addi	r21,r3,-4
 4014ee0:	10000326 	beq	r2,zero,4014ef0 <__multiply+0x238>
 4014ee4:	00000706 	br	4014f04 <__multiply+0x24c>
 4014ee8:	a8800017 	ldw	r2,0(r21)
 4014eec:	1000051e 	bne	r2,zero,4014f04 <__multiply+0x24c>
 4014ef0:	d8c00217 	ldw	r3,8(sp)
 4014ef4:	ad7fff04 	addi	r21,r21,-4
 4014ef8:	18ffffc4 	addi	r3,r3,-1
 4014efc:	d8c00215 	stw	r3,8(sp)
 4014f00:	183ff91e 	bne	r3,zero,4014ee8 <__alt_mem_onchip_memory2_0+0xfc013c68>
 4014f04:	d8c00617 	ldw	r3,24(sp)
 4014f08:	d9000217 	ldw	r4,8(sp)
 4014f0c:	1805883a 	mov	r2,r3
 4014f10:	19000415 	stw	r4,16(r3)
 4014f14:	dfc01017 	ldw	ra,64(sp)
 4014f18:	df000f17 	ldw	fp,60(sp)
 4014f1c:	ddc00e17 	ldw	r23,56(sp)
 4014f20:	dd800d17 	ldw	r22,52(sp)
 4014f24:	dd400c17 	ldw	r21,48(sp)
 4014f28:	dd000b17 	ldw	r20,44(sp)
 4014f2c:	dcc00a17 	ldw	r19,40(sp)
 4014f30:	dc800917 	ldw	r18,36(sp)
 4014f34:	dc400817 	ldw	r17,32(sp)
 4014f38:	dc000717 	ldw	r16,28(sp)
 4014f3c:	dec01104 	addi	sp,sp,68
 4014f40:	f800283a 	ret

04014f44 <__pow5mult>:
 4014f44:	defffa04 	addi	sp,sp,-24
 4014f48:	dcc00315 	stw	r19,12(sp)
 4014f4c:	dc000015 	stw	r16,0(sp)
 4014f50:	dfc00515 	stw	ra,20(sp)
 4014f54:	dd000415 	stw	r20,16(sp)
 4014f58:	dc800215 	stw	r18,8(sp)
 4014f5c:	dc400115 	stw	r17,4(sp)
 4014f60:	308000cc 	andi	r2,r6,3
 4014f64:	3021883a 	mov	r16,r6
 4014f68:	2027883a 	mov	r19,r4
 4014f6c:	10002f1e 	bne	r2,zero,401502c <__pow5mult+0xe8>
 4014f70:	2825883a 	mov	r18,r5
 4014f74:	8021d0ba 	srai	r16,r16,2
 4014f78:	80001a26 	beq	r16,zero,4014fe4 <__pow5mult+0xa0>
 4014f7c:	9c401217 	ldw	r17,72(r19)
 4014f80:	8800061e 	bne	r17,zero,4014f9c <__pow5mult+0x58>
 4014f84:	00003406 	br	4015058 <__pow5mult+0x114>
 4014f88:	8021d07a 	srai	r16,r16,1
 4014f8c:	80001526 	beq	r16,zero,4014fe4 <__pow5mult+0xa0>
 4014f90:	88800017 	ldw	r2,0(r17)
 4014f94:	10001c26 	beq	r2,zero,4015008 <__pow5mult+0xc4>
 4014f98:	1023883a 	mov	r17,r2
 4014f9c:	8080004c 	andi	r2,r16,1
 4014fa0:	103ff926 	beq	r2,zero,4014f88 <__alt_mem_onchip_memory2_0+0xfc013d08>
 4014fa4:	880d883a 	mov	r6,r17
 4014fa8:	900b883a 	mov	r5,r18
 4014fac:	9809883a 	mov	r4,r19
 4014fb0:	4014cb80 	call	4014cb8 <__multiply>
 4014fb4:	90001b26 	beq	r18,zero,4015024 <__pow5mult+0xe0>
 4014fb8:	91000117 	ldw	r4,4(r18)
 4014fbc:	98c01317 	ldw	r3,76(r19)
 4014fc0:	8021d07a 	srai	r16,r16,1
 4014fc4:	2109883a 	add	r4,r4,r4
 4014fc8:	2109883a 	add	r4,r4,r4
 4014fcc:	1907883a 	add	r3,r3,r4
 4014fd0:	19000017 	ldw	r4,0(r3)
 4014fd4:	91000015 	stw	r4,0(r18)
 4014fd8:	1c800015 	stw	r18,0(r3)
 4014fdc:	1025883a 	mov	r18,r2
 4014fe0:	803feb1e 	bne	r16,zero,4014f90 <__alt_mem_onchip_memory2_0+0xfc013d10>
 4014fe4:	9005883a 	mov	r2,r18
 4014fe8:	dfc00517 	ldw	ra,20(sp)
 4014fec:	dd000417 	ldw	r20,16(sp)
 4014ff0:	dcc00317 	ldw	r19,12(sp)
 4014ff4:	dc800217 	ldw	r18,8(sp)
 4014ff8:	dc400117 	ldw	r17,4(sp)
 4014ffc:	dc000017 	ldw	r16,0(sp)
 4015000:	dec00604 	addi	sp,sp,24
 4015004:	f800283a 	ret
 4015008:	880d883a 	mov	r6,r17
 401500c:	880b883a 	mov	r5,r17
 4015010:	9809883a 	mov	r4,r19
 4015014:	4014cb80 	call	4014cb8 <__multiply>
 4015018:	88800015 	stw	r2,0(r17)
 401501c:	10000015 	stw	zero,0(r2)
 4015020:	003fdd06 	br	4014f98 <__alt_mem_onchip_memory2_0+0xfc013d18>
 4015024:	1025883a 	mov	r18,r2
 4015028:	003fd706 	br	4014f88 <__alt_mem_onchip_memory2_0+0xfc013d08>
 401502c:	10bfffc4 	addi	r2,r2,-1
 4015030:	1085883a 	add	r2,r2,r2
 4015034:	00c100b4 	movhi	r3,1026
 4015038:	18dc9104 	addi	r3,r3,29252
 401503c:	1085883a 	add	r2,r2,r2
 4015040:	1885883a 	add	r2,r3,r2
 4015044:	11800017 	ldw	r6,0(r2)
 4015048:	000f883a 	mov	r7,zero
 401504c:	40149180 	call	4014918 <__multadd>
 4015050:	1025883a 	mov	r18,r2
 4015054:	003fc706 	br	4014f74 <__alt_mem_onchip_memory2_0+0xfc013cf4>
 4015058:	05000044 	movi	r20,1
 401505c:	a00b883a 	mov	r5,r20
 4015060:	9809883a 	mov	r4,r19
 4015064:	40148480 	call	4014848 <_Balloc>
 4015068:	1023883a 	mov	r17,r2
 401506c:	00809c44 	movi	r2,625
 4015070:	88800515 	stw	r2,20(r17)
 4015074:	8d000415 	stw	r20,16(r17)
 4015078:	9c401215 	stw	r17,72(r19)
 401507c:	88000015 	stw	zero,0(r17)
 4015080:	003fc606 	br	4014f9c <__alt_mem_onchip_memory2_0+0xfc013d1c>

04015084 <__lshift>:
 4015084:	defff904 	addi	sp,sp,-28
 4015088:	dd400515 	stw	r21,20(sp)
 401508c:	dcc00315 	stw	r19,12(sp)
 4015090:	302bd17a 	srai	r21,r6,5
 4015094:	2cc00417 	ldw	r19,16(r5)
 4015098:	28800217 	ldw	r2,8(r5)
 401509c:	dd000415 	stw	r20,16(sp)
 40150a0:	ace7883a 	add	r19,r21,r19
 40150a4:	dc800215 	stw	r18,8(sp)
 40150a8:	dc400115 	stw	r17,4(sp)
 40150ac:	dc000015 	stw	r16,0(sp)
 40150b0:	dfc00615 	stw	ra,24(sp)
 40150b4:	9c000044 	addi	r16,r19,1
 40150b8:	2823883a 	mov	r17,r5
 40150bc:	3029883a 	mov	r20,r6
 40150c0:	2025883a 	mov	r18,r4
 40150c4:	29400117 	ldw	r5,4(r5)
 40150c8:	1400030e 	bge	r2,r16,40150d8 <__lshift+0x54>
 40150cc:	1085883a 	add	r2,r2,r2
 40150d0:	29400044 	addi	r5,r5,1
 40150d4:	143ffd16 	blt	r2,r16,40150cc <__alt_mem_onchip_memory2_0+0xfc013e4c>
 40150d8:	9009883a 	mov	r4,r18
 40150dc:	40148480 	call	4014848 <_Balloc>
 40150e0:	10c00504 	addi	r3,r2,20
 40150e4:	0540070e 	bge	zero,r21,4015104 <__lshift+0x80>
 40150e8:	ad6b883a 	add	r21,r21,r21
 40150ec:	ad6b883a 	add	r21,r21,r21
 40150f0:	1809883a 	mov	r4,r3
 40150f4:	1d47883a 	add	r3,r3,r21
 40150f8:	20000015 	stw	zero,0(r4)
 40150fc:	21000104 	addi	r4,r4,4
 4015100:	193ffd1e 	bne	r3,r4,40150f8 <__alt_mem_onchip_memory2_0+0xfc013e78>
 4015104:	8a000417 	ldw	r8,16(r17)
 4015108:	89000504 	addi	r4,r17,20
 401510c:	a18007cc 	andi	r6,r20,31
 4015110:	4211883a 	add	r8,r8,r8
 4015114:	4211883a 	add	r8,r8,r8
 4015118:	2211883a 	add	r8,r4,r8
 401511c:	30002326 	beq	r6,zero,40151ac <__lshift+0x128>
 4015120:	02400804 	movi	r9,32
 4015124:	4993c83a 	sub	r9,r9,r6
 4015128:	000b883a 	mov	r5,zero
 401512c:	21c00017 	ldw	r7,0(r4)
 4015130:	1815883a 	mov	r10,r3
 4015134:	18c00104 	addi	r3,r3,4
 4015138:	398e983a 	sll	r7,r7,r6
 401513c:	21000104 	addi	r4,r4,4
 4015140:	394ab03a 	or	r5,r7,r5
 4015144:	197fff15 	stw	r5,-4(r3)
 4015148:	217fff17 	ldw	r5,-4(r4)
 401514c:	2a4ad83a 	srl	r5,r5,r9
 4015150:	223ff636 	bltu	r4,r8,401512c <__alt_mem_onchip_memory2_0+0xfc013eac>
 4015154:	51400115 	stw	r5,4(r10)
 4015158:	28001a1e 	bne	r5,zero,40151c4 <__lshift+0x140>
 401515c:	843fffc4 	addi	r16,r16,-1
 4015160:	14000415 	stw	r16,16(r2)
 4015164:	88000826 	beq	r17,zero,4015188 <__lshift+0x104>
 4015168:	89000117 	ldw	r4,4(r17)
 401516c:	90c01317 	ldw	r3,76(r18)
 4015170:	2109883a 	add	r4,r4,r4
 4015174:	2109883a 	add	r4,r4,r4
 4015178:	1907883a 	add	r3,r3,r4
 401517c:	19000017 	ldw	r4,0(r3)
 4015180:	89000015 	stw	r4,0(r17)
 4015184:	1c400015 	stw	r17,0(r3)
 4015188:	dfc00617 	ldw	ra,24(sp)
 401518c:	dd400517 	ldw	r21,20(sp)
 4015190:	dd000417 	ldw	r20,16(sp)
 4015194:	dcc00317 	ldw	r19,12(sp)
 4015198:	dc800217 	ldw	r18,8(sp)
 401519c:	dc400117 	ldw	r17,4(sp)
 40151a0:	dc000017 	ldw	r16,0(sp)
 40151a4:	dec00704 	addi	sp,sp,28
 40151a8:	f800283a 	ret
 40151ac:	21400017 	ldw	r5,0(r4)
 40151b0:	18c00104 	addi	r3,r3,4
 40151b4:	21000104 	addi	r4,r4,4
 40151b8:	197fff15 	stw	r5,-4(r3)
 40151bc:	223ffb36 	bltu	r4,r8,40151ac <__alt_mem_onchip_memory2_0+0xfc013f2c>
 40151c0:	003fe606 	br	401515c <__alt_mem_onchip_memory2_0+0xfc013edc>
 40151c4:	9c000084 	addi	r16,r19,2
 40151c8:	003fe406 	br	401515c <__alt_mem_onchip_memory2_0+0xfc013edc>

040151cc <__mcmp>:
 40151cc:	20800417 	ldw	r2,16(r4)
 40151d0:	28c00417 	ldw	r3,16(r5)
 40151d4:	10c5c83a 	sub	r2,r2,r3
 40151d8:	1000111e 	bne	r2,zero,4015220 <__mcmp+0x54>
 40151dc:	18c7883a 	add	r3,r3,r3
 40151e0:	18c7883a 	add	r3,r3,r3
 40151e4:	21000504 	addi	r4,r4,20
 40151e8:	29400504 	addi	r5,r5,20
 40151ec:	20c5883a 	add	r2,r4,r3
 40151f0:	28cb883a 	add	r5,r5,r3
 40151f4:	00000106 	br	40151fc <__mcmp+0x30>
 40151f8:	20800a2e 	bgeu	r4,r2,4015224 <__mcmp+0x58>
 40151fc:	10bfff04 	addi	r2,r2,-4
 4015200:	297fff04 	addi	r5,r5,-4
 4015204:	11800017 	ldw	r6,0(r2)
 4015208:	28c00017 	ldw	r3,0(r5)
 401520c:	30fffa26 	beq	r6,r3,40151f8 <__alt_mem_onchip_memory2_0+0xfc013f78>
 4015210:	30c00236 	bltu	r6,r3,401521c <__mcmp+0x50>
 4015214:	00800044 	movi	r2,1
 4015218:	f800283a 	ret
 401521c:	00bfffc4 	movi	r2,-1
 4015220:	f800283a 	ret
 4015224:	0005883a 	mov	r2,zero
 4015228:	f800283a 	ret

0401522c <__mdiff>:
 401522c:	28c00417 	ldw	r3,16(r5)
 4015230:	30800417 	ldw	r2,16(r6)
 4015234:	defffa04 	addi	sp,sp,-24
 4015238:	dcc00315 	stw	r19,12(sp)
 401523c:	dc800215 	stw	r18,8(sp)
 4015240:	dfc00515 	stw	ra,20(sp)
 4015244:	dd000415 	stw	r20,16(sp)
 4015248:	dc400115 	stw	r17,4(sp)
 401524c:	dc000015 	stw	r16,0(sp)
 4015250:	1887c83a 	sub	r3,r3,r2
 4015254:	2825883a 	mov	r18,r5
 4015258:	3027883a 	mov	r19,r6
 401525c:	1800141e 	bne	r3,zero,40152b0 <__mdiff+0x84>
 4015260:	1085883a 	add	r2,r2,r2
 4015264:	1085883a 	add	r2,r2,r2
 4015268:	2a000504 	addi	r8,r5,20
 401526c:	34000504 	addi	r16,r6,20
 4015270:	4087883a 	add	r3,r8,r2
 4015274:	8085883a 	add	r2,r16,r2
 4015278:	00000106 	br	4015280 <__mdiff+0x54>
 401527c:	40c0592e 	bgeu	r8,r3,40153e4 <__mdiff+0x1b8>
 4015280:	18ffff04 	addi	r3,r3,-4
 4015284:	10bfff04 	addi	r2,r2,-4
 4015288:	19c00017 	ldw	r7,0(r3)
 401528c:	11400017 	ldw	r5,0(r2)
 4015290:	397ffa26 	beq	r7,r5,401527c <__alt_mem_onchip_memory2_0+0xfc013ffc>
 4015294:	3940592e 	bgeu	r7,r5,40153fc <__mdiff+0x1d0>
 4015298:	9005883a 	mov	r2,r18
 401529c:	4023883a 	mov	r17,r8
 40152a0:	9825883a 	mov	r18,r19
 40152a4:	05000044 	movi	r20,1
 40152a8:	1027883a 	mov	r19,r2
 40152ac:	00000406 	br	40152c0 <__mdiff+0x94>
 40152b0:	18005616 	blt	r3,zero,401540c <__mdiff+0x1e0>
 40152b4:	34400504 	addi	r17,r6,20
 40152b8:	2c000504 	addi	r16,r5,20
 40152bc:	0029883a 	mov	r20,zero
 40152c0:	91400117 	ldw	r5,4(r18)
 40152c4:	40148480 	call	4014848 <_Balloc>
 40152c8:	92400417 	ldw	r9,16(r18)
 40152cc:	9b000417 	ldw	r12,16(r19)
 40152d0:	12c00504 	addi	r11,r2,20
 40152d4:	4a51883a 	add	r8,r9,r9
 40152d8:	6319883a 	add	r12,r12,r12
 40152dc:	4211883a 	add	r8,r8,r8
 40152e0:	6319883a 	add	r12,r12,r12
 40152e4:	15000315 	stw	r20,12(r2)
 40152e8:	8211883a 	add	r8,r16,r8
 40152ec:	8b19883a 	add	r12,r17,r12
 40152f0:	0007883a 	mov	r3,zero
 40152f4:	81400017 	ldw	r5,0(r16)
 40152f8:	89c00017 	ldw	r7,0(r17)
 40152fc:	59800104 	addi	r6,r11,4
 4015300:	293fffcc 	andi	r4,r5,65535
 4015304:	20c7883a 	add	r3,r4,r3
 4015308:	393fffcc 	andi	r4,r7,65535
 401530c:	1909c83a 	sub	r4,r3,r4
 4015310:	280ad43a 	srli	r5,r5,16
 4015314:	380ed43a 	srli	r7,r7,16
 4015318:	2007d43a 	srai	r3,r4,16
 401531c:	213fffcc 	andi	r4,r4,65535
 4015320:	29cbc83a 	sub	r5,r5,r7
 4015324:	28c7883a 	add	r3,r5,r3
 4015328:	180a943a 	slli	r5,r3,16
 401532c:	8c400104 	addi	r17,r17,4
 4015330:	84000104 	addi	r16,r16,4
 4015334:	2908b03a 	or	r4,r5,r4
 4015338:	59000015 	stw	r4,0(r11)
 401533c:	1807d43a 	srai	r3,r3,16
 4015340:	3015883a 	mov	r10,r6
 4015344:	3017883a 	mov	r11,r6
 4015348:	8b3fea36 	bltu	r17,r12,40152f4 <__alt_mem_onchip_memory2_0+0xfc014074>
 401534c:	8200162e 	bgeu	r16,r8,40153a8 <__mdiff+0x17c>
 4015350:	8017883a 	mov	r11,r16
 4015354:	59400017 	ldw	r5,0(r11)
 4015358:	31800104 	addi	r6,r6,4
 401535c:	5ac00104 	addi	r11,r11,4
 4015360:	293fffcc 	andi	r4,r5,65535
 4015364:	20c7883a 	add	r3,r4,r3
 4015368:	280ed43a 	srli	r7,r5,16
 401536c:	180bd43a 	srai	r5,r3,16
 4015370:	193fffcc 	andi	r4,r3,65535
 4015374:	3947883a 	add	r3,r7,r5
 4015378:	180a943a 	slli	r5,r3,16
 401537c:	1807d43a 	srai	r3,r3,16
 4015380:	2908b03a 	or	r4,r5,r4
 4015384:	313fff15 	stw	r4,-4(r6)
 4015388:	5a3ff236 	bltu	r11,r8,4015354 <__alt_mem_onchip_memory2_0+0xfc0140d4>
 401538c:	0406303a 	nor	r3,zero,r16
 4015390:	1a07883a 	add	r3,r3,r8
 4015394:	1806d0ba 	srli	r3,r3,2
 4015398:	18c00044 	addi	r3,r3,1
 401539c:	18c7883a 	add	r3,r3,r3
 40153a0:	18c7883a 	add	r3,r3,r3
 40153a4:	50d5883a 	add	r10,r10,r3
 40153a8:	50ffff04 	addi	r3,r10,-4
 40153ac:	2000041e 	bne	r4,zero,40153c0 <__mdiff+0x194>
 40153b0:	18ffff04 	addi	r3,r3,-4
 40153b4:	19000017 	ldw	r4,0(r3)
 40153b8:	4a7fffc4 	addi	r9,r9,-1
 40153bc:	203ffc26 	beq	r4,zero,40153b0 <__alt_mem_onchip_memory2_0+0xfc014130>
 40153c0:	12400415 	stw	r9,16(r2)
 40153c4:	dfc00517 	ldw	ra,20(sp)
 40153c8:	dd000417 	ldw	r20,16(sp)
 40153cc:	dcc00317 	ldw	r19,12(sp)
 40153d0:	dc800217 	ldw	r18,8(sp)
 40153d4:	dc400117 	ldw	r17,4(sp)
 40153d8:	dc000017 	ldw	r16,0(sp)
 40153dc:	dec00604 	addi	sp,sp,24
 40153e0:	f800283a 	ret
 40153e4:	000b883a 	mov	r5,zero
 40153e8:	40148480 	call	4014848 <_Balloc>
 40153ec:	00c00044 	movi	r3,1
 40153f0:	10c00415 	stw	r3,16(r2)
 40153f4:	10000515 	stw	zero,20(r2)
 40153f8:	003ff206 	br	40153c4 <__alt_mem_onchip_memory2_0+0xfc014144>
 40153fc:	8023883a 	mov	r17,r16
 4015400:	0029883a 	mov	r20,zero
 4015404:	4021883a 	mov	r16,r8
 4015408:	003fad06 	br	40152c0 <__alt_mem_onchip_memory2_0+0xfc014040>
 401540c:	9005883a 	mov	r2,r18
 4015410:	94400504 	addi	r17,r18,20
 4015414:	9c000504 	addi	r16,r19,20
 4015418:	9825883a 	mov	r18,r19
 401541c:	05000044 	movi	r20,1
 4015420:	1027883a 	mov	r19,r2
 4015424:	003fa606 	br	40152c0 <__alt_mem_onchip_memory2_0+0xfc014040>

04015428 <__ulp>:
 4015428:	295ffc2c 	andhi	r5,r5,32752
 401542c:	00bf3034 	movhi	r2,64704
 4015430:	2887883a 	add	r3,r5,r2
 4015434:	00c0020e 	bge	zero,r3,4015440 <__ulp+0x18>
 4015438:	0005883a 	mov	r2,zero
 401543c:	f800283a 	ret
 4015440:	00c7c83a 	sub	r3,zero,r3
 4015444:	1807d53a 	srai	r3,r3,20
 4015448:	008004c4 	movi	r2,19
 401544c:	10c00b0e 	bge	r2,r3,401547c <__ulp+0x54>
 4015450:	18bffb04 	addi	r2,r3,-20
 4015454:	01000784 	movi	r4,30
 4015458:	0007883a 	mov	r3,zero
 401545c:	20800516 	blt	r4,r2,4015474 <__ulp+0x4c>
 4015460:	010007c4 	movi	r4,31
 4015464:	2089c83a 	sub	r4,r4,r2
 4015468:	00800044 	movi	r2,1
 401546c:	1104983a 	sll	r2,r2,r4
 4015470:	f800283a 	ret
 4015474:	00800044 	movi	r2,1
 4015478:	f800283a 	ret
 401547c:	01400234 	movhi	r5,8
 4015480:	28c7d83a 	sra	r3,r5,r3
 4015484:	0005883a 	mov	r2,zero
 4015488:	f800283a 	ret

0401548c <__b2d>:
 401548c:	defffa04 	addi	sp,sp,-24
 4015490:	dc000015 	stw	r16,0(sp)
 4015494:	24000417 	ldw	r16,16(r4)
 4015498:	dc400115 	stw	r17,4(sp)
 401549c:	24400504 	addi	r17,r4,20
 40154a0:	8421883a 	add	r16,r16,r16
 40154a4:	8421883a 	add	r16,r16,r16
 40154a8:	8c21883a 	add	r16,r17,r16
 40154ac:	dc800215 	stw	r18,8(sp)
 40154b0:	84bfff17 	ldw	r18,-4(r16)
 40154b4:	dd000415 	stw	r20,16(sp)
 40154b8:	dcc00315 	stw	r19,12(sp)
 40154bc:	9009883a 	mov	r4,r18
 40154c0:	2829883a 	mov	r20,r5
 40154c4:	dfc00515 	stw	ra,20(sp)
 40154c8:	4014b640 	call	4014b64 <__hi0bits>
 40154cc:	00c00804 	movi	r3,32
 40154d0:	1889c83a 	sub	r4,r3,r2
 40154d4:	a1000015 	stw	r4,0(r20)
 40154d8:	01000284 	movi	r4,10
 40154dc:	84ffff04 	addi	r19,r16,-4
 40154e0:	20801216 	blt	r4,r2,401552c <__b2d+0xa0>
 40154e4:	018002c4 	movi	r6,11
 40154e8:	308dc83a 	sub	r6,r6,r2
 40154ec:	9186d83a 	srl	r3,r18,r6
 40154f0:	18cffc34 	orhi	r3,r3,16368
 40154f4:	8cc0212e 	bgeu	r17,r19,401557c <__b2d+0xf0>
 40154f8:	813ffe17 	ldw	r4,-8(r16)
 40154fc:	218cd83a 	srl	r6,r4,r6
 4015500:	10800544 	addi	r2,r2,21
 4015504:	9084983a 	sll	r2,r18,r2
 4015508:	1184b03a 	or	r2,r2,r6
 401550c:	dfc00517 	ldw	ra,20(sp)
 4015510:	dd000417 	ldw	r20,16(sp)
 4015514:	dcc00317 	ldw	r19,12(sp)
 4015518:	dc800217 	ldw	r18,8(sp)
 401551c:	dc400117 	ldw	r17,4(sp)
 4015520:	dc000017 	ldw	r16,0(sp)
 4015524:	dec00604 	addi	sp,sp,24
 4015528:	f800283a 	ret
 401552c:	8cc00f2e 	bgeu	r17,r19,401556c <__b2d+0xe0>
 4015530:	117ffd44 	addi	r5,r2,-11
 4015534:	80bffe17 	ldw	r2,-8(r16)
 4015538:	28000e26 	beq	r5,zero,4015574 <__b2d+0xe8>
 401553c:	1949c83a 	sub	r4,r3,r5
 4015540:	9164983a 	sll	r18,r18,r5
 4015544:	1106d83a 	srl	r3,r2,r4
 4015548:	81bffe04 	addi	r6,r16,-8
 401554c:	948ffc34 	orhi	r18,r18,16368
 4015550:	90c6b03a 	or	r3,r18,r3
 4015554:	89800e2e 	bgeu	r17,r6,4015590 <__b2d+0x104>
 4015558:	81bffd17 	ldw	r6,-12(r16)
 401555c:	1144983a 	sll	r2,r2,r5
 4015560:	310ad83a 	srl	r5,r6,r4
 4015564:	2884b03a 	or	r2,r5,r2
 4015568:	003fe806 	br	401550c <__alt_mem_onchip_memory2_0+0xfc01428c>
 401556c:	10bffd44 	addi	r2,r2,-11
 4015570:	1000041e 	bne	r2,zero,4015584 <__b2d+0xf8>
 4015574:	90cffc34 	orhi	r3,r18,16368
 4015578:	003fe406 	br	401550c <__alt_mem_onchip_memory2_0+0xfc01428c>
 401557c:	000d883a 	mov	r6,zero
 4015580:	003fdf06 	br	4015500 <__alt_mem_onchip_memory2_0+0xfc014280>
 4015584:	90a4983a 	sll	r18,r18,r2
 4015588:	0005883a 	mov	r2,zero
 401558c:	003ff906 	br	4015574 <__alt_mem_onchip_memory2_0+0xfc0142f4>
 4015590:	1144983a 	sll	r2,r2,r5
 4015594:	003fdd06 	br	401550c <__alt_mem_onchip_memory2_0+0xfc01428c>

04015598 <__d2b>:
 4015598:	defff804 	addi	sp,sp,-32
 401559c:	dc000215 	stw	r16,8(sp)
 40155a0:	3021883a 	mov	r16,r6
 40155a4:	dc400315 	stw	r17,12(sp)
 40155a8:	8022907a 	slli	r17,r16,1
 40155ac:	dd000615 	stw	r20,24(sp)
 40155b0:	2829883a 	mov	r20,r5
 40155b4:	01400044 	movi	r5,1
 40155b8:	dcc00515 	stw	r19,20(sp)
 40155bc:	dc800415 	stw	r18,16(sp)
 40155c0:	dfc00715 	stw	ra,28(sp)
 40155c4:	3825883a 	mov	r18,r7
 40155c8:	8822d57a 	srli	r17,r17,21
 40155cc:	40148480 	call	4014848 <_Balloc>
 40155d0:	1027883a 	mov	r19,r2
 40155d4:	00800434 	movhi	r2,16
 40155d8:	10bfffc4 	addi	r2,r2,-1
 40155dc:	808c703a 	and	r6,r16,r2
 40155e0:	88000126 	beq	r17,zero,40155e8 <__d2b+0x50>
 40155e4:	31800434 	orhi	r6,r6,16
 40155e8:	d9800015 	stw	r6,0(sp)
 40155ec:	a0002426 	beq	r20,zero,4015680 <__d2b+0xe8>
 40155f0:	d9000104 	addi	r4,sp,4
 40155f4:	dd000115 	stw	r20,4(sp)
 40155f8:	4014bcc0 	call	4014bcc <__lo0bits>
 40155fc:	d8c00017 	ldw	r3,0(sp)
 4015600:	10002f1e 	bne	r2,zero,40156c0 <__d2b+0x128>
 4015604:	d9000117 	ldw	r4,4(sp)
 4015608:	99000515 	stw	r4,20(r19)
 401560c:	1821003a 	cmpeq	r16,r3,zero
 4015610:	01000084 	movi	r4,2
 4015614:	2421c83a 	sub	r16,r4,r16
 4015618:	98c00615 	stw	r3,24(r19)
 401561c:	9c000415 	stw	r16,16(r19)
 4015620:	88001f1e 	bne	r17,zero,40156a0 <__d2b+0x108>
 4015624:	10bef384 	addi	r2,r2,-1074
 4015628:	90800015 	stw	r2,0(r18)
 401562c:	00900034 	movhi	r2,16384
 4015630:	10bfffc4 	addi	r2,r2,-1
 4015634:	8085883a 	add	r2,r16,r2
 4015638:	1085883a 	add	r2,r2,r2
 401563c:	1085883a 	add	r2,r2,r2
 4015640:	9885883a 	add	r2,r19,r2
 4015644:	11000517 	ldw	r4,20(r2)
 4015648:	8020917a 	slli	r16,r16,5
 401564c:	4014b640 	call	4014b64 <__hi0bits>
 4015650:	d8c00817 	ldw	r3,32(sp)
 4015654:	8085c83a 	sub	r2,r16,r2
 4015658:	18800015 	stw	r2,0(r3)
 401565c:	9805883a 	mov	r2,r19
 4015660:	dfc00717 	ldw	ra,28(sp)
 4015664:	dd000617 	ldw	r20,24(sp)
 4015668:	dcc00517 	ldw	r19,20(sp)
 401566c:	dc800417 	ldw	r18,16(sp)
 4015670:	dc400317 	ldw	r17,12(sp)
 4015674:	dc000217 	ldw	r16,8(sp)
 4015678:	dec00804 	addi	sp,sp,32
 401567c:	f800283a 	ret
 4015680:	d809883a 	mov	r4,sp
 4015684:	4014bcc0 	call	4014bcc <__lo0bits>
 4015688:	d8c00017 	ldw	r3,0(sp)
 401568c:	04000044 	movi	r16,1
 4015690:	9c000415 	stw	r16,16(r19)
 4015694:	98c00515 	stw	r3,20(r19)
 4015698:	10800804 	addi	r2,r2,32
 401569c:	883fe126 	beq	r17,zero,4015624 <__alt_mem_onchip_memory2_0+0xfc0143a4>
 40156a0:	00c00d44 	movi	r3,53
 40156a4:	8c7ef344 	addi	r17,r17,-1075
 40156a8:	88a3883a 	add	r17,r17,r2
 40156ac:	1885c83a 	sub	r2,r3,r2
 40156b0:	d8c00817 	ldw	r3,32(sp)
 40156b4:	94400015 	stw	r17,0(r18)
 40156b8:	18800015 	stw	r2,0(r3)
 40156bc:	003fe706 	br	401565c <__alt_mem_onchip_memory2_0+0xfc0143dc>
 40156c0:	01000804 	movi	r4,32
 40156c4:	2089c83a 	sub	r4,r4,r2
 40156c8:	1908983a 	sll	r4,r3,r4
 40156cc:	d9400117 	ldw	r5,4(sp)
 40156d0:	1886d83a 	srl	r3,r3,r2
 40156d4:	2148b03a 	or	r4,r4,r5
 40156d8:	99000515 	stw	r4,20(r19)
 40156dc:	d8c00015 	stw	r3,0(sp)
 40156e0:	003fca06 	br	401560c <__alt_mem_onchip_memory2_0+0xfc01438c>

040156e4 <__ratio>:
 40156e4:	defff904 	addi	sp,sp,-28
 40156e8:	dc400315 	stw	r17,12(sp)
 40156ec:	2823883a 	mov	r17,r5
 40156f0:	d9400104 	addi	r5,sp,4
 40156f4:	dfc00615 	stw	ra,24(sp)
 40156f8:	dcc00515 	stw	r19,20(sp)
 40156fc:	dc800415 	stw	r18,16(sp)
 4015700:	2027883a 	mov	r19,r4
 4015704:	dc000215 	stw	r16,8(sp)
 4015708:	401548c0 	call	401548c <__b2d>
 401570c:	d80b883a 	mov	r5,sp
 4015710:	8809883a 	mov	r4,r17
 4015714:	1025883a 	mov	r18,r2
 4015718:	1821883a 	mov	r16,r3
 401571c:	401548c0 	call	401548c <__b2d>
 4015720:	8a000417 	ldw	r8,16(r17)
 4015724:	99000417 	ldw	r4,16(r19)
 4015728:	d9400117 	ldw	r5,4(sp)
 401572c:	2209c83a 	sub	r4,r4,r8
 4015730:	2010917a 	slli	r8,r4,5
 4015734:	d9000017 	ldw	r4,0(sp)
 4015738:	2909c83a 	sub	r4,r5,r4
 401573c:	4109883a 	add	r4,r8,r4
 4015740:	01000e0e 	bge	zero,r4,401577c <__ratio+0x98>
 4015744:	2008953a 	slli	r4,r4,20
 4015748:	2421883a 	add	r16,r4,r16
 401574c:	100d883a 	mov	r6,r2
 4015750:	180f883a 	mov	r7,r3
 4015754:	9009883a 	mov	r4,r18
 4015758:	800b883a 	mov	r5,r16
 401575c:	401962c0 	call	401962c <__divdf3>
 4015760:	dfc00617 	ldw	ra,24(sp)
 4015764:	dcc00517 	ldw	r19,20(sp)
 4015768:	dc800417 	ldw	r18,16(sp)
 401576c:	dc400317 	ldw	r17,12(sp)
 4015770:	dc000217 	ldw	r16,8(sp)
 4015774:	dec00704 	addi	sp,sp,28
 4015778:	f800283a 	ret
 401577c:	2008953a 	slli	r4,r4,20
 4015780:	1907c83a 	sub	r3,r3,r4
 4015784:	003ff106 	br	401574c <__alt_mem_onchip_memory2_0+0xfc0144cc>

04015788 <_mprec_log10>:
 4015788:	defffe04 	addi	sp,sp,-8
 401578c:	dc000015 	stw	r16,0(sp)
 4015790:	dfc00115 	stw	ra,4(sp)
 4015794:	008005c4 	movi	r2,23
 4015798:	2021883a 	mov	r16,r4
 401579c:	11000d0e 	bge	r2,r4,40157d4 <_mprec_log10+0x4c>
 40157a0:	0005883a 	mov	r2,zero
 40157a4:	00cffc34 	movhi	r3,16368
 40157a8:	843fffc4 	addi	r16,r16,-1
 40157ac:	000d883a 	mov	r6,zero
 40157b0:	01d00934 	movhi	r7,16420
 40157b4:	1009883a 	mov	r4,r2
 40157b8:	180b883a 	mov	r5,r3
 40157bc:	401a2540 	call	401a254 <__muldf3>
 40157c0:	803ff91e 	bne	r16,zero,40157a8 <__alt_mem_onchip_memory2_0+0xfc014528>
 40157c4:	dfc00117 	ldw	ra,4(sp)
 40157c8:	dc000017 	ldw	r16,0(sp)
 40157cc:	dec00204 	addi	sp,sp,8
 40157d0:	f800283a 	ret
 40157d4:	202090fa 	slli	r16,r4,3
 40157d8:	008100b4 	movhi	r2,1026
 40157dc:	109ca804 	addi	r2,r2,29344
 40157e0:	1421883a 	add	r16,r2,r16
 40157e4:	80800017 	ldw	r2,0(r16)
 40157e8:	80c00117 	ldw	r3,4(r16)
 40157ec:	dfc00117 	ldw	ra,4(sp)
 40157f0:	dc000017 	ldw	r16,0(sp)
 40157f4:	dec00204 	addi	sp,sp,8
 40157f8:	f800283a 	ret

040157fc <__copybits>:
 40157fc:	297fffc4 	addi	r5,r5,-1
 4015800:	280fd17a 	srai	r7,r5,5
 4015804:	30c00417 	ldw	r3,16(r6)
 4015808:	30800504 	addi	r2,r6,20
 401580c:	39c00044 	addi	r7,r7,1
 4015810:	18c7883a 	add	r3,r3,r3
 4015814:	39cf883a 	add	r7,r7,r7
 4015818:	18c7883a 	add	r3,r3,r3
 401581c:	39cf883a 	add	r7,r7,r7
 4015820:	10c7883a 	add	r3,r2,r3
 4015824:	21cf883a 	add	r7,r4,r7
 4015828:	10c00d2e 	bgeu	r2,r3,4015860 <__copybits+0x64>
 401582c:	200b883a 	mov	r5,r4
 4015830:	12000017 	ldw	r8,0(r2)
 4015834:	29400104 	addi	r5,r5,4
 4015838:	10800104 	addi	r2,r2,4
 401583c:	2a3fff15 	stw	r8,-4(r5)
 4015840:	10fffb36 	bltu	r2,r3,4015830 <__alt_mem_onchip_memory2_0+0xfc0145b0>
 4015844:	1985c83a 	sub	r2,r3,r6
 4015848:	10bffac4 	addi	r2,r2,-21
 401584c:	1004d0ba 	srli	r2,r2,2
 4015850:	10800044 	addi	r2,r2,1
 4015854:	1085883a 	add	r2,r2,r2
 4015858:	1085883a 	add	r2,r2,r2
 401585c:	2089883a 	add	r4,r4,r2
 4015860:	21c0032e 	bgeu	r4,r7,4015870 <__copybits+0x74>
 4015864:	20000015 	stw	zero,0(r4)
 4015868:	21000104 	addi	r4,r4,4
 401586c:	21fffd36 	bltu	r4,r7,4015864 <__alt_mem_onchip_memory2_0+0xfc0145e4>
 4015870:	f800283a 	ret

04015874 <__any_on>:
 4015874:	20c00417 	ldw	r3,16(r4)
 4015878:	2805d17a 	srai	r2,r5,5
 401587c:	21000504 	addi	r4,r4,20
 4015880:	18800d0e 	bge	r3,r2,40158b8 <__any_on+0x44>
 4015884:	18c7883a 	add	r3,r3,r3
 4015888:	18c7883a 	add	r3,r3,r3
 401588c:	20c7883a 	add	r3,r4,r3
 4015890:	20c0192e 	bgeu	r4,r3,40158f8 <__any_on+0x84>
 4015894:	18bfff17 	ldw	r2,-4(r3)
 4015898:	18ffff04 	addi	r3,r3,-4
 401589c:	1000041e 	bne	r2,zero,40158b0 <__any_on+0x3c>
 40158a0:	20c0142e 	bgeu	r4,r3,40158f4 <__any_on+0x80>
 40158a4:	18ffff04 	addi	r3,r3,-4
 40158a8:	19400017 	ldw	r5,0(r3)
 40158ac:	283ffc26 	beq	r5,zero,40158a0 <__alt_mem_onchip_memory2_0+0xfc014620>
 40158b0:	00800044 	movi	r2,1
 40158b4:	f800283a 	ret
 40158b8:	10c00a0e 	bge	r2,r3,40158e4 <__any_on+0x70>
 40158bc:	1085883a 	add	r2,r2,r2
 40158c0:	1085883a 	add	r2,r2,r2
 40158c4:	294007cc 	andi	r5,r5,31
 40158c8:	2087883a 	add	r3,r4,r2
 40158cc:	283ff026 	beq	r5,zero,4015890 <__alt_mem_onchip_memory2_0+0xfc014610>
 40158d0:	19800017 	ldw	r6,0(r3)
 40158d4:	3144d83a 	srl	r2,r6,r5
 40158d8:	114a983a 	sll	r5,r2,r5
 40158dc:	317ff41e 	bne	r6,r5,40158b0 <__alt_mem_onchip_memory2_0+0xfc014630>
 40158e0:	003feb06 	br	4015890 <__alt_mem_onchip_memory2_0+0xfc014610>
 40158e4:	1085883a 	add	r2,r2,r2
 40158e8:	1085883a 	add	r2,r2,r2
 40158ec:	2087883a 	add	r3,r4,r2
 40158f0:	003fe706 	br	4015890 <__alt_mem_onchip_memory2_0+0xfc014610>
 40158f4:	f800283a 	ret
 40158f8:	0005883a 	mov	r2,zero
 40158fc:	f800283a 	ret

04015900 <_putc_r>:
 4015900:	defffc04 	addi	sp,sp,-16
 4015904:	dc000215 	stw	r16,8(sp)
 4015908:	dfc00315 	stw	ra,12(sp)
 401590c:	2021883a 	mov	r16,r4
 4015910:	20000226 	beq	r4,zero,401591c <_putc_r+0x1c>
 4015914:	20800e17 	ldw	r2,56(r4)
 4015918:	10001b26 	beq	r2,zero,4015988 <_putc_r+0x88>
 401591c:	30800217 	ldw	r2,8(r6)
 4015920:	10bfffc4 	addi	r2,r2,-1
 4015924:	30800215 	stw	r2,8(r6)
 4015928:	10000a16 	blt	r2,zero,4015954 <_putc_r+0x54>
 401592c:	30800017 	ldw	r2,0(r6)
 4015930:	11400005 	stb	r5,0(r2)
 4015934:	30800017 	ldw	r2,0(r6)
 4015938:	10c00044 	addi	r3,r2,1
 401593c:	30c00015 	stw	r3,0(r6)
 4015940:	10800003 	ldbu	r2,0(r2)
 4015944:	dfc00317 	ldw	ra,12(sp)
 4015948:	dc000217 	ldw	r16,8(sp)
 401594c:	dec00404 	addi	sp,sp,16
 4015950:	f800283a 	ret
 4015954:	30c00617 	ldw	r3,24(r6)
 4015958:	10c00616 	blt	r2,r3,4015974 <_putc_r+0x74>
 401595c:	30800017 	ldw	r2,0(r6)
 4015960:	00c00284 	movi	r3,10
 4015964:	11400005 	stb	r5,0(r2)
 4015968:	30800017 	ldw	r2,0(r6)
 401596c:	11400003 	ldbu	r5,0(r2)
 4015970:	28fff11e 	bne	r5,r3,4015938 <__alt_mem_onchip_memory2_0+0xfc0146b8>
 4015974:	8009883a 	mov	r4,r16
 4015978:	dfc00317 	ldw	ra,12(sp)
 401597c:	dc000217 	ldw	r16,8(sp)
 4015980:	dec00404 	addi	sp,sp,16
 4015984:	40178741 	jmpi	4017874 <__swbuf_r>
 4015988:	d9400015 	stw	r5,0(sp)
 401598c:	d9800115 	stw	r6,4(sp)
 4015990:	401389c0 	call	401389c <__sinit>
 4015994:	d9800117 	ldw	r6,4(sp)
 4015998:	d9400017 	ldw	r5,0(sp)
 401599c:	003fdf06 	br	401591c <__alt_mem_onchip_memory2_0+0xfc01469c>

040159a0 <putc>:
 40159a0:	008100f4 	movhi	r2,1027
 40159a4:	defffc04 	addi	sp,sp,-16
 40159a8:	10a96004 	addi	r2,r2,-23168
 40159ac:	dc000115 	stw	r16,4(sp)
 40159b0:	14000017 	ldw	r16,0(r2)
 40159b4:	dc400215 	stw	r17,8(sp)
 40159b8:	dfc00315 	stw	ra,12(sp)
 40159bc:	2023883a 	mov	r17,r4
 40159c0:	80000226 	beq	r16,zero,40159cc <putc+0x2c>
 40159c4:	80800e17 	ldw	r2,56(r16)
 40159c8:	10001a26 	beq	r2,zero,4015a34 <putc+0x94>
 40159cc:	28800217 	ldw	r2,8(r5)
 40159d0:	10bfffc4 	addi	r2,r2,-1
 40159d4:	28800215 	stw	r2,8(r5)
 40159d8:	10000b16 	blt	r2,zero,4015a08 <putc+0x68>
 40159dc:	28800017 	ldw	r2,0(r5)
 40159e0:	14400005 	stb	r17,0(r2)
 40159e4:	28800017 	ldw	r2,0(r5)
 40159e8:	10c00044 	addi	r3,r2,1
 40159ec:	28c00015 	stw	r3,0(r5)
 40159f0:	10800003 	ldbu	r2,0(r2)
 40159f4:	dfc00317 	ldw	ra,12(sp)
 40159f8:	dc400217 	ldw	r17,8(sp)
 40159fc:	dc000117 	ldw	r16,4(sp)
 4015a00:	dec00404 	addi	sp,sp,16
 4015a04:	f800283a 	ret
 4015a08:	28c00617 	ldw	r3,24(r5)
 4015a0c:	10c00e16 	blt	r2,r3,4015a48 <putc+0xa8>
 4015a10:	28800017 	ldw	r2,0(r5)
 4015a14:	01000284 	movi	r4,10
 4015a18:	14400005 	stb	r17,0(r2)
 4015a1c:	28800017 	ldw	r2,0(r5)
 4015a20:	10c00003 	ldbu	r3,0(r2)
 4015a24:	193ff01e 	bne	r3,r4,40159e8 <__alt_mem_onchip_memory2_0+0xfc014768>
 4015a28:	280d883a 	mov	r6,r5
 4015a2c:	180b883a 	mov	r5,r3
 4015a30:	00000706 	br	4015a50 <putc+0xb0>
 4015a34:	8009883a 	mov	r4,r16
 4015a38:	d9400015 	stw	r5,0(sp)
 4015a3c:	401389c0 	call	401389c <__sinit>
 4015a40:	d9400017 	ldw	r5,0(sp)
 4015a44:	003fe106 	br	40159cc <__alt_mem_onchip_memory2_0+0xfc01474c>
 4015a48:	280d883a 	mov	r6,r5
 4015a4c:	880b883a 	mov	r5,r17
 4015a50:	8009883a 	mov	r4,r16
 4015a54:	dfc00317 	ldw	ra,12(sp)
 4015a58:	dc400217 	ldw	r17,8(sp)
 4015a5c:	dc000117 	ldw	r16,4(sp)
 4015a60:	dec00404 	addi	sp,sp,16
 4015a64:	40178741 	jmpi	4017874 <__swbuf_r>

04015a68 <_realloc_r>:
 4015a68:	defff604 	addi	sp,sp,-40
 4015a6c:	dc800215 	stw	r18,8(sp)
 4015a70:	dfc00915 	stw	ra,36(sp)
 4015a74:	df000815 	stw	fp,32(sp)
 4015a78:	ddc00715 	stw	r23,28(sp)
 4015a7c:	dd800615 	stw	r22,24(sp)
 4015a80:	dd400515 	stw	r21,20(sp)
 4015a84:	dd000415 	stw	r20,16(sp)
 4015a88:	dcc00315 	stw	r19,12(sp)
 4015a8c:	dc400115 	stw	r17,4(sp)
 4015a90:	dc000015 	stw	r16,0(sp)
 4015a94:	3025883a 	mov	r18,r6
 4015a98:	2800b726 	beq	r5,zero,4015d78 <_realloc_r+0x310>
 4015a9c:	282b883a 	mov	r21,r5
 4015aa0:	2029883a 	mov	r20,r4
 4015aa4:	401bd1c0 	call	401bd1c <__malloc_lock>
 4015aa8:	a8bfff17 	ldw	r2,-4(r21)
 4015aac:	043fff04 	movi	r16,-4
 4015ab0:	90c002c4 	addi	r3,r18,11
 4015ab4:	01000584 	movi	r4,22
 4015ab8:	acfffe04 	addi	r19,r21,-8
 4015abc:	1420703a 	and	r16,r2,r16
 4015ac0:	20c0332e 	bgeu	r4,r3,4015b90 <_realloc_r+0x128>
 4015ac4:	047ffe04 	movi	r17,-8
 4015ac8:	1c62703a 	and	r17,r3,r17
 4015acc:	8807883a 	mov	r3,r17
 4015ad0:	88005816 	blt	r17,zero,4015c34 <_realloc_r+0x1cc>
 4015ad4:	8c805736 	bltu	r17,r18,4015c34 <_realloc_r+0x1cc>
 4015ad8:	80c0300e 	bge	r16,r3,4015b9c <_realloc_r+0x134>
 4015adc:	070100b4 	movhi	fp,1026
 4015ae0:	e71e0304 	addi	fp,fp,30732
 4015ae4:	e1c00217 	ldw	r7,8(fp)
 4015ae8:	9c09883a 	add	r4,r19,r16
 4015aec:	22000117 	ldw	r8,4(r4)
 4015af0:	21c06326 	beq	r4,r7,4015c80 <_realloc_r+0x218>
 4015af4:	017fff84 	movi	r5,-2
 4015af8:	414a703a 	and	r5,r8,r5
 4015afc:	214b883a 	add	r5,r4,r5
 4015b00:	29800117 	ldw	r6,4(r5)
 4015b04:	3180004c 	andi	r6,r6,1
 4015b08:	30003f26 	beq	r6,zero,4015c08 <_realloc_r+0x1a0>
 4015b0c:	1080004c 	andi	r2,r2,1
 4015b10:	10008326 	beq	r2,zero,4015d20 <_realloc_r+0x2b8>
 4015b14:	900b883a 	mov	r5,r18
 4015b18:	a009883a 	mov	r4,r20
 4015b1c:	400e42c0 	call	400e42c <_malloc_r>
 4015b20:	1025883a 	mov	r18,r2
 4015b24:	10011e26 	beq	r2,zero,4015fa0 <_realloc_r+0x538>
 4015b28:	a93fff17 	ldw	r4,-4(r21)
 4015b2c:	10fffe04 	addi	r3,r2,-8
 4015b30:	00bfff84 	movi	r2,-2
 4015b34:	2084703a 	and	r2,r4,r2
 4015b38:	9885883a 	add	r2,r19,r2
 4015b3c:	1880ee26 	beq	r3,r2,4015ef8 <_realloc_r+0x490>
 4015b40:	81bfff04 	addi	r6,r16,-4
 4015b44:	00800904 	movi	r2,36
 4015b48:	1180b836 	bltu	r2,r6,4015e2c <_realloc_r+0x3c4>
 4015b4c:	00c004c4 	movi	r3,19
 4015b50:	19809636 	bltu	r3,r6,4015dac <_realloc_r+0x344>
 4015b54:	9005883a 	mov	r2,r18
 4015b58:	a807883a 	mov	r3,r21
 4015b5c:	19000017 	ldw	r4,0(r3)
 4015b60:	11000015 	stw	r4,0(r2)
 4015b64:	19000117 	ldw	r4,4(r3)
 4015b68:	11000115 	stw	r4,4(r2)
 4015b6c:	18c00217 	ldw	r3,8(r3)
 4015b70:	10c00215 	stw	r3,8(r2)
 4015b74:	a80b883a 	mov	r5,r21
 4015b78:	a009883a 	mov	r4,r20
 4015b7c:	4013a100 	call	4013a10 <_free_r>
 4015b80:	a009883a 	mov	r4,r20
 4015b84:	401bd400 	call	401bd40 <__malloc_unlock>
 4015b88:	9005883a 	mov	r2,r18
 4015b8c:	00001206 	br	4015bd8 <_realloc_r+0x170>
 4015b90:	00c00404 	movi	r3,16
 4015b94:	1823883a 	mov	r17,r3
 4015b98:	003fce06 	br	4015ad4 <__alt_mem_onchip_memory2_0+0xfc014854>
 4015b9c:	a825883a 	mov	r18,r21
 4015ba0:	8445c83a 	sub	r2,r16,r17
 4015ba4:	00c003c4 	movi	r3,15
 4015ba8:	18802636 	bltu	r3,r2,4015c44 <_realloc_r+0x1dc>
 4015bac:	99800117 	ldw	r6,4(r19)
 4015bb0:	9c07883a 	add	r3,r19,r16
 4015bb4:	3180004c 	andi	r6,r6,1
 4015bb8:	3420b03a 	or	r16,r6,r16
 4015bbc:	9c000115 	stw	r16,4(r19)
 4015bc0:	18800117 	ldw	r2,4(r3)
 4015bc4:	10800054 	ori	r2,r2,1
 4015bc8:	18800115 	stw	r2,4(r3)
 4015bcc:	a009883a 	mov	r4,r20
 4015bd0:	401bd400 	call	401bd40 <__malloc_unlock>
 4015bd4:	9005883a 	mov	r2,r18
 4015bd8:	dfc00917 	ldw	ra,36(sp)
 4015bdc:	df000817 	ldw	fp,32(sp)
 4015be0:	ddc00717 	ldw	r23,28(sp)
 4015be4:	dd800617 	ldw	r22,24(sp)
 4015be8:	dd400517 	ldw	r21,20(sp)
 4015bec:	dd000417 	ldw	r20,16(sp)
 4015bf0:	dcc00317 	ldw	r19,12(sp)
 4015bf4:	dc800217 	ldw	r18,8(sp)
 4015bf8:	dc400117 	ldw	r17,4(sp)
 4015bfc:	dc000017 	ldw	r16,0(sp)
 4015c00:	dec00a04 	addi	sp,sp,40
 4015c04:	f800283a 	ret
 4015c08:	017fff04 	movi	r5,-4
 4015c0c:	414a703a 	and	r5,r8,r5
 4015c10:	814d883a 	add	r6,r16,r5
 4015c14:	30c01f16 	blt	r6,r3,4015c94 <_realloc_r+0x22c>
 4015c18:	20800317 	ldw	r2,12(r4)
 4015c1c:	20c00217 	ldw	r3,8(r4)
 4015c20:	a825883a 	mov	r18,r21
 4015c24:	3021883a 	mov	r16,r6
 4015c28:	18800315 	stw	r2,12(r3)
 4015c2c:	10c00215 	stw	r3,8(r2)
 4015c30:	003fdb06 	br	4015ba0 <__alt_mem_onchip_memory2_0+0xfc014920>
 4015c34:	00800304 	movi	r2,12
 4015c38:	a0800015 	stw	r2,0(r20)
 4015c3c:	0005883a 	mov	r2,zero
 4015c40:	003fe506 	br	4015bd8 <__alt_mem_onchip_memory2_0+0xfc014958>
 4015c44:	98c00117 	ldw	r3,4(r19)
 4015c48:	9c4b883a 	add	r5,r19,r17
 4015c4c:	11000054 	ori	r4,r2,1
 4015c50:	18c0004c 	andi	r3,r3,1
 4015c54:	1c62b03a 	or	r17,r3,r17
 4015c58:	9c400115 	stw	r17,4(r19)
 4015c5c:	29000115 	stw	r4,4(r5)
 4015c60:	2885883a 	add	r2,r5,r2
 4015c64:	10c00117 	ldw	r3,4(r2)
 4015c68:	29400204 	addi	r5,r5,8
 4015c6c:	a009883a 	mov	r4,r20
 4015c70:	18c00054 	ori	r3,r3,1
 4015c74:	10c00115 	stw	r3,4(r2)
 4015c78:	4013a100 	call	4013a10 <_free_r>
 4015c7c:	003fd306 	br	4015bcc <__alt_mem_onchip_memory2_0+0xfc01494c>
 4015c80:	017fff04 	movi	r5,-4
 4015c84:	414a703a 	and	r5,r8,r5
 4015c88:	89800404 	addi	r6,r17,16
 4015c8c:	8151883a 	add	r8,r16,r5
 4015c90:	4180590e 	bge	r8,r6,4015df8 <_realloc_r+0x390>
 4015c94:	1080004c 	andi	r2,r2,1
 4015c98:	103f9e1e 	bne	r2,zero,4015b14 <__alt_mem_onchip_memory2_0+0xfc014894>
 4015c9c:	adbffe17 	ldw	r22,-8(r21)
 4015ca0:	00bfff04 	movi	r2,-4
 4015ca4:	9dadc83a 	sub	r22,r19,r22
 4015ca8:	b1800117 	ldw	r6,4(r22)
 4015cac:	3084703a 	and	r2,r6,r2
 4015cb0:	20002026 	beq	r4,zero,4015d34 <_realloc_r+0x2cc>
 4015cb4:	80af883a 	add	r23,r16,r2
 4015cb8:	b96f883a 	add	r23,r23,r5
 4015cbc:	21c05f26 	beq	r4,r7,4015e3c <_realloc_r+0x3d4>
 4015cc0:	b8c01c16 	blt	r23,r3,4015d34 <_realloc_r+0x2cc>
 4015cc4:	20800317 	ldw	r2,12(r4)
 4015cc8:	20c00217 	ldw	r3,8(r4)
 4015ccc:	81bfff04 	addi	r6,r16,-4
 4015cd0:	01000904 	movi	r4,36
 4015cd4:	18800315 	stw	r2,12(r3)
 4015cd8:	10c00215 	stw	r3,8(r2)
 4015cdc:	b0c00217 	ldw	r3,8(r22)
 4015ce0:	b0800317 	ldw	r2,12(r22)
 4015ce4:	b4800204 	addi	r18,r22,8
 4015ce8:	18800315 	stw	r2,12(r3)
 4015cec:	10c00215 	stw	r3,8(r2)
 4015cf0:	21801b36 	bltu	r4,r6,4015d60 <_realloc_r+0x2f8>
 4015cf4:	008004c4 	movi	r2,19
 4015cf8:	1180352e 	bgeu	r2,r6,4015dd0 <_realloc_r+0x368>
 4015cfc:	a8800017 	ldw	r2,0(r21)
 4015d00:	b0800215 	stw	r2,8(r22)
 4015d04:	a8800117 	ldw	r2,4(r21)
 4015d08:	b0800315 	stw	r2,12(r22)
 4015d0c:	008006c4 	movi	r2,27
 4015d10:	11807f36 	bltu	r2,r6,4015f10 <_realloc_r+0x4a8>
 4015d14:	b0800404 	addi	r2,r22,16
 4015d18:	ad400204 	addi	r21,r21,8
 4015d1c:	00002d06 	br	4015dd4 <_realloc_r+0x36c>
 4015d20:	adbffe17 	ldw	r22,-8(r21)
 4015d24:	00bfff04 	movi	r2,-4
 4015d28:	9dadc83a 	sub	r22,r19,r22
 4015d2c:	b1000117 	ldw	r4,4(r22)
 4015d30:	2084703a 	and	r2,r4,r2
 4015d34:	b03f7726 	beq	r22,zero,4015b14 <__alt_mem_onchip_memory2_0+0xfc014894>
 4015d38:	80af883a 	add	r23,r16,r2
 4015d3c:	b8ff7516 	blt	r23,r3,4015b14 <__alt_mem_onchip_memory2_0+0xfc014894>
 4015d40:	b0800317 	ldw	r2,12(r22)
 4015d44:	b0c00217 	ldw	r3,8(r22)
 4015d48:	81bfff04 	addi	r6,r16,-4
 4015d4c:	01000904 	movi	r4,36
 4015d50:	18800315 	stw	r2,12(r3)
 4015d54:	10c00215 	stw	r3,8(r2)
 4015d58:	b4800204 	addi	r18,r22,8
 4015d5c:	21bfe52e 	bgeu	r4,r6,4015cf4 <__alt_mem_onchip_memory2_0+0xfc014a74>
 4015d60:	a80b883a 	mov	r5,r21
 4015d64:	9009883a 	mov	r4,r18
 4015d68:	40146ec0 	call	40146ec <memmove>
 4015d6c:	b821883a 	mov	r16,r23
 4015d70:	b027883a 	mov	r19,r22
 4015d74:	003f8a06 	br	4015ba0 <__alt_mem_onchip_memory2_0+0xfc014920>
 4015d78:	300b883a 	mov	r5,r6
 4015d7c:	dfc00917 	ldw	ra,36(sp)
 4015d80:	df000817 	ldw	fp,32(sp)
 4015d84:	ddc00717 	ldw	r23,28(sp)
 4015d88:	dd800617 	ldw	r22,24(sp)
 4015d8c:	dd400517 	ldw	r21,20(sp)
 4015d90:	dd000417 	ldw	r20,16(sp)
 4015d94:	dcc00317 	ldw	r19,12(sp)
 4015d98:	dc800217 	ldw	r18,8(sp)
 4015d9c:	dc400117 	ldw	r17,4(sp)
 4015da0:	dc000017 	ldw	r16,0(sp)
 4015da4:	dec00a04 	addi	sp,sp,40
 4015da8:	400e42c1 	jmpi	400e42c <_malloc_r>
 4015dac:	a8c00017 	ldw	r3,0(r21)
 4015db0:	90c00015 	stw	r3,0(r18)
 4015db4:	a8c00117 	ldw	r3,4(r21)
 4015db8:	90c00115 	stw	r3,4(r18)
 4015dbc:	00c006c4 	movi	r3,27
 4015dc0:	19804536 	bltu	r3,r6,4015ed8 <_realloc_r+0x470>
 4015dc4:	90800204 	addi	r2,r18,8
 4015dc8:	a8c00204 	addi	r3,r21,8
 4015dcc:	003f6306 	br	4015b5c <__alt_mem_onchip_memory2_0+0xfc0148dc>
 4015dd0:	9005883a 	mov	r2,r18
 4015dd4:	a8c00017 	ldw	r3,0(r21)
 4015dd8:	b821883a 	mov	r16,r23
 4015ddc:	b027883a 	mov	r19,r22
 4015de0:	10c00015 	stw	r3,0(r2)
 4015de4:	a8c00117 	ldw	r3,4(r21)
 4015de8:	10c00115 	stw	r3,4(r2)
 4015dec:	a8c00217 	ldw	r3,8(r21)
 4015df0:	10c00215 	stw	r3,8(r2)
 4015df4:	003f6a06 	br	4015ba0 <__alt_mem_onchip_memory2_0+0xfc014920>
 4015df8:	9c67883a 	add	r19,r19,r17
 4015dfc:	4445c83a 	sub	r2,r8,r17
 4015e00:	e4c00215 	stw	r19,8(fp)
 4015e04:	10800054 	ori	r2,r2,1
 4015e08:	98800115 	stw	r2,4(r19)
 4015e0c:	a8bfff17 	ldw	r2,-4(r21)
 4015e10:	a009883a 	mov	r4,r20
 4015e14:	1080004c 	andi	r2,r2,1
 4015e18:	1462b03a 	or	r17,r2,r17
 4015e1c:	ac7fff15 	stw	r17,-4(r21)
 4015e20:	401bd400 	call	401bd40 <__malloc_unlock>
 4015e24:	a805883a 	mov	r2,r21
 4015e28:	003f6b06 	br	4015bd8 <__alt_mem_onchip_memory2_0+0xfc014958>
 4015e2c:	a80b883a 	mov	r5,r21
 4015e30:	9009883a 	mov	r4,r18
 4015e34:	40146ec0 	call	40146ec <memmove>
 4015e38:	003f4e06 	br	4015b74 <__alt_mem_onchip_memory2_0+0xfc0148f4>
 4015e3c:	89000404 	addi	r4,r17,16
 4015e40:	b93fbc16 	blt	r23,r4,4015d34 <__alt_mem_onchip_memory2_0+0xfc014ab4>
 4015e44:	b0800317 	ldw	r2,12(r22)
 4015e48:	b0c00217 	ldw	r3,8(r22)
 4015e4c:	81bfff04 	addi	r6,r16,-4
 4015e50:	01000904 	movi	r4,36
 4015e54:	18800315 	stw	r2,12(r3)
 4015e58:	10c00215 	stw	r3,8(r2)
 4015e5c:	b4800204 	addi	r18,r22,8
 4015e60:	21804336 	bltu	r4,r6,4015f70 <_realloc_r+0x508>
 4015e64:	008004c4 	movi	r2,19
 4015e68:	11803f2e 	bgeu	r2,r6,4015f68 <_realloc_r+0x500>
 4015e6c:	a8800017 	ldw	r2,0(r21)
 4015e70:	b0800215 	stw	r2,8(r22)
 4015e74:	a8800117 	ldw	r2,4(r21)
 4015e78:	b0800315 	stw	r2,12(r22)
 4015e7c:	008006c4 	movi	r2,27
 4015e80:	11803f36 	bltu	r2,r6,4015f80 <_realloc_r+0x518>
 4015e84:	b0800404 	addi	r2,r22,16
 4015e88:	ad400204 	addi	r21,r21,8
 4015e8c:	a8c00017 	ldw	r3,0(r21)
 4015e90:	10c00015 	stw	r3,0(r2)
 4015e94:	a8c00117 	ldw	r3,4(r21)
 4015e98:	10c00115 	stw	r3,4(r2)
 4015e9c:	a8c00217 	ldw	r3,8(r21)
 4015ea0:	10c00215 	stw	r3,8(r2)
 4015ea4:	b447883a 	add	r3,r22,r17
 4015ea8:	bc45c83a 	sub	r2,r23,r17
 4015eac:	e0c00215 	stw	r3,8(fp)
 4015eb0:	10800054 	ori	r2,r2,1
 4015eb4:	18800115 	stw	r2,4(r3)
 4015eb8:	b0800117 	ldw	r2,4(r22)
 4015ebc:	a009883a 	mov	r4,r20
 4015ec0:	1080004c 	andi	r2,r2,1
 4015ec4:	1462b03a 	or	r17,r2,r17
 4015ec8:	b4400115 	stw	r17,4(r22)
 4015ecc:	401bd400 	call	401bd40 <__malloc_unlock>
 4015ed0:	9005883a 	mov	r2,r18
 4015ed4:	003f4006 	br	4015bd8 <__alt_mem_onchip_memory2_0+0xfc014958>
 4015ed8:	a8c00217 	ldw	r3,8(r21)
 4015edc:	90c00215 	stw	r3,8(r18)
 4015ee0:	a8c00317 	ldw	r3,12(r21)
 4015ee4:	90c00315 	stw	r3,12(r18)
 4015ee8:	30801126 	beq	r6,r2,4015f30 <_realloc_r+0x4c8>
 4015eec:	90800404 	addi	r2,r18,16
 4015ef0:	a8c00404 	addi	r3,r21,16
 4015ef4:	003f1906 	br	4015b5c <__alt_mem_onchip_memory2_0+0xfc0148dc>
 4015ef8:	90ffff17 	ldw	r3,-4(r18)
 4015efc:	00bfff04 	movi	r2,-4
 4015f00:	a825883a 	mov	r18,r21
 4015f04:	1884703a 	and	r2,r3,r2
 4015f08:	80a1883a 	add	r16,r16,r2
 4015f0c:	003f2406 	br	4015ba0 <__alt_mem_onchip_memory2_0+0xfc014920>
 4015f10:	a8800217 	ldw	r2,8(r21)
 4015f14:	b0800415 	stw	r2,16(r22)
 4015f18:	a8800317 	ldw	r2,12(r21)
 4015f1c:	b0800515 	stw	r2,20(r22)
 4015f20:	31000a26 	beq	r6,r4,4015f4c <_realloc_r+0x4e4>
 4015f24:	b0800604 	addi	r2,r22,24
 4015f28:	ad400404 	addi	r21,r21,16
 4015f2c:	003fa906 	br	4015dd4 <__alt_mem_onchip_memory2_0+0xfc014b54>
 4015f30:	a9000417 	ldw	r4,16(r21)
 4015f34:	90800604 	addi	r2,r18,24
 4015f38:	a8c00604 	addi	r3,r21,24
 4015f3c:	91000415 	stw	r4,16(r18)
 4015f40:	a9000517 	ldw	r4,20(r21)
 4015f44:	91000515 	stw	r4,20(r18)
 4015f48:	003f0406 	br	4015b5c <__alt_mem_onchip_memory2_0+0xfc0148dc>
 4015f4c:	a8c00417 	ldw	r3,16(r21)
 4015f50:	ad400604 	addi	r21,r21,24
 4015f54:	b0800804 	addi	r2,r22,32
 4015f58:	b0c00615 	stw	r3,24(r22)
 4015f5c:	a8ffff17 	ldw	r3,-4(r21)
 4015f60:	b0c00715 	stw	r3,28(r22)
 4015f64:	003f9b06 	br	4015dd4 <__alt_mem_onchip_memory2_0+0xfc014b54>
 4015f68:	9005883a 	mov	r2,r18
 4015f6c:	003fc706 	br	4015e8c <__alt_mem_onchip_memory2_0+0xfc014c0c>
 4015f70:	a80b883a 	mov	r5,r21
 4015f74:	9009883a 	mov	r4,r18
 4015f78:	40146ec0 	call	40146ec <memmove>
 4015f7c:	003fc906 	br	4015ea4 <__alt_mem_onchip_memory2_0+0xfc014c24>
 4015f80:	a8800217 	ldw	r2,8(r21)
 4015f84:	b0800415 	stw	r2,16(r22)
 4015f88:	a8800317 	ldw	r2,12(r21)
 4015f8c:	b0800515 	stw	r2,20(r22)
 4015f90:	31000726 	beq	r6,r4,4015fb0 <_realloc_r+0x548>
 4015f94:	b0800604 	addi	r2,r22,24
 4015f98:	ad400404 	addi	r21,r21,16
 4015f9c:	003fbb06 	br	4015e8c <__alt_mem_onchip_memory2_0+0xfc014c0c>
 4015fa0:	a009883a 	mov	r4,r20
 4015fa4:	401bd400 	call	401bd40 <__malloc_unlock>
 4015fa8:	0005883a 	mov	r2,zero
 4015fac:	003f0a06 	br	4015bd8 <__alt_mem_onchip_memory2_0+0xfc014958>
 4015fb0:	a8c00417 	ldw	r3,16(r21)
 4015fb4:	ad400604 	addi	r21,r21,24
 4015fb8:	b0800804 	addi	r2,r22,32
 4015fbc:	b0c00615 	stw	r3,24(r22)
 4015fc0:	a8ffff17 	ldw	r3,-4(r21)
 4015fc4:	b0c00715 	stw	r3,28(r22)
 4015fc8:	003fb006 	br	4015e8c <__alt_mem_onchip_memory2_0+0xfc014c0c>

04015fcc <__fpclassifyd>:
 4015fcc:	00a00034 	movhi	r2,32768
 4015fd0:	10bfffc4 	addi	r2,r2,-1
 4015fd4:	2884703a 	and	r2,r5,r2
 4015fd8:	10000726 	beq	r2,zero,4015ff8 <__fpclassifyd+0x2c>
 4015fdc:	00fffc34 	movhi	r3,65520
 4015fe0:	019ff834 	movhi	r6,32736
 4015fe4:	28c7883a 	add	r3,r5,r3
 4015fe8:	31bfffc4 	addi	r6,r6,-1
 4015fec:	30c00536 	bltu	r6,r3,4016004 <__fpclassifyd+0x38>
 4015ff0:	00800104 	movi	r2,4
 4015ff4:	f800283a 	ret
 4015ff8:	2000021e 	bne	r4,zero,4016004 <__fpclassifyd+0x38>
 4015ffc:	00800084 	movi	r2,2
 4016000:	f800283a 	ret
 4016004:	00dffc34 	movhi	r3,32752
 4016008:	019ff834 	movhi	r6,32736
 401600c:	28cb883a 	add	r5,r5,r3
 4016010:	31bfffc4 	addi	r6,r6,-1
 4016014:	317ff62e 	bgeu	r6,r5,4015ff0 <__alt_mem_onchip_memory2_0+0xfc014d70>
 4016018:	01400434 	movhi	r5,16
 401601c:	297fffc4 	addi	r5,r5,-1
 4016020:	28800236 	bltu	r5,r2,401602c <__fpclassifyd+0x60>
 4016024:	008000c4 	movi	r2,3
 4016028:	f800283a 	ret
 401602c:	10c00226 	beq	r2,r3,4016038 <__fpclassifyd+0x6c>
 4016030:	0005883a 	mov	r2,zero
 4016034:	f800283a 	ret
 4016038:	2005003a 	cmpeq	r2,r4,zero
 401603c:	f800283a 	ret

04016040 <__sread>:
 4016040:	defffe04 	addi	sp,sp,-8
 4016044:	dc000015 	stw	r16,0(sp)
 4016048:	2821883a 	mov	r16,r5
 401604c:	2940038f 	ldh	r5,14(r5)
 4016050:	dfc00115 	stw	ra,4(sp)
 4016054:	4017f780 	call	4017f78 <_read_r>
 4016058:	10000716 	blt	r2,zero,4016078 <__sread+0x38>
 401605c:	80c01417 	ldw	r3,80(r16)
 4016060:	1887883a 	add	r3,r3,r2
 4016064:	80c01415 	stw	r3,80(r16)
 4016068:	dfc00117 	ldw	ra,4(sp)
 401606c:	dc000017 	ldw	r16,0(sp)
 4016070:	dec00204 	addi	sp,sp,8
 4016074:	f800283a 	ret
 4016078:	80c0030b 	ldhu	r3,12(r16)
 401607c:	18fbffcc 	andi	r3,r3,61439
 4016080:	80c0030d 	sth	r3,12(r16)
 4016084:	dfc00117 	ldw	ra,4(sp)
 4016088:	dc000017 	ldw	r16,0(sp)
 401608c:	dec00204 	addi	sp,sp,8
 4016090:	f800283a 	ret

04016094 <__seofread>:
 4016094:	0005883a 	mov	r2,zero
 4016098:	f800283a 	ret

0401609c <__swrite>:
 401609c:	2880030b 	ldhu	r2,12(r5)
 40160a0:	defffb04 	addi	sp,sp,-20
 40160a4:	dcc00315 	stw	r19,12(sp)
 40160a8:	dc800215 	stw	r18,8(sp)
 40160ac:	dc400115 	stw	r17,4(sp)
 40160b0:	dc000015 	stw	r16,0(sp)
 40160b4:	dfc00415 	stw	ra,16(sp)
 40160b8:	10c0400c 	andi	r3,r2,256
 40160bc:	2821883a 	mov	r16,r5
 40160c0:	2023883a 	mov	r17,r4
 40160c4:	3025883a 	mov	r18,r6
 40160c8:	3827883a 	mov	r19,r7
 40160cc:	18000526 	beq	r3,zero,40160e4 <__swrite+0x48>
 40160d0:	2940038f 	ldh	r5,14(r5)
 40160d4:	01c00084 	movi	r7,2
 40160d8:	000d883a 	mov	r6,zero
 40160dc:	4017f180 	call	4017f18 <_lseek_r>
 40160e0:	8080030b 	ldhu	r2,12(r16)
 40160e4:	8140038f 	ldh	r5,14(r16)
 40160e8:	10bbffcc 	andi	r2,r2,61439
 40160ec:	980f883a 	mov	r7,r19
 40160f0:	900d883a 	mov	r6,r18
 40160f4:	8809883a 	mov	r4,r17
 40160f8:	8080030d 	sth	r2,12(r16)
 40160fc:	dfc00417 	ldw	ra,16(sp)
 4016100:	dcc00317 	ldw	r19,12(sp)
 4016104:	dc800217 	ldw	r18,8(sp)
 4016108:	dc400117 	ldw	r17,4(sp)
 401610c:	dc000017 	ldw	r16,0(sp)
 4016110:	dec00504 	addi	sp,sp,20
 4016114:	40179cc1 	jmpi	40179cc <_write_r>

04016118 <__sseek>:
 4016118:	defffe04 	addi	sp,sp,-8
 401611c:	dc000015 	stw	r16,0(sp)
 4016120:	2821883a 	mov	r16,r5
 4016124:	2940038f 	ldh	r5,14(r5)
 4016128:	dfc00115 	stw	ra,4(sp)
 401612c:	4017f180 	call	4017f18 <_lseek_r>
 4016130:	00ffffc4 	movi	r3,-1
 4016134:	10c00826 	beq	r2,r3,4016158 <__sseek+0x40>
 4016138:	80c0030b 	ldhu	r3,12(r16)
 401613c:	80801415 	stw	r2,80(r16)
 4016140:	18c40014 	ori	r3,r3,4096
 4016144:	80c0030d 	sth	r3,12(r16)
 4016148:	dfc00117 	ldw	ra,4(sp)
 401614c:	dc000017 	ldw	r16,0(sp)
 4016150:	dec00204 	addi	sp,sp,8
 4016154:	f800283a 	ret
 4016158:	80c0030b 	ldhu	r3,12(r16)
 401615c:	18fbffcc 	andi	r3,r3,61439
 4016160:	80c0030d 	sth	r3,12(r16)
 4016164:	dfc00117 	ldw	ra,4(sp)
 4016168:	dc000017 	ldw	r16,0(sp)
 401616c:	dec00204 	addi	sp,sp,8
 4016170:	f800283a 	ret

04016174 <__sclose>:
 4016174:	2940038f 	ldh	r5,14(r5)
 4016178:	4017a2c1 	jmpi	4017a2c <_close_r>

0401617c <__sprint_r.part.0>:
 401617c:	28801917 	ldw	r2,100(r5)
 4016180:	defff604 	addi	sp,sp,-40
 4016184:	dd400515 	stw	r21,20(sp)
 4016188:	dfc00915 	stw	ra,36(sp)
 401618c:	df000815 	stw	fp,32(sp)
 4016190:	ddc00715 	stw	r23,28(sp)
 4016194:	dd800615 	stw	r22,24(sp)
 4016198:	dd000415 	stw	r20,16(sp)
 401619c:	dcc00315 	stw	r19,12(sp)
 40161a0:	dc800215 	stw	r18,8(sp)
 40161a4:	dc400115 	stw	r17,4(sp)
 40161a8:	dc000015 	stw	r16,0(sp)
 40161ac:	1088000c 	andi	r2,r2,8192
 40161b0:	302b883a 	mov	r21,r6
 40161b4:	10002e26 	beq	r2,zero,4016270 <__sprint_r.part.0+0xf4>
 40161b8:	30800217 	ldw	r2,8(r6)
 40161bc:	35800017 	ldw	r22,0(r6)
 40161c0:	10002926 	beq	r2,zero,4016268 <__sprint_r.part.0+0xec>
 40161c4:	2827883a 	mov	r19,r5
 40161c8:	2029883a 	mov	r20,r4
 40161cc:	b5c00104 	addi	r23,r22,4
 40161d0:	04bfffc4 	movi	r18,-1
 40161d4:	bc400017 	ldw	r17,0(r23)
 40161d8:	b4000017 	ldw	r16,0(r22)
 40161dc:	0039883a 	mov	fp,zero
 40161e0:	8822d0ba 	srli	r17,r17,2
 40161e4:	8800031e 	bne	r17,zero,40161f4 <__sprint_r.part.0+0x78>
 40161e8:	00001806 	br	401624c <__sprint_r.part.0+0xd0>
 40161ec:	84000104 	addi	r16,r16,4
 40161f0:	8f001526 	beq	r17,fp,4016248 <__sprint_r.part.0+0xcc>
 40161f4:	81400017 	ldw	r5,0(r16)
 40161f8:	980d883a 	mov	r6,r19
 40161fc:	a009883a 	mov	r4,r20
 4016200:	4017dc40 	call	4017dc4 <_fputwc_r>
 4016204:	e7000044 	addi	fp,fp,1
 4016208:	14bff81e 	bne	r2,r18,40161ec <__alt_mem_onchip_memory2_0+0xfc014f6c>
 401620c:	9005883a 	mov	r2,r18
 4016210:	a8000215 	stw	zero,8(r21)
 4016214:	a8000115 	stw	zero,4(r21)
 4016218:	dfc00917 	ldw	ra,36(sp)
 401621c:	df000817 	ldw	fp,32(sp)
 4016220:	ddc00717 	ldw	r23,28(sp)
 4016224:	dd800617 	ldw	r22,24(sp)
 4016228:	dd400517 	ldw	r21,20(sp)
 401622c:	dd000417 	ldw	r20,16(sp)
 4016230:	dcc00317 	ldw	r19,12(sp)
 4016234:	dc800217 	ldw	r18,8(sp)
 4016238:	dc400117 	ldw	r17,4(sp)
 401623c:	dc000017 	ldw	r16,0(sp)
 4016240:	dec00a04 	addi	sp,sp,40
 4016244:	f800283a 	ret
 4016248:	a8800217 	ldw	r2,8(r21)
 401624c:	8c63883a 	add	r17,r17,r17
 4016250:	8c63883a 	add	r17,r17,r17
 4016254:	1445c83a 	sub	r2,r2,r17
 4016258:	a8800215 	stw	r2,8(r21)
 401625c:	b5800204 	addi	r22,r22,8
 4016260:	bdc00204 	addi	r23,r23,8
 4016264:	103fdb1e 	bne	r2,zero,40161d4 <__alt_mem_onchip_memory2_0+0xfc014f54>
 4016268:	0005883a 	mov	r2,zero
 401626c:	003fe806 	br	4016210 <__alt_mem_onchip_memory2_0+0xfc014f90>
 4016270:	4013d200 	call	4013d20 <__sfvwrite_r>
 4016274:	003fe606 	br	4016210 <__alt_mem_onchip_memory2_0+0xfc014f90>

04016278 <__sprint_r>:
 4016278:	30c00217 	ldw	r3,8(r6)
 401627c:	18000126 	beq	r3,zero,4016284 <__sprint_r+0xc>
 4016280:	401617c1 	jmpi	401617c <__sprint_r.part.0>
 4016284:	30000115 	stw	zero,4(r6)
 4016288:	0005883a 	mov	r2,zero
 401628c:	f800283a 	ret

04016290 <___vfiprintf_internal_r>:
 4016290:	deffca04 	addi	sp,sp,-216
 4016294:	dd403115 	stw	r21,196(sp)
 4016298:	dfc03515 	stw	ra,212(sp)
 401629c:	df003415 	stw	fp,208(sp)
 40162a0:	ddc03315 	stw	r23,204(sp)
 40162a4:	dd803215 	stw	r22,200(sp)
 40162a8:	dd003015 	stw	r20,192(sp)
 40162ac:	dcc02f15 	stw	r19,188(sp)
 40162b0:	dc802e15 	stw	r18,184(sp)
 40162b4:	dc402d15 	stw	r17,180(sp)
 40162b8:	dc002c15 	stw	r16,176(sp)
 40162bc:	d9002115 	stw	r4,132(sp)
 40162c0:	d9402015 	stw	r5,128(sp)
 40162c4:	d9c02215 	stw	r7,136(sp)
 40162c8:	302b883a 	mov	r21,r6
 40162cc:	20000226 	beq	r4,zero,40162d8 <___vfiprintf_internal_r+0x48>
 40162d0:	20800e17 	ldw	r2,56(r4)
 40162d4:	1000cf26 	beq	r2,zero,4016614 <___vfiprintf_internal_r+0x384>
 40162d8:	d8c02017 	ldw	r3,128(sp)
 40162dc:	1880030b 	ldhu	r2,12(r3)
 40162e0:	10c8000c 	andi	r3,r2,8192
 40162e4:	1800071e 	bne	r3,zero,4016304 <___vfiprintf_internal_r+0x74>
 40162e8:	d9402017 	ldw	r5,128(sp)
 40162ec:	00f7ffc4 	movi	r3,-8193
 40162f0:	10880014 	ori	r2,r2,8192
 40162f4:	29001917 	ldw	r4,100(r5)
 40162f8:	2880030d 	sth	r2,12(r5)
 40162fc:	20c6703a 	and	r3,r4,r3
 4016300:	28c01915 	stw	r3,100(r5)
 4016304:	10c0020c 	andi	r3,r2,8
 4016308:	1800a526 	beq	r3,zero,40165a0 <___vfiprintf_internal_r+0x310>
 401630c:	d9002017 	ldw	r4,128(sp)
 4016310:	20c00417 	ldw	r3,16(r4)
 4016314:	1800a226 	beq	r3,zero,40165a0 <___vfiprintf_internal_r+0x310>
 4016318:	1080068c 	andi	r2,r2,26
 401631c:	00c00284 	movi	r3,10
 4016320:	10c0a826 	beq	r2,r3,40165c4 <___vfiprintf_internal_r+0x334>
 4016324:	d9001a04 	addi	r4,sp,104
 4016328:	d94019c4 	addi	r5,sp,103
 401632c:	048100b4 	movhi	r18,1026
 4016330:	2145c83a 	sub	r2,r4,r5
 4016334:	949cda04 	addi	r18,r18,29544
 4016338:	d9001e15 	stw	r4,120(sp)
 401633c:	d9401f15 	stw	r5,124(sp)
 4016340:	dec01a15 	stw	sp,104(sp)
 4016344:	d8001c15 	stw	zero,112(sp)
 4016348:	d8001b15 	stw	zero,108(sp)
 401634c:	d811883a 	mov	r8,sp
 4016350:	d8002615 	stw	zero,152(sp)
 4016354:	d8002415 	stw	zero,144(sp)
 4016358:	d8802815 	stw	r2,160(sp)
 401635c:	a82d883a 	mov	r22,r21
 4016360:	b0800007 	ldb	r2,0(r22)
 4016364:	10040d26 	beq	r2,zero,401739c <___vfiprintf_internal_r+0x110c>
 4016368:	00c00944 	movi	r3,37
 401636c:	b029883a 	mov	r20,r22
 4016370:	10c0021e 	bne	r2,r3,401637c <___vfiprintf_internal_r+0xec>
 4016374:	00001606 	br	40163d0 <___vfiprintf_internal_r+0x140>
 4016378:	10c00326 	beq	r2,r3,4016388 <___vfiprintf_internal_r+0xf8>
 401637c:	a5000044 	addi	r20,r20,1
 4016380:	a0800007 	ldb	r2,0(r20)
 4016384:	103ffc1e 	bne	r2,zero,4016378 <__alt_mem_onchip_memory2_0+0xfc0150f8>
 4016388:	a5a1c83a 	sub	r16,r20,r22
 401638c:	80001026 	beq	r16,zero,40163d0 <___vfiprintf_internal_r+0x140>
 4016390:	d8c01c17 	ldw	r3,112(sp)
 4016394:	d8801b17 	ldw	r2,108(sp)
 4016398:	45800015 	stw	r22,0(r8)
 401639c:	80c7883a 	add	r3,r16,r3
 40163a0:	10800044 	addi	r2,r2,1
 40163a4:	44000115 	stw	r16,4(r8)
 40163a8:	d8c01c15 	stw	r3,112(sp)
 40163ac:	d8801b15 	stw	r2,108(sp)
 40163b0:	010001c4 	movi	r4,7
 40163b4:	2080750e 	bge	r4,r2,401658c <___vfiprintf_internal_r+0x2fc>
 40163b8:	1803951e 	bne	r3,zero,4017210 <___vfiprintf_internal_r+0xf80>
 40163bc:	d8c02417 	ldw	r3,144(sp)
 40163c0:	d8001b15 	stw	zero,108(sp)
 40163c4:	d811883a 	mov	r8,sp
 40163c8:	1c07883a 	add	r3,r3,r16
 40163cc:	d8c02415 	stw	r3,144(sp)
 40163d0:	a0800007 	ldb	r2,0(r20)
 40163d4:	1002e026 	beq	r2,zero,4016f58 <___vfiprintf_internal_r+0xcc8>
 40163d8:	a5800044 	addi	r22,r20,1
 40163dc:	a0c00047 	ldb	r3,1(r20)
 40163e0:	d8001d85 	stb	zero,118(sp)
 40163e4:	0027883a 	mov	r19,zero
 40163e8:	d8002305 	stb	zero,140(sp)
 40163ec:	043fffc4 	movi	r16,-1
 40163f0:	d8002515 	stw	zero,148(sp)
 40163f4:	0023883a 	mov	r17,zero
 40163f8:	05001604 	movi	r20,88
 40163fc:	05400244 	movi	r21,9
 4016400:	402f883a 	mov	r23,r8
 4016404:	b5800044 	addi	r22,r22,1
 4016408:	18bff804 	addi	r2,r3,-32
 401640c:	a0827736 	bltu	r20,r2,4016dec <___vfiprintf_internal_r+0xb5c>
 4016410:	100490ba 	slli	r2,r2,2
 4016414:	01010074 	movhi	r4,1025
 4016418:	21190a04 	addi	r4,r4,25640
 401641c:	1105883a 	add	r2,r2,r4
 4016420:	10800017 	ldw	r2,0(r2)
 4016424:	1000683a 	jmp	r2
 4016428:	04016aec 	andhi	r16,zero,1451
 401642c:	04016dec 	andhi	r16,zero,1463
 4016430:	04016dec 	andhi	r16,zero,1463
 4016434:	04016b08 	cmpgei	r16,zero,1452
 4016438:	04016dec 	andhi	r16,zero,1463
 401643c:	04016dec 	andhi	r16,zero,1463
 4016440:	04016dec 	andhi	r16,zero,1463
 4016444:	04016dec 	andhi	r16,zero,1463
 4016448:	04016dec 	andhi	r16,zero,1463
 401644c:	04016dec 	andhi	r16,zero,1463
 4016450:	04016d10 	cmplti	r16,zero,1460
 4016454:	04016d34 	movhi	r16,1460
 4016458:	04016dec 	andhi	r16,zero,1463
 401645c:	0401662c 	andhi	r16,zero,1432
 4016460:	04016d48 	cmpgei	r16,zero,1461
 4016464:	04016dec 	andhi	r16,zero,1463
 4016468:	04016b14 	movui	r16,1452
 401646c:	04016b20 	cmpeqi	r16,zero,1452
 4016470:	04016b20 	cmpeqi	r16,zero,1452
 4016474:	04016b20 	cmpeqi	r16,zero,1452
 4016478:	04016b20 	cmpeqi	r16,zero,1452
 401647c:	04016b20 	cmpeqi	r16,zero,1452
 4016480:	04016b20 	cmpeqi	r16,zero,1452
 4016484:	04016b20 	cmpeqi	r16,zero,1452
 4016488:	04016b20 	cmpeqi	r16,zero,1452
 401648c:	04016b20 	cmpeqi	r16,zero,1452
 4016490:	04016dec 	andhi	r16,zero,1463
 4016494:	04016dec 	andhi	r16,zero,1463
 4016498:	04016dec 	andhi	r16,zero,1463
 401649c:	04016dec 	andhi	r16,zero,1463
 40164a0:	04016dec 	andhi	r16,zero,1463
 40164a4:	04016dec 	andhi	r16,zero,1463
 40164a8:	04016dec 	andhi	r16,zero,1463
 40164ac:	04016dec 	andhi	r16,zero,1463
 40164b0:	04016dec 	andhi	r16,zero,1463
 40164b4:	04016dec 	andhi	r16,zero,1463
 40164b8:	04016b60 	cmpeqi	r16,zero,1453
 40164bc:	04016dec 	andhi	r16,zero,1463
 40164c0:	04016dec 	andhi	r16,zero,1463
 40164c4:	04016dec 	andhi	r16,zero,1463
 40164c8:	04016dec 	andhi	r16,zero,1463
 40164cc:	04016dec 	andhi	r16,zero,1463
 40164d0:	04016dec 	andhi	r16,zero,1463
 40164d4:	04016dec 	andhi	r16,zero,1463
 40164d8:	04016dec 	andhi	r16,zero,1463
 40164dc:	04016dec 	andhi	r16,zero,1463
 40164e0:	04016dec 	andhi	r16,zero,1463
 40164e4:	04016b9c 	xori	r16,zero,1454
 40164e8:	04016dec 	andhi	r16,zero,1463
 40164ec:	04016dec 	andhi	r16,zero,1463
 40164f0:	04016dec 	andhi	r16,zero,1463
 40164f4:	04016dec 	andhi	r16,zero,1463
 40164f8:	04016dec 	andhi	r16,zero,1463
 40164fc:	04016bf8 	rdprs	r16,zero,1455
 4016500:	04016dec 	andhi	r16,zero,1463
 4016504:	04016dec 	andhi	r16,zero,1463
 4016508:	04016c6c 	andhi	r16,zero,1457
 401650c:	04016dec 	andhi	r16,zero,1463
 4016510:	04016dec 	andhi	r16,zero,1463
 4016514:	04016dec 	andhi	r16,zero,1463
 4016518:	04016dec 	andhi	r16,zero,1463
 401651c:	04016dec 	andhi	r16,zero,1463
 4016520:	04016dec 	andhi	r16,zero,1463
 4016524:	04016dec 	andhi	r16,zero,1463
 4016528:	04016dec 	andhi	r16,zero,1463
 401652c:	04016dec 	andhi	r16,zero,1463
 4016530:	04016dec 	andhi	r16,zero,1463
 4016534:	04016a14 	movui	r16,1448
 4016538:	04016a44 	movi	r16,1449
 401653c:	04016dec 	andhi	r16,zero,1463
 4016540:	04016dec 	andhi	r16,zero,1463
 4016544:	04016dec 	andhi	r16,zero,1463
 4016548:	04016d94 	movui	r16,1462
 401654c:	04016a44 	movi	r16,1449
 4016550:	04016dec 	andhi	r16,zero,1463
 4016554:	04016dec 	andhi	r16,zero,1463
 4016558:	040168ec 	andhi	r16,zero,1443
 401655c:	04016dec 	andhi	r16,zero,1463
 4016560:	04016900 	call	401690 <__alt_mem_sdram-0x3bfe970>
 4016564:	04016938 	rdprs	r16,zero,1444
 4016568:	04016638 	rdprs	r16,zero,1432
 401656c:	040168e0 	cmpeqi	r16,zero,1443
 4016570:	04016dec 	andhi	r16,zero,1463
 4016574:	04016cac 	andhi	r16,zero,1458
 4016578:	04016dec 	andhi	r16,zero,1463
 401657c:	04016cf8 	rdprs	r16,zero,1459
 4016580:	04016dec 	andhi	r16,zero,1463
 4016584:	04016dec 	andhi	r16,zero,1463
 4016588:	040169bc 	xorhi	r16,zero,1446
 401658c:	42000204 	addi	r8,r8,8
 4016590:	d8c02417 	ldw	r3,144(sp)
 4016594:	1c07883a 	add	r3,r3,r16
 4016598:	d8c02415 	stw	r3,144(sp)
 401659c:	003f8c06 	br	40163d0 <__alt_mem_onchip_memory2_0+0xfc015150>
 40165a0:	d9402017 	ldw	r5,128(sp)
 40165a4:	d9002117 	ldw	r4,132(sp)
 40165a8:	40118900 	call	4011890 <__swsetup_r>
 40165ac:	1003c11e 	bne	r2,zero,40174b4 <___vfiprintf_internal_r+0x1224>
 40165b0:	d9402017 	ldw	r5,128(sp)
 40165b4:	00c00284 	movi	r3,10
 40165b8:	2880030b 	ldhu	r2,12(r5)
 40165bc:	1080068c 	andi	r2,r2,26
 40165c0:	10ff581e 	bne	r2,r3,4016324 <__alt_mem_onchip_memory2_0+0xfc0150a4>
 40165c4:	d8c02017 	ldw	r3,128(sp)
 40165c8:	1880038f 	ldh	r2,14(r3)
 40165cc:	103f5516 	blt	r2,zero,4016324 <__alt_mem_onchip_memory2_0+0xfc0150a4>
 40165d0:	d9c02217 	ldw	r7,136(sp)
 40165d4:	d9002117 	ldw	r4,132(sp)
 40165d8:	a80d883a 	mov	r6,r21
 40165dc:	180b883a 	mov	r5,r3
 40165e0:	40177b80 	call	40177b8 <__sbprintf>
 40165e4:	dfc03517 	ldw	ra,212(sp)
 40165e8:	df003417 	ldw	fp,208(sp)
 40165ec:	ddc03317 	ldw	r23,204(sp)
 40165f0:	dd803217 	ldw	r22,200(sp)
 40165f4:	dd403117 	ldw	r21,196(sp)
 40165f8:	dd003017 	ldw	r20,192(sp)
 40165fc:	dcc02f17 	ldw	r19,188(sp)
 4016600:	dc802e17 	ldw	r18,184(sp)
 4016604:	dc402d17 	ldw	r17,180(sp)
 4016608:	dc002c17 	ldw	r16,176(sp)
 401660c:	dec03604 	addi	sp,sp,216
 4016610:	f800283a 	ret
 4016614:	401389c0 	call	401389c <__sinit>
 4016618:	003f2f06 	br	40162d8 <__alt_mem_onchip_memory2_0+0xfc015058>
 401661c:	d8c02517 	ldw	r3,148(sp)
 4016620:	d8802215 	stw	r2,136(sp)
 4016624:	00c7c83a 	sub	r3,zero,r3
 4016628:	d8c02515 	stw	r3,148(sp)
 401662c:	8c400114 	ori	r17,r17,4
 4016630:	b0c00007 	ldb	r3,0(r22)
 4016634:	003f7306 	br	4016404 <__alt_mem_onchip_memory2_0+0xfc015184>
 4016638:	00800c04 	movi	r2,48
 401663c:	d9402217 	ldw	r5,136(sp)
 4016640:	d8801d05 	stb	r2,116(sp)
 4016644:	00801e04 	movi	r2,120
 4016648:	d8801d45 	stb	r2,117(sp)
 401664c:	d8001d85 	stb	zero,118(sp)
 4016650:	b811883a 	mov	r8,r23
 4016654:	28c00104 	addi	r3,r5,4
 4016658:	2cc00017 	ldw	r19,0(r5)
 401665c:	0029883a 	mov	r20,zero
 4016660:	88800094 	ori	r2,r17,2
 4016664:	80032516 	blt	r16,zero,40172fc <___vfiprintf_internal_r+0x106c>
 4016668:	00bfdfc4 	movi	r2,-129
 401666c:	88a2703a 	and	r17,r17,r2
 4016670:	d8c02215 	stw	r3,136(sp)
 4016674:	8c400094 	ori	r17,r17,2
 4016678:	98032a1e 	bne	r19,zero,4017324 <___vfiprintf_internal_r+0x1094>
 401667c:	008100b4 	movhi	r2,1026
 4016680:	109c7a04 	addi	r2,r2,29160
 4016684:	d8802615 	stw	r2,152(sp)
 4016688:	002b883a 	mov	r21,zero
 401668c:	8001741e 	bne	r16,zero,4016c60 <___vfiprintf_internal_r+0x9d0>
 4016690:	0021883a 	mov	r16,zero
 4016694:	0029883a 	mov	r20,zero
 4016698:	ddc01a04 	addi	r23,sp,104
 401669c:	8027883a 	mov	r19,r16
 40166a0:	8500010e 	bge	r16,r20,40166a8 <___vfiprintf_internal_r+0x418>
 40166a4:	a027883a 	mov	r19,r20
 40166a8:	ad403fcc 	andi	r21,r21,255
 40166ac:	ad40201c 	xori	r21,r21,128
 40166b0:	ad7fe004 	addi	r21,r21,-128
 40166b4:	a8000126 	beq	r21,zero,40166bc <___vfiprintf_internal_r+0x42c>
 40166b8:	9cc00044 	addi	r19,r19,1
 40166bc:	89c0008c 	andi	r7,r17,2
 40166c0:	38000126 	beq	r7,zero,40166c8 <___vfiprintf_internal_r+0x438>
 40166c4:	9cc00084 	addi	r19,r19,2
 40166c8:	88c0210c 	andi	r3,r17,132
 40166cc:	1801dd1e 	bne	r3,zero,4016e44 <___vfiprintf_internal_r+0xbb4>
 40166d0:	d9402517 	ldw	r5,148(sp)
 40166d4:	2cebc83a 	sub	r21,r5,r19
 40166d8:	0541da0e 	bge	zero,r21,4016e44 <___vfiprintf_internal_r+0xbb4>
 40166dc:	07000404 	movi	fp,16
 40166e0:	d8801c17 	ldw	r2,112(sp)
 40166e4:	e543be0e 	bge	fp,r21,40175e0 <___vfiprintf_internal_r+0x1350>
 40166e8:	014100b4 	movhi	r5,1026
 40166ec:	295cde04 	addi	r5,r5,29560
 40166f0:	dc002715 	stw	r16,156(sp)
 40166f4:	d9801b17 	ldw	r6,108(sp)
 40166f8:	a821883a 	mov	r16,r21
 40166fc:	d9402315 	stw	r5,140(sp)
 4016700:	028001c4 	movi	r10,7
 4016704:	d9c02915 	stw	r7,164(sp)
 4016708:	182b883a 	mov	r21,r3
 401670c:	00000506 	br	4016724 <___vfiprintf_internal_r+0x494>
 4016710:	31000084 	addi	r4,r6,2
 4016714:	42000204 	addi	r8,r8,8
 4016718:	180d883a 	mov	r6,r3
 401671c:	843ffc04 	addi	r16,r16,-16
 4016720:	e4000f0e 	bge	fp,r16,4016760 <___vfiprintf_internal_r+0x4d0>
 4016724:	010100b4 	movhi	r4,1026
 4016728:	10800404 	addi	r2,r2,16
 401672c:	30c00044 	addi	r3,r6,1
 4016730:	211cde04 	addi	r4,r4,29560
 4016734:	41000015 	stw	r4,0(r8)
 4016738:	47000115 	stw	fp,4(r8)
 401673c:	d8801c15 	stw	r2,112(sp)
 4016740:	d8c01b15 	stw	r3,108(sp)
 4016744:	50fff20e 	bge	r10,r3,4016710 <__alt_mem_onchip_memory2_0+0xfc015490>
 4016748:	1001b21e 	bne	r2,zero,4016e14 <___vfiprintf_internal_r+0xb84>
 401674c:	843ffc04 	addi	r16,r16,-16
 4016750:	000d883a 	mov	r6,zero
 4016754:	01000044 	movi	r4,1
 4016758:	d811883a 	mov	r8,sp
 401675c:	e43ff116 	blt	fp,r16,4016724 <__alt_mem_onchip_memory2_0+0xfc0154a4>
 4016760:	a807883a 	mov	r3,r21
 4016764:	d9c02917 	ldw	r7,164(sp)
 4016768:	802b883a 	mov	r21,r16
 401676c:	dc002717 	ldw	r16,156(sp)
 4016770:	d9402317 	ldw	r5,140(sp)
 4016774:	a885883a 	add	r2,r21,r2
 4016778:	45400115 	stw	r21,4(r8)
 401677c:	41400015 	stw	r5,0(r8)
 4016780:	d8801c15 	stw	r2,112(sp)
 4016784:	d9001b15 	stw	r4,108(sp)
 4016788:	014001c4 	movi	r5,7
 401678c:	29026216 	blt	r5,r4,4017118 <___vfiprintf_internal_r+0xe88>
 4016790:	d9801d87 	ldb	r6,118(sp)
 4016794:	42000204 	addi	r8,r8,8
 4016798:	21400044 	addi	r5,r4,1
 401679c:	3001ae1e 	bne	r6,zero,4016e58 <___vfiprintf_internal_r+0xbc8>
 40167a0:	3801bb26 	beq	r7,zero,4016e90 <___vfiprintf_internal_r+0xc00>
 40167a4:	d9001d04 	addi	r4,sp,116
 40167a8:	10800084 	addi	r2,r2,2
 40167ac:	41000015 	stw	r4,0(r8)
 40167b0:	01000084 	movi	r4,2
 40167b4:	41000115 	stw	r4,4(r8)
 40167b8:	d8801c15 	stw	r2,112(sp)
 40167bc:	d9401b15 	stw	r5,108(sp)
 40167c0:	010001c4 	movi	r4,7
 40167c4:	2142680e 	bge	r4,r5,4017168 <___vfiprintf_internal_r+0xed8>
 40167c8:	1002b11e 	bne	r2,zero,4017290 <___vfiprintf_internal_r+0x1000>
 40167cc:	01802004 	movi	r6,128
 40167d0:	01400044 	movi	r5,1
 40167d4:	0009883a 	mov	r4,zero
 40167d8:	d811883a 	mov	r8,sp
 40167dc:	1981ae1e 	bne	r3,r6,4016e98 <___vfiprintf_internal_r+0xc08>
 40167e0:	d8c02517 	ldw	r3,148(sp)
 40167e4:	1cf9c83a 	sub	fp,r3,r19
 40167e8:	0701ab0e 	bge	zero,fp,4016e98 <___vfiprintf_internal_r+0xc08>
 40167ec:	05400404 	movi	r21,16
 40167f0:	af03a90e 	bge	r21,fp,4017698 <___vfiprintf_internal_r+0x1408>
 40167f4:	014100b4 	movhi	r5,1026
 40167f8:	295cda04 	addi	r5,r5,29544
 40167fc:	d9402315 	stw	r5,140(sp)
 4016800:	01c001c4 	movi	r7,7
 4016804:	00000506 	br	401681c <___vfiprintf_internal_r+0x58c>
 4016808:	21800084 	addi	r6,r4,2
 401680c:	42000204 	addi	r8,r8,8
 4016810:	1809883a 	mov	r4,r3
 4016814:	e73ffc04 	addi	fp,fp,-16
 4016818:	af000d0e 	bge	r21,fp,4016850 <___vfiprintf_internal_r+0x5c0>
 401681c:	10800404 	addi	r2,r2,16
 4016820:	20c00044 	addi	r3,r4,1
 4016824:	44800015 	stw	r18,0(r8)
 4016828:	45400115 	stw	r21,4(r8)
 401682c:	d8801c15 	stw	r2,112(sp)
 4016830:	d8c01b15 	stw	r3,108(sp)
 4016834:	38fff40e 	bge	r7,r3,4016808 <__alt_mem_onchip_memory2_0+0xfc015588>
 4016838:	10022b1e 	bne	r2,zero,40170e8 <___vfiprintf_internal_r+0xe58>
 401683c:	e73ffc04 	addi	fp,fp,-16
 4016840:	01800044 	movi	r6,1
 4016844:	0009883a 	mov	r4,zero
 4016848:	d811883a 	mov	r8,sp
 401684c:	af3ff316 	blt	r21,fp,401681c <__alt_mem_onchip_memory2_0+0xfc01559c>
 4016850:	d8c02317 	ldw	r3,140(sp)
 4016854:	1705883a 	add	r2,r2,fp
 4016858:	47000115 	stw	fp,4(r8)
 401685c:	40c00015 	stw	r3,0(r8)
 4016860:	d8801c15 	stw	r2,112(sp)
 4016864:	d9801b15 	stw	r6,108(sp)
 4016868:	00c001c4 	movi	r3,7
 401686c:	19829416 	blt	r3,r6,40172c0 <___vfiprintf_internal_r+0x1030>
 4016870:	8521c83a 	sub	r16,r16,r20
 4016874:	42000204 	addi	r8,r8,8
 4016878:	31400044 	addi	r5,r6,1
 401687c:	3009883a 	mov	r4,r6
 4016880:	04018716 	blt	zero,r16,4016ea0 <___vfiprintf_internal_r+0xc10>
 4016884:	a085883a 	add	r2,r20,r2
 4016888:	45c00015 	stw	r23,0(r8)
 401688c:	45000115 	stw	r20,4(r8)
 4016890:	d8801c15 	stw	r2,112(sp)
 4016894:	d9401b15 	stw	r5,108(sp)
 4016898:	00c001c4 	movi	r3,7
 401689c:	1941c20e 	bge	r3,r5,4016fa8 <___vfiprintf_internal_r+0xd18>
 40168a0:	1002531e 	bne	r2,zero,40171f0 <___vfiprintf_internal_r+0xf60>
 40168a4:	d8001b15 	stw	zero,108(sp)
 40168a8:	8c40010c 	andi	r17,r17,4
 40168ac:	88023226 	beq	r17,zero,4017178 <___vfiprintf_internal_r+0xee8>
 40168b0:	d9002517 	ldw	r4,148(sp)
 40168b4:	24e3c83a 	sub	r17,r4,r19
 40168b8:	04432916 	blt	zero,r17,4017560 <___vfiprintf_internal_r+0x12d0>
 40168bc:	d8802517 	ldw	r2,148(sp)
 40168c0:	14c0010e 	bge	r2,r19,40168c8 <___vfiprintf_internal_r+0x638>
 40168c4:	9805883a 	mov	r2,r19
 40168c8:	d8c02417 	ldw	r3,144(sp)
 40168cc:	1887883a 	add	r3,r3,r2
 40168d0:	d8c02415 	stw	r3,144(sp)
 40168d4:	d8001b15 	stw	zero,108(sp)
 40168d8:	d811883a 	mov	r8,sp
 40168dc:	003ea006 	br	4016360 <__alt_mem_onchip_memory2_0+0xfc0150e0>
 40168e0:	8c400814 	ori	r17,r17,32
 40168e4:	b0c00007 	ldb	r3,0(r22)
 40168e8:	003ec606 	br	4016404 <__alt_mem_onchip_memory2_0+0xfc015184>
 40168ec:	b0c00007 	ldb	r3,0(r22)
 40168f0:	00801b04 	movi	r2,108
 40168f4:	18832026 	beq	r3,r2,4017578 <___vfiprintf_internal_r+0x12e8>
 40168f8:	8c400414 	ori	r17,r17,16
 40168fc:	003ec106 	br	4016404 <__alt_mem_onchip_memory2_0+0xfc015184>
 4016900:	9cc03fcc 	andi	r19,r19,255
 4016904:	b811883a 	mov	r8,r23
 4016908:	9803981e 	bne	r19,zero,401776c <___vfiprintf_internal_r+0x14dc>
 401690c:	8880080c 	andi	r2,r17,32
 4016910:	1002be26 	beq	r2,zero,401740c <___vfiprintf_internal_r+0x117c>
 4016914:	d9002217 	ldw	r4,136(sp)
 4016918:	d9402417 	ldw	r5,144(sp)
 401691c:	20800017 	ldw	r2,0(r4)
 4016920:	2807d7fa 	srai	r3,r5,31
 4016924:	21000104 	addi	r4,r4,4
 4016928:	d9002215 	stw	r4,136(sp)
 401692c:	11400015 	stw	r5,0(r2)
 4016930:	10c00115 	stw	r3,4(r2)
 4016934:	003e8a06 	br	4016360 <__alt_mem_onchip_memory2_0+0xfc0150e0>
 4016938:	9cc03fcc 	andi	r19,r19,255
 401693c:	b811883a 	mov	r8,r23
 4016940:	9803871e 	bne	r19,zero,4017760 <___vfiprintf_internal_r+0x14d0>
 4016944:	8880080c 	andi	r2,r17,32
 4016948:	10009a26 	beq	r2,zero,4016bb4 <___vfiprintf_internal_r+0x924>
 401694c:	d9002217 	ldw	r4,136(sp)
 4016950:	d8001d85 	stb	zero,118(sp)
 4016954:	20800204 	addi	r2,r4,8
 4016958:	24c00017 	ldw	r19,0(r4)
 401695c:	25000117 	ldw	r20,4(r4)
 4016960:	8002a416 	blt	r16,zero,40173f4 <___vfiprintf_internal_r+0x1164>
 4016964:	013fdfc4 	movi	r4,-129
 4016968:	9d06b03a 	or	r3,r19,r20
 401696c:	d8802215 	stw	r2,136(sp)
 4016970:	8922703a 	and	r17,r17,r4
 4016974:	18009b26 	beq	r3,zero,4016be4 <___vfiprintf_internal_r+0x954>
 4016978:	002b883a 	mov	r21,zero
 401697c:	ddc01a04 	addi	r23,sp,104
 4016980:	9806d0fa 	srli	r3,r19,3
 4016984:	a008977a 	slli	r4,r20,29
 4016988:	a028d0fa 	srli	r20,r20,3
 401698c:	9cc001cc 	andi	r19,r19,7
 4016990:	98800c04 	addi	r2,r19,48
 4016994:	bdffffc4 	addi	r23,r23,-1
 4016998:	20e6b03a 	or	r19,r4,r3
 401699c:	b8800005 	stb	r2,0(r23)
 40169a0:	9d06b03a 	or	r3,r19,r20
 40169a4:	183ff61e 	bne	r3,zero,4016980 <__alt_mem_onchip_memory2_0+0xfc015700>
 40169a8:	88c0004c 	andi	r3,r17,1
 40169ac:	18021f1e 	bne	r3,zero,401722c <___vfiprintf_internal_r+0xf9c>
 40169b0:	d9401e17 	ldw	r5,120(sp)
 40169b4:	2de9c83a 	sub	r20,r5,r23
 40169b8:	003f3806 	br	401669c <__alt_mem_onchip_memory2_0+0xfc01541c>
 40169bc:	9cc03fcc 	andi	r19,r19,255
 40169c0:	b811883a 	mov	r8,r23
 40169c4:	98034f1e 	bne	r19,zero,4017704 <___vfiprintf_internal_r+0x1474>
 40169c8:	008100b4 	movhi	r2,1026
 40169cc:	109c7a04 	addi	r2,r2,29160
 40169d0:	d8802615 	stw	r2,152(sp)
 40169d4:	8880080c 	andi	r2,r17,32
 40169d8:	1000ac26 	beq	r2,zero,4016c8c <___vfiprintf_internal_r+0x9fc>
 40169dc:	d9002217 	ldw	r4,136(sp)
 40169e0:	24c00017 	ldw	r19,0(r4)
 40169e4:	25000117 	ldw	r20,4(r4)
 40169e8:	21000204 	addi	r4,r4,8
 40169ec:	d9002215 	stw	r4,136(sp)
 40169f0:	8880004c 	andi	r2,r17,1
 40169f4:	1001e726 	beq	r2,zero,4017194 <___vfiprintf_internal_r+0xf04>
 40169f8:	9d04b03a 	or	r2,r19,r20
 40169fc:	10025c1e 	bne	r2,zero,4017370 <___vfiprintf_internal_r+0x10e0>
 4016a00:	d8001d85 	stb	zero,118(sp)
 4016a04:	80024416 	blt	r16,zero,4017318 <___vfiprintf_internal_r+0x1088>
 4016a08:	00bfdfc4 	movi	r2,-129
 4016a0c:	88a2703a 	and	r17,r17,r2
 4016a10:	003f1d06 	br	4016688 <__alt_mem_onchip_memory2_0+0xfc015408>
 4016a14:	d8c02217 	ldw	r3,136(sp)
 4016a18:	04c00044 	movi	r19,1
 4016a1c:	b811883a 	mov	r8,r23
 4016a20:	18800017 	ldw	r2,0(r3)
 4016a24:	18c00104 	addi	r3,r3,4
 4016a28:	d8001d85 	stb	zero,118(sp)
 4016a2c:	d8801005 	stb	r2,64(sp)
 4016a30:	d8c02215 	stw	r3,136(sp)
 4016a34:	9829883a 	mov	r20,r19
 4016a38:	ddc01004 	addi	r23,sp,64
 4016a3c:	0021883a 	mov	r16,zero
 4016a40:	003f1e06 	br	40166bc <__alt_mem_onchip_memory2_0+0xfc01543c>
 4016a44:	9cc03fcc 	andi	r19,r19,255
 4016a48:	b811883a 	mov	r8,r23
 4016a4c:	9803331e 	bne	r19,zero,401771c <___vfiprintf_internal_r+0x148c>
 4016a50:	8880080c 	andi	r2,r17,32
 4016a54:	10004826 	beq	r2,zero,4016b78 <___vfiprintf_internal_r+0x8e8>
 4016a58:	d9002217 	ldw	r4,136(sp)
 4016a5c:	20800117 	ldw	r2,4(r4)
 4016a60:	24c00017 	ldw	r19,0(r4)
 4016a64:	21000204 	addi	r4,r4,8
 4016a68:	d9002215 	stw	r4,136(sp)
 4016a6c:	1029883a 	mov	r20,r2
 4016a70:	10024c16 	blt	r2,zero,40173a4 <___vfiprintf_internal_r+0x1114>
 4016a74:	dd401d83 	ldbu	r21,118(sp)
 4016a78:	80007116 	blt	r16,zero,4016c40 <___vfiprintf_internal_r+0x9b0>
 4016a7c:	00ffdfc4 	movi	r3,-129
 4016a80:	9d04b03a 	or	r2,r19,r20
 4016a84:	88e2703a 	and	r17,r17,r3
 4016a88:	1000d126 	beq	r2,zero,4016dd0 <___vfiprintf_internal_r+0xb40>
 4016a8c:	a0023526 	beq	r20,zero,4017364 <___vfiprintf_internal_r+0x10d4>
 4016a90:	ddc01a04 	addi	r23,sp,104
 4016a94:	4039883a 	mov	fp,r8
 4016a98:	9809883a 	mov	r4,r19
 4016a9c:	a00b883a 	mov	r5,r20
 4016aa0:	01800284 	movi	r6,10
 4016aa4:	000f883a 	mov	r7,zero
 4016aa8:	40187bc0 	call	40187bc <__umoddi3>
 4016aac:	10800c04 	addi	r2,r2,48
 4016ab0:	bdffffc4 	addi	r23,r23,-1
 4016ab4:	9809883a 	mov	r4,r19
 4016ab8:	a00b883a 	mov	r5,r20
 4016abc:	b8800005 	stb	r2,0(r23)
 4016ac0:	01800284 	movi	r6,10
 4016ac4:	000f883a 	mov	r7,zero
 4016ac8:	40181c00 	call	40181c0 <__udivdi3>
 4016acc:	1027883a 	mov	r19,r2
 4016ad0:	10c4b03a 	or	r2,r2,r3
 4016ad4:	1829883a 	mov	r20,r3
 4016ad8:	103fef1e 	bne	r2,zero,4016a98 <__alt_mem_onchip_memory2_0+0xfc015818>
 4016adc:	d9001e17 	ldw	r4,120(sp)
 4016ae0:	e011883a 	mov	r8,fp
 4016ae4:	25e9c83a 	sub	r20,r4,r23
 4016ae8:	003eec06 	br	401669c <__alt_mem_onchip_memory2_0+0xfc01541c>
 4016aec:	d8802307 	ldb	r2,140(sp)
 4016af0:	1002361e 	bne	r2,zero,40173cc <___vfiprintf_internal_r+0x113c>
 4016af4:	00c00804 	movi	r3,32
 4016af8:	d8c02305 	stb	r3,140(sp)
 4016afc:	04c00044 	movi	r19,1
 4016b00:	b0c00007 	ldb	r3,0(r22)
 4016b04:	003e3f06 	br	4016404 <__alt_mem_onchip_memory2_0+0xfc015184>
 4016b08:	8c400054 	ori	r17,r17,1
 4016b0c:	b0c00007 	ldb	r3,0(r22)
 4016b10:	003e3c06 	br	4016404 <__alt_mem_onchip_memory2_0+0xfc015184>
 4016b14:	8c402014 	ori	r17,r17,128
 4016b18:	b0c00007 	ldb	r3,0(r22)
 4016b1c:	003e3906 	br	4016404 <__alt_mem_onchip_memory2_0+0xfc015184>
 4016b20:	dc002715 	stw	r16,156(sp)
 4016b24:	d8002515 	stw	zero,148(sp)
 4016b28:	1f3ff404 	addi	fp,r3,-48
 4016b2c:	0009883a 	mov	r4,zero
 4016b30:	b021883a 	mov	r16,r22
 4016b34:	01400284 	movi	r5,10
 4016b38:	400d2c40 	call	400d2c4 <__mulsi3>
 4016b3c:	80c00007 	ldb	r3,0(r16)
 4016b40:	e089883a 	add	r4,fp,r2
 4016b44:	b5800044 	addi	r22,r22,1
 4016b48:	1f3ff404 	addi	fp,r3,-48
 4016b4c:	b021883a 	mov	r16,r22
 4016b50:	af3ff82e 	bgeu	r21,fp,4016b34 <__alt_mem_onchip_memory2_0+0xfc0158b4>
 4016b54:	d9002515 	stw	r4,148(sp)
 4016b58:	dc002717 	ldw	r16,156(sp)
 4016b5c:	003e2a06 	br	4016408 <__alt_mem_onchip_memory2_0+0xfc015188>
 4016b60:	9cc03fcc 	andi	r19,r19,255
 4016b64:	b811883a 	mov	r8,r23
 4016b68:	9802e91e 	bne	r19,zero,4017710 <___vfiprintf_internal_r+0x1480>
 4016b6c:	8c400414 	ori	r17,r17,16
 4016b70:	8880080c 	andi	r2,r17,32
 4016b74:	103fb81e 	bne	r2,zero,4016a58 <__alt_mem_onchip_memory2_0+0xfc0157d8>
 4016b78:	8880040c 	andi	r2,r17,16
 4016b7c:	10022e26 	beq	r2,zero,4017438 <___vfiprintf_internal_r+0x11a8>
 4016b80:	d9402217 	ldw	r5,136(sp)
 4016b84:	2cc00017 	ldw	r19,0(r5)
 4016b88:	29400104 	addi	r5,r5,4
 4016b8c:	d9402215 	stw	r5,136(sp)
 4016b90:	9829d7fa 	srai	r20,r19,31
 4016b94:	a005883a 	mov	r2,r20
 4016b98:	003fb506 	br	4016a70 <__alt_mem_onchip_memory2_0+0xfc0157f0>
 4016b9c:	9cc03fcc 	andi	r19,r19,255
 4016ba0:	b811883a 	mov	r8,r23
 4016ba4:	9802fa1e 	bne	r19,zero,4017790 <___vfiprintf_internal_r+0x1500>
 4016ba8:	8c400414 	ori	r17,r17,16
 4016bac:	8880080c 	andi	r2,r17,32
 4016bb0:	103f661e 	bne	r2,zero,401694c <__alt_mem_onchip_memory2_0+0xfc0156cc>
 4016bb4:	8880040c 	andi	r2,r17,16
 4016bb8:	10020626 	beq	r2,zero,40173d4 <___vfiprintf_internal_r+0x1144>
 4016bbc:	d9402217 	ldw	r5,136(sp)
 4016bc0:	d8001d85 	stb	zero,118(sp)
 4016bc4:	0029883a 	mov	r20,zero
 4016bc8:	28800104 	addi	r2,r5,4
 4016bcc:	2cc00017 	ldw	r19,0(r5)
 4016bd0:	80020816 	blt	r16,zero,40173f4 <___vfiprintf_internal_r+0x1164>
 4016bd4:	00ffdfc4 	movi	r3,-129
 4016bd8:	d8802215 	stw	r2,136(sp)
 4016bdc:	88e2703a 	and	r17,r17,r3
 4016be0:	983f651e 	bne	r19,zero,4016978 <__alt_mem_onchip_memory2_0+0xfc0156f8>
 4016be4:	002b883a 	mov	r21,zero
 4016be8:	8002cf26 	beq	r16,zero,4017728 <___vfiprintf_internal_r+0x1498>
 4016bec:	0027883a 	mov	r19,zero
 4016bf0:	0029883a 	mov	r20,zero
 4016bf4:	003f6106 	br	401697c <__alt_mem_onchip_memory2_0+0xfc0156fc>
 4016bf8:	9cc03fcc 	andi	r19,r19,255
 4016bfc:	b811883a 	mov	r8,r23
 4016c00:	9802e01e 	bne	r19,zero,4017784 <___vfiprintf_internal_r+0x14f4>
 4016c04:	8c400414 	ori	r17,r17,16
 4016c08:	8880080c 	andi	r2,r17,32
 4016c0c:	1000641e 	bne	r2,zero,4016da0 <___vfiprintf_internal_r+0xb10>
 4016c10:	8880040c 	andi	r2,r17,16
 4016c14:	1001c81e 	bne	r2,zero,4017338 <___vfiprintf_internal_r+0x10a8>
 4016c18:	8880100c 	andi	r2,r17,64
 4016c1c:	d8001d85 	stb	zero,118(sp)
 4016c20:	1002281e 	bne	r2,zero,40174c4 <___vfiprintf_internal_r+0x1234>
 4016c24:	d9002217 	ldw	r4,136(sp)
 4016c28:	0029883a 	mov	r20,zero
 4016c2c:	20800104 	addi	r2,r4,4
 4016c30:	24c00017 	ldw	r19,0(r4)
 4016c34:	8001c60e 	bge	r16,zero,4017350 <___vfiprintf_internal_r+0x10c0>
 4016c38:	d8802215 	stw	r2,136(sp)
 4016c3c:	002b883a 	mov	r21,zero
 4016c40:	9d04b03a 	or	r2,r19,r20
 4016c44:	103f911e 	bne	r2,zero,4016a8c <__alt_mem_onchip_memory2_0+0xfc01580c>
 4016c48:	00800044 	movi	r2,1
 4016c4c:	10803fcc 	andi	r2,r2,255
 4016c50:	00c00044 	movi	r3,1
 4016c54:	10c05f26 	beq	r2,r3,4016dd4 <___vfiprintf_internal_r+0xb44>
 4016c58:	00c00084 	movi	r3,2
 4016c5c:	10ffe31e 	bne	r2,r3,4016bec <__alt_mem_onchip_memory2_0+0xfc01596c>
 4016c60:	0027883a 	mov	r19,zero
 4016c64:	0029883a 	mov	r20,zero
 4016c68:	00015106 	br	40171b0 <___vfiprintf_internal_r+0xf20>
 4016c6c:	9cc03fcc 	andi	r19,r19,255
 4016c70:	b811883a 	mov	r8,r23
 4016c74:	9802c01e 	bne	r19,zero,4017778 <___vfiprintf_internal_r+0x14e8>
 4016c78:	014100b4 	movhi	r5,1026
 4016c7c:	295c7504 	addi	r5,r5,29140
 4016c80:	d9402615 	stw	r5,152(sp)
 4016c84:	8880080c 	andi	r2,r17,32
 4016c88:	103f541e 	bne	r2,zero,40169dc <__alt_mem_onchip_memory2_0+0xfc01575c>
 4016c8c:	8880040c 	andi	r2,r17,16
 4016c90:	1001f226 	beq	r2,zero,401745c <___vfiprintf_internal_r+0x11cc>
 4016c94:	d9402217 	ldw	r5,136(sp)
 4016c98:	0029883a 	mov	r20,zero
 4016c9c:	2cc00017 	ldw	r19,0(r5)
 4016ca0:	29400104 	addi	r5,r5,4
 4016ca4:	d9402215 	stw	r5,136(sp)
 4016ca8:	003f5106 	br	40169f0 <__alt_mem_onchip_memory2_0+0xfc015770>
 4016cac:	d8c02217 	ldw	r3,136(sp)
 4016cb0:	b811883a 	mov	r8,r23
 4016cb4:	d8001d85 	stb	zero,118(sp)
 4016cb8:	1dc00017 	ldw	r23,0(r3)
 4016cbc:	1f000104 	addi	fp,r3,4
 4016cc0:	b8025926 	beq	r23,zero,4017628 <___vfiprintf_internal_r+0x1398>
 4016cc4:	80023316 	blt	r16,zero,4017594 <___vfiprintf_internal_r+0x1304>
 4016cc8:	800d883a 	mov	r6,r16
 4016ccc:	000b883a 	mov	r5,zero
 4016cd0:	b809883a 	mov	r4,r23
 4016cd4:	da002a15 	stw	r8,168(sp)
 4016cd8:	40146080 	call	4014608 <memchr>
 4016cdc:	da002a17 	ldw	r8,168(sp)
 4016ce0:	10026826 	beq	r2,zero,4017684 <___vfiprintf_internal_r+0x13f4>
 4016ce4:	15e9c83a 	sub	r20,r2,r23
 4016ce8:	dd401d83 	ldbu	r21,118(sp)
 4016cec:	df002215 	stw	fp,136(sp)
 4016cf0:	0021883a 	mov	r16,zero
 4016cf4:	003e6906 	br	401669c <__alt_mem_onchip_memory2_0+0xfc01541c>
 4016cf8:	9cc03fcc 	andi	r19,r19,255
 4016cfc:	b811883a 	mov	r8,r23
 4016d00:	983fc126 	beq	r19,zero,4016c08 <__alt_mem_onchip_memory2_0+0xfc015988>
 4016d04:	d8c02303 	ldbu	r3,140(sp)
 4016d08:	d8c01d85 	stb	r3,118(sp)
 4016d0c:	003fbe06 	br	4016c08 <__alt_mem_onchip_memory2_0+0xfc015988>
 4016d10:	d9002217 	ldw	r4,136(sp)
 4016d14:	d9402217 	ldw	r5,136(sp)
 4016d18:	21000017 	ldw	r4,0(r4)
 4016d1c:	28800104 	addi	r2,r5,4
 4016d20:	d9002515 	stw	r4,148(sp)
 4016d24:	203e3d16 	blt	r4,zero,401661c <__alt_mem_onchip_memory2_0+0xfc01539c>
 4016d28:	d8802215 	stw	r2,136(sp)
 4016d2c:	b0c00007 	ldb	r3,0(r22)
 4016d30:	003db406 	br	4016404 <__alt_mem_onchip_memory2_0+0xfc015184>
 4016d34:	00c00ac4 	movi	r3,43
 4016d38:	d8c02305 	stb	r3,140(sp)
 4016d3c:	04c00044 	movi	r19,1
 4016d40:	b0c00007 	ldb	r3,0(r22)
 4016d44:	003daf06 	br	4016404 <__alt_mem_onchip_memory2_0+0xfc015184>
 4016d48:	b0c00007 	ldb	r3,0(r22)
 4016d4c:	01000a84 	movi	r4,42
 4016d50:	b4000044 	addi	r16,r22,1
 4016d54:	19025e26 	beq	r3,r4,40176d0 <___vfiprintf_internal_r+0x1440>
 4016d58:	1f3ff404 	addi	fp,r3,-48
 4016d5c:	0009883a 	mov	r4,zero
 4016d60:	af025236 	bltu	r21,fp,40176ac <___vfiprintf_internal_r+0x141c>
 4016d64:	01400284 	movi	r5,10
 4016d68:	400d2c40 	call	400d2c4 <__mulsi3>
 4016d6c:	80c00007 	ldb	r3,0(r16)
 4016d70:	1709883a 	add	r4,r2,fp
 4016d74:	85800044 	addi	r22,r16,1
 4016d78:	1f3ff404 	addi	fp,r3,-48
 4016d7c:	b021883a 	mov	r16,r22
 4016d80:	af3ff82e 	bgeu	r21,fp,4016d64 <__alt_mem_onchip_memory2_0+0xfc015ae4>
 4016d84:	2021883a 	mov	r16,r4
 4016d88:	203d9f0e 	bge	r4,zero,4016408 <__alt_mem_onchip_memory2_0+0xfc015188>
 4016d8c:	043fffc4 	movi	r16,-1
 4016d90:	003d9d06 	br	4016408 <__alt_mem_onchip_memory2_0+0xfc015188>
 4016d94:	8c401014 	ori	r17,r17,64
 4016d98:	b0c00007 	ldb	r3,0(r22)
 4016d9c:	003d9906 	br	4016404 <__alt_mem_onchip_memory2_0+0xfc015184>
 4016da0:	d9002217 	ldw	r4,136(sp)
 4016da4:	d8001d85 	stb	zero,118(sp)
 4016da8:	20c00204 	addi	r3,r4,8
 4016dac:	24c00017 	ldw	r19,0(r4)
 4016db0:	25000117 	ldw	r20,4(r4)
 4016db4:	8001e716 	blt	r16,zero,4017554 <___vfiprintf_internal_r+0x12c4>
 4016db8:	013fdfc4 	movi	r4,-129
 4016dbc:	9d04b03a 	or	r2,r19,r20
 4016dc0:	d8c02215 	stw	r3,136(sp)
 4016dc4:	8922703a 	and	r17,r17,r4
 4016dc8:	002b883a 	mov	r21,zero
 4016dcc:	103f2f1e 	bne	r2,zero,4016a8c <__alt_mem_onchip_memory2_0+0xfc01580c>
 4016dd0:	803e2f26 	beq	r16,zero,4016690 <__alt_mem_onchip_memory2_0+0xfc015410>
 4016dd4:	0027883a 	mov	r19,zero
 4016dd8:	9cc00c04 	addi	r19,r19,48
 4016ddc:	dcc019c5 	stb	r19,103(sp)
 4016de0:	dd002817 	ldw	r20,160(sp)
 4016de4:	ddc019c4 	addi	r23,sp,103
 4016de8:	003e2c06 	br	401669c <__alt_mem_onchip_memory2_0+0xfc01541c>
 4016dec:	9cc03fcc 	andi	r19,r19,255
 4016df0:	b811883a 	mov	r8,r23
 4016df4:	9802571e 	bne	r19,zero,4017754 <___vfiprintf_internal_r+0x14c4>
 4016df8:	18005726 	beq	r3,zero,4016f58 <___vfiprintf_internal_r+0xcc8>
 4016dfc:	04c00044 	movi	r19,1
 4016e00:	d8c01005 	stb	r3,64(sp)
 4016e04:	d8001d85 	stb	zero,118(sp)
 4016e08:	9829883a 	mov	r20,r19
 4016e0c:	ddc01004 	addi	r23,sp,64
 4016e10:	003f0a06 	br	4016a3c <__alt_mem_onchip_memory2_0+0xfc0157bc>
 4016e14:	d9402017 	ldw	r5,128(sp)
 4016e18:	d9002117 	ldw	r4,132(sp)
 4016e1c:	d9801a04 	addi	r6,sp,104
 4016e20:	da802a15 	stw	r10,168(sp)
 4016e24:	401617c0 	call	401617c <__sprint_r.part.0>
 4016e28:	da802a17 	ldw	r10,168(sp)
 4016e2c:	1000501e 	bne	r2,zero,4016f70 <___vfiprintf_internal_r+0xce0>
 4016e30:	d9801b17 	ldw	r6,108(sp)
 4016e34:	d8801c17 	ldw	r2,112(sp)
 4016e38:	d811883a 	mov	r8,sp
 4016e3c:	31000044 	addi	r4,r6,1
 4016e40:	003e3606 	br	401671c <__alt_mem_onchip_memory2_0+0xfc01549c>
 4016e44:	d9001b17 	ldw	r4,108(sp)
 4016e48:	d8801c17 	ldw	r2,112(sp)
 4016e4c:	21400044 	addi	r5,r4,1
 4016e50:	d9801d87 	ldb	r6,118(sp)
 4016e54:	303e5226 	beq	r6,zero,40167a0 <__alt_mem_onchip_memory2_0+0xfc015520>
 4016e58:	01800044 	movi	r6,1
 4016e5c:	d9001d84 	addi	r4,sp,118
 4016e60:	1185883a 	add	r2,r2,r6
 4016e64:	41000015 	stw	r4,0(r8)
 4016e68:	41800115 	stw	r6,4(r8)
 4016e6c:	d8801c15 	stw	r2,112(sp)
 4016e70:	d9401b15 	stw	r5,108(sp)
 4016e74:	010001c4 	movi	r4,7
 4016e78:	2140b00e 	bge	r4,r5,401713c <___vfiprintf_internal_r+0xeac>
 4016e7c:	1000f61e 	bne	r2,zero,4017258 <___vfiprintf_internal_r+0xfc8>
 4016e80:	3800b31e 	bne	r7,zero,4017150 <___vfiprintf_internal_r+0xec0>
 4016e84:	0009883a 	mov	r4,zero
 4016e88:	300b883a 	mov	r5,r6
 4016e8c:	d811883a 	mov	r8,sp
 4016e90:	01802004 	movi	r6,128
 4016e94:	19be5226 	beq	r3,r6,40167e0 <__alt_mem_onchip_memory2_0+0xfc015560>
 4016e98:	8521c83a 	sub	r16,r16,r20
 4016e9c:	043e790e 	bge	zero,r16,4016884 <__alt_mem_onchip_memory2_0+0xfc015604>
 4016ea0:	05400404 	movi	r21,16
 4016ea4:	ac01b00e 	bge	r21,r16,4017568 <___vfiprintf_internal_r+0x12d8>
 4016ea8:	014100b4 	movhi	r5,1026
 4016eac:	295cda04 	addi	r5,r5,29544
 4016eb0:	d9402315 	stw	r5,140(sp)
 4016eb4:	070001c4 	movi	fp,7
 4016eb8:	00000506 	br	4016ed0 <___vfiprintf_internal_r+0xc40>
 4016ebc:	21400084 	addi	r5,r4,2
 4016ec0:	42000204 	addi	r8,r8,8
 4016ec4:	1809883a 	mov	r4,r3
 4016ec8:	843ffc04 	addi	r16,r16,-16
 4016ecc:	ac000d0e 	bge	r21,r16,4016f04 <___vfiprintf_internal_r+0xc74>
 4016ed0:	10800404 	addi	r2,r2,16
 4016ed4:	20c00044 	addi	r3,r4,1
 4016ed8:	44800015 	stw	r18,0(r8)
 4016edc:	45400115 	stw	r21,4(r8)
 4016ee0:	d8801c15 	stw	r2,112(sp)
 4016ee4:	d8c01b15 	stw	r3,108(sp)
 4016ee8:	e0fff40e 	bge	fp,r3,4016ebc <__alt_mem_onchip_memory2_0+0xfc015c3c>
 4016eec:	1000101e 	bne	r2,zero,4016f30 <___vfiprintf_internal_r+0xca0>
 4016ef0:	843ffc04 	addi	r16,r16,-16
 4016ef4:	01400044 	movi	r5,1
 4016ef8:	0009883a 	mov	r4,zero
 4016efc:	d811883a 	mov	r8,sp
 4016f00:	ac3ff316 	blt	r21,r16,4016ed0 <__alt_mem_onchip_memory2_0+0xfc015c50>
 4016f04:	d8c02317 	ldw	r3,140(sp)
 4016f08:	1405883a 	add	r2,r2,r16
 4016f0c:	44000115 	stw	r16,4(r8)
 4016f10:	40c00015 	stw	r3,0(r8)
 4016f14:	d8801c15 	stw	r2,112(sp)
 4016f18:	d9401b15 	stw	r5,108(sp)
 4016f1c:	00c001c4 	movi	r3,7
 4016f20:	19401916 	blt	r3,r5,4016f88 <___vfiprintf_internal_r+0xcf8>
 4016f24:	42000204 	addi	r8,r8,8
 4016f28:	29400044 	addi	r5,r5,1
 4016f2c:	003e5506 	br	4016884 <__alt_mem_onchip_memory2_0+0xfc015604>
 4016f30:	d9402017 	ldw	r5,128(sp)
 4016f34:	d9002117 	ldw	r4,132(sp)
 4016f38:	d9801a04 	addi	r6,sp,104
 4016f3c:	401617c0 	call	401617c <__sprint_r.part.0>
 4016f40:	10000b1e 	bne	r2,zero,4016f70 <___vfiprintf_internal_r+0xce0>
 4016f44:	d9001b17 	ldw	r4,108(sp)
 4016f48:	d8801c17 	ldw	r2,112(sp)
 4016f4c:	d811883a 	mov	r8,sp
 4016f50:	21400044 	addi	r5,r4,1
 4016f54:	003fdc06 	br	4016ec8 <__alt_mem_onchip_memory2_0+0xfc015c48>
 4016f58:	d8801c17 	ldw	r2,112(sp)
 4016f5c:	10000426 	beq	r2,zero,4016f70 <___vfiprintf_internal_r+0xce0>
 4016f60:	d9402017 	ldw	r5,128(sp)
 4016f64:	d9002117 	ldw	r4,132(sp)
 4016f68:	d9801a04 	addi	r6,sp,104
 4016f6c:	401617c0 	call	401617c <__sprint_r.part.0>
 4016f70:	d9402017 	ldw	r5,128(sp)
 4016f74:	2880030b 	ldhu	r2,12(r5)
 4016f78:	1080100c 	andi	r2,r2,64
 4016f7c:	10014d1e 	bne	r2,zero,40174b4 <___vfiprintf_internal_r+0x1224>
 4016f80:	d8802417 	ldw	r2,144(sp)
 4016f84:	003d9706 	br	40165e4 <__alt_mem_onchip_memory2_0+0xfc015364>
 4016f88:	1000d21e 	bne	r2,zero,40172d4 <___vfiprintf_internal_r+0x1044>
 4016f8c:	00c00044 	movi	r3,1
 4016f90:	a005883a 	mov	r2,r20
 4016f94:	ddc00015 	stw	r23,0(sp)
 4016f98:	dd000115 	stw	r20,4(sp)
 4016f9c:	dd001c15 	stw	r20,112(sp)
 4016fa0:	d8c01b15 	stw	r3,108(sp)
 4016fa4:	d811883a 	mov	r8,sp
 4016fa8:	42000204 	addi	r8,r8,8
 4016fac:	8c40010c 	andi	r17,r17,4
 4016fb0:	88004026 	beq	r17,zero,40170b4 <___vfiprintf_internal_r+0xe24>
 4016fb4:	d9002517 	ldw	r4,148(sp)
 4016fb8:	24e3c83a 	sub	r17,r4,r19
 4016fbc:	04403d0e 	bge	zero,r17,40170b4 <___vfiprintf_internal_r+0xe24>
 4016fc0:	04000404 	movi	r16,16
 4016fc4:	8441a90e 	bge	r16,r17,401766c <___vfiprintf_internal_r+0x13dc>
 4016fc8:	00c100b4 	movhi	r3,1026
 4016fcc:	18dcde04 	addi	r3,r3,29560
 4016fd0:	d9001b17 	ldw	r4,108(sp)
 4016fd4:	d8c02315 	stw	r3,140(sp)
 4016fd8:	050001c4 	movi	r20,7
 4016fdc:	dd402117 	ldw	r21,132(sp)
 4016fe0:	ddc02017 	ldw	r23,128(sp)
 4016fe4:	00000506 	br	4016ffc <___vfiprintf_internal_r+0xd6c>
 4016fe8:	21400084 	addi	r5,r4,2
 4016fec:	42000204 	addi	r8,r8,8
 4016ff0:	1809883a 	mov	r4,r3
 4016ff4:	8c7ffc04 	addi	r17,r17,-16
 4016ff8:	84400f0e 	bge	r16,r17,4017038 <___vfiprintf_internal_r+0xda8>
 4016ffc:	014100b4 	movhi	r5,1026
 4017000:	10800404 	addi	r2,r2,16
 4017004:	20c00044 	addi	r3,r4,1
 4017008:	295cde04 	addi	r5,r5,29560
 401700c:	41400015 	stw	r5,0(r8)
 4017010:	44000115 	stw	r16,4(r8)
 4017014:	d8801c15 	stw	r2,112(sp)
 4017018:	d8c01b15 	stw	r3,108(sp)
 401701c:	a0fff20e 	bge	r20,r3,4016fe8 <__alt_mem_onchip_memory2_0+0xfc015d68>
 4017020:	1000141e 	bne	r2,zero,4017074 <___vfiprintf_internal_r+0xde4>
 4017024:	8c7ffc04 	addi	r17,r17,-16
 4017028:	01400044 	movi	r5,1
 401702c:	0009883a 	mov	r4,zero
 4017030:	d811883a 	mov	r8,sp
 4017034:	847ff116 	blt	r16,r17,4016ffc <__alt_mem_onchip_memory2_0+0xfc015d7c>
 4017038:	d8c02317 	ldw	r3,140(sp)
 401703c:	1445883a 	add	r2,r2,r17
 4017040:	44400115 	stw	r17,4(r8)
 4017044:	40c00015 	stw	r3,0(r8)
 4017048:	d8801c15 	stw	r2,112(sp)
 401704c:	d9401b15 	stw	r5,108(sp)
 4017050:	00c001c4 	movi	r3,7
 4017054:	1940170e 	bge	r3,r5,40170b4 <___vfiprintf_internal_r+0xe24>
 4017058:	1000101e 	bne	r2,zero,401709c <___vfiprintf_internal_r+0xe0c>
 401705c:	d8802517 	ldw	r2,148(sp)
 4017060:	14c11616 	blt	r2,r19,40174bc <___vfiprintf_internal_r+0x122c>
 4017064:	d9002417 	ldw	r4,144(sp)
 4017068:	2089883a 	add	r4,r4,r2
 401706c:	d9002415 	stw	r4,144(sp)
 4017070:	003e1806 	br	40168d4 <__alt_mem_onchip_memory2_0+0xfc015654>
 4017074:	d9801a04 	addi	r6,sp,104
 4017078:	b80b883a 	mov	r5,r23
 401707c:	a809883a 	mov	r4,r21
 4017080:	401617c0 	call	401617c <__sprint_r.part.0>
 4017084:	103fba1e 	bne	r2,zero,4016f70 <__alt_mem_onchip_memory2_0+0xfc015cf0>
 4017088:	d9001b17 	ldw	r4,108(sp)
 401708c:	d8801c17 	ldw	r2,112(sp)
 4017090:	d811883a 	mov	r8,sp
 4017094:	21400044 	addi	r5,r4,1
 4017098:	003fd606 	br	4016ff4 <__alt_mem_onchip_memory2_0+0xfc015d74>
 401709c:	d9402017 	ldw	r5,128(sp)
 40170a0:	d9002117 	ldw	r4,132(sp)
 40170a4:	d9801a04 	addi	r6,sp,104
 40170a8:	401617c0 	call	401617c <__sprint_r.part.0>
 40170ac:	103fb01e 	bne	r2,zero,4016f70 <__alt_mem_onchip_memory2_0+0xfc015cf0>
 40170b0:	d8801c17 	ldw	r2,112(sp)
 40170b4:	d8c02517 	ldw	r3,148(sp)
 40170b8:	1cc0010e 	bge	r3,r19,40170c0 <___vfiprintf_internal_r+0xe30>
 40170bc:	9807883a 	mov	r3,r19
 40170c0:	d9002417 	ldw	r4,144(sp)
 40170c4:	20c9883a 	add	r4,r4,r3
 40170c8:	d9002415 	stw	r4,144(sp)
 40170cc:	103e0126 	beq	r2,zero,40168d4 <__alt_mem_onchip_memory2_0+0xfc015654>
 40170d0:	d9402017 	ldw	r5,128(sp)
 40170d4:	d9002117 	ldw	r4,132(sp)
 40170d8:	d9801a04 	addi	r6,sp,104
 40170dc:	401617c0 	call	401617c <__sprint_r.part.0>
 40170e0:	103dfc26 	beq	r2,zero,40168d4 <__alt_mem_onchip_memory2_0+0xfc015654>
 40170e4:	003fa206 	br	4016f70 <__alt_mem_onchip_memory2_0+0xfc015cf0>
 40170e8:	d9402017 	ldw	r5,128(sp)
 40170ec:	d9002117 	ldw	r4,132(sp)
 40170f0:	d9801a04 	addi	r6,sp,104
 40170f4:	d9c02b15 	stw	r7,172(sp)
 40170f8:	401617c0 	call	401617c <__sprint_r.part.0>
 40170fc:	d9c02b17 	ldw	r7,172(sp)
 4017100:	103f9b1e 	bne	r2,zero,4016f70 <__alt_mem_onchip_memory2_0+0xfc015cf0>
 4017104:	d9001b17 	ldw	r4,108(sp)
 4017108:	d8801c17 	ldw	r2,112(sp)
 401710c:	d811883a 	mov	r8,sp
 4017110:	21800044 	addi	r6,r4,1
 4017114:	003dbf06 	br	4016814 <__alt_mem_onchip_memory2_0+0xfc015594>
 4017118:	1000d81e 	bne	r2,zero,401747c <___vfiprintf_internal_r+0x11ec>
 401711c:	d9001d87 	ldb	r4,118(sp)
 4017120:	20000a26 	beq	r4,zero,401714c <___vfiprintf_internal_r+0xebc>
 4017124:	00800044 	movi	r2,1
 4017128:	d9001d84 	addi	r4,sp,118
 401712c:	100b883a 	mov	r5,r2
 4017130:	d9000015 	stw	r4,0(sp)
 4017134:	d8800115 	stw	r2,4(sp)
 4017138:	d811883a 	mov	r8,sp
 401713c:	2809883a 	mov	r4,r5
 4017140:	42000204 	addi	r8,r8,8
 4017144:	29400044 	addi	r5,r5,1
 4017148:	003d9506 	br	40167a0 <__alt_mem_onchip_memory2_0+0xfc015520>
 401714c:	3800fd26 	beq	r7,zero,4017544 <___vfiprintf_internal_r+0x12b4>
 4017150:	00800084 	movi	r2,2
 4017154:	d9001d04 	addi	r4,sp,116
 4017158:	d9000015 	stw	r4,0(sp)
 401715c:	d8800115 	stw	r2,4(sp)
 4017160:	01400044 	movi	r5,1
 4017164:	d811883a 	mov	r8,sp
 4017168:	2809883a 	mov	r4,r5
 401716c:	42000204 	addi	r8,r8,8
 4017170:	29400044 	addi	r5,r5,1
 4017174:	003f4606 	br	4016e90 <__alt_mem_onchip_memory2_0+0xfc015c10>
 4017178:	d8802517 	ldw	r2,148(sp)
 401717c:	14c0010e 	bge	r2,r19,4017184 <___vfiprintf_internal_r+0xef4>
 4017180:	9805883a 	mov	r2,r19
 4017184:	d9402417 	ldw	r5,144(sp)
 4017188:	288b883a 	add	r5,r5,r2
 401718c:	d9402415 	stw	r5,144(sp)
 4017190:	003dd006 	br	40168d4 <__alt_mem_onchip_memory2_0+0xfc015654>
 4017194:	d8001d85 	stb	zero,118(sp)
 4017198:	80005d16 	blt	r16,zero,4017310 <___vfiprintf_internal_r+0x1080>
 401719c:	00ffdfc4 	movi	r3,-129
 40171a0:	9d04b03a 	or	r2,r19,r20
 40171a4:	88e2703a 	and	r17,r17,r3
 40171a8:	103d3726 	beq	r2,zero,4016688 <__alt_mem_onchip_memory2_0+0xfc015408>
 40171ac:	002b883a 	mov	r21,zero
 40171b0:	d9002617 	ldw	r4,152(sp)
 40171b4:	ddc01a04 	addi	r23,sp,104
 40171b8:	988003cc 	andi	r2,r19,15
 40171bc:	a006973a 	slli	r3,r20,28
 40171c0:	2085883a 	add	r2,r4,r2
 40171c4:	9826d13a 	srli	r19,r19,4
 40171c8:	10800003 	ldbu	r2,0(r2)
 40171cc:	a028d13a 	srli	r20,r20,4
 40171d0:	bdffffc4 	addi	r23,r23,-1
 40171d4:	1ce6b03a 	or	r19,r3,r19
 40171d8:	b8800005 	stb	r2,0(r23)
 40171dc:	9d04b03a 	or	r2,r19,r20
 40171e0:	103ff51e 	bne	r2,zero,40171b8 <__alt_mem_onchip_memory2_0+0xfc015f38>
 40171e4:	d8801e17 	ldw	r2,120(sp)
 40171e8:	15e9c83a 	sub	r20,r2,r23
 40171ec:	003d2b06 	br	401669c <__alt_mem_onchip_memory2_0+0xfc01541c>
 40171f0:	d9402017 	ldw	r5,128(sp)
 40171f4:	d9002117 	ldw	r4,132(sp)
 40171f8:	d9801a04 	addi	r6,sp,104
 40171fc:	401617c0 	call	401617c <__sprint_r.part.0>
 4017200:	103f5b1e 	bne	r2,zero,4016f70 <__alt_mem_onchip_memory2_0+0xfc015cf0>
 4017204:	d8801c17 	ldw	r2,112(sp)
 4017208:	d811883a 	mov	r8,sp
 401720c:	003f6706 	br	4016fac <__alt_mem_onchip_memory2_0+0xfc015d2c>
 4017210:	d9402017 	ldw	r5,128(sp)
 4017214:	d9002117 	ldw	r4,132(sp)
 4017218:	d9801a04 	addi	r6,sp,104
 401721c:	401617c0 	call	401617c <__sprint_r.part.0>
 4017220:	103f531e 	bne	r2,zero,4016f70 <__alt_mem_onchip_memory2_0+0xfc015cf0>
 4017224:	d811883a 	mov	r8,sp
 4017228:	003cd906 	br	4016590 <__alt_mem_onchip_memory2_0+0xfc015310>
 401722c:	10803fcc 	andi	r2,r2,255
 4017230:	1080201c 	xori	r2,r2,128
 4017234:	10bfe004 	addi	r2,r2,-128
 4017238:	00c00c04 	movi	r3,48
 401723c:	10ffe926 	beq	r2,r3,40171e4 <__alt_mem_onchip_memory2_0+0xfc015f64>
 4017240:	b8ffffc5 	stb	r3,-1(r23)
 4017244:	d8c01e17 	ldw	r3,120(sp)
 4017248:	b8bfffc4 	addi	r2,r23,-1
 401724c:	102f883a 	mov	r23,r2
 4017250:	18a9c83a 	sub	r20,r3,r2
 4017254:	003d1106 	br	401669c <__alt_mem_onchip_memory2_0+0xfc01541c>
 4017258:	d9402017 	ldw	r5,128(sp)
 401725c:	d9002117 	ldw	r4,132(sp)
 4017260:	d9801a04 	addi	r6,sp,104
 4017264:	d8c02a15 	stw	r3,168(sp)
 4017268:	d9c02b15 	stw	r7,172(sp)
 401726c:	401617c0 	call	401617c <__sprint_r.part.0>
 4017270:	d8c02a17 	ldw	r3,168(sp)
 4017274:	d9c02b17 	ldw	r7,172(sp)
 4017278:	103f3d1e 	bne	r2,zero,4016f70 <__alt_mem_onchip_memory2_0+0xfc015cf0>
 401727c:	d9001b17 	ldw	r4,108(sp)
 4017280:	d8801c17 	ldw	r2,112(sp)
 4017284:	d811883a 	mov	r8,sp
 4017288:	21400044 	addi	r5,r4,1
 401728c:	003d4406 	br	40167a0 <__alt_mem_onchip_memory2_0+0xfc015520>
 4017290:	d9402017 	ldw	r5,128(sp)
 4017294:	d9002117 	ldw	r4,132(sp)
 4017298:	d9801a04 	addi	r6,sp,104
 401729c:	d8c02a15 	stw	r3,168(sp)
 40172a0:	401617c0 	call	401617c <__sprint_r.part.0>
 40172a4:	d8c02a17 	ldw	r3,168(sp)
 40172a8:	103f311e 	bne	r2,zero,4016f70 <__alt_mem_onchip_memory2_0+0xfc015cf0>
 40172ac:	d9001b17 	ldw	r4,108(sp)
 40172b0:	d8801c17 	ldw	r2,112(sp)
 40172b4:	d811883a 	mov	r8,sp
 40172b8:	21400044 	addi	r5,r4,1
 40172bc:	003ef406 	br	4016e90 <__alt_mem_onchip_memory2_0+0xfc015c10>
 40172c0:	1000bd1e 	bne	r2,zero,40175b8 <___vfiprintf_internal_r+0x1328>
 40172c4:	01400044 	movi	r5,1
 40172c8:	0009883a 	mov	r4,zero
 40172cc:	d811883a 	mov	r8,sp
 40172d0:	003ef106 	br	4016e98 <__alt_mem_onchip_memory2_0+0xfc015c18>
 40172d4:	d9402017 	ldw	r5,128(sp)
 40172d8:	d9002117 	ldw	r4,132(sp)
 40172dc:	d9801a04 	addi	r6,sp,104
 40172e0:	401617c0 	call	401617c <__sprint_r.part.0>
 40172e4:	103f221e 	bne	r2,zero,4016f70 <__alt_mem_onchip_memory2_0+0xfc015cf0>
 40172e8:	d9401b17 	ldw	r5,108(sp)
 40172ec:	d8801c17 	ldw	r2,112(sp)
 40172f0:	d811883a 	mov	r8,sp
 40172f4:	29400044 	addi	r5,r5,1
 40172f8:	003d6206 	br	4016884 <__alt_mem_onchip_memory2_0+0xfc015604>
 40172fc:	014100b4 	movhi	r5,1026
 4017300:	295c7a04 	addi	r5,r5,29160
 4017304:	d9402615 	stw	r5,152(sp)
 4017308:	d8c02215 	stw	r3,136(sp)
 401730c:	1023883a 	mov	r17,r2
 4017310:	9d04b03a 	or	r2,r19,r20
 4017314:	103fa51e 	bne	r2,zero,40171ac <__alt_mem_onchip_memory2_0+0xfc015f2c>
 4017318:	002b883a 	mov	r21,zero
 401731c:	00800084 	movi	r2,2
 4017320:	003e4a06 	br	4016c4c <__alt_mem_onchip_memory2_0+0xfc0159cc>
 4017324:	014100b4 	movhi	r5,1026
 4017328:	295c7a04 	addi	r5,r5,29160
 401732c:	002b883a 	mov	r21,zero
 4017330:	d9402615 	stw	r5,152(sp)
 4017334:	003f9e06 	br	40171b0 <__alt_mem_onchip_memory2_0+0xfc015f30>
 4017338:	d9402217 	ldw	r5,136(sp)
 401733c:	d8001d85 	stb	zero,118(sp)
 4017340:	0029883a 	mov	r20,zero
 4017344:	28800104 	addi	r2,r5,4
 4017348:	2cc00017 	ldw	r19,0(r5)
 401734c:	803e3a16 	blt	r16,zero,4016c38 <__alt_mem_onchip_memory2_0+0xfc0159b8>
 4017350:	00ffdfc4 	movi	r3,-129
 4017354:	d8802215 	stw	r2,136(sp)
 4017358:	88e2703a 	and	r17,r17,r3
 401735c:	002b883a 	mov	r21,zero
 4017360:	983e9b26 	beq	r19,zero,4016dd0 <__alt_mem_onchip_memory2_0+0xfc015b50>
 4017364:	00800244 	movi	r2,9
 4017368:	14fdc936 	bltu	r2,r19,4016a90 <__alt_mem_onchip_memory2_0+0xfc015810>
 401736c:	003e9a06 	br	4016dd8 <__alt_mem_onchip_memory2_0+0xfc015b58>
 4017370:	00800c04 	movi	r2,48
 4017374:	d8c01d45 	stb	r3,117(sp)
 4017378:	d8801d05 	stb	r2,116(sp)
 401737c:	d8001d85 	stb	zero,118(sp)
 4017380:	88c00094 	ori	r3,r17,2
 4017384:	80009c16 	blt	r16,zero,40175f8 <___vfiprintf_internal_r+0x1368>
 4017388:	00bfdfc4 	movi	r2,-129
 401738c:	88a2703a 	and	r17,r17,r2
 4017390:	8c400094 	ori	r17,r17,2
 4017394:	002b883a 	mov	r21,zero
 4017398:	003f8506 	br	40171b0 <__alt_mem_onchip_memory2_0+0xfc015f30>
 401739c:	b029883a 	mov	r20,r22
 40173a0:	003c0b06 	br	40163d0 <__alt_mem_onchip_memory2_0+0xfc015150>
 40173a4:	04e7c83a 	sub	r19,zero,r19
 40173a8:	05400b44 	movi	r21,45
 40173ac:	9804c03a 	cmpne	r2,r19,zero
 40173b0:	0529c83a 	sub	r20,zero,r20
 40173b4:	dd401d85 	stb	r21,118(sp)
 40173b8:	a0a9c83a 	sub	r20,r20,r2
 40173bc:	80009716 	blt	r16,zero,401761c <___vfiprintf_internal_r+0x138c>
 40173c0:	00bfdfc4 	movi	r2,-129
 40173c4:	88a2703a 	and	r17,r17,r2
 40173c8:	003db006 	br	4016a8c <__alt_mem_onchip_memory2_0+0xfc01580c>
 40173cc:	b0c00007 	ldb	r3,0(r22)
 40173d0:	003c0c06 	br	4016404 <__alt_mem_onchip_memory2_0+0xfc015184>
 40173d4:	8880100c 	andi	r2,r17,64
 40173d8:	d8001d85 	stb	zero,118(sp)
 40173dc:	1000461e 	bne	r2,zero,40174f8 <___vfiprintf_internal_r+0x1268>
 40173e0:	d9002217 	ldw	r4,136(sp)
 40173e4:	0029883a 	mov	r20,zero
 40173e8:	20800104 	addi	r2,r4,4
 40173ec:	24c00017 	ldw	r19,0(r4)
 40173f0:	803df80e 	bge	r16,zero,4016bd4 <__alt_mem_onchip_memory2_0+0xfc015954>
 40173f4:	9d06b03a 	or	r3,r19,r20
 40173f8:	d8802215 	stw	r2,136(sp)
 40173fc:	183d5e1e 	bne	r3,zero,4016978 <__alt_mem_onchip_memory2_0+0xfc0156f8>
 4017400:	002b883a 	mov	r21,zero
 4017404:	0005883a 	mov	r2,zero
 4017408:	003e1006 	br	4016c4c <__alt_mem_onchip_memory2_0+0xfc0159cc>
 401740c:	8880040c 	andi	r2,r17,16
 4017410:	1000321e 	bne	r2,zero,40174dc <___vfiprintf_internal_r+0x124c>
 4017414:	8c40100c 	andi	r17,r17,64
 4017418:	88008d26 	beq	r17,zero,4017650 <___vfiprintf_internal_r+0x13c0>
 401741c:	d9402217 	ldw	r5,136(sp)
 4017420:	d8c02417 	ldw	r3,144(sp)
 4017424:	28800017 	ldw	r2,0(r5)
 4017428:	29400104 	addi	r5,r5,4
 401742c:	d9402215 	stw	r5,136(sp)
 4017430:	10c0000d 	sth	r3,0(r2)
 4017434:	003bca06 	br	4016360 <__alt_mem_onchip_memory2_0+0xfc0150e0>
 4017438:	8880100c 	andi	r2,r17,64
 401743c:	10003a26 	beq	r2,zero,4017528 <___vfiprintf_internal_r+0x1298>
 4017440:	d8802217 	ldw	r2,136(sp)
 4017444:	14c0000f 	ldh	r19,0(r2)
 4017448:	10800104 	addi	r2,r2,4
 401744c:	d8802215 	stw	r2,136(sp)
 4017450:	9829d7fa 	srai	r20,r19,31
 4017454:	a005883a 	mov	r2,r20
 4017458:	003d8506 	br	4016a70 <__alt_mem_onchip_memory2_0+0xfc0157f0>
 401745c:	8880100c 	andi	r2,r17,64
 4017460:	10002b26 	beq	r2,zero,4017510 <___vfiprintf_internal_r+0x1280>
 4017464:	d8802217 	ldw	r2,136(sp)
 4017468:	0029883a 	mov	r20,zero
 401746c:	14c0000b 	ldhu	r19,0(r2)
 4017470:	10800104 	addi	r2,r2,4
 4017474:	d8802215 	stw	r2,136(sp)
 4017478:	003d5d06 	br	40169f0 <__alt_mem_onchip_memory2_0+0xfc015770>
 401747c:	d9402017 	ldw	r5,128(sp)
 4017480:	d9002117 	ldw	r4,132(sp)
 4017484:	d9801a04 	addi	r6,sp,104
 4017488:	d8c02a15 	stw	r3,168(sp)
 401748c:	d9c02b15 	stw	r7,172(sp)
 4017490:	401617c0 	call	401617c <__sprint_r.part.0>
 4017494:	d8c02a17 	ldw	r3,168(sp)
 4017498:	d9c02b17 	ldw	r7,172(sp)
 401749c:	103eb41e 	bne	r2,zero,4016f70 <__alt_mem_onchip_memory2_0+0xfc015cf0>
 40174a0:	d9001b17 	ldw	r4,108(sp)
 40174a4:	d8801c17 	ldw	r2,112(sp)
 40174a8:	d811883a 	mov	r8,sp
 40174ac:	21400044 	addi	r5,r4,1
 40174b0:	003e6706 	br	4016e50 <__alt_mem_onchip_memory2_0+0xfc015bd0>
 40174b4:	00bfffc4 	movi	r2,-1
 40174b8:	003c4a06 	br	40165e4 <__alt_mem_onchip_memory2_0+0xfc015364>
 40174bc:	9805883a 	mov	r2,r19
 40174c0:	003ee806 	br	4017064 <__alt_mem_onchip_memory2_0+0xfc015de4>
 40174c4:	d8c02217 	ldw	r3,136(sp)
 40174c8:	0029883a 	mov	r20,zero
 40174cc:	18800104 	addi	r2,r3,4
 40174d0:	1cc0000b 	ldhu	r19,0(r3)
 40174d4:	803f9e0e 	bge	r16,zero,4017350 <__alt_mem_onchip_memory2_0+0xfc0160d0>
 40174d8:	003dd706 	br	4016c38 <__alt_mem_onchip_memory2_0+0xfc0159b8>
 40174dc:	d8c02217 	ldw	r3,136(sp)
 40174e0:	d9002417 	ldw	r4,144(sp)
 40174e4:	18800017 	ldw	r2,0(r3)
 40174e8:	18c00104 	addi	r3,r3,4
 40174ec:	d8c02215 	stw	r3,136(sp)
 40174f0:	11000015 	stw	r4,0(r2)
 40174f4:	003b9a06 	br	4016360 <__alt_mem_onchip_memory2_0+0xfc0150e0>
 40174f8:	d8c02217 	ldw	r3,136(sp)
 40174fc:	0029883a 	mov	r20,zero
 4017500:	18800104 	addi	r2,r3,4
 4017504:	1cc0000b 	ldhu	r19,0(r3)
 4017508:	803db20e 	bge	r16,zero,4016bd4 <__alt_mem_onchip_memory2_0+0xfc015954>
 401750c:	003fb906 	br	40173f4 <__alt_mem_onchip_memory2_0+0xfc016174>
 4017510:	d9002217 	ldw	r4,136(sp)
 4017514:	0029883a 	mov	r20,zero
 4017518:	24c00017 	ldw	r19,0(r4)
 401751c:	21000104 	addi	r4,r4,4
 4017520:	d9002215 	stw	r4,136(sp)
 4017524:	003d3206 	br	40169f0 <__alt_mem_onchip_memory2_0+0xfc015770>
 4017528:	d8c02217 	ldw	r3,136(sp)
 401752c:	1cc00017 	ldw	r19,0(r3)
 4017530:	18c00104 	addi	r3,r3,4
 4017534:	d8c02215 	stw	r3,136(sp)
 4017538:	9829d7fa 	srai	r20,r19,31
 401753c:	a005883a 	mov	r2,r20
 4017540:	003d4b06 	br	4016a70 <__alt_mem_onchip_memory2_0+0xfc0157f0>
 4017544:	0009883a 	mov	r4,zero
 4017548:	01400044 	movi	r5,1
 401754c:	d811883a 	mov	r8,sp
 4017550:	003e4f06 	br	4016e90 <__alt_mem_onchip_memory2_0+0xfc015c10>
 4017554:	d8c02215 	stw	r3,136(sp)
 4017558:	002b883a 	mov	r21,zero
 401755c:	003db806 	br	4016c40 <__alt_mem_onchip_memory2_0+0xfc0159c0>
 4017560:	d811883a 	mov	r8,sp
 4017564:	003e9606 	br	4016fc0 <__alt_mem_onchip_memory2_0+0xfc015d40>
 4017568:	010100b4 	movhi	r4,1026
 401756c:	211cda04 	addi	r4,r4,29544
 4017570:	d9002315 	stw	r4,140(sp)
 4017574:	003e6306 	br	4016f04 <__alt_mem_onchip_memory2_0+0xfc015c84>
 4017578:	b0c00043 	ldbu	r3,1(r22)
 401757c:	8c400814 	ori	r17,r17,32
 4017580:	b5800044 	addi	r22,r22,1
 4017584:	18c03fcc 	andi	r3,r3,255
 4017588:	18c0201c 	xori	r3,r3,128
 401758c:	18ffe004 	addi	r3,r3,-128
 4017590:	003b9c06 	br	4016404 <__alt_mem_onchip_memory2_0+0xfc015184>
 4017594:	b809883a 	mov	r4,r23
 4017598:	da002a15 	stw	r8,168(sp)
 401759c:	400f43c0 	call	400f43c <strlen>
 40175a0:	1029883a 	mov	r20,r2
 40175a4:	dd401d83 	ldbu	r21,118(sp)
 40175a8:	df002215 	stw	fp,136(sp)
 40175ac:	0021883a 	mov	r16,zero
 40175b0:	da002a17 	ldw	r8,168(sp)
 40175b4:	003c3906 	br	401669c <__alt_mem_onchip_memory2_0+0xfc01541c>
 40175b8:	d9402017 	ldw	r5,128(sp)
 40175bc:	d9002117 	ldw	r4,132(sp)
 40175c0:	d9801a04 	addi	r6,sp,104
 40175c4:	401617c0 	call	401617c <__sprint_r.part.0>
 40175c8:	103e691e 	bne	r2,zero,4016f70 <__alt_mem_onchip_memory2_0+0xfc015cf0>
 40175cc:	d9001b17 	ldw	r4,108(sp)
 40175d0:	d8801c17 	ldw	r2,112(sp)
 40175d4:	d811883a 	mov	r8,sp
 40175d8:	21400044 	addi	r5,r4,1
 40175dc:	003e2e06 	br	4016e98 <__alt_mem_onchip_memory2_0+0xfc015c18>
 40175e0:	010100b4 	movhi	r4,1026
 40175e4:	211cde04 	addi	r4,r4,29560
 40175e8:	d9002315 	stw	r4,140(sp)
 40175ec:	d9001b17 	ldw	r4,108(sp)
 40175f0:	21000044 	addi	r4,r4,1
 40175f4:	003c5e06 	br	4016770 <__alt_mem_onchip_memory2_0+0xfc0154f0>
 40175f8:	002b883a 	mov	r21,zero
 40175fc:	00800084 	movi	r2,2
 4017600:	10803fcc 	andi	r2,r2,255
 4017604:	01000044 	movi	r4,1
 4017608:	11002b26 	beq	r2,r4,40176b8 <___vfiprintf_internal_r+0x1428>
 401760c:	01000084 	movi	r4,2
 4017610:	11002b1e 	bne	r2,r4,40176c0 <___vfiprintf_internal_r+0x1430>
 4017614:	1823883a 	mov	r17,r3
 4017618:	003ee506 	br	40171b0 <__alt_mem_onchip_memory2_0+0xfc015f30>
 401761c:	8807883a 	mov	r3,r17
 4017620:	00800044 	movi	r2,1
 4017624:	003ff606 	br	4017600 <__alt_mem_onchip_memory2_0+0xfc016380>
 4017628:	00800184 	movi	r2,6
 401762c:	1400012e 	bgeu	r2,r16,4017634 <___vfiprintf_internal_r+0x13a4>
 4017630:	1021883a 	mov	r16,r2
 4017634:	8029883a 	mov	r20,r16
 4017638:	8027883a 	mov	r19,r16
 401763c:	80002216 	blt	r16,zero,40176c8 <___vfiprintf_internal_r+0x1438>
 4017640:	05c100b4 	movhi	r23,1026
 4017644:	df002215 	stw	fp,136(sp)
 4017648:	bddc7f04 	addi	r23,r23,29180
 401764c:	003cfb06 	br	4016a3c <__alt_mem_onchip_memory2_0+0xfc0157bc>
 4017650:	d9002217 	ldw	r4,136(sp)
 4017654:	d9402417 	ldw	r5,144(sp)
 4017658:	20800017 	ldw	r2,0(r4)
 401765c:	21000104 	addi	r4,r4,4
 4017660:	d9002215 	stw	r4,136(sp)
 4017664:	11400015 	stw	r5,0(r2)
 4017668:	003b3d06 	br	4016360 <__alt_mem_onchip_memory2_0+0xfc0150e0>
 401766c:	014100b4 	movhi	r5,1026
 4017670:	295cde04 	addi	r5,r5,29560
 4017674:	d9402315 	stw	r5,140(sp)
 4017678:	d9401b17 	ldw	r5,108(sp)
 401767c:	29400044 	addi	r5,r5,1
 4017680:	003e6d06 	br	4017038 <__alt_mem_onchip_memory2_0+0xfc015db8>
 4017684:	8029883a 	mov	r20,r16
 4017688:	dd401d83 	ldbu	r21,118(sp)
 401768c:	df002215 	stw	fp,136(sp)
 4017690:	0021883a 	mov	r16,zero
 4017694:	003c0106 	br	401669c <__alt_mem_onchip_memory2_0+0xfc01541c>
 4017698:	00c100b4 	movhi	r3,1026
 401769c:	18dcda04 	addi	r3,r3,29544
 40176a0:	d8c02315 	stw	r3,140(sp)
 40176a4:	280d883a 	mov	r6,r5
 40176a8:	003c6906 	br	4016850 <__alt_mem_onchip_memory2_0+0xfc0155d0>
 40176ac:	802d883a 	mov	r22,r16
 40176b0:	0021883a 	mov	r16,zero
 40176b4:	003b5406 	br	4016408 <__alt_mem_onchip_memory2_0+0xfc015188>
 40176b8:	1823883a 	mov	r17,r3
 40176bc:	003cf306 	br	4016a8c <__alt_mem_onchip_memory2_0+0xfc01580c>
 40176c0:	1823883a 	mov	r17,r3
 40176c4:	003cad06 	br	401697c <__alt_mem_onchip_memory2_0+0xfc0156fc>
 40176c8:	0027883a 	mov	r19,zero
 40176cc:	003fdc06 	br	4017640 <__alt_mem_onchip_memory2_0+0xfc0163c0>
 40176d0:	d9402217 	ldw	r5,136(sp)
 40176d4:	8005883a 	mov	r2,r16
 40176d8:	b0c00043 	ldbu	r3,1(r22)
 40176dc:	2c000017 	ldw	r16,0(r5)
 40176e0:	29000104 	addi	r4,r5,4
 40176e4:	d9002215 	stw	r4,136(sp)
 40176e8:	102d883a 	mov	r22,r2
 40176ec:	803fa50e 	bge	r16,zero,4017584 <__alt_mem_onchip_memory2_0+0xfc016304>
 40176f0:	18c03fcc 	andi	r3,r3,255
 40176f4:	18c0201c 	xori	r3,r3,128
 40176f8:	043fffc4 	movi	r16,-1
 40176fc:	18ffe004 	addi	r3,r3,-128
 4017700:	003b4006 	br	4016404 <__alt_mem_onchip_memory2_0+0xfc015184>
 4017704:	d9402303 	ldbu	r5,140(sp)
 4017708:	d9401d85 	stb	r5,118(sp)
 401770c:	003cae06 	br	40169c8 <__alt_mem_onchip_memory2_0+0xfc015748>
 4017710:	d8c02303 	ldbu	r3,140(sp)
 4017714:	d8c01d85 	stb	r3,118(sp)
 4017718:	003d1406 	br	4016b6c <__alt_mem_onchip_memory2_0+0xfc0158ec>
 401771c:	d8c02303 	ldbu	r3,140(sp)
 4017720:	d8c01d85 	stb	r3,118(sp)
 4017724:	003cca06 	br	4016a50 <__alt_mem_onchip_memory2_0+0xfc0157d0>
 4017728:	8880004c 	andi	r2,r17,1
 401772c:	002b883a 	mov	r21,zero
 4017730:	10000526 	beq	r2,zero,4017748 <___vfiprintf_internal_r+0x14b8>
 4017734:	00800c04 	movi	r2,48
 4017738:	d88019c5 	stb	r2,103(sp)
 401773c:	dd002817 	ldw	r20,160(sp)
 4017740:	ddc019c4 	addi	r23,sp,103
 4017744:	003bd506 	br	401669c <__alt_mem_onchip_memory2_0+0xfc01541c>
 4017748:	0029883a 	mov	r20,zero
 401774c:	ddc01a04 	addi	r23,sp,104
 4017750:	003bd206 	br	401669c <__alt_mem_onchip_memory2_0+0xfc01541c>
 4017754:	d9002303 	ldbu	r4,140(sp)
 4017758:	d9001d85 	stb	r4,118(sp)
 401775c:	003da606 	br	4016df8 <__alt_mem_onchip_memory2_0+0xfc015b78>
 4017760:	d8c02303 	ldbu	r3,140(sp)
 4017764:	d8c01d85 	stb	r3,118(sp)
 4017768:	003c7606 	br	4016944 <__alt_mem_onchip_memory2_0+0xfc0156c4>
 401776c:	d8c02303 	ldbu	r3,140(sp)
 4017770:	d8c01d85 	stb	r3,118(sp)
 4017774:	003c6506 	br	401690c <__alt_mem_onchip_memory2_0+0xfc01568c>
 4017778:	d9002303 	ldbu	r4,140(sp)
 401777c:	d9001d85 	stb	r4,118(sp)
 4017780:	003d3d06 	br	4016c78 <__alt_mem_onchip_memory2_0+0xfc0159f8>
 4017784:	d8c02303 	ldbu	r3,140(sp)
 4017788:	d8c01d85 	stb	r3,118(sp)
 401778c:	003d1d06 	br	4016c04 <__alt_mem_onchip_memory2_0+0xfc015984>
 4017790:	d8c02303 	ldbu	r3,140(sp)
 4017794:	d8c01d85 	stb	r3,118(sp)
 4017798:	003d0306 	br	4016ba8 <__alt_mem_onchip_memory2_0+0xfc015928>

0401779c <__vfiprintf_internal>:
 401779c:	008100f4 	movhi	r2,1027
 40177a0:	10a96004 	addi	r2,r2,-23168
 40177a4:	300f883a 	mov	r7,r6
 40177a8:	280d883a 	mov	r6,r5
 40177ac:	200b883a 	mov	r5,r4
 40177b0:	11000017 	ldw	r4,0(r2)
 40177b4:	40162901 	jmpi	4016290 <___vfiprintf_internal_r>

040177b8 <__sbprintf>:
 40177b8:	2880030b 	ldhu	r2,12(r5)
 40177bc:	2ac01917 	ldw	r11,100(r5)
 40177c0:	2a80038b 	ldhu	r10,14(r5)
 40177c4:	2a400717 	ldw	r9,28(r5)
 40177c8:	2a000917 	ldw	r8,36(r5)
 40177cc:	defee204 	addi	sp,sp,-1144
 40177d0:	00c10004 	movi	r3,1024
 40177d4:	dc011a15 	stw	r16,1128(sp)
 40177d8:	10bfff4c 	andi	r2,r2,65533
 40177dc:	2821883a 	mov	r16,r5
 40177e0:	d8cb883a 	add	r5,sp,r3
 40177e4:	dc811c15 	stw	r18,1136(sp)
 40177e8:	dc411b15 	stw	r17,1132(sp)
 40177ec:	dfc11d15 	stw	ra,1140(sp)
 40177f0:	2025883a 	mov	r18,r4
 40177f4:	d881030d 	sth	r2,1036(sp)
 40177f8:	dac11915 	stw	r11,1124(sp)
 40177fc:	da81038d 	sth	r10,1038(sp)
 4017800:	da410715 	stw	r9,1052(sp)
 4017804:	da010915 	stw	r8,1060(sp)
 4017808:	dec10015 	stw	sp,1024(sp)
 401780c:	dec10415 	stw	sp,1040(sp)
 4017810:	d8c10215 	stw	r3,1032(sp)
 4017814:	d8c10515 	stw	r3,1044(sp)
 4017818:	d8010615 	stw	zero,1048(sp)
 401781c:	40162900 	call	4016290 <___vfiprintf_internal_r>
 4017820:	1023883a 	mov	r17,r2
 4017824:	10000416 	blt	r2,zero,4017838 <__sbprintf+0x80>
 4017828:	d9410004 	addi	r5,sp,1024
 401782c:	9009883a 	mov	r4,r18
 4017830:	40134b00 	call	40134b0 <_fflush_r>
 4017834:	10000d1e 	bne	r2,zero,401786c <__sbprintf+0xb4>
 4017838:	d881030b 	ldhu	r2,1036(sp)
 401783c:	1080100c 	andi	r2,r2,64
 4017840:	10000326 	beq	r2,zero,4017850 <__sbprintf+0x98>
 4017844:	8080030b 	ldhu	r2,12(r16)
 4017848:	10801014 	ori	r2,r2,64
 401784c:	8080030d 	sth	r2,12(r16)
 4017850:	8805883a 	mov	r2,r17
 4017854:	dfc11d17 	ldw	ra,1140(sp)
 4017858:	dc811c17 	ldw	r18,1136(sp)
 401785c:	dc411b17 	ldw	r17,1132(sp)
 4017860:	dc011a17 	ldw	r16,1128(sp)
 4017864:	dec11e04 	addi	sp,sp,1144
 4017868:	f800283a 	ret
 401786c:	047fffc4 	movi	r17,-1
 4017870:	003ff106 	br	4017838 <__alt_mem_onchip_memory2_0+0xfc0165b8>

04017874 <__swbuf_r>:
 4017874:	defffb04 	addi	sp,sp,-20
 4017878:	dcc00315 	stw	r19,12(sp)
 401787c:	dc800215 	stw	r18,8(sp)
 4017880:	dc000015 	stw	r16,0(sp)
 4017884:	dfc00415 	stw	ra,16(sp)
 4017888:	dc400115 	stw	r17,4(sp)
 401788c:	2025883a 	mov	r18,r4
 4017890:	2827883a 	mov	r19,r5
 4017894:	3021883a 	mov	r16,r6
 4017898:	20000226 	beq	r4,zero,40178a4 <__swbuf_r+0x30>
 401789c:	20800e17 	ldw	r2,56(r4)
 40178a0:	10004226 	beq	r2,zero,40179ac <__swbuf_r+0x138>
 40178a4:	80800617 	ldw	r2,24(r16)
 40178a8:	8100030b 	ldhu	r4,12(r16)
 40178ac:	80800215 	stw	r2,8(r16)
 40178b0:	2080020c 	andi	r2,r4,8
 40178b4:	10003626 	beq	r2,zero,4017990 <__swbuf_r+0x11c>
 40178b8:	80c00417 	ldw	r3,16(r16)
 40178bc:	18003426 	beq	r3,zero,4017990 <__swbuf_r+0x11c>
 40178c0:	2088000c 	andi	r2,r4,8192
 40178c4:	9c403fcc 	andi	r17,r19,255
 40178c8:	10001a26 	beq	r2,zero,4017934 <__swbuf_r+0xc0>
 40178cc:	80800017 	ldw	r2,0(r16)
 40178d0:	81000517 	ldw	r4,20(r16)
 40178d4:	10c7c83a 	sub	r3,r2,r3
 40178d8:	1900200e 	bge	r3,r4,401795c <__swbuf_r+0xe8>
 40178dc:	18c00044 	addi	r3,r3,1
 40178e0:	81000217 	ldw	r4,8(r16)
 40178e4:	11400044 	addi	r5,r2,1
 40178e8:	81400015 	stw	r5,0(r16)
 40178ec:	213fffc4 	addi	r4,r4,-1
 40178f0:	81000215 	stw	r4,8(r16)
 40178f4:	14c00005 	stb	r19,0(r2)
 40178f8:	80800517 	ldw	r2,20(r16)
 40178fc:	10c01e26 	beq	r2,r3,4017978 <__swbuf_r+0x104>
 4017900:	8080030b 	ldhu	r2,12(r16)
 4017904:	1080004c 	andi	r2,r2,1
 4017908:	10000226 	beq	r2,zero,4017914 <__swbuf_r+0xa0>
 401790c:	00800284 	movi	r2,10
 4017910:	88801926 	beq	r17,r2,4017978 <__swbuf_r+0x104>
 4017914:	8805883a 	mov	r2,r17
 4017918:	dfc00417 	ldw	ra,16(sp)
 401791c:	dcc00317 	ldw	r19,12(sp)
 4017920:	dc800217 	ldw	r18,8(sp)
 4017924:	dc400117 	ldw	r17,4(sp)
 4017928:	dc000017 	ldw	r16,0(sp)
 401792c:	dec00504 	addi	sp,sp,20
 4017930:	f800283a 	ret
 4017934:	81401917 	ldw	r5,100(r16)
 4017938:	00b7ffc4 	movi	r2,-8193
 401793c:	21080014 	ori	r4,r4,8192
 4017940:	2884703a 	and	r2,r5,r2
 4017944:	80801915 	stw	r2,100(r16)
 4017948:	80800017 	ldw	r2,0(r16)
 401794c:	8100030d 	sth	r4,12(r16)
 4017950:	81000517 	ldw	r4,20(r16)
 4017954:	10c7c83a 	sub	r3,r2,r3
 4017958:	193fe016 	blt	r3,r4,40178dc <__alt_mem_onchip_memory2_0+0xfc01665c>
 401795c:	800b883a 	mov	r5,r16
 4017960:	9009883a 	mov	r4,r18
 4017964:	40134b00 	call	40134b0 <_fflush_r>
 4017968:	1000071e 	bne	r2,zero,4017988 <__swbuf_r+0x114>
 401796c:	80800017 	ldw	r2,0(r16)
 4017970:	00c00044 	movi	r3,1
 4017974:	003fda06 	br	40178e0 <__alt_mem_onchip_memory2_0+0xfc016660>
 4017978:	800b883a 	mov	r5,r16
 401797c:	9009883a 	mov	r4,r18
 4017980:	40134b00 	call	40134b0 <_fflush_r>
 4017984:	103fe326 	beq	r2,zero,4017914 <__alt_mem_onchip_memory2_0+0xfc016694>
 4017988:	00bfffc4 	movi	r2,-1
 401798c:	003fe206 	br	4017918 <__alt_mem_onchip_memory2_0+0xfc016698>
 4017990:	800b883a 	mov	r5,r16
 4017994:	9009883a 	mov	r4,r18
 4017998:	40118900 	call	4011890 <__swsetup_r>
 401799c:	103ffa1e 	bne	r2,zero,4017988 <__alt_mem_onchip_memory2_0+0xfc016708>
 40179a0:	8100030b 	ldhu	r4,12(r16)
 40179a4:	80c00417 	ldw	r3,16(r16)
 40179a8:	003fc506 	br	40178c0 <__alt_mem_onchip_memory2_0+0xfc016640>
 40179ac:	401389c0 	call	401389c <__sinit>
 40179b0:	003fbc06 	br	40178a4 <__alt_mem_onchip_memory2_0+0xfc016624>

040179b4 <__swbuf>:
 40179b4:	008100f4 	movhi	r2,1027
 40179b8:	10a96004 	addi	r2,r2,-23168
 40179bc:	280d883a 	mov	r6,r5
 40179c0:	200b883a 	mov	r5,r4
 40179c4:	11000017 	ldw	r4,0(r2)
 40179c8:	40178741 	jmpi	4017874 <__swbuf_r>

040179cc <_write_r>:
 40179cc:	defffd04 	addi	sp,sp,-12
 40179d0:	2805883a 	mov	r2,r5
 40179d4:	dc000015 	stw	r16,0(sp)
 40179d8:	040100f4 	movhi	r16,1027
 40179dc:	dc400115 	stw	r17,4(sp)
 40179e0:	300b883a 	mov	r5,r6
 40179e4:	8435f204 	addi	r16,r16,-10296
 40179e8:	2023883a 	mov	r17,r4
 40179ec:	380d883a 	mov	r6,r7
 40179f0:	1009883a 	mov	r4,r2
 40179f4:	dfc00215 	stw	ra,8(sp)
 40179f8:	80000015 	stw	zero,0(r16)
 40179fc:	401c0f80 	call	401c0f8 <write>
 4017a00:	00ffffc4 	movi	r3,-1
 4017a04:	10c00526 	beq	r2,r3,4017a1c <_write_r+0x50>
 4017a08:	dfc00217 	ldw	ra,8(sp)
 4017a0c:	dc400117 	ldw	r17,4(sp)
 4017a10:	dc000017 	ldw	r16,0(sp)
 4017a14:	dec00304 	addi	sp,sp,12
 4017a18:	f800283a 	ret
 4017a1c:	80c00017 	ldw	r3,0(r16)
 4017a20:	183ff926 	beq	r3,zero,4017a08 <__alt_mem_onchip_memory2_0+0xfc016788>
 4017a24:	88c00015 	stw	r3,0(r17)
 4017a28:	003ff706 	br	4017a08 <__alt_mem_onchip_memory2_0+0xfc016788>

04017a2c <_close_r>:
 4017a2c:	defffd04 	addi	sp,sp,-12
 4017a30:	dc000015 	stw	r16,0(sp)
 4017a34:	040100f4 	movhi	r16,1027
 4017a38:	dc400115 	stw	r17,4(sp)
 4017a3c:	8435f204 	addi	r16,r16,-10296
 4017a40:	2023883a 	mov	r17,r4
 4017a44:	2809883a 	mov	r4,r5
 4017a48:	dfc00215 	stw	ra,8(sp)
 4017a4c:	80000015 	stw	zero,0(r16)
 4017a50:	401b5fc0 	call	401b5fc <close>
 4017a54:	00ffffc4 	movi	r3,-1
 4017a58:	10c00526 	beq	r2,r3,4017a70 <_close_r+0x44>
 4017a5c:	dfc00217 	ldw	ra,8(sp)
 4017a60:	dc400117 	ldw	r17,4(sp)
 4017a64:	dc000017 	ldw	r16,0(sp)
 4017a68:	dec00304 	addi	sp,sp,12
 4017a6c:	f800283a 	ret
 4017a70:	80c00017 	ldw	r3,0(r16)
 4017a74:	183ff926 	beq	r3,zero,4017a5c <__alt_mem_onchip_memory2_0+0xfc0167dc>
 4017a78:	88c00015 	stw	r3,0(r17)
 4017a7c:	003ff706 	br	4017a5c <__alt_mem_onchip_memory2_0+0xfc0167dc>

04017a80 <_calloc_r>:
 4017a80:	defffe04 	addi	sp,sp,-8
 4017a84:	2805883a 	mov	r2,r5
 4017a88:	dc000015 	stw	r16,0(sp)
 4017a8c:	300b883a 	mov	r5,r6
 4017a90:	2021883a 	mov	r16,r4
 4017a94:	1009883a 	mov	r4,r2
 4017a98:	dfc00115 	stw	ra,4(sp)
 4017a9c:	400d2c40 	call	400d2c4 <__mulsi3>
 4017aa0:	100b883a 	mov	r5,r2
 4017aa4:	8009883a 	mov	r4,r16
 4017aa8:	400e42c0 	call	400e42c <_malloc_r>
 4017aac:	10002926 	beq	r2,zero,4017b54 <_calloc_r+0xd4>
 4017ab0:	11bfff17 	ldw	r6,-4(r2)
 4017ab4:	1021883a 	mov	r16,r2
 4017ab8:	00bfff04 	movi	r2,-4
 4017abc:	308c703a 	and	r6,r6,r2
 4017ac0:	00c00904 	movi	r3,36
 4017ac4:	308d883a 	add	r6,r6,r2
 4017ac8:	19801636 	bltu	r3,r6,4017b24 <_calloc_r+0xa4>
 4017acc:	008004c4 	movi	r2,19
 4017ad0:	11800b2e 	bgeu	r2,r6,4017b00 <_calloc_r+0x80>
 4017ad4:	80000015 	stw	zero,0(r16)
 4017ad8:	80000115 	stw	zero,4(r16)
 4017adc:	008006c4 	movi	r2,27
 4017ae0:	11801a2e 	bgeu	r2,r6,4017b4c <_calloc_r+0xcc>
 4017ae4:	80000215 	stw	zero,8(r16)
 4017ae8:	80000315 	stw	zero,12(r16)
 4017aec:	30c0151e 	bne	r6,r3,4017b44 <_calloc_r+0xc4>
 4017af0:	80000415 	stw	zero,16(r16)
 4017af4:	80800604 	addi	r2,r16,24
 4017af8:	80000515 	stw	zero,20(r16)
 4017afc:	00000106 	br	4017b04 <_calloc_r+0x84>
 4017b00:	8005883a 	mov	r2,r16
 4017b04:	10000015 	stw	zero,0(r2)
 4017b08:	10000115 	stw	zero,4(r2)
 4017b0c:	10000215 	stw	zero,8(r2)
 4017b10:	8005883a 	mov	r2,r16
 4017b14:	dfc00117 	ldw	ra,4(sp)
 4017b18:	dc000017 	ldw	r16,0(sp)
 4017b1c:	dec00204 	addi	sp,sp,8
 4017b20:	f800283a 	ret
 4017b24:	000b883a 	mov	r5,zero
 4017b28:	8009883a 	mov	r4,r16
 4017b2c:	400ed800 	call	400ed80 <memset>
 4017b30:	8005883a 	mov	r2,r16
 4017b34:	dfc00117 	ldw	ra,4(sp)
 4017b38:	dc000017 	ldw	r16,0(sp)
 4017b3c:	dec00204 	addi	sp,sp,8
 4017b40:	f800283a 	ret
 4017b44:	80800404 	addi	r2,r16,16
 4017b48:	003fee06 	br	4017b04 <__alt_mem_onchip_memory2_0+0xfc016884>
 4017b4c:	80800204 	addi	r2,r16,8
 4017b50:	003fec06 	br	4017b04 <__alt_mem_onchip_memory2_0+0xfc016884>
 4017b54:	0005883a 	mov	r2,zero
 4017b58:	003fee06 	br	4017b14 <__alt_mem_onchip_memory2_0+0xfc016894>

04017b5c <_fclose_r>:
 4017b5c:	28003926 	beq	r5,zero,4017c44 <_fclose_r+0xe8>
 4017b60:	defffc04 	addi	sp,sp,-16
 4017b64:	dc400115 	stw	r17,4(sp)
 4017b68:	dc000015 	stw	r16,0(sp)
 4017b6c:	dfc00315 	stw	ra,12(sp)
 4017b70:	dc800215 	stw	r18,8(sp)
 4017b74:	2023883a 	mov	r17,r4
 4017b78:	2821883a 	mov	r16,r5
 4017b7c:	20000226 	beq	r4,zero,4017b88 <_fclose_r+0x2c>
 4017b80:	20800e17 	ldw	r2,56(r4)
 4017b84:	10002726 	beq	r2,zero,4017c24 <_fclose_r+0xc8>
 4017b88:	8080030f 	ldh	r2,12(r16)
 4017b8c:	1000071e 	bne	r2,zero,4017bac <_fclose_r+0x50>
 4017b90:	0005883a 	mov	r2,zero
 4017b94:	dfc00317 	ldw	ra,12(sp)
 4017b98:	dc800217 	ldw	r18,8(sp)
 4017b9c:	dc400117 	ldw	r17,4(sp)
 4017ba0:	dc000017 	ldw	r16,0(sp)
 4017ba4:	dec00404 	addi	sp,sp,16
 4017ba8:	f800283a 	ret
 4017bac:	800b883a 	mov	r5,r16
 4017bb0:	8809883a 	mov	r4,r17
 4017bb4:	40132940 	call	4013294 <__sflush_r>
 4017bb8:	1025883a 	mov	r18,r2
 4017bbc:	80800b17 	ldw	r2,44(r16)
 4017bc0:	10000426 	beq	r2,zero,4017bd4 <_fclose_r+0x78>
 4017bc4:	81400717 	ldw	r5,28(r16)
 4017bc8:	8809883a 	mov	r4,r17
 4017bcc:	103ee83a 	callr	r2
 4017bd0:	10001616 	blt	r2,zero,4017c2c <_fclose_r+0xd0>
 4017bd4:	8080030b 	ldhu	r2,12(r16)
 4017bd8:	1080200c 	andi	r2,r2,128
 4017bdc:	1000151e 	bne	r2,zero,4017c34 <_fclose_r+0xd8>
 4017be0:	81400c17 	ldw	r5,48(r16)
 4017be4:	28000526 	beq	r5,zero,4017bfc <_fclose_r+0xa0>
 4017be8:	80801004 	addi	r2,r16,64
 4017bec:	28800226 	beq	r5,r2,4017bf8 <_fclose_r+0x9c>
 4017bf0:	8809883a 	mov	r4,r17
 4017bf4:	4013a100 	call	4013a10 <_free_r>
 4017bf8:	80000c15 	stw	zero,48(r16)
 4017bfc:	81401117 	ldw	r5,68(r16)
 4017c00:	28000326 	beq	r5,zero,4017c10 <_fclose_r+0xb4>
 4017c04:	8809883a 	mov	r4,r17
 4017c08:	4013a100 	call	4013a10 <_free_r>
 4017c0c:	80001115 	stw	zero,68(r16)
 4017c10:	40138ac0 	call	40138ac <__sfp_lock_acquire>
 4017c14:	8000030d 	sth	zero,12(r16)
 4017c18:	40138b00 	call	40138b0 <__sfp_lock_release>
 4017c1c:	9005883a 	mov	r2,r18
 4017c20:	003fdc06 	br	4017b94 <__alt_mem_onchip_memory2_0+0xfc016914>
 4017c24:	401389c0 	call	401389c <__sinit>
 4017c28:	003fd706 	br	4017b88 <__alt_mem_onchip_memory2_0+0xfc016908>
 4017c2c:	04bfffc4 	movi	r18,-1
 4017c30:	003fe806 	br	4017bd4 <__alt_mem_onchip_memory2_0+0xfc016954>
 4017c34:	81400417 	ldw	r5,16(r16)
 4017c38:	8809883a 	mov	r4,r17
 4017c3c:	4013a100 	call	4013a10 <_free_r>
 4017c40:	003fe706 	br	4017be0 <__alt_mem_onchip_memory2_0+0xfc016960>
 4017c44:	0005883a 	mov	r2,zero
 4017c48:	f800283a 	ret

04017c4c <fclose>:
 4017c4c:	008100f4 	movhi	r2,1027
 4017c50:	10a96004 	addi	r2,r2,-23168
 4017c54:	200b883a 	mov	r5,r4
 4017c58:	11000017 	ldw	r4,0(r2)
 4017c5c:	4017b5c1 	jmpi	4017b5c <_fclose_r>

04017c60 <__fputwc>:
 4017c60:	defff804 	addi	sp,sp,-32
 4017c64:	dcc00415 	stw	r19,16(sp)
 4017c68:	dc800315 	stw	r18,12(sp)
 4017c6c:	dc000115 	stw	r16,4(sp)
 4017c70:	dfc00715 	stw	ra,28(sp)
 4017c74:	dd400615 	stw	r21,24(sp)
 4017c78:	dd000515 	stw	r20,20(sp)
 4017c7c:	dc400215 	stw	r17,8(sp)
 4017c80:	2027883a 	mov	r19,r4
 4017c84:	2825883a 	mov	r18,r5
 4017c88:	3021883a 	mov	r16,r6
 4017c8c:	40143f80 	call	40143f8 <__locale_mb_cur_max>
 4017c90:	00c00044 	movi	r3,1
 4017c94:	10c03e26 	beq	r2,r3,4017d90 <__fputwc+0x130>
 4017c98:	81c01704 	addi	r7,r16,92
 4017c9c:	900d883a 	mov	r6,r18
 4017ca0:	d80b883a 	mov	r5,sp
 4017ca4:	9809883a 	mov	r4,r19
 4017ca8:	4017fd80 	call	4017fd8 <_wcrtomb_r>
 4017cac:	1029883a 	mov	r20,r2
 4017cb0:	00bfffc4 	movi	r2,-1
 4017cb4:	a0802026 	beq	r20,r2,4017d38 <__fputwc+0xd8>
 4017cb8:	d9400003 	ldbu	r5,0(sp)
 4017cbc:	a0001c26 	beq	r20,zero,4017d30 <__fputwc+0xd0>
 4017cc0:	0023883a 	mov	r17,zero
 4017cc4:	05400284 	movi	r21,10
 4017cc8:	00000906 	br	4017cf0 <__fputwc+0x90>
 4017ccc:	80800017 	ldw	r2,0(r16)
 4017cd0:	11400005 	stb	r5,0(r2)
 4017cd4:	80c00017 	ldw	r3,0(r16)
 4017cd8:	18c00044 	addi	r3,r3,1
 4017cdc:	80c00015 	stw	r3,0(r16)
 4017ce0:	8c400044 	addi	r17,r17,1
 4017ce4:	dc45883a 	add	r2,sp,r17
 4017ce8:	8d00112e 	bgeu	r17,r20,4017d30 <__fputwc+0xd0>
 4017cec:	11400003 	ldbu	r5,0(r2)
 4017cf0:	80c00217 	ldw	r3,8(r16)
 4017cf4:	18ffffc4 	addi	r3,r3,-1
 4017cf8:	80c00215 	stw	r3,8(r16)
 4017cfc:	183ff30e 	bge	r3,zero,4017ccc <__alt_mem_onchip_memory2_0+0xfc016a4c>
 4017d00:	80800617 	ldw	r2,24(r16)
 4017d04:	18801916 	blt	r3,r2,4017d6c <__fputwc+0x10c>
 4017d08:	80800017 	ldw	r2,0(r16)
 4017d0c:	11400005 	stb	r5,0(r2)
 4017d10:	80800017 	ldw	r2,0(r16)
 4017d14:	10c00003 	ldbu	r3,0(r2)
 4017d18:	10800044 	addi	r2,r2,1
 4017d1c:	1d402326 	beq	r3,r21,4017dac <__fputwc+0x14c>
 4017d20:	80800015 	stw	r2,0(r16)
 4017d24:	8c400044 	addi	r17,r17,1
 4017d28:	dc45883a 	add	r2,sp,r17
 4017d2c:	8d3fef36 	bltu	r17,r20,4017cec <__alt_mem_onchip_memory2_0+0xfc016a6c>
 4017d30:	9005883a 	mov	r2,r18
 4017d34:	00000406 	br	4017d48 <__fputwc+0xe8>
 4017d38:	80c0030b 	ldhu	r3,12(r16)
 4017d3c:	a005883a 	mov	r2,r20
 4017d40:	18c01014 	ori	r3,r3,64
 4017d44:	80c0030d 	sth	r3,12(r16)
 4017d48:	dfc00717 	ldw	ra,28(sp)
 4017d4c:	dd400617 	ldw	r21,24(sp)
 4017d50:	dd000517 	ldw	r20,20(sp)
 4017d54:	dcc00417 	ldw	r19,16(sp)
 4017d58:	dc800317 	ldw	r18,12(sp)
 4017d5c:	dc400217 	ldw	r17,8(sp)
 4017d60:	dc000117 	ldw	r16,4(sp)
 4017d64:	dec00804 	addi	sp,sp,32
 4017d68:	f800283a 	ret
 4017d6c:	800d883a 	mov	r6,r16
 4017d70:	29403fcc 	andi	r5,r5,255
 4017d74:	9809883a 	mov	r4,r19
 4017d78:	40178740 	call	4017874 <__swbuf_r>
 4017d7c:	10bfffe0 	cmpeqi	r2,r2,-1
 4017d80:	10803fcc 	andi	r2,r2,255
 4017d84:	103fd626 	beq	r2,zero,4017ce0 <__alt_mem_onchip_memory2_0+0xfc016a60>
 4017d88:	00bfffc4 	movi	r2,-1
 4017d8c:	003fee06 	br	4017d48 <__alt_mem_onchip_memory2_0+0xfc016ac8>
 4017d90:	90ffffc4 	addi	r3,r18,-1
 4017d94:	01003f84 	movi	r4,254
 4017d98:	20ffbf36 	bltu	r4,r3,4017c98 <__alt_mem_onchip_memory2_0+0xfc016a18>
 4017d9c:	900b883a 	mov	r5,r18
 4017da0:	dc800005 	stb	r18,0(sp)
 4017da4:	1029883a 	mov	r20,r2
 4017da8:	003fc506 	br	4017cc0 <__alt_mem_onchip_memory2_0+0xfc016a40>
 4017dac:	800d883a 	mov	r6,r16
 4017db0:	a80b883a 	mov	r5,r21
 4017db4:	9809883a 	mov	r4,r19
 4017db8:	40178740 	call	4017874 <__swbuf_r>
 4017dbc:	10bfffe0 	cmpeqi	r2,r2,-1
 4017dc0:	003fef06 	br	4017d80 <__alt_mem_onchip_memory2_0+0xfc016b00>

04017dc4 <_fputwc_r>:
 4017dc4:	3080030b 	ldhu	r2,12(r6)
 4017dc8:	10c8000c 	andi	r3,r2,8192
 4017dcc:	1800051e 	bne	r3,zero,4017de4 <_fputwc_r+0x20>
 4017dd0:	30c01917 	ldw	r3,100(r6)
 4017dd4:	10880014 	ori	r2,r2,8192
 4017dd8:	3080030d 	sth	r2,12(r6)
 4017ddc:	18880014 	ori	r2,r3,8192
 4017de0:	30801915 	stw	r2,100(r6)
 4017de4:	4017c601 	jmpi	4017c60 <__fputwc>

04017de8 <fputwc>:
 4017de8:	008100f4 	movhi	r2,1027
 4017dec:	defffc04 	addi	sp,sp,-16
 4017df0:	10a96004 	addi	r2,r2,-23168
 4017df4:	dc000115 	stw	r16,4(sp)
 4017df8:	14000017 	ldw	r16,0(r2)
 4017dfc:	dc400215 	stw	r17,8(sp)
 4017e00:	dfc00315 	stw	ra,12(sp)
 4017e04:	2023883a 	mov	r17,r4
 4017e08:	80000226 	beq	r16,zero,4017e14 <fputwc+0x2c>
 4017e0c:	80800e17 	ldw	r2,56(r16)
 4017e10:	10001026 	beq	r2,zero,4017e54 <fputwc+0x6c>
 4017e14:	2880030b 	ldhu	r2,12(r5)
 4017e18:	10c8000c 	andi	r3,r2,8192
 4017e1c:	1800051e 	bne	r3,zero,4017e34 <fputwc+0x4c>
 4017e20:	28c01917 	ldw	r3,100(r5)
 4017e24:	10880014 	ori	r2,r2,8192
 4017e28:	2880030d 	sth	r2,12(r5)
 4017e2c:	18880014 	ori	r2,r3,8192
 4017e30:	28801915 	stw	r2,100(r5)
 4017e34:	280d883a 	mov	r6,r5
 4017e38:	8009883a 	mov	r4,r16
 4017e3c:	880b883a 	mov	r5,r17
 4017e40:	dfc00317 	ldw	ra,12(sp)
 4017e44:	dc400217 	ldw	r17,8(sp)
 4017e48:	dc000117 	ldw	r16,4(sp)
 4017e4c:	dec00404 	addi	sp,sp,16
 4017e50:	4017c601 	jmpi	4017c60 <__fputwc>
 4017e54:	8009883a 	mov	r4,r16
 4017e58:	d9400015 	stw	r5,0(sp)
 4017e5c:	401389c0 	call	401389c <__sinit>
 4017e60:	d9400017 	ldw	r5,0(sp)
 4017e64:	003feb06 	br	4017e14 <__alt_mem_onchip_memory2_0+0xfc016b94>

04017e68 <_fstat_r>:
 4017e68:	defffd04 	addi	sp,sp,-12
 4017e6c:	2805883a 	mov	r2,r5
 4017e70:	dc000015 	stw	r16,0(sp)
 4017e74:	040100f4 	movhi	r16,1027
 4017e78:	dc400115 	stw	r17,4(sp)
 4017e7c:	8435f204 	addi	r16,r16,-10296
 4017e80:	2023883a 	mov	r17,r4
 4017e84:	300b883a 	mov	r5,r6
 4017e88:	1009883a 	mov	r4,r2
 4017e8c:	dfc00215 	stw	ra,8(sp)
 4017e90:	80000015 	stw	zero,0(r16)
 4017e94:	401b7700 	call	401b770 <fstat>
 4017e98:	00ffffc4 	movi	r3,-1
 4017e9c:	10c00526 	beq	r2,r3,4017eb4 <_fstat_r+0x4c>
 4017ea0:	dfc00217 	ldw	ra,8(sp)
 4017ea4:	dc400117 	ldw	r17,4(sp)
 4017ea8:	dc000017 	ldw	r16,0(sp)
 4017eac:	dec00304 	addi	sp,sp,12
 4017eb0:	f800283a 	ret
 4017eb4:	80c00017 	ldw	r3,0(r16)
 4017eb8:	183ff926 	beq	r3,zero,4017ea0 <__alt_mem_onchip_memory2_0+0xfc016c20>
 4017ebc:	88c00015 	stw	r3,0(r17)
 4017ec0:	003ff706 	br	4017ea0 <__alt_mem_onchip_memory2_0+0xfc016c20>

04017ec4 <_isatty_r>:
 4017ec4:	defffd04 	addi	sp,sp,-12
 4017ec8:	dc000015 	stw	r16,0(sp)
 4017ecc:	040100f4 	movhi	r16,1027
 4017ed0:	dc400115 	stw	r17,4(sp)
 4017ed4:	8435f204 	addi	r16,r16,-10296
 4017ed8:	2023883a 	mov	r17,r4
 4017edc:	2809883a 	mov	r4,r5
 4017ee0:	dfc00215 	stw	ra,8(sp)
 4017ee4:	80000015 	stw	zero,0(r16)
 4017ee8:	401b8840 	call	401b884 <isatty>
 4017eec:	00ffffc4 	movi	r3,-1
 4017ef0:	10c00526 	beq	r2,r3,4017f08 <_isatty_r+0x44>
 4017ef4:	dfc00217 	ldw	ra,8(sp)
 4017ef8:	dc400117 	ldw	r17,4(sp)
 4017efc:	dc000017 	ldw	r16,0(sp)
 4017f00:	dec00304 	addi	sp,sp,12
 4017f04:	f800283a 	ret
 4017f08:	80c00017 	ldw	r3,0(r16)
 4017f0c:	183ff926 	beq	r3,zero,4017ef4 <__alt_mem_onchip_memory2_0+0xfc016c74>
 4017f10:	88c00015 	stw	r3,0(r17)
 4017f14:	003ff706 	br	4017ef4 <__alt_mem_onchip_memory2_0+0xfc016c74>

04017f18 <_lseek_r>:
 4017f18:	defffd04 	addi	sp,sp,-12
 4017f1c:	2805883a 	mov	r2,r5
 4017f20:	dc000015 	stw	r16,0(sp)
 4017f24:	040100f4 	movhi	r16,1027
 4017f28:	dc400115 	stw	r17,4(sp)
 4017f2c:	300b883a 	mov	r5,r6
 4017f30:	8435f204 	addi	r16,r16,-10296
 4017f34:	2023883a 	mov	r17,r4
 4017f38:	380d883a 	mov	r6,r7
 4017f3c:	1009883a 	mov	r4,r2
 4017f40:	dfc00215 	stw	ra,8(sp)
 4017f44:	80000015 	stw	zero,0(r16)
 4017f48:	401bbc40 	call	401bbc4 <lseek>
 4017f4c:	00ffffc4 	movi	r3,-1
 4017f50:	10c00526 	beq	r2,r3,4017f68 <_lseek_r+0x50>
 4017f54:	dfc00217 	ldw	ra,8(sp)
 4017f58:	dc400117 	ldw	r17,4(sp)
 4017f5c:	dc000017 	ldw	r16,0(sp)
 4017f60:	dec00304 	addi	sp,sp,12
 4017f64:	f800283a 	ret
 4017f68:	80c00017 	ldw	r3,0(r16)
 4017f6c:	183ff926 	beq	r3,zero,4017f54 <__alt_mem_onchip_memory2_0+0xfc016cd4>
 4017f70:	88c00015 	stw	r3,0(r17)
 4017f74:	003ff706 	br	4017f54 <__alt_mem_onchip_memory2_0+0xfc016cd4>

04017f78 <_read_r>:
 4017f78:	defffd04 	addi	sp,sp,-12
 4017f7c:	2805883a 	mov	r2,r5
 4017f80:	dc000015 	stw	r16,0(sp)
 4017f84:	040100f4 	movhi	r16,1027
 4017f88:	dc400115 	stw	r17,4(sp)
 4017f8c:	300b883a 	mov	r5,r6
 4017f90:	8435f204 	addi	r16,r16,-10296
 4017f94:	2023883a 	mov	r17,r4
 4017f98:	380d883a 	mov	r6,r7
 4017f9c:	1009883a 	mov	r4,r2
 4017fa0:	dfc00215 	stw	ra,8(sp)
 4017fa4:	80000015 	stw	zero,0(r16)
 4017fa8:	401bda00 	call	401bda0 <read>
 4017fac:	00ffffc4 	movi	r3,-1
 4017fb0:	10c00526 	beq	r2,r3,4017fc8 <_read_r+0x50>
 4017fb4:	dfc00217 	ldw	ra,8(sp)
 4017fb8:	dc400117 	ldw	r17,4(sp)
 4017fbc:	dc000017 	ldw	r16,0(sp)
 4017fc0:	dec00304 	addi	sp,sp,12
 4017fc4:	f800283a 	ret
 4017fc8:	80c00017 	ldw	r3,0(r16)
 4017fcc:	183ff926 	beq	r3,zero,4017fb4 <__alt_mem_onchip_memory2_0+0xfc016d34>
 4017fd0:	88c00015 	stw	r3,0(r17)
 4017fd4:	003ff706 	br	4017fb4 <__alt_mem_onchip_memory2_0+0xfc016d34>

04017fd8 <_wcrtomb_r>:
 4017fd8:	defff604 	addi	sp,sp,-40
 4017fdc:	008100f4 	movhi	r2,1027
 4017fe0:	dc800815 	stw	r18,32(sp)
 4017fe4:	dc400715 	stw	r17,28(sp)
 4017fe8:	dc000615 	stw	r16,24(sp)
 4017fec:	10a96404 	addi	r2,r2,-23152
 4017ff0:	dfc00915 	stw	ra,36(sp)
 4017ff4:	2021883a 	mov	r16,r4
 4017ff8:	3823883a 	mov	r17,r7
 4017ffc:	14800017 	ldw	r18,0(r2)
 4018000:	28001426 	beq	r5,zero,4018054 <_wcrtomb_r+0x7c>
 4018004:	d9400415 	stw	r5,16(sp)
 4018008:	d9800515 	stw	r6,20(sp)
 401800c:	40143ec0 	call	40143ec <__locale_charset>
 4018010:	d9800517 	ldw	r6,20(sp)
 4018014:	d9400417 	ldw	r5,16(sp)
 4018018:	100f883a 	mov	r7,r2
 401801c:	dc400015 	stw	r17,0(sp)
 4018020:	8009883a 	mov	r4,r16
 4018024:	903ee83a 	callr	r18
 4018028:	00ffffc4 	movi	r3,-1
 401802c:	10c0031e 	bne	r2,r3,401803c <_wcrtomb_r+0x64>
 4018030:	88000015 	stw	zero,0(r17)
 4018034:	00c02284 	movi	r3,138
 4018038:	80c00015 	stw	r3,0(r16)
 401803c:	dfc00917 	ldw	ra,36(sp)
 4018040:	dc800817 	ldw	r18,32(sp)
 4018044:	dc400717 	ldw	r17,28(sp)
 4018048:	dc000617 	ldw	r16,24(sp)
 401804c:	dec00a04 	addi	sp,sp,40
 4018050:	f800283a 	ret
 4018054:	40143ec0 	call	40143ec <__locale_charset>
 4018058:	100f883a 	mov	r7,r2
 401805c:	dc400015 	stw	r17,0(sp)
 4018060:	000d883a 	mov	r6,zero
 4018064:	d9400104 	addi	r5,sp,4
 4018068:	8009883a 	mov	r4,r16
 401806c:	903ee83a 	callr	r18
 4018070:	003fed06 	br	4018028 <__alt_mem_onchip_memory2_0+0xfc016da8>

04018074 <wcrtomb>:
 4018074:	defff604 	addi	sp,sp,-40
 4018078:	008100f4 	movhi	r2,1027
 401807c:	dc800615 	stw	r18,24(sp)
 4018080:	dc400515 	stw	r17,20(sp)
 4018084:	10a96004 	addi	r2,r2,-23168
 4018088:	dfc00915 	stw	ra,36(sp)
 401808c:	dd000815 	stw	r20,32(sp)
 4018090:	dcc00715 	stw	r19,28(sp)
 4018094:	dc000415 	stw	r16,16(sp)
 4018098:	3025883a 	mov	r18,r6
 401809c:	14400017 	ldw	r17,0(r2)
 40180a0:	20001926 	beq	r4,zero,4018108 <wcrtomb+0x94>
 40180a4:	008100f4 	movhi	r2,1027
 40180a8:	10a96404 	addi	r2,r2,-23152
 40180ac:	15000017 	ldw	r20,0(r2)
 40180b0:	2021883a 	mov	r16,r4
 40180b4:	2827883a 	mov	r19,r5
 40180b8:	40143ec0 	call	40143ec <__locale_charset>
 40180bc:	100f883a 	mov	r7,r2
 40180c0:	dc800015 	stw	r18,0(sp)
 40180c4:	980d883a 	mov	r6,r19
 40180c8:	800b883a 	mov	r5,r16
 40180cc:	8809883a 	mov	r4,r17
 40180d0:	a03ee83a 	callr	r20
 40180d4:	00ffffc4 	movi	r3,-1
 40180d8:	10c0031e 	bne	r2,r3,40180e8 <wcrtomb+0x74>
 40180dc:	90000015 	stw	zero,0(r18)
 40180e0:	00c02284 	movi	r3,138
 40180e4:	88c00015 	stw	r3,0(r17)
 40180e8:	dfc00917 	ldw	ra,36(sp)
 40180ec:	dd000817 	ldw	r20,32(sp)
 40180f0:	dcc00717 	ldw	r19,28(sp)
 40180f4:	dc800617 	ldw	r18,24(sp)
 40180f8:	dc400517 	ldw	r17,20(sp)
 40180fc:	dc000417 	ldw	r16,16(sp)
 4018100:	dec00a04 	addi	sp,sp,40
 4018104:	f800283a 	ret
 4018108:	008100f4 	movhi	r2,1027
 401810c:	10a96404 	addi	r2,r2,-23152
 4018110:	14000017 	ldw	r16,0(r2)
 4018114:	40143ec0 	call	40143ec <__locale_charset>
 4018118:	100f883a 	mov	r7,r2
 401811c:	dc800015 	stw	r18,0(sp)
 4018120:	000d883a 	mov	r6,zero
 4018124:	d9400104 	addi	r5,sp,4
 4018128:	8809883a 	mov	r4,r17
 401812c:	803ee83a 	callr	r16
 4018130:	003fe806 	br	40180d4 <__alt_mem_onchip_memory2_0+0xfc016e54>

04018134 <__ascii_wctomb>:
 4018134:	28000526 	beq	r5,zero,401814c <__ascii_wctomb+0x18>
 4018138:	00803fc4 	movi	r2,255
 401813c:	11800536 	bltu	r2,r6,4018154 <__ascii_wctomb+0x20>
 4018140:	29800005 	stb	r6,0(r5)
 4018144:	00800044 	movi	r2,1
 4018148:	f800283a 	ret
 401814c:	0005883a 	mov	r2,zero
 4018150:	f800283a 	ret
 4018154:	00802284 	movi	r2,138
 4018158:	20800015 	stw	r2,0(r4)
 401815c:	00bfffc4 	movi	r2,-1
 4018160:	f800283a 	ret

04018164 <_wctomb_r>:
 4018164:	008100f4 	movhi	r2,1027
 4018168:	defff904 	addi	sp,sp,-28
 401816c:	10a96404 	addi	r2,r2,-23152
 4018170:	dfc00615 	stw	ra,24(sp)
 4018174:	dc400515 	stw	r17,20(sp)
 4018178:	dc000415 	stw	r16,16(sp)
 401817c:	3823883a 	mov	r17,r7
 4018180:	14000017 	ldw	r16,0(r2)
 4018184:	d9000115 	stw	r4,4(sp)
 4018188:	d9400215 	stw	r5,8(sp)
 401818c:	d9800315 	stw	r6,12(sp)
 4018190:	40143ec0 	call	40143ec <__locale_charset>
 4018194:	d9800317 	ldw	r6,12(sp)
 4018198:	d9400217 	ldw	r5,8(sp)
 401819c:	d9000117 	ldw	r4,4(sp)
 40181a0:	100f883a 	mov	r7,r2
 40181a4:	dc400015 	stw	r17,0(sp)
 40181a8:	803ee83a 	callr	r16
 40181ac:	dfc00617 	ldw	ra,24(sp)
 40181b0:	dc400517 	ldw	r17,20(sp)
 40181b4:	dc000417 	ldw	r16,16(sp)
 40181b8:	dec00704 	addi	sp,sp,28
 40181bc:	f800283a 	ret

040181c0 <__udivdi3>:
 40181c0:	defff404 	addi	sp,sp,-48
 40181c4:	dcc00515 	stw	r19,20(sp)
 40181c8:	dc000215 	stw	r16,8(sp)
 40181cc:	dfc00b15 	stw	ra,44(sp)
 40181d0:	df000a15 	stw	fp,40(sp)
 40181d4:	ddc00915 	stw	r23,36(sp)
 40181d8:	dd800815 	stw	r22,32(sp)
 40181dc:	dd400715 	stw	r21,28(sp)
 40181e0:	dd000615 	stw	r20,24(sp)
 40181e4:	dc800415 	stw	r18,16(sp)
 40181e8:	dc400315 	stw	r17,12(sp)
 40181ec:	2027883a 	mov	r19,r4
 40181f0:	2821883a 	mov	r16,r5
 40181f4:	3800461e 	bne	r7,zero,4018310 <__udivdi3+0x150>
 40181f8:	3023883a 	mov	r17,r6
 40181fc:	2025883a 	mov	r18,r4
 4018200:	2980572e 	bgeu	r5,r6,4018360 <__udivdi3+0x1a0>
 4018204:	00bfffd4 	movui	r2,65535
 4018208:	282d883a 	mov	r22,r5
 401820c:	1180b236 	bltu	r2,r6,40184d8 <__udivdi3+0x318>
 4018210:	00803fc4 	movi	r2,255
 4018214:	1185803a 	cmpltu	r2,r2,r6
 4018218:	100490fa 	slli	r2,r2,3
 401821c:	3086d83a 	srl	r3,r6,r2
 4018220:	010100b4 	movhi	r4,1026
 4018224:	211c2f04 	addi	r4,r4,28860
 4018228:	20c7883a 	add	r3,r4,r3
 401822c:	18c00003 	ldbu	r3,0(r3)
 4018230:	1885883a 	add	r2,r3,r2
 4018234:	00c00804 	movi	r3,32
 4018238:	1887c83a 	sub	r3,r3,r2
 401823c:	18000526 	beq	r3,zero,4018254 <__udivdi3+0x94>
 4018240:	80e0983a 	sll	r16,r16,r3
 4018244:	9884d83a 	srl	r2,r19,r2
 4018248:	30e2983a 	sll	r17,r6,r3
 401824c:	98e4983a 	sll	r18,r19,r3
 4018250:	142cb03a 	or	r22,r2,r16
 4018254:	882ad43a 	srli	r21,r17,16
 4018258:	b009883a 	mov	r4,r22
 401825c:	8d3fffcc 	andi	r20,r17,65535
 4018260:	a80b883a 	mov	r5,r21
 4018264:	400d26c0 	call	400d26c <__umodsi3>
 4018268:	b009883a 	mov	r4,r22
 401826c:	a80b883a 	mov	r5,r21
 4018270:	1027883a 	mov	r19,r2
 4018274:	400d2080 	call	400d208 <__udivsi3>
 4018278:	100b883a 	mov	r5,r2
 401827c:	a009883a 	mov	r4,r20
 4018280:	102d883a 	mov	r22,r2
 4018284:	400d2c40 	call	400d2c4 <__mulsi3>
 4018288:	9826943a 	slli	r19,r19,16
 401828c:	9006d43a 	srli	r3,r18,16
 4018290:	1cc6b03a 	or	r3,r3,r19
 4018294:	1880052e 	bgeu	r3,r2,40182ac <__udivdi3+0xec>
 4018298:	1c47883a 	add	r3,r3,r17
 401829c:	b13fffc4 	addi	r4,r22,-1
 40182a0:	1c400136 	bltu	r3,r17,40182a8 <__udivdi3+0xe8>
 40182a4:	18814236 	bltu	r3,r2,40187b0 <__udivdi3+0x5f0>
 40182a8:	202d883a 	mov	r22,r4
 40182ac:	18a1c83a 	sub	r16,r3,r2
 40182b0:	8009883a 	mov	r4,r16
 40182b4:	a80b883a 	mov	r5,r21
 40182b8:	400d26c0 	call	400d26c <__umodsi3>
 40182bc:	1027883a 	mov	r19,r2
 40182c0:	8009883a 	mov	r4,r16
 40182c4:	a80b883a 	mov	r5,r21
 40182c8:	9826943a 	slli	r19,r19,16
 40182cc:	400d2080 	call	400d208 <__udivsi3>
 40182d0:	100b883a 	mov	r5,r2
 40182d4:	a009883a 	mov	r4,r20
 40182d8:	94bfffcc 	andi	r18,r18,65535
 40182dc:	1021883a 	mov	r16,r2
 40182e0:	94e4b03a 	or	r18,r18,r19
 40182e4:	400d2c40 	call	400d2c4 <__mulsi3>
 40182e8:	9080052e 	bgeu	r18,r2,4018300 <__udivdi3+0x140>
 40182ec:	8ca5883a 	add	r18,r17,r18
 40182f0:	80ffffc4 	addi	r3,r16,-1
 40182f4:	94410c36 	bltu	r18,r17,4018728 <__udivdi3+0x568>
 40182f8:	90810b2e 	bgeu	r18,r2,4018728 <__udivdi3+0x568>
 40182fc:	843fff84 	addi	r16,r16,-2
 4018300:	b004943a 	slli	r2,r22,16
 4018304:	0007883a 	mov	r3,zero
 4018308:	1404b03a 	or	r2,r2,r16
 401830c:	00005e06 	br	4018488 <__udivdi3+0x2c8>
 4018310:	29c05b36 	bltu	r5,r7,4018480 <__udivdi3+0x2c0>
 4018314:	00bfffd4 	movui	r2,65535
 4018318:	11c0672e 	bgeu	r2,r7,40184b8 <__udivdi3+0x2f8>
 401831c:	00804034 	movhi	r2,256
 4018320:	10bfffc4 	addi	r2,r2,-1
 4018324:	11c10a36 	bltu	r2,r7,4018750 <__udivdi3+0x590>
 4018328:	00800404 	movi	r2,16
 401832c:	3886d83a 	srl	r3,r7,r2
 4018330:	010100b4 	movhi	r4,1026
 4018334:	211c2f04 	addi	r4,r4,28860
 4018338:	20c7883a 	add	r3,r4,r3
 401833c:	18c00003 	ldbu	r3,0(r3)
 4018340:	05c00804 	movi	r23,32
 4018344:	1885883a 	add	r2,r3,r2
 4018348:	b8afc83a 	sub	r23,r23,r2
 401834c:	b800671e 	bne	r23,zero,40184ec <__udivdi3+0x32c>
 4018350:	3c010536 	bltu	r7,r16,4018768 <__udivdi3+0x5a8>
 4018354:	9985403a 	cmpgeu	r2,r19,r6
 4018358:	0007883a 	mov	r3,zero
 401835c:	00004a06 	br	4018488 <__udivdi3+0x2c8>
 4018360:	3000041e 	bne	r6,zero,4018374 <__udivdi3+0x1b4>
 4018364:	000b883a 	mov	r5,zero
 4018368:	01000044 	movi	r4,1
 401836c:	400d2080 	call	400d208 <__udivsi3>
 4018370:	1023883a 	mov	r17,r2
 4018374:	00bfffd4 	movui	r2,65535
 4018378:	1440532e 	bgeu	r2,r17,40184c8 <__udivdi3+0x308>
 401837c:	00804034 	movhi	r2,256
 4018380:	10bfffc4 	addi	r2,r2,-1
 4018384:	1440f436 	bltu	r2,r17,4018758 <__udivdi3+0x598>
 4018388:	00800404 	movi	r2,16
 401838c:	8886d83a 	srl	r3,r17,r2
 4018390:	010100b4 	movhi	r4,1026
 4018394:	211c2f04 	addi	r4,r4,28860
 4018398:	20c7883a 	add	r3,r4,r3
 401839c:	18c00003 	ldbu	r3,0(r3)
 40183a0:	1885883a 	add	r2,r3,r2
 40183a4:	00c00804 	movi	r3,32
 40183a8:	1887c83a 	sub	r3,r3,r2
 40183ac:	1800a51e 	bne	r3,zero,4018644 <__udivdi3+0x484>
 40183b0:	882ad43a 	srli	r21,r17,16
 40183b4:	8461c83a 	sub	r16,r16,r17
 40183b8:	8d3fffcc 	andi	r20,r17,65535
 40183bc:	00c00044 	movi	r3,1
 40183c0:	a80b883a 	mov	r5,r21
 40183c4:	8009883a 	mov	r4,r16
 40183c8:	d8c00115 	stw	r3,4(sp)
 40183cc:	400d26c0 	call	400d26c <__umodsi3>
 40183d0:	a80b883a 	mov	r5,r21
 40183d4:	8009883a 	mov	r4,r16
 40183d8:	1027883a 	mov	r19,r2
 40183dc:	400d2080 	call	400d208 <__udivsi3>
 40183e0:	a00b883a 	mov	r5,r20
 40183e4:	1009883a 	mov	r4,r2
 40183e8:	102d883a 	mov	r22,r2
 40183ec:	400d2c40 	call	400d2c4 <__mulsi3>
 40183f0:	9826943a 	slli	r19,r19,16
 40183f4:	900ed43a 	srli	r7,r18,16
 40183f8:	d8c00117 	ldw	r3,4(sp)
 40183fc:	3cceb03a 	or	r7,r7,r19
 4018400:	3880052e 	bgeu	r7,r2,4018418 <__udivdi3+0x258>
 4018404:	3c4f883a 	add	r7,r7,r17
 4018408:	b13fffc4 	addi	r4,r22,-1
 401840c:	3c400136 	bltu	r7,r17,4018414 <__udivdi3+0x254>
 4018410:	3880e436 	bltu	r7,r2,40187a4 <__udivdi3+0x5e4>
 4018414:	202d883a 	mov	r22,r4
 4018418:	38a1c83a 	sub	r16,r7,r2
 401841c:	8009883a 	mov	r4,r16
 4018420:	a80b883a 	mov	r5,r21
 4018424:	d8c00115 	stw	r3,4(sp)
 4018428:	400d26c0 	call	400d26c <__umodsi3>
 401842c:	1027883a 	mov	r19,r2
 4018430:	8009883a 	mov	r4,r16
 4018434:	a80b883a 	mov	r5,r21
 4018438:	9826943a 	slli	r19,r19,16
 401843c:	400d2080 	call	400d208 <__udivsi3>
 4018440:	a00b883a 	mov	r5,r20
 4018444:	1009883a 	mov	r4,r2
 4018448:	94bfffcc 	andi	r18,r18,65535
 401844c:	1021883a 	mov	r16,r2
 4018450:	94e4b03a 	or	r18,r18,r19
 4018454:	400d2c40 	call	400d2c4 <__mulsi3>
 4018458:	d8c00117 	ldw	r3,4(sp)
 401845c:	9080052e 	bgeu	r18,r2,4018474 <__udivdi3+0x2b4>
 4018460:	8ca5883a 	add	r18,r17,r18
 4018464:	813fffc4 	addi	r4,r16,-1
 4018468:	9440ad36 	bltu	r18,r17,4018720 <__udivdi3+0x560>
 401846c:	9080ac2e 	bgeu	r18,r2,4018720 <__udivdi3+0x560>
 4018470:	843fff84 	addi	r16,r16,-2
 4018474:	b004943a 	slli	r2,r22,16
 4018478:	1404b03a 	or	r2,r2,r16
 401847c:	00000206 	br	4018488 <__udivdi3+0x2c8>
 4018480:	0007883a 	mov	r3,zero
 4018484:	0005883a 	mov	r2,zero
 4018488:	dfc00b17 	ldw	ra,44(sp)
 401848c:	df000a17 	ldw	fp,40(sp)
 4018490:	ddc00917 	ldw	r23,36(sp)
 4018494:	dd800817 	ldw	r22,32(sp)
 4018498:	dd400717 	ldw	r21,28(sp)
 401849c:	dd000617 	ldw	r20,24(sp)
 40184a0:	dcc00517 	ldw	r19,20(sp)
 40184a4:	dc800417 	ldw	r18,16(sp)
 40184a8:	dc400317 	ldw	r17,12(sp)
 40184ac:	dc000217 	ldw	r16,8(sp)
 40184b0:	dec00c04 	addi	sp,sp,48
 40184b4:	f800283a 	ret
 40184b8:	00803fc4 	movi	r2,255
 40184bc:	11c5803a 	cmpltu	r2,r2,r7
 40184c0:	100490fa 	slli	r2,r2,3
 40184c4:	003f9906 	br	401832c <__alt_mem_onchip_memory2_0+0xfc0170ac>
 40184c8:	00803fc4 	movi	r2,255
 40184cc:	1445803a 	cmpltu	r2,r2,r17
 40184d0:	100490fa 	slli	r2,r2,3
 40184d4:	003fad06 	br	401838c <__alt_mem_onchip_memory2_0+0xfc01710c>
 40184d8:	00804034 	movhi	r2,256
 40184dc:	10bfffc4 	addi	r2,r2,-1
 40184e0:	11809f36 	bltu	r2,r6,4018760 <__udivdi3+0x5a0>
 40184e4:	00800404 	movi	r2,16
 40184e8:	003f4c06 	br	401821c <__alt_mem_onchip_memory2_0+0xfc016f9c>
 40184ec:	3dce983a 	sll	r7,r7,r23
 40184f0:	30b8d83a 	srl	fp,r6,r2
 40184f4:	80a2d83a 	srl	r17,r16,r2
 40184f8:	35cc983a 	sll	r6,r6,r23
 40184fc:	3f38b03a 	or	fp,r7,fp
 4018500:	e024d43a 	srli	r18,fp,16
 4018504:	9884d83a 	srl	r2,r19,r2
 4018508:	85e0983a 	sll	r16,r16,r23
 401850c:	8809883a 	mov	r4,r17
 4018510:	900b883a 	mov	r5,r18
 4018514:	d9800015 	stw	r6,0(sp)
 4018518:	1420b03a 	or	r16,r2,r16
 401851c:	400d26c0 	call	400d26c <__umodsi3>
 4018520:	900b883a 	mov	r5,r18
 4018524:	8809883a 	mov	r4,r17
 4018528:	1029883a 	mov	r20,r2
 401852c:	e5bfffcc 	andi	r22,fp,65535
 4018530:	400d2080 	call	400d208 <__udivsi3>
 4018534:	100b883a 	mov	r5,r2
 4018538:	b009883a 	mov	r4,r22
 401853c:	102b883a 	mov	r21,r2
 4018540:	400d2c40 	call	400d2c4 <__mulsi3>
 4018544:	a028943a 	slli	r20,r20,16
 4018548:	8006d43a 	srli	r3,r16,16
 401854c:	1d06b03a 	or	r3,r3,r20
 4018550:	1880042e 	bgeu	r3,r2,4018564 <__udivdi3+0x3a4>
 4018554:	1f07883a 	add	r3,r3,fp
 4018558:	a93fffc4 	addi	r4,r21,-1
 401855c:	1f00892e 	bgeu	r3,fp,4018784 <__udivdi3+0x5c4>
 4018560:	202b883a 	mov	r21,r4
 4018564:	18a3c83a 	sub	r17,r3,r2
 4018568:	8809883a 	mov	r4,r17
 401856c:	900b883a 	mov	r5,r18
 4018570:	400d26c0 	call	400d26c <__umodsi3>
 4018574:	1029883a 	mov	r20,r2
 4018578:	8809883a 	mov	r4,r17
 401857c:	900b883a 	mov	r5,r18
 4018580:	a028943a 	slli	r20,r20,16
 4018584:	400d2080 	call	400d208 <__udivsi3>
 4018588:	100b883a 	mov	r5,r2
 401858c:	b009883a 	mov	r4,r22
 4018590:	843fffcc 	andi	r16,r16,65535
 4018594:	1023883a 	mov	r17,r2
 4018598:	8520b03a 	or	r16,r16,r20
 401859c:	400d2c40 	call	400d2c4 <__mulsi3>
 40185a0:	8080042e 	bgeu	r16,r2,40185b4 <__udivdi3+0x3f4>
 40185a4:	8721883a 	add	r16,r16,fp
 40185a8:	88ffffc4 	addi	r3,r17,-1
 40185ac:	8700712e 	bgeu	r16,fp,4018774 <__udivdi3+0x5b4>
 40185b0:	1823883a 	mov	r17,r3
 40185b4:	a80e943a 	slli	r7,r21,16
 40185b8:	d8c00017 	ldw	r3,0(sp)
 40185bc:	80a1c83a 	sub	r16,r16,r2
 40185c0:	3c64b03a 	or	r18,r7,r17
 40185c4:	1d3fffcc 	andi	r20,r3,65535
 40185c8:	9022d43a 	srli	r17,r18,16
 40185cc:	95bfffcc 	andi	r22,r18,65535
 40185d0:	a00b883a 	mov	r5,r20
 40185d4:	b009883a 	mov	r4,r22
 40185d8:	182ad43a 	srli	r21,r3,16
 40185dc:	400d2c40 	call	400d2c4 <__mulsi3>
 40185e0:	a00b883a 	mov	r5,r20
 40185e4:	8809883a 	mov	r4,r17
 40185e8:	1039883a 	mov	fp,r2
 40185ec:	400d2c40 	call	400d2c4 <__mulsi3>
 40185f0:	8809883a 	mov	r4,r17
 40185f4:	a80b883a 	mov	r5,r21
 40185f8:	1029883a 	mov	r20,r2
 40185fc:	400d2c40 	call	400d2c4 <__mulsi3>
 4018600:	a80b883a 	mov	r5,r21
 4018604:	b009883a 	mov	r4,r22
 4018608:	1023883a 	mov	r17,r2
 401860c:	400d2c40 	call	400d2c4 <__mulsi3>
 4018610:	e006d43a 	srli	r3,fp,16
 4018614:	1505883a 	add	r2,r2,r20
 4018618:	1887883a 	add	r3,r3,r2
 401861c:	1d00022e 	bgeu	r3,r20,4018628 <__udivdi3+0x468>
 4018620:	00800074 	movhi	r2,1
 4018624:	88a3883a 	add	r17,r17,r2
 4018628:	1804d43a 	srli	r2,r3,16
 401862c:	1463883a 	add	r17,r2,r17
 4018630:	84404436 	bltu	r16,r17,4018744 <__udivdi3+0x584>
 4018634:	84403e26 	beq	r16,r17,4018730 <__udivdi3+0x570>
 4018638:	9005883a 	mov	r2,r18
 401863c:	0007883a 	mov	r3,zero
 4018640:	003f9106 	br	4018488 <__alt_mem_onchip_memory2_0+0xfc017208>
 4018644:	88e2983a 	sll	r17,r17,r3
 4018648:	80aed83a 	srl	r23,r16,r2
 401864c:	80e0983a 	sll	r16,r16,r3
 4018650:	882ad43a 	srli	r21,r17,16
 4018654:	9884d83a 	srl	r2,r19,r2
 4018658:	b809883a 	mov	r4,r23
 401865c:	a80b883a 	mov	r5,r21
 4018660:	98e4983a 	sll	r18,r19,r3
 4018664:	142cb03a 	or	r22,r2,r16
 4018668:	400d26c0 	call	400d26c <__umodsi3>
 401866c:	b809883a 	mov	r4,r23
 4018670:	a80b883a 	mov	r5,r21
 4018674:	1027883a 	mov	r19,r2
 4018678:	8d3fffcc 	andi	r20,r17,65535
 401867c:	400d2080 	call	400d208 <__udivsi3>
 4018680:	a009883a 	mov	r4,r20
 4018684:	100b883a 	mov	r5,r2
 4018688:	102f883a 	mov	r23,r2
 401868c:	400d2c40 	call	400d2c4 <__mulsi3>
 4018690:	9826943a 	slli	r19,r19,16
 4018694:	b008d43a 	srli	r4,r22,16
 4018698:	24c8b03a 	or	r4,r4,r19
 401869c:	2080062e 	bgeu	r4,r2,40186b8 <__udivdi3+0x4f8>
 40186a0:	2449883a 	add	r4,r4,r17
 40186a4:	b8ffffc4 	addi	r3,r23,-1
 40186a8:	24403c36 	bltu	r4,r17,401879c <__udivdi3+0x5dc>
 40186ac:	20803b2e 	bgeu	r4,r2,401879c <__udivdi3+0x5dc>
 40186b0:	bdffff84 	addi	r23,r23,-2
 40186b4:	2449883a 	add	r4,r4,r17
 40186b8:	20a1c83a 	sub	r16,r4,r2
 40186bc:	a80b883a 	mov	r5,r21
 40186c0:	8009883a 	mov	r4,r16
 40186c4:	400d26c0 	call	400d26c <__umodsi3>
 40186c8:	a80b883a 	mov	r5,r21
 40186cc:	8009883a 	mov	r4,r16
 40186d0:	1027883a 	mov	r19,r2
 40186d4:	400d2080 	call	400d208 <__udivsi3>
 40186d8:	a009883a 	mov	r4,r20
 40186dc:	100b883a 	mov	r5,r2
 40186e0:	9826943a 	slli	r19,r19,16
 40186e4:	1039883a 	mov	fp,r2
 40186e8:	400d2c40 	call	400d2c4 <__mulsi3>
 40186ec:	b13fffcc 	andi	r4,r22,65535
 40186f0:	24c8b03a 	or	r4,r4,r19
 40186f4:	2080062e 	bgeu	r4,r2,4018710 <__udivdi3+0x550>
 40186f8:	2449883a 	add	r4,r4,r17
 40186fc:	e0ffffc4 	addi	r3,fp,-1
 4018700:	24402436 	bltu	r4,r17,4018794 <__udivdi3+0x5d4>
 4018704:	2080232e 	bgeu	r4,r2,4018794 <__udivdi3+0x5d4>
 4018708:	e73fff84 	addi	fp,fp,-2
 401870c:	2449883a 	add	r4,r4,r17
 4018710:	b82e943a 	slli	r23,r23,16
 4018714:	20a1c83a 	sub	r16,r4,r2
 4018718:	bf06b03a 	or	r3,r23,fp
 401871c:	003f2806 	br	40183c0 <__alt_mem_onchip_memory2_0+0xfc017140>
 4018720:	2021883a 	mov	r16,r4
 4018724:	003f5306 	br	4018474 <__alt_mem_onchip_memory2_0+0xfc0171f4>
 4018728:	1821883a 	mov	r16,r3
 401872c:	003ef406 	br	4018300 <__alt_mem_onchip_memory2_0+0xfc017080>
 4018730:	1806943a 	slli	r3,r3,16
 4018734:	9de6983a 	sll	r19,r19,r23
 4018738:	e73fffcc 	andi	fp,fp,65535
 401873c:	1f07883a 	add	r3,r3,fp
 4018740:	98ffbd2e 	bgeu	r19,r3,4018638 <__alt_mem_onchip_memory2_0+0xfc0173b8>
 4018744:	90bfffc4 	addi	r2,r18,-1
 4018748:	0007883a 	mov	r3,zero
 401874c:	003f4e06 	br	4018488 <__alt_mem_onchip_memory2_0+0xfc017208>
 4018750:	00800604 	movi	r2,24
 4018754:	003ef506 	br	401832c <__alt_mem_onchip_memory2_0+0xfc0170ac>
 4018758:	00800604 	movi	r2,24
 401875c:	003f0b06 	br	401838c <__alt_mem_onchip_memory2_0+0xfc01710c>
 4018760:	00800604 	movi	r2,24
 4018764:	003ead06 	br	401821c <__alt_mem_onchip_memory2_0+0xfc016f9c>
 4018768:	0007883a 	mov	r3,zero
 401876c:	00800044 	movi	r2,1
 4018770:	003f4506 	br	4018488 <__alt_mem_onchip_memory2_0+0xfc017208>
 4018774:	80bf8e2e 	bgeu	r16,r2,40185b0 <__alt_mem_onchip_memory2_0+0xfc017330>
 4018778:	8c7fff84 	addi	r17,r17,-2
 401877c:	8721883a 	add	r16,r16,fp
 4018780:	003f8c06 	br	40185b4 <__alt_mem_onchip_memory2_0+0xfc017334>
 4018784:	18bf762e 	bgeu	r3,r2,4018560 <__alt_mem_onchip_memory2_0+0xfc0172e0>
 4018788:	ad7fff84 	addi	r21,r21,-2
 401878c:	1f07883a 	add	r3,r3,fp
 4018790:	003f7406 	br	4018564 <__alt_mem_onchip_memory2_0+0xfc0172e4>
 4018794:	1839883a 	mov	fp,r3
 4018798:	003fdd06 	br	4018710 <__alt_mem_onchip_memory2_0+0xfc017490>
 401879c:	182f883a 	mov	r23,r3
 40187a0:	003fc506 	br	40186b8 <__alt_mem_onchip_memory2_0+0xfc017438>
 40187a4:	b5bfff84 	addi	r22,r22,-2
 40187a8:	3c4f883a 	add	r7,r7,r17
 40187ac:	003f1a06 	br	4018418 <__alt_mem_onchip_memory2_0+0xfc017198>
 40187b0:	b5bfff84 	addi	r22,r22,-2
 40187b4:	1c47883a 	add	r3,r3,r17
 40187b8:	003ebc06 	br	40182ac <__alt_mem_onchip_memory2_0+0xfc01702c>

040187bc <__umoddi3>:
 40187bc:	defff304 	addi	sp,sp,-52
 40187c0:	df000b15 	stw	fp,44(sp)
 40187c4:	dc400415 	stw	r17,16(sp)
 40187c8:	dc000315 	stw	r16,12(sp)
 40187cc:	dfc00c15 	stw	ra,48(sp)
 40187d0:	ddc00a15 	stw	r23,40(sp)
 40187d4:	dd800915 	stw	r22,36(sp)
 40187d8:	dd400815 	stw	r21,32(sp)
 40187dc:	dd000715 	stw	r20,28(sp)
 40187e0:	dcc00615 	stw	r19,24(sp)
 40187e4:	dc800515 	stw	r18,20(sp)
 40187e8:	2021883a 	mov	r16,r4
 40187ec:	2823883a 	mov	r17,r5
 40187f0:	2839883a 	mov	fp,r5
 40187f4:	3800401e 	bne	r7,zero,40188f8 <__umoddi3+0x13c>
 40187f8:	3027883a 	mov	r19,r6
 40187fc:	2029883a 	mov	r20,r4
 4018800:	2980552e 	bgeu	r5,r6,4018958 <__umoddi3+0x19c>
 4018804:	00bfffd4 	movui	r2,65535
 4018808:	1180a236 	bltu	r2,r6,4018a94 <__umoddi3+0x2d8>
 401880c:	01003fc4 	movi	r4,255
 4018810:	2189803a 	cmpltu	r4,r4,r6
 4018814:	200890fa 	slli	r4,r4,3
 4018818:	3104d83a 	srl	r2,r6,r4
 401881c:	00c100b4 	movhi	r3,1026
 4018820:	18dc2f04 	addi	r3,r3,28860
 4018824:	1885883a 	add	r2,r3,r2
 4018828:	10c00003 	ldbu	r3,0(r2)
 401882c:	00800804 	movi	r2,32
 4018830:	1909883a 	add	r4,r3,r4
 4018834:	1125c83a 	sub	r18,r2,r4
 4018838:	90000526 	beq	r18,zero,4018850 <__umoddi3+0x94>
 401883c:	8ca2983a 	sll	r17,r17,r18
 4018840:	8108d83a 	srl	r4,r16,r4
 4018844:	34a6983a 	sll	r19,r6,r18
 4018848:	84a8983a 	sll	r20,r16,r18
 401884c:	2478b03a 	or	fp,r4,r17
 4018850:	982cd43a 	srli	r22,r19,16
 4018854:	e009883a 	mov	r4,fp
 4018858:	9dffffcc 	andi	r23,r19,65535
 401885c:	b00b883a 	mov	r5,r22
 4018860:	400d26c0 	call	400d26c <__umodsi3>
 4018864:	b00b883a 	mov	r5,r22
 4018868:	e009883a 	mov	r4,fp
 401886c:	102b883a 	mov	r21,r2
 4018870:	400d2080 	call	400d208 <__udivsi3>
 4018874:	100b883a 	mov	r5,r2
 4018878:	b809883a 	mov	r4,r23
 401887c:	400d2c40 	call	400d2c4 <__mulsi3>
 4018880:	a82a943a 	slli	r21,r21,16
 4018884:	a006d43a 	srli	r3,r20,16
 4018888:	1d46b03a 	or	r3,r3,r21
 401888c:	1880032e 	bgeu	r3,r2,401889c <__umoddi3+0xe0>
 4018890:	1cc7883a 	add	r3,r3,r19
 4018894:	1cc00136 	bltu	r3,r19,401889c <__umoddi3+0xe0>
 4018898:	18813136 	bltu	r3,r2,4018d60 <__umoddi3+0x5a4>
 401889c:	18a1c83a 	sub	r16,r3,r2
 40188a0:	b00b883a 	mov	r5,r22
 40188a4:	8009883a 	mov	r4,r16
 40188a8:	400d26c0 	call	400d26c <__umodsi3>
 40188ac:	b00b883a 	mov	r5,r22
 40188b0:	8009883a 	mov	r4,r16
 40188b4:	1023883a 	mov	r17,r2
 40188b8:	400d2080 	call	400d208 <__udivsi3>
 40188bc:	100b883a 	mov	r5,r2
 40188c0:	b809883a 	mov	r4,r23
 40188c4:	8822943a 	slli	r17,r17,16
 40188c8:	400d2c40 	call	400d2c4 <__mulsi3>
 40188cc:	a0ffffcc 	andi	r3,r20,65535
 40188d0:	1c46b03a 	or	r3,r3,r17
 40188d4:	1880042e 	bgeu	r3,r2,40188e8 <__umoddi3+0x12c>
 40188d8:	1cc7883a 	add	r3,r3,r19
 40188dc:	1cc00236 	bltu	r3,r19,40188e8 <__umoddi3+0x12c>
 40188e0:	1880012e 	bgeu	r3,r2,40188e8 <__umoddi3+0x12c>
 40188e4:	1cc7883a 	add	r3,r3,r19
 40188e8:	1885c83a 	sub	r2,r3,r2
 40188ec:	1484d83a 	srl	r2,r2,r18
 40188f0:	0007883a 	mov	r3,zero
 40188f4:	00005306 	br	4018a44 <__umoddi3+0x288>
 40188f8:	29c05036 	bltu	r5,r7,4018a3c <__umoddi3+0x280>
 40188fc:	00bfffd4 	movui	r2,65535
 4018900:	11c05c2e 	bgeu	r2,r7,4018a74 <__umoddi3+0x2b8>
 4018904:	00804034 	movhi	r2,256
 4018908:	10bfffc4 	addi	r2,r2,-1
 401890c:	11c10636 	bltu	r2,r7,4018d28 <__umoddi3+0x56c>
 4018910:	01000404 	movi	r4,16
 4018914:	3904d83a 	srl	r2,r7,r4
 4018918:	00c100b4 	movhi	r3,1026
 401891c:	18dc2f04 	addi	r3,r3,28860
 4018920:	1885883a 	add	r2,r3,r2
 4018924:	14c00003 	ldbu	r19,0(r2)
 4018928:	00c00804 	movi	r3,32
 401892c:	9927883a 	add	r19,r19,r4
 4018930:	1ce9c83a 	sub	r20,r3,r19
 4018934:	a0005c1e 	bne	r20,zero,4018aa8 <__umoddi3+0x2ec>
 4018938:	3c400136 	bltu	r7,r17,4018940 <__umoddi3+0x184>
 401893c:	81810a36 	bltu	r16,r6,4018d68 <__umoddi3+0x5ac>
 4018940:	8185c83a 	sub	r2,r16,r6
 4018944:	89e3c83a 	sub	r17,r17,r7
 4018948:	8089803a 	cmpltu	r4,r16,r2
 401894c:	8939c83a 	sub	fp,r17,r4
 4018950:	e007883a 	mov	r3,fp
 4018954:	00003b06 	br	4018a44 <__umoddi3+0x288>
 4018958:	3000041e 	bne	r6,zero,401896c <__umoddi3+0x1b0>
 401895c:	000b883a 	mov	r5,zero
 4018960:	01000044 	movi	r4,1
 4018964:	400d2080 	call	400d208 <__udivsi3>
 4018968:	1027883a 	mov	r19,r2
 401896c:	00bfffd4 	movui	r2,65535
 4018970:	14c0442e 	bgeu	r2,r19,4018a84 <__umoddi3+0x2c8>
 4018974:	00804034 	movhi	r2,256
 4018978:	10bfffc4 	addi	r2,r2,-1
 401897c:	14c0ec36 	bltu	r2,r19,4018d30 <__umoddi3+0x574>
 4018980:	00800404 	movi	r2,16
 4018984:	9886d83a 	srl	r3,r19,r2
 4018988:	010100b4 	movhi	r4,1026
 401898c:	211c2f04 	addi	r4,r4,28860
 4018990:	20c7883a 	add	r3,r4,r3
 4018994:	18c00003 	ldbu	r3,0(r3)
 4018998:	1887883a 	add	r3,r3,r2
 401899c:	00800804 	movi	r2,32
 40189a0:	10e5c83a 	sub	r18,r2,r3
 40189a4:	9000ab1e 	bne	r18,zero,4018c54 <__umoddi3+0x498>
 40189a8:	982cd43a 	srli	r22,r19,16
 40189ac:	8ce3c83a 	sub	r17,r17,r19
 40189b0:	9dffffcc 	andi	r23,r19,65535
 40189b4:	b00b883a 	mov	r5,r22
 40189b8:	8809883a 	mov	r4,r17
 40189bc:	400d26c0 	call	400d26c <__umodsi3>
 40189c0:	b00b883a 	mov	r5,r22
 40189c4:	8809883a 	mov	r4,r17
 40189c8:	102b883a 	mov	r21,r2
 40189cc:	400d2080 	call	400d208 <__udivsi3>
 40189d0:	b80b883a 	mov	r5,r23
 40189d4:	1009883a 	mov	r4,r2
 40189d8:	400d2c40 	call	400d2c4 <__mulsi3>
 40189dc:	a82a943a 	slli	r21,r21,16
 40189e0:	a006d43a 	srli	r3,r20,16
 40189e4:	1d46b03a 	or	r3,r3,r21
 40189e8:	1880042e 	bgeu	r3,r2,40189fc <__umoddi3+0x240>
 40189ec:	1cc7883a 	add	r3,r3,r19
 40189f0:	1cc00236 	bltu	r3,r19,40189fc <__umoddi3+0x240>
 40189f4:	1880012e 	bgeu	r3,r2,40189fc <__umoddi3+0x240>
 40189f8:	1cc7883a 	add	r3,r3,r19
 40189fc:	18a1c83a 	sub	r16,r3,r2
 4018a00:	b00b883a 	mov	r5,r22
 4018a04:	8009883a 	mov	r4,r16
 4018a08:	400d26c0 	call	400d26c <__umodsi3>
 4018a0c:	1023883a 	mov	r17,r2
 4018a10:	b00b883a 	mov	r5,r22
 4018a14:	8009883a 	mov	r4,r16
 4018a18:	400d2080 	call	400d208 <__udivsi3>
 4018a1c:	8822943a 	slli	r17,r17,16
 4018a20:	b80b883a 	mov	r5,r23
 4018a24:	1009883a 	mov	r4,r2
 4018a28:	400d2c40 	call	400d2c4 <__mulsi3>
 4018a2c:	a53fffcc 	andi	r20,r20,65535
 4018a30:	a446b03a 	or	r3,r20,r17
 4018a34:	18bfac2e 	bgeu	r3,r2,40188e8 <__alt_mem_onchip_memory2_0+0xfc017668>
 4018a38:	003fa706 	br	40188d8 <__alt_mem_onchip_memory2_0+0xfc017658>
 4018a3c:	2005883a 	mov	r2,r4
 4018a40:	2807883a 	mov	r3,r5
 4018a44:	dfc00c17 	ldw	ra,48(sp)
 4018a48:	df000b17 	ldw	fp,44(sp)
 4018a4c:	ddc00a17 	ldw	r23,40(sp)
 4018a50:	dd800917 	ldw	r22,36(sp)
 4018a54:	dd400817 	ldw	r21,32(sp)
 4018a58:	dd000717 	ldw	r20,28(sp)
 4018a5c:	dcc00617 	ldw	r19,24(sp)
 4018a60:	dc800517 	ldw	r18,20(sp)
 4018a64:	dc400417 	ldw	r17,16(sp)
 4018a68:	dc000317 	ldw	r16,12(sp)
 4018a6c:	dec00d04 	addi	sp,sp,52
 4018a70:	f800283a 	ret
 4018a74:	04c03fc4 	movi	r19,255
 4018a78:	99c9803a 	cmpltu	r4,r19,r7
 4018a7c:	200890fa 	slli	r4,r4,3
 4018a80:	003fa406 	br	4018914 <__alt_mem_onchip_memory2_0+0xfc017694>
 4018a84:	00803fc4 	movi	r2,255
 4018a88:	14c5803a 	cmpltu	r2,r2,r19
 4018a8c:	100490fa 	slli	r2,r2,3
 4018a90:	003fbc06 	br	4018984 <__alt_mem_onchip_memory2_0+0xfc017704>
 4018a94:	00804034 	movhi	r2,256
 4018a98:	10bfffc4 	addi	r2,r2,-1
 4018a9c:	1180a636 	bltu	r2,r6,4018d38 <__umoddi3+0x57c>
 4018aa0:	01000404 	movi	r4,16
 4018aa4:	003f5c06 	br	4018818 <__alt_mem_onchip_memory2_0+0xfc017598>
 4018aa8:	3d0e983a 	sll	r7,r7,r20
 4018aac:	34ead83a 	srl	r21,r6,r19
 4018ab0:	8cc6d83a 	srl	r3,r17,r19
 4018ab4:	8d10983a 	sll	r8,r17,r20
 4018ab8:	3d6ab03a 	or	r21,r7,r21
 4018abc:	a82cd43a 	srli	r22,r21,16
 4018ac0:	84e2d83a 	srl	r17,r16,r19
 4018ac4:	1809883a 	mov	r4,r3
 4018ac8:	b00b883a 	mov	r5,r22
 4018acc:	8a22b03a 	or	r17,r17,r8
 4018ad0:	3524983a 	sll	r18,r6,r20
 4018ad4:	dc400015 	stw	r17,0(sp)
 4018ad8:	d8c00115 	stw	r3,4(sp)
 4018adc:	400d26c0 	call	400d26c <__umodsi3>
 4018ae0:	d8c00117 	ldw	r3,4(sp)
 4018ae4:	b00b883a 	mov	r5,r22
 4018ae8:	1039883a 	mov	fp,r2
 4018aec:	1809883a 	mov	r4,r3
 4018af0:	400d2080 	call	400d208 <__udivsi3>
 4018af4:	adffffcc 	andi	r23,r21,65535
 4018af8:	100b883a 	mov	r5,r2
 4018afc:	b809883a 	mov	r4,r23
 4018b00:	1023883a 	mov	r17,r2
 4018b04:	400d2c40 	call	400d2c4 <__mulsi3>
 4018b08:	d9400017 	ldw	r5,0(sp)
 4018b0c:	e008943a 	slli	r4,fp,16
 4018b10:	8520983a 	sll	r16,r16,r20
 4018b14:	2806d43a 	srli	r3,r5,16
 4018b18:	1906b03a 	or	r3,r3,r4
 4018b1c:	1880042e 	bgeu	r3,r2,4018b30 <__umoddi3+0x374>
 4018b20:	1d47883a 	add	r3,r3,r21
 4018b24:	893fffc4 	addi	r4,r17,-1
 4018b28:	1d40892e 	bgeu	r3,r21,4018d50 <__umoddi3+0x594>
 4018b2c:	2023883a 	mov	r17,r4
 4018b30:	18b9c83a 	sub	fp,r3,r2
 4018b34:	b00b883a 	mov	r5,r22
 4018b38:	e009883a 	mov	r4,fp
 4018b3c:	400d26c0 	call	400d26c <__umodsi3>
 4018b40:	b00b883a 	mov	r5,r22
 4018b44:	e009883a 	mov	r4,fp
 4018b48:	d8800215 	stw	r2,8(sp)
 4018b4c:	400d2080 	call	400d208 <__udivsi3>
 4018b50:	100b883a 	mov	r5,r2
 4018b54:	b809883a 	mov	r4,r23
 4018b58:	102d883a 	mov	r22,r2
 4018b5c:	400d2c40 	call	400d2c4 <__mulsi3>
 4018b60:	d9800217 	ldw	r6,8(sp)
 4018b64:	d8c00017 	ldw	r3,0(sp)
 4018b68:	300c943a 	slli	r6,r6,16
 4018b6c:	1a3fffcc 	andi	r8,r3,65535
 4018b70:	4190b03a 	or	r8,r8,r6
 4018b74:	4080042e 	bgeu	r8,r2,4018b88 <__umoddi3+0x3cc>
 4018b78:	4551883a 	add	r8,r8,r21
 4018b7c:	b0ffffc4 	addi	r3,r22,-1
 4018b80:	45406f2e 	bgeu	r8,r21,4018d40 <__umoddi3+0x584>
 4018b84:	182d883a 	mov	r22,r3
 4018b88:	880e943a 	slli	r7,r17,16
 4018b8c:	9006d43a 	srli	r3,r18,16
 4018b90:	91bfffcc 	andi	r6,r18,65535
 4018b94:	3dacb03a 	or	r22,r7,r22
 4018b98:	b02ed43a 	srli	r23,r22,16
 4018b9c:	b5bfffcc 	andi	r22,r22,65535
 4018ba0:	300b883a 	mov	r5,r6
 4018ba4:	b009883a 	mov	r4,r22
 4018ba8:	40a3c83a 	sub	r17,r8,r2
 4018bac:	d8c00115 	stw	r3,4(sp)
 4018bb0:	d9800215 	stw	r6,8(sp)
 4018bb4:	400d2c40 	call	400d2c4 <__mulsi3>
 4018bb8:	d9800217 	ldw	r6,8(sp)
 4018bbc:	b809883a 	mov	r4,r23
 4018bc0:	1039883a 	mov	fp,r2
 4018bc4:	300b883a 	mov	r5,r6
 4018bc8:	400d2c40 	call	400d2c4 <__mulsi3>
 4018bcc:	d8c00117 	ldw	r3,4(sp)
 4018bd0:	b809883a 	mov	r4,r23
 4018bd4:	d8800215 	stw	r2,8(sp)
 4018bd8:	180b883a 	mov	r5,r3
 4018bdc:	400d2c40 	call	400d2c4 <__mulsi3>
 4018be0:	d8c00117 	ldw	r3,4(sp)
 4018be4:	b009883a 	mov	r4,r22
 4018be8:	102f883a 	mov	r23,r2
 4018bec:	180b883a 	mov	r5,r3
 4018bf0:	400d2c40 	call	400d2c4 <__mulsi3>
 4018bf4:	d9800217 	ldw	r6,8(sp)
 4018bf8:	e006d43a 	srli	r3,fp,16
 4018bfc:	1185883a 	add	r2,r2,r6
 4018c00:	1885883a 	add	r2,r3,r2
 4018c04:	1180022e 	bgeu	r2,r6,4018c10 <__umoddi3+0x454>
 4018c08:	00c00074 	movhi	r3,1
 4018c0c:	b8ef883a 	add	r23,r23,r3
 4018c10:	1006d43a 	srli	r3,r2,16
 4018c14:	1004943a 	slli	r2,r2,16
 4018c18:	e73fffcc 	andi	fp,fp,65535
 4018c1c:	1dc7883a 	add	r3,r3,r23
 4018c20:	1739883a 	add	fp,r2,fp
 4018c24:	88c03a36 	bltu	r17,r3,4018d10 <__umoddi3+0x554>
 4018c28:	88c05126 	beq	r17,r3,4018d70 <__umoddi3+0x5b4>
 4018c2c:	88c9c83a 	sub	r4,r17,r3
 4018c30:	e00f883a 	mov	r7,fp
 4018c34:	81cfc83a 	sub	r7,r16,r7
 4018c38:	81c7803a 	cmpltu	r3,r16,r7
 4018c3c:	20c7c83a 	sub	r3,r4,r3
 4018c40:	1cc4983a 	sll	r2,r3,r19
 4018c44:	3d0ed83a 	srl	r7,r7,r20
 4018c48:	1d06d83a 	srl	r3,r3,r20
 4018c4c:	11c4b03a 	or	r2,r2,r7
 4018c50:	003f7c06 	br	4018a44 <__alt_mem_onchip_memory2_0+0xfc0177c4>
 4018c54:	9ca6983a 	sll	r19,r19,r18
 4018c58:	88f8d83a 	srl	fp,r17,r3
 4018c5c:	80c4d83a 	srl	r2,r16,r3
 4018c60:	982cd43a 	srli	r22,r19,16
 4018c64:	8ca2983a 	sll	r17,r17,r18
 4018c68:	e009883a 	mov	r4,fp
 4018c6c:	b00b883a 	mov	r5,r22
 4018c70:	146ab03a 	or	r21,r2,r17
 4018c74:	400d26c0 	call	400d26c <__umodsi3>
 4018c78:	b00b883a 	mov	r5,r22
 4018c7c:	e009883a 	mov	r4,fp
 4018c80:	1029883a 	mov	r20,r2
 4018c84:	9dffffcc 	andi	r23,r19,65535
 4018c88:	400d2080 	call	400d208 <__udivsi3>
 4018c8c:	b809883a 	mov	r4,r23
 4018c90:	100b883a 	mov	r5,r2
 4018c94:	400d2c40 	call	400d2c4 <__mulsi3>
 4018c98:	a008943a 	slli	r4,r20,16
 4018c9c:	a806d43a 	srli	r3,r21,16
 4018ca0:	84a8983a 	sll	r20,r16,r18
 4018ca4:	1906b03a 	or	r3,r3,r4
 4018ca8:	1880042e 	bgeu	r3,r2,4018cbc <__umoddi3+0x500>
 4018cac:	1cc7883a 	add	r3,r3,r19
 4018cb0:	1cc00236 	bltu	r3,r19,4018cbc <__umoddi3+0x500>
 4018cb4:	1880012e 	bgeu	r3,r2,4018cbc <__umoddi3+0x500>
 4018cb8:	1cc7883a 	add	r3,r3,r19
 4018cbc:	18a3c83a 	sub	r17,r3,r2
 4018cc0:	b00b883a 	mov	r5,r22
 4018cc4:	8809883a 	mov	r4,r17
 4018cc8:	400d26c0 	call	400d26c <__umodsi3>
 4018ccc:	b00b883a 	mov	r5,r22
 4018cd0:	8809883a 	mov	r4,r17
 4018cd4:	1021883a 	mov	r16,r2
 4018cd8:	400d2080 	call	400d208 <__udivsi3>
 4018cdc:	100b883a 	mov	r5,r2
 4018ce0:	b809883a 	mov	r4,r23
 4018ce4:	8020943a 	slli	r16,r16,16
 4018ce8:	400d2c40 	call	400d2c4 <__mulsi3>
 4018cec:	a8ffffcc 	andi	r3,r21,65535
 4018cf0:	1c06b03a 	or	r3,r3,r16
 4018cf4:	1880042e 	bgeu	r3,r2,4018d08 <__umoddi3+0x54c>
 4018cf8:	1cc7883a 	add	r3,r3,r19
 4018cfc:	1cc00236 	bltu	r3,r19,4018d08 <__umoddi3+0x54c>
 4018d00:	1880012e 	bgeu	r3,r2,4018d08 <__umoddi3+0x54c>
 4018d04:	1cc7883a 	add	r3,r3,r19
 4018d08:	18a3c83a 	sub	r17,r3,r2
 4018d0c:	003f2906 	br	40189b4 <__alt_mem_onchip_memory2_0+0xfc017734>
 4018d10:	e48fc83a 	sub	r7,fp,r18
 4018d14:	1d49c83a 	sub	r4,r3,r21
 4018d18:	e1f9803a 	cmpltu	fp,fp,r7
 4018d1c:	2739c83a 	sub	fp,r4,fp
 4018d20:	8f09c83a 	sub	r4,r17,fp
 4018d24:	003fc306 	br	4018c34 <__alt_mem_onchip_memory2_0+0xfc0179b4>
 4018d28:	01000604 	movi	r4,24
 4018d2c:	003ef906 	br	4018914 <__alt_mem_onchip_memory2_0+0xfc017694>
 4018d30:	00800604 	movi	r2,24
 4018d34:	003f1306 	br	4018984 <__alt_mem_onchip_memory2_0+0xfc017704>
 4018d38:	01000604 	movi	r4,24
 4018d3c:	003eb606 	br	4018818 <__alt_mem_onchip_memory2_0+0xfc017598>
 4018d40:	40bf902e 	bgeu	r8,r2,4018b84 <__alt_mem_onchip_memory2_0+0xfc017904>
 4018d44:	b5bfff84 	addi	r22,r22,-2
 4018d48:	4551883a 	add	r8,r8,r21
 4018d4c:	003f8e06 	br	4018b88 <__alt_mem_onchip_memory2_0+0xfc017908>
 4018d50:	18bf762e 	bgeu	r3,r2,4018b2c <__alt_mem_onchip_memory2_0+0xfc0178ac>
 4018d54:	8c7fff84 	addi	r17,r17,-2
 4018d58:	1d47883a 	add	r3,r3,r21
 4018d5c:	003f7406 	br	4018b30 <__alt_mem_onchip_memory2_0+0xfc0178b0>
 4018d60:	1cc7883a 	add	r3,r3,r19
 4018d64:	003ecd06 	br	401889c <__alt_mem_onchip_memory2_0+0xfc01761c>
 4018d68:	8005883a 	mov	r2,r16
 4018d6c:	003ef806 	br	4018950 <__alt_mem_onchip_memory2_0+0xfc0176d0>
 4018d70:	873fe736 	bltu	r16,fp,4018d10 <__alt_mem_onchip_memory2_0+0xfc017a90>
 4018d74:	e00f883a 	mov	r7,fp
 4018d78:	0009883a 	mov	r4,zero
 4018d7c:	003fad06 	br	4018c34 <__alt_mem_onchip_memory2_0+0xfc0179b4>

04018d80 <__adddf3>:
 4018d80:	02c00434 	movhi	r11,16
 4018d84:	5affffc4 	addi	r11,r11,-1
 4018d88:	2806d7fa 	srli	r3,r5,31
 4018d8c:	2ad4703a 	and	r10,r5,r11
 4018d90:	3ad2703a 	and	r9,r7,r11
 4018d94:	3804d53a 	srli	r2,r7,20
 4018d98:	3018d77a 	srli	r12,r6,29
 4018d9c:	280ad53a 	srli	r5,r5,20
 4018da0:	501490fa 	slli	r10,r10,3
 4018da4:	2010d77a 	srli	r8,r4,29
 4018da8:	481290fa 	slli	r9,r9,3
 4018dac:	380ed7fa 	srli	r7,r7,31
 4018db0:	defffb04 	addi	sp,sp,-20
 4018db4:	dc800215 	stw	r18,8(sp)
 4018db8:	dc400115 	stw	r17,4(sp)
 4018dbc:	dc000015 	stw	r16,0(sp)
 4018dc0:	dfc00415 	stw	ra,16(sp)
 4018dc4:	dcc00315 	stw	r19,12(sp)
 4018dc8:	1c803fcc 	andi	r18,r3,255
 4018dcc:	2c01ffcc 	andi	r16,r5,2047
 4018dd0:	5210b03a 	or	r8,r10,r8
 4018dd4:	202290fa 	slli	r17,r4,3
 4018dd8:	1081ffcc 	andi	r2,r2,2047
 4018ddc:	4b12b03a 	or	r9,r9,r12
 4018de0:	300c90fa 	slli	r6,r6,3
 4018de4:	91c07526 	beq	r18,r7,4018fbc <__adddf3+0x23c>
 4018de8:	8087c83a 	sub	r3,r16,r2
 4018dec:	00c0ab0e 	bge	zero,r3,401909c <__adddf3+0x31c>
 4018df0:	10002a1e 	bne	r2,zero,4018e9c <__adddf3+0x11c>
 4018df4:	4984b03a 	or	r2,r9,r6
 4018df8:	1000961e 	bne	r2,zero,4019054 <__adddf3+0x2d4>
 4018dfc:	888001cc 	andi	r2,r17,7
 4018e00:	10000726 	beq	r2,zero,4018e20 <__adddf3+0xa0>
 4018e04:	888003cc 	andi	r2,r17,15
 4018e08:	00c00104 	movi	r3,4
 4018e0c:	10c00426 	beq	r2,r3,4018e20 <__adddf3+0xa0>
 4018e10:	88c7883a 	add	r3,r17,r3
 4018e14:	1c63803a 	cmpltu	r17,r3,r17
 4018e18:	4451883a 	add	r8,r8,r17
 4018e1c:	1823883a 	mov	r17,r3
 4018e20:	4080202c 	andhi	r2,r8,128
 4018e24:	10005926 	beq	r2,zero,4018f8c <__adddf3+0x20c>
 4018e28:	84000044 	addi	r16,r16,1
 4018e2c:	0081ffc4 	movi	r2,2047
 4018e30:	8080ba26 	beq	r16,r2,401911c <__adddf3+0x39c>
 4018e34:	00bfe034 	movhi	r2,65408
 4018e38:	10bfffc4 	addi	r2,r2,-1
 4018e3c:	4090703a 	and	r8,r8,r2
 4018e40:	4004977a 	slli	r2,r8,29
 4018e44:	4010927a 	slli	r8,r8,9
 4018e48:	8822d0fa 	srli	r17,r17,3
 4018e4c:	8401ffcc 	andi	r16,r16,2047
 4018e50:	4010d33a 	srli	r8,r8,12
 4018e54:	9007883a 	mov	r3,r18
 4018e58:	1444b03a 	or	r2,r2,r17
 4018e5c:	8401ffcc 	andi	r16,r16,2047
 4018e60:	8020953a 	slli	r16,r16,20
 4018e64:	18c03fcc 	andi	r3,r3,255
 4018e68:	01000434 	movhi	r4,16
 4018e6c:	213fffc4 	addi	r4,r4,-1
 4018e70:	180697fa 	slli	r3,r3,31
 4018e74:	4110703a 	and	r8,r8,r4
 4018e78:	4410b03a 	or	r8,r8,r16
 4018e7c:	40c6b03a 	or	r3,r8,r3
 4018e80:	dfc00417 	ldw	ra,16(sp)
 4018e84:	dcc00317 	ldw	r19,12(sp)
 4018e88:	dc800217 	ldw	r18,8(sp)
 4018e8c:	dc400117 	ldw	r17,4(sp)
 4018e90:	dc000017 	ldw	r16,0(sp)
 4018e94:	dec00504 	addi	sp,sp,20
 4018e98:	f800283a 	ret
 4018e9c:	0081ffc4 	movi	r2,2047
 4018ea0:	80bfd626 	beq	r16,r2,4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 4018ea4:	4a402034 	orhi	r9,r9,128
 4018ea8:	00800e04 	movi	r2,56
 4018eac:	10c09f16 	blt	r2,r3,401912c <__adddf3+0x3ac>
 4018eb0:	008007c4 	movi	r2,31
 4018eb4:	10c0c216 	blt	r2,r3,40191c0 <__adddf3+0x440>
 4018eb8:	00800804 	movi	r2,32
 4018ebc:	10c5c83a 	sub	r2,r2,r3
 4018ec0:	488a983a 	sll	r5,r9,r2
 4018ec4:	30c8d83a 	srl	r4,r6,r3
 4018ec8:	3084983a 	sll	r2,r6,r2
 4018ecc:	48c6d83a 	srl	r3,r9,r3
 4018ed0:	290cb03a 	or	r6,r5,r4
 4018ed4:	1004c03a 	cmpne	r2,r2,zero
 4018ed8:	308cb03a 	or	r6,r6,r2
 4018edc:	898dc83a 	sub	r6,r17,r6
 4018ee0:	89a3803a 	cmpltu	r17,r17,r6
 4018ee4:	40d1c83a 	sub	r8,r8,r3
 4018ee8:	4451c83a 	sub	r8,r8,r17
 4018eec:	3023883a 	mov	r17,r6
 4018ef0:	4080202c 	andhi	r2,r8,128
 4018ef4:	10002326 	beq	r2,zero,4018f84 <__adddf3+0x204>
 4018ef8:	04c02034 	movhi	r19,128
 4018efc:	9cffffc4 	addi	r19,r19,-1
 4018f00:	44e6703a 	and	r19,r8,r19
 4018f04:	98007626 	beq	r19,zero,40190e0 <__adddf3+0x360>
 4018f08:	9809883a 	mov	r4,r19
 4018f0c:	400e33c0 	call	400e33c <__clzsi2>
 4018f10:	10fffe04 	addi	r3,r2,-8
 4018f14:	010007c4 	movi	r4,31
 4018f18:	20c07716 	blt	r4,r3,40190f8 <__adddf3+0x378>
 4018f1c:	00800804 	movi	r2,32
 4018f20:	10c5c83a 	sub	r2,r2,r3
 4018f24:	8884d83a 	srl	r2,r17,r2
 4018f28:	98d0983a 	sll	r8,r19,r3
 4018f2c:	88e2983a 	sll	r17,r17,r3
 4018f30:	1204b03a 	or	r2,r2,r8
 4018f34:	1c007416 	blt	r3,r16,4019108 <__adddf3+0x388>
 4018f38:	1c21c83a 	sub	r16,r3,r16
 4018f3c:	82000044 	addi	r8,r16,1
 4018f40:	00c007c4 	movi	r3,31
 4018f44:	1a009116 	blt	r3,r8,401918c <__adddf3+0x40c>
 4018f48:	00c00804 	movi	r3,32
 4018f4c:	1a07c83a 	sub	r3,r3,r8
 4018f50:	8a08d83a 	srl	r4,r17,r8
 4018f54:	88e2983a 	sll	r17,r17,r3
 4018f58:	10c6983a 	sll	r3,r2,r3
 4018f5c:	1210d83a 	srl	r8,r2,r8
 4018f60:	8804c03a 	cmpne	r2,r17,zero
 4018f64:	1906b03a 	or	r3,r3,r4
 4018f68:	18a2b03a 	or	r17,r3,r2
 4018f6c:	0021883a 	mov	r16,zero
 4018f70:	003fa206 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 4018f74:	1890b03a 	or	r8,r3,r2
 4018f78:	40017d26 	beq	r8,zero,4019570 <__adddf3+0x7f0>
 4018f7c:	1011883a 	mov	r8,r2
 4018f80:	1823883a 	mov	r17,r3
 4018f84:	888001cc 	andi	r2,r17,7
 4018f88:	103f9e1e 	bne	r2,zero,4018e04 <__alt_mem_onchip_memory2_0+0xfc017b84>
 4018f8c:	4004977a 	slli	r2,r8,29
 4018f90:	8822d0fa 	srli	r17,r17,3
 4018f94:	4010d0fa 	srli	r8,r8,3
 4018f98:	9007883a 	mov	r3,r18
 4018f9c:	1444b03a 	or	r2,r2,r17
 4018fa0:	0101ffc4 	movi	r4,2047
 4018fa4:	81002426 	beq	r16,r4,4019038 <__adddf3+0x2b8>
 4018fa8:	8120703a 	and	r16,r16,r4
 4018fac:	01000434 	movhi	r4,16
 4018fb0:	213fffc4 	addi	r4,r4,-1
 4018fb4:	4110703a 	and	r8,r8,r4
 4018fb8:	003fa806 	br	4018e5c <__alt_mem_onchip_memory2_0+0xfc017bdc>
 4018fbc:	8089c83a 	sub	r4,r16,r2
 4018fc0:	01005e0e 	bge	zero,r4,401913c <__adddf3+0x3bc>
 4018fc4:	10002b26 	beq	r2,zero,4019074 <__adddf3+0x2f4>
 4018fc8:	0081ffc4 	movi	r2,2047
 4018fcc:	80bf8b26 	beq	r16,r2,4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 4018fd0:	4a402034 	orhi	r9,r9,128
 4018fd4:	00800e04 	movi	r2,56
 4018fd8:	1100a40e 	bge	r2,r4,401926c <__adddf3+0x4ec>
 4018fdc:	498cb03a 	or	r6,r9,r6
 4018fe0:	300ac03a 	cmpne	r5,r6,zero
 4018fe4:	0013883a 	mov	r9,zero
 4018fe8:	2c4b883a 	add	r5,r5,r17
 4018fec:	2c63803a 	cmpltu	r17,r5,r17
 4018ff0:	4a11883a 	add	r8,r9,r8
 4018ff4:	8a11883a 	add	r8,r17,r8
 4018ff8:	2823883a 	mov	r17,r5
 4018ffc:	4080202c 	andhi	r2,r8,128
 4019000:	103fe026 	beq	r2,zero,4018f84 <__alt_mem_onchip_memory2_0+0xfc017d04>
 4019004:	84000044 	addi	r16,r16,1
 4019008:	0081ffc4 	movi	r2,2047
 401900c:	8080d226 	beq	r16,r2,4019358 <__adddf3+0x5d8>
 4019010:	00bfe034 	movhi	r2,65408
 4019014:	10bfffc4 	addi	r2,r2,-1
 4019018:	4090703a 	and	r8,r8,r2
 401901c:	880ad07a 	srli	r5,r17,1
 4019020:	400897fa 	slli	r4,r8,31
 4019024:	88c0004c 	andi	r3,r17,1
 4019028:	28e2b03a 	or	r17,r5,r3
 401902c:	4010d07a 	srli	r8,r8,1
 4019030:	2462b03a 	or	r17,r4,r17
 4019034:	003f7106 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 4019038:	4088b03a 	or	r4,r8,r2
 401903c:	20014526 	beq	r4,zero,4019554 <__adddf3+0x7d4>
 4019040:	01000434 	movhi	r4,16
 4019044:	42000234 	orhi	r8,r8,8
 4019048:	213fffc4 	addi	r4,r4,-1
 401904c:	4110703a 	and	r8,r8,r4
 4019050:	003f8206 	br	4018e5c <__alt_mem_onchip_memory2_0+0xfc017bdc>
 4019054:	18ffffc4 	addi	r3,r3,-1
 4019058:	1800491e 	bne	r3,zero,4019180 <__adddf3+0x400>
 401905c:	898bc83a 	sub	r5,r17,r6
 4019060:	8963803a 	cmpltu	r17,r17,r5
 4019064:	4251c83a 	sub	r8,r8,r9
 4019068:	4451c83a 	sub	r8,r8,r17
 401906c:	2823883a 	mov	r17,r5
 4019070:	003f9f06 	br	4018ef0 <__alt_mem_onchip_memory2_0+0xfc017c70>
 4019074:	4984b03a 	or	r2,r9,r6
 4019078:	103f6026 	beq	r2,zero,4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 401907c:	213fffc4 	addi	r4,r4,-1
 4019080:	2000931e 	bne	r4,zero,40192d0 <__adddf3+0x550>
 4019084:	898d883a 	add	r6,r17,r6
 4019088:	3463803a 	cmpltu	r17,r6,r17
 401908c:	4251883a 	add	r8,r8,r9
 4019090:	8a11883a 	add	r8,r17,r8
 4019094:	3023883a 	mov	r17,r6
 4019098:	003fd806 	br	4018ffc <__alt_mem_onchip_memory2_0+0xfc017d7c>
 401909c:	1800541e 	bne	r3,zero,40191f0 <__adddf3+0x470>
 40190a0:	80800044 	addi	r2,r16,1
 40190a4:	1081ffcc 	andi	r2,r2,2047
 40190a8:	00c00044 	movi	r3,1
 40190ac:	1880a00e 	bge	r3,r2,4019330 <__adddf3+0x5b0>
 40190b0:	8989c83a 	sub	r4,r17,r6
 40190b4:	8905803a 	cmpltu	r2,r17,r4
 40190b8:	4267c83a 	sub	r19,r8,r9
 40190bc:	98a7c83a 	sub	r19,r19,r2
 40190c0:	9880202c 	andhi	r2,r19,128
 40190c4:	10006326 	beq	r2,zero,4019254 <__adddf3+0x4d4>
 40190c8:	3463c83a 	sub	r17,r6,r17
 40190cc:	4a07c83a 	sub	r3,r9,r8
 40190d0:	344d803a 	cmpltu	r6,r6,r17
 40190d4:	19a7c83a 	sub	r19,r3,r6
 40190d8:	3825883a 	mov	r18,r7
 40190dc:	983f8a1e 	bne	r19,zero,4018f08 <__alt_mem_onchip_memory2_0+0xfc017c88>
 40190e0:	8809883a 	mov	r4,r17
 40190e4:	400e33c0 	call	400e33c <__clzsi2>
 40190e8:	10800804 	addi	r2,r2,32
 40190ec:	10fffe04 	addi	r3,r2,-8
 40190f0:	010007c4 	movi	r4,31
 40190f4:	20ff890e 	bge	r4,r3,4018f1c <__alt_mem_onchip_memory2_0+0xfc017c9c>
 40190f8:	10bff604 	addi	r2,r2,-40
 40190fc:	8884983a 	sll	r2,r17,r2
 4019100:	0023883a 	mov	r17,zero
 4019104:	1c3f8c0e 	bge	r3,r16,4018f38 <__alt_mem_onchip_memory2_0+0xfc017cb8>
 4019108:	023fe034 	movhi	r8,65408
 401910c:	423fffc4 	addi	r8,r8,-1
 4019110:	80e1c83a 	sub	r16,r16,r3
 4019114:	1210703a 	and	r8,r2,r8
 4019118:	003f3806 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 401911c:	9007883a 	mov	r3,r18
 4019120:	0011883a 	mov	r8,zero
 4019124:	0005883a 	mov	r2,zero
 4019128:	003f4c06 	br	4018e5c <__alt_mem_onchip_memory2_0+0xfc017bdc>
 401912c:	498cb03a 	or	r6,r9,r6
 4019130:	300cc03a 	cmpne	r6,r6,zero
 4019134:	0007883a 	mov	r3,zero
 4019138:	003f6806 	br	4018edc <__alt_mem_onchip_memory2_0+0xfc017c5c>
 401913c:	20009c1e 	bne	r4,zero,40193b0 <__adddf3+0x630>
 4019140:	80800044 	addi	r2,r16,1
 4019144:	1141ffcc 	andi	r5,r2,2047
 4019148:	01000044 	movi	r4,1
 401914c:	2140670e 	bge	r4,r5,40192ec <__adddf3+0x56c>
 4019150:	0101ffc4 	movi	r4,2047
 4019154:	11007f26 	beq	r2,r4,4019354 <__adddf3+0x5d4>
 4019158:	898d883a 	add	r6,r17,r6
 401915c:	4247883a 	add	r3,r8,r9
 4019160:	3451803a 	cmpltu	r8,r6,r17
 4019164:	40d1883a 	add	r8,r8,r3
 4019168:	402297fa 	slli	r17,r8,31
 401916c:	300cd07a 	srli	r6,r6,1
 4019170:	4010d07a 	srli	r8,r8,1
 4019174:	1021883a 	mov	r16,r2
 4019178:	89a2b03a 	or	r17,r17,r6
 401917c:	003f1f06 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 4019180:	0081ffc4 	movi	r2,2047
 4019184:	80bf481e 	bne	r16,r2,4018ea8 <__alt_mem_onchip_memory2_0+0xfc017c28>
 4019188:	003f1c06 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 401918c:	843ff844 	addi	r16,r16,-31
 4019190:	01000804 	movi	r4,32
 4019194:	1406d83a 	srl	r3,r2,r16
 4019198:	41005026 	beq	r8,r4,40192dc <__adddf3+0x55c>
 401919c:	01001004 	movi	r4,64
 40191a0:	2211c83a 	sub	r8,r4,r8
 40191a4:	1204983a 	sll	r2,r2,r8
 40191a8:	88a2b03a 	or	r17,r17,r2
 40191ac:	8822c03a 	cmpne	r17,r17,zero
 40191b0:	1c62b03a 	or	r17,r3,r17
 40191b4:	0011883a 	mov	r8,zero
 40191b8:	0021883a 	mov	r16,zero
 40191bc:	003f7106 	br	4018f84 <__alt_mem_onchip_memory2_0+0xfc017d04>
 40191c0:	193ff804 	addi	r4,r3,-32
 40191c4:	00800804 	movi	r2,32
 40191c8:	4908d83a 	srl	r4,r9,r4
 40191cc:	18804526 	beq	r3,r2,40192e4 <__adddf3+0x564>
 40191d0:	00801004 	movi	r2,64
 40191d4:	10c5c83a 	sub	r2,r2,r3
 40191d8:	4886983a 	sll	r3,r9,r2
 40191dc:	198cb03a 	or	r6,r3,r6
 40191e0:	300cc03a 	cmpne	r6,r6,zero
 40191e4:	218cb03a 	or	r6,r4,r6
 40191e8:	0007883a 	mov	r3,zero
 40191ec:	003f3b06 	br	4018edc <__alt_mem_onchip_memory2_0+0xfc017c5c>
 40191f0:	80002a26 	beq	r16,zero,401929c <__adddf3+0x51c>
 40191f4:	0101ffc4 	movi	r4,2047
 40191f8:	11006826 	beq	r2,r4,401939c <__adddf3+0x61c>
 40191fc:	00c7c83a 	sub	r3,zero,r3
 4019200:	42002034 	orhi	r8,r8,128
 4019204:	01000e04 	movi	r4,56
 4019208:	20c07c16 	blt	r4,r3,40193fc <__adddf3+0x67c>
 401920c:	010007c4 	movi	r4,31
 4019210:	20c0da16 	blt	r4,r3,401957c <__adddf3+0x7fc>
 4019214:	01000804 	movi	r4,32
 4019218:	20c9c83a 	sub	r4,r4,r3
 401921c:	4114983a 	sll	r10,r8,r4
 4019220:	88cad83a 	srl	r5,r17,r3
 4019224:	8908983a 	sll	r4,r17,r4
 4019228:	40c6d83a 	srl	r3,r8,r3
 401922c:	5162b03a 	or	r17,r10,r5
 4019230:	2008c03a 	cmpne	r4,r4,zero
 4019234:	8922b03a 	or	r17,r17,r4
 4019238:	3463c83a 	sub	r17,r6,r17
 401923c:	48c7c83a 	sub	r3,r9,r3
 4019240:	344d803a 	cmpltu	r6,r6,r17
 4019244:	1991c83a 	sub	r8,r3,r6
 4019248:	1021883a 	mov	r16,r2
 401924c:	3825883a 	mov	r18,r7
 4019250:	003f2706 	br	4018ef0 <__alt_mem_onchip_memory2_0+0xfc017c70>
 4019254:	24d0b03a 	or	r8,r4,r19
 4019258:	40001b1e 	bne	r8,zero,40192c8 <__adddf3+0x548>
 401925c:	0005883a 	mov	r2,zero
 4019260:	0007883a 	mov	r3,zero
 4019264:	0021883a 	mov	r16,zero
 4019268:	003f4d06 	br	4018fa0 <__alt_mem_onchip_memory2_0+0xfc017d20>
 401926c:	008007c4 	movi	r2,31
 4019270:	11003c16 	blt	r2,r4,4019364 <__adddf3+0x5e4>
 4019274:	00800804 	movi	r2,32
 4019278:	1105c83a 	sub	r2,r2,r4
 401927c:	488e983a 	sll	r7,r9,r2
 4019280:	310ad83a 	srl	r5,r6,r4
 4019284:	3084983a 	sll	r2,r6,r2
 4019288:	4912d83a 	srl	r9,r9,r4
 401928c:	394ab03a 	or	r5,r7,r5
 4019290:	1004c03a 	cmpne	r2,r2,zero
 4019294:	288ab03a 	or	r5,r5,r2
 4019298:	003f5306 	br	4018fe8 <__alt_mem_onchip_memory2_0+0xfc017d68>
 401929c:	4448b03a 	or	r4,r8,r17
 40192a0:	20003e26 	beq	r4,zero,401939c <__adddf3+0x61c>
 40192a4:	00c6303a 	nor	r3,zero,r3
 40192a8:	18003a1e 	bne	r3,zero,4019394 <__adddf3+0x614>
 40192ac:	3463c83a 	sub	r17,r6,r17
 40192b0:	4a07c83a 	sub	r3,r9,r8
 40192b4:	344d803a 	cmpltu	r6,r6,r17
 40192b8:	1991c83a 	sub	r8,r3,r6
 40192bc:	1021883a 	mov	r16,r2
 40192c0:	3825883a 	mov	r18,r7
 40192c4:	003f0a06 	br	4018ef0 <__alt_mem_onchip_memory2_0+0xfc017c70>
 40192c8:	2023883a 	mov	r17,r4
 40192cc:	003f0d06 	br	4018f04 <__alt_mem_onchip_memory2_0+0xfc017c84>
 40192d0:	0081ffc4 	movi	r2,2047
 40192d4:	80bf3f1e 	bne	r16,r2,4018fd4 <__alt_mem_onchip_memory2_0+0xfc017d54>
 40192d8:	003ec806 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 40192dc:	0005883a 	mov	r2,zero
 40192e0:	003fb106 	br	40191a8 <__alt_mem_onchip_memory2_0+0xfc017f28>
 40192e4:	0007883a 	mov	r3,zero
 40192e8:	003fbc06 	br	40191dc <__alt_mem_onchip_memory2_0+0xfc017f5c>
 40192ec:	4444b03a 	or	r2,r8,r17
 40192f0:	8000871e 	bne	r16,zero,4019510 <__adddf3+0x790>
 40192f4:	1000ba26 	beq	r2,zero,40195e0 <__adddf3+0x860>
 40192f8:	4984b03a 	or	r2,r9,r6
 40192fc:	103ebf26 	beq	r2,zero,4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 4019300:	8985883a 	add	r2,r17,r6
 4019304:	4247883a 	add	r3,r8,r9
 4019308:	1451803a 	cmpltu	r8,r2,r17
 401930c:	40d1883a 	add	r8,r8,r3
 4019310:	40c0202c 	andhi	r3,r8,128
 4019314:	1023883a 	mov	r17,r2
 4019318:	183f1a26 	beq	r3,zero,4018f84 <__alt_mem_onchip_memory2_0+0xfc017d04>
 401931c:	00bfe034 	movhi	r2,65408
 4019320:	10bfffc4 	addi	r2,r2,-1
 4019324:	2021883a 	mov	r16,r4
 4019328:	4090703a 	and	r8,r8,r2
 401932c:	003eb306 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 4019330:	4444b03a 	or	r2,r8,r17
 4019334:	8000291e 	bne	r16,zero,40193dc <__adddf3+0x65c>
 4019338:	10004b1e 	bne	r2,zero,4019468 <__adddf3+0x6e8>
 401933c:	4990b03a 	or	r8,r9,r6
 4019340:	40008b26 	beq	r8,zero,4019570 <__adddf3+0x7f0>
 4019344:	4811883a 	mov	r8,r9
 4019348:	3023883a 	mov	r17,r6
 401934c:	3825883a 	mov	r18,r7
 4019350:	003eaa06 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 4019354:	1021883a 	mov	r16,r2
 4019358:	0011883a 	mov	r8,zero
 401935c:	0005883a 	mov	r2,zero
 4019360:	003f0f06 	br	4018fa0 <__alt_mem_onchip_memory2_0+0xfc017d20>
 4019364:	217ff804 	addi	r5,r4,-32
 4019368:	00800804 	movi	r2,32
 401936c:	494ad83a 	srl	r5,r9,r5
 4019370:	20807d26 	beq	r4,r2,4019568 <__adddf3+0x7e8>
 4019374:	00801004 	movi	r2,64
 4019378:	1109c83a 	sub	r4,r2,r4
 401937c:	4912983a 	sll	r9,r9,r4
 4019380:	498cb03a 	or	r6,r9,r6
 4019384:	300cc03a 	cmpne	r6,r6,zero
 4019388:	298ab03a 	or	r5,r5,r6
 401938c:	0013883a 	mov	r9,zero
 4019390:	003f1506 	br	4018fe8 <__alt_mem_onchip_memory2_0+0xfc017d68>
 4019394:	0101ffc4 	movi	r4,2047
 4019398:	113f9a1e 	bne	r2,r4,4019204 <__alt_mem_onchip_memory2_0+0xfc017f84>
 401939c:	4811883a 	mov	r8,r9
 40193a0:	3023883a 	mov	r17,r6
 40193a4:	1021883a 	mov	r16,r2
 40193a8:	3825883a 	mov	r18,r7
 40193ac:	003e9306 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 40193b0:	8000161e 	bne	r16,zero,401940c <__adddf3+0x68c>
 40193b4:	444ab03a 	or	r5,r8,r17
 40193b8:	28005126 	beq	r5,zero,4019500 <__adddf3+0x780>
 40193bc:	0108303a 	nor	r4,zero,r4
 40193c0:	20004d1e 	bne	r4,zero,40194f8 <__adddf3+0x778>
 40193c4:	89a3883a 	add	r17,r17,r6
 40193c8:	4253883a 	add	r9,r8,r9
 40193cc:	898d803a 	cmpltu	r6,r17,r6
 40193d0:	3251883a 	add	r8,r6,r9
 40193d4:	1021883a 	mov	r16,r2
 40193d8:	003f0806 	br	4018ffc <__alt_mem_onchip_memory2_0+0xfc017d7c>
 40193dc:	1000301e 	bne	r2,zero,40194a0 <__adddf3+0x720>
 40193e0:	4984b03a 	or	r2,r9,r6
 40193e4:	10007126 	beq	r2,zero,40195ac <__adddf3+0x82c>
 40193e8:	4811883a 	mov	r8,r9
 40193ec:	3023883a 	mov	r17,r6
 40193f0:	3825883a 	mov	r18,r7
 40193f4:	0401ffc4 	movi	r16,2047
 40193f8:	003e8006 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 40193fc:	4462b03a 	or	r17,r8,r17
 4019400:	8822c03a 	cmpne	r17,r17,zero
 4019404:	0007883a 	mov	r3,zero
 4019408:	003f8b06 	br	4019238 <__alt_mem_onchip_memory2_0+0xfc017fb8>
 401940c:	0141ffc4 	movi	r5,2047
 4019410:	11403b26 	beq	r2,r5,4019500 <__adddf3+0x780>
 4019414:	0109c83a 	sub	r4,zero,r4
 4019418:	42002034 	orhi	r8,r8,128
 401941c:	01400e04 	movi	r5,56
 4019420:	29006716 	blt	r5,r4,40195c0 <__adddf3+0x840>
 4019424:	014007c4 	movi	r5,31
 4019428:	29007016 	blt	r5,r4,40195ec <__adddf3+0x86c>
 401942c:	01400804 	movi	r5,32
 4019430:	290bc83a 	sub	r5,r5,r4
 4019434:	4154983a 	sll	r10,r8,r5
 4019438:	890ed83a 	srl	r7,r17,r4
 401943c:	894a983a 	sll	r5,r17,r5
 4019440:	4108d83a 	srl	r4,r8,r4
 4019444:	51e2b03a 	or	r17,r10,r7
 4019448:	280ac03a 	cmpne	r5,r5,zero
 401944c:	8962b03a 	or	r17,r17,r5
 4019450:	89a3883a 	add	r17,r17,r6
 4019454:	2253883a 	add	r9,r4,r9
 4019458:	898d803a 	cmpltu	r6,r17,r6
 401945c:	3251883a 	add	r8,r6,r9
 4019460:	1021883a 	mov	r16,r2
 4019464:	003ee506 	br	4018ffc <__alt_mem_onchip_memory2_0+0xfc017d7c>
 4019468:	4984b03a 	or	r2,r9,r6
 401946c:	103e6326 	beq	r2,zero,4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 4019470:	8987c83a 	sub	r3,r17,r6
 4019474:	88c9803a 	cmpltu	r4,r17,r3
 4019478:	4245c83a 	sub	r2,r8,r9
 401947c:	1105c83a 	sub	r2,r2,r4
 4019480:	1100202c 	andhi	r4,r2,128
 4019484:	203ebb26 	beq	r4,zero,4018f74 <__alt_mem_onchip_memory2_0+0xfc017cf4>
 4019488:	3463c83a 	sub	r17,r6,r17
 401948c:	4a07c83a 	sub	r3,r9,r8
 4019490:	344d803a 	cmpltu	r6,r6,r17
 4019494:	1991c83a 	sub	r8,r3,r6
 4019498:	3825883a 	mov	r18,r7
 401949c:	003e5706 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 40194a0:	4984b03a 	or	r2,r9,r6
 40194a4:	10002e26 	beq	r2,zero,4019560 <__adddf3+0x7e0>
 40194a8:	4004d0fa 	srli	r2,r8,3
 40194ac:	8822d0fa 	srli	r17,r17,3
 40194b0:	4010977a 	slli	r8,r8,29
 40194b4:	10c0022c 	andhi	r3,r2,8
 40194b8:	4462b03a 	or	r17,r8,r17
 40194bc:	18000826 	beq	r3,zero,40194e0 <__adddf3+0x760>
 40194c0:	4808d0fa 	srli	r4,r9,3
 40194c4:	20c0022c 	andhi	r3,r4,8
 40194c8:	1800051e 	bne	r3,zero,40194e0 <__adddf3+0x760>
 40194cc:	300cd0fa 	srli	r6,r6,3
 40194d0:	4806977a 	slli	r3,r9,29
 40194d4:	2005883a 	mov	r2,r4
 40194d8:	3825883a 	mov	r18,r7
 40194dc:	19a2b03a 	or	r17,r3,r6
 40194e0:	8810d77a 	srli	r8,r17,29
 40194e4:	100490fa 	slli	r2,r2,3
 40194e8:	882290fa 	slli	r17,r17,3
 40194ec:	0401ffc4 	movi	r16,2047
 40194f0:	4090b03a 	or	r8,r8,r2
 40194f4:	003e4106 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 40194f8:	0141ffc4 	movi	r5,2047
 40194fc:	117fc71e 	bne	r2,r5,401941c <__alt_mem_onchip_memory2_0+0xfc01819c>
 4019500:	4811883a 	mov	r8,r9
 4019504:	3023883a 	mov	r17,r6
 4019508:	1021883a 	mov	r16,r2
 401950c:	003e3b06 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 4019510:	10002f26 	beq	r2,zero,40195d0 <__adddf3+0x850>
 4019514:	4984b03a 	or	r2,r9,r6
 4019518:	10001126 	beq	r2,zero,4019560 <__adddf3+0x7e0>
 401951c:	4004d0fa 	srli	r2,r8,3
 4019520:	8822d0fa 	srli	r17,r17,3
 4019524:	4010977a 	slli	r8,r8,29
 4019528:	10c0022c 	andhi	r3,r2,8
 401952c:	4462b03a 	or	r17,r8,r17
 4019530:	183feb26 	beq	r3,zero,40194e0 <__alt_mem_onchip_memory2_0+0xfc018260>
 4019534:	4808d0fa 	srli	r4,r9,3
 4019538:	20c0022c 	andhi	r3,r4,8
 401953c:	183fe81e 	bne	r3,zero,40194e0 <__alt_mem_onchip_memory2_0+0xfc018260>
 4019540:	300cd0fa 	srli	r6,r6,3
 4019544:	4806977a 	slli	r3,r9,29
 4019548:	2005883a 	mov	r2,r4
 401954c:	19a2b03a 	or	r17,r3,r6
 4019550:	003fe306 	br	40194e0 <__alt_mem_onchip_memory2_0+0xfc018260>
 4019554:	0011883a 	mov	r8,zero
 4019558:	0005883a 	mov	r2,zero
 401955c:	003e3f06 	br	4018e5c <__alt_mem_onchip_memory2_0+0xfc017bdc>
 4019560:	0401ffc4 	movi	r16,2047
 4019564:	003e2506 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 4019568:	0013883a 	mov	r9,zero
 401956c:	003f8406 	br	4019380 <__alt_mem_onchip_memory2_0+0xfc018100>
 4019570:	0005883a 	mov	r2,zero
 4019574:	0007883a 	mov	r3,zero
 4019578:	003e8906 	br	4018fa0 <__alt_mem_onchip_memory2_0+0xfc017d20>
 401957c:	197ff804 	addi	r5,r3,-32
 4019580:	01000804 	movi	r4,32
 4019584:	414ad83a 	srl	r5,r8,r5
 4019588:	19002426 	beq	r3,r4,401961c <__adddf3+0x89c>
 401958c:	01001004 	movi	r4,64
 4019590:	20c7c83a 	sub	r3,r4,r3
 4019594:	40c6983a 	sll	r3,r8,r3
 4019598:	1c46b03a 	or	r3,r3,r17
 401959c:	1806c03a 	cmpne	r3,r3,zero
 40195a0:	28e2b03a 	or	r17,r5,r3
 40195a4:	0007883a 	mov	r3,zero
 40195a8:	003f2306 	br	4019238 <__alt_mem_onchip_memory2_0+0xfc017fb8>
 40195ac:	0007883a 	mov	r3,zero
 40195b0:	5811883a 	mov	r8,r11
 40195b4:	00bfffc4 	movi	r2,-1
 40195b8:	0401ffc4 	movi	r16,2047
 40195bc:	003e7806 	br	4018fa0 <__alt_mem_onchip_memory2_0+0xfc017d20>
 40195c0:	4462b03a 	or	r17,r8,r17
 40195c4:	8822c03a 	cmpne	r17,r17,zero
 40195c8:	0009883a 	mov	r4,zero
 40195cc:	003fa006 	br	4019450 <__alt_mem_onchip_memory2_0+0xfc0181d0>
 40195d0:	4811883a 	mov	r8,r9
 40195d4:	3023883a 	mov	r17,r6
 40195d8:	0401ffc4 	movi	r16,2047
 40195dc:	003e0706 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 40195e0:	4811883a 	mov	r8,r9
 40195e4:	3023883a 	mov	r17,r6
 40195e8:	003e0406 	br	4018dfc <__alt_mem_onchip_memory2_0+0xfc017b7c>
 40195ec:	21fff804 	addi	r7,r4,-32
 40195f0:	01400804 	movi	r5,32
 40195f4:	41ced83a 	srl	r7,r8,r7
 40195f8:	21400a26 	beq	r4,r5,4019624 <__adddf3+0x8a4>
 40195fc:	01401004 	movi	r5,64
 4019600:	2909c83a 	sub	r4,r5,r4
 4019604:	4108983a 	sll	r4,r8,r4
 4019608:	2448b03a 	or	r4,r4,r17
 401960c:	2008c03a 	cmpne	r4,r4,zero
 4019610:	3922b03a 	or	r17,r7,r4
 4019614:	0009883a 	mov	r4,zero
 4019618:	003f8d06 	br	4019450 <__alt_mem_onchip_memory2_0+0xfc0181d0>
 401961c:	0007883a 	mov	r3,zero
 4019620:	003fdd06 	br	4019598 <__alt_mem_onchip_memory2_0+0xfc018318>
 4019624:	0009883a 	mov	r4,zero
 4019628:	003ff706 	br	4019608 <__alt_mem_onchip_memory2_0+0xfc018388>

0401962c <__divdf3>:
 401962c:	defff004 	addi	sp,sp,-64
 4019630:	dc800815 	stw	r18,32(sp)
 4019634:	2824d53a 	srli	r18,r5,20
 4019638:	dd800c15 	stw	r22,48(sp)
 401963c:	282cd7fa 	srli	r22,r5,31
 4019640:	dc000615 	stw	r16,24(sp)
 4019644:	04000434 	movhi	r16,16
 4019648:	843fffc4 	addi	r16,r16,-1
 401964c:	dfc00f15 	stw	ra,60(sp)
 4019650:	df000e15 	stw	fp,56(sp)
 4019654:	ddc00d15 	stw	r23,52(sp)
 4019658:	dd400b15 	stw	r21,44(sp)
 401965c:	dd000a15 	stw	r20,40(sp)
 4019660:	dcc00915 	stw	r19,36(sp)
 4019664:	dc400715 	stw	r17,28(sp)
 4019668:	9481ffcc 	andi	r18,r18,2047
 401966c:	2c20703a 	and	r16,r5,r16
 4019670:	b2003fcc 	andi	r8,r22,255
 4019674:	90006126 	beq	r18,zero,40197fc <__divdf3+0x1d0>
 4019678:	0081ffc4 	movi	r2,2047
 401967c:	202b883a 	mov	r21,r4
 4019680:	90803726 	beq	r18,r2,4019760 <__divdf3+0x134>
 4019684:	80800434 	orhi	r2,r16,16
 4019688:	100490fa 	slli	r2,r2,3
 401968c:	2020d77a 	srli	r16,r4,29
 4019690:	202a90fa 	slli	r21,r4,3
 4019694:	94bf0044 	addi	r18,r18,-1023
 4019698:	80a0b03a 	or	r16,r16,r2
 401969c:	0013883a 	mov	r9,zero
 40196a0:	000b883a 	mov	r5,zero
 40196a4:	3806d53a 	srli	r3,r7,20
 40196a8:	382ed7fa 	srli	r23,r7,31
 40196ac:	04400434 	movhi	r17,16
 40196b0:	8c7fffc4 	addi	r17,r17,-1
 40196b4:	18c1ffcc 	andi	r3,r3,2047
 40196b8:	3029883a 	mov	r20,r6
 40196bc:	3c62703a 	and	r17,r7,r17
 40196c0:	bf003fcc 	andi	fp,r23,255
 40196c4:	18006e26 	beq	r3,zero,4019880 <__divdf3+0x254>
 40196c8:	0081ffc4 	movi	r2,2047
 40196cc:	18806626 	beq	r3,r2,4019868 <__divdf3+0x23c>
 40196d0:	88800434 	orhi	r2,r17,16
 40196d4:	100490fa 	slli	r2,r2,3
 40196d8:	3022d77a 	srli	r17,r6,29
 40196dc:	302890fa 	slli	r20,r6,3
 40196e0:	18ff0044 	addi	r3,r3,-1023
 40196e4:	88a2b03a 	or	r17,r17,r2
 40196e8:	000f883a 	mov	r7,zero
 40196ec:	b5e6f03a 	xor	r19,r22,r23
 40196f0:	3a4cb03a 	or	r6,r7,r9
 40196f4:	008003c4 	movi	r2,15
 40196f8:	9809883a 	mov	r4,r19
 40196fc:	90c7c83a 	sub	r3,r18,r3
 4019700:	9cc03fcc 	andi	r19,r19,255
 4019704:	11809636 	bltu	r2,r6,4019960 <__divdf3+0x334>
 4019708:	300c90ba 	slli	r6,r6,2
 401970c:	008100b4 	movhi	r2,1026
 4019710:	10a5c804 	addi	r2,r2,-26848
 4019714:	308d883a 	add	r6,r6,r2
 4019718:	30800017 	ldw	r2,0(r6)
 401971c:	1000683a 	jmp	r2
 4019720:	04019960 	cmpeqi	r16,zero,1637
 4019724:	04019798 	cmpnei	r16,zero,1630
 4019728:	04019950 	cmplti	r16,zero,1637
 401972c:	0401978c 	andi	r16,zero,1630
 4019730:	04019950 	cmplti	r16,zero,1637
 4019734:	04019924 	muli	r16,zero,1636
 4019738:	04019950 	cmplti	r16,zero,1637
 401973c:	0401978c 	andi	r16,zero,1630
 4019740:	04019798 	cmpnei	r16,zero,1630
 4019744:	04019798 	cmpnei	r16,zero,1630
 4019748:	04019924 	muli	r16,zero,1636
 401974c:	0401978c 	andi	r16,zero,1630
 4019750:	0401977c 	xorhi	r16,zero,1629
 4019754:	0401977c 	xorhi	r16,zero,1629
 4019758:	0401977c 	xorhi	r16,zero,1629
 401975c:	04019ce8 	cmpgeui	r16,zero,1651
 4019760:	2404b03a 	or	r2,r4,r16
 4019764:	10006c1e 	bne	r2,zero,4019918 <__divdf3+0x2ec>
 4019768:	02400204 	movi	r9,8
 401976c:	0021883a 	mov	r16,zero
 4019770:	002b883a 	mov	r21,zero
 4019774:	01400084 	movi	r5,2
 4019778:	003fca06 	br	40196a4 <__alt_mem_onchip_memory2_0+0xfc018424>
 401977c:	8023883a 	mov	r17,r16
 4019780:	a829883a 	mov	r20,r21
 4019784:	4039883a 	mov	fp,r8
 4019788:	280f883a 	mov	r7,r5
 401978c:	00800084 	movi	r2,2
 4019790:	3881601e 	bne	r7,r2,4019d14 <__divdf3+0x6e8>
 4019794:	e027883a 	mov	r19,fp
 4019798:	9900004c 	andi	r4,r19,1
 401979c:	0081ffc4 	movi	r2,2047
 40197a0:	0021883a 	mov	r16,zero
 40197a4:	002b883a 	mov	r21,zero
 40197a8:	1004953a 	slli	r2,r2,20
 40197ac:	20c03fcc 	andi	r3,r4,255
 40197b0:	01400434 	movhi	r5,16
 40197b4:	297fffc4 	addi	r5,r5,-1
 40197b8:	180697fa 	slli	r3,r3,31
 40197bc:	8160703a 	and	r16,r16,r5
 40197c0:	80a0b03a 	or	r16,r16,r2
 40197c4:	80c6b03a 	or	r3,r16,r3
 40197c8:	a805883a 	mov	r2,r21
 40197cc:	dfc00f17 	ldw	ra,60(sp)
 40197d0:	df000e17 	ldw	fp,56(sp)
 40197d4:	ddc00d17 	ldw	r23,52(sp)
 40197d8:	dd800c17 	ldw	r22,48(sp)
 40197dc:	dd400b17 	ldw	r21,44(sp)
 40197e0:	dd000a17 	ldw	r20,40(sp)
 40197e4:	dcc00917 	ldw	r19,36(sp)
 40197e8:	dc800817 	ldw	r18,32(sp)
 40197ec:	dc400717 	ldw	r17,28(sp)
 40197f0:	dc000617 	ldw	r16,24(sp)
 40197f4:	dec01004 	addi	sp,sp,64
 40197f8:	f800283a 	ret
 40197fc:	2404b03a 	or	r2,r4,r16
 4019800:	2023883a 	mov	r17,r4
 4019804:	10003f26 	beq	r2,zero,4019904 <__divdf3+0x2d8>
 4019808:	80015e26 	beq	r16,zero,4019d84 <__divdf3+0x758>
 401980c:	8009883a 	mov	r4,r16
 4019810:	d9800215 	stw	r6,8(sp)
 4019814:	d9c00515 	stw	r7,20(sp)
 4019818:	da000415 	stw	r8,16(sp)
 401981c:	400e33c0 	call	400e33c <__clzsi2>
 4019820:	d9800217 	ldw	r6,8(sp)
 4019824:	d9c00517 	ldw	r7,20(sp)
 4019828:	da000417 	ldw	r8,16(sp)
 401982c:	113ffd44 	addi	r4,r2,-11
 4019830:	00c00704 	movi	r3,28
 4019834:	19014f16 	blt	r3,r4,4019d74 <__divdf3+0x748>
 4019838:	00c00744 	movi	r3,29
 401983c:	157ffe04 	addi	r21,r2,-8
 4019840:	1907c83a 	sub	r3,r3,r4
 4019844:	8560983a 	sll	r16,r16,r21
 4019848:	88c6d83a 	srl	r3,r17,r3
 401984c:	8d6a983a 	sll	r21,r17,r21
 4019850:	1c20b03a 	or	r16,r3,r16
 4019854:	1080fcc4 	addi	r2,r2,1011
 4019858:	00a5c83a 	sub	r18,zero,r2
 401985c:	0013883a 	mov	r9,zero
 4019860:	000b883a 	mov	r5,zero
 4019864:	003f8f06 	br	40196a4 <__alt_mem_onchip_memory2_0+0xfc018424>
 4019868:	3444b03a 	or	r2,r6,r17
 401986c:	1000231e 	bne	r2,zero,40198fc <__divdf3+0x2d0>
 4019870:	0023883a 	mov	r17,zero
 4019874:	0029883a 	mov	r20,zero
 4019878:	01c00084 	movi	r7,2
 401987c:	003f9b06 	br	40196ec <__alt_mem_onchip_memory2_0+0xfc01846c>
 4019880:	3444b03a 	or	r2,r6,r17
 4019884:	10001926 	beq	r2,zero,40198ec <__divdf3+0x2c0>
 4019888:	88014b26 	beq	r17,zero,4019db8 <__divdf3+0x78c>
 401988c:	8809883a 	mov	r4,r17
 4019890:	d9400115 	stw	r5,4(sp)
 4019894:	d9800215 	stw	r6,8(sp)
 4019898:	da000415 	stw	r8,16(sp)
 401989c:	da400315 	stw	r9,12(sp)
 40198a0:	400e33c0 	call	400e33c <__clzsi2>
 40198a4:	d9400117 	ldw	r5,4(sp)
 40198a8:	d9800217 	ldw	r6,8(sp)
 40198ac:	da000417 	ldw	r8,16(sp)
 40198b0:	da400317 	ldw	r9,12(sp)
 40198b4:	113ffd44 	addi	r4,r2,-11
 40198b8:	00c00704 	movi	r3,28
 40198bc:	19013a16 	blt	r3,r4,4019da8 <__divdf3+0x77c>
 40198c0:	00c00744 	movi	r3,29
 40198c4:	153ffe04 	addi	r20,r2,-8
 40198c8:	1907c83a 	sub	r3,r3,r4
 40198cc:	8d22983a 	sll	r17,r17,r20
 40198d0:	30c6d83a 	srl	r3,r6,r3
 40198d4:	3528983a 	sll	r20,r6,r20
 40198d8:	1c62b03a 	or	r17,r3,r17
 40198dc:	1080fcc4 	addi	r2,r2,1011
 40198e0:	0087c83a 	sub	r3,zero,r2
 40198e4:	000f883a 	mov	r7,zero
 40198e8:	003f8006 	br	40196ec <__alt_mem_onchip_memory2_0+0xfc01846c>
 40198ec:	0023883a 	mov	r17,zero
 40198f0:	0029883a 	mov	r20,zero
 40198f4:	01c00044 	movi	r7,1
 40198f8:	003f7c06 	br	40196ec <__alt_mem_onchip_memory2_0+0xfc01846c>
 40198fc:	01c000c4 	movi	r7,3
 4019900:	003f7a06 	br	40196ec <__alt_mem_onchip_memory2_0+0xfc01846c>
 4019904:	02400104 	movi	r9,4
 4019908:	0021883a 	mov	r16,zero
 401990c:	002b883a 	mov	r21,zero
 4019910:	01400044 	movi	r5,1
 4019914:	003f6306 	br	40196a4 <__alt_mem_onchip_memory2_0+0xfc018424>
 4019918:	02400304 	movi	r9,12
 401991c:	014000c4 	movi	r5,3
 4019920:	003f6006 	br	40196a4 <__alt_mem_onchip_memory2_0+0xfc018424>
 4019924:	04000434 	movhi	r16,16
 4019928:	0009883a 	mov	r4,zero
 401992c:	843fffc4 	addi	r16,r16,-1
 4019930:	057fffc4 	movi	r21,-1
 4019934:	0081ffc4 	movi	r2,2047
 4019938:	003f9b06 	br	40197a8 <__alt_mem_onchip_memory2_0+0xfc018528>
 401993c:	00c00044 	movi	r3,1
 4019940:	1887c83a 	sub	r3,r3,r2
 4019944:	01000e04 	movi	r4,56
 4019948:	20c1530e 	bge	r4,r3,4019e98 <__divdf3+0x86c>
 401994c:	9900004c 	andi	r4,r19,1
 4019950:	0005883a 	mov	r2,zero
 4019954:	0021883a 	mov	r16,zero
 4019958:	002b883a 	mov	r21,zero
 401995c:	003f9206 	br	40197a8 <__alt_mem_onchip_memory2_0+0xfc018528>
 4019960:	8c012e36 	bltu	r17,r16,4019e1c <__divdf3+0x7f0>
 4019964:	84412c26 	beq	r16,r17,4019e18 <__divdf3+0x7ec>
 4019968:	a82f883a 	mov	r23,r21
 401996c:	18ffffc4 	addi	r3,r3,-1
 4019970:	002b883a 	mov	r21,zero
 4019974:	a004d63a 	srli	r2,r20,24
 4019978:	8822923a 	slli	r17,r17,8
 401997c:	a028923a 	slli	r20,r20,8
 4019980:	8009883a 	mov	r4,r16
 4019984:	88acb03a 	or	r22,r17,r2
 4019988:	dd000015 	stw	r20,0(sp)
 401998c:	b028d43a 	srli	r20,r22,16
 4019990:	d8c00215 	stw	r3,8(sp)
 4019994:	b4bfffcc 	andi	r18,r22,65535
 4019998:	a00b883a 	mov	r5,r20
 401999c:	400d2080 	call	400d208 <__udivsi3>
 40199a0:	100b883a 	mov	r5,r2
 40199a4:	9009883a 	mov	r4,r18
 40199a8:	1023883a 	mov	r17,r2
 40199ac:	400d2c40 	call	400d2c4 <__mulsi3>
 40199b0:	8009883a 	mov	r4,r16
 40199b4:	a00b883a 	mov	r5,r20
 40199b8:	1039883a 	mov	fp,r2
 40199bc:	400d26c0 	call	400d26c <__umodsi3>
 40199c0:	1004943a 	slli	r2,r2,16
 40199c4:	b808d43a 	srli	r4,r23,16
 40199c8:	d8c00217 	ldw	r3,8(sp)
 40199cc:	2084b03a 	or	r2,r4,r2
 40199d0:	1700062e 	bgeu	r2,fp,40199ec <__divdf3+0x3c0>
 40199d4:	1585883a 	add	r2,r2,r22
 40199d8:	893fffc4 	addi	r4,r17,-1
 40199dc:	15811d36 	bltu	r2,r22,4019e54 <__divdf3+0x828>
 40199e0:	17011c2e 	bgeu	r2,fp,4019e54 <__divdf3+0x828>
 40199e4:	8c7fff84 	addi	r17,r17,-2
 40199e8:	1585883a 	add	r2,r2,r22
 40199ec:	1739c83a 	sub	fp,r2,fp
 40199f0:	a00b883a 	mov	r5,r20
 40199f4:	e009883a 	mov	r4,fp
 40199f8:	d8c00215 	stw	r3,8(sp)
 40199fc:	400d2080 	call	400d208 <__udivsi3>
 4019a00:	100b883a 	mov	r5,r2
 4019a04:	9009883a 	mov	r4,r18
 4019a08:	1021883a 	mov	r16,r2
 4019a0c:	400d2c40 	call	400d2c4 <__mulsi3>
 4019a10:	a00b883a 	mov	r5,r20
 4019a14:	e009883a 	mov	r4,fp
 4019a18:	d8800415 	stw	r2,16(sp)
 4019a1c:	400d26c0 	call	400d26c <__umodsi3>
 4019a20:	1004943a 	slli	r2,r2,16
 4019a24:	da000417 	ldw	r8,16(sp)
 4019a28:	bdffffcc 	andi	r23,r23,65535
 4019a2c:	b884b03a 	or	r2,r23,r2
 4019a30:	d8c00217 	ldw	r3,8(sp)
 4019a34:	1200062e 	bgeu	r2,r8,4019a50 <__divdf3+0x424>
 4019a38:	1585883a 	add	r2,r2,r22
 4019a3c:	813fffc4 	addi	r4,r16,-1
 4019a40:	15810236 	bltu	r2,r22,4019e4c <__divdf3+0x820>
 4019a44:	1201012e 	bgeu	r2,r8,4019e4c <__divdf3+0x820>
 4019a48:	843fff84 	addi	r16,r16,-2
 4019a4c:	1585883a 	add	r2,r2,r22
 4019a50:	8822943a 	slli	r17,r17,16
 4019a54:	d9800017 	ldw	r6,0(sp)
 4019a58:	1211c83a 	sub	r8,r2,r8
 4019a5c:	8c22b03a 	or	r17,r17,r16
 4019a60:	373fffcc 	andi	fp,r6,65535
 4019a64:	8abfffcc 	andi	r10,r17,65535
 4019a68:	8820d43a 	srli	r16,r17,16
 4019a6c:	5009883a 	mov	r4,r10
 4019a70:	e00b883a 	mov	r5,fp
 4019a74:	302ed43a 	srli	r23,r6,16
 4019a78:	d8c00215 	stw	r3,8(sp)
 4019a7c:	da000415 	stw	r8,16(sp)
 4019a80:	da800115 	stw	r10,4(sp)
 4019a84:	400d2c40 	call	400d2c4 <__mulsi3>
 4019a88:	800b883a 	mov	r5,r16
 4019a8c:	e009883a 	mov	r4,fp
 4019a90:	d8800515 	stw	r2,20(sp)
 4019a94:	400d2c40 	call	400d2c4 <__mulsi3>
 4019a98:	8009883a 	mov	r4,r16
 4019a9c:	b80b883a 	mov	r5,r23
 4019aa0:	d8800315 	stw	r2,12(sp)
 4019aa4:	400d2c40 	call	400d2c4 <__mulsi3>
 4019aa8:	da800117 	ldw	r10,4(sp)
 4019aac:	b80b883a 	mov	r5,r23
 4019ab0:	1021883a 	mov	r16,r2
 4019ab4:	5009883a 	mov	r4,r10
 4019ab8:	400d2c40 	call	400d2c4 <__mulsi3>
 4019abc:	d9c00517 	ldw	r7,20(sp)
 4019ac0:	da400317 	ldw	r9,12(sp)
 4019ac4:	d8c00217 	ldw	r3,8(sp)
 4019ac8:	3808d43a 	srli	r4,r7,16
 4019acc:	1245883a 	add	r2,r2,r9
 4019ad0:	da000417 	ldw	r8,16(sp)
 4019ad4:	2085883a 	add	r2,r4,r2
 4019ad8:	1240022e 	bgeu	r2,r9,4019ae4 <__divdf3+0x4b8>
 4019adc:	01000074 	movhi	r4,1
 4019ae0:	8121883a 	add	r16,r16,r4
 4019ae4:	1008d43a 	srli	r4,r2,16
 4019ae8:	1004943a 	slli	r2,r2,16
 4019aec:	39ffffcc 	andi	r7,r7,65535
 4019af0:	2409883a 	add	r4,r4,r16
 4019af4:	11c5883a 	add	r2,r2,r7
 4019af8:	4100bb36 	bltu	r8,r4,4019de8 <__divdf3+0x7bc>
 4019afc:	4100d726 	beq	r8,r4,4019e5c <__divdf3+0x830>
 4019b00:	4109c83a 	sub	r4,r8,r4
 4019b04:	a8a1c83a 	sub	r16,r21,r2
 4019b08:	ac2b803a 	cmpltu	r21,r21,r16
 4019b0c:	256bc83a 	sub	r21,r4,r21
 4019b10:	b540d926 	beq	r22,r21,4019e78 <__divdf3+0x84c>
 4019b14:	a00b883a 	mov	r5,r20
 4019b18:	a809883a 	mov	r4,r21
 4019b1c:	d8c00215 	stw	r3,8(sp)
 4019b20:	400d2080 	call	400d208 <__udivsi3>
 4019b24:	100b883a 	mov	r5,r2
 4019b28:	9009883a 	mov	r4,r18
 4019b2c:	d8800515 	stw	r2,20(sp)
 4019b30:	400d2c40 	call	400d2c4 <__mulsi3>
 4019b34:	a809883a 	mov	r4,r21
 4019b38:	a00b883a 	mov	r5,r20
 4019b3c:	d8800415 	stw	r2,16(sp)
 4019b40:	400d26c0 	call	400d26c <__umodsi3>
 4019b44:	1004943a 	slli	r2,r2,16
 4019b48:	8008d43a 	srli	r4,r16,16
 4019b4c:	da000417 	ldw	r8,16(sp)
 4019b50:	d8c00217 	ldw	r3,8(sp)
 4019b54:	2084b03a 	or	r2,r4,r2
 4019b58:	d9c00517 	ldw	r7,20(sp)
 4019b5c:	1200062e 	bgeu	r2,r8,4019b78 <__divdf3+0x54c>
 4019b60:	1585883a 	add	r2,r2,r22
 4019b64:	393fffc4 	addi	r4,r7,-1
 4019b68:	1580c536 	bltu	r2,r22,4019e80 <__divdf3+0x854>
 4019b6c:	1200c42e 	bgeu	r2,r8,4019e80 <__divdf3+0x854>
 4019b70:	39ffff84 	addi	r7,r7,-2
 4019b74:	1585883a 	add	r2,r2,r22
 4019b78:	122bc83a 	sub	r21,r2,r8
 4019b7c:	a00b883a 	mov	r5,r20
 4019b80:	a809883a 	mov	r4,r21
 4019b84:	d8c00215 	stw	r3,8(sp)
 4019b88:	d9c00515 	stw	r7,20(sp)
 4019b8c:	400d2080 	call	400d208 <__udivsi3>
 4019b90:	9009883a 	mov	r4,r18
 4019b94:	100b883a 	mov	r5,r2
 4019b98:	d8800415 	stw	r2,16(sp)
 4019b9c:	400d2c40 	call	400d2c4 <__mulsi3>
 4019ba0:	a809883a 	mov	r4,r21
 4019ba4:	a00b883a 	mov	r5,r20
 4019ba8:	1025883a 	mov	r18,r2
 4019bac:	400d26c0 	call	400d26c <__umodsi3>
 4019bb0:	1004943a 	slli	r2,r2,16
 4019bb4:	813fffcc 	andi	r4,r16,65535
 4019bb8:	d8c00217 	ldw	r3,8(sp)
 4019bbc:	20a0b03a 	or	r16,r4,r2
 4019bc0:	d9c00517 	ldw	r7,20(sp)
 4019bc4:	da000417 	ldw	r8,16(sp)
 4019bc8:	8480062e 	bgeu	r16,r18,4019be4 <__divdf3+0x5b8>
 4019bcc:	85a1883a 	add	r16,r16,r22
 4019bd0:	40bfffc4 	addi	r2,r8,-1
 4019bd4:	8580ac36 	bltu	r16,r22,4019e88 <__divdf3+0x85c>
 4019bd8:	8480ab2e 	bgeu	r16,r18,4019e88 <__divdf3+0x85c>
 4019bdc:	423fff84 	addi	r8,r8,-2
 4019be0:	85a1883a 	add	r16,r16,r22
 4019be4:	3804943a 	slli	r2,r7,16
 4019be8:	84a1c83a 	sub	r16,r16,r18
 4019bec:	e009883a 	mov	r4,fp
 4019bf0:	1228b03a 	or	r20,r2,r8
 4019bf4:	a1ffffcc 	andi	r7,r20,65535
 4019bf8:	a024d43a 	srli	r18,r20,16
 4019bfc:	380b883a 	mov	r5,r7
 4019c00:	d8c00215 	stw	r3,8(sp)
 4019c04:	d9c00515 	stw	r7,20(sp)
 4019c08:	400d2c40 	call	400d2c4 <__mulsi3>
 4019c0c:	900b883a 	mov	r5,r18
 4019c10:	e009883a 	mov	r4,fp
 4019c14:	102b883a 	mov	r21,r2
 4019c18:	400d2c40 	call	400d2c4 <__mulsi3>
 4019c1c:	900b883a 	mov	r5,r18
 4019c20:	b809883a 	mov	r4,r23
 4019c24:	1039883a 	mov	fp,r2
 4019c28:	400d2c40 	call	400d2c4 <__mulsi3>
 4019c2c:	d9c00517 	ldw	r7,20(sp)
 4019c30:	b80b883a 	mov	r5,r23
 4019c34:	1025883a 	mov	r18,r2
 4019c38:	3809883a 	mov	r4,r7
 4019c3c:	400d2c40 	call	400d2c4 <__mulsi3>
 4019c40:	a808d43a 	srli	r4,r21,16
 4019c44:	1705883a 	add	r2,r2,fp
 4019c48:	d8c00217 	ldw	r3,8(sp)
 4019c4c:	2085883a 	add	r2,r4,r2
 4019c50:	1700022e 	bgeu	r2,fp,4019c5c <__divdf3+0x630>
 4019c54:	01000074 	movhi	r4,1
 4019c58:	9125883a 	add	r18,r18,r4
 4019c5c:	1008d43a 	srli	r4,r2,16
 4019c60:	1004943a 	slli	r2,r2,16
 4019c64:	ad7fffcc 	andi	r21,r21,65535
 4019c68:	2489883a 	add	r4,r4,r18
 4019c6c:	1545883a 	add	r2,r2,r21
 4019c70:	81003836 	bltu	r16,r4,4019d54 <__divdf3+0x728>
 4019c74:	81003626 	beq	r16,r4,4019d50 <__divdf3+0x724>
 4019c78:	a5000054 	ori	r20,r20,1
 4019c7c:	1880ffc4 	addi	r2,r3,1023
 4019c80:	00bf2e0e 	bge	zero,r2,401993c <__alt_mem_onchip_memory2_0+0xfc0186bc>
 4019c84:	a10001cc 	andi	r4,r20,7
 4019c88:	20000726 	beq	r4,zero,4019ca8 <__divdf3+0x67c>
 4019c8c:	a10003cc 	andi	r4,r20,15
 4019c90:	01400104 	movi	r5,4
 4019c94:	21400426 	beq	r4,r5,4019ca8 <__divdf3+0x67c>
 4019c98:	a149883a 	add	r4,r20,r5
 4019c9c:	2529803a 	cmpltu	r20,r4,r20
 4019ca0:	8d23883a 	add	r17,r17,r20
 4019ca4:	2029883a 	mov	r20,r4
 4019ca8:	8900402c 	andhi	r4,r17,256
 4019cac:	20000426 	beq	r4,zero,4019cc0 <__divdf3+0x694>
 4019cb0:	18810004 	addi	r2,r3,1024
 4019cb4:	00ffc034 	movhi	r3,65280
 4019cb8:	18ffffc4 	addi	r3,r3,-1
 4019cbc:	88e2703a 	and	r17,r17,r3
 4019cc0:	00c1ff84 	movi	r3,2046
 4019cc4:	18beb416 	blt	r3,r2,4019798 <__alt_mem_onchip_memory2_0+0xfc018518>
 4019cc8:	a028d0fa 	srli	r20,r20,3
 4019ccc:	882a977a 	slli	r21,r17,29
 4019cd0:	8820927a 	slli	r16,r17,9
 4019cd4:	1081ffcc 	andi	r2,r2,2047
 4019cd8:	ad2ab03a 	or	r21,r21,r20
 4019cdc:	8020d33a 	srli	r16,r16,12
 4019ce0:	9900004c 	andi	r4,r19,1
 4019ce4:	003eb006 	br	40197a8 <__alt_mem_onchip_memory2_0+0xfc018528>
 4019ce8:	8080022c 	andhi	r2,r16,8
 4019cec:	10001226 	beq	r2,zero,4019d38 <__divdf3+0x70c>
 4019cf0:	8880022c 	andhi	r2,r17,8
 4019cf4:	1000101e 	bne	r2,zero,4019d38 <__divdf3+0x70c>
 4019cf8:	00800434 	movhi	r2,16
 4019cfc:	8c000234 	orhi	r16,r17,8
 4019d00:	10bfffc4 	addi	r2,r2,-1
 4019d04:	b809883a 	mov	r4,r23
 4019d08:	80a0703a 	and	r16,r16,r2
 4019d0c:	a02b883a 	mov	r21,r20
 4019d10:	003f0806 	br	4019934 <__alt_mem_onchip_memory2_0+0xfc0186b4>
 4019d14:	008000c4 	movi	r2,3
 4019d18:	3880b126 	beq	r7,r2,4019fe0 <__divdf3+0x9b4>
 4019d1c:	00800044 	movi	r2,1
 4019d20:	38805b1e 	bne	r7,r2,4019e90 <__divdf3+0x864>
 4019d24:	e009883a 	mov	r4,fp
 4019d28:	0005883a 	mov	r2,zero
 4019d2c:	0021883a 	mov	r16,zero
 4019d30:	002b883a 	mov	r21,zero
 4019d34:	003e9c06 	br	40197a8 <__alt_mem_onchip_memory2_0+0xfc018528>
 4019d38:	00800434 	movhi	r2,16
 4019d3c:	84000234 	orhi	r16,r16,8
 4019d40:	10bfffc4 	addi	r2,r2,-1
 4019d44:	b009883a 	mov	r4,r22
 4019d48:	80a0703a 	and	r16,r16,r2
 4019d4c:	003ef906 	br	4019934 <__alt_mem_onchip_memory2_0+0xfc0186b4>
 4019d50:	103fca26 	beq	r2,zero,4019c7c <__alt_mem_onchip_memory2_0+0xfc0189fc>
 4019d54:	b421883a 	add	r16,r22,r16
 4019d58:	a17fffc4 	addi	r5,r20,-1
 4019d5c:	8580422e 	bgeu	r16,r22,4019e68 <__divdf3+0x83c>
 4019d60:	2829883a 	mov	r20,r5
 4019d64:	813fc41e 	bne	r16,r4,4019c78 <__alt_mem_onchip_memory2_0+0xfc0189f8>
 4019d68:	d9800017 	ldw	r6,0(sp)
 4019d6c:	30bfc21e 	bne	r6,r2,4019c78 <__alt_mem_onchip_memory2_0+0xfc0189f8>
 4019d70:	003fc206 	br	4019c7c <__alt_mem_onchip_memory2_0+0xfc0189fc>
 4019d74:	143ff604 	addi	r16,r2,-40
 4019d78:	8c20983a 	sll	r16,r17,r16
 4019d7c:	002b883a 	mov	r21,zero
 4019d80:	003eb406 	br	4019854 <__alt_mem_onchip_memory2_0+0xfc0185d4>
 4019d84:	d9800215 	stw	r6,8(sp)
 4019d88:	d9c00515 	stw	r7,20(sp)
 4019d8c:	da000415 	stw	r8,16(sp)
 4019d90:	400e33c0 	call	400e33c <__clzsi2>
 4019d94:	10800804 	addi	r2,r2,32
 4019d98:	da000417 	ldw	r8,16(sp)
 4019d9c:	d9c00517 	ldw	r7,20(sp)
 4019da0:	d9800217 	ldw	r6,8(sp)
 4019da4:	003ea106 	br	401982c <__alt_mem_onchip_memory2_0+0xfc0185ac>
 4019da8:	147ff604 	addi	r17,r2,-40
 4019dac:	3462983a 	sll	r17,r6,r17
 4019db0:	0029883a 	mov	r20,zero
 4019db4:	003ec906 	br	40198dc <__alt_mem_onchip_memory2_0+0xfc01865c>
 4019db8:	3009883a 	mov	r4,r6
 4019dbc:	d9400115 	stw	r5,4(sp)
 4019dc0:	d9800215 	stw	r6,8(sp)
 4019dc4:	da000415 	stw	r8,16(sp)
 4019dc8:	da400315 	stw	r9,12(sp)
 4019dcc:	400e33c0 	call	400e33c <__clzsi2>
 4019dd0:	10800804 	addi	r2,r2,32
 4019dd4:	da400317 	ldw	r9,12(sp)
 4019dd8:	da000417 	ldw	r8,16(sp)
 4019ddc:	d9800217 	ldw	r6,8(sp)
 4019de0:	d9400117 	ldw	r5,4(sp)
 4019de4:	003eb306 	br	40198b4 <__alt_mem_onchip_memory2_0+0xfc018634>
 4019de8:	d9800017 	ldw	r6,0(sp)
 4019dec:	a9ab883a 	add	r21,r21,r6
 4019df0:	a98b803a 	cmpltu	r5,r21,r6
 4019df4:	2d8b883a 	add	r5,r5,r22
 4019df8:	2a11883a 	add	r8,r5,r8
 4019dfc:	897fffc4 	addi	r5,r17,-1
 4019e00:	b2000c2e 	bgeu	r22,r8,4019e34 <__divdf3+0x808>
 4019e04:	41003f36 	bltu	r8,r4,4019f04 <__divdf3+0x8d8>
 4019e08:	22006c26 	beq	r4,r8,4019fbc <__divdf3+0x990>
 4019e0c:	4109c83a 	sub	r4,r8,r4
 4019e10:	2823883a 	mov	r17,r5
 4019e14:	003f3b06 	br	4019b04 <__alt_mem_onchip_memory2_0+0xfc018884>
 4019e18:	ad3ed336 	bltu	r21,r20,4019968 <__alt_mem_onchip_memory2_0+0xfc0186e8>
 4019e1c:	a804d07a 	srli	r2,r21,1
 4019e20:	802e97fa 	slli	r23,r16,31
 4019e24:	a82a97fa 	slli	r21,r21,31
 4019e28:	8020d07a 	srli	r16,r16,1
 4019e2c:	b8aeb03a 	or	r23,r23,r2
 4019e30:	003ed006 	br	4019974 <__alt_mem_onchip_memory2_0+0xfc0186f4>
 4019e34:	b23ff51e 	bne	r22,r8,4019e0c <__alt_mem_onchip_memory2_0+0xfc018b8c>
 4019e38:	d9800017 	ldw	r6,0(sp)
 4019e3c:	a9bff12e 	bgeu	r21,r6,4019e04 <__alt_mem_onchip_memory2_0+0xfc018b84>
 4019e40:	b109c83a 	sub	r4,r22,r4
 4019e44:	2823883a 	mov	r17,r5
 4019e48:	003f2e06 	br	4019b04 <__alt_mem_onchip_memory2_0+0xfc018884>
 4019e4c:	2021883a 	mov	r16,r4
 4019e50:	003eff06 	br	4019a50 <__alt_mem_onchip_memory2_0+0xfc0187d0>
 4019e54:	2023883a 	mov	r17,r4
 4019e58:	003ee406 	br	40199ec <__alt_mem_onchip_memory2_0+0xfc01876c>
 4019e5c:	a8bfe236 	bltu	r21,r2,4019de8 <__alt_mem_onchip_memory2_0+0xfc018b68>
 4019e60:	0009883a 	mov	r4,zero
 4019e64:	003f2706 	br	4019b04 <__alt_mem_onchip_memory2_0+0xfc018884>
 4019e68:	81002d36 	bltu	r16,r4,4019f20 <__divdf3+0x8f4>
 4019e6c:	24005626 	beq	r4,r16,4019fc8 <__divdf3+0x99c>
 4019e70:	2829883a 	mov	r20,r5
 4019e74:	003f8006 	br	4019c78 <__alt_mem_onchip_memory2_0+0xfc0189f8>
 4019e78:	053fffc4 	movi	r20,-1
 4019e7c:	003f7f06 	br	4019c7c <__alt_mem_onchip_memory2_0+0xfc0189fc>
 4019e80:	200f883a 	mov	r7,r4
 4019e84:	003f3c06 	br	4019b78 <__alt_mem_onchip_memory2_0+0xfc0188f8>
 4019e88:	1011883a 	mov	r8,r2
 4019e8c:	003f5506 	br	4019be4 <__alt_mem_onchip_memory2_0+0xfc018964>
 4019e90:	e027883a 	mov	r19,fp
 4019e94:	003f7906 	br	4019c7c <__alt_mem_onchip_memory2_0+0xfc0189fc>
 4019e98:	010007c4 	movi	r4,31
 4019e9c:	20c02816 	blt	r4,r3,4019f40 <__divdf3+0x914>
 4019ea0:	00800804 	movi	r2,32
 4019ea4:	10c5c83a 	sub	r2,r2,r3
 4019ea8:	888a983a 	sll	r5,r17,r2
 4019eac:	a0c8d83a 	srl	r4,r20,r3
 4019eb0:	a084983a 	sll	r2,r20,r2
 4019eb4:	88e2d83a 	srl	r17,r17,r3
 4019eb8:	2906b03a 	or	r3,r5,r4
 4019ebc:	1004c03a 	cmpne	r2,r2,zero
 4019ec0:	1886b03a 	or	r3,r3,r2
 4019ec4:	188001cc 	andi	r2,r3,7
 4019ec8:	10000726 	beq	r2,zero,4019ee8 <__divdf3+0x8bc>
 4019ecc:	188003cc 	andi	r2,r3,15
 4019ed0:	01000104 	movi	r4,4
 4019ed4:	11000426 	beq	r2,r4,4019ee8 <__divdf3+0x8bc>
 4019ed8:	1805883a 	mov	r2,r3
 4019edc:	10c00104 	addi	r3,r2,4
 4019ee0:	1885803a 	cmpltu	r2,r3,r2
 4019ee4:	88a3883a 	add	r17,r17,r2
 4019ee8:	8880202c 	andhi	r2,r17,128
 4019eec:	10002926 	beq	r2,zero,4019f94 <__divdf3+0x968>
 4019ef0:	9900004c 	andi	r4,r19,1
 4019ef4:	00800044 	movi	r2,1
 4019ef8:	0021883a 	mov	r16,zero
 4019efc:	002b883a 	mov	r21,zero
 4019f00:	003e2906 	br	40197a8 <__alt_mem_onchip_memory2_0+0xfc018528>
 4019f04:	d9800017 	ldw	r6,0(sp)
 4019f08:	8c7fff84 	addi	r17,r17,-2
 4019f0c:	a9ab883a 	add	r21,r21,r6
 4019f10:	a98b803a 	cmpltu	r5,r21,r6
 4019f14:	2d8b883a 	add	r5,r5,r22
 4019f18:	2a11883a 	add	r8,r5,r8
 4019f1c:	003ef806 	br	4019b00 <__alt_mem_onchip_memory2_0+0xfc018880>
 4019f20:	d9800017 	ldw	r6,0(sp)
 4019f24:	318f883a 	add	r7,r6,r6
 4019f28:	398b803a 	cmpltu	r5,r7,r6
 4019f2c:	2d8d883a 	add	r6,r5,r22
 4019f30:	81a1883a 	add	r16,r16,r6
 4019f34:	a17fff84 	addi	r5,r20,-2
 4019f38:	d9c00015 	stw	r7,0(sp)
 4019f3c:	003f8806 	br	4019d60 <__alt_mem_onchip_memory2_0+0xfc018ae0>
 4019f40:	013ff844 	movi	r4,-31
 4019f44:	2085c83a 	sub	r2,r4,r2
 4019f48:	8888d83a 	srl	r4,r17,r2
 4019f4c:	00800804 	movi	r2,32
 4019f50:	18802126 	beq	r3,r2,4019fd8 <__divdf3+0x9ac>
 4019f54:	04001004 	movi	r16,64
 4019f58:	80c7c83a 	sub	r3,r16,r3
 4019f5c:	88e0983a 	sll	r16,r17,r3
 4019f60:	8504b03a 	or	r2,r16,r20
 4019f64:	1004c03a 	cmpne	r2,r2,zero
 4019f68:	2084b03a 	or	r2,r4,r2
 4019f6c:	144001cc 	andi	r17,r2,7
 4019f70:	88000d1e 	bne	r17,zero,4019fa8 <__divdf3+0x97c>
 4019f74:	0021883a 	mov	r16,zero
 4019f78:	102ad0fa 	srli	r21,r2,3
 4019f7c:	9900004c 	andi	r4,r19,1
 4019f80:	0005883a 	mov	r2,zero
 4019f84:	ac6ab03a 	or	r21,r21,r17
 4019f88:	003e0706 	br	40197a8 <__alt_mem_onchip_memory2_0+0xfc018528>
 4019f8c:	1007883a 	mov	r3,r2
 4019f90:	0023883a 	mov	r17,zero
 4019f94:	8820927a 	slli	r16,r17,9
 4019f98:	1805883a 	mov	r2,r3
 4019f9c:	8822977a 	slli	r17,r17,29
 4019fa0:	8020d33a 	srli	r16,r16,12
 4019fa4:	003ff406 	br	4019f78 <__alt_mem_onchip_memory2_0+0xfc018cf8>
 4019fa8:	10c003cc 	andi	r3,r2,15
 4019fac:	01000104 	movi	r4,4
 4019fb0:	193ff626 	beq	r3,r4,4019f8c <__alt_mem_onchip_memory2_0+0xfc018d0c>
 4019fb4:	0023883a 	mov	r17,zero
 4019fb8:	003fc806 	br	4019edc <__alt_mem_onchip_memory2_0+0xfc018c5c>
 4019fbc:	a8bfd136 	bltu	r21,r2,4019f04 <__alt_mem_onchip_memory2_0+0xfc018c84>
 4019fc0:	2823883a 	mov	r17,r5
 4019fc4:	003fa606 	br	4019e60 <__alt_mem_onchip_memory2_0+0xfc018be0>
 4019fc8:	d9800017 	ldw	r6,0(sp)
 4019fcc:	30bfd436 	bltu	r6,r2,4019f20 <__alt_mem_onchip_memory2_0+0xfc018ca0>
 4019fd0:	2829883a 	mov	r20,r5
 4019fd4:	003f6406 	br	4019d68 <__alt_mem_onchip_memory2_0+0xfc018ae8>
 4019fd8:	0021883a 	mov	r16,zero
 4019fdc:	003fe006 	br	4019f60 <__alt_mem_onchip_memory2_0+0xfc018ce0>
 4019fe0:	00800434 	movhi	r2,16
 4019fe4:	8c000234 	orhi	r16,r17,8
 4019fe8:	10bfffc4 	addi	r2,r2,-1
 4019fec:	e009883a 	mov	r4,fp
 4019ff0:	80a0703a 	and	r16,r16,r2
 4019ff4:	a02b883a 	mov	r21,r20
 4019ff8:	003e4e06 	br	4019934 <__alt_mem_onchip_memory2_0+0xfc0186b4>

04019ffc <__eqdf2>:
 4019ffc:	2804d53a 	srli	r2,r5,20
 401a000:	3806d53a 	srli	r3,r7,20
 401a004:	02000434 	movhi	r8,16
 401a008:	423fffc4 	addi	r8,r8,-1
 401a00c:	1081ffcc 	andi	r2,r2,2047
 401a010:	0281ffc4 	movi	r10,2047
 401a014:	2a12703a 	and	r9,r5,r8
 401a018:	18c1ffcc 	andi	r3,r3,2047
 401a01c:	3a10703a 	and	r8,r7,r8
 401a020:	280ad7fa 	srli	r5,r5,31
 401a024:	380ed7fa 	srli	r7,r7,31
 401a028:	12801026 	beq	r2,r10,401a06c <__eqdf2+0x70>
 401a02c:	0281ffc4 	movi	r10,2047
 401a030:	1a800a26 	beq	r3,r10,401a05c <__eqdf2+0x60>
 401a034:	10c00226 	beq	r2,r3,401a040 <__eqdf2+0x44>
 401a038:	00800044 	movi	r2,1
 401a03c:	f800283a 	ret
 401a040:	4a3ffd1e 	bne	r9,r8,401a038 <__alt_mem_onchip_memory2_0+0xfc018db8>
 401a044:	21bffc1e 	bne	r4,r6,401a038 <__alt_mem_onchip_memory2_0+0xfc018db8>
 401a048:	29c00c26 	beq	r5,r7,401a07c <__eqdf2+0x80>
 401a04c:	103ffa1e 	bne	r2,zero,401a038 <__alt_mem_onchip_memory2_0+0xfc018db8>
 401a050:	2244b03a 	or	r2,r4,r9
 401a054:	1004c03a 	cmpne	r2,r2,zero
 401a058:	f800283a 	ret
 401a05c:	3214b03a 	or	r10,r6,r8
 401a060:	503ff426 	beq	r10,zero,401a034 <__alt_mem_onchip_memory2_0+0xfc018db4>
 401a064:	00800044 	movi	r2,1
 401a068:	f800283a 	ret
 401a06c:	2254b03a 	or	r10,r4,r9
 401a070:	503fee26 	beq	r10,zero,401a02c <__alt_mem_onchip_memory2_0+0xfc018dac>
 401a074:	00800044 	movi	r2,1
 401a078:	f800283a 	ret
 401a07c:	0005883a 	mov	r2,zero
 401a080:	f800283a 	ret

0401a084 <__gedf2>:
 401a084:	2804d53a 	srli	r2,r5,20
 401a088:	3806d53a 	srli	r3,r7,20
 401a08c:	02000434 	movhi	r8,16
 401a090:	423fffc4 	addi	r8,r8,-1
 401a094:	1081ffcc 	andi	r2,r2,2047
 401a098:	0241ffc4 	movi	r9,2047
 401a09c:	2a14703a 	and	r10,r5,r8
 401a0a0:	18c1ffcc 	andi	r3,r3,2047
 401a0a4:	3a10703a 	and	r8,r7,r8
 401a0a8:	280ad7fa 	srli	r5,r5,31
 401a0ac:	380ed7fa 	srli	r7,r7,31
 401a0b0:	12401d26 	beq	r2,r9,401a128 <__gedf2+0xa4>
 401a0b4:	0241ffc4 	movi	r9,2047
 401a0b8:	1a401226 	beq	r3,r9,401a104 <__gedf2+0x80>
 401a0bc:	1000081e 	bne	r2,zero,401a0e0 <__gedf2+0x5c>
 401a0c0:	2296b03a 	or	r11,r4,r10
 401a0c4:	5813003a 	cmpeq	r9,r11,zero
 401a0c8:	1800091e 	bne	r3,zero,401a0f0 <__gedf2+0x6c>
 401a0cc:	3218b03a 	or	r12,r6,r8
 401a0d0:	6000071e 	bne	r12,zero,401a0f0 <__gedf2+0x6c>
 401a0d4:	0005883a 	mov	r2,zero
 401a0d8:	5800101e 	bne	r11,zero,401a11c <__gedf2+0x98>
 401a0dc:	f800283a 	ret
 401a0e0:	18000c1e 	bne	r3,zero,401a114 <__gedf2+0x90>
 401a0e4:	3212b03a 	or	r9,r6,r8
 401a0e8:	48000c26 	beq	r9,zero,401a11c <__gedf2+0x98>
 401a0ec:	0013883a 	mov	r9,zero
 401a0f0:	39c03fcc 	andi	r7,r7,255
 401a0f4:	48000826 	beq	r9,zero,401a118 <__gedf2+0x94>
 401a0f8:	38000926 	beq	r7,zero,401a120 <__gedf2+0x9c>
 401a0fc:	00800044 	movi	r2,1
 401a100:	f800283a 	ret
 401a104:	3212b03a 	or	r9,r6,r8
 401a108:	483fec26 	beq	r9,zero,401a0bc <__alt_mem_onchip_memory2_0+0xfc018e3c>
 401a10c:	00bfff84 	movi	r2,-2
 401a110:	f800283a 	ret
 401a114:	39c03fcc 	andi	r7,r7,255
 401a118:	29c00626 	beq	r5,r7,401a134 <__gedf2+0xb0>
 401a11c:	283ff726 	beq	r5,zero,401a0fc <__alt_mem_onchip_memory2_0+0xfc018e7c>
 401a120:	00bfffc4 	movi	r2,-1
 401a124:	f800283a 	ret
 401a128:	2292b03a 	or	r9,r4,r10
 401a12c:	483fe126 	beq	r9,zero,401a0b4 <__alt_mem_onchip_memory2_0+0xfc018e34>
 401a130:	003ff606 	br	401a10c <__alt_mem_onchip_memory2_0+0xfc018e8c>
 401a134:	18bff916 	blt	r3,r2,401a11c <__alt_mem_onchip_memory2_0+0xfc018e9c>
 401a138:	10c00316 	blt	r2,r3,401a148 <__gedf2+0xc4>
 401a13c:	42bff736 	bltu	r8,r10,401a11c <__alt_mem_onchip_memory2_0+0xfc018e9c>
 401a140:	52000326 	beq	r10,r8,401a150 <__gedf2+0xcc>
 401a144:	5200042e 	bgeu	r10,r8,401a158 <__gedf2+0xd4>
 401a148:	283fec1e 	bne	r5,zero,401a0fc <__alt_mem_onchip_memory2_0+0xfc018e7c>
 401a14c:	003ff406 	br	401a120 <__alt_mem_onchip_memory2_0+0xfc018ea0>
 401a150:	313ff236 	bltu	r6,r4,401a11c <__alt_mem_onchip_memory2_0+0xfc018e9c>
 401a154:	21bffc36 	bltu	r4,r6,401a148 <__alt_mem_onchip_memory2_0+0xfc018ec8>
 401a158:	0005883a 	mov	r2,zero
 401a15c:	f800283a 	ret

0401a160 <__ledf2>:
 401a160:	2804d53a 	srli	r2,r5,20
 401a164:	3810d53a 	srli	r8,r7,20
 401a168:	00c00434 	movhi	r3,16
 401a16c:	18ffffc4 	addi	r3,r3,-1
 401a170:	1081ffcc 	andi	r2,r2,2047
 401a174:	0241ffc4 	movi	r9,2047
 401a178:	28d4703a 	and	r10,r5,r3
 401a17c:	4201ffcc 	andi	r8,r8,2047
 401a180:	38c6703a 	and	r3,r7,r3
 401a184:	280ad7fa 	srli	r5,r5,31
 401a188:	380ed7fa 	srli	r7,r7,31
 401a18c:	12401f26 	beq	r2,r9,401a20c <__ledf2+0xac>
 401a190:	0241ffc4 	movi	r9,2047
 401a194:	42401426 	beq	r8,r9,401a1e8 <__ledf2+0x88>
 401a198:	1000091e 	bne	r2,zero,401a1c0 <__ledf2+0x60>
 401a19c:	2296b03a 	or	r11,r4,r10
 401a1a0:	5813003a 	cmpeq	r9,r11,zero
 401a1a4:	29403fcc 	andi	r5,r5,255
 401a1a8:	40000a1e 	bne	r8,zero,401a1d4 <__ledf2+0x74>
 401a1ac:	30d8b03a 	or	r12,r6,r3
 401a1b0:	6000081e 	bne	r12,zero,401a1d4 <__ledf2+0x74>
 401a1b4:	0005883a 	mov	r2,zero
 401a1b8:	5800111e 	bne	r11,zero,401a200 <__ledf2+0xa0>
 401a1bc:	f800283a 	ret
 401a1c0:	29403fcc 	andi	r5,r5,255
 401a1c4:	40000c1e 	bne	r8,zero,401a1f8 <__ledf2+0x98>
 401a1c8:	30d2b03a 	or	r9,r6,r3
 401a1cc:	48000c26 	beq	r9,zero,401a200 <__ledf2+0xa0>
 401a1d0:	0013883a 	mov	r9,zero
 401a1d4:	39c03fcc 	andi	r7,r7,255
 401a1d8:	48000826 	beq	r9,zero,401a1fc <__ledf2+0x9c>
 401a1dc:	38001126 	beq	r7,zero,401a224 <__ledf2+0xc4>
 401a1e0:	00800044 	movi	r2,1
 401a1e4:	f800283a 	ret
 401a1e8:	30d2b03a 	or	r9,r6,r3
 401a1ec:	483fea26 	beq	r9,zero,401a198 <__alt_mem_onchip_memory2_0+0xfc018f18>
 401a1f0:	00800084 	movi	r2,2
 401a1f4:	f800283a 	ret
 401a1f8:	39c03fcc 	andi	r7,r7,255
 401a1fc:	39400726 	beq	r7,r5,401a21c <__ledf2+0xbc>
 401a200:	2800081e 	bne	r5,zero,401a224 <__ledf2+0xc4>
 401a204:	00800044 	movi	r2,1
 401a208:	f800283a 	ret
 401a20c:	2292b03a 	or	r9,r4,r10
 401a210:	483fdf26 	beq	r9,zero,401a190 <__alt_mem_onchip_memory2_0+0xfc018f10>
 401a214:	00800084 	movi	r2,2
 401a218:	f800283a 	ret
 401a21c:	4080030e 	bge	r8,r2,401a22c <__ledf2+0xcc>
 401a220:	383fef26 	beq	r7,zero,401a1e0 <__alt_mem_onchip_memory2_0+0xfc018f60>
 401a224:	00bfffc4 	movi	r2,-1
 401a228:	f800283a 	ret
 401a22c:	123feb16 	blt	r2,r8,401a1dc <__alt_mem_onchip_memory2_0+0xfc018f5c>
 401a230:	1abff336 	bltu	r3,r10,401a200 <__alt_mem_onchip_memory2_0+0xfc018f80>
 401a234:	50c00326 	beq	r10,r3,401a244 <__ledf2+0xe4>
 401a238:	50c0042e 	bgeu	r10,r3,401a24c <__ledf2+0xec>
 401a23c:	283fe81e 	bne	r5,zero,401a1e0 <__alt_mem_onchip_memory2_0+0xfc018f60>
 401a240:	003ff806 	br	401a224 <__alt_mem_onchip_memory2_0+0xfc018fa4>
 401a244:	313fee36 	bltu	r6,r4,401a200 <__alt_mem_onchip_memory2_0+0xfc018f80>
 401a248:	21bffc36 	bltu	r4,r6,401a23c <__alt_mem_onchip_memory2_0+0xfc018fbc>
 401a24c:	0005883a 	mov	r2,zero
 401a250:	f800283a 	ret

0401a254 <__muldf3>:
 401a254:	deffee04 	addi	sp,sp,-72
 401a258:	dd000c15 	stw	r20,48(sp)
 401a25c:	2828d53a 	srli	r20,r5,20
 401a260:	ddc00f15 	stw	r23,60(sp)
 401a264:	282ed7fa 	srli	r23,r5,31
 401a268:	dc000815 	stw	r16,32(sp)
 401a26c:	04000434 	movhi	r16,16
 401a270:	dcc00b15 	stw	r19,44(sp)
 401a274:	843fffc4 	addi	r16,r16,-1
 401a278:	dfc01115 	stw	ra,68(sp)
 401a27c:	df001015 	stw	fp,64(sp)
 401a280:	dd800e15 	stw	r22,56(sp)
 401a284:	dd400d15 	stw	r21,52(sp)
 401a288:	dc800a15 	stw	r18,40(sp)
 401a28c:	dc400915 	stw	r17,36(sp)
 401a290:	a501ffcc 	andi	r20,r20,2047
 401a294:	2c20703a 	and	r16,r5,r16
 401a298:	b827883a 	mov	r19,r23
 401a29c:	ba403fcc 	andi	r9,r23,255
 401a2a0:	a0006026 	beq	r20,zero,401a424 <__muldf3+0x1d0>
 401a2a4:	0081ffc4 	movi	r2,2047
 401a2a8:	202d883a 	mov	r22,r4
 401a2ac:	a0803626 	beq	r20,r2,401a388 <__muldf3+0x134>
 401a2b0:	84000434 	orhi	r16,r16,16
 401a2b4:	200ad77a 	srli	r5,r4,29
 401a2b8:	800490fa 	slli	r2,r16,3
 401a2bc:	202c90fa 	slli	r22,r4,3
 401a2c0:	a53f0044 	addi	r20,r20,-1023
 401a2c4:	28a0b03a 	or	r16,r5,r2
 401a2c8:	002b883a 	mov	r21,zero
 401a2cc:	000b883a 	mov	r5,zero
 401a2d0:	3804d53a 	srli	r2,r7,20
 401a2d4:	3838d7fa 	srli	fp,r7,31
 401a2d8:	04400434 	movhi	r17,16
 401a2dc:	8c7fffc4 	addi	r17,r17,-1
 401a2e0:	1081ffcc 	andi	r2,r2,2047
 401a2e4:	3025883a 	mov	r18,r6
 401a2e8:	3c62703a 	and	r17,r7,r17
 401a2ec:	e2803fcc 	andi	r10,fp,255
 401a2f0:	10006d26 	beq	r2,zero,401a4a8 <__muldf3+0x254>
 401a2f4:	00c1ffc4 	movi	r3,2047
 401a2f8:	10c06526 	beq	r2,r3,401a490 <__muldf3+0x23c>
 401a2fc:	8c400434 	orhi	r17,r17,16
 401a300:	300ed77a 	srli	r7,r6,29
 401a304:	880690fa 	slli	r3,r17,3
 401a308:	302490fa 	slli	r18,r6,3
 401a30c:	10bf0044 	addi	r2,r2,-1023
 401a310:	38e2b03a 	or	r17,r7,r3
 401a314:	000f883a 	mov	r7,zero
 401a318:	a087883a 	add	r3,r20,r2
 401a31c:	010003c4 	movi	r4,15
 401a320:	3d44b03a 	or	r2,r7,r21
 401a324:	e5ccf03a 	xor	r6,fp,r23
 401a328:	1a000044 	addi	r8,r3,1
 401a32c:	20809b36 	bltu	r4,r2,401a59c <__muldf3+0x348>
 401a330:	100490ba 	slli	r2,r2,2
 401a334:	010100b4 	movhi	r4,1026
 401a338:	2128d204 	addi	r4,r4,-23736
 401a33c:	1105883a 	add	r2,r2,r4
 401a340:	10800017 	ldw	r2,0(r2)
 401a344:	1000683a 	jmp	r2
 401a348:	0401a59c 	xori	r16,zero,1686
 401a34c:	0401a3a8 	cmpgeui	r16,zero,1678
 401a350:	0401a3a8 	cmpgeui	r16,zero,1678
 401a354:	0401a3a4 	muli	r16,zero,1678
 401a358:	0401a578 	rdprs	r16,zero,1685
 401a35c:	0401a578 	rdprs	r16,zero,1685
 401a360:	0401a560 	cmpeqi	r16,zero,1685
 401a364:	0401a3a4 	muli	r16,zero,1678
 401a368:	0401a578 	rdprs	r16,zero,1685
 401a36c:	0401a560 	cmpeqi	r16,zero,1685
 401a370:	0401a578 	rdprs	r16,zero,1685
 401a374:	0401a3a4 	muli	r16,zero,1678
 401a378:	0401a588 	cmpgei	r16,zero,1686
 401a37c:	0401a588 	cmpgei	r16,zero,1686
 401a380:	0401a588 	cmpgei	r16,zero,1686
 401a384:	0401a8e8 	cmpgeui	r16,zero,1699
 401a388:	2404b03a 	or	r2,r4,r16
 401a38c:	1000711e 	bne	r2,zero,401a554 <__muldf3+0x300>
 401a390:	05400204 	movi	r21,8
 401a394:	0021883a 	mov	r16,zero
 401a398:	002d883a 	mov	r22,zero
 401a39c:	01400084 	movi	r5,2
 401a3a0:	003fcb06 	br	401a2d0 <__alt_mem_onchip_memory2_0+0xfc019050>
 401a3a4:	500d883a 	mov	r6,r10
 401a3a8:	00800084 	movi	r2,2
 401a3ac:	38805926 	beq	r7,r2,401a514 <__muldf3+0x2c0>
 401a3b0:	008000c4 	movi	r2,3
 401a3b4:	3881bb26 	beq	r7,r2,401aaa4 <__muldf3+0x850>
 401a3b8:	00800044 	movi	r2,1
 401a3bc:	3881961e 	bne	r7,r2,401aa18 <__muldf3+0x7c4>
 401a3c0:	3027883a 	mov	r19,r6
 401a3c4:	0005883a 	mov	r2,zero
 401a3c8:	0021883a 	mov	r16,zero
 401a3cc:	002d883a 	mov	r22,zero
 401a3d0:	1004953a 	slli	r2,r2,20
 401a3d4:	98c03fcc 	andi	r3,r19,255
 401a3d8:	04400434 	movhi	r17,16
 401a3dc:	8c7fffc4 	addi	r17,r17,-1
 401a3e0:	180697fa 	slli	r3,r3,31
 401a3e4:	8460703a 	and	r16,r16,r17
 401a3e8:	80a0b03a 	or	r16,r16,r2
 401a3ec:	80c6b03a 	or	r3,r16,r3
 401a3f0:	b005883a 	mov	r2,r22
 401a3f4:	dfc01117 	ldw	ra,68(sp)
 401a3f8:	df001017 	ldw	fp,64(sp)
 401a3fc:	ddc00f17 	ldw	r23,60(sp)
 401a400:	dd800e17 	ldw	r22,56(sp)
 401a404:	dd400d17 	ldw	r21,52(sp)
 401a408:	dd000c17 	ldw	r20,48(sp)
 401a40c:	dcc00b17 	ldw	r19,44(sp)
 401a410:	dc800a17 	ldw	r18,40(sp)
 401a414:	dc400917 	ldw	r17,36(sp)
 401a418:	dc000817 	ldw	r16,32(sp)
 401a41c:	dec01204 	addi	sp,sp,72
 401a420:	f800283a 	ret
 401a424:	2404b03a 	or	r2,r4,r16
 401a428:	202b883a 	mov	r21,r4
 401a42c:	10004426 	beq	r2,zero,401a540 <__muldf3+0x2ec>
 401a430:	80015126 	beq	r16,zero,401a978 <__muldf3+0x724>
 401a434:	8009883a 	mov	r4,r16
 401a438:	d9800715 	stw	r6,28(sp)
 401a43c:	d9c00215 	stw	r7,8(sp)
 401a440:	da400415 	stw	r9,16(sp)
 401a444:	400e33c0 	call	400e33c <__clzsi2>
 401a448:	d9800717 	ldw	r6,28(sp)
 401a44c:	d9c00217 	ldw	r7,8(sp)
 401a450:	da400417 	ldw	r9,16(sp)
 401a454:	113ffd44 	addi	r4,r2,-11
 401a458:	00c00704 	movi	r3,28
 401a45c:	19014216 	blt	r3,r4,401a968 <__muldf3+0x714>
 401a460:	00c00744 	movi	r3,29
 401a464:	15bffe04 	addi	r22,r2,-8
 401a468:	1907c83a 	sub	r3,r3,r4
 401a46c:	85a0983a 	sll	r16,r16,r22
 401a470:	a8c6d83a 	srl	r3,r21,r3
 401a474:	adac983a 	sll	r22,r21,r22
 401a478:	1c20b03a 	or	r16,r3,r16
 401a47c:	1080fcc4 	addi	r2,r2,1011
 401a480:	00a9c83a 	sub	r20,zero,r2
 401a484:	002b883a 	mov	r21,zero
 401a488:	000b883a 	mov	r5,zero
 401a48c:	003f9006 	br	401a2d0 <__alt_mem_onchip_memory2_0+0xfc019050>
 401a490:	3446b03a 	or	r3,r6,r17
 401a494:	1800281e 	bne	r3,zero,401a538 <__muldf3+0x2e4>
 401a498:	0023883a 	mov	r17,zero
 401a49c:	0025883a 	mov	r18,zero
 401a4a0:	01c00084 	movi	r7,2
 401a4a4:	003f9c06 	br	401a318 <__alt_mem_onchip_memory2_0+0xfc019098>
 401a4a8:	3446b03a 	or	r3,r6,r17
 401a4ac:	18001e26 	beq	r3,zero,401a528 <__muldf3+0x2d4>
 401a4b0:	88012126 	beq	r17,zero,401a938 <__muldf3+0x6e4>
 401a4b4:	8809883a 	mov	r4,r17
 401a4b8:	d9400215 	stw	r5,8(sp)
 401a4bc:	d9800715 	stw	r6,28(sp)
 401a4c0:	da400415 	stw	r9,16(sp)
 401a4c4:	da800315 	stw	r10,12(sp)
 401a4c8:	400e33c0 	call	400e33c <__clzsi2>
 401a4cc:	d9400217 	ldw	r5,8(sp)
 401a4d0:	d9800717 	ldw	r6,28(sp)
 401a4d4:	da400417 	ldw	r9,16(sp)
 401a4d8:	da800317 	ldw	r10,12(sp)
 401a4dc:	113ffd44 	addi	r4,r2,-11
 401a4e0:	00c00704 	movi	r3,28
 401a4e4:	19011016 	blt	r3,r4,401a928 <__muldf3+0x6d4>
 401a4e8:	00c00744 	movi	r3,29
 401a4ec:	14bffe04 	addi	r18,r2,-8
 401a4f0:	1907c83a 	sub	r3,r3,r4
 401a4f4:	8ca2983a 	sll	r17,r17,r18
 401a4f8:	30c6d83a 	srl	r3,r6,r3
 401a4fc:	34a4983a 	sll	r18,r6,r18
 401a500:	1c62b03a 	or	r17,r3,r17
 401a504:	1080fcc4 	addi	r2,r2,1011
 401a508:	0085c83a 	sub	r2,zero,r2
 401a50c:	000f883a 	mov	r7,zero
 401a510:	003f8106 	br	401a318 <__alt_mem_onchip_memory2_0+0xfc019098>
 401a514:	3027883a 	mov	r19,r6
 401a518:	0081ffc4 	movi	r2,2047
 401a51c:	0021883a 	mov	r16,zero
 401a520:	002d883a 	mov	r22,zero
 401a524:	003faa06 	br	401a3d0 <__alt_mem_onchip_memory2_0+0xfc019150>
 401a528:	0023883a 	mov	r17,zero
 401a52c:	0025883a 	mov	r18,zero
 401a530:	01c00044 	movi	r7,1
 401a534:	003f7806 	br	401a318 <__alt_mem_onchip_memory2_0+0xfc019098>
 401a538:	01c000c4 	movi	r7,3
 401a53c:	003f7606 	br	401a318 <__alt_mem_onchip_memory2_0+0xfc019098>
 401a540:	05400104 	movi	r21,4
 401a544:	0021883a 	mov	r16,zero
 401a548:	002d883a 	mov	r22,zero
 401a54c:	01400044 	movi	r5,1
 401a550:	003f5f06 	br	401a2d0 <__alt_mem_onchip_memory2_0+0xfc019050>
 401a554:	05400304 	movi	r21,12
 401a558:	014000c4 	movi	r5,3
 401a55c:	003f5c06 	br	401a2d0 <__alt_mem_onchip_memory2_0+0xfc019050>
 401a560:	04000434 	movhi	r16,16
 401a564:	0027883a 	mov	r19,zero
 401a568:	843fffc4 	addi	r16,r16,-1
 401a56c:	05bfffc4 	movi	r22,-1
 401a570:	0081ffc4 	movi	r2,2047
 401a574:	003f9606 	br	401a3d0 <__alt_mem_onchip_memory2_0+0xfc019150>
 401a578:	8023883a 	mov	r17,r16
 401a57c:	b025883a 	mov	r18,r22
 401a580:	280f883a 	mov	r7,r5
 401a584:	003f8806 	br	401a3a8 <__alt_mem_onchip_memory2_0+0xfc019128>
 401a588:	8023883a 	mov	r17,r16
 401a58c:	b025883a 	mov	r18,r22
 401a590:	480d883a 	mov	r6,r9
 401a594:	280f883a 	mov	r7,r5
 401a598:	003f8306 	br	401a3a8 <__alt_mem_onchip_memory2_0+0xfc019128>
 401a59c:	b026d43a 	srli	r19,r22,16
 401a5a0:	902ed43a 	srli	r23,r18,16
 401a5a4:	b5bfffcc 	andi	r22,r22,65535
 401a5a8:	94bfffcc 	andi	r18,r18,65535
 401a5ac:	b00b883a 	mov	r5,r22
 401a5b0:	9009883a 	mov	r4,r18
 401a5b4:	d8c00515 	stw	r3,20(sp)
 401a5b8:	d9800715 	stw	r6,28(sp)
 401a5bc:	da000615 	stw	r8,24(sp)
 401a5c0:	400d2c40 	call	400d2c4 <__mulsi3>
 401a5c4:	980b883a 	mov	r5,r19
 401a5c8:	9009883a 	mov	r4,r18
 401a5cc:	1029883a 	mov	r20,r2
 401a5d0:	400d2c40 	call	400d2c4 <__mulsi3>
 401a5d4:	b80b883a 	mov	r5,r23
 401a5d8:	9809883a 	mov	r4,r19
 401a5dc:	102b883a 	mov	r21,r2
 401a5e0:	400d2c40 	call	400d2c4 <__mulsi3>
 401a5e4:	b809883a 	mov	r4,r23
 401a5e8:	b00b883a 	mov	r5,r22
 401a5ec:	1039883a 	mov	fp,r2
 401a5f0:	400d2c40 	call	400d2c4 <__mulsi3>
 401a5f4:	a008d43a 	srli	r4,r20,16
 401a5f8:	1545883a 	add	r2,r2,r21
 401a5fc:	d8c00517 	ldw	r3,20(sp)
 401a600:	2085883a 	add	r2,r4,r2
 401a604:	d9800717 	ldw	r6,28(sp)
 401a608:	da000617 	ldw	r8,24(sp)
 401a60c:	1540022e 	bgeu	r2,r21,401a618 <__muldf3+0x3c4>
 401a610:	01000074 	movhi	r4,1
 401a614:	e139883a 	add	fp,fp,r4
 401a618:	100e943a 	slli	r7,r2,16
 401a61c:	1004d43a 	srli	r2,r2,16
 401a620:	882ad43a 	srli	r21,r17,16
 401a624:	a53fffcc 	andi	r20,r20,65535
 401a628:	8c7fffcc 	andi	r17,r17,65535
 401a62c:	3d29883a 	add	r20,r7,r20
 401a630:	b00b883a 	mov	r5,r22
 401a634:	8809883a 	mov	r4,r17
 401a638:	d8c00515 	stw	r3,20(sp)
 401a63c:	d9800715 	stw	r6,28(sp)
 401a640:	da000615 	stw	r8,24(sp)
 401a644:	dd000115 	stw	r20,4(sp)
 401a648:	d8800015 	stw	r2,0(sp)
 401a64c:	400d2c40 	call	400d2c4 <__mulsi3>
 401a650:	980b883a 	mov	r5,r19
 401a654:	8809883a 	mov	r4,r17
 401a658:	d8800215 	stw	r2,8(sp)
 401a65c:	400d2c40 	call	400d2c4 <__mulsi3>
 401a660:	9809883a 	mov	r4,r19
 401a664:	a80b883a 	mov	r5,r21
 401a668:	1029883a 	mov	r20,r2
 401a66c:	400d2c40 	call	400d2c4 <__mulsi3>
 401a670:	b00b883a 	mov	r5,r22
 401a674:	a809883a 	mov	r4,r21
 401a678:	d8800415 	stw	r2,16(sp)
 401a67c:	400d2c40 	call	400d2c4 <__mulsi3>
 401a680:	d9c00217 	ldw	r7,8(sp)
 401a684:	1505883a 	add	r2,r2,r20
 401a688:	d8c00517 	ldw	r3,20(sp)
 401a68c:	3826d43a 	srli	r19,r7,16
 401a690:	d9800717 	ldw	r6,28(sp)
 401a694:	da000617 	ldw	r8,24(sp)
 401a698:	9885883a 	add	r2,r19,r2
 401a69c:	da400417 	ldw	r9,16(sp)
 401a6a0:	1500022e 	bgeu	r2,r20,401a6ac <__muldf3+0x458>
 401a6a4:	01000074 	movhi	r4,1
 401a6a8:	4913883a 	add	r9,r9,r4
 401a6ac:	1028d43a 	srli	r20,r2,16
 401a6b0:	1004943a 	slli	r2,r2,16
 401a6b4:	802cd43a 	srli	r22,r16,16
 401a6b8:	843fffcc 	andi	r16,r16,65535
 401a6bc:	3cffffcc 	andi	r19,r7,65535
 401a6c0:	9009883a 	mov	r4,r18
 401a6c4:	800b883a 	mov	r5,r16
 401a6c8:	a269883a 	add	r20,r20,r9
 401a6cc:	d8c00515 	stw	r3,20(sp)
 401a6d0:	d9800715 	stw	r6,28(sp)
 401a6d4:	da000615 	stw	r8,24(sp)
 401a6d8:	14e7883a 	add	r19,r2,r19
 401a6dc:	400d2c40 	call	400d2c4 <__mulsi3>
 401a6e0:	9009883a 	mov	r4,r18
 401a6e4:	b00b883a 	mov	r5,r22
 401a6e8:	d8800315 	stw	r2,12(sp)
 401a6ec:	400d2c40 	call	400d2c4 <__mulsi3>
 401a6f0:	b809883a 	mov	r4,r23
 401a6f4:	b00b883a 	mov	r5,r22
 401a6f8:	d8800215 	stw	r2,8(sp)
 401a6fc:	400d2c40 	call	400d2c4 <__mulsi3>
 401a700:	b80b883a 	mov	r5,r23
 401a704:	8009883a 	mov	r4,r16
 401a708:	d8800415 	stw	r2,16(sp)
 401a70c:	400d2c40 	call	400d2c4 <__mulsi3>
 401a710:	da800317 	ldw	r10,12(sp)
 401a714:	d9c00217 	ldw	r7,8(sp)
 401a718:	d9000017 	ldw	r4,0(sp)
 401a71c:	502ed43a 	srli	r23,r10,16
 401a720:	11c5883a 	add	r2,r2,r7
 401a724:	24e5883a 	add	r18,r4,r19
 401a728:	b885883a 	add	r2,r23,r2
 401a72c:	d8c00517 	ldw	r3,20(sp)
 401a730:	d9800717 	ldw	r6,28(sp)
 401a734:	da000617 	ldw	r8,24(sp)
 401a738:	da400417 	ldw	r9,16(sp)
 401a73c:	11c0022e 	bgeu	r2,r7,401a748 <__muldf3+0x4f4>
 401a740:	01000074 	movhi	r4,1
 401a744:	4913883a 	add	r9,r9,r4
 401a748:	100ed43a 	srli	r7,r2,16
 401a74c:	1004943a 	slli	r2,r2,16
 401a750:	55ffffcc 	andi	r23,r10,65535
 401a754:	3a53883a 	add	r9,r7,r9
 401a758:	8809883a 	mov	r4,r17
 401a75c:	800b883a 	mov	r5,r16
 401a760:	d8c00515 	stw	r3,20(sp)
 401a764:	d9800715 	stw	r6,28(sp)
 401a768:	da000615 	stw	r8,24(sp)
 401a76c:	da400415 	stw	r9,16(sp)
 401a770:	15ef883a 	add	r23,r2,r23
 401a774:	400d2c40 	call	400d2c4 <__mulsi3>
 401a778:	8809883a 	mov	r4,r17
 401a77c:	b00b883a 	mov	r5,r22
 401a780:	d8800215 	stw	r2,8(sp)
 401a784:	400d2c40 	call	400d2c4 <__mulsi3>
 401a788:	b00b883a 	mov	r5,r22
 401a78c:	a809883a 	mov	r4,r21
 401a790:	d8800315 	stw	r2,12(sp)
 401a794:	400d2c40 	call	400d2c4 <__mulsi3>
 401a798:	8009883a 	mov	r4,r16
 401a79c:	a80b883a 	mov	r5,r21
 401a7a0:	1023883a 	mov	r17,r2
 401a7a4:	400d2c40 	call	400d2c4 <__mulsi3>
 401a7a8:	d9c00217 	ldw	r7,8(sp)
 401a7ac:	da800317 	ldw	r10,12(sp)
 401a7b0:	d8c00517 	ldw	r3,20(sp)
 401a7b4:	3808d43a 	srli	r4,r7,16
 401a7b8:	1285883a 	add	r2,r2,r10
 401a7bc:	d9800717 	ldw	r6,28(sp)
 401a7c0:	2085883a 	add	r2,r4,r2
 401a7c4:	da000617 	ldw	r8,24(sp)
 401a7c8:	da400417 	ldw	r9,16(sp)
 401a7cc:	1280022e 	bgeu	r2,r10,401a7d8 <__muldf3+0x584>
 401a7d0:	01000074 	movhi	r4,1
 401a7d4:	8923883a 	add	r17,r17,r4
 401a7d8:	1008943a 	slli	r4,r2,16
 401a7dc:	39ffffcc 	andi	r7,r7,65535
 401a7e0:	e4b9883a 	add	fp,fp,r18
 401a7e4:	21cf883a 	add	r7,r4,r7
 401a7e8:	e4e7803a 	cmpltu	r19,fp,r19
 401a7ec:	3d0f883a 	add	r7,r7,r20
 401a7f0:	bf39883a 	add	fp,r23,fp
 401a7f4:	99c9883a 	add	r4,r19,r7
 401a7f8:	e5ef803a 	cmpltu	r23,fp,r23
 401a7fc:	490b883a 	add	r5,r9,r4
 401a800:	1004d43a 	srli	r2,r2,16
 401a804:	b965883a 	add	r18,r23,r5
 401a808:	24c9803a 	cmpltu	r4,r4,r19
 401a80c:	3d29803a 	cmpltu	r20,r7,r20
 401a810:	a128b03a 	or	r20,r20,r4
 401a814:	95ef803a 	cmpltu	r23,r18,r23
 401a818:	2a53803a 	cmpltu	r9,r5,r9
 401a81c:	a0a9883a 	add	r20,r20,r2
 401a820:	4deeb03a 	or	r23,r9,r23
 401a824:	a5ef883a 	add	r23,r20,r23
 401a828:	bc63883a 	add	r17,r23,r17
 401a82c:	e004927a 	slli	r2,fp,9
 401a830:	d9000117 	ldw	r4,4(sp)
 401a834:	882e927a 	slli	r23,r17,9
 401a838:	9022d5fa 	srli	r17,r18,23
 401a83c:	e038d5fa 	srli	fp,fp,23
 401a840:	1104b03a 	or	r2,r2,r4
 401a844:	9024927a 	slli	r18,r18,9
 401a848:	1004c03a 	cmpne	r2,r2,zero
 401a84c:	bc62b03a 	or	r17,r23,r17
 401a850:	1738b03a 	or	fp,r2,fp
 401a854:	8880402c 	andhi	r2,r17,256
 401a858:	e4a4b03a 	or	r18,fp,r18
 401a85c:	10000726 	beq	r2,zero,401a87c <__muldf3+0x628>
 401a860:	9006d07a 	srli	r3,r18,1
 401a864:	880497fa 	slli	r2,r17,31
 401a868:	9480004c 	andi	r18,r18,1
 401a86c:	8822d07a 	srli	r17,r17,1
 401a870:	1ca4b03a 	or	r18,r3,r18
 401a874:	14a4b03a 	or	r18,r2,r18
 401a878:	4007883a 	mov	r3,r8
 401a87c:	1880ffc4 	addi	r2,r3,1023
 401a880:	0080460e 	bge	zero,r2,401a99c <__muldf3+0x748>
 401a884:	910001cc 	andi	r4,r18,7
 401a888:	20000726 	beq	r4,zero,401a8a8 <__muldf3+0x654>
 401a88c:	910003cc 	andi	r4,r18,15
 401a890:	01400104 	movi	r5,4
 401a894:	21400426 	beq	r4,r5,401a8a8 <__muldf3+0x654>
 401a898:	9149883a 	add	r4,r18,r5
 401a89c:	24a5803a 	cmpltu	r18,r4,r18
 401a8a0:	8ca3883a 	add	r17,r17,r18
 401a8a4:	2025883a 	mov	r18,r4
 401a8a8:	8900402c 	andhi	r4,r17,256
 401a8ac:	20000426 	beq	r4,zero,401a8c0 <__muldf3+0x66c>
 401a8b0:	18810004 	addi	r2,r3,1024
 401a8b4:	00ffc034 	movhi	r3,65280
 401a8b8:	18ffffc4 	addi	r3,r3,-1
 401a8bc:	88e2703a 	and	r17,r17,r3
 401a8c0:	00c1ff84 	movi	r3,2046
 401a8c4:	18bf1316 	blt	r3,r2,401a514 <__alt_mem_onchip_memory2_0+0xfc019294>
 401a8c8:	882c977a 	slli	r22,r17,29
 401a8cc:	9024d0fa 	srli	r18,r18,3
 401a8d0:	8822927a 	slli	r17,r17,9
 401a8d4:	1081ffcc 	andi	r2,r2,2047
 401a8d8:	b4acb03a 	or	r22,r22,r18
 401a8dc:	8820d33a 	srli	r16,r17,12
 401a8e0:	3027883a 	mov	r19,r6
 401a8e4:	003eba06 	br	401a3d0 <__alt_mem_onchip_memory2_0+0xfc019150>
 401a8e8:	8080022c 	andhi	r2,r16,8
 401a8ec:	10000926 	beq	r2,zero,401a914 <__muldf3+0x6c0>
 401a8f0:	8880022c 	andhi	r2,r17,8
 401a8f4:	1000071e 	bne	r2,zero,401a914 <__muldf3+0x6c0>
 401a8f8:	00800434 	movhi	r2,16
 401a8fc:	8c000234 	orhi	r16,r17,8
 401a900:	10bfffc4 	addi	r2,r2,-1
 401a904:	e027883a 	mov	r19,fp
 401a908:	80a0703a 	and	r16,r16,r2
 401a90c:	902d883a 	mov	r22,r18
 401a910:	003f1706 	br	401a570 <__alt_mem_onchip_memory2_0+0xfc0192f0>
 401a914:	00800434 	movhi	r2,16
 401a918:	84000234 	orhi	r16,r16,8
 401a91c:	10bfffc4 	addi	r2,r2,-1
 401a920:	80a0703a 	and	r16,r16,r2
 401a924:	003f1206 	br	401a570 <__alt_mem_onchip_memory2_0+0xfc0192f0>
 401a928:	147ff604 	addi	r17,r2,-40
 401a92c:	3462983a 	sll	r17,r6,r17
 401a930:	0025883a 	mov	r18,zero
 401a934:	003ef306 	br	401a504 <__alt_mem_onchip_memory2_0+0xfc019284>
 401a938:	3009883a 	mov	r4,r6
 401a93c:	d9400215 	stw	r5,8(sp)
 401a940:	d9800715 	stw	r6,28(sp)
 401a944:	da400415 	stw	r9,16(sp)
 401a948:	da800315 	stw	r10,12(sp)
 401a94c:	400e33c0 	call	400e33c <__clzsi2>
 401a950:	10800804 	addi	r2,r2,32
 401a954:	da800317 	ldw	r10,12(sp)
 401a958:	da400417 	ldw	r9,16(sp)
 401a95c:	d9800717 	ldw	r6,28(sp)
 401a960:	d9400217 	ldw	r5,8(sp)
 401a964:	003edd06 	br	401a4dc <__alt_mem_onchip_memory2_0+0xfc01925c>
 401a968:	143ff604 	addi	r16,r2,-40
 401a96c:	ac20983a 	sll	r16,r21,r16
 401a970:	002d883a 	mov	r22,zero
 401a974:	003ec106 	br	401a47c <__alt_mem_onchip_memory2_0+0xfc0191fc>
 401a978:	d9800715 	stw	r6,28(sp)
 401a97c:	d9c00215 	stw	r7,8(sp)
 401a980:	da400415 	stw	r9,16(sp)
 401a984:	400e33c0 	call	400e33c <__clzsi2>
 401a988:	10800804 	addi	r2,r2,32
 401a98c:	da400417 	ldw	r9,16(sp)
 401a990:	d9c00217 	ldw	r7,8(sp)
 401a994:	d9800717 	ldw	r6,28(sp)
 401a998:	003eae06 	br	401a454 <__alt_mem_onchip_memory2_0+0xfc0191d4>
 401a99c:	00c00044 	movi	r3,1
 401a9a0:	1887c83a 	sub	r3,r3,r2
 401a9a4:	01000e04 	movi	r4,56
 401a9a8:	20fe8516 	blt	r4,r3,401a3c0 <__alt_mem_onchip_memory2_0+0xfc019140>
 401a9ac:	010007c4 	movi	r4,31
 401a9b0:	20c01b16 	blt	r4,r3,401aa20 <__muldf3+0x7cc>
 401a9b4:	00800804 	movi	r2,32
 401a9b8:	10c5c83a 	sub	r2,r2,r3
 401a9bc:	888a983a 	sll	r5,r17,r2
 401a9c0:	90c8d83a 	srl	r4,r18,r3
 401a9c4:	9084983a 	sll	r2,r18,r2
 401a9c8:	88e2d83a 	srl	r17,r17,r3
 401a9cc:	2906b03a 	or	r3,r5,r4
 401a9d0:	1004c03a 	cmpne	r2,r2,zero
 401a9d4:	1886b03a 	or	r3,r3,r2
 401a9d8:	188001cc 	andi	r2,r3,7
 401a9dc:	10000726 	beq	r2,zero,401a9fc <__muldf3+0x7a8>
 401a9e0:	188003cc 	andi	r2,r3,15
 401a9e4:	01000104 	movi	r4,4
 401a9e8:	11000426 	beq	r2,r4,401a9fc <__muldf3+0x7a8>
 401a9ec:	1805883a 	mov	r2,r3
 401a9f0:	10c00104 	addi	r3,r2,4
 401a9f4:	1885803a 	cmpltu	r2,r3,r2
 401a9f8:	88a3883a 	add	r17,r17,r2
 401a9fc:	8880202c 	andhi	r2,r17,128
 401aa00:	10001c26 	beq	r2,zero,401aa74 <__muldf3+0x820>
 401aa04:	3027883a 	mov	r19,r6
 401aa08:	00800044 	movi	r2,1
 401aa0c:	0021883a 	mov	r16,zero
 401aa10:	002d883a 	mov	r22,zero
 401aa14:	003e6e06 	br	401a3d0 <__alt_mem_onchip_memory2_0+0xfc019150>
 401aa18:	4007883a 	mov	r3,r8
 401aa1c:	003f9706 	br	401a87c <__alt_mem_onchip_memory2_0+0xfc0195fc>
 401aa20:	017ff844 	movi	r5,-31
 401aa24:	2885c83a 	sub	r2,r5,r2
 401aa28:	888ad83a 	srl	r5,r17,r2
 401aa2c:	00800804 	movi	r2,32
 401aa30:	18801a26 	beq	r3,r2,401aa9c <__muldf3+0x848>
 401aa34:	01001004 	movi	r4,64
 401aa38:	20c7c83a 	sub	r3,r4,r3
 401aa3c:	88e2983a 	sll	r17,r17,r3
 401aa40:	8ca4b03a 	or	r18,r17,r18
 401aa44:	9004c03a 	cmpne	r2,r18,zero
 401aa48:	2884b03a 	or	r2,r5,r2
 401aa4c:	144001cc 	andi	r17,r2,7
 401aa50:	88000d1e 	bne	r17,zero,401aa88 <__muldf3+0x834>
 401aa54:	0021883a 	mov	r16,zero
 401aa58:	102cd0fa 	srli	r22,r2,3
 401aa5c:	3027883a 	mov	r19,r6
 401aa60:	0005883a 	mov	r2,zero
 401aa64:	b46cb03a 	or	r22,r22,r17
 401aa68:	003e5906 	br	401a3d0 <__alt_mem_onchip_memory2_0+0xfc019150>
 401aa6c:	1007883a 	mov	r3,r2
 401aa70:	0023883a 	mov	r17,zero
 401aa74:	8820927a 	slli	r16,r17,9
 401aa78:	1805883a 	mov	r2,r3
 401aa7c:	8822977a 	slli	r17,r17,29
 401aa80:	8020d33a 	srli	r16,r16,12
 401aa84:	003ff406 	br	401aa58 <__alt_mem_onchip_memory2_0+0xfc0197d8>
 401aa88:	10c003cc 	andi	r3,r2,15
 401aa8c:	01000104 	movi	r4,4
 401aa90:	193ff626 	beq	r3,r4,401aa6c <__alt_mem_onchip_memory2_0+0xfc0197ec>
 401aa94:	0023883a 	mov	r17,zero
 401aa98:	003fd506 	br	401a9f0 <__alt_mem_onchip_memory2_0+0xfc019770>
 401aa9c:	0023883a 	mov	r17,zero
 401aaa0:	003fe706 	br	401aa40 <__alt_mem_onchip_memory2_0+0xfc0197c0>
 401aaa4:	00800434 	movhi	r2,16
 401aaa8:	8c000234 	orhi	r16,r17,8
 401aaac:	10bfffc4 	addi	r2,r2,-1
 401aab0:	3027883a 	mov	r19,r6
 401aab4:	80a0703a 	and	r16,r16,r2
 401aab8:	902d883a 	mov	r22,r18
 401aabc:	003eac06 	br	401a570 <__alt_mem_onchip_memory2_0+0xfc0192f0>

0401aac0 <__subdf3>:
 401aac0:	02000434 	movhi	r8,16
 401aac4:	423fffc4 	addi	r8,r8,-1
 401aac8:	defffb04 	addi	sp,sp,-20
 401aacc:	2a14703a 	and	r10,r5,r8
 401aad0:	3812d53a 	srli	r9,r7,20
 401aad4:	3a10703a 	and	r8,r7,r8
 401aad8:	2006d77a 	srli	r3,r4,29
 401aadc:	3004d77a 	srli	r2,r6,29
 401aae0:	dc000015 	stw	r16,0(sp)
 401aae4:	501490fa 	slli	r10,r10,3
 401aae8:	2820d53a 	srli	r16,r5,20
 401aaec:	401090fa 	slli	r8,r8,3
 401aaf0:	dc800215 	stw	r18,8(sp)
 401aaf4:	dc400115 	stw	r17,4(sp)
 401aaf8:	dfc00415 	stw	ra,16(sp)
 401aafc:	202290fa 	slli	r17,r4,3
 401ab00:	dcc00315 	stw	r19,12(sp)
 401ab04:	4a41ffcc 	andi	r9,r9,2047
 401ab08:	0101ffc4 	movi	r4,2047
 401ab0c:	2824d7fa 	srli	r18,r5,31
 401ab10:	8401ffcc 	andi	r16,r16,2047
 401ab14:	50c6b03a 	or	r3,r10,r3
 401ab18:	380ed7fa 	srli	r7,r7,31
 401ab1c:	408ab03a 	or	r5,r8,r2
 401ab20:	300c90fa 	slli	r6,r6,3
 401ab24:	49009626 	beq	r9,r4,401ad80 <__subdf3+0x2c0>
 401ab28:	39c0005c 	xori	r7,r7,1
 401ab2c:	8245c83a 	sub	r2,r16,r9
 401ab30:	3c807426 	beq	r7,r18,401ad04 <__subdf3+0x244>
 401ab34:	0080af0e 	bge	zero,r2,401adf4 <__subdf3+0x334>
 401ab38:	48002a1e 	bne	r9,zero,401abe4 <__subdf3+0x124>
 401ab3c:	2988b03a 	or	r4,r5,r6
 401ab40:	20009a1e 	bne	r4,zero,401adac <__subdf3+0x2ec>
 401ab44:	888001cc 	andi	r2,r17,7
 401ab48:	10000726 	beq	r2,zero,401ab68 <__subdf3+0xa8>
 401ab4c:	888003cc 	andi	r2,r17,15
 401ab50:	01000104 	movi	r4,4
 401ab54:	11000426 	beq	r2,r4,401ab68 <__subdf3+0xa8>
 401ab58:	890b883a 	add	r5,r17,r4
 401ab5c:	2c63803a 	cmpltu	r17,r5,r17
 401ab60:	1c47883a 	add	r3,r3,r17
 401ab64:	2823883a 	mov	r17,r5
 401ab68:	1880202c 	andhi	r2,r3,128
 401ab6c:	10005926 	beq	r2,zero,401acd4 <__subdf3+0x214>
 401ab70:	84000044 	addi	r16,r16,1
 401ab74:	0081ffc4 	movi	r2,2047
 401ab78:	8080be26 	beq	r16,r2,401ae74 <__subdf3+0x3b4>
 401ab7c:	017fe034 	movhi	r5,65408
 401ab80:	297fffc4 	addi	r5,r5,-1
 401ab84:	1946703a 	and	r3,r3,r5
 401ab88:	1804977a 	slli	r2,r3,29
 401ab8c:	1806927a 	slli	r3,r3,9
 401ab90:	8822d0fa 	srli	r17,r17,3
 401ab94:	8401ffcc 	andi	r16,r16,2047
 401ab98:	180ad33a 	srli	r5,r3,12
 401ab9c:	9100004c 	andi	r4,r18,1
 401aba0:	1444b03a 	or	r2,r2,r17
 401aba4:	80c1ffcc 	andi	r3,r16,2047
 401aba8:	1820953a 	slli	r16,r3,20
 401abac:	20c03fcc 	andi	r3,r4,255
 401abb0:	180897fa 	slli	r4,r3,31
 401abb4:	00c00434 	movhi	r3,16
 401abb8:	18ffffc4 	addi	r3,r3,-1
 401abbc:	28c6703a 	and	r3,r5,r3
 401abc0:	1c06b03a 	or	r3,r3,r16
 401abc4:	1906b03a 	or	r3,r3,r4
 401abc8:	dfc00417 	ldw	ra,16(sp)
 401abcc:	dcc00317 	ldw	r19,12(sp)
 401abd0:	dc800217 	ldw	r18,8(sp)
 401abd4:	dc400117 	ldw	r17,4(sp)
 401abd8:	dc000017 	ldw	r16,0(sp)
 401abdc:	dec00504 	addi	sp,sp,20
 401abe0:	f800283a 	ret
 401abe4:	0101ffc4 	movi	r4,2047
 401abe8:	813fd626 	beq	r16,r4,401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401abec:	29402034 	orhi	r5,r5,128
 401abf0:	01000e04 	movi	r4,56
 401abf4:	2080a316 	blt	r4,r2,401ae84 <__subdf3+0x3c4>
 401abf8:	010007c4 	movi	r4,31
 401abfc:	2080c616 	blt	r4,r2,401af18 <__subdf3+0x458>
 401ac00:	01000804 	movi	r4,32
 401ac04:	2089c83a 	sub	r4,r4,r2
 401ac08:	2910983a 	sll	r8,r5,r4
 401ac0c:	308ed83a 	srl	r7,r6,r2
 401ac10:	3108983a 	sll	r4,r6,r4
 401ac14:	2884d83a 	srl	r2,r5,r2
 401ac18:	41ccb03a 	or	r6,r8,r7
 401ac1c:	2008c03a 	cmpne	r4,r4,zero
 401ac20:	310cb03a 	or	r6,r6,r4
 401ac24:	898dc83a 	sub	r6,r17,r6
 401ac28:	89a3803a 	cmpltu	r17,r17,r6
 401ac2c:	1887c83a 	sub	r3,r3,r2
 401ac30:	1c47c83a 	sub	r3,r3,r17
 401ac34:	3023883a 	mov	r17,r6
 401ac38:	1880202c 	andhi	r2,r3,128
 401ac3c:	10002326 	beq	r2,zero,401accc <__subdf3+0x20c>
 401ac40:	04c02034 	movhi	r19,128
 401ac44:	9cffffc4 	addi	r19,r19,-1
 401ac48:	1ce6703a 	and	r19,r3,r19
 401ac4c:	98007a26 	beq	r19,zero,401ae38 <__subdf3+0x378>
 401ac50:	9809883a 	mov	r4,r19
 401ac54:	400e33c0 	call	400e33c <__clzsi2>
 401ac58:	113ffe04 	addi	r4,r2,-8
 401ac5c:	00c007c4 	movi	r3,31
 401ac60:	19007b16 	blt	r3,r4,401ae50 <__subdf3+0x390>
 401ac64:	00800804 	movi	r2,32
 401ac68:	1105c83a 	sub	r2,r2,r4
 401ac6c:	8884d83a 	srl	r2,r17,r2
 401ac70:	9906983a 	sll	r3,r19,r4
 401ac74:	8922983a 	sll	r17,r17,r4
 401ac78:	10c4b03a 	or	r2,r2,r3
 401ac7c:	24007816 	blt	r4,r16,401ae60 <__subdf3+0x3a0>
 401ac80:	2421c83a 	sub	r16,r4,r16
 401ac84:	80c00044 	addi	r3,r16,1
 401ac88:	010007c4 	movi	r4,31
 401ac8c:	20c09516 	blt	r4,r3,401aee4 <__subdf3+0x424>
 401ac90:	01400804 	movi	r5,32
 401ac94:	28cbc83a 	sub	r5,r5,r3
 401ac98:	88c8d83a 	srl	r4,r17,r3
 401ac9c:	8962983a 	sll	r17,r17,r5
 401aca0:	114a983a 	sll	r5,r2,r5
 401aca4:	10c6d83a 	srl	r3,r2,r3
 401aca8:	8804c03a 	cmpne	r2,r17,zero
 401acac:	290ab03a 	or	r5,r5,r4
 401acb0:	28a2b03a 	or	r17,r5,r2
 401acb4:	0021883a 	mov	r16,zero
 401acb8:	003fa206 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401acbc:	2090b03a 	or	r8,r4,r2
 401acc0:	40018e26 	beq	r8,zero,401b2fc <__subdf3+0x83c>
 401acc4:	1007883a 	mov	r3,r2
 401acc8:	2023883a 	mov	r17,r4
 401accc:	888001cc 	andi	r2,r17,7
 401acd0:	103f9e1e 	bne	r2,zero,401ab4c <__alt_mem_onchip_memory2_0+0xfc0198cc>
 401acd4:	1804977a 	slli	r2,r3,29
 401acd8:	8822d0fa 	srli	r17,r17,3
 401acdc:	1810d0fa 	srli	r8,r3,3
 401ace0:	9100004c 	andi	r4,r18,1
 401ace4:	1444b03a 	or	r2,r2,r17
 401ace8:	00c1ffc4 	movi	r3,2047
 401acec:	80c02826 	beq	r16,r3,401ad90 <__subdf3+0x2d0>
 401acf0:	01400434 	movhi	r5,16
 401acf4:	297fffc4 	addi	r5,r5,-1
 401acf8:	80e0703a 	and	r16,r16,r3
 401acfc:	414a703a 	and	r5,r8,r5
 401ad00:	003fa806 	br	401aba4 <__alt_mem_onchip_memory2_0+0xfc019924>
 401ad04:	0080630e 	bge	zero,r2,401ae94 <__subdf3+0x3d4>
 401ad08:	48003026 	beq	r9,zero,401adcc <__subdf3+0x30c>
 401ad0c:	0101ffc4 	movi	r4,2047
 401ad10:	813f8c26 	beq	r16,r4,401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401ad14:	29402034 	orhi	r5,r5,128
 401ad18:	01000e04 	movi	r4,56
 401ad1c:	2080a90e 	bge	r4,r2,401afc4 <__subdf3+0x504>
 401ad20:	298cb03a 	or	r6,r5,r6
 401ad24:	3012c03a 	cmpne	r9,r6,zero
 401ad28:	0005883a 	mov	r2,zero
 401ad2c:	4c53883a 	add	r9,r9,r17
 401ad30:	4c63803a 	cmpltu	r17,r9,r17
 401ad34:	10c7883a 	add	r3,r2,r3
 401ad38:	88c7883a 	add	r3,r17,r3
 401ad3c:	4823883a 	mov	r17,r9
 401ad40:	1880202c 	andhi	r2,r3,128
 401ad44:	1000d026 	beq	r2,zero,401b088 <__subdf3+0x5c8>
 401ad48:	84000044 	addi	r16,r16,1
 401ad4c:	0081ffc4 	movi	r2,2047
 401ad50:	8080fe26 	beq	r16,r2,401b14c <__subdf3+0x68c>
 401ad54:	00bfe034 	movhi	r2,65408
 401ad58:	10bfffc4 	addi	r2,r2,-1
 401ad5c:	1886703a 	and	r3,r3,r2
 401ad60:	880ad07a 	srli	r5,r17,1
 401ad64:	180497fa 	slli	r2,r3,31
 401ad68:	8900004c 	andi	r4,r17,1
 401ad6c:	2922b03a 	or	r17,r5,r4
 401ad70:	1806d07a 	srli	r3,r3,1
 401ad74:	1462b03a 	or	r17,r2,r17
 401ad78:	3825883a 	mov	r18,r7
 401ad7c:	003f7106 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401ad80:	2984b03a 	or	r2,r5,r6
 401ad84:	103f6826 	beq	r2,zero,401ab28 <__alt_mem_onchip_memory2_0+0xfc0198a8>
 401ad88:	39c03fcc 	andi	r7,r7,255
 401ad8c:	003f6706 	br	401ab2c <__alt_mem_onchip_memory2_0+0xfc0198ac>
 401ad90:	4086b03a 	or	r3,r8,r2
 401ad94:	18015226 	beq	r3,zero,401b2e0 <__subdf3+0x820>
 401ad98:	00c00434 	movhi	r3,16
 401ad9c:	41400234 	orhi	r5,r8,8
 401ada0:	18ffffc4 	addi	r3,r3,-1
 401ada4:	28ca703a 	and	r5,r5,r3
 401ada8:	003f7e06 	br	401aba4 <__alt_mem_onchip_memory2_0+0xfc019924>
 401adac:	10bfffc4 	addi	r2,r2,-1
 401adb0:	1000491e 	bne	r2,zero,401aed8 <__subdf3+0x418>
 401adb4:	898fc83a 	sub	r7,r17,r6
 401adb8:	89e3803a 	cmpltu	r17,r17,r7
 401adbc:	1947c83a 	sub	r3,r3,r5
 401adc0:	1c47c83a 	sub	r3,r3,r17
 401adc4:	3823883a 	mov	r17,r7
 401adc8:	003f9b06 	br	401ac38 <__alt_mem_onchip_memory2_0+0xfc0199b8>
 401adcc:	2988b03a 	or	r4,r5,r6
 401add0:	203f5c26 	beq	r4,zero,401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401add4:	10bfffc4 	addi	r2,r2,-1
 401add8:	1000931e 	bne	r2,zero,401b028 <__subdf3+0x568>
 401addc:	898d883a 	add	r6,r17,r6
 401ade0:	3463803a 	cmpltu	r17,r6,r17
 401ade4:	1947883a 	add	r3,r3,r5
 401ade8:	88c7883a 	add	r3,r17,r3
 401adec:	3023883a 	mov	r17,r6
 401adf0:	003fd306 	br	401ad40 <__alt_mem_onchip_memory2_0+0xfc019ac0>
 401adf4:	1000541e 	bne	r2,zero,401af48 <__subdf3+0x488>
 401adf8:	80800044 	addi	r2,r16,1
 401adfc:	1081ffcc 	andi	r2,r2,2047
 401ae00:	01000044 	movi	r4,1
 401ae04:	2080a20e 	bge	r4,r2,401b090 <__subdf3+0x5d0>
 401ae08:	8989c83a 	sub	r4,r17,r6
 401ae0c:	8905803a 	cmpltu	r2,r17,r4
 401ae10:	1967c83a 	sub	r19,r3,r5
 401ae14:	98a7c83a 	sub	r19,r19,r2
 401ae18:	9880202c 	andhi	r2,r19,128
 401ae1c:	10006326 	beq	r2,zero,401afac <__subdf3+0x4ec>
 401ae20:	3463c83a 	sub	r17,r6,r17
 401ae24:	28c7c83a 	sub	r3,r5,r3
 401ae28:	344d803a 	cmpltu	r6,r6,r17
 401ae2c:	19a7c83a 	sub	r19,r3,r6
 401ae30:	3825883a 	mov	r18,r7
 401ae34:	983f861e 	bne	r19,zero,401ac50 <__alt_mem_onchip_memory2_0+0xfc0199d0>
 401ae38:	8809883a 	mov	r4,r17
 401ae3c:	400e33c0 	call	400e33c <__clzsi2>
 401ae40:	10800804 	addi	r2,r2,32
 401ae44:	113ffe04 	addi	r4,r2,-8
 401ae48:	00c007c4 	movi	r3,31
 401ae4c:	193f850e 	bge	r3,r4,401ac64 <__alt_mem_onchip_memory2_0+0xfc0199e4>
 401ae50:	10bff604 	addi	r2,r2,-40
 401ae54:	8884983a 	sll	r2,r17,r2
 401ae58:	0023883a 	mov	r17,zero
 401ae5c:	243f880e 	bge	r4,r16,401ac80 <__alt_mem_onchip_memory2_0+0xfc019a00>
 401ae60:	00ffe034 	movhi	r3,65408
 401ae64:	18ffffc4 	addi	r3,r3,-1
 401ae68:	8121c83a 	sub	r16,r16,r4
 401ae6c:	10c6703a 	and	r3,r2,r3
 401ae70:	003f3406 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401ae74:	9100004c 	andi	r4,r18,1
 401ae78:	000b883a 	mov	r5,zero
 401ae7c:	0005883a 	mov	r2,zero
 401ae80:	003f4806 	br	401aba4 <__alt_mem_onchip_memory2_0+0xfc019924>
 401ae84:	298cb03a 	or	r6,r5,r6
 401ae88:	300cc03a 	cmpne	r6,r6,zero
 401ae8c:	0005883a 	mov	r2,zero
 401ae90:	003f6406 	br	401ac24 <__alt_mem_onchip_memory2_0+0xfc0199a4>
 401ae94:	10009a1e 	bne	r2,zero,401b100 <__subdf3+0x640>
 401ae98:	82400044 	addi	r9,r16,1
 401ae9c:	4881ffcc 	andi	r2,r9,2047
 401aea0:	02800044 	movi	r10,1
 401aea4:	5080670e 	bge	r10,r2,401b044 <__subdf3+0x584>
 401aea8:	0081ffc4 	movi	r2,2047
 401aeac:	4880af26 	beq	r9,r2,401b16c <__subdf3+0x6ac>
 401aeb0:	898d883a 	add	r6,r17,r6
 401aeb4:	1945883a 	add	r2,r3,r5
 401aeb8:	3447803a 	cmpltu	r3,r6,r17
 401aebc:	1887883a 	add	r3,r3,r2
 401aec0:	182297fa 	slli	r17,r3,31
 401aec4:	300cd07a 	srli	r6,r6,1
 401aec8:	1806d07a 	srli	r3,r3,1
 401aecc:	4821883a 	mov	r16,r9
 401aed0:	89a2b03a 	or	r17,r17,r6
 401aed4:	003f1b06 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401aed8:	0101ffc4 	movi	r4,2047
 401aedc:	813f441e 	bne	r16,r4,401abf0 <__alt_mem_onchip_memory2_0+0xfc019970>
 401aee0:	003f1806 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401aee4:	843ff844 	addi	r16,r16,-31
 401aee8:	01400804 	movi	r5,32
 401aeec:	1408d83a 	srl	r4,r2,r16
 401aef0:	19405026 	beq	r3,r5,401b034 <__subdf3+0x574>
 401aef4:	01401004 	movi	r5,64
 401aef8:	28c7c83a 	sub	r3,r5,r3
 401aefc:	10c4983a 	sll	r2,r2,r3
 401af00:	88a2b03a 	or	r17,r17,r2
 401af04:	8822c03a 	cmpne	r17,r17,zero
 401af08:	2462b03a 	or	r17,r4,r17
 401af0c:	0007883a 	mov	r3,zero
 401af10:	0021883a 	mov	r16,zero
 401af14:	003f6d06 	br	401accc <__alt_mem_onchip_memory2_0+0xfc019a4c>
 401af18:	11fff804 	addi	r7,r2,-32
 401af1c:	01000804 	movi	r4,32
 401af20:	29ced83a 	srl	r7,r5,r7
 401af24:	11004526 	beq	r2,r4,401b03c <__subdf3+0x57c>
 401af28:	01001004 	movi	r4,64
 401af2c:	2089c83a 	sub	r4,r4,r2
 401af30:	2904983a 	sll	r2,r5,r4
 401af34:	118cb03a 	or	r6,r2,r6
 401af38:	300cc03a 	cmpne	r6,r6,zero
 401af3c:	398cb03a 	or	r6,r7,r6
 401af40:	0005883a 	mov	r2,zero
 401af44:	003f3706 	br	401ac24 <__alt_mem_onchip_memory2_0+0xfc0199a4>
 401af48:	80002a26 	beq	r16,zero,401aff4 <__subdf3+0x534>
 401af4c:	0101ffc4 	movi	r4,2047
 401af50:	49006626 	beq	r9,r4,401b0ec <__subdf3+0x62c>
 401af54:	0085c83a 	sub	r2,zero,r2
 401af58:	18c02034 	orhi	r3,r3,128
 401af5c:	01000e04 	movi	r4,56
 401af60:	20807e16 	blt	r4,r2,401b15c <__subdf3+0x69c>
 401af64:	010007c4 	movi	r4,31
 401af68:	2080e716 	blt	r4,r2,401b308 <__subdf3+0x848>
 401af6c:	01000804 	movi	r4,32
 401af70:	2089c83a 	sub	r4,r4,r2
 401af74:	1914983a 	sll	r10,r3,r4
 401af78:	8890d83a 	srl	r8,r17,r2
 401af7c:	8908983a 	sll	r4,r17,r4
 401af80:	1884d83a 	srl	r2,r3,r2
 401af84:	5222b03a 	or	r17,r10,r8
 401af88:	2006c03a 	cmpne	r3,r4,zero
 401af8c:	88e2b03a 	or	r17,r17,r3
 401af90:	3463c83a 	sub	r17,r6,r17
 401af94:	2885c83a 	sub	r2,r5,r2
 401af98:	344d803a 	cmpltu	r6,r6,r17
 401af9c:	1187c83a 	sub	r3,r2,r6
 401afa0:	4821883a 	mov	r16,r9
 401afa4:	3825883a 	mov	r18,r7
 401afa8:	003f2306 	br	401ac38 <__alt_mem_onchip_memory2_0+0xfc0199b8>
 401afac:	24d0b03a 	or	r8,r4,r19
 401afb0:	40001b1e 	bne	r8,zero,401b020 <__subdf3+0x560>
 401afb4:	0005883a 	mov	r2,zero
 401afb8:	0009883a 	mov	r4,zero
 401afbc:	0021883a 	mov	r16,zero
 401afc0:	003f4906 	br	401ace8 <__alt_mem_onchip_memory2_0+0xfc019a68>
 401afc4:	010007c4 	movi	r4,31
 401afc8:	20803a16 	blt	r4,r2,401b0b4 <__subdf3+0x5f4>
 401afcc:	01000804 	movi	r4,32
 401afd0:	2089c83a 	sub	r4,r4,r2
 401afd4:	2912983a 	sll	r9,r5,r4
 401afd8:	3090d83a 	srl	r8,r6,r2
 401afdc:	3108983a 	sll	r4,r6,r4
 401afe0:	2884d83a 	srl	r2,r5,r2
 401afe4:	4a12b03a 	or	r9,r9,r8
 401afe8:	2008c03a 	cmpne	r4,r4,zero
 401afec:	4912b03a 	or	r9,r9,r4
 401aff0:	003f4e06 	br	401ad2c <__alt_mem_onchip_memory2_0+0xfc019aac>
 401aff4:	1c48b03a 	or	r4,r3,r17
 401aff8:	20003c26 	beq	r4,zero,401b0ec <__subdf3+0x62c>
 401affc:	0084303a 	nor	r2,zero,r2
 401b000:	1000381e 	bne	r2,zero,401b0e4 <__subdf3+0x624>
 401b004:	3463c83a 	sub	r17,r6,r17
 401b008:	28c5c83a 	sub	r2,r5,r3
 401b00c:	344d803a 	cmpltu	r6,r6,r17
 401b010:	1187c83a 	sub	r3,r2,r6
 401b014:	4821883a 	mov	r16,r9
 401b018:	3825883a 	mov	r18,r7
 401b01c:	003f0606 	br	401ac38 <__alt_mem_onchip_memory2_0+0xfc0199b8>
 401b020:	2023883a 	mov	r17,r4
 401b024:	003f0906 	br	401ac4c <__alt_mem_onchip_memory2_0+0xfc0199cc>
 401b028:	0101ffc4 	movi	r4,2047
 401b02c:	813f3a1e 	bne	r16,r4,401ad18 <__alt_mem_onchip_memory2_0+0xfc019a98>
 401b030:	003ec406 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401b034:	0005883a 	mov	r2,zero
 401b038:	003fb106 	br	401af00 <__alt_mem_onchip_memory2_0+0xfc019c80>
 401b03c:	0005883a 	mov	r2,zero
 401b040:	003fbc06 	br	401af34 <__alt_mem_onchip_memory2_0+0xfc019cb4>
 401b044:	1c44b03a 	or	r2,r3,r17
 401b048:	80008e1e 	bne	r16,zero,401b284 <__subdf3+0x7c4>
 401b04c:	1000c826 	beq	r2,zero,401b370 <__subdf3+0x8b0>
 401b050:	2984b03a 	or	r2,r5,r6
 401b054:	103ebb26 	beq	r2,zero,401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401b058:	8989883a 	add	r4,r17,r6
 401b05c:	1945883a 	add	r2,r3,r5
 401b060:	2447803a 	cmpltu	r3,r4,r17
 401b064:	1887883a 	add	r3,r3,r2
 401b068:	1880202c 	andhi	r2,r3,128
 401b06c:	2023883a 	mov	r17,r4
 401b070:	103f1626 	beq	r2,zero,401accc <__alt_mem_onchip_memory2_0+0xfc019a4c>
 401b074:	00bfe034 	movhi	r2,65408
 401b078:	10bfffc4 	addi	r2,r2,-1
 401b07c:	5021883a 	mov	r16,r10
 401b080:	1886703a 	and	r3,r3,r2
 401b084:	003eaf06 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401b088:	3825883a 	mov	r18,r7
 401b08c:	003f0f06 	br	401accc <__alt_mem_onchip_memory2_0+0xfc019a4c>
 401b090:	1c44b03a 	or	r2,r3,r17
 401b094:	8000251e 	bne	r16,zero,401b12c <__subdf3+0x66c>
 401b098:	1000661e 	bne	r2,zero,401b234 <__subdf3+0x774>
 401b09c:	2990b03a 	or	r8,r5,r6
 401b0a0:	40009626 	beq	r8,zero,401b2fc <__subdf3+0x83c>
 401b0a4:	2807883a 	mov	r3,r5
 401b0a8:	3023883a 	mov	r17,r6
 401b0ac:	3825883a 	mov	r18,r7
 401b0b0:	003ea406 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401b0b4:	127ff804 	addi	r9,r2,-32
 401b0b8:	01000804 	movi	r4,32
 401b0bc:	2a52d83a 	srl	r9,r5,r9
 401b0c0:	11008c26 	beq	r2,r4,401b2f4 <__subdf3+0x834>
 401b0c4:	01001004 	movi	r4,64
 401b0c8:	2085c83a 	sub	r2,r4,r2
 401b0cc:	2884983a 	sll	r2,r5,r2
 401b0d0:	118cb03a 	or	r6,r2,r6
 401b0d4:	300cc03a 	cmpne	r6,r6,zero
 401b0d8:	4992b03a 	or	r9,r9,r6
 401b0dc:	0005883a 	mov	r2,zero
 401b0e0:	003f1206 	br	401ad2c <__alt_mem_onchip_memory2_0+0xfc019aac>
 401b0e4:	0101ffc4 	movi	r4,2047
 401b0e8:	493f9c1e 	bne	r9,r4,401af5c <__alt_mem_onchip_memory2_0+0xfc019cdc>
 401b0ec:	2807883a 	mov	r3,r5
 401b0f0:	3023883a 	mov	r17,r6
 401b0f4:	4821883a 	mov	r16,r9
 401b0f8:	3825883a 	mov	r18,r7
 401b0fc:	003e9106 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401b100:	80001f1e 	bne	r16,zero,401b180 <__subdf3+0x6c0>
 401b104:	1c48b03a 	or	r4,r3,r17
 401b108:	20005a26 	beq	r4,zero,401b274 <__subdf3+0x7b4>
 401b10c:	0084303a 	nor	r2,zero,r2
 401b110:	1000561e 	bne	r2,zero,401b26c <__subdf3+0x7ac>
 401b114:	89a3883a 	add	r17,r17,r6
 401b118:	1945883a 	add	r2,r3,r5
 401b11c:	898d803a 	cmpltu	r6,r17,r6
 401b120:	3087883a 	add	r3,r6,r2
 401b124:	4821883a 	mov	r16,r9
 401b128:	003f0506 	br	401ad40 <__alt_mem_onchip_memory2_0+0xfc019ac0>
 401b12c:	10002b1e 	bne	r2,zero,401b1dc <__subdf3+0x71c>
 401b130:	2984b03a 	or	r2,r5,r6
 401b134:	10008026 	beq	r2,zero,401b338 <__subdf3+0x878>
 401b138:	2807883a 	mov	r3,r5
 401b13c:	3023883a 	mov	r17,r6
 401b140:	3825883a 	mov	r18,r7
 401b144:	0401ffc4 	movi	r16,2047
 401b148:	003e7e06 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401b14c:	3809883a 	mov	r4,r7
 401b150:	0011883a 	mov	r8,zero
 401b154:	0005883a 	mov	r2,zero
 401b158:	003ee306 	br	401ace8 <__alt_mem_onchip_memory2_0+0xfc019a68>
 401b15c:	1c62b03a 	or	r17,r3,r17
 401b160:	8822c03a 	cmpne	r17,r17,zero
 401b164:	0005883a 	mov	r2,zero
 401b168:	003f8906 	br	401af90 <__alt_mem_onchip_memory2_0+0xfc019d10>
 401b16c:	3809883a 	mov	r4,r7
 401b170:	4821883a 	mov	r16,r9
 401b174:	0011883a 	mov	r8,zero
 401b178:	0005883a 	mov	r2,zero
 401b17c:	003eda06 	br	401ace8 <__alt_mem_onchip_memory2_0+0xfc019a68>
 401b180:	0101ffc4 	movi	r4,2047
 401b184:	49003b26 	beq	r9,r4,401b274 <__subdf3+0x7b4>
 401b188:	0085c83a 	sub	r2,zero,r2
 401b18c:	18c02034 	orhi	r3,r3,128
 401b190:	01000e04 	movi	r4,56
 401b194:	20806e16 	blt	r4,r2,401b350 <__subdf3+0x890>
 401b198:	010007c4 	movi	r4,31
 401b19c:	20807716 	blt	r4,r2,401b37c <__subdf3+0x8bc>
 401b1a0:	01000804 	movi	r4,32
 401b1a4:	2089c83a 	sub	r4,r4,r2
 401b1a8:	1914983a 	sll	r10,r3,r4
 401b1ac:	8890d83a 	srl	r8,r17,r2
 401b1b0:	8908983a 	sll	r4,r17,r4
 401b1b4:	1884d83a 	srl	r2,r3,r2
 401b1b8:	5222b03a 	or	r17,r10,r8
 401b1bc:	2006c03a 	cmpne	r3,r4,zero
 401b1c0:	88e2b03a 	or	r17,r17,r3
 401b1c4:	89a3883a 	add	r17,r17,r6
 401b1c8:	1145883a 	add	r2,r2,r5
 401b1cc:	898d803a 	cmpltu	r6,r17,r6
 401b1d0:	3087883a 	add	r3,r6,r2
 401b1d4:	4821883a 	mov	r16,r9
 401b1d8:	003ed906 	br	401ad40 <__alt_mem_onchip_memory2_0+0xfc019ac0>
 401b1dc:	2984b03a 	or	r2,r5,r6
 401b1e0:	10004226 	beq	r2,zero,401b2ec <__subdf3+0x82c>
 401b1e4:	1808d0fa 	srli	r4,r3,3
 401b1e8:	8822d0fa 	srli	r17,r17,3
 401b1ec:	1806977a 	slli	r3,r3,29
 401b1f0:	2080022c 	andhi	r2,r4,8
 401b1f4:	1c62b03a 	or	r17,r3,r17
 401b1f8:	10000826 	beq	r2,zero,401b21c <__subdf3+0x75c>
 401b1fc:	2812d0fa 	srli	r9,r5,3
 401b200:	4880022c 	andhi	r2,r9,8
 401b204:	1000051e 	bne	r2,zero,401b21c <__subdf3+0x75c>
 401b208:	300cd0fa 	srli	r6,r6,3
 401b20c:	2804977a 	slli	r2,r5,29
 401b210:	4809883a 	mov	r4,r9
 401b214:	3825883a 	mov	r18,r7
 401b218:	11a2b03a 	or	r17,r2,r6
 401b21c:	8806d77a 	srli	r3,r17,29
 401b220:	200890fa 	slli	r4,r4,3
 401b224:	882290fa 	slli	r17,r17,3
 401b228:	0401ffc4 	movi	r16,2047
 401b22c:	1906b03a 	or	r3,r3,r4
 401b230:	003e4406 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401b234:	2984b03a 	or	r2,r5,r6
 401b238:	103e4226 	beq	r2,zero,401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401b23c:	8989c83a 	sub	r4,r17,r6
 401b240:	8911803a 	cmpltu	r8,r17,r4
 401b244:	1945c83a 	sub	r2,r3,r5
 401b248:	1205c83a 	sub	r2,r2,r8
 401b24c:	1200202c 	andhi	r8,r2,128
 401b250:	403e9a26 	beq	r8,zero,401acbc <__alt_mem_onchip_memory2_0+0xfc019a3c>
 401b254:	3463c83a 	sub	r17,r6,r17
 401b258:	28c5c83a 	sub	r2,r5,r3
 401b25c:	344d803a 	cmpltu	r6,r6,r17
 401b260:	1187c83a 	sub	r3,r2,r6
 401b264:	3825883a 	mov	r18,r7
 401b268:	003e3606 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401b26c:	0101ffc4 	movi	r4,2047
 401b270:	493fc71e 	bne	r9,r4,401b190 <__alt_mem_onchip_memory2_0+0xfc019f10>
 401b274:	2807883a 	mov	r3,r5
 401b278:	3023883a 	mov	r17,r6
 401b27c:	4821883a 	mov	r16,r9
 401b280:	003e3006 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401b284:	10003626 	beq	r2,zero,401b360 <__subdf3+0x8a0>
 401b288:	2984b03a 	or	r2,r5,r6
 401b28c:	10001726 	beq	r2,zero,401b2ec <__subdf3+0x82c>
 401b290:	1808d0fa 	srli	r4,r3,3
 401b294:	8822d0fa 	srli	r17,r17,3
 401b298:	1806977a 	slli	r3,r3,29
 401b29c:	2080022c 	andhi	r2,r4,8
 401b2a0:	1c62b03a 	or	r17,r3,r17
 401b2a4:	10000726 	beq	r2,zero,401b2c4 <__subdf3+0x804>
 401b2a8:	2812d0fa 	srli	r9,r5,3
 401b2ac:	4880022c 	andhi	r2,r9,8
 401b2b0:	1000041e 	bne	r2,zero,401b2c4 <__subdf3+0x804>
 401b2b4:	300cd0fa 	srli	r6,r6,3
 401b2b8:	2804977a 	slli	r2,r5,29
 401b2bc:	4809883a 	mov	r4,r9
 401b2c0:	11a2b03a 	or	r17,r2,r6
 401b2c4:	8806d77a 	srli	r3,r17,29
 401b2c8:	200890fa 	slli	r4,r4,3
 401b2cc:	882290fa 	slli	r17,r17,3
 401b2d0:	3825883a 	mov	r18,r7
 401b2d4:	1906b03a 	or	r3,r3,r4
 401b2d8:	0401ffc4 	movi	r16,2047
 401b2dc:	003e1906 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401b2e0:	000b883a 	mov	r5,zero
 401b2e4:	0005883a 	mov	r2,zero
 401b2e8:	003e2e06 	br	401aba4 <__alt_mem_onchip_memory2_0+0xfc019924>
 401b2ec:	0401ffc4 	movi	r16,2047
 401b2f0:	003e1406 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401b2f4:	0005883a 	mov	r2,zero
 401b2f8:	003f7506 	br	401b0d0 <__alt_mem_onchip_memory2_0+0xfc019e50>
 401b2fc:	0005883a 	mov	r2,zero
 401b300:	0009883a 	mov	r4,zero
 401b304:	003e7806 	br	401ace8 <__alt_mem_onchip_memory2_0+0xfc019a68>
 401b308:	123ff804 	addi	r8,r2,-32
 401b30c:	01000804 	movi	r4,32
 401b310:	1a10d83a 	srl	r8,r3,r8
 401b314:	11002526 	beq	r2,r4,401b3ac <__subdf3+0x8ec>
 401b318:	01001004 	movi	r4,64
 401b31c:	2085c83a 	sub	r2,r4,r2
 401b320:	1884983a 	sll	r2,r3,r2
 401b324:	1444b03a 	or	r2,r2,r17
 401b328:	1004c03a 	cmpne	r2,r2,zero
 401b32c:	40a2b03a 	or	r17,r8,r2
 401b330:	0005883a 	mov	r2,zero
 401b334:	003f1606 	br	401af90 <__alt_mem_onchip_memory2_0+0xfc019d10>
 401b338:	02000434 	movhi	r8,16
 401b33c:	0009883a 	mov	r4,zero
 401b340:	423fffc4 	addi	r8,r8,-1
 401b344:	00bfffc4 	movi	r2,-1
 401b348:	0401ffc4 	movi	r16,2047
 401b34c:	003e6606 	br	401ace8 <__alt_mem_onchip_memory2_0+0xfc019a68>
 401b350:	1c62b03a 	or	r17,r3,r17
 401b354:	8822c03a 	cmpne	r17,r17,zero
 401b358:	0005883a 	mov	r2,zero
 401b35c:	003f9906 	br	401b1c4 <__alt_mem_onchip_memory2_0+0xfc019f44>
 401b360:	2807883a 	mov	r3,r5
 401b364:	3023883a 	mov	r17,r6
 401b368:	0401ffc4 	movi	r16,2047
 401b36c:	003df506 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401b370:	2807883a 	mov	r3,r5
 401b374:	3023883a 	mov	r17,r6
 401b378:	003df206 	br	401ab44 <__alt_mem_onchip_memory2_0+0xfc0198c4>
 401b37c:	123ff804 	addi	r8,r2,-32
 401b380:	01000804 	movi	r4,32
 401b384:	1a10d83a 	srl	r8,r3,r8
 401b388:	11000a26 	beq	r2,r4,401b3b4 <__subdf3+0x8f4>
 401b38c:	01001004 	movi	r4,64
 401b390:	2085c83a 	sub	r2,r4,r2
 401b394:	1884983a 	sll	r2,r3,r2
 401b398:	1444b03a 	or	r2,r2,r17
 401b39c:	1004c03a 	cmpne	r2,r2,zero
 401b3a0:	40a2b03a 	or	r17,r8,r2
 401b3a4:	0005883a 	mov	r2,zero
 401b3a8:	003f8606 	br	401b1c4 <__alt_mem_onchip_memory2_0+0xfc019f44>
 401b3ac:	0005883a 	mov	r2,zero
 401b3b0:	003fdc06 	br	401b324 <__alt_mem_onchip_memory2_0+0xfc01a0a4>
 401b3b4:	0005883a 	mov	r2,zero
 401b3b8:	003ff706 	br	401b398 <__alt_mem_onchip_memory2_0+0xfc01a118>

0401b3bc <__fixdfsi>:
 401b3bc:	280cd53a 	srli	r6,r5,20
 401b3c0:	00c00434 	movhi	r3,16
 401b3c4:	18ffffc4 	addi	r3,r3,-1
 401b3c8:	3181ffcc 	andi	r6,r6,2047
 401b3cc:	01c0ff84 	movi	r7,1022
 401b3d0:	28c6703a 	and	r3,r5,r3
 401b3d4:	280ad7fa 	srli	r5,r5,31
 401b3d8:	3980120e 	bge	r7,r6,401b424 <__fixdfsi+0x68>
 401b3dc:	00810744 	movi	r2,1053
 401b3e0:	11800c16 	blt	r2,r6,401b414 <__fixdfsi+0x58>
 401b3e4:	00810cc4 	movi	r2,1075
 401b3e8:	1185c83a 	sub	r2,r2,r6
 401b3ec:	01c007c4 	movi	r7,31
 401b3f0:	18c00434 	orhi	r3,r3,16
 401b3f4:	38800d16 	blt	r7,r2,401b42c <__fixdfsi+0x70>
 401b3f8:	31befb44 	addi	r6,r6,-1043
 401b3fc:	2084d83a 	srl	r2,r4,r2
 401b400:	1986983a 	sll	r3,r3,r6
 401b404:	1884b03a 	or	r2,r3,r2
 401b408:	28000726 	beq	r5,zero,401b428 <__fixdfsi+0x6c>
 401b40c:	0085c83a 	sub	r2,zero,r2
 401b410:	f800283a 	ret
 401b414:	00a00034 	movhi	r2,32768
 401b418:	10bfffc4 	addi	r2,r2,-1
 401b41c:	2885883a 	add	r2,r5,r2
 401b420:	f800283a 	ret
 401b424:	0005883a 	mov	r2,zero
 401b428:	f800283a 	ret
 401b42c:	008104c4 	movi	r2,1043
 401b430:	1185c83a 	sub	r2,r2,r6
 401b434:	1884d83a 	srl	r2,r3,r2
 401b438:	003ff306 	br	401b408 <__alt_mem_onchip_memory2_0+0xfc01a188>

0401b43c <__floatsidf>:
 401b43c:	defffd04 	addi	sp,sp,-12
 401b440:	dfc00215 	stw	ra,8(sp)
 401b444:	dc400115 	stw	r17,4(sp)
 401b448:	dc000015 	stw	r16,0(sp)
 401b44c:	20002b26 	beq	r4,zero,401b4fc <__floatsidf+0xc0>
 401b450:	2023883a 	mov	r17,r4
 401b454:	2020d7fa 	srli	r16,r4,31
 401b458:	20002d16 	blt	r4,zero,401b510 <__floatsidf+0xd4>
 401b45c:	8809883a 	mov	r4,r17
 401b460:	400e33c0 	call	400e33c <__clzsi2>
 401b464:	01410784 	movi	r5,1054
 401b468:	288bc83a 	sub	r5,r5,r2
 401b46c:	01010cc4 	movi	r4,1075
 401b470:	2149c83a 	sub	r4,r4,r5
 401b474:	00c007c4 	movi	r3,31
 401b478:	1900160e 	bge	r3,r4,401b4d4 <__floatsidf+0x98>
 401b47c:	00c104c4 	movi	r3,1043
 401b480:	1947c83a 	sub	r3,r3,r5
 401b484:	88c6983a 	sll	r3,r17,r3
 401b488:	00800434 	movhi	r2,16
 401b48c:	10bfffc4 	addi	r2,r2,-1
 401b490:	1886703a 	and	r3,r3,r2
 401b494:	2941ffcc 	andi	r5,r5,2047
 401b498:	800d883a 	mov	r6,r16
 401b49c:	0005883a 	mov	r2,zero
 401b4a0:	280a953a 	slli	r5,r5,20
 401b4a4:	31803fcc 	andi	r6,r6,255
 401b4a8:	01000434 	movhi	r4,16
 401b4ac:	300c97fa 	slli	r6,r6,31
 401b4b0:	213fffc4 	addi	r4,r4,-1
 401b4b4:	1906703a 	and	r3,r3,r4
 401b4b8:	1946b03a 	or	r3,r3,r5
 401b4bc:	1986b03a 	or	r3,r3,r6
 401b4c0:	dfc00217 	ldw	ra,8(sp)
 401b4c4:	dc400117 	ldw	r17,4(sp)
 401b4c8:	dc000017 	ldw	r16,0(sp)
 401b4cc:	dec00304 	addi	sp,sp,12
 401b4d0:	f800283a 	ret
 401b4d4:	00c002c4 	movi	r3,11
 401b4d8:	1887c83a 	sub	r3,r3,r2
 401b4dc:	88c6d83a 	srl	r3,r17,r3
 401b4e0:	8904983a 	sll	r2,r17,r4
 401b4e4:	01000434 	movhi	r4,16
 401b4e8:	213fffc4 	addi	r4,r4,-1
 401b4ec:	2941ffcc 	andi	r5,r5,2047
 401b4f0:	1906703a 	and	r3,r3,r4
 401b4f4:	800d883a 	mov	r6,r16
 401b4f8:	003fe906 	br	401b4a0 <__alt_mem_onchip_memory2_0+0xfc01a220>
 401b4fc:	000d883a 	mov	r6,zero
 401b500:	000b883a 	mov	r5,zero
 401b504:	0007883a 	mov	r3,zero
 401b508:	0005883a 	mov	r2,zero
 401b50c:	003fe406 	br	401b4a0 <__alt_mem_onchip_memory2_0+0xfc01a220>
 401b510:	0123c83a 	sub	r17,zero,r4
 401b514:	003fd106 	br	401b45c <__alt_mem_onchip_memory2_0+0xfc01a1dc>

0401b518 <__floatunsidf>:
 401b518:	defffe04 	addi	sp,sp,-8
 401b51c:	dc000015 	stw	r16,0(sp)
 401b520:	dfc00115 	stw	ra,4(sp)
 401b524:	2021883a 	mov	r16,r4
 401b528:	20002226 	beq	r4,zero,401b5b4 <__floatunsidf+0x9c>
 401b52c:	400e33c0 	call	400e33c <__clzsi2>
 401b530:	01010784 	movi	r4,1054
 401b534:	2089c83a 	sub	r4,r4,r2
 401b538:	01810cc4 	movi	r6,1075
 401b53c:	310dc83a 	sub	r6,r6,r4
 401b540:	00c007c4 	movi	r3,31
 401b544:	1980120e 	bge	r3,r6,401b590 <__floatunsidf+0x78>
 401b548:	00c104c4 	movi	r3,1043
 401b54c:	1907c83a 	sub	r3,r3,r4
 401b550:	80ca983a 	sll	r5,r16,r3
 401b554:	00800434 	movhi	r2,16
 401b558:	10bfffc4 	addi	r2,r2,-1
 401b55c:	2101ffcc 	andi	r4,r4,2047
 401b560:	0021883a 	mov	r16,zero
 401b564:	288a703a 	and	r5,r5,r2
 401b568:	2008953a 	slli	r4,r4,20
 401b56c:	00c00434 	movhi	r3,16
 401b570:	18ffffc4 	addi	r3,r3,-1
 401b574:	28c6703a 	and	r3,r5,r3
 401b578:	8005883a 	mov	r2,r16
 401b57c:	1906b03a 	or	r3,r3,r4
 401b580:	dfc00117 	ldw	ra,4(sp)
 401b584:	dc000017 	ldw	r16,0(sp)
 401b588:	dec00204 	addi	sp,sp,8
 401b58c:	f800283a 	ret
 401b590:	00c002c4 	movi	r3,11
 401b594:	188bc83a 	sub	r5,r3,r2
 401b598:	814ad83a 	srl	r5,r16,r5
 401b59c:	00c00434 	movhi	r3,16
 401b5a0:	18ffffc4 	addi	r3,r3,-1
 401b5a4:	81a0983a 	sll	r16,r16,r6
 401b5a8:	2101ffcc 	andi	r4,r4,2047
 401b5ac:	28ca703a 	and	r5,r5,r3
 401b5b0:	003fed06 	br	401b568 <__alt_mem_onchip_memory2_0+0xfc01a2e8>
 401b5b4:	0009883a 	mov	r4,zero
 401b5b8:	000b883a 	mov	r5,zero
 401b5bc:	003fea06 	br	401b568 <__alt_mem_onchip_memory2_0+0xfc01a2e8>

0401b5c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b5c0:	defffe04 	addi	sp,sp,-8
 401b5c4:	dfc00115 	stw	ra,4(sp)
 401b5c8:	df000015 	stw	fp,0(sp)
 401b5cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b5d0:	d0a5b717 	ldw	r2,-26916(gp)
 401b5d4:	10000326 	beq	r2,zero,401b5e4 <alt_get_errno+0x24>
 401b5d8:	d0a5b717 	ldw	r2,-26916(gp)
 401b5dc:	103ee83a 	callr	r2
 401b5e0:	00000106 	br	401b5e8 <alt_get_errno+0x28>
 401b5e4:	d0b23f04 	addi	r2,gp,-14084
}
 401b5e8:	e037883a 	mov	sp,fp
 401b5ec:	dfc00117 	ldw	ra,4(sp)
 401b5f0:	df000017 	ldw	fp,0(sp)
 401b5f4:	dec00204 	addi	sp,sp,8
 401b5f8:	f800283a 	ret

0401b5fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 401b5fc:	defffb04 	addi	sp,sp,-20
 401b600:	dfc00415 	stw	ra,16(sp)
 401b604:	df000315 	stw	fp,12(sp)
 401b608:	df000304 	addi	fp,sp,12
 401b60c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 401b610:	e0bfff17 	ldw	r2,-4(fp)
 401b614:	10000816 	blt	r2,zero,401b638 <close+0x3c>
 401b618:	01400304 	movi	r5,12
 401b61c:	e13fff17 	ldw	r4,-4(fp)
 401b620:	400d2c40 	call	400d2c4 <__mulsi3>
 401b624:	1007883a 	mov	r3,r2
 401b628:	008100b4 	movhi	r2,1026
 401b62c:	109f2d04 	addi	r2,r2,31924
 401b630:	1885883a 	add	r2,r3,r2
 401b634:	00000106 	br	401b63c <close+0x40>
 401b638:	0005883a 	mov	r2,zero
 401b63c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 401b640:	e0bffd17 	ldw	r2,-12(fp)
 401b644:	10001926 	beq	r2,zero,401b6ac <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 401b648:	e0bffd17 	ldw	r2,-12(fp)
 401b64c:	10800017 	ldw	r2,0(r2)
 401b650:	10800417 	ldw	r2,16(r2)
 401b654:	10000626 	beq	r2,zero,401b670 <close+0x74>
 401b658:	e0bffd17 	ldw	r2,-12(fp)
 401b65c:	10800017 	ldw	r2,0(r2)
 401b660:	10800417 	ldw	r2,16(r2)
 401b664:	e13ffd17 	ldw	r4,-12(fp)
 401b668:	103ee83a 	callr	r2
 401b66c:	00000106 	br	401b674 <close+0x78>
 401b670:	0005883a 	mov	r2,zero
 401b674:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 401b678:	e13fff17 	ldw	r4,-4(fp)
 401b67c:	401bea40 	call	401bea4 <alt_release_fd>
    if (rval < 0)
 401b680:	e0bffe17 	ldw	r2,-8(fp)
 401b684:	1000070e 	bge	r2,zero,401b6a4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 401b688:	401b5c00 	call	401b5c0 <alt_get_errno>
 401b68c:	1007883a 	mov	r3,r2
 401b690:	e0bffe17 	ldw	r2,-8(fp)
 401b694:	0085c83a 	sub	r2,zero,r2
 401b698:	18800015 	stw	r2,0(r3)
      return -1;
 401b69c:	00bfffc4 	movi	r2,-1
 401b6a0:	00000706 	br	401b6c0 <close+0xc4>
    }
    return 0;
 401b6a4:	0005883a 	mov	r2,zero
 401b6a8:	00000506 	br	401b6c0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401b6ac:	401b5c00 	call	401b5c0 <alt_get_errno>
 401b6b0:	1007883a 	mov	r3,r2
 401b6b4:	00801444 	movi	r2,81
 401b6b8:	18800015 	stw	r2,0(r3)
    return -1;
 401b6bc:	00bfffc4 	movi	r2,-1
  }
}
 401b6c0:	e037883a 	mov	sp,fp
 401b6c4:	dfc00117 	ldw	ra,4(sp)
 401b6c8:	df000017 	ldw	fp,0(sp)
 401b6cc:	dec00204 	addi	sp,sp,8
 401b6d0:	f800283a 	ret

0401b6d4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 401b6d4:	defffc04 	addi	sp,sp,-16
 401b6d8:	df000315 	stw	fp,12(sp)
 401b6dc:	df000304 	addi	fp,sp,12
 401b6e0:	e13ffd15 	stw	r4,-12(fp)
 401b6e4:	e17ffe15 	stw	r5,-8(fp)
 401b6e8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 401b6ec:	e0bfff17 	ldw	r2,-4(fp)
}
 401b6f0:	e037883a 	mov	sp,fp
 401b6f4:	df000017 	ldw	fp,0(sp)
 401b6f8:	dec00104 	addi	sp,sp,4
 401b6fc:	f800283a 	ret

0401b700 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401b700:	defffd04 	addi	sp,sp,-12
 401b704:	df000215 	stw	fp,8(sp)
 401b708:	df000204 	addi	fp,sp,8
 401b70c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401b710:	0001883a 	nop
 401b714:	e0bfff17 	ldw	r2,-4(fp)
 401b718:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 401b71c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401b720:	10000226 	beq	r2,zero,401b72c <_exit+0x2c>
    ALT_SIM_FAIL();
 401b724:	002af070 	cmpltui	zero,zero,43969
 401b728:	00000106 	br	401b730 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 401b72c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401b730:	003fff06 	br	401b730 <__alt_mem_onchip_memory2_0+0xfc01a4b0>

0401b734 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b734:	defffe04 	addi	sp,sp,-8
 401b738:	dfc00115 	stw	ra,4(sp)
 401b73c:	df000015 	stw	fp,0(sp)
 401b740:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b744:	d0a5b717 	ldw	r2,-26916(gp)
 401b748:	10000326 	beq	r2,zero,401b758 <alt_get_errno+0x24>
 401b74c:	d0a5b717 	ldw	r2,-26916(gp)
 401b750:	103ee83a 	callr	r2
 401b754:	00000106 	br	401b75c <alt_get_errno+0x28>
 401b758:	d0b23f04 	addi	r2,gp,-14084
}
 401b75c:	e037883a 	mov	sp,fp
 401b760:	dfc00117 	ldw	ra,4(sp)
 401b764:	df000017 	ldw	fp,0(sp)
 401b768:	dec00204 	addi	sp,sp,8
 401b76c:	f800283a 	ret

0401b770 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 401b770:	defffb04 	addi	sp,sp,-20
 401b774:	dfc00415 	stw	ra,16(sp)
 401b778:	df000315 	stw	fp,12(sp)
 401b77c:	df000304 	addi	fp,sp,12
 401b780:	e13ffe15 	stw	r4,-8(fp)
 401b784:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401b788:	e0bffe17 	ldw	r2,-8(fp)
 401b78c:	10000816 	blt	r2,zero,401b7b0 <fstat+0x40>
 401b790:	01400304 	movi	r5,12
 401b794:	e13ffe17 	ldw	r4,-8(fp)
 401b798:	400d2c40 	call	400d2c4 <__mulsi3>
 401b79c:	1007883a 	mov	r3,r2
 401b7a0:	008100b4 	movhi	r2,1026
 401b7a4:	109f2d04 	addi	r2,r2,31924
 401b7a8:	1885883a 	add	r2,r3,r2
 401b7ac:	00000106 	br	401b7b4 <fstat+0x44>
 401b7b0:	0005883a 	mov	r2,zero
 401b7b4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 401b7b8:	e0bffd17 	ldw	r2,-12(fp)
 401b7bc:	10001026 	beq	r2,zero,401b800 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 401b7c0:	e0bffd17 	ldw	r2,-12(fp)
 401b7c4:	10800017 	ldw	r2,0(r2)
 401b7c8:	10800817 	ldw	r2,32(r2)
 401b7cc:	10000726 	beq	r2,zero,401b7ec <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 401b7d0:	e0bffd17 	ldw	r2,-12(fp)
 401b7d4:	10800017 	ldw	r2,0(r2)
 401b7d8:	10800817 	ldw	r2,32(r2)
 401b7dc:	e17fff17 	ldw	r5,-4(fp)
 401b7e0:	e13ffd17 	ldw	r4,-12(fp)
 401b7e4:	103ee83a 	callr	r2
 401b7e8:	00000a06 	br	401b814 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 401b7ec:	e0bfff17 	ldw	r2,-4(fp)
 401b7f0:	00c80004 	movi	r3,8192
 401b7f4:	10c00115 	stw	r3,4(r2)
      return 0;
 401b7f8:	0005883a 	mov	r2,zero
 401b7fc:	00000506 	br	401b814 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401b800:	401b7340 	call	401b734 <alt_get_errno>
 401b804:	1007883a 	mov	r3,r2
 401b808:	00801444 	movi	r2,81
 401b80c:	18800015 	stw	r2,0(r3)
    return -1;
 401b810:	00bfffc4 	movi	r2,-1
  }
}
 401b814:	e037883a 	mov	sp,fp
 401b818:	dfc00117 	ldw	ra,4(sp)
 401b81c:	df000017 	ldw	fp,0(sp)
 401b820:	dec00204 	addi	sp,sp,8
 401b824:	f800283a 	ret

0401b828 <getpid>:
 401b828:	deffff04 	addi	sp,sp,-4
 401b82c:	df000015 	stw	fp,0(sp)
 401b830:	d839883a 	mov	fp,sp
 401b834:	0005883a 	mov	r2,zero
 401b838:	e037883a 	mov	sp,fp
 401b83c:	df000017 	ldw	fp,0(sp)
 401b840:	dec00104 	addi	sp,sp,4
 401b844:	f800283a 	ret

0401b848 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b848:	defffe04 	addi	sp,sp,-8
 401b84c:	dfc00115 	stw	ra,4(sp)
 401b850:	df000015 	stw	fp,0(sp)
 401b854:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b858:	d0a5b717 	ldw	r2,-26916(gp)
 401b85c:	10000326 	beq	r2,zero,401b86c <alt_get_errno+0x24>
 401b860:	d0a5b717 	ldw	r2,-26916(gp)
 401b864:	103ee83a 	callr	r2
 401b868:	00000106 	br	401b870 <alt_get_errno+0x28>
 401b86c:	d0b23f04 	addi	r2,gp,-14084
}
 401b870:	e037883a 	mov	sp,fp
 401b874:	dfc00117 	ldw	ra,4(sp)
 401b878:	df000017 	ldw	fp,0(sp)
 401b87c:	dec00204 	addi	sp,sp,8
 401b880:	f800283a 	ret

0401b884 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 401b884:	deffed04 	addi	sp,sp,-76
 401b888:	dfc01215 	stw	ra,72(sp)
 401b88c:	df001115 	stw	fp,68(sp)
 401b890:	df001104 	addi	fp,sp,68
 401b894:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401b898:	e0bfff17 	ldw	r2,-4(fp)
 401b89c:	10000816 	blt	r2,zero,401b8c0 <isatty+0x3c>
 401b8a0:	01400304 	movi	r5,12
 401b8a4:	e13fff17 	ldw	r4,-4(fp)
 401b8a8:	400d2c40 	call	400d2c4 <__mulsi3>
 401b8ac:	1007883a 	mov	r3,r2
 401b8b0:	008100b4 	movhi	r2,1026
 401b8b4:	109f2d04 	addi	r2,r2,31924
 401b8b8:	1885883a 	add	r2,r3,r2
 401b8bc:	00000106 	br	401b8c4 <isatty+0x40>
 401b8c0:	0005883a 	mov	r2,zero
 401b8c4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 401b8c8:	e0bfef17 	ldw	r2,-68(fp)
 401b8cc:	10000e26 	beq	r2,zero,401b908 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 401b8d0:	e0bfef17 	ldw	r2,-68(fp)
 401b8d4:	10800017 	ldw	r2,0(r2)
 401b8d8:	10800817 	ldw	r2,32(r2)
 401b8dc:	1000021e 	bne	r2,zero,401b8e8 <isatty+0x64>
    {
      return 1;
 401b8e0:	00800044 	movi	r2,1
 401b8e4:	00000d06 	br	401b91c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 401b8e8:	e0bff004 	addi	r2,fp,-64
 401b8ec:	100b883a 	mov	r5,r2
 401b8f0:	e13fff17 	ldw	r4,-4(fp)
 401b8f4:	401b7700 	call	401b770 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 401b8f8:	e0bff117 	ldw	r2,-60(fp)
 401b8fc:	10880020 	cmpeqi	r2,r2,8192
 401b900:	10803fcc 	andi	r2,r2,255
 401b904:	00000506 	br	401b91c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401b908:	401b8480 	call	401b848 <alt_get_errno>
 401b90c:	1007883a 	mov	r3,r2
 401b910:	00801444 	movi	r2,81
 401b914:	18800015 	stw	r2,0(r3)
    return 0;
 401b918:	0005883a 	mov	r2,zero
  }
}
 401b91c:	e037883a 	mov	sp,fp
 401b920:	dfc00117 	ldw	ra,4(sp)
 401b924:	df000017 	ldw	fp,0(sp)
 401b928:	dec00204 	addi	sp,sp,8
 401b92c:	f800283a 	ret

0401b930 <alt_get_errno>:
 401b930:	defffe04 	addi	sp,sp,-8
 401b934:	dfc00115 	stw	ra,4(sp)
 401b938:	df000015 	stw	fp,0(sp)
 401b93c:	d839883a 	mov	fp,sp
 401b940:	d0a5b717 	ldw	r2,-26916(gp)
 401b944:	10000326 	beq	r2,zero,401b954 <alt_get_errno+0x24>
 401b948:	d0a5b717 	ldw	r2,-26916(gp)
 401b94c:	103ee83a 	callr	r2
 401b950:	00000106 	br	401b958 <alt_get_errno+0x28>
 401b954:	d0b23f04 	addi	r2,gp,-14084
 401b958:	e037883a 	mov	sp,fp
 401b95c:	dfc00117 	ldw	ra,4(sp)
 401b960:	df000017 	ldw	fp,0(sp)
 401b964:	dec00204 	addi	sp,sp,8
 401b968:	f800283a 	ret

0401b96c <kill>:
 401b96c:	defffb04 	addi	sp,sp,-20
 401b970:	dfc00415 	stw	ra,16(sp)
 401b974:	df000315 	stw	fp,12(sp)
 401b978:	df000304 	addi	fp,sp,12
 401b97c:	e13ffe15 	stw	r4,-8(fp)
 401b980:	e17fff15 	stw	r5,-4(fp)
 401b984:	e03ffd15 	stw	zero,-12(fp)
 401b988:	e0bffe17 	ldw	r2,-8(fp)
 401b98c:	00802f16 	blt	zero,r2,401ba4c <kill+0xe0>
 401b990:	e0bfff17 	ldw	r2,-4(fp)
 401b994:	10800828 	cmpgeui	r2,r2,32
 401b998:	1000291e 	bne	r2,zero,401ba40 <kill+0xd4>
 401b99c:	e0bfff17 	ldw	r2,-4(fp)
 401b9a0:	100690ba 	slli	r3,r2,2
 401b9a4:	008100b4 	movhi	r2,1026
 401b9a8:	10ae6e04 	addi	r2,r2,-17992
 401b9ac:	1885883a 	add	r2,r3,r2
 401b9b0:	10800017 	ldw	r2,0(r2)
 401b9b4:	1000683a 	jmp	r2
 401b9b8:	0401ba60 	cmpeqi	r16,zero,1769
 401b9bc:	0401ba40 	call	401ba4 <__alt_mem_sdram-0x3bfe45c>
 401b9c0:	0401ba40 	call	401ba4 <__alt_mem_sdram-0x3bfe45c>
 401b9c4:	0401ba38 	rdprs	r16,zero,1768
 401b9c8:	0401ba38 	rdprs	r16,zero,1768
 401b9cc:	0401ba38 	rdprs	r16,zero,1768
 401b9d0:	0401ba38 	rdprs	r16,zero,1768
 401b9d4:	0401ba40 	call	401ba4 <__alt_mem_sdram-0x3bfe45c>
 401b9d8:	0401ba38 	rdprs	r16,zero,1768
 401b9dc:	0401ba38 	rdprs	r16,zero,1768
 401b9e0:	0401ba38 	rdprs	r16,zero,1768
 401b9e4:	0401ba38 	rdprs	r16,zero,1768
 401b9e8:	0401ba38 	rdprs	r16,zero,1768
 401b9ec:	0401ba38 	rdprs	r16,zero,1768
 401b9f0:	0401ba38 	rdprs	r16,zero,1768
 401b9f4:	0401ba38 	rdprs	r16,zero,1768
 401b9f8:	0401ba60 	cmpeqi	r16,zero,1769
 401b9fc:	0401ba40 	call	401ba4 <__alt_mem_sdram-0x3bfe45c>
 401ba00:	0401ba40 	call	401ba4 <__alt_mem_sdram-0x3bfe45c>
 401ba04:	0401ba40 	call	401ba4 <__alt_mem_sdram-0x3bfe45c>
 401ba08:	0401ba60 	cmpeqi	r16,zero,1769
 401ba0c:	0401ba40 	call	401ba4 <__alt_mem_sdram-0x3bfe45c>
 401ba10:	0401ba40 	call	401ba4 <__alt_mem_sdram-0x3bfe45c>
 401ba14:	0401ba38 	rdprs	r16,zero,1768
 401ba18:	0401ba38 	rdprs	r16,zero,1768
 401ba1c:	0401ba38 	rdprs	r16,zero,1768
 401ba20:	0401ba38 	rdprs	r16,zero,1768
 401ba24:	0401ba38 	rdprs	r16,zero,1768
 401ba28:	0401ba40 	call	401ba4 <__alt_mem_sdram-0x3bfe45c>
 401ba2c:	0401ba40 	call	401ba4 <__alt_mem_sdram-0x3bfe45c>
 401ba30:	0401ba38 	rdprs	r16,zero,1768
 401ba34:	0401ba38 	rdprs	r16,zero,1768
 401ba38:	0009883a 	mov	r4,zero
 401ba3c:	401b7000 	call	401b700 <_exit>
 401ba40:	00800584 	movi	r2,22
 401ba44:	e0bffd15 	stw	r2,-12(fp)
 401ba48:	00000606 	br	401ba64 <kill+0xf8>
 401ba4c:	e0bffe17 	ldw	r2,-8(fp)
 401ba50:	0080040e 	bge	zero,r2,401ba64 <kill+0xf8>
 401ba54:	008000c4 	movi	r2,3
 401ba58:	e0bffd15 	stw	r2,-12(fp)
 401ba5c:	00000106 	br	401ba64 <kill+0xf8>
 401ba60:	0001883a 	nop
 401ba64:	e0bffd17 	ldw	r2,-12(fp)
 401ba68:	10000626 	beq	r2,zero,401ba84 <kill+0x118>
 401ba6c:	401b9300 	call	401b930 <alt_get_errno>
 401ba70:	1007883a 	mov	r3,r2
 401ba74:	e0bffd17 	ldw	r2,-12(fp)
 401ba78:	18800015 	stw	r2,0(r3)
 401ba7c:	00bfffc4 	movi	r2,-1
 401ba80:	00000106 	br	401ba88 <kill+0x11c>
 401ba84:	0005883a 	mov	r2,zero
 401ba88:	e037883a 	mov	sp,fp
 401ba8c:	dfc00117 	ldw	ra,4(sp)
 401ba90:	df000017 	ldw	fp,0(sp)
 401ba94:	dec00204 	addi	sp,sp,8
 401ba98:	f800283a 	ret

0401ba9c <alt_load_section>:
 401ba9c:	defffc04 	addi	sp,sp,-16
 401baa0:	df000315 	stw	fp,12(sp)
 401baa4:	df000304 	addi	fp,sp,12
 401baa8:	e13ffd15 	stw	r4,-12(fp)
 401baac:	e17ffe15 	stw	r5,-8(fp)
 401bab0:	e1bfff15 	stw	r6,-4(fp)
 401bab4:	e0fffe17 	ldw	r3,-8(fp)
 401bab8:	e0bffd17 	ldw	r2,-12(fp)
 401babc:	18800c26 	beq	r3,r2,401baf0 <alt_load_section+0x54>
 401bac0:	00000806 	br	401bae4 <alt_load_section+0x48>
 401bac4:	e0bffe17 	ldw	r2,-8(fp)
 401bac8:	10c00104 	addi	r3,r2,4
 401bacc:	e0fffe15 	stw	r3,-8(fp)
 401bad0:	e0fffd17 	ldw	r3,-12(fp)
 401bad4:	19000104 	addi	r4,r3,4
 401bad8:	e13ffd15 	stw	r4,-12(fp)
 401badc:	18c00017 	ldw	r3,0(r3)
 401bae0:	10c00015 	stw	r3,0(r2)
 401bae4:	e0fffe17 	ldw	r3,-8(fp)
 401bae8:	e0bfff17 	ldw	r2,-4(fp)
 401baec:	18bff51e 	bne	r3,r2,401bac4 <__alt_mem_onchip_memory2_0+0xfc01a844>
 401baf0:	0001883a 	nop
 401baf4:	e037883a 	mov	sp,fp
 401baf8:	df000017 	ldw	fp,0(sp)
 401bafc:	dec00104 	addi	sp,sp,4
 401bb00:	f800283a 	ret

0401bb04 <alt_load>:
 401bb04:	defffe04 	addi	sp,sp,-8
 401bb08:	dfc00115 	stw	ra,4(sp)
 401bb0c:	df000015 	stw	fp,0(sp)
 401bb10:	d839883a 	mov	fp,sp
 401bb14:	018100f4 	movhi	r6,1027
 401bb18:	31a97104 	addi	r6,r6,-23100
 401bb1c:	014100b4 	movhi	r5,1026
 401bb20:	295cfa04 	addi	r5,r5,29672
 401bb24:	010100f4 	movhi	r4,1027
 401bb28:	21297104 	addi	r4,r4,-23100
 401bb2c:	401ba9c0 	call	401ba9c <alt_load_section>
 401bb30:	01810034 	movhi	r6,1024
 401bb34:	31808c04 	addi	r6,r6,560
 401bb38:	01410034 	movhi	r5,1024
 401bb3c:	29400804 	addi	r5,r5,32
 401bb40:	01010034 	movhi	r4,1024
 401bb44:	21000804 	addi	r4,r4,32
 401bb48:	401ba9c0 	call	401ba9c <alt_load_section>
 401bb4c:	018100b4 	movhi	r6,1026
 401bb50:	319cfa04 	addi	r6,r6,29672
 401bb54:	014100b4 	movhi	r5,1026
 401bb58:	29407e04 	addi	r5,r5,504
 401bb5c:	010100b4 	movhi	r4,1026
 401bb60:	21007e04 	addi	r4,r4,504
 401bb64:	401ba9c0 	call	401ba9c <alt_load_section>
 401bb68:	401eecc0 	call	401eecc <alt_dcache_flush_all>
 401bb6c:	401f11c0 	call	401f11c <alt_icache_flush_all>
 401bb70:	0001883a 	nop
 401bb74:	e037883a 	mov	sp,fp
 401bb78:	dfc00117 	ldw	ra,4(sp)
 401bb7c:	df000017 	ldw	fp,0(sp)
 401bb80:	dec00204 	addi	sp,sp,8
 401bb84:	f800283a 	ret

0401bb88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401bb88:	defffe04 	addi	sp,sp,-8
 401bb8c:	dfc00115 	stw	ra,4(sp)
 401bb90:	df000015 	stw	fp,0(sp)
 401bb94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401bb98:	d0a5b717 	ldw	r2,-26916(gp)
 401bb9c:	10000326 	beq	r2,zero,401bbac <alt_get_errno+0x24>
 401bba0:	d0a5b717 	ldw	r2,-26916(gp)
 401bba4:	103ee83a 	callr	r2
 401bba8:	00000106 	br	401bbb0 <alt_get_errno+0x28>
 401bbac:	d0b23f04 	addi	r2,gp,-14084
}
 401bbb0:	e037883a 	mov	sp,fp
 401bbb4:	dfc00117 	ldw	ra,4(sp)
 401bbb8:	df000017 	ldw	fp,0(sp)
 401bbbc:	dec00204 	addi	sp,sp,8
 401bbc0:	f800283a 	ret

0401bbc4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 401bbc4:	defff904 	addi	sp,sp,-28
 401bbc8:	dfc00615 	stw	ra,24(sp)
 401bbcc:	df000515 	stw	fp,20(sp)
 401bbd0:	df000504 	addi	fp,sp,20
 401bbd4:	e13ffd15 	stw	r4,-12(fp)
 401bbd8:	e17ffe15 	stw	r5,-8(fp)
 401bbdc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 401bbe0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401bbe4:	e0bffd17 	ldw	r2,-12(fp)
 401bbe8:	10000816 	blt	r2,zero,401bc0c <lseek+0x48>
 401bbec:	01400304 	movi	r5,12
 401bbf0:	e13ffd17 	ldw	r4,-12(fp)
 401bbf4:	400d2c40 	call	400d2c4 <__mulsi3>
 401bbf8:	1007883a 	mov	r3,r2
 401bbfc:	008100b4 	movhi	r2,1026
 401bc00:	109f2d04 	addi	r2,r2,31924
 401bc04:	1885883a 	add	r2,r3,r2
 401bc08:	00000106 	br	401bc10 <lseek+0x4c>
 401bc0c:	0005883a 	mov	r2,zero
 401bc10:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 401bc14:	e0bffc17 	ldw	r2,-16(fp)
 401bc18:	10001026 	beq	r2,zero,401bc5c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 401bc1c:	e0bffc17 	ldw	r2,-16(fp)
 401bc20:	10800017 	ldw	r2,0(r2)
 401bc24:	10800717 	ldw	r2,28(r2)
 401bc28:	10000926 	beq	r2,zero,401bc50 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 401bc2c:	e0bffc17 	ldw	r2,-16(fp)
 401bc30:	10800017 	ldw	r2,0(r2)
 401bc34:	10800717 	ldw	r2,28(r2)
 401bc38:	e1bfff17 	ldw	r6,-4(fp)
 401bc3c:	e17ffe17 	ldw	r5,-8(fp)
 401bc40:	e13ffc17 	ldw	r4,-16(fp)
 401bc44:	103ee83a 	callr	r2
 401bc48:	e0bffb15 	stw	r2,-20(fp)
 401bc4c:	00000506 	br	401bc64 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 401bc50:	00bfde84 	movi	r2,-134
 401bc54:	e0bffb15 	stw	r2,-20(fp)
 401bc58:	00000206 	br	401bc64 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 401bc5c:	00bfebc4 	movi	r2,-81
 401bc60:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 401bc64:	e0bffb17 	ldw	r2,-20(fp)
 401bc68:	1000070e 	bge	r2,zero,401bc88 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 401bc6c:	401bb880 	call	401bb88 <alt_get_errno>
 401bc70:	1007883a 	mov	r3,r2
 401bc74:	e0bffb17 	ldw	r2,-20(fp)
 401bc78:	0085c83a 	sub	r2,zero,r2
 401bc7c:	18800015 	stw	r2,0(r3)
    rc = -1;
 401bc80:	00bfffc4 	movi	r2,-1
 401bc84:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 401bc88:	e0bffb17 	ldw	r2,-20(fp)
}
 401bc8c:	e037883a 	mov	sp,fp
 401bc90:	dfc00117 	ldw	ra,4(sp)
 401bc94:	df000017 	ldw	fp,0(sp)
 401bc98:	dec00204 	addi	sp,sp,8
 401bc9c:	f800283a 	ret

0401bca0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 401bca0:	defffd04 	addi	sp,sp,-12
 401bca4:	dfc00215 	stw	ra,8(sp)
 401bca8:	df000115 	stw	fp,4(sp)
 401bcac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 401bcb0:	0009883a 	mov	r4,zero
 401bcb4:	401c22c0 	call	401c22c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 401bcb8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 401bcbc:	401c2640 	call	401c264 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 401bcc0:	018100b4 	movhi	r6,1026
 401bcc4:	319ce504 	addi	r6,r6,29588
 401bcc8:	014100b4 	movhi	r5,1026
 401bccc:	295ce504 	addi	r5,r5,29588
 401bcd0:	010100b4 	movhi	r4,1026
 401bcd4:	211ce504 	addi	r4,r4,29588
 401bcd8:	401f4c00 	call	401f4c0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 401bcdc:	401efcc0 	call	401efcc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 401bce0:	010100b4 	movhi	r4,1026
 401bce4:	213c0b04 	addi	r4,r4,-4052
 401bce8:	401fe580 	call	401fe58 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 401bcec:	d0b24317 	ldw	r2,-14068(gp)
 401bcf0:	d0f24417 	ldw	r3,-14064(gp)
 401bcf4:	d1324517 	ldw	r4,-14060(gp)
 401bcf8:	200d883a 	mov	r6,r4
 401bcfc:	180b883a 	mov	r5,r3
 401bd00:	1009883a 	mov	r4,r2
 401bd04:	4009dbc0 	call	4009dbc <main>
 401bd08:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 401bd0c:	01000044 	movi	r4,1
 401bd10:	401b5fc0 	call	401b5fc <close>
  exit (result);
 401bd14:	e13fff17 	ldw	r4,-4(fp)
 401bd18:	401fe6c0 	call	401fe6c <exit>

0401bd1c <__malloc_lock>:
 401bd1c:	defffe04 	addi	sp,sp,-8
 401bd20:	df000115 	stw	fp,4(sp)
 401bd24:	df000104 	addi	fp,sp,4
 401bd28:	e13fff15 	stw	r4,-4(fp)
 401bd2c:	0001883a 	nop
 401bd30:	e037883a 	mov	sp,fp
 401bd34:	df000017 	ldw	fp,0(sp)
 401bd38:	dec00104 	addi	sp,sp,4
 401bd3c:	f800283a 	ret

0401bd40 <__malloc_unlock>:
 401bd40:	defffe04 	addi	sp,sp,-8
 401bd44:	df000115 	stw	fp,4(sp)
 401bd48:	df000104 	addi	fp,sp,4
 401bd4c:	e13fff15 	stw	r4,-4(fp)
 401bd50:	0001883a 	nop
 401bd54:	e037883a 	mov	sp,fp
 401bd58:	df000017 	ldw	fp,0(sp)
 401bd5c:	dec00104 	addi	sp,sp,4
 401bd60:	f800283a 	ret

0401bd64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401bd64:	defffe04 	addi	sp,sp,-8
 401bd68:	dfc00115 	stw	ra,4(sp)
 401bd6c:	df000015 	stw	fp,0(sp)
 401bd70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401bd74:	d0a5b717 	ldw	r2,-26916(gp)
 401bd78:	10000326 	beq	r2,zero,401bd88 <alt_get_errno+0x24>
 401bd7c:	d0a5b717 	ldw	r2,-26916(gp)
 401bd80:	103ee83a 	callr	r2
 401bd84:	00000106 	br	401bd8c <alt_get_errno+0x28>
 401bd88:	d0b23f04 	addi	r2,gp,-14084
}
 401bd8c:	e037883a 	mov	sp,fp
 401bd90:	dfc00117 	ldw	ra,4(sp)
 401bd94:	df000017 	ldw	fp,0(sp)
 401bd98:	dec00204 	addi	sp,sp,8
 401bd9c:	f800283a 	ret

0401bda0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 401bda0:	defff904 	addi	sp,sp,-28
 401bda4:	dfc00615 	stw	ra,24(sp)
 401bda8:	df000515 	stw	fp,20(sp)
 401bdac:	df000504 	addi	fp,sp,20
 401bdb0:	e13ffd15 	stw	r4,-12(fp)
 401bdb4:	e17ffe15 	stw	r5,-8(fp)
 401bdb8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401bdbc:	e0bffd17 	ldw	r2,-12(fp)
 401bdc0:	10000816 	blt	r2,zero,401bde4 <read+0x44>
 401bdc4:	01400304 	movi	r5,12
 401bdc8:	e13ffd17 	ldw	r4,-12(fp)
 401bdcc:	400d2c40 	call	400d2c4 <__mulsi3>
 401bdd0:	1007883a 	mov	r3,r2
 401bdd4:	008100b4 	movhi	r2,1026
 401bdd8:	109f2d04 	addi	r2,r2,31924
 401bddc:	1885883a 	add	r2,r3,r2
 401bde0:	00000106 	br	401bde8 <read+0x48>
 401bde4:	0005883a 	mov	r2,zero
 401bde8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401bdec:	e0bffb17 	ldw	r2,-20(fp)
 401bdf0:	10002226 	beq	r2,zero,401be7c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401bdf4:	e0bffb17 	ldw	r2,-20(fp)
 401bdf8:	10800217 	ldw	r2,8(r2)
 401bdfc:	108000cc 	andi	r2,r2,3
 401be00:	10800060 	cmpeqi	r2,r2,1
 401be04:	1000181e 	bne	r2,zero,401be68 <read+0xc8>
        (fd->dev->read))
 401be08:	e0bffb17 	ldw	r2,-20(fp)
 401be0c:	10800017 	ldw	r2,0(r2)
 401be10:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401be14:	10001426 	beq	r2,zero,401be68 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 401be18:	e0bffb17 	ldw	r2,-20(fp)
 401be1c:	10800017 	ldw	r2,0(r2)
 401be20:	10800517 	ldw	r2,20(r2)
 401be24:	e0ffff17 	ldw	r3,-4(fp)
 401be28:	180d883a 	mov	r6,r3
 401be2c:	e17ffe17 	ldw	r5,-8(fp)
 401be30:	e13ffb17 	ldw	r4,-20(fp)
 401be34:	103ee83a 	callr	r2
 401be38:	e0bffc15 	stw	r2,-16(fp)
 401be3c:	e0bffc17 	ldw	r2,-16(fp)
 401be40:	1000070e 	bge	r2,zero,401be60 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 401be44:	401bd640 	call	401bd64 <alt_get_errno>
 401be48:	1007883a 	mov	r3,r2
 401be4c:	e0bffc17 	ldw	r2,-16(fp)
 401be50:	0085c83a 	sub	r2,zero,r2
 401be54:	18800015 	stw	r2,0(r3)
          return -1;
 401be58:	00bfffc4 	movi	r2,-1
 401be5c:	00000c06 	br	401be90 <read+0xf0>
        }
        return rval;
 401be60:	e0bffc17 	ldw	r2,-16(fp)
 401be64:	00000a06 	br	401be90 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 401be68:	401bd640 	call	401bd64 <alt_get_errno>
 401be6c:	1007883a 	mov	r3,r2
 401be70:	00800344 	movi	r2,13
 401be74:	18800015 	stw	r2,0(r3)
 401be78:	00000406 	br	401be8c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 401be7c:	401bd640 	call	401bd64 <alt_get_errno>
 401be80:	1007883a 	mov	r3,r2
 401be84:	00801444 	movi	r2,81
 401be88:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401be8c:	00bfffc4 	movi	r2,-1
}
 401be90:	e037883a 	mov	sp,fp
 401be94:	dfc00117 	ldw	ra,4(sp)
 401be98:	df000017 	ldw	fp,0(sp)
 401be9c:	dec00204 	addi	sp,sp,8
 401bea0:	f800283a 	ret

0401bea4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 401bea4:	defffc04 	addi	sp,sp,-16
 401bea8:	dfc00315 	stw	ra,12(sp)
 401beac:	df000215 	stw	fp,8(sp)
 401beb0:	dc000115 	stw	r16,4(sp)
 401beb4:	df000204 	addi	fp,sp,8
 401beb8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 401bebc:	e0bffe17 	ldw	r2,-8(fp)
 401bec0:	108000d0 	cmplti	r2,r2,3
 401bec4:	1000111e 	bne	r2,zero,401bf0c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 401bec8:	040100b4 	movhi	r16,1026
 401becc:	841f2d04 	addi	r16,r16,31924
 401bed0:	e0bffe17 	ldw	r2,-8(fp)
 401bed4:	01400304 	movi	r5,12
 401bed8:	1009883a 	mov	r4,r2
 401bedc:	400d2c40 	call	400d2c4 <__mulsi3>
 401bee0:	8085883a 	add	r2,r16,r2
 401bee4:	10800204 	addi	r2,r2,8
 401bee8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 401beec:	040100b4 	movhi	r16,1026
 401bef0:	841f2d04 	addi	r16,r16,31924
 401bef4:	e0bffe17 	ldw	r2,-8(fp)
 401bef8:	01400304 	movi	r5,12
 401befc:	1009883a 	mov	r4,r2
 401bf00:	400d2c40 	call	400d2c4 <__mulsi3>
 401bf04:	8085883a 	add	r2,r16,r2
 401bf08:	10000015 	stw	zero,0(r2)
  }
}
 401bf0c:	0001883a 	nop
 401bf10:	e6ffff04 	addi	sp,fp,-4
 401bf14:	dfc00217 	ldw	ra,8(sp)
 401bf18:	df000117 	ldw	fp,4(sp)
 401bf1c:	dc000017 	ldw	r16,0(sp)
 401bf20:	dec00304 	addi	sp,sp,12
 401bf24:	f800283a 	ret

0401bf28 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 401bf28:	defff904 	addi	sp,sp,-28
 401bf2c:	df000615 	stw	fp,24(sp)
 401bf30:	df000604 	addi	fp,sp,24
 401bf34:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401bf38:	0005303a 	rdctl	r2,status
 401bf3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401bf40:	e0fffe17 	ldw	r3,-8(fp)
 401bf44:	00bfff84 	movi	r2,-2
 401bf48:	1884703a 	and	r2,r3,r2
 401bf4c:	1001703a 	wrctl	status,r2
  
  return context;
 401bf50:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 401bf54:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 401bf58:	d0a5b817 	ldw	r2,-26912(gp)
 401bf5c:	10c000c4 	addi	r3,r2,3
 401bf60:	00bfff04 	movi	r2,-4
 401bf64:	1884703a 	and	r2,r3,r2
 401bf68:	d0a5b815 	stw	r2,-26912(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 401bf6c:	d0e5b817 	ldw	r3,-26912(gp)
 401bf70:	e0bfff17 	ldw	r2,-4(fp)
 401bf74:	1887883a 	add	r3,r3,r2
 401bf78:	00820034 	movhi	r2,2048
 401bf7c:	10800004 	addi	r2,r2,0
 401bf80:	10c0062e 	bgeu	r2,r3,401bf9c <sbrk+0x74>
 401bf84:	e0bffb17 	ldw	r2,-20(fp)
 401bf88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401bf8c:	e0bffa17 	ldw	r2,-24(fp)
 401bf90:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 401bf94:	00bfffc4 	movi	r2,-1
 401bf98:	00000b06 	br	401bfc8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 401bf9c:	d0a5b817 	ldw	r2,-26912(gp)
 401bfa0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 401bfa4:	d0e5b817 	ldw	r3,-26912(gp)
 401bfa8:	e0bfff17 	ldw	r2,-4(fp)
 401bfac:	1885883a 	add	r2,r3,r2
 401bfb0:	d0a5b815 	stw	r2,-26912(gp)
 401bfb4:	e0bffb17 	ldw	r2,-20(fp)
 401bfb8:	e0bffc15 	stw	r2,-16(fp)
 401bfbc:	e0bffc17 	ldw	r2,-16(fp)
 401bfc0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 401bfc4:	e0bffd17 	ldw	r2,-12(fp)
} 
 401bfc8:	e037883a 	mov	sp,fp
 401bfcc:	df000017 	ldw	fp,0(sp)
 401bfd0:	dec00104 	addi	sp,sp,4
 401bfd4:	f800283a 	ret

0401bfd8 <alt_get_errno>:
 401bfd8:	defffe04 	addi	sp,sp,-8
 401bfdc:	dfc00115 	stw	ra,4(sp)
 401bfe0:	df000015 	stw	fp,0(sp)
 401bfe4:	d839883a 	mov	fp,sp
 401bfe8:	d0a5b717 	ldw	r2,-26916(gp)
 401bfec:	10000326 	beq	r2,zero,401bffc <alt_get_errno+0x24>
 401bff0:	d0a5b717 	ldw	r2,-26916(gp)
 401bff4:	103ee83a 	callr	r2
 401bff8:	00000106 	br	401c000 <alt_get_errno+0x28>
 401bffc:	d0b23f04 	addi	r2,gp,-14084
 401c000:	e037883a 	mov	sp,fp
 401c004:	dfc00117 	ldw	ra,4(sp)
 401c008:	df000017 	ldw	fp,0(sp)
 401c00c:	dec00204 	addi	sp,sp,8
 401c010:	f800283a 	ret

0401c014 <times>:
 401c014:	defffc04 	addi	sp,sp,-16
 401c018:	dfc00315 	stw	ra,12(sp)
 401c01c:	df000215 	stw	fp,8(sp)
 401c020:	df000204 	addi	fp,sp,8
 401c024:	e13fff15 	stw	r4,-4(fp)
 401c028:	d0b24817 	ldw	r2,-14048(gp)
 401c02c:	e0bffe15 	stw	r2,-8(fp)
 401c030:	d0b24717 	ldw	r2,-14052(gp)
 401c034:	1000061e 	bne	r2,zero,401c050 <times+0x3c>
 401c038:	401bfd80 	call	401bfd8 <alt_get_errno>
 401c03c:	1007883a 	mov	r3,r2
 401c040:	00801604 	movi	r2,88
 401c044:	18800015 	stw	r2,0(r3)
 401c048:	0005883a 	mov	r2,zero
 401c04c:	00000a06 	br	401c078 <times+0x64>
 401c050:	e0bfff17 	ldw	r2,-4(fp)
 401c054:	10000015 	stw	zero,0(r2)
 401c058:	e0bfff17 	ldw	r2,-4(fp)
 401c05c:	e0fffe17 	ldw	r3,-8(fp)
 401c060:	10c00115 	stw	r3,4(r2)
 401c064:	e0bfff17 	ldw	r2,-4(fp)
 401c068:	10000215 	stw	zero,8(r2)
 401c06c:	e0bfff17 	ldw	r2,-4(fp)
 401c070:	10000315 	stw	zero,12(r2)
 401c074:	e0bffe17 	ldw	r2,-8(fp)
 401c078:	e037883a 	mov	sp,fp
 401c07c:	dfc00117 	ldw	ra,4(sp)
 401c080:	df000017 	ldw	fp,0(sp)
 401c084:	dec00204 	addi	sp,sp,8
 401c088:	f800283a 	ret

0401c08c <usleep>:
 401c08c:	defffd04 	addi	sp,sp,-12
 401c090:	dfc00215 	stw	ra,8(sp)
 401c094:	df000115 	stw	fp,4(sp)
 401c098:	df000104 	addi	fp,sp,4
 401c09c:	e13fff15 	stw	r4,-4(fp)
 401c0a0:	e13fff17 	ldw	r4,-4(fp)
 401c0a4:	401ed740 	call	401ed74 <alt_busy_sleep>
 401c0a8:	e037883a 	mov	sp,fp
 401c0ac:	dfc00117 	ldw	ra,4(sp)
 401c0b0:	df000017 	ldw	fp,0(sp)
 401c0b4:	dec00204 	addi	sp,sp,8
 401c0b8:	f800283a 	ret

0401c0bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c0bc:	defffe04 	addi	sp,sp,-8
 401c0c0:	dfc00115 	stw	ra,4(sp)
 401c0c4:	df000015 	stw	fp,0(sp)
 401c0c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c0cc:	d0a5b717 	ldw	r2,-26916(gp)
 401c0d0:	10000326 	beq	r2,zero,401c0e0 <alt_get_errno+0x24>
 401c0d4:	d0a5b717 	ldw	r2,-26916(gp)
 401c0d8:	103ee83a 	callr	r2
 401c0dc:	00000106 	br	401c0e4 <alt_get_errno+0x28>
 401c0e0:	d0b23f04 	addi	r2,gp,-14084
}
 401c0e4:	e037883a 	mov	sp,fp
 401c0e8:	dfc00117 	ldw	ra,4(sp)
 401c0ec:	df000017 	ldw	fp,0(sp)
 401c0f0:	dec00204 	addi	sp,sp,8
 401c0f4:	f800283a 	ret

0401c0f8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 401c0f8:	defff904 	addi	sp,sp,-28
 401c0fc:	dfc00615 	stw	ra,24(sp)
 401c100:	df000515 	stw	fp,20(sp)
 401c104:	df000504 	addi	fp,sp,20
 401c108:	e13ffd15 	stw	r4,-12(fp)
 401c10c:	e17ffe15 	stw	r5,-8(fp)
 401c110:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401c114:	e0bffd17 	ldw	r2,-12(fp)
 401c118:	10000816 	blt	r2,zero,401c13c <write+0x44>
 401c11c:	01400304 	movi	r5,12
 401c120:	e13ffd17 	ldw	r4,-12(fp)
 401c124:	400d2c40 	call	400d2c4 <__mulsi3>
 401c128:	1007883a 	mov	r3,r2
 401c12c:	008100b4 	movhi	r2,1026
 401c130:	109f2d04 	addi	r2,r2,31924
 401c134:	1885883a 	add	r2,r3,r2
 401c138:	00000106 	br	401c140 <write+0x48>
 401c13c:	0005883a 	mov	r2,zero
 401c140:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401c144:	e0bffb17 	ldw	r2,-20(fp)
 401c148:	10002126 	beq	r2,zero,401c1d0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 401c14c:	e0bffb17 	ldw	r2,-20(fp)
 401c150:	10800217 	ldw	r2,8(r2)
 401c154:	108000cc 	andi	r2,r2,3
 401c158:	10001826 	beq	r2,zero,401c1bc <write+0xc4>
 401c15c:	e0bffb17 	ldw	r2,-20(fp)
 401c160:	10800017 	ldw	r2,0(r2)
 401c164:	10800617 	ldw	r2,24(r2)
 401c168:	10001426 	beq	r2,zero,401c1bc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 401c16c:	e0bffb17 	ldw	r2,-20(fp)
 401c170:	10800017 	ldw	r2,0(r2)
 401c174:	10800617 	ldw	r2,24(r2)
 401c178:	e0ffff17 	ldw	r3,-4(fp)
 401c17c:	180d883a 	mov	r6,r3
 401c180:	e17ffe17 	ldw	r5,-8(fp)
 401c184:	e13ffb17 	ldw	r4,-20(fp)
 401c188:	103ee83a 	callr	r2
 401c18c:	e0bffc15 	stw	r2,-16(fp)
 401c190:	e0bffc17 	ldw	r2,-16(fp)
 401c194:	1000070e 	bge	r2,zero,401c1b4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 401c198:	401c0bc0 	call	401c0bc <alt_get_errno>
 401c19c:	1007883a 	mov	r3,r2
 401c1a0:	e0bffc17 	ldw	r2,-16(fp)
 401c1a4:	0085c83a 	sub	r2,zero,r2
 401c1a8:	18800015 	stw	r2,0(r3)
        return -1;
 401c1ac:	00bfffc4 	movi	r2,-1
 401c1b0:	00000c06 	br	401c1e4 <write+0xec>
      }
      return rval;
 401c1b4:	e0bffc17 	ldw	r2,-16(fp)
 401c1b8:	00000a06 	br	401c1e4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 401c1bc:	401c0bc0 	call	401c0bc <alt_get_errno>
 401c1c0:	1007883a 	mov	r3,r2
 401c1c4:	00800344 	movi	r2,13
 401c1c8:	18800015 	stw	r2,0(r3)
 401c1cc:	00000406 	br	401c1e0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 401c1d0:	401c0bc0 	call	401c0bc <alt_get_errno>
 401c1d4:	1007883a 	mov	r3,r2
 401c1d8:	00801444 	movi	r2,81
 401c1dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401c1e0:	00bfffc4 	movi	r2,-1
}
 401c1e4:	e037883a 	mov	sp,fp
 401c1e8:	dfc00117 	ldw	ra,4(sp)
 401c1ec:	df000017 	ldw	fp,0(sp)
 401c1f0:	dec00204 	addi	sp,sp,8
 401c1f4:	f800283a 	ret

0401c1f8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 401c1f8:	defffd04 	addi	sp,sp,-12
 401c1fc:	dfc00215 	stw	ra,8(sp)
 401c200:	df000115 	stw	fp,4(sp)
 401c204:	df000104 	addi	fp,sp,4
 401c208:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 401c20c:	d165b404 	addi	r5,gp,-26928
 401c210:	e13fff17 	ldw	r4,-4(fp)
 401c214:	401ef280 	call	401ef28 <alt_dev_llist_insert>
}
 401c218:	e037883a 	mov	sp,fp
 401c21c:	dfc00117 	ldw	ra,4(sp)
 401c220:	df000017 	ldw	fp,0(sp)
 401c224:	dec00204 	addi	sp,sp,8
 401c228:	f800283a 	ret

0401c22c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 401c22c:	defffd04 	addi	sp,sp,-12
 401c230:	dfc00215 	stw	ra,8(sp)
 401c234:	df000115 	stw	fp,4(sp)
 401c238:	df000104 	addi	fp,sp,4
 401c23c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 401c240:	401fbcc0 	call	401fbcc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 401c244:	00800044 	movi	r2,1
 401c248:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 401c24c:	0001883a 	nop
 401c250:	e037883a 	mov	sp,fp
 401c254:	dfc00117 	ldw	ra,4(sp)
 401c258:	df000017 	ldw	fp,0(sp)
 401c25c:	dec00204 	addi	sp,sp,8
 401c260:	f800283a 	ret

0401c264 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 401c264:	defffe04 	addi	sp,sp,-8
 401c268:	dfc00115 	stw	ra,4(sp)
 401c26c:	df000015 	stw	fp,0(sp)
 401c270:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 401c274:	01c0fa04 	movi	r7,1000
 401c278:	01800084 	movi	r6,2
 401c27c:	000b883a 	mov	r5,zero
 401c280:	01020034 	movhi	r4,2048
 401c284:	21041004 	addi	r4,r4,4160
 401c288:	401ebcc0 	call	401ebcc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 401c28c:	010100b4 	movhi	r4,1026
 401c290:	211f8d04 	addi	r4,r4,32308
 401c294:	401c5280 	call	401c528 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 401c298:	01800044 	movi	r6,1
 401c29c:	000b883a 	mov	r5,zero
 401c2a0:	010100b4 	movhi	r4,1026
 401c2a4:	211fa504 	addi	r4,r4,32404
 401c2a8:	401e0540 	call	401e054 <altera_avalon_jtag_uart_init>
 401c2ac:	010100b4 	movhi	r4,1026
 401c2b0:	211f9b04 	addi	r4,r4,32364
 401c2b4:	401c1f80 	call	401c1f8 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 401c2b8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 401c2bc:	0001883a 	nop
}
 401c2c0:	0001883a 	nop
 401c2c4:	e037883a 	mov	sp,fp
 401c2c8:	dfc00117 	ldw	ra,4(sp)
 401c2cc:	df000017 	ldw	fp,0(sp)
 401c2d0:	dec00204 	addi	sp,sp,8
 401c2d4:	f800283a 	ret

0401c2d8 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 401c2d8:	defff904 	addi	sp,sp,-28
 401c2dc:	dfc00615 	stw	ra,24(sp)
 401c2e0:	df000515 	stw	fp,20(sp)
 401c2e4:	df000504 	addi	fp,sp,20
 401c2e8:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 401c2ec:	008000b4 	movhi	r2,2
 401c2f0:	10a1a804 	addi	r2,r2,-31072
 401c2f4:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 401c2f8:	e0bfff17 	ldw	r2,-4(fp)
 401c2fc:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 401c300:	e0bffc17 	ldw	r2,-16(fp)
 401c304:	10800717 	ldw	r2,28(r2)
 401c308:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 401c30c:	e0bffd17 	ldw	r2,-12(fp)
 401c310:	10800217 	ldw	r2,8(r2)
 401c314:	10800098 	cmpnei	r2,r2,2
 401c318:	1000251e 	bne	r2,zero,401c3b0 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 401c31c:	e0bffd17 	ldw	r2,-12(fp)
 401c320:	10c00017 	ldw	r3,0(r2)
 401c324:	e0bffd17 	ldw	r2,-12(fp)
 401c328:	10800117 	ldw	r2,4(r2)
 401c32c:	e13ffe04 	addi	r4,fp,-8
 401c330:	200f883a 	mov	r7,r4
 401c334:	100d883a 	mov	r6,r2
 401c338:	180b883a 	mov	r5,r3
 401c33c:	e13ffc17 	ldw	r4,-16(fp)
 401c340:	401ca880 	call	401ca88 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 401c344:	e0bffd17 	ldw	r2,-12(fp)
 401c348:	10c00117 	ldw	r3,4(r2)
 401c34c:	e0bffe17 	ldw	r2,-8(fp)
 401c350:	1887c83a 	sub	r3,r3,r2
 401c354:	e0bffd17 	ldw	r2,-12(fp)
 401c358:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 401c35c:	e0bffd17 	ldw	r2,-12(fp)
 401c360:	10c00017 	ldw	r3,0(r2)
 401c364:	e0bffe17 	ldw	r2,-8(fp)
 401c368:	1887883a 	add	r3,r3,r2
 401c36c:	e0bffd17 	ldw	r2,-12(fp)
 401c370:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 401c374:	e0bffd17 	ldw	r2,-12(fp)
 401c378:	10800117 	ldw	r2,4(r2)
 401c37c:	10000c26 	beq	r2,zero,401c3b0 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401c380:	01400704 	movi	r5,28
 401c384:	e13ffc17 	ldw	r4,-16(fp)
 401c388:	401dc400 	call	401dc40 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 401c38c:	01400084 	movi	r5,2
 401c390:	e13ffc17 	ldw	r4,-16(fp)
 401c394:	401dce40 	call	401dce4 <alt_avalon_i2c_int_enable>
 401c398:	00000e06 	br	401c3d4 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 401c39c:	e0bffb17 	ldw	r2,-20(fp)
 401c3a0:	10bfffc4 	addi	r2,r2,-1
 401c3a4:	e0bffb15 	stw	r2,-20(fp)
 401c3a8:	e0bffb17 	ldw	r2,-20(fp)
 401c3ac:	10000426 	beq	r2,zero,401c3c0 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 401c3b0:	e13ffc17 	ldw	r4,-16(fp)
 401c3b4:	401ca440 	call	401ca44 <alt_avalon_i2c_is_busy>
 401c3b8:	103ff81e 	bne	r2,zero,401c39c <__alt_mem_onchip_memory2_0+0xfc01b11c>
 401c3bc:	00000106 	br	401c3c4 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 401c3c0:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 401c3c4:	e13ffc17 	ldw	r4,-16(fp)
 401c3c8:	401c6ec0 	call	401c6ec <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 401c3cc:	e0bffd17 	ldw	r2,-12(fp)
 401c3d0:	10000215 	stw	zero,8(r2)
}
 401c3d4:	e037883a 	mov	sp,fp
 401c3d8:	dfc00117 	ldw	ra,4(sp)
 401c3dc:	df000017 	ldw	fp,0(sp)
 401c3e0:	dec00204 	addi	sp,sp,8
 401c3e4:	f800283a 	ret

0401c3e8 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 401c3e8:	defffc04 	addi	sp,sp,-16
 401c3ec:	dfc00315 	stw	ra,12(sp)
 401c3f0:	df000215 	stw	fp,8(sp)
 401c3f4:	df000204 	addi	fp,sp,8
 401c3f8:	e13ffe15 	stw	r4,-8(fp)
 401c3fc:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 401c400:	e0bfff17 	ldw	r2,-4(fp)
 401c404:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 401c408:	e1ffff17 	ldw	r7,-4(fp)
 401c40c:	000d883a 	mov	r6,zero
 401c410:	014100b4 	movhi	r5,1026
 401c414:	2970b604 	addi	r5,r5,-15656
 401c418:	e13ffe17 	ldw	r4,-8(fp)
 401c41c:	401c4d40 	call	401c4d4 <alt_avalon_i2c_register_callback>
}
 401c420:	0001883a 	nop
 401c424:	e037883a 	mov	sp,fp
 401c428:	dfc00117 	ldw	ra,4(sp)
 401c42c:	df000017 	ldw	fp,0(sp)
 401c430:	dec00204 	addi	sp,sp,8
 401c434:	f800283a 	ret

0401c438 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 401c438:	defff904 	addi	sp,sp,-28
 401c43c:	dfc00615 	stw	ra,24(sp)
 401c440:	df000515 	stw	fp,20(sp)
 401c444:	df000504 	addi	fp,sp,20
 401c448:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 401c44c:	e0bfff17 	ldw	r2,-4(fp)
 401c450:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 401c454:	014007c4 	movi	r5,31
 401c458:	e13ffb17 	ldw	r4,-20(fp)
 401c45c:	401dc7c0 	call	401dc7c <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401c460:	01400704 	movi	r5,28
 401c464:	e13ffb17 	ldw	r4,-20(fp)
 401c468:	401dc400 	call	401dc40 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 401c46c:	e0bffb17 	ldw	r2,-20(fp)
 401c470:	10800617 	ldw	r2,24(r2)
 401c474:	10001126 	beq	r2,zero,401c4bc <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c478:	0005303a 	rdctl	r2,status
 401c47c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c480:	e0fffd17 	ldw	r3,-12(fp)
 401c484:	00bfff84 	movi	r2,-2
 401c488:	1884703a 	and	r2,r3,r2
 401c48c:	1001703a 	wrctl	status,r2
  
  return context;
 401c490:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 401c494:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 401c498:	e0bffb17 	ldw	r2,-20(fp)
 401c49c:	10800617 	ldw	r2,24(r2)
 401c4a0:	e13ffb17 	ldw	r4,-20(fp)
 401c4a4:	103ee83a 	callr	r2
 401c4a8:	e0bffc17 	ldw	r2,-16(fp)
 401c4ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c4b0:	e0bffe17 	ldw	r2,-8(fp)
 401c4b4:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 401c4b8:	0001883a 	nop
 401c4bc:	0001883a 	nop
}
 401c4c0:	e037883a 	mov	sp,fp
 401c4c4:	dfc00117 	ldw	ra,4(sp)
 401c4c8:	df000017 	ldw	fp,0(sp)
 401c4cc:	dec00204 	addi	sp,sp,8
 401c4d0:	f800283a 	ret

0401c4d4 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 401c4d4:	defffb04 	addi	sp,sp,-20
 401c4d8:	df000415 	stw	fp,16(sp)
 401c4dc:	df000404 	addi	fp,sp,16
 401c4e0:	e13ffc15 	stw	r4,-16(fp)
 401c4e4:	e17ffd15 	stw	r5,-12(fp)
 401c4e8:	e1bffe15 	stw	r6,-8(fp)
 401c4ec:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 401c4f0:	e0bffc17 	ldw	r2,-16(fp)
 401c4f4:	e0fffd17 	ldw	r3,-12(fp)
 401c4f8:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 401c4fc:	e0bffc17 	ldw	r2,-16(fp)
 401c500:	e0ffff17 	ldw	r3,-4(fp)
 401c504:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 401c508:	e0bffc17 	ldw	r2,-16(fp)
 401c50c:	e0fffe17 	ldw	r3,-8(fp)
 401c510:	10c00815 	stw	r3,32(r2)

    return ;
 401c514:	0001883a 	nop
}
 401c518:	e037883a 	mov	sp,fp
 401c51c:	df000017 	ldw	fp,0(sp)
 401c520:	dec00104 	addi	sp,sp,4
 401c524:	f800283a 	ret

0401c528 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 401c528:	defff704 	addi	sp,sp,-36
 401c52c:	dfc00815 	stw	ra,32(sp)
 401c530:	df000715 	stw	fp,28(sp)
 401c534:	df000704 	addi	fp,sp,28
 401c538:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 401c53c:	e13fff17 	ldw	r4,-4(fp)
 401c540:	401c6ec0 	call	401c6ec <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 401c544:	014007c4 	movi	r5,31
 401c548:	e13fff17 	ldw	r4,-4(fp)
 401c54c:	401dc7c0 	call	401dc7c <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401c550:	01400704 	movi	r5,28
 401c554:	e13fff17 	ldw	r4,-4(fp)
 401c558:	401dc400 	call	401dc40 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 401c55c:	014000c4 	movi	r5,3
 401c560:	e13fff17 	ldw	r4,-4(fp)
 401c564:	401de880 	call	401de88 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 401c568:	014000c4 	movi	r5,3
 401c56c:	e13fff17 	ldw	r4,-4(fp)
 401c570:	401ddd80 	call	401ddd8 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 401c574:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 401c578:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 401c57c:	e0bffb04 	addi	r2,fp,-20
 401c580:	018000b4 	movhi	r6,2
 401c584:	31a1a804 	addi	r6,r6,-31072
 401c588:	100b883a 	mov	r5,r2
 401c58c:	e13fff17 	ldw	r4,-4(fp)
 401c590:	401c9480 	call	401c948 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 401c594:	e0bffb04 	addi	r2,fp,-20
 401c598:	100b883a 	mov	r5,r2
 401c59c:	e13fff17 	ldw	r4,-4(fp)
 401c5a0:	401c7e80 	call	401c7e8 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 401c5a4:	d165b904 	addi	r5,gp,-26908
 401c5a8:	e13fff17 	ldw	r4,-4(fp)
 401c5ac:	401ef280 	call	401ef28 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 401c5b0:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 401c5b4:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 401c5b8:	e0bffa17 	ldw	r2,-24(fp)
 401c5bc:	10000c1e 	bne	r2,zero,401c5f0 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 401c5c0:	e0bfff17 	ldw	r2,-4(fp)
 401c5c4:	10c00417 	ldw	r3,16(r2)
 401c5c8:	e0bfff17 	ldw	r2,-4(fp)
 401c5cc:	10800517 	ldw	r2,20(r2)
 401c5d0:	d8000015 	stw	zero,0(sp)
 401c5d4:	e1ffff17 	ldw	r7,-4(fp)
 401c5d8:	018100b4 	movhi	r6,1026
 401c5dc:	31b10e04 	addi	r6,r6,-15304
 401c5e0:	100b883a 	mov	r5,r2
 401c5e4:	1809883a 	mov	r4,r3
 401c5e8:	401f13c0 	call	401f13c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 401c5ec:	00000406 	br	401c600 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 401c5f0:	010100b4 	movhi	r4,1026
 401c5f4:	211cf204 	addi	r4,r4,29640
 401c5f8:	401f7c00 	call	401f7c0 <alt_printf>
    }

    return;
 401c5fc:	0001883a 	nop

}
 401c600:	e037883a 	mov	sp,fp
 401c604:	dfc00117 	ldw	ra,4(sp)
 401c608:	df000017 	ldw	fp,0(sp)
 401c60c:	dec00204 	addi	sp,sp,8
 401c610:	f800283a 	ret

0401c614 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 401c614:	defffc04 	addi	sp,sp,-16
 401c618:	dfc00315 	stw	ra,12(sp)
 401c61c:	df000215 	stw	fp,8(sp)
 401c620:	df000204 	addi	fp,sp,8
 401c624:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 401c628:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 401c62c:	d165b904 	addi	r5,gp,-26908
 401c630:	e13fff17 	ldw	r4,-4(fp)
 401c634:	401f08c0 	call	401f08c <alt_find_dev>
 401c638:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 401c63c:	e0bffe17 	ldw	r2,-8(fp)
}
 401c640:	e037883a 	mov	sp,fp
 401c644:	dfc00117 	ldw	ra,4(sp)
 401c648:	df000017 	ldw	fp,0(sp)
 401c64c:	dec00204 	addi	sp,sp,8
 401c650:	f800283a 	ret

0401c654 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401c654:	defffc04 	addi	sp,sp,-16
 401c658:	df000315 	stw	fp,12(sp)
 401c65c:	df000304 	addi	fp,sp,12
 401c660:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 401c664:	e0bfff17 	ldw	r2,-4(fp)
 401c668:	10800717 	ldw	r2,28(r2)
 401c66c:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 401c670:	e0bfff17 	ldw	r2,-4(fp)
 401c674:	10800317 	ldw	r2,12(r2)
 401c678:	10800204 	addi	r2,r2,8
 401c67c:	10800037 	ldwio	r2,0(r2)
 401c680:	1080004c 	andi	r2,r2,1
 401c684:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 401c688:	e0bffe17 	ldw	r2,-8(fp)
 401c68c:	10000226 	beq	r2,zero,401c698 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 401c690:	00bffe44 	movi	r2,-7
 401c694:	00001106 	br	401c6dc <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 401c698:	e0bfff17 	ldw	r2,-4(fp)
 401c69c:	10c00617 	ldw	r3,24(r2)
 401c6a0:	008100b4 	movhi	r2,1026
 401c6a4:	10b0b604 	addi	r2,r2,-15656
 401c6a8:	1880021e 	bne	r3,r2,401c6b4 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 401c6ac:	e0bffd17 	ldw	r2,-12(fp)
 401c6b0:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 401c6b4:	e0bfff17 	ldw	r2,-4(fp)
 401c6b8:	10800317 	ldw	r2,12(r2)
 401c6bc:	10800204 	addi	r2,r2,8
 401c6c0:	e0ffff17 	ldw	r3,-4(fp)
 401c6c4:	18c00317 	ldw	r3,12(r3)
 401c6c8:	18c00204 	addi	r3,r3,8
 401c6cc:	18c00037 	ldwio	r3,0(r3)
 401c6d0:	18c00054 	ori	r3,r3,1
 401c6d4:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 401c6d8:	0005883a 	mov	r2,zero
}
 401c6dc:	e037883a 	mov	sp,fp
 401c6e0:	df000017 	ldw	fp,0(sp)
 401c6e4:	dec00104 	addi	sp,sp,4
 401c6e8:	f800283a 	ret

0401c6ec <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401c6ec:	defffe04 	addi	sp,sp,-8
 401c6f0:	df000115 	stw	fp,4(sp)
 401c6f4:	df000104 	addi	fp,sp,4
 401c6f8:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 401c6fc:	e0bfff17 	ldw	r2,-4(fp)
 401c700:	10800317 	ldw	r2,12(r2)
 401c704:	10800204 	addi	r2,r2,8
 401c708:	e0ffff17 	ldw	r3,-4(fp)
 401c70c:	18c00317 	ldw	r3,12(r3)
 401c710:	18c00204 	addi	r3,r3,8
 401c714:	19000037 	ldwio	r4,0(r3)
 401c718:	00ffff84 	movi	r3,-2
 401c71c:	20c6703a 	and	r3,r4,r3
 401c720:	10c00035 	stwio	r3,0(r2)

}
 401c724:	0001883a 	nop
 401c728:	e037883a 	mov	sp,fp
 401c72c:	df000017 	ldw	fp,0(sp)
 401c730:	dec00104 	addi	sp,sp,4
 401c734:	f800283a 	ret

0401c738 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 401c738:	defffd04 	addi	sp,sp,-12
 401c73c:	df000215 	stw	fp,8(sp)
 401c740:	df000204 	addi	fp,sp,8
 401c744:	e13ffe15 	stw	r4,-8(fp)
 401c748:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 401c74c:	e0bffe17 	ldw	r2,-8(fp)
 401c750:	10c00d17 	ldw	r3,52(r2)
 401c754:	e0bfff17 	ldw	r2,-4(fp)
 401c758:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 401c75c:	e0bffe17 	ldw	r2,-8(fp)
 401c760:	10800317 	ldw	r2,12(r2)
 401c764:	10800204 	addi	r2,r2,8
 401c768:	10800037 	ldwio	r2,0(r2)
 401c76c:	1080008c 	andi	r2,r2,2
 401c770:	1005d07a 	srai	r2,r2,1
 401c774:	1007883a 	mov	r3,r2
 401c778:	e0bfff17 	ldw	r2,-4(fp)
 401c77c:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 401c780:	e0bffe17 	ldw	r2,-8(fp)
 401c784:	10800317 	ldw	r2,12(r2)
 401c788:	10800904 	addi	r2,r2,36
 401c78c:	10800037 	ldwio	r2,0(r2)
 401c790:	1007883a 	mov	r3,r2
 401c794:	e0bfff17 	ldw	r2,-4(fp)
 401c798:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 401c79c:	e0bffe17 	ldw	r2,-8(fp)
 401c7a0:	10800317 	ldw	r2,12(r2)
 401c7a4:	10800804 	addi	r2,r2,32
 401c7a8:	10800037 	ldwio	r2,0(r2)
 401c7ac:	1007883a 	mov	r3,r2
 401c7b0:	e0bfff17 	ldw	r2,-4(fp)
 401c7b4:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 401c7b8:	e0bffe17 	ldw	r2,-8(fp)
 401c7bc:	10800317 	ldw	r2,12(r2)
 401c7c0:	10800a04 	addi	r2,r2,40
 401c7c4:	10800037 	ldwio	r2,0(r2)
 401c7c8:	1007883a 	mov	r3,r2
 401c7cc:	e0bfff17 	ldw	r2,-4(fp)
 401c7d0:	10c0030d 	sth	r3,12(r2)
}
 401c7d4:	0001883a 	nop
 401c7d8:	e037883a 	mov	sp,fp
 401c7dc:	df000017 	ldw	fp,0(sp)
 401c7e0:	dec00104 	addi	sp,sp,4
 401c7e4:	f800283a 	ret

0401c7e8 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 401c7e8:	defffd04 	addi	sp,sp,-12
 401c7ec:	df000215 	stw	fp,8(sp)
 401c7f0:	df000204 	addi	fp,sp,8
 401c7f4:	e13ffe15 	stw	r4,-8(fp)
 401c7f8:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 401c7fc:	e0bfff17 	ldw	r2,-4(fp)
 401c800:	10c00017 	ldw	r3,0(r2)
 401c804:	e0bffe17 	ldw	r2,-8(fp)
 401c808:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 401c80c:	e0bffe17 	ldw	r2,-8(fp)
 401c810:	10800317 	ldw	r2,12(r2)
 401c814:	10c00204 	addi	r3,r2,8
 401c818:	e0bffe17 	ldw	r2,-8(fp)
 401c81c:	10800317 	ldw	r2,12(r2)
 401c820:	10800204 	addi	r2,r2,8
 401c824:	10800037 	ldwio	r2,0(r2)
 401c828:	1009883a 	mov	r4,r2
 401c82c:	00bfff44 	movi	r2,-3
 401c830:	2088703a 	and	r4,r4,r2
 401c834:	e0bfff17 	ldw	r2,-4(fp)
 401c838:	10800117 	ldw	r2,4(r2)
 401c83c:	1085883a 	add	r2,r2,r2
 401c840:	1080008c 	andi	r2,r2,2
 401c844:	2084b03a 	or	r2,r4,r2
 401c848:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 401c84c:	e0bffe17 	ldw	r2,-8(fp)
 401c850:	10800317 	ldw	r2,12(r2)
 401c854:	10800904 	addi	r2,r2,36
 401c858:	e0ffff17 	ldw	r3,-4(fp)
 401c85c:	18c0020b 	ldhu	r3,8(r3)
 401c860:	18ffffcc 	andi	r3,r3,65535
 401c864:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 401c868:	e0bffe17 	ldw	r2,-8(fp)
 401c86c:	10800317 	ldw	r2,12(r2)
 401c870:	10800804 	addi	r2,r2,32
 401c874:	e0ffff17 	ldw	r3,-4(fp)
 401c878:	18c0028b 	ldhu	r3,10(r3)
 401c87c:	18ffffcc 	andi	r3,r3,65535
 401c880:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 401c884:	e0bffe17 	ldw	r2,-8(fp)
 401c888:	10800317 	ldw	r2,12(r2)
 401c88c:	10800a04 	addi	r2,r2,40
 401c890:	e0ffff17 	ldw	r3,-4(fp)
 401c894:	18c0030b 	ldhu	r3,12(r3)
 401c898:	18ffffcc 	andi	r3,r3,65535
 401c89c:	10c00035 	stwio	r3,0(r2)
}
 401c8a0:	0001883a 	nop
 401c8a4:	e037883a 	mov	sp,fp
 401c8a8:	df000017 	ldw	fp,0(sp)
 401c8ac:	dec00104 	addi	sp,sp,4
 401c8b0:	f800283a 	ret

0401c8b4 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 401c8b4:	defffb04 	addi	sp,sp,-20
 401c8b8:	dfc00415 	stw	ra,16(sp)
 401c8bc:	df000315 	stw	fp,12(sp)
 401c8c0:	df000304 	addi	fp,sp,12
 401c8c4:	e13ffd15 	stw	r4,-12(fp)
 401c8c8:	e17ffe15 	stw	r5,-8(fp)
 401c8cc:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 401c8d0:	e0bffe17 	ldw	r2,-8(fp)
 401c8d4:	1080028b 	ldhu	r2,10(r2)
 401c8d8:	10bfffcc 	andi	r2,r2,65535
 401c8dc:	10000426 	beq	r2,zero,401c8f0 <alt_avalon_i2c_master_config_speed_get+0x3c>
 401c8e0:	e0bffe17 	ldw	r2,-8(fp)
 401c8e4:	1080020b 	ldhu	r2,8(r2)
 401c8e8:	10bfffcc 	andi	r2,r2,65535
 401c8ec:	1000021e 	bne	r2,zero,401c8f8 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 401c8f0:	00bfff44 	movi	r2,-3
 401c8f4:	00000f06 	br	401c934 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 401c8f8:	e0bffd17 	ldw	r2,-12(fp)
 401c8fc:	11000c17 	ldw	r4,48(r2)
 401c900:	e0bffe17 	ldw	r2,-8(fp)
 401c904:	1080028b 	ldhu	r2,10(r2)
 401c908:	10ffffcc 	andi	r3,r2,65535
 401c90c:	e0bffe17 	ldw	r2,-8(fp)
 401c910:	1080020b 	ldhu	r2,8(r2)
 401c914:	10bfffcc 	andi	r2,r2,65535
 401c918:	1885883a 	add	r2,r3,r2
 401c91c:	100b883a 	mov	r5,r2
 401c920:	400d2080 	call	400d208 <__udivsi3>
 401c924:	1007883a 	mov	r3,r2
 401c928:	e0bfff17 	ldw	r2,-4(fp)
 401c92c:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 401c930:	0005883a 	mov	r2,zero
}
 401c934:	e037883a 	mov	sp,fp
 401c938:	dfc00117 	ldw	ra,4(sp)
 401c93c:	df000017 	ldw	fp,0(sp)
 401c940:	dec00204 	addi	sp,sp,8
 401c944:	f800283a 	ret

0401c948 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 401c948:	defff904 	addi	sp,sp,-28
 401c94c:	dfc00615 	stw	ra,24(sp)
 401c950:	df000515 	stw	fp,20(sp)
 401c954:	df000504 	addi	fp,sp,20
 401c958:	e13ffd15 	stw	r4,-12(fp)
 401c95c:	e17ffe15 	stw	r5,-8(fp)
 401c960:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 401c964:	e0ffff17 	ldw	r3,-4(fp)
 401c968:	008001b4 	movhi	r2,6
 401c96c:	1086a004 	addi	r2,r2,6784
 401c970:	10c00436 	bltu	r2,r3,401c984 <alt_avalon_i2c_master_config_speed_set+0x3c>
 401c974:	e0bfff17 	ldw	r2,-4(fp)
 401c978:	10000226 	beq	r2,zero,401c984 <alt_avalon_i2c_master_config_speed_set+0x3c>
 401c97c:	e0bfff17 	ldw	r2,-4(fp)
 401c980:	1000021e 	bne	r2,zero,401c98c <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 401c984:	00bfff04 	movi	r2,-4
 401c988:	00002906 	br	401ca30 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 401c98c:	e0bffd17 	ldw	r2,-12(fp)
 401c990:	10c00c17 	ldw	r3,48(r2)
 401c994:	e0bfff17 	ldw	r2,-4(fp)
 401c998:	1085883a 	add	r2,r2,r2
 401c99c:	100b883a 	mov	r5,r2
 401c9a0:	1809883a 	mov	r4,r3
 401c9a4:	400d2080 	call	400d208 <__udivsi3>
 401c9a8:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 401c9ac:	e0bffb17 	ldw	r2,-20(fp)
 401c9b0:	10800f04 	addi	r2,r2,60
 401c9b4:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 401c9b8:	e0bffb17 	ldw	r2,-20(fp)
 401c9bc:	10bff104 	addi	r2,r2,-60
 401c9c0:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 401c9c4:	e0ffff17 	ldw	r3,-4(fp)
 401c9c8:	008000b4 	movhi	r2,2
 401c9cc:	10a1a804 	addi	r2,r2,-31072
 401c9d0:	10c0042e 	bgeu	r2,r3,401c9e4 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 401c9d4:	e0bffe17 	ldw	r2,-8(fp)
 401c9d8:	00c00044 	movi	r3,1
 401c9dc:	10c00115 	stw	r3,4(r2)
 401c9e0:	00000206 	br	401c9ec <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 401c9e4:	e0bffe17 	ldw	r2,-8(fp)
 401c9e8:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 401c9ec:	e0bffb17 	ldw	r2,-20(fp)
 401c9f0:	1007883a 	mov	r3,r2
 401c9f4:	e0bffe17 	ldw	r2,-8(fp)
 401c9f8:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 401c9fc:	e0bffc17 	ldw	r2,-16(fp)
 401ca00:	1007883a 	mov	r3,r2
 401ca04:	e0bffe17 	ldw	r2,-8(fp)
 401ca08:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 401ca0c:	e0bffb17 	ldw	r2,-20(fp)
 401ca10:	1007883a 	mov	r3,r2
 401ca14:	e0bffb17 	ldw	r2,-20(fp)
 401ca18:	1004d07a 	srli	r2,r2,1
 401ca1c:	1885c83a 	sub	r2,r3,r2
 401ca20:	1007883a 	mov	r3,r2
 401ca24:	e0bffe17 	ldw	r2,-8(fp)
 401ca28:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 401ca2c:	0005883a 	mov	r2,zero

}
 401ca30:	e037883a 	mov	sp,fp
 401ca34:	dfc00117 	ldw	ra,4(sp)
 401ca38:	df000017 	ldw	fp,0(sp)
 401ca3c:	dec00204 	addi	sp,sp,8
 401ca40:	f800283a 	ret

0401ca44 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401ca44:	defffe04 	addi	sp,sp,-8
 401ca48:	df000115 	stw	fp,4(sp)
 401ca4c:	df000104 	addi	fp,sp,4
 401ca50:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 401ca54:	e0bfff17 	ldw	r2,-4(fp)
 401ca58:	10800317 	ldw	r2,12(r2)
 401ca5c:	10800504 	addi	r2,r2,20
 401ca60:	10800037 	ldwio	r2,0(r2)
 401ca64:	1080004c 	andi	r2,r2,1
 401ca68:	10000226 	beq	r2,zero,401ca74 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 401ca6c:	00800044 	movi	r2,1
 401ca70:	00000106 	br	401ca78 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 401ca74:	0005883a 	mov	r2,zero
}
 401ca78:	e037883a 	mov	sp,fp
 401ca7c:	df000017 	ldw	fp,0(sp)
 401ca80:	dec00104 	addi	sp,sp,4
 401ca84:	f800283a 	ret

0401ca88 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 401ca88:	defffb04 	addi	sp,sp,-20
 401ca8c:	df000415 	stw	fp,16(sp)
 401ca90:	df000404 	addi	fp,sp,16
 401ca94:	e13ffc15 	stw	r4,-16(fp)
 401ca98:	e17ffd15 	stw	r5,-12(fp)
 401ca9c:	e1bffe15 	stw	r6,-8(fp)
 401caa0:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 401caa4:	e0bfff17 	ldw	r2,-4(fp)
 401caa8:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 401caac:	00001406 	br	401cb00 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 401cab0:	e0bfff17 	ldw	r2,-4(fp)
 401cab4:	10800017 	ldw	r2,0(r2)
 401cab8:	e0fffd17 	ldw	r3,-12(fp)
 401cabc:	1885883a 	add	r2,r3,r2
 401cac0:	e0fffc17 	ldw	r3,-16(fp)
 401cac4:	18c00317 	ldw	r3,12(r3)
 401cac8:	18c00104 	addi	r3,r3,4
 401cacc:	18c00037 	ldwio	r3,0(r3)
 401cad0:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 401cad4:	e0bfff17 	ldw	r2,-4(fp)
 401cad8:	10800017 	ldw	r2,0(r2)
 401cadc:	10c00044 	addi	r3,r2,1
 401cae0:	e0bfff17 	ldw	r2,-4(fp)
 401cae4:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 401cae8:	e0bfff17 	ldw	r2,-4(fp)
 401caec:	10c00017 	ldw	r3,0(r2)
 401caf0:	e0bffe17 	ldw	r2,-8(fp)
 401caf4:	1880021e 	bne	r3,r2,401cb00 <alt_avalon_i2c_rx_read_available+0x78>
 401caf8:	e0bffe17 	ldw	r2,-8(fp)
 401cafc:	1000061e 	bne	r2,zero,401cb18 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 401cb00:	e0bffc17 	ldw	r2,-16(fp)
 401cb04:	10800317 	ldw	r2,12(r2)
 401cb08:	10800704 	addi	r2,r2,28
 401cb0c:	10800037 	ldwio	r2,0(r2)
 401cb10:	103fe71e 	bne	r2,zero,401cab0 <__alt_mem_onchip_memory2_0+0xfc01b830>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 401cb14:	00000106 	br	401cb1c <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 401cb18:	0001883a 	nop
    }
}
 401cb1c:	0001883a 	nop
 401cb20:	e037883a 	mov	sp,fp
 401cb24:	df000017 	ldw	fp,0(sp)
 401cb28:	dec00104 	addi	sp,sp,4
 401cb2c:	f800283a 	ret

0401cb30 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 401cb30:	defffa04 	addi	sp,sp,-24
 401cb34:	dfc00515 	stw	ra,20(sp)
 401cb38:	df000415 	stw	fp,16(sp)
 401cb3c:	df000404 	addi	fp,sp,16
 401cb40:	e13ffe15 	stw	r4,-8(fp)
 401cb44:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 401cb48:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 401cb4c:	008000b4 	movhi	r2,2
 401cb50:	10a1a804 	addi	r2,r2,-31072
 401cb54:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 401cb58:	00000d06 	br	401cb90 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 401cb5c:	e0bffd17 	ldw	r2,-12(fp)
 401cb60:	108002a8 	cmpgeui	r2,r2,10
 401cb64:	1000021e 	bne	r2,zero,401cb70 <alt_avalon_i2c_rx_read+0x40>
 401cb68:	0109c404 	movi	r4,10000
 401cb6c:	401ed740 	call	401ed74 <alt_busy_sleep>
      if (--timeout == 0)
 401cb70:	e0bffd17 	ldw	r2,-12(fp)
 401cb74:	10bfffc4 	addi	r2,r2,-1
 401cb78:	e0bffd15 	stw	r2,-12(fp)
 401cb7c:	e0bffd17 	ldw	r2,-12(fp)
 401cb80:	1000031e 	bne	r2,zero,401cb90 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 401cb84:	00bfff84 	movi	r2,-2
 401cb88:	e0bffc15 	stw	r2,-16(fp)
        break;
 401cb8c:	00000506 	br	401cba4 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 401cb90:	e0bffe17 	ldw	r2,-8(fp)
 401cb94:	10800317 	ldw	r2,12(r2)
 401cb98:	10800704 	addi	r2,r2,28
 401cb9c:	10800037 	ldwio	r2,0(r2)
 401cba0:	103fee26 	beq	r2,zero,401cb5c <__alt_mem_onchip_memory2_0+0xfc01b8dc>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 401cba4:	e0bffe17 	ldw	r2,-8(fp)
 401cba8:	10800317 	ldw	r2,12(r2)
 401cbac:	10800104 	addi	r2,r2,4
 401cbb0:	10800037 	ldwio	r2,0(r2)
 401cbb4:	1007883a 	mov	r3,r2
 401cbb8:	e0bfff17 	ldw	r2,-4(fp)
 401cbbc:	10c00005 	stb	r3,0(r2)
        
    return status;
 401cbc0:	e0bffc17 	ldw	r2,-16(fp)
}
 401cbc4:	e037883a 	mov	sp,fp
 401cbc8:	dfc00117 	ldw	ra,4(sp)
 401cbcc:	df000017 	ldw	fp,0(sp)
 401cbd0:	dec00204 	addi	sp,sp,8
 401cbd4:	f800283a 	ret

0401cbd8 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 401cbd8:	defff804 	addi	sp,sp,-32
 401cbdc:	dfc00715 	stw	ra,28(sp)
 401cbe0:	df000615 	stw	fp,24(sp)
 401cbe4:	df000604 	addi	fp,sp,24
 401cbe8:	e13ffc15 	stw	r4,-16(fp)
 401cbec:	2809883a 	mov	r4,r5
 401cbf0:	3007883a 	mov	r3,r6
 401cbf4:	3805883a 	mov	r2,r7
 401cbf8:	e13ffd05 	stb	r4,-12(fp)
 401cbfc:	e0fffe05 	stb	r3,-8(fp)
 401cc00:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 401cc04:	0089c404 	movi	r2,10000
 401cc08:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401cc0c:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 401cc10:	00000c06 	br	401cc44 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 401cc14:	e0bffa17 	ldw	r2,-24(fp)
 401cc18:	108002a8 	cmpgeui	r2,r2,10
 401cc1c:	1000021e 	bne	r2,zero,401cc28 <alt_avalon_i2c_cmd_write+0x50>
 401cc20:	0109c404 	movi	r4,10000
 401cc24:	401ed740 	call	401ed74 <alt_busy_sleep>
      if (--timeout == 0)
 401cc28:	e0bffa17 	ldw	r2,-24(fp)
 401cc2c:	10bfffc4 	addi	r2,r2,-1
 401cc30:	e0bffa15 	stw	r2,-24(fp)
 401cc34:	e0bffa17 	ldw	r2,-24(fp)
 401cc38:	1000021e 	bne	r2,zero,401cc44 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 401cc3c:	00bfff84 	movi	r2,-2
 401cc40:	00001906 	br	401cca8 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 401cc44:	e0bffc17 	ldw	r2,-16(fp)
 401cc48:	10800317 	ldw	r2,12(r2)
 401cc4c:	10800404 	addi	r2,r2,16
 401cc50:	10800037 	ldwio	r2,0(r2)
 401cc54:	1080004c 	andi	r2,r2,1
 401cc58:	103fee26 	beq	r2,zero,401cc14 <__alt_mem_onchip_memory2_0+0xfc01b994>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 401cc5c:	e0bffc17 	ldw	r2,-16(fp)
 401cc60:	10800317 	ldw	r2,12(r2)
 401cc64:	e13ffd03 	ldbu	r4,-12(fp)
 401cc68:	e0fffe03 	ldbu	r3,-8(fp)
 401cc6c:	1806927a 	slli	r3,r3,9
 401cc70:	20c8b03a 	or	r4,r4,r3
 401cc74:	e0ffff03 	ldbu	r3,-4(fp)
 401cc78:	1806923a 	slli	r3,r3,8
 401cc7c:	20c6b03a 	or	r3,r4,r3
 401cc80:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 401cc84:	e0bffb04 	addi	r2,fp,-20
 401cc88:	100b883a 	mov	r5,r2
 401cc8c:	e13ffc17 	ldw	r4,-16(fp)
 401cc90:	401ce180 	call	401ce18 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 401cc94:	e0bffb04 	addi	r2,fp,-20
 401cc98:	100b883a 	mov	r5,r2
 401cc9c:	e13ffc17 	ldw	r4,-16(fp)
 401cca0:	401ce640 	call	401ce64 <alt_avalon_i2c_check_arblost>
    
    return status;
 401cca4:	e0bffb17 	ldw	r2,-20(fp)
}
 401cca8:	e037883a 	mov	sp,fp
 401ccac:	dfc00117 	ldw	ra,4(sp)
 401ccb0:	df000017 	ldw	fp,0(sp)
 401ccb4:	dec00204 	addi	sp,sp,8
 401ccb8:	f800283a 	ret

0401ccbc <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 401ccbc:	defffa04 	addi	sp,sp,-24
 401ccc0:	dfc00515 	stw	ra,20(sp)
 401ccc4:	df000415 	stw	fp,16(sp)
 401ccc8:	df000404 	addi	fp,sp,16
 401cccc:	e13ffd15 	stw	r4,-12(fp)
 401ccd0:	e17ffe15 	stw	r5,-8(fp)
 401ccd4:	3005883a 	mov	r2,r6
 401ccd8:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 401ccdc:	e0bffd17 	ldw	r2,-12(fp)
 401cce0:	10800d17 	ldw	r2,52(r2)
 401cce4:	10800058 	cmpnei	r2,r2,1
 401cce8:	10001c1e 	bne	r2,zero,401cd5c <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 401ccec:	e0bffd17 	ldw	r2,-12(fp)
 401ccf0:	10800917 	ldw	r2,36(r2)
 401ccf4:	109e0014 	ori	r2,r2,30720
 401ccf8:	1004d1fa 	srli	r2,r2,7
 401ccfc:	1007883a 	mov	r3,r2
 401cd00:	00bfff84 	movi	r2,-2
 401cd04:	1884703a 	and	r2,r3,r2
 401cd08:	1007883a 	mov	r3,r2
 401cd0c:	e0bffe17 	ldw	r2,-8(fp)
 401cd10:	1884b03a 	or	r2,r3,r2
 401cd14:	10803fcc 	andi	r2,r2,255
 401cd18:	e0ffff03 	ldbu	r3,-4(fp)
 401cd1c:	000f883a 	mov	r7,zero
 401cd20:	180d883a 	mov	r6,r3
 401cd24:	100b883a 	mov	r5,r2
 401cd28:	e13ffd17 	ldw	r4,-12(fp)
 401cd2c:	401cbd80 	call	401cbd8 <alt_avalon_i2c_cmd_write>
 401cd30:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 401cd34:	e0bffd17 	ldw	r2,-12(fp)
 401cd38:	10800917 	ldw	r2,36(r2)
 401cd3c:	10803fcc 	andi	r2,r2,255
 401cd40:	000f883a 	mov	r7,zero
 401cd44:	000d883a 	mov	r6,zero
 401cd48:	100b883a 	mov	r5,r2
 401cd4c:	e13ffd17 	ldw	r4,-12(fp)
 401cd50:	401cbd80 	call	401cbd8 <alt_avalon_i2c_cmd_write>
 401cd54:	e0bffc15 	stw	r2,-16(fp)
 401cd58:	00000e06 	br	401cd94 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 401cd5c:	e0bffd17 	ldw	r2,-12(fp)
 401cd60:	10800917 	ldw	r2,36(r2)
 401cd64:	1085883a 	add	r2,r2,r2
 401cd68:	1007883a 	mov	r3,r2
 401cd6c:	e0bffe17 	ldw	r2,-8(fp)
 401cd70:	1884b03a 	or	r2,r3,r2
 401cd74:	10803fcc 	andi	r2,r2,255
 401cd78:	e0ffff03 	ldbu	r3,-4(fp)
 401cd7c:	000f883a 	mov	r7,zero
 401cd80:	180d883a 	mov	r6,r3
 401cd84:	100b883a 	mov	r5,r2
 401cd88:	e13ffd17 	ldw	r4,-12(fp)
 401cd8c:	401cbd80 	call	401cbd8 <alt_avalon_i2c_cmd_write>
 401cd90:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 401cd94:	e0bffc17 	ldw	r2,-16(fp)
}
 401cd98:	e037883a 	mov	sp,fp
 401cd9c:	dfc00117 	ldw	ra,4(sp)
 401cda0:	df000017 	ldw	fp,0(sp)
 401cda4:	dec00204 	addi	sp,sp,8
 401cda8:	f800283a 	ret

0401cdac <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 401cdac:	defffd04 	addi	sp,sp,-12
 401cdb0:	df000215 	stw	fp,8(sp)
 401cdb4:	df000204 	addi	fp,sp,8
 401cdb8:	e13ffe15 	stw	r4,-8(fp)
 401cdbc:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 401cdc0:	e0bffe17 	ldw	r2,-8(fp)
 401cdc4:	10c00917 	ldw	r3,36(r2)
 401cdc8:	e0bfff17 	ldw	r2,-4(fp)
 401cdcc:	10c00015 	stw	r3,0(r2)
}
 401cdd0:	0001883a 	nop
 401cdd4:	e037883a 	mov	sp,fp
 401cdd8:	df000017 	ldw	fp,0(sp)
 401cddc:	dec00104 	addi	sp,sp,4
 401cde0:	f800283a 	ret

0401cde4 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 401cde4:	defffd04 	addi	sp,sp,-12
 401cde8:	df000215 	stw	fp,8(sp)
 401cdec:	df000204 	addi	fp,sp,8
 401cdf0:	e13ffe15 	stw	r4,-8(fp)
 401cdf4:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 401cdf8:	e0bffe17 	ldw	r2,-8(fp)
 401cdfc:	e0ffff17 	ldw	r3,-4(fp)
 401ce00:	10c00915 	stw	r3,36(r2)
}
 401ce04:	0001883a 	nop
 401ce08:	e037883a 	mov	sp,fp
 401ce0c:	df000017 	ldw	fp,0(sp)
 401ce10:	dec00104 	addi	sp,sp,4
 401ce14:	f800283a 	ret

0401ce18 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 401ce18:	defffd04 	addi	sp,sp,-12
 401ce1c:	df000215 	stw	fp,8(sp)
 401ce20:	df000204 	addi	fp,sp,8
 401ce24:	e13ffe15 	stw	r4,-8(fp)
 401ce28:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 401ce2c:	e0bffe17 	ldw	r2,-8(fp)
 401ce30:	10800317 	ldw	r2,12(r2)
 401ce34:	10800404 	addi	r2,r2,16
 401ce38:	10800037 	ldwio	r2,0(r2)
 401ce3c:	1080010c 	andi	r2,r2,4
 401ce40:	10000326 	beq	r2,zero,401ce50 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 401ce44:	e0bfff17 	ldw	r2,-4(fp)
 401ce48:	00fffec4 	movi	r3,-5
 401ce4c:	10c00015 	stw	r3,0(r2)
    }
}
 401ce50:	0001883a 	nop
 401ce54:	e037883a 	mov	sp,fp
 401ce58:	df000017 	ldw	fp,0(sp)
 401ce5c:	dec00104 	addi	sp,sp,4
 401ce60:	f800283a 	ret

0401ce64 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 401ce64:	defffd04 	addi	sp,sp,-12
 401ce68:	df000215 	stw	fp,8(sp)
 401ce6c:	df000204 	addi	fp,sp,8
 401ce70:	e13ffe15 	stw	r4,-8(fp)
 401ce74:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 401ce78:	e0bffe17 	ldw	r2,-8(fp)
 401ce7c:	10800317 	ldw	r2,12(r2)
 401ce80:	10800404 	addi	r2,r2,16
 401ce84:	10800037 	ldwio	r2,0(r2)
 401ce88:	1080020c 	andi	r2,r2,8
 401ce8c:	10000326 	beq	r2,zero,401ce9c <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 401ce90:	e0bfff17 	ldw	r2,-4(fp)
 401ce94:	00fffe84 	movi	r3,-6
 401ce98:	10c00015 	stw	r3,0(r2)
    }
}
 401ce9c:	0001883a 	nop
 401cea0:	e037883a 	mov	sp,fp
 401cea4:	df000017 	ldw	fp,0(sp)
 401cea8:	dec00104 	addi	sp,sp,4
 401ceac:	f800283a 	ret

0401ceb0 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401ceb0:	defff804 	addi	sp,sp,-32
 401ceb4:	dfc00715 	stw	ra,28(sp)
 401ceb8:	df000615 	stw	fp,24(sp)
 401cebc:	df000604 	addi	fp,sp,24
 401cec0:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401cec4:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 401cec8:	e0bfff17 	ldw	r2,-4(fp)
 401cecc:	10800717 	ldw	r2,28(r2)
 401ced0:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 401ced4:	e0bffb17 	ldw	r2,-20(fp)
 401ced8:	10800117 	ldw	r2,4(r2)
 401cedc:	10800044 	addi	r2,r2,1
 401cee0:	0149c404 	movi	r5,10000
 401cee4:	1009883a 	mov	r4,r2
 401cee8:	400d2c40 	call	400d2c4 <__mulsi3>
 401ceec:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 401cef0:	e0bffd04 	addi	r2,fp,-12
 401cef4:	100b883a 	mov	r5,r2
 401cef8:	e13fff17 	ldw	r4,-4(fp)
 401cefc:	401dd480 	call	401dd48 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 401cf00:	e0bffd17 	ldw	r2,-12(fp)
 401cf04:	100b883a 	mov	r5,r2
 401cf08:	e13fff17 	ldw	r4,-4(fp)
 401cf0c:	401dc7c0 	call	401dc7c <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 401cf10:	e0bffc04 	addi	r2,fp,-16
 401cf14:	100b883a 	mov	r5,r2
 401cf18:	e13fff17 	ldw	r4,-4(fp)
 401cf1c:	401ce180 	call	401ce18 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 401cf20:	e0bffc17 	ldw	r2,-16(fp)
 401cf24:	10002226 	beq	r2,zero,401cfb0 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 401cf28:	e0bffb17 	ldw	r2,-20(fp)
 401cf2c:	10800217 	ldw	r2,8(r2)
 401cf30:	10001d26 	beq	r2,zero,401cfa8 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401cf34:	00000d06 	br	401cf6c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 401cf38:	e0bffa17 	ldw	r2,-24(fp)
 401cf3c:	108002a8 	cmpgeui	r2,r2,10
 401cf40:	1000021e 	bne	r2,zero,401cf4c <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 401cf44:	0109c404 	movi	r4,10000
 401cf48:	401ed740 	call	401ed74 <alt_busy_sleep>
              if (--timeout == 0)
 401cf4c:	e0bffa17 	ldw	r2,-24(fp)
 401cf50:	10bfffc4 	addi	r2,r2,-1
 401cf54:	e0bffa15 	stw	r2,-24(fp)
 401cf58:	e0bffa17 	ldw	r2,-24(fp)
 401cf5c:	1000031e 	bne	r2,zero,401cf6c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 401cf60:	00bfff84 	movi	r2,-2
 401cf64:	e0bffc15 	stw	r2,-16(fp)
                 break;
 401cf68:	00000306 	br	401cf78 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401cf6c:	e13fff17 	ldw	r4,-4(fp)
 401cf70:	401ca440 	call	401ca44 <alt_avalon_i2c_is_busy>
 401cf74:	103ff01e 	bne	r2,zero,401cf38 <__alt_mem_onchip_memory2_0+0xfc01bcb8>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 401cf78:	e0bffb17 	ldw	r2,-20(fp)
 401cf7c:	10800017 	ldw	r2,0(r2)
 401cf80:	e0fffe04 	addi	r3,fp,-8
 401cf84:	180f883a 	mov	r7,r3
 401cf88:	000d883a 	mov	r6,zero
 401cf8c:	100b883a 	mov	r5,r2
 401cf90:	e13fff17 	ldw	r4,-4(fp)
 401cf94:	401ca880 	call	401ca88 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 401cf98:	e13fff17 	ldw	r4,-4(fp)
 401cf9c:	401c6ec0 	call	401c6ec <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 401cfa0:	e0bffb17 	ldw	r2,-20(fp)
 401cfa4:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 401cfa8:	e0bffc17 	ldw	r2,-16(fp)
 401cfac:	00000a06 	br	401cfd8 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 401cfb0:	e0bffb17 	ldw	r2,-20(fp)
 401cfb4:	10800217 	ldw	r2,8(r2)
 401cfb8:	10000626 	beq	r2,zero,401cfd4 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 401cfbc:	e0bffd17 	ldw	r2,-12(fp)
 401cfc0:	100b883a 	mov	r5,r2
 401cfc4:	e13fff17 	ldw	r4,-4(fp)
 401cfc8:	401dce40 	call	401dce4 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 401cfcc:	00bffe44 	movi	r2,-7
 401cfd0:	00000106 	br	401cfd8 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 401cfd4:	0005883a 	mov	r2,zero
}
 401cfd8:	e037883a 	mov	sp,fp
 401cfdc:	dfc00117 	ldw	ra,4(sp)
 401cfe0:	df000017 	ldw	fp,0(sp)
 401cfe4:	dec00204 	addi	sp,sp,8
 401cfe8:	f800283a 	ret

0401cfec <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 401cfec:	defff704 	addi	sp,sp,-36
 401cff0:	dfc00815 	stw	ra,32(sp)
 401cff4:	df000715 	stw	fp,28(sp)
 401cff8:	df000704 	addi	fp,sp,28
 401cffc:	e13ffc15 	stw	r4,-16(fp)
 401d000:	e17ffd15 	stw	r5,-12(fp)
 401d004:	e1bffe15 	stw	r6,-8(fp)
 401d008:	3805883a 	mov	r2,r7
 401d00c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401d010:	0089c404 	movi	r2,10000
 401d014:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 401d018:	00002206 	br	401d0a4 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 401d01c:	e0bffb17 	ldw	r2,-20(fp)
 401d020:	108002a8 	cmpgeui	r2,r2,10
 401d024:	1000021e 	bne	r2,zero,401d030 <alt_avalon_i2c_master_tx+0x44>
 401d028:	0109c404 	movi	r4,10000
 401d02c:	401ed740 	call	401ed74 <alt_busy_sleep>
      if (use_interrupts)
 401d030:	e0bfff03 	ldbu	r2,-4(fp)
 401d034:	10000926 	beq	r2,zero,401d05c <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 401d038:	00800044 	movi	r2,1
 401d03c:	d8800015 	stw	r2,0(sp)
 401d040:	000f883a 	mov	r7,zero
 401d044:	e1bffe17 	ldw	r6,-8(fp)
 401d048:	e17ffd17 	ldw	r5,-12(fp)
 401d04c:	e13ffc17 	ldw	r4,-16(fp)
 401d050:	401d5980 	call	401d598 <alt_avalon_i2c_master_transmit_using_interrupts>
 401d054:	e0bffa15 	stw	r2,-24(fp)
 401d058:	00000806 	br	401d07c <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 401d05c:	00800044 	movi	r2,1
 401d060:	d8800015 	stw	r2,0(sp)
 401d064:	000f883a 	mov	r7,zero
 401d068:	e1bffe17 	ldw	r6,-8(fp)
 401d06c:	e17ffd17 	ldw	r5,-12(fp)
 401d070:	e13ffc17 	ldw	r4,-16(fp)
 401d074:	401d3d80 	call	401d3d8 <alt_avalon_i2c_master_transmit>
 401d078:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d07c:	e0bffa17 	ldw	r2,-24(fp)
 401d080:	10bffea0 	cmpeqi	r2,r2,-6
 401d084:	1000061e 	bne	r2,zero,401d0a0 <alt_avalon_i2c_master_tx+0xb4>
 401d088:	e0bffa17 	ldw	r2,-24(fp)
 401d08c:	10bffee0 	cmpeqi	r2,r2,-5
 401d090:	1000031e 	bne	r2,zero,401d0a0 <alt_avalon_i2c_master_tx+0xb4>
 401d094:	e0bffa17 	ldw	r2,-24(fp)
 401d098:	10bffe58 	cmpnei	r2,r2,-7
 401d09c:	1000061e 	bne	r2,zero,401d0b8 <alt_avalon_i2c_master_tx+0xcc>
 401d0a0:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 401d0a4:	e0bffb17 	ldw	r2,-20(fp)
 401d0a8:	10ffffc4 	addi	r3,r2,-1
 401d0ac:	e0fffb15 	stw	r3,-20(fp)
 401d0b0:	103fda1e 	bne	r2,zero,401d01c <__alt_mem_onchip_memory2_0+0xfc01bd9c>
 401d0b4:	00000106 	br	401d0bc <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 401d0b8:	0001883a 	nop
    }

    return status;
 401d0bc:	e0bffa17 	ldw	r2,-24(fp)
}        
 401d0c0:	e037883a 	mov	sp,fp
 401d0c4:	dfc00117 	ldw	ra,4(sp)
 401d0c8:	df000017 	ldw	fp,0(sp)
 401d0cc:	dec00204 	addi	sp,sp,8
 401d0d0:	f800283a 	ret

0401d0d4 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 401d0d4:	defff704 	addi	sp,sp,-36
 401d0d8:	dfc00815 	stw	ra,32(sp)
 401d0dc:	df000715 	stw	fp,28(sp)
 401d0e0:	df000704 	addi	fp,sp,28
 401d0e4:	e13ffc15 	stw	r4,-16(fp)
 401d0e8:	e17ffd15 	stw	r5,-12(fp)
 401d0ec:	e1bffe15 	stw	r6,-8(fp)
 401d0f0:	3805883a 	mov	r2,r7
 401d0f4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401d0f8:	0089c404 	movi	r2,10000
 401d0fc:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 401d100:	e0bfff03 	ldbu	r2,-4(fp)
 401d104:	10003426 	beq	r2,zero,401d1d8 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 401d108:	00001706 	br	401d168 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 401d10c:	e0bffb17 	ldw	r2,-20(fp)
 401d110:	108002a8 	cmpgeui	r2,r2,10
 401d114:	1000021e 	bne	r2,zero,401d120 <alt_avalon_i2c_master_rx+0x4c>
 401d118:	0109c404 	movi	r4,10000
 401d11c:	401ed740 	call	401ed74 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 401d120:	00800044 	movi	r2,1
 401d124:	d8800015 	stw	r2,0(sp)
 401d128:	000f883a 	mov	r7,zero
 401d12c:	e1bffe17 	ldw	r6,-8(fp)
 401d130:	e17ffd17 	ldw	r5,-12(fp)
 401d134:	e13ffc17 	ldw	r4,-16(fp)
 401d138:	401d9b40 	call	401d9b4 <alt_avalon_i2c_master_receive_using_interrupts>
 401d13c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d140:	e0bffa17 	ldw	r2,-24(fp)
 401d144:	10bffea0 	cmpeqi	r2,r2,-6
 401d148:	1000061e 	bne	r2,zero,401d164 <alt_avalon_i2c_master_rx+0x90>
 401d14c:	e0bffa17 	ldw	r2,-24(fp)
 401d150:	10bffee0 	cmpeqi	r2,r2,-5
 401d154:	1000031e 	bne	r2,zero,401d164 <alt_avalon_i2c_master_rx+0x90>
 401d158:	e0bffa17 	ldw	r2,-24(fp)
 401d15c:	10bffe58 	cmpnei	r2,r2,-7
 401d160:	1000221e 	bne	r2,zero,401d1ec <alt_avalon_i2c_master_rx+0x118>
 401d164:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 401d168:	e0bffb17 	ldw	r2,-20(fp)
 401d16c:	10ffffc4 	addi	r3,r2,-1
 401d170:	e0fffb15 	stw	r3,-20(fp)
 401d174:	103fe51e 	bne	r2,zero,401d10c <__alt_mem_onchip_memory2_0+0xfc01be8c>
 401d178:	00001f06 	br	401d1f8 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 401d17c:	e0bffb17 	ldw	r2,-20(fp)
 401d180:	108002a8 	cmpgeui	r2,r2,10
 401d184:	1000021e 	bne	r2,zero,401d190 <alt_avalon_i2c_master_rx+0xbc>
 401d188:	0109c404 	movi	r4,10000
 401d18c:	401ed740 	call	401ed74 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 401d190:	00800044 	movi	r2,1
 401d194:	d8800015 	stw	r2,0(sp)
 401d198:	000f883a 	mov	r7,zero
 401d19c:	e1bffe17 	ldw	r6,-8(fp)
 401d1a0:	e17ffd17 	ldw	r5,-12(fp)
 401d1a4:	e13ffc17 	ldw	r4,-16(fp)
 401d1a8:	401d7a40 	call	401d7a4 <alt_avalon_i2c_master_receive>
 401d1ac:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d1b0:	e0bffa17 	ldw	r2,-24(fp)
 401d1b4:	10bffea0 	cmpeqi	r2,r2,-6
 401d1b8:	1000061e 	bne	r2,zero,401d1d4 <alt_avalon_i2c_master_rx+0x100>
 401d1bc:	e0bffa17 	ldw	r2,-24(fp)
 401d1c0:	10bffee0 	cmpeqi	r2,r2,-5
 401d1c4:	1000031e 	bne	r2,zero,401d1d4 <alt_avalon_i2c_master_rx+0x100>
 401d1c8:	e0bffa17 	ldw	r2,-24(fp)
 401d1cc:	10bffe58 	cmpnei	r2,r2,-7
 401d1d0:	1000081e 	bne	r2,zero,401d1f4 <alt_avalon_i2c_master_rx+0x120>
 401d1d4:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 401d1d8:	e0bffb17 	ldw	r2,-20(fp)
 401d1dc:	10ffffc4 	addi	r3,r2,-1
 401d1e0:	e0fffb15 	stw	r3,-20(fp)
 401d1e4:	103fe51e 	bne	r2,zero,401d17c <__alt_mem_onchip_memory2_0+0xfc01befc>
 401d1e8:	00000306 	br	401d1f8 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 401d1ec:	0001883a 	nop
 401d1f0:	00000106 	br	401d1f8 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 401d1f4:	0001883a 	nop
      }
    }
    
    return status;
 401d1f8:	e0bffa17 	ldw	r2,-24(fp)
}        
 401d1fc:	e037883a 	mov	sp,fp
 401d200:	dfc00117 	ldw	ra,4(sp)
 401d204:	df000017 	ldw	fp,0(sp)
 401d208:	dec00204 	addi	sp,sp,8
 401d20c:	f800283a 	ret

0401d210 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 401d210:	defff604 	addi	sp,sp,-40
 401d214:	dfc00915 	stw	ra,36(sp)
 401d218:	df000815 	stw	fp,32(sp)
 401d21c:	df000804 	addi	fp,sp,32
 401d220:	e13ffb15 	stw	r4,-20(fp)
 401d224:	e17ffc15 	stw	r5,-16(fp)
 401d228:	e1bffd15 	stw	r6,-12(fp)
 401d22c:	e1fffe15 	stw	r7,-8(fp)
 401d230:	e0800317 	ldw	r2,12(fp)
 401d234:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401d238:	0089c404 	movi	r2,10000
 401d23c:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 401d240:	e0bfff03 	ldbu	r2,-4(fp)
 401d244:	10005626 	beq	r2,zero,401d3a0 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 401d248:	00002806 	br	401d2ec <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 401d24c:	e0bffa17 	ldw	r2,-24(fp)
 401d250:	108002a8 	cmpgeui	r2,r2,10
 401d254:	1000021e 	bne	r2,zero,401d260 <alt_avalon_i2c_master_tx_rx+0x50>
 401d258:	0109c404 	movi	r4,10000
 401d25c:	401ed740 	call	401ed74 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 401d260:	d8000015 	stw	zero,0(sp)
 401d264:	000f883a 	mov	r7,zero
 401d268:	e1bffd17 	ldw	r6,-12(fp)
 401d26c:	e17ffc17 	ldw	r5,-16(fp)
 401d270:	e13ffb17 	ldw	r4,-20(fp)
 401d274:	401d5980 	call	401d598 <alt_avalon_i2c_master_transmit_using_interrupts>
 401d278:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d27c:	e0bff917 	ldw	r2,-28(fp)
 401d280:	10bffea0 	cmpeqi	r2,r2,-6
 401d284:	1000191e 	bne	r2,zero,401d2ec <alt_avalon_i2c_master_tx_rx+0xdc>
 401d288:	e0bff917 	ldw	r2,-28(fp)
 401d28c:	10bffee0 	cmpeqi	r2,r2,-5
 401d290:	1000161e 	bne	r2,zero,401d2ec <alt_avalon_i2c_master_tx_rx+0xdc>
 401d294:	e0bff917 	ldw	r2,-28(fp)
 401d298:	10bffe58 	cmpnei	r2,r2,-7
 401d29c:	1000011e 	bne	r2,zero,401d2a4 <alt_avalon_i2c_master_tx_rx+0x94>
 401d2a0:	00001206 	br	401d2ec <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 401d2a4:	00800044 	movi	r2,1
 401d2a8:	d8800015 	stw	r2,0(sp)
 401d2ac:	01c00044 	movi	r7,1
 401d2b0:	e1800217 	ldw	r6,8(fp)
 401d2b4:	e17ffe17 	ldw	r5,-8(fp)
 401d2b8:	e13ffb17 	ldw	r4,-20(fp)
 401d2bc:	401d9b40 	call	401d9b4 <alt_avalon_i2c_master_receive_using_interrupts>
 401d2c0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d2c4:	e0bff917 	ldw	r2,-28(fp)
 401d2c8:	10bffea0 	cmpeqi	r2,r2,-6
 401d2cc:	1000061e 	bne	r2,zero,401d2e8 <alt_avalon_i2c_master_tx_rx+0xd8>
 401d2d0:	e0bff917 	ldw	r2,-28(fp)
 401d2d4:	10bffee0 	cmpeqi	r2,r2,-5
 401d2d8:	1000031e 	bne	r2,zero,401d2e8 <alt_avalon_i2c_master_tx_rx+0xd8>
 401d2dc:	e0bff917 	ldw	r2,-28(fp)
 401d2e0:	10bffe58 	cmpnei	r2,r2,-7
 401d2e4:	1000331e 	bne	r2,zero,401d3b4 <alt_avalon_i2c_master_tx_rx+0x1a4>
 401d2e8:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 401d2ec:	e0bffa17 	ldw	r2,-24(fp)
 401d2f0:	10ffffc4 	addi	r3,r2,-1
 401d2f4:	e0fffa15 	stw	r3,-24(fp)
 401d2f8:	103fd41e 	bne	r2,zero,401d24c <__alt_mem_onchip_memory2_0+0xfc01bfcc>
 401d2fc:	00003006 	br	401d3c0 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 401d300:	e0bffa17 	ldw	r2,-24(fp)
 401d304:	108002a8 	cmpgeui	r2,r2,10
 401d308:	1000021e 	bne	r2,zero,401d314 <alt_avalon_i2c_master_tx_rx+0x104>
 401d30c:	0109c404 	movi	r4,10000
 401d310:	401ed740 	call	401ed74 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 401d314:	d8000015 	stw	zero,0(sp)
 401d318:	000f883a 	mov	r7,zero
 401d31c:	e1bffd17 	ldw	r6,-12(fp)
 401d320:	e17ffc17 	ldw	r5,-16(fp)
 401d324:	e13ffb17 	ldw	r4,-20(fp)
 401d328:	401d3d80 	call	401d3d8 <alt_avalon_i2c_master_transmit>
 401d32c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d330:	e0bff917 	ldw	r2,-28(fp)
 401d334:	10bffea0 	cmpeqi	r2,r2,-6
 401d338:	1000191e 	bne	r2,zero,401d3a0 <alt_avalon_i2c_master_tx_rx+0x190>
 401d33c:	e0bff917 	ldw	r2,-28(fp)
 401d340:	10bffee0 	cmpeqi	r2,r2,-5
 401d344:	1000161e 	bne	r2,zero,401d3a0 <alt_avalon_i2c_master_tx_rx+0x190>
 401d348:	e0bff917 	ldw	r2,-28(fp)
 401d34c:	10bffe58 	cmpnei	r2,r2,-7
 401d350:	1000011e 	bne	r2,zero,401d358 <alt_avalon_i2c_master_tx_rx+0x148>
 401d354:	00001206 	br	401d3a0 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 401d358:	00800044 	movi	r2,1
 401d35c:	d8800015 	stw	r2,0(sp)
 401d360:	01c00044 	movi	r7,1
 401d364:	e1800217 	ldw	r6,8(fp)
 401d368:	e17ffe17 	ldw	r5,-8(fp)
 401d36c:	e13ffb17 	ldw	r4,-20(fp)
 401d370:	401d7a40 	call	401d7a4 <alt_avalon_i2c_master_receive>
 401d374:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d378:	e0bff917 	ldw	r2,-28(fp)
 401d37c:	10bffea0 	cmpeqi	r2,r2,-6
 401d380:	1000061e 	bne	r2,zero,401d39c <alt_avalon_i2c_master_tx_rx+0x18c>
 401d384:	e0bff917 	ldw	r2,-28(fp)
 401d388:	10bffee0 	cmpeqi	r2,r2,-5
 401d38c:	1000031e 	bne	r2,zero,401d39c <alt_avalon_i2c_master_tx_rx+0x18c>
 401d390:	e0bff917 	ldw	r2,-28(fp)
 401d394:	10bffe58 	cmpnei	r2,r2,-7
 401d398:	1000081e 	bne	r2,zero,401d3bc <alt_avalon_i2c_master_tx_rx+0x1ac>
 401d39c:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 401d3a0:	e0bffa17 	ldw	r2,-24(fp)
 401d3a4:	10ffffc4 	addi	r3,r2,-1
 401d3a8:	e0fffa15 	stw	r3,-24(fp)
 401d3ac:	103fd41e 	bne	r2,zero,401d300 <__alt_mem_onchip_memory2_0+0xfc01c080>
 401d3b0:	00000306 	br	401d3c0 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 401d3b4:	0001883a 	nop
 401d3b8:	00000106 	br	401d3c0 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 401d3bc:	0001883a 	nop
      }
    }
    
    return status;
 401d3c0:	e0bff917 	ldw	r2,-28(fp)
}                                       
 401d3c4:	e037883a 	mov	sp,fp
 401d3c8:	dfc00117 	ldw	ra,4(sp)
 401d3cc:	df000017 	ldw	fp,0(sp)
 401d3d0:	dec00204 	addi	sp,sp,8
 401d3d4:	f800283a 	ret

0401d3d8 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 401d3d8:	defff704 	addi	sp,sp,-36
 401d3dc:	dfc00815 	stw	ra,32(sp)
 401d3e0:	df000715 	stw	fp,28(sp)
 401d3e4:	df000704 	addi	fp,sp,28
 401d3e8:	e13ffb15 	stw	r4,-20(fp)
 401d3ec:	e17ffc15 	stw	r5,-16(fp)
 401d3f0:	e1bffd15 	stw	r6,-12(fp)
 401d3f4:	3807883a 	mov	r3,r7
 401d3f8:	e0800217 	ldw	r2,8(fp)
 401d3fc:	e0fffe05 	stb	r3,-8(fp)
 401d400:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d404:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 401d408:	0149c404 	movi	r5,10000
 401d40c:	e13ffd17 	ldw	r4,-12(fp)
 401d410:	400d2c40 	call	400d2c4 <__mulsi3>
 401d414:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 401d418:	e0bffd17 	ldw	r2,-12(fp)
 401d41c:	1000021e 	bne	r2,zero,401d428 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401d420:	0005883a 	mov	r2,zero
 401d424:	00005706 	br	401d584 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401d428:	e0bffe03 	ldbu	r2,-8(fp)
 401d42c:	10000a1e 	bne	r2,zero,401d458 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401d430:	e13ffb17 	ldw	r4,-20(fp)
 401d434:	401c6540 	call	401c654 <alt_avalon_i2c_enable>
 401d438:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401d43c:	e0bffa17 	ldw	r2,-24(fp)
 401d440:	10000226 	beq	r2,zero,401d44c <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 401d444:	e0bffa17 	ldw	r2,-24(fp)
 401d448:	00004e06 	br	401d584 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401d44c:	01400704 	movi	r5,28
 401d450:	e13ffb17 	ldw	r4,-20(fp)
 401d454:	401dc400 	call	401dc40 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 401d458:	e0bffe03 	ldbu	r2,-8(fp)
 401d45c:	100d883a 	mov	r6,r2
 401d460:	000b883a 	mov	r5,zero
 401d464:	e13ffb17 	ldw	r4,-20(fp)
 401d468:	401ccbc0 	call	401ccbc <alt_avalon_i2c_send_address>
 401d46c:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 401d470:	e0bffa17 	ldw	r2,-24(fp)
 401d474:	1000271e 	bne	r2,zero,401d514 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401d478:	00000f06 	br	401d4b8 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401d47c:	e0bffc17 	ldw	r2,-16(fp)
 401d480:	10800003 	ldbu	r2,0(r2)
 401d484:	10803fcc 	andi	r2,r2,255
 401d488:	000f883a 	mov	r7,zero
 401d48c:	000d883a 	mov	r6,zero
 401d490:	100b883a 	mov	r5,r2
 401d494:	e13ffb17 	ldw	r4,-20(fp)
 401d498:	401cbd80 	call	401cbd8 <alt_avalon_i2c_cmd_write>
 401d49c:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 401d4a0:	e0bffc17 	ldw	r2,-16(fp)
 401d4a4:	10800044 	addi	r2,r2,1
 401d4a8:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401d4ac:	e0bffd17 	ldw	r2,-12(fp)
 401d4b0:	10bfffc4 	addi	r2,r2,-1
 401d4b4:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401d4b8:	e0bffd17 	ldw	r2,-12(fp)
 401d4bc:	108000b0 	cmpltui	r2,r2,2
 401d4c0:	1000021e 	bne	r2,zero,401d4cc <alt_avalon_i2c_master_transmit+0xf4>
 401d4c4:	e0bffa17 	ldw	r2,-24(fp)
 401d4c8:	103fec26 	beq	r2,zero,401d47c <__alt_mem_onchip_memory2_0+0xfc01c1fc>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401d4cc:	e0bffa17 	ldw	r2,-24(fp)
 401d4d0:	1000101e 	bne	r2,zero,401d514 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401d4d4:	e0bffc17 	ldw	r2,-16(fp)
 401d4d8:	10800003 	ldbu	r2,0(r2)
 401d4dc:	10803fcc 	andi	r2,r2,255
 401d4e0:	e0ffff03 	ldbu	r3,-4(fp)
 401d4e4:	180f883a 	mov	r7,r3
 401d4e8:	000d883a 	mov	r6,zero
 401d4ec:	100b883a 	mov	r5,r2
 401d4f0:	e13ffb17 	ldw	r4,-20(fp)
 401d4f4:	401cbd80 	call	401cbd8 <alt_avalon_i2c_cmd_write>
 401d4f8:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 401d4fc:	e0bffc17 	ldw	r2,-16(fp)
 401d500:	10800044 	addi	r2,r2,1
 401d504:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401d508:	e0bffd17 	ldw	r2,-12(fp)
 401d50c:	10bfffc4 	addi	r2,r2,-1
 401d510:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 401d514:	e0bfff03 	ldbu	r2,-4(fp)
 401d518:	1000101e 	bne	r2,zero,401d55c <alt_avalon_i2c_master_transmit+0x184>
 401d51c:	e0bffa17 	ldw	r2,-24(fp)
 401d520:	10001726 	beq	r2,zero,401d580 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d524:	00000d06 	br	401d55c <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401d528:	e0bff917 	ldw	r2,-28(fp)
 401d52c:	108002a8 	cmpgeui	r2,r2,10
 401d530:	1000021e 	bne	r2,zero,401d53c <alt_avalon_i2c_master_transmit+0x164>
 401d534:	0109c404 	movi	r4,10000
 401d538:	401ed740 	call	401ed74 <alt_busy_sleep>
            if (--timeout == 0)
 401d53c:	e0bff917 	ldw	r2,-28(fp)
 401d540:	10bfffc4 	addi	r2,r2,-1
 401d544:	e0bff915 	stw	r2,-28(fp)
 401d548:	e0bff917 	ldw	r2,-28(fp)
 401d54c:	1000031e 	bne	r2,zero,401d55c <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401d550:	00bfff84 	movi	r2,-2
 401d554:	e0bffa15 	stw	r2,-24(fp)
               break;
 401d558:	00000306 	br	401d568 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d55c:	e13ffb17 	ldw	r4,-20(fp)
 401d560:	401ca440 	call	401ca44 <alt_avalon_i2c_is_busy>
 401d564:	103ff01e 	bne	r2,zero,401d528 <__alt_mem_onchip_memory2_0+0xfc01c2a8>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 401d568:	e0bffa04 	addi	r2,fp,-24
 401d56c:	100b883a 	mov	r5,r2
 401d570:	e13ffb17 	ldw	r4,-20(fp)
 401d574:	401ce180 	call	401ce18 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401d578:	e13ffb17 	ldw	r4,-20(fp)
 401d57c:	401c6ec0 	call	401c6ec <alt_avalon_i2c_disable>
    }


    return status;
 401d580:	e0bffa17 	ldw	r2,-24(fp)
}
 401d584:	e037883a 	mov	sp,fp
 401d588:	dfc00117 	ldw	ra,4(sp)
 401d58c:	df000017 	ldw	fp,0(sp)
 401d590:	dec00204 	addi	sp,sp,8
 401d594:	f800283a 	ret

0401d598 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 401d598:	defff604 	addi	sp,sp,-40
 401d59c:	dfc00915 	stw	ra,36(sp)
 401d5a0:	df000815 	stw	fp,32(sp)
 401d5a4:	df000804 	addi	fp,sp,32
 401d5a8:	e13ffb15 	stw	r4,-20(fp)
 401d5ac:	e17ffc15 	stw	r5,-16(fp)
 401d5b0:	e1bffd15 	stw	r6,-12(fp)
 401d5b4:	3807883a 	mov	r3,r7
 401d5b8:	e0800217 	ldw	r2,8(fp)
 401d5bc:	e0fffe05 	stb	r3,-8(fp)
 401d5c0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d5c4:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 401d5c8:	0149c404 	movi	r5,10000
 401d5cc:	e13ffd17 	ldw	r4,-12(fp)
 401d5d0:	400d2c40 	call	400d2c4 <__mulsi3>
 401d5d4:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 401d5d8:	e0bffb17 	ldw	r2,-20(fp)
 401d5dc:	10800717 	ldw	r2,28(r2)
 401d5e0:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 401d5e4:	e0bffd17 	ldw	r2,-12(fp)
 401d5e8:	1000021e 	bne	r2,zero,401d5f4 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401d5ec:	0005883a 	mov	r2,zero
 401d5f0:	00006706 	br	401d790 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 401d5f4:	e0bffb17 	ldw	r2,-20(fp)
 401d5f8:	10c00617 	ldw	r3,24(r2)
 401d5fc:	008100b4 	movhi	r2,1026
 401d600:	10b0b604 	addi	r2,r2,-15656
 401d604:	18800226 	beq	r3,r2,401d610 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 401d608:	00bfff44 	movi	r2,-3
 401d60c:	00006006 	br	401d790 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401d610:	e0bffe03 	ldbu	r2,-8(fp)
 401d614:	10000a1e 	bne	r2,zero,401d640 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401d618:	e13ffb17 	ldw	r4,-20(fp)
 401d61c:	401c6540 	call	401c654 <alt_avalon_i2c_enable>
 401d620:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401d624:	e0bff817 	ldw	r2,-32(fp)
 401d628:	10000226 	beq	r2,zero,401d634 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 401d62c:	e0bff817 	ldw	r2,-32(fp)
 401d630:	00005706 	br	401d790 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401d634:	01400704 	movi	r5,28
 401d638:	e13ffb17 	ldw	r4,-20(fp)
 401d63c:	401dc400 	call	401dc40 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 401d640:	e0bffe03 	ldbu	r2,-8(fp)
 401d644:	100d883a 	mov	r6,r2
 401d648:	000b883a 	mov	r5,zero
 401d64c:	e13ffb17 	ldw	r4,-20(fp)
 401d650:	401ccbc0 	call	401ccbc <alt_avalon_i2c_send_address>
 401d654:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 401d658:	e0bff817 	ldw	r2,-32(fp)
 401d65c:	1000271e 	bne	r2,zero,401d6fc <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401d660:	00000f06 	br	401d6a0 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401d664:	e0bffc17 	ldw	r2,-16(fp)
 401d668:	10800003 	ldbu	r2,0(r2)
 401d66c:	10803fcc 	andi	r2,r2,255
 401d670:	000f883a 	mov	r7,zero
 401d674:	000d883a 	mov	r6,zero
 401d678:	100b883a 	mov	r5,r2
 401d67c:	e13ffb17 	ldw	r4,-20(fp)
 401d680:	401cbd80 	call	401cbd8 <alt_avalon_i2c_cmd_write>
 401d684:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 401d688:	e0bffc17 	ldw	r2,-16(fp)
 401d68c:	10800044 	addi	r2,r2,1
 401d690:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401d694:	e0bffd17 	ldw	r2,-12(fp)
 401d698:	10bfffc4 	addi	r2,r2,-1
 401d69c:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401d6a0:	e0bffd17 	ldw	r2,-12(fp)
 401d6a4:	108000b0 	cmpltui	r2,r2,2
 401d6a8:	1000021e 	bne	r2,zero,401d6b4 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 401d6ac:	e0bff817 	ldw	r2,-32(fp)
 401d6b0:	103fec26 	beq	r2,zero,401d664 <__alt_mem_onchip_memory2_0+0xfc01c3e4>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401d6b4:	e0bff817 	ldw	r2,-32(fp)
 401d6b8:	1000101e 	bne	r2,zero,401d6fc <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401d6bc:	e0bffc17 	ldw	r2,-16(fp)
 401d6c0:	10800003 	ldbu	r2,0(r2)
 401d6c4:	10803fcc 	andi	r2,r2,255
 401d6c8:	e0ffff03 	ldbu	r3,-4(fp)
 401d6cc:	180f883a 	mov	r7,r3
 401d6d0:	000d883a 	mov	r6,zero
 401d6d4:	100b883a 	mov	r5,r2
 401d6d8:	e13ffb17 	ldw	r4,-20(fp)
 401d6dc:	401cbd80 	call	401cbd8 <alt_avalon_i2c_cmd_write>
 401d6e0:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 401d6e4:	e0bffc17 	ldw	r2,-16(fp)
 401d6e8:	10800044 	addi	r2,r2,1
 401d6ec:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401d6f0:	e0bffd17 	ldw	r2,-12(fp)
 401d6f4:	10bfffc4 	addi	r2,r2,-1
 401d6f8:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 401d6fc:	e0bff817 	ldw	r2,-32(fp)
 401d700:	10001426 	beq	r2,zero,401d754 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d704:	00000d06 	br	401d73c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 401d708:	e0bff917 	ldw	r2,-28(fp)
 401d70c:	108002a8 	cmpgeui	r2,r2,10
 401d710:	1000021e 	bne	r2,zero,401d71c <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 401d714:	0109c404 	movi	r4,10000
 401d718:	401ed740 	call	401ed74 <alt_busy_sleep>
            if (--timeout == 0)
 401d71c:	e0bff917 	ldw	r2,-28(fp)
 401d720:	10bfffc4 	addi	r2,r2,-1
 401d724:	e0bff915 	stw	r2,-28(fp)
 401d728:	e0bff917 	ldw	r2,-28(fp)
 401d72c:	1000031e 	bne	r2,zero,401d73c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401d730:	00bfff84 	movi	r2,-2
 401d734:	e0bff815 	stw	r2,-32(fp)
               break;
 401d738:	00000306 	br	401d748 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d73c:	e13ffb17 	ldw	r4,-20(fp)
 401d740:	401ca440 	call	401ca44 <alt_avalon_i2c_is_busy>
 401d744:	103ff01e 	bne	r2,zero,401d708 <__alt_mem_onchip_memory2_0+0xfc01c488>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401d748:	e13ffb17 	ldw	r4,-20(fp)
 401d74c:	401c6ec0 	call	401c6ec <alt_avalon_i2c_disable>
 401d750:	00000e06 	br	401d78c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 401d754:	e0bfff03 	ldbu	r2,-4(fp)
 401d758:	10000c26 	beq	r2,zero,401d78c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401d75c:	01400704 	movi	r5,28
 401d760:	e13ffb17 	ldw	r4,-20(fp)
 401d764:	401dc400 	call	401dc40 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 401d768:	000b883a 	mov	r5,zero
 401d76c:	e13ffb17 	ldw	r4,-20(fp)
 401d770:	401de880 	call	401de88 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 401d774:	e0bffa17 	ldw	r2,-24(fp)
 401d778:	00c00044 	movi	r3,1
 401d77c:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 401d780:	01400044 	movi	r5,1
 401d784:	e13ffb17 	ldw	r4,-20(fp)
 401d788:	401dce40 	call	401dce4 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 401d78c:	e0bff817 	ldw	r2,-32(fp)
}
 401d790:	e037883a 	mov	sp,fp
 401d794:	dfc00117 	ldw	ra,4(sp)
 401d798:	df000017 	ldw	fp,0(sp)
 401d79c:	dec00204 	addi	sp,sp,8
 401d7a0:	f800283a 	ret

0401d7a4 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 401d7a4:	defff404 	addi	sp,sp,-48
 401d7a8:	dfc00b15 	stw	ra,44(sp)
 401d7ac:	df000a15 	stw	fp,40(sp)
 401d7b0:	df000a04 	addi	fp,sp,40
 401d7b4:	e13ffb15 	stw	r4,-20(fp)
 401d7b8:	e17ffc15 	stw	r5,-16(fp)
 401d7bc:	e1bffd15 	stw	r6,-12(fp)
 401d7c0:	3807883a 	mov	r3,r7
 401d7c4:	e0800217 	ldw	r2,8(fp)
 401d7c8:	e0fffe05 	stb	r3,-8(fp)
 401d7cc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d7d0:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 401d7d4:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 401d7d8:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 401d7dc:	e0bffd17 	ldw	r2,-12(fp)
 401d7e0:	1000021e 	bne	r2,zero,401d7ec <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401d7e4:	0005883a 	mov	r2,zero
 401d7e8:	00006d06 	br	401d9a0 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401d7ec:	e0bffe03 	ldbu	r2,-8(fp)
 401d7f0:	10000a1e 	bne	r2,zero,401d81c <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401d7f4:	e13ffb17 	ldw	r4,-20(fp)
 401d7f8:	401c6540 	call	401c654 <alt_avalon_i2c_enable>
 401d7fc:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401d800:	e0bff917 	ldw	r2,-28(fp)
 401d804:	10000226 	beq	r2,zero,401d810 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 401d808:	e0bff917 	ldw	r2,-28(fp)
 401d80c:	00006406 	br	401d9a0 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401d810:	01400704 	movi	r5,28
 401d814:	e13ffb17 	ldw	r4,-20(fp)
 401d818:	401dc400 	call	401dc40 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 401d81c:	e0bffe03 	ldbu	r2,-8(fp)
 401d820:	100d883a 	mov	r6,r2
 401d824:	01400044 	movi	r5,1
 401d828:	e13ffb17 	ldw	r4,-20(fp)
 401d82c:	401ccbc0 	call	401ccbc <alt_avalon_i2c_send_address>
 401d830:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 401d834:	e0bff917 	ldw	r2,-28(fp)
 401d838:	1000341e 	bne	r2,zero,401d90c <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401d83c:	00001906 	br	401d8a4 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401d840:	000f883a 	mov	r7,zero
 401d844:	000d883a 	mov	r6,zero
 401d848:	000b883a 	mov	r5,zero
 401d84c:	e13ffb17 	ldw	r4,-20(fp)
 401d850:	401cbd80 	call	401cbd8 <alt_avalon_i2c_cmd_write>
 401d854:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 401d858:	e0bff817 	ldw	r2,-32(fp)
 401d85c:	10800044 	addi	r2,r2,1
 401d860:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 401d864:	e0bff917 	ldw	r2,-28(fp)
 401d868:	10000e1e 	bne	r2,zero,401d8a4 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 401d86c:	e0bffa04 	addi	r2,fp,-24
 401d870:	100f883a 	mov	r7,r2
 401d874:	000d883a 	mov	r6,zero
 401d878:	e17ffc17 	ldw	r5,-16(fp)
 401d87c:	e13ffb17 	ldw	r4,-20(fp)
 401d880:	401ca880 	call	401ca88 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 401d884:	e0bffa17 	ldw	r2,-24(fp)
 401d888:	e0fffc17 	ldw	r3,-16(fp)
 401d88c:	1885883a 	add	r2,r3,r2
 401d890:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 401d894:	e0bffa17 	ldw	r2,-24(fp)
 401d898:	e0fff717 	ldw	r3,-36(fp)
 401d89c:	1885883a 	add	r2,r3,r2
 401d8a0:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401d8a4:	e0bffd17 	ldw	r2,-12(fp)
 401d8a8:	10bfffc4 	addi	r2,r2,-1
 401d8ac:	e0fff817 	ldw	r3,-32(fp)
 401d8b0:	1880022e 	bgeu	r3,r2,401d8bc <alt_avalon_i2c_master_receive+0x118>
 401d8b4:	e0bff917 	ldw	r2,-28(fp)
 401d8b8:	103fe126 	beq	r2,zero,401d840 <__alt_mem_onchip_memory2_0+0xfc01c5c0>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401d8bc:	e0bff917 	ldw	r2,-28(fp)
 401d8c0:	1000121e 	bne	r2,zero,401d90c <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401d8c4:	e0bfff03 	ldbu	r2,-4(fp)
 401d8c8:	100f883a 	mov	r7,r2
 401d8cc:	000d883a 	mov	r6,zero
 401d8d0:	000b883a 	mov	r5,zero
 401d8d4:	e13ffb17 	ldw	r4,-20(fp)
 401d8d8:	401cbd80 	call	401cbd8 <alt_avalon_i2c_cmd_write>
 401d8dc:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 401d8e0:	00000a06 	br	401d90c <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 401d8e4:	e17ffc17 	ldw	r5,-16(fp)
 401d8e8:	e13ffb17 	ldw	r4,-20(fp)
 401d8ec:	401cb300 	call	401cb30 <alt_avalon_i2c_rx_read>
 401d8f0:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 401d8f4:	e0bffc17 	ldw	r2,-16(fp)
 401d8f8:	10800044 	addi	r2,r2,1
 401d8fc:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 401d900:	e0bff717 	ldw	r2,-36(fp)
 401d904:	10800044 	addi	r2,r2,1
 401d908:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 401d90c:	e0fff717 	ldw	r3,-36(fp)
 401d910:	e0bffd17 	ldw	r2,-12(fp)
 401d914:	1880022e 	bgeu	r3,r2,401d920 <alt_avalon_i2c_master_receive+0x17c>
 401d918:	e0bff917 	ldw	r2,-28(fp)
 401d91c:	103ff126 	beq	r2,zero,401d8e4 <__alt_mem_onchip_memory2_0+0xfc01c664>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 401d920:	e0bfff03 	ldbu	r2,-4(fp)
 401d924:	1000021e 	bne	r2,zero,401d930 <alt_avalon_i2c_master_receive+0x18c>
 401d928:	e0bff917 	ldw	r2,-28(fp)
 401d92c:	10001b26 	beq	r2,zero,401d99c <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 401d930:	0149c404 	movi	r5,10000
 401d934:	e13ffd17 	ldw	r4,-12(fp)
 401d938:	400d2c40 	call	400d2c4 <__mulsi3>
 401d93c:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d940:	00000d06 	br	401d978 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401d944:	e0bff617 	ldw	r2,-40(fp)
 401d948:	108002a8 	cmpgeui	r2,r2,10
 401d94c:	1000021e 	bne	r2,zero,401d958 <alt_avalon_i2c_master_receive+0x1b4>
 401d950:	0109c404 	movi	r4,10000
 401d954:	401ed740 	call	401ed74 <alt_busy_sleep>
            if (--timeout == 0)
 401d958:	e0bff617 	ldw	r2,-40(fp)
 401d95c:	10bfffc4 	addi	r2,r2,-1
 401d960:	e0bff615 	stw	r2,-40(fp)
 401d964:	e0bff617 	ldw	r2,-40(fp)
 401d968:	1000031e 	bne	r2,zero,401d978 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401d96c:	00bfff84 	movi	r2,-2
 401d970:	e0bff915 	stw	r2,-28(fp)
               break;
 401d974:	00000306 	br	401d984 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d978:	e13ffb17 	ldw	r4,-20(fp)
 401d97c:	401ca440 	call	401ca44 <alt_avalon_i2c_is_busy>
 401d980:	103ff01e 	bne	r2,zero,401d944 <__alt_mem_onchip_memory2_0+0xfc01c6c4>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 401d984:	e0bff904 	addi	r2,fp,-28
 401d988:	100b883a 	mov	r5,r2
 401d98c:	e13ffb17 	ldw	r4,-20(fp)
 401d990:	401ce180 	call	401ce18 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401d994:	e13ffb17 	ldw	r4,-20(fp)
 401d998:	401c6ec0 	call	401c6ec <alt_avalon_i2c_disable>
    }

    return status;
 401d99c:	e0bff917 	ldw	r2,-28(fp)
}
 401d9a0:	e037883a 	mov	sp,fp
 401d9a4:	dfc00117 	ldw	ra,4(sp)
 401d9a8:	df000017 	ldw	fp,0(sp)
 401d9ac:	dec00204 	addi	sp,sp,8
 401d9b0:	f800283a 	ret

0401d9b4 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 401d9b4:	defff504 	addi	sp,sp,-44
 401d9b8:	dfc00a15 	stw	ra,40(sp)
 401d9bc:	df000915 	stw	fp,36(sp)
 401d9c0:	df000904 	addi	fp,sp,36
 401d9c4:	e13ffb15 	stw	r4,-20(fp)
 401d9c8:	e17ffc15 	stw	r5,-16(fp)
 401d9cc:	e1bffd15 	stw	r6,-12(fp)
 401d9d0:	3807883a 	mov	r3,r7
 401d9d4:	e0800217 	ldw	r2,8(fp)
 401d9d8:	e0fffe05 	stb	r3,-8(fp)
 401d9dc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d9e0:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 401d9e4:	e0bffb17 	ldw	r2,-20(fp)
 401d9e8:	10800717 	ldw	r2,28(r2)
 401d9ec:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 401d9f0:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 401d9f4:	e0bffd17 	ldw	r2,-12(fp)
 401d9f8:	1000021e 	bne	r2,zero,401da04 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401d9fc:	0005883a 	mov	r2,zero
 401da00:	00006306 	br	401db90 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 401da04:	e0bffb17 	ldw	r2,-20(fp)
 401da08:	10c00617 	ldw	r3,24(r2)
 401da0c:	008100b4 	movhi	r2,1026
 401da10:	10b0b604 	addi	r2,r2,-15656
 401da14:	18800226 	beq	r3,r2,401da20 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 401da18:	00bfff44 	movi	r2,-3
 401da1c:	00005c06 	br	401db90 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401da20:	e0bffe03 	ldbu	r2,-8(fp)
 401da24:	10000a1e 	bne	r2,zero,401da50 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401da28:	e13ffb17 	ldw	r4,-20(fp)
 401da2c:	401c6540 	call	401c654 <alt_avalon_i2c_enable>
 401da30:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401da34:	e0bff717 	ldw	r2,-36(fp)
 401da38:	10000226 	beq	r2,zero,401da44 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 401da3c:	e0bff717 	ldw	r2,-36(fp)
 401da40:	00005306 	br	401db90 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401da44:	01400704 	movi	r5,28
 401da48:	e13ffb17 	ldw	r4,-20(fp)
 401da4c:	401dc400 	call	401dc40 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 401da50:	e0bffe03 	ldbu	r2,-8(fp)
 401da54:	100d883a 	mov	r6,r2
 401da58:	01400044 	movi	r5,1
 401da5c:	e13ffb17 	ldw	r4,-20(fp)
 401da60:	401ccbc0 	call	401ccbc <alt_avalon_i2c_send_address>
 401da64:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 401da68:	e0bff717 	ldw	r2,-36(fp)
 401da6c:	1000191e 	bne	r2,zero,401dad4 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401da70:	00000906 	br	401da98 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401da74:	000f883a 	mov	r7,zero
 401da78:	000d883a 	mov	r6,zero
 401da7c:	000b883a 	mov	r5,zero
 401da80:	e13ffb17 	ldw	r4,-20(fp)
 401da84:	401cbd80 	call	401cbd8 <alt_avalon_i2c_cmd_write>
 401da88:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 401da8c:	e0bff917 	ldw	r2,-28(fp)
 401da90:	10800044 	addi	r2,r2,1
 401da94:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401da98:	e0bffd17 	ldw	r2,-12(fp)
 401da9c:	10bfffc4 	addi	r2,r2,-1
 401daa0:	e0fff917 	ldw	r3,-28(fp)
 401daa4:	1880022e 	bgeu	r3,r2,401dab0 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 401daa8:	e0bff717 	ldw	r2,-36(fp)
 401daac:	103ff126 	beq	r2,zero,401da74 <__alt_mem_onchip_memory2_0+0xfc01c7f4>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401dab0:	e0bff717 	ldw	r2,-36(fp)
 401dab4:	1000071e 	bne	r2,zero,401dad4 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401dab8:	e0bfff03 	ldbu	r2,-4(fp)
 401dabc:	100f883a 	mov	r7,r2
 401dac0:	000d883a 	mov	r6,zero
 401dac4:	000b883a 	mov	r5,zero
 401dac8:	e13ffb17 	ldw	r4,-20(fp)
 401dacc:	401cbd80 	call	401cbd8 <alt_avalon_i2c_cmd_write>
 401dad0:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 401dad4:	e0bff717 	ldw	r2,-36(fp)
 401dad8:	10001826 	beq	r2,zero,401db3c <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 401dadc:	0149c404 	movi	r5,10000
 401dae0:	e13ffd17 	ldw	r4,-12(fp)
 401dae4:	400d2c40 	call	400d2c4 <__mulsi3>
 401dae8:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401daec:	00000d06 	br	401db24 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401daf0:	e0bff817 	ldw	r2,-32(fp)
 401daf4:	108002a8 	cmpgeui	r2,r2,10
 401daf8:	1000021e 	bne	r2,zero,401db04 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 401dafc:	0109c404 	movi	r4,10000
 401db00:	401ed740 	call	401ed74 <alt_busy_sleep>
            if (--timeout == 0)
 401db04:	e0bff817 	ldw	r2,-32(fp)
 401db08:	10bfffc4 	addi	r2,r2,-1
 401db0c:	e0bff815 	stw	r2,-32(fp)
 401db10:	e0bff817 	ldw	r2,-32(fp)
 401db14:	1000031e 	bne	r2,zero,401db24 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401db18:	00bfff84 	movi	r2,-2
 401db1c:	e0bff715 	stw	r2,-36(fp)
               break;
 401db20:	00000306 	br	401db30 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401db24:	e13ffb17 	ldw	r4,-20(fp)
 401db28:	401ca440 	call	401ca44 <alt_avalon_i2c_is_busy>
 401db2c:	103ff01e 	bne	r2,zero,401daf0 <__alt_mem_onchip_memory2_0+0xfc01c870>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401db30:	e13ffb17 	ldw	r4,-20(fp)
 401db34:	401c6ec0 	call	401c6ec <alt_avalon_i2c_disable>
 401db38:	00001406 	br	401db8c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 401db3c:	e0bfff03 	ldbu	r2,-4(fp)
 401db40:	10001226 	beq	r2,zero,401db8c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401db44:	01400704 	movi	r5,28
 401db48:	e13ffb17 	ldw	r4,-20(fp)
 401db4c:	401dc400 	call	401dc40 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 401db50:	000b883a 	mov	r5,zero
 401db54:	e13ffb17 	ldw	r4,-20(fp)
 401db58:	401ddd80 	call	401ddd8 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 401db5c:	e0bffa17 	ldw	r2,-24(fp)
 401db60:	00c00084 	movi	r3,2
 401db64:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 401db68:	e0bffa17 	ldw	r2,-24(fp)
 401db6c:	e0fffc17 	ldw	r3,-16(fp)
 401db70:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 401db74:	e0bffa17 	ldw	r2,-24(fp)
 401db78:	e0fffd17 	ldw	r3,-12(fp)
 401db7c:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 401db80:	01400084 	movi	r5,2
 401db84:	e13ffb17 	ldw	r4,-20(fp)
 401db88:	401dce40 	call	401dce4 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 401db8c:	e0bff717 	ldw	r2,-36(fp)
}
 401db90:	e037883a 	mov	sp,fp
 401db94:	dfc00117 	ldw	ra,4(sp)
 401db98:	df000017 	ldw	fp,0(sp)
 401db9c:	dec00204 	addi	sp,sp,8
 401dba0:	f800283a 	ret

0401dba4 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 401dba4:	defffd04 	addi	sp,sp,-12
 401dba8:	df000215 	stw	fp,8(sp)
 401dbac:	df000204 	addi	fp,sp,8
 401dbb0:	e13ffe15 	stw	r4,-8(fp)
 401dbb4:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 401dbb8:	e0bffe17 	ldw	r2,-8(fp)
 401dbbc:	10800317 	ldw	r2,12(r2)
 401dbc0:	10800404 	addi	r2,r2,16
 401dbc4:	10c00037 	ldwio	r3,0(r2)
 401dbc8:	e0bffe17 	ldw	r2,-8(fp)
 401dbcc:	10800317 	ldw	r2,12(r2)
 401dbd0:	10800304 	addi	r2,r2,12
 401dbd4:	10800037 	ldwio	r2,0(r2)
 401dbd8:	1884703a 	and	r2,r3,r2
 401dbdc:	1007883a 	mov	r3,r2
 401dbe0:	e0bfff17 	ldw	r2,-4(fp)
 401dbe4:	10c00015 	stw	r3,0(r2)
}
 401dbe8:	0001883a 	nop
 401dbec:	e037883a 	mov	sp,fp
 401dbf0:	df000017 	ldw	fp,0(sp)
 401dbf4:	dec00104 	addi	sp,sp,4
 401dbf8:	f800283a 	ret

0401dbfc <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 401dbfc:	defffd04 	addi	sp,sp,-12
 401dc00:	df000215 	stw	fp,8(sp)
 401dc04:	df000204 	addi	fp,sp,8
 401dc08:	e13ffe15 	stw	r4,-8(fp)
 401dc0c:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 401dc10:	e0bffe17 	ldw	r2,-8(fp)
 401dc14:	10800317 	ldw	r2,12(r2)
 401dc18:	10800404 	addi	r2,r2,16
 401dc1c:	10800037 	ldwio	r2,0(r2)
 401dc20:	1007883a 	mov	r3,r2
 401dc24:	e0bfff17 	ldw	r2,-4(fp)
 401dc28:	10c00015 	stw	r3,0(r2)
}
 401dc2c:	0001883a 	nop
 401dc30:	e037883a 	mov	sp,fp
 401dc34:	df000017 	ldw	fp,0(sp)
 401dc38:	dec00104 	addi	sp,sp,4
 401dc3c:	f800283a 	ret

0401dc40 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 401dc40:	defffd04 	addi	sp,sp,-12
 401dc44:	df000215 	stw	fp,8(sp)
 401dc48:	df000204 	addi	fp,sp,8
 401dc4c:	e13ffe15 	stw	r4,-8(fp)
 401dc50:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 401dc54:	e0bffe17 	ldw	r2,-8(fp)
 401dc58:	10800317 	ldw	r2,12(r2)
 401dc5c:	10800404 	addi	r2,r2,16
 401dc60:	e0ffff17 	ldw	r3,-4(fp)
 401dc64:	10c00035 	stwio	r3,0(r2)
}
 401dc68:	0001883a 	nop
 401dc6c:	e037883a 	mov	sp,fp
 401dc70:	df000017 	ldw	fp,0(sp)
 401dc74:	dec00104 	addi	sp,sp,4
 401dc78:	f800283a 	ret

0401dc7c <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 401dc7c:	defffb04 	addi	sp,sp,-20
 401dc80:	dfc00415 	stw	ra,16(sp)
 401dc84:	df000315 	stw	fp,12(sp)
 401dc88:	df000304 	addi	fp,sp,12
 401dc8c:	e13ffe15 	stw	r4,-8(fp)
 401dc90:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 401dc94:	e17ffd04 	addi	r5,fp,-12
 401dc98:	e13ffe17 	ldw	r4,-8(fp)
 401dc9c:	401dd480 	call	401dd48 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 401dca0:	e0bfff17 	ldw	r2,-4(fp)
 401dca4:	0086303a 	nor	r3,zero,r2
 401dca8:	e0bffd17 	ldw	r2,-12(fp)
 401dcac:	1884703a 	and	r2,r3,r2
 401dcb0:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 401dcb4:	e0bffe17 	ldw	r2,-8(fp)
 401dcb8:	10800317 	ldw	r2,12(r2)
 401dcbc:	10800304 	addi	r2,r2,12
 401dcc0:	e0fffd17 	ldw	r3,-12(fp)
 401dcc4:	18c007cc 	andi	r3,r3,31
 401dcc8:	10c00035 	stwio	r3,0(r2)
}
 401dccc:	0001883a 	nop
 401dcd0:	e037883a 	mov	sp,fp
 401dcd4:	dfc00117 	ldw	ra,4(sp)
 401dcd8:	df000017 	ldw	fp,0(sp)
 401dcdc:	dec00204 	addi	sp,sp,8
 401dce0:	f800283a 	ret

0401dce4 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 401dce4:	defffb04 	addi	sp,sp,-20
 401dce8:	dfc00415 	stw	ra,16(sp)
 401dcec:	df000315 	stw	fp,12(sp)
 401dcf0:	df000304 	addi	fp,sp,12
 401dcf4:	e13ffe15 	stw	r4,-8(fp)
 401dcf8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 401dcfc:	e17ffd04 	addi	r5,fp,-12
 401dd00:	e13ffe17 	ldw	r4,-8(fp)
 401dd04:	401dd480 	call	401dd48 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 401dd08:	e0fffd17 	ldw	r3,-12(fp)
 401dd0c:	e0bfff17 	ldw	r2,-4(fp)
 401dd10:	1884b03a 	or	r2,r3,r2
 401dd14:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 401dd18:	e0bffe17 	ldw	r2,-8(fp)
 401dd1c:	10800317 	ldw	r2,12(r2)
 401dd20:	10800304 	addi	r2,r2,12
 401dd24:	e0fffd17 	ldw	r3,-12(fp)
 401dd28:	18c007cc 	andi	r3,r3,31
 401dd2c:	10c00035 	stwio	r3,0(r2)
}
 401dd30:	0001883a 	nop
 401dd34:	e037883a 	mov	sp,fp
 401dd38:	dfc00117 	ldw	ra,4(sp)
 401dd3c:	df000017 	ldw	fp,0(sp)
 401dd40:	dec00204 	addi	sp,sp,8
 401dd44:	f800283a 	ret

0401dd48 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 401dd48:	defffd04 	addi	sp,sp,-12
 401dd4c:	df000215 	stw	fp,8(sp)
 401dd50:	df000204 	addi	fp,sp,8
 401dd54:	e13ffe15 	stw	r4,-8(fp)
 401dd58:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 401dd5c:	e0bffe17 	ldw	r2,-8(fp)
 401dd60:	10800317 	ldw	r2,12(r2)
 401dd64:	10800304 	addi	r2,r2,12
 401dd68:	10800037 	ldwio	r2,0(r2)
 401dd6c:	10c007cc 	andi	r3,r2,31
 401dd70:	e0bfff17 	ldw	r2,-4(fp)
 401dd74:	10c00015 	stw	r3,0(r2)
}
 401dd78:	0001883a 	nop
 401dd7c:	e037883a 	mov	sp,fp
 401dd80:	df000017 	ldw	fp,0(sp)
 401dd84:	dec00104 	addi	sp,sp,4
 401dd88:	f800283a 	ret

0401dd8c <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 401dd8c:	defffd04 	addi	sp,sp,-12
 401dd90:	df000215 	stw	fp,8(sp)
 401dd94:	df000204 	addi	fp,sp,8
 401dd98:	e13ffe15 	stw	r4,-8(fp)
 401dd9c:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 401dda0:	e0bffe17 	ldw	r2,-8(fp)
 401dda4:	10800317 	ldw	r2,12(r2)
 401dda8:	10800204 	addi	r2,r2,8
 401ddac:	10800037 	ldwio	r2,0(r2)
 401ddb0:	10800c0c 	andi	r2,r2,48
 401ddb4:	1005d13a 	srai	r2,r2,4
 401ddb8:	1007883a 	mov	r3,r2
 401ddbc:	e0bfff17 	ldw	r2,-4(fp)
 401ddc0:	10c00015 	stw	r3,0(r2)
}
 401ddc4:	0001883a 	nop
 401ddc8:	e037883a 	mov	sp,fp
 401ddcc:	df000017 	ldw	fp,0(sp)
 401ddd0:	dec00104 	addi	sp,sp,4
 401ddd4:	f800283a 	ret

0401ddd8 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 401ddd8:	defffd04 	addi	sp,sp,-12
 401dddc:	df000215 	stw	fp,8(sp)
 401dde0:	df000204 	addi	fp,sp,8
 401dde4:	e13ffe15 	stw	r4,-8(fp)
 401dde8:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 401ddec:	e0bffe17 	ldw	r2,-8(fp)
 401ddf0:	10800317 	ldw	r2,12(r2)
 401ddf4:	10800204 	addi	r2,r2,8
 401ddf8:	e0fffe17 	ldw	r3,-8(fp)
 401ddfc:	18c00317 	ldw	r3,12(r3)
 401de00:	18c00204 	addi	r3,r3,8
 401de04:	18c00037 	ldwio	r3,0(r3)
 401de08:	1809883a 	mov	r4,r3
 401de0c:	00fff3c4 	movi	r3,-49
 401de10:	20c8703a 	and	r4,r4,r3
 401de14:	e0ffff17 	ldw	r3,-4(fp)
 401de18:	1806913a 	slli	r3,r3,4
 401de1c:	18c00c0c 	andi	r3,r3,48
 401de20:	20c6b03a 	or	r3,r4,r3
 401de24:	10c00035 	stwio	r3,0(r2)
}
 401de28:	0001883a 	nop
 401de2c:	e037883a 	mov	sp,fp
 401de30:	df000017 	ldw	fp,0(sp)
 401de34:	dec00104 	addi	sp,sp,4
 401de38:	f800283a 	ret

0401de3c <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 401de3c:	defffd04 	addi	sp,sp,-12
 401de40:	df000215 	stw	fp,8(sp)
 401de44:	df000204 	addi	fp,sp,8
 401de48:	e13ffe15 	stw	r4,-8(fp)
 401de4c:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 401de50:	e0bffe17 	ldw	r2,-8(fp)
 401de54:	10800317 	ldw	r2,12(r2)
 401de58:	10800204 	addi	r2,r2,8
 401de5c:	10800037 	ldwio	r2,0(r2)
 401de60:	1080030c 	andi	r2,r2,12
 401de64:	1005d0ba 	srai	r2,r2,2
 401de68:	1007883a 	mov	r3,r2
 401de6c:	e0bfff17 	ldw	r2,-4(fp)
 401de70:	10c00015 	stw	r3,0(r2)
}
 401de74:	0001883a 	nop
 401de78:	e037883a 	mov	sp,fp
 401de7c:	df000017 	ldw	fp,0(sp)
 401de80:	dec00104 	addi	sp,sp,4
 401de84:	f800283a 	ret

0401de88 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 401de88:	defffd04 	addi	sp,sp,-12
 401de8c:	df000215 	stw	fp,8(sp)
 401de90:	df000204 	addi	fp,sp,8
 401de94:	e13ffe15 	stw	r4,-8(fp)
 401de98:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 401de9c:	e0bffe17 	ldw	r2,-8(fp)
 401dea0:	10800317 	ldw	r2,12(r2)
 401dea4:	10c00204 	addi	r3,r2,8
 401dea8:	e0bffe17 	ldw	r2,-8(fp)
 401deac:	10800317 	ldw	r2,12(r2)
 401deb0:	10800204 	addi	r2,r2,8
 401deb4:	10800037 	ldwio	r2,0(r2)
 401deb8:	1009883a 	mov	r4,r2
 401debc:	00bffcc4 	movi	r2,-13
 401dec0:	2088703a 	and	r4,r4,r2
 401dec4:	e0bfff17 	ldw	r2,-4(fp)
 401dec8:	1085883a 	add	r2,r2,r2
 401decc:	1085883a 	add	r2,r2,r2
 401ded0:	1080030c 	andi	r2,r2,12
 401ded4:	2084b03a 	or	r2,r4,r2
 401ded8:	18800035 	stwio	r2,0(r3)
}
 401dedc:	0001883a 	nop
 401dee0:	e037883a 	mov	sp,fp
 401dee4:	df000017 	ldw	fp,0(sp)
 401dee8:	dec00104 	addi	sp,sp,4
 401deec:	f800283a 	ret

0401def0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 401def0:	defffa04 	addi	sp,sp,-24
 401def4:	dfc00515 	stw	ra,20(sp)
 401def8:	df000415 	stw	fp,16(sp)
 401defc:	df000404 	addi	fp,sp,16
 401df00:	e13ffd15 	stw	r4,-12(fp)
 401df04:	e17ffe15 	stw	r5,-8(fp)
 401df08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401df0c:	e0bffd17 	ldw	r2,-12(fp)
 401df10:	10800017 	ldw	r2,0(r2)
 401df14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 401df18:	e0bffc17 	ldw	r2,-16(fp)
 401df1c:	10c00a04 	addi	r3,r2,40
 401df20:	e0bffd17 	ldw	r2,-12(fp)
 401df24:	10800217 	ldw	r2,8(r2)
 401df28:	100f883a 	mov	r7,r2
 401df2c:	e1bfff17 	ldw	r6,-4(fp)
 401df30:	e17ffe17 	ldw	r5,-8(fp)
 401df34:	1809883a 	mov	r4,r3
 401df38:	401e5180 	call	401e518 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 401df3c:	e037883a 	mov	sp,fp
 401df40:	dfc00117 	ldw	ra,4(sp)
 401df44:	df000017 	ldw	fp,0(sp)
 401df48:	dec00204 	addi	sp,sp,8
 401df4c:	f800283a 	ret

0401df50 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 401df50:	defffa04 	addi	sp,sp,-24
 401df54:	dfc00515 	stw	ra,20(sp)
 401df58:	df000415 	stw	fp,16(sp)
 401df5c:	df000404 	addi	fp,sp,16
 401df60:	e13ffd15 	stw	r4,-12(fp)
 401df64:	e17ffe15 	stw	r5,-8(fp)
 401df68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401df6c:	e0bffd17 	ldw	r2,-12(fp)
 401df70:	10800017 	ldw	r2,0(r2)
 401df74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 401df78:	e0bffc17 	ldw	r2,-16(fp)
 401df7c:	10c00a04 	addi	r3,r2,40
 401df80:	e0bffd17 	ldw	r2,-12(fp)
 401df84:	10800217 	ldw	r2,8(r2)
 401df88:	100f883a 	mov	r7,r2
 401df8c:	e1bfff17 	ldw	r6,-4(fp)
 401df90:	e17ffe17 	ldw	r5,-8(fp)
 401df94:	1809883a 	mov	r4,r3
 401df98:	401e7340 	call	401e734 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 401df9c:	e037883a 	mov	sp,fp
 401dfa0:	dfc00117 	ldw	ra,4(sp)
 401dfa4:	df000017 	ldw	fp,0(sp)
 401dfa8:	dec00204 	addi	sp,sp,8
 401dfac:	f800283a 	ret

0401dfb0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 401dfb0:	defffc04 	addi	sp,sp,-16
 401dfb4:	dfc00315 	stw	ra,12(sp)
 401dfb8:	df000215 	stw	fp,8(sp)
 401dfbc:	df000204 	addi	fp,sp,8
 401dfc0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401dfc4:	e0bfff17 	ldw	r2,-4(fp)
 401dfc8:	10800017 	ldw	r2,0(r2)
 401dfcc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 401dfd0:	e0bffe17 	ldw	r2,-8(fp)
 401dfd4:	10c00a04 	addi	r3,r2,40
 401dfd8:	e0bfff17 	ldw	r2,-4(fp)
 401dfdc:	10800217 	ldw	r2,8(r2)
 401dfe0:	100b883a 	mov	r5,r2
 401dfe4:	1809883a 	mov	r4,r3
 401dfe8:	401e3c00 	call	401e3c0 <altera_avalon_jtag_uart_close>
}
 401dfec:	e037883a 	mov	sp,fp
 401dff0:	dfc00117 	ldw	ra,4(sp)
 401dff4:	df000017 	ldw	fp,0(sp)
 401dff8:	dec00204 	addi	sp,sp,8
 401dffc:	f800283a 	ret

0401e000 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 401e000:	defffa04 	addi	sp,sp,-24
 401e004:	dfc00515 	stw	ra,20(sp)
 401e008:	df000415 	stw	fp,16(sp)
 401e00c:	df000404 	addi	fp,sp,16
 401e010:	e13ffd15 	stw	r4,-12(fp)
 401e014:	e17ffe15 	stw	r5,-8(fp)
 401e018:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 401e01c:	e0bffd17 	ldw	r2,-12(fp)
 401e020:	10800017 	ldw	r2,0(r2)
 401e024:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 401e028:	e0bffc17 	ldw	r2,-16(fp)
 401e02c:	10800a04 	addi	r2,r2,40
 401e030:	e1bfff17 	ldw	r6,-4(fp)
 401e034:	e17ffe17 	ldw	r5,-8(fp)
 401e038:	1009883a 	mov	r4,r2
 401e03c:	401e4280 	call	401e428 <altera_avalon_jtag_uart_ioctl>
}
 401e040:	e037883a 	mov	sp,fp
 401e044:	dfc00117 	ldw	ra,4(sp)
 401e048:	df000017 	ldw	fp,0(sp)
 401e04c:	dec00204 	addi	sp,sp,8
 401e050:	f800283a 	ret

0401e054 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 401e054:	defffa04 	addi	sp,sp,-24
 401e058:	dfc00515 	stw	ra,20(sp)
 401e05c:	df000415 	stw	fp,16(sp)
 401e060:	df000404 	addi	fp,sp,16
 401e064:	e13ffd15 	stw	r4,-12(fp)
 401e068:	e17ffe15 	stw	r5,-8(fp)
 401e06c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401e070:	e0bffd17 	ldw	r2,-12(fp)
 401e074:	00c00044 	movi	r3,1
 401e078:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 401e07c:	e0bffd17 	ldw	r2,-12(fp)
 401e080:	10800017 	ldw	r2,0(r2)
 401e084:	10800104 	addi	r2,r2,4
 401e088:	1007883a 	mov	r3,r2
 401e08c:	e0bffd17 	ldw	r2,-12(fp)
 401e090:	10800817 	ldw	r2,32(r2)
 401e094:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 401e098:	e0bffe17 	ldw	r2,-8(fp)
 401e09c:	e0ffff17 	ldw	r3,-4(fp)
 401e0a0:	d8000015 	stw	zero,0(sp)
 401e0a4:	e1fffd17 	ldw	r7,-12(fp)
 401e0a8:	018100b4 	movhi	r6,1026
 401e0ac:	31b84504 	addi	r6,r6,-7916
 401e0b0:	180b883a 	mov	r5,r3
 401e0b4:	1009883a 	mov	r4,r2
 401e0b8:	401f13c0 	call	401f13c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 401e0bc:	e0bffd17 	ldw	r2,-12(fp)
 401e0c0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 401e0c4:	e0bffd17 	ldw	r2,-12(fp)
 401e0c8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401e0cc:	d0f24717 	ldw	r3,-14052(gp)
 401e0d0:	e1fffd17 	ldw	r7,-12(fp)
 401e0d4:	018100b4 	movhi	r6,1026
 401e0d8:	31b8c804 	addi	r6,r6,-7392
 401e0dc:	180b883a 	mov	r5,r3
 401e0e0:	1009883a 	mov	r4,r2
 401e0e4:	401ec480 	call	401ec48 <alt_alarm_start>
 401e0e8:	1000040e 	bge	r2,zero,401e0fc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 401e0ec:	e0fffd17 	ldw	r3,-12(fp)
 401e0f0:	00a00034 	movhi	r2,32768
 401e0f4:	10bfffc4 	addi	r2,r2,-1
 401e0f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 401e0fc:	0001883a 	nop
 401e100:	e037883a 	mov	sp,fp
 401e104:	dfc00117 	ldw	ra,4(sp)
 401e108:	df000017 	ldw	fp,0(sp)
 401e10c:	dec00204 	addi	sp,sp,8
 401e110:	f800283a 	ret

0401e114 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 401e114:	defff804 	addi	sp,sp,-32
 401e118:	df000715 	stw	fp,28(sp)
 401e11c:	df000704 	addi	fp,sp,28
 401e120:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 401e124:	e0bfff17 	ldw	r2,-4(fp)
 401e128:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 401e12c:	e0bffb17 	ldw	r2,-20(fp)
 401e130:	10800017 	ldw	r2,0(r2)
 401e134:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401e138:	e0bffc17 	ldw	r2,-16(fp)
 401e13c:	10800104 	addi	r2,r2,4
 401e140:	10800037 	ldwio	r2,0(r2)
 401e144:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 401e148:	e0bffd17 	ldw	r2,-12(fp)
 401e14c:	1080c00c 	andi	r2,r2,768
 401e150:	10006d26 	beq	r2,zero,401e308 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 401e154:	e0bffd17 	ldw	r2,-12(fp)
 401e158:	1080400c 	andi	r2,r2,256
 401e15c:	10003526 	beq	r2,zero,401e234 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 401e160:	00800074 	movhi	r2,1
 401e164:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e168:	e0bffb17 	ldw	r2,-20(fp)
 401e16c:	10800a17 	ldw	r2,40(r2)
 401e170:	10800044 	addi	r2,r2,1
 401e174:	1081ffcc 	andi	r2,r2,2047
 401e178:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 401e17c:	e0bffb17 	ldw	r2,-20(fp)
 401e180:	10c00b17 	ldw	r3,44(r2)
 401e184:	e0bffe17 	ldw	r2,-8(fp)
 401e188:	18801526 	beq	r3,r2,401e1e0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 401e18c:	e0bffc17 	ldw	r2,-16(fp)
 401e190:	10800037 	ldwio	r2,0(r2)
 401e194:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 401e198:	e0bff917 	ldw	r2,-28(fp)
 401e19c:	10a0000c 	andi	r2,r2,32768
 401e1a0:	10001126 	beq	r2,zero,401e1e8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 401e1a4:	e0bffb17 	ldw	r2,-20(fp)
 401e1a8:	10800a17 	ldw	r2,40(r2)
 401e1ac:	e0fff917 	ldw	r3,-28(fp)
 401e1b0:	1809883a 	mov	r4,r3
 401e1b4:	e0fffb17 	ldw	r3,-20(fp)
 401e1b8:	1885883a 	add	r2,r3,r2
 401e1bc:	10800e04 	addi	r2,r2,56
 401e1c0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e1c4:	e0bffb17 	ldw	r2,-20(fp)
 401e1c8:	10800a17 	ldw	r2,40(r2)
 401e1cc:	10800044 	addi	r2,r2,1
 401e1d0:	10c1ffcc 	andi	r3,r2,2047
 401e1d4:	e0bffb17 	ldw	r2,-20(fp)
 401e1d8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 401e1dc:	003fe206 	br	401e168 <__alt_mem_onchip_memory2_0+0xfc01cee8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 401e1e0:	0001883a 	nop
 401e1e4:	00000106 	br	401e1ec <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 401e1e8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 401e1ec:	e0bff917 	ldw	r2,-28(fp)
 401e1f0:	10bfffec 	andhi	r2,r2,65535
 401e1f4:	10000f26 	beq	r2,zero,401e234 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401e1f8:	e0bffb17 	ldw	r2,-20(fp)
 401e1fc:	10c00817 	ldw	r3,32(r2)
 401e200:	00bfff84 	movi	r2,-2
 401e204:	1886703a 	and	r3,r3,r2
 401e208:	e0bffb17 	ldw	r2,-20(fp)
 401e20c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 401e210:	e0bffc17 	ldw	r2,-16(fp)
 401e214:	10800104 	addi	r2,r2,4
 401e218:	1007883a 	mov	r3,r2
 401e21c:	e0bffb17 	ldw	r2,-20(fp)
 401e220:	10800817 	ldw	r2,32(r2)
 401e224:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401e228:	e0bffc17 	ldw	r2,-16(fp)
 401e22c:	10800104 	addi	r2,r2,4
 401e230:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 401e234:	e0bffd17 	ldw	r2,-12(fp)
 401e238:	1080800c 	andi	r2,r2,512
 401e23c:	103fbe26 	beq	r2,zero,401e138 <__alt_mem_onchip_memory2_0+0xfc01ceb8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 401e240:	e0bffd17 	ldw	r2,-12(fp)
 401e244:	1004d43a 	srli	r2,r2,16
 401e248:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 401e24c:	00001406 	br	401e2a0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 401e250:	e0bffc17 	ldw	r2,-16(fp)
 401e254:	e0fffb17 	ldw	r3,-20(fp)
 401e258:	18c00d17 	ldw	r3,52(r3)
 401e25c:	e13ffb17 	ldw	r4,-20(fp)
 401e260:	20c7883a 	add	r3,r4,r3
 401e264:	18c20e04 	addi	r3,r3,2104
 401e268:	18c00003 	ldbu	r3,0(r3)
 401e26c:	18c03fcc 	andi	r3,r3,255
 401e270:	18c0201c 	xori	r3,r3,128
 401e274:	18ffe004 	addi	r3,r3,-128
 401e278:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e27c:	e0bffb17 	ldw	r2,-20(fp)
 401e280:	10800d17 	ldw	r2,52(r2)
 401e284:	10800044 	addi	r2,r2,1
 401e288:	10c1ffcc 	andi	r3,r2,2047
 401e28c:	e0bffb17 	ldw	r2,-20(fp)
 401e290:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 401e294:	e0bffa17 	ldw	r2,-24(fp)
 401e298:	10bfffc4 	addi	r2,r2,-1
 401e29c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 401e2a0:	e0bffa17 	ldw	r2,-24(fp)
 401e2a4:	10000526 	beq	r2,zero,401e2bc <altera_avalon_jtag_uart_irq+0x1a8>
 401e2a8:	e0bffb17 	ldw	r2,-20(fp)
 401e2ac:	10c00d17 	ldw	r3,52(r2)
 401e2b0:	e0bffb17 	ldw	r2,-20(fp)
 401e2b4:	10800c17 	ldw	r2,48(r2)
 401e2b8:	18bfe51e 	bne	r3,r2,401e250 <__alt_mem_onchip_memory2_0+0xfc01cfd0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 401e2bc:	e0bffa17 	ldw	r2,-24(fp)
 401e2c0:	103f9d26 	beq	r2,zero,401e138 <__alt_mem_onchip_memory2_0+0xfc01ceb8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401e2c4:	e0bffb17 	ldw	r2,-20(fp)
 401e2c8:	10c00817 	ldw	r3,32(r2)
 401e2cc:	00bfff44 	movi	r2,-3
 401e2d0:	1886703a 	and	r3,r3,r2
 401e2d4:	e0bffb17 	ldw	r2,-20(fp)
 401e2d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401e2dc:	e0bffb17 	ldw	r2,-20(fp)
 401e2e0:	10800017 	ldw	r2,0(r2)
 401e2e4:	10800104 	addi	r2,r2,4
 401e2e8:	1007883a 	mov	r3,r2
 401e2ec:	e0bffb17 	ldw	r2,-20(fp)
 401e2f0:	10800817 	ldw	r2,32(r2)
 401e2f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401e2f8:	e0bffc17 	ldw	r2,-16(fp)
 401e2fc:	10800104 	addi	r2,r2,4
 401e300:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 401e304:	003f8c06 	br	401e138 <__alt_mem_onchip_memory2_0+0xfc01ceb8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 401e308:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 401e30c:	0001883a 	nop
 401e310:	e037883a 	mov	sp,fp
 401e314:	df000017 	ldw	fp,0(sp)
 401e318:	dec00104 	addi	sp,sp,4
 401e31c:	f800283a 	ret

0401e320 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 401e320:	defff804 	addi	sp,sp,-32
 401e324:	df000715 	stw	fp,28(sp)
 401e328:	df000704 	addi	fp,sp,28
 401e32c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 401e330:	e0bffb17 	ldw	r2,-20(fp)
 401e334:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 401e338:	e0bff917 	ldw	r2,-28(fp)
 401e33c:	10800017 	ldw	r2,0(r2)
 401e340:	10800104 	addi	r2,r2,4
 401e344:	10800037 	ldwio	r2,0(r2)
 401e348:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 401e34c:	e0bffa17 	ldw	r2,-24(fp)
 401e350:	1081000c 	andi	r2,r2,1024
 401e354:	10000b26 	beq	r2,zero,401e384 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 401e358:	e0bff917 	ldw	r2,-28(fp)
 401e35c:	10800017 	ldw	r2,0(r2)
 401e360:	10800104 	addi	r2,r2,4
 401e364:	1007883a 	mov	r3,r2
 401e368:	e0bff917 	ldw	r2,-28(fp)
 401e36c:	10800817 	ldw	r2,32(r2)
 401e370:	10810014 	ori	r2,r2,1024
 401e374:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 401e378:	e0bff917 	ldw	r2,-28(fp)
 401e37c:	10000915 	stw	zero,36(r2)
 401e380:	00000a06 	br	401e3ac <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 401e384:	e0bff917 	ldw	r2,-28(fp)
 401e388:	10c00917 	ldw	r3,36(r2)
 401e38c:	00a00034 	movhi	r2,32768
 401e390:	10bfff04 	addi	r2,r2,-4
 401e394:	10c00536 	bltu	r2,r3,401e3ac <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 401e398:	e0bff917 	ldw	r2,-28(fp)
 401e39c:	10800917 	ldw	r2,36(r2)
 401e3a0:	10c00044 	addi	r3,r2,1
 401e3a4:	e0bff917 	ldw	r2,-28(fp)
 401e3a8:	10c00915 	stw	r3,36(r2)
 401e3ac:	d0b24717 	ldw	r2,-14052(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 401e3b0:	e037883a 	mov	sp,fp
 401e3b4:	df000017 	ldw	fp,0(sp)
 401e3b8:	dec00104 	addi	sp,sp,4
 401e3bc:	f800283a 	ret

0401e3c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 401e3c0:	defffd04 	addi	sp,sp,-12
 401e3c4:	df000215 	stw	fp,8(sp)
 401e3c8:	df000204 	addi	fp,sp,8
 401e3cc:	e13ffe15 	stw	r4,-8(fp)
 401e3d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401e3d4:	00000506 	br	401e3ec <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 401e3d8:	e0bfff17 	ldw	r2,-4(fp)
 401e3dc:	1090000c 	andi	r2,r2,16384
 401e3e0:	10000226 	beq	r2,zero,401e3ec <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 401e3e4:	00bffd44 	movi	r2,-11
 401e3e8:	00000b06 	br	401e418 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401e3ec:	e0bffe17 	ldw	r2,-8(fp)
 401e3f0:	10c00d17 	ldw	r3,52(r2)
 401e3f4:	e0bffe17 	ldw	r2,-8(fp)
 401e3f8:	10800c17 	ldw	r2,48(r2)
 401e3fc:	18800526 	beq	r3,r2,401e414 <altera_avalon_jtag_uart_close+0x54>
 401e400:	e0bffe17 	ldw	r2,-8(fp)
 401e404:	10c00917 	ldw	r3,36(r2)
 401e408:	e0bffe17 	ldw	r2,-8(fp)
 401e40c:	10800117 	ldw	r2,4(r2)
 401e410:	18bff136 	bltu	r3,r2,401e3d8 <__alt_mem_onchip_memory2_0+0xfc01d158>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 401e414:	0005883a 	mov	r2,zero
}
 401e418:	e037883a 	mov	sp,fp
 401e41c:	df000017 	ldw	fp,0(sp)
 401e420:	dec00104 	addi	sp,sp,4
 401e424:	f800283a 	ret

0401e428 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 401e428:	defffa04 	addi	sp,sp,-24
 401e42c:	df000515 	stw	fp,20(sp)
 401e430:	df000504 	addi	fp,sp,20
 401e434:	e13ffd15 	stw	r4,-12(fp)
 401e438:	e17ffe15 	stw	r5,-8(fp)
 401e43c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 401e440:	00bff9c4 	movi	r2,-25
 401e444:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 401e448:	e0bffe17 	ldw	r2,-8(fp)
 401e44c:	10da8060 	cmpeqi	r3,r2,27137
 401e450:	1800031e 	bne	r3,zero,401e460 <altera_avalon_jtag_uart_ioctl+0x38>
 401e454:	109a80a0 	cmpeqi	r2,r2,27138
 401e458:	1000181e 	bne	r2,zero,401e4bc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 401e45c:	00002906 	br	401e504 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 401e460:	e0bffd17 	ldw	r2,-12(fp)
 401e464:	10c00117 	ldw	r3,4(r2)
 401e468:	00a00034 	movhi	r2,32768
 401e46c:	10bfffc4 	addi	r2,r2,-1
 401e470:	18802126 	beq	r3,r2,401e4f8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 401e474:	e0bfff17 	ldw	r2,-4(fp)
 401e478:	10800017 	ldw	r2,0(r2)
 401e47c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 401e480:	e0bffc17 	ldw	r2,-16(fp)
 401e484:	10800090 	cmplti	r2,r2,2
 401e488:	1000061e 	bne	r2,zero,401e4a4 <altera_avalon_jtag_uart_ioctl+0x7c>
 401e48c:	e0fffc17 	ldw	r3,-16(fp)
 401e490:	00a00034 	movhi	r2,32768
 401e494:	10bfffc4 	addi	r2,r2,-1
 401e498:	18800226 	beq	r3,r2,401e4a4 <altera_avalon_jtag_uart_ioctl+0x7c>
 401e49c:	e0bffc17 	ldw	r2,-16(fp)
 401e4a0:	00000206 	br	401e4ac <altera_avalon_jtag_uart_ioctl+0x84>
 401e4a4:	00a00034 	movhi	r2,32768
 401e4a8:	10bfff84 	addi	r2,r2,-2
 401e4ac:	e0fffd17 	ldw	r3,-12(fp)
 401e4b0:	18800115 	stw	r2,4(r3)
      rc = 0;
 401e4b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401e4b8:	00000f06 	br	401e4f8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401e4bc:	e0bffd17 	ldw	r2,-12(fp)
 401e4c0:	10c00117 	ldw	r3,4(r2)
 401e4c4:	00a00034 	movhi	r2,32768
 401e4c8:	10bfffc4 	addi	r2,r2,-1
 401e4cc:	18800c26 	beq	r3,r2,401e500 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 401e4d0:	e0bffd17 	ldw	r2,-12(fp)
 401e4d4:	10c00917 	ldw	r3,36(r2)
 401e4d8:	e0bffd17 	ldw	r2,-12(fp)
 401e4dc:	10800117 	ldw	r2,4(r2)
 401e4e0:	1885803a 	cmpltu	r2,r3,r2
 401e4e4:	10c03fcc 	andi	r3,r2,255
 401e4e8:	e0bfff17 	ldw	r2,-4(fp)
 401e4ec:	10c00015 	stw	r3,0(r2)
      rc = 0;
 401e4f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401e4f4:	00000206 	br	401e500 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 401e4f8:	0001883a 	nop
 401e4fc:	00000106 	br	401e504 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 401e500:	0001883a 	nop

  default:
    break;
  }

  return rc;
 401e504:	e0bffb17 	ldw	r2,-20(fp)
}
 401e508:	e037883a 	mov	sp,fp
 401e50c:	df000017 	ldw	fp,0(sp)
 401e510:	dec00104 	addi	sp,sp,4
 401e514:	f800283a 	ret

0401e518 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 401e518:	defff304 	addi	sp,sp,-52
 401e51c:	dfc00c15 	stw	ra,48(sp)
 401e520:	df000b15 	stw	fp,44(sp)
 401e524:	df000b04 	addi	fp,sp,44
 401e528:	e13ffc15 	stw	r4,-16(fp)
 401e52c:	e17ffd15 	stw	r5,-12(fp)
 401e530:	e1bffe15 	stw	r6,-8(fp)
 401e534:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 401e538:	e0bffd17 	ldw	r2,-12(fp)
 401e53c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401e540:	00004706 	br	401e660 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401e544:	e0bffc17 	ldw	r2,-16(fp)
 401e548:	10800a17 	ldw	r2,40(r2)
 401e54c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 401e550:	e0bffc17 	ldw	r2,-16(fp)
 401e554:	10800b17 	ldw	r2,44(r2)
 401e558:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 401e55c:	e0fff717 	ldw	r3,-36(fp)
 401e560:	e0bff817 	ldw	r2,-32(fp)
 401e564:	18800536 	bltu	r3,r2,401e57c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 401e568:	e0fff717 	ldw	r3,-36(fp)
 401e56c:	e0bff817 	ldw	r2,-32(fp)
 401e570:	1885c83a 	sub	r2,r3,r2
 401e574:	e0bff615 	stw	r2,-40(fp)
 401e578:	00000406 	br	401e58c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 401e57c:	00c20004 	movi	r3,2048
 401e580:	e0bff817 	ldw	r2,-32(fp)
 401e584:	1885c83a 	sub	r2,r3,r2
 401e588:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401e58c:	e0bff617 	ldw	r2,-40(fp)
 401e590:	10001e26 	beq	r2,zero,401e60c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 401e594:	e0fffe17 	ldw	r3,-8(fp)
 401e598:	e0bff617 	ldw	r2,-40(fp)
 401e59c:	1880022e 	bgeu	r3,r2,401e5a8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 401e5a0:	e0bffe17 	ldw	r2,-8(fp)
 401e5a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 401e5a8:	e0bffc17 	ldw	r2,-16(fp)
 401e5ac:	10c00e04 	addi	r3,r2,56
 401e5b0:	e0bff817 	ldw	r2,-32(fp)
 401e5b4:	1885883a 	add	r2,r3,r2
 401e5b8:	e1bff617 	ldw	r6,-40(fp)
 401e5bc:	100b883a 	mov	r5,r2
 401e5c0:	e13ff517 	ldw	r4,-44(fp)
 401e5c4:	400ec380 	call	400ec38 <memcpy>
      ptr   += n;
 401e5c8:	e0fff517 	ldw	r3,-44(fp)
 401e5cc:	e0bff617 	ldw	r2,-40(fp)
 401e5d0:	1885883a 	add	r2,r3,r2
 401e5d4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 401e5d8:	e0fffe17 	ldw	r3,-8(fp)
 401e5dc:	e0bff617 	ldw	r2,-40(fp)
 401e5e0:	1885c83a 	sub	r2,r3,r2
 401e5e4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e5e8:	e0fff817 	ldw	r3,-32(fp)
 401e5ec:	e0bff617 	ldw	r2,-40(fp)
 401e5f0:	1885883a 	add	r2,r3,r2
 401e5f4:	10c1ffcc 	andi	r3,r2,2047
 401e5f8:	e0bffc17 	ldw	r2,-16(fp)
 401e5fc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 401e600:	e0bffe17 	ldw	r2,-8(fp)
 401e604:	00bfcf16 	blt	zero,r2,401e544 <__alt_mem_onchip_memory2_0+0xfc01d2c4>
 401e608:	00000106 	br	401e610 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 401e60c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 401e610:	e0fff517 	ldw	r3,-44(fp)
 401e614:	e0bffd17 	ldw	r2,-12(fp)
 401e618:	1880141e 	bne	r3,r2,401e66c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401e61c:	e0bfff17 	ldw	r2,-4(fp)
 401e620:	1090000c 	andi	r2,r2,16384
 401e624:	1000131e 	bne	r2,zero,401e674 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 401e628:	0001883a 	nop
 401e62c:	e0bffc17 	ldw	r2,-16(fp)
 401e630:	10c00a17 	ldw	r3,40(r2)
 401e634:	e0bff717 	ldw	r2,-36(fp)
 401e638:	1880051e 	bne	r3,r2,401e650 <altera_avalon_jtag_uart_read+0x138>
 401e63c:	e0bffc17 	ldw	r2,-16(fp)
 401e640:	10c00917 	ldw	r3,36(r2)
 401e644:	e0bffc17 	ldw	r2,-16(fp)
 401e648:	10800117 	ldw	r2,4(r2)
 401e64c:	18bff736 	bltu	r3,r2,401e62c <__alt_mem_onchip_memory2_0+0xfc01d3ac>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 401e650:	e0bffc17 	ldw	r2,-16(fp)
 401e654:	10c00a17 	ldw	r3,40(r2)
 401e658:	e0bff717 	ldw	r2,-36(fp)
 401e65c:	18800726 	beq	r3,r2,401e67c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401e660:	e0bffe17 	ldw	r2,-8(fp)
 401e664:	00bfb716 	blt	zero,r2,401e544 <__alt_mem_onchip_memory2_0+0xfc01d2c4>
 401e668:	00000506 	br	401e680 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 401e66c:	0001883a 	nop
 401e670:	00000306 	br	401e680 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 401e674:	0001883a 	nop
 401e678:	00000106 	br	401e680 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 401e67c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 401e680:	e0fff517 	ldw	r3,-44(fp)
 401e684:	e0bffd17 	ldw	r2,-12(fp)
 401e688:	18801826 	beq	r3,r2,401e6ec <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e68c:	0005303a 	rdctl	r2,status
 401e690:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e694:	e0fffb17 	ldw	r3,-20(fp)
 401e698:	00bfff84 	movi	r2,-2
 401e69c:	1884703a 	and	r2,r3,r2
 401e6a0:	1001703a 	wrctl	status,r2
  
  return context;
 401e6a4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 401e6a8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401e6ac:	e0bffc17 	ldw	r2,-16(fp)
 401e6b0:	10800817 	ldw	r2,32(r2)
 401e6b4:	10c00054 	ori	r3,r2,1
 401e6b8:	e0bffc17 	ldw	r2,-16(fp)
 401e6bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401e6c0:	e0bffc17 	ldw	r2,-16(fp)
 401e6c4:	10800017 	ldw	r2,0(r2)
 401e6c8:	10800104 	addi	r2,r2,4
 401e6cc:	1007883a 	mov	r3,r2
 401e6d0:	e0bffc17 	ldw	r2,-16(fp)
 401e6d4:	10800817 	ldw	r2,32(r2)
 401e6d8:	18800035 	stwio	r2,0(r3)
 401e6dc:	e0bffa17 	ldw	r2,-24(fp)
 401e6e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e6e4:	e0bff917 	ldw	r2,-28(fp)
 401e6e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 401e6ec:	e0fff517 	ldw	r3,-44(fp)
 401e6f0:	e0bffd17 	ldw	r2,-12(fp)
 401e6f4:	18800426 	beq	r3,r2,401e708 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 401e6f8:	e0fff517 	ldw	r3,-44(fp)
 401e6fc:	e0bffd17 	ldw	r2,-12(fp)
 401e700:	1885c83a 	sub	r2,r3,r2
 401e704:	00000606 	br	401e720 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 401e708:	e0bfff17 	ldw	r2,-4(fp)
 401e70c:	1090000c 	andi	r2,r2,16384
 401e710:	10000226 	beq	r2,zero,401e71c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 401e714:	00bffd44 	movi	r2,-11
 401e718:	00000106 	br	401e720 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 401e71c:	00bffec4 	movi	r2,-5
}
 401e720:	e037883a 	mov	sp,fp
 401e724:	dfc00117 	ldw	ra,4(sp)
 401e728:	df000017 	ldw	fp,0(sp)
 401e72c:	dec00204 	addi	sp,sp,8
 401e730:	f800283a 	ret

0401e734 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401e734:	defff304 	addi	sp,sp,-52
 401e738:	dfc00c15 	stw	ra,48(sp)
 401e73c:	df000b15 	stw	fp,44(sp)
 401e740:	df000b04 	addi	fp,sp,44
 401e744:	e13ffc15 	stw	r4,-16(fp)
 401e748:	e17ffd15 	stw	r5,-12(fp)
 401e74c:	e1bffe15 	stw	r6,-8(fp)
 401e750:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401e754:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 401e758:	e0bffd17 	ldw	r2,-12(fp)
 401e75c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401e760:	00003706 	br	401e840 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 401e764:	e0bffc17 	ldw	r2,-16(fp)
 401e768:	10800c17 	ldw	r2,48(r2)
 401e76c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 401e770:	e0bffc17 	ldw	r2,-16(fp)
 401e774:	10800d17 	ldw	r2,52(r2)
 401e778:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 401e77c:	e0fff917 	ldw	r3,-28(fp)
 401e780:	e0bff517 	ldw	r2,-44(fp)
 401e784:	1880062e 	bgeu	r3,r2,401e7a0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 401e788:	e0fff517 	ldw	r3,-44(fp)
 401e78c:	e0bff917 	ldw	r2,-28(fp)
 401e790:	1885c83a 	sub	r2,r3,r2
 401e794:	10bfffc4 	addi	r2,r2,-1
 401e798:	e0bff615 	stw	r2,-40(fp)
 401e79c:	00000b06 	br	401e7cc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 401e7a0:	e0bff517 	ldw	r2,-44(fp)
 401e7a4:	10000526 	beq	r2,zero,401e7bc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 401e7a8:	00c20004 	movi	r3,2048
 401e7ac:	e0bff917 	ldw	r2,-28(fp)
 401e7b0:	1885c83a 	sub	r2,r3,r2
 401e7b4:	e0bff615 	stw	r2,-40(fp)
 401e7b8:	00000406 	br	401e7cc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 401e7bc:	00c1ffc4 	movi	r3,2047
 401e7c0:	e0bff917 	ldw	r2,-28(fp)
 401e7c4:	1885c83a 	sub	r2,r3,r2
 401e7c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401e7cc:	e0bff617 	ldw	r2,-40(fp)
 401e7d0:	10001e26 	beq	r2,zero,401e84c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 401e7d4:	e0fffe17 	ldw	r3,-8(fp)
 401e7d8:	e0bff617 	ldw	r2,-40(fp)
 401e7dc:	1880022e 	bgeu	r3,r2,401e7e8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 401e7e0:	e0bffe17 	ldw	r2,-8(fp)
 401e7e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 401e7e8:	e0bffc17 	ldw	r2,-16(fp)
 401e7ec:	10c20e04 	addi	r3,r2,2104
 401e7f0:	e0bff917 	ldw	r2,-28(fp)
 401e7f4:	1885883a 	add	r2,r3,r2
 401e7f8:	e1bff617 	ldw	r6,-40(fp)
 401e7fc:	e17ffd17 	ldw	r5,-12(fp)
 401e800:	1009883a 	mov	r4,r2
 401e804:	400ec380 	call	400ec38 <memcpy>
      ptr   += n;
 401e808:	e0fffd17 	ldw	r3,-12(fp)
 401e80c:	e0bff617 	ldw	r2,-40(fp)
 401e810:	1885883a 	add	r2,r3,r2
 401e814:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 401e818:	e0fffe17 	ldw	r3,-8(fp)
 401e81c:	e0bff617 	ldw	r2,-40(fp)
 401e820:	1885c83a 	sub	r2,r3,r2
 401e824:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e828:	e0fff917 	ldw	r3,-28(fp)
 401e82c:	e0bff617 	ldw	r2,-40(fp)
 401e830:	1885883a 	add	r2,r3,r2
 401e834:	10c1ffcc 	andi	r3,r2,2047
 401e838:	e0bffc17 	ldw	r2,-16(fp)
 401e83c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401e840:	e0bffe17 	ldw	r2,-8(fp)
 401e844:	00bfc716 	blt	zero,r2,401e764 <__alt_mem_onchip_memory2_0+0xfc01d4e4>
 401e848:	00000106 	br	401e850 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 401e84c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e850:	0005303a 	rdctl	r2,status
 401e854:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e858:	e0fffb17 	ldw	r3,-20(fp)
 401e85c:	00bfff84 	movi	r2,-2
 401e860:	1884703a 	and	r2,r3,r2
 401e864:	1001703a 	wrctl	status,r2
  
  return context;
 401e868:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 401e86c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401e870:	e0bffc17 	ldw	r2,-16(fp)
 401e874:	10800817 	ldw	r2,32(r2)
 401e878:	10c00094 	ori	r3,r2,2
 401e87c:	e0bffc17 	ldw	r2,-16(fp)
 401e880:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401e884:	e0bffc17 	ldw	r2,-16(fp)
 401e888:	10800017 	ldw	r2,0(r2)
 401e88c:	10800104 	addi	r2,r2,4
 401e890:	1007883a 	mov	r3,r2
 401e894:	e0bffc17 	ldw	r2,-16(fp)
 401e898:	10800817 	ldw	r2,32(r2)
 401e89c:	18800035 	stwio	r2,0(r3)
 401e8a0:	e0bffa17 	ldw	r2,-24(fp)
 401e8a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e8a8:	e0bff817 	ldw	r2,-32(fp)
 401e8ac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 401e8b0:	e0bffe17 	ldw	r2,-8(fp)
 401e8b4:	0080100e 	bge	zero,r2,401e8f8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 401e8b8:	e0bfff17 	ldw	r2,-4(fp)
 401e8bc:	1090000c 	andi	r2,r2,16384
 401e8c0:	1000101e 	bne	r2,zero,401e904 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401e8c4:	0001883a 	nop
 401e8c8:	e0bffc17 	ldw	r2,-16(fp)
 401e8cc:	10c00d17 	ldw	r3,52(r2)
 401e8d0:	e0bff517 	ldw	r2,-44(fp)
 401e8d4:	1880051e 	bne	r3,r2,401e8ec <altera_avalon_jtag_uart_write+0x1b8>
 401e8d8:	e0bffc17 	ldw	r2,-16(fp)
 401e8dc:	10c00917 	ldw	r3,36(r2)
 401e8e0:	e0bffc17 	ldw	r2,-16(fp)
 401e8e4:	10800117 	ldw	r2,4(r2)
 401e8e8:	18bff736 	bltu	r3,r2,401e8c8 <__alt_mem_onchip_memory2_0+0xfc01d648>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 401e8ec:	e0bffc17 	ldw	r2,-16(fp)
 401e8f0:	10800917 	ldw	r2,36(r2)
 401e8f4:	1000051e 	bne	r2,zero,401e90c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 401e8f8:	e0bffe17 	ldw	r2,-8(fp)
 401e8fc:	00bfd016 	blt	zero,r2,401e840 <__alt_mem_onchip_memory2_0+0xfc01d5c0>
 401e900:	00000306 	br	401e910 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401e904:	0001883a 	nop
 401e908:	00000106 	br	401e910 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 401e90c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 401e910:	e0fffd17 	ldw	r3,-12(fp)
 401e914:	e0bff717 	ldw	r2,-36(fp)
 401e918:	18800426 	beq	r3,r2,401e92c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 401e91c:	e0fffd17 	ldw	r3,-12(fp)
 401e920:	e0bff717 	ldw	r2,-36(fp)
 401e924:	1885c83a 	sub	r2,r3,r2
 401e928:	00000606 	br	401e944 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 401e92c:	e0bfff17 	ldw	r2,-4(fp)
 401e930:	1090000c 	andi	r2,r2,16384
 401e934:	10000226 	beq	r2,zero,401e940 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 401e938:	00bffd44 	movi	r2,-11
 401e93c:	00000106 	br	401e944 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 401e940:	00bffec4 	movi	r2,-5
}
 401e944:	e037883a 	mov	sp,fp
 401e948:	dfc00117 	ldw	ra,4(sp)
 401e94c:	df000017 	ldw	fp,0(sp)
 401e950:	dec00204 	addi	sp,sp,8
 401e954:	f800283a 	ret

0401e958 <alt_avalon_spi_command>:
 401e958:	defff404 	addi	sp,sp,-48
 401e95c:	df000b15 	stw	fp,44(sp)
 401e960:	df000b04 	addi	fp,sp,44
 401e964:	e13ffc15 	stw	r4,-16(fp)
 401e968:	e17ffd15 	stw	r5,-12(fp)
 401e96c:	e1bffe15 	stw	r6,-8(fp)
 401e970:	e1ffff15 	stw	r7,-4(fp)
 401e974:	e0ffff17 	ldw	r3,-4(fp)
 401e978:	e0bffe17 	ldw	r2,-8(fp)
 401e97c:	1885883a 	add	r2,r3,r2
 401e980:	e0bff815 	stw	r2,-32(fp)
 401e984:	e0c00217 	ldw	r3,8(fp)
 401e988:	e0800117 	ldw	r2,4(fp)
 401e98c:	1885883a 	add	r2,r3,r2
 401e990:	e0bff915 	stw	r2,-28(fp)
 401e994:	e0800117 	ldw	r2,4(fp)
 401e998:	e0bff515 	stw	r2,-44(fp)
 401e99c:	e0bffe17 	ldw	r2,-8(fp)
 401e9a0:	e0bff615 	stw	r2,-40(fp)
 401e9a4:	00800044 	movi	r2,1
 401e9a8:	e0bff715 	stw	r2,-36(fp)
 401e9ac:	e0bffc17 	ldw	r2,-16(fp)
 401e9b0:	10800504 	addi	r2,r2,20
 401e9b4:	1009883a 	mov	r4,r2
 401e9b8:	00c00044 	movi	r3,1
 401e9bc:	e0bffd17 	ldw	r2,-12(fp)
 401e9c0:	1884983a 	sll	r2,r3,r2
 401e9c4:	20800035 	stwio	r2,0(r4)
 401e9c8:	e0800317 	ldw	r2,12(fp)
 401e9cc:	1080008c 	andi	r2,r2,2
 401e9d0:	1000051e 	bne	r2,zero,401e9e8 <alt_avalon_spi_command+0x90>
 401e9d4:	e0bffc17 	ldw	r2,-16(fp)
 401e9d8:	10800304 	addi	r2,r2,12
 401e9dc:	1007883a 	mov	r3,r2
 401e9e0:	00810004 	movi	r2,1024
 401e9e4:	18800035 	stwio	r2,0(r3)
 401e9e8:	e0bffc17 	ldw	r2,-16(fp)
 401e9ec:	10800037 	ldwio	r2,0(r2)
 401e9f0:	e0bffc17 	ldw	r2,-16(fp)
 401e9f4:	10800204 	addi	r2,r2,8
 401e9f8:	10800037 	ldwio	r2,0(r2)
 401e9fc:	e0bffa15 	stw	r2,-24(fp)
 401ea00:	e0bffa17 	ldw	r2,-24(fp)
 401ea04:	1080100c 	andi	r2,r2,64
 401ea08:	10000226 	beq	r2,zero,401ea14 <alt_avalon_spi_command+0xbc>
 401ea0c:	e0bff717 	ldw	r2,-36(fp)
 401ea10:	1000031e 	bne	r2,zero,401ea20 <alt_avalon_spi_command+0xc8>
 401ea14:	e0bffa17 	ldw	r2,-24(fp)
 401ea18:	1080200c 	andi	r2,r2,128
 401ea1c:	103ff426 	beq	r2,zero,401e9f0 <__alt_mem_onchip_memory2_0+0xfc01d770>
 401ea20:	e0bffa17 	ldw	r2,-24(fp)
 401ea24:	1080100c 	andi	r2,r2,64
 401ea28:	10001e26 	beq	r2,zero,401eaa4 <alt_avalon_spi_command+0x14c>
 401ea2c:	e0bff717 	ldw	r2,-36(fp)
 401ea30:	00801c0e 	bge	zero,r2,401eaa4 <alt_avalon_spi_command+0x14c>
 401ea34:	e0bff717 	ldw	r2,-36(fp)
 401ea38:	10bfffc4 	addi	r2,r2,-1
 401ea3c:	e0bff715 	stw	r2,-36(fp)
 401ea40:	e0ffff17 	ldw	r3,-4(fp)
 401ea44:	e0bff817 	ldw	r2,-32(fp)
 401ea48:	18800a2e 	bgeu	r3,r2,401ea74 <alt_avalon_spi_command+0x11c>
 401ea4c:	e0bffc17 	ldw	r2,-16(fp)
 401ea50:	10800104 	addi	r2,r2,4
 401ea54:	1009883a 	mov	r4,r2
 401ea58:	e0bfff17 	ldw	r2,-4(fp)
 401ea5c:	10c00044 	addi	r3,r2,1
 401ea60:	e0ffff15 	stw	r3,-4(fp)
 401ea64:	10800003 	ldbu	r2,0(r2)
 401ea68:	10803fcc 	andi	r2,r2,255
 401ea6c:	20800035 	stwio	r2,0(r4)
 401ea70:	00000c06 	br	401eaa4 <alt_avalon_spi_command+0x14c>
 401ea74:	e0bff517 	ldw	r2,-44(fp)
 401ea78:	10000826 	beq	r2,zero,401ea9c <alt_avalon_spi_command+0x144>
 401ea7c:	e0bff517 	ldw	r2,-44(fp)
 401ea80:	10bfffc4 	addi	r2,r2,-1
 401ea84:	e0bff515 	stw	r2,-44(fp)
 401ea88:	e0bffc17 	ldw	r2,-16(fp)
 401ea8c:	10800104 	addi	r2,r2,4
 401ea90:	0007883a 	mov	r3,zero
 401ea94:	10c00035 	stwio	r3,0(r2)
 401ea98:	00000206 	br	401eaa4 <alt_avalon_spi_command+0x14c>
 401ea9c:	00bf0004 	movi	r2,-1024
 401eaa0:	e0bff715 	stw	r2,-36(fp)
 401eaa4:	e0bffa17 	ldw	r2,-24(fp)
 401eaa8:	1080200c 	andi	r2,r2,128
 401eaac:	103fd026 	beq	r2,zero,401e9f0 <__alt_mem_onchip_memory2_0+0xfc01d770>
 401eab0:	e0bffc17 	ldw	r2,-16(fp)
 401eab4:	10800037 	ldwio	r2,0(r2)
 401eab8:	e0bffb15 	stw	r2,-20(fp)
 401eabc:	e0bff617 	ldw	r2,-40(fp)
 401eac0:	10000426 	beq	r2,zero,401ead4 <alt_avalon_spi_command+0x17c>
 401eac4:	e0bff617 	ldw	r2,-40(fp)
 401eac8:	10bfffc4 	addi	r2,r2,-1
 401eacc:	e0bff615 	stw	r2,-40(fp)
 401ead0:	00000506 	br	401eae8 <alt_avalon_spi_command+0x190>
 401ead4:	e0800217 	ldw	r2,8(fp)
 401ead8:	10c00044 	addi	r3,r2,1
 401eadc:	e0c00215 	stw	r3,8(fp)
 401eae0:	e0fffb17 	ldw	r3,-20(fp)
 401eae4:	10c00005 	stb	r3,0(r2)
 401eae8:	e0bff717 	ldw	r2,-36(fp)
 401eaec:	10800044 	addi	r2,r2,1
 401eaf0:	e0bff715 	stw	r2,-36(fp)
 401eaf4:	e0bff617 	ldw	r2,-40(fp)
 401eaf8:	103fbd1e 	bne	r2,zero,401e9f0 <__alt_mem_onchip_memory2_0+0xfc01d770>
 401eafc:	e0c00217 	ldw	r3,8(fp)
 401eb00:	e0bff917 	ldw	r2,-28(fp)
 401eb04:	18bfba1e 	bne	r3,r2,401e9f0 <__alt_mem_onchip_memory2_0+0xfc01d770>
 401eb08:	e0bffc17 	ldw	r2,-16(fp)
 401eb0c:	10800204 	addi	r2,r2,8
 401eb10:	10800037 	ldwio	r2,0(r2)
 401eb14:	e0bffa15 	stw	r2,-24(fp)
 401eb18:	e0bffa17 	ldw	r2,-24(fp)
 401eb1c:	1080080c 	andi	r2,r2,32
 401eb20:	103ff926 	beq	r2,zero,401eb08 <__alt_mem_onchip_memory2_0+0xfc01d888>
 401eb24:	e0800317 	ldw	r2,12(fp)
 401eb28:	1080004c 	andi	r2,r2,1
 401eb2c:	1000041e 	bne	r2,zero,401eb40 <alt_avalon_spi_command+0x1e8>
 401eb30:	e0bffc17 	ldw	r2,-16(fp)
 401eb34:	10800304 	addi	r2,r2,12
 401eb38:	0007883a 	mov	r3,zero
 401eb3c:	10c00035 	stwio	r3,0(r2)
 401eb40:	e0800117 	ldw	r2,4(fp)
 401eb44:	e037883a 	mov	sp,fp
 401eb48:	df000017 	ldw	fp,0(sp)
 401eb4c:	dec00104 	addi	sp,sp,4
 401eb50:	f800283a 	ret

0401eb54 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 401eb54:	defffa04 	addi	sp,sp,-24
 401eb58:	dfc00515 	stw	ra,20(sp)
 401eb5c:	df000415 	stw	fp,16(sp)
 401eb60:	df000404 	addi	fp,sp,16
 401eb64:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 401eb68:	0007883a 	mov	r3,zero
 401eb6c:	e0bfff17 	ldw	r2,-4(fp)
 401eb70:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401eb74:	e0bfff17 	ldw	r2,-4(fp)
 401eb78:	10800104 	addi	r2,r2,4
 401eb7c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401eb80:	0005303a 	rdctl	r2,status
 401eb84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401eb88:	e0fffd17 	ldw	r3,-12(fp)
 401eb8c:	00bfff84 	movi	r2,-2
 401eb90:	1884703a 	and	r2,r3,r2
 401eb94:	1001703a 	wrctl	status,r2
  
  return context;
 401eb98:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 401eb9c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 401eba0:	401fac40 	call	401fac4 <alt_tick>
 401eba4:	e0bffc17 	ldw	r2,-16(fp)
 401eba8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ebac:	e0bffe17 	ldw	r2,-8(fp)
 401ebb0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 401ebb4:	0001883a 	nop
 401ebb8:	e037883a 	mov	sp,fp
 401ebbc:	dfc00117 	ldw	ra,4(sp)
 401ebc0:	df000017 	ldw	fp,0(sp)
 401ebc4:	dec00204 	addi	sp,sp,8
 401ebc8:	f800283a 	ret

0401ebcc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 401ebcc:	defff804 	addi	sp,sp,-32
 401ebd0:	dfc00715 	stw	ra,28(sp)
 401ebd4:	df000615 	stw	fp,24(sp)
 401ebd8:	df000604 	addi	fp,sp,24
 401ebdc:	e13ffc15 	stw	r4,-16(fp)
 401ebe0:	e17ffd15 	stw	r5,-12(fp)
 401ebe4:	e1bffe15 	stw	r6,-8(fp)
 401ebe8:	e1ffff15 	stw	r7,-4(fp)
 401ebec:	e0bfff17 	ldw	r2,-4(fp)
 401ebf0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 401ebf4:	d0b24717 	ldw	r2,-14052(gp)
 401ebf8:	1000021e 	bne	r2,zero,401ec04 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 401ebfc:	e0bffb17 	ldw	r2,-20(fp)
 401ec00:	d0b24715 	stw	r2,-14052(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401ec04:	e0bffc17 	ldw	r2,-16(fp)
 401ec08:	10800104 	addi	r2,r2,4
 401ec0c:	00c001c4 	movi	r3,7
 401ec10:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 401ec14:	d8000015 	stw	zero,0(sp)
 401ec18:	e1fffc17 	ldw	r7,-16(fp)
 401ec1c:	018100b4 	movhi	r6,1026
 401ec20:	31bad504 	addi	r6,r6,-5292
 401ec24:	e17ffe17 	ldw	r5,-8(fp)
 401ec28:	e13ffd17 	ldw	r4,-12(fp)
 401ec2c:	401f13c0 	call	401f13c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401ec30:	0001883a 	nop
 401ec34:	e037883a 	mov	sp,fp
 401ec38:	dfc00117 	ldw	ra,4(sp)
 401ec3c:	df000017 	ldw	fp,0(sp)
 401ec40:	dec00204 	addi	sp,sp,8
 401ec44:	f800283a 	ret

0401ec48 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 401ec48:	defff504 	addi	sp,sp,-44
 401ec4c:	df000a15 	stw	fp,40(sp)
 401ec50:	df000a04 	addi	fp,sp,40
 401ec54:	e13ffc15 	stw	r4,-16(fp)
 401ec58:	e17ffd15 	stw	r5,-12(fp)
 401ec5c:	e1bffe15 	stw	r6,-8(fp)
 401ec60:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 401ec64:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401ec68:	d0b24717 	ldw	r2,-14052(gp)
  
  if (alt_ticks_per_second ())
 401ec6c:	10003c26 	beq	r2,zero,401ed60 <alt_alarm_start+0x118>
  {
    if (alarm)
 401ec70:	e0bffc17 	ldw	r2,-16(fp)
 401ec74:	10003826 	beq	r2,zero,401ed58 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 401ec78:	e0bffc17 	ldw	r2,-16(fp)
 401ec7c:	e0fffe17 	ldw	r3,-8(fp)
 401ec80:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 401ec84:	e0bffc17 	ldw	r2,-16(fp)
 401ec88:	e0ffff17 	ldw	r3,-4(fp)
 401ec8c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ec90:	0005303a 	rdctl	r2,status
 401ec94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ec98:	e0fff917 	ldw	r3,-28(fp)
 401ec9c:	00bfff84 	movi	r2,-2
 401eca0:	1884703a 	and	r2,r3,r2
 401eca4:	1001703a 	wrctl	status,r2
  
  return context;
 401eca8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 401ecac:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401ecb0:	d0b24817 	ldw	r2,-14048(gp)
      
      current_nticks = alt_nticks();
 401ecb4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 401ecb8:	e0fffd17 	ldw	r3,-12(fp)
 401ecbc:	e0bff617 	ldw	r2,-40(fp)
 401ecc0:	1885883a 	add	r2,r3,r2
 401ecc4:	10c00044 	addi	r3,r2,1
 401ecc8:	e0bffc17 	ldw	r2,-16(fp)
 401eccc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 401ecd0:	e0bffc17 	ldw	r2,-16(fp)
 401ecd4:	10c00217 	ldw	r3,8(r2)
 401ecd8:	e0bff617 	ldw	r2,-40(fp)
 401ecdc:	1880042e 	bgeu	r3,r2,401ecf0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 401ece0:	e0bffc17 	ldw	r2,-16(fp)
 401ece4:	00c00044 	movi	r3,1
 401ece8:	10c00405 	stb	r3,16(r2)
 401ecec:	00000206 	br	401ecf8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 401ecf0:	e0bffc17 	ldw	r2,-16(fp)
 401ecf4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 401ecf8:	e0bffc17 	ldw	r2,-16(fp)
 401ecfc:	d0e5bc04 	addi	r3,gp,-26896
 401ed00:	e0fffa15 	stw	r3,-24(fp)
 401ed04:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401ed08:	e0bffb17 	ldw	r2,-20(fp)
 401ed0c:	e0fffa17 	ldw	r3,-24(fp)
 401ed10:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401ed14:	e0bffa17 	ldw	r2,-24(fp)
 401ed18:	10c00017 	ldw	r3,0(r2)
 401ed1c:	e0bffb17 	ldw	r2,-20(fp)
 401ed20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401ed24:	e0bffa17 	ldw	r2,-24(fp)
 401ed28:	10800017 	ldw	r2,0(r2)
 401ed2c:	e0fffb17 	ldw	r3,-20(fp)
 401ed30:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401ed34:	e0bffa17 	ldw	r2,-24(fp)
 401ed38:	e0fffb17 	ldw	r3,-20(fp)
 401ed3c:	10c00015 	stw	r3,0(r2)
 401ed40:	e0bff817 	ldw	r2,-32(fp)
 401ed44:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ed48:	e0bff717 	ldw	r2,-36(fp)
 401ed4c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 401ed50:	0005883a 	mov	r2,zero
 401ed54:	00000306 	br	401ed64 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 401ed58:	00bffa84 	movi	r2,-22
 401ed5c:	00000106 	br	401ed64 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 401ed60:	00bfde84 	movi	r2,-134
  }
}
 401ed64:	e037883a 	mov	sp,fp
 401ed68:	df000017 	ldw	fp,0(sp)
 401ed6c:	dec00104 	addi	sp,sp,4
 401ed70:	f800283a 	ret

0401ed74 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 401ed74:	defffa04 	addi	sp,sp,-24
 401ed78:	dfc00515 	stw	ra,20(sp)
 401ed7c:	df000415 	stw	fp,16(sp)
 401ed80:	df000404 	addi	fp,sp,16
 401ed84:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 401ed88:	00800244 	movi	r2,9
 401ed8c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 401ed90:	014003f4 	movhi	r5,15
 401ed94:	29509004 	addi	r5,r5,16960
 401ed98:	e13ffd17 	ldw	r4,-12(fp)
 401ed9c:	400d2c40 	call	400d2c4 <__mulsi3>
 401eda0:	100b883a 	mov	r5,r2
 401eda4:	0100bef4 	movhi	r4,763
 401eda8:	213c2004 	addi	r4,r4,-3968
 401edac:	400d2080 	call	400d208 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401edb0:	100b883a 	mov	r5,r2
 401edb4:	01200034 	movhi	r4,32768
 401edb8:	213fffc4 	addi	r4,r4,-1
 401edbc:	400d2080 	call	400d208 <__udivsi3>
 401edc0:	100b883a 	mov	r5,r2
 401edc4:	e13fff17 	ldw	r4,-4(fp)
 401edc8:	400d2080 	call	400d208 <__udivsi3>
 401edcc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 401edd0:	e0bffe17 	ldw	r2,-8(fp)
 401edd4:	10002a26 	beq	r2,zero,401ee80 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 401edd8:	e03ffc15 	stw	zero,-16(fp)
 401eddc:	00001706 	br	401ee3c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 401ede0:	00a00034 	movhi	r2,32768
 401ede4:	10bfffc4 	addi	r2,r2,-1
 401ede8:	10bfffc4 	addi	r2,r2,-1
 401edec:	103ffe1e 	bne	r2,zero,401ede8 <__alt_mem_onchip_memory2_0+0xfc01db68>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 401edf0:	014003f4 	movhi	r5,15
 401edf4:	29509004 	addi	r5,r5,16960
 401edf8:	e13ffd17 	ldw	r4,-12(fp)
 401edfc:	400d2c40 	call	400d2c4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 401ee00:	100b883a 	mov	r5,r2
 401ee04:	0100bef4 	movhi	r4,763
 401ee08:	213c2004 	addi	r4,r4,-3968
 401ee0c:	400d2080 	call	400d208 <__udivsi3>
 401ee10:	100b883a 	mov	r5,r2
 401ee14:	01200034 	movhi	r4,32768
 401ee18:	213fffc4 	addi	r4,r4,-1
 401ee1c:	400d2080 	call	400d208 <__udivsi3>
 401ee20:	1007883a 	mov	r3,r2
 401ee24:	e0bfff17 	ldw	r2,-4(fp)
 401ee28:	10c5c83a 	sub	r2,r2,r3
 401ee2c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 401ee30:	e0bffc17 	ldw	r2,-16(fp)
 401ee34:	10800044 	addi	r2,r2,1
 401ee38:	e0bffc15 	stw	r2,-16(fp)
 401ee3c:	e0fffc17 	ldw	r3,-16(fp)
 401ee40:	e0bffe17 	ldw	r2,-8(fp)
 401ee44:	18bfe616 	blt	r3,r2,401ede0 <__alt_mem_onchip_memory2_0+0xfc01db60>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401ee48:	014003f4 	movhi	r5,15
 401ee4c:	29509004 	addi	r5,r5,16960
 401ee50:	e13ffd17 	ldw	r4,-12(fp)
 401ee54:	400d2c40 	call	400d2c4 <__mulsi3>
 401ee58:	100b883a 	mov	r5,r2
 401ee5c:	0100bef4 	movhi	r4,763
 401ee60:	213c2004 	addi	r4,r4,-3968
 401ee64:	400d2080 	call	400d208 <__udivsi3>
 401ee68:	e17fff17 	ldw	r5,-4(fp)
 401ee6c:	1009883a 	mov	r4,r2
 401ee70:	400d2c40 	call	400d2c4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401ee74:	10bfffc4 	addi	r2,r2,-1
 401ee78:	103ffe1e 	bne	r2,zero,401ee74 <__alt_mem_onchip_memory2_0+0xfc01dbf4>
 401ee7c:	00000d06 	br	401eeb4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401ee80:	014003f4 	movhi	r5,15
 401ee84:	29509004 	addi	r5,r5,16960
 401ee88:	e13ffd17 	ldw	r4,-12(fp)
 401ee8c:	400d2c40 	call	400d2c4 <__mulsi3>
 401ee90:	100b883a 	mov	r5,r2
 401ee94:	0100bef4 	movhi	r4,763
 401ee98:	213c2004 	addi	r4,r4,-3968
 401ee9c:	400d2080 	call	400d208 <__udivsi3>
 401eea0:	e17fff17 	ldw	r5,-4(fp)
 401eea4:	1009883a 	mov	r4,r2
 401eea8:	400d2c40 	call	400d2c4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401eeac:	10bfffc4 	addi	r2,r2,-1
 401eeb0:	00bffe16 	blt	zero,r2,401eeac <__alt_mem_onchip_memory2_0+0xfc01dc2c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 401eeb4:	0005883a 	mov	r2,zero
}
 401eeb8:	e037883a 	mov	sp,fp
 401eebc:	dfc00117 	ldw	ra,4(sp)
 401eec0:	df000017 	ldw	fp,0(sp)
 401eec4:	dec00204 	addi	sp,sp,8
 401eec8:	f800283a 	ret

0401eecc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401eecc:	deffff04 	addi	sp,sp,-4
 401eed0:	df000015 	stw	fp,0(sp)
 401eed4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 401eed8:	0001883a 	nop
 401eedc:	e037883a 	mov	sp,fp
 401eee0:	df000017 	ldw	fp,0(sp)
 401eee4:	dec00104 	addi	sp,sp,4
 401eee8:	f800283a 	ret

0401eeec <alt_get_errno>:
 401eeec:	defffe04 	addi	sp,sp,-8
 401eef0:	dfc00115 	stw	ra,4(sp)
 401eef4:	df000015 	stw	fp,0(sp)
 401eef8:	d839883a 	mov	fp,sp
 401eefc:	d0a5b717 	ldw	r2,-26916(gp)
 401ef00:	10000326 	beq	r2,zero,401ef10 <alt_get_errno+0x24>
 401ef04:	d0a5b717 	ldw	r2,-26916(gp)
 401ef08:	103ee83a 	callr	r2
 401ef0c:	00000106 	br	401ef14 <alt_get_errno+0x28>
 401ef10:	d0b23f04 	addi	r2,gp,-14084
 401ef14:	e037883a 	mov	sp,fp
 401ef18:	dfc00117 	ldw	ra,4(sp)
 401ef1c:	df000017 	ldw	fp,0(sp)
 401ef20:	dec00204 	addi	sp,sp,8
 401ef24:	f800283a 	ret

0401ef28 <alt_dev_llist_insert>:
 401ef28:	defffa04 	addi	sp,sp,-24
 401ef2c:	dfc00515 	stw	ra,20(sp)
 401ef30:	df000415 	stw	fp,16(sp)
 401ef34:	df000404 	addi	fp,sp,16
 401ef38:	e13ffe15 	stw	r4,-8(fp)
 401ef3c:	e17fff15 	stw	r5,-4(fp)
 401ef40:	e0bffe17 	ldw	r2,-8(fp)
 401ef44:	10000326 	beq	r2,zero,401ef54 <alt_dev_llist_insert+0x2c>
 401ef48:	e0bffe17 	ldw	r2,-8(fp)
 401ef4c:	10800217 	ldw	r2,8(r2)
 401ef50:	1000061e 	bne	r2,zero,401ef6c <alt_dev_llist_insert+0x44>
 401ef54:	401eeec0 	call	401eeec <alt_get_errno>
 401ef58:	1007883a 	mov	r3,r2
 401ef5c:	00800584 	movi	r2,22
 401ef60:	18800015 	stw	r2,0(r3)
 401ef64:	00bffa84 	movi	r2,-22
 401ef68:	00001306 	br	401efb8 <alt_dev_llist_insert+0x90>
 401ef6c:	e0bffe17 	ldw	r2,-8(fp)
 401ef70:	e0ffff17 	ldw	r3,-4(fp)
 401ef74:	e0fffc15 	stw	r3,-16(fp)
 401ef78:	e0bffd15 	stw	r2,-12(fp)
 401ef7c:	e0bffd17 	ldw	r2,-12(fp)
 401ef80:	e0fffc17 	ldw	r3,-16(fp)
 401ef84:	10c00115 	stw	r3,4(r2)
 401ef88:	e0bffc17 	ldw	r2,-16(fp)
 401ef8c:	10c00017 	ldw	r3,0(r2)
 401ef90:	e0bffd17 	ldw	r2,-12(fp)
 401ef94:	10c00015 	stw	r3,0(r2)
 401ef98:	e0bffc17 	ldw	r2,-16(fp)
 401ef9c:	10800017 	ldw	r2,0(r2)
 401efa0:	e0fffd17 	ldw	r3,-12(fp)
 401efa4:	10c00115 	stw	r3,4(r2)
 401efa8:	e0bffc17 	ldw	r2,-16(fp)
 401efac:	e0fffd17 	ldw	r3,-12(fp)
 401efb0:	10c00015 	stw	r3,0(r2)
 401efb4:	0005883a 	mov	r2,zero
 401efb8:	e037883a 	mov	sp,fp
 401efbc:	dfc00117 	ldw	ra,4(sp)
 401efc0:	df000017 	ldw	fp,0(sp)
 401efc4:	dec00204 	addi	sp,sp,8
 401efc8:	f800283a 	ret

0401efcc <_do_ctors>:
 401efcc:	defffd04 	addi	sp,sp,-12
 401efd0:	dfc00215 	stw	ra,8(sp)
 401efd4:	df000115 	stw	fp,4(sp)
 401efd8:	df000104 	addi	fp,sp,4
 401efdc:	008100b4 	movhi	r2,1026
 401efe0:	10807d04 	addi	r2,r2,500
 401efe4:	e0bfff15 	stw	r2,-4(fp)
 401efe8:	00000606 	br	401f004 <_do_ctors+0x38>
 401efec:	e0bfff17 	ldw	r2,-4(fp)
 401eff0:	10800017 	ldw	r2,0(r2)
 401eff4:	103ee83a 	callr	r2
 401eff8:	e0bfff17 	ldw	r2,-4(fp)
 401effc:	10bfff04 	addi	r2,r2,-4
 401f000:	e0bfff15 	stw	r2,-4(fp)
 401f004:	e0ffff17 	ldw	r3,-4(fp)
 401f008:	008100b4 	movhi	r2,1026
 401f00c:	10807c04 	addi	r2,r2,496
 401f010:	18bff62e 	bgeu	r3,r2,401efec <__alt_mem_onchip_memory2_0+0xfc01dd6c>
 401f014:	0001883a 	nop
 401f018:	e037883a 	mov	sp,fp
 401f01c:	dfc00117 	ldw	ra,4(sp)
 401f020:	df000017 	ldw	fp,0(sp)
 401f024:	dec00204 	addi	sp,sp,8
 401f028:	f800283a 	ret

0401f02c <_do_dtors>:
 401f02c:	defffd04 	addi	sp,sp,-12
 401f030:	dfc00215 	stw	ra,8(sp)
 401f034:	df000115 	stw	fp,4(sp)
 401f038:	df000104 	addi	fp,sp,4
 401f03c:	008100b4 	movhi	r2,1026
 401f040:	10807d04 	addi	r2,r2,500
 401f044:	e0bfff15 	stw	r2,-4(fp)
 401f048:	00000606 	br	401f064 <_do_dtors+0x38>
 401f04c:	e0bfff17 	ldw	r2,-4(fp)
 401f050:	10800017 	ldw	r2,0(r2)
 401f054:	103ee83a 	callr	r2
 401f058:	e0bfff17 	ldw	r2,-4(fp)
 401f05c:	10bfff04 	addi	r2,r2,-4
 401f060:	e0bfff15 	stw	r2,-4(fp)
 401f064:	e0ffff17 	ldw	r3,-4(fp)
 401f068:	008100b4 	movhi	r2,1026
 401f06c:	10807e04 	addi	r2,r2,504
 401f070:	18bff62e 	bgeu	r3,r2,401f04c <__alt_mem_onchip_memory2_0+0xfc01ddcc>
 401f074:	0001883a 	nop
 401f078:	e037883a 	mov	sp,fp
 401f07c:	dfc00117 	ldw	ra,4(sp)
 401f080:	df000017 	ldw	fp,0(sp)
 401f084:	dec00204 	addi	sp,sp,8
 401f088:	f800283a 	ret

0401f08c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401f08c:	defffa04 	addi	sp,sp,-24
 401f090:	dfc00515 	stw	ra,20(sp)
 401f094:	df000415 	stw	fp,16(sp)
 401f098:	df000404 	addi	fp,sp,16
 401f09c:	e13ffe15 	stw	r4,-8(fp)
 401f0a0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 401f0a4:	e0bfff17 	ldw	r2,-4(fp)
 401f0a8:	10800017 	ldw	r2,0(r2)
 401f0ac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 401f0b0:	e13ffe17 	ldw	r4,-8(fp)
 401f0b4:	400f43c0 	call	400f43c <strlen>
 401f0b8:	10800044 	addi	r2,r2,1
 401f0bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401f0c0:	00000d06 	br	401f0f8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 401f0c4:	e0bffc17 	ldw	r2,-16(fp)
 401f0c8:	10800217 	ldw	r2,8(r2)
 401f0cc:	e0fffd17 	ldw	r3,-12(fp)
 401f0d0:	180d883a 	mov	r6,r3
 401f0d4:	e17ffe17 	ldw	r5,-8(fp)
 401f0d8:	1009883a 	mov	r4,r2
 401f0dc:	401fea40 	call	401fea4 <memcmp>
 401f0e0:	1000021e 	bne	r2,zero,401f0ec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 401f0e4:	e0bffc17 	ldw	r2,-16(fp)
 401f0e8:	00000706 	br	401f108 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401f0ec:	e0bffc17 	ldw	r2,-16(fp)
 401f0f0:	10800017 	ldw	r2,0(r2)
 401f0f4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401f0f8:	e0fffc17 	ldw	r3,-16(fp)
 401f0fc:	e0bfff17 	ldw	r2,-4(fp)
 401f100:	18bff01e 	bne	r3,r2,401f0c4 <__alt_mem_onchip_memory2_0+0xfc01de44>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 401f104:	0005883a 	mov	r2,zero
}
 401f108:	e037883a 	mov	sp,fp
 401f10c:	dfc00117 	ldw	ra,4(sp)
 401f110:	df000017 	ldw	fp,0(sp)
 401f114:	dec00204 	addi	sp,sp,8
 401f118:	f800283a 	ret

0401f11c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 401f11c:	deffff04 	addi	sp,sp,-4
 401f120:	df000015 	stw	fp,0(sp)
 401f124:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 401f128:	0001883a 	nop
 401f12c:	e037883a 	mov	sp,fp
 401f130:	df000017 	ldw	fp,0(sp)
 401f134:	dec00104 	addi	sp,sp,4
 401f138:	f800283a 	ret

0401f13c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401f13c:	defff904 	addi	sp,sp,-28
 401f140:	dfc00615 	stw	ra,24(sp)
 401f144:	df000515 	stw	fp,20(sp)
 401f148:	df000504 	addi	fp,sp,20
 401f14c:	e13ffc15 	stw	r4,-16(fp)
 401f150:	e17ffd15 	stw	r5,-12(fp)
 401f154:	e1bffe15 	stw	r6,-8(fp)
 401f158:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 401f15c:	e0800217 	ldw	r2,8(fp)
 401f160:	d8800015 	stw	r2,0(sp)
 401f164:	e1ffff17 	ldw	r7,-4(fp)
 401f168:	e1bffe17 	ldw	r6,-8(fp)
 401f16c:	e17ffd17 	ldw	r5,-12(fp)
 401f170:	e13ffc17 	ldw	r4,-16(fp)
 401f174:	401f2ec0 	call	401f2ec <alt_iic_isr_register>
}  
 401f178:	e037883a 	mov	sp,fp
 401f17c:	dfc00117 	ldw	ra,4(sp)
 401f180:	df000017 	ldw	fp,0(sp)
 401f184:	dec00204 	addi	sp,sp,8
 401f188:	f800283a 	ret

0401f18c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 401f18c:	defff904 	addi	sp,sp,-28
 401f190:	df000615 	stw	fp,24(sp)
 401f194:	df000604 	addi	fp,sp,24
 401f198:	e13ffe15 	stw	r4,-8(fp)
 401f19c:	e17fff15 	stw	r5,-4(fp)
 401f1a0:	e0bfff17 	ldw	r2,-4(fp)
 401f1a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f1a8:	0005303a 	rdctl	r2,status
 401f1ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f1b0:	e0fffb17 	ldw	r3,-20(fp)
 401f1b4:	00bfff84 	movi	r2,-2
 401f1b8:	1884703a 	and	r2,r3,r2
 401f1bc:	1001703a 	wrctl	status,r2
  
  return context;
 401f1c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401f1c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 401f1c8:	00c00044 	movi	r3,1
 401f1cc:	e0bffa17 	ldw	r2,-24(fp)
 401f1d0:	1884983a 	sll	r2,r3,r2
 401f1d4:	1007883a 	mov	r3,r2
 401f1d8:	d0b24617 	ldw	r2,-14056(gp)
 401f1dc:	1884b03a 	or	r2,r3,r2
 401f1e0:	d0b24615 	stw	r2,-14056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401f1e4:	d0b24617 	ldw	r2,-14056(gp)
 401f1e8:	100170fa 	wrctl	ienable,r2
 401f1ec:	e0bffc17 	ldw	r2,-16(fp)
 401f1f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f1f4:	e0bffd17 	ldw	r2,-12(fp)
 401f1f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401f1fc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 401f200:	0001883a 	nop
}
 401f204:	e037883a 	mov	sp,fp
 401f208:	df000017 	ldw	fp,0(sp)
 401f20c:	dec00104 	addi	sp,sp,4
 401f210:	f800283a 	ret

0401f214 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 401f214:	defff904 	addi	sp,sp,-28
 401f218:	df000615 	stw	fp,24(sp)
 401f21c:	df000604 	addi	fp,sp,24
 401f220:	e13ffe15 	stw	r4,-8(fp)
 401f224:	e17fff15 	stw	r5,-4(fp)
 401f228:	e0bfff17 	ldw	r2,-4(fp)
 401f22c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f230:	0005303a 	rdctl	r2,status
 401f234:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f238:	e0fffb17 	ldw	r3,-20(fp)
 401f23c:	00bfff84 	movi	r2,-2
 401f240:	1884703a 	and	r2,r3,r2
 401f244:	1001703a 	wrctl	status,r2
  
  return context;
 401f248:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401f24c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 401f250:	00c00044 	movi	r3,1
 401f254:	e0bffa17 	ldw	r2,-24(fp)
 401f258:	1884983a 	sll	r2,r3,r2
 401f25c:	0084303a 	nor	r2,zero,r2
 401f260:	1007883a 	mov	r3,r2
 401f264:	d0b24617 	ldw	r2,-14056(gp)
 401f268:	1884703a 	and	r2,r3,r2
 401f26c:	d0b24615 	stw	r2,-14056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401f270:	d0b24617 	ldw	r2,-14056(gp)
 401f274:	100170fa 	wrctl	ienable,r2
 401f278:	e0bffc17 	ldw	r2,-16(fp)
 401f27c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f280:	e0bffd17 	ldw	r2,-12(fp)
 401f284:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401f288:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 401f28c:	0001883a 	nop
}
 401f290:	e037883a 	mov	sp,fp
 401f294:	df000017 	ldw	fp,0(sp)
 401f298:	dec00104 	addi	sp,sp,4
 401f29c:	f800283a 	ret

0401f2a0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401f2a0:	defffc04 	addi	sp,sp,-16
 401f2a4:	df000315 	stw	fp,12(sp)
 401f2a8:	df000304 	addi	fp,sp,12
 401f2ac:	e13ffe15 	stw	r4,-8(fp)
 401f2b0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 401f2b4:	000530fa 	rdctl	r2,ienable
 401f2b8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 401f2bc:	00c00044 	movi	r3,1
 401f2c0:	e0bfff17 	ldw	r2,-4(fp)
 401f2c4:	1884983a 	sll	r2,r3,r2
 401f2c8:	1007883a 	mov	r3,r2
 401f2cc:	e0bffd17 	ldw	r2,-12(fp)
 401f2d0:	1884703a 	and	r2,r3,r2
 401f2d4:	1004c03a 	cmpne	r2,r2,zero
 401f2d8:	10803fcc 	andi	r2,r2,255
}
 401f2dc:	e037883a 	mov	sp,fp
 401f2e0:	df000017 	ldw	fp,0(sp)
 401f2e4:	dec00104 	addi	sp,sp,4
 401f2e8:	f800283a 	ret

0401f2ec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401f2ec:	defff504 	addi	sp,sp,-44
 401f2f0:	dfc00a15 	stw	ra,40(sp)
 401f2f4:	df000915 	stw	fp,36(sp)
 401f2f8:	df000904 	addi	fp,sp,36
 401f2fc:	e13ffc15 	stw	r4,-16(fp)
 401f300:	e17ffd15 	stw	r5,-12(fp)
 401f304:	e1bffe15 	stw	r6,-8(fp)
 401f308:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 401f30c:	00bffa84 	movi	r2,-22
 401f310:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 401f314:	e0bffd17 	ldw	r2,-12(fp)
 401f318:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401f31c:	e0bff817 	ldw	r2,-32(fp)
 401f320:	10800808 	cmpgei	r2,r2,32
 401f324:	1000271e 	bne	r2,zero,401f3c4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f328:	0005303a 	rdctl	r2,status
 401f32c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f330:	e0fffb17 	ldw	r3,-20(fp)
 401f334:	00bfff84 	movi	r2,-2
 401f338:	1884703a 	and	r2,r3,r2
 401f33c:	1001703a 	wrctl	status,r2
  
  return context;
 401f340:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401f344:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 401f348:	008100f4 	movhi	r2,1027
 401f34c:	10b63f04 	addi	r2,r2,-9988
 401f350:	e0fff817 	ldw	r3,-32(fp)
 401f354:	180690fa 	slli	r3,r3,3
 401f358:	10c5883a 	add	r2,r2,r3
 401f35c:	e0fffe17 	ldw	r3,-8(fp)
 401f360:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 401f364:	008100f4 	movhi	r2,1027
 401f368:	10b63f04 	addi	r2,r2,-9988
 401f36c:	e0fff817 	ldw	r3,-32(fp)
 401f370:	180690fa 	slli	r3,r3,3
 401f374:	10c5883a 	add	r2,r2,r3
 401f378:	10800104 	addi	r2,r2,4
 401f37c:	e0ffff17 	ldw	r3,-4(fp)
 401f380:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401f384:	e0bffe17 	ldw	r2,-8(fp)
 401f388:	10000526 	beq	r2,zero,401f3a0 <alt_iic_isr_register+0xb4>
 401f38c:	e0bff817 	ldw	r2,-32(fp)
 401f390:	100b883a 	mov	r5,r2
 401f394:	e13ffc17 	ldw	r4,-16(fp)
 401f398:	401f18c0 	call	401f18c <alt_ic_irq_enable>
 401f39c:	00000406 	br	401f3b0 <alt_iic_isr_register+0xc4>
 401f3a0:	e0bff817 	ldw	r2,-32(fp)
 401f3a4:	100b883a 	mov	r5,r2
 401f3a8:	e13ffc17 	ldw	r4,-16(fp)
 401f3ac:	401f2140 	call	401f214 <alt_ic_irq_disable>
 401f3b0:	e0bff715 	stw	r2,-36(fp)
 401f3b4:	e0bffa17 	ldw	r2,-24(fp)
 401f3b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f3bc:	e0bff917 	ldw	r2,-28(fp)
 401f3c0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 401f3c4:	e0bff717 	ldw	r2,-36(fp)
}
 401f3c8:	e037883a 	mov	sp,fp
 401f3cc:	dfc00117 	ldw	ra,4(sp)
 401f3d0:	df000017 	ldw	fp,0(sp)
 401f3d4:	dec00204 	addi	sp,sp,8
 401f3d8:	f800283a 	ret

0401f3dc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401f3dc:	defff804 	addi	sp,sp,-32
 401f3e0:	dfc00715 	stw	ra,28(sp)
 401f3e4:	df000615 	stw	fp,24(sp)
 401f3e8:	dc000515 	stw	r16,20(sp)
 401f3ec:	df000604 	addi	fp,sp,24
 401f3f0:	e13ffb15 	stw	r4,-20(fp)
 401f3f4:	e17ffc15 	stw	r5,-16(fp)
 401f3f8:	e1bffd15 	stw	r6,-12(fp)
 401f3fc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 401f400:	e1bffe17 	ldw	r6,-8(fp)
 401f404:	e17ffd17 	ldw	r5,-12(fp)
 401f408:	e13ffc17 	ldw	r4,-16(fp)
 401f40c:	401f6640 	call	401f664 <open>
 401f410:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 401f414:	e0bffa17 	ldw	r2,-24(fp)
 401f418:	10002216 	blt	r2,zero,401f4a4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 401f41c:	040100b4 	movhi	r16,1026
 401f420:	841f2d04 	addi	r16,r16,31924
 401f424:	e0bffa17 	ldw	r2,-24(fp)
 401f428:	01400304 	movi	r5,12
 401f42c:	1009883a 	mov	r4,r2
 401f430:	400d2c40 	call	400d2c4 <__mulsi3>
 401f434:	8085883a 	add	r2,r16,r2
 401f438:	10c00017 	ldw	r3,0(r2)
 401f43c:	e0bffb17 	ldw	r2,-20(fp)
 401f440:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401f444:	040100b4 	movhi	r16,1026
 401f448:	841f2d04 	addi	r16,r16,31924
 401f44c:	e0bffa17 	ldw	r2,-24(fp)
 401f450:	01400304 	movi	r5,12
 401f454:	1009883a 	mov	r4,r2
 401f458:	400d2c40 	call	400d2c4 <__mulsi3>
 401f45c:	8085883a 	add	r2,r16,r2
 401f460:	10800104 	addi	r2,r2,4
 401f464:	10c00017 	ldw	r3,0(r2)
 401f468:	e0bffb17 	ldw	r2,-20(fp)
 401f46c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401f470:	040100b4 	movhi	r16,1026
 401f474:	841f2d04 	addi	r16,r16,31924
 401f478:	e0bffa17 	ldw	r2,-24(fp)
 401f47c:	01400304 	movi	r5,12
 401f480:	1009883a 	mov	r4,r2
 401f484:	400d2c40 	call	400d2c4 <__mulsi3>
 401f488:	8085883a 	add	r2,r16,r2
 401f48c:	10800204 	addi	r2,r2,8
 401f490:	10c00017 	ldw	r3,0(r2)
 401f494:	e0bffb17 	ldw	r2,-20(fp)
 401f498:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401f49c:	e13ffa17 	ldw	r4,-24(fp)
 401f4a0:	401bea40 	call	401bea4 <alt_release_fd>
  }
} 
 401f4a4:	0001883a 	nop
 401f4a8:	e6ffff04 	addi	sp,fp,-4
 401f4ac:	dfc00217 	ldw	ra,8(sp)
 401f4b0:	df000117 	ldw	fp,4(sp)
 401f4b4:	dc000017 	ldw	r16,0(sp)
 401f4b8:	dec00304 	addi	sp,sp,12
 401f4bc:	f800283a 	ret

0401f4c0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401f4c0:	defffb04 	addi	sp,sp,-20
 401f4c4:	dfc00415 	stw	ra,16(sp)
 401f4c8:	df000315 	stw	fp,12(sp)
 401f4cc:	df000304 	addi	fp,sp,12
 401f4d0:	e13ffd15 	stw	r4,-12(fp)
 401f4d4:	e17ffe15 	stw	r5,-8(fp)
 401f4d8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401f4dc:	01c07fc4 	movi	r7,511
 401f4e0:	01800044 	movi	r6,1
 401f4e4:	e17ffd17 	ldw	r5,-12(fp)
 401f4e8:	010100b4 	movhi	r4,1026
 401f4ec:	211f3004 	addi	r4,r4,31936
 401f4f0:	401f3dc0 	call	401f3dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 401f4f4:	01c07fc4 	movi	r7,511
 401f4f8:	000d883a 	mov	r6,zero
 401f4fc:	e17ffe17 	ldw	r5,-8(fp)
 401f500:	010100b4 	movhi	r4,1026
 401f504:	211f2d04 	addi	r4,r4,31924
 401f508:	401f3dc0 	call	401f3dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401f50c:	01c07fc4 	movi	r7,511
 401f510:	01800044 	movi	r6,1
 401f514:	e17fff17 	ldw	r5,-4(fp)
 401f518:	010100b4 	movhi	r4,1026
 401f51c:	211f3304 	addi	r4,r4,31948
 401f520:	401f3dc0 	call	401f3dc <alt_open_fd>
}  
 401f524:	0001883a 	nop
 401f528:	e037883a 	mov	sp,fp
 401f52c:	dfc00117 	ldw	ra,4(sp)
 401f530:	df000017 	ldw	fp,0(sp)
 401f534:	dec00204 	addi	sp,sp,8
 401f538:	f800283a 	ret

0401f53c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401f53c:	defffe04 	addi	sp,sp,-8
 401f540:	dfc00115 	stw	ra,4(sp)
 401f544:	df000015 	stw	fp,0(sp)
 401f548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401f54c:	d0a5b717 	ldw	r2,-26916(gp)
 401f550:	10000326 	beq	r2,zero,401f560 <alt_get_errno+0x24>
 401f554:	d0a5b717 	ldw	r2,-26916(gp)
 401f558:	103ee83a 	callr	r2
 401f55c:	00000106 	br	401f564 <alt_get_errno+0x28>
 401f560:	d0b23f04 	addi	r2,gp,-14084
}
 401f564:	e037883a 	mov	sp,fp
 401f568:	dfc00117 	ldw	ra,4(sp)
 401f56c:	df000017 	ldw	fp,0(sp)
 401f570:	dec00204 	addi	sp,sp,8
 401f574:	f800283a 	ret

0401f578 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 401f578:	defffb04 	addi	sp,sp,-20
 401f57c:	dfc00415 	stw	ra,16(sp)
 401f580:	df000315 	stw	fp,12(sp)
 401f584:	dc000215 	stw	r16,8(sp)
 401f588:	df000304 	addi	fp,sp,12
 401f58c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401f590:	e0bffe17 	ldw	r2,-8(fp)
 401f594:	10800217 	ldw	r2,8(r2)
 401f598:	10d00034 	orhi	r3,r2,16384
 401f59c:	e0bffe17 	ldw	r2,-8(fp)
 401f5a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401f5a4:	e03ffd15 	stw	zero,-12(fp)
 401f5a8:	00002306 	br	401f638 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401f5ac:	040100b4 	movhi	r16,1026
 401f5b0:	841f2d04 	addi	r16,r16,31924
 401f5b4:	e0bffd17 	ldw	r2,-12(fp)
 401f5b8:	01400304 	movi	r5,12
 401f5bc:	1009883a 	mov	r4,r2
 401f5c0:	400d2c40 	call	400d2c4 <__mulsi3>
 401f5c4:	8085883a 	add	r2,r16,r2
 401f5c8:	10c00017 	ldw	r3,0(r2)
 401f5cc:	e0bffe17 	ldw	r2,-8(fp)
 401f5d0:	10800017 	ldw	r2,0(r2)
 401f5d4:	1880151e 	bne	r3,r2,401f62c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401f5d8:	040100b4 	movhi	r16,1026
 401f5dc:	841f2d04 	addi	r16,r16,31924
 401f5e0:	e0bffd17 	ldw	r2,-12(fp)
 401f5e4:	01400304 	movi	r5,12
 401f5e8:	1009883a 	mov	r4,r2
 401f5ec:	400d2c40 	call	400d2c4 <__mulsi3>
 401f5f0:	8085883a 	add	r2,r16,r2
 401f5f4:	10800204 	addi	r2,r2,8
 401f5f8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401f5fc:	10000b0e 	bge	r2,zero,401f62c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 401f600:	01400304 	movi	r5,12
 401f604:	e13ffd17 	ldw	r4,-12(fp)
 401f608:	400d2c40 	call	400d2c4 <__mulsi3>
 401f60c:	1007883a 	mov	r3,r2
 401f610:	008100b4 	movhi	r2,1026
 401f614:	109f2d04 	addi	r2,r2,31924
 401f618:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401f61c:	e0bffe17 	ldw	r2,-8(fp)
 401f620:	18800226 	beq	r3,r2,401f62c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401f624:	00bffcc4 	movi	r2,-13
 401f628:	00000806 	br	401f64c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401f62c:	e0bffd17 	ldw	r2,-12(fp)
 401f630:	10800044 	addi	r2,r2,1
 401f634:	e0bffd15 	stw	r2,-12(fp)
 401f638:	d0a5b617 	ldw	r2,-26920(gp)
 401f63c:	1007883a 	mov	r3,r2
 401f640:	e0bffd17 	ldw	r2,-12(fp)
 401f644:	18bfd92e 	bgeu	r3,r2,401f5ac <__alt_mem_onchip_memory2_0+0xfc01e32c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 401f648:	0005883a 	mov	r2,zero
}
 401f64c:	e6ffff04 	addi	sp,fp,-4
 401f650:	dfc00217 	ldw	ra,8(sp)
 401f654:	df000117 	ldw	fp,4(sp)
 401f658:	dc000017 	ldw	r16,0(sp)
 401f65c:	dec00304 	addi	sp,sp,12
 401f660:	f800283a 	ret

0401f664 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401f664:	defff604 	addi	sp,sp,-40
 401f668:	dfc00915 	stw	ra,36(sp)
 401f66c:	df000815 	stw	fp,32(sp)
 401f670:	df000804 	addi	fp,sp,32
 401f674:	e13ffd15 	stw	r4,-12(fp)
 401f678:	e17ffe15 	stw	r5,-8(fp)
 401f67c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401f680:	00bfffc4 	movi	r2,-1
 401f684:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 401f688:	00bffb44 	movi	r2,-19
 401f68c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401f690:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401f694:	d165b404 	addi	r5,gp,-26928
 401f698:	e13ffd17 	ldw	r4,-12(fp)
 401f69c:	401f08c0 	call	401f08c <alt_find_dev>
 401f6a0:	e0bff815 	stw	r2,-32(fp)
 401f6a4:	e0bff817 	ldw	r2,-32(fp)
 401f6a8:	1000051e 	bne	r2,zero,401f6c0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401f6ac:	e13ffd17 	ldw	r4,-12(fp)
 401f6b0:	401fbf00 	call	401fbf0 <alt_find_file>
 401f6b4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 401f6b8:	00800044 	movi	r2,1
 401f6bc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401f6c0:	e0bff817 	ldw	r2,-32(fp)
 401f6c4:	10002b26 	beq	r2,zero,401f774 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401f6c8:	e13ff817 	ldw	r4,-32(fp)
 401f6cc:	401fcf80 	call	401fcf8 <alt_get_fd>
 401f6d0:	e0bff915 	stw	r2,-28(fp)
 401f6d4:	e0bff917 	ldw	r2,-28(fp)
 401f6d8:	1000030e 	bge	r2,zero,401f6e8 <open+0x84>
    {
      status = index;
 401f6dc:	e0bff917 	ldw	r2,-28(fp)
 401f6e0:	e0bffa15 	stw	r2,-24(fp)
 401f6e4:	00002506 	br	401f77c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 401f6e8:	01400304 	movi	r5,12
 401f6ec:	e13ff917 	ldw	r4,-28(fp)
 401f6f0:	400d2c40 	call	400d2c4 <__mulsi3>
 401f6f4:	1007883a 	mov	r3,r2
 401f6f8:	008100b4 	movhi	r2,1026
 401f6fc:	109f2d04 	addi	r2,r2,31924
 401f700:	1885883a 	add	r2,r3,r2
 401f704:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401f708:	e0fffe17 	ldw	r3,-8(fp)
 401f70c:	00900034 	movhi	r2,16384
 401f710:	10bfffc4 	addi	r2,r2,-1
 401f714:	1886703a 	and	r3,r3,r2
 401f718:	e0bffc17 	ldw	r2,-16(fp)
 401f71c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401f720:	e0bffb17 	ldw	r2,-20(fp)
 401f724:	1000051e 	bne	r2,zero,401f73c <open+0xd8>
 401f728:	e13ffc17 	ldw	r4,-16(fp)
 401f72c:	401f5780 	call	401f578 <alt_file_locked>
 401f730:	e0bffa15 	stw	r2,-24(fp)
 401f734:	e0bffa17 	ldw	r2,-24(fp)
 401f738:	10001016 	blt	r2,zero,401f77c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401f73c:	e0bff817 	ldw	r2,-32(fp)
 401f740:	10800317 	ldw	r2,12(r2)
 401f744:	10000826 	beq	r2,zero,401f768 <open+0x104>
 401f748:	e0bff817 	ldw	r2,-32(fp)
 401f74c:	10800317 	ldw	r2,12(r2)
 401f750:	e1ffff17 	ldw	r7,-4(fp)
 401f754:	e1bffe17 	ldw	r6,-8(fp)
 401f758:	e17ffd17 	ldw	r5,-12(fp)
 401f75c:	e13ffc17 	ldw	r4,-16(fp)
 401f760:	103ee83a 	callr	r2
 401f764:	00000106 	br	401f76c <open+0x108>
 401f768:	0005883a 	mov	r2,zero
 401f76c:	e0bffa15 	stw	r2,-24(fp)
 401f770:	00000206 	br	401f77c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401f774:	00bffb44 	movi	r2,-19
 401f778:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401f77c:	e0bffa17 	ldw	r2,-24(fp)
 401f780:	1000090e 	bge	r2,zero,401f7a8 <open+0x144>
  {
    alt_release_fd (index);  
 401f784:	e13ff917 	ldw	r4,-28(fp)
 401f788:	401bea40 	call	401bea4 <alt_release_fd>
    ALT_ERRNO = -status;
 401f78c:	401f53c0 	call	401f53c <alt_get_errno>
 401f790:	1007883a 	mov	r3,r2
 401f794:	e0bffa17 	ldw	r2,-24(fp)
 401f798:	0085c83a 	sub	r2,zero,r2
 401f79c:	18800015 	stw	r2,0(r3)
    return -1;
 401f7a0:	00bfffc4 	movi	r2,-1
 401f7a4:	00000106 	br	401f7ac <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 401f7a8:	e0bff917 	ldw	r2,-28(fp)
}
 401f7ac:	e037883a 	mov	sp,fp
 401f7b0:	dfc00117 	ldw	ra,4(sp)
 401f7b4:	df000017 	ldw	fp,0(sp)
 401f7b8:	dec00204 	addi	sp,sp,8
 401f7bc:	f800283a 	ret

0401f7c0 <alt_printf>:
 401f7c0:	defff204 	addi	sp,sp,-56
 401f7c4:	dfc00a15 	stw	ra,40(sp)
 401f7c8:	df000915 	stw	fp,36(sp)
 401f7cc:	df000904 	addi	fp,sp,36
 401f7d0:	e13fff15 	stw	r4,-4(fp)
 401f7d4:	e1400215 	stw	r5,8(fp)
 401f7d8:	e1800315 	stw	r6,12(fp)
 401f7dc:	e1c00415 	stw	r7,16(fp)
 401f7e0:	e0800204 	addi	r2,fp,8
 401f7e4:	e0bffe15 	stw	r2,-8(fp)
 401f7e8:	e0bfff17 	ldw	r2,-4(fp)
 401f7ec:	e0bff715 	stw	r2,-36(fp)
 401f7f0:	00006f06 	br	401f9b0 <alt_printf+0x1f0>
 401f7f4:	e0bff807 	ldb	r2,-32(fp)
 401f7f8:	10800960 	cmpeqi	r2,r2,37
 401f7fc:	1000041e 	bne	r2,zero,401f810 <alt_printf+0x50>
 401f800:	e0bff807 	ldb	r2,-32(fp)
 401f804:	1009883a 	mov	r4,r2
 401f808:	401f9ec0 	call	401f9ec <alt_putchar>
 401f80c:	00006806 	br	401f9b0 <alt_printf+0x1f0>
 401f810:	e0bff717 	ldw	r2,-36(fp)
 401f814:	10c00044 	addi	r3,r2,1
 401f818:	e0fff715 	stw	r3,-36(fp)
 401f81c:	10800003 	ldbu	r2,0(r2)
 401f820:	e0bff805 	stb	r2,-32(fp)
 401f824:	e0bff807 	ldb	r2,-32(fp)
 401f828:	10006926 	beq	r2,zero,401f9d0 <alt_printf+0x210>
 401f82c:	e0bff807 	ldb	r2,-32(fp)
 401f830:	10800958 	cmpnei	r2,r2,37
 401f834:	1000041e 	bne	r2,zero,401f848 <alt_printf+0x88>
 401f838:	e0bff807 	ldb	r2,-32(fp)
 401f83c:	1009883a 	mov	r4,r2
 401f840:	401f9ec0 	call	401f9ec <alt_putchar>
 401f844:	00005a06 	br	401f9b0 <alt_printf+0x1f0>
 401f848:	e0bff807 	ldb	r2,-32(fp)
 401f84c:	108018d8 	cmpnei	r2,r2,99
 401f850:	1000081e 	bne	r2,zero,401f874 <alt_printf+0xb4>
 401f854:	e0bffe17 	ldw	r2,-8(fp)
 401f858:	10c00104 	addi	r3,r2,4
 401f85c:	e0fffe15 	stw	r3,-8(fp)
 401f860:	10800017 	ldw	r2,0(r2)
 401f864:	e0bffd15 	stw	r2,-12(fp)
 401f868:	e13ffd17 	ldw	r4,-12(fp)
 401f86c:	401f9ec0 	call	401f9ec <alt_putchar>
 401f870:	00004f06 	br	401f9b0 <alt_printf+0x1f0>
 401f874:	e0bff807 	ldb	r2,-32(fp)
 401f878:	10801e18 	cmpnei	r2,r2,120
 401f87c:	1000341e 	bne	r2,zero,401f950 <alt_printf+0x190>
 401f880:	e0bffe17 	ldw	r2,-8(fp)
 401f884:	10c00104 	addi	r3,r2,4
 401f888:	e0fffe15 	stw	r3,-8(fp)
 401f88c:	10800017 	ldw	r2,0(r2)
 401f890:	e0bffb15 	stw	r2,-20(fp)
 401f894:	e0bffb17 	ldw	r2,-20(fp)
 401f898:	1000031e 	bne	r2,zero,401f8a8 <alt_printf+0xe8>
 401f89c:	01000c04 	movi	r4,48
 401f8a0:	401f9ec0 	call	401f9ec <alt_putchar>
 401f8a4:	00004206 	br	401f9b0 <alt_printf+0x1f0>
 401f8a8:	00800704 	movi	r2,28
 401f8ac:	e0bff915 	stw	r2,-28(fp)
 401f8b0:	00000306 	br	401f8c0 <alt_printf+0x100>
 401f8b4:	e0bff917 	ldw	r2,-28(fp)
 401f8b8:	10bfff04 	addi	r2,r2,-4
 401f8bc:	e0bff915 	stw	r2,-28(fp)
 401f8c0:	00c003c4 	movi	r3,15
 401f8c4:	e0bff917 	ldw	r2,-28(fp)
 401f8c8:	1884983a 	sll	r2,r3,r2
 401f8cc:	1007883a 	mov	r3,r2
 401f8d0:	e0bffb17 	ldw	r2,-20(fp)
 401f8d4:	1884703a 	and	r2,r3,r2
 401f8d8:	103ff626 	beq	r2,zero,401f8b4 <__alt_mem_onchip_memory2_0+0xfc01e634>
 401f8dc:	00001906 	br	401f944 <alt_printf+0x184>
 401f8e0:	00c003c4 	movi	r3,15
 401f8e4:	e0bff917 	ldw	r2,-28(fp)
 401f8e8:	1884983a 	sll	r2,r3,r2
 401f8ec:	1007883a 	mov	r3,r2
 401f8f0:	e0bffb17 	ldw	r2,-20(fp)
 401f8f4:	1886703a 	and	r3,r3,r2
 401f8f8:	e0bff917 	ldw	r2,-28(fp)
 401f8fc:	1884d83a 	srl	r2,r3,r2
 401f900:	e0bffc15 	stw	r2,-16(fp)
 401f904:	e0bffc17 	ldw	r2,-16(fp)
 401f908:	108002a8 	cmpgeui	r2,r2,10
 401f90c:	1000041e 	bne	r2,zero,401f920 <alt_printf+0x160>
 401f910:	e0bffc17 	ldw	r2,-16(fp)
 401f914:	10800c04 	addi	r2,r2,48
 401f918:	e0bff805 	stb	r2,-32(fp)
 401f91c:	00000306 	br	401f92c <alt_printf+0x16c>
 401f920:	e0bffc17 	ldw	r2,-16(fp)
 401f924:	108015c4 	addi	r2,r2,87
 401f928:	e0bff805 	stb	r2,-32(fp)
 401f92c:	e0bff807 	ldb	r2,-32(fp)
 401f930:	1009883a 	mov	r4,r2
 401f934:	401f9ec0 	call	401f9ec <alt_putchar>
 401f938:	e0bff917 	ldw	r2,-28(fp)
 401f93c:	10bfff04 	addi	r2,r2,-4
 401f940:	e0bff915 	stw	r2,-28(fp)
 401f944:	e0bff917 	ldw	r2,-28(fp)
 401f948:	103fe50e 	bge	r2,zero,401f8e0 <__alt_mem_onchip_memory2_0+0xfc01e660>
 401f94c:	00001806 	br	401f9b0 <alt_printf+0x1f0>
 401f950:	e0bff807 	ldb	r2,-32(fp)
 401f954:	10801cd8 	cmpnei	r2,r2,115
 401f958:	1000151e 	bne	r2,zero,401f9b0 <alt_printf+0x1f0>
 401f95c:	e0bffe17 	ldw	r2,-8(fp)
 401f960:	10c00104 	addi	r3,r2,4
 401f964:	e0fffe15 	stw	r3,-8(fp)
 401f968:	10800017 	ldw	r2,0(r2)
 401f96c:	e0bffa15 	stw	r2,-24(fp)
 401f970:	00000906 	br	401f998 <alt_printf+0x1d8>
 401f974:	e0bffa17 	ldw	r2,-24(fp)
 401f978:	10c00044 	addi	r3,r2,1
 401f97c:	e0fffa15 	stw	r3,-24(fp)
 401f980:	10800003 	ldbu	r2,0(r2)
 401f984:	10803fcc 	andi	r2,r2,255
 401f988:	1080201c 	xori	r2,r2,128
 401f98c:	10bfe004 	addi	r2,r2,-128
 401f990:	1009883a 	mov	r4,r2
 401f994:	401f9ec0 	call	401f9ec <alt_putchar>
 401f998:	e0bffa17 	ldw	r2,-24(fp)
 401f99c:	10800003 	ldbu	r2,0(r2)
 401f9a0:	10803fcc 	andi	r2,r2,255
 401f9a4:	1080201c 	xori	r2,r2,128
 401f9a8:	10bfe004 	addi	r2,r2,-128
 401f9ac:	103ff11e 	bne	r2,zero,401f974 <__alt_mem_onchip_memory2_0+0xfc01e6f4>
 401f9b0:	e0bff717 	ldw	r2,-36(fp)
 401f9b4:	10c00044 	addi	r3,r2,1
 401f9b8:	e0fff715 	stw	r3,-36(fp)
 401f9bc:	10800003 	ldbu	r2,0(r2)
 401f9c0:	e0bff805 	stb	r2,-32(fp)
 401f9c4:	e0bff807 	ldb	r2,-32(fp)
 401f9c8:	103f8a1e 	bne	r2,zero,401f7f4 <__alt_mem_onchip_memory2_0+0xfc01e574>
 401f9cc:	00000106 	br	401f9d4 <alt_printf+0x214>
 401f9d0:	0001883a 	nop
 401f9d4:	0001883a 	nop
 401f9d8:	e037883a 	mov	sp,fp
 401f9dc:	dfc00117 	ldw	ra,4(sp)
 401f9e0:	df000017 	ldw	fp,0(sp)
 401f9e4:	dec00504 	addi	sp,sp,20
 401f9e8:	f800283a 	ret

0401f9ec <alt_putchar>:
 401f9ec:	defffd04 	addi	sp,sp,-12
 401f9f0:	dfc00215 	stw	ra,8(sp)
 401f9f4:	df000115 	stw	fp,4(sp)
 401f9f8:	df000104 	addi	fp,sp,4
 401f9fc:	e13fff15 	stw	r4,-4(fp)
 401fa00:	d0a5ad17 	ldw	r2,-26956(gp)
 401fa04:	10800217 	ldw	r2,8(r2)
 401fa08:	100b883a 	mov	r5,r2
 401fa0c:	e13fff17 	ldw	r4,-4(fp)
 401fa10:	40159a00 	call	40159a0 <putc>
 401fa14:	e037883a 	mov	sp,fp
 401fa18:	dfc00117 	ldw	ra,4(sp)
 401fa1c:	df000017 	ldw	fp,0(sp)
 401fa20:	dec00204 	addi	sp,sp,8
 401fa24:	f800283a 	ret

0401fa28 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 401fa28:	defffa04 	addi	sp,sp,-24
 401fa2c:	df000515 	stw	fp,20(sp)
 401fa30:	df000504 	addi	fp,sp,20
 401fa34:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401fa38:	0005303a 	rdctl	r2,status
 401fa3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401fa40:	e0fffc17 	ldw	r3,-16(fp)
 401fa44:	00bfff84 	movi	r2,-2
 401fa48:	1884703a 	and	r2,r3,r2
 401fa4c:	1001703a 	wrctl	status,r2
  
  return context;
 401fa50:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 401fa54:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 401fa58:	e0bfff17 	ldw	r2,-4(fp)
 401fa5c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401fa60:	e0bffd17 	ldw	r2,-12(fp)
 401fa64:	10800017 	ldw	r2,0(r2)
 401fa68:	e0fffd17 	ldw	r3,-12(fp)
 401fa6c:	18c00117 	ldw	r3,4(r3)
 401fa70:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 401fa74:	e0bffd17 	ldw	r2,-12(fp)
 401fa78:	10800117 	ldw	r2,4(r2)
 401fa7c:	e0fffd17 	ldw	r3,-12(fp)
 401fa80:	18c00017 	ldw	r3,0(r3)
 401fa84:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 401fa88:	e0bffd17 	ldw	r2,-12(fp)
 401fa8c:	e0fffd17 	ldw	r3,-12(fp)
 401fa90:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 401fa94:	e0bffd17 	ldw	r2,-12(fp)
 401fa98:	e0fffd17 	ldw	r3,-12(fp)
 401fa9c:	10c00015 	stw	r3,0(r2)
 401faa0:	e0bffb17 	ldw	r2,-20(fp)
 401faa4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401faa8:	e0bffe17 	ldw	r2,-8(fp)
 401faac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 401fab0:	0001883a 	nop
 401fab4:	e037883a 	mov	sp,fp
 401fab8:	df000017 	ldw	fp,0(sp)
 401fabc:	dec00104 	addi	sp,sp,4
 401fac0:	f800283a 	ret

0401fac4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 401fac4:	defffb04 	addi	sp,sp,-20
 401fac8:	dfc00415 	stw	ra,16(sp)
 401facc:	df000315 	stw	fp,12(sp)
 401fad0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 401fad4:	d0a5bc17 	ldw	r2,-26896(gp)
 401fad8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 401fadc:	d0b24817 	ldw	r2,-14048(gp)
 401fae0:	10800044 	addi	r2,r2,1
 401fae4:	d0b24815 	stw	r2,-14048(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401fae8:	00002e06 	br	401fba4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 401faec:	e0bffd17 	ldw	r2,-12(fp)
 401faf0:	10800017 	ldw	r2,0(r2)
 401faf4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401faf8:	e0bffd17 	ldw	r2,-12(fp)
 401fafc:	10800403 	ldbu	r2,16(r2)
 401fb00:	10803fcc 	andi	r2,r2,255
 401fb04:	10000426 	beq	r2,zero,401fb18 <alt_tick+0x54>
 401fb08:	d0b24817 	ldw	r2,-14048(gp)
 401fb0c:	1000021e 	bne	r2,zero,401fb18 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 401fb10:	e0bffd17 	ldw	r2,-12(fp)
 401fb14:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401fb18:	e0bffd17 	ldw	r2,-12(fp)
 401fb1c:	10800217 	ldw	r2,8(r2)
 401fb20:	d0f24817 	ldw	r3,-14048(gp)
 401fb24:	18801d36 	bltu	r3,r2,401fb9c <alt_tick+0xd8>
 401fb28:	e0bffd17 	ldw	r2,-12(fp)
 401fb2c:	10800403 	ldbu	r2,16(r2)
 401fb30:	10803fcc 	andi	r2,r2,255
 401fb34:	1000191e 	bne	r2,zero,401fb9c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 401fb38:	e0bffd17 	ldw	r2,-12(fp)
 401fb3c:	10800317 	ldw	r2,12(r2)
 401fb40:	e0fffd17 	ldw	r3,-12(fp)
 401fb44:	18c00517 	ldw	r3,20(r3)
 401fb48:	1809883a 	mov	r4,r3
 401fb4c:	103ee83a 	callr	r2
 401fb50:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 401fb54:	e0bfff17 	ldw	r2,-4(fp)
 401fb58:	1000031e 	bne	r2,zero,401fb68 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 401fb5c:	e13ffd17 	ldw	r4,-12(fp)
 401fb60:	401fa280 	call	401fa28 <alt_alarm_stop>
 401fb64:	00000d06 	br	401fb9c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 401fb68:	e0bffd17 	ldw	r2,-12(fp)
 401fb6c:	10c00217 	ldw	r3,8(r2)
 401fb70:	e0bfff17 	ldw	r2,-4(fp)
 401fb74:	1887883a 	add	r3,r3,r2
 401fb78:	e0bffd17 	ldw	r2,-12(fp)
 401fb7c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 401fb80:	e0bffd17 	ldw	r2,-12(fp)
 401fb84:	10c00217 	ldw	r3,8(r2)
 401fb88:	d0b24817 	ldw	r2,-14048(gp)
 401fb8c:	1880032e 	bgeu	r3,r2,401fb9c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 401fb90:	e0bffd17 	ldw	r2,-12(fp)
 401fb94:	00c00044 	movi	r3,1
 401fb98:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 401fb9c:	e0bffe17 	ldw	r2,-8(fp)
 401fba0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401fba4:	e0fffd17 	ldw	r3,-12(fp)
 401fba8:	d0a5bc04 	addi	r2,gp,-26896
 401fbac:	18bfcf1e 	bne	r3,r2,401faec <__alt_mem_onchip_memory2_0+0xfc01e86c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 401fbb0:	0001883a 	nop
}
 401fbb4:	0001883a 	nop
 401fbb8:	e037883a 	mov	sp,fp
 401fbbc:	dfc00117 	ldw	ra,4(sp)
 401fbc0:	df000017 	ldw	fp,0(sp)
 401fbc4:	dec00204 	addi	sp,sp,8
 401fbc8:	f800283a 	ret

0401fbcc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 401fbcc:	deffff04 	addi	sp,sp,-4
 401fbd0:	df000015 	stw	fp,0(sp)
 401fbd4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 401fbd8:	000170fa 	wrctl	ienable,zero
}
 401fbdc:	0001883a 	nop
 401fbe0:	e037883a 	mov	sp,fp
 401fbe4:	df000017 	ldw	fp,0(sp)
 401fbe8:	dec00104 	addi	sp,sp,4
 401fbec:	f800283a 	ret

0401fbf0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401fbf0:	defffb04 	addi	sp,sp,-20
 401fbf4:	dfc00415 	stw	ra,16(sp)
 401fbf8:	df000315 	stw	fp,12(sp)
 401fbfc:	df000304 	addi	fp,sp,12
 401fc00:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 401fc04:	d0a5b217 	ldw	r2,-26936(gp)
 401fc08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401fc0c:	00003106 	br	401fcd4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 401fc10:	e0bffd17 	ldw	r2,-12(fp)
 401fc14:	10800217 	ldw	r2,8(r2)
 401fc18:	1009883a 	mov	r4,r2
 401fc1c:	400f43c0 	call	400f43c <strlen>
 401fc20:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 401fc24:	e0bffd17 	ldw	r2,-12(fp)
 401fc28:	10c00217 	ldw	r3,8(r2)
 401fc2c:	e0bffe17 	ldw	r2,-8(fp)
 401fc30:	10bfffc4 	addi	r2,r2,-1
 401fc34:	1885883a 	add	r2,r3,r2
 401fc38:	10800003 	ldbu	r2,0(r2)
 401fc3c:	10803fcc 	andi	r2,r2,255
 401fc40:	1080201c 	xori	r2,r2,128
 401fc44:	10bfe004 	addi	r2,r2,-128
 401fc48:	10800bd8 	cmpnei	r2,r2,47
 401fc4c:	1000031e 	bne	r2,zero,401fc5c <alt_find_file+0x6c>
    {
      len -= 1;
 401fc50:	e0bffe17 	ldw	r2,-8(fp)
 401fc54:	10bfffc4 	addi	r2,r2,-1
 401fc58:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401fc5c:	e0bffe17 	ldw	r2,-8(fp)
 401fc60:	e0ffff17 	ldw	r3,-4(fp)
 401fc64:	1885883a 	add	r2,r3,r2
 401fc68:	10800003 	ldbu	r2,0(r2)
 401fc6c:	10803fcc 	andi	r2,r2,255
 401fc70:	1080201c 	xori	r2,r2,128
 401fc74:	10bfe004 	addi	r2,r2,-128
 401fc78:	10800be0 	cmpeqi	r2,r2,47
 401fc7c:	1000081e 	bne	r2,zero,401fca0 <alt_find_file+0xb0>
 401fc80:	e0bffe17 	ldw	r2,-8(fp)
 401fc84:	e0ffff17 	ldw	r3,-4(fp)
 401fc88:	1885883a 	add	r2,r3,r2
 401fc8c:	10800003 	ldbu	r2,0(r2)
 401fc90:	10803fcc 	andi	r2,r2,255
 401fc94:	1080201c 	xori	r2,r2,128
 401fc98:	10bfe004 	addi	r2,r2,-128
 401fc9c:	10000a1e 	bne	r2,zero,401fcc8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401fca0:	e0bffd17 	ldw	r2,-12(fp)
 401fca4:	10800217 	ldw	r2,8(r2)
 401fca8:	e0fffe17 	ldw	r3,-8(fp)
 401fcac:	180d883a 	mov	r6,r3
 401fcb0:	e17fff17 	ldw	r5,-4(fp)
 401fcb4:	1009883a 	mov	r4,r2
 401fcb8:	401fea40 	call	401fea4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401fcbc:	1000021e 	bne	r2,zero,401fcc8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401fcc0:	e0bffd17 	ldw	r2,-12(fp)
 401fcc4:	00000706 	br	401fce4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 401fcc8:	e0bffd17 	ldw	r2,-12(fp)
 401fccc:	10800017 	ldw	r2,0(r2)
 401fcd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401fcd4:	e0fffd17 	ldw	r3,-12(fp)
 401fcd8:	d0a5b204 	addi	r2,gp,-26936
 401fcdc:	18bfcc1e 	bne	r3,r2,401fc10 <__alt_mem_onchip_memory2_0+0xfc01e990>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401fce0:	0005883a 	mov	r2,zero
}
 401fce4:	e037883a 	mov	sp,fp
 401fce8:	dfc00117 	ldw	ra,4(sp)
 401fcec:	df000017 	ldw	fp,0(sp)
 401fcf0:	dec00204 	addi	sp,sp,8
 401fcf4:	f800283a 	ret

0401fcf8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 401fcf8:	defffa04 	addi	sp,sp,-24
 401fcfc:	dfc00515 	stw	ra,20(sp)
 401fd00:	df000415 	stw	fp,16(sp)
 401fd04:	dc000315 	stw	r16,12(sp)
 401fd08:	df000404 	addi	fp,sp,16
 401fd0c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 401fd10:	00bffa04 	movi	r2,-24
 401fd14:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401fd18:	e03ffc15 	stw	zero,-16(fp)
 401fd1c:	00001d06 	br	401fd94 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 401fd20:	040100b4 	movhi	r16,1026
 401fd24:	841f2d04 	addi	r16,r16,31924
 401fd28:	e0bffc17 	ldw	r2,-16(fp)
 401fd2c:	01400304 	movi	r5,12
 401fd30:	1009883a 	mov	r4,r2
 401fd34:	400d2c40 	call	400d2c4 <__mulsi3>
 401fd38:	8085883a 	add	r2,r16,r2
 401fd3c:	10800017 	ldw	r2,0(r2)
 401fd40:	1000111e 	bne	r2,zero,401fd88 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 401fd44:	040100b4 	movhi	r16,1026
 401fd48:	841f2d04 	addi	r16,r16,31924
 401fd4c:	e0bffc17 	ldw	r2,-16(fp)
 401fd50:	01400304 	movi	r5,12
 401fd54:	1009883a 	mov	r4,r2
 401fd58:	400d2c40 	call	400d2c4 <__mulsi3>
 401fd5c:	8085883a 	add	r2,r16,r2
 401fd60:	e0fffe17 	ldw	r3,-8(fp)
 401fd64:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 401fd68:	d0e5b617 	ldw	r3,-26920(gp)
 401fd6c:	e0bffc17 	ldw	r2,-16(fp)
 401fd70:	1880020e 	bge	r3,r2,401fd7c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 401fd74:	e0bffc17 	ldw	r2,-16(fp)
 401fd78:	d0a5b615 	stw	r2,-26920(gp)
      }
      rc = i;
 401fd7c:	e0bffc17 	ldw	r2,-16(fp)
 401fd80:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 401fd84:	00000606 	br	401fda0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401fd88:	e0bffc17 	ldw	r2,-16(fp)
 401fd8c:	10800044 	addi	r2,r2,1
 401fd90:	e0bffc15 	stw	r2,-16(fp)
 401fd94:	e0bffc17 	ldw	r2,-16(fp)
 401fd98:	10800810 	cmplti	r2,r2,32
 401fd9c:	103fe01e 	bne	r2,zero,401fd20 <__alt_mem_onchip_memory2_0+0xfc01eaa0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 401fda0:	e0bffd17 	ldw	r2,-12(fp)
}
 401fda4:	e6ffff04 	addi	sp,fp,-4
 401fda8:	dfc00217 	ldw	ra,8(sp)
 401fdac:	df000117 	ldw	fp,4(sp)
 401fdb0:	dc000017 	ldw	r16,0(sp)
 401fdb4:	dec00304 	addi	sp,sp,12
 401fdb8:	f800283a 	ret

0401fdbc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 401fdbc:	defffe04 	addi	sp,sp,-8
 401fdc0:	df000115 	stw	fp,4(sp)
 401fdc4:	df000104 	addi	fp,sp,4
 401fdc8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 401fdcc:	e0bfff17 	ldw	r2,-4(fp)
 401fdd0:	10bffe84 	addi	r2,r2,-6
 401fdd4:	10c00428 	cmpgeui	r3,r2,16
 401fdd8:	18001a1e 	bne	r3,zero,401fe44 <alt_exception_cause_generated_bad_addr+0x88>
 401fddc:	100690ba 	slli	r3,r2,2
 401fde0:	008100b4 	movhi	r2,1026
 401fde4:	10bf7d04 	addi	r2,r2,-524
 401fde8:	1885883a 	add	r2,r3,r2
 401fdec:	10800017 	ldw	r2,0(r2)
 401fdf0:	1000683a 	jmp	r2
 401fdf4:	0401fe34 	movhi	r16,2040
 401fdf8:	0401fe34 	movhi	r16,2040
 401fdfc:	0401fe44 	movi	r16,2041
 401fe00:	0401fe44 	movi	r16,2041
 401fe04:	0401fe44 	movi	r16,2041
 401fe08:	0401fe34 	movhi	r16,2040
 401fe0c:	0401fe3c 	xorhi	r16,zero,2040
 401fe10:	0401fe44 	movi	r16,2041
 401fe14:	0401fe34 	movhi	r16,2040
 401fe18:	0401fe34 	movhi	r16,2040
 401fe1c:	0401fe44 	movi	r16,2041
 401fe20:	0401fe34 	movhi	r16,2040
 401fe24:	0401fe3c 	xorhi	r16,zero,2040
 401fe28:	0401fe44 	movi	r16,2041
 401fe2c:	0401fe44 	movi	r16,2041
 401fe30:	0401fe34 	movhi	r16,2040
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 401fe34:	00800044 	movi	r2,1
 401fe38:	00000306 	br	401fe48 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 401fe3c:	0005883a 	mov	r2,zero
 401fe40:	00000106 	br	401fe48 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 401fe44:	0005883a 	mov	r2,zero
  }
}
 401fe48:	e037883a 	mov	sp,fp
 401fe4c:	df000017 	ldw	fp,0(sp)
 401fe50:	dec00104 	addi	sp,sp,4
 401fe54:	f800283a 	ret

0401fe58 <atexit>:
 401fe58:	200b883a 	mov	r5,r4
 401fe5c:	000f883a 	mov	r7,zero
 401fe60:	000d883a 	mov	r6,zero
 401fe64:	0009883a 	mov	r4,zero
 401fe68:	401ff201 	jmpi	401ff20 <__register_exitproc>

0401fe6c <exit>:
 401fe6c:	defffe04 	addi	sp,sp,-8
 401fe70:	000b883a 	mov	r5,zero
 401fe74:	dc000015 	stw	r16,0(sp)
 401fe78:	dfc00115 	stw	ra,4(sp)
 401fe7c:	2021883a 	mov	r16,r4
 401fe80:	40200380 	call	4020038 <__call_exitprocs>
 401fe84:	008100f4 	movhi	r2,1027
 401fe88:	10a95f04 	addi	r2,r2,-23172
 401fe8c:	11000017 	ldw	r4,0(r2)
 401fe90:	20800f17 	ldw	r2,60(r4)
 401fe94:	10000126 	beq	r2,zero,401fe9c <exit+0x30>
 401fe98:	103ee83a 	callr	r2
 401fe9c:	8009883a 	mov	r4,r16
 401fea0:	401b7000 	call	401b700 <_exit>

0401fea4 <memcmp>:
 401fea4:	01c000c4 	movi	r7,3
 401fea8:	3980192e 	bgeu	r7,r6,401ff10 <memcmp+0x6c>
 401feac:	2144b03a 	or	r2,r4,r5
 401feb0:	11c4703a 	and	r2,r2,r7
 401feb4:	10000f26 	beq	r2,zero,401fef4 <memcmp+0x50>
 401feb8:	20800003 	ldbu	r2,0(r4)
 401febc:	28c00003 	ldbu	r3,0(r5)
 401fec0:	10c0151e 	bne	r2,r3,401ff18 <memcmp+0x74>
 401fec4:	31bfff84 	addi	r6,r6,-2
 401fec8:	01ffffc4 	movi	r7,-1
 401fecc:	00000406 	br	401fee0 <memcmp+0x3c>
 401fed0:	20800003 	ldbu	r2,0(r4)
 401fed4:	28c00003 	ldbu	r3,0(r5)
 401fed8:	31bfffc4 	addi	r6,r6,-1
 401fedc:	10c00e1e 	bne	r2,r3,401ff18 <memcmp+0x74>
 401fee0:	21000044 	addi	r4,r4,1
 401fee4:	29400044 	addi	r5,r5,1
 401fee8:	31fff91e 	bne	r6,r7,401fed0 <__alt_mem_onchip_memory2_0+0xfc01ec50>
 401feec:	0005883a 	mov	r2,zero
 401fef0:	f800283a 	ret
 401fef4:	20c00017 	ldw	r3,0(r4)
 401fef8:	28800017 	ldw	r2,0(r5)
 401fefc:	18bfee1e 	bne	r3,r2,401feb8 <__alt_mem_onchip_memory2_0+0xfc01ec38>
 401ff00:	31bfff04 	addi	r6,r6,-4
 401ff04:	21000104 	addi	r4,r4,4
 401ff08:	29400104 	addi	r5,r5,4
 401ff0c:	39bff936 	bltu	r7,r6,401fef4 <__alt_mem_onchip_memory2_0+0xfc01ec74>
 401ff10:	303fe91e 	bne	r6,zero,401feb8 <__alt_mem_onchip_memory2_0+0xfc01ec38>
 401ff14:	003ff506 	br	401feec <__alt_mem_onchip_memory2_0+0xfc01ec6c>
 401ff18:	10c5c83a 	sub	r2,r2,r3
 401ff1c:	f800283a 	ret

0401ff20 <__register_exitproc>:
 401ff20:	defffa04 	addi	sp,sp,-24
 401ff24:	dc000315 	stw	r16,12(sp)
 401ff28:	040100f4 	movhi	r16,1027
 401ff2c:	84295f04 	addi	r16,r16,-23172
 401ff30:	80c00017 	ldw	r3,0(r16)
 401ff34:	dc400415 	stw	r17,16(sp)
 401ff38:	dfc00515 	stw	ra,20(sp)
 401ff3c:	18805217 	ldw	r2,328(r3)
 401ff40:	2023883a 	mov	r17,r4
 401ff44:	10003726 	beq	r2,zero,4020024 <__register_exitproc+0x104>
 401ff48:	10c00117 	ldw	r3,4(r2)
 401ff4c:	010007c4 	movi	r4,31
 401ff50:	20c00e16 	blt	r4,r3,401ff8c <__register_exitproc+0x6c>
 401ff54:	1a000044 	addi	r8,r3,1
 401ff58:	8800221e 	bne	r17,zero,401ffe4 <__register_exitproc+0xc4>
 401ff5c:	18c00084 	addi	r3,r3,2
 401ff60:	18c7883a 	add	r3,r3,r3
 401ff64:	18c7883a 	add	r3,r3,r3
 401ff68:	12000115 	stw	r8,4(r2)
 401ff6c:	10c7883a 	add	r3,r2,r3
 401ff70:	19400015 	stw	r5,0(r3)
 401ff74:	0005883a 	mov	r2,zero
 401ff78:	dfc00517 	ldw	ra,20(sp)
 401ff7c:	dc400417 	ldw	r17,16(sp)
 401ff80:	dc000317 	ldw	r16,12(sp)
 401ff84:	dec00604 	addi	sp,sp,24
 401ff88:	f800283a 	ret
 401ff8c:	00810074 	movhi	r2,1025
 401ff90:	10b90104 	addi	r2,r2,-7164
 401ff94:	10002626 	beq	r2,zero,4020030 <__register_exitproc+0x110>
 401ff98:	01006404 	movi	r4,400
 401ff9c:	d9400015 	stw	r5,0(sp)
 401ffa0:	d9800115 	stw	r6,4(sp)
 401ffa4:	d9c00215 	stw	r7,8(sp)
 401ffa8:	400e4040 	call	400e404 <malloc>
 401ffac:	d9400017 	ldw	r5,0(sp)
 401ffb0:	d9800117 	ldw	r6,4(sp)
 401ffb4:	d9c00217 	ldw	r7,8(sp)
 401ffb8:	10001d26 	beq	r2,zero,4020030 <__register_exitproc+0x110>
 401ffbc:	81000017 	ldw	r4,0(r16)
 401ffc0:	10000115 	stw	zero,4(r2)
 401ffc4:	02000044 	movi	r8,1
 401ffc8:	22405217 	ldw	r9,328(r4)
 401ffcc:	0007883a 	mov	r3,zero
 401ffd0:	12400015 	stw	r9,0(r2)
 401ffd4:	20805215 	stw	r2,328(r4)
 401ffd8:	10006215 	stw	zero,392(r2)
 401ffdc:	10006315 	stw	zero,396(r2)
 401ffe0:	883fde26 	beq	r17,zero,401ff5c <__alt_mem_onchip_memory2_0+0xfc01ecdc>
 401ffe4:	18c9883a 	add	r4,r3,r3
 401ffe8:	2109883a 	add	r4,r4,r4
 401ffec:	1109883a 	add	r4,r2,r4
 401fff0:	21802215 	stw	r6,136(r4)
 401fff4:	01800044 	movi	r6,1
 401fff8:	12406217 	ldw	r9,392(r2)
 401fffc:	30cc983a 	sll	r6,r6,r3
 4020000:	4992b03a 	or	r9,r9,r6
 4020004:	12406215 	stw	r9,392(r2)
 4020008:	21c04215 	stw	r7,264(r4)
 402000c:	01000084 	movi	r4,2
 4020010:	893fd21e 	bne	r17,r4,401ff5c <__alt_mem_onchip_memory2_0+0xfc01ecdc>
 4020014:	11006317 	ldw	r4,396(r2)
 4020018:	218cb03a 	or	r6,r4,r6
 402001c:	11806315 	stw	r6,396(r2)
 4020020:	003fce06 	br	401ff5c <__alt_mem_onchip_memory2_0+0xfc01ecdc>
 4020024:	18805304 	addi	r2,r3,332
 4020028:	18805215 	stw	r2,328(r3)
 402002c:	003fc606 	br	401ff48 <__alt_mem_onchip_memory2_0+0xfc01ecc8>
 4020030:	00bfffc4 	movi	r2,-1
 4020034:	003fd006 	br	401ff78 <__alt_mem_onchip_memory2_0+0xfc01ecf8>

04020038 <__call_exitprocs>:
 4020038:	defff504 	addi	sp,sp,-44
 402003c:	df000915 	stw	fp,36(sp)
 4020040:	dd400615 	stw	r21,24(sp)
 4020044:	dc800315 	stw	r18,12(sp)
 4020048:	dfc00a15 	stw	ra,40(sp)
 402004c:	ddc00815 	stw	r23,32(sp)
 4020050:	dd800715 	stw	r22,28(sp)
 4020054:	dd000515 	stw	r20,20(sp)
 4020058:	dcc00415 	stw	r19,16(sp)
 402005c:	dc400215 	stw	r17,8(sp)
 4020060:	dc000115 	stw	r16,4(sp)
 4020064:	d9000015 	stw	r4,0(sp)
 4020068:	2839883a 	mov	fp,r5
 402006c:	04800044 	movi	r18,1
 4020070:	057fffc4 	movi	r21,-1
 4020074:	008100f4 	movhi	r2,1027
 4020078:	10a95f04 	addi	r2,r2,-23172
 402007c:	12000017 	ldw	r8,0(r2)
 4020080:	45005217 	ldw	r20,328(r8)
 4020084:	44c05204 	addi	r19,r8,328
 4020088:	a0001c26 	beq	r20,zero,40200fc <__call_exitprocs+0xc4>
 402008c:	a0800117 	ldw	r2,4(r20)
 4020090:	15ffffc4 	addi	r23,r2,-1
 4020094:	b8000d16 	blt	r23,zero,40200cc <__call_exitprocs+0x94>
 4020098:	14000044 	addi	r16,r2,1
 402009c:	8421883a 	add	r16,r16,r16
 40200a0:	8421883a 	add	r16,r16,r16
 40200a4:	84402004 	addi	r17,r16,128
 40200a8:	a463883a 	add	r17,r20,r17
 40200ac:	a421883a 	add	r16,r20,r16
 40200b0:	e0001e26 	beq	fp,zero,402012c <__call_exitprocs+0xf4>
 40200b4:	80804017 	ldw	r2,256(r16)
 40200b8:	e0801c26 	beq	fp,r2,402012c <__call_exitprocs+0xf4>
 40200bc:	bdffffc4 	addi	r23,r23,-1
 40200c0:	843fff04 	addi	r16,r16,-4
 40200c4:	8c7fff04 	addi	r17,r17,-4
 40200c8:	bd7ff91e 	bne	r23,r21,40200b0 <__alt_mem_onchip_memory2_0+0xfc01ee30>
 40200cc:	00810074 	movhi	r2,1025
 40200d0:	10b90604 	addi	r2,r2,-7144
 40200d4:	10000926 	beq	r2,zero,40200fc <__call_exitprocs+0xc4>
 40200d8:	a0800117 	ldw	r2,4(r20)
 40200dc:	1000301e 	bne	r2,zero,40201a0 <__call_exitprocs+0x168>
 40200e0:	a0800017 	ldw	r2,0(r20)
 40200e4:	10003226 	beq	r2,zero,40201b0 <__call_exitprocs+0x178>
 40200e8:	a009883a 	mov	r4,r20
 40200ec:	98800015 	stw	r2,0(r19)
 40200f0:	400e4180 	call	400e418 <free>
 40200f4:	9d000017 	ldw	r20,0(r19)
 40200f8:	a03fe41e 	bne	r20,zero,402008c <__alt_mem_onchip_memory2_0+0xfc01ee0c>
 40200fc:	dfc00a17 	ldw	ra,40(sp)
 4020100:	df000917 	ldw	fp,36(sp)
 4020104:	ddc00817 	ldw	r23,32(sp)
 4020108:	dd800717 	ldw	r22,28(sp)
 402010c:	dd400617 	ldw	r21,24(sp)
 4020110:	dd000517 	ldw	r20,20(sp)
 4020114:	dcc00417 	ldw	r19,16(sp)
 4020118:	dc800317 	ldw	r18,12(sp)
 402011c:	dc400217 	ldw	r17,8(sp)
 4020120:	dc000117 	ldw	r16,4(sp)
 4020124:	dec00b04 	addi	sp,sp,44
 4020128:	f800283a 	ret
 402012c:	a0800117 	ldw	r2,4(r20)
 4020130:	80c00017 	ldw	r3,0(r16)
 4020134:	10bfffc4 	addi	r2,r2,-1
 4020138:	15c01426 	beq	r2,r23,402018c <__call_exitprocs+0x154>
 402013c:	80000015 	stw	zero,0(r16)
 4020140:	183fde26 	beq	r3,zero,40200bc <__alt_mem_onchip_memory2_0+0xfc01ee3c>
 4020144:	95c8983a 	sll	r4,r18,r23
 4020148:	a0806217 	ldw	r2,392(r20)
 402014c:	a5800117 	ldw	r22,4(r20)
 4020150:	2084703a 	and	r2,r4,r2
 4020154:	10000b26 	beq	r2,zero,4020184 <__call_exitprocs+0x14c>
 4020158:	a0806317 	ldw	r2,396(r20)
 402015c:	2088703a 	and	r4,r4,r2
 4020160:	20000c1e 	bne	r4,zero,4020194 <__call_exitprocs+0x15c>
 4020164:	89400017 	ldw	r5,0(r17)
 4020168:	d9000017 	ldw	r4,0(sp)
 402016c:	183ee83a 	callr	r3
 4020170:	a0800117 	ldw	r2,4(r20)
 4020174:	15bfbf1e 	bne	r2,r22,4020074 <__alt_mem_onchip_memory2_0+0xfc01edf4>
 4020178:	98800017 	ldw	r2,0(r19)
 402017c:	153fcf26 	beq	r2,r20,40200bc <__alt_mem_onchip_memory2_0+0xfc01ee3c>
 4020180:	003fbc06 	br	4020074 <__alt_mem_onchip_memory2_0+0xfc01edf4>
 4020184:	183ee83a 	callr	r3
 4020188:	003ff906 	br	4020170 <__alt_mem_onchip_memory2_0+0xfc01eef0>
 402018c:	a5c00115 	stw	r23,4(r20)
 4020190:	003feb06 	br	4020140 <__alt_mem_onchip_memory2_0+0xfc01eec0>
 4020194:	89000017 	ldw	r4,0(r17)
 4020198:	183ee83a 	callr	r3
 402019c:	003ff406 	br	4020170 <__alt_mem_onchip_memory2_0+0xfc01eef0>
 40201a0:	a0800017 	ldw	r2,0(r20)
 40201a4:	a027883a 	mov	r19,r20
 40201a8:	1029883a 	mov	r20,r2
 40201ac:	003fb606 	br	4020088 <__alt_mem_onchip_memory2_0+0xfc01ee08>
 40201b0:	0005883a 	mov	r2,zero
 40201b4:	003ffb06 	br	40201a4 <__alt_mem_onchip_memory2_0+0xfc01ef24>
 40201b8:	01110bff 	0x1110bff
 40201bc:	01010004 	movi	r4,1024
 40201c0:	7f000105 	stb	fp,4(r15)
 40201c4:	007d0000 	call	7d000 <__alt_mem_sdram-0x3f83000>
 40201c8:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 40201cc:	01883a00 	call	1883a0 <__alt_mem_sdram-0x3e77c60>
 40201d0:	010d0bff 	0x10d0bff
 40201d4:	01010002 	0x1010002
	...
 40201e0:	010d0bff 	0x10d0bff
 40201e4:	01010004 	movi	r4,1024
 40201e8:	00000100 	call	10 <__alt_mem_sdram-0x3fffff0>
 40201ec:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 40201f0:	0400a85c 	xori	r16,zero,673
 40201f4:	0400cfac 	andhi	r16,zero,830
