
synthesizer.elf:     file format elf32-littlenios2
synthesizer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00027c54 memsz 0x00027c54 flags r-x
    LOAD off    0x00028c74 vaddr 0x04027c74 paddr 0x0402ae50 align 2**12
         filesz 0x000031dc memsz 0x000031dc flags rw-
    LOAD off    0x0002c02c vaddr 0x0402e02c paddr 0x0402e02c align 2**12
         filesz 0x00000000 memsz 0x0000025c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000207e4  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00007260  04020a14  04020a14  00021a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031dc  04027c74  0402ae50  00028c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000025c  0402e02c  0402e02c  0002c02c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0402e288  0402e288  0002be50  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  080012a0  080012a0  0002be50  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0002be50  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000019f0  00000000  00000000  0002be78  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00050422  00000000  00000000  0002d868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0001050c  00000000  00000000  0007dc8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014114  00000000  00000000  0008e196  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000577c  00000000  00000000  000a22ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000fd1f  00000000  00000000  000a7a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001eafd  00000000  00000000  000b7747  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000070  00000000  00000000  000d6244  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000029d8  00000000  00000000  000d62b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000f13fa  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000f13fd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000f1409  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000f140a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000f140b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000f140f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000f1413  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000f1417  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000f1422  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000f142d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  000f1438  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000020  00000000  00000000  000f1447  2**0
                  CONTENTS, READONLY
 30 .jdi          000057d2  00000000  00000000  000f1467  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000b9330  00000000  00000000  000f6c39  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
04020a14 l    d  .rodata	00000000 .rodata
04027c74 l    d  .rwdata	00000000 .rwdata
0402e02c l    d  .bss	00000000 .bss
0402e288 l    d  .sdram	00000000 .sdram
080012a0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../synthesizer_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
04029758 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029759 l     O .rwdata	00000001 _ZL9SPI_MODE1
0402975a l     O .rwdata	00000001 _ZL9SPI_MODE2
0402975b l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
0402975c l     O .rwdata	00000001 _ZL9SPI_MODE0
0402975d l     O .rwdata	00000001 _ZL9SPI_MODE1
0402975e l     O .rwdata	00000001 _ZL9SPI_MODE2
0402975f l     O .rwdata	00000001 _ZL9SPI_MODE3
0402e02c l     O .bss	00000001 _ZL9usb_error
0402e02d l     O .bss	00000001 _ZL14usb_task_state
0402e030 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
04029768 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029769 l     O .rwdata	00000001 _ZL9SPI_MODE1
0402976a l     O .rwdata	00000001 _ZL9SPI_MODE2
0402976b l     O .rwdata	00000001 _ZL9SPI_MODE3
0402976c l     O .rwdata	00000006 _ZL9XBOX_LEDS
04020d02 l     O .rodata	00000024 _ZL12XBOX_BUTTONS
04004454 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 hidboot.cpp
0402978c l     O .rwdata	00000001 _ZL9SPI_MODE0
0402978d l     O .rwdata	00000001 _ZL9SPI_MODE1
0402978e l     O .rwdata	00000001 _ZL9SPI_MODE2
0402978f l     O .rwdata	00000001 _ZL9SPI_MODE3
04029790 l     O .rwdata	00000002 _ZL9pstrSpace
04029794 l     O .rwdata	00000003 _ZL8pstrCRLF
04029798 l     O .rwdata	00000002 _ZL13pstrSingleTab
0402979c l     O .rwdata	00000003 _ZL13pstrDoubleTab
040297a0 l     O .rwdata	00000004 _ZL13pstrTripleTab
040297a4 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
04020e50 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
04020e64 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
04020e70 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
04020e7c l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
04020e88 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
04020e94 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
04020ea4 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
040297ac l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
040297b4 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
040297bc l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
040297c4 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
04020eb0 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
04020ebc l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
040297c8 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
040297cc l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
04020ec8 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
04020ed8 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
040297d4 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
040297dc l     O .rwdata	00000006 _ZL18pstrUsagePagePower
04020ee8 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
040297e4 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
04020ef8 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
040297ec l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
04020f10 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
040297f0 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
04020f1c l     O .rodata	00000009 _ZL21pstrUsagePageReserved
04020f28 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
040297f8 l     O .rwdata	00000008 _ZL16pstrUsagePointer
04029800 l     O .rwdata	00000006 _ZL14pstrUsageMouse
04020f34 l     O .rodata	00000009 _ZL17pstrUsageJoystick
04020f40 l     O .rodata	00000009 _ZL16pstrUsageGamePad
04029808 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
04029810 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
04020f4c l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
04020f5c l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
04029818 l     O .rwdata	00000002 _ZL10pstrUsageX
0402981c l     O .rwdata	00000002 _ZL10pstrUsageY
04029820 l     O .rwdata	00000002 _ZL10pstrUsageZ
04029824 l     O .rwdata	00000003 _ZL11pstrUsageRx
04029828 l     O .rwdata	00000003 _ZL11pstrUsageRy
0402982c l     O .rwdata	00000003 _ZL11pstrUsageRz
04029830 l     O .rwdata	00000007 _ZL15pstrUsageSlider
04029838 l     O .rwdata	00000005 _ZL13pstrUsageDial
04029840 l     O .rwdata	00000006 _ZL14pstrUsageWheel
04020f70 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
04020f7c l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
04020f88 l     O .rodata	0000000b _ZL18pstrUsageByteCount
04020f94 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
04029848 l     O .rwdata	00000006 _ZL14pstrUsageStart
04029850 l     O .rwdata	00000004 _ZL15pstrUsageSelect
04029854 l     O .rwdata	00000003 _ZL11pstrUsageVx
04029858 l     O .rwdata	00000003 _ZL11pstrUsageVy
0402985c l     O .rwdata	00000003 _ZL11pstrUsageVz
04029860 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
04029868 l     O .rwdata	00000005 _ZL13pstrUsageVbry
04029870 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
04029878 l     O .rwdata	00000004 _ZL12pstrUsageVno
04020fa4 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
04020fb4 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
04020fc0 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
04020fcc l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
04020fdc l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
04020fe8 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
04020ff4 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
04021008 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
04021018 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
04021028 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
04021038 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
04021048 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
04021058 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
04021068 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
04021078 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
04021084 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
04021094 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
040210a8 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
040210bc l     O .rodata	00000009 _ZL15pstrUsageDPadUp
040210c8 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
040210d4 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
040210e0 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
040210ec l     O .rodata	00000009 _ZL19pstrUsageSystemDock
040210f8 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
04021104 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
04021110 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
0402111c l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
04021128 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
04021134 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
04021140 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
04021150 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
0402115c l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
0402116c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
0402117c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
0402118c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
0402119c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
040211ac l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
040211c4 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
040211dc l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
040211f4 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
04021204 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
04021214 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
04021224 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
04021234 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
04021244 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
04021254 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
04021264 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
04021274 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
04021284 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
04021294 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
040212ac l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
040212bc l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
040212d0 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
040212e0 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
040212ec l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
040212f8 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
04021304 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0402987c l     O .rwdata	00000008 _ZL16pstrUsageAileron
04021310 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
04021320 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
04021334 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
04021348 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
04021358 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
04021368 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
04021374 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
04021388 l     O .rodata	00000009 _ZL17pstrUsageElevator
04021394 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
04029884 l     O .rwdata	00000007 _ZL15pstrUsageRudder
040213a4 l     O .rodata	00000009 _ZL17pstrUsageThrottle
040213b0 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
040213bc l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
040213cc l     O .rodata	0000000d _ZL20pstrUsageLandingGear
040213dc l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0402988c l     O .rwdata	00000008 _ZL16pstrUsageTrigger
040213e8 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
040213f4 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
04021400 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
04029894 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0402989c l     O .rwdata	00000006 _ZL14pstrUsageBrake
040298a4 l     O .rwdata	00000007 _ZL15pstrUsageClutch
040298ac l     O .rwdata	00000008 _ZL16pstrUsageShifter
0402140c l     O .rodata	00000009 _ZL17pstrUsageSteering
04021418 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
04021424 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
04021430 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
040298b4 l     O .rwdata	00000008 _ZL16pstrUsageBallast
0402143c l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
0402144c l     O .rodata	0000000c _ZL19pstrUsageHandleBars
04021458 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
04021464 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
040298bc l     O .rwdata	00000005 _ZL13pstrUsageBelt
04021470 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
040298c4 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
040298cc l     O .rwdata	00000006 _ZL14pstrUsageGlove
0402147c l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
04021488 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
04021494 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
040214a0 l     O .rodata	0000000b _ZL19pstrUsageOculometer
040298d4 l     O .rwdata	00000005 _ZL13pstrUsageVest
040214ac l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
040214b8 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
040214c4 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
040214d4 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
040214e4 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
040214f0 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
040214fc l     O .rodata	0000000a _ZL18pstrUsageTreadmill
040298dc l     O .rwdata	00000004 _ZL12pstrUsageOar
040298e0 l     O .rwdata	00000006 _ZL14pstrUsageSlope
040298e8 l     O .rwdata	00000005 _ZL13pstrUsageRate
04021508 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
04021514 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
04021524 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
04021534 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
04021544 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
04021550 l     O .rodata	0000000b _ZL18pstrUsageStickType
0402155c l     O .rodata	0000000b _ZL20pstrUsageStickHeight
040298f0 l     O .rwdata	00000007 _ZL15pstrUsagePutter
040298f8 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
04029900 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
04029908 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
04029910 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
04029918 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
04029920 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
04029928 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
04029930 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
04029938 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
04029940 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
04029948 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
04021568 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
04021574 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
04021580 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
04029950 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
04029958 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
04029960 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
04029968 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
04029970 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
0402158c l     O .rodata	0000000d _ZL25pstrUsage3DGameController
0402159c l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
04029978 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
04029980 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
040215a8 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
040215b8 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
040215c8 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
040215d8 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
040215e8 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
040215f8 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
04021608 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
04021618 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
04021628 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
04029984 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
04021638 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0402998c l     O .rwdata	00000005 _ZL13pstrUsageBump
04021648 l     O .rodata	00000009 _ZL16pstrUsageNewGame
04021654 l     O .rodata	0000000b _ZL18pstrUsageShootBall
04029994 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
04021660 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
0402166c l     O .rodata	00000009 _ZL16pstrUsageGunClip
0402999c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
04021678 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
04021688 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
04021694 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
040216a0 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
040216ac l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
040216c0 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
040216d0 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
040216e0 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
040216ec l     O .rodata	0000000c _ZL19pstrUsageWirelessID
040216f8 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
04021710 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
04021724 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
0402173c l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
04021750 l     O .rodata	00000009 _ZL16pstrUsageNumLock
0402175c l     O .rodata	0000000a _ZL17pstrUsageCapsLock
04021768 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
040299a4 l     O .rwdata	00000008 _ZL16pstrUsageCompose
040299ac l     O .rwdata	00000005 _ZL13pstrUsageKana
040299b4 l     O .rwdata	00000004 _ZL14pstrUsagePower
040299b8 l     O .rwdata	00000006 _ZL14pstrUsageShift
040299c0 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
040299c4 l     O .rwdata	00000005 _ZL13pstrUsageMute
04021774 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
04021780 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
04021790 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
040299cc l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
040217a0 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
040217b0 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
040299d4 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
040299dc l     O .rwdata	00000007 _ZL15pstrUsageStereo
040217bc l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
040217d0 l     O .rodata	00000009 _ZL17pstrUsageSpinning
040299e4 l     O .rwdata	00000004 _ZL12pstrUsageCAV
040299e8 l     O .rwdata	00000004 _ZL12pstrUsageCLV
040217dc l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
040217f0 l     O .rodata	00000009 _ZL16pstrUsageOffHook
040299ec l     O .rwdata	00000005 _ZL13pstrUsageRing
040217fc l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
04021808 l     O .rodata	0000000a _ZL17pstrUsageDataMode
040299f4 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
040299fc l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
04029a04 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
04029a0c l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
04021814 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
04029a14 l     O .rwdata	00000005 _ZL13pstrUsageHold
04029a1c l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
04021820 l     O .rodata	00000009 _ZL17pstrUsageCoverage
0402182c l     O .rodata	0000000b _ZL18pstrUsageNightMode
04021838 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
04021844 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
04029a20 l     O .rwdata	00000005 _ZL19pstrUsageConference
04021850 l     O .rodata	00000009 _ZL16pstrUsageStandBy
04029a28 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
04029a30 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
04029a38 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
0402185c l     O .rodata	00000009 _ZL16pstrUsageOffLine
04029a40 l     O .rwdata	00000005 _ZL13pstrUsageBusy
04029a48 l     O .rwdata	00000006 _ZL14pstrUsageReady
04021868 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
04021874 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
04029a50 l     O .rwdata	00000007 _ZL15pstrUsageRemote
04029a58 l     O .rwdata	00000004 _ZL16pstrUsageForward
04029a5c l     O .rwdata	00000004 _ZL16pstrUsageReverse
04029a60 l     O .rwdata	00000005 _ZL13pstrUsageStop
04029a68 l     O .rwdata	00000007 _ZL15pstrUsageRewind
04021880 l     O .rodata	00000009 _ZL20pstrUsageFastForward
04029a70 l     O .rwdata	00000005 _ZL13pstrUsagePlay
04029a78 l     O .rwdata	00000006 _ZL14pstrUsagePause
04029a80 l     O .rwdata	00000004 _ZL15pstrUsageRecord
04029a84 l     O .rwdata	00000006 _ZL14pstrUsageError
0402188c l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
0402189c l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
040218b0 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
04029a8c l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
040218c8 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
040218d4 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
040218e4 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
04029a94 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
040218f4 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
04021904 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
04021918 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
0402192c l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
04021940 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
04021954 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
04029a9c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
04021964 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
04021970 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
04029aa4 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
0402197c l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
04021988 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
04029aac l     O .rwdata	00000006 _ZL14pstrUsagePhone
04021998 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
040219a4 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
04029ab4 l     O .rwdata	00000008 _ZL16pstrUsageHandset
04029abc l     O .rwdata	00000008 _ZL16pstrUsageHeadset
040219b0 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
040219bc l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
04029ac4 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
04029acc l     O .rwdata	00000006 _ZL14pstrUsageFlash
04029ad4 l     O .rwdata	00000008 _ZL16pstrUsageFeature
04029adc l     O .rwdata	00000007 _ZL15pstrUsageRedial
040219c8 l     O .rodata	00000009 _ZL17pstrUsageTransfer
04029ae4 l     O .rwdata	00000005 _ZL13pstrUsageDrop
04029aec l     O .rwdata	00000005 _ZL13pstrUsagePark
040219d4 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
040219e0 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
04029af4 l     O .rwdata	00000005 _ZL13pstrUsageLine
040219ec l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
040219f8 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
04021a04 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
04021a10 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
04021a1c l     O .rodata	0000000a _ZL17pstrUsageCallerID
04029afc l     O .rwdata	00000005 _ZL13pstrUsageSend
04021a28 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
04021a34 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
04021a40 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
04021a4c l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
04021a58 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
04021a64 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
04029b04 l     O .rwdata	00000004 _ZL16pstrUsageMessage
04021a74 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
04021a84 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
04021a98 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
04021aac l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
04021ac0 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
04021ad4 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
04021ae4 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
04021af4 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
04021b08 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
04021b18 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
04021b28 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
04021b38 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
04021b44 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
04021b50 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
04021b5c l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
04029b08 l     O .rwdata	00000007 _ZL15pstrUsageRinger
04029b10 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
04029b14 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
04029b18 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
04029b1c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
04029b20 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
04029b24 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
04029b28 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
04029b2c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
04029b30 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
04029b34 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
04029b38 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
04029b3c l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
04029b40 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
04029b44 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
04029b48 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
04029b4c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
04021b70 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
04021b80 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
04021b8c l     O .rodata	0000000a _ZL18pstrUsageHeadphone
04021b98 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
04029b50 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
04029b54 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
04029b5c l     O .rwdata	00000006 _ZL13pstrUsageAMPM
04029b64 l     O .rwdata	00000006 _ZL14pstrUsageReset
04029b6c l     O .rwdata	00000006 _ZL14pstrUsageSleep
04021ba4 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
04021bb0 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
04029b74 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
04021bbc l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
04029b7c l     O .rwdata	00000005 _ZL13pstrUsageMenu
04021bc8 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
04029b84 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
04021bd4 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
04021be0 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
04021bec l     O .rodata	0000000b _ZL18pstrUsageMenuRight
04021bf8 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
04021c04 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
04021c14 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
04021c24 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
04021c30 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
04021c3c l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
04029b8c l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
04021c4c l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
04021c5c l     O .rodata	00000009 _ZL17pstrUsageSnapshot
04029b94 l     O .rwdata	00000006 _ZL14pstrUsageStill
04029b9c l     O .rwdata	00000004 _ZL18pstrUsageSelection
04021c68 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
04021c74 l     O .rodata	0000000a _ZL17pstrUsageModeStep
04021c80 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
04021c8c l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
04021c9c l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
04029ba0 l     O .rwdata	00000008 _ZL16pstrUsageChannel
04029ba8 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
04021ca8 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
04021cb8 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
04021cc4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
04021cd0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
04021cdc l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
04021ce8 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
04021cf4 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
04021d00 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
04021d10 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
04021d1c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
04021d28 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
04021d34 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
04029bb0 l     O .rwdata	00000005 _ZL13pstrUsageQuit
04029bb8 l     O .rwdata	00000005 _ZL13pstrUsageHelp
04021d44 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
04021d54 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
04021d60 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
04021d6c l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
04021d7c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
04021d8c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
04029bc0 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
04029bc8 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
04021d9c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
04029bd0 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
04029bd8 l     O .rwdata	00000005 _ZL13pstrUsageOnce
04029be0 l     O .rwdata	00000006 _ZL14pstrUsageDaily
04029be8 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
04029bf0 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
04021da8 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
04021db4 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
04029bf8 l     O .rwdata	00000006 _ZL14pstrUsageEject
04029c00 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
04021dc0 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
04021dcc l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
04021dd8 l     O .rodata	00000009 _ZL17pstrUsageTracking
04021de4 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
04021df0 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
04029c08 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
04021dfc l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
04029c10 l     O .rwdata	00000005 _ZL13pstrUsageMark
04021e08 l     O .rodata	00000009 _ZL18pstrUsageClearMark
04021e14 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
04021e20 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
04021e2c l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
04021e3c l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
04021e50 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
04021e60 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
04021e70 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
04021e7c l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
04021e88 l     O .rodata	0000000b _ZL18pstrUsageStopEject
04021e94 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
04021ea0 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
04029c18 l     O .rwdata	00000004 _ZL15pstrUsageVolume
04029c1c l     O .rwdata	00000008 _ZL16pstrUsageBalance
04029c24 l     O .rwdata	00000005 _ZL13pstrUsageBass
04029c2c l     O .rwdata	00000007 _ZL15pstrUsageTreble
04021eac l     O .rodata	0000000b _ZL18pstrUsageBassBoost
04021eb8 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
04029c34 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
04029c3c l     O .rwdata	00000004 _ZL12pstrUsageMPX
04029c40 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
04029c48 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
04029c50 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
04021ec4 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
04021ed0 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
04021edc l     O .rodata	0000000a _ZL17pstrUsageLongPlay
04021ee8 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
04029c58 l     O .rwdata	00000005 _ZL13pstrUsageSlow
04021ef4 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
04021f00 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
04021f0c l     O .rodata	0000000b _ZL20pstrUsageLightEnable
04021f18 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
04021f28 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
04021f38 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
04021f44 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
04021f50 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
04021f5c l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
04029c60 l     O .rwdata	00000005 _ZL18pstrUsageProximity
04029c68 l     O .rwdata	00000007 _ZL15pstrUsageMotion
04021f68 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
04021f74 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
04029c70 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
04021f80 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
04021f90 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
04021fa0 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
04021fac l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
04021fb8 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
04021fc4 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
04029c78 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
04029c80 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
04021fd0 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
04021fdc l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
04021fe8 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
04021ff4 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
04029c88 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
04022004 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
04022010 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
04029c90 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
04029c98 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
04029ca0 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
04022020 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
0402202c l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
04022038 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
04022044 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
04022050 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
04022060 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
04022074 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
04022080 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
04022094 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
040220a4 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
040220b0 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
040220c0 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
040220d0 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
040220e0 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
040220ec l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
040220fc l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
04022108 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
04022118 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
04022128 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
04022138 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
04022148 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
0402215c l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
04029ca8 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
0402216c l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
04022180 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
04022194 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
040221a4 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
040221b4 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
040221c4 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
040221d0 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
040221dc l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
040221e8 l     O .rodata	00000009 _ZL16pstrUsageALLogon
040221f4 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
04022200 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
04022210 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
04022228 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
04022234 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
04022240 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
0402224c l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
04022258 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
04022264 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
04022270 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
04022284 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
04029cb0 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
04022290 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
04029cb8 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
0402229c l     O .rodata	0000000b _ZL18pstrUsageALDesktop
040222a8 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
040222b8 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
040222c4 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
040222d4 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
040222e4 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
040222f4 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
04022300 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
0402230c l     O .rodata	0000000a _ZL17pstrUsageALAlarms
04022318 l     O .rodata	00000009 _ZL16pstrUsageALClock
04022324 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
04022334 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
04022340 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
0402234c l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
04022358 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
04022364 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
04022378 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
04022388 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
04022394 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
040223a8 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
040223b4 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
040223c4 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
040223d8 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
040223ec l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
04022400 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
04022410 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
04022428 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
0402243c l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
0402244c l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
0402245c l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
04029cc0 l     O .rwdata	00000007 _ZL14pstrUsageACNew
04029cc8 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
04022470 l     O .rodata	00000009 _ZL16pstrUsageACClose
04029cd0 l     O .rwdata	00000008 _ZL15pstrUsageACExit
04029cd8 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
04029ce0 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
04029ce8 l     O .rwdata	00000008 _ZL15pstrUsageACSave
0402247c l     O .rodata	00000009 _ZL16pstrUsageACPrint
04029cf0 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
04029cf8 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
04029d00 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
04029d08 l     O .rwdata	00000007 _ZL14pstrUsageACCut
04022488 l     O .rodata	00000009 _ZL16pstrUsageACPaste
04022494 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
04029d10 l     O .rwdata	00000008 _ZL15pstrUsageACFind
040224a0 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
040224b0 l     O .rodata	0000000a _ZL17pstrUsageACSearch
04029d18 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
04029d20 l     O .rwdata	00000008 _ZL15pstrUsageACHome
04029d28 l     O .rwdata	00000008 _ZL15pstrUsageACBack
04029d30 l     O .rwdata	00000007 _ZL18pstrUsageACForward
04029d38 l     O .rwdata	00000008 _ZL15pstrUsageACStop
040224bc l     O .rodata	0000000b _ZL18pstrUsageACRefresh
040224c8 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
040224d8 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
040224e8 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
04029d40 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
040224f4 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
04022500 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
0402250c l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
04029d48 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
04022518 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
04022524 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
04022534 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
04022540 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
04022550 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
04022560 l     O .rodata	0000000a _ZL17pstrUsageACScroll
0402256c l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
04022578 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
04029d50 l     O .rwdata	00000007 _ZL14pstrUsageACPan
04022588 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
04022594 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
040225a4 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
04029d58 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
04029d60 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
04029d68 l     O .rwdata	00000008 _ZL15pstrUsageACBold
04029d70 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
040225b4 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
040225c0 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
04029d78 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
040225cc l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
040225d8 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
040225e4 l     O .rodata	0000000a _ZL17pstrUsageACRotate
040225f0 l     O .rodata	0000000a _ZL17pstrUsageACResize
040225fc l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
04022608 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
04022614 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
04022620 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
0402262c l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
04022638 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
04022644 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
04022650 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
04022660 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
04022670 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
04022680 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
04022690 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
0402269c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
040226ac l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
040226b8 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
040226c8 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
040226d8 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
040226e8 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
040226f4 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
04022700 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
0402270c l     O .rodata	0000000b _ZL18pstrUsageACPromote
04022718 l     O .rodata	0000000a _ZL17pstrUsageACDemote
04029d80 l     O .rwdata	00000007 _ZL14pstrUsageACYes
04029d88 l     O .rwdata	00000006 _ZL13pstrUsageACNo
04022724 l     O .rodata	0000000a _ZL17pstrUsageACCancel
04029d90 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
04029d98 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
04022730 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
04029da0 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
0402273c l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
0402274c l     O .rodata	0000000c _ZL19pstrUsageACCollapse
04022758 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
04022768 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
04022778 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
04022788 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
04029da8 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
04029db0 l     O .rwdata	00000008 _ZL15pstrUsageACLock
04022794 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
04029db8 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
040227a0 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
040227ac l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
040227bc l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
040227c8 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
040227d8 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
040227e4 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
040227f0 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
040227fc l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
04022808 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
04022814 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
04022820 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
04029dc0 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
04029dc8 l     O .rwdata	00000008 _ZL15pstrUsageACSort
0402282c l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
04022838 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
04029dd0 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
04022848 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
04022854 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
04022860 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
04022870 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
04022880 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
0402288c l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
04022898 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
040228a4 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
04029dd8 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
040228b0 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
040228bc l     O .rodata	0000000a _ZL17pstrUsageACSendTo
040228c8 l     O .rodata	00000009 _ZL16pstrUsageACReply
040228d4 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
040228e4 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
04029de0 l     O .rwdata	00000007 _ZL15pstrUsageACSend
040228f0 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
04029de8 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
04029df0 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
040228fc l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
04022908 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
04022914 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
04022920 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
0402292c l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
04022938 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
04022944 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
04022950 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
0402295c l     O .rodata	0000000a _ZL17pstrUsageACRename
04022968 l     O .rodata	00000009 _ZL16pstrUsageACMerge
04022974 l     O .rodata	00000009 _ZL16pstrUsageACSplit
04022980 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
0402298c l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
04022998 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
04029df8 l     O .rwdata	00000004 _ZL12pstrUsagePen
040229a4 l     O .rodata	0000000a _ZL17pstrUsageLightPen
040229b0 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
040229bc l     O .rodata	0000000a _ZL17pstrUsageTouchPad
040229c8 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
040229d4 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
04029dfc l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
040229e4 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
04029e04 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
040229f0 l     O .rodata	00000009 _ZL17pstrUsageArmature
040229fc l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
04022a10 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
04029e0c l     O .rwdata	00000007 _ZL15pstrUsageStylus
04029e14 l     O .rwdata	00000005 _ZL13pstrUsagePuck
04029e1c l     O .rwdata	00000007 _ZL15pstrUsageFinger
04022a20 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
04022a2c l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
04022a38 l     O .rodata	00000009 _ZL16pstrUsageInRange
04029e24 l     O .rwdata	00000006 _ZL14pstrUsageTouch
04029e2c l     O .rwdata	00000008 _ZL16pstrUsageUntouch
04029e34 l     O .rwdata	00000004 _ZL12pstrUsageTap
04029e38 l     O .rwdata	00000005 _ZL16pstrUsageQuality
04022a44 l     O .rodata	0000000b _ZL18pstrUsageDataValid
04022a50 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
04022a60 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
04022a70 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
04029e40 l     O .rwdata	00000007 _ZL15pstrUsageInvert
04029e48 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
04029e50 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
04029e58 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
04022a80 l     O .rodata	00000009 _ZL17pstrUsageAltitude
04029e60 l     O .rwdata	00000006 _ZL14pstrUsageTwist
04029e68 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
04022a8c l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
04029e70 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
04029e78 l     O .rwdata	00000007 _ZL15pstrUsageEraser
04022a98 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
04022aa4 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
04022ab4 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
04022ac0 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
04022ad0 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
04022adc l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
04022aec l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
04022af8 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
04022b08 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
04022b14 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
04022b24 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
04022b34 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
04022b40 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
04022b4c l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
04022b58 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
04022b64 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
04022b70 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
04022b7c l     O .rodata	0000000b _ZL20pstrUsageStatusReady
04022b88 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
04022b98 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
04022ba8 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
04029e80 l     O .rwdata	00000004 _ZL12pstrUsageRow
04029e84 l     O .rwdata	00000004 _ZL15pstrUsageColumn
04029e88 l     O .rwdata	00000005 _ZL13pstrUsageRows
04029e90 l     O .rwdata	00000005 _ZL16pstrUsageColumns
04022bb4 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
04022bc0 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
04022bcc l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
04022bd8 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
04029e98 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
04022be4 l     O .rodata	00000009 _ZL17pstrUsageFontData
04022bf0 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
04022bfc l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
04022c08 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
04022c18 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
04022c28 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
04022c38 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
04022c44 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
04022c50 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
04022c5c l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
04022c68 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
04022c74 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
04022c80 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
04022c8c l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
04022c98 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
04022ca4 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
04022cb4 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
04022cc4 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
04022cd4 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
04022ce0 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
04022cec l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
04022cfc l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
04029ea0 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
04022d08 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
04022d18 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
04022d28 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
04022d34 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
04022d40 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
04022d50 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
04022d60 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
04022d70 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
04022d80 l     O .rodata	0000000a _ZL17pstrUsageBlitData
04022d8c l     O .rodata	00000009 _ZL19pstrUsageSoftButton
04022d98 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
04022da4 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
04022db4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
04022dc4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
04022dd4 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
04022de4 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
04029ea8 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
04029eb0 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
04022df4 l     O .rodata	0000000b _ZL18pstrUsageClipStore
04029eb8 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
04029ec0 l     O .rwdata	00000005 _ZL13pstrUsageNext
04029ec8 l     O .rwdata	00000005 _ZL13pstrUsageSave
04029ed0 l     O .rwdata	00000006 _ZL14pstrUsagePrint
04022e00 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
04029ed8 l     O .rwdata	00000005 _ZL13pstrUsageCine
04022e0c l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
04029ee0 l     O .rwdata	00000006 _ZL14pstrUsageFocus
04029ee8 l     O .rwdata	00000006 _ZL14pstrUsageDepth
04022e18 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
04022e28 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
04022e38 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
04022e48 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
04022e54 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
04022e60 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
04022e74 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
04022e88 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
04022e9c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
04022eb0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
04022ec0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
04022ed0 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
04022edc l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
04022ee8 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
04022ef8 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
04029efc l     O .rwdata	00000001 _ZL9SPI_MODE0
04029efd l     O .rwdata	00000001 _ZL9SPI_MODE1
04029efe l     O .rwdata	00000001 _ZL9SPI_MODE2
04029eff l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
04029f04 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029f05 l     O .rwdata	00000001 _ZL9SPI_MODE1
04029f06 l     O .rwdata	00000001 _ZL9SPI_MODE2
04029f07 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 usbh_midi.cpp
04029f08 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029f09 l     O .rwdata	00000001 _ZL9SPI_MODE1
04029f0a l     O .rwdata	00000001 _ZL9SPI_MODE2
04029f0b l     O .rwdata	00000001 _ZL9SPI_MODE3
04022fd2 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
04022fe2 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
04008a58 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
04029f14 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029f15 l     O .rwdata	00000001 _ZL9SPI_MODE1
04029f16 l     O .rwdata	00000001 _ZL9SPI_MODE2
04029f17 l     O .rwdata	00000001 _ZL9SPI_MODE3
04029f18 l     O .rwdata	00000002 _ZL9pstrSpace
04029f1c l     O .rwdata	00000003 _ZL8pstrCRLF
04029f20 l     O .rwdata	00000002 _ZL13pstrSingleTab
04029f24 l     O .rwdata	00000003 _ZL13pstrDoubleTab
04029f28 l     O .rwdata	00000004 _ZL13pstrTripleTab
04029f2c l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
040230ac l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
040230c0 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
040230cc l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
040230d8 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
040230e4 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
040230f0 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
04023100 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
04029f34 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
04029f3c l     O .rwdata	00000007 _ZL19pstrUsagePageButton
04029f44 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
04029f4c l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
0402310c l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
04023118 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
04029f50 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
04029f54 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
04023124 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
04023134 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
04029f5c l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
04029f64 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
04023144 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
04029f6c l     O .rwdata	00000006 _ZL18pstrUsagePageScale
04023154 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
04029f74 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
0402316c l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
04029f78 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
04023178 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
04023184 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
04029f80 l     O .rwdata	00000008 _ZL16pstrUsagePointer
04029f88 l     O .rwdata	00000006 _ZL14pstrUsageMouse
04023190 l     O .rodata	00000009 _ZL17pstrUsageJoystick
0402319c l     O .rodata	00000009 _ZL16pstrUsageGamePad
04029f90 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
04029f98 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
040231a8 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
040231b8 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
04029fa0 l     O .rwdata	00000002 _ZL10pstrUsageX
04029fa4 l     O .rwdata	00000002 _ZL10pstrUsageY
04029fa8 l     O .rwdata	00000002 _ZL10pstrUsageZ
04029fac l     O .rwdata	00000003 _ZL11pstrUsageRx
04029fb0 l     O .rwdata	00000003 _ZL11pstrUsageRy
04029fb4 l     O .rwdata	00000003 _ZL11pstrUsageRz
04029fb8 l     O .rwdata	00000007 _ZL15pstrUsageSlider
04029fc0 l     O .rwdata	00000005 _ZL13pstrUsageDial
04029fc8 l     O .rwdata	00000006 _ZL14pstrUsageWheel
040231cc l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
040231d8 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
040231e4 l     O .rodata	0000000b _ZL18pstrUsageByteCount
040231f0 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
04029fd0 l     O .rwdata	00000006 _ZL14pstrUsageStart
04029fd8 l     O .rwdata	00000004 _ZL15pstrUsageSelect
04029fdc l     O .rwdata	00000003 _ZL11pstrUsageVx
04029fe0 l     O .rwdata	00000003 _ZL11pstrUsageVy
04029fe4 l     O .rwdata	00000003 _ZL11pstrUsageVz
04029fe8 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
04029ff0 l     O .rwdata	00000005 _ZL13pstrUsageVbry
04029ff8 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0402a000 l     O .rwdata	00000004 _ZL12pstrUsageVno
04023200 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
04023210 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
0402321c l     O .rodata	00000009 _ZL22pstrUsageSystemControl
04023228 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
04023238 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
04023244 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
04023250 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
04023264 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
04023274 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
04023284 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
04023294 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
040232a4 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
040232b4 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
040232c4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
040232d4 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
040232e0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
040232f0 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
04023304 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
04023318 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
04023324 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
04023330 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
0402333c l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
04023348 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
04023354 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
04023360 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
0402336c l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
04023378 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
04023384 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
04023390 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
0402339c l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
040233ac l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
040233b8 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
040233c8 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
040233d8 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
040233e8 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
040233f8 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
04023408 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
04023420 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
04023438 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
04023450 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
04023460 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
04023470 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
04023480 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
04023490 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
040234a0 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
040234b0 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
040234c0 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
040234d0 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
040234e0 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
040234f0 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
04023508 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
04023518 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
0402352c l     O .rodata	0000000d _ZL20pstrUsageFlightStick
0402353c l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
04023548 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
04023554 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
04023560 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0402a004 l     O .rwdata	00000008 _ZL16pstrUsageAileron
0402356c l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
0402357c l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
04023590 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
040235a4 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
040235b4 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
040235c4 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
040235d0 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
040235e4 l     O .rodata	00000009 _ZL17pstrUsageElevator
040235f0 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0402a00c l     O .rwdata	00000007 _ZL15pstrUsageRudder
04023600 l     O .rodata	00000009 _ZL17pstrUsageThrottle
0402360c l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
04023618 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
04023628 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
04023638 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0402a014 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
04023644 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
04023650 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
0402365c l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0402a01c l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0402a024 l     O .rwdata	00000006 _ZL14pstrUsageBrake
0402a02c l     O .rwdata	00000007 _ZL15pstrUsageClutch
0402a034 l     O .rwdata	00000008 _ZL16pstrUsageShifter
04023668 l     O .rodata	00000009 _ZL17pstrUsageSteering
04023674 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
04023680 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
0402368c l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0402a03c l     O .rwdata	00000008 _ZL16pstrUsageBallast
04023698 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
040236a8 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
040236b4 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
040236c0 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0402a044 l     O .rwdata	00000005 _ZL13pstrUsageBelt
040236cc l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0402a04c l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0402a054 l     O .rwdata	00000006 _ZL14pstrUsageGlove
040236d8 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
040236e4 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
040236f0 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
040236fc l     O .rodata	0000000b _ZL19pstrUsageOculometer
0402a05c l     O .rwdata	00000005 _ZL13pstrUsageVest
04023708 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
04023714 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
04023720 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
04023730 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
04023740 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
0402374c l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
04023758 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0402a064 l     O .rwdata	00000004 _ZL12pstrUsageOar
0402a068 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0402a070 l     O .rwdata	00000005 _ZL13pstrUsageRate
04023764 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
04023770 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
04023780 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
04023790 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
040237a0 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
040237ac l     O .rodata	0000000b _ZL18pstrUsageStickType
040237b8 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0402a078 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0402a080 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0402a088 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0402a090 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0402a098 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0402a0a0 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0402a0a8 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0402a0b0 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0402a0b8 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0402a0c0 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0402a0c8 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0402a0d0 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
040237c4 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
040237d0 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
040237dc l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0402a0d8 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0402a0e0 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0402a0e8 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0402a0f0 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0402a0f8 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
040237e8 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
040237f8 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0402a100 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0402a108 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
04023804 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
04023814 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
04023824 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
04023834 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
04023844 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
04023854 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
04023864 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
04023874 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
04023884 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0402a10c l     O .rwdata	00000008 _ZL16pstrUsageFlipper
04023894 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0402a114 l     O .rwdata	00000005 _ZL13pstrUsageBump
040238a4 l     O .rodata	00000009 _ZL16pstrUsageNewGame
040238b0 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0402a11c l     O .rwdata	00000007 _ZL15pstrUsagePlayer
040238bc l     O .rodata	00000009 _ZL16pstrUsageGunBolt
040238c8 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0402a124 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
040238d4 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
040238e4 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
040238f0 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
040238fc l     O .rodata	0000000b _ZL18pstrUsageGunSafety
04023908 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
0402391c l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
0402392c l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
0402393c l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
04023948 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
04023954 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
0402396c l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
04023980 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
04023998 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
040239ac l     O .rodata	00000009 _ZL16pstrUsageNumLock
040239b8 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
040239c4 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0402a12c l     O .rwdata	00000008 _ZL16pstrUsageCompose
0402a134 l     O .rwdata	00000005 _ZL13pstrUsageKana
0402a13c l     O .rwdata	00000004 _ZL14pstrUsagePower
0402a140 l     O .rwdata	00000006 _ZL14pstrUsageShift
0402a148 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0402a14c l     O .rwdata	00000005 _ZL13pstrUsageMute
040239d0 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
040239dc l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
040239ec l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0402a154 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
040239fc l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
04023a0c l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0402a15c l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0402a164 l     O .rwdata	00000007 _ZL15pstrUsageStereo
04023a18 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
04023a2c l     O .rodata	00000009 _ZL17pstrUsageSpinning
0402a16c l     O .rwdata	00000004 _ZL12pstrUsageCAV
0402a170 l     O .rwdata	00000004 _ZL12pstrUsageCLV
04023a38 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
04023a4c l     O .rodata	00000009 _ZL16pstrUsageOffHook
0402a174 l     O .rwdata	00000005 _ZL13pstrUsageRing
04023a58 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
04023a64 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0402a17c l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0402a184 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0402a18c l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0402a194 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
04023a70 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0402a19c l     O .rwdata	00000005 _ZL13pstrUsageHold
0402a1a4 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
04023a7c l     O .rodata	00000009 _ZL17pstrUsageCoverage
04023a88 l     O .rodata	0000000b _ZL18pstrUsageNightMode
04023a94 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
04023aa0 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0402a1a8 l     O .rwdata	00000005 _ZL19pstrUsageConference
04023aac l     O .rodata	00000009 _ZL16pstrUsageStandBy
0402a1b0 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0402a1b8 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0402a1c0 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
04023ab8 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0402a1c8 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0402a1d0 l     O .rwdata	00000006 _ZL14pstrUsageReady
04023ac4 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
04023ad0 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0402a1d8 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0402a1e0 l     O .rwdata	00000004 _ZL16pstrUsageForward
0402a1e4 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0402a1e8 l     O .rwdata	00000005 _ZL13pstrUsageStop
0402a1f0 l     O .rwdata	00000007 _ZL15pstrUsageRewind
04023adc l     O .rodata	00000009 _ZL20pstrUsageFastForward
0402a1f8 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0402a200 l     O .rwdata	00000006 _ZL14pstrUsagePause
0402a208 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0402a20c l     O .rwdata	00000006 _ZL14pstrUsageError
04023ae8 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
04023af8 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
04023b0c l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0402a214 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
04023b24 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
04023b30 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
04023b40 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0402a21c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
04023b50 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
04023b60 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
04023b74 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
04023b88 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
04023b9c l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
04023bb0 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0402a224 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
04023bc0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
04023bcc l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0402a22c l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
04023bd8 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
04023be4 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0402a234 l     O .rwdata	00000006 _ZL14pstrUsagePhone
04023bf4 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
04023c00 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0402a23c l     O .rwdata	00000008 _ZL16pstrUsageHandset
0402a244 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
04023c0c l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
04023c18 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0402a24c l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0402a254 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0402a25c l     O .rwdata	00000008 _ZL16pstrUsageFeature
0402a264 l     O .rwdata	00000007 _ZL15pstrUsageRedial
04023c24 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0402a26c l     O .rwdata	00000005 _ZL13pstrUsageDrop
0402a274 l     O .rwdata	00000005 _ZL13pstrUsagePark
04023c30 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
04023c3c l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0402a27c l     O .rwdata	00000005 _ZL13pstrUsageLine
04023c48 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
04023c54 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
04023c60 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
04023c6c l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
04023c78 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0402a284 l     O .rwdata	00000005 _ZL13pstrUsageSend
04023c84 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
04023c90 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
04023c9c l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
04023ca8 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
04023cb4 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
04023cc0 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0402a28c l     O .rwdata	00000004 _ZL16pstrUsageMessage
04023cd0 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
04023ce0 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
04023cf4 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
04023d08 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
04023d1c l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
04023d30 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
04023d40 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
04023d50 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
04023d64 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
04023d74 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
04023d84 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
04023d94 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
04023da0 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
04023dac l     O .rodata	0000000a _ZL17pstrUsageTonesOff
04023db8 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0402a290 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0402a298 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0402a29c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0402a2a0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0402a2a4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0402a2a8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0402a2ac l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0402a2b0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0402a2b4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0402a2b8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0402a2bc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0402a2c0 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0402a2c4 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0402a2c8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0402a2cc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0402a2d0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0402a2d4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
04023dcc l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
04023ddc l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
04023de8 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
04023df4 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0402a2d8 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0402a2dc l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0402a2e4 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0402a2ec l     O .rwdata	00000006 _ZL14pstrUsageReset
0402a2f4 l     O .rwdata	00000006 _ZL14pstrUsageSleep
04023e00 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
04023e0c l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0402a2fc l     O .rwdata	00000008 _ZL21pstrUsageIllumination
04023e18 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0402a304 l     O .rwdata	00000005 _ZL13pstrUsageMenu
04023e24 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0402a30c l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
04023e30 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
04023e3c l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
04023e48 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
04023e54 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
04023e60 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
04023e70 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
04023e80 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
04023e8c l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
04023e98 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0402a314 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
04023ea8 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
04023eb8 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0402a31c l     O .rwdata	00000006 _ZL14pstrUsageStill
0402a324 l     O .rwdata	00000004 _ZL18pstrUsageSelection
04023ec4 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
04023ed0 l     O .rodata	0000000a _ZL17pstrUsageModeStep
04023edc l     O .rodata	0000000c _ZL19pstrUsageRecallLast
04023ee8 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
04023ef8 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0402a328 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0402a330 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
04023f04 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
04023f14 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
04023f20 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
04023f2c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
04023f38 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
04023f44 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
04023f50 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
04023f5c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
04023f6c l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
04023f78 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
04023f84 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
04023f90 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0402a338 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0402a340 l     O .rwdata	00000005 _ZL13pstrUsageHelp
04023fa0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
04023fb0 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
04023fbc l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
04023fc8 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
04023fd8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
04023fe8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0402a348 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0402a350 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
04023ff8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0402a358 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0402a360 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0402a368 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0402a370 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0402a378 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
04024004 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
04024010 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0402a380 l     O .rwdata	00000006 _ZL14pstrUsageEject
0402a388 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
0402401c l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
04024028 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
04024034 l     O .rodata	00000009 _ZL17pstrUsageTracking
04024040 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
0402404c l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0402a390 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
04024058 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0402a398 l     O .rwdata	00000005 _ZL13pstrUsageMark
04024064 l     O .rodata	00000009 _ZL18pstrUsageClearMark
04024070 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
0402407c l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
04024088 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
04024098 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
040240ac l     O .rodata	0000000e _ZL21pstrUsageCounterReset
040240bc l     O .rodata	0000000d _ZL20pstrUsageShowCounter
040240cc l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
040240d8 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
040240e4 l     O .rodata	0000000b _ZL18pstrUsageStopEject
040240f0 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
040240fc l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0402a3a0 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0402a3a4 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0402a3ac l     O .rwdata	00000005 _ZL13pstrUsageBass
0402a3b4 l     O .rwdata	00000007 _ZL15pstrUsageTreble
04024108 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
04024114 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0402a3bc l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0402a3c4 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0402a3c8 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0402a3d0 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0402a3d8 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
04024120 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
0402412c l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
04024138 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
04024144 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0402a3e0 l     O .rwdata	00000005 _ZL13pstrUsageSlow
04024150 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
0402415c l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
04024168 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
04024174 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
04024184 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
04024194 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
040241a0 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
040241ac l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
040241b8 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0402a3e8 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0402a3f0 l     O .rwdata	00000007 _ZL15pstrUsageMotion
040241c4 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
040241d0 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0402a3f8 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
040241dc l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
040241ec l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
040241fc l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
04024208 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
04024214 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
04024220 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0402a400 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0402a408 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
0402422c l     O .rodata	00000009 _ZL21pstrUsageChannelRight
04024238 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
04024244 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
04024250 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0402a410 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
04024260 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
0402426c l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0402a418 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0402a420 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0402a428 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
0402427c l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
04024288 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
04024294 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
040242a0 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
040242ac l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
040242bc l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
040242d0 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
040242dc l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
040242f0 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
04024300 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
0402430c l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
0402431c l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
0402432c l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
0402433c l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
04024348 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
04024358 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
04024364 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
04024374 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
04024384 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
04024394 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
040243a4 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
040243b8 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0402a430 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
040243c8 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
040243dc l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
040243f0 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
04024400 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
04024410 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
04024420 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
0402442c l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
04024438 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
04024444 l     O .rodata	00000009 _ZL16pstrUsageALLogon
04024450 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
0402445c l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
0402446c l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
04024484 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
04024490 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
0402449c l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
040244a8 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
040244b4 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
040244c0 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
040244cc l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
040244e0 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0402a438 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
040244ec l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0402a440 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
040244f8 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
04024504 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
04024514 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
04024520 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
04024530 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
04024540 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
04024550 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
0402455c l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
04024568 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
04024574 l     O .rodata	00000009 _ZL16pstrUsageALClock
04024580 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
04024590 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
0402459c l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
040245a8 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
040245b4 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
040245c0 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
040245d4 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
040245e4 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
040245f0 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
04024604 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
04024610 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
04024620 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
04024634 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
04024648 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
0402465c l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
0402466c l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
04024684 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
04024698 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
040246a8 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
040246b8 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0402a448 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0402a450 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
040246cc l     O .rodata	00000009 _ZL16pstrUsageACClose
0402a458 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0402a460 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0402a468 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0402a470 l     O .rwdata	00000008 _ZL15pstrUsageACSave
040246d8 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0402a478 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0402a480 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0402a488 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0402a490 l     O .rwdata	00000007 _ZL14pstrUsageACCut
040246e4 l     O .rodata	00000009 _ZL16pstrUsageACPaste
040246f0 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0402a498 l     O .rwdata	00000008 _ZL15pstrUsageACFind
040246fc l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
0402470c l     O .rodata	0000000a _ZL17pstrUsageACSearch
0402a4a0 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0402a4a8 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0402a4b0 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0402a4b8 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0402a4c0 l     O .rwdata	00000008 _ZL15pstrUsageACStop
04024718 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
04024724 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
04024734 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
04024744 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0402a4c8 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
04024750 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0402475c l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
04024768 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0402a4d0 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
04024774 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
04024780 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
04024790 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
0402479c l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
040247ac l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
040247bc l     O .rodata	0000000a _ZL17pstrUsageACScroll
040247c8 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
040247d4 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0402a4d8 l     O .rwdata	00000007 _ZL14pstrUsageACPan
040247e4 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
040247f0 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
04024800 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0402a4e0 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0402a4e8 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0402a4f0 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0402a4f8 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
04024810 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
0402481c l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0402a500 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
04024828 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
04024834 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
04024840 l     O .rodata	0000000a _ZL17pstrUsageACRotate
0402484c l     O .rodata	0000000a _ZL17pstrUsageACResize
04024858 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
04024864 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
04024870 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
0402487c l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
04024888 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
04024894 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
040248a0 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
040248ac l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
040248bc l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
040248cc l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
040248dc l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
040248ec l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
040248f8 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
04024908 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
04024914 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
04024924 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
04024934 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
04024944 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
04024950 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0402495c l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
04024968 l     O .rodata	0000000b _ZL18pstrUsageACPromote
04024974 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0402a508 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0402a510 l     O .rwdata	00000006 _ZL13pstrUsageACNo
04024980 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0402a518 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0402a520 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
0402498c l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0402a528 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
04024998 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
040249a8 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
040249b4 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
040249c4 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
040249d4 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
040249e4 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0402a530 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0402a538 l     O .rwdata	00000008 _ZL15pstrUsageACLock
040249f0 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0402a540 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
040249fc l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
04024a08 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
04024a18 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
04024a24 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
04024a34 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
04024a40 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
04024a4c l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
04024a58 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
04024a64 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
04024a70 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
04024a7c l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0402a548 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0402a550 l     O .rwdata	00000008 _ZL15pstrUsageACSort
04024a88 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
04024a94 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0402a558 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
04024aa4 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
04024ab0 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
04024abc l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
04024acc l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
04024adc l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
04024ae8 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
04024af4 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
04024b00 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0402a560 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
04024b0c l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
04024b18 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
04024b24 l     O .rodata	00000009 _ZL16pstrUsageACReply
04024b30 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
04024b40 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0402a568 l     O .rwdata	00000007 _ZL15pstrUsageACSend
04024b4c l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0402a570 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0402a578 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
04024b58 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
04024b64 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
04024b70 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
04024b7c l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
04024b88 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
04024b94 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
04024ba0 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
04024bac l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
04024bb8 l     O .rodata	0000000a _ZL17pstrUsageACRename
04024bc4 l     O .rodata	00000009 _ZL16pstrUsageACMerge
04024bd0 l     O .rodata	00000009 _ZL16pstrUsageACSplit
04024bdc l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
04024be8 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
04024bf4 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0402a580 l     O .rwdata	00000004 _ZL12pstrUsagePen
04024c00 l     O .rodata	0000000a _ZL17pstrUsageLightPen
04024c0c l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
04024c18 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
04024c24 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
04024c30 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0402a584 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
04024c40 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0402a58c l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
04024c4c l     O .rodata	00000009 _ZL17pstrUsageArmature
04024c58 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
04024c6c l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0402a594 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0402a59c l     O .rwdata	00000005 _ZL13pstrUsagePuck
0402a5a4 l     O .rwdata	00000007 _ZL15pstrUsageFinger
04024c7c l     O .rodata	0000000a _ZL20pstrUsageTipPressure
04024c88 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
04024c94 l     O .rodata	00000009 _ZL16pstrUsageInRange
0402a5ac l     O .rwdata	00000006 _ZL14pstrUsageTouch
0402a5b4 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0402a5bc l     O .rwdata	00000004 _ZL12pstrUsageTap
0402a5c0 l     O .rwdata	00000005 _ZL16pstrUsageQuality
04024ca0 l     O .rodata	0000000b _ZL18pstrUsageDataValid
04024cac l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
04024cbc l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
04024ccc l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0402a5c8 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0402a5d0 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0402a5d8 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0402a5e0 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
04024cdc l     O .rodata	00000009 _ZL17pstrUsageAltitude
0402a5e8 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0402a5f0 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
04024ce8 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0402a5f8 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0402a600 l     O .rwdata	00000007 _ZL15pstrUsageEraser
04024cf4 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
04024d00 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
04024d10 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
04024d1c l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
04024d2c l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
04024d38 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
04024d48 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
04024d54 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
04024d64 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
04024d70 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
04024d80 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
04024d90 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
04024d9c l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
04024da8 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
04024db4 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
04024dc0 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
04024dcc l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
04024dd8 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
04024de4 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
04024df4 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
04024e04 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0402a608 l     O .rwdata	00000004 _ZL12pstrUsageRow
0402a60c l     O .rwdata	00000004 _ZL15pstrUsageColumn
0402a610 l     O .rwdata	00000005 _ZL13pstrUsageRows
0402a618 l     O .rwdata	00000005 _ZL16pstrUsageColumns
04024e10 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
04024e1c l     O .rodata	00000009 _ZL19pstrUsageCursorMode
04024e28 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
04024e34 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0402a620 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
04024e40 l     O .rodata	00000009 _ZL17pstrUsageFontData
04024e4c l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
04024e58 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
04024e64 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
04024e74 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
04024e84 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
04024e94 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
04024ea0 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
04024eac l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
04024eb8 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
04024ec4 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
04024ed0 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
04024edc l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
04024ee8 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
04024ef4 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
04024f00 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
04024f10 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
04024f20 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
04024f30 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
04024f3c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
04024f48 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
04024f58 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0402a628 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
04024f64 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
04024f74 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
04024f84 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
04024f90 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
04024f9c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
04024fac l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
04024fbc l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
04024fcc l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
04024fdc l     O .rodata	0000000a _ZL17pstrUsageBlitData
04024fe8 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
04024ff4 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
04025000 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
04025010 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
04025020 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
04025030 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
04025040 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0402a630 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0402a638 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
04025050 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0402a640 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0402a648 l     O .rwdata	00000005 _ZL13pstrUsageNext
0402a650 l     O .rwdata	00000005 _ZL13pstrUsageSave
0402a658 l     O .rwdata	00000006 _ZL14pstrUsagePrint
0402505c l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0402a660 l     O .rwdata	00000005 _ZL13pstrUsageCine
04025068 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0402a668 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0402a670 l     O .rwdata	00000006 _ZL14pstrUsageDepth
04025074 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
04025084 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
04025094 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
040250a4 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
040250b0 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
040250bc l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
040250d0 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
040250e4 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
040250f8 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0402510c l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0402511c l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
0402512c l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
04025138 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
04025144 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
04025154 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
0402a676 l     O .rwdata	00000001 _ZL9SPI_MODE0
0402a677 l     O .rwdata	00000001 _ZL9SPI_MODE1
0402a678 l     O .rwdata	00000001 _ZL9SPI_MODE2
0402a679 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
0402a67c l     O .rwdata	00000001 _ZL9SPI_MODE0
0402a67d l     O .rwdata	00000001 _ZL9SPI_MODE1
0402a67e l     O .rwdata	00000001 _ZL9SPI_MODE2
0402a67f l     O .rwdata	00000001 _ZL9SPI_MODE3
0402a680 l     O .rwdata	00000002 _ZL9pstrSpace
0402a684 l     O .rwdata	00000003 _ZL8pstrCRLF
0402a688 l     O .rwdata	00000002 _ZL13pstrSingleTab
0402a68c l     O .rwdata	00000003 _ZL13pstrDoubleTab
0402a690 l     O .rwdata	00000004 _ZL13pstrTripleTab
0402a694 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
04025234 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
04025248 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
04025254 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
04025260 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
0402526c l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
04025278 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
04025288 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0402a69c l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0402a6a4 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0402a6ac l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0402a6b4 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
04025294 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
040252a0 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0402a6b8 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0402a6bc l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
040252ac l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
040252bc l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0402a6c4 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0402a6cc l     O .rwdata	00000006 _ZL18pstrUsagePagePower
040252cc l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0402a6d4 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
040252dc l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0402a6dc l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
040252f4 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0402a6e0 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
04025300 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
0402530c l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0402a6e8 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0402a6f0 l     O .rwdata	00000006 _ZL14pstrUsageMouse
04025318 l     O .rodata	00000009 _ZL17pstrUsageJoystick
04025324 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0402a6f8 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0402a700 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
04025330 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
04025340 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0402a708 l     O .rwdata	00000002 _ZL10pstrUsageX
0402a70c l     O .rwdata	00000002 _ZL10pstrUsageY
0402a710 l     O .rwdata	00000002 _ZL10pstrUsageZ
0402a714 l     O .rwdata	00000003 _ZL11pstrUsageRx
0402a718 l     O .rwdata	00000003 _ZL11pstrUsageRy
0402a71c l     O .rwdata	00000003 _ZL11pstrUsageRz
0402a720 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0402a728 l     O .rwdata	00000005 _ZL13pstrUsageDial
0402a730 l     O .rwdata	00000006 _ZL14pstrUsageWheel
04025354 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
04025360 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
0402536c l     O .rodata	0000000b _ZL18pstrUsageByteCount
04025378 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0402a738 l     O .rwdata	00000006 _ZL14pstrUsageStart
0402a740 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0402a744 l     O .rwdata	00000003 _ZL11pstrUsageVx
0402a748 l     O .rwdata	00000003 _ZL11pstrUsageVy
0402a74c l     O .rwdata	00000003 _ZL11pstrUsageVz
0402a750 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0402a758 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0402a760 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0402a768 l     O .rwdata	00000004 _ZL12pstrUsageVno
04025388 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
04025398 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
040253a4 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
040253b0 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
040253c0 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
040253cc l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
040253d8 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
040253ec l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
040253fc l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
0402540c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
0402541c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
0402542c l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
0402543c l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
0402544c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
0402545c l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
04025468 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
04025478 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
0402548c l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
040254a0 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
040254ac l     O .rodata	0000000b _ZL17pstrUsageDPadDown
040254b8 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
040254c4 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
040254d0 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
040254dc l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
040254e8 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
040254f4 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
04025500 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
0402550c l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
04025518 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
04025524 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
04025534 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
04025540 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
04025550 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
04025560 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
04025570 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
04025580 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
04025590 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
040255a8 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
040255c0 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
040255d8 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
040255e8 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
040255f8 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
04025608 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
04025618 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
04025628 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
04025638 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
04025648 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
04025658 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
04025668 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
04025678 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
04025690 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
040256a0 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
040256b4 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
040256c4 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
040256d0 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
040256dc l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
040256e8 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0402a76c l     O .rwdata	00000008 _ZL16pstrUsageAileron
040256f4 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
04025704 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
04025718 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
0402572c l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
0402573c l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
0402574c l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
04025758 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
0402576c l     O .rodata	00000009 _ZL17pstrUsageElevator
04025778 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0402a774 l     O .rwdata	00000007 _ZL15pstrUsageRudder
04025788 l     O .rodata	00000009 _ZL17pstrUsageThrottle
04025794 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
040257a0 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
040257b0 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
040257c0 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0402a77c l     O .rwdata	00000008 _ZL16pstrUsageTrigger
040257cc l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
040257d8 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
040257e4 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0402a784 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0402a78c l     O .rwdata	00000006 _ZL14pstrUsageBrake
0402a794 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0402a79c l     O .rwdata	00000008 _ZL16pstrUsageShifter
040257f0 l     O .rodata	00000009 _ZL17pstrUsageSteering
040257fc l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
04025808 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
04025814 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0402a7a4 l     O .rwdata	00000008 _ZL16pstrUsageBallast
04025820 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
04025830 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
0402583c l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
04025848 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0402a7ac l     O .rwdata	00000005 _ZL13pstrUsageBelt
04025854 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0402a7b4 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0402a7bc l     O .rwdata	00000006 _ZL14pstrUsageGlove
04025860 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
0402586c l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
04025878 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
04025884 l     O .rodata	0000000b _ZL19pstrUsageOculometer
0402a7c4 l     O .rwdata	00000005 _ZL13pstrUsageVest
04025890 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
0402589c l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
040258a8 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
040258b8 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
040258c8 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
040258d4 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
040258e0 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0402a7cc l     O .rwdata	00000004 _ZL12pstrUsageOar
0402a7d0 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0402a7d8 l     O .rwdata	00000005 _ZL13pstrUsageRate
040258ec l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
040258f8 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
04025908 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
04025918 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
04025928 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
04025934 l     O .rodata	0000000b _ZL18pstrUsageStickType
04025940 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0402a7e0 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0402a7e8 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0402a7f0 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0402a7f8 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0402a800 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0402a808 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0402a810 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0402a818 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0402a820 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0402a828 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0402a830 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0402a838 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
0402594c l     O .rodata	0000000b _ZL18pstrUsageSandWedge
04025958 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
04025964 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0402a840 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0402a848 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0402a850 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0402a858 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0402a860 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
04025970 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
04025980 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0402a868 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0402a870 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
0402598c l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
0402599c l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
040259ac l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
040259bc l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
040259cc l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
040259dc l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
040259ec l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
040259fc l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
04025a0c l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0402a874 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
04025a1c l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0402a87c l     O .rwdata	00000005 _ZL13pstrUsageBump
04025a2c l     O .rodata	00000009 _ZL16pstrUsageNewGame
04025a38 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0402a884 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
04025a44 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
04025a50 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0402a88c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
04025a5c l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
04025a6c l     O .rodata	0000000a _ZL17pstrUsageGunBurst
04025a78 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
04025a84 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
04025a90 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
04025aa4 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
04025ab4 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
04025ac4 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
04025ad0 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
04025adc l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
04025af4 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
04025b08 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
04025b20 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
04025b34 l     O .rodata	00000009 _ZL16pstrUsageNumLock
04025b40 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
04025b4c l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0402a894 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0402a89c l     O .rwdata	00000005 _ZL13pstrUsageKana
0402a8a4 l     O .rwdata	00000004 _ZL14pstrUsagePower
0402a8a8 l     O .rwdata	00000006 _ZL14pstrUsageShift
0402a8b0 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0402a8b4 l     O .rwdata	00000005 _ZL13pstrUsageMute
04025b58 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
04025b64 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
04025b74 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0402a8bc l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
04025b84 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
04025b94 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0402a8c4 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0402a8cc l     O .rwdata	00000007 _ZL15pstrUsageStereo
04025ba0 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
04025bb4 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0402a8d4 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0402a8d8 l     O .rwdata	00000004 _ZL12pstrUsageCLV
04025bc0 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
04025bd4 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0402a8dc l     O .rwdata	00000005 _ZL13pstrUsageRing
04025be0 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
04025bec l     O .rodata	0000000a _ZL17pstrUsageDataMode
0402a8e4 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0402a8ec l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0402a8f4 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0402a8fc l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
04025bf8 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0402a904 l     O .rwdata	00000005 _ZL13pstrUsageHold
0402a90c l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
04025c04 l     O .rodata	00000009 _ZL17pstrUsageCoverage
04025c10 l     O .rodata	0000000b _ZL18pstrUsageNightMode
04025c1c l     O .rodata	0000000b _ZL18pstrUsageSendCalls
04025c28 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0402a910 l     O .rwdata	00000005 _ZL19pstrUsageConference
04025c34 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0402a918 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0402a920 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0402a928 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
04025c40 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0402a930 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0402a938 l     O .rwdata	00000006 _ZL14pstrUsageReady
04025c4c l     O .rodata	0000000a _ZL17pstrUsagePaperOut
04025c58 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0402a940 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0402a948 l     O .rwdata	00000004 _ZL16pstrUsageForward
0402a94c l     O .rwdata	00000004 _ZL16pstrUsageReverse
0402a950 l     O .rwdata	00000005 _ZL13pstrUsageStop
0402a958 l     O .rwdata	00000007 _ZL15pstrUsageRewind
04025c64 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0402a960 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0402a968 l     O .rwdata	00000006 _ZL14pstrUsagePause
0402a970 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0402a974 l     O .rwdata	00000006 _ZL14pstrUsageError
04025c70 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
04025c80 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
04025c94 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0402a97c l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
04025cac l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
04025cb8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
04025cc8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0402a984 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
04025cd8 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
04025ce8 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
04025cfc l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
04025d10 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
04025d24 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
04025d38 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0402a98c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
04025d48 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
04025d54 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0402a994 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
04025d60 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
04025d6c l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0402a99c l     O .rwdata	00000006 _ZL14pstrUsagePhone
04025d7c l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
04025d88 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0402a9a4 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0402a9ac l     O .rwdata	00000008 _ZL16pstrUsageHeadset
04025d94 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
04025da0 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0402a9b4 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0402a9bc l     O .rwdata	00000006 _ZL14pstrUsageFlash
0402a9c4 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0402a9cc l     O .rwdata	00000007 _ZL15pstrUsageRedial
04025dac l     O .rodata	00000009 _ZL17pstrUsageTransfer
0402a9d4 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0402a9dc l     O .rwdata	00000005 _ZL13pstrUsagePark
04025db8 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
04025dc4 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0402a9e4 l     O .rwdata	00000005 _ZL13pstrUsageLine
04025dd0 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
04025ddc l     O .rodata	0000000a _ZL19pstrUsageRingEnable
04025de8 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
04025df4 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
04025e00 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0402a9ec l     O .rwdata	00000005 _ZL13pstrUsageSend
04025e0c l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
04025e18 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
04025e24 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
04025e30 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
04025e3c l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
04025e48 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0402a9f4 l     O .rwdata	00000004 _ZL16pstrUsageMessage
04025e58 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
04025e68 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
04025e7c l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
04025e90 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
04025ea4 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
04025eb8 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
04025ec8 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
04025ed8 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
04025eec l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
04025efc l     O .rodata	0000000d _ZL20pstrUsageReorderTone
04025f0c l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
04025f1c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
04025f28 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
04025f34 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
04025f40 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0402a9f8 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0402aa00 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0402aa04 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0402aa08 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0402aa0c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0402aa10 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0402aa14 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0402aa18 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0402aa1c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0402aa20 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0402aa24 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0402aa28 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0402aa2c l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0402aa30 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0402aa34 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0402aa38 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0402aa3c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
04025f54 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
04025f64 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
04025f70 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
04025f7c l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0402aa40 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0402aa44 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0402aa4c l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0402aa54 l     O .rwdata	00000006 _ZL14pstrUsageReset
0402aa5c l     O .rwdata	00000006 _ZL14pstrUsageSleep
04025f88 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
04025f94 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0402aa64 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
04025fa0 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0402aa6c l     O .rwdata	00000005 _ZL13pstrUsageMenu
04025fac l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0402aa74 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
04025fb8 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
04025fc4 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
04025fd0 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
04025fdc l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
04025fe8 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
04025ff8 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
04026008 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
04026014 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
04026020 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0402aa7c l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
04026030 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
04026040 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0402aa84 l     O .rwdata	00000006 _ZL14pstrUsageStill
0402aa8c l     O .rwdata	00000004 _ZL18pstrUsageSelection
0402604c l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
04026058 l     O .rodata	0000000a _ZL17pstrUsageModeStep
04026064 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
04026070 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
04026080 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0402aa90 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0402aa98 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
0402608c l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
0402609c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
040260a8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
040260b4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
040260c0 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
040260cc l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
040260d8 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
040260e4 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
040260f4 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
04026100 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
0402610c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
04026118 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0402aaa0 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0402aaa8 l     O .rwdata	00000005 _ZL13pstrUsageHelp
04026128 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
04026138 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
04026144 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
04026150 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
04026160 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
04026170 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0402aab0 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0402aab8 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
04026180 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0402aac0 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0402aac8 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0402aad0 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0402aad8 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0402aae0 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
0402618c l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
04026198 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0402aae8 l     O .rwdata	00000006 _ZL14pstrUsageEject
0402aaf0 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
040261a4 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
040261b0 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
040261bc l     O .rodata	00000009 _ZL17pstrUsageTracking
040261c8 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
040261d4 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0402aaf8 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
040261e0 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0402ab00 l     O .rwdata	00000005 _ZL13pstrUsageMark
040261ec l     O .rodata	00000009 _ZL18pstrUsageClearMark
040261f8 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
04026204 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
04026210 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
04026220 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
04026234 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
04026244 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
04026254 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
04026260 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
0402626c l     O .rodata	0000000b _ZL18pstrUsageStopEject
04026278 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
04026284 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0402ab08 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0402ab0c l     O .rwdata	00000008 _ZL16pstrUsageBalance
0402ab14 l     O .rwdata	00000005 _ZL13pstrUsageBass
0402ab1c l     O .rwdata	00000007 _ZL15pstrUsageTreble
04026290 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
0402629c l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0402ab24 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0402ab2c l     O .rwdata	00000004 _ZL12pstrUsageMPX
0402ab30 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0402ab38 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0402ab40 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
040262a8 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
040262b4 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
040262c0 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
040262cc l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0402ab48 l     O .rwdata	00000005 _ZL13pstrUsageSlow
040262d8 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
040262e4 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
040262f0 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
040262fc l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
0402630c l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
0402631c l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
04026328 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
04026334 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
04026340 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0402ab50 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0402ab58 l     O .rwdata	00000007 _ZL15pstrUsageMotion
0402634c l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
04026358 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0402ab60 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
04026364 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
04026374 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
04026384 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
04026390 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
0402639c l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
040263a8 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0402ab68 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0402ab70 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
040263b4 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
040263c0 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
040263cc l     O .rodata	00000009 _ZL21pstrUsageChannelFront
040263d8 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0402ab78 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
040263e8 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
040263f4 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0402ab80 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0402ab88 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0402ab90 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
04026404 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
04026410 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0402641c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
04026428 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
04026434 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
04026444 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
04026458 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
04026464 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
04026478 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
04026488 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
04026494 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
040264a4 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
040264b4 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
040264c4 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
040264d0 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
040264e0 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
040264ec l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
040264fc l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0402650c l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0402651c l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0402652c l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
04026540 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0402ab98 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
04026550 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
04026564 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
04026578 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
04026588 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
04026598 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
040265a8 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
040265b4 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
040265c0 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
040265cc l     O .rodata	00000009 _ZL16pstrUsageALLogon
040265d8 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
040265e4 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
040265f4 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0402660c l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
04026618 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
04026624 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
04026630 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0402663c l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
04026648 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
04026654 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
04026668 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0402aba0 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
04026674 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0402aba8 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
04026680 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
0402668c l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
0402669c l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
040266a8 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
040266b8 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
040266c8 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
040266d8 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
040266e4 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
040266f0 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
040266fc l     O .rodata	00000009 _ZL16pstrUsageALClock
04026708 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
04026718 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
04026724 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
04026730 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0402673c l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
04026748 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0402675c l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
0402676c l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
04026778 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
0402678c l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
04026798 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
040267a8 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
040267bc l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
040267d0 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
040267e4 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
040267f4 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
0402680c l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
04026820 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
04026830 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
04026840 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0402abb0 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0402abb8 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
04026854 l     O .rodata	00000009 _ZL16pstrUsageACClose
0402abc0 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0402abc8 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0402abd0 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0402abd8 l     O .rwdata	00000008 _ZL15pstrUsageACSave
04026860 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0402abe0 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0402abe8 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0402abf0 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0402abf8 l     O .rwdata	00000007 _ZL14pstrUsageACCut
0402686c l     O .rodata	00000009 _ZL16pstrUsageACPaste
04026878 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0402ac00 l     O .rwdata	00000008 _ZL15pstrUsageACFind
04026884 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
04026894 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0402ac08 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0402ac10 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0402ac18 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0402ac20 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0402ac28 l     O .rwdata	00000008 _ZL15pstrUsageACStop
040268a0 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
040268ac l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
040268bc l     O .rodata	0000000d _ZL19pstrUsageACNextLink
040268cc l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0402ac30 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
040268d8 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
040268e4 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
040268f0 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0402ac38 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
040268fc l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
04026908 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
04026918 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
04026924 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
04026934 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
04026944 l     O .rodata	0000000a _ZL17pstrUsageACScroll
04026950 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
0402695c l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0402ac40 l     O .rwdata	00000007 _ZL14pstrUsageACPan
0402696c l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
04026978 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
04026988 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0402ac48 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0402ac50 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0402ac58 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0402ac60 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
04026998 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
040269a4 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0402ac68 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
040269b0 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
040269bc l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
040269c8 l     O .rodata	0000000a _ZL17pstrUsageACRotate
040269d4 l     O .rodata	0000000a _ZL17pstrUsageACResize
040269e0 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
040269ec l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
040269f8 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
04026a04 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
04026a10 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
04026a1c l     O .rodata	0000000b _ZL20pstrUsageACFontColor
04026a28 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
04026a34 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
04026a44 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
04026a54 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
04026a64 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
04026a74 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
04026a80 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
04026a90 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
04026a9c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
04026aac l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
04026abc l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
04026acc l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
04026ad8 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
04026ae4 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
04026af0 l     O .rodata	0000000b _ZL18pstrUsageACPromote
04026afc l     O .rodata	0000000a _ZL17pstrUsageACDemote
0402ac70 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0402ac78 l     O .rwdata	00000006 _ZL13pstrUsageACNo
04026b08 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0402ac80 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0402ac88 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
04026b14 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0402ac90 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
04026b20 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
04026b30 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
04026b3c l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
04026b4c l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
04026b5c l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
04026b6c l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0402ac98 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0402aca0 l     O .rwdata	00000008 _ZL15pstrUsageACLock
04026b78 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0402aca8 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
04026b84 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
04026b90 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
04026ba0 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
04026bac l     O .rodata	0000000d _ZL22pstrUsageACViewComment
04026bbc l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
04026bc8 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
04026bd4 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
04026be0 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
04026bec l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
04026bf8 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
04026c04 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0402acb0 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0402acb8 l     O .rwdata	00000008 _ZL15pstrUsageACSort
04026c10 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
04026c1c l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0402acc0 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
04026c2c l     O .rodata	0000000b _ZL19pstrUsageACSetClock
04026c38 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
04026c44 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
04026c54 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
04026c64 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
04026c70 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
04026c7c l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
04026c88 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0402acc8 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
04026c94 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
04026ca0 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
04026cac l     O .rodata	00000009 _ZL16pstrUsageACReply
04026cb8 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
04026cc8 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0402acd0 l     O .rwdata	00000007 _ZL15pstrUsageACSend
04026cd4 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0402acd8 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0402ace0 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
04026ce0 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
04026cec l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
04026cf8 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
04026d04 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
04026d10 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
04026d1c l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
04026d28 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
04026d34 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
04026d40 l     O .rodata	0000000a _ZL17pstrUsageACRename
04026d4c l     O .rodata	00000009 _ZL16pstrUsageACMerge
04026d58 l     O .rodata	00000009 _ZL16pstrUsageACSplit
04026d64 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
04026d70 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
04026d7c l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0402ace8 l     O .rwdata	00000004 _ZL12pstrUsagePen
04026d88 l     O .rodata	0000000a _ZL17pstrUsageLightPen
04026d94 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
04026da0 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
04026dac l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
04026db8 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0402acec l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
04026dc8 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0402acf4 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
04026dd4 l     O .rodata	00000009 _ZL17pstrUsageArmature
04026de0 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
04026df4 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0402acfc l     O .rwdata	00000007 _ZL15pstrUsageStylus
0402ad04 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0402ad0c l     O .rwdata	00000007 _ZL15pstrUsageFinger
04026e04 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
04026e10 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
04026e1c l     O .rodata	00000009 _ZL16pstrUsageInRange
0402ad14 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0402ad1c l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0402ad24 l     O .rwdata	00000004 _ZL12pstrUsageTap
0402ad28 l     O .rwdata	00000005 _ZL16pstrUsageQuality
04026e28 l     O .rodata	0000000b _ZL18pstrUsageDataValid
04026e34 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
04026e44 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
04026e54 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0402ad30 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0402ad38 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0402ad40 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0402ad48 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
04026e64 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0402ad50 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0402ad58 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
04026e70 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0402ad60 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0402ad68 l     O .rwdata	00000007 _ZL15pstrUsageEraser
04026e7c l     O .rodata	00000009 _ZL19pstrUsageTabletPick
04026e88 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
04026e98 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
04026ea4 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
04026eb4 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
04026ec0 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
04026ed0 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
04026edc l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
04026eec l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
04026ef8 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
04026f08 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
04026f18 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
04026f24 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
04026f30 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
04026f3c l     O .rodata	0000000a _ZL20pstrUsageDisplayData
04026f48 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
04026f54 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
04026f60 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
04026f6c l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
04026f7c l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
04026f8c l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0402ad70 l     O .rwdata	00000004 _ZL12pstrUsageRow
0402ad74 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0402ad78 l     O .rwdata	00000005 _ZL13pstrUsageRows
0402ad80 l     O .rwdata	00000005 _ZL16pstrUsageColumns
04026f98 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
04026fa4 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
04026fb0 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
04026fbc l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0402ad88 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
04026fc8 l     O .rodata	00000009 _ZL17pstrUsageFontData
04026fd4 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
04026fe0 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
04026fec l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
04026ffc l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0402700c l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0402701c l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
04027028 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
04027034 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
04027040 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0402704c l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
04027058 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
04027064 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
04027070 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0402707c l     O .rodata	0000000a _ZL22pstrUsageAttributeData
04027088 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
04027098 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
040270a8 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
040270b8 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
040270c4 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
040270d0 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
040270e0 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0402ad90 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
040270ec l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
040270fc l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0402710c l     O .rodata	00000009 _ZL20pstrUsagePaletteData
04027118 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
04027124 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
04027134 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
04027144 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
04027154 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
04027164 l     O .rodata	0000000a _ZL17pstrUsageBlitData
04027170 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0402717c l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
04027188 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
04027198 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
040271a8 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
040271b8 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
040271c8 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0402ad98 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0402ada0 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
040271d8 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0402ada8 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0402adb0 l     O .rwdata	00000005 _ZL13pstrUsageNext
0402adb8 l     O .rwdata	00000005 _ZL13pstrUsageSave
0402adc0 l     O .rwdata	00000006 _ZL14pstrUsagePrint
040271e4 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0402adc8 l     O .rwdata	00000005 _ZL13pstrUsageCine
040271f0 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0402add0 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0402add8 l     O .rwdata	00000006 _ZL14pstrUsageDepth
040271fc l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0402720c l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0402721c l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0402722c l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
04027238 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
04027244 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
04027258 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0402726c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
04027280 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
04027294 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
040272a4 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
040272b4 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
040272c0 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
040272cc l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
040272dc l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
040272ea l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
040272fa l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0400b024 l     F .text	00000054 _Z41__static_initialization_and_destruction_0ii
0400b078 l     F .text	00000030 _GLOBAL__sub_I_rcode
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0400c228 l     F .text	000000a4 _ZL21size_of_encoded_valueh
0400c2cc l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0400c4d8 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0400c52c l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0400c5b8 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0400c6ec l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0400c774 l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0400c9a0 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0400d278 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0400d560 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
0402e150 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0400d618 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0400d7c8 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
0402e03c l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0400e638 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
0402e044 l     O .bss	00000004 fc_static
0400e750 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0400e810 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
04027c74 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
04027a92 l     O .rodata	00000010 zeroes.4404
04011ff0 l     F .text	000000bc __sbprintf
04027aa2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04012200 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04013d58 l     F .text	00000008 __fp_unlock
04013d6c l     F .text	0000019c __sinit.part.1
04013f08 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
040284c0 l     O .rwdata	00000020 lc_ctype_charset
040284a0 l     O .rwdata	00000020 lc_message_charset
040284e0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
04027ad0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
04016998 l     F .text	000000fc __sprint_r.part.0
04027bf4 l     O .rodata	00000010 zeroes.4349
04017fd4 l     F .text	000000bc __sbprintf
04027c04 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0401bddc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0401bef0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0401bf50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0401c064 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0401c14c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0401c2b8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0401c3a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0401c580 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0402ae38 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0401c7f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0401c8d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401ca14 l     F .text	00000034 alt_dev_reg
040286c0 l     O .rwdata	00000038 i2c_0
040286f8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0401caf4 l     F .text	00000110 optional_irq_callback
0401cc54 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0401e930 l     F .text	0000020c altera_avalon_jtag_uart_irq
0401eb3c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0401f370 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401f708 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401fbf8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0401fd58 l     F .text	0000003c alt_get_errno
0401fd94 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0402e07c g     O .bss	00000004 alt_instruction_exception_handler
0400d720 g     F .text	00000028 __cxa_free_exception
04020d68  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0400f738 g     F .text	00000018 putchar
0400bd7c g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
04015fa4 g     F .text	00000074 _mprec_log10
04004f90  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0400c1c8 g     F .text	00000018 _ZSt10unexpectedv
04016090 g     F .text	0000008c __any_on
040186e0 g     F .text	00000054 _isatty_r
04027adc g     O .rodata	00000028 __mprec_tinytens
0401c4bc g     F .text	0000007c alt_main
0400f750 g     F .text	000000c0 _puts_r
04000e54 g     F .text	00000058 _ZN3USBC1Ev
0402e188 g     O .bss	00000100 alt_irq
0400d8bc g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
04009264 g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
04018734 g     F .text	00000060 _lseek_r
0400e8cc g     F .text	00000020 .hidden _Unwind_GetIPInfo
0402ae50 g       *ABS*	00000000 __flash_rwdata_start
040069f8 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0401a818 g     F .text	00000088 .hidden __eqdf2
04004f90  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
0400301c g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0400d34c g     F .text	00000084 __cxa_rethrow
0400e858 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0400c204 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
0400e8bc g     F .text	00000010 .hidden _Unwind_GetIP
0402e288 g       *ABS*	00000000 __alt_heap_start
04008ba4  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0400fb1c g     F .text	0000005c _kill_r
04006d54 g     F .text	00000188 _ZN9USBH_MIDIC2EP3USB
0400f6f4 g     F .text	0000003c printf
04020d8c  w    O .rodata	0000002c _ZTV15USBDeviceConfig
040187f4 g     F .text	0000009c _wcrtomb_r
0400f8e4 g     F .text	00000084 _signal_r
04006780  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
04016934 g     F .text	0000005c __sseek
040140b8 g     F .text	00000010 __sinit
04018090 g     F .text	00000140 __swbuf_r
040098d8 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0400d79c g     F .text	0000002c __cxa_free_dependent_exception
0400b0d0 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
04004f30  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
04014b8c g     F .text	0000007c _setlocale_r
040276d8  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
04013f10 g     F .text	00000078 __sfmoreglue
0401d34c g     F .text	000000a8 alt_avalon_i2c_rx_read
0401c55c g     F .text	00000024 __malloc_unlock
0400d8bc g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
040084f4 g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0400bb04 g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04008c8c  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
0400274c g     F .text	00000710 _ZN3USB11ConfiguringEhhb
0400d540 g     F .text	00000020 _ZSt18uncaught_exceptionv
0400aef4 g     F .text	000000f8 _Z9print_hexii
0401e564 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
040024bc g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
04009cac g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0402e038 g     O .bss	00000001 laststate
0400bdf8 g     F .text	00000020 __cxa_deleted_virtual
0401d0d0 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
0400348c  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
04008d50 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
040096e8 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
04014f08 g     F .text	0000015c memmove
0400649c  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0400d894 g     F .text	00000004 _ZNSt9exceptionD2Ev
040140a0 g     F .text	00000018 _cleanup
0401ddb4 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
04015064 g     F .text	000000a8 _Balloc
0400e4d8 g     F .text	00000070 .hidden __fixsfsi
04004590 g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0400ae9c g     F .text	00000058 _Z6halt55v
0401a8a0 g     F .text	000000dc .hidden __gtdf2
04004654 g     F .text	000000f8 _ZN7XBOXONE4PollEv
0402790c  w    O .rodata	00000014 _ZTVSt13bad_exception
040203e8 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
0401c830 g     F .text	00000078 times
04008c0c  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0400e908 g     F .text	00000008 .hidden _Unwind_GetRegionStart
04029774  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
04000020 g       *ABS*	00000000 __flash_exceptions_start
04008478 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
04000ae0 g     F .text	0000003c _ZN6SPI_SS3SetEh
0400545c  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
04018684 g     F .text	0000005c _fstat_r
040093b4 g     F .text	0000008c _ZN8MAX3421e5regWrEhh
04001160 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
0402e054 g     O .bss	00000004 errno
040061dc g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
040168b0 g     F .text	00000008 __seofread
04008f60 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
0400eae4 g     F .text	00000074 .hidden _Unwind_Backtrace
0402e068 g     O .bss	00000004 alt_argv
04003c1c g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
04031758 g       *ABS*	00000000 _gp
0401c8a8 g     F .text	00000030 usleep
0401e5a8 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0400dff4 g     F .text	000004e4 .hidden __subsf3
04007e04 g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
04029f0c  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0401c044 g     F .text	00000020 getpid
0400d048 g     F .text	00000230 __cxa_call_unexpected
0400d3d0 g     F .text	00000008 __cxa_get_exception_ptr
0401d260 g     F .text	00000044 alt_avalon_i2c_is_busy
04028540 g     O .rwdata	00000180 alt_fd_list
04009110 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
04020cd8  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
04006d54 g     F .text	00000188 _ZN9USBH_MIDIC1EP3USB
04000dd4 g     F .text	00000058 _Z5delaym
04004d68 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0400f730 g     F .text	00000008 _putchar_r
0400e9f8 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
0401d004 g     F .text	000000cc alt_avalon_i2c_master_config_set
0400235c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0400e888 g     F .text	00000018 .hidden _Unwind_GetCFA
0400c1e0 g     F .text	00000014 _ZSt13set_terminatePFvvE
0401f8a8 g     F .text	00000090 alt_find_dev
04020ccc  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
0400fcf0 g     F .text	00000008 _times_r
0400f454 g     F .text	00000148 memcpy
04000ed8 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
04006564  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
04000b1c g     F .text	0000003c _ZN6SPI_SS5ClearEh
0400d748 g     F .text	00000054 __cxa_allocate_dependent_exception
04013d60 g     F .text	0000000c _cleanup_r
0400be90 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0401bc58 g     F .text	000000dc .hidden __floatsidf
04020d80  w    O .rodata	0000000c _ZTV13USBReadParser
0401fcdc g     F .text	0000007c alt_io_redirect
0401a97c g     F .text	000000f4 .hidden __ltdf2
040052b0  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
040006bc g     F .text	00000300 initialize_sgtl5000
04000efc g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
04020a14 g       *ABS*	00000000 __DTOR_END__
0400bea8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0401dbf4 g     F .text	000001c0 alt_avalon_i2c_master_transmit
0400f810 g     F .text	00000014 puts
04027760  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
040205d8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04007e8c g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
04009198 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
040167e8 g     F .text	00000074 __fpclassifyd
04015f00 g     F .text	000000a4 __ratio
04017fb8 g     F .text	0000001c __vfiprintf_internal
04007908 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
0401ed34 g     F .text	0000021c altera_avalon_jtag_uart_read
0400ec20 g     F .text	00000014 malloc
0400f6c4 g     F .text	00000030 _printf_r
080012a0 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0400da24 g     F .text	00000064 .hidden __udivsi3
0401c0a0 g     F .text	000000ac isatty
0400f968 g     F .text	000000bc _raise_r
04009354 g     F .text	0000003c _ZN8MAX3421eC2Ev
04027b2c g     O .rodata	000000c8 __mprec_tens
04014c08 g     F .text	0000000c __locale_charset
04000e54 g     F .text	00000058 _ZN3USBC2Ev
04005268  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
0401ce70 g     F .text	00000098 alt_avalon_i2c_enable
0402e050 g     O .bss	00000004 __malloc_top_pad
0400fb78 g     F .text	00000004 _getpid_r
0401e498 g     F .text	00000068 alt_avalon_i2c_int_disable
0402e034 g     O .bss	00000001 usb_task_state
0402ae18 g     O .rwdata	00000004 __mb_cur_max
04014c38 g     F .text	0000000c _localeconv_r
0400b394 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
040045c0 g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
04006edc g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
04015498 g     F .text	0000003c __i2b
0401453c g     F .text	000004c8 __sfvwrite_r
0400c028 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0400fa24 g     F .text	000000a8 __sigtramp_r
040081c0 g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
04003544  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
0400f824 g     F .text	00000054 _sbrk_r
040277a8  w    O .rodata	00000020 _ZTVSt9type_info
04005360  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
04008ff8 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
04018794 g     F .text	00000060 _read_r
0400d89c g     F .text	0000000c _ZNKSt9exception4whatEv
0400026c g     F .text	000000b4 SGTL5000_Reg_Rd
0402ae30 g     O .rwdata	00000004 alt_max_fd
04006850 g     F .text	00000050 _Z9E_Notifycci
04008300 g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
04018378 g     F .text	000000f0 _fclose_r
04013d28 g     F .text	00000030 fflush
0402e04c g     O .bss	00000004 __malloc_max_sbrked_mem
04009660 g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
0401dfc0 g     F .text	00000210 alt_avalon_i2c_master_receive
04023068  w    O .rodata	0000000b _ZTS9USBH_MIDI
0401959c g     F .text	000008ac .hidden __adddf3
0402770c  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
0400538c  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
04008a58 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
04015ca8 g     F .text	0000010c __b2d
04018fd8 g     F .text	000005c4 .hidden __umoddi3
0401c3e0 g     F .text	000000dc lseek
0400658c  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0400beec g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
040069a8 g     F .text	00000028 _Z8E_Notifyhi
0400bdd4 g     F .text	00000004 _ZdlPv
0401e500 g     F .text	00000064 alt_avalon_i2c_int_enable
0402ae08 g     O .rwdata	00000004 _global_impure_ptr
0400b3a4 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
04016284 g     F .text	00000564 _realloc_r
0402e288 g       *ABS*	00000000 __bss_end
0401fb08 g     F .text	000000f0 alt_iic_isr_register
040202e0 g     F .text	00000108 alt_tick
04000aac g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0400e840 g     F .text	00000018 .hidden _Unwind_SjLj_Register
040189dc g     F .text	000005fc .hidden __udivdi3
0401e3c0 g     F .text	00000058 alt_avalon_i2c_int_status_get
040185e0 g     F .text	00000024 _fputwc_r
04027b04 g     O .rodata	00000028 __mprec_bigtens
0401527c g     F .text	00000104 __s2b
0400ebbc g     F .text	00000018 abort
0401bd34 g     F .text	000000a8 .hidden __floatunsidf
04022fac  w    O .rodata	00000014 _ZTS17MouseReportParser
040159e8 g     F .text	00000060 __mcmp
04000e2c g     F .text	00000028 _Z6millisv
04008cc8  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
04003e00 g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0400d48c g     F .text	000000b4 __cxa_end_catch
0400908c g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
040140d8 g     F .text	00000018 __fp_lock_all
04020dc4  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
0401fabc g     F .text	0000004c alt_ic_irq_enabled
0400d898 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
04003810  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
0400653c  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
04020244 g     F .text	0000009c alt_alarm_stop
04000a70 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
04022ff4  w    O .rodata	0000003c _ZTV9USBH_MIDI
04000f30 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
0401ccf0 g     F .text	00000054 alt_avalon_i2c_register_callback
0402e070 g     O .bss	00000004 alt_irq_active
0401cd44 g     F .text	000000ec alt_avalon_i2c_init
0400c1a0 g     F .text	00000018 _ZSt9terminatev
040000fc g     F .exceptions	000000d4 alt_irq_handler
04028518 g     O .rwdata	00000028 alt_dev_null
0400b3d8 g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
040067b4  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0400d8c4 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
0400560c  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
040039bc  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
040032e4 g     F .text	00000084 _ZN3USB7setConfEhhh
04008b9c g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
04027804  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
04001044 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
0401f6e8 g     F .text	00000020 alt_dcache_flush_all
04015380 g     F .text	00000068 __hi0bits
04023074  w    O .rodata	0000000c _ZTI14MidiDescParser
040098b0 g     F .text	00000028 _Z10Vbus_powerb
0402adf0  w    O .rwdata	00000008 _ZTISt9exception
0401bbd8 g     F .text	00000080 .hidden __fixdfsi
04022fc0  w    O .rodata	00000012 _ZTS15HIDReportParser
0400b0a8  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
04001990 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0400aa4c g     F .text	00000450 _Z9test_loopv
0402ae50 g       *ABS*	00000000 __ram_rwdata_end
0400bd78 g     F .text	00000004 _ZNSt9type_infoD1Ev
0402ae28 g     O .rwdata	00000008 alt_dev_list
0400d8c4 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0401c914 g     F .text	00000100 write
0401611c g     F .text	000000a0 _putc_r
04009d20 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
0401d680 g     F .text	0000004c alt_avalon_i2c_check_arblost
0400bd8c g     F .text	00000004 _ZNSt9type_infoD0Ev
04005484  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0400db08 g     F .text	000000bc .hidden __gtsf2
0400afec g     F .text	00000038 _Z13press_any_keyv
0401e45c g     F .text	0000003c alt_avalon_i2c_int_clear
04008d24  w    F .text	0000002c _Z10D_PrintHexItEvT_i
04020cb8  w    O .rodata	00000014 _ZTV11AddressPool
04027c74 g       *ABS*	00000000 __ram_rodata_end
0401bf8c g     F .text	000000b8 fstat
040033c0  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0401c188 g     F .text	00000130 kill
0400682c  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0401a97c g     F .text	000000f4 .hidden __ledf2
04020dec  w    O .rodata	00000020 _ZTI7XBOXONE
0402ae3c g     O .rwdata	00000008 alt_avalon_i2c_list
040051f0  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
04022f06 g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
04015760 g     F .text	00000140 __pow5mult
040057d8  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
04016aac g     F .text	0000150c ___vfiprintf_internal_r
0402e060 g     O .bss	00000004 __nlocale_changed
0400da88 g     F .text	00000058 .hidden __umodsi3
0400bd84 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
04004fcc  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
04002e5c g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0400c1f4 g     F .text	00000010 _ZSt13get_terminatev
0402e288 g       *ABS*	00000000 end
04020d74  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
040055d8  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
04009574 g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
0400674c  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0400eacc g     F .text	00000018 .hidden _Unwind_DeleteException
0401e870 g     F .text	000000c0 altera_avalon_jtag_uart_init
04006514  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0401ce30 g     F .text	00000040 alt_avalon_i2c_open
04022f1c g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
0400bf58 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0400b394 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
04029f00 g     O .rwdata	00000004 UsbDEBUGlvl
04020a0c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0401d808 g     F .text	000000e8 alt_avalon_i2c_master_tx
0401f3e8 g     F .text	0000007c alt_avalon_timer_sc_init
0400eb58 g     F .text	00000064 .hidden __clzsi2
0400be18 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0401ef50 g     F .text	00000224 altera_avalon_jtag_uart_write
040140c8 g     F .text	00000004 __sfp_lock_acquire
04027894  w    O .rodata	00000012 _ZTSSt13bad_exception
04014e24 g     F .text	000000e4 memchr
0400fcf8 g     F .text	000022dc ___vfprintf_internal_r
04004f30  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
0401422c g     F .text	00000310 _free_r
0401ffdc g     F .text	0000022c alt_printf
04014c14 g     F .text	00000010 __locale_mb_cur_max
04020854 g     F .text	00000180 __call_exitprocs
04000b58 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
0402e05c g     O .bss	00000004 __mlocale_changed
0401cc04 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0402ae10 g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
04004598 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
0402e074 g     O .bss	00000004 _alt_tick_rate
04027798  w    O .rodata	0000000d _ZTSSt9type_info
0401e1d0 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0400bdd8 g     F .text	00000020 __cxa_pure_virtual
04020ca4  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
04020e2c  w    O .rodata	00000010 _ZTS13USBReadParser
0401e5f4 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
040158a0 g     F .text	00000148 __lshift
0401f174 g     F .text	000001fc alt_avalon_spi_command
0402e078 g     O .bss	00000004 _alt_nticks
0400fae0 g     F .text	00000018 signal
0401c5bc g     F .text	00000104 read
04005d04 g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
0401ca80 g     F .text	00000074 alt_sys_init
04020d28  w    O .rodata	00000040 _ZTV7XBOXONE
04001a40 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
04000c7c g     F .text	00000158 _Z14alt_busy_sleepj
0402073c g     F .text	00000118 __register_exitproc
04003250 g     F .text	00000094 _ZN3USB7setAddrEhhh
040068a0 g     F .text	00000084 _Z8E_NotifyPKci
04023030  w    O .rodata	0000000c _ZTV14MidiDescParser
04008c34  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
04003a50  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
04009d44 g     F .text	00000078 _Z8toBinaryh
0400b114 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
04006718  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
0400541c  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0401da2c g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
040154d4 g     F .text	0000028c __multiply
040031a8 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
04029eee g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
0401ebdc g     F .text	00000068 altera_avalon_jtag_uart_close
040033c0  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0400dae0 g     F .text	00000028 .hidden __mulsi3
04027c74 g       *ABS*	00000000 __ram_rwdata_start
0400e928 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
04020a14 g       *ABS*	00000000 __ram_rodata_start
0402e160 g     O .bss	00000028 __malloc_current_mallinfo
04005674  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0400ea3c g     F .text	00000044 .hidden _Unwind_SjLj_Resume
04015db4 g     F .text	0000014c __d2b
04027934  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0400bd78 g     F .text	00000004 _ZNSt9type_infoD2Ev
04008be4  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
04005088  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
04029760  w    O .rwdata	00000008 _ZTI11AddressPool
0400d8c8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0400b310 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04023080  w    O .rodata	00000011 _ZTS14MidiDescParser
0400040c g     F .text	00000050 clearLED
04027738  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
0401e70c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04020514 g     F .text	000000c4 alt_get_fd
04005f20 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
0401f590 g     F .text	00000158 alt_busy_sleep
0402ae00  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
04018248 g     F .text	00000054 _close_r
040206c0 g     F .text	0000007c memcmp
0401d2a4 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
0401e7cc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040079dc g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
0402e288 g       *ABS*	00000000 __alt_stack_base
0401e81c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0400b0d0 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
04007c44 g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
04004cc8 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
040120ac g     F .text	00000154 __swsetup_r
0400ea80 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
04019e48 g     F .text	000009d0 .hidden __divdf3
04013f88 g     F .text	00000118 __sfp
04016018 g     F .text	00000078 __copybits
0400bd7c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
04028098 g     O .rwdata	00000408 __malloc_av_
0400504c  w    F .text	0000003c _ZN11ByteSkipperC1Ev
04000b94 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
040140d4 g     F .text	00000004 __sinit_lock_release
0401aa70 g     F .text	0000086c .hidden __muldf3
0401685c g     F .text	00000054 __sread
04005640  w    F .text	00000034 _ZN13USBReadParserC2Ev
040278f8  w    O .rodata	00000014 _ZTVSt9exception
0400d8c0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
0400338c  w    F .text	00000034 _ZN11AddressPoolC2Ev
0402040c g     F .text	00000108 alt_find_file
04005334  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
0401f744 g     F .text	000000a4 alt_dev_llist_insert
0401c538 g     F .text	00000024 __malloc_lock
0401c744 g     F .text	000000b0 sbrk
0401d6cc g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0401d634 g     F .text	0000004c alt_avalon_i2c_check_nack
04027834  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0400d2bc g     F .text	00000090 __cxa_throw
04013ccc g     F .text	0000005c _fflush_r
0400e8ec g     F .text	00000010 .hidden _Unwind_SetIP
040012ec g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
0401829c g     F .text	000000dc _calloc_r
04020e18  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
040069d0 g     F .text	00000028 _Z8E_Notifydi
0400779c g     F .text	0000016c _ZN9USBH_MIDI19setupDeviceSpecificEv
0402e02c g       *ABS*	00000000 __bss_start
04029784  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0400f59c g     F .text	00000128 memset
04008300 g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
04005854  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
04009dbc g     F .text	00000c90 main
040095e8 g     F .text	00000078 _ZN8MAX3421e5regRdEh
040097e4 g     F .text	000000cc _ZN8MAX3421e5resetEv
0401d600 g     F .text	00000034 alt_avalon_i2c_master_target_set
0402e06c g     O .bss	00000004 alt_envp
04020e3c  w    O .rodata	00000012 _ZTS15USBDeviceConfig
0402e048 g     O .bss	00000004 __malloc_max_total_mem
0401e76c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0402e035 g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
040181d0 g     F .text	00000018 __swbuf
0400d87c g     F .text	0000000c __cxa_get_globals_fast
0401e418 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
04009354 g     F .text	0000003c _ZN8MAX3421eC1Ev
0400560c  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
04003368  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
04016990 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04018468 g     F .text	00000014 fclose
04004b9c g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
04006924 g     F .text	00000084 _Z11E_NotifyStrPKci
04000bd0 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
04012428 g     F .text	00001688 _dtoa_r
0400ec48 g     F .text	0000080c _malloc_r
04018950 g     F .text	00000030 __ascii_wctomb
0400d8a8 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0402ae34 g     O .rwdata	00000004 alt_errno
04022fa0  w    O .rodata	0000000c _ZTI17MouseReportParser
0400faf8 g     F .text	00000010 _init_signal
040030b0 g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
04027828  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
04004e0c g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
04014a04 g     F .text	000000c4 _fwalk
04009390 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
04003954  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0400d898 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
040161bc g     F .text	000000c8 putc
0400d92c g     F .text	00000084 .hidden __divsi3
04023094  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
0400057c g     F .text	00000140 printSignedHex1
04014108 g     F .text	00000124 _malloc_trim_r
04020a14 g       *ABS*	00000000 __CTOR_END__
0400dbc4 g     F .text	00000430 .hidden __mulsf3
0400522c  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
04008cf0  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
04022f54  w    O .rodata	00000028 _ZTV17MouseReportParser
0400fb7c g     F .text	000000dc strcmp
04003c1c g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
04020a14 g       *ABS*	00000000 __flash_rodata_start
04027920  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
04020a14 g       *ABS*	00000000 __DTOR_LIST__
0402303c  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
04000320 g     F .text	000000a0 SGTL5000_Reg_Wr
0402e037 g     O .bss	00000001 usbstate
0401a818 g     F .text	00000088 .hidden __nedf2
0401ca48 g     F .text	00000038 alt_irq_init
0401c6c0 g     F .text	00000084 alt_release_fd
0400b0e0 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
04020e0c  w    O .rodata	00000009 _ZTS7XBOXONE
04027948 g     O .rodata	00000100 .hidden __clz_tab
0402e058 g     O .bss	00000004 _PathLocale
04020674 g     F .text	00000014 atexit
0400db08 g     F .text	000000bc .hidden __gesf2
040181e8 g     F .text	00000060 _write_r
04002f94 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
04003518  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
04014c44 g     F .text	00000018 setlocale
04000c48 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
04022f28  w    O .rodata	0000002c _ZTV20KeyboardReportParser
04009768 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0400e920 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0402776c  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0400d824 g     F .text	00000058 __cxa_call_terminate
0402ae0c g     O .rwdata	00000004 _impure_ptr
0402adf8  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
04020cf4  w    O .rodata	0000000e _ZTS11AddressPool
0402e064 g     O .bss	00000004 alt_argc
04003b54  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
04013ab0 g     F .text	0000021c __sflush_r
04008cf0  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
040037a4  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
0401f848 g     F .text	00000060 _do_dtors
04014c30 g     F .text	00000008 __locale_cjk_lang
0401d5c8 g     F .text	00000038 alt_avalon_i2c_master_target_get
0401d4d8 g     F .text	000000f0 alt_avalon_i2c_send_address
0402e080 g     O .bss	00000012 buf
0400c218 g     F .text	00000010 _ZSt14get_unexpectedv
04000020 g       .exceptions	00000000 alt_irq_entry
0400338c  w    F .text	00000034 _ZN11AddressPoolC1Ev
04000eac g     F .text	0000002c _ZN3USB4initEv
04015c44 g     F .text	00000064 __ulp
0400e910 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
040140f0 g     F .text	00000018 __fp_unlock_all
04005674  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
04004c8c g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
040052d4  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0402ae20 g     O .rwdata	00000008 alt_fs_list
040278d4  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
04022f88  w    O .rodata	00000017 _ZTS20KeyboardReportParser
04005640  w    F .text	00000034 _ZN13USBReadParserC1Ev
0400e8fc g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
04005300  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0400d3d8 g     F .text	000000b4 __cxa_begin_catch
04004e84 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
0400bea8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0400c1b8 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
040064ec  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
04000020 g       *ABS*	00000000 __ram_exceptions_start
04014c5c g     F .text	0000000c localeconv
04009ad4 g     F .text	00000174 _ZN8MAX3421e8busprobeEv
040009bc g     F .text	0000003c _ZN6SPI_SS5WriteEh
040003c0 g     F .text	0000004c setLED
040054ac  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0400d8b8 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
0401e6a4 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0402adec g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
04000c0c g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
04008df0 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
0401f958 g     F .text	00000050 alt_ic_isr_register
0401cf08 g     F .text	0000004c alt_avalon_i2c_disable
0400d6c0 g     F .text	00000060 __cxa_allocate_exception
04027700  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0402ae50 g       *ABS*	00000000 _edata
040055d8  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
0402e288 g       *ABS*	00000000 _end
0400b500 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0400ca48 g     F .text	00000600 __gxx_personality_sj0
0401847c g     F .text	00000164 __fputwc
04000230 g       *ABS*	00000000 __ram_exceptions_end
04001f6c g     F .text	000003f0 _ZN3USB4TaskEv
0401ec44 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
040009f8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
0402977c  w    O .rwdata	00000008 _ZTI13USBReadParser
0401cf54 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0400d894 g     F .text	00000004 _ZNSt9exceptionD1Ev
0401fa30 g     F .text	0000008c alt_ic_irq_disable
04006474  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
040168b8 g     F .text	0000007c __swrite
0402ae14 g     O .rwdata	00000004 __malloc_trim_threshold
04014c24 g     F .text	0000000c __locale_msgcharset
04020688 g     F .text	00000038 exit
0400e8a0 g     F .text	0000001c .hidden _Unwind_SetGR
040064c4  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
04014ac8 g     F .text	000000c4 _fwalk_reent
0400b274 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0400e548 g     F .text	000000f0 .hidden __floatunsisf
04015a48 g     F .text	000001fc __mdiff
0400c0e0 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0400d9b0 g     F .text	00000074 .hidden __modsi3
040016e4 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0402e036 g     O .bss	00000001 rcode
040140cc g     F .text	00000004 __sfp_lock_release
040278a8  w    O .rodata	0000000c _ZTISt13bad_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
040067dc  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
0400474c g     F .text	000003c8 _ZN7XBOXONE10readReportEv
0401d164 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
040099bc g     F .text	00000118 _ZN8MAX3421e4InitEi
04001dec g     F .text	00000180 _ZN3USB11dispatchPktEhht
0401d3f4 g     F .text	000000e4 alt_avalon_i2c_cmd_write
04023048  w    O .rodata	00000020 _ZTI9USBH_MIDI
04004b14 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0400d8cc g     F .text	00000060 .hidden __fixunssfsi
040076fc g     F .text	000000a0 _ZN9USBH_MIDI7ReleaseEv
0401bf1c g     F .text	00000034 _exit
0401f464 g     F .text	0000012c alt_alarm_start
04022f7c  w    O .rodata	0000000c _ZTI20KeyboardReportParser
04007da0 g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0400045c g     F .text	00000120 printSignedHex0
0400e86c g     F .text	0000001c .hidden _Unwind_GetGR
0400d888 g     F .text	0000000c __cxa_get_globals
04006b00 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
04014c68 g     F .text	000001bc __smakebuf_r
0402ade8 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0400528c  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0400fc58 g     F .text	00000098 strlen
0400f878 g     F .text	0000006c _init_signal_r
0402ade0  w    O .rwdata	00000008 _ZTISt9type_info
0401fe80 g     F .text	0000015c open
0401a8a0 g     F .text	000000dc .hidden __gedf2
04020208 g     F .text	0000003c alt_putchar
04027884  w    O .rodata	0000000d _ZTSSt9exception
0400ebd4 g     F .text	0000004c clock
04006804  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
04009c48 g     F .text	00000064 _ZN8MAX3421e4TaskEv
04022f10 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
04009440 g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0402ae1c g     O .rwdata	00000004 __wctomb
0400d8b4 g     F .text	00000004 _ZNSt9exceptionD0Ev
04016a94 g     F .text	00000018 __sprint_r
0401f938 g     F .text	00000020 alt_icache_flush_all
0400e918 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
0402e094 g     O .bss	000000bc Usb
0402ae44 g     O .rwdata	00000004 alt_priority_mask
0400504c  w    F .text	0000003c _ZN11ByteSkipperC2Ev
0401f9a8 g     F .text	00000088 alt_ic_irq_enable
04011fd4 g     F .text	0000001c __vfprintf_internal
04000a3c g     F .text	00000034 _ZN6SPI_SS4ReadEv
04018980 g     F .text	0000005c _wctomb_r
0401b2dc g     F .text	000008fc .hidden __subdf3
040015fc g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
04004454 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
040153e8 g     F .text	000000b0 __lo0bits
0402ae48 g     O .rwdata	00000008 alt_alarm_list
0401f7e8 g     F .text	00000060 _do_ctors
04020db8  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0400fb08 g     F .text	00000014 __sigtramp
04008ea8 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
04018890 g     F .text	000000c0 wcrtomb
0401be18 g     F .text	000000d8 close
0401e658 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
040278b4  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0401c320 g     F .text	00000084 alt_load
0401d8f0 g     F .text	0000013c alt_avalon_i2c_master_rx
0400bd90 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
040050f0  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
04018604 g     F .text	00000080 fputwc
0400facc g     F .text	00000014 raise
04029ef4  w    O .rwdata	00000008 _ZTI15HIDReportParser
0400ec34 g     F .text	00000014 free
040140d0 g     F .text	00000004 __sinit_lock_acquire
04015134 g     F .text	00000148 __multadd
0400beb8 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
0401510c g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100f4 	movhi	r2,1027
 4000140:	10b86204 	addi	r2,r2,-7800
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100f4 	movhi	r2,1027
 4000158:	10b86204 	addi	r2,r2,-7800
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_mem_onchip_memory2_0+0xfbffee8c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_mem_onchip_memory2_0+0xfbffee80>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0b24917 	ldw	r2,-14044(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0b24917 	ldw	r2,-14044(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 400023c:	d685d614 	ori	gp,gp,5976
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	008100b4 	movhi	r2,1026
    ori r2, r2, %lo(__bss_start)
 4000244:	10b80b14 	ori	r2,r2,57388

    movhi r3, %hi(__bss_end)
 4000248:	00c100b4 	movhi	r3,1026
    ori r3, r3, %lo(__bss_end)
 400024c:	18f8a214 	ori	r3,r3,57992

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_mem_onchip_memory2_0+0xfbffefb4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	401c3200 	call	401c320 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	401c4bc0 	call	401c4bc <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_mem_onchip_memory2_0+0xfbffefc8>

0400026c <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
 400026c:	defff804 	addi	sp,sp,-32
 4000270:	dfc00715 	stw	ra,28(sp)
 4000274:	df000615 	stw	fp,24(sp)
 4000278:	df000604 	addi	fp,sp,24
 400027c:	e13ffe15 	stw	r4,-8(fp)
 4000280:	2805883a 	mov	r2,r5
 4000284:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
 4000288:	e0bfff0b 	ldhu	r2,-4(fp)
 400028c:	1004d23a 	srli	r2,r2,8
 4000290:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
 4000294:	e0bfff0b 	ldhu	r2,-4(fp)
 4000298:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
 400029c:	e13ffd84 	addi	r4,fp,-10
 40002a0:	e0fffd84 	addi	r3,fp,-10
 40002a4:	d8000115 	stw	zero,4(sp)
 40002a8:	00800084 	movi	r2,2
 40002ac:	d8800015 	stw	r2,0(sp)
 40002b0:	200f883a 	mov	r7,r4
 40002b4:	01800084 	movi	r6,2
 40002b8:	180b883a 	mov	r5,r3
 40002bc:	e13ffe17 	ldw	r4,-8(fp)
 40002c0:	401da2c0 	call	401da2c <alt_avalon_i2c_master_tx_rx>
 40002c4:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 40002c8:	e0bffc17 	ldw	r2,-16(fp)
 40002cc:	10000626 	beq	r2,zero,40002e8 <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 40002d0:	e0bfff0b 	ldhu	r2,-4(fp)
 40002d4:	100b883a 	mov	r5,r2
 40002d8:	010100b4 	movhi	r4,1026
 40002dc:	21028504 	addi	r4,r4,2580
 40002e0:	400f6f40 	call	400f6f4 <printf>
		while (1)
		{
			//hang here
		}
 40002e4:	003fff06 	br	40002e4 <__alt_mem_onchip_memory2_0+0xfbfff044>
	}
	value = (buffer[0] << 8) | buffer[1];
 40002e8:	e0bffd83 	ldbu	r2,-10(fp)
 40002ec:	10803fcc 	andi	r2,r2,255
 40002f0:	1004923a 	slli	r2,r2,8
 40002f4:	1007883a 	mov	r3,r2
 40002f8:	e0bffdc3 	ldbu	r2,-9(fp)
 40002fc:	10803fcc 	andi	r2,r2,255
 4000300:	1884b03a 	or	r2,r3,r2
 4000304:	e0bffd0d 	sth	r2,-12(fp)
	return value;
 4000308:	e0bffd0b 	ldhu	r2,-12(fp)
}
 400030c:	e037883a 	mov	sp,fp
 4000310:	dfc00117 	ldw	ra,4(sp)
 4000314:	df000017 	ldw	fp,0(sp)
 4000318:	dec00204 	addi	sp,sp,8
 400031c:	f800283a 	ret

04000320 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
 4000320:	defff904 	addi	sp,sp,-28
 4000324:	dfc00615 	stw	ra,24(sp)
 4000328:	df000515 	stw	fp,20(sp)
 400032c:	df000504 	addi	fp,sp,20
 4000330:	e13ffd15 	stw	r4,-12(fp)
 4000334:	2807883a 	mov	r3,r5
 4000338:	3005883a 	mov	r2,r6
 400033c:	e0fffe0d 	sth	r3,-8(fp)
 4000340:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
 4000344:	e0bffe0b 	ldhu	r2,-8(fp)
 4000348:	1004d23a 	srli	r2,r2,8
 400034c:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
 4000350:	e0bffe0b 	ldhu	r2,-8(fp)
 4000354:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
 4000358:	e0bfff0b 	ldhu	r2,-4(fp)
 400035c:	1004d23a 	srli	r2,r2,8
 4000360:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
 4000364:	e0bfff0b 	ldhu	r2,-4(fp)
 4000368:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
 400036c:	e0bffc04 	addi	r2,fp,-16
 4000370:	000f883a 	mov	r7,zero
 4000374:	01800104 	movi	r6,4
 4000378:	100b883a 	mov	r5,r2
 400037c:	e13ffd17 	ldw	r4,-12(fp)
 4000380:	401d8080 	call	401d808 <alt_avalon_i2c_master_tx>
 4000384:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 4000388:	e0bffb17 	ldw	r2,-20(fp)
 400038c:	10000626 	beq	r2,zero,40003a8 <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 4000390:	e0bffe0b 	ldhu	r2,-8(fp)
 4000394:	100b883a 	mov	r5,r2
 4000398:	010100b4 	movhi	r4,1026
 400039c:	21028504 	addi	r4,r4,2580
 40003a0:	400f6f40 	call	400f6f4 <printf>
		while (1)
		{
			//hang here
		}
 40003a4:	003fff06 	br	40003a4 <__alt_mem_onchip_memory2_0+0xfbfff104>
	}
	return DATA;
 40003a8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 40003ac:	e037883a 	mov	sp,fp
 40003b0:	dfc00117 	ldw	ra,4(sp)
 40003b4:	df000017 	ldw	fp,0(sp)
 40003b8:	dec00204 	addi	sp,sp,8
 40003bc:	f800283a 	ret

040003c0 <setLED>:
#include "sgtl5000/GenericTypeDefs.h"
#include "sgtl5000/sgtl5000.h"
#include "sgtl5000_test.h"

void setLED(int LED)
{
 40003c0:	defffe04 	addi	sp,sp,-8
 40003c4:	df000115 	stw	fp,4(sp)
 40003c8:	df000104 	addi	fp,sp,4
 40003cc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
 40003d0:	00820034 	movhi	r2,2048
 40003d4:	10849004 	addi	r2,r2,4672
 40003d8:	10c00037 	ldwio	r3,0(r2)
 40003dc:	01000044 	movi	r4,1
 40003e0:	e0bfff17 	ldw	r2,-4(fp)
 40003e4:	2084983a 	sll	r2,r4,r2
 40003e8:	1886b03a 	or	r3,r3,r2
 40003ec:	00820034 	movhi	r2,2048
 40003f0:	10849004 	addi	r2,r2,4672
 40003f4:	10c00035 	stwio	r3,0(r2)
}
 40003f8:	0001883a 	nop
 40003fc:	e037883a 	mov	sp,fp
 4000400:	df000017 	ldw	fp,0(sp)
 4000404:	dec00104 	addi	sp,sp,4
 4000408:	f800283a 	ret

0400040c <clearLED>:

void clearLED(int LED)
{
 400040c:	defffe04 	addi	sp,sp,-8
 4000410:	df000115 	stw	fp,4(sp)
 4000414:	df000104 	addi	fp,sp,4
 4000418:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));
 400041c:	00820034 	movhi	r2,2048
 4000420:	10849004 	addi	r2,r2,4672
 4000424:	10c00037 	ldwio	r3,0(r2)
 4000428:	01000044 	movi	r4,1
 400042c:	e0bfff17 	ldw	r2,-4(fp)
 4000430:	2084983a 	sll	r2,r4,r2
 4000434:	0084303a 	nor	r2,zero,r2
 4000438:	1886703a 	and	r3,r3,r2
 400043c:	00820034 	movhi	r2,2048
 4000440:	10849004 	addi	r2,r2,4672
 4000444:	10c00035 	stwio	r3,0(r2)

}
 4000448:	0001883a 	nop
 400044c:	e037883a 	mov	sp,fp
 4000450:	df000017 	ldw	fp,0(sp)
 4000454:	dec00104 	addi	sp,sp,4
 4000458:	f800283a 	ret

0400045c <printSignedHex0>:

void printSignedHex0(signed char value)
{
 400045c:	defffc04 	addi	sp,sp,-16
 4000460:	dfc00315 	stw	ra,12(sp)
 4000464:	df000215 	stw	fp,8(sp)
 4000468:	df000204 	addi	fp,sp,8
 400046c:	2005883a 	mov	r2,r4
 4000470:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000474:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 4000478:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 400047c:	00820034 	movhi	r2,2048
 4000480:	10849404 	addi	r2,r2,4688
 4000484:	10800037 	ldwio	r2,0(r2)
 4000488:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0)
 400048c:	e0bfff07 	ldb	r2,-4(fp)
 4000490:	1000060e 	bge	r2,zero,40004ac <printSignedHex0+0x50>
	{
		setLED(11);
 4000494:	010002c4 	movi	r4,11
 4000498:	40003c00 	call	40003c0 <setLED>
		value = -value;
 400049c:	e0bfff03 	ldbu	r2,-4(fp)
 40004a0:	0085c83a 	sub	r2,zero,r2
 40004a4:	e0bfff05 	stb	r2,-4(fp)
 40004a8:	00000206 	br	40004b4 <printSignedHex0+0x58>
	}
	else
	{
		clearLED(11);
 40004ac:	010002c4 	movi	r4,11
 40004b0:	400040c0 	call	400040c <clearLED>
	}
	//handled hundreds
	if (value / 100)
 40004b4:	e0bfff03 	ldbu	r2,-4(fp)
 40004b8:	108018c4 	addi	r2,r2,99
 40004bc:	10803fcc 	andi	r2,r2,255
 40004c0:	108031f0 	cmpltui	r2,r2,199
 40004c4:	1000031e 	bne	r2,zero,40004d4 <printSignedHex0+0x78>
		setLED(13);
 40004c8:	01000344 	movi	r4,13
 40004cc:	40003c00 	call	40003c0 <setLED>
 40004d0:	00000206 	br	40004dc <printSignedHex0+0x80>
	else
		clearLED(13);
 40004d4:	01000344 	movi	r4,13
 40004d8:	400040c0 	call	400040c <clearLED>

	value = value % 100;
 40004dc:	e0bfff07 	ldb	r2,-4(fp)
 40004e0:	01401904 	movi	r5,100
 40004e4:	1009883a 	mov	r4,r2
 40004e8:	400d9b00 	call	400d9b0 <__modsi3>
 40004ec:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 40004f0:	e0bfff07 	ldb	r2,-4(fp)
 40004f4:	01400284 	movi	r5,10
 40004f8:	1009883a 	mov	r4,r2
 40004fc:	400d92c0 	call	400d92c <__divsi3>
 4000500:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 4000504:	e0bfff07 	ldb	r2,-4(fp)
 4000508:	01400284 	movi	r5,10
 400050c:	1009883a 	mov	r4,r2
 4000510:	400d9b00 	call	400d9b0 <__modsi3>
 4000514:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 4000518:	e0bffe8b 	ldhu	r2,-6(fp)
 400051c:	10803fcc 	andi	r2,r2,255
 4000520:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 4000524:	e0bffe03 	ldbu	r2,-8(fp)
 4000528:	1004933a 	slli	r2,r2,12
 400052c:	1007883a 	mov	r3,r2
 4000530:	e0bffe8b 	ldhu	r2,-6(fp)
 4000534:	1884b03a 	or	r2,r3,r2
 4000538:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 400053c:	e0bffe43 	ldbu	r2,-7(fp)
 4000540:	1004923a 	slli	r2,r2,8
 4000544:	1007883a 	mov	r3,r2
 4000548:	e0bffe8b 	ldhu	r2,-6(fp)
 400054c:	1884b03a 	or	r2,r3,r2
 4000550:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000554:	e0fffe8b 	ldhu	r3,-6(fp)
 4000558:	00820034 	movhi	r2,2048
 400055c:	10849404 	addi	r2,r2,4688
 4000560:	10c00035 	stwio	r3,0(r2)
}
 4000564:	0001883a 	nop
 4000568:	e037883a 	mov	sp,fp
 400056c:	dfc00117 	ldw	ra,4(sp)
 4000570:	df000017 	ldw	fp,0(sp)
 4000574:	dec00204 	addi	sp,sp,8
 4000578:	f800283a 	ret

0400057c <printSignedHex1>:

void printSignedHex1(signed char value)
{
 400057c:	defffb04 	addi	sp,sp,-20
 4000580:	dfc00415 	stw	ra,16(sp)
 4000584:	df000315 	stw	fp,12(sp)
 4000588:	df000304 	addi	fp,sp,12
 400058c:	2005883a 	mov	r2,r4
 4000590:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000594:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 4000598:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 400059c:	00820034 	movhi	r2,2048
 40005a0:	10849404 	addi	r2,r2,4688
 40005a4:	10800037 	ldwio	r2,0(r2)
 40005a8:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0)
 40005ac:	e0bfff07 	ldb	r2,-4(fp)
 40005b0:	1000060e 	bge	r2,zero,40005cc <printSignedHex1+0x50>
	{
		setLED(10);
 40005b4:	01000284 	movi	r4,10
 40005b8:	40003c00 	call	40003c0 <setLED>
		value = -value;
 40005bc:	e0bfff03 	ldbu	r2,-4(fp)
 40005c0:	0085c83a 	sub	r2,zero,r2
 40005c4:	e0bfff05 	stb	r2,-4(fp)
 40005c8:	00000206 	br	40005d4 <printSignedHex1+0x58>
	}
	else
	{
		clearLED(10);
 40005cc:	01000284 	movi	r4,10
 40005d0:	400040c0 	call	400040c <clearLED>
	}
	//handled hundreds
	if (value / 100)
 40005d4:	e0bfff03 	ldbu	r2,-4(fp)
 40005d8:	108018c4 	addi	r2,r2,99
 40005dc:	10803fcc 	andi	r2,r2,255
 40005e0:	108031f0 	cmpltui	r2,r2,199
 40005e4:	1000031e 	bne	r2,zero,40005f4 <printSignedHex1+0x78>
		setLED(12);
 40005e8:	01000304 	movi	r4,12
 40005ec:	40003c00 	call	40003c0 <setLED>
 40005f0:	00000206 	br	40005fc <printSignedHex1+0x80>
	else
		clearLED(12);
 40005f4:	01000304 	movi	r4,12
 40005f8:	400040c0 	call	400040c <clearLED>

	value = value % 100;
 40005fc:	e0bfff07 	ldb	r2,-4(fp)
 4000600:	01401904 	movi	r5,100
 4000604:	1009883a 	mov	r4,r2
 4000608:	400d9b00 	call	400d9b0 <__modsi3>
 400060c:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 4000610:	e0bfff07 	ldb	r2,-4(fp)
 4000614:	01400284 	movi	r5,10
 4000618:	1009883a 	mov	r4,r2
 400061c:	400d92c0 	call	400d92c <__divsi3>
 4000620:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 4000624:	e0bfff07 	ldb	r2,-4(fp)
 4000628:	01400284 	movi	r5,10
 400062c:	1009883a 	mov	r4,r2
 4000630:	400d9b00 	call	400d9b0 <__modsi3>
 4000634:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 4000638:	e0bfff07 	ldb	r2,-4(fp)
 400063c:	01400284 	movi	r5,10
 4000640:	1009883a 	mov	r4,r2
 4000644:	400d92c0 	call	400d92c <__divsi3>
 4000648:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 400064c:	e0bfff07 	ldb	r2,-4(fp)
 4000650:	01400284 	movi	r5,10
 4000654:	1009883a 	mov	r4,r2
 4000658:	400d9b00 	call	400d9b0 <__modsi3>
 400065c:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 4000660:	e0bffe17 	ldw	r2,-8(fp)
 4000664:	10bfc00c 	andi	r2,r2,65280
 4000668:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 400066c:	e0bffd03 	ldbu	r2,-12(fp)
 4000670:	1004913a 	slli	r2,r2,4
 4000674:	1007883a 	mov	r3,r2
 4000678:	e0bffe17 	ldw	r2,-8(fp)
 400067c:	10c4b03a 	or	r2,r2,r3
 4000680:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 4000684:	e0bffd43 	ldbu	r2,-11(fp)
 4000688:	e0fffe17 	ldw	r3,-8(fp)
 400068c:	1884b03a 	or	r2,r3,r2
 4000690:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000694:	e0fffe17 	ldw	r3,-8(fp)
 4000698:	00820034 	movhi	r2,2048
 400069c:	10849404 	addi	r2,r2,4688
 40006a0:	10c00035 	stwio	r3,0(r2)
}
 40006a4:	0001883a 	nop
 40006a8:	e037883a 	mov	sp,fp
 40006ac:	dfc00117 	ldw	ra,4(sp)
 40006b0:	df000017 	ldw	fp,0(sp)
 40006b4:	dec00204 	addi	sp,sp,8
 40006b8:	f800283a 	ret

040006bc <initialize_sgtl5000>:


int initialize_sgtl5000()
{
 40006bc:	defffc04 	addi	sp,sp,-16
 40006c0:	dfc00315 	stw	ra,12(sp)
 40006c4:	df000215 	stw	fp,8(sp)
 40006c8:	df000204 	addi	fp,sp,8
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
 40006cc:	010100b4 	movhi	r4,1026
 40006d0:	21028d04 	addi	r4,r4,2612
 40006d4:	401ce300 	call	401ce30 <alt_avalon_i2c_open>
 40006d8:	e0bffe15 	stw	r2,-8(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
 40006dc:	e0bffe17 	ldw	r2,-8(fp)
 40006e0:	1000051e 	bne	r2,zero,40006f8 <initialize_sgtl5000+0x3c>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
 40006e4:	010100b4 	movhi	r4,1026
 40006e8:	21029004 	addi	r4,r4,2624
 40006ec:	400f8100 	call	400f810 <puts>
		return 1;
 40006f0:	00800044 	movi	r2,1
 40006f4:	0000ac06 	br	40009a8 <initialize_sgtl5000+0x2ec>
	}
	printf ("I2C Test Program\n");
 40006f8:	010100b4 	movhi	r4,1026
 40006fc:	21029804 	addi	r4,r4,2656
 4000700:	400f8100 	call	400f810 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
 4000704:	01400284 	movi	r5,10
 4000708:	e13ffe17 	ldw	r4,-8(fp)
 400070c:	401d6000 	call	401d600 <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
 4000710:	000b883a 	mov	r5,zero
 4000714:	e13ffe17 	ldw	r4,-8(fp)
 4000718:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 400071c:	10bfffcc 	andi	r2,r2,65535
 4000720:	100b883a 	mov	r5,r2
 4000724:	010100b4 	movhi	r4,1026
 4000728:	21029d04 	addi	r4,r4,2676
 400072c:	400f6f40 	call	400f6f4 <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
 4000730:	00800384 	movi	r2,14
 4000734:	e0bfff05 	stb	r2,-4(fp)
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
 4000738:	e0bfff03 	ldbu	r2,-4(fp)
 400073c:	1009883a 	mov	r4,r2
 4000740:	400e5480 	call	400e548 <__floatunsisf>
 4000744:	1007883a 	mov	r3,r2
 4000748:	180b883a 	mov	r5,r3
 400074c:	011059f4 	movhi	r4,16743
 4000750:	210d8144 	addi	r4,r4,13829
 4000754:	400dff40 	call	400dff4 <__subsf3>
 4000758:	1007883a 	mov	r3,r2
 400075c:	1805883a 	mov	r2,r3
 4000760:	01514034 	movhi	r5,17664
 4000764:	1009883a 	mov	r4,r2
 4000768:	400dbc40 	call	400dbc4 <__mulsf3>
 400076c:	1007883a 	mov	r3,r2
 4000770:	1805883a 	mov	r2,r3
 4000774:	1009883a 	mov	r4,r2
 4000778:	400d8cc0 	call	400d8cc <__fixunssfsi>
 400077c:	e0bfff8d 	sth	r2,-2(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
 4000780:	e0bfff03 	ldbu	r2,-4(fp)
 4000784:	e0ffff8b 	ldhu	r3,-2(fp)
 4000788:	180d883a 	mov	r6,r3
 400078c:	100b883a 	mov	r5,r2
 4000790:	010100b4 	movhi	r4,1026
 4000794:	2102a304 	addi	r4,r4,2700
 4000798:	400f6f40 	call	400f6f4 <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
 400079c:	e0bfff03 	ldbu	r2,-4(fp)
 40007a0:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
 40007a4:	1007883a 	mov	r3,r2
 40007a8:	e0bfff8b 	ldhu	r2,-2(fp)
 40007ac:	1884b03a 	or	r2,r3,r2
 40007b0:	10bfffcc 	andi	r2,r2,65535
 40007b4:	100d883a 	mov	r6,r2
 40007b8:	01400c84 	movi	r5,50
 40007bc:	e13ffe17 	ldw	r4,-8(fp)
 40007c0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
 40007c4:	01400c84 	movi	r5,50
 40007c8:	e13ffe17 	ldw	r4,-8(fp)
 40007cc:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40007d0:	10bfffcc 	andi	r2,r2,65535
 40007d4:	100b883a 	mov	r5,r2
 40007d8:	010100b4 	movhi	r4,1026
 40007dc:	2102b404 	addi	r4,r4,2768
 40007e0:	400f6f40 	call	400f6f4 <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
 40007e4:	01917f84 	movi	r6,17918
 40007e8:	01400c04 	movi	r5,48
 40007ec:	e13ffe17 	ldw	r4,-8(fp)
 40007f0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
 40007f4:	01400c04 	movi	r5,48
 40007f8:	e13ffe17 	ldw	r4,-8(fp)
 40007fc:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000800:	10bfffcc 	andi	r2,r2,65535
 4000804:	100b883a 	mov	r5,r2
 4000808:	010100b4 	movhi	r4,1026
 400080c:	2102bb04 	addi	r4,r4,2796
 4000810:	400f6f40 	call	400f6f4 <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
 4000814:	01801384 	movi	r6,78
 4000818:	01400a04 	movi	r5,40
 400081c:	e13ffe17 	ldw	r4,-8(fp)
 4000820:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
 4000824:	01400a04 	movi	r5,40
 4000828:	e13ffe17 	ldw	r4,-8(fp)
 400082c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000830:	10bfffcc 	andi	r2,r2,65535
 4000834:	100b883a 	mov	r5,r2
 4000838:	010100b4 	movhi	r4,1026
 400083c:	2102c304 	addi	r4,r4,2828
 4000840:	400f6f40 	call	400f6f4 <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
 4000844:	018018c4 	movi	r6,99
 4000848:	01400084 	movi	r5,2
 400084c:	e13ffe17 	ldw	r4,-8(fp)
 4000850:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
 4000854:	01400084 	movi	r5,2
 4000858:	e13ffe17 	ldw	r4,-8(fp)
 400085c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000860:	10bfffcc 	andi	r2,r2,65535
 4000864:	100b883a 	mov	r5,r2
 4000868:	010100b4 	movhi	r4,1026
 400086c:	2102ca04 	addi	r4,r4,2856
 4000870:	400f6f40 	call	400f6f4 <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
 4000874:	018001c4 	movi	r6,7
 4000878:	01400104 	movi	r5,4
 400087c:	e13ffe17 	ldw	r4,-8(fp)
 4000880:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
 4000884:	01400104 	movi	r5,4
 4000888:	e13ffe17 	ldw	r4,-8(fp)
 400088c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000890:	10bfffcc 	andi	r2,r2,65535
 4000894:	100b883a 	mov	r5,r2
 4000898:	010100b4 	movhi	r4,1026
 400089c:	2102d204 	addi	r4,r4,2888
 40008a0:	400f6f40 	call	400f6f4 <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
 40008a4:	01802004 	movi	r6,128
 40008a8:	01400184 	movi	r5,6
 40008ac:	e13ffe17 	ldw	r4,-8(fp)
 40008b0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
 40008b4:	01400184 	movi	r5,6
 40008b8:	e13ffe17 	ldw	r4,-8(fp)
 40008bc:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40008c0:	10bfffcc 	andi	r2,r2,65535
 40008c4:	100b883a 	mov	r5,r2
 40008c8:	010100b4 	movhi	r4,1026
 40008cc:	2102d904 	addi	r4,r4,2916
 40008d0:	400f6f40 	call	400f6f4 <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
 40008d4:	01800104 	movi	r6,4
 40008d8:	01400904 	movi	r5,36
 40008dc:	e13ffe17 	ldw	r4,-8(fp)
 40008e0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 40008e4:	01400904 	movi	r5,36
 40008e8:	e13ffe17 	ldw	r4,-8(fp)
 40008ec:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40008f0:	10bfffcc 	andi	r2,r2,65535
 40008f4:	100b883a 	mov	r5,r2
 40008f8:	010100b4 	movhi	r4,1026
 40008fc:	2102e004 	addi	r4,r4,2944
 4000900:	400f6f40 	call	400f6f4 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
 4000904:	01800404 	movi	r6,16
 4000908:	01400284 	movi	r5,10
 400090c:	e13ffe17 	ldw	r4,-8(fp)
 4000910:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
 4000914:	01400284 	movi	r5,10
 4000918:	e13ffe17 	ldw	r4,-8(fp)
 400091c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000920:	10bfffcc 	andi	r2,r2,65535
 4000924:	100b883a 	mov	r5,r2
 4000928:	010100b4 	movhi	r4,1026
 400092c:	2102e704 	addi	r4,r4,2972
 4000930:	400f6f40 	call	400f6f4 <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 4000934:	01400904 	movi	r5,36
 4000938:	e13ffe17 	ldw	r4,-8(fp)
 400093c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000940:	10bfffcc 	andi	r2,r2,65535
 4000944:	100b883a 	mov	r5,r2
 4000948:	010100b4 	movhi	r4,1026
 400094c:	2102e004 	addi	r4,r4,2944
 4000950:	400f6f40 	call	400f6f4 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
 4000954:	000d883a 	mov	r6,zero
 4000958:	01400384 	movi	r5,14
 400095c:	e13ffe17 	ldw	r4,-8(fp)
 4000960:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
 4000964:	01400384 	movi	r5,14
 4000968:	e13ffe17 	ldw	r4,-8(fp)
 400096c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000970:	10bfffcc 	andi	r2,r2,65535
 4000974:	100b883a 	mov	r5,r2
 4000978:	010100b4 	movhi	r4,1026
 400097c:	2102ee04 	addi	r4,r4,3000
 4000980:	400f6f40 	call	400f6f4 <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
 4000984:	01400504 	movi	r5,20
 4000988:	e13ffe17 	ldw	r4,-8(fp)
 400098c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000990:	10bfffcc 	andi	r2,r2,65535
 4000994:	100b883a 	mov	r5,r2
 4000998:	010100b4 	movhi	r4,1026
 400099c:	2102f604 	addi	r4,r4,3032
 40009a0:	400f6f40 	call	400f6f4 <printf>


	return 0;
 40009a4:	0005883a 	mov	r2,zero
}
 40009a8:	e037883a 	mov	sp,fp
 40009ac:	dfc00117 	ldw	ra,4(sp)
 40009b0:	df000017 	ldw	fp,0(sp)
 40009b4:	dec00204 	addi	sp,sp,8
 40009b8:	f800283a 	ret

040009bc <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
 40009bc:	defffd04 	addi	sp,sp,-12
 40009c0:	dfc00215 	stw	ra,8(sp)
 40009c4:	df000115 	stw	fp,4(sp)
 40009c8:	df000104 	addi	fp,sp,4
 40009cc:	2005883a 	mov	r2,r4
 40009d0:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
 40009d4:	010100b4 	movhi	r4,1026
 40009d8:	2102fe04 	addi	r4,r4,3064
 40009dc:	400f8100 	call	400f810 <puts>
}
 40009e0:	0001883a 	nop
 40009e4:	e037883a 	mov	sp,fp
 40009e8:	dfc00117 	ldw	ra,4(sp)
 40009ec:	df000017 	ldw	fp,0(sp)
 40009f0:	dec00204 	addi	sp,sp,8
 40009f4:	f800283a 	ret

040009f8 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
 40009f8:	defffc04 	addi	sp,sp,-16
 40009fc:	dfc00315 	stw	ra,12(sp)
 4000a00:	df000215 	stw	fp,8(sp)
 4000a04:	df000204 	addi	fp,sp,8
 4000a08:	2007883a 	mov	r3,r4
 4000a0c:	2805883a 	mov	r2,r5
 4000a10:	e0fffe05 	stb	r3,-8(fp)
 4000a14:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
 4000a18:	010100b4 	movhi	r4,1026
 4000a1c:	21030104 	addi	r4,r4,3076
 4000a20:	400f8100 	call	400f810 <puts>
}
 4000a24:	0001883a 	nop
 4000a28:	e037883a 	mov	sp,fp
 4000a2c:	dfc00117 	ldw	ra,4(sp)
 4000a30:	df000017 	ldw	fp,0(sp)
 4000a34:	dec00204 	addi	sp,sp,8
 4000a38:	f800283a 	ret

04000a3c <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
 4000a3c:	defffe04 	addi	sp,sp,-8
 4000a40:	dfc00115 	stw	ra,4(sp)
 4000a44:	df000015 	stw	fp,0(sp)
 4000a48:	d839883a 	mov	fp,sp
	printf("Port Read\n");
 4000a4c:	010100b4 	movhi	r4,1026
 4000a50:	21030604 	addi	r4,r4,3096
 4000a54:	400f8100 	call	400f810 <puts>
}
 4000a58:	0001883a 	nop
 4000a5c:	e037883a 	mov	sp,fp
 4000a60:	dfc00117 	ldw	ra,4(sp)
 4000a64:	df000017 	ldw	fp,0(sp)
 4000a68:	dec00204 	addi	sp,sp,8
 4000a6c:	f800283a 	ret

04000a70 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
 4000a70:	defffd04 	addi	sp,sp,-12
 4000a74:	dfc00215 	stw	ra,8(sp)
 4000a78:	df000115 	stw	fp,4(sp)
 4000a7c:	df000104 	addi	fp,sp,4
 4000a80:	2005883a 	mov	r2,r4
 4000a84:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
 4000a88:	010100b4 	movhi	r4,1026
 4000a8c:	21030904 	addi	r4,r4,3108
 4000a90:	400f8100 	call	400f810 <puts>
}
 4000a94:	0001883a 	nop
 4000a98:	e037883a 	mov	sp,fp
 4000a9c:	dfc00117 	ldw	ra,4(sp)
 4000aa0:	df000017 	ldw	fp,0(sp)
 4000aa4:	dec00204 	addi	sp,sp,8
 4000aa8:	f800283a 	ret

04000aac <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
 4000aac:	defffe04 	addi	sp,sp,-8
 4000ab0:	dfc00115 	stw	ra,4(sp)
 4000ab4:	df000015 	stw	fp,0(sp)
 4000ab8:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
 4000abc:	010100b4 	movhi	r4,1026
 4000ac0:	21030d04 	addi	r4,r4,3124
 4000ac4:	400f8100 	call	400f810 <puts>
}
 4000ac8:	0001883a 	nop
 4000acc:	e037883a 	mov	sp,fp
 4000ad0:	dfc00117 	ldw	ra,4(sp)
 4000ad4:	df000017 	ldw	fp,0(sp)
 4000ad8:	dec00204 	addi	sp,sp,8
 4000adc:	f800283a 	ret

04000ae0 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
 4000ae0:	defffd04 	addi	sp,sp,-12
 4000ae4:	dfc00215 	stw	ra,8(sp)
 4000ae8:	df000115 	stw	fp,4(sp)
 4000aec:	df000104 	addi	fp,sp,4
 4000af0:	2005883a 	mov	r2,r4
 4000af4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
 4000af8:	010100b4 	movhi	r4,1026
 4000afc:	21031104 	addi	r4,r4,3140
 4000b00:	400f8100 	call	400f810 <puts>
}
 4000b04:	0001883a 	nop
 4000b08:	e037883a 	mov	sp,fp
 4000b0c:	dfc00117 	ldw	ra,4(sp)
 4000b10:	df000017 	ldw	fp,0(sp)
 4000b14:	dec00204 	addi	sp,sp,8
 4000b18:	f800283a 	ret

04000b1c <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
 4000b1c:	defffd04 	addi	sp,sp,-12
 4000b20:	dfc00215 	stw	ra,8(sp)
 4000b24:	df000115 	stw	fp,4(sp)
 4000b28:	df000104 	addi	fp,sp,4
 4000b2c:	2005883a 	mov	r2,r4
 4000b30:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
 4000b34:	010100b4 	movhi	r4,1026
 4000b38:	21031404 	addi	r4,r4,3152
 4000b3c:	400f8100 	call	400f810 <puts>
}
 4000b40:	0001883a 	nop
 4000b44:	e037883a 	mov	sp,fp
 4000b48:	dfc00117 	ldw	ra,4(sp)
 4000b4c:	df000017 	ldw	fp,0(sp)
 4000b50:	dec00204 	addi	sp,sp,8
 4000b54:	f800283a 	ret

04000b58 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
 4000b58:	defffd04 	addi	sp,sp,-12
 4000b5c:	dfc00215 	stw	ra,8(sp)
 4000b60:	df000115 	stw	fp,4(sp)
 4000b64:	df000104 	addi	fp,sp,4
 4000b68:	2005883a 	mov	r2,r4
 4000b6c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
 4000b70:	010100b4 	movhi	r4,1026
 4000b74:	21031704 	addi	r4,r4,3164
 4000b78:	400f8100 	call	400f810 <puts>
}
 4000b7c:	0001883a 	nop
 4000b80:	e037883a 	mov	sp,fp
 4000b84:	dfc00117 	ldw	ra,4(sp)
 4000b88:	df000017 	ldw	fp,0(sp)
 4000b8c:	dec00204 	addi	sp,sp,8
 4000b90:	f800283a 	ret

04000b94 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
 4000b94:	defffd04 	addi	sp,sp,-12
 4000b98:	dfc00215 	stw	ra,8(sp)
 4000b9c:	df000115 	stw	fp,4(sp)
 4000ba0:	df000104 	addi	fp,sp,4
 4000ba4:	2005883a 	mov	r2,r4
 4000ba8:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
 4000bac:	010100b4 	movhi	r4,1026
 4000bb0:	21031a04 	addi	r4,r4,3176
 4000bb4:	400f8100 	call	400f810 <puts>
}
 4000bb8:	0001883a 	nop
 4000bbc:	e037883a 	mov	sp,fp
 4000bc0:	dfc00117 	ldw	ra,4(sp)
 4000bc4:	df000017 	ldw	fp,0(sp)
 4000bc8:	dec00204 	addi	sp,sp,8
 4000bcc:	f800283a 	ret

04000bd0 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
 4000bd0:	defffd04 	addi	sp,sp,-12
 4000bd4:	dfc00215 	stw	ra,8(sp)
 4000bd8:	df000115 	stw	fp,4(sp)
 4000bdc:	df000104 	addi	fp,sp,4
 4000be0:	2005883a 	mov	r2,r4
 4000be4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
 4000be8:	010100b4 	movhi	r4,1026
 4000bec:	21031d04 	addi	r4,r4,3188
 4000bf0:	400f8100 	call	400f810 <puts>
}
 4000bf4:	0001883a 	nop
 4000bf8:	e037883a 	mov	sp,fp
 4000bfc:	dfc00117 	ldw	ra,4(sp)
 4000c00:	df000017 	ldw	fp,0(sp)
 4000c04:	dec00204 	addi	sp,sp,8
 4000c08:	f800283a 	ret

04000c0c <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
 4000c0c:	defffd04 	addi	sp,sp,-12
 4000c10:	dfc00215 	stw	ra,8(sp)
 4000c14:	df000115 	stw	fp,4(sp)
 4000c18:	df000104 	addi	fp,sp,4
 4000c1c:	2005883a 	mov	r2,r4
 4000c20:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
 4000c24:	010100b4 	movhi	r4,1026
 4000c28:	21032104 	addi	r4,r4,3204
 4000c2c:	400f8100 	call	400f810 <puts>
}
 4000c30:	0001883a 	nop
 4000c34:	e037883a 	mov	sp,fp
 4000c38:	dfc00117 	ldw	ra,4(sp)
 4000c3c:	df000017 	ldw	fp,0(sp)
 4000c40:	dec00204 	addi	sp,sp,8
 4000c44:	f800283a 	ret

04000c48 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
 4000c48:	defffe04 	addi	sp,sp,-8
 4000c4c:	dfc00115 	stw	ra,4(sp)
 4000c50:	df000015 	stw	fp,0(sp)
 4000c54:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
 4000c58:	010100b4 	movhi	r4,1026
 4000c5c:	21032504 	addi	r4,r4,3220
 4000c60:	400f8100 	call	400f810 <puts>
}
 4000c64:	0001883a 	nop
 4000c68:	e037883a 	mov	sp,fp
 4000c6c:	dfc00117 	ldw	ra,4(sp)
 4000c70:	df000017 	ldw	fp,0(sp)
 4000c74:	dec00204 	addi	sp,sp,8
 4000c78:	f800283a 	ret

04000c7c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4000c7c:	defffa04 	addi	sp,sp,-24
 4000c80:	dfc00515 	stw	ra,20(sp)
 4000c84:	df000415 	stw	fp,16(sp)
 4000c88:	df000404 	addi	fp,sp,16
 4000c8c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4000c90:	00800244 	movi	r2,9
 4000c94:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4000c98:	014003f4 	movhi	r5,15
 4000c9c:	29509004 	addi	r5,r5,16960
 4000ca0:	e13ffd17 	ldw	r4,-12(fp)
 4000ca4:	400dae00 	call	400dae0 <__mulsi3>
 4000ca8:	100b883a 	mov	r5,r2
 4000cac:	0100bef4 	movhi	r4,763
 4000cb0:	213c2004 	addi	r4,r4,-3968
 4000cb4:	400da240 	call	400da24 <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
 4000cb8:	100b883a 	mov	r5,r2
 4000cbc:	01200034 	movhi	r4,32768
 4000cc0:	213fffc4 	addi	r4,r4,-1
 4000cc4:	400da240 	call	400da24 <__udivsi3>
 4000cc8:	100b883a 	mov	r5,r2
 4000ccc:	e13fff17 	ldw	r4,-4(fp)
 4000cd0:	400da240 	call	400da24 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4000cd4:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
 4000cd8:	e0bffe17 	ldw	r2,-8(fp)
 4000cdc:	10002a26 	beq	r2,zero,4000d88 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4000ce0:	e03ffc15 	stw	zero,-16(fp)
 4000ce4:	e0fffc17 	ldw	r3,-16(fp)
 4000ce8:	e0bffe17 	ldw	r2,-8(fp)
 4000cec:	1880180e 	bge	r3,r2,4000d50 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
 4000cf0:	00a00034 	movhi	r2,32768
 4000cf4:	10bfffc4 	addi	r2,r2,-1
 4000cf8:	10bfffc4 	addi	r2,r2,-1
 4000cfc:	103ffe1e 	bne	r2,zero,4000cf8 <__alt_mem_onchip_memory2_0+0xfbfffa58>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4000d00:	014003f4 	movhi	r5,15
 4000d04:	29509004 	addi	r5,r5,16960
 4000d08:	e13ffd17 	ldw	r4,-12(fp)
 4000d0c:	400dae00 	call	400dae0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4000d10:	100b883a 	mov	r5,r2
 4000d14:	0100bef4 	movhi	r4,763
 4000d18:	213c2004 	addi	r4,r4,-3968
 4000d1c:	400da240 	call	400da24 <__udivsi3>
 4000d20:	100b883a 	mov	r5,r2
 4000d24:	01200034 	movhi	r4,32768
 4000d28:	213fffc4 	addi	r4,r4,-1
 4000d2c:	400da240 	call	400da24 <__udivsi3>
 4000d30:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
 4000d34:	e0bfff17 	ldw	r2,-4(fp)
 4000d38:	10c5c83a 	sub	r2,r2,r3
 4000d3c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4000d40:	e0bffc17 	ldw	r2,-16(fp)
 4000d44:	10800044 	addi	r2,r2,1
 4000d48:	e0bffc15 	stw	r2,-16(fp)
 4000d4c:	003fe506 	br	4000ce4 <__alt_mem_onchip_memory2_0+0xfbfffa44>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4000d50:	014003f4 	movhi	r5,15
 4000d54:	29509004 	addi	r5,r5,16960
 4000d58:	e13ffd17 	ldw	r4,-12(fp)
 4000d5c:	400dae00 	call	400dae0 <__mulsi3>
 4000d60:	100b883a 	mov	r5,r2
 4000d64:	0100bef4 	movhi	r4,763
 4000d68:	213c2004 	addi	r4,r4,-3968
 4000d6c:	400da240 	call	400da24 <__udivsi3>
 4000d70:	e17fff17 	ldw	r5,-4(fp)
 4000d74:	1009883a 	mov	r4,r2
 4000d78:	400dae00 	call	400dae0 <__mulsi3>
 4000d7c:	10bfffc4 	addi	r2,r2,-1
 4000d80:	103ffe1e 	bne	r2,zero,4000d7c <__alt_mem_onchip_memory2_0+0xfbfffadc>
 4000d84:	00000d06 	br	4000dbc <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4000d88:	014003f4 	movhi	r5,15
 4000d8c:	29509004 	addi	r5,r5,16960
 4000d90:	e13ffd17 	ldw	r4,-12(fp)
 4000d94:	400dae00 	call	400dae0 <__mulsi3>
 4000d98:	100b883a 	mov	r5,r2
 4000d9c:	0100bef4 	movhi	r4,763
 4000da0:	213c2004 	addi	r4,r4,-3968
 4000da4:	400da240 	call	400da24 <__udivsi3>
 4000da8:	e17fff17 	ldw	r5,-4(fp)
 4000dac:	1009883a 	mov	r4,r2
 4000db0:	400dae00 	call	400dae0 <__mulsi3>
 4000db4:	10bfffc4 	addi	r2,r2,-1
 4000db8:	00bffe16 	blt	zero,r2,4000db4 <__alt_mem_onchip_memory2_0+0xfbfffb14>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4000dbc:	0005883a 	mov	r2,zero
}
 4000dc0:	e037883a 	mov	sp,fp
 4000dc4:	dfc00117 	ldw	ra,4(sp)
 4000dc8:	df000017 	ldw	fp,0(sp)
 4000dcc:	dec00204 	addi	sp,sp,8
 4000dd0:	f800283a 	ret

04000dd4 <_Z5delaym>:

void delay(uint32_t a) {
 4000dd4:	defffc04 	addi	sp,sp,-16
 4000dd8:	dfc00315 	stw	ra,12(sp)
 4000ddc:	df000215 	stw	fp,8(sp)
 4000de0:	df000204 	addi	fp,sp,8
 4000de4:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
 4000de8:	400ebd40 	call	400ebd4 <clock>
 4000dec:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
 4000df0:	400ebd40 	call	400ebd4 <clock>
 4000df4:	1007883a 	mov	r3,r2
 4000df8:	e0bffe17 	ldw	r2,-8(fp)
 4000dfc:	1887c83a 	sub	r3,r3,r2
 4000e00:	e0bfff17 	ldw	r2,-4(fp)
 4000e04:	1885803a 	cmpltu	r2,r3,r2
 4000e08:	10803fcc 	andi	r2,r2,255
 4000e0c:	10000126 	beq	r2,zero,4000e14 <_Z5delaym+0x40>
 4000e10:	003ff706 	br	4000df0 <__alt_mem_onchip_memory2_0+0xfbfffb50>
}
 4000e14:	0001883a 	nop
 4000e18:	e037883a 	mov	sp,fp
 4000e1c:	dfc00117 	ldw	ra,4(sp)
 4000e20:	df000017 	ldw	fp,0(sp)
 4000e24:	dec00204 	addi	sp,sp,8
 4000e28:	f800283a 	ret

04000e2c <_Z6millisv>:
uint32_t millis() {
 4000e2c:	defffe04 	addi	sp,sp,-8
 4000e30:	dfc00115 	stw	ra,4(sp)
 4000e34:	df000015 	stw	fp,0(sp)
 4000e38:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
 4000e3c:	400ebd40 	call	400ebd4 <clock>
}
 4000e40:	e037883a 	mov	sp,fp
 4000e44:	dfc00117 	ldw	ra,4(sp)
 4000e48:	df000017 	ldw	fp,0(sp)
 4000e4c:	dec00204 	addi	sp,sp,8
 4000e50:	f800283a 	ret

04000e54 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 4000e54:	defffd04 	addi	sp,sp,-12
 4000e58:	dfc00215 	stw	ra,8(sp)
 4000e5c:	df000115 	stw	fp,4(sp)
 4000e60:	df000104 	addi	fp,sp,4
 4000e64:	e13fff15 	stw	r4,-4(fp)
 4000e68:	e13fff17 	ldw	r4,-4(fp)
 4000e6c:	40093540 	call	4009354 <_ZN8MAX3421eC1Ev>
 4000e70:	e0bfff17 	ldw	r2,-4(fp)
 4000e74:	1009883a 	mov	r4,r2
 4000e78:	40033c00 	call	40033c0 <_ZN15AddressPoolImplILh16EEC1Ev>
 4000e7c:	e0bfff17 	ldw	r2,-4(fp)
 4000e80:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 4000e84:	00800444 	movi	r2,17
 4000e88:	d0b23545 	stb	r2,-14123(gp)
        init();
 4000e8c:	e13fff17 	ldw	r4,-4(fp)
 4000e90:	4000eac0 	call	4000eac <_ZN3USB4initEv>
}
 4000e94:	0001883a 	nop
 4000e98:	e037883a 	mov	sp,fp
 4000e9c:	dfc00117 	ldw	ra,4(sp)
 4000ea0:	df000017 	ldw	fp,0(sp)
 4000ea4:	dec00204 	addi	sp,sp,8
 4000ea8:	f800283a 	ret

04000eac <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 4000eac:	defffe04 	addi	sp,sp,-8
 4000eb0:	df000115 	stw	fp,4(sp)
 4000eb4:	df000104 	addi	fp,sp,4
 4000eb8:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
 4000ebc:	e0bfff17 	ldw	r2,-4(fp)
 4000ec0:	10002e05 	stb	zero,184(r2)
}
 4000ec4:	0001883a 	nop
 4000ec8:	e037883a 	mov	sp,fp
 4000ecc:	df000017 	ldw	fp,0(sp)
 4000ed0:	dec00104 	addi	sp,sp,4
 4000ed4:	f800283a 	ret

04000ed8 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
 4000ed8:	defffe04 	addi	sp,sp,-8
 4000edc:	df000115 	stw	fp,4(sp)
 4000ee0:	df000104 	addi	fp,sp,4
 4000ee4:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
 4000ee8:	d0b23543 	ldbu	r2,-14123(gp)
}
 4000eec:	e037883a 	mov	sp,fp
 4000ef0:	df000017 	ldw	fp,0(sp)
 4000ef4:	dec00104 	addi	sp,sp,4
 4000ef8:	f800283a 	ret

04000efc <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
 4000efc:	defffd04 	addi	sp,sp,-12
 4000f00:	df000215 	stw	fp,8(sp)
 4000f04:	df000204 	addi	fp,sp,8
 4000f08:	e13ffe15 	stw	r4,-8(fp)
 4000f0c:	2805883a 	mov	r2,r5
 4000f10:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
 4000f14:	e0bfff03 	ldbu	r2,-4(fp)
 4000f18:	d0b23545 	stb	r2,-14123(gp)
}
 4000f1c:	0001883a 	nop
 4000f20:	e037883a 	mov	sp,fp
 4000f24:	df000017 	ldw	fp,0(sp)
 4000f28:	dec00104 	addi	sp,sp,4
 4000f2c:	f800283a 	ret

04000f30 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 4000f30:	defff804 	addi	sp,sp,-32
 4000f34:	dfc00715 	stw	ra,28(sp)
 4000f38:	df000615 	stw	fp,24(sp)
 4000f3c:	df000604 	addi	fp,sp,24
 4000f40:	e13ffd15 	stw	r4,-12(fp)
 4000f44:	2807883a 	mov	r3,r5
 4000f48:	3005883a 	mov	r2,r6
 4000f4c:	e0fffe05 	stb	r3,-8(fp)
 4000f50:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 4000f54:	e0bffd17 	ldw	r2,-12(fp)
 4000f58:	e0fffe03 	ldbu	r3,-8(fp)
 4000f5c:	180b883a 	mov	r5,r3
 4000f60:	1009883a 	mov	r4,r2
 4000f64:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4000f68:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
 4000f6c:	e0bffc17 	ldw	r2,-16(fp)
 4000f70:	10000c26 	beq	r2,zero,4000fa4 <_ZN3USB14getEpInfoEntryEhh+0x74>
 4000f74:	e0bffc17 	ldw	r2,-16(fp)
 4000f78:	10c00003 	ldbu	r3,0(r2)
 4000f7c:	11000043 	ldbu	r4,1(r2)
 4000f80:	2008923a 	slli	r4,r4,8
 4000f84:	20c6b03a 	or	r3,r4,r3
 4000f88:	11000083 	ldbu	r4,2(r2)
 4000f8c:	2008943a 	slli	r4,r4,16
 4000f90:	20c6b03a 	or	r3,r4,r3
 4000f94:	108000c3 	ldbu	r2,3(r2)
 4000f98:	1004963a 	slli	r2,r2,24
 4000f9c:	10c4b03a 	or	r2,r2,r3
 4000fa0:	1000021e 	bne	r2,zero,4000fac <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
 4000fa4:	0005883a 	mov	r2,zero
 4000fa8:	00002106 	br	4001030 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
 4000fac:	e0bffc17 	ldw	r2,-16(fp)
 4000fb0:	10c00003 	ldbu	r3,0(r2)
 4000fb4:	11000043 	ldbu	r4,1(r2)
 4000fb8:	2008923a 	slli	r4,r4,8
 4000fbc:	20c6b03a 	or	r3,r4,r3
 4000fc0:	11000083 	ldbu	r4,2(r2)
 4000fc4:	2008943a 	slli	r4,r4,16
 4000fc8:	20c6b03a 	or	r3,r4,r3
 4000fcc:	108000c3 	ldbu	r2,3(r2)
 4000fd0:	1004963a 	slli	r2,r2,24
 4000fd4:	10c4b03a 	or	r2,r2,r3
 4000fd8:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
 4000fdc:	e03ffb05 	stb	zero,-20(fp)
 4000fe0:	e0bffc17 	ldw	r2,-16(fp)
 4000fe4:	10800143 	ldbu	r2,5(r2)
 4000fe8:	10803fcc 	andi	r2,r2,255
 4000fec:	e0fffb03 	ldbu	r3,-20(fp)
 4000ff0:	18800e2e 	bgeu	r3,r2,400102c <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
 4000ff4:	e0bffa17 	ldw	r2,-24(fp)
 4000ff8:	10800003 	ldbu	r2,0(r2)
 4000ffc:	10c03fcc 	andi	r3,r2,255
 4001000:	e0bfff03 	ldbu	r2,-4(fp)
 4001004:	1880021e 	bne	r3,r2,4001010 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
 4001008:	e0bffa17 	ldw	r2,-24(fp)
 400100c:	00000806 	br	4001030 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
 4001010:	e0bffa17 	ldw	r2,-24(fp)
 4001014:	108000c4 	addi	r2,r2,3
 4001018:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
 400101c:	e0bffb03 	ldbu	r2,-20(fp)
 4001020:	10800044 	addi	r2,r2,1
 4001024:	e0bffb05 	stb	r2,-20(fp)
 4001028:	003fed06 	br	4000fe0 <__alt_mem_onchip_memory2_0+0xfbfffd40>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
 400102c:	0005883a 	mov	r2,zero
}
 4001030:	e037883a 	mov	sp,fp
 4001034:	dfc00117 	ldw	ra,4(sp)
 4001038:	df000017 	ldw	fp,0(sp)
 400103c:	dec00204 	addi	sp,sp,8
 4001040:	f800283a 	ret

04001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 4001044:	defff904 	addi	sp,sp,-28
 4001048:	dfc00615 	stw	ra,24(sp)
 400104c:	df000515 	stw	fp,20(sp)
 4001050:	df000504 	addi	fp,sp,20
 4001054:	e13ffc15 	stw	r4,-16(fp)
 4001058:	2807883a 	mov	r3,r5
 400105c:	3005883a 	mov	r2,r6
 4001060:	e1ffff15 	stw	r7,-4(fp)
 4001064:	e0fffd05 	stb	r3,-12(fp)
 4001068:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
 400106c:	e0bfff17 	ldw	r2,-4(fp)
 4001070:	1000021e 	bne	r2,zero,400107c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
 4001074:	00bff604 	movi	r2,-40
 4001078:	00003406 	br	400114c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 400107c:	e0bffc17 	ldw	r2,-16(fp)
 4001080:	e0fffd03 	ldbu	r3,-12(fp)
 4001084:	180b883a 	mov	r5,r3
 4001088:	1009883a 	mov	r4,r2
 400108c:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4001090:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
 4001094:	e0bffb17 	ldw	r2,-20(fp)
 4001098:	1000021e 	bne	r2,zero,40010a4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 400109c:	00bff584 	movi	r2,-42
 40010a0:	00002a06 	br	400114c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
 40010a4:	e0bffb17 	ldw	r2,-20(fp)
 40010a8:	e0fffd03 	ldbu	r3,-12(fp)
 40010ac:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
 40010b0:	e0bffb17 	ldw	r2,-20(fp)
 40010b4:	e0ffff17 	ldw	r3,-4(fp)
 40010b8:	19403fcc 	andi	r5,r3,255
 40010bc:	10c00003 	ldbu	r3,0(r2)
 40010c0:	1806703a 	and	r3,r3,zero
 40010c4:	1809883a 	mov	r4,r3
 40010c8:	2807883a 	mov	r3,r5
 40010cc:	20c6b03a 	or	r3,r4,r3
 40010d0:	10c00005 	stb	r3,0(r2)
 40010d4:	e0ffff17 	ldw	r3,-4(fp)
 40010d8:	1806d23a 	srli	r3,r3,8
 40010dc:	19403fcc 	andi	r5,r3,255
 40010e0:	10c00043 	ldbu	r3,1(r2)
 40010e4:	1806703a 	and	r3,r3,zero
 40010e8:	1809883a 	mov	r4,r3
 40010ec:	2807883a 	mov	r3,r5
 40010f0:	20c6b03a 	or	r3,r4,r3
 40010f4:	10c00045 	stb	r3,1(r2)
 40010f8:	e0ffff17 	ldw	r3,-4(fp)
 40010fc:	1806d43a 	srli	r3,r3,16
 4001100:	19403fcc 	andi	r5,r3,255
 4001104:	10c00083 	ldbu	r3,2(r2)
 4001108:	1806703a 	and	r3,r3,zero
 400110c:	1809883a 	mov	r4,r3
 4001110:	2807883a 	mov	r3,r5
 4001114:	20c6b03a 	or	r3,r4,r3
 4001118:	10c00085 	stb	r3,2(r2)
 400111c:	e0ffff17 	ldw	r3,-4(fp)
 4001120:	180ad63a 	srli	r5,r3,24
 4001124:	10c000c3 	ldbu	r3,3(r2)
 4001128:	1806703a 	and	r3,r3,zero
 400112c:	1809883a 	mov	r4,r3
 4001130:	2807883a 	mov	r3,r5
 4001134:	20c6b03a 	or	r3,r4,r3
 4001138:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
 400113c:	e0bffb17 	ldw	r2,-20(fp)
 4001140:	e0fffe03 	ldbu	r3,-8(fp)
 4001144:	10c00145 	stb	r3,5(r2)

        return 0;
 4001148:	0005883a 	mov	r2,zero
}
 400114c:	e037883a 	mov	sp,fp
 4001150:	dfc00117 	ldw	ra,4(sp)
 4001154:	df000017 	ldw	fp,0(sp)
 4001158:	dec00204 	addi	sp,sp,8
 400115c:	f800283a 	ret

04001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 4001160:	defff804 	addi	sp,sp,-32
 4001164:	dfc00715 	stw	ra,28(sp)
 4001168:	df000615 	stw	fp,24(sp)
 400116c:	df000604 	addi	fp,sp,24
 4001170:	e13ffc15 	stw	r4,-16(fp)
 4001174:	2807883a 	mov	r3,r5
 4001178:	3005883a 	mov	r2,r6
 400117c:	e1ffff15 	stw	r7,-4(fp)
 4001180:	e0fffd05 	stb	r3,-12(fp)
 4001184:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 4001188:	e0bffc17 	ldw	r2,-16(fp)
 400118c:	e0fffd03 	ldbu	r3,-12(fp)
 4001190:	180b883a 	mov	r5,r3
 4001194:	1009883a 	mov	r4,r2
 4001198:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 400119c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
 40011a0:	e0bffa17 	ldw	r2,-24(fp)
 40011a4:	1000021e 	bne	r2,zero,40011b0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40011a8:	00bff584 	movi	r2,-42
 40011ac:	00004a06 	br	40012d8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
 40011b0:	e0bffa17 	ldw	r2,-24(fp)
 40011b4:	10c00003 	ldbu	r3,0(r2)
 40011b8:	11000043 	ldbu	r4,1(r2)
 40011bc:	2008923a 	slli	r4,r4,8
 40011c0:	20c6b03a 	or	r3,r4,r3
 40011c4:	11000083 	ldbu	r4,2(r2)
 40011c8:	2008943a 	slli	r4,r4,16
 40011cc:	20c6b03a 	or	r3,r4,r3
 40011d0:	108000c3 	ldbu	r2,3(r2)
 40011d4:	1004963a 	slli	r2,r2,24
 40011d8:	10c4b03a 	or	r2,r2,r3
 40011dc:	1000021e 	bne	r2,zero,40011e8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
 40011e0:	00bff5c4 	movi	r2,-41
 40011e4:	00003c06 	br	40012d8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
 40011e8:	e0bffd03 	ldbu	r2,-12(fp)
 40011ec:	e0fffe03 	ldbu	r3,-8(fp)
 40011f0:	180d883a 	mov	r6,r3
 40011f4:	100b883a 	mov	r5,r2
 40011f8:	e13ffc17 	ldw	r4,-16(fp)
 40011fc:	4000f300 	call	4000f30 <_ZN3USB14getEpInfoEntryEhh>
 4001200:	1007883a 	mov	r3,r2
 4001204:	e0bfff17 	ldw	r2,-4(fp)
 4001208:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
 400120c:	e0bfff17 	ldw	r2,-4(fp)
 4001210:	10800017 	ldw	r2,0(r2)
 4001214:	1000021e 	bne	r2,zero,4001220 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 4001218:	00bff6c4 	movi	r2,-37
 400121c:	00002e06 	br	40012d8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 4001220:	e0bfff17 	ldw	r2,-4(fp)
 4001224:	10800017 	ldw	r2,0(r2)
 4001228:	10800083 	ldbu	r2,2(r2)
 400122c:	1004d0ba 	srli	r2,r2,2
 4001230:	10803fcc 	andi	r2,r2,255
 4001234:	10c00410 	cmplti	r3,r2,16
 4001238:	1800011e 	bne	r3,zero,4001240 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
 400123c:	008003c4 	movi	r2,15
 4001240:	00c00044 	movi	r3,1
 4001244:	1884983a 	sll	r2,r3,r2
 4001248:	1007883a 	mov	r3,r2
 400124c:	e0800217 	ldw	r2,8(fp)
 4001250:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
 4001254:	e0800217 	ldw	r2,8(fp)
 4001258:	1080000b 	ldhu	r2,0(r2)
 400125c:	10bfffc4 	addi	r2,r2,-1
 4001260:	1007883a 	mov	r3,r2
 4001264:	e0800217 	ldw	r2,8(fp)
 4001268:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 400126c:	e0bffd03 	ldbu	r2,-12(fp)
 4001270:	100d883a 	mov	r6,r2
 4001274:	01403804 	movi	r5,224
 4001278:	e13ffc17 	ldw	r4,-16(fp)
 400127c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
 4001280:	01403604 	movi	r5,216
 4001284:	e13ffc17 	ldw	r4,-16(fp)
 4001288:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 400128c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 4001290:	e0bffa17 	ldw	r2,-24(fp)
 4001294:	10800183 	ldbu	r2,6(r2)
 4001298:	10803fcc 	andi	r2,r2,255
 400129c:	10000726 	beq	r2,zero,40012bc <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
 40012a0:	e0bffc17 	ldw	r2,-16(fp)
 40012a4:	10c02e03 	ldbu	r3,184(r2)
 40012a8:	e0bffb03 	ldbu	r2,-20(fp)
 40012ac:	1884b03a 	or	r2,r3,r2
 40012b0:	10800094 	ori	r2,r2,2
 40012b4:	10803fcc 	andi	r2,r2,255
 40012b8:	00000206 	br	40012c4 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
 40012bc:	e0bffb03 	ldbu	r2,-20(fp)
 40012c0:	10803e4c 	andi	r2,r2,249
 40012c4:	100d883a 	mov	r6,r2
 40012c8:	01403604 	movi	r5,216
 40012cc:	e13ffc17 	ldw	r4,-16(fp)
 40012d0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        return 0;
 40012d4:	0005883a 	mov	r2,zero
}
 40012d8:	e037883a 	mov	sp,fp
 40012dc:	dfc00117 	ldw	ra,4(sp)
 40012e0:	df000017 	ldw	fp,0(sp)
 40012e4:	dec00204 	addi	sp,sp,8
 40012e8:	f800283a 	ret

040012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 40012ec:	deffeb04 	addi	sp,sp,-84
 40012f0:	dfc01415 	stw	ra,80(sp)
 40012f4:	df001315 	stw	fp,76(sp)
 40012f8:	dc001215 	stw	r16,72(sp)
 40012fc:	df001304 	addi	fp,sp,76
 4001300:	e13ff515 	stw	r4,-44(fp)
 4001304:	2815883a 	mov	r10,r5
 4001308:	3013883a 	mov	r9,r6
 400130c:	3811883a 	mov	r8,r7
 4001310:	e1c00217 	ldw	r7,8(fp)
 4001314:	e1800317 	ldw	r6,12(fp)
 4001318:	e1400417 	ldw	r5,16(fp)
 400131c:	e1000517 	ldw	r4,20(fp)
 4001320:	e0c00617 	ldw	r3,24(fp)
 4001324:	e0800717 	ldw	r2,28(fp)
 4001328:	e2bff605 	stb	r10,-40(fp)
 400132c:	e27ff705 	stb	r9,-36(fp)
 4001330:	e23ff805 	stb	r8,-32(fp)
 4001334:	e1fff905 	stb	r7,-28(fp)
 4001338:	e1bffa05 	stb	r6,-24(fp)
 400133c:	e17ffb05 	stb	r5,-20(fp)
 4001340:	e13ffc0d 	sth	r4,-16(fp)
 4001344:	e0fffd0d 	sth	r3,-12(fp)
 4001348:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
 400134c:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 4001350:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
 4001354:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 4001358:	e0fff603 	ldbu	r3,-40(fp)
 400135c:	e13ff703 	ldbu	r4,-36(fp)
 4001360:	e17ff304 	addi	r5,fp,-52
 4001364:	e0bff404 	addi	r2,fp,-48
 4001368:	d8800015 	stw	r2,0(sp)
 400136c:	280f883a 	mov	r7,r5
 4001370:	200d883a 	mov	r6,r4
 4001374:	180b883a 	mov	r5,r3
 4001378:	e13ff517 	ldw	r4,-44(fp)
 400137c:	40011600 	call	4001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 4001380:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
 4001384:	e0bfef03 	ldbu	r2,-68(fp)
 4001388:	10000226 	beq	r2,zero,4001394 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
 400138c:	e0bfef03 	ldbu	r2,-68(fp)
 4001390:	00009406 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
 4001394:	e0bff803 	ldbu	r2,-32(fp)
 4001398:	1080200c 	andi	r2,r2,128
 400139c:	0084803a 	cmplt	r2,zero,r2
 40013a0:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 40013a4:	e0bff803 	ldbu	r2,-32(fp)
 40013a8:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
 40013ac:	e0bff903 	ldbu	r2,-28(fp)
 40013b0:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
 40013b4:	e0bffa03 	ldbu	r2,-24(fp)
 40013b8:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
 40013bc:	e0bffb03 	ldbu	r2,-20(fp)
 40013c0:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
 40013c4:	e0bffc0b 	ldhu	r2,-16(fp)
 40013c8:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
 40013cc:	e0bffd0b 	ldhu	r2,-12(fp)
 40013d0:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 40013d4:	e0bff104 	addi	r2,fp,-60
 40013d8:	100f883a 	mov	r7,r2
 40013dc:	01800204 	movi	r6,8
 40013e0:	01400804 	movi	r5,32
 40013e4:	e13ff517 	ldw	r4,-44(fp)
 40013e8:	40094400 	call	4009440 <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 40013ec:	e0bff703 	ldbu	r2,-36(fp)
 40013f0:	e0fff40b 	ldhu	r3,-48(fp)
 40013f4:	18ffffcc 	andi	r3,r3,65535
 40013f8:	180f883a 	mov	r7,r3
 40013fc:	100d883a 	mov	r6,r2
 4001400:	01400404 	movi	r5,16
 4001404:	e13ff517 	ldw	r4,-44(fp)
 4001408:	4001dec0 	call	4001dec <_ZN3USB11dispatchPktEhht>
 400140c:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
 4001410:	e0bfef03 	ldbu	r2,-68(fp)
 4001414:	10000226 	beq	r2,zero,4001420 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
 4001418:	e0bfef03 	ldbu	r2,-68(fp)
 400141c:	00007106 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
 4001420:	e0800817 	ldw	r2,32(fp)
 4001424:	10006226 	beq	r2,zero,40015b0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
 4001428:	e0bff003 	ldbu	r2,-64(fp)
 400142c:	10004a26 	beq	r2,zero,4001558 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
 4001430:	e0bffd0b 	ldhu	r2,-12(fp)
 4001434:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 4001438:	e0bff317 	ldw	r2,-52(fp)
 400143c:	10c00083 	ldbu	r3,2(r2)
 4001440:	18c00094 	ori	r3,r3,2
 4001444:	10c00085 	stb	r3,2(r2)

                        while(left) {
 4001448:	e0bfef8b 	ldhu	r2,-66(fp)
 400144c:	10005426 	beq	r2,zero,40015a0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 4001450:	e0bffe0b 	ldhu	r2,-8(fp)
 4001454:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 4001458:	e0fff317 	ldw	r3,-52(fp)
 400145c:	e0bff40b 	ldhu	r2,-48(fp)
 4001460:	113fffcc 	andi	r4,r2,65535
 4001464:	e17ff484 	addi	r5,fp,-46
 4001468:	d8000115 	stw	zero,4(sp)
 400146c:	e0800817 	ldw	r2,32(fp)
 4001470:	d8800015 	stw	r2,0(sp)
 4001474:	280f883a 	mov	r7,r5
 4001478:	200d883a 	mov	r6,r4
 400147c:	180b883a 	mov	r5,r3
 4001480:	e13ff517 	ldw	r4,-44(fp)
 4001484:	40016e40 	call	40016e4 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 4001488:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
 400148c:	e0bfef03 	ldbu	r2,-68(fp)
 4001490:	10800198 	cmpnei	r2,r2,6
 4001494:	1000111e 	bne	r2,zero,40014dc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 4001498:	e43ff317 	ldw	r16,-52(fp)
 400149c:	01403e04 	movi	r5,248
 40014a0:	e13ff517 	ldw	r4,-44(fp)
 40014a4:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 40014a8:	10803fcc 	andi	r2,r2,255
 40014ac:	1080080c 	andi	r2,r2,32
 40014b0:	1005003a 	cmpeq	r2,r2,zero
 40014b4:	1080004c 	andi	r2,r2,1
 40014b8:	1089883a 	add	r4,r2,r2
 40014bc:	80c00083 	ldbu	r3,2(r16)
 40014c0:	00bfff44 	movi	r2,-3
 40014c4:	1884703a 	and	r2,r3,r2
 40014c8:	1007883a 	mov	r3,r2
 40014cc:	2005883a 	mov	r2,r4
 40014d0:	1884b03a 	or	r2,r3,r2
 40014d4:	80800085 	stb	r2,2(r16)
 40014d8:	003fdb06 	br	4001448 <__alt_mem_onchip_memory2_0+0xfc0001a8>
                                        continue;
                                }

                                if(rcode)
 40014dc:	e0bfef03 	ldbu	r2,-68(fp)
 40014e0:	10000226 	beq	r2,zero,40014ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
 40014e4:	e0bfef03 	ldbu	r2,-68(fp)
 40014e8:	00003e06 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 40014ec:	e0bfef03 	ldbu	r2,-68(fp)
 40014f0:	1000101e 	bne	r2,zero,4001534 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
 40014f4:	e0800917 	ldw	r2,36(fp)
 40014f8:	10000e26 	beq	r2,zero,4001534 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 40014fc:	e0800917 	ldw	r2,36(fp)
 4001500:	10800017 	ldw	r2,0(r2)
 4001504:	10800017 	ldw	r2,0(r2)
 4001508:	e0fff48b 	ldhu	r3,-46(fp)
 400150c:	197fffcc 	andi	r5,r3,65535
 4001510:	e13ffd0b 	ldhu	r4,-12(fp)
 4001514:	e0ffef8b 	ldhu	r3,-66(fp)
 4001518:	20c7c83a 	sub	r3,r4,r3
 400151c:	e0fff08d 	sth	r3,-62(fp)
 4001520:	e0fff084 	addi	r3,fp,-62
 4001524:	180f883a 	mov	r7,r3
 4001528:	e1800817 	ldw	r6,32(fp)
 400152c:	e1000917 	ldw	r4,36(fp)
 4001530:	103ee83a 	callr	r2

                                left -= read;
 4001534:	e0bff48b 	ldhu	r2,-46(fp)
 4001538:	e0ffef8b 	ldhu	r3,-66(fp)
 400153c:	1885c83a 	sub	r2,r3,r2
 4001540:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
 4001544:	e0bff48b 	ldhu	r2,-46(fp)
 4001548:	10ffffcc 	andi	r3,r2,65535
 400154c:	e0bffe0b 	ldhu	r2,-8(fp)
 4001550:	18801236 	bltu	r3,r2,400159c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
 4001554:	003fbc06 	br	4001448 <__alt_mem_onchip_memory2_0+0xfc0001a8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 4001558:	e0bff317 	ldw	r2,-52(fp)
 400155c:	10c00083 	ldbu	r3,2(r2)
 4001560:	18c00054 	ori	r3,r3,1
 4001564:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 4001568:	e0fff317 	ldw	r3,-52(fp)
 400156c:	e0bff40b 	ldhu	r2,-48(fp)
 4001570:	113fffcc 	andi	r4,r2,65535
 4001574:	e17ffe0b 	ldhu	r5,-8(fp)
 4001578:	e0800817 	ldw	r2,32(fp)
 400157c:	d8800015 	stw	r2,0(sp)
 4001580:	280f883a 	mov	r7,r5
 4001584:	200d883a 	mov	r6,r4
 4001588:	180b883a 	mov	r5,r3
 400158c:	e13ff517 	ldw	r4,-44(fp)
 4001590:	4001a400 	call	4001a40 <_ZN3USB11OutTransferEP6EpInfottPh>
 4001594:	e0bfef05 	stb	r2,-68(fp)
 4001598:	00000106 	br	40015a0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
 400159c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
 40015a0:	e0bfef03 	ldbu	r2,-68(fp)
 40015a4:	10000226 	beq	r2,zero,40015b0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
 40015a8:	e0bfef03 	ldbu	r2,-68(fp)
 40015ac:	00000d06 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 40015b0:	e0bff003 	ldbu	r2,-64(fp)
 40015b4:	10000226 	beq	r2,zero,40015c0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
 40015b8:	00802804 	movi	r2,160
 40015bc:	00000106 	br	40015c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
 40015c0:	00802004 	movi	r2,128
 40015c4:	e0fff703 	ldbu	r3,-36(fp)
 40015c8:	e13ff40b 	ldhu	r4,-48(fp)
 40015cc:	213fffcc 	andi	r4,r4,65535
 40015d0:	200f883a 	mov	r7,r4
 40015d4:	180d883a 	mov	r6,r3
 40015d8:	100b883a 	mov	r5,r2
 40015dc:	e13ff517 	ldw	r4,-44(fp)
 40015e0:	4001dec0 	call	4001dec <_ZN3USB11dispatchPktEhht>
}
 40015e4:	e6ffff04 	addi	sp,fp,-4
 40015e8:	dfc00217 	ldw	ra,8(sp)
 40015ec:	df000117 	ldw	fp,4(sp)
 40015f0:	dc000017 	ldw	r16,0(sp)
 40015f4:	dec00304 	addi	sp,sp,12
 40015f8:	f800283a 	ret

040015fc <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 40015fc:	defff404 	addi	sp,sp,-48
 4001600:	dfc00b15 	stw	ra,44(sp)
 4001604:	df000a15 	stw	fp,40(sp)
 4001608:	df000a04 	addi	fp,sp,40
 400160c:	e13ffb15 	stw	r4,-20(fp)
 4001610:	2809883a 	mov	r4,r5
 4001614:	3007883a 	mov	r3,r6
 4001618:	e1fffe15 	stw	r7,-8(fp)
 400161c:	e0800317 	ldw	r2,12(fp)
 4001620:	e13ffc05 	stb	r4,-16(fp)
 4001624:	e0fffd05 	stb	r3,-12(fp)
 4001628:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
 400162c:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
 4001630:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 4001634:	e0fffc03 	ldbu	r3,-16(fp)
 4001638:	e13ffd03 	ldbu	r4,-12(fp)
 400163c:	e17ff904 	addi	r5,fp,-28
 4001640:	e0bffa04 	addi	r2,fp,-24
 4001644:	d8800015 	stw	r2,0(sp)
 4001648:	280f883a 	mov	r7,r5
 400164c:	200d883a 	mov	r6,r4
 4001650:	180b883a 	mov	r5,r3
 4001654:	e13ffb17 	ldw	r4,-20(fp)
 4001658:	40011600 	call	4001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 400165c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
 4001660:	e0bff803 	ldbu	r2,-32(fp)
 4001664:	10000e26 	beq	r2,zero,40016a0 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 4001668:	e0bff803 	ldbu	r2,-32(fp)
 400166c:	01402044 	movi	r5,129
 4001670:	1009883a 	mov	r4,r2
 4001674:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 4001678:	e0bffc03 	ldbu	r2,-16(fp)
 400167c:	01402044 	movi	r5,129
 4001680:	1009883a 	mov	r4,r2
 4001684:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 4001688:	e0bffd03 	ldbu	r2,-12(fp)
 400168c:	01402044 	movi	r5,129
 4001690:	1009883a 	mov	r4,r2
 4001694:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 4001698:	e0bff803 	ldbu	r2,-32(fp)
 400169c:	00000c06 	br	40016d0 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 40016a0:	e0fff917 	ldw	r3,-28(fp)
 40016a4:	e0bffa0b 	ldhu	r2,-24(fp)
 40016a8:	113fffcc 	andi	r4,r2,65535
 40016ac:	e0bfff03 	ldbu	r2,-4(fp)
 40016b0:	d8800115 	stw	r2,4(sp)
 40016b4:	e0800217 	ldw	r2,8(fp)
 40016b8:	d8800015 	stw	r2,0(sp)
 40016bc:	e1fffe17 	ldw	r7,-8(fp)
 40016c0:	200d883a 	mov	r6,r4
 40016c4:	180b883a 	mov	r5,r3
 40016c8:	e13ffb17 	ldw	r4,-20(fp)
 40016cc:	40016e40 	call	40016e4 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
 40016d0:	e037883a 	mov	sp,fp
 40016d4:	dfc00117 	ldw	ra,4(sp)
 40016d8:	df000017 	ldw	fp,0(sp)
 40016dc:	dec00204 	addi	sp,sp,8
 40016e0:	f800283a 	ret

040016e4 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 40016e4:	defff704 	addi	sp,sp,-36
 40016e8:	dfc00815 	stw	ra,32(sp)
 40016ec:	df000715 	stw	fp,28(sp)
 40016f0:	df000704 	addi	fp,sp,28
 40016f4:	e13ffb15 	stw	r4,-20(fp)
 40016f8:	e17ffc15 	stw	r5,-16(fp)
 40016fc:	3007883a 	mov	r3,r6
 4001700:	e1fffe15 	stw	r7,-8(fp)
 4001704:	e0800317 	ldw	r2,12(fp)
 4001708:	e0fffd0d 	sth	r3,-12(fp)
 400170c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
 4001710:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 4001714:	e0bffe17 	ldw	r2,-8(fp)
 4001718:	1080000b 	ldhu	r2,0(r2)
 400171c:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 4001720:	e0bffc17 	ldw	r2,-16(fp)
 4001724:	10800043 	ldbu	r2,1(r2)
 4001728:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
 400172c:	e0bffe17 	ldw	r2,-8(fp)
 4001730:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 4001734:	e0bffc17 	ldw	r2,-16(fp)
 4001738:	10800083 	ldbu	r2,2(r2)
 400173c:	1080008c 	andi	r2,r2,2
 4001740:	10803fcc 	andi	r2,r2,255
 4001744:	10000226 	beq	r2,zero,4001750 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
 4001748:	00800804 	movi	r2,32
 400174c:	00000106 	br	4001754 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
 4001750:	00800404 	movi	r2,16
 4001754:	100d883a 	mov	r6,r2
 4001758:	01403a04 	movi	r5,232
 400175c:	e13ffb17 	ldw	r4,-20(fp)
 4001760:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 4001764:	e0bffc17 	ldw	r2,-16(fp)
 4001768:	10800003 	ldbu	r2,0(r2)
 400176c:	10803fcc 	andi	r2,r2,255
 4001770:	e0fffd0b 	ldhu	r3,-12(fp)
 4001774:	180f883a 	mov	r7,r3
 4001778:	100d883a 	mov	r6,r2
 400177c:	000b883a 	mov	r5,zero
 4001780:	e13ffb17 	ldw	r4,-20(fp)
 4001784:	4001dec0 	call	4001dec <_ZN3USB11dispatchPktEhht>
 4001788:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
 400178c:	e0bff903 	ldbu	r2,-28(fp)
 4001790:	10800198 	cmpnei	r2,r2,6
 4001794:	10001e1e 	bne	r2,zero,4001810 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 4001798:	01403e04 	movi	r5,248
 400179c:	e13ffb17 	ldw	r4,-20(fp)
 40017a0:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 40017a4:	10803fcc 	andi	r2,r2,255
 40017a8:	1080040c 	andi	r2,r2,16
 40017ac:	1005003a 	cmpeq	r2,r2,zero
 40017b0:	1007883a 	mov	r3,r2
 40017b4:	e0bffc17 	ldw	r2,-16(fp)
 40017b8:	18c0004c 	andi	r3,r3,1
 40017bc:	18cb883a 	add	r5,r3,r3
 40017c0:	11000083 	ldbu	r4,2(r2)
 40017c4:	00ffff44 	movi	r3,-3
 40017c8:	20c6703a 	and	r3,r4,r3
 40017cc:	1809883a 	mov	r4,r3
 40017d0:	2807883a 	mov	r3,r5
 40017d4:	20c6b03a 	or	r3,r4,r3
 40017d8:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 40017dc:	e0bffc17 	ldw	r2,-16(fp)
 40017e0:	10800083 	ldbu	r2,2(r2)
 40017e4:	1080008c 	andi	r2,r2,2
 40017e8:	10803fcc 	andi	r2,r2,255
 40017ec:	10000226 	beq	r2,zero,40017f8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
 40017f0:	00800804 	movi	r2,32
 40017f4:	00000106 	br	40017fc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
 40017f8:	00800404 	movi	r2,16
 40017fc:	100d883a 	mov	r6,r2
 4001800:	01403a04 	movi	r5,232
 4001804:	e13ffb17 	ldw	r4,-20(fp)
 4001808:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        continue;
 400180c:	00005806 	br	4001970 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
 4001810:	e0bff903 	ldbu	r2,-28(fp)
 4001814:	1000571e 	bne	r2,zero,4001974 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 4001818:	01403204 	movi	r5,200
 400181c:	e13ffb17 	ldw	r4,-20(fp)
 4001820:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001824:	10803fcc 	andi	r2,r2,255
 4001828:	1080010c 	andi	r2,r2,4
 400182c:	1005003a 	cmpeq	r2,r2,zero
 4001830:	10803fcc 	andi	r2,r2,255
 4001834:	10000326 	beq	r2,zero,4001844 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 4001838:	00bffc04 	movi	r2,-16
 400183c:	e0bff905 	stb	r2,-28(fp)
                        break;
 4001840:	00004d06 	br	4001978 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 4001844:	01400c04 	movi	r5,48
 4001848:	e13ffb17 	ldw	r4,-20(fp)
 400184c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001850:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 4001854:	e0bff943 	ldbu	r2,-27(fp)
 4001858:	10bfffcc 	andi	r2,r2,65535
 400185c:	e0fffa0b 	ldhu	r3,-24(fp)
 4001860:	1880022e 	bgeu	r3,r2,400186c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 4001864:	e0bffa0b 	ldhu	r2,-24(fp)
 4001868:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 400186c:	e0bffe17 	ldw	r2,-8(fp)
 4001870:	1080000b 	ldhu	r2,0(r2)
 4001874:	1007883a 	mov	r3,r2
 4001878:	e0bffa0b 	ldhu	r2,-24(fp)
 400187c:	10c5c83a 	sub	r2,r2,r3
 4001880:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
 4001884:	e0bff98f 	ldh	r2,-26(fp)
 4001888:	1000010e 	bge	r2,zero,4001890 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
 400188c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 4001890:	e0bff943 	ldbu	r2,-27(fp)
 4001894:	e0fff98f 	ldh	r3,-26(fp)
 4001898:	1880010e 	bge	r3,r2,40018a0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
 400189c:	1805883a 	mov	r2,r3
 40018a0:	10803fcc 	andi	r2,r2,255
 40018a4:	e1c00217 	ldw	r7,8(fp)
 40018a8:	100d883a 	mov	r6,r2
 40018ac:	01400204 	movi	r5,8
 40018b0:	e13ffb17 	ldw	r4,-20(fp)
 40018b4:	40096600 	call	4009660 <_ZN8MAX3421e7bytesRdEhhPh>
 40018b8:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 40018bc:	01800104 	movi	r6,4
 40018c0:	01403204 	movi	r5,200
 40018c4:	e13ffb17 	ldw	r4,-20(fp)
 40018c8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 40018cc:	e0bffe17 	ldw	r2,-8(fp)
 40018d0:	10c0000b 	ldhu	r3,0(r2)
 40018d4:	e0bff943 	ldbu	r2,-27(fp)
 40018d8:	1885883a 	add	r2,r3,r2
 40018dc:	1007883a 	mov	r3,r2
 40018e0:	e0bffe17 	ldw	r2,-8(fp)
 40018e4:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 40018e8:	e0fff943 	ldbu	r3,-27(fp)
 40018ec:	e0bffa83 	ldbu	r2,-22(fp)
 40018f0:	18800536 	bltu	r3,r2,4001908 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
 40018f4:	e0bffe17 	ldw	r2,-8(fp)
 40018f8:	1080000b 	ldhu	r2,0(r2)
 40018fc:	10ffffcc 	andi	r3,r2,65535
 4001900:	e0bffa0b 	ldhu	r2,-24(fp)
 4001904:	18801536 	bltu	r3,r2,400195c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 4001908:	01403e04 	movi	r5,248
 400190c:	e13ffb17 	ldw	r4,-20(fp)
 4001910:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001914:	10803fcc 	andi	r2,r2,255
 4001918:	1080040c 	andi	r2,r2,16
 400191c:	10000226 	beq	r2,zero,4001928 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
 4001920:	00c00044 	movi	r3,1
 4001924:	00000106 	br	400192c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
 4001928:	0007883a 	mov	r3,zero
 400192c:	e0bffc17 	ldw	r2,-16(fp)
 4001930:	18c0004c 	andi	r3,r3,1
 4001934:	18cb883a 	add	r5,r3,r3
 4001938:	11000083 	ldbu	r4,2(r2)
 400193c:	00ffff44 	movi	r3,-3
 4001940:	20c6703a 	and	r3,r4,r3
 4001944:	1809883a 	mov	r4,r3
 4001948:	2807883a 	mov	r3,r5
 400194c:	20c6b03a 	or	r3,r4,r3
 4001950:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
 4001954:	e03ff905 	stb	zero,-28(fp)
                        break;
 4001958:	00000706 	br	4001978 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
 400195c:	e0bfff03 	ldbu	r2,-4(fp)
 4001960:	103f8026 	beq	r2,zero,4001764 <__alt_mem_onchip_memory2_0+0xfc0004c4>
                        delay(bInterval); // Delay according to polling interval
 4001964:	e0bfff03 	ldbu	r2,-4(fp)
 4001968:	1009883a 	mov	r4,r2
 400196c:	4000dd40 	call	4000dd4 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
 4001970:	003f7c06 	br	4001764 <__alt_mem_onchip_memory2_0+0xfc0004c4>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
 4001974:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
 4001978:	e0bff903 	ldbu	r2,-28(fp)
}
 400197c:	e037883a 	mov	sp,fp
 4001980:	dfc00117 	ldw	ra,4(sp)
 4001984:	df000017 	ldw	fp,0(sp)
 4001988:	dec00204 	addi	sp,sp,8
 400198c:	f800283a 	ret

04001990 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 4001990:	defff604 	addi	sp,sp,-40
 4001994:	dfc00915 	stw	ra,36(sp)
 4001998:	df000815 	stw	fp,32(sp)
 400199c:	df000804 	addi	fp,sp,32
 40019a0:	e13ffc15 	stw	r4,-16(fp)
 40019a4:	2809883a 	mov	r4,r5
 40019a8:	3007883a 	mov	r3,r6
 40019ac:	3805883a 	mov	r2,r7
 40019b0:	e13ffd05 	stb	r4,-12(fp)
 40019b4:	e0fffe05 	stb	r3,-8(fp)
 40019b8:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
 40019bc:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
 40019c0:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 40019c4:	e0fffd03 	ldbu	r3,-12(fp)
 40019c8:	e13ffe03 	ldbu	r4,-8(fp)
 40019cc:	e17ffa04 	addi	r5,fp,-24
 40019d0:	e0bffb04 	addi	r2,fp,-20
 40019d4:	d8800015 	stw	r2,0(sp)
 40019d8:	280f883a 	mov	r7,r5
 40019dc:	200d883a 	mov	r6,r4
 40019e0:	180b883a 	mov	r5,r3
 40019e4:	e13ffc17 	ldw	r4,-16(fp)
 40019e8:	40011600 	call	4001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 40019ec:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
 40019f0:	e0bff903 	ldbu	r2,-28(fp)
 40019f4:	10000226 	beq	r2,zero,4001a00 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
 40019f8:	e0bff903 	ldbu	r2,-28(fp)
 40019fc:	00000b06 	br	4001a2c <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 4001a00:	e0fffa17 	ldw	r3,-24(fp)
 4001a04:	e0bffb0b 	ldhu	r2,-20(fp)
 4001a08:	113fffcc 	andi	r4,r2,65535
 4001a0c:	e17fff0b 	ldhu	r5,-4(fp)
 4001a10:	e0800217 	ldw	r2,8(fp)
 4001a14:	d8800015 	stw	r2,0(sp)
 4001a18:	280f883a 	mov	r7,r5
 4001a1c:	200d883a 	mov	r6,r4
 4001a20:	180b883a 	mov	r5,r3
 4001a24:	e13ffc17 	ldw	r4,-16(fp)
 4001a28:	4001a400 	call	4001a40 <_ZN3USB11OutTransferEP6EpInfottPh>
}
 4001a2c:	e037883a 	mov	sp,fp
 4001a30:	dfc00117 	ldw	ra,4(sp)
 4001a34:	df000017 	ldw	fp,0(sp)
 4001a38:	dec00204 	addi	sp,sp,8
 4001a3c:	f800283a 	ret

04001a40 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 4001a40:	defff404 	addi	sp,sp,-48
 4001a44:	dfc00b15 	stw	ra,44(sp)
 4001a48:	df000a15 	stw	fp,40(sp)
 4001a4c:	df000a04 	addi	fp,sp,40
 4001a50:	e13ffc15 	stw	r4,-16(fp)
 4001a54:	e17ffd15 	stw	r5,-12(fp)
 4001a58:	3007883a 	mov	r3,r6
 4001a5c:	3805883a 	mov	r2,r7
 4001a60:	e0fffe0d 	sth	r3,-8(fp)
 4001a64:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
 4001a68:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
 4001a6c:	e0800217 	ldw	r2,8(fp)
 4001a70:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 4001a74:	e0bfff0b 	ldhu	r2,-4(fp)
 4001a78:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
 4001a7c:	e0bffd17 	ldw	r2,-12(fp)
 4001a80:	10800043 	ldbu	r2,1(r2)
 4001a84:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
 4001a88:	e0bff903 	ldbu	r2,-28(fp)
 4001a8c:	10000326 	beq	r2,zero,4001a9c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 4001a90:	e0bff903 	ldbu	r2,-28(fp)
 4001a94:	10801070 	cmpltui	r2,r2,65
 4001a98:	1000021e 	bne	r2,zero,4001aa4 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 4001a9c:	00bff684 	movi	r2,-38
 4001aa0:	0000cd06 	br	4001dd8 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 4001aa4:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001aa8:	1084e204 	addi	r2,r2,5000
 4001aac:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 4001ab0:	e0bffd17 	ldw	r2,-12(fp)
 4001ab4:	10800083 	ldbu	r2,2(r2)
 4001ab8:	1080004c 	andi	r2,r2,1
 4001abc:	10803fcc 	andi	r2,r2,255
 4001ac0:	10000226 	beq	r2,zero,4001acc <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
 4001ac4:	00802004 	movi	r2,128
 4001ac8:	00000106 	br	4001ad0 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
 4001acc:	00801004 	movi	r2,64
 4001ad0:	100d883a 	mov	r6,r2
 4001ad4:	01403a04 	movi	r5,232
 4001ad8:	e13ffc17 	ldw	r4,-16(fp)
 4001adc:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
 4001ae0:	e0bff88b 	ldhu	r2,-30(fp)
 4001ae4:	1000a926 	beq	r2,zero,4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 4001ae8:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
 4001aec:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 4001af0:	e0bff903 	ldbu	r2,-28(fp)
 4001af4:	e17ff88b 	ldhu	r5,-30(fp)
 4001af8:	10ffffcc 	andi	r3,r2,65535
 4001afc:	293fffcc 	andi	r4,r5,65535
 4001b00:	20c0012e 	bgeu	r4,r3,4001b08 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
 4001b04:	2805883a 	mov	r2,r5
 4001b08:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 4001b0c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001b10:	10803fcc 	andi	r2,r2,255
 4001b14:	e1fff717 	ldw	r7,-36(fp)
 4001b18:	100d883a 	mov	r6,r2
 4001b1c:	01400404 	movi	r5,16
 4001b20:	e13ffc17 	ldw	r4,-16(fp)
 4001b24:	40094400 	call	4009440 <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 4001b28:	e0bffb0b 	ldhu	r2,-20(fp)
 4001b2c:	10803fcc 	andi	r2,r2,255
 4001b30:	100d883a 	mov	r6,r2
 4001b34:	01400e04 	movi	r5,56
 4001b38:	e13ffc17 	ldw	r4,-16(fp)
 4001b3c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 4001b40:	e0bffd17 	ldw	r2,-12(fp)
 4001b44:	10800003 	ldbu	r2,0(r2)
 4001b48:	10800814 	ori	r2,r2,32
 4001b4c:	10803fcc 	andi	r2,r2,255
 4001b50:	100d883a 	mov	r6,r2
 4001b54:	01403c04 	movi	r5,240
 4001b58:	e13ffc17 	ldw	r4,-16(fp)
 4001b5c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 4001b60:	01403204 	movi	r5,200
 4001b64:	e13ffc17 	ldw	r4,-16(fp)
 4001b68:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001b6c:	0084303a 	nor	r2,zero,r2
 4001b70:	10803fcc 	andi	r2,r2,255
 4001b74:	1004d1fa 	srli	r2,r2,7
 4001b78:	10803fcc 	andi	r2,r2,255
 4001b7c:	10000126 	beq	r2,zero,4001b84 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
 4001b80:	003ff706 	br	4001b60 <__alt_mem_onchip_memory2_0+0xfc0008c0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 4001b84:	01802004 	movi	r6,128
 4001b88:	01403204 	movi	r5,200
 4001b8c:	e13ffc17 	ldw	r4,-16(fp)
 4001b90:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 4001b94:	01403e04 	movi	r5,248
 4001b98:	e13ffc17 	ldw	r4,-16(fp)
 4001b9c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001ba0:	108003cc 	andi	r2,r2,15
 4001ba4:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 4001ba8:	e0bff603 	ldbu	r2,-40(fp)
 4001bac:	10000726 	beq	r2,zero,4001bcc <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 4001bb0:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001bb4:	1007883a 	mov	r3,r2
 4001bb8:	e0bffa17 	ldw	r2,-24(fp)
 4001bbc:	1885c83a 	sub	r2,r3,r2
 4001bc0:	1000020e 	bge	r2,zero,4001bcc <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 4001bc4:	00800044 	movi	r2,1
 4001bc8:	00000106 	br	4001bd0 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
 4001bcc:	0005883a 	mov	r2,zero
 4001bd0:	10803fcc 	andi	r2,r2,255
 4001bd4:	10006426 	beq	r2,zero,4001d68 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 4001bd8:	e0bff603 	ldbu	r2,-40(fp)
 4001bdc:	10c001a0 	cmpeqi	r3,r2,6
 4001be0:	1800151e 	bne	r3,zero,4001c38 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
 4001be4:	10c003a0 	cmpeqi	r3,r2,14
 4001be8:	18000c1e 	bne	r3,zero,4001c1c <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
 4001bec:	10800120 	cmpeqi	r2,r2,4
 4001bf0:	1000011e 	bne	r2,zero,4001bf8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 4001bf4:	00006506 	br	4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
 4001bf8:	e0bff80b 	ldhu	r2,-32(fp)
 4001bfc:	10800044 	addi	r2,r2,1
 4001c00:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
 4001c04:	e0bffe0b 	ldhu	r2,-8(fp)
 4001c08:	10002826 	beq	r2,zero,4001cac <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
 4001c0c:	e0fff80b 	ldhu	r3,-32(fp)
 4001c10:	e0bffe0b 	ldhu	r2,-8(fp)
 4001c14:	1880251e 	bne	r3,r2,4001cac <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
 4001c18:	00005c06 	br	4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
 4001c1c:	e0bff643 	ldbu	r2,-39(fp)
 4001c20:	10800044 	addi	r2,r2,1
 4001c24:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
 4001c28:	e0bff643 	ldbu	r2,-39(fp)
 4001c2c:	108000d8 	cmpnei	r2,r2,3
 4001c30:	1000201e 	bne	r2,zero,4001cb4 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
 4001c34:	00005506 	br	4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 4001c38:	01403e04 	movi	r5,248
 4001c3c:	e13ffc17 	ldw	r4,-16(fp)
 4001c40:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001c44:	10803fcc 	andi	r2,r2,255
 4001c48:	1080080c 	andi	r2,r2,32
 4001c4c:	1005003a 	cmpeq	r2,r2,zero
 4001c50:	1007883a 	mov	r3,r2
 4001c54:	e0bffd17 	ldw	r2,-12(fp)
 4001c58:	1940004c 	andi	r5,r3,1
 4001c5c:	11000083 	ldbu	r4,2(r2)
 4001c60:	00ffff84 	movi	r3,-2
 4001c64:	20c6703a 	and	r3,r4,r3
 4001c68:	1809883a 	mov	r4,r3
 4001c6c:	2807883a 	mov	r3,r5
 4001c70:	20c6b03a 	or	r3,r4,r3
 4001c74:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 4001c78:	e0bffd17 	ldw	r2,-12(fp)
 4001c7c:	10800083 	ldbu	r2,2(r2)
 4001c80:	1080004c 	andi	r2,r2,1
 4001c84:	10803fcc 	andi	r2,r2,255
 4001c88:	10000226 	beq	r2,zero,4001c94 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
 4001c8c:	00802004 	movi	r2,128
 4001c90:	00000106 	br	4001c98 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
 4001c94:	00801004 	movi	r2,64
 4001c98:	100d883a 	mov	r6,r2
 4001c9c:	01403a04 	movi	r5,232
 4001ca0:	e13ffc17 	ldw	r4,-16(fp)
 4001ca4:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                                        break;
 4001ca8:	00000306 	br	4001cb8 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
 4001cac:	0001883a 	nop
 4001cb0:	00000106 	br	4001cb8 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
 4001cb4:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 4001cb8:	000d883a 	mov	r6,zero
 4001cbc:	01400e04 	movi	r5,56
 4001cc0:	e13ffc17 	ldw	r4,-16(fp)
 4001cc4:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 4001cc8:	e0bff717 	ldw	r2,-36(fp)
 4001ccc:	10800003 	ldbu	r2,0(r2)
 4001cd0:	10803fcc 	andi	r2,r2,255
 4001cd4:	100d883a 	mov	r6,r2
 4001cd8:	01400404 	movi	r5,16
 4001cdc:	e13ffc17 	ldw	r4,-16(fp)
 4001ce0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 4001ce4:	e0bffb0b 	ldhu	r2,-20(fp)
 4001ce8:	10803fcc 	andi	r2,r2,255
 4001cec:	100d883a 	mov	r6,r2
 4001cf0:	01400e04 	movi	r5,56
 4001cf4:	e13ffc17 	ldw	r4,-16(fp)
 4001cf8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 4001cfc:	e0bffd17 	ldw	r2,-12(fp)
 4001d00:	10800003 	ldbu	r2,0(r2)
 4001d04:	10800814 	ori	r2,r2,32
 4001d08:	10803fcc 	andi	r2,r2,255
 4001d0c:	100d883a 	mov	r6,r2
 4001d10:	01403c04 	movi	r5,240
 4001d14:	e13ffc17 	ldw	r4,-16(fp)
 4001d18:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 4001d1c:	01403204 	movi	r5,200
 4001d20:	e13ffc17 	ldw	r4,-16(fp)
 4001d24:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001d28:	0084303a 	nor	r2,zero,r2
 4001d2c:	10803fcc 	andi	r2,r2,255
 4001d30:	1004d1fa 	srli	r2,r2,7
 4001d34:	10803fcc 	andi	r2,r2,255
 4001d38:	10000126 	beq	r2,zero,4001d40 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
 4001d3c:	003ff706 	br	4001d1c <__alt_mem_onchip_memory2_0+0xfc000a7c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 4001d40:	01802004 	movi	r6,128
 4001d44:	01403204 	movi	r5,200
 4001d48:	e13ffc17 	ldw	r4,-16(fp)
 4001d4c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 4001d50:	01403e04 	movi	r5,248
 4001d54:	e13ffc17 	ldw	r4,-16(fp)
 4001d58:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001d5c:	108003cc 	andi	r2,r2,15
 4001d60:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 4001d64:	003f9006 	br	4001ba8 <__alt_mem_onchip_memory2_0+0xfc000908>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 4001d68:	e0fff88b 	ldhu	r3,-30(fp)
 4001d6c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001d70:	1885c83a 	sub	r2,r3,r2
 4001d74:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
 4001d78:	e0bffb0b 	ldhu	r2,-20(fp)
 4001d7c:	e0fff717 	ldw	r3,-36(fp)
 4001d80:	1885883a 	add	r2,r3,r2
 4001d84:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
 4001d88:	003f5506 	br	4001ae0 <__alt_mem_onchip_memory2_0+0xfc000840>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 4001d8c:	01403e04 	movi	r5,248
 4001d90:	e13ffc17 	ldw	r4,-16(fp)
 4001d94:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001d98:	10803fcc 	andi	r2,r2,255
 4001d9c:	1080080c 	andi	r2,r2,32
 4001da0:	10000226 	beq	r2,zero,4001dac <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
 4001da4:	00c00044 	movi	r3,1
 4001da8:	00000106 	br	4001db0 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
 4001dac:	0007883a 	mov	r3,zero
 4001db0:	e0bffd17 	ldw	r2,-12(fp)
 4001db4:	1940004c 	andi	r5,r3,1
 4001db8:	11000083 	ldbu	r4,2(r2)
 4001dbc:	00ffff84 	movi	r3,-2
 4001dc0:	20c6703a 	and	r3,r4,r3
 4001dc4:	1809883a 	mov	r4,r3
 4001dc8:	2807883a 	mov	r3,r5
 4001dcc:	20c6b03a 	or	r3,r4,r3
 4001dd0:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
 4001dd4:	e0bff603 	ldbu	r2,-40(fp)
}
 4001dd8:	e037883a 	mov	sp,fp
 4001ddc:	dfc00117 	ldw	ra,4(sp)
 4001de0:	df000017 	ldw	fp,0(sp)
 4001de4:	dec00204 	addi	sp,sp,8
 4001de8:	f800283a 	ret

04001dec <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 4001dec:	defff704 	addi	sp,sp,-36
 4001df0:	dfc00815 	stw	ra,32(sp)
 4001df4:	df000715 	stw	fp,28(sp)
 4001df8:	df000704 	addi	fp,sp,28
 4001dfc:	e13ffc15 	stw	r4,-16(fp)
 4001e00:	2809883a 	mov	r4,r5
 4001e04:	3007883a 	mov	r3,r6
 4001e08:	3805883a 	mov	r2,r7
 4001e0c:	e13ffd05 	stb	r4,-12(fp)
 4001e10:	e0fffe05 	stb	r3,-8(fp)
 4001e14:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 4001e18:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001e1c:	1084e204 	addi	r2,r2,5000
 4001e20:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 4001e24:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
 4001e28:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
 4001e2c:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 4001e30:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001e34:	1007883a 	mov	r3,r2
 4001e38:	e0bffa17 	ldw	r2,-24(fp)
 4001e3c:	1885c83a 	sub	r2,r3,r2
 4001e40:	1004d7fa 	srli	r2,r2,31
 4001e44:	10803fcc 	andi	r2,r2,255
 4001e48:	10004226 	beq	r2,zero,4001f54 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 4001e4c:	e0fffd03 	ldbu	r3,-12(fp)
 4001e50:	e0bffe03 	ldbu	r2,-8(fp)
 4001e54:	1884b03a 	or	r2,r3,r2
 4001e58:	10803fcc 	andi	r2,r2,255
 4001e5c:	100d883a 	mov	r6,r2
 4001e60:	01403c04 	movi	r5,240
 4001e64:	e13ffc17 	ldw	r4,-16(fp)
 4001e68:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 4001e6c:	00bfffc4 	movi	r2,-1
 4001e70:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 4001e74:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001e78:	1007883a 	mov	r3,r2
 4001e7c:	e0bffa17 	ldw	r2,-24(fp)
 4001e80:	1885c83a 	sub	r2,r3,r2
 4001e84:	1004d7fa 	srli	r2,r2,31
 4001e88:	10803fcc 	andi	r2,r2,255
 4001e8c:	10000e26 	beq	r2,zero,4001ec8 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 4001e90:	01403204 	movi	r5,200
 4001e94:	e13ffc17 	ldw	r4,-16(fp)
 4001e98:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001e9c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
 4001ea0:	e0bffb03 	ldbu	r2,-20(fp)
 4001ea4:	10803fcc 	andi	r2,r2,255
 4001ea8:	1080201c 	xori	r2,r2,128
 4001eac:	10bfe004 	addi	r2,r2,-128
 4001eb0:	103ff00e 	bge	r2,zero,4001e74 <__alt_mem_onchip_memory2_0+0xfc000bd4>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 4001eb4:	01802004 	movi	r6,128
 4001eb8:	01403204 	movi	r5,200
 4001ebc:	e13ffc17 	ldw	r4,-16(fp)
 4001ec0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
 4001ec4:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 4001ec8:	01403e04 	movi	r5,248
 4001ecc:	e13ffc17 	ldw	r4,-16(fp)
 4001ed0:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001ed4:	108003cc 	andi	r2,r2,15
 4001ed8:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
 4001edc:	e0bff903 	ldbu	r2,-28(fp)
 4001ee0:	10c00120 	cmpeqi	r3,r2,4
 4001ee4:	1800031e 	bne	r3,zero,4001ef4 <_ZN3USB11dispatchPktEhht+0x108>
 4001ee8:	108003a0 	cmpeqi	r2,r2,14
 4001eec:	10000b1e 	bne	r2,zero,4001f1c <_ZN3USB11dispatchPktEhht+0x130>
 4001ef0:	00001206 	br	4001f3c <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
 4001ef4:	e0bff98b 	ldhu	r2,-26(fp)
 4001ef8:	10800044 	addi	r2,r2,1
 4001efc:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
 4001f00:	e0bfff0b 	ldhu	r2,-4(fp)
 4001f04:	10000f26 	beq	r2,zero,4001f44 <_ZN3USB11dispatchPktEhht+0x158>
 4001f08:	e0fff98b 	ldhu	r3,-26(fp)
 4001f0c:	e0bfff0b 	ldhu	r2,-4(fp)
 4001f10:	18800c1e 	bne	r3,r2,4001f44 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
 4001f14:	e0bff903 	ldbu	r2,-28(fp)
 4001f18:	00000f06 	br	4001f58 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 4001f1c:	e0bff943 	ldbu	r2,-27(fp)
 4001f20:	10800044 	addi	r2,r2,1
 4001f24:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
 4001f28:	e0bff943 	ldbu	r2,-27(fp)
 4001f2c:	108000d8 	cmpnei	r2,r2,3
 4001f30:	1000061e 	bne	r2,zero,4001f4c <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
 4001f34:	e0bff903 	ldbu	r2,-28(fp)
 4001f38:	00000706 	br	4001f58 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
 4001f3c:	e0bff903 	ldbu	r2,-28(fp)
 4001f40:	00000506 	br	4001f58 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
 4001f44:	0001883a 	nop
 4001f48:	003fb906 	br	4001e30 <__alt_mem_onchip_memory2_0+0xfc000b90>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
 4001f4c:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 4001f50:	003fb706 	br	4001e30 <__alt_mem_onchip_memory2_0+0xfc000b90>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 4001f54:	e0bff903 	ldbu	r2,-28(fp)
}
 4001f58:	e037883a 	mov	sp,fp
 4001f5c:	dfc00117 	ldw	ra,4(sp)
 4001f60:	df000017 	ldw	fp,0(sp)
 4001f64:	dec00204 	addi	sp,sp,8
 4001f68:	f800283a 	ret

04001f6c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 4001f6c:	defffa04 	addi	sp,sp,-24
 4001f70:	dfc00515 	stw	ra,20(sp)
 4001f74:	df000415 	stw	fp,16(sp)
 4001f78:	df000404 	addi	fp,sp,16
 4001f7c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 4001f80:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
 4001f84:	e13ffe17 	ldw	r4,-8(fp)
 4001f88:	4009c480 	call	4009c48 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
 4001f8c:	e13ffe17 	ldw	r4,-8(fp)
 4001f90:	40093900 	call	4009390 <_ZN8MAX3421e12getVbusStateEv>
 4001f94:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 4001f98:	e0bffcc3 	ldbu	r2,-13(fp)
 4001f9c:	10c00060 	cmpeqi	r3,r2,1
 4001fa0:	1800091e 	bne	r3,zero,4001fc8 <_ZN3USB4TaskEv+0x5c>
 4001fa4:	10c00088 	cmpgei	r3,r2,2
 4001fa8:	1800021e 	bne	r3,zero,4001fb4 <_ZN3USB4TaskEv+0x48>
 4001fac:	10000a26 	beq	r2,zero,4001fd8 <_ZN3USB4TaskEv+0x6c>
 4001fb0:	00001f06 	br	4002030 <_ZN3USB4TaskEv+0xc4>
 4001fb4:	10c000a0 	cmpeqi	r3,r2,2
 4001fb8:	1800121e 	bne	r3,zero,4002004 <_ZN3USB4TaskEv+0x98>
 4001fbc:	108000e0 	cmpeqi	r2,r2,3
 4001fc0:	10000e1e 	bne	r2,zero,4001ffc <_ZN3USB4TaskEv+0x90>
 4001fc4:	00001a06 	br	4002030 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 4001fc8:	008004c4 	movi	r2,19
 4001fcc:	d0b23545 	stb	r2,-14123(gp)
                        lowspeed = false;
 4001fd0:	e03ffc05 	stb	zero,-16(fp)
                        break;
 4001fd4:	00001606 	br	4002030 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 4001fd8:	d0b23543 	ldbu	r2,-14123(gp)
 4001fdc:	10803fcc 	andi	r2,r2,255
 4001fe0:	10803c0c 	andi	r2,r2,240
 4001fe4:	10800420 	cmpeqi	r2,r2,16
 4001fe8:	1000021e 	bne	r2,zero,4001ff4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 4001fec:	00800444 	movi	r2,17
 4001ff0:	d0b23545 	stb	r2,-14123(gp)
                        lowspeed = false;
 4001ff4:	e03ffc05 	stb	zero,-16(fp)
                        break;
 4001ff8:	00000d06 	br	4002030 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
 4001ffc:	00800044 	movi	r2,1
 4002000:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 4002004:	d0b23543 	ldbu	r2,-14123(gp)
 4002008:	10803fcc 	andi	r2,r2,255
 400200c:	10803c0c 	andi	r2,r2,240
 4002010:	10800418 	cmpnei	r2,r2,16
 4002014:	1000051e 	bne	r2,zero,400202c <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 4002018:	4000e2c0 	call	4000e2c <_Z6millisv>
 400201c:	10803204 	addi	r2,r2,200
 4002020:	d0b23615 	stw	r2,-14120(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 4002024:	00800804 	movi	r2,32
 4002028:	d0b23545 	stb	r2,-14123(gp)
                        }
                        break;
 400202c:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 4002030:	e03ffc45 	stb	zero,-15(fp)
 4002034:	e0bffc43 	ldbu	r2,-15(fp)
 4002038:	10800428 	cmpgeui	r2,r2,16
 400203c:	1000201e 	bne	r2,zero,40020c0 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
 4002040:	e0bffc43 	ldbu	r2,-15(fp)
 4002044:	e0fffe17 	ldw	r3,-8(fp)
 4002048:	10800784 	addi	r2,r2,30
 400204c:	1085883a 	add	r2,r2,r2
 4002050:	1085883a 	add	r2,r2,r2
 4002054:	1885883a 	add	r2,r3,r2
 4002058:	10800017 	ldw	r2,0(r2)
 400205c:	10001426 	beq	r2,zero,40020b0 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
 4002060:	e0bffc43 	ldbu	r2,-15(fp)
 4002064:	e0fffe17 	ldw	r3,-8(fp)
 4002068:	10800784 	addi	r2,r2,30
 400206c:	1085883a 	add	r2,r2,r2
 4002070:	1085883a 	add	r2,r2,r2
 4002074:	1885883a 	add	r2,r3,r2
 4002078:	10800017 	ldw	r2,0(r2)
 400207c:	10800017 	ldw	r2,0(r2)
 4002080:	10800304 	addi	r2,r2,12
 4002084:	10c00017 	ldw	r3,0(r2)
 4002088:	e0bffc43 	ldbu	r2,-15(fp)
 400208c:	e13ffe17 	ldw	r4,-8(fp)
 4002090:	10800784 	addi	r2,r2,30
 4002094:	1085883a 	add	r2,r2,r2
 4002098:	1085883a 	add	r2,r2,r2
 400209c:	2085883a 	add	r2,r4,r2
 40020a0:	10800017 	ldw	r2,0(r2)
 40020a4:	1009883a 	mov	r4,r2
 40020a8:	183ee83a 	callr	r3
 40020ac:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 40020b0:	e0bffc43 	ldbu	r2,-15(fp)
 40020b4:	10800044 	addi	r2,r2,1
 40020b8:	e0bffc45 	stb	r2,-15(fp)
 40020bc:	003fdd06 	br	4002034 <__alt_mem_onchip_memory2_0+0xfc000d94>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 40020c0:	d0b23543 	ldbu	r2,-14123(gp)
 40020c4:	10803fcc 	andi	r2,r2,255
 40020c8:	10c01020 	cmpeqi	r3,r2,64
 40020cc:	1800511e 	bne	r3,zero,4002214 <_ZN3USB4TaskEv+0x2a8>
 40020d0:	10c01048 	cmpgei	r3,r2,65
 40020d4:	18000c1e 	bne	r3,zero,4002108 <_ZN3USB4TaskEv+0x19c>
 40020d8:	10c004e0 	cmpeqi	r3,r2,19
 40020dc:	18008e1e 	bne	r3,zero,4002318 <_ZN3USB4TaskEv+0x3ac>
 40020e0:	10c00508 	cmpgei	r3,r2,20
 40020e4:	1800031e 	bne	r3,zero,40020f4 <_ZN3USB4TaskEv+0x188>
 40020e8:	10800460 	cmpeqi	r2,r2,17
 40020ec:	10000f1e 	bne	r2,zero,400212c <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
 40020f0:	00009406 	br	4002344 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 40020f4:	10c00820 	cmpeqi	r3,r2,32
 40020f8:	1800351e 	bne	r3,zero,40021d0 <_ZN3USB4TaskEv+0x264>
 40020fc:	10800c20 	cmpeqi	r2,r2,48
 4002100:	10003d1e 	bne	r2,zero,40021f8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 4002104:	00008f06 	br	4002344 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 4002108:	10c02020 	cmpeqi	r3,r2,128
 400210c:	18006e1e 	bne	r3,zero,40022c8 <_ZN3USB4TaskEv+0x35c>
 4002110:	10c02048 	cmpgei	r3,r2,129
 4002114:	18008b1e 	bne	r3,zero,4002344 <_ZN3USB4TaskEv+0x3d8>
 4002118:	10c01420 	cmpeqi	r3,r2,80
 400211c:	1800521e 	bne	r3,zero,4002268 <_ZN3USB4TaskEv+0x2fc>
 4002120:	10801460 	cmpeqi	r2,r2,81
 4002124:	10005e1e 	bne	r2,zero,40022a0 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 4002128:	00008606 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
 400212c:	e13ffe17 	ldw	r4,-8(fp)
 4002130:	4000eac0 	call	4000eac <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 4002134:	e03ffc85 	stb	zero,-14(fp)
 4002138:	e0bffc83 	ldbu	r2,-14(fp)
 400213c:	10800428 	cmpgeui	r2,r2,16
 4002140:	1000201e 	bne	r2,zero,40021c4 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
 4002144:	e0bffc83 	ldbu	r2,-14(fp)
 4002148:	e0fffe17 	ldw	r3,-8(fp)
 400214c:	10800784 	addi	r2,r2,30
 4002150:	1085883a 	add	r2,r2,r2
 4002154:	1085883a 	add	r2,r2,r2
 4002158:	1885883a 	add	r2,r3,r2
 400215c:	10800017 	ldw	r2,0(r2)
 4002160:	10001426 	beq	r2,zero,40021b4 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
 4002164:	e0bffc83 	ldbu	r2,-14(fp)
 4002168:	e0fffe17 	ldw	r3,-8(fp)
 400216c:	10800784 	addi	r2,r2,30
 4002170:	1085883a 	add	r2,r2,r2
 4002174:	1085883a 	add	r2,r2,r2
 4002178:	1885883a 	add	r2,r3,r2
 400217c:	10800017 	ldw	r2,0(r2)
 4002180:	10800017 	ldw	r2,0(r2)
 4002184:	10800204 	addi	r2,r2,8
 4002188:	10c00017 	ldw	r3,0(r2)
 400218c:	e0bffc83 	ldbu	r2,-14(fp)
 4002190:	e13ffe17 	ldw	r4,-8(fp)
 4002194:	10800784 	addi	r2,r2,30
 4002198:	1085883a 	add	r2,r2,r2
 400219c:	1085883a 	add	r2,r2,r2
 40021a0:	2085883a 	add	r2,r4,r2
 40021a4:	10800017 	ldw	r2,0(r2)
 40021a8:	1009883a 	mov	r4,r2
 40021ac:	183ee83a 	callr	r3
 40021b0:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 40021b4:	e0bffc83 	ldbu	r2,-14(fp)
 40021b8:	10800044 	addi	r2,r2,1
 40021bc:	e0bffc85 	stb	r2,-14(fp)
 40021c0:	003fdd06 	br	4002138 <__alt_mem_onchip_memory2_0+0xfc000e98>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 40021c4:	00800484 	movi	r2,18
 40021c8:	d0b23545 	stb	r2,-14123(gp)
                        break;
 40021cc:	00005d06 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 40021d0:	4000e2c0 	call	4000e2c <_Z6millisv>
 40021d4:	1007883a 	mov	r3,r2
 40021d8:	d0b23617 	ldw	r2,-14120(gp)
 40021dc:	1885c83a 	sub	r2,r3,r2
 40021e0:	0084303a 	nor	r2,zero,r2
 40021e4:	1004d7fa 	srli	r2,r2,31
 40021e8:	10803fcc 	andi	r2,r2,255
 40021ec:	10004c26 	beq	r2,zero,4002320 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 40021f0:	00800c04 	movi	r2,48
 40021f4:	d0b23545 	stb	r2,-14123(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 40021f8:	01800044 	movi	r6,1
 40021fc:	01403a04 	movi	r5,232
 4002200:	e13ffe17 	ldw	r4,-8(fp)
 4002204:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 4002208:	00801004 	movi	r2,64
 400220c:	d0b23545 	stb	r2,-14123(gp)
                        break;
 4002210:	00004c06 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 4002214:	01403a04 	movi	r5,232
 4002218:	e13ffe17 	ldw	r4,-8(fp)
 400221c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4002220:	10803fcc 	andi	r2,r2,255
 4002224:	1080004c 	andi	r2,r2,1
 4002228:	1005003a 	cmpeq	r2,r2,zero
 400222c:	10803fcc 	andi	r2,r2,255
 4002230:	10003d26 	beq	r2,zero,4002328 <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 4002234:	01403604 	movi	r5,216
 4002238:	e13ffe17 	ldw	r4,-8(fp)
 400223c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4002240:	10800214 	ori	r2,r2,8
 4002244:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
 4002248:	e0bffcc3 	ldbu	r2,-13(fp)
 400224c:	100d883a 	mov	r6,r2
 4002250:	01403604 	movi	r5,216
 4002254:	e13ffe17 	ldw	r4,-8(fp)
 4002258:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 400225c:	00801404 	movi	r2,80
 4002260:	d0b23545 	stb	r2,-14123(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
 4002264:	00003006 	br	4002328 <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 4002268:	01403204 	movi	r5,200
 400226c:	e13ffe17 	ldw	r4,-8(fp)
 4002270:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4002274:	10803fcc 	andi	r2,r2,255
 4002278:	1080100c 	andi	r2,r2,64
 400227c:	1004c03a 	cmpne	r2,r2,zero
 4002280:	10803fcc 	andi	r2,r2,255
 4002284:	10002a26 	beq	r2,zero,4002330 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 4002288:	00801444 	movi	r2,81
 400228c:	d0b23545 	stb	r2,-14123(gp)
                                delay = (uint32_t)millis() + 20;
 4002290:	4000e2c0 	call	4000e2c <_Z6millisv>
 4002294:	10800504 	addi	r2,r2,20
 4002298:	d0b23615 	stw	r2,-14120(gp)
                        }
                        break;
 400229c:	00002406 	br	4002330 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 40022a0:	4000e2c0 	call	4000e2c <_Z6millisv>
 40022a4:	1007883a 	mov	r3,r2
 40022a8:	d0b23617 	ldw	r2,-14120(gp)
 40022ac:	1885c83a 	sub	r2,r3,r2
 40022b0:	0084303a 	nor	r2,zero,r2
 40022b4:	1004d7fa 	srli	r2,r2,31
 40022b8:	10803fcc 	andi	r2,r2,255
 40022bc:	10001e26 	beq	r2,zero,4002338 <_ZN3USB4TaskEv+0x3cc>
 40022c0:	00bfe004 	movi	r2,-128
 40022c4:	d0b23545 	stb	r2,-14123(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
 40022c8:	e0bffc03 	ldbu	r2,-16(fp)
 40022cc:	100f883a 	mov	r7,r2
 40022d0:	000d883a 	mov	r6,zero
 40022d4:	000b883a 	mov	r5,zero
 40022d8:	e13ffe17 	ldw	r4,-8(fp)
 40022dc:	400274c0 	call	400274c <_ZN3USB11ConfiguringEhhb>
 40022e0:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
 40022e4:	e0bffd03 	ldbu	r2,-12(fp)
 40022e8:	10000826 	beq	r2,zero,400230c <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 40022ec:	e0bffd03 	ldbu	r2,-12(fp)
 40022f0:	108034a0 	cmpeqi	r2,r2,210
 40022f4:	1000121e 	bne	r2,zero,4002340 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
 40022f8:	e0bffd03 	ldbu	r2,-12(fp)
 40022fc:	d0b23505 	stb	r2,-14124(gp)
                                        usb_task_state = USB_STATE_ERROR;
 4002300:	00bfe804 	movi	r2,-96
 4002304:	d0b23545 	stb	r2,-14123(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
 4002308:	00000d06 	br	4002340 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
 400230c:	00bfe404 	movi	r2,-112
 4002310:	d0b23545 	stb	r2,-14123(gp)
                        break;
 4002314:	00000a06 	br	4002340 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
 4002318:	0001883a 	nop
 400231c:	00000906 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
 4002320:	0001883a 	nop
 4002324:	00000706 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
 4002328:	0001883a 	nop
 400232c:	00000506 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
 4002330:	0001883a 	nop
 4002334:	00000306 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
 4002338:	0001883a 	nop
 400233c:	00000106 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
 4002340:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 4002344:	0001883a 	nop
 4002348:	e037883a 	mov	sp,fp
 400234c:	dfc00117 	ldw	ra,4(sp)
 4002350:	df000017 	ldw	fp,0(sp)
 4002354:	dec00204 	addi	sp,sp,8
 4002358:	f800283a 	ret

0400235c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 400235c:	defff704 	addi	sp,sp,-36
 4002360:	dfc00815 	stw	ra,32(sp)
 4002364:	df000715 	stw	fp,28(sp)
 4002368:	df000704 	addi	fp,sp,28
 400236c:	e13ffc15 	stw	r4,-16(fp)
 4002370:	2809883a 	mov	r4,r5
 4002374:	3007883a 	mov	r3,r6
 4002378:	3805883a 	mov	r2,r7
 400237c:	e13ffd05 	stb	r4,-12(fp)
 4002380:	e0fffe05 	stb	r3,-8(fp)
 4002384:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 4002388:	e03ff915 	stw	zero,-28(fp)
 400238c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 4002390:	e0bffc17 	ldw	r2,-16(fp)
 4002394:	000b883a 	mov	r5,zero
 4002398:	1009883a 	mov	r4,r2
 400239c:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 40023a0:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
 40023a4:	e0bff917 	ldw	r2,-28(fp)
 40023a8:	1000021e 	bne	r2,zero,40023b4 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40023ac:	00bff584 	movi	r2,-42
 40023b0:	00003d06 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
 40023b4:	e0bff917 	ldw	r2,-28(fp)
 40023b8:	10c00003 	ldbu	r3,0(r2)
 40023bc:	11000043 	ldbu	r4,1(r2)
 40023c0:	2008923a 	slli	r4,r4,8
 40023c4:	20c6b03a 	or	r3,r4,r3
 40023c8:	11000083 	ldbu	r4,2(r2)
 40023cc:	2008943a 	slli	r4,r4,16
 40023d0:	20c6b03a 	or	r3,r4,r3
 40023d4:	108000c3 	ldbu	r2,3(r2)
 40023d8:	1004963a 	slli	r2,r2,24
 40023dc:	10c4b03a 	or	r2,r2,r3
 40023e0:	1000021e 	bne	r2,zero,40023ec <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
 40023e4:	00bff5c4 	movi	r2,-41
 40023e8:	00002f06 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
 40023ec:	e0bff917 	ldw	r2,-28(fp)
 40023f0:	e0ffff03 	ldbu	r3,-4(fp)
 40023f4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 40023f8:	e0bffc17 	ldw	r2,-16(fp)
 40023fc:	e0fffd03 	ldbu	r3,-12(fp)
 4002400:	e13ffe03 	ldbu	r4,-8(fp)
 4002404:	200f883a 	mov	r7,r4
 4002408:	000d883a 	mov	r6,zero
 400240c:	180b883a 	mov	r5,r3
 4002410:	1009883a 	mov	r4,r2
 4002414:	40035440 	call	4003544 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 4002418:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
 400241c:	e0bffb03 	ldbu	r2,-20(fp)
 4002420:	1000021e 	bne	r2,zero,400242c <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 4002424:	00bff504 	movi	r2,-44
 4002428:	00001f06 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
 400242c:	e0bffc17 	ldw	r2,-16(fp)
 4002430:	e0fffb03 	ldbu	r3,-20(fp)
 4002434:	180b883a 	mov	r5,r3
 4002438:	1009883a 	mov	r4,r2
 400243c:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4002440:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
 4002444:	e0bffa17 	ldw	r2,-24(fp)
 4002448:	1000021e 	bne	r2,zero,4002454 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 400244c:	00bff584 	movi	r2,-42
 4002450:	00001506 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
 4002454:	e0bffa17 	ldw	r2,-24(fp)
 4002458:	e0ffff03 	ldbu	r3,-4(fp)
 400245c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 4002460:	e0bffb03 	ldbu	r2,-20(fp)
 4002464:	100f883a 	mov	r7,r2
 4002468:	000d883a 	mov	r6,zero
 400246c:	000b883a 	mov	r5,zero
 4002470:	e13ffc17 	ldw	r4,-16(fp)
 4002474:	40032500 	call	4003250 <_ZN3USB7setAddrEhhh>
 4002478:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
 400247c:	e0bffb43 	ldbu	r2,-19(fp)
 4002480:	10000826 	beq	r2,zero,40024a4 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
 4002484:	e0bffc17 	ldw	r2,-16(fp)
 4002488:	e0fffb03 	ldbu	r3,-20(fp)
 400248c:	180b883a 	mov	r5,r3
 4002490:	1009883a 	mov	r4,r2
 4002494:	40037a40 	call	40037a4 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 4002498:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
 400249c:	e0bffb43 	ldbu	r2,-19(fp)
 40024a0:	00000106 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
 40024a4:	0005883a 	mov	r2,zero
};
 40024a8:	e037883a 	mov	sp,fp
 40024ac:	dfc00117 	ldw	ra,4(sp)
 40024b0:	df000017 	ldw	fp,0(sp)
 40024b4:	dec00204 	addi	sp,sp,8
 40024b8:	f800283a 	ret

040024bc <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 40024bc:	defff804 	addi	sp,sp,-32
 40024c0:	dfc00715 	stw	ra,28(sp)
 40024c4:	df000615 	stw	fp,24(sp)
 40024c8:	df000604 	addi	fp,sp,24
 40024cc:	e13ffb15 	stw	r4,-20(fp)
 40024d0:	3009883a 	mov	r4,r6
 40024d4:	3807883a 	mov	r3,r7
 40024d8:	e0800217 	ldw	r2,8(fp)
 40024dc:	e17ffc05 	stb	r5,-16(fp)
 40024e0:	e13ffd05 	stb	r4,-12(fp)
 40024e4:	e0fffe05 	stb	r3,-8(fp)
 40024e8:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 40024ec:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 40024f0:	e0bffc03 	ldbu	r2,-16(fp)
 40024f4:	e0fffb17 	ldw	r3,-20(fp)
 40024f8:	10800784 	addi	r2,r2,30
 40024fc:	1085883a 	add	r2,r2,r2
 4002500:	1085883a 	add	r2,r2,r2
 4002504:	1885883a 	add	r2,r3,r2
 4002508:	10800017 	ldw	r2,0(r2)
 400250c:	10800017 	ldw	r2,0(r2)
 4002510:	10800104 	addi	r2,r2,4
 4002514:	10c00017 	ldw	r3,0(r2)
 4002518:	e0bffc03 	ldbu	r2,-16(fp)
 400251c:	e13ffb17 	ldw	r4,-20(fp)
 4002520:	10800784 	addi	r2,r2,30
 4002524:	1085883a 	add	r2,r2,r2
 4002528:	1085883a 	add	r2,r2,r2
 400252c:	2085883a 	add	r2,r4,r2
 4002530:	10800017 	ldw	r2,0(r2)
 4002534:	e13ffd03 	ldbu	r4,-12(fp)
 4002538:	e17ffe03 	ldbu	r5,-8(fp)
 400253c:	e1bfff03 	ldbu	r6,-4(fp)
 4002540:	300f883a 	mov	r7,r6
 4002544:	280d883a 	mov	r6,r5
 4002548:	200b883a 	mov	r5,r4
 400254c:	1009883a 	mov	r4,r2
 4002550:	183ee83a 	callr	r3
 4002554:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 4002558:	e0bffa43 	ldbu	r2,-23(fp)
 400255c:	10803818 	cmpnei	r2,r2,224
 4002560:	10001f1e 	bne	r2,zero,40025e0 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
 4002564:	e0bffd03 	ldbu	r2,-12(fp)
 4002568:	1000071e 	bne	r2,zero,4002588 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 400256c:	01800044 	movi	r6,1
 4002570:	01403a04 	movi	r5,232
 4002574:	e13ffb17 	ldw	r4,-20(fp)
 4002578:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 400257c:	01001984 	movi	r4,102
 4002580:	4000dd40 	call	4000dd4 <_Z5delaym>
 4002584:	00002606 	br	4002620 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 4002588:	e0bffd03 	ldbu	r2,-12(fp)
 400258c:	e0fffb17 	ldw	r3,-20(fp)
 4002590:	10800784 	addi	r2,r2,30
 4002594:	1085883a 	add	r2,r2,r2
 4002598:	1085883a 	add	r2,r2,r2
 400259c:	1885883a 	add	r2,r3,r2
 40025a0:	10800017 	ldw	r2,0(r2)
 40025a4:	10800017 	ldw	r2,0(r2)
 40025a8:	10800504 	addi	r2,r2,20
 40025ac:	10c00017 	ldw	r3,0(r2)
 40025b0:	e0bffd03 	ldbu	r2,-12(fp)
 40025b4:	e13ffb17 	ldw	r4,-20(fp)
 40025b8:	10800784 	addi	r2,r2,30
 40025bc:	1085883a 	add	r2,r2,r2
 40025c0:	1085883a 	add	r2,r2,r2
 40025c4:	2085883a 	add	r2,r4,r2
 40025c8:	10800017 	ldw	r2,0(r2)
 40025cc:	e13ffe03 	ldbu	r4,-8(fp)
 40025d0:	200b883a 	mov	r5,r4
 40025d4:	1009883a 	mov	r4,r2
 40025d8:	183ee83a 	callr	r3
 40025dc:	00001006 	br	4002620 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 40025e0:	e0bffa43 	ldbu	r2,-23(fp)
 40025e4:	10800358 	cmpnei	r2,r2,13
 40025e8:	1000091e 	bne	r2,zero,4002610 <_ZN3USB13AttemptConfigEhhhb+0x154>
 40025ec:	e0bffa03 	ldbu	r2,-24(fp)
 40025f0:	108000e8 	cmpgeui	r2,r2,3
 40025f4:	1000061e 	bne	r2,zero,4002610 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
 40025f8:	01001904 	movi	r4,100
 40025fc:	4000dd40 	call	4000dd4 <_Z5delaym>
                retries++;
 4002600:	e0bffa03 	ldbu	r2,-24(fp)
 4002604:	10800044 	addi	r2,r2,1
 4002608:	e0bffa05 	stb	r2,-24(fp)
                goto again;
 400260c:	003fb806 	br	40024f0 <__alt_mem_onchip_memory2_0+0xfc001250>
        } else if(rcode)
 4002610:	e0bffa43 	ldbu	r2,-23(fp)
 4002614:	10000226 	beq	r2,zero,4002620 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
 4002618:	e0bffa43 	ldbu	r2,-23(fp)
 400261c:	00004606 	br	4002738 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 4002620:	e0bffc03 	ldbu	r2,-16(fp)
 4002624:	e0fffb17 	ldw	r3,-20(fp)
 4002628:	10800784 	addi	r2,r2,30
 400262c:	1085883a 	add	r2,r2,r2
 4002630:	1085883a 	add	r2,r2,r2
 4002634:	1885883a 	add	r2,r3,r2
 4002638:	10800017 	ldw	r2,0(r2)
 400263c:	10800017 	ldw	r2,0(r2)
 4002640:	10c00017 	ldw	r3,0(r2)
 4002644:	e0bffc03 	ldbu	r2,-16(fp)
 4002648:	e13ffb17 	ldw	r4,-20(fp)
 400264c:	10800784 	addi	r2,r2,30
 4002650:	1085883a 	add	r2,r2,r2
 4002654:	1085883a 	add	r2,r2,r2
 4002658:	2085883a 	add	r2,r4,r2
 400265c:	10800017 	ldw	r2,0(r2)
 4002660:	e13ffd03 	ldbu	r4,-12(fp)
 4002664:	e17ffe03 	ldbu	r5,-8(fp)
 4002668:	e1bfff03 	ldbu	r6,-4(fp)
 400266c:	300f883a 	mov	r7,r6
 4002670:	280d883a 	mov	r6,r5
 4002674:	200b883a 	mov	r5,r4
 4002678:	1009883a 	mov	r4,r2
 400267c:	183ee83a 	callr	r3
 4002680:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 4002684:	e0bffa43 	ldbu	r2,-23(fp)
 4002688:	10800358 	cmpnei	r2,r2,13
 400268c:	1000091e 	bne	r2,zero,40026b4 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
 4002690:	e0bffa03 	ldbu	r2,-24(fp)
 4002694:	108000e8 	cmpgeui	r2,r2,3
 4002698:	1000061e 	bne	r2,zero,40026b4 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
 400269c:	01001904 	movi	r4,100
 40026a0:	4000dd40 	call	4000dd4 <_Z5delaym>
                retries++;
 40026a4:	e0bffa03 	ldbu	r2,-24(fp)
 40026a8:	10800044 	addi	r2,r2,1
 40026ac:	e0bffa05 	stb	r2,-24(fp)
                goto again;
 40026b0:	003f8f06 	br	40024f0 <__alt_mem_onchip_memory2_0+0xfc001250>
        }
        if(rcode) {
 40026b4:	e0bffa43 	ldbu	r2,-23(fp)
 40026b8:	10001e26 	beq	r2,zero,4002734 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 40026bc:	e0bffd03 	ldbu	r2,-12(fp)
 40026c0:	1000071e 	bne	r2,zero,40026e0 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 40026c4:	01800044 	movi	r6,1
 40026c8:	01403a04 	movi	r5,232
 40026cc:	e13ffb17 	ldw	r4,-20(fp)
 40026d0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 40026d4:	01001984 	movi	r4,102
 40026d8:	4000dd40 	call	4000dd4 <_Z5delaym>
 40026dc:	00001506 	br	4002734 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 40026e0:	e0bffd03 	ldbu	r2,-12(fp)
 40026e4:	e0fffb17 	ldw	r3,-20(fp)
 40026e8:	10800784 	addi	r2,r2,30
 40026ec:	1085883a 	add	r2,r2,r2
 40026f0:	1085883a 	add	r2,r2,r2
 40026f4:	1885883a 	add	r2,r3,r2
 40026f8:	10800017 	ldw	r2,0(r2)
 40026fc:	10800017 	ldw	r2,0(r2)
 4002700:	10800504 	addi	r2,r2,20
 4002704:	10c00017 	ldw	r3,0(r2)
 4002708:	e0bffd03 	ldbu	r2,-12(fp)
 400270c:	e13ffb17 	ldw	r4,-20(fp)
 4002710:	10800784 	addi	r2,r2,30
 4002714:	1085883a 	add	r2,r2,r2
 4002718:	1085883a 	add	r2,r2,r2
 400271c:	2085883a 	add	r2,r4,r2
 4002720:	10800017 	ldw	r2,0(r2)
 4002724:	e13ffe03 	ldbu	r4,-8(fp)
 4002728:	200b883a 	mov	r5,r4
 400272c:	1009883a 	mov	r4,r2
 4002730:	183ee83a 	callr	r3
                }
        }
        return rcode;
 4002734:	e0bffa43 	ldbu	r2,-23(fp)
}
 4002738:	e037883a 	mov	sp,fp
 400273c:	dfc00117 	ldw	ra,4(sp)
 4002740:	df000017 	ldw	fp,0(sp)
 4002744:	dec00204 	addi	sp,sp,8
 4002748:	f800283a 	ret

0400274c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 400274c:	deffed04 	addi	sp,sp,-76
 4002750:	dfc01215 	stw	ra,72(sp)
 4002754:	df001115 	stw	fp,68(sp)
 4002758:	df001104 	addi	fp,sp,68
 400275c:	e13ffc15 	stw	r4,-16(fp)
 4002760:	2809883a 	mov	r4,r5
 4002764:	3007883a 	mov	r3,r6
 4002768:	3805883a 	mov	r2,r7
 400276c:	e13ffd05 	stb	r4,-12(fp)
 4002770:	e0fffe05 	stb	r3,-8(fp)
 4002774:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 4002778:	e03ff045 	stb	zero,-63(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 400277c:	e0bff684 	addi	r2,fp,-38
 4002780:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
 4002784:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
 4002788:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
 400278c:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
 4002790:	00800204 	movi	r2,8
 4002794:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
 4002798:	e0fffb83 	ldbu	r3,-18(fp)
 400279c:	00bfff84 	movi	r2,-2
 40027a0:	1884703a 	and	r2,r3,r2
 40027a4:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
 40027a8:	e0fffb83 	ldbu	r3,-18(fp)
 40027ac:	00bfff44 	movi	r2,-3
 40027b0:	1884703a 	and	r2,r3,r2
 40027b4:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 40027b8:	e0bffb83 	ldbu	r2,-18(fp)
 40027bc:	108000cc 	andi	r2,r2,3
 40027c0:	10800f14 	ori	r2,r2,60
 40027c4:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 40027c8:	e13ffc17 	ldw	r4,-16(fp)
 40027cc:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 40027d0:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 40027d4:	e0bff417 	ldw	r2,-48(fp)
 40027d8:	10800017 	ldw	r2,0(r2)
 40027dc:	10800017 	ldw	r2,0(r2)
 40027e0:	000b883a 	mov	r5,zero
 40027e4:	e13ff417 	ldw	r4,-48(fp)
 40027e8:	103ee83a 	callr	r2
 40027ec:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
 40027f0:	e0bff217 	ldw	r2,-56(fp)
 40027f4:	1000021e 	bne	r2,zero,4002800 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40027f8:	00bff584 	movi	r2,-42
 40027fc:	00019206 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 4002800:	e0bff217 	ldw	r2,-56(fp)
 4002804:	10c00003 	ldbu	r3,0(r2)
 4002808:	11000043 	ldbu	r4,1(r2)
 400280c:	2008923a 	slli	r4,r4,8
 4002810:	20c6b03a 	or	r3,r4,r3
 4002814:	11000083 	ldbu	r4,2(r2)
 4002818:	2008943a 	slli	r4,r4,16
 400281c:	20c6b03a 	or	r3,r4,r3
 4002820:	108000c3 	ldbu	r2,3(r2)
 4002824:	1004963a 	slli	r2,r2,24
 4002828:	10c4b03a 	or	r2,r2,r3
 400282c:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 4002830:	e0bff217 	ldw	r2,-56(fp)
 4002834:	e0fffb04 	addi	r3,fp,-20
 4002838:	19803fcc 	andi	r6,r3,255
 400283c:	11000003 	ldbu	r4,0(r2)
 4002840:	2008703a 	and	r4,r4,zero
 4002844:	200b883a 	mov	r5,r4
 4002848:	3009883a 	mov	r4,r6
 400284c:	2908b03a 	or	r4,r5,r4
 4002850:	11000005 	stb	r4,0(r2)
 4002854:	1808d23a 	srli	r4,r3,8
 4002858:	21803fcc 	andi	r6,r4,255
 400285c:	11000043 	ldbu	r4,1(r2)
 4002860:	2008703a 	and	r4,r4,zero
 4002864:	200b883a 	mov	r5,r4
 4002868:	3009883a 	mov	r4,r6
 400286c:	2908b03a 	or	r4,r5,r4
 4002870:	11000045 	stb	r4,1(r2)
 4002874:	1808d43a 	srli	r4,r3,16
 4002878:	21803fcc 	andi	r6,r4,255
 400287c:	11000083 	ldbu	r4,2(r2)
 4002880:	2008703a 	and	r4,r4,zero
 4002884:	200b883a 	mov	r5,r4
 4002888:	3009883a 	mov	r4,r6
 400288c:	2908b03a 	or	r4,r5,r4
 4002890:	11000085 	stb	r4,2(r2)
 4002894:	180ad63a 	srli	r5,r3,24
 4002898:	10c000c3 	ldbu	r3,3(r2)
 400289c:	1806703a 	and	r3,r3,zero
 40028a0:	1809883a 	mov	r4,r3
 40028a4:	2807883a 	mov	r3,r5
 40028a8:	20c6b03a 	or	r3,r4,r3
 40028ac:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
 40028b0:	e0bff217 	ldw	r2,-56(fp)
 40028b4:	e0ffff03 	ldbu	r3,-4(fp)
 40028b8:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 40028bc:	00800484 	movi	r2,18
 40028c0:	10ffffcc 	andi	r3,r2,65535
 40028c4:	e0bff684 	addi	r2,fp,-38
 40028c8:	d8800015 	stw	r2,0(sp)
 40028cc:	180f883a 	mov	r7,r3
 40028d0:	000d883a 	mov	r6,zero
 40028d4:	000b883a 	mov	r5,zero
 40028d8:	e13ffc17 	ldw	r4,-16(fp)
 40028dc:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 40028e0:	e0bff045 	stb	r2,-63(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 40028e4:	e0bff217 	ldw	r2,-56(fp)
 40028e8:	e0fff317 	ldw	r3,-52(fp)
 40028ec:	19403fcc 	andi	r5,r3,255
 40028f0:	10c00003 	ldbu	r3,0(r2)
 40028f4:	1806703a 	and	r3,r3,zero
 40028f8:	1809883a 	mov	r4,r3
 40028fc:	2807883a 	mov	r3,r5
 4002900:	20c6b03a 	or	r3,r4,r3
 4002904:	10c00005 	stb	r3,0(r2)
 4002908:	e0fff317 	ldw	r3,-52(fp)
 400290c:	1806d23a 	srli	r3,r3,8
 4002910:	19403fcc 	andi	r5,r3,255
 4002914:	10c00043 	ldbu	r3,1(r2)
 4002918:	1806703a 	and	r3,r3,zero
 400291c:	1809883a 	mov	r4,r3
 4002920:	2807883a 	mov	r3,r5
 4002924:	20c6b03a 	or	r3,r4,r3
 4002928:	10c00045 	stb	r3,1(r2)
 400292c:	e0fff317 	ldw	r3,-52(fp)
 4002930:	1806d43a 	srli	r3,r3,16
 4002934:	19403fcc 	andi	r5,r3,255
 4002938:	10c00083 	ldbu	r3,2(r2)
 400293c:	1806703a 	and	r3,r3,zero
 4002940:	1809883a 	mov	r4,r3
 4002944:	2807883a 	mov	r3,r5
 4002948:	20c6b03a 	or	r3,r4,r3
 400294c:	10c00085 	stb	r3,2(r2)
 4002950:	e0fff317 	ldw	r3,-52(fp)
 4002954:	180ad63a 	srli	r5,r3,24
 4002958:	10c000c3 	ldbu	r3,3(r2)
 400295c:	1806703a 	and	r3,r3,zero
 4002960:	1809883a 	mov	r4,r3
 4002964:	2807883a 	mov	r3,r5
 4002968:	20c6b03a 	or	r3,r4,r3
 400296c:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
 4002970:	e0bff043 	ldbu	r2,-63(fp)
 4002974:	10000226 	beq	r2,zero,4002980 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 4002978:	e0bff043 	ldbu	r2,-63(fp)
 400297c:	00013206 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 4002980:	e0bff117 	ldw	r2,-60(fp)
 4002984:	10c00203 	ldbu	r3,8(r2)
 4002988:	10800243 	ldbu	r2,9(r2)
 400298c:	1004923a 	slli	r2,r2,8
 4002990:	10c4b03a 	or	r2,r2,r3
 4002994:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
 4002998:	e0bff117 	ldw	r2,-60(fp)
 400299c:	10c00283 	ldbu	r3,10(r2)
 40029a0:	108002c3 	ldbu	r2,11(r2)
 40029a4:	1004923a 	slli	r2,r2,8
 40029a8:	10c4b03a 	or	r2,r2,r3
 40029ac:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
 40029b0:	e0bff117 	ldw	r2,-60(fp)
 40029b4:	10800103 	ldbu	r2,4(r2)
 40029b8:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
 40029bc:	e0bff117 	ldw	r2,-60(fp)
 40029c0:	10800143 	ldbu	r2,5(r2)
 40029c4:	e0bff645 	stb	r2,-39(fp)
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 40029c8:	e03ff005 	stb	zero,-64(fp)
 40029cc:	e0bff003 	ldbu	r2,-64(fp)
 40029d0:	10800428 	cmpgeui	r2,r2,16
 40029d4:	1000821e 	bne	r2,zero,4002be0 <_ZN3USB11ConfiguringEhhb+0x494>
                if(!devConfig[devConfigIndex]) continue; // no driver
 40029d8:	e0bff003 	ldbu	r2,-64(fp)
 40029dc:	e0fffc17 	ldw	r3,-16(fp)
 40029e0:	10800784 	addi	r2,r2,30
 40029e4:	1085883a 	add	r2,r2,r2
 40029e8:	1085883a 	add	r2,r2,r2
 40029ec:	1885883a 	add	r2,r3,r2
 40029f0:	10800017 	ldw	r2,0(r2)
 40029f4:	10007226 	beq	r2,zero,4002bc0 <_ZN3USB11ConfiguringEhhb+0x474>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 40029f8:	e0bff003 	ldbu	r2,-64(fp)
 40029fc:	e0fffc17 	ldw	r3,-16(fp)
 4002a00:	10800784 	addi	r2,r2,30
 4002a04:	1085883a 	add	r2,r2,r2
 4002a08:	1085883a 	add	r2,r2,r2
 4002a0c:	1885883a 	add	r2,r3,r2
 4002a10:	10800017 	ldw	r2,0(r2)
 4002a14:	10800017 	ldw	r2,0(r2)
 4002a18:	10800404 	addi	r2,r2,16
 4002a1c:	10c00017 	ldw	r3,0(r2)
 4002a20:	e0bff003 	ldbu	r2,-64(fp)
 4002a24:	e13ffc17 	ldw	r4,-16(fp)
 4002a28:	10800784 	addi	r2,r2,30
 4002a2c:	1085883a 	add	r2,r2,r2
 4002a30:	1085883a 	add	r2,r2,r2
 4002a34:	2085883a 	add	r2,r4,r2
 4002a38:	10800017 	ldw	r2,0(r2)
 4002a3c:	1009883a 	mov	r4,r2
 4002a40:	183ee83a 	callr	r3
 4002a44:	10803fcc 	andi	r2,r2,255
 4002a48:	1004c03a 	cmpne	r2,r2,zero
 4002a4c:	10803fcc 	andi	r2,r2,255
 4002a50:	10005d1e 	bne	r2,zero,4002bc8 <_ZN3USB11ConfiguringEhhb+0x47c>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 4002a54:	e0bff003 	ldbu	r2,-64(fp)
 4002a58:	e0fffc17 	ldw	r3,-16(fp)
 4002a5c:	10800784 	addi	r2,r2,30
 4002a60:	1085883a 	add	r2,r2,r2
 4002a64:	1085883a 	add	r2,r2,r2
 4002a68:	1885883a 	add	r2,r3,r2
 4002a6c:	10800017 	ldw	r2,0(r2)
 4002a70:	10800017 	ldw	r2,0(r2)
 4002a74:	10800804 	addi	r2,r2,32
 4002a78:	10c00017 	ldw	r3,0(r2)
 4002a7c:	e0bff003 	ldbu	r2,-64(fp)
 4002a80:	e13ffc17 	ldw	r4,-16(fp)
 4002a84:	10800784 	addi	r2,r2,30
 4002a88:	1085883a 	add	r2,r2,r2
 4002a8c:	1085883a 	add	r2,r2,r2
 4002a90:	2085883a 	add	r2,r4,r2
 4002a94:	10800017 	ldw	r2,0(r2)
 4002a98:	e13ff643 	ldbu	r4,-39(fp)
 4002a9c:	200b883a 	mov	r5,r4
 4002aa0:	1009883a 	mov	r4,r2
 4002aa4:	183ee83a 	callr	r3
 4002aa8:	10803fcc 	andi	r2,r2,255
 4002aac:	10003226 	beq	r2,zero,4002b78 <_ZN3USB11ConfiguringEhhb+0x42c>
 4002ab0:	e0bff003 	ldbu	r2,-64(fp)
 4002ab4:	e0fffc17 	ldw	r3,-16(fp)
 4002ab8:	10800784 	addi	r2,r2,30
 4002abc:	1085883a 	add	r2,r2,r2
 4002ac0:	1085883a 	add	r2,r2,r2
 4002ac4:	1885883a 	add	r2,r3,r2
 4002ac8:	10800017 	ldw	r2,0(r2)
 4002acc:	10800017 	ldw	r2,0(r2)
 4002ad0:	10800604 	addi	r2,r2,24
 4002ad4:	10c00017 	ldw	r3,0(r2)
 4002ad8:	e0bff003 	ldbu	r2,-64(fp)
 4002adc:	e13ffc17 	ldw	r4,-16(fp)
 4002ae0:	10800784 	addi	r2,r2,30
 4002ae4:	1085883a 	add	r2,r2,r2
 4002ae8:	1085883a 	add	r2,r2,r2
 4002aec:	2085883a 	add	r2,r4,r2
 4002af0:	10800017 	ldw	r2,0(r2)
 4002af4:	e13ff50b 	ldhu	r4,-44(fp)
 4002af8:	e17ff58b 	ldhu	r5,-42(fp)
 4002afc:	280d883a 	mov	r6,r5
 4002b00:	200b883a 	mov	r5,r4
 4002b04:	1009883a 	mov	r4,r2
 4002b08:	183ee83a 	callr	r3
 4002b0c:	10803fcc 	andi	r2,r2,255
 4002b10:	1000171e 	bne	r2,zero,4002b70 <_ZN3USB11ConfiguringEhhb+0x424>
 4002b14:	e0bff003 	ldbu	r2,-64(fp)
 4002b18:	e0fffc17 	ldw	r3,-16(fp)
 4002b1c:	10800784 	addi	r2,r2,30
 4002b20:	1085883a 	add	r2,r2,r2
 4002b24:	1085883a 	add	r2,r2,r2
 4002b28:	1885883a 	add	r2,r3,r2
 4002b2c:	10800017 	ldw	r2,0(r2)
 4002b30:	10800017 	ldw	r2,0(r2)
 4002b34:	10800704 	addi	r2,r2,28
 4002b38:	10c00017 	ldw	r3,0(r2)
 4002b3c:	e0bff003 	ldbu	r2,-64(fp)
 4002b40:	e13ffc17 	ldw	r4,-16(fp)
 4002b44:	10800784 	addi	r2,r2,30
 4002b48:	1085883a 	add	r2,r2,r2
 4002b4c:	1085883a 	add	r2,r2,r2
 4002b50:	2085883a 	add	r2,r4,r2
 4002b54:	10800017 	ldw	r2,0(r2)
 4002b58:	e13ff603 	ldbu	r4,-40(fp)
 4002b5c:	200b883a 	mov	r5,r4
 4002b60:	1009883a 	mov	r4,r2
 4002b64:	183ee83a 	callr	r3
 4002b68:	10803fcc 	andi	r2,r2,255
 4002b6c:	10000226 	beq	r2,zero,4002b78 <_ZN3USB11ConfiguringEhhb+0x42c>
 4002b70:	00800044 	movi	r2,1
 4002b74:	00000106 	br	4002b7c <_ZN3USB11ConfiguringEhhb+0x430>
 4002b78:	0005883a 	mov	r2,zero
 4002b7c:	10803fcc 	andi	r2,r2,255
 4002b80:	10001226 	beq	r2,zero,4002bcc <_ZN3USB11ConfiguringEhhb+0x480>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 4002b84:	e0fff003 	ldbu	r3,-64(fp)
 4002b88:	e13ffd03 	ldbu	r4,-12(fp)
 4002b8c:	e17ffe03 	ldbu	r5,-8(fp)
 4002b90:	e0bfff03 	ldbu	r2,-4(fp)
 4002b94:	d8800015 	stw	r2,0(sp)
 4002b98:	280f883a 	mov	r7,r5
 4002b9c:	200d883a 	mov	r6,r4
 4002ba0:	180b883a 	mov	r5,r3
 4002ba4:	e13ffc17 	ldw	r4,-16(fp)
 4002ba8:	40024bc0 	call	40024bc <_ZN3USB13AttemptConfigEhhhb>
 4002bac:	e0bff045 	stb	r2,-63(fp)
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 4002bb0:	e0bff043 	ldbu	r2,-63(fp)
 4002bb4:	10803460 	cmpeqi	r2,r2,209
 4002bb8:	10000826 	beq	r2,zero,4002bdc <_ZN3USB11ConfiguringEhhb+0x490>
 4002bbc:	00000306 	br	4002bcc <_ZN3USB11ConfiguringEhhb+0x480>
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue; // no driver
 4002bc0:	0001883a 	nop
 4002bc4:	00000106 	br	4002bcc <_ZN3USB11ConfiguringEhhb+0x480>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002bc8:	0001883a 	nop
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002bcc:	e0bff003 	ldbu	r2,-64(fp)
 4002bd0:	10800044 	addi	r2,r2,1
 4002bd4:	e0bff005 	stb	r2,-64(fp)
 4002bd8:	003f7c06 	br	40029cc <__alt_mem_onchip_memory2_0+0xfc00172c>
                if(!devConfig[devConfigIndex]) continue; // no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
                                break;
 4002bdc:	0001883a 	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 4002be0:	e0bff003 	ldbu	r2,-64(fp)
 4002be4:	10800428 	cmpgeui	r2,r2,16
 4002be8:	1000021e 	bne	r2,zero,4002bf4 <_ZN3USB11ConfiguringEhhb+0x4a8>
                return rcode;
 4002bec:	e0bff043 	ldbu	r2,-63(fp)
 4002bf0:	00009506 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002bf4:	e03ff005 	stb	zero,-64(fp)
 4002bf8:	e0bff003 	ldbu	r2,-64(fp)
 4002bfc:	10800428 	cmpgeui	r2,r2,16
 4002c00:	1000871e 	bne	r2,zero,4002e20 <_ZN3USB11ConfiguringEhhb+0x6d4>
                if(!devConfig[devConfigIndex]) continue;
 4002c04:	e0bff003 	ldbu	r2,-64(fp)
 4002c08:	e0fffc17 	ldw	r3,-16(fp)
 4002c0c:	10800784 	addi	r2,r2,30
 4002c10:	1085883a 	add	r2,r2,r2
 4002c14:	1085883a 	add	r2,r2,r2
 4002c18:	1885883a 	add	r2,r3,r2
 4002c1c:	10800017 	ldw	r2,0(r2)
 4002c20:	10007626 	beq	r2,zero,4002dfc <_ZN3USB11ConfiguringEhhb+0x6b0>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002c24:	e0bff003 	ldbu	r2,-64(fp)
 4002c28:	e0fffc17 	ldw	r3,-16(fp)
 4002c2c:	10800784 	addi	r2,r2,30
 4002c30:	1085883a 	add	r2,r2,r2
 4002c34:	1085883a 	add	r2,r2,r2
 4002c38:	1885883a 	add	r2,r3,r2
 4002c3c:	10800017 	ldw	r2,0(r2)
 4002c40:	10800017 	ldw	r2,0(r2)
 4002c44:	10800404 	addi	r2,r2,16
 4002c48:	10c00017 	ldw	r3,0(r2)
 4002c4c:	e0bff003 	ldbu	r2,-64(fp)
 4002c50:	e13ffc17 	ldw	r4,-16(fp)
 4002c54:	10800784 	addi	r2,r2,30
 4002c58:	1085883a 	add	r2,r2,r2
 4002c5c:	1085883a 	add	r2,r2,r2
 4002c60:	2085883a 	add	r2,r4,r2
 4002c64:	10800017 	ldw	r2,0(r2)
 4002c68:	1009883a 	mov	r4,r2
 4002c6c:	183ee83a 	callr	r3
 4002c70:	10803fcc 	andi	r2,r2,255
 4002c74:	1004c03a 	cmpne	r2,r2,zero
 4002c78:	10803fcc 	andi	r2,r2,255
 4002c7c:	1000611e 	bne	r2,zero,4002e04 <_ZN3USB11ConfiguringEhhb+0x6b8>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 4002c80:	e0bff003 	ldbu	r2,-64(fp)
 4002c84:	e0fffc17 	ldw	r3,-16(fp)
 4002c88:	10800784 	addi	r2,r2,30
 4002c8c:	1085883a 	add	r2,r2,r2
 4002c90:	1085883a 	add	r2,r2,r2
 4002c94:	1885883a 	add	r2,r3,r2
 4002c98:	10800017 	ldw	r2,0(r2)
 4002c9c:	10800017 	ldw	r2,0(r2)
 4002ca0:	10800804 	addi	r2,r2,32
 4002ca4:	10c00017 	ldw	r3,0(r2)
 4002ca8:	e0bff003 	ldbu	r2,-64(fp)
 4002cac:	e13ffc17 	ldw	r4,-16(fp)
 4002cb0:	10800784 	addi	r2,r2,30
 4002cb4:	1085883a 	add	r2,r2,r2
 4002cb8:	1085883a 	add	r2,r2,r2
 4002cbc:	2085883a 	add	r2,r4,r2
 4002cc0:	10800017 	ldw	r2,0(r2)
 4002cc4:	e13ff643 	ldbu	r4,-39(fp)
 4002cc8:	200b883a 	mov	r5,r4
 4002ccc:	1009883a 	mov	r4,r2
 4002cd0:	183ee83a 	callr	r3
 4002cd4:	10803fcc 	andi	r2,r2,255
 4002cd8:	10003226 	beq	r2,zero,4002da4 <_ZN3USB11ConfiguringEhhb+0x658>
 4002cdc:	e0bff003 	ldbu	r2,-64(fp)
 4002ce0:	e0fffc17 	ldw	r3,-16(fp)
 4002ce4:	10800784 	addi	r2,r2,30
 4002ce8:	1085883a 	add	r2,r2,r2
 4002cec:	1085883a 	add	r2,r2,r2
 4002cf0:	1885883a 	add	r2,r3,r2
 4002cf4:	10800017 	ldw	r2,0(r2)
 4002cf8:	10800017 	ldw	r2,0(r2)
 4002cfc:	10800604 	addi	r2,r2,24
 4002d00:	10c00017 	ldw	r3,0(r2)
 4002d04:	e0bff003 	ldbu	r2,-64(fp)
 4002d08:	e13ffc17 	ldw	r4,-16(fp)
 4002d0c:	10800784 	addi	r2,r2,30
 4002d10:	1085883a 	add	r2,r2,r2
 4002d14:	1085883a 	add	r2,r2,r2
 4002d18:	2085883a 	add	r2,r4,r2
 4002d1c:	10800017 	ldw	r2,0(r2)
 4002d20:	e13ff50b 	ldhu	r4,-44(fp)
 4002d24:	e17ff58b 	ldhu	r5,-42(fp)
 4002d28:	280d883a 	mov	r6,r5
 4002d2c:	200b883a 	mov	r5,r4
 4002d30:	1009883a 	mov	r4,r2
 4002d34:	183ee83a 	callr	r3
 4002d38:	10803fcc 	andi	r2,r2,255
 4002d3c:	1000171e 	bne	r2,zero,4002d9c <_ZN3USB11ConfiguringEhhb+0x650>
 4002d40:	e0bff003 	ldbu	r2,-64(fp)
 4002d44:	e0fffc17 	ldw	r3,-16(fp)
 4002d48:	10800784 	addi	r2,r2,30
 4002d4c:	1085883a 	add	r2,r2,r2
 4002d50:	1085883a 	add	r2,r2,r2
 4002d54:	1885883a 	add	r2,r3,r2
 4002d58:	10800017 	ldw	r2,0(r2)
 4002d5c:	10800017 	ldw	r2,0(r2)
 4002d60:	10800704 	addi	r2,r2,28
 4002d64:	10c00017 	ldw	r3,0(r2)
 4002d68:	e0bff003 	ldbu	r2,-64(fp)
 4002d6c:	e13ffc17 	ldw	r4,-16(fp)
 4002d70:	10800784 	addi	r2,r2,30
 4002d74:	1085883a 	add	r2,r2,r2
 4002d78:	1085883a 	add	r2,r2,r2
 4002d7c:	2085883a 	add	r2,r4,r2
 4002d80:	10800017 	ldw	r2,0(r2)
 4002d84:	e13ff603 	ldbu	r4,-40(fp)
 4002d88:	200b883a 	mov	r5,r4
 4002d8c:	1009883a 	mov	r4,r2
 4002d90:	183ee83a 	callr	r3
 4002d94:	10803fcc 	andi	r2,r2,255
 4002d98:	10000226 	beq	r2,zero,4002da4 <_ZN3USB11ConfiguringEhhb+0x658>
 4002d9c:	00800044 	movi	r2,1
 4002da0:	00000106 	br	4002da8 <_ZN3USB11ConfiguringEhhb+0x65c>
 4002da4:	0005883a 	mov	r2,zero
 4002da8:	10803fcc 	andi	r2,r2,255
 4002dac:	1000171e 	bne	r2,zero,4002e0c <_ZN3USB11ConfiguringEhhb+0x6c0>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 4002db0:	e0fff003 	ldbu	r3,-64(fp)
 4002db4:	e13ffd03 	ldbu	r4,-12(fp)
 4002db8:	e17ffe03 	ldbu	r5,-8(fp)
 4002dbc:	e0bfff03 	ldbu	r2,-4(fp)
 4002dc0:	d8800015 	stw	r2,0(sp)
 4002dc4:	280f883a 	mov	r7,r5
 4002dc8:	200d883a 	mov	r6,r4
 4002dcc:	180b883a 	mov	r5,r3
 4002dd0:	e13ffc17 	ldw	r4,-16(fp)
 4002dd4:	40024bc0 	call	40024bc <_ZN3USB13AttemptConfigEhhhb>
 4002dd8:	e0bff045 	stb	r2,-63(fp)

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 4002ddc:	e0bff043 	ldbu	r2,-63(fp)
 4002de0:	10803460 	cmpeqi	r2,r2,209
 4002de4:	10000a1e 	bne	r2,zero,4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
 4002de8:	e0bff043 	ldbu	r2,-63(fp)
 4002dec:	10803660 	cmpeqi	r2,r2,217
 4002df0:	1000071e 	bne	r2,zero,4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 4002df4:	e0bff043 	ldbu	r2,-63(fp)
 4002df8:	00001306 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;
 4002dfc:	0001883a 	nop
 4002e00:	00000306 	br	4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002e04:	0001883a 	nop
 4002e08:	00000106 	br	4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 4002e0c:	0001883a 	nop
                return rcode;
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002e10:	e0bff003 	ldbu	r2,-64(fp)
 4002e14:	10800044 	addi	r2,r2,1
 4002e18:	e0bff005 	stb	r2,-64(fp)
 4002e1c:	003f7606 	br	4002bf8 <__alt_mem_onchip_memory2_0+0xfc001958>
                        //        devConfigIndex = 0;
                        return rcode;
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 4002e20:	e0bffd03 	ldbu	r2,-12(fp)
 4002e24:	e0fffe03 	ldbu	r3,-8(fp)
 4002e28:	e13fff03 	ldbu	r4,-4(fp)
 4002e2c:	200f883a 	mov	r7,r4
 4002e30:	180d883a 	mov	r6,r3
 4002e34:	100b883a 	mov	r5,r2
 4002e38:	e13ffc17 	ldw	r4,-16(fp)
 4002e3c:	400235c0 	call	400235c <_ZN3USB17DefaultAddressingEhhb>
 4002e40:	e0bff045 	stb	r2,-63(fp)

        return rcode;
 4002e44:	e0bff043 	ldbu	r2,-63(fp)
}
 4002e48:	e037883a 	mov	sp,fp
 4002e4c:	dfc00117 	ldw	ra,4(sp)
 4002e50:	df000017 	ldw	fp,0(sp)
 4002e54:	dec00204 	addi	sp,sp,8
 4002e58:	f800283a 	ret

04002e5c <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
 4002e5c:	defffb04 	addi	sp,sp,-20
 4002e60:	dfc00415 	stw	ra,16(sp)
 4002e64:	df000315 	stw	fp,12(sp)
 4002e68:	df000304 	addi	fp,sp,12
 4002e6c:	e13ffe15 	stw	r4,-8(fp)
 4002e70:	2805883a 	mov	r2,r5
 4002e74:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
 4002e78:	e0bfff03 	ldbu	r2,-4(fp)
 4002e7c:	1000021e 	bne	r2,zero,4002e88 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
 4002e80:	0005883a 	mov	r2,zero
 4002e84:	00003e06 	br	4002f80 <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 4002e88:	e03ffd05 	stb	zero,-12(fp)
 4002e8c:	e0bffd03 	ldbu	r2,-12(fp)
 4002e90:	10800428 	cmpgeui	r2,r2,16
 4002e94:	1000391e 	bne	r2,zero,4002f7c <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
 4002e98:	e0bffd03 	ldbu	r2,-12(fp)
 4002e9c:	e0fffe17 	ldw	r3,-8(fp)
 4002ea0:	10800784 	addi	r2,r2,30
 4002ea4:	1085883a 	add	r2,r2,r2
 4002ea8:	1085883a 	add	r2,r2,r2
 4002eac:	1885883a 	add	r2,r3,r2
 4002eb0:	10800017 	ldw	r2,0(r2)
 4002eb4:	10002c26 	beq	r2,zero,4002f68 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
 4002eb8:	e0bffd03 	ldbu	r2,-12(fp)
 4002ebc:	e0fffe17 	ldw	r3,-8(fp)
 4002ec0:	10800784 	addi	r2,r2,30
 4002ec4:	1085883a 	add	r2,r2,r2
 4002ec8:	1085883a 	add	r2,r2,r2
 4002ecc:	1885883a 	add	r2,r3,r2
 4002ed0:	10800017 	ldw	r2,0(r2)
 4002ed4:	10800017 	ldw	r2,0(r2)
 4002ed8:	10800404 	addi	r2,r2,16
 4002edc:	10c00017 	ldw	r3,0(r2)
 4002ee0:	e0bffd03 	ldbu	r2,-12(fp)
 4002ee4:	e13ffe17 	ldw	r4,-8(fp)
 4002ee8:	10800784 	addi	r2,r2,30
 4002eec:	1085883a 	add	r2,r2,r2
 4002ef0:	1085883a 	add	r2,r2,r2
 4002ef4:	2085883a 	add	r2,r4,r2
 4002ef8:	10800017 	ldw	r2,0(r2)
 4002efc:	1009883a 	mov	r4,r2
 4002f00:	183ee83a 	callr	r3
 4002f04:	10c03fcc 	andi	r3,r2,255
 4002f08:	e0bfff03 	ldbu	r2,-4(fp)
 4002f0c:	1885003a 	cmpeq	r2,r3,r2
 4002f10:	10803fcc 	andi	r2,r2,255
 4002f14:	10001526 	beq	r2,zero,4002f6c <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
 4002f18:	e0bffd03 	ldbu	r2,-12(fp)
 4002f1c:	e0fffe17 	ldw	r3,-8(fp)
 4002f20:	10800784 	addi	r2,r2,30
 4002f24:	1085883a 	add	r2,r2,r2
 4002f28:	1085883a 	add	r2,r2,r2
 4002f2c:	1885883a 	add	r2,r3,r2
 4002f30:	10800017 	ldw	r2,0(r2)
 4002f34:	10800017 	ldw	r2,0(r2)
 4002f38:	10800204 	addi	r2,r2,8
 4002f3c:	10c00017 	ldw	r3,0(r2)
 4002f40:	e0bffd03 	ldbu	r2,-12(fp)
 4002f44:	e13ffe17 	ldw	r4,-8(fp)
 4002f48:	10800784 	addi	r2,r2,30
 4002f4c:	1085883a 	add	r2,r2,r2
 4002f50:	1085883a 	add	r2,r2,r2
 4002f54:	2085883a 	add	r2,r4,r2
 4002f58:	10800017 	ldw	r2,0(r2)
 4002f5c:	1009883a 	mov	r4,r2
 4002f60:	183ee83a 	callr	r3
 4002f64:	00000606 	br	4002f80 <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
 4002f68:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 4002f6c:	e0bffd03 	ldbu	r2,-12(fp)
 4002f70:	10800044 	addi	r2,r2,1
 4002f74:	e0bffd05 	stb	r2,-12(fp)
 4002f78:	003fc406 	br	4002e8c <__alt_mem_onchip_memory2_0+0xfc001bec>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
 4002f7c:	0005883a 	mov	r2,zero
}
 4002f80:	e037883a 	mov	sp,fp
 4002f84:	dfc00117 	ldw	ra,4(sp)
 4002f88:	df000017 	ldw	fp,0(sp)
 4002f8c:	dec00204 	addi	sp,sp,8
 4002f90:	f800283a 	ret

04002f94 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 4002f94:	defff204 	addi	sp,sp,-56
 4002f98:	dfc00d15 	stw	ra,52(sp)
 4002f9c:	df000c15 	stw	fp,48(sp)
 4002fa0:	df000c04 	addi	fp,sp,48
 4002fa4:	e13ffc15 	stw	r4,-16(fp)
 4002fa8:	2809883a 	mov	r4,r5
 4002fac:	3007883a 	mov	r3,r6
 4002fb0:	3805883a 	mov	r2,r7
 4002fb4:	e13ffd05 	stb	r4,-12(fp)
 4002fb8:	e0fffe05 	stb	r3,-8(fp)
 4002fbc:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 4002fc0:	e17ffd03 	ldbu	r5,-12(fp)
 4002fc4:	e1bffe03 	ldbu	r6,-8(fp)
 4002fc8:	e0bfff0b 	ldhu	r2,-4(fp)
 4002fcc:	e0ffff0b 	ldhu	r3,-4(fp)
 4002fd0:	d8000715 	stw	zero,28(sp)
 4002fd4:	e1000217 	ldw	r4,8(fp)
 4002fd8:	d9000615 	stw	r4,24(sp)
 4002fdc:	d8c00515 	stw	r3,20(sp)
 4002fe0:	d8800415 	stw	r2,16(sp)
 4002fe4:	d8000315 	stw	zero,12(sp)
 4002fe8:	00800044 	movi	r2,1
 4002fec:	d8800215 	stw	r2,8(sp)
 4002ff0:	d8000115 	stw	zero,4(sp)
 4002ff4:	00800184 	movi	r2,6
 4002ff8:	d8800015 	stw	r2,0(sp)
 4002ffc:	01c02004 	movi	r7,128
 4003000:	e13ffc17 	ldw	r4,-16(fp)
 4003004:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4003008:	e037883a 	mov	sp,fp
 400300c:	dfc00117 	ldw	ra,4(sp)
 4003010:	df000017 	ldw	fp,0(sp)
 4003014:	dec00204 	addi	sp,sp,8
 4003018:	f800283a 	ret

0400301c <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 400301c:	defff104 	addi	sp,sp,-60
 4003020:	dfc00e15 	stw	ra,56(sp)
 4003024:	df000d15 	stw	fp,52(sp)
 4003028:	df000d04 	addi	fp,sp,52
 400302c:	e13ffb15 	stw	r4,-20(fp)
 4003030:	3009883a 	mov	r4,r6
 4003034:	3807883a 	mov	r3,r7
 4003038:	e0800217 	ldw	r2,8(fp)
 400303c:	e17ffc05 	stb	r5,-16(fp)
 4003040:	e13ffd05 	stb	r4,-12(fp)
 4003044:	e0fffe0d 	sth	r3,-8(fp)
 4003048:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 400304c:	e23ffc03 	ldbu	r8,-16(fp)
 4003050:	e1bffd03 	ldbu	r6,-12(fp)
 4003054:	e0bfff03 	ldbu	r2,-4(fp)
 4003058:	e0fffe0b 	ldhu	r3,-8(fp)
 400305c:	e13ffe0b 	ldhu	r4,-8(fp)
 4003060:	d8000715 	stw	zero,28(sp)
 4003064:	e1400317 	ldw	r5,12(fp)
 4003068:	d9400615 	stw	r5,24(sp)
 400306c:	d9000515 	stw	r4,20(sp)
 4003070:	d8c00415 	stw	r3,16(sp)
 4003074:	d8000315 	stw	zero,12(sp)
 4003078:	00c00084 	movi	r3,2
 400307c:	d8c00215 	stw	r3,8(sp)
 4003080:	d8800115 	stw	r2,4(sp)
 4003084:	00800184 	movi	r2,6
 4003088:	d8800015 	stw	r2,0(sp)
 400308c:	01c02004 	movi	r7,128
 4003090:	400b883a 	mov	r5,r8
 4003094:	e13ffb17 	ldw	r4,-20(fp)
 4003098:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 400309c:	e037883a 	mov	sp,fp
 40030a0:	dfc00117 	ldw	ra,4(sp)
 40030a4:	df000017 	ldw	fp,0(sp)
 40030a8:	dec00204 	addi	sp,sp,8
 40030ac:	f800283a 	ret

040030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 40030b0:	deffdf04 	addi	sp,sp,-132
 40030b4:	dfc02015 	stw	ra,128(sp)
 40030b8:	df001f15 	stw	fp,124(sp)
 40030bc:	df001f04 	addi	fp,sp,124
 40030c0:	e13ffc15 	stw	r4,-16(fp)
 40030c4:	2809883a 	mov	r4,r5
 40030c8:	3007883a 	mov	r3,r6
 40030cc:	3805883a 	mov	r2,r7
 40030d0:	e13ffd05 	stb	r4,-12(fp)
 40030d4:	e0fffe05 	stb	r3,-8(fp)
 40030d8:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
 40030dc:	00801004 	movi	r2,64
 40030e0:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 40030e4:	e0bfec04 	addi	r2,fp,-80
 40030e8:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 40030ec:	e13ffd03 	ldbu	r4,-12(fp)
 40030f0:	e17ffe03 	ldbu	r5,-8(fp)
 40030f4:	e0bfff03 	ldbu	r2,-4(fp)
 40030f8:	e0ffec04 	addi	r3,fp,-80
 40030fc:	d8c00115 	stw	r3,4(sp)
 4003100:	d8800015 	stw	r2,0(sp)
 4003104:	01c00244 	movi	r7,9
 4003108:	280d883a 	mov	r6,r5
 400310c:	200b883a 	mov	r5,r4
 4003110:	e13ffc17 	ldw	r4,-16(fp)
 4003114:	400301c0 	call	400301c <_ZN3USB12getConfDescrEhhthPh>
 4003118:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
 400311c:	e0bfeb03 	ldbu	r2,-84(fp)
 4003120:	10000226 	beq	r2,zero,400312c <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
 4003124:	e0bfeb03 	ldbu	r2,-84(fp)
 4003128:	00001a06 	br	4003194 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
 400312c:	e0bfea17 	ldw	r2,-88(fp)
 4003130:	10c00083 	ldbu	r3,2(r2)
 4003134:	108000c3 	ldbu	r2,3(r2)
 4003138:	1004923a 	slli	r2,r2,8
 400313c:	10c4b03a 	or	r2,r2,r3
 4003140:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 4003144:	e17ffd03 	ldbu	r5,-12(fp)
 4003148:	e1bffe03 	ldbu	r6,-8(fp)
 400314c:	e0bfff03 	ldbu	r2,-4(fp)
 4003150:	e0ffeb8b 	ldhu	r3,-82(fp)
 4003154:	e1000217 	ldw	r4,8(fp)
 4003158:	d9000715 	stw	r4,28(sp)
 400315c:	e13fec04 	addi	r4,fp,-80
 4003160:	d9000615 	stw	r4,24(sp)
 4003164:	01001004 	movi	r4,64
 4003168:	d9000515 	stw	r4,20(sp)
 400316c:	d8c00415 	stw	r3,16(sp)
 4003170:	d8000315 	stw	zero,12(sp)
 4003174:	00c00084 	movi	r3,2
 4003178:	d8c00215 	stw	r3,8(sp)
 400317c:	d8800115 	stw	r2,4(sp)
 4003180:	00800184 	movi	r2,6
 4003184:	d8800015 	stw	r2,0(sp)
 4003188:	01c02004 	movi	r7,128
 400318c:	e13ffc17 	ldw	r4,-16(fp)
 4003190:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4003194:	e037883a 	mov	sp,fp
 4003198:	dfc00117 	ldw	ra,4(sp)
 400319c:	df000017 	ldw	fp,0(sp)
 40031a0:	dec00204 	addi	sp,sp,8
 40031a4:	f800283a 	ret

040031a8 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
 40031a8:	defff004 	addi	sp,sp,-64
 40031ac:	dfc00f15 	stw	ra,60(sp)
 40031b0:	df000e15 	stw	fp,56(sp)
 40031b4:	df000e04 	addi	fp,sp,56
 40031b8:	e13ffa15 	stw	r4,-24(fp)
 40031bc:	2811883a 	mov	r8,r5
 40031c0:	300b883a 	mov	r5,r6
 40031c4:	3809883a 	mov	r4,r7
 40031c8:	e0c00217 	ldw	r3,8(fp)
 40031cc:	e0800317 	ldw	r2,12(fp)
 40031d0:	e23ffb05 	stb	r8,-20(fp)
 40031d4:	e17ffc05 	stb	r5,-16(fp)
 40031d8:	e13ffd0d 	sth	r4,-12(fp)
 40031dc:	e0fffe05 	stb	r3,-8(fp)
 40031e0:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
 40031e4:	e23ffb03 	ldbu	r8,-20(fp)
 40031e8:	e27ffc03 	ldbu	r9,-16(fp)
 40031ec:	e0bffe03 	ldbu	r2,-8(fp)
 40031f0:	e0ffff0b 	ldhu	r3,-4(fp)
 40031f4:	e13ffd0b 	ldhu	r4,-12(fp)
 40031f8:	e17ffd0b 	ldhu	r5,-12(fp)
 40031fc:	d8000715 	stw	zero,28(sp)
 4003200:	e1800417 	ldw	r6,16(fp)
 4003204:	d9800615 	stw	r6,24(sp)
 4003208:	d9400515 	stw	r5,20(sp)
 400320c:	d9000415 	stw	r4,16(sp)
 4003210:	d8c00315 	stw	r3,12(sp)
 4003214:	00c000c4 	movi	r3,3
 4003218:	d8c00215 	stw	r3,8(sp)
 400321c:	d8800115 	stw	r2,4(sp)
 4003220:	00800184 	movi	r2,6
 4003224:	d8800015 	stw	r2,0(sp)
 4003228:	01c02004 	movi	r7,128
 400322c:	480d883a 	mov	r6,r9
 4003230:	400b883a 	mov	r5,r8
 4003234:	e13ffa17 	ldw	r4,-24(fp)
 4003238:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 400323c:	e037883a 	mov	sp,fp
 4003240:	dfc00117 	ldw	ra,4(sp)
 4003244:	df000017 	ldw	fp,0(sp)
 4003248:	dec00204 	addi	sp,sp,8
 400324c:	f800283a 	ret

04003250 <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 4003250:	defff104 	addi	sp,sp,-60
 4003254:	dfc00e15 	stw	ra,56(sp)
 4003258:	df000d15 	stw	fp,52(sp)
 400325c:	df000d04 	addi	fp,sp,52
 4003260:	e13ffc15 	stw	r4,-16(fp)
 4003264:	2809883a 	mov	r4,r5
 4003268:	3007883a 	mov	r3,r6
 400326c:	3805883a 	mov	r2,r7
 4003270:	e13ffd05 	stb	r4,-12(fp)
 4003274:	e0fffe05 	stb	r3,-8(fp)
 4003278:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 400327c:	e0fffd03 	ldbu	r3,-12(fp)
 4003280:	e13ffe03 	ldbu	r4,-8(fp)
 4003284:	e0bfff03 	ldbu	r2,-4(fp)
 4003288:	d8000715 	stw	zero,28(sp)
 400328c:	d8000615 	stw	zero,24(sp)
 4003290:	d8000515 	stw	zero,20(sp)
 4003294:	d8000415 	stw	zero,16(sp)
 4003298:	d8000315 	stw	zero,12(sp)
 400329c:	d8000215 	stw	zero,8(sp)
 40032a0:	d8800115 	stw	r2,4(sp)
 40032a4:	00800144 	movi	r2,5
 40032a8:	d8800015 	stw	r2,0(sp)
 40032ac:	000f883a 	mov	r7,zero
 40032b0:	200d883a 	mov	r6,r4
 40032b4:	180b883a 	mov	r5,r3
 40032b8:	e13ffc17 	ldw	r4,-16(fp)
 40032bc:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 40032c0:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 40032c4:	01004b04 	movi	r4,300
 40032c8:	4000dd40 	call	4000dd4 <_Z5delaym>
        return rcode;
 40032cc:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 40032d0:	e037883a 	mov	sp,fp
 40032d4:	dfc00117 	ldw	ra,4(sp)
 40032d8:	df000017 	ldw	fp,0(sp)
 40032dc:	dec00204 	addi	sp,sp,8
 40032e0:	f800283a 	ret

040032e4 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 40032e4:	defff204 	addi	sp,sp,-56
 40032e8:	dfc00d15 	stw	ra,52(sp)
 40032ec:	df000c15 	stw	fp,48(sp)
 40032f0:	df000c04 	addi	fp,sp,48
 40032f4:	e13ffc15 	stw	r4,-16(fp)
 40032f8:	2809883a 	mov	r4,r5
 40032fc:	3007883a 	mov	r3,r6
 4003300:	3805883a 	mov	r2,r7
 4003304:	e13ffd05 	stb	r4,-12(fp)
 4003308:	e0fffe05 	stb	r3,-8(fp)
 400330c:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 4003310:	e0fffd03 	ldbu	r3,-12(fp)
 4003314:	e13ffe03 	ldbu	r4,-8(fp)
 4003318:	e0bfff03 	ldbu	r2,-4(fp)
 400331c:	d8000715 	stw	zero,28(sp)
 4003320:	d8000615 	stw	zero,24(sp)
 4003324:	d8000515 	stw	zero,20(sp)
 4003328:	d8000415 	stw	zero,16(sp)
 400332c:	d8000315 	stw	zero,12(sp)
 4003330:	d8000215 	stw	zero,8(sp)
 4003334:	d8800115 	stw	r2,4(sp)
 4003338:	00800244 	movi	r2,9
 400333c:	d8800015 	stw	r2,0(sp)
 4003340:	000f883a 	mov	r7,zero
 4003344:	200d883a 	mov	r6,r4
 4003348:	180b883a 	mov	r5,r3
 400334c:	e13ffc17 	ldw	r4,-16(fp)
 4003350:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4003354:	e037883a 	mov	sp,fp
 4003358:	dfc00117 	ldw	ra,4(sp)
 400335c:	df000017 	ldw	fp,0(sp)
 4003360:	dec00204 	addi	sp,sp,8
 4003364:	f800283a 	ret

04003368 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 4003368:	defffe04 	addi	sp,sp,-8
 400336c:	df000115 	stw	fp,4(sp)
 4003370:	df000104 	addi	fp,sp,4
 4003374:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
 4003378:	e0bfff17 	ldw	r2,-4(fp)
        };
 400337c:	e037883a 	mov	sp,fp
 4003380:	df000017 	ldw	fp,0(sp)
 4003384:	dec00104 	addi	sp,sp,4
 4003388:	f800283a 	ret

0400338c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 400338c:	defffe04 	addi	sp,sp,-8
 4003390:	df000115 	stw	fp,4(sp)
 4003394:	df000104 	addi	fp,sp,4
 4003398:	e13fff15 	stw	r4,-4(fp)
 400339c:	008100b4 	movhi	r2,1026
 40033a0:	10833004 	addi	r2,r2,3264
 40033a4:	e0ffff17 	ldw	r3,-4(fp)
 40033a8:	18800015 	stw	r2,0(r3)
 40033ac:	0001883a 	nop
 40033b0:	e037883a 	mov	sp,fp
 40033b4:	df000017 	ldw	fp,0(sp)
 40033b8:	dec00104 	addi	sp,sp,4
 40033bc:	f800283a 	ret

040033c0 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 40033c0:	defffd04 	addi	sp,sp,-12
 40033c4:	dfc00215 	stw	ra,8(sp)
 40033c8:	df000115 	stw	fp,4(sp)
 40033cc:	df000104 	addi	fp,sp,4
 40033d0:	e13fff15 	stw	r4,-4(fp)
 40033d4:	e0bfff17 	ldw	r2,-4(fp)
 40033d8:	1009883a 	mov	r4,r2
 40033dc:	400338c0 	call	400338c <_ZN11AddressPoolC1Ev>
 40033e0:	008100b4 	movhi	r2,1026
 40033e4:	10832b04 	addi	r2,r2,3244
 40033e8:	e0ffff17 	ldw	r3,-4(fp)
 40033ec:	18800015 	stw	r2,0(r3)
 40033f0:	e0bfff17 	ldw	r2,-4(fp)
 40033f4:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
 40033f8:	000b883a 	mov	r5,zero
 40033fc:	e13fff17 	ldw	r4,-4(fp)
 4003400:	40038100 	call	4003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 4003404:	e0bfff17 	ldw	r2,-4(fp)
 4003408:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
 400340c:	e0bfff17 	ldw	r2,-4(fp)
 4003410:	10c00104 	addi	r3,r2,4
 4003414:	e0bfff17 	ldw	r2,-4(fp)
 4003418:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
 400341c:	e0bfff17 	ldw	r2,-4(fp)
 4003420:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
 4003424:	e0bfff17 	ldw	r2,-4(fp)
 4003428:	00c00204 	movi	r3,8
 400342c:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 4003430:	e0bfff17 	ldw	r2,-4(fp)
 4003434:	11000183 	ldbu	r4,6(r2)
 4003438:	00ffff84 	movi	r3,-2
 400343c:	20c6703a 	and	r3,r4,r3
 4003440:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
 4003444:	e0bfff17 	ldw	r2,-4(fp)
 4003448:	11000183 	ldbu	r4,6(r2)
 400344c:	00ffff44 	movi	r3,-3
 4003450:	20c6703a 	and	r3,r4,r3
 4003454:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 4003458:	e0bfff17 	ldw	r2,-4(fp)
 400345c:	10c00183 	ldbu	r3,6(r2)
 4003460:	18c000cc 	andi	r3,r3,3
 4003464:	18c00f14 	ori	r3,r3,60
 4003468:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
 400346c:	e13fff17 	ldw	r4,-4(fp)
 4003470:	40039540 	call	4003954 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 4003474:	0001883a 	nop
 4003478:	e037883a 	mov	sp,fp
 400347c:	dfc00117 	ldw	ra,4(sp)
 4003480:	df000017 	ldw	fp,0(sp)
 4003484:	dec00204 	addi	sp,sp,8
 4003488:	f800283a 	ret

0400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 400348c:	defffa04 	addi	sp,sp,-24
 4003490:	dfc00515 	stw	ra,20(sp)
 4003494:	df000415 	stw	fp,16(sp)
 4003498:	dc000315 	stw	r16,12(sp)
 400349c:	df000404 	addi	fp,sp,16
 40034a0:	e13ffd15 	stw	r4,-12(fp)
 40034a4:	2805883a 	mov	r2,r5
 40034a8:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
 40034ac:	e0bffe03 	ldbu	r2,-8(fp)
 40034b0:	1000031e 	bne	r2,zero,40034c0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
 40034b4:	e0bffd17 	ldw	r2,-12(fp)
 40034b8:	10800204 	addi	r2,r2,8
 40034bc:	00001006 	br	4003500 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
 40034c0:	e0bffe03 	ldbu	r2,-8(fp)
 40034c4:	100b883a 	mov	r5,r2
 40034c8:	e13ffd17 	ldw	r4,-12(fp)
 40034cc:	40039bc0 	call	40039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 40034d0:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
 40034d4:	e0bffc03 	ldbu	r2,-16(fp)
 40034d8:	10000826 	beq	r2,zero,40034fc <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
 40034dc:	e0bffd17 	ldw	r2,-12(fp)
 40034e0:	14000204 	addi	r16,r2,8
 40034e4:	e0bffc03 	ldbu	r2,-16(fp)
 40034e8:	014001c4 	movi	r5,7
 40034ec:	1009883a 	mov	r4,r2
 40034f0:	400dae00 	call	400dae0 <__mulsi3>
 40034f4:	8085883a 	add	r2,r16,r2
 40034f8:	00000106 	br	4003500 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
 40034fc:	0005883a 	mov	r2,zero
        };
 4003500:	e6ffff04 	addi	sp,fp,-4
 4003504:	dfc00217 	ldw	ra,8(sp)
 4003508:	df000117 	ldw	fp,4(sp)
 400350c:	dc000017 	ldw	r16,0(sp)
 4003510:	dec00304 	addi	sp,sp,12
 4003514:	f800283a 	ret

04003518 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 4003518:	defffd04 	addi	sp,sp,-12
 400351c:	df000215 	stw	fp,8(sp)
 4003520:	df000204 	addi	fp,sp,8
 4003524:	2005883a 	mov	r2,r4
 4003528:	e17fff15 	stw	r5,-4(fp)
 400352c:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 4003530:	0001883a 	nop
 4003534:	e037883a 	mov	sp,fp
 4003538:	df000017 	ldw	fp,0(sp)
 400353c:	dec00104 	addi	sp,sp,4
 4003540:	f800283a 	ret

04003544 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 4003544:	defff804 	addi	sp,sp,-32
 4003548:	dfc00715 	stw	ra,28(sp)
 400354c:	df000615 	stw	fp,24(sp)
 4003550:	dc000515 	stw	r16,20(sp)
 4003554:	df000604 	addi	fp,sp,24
 4003558:	e13ffb15 	stw	r4,-20(fp)
 400355c:	2809883a 	mov	r4,r5
 4003560:	3007883a 	mov	r3,r6
 4003564:	3805883a 	mov	r2,r7
 4003568:	e13ffc05 	stb	r4,-16(fp)
 400356c:	e0fffd05 	stb	r3,-12(fp)
 4003570:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 4003574:	e0bffc03 	ldbu	r2,-16(fp)
 4003578:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
 400357c:	e0fffa43 	ldbu	r3,-23(fp)
 4003580:	00bfe004 	movi	r2,-128
 4003584:	1884703a 	and	r2,r3,r2
 4003588:	10803fcc 	andi	r2,r2,255
 400358c:	1000031e 	bne	r2,zero,400359c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
 4003590:	e0bffe03 	ldbu	r2,-8(fp)
 4003594:	10800230 	cmpltui	r2,r2,8
 4003598:	1000021e 	bne	r2,zero,40035a4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
 400359c:	0005883a 	mov	r2,zero
 40035a0:	00007a06 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
 40035a4:	e0bffd03 	ldbu	r2,-12(fp)
 40035a8:	10000726 	beq	r2,zero,40035c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
 40035ac:	e0bffb17 	ldw	r2,-20(fp)
 40035b0:	108001c3 	ldbu	r2,7(r2)
 40035b4:	10803fcc 	andi	r2,r2,255
 40035b8:	108001d8 	cmpnei	r2,r2,7
 40035bc:	1000021e 	bne	r2,zero,40035c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
 40035c0:	0005883a 	mov	r2,zero
 40035c4:	00007106 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 40035c8:	000b883a 	mov	r5,zero
 40035cc:	e13ffb17 	ldw	r4,-20(fp)
 40035d0:	40039bc0 	call	40039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 40035d4:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
 40035d8:	e0bffa03 	ldbu	r2,-24(fp)
 40035dc:	1000021e 	bne	r2,zero,40035e8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
 40035e0:	0005883a 	mov	r2,zero
 40035e4:	00006906 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
 40035e8:	e0bffa43 	ldbu	r2,-23(fp)
 40035ec:	10803fcc 	andi	r2,r2,255
 40035f0:	1000241e 	bne	r2,zero,4003684 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
 40035f4:	e0bffd03 	ldbu	r2,-12(fp)
 40035f8:	10001026 	beq	r2,zero,400363c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
 40035fc:	e0bffa03 	ldbu	r2,-24(fp)
 4003600:	e43ffb17 	ldw	r16,-20(fp)
 4003604:	014001c4 	movi	r5,7
 4003608:	1009883a 	mov	r4,r2
 400360c:	400dae00 	call	400dae0 <__mulsi3>
 4003610:	8085883a 	add	r2,r16,r2
 4003614:	10800304 	addi	r2,r2,12
 4003618:	00c01044 	movi	r3,65
 400361c:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
 4003620:	e0bffb17 	ldw	r2,-20(fp)
 4003624:	108001c3 	ldbu	r2,7(r2)
 4003628:	10800044 	addi	r2,r2,1
 400362c:	1007883a 	mov	r3,r2
 4003630:	e0bffb17 	ldw	r2,-20(fp)
 4003634:	10c001c5 	stb	r3,7(r2)
 4003638:	00000906 	br	4003660 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
 400363c:	e0bffa03 	ldbu	r2,-24(fp)
 4003640:	e43ffb17 	ldw	r16,-20(fp)
 4003644:	014001c4 	movi	r5,7
 4003648:	1009883a 	mov	r4,r2
 400364c:	400dae00 	call	400dae0 <__mulsi3>
 4003650:	8085883a 	add	r2,r16,r2
 4003654:	10800304 	addi	r2,r2,12
 4003658:	00c00044 	movi	r3,1
 400365c:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
 4003660:	e0bffa03 	ldbu	r2,-24(fp)
 4003664:	e43ffb17 	ldw	r16,-20(fp)
 4003668:	014001c4 	movi	r5,7
 400366c:	1009883a 	mov	r4,r2
 4003670:	400dae00 	call	400dae0 <__mulsi3>
 4003674:	8085883a 	add	r2,r16,r2
 4003678:	10800304 	addi	r2,r2,12
 400367c:	10800003 	ldbu	r2,0(r2)
 4003680:	00004206 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 4003684:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
 4003688:	e0bffa43 	ldbu	r2,-23(fp)
 400368c:	108001cc 	andi	r2,r2,7
 4003690:	108001cc 	andi	r2,r2,7
 4003694:	100890fa 	slli	r4,r2,3
 4003698:	e0fffa83 	ldbu	r3,-22(fp)
 400369c:	00bff1c4 	movi	r2,-57
 40036a0:	1884703a 	and	r2,r3,r2
 40036a4:	1007883a 	mov	r3,r2
 40036a8:	2005883a 	mov	r2,r4
 40036ac:	1884b03a 	or	r2,r3,r2
 40036b0:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
 40036b4:	e0bffd03 	ldbu	r2,-12(fp)
 40036b8:	10001526 	beq	r2,zero,4003710 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
 40036bc:	e0bffa83 	ldbu	r2,-22(fp)
 40036c0:	10801014 	ori	r2,r2,64
 40036c4:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
 40036c8:	e0bffb17 	ldw	r2,-20(fp)
 40036cc:	108001c3 	ldbu	r2,7(r2)
 40036d0:	10800044 	addi	r2,r2,1
 40036d4:	1007883a 	mov	r3,r2
 40036d8:	e0bffb17 	ldw	r2,-20(fp)
 40036dc:	10c001c5 	stb	r3,7(r2)
 40036e0:	e0bffb17 	ldw	r2,-20(fp)
 40036e4:	108001c3 	ldbu	r2,7(r2)
 40036e8:	108001cc 	andi	r2,r2,7
 40036ec:	110001cc 	andi	r4,r2,7
 40036f0:	e0fffa83 	ldbu	r3,-22(fp)
 40036f4:	00bffe04 	movi	r2,-8
 40036f8:	1884703a 	and	r2,r3,r2
 40036fc:	1007883a 	mov	r3,r2
 4003700:	2005883a 	mov	r2,r4
 4003704:	1884b03a 	or	r2,r3,r2
 4003708:	e0bffa85 	stb	r2,-22(fp)
 400370c:	00000e06 	br	4003748 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
 4003710:	e0fffa83 	ldbu	r3,-22(fp)
 4003714:	00bfefc4 	movi	r2,-65
 4003718:	1884703a 	and	r2,r3,r2
 400371c:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
 4003720:	e0bffe03 	ldbu	r2,-8(fp)
 4003724:	108001cc 	andi	r2,r2,7
 4003728:	110001cc 	andi	r4,r2,7
 400372c:	e0fffa83 	ldbu	r3,-22(fp)
 4003730:	00bffe04 	movi	r2,-8
 4003734:	1884703a 	and	r2,r3,r2
 4003738:	1007883a 	mov	r3,r2
 400373c:	2005883a 	mov	r2,r4
 4003740:	1884b03a 	or	r2,r3,r2
 4003744:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
 4003748:	e0bffa03 	ldbu	r2,-24(fp)
 400374c:	e43ffb17 	ldw	r16,-20(fp)
 4003750:	014001c4 	movi	r5,7
 4003754:	1009883a 	mov	r4,r2
 4003758:	400dae00 	call	400dae0 <__mulsi3>
 400375c:	8085883a 	add	r2,r16,r2
 4003760:	10800304 	addi	r2,r2,12
 4003764:	e0fffa83 	ldbu	r3,-22(fp)
 4003768:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 400376c:	e0bffa03 	ldbu	r2,-24(fp)
 4003770:	e43ffb17 	ldw	r16,-20(fp)
 4003774:	014001c4 	movi	r5,7
 4003778:	1009883a 	mov	r4,r2
 400377c:	400dae00 	call	400dae0 <__mulsi3>
 4003780:	8085883a 	add	r2,r16,r2
 4003784:	10800304 	addi	r2,r2,12
 4003788:	10800003 	ldbu	r2,0(r2)
        };
 400378c:	e6ffff04 	addi	sp,fp,-4
 4003790:	dfc00217 	ldw	ra,8(sp)
 4003794:	df000117 	ldw	fp,4(sp)
 4003798:	dc000017 	ldw	r16,0(sp)
 400379c:	dec00304 	addi	sp,sp,12
 40037a0:	f800283a 	ret

040037a4 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 40037a4:	defffb04 	addi	sp,sp,-20
 40037a8:	dfc00415 	stw	ra,16(sp)
 40037ac:	df000315 	stw	fp,12(sp)
 40037b0:	df000304 	addi	fp,sp,12
 40037b4:	e13ffe15 	stw	r4,-8(fp)
 40037b8:	2805883a 	mov	r2,r5
 40037bc:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 40037c0:	e0bfff03 	ldbu	r2,-4(fp)
 40037c4:	10801058 	cmpnei	r2,r2,65
 40037c8:	1000031e 	bne	r2,zero,40037d8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
 40037cc:	e13ffe17 	ldw	r4,-8(fp)
 40037d0:	40039540 	call	4003954 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 40037d4:	00000906 	br	40037fc <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
 40037d8:	e0bfff03 	ldbu	r2,-4(fp)
 40037dc:	100b883a 	mov	r5,r2
 40037e0:	e13ffe17 	ldw	r4,-8(fp)
 40037e4:	40039bc0 	call	40039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 40037e8:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
 40037ec:	e0bffd03 	ldbu	r2,-12(fp)
 40037f0:	100b883a 	mov	r5,r2
 40037f4:	e13ffe17 	ldw	r4,-8(fp)
 40037f8:	4003a500 	call	4003a50 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 40037fc:	e037883a 	mov	sp,fp
 4003800:	dfc00117 	ldw	ra,4(sp)
 4003804:	df000017 	ldw	fp,0(sp)
 4003808:	dec00204 	addi	sp,sp,8
 400380c:	f800283a 	ret

04003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
 4003810:	defffa04 	addi	sp,sp,-24
 4003814:	dfc00515 	stw	ra,20(sp)
 4003818:	df000415 	stw	fp,16(sp)
 400381c:	dc400315 	stw	r17,12(sp)
 4003820:	dc000215 	stw	r16,8(sp)
 4003824:	df000404 	addi	fp,sp,16
 4003828:	e13ffc15 	stw	r4,-16(fp)
 400382c:	2805883a 	mov	r2,r5
 4003830:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
 4003834:	e0bffd03 	ldbu	r2,-12(fp)
 4003838:	e43ffc17 	ldw	r16,-16(fp)
 400383c:	014001c4 	movi	r5,7
 4003840:	1009883a 	mov	r4,r2
 4003844:	400dae00 	call	400dae0 <__mulsi3>
 4003848:	8085883a 	add	r2,r16,r2
 400384c:	10800304 	addi	r2,r2,12
 4003850:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
 4003854:	e0bffd03 	ldbu	r2,-12(fp)
 4003858:	e43ffc17 	ldw	r16,-16(fp)
 400385c:	014001c4 	movi	r5,7
 4003860:	1009883a 	mov	r4,r2
 4003864:	400dae00 	call	400dae0 <__mulsi3>
 4003868:	8085883a 	add	r2,r16,r2
 400386c:	10800344 	addi	r2,r2,13
 4003870:	00c00044 	movi	r3,1
 4003874:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
 4003878:	e0bffd03 	ldbu	r2,-12(fp)
 400387c:	e43ffc17 	ldw	r16,-16(fp)
 4003880:	014001c4 	movi	r5,7
 4003884:	1009883a 	mov	r4,r2
 4003888:	400dae00 	call	400dae0 <__mulsi3>
 400388c:	8085883a 	add	r2,r16,r2
 4003890:	10800384 	addi	r2,r2,14
 4003894:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
 4003898:	e0fffd03 	ldbu	r3,-12(fp)
 400389c:	e0bffc17 	ldw	r2,-16(fp)
 40038a0:	14000104 	addi	r16,r2,4
 40038a4:	e47ffc17 	ldw	r17,-16(fp)
 40038a8:	014001c4 	movi	r5,7
 40038ac:	1809883a 	mov	r4,r3
 40038b0:	400dae00 	call	400dae0 <__mulsi3>
 40038b4:	8885883a 	add	r2,r17,r2
 40038b8:	10800204 	addi	r2,r2,8
 40038bc:	81403fcc 	andi	r5,r16,255
 40038c0:	10c00003 	ldbu	r3,0(r2)
 40038c4:	1806703a 	and	r3,r3,zero
 40038c8:	1809883a 	mov	r4,r3
 40038cc:	2807883a 	mov	r3,r5
 40038d0:	20c6b03a 	or	r3,r4,r3
 40038d4:	10c00005 	stb	r3,0(r2)
 40038d8:	8006d23a 	srli	r3,r16,8
 40038dc:	19403fcc 	andi	r5,r3,255
 40038e0:	10c00043 	ldbu	r3,1(r2)
 40038e4:	1806703a 	and	r3,r3,zero
 40038e8:	1809883a 	mov	r4,r3
 40038ec:	2807883a 	mov	r3,r5
 40038f0:	20c6b03a 	or	r3,r4,r3
 40038f4:	10c00045 	stb	r3,1(r2)
 40038f8:	8006d43a 	srli	r3,r16,16
 40038fc:	19403fcc 	andi	r5,r3,255
 4003900:	10c00083 	ldbu	r3,2(r2)
 4003904:	1806703a 	and	r3,r3,zero
 4003908:	1809883a 	mov	r4,r3
 400390c:	2807883a 	mov	r3,r5
 4003910:	20c6b03a 	or	r3,r4,r3
 4003914:	10c00085 	stb	r3,2(r2)
 4003918:	800ad63a 	srli	r5,r16,24
 400391c:	10c000c3 	ldbu	r3,3(r2)
 4003920:	1806703a 	and	r3,r3,zero
 4003924:	1809883a 	mov	r4,r3
 4003928:	2807883a 	mov	r3,r5
 400392c:	20c6b03a 	or	r3,r4,r3
 4003930:	10c000c5 	stb	r3,3(r2)
        };
 4003934:	0001883a 	nop
 4003938:	e6fffe04 	addi	sp,fp,-8
 400393c:	dfc00317 	ldw	ra,12(sp)
 4003940:	df000217 	ldw	fp,8(sp)
 4003944:	dc400117 	ldw	r17,4(sp)
 4003948:	dc000017 	ldw	r16,0(sp)
 400394c:	dec00404 	addi	sp,sp,16
 4003950:	f800283a 	ret

04003954 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
 4003954:	defffc04 	addi	sp,sp,-16
 4003958:	dfc00315 	stw	ra,12(sp)
 400395c:	df000215 	stw	fp,8(sp)
 4003960:	df000204 	addi	fp,sp,8
 4003964:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 4003968:	00800044 	movi	r2,1
 400396c:	e0bffe05 	stb	r2,-8(fp)
 4003970:	e0bffe03 	ldbu	r2,-8(fp)
 4003974:	10800428 	cmpgeui	r2,r2,16
 4003978:	1000081e 	bne	r2,zero,400399c <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
 400397c:	e0bffe03 	ldbu	r2,-8(fp)
 4003980:	100b883a 	mov	r5,r2
 4003984:	e13fff17 	ldw	r4,-4(fp)
 4003988:	40038100 	call	4003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 400398c:	e0bffe03 	ldbu	r2,-8(fp)
 4003990:	10800044 	addi	r2,r2,1
 4003994:	e0bffe05 	stb	r2,-8(fp)
 4003998:	003ff506 	br	4003970 <__alt_mem_onchip_memory2_0+0xfc0026d0>
                        InitEntry(i);

                hubCounter = 0;
 400399c:	e0bfff17 	ldw	r2,-4(fp)
 40039a0:	100001c5 	stb	zero,7(r2)
        };
 40039a4:	0001883a 	nop
 40039a8:	e037883a 	mov	sp,fp
 40039ac:	dfc00117 	ldw	ra,4(sp)
 40039b0:	df000017 	ldw	fp,0(sp)
 40039b4:	dec00204 	addi	sp,sp,8
 40039b8:	f800283a 	ret

040039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
 40039bc:	defffa04 	addi	sp,sp,-24
 40039c0:	dfc00515 	stw	ra,20(sp)
 40039c4:	df000415 	stw	fp,16(sp)
 40039c8:	dc000315 	stw	r16,12(sp)
 40039cc:	df000404 	addi	fp,sp,16
 40039d0:	e13ffd15 	stw	r4,-12(fp)
 40039d4:	2805883a 	mov	r2,r5
 40039d8:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 40039dc:	00800044 	movi	r2,1
 40039e0:	e0bffc05 	stb	r2,-16(fp)
 40039e4:	e0bffc03 	ldbu	r2,-16(fp)
 40039e8:	10800428 	cmpgeui	r2,r2,16
 40039ec:	1000111e 	bne	r2,zero,4003a34 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
 40039f0:	e0bffc03 	ldbu	r2,-16(fp)
 40039f4:	e43ffd17 	ldw	r16,-12(fp)
 40039f8:	014001c4 	movi	r5,7
 40039fc:	1009883a 	mov	r4,r2
 4003a00:	400dae00 	call	400dae0 <__mulsi3>
 4003a04:	8085883a 	add	r2,r16,r2
 4003a08:	10800304 	addi	r2,r2,12
 4003a0c:	10800003 	ldbu	r2,0(r2)
 4003a10:	10c03fcc 	andi	r3,r2,255
 4003a14:	e0bffe03 	ldbu	r2,-8(fp)
 4003a18:	1880021e 	bne	r3,r2,4003a24 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
 4003a1c:	e0bffc03 	ldbu	r2,-16(fp)
 4003a20:	00000506 	br	4003a38 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 4003a24:	e0bffc03 	ldbu	r2,-16(fp)
 4003a28:	10800044 	addi	r2,r2,1
 4003a2c:	e0bffc05 	stb	r2,-16(fp)
 4003a30:	003fec06 	br	40039e4 <__alt_mem_onchip_memory2_0+0xfc002744>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
 4003a34:	0005883a 	mov	r2,zero
        };
 4003a38:	e6ffff04 	addi	sp,fp,-4
 4003a3c:	dfc00217 	ldw	ra,8(sp)
 4003a40:	df000117 	ldw	fp,4(sp)
 4003a44:	dc000017 	ldw	r16,0(sp)
 4003a48:	dec00304 	addi	sp,sp,12
 4003a4c:	f800283a 	ret

04003a50 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
 4003a50:	defffa04 	addi	sp,sp,-24
 4003a54:	dfc00515 	stw	ra,20(sp)
 4003a58:	df000415 	stw	fp,16(sp)
 4003a5c:	dc000315 	stw	r16,12(sp)
 4003a60:	df000404 	addi	fp,sp,16
 4003a64:	e13ffd15 	stw	r4,-12(fp)
 4003a68:	2805883a 	mov	r2,r5
 4003a6c:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
 4003a70:	e0bffe03 	ldbu	r2,-8(fp)
 4003a74:	10003026 	beq	r2,zero,4003b38 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
 4003a78:	e0bffe03 	ldbu	r2,-8(fp)
 4003a7c:	e43ffd17 	ldw	r16,-12(fp)
 4003a80:	014001c4 	movi	r5,7
 4003a84:	1009883a 	mov	r4,r2
 4003a88:	400dae00 	call	400dae0 <__mulsi3>
 4003a8c:	8085883a 	add	r2,r16,r2
 4003a90:	10800304 	addi	r2,r2,12
 4003a94:	10800003 	ldbu	r2,0(r2)
 4003a98:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
 4003a9c:	e0bffc43 	ldbu	r2,-15(fp)
 4003aa0:	1080100c 	andi	r2,r2,64
 4003aa4:	10803fcc 	andi	r2,r2,255
 4003aa8:	10001e26 	beq	r2,zero,4003b24 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 4003aac:	00800044 	movi	r2,1
 4003ab0:	e0bffc05 	stb	r2,-16(fp)
 4003ab4:	e0bffc03 	ldbu	r2,-16(fp)
 4003ab8:	100d883a 	mov	r6,r2
 4003abc:	e17ffc43 	ldbu	r5,-15(fp)
 4003ac0:	e13ffd17 	ldw	r4,-12(fp)
 4003ac4:	4003b540 	call	4003b54 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 4003ac8:	e0bffc05 	stb	r2,-16(fp)
 4003acc:	e0bffc03 	ldbu	r2,-16(fp)
 4003ad0:	1004c03a 	cmpne	r2,r2,zero
 4003ad4:	10803fcc 	andi	r2,r2,255
 4003ad8:	10000526 	beq	r2,zero,4003af0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
 4003adc:	e0bffc03 	ldbu	r2,-16(fp)
 4003ae0:	100b883a 	mov	r5,r2
 4003ae4:	e13ffd17 	ldw	r4,-12(fp)
 4003ae8:	4003a500 	call	4003a50 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 4003aec:	003ff106 	br	4003ab4 <__alt_mem_onchip_memory2_0+0xfc002814>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
 4003af0:	e0bffd17 	ldw	r2,-12(fp)
 4003af4:	10c001c3 	ldbu	r3,7(r2)
 4003af8:	e0bffc43 	ldbu	r2,-15(fp)
 4003afc:	108001cc 	andi	r2,r2,7
 4003b00:	18c03fcc 	andi	r3,r3,255
 4003b04:	10803fcc 	andi	r2,r2,255
 4003b08:	1880061e 	bne	r3,r2,4003b24 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
 4003b0c:	e0bffd17 	ldw	r2,-12(fp)
 4003b10:	108001c3 	ldbu	r2,7(r2)
 4003b14:	10bfffc4 	addi	r2,r2,-1
 4003b18:	1007883a 	mov	r3,r2
 4003b1c:	e0bffd17 	ldw	r2,-12(fp)
 4003b20:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
 4003b24:	e0bffe03 	ldbu	r2,-8(fp)
 4003b28:	100b883a 	mov	r5,r2
 4003b2c:	e13ffd17 	ldw	r4,-12(fp)
 4003b30:	40038100 	call	4003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 4003b34:	00000106 	br	4003b3c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
 4003b38:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
 4003b3c:	e6ffff04 	addi	sp,fp,-4
 4003b40:	dfc00217 	ldw	ra,8(sp)
 4003b44:	df000117 	ldw	fp,4(sp)
 4003b48:	dc000017 	ldw	r16,0(sp)
 4003b4c:	dec00304 	addi	sp,sp,12
 4003b50:	f800283a 	ret

04003b54 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 4003b54:	defff904 	addi	sp,sp,-28
 4003b58:	dfc00615 	stw	ra,24(sp)
 4003b5c:	df000515 	stw	fp,20(sp)
 4003b60:	dc000415 	stw	r16,16(sp)
 4003b64:	df000504 	addi	fp,sp,20
 4003b68:	e13ffc15 	stw	r4,-16(fp)
 4003b6c:	e17ffd05 	stb	r5,-12(fp)
 4003b70:	3005883a 	mov	r2,r6
 4003b74:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 4003b78:	e0bffe03 	ldbu	r2,-8(fp)
 4003b7c:	10000526 	beq	r2,zero,4003b94 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
 4003b80:	e0bffe03 	ldbu	r2,-8(fp)
 4003b84:	10800428 	cmpgeui	r2,r2,16
 4003b88:	1000021e 	bne	r2,zero,4003b94 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
 4003b8c:	e0bffe03 	ldbu	r2,-8(fp)
 4003b90:	00000106 	br	4003b98 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
 4003b94:	00800044 	movi	r2,1
 4003b98:	e0bffb05 	stb	r2,-20(fp)
 4003b9c:	e0bffb03 	ldbu	r2,-20(fp)
 4003ba0:	10800428 	cmpgeui	r2,r2,16
 4003ba4:	1000161e 	bne	r2,zero,4003c00 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 4003ba8:	e0bffb03 	ldbu	r2,-20(fp)
 4003bac:	e43ffc17 	ldw	r16,-16(fp)
 4003bb0:	014001c4 	movi	r5,7
 4003bb4:	1009883a 	mov	r4,r2
 4003bb8:	400dae00 	call	400dae0 <__mulsi3>
 4003bbc:	8085883a 	add	r2,r16,r2
 4003bc0:	10800304 	addi	r2,r2,12
 4003bc4:	10800003 	ldbu	r2,0(r2)
 4003bc8:	1004d0fa 	srli	r2,r2,3
 4003bcc:	108001cc 	andi	r2,r2,7
 4003bd0:	1007883a 	mov	r3,r2
 4003bd4:	e0bffd03 	ldbu	r2,-12(fp)
 4003bd8:	108001cc 	andi	r2,r2,7
 4003bdc:	18c03fcc 	andi	r3,r3,255
 4003be0:	10803fcc 	andi	r2,r2,255
 4003be4:	1880021e 	bne	r3,r2,4003bf0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
 4003be8:	e0bffb03 	ldbu	r2,-20(fp)
 4003bec:	00000506 	br	4003c04 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 4003bf0:	e0bffb03 	ldbu	r2,-20(fp)
 4003bf4:	10800044 	addi	r2,r2,1
 4003bf8:	e0bffb05 	stb	r2,-20(fp)
 4003bfc:	003fe706 	br	4003b9c <__alt_mem_onchip_memory2_0+0xfc0028fc>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
 4003c00:	0005883a 	mov	r2,zero
        };
 4003c04:	e6ffff04 	addi	sp,fp,-4
 4003c08:	dfc00217 	ldw	ra,8(sp)
 4003c0c:	df000117 	ldw	fp,4(sp)
 4003c10:	dc000017 	ldw	r16,0(sp)
 4003c14:	dec00304 	addi	sp,sp,12
 4003c18:	f800283a 	ret

04003c1c <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
 4003c1c:	defffb04 	addi	sp,sp,-20
 4003c20:	dfc00415 	stw	ra,16(sp)
 4003c24:	df000315 	stw	fp,12(sp)
 4003c28:	df000304 	addi	fp,sp,12
 4003c2c:	e13ffe15 	stw	r4,-8(fp)
 4003c30:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
 4003c34:	e0bffe17 	ldw	r2,-8(fp)
 4003c38:	1009883a 	mov	r4,r2
 4003c3c:	40055d80 	call	40055d8 <_ZN15USBDeviceConfigC1Ev>
 4003c40:	e0bffe17 	ldw	r2,-8(fp)
 4003c44:	10800104 	addi	r2,r2,4
 4003c48:	1009883a 	mov	r4,r2
 4003c4c:	400560c0 	call	400560c <_ZN17UsbConfigXtracterC1Ev>
 4003c50:	008100b4 	movhi	r2,1026
 4003c54:	10834c04 	addi	r2,r2,3376
 4003c58:	e0fffe17 	ldw	r3,-8(fp)
 4003c5c:	18800015 	stw	r2,0(r3)
 4003c60:	008100b4 	movhi	r2,1026
 4003c64:	10835904 	addi	r2,r2,3428
 4003c68:	e0fffe17 	ldw	r3,-8(fp)
 4003c6c:	18800115 	stw	r2,4(r3)
 4003c70:	e0bffe17 	ldw	r2,-8(fp)
 4003c74:	e0ffff17 	ldw	r3,-4(fp)
 4003c78:	10c00315 	stw	r3,12(r2)
 4003c7c:	e0bffe17 	ldw	r2,-8(fp)
 4003c80:	10000405 	stb	zero,16(r2)
 4003c84:	e0bffe17 	ldw	r2,-8(fp)
 4003c88:	00c00044 	movi	r3,1
 4003c8c:	10c006c5 	stb	r3,27(r2)
 4003c90:	e0bffe17 	ldw	r2,-8(fp)
 4003c94:	10000715 	stw	zero,28(r2)
 4003c98:	e0bffe17 	ldw	r2,-8(fp)
 4003c9c:	10000905 	stb	zero,36(r2)
 4003ca0:	e0bffe17 	ldw	r2,-8(fp)
 4003ca4:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
 4003ca8:	e03ffd05 	stb	zero,-12(fp)
 4003cac:	e0bffd03 	ldbu	r2,-12(fp)
 4003cb0:	108000e8 	cmpgeui	r2,r2,3
 4003cb4:	1000431e 	bne	r2,zero,4003dc4 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
 4003cb8:	e0fffd03 	ldbu	r3,-12(fp)
 4003cbc:	e13ffe17 	ldw	r4,-8(fp)
 4003cc0:	1805883a 	mov	r2,r3
 4003cc4:	1085883a 	add	r2,r2,r2
 4003cc8:	10c5883a 	add	r2,r2,r3
 4003ccc:	2085883a 	add	r2,r4,r2
 4003cd0:	10800444 	addi	r2,r2,17
 4003cd4:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 4003cd8:	e13ffd03 	ldbu	r4,-12(fp)
 4003cdc:	e0bffd03 	ldbu	r2,-12(fp)
 4003ce0:	10000226 	beq	r2,zero,4003cec <_ZN7XBOXONEC1EP3USB+0xd0>
 4003ce4:	0007883a 	mov	r3,zero
 4003ce8:	00000106 	br	4003cf0 <_ZN7XBOXONEC1EP3USB+0xd4>
 4003cec:	00c00204 	movi	r3,8
 4003cf0:	e17ffe17 	ldw	r5,-8(fp)
 4003cf4:	2005883a 	mov	r2,r4
 4003cf8:	1085883a 	add	r2,r2,r2
 4003cfc:	1105883a 	add	r2,r2,r4
 4003d00:	2885883a 	add	r2,r5,r2
 4003d04:	10800484 	addi	r2,r2,18
 4003d08:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
 4003d0c:	e0fffd03 	ldbu	r3,-12(fp)
 4003d10:	e13ffe17 	ldw	r4,-8(fp)
 4003d14:	1805883a 	mov	r2,r3
 4003d18:	1085883a 	add	r2,r2,r2
 4003d1c:	10c5883a 	add	r2,r2,r3
 4003d20:	2085883a 	add	r2,r4,r2
 4003d24:	10800404 	addi	r2,r2,16
 4003d28:	110000c3 	ldbu	r4,3(r2)
 4003d2c:	00ffff84 	movi	r3,-2
 4003d30:	20c6703a 	and	r3,r4,r3
 4003d34:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
 4003d38:	e0fffd03 	ldbu	r3,-12(fp)
 4003d3c:	e13ffe17 	ldw	r4,-8(fp)
 4003d40:	1805883a 	mov	r2,r3
 4003d44:	1085883a 	add	r2,r2,r2
 4003d48:	10c5883a 	add	r2,r2,r3
 4003d4c:	2085883a 	add	r2,r4,r2
 4003d50:	10800404 	addi	r2,r2,16
 4003d54:	110000c3 	ldbu	r4,3(r2)
 4003d58:	00ffff44 	movi	r3,-3
 4003d5c:	20c6703a 	and	r3,r4,r3
 4003d60:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 4003d64:	e13ffd03 	ldbu	r4,-12(fp)
 4003d68:	e0bffd03 	ldbu	r2,-12(fp)
 4003d6c:	10000226 	beq	r2,zero,4003d78 <_ZN7XBOXONEC1EP3USB+0x15c>
 4003d70:	00c00044 	movi	r3,1
 4003d74:	00000106 	br	4003d7c <_ZN7XBOXONEC1EP3USB+0x160>
 4003d78:	00c003c4 	movi	r3,15
 4003d7c:	e17ffe17 	ldw	r5,-8(fp)
 4003d80:	2005883a 	mov	r2,r4
 4003d84:	1085883a 	add	r2,r2,r2
 4003d88:	1105883a 	add	r2,r2,r4
 4003d8c:	2885883a 	add	r2,r5,r2
 4003d90:	10800404 	addi	r2,r2,16
 4003d94:	18c7883a 	add	r3,r3,r3
 4003d98:	18cb883a 	add	r5,r3,r3
 4003d9c:	10c000c3 	ldbu	r3,3(r2)
 4003da0:	18c000cc 	andi	r3,r3,3
 4003da4:	1809883a 	mov	r4,r3
 4003da8:	2807883a 	mov	r3,r5
 4003dac:	20c6b03a 	or	r3,r4,r3
 4003db0:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
 4003db4:	e0bffd03 	ldbu	r2,-12(fp)
 4003db8:	10800044 	addi	r2,r2,1
 4003dbc:	e0bffd05 	stb	r2,-12(fp)
 4003dc0:	003fba06 	br	4003cac <__alt_mem_onchip_memory2_0+0xfc002a0c>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
 4003dc4:	e0bffe17 	ldw	r2,-8(fp)
 4003dc8:	10800317 	ldw	r2,12(r2)
 4003dcc:	10000626 	beq	r2,zero,4003de8 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
 4003dd0:	e0bffe17 	ldw	r2,-8(fp)
 4003dd4:	10800317 	ldw	r2,12(r2)
 4003dd8:	e0fffe17 	ldw	r3,-8(fp)
 4003ddc:	180b883a 	mov	r5,r3
 4003de0:	1009883a 	mov	r4,r2
 4003de4:	400538c0 	call	400538c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 4003de8:	0001883a 	nop
 4003dec:	e037883a 	mov	sp,fp
 4003df0:	dfc00117 	ldw	ra,4(sp)
 4003df4:	df000017 	ldw	fp,0(sp)
 4003df8:	dec00204 	addi	sp,sp,8
 4003dfc:	f800283a 	ret

04003e00 <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
 4003e00:	deffde04 	addi	sp,sp,-136
 4003e04:	dfc02115 	stw	ra,132(sp)
 4003e08:	df002015 	stw	fp,128(sp)
 4003e0c:	df002004 	addi	fp,sp,128
 4003e10:	e13ffc15 	stw	r4,-16(fp)
 4003e14:	2809883a 	mov	r4,r5
 4003e18:	3007883a 	mov	r3,r6
 4003e1c:	3805883a 	mov	r2,r7
 4003e20:	e13ffd05 	stb	r4,-12(fp)
 4003e24:	e0fffe05 	stb	r3,-8(fp)
 4003e28:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 4003e2c:	e0bfe744 	addi	r2,fp,-99
 4003e30:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
 4003e34:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
 4003e38:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
 4003e3c:	e0bffc17 	ldw	r2,-16(fp)
 4003e40:	10800317 	ldw	r2,12(r2)
 4003e44:	1009883a 	mov	r4,r2
 4003e48:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 4003e4c:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
 4003e50:	e0bffc17 	ldw	r2,-16(fp)
 4003e54:	10800403 	ldbu	r2,16(r2)
 4003e58:	10803fcc 	andi	r2,r2,255
 4003e5c:	10000226 	beq	r2,zero,4003e68 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 4003e60:	00bff644 	movi	r2,-39
 4003e64:	00017606 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 4003e68:	e0bfe517 	ldw	r2,-108(fp)
 4003e6c:	10800017 	ldw	r2,0(r2)
 4003e70:	10800017 	ldw	r2,0(r2)
 4003e74:	000b883a 	mov	r5,zero
 4003e78:	e13fe517 	ldw	r4,-108(fp)
 4003e7c:	103ee83a 	callr	r2
 4003e80:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
 4003e84:	e0bfe317 	ldw	r2,-116(fp)
 4003e88:	1000021e 	bne	r2,zero,4003e94 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4003e8c:	00bff584 	movi	r2,-42
 4003e90:	00016b06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
 4003e94:	e0bfe317 	ldw	r2,-116(fp)
 4003e98:	10c00003 	ldbu	r3,0(r2)
 4003e9c:	11000043 	ldbu	r4,1(r2)
 4003ea0:	2008923a 	slli	r4,r4,8
 4003ea4:	20c6b03a 	or	r3,r4,r3
 4003ea8:	11000083 	ldbu	r4,2(r2)
 4003eac:	2008943a 	slli	r4,r4,16
 4003eb0:	20c6b03a 	or	r3,r4,r3
 4003eb4:	108000c3 	ldbu	r2,3(r2)
 4003eb8:	1004963a 	slli	r2,r2,24
 4003ebc:	10c4b03a 	or	r2,r2,r3
 4003ec0:	1000021e 	bne	r2,zero,4003ecc <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 4003ec4:	00bff5c4 	movi	r2,-41
 4003ec8:	00015d06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 4003ecc:	e0bfe317 	ldw	r2,-116(fp)
 4003ed0:	10c00003 	ldbu	r3,0(r2)
 4003ed4:	11000043 	ldbu	r4,1(r2)
 4003ed8:	2008923a 	slli	r4,r4,8
 4003edc:	20c6b03a 	or	r3,r4,r3
 4003ee0:	11000083 	ldbu	r4,2(r2)
 4003ee4:	2008943a 	slli	r4,r4,16
 4003ee8:	20c6b03a 	or	r3,r4,r3
 4003eec:	108000c3 	ldbu	r2,3(r2)
 4003ef0:	1004963a 	slli	r2,r2,24
 4003ef4:	10c4b03a 	or	r2,r2,r3
 4003ef8:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
 4003efc:	e0bffc17 	ldw	r2,-16(fp)
 4003f00:	10c00444 	addi	r3,r2,17
 4003f04:	e0bfe317 	ldw	r2,-116(fp)
 4003f08:	19803fcc 	andi	r6,r3,255
 4003f0c:	11000003 	ldbu	r4,0(r2)
 4003f10:	2008703a 	and	r4,r4,zero
 4003f14:	200b883a 	mov	r5,r4
 4003f18:	3009883a 	mov	r4,r6
 4003f1c:	2908b03a 	or	r4,r5,r4
 4003f20:	11000005 	stb	r4,0(r2)
 4003f24:	1808d23a 	srli	r4,r3,8
 4003f28:	21803fcc 	andi	r6,r4,255
 4003f2c:	11000043 	ldbu	r4,1(r2)
 4003f30:	2008703a 	and	r4,r4,zero
 4003f34:	200b883a 	mov	r5,r4
 4003f38:	3009883a 	mov	r4,r6
 4003f3c:	2908b03a 	or	r4,r5,r4
 4003f40:	11000045 	stb	r4,1(r2)
 4003f44:	1808d43a 	srli	r4,r3,16
 4003f48:	21803fcc 	andi	r6,r4,255
 4003f4c:	11000083 	ldbu	r4,2(r2)
 4003f50:	2008703a 	and	r4,r4,zero
 4003f54:	200b883a 	mov	r5,r4
 4003f58:	3009883a 	mov	r4,r6
 4003f5c:	2908b03a 	or	r4,r5,r4
 4003f60:	11000085 	stb	r4,2(r2)
 4003f64:	180ad63a 	srli	r5,r3,24
 4003f68:	10c000c3 	ldbu	r3,3(r2)
 4003f6c:	1806703a 	and	r3,r3,zero
 4003f70:	1809883a 	mov	r4,r3
 4003f74:	2807883a 	mov	r3,r5
 4003f78:	20c6b03a 	or	r3,r4,r3
 4003f7c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
 4003f80:	e0bfe317 	ldw	r2,-116(fp)
 4003f84:	e0ffff03 	ldbu	r3,-4(fp)
 4003f88:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 4003f8c:	e0bffc17 	ldw	r2,-16(fp)
 4003f90:	10c00317 	ldw	r3,12(r2)
 4003f94:	00800484 	movi	r2,18
 4003f98:	113fffcc 	andi	r4,r2,65535
 4003f9c:	e0bfe744 	addi	r2,fp,-99
 4003fa0:	d8800015 	stw	r2,0(sp)
 4003fa4:	200f883a 	mov	r7,r4
 4003fa8:	000d883a 	mov	r6,zero
 4003fac:	000b883a 	mov	r5,zero
 4003fb0:	1809883a 	mov	r4,r3
 4003fb4:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 4003fb8:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 4003fbc:	e0bfe317 	ldw	r2,-116(fp)
 4003fc0:	e0ffe417 	ldw	r3,-112(fp)
 4003fc4:	19403fcc 	andi	r5,r3,255
 4003fc8:	10c00003 	ldbu	r3,0(r2)
 4003fcc:	1806703a 	and	r3,r3,zero
 4003fd0:	1809883a 	mov	r4,r3
 4003fd4:	2807883a 	mov	r3,r5
 4003fd8:	20c6b03a 	or	r3,r4,r3
 4003fdc:	10c00005 	stb	r3,0(r2)
 4003fe0:	e0ffe417 	ldw	r3,-112(fp)
 4003fe4:	1806d23a 	srli	r3,r3,8
 4003fe8:	19403fcc 	andi	r5,r3,255
 4003fec:	10c00043 	ldbu	r3,1(r2)
 4003ff0:	1806703a 	and	r3,r3,zero
 4003ff4:	1809883a 	mov	r4,r3
 4003ff8:	2807883a 	mov	r3,r5
 4003ffc:	20c6b03a 	or	r3,r4,r3
 4004000:	10c00045 	stb	r3,1(r2)
 4004004:	e0ffe417 	ldw	r3,-112(fp)
 4004008:	1806d43a 	srli	r3,r3,16
 400400c:	19403fcc 	andi	r5,r3,255
 4004010:	10c00083 	ldbu	r3,2(r2)
 4004014:	1806703a 	and	r3,r3,zero
 4004018:	1809883a 	mov	r4,r3
 400401c:	2807883a 	mov	r3,r5
 4004020:	20c6b03a 	or	r3,r4,r3
 4004024:	10c00085 	stb	r3,2(r2)
 4004028:	e0ffe417 	ldw	r3,-112(fp)
 400402c:	180ad63a 	srli	r5,r3,24
 4004030:	10c000c3 	ldbu	r3,3(r2)
 4004034:	1806703a 	and	r3,r3,zero
 4004038:	1809883a 	mov	r4,r3
 400403c:	2807883a 	mov	r3,r5
 4004040:	20c6b03a 	or	r3,r4,r3
 4004044:	10c000c5 	stb	r3,3(r2)

        if(rcode)
 4004048:	e0bfe103 	ldbu	r2,-124(fp)
 400404c:	1000e61e 	bne	r2,zero,40043e8 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
 4004050:	e0bfe217 	ldw	r2,-120(fp)
 4004054:	10c00203 	ldbu	r3,8(r2)
 4004058:	10800243 	ldbu	r2,9(r2)
 400405c:	1004923a 	slli	r2,r2,8
 4004060:	10c4b03a 	or	r2,r2,r3
 4004064:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
 4004068:	e0bfe217 	ldw	r2,-120(fp)
 400406c:	10c00283 	ldbu	r3,10(r2)
 4004070:	108002c3 	ldbu	r2,11(r2)
 4004074:	1004923a 	slli	r2,r2,8
 4004078:	10c4b03a 	or	r2,r2,r3
 400407c:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
 4004080:	e0bffc17 	ldw	r2,-16(fp)
 4004084:	10800017 	ldw	r2,0(r2)
 4004088:	10800604 	addi	r2,r2,24
 400408c:	10800017 	ldw	r2,0(r2)
 4004090:	e0ffe60b 	ldhu	r3,-104(fp)
 4004094:	e13fe68b 	ldhu	r4,-102(fp)
 4004098:	200d883a 	mov	r6,r4
 400409c:	180b883a 	mov	r5,r3
 40040a0:	e13ffc17 	ldw	r4,-16(fp)
 40040a4:	103ee83a 	callr	r2
 40040a8:	1080005c 	xori	r2,r2,1
 40040ac:	10803fcc 	andi	r2,r2,255
 40040b0:	1000d51e 	bne	r2,zero,4004408 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
 40040b4:	e0bfe517 	ldw	r2,-108(fp)
 40040b8:	10800017 	ldw	r2,0(r2)
 40040bc:	10800104 	addi	r2,r2,4
 40040c0:	10800017 	ldw	r2,0(r2)
 40040c4:	e0fffd03 	ldbu	r3,-12(fp)
 40040c8:	e13ffe03 	ldbu	r4,-8(fp)
 40040cc:	200f883a 	mov	r7,r4
 40040d0:	000d883a 	mov	r6,zero
 40040d4:	180b883a 	mov	r5,r3
 40040d8:	e13fe517 	ldw	r4,-108(fp)
 40040dc:	103ee83a 	callr	r2
 40040e0:	1007883a 	mov	r3,r2
 40040e4:	e0bffc17 	ldw	r2,-16(fp)
 40040e8:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
 40040ec:	e0bffc17 	ldw	r2,-16(fp)
 40040f0:	10800403 	ldbu	r2,16(r2)
 40040f4:	10803fcc 	andi	r2,r2,255
 40040f8:	1000021e 	bne	r2,zero,4004104 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 40040fc:	00bff504 	movi	r2,-44
 4004100:	0000cf06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
 4004104:	e0bfe217 	ldw	r2,-120(fp)
 4004108:	10c001c3 	ldbu	r3,7(r2)
 400410c:	e0bffc17 	ldw	r2,-16(fp)
 4004110:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
 4004114:	e0bffc17 	ldw	r2,-16(fp)
 4004118:	10c00317 	ldw	r3,12(r2)
 400411c:	e0bffc17 	ldw	r2,-16(fp)
 4004120:	10800403 	ldbu	r2,16(r2)
 4004124:	10803fcc 	andi	r2,r2,255
 4004128:	100f883a 	mov	r7,r2
 400412c:	000d883a 	mov	r6,zero
 4004130:	000b883a 	mov	r5,zero
 4004134:	1809883a 	mov	r4,r3
 4004138:	40032500 	call	4003250 <_ZN3USB7setAddrEhhh>
 400413c:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
 4004140:	e0bfe103 	ldbu	r2,-124(fp)
 4004144:	10001026 	beq	r2,zero,4004188 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
 4004148:	e0bfe317 	ldw	r2,-116(fp)
 400414c:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
 4004150:	e0bfe517 	ldw	r2,-108(fp)
 4004154:	10800017 	ldw	r2,0(r2)
 4004158:	10800204 	addi	r2,r2,8
 400415c:	10800017 	ldw	r2,0(r2)
 4004160:	e0fffc17 	ldw	r3,-16(fp)
 4004164:	18c00403 	ldbu	r3,16(r3)
 4004168:	18c03fcc 	andi	r3,r3,255
 400416c:	180b883a 	mov	r5,r3
 4004170:	e13fe517 	ldw	r4,-108(fp)
 4004174:	103ee83a 	callr	r2
                bAddress = 0;
 4004178:	e0bffc17 	ldw	r2,-16(fp)
 400417c:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
 4004180:	e0bfe103 	ldbu	r2,-124(fp)
 4004184:	0000ae06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
 4004188:	e0bfe317 	ldw	r2,-116(fp)
 400418c:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
 4004190:	e0bfe517 	ldw	r2,-108(fp)
 4004194:	10800017 	ldw	r2,0(r2)
 4004198:	10800017 	ldw	r2,0(r2)
 400419c:	e0fffc17 	ldw	r3,-16(fp)
 40041a0:	18c00403 	ldbu	r3,16(r3)
 40041a4:	18c03fcc 	andi	r3,r3,255
 40041a8:	180b883a 	mov	r5,r3
 40041ac:	e13fe517 	ldw	r4,-108(fp)
 40041b0:	103ee83a 	callr	r2
 40041b4:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
 40041b8:	e0bfe317 	ldw	r2,-116(fp)
 40041bc:	1000021e 	bne	r2,zero,40041c8 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40041c0:	00bff584 	movi	r2,-42
 40041c4:	00009e06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
 40041c8:	e0bfe317 	ldw	r2,-116(fp)
 40041cc:	e0ffff03 	ldbu	r3,-4(fp)
 40041d0:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
 40041d4:	e0bffc17 	ldw	r2,-16(fp)
 40041d8:	10c00317 	ldw	r3,12(r2)
 40041dc:	e0bffc17 	ldw	r2,-16(fp)
 40041e0:	10800403 	ldbu	r2,16(r2)
 40041e4:	11003fcc 	andi	r4,r2,255
 40041e8:	e0bffc17 	ldw	r2,-16(fp)
 40041ec:	10800444 	addi	r2,r2,17
 40041f0:	100f883a 	mov	r7,r2
 40041f4:	01800044 	movi	r6,1
 40041f8:	200b883a 	mov	r5,r4
 40041fc:	1809883a 	mov	r4,r3
 4004200:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 4004204:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 4004208:	e0bfe103 	ldbu	r2,-124(fp)
 400420c:	1000781e 	bne	r2,zero,40043f0 <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
 4004210:	e0bfe217 	ldw	r2,-120(fp)
 4004214:	10800443 	ldbu	r2,17(r2)
 4004218:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
 400421c:	e0bfe703 	ldbu	r2,-100(fp)
 4004220:	01402004 	movi	r5,128
 4004224:	1009883a 	mov	r4,r2
 4004228:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
 400422c:	e03fe145 	stb	zero,-123(fp)
 4004230:	e0ffe143 	ldbu	r3,-123(fp)
 4004234:	e0bfe703 	ldbu	r2,-100(fp)
 4004238:	1880222e 	bgeu	r3,r2,40042c4 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
 400423c:	e0bffc17 	ldw	r2,-16(fp)
 4004240:	10c00104 	addi	r3,r2,4
 4004244:	e0bfed04 	addi	r2,fp,-76
 4004248:	180b883a 	mov	r5,r3
 400424c:	1009883a 	mov	r4,r2
 4004250:	40056740 	call	4005674 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 4004254:	e0bffc17 	ldw	r2,-16(fp)
 4004258:	10c00317 	ldw	r3,12(r2)
 400425c:	e0bffc17 	ldw	r2,-16(fp)
 4004260:	10800403 	ldbu	r2,16(r2)
 4004264:	11003fcc 	andi	r4,r2,255
 4004268:	e17fe143 	ldbu	r5,-123(fp)
 400426c:	e0bfed04 	addi	r2,fp,-76
 4004270:	d8800015 	stw	r2,0(sp)
 4004274:	280f883a 	mov	r7,r5
 4004278:	000d883a 	mov	r6,zero
 400427c:	200b883a 	mov	r5,r4
 4004280:	1809883a 	mov	r4,r3
 4004284:	40030b00 	call	40030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 4004288:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
 400428c:	e0bfe103 	ldbu	r2,-124(fp)
 4004290:	10000226 	beq	r2,zero,400429c <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
 4004294:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 4004298:	00006206 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
 400429c:	e0bffc17 	ldw	r2,-16(fp)
 40042a0:	108006c3 	ldbu	r2,27(r2)
 40042a4:	10803fcc 	andi	r2,r2,255
 40042a8:	108000f0 	cmpltui	r2,r2,3
 40042ac:	10000426 	beq	r2,zero,40042c0 <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
 40042b0:	e0bfe143 	ldbu	r2,-123(fp)
 40042b4:	10800044 	addi	r2,r2,1
 40042b8:	e0bfe145 	stb	r2,-123(fp)
 40042bc:	003fdc06 	br	4004230 <__alt_mem_onchip_memory2_0+0xfc002f90>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
 40042c0:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
 40042c4:	e0bffc17 	ldw	r2,-16(fp)
 40042c8:	108006c3 	ldbu	r2,27(r2)
 40042cc:	10803fcc 	andi	r2,r2,255
 40042d0:	108000e8 	cmpgeui	r2,r2,3
 40042d4:	10004e26 	beq	r2,zero,4004410 <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 40042d8:	e0bffc17 	ldw	r2,-16(fp)
 40042dc:	10c00317 	ldw	r3,12(r2)
 40042e0:	e0bffc17 	ldw	r2,-16(fp)
 40042e4:	10800403 	ldbu	r2,16(r2)
 40042e8:	11003fcc 	andi	r4,r2,255
 40042ec:	e0bffc17 	ldw	r2,-16(fp)
 40042f0:	108006c3 	ldbu	r2,27(r2)
 40042f4:	11403fcc 	andi	r5,r2,255
 40042f8:	e0bffc17 	ldw	r2,-16(fp)
 40042fc:	10800444 	addi	r2,r2,17
 4004300:	100f883a 	mov	r7,r2
 4004304:	280d883a 	mov	r6,r5
 4004308:	200b883a 	mov	r5,r4
 400430c:	1809883a 	mov	r4,r3
 4004310:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 4004314:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 4004318:	e0bfe103 	ldbu	r2,-124(fp)
 400431c:	1000361e 	bne	r2,zero,40043f8 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
 4004320:	01003204 	movi	r4,200
 4004324:	4000dd40 	call	4000dd4 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
 4004328:	e0bffc17 	ldw	r2,-16(fp)
 400432c:	10c00317 	ldw	r3,12(r2)
 4004330:	e0bffc17 	ldw	r2,-16(fp)
 4004334:	10800403 	ldbu	r2,16(r2)
 4004338:	11003fcc 	andi	r4,r2,255
 400433c:	e0bffc17 	ldw	r2,-16(fp)
 4004340:	10800443 	ldbu	r2,17(r2)
 4004344:	11403fcc 	andi	r5,r2,255
 4004348:	e0bffc17 	ldw	r2,-16(fp)
 400434c:	10800683 	ldbu	r2,26(r2)
 4004350:	10803fcc 	andi	r2,r2,255
 4004354:	100f883a 	mov	r7,r2
 4004358:	280d883a 	mov	r6,r5
 400435c:	200b883a 	mov	r5,r4
 4004360:	1809883a 	mov	r4,r3
 4004364:	40032e40 	call	40032e4 <_ZN3USB7setConfEhhh>
 4004368:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 400436c:	e0bfe103 	ldbu	r2,-124(fp)
 4004370:	1000231e 	bne	r2,zero,4004400 <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
 4004374:	01003204 	movi	r4,200
 4004378:	4000dd40 	call	4000dd4 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
 400437c:	e0bffc17 	ldw	r2,-16(fp)
 4004380:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
 4004384:	00800144 	movi	r2,5
 4004388:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
 400438c:	00800804 	movi	r2,32
 4004390:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
 4004394:	00800044 	movi	r2,1
 4004398:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
 400439c:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
 40043a0:	e0bfebc4 	addi	r2,fp,-81
 40043a4:	01800144 	movi	r6,5
 40043a8:	100b883a 	mov	r5,r2
 40043ac:	e13ffc17 	ldw	r4,-16(fp)
 40043b0:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>
 40043b4:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
 40043b8:	e0bfe103 	ldbu	r2,-124(fp)
 40043bc:	1000181e 	bne	r2,zero,4004420 <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
 40043c0:	e13ffc17 	ldw	r4,-16(fp)
 40043c4:	4004d680 	call	4004d68 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
 40043c8:	e0bffc17 	ldw	r2,-16(fp)
 40043cc:	00c00044 	movi	r3,1
 40043d0:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
 40043d4:	e0bffc17 	ldw	r2,-16(fp)
 40043d8:	00c00044 	movi	r3,1
 40043dc:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
 40043e0:	0005883a 	mov	r2,zero
 40043e4:	00001606 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
 40043e8:	0001883a 	nop
 40043ec:	00000d06 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
 40043f0:	0001883a 	nop
 40043f4:	00000b06 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
 40043f8:	0001883a 	nop
 40043fc:	00000906 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
 4004400:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 4004404:	00000706 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
 4004408:	0001883a 	nop
 400440c:	00000106 	br	4004414 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
 4004410:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 4004414:	00bff444 	movi	r2,-47
 4004418:	e0bfe105 	stb	r2,-124(fp)
 400441c:	00000106 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
 4004420:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 4004424:	e0bffc17 	ldw	r2,-16(fp)
 4004428:	10800017 	ldw	r2,0(r2)
 400442c:	10800204 	addi	r2,r2,8
 4004430:	10800017 	ldw	r2,0(r2)
 4004434:	e13ffc17 	ldw	r4,-16(fp)
 4004438:	103ee83a 	callr	r2
        return rcode;
 400443c:	e0bfe103 	ldbu	r2,-124(fp)
}
 4004440:	e037883a 	mov	sp,fp
 4004444:	dfc00117 	ldw	ra,4(sp)
 4004448:	df000017 	ldw	fp,0(sp)
 400444c:	dec00204 	addi	sp,sp,8
 4004450:	f800283a 	ret

04004454 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
 4004454:	defff904 	addi	sp,sp,-28
 4004458:	df000615 	stw	fp,24(sp)
 400445c:	df000604 	addi	fp,sp,24
 4004460:	e13ffb15 	stw	r4,-20(fp)
 4004464:	3009883a 	mov	r4,r6
 4004468:	3807883a 	mov	r3,r7
 400446c:	e0800117 	ldw	r2,4(fp)
 4004470:	e17ffc05 	stb	r5,-16(fp)
 4004474:	e13ffd05 	stb	r4,-12(fp)
 4004478:	e0fffe05 	stb	r3,-8(fp)
 400447c:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
 4004480:	e0bffb17 	ldw	r2,-20(fp)
 4004484:	e0fffc03 	ldbu	r3,-16(fp)
 4004488:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
 400448c:	e0800217 	ldw	r2,8(fp)
 4004490:	108000c3 	ldbu	r2,3(r2)
 4004494:	10803fcc 	andi	r2,r2,255
 4004498:	108000cc 	andi	r2,r2,3
 400449c:	108000d8 	cmpnei	r2,r2,3
 40044a0:	1000361e 	bne	r2,zero,400457c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
 40044a4:	e0800217 	ldw	r2,8(fp)
 40044a8:	10800083 	ldbu	r2,2(r2)
 40044ac:	10803fcc 	andi	r2,r2,255
 40044b0:	1080201c 	xori	r2,r2,128
 40044b4:	10bfe004 	addi	r2,r2,-128
 40044b8:	1000020e 	bge	r2,zero,40044c4 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
 40044bc:	00800084 	movi	r2,2
 40044c0:	00000106 	br	40044c8 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
 40044c4:	00800044 	movi	r2,1
 40044c8:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 40044cc:	e0fffa03 	ldbu	r3,-24(fp)
 40044d0:	e0800217 	ldw	r2,8(fp)
 40044d4:	10800083 	ldbu	r2,2(r2)
 40044d8:	108003cc 	andi	r2,r2,15
 40044dc:	100b883a 	mov	r5,r2
 40044e0:	e13ffb17 	ldw	r4,-20(fp)
 40044e4:	1805883a 	mov	r2,r3
 40044e8:	1085883a 	add	r2,r2,r2
 40044ec:	10c5883a 	add	r2,r2,r3
 40044f0:	2085883a 	add	r2,r4,r2
 40044f4:	10800444 	addi	r2,r2,17
 40044f8:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 40044fc:	e0fffa03 	ldbu	r3,-24(fp)
 4004500:	e0800217 	ldw	r2,8(fp)
 4004504:	11000103 	ldbu	r4,4(r2)
 4004508:	10800143 	ldbu	r2,5(r2)
 400450c:	1004923a 	slli	r2,r2,8
 4004510:	1104b03a 	or	r2,r2,r4
 4004514:	100b883a 	mov	r5,r2
 4004518:	e13ffb17 	ldw	r4,-20(fp)
 400451c:	1805883a 	mov	r2,r3
 4004520:	1085883a 	add	r2,r2,r2
 4004524:	10c5883a 	add	r2,r2,r3
 4004528:	2085883a 	add	r2,r4,r2
 400452c:	10800484 	addi	r2,r2,18
 4004530:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 4004534:	e0bffb17 	ldw	r2,-20(fp)
 4004538:	10c00903 	ldbu	r3,36(r2)
 400453c:	e0800217 	ldw	r2,8(fp)
 4004540:	10800183 	ldbu	r2,6(r2)
 4004544:	18c03fcc 	andi	r3,r3,255
 4004548:	10803fcc 	andi	r2,r2,255
 400454c:	1880042e 	bgeu	r3,r2,4004560 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
 4004550:	e0800217 	ldw	r2,8(fp)
 4004554:	10c00183 	ldbu	r3,6(r2)
 4004558:	e0bffb17 	ldw	r2,-20(fp)
 400455c:	10c00905 	stb	r3,36(r2)
        bNumEP++;
 4004560:	e0bffb17 	ldw	r2,-20(fp)
 4004564:	108006c3 	ldbu	r2,27(r2)
 4004568:	10800044 	addi	r2,r2,1
 400456c:	1007883a 	mov	r3,r2
 4004570:	e0bffb17 	ldw	r2,-20(fp)
 4004574:	10c006c5 	stb	r3,27(r2)
 4004578:	00000106 	br	4004580 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
 400457c:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
 4004580:	e037883a 	mov	sp,fp
 4004584:	df000017 	ldw	fp,0(sp)
 4004588:	dec00104 	addi	sp,sp,4
 400458c:	f800283a 	ret

04004590 <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 4004590:	213fff04 	addi	r4,r4,-4
 4004594:	40044541 	jmpi	4004454 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

04004598 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
 4004598:	defffd04 	addi	sp,sp,-12
 400459c:	df000215 	stw	fp,8(sp)
 40045a0:	df000204 	addi	fp,sp,8
 40045a4:	e13ffe15 	stw	r4,-8(fp)
 40045a8:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
 40045ac:	0001883a 	nop
 40045b0:	e037883a 	mov	sp,fp
 40045b4:	df000017 	ldw	fp,0(sp)
 40045b8:	dec00104 	addi	sp,sp,4
 40045bc:	f800283a 	ret

040045c0 <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
 40045c0:	defffd04 	addi	sp,sp,-12
 40045c4:	dfc00215 	stw	ra,8(sp)
 40045c8:	df000115 	stw	fp,4(sp)
 40045cc:	df000104 	addi	fp,sp,4
 40045d0:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
 40045d4:	e0bfff17 	ldw	r2,-4(fp)
 40045d8:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
 40045dc:	e0bfff17 	ldw	r2,-4(fp)
 40045e0:	10800317 	ldw	r2,12(r2)
 40045e4:	1009883a 	mov	r4,r2
 40045e8:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 40045ec:	1009883a 	mov	r4,r2
 40045f0:	20800017 	ldw	r2,0(r4)
 40045f4:	10800204 	addi	r2,r2,8
 40045f8:	10800017 	ldw	r2,0(r2)
 40045fc:	e0ffff17 	ldw	r3,-4(fp)
 4004600:	18c00403 	ldbu	r3,16(r3)
 4004604:	18c03fcc 	andi	r3,r3,255
 4004608:	180b883a 	mov	r5,r3
 400460c:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
 4004610:	e0bfff17 	ldw	r2,-4(fp)
 4004614:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
 4004618:	e0bfff17 	ldw	r2,-4(fp)
 400461c:	00c00044 	movi	r3,1
 4004620:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
 4004624:	e0bfff17 	ldw	r2,-4(fp)
 4004628:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
 400462c:	e0bfff17 	ldw	r2,-4(fp)
 4004630:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
 4004634:	e0bfff17 	ldw	r2,-4(fp)
 4004638:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
 400463c:	0005883a 	mov	r2,zero
}
 4004640:	e037883a 	mov	sp,fp
 4004644:	dfc00117 	ldw	ra,4(sp)
 4004648:	df000017 	ldw	fp,0(sp)
 400464c:	dec00204 	addi	sp,sp,8
 4004650:	f800283a 	ret

04004654 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
 4004654:	defffa04 	addi	sp,sp,-24
 4004658:	dfc00515 	stw	ra,20(sp)
 400465c:	df000415 	stw	fp,16(sp)
 4004660:	df000404 	addi	fp,sp,16
 4004664:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
 4004668:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
 400466c:	e0bfff17 	ldw	r2,-4(fp)
 4004670:	10800943 	ldbu	r2,37(r2)
 4004674:	1080005c 	xori	r2,r2,1
 4004678:	10803fcc 	andi	r2,r2,255
 400467c:	10000226 	beq	r2,zero,4004688 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
 4004680:	0005883a 	mov	r2,zero
 4004684:	00002c06 	br	4004738 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
 4004688:	4000e2c0 	call	4000e2c <_Z6millisv>
 400468c:	1007883a 	mov	r3,r2
 4004690:	e0bfff17 	ldw	r2,-4(fp)
 4004694:	10800717 	ldw	r2,28(r2)
 4004698:	1885c83a 	sub	r2,r3,r2
 400469c:	0084303a 	nor	r2,zero,r2
 40046a0:	1004d7fa 	srli	r2,r2,31
 40046a4:	10803fcc 	andi	r2,r2,255
 40046a8:	10002226 	beq	r2,zero,4004734 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 40046ac:	4000e2c0 	call	4000e2c <_Z6millisv>
 40046b0:	1007883a 	mov	r3,r2
 40046b4:	e0bfff17 	ldw	r2,-4(fp)
 40046b8:	10800903 	ldbu	r2,36(r2)
 40046bc:	10803fcc 	andi	r2,r2,255
 40046c0:	1887883a 	add	r3,r3,r2
 40046c4:	e0bfff17 	ldw	r2,-4(fp)
 40046c8:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
 40046cc:	e0bfff17 	ldw	r2,-4(fp)
 40046d0:	10800603 	ldbu	r2,24(r2)
 40046d4:	10803fcc 	andi	r2,r2,255
 40046d8:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
 40046dc:	e0bfff17 	ldw	r2,-4(fp)
 40046e0:	11000317 	ldw	r4,12(r2)
 40046e4:	e0bfff17 	ldw	r2,-4(fp)
 40046e8:	10800403 	ldbu	r2,16(r2)
 40046ec:	11403fcc 	andi	r5,r2,255
 40046f0:	e0bfff17 	ldw	r2,-4(fp)
 40046f4:	108005c3 	ldbu	r2,23(r2)
 40046f8:	11803fcc 	andi	r6,r2,255
 40046fc:	e0bfff17 	ldw	r2,-4(fp)
 4004700:	10800f84 	addi	r2,r2,62
 4004704:	e0ffff17 	ldw	r3,-4(fp)
 4004708:	18c00903 	ldbu	r3,36(r3)
 400470c:	18c03fcc 	andi	r3,r3,255
 4004710:	e1fffe84 	addi	r7,fp,-6
 4004714:	d8c00115 	stw	r3,4(sp)
 4004718:	d8800015 	stw	r2,0(sp)
 400471c:	40015fc0 	call	40015fc <_ZN3USB10inTransferEhhPtPhh>
 4004720:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
 4004724:	e0bffe43 	ldbu	r2,-7(fp)
 4004728:	1000021e 	bne	r2,zero,4004734 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
 400472c:	e13fff17 	ldw	r4,-4(fp)
 4004730:	400474c0 	call	400474c <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
 4004734:	e0bffe03 	ldbu	r2,-8(fp)
}
 4004738:	e037883a 	mov	sp,fp
 400473c:	dfc00117 	ldw	ra,4(sp)
 4004740:	df000017 	ldw	fp,0(sp)
 4004744:	dec00204 	addi	sp,sp,8
 4004748:	f800283a 	ret

0400474c <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
 400474c:	defffd04 	addi	sp,sp,-12
 4004750:	df000215 	stw	fp,8(sp)
 4004754:	df000204 	addi	fp,sp,8
 4004758:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
 400475c:	e0bfff17 	ldw	r2,-4(fp)
 4004760:	10800f83 	ldbu	r2,62(r2)
 4004764:	10803fcc 	andi	r2,r2,255
 4004768:	108001d8 	cmpnei	r2,r2,7
 400476c:	10002f1e 	bne	r2,zero,400482c <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
 4004770:	e0bfff17 	ldw	r2,-4(fp)
 4004774:	10801083 	ldbu	r2,66(r2)
 4004778:	10803fcc 	andi	r2,r2,255
 400477c:	10800058 	cmpnei	r2,r2,1
 4004780:	10000a1e 	bne	r2,zero,40047ac <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
 4004784:	e0bfff17 	ldw	r2,-4(fp)
 4004788:	10c0098b 	ldhu	r3,38(r2)
 400478c:	008100b4 	movhi	r2,1026
 4004790:	10834884 	addi	r2,r2,3362
 4004794:	1080000b 	ldhu	r2,0(r2)
 4004798:	1884b03a 	or	r2,r3,r2
 400479c:	1007883a 	mov	r3,r2
 40047a0:	e0bfff17 	ldw	r2,-4(fp)
 40047a4:	10c0098d 	sth	r3,38(r2)
 40047a8:	00000b06 	br	40047d8 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
 40047ac:	e0bfff17 	ldw	r2,-4(fp)
 40047b0:	1080098b 	ldhu	r2,38(r2)
 40047b4:	1007883a 	mov	r3,r2
 40047b8:	008100b4 	movhi	r2,1026
 40047bc:	10834884 	addi	r2,r2,3362
 40047c0:	1080000b 	ldhu	r2,0(r2)
 40047c4:	0084303a 	nor	r2,zero,r2
 40047c8:	1884703a 	and	r2,r3,r2
 40047cc:	1007883a 	mov	r3,r2
 40047d0:	e0bfff17 	ldw	r2,-4(fp)
 40047d4:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
 40047d8:	e0bfff17 	ldw	r2,-4(fp)
 40047dc:	10c0098b 	ldhu	r3,38(r2)
 40047e0:	e0bfff17 	ldw	r2,-4(fp)
 40047e4:	10800a0b 	ldhu	r2,40(r2)
 40047e8:	18ffffcc 	andi	r3,r3,65535
 40047ec:	10bfffcc 	andi	r2,r2,65535
 40047f0:	18800e26 	beq	r3,r2,400482c <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
 40047f4:	e0bfff17 	ldw	r2,-4(fp)
 40047f8:	1080098b 	ldhu	r2,38(r2)
 40047fc:	1007883a 	mov	r3,r2
 4004800:	e0bfff17 	ldw	r2,-4(fp)
 4004804:	10800a0b 	ldhu	r2,40(r2)
 4004808:	0084303a 	nor	r2,zero,r2
 400480c:	1884703a 	and	r2,r3,r2
 4004810:	1007883a 	mov	r3,r2
 4004814:	e0bfff17 	ldw	r2,-4(fp)
 4004818:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
 400481c:	e0bfff17 	ldw	r2,-4(fp)
 4004820:	10c0098b 	ldhu	r3,38(r2)
 4004824:	e0bfff17 	ldw	r2,-4(fp)
 4004828:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
 400482c:	e0bfff17 	ldw	r2,-4(fp)
 4004830:	10800f83 	ldbu	r2,62(r2)
 4004834:	10803fcc 	andi	r2,r2,255
 4004838:	10800820 	cmpeqi	r2,r2,32
 400483c:	1000b026 	beq	r2,zero,4004b00 <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
 4004840:	e0bfff17 	ldw	r2,-4(fp)
 4004844:	10c0098b 	ldhu	r3,38(r2)
 4004848:	008100b4 	movhi	r2,1026
 400484c:	10834884 	addi	r2,r2,3362
 4004850:	1080000b 	ldhu	r2,0(r2)
 4004854:	1884703a 	and	r2,r3,r2
 4004858:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
 400485c:	e0bfff17 	ldw	r2,-4(fp)
 4004860:	108010c3 	ldbu	r2,67(r2)
 4004864:	10803fcc 	andi	r2,r2,255
 4004868:	108003cc 	andi	r2,r2,15
 400486c:	1004923a 	slli	r2,r2,8
 4004870:	1007883a 	mov	r3,r2
 4004874:	e0bffe0b 	ldhu	r2,-8(fp)
 4004878:	1884b03a 	or	r2,r3,r2
 400487c:	1007883a 	mov	r3,r2
 4004880:	e0bfff17 	ldw	r2,-4(fp)
 4004884:	10801083 	ldbu	r2,66(r2)
 4004888:	10803fcc 	andi	r2,r2,255
 400488c:	10803c0c 	andi	r2,r2,240
 4004890:	1884b03a 	or	r2,r3,r2
 4004894:	1007883a 	mov	r3,r2
 4004898:	e0bfff17 	ldw	r2,-4(fp)
 400489c:	10801083 	ldbu	r2,66(r2)
 40048a0:	10803fcc 	andi	r2,r2,255
 40048a4:	1080030c 	andi	r2,r2,12
 40048a8:	100492ba 	slli	r2,r2,10
 40048ac:	1884b03a 	or	r2,r3,r2
 40048b0:	1007883a 	mov	r3,r2
 40048b4:	e0bfff17 	ldw	r2,-4(fp)
 40048b8:	10801083 	ldbu	r2,66(r2)
 40048bc:	10803fcc 	andi	r2,r2,255
 40048c0:	1080004c 	andi	r2,r2,1
 40048c4:	100490fa 	slli	r2,r2,3
 40048c8:	1884b03a 	or	r2,r3,r2
 40048cc:	1007883a 	mov	r3,r2
 40048d0:	e0bfff17 	ldw	r2,-4(fp)
 40048d4:	108010c3 	ldbu	r2,67(r2)
 40048d8:	10803fcc 	andi	r2,r2,255
 40048dc:	1080300c 	andi	r2,r2,192
 40048e0:	1004923a 	slli	r2,r2,8
 40048e4:	1884b03a 	or	r2,r3,r2
 40048e8:	1007883a 	mov	r3,r2
 40048ec:	e0bfff17 	ldw	r2,-4(fp)
 40048f0:	108010c3 	ldbu	r2,67(r2)
 40048f4:	10803fcc 	andi	r2,r2,255
 40048f8:	10800c0c 	andi	r2,r2,48
 40048fc:	1005d13a 	srai	r2,r2,4
 4004900:	1884b03a 	or	r2,r3,r2
 4004904:	1007883a 	mov	r3,r2
 4004908:	e0bfff17 	ldw	r2,-4(fp)
 400490c:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
 4004910:	e0bfff17 	ldw	r2,-4(fp)
 4004914:	10801143 	ldbu	r2,69(r2)
 4004918:	10803fcc 	andi	r2,r2,255
 400491c:	1004923a 	slli	r2,r2,8
 4004920:	1007883a 	mov	r3,r2
 4004924:	e0bfff17 	ldw	r2,-4(fp)
 4004928:	10801103 	ldbu	r2,68(r2)
 400492c:	10803fcc 	andi	r2,r2,255
 4004930:	1884b03a 	or	r2,r3,r2
 4004934:	1007883a 	mov	r3,r2
 4004938:	e0bfff17 	ldw	r2,-4(fp)
 400493c:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
 4004940:	e0bfff17 	ldw	r2,-4(fp)
 4004944:	108011c3 	ldbu	r2,71(r2)
 4004948:	10803fcc 	andi	r2,r2,255
 400494c:	1004923a 	slli	r2,r2,8
 4004950:	1007883a 	mov	r3,r2
 4004954:	e0bfff17 	ldw	r2,-4(fp)
 4004958:	10801183 	ldbu	r2,70(r2)
 400495c:	10803fcc 	andi	r2,r2,255
 4004960:	1884b03a 	or	r2,r3,r2
 4004964:	1007883a 	mov	r3,r2
 4004968:	e0bfff17 	ldw	r2,-4(fp)
 400496c:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
 4004970:	e0bfff17 	ldw	r2,-4(fp)
 4004974:	10801243 	ldbu	r2,73(r2)
 4004978:	10803fcc 	andi	r2,r2,255
 400497c:	1004923a 	slli	r2,r2,8
 4004980:	1007883a 	mov	r3,r2
 4004984:	e0bfff17 	ldw	r2,-4(fp)
 4004988:	10801203 	ldbu	r2,72(r2)
 400498c:	10803fcc 	andi	r2,r2,255
 4004990:	1884b03a 	or	r2,r3,r2
 4004994:	1007883a 	mov	r3,r2
 4004998:	e0bfff17 	ldw	r2,-4(fp)
 400499c:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
 40049a0:	e0bfff17 	ldw	r2,-4(fp)
 40049a4:	108012c3 	ldbu	r2,75(r2)
 40049a8:	10803fcc 	andi	r2,r2,255
 40049ac:	1004923a 	slli	r2,r2,8
 40049b0:	1007883a 	mov	r3,r2
 40049b4:	e0bfff17 	ldw	r2,-4(fp)
 40049b8:	10801283 	ldbu	r2,74(r2)
 40049bc:	10803fcc 	andi	r2,r2,255
 40049c0:	1884b03a 	or	r2,r3,r2
 40049c4:	1007883a 	mov	r3,r2
 40049c8:	e0bfff17 	ldw	r2,-4(fp)
 40049cc:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
 40049d0:	e0bfff17 	ldw	r2,-4(fp)
 40049d4:	10801343 	ldbu	r2,77(r2)
 40049d8:	10803fcc 	andi	r2,r2,255
 40049dc:	1004923a 	slli	r2,r2,8
 40049e0:	1007883a 	mov	r3,r2
 40049e4:	e0bfff17 	ldw	r2,-4(fp)
 40049e8:	10801303 	ldbu	r2,76(r2)
 40049ec:	10803fcc 	andi	r2,r2,255
 40049f0:	1884b03a 	or	r2,r3,r2
 40049f4:	1007883a 	mov	r3,r2
 40049f8:	e0bfff17 	ldw	r2,-4(fp)
 40049fc:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
 4004a00:	e0bfff17 	ldw	r2,-4(fp)
 4004a04:	108013c3 	ldbu	r2,79(r2)
 4004a08:	10803fcc 	andi	r2,r2,255
 4004a0c:	1004923a 	slli	r2,r2,8
 4004a10:	1007883a 	mov	r3,r2
 4004a14:	e0bfff17 	ldw	r2,-4(fp)
 4004a18:	10801383 	ldbu	r2,78(r2)
 4004a1c:	10803fcc 	andi	r2,r2,255
 4004a20:	1884b03a 	or	r2,r3,r2
 4004a24:	1007883a 	mov	r3,r2
 4004a28:	e0bfff17 	ldw	r2,-4(fp)
 4004a2c:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
 4004a30:	e0bfff17 	ldw	r2,-4(fp)
 4004a34:	10c0098b 	ldhu	r3,38(r2)
 4004a38:	e0bfff17 	ldw	r2,-4(fp)
 4004a3c:	10800a0b 	ldhu	r2,40(r2)
 4004a40:	18ffffcc 	andi	r3,r3,65535
 4004a44:	10bfffcc 	andi	r2,r2,65535
 4004a48:	18800e26 	beq	r3,r2,4004a84 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
 4004a4c:	e0bfff17 	ldw	r2,-4(fp)
 4004a50:	1080098b 	ldhu	r2,38(r2)
 4004a54:	1007883a 	mov	r3,r2
 4004a58:	e0bfff17 	ldw	r2,-4(fp)
 4004a5c:	10800a0b 	ldhu	r2,40(r2)
 4004a60:	0084303a 	nor	r2,zero,r2
 4004a64:	1884703a 	and	r2,r3,r2
 4004a68:	1007883a 	mov	r3,r2
 4004a6c:	e0bfff17 	ldw	r2,-4(fp)
 4004a70:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
 4004a74:	e0bfff17 	ldw	r2,-4(fp)
 4004a78:	10c0098b 	ldhu	r3,38(r2)
 4004a7c:	e0bfff17 	ldw	r2,-4(fp)
 4004a80:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
 4004a84:	e0bfff17 	ldw	r2,-4(fp)
 4004a88:	10800d0b 	ldhu	r2,52(r2)
 4004a8c:	10bfffcc 	andi	r2,r2,65535
 4004a90:	10000726 	beq	r2,zero,4004ab0 <_ZN7XBOXONE10readReportEv+0x364>
 4004a94:	e0bfff17 	ldw	r2,-4(fp)
 4004a98:	10800e0b 	ldhu	r2,56(r2)
 4004a9c:	10bfffcc 	andi	r2,r2,65535
 4004aa0:	1000031e 	bne	r2,zero,4004ab0 <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
 4004aa4:	e0bfff17 	ldw	r2,-4(fp)
 4004aa8:	00c00044 	movi	r3,1
 4004aac:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
 4004ab0:	e0bfff17 	ldw	r2,-4(fp)
 4004ab4:	10c00d0b 	ldhu	r3,52(r2)
 4004ab8:	e0bfff17 	ldw	r2,-4(fp)
 4004abc:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
 4004ac0:	e0bfff17 	ldw	r2,-4(fp)
 4004ac4:	10800d8b 	ldhu	r2,54(r2)
 4004ac8:	10bfffcc 	andi	r2,r2,65535
 4004acc:	10000726 	beq	r2,zero,4004aec <_ZN7XBOXONE10readReportEv+0x3a0>
 4004ad0:	e0bfff17 	ldw	r2,-4(fp)
 4004ad4:	10800e8b 	ldhu	r2,58(r2)
 4004ad8:	10bfffcc 	andi	r2,r2,65535
 4004adc:	1000031e 	bne	r2,zero,4004aec <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
 4004ae0:	e0bfff17 	ldw	r2,-4(fp)
 4004ae4:	00c00044 	movi	r3,1
 4004ae8:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
 4004aec:	e0bfff17 	ldw	r2,-4(fp)
 4004af0:	10c00d8b 	ldhu	r3,54(r2)
 4004af4:	e0bfff17 	ldw	r2,-4(fp)
 4004af8:	10c00e8d 	sth	r3,58(r2)
 4004afc:	00000106 	br	4004b04 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
 4004b00:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
 4004b04:	e037883a 	mov	sp,fp
 4004b08:	df000017 	ldw	fp,0(sp)
 4004b0c:	dec00104 	addi	sp,sp,4
 4004b10:	f800283a 	ret

04004b14 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
 4004b14:	defffd04 	addi	sp,sp,-12
 4004b18:	df000215 	stw	fp,8(sp)
 4004b1c:	df000204 	addi	fp,sp,8
 4004b20:	e13ffe15 	stw	r4,-8(fp)
 4004b24:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
 4004b28:	e0bfff17 	ldw	r2,-4(fp)
 4004b2c:	10800218 	cmpnei	r2,r2,8
 4004b30:	1000031e 	bne	r2,zero,4004b40 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
 4004b34:	e0bffe17 	ldw	r2,-8(fp)
 4004b38:	10800d0b 	ldhu	r2,52(r2)
 4004b3c:	00001306 	br	4004b8c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
 4004b40:	e0bfff17 	ldw	r2,-4(fp)
 4004b44:	10800258 	cmpnei	r2,r2,9
 4004b48:	1000031e 	bne	r2,zero,4004b58 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
 4004b4c:	e0bffe17 	ldw	r2,-8(fp)
 4004b50:	10800d8b 	ldhu	r2,54(r2)
 4004b54:	00000d06 	br	4004b8c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
 4004b58:	e0bffe17 	ldw	r2,-8(fp)
 4004b5c:	10c0098b 	ldhu	r3,38(r2)
 4004b60:	e0bfff17 	ldw	r2,-4(fp)
 4004b64:	10803fcc 	andi	r2,r2,255
 4004b68:	1089883a 	add	r4,r2,r2
 4004b6c:	008100b4 	movhi	r2,1026
 4004b70:	10834084 	addi	r2,r2,3330
 4004b74:	2085883a 	add	r2,r4,r2
 4004b78:	1080000b 	ldhu	r2,0(r2)
 4004b7c:	1884703a 	and	r2,r3,r2
 4004b80:	10bfffcc 	andi	r2,r2,65535
 4004b84:	1004c03a 	cmpne	r2,r2,zero
 4004b88:	10803fcc 	andi	r2,r2,255
}
 4004b8c:	e037883a 	mov	sp,fp
 4004b90:	df000017 	ldw	fp,0(sp)
 4004b94:	dec00104 	addi	sp,sp,4
 4004b98:	f800283a 	ret

04004b9c <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
 4004b9c:	defffc04 	addi	sp,sp,-16
 4004ba0:	df000315 	stw	fp,12(sp)
 4004ba4:	df000304 	addi	fp,sp,12
 4004ba8:	e13ffe15 	stw	r4,-8(fp)
 4004bac:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
 4004bb0:	e0bfff17 	ldw	r2,-4(fp)
 4004bb4:	10800218 	cmpnei	r2,r2,8
 4004bb8:	10000a1e 	bne	r2,zero,4004be4 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
 4004bbc:	e0bffe17 	ldw	r2,-8(fp)
 4004bc0:	10800f03 	ldbu	r2,60(r2)
 4004bc4:	10803fcc 	andi	r2,r2,255
 4004bc8:	10000426 	beq	r2,zero,4004bdc <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
 4004bcc:	e0bffe17 	ldw	r2,-8(fp)
 4004bd0:	10000f05 	stb	zero,60(r2)
                        return true;
 4004bd4:	00800044 	movi	r2,1
 4004bd8:	00002806 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
 4004bdc:	0005883a 	mov	r2,zero
 4004be0:	00002606 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
 4004be4:	e0bfff17 	ldw	r2,-4(fp)
 4004be8:	10800258 	cmpnei	r2,r2,9
 4004bec:	10000a1e 	bne	r2,zero,4004c18 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
 4004bf0:	e0bffe17 	ldw	r2,-8(fp)
 4004bf4:	10800f43 	ldbu	r2,61(r2)
 4004bf8:	10803fcc 	andi	r2,r2,255
 4004bfc:	10000426 	beq	r2,zero,4004c10 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
 4004c00:	e0bffe17 	ldw	r2,-8(fp)
 4004c04:	10000f45 	stb	zero,61(r2)
                        return true;
 4004c08:	00800044 	movi	r2,1
 4004c0c:	00001b06 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
 4004c10:	0005883a 	mov	r2,zero
 4004c14:	00001906 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
 4004c18:	e0bfff17 	ldw	r2,-4(fp)
 4004c1c:	10803fcc 	andi	r2,r2,255
 4004c20:	1087883a 	add	r3,r2,r2
 4004c24:	008100b4 	movhi	r2,1026
 4004c28:	10834084 	addi	r2,r2,3330
 4004c2c:	1885883a 	add	r2,r3,r2
 4004c30:	1080000b 	ldhu	r2,0(r2)
 4004c34:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
 4004c38:	e0bffe17 	ldw	r2,-8(fp)
 4004c3c:	10c00a8b 	ldhu	r3,42(r2)
 4004c40:	e0bffd0b 	ldhu	r2,-12(fp)
 4004c44:	1884703a 	and	r2,r3,r2
 4004c48:	10bfffcc 	andi	r2,r2,65535
 4004c4c:	1004c03a 	cmpne	r2,r2,zero
 4004c50:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
 4004c54:	e0bffe17 	ldw	r2,-8(fp)
 4004c58:	10800a8b 	ldhu	r2,42(r2)
 4004c5c:	1007883a 	mov	r3,r2
 4004c60:	e0bffd0b 	ldhu	r2,-12(fp)
 4004c64:	0084303a 	nor	r2,zero,r2
 4004c68:	1884703a 	and	r2,r3,r2
 4004c6c:	1007883a 	mov	r3,r2
 4004c70:	e0bffe17 	ldw	r2,-8(fp)
 4004c74:	10c00a8d 	sth	r3,42(r2)
        return click;
 4004c78:	e0bffd83 	ldbu	r2,-10(fp)
}
 4004c7c:	e037883a 	mov	sp,fp
 4004c80:	df000017 	ldw	fp,0(sp)
 4004c84:	dec00104 	addi	sp,sp,4
 4004c88:	f800283a 	ret

04004c8c <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
 4004c8c:	defffd04 	addi	sp,sp,-12
 4004c90:	df000215 	stw	fp,8(sp)
 4004c94:	df000204 	addi	fp,sp,8
 4004c98:	e13ffe15 	stw	r4,-8(fp)
 4004c9c:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
 4004ca0:	e0bfff17 	ldw	r2,-4(fp)
 4004ca4:	e0fffe17 	ldw	r3,-8(fp)
 4004ca8:	10800584 	addi	r2,r2,22
 4004cac:	1085883a 	add	r2,r2,r2
 4004cb0:	1885883a 	add	r2,r3,r2
 4004cb4:	1080000b 	ldhu	r2,0(r2)
}
 4004cb8:	e037883a 	mov	sp,fp
 4004cbc:	df000017 	ldw	fp,0(sp)
 4004cc0:	dec00104 	addi	sp,sp,4
 4004cc4:	f800283a 	ret

04004cc8 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
 4004cc8:	defff904 	addi	sp,sp,-28
 4004ccc:	dfc00615 	stw	ra,24(sp)
 4004cd0:	df000515 	stw	fp,20(sp)
 4004cd4:	df000504 	addi	fp,sp,20
 4004cd8:	e13ffd15 	stw	r4,-12(fp)
 4004cdc:	e17ffe15 	stw	r5,-8(fp)
 4004ce0:	3005883a 	mov	r2,r6
 4004ce4:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
 4004ce8:	e0bffe17 	ldw	r2,-8(fp)
 4004cec:	10c00084 	addi	r3,r2,2
 4004cf0:	e0bffd17 	ldw	r2,-12(fp)
 4004cf4:	10801f83 	ldbu	r2,126(r2)
 4004cf8:	11000044 	addi	r4,r2,1
 4004cfc:	200b883a 	mov	r5,r4
 4004d00:	e13ffd17 	ldw	r4,-12(fp)
 4004d04:	21401f85 	stb	r5,126(r4)
 4004d08:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
 4004d0c:	e0bffd17 	ldw	r2,-12(fp)
 4004d10:	10c00317 	ldw	r3,12(r2)
 4004d14:	e0bffd17 	ldw	r2,-12(fp)
 4004d18:	10800403 	ldbu	r2,16(r2)
 4004d1c:	11003fcc 	andi	r4,r2,255
 4004d20:	e0bffd17 	ldw	r2,-12(fp)
 4004d24:	10800503 	ldbu	r2,20(r2)
 4004d28:	11403fcc 	andi	r5,r2,255
 4004d2c:	e1bfff0b 	ldhu	r6,-4(fp)
 4004d30:	e0bffe17 	ldw	r2,-8(fp)
 4004d34:	d8800015 	stw	r2,0(sp)
 4004d38:	300f883a 	mov	r7,r6
 4004d3c:	280d883a 	mov	r6,r5
 4004d40:	200b883a 	mov	r5,r4
 4004d44:	1809883a 	mov	r4,r3
 4004d48:	40019900 	call	4001990 <_ZN3USB11outTransferEhhtPh>
 4004d4c:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
 4004d50:	e0bffc03 	ldbu	r2,-16(fp)
}
 4004d54:	e037883a 	mov	sp,fp
 4004d58:	dfc00117 	ldw	ra,4(sp)
 4004d5c:	df000017 	ldw	fp,0(sp)
 4004d60:	dec00204 	addi	sp,sp,8
 4004d64:	f800283a 	ret

04004d68 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
 4004d68:	defff904 	addi	sp,sp,-28
 4004d6c:	dfc00615 	stw	ra,24(sp)
 4004d70:	df000515 	stw	fp,20(sp)
 4004d74:	df000504 	addi	fp,sp,20
 4004d78:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004d7c:	00800244 	movi	r2,9
 4004d80:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
 4004d84:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004d88:	00800244 	movi	r2,9
 4004d8c:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
 4004d90:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004d94:	008003c4 	movi	r2,15
 4004d98:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
 4004d9c:	00800104 	movi	r2,4
 4004da0:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
 4004da4:	00800104 	movi	r2,4
 4004da8:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
 4004dac:	00800804 	movi	r2,32
 4004db0:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
 4004db4:	00800804 	movi	r2,32
 4004db8:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
 4004dbc:	00bfe004 	movi	r2,-128
 4004dc0:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
 4004dc4:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
 4004dc8:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
 4004dcc:	01800344 	movi	r6,13
 4004dd0:	e17ffb04 	addi	r5,fp,-20
 4004dd4:	e13fff17 	ldw	r4,-4(fp)
 4004dd8:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
 4004ddc:	e0bfff17 	ldw	r2,-4(fp)
 4004de0:	10800817 	ldw	r2,32(r2)
 4004de4:	10000326 	beq	r2,zero,4004df4 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
 4004de8:	e0bfff17 	ldw	r2,-4(fp)
 4004dec:	10800817 	ldw	r2,32(r2)
 4004df0:	103ee83a 	callr	r2
}
 4004df4:	0001883a 	nop
 4004df8:	e037883a 	mov	sp,fp
 4004dfc:	dfc00117 	ldw	ra,4(sp)
 4004e00:	df000017 	ldw	fp,0(sp)
 4004e04:	dec00204 	addi	sp,sp,8
 4004e08:	f800283a 	ret

04004e0c <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
 4004e0c:	defff904 	addi	sp,sp,-28
 4004e10:	dfc00615 	stw	ra,24(sp)
 4004e14:	df000515 	stw	fp,20(sp)
 4004e18:	df000504 	addi	fp,sp,20
 4004e1c:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004e20:	00800244 	movi	r2,9
 4004e24:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
 4004e28:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004e2c:	00800244 	movi	r2,9
 4004e30:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
 4004e34:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004e38:	008003c4 	movi	r2,15
 4004e3c:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
 4004e40:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
 4004e44:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
 4004e48:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
 4004e4c:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
 4004e50:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
 4004e54:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
 4004e58:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
 4004e5c:	01800344 	movi	r6,13
 4004e60:	e17ffb04 	addi	r5,fp,-20
 4004e64:	e13fff17 	ldw	r4,-4(fp)
 4004e68:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>
}
 4004e6c:	0001883a 	nop
 4004e70:	e037883a 	mov	sp,fp
 4004e74:	dfc00117 	ldw	ra,4(sp)
 4004e78:	df000017 	ldw	fp,0(sp)
 4004e7c:	dec00204 	addi	sp,sp,8
 4004e80:	f800283a 	ret

04004e84 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
 4004e84:	defff504 	addi	sp,sp,-44
 4004e88:	dfc00a15 	stw	ra,40(sp)
 4004e8c:	df000915 	stw	fp,36(sp)
 4004e90:	df000904 	addi	fp,sp,36
 4004e94:	e13ffb15 	stw	r4,-20(fp)
 4004e98:	3009883a 	mov	r4,r6
 4004e9c:	3807883a 	mov	r3,r7
 4004ea0:	e0800217 	ldw	r2,8(fp)
 4004ea4:	e17ffc05 	stb	r5,-16(fp)
 4004ea8:	e13ffd05 	stb	r4,-12(fp)
 4004eac:	e0fffe05 	stb	r3,-8(fp)
 4004eb0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004eb4:	00800244 	movi	r2,9
 4004eb8:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
 4004ebc:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004ec0:	00800244 	movi	r2,9
 4004ec4:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
 4004ec8:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004ecc:	008003c4 	movi	r2,15
 4004ed0:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
 4004ed4:	e0bffc03 	ldbu	r2,-16(fp)
 4004ed8:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
 4004edc:	e0bffd03 	ldbu	r2,-12(fp)
 4004ee0:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
 4004ee4:	e0bffe03 	ldbu	r2,-8(fp)
 4004ee8:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
 4004eec:	e0bfff03 	ldbu	r2,-4(fp)
 4004ef0:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
 4004ef4:	00bfffc4 	movi	r2,-1
 4004ef8:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
 4004efc:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
 4004f00:	00bfffc4 	movi	r2,-1
 4004f04:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
 4004f08:	01800344 	movi	r6,13
 4004f0c:	e17ff704 	addi	r5,fp,-36
 4004f10:	e13ffb17 	ldw	r4,-20(fp)
 4004f14:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>
}
 4004f18:	0001883a 	nop
 4004f1c:	e037883a 	mov	sp,fp
 4004f20:	dfc00117 	ldw	ra,4(sp)
 4004f24:	df000017 	ldw	fp,0(sp)
 4004f28:	dec00204 	addi	sp,sp,8
 4004f2c:	f800283a 	ret

04004f30 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 4004f30:	defffe04 	addi	sp,sp,-8
 4004f34:	df000115 	stw	fp,4(sp)
 4004f38:	df000104 	addi	fp,sp,4
 4004f3c:	e13fff15 	stw	r4,-4(fp)
 4004f40:	e0bfff17 	ldw	r2,-4(fp)
 4004f44:	10000005 	stb	zero,0(r2)
 4004f48:	e0bfff17 	ldw	r2,-4(fp)
 4004f4c:	10c00043 	ldbu	r3,1(r2)
 4004f50:	1806703a 	and	r3,r3,zero
 4004f54:	10c00045 	stb	r3,1(r2)
 4004f58:	10c00083 	ldbu	r3,2(r2)
 4004f5c:	1806703a 	and	r3,r3,zero
 4004f60:	10c00085 	stb	r3,2(r2)
 4004f64:	10c000c3 	ldbu	r3,3(r2)
 4004f68:	1806703a 	and	r3,r3,zero
 4004f6c:	10c000c5 	stb	r3,3(r2)
 4004f70:	10c00103 	ldbu	r3,4(r2)
 4004f74:	1806703a 	and	r3,r3,zero
 4004f78:	10c00105 	stb	r3,4(r2)
        };
 4004f7c:	0001883a 	nop
 4004f80:	e037883a 	mov	sp,fp
 4004f84:	df000017 	ldw	fp,0(sp)
 4004f88:	dec00104 	addi	sp,sp,4
 4004f8c:	f800283a 	ret

04004f90 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 4004f90:	defffe04 	addi	sp,sp,-8
 4004f94:	df000115 	stw	fp,4(sp)
 4004f98:	df000104 	addi	fp,sp,4
 4004f9c:	e13fff15 	stw	r4,-4(fp)
 4004fa0:	e0bfff17 	ldw	r2,-4(fp)
 4004fa4:	10000015 	stw	zero,0(r2)
 4004fa8:	e0bfff17 	ldw	r2,-4(fp)
 4004fac:	10000105 	stb	zero,4(r2)
 4004fb0:	e0bfff17 	ldw	r2,-4(fp)
 4004fb4:	10000145 	stb	zero,5(r2)
        };
 4004fb8:	0001883a 	nop
 4004fbc:	e037883a 	mov	sp,fp
 4004fc0:	df000017 	ldw	fp,0(sp)
 4004fc4:	dec00104 	addi	sp,sp,4
 4004fc8:	f800283a 	ret

04004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 4004fcc:	defffd04 	addi	sp,sp,-12
 4004fd0:	df000215 	stw	fp,8(sp)
 4004fd4:	df000204 	addi	fp,sp,8
 4004fd8:	e13ffe15 	stw	r4,-8(fp)
 4004fdc:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
 4004fe0:	e0bfff17 	ldw	r2,-4(fp)
 4004fe4:	10c00043 	ldbu	r3,1(r2)
 4004fe8:	11000083 	ldbu	r4,2(r2)
 4004fec:	2008923a 	slli	r4,r4,8
 4004ff0:	20c6b03a 	or	r3,r4,r3
 4004ff4:	110000c3 	ldbu	r4,3(r2)
 4004ff8:	2008943a 	slli	r4,r4,16
 4004ffc:	20c6b03a 	or	r3,r4,r3
 4005000:	10800103 	ldbu	r2,4(r2)
 4005004:	1004963a 	slli	r2,r2,24
 4005008:	10c4b03a 	or	r2,r2,r3
 400500c:	1007883a 	mov	r3,r2
 4005010:	e0bffe17 	ldw	r2,-8(fp)
 4005014:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
 4005018:	e0bfff17 	ldw	r2,-4(fp)
 400501c:	10c00003 	ldbu	r3,0(r2)
 4005020:	e0bffe17 	ldw	r2,-8(fp)
 4005024:	10c00145 	stb	r3,5(r2)
 4005028:	e0bffe17 	ldw	r2,-8(fp)
 400502c:	10c00143 	ldbu	r3,5(r2)
 4005030:	e0bffe17 	ldw	r2,-8(fp)
 4005034:	10c00105 	stb	r3,4(r2)
        };
 4005038:	0001883a 	nop
 400503c:	e037883a 	mov	sp,fp
 4005040:	df000017 	ldw	fp,0(sp)
 4005044:	dec00104 	addi	sp,sp,4
 4005048:	f800283a 	ret

0400504c <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 400504c:	defffe04 	addi	sp,sp,-8
 4005050:	df000115 	stw	fp,4(sp)
 4005054:	df000104 	addi	fp,sp,4
 4005058:	e13fff15 	stw	r4,-4(fp)
 400505c:	e0bfff17 	ldw	r2,-4(fp)
 4005060:	10000015 	stw	zero,0(r2)
 4005064:	e0bfff17 	ldw	r2,-4(fp)
 4005068:	10000105 	stb	zero,4(r2)
 400506c:	e0bfff17 	ldw	r2,-4(fp)
 4005070:	1000018d 	sth	zero,6(r2)
        };
 4005074:	0001883a 	nop
 4005078:	e037883a 	mov	sp,fp
 400507c:	df000017 	ldw	fp,0(sp)
 4005080:	dec00104 	addi	sp,sp,4
 4005084:	f800283a 	ret

04005088 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 4005088:	defffd04 	addi	sp,sp,-12
 400508c:	df000215 	stw	fp,8(sp)
 4005090:	df000204 	addi	fp,sp,8
 4005094:	e13ffe15 	stw	r4,-8(fp)
 4005098:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
 400509c:	e0bfff17 	ldw	r2,-4(fp)
 40050a0:	10c00043 	ldbu	r3,1(r2)
 40050a4:	11000083 	ldbu	r4,2(r2)
 40050a8:	2008923a 	slli	r4,r4,8
 40050ac:	20c6b03a 	or	r3,r4,r3
 40050b0:	110000c3 	ldbu	r4,3(r2)
 40050b4:	2008943a 	slli	r4,r4,16
 40050b8:	20c6b03a 	or	r3,r4,r3
 40050bc:	10800103 	ldbu	r2,4(r2)
 40050c0:	1004963a 	slli	r2,r2,24
 40050c4:	10c4b03a 	or	r2,r2,r3
 40050c8:	1007883a 	mov	r3,r2
 40050cc:	e0bffe17 	ldw	r2,-8(fp)
 40050d0:	10c00015 	stw	r3,0(r2)
                countDown = 0;
 40050d4:	e0bffe17 	ldw	r2,-8(fp)
 40050d8:	1000018d 	sth	zero,6(r2)
        };
 40050dc:	0001883a 	nop
 40050e0:	e037883a 	mov	sp,fp
 40050e4:	df000017 	ldw	fp,0(sp)
 40050e8:	dec00104 	addi	sp,sp,4
 40050ec:	f800283a 	ret

040050f0 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 40050f0:	defffb04 	addi	sp,sp,-20
 40050f4:	df000415 	stw	fp,16(sp)
 40050f8:	df000404 	addi	fp,sp,16
 40050fc:	e13ffc15 	stw	r4,-16(fp)
 4005100:	e17ffd15 	stw	r5,-12(fp)
 4005104:	e1bffe15 	stw	r6,-8(fp)
 4005108:	3805883a 	mov	r2,r7
 400510c:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
 4005110:	e0bffc17 	ldw	r2,-16(fp)
 4005114:	10800103 	ldbu	r2,4(r2)
 4005118:	10803fcc 	andi	r2,r2,255
 400511c:	10000326 	beq	r2,zero,400512c <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
 4005120:	10800060 	cmpeqi	r2,r2,1
 4005124:	10000a1e 	bne	r2,zero,4005150 <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
 4005128:	00002906 	br	40051d0 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
 400512c:	e0bffc17 	ldw	r2,-16(fp)
 4005130:	e0ffff0b 	ldhu	r3,-4(fp)
 4005134:	10c0018d 	sth	r3,6(r2)
                                nStage++;
 4005138:	e0bffc17 	ldw	r2,-16(fp)
 400513c:	10800103 	ldbu	r2,4(r2)
 4005140:	10800044 	addi	r2,r2,1
 4005144:	1007883a 	mov	r3,r2
 4005148:	e0bffc17 	ldw	r2,-16(fp)
 400514c:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 4005150:	e0bffc17 	ldw	r2,-16(fp)
 4005154:	1080018b 	ldhu	r2,6(r2)
 4005158:	10bfffcc 	andi	r2,r2,65535
 400515c:	10001626 	beq	r2,zero,40051b8 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
 4005160:	e0bffe17 	ldw	r2,-8(fp)
 4005164:	1080000b 	ldhu	r2,0(r2)
 4005168:	10bfffcc 	andi	r2,r2,65535
 400516c:	10001226 	beq	r2,zero,40051b8 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
 4005170:	e0bffc17 	ldw	r2,-16(fp)
 4005174:	1080018b 	ldhu	r2,6(r2)
 4005178:	10bfffc4 	addi	r2,r2,-1
 400517c:	1007883a 	mov	r3,r2
 4005180:	e0bffc17 	ldw	r2,-16(fp)
 4005184:	10c0018d 	sth	r3,6(r2)
 4005188:	e0bffd17 	ldw	r2,-12(fp)
 400518c:	10800017 	ldw	r2,0(r2)
 4005190:	10c00044 	addi	r3,r2,1
 4005194:	e0bffd17 	ldw	r2,-12(fp)
 4005198:	10c00015 	stw	r3,0(r2)
 400519c:	e0bffe17 	ldw	r2,-8(fp)
 40051a0:	1080000b 	ldhu	r2,0(r2)
 40051a4:	10bfffc4 	addi	r2,r2,-1
 40051a8:	1007883a 	mov	r3,r2
 40051ac:	e0bffe17 	ldw	r2,-8(fp)
 40051b0:	10c0000d 	sth	r3,0(r2)
 40051b4:	003fe606 	br	4005150 <__alt_mem_onchip_memory2_0+0xfc003eb0>

                                if(!countDown)
 40051b8:	e0bffc17 	ldw	r2,-16(fp)
 40051bc:	1080018b 	ldhu	r2,6(r2)
 40051c0:	10bfffcc 	andi	r2,r2,65535
 40051c4:	1000021e 	bne	r2,zero,40051d0 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
 40051c8:	e0bffc17 	ldw	r2,-16(fp)
 40051cc:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
 40051d0:	e0bffc17 	ldw	r2,-16(fp)
 40051d4:	1080018b 	ldhu	r2,6(r2)
 40051d8:	10bfffcc 	andi	r2,r2,65535
 40051dc:	1005003a 	cmpeq	r2,r2,zero
        };
 40051e0:	e037883a 	mov	sp,fp
 40051e4:	df000017 	ldw	fp,0(sp)
 40051e8:	dec00104 	addi	sp,sp,4
 40051ec:	f800283a 	ret

040051f0 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 40051f0:	defffb04 	addi	sp,sp,-20
 40051f4:	df000415 	stw	fp,16(sp)
 40051f8:	df000404 	addi	fp,sp,16
 40051fc:	e13ffc15 	stw	r4,-16(fp)
 4005200:	2809883a 	mov	r4,r5
 4005204:	3007883a 	mov	r3,r6
 4005208:	3805883a 	mov	r2,r7
 400520c:	e13ffd05 	stb	r4,-12(fp)
 4005210:	e0fffe05 	stb	r3,-8(fp)
 4005214:	e0bfff05 	stb	r2,-4(fp)
                return 0;
 4005218:	0005883a 	mov	r2,zero
        }
 400521c:	e037883a 	mov	sp,fp
 4005220:	df000017 	ldw	fp,0(sp)
 4005224:	dec00104 	addi	sp,sp,4
 4005228:	f800283a 	ret

0400522c <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 400522c:	defffb04 	addi	sp,sp,-20
 4005230:	df000415 	stw	fp,16(sp)
 4005234:	df000404 	addi	fp,sp,16
 4005238:	e13ffc15 	stw	r4,-16(fp)
 400523c:	2809883a 	mov	r4,r5
 4005240:	3007883a 	mov	r3,r6
 4005244:	3805883a 	mov	r2,r7
 4005248:	e13ffd05 	stb	r4,-12(fp)
 400524c:	e0fffe05 	stb	r3,-8(fp)
 4005250:	e0bfff05 	stb	r2,-4(fp)
                return 0;
 4005254:	0005883a 	mov	r2,zero
        }
 4005258:	e037883a 	mov	sp,fp
 400525c:	df000017 	ldw	fp,0(sp)
 4005260:	dec00104 	addi	sp,sp,4
 4005264:	f800283a 	ret

04005268 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 4005268:	defffe04 	addi	sp,sp,-8
 400526c:	df000115 	stw	fp,4(sp)
 4005270:	df000104 	addi	fp,sp,4
 4005274:	e13fff15 	stw	r4,-4(fp)
                return 0;
 4005278:	0005883a 	mov	r2,zero
        }
 400527c:	e037883a 	mov	sp,fp
 4005280:	df000017 	ldw	fp,0(sp)
 4005284:	dec00104 	addi	sp,sp,4
 4005288:	f800283a 	ret

0400528c <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 400528c:	defffe04 	addi	sp,sp,-8
 4005290:	df000115 	stw	fp,4(sp)
 4005294:	df000104 	addi	fp,sp,4
 4005298:	e13fff15 	stw	r4,-4(fp)
                return 0;
 400529c:	0005883a 	mov	r2,zero
        }
 40052a0:	e037883a 	mov	sp,fp
 40052a4:	df000017 	ldw	fp,0(sp)
 40052a8:	dec00104 	addi	sp,sp,4
 40052ac:	f800283a 	ret

040052b0 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 40052b0:	defffe04 	addi	sp,sp,-8
 40052b4:	df000115 	stw	fp,4(sp)
 40052b8:	df000104 	addi	fp,sp,4
 40052bc:	e13fff15 	stw	r4,-4(fp)
                return 0;
 40052c0:	0005883a 	mov	r2,zero
        }
 40052c4:	e037883a 	mov	sp,fp
 40052c8:	df000017 	ldw	fp,0(sp)
 40052cc:	dec00104 	addi	sp,sp,4
 40052d0:	f800283a 	ret

040052d4 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 40052d4:	defffd04 	addi	sp,sp,-12
 40052d8:	df000215 	stw	fp,8(sp)
 40052dc:	df000204 	addi	fp,sp,8
 40052e0:	e13ffe15 	stw	r4,-8(fp)
 40052e4:	2805883a 	mov	r2,r5
 40052e8:	e0bfff05 	stb	r2,-4(fp)
                return;
 40052ec:	0001883a 	nop
        } // Note used for hubs only!
 40052f0:	e037883a 	mov	sp,fp
 40052f4:	df000017 	ldw	fp,0(sp)
 40052f8:	dec00104 	addi	sp,sp,4
 40052fc:	f800283a 	ret

04005300 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 4005300:	defffc04 	addi	sp,sp,-16
 4005304:	df000315 	stw	fp,12(sp)
 4005308:	df000304 	addi	fp,sp,12
 400530c:	e13ffd15 	stw	r4,-12(fp)
 4005310:	2807883a 	mov	r3,r5
 4005314:	3005883a 	mov	r2,r6
 4005318:	e0fffe0d 	sth	r3,-8(fp)
 400531c:	e0bfff0d 	sth	r2,-4(fp)
                return false;
 4005320:	0005883a 	mov	r2,zero
        }
 4005324:	e037883a 	mov	sp,fp
 4005328:	df000017 	ldw	fp,0(sp)
 400532c:	dec00104 	addi	sp,sp,4
 4005330:	f800283a 	ret

04005334 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 4005334:	defffd04 	addi	sp,sp,-12
 4005338:	df000215 	stw	fp,8(sp)
 400533c:	df000204 	addi	fp,sp,8
 4005340:	e13ffe15 	stw	r4,-8(fp)
 4005344:	2805883a 	mov	r2,r5
 4005348:	e0bfff05 	stb	r2,-4(fp)
                return false;
 400534c:	0005883a 	mov	r2,zero
        }
 4005350:	e037883a 	mov	sp,fp
 4005354:	df000017 	ldw	fp,0(sp)
 4005358:	dec00104 	addi	sp,sp,4
 400535c:	f800283a 	ret

04005360 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 4005360:	defffd04 	addi	sp,sp,-12
 4005364:	df000215 	stw	fp,8(sp)
 4005368:	df000204 	addi	fp,sp,8
 400536c:	e13ffe15 	stw	r4,-8(fp)
 4005370:	2805883a 	mov	r2,r5
 4005374:	e0bfff05 	stb	r2,-4(fp)
                return true;
 4005378:	00800044 	movi	r2,1
        }
 400537c:	e037883a 	mov	sp,fp
 4005380:	df000017 	ldw	fp,0(sp)
 4005384:	dec00104 	addi	sp,sp,4
 4005388:	f800283a 	ret

0400538c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 400538c:	defffc04 	addi	sp,sp,-16
 4005390:	df000315 	stw	fp,12(sp)
 4005394:	df000304 	addi	fp,sp,12
 4005398:	e13ffe15 	stw	r4,-8(fp)
 400539c:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 40053a0:	e03ffd05 	stb	zero,-12(fp)
 40053a4:	e0bffd03 	ldbu	r2,-12(fp)
 40053a8:	10800428 	cmpgeui	r2,r2,16
 40053ac:	1000161e 	bne	r2,zero,4005408 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
 40053b0:	e0bffd03 	ldbu	r2,-12(fp)
 40053b4:	e0fffe17 	ldw	r3,-8(fp)
 40053b8:	10800784 	addi	r2,r2,30
 40053bc:	1085883a 	add	r2,r2,r2
 40053c0:	1085883a 	add	r2,r2,r2
 40053c4:	1885883a 	add	r2,r3,r2
 40053c8:	10800017 	ldw	r2,0(r2)
 40053cc:	10000a1e 	bne	r2,zero,40053f8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
 40053d0:	e0bffd03 	ldbu	r2,-12(fp)
 40053d4:	e0fffe17 	ldw	r3,-8(fp)
 40053d8:	10800784 	addi	r2,r2,30
 40053dc:	1085883a 	add	r2,r2,r2
 40053e0:	1085883a 	add	r2,r2,r2
 40053e4:	1885883a 	add	r2,r3,r2
 40053e8:	e0ffff17 	ldw	r3,-4(fp)
 40053ec:	10c00015 	stw	r3,0(r2)
                                return 0;
 40053f0:	0005883a 	mov	r2,zero
 40053f4:	00000506 	br	400540c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 40053f8:	e0bffd03 	ldbu	r2,-12(fp)
 40053fc:	10800044 	addi	r2,r2,1
 4005400:	e0bffd05 	stb	r2,-12(fp)
 4005404:	003fe706 	br	40053a4 <__alt_mem_onchip_memory2_0+0xfc004104>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 4005408:	00bff4c4 	movi	r2,-45
        };
 400540c:	e037883a 	mov	sp,fp
 4005410:	df000017 	ldw	fp,0(sp)
 4005414:	dec00104 	addi	sp,sp,4
 4005418:	f800283a 	ret

0400541c <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 400541c:	defffa04 	addi	sp,sp,-24
 4005420:	df000515 	stw	fp,20(sp)
 4005424:	df000504 	addi	fp,sp,20
 4005428:	e13ffb15 	stw	r4,-20(fp)
 400542c:	3009883a 	mov	r4,r6
 4005430:	3807883a 	mov	r3,r7
 4005434:	e0800117 	ldw	r2,4(fp)
 4005438:	e17ffc05 	stb	r5,-16(fp)
 400543c:	e13ffd05 	stb	r4,-12(fp)
 4005440:	e0fffe05 	stb	r3,-8(fp)
 4005444:	e0bfff05 	stb	r2,-4(fp)
        };
 4005448:	0001883a 	nop
 400544c:	e037883a 	mov	sp,fp
 4005450:	df000017 	ldw	fp,0(sp)
 4005454:	dec00104 	addi	sp,sp,4
 4005458:	f800283a 	ret

0400545c <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
 400545c:	defffe04 	addi	sp,sp,-8
 4005460:	df000115 	stw	fp,4(sp)
 4005464:	df000104 	addi	fp,sp,4
 4005468:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
 400546c:	e0bfff17 	ldw	r2,-4(fp)
 4005470:	10800403 	ldbu	r2,16(r2)
        };
 4005474:	e037883a 	mov	sp,fp
 4005478:	df000017 	ldw	fp,0(sp)
 400547c:	dec00104 	addi	sp,sp,4
 4005480:	f800283a 	ret

04005484 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
 4005484:	defffe04 	addi	sp,sp,-8
 4005488:	df000115 	stw	fp,4(sp)
 400548c:	df000104 	addi	fp,sp,4
 4005490:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
 4005494:	e0bfff17 	ldw	r2,-4(fp)
 4005498:	10800943 	ldbu	r2,37(r2)
        };
 400549c:	e037883a 	mov	sp,fp
 40054a0:	df000017 	ldw	fp,0(sp)
 40054a4:	dec00104 	addi	sp,sp,4
 40054a8:	f800283a 	ret

040054ac <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 40054ac:	defffc04 	addi	sp,sp,-16
 40054b0:	df000315 	stw	fp,12(sp)
 40054b4:	df000304 	addi	fp,sp,12
 40054b8:	e13ffd15 	stw	r4,-12(fp)
 40054bc:	2807883a 	mov	r3,r5
 40054c0:	3005883a 	mov	r2,r6
 40054c4:	e0fffe0d 	sth	r3,-8(fp)
 40054c8:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
 40054cc:	e0bffe0b 	ldhu	r2,-8(fp)
 40054d0:	108117a0 	cmpeqi	r2,r2,1118
 40054d4:	10000f1e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054d8:	e0bffe0b 	ldhu	r2,-8(fp)
 40054dc:	1081ce20 	cmpeqi	r2,r2,1848
 40054e0:	10000c1e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054e4:	e0bffe0b 	ldhu	r2,-8(fp)
 40054e8:	10839be0 	cmpeqi	r2,r2,3695
 40054ec:	1000091e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054f0:	e0bffe0b 	ldhu	r2,-8(fp)
 40054f4:	1083c360 	cmpeqi	r2,r2,3853
 40054f8:	1000061e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054fc:	e0bffe0b 	ldhu	r2,-8(fp)
 4005500:	10854ca0 	cmpeqi	r2,r2,5426
 4005504:	1000031e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 4005508:	e0bffe0b 	ldhu	r2,-8(fp)
 400550c:	10893198 	cmpnei	r2,r2,9414
 4005510:	10002c1e 	bne	r2,zero,40055c4 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
 4005514:	e0bfff0b 	ldhu	r2,-4(fp)
 4005518:	1080b460 	cmpeqi	r2,r2,721
 400551c:	1000271e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
 4005520:	e0bfff0b 	ldhu	r2,-4(fp)
 4005524:	1080b760 	cmpeqi	r2,r2,733
 4005528:	1000241e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 400552c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005530:	1080b8e0 	cmpeqi	r2,r2,739
 4005534:	1000211e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005538:	e0bfff0b 	ldhu	r2,-4(fp)
 400553c:	1080baa0 	cmpeqi	r2,r2,746
 4005540:	10001e1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005544:	e0bfff0b 	ldhu	r2,-4(fp)
 4005548:	10928060 	cmpeqi	r2,r2,18945
 400554c:	10001b1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
 4005550:	e0bfff0b 	ldhu	r2,-4(fp)
 4005554:	10804e60 	cmpeqi	r2,r2,313
 4005558:	1000181e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 400555c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005560:	108051a0 	cmpeqi	r2,r2,326
 4005564:	1000151e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005568:	e0bfff0b 	ldhu	r2,-4(fp)
 400556c:	108019e0 	cmpeqi	r2,r2,103
 4005570:	1000121e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005574:	e0bfff0b 	ldhu	r2,-4(fp)
 4005578:	108280e0 	cmpeqi	r2,r2,2563
 400557c:	10000f1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
 4005580:	e0bfff0b 	ldhu	r2,-4(fp)
 4005584:	109506a0 	cmpeqi	r2,r2,21530
 4005588:	10000c1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 400558c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005590:	10950aa0 	cmpeqi	r2,r2,21546
 4005594:	1000091e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005598:	e0bfff0b 	ldhu	r2,-4(fp)
 400559c:	10950ea0 	cmpeqi	r2,r2,21562
 40055a0:	1000061e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 40055a4:	e0bfff0b 	ldhu	r2,-4(fp)
 40055a8:	1082c2a0 	cmpeqi	r2,r2,2826
 40055ac:	1000031e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
 40055b0:	e0bfff0b 	ldhu	r2,-4(fp)
 40055b4:	1082c498 	cmpnei	r2,r2,2834
 40055b8:	1000021e 	bne	r2,zero,40055c4 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
 40055bc:	00800044 	movi	r2,1
 40055c0:	00000106 	br	40055c8 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
 40055c4:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
 40055c8:	e037883a 	mov	sp,fp
 40055cc:	df000017 	ldw	fp,0(sp)
 40055d0:	dec00104 	addi	sp,sp,4
 40055d4:	f800283a 	ret

040055d8 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
 40055d8:	defffe04 	addi	sp,sp,-8
 40055dc:	df000115 	stw	fp,4(sp)
 40055e0:	df000104 	addi	fp,sp,4
 40055e4:	e13fff15 	stw	r4,-4(fp)
 40055e8:	008100b4 	movhi	r2,1026
 40055ec:	10836504 	addi	r2,r2,3476
 40055f0:	e0ffff17 	ldw	r3,-4(fp)
 40055f4:	18800015 	stw	r2,0(r3)
 40055f8:	0001883a 	nop
 40055fc:	e037883a 	mov	sp,fp
 4005600:	df000017 	ldw	fp,0(sp)
 4005604:	dec00104 	addi	sp,sp,4
 4005608:	f800283a 	ret

0400560c <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
 400560c:	defffe04 	addi	sp,sp,-8
 4005610:	df000115 	stw	fp,4(sp)
 4005614:	df000104 	addi	fp,sp,4
 4005618:	e13fff15 	stw	r4,-4(fp)
 400561c:	008100b4 	movhi	r2,1026
 4005620:	10835f04 	addi	r2,r2,3452
 4005624:	e0ffff17 	ldw	r3,-4(fp)
 4005628:	18800015 	stw	r2,0(r3)
 400562c:	0001883a 	nop
 4005630:	e037883a 	mov	sp,fp
 4005634:	df000017 	ldw	fp,0(sp)
 4005638:	dec00104 	addi	sp,sp,4
 400563c:	f800283a 	ret

04005640 <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
 4005640:	defffe04 	addi	sp,sp,-8
 4005644:	df000115 	stw	fp,4(sp)
 4005648:	df000104 	addi	fp,sp,4
 400564c:	e13fff15 	stw	r4,-4(fp)
 4005650:	008100b4 	movhi	r2,1026
 4005654:	10836204 	addi	r2,r2,3464
 4005658:	e0ffff17 	ldw	r3,-4(fp)
 400565c:	18800015 	stw	r2,0(r3)
 4005660:	0001883a 	nop
 4005664:	e037883a 	mov	sp,fp
 4005668:	df000017 	ldw	fp,0(sp)
 400566c:	dec00104 	addi	sp,sp,4
 4005670:	f800283a 	ret

04005674 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 4005674:	defffc04 	addi	sp,sp,-16
 4005678:	dfc00315 	stw	ra,12(sp)
 400567c:	df000215 	stw	fp,8(sp)
 4005680:	df000204 	addi	fp,sp,8
 4005684:	e13ffe15 	stw	r4,-8(fp)
 4005688:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 400568c:	e0bffe17 	ldw	r2,-8(fp)
 4005690:	1009883a 	mov	r4,r2
 4005694:	40056400 	call	4005640 <_ZN13USBReadParserC1Ev>
 4005698:	008100b4 	movhi	r2,1026
 400569c:	10835c04 	addi	r2,r2,3440
 40056a0:	e0fffe17 	ldw	r3,-8(fp)
 40056a4:	18800015 	stw	r2,0(r3)
 40056a8:	e0bffe17 	ldw	r2,-8(fp)
 40056ac:	e0ffff17 	ldw	r3,-4(fp)
 40056b0:	10c00115 	stw	r3,4(r2)
 40056b4:	e0bffe17 	ldw	r2,-8(fp)
 40056b8:	10800204 	addi	r2,r2,8
 40056bc:	1009883a 	mov	r4,r2
 40056c0:	4004f300 	call	4004f30 <_ZN16MultiValueBufferC1Ev>
 40056c4:	e0bffe17 	ldw	r2,-8(fp)
 40056c8:	10800404 	addi	r2,r2,16
 40056cc:	1009883a 	mov	r4,r2
 40056d0:	4004f900 	call	4004f90 <_ZN20MultiByteValueParserC1Ev>
 40056d4:	e0bffe17 	ldw	r2,-8(fp)
 40056d8:	10800604 	addi	r2,r2,24
 40056dc:	1009883a 	mov	r4,r2
 40056e0:	400504c0 	call	400504c <_ZN11ByteSkipperC1Ev>
 40056e4:	e0bffe17 	ldw	r2,-8(fp)
 40056e8:	10000c05 	stb	zero,48(r2)
 40056ec:	e0bffe17 	ldw	r2,-8(fp)
 40056f0:	10000c45 	stb	zero,49(r2)
 40056f4:	e0bffe17 	ldw	r2,-8(fp)
 40056f8:	10000c85 	stb	zero,50(r2)
 40056fc:	e0bffe17 	ldw	r2,-8(fp)
 4005700:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
 4005704:	e0bffe17 	ldw	r2,-8(fp)
 4005708:	10c00804 	addi	r3,r2,32
 400570c:	e0bffe17 	ldw	r2,-8(fp)
 4005710:	19803fcc 	andi	r6,r3,255
 4005714:	11000243 	ldbu	r4,9(r2)
 4005718:	2008703a 	and	r4,r4,zero
 400571c:	200b883a 	mov	r5,r4
 4005720:	3009883a 	mov	r4,r6
 4005724:	2908b03a 	or	r4,r5,r4
 4005728:	11000245 	stb	r4,9(r2)
 400572c:	1808d23a 	srli	r4,r3,8
 4005730:	21803fcc 	andi	r6,r4,255
 4005734:	11000283 	ldbu	r4,10(r2)
 4005738:	2008703a 	and	r4,r4,zero
 400573c:	200b883a 	mov	r5,r4
 4005740:	3009883a 	mov	r4,r6
 4005744:	2908b03a 	or	r4,r5,r4
 4005748:	11000285 	stb	r4,10(r2)
 400574c:	1808d43a 	srli	r4,r3,16
 4005750:	21803fcc 	andi	r6,r4,255
 4005754:	110002c3 	ldbu	r4,11(r2)
 4005758:	2008703a 	and	r4,r4,zero
 400575c:	200b883a 	mov	r5,r4
 4005760:	3009883a 	mov	r4,r6
 4005764:	2908b03a 	or	r4,r5,r4
 4005768:	110002c5 	stb	r4,11(r2)
 400576c:	180ad63a 	srli	r5,r3,24
 4005770:	10c00303 	ldbu	r3,12(r2)
 4005774:	1806703a 	and	r3,r3,zero
 4005778:	1809883a 	mov	r4,r3
 400577c:	2807883a 	mov	r3,r5
 4005780:	20c6b03a 	or	r3,r4,r3
 4005784:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
 4005788:	e0bffe17 	ldw	r2,-8(fp)
 400578c:	10c00404 	addi	r3,r2,16
 4005790:	e0bffe17 	ldw	r2,-8(fp)
 4005794:	10800204 	addi	r2,r2,8
 4005798:	100b883a 	mov	r5,r2
 400579c:	1809883a 	mov	r4,r3
 40057a0:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 40057a4:	e0bffe17 	ldw	r2,-8(fp)
 40057a8:	10c00604 	addi	r3,r2,24
 40057ac:	e0bffe17 	ldw	r2,-8(fp)
 40057b0:	10800204 	addi	r2,r2,8
 40057b4:	100b883a 	mov	r5,r2
 40057b8:	1809883a 	mov	r4,r3
 40057bc:	40050880 	call	4005088 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 40057c0:	0001883a 	nop
 40057c4:	e037883a 	mov	sp,fp
 40057c8:	dfc00117 	ldw	ra,4(sp)
 40057cc:	df000017 	ldw	fp,0(sp)
 40057d0:	dec00204 	addi	sp,sp,8
 40057d4:	f800283a 	ret

040057d8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 40057d8:	defff804 	addi	sp,sp,-32
 40057dc:	dfc00715 	stw	ra,28(sp)
 40057e0:	df000615 	stw	fp,24(sp)
 40057e4:	df000604 	addi	fp,sp,24
 40057e8:	e13ffc15 	stw	r4,-16(fp)
 40057ec:	2805883a 	mov	r2,r5
 40057f0:	e1bffe15 	stw	r6,-8(fp)
 40057f4:	e1ffff15 	stw	r7,-4(fp)
 40057f8:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
 40057fc:	e0bffd0b 	ldhu	r2,-12(fp)
 4005800:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
 4005804:	e0bffe17 	ldw	r2,-8(fp)
 4005808:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
 400580c:	e0bffa0b 	ldhu	r2,-24(fp)
 4005810:	10bfffcc 	andi	r2,r2,65535
 4005814:	10000a26 	beq	r2,zero,4005840 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
 4005818:	e0bffb04 	addi	r2,fp,-20
 400581c:	e1bffa04 	addi	r6,fp,-24
 4005820:	100b883a 	mov	r5,r2
 4005824:	e13ffc17 	ldw	r4,-16(fp)
 4005828:	40058540 	call	4005854 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
 400582c:	1080005c 	xori	r2,r2,1
 4005830:	10803fcc 	andi	r2,r2,255
 4005834:	1000011e 	bne	r2,zero,400583c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
 4005838:	003ff406 	br	400580c <__alt_mem_onchip_memory2_0+0xfc00456c>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
 400583c:	0001883a 	nop
}
 4005840:	e037883a 	mov	sp,fp
 4005844:	dfc00117 	ldw	ra,4(sp)
 4005848:	df000017 	ldw	fp,0(sp)
 400584c:	dec00204 	addi	sp,sp,8
 4005850:	f800283a 	ret

04005854 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 4005854:	defff604 	addi	sp,sp,-40
 4005858:	dfc00915 	stw	ra,36(sp)
 400585c:	df000815 	stw	fp,32(sp)
 4005860:	df000804 	addi	fp,sp,32
 4005864:	e13ffc15 	stw	r4,-16(fp)
 4005868:	e17ffd15 	stw	r5,-12(fp)
 400586c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 4005870:	e0bffc17 	ldw	r2,-16(fp)
 4005874:	10800804 	addi	r2,r2,32
 4005878:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 400587c:	e0bffc17 	ldw	r2,-16(fp)
 4005880:	10800804 	addi	r2,r2,32
 4005884:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
 4005888:	e0bffc17 	ldw	r2,-16(fp)
 400588c:	10800c03 	ldbu	r2,48(r2)
 4005890:	10803fcc 	andi	r2,r2,255
 4005894:	10c00168 	cmpgeui	r3,r2,5
 4005898:	1801141e 	bne	r3,zero,4005cec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
 400589c:	100690ba 	slli	r3,r2,2
 40058a0:	00810034 	movhi	r2,1024
 40058a4:	10962d04 	addi	r2,r2,22708
 40058a8:	1885883a 	add	r2,r3,r2
 40058ac:	10800017 	ldw	r2,0(r2)
 40058b0:	1000683a 	jmp	r2
 40058b4:	040058c8 	cmpgei	r16,zero,355
 40058b8:	040058fc 	xorhi	r16,zero,355
 40058bc:	04005984 	movi	r16,358
 40058c0:	04005a18 	cmpnei	r16,zero,360
 40058c4:	04005a84 	movi	r16,362
                case 0:
                        theBuffer.valueSize = 2;
 40058c8:	e0bffc17 	ldw	r2,-16(fp)
 40058cc:	00c00084 	movi	r3,2
 40058d0:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 40058d4:	e0bffc17 	ldw	r2,-16(fp)
 40058d8:	10c00404 	addi	r3,r2,16
 40058dc:	e0bffc17 	ldw	r2,-16(fp)
 40058e0:	10800204 	addi	r2,r2,8
 40058e4:	100b883a 	mov	r5,r2
 40058e8:	1809883a 	mov	r4,r3
 40058ec:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 40058f0:	e0bffc17 	ldw	r2,-16(fp)
 40058f4:	00c00044 	movi	r3,1
 40058f8:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 40058fc:	e0bffc17 	ldw	r2,-16(fp)
 4005900:	10800404 	addi	r2,r2,16
 4005904:	e1bffe17 	ldw	r6,-8(fp)
 4005908:	e17ffd17 	ldw	r5,-12(fp)
 400590c:	1009883a 	mov	r4,r2
 4005910:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005914:	1080005c 	xori	r2,r2,1
 4005918:	10803fcc 	andi	r2,r2,255
 400591c:	10000226 	beq	r2,zero,4005928 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
 4005920:	0005883a 	mov	r2,zero
 4005924:	0000f206 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 4005928:	e0bffc17 	ldw	r2,-16(fp)
 400592c:	10c00217 	ldw	r3,8(r2)
 4005930:	1806d23a 	srli	r3,r3,8
 4005934:	10800317 	ldw	r2,12(r2)
 4005938:	10803fcc 	andi	r2,r2,255
 400593c:	1004963a 	slli	r2,r2,24
 4005940:	10c4b03a 	or	r2,r2,r3
 4005944:	10c00003 	ldbu	r3,0(r2)
 4005948:	e0bffc17 	ldw	r2,-16(fp)
 400594c:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 4005950:	e0bffc17 	ldw	r2,-16(fp)
 4005954:	10c00217 	ldw	r3,8(r2)
 4005958:	1806d23a 	srli	r3,r3,8
 400595c:	10800317 	ldw	r2,12(r2)
 4005960:	10803fcc 	andi	r2,r2,255
 4005964:	1004963a 	slli	r2,r2,24
 4005968:	10c4b03a 	or	r2,r2,r3
 400596c:	10c00043 	ldbu	r3,1(r2)
 4005970:	e0bffc17 	ldw	r2,-16(fp)
 4005974:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
 4005978:	e0bffc17 	ldw	r2,-16(fp)
 400597c:	00c00084 	movi	r3,2
 4005980:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 4005984:	e0bffc17 	ldw	r2,-16(fp)
 4005988:	10800804 	addi	r2,r2,32
 400598c:	10c00084 	addi	r3,r2,2
 4005990:	e0bffc17 	ldw	r2,-16(fp)
 4005994:	19803fcc 	andi	r6,r3,255
 4005998:	11000243 	ldbu	r4,9(r2)
 400599c:	2008703a 	and	r4,r4,zero
 40059a0:	200b883a 	mov	r5,r4
 40059a4:	3009883a 	mov	r4,r6
 40059a8:	2908b03a 	or	r4,r5,r4
 40059ac:	11000245 	stb	r4,9(r2)
 40059b0:	1808d23a 	srli	r4,r3,8
 40059b4:	21803fcc 	andi	r6,r4,255
 40059b8:	11000283 	ldbu	r4,10(r2)
 40059bc:	2008703a 	and	r4,r4,zero
 40059c0:	200b883a 	mov	r5,r4
 40059c4:	3009883a 	mov	r4,r6
 40059c8:	2908b03a 	or	r4,r5,r4
 40059cc:	11000285 	stb	r4,10(r2)
 40059d0:	1808d43a 	srli	r4,r3,16
 40059d4:	21803fcc 	andi	r6,r4,255
 40059d8:	110002c3 	ldbu	r4,11(r2)
 40059dc:	2008703a 	and	r4,r4,zero
 40059e0:	200b883a 	mov	r5,r4
 40059e4:	3009883a 	mov	r4,r6
 40059e8:	2908b03a 	or	r4,r5,r4
 40059ec:	110002c5 	stb	r4,11(r2)
 40059f0:	180ad63a 	srli	r5,r3,24
 40059f4:	10c00303 	ldbu	r3,12(r2)
 40059f8:	1806703a 	and	r3,r3,zero
 40059fc:	1809883a 	mov	r4,r3
 4005a00:	2807883a 	mov	r3,r5
 4005a04:	20c6b03a 	or	r3,r4,r3
 4005a08:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
 4005a0c:	e0bffc17 	ldw	r2,-16(fp)
 4005a10:	00c000c4 	movi	r3,3
 4005a14:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
 4005a18:	e0bffc17 	ldw	r2,-16(fp)
 4005a1c:	10800c83 	ldbu	r2,50(r2)
 4005a20:	10803fcc 	andi	r2,r2,255
 4005a24:	10c00120 	cmpeqi	r3,r2,4
 4005a28:	1800021e 	bne	r3,zero,4005a34 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
 4005a2c:	10800148 	cmpgei	r2,r2,5
 4005a30:	00000306 	br	4005a40 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 4005a34:	e0bffc17 	ldw	r2,-16(fp)
 4005a38:	10000cc5 	stb	zero,51(r2)
                                        break;
 4005a3c:	00000106 	br	4005a44 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
 4005a40:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
 4005a44:	e0bffc17 	ldw	r2,-16(fp)
 4005a48:	10800c43 	ldbu	r2,49(r2)
 4005a4c:	10bfff84 	addi	r2,r2,-2
 4005a50:	1007883a 	mov	r3,r2
 4005a54:	e0bffc17 	ldw	r2,-16(fp)
 4005a58:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 4005a5c:	e0bffc17 	ldw	r2,-16(fp)
 4005a60:	10c00404 	addi	r3,r2,16
 4005a64:	e0bffc17 	ldw	r2,-16(fp)
 4005a68:	10800204 	addi	r2,r2,8
 4005a6c:	100b883a 	mov	r5,r2
 4005a70:	1809883a 	mov	r4,r3
 4005a74:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 4005a78:	e0bffc17 	ldw	r2,-16(fp)
 4005a7c:	00c00104 	movi	r3,4
 4005a80:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
 4005a84:	e0bffc17 	ldw	r2,-16(fp)
 4005a88:	10800c83 	ldbu	r2,50(r2)
 4005a8c:	10803fcc 	andi	r2,r2,255
 4005a90:	10c00120 	cmpeqi	r3,r2,4
 4005a94:	1800141e 	bne	r3,zero,4005ae8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
 4005a98:	10c00160 	cmpeqi	r3,r2,5
 4005a9c:	1800311e 	bne	r3,zero,4005b64 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
 4005aa0:	108000a0 	cmpeqi	r2,r2,2
 4005aa4:	10005a26 	beq	r2,zero,4005c10 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 4005aa8:	e0bffc17 	ldw	r2,-16(fp)
 4005aac:	10800404 	addi	r2,r2,16
 4005ab0:	e1bffe17 	ldw	r6,-8(fp)
 4005ab4:	e17ffd17 	ldw	r5,-12(fp)
 4005ab8:	1009883a 	mov	r4,r2
 4005abc:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005ac0:	1080005c 	xori	r2,r2,1
 4005ac4:	10803fcc 	andi	r2,r2,255
 4005ac8:	10000226 	beq	r2,zero,4005ad4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
 4005acc:	0005883a 	mov	r2,zero
 4005ad0:	00008706 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
 4005ad4:	e0bffa17 	ldw	r2,-24(fp)
 4005ad8:	10c00143 	ldbu	r3,5(r2)
 4005adc:	e0bffc17 	ldw	r2,-16(fp)
 4005ae0:	10c00d05 	stb	r3,52(r2)
                                        break;
 4005ae4:	00005e06 	br	4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 4005ae8:	e0bffc17 	ldw	r2,-16(fp)
 4005aec:	10800404 	addi	r2,r2,16
 4005af0:	e1bffe17 	ldw	r6,-8(fp)
 4005af4:	e17ffd17 	ldw	r5,-12(fp)
 4005af8:	1009883a 	mov	r4,r2
 4005afc:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005b00:	1080005c 	xori	r2,r2,1
 4005b04:	10803fcc 	andi	r2,r2,255
 4005b08:	10000226 	beq	r2,zero,4005b14 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
 4005b0c:	0005883a 	mov	r2,zero
 4005b10:	00007706 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
 4005b14:	e0bffc17 	ldw	r2,-16(fp)
 4005b18:	10800e03 	ldbu	r2,56(r2)
 4005b1c:	10803fcc 	andi	r2,r2,255
 4005b20:	10004c1e 	bne	r2,zero,4005c54 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
 4005b24:	e0bffc17 	ldw	r2,-16(fp)
 4005b28:	00c00044 	movi	r3,1
 4005b2c:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
 4005b30:	e0bffb17 	ldw	r2,-20(fp)
 4005b34:	10c00083 	ldbu	r3,2(r2)
 4005b38:	e0bffc17 	ldw	r2,-16(fp)
 4005b3c:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
 4005b40:	e0bffb17 	ldw	r2,-20(fp)
 4005b44:	10c000c3 	ldbu	r3,3(r2)
 4005b48:	e0bffc17 	ldw	r2,-16(fp)
 4005b4c:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
 4005b50:	e0bffb17 	ldw	r2,-20(fp)
 4005b54:	10c001c3 	ldbu	r3,7(r2)
 4005b58:	e0bffc17 	ldw	r2,-16(fp)
 4005b5c:	10c00d45 	stb	r3,53(r2)
                                        break;
 4005b60:	00003f06 	br	4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 4005b64:	e0bffc17 	ldw	r2,-16(fp)
 4005b68:	10800404 	addi	r2,r2,16
 4005b6c:	e1bffe17 	ldw	r6,-8(fp)
 4005b70:	e17ffd17 	ldw	r5,-12(fp)
 4005b74:	1009883a 	mov	r4,r2
 4005b78:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005b7c:	1080005c 	xori	r2,r2,1
 4005b80:	10803fcc 	andi	r2,r2,255
 4005b84:	10000226 	beq	r2,zero,4005b90 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
 4005b88:	0005883a 	mov	r2,zero
 4005b8c:	00005806 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
 4005b90:	e0bffc17 	ldw	r2,-16(fp)
 4005b94:	10800cc3 	ldbu	r2,51(r2)
 4005b98:	10803fcc 	andi	r2,r2,255
 4005b9c:	10002f26 	beq	r2,zero,4005c5c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
 4005ba0:	e0bffc17 	ldw	r2,-16(fp)
 4005ba4:	10800117 	ldw	r2,4(r2)
 4005ba8:	10002c26 	beq	r2,zero,4005c5c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 4005bac:	e0bffc17 	ldw	r2,-16(fp)
 4005bb0:	10800117 	ldw	r2,4(r2)
 4005bb4:	10800017 	ldw	r2,0(r2)
 4005bb8:	10800017 	ldw	r2,0(r2)
 4005bbc:	e0fffc17 	ldw	r3,-16(fp)
 4005bc0:	1a000117 	ldw	r8,4(r3)
 4005bc4:	e0fffc17 	ldw	r3,-16(fp)
 4005bc8:	18c00d03 	ldbu	r3,52(r3)
 4005bcc:	19403fcc 	andi	r5,r3,255
 4005bd0:	e0fffc17 	ldw	r3,-16(fp)
 4005bd4:	18c00d83 	ldbu	r3,54(r3)
 4005bd8:	19803fcc 	andi	r6,r3,255
 4005bdc:	e0fffc17 	ldw	r3,-16(fp)
 4005be0:	18c00dc3 	ldbu	r3,55(r3)
 4005be4:	19c03fcc 	andi	r7,r3,255
 4005be8:	e0fffc17 	ldw	r3,-16(fp)
 4005bec:	18c00d43 	ldbu	r3,53(r3)
 4005bf0:	18c03fcc 	andi	r3,r3,255
 4005bf4:	e13ffc17 	ldw	r4,-16(fp)
 4005bf8:	21000804 	addi	r4,r4,32
 4005bfc:	d9000115 	stw	r4,4(sp)
 4005c00:	d8c00015 	stw	r3,0(sp)
 4005c04:	4009883a 	mov	r4,r8
 4005c08:	103ee83a 	callr	r2
                                        break;
 4005c0c:	00001306 	br	4005c5c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 4005c10:	e0bffc17 	ldw	r2,-16(fp)
 4005c14:	10c00604 	addi	r3,r2,24
 4005c18:	e0bffc17 	ldw	r2,-16(fp)
 4005c1c:	10800c43 	ldbu	r2,49(r2)
 4005c20:	10803fcc 	andi	r2,r2,255
 4005c24:	10bfff84 	addi	r2,r2,-2
 4005c28:	10bfffcc 	andi	r2,r2,65535
 4005c2c:	100f883a 	mov	r7,r2
 4005c30:	e1bffe17 	ldw	r6,-8(fp)
 4005c34:	e17ffd17 	ldw	r5,-12(fp)
 4005c38:	1809883a 	mov	r4,r3
 4005c3c:	40050f00 	call	40050f0 <_ZN11ByteSkipper4SkipEPPhPtt>
 4005c40:	1080005c 	xori	r2,r2,1
 4005c44:	10803fcc 	andi	r2,r2,255
 4005c48:	10000526 	beq	r2,zero,4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
 4005c4c:	0005883a 	mov	r2,zero
 4005c50:	00002706 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
 4005c54:	0001883a 	nop
 4005c58:	00000106 	br	4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
 4005c5c:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
 4005c60:	e0bffc17 	ldw	r2,-16(fp)
 4005c64:	10c00804 	addi	r3,r2,32
 4005c68:	e0bffc17 	ldw	r2,-16(fp)
 4005c6c:	19803fcc 	andi	r6,r3,255
 4005c70:	11000243 	ldbu	r4,9(r2)
 4005c74:	2008703a 	and	r4,r4,zero
 4005c78:	200b883a 	mov	r5,r4
 4005c7c:	3009883a 	mov	r4,r6
 4005c80:	2908b03a 	or	r4,r5,r4
 4005c84:	11000245 	stb	r4,9(r2)
 4005c88:	1808d23a 	srli	r4,r3,8
 4005c8c:	21803fcc 	andi	r6,r4,255
 4005c90:	11000283 	ldbu	r4,10(r2)
 4005c94:	2008703a 	and	r4,r4,zero
 4005c98:	200b883a 	mov	r5,r4
 4005c9c:	3009883a 	mov	r4,r6
 4005ca0:	2908b03a 	or	r4,r5,r4
 4005ca4:	11000285 	stb	r4,10(r2)
 4005ca8:	1808d43a 	srli	r4,r3,16
 4005cac:	21803fcc 	andi	r6,r4,255
 4005cb0:	110002c3 	ldbu	r4,11(r2)
 4005cb4:	2008703a 	and	r4,r4,zero
 4005cb8:	200b883a 	mov	r5,r4
 4005cbc:	3009883a 	mov	r4,r6
 4005cc0:	2908b03a 	or	r4,r5,r4
 4005cc4:	110002c5 	stb	r4,11(r2)
 4005cc8:	180ad63a 	srli	r5,r3,24
 4005ccc:	10c00303 	ldbu	r3,12(r2)
 4005cd0:	1806703a 	and	r3,r3,zero
 4005cd4:	1809883a 	mov	r4,r3
 4005cd8:	2807883a 	mov	r3,r5
 4005cdc:	20c6b03a 	or	r3,r4,r3
 4005ce0:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
 4005ce4:	e0bffc17 	ldw	r2,-16(fp)
 4005ce8:	10000c05 	stb	zero,48(r2)
        }
        return true;
 4005cec:	00800044 	movi	r2,1
}
 4005cf0:	e037883a 	mov	sp,fp
 4005cf4:	dfc00117 	ldw	ra,4(sp)
 4005cf8:	df000017 	ldw	fp,0(sp)
 4005cfc:	dec00204 	addi	sp,sp,8
 4005d00:	f800283a 	ret

04005d04 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
 4005d04:	defff904 	addi	sp,sp,-28
 4005d08:	dfc00615 	stw	ra,24(sp)
 4005d0c:	df000515 	stw	fp,20(sp)
 4005d10:	df000504 	addi	fp,sp,20
 4005d14:	e13ffc15 	stw	r4,-16(fp)
 4005d18:	e17ffd15 	stw	r5,-12(fp)
 4005d1c:	3007883a 	mov	r3,r6
 4005d20:	3805883a 	mov	r2,r7
 4005d24:	e0fffe05 	stb	r3,-8(fp)
 4005d28:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
 4005d2c:	e0800217 	ldw	r2,8(fp)
 4005d30:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
 4005d34:	e0bffc17 	ldw	r2,-16(fp)
 4005d38:	10800117 	ldw	r2,4(r2)
 4005d3c:	1080004c 	andi	r2,r2,1
 4005d40:	1007883a 	mov	r3,r2
 4005d44:	e0bffb17 	ldw	r2,-20(fp)
 4005d48:	10800003 	ldbu	r2,0(r2)
 4005d4c:	1080004c 	andi	r2,r2,1
 4005d50:	18c03fcc 	andi	r3,r3,255
 4005d54:	10803fcc 	andi	r2,r2,255
 4005d58:	18801426 	beq	r3,r2,4005dac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
 4005d5c:	e0bffb17 	ldw	r2,-20(fp)
 4005d60:	10800003 	ldbu	r2,0(r2)
 4005d64:	1080004c 	andi	r2,r2,1
 4005d68:	10803fcc 	andi	r2,r2,255
 4005d6c:	10000826 	beq	r2,zero,4005d90 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
 4005d70:	e0bffc17 	ldw	r2,-16(fp)
 4005d74:	10800017 	ldw	r2,0(r2)
 4005d78:	10800304 	addi	r2,r2,12
 4005d7c:	10800017 	ldw	r2,0(r2)
 4005d80:	e17ffb17 	ldw	r5,-20(fp)
 4005d84:	e13ffc17 	ldw	r4,-16(fp)
 4005d88:	103ee83a 	callr	r2
 4005d8c:	00000706 	br	4005dac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
 4005d90:	e0bffc17 	ldw	r2,-16(fp)
 4005d94:	10800017 	ldw	r2,0(r2)
 4005d98:	10800204 	addi	r2,r2,8
 4005d9c:	10800017 	ldw	r2,0(r2)
 4005da0:	e17ffb17 	ldw	r5,-20(fp)
 4005da4:	e13ffc17 	ldw	r4,-16(fp)
 4005da8:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
 4005dac:	e0bffc17 	ldw	r2,-16(fp)
 4005db0:	10800117 	ldw	r2,4(r2)
 4005db4:	1004d07a 	srli	r2,r2,1
 4005db8:	1080004c 	andi	r2,r2,1
 4005dbc:	1007883a 	mov	r3,r2
 4005dc0:	e0bffb17 	ldw	r2,-20(fp)
 4005dc4:	10800003 	ldbu	r2,0(r2)
 4005dc8:	1004d07a 	srli	r2,r2,1
 4005dcc:	1080004c 	andi	r2,r2,1
 4005dd0:	18c03fcc 	andi	r3,r3,255
 4005dd4:	10803fcc 	andi	r2,r2,255
 4005dd8:	18801426 	beq	r3,r2,4005e2c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
 4005ddc:	e0bffb17 	ldw	r2,-20(fp)
 4005de0:	10800003 	ldbu	r2,0(r2)
 4005de4:	1080008c 	andi	r2,r2,2
 4005de8:	10803fcc 	andi	r2,r2,255
 4005dec:	10000826 	beq	r2,zero,4005e10 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
 4005df0:	e0bffc17 	ldw	r2,-16(fp)
 4005df4:	10800017 	ldw	r2,0(r2)
 4005df8:	10800504 	addi	r2,r2,20
 4005dfc:	10800017 	ldw	r2,0(r2)
 4005e00:	e17ffb17 	ldw	r5,-20(fp)
 4005e04:	e13ffc17 	ldw	r4,-16(fp)
 4005e08:	103ee83a 	callr	r2
 4005e0c:	00000706 	br	4005e2c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
 4005e10:	e0bffc17 	ldw	r2,-16(fp)
 4005e14:	10800017 	ldw	r2,0(r2)
 4005e18:	10800404 	addi	r2,r2,16
 4005e1c:	10800017 	ldw	r2,0(r2)
 4005e20:	e17ffb17 	ldw	r5,-20(fp)
 4005e24:	e13ffc17 	ldw	r4,-16(fp)
 4005e28:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
 4005e2c:	e0bffc17 	ldw	r2,-16(fp)
 4005e30:	10800117 	ldw	r2,4(r2)
 4005e34:	1004d0ba 	srli	r2,r2,2
 4005e38:	1080004c 	andi	r2,r2,1
 4005e3c:	1007883a 	mov	r3,r2
 4005e40:	e0bffb17 	ldw	r2,-20(fp)
 4005e44:	10800003 	ldbu	r2,0(r2)
 4005e48:	1004d0ba 	srli	r2,r2,2
 4005e4c:	1080004c 	andi	r2,r2,1
 4005e50:	18c03fcc 	andi	r3,r3,255
 4005e54:	10803fcc 	andi	r2,r2,255
 4005e58:	18801426 	beq	r3,r2,4005eac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
 4005e5c:	e0bffb17 	ldw	r2,-20(fp)
 4005e60:	10800003 	ldbu	r2,0(r2)
 4005e64:	1080010c 	andi	r2,r2,4
 4005e68:	10803fcc 	andi	r2,r2,255
 4005e6c:	10000826 	beq	r2,zero,4005e90 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
 4005e70:	e0bffc17 	ldw	r2,-16(fp)
 4005e74:	10800017 	ldw	r2,0(r2)
 4005e78:	10800704 	addi	r2,r2,28
 4005e7c:	10800017 	ldw	r2,0(r2)
 4005e80:	e17ffb17 	ldw	r5,-20(fp)
 4005e84:	e13ffc17 	ldw	r4,-16(fp)
 4005e88:	103ee83a 	callr	r2
 4005e8c:	00000706 	br	4005eac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
 4005e90:	e0bffc17 	ldw	r2,-16(fp)
 4005e94:	10800017 	ldw	r2,0(r2)
 4005e98:	10800604 	addi	r2,r2,24
 4005e9c:	10800017 	ldw	r2,0(r2)
 4005ea0:	e17ffb17 	ldw	r5,-20(fp)
 4005ea4:	e13ffc17 	ldw	r4,-16(fp)
 4005ea8:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
 4005eac:	e0bffb17 	ldw	r2,-20(fp)
 4005eb0:	10800043 	ldbu	r2,1(r2)
 4005eb4:	10803fcc 	andi	r2,r2,255
 4005eb8:	1080201c 	xori	r2,r2,128
 4005ebc:	10bfe004 	addi	r2,r2,-128
 4005ec0:	1000061e 	bne	r2,zero,4005edc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
 4005ec4:	e0bffb17 	ldw	r2,-20(fp)
 4005ec8:	10800083 	ldbu	r2,2(r2)
 4005ecc:	10803fcc 	andi	r2,r2,255
 4005ed0:	1080201c 	xori	r2,r2,128
 4005ed4:	10bfe004 	addi	r2,r2,-128
 4005ed8:	10000726 	beq	r2,zero,4005ef8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
 4005edc:	e0bffc17 	ldw	r2,-16(fp)
 4005ee0:	10800017 	ldw	r2,0(r2)
 4005ee4:	10800104 	addi	r2,r2,4
 4005ee8:	10800017 	ldw	r2,0(r2)
 4005eec:	e17ffb17 	ldw	r5,-20(fp)
 4005ef0:	e13ffc17 	ldw	r4,-16(fp)
 4005ef4:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
 4005ef8:	e0800217 	ldw	r2,8(fp)
 4005efc:	10c00003 	ldbu	r3,0(r2)
 4005f00:	e0bffc17 	ldw	r2,-16(fp)
 4005f04:	10c00105 	stb	r3,4(r2)
#endif

};
 4005f08:	0001883a 	nop
 4005f0c:	e037883a 	mov	sp,fp
 4005f10:	dfc00117 	ldw	ra,4(sp)
 4005f14:	df000017 	ldw	fp,0(sp)
 4005f18:	dec00204 	addi	sp,sp,8
 4005f1c:	f800283a 	ret

04005f20 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
 4005f20:	defff804 	addi	sp,sp,-32
 4005f24:	dfc00715 	stw	ra,28(sp)
 4005f28:	df000615 	stw	fp,24(sp)
 4005f2c:	df000604 	addi	fp,sp,24
 4005f30:	e13ffc15 	stw	r4,-16(fp)
 4005f34:	e17ffd15 	stw	r5,-12(fp)
 4005f38:	3007883a 	mov	r3,r6
 4005f3c:	3805883a 	mov	r2,r7
 4005f40:	e0fffe05 	stb	r3,-8(fp)
 4005f44:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
 4005f48:	e0800217 	ldw	r2,8(fp)
 4005f4c:	10800084 	addi	r2,r2,2
 4005f50:	10800003 	ldbu	r2,0(r2)
 4005f54:	10803fcc 	andi	r2,r2,255
 4005f58:	10800058 	cmpnei	r2,r2,1
 4005f5c:	10009926 	beq	r2,zero,40061c4 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
 4005f60:	e0bffc17 	ldw	r2,-16(fp)
 4005f64:	10c00103 	ldbu	r3,4(r2)
 4005f68:	e0800217 	ldw	r2,8(fp)
 4005f6c:	10800003 	ldbu	r2,0(r2)
 4005f70:	18c03fcc 	andi	r3,r3,255
 4005f74:	10803fcc 	andi	r2,r2,255
 4005f78:	18800e26 	beq	r3,r2,4005fb4 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
 4005f7c:	e0bffc17 	ldw	r2,-16(fp)
 4005f80:	10800017 	ldw	r2,0(r2)
 4005f84:	10800204 	addi	r2,r2,8
 4005f88:	10800017 	ldw	r2,0(r2)
 4005f8c:	e0fffc17 	ldw	r3,-16(fp)
 4005f90:	18c00103 	ldbu	r3,4(r3)
 4005f94:	19003fcc 	andi	r4,r3,255
 4005f98:	e0c00217 	ldw	r3,8(fp)
 4005f9c:	18c00003 	ldbu	r3,0(r3)
 4005fa0:	18c03fcc 	andi	r3,r3,255
 4005fa4:	180d883a 	mov	r6,r3
 4005fa8:	200b883a 	mov	r5,r4
 4005fac:	e13ffc17 	ldw	r4,-16(fp)
 4005fb0:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
 4005fb4:	00800084 	movi	r2,2
 4005fb8:	e0bffa05 	stb	r2,-24(fp)
 4005fbc:	e0bffa03 	ldbu	r2,-24(fp)
 4005fc0:	10800228 	cmpgeui	r2,r2,8
 4005fc4:	10006e1e 	bne	r2,zero,4006180 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
 4005fc8:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
 4005fcc:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
 4005fd0:	00800084 	movi	r2,2
 4005fd4:	e0bffac5 	stb	r2,-21(fp)
 4005fd8:	e0bffac3 	ldbu	r2,-21(fp)
 4005fdc:	10800228 	cmpgeui	r2,r2,8
 4005fe0:	10002f1e 	bne	r2,zero,40060a0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
 4005fe4:	e0bffa03 	ldbu	r2,-24(fp)
 4005fe8:	e0c00217 	ldw	r3,8(fp)
 4005fec:	1885883a 	add	r2,r3,r2
 4005ff0:	11000003 	ldbu	r4,0(r2)
 4005ff4:	e0bffac3 	ldbu	r2,-21(fp)
 4005ff8:	e0fffc17 	ldw	r3,-16(fp)
 4005ffc:	1885883a 	add	r2,r3,r2
 4006000:	10800104 	addi	r2,r2,4
 4006004:	10800003 	ldbu	r2,0(r2)
 4006008:	20c03fcc 	andi	r3,r4,255
 400600c:	10803fcc 	andi	r2,r2,255
 4006010:	1880091e 	bne	r3,r2,4006038 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
 4006014:	e0bffa03 	ldbu	r2,-24(fp)
 4006018:	e0c00217 	ldw	r3,8(fp)
 400601c:	1885883a 	add	r2,r3,r2
 4006020:	10800003 	ldbu	r2,0(r2)
 4006024:	10803fcc 	andi	r2,r2,255
 4006028:	10800060 	cmpeqi	r2,r2,1
 400602c:	1000021e 	bne	r2,zero,4006038 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
 4006030:	00800044 	movi	r2,1
 4006034:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
 4006038:	e0bffac3 	ldbu	r2,-21(fp)
 400603c:	e0c00217 	ldw	r3,8(fp)
 4006040:	1885883a 	add	r2,r3,r2
 4006044:	11000003 	ldbu	r4,0(r2)
 4006048:	e0bffa03 	ldbu	r2,-24(fp)
 400604c:	e0fffc17 	ldw	r3,-16(fp)
 4006050:	1885883a 	add	r2,r3,r2
 4006054:	10800104 	addi	r2,r2,4
 4006058:	10800003 	ldbu	r2,0(r2)
 400605c:	20c03fcc 	andi	r3,r4,255
 4006060:	10803fcc 	andi	r2,r2,255
 4006064:	18800a1e 	bne	r3,r2,4006090 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
 4006068:	e0bffa03 	ldbu	r2,-24(fp)
 400606c:	e0fffc17 	ldw	r3,-16(fp)
 4006070:	1885883a 	add	r2,r3,r2
 4006074:	10800104 	addi	r2,r2,4
 4006078:	10800003 	ldbu	r2,0(r2)
 400607c:	10803fcc 	andi	r2,r2,255
 4006080:	10800060 	cmpeqi	r2,r2,1
 4006084:	1000021e 	bne	r2,zero,4006090 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
 4006088:	00800044 	movi	r2,1
 400608c:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
 4006090:	e0bffac3 	ldbu	r2,-21(fp)
 4006094:	10800044 	addi	r2,r2,1
 4006098:	e0bffac5 	stb	r2,-21(fp)
 400609c:	003fce06 	br	4005fd8 <__alt_mem_onchip_memory2_0+0xfc004d38>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
 40060a0:	e0bffa43 	ldbu	r2,-23(fp)
 40060a4:	1080005c 	xori	r2,r2,1
 40060a8:	10803fcc 	andi	r2,r2,255
 40060ac:	10001c26 	beq	r2,zero,4006120 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
 40060b0:	e0bffc17 	ldw	r2,-16(fp)
 40060b4:	10800017 	ldw	r2,0(r2)
 40060b8:	10800104 	addi	r2,r2,4
 40060bc:	10800017 	ldw	r2,0(r2)
 40060c0:	e0fffa03 	ldbu	r3,-24(fp)
 40060c4:	e1000217 	ldw	r4,8(fp)
 40060c8:	20c7883a 	add	r3,r4,r3
 40060cc:	18c00003 	ldbu	r3,0(r3)
 40060d0:	18c03fcc 	andi	r3,r3,255
 40060d4:	180d883a 	mov	r6,r3
 40060d8:	e17ffd17 	ldw	r5,-12(fp)
 40060dc:	e13ffc17 	ldw	r4,-16(fp)
 40060e0:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
 40060e4:	e0bffc17 	ldw	r2,-16(fp)
 40060e8:	10800017 	ldw	r2,0(r2)
 40060ec:	10800304 	addi	r2,r2,12
 40060f0:	10800017 	ldw	r2,0(r2)
 40060f4:	e0c00217 	ldw	r3,8(fp)
 40060f8:	18c00003 	ldbu	r3,0(r3)
 40060fc:	19403fcc 	andi	r5,r3,255
 4006100:	e0fffa03 	ldbu	r3,-24(fp)
 4006104:	e1000217 	ldw	r4,8(fp)
 4006108:	20c7883a 	add	r3,r4,r3
 400610c:	18c00003 	ldbu	r3,0(r3)
 4006110:	18c03fcc 	andi	r3,r3,255
 4006114:	180d883a 	mov	r6,r3
 4006118:	e13ffc17 	ldw	r4,-16(fp)
 400611c:	103ee83a 	callr	r2
                }
                if (!up)
 4006120:	e0bffa83 	ldbu	r2,-22(fp)
 4006124:	1080005c 	xori	r2,r2,1
 4006128:	10803fcc 	andi	r2,r2,255
 400612c:	10001026 	beq	r2,zero,4006170 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
 4006130:	e0bffc17 	ldw	r2,-16(fp)
 4006134:	10800017 	ldw	r2,0(r2)
 4006138:	10800404 	addi	r2,r2,16
 400613c:	10800017 	ldw	r2,0(r2)
 4006140:	e0fffc17 	ldw	r3,-16(fp)
 4006144:	18c00103 	ldbu	r3,4(r3)
 4006148:	19403fcc 	andi	r5,r3,255
 400614c:	e0fffa03 	ldbu	r3,-24(fp)
 4006150:	e13ffc17 	ldw	r4,-16(fp)
 4006154:	20c7883a 	add	r3,r4,r3
 4006158:	18c00104 	addi	r3,r3,4
 400615c:	18c00003 	ldbu	r3,0(r3)
 4006160:	18c03fcc 	andi	r3,r3,255
 4006164:	180d883a 	mov	r6,r3
 4006168:	e13ffc17 	ldw	r4,-16(fp)
 400616c:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
 4006170:	e0bffa03 	ldbu	r2,-24(fp)
 4006174:	10800044 	addi	r2,r2,1
 4006178:	e0bffa05 	stb	r2,-24(fp)
 400617c:	003f8f06 	br	4005fbc <__alt_mem_onchip_memory2_0+0xfc004d1c>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
 4006180:	e03ffb05 	stb	zero,-20(fp)
 4006184:	e0bffb03 	ldbu	r2,-20(fp)
 4006188:	10800228 	cmpgeui	r2,r2,8
 400618c:	10000e1e 	bne	r2,zero,40061c8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
 4006190:	e0bffb03 	ldbu	r2,-20(fp)
 4006194:	e0fffb03 	ldbu	r3,-20(fp)
 4006198:	e1000217 	ldw	r4,8(fp)
 400619c:	20c7883a 	add	r3,r4,r3
 40061a0:	18c00003 	ldbu	r3,0(r3)
 40061a4:	e13ffc17 	ldw	r4,-16(fp)
 40061a8:	2085883a 	add	r2,r4,r2
 40061ac:	10800104 	addi	r2,r2,4
 40061b0:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
 40061b4:	e0bffb03 	ldbu	r2,-20(fp)
 40061b8:	10800044 	addi	r2,r2,1
 40061bc:	e0bffb05 	stb	r2,-20(fp)
 40061c0:	003ff006 	br	4006184 <__alt_mem_onchip_memory2_0+0xfc004ee4>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
 40061c4:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
 40061c8:	e037883a 	mov	sp,fp
 40061cc:	dfc00117 	ldw	ra,4(sp)
 40061d0:	df000017 	ldw	fp,0(sp)
 40061d4:	dec00204 	addi	sp,sp,8
 40061d8:	f800283a 	ret

040061dc <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
 40061dc:	defffa04 	addi	sp,sp,-24
 40061e0:	dfc00515 	stw	ra,20(sp)
 40061e4:	df000415 	stw	fp,16(sp)
 40061e8:	df000404 	addi	fp,sp,16
 40061ec:	e13ffd15 	stw	r4,-12(fp)
 40061f0:	2807883a 	mov	r3,r5
 40061f4:	3005883a 	mov	r2,r6
 40061f8:	e0fffe05 	stb	r3,-8(fp)
 40061fc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
 4006200:	e0bffe03 	ldbu	r2,-8(fp)
 4006204:	1080088c 	andi	r2,r2,34
 4006208:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
 400620c:	e0bfff03 	ldbu	r2,-4(fp)
 4006210:	10800130 	cmpltui	r2,r2,4
 4006214:	1000151e 	bne	r2,zero,400626c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
 4006218:	e0bfff03 	ldbu	r2,-4(fp)
 400621c:	108007a8 	cmpgeui	r2,r2,30
 4006220:	1000121e 	bne	r2,zero,400626c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
 4006224:	e0bffd17 	ldw	r2,-12(fp)
 4006228:	10800317 	ldw	r2,12(r2)
 400622c:	1080008c 	andi	r2,r2,2
 4006230:	1000021e 	bne	r2,zero,400623c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
 4006234:	e0bffc03 	ldbu	r2,-16(fp)
 4006238:	1000061e 	bne	r2,zero,4006254 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
 400623c:	e0bffd17 	ldw	r2,-12(fp)
 4006240:	10800317 	ldw	r2,12(r2)
 4006244:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
 4006248:	10000526 	beq	r2,zero,4006260 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
 400624c:	e0bffc03 	ldbu	r2,-16(fp)
 4006250:	1000031e 	bne	r2,zero,4006260 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
 4006254:	e0bfff03 	ldbu	r2,-4(fp)
 4006258:	10800f44 	addi	r2,r2,61
 400625c:	00008006 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
 4006260:	e0bfff03 	ldbu	r2,-4(fp)
 4006264:	10801744 	addi	r2,r2,93
 4006268:	00007d06 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
 400626c:	e0bfff03 	ldbu	r2,-4(fp)
 4006270:	108007b0 	cmpltui	r2,r2,30
 4006274:	1000191e 	bne	r2,zero,40062dc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
 4006278:	e0bfff03 	ldbu	r2,-4(fp)
 400627c:	10800a28 	cmpgeui	r2,r2,40
 4006280:	1000161e 	bne	r2,zero,40062dc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
 4006284:	e0bffc03 	ldbu	r2,-16(fp)
 4006288:	10000c26 	beq	r2,zero,40062bc <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
 400628c:	e0bffd17 	ldw	r2,-12(fp)
 4006290:	10800017 	ldw	r2,0(r2)
 4006294:	10800504 	addi	r2,r2,20
 4006298:	10800017 	ldw	r2,0(r2)
 400629c:	e13ffd17 	ldw	r4,-12(fp)
 40062a0:	103ee83a 	callr	r2
 40062a4:	1007883a 	mov	r3,r2
 40062a8:	e0bfff03 	ldbu	r2,-4(fp)
 40062ac:	10bff884 	addi	r2,r2,-30
 40062b0:	1885883a 	add	r2,r3,r2
 40062b4:	10800003 	ldbu	r2,0(r2)
 40062b8:	00006906 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
 40062bc:	e0bfff03 	ldbu	r2,-4(fp)
 40062c0:	108009e0 	cmpeqi	r2,r2,39
 40062c4:	1000031e 	bne	r2,zero,40062d4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
 40062c8:	e0bfff03 	ldbu	r2,-4(fp)
 40062cc:	108004c4 	addi	r2,r2,19
 40062d0:	00006306 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 40062d4:	00800c04 	movi	r2,48
 40062d8:	00006106 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
 40062dc:	e0bfff03 	ldbu	r2,-4(fp)
 40062e0:	10801670 	cmpltui	r2,r2,89
 40062e4:	10000a1e 	bne	r2,zero,4006310 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
 40062e8:	e0bfff03 	ldbu	r2,-4(fp)
 40062ec:	108018a8 	cmpgeui	r2,r2,98
 40062f0:	1000071e 	bne	r2,zero,4006310 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
 40062f4:	e0bffd17 	ldw	r2,-12(fp)
 40062f8:	10800317 	ldw	r2,12(r2)
 40062fc:	1080004c 	andi	r2,r2,1
 4006300:	10005626 	beq	r2,zero,400645c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
 4006304:	e0bfff03 	ldbu	r2,-4(fp)
 4006308:	10bff604 	addi	r2,r2,-40
 400630c:	00005406 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
 4006310:	e0bfff03 	ldbu	r2,-4(fp)
 4006314:	10800b70 	cmpltui	r2,r2,45
 4006318:	10001d1e 	bne	r2,zero,4006390 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
 400631c:	e0bfff03 	ldbu	r2,-4(fp)
 4006320:	10800e68 	cmpgeui	r2,r2,57
 4006324:	10001a1e 	bne	r2,zero,4006390 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
 4006328:	e0bffc03 	ldbu	r2,-16(fp)
 400632c:	10000c26 	beq	r2,zero,4006360 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
 4006330:	e0bffd17 	ldw	r2,-12(fp)
 4006334:	10800017 	ldw	r2,0(r2)
 4006338:	10800604 	addi	r2,r2,24
 400633c:	10800017 	ldw	r2,0(r2)
 4006340:	e13ffd17 	ldw	r4,-12(fp)
 4006344:	103ee83a 	callr	r2
 4006348:	1007883a 	mov	r3,r2
 400634c:	e0bfff03 	ldbu	r2,-4(fp)
 4006350:	10bff4c4 	addi	r2,r2,-45
 4006354:	1885883a 	add	r2,r3,r2
 4006358:	10800003 	ldbu	r2,0(r2)
 400635c:	00004006 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4006360:	e0bffd17 	ldw	r2,-12(fp)
 4006364:	10800017 	ldw	r2,0(r2)
 4006368:	10800704 	addi	r2,r2,28
 400636c:	10800017 	ldw	r2,0(r2)
 4006370:	e13ffd17 	ldw	r4,-12(fp)
 4006374:	103ee83a 	callr	r2
 4006378:	1007883a 	mov	r3,r2
 400637c:	e0bfff03 	ldbu	r2,-4(fp)
 4006380:	10bff4c4 	addi	r2,r2,-45
 4006384:	1885883a 	add	r2,r3,r2
 4006388:	10800003 	ldbu	r2,0(r2)
 400638c:	00003406 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
 4006390:	e0bfff03 	ldbu	r2,-4(fp)
 4006394:	10801530 	cmpltui	r2,r2,84
 4006398:	10000f1e 	bne	r2,zero,40063d8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
 400639c:	e0bfff03 	ldbu	r2,-4(fp)
 40063a0:	10801668 	cmpgeui	r2,r2,89
 40063a4:	10000c1e 	bne	r2,zero,40063d8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
 40063a8:	e0bffd17 	ldw	r2,-12(fp)
 40063ac:	10800017 	ldw	r2,0(r2)
 40063b0:	10800804 	addi	r2,r2,32
 40063b4:	10800017 	ldw	r2,0(r2)
 40063b8:	e13ffd17 	ldw	r4,-12(fp)
 40063bc:	103ee83a 	callr	r2
 40063c0:	1007883a 	mov	r3,r2
 40063c4:	e0bfff03 	ldbu	r2,-4(fp)
 40063c8:	10bfeb04 	addi	r2,r2,-84
 40063cc:	1885883a 	add	r2,r3,r2
 40063d0:	10800003 	ldbu	r2,0(r2)
 40063d4:	00002206 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
 40063d8:	e0bfff03 	ldbu	r2,-4(fp)
 40063dc:	10c00b20 	cmpeqi	r3,r2,44
 40063e0:	18000a1e 	bne	r3,zero,400640c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
 40063e4:	10c00b48 	cmpgei	r3,r2,45
 40063e8:	1800031e 	bne	r3,zero,40063f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
 40063ec:	10800a20 	cmpeqi	r2,r2,40
 40063f0:	1000081e 	bne	r2,zero,4006414 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
 40063f4:	00001906 	br	400645c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
 40063f8:	10c018a0 	cmpeqi	r3,r2,98
 40063fc:	1800071e 	bne	r3,zero,400641c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
 4006400:	108018e0 	cmpeqi	r2,r2,99
 4006404:	10000d1e 	bne	r2,zero,400643c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
 4006408:	00001406 	br	400645c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
 400640c:	00800804 	movi	r2,32
 4006410:	00001306 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
 4006414:	00800344 	movi	r2,13
 4006418:	00001106 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
 400641c:	e0bffd17 	ldw	r2,-12(fp)
 4006420:	10800317 	ldw	r2,12(r2)
 4006424:	1080004c 	andi	r2,r2,1
 4006428:	10000226 	beq	r2,zero,4006434 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
 400642c:	00800c04 	movi	r2,48
 4006430:	00000b06 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4006434:	0005883a 	mov	r2,zero
 4006438:	00000906 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
 400643c:	e0bffd17 	ldw	r2,-12(fp)
 4006440:	10800317 	ldw	r2,12(r2)
 4006444:	1080004c 	andi	r2,r2,1
 4006448:	10000226 	beq	r2,zero,4006454 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
 400644c:	00800b84 	movi	r2,46
 4006450:	00000306 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4006454:	0005883a 	mov	r2,zero
 4006458:	00000106 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
 400645c:	0005883a 	mov	r2,zero
}
 4006460:	e037883a 	mov	sp,fp
 4006464:	dfc00117 	ldw	ra,4(sp)
 4006468:	df000017 	ldw	fp,0(sp)
 400646c:	dec00204 	addi	sp,sp,8
 4006470:	f800283a 	ret

04006474 <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
 4006474:	defffd04 	addi	sp,sp,-12
 4006478:	df000215 	stw	fp,8(sp)
 400647c:	df000204 	addi	fp,sp,8
 4006480:	e13ffe15 	stw	r4,-8(fp)
 4006484:	e17fff15 	stw	r5,-4(fp)
        };
 4006488:	0001883a 	nop
 400648c:	e037883a 	mov	sp,fp
 4006490:	df000017 	ldw	fp,0(sp)
 4006494:	dec00104 	addi	sp,sp,4
 4006498:	f800283a 	ret

0400649c <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 400649c:	defffd04 	addi	sp,sp,-12
 40064a0:	df000215 	stw	fp,8(sp)
 40064a4:	df000204 	addi	fp,sp,8
 40064a8:	e13ffe15 	stw	r4,-8(fp)
 40064ac:	e17fff15 	stw	r5,-4(fp)
        };
 40064b0:	0001883a 	nop
 40064b4:	e037883a 	mov	sp,fp
 40064b8:	df000017 	ldw	fp,0(sp)
 40064bc:	dec00104 	addi	sp,sp,4
 40064c0:	f800283a 	ret

040064c4 <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 40064c4:	defffd04 	addi	sp,sp,-12
 40064c8:	df000215 	stw	fp,8(sp)
 40064cc:	df000204 	addi	fp,sp,8
 40064d0:	e13ffe15 	stw	r4,-8(fp)
 40064d4:	e17fff15 	stw	r5,-4(fp)
        };
 40064d8:	0001883a 	nop
 40064dc:	e037883a 	mov	sp,fp
 40064e0:	df000017 	ldw	fp,0(sp)
 40064e4:	dec00104 	addi	sp,sp,4
 40064e8:	f800283a 	ret

040064ec <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 40064ec:	defffd04 	addi	sp,sp,-12
 40064f0:	df000215 	stw	fp,8(sp)
 40064f4:	df000204 	addi	fp,sp,8
 40064f8:	e13ffe15 	stw	r4,-8(fp)
 40064fc:	e17fff15 	stw	r5,-4(fp)
        };
 4006500:	0001883a 	nop
 4006504:	e037883a 	mov	sp,fp
 4006508:	df000017 	ldw	fp,0(sp)
 400650c:	dec00104 	addi	sp,sp,4
 4006510:	f800283a 	ret

04006514 <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 4006514:	defffd04 	addi	sp,sp,-12
 4006518:	df000215 	stw	fp,8(sp)
 400651c:	df000204 	addi	fp,sp,8
 4006520:	e13ffe15 	stw	r4,-8(fp)
 4006524:	e17fff15 	stw	r5,-4(fp)
        };
 4006528:	0001883a 	nop
 400652c:	e037883a 	mov	sp,fp
 4006530:	df000017 	ldw	fp,0(sp)
 4006534:	dec00104 	addi	sp,sp,4
 4006538:	f800283a 	ret

0400653c <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 400653c:	defffd04 	addi	sp,sp,-12
 4006540:	df000215 	stw	fp,8(sp)
 4006544:	df000204 	addi	fp,sp,8
 4006548:	e13ffe15 	stw	r4,-8(fp)
 400654c:	e17fff15 	stw	r5,-4(fp)
        };
 4006550:	0001883a 	nop
 4006554:	e037883a 	mov	sp,fp
 4006558:	df000017 	ldw	fp,0(sp)
 400655c:	dec00104 	addi	sp,sp,4
 4006560:	f800283a 	ret

04006564 <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 4006564:	defffd04 	addi	sp,sp,-12
 4006568:	df000215 	stw	fp,8(sp)
 400656c:	df000204 	addi	fp,sp,8
 4006570:	e13ffe15 	stw	r4,-8(fp)
 4006574:	e17fff15 	stw	r5,-4(fp)
        };
 4006578:	0001883a 	nop
 400657c:	e037883a 	mov	sp,fp
 4006580:	df000017 	ldw	fp,0(sp)
 4006584:	dec00104 	addi	sp,sp,4
 4006588:	f800283a 	ret

0400658c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
 400658c:	defff704 	addi	sp,sp,-36
 4006590:	dfc00815 	stw	ra,32(sp)
 4006594:	df000715 	stw	fp,28(sp)
 4006598:	df000704 	addi	fp,sp,28
 400659c:	e13ffd15 	stw	r4,-12(fp)
 40065a0:	e17ffe15 	stw	r5,-8(fp)
 40065a4:	3005883a 	mov	r2,r6
 40065a8:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
 40065ac:	e0bffd17 	ldw	r2,-12(fp)
 40065b0:	10800303 	ldbu	r2,12(r2)
 40065b4:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
 40065b8:	e0bfff03 	ldbu	r2,-4(fp)
 40065bc:	10c011e0 	cmpeqi	r3,r2,71
 40065c0:	1800271e 	bne	r3,zero,4006660 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
 40065c4:	10c014e0 	cmpeqi	r3,r2,83
 40065c8:	1800031e 	bne	r3,zero,40065d8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
 40065cc:	10800e60 	cmpeqi	r2,r2,57
 40065d0:	1000111e 	bne	r2,zero,4006618 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
 40065d4:	00003506 	br	40066ac <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
 40065d8:	e0bffd17 	ldw	r2,-12(fp)
 40065dc:	10800317 	ldw	r2,12(r2)
 40065e0:	1080004c 	andi	r2,r2,1
 40065e4:	0084303a 	nor	r2,zero,r2
 40065e8:	1080004c 	andi	r2,r2,1
 40065ec:	1007883a 	mov	r3,r2
 40065f0:	e0bffd17 	ldw	r2,-12(fp)
 40065f4:	1940004c 	andi	r5,r3,1
 40065f8:	11000303 	ldbu	r4,12(r2)
 40065fc:	00ffff84 	movi	r3,-2
 4006600:	20c6703a 	and	r3,r4,r3
 4006604:	1809883a 	mov	r4,r3
 4006608:	2807883a 	mov	r3,r5
 400660c:	20c6b03a 	or	r3,r4,r3
 4006610:	10c00305 	stb	r3,12(r2)
                                break;
 4006614:	00002506 	br	40066ac <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
 4006618:	e0bffd17 	ldw	r2,-12(fp)
 400661c:	10800317 	ldw	r2,12(r2)
 4006620:	1004d07a 	srli	r2,r2,1
 4006624:	1080004c 	andi	r2,r2,1
 4006628:	0084303a 	nor	r2,zero,r2
 400662c:	1080004c 	andi	r2,r2,1
 4006630:	1007883a 	mov	r3,r2
 4006634:	e0bffd17 	ldw	r2,-12(fp)
 4006638:	18c0004c 	andi	r3,r3,1
 400663c:	18cb883a 	add	r5,r3,r3
 4006640:	11000303 	ldbu	r4,12(r2)
 4006644:	00ffff44 	movi	r3,-3
 4006648:	20c6703a 	and	r3,r4,r3
 400664c:	1809883a 	mov	r4,r3
 4006650:	2807883a 	mov	r3,r5
 4006654:	20c6b03a 	or	r3,r4,r3
 4006658:	10c00305 	stb	r3,12(r2)
                                break;
 400665c:	00001306 	br	40066ac <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
 4006660:	e0bffd17 	ldw	r2,-12(fp)
 4006664:	10800317 	ldw	r2,12(r2)
 4006668:	1004d0ba 	srli	r2,r2,2
 400666c:	1080004c 	andi	r2,r2,1
 4006670:	0084303a 	nor	r2,zero,r2
 4006674:	1080004c 	andi	r2,r2,1
 4006678:	1007883a 	mov	r3,r2
 400667c:	e0bffd17 	ldw	r2,-12(fp)
 4006680:	18c0004c 	andi	r3,r3,1
 4006684:	18c7883a 	add	r3,r3,r3
 4006688:	18cb883a 	add	r5,r3,r3
 400668c:	11000303 	ldbu	r4,12(r2)
 4006690:	00fffec4 	movi	r3,-5
 4006694:	20c6703a 	and	r3,r4,r3
 4006698:	1809883a 	mov	r4,r3
 400669c:	2807883a 	mov	r3,r5
 40066a0:	20c6b03a 	or	r3,r4,r3
 40066a4:	10c00305 	stb	r3,12(r2)
                                break;
 40066a8:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
 40066ac:	e0bffd17 	ldw	r2,-12(fp)
 40066b0:	10800303 	ldbu	r2,12(r2)
 40066b4:	10c03fcc 	andi	r3,r2,255
 40066b8:	e0bffc03 	ldbu	r2,-16(fp)
 40066bc:	18801026 	beq	r3,r2,4006700 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
 40066c0:	e0bffe17 	ldw	r2,-8(fp)
 40066c4:	10000e26 	beq	r2,zero,4006700 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
 40066c8:	e0bffd17 	ldw	r2,-12(fp)
 40066cc:	10800303 	ldbu	r2,12(r2)
 40066d0:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
 40066d4:	e0bffc44 	addi	r2,fp,-15
 40066d8:	d8800215 	stw	r2,8(sp)
 40066dc:	00800044 	movi	r2,1
 40066e0:	d8800115 	stw	r2,4(sp)
 40066e4:	d8000015 	stw	zero,0(sp)
 40066e8:	01c00084 	movi	r7,2
 40066ec:	000d883a 	mov	r6,zero
 40066f0:	000b883a 	mov	r5,zero
 40066f4:	e13ffe17 	ldw	r4,-8(fp)
 40066f8:	4008df00 	call	4008df0 <_ZN6USBHID9SetReportEhhhhtPh>
 40066fc:	00000106 	br	4006704 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
 4006700:	0005883a 	mov	r2,zero
        };
 4006704:	e037883a 	mov	sp,fp
 4006708:	dfc00117 	ldw	ra,4(sp)
 400670c:	df000017 	ldw	fp,0(sp)
 4006710:	dec00204 	addi	sp,sp,8
 4006714:	f800283a 	ret

04006718 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
 4006718:	defffc04 	addi	sp,sp,-16
 400671c:	df000315 	stw	fp,12(sp)
 4006720:	df000304 	addi	fp,sp,12
 4006724:	e13ffd15 	stw	r4,-12(fp)
 4006728:	2807883a 	mov	r3,r5
 400672c:	3005883a 	mov	r2,r6
 4006730:	e0fffe05 	stb	r3,-8(fp)
 4006734:	e0bfff05 	stb	r2,-4(fp)
        };
 4006738:	0001883a 	nop
 400673c:	e037883a 	mov	sp,fp
 4006740:	df000017 	ldw	fp,0(sp)
 4006744:	dec00104 	addi	sp,sp,4
 4006748:	f800283a 	ret

0400674c <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
 400674c:	defffc04 	addi	sp,sp,-16
 4006750:	df000315 	stw	fp,12(sp)
 4006754:	df000304 	addi	fp,sp,12
 4006758:	e13ffd15 	stw	r4,-12(fp)
 400675c:	2807883a 	mov	r3,r5
 4006760:	3005883a 	mov	r2,r6
 4006764:	e0fffe05 	stb	r3,-8(fp)
 4006768:	e0bfff05 	stb	r2,-4(fp)
        };
 400676c:	0001883a 	nop
 4006770:	e037883a 	mov	sp,fp
 4006774:	df000017 	ldw	fp,0(sp)
 4006778:	dec00104 	addi	sp,sp,4
 400677c:	f800283a 	ret

04006780 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
 4006780:	defffc04 	addi	sp,sp,-16
 4006784:	df000315 	stw	fp,12(sp)
 4006788:	df000304 	addi	fp,sp,12
 400678c:	e13ffd15 	stw	r4,-12(fp)
 4006790:	2807883a 	mov	r3,r5
 4006794:	3005883a 	mov	r2,r6
 4006798:	e0fffe05 	stb	r3,-8(fp)
 400679c:	e0bfff05 	stb	r2,-4(fp)
        };
 40067a0:	0001883a 	nop
 40067a4:	e037883a 	mov	sp,fp
 40067a8:	df000017 	ldw	fp,0(sp)
 40067ac:	dec00104 	addi	sp,sp,4
 40067b0:	f800283a 	ret

040067b4 <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
 40067b4:	defffe04 	addi	sp,sp,-8
 40067b8:	df000115 	stw	fp,4(sp)
 40067bc:	df000104 	addi	fp,sp,4
 40067c0:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
 40067c4:	008100b4 	movhi	r2,1026
 40067c8:	108bc184 	addi	r2,r2,12038
        };
 40067cc:	e037883a 	mov	sp,fp
 40067d0:	df000017 	ldw	fp,0(sp)
 40067d4:	dec00104 	addi	sp,sp,4
 40067d8:	f800283a 	ret

040067dc <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
 40067dc:	defffe04 	addi	sp,sp,-8
 40067e0:	df000115 	stw	fp,4(sp)
 40067e4:	df000104 	addi	fp,sp,4
 40067e8:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
 40067ec:	008100b4 	movhi	r2,1026
 40067f0:	108bc404 	addi	r2,r2,12048
        };
 40067f4:	e037883a 	mov	sp,fp
 40067f8:	df000017 	ldw	fp,0(sp)
 40067fc:	dec00104 	addi	sp,sp,4
 4006800:	f800283a 	ret

04006804 <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
 4006804:	defffe04 	addi	sp,sp,-8
 4006808:	df000115 	stw	fp,4(sp)
 400680c:	df000104 	addi	fp,sp,4
 4006810:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
 4006814:	008100b4 	movhi	r2,1026
 4006818:	108bc704 	addi	r2,r2,12060
        };
 400681c:	e037883a 	mov	sp,fp
 4006820:	df000017 	ldw	fp,0(sp)
 4006824:	dec00104 	addi	sp,sp,4
 4006828:	f800283a 	ret

0400682c <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
 400682c:	defffe04 	addi	sp,sp,-8
 4006830:	df000115 	stw	fp,4(sp)
 4006834:	df000104 	addi	fp,sp,4
 4006838:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
 400683c:	d0a1e584 	addi	r2,gp,-30826
        };
 4006840:	e037883a 	mov	sp,fp
 4006844:	df000017 	ldw	fp,0(sp)
 4006848:	dec00104 	addi	sp,sp,4
 400684c:	f800283a 	ret

04006850 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
 4006850:	defffc04 	addi	sp,sp,-16
 4006854:	dfc00315 	stw	ra,12(sp)
 4006858:	df000215 	stw	fp,8(sp)
 400685c:	df000204 	addi	fp,sp,8
 4006860:	2005883a 	mov	r2,r4
 4006864:	e17fff15 	stw	r5,-4(fp)
 4006868:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
 400686c:	d0e1ea17 	ldw	r3,-30808(gp)
 4006870:	e0bfff17 	ldw	r2,-4(fp)
 4006874:	18800416 	blt	r3,r2,4006888 <_Z9E_Notifycci+0x38>
        printf("%c", c);
 4006878:	e0bffe07 	ldb	r2,-8(fp)
 400687c:	1009883a 	mov	r4,r2
 4006880:	400f7380 	call	400f738 <putchar>
 4006884:	00000106 	br	400688c <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 4006888:	0001883a 	nop
        printf("%c", c);
}
 400688c:	e037883a 	mov	sp,fp
 4006890:	dfc00117 	ldw	ra,4(sp)
 4006894:	df000017 	ldw	fp,0(sp)
 4006898:	dec00204 	addi	sp,sp,8
 400689c:	f800283a 	ret

040068a0 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
 40068a0:	defffb04 	addi	sp,sp,-20
 40068a4:	dfc00415 	stw	ra,16(sp)
 40068a8:	df000315 	stw	fp,12(sp)
 40068ac:	df000304 	addi	fp,sp,12
 40068b0:	e13ffe15 	stw	r4,-8(fp)
 40068b4:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
 40068b8:	d0e1ea17 	ldw	r3,-30808(gp)
 40068bc:	e0bfff17 	ldw	r2,-4(fp)
 40068c0:	18801016 	blt	r3,r2,4006904 <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
 40068c4:	e0bffe17 	ldw	r2,-8(fp)
 40068c8:	10001026 	beq	r2,zero,400690c <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
 40068cc:	e0bffe17 	ldw	r2,-8(fp)
 40068d0:	10c00044 	addi	r3,r2,1
 40068d4:	e0fffe15 	stw	r3,-8(fp)
 40068d8:	10800003 	ldbu	r2,0(r2)
 40068dc:	e0bffd05 	stb	r2,-12(fp)
 40068e0:	e0bffd07 	ldb	r2,-12(fp)
 40068e4:	1004c03a 	cmpne	r2,r2,zero
 40068e8:	10803fcc 	andi	r2,r2,255
 40068ec:	10000826 	beq	r2,zero,4006910 <_Z8E_NotifyPKci+0x70>
 40068f0:	e0bffd07 	ldb	r2,-12(fp)
 40068f4:	e17fff17 	ldw	r5,-4(fp)
 40068f8:	1009883a 	mov	r4,r2
 40068fc:	40068500 	call	4006850 <_Z9E_Notifycci>
 4006900:	003ff206 	br	40068cc <__alt_mem_onchip_memory2_0+0xfc00562c>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 4006904:	0001883a 	nop
 4006908:	00000106 	br	4006910 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
 400690c:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
 4006910:	e037883a 	mov	sp,fp
 4006914:	dfc00117 	ldw	ra,4(sp)
 4006918:	df000017 	ldw	fp,0(sp)
 400691c:	dec00204 	addi	sp,sp,8
 4006920:	f800283a 	ret

04006924 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
 4006924:	defffb04 	addi	sp,sp,-20
 4006928:	dfc00415 	stw	ra,16(sp)
 400692c:	df000315 	stw	fp,12(sp)
 4006930:	df000304 	addi	fp,sp,12
 4006934:	e13ffe15 	stw	r4,-8(fp)
 4006938:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
 400693c:	d0e1ea17 	ldw	r3,-30808(gp)
 4006940:	e0bfff17 	ldw	r2,-4(fp)
 4006944:	18801016 	blt	r3,r2,4006988 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
 4006948:	e0bffe17 	ldw	r2,-8(fp)
 400694c:	10001026 	beq	r2,zero,4006990 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
 4006950:	e0bffe17 	ldw	r2,-8(fp)
 4006954:	10c00044 	addi	r3,r2,1
 4006958:	e0fffe15 	stw	r3,-8(fp)
 400695c:	10800003 	ldbu	r2,0(r2)
 4006960:	e0bffd05 	stb	r2,-12(fp)
 4006964:	e0bffd07 	ldb	r2,-12(fp)
 4006968:	1004c03a 	cmpne	r2,r2,zero
 400696c:	10803fcc 	andi	r2,r2,255
 4006970:	10000826 	beq	r2,zero,4006994 <_Z11E_NotifyStrPKci+0x70>
 4006974:	e0bffd07 	ldb	r2,-12(fp)
 4006978:	e17fff17 	ldw	r5,-4(fp)
 400697c:	1009883a 	mov	r4,r2
 4006980:	40068500 	call	4006850 <_Z9E_Notifycci>
 4006984:	003ff206 	br	4006950 <__alt_mem_onchip_memory2_0+0xfc0056b0>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 4006988:	0001883a 	nop
 400698c:	00000106 	br	4006994 <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
 4006990:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
 4006994:	e037883a 	mov	sp,fp
 4006998:	dfc00117 	ldw	ra,4(sp)
 400699c:	df000017 	ldw	fp,0(sp)
 40069a0:	dec00204 	addi	sp,sp,8
 40069a4:	f800283a 	ret

040069a8 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
 40069a8:	defffd04 	addi	sp,sp,-12
 40069ac:	df000215 	stw	fp,8(sp)
 40069b0:	df000204 	addi	fp,sp,8
 40069b4:	2005883a 	mov	r2,r4
 40069b8:	e17fff15 	stw	r5,-4(fp)
 40069bc:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
 40069c0:	e037883a 	mov	sp,fp
 40069c4:	df000017 	ldw	fp,0(sp)
 40069c8:	dec00104 	addi	sp,sp,4
 40069cc:	f800283a 	ret

040069d0 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
 40069d0:	defffc04 	addi	sp,sp,-16
 40069d4:	df000315 	stw	fp,12(sp)
 40069d8:	df000304 	addi	fp,sp,12
 40069dc:	e13ffd15 	stw	r4,-12(fp)
 40069e0:	e17ffe15 	stw	r5,-8(fp)
 40069e4:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
 40069e8:	e037883a 	mov	sp,fp
 40069ec:	df000017 	ldw	fp,0(sp)
 40069f0:	dec00104 	addi	sp,sp,4
 40069f4:	f800283a 	ret

040069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 40069f8:	defffc04 	addi	sp,sp,-16
 40069fc:	df000315 	stw	fp,12(sp)
 4006a00:	df000304 	addi	fp,sp,12
 4006a04:	e13ffd15 	stw	r4,-12(fp)
 4006a08:	e17ffe15 	stw	r5,-8(fp)
 4006a0c:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
 4006a10:	e0bffd17 	ldw	r2,-12(fp)
 4006a14:	10800017 	ldw	r2,0(r2)
 4006a18:	1000021e 	bne	r2,zero,4006a24 <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 4006a1c:	0005883a 	mov	r2,zero
 4006a20:	00003306 	br	4006af0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 4006a24:	e0bffd17 	ldw	r2,-12(fp)
 4006a28:	10800103 	ldbu	r2,4(r2)
 4006a2c:	10803fcc 	andi	r2,r2,255
 4006a30:	10002426 	beq	r2,zero,4006ac4 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
 4006a34:	e0bfff17 	ldw	r2,-4(fp)
 4006a38:	1080000b 	ldhu	r2,0(r2)
 4006a3c:	10bfffcc 	andi	r2,r2,65535
 4006a40:	10002026 	beq	r2,zero,4006ac4 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
 4006a44:	e0bffd17 	ldw	r2,-12(fp)
 4006a48:	10800017 	ldw	r2,0(r2)
 4006a4c:	e0fffd17 	ldw	r3,-12(fp)
 4006a50:	18c00143 	ldbu	r3,5(r3)
 4006a54:	19003fcc 	andi	r4,r3,255
 4006a58:	e0fffd17 	ldw	r3,-12(fp)
 4006a5c:	18c00103 	ldbu	r3,4(r3)
 4006a60:	18c03fcc 	andi	r3,r3,255
 4006a64:	20c7c83a 	sub	r3,r4,r3
 4006a68:	10c5883a 	add	r2,r2,r3
 4006a6c:	e0fffe17 	ldw	r3,-8(fp)
 4006a70:	18c00017 	ldw	r3,0(r3)
 4006a74:	18c00003 	ldbu	r3,0(r3)
 4006a78:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 4006a7c:	e0bffd17 	ldw	r2,-12(fp)
 4006a80:	10800103 	ldbu	r2,4(r2)
 4006a84:	10bfffc4 	addi	r2,r2,-1
 4006a88:	1007883a 	mov	r3,r2
 4006a8c:	e0bffd17 	ldw	r2,-12(fp)
 4006a90:	10c00105 	stb	r3,4(r2)
 4006a94:	e0bfff17 	ldw	r2,-4(fp)
 4006a98:	1080000b 	ldhu	r2,0(r2)
 4006a9c:	10bfffc4 	addi	r2,r2,-1
 4006aa0:	1007883a 	mov	r3,r2
 4006aa4:	e0bfff17 	ldw	r2,-4(fp)
 4006aa8:	10c0000d 	sth	r3,0(r2)
 4006aac:	e0bffe17 	ldw	r2,-8(fp)
 4006ab0:	10800017 	ldw	r2,0(r2)
 4006ab4:	10c00044 	addi	r3,r2,1
 4006ab8:	e0bffe17 	ldw	r2,-8(fp)
 4006abc:	10c00015 	stw	r3,0(r2)
 4006ac0:	003fd806 	br	4006a24 <__alt_mem_onchip_memory2_0+0xfc005784>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
 4006ac4:	e0bffd17 	ldw	r2,-12(fp)
 4006ac8:	10800103 	ldbu	r2,4(r2)
 4006acc:	10803fcc 	andi	r2,r2,255
 4006ad0:	10000226 	beq	r2,zero,4006adc <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
 4006ad4:	0005883a 	mov	r2,zero
 4006ad8:	00000506 	br	4006af0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
 4006adc:	e0bffd17 	ldw	r2,-12(fp)
 4006ae0:	10c00143 	ldbu	r3,5(r2)
 4006ae4:	e0bffd17 	ldw	r2,-12(fp)
 4006ae8:	10c00105 	stb	r3,4(r2)
        return true;
 4006aec:	00800044 	movi	r2,1
}
 4006af0:	e037883a 	mov	sp,fp
 4006af4:	df000017 	ldw	fp,0(sp)
 4006af8:	dec00104 	addi	sp,sp,4
 4006afc:	f800283a 	ret

04006b00 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
 4006b00:	defffa04 	addi	sp,sp,-24
 4006b04:	dfc00515 	stw	ra,20(sp)
 4006b08:	df000415 	stw	fp,16(sp)
 4006b0c:	df000404 	addi	fp,sp,16
 4006b10:	e13ffc15 	stw	r4,-16(fp)
 4006b14:	e17ffd15 	stw	r5,-12(fp)
 4006b18:	e1bffe15 	stw	r6,-8(fp)
 4006b1c:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
 4006b20:	e0bffc17 	ldw	r2,-16(fp)
 4006b24:	10800003 	ldbu	r2,0(r2)
 4006b28:	10803fcc 	andi	r2,r2,255
 4006b2c:	10c00060 	cmpeqi	r3,r2,1
 4006b30:	1800181e 	bne	r3,zero,4006b94 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
 4006b34:	10c00088 	cmpgei	r3,r2,2
 4006b38:	1800021e 	bne	r3,zero,4006b44 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
 4006b3c:	10000626 	beq	r2,zero,4006b58 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
 4006b40:	00007e06 	br	4006d3c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
 4006b44:	10c000a0 	cmpeqi	r3,r2,2
 4006b48:	18004a1e 	bne	r3,zero,4006c74 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
 4006b4c:	108000e0 	cmpeqi	r2,r2,3
 4006b50:	1000571e 	bne	r2,zero,4006cb0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
 4006b54:	00007906 	br	4006d3c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
 4006b58:	e0bffc17 	ldw	r2,-16(fp)
 4006b5c:	10800417 	ldw	r2,16(r2)
 4006b60:	e0fffc17 	ldw	r3,-16(fp)
 4006b64:	18c00303 	ldbu	r3,12(r3)
 4006b68:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
 4006b6c:	e0bffc17 	ldw	r2,-16(fp)
 4006b70:	10c00504 	addi	r3,r2,20
 4006b74:	e0bffc17 	ldw	r2,-16(fp)
 4006b78:	10800417 	ldw	r2,16(r2)
 4006b7c:	100b883a 	mov	r5,r2
 4006b80:	1809883a 	mov	r4,r3
 4006b84:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
 4006b88:	e0bffc17 	ldw	r2,-16(fp)
 4006b8c:	00c00044 	movi	r3,1
 4006b90:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
 4006b94:	e0bffc17 	ldw	r2,-16(fp)
 4006b98:	10800504 	addi	r2,r2,20
 4006b9c:	e1bffe17 	ldw	r6,-8(fp)
 4006ba0:	e17ffd17 	ldw	r5,-12(fp)
 4006ba4:	1009883a 	mov	r4,r2
 4006ba8:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4006bac:	1080005c 	xori	r2,r2,1
 4006bb0:	10803fcc 	andi	r2,r2,255
 4006bb4:	10000226 	beq	r2,zero,4006bc0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
 4006bb8:	0005883a 	mov	r2,zero
 4006bbc:	00006006 	br	4006d40 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
 4006bc0:	e0bffc17 	ldw	r2,-16(fp)
 4006bc4:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
 4006bc8:	e0bffc17 	ldw	r2,-16(fp)
 4006bcc:	10800417 	ldw	r2,16(r2)
 4006bd0:	10800003 	ldbu	r2,0(r2)
 4006bd4:	10803fcc 	andi	r2,r2,255
 4006bd8:	10800130 	cmpltui	r2,r2,4
 4006bdc:	10000e1e 	bne	r2,zero,4006c18 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
 4006be0:	e0bffc17 	ldw	r2,-16(fp)
 4006be4:	10800417 	ldw	r2,16(r2)
 4006be8:	10c00043 	ldbu	r3,1(r2)
 4006bec:	11000083 	ldbu	r4,2(r2)
 4006bf0:	2008923a 	slli	r4,r4,8
 4006bf4:	20c6b03a 	or	r3,r4,r3
 4006bf8:	110000c3 	ldbu	r4,3(r2)
 4006bfc:	2008943a 	slli	r4,r4,16
 4006c00:	20c6b03a 	or	r3,r4,r3
 4006c04:	10800103 	ldbu	r2,4(r2)
 4006c08:	1004963a 	slli	r2,r2,24
 4006c0c:	10c4b03a 	or	r2,r2,r3
 4006c10:	10800017 	ldw	r2,0(r2)
 4006c14:	00000e06 	br	4006c50 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
 4006c18:	e0bffc17 	ldw	r2,-16(fp)
 4006c1c:	10800417 	ldw	r2,16(r2)
 4006c20:	10c00043 	ldbu	r3,1(r2)
 4006c24:	11000083 	ldbu	r4,2(r2)
 4006c28:	2008923a 	slli	r4,r4,8
 4006c2c:	20c6b03a 	or	r3,r4,r3
 4006c30:	110000c3 	ldbu	r4,3(r2)
 4006c34:	2008943a 	slli	r4,r4,16
 4006c38:	20c6b03a 	or	r3,r4,r3
 4006c3c:	10800103 	ldbu	r2,4(r2)
 4006c40:	1004963a 	slli	r2,r2,24
 4006c44:	10c4b03a 	or	r2,r2,r3
 4006c48:	1080000b 	ldhu	r2,0(r2)
 4006c4c:	10bfffcc 	andi	r2,r2,65535
 4006c50:	e0fffc17 	ldw	r3,-16(fp)
 4006c54:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
 4006c58:	e0bffc17 	ldw	r2,-16(fp)
 4006c5c:	10c00117 	ldw	r3,4(r2)
 4006c60:	e0bffc17 	ldw	r2,-16(fp)
 4006c64:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
 4006c68:	e0bffc17 	ldw	r2,-16(fp)
 4006c6c:	00c00084 	movi	r3,2
 4006c70:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
 4006c74:	e0bffc17 	ldw	r2,-16(fp)
 4006c78:	10800417 	ldw	r2,16(r2)
 4006c7c:	e0fffc17 	ldw	r3,-16(fp)
 4006c80:	18c00343 	ldbu	r3,13(r3)
 4006c84:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
 4006c88:	e0bffc17 	ldw	r2,-16(fp)
 4006c8c:	10c00504 	addi	r3,r2,20
 4006c90:	e0bffc17 	ldw	r2,-16(fp)
 4006c94:	10800417 	ldw	r2,16(r2)
 4006c98:	100b883a 	mov	r5,r2
 4006c9c:	1809883a 	mov	r4,r3
 4006ca0:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
 4006ca4:	e0bffc17 	ldw	r2,-16(fp)
 4006ca8:	00c000c4 	movi	r3,3
 4006cac:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
 4006cb0:	e0bffc17 	ldw	r2,-16(fp)
 4006cb4:	10800217 	ldw	r2,8(r2)
 4006cb8:	10001e26 	beq	r2,zero,4006d34 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
 4006cbc:	e0bffc17 	ldw	r2,-16(fp)
 4006cc0:	10800504 	addi	r2,r2,20
 4006cc4:	e1bffe17 	ldw	r6,-8(fp)
 4006cc8:	e17ffd17 	ldw	r5,-12(fp)
 4006ccc:	1009883a 	mov	r4,r2
 4006cd0:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4006cd4:	1080005c 	xori	r2,r2,1
 4006cd8:	10803fcc 	andi	r2,r2,255
 4006cdc:	10000226 	beq	r2,zero,4006ce8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
 4006ce0:	0005883a 	mov	r2,zero
 4006ce4:	00001606 	br	4006d40 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
 4006ce8:	e0bfff17 	ldw	r2,-4(fp)
 4006cec:	10000b26 	beq	r2,zero,4006d1c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
 4006cf0:	e0bffc17 	ldw	r2,-16(fp)
 4006cf4:	11000417 	ldw	r4,16(r2)
 4006cf8:	e0bffc17 	ldw	r2,-16(fp)
 4006cfc:	10c00117 	ldw	r3,4(r2)
 4006d00:	e0bffc17 	ldw	r2,-16(fp)
 4006d04:	10800217 	ldw	r2,8(r2)
 4006d08:	1887c83a 	sub	r3,r3,r2
 4006d0c:	e0bfff17 	ldw	r2,-4(fp)
 4006d10:	e1800217 	ldw	r6,8(fp)
 4006d14:	180b883a 	mov	r5,r3
 4006d18:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
 4006d1c:	e0bffc17 	ldw	r2,-16(fp)
 4006d20:	10800217 	ldw	r2,8(r2)
 4006d24:	10ffffc4 	addi	r3,r2,-1
 4006d28:	e0bffc17 	ldw	r2,-16(fp)
 4006d2c:	10c00215 	stw	r3,8(r2)
 4006d30:	003fdf06 	br	4006cb0 <__alt_mem_onchip_memory2_0+0xfc005a10>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
 4006d34:	e0bffc17 	ldw	r2,-16(fp)
 4006d38:	10000005 	stb	zero,0(r2)
        }
        return true;
 4006d3c:	00800044 	movi	r2,1
}
 4006d40:	e037883a 	mov	sp,fp
 4006d44:	dfc00117 	ldw	ra,4(sp)
 4006d48:	df000017 	ldw	fp,0(sp)
 4006d4c:	dec00204 	addi	sp,sp,8
 4006d50:	f800283a 	ret

04006d54 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
 4006d54:	defffb04 	addi	sp,sp,-20
 4006d58:	dfc00415 	stw	ra,16(sp)
 4006d5c:	df000315 	stw	fp,12(sp)
 4006d60:	df000304 	addi	fp,sp,12
 4006d64:	e13ffe15 	stw	r4,-8(fp)
 4006d68:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
 4006d6c:	e0bffe17 	ldw	r2,-8(fp)
 4006d70:	1009883a 	mov	r4,r2
 4006d74:	40055d80 	call	40055d8 <_ZN15USBDeviceConfigC1Ev>
 4006d78:	e0bffe17 	ldw	r2,-8(fp)
 4006d7c:	10800104 	addi	r2,r2,4
 4006d80:	1009883a 	mov	r4,r2
 4006d84:	4008cf00 	call	4008cf0 <_ZN21UsbMidiConfigXtracterC1Ev>
 4006d88:	008100b4 	movhi	r2,1026
 4006d8c:	108bff04 	addi	r2,r2,12284
 4006d90:	e0fffe17 	ldw	r3,-8(fp)
 4006d94:	18800015 	stw	r2,0(r3)
 4006d98:	008100b4 	movhi	r2,1026
 4006d9c:	108c0b04 	addi	r2,r2,12332
 4006da0:	e0fffe17 	ldw	r3,-8(fp)
 4006da4:	18800115 	stw	r2,4(r3)
 4006da8:	e0bffe17 	ldw	r2,-8(fp)
 4006dac:	e0ffff17 	ldw	r3,-4(fp)
 4006db0:	10c00215 	stw	r3,8(r2)
 4006db4:	e0bffe17 	ldw	r2,-8(fp)
 4006db8:	10000305 	stb	zero,12(r2)
 4006dbc:	e0bffe17 	ldw	r2,-8(fp)
 4006dc0:	10000345 	stb	zero,13(r2)
 4006dc4:	e0bffe17 	ldw	r2,-8(fp)
 4006dc8:	10001705 	stb	zero,92(r2)
 4006dcc:	e0bffe17 	ldw	r2,-8(fp)
 4006dd0:	10001815 	stw	zero,96(r2)
 4006dd4:	e0bffe17 	ldw	r2,-8(fp)
 4006dd8:	10001915 	stw	zero,100(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
 4006ddc:	e03ffd05 	stb	zero,-12(fp)
 4006de0:	e0bffd03 	ldbu	r2,-12(fp)
 4006de4:	108000e8 	cmpgeui	r2,r2,3
 4006de8:	10002d1e 	bne	r2,zero,4006ea0 <_ZN9USBH_MIDIC1EP3USB+0x14c>
                epInfo[i].epAddr      = 0;
 4006dec:	e0fffd03 	ldbu	r3,-12(fp)
 4006df0:	e13ffe17 	ldw	r4,-8(fp)
 4006df4:	1805883a 	mov	r2,r3
 4006df8:	1085883a 	add	r2,r2,r2
 4006dfc:	10c5883a 	add	r2,r2,r3
 4006e00:	2085883a 	add	r2,r4,r2
 4006e04:	108004c4 	addi	r2,r2,19
 4006e08:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
 4006e0c:	e13ffd03 	ldbu	r4,-12(fp)
 4006e10:	e0bffd03 	ldbu	r2,-12(fp)
 4006e14:	10000226 	beq	r2,zero,4006e20 <_ZN9USBH_MIDIC1EP3USB+0xcc>
 4006e18:	0007883a 	mov	r3,zero
 4006e1c:	00000106 	br	4006e24 <_ZN9USBH_MIDIC1EP3USB+0xd0>
 4006e20:	00c00204 	movi	r3,8
 4006e24:	e17ffe17 	ldw	r5,-8(fp)
 4006e28:	2005883a 	mov	r2,r4
 4006e2c:	1085883a 	add	r2,r2,r2
 4006e30:	1105883a 	add	r2,r2,r4
 4006e34:	2885883a 	add	r2,r5,r2
 4006e38:	10800504 	addi	r2,r2,20
 4006e3c:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 4006e40:	e13ffd03 	ldbu	r4,-12(fp)
 4006e44:	e0bffd03 	ldbu	r2,-12(fp)
 4006e48:	10000226 	beq	r2,zero,4006e54 <_ZN9USBH_MIDIC1EP3USB+0x100>
 4006e4c:	00c00044 	movi	r3,1
 4006e50:	00000106 	br	4006e58 <_ZN9USBH_MIDIC1EP3USB+0x104>
 4006e54:	00c003c4 	movi	r3,15
 4006e58:	e17ffe17 	ldw	r5,-8(fp)
 4006e5c:	2005883a 	mov	r2,r4
 4006e60:	1085883a 	add	r2,r2,r2
 4006e64:	1105883a 	add	r2,r2,r4
 4006e68:	2885883a 	add	r2,r5,r2
 4006e6c:	10800404 	addi	r2,r2,16
 4006e70:	18c7883a 	add	r3,r3,r3
 4006e74:	18cb883a 	add	r5,r3,r3
 4006e78:	10c00143 	ldbu	r3,5(r2)
 4006e7c:	18c000cc 	andi	r3,r3,3
 4006e80:	1809883a 	mov	r4,r3
 4006e84:	2807883a 	mov	r3,r5
 4006e88:	20c6b03a 	or	r3,r4,r3
 4006e8c:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
 4006e90:	e0bffd03 	ldbu	r2,-12(fp)
 4006e94:	10800044 	addi	r2,r2,1
 4006e98:	e0bffd05 	stb	r2,-12(fp)
 4006e9c:	003fd006 	br	4006de0 <__alt_mem_onchip_memory2_0+0xfc005b40>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
 4006ea0:	e0bffe17 	ldw	r2,-8(fp)
 4006ea4:	10800217 	ldw	r2,8(r2)
 4006ea8:	10000626 	beq	r2,zero,4006ec4 <_ZN9USBH_MIDIC1EP3USB+0x170>
                pUsb->RegisterDeviceClass(this);
 4006eac:	e0bffe17 	ldw	r2,-8(fp)
 4006eb0:	10800217 	ldw	r2,8(r2)
 4006eb4:	e0fffe17 	ldw	r3,-8(fp)
 4006eb8:	180b883a 	mov	r5,r3
 4006ebc:	1009883a 	mov	r4,r2
 4006ec0:	400538c0 	call	400538c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
 4006ec4:	0001883a 	nop
 4006ec8:	e037883a 	mov	sp,fp
 4006ecc:	dfc00117 	ldw	ra,4(sp)
 4006ed0:	df000017 	ldw	fp,0(sp)
 4006ed4:	dec00204 	addi	sp,sp,8
 4006ed8:	f800283a 	ret

04006edc <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
 4006edc:	deffe004 	addi	sp,sp,-128
 4006ee0:	dfc01f15 	stw	ra,124(sp)
 4006ee4:	df001e15 	stw	fp,120(sp)
 4006ee8:	df001e04 	addi	fp,sp,120
 4006eec:	e13ffc15 	stw	r4,-16(fp)
 4006ef0:	2809883a 	mov	r4,r5
 4006ef4:	3007883a 	mov	r3,r6
 4006ef8:	3805883a 	mov	r2,r7
 4006efc:	e13ffd05 	stb	r4,-12(fp)
 4006f00:	e0fffe05 	stb	r3,-8(fp)
 4006f04:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 4006f08:	e0bfe944 	addi	r2,fp,-91
 4006f0c:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
 4006f10:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
 4006f14:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
 4006f18:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
 4006f1c:	00800044 	movi	r2,1
 4006f20:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
 4006f24:	00800044 	movi	r2,1
 4006f28:	e0bfe3c5 	stb	r2,-113(fp)
 4006f2c:	e0bfe3c3 	ldbu	r2,-113(fp)
 4006f30:	108000e8 	cmpgeui	r2,r2,3
 4006f34:	10001a1e 	bne	r2,zero,4006fa0 <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
 4006f38:	e0ffe3c3 	ldbu	r3,-113(fp)
 4006f3c:	e13ffc17 	ldw	r4,-16(fp)
 4006f40:	1805883a 	mov	r2,r3
 4006f44:	1085883a 	add	r2,r2,r2
 4006f48:	10c5883a 	add	r2,r2,r3
 4006f4c:	2085883a 	add	r2,r4,r2
 4006f50:	10800404 	addi	r2,r2,16
 4006f54:	11000143 	ldbu	r4,5(r2)
 4006f58:	00ffff84 	movi	r3,-2
 4006f5c:	20c6703a 	and	r3,r4,r3
 4006f60:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
 4006f64:	e0ffe3c3 	ldbu	r3,-113(fp)
 4006f68:	e13ffc17 	ldw	r4,-16(fp)
 4006f6c:	1805883a 	mov	r2,r3
 4006f70:	1085883a 	add	r2,r2,r2
 4006f74:	10c5883a 	add	r2,r2,r3
 4006f78:	2085883a 	add	r2,r4,r2
 4006f7c:	10800404 	addi	r2,r2,16
 4006f80:	11000143 	ldbu	r4,5(r2)
 4006f84:	00ffff44 	movi	r3,-3
 4006f88:	20c6703a 	and	r3,r4,r3
 4006f8c:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
 4006f90:	e0bfe3c3 	ldbu	r2,-113(fp)
 4006f94:	10800044 	addi	r2,r2,1
 4006f98:	e0bfe3c5 	stb	r2,-113(fp)
 4006f9c:	003fe306 	br	4006f2c <__alt_mem_onchip_memory2_0+0xfc005c8c>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
 4006fa0:	e0bffc17 	ldw	r2,-16(fp)
 4006fa4:	10800217 	ldw	r2,8(r2)
 4006fa8:	1009883a 	mov	r4,r2
 4006fac:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 4006fb0:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
 4006fb4:	e0bffc17 	ldw	r2,-16(fp)
 4006fb8:	10800303 	ldbu	r2,12(r2)
 4006fbc:	10803fcc 	andi	r2,r2,255
 4006fc0:	10000226 	beq	r2,zero,4006fcc <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 4006fc4:	00bff644 	movi	r2,-39
 4006fc8:	0001c706 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
 4006fcc:	e0bfe817 	ldw	r2,-96(fp)
 4006fd0:	10800017 	ldw	r2,0(r2)
 4006fd4:	10800017 	ldw	r2,0(r2)
 4006fd8:	e0fffc17 	ldw	r3,-16(fp)
 4006fdc:	18c00303 	ldbu	r3,12(r3)
 4006fe0:	18c03fcc 	andi	r3,r3,255
 4006fe4:	180b883a 	mov	r5,r3
 4006fe8:	e13fe817 	ldw	r4,-96(fp)
 4006fec:	103ee83a 	callr	r2
 4006ff0:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
 4006ff4:	e0bfe617 	ldw	r2,-104(fp)
 4006ff8:	1000021e 	bne	r2,zero,4007004 <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4006ffc:	00bff584 	movi	r2,-42
 4007000:	0001b906 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
 4007004:	e0bfe617 	ldw	r2,-104(fp)
 4007008:	10c00003 	ldbu	r3,0(r2)
 400700c:	11000043 	ldbu	r4,1(r2)
 4007010:	2008923a 	slli	r4,r4,8
 4007014:	20c6b03a 	or	r3,r4,r3
 4007018:	11000083 	ldbu	r4,2(r2)
 400701c:	2008943a 	slli	r4,r4,16
 4007020:	20c6b03a 	or	r3,r4,r3
 4007024:	108000c3 	ldbu	r2,3(r2)
 4007028:	1004963a 	slli	r2,r2,24
 400702c:	10c4b03a 	or	r2,r2,r3
 4007030:	1000021e 	bne	r2,zero,400703c <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
 4007034:	00bff5c4 	movi	r2,-41
 4007038:	0001ab06 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 400703c:	e0bfe617 	ldw	r2,-104(fp)
 4007040:	10c00003 	ldbu	r3,0(r2)
 4007044:	11000043 	ldbu	r4,1(r2)
 4007048:	2008923a 	slli	r4,r4,8
 400704c:	20c6b03a 	or	r3,r4,r3
 4007050:	11000083 	ldbu	r4,2(r2)
 4007054:	2008943a 	slli	r4,r4,16
 4007058:	20c6b03a 	or	r3,r4,r3
 400705c:	108000c3 	ldbu	r2,3(r2)
 4007060:	1004963a 	slli	r2,r2,24
 4007064:	10c4b03a 	or	r2,r2,r3
 4007068:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
 400706c:	e0bffc17 	ldw	r2,-16(fp)
 4007070:	10c004c4 	addi	r3,r2,19
 4007074:	e0bfe617 	ldw	r2,-104(fp)
 4007078:	19803fcc 	andi	r6,r3,255
 400707c:	11000003 	ldbu	r4,0(r2)
 4007080:	2008703a 	and	r4,r4,zero
 4007084:	200b883a 	mov	r5,r4
 4007088:	3009883a 	mov	r4,r6
 400708c:	2908b03a 	or	r4,r5,r4
 4007090:	11000005 	stb	r4,0(r2)
 4007094:	1808d23a 	srli	r4,r3,8
 4007098:	21803fcc 	andi	r6,r4,255
 400709c:	11000043 	ldbu	r4,1(r2)
 40070a0:	2008703a 	and	r4,r4,zero
 40070a4:	200b883a 	mov	r5,r4
 40070a8:	3009883a 	mov	r4,r6
 40070ac:	2908b03a 	or	r4,r5,r4
 40070b0:	11000045 	stb	r4,1(r2)
 40070b4:	1808d43a 	srli	r4,r3,16
 40070b8:	21803fcc 	andi	r6,r4,255
 40070bc:	11000083 	ldbu	r4,2(r2)
 40070c0:	2008703a 	and	r4,r4,zero
 40070c4:	200b883a 	mov	r5,r4
 40070c8:	3009883a 	mov	r4,r6
 40070cc:	2908b03a 	or	r4,r5,r4
 40070d0:	11000085 	stb	r4,2(r2)
 40070d4:	180ad63a 	srli	r5,r3,24
 40070d8:	10c000c3 	ldbu	r3,3(r2)
 40070dc:	1806703a 	and	r3,r3,zero
 40070e0:	1809883a 	mov	r4,r3
 40070e4:	2807883a 	mov	r3,r5
 40070e8:	20c6b03a 	or	r3,r4,r3
 40070ec:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
 40070f0:	e0bfe617 	ldw	r2,-104(fp)
 40070f4:	e0ffff03 	ldbu	r3,-4(fp)
 40070f8:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
 40070fc:	e0bffc17 	ldw	r2,-16(fp)
 4007100:	10c00217 	ldw	r3,8(r2)
 4007104:	e0bfe944 	addi	r2,fp,-91
 4007108:	d8800015 	stw	r2,0(sp)
 400710c:	01c00204 	movi	r7,8
 4007110:	000d883a 	mov	r6,zero
 4007114:	000b883a 	mov	r5,zero
 4007118:	1809883a 	mov	r4,r3
 400711c:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 4007120:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 4007124:	e0bfe617 	ldw	r2,-104(fp)
 4007128:	e0ffe717 	ldw	r3,-100(fp)
 400712c:	19403fcc 	andi	r5,r3,255
 4007130:	10c00003 	ldbu	r3,0(r2)
 4007134:	1806703a 	and	r3,r3,zero
 4007138:	1809883a 	mov	r4,r3
 400713c:	2807883a 	mov	r3,r5
 4007140:	20c6b03a 	or	r3,r4,r3
 4007144:	10c00005 	stb	r3,0(r2)
 4007148:	e0ffe717 	ldw	r3,-100(fp)
 400714c:	1806d23a 	srli	r3,r3,8
 4007150:	19403fcc 	andi	r5,r3,255
 4007154:	10c00043 	ldbu	r3,1(r2)
 4007158:	1806703a 	and	r3,r3,zero
 400715c:	1809883a 	mov	r4,r3
 4007160:	2807883a 	mov	r3,r5
 4007164:	20c6b03a 	or	r3,r4,r3
 4007168:	10c00045 	stb	r3,1(r2)
 400716c:	e0ffe717 	ldw	r3,-100(fp)
 4007170:	1806d43a 	srli	r3,r3,16
 4007174:	19403fcc 	andi	r5,r3,255
 4007178:	10c00083 	ldbu	r3,2(r2)
 400717c:	1806703a 	and	r3,r3,zero
 4007180:	1809883a 	mov	r4,r3
 4007184:	2807883a 	mov	r3,r5
 4007188:	20c6b03a 	or	r3,r4,r3
 400718c:	10c00085 	stb	r3,2(r2)
 4007190:	e0ffe717 	ldw	r3,-100(fp)
 4007194:	180ad63a 	srli	r5,r3,24
 4007198:	10c000c3 	ldbu	r3,3(r2)
 400719c:	1806703a 	and	r3,r3,zero
 40071a0:	1809883a 	mov	r4,r3
 40071a4:	2807883a 	mov	r3,r5
 40071a8:	20c6b03a 	or	r3,r4,r3
 40071ac:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
 40071b0:	e0bfe303 	ldbu	r2,-116(fp)
 40071b4:	10013a1e 	bne	r2,zero,40076a0 <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
 40071b8:	e0bfe817 	ldw	r2,-96(fp)
 40071bc:	10800017 	ldw	r2,0(r2)
 40071c0:	10800104 	addi	r2,r2,4
 40071c4:	10800017 	ldw	r2,0(r2)
 40071c8:	e0fffd03 	ldbu	r3,-12(fp)
 40071cc:	e13ffe03 	ldbu	r4,-8(fp)
 40071d0:	200f883a 	mov	r7,r4
 40071d4:	000d883a 	mov	r6,zero
 40071d8:	180b883a 	mov	r5,r3
 40071dc:	e13fe817 	ldw	r4,-96(fp)
 40071e0:	103ee83a 	callr	r2
 40071e4:	1007883a 	mov	r3,r2
 40071e8:	e0bffc17 	ldw	r2,-16(fp)
 40071ec:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
 40071f0:	e0bffc17 	ldw	r2,-16(fp)
 40071f4:	10800303 	ldbu	r2,12(r2)
 40071f8:	10803fcc 	andi	r2,r2,255
 40071fc:	1000021e 	bne	r2,zero,4007208 <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 4007200:	00bff504 	movi	r2,-44
 4007204:	00013806 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
 4007208:	e0bfe517 	ldw	r2,-108(fp)
 400720c:	10c001c3 	ldbu	r3,7(r2)
 4007210:	e0bffc17 	ldw	r2,-16(fp)
 4007214:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
 4007218:	e0bffc17 	ldw	r2,-16(fp)
 400721c:	10c00217 	ldw	r3,8(r2)
 4007220:	e0bffc17 	ldw	r2,-16(fp)
 4007224:	10800303 	ldbu	r2,12(r2)
 4007228:	10803fcc 	andi	r2,r2,255
 400722c:	100f883a 	mov	r7,r2
 4007230:	000d883a 	mov	r6,zero
 4007234:	000b883a 	mov	r5,zero
 4007238:	1809883a 	mov	r4,r3
 400723c:	40032500 	call	4003250 <_ZN3USB7setAddrEhhh>
 4007240:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
 4007244:	e0bfe303 	ldbu	r2,-116(fp)
 4007248:	10001026 	beq	r2,zero,400728c <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
 400724c:	e0bfe617 	ldw	r2,-104(fp)
 4007250:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
 4007254:	e0bfe817 	ldw	r2,-96(fp)
 4007258:	10800017 	ldw	r2,0(r2)
 400725c:	10800204 	addi	r2,r2,8
 4007260:	10800017 	ldw	r2,0(r2)
 4007264:	e0fffc17 	ldw	r3,-16(fp)
 4007268:	18c00303 	ldbu	r3,12(r3)
 400726c:	18c03fcc 	andi	r3,r3,255
 4007270:	180b883a 	mov	r5,r3
 4007274:	e13fe817 	ldw	r4,-96(fp)
 4007278:	103ee83a 	callr	r2
                bAddress = 0;
 400727c:	e0bffc17 	ldw	r2,-16(fp)
 4007280:	10000305 	stb	zero,12(r2)
                return rcode;
 4007284:	e0bfe303 	ldbu	r2,-116(fp)
 4007288:	00011706 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
 400728c:	e0bffc17 	ldw	r2,-16(fp)
 4007290:	10800303 	ldbu	r2,12(r2)
 4007294:	10803fcc 	andi	r2,r2,255
 4007298:	01402004 	movi	r5,128
 400729c:	1009883a 	mov	r4,r2
 40072a0:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
 40072a4:	e0bfe617 	ldw	r2,-104(fp)
 40072a8:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
 40072ac:	e0bfe817 	ldw	r2,-96(fp)
 40072b0:	10800017 	ldw	r2,0(r2)
 40072b4:	10800017 	ldw	r2,0(r2)
 40072b8:	e0fffc17 	ldw	r3,-16(fp)
 40072bc:	18c00303 	ldbu	r3,12(r3)
 40072c0:	18c03fcc 	andi	r3,r3,255
 40072c4:	180b883a 	mov	r5,r3
 40072c8:	e13fe817 	ldw	r4,-96(fp)
 40072cc:	103ee83a 	callr	r2
 40072d0:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
 40072d4:	e0bfe617 	ldw	r2,-104(fp)
 40072d8:	1000021e 	bne	r2,zero,40072e4 <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40072dc:	00bff584 	movi	r2,-42
 40072e0:	00010106 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
 40072e4:	e0bfe617 	ldw	r2,-104(fp)
 40072e8:	e0ffff03 	ldbu	r3,-4(fp)
 40072ec:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
 40072f0:	e0bffc17 	ldw	r2,-16(fp)
 40072f4:	10c00217 	ldw	r3,8(r2)
 40072f8:	e0bffc17 	ldw	r2,-16(fp)
 40072fc:	10800303 	ldbu	r2,12(r2)
 4007300:	11003fcc 	andi	r4,r2,255
 4007304:	00800484 	movi	r2,18
 4007308:	117fffcc 	andi	r5,r2,65535
 400730c:	e0bfe944 	addi	r2,fp,-91
 4007310:	d8800015 	stw	r2,0(sp)
 4007314:	280f883a 	mov	r7,r5
 4007318:	000d883a 	mov	r6,zero
 400731c:	200b883a 	mov	r5,r4
 4007320:	1809883a 	mov	r4,r3
 4007324:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 4007328:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
 400732c:	e0bfe303 	ldbu	r2,-116(fp)
 4007330:	1000dd1e 	bne	r2,zero,40076a8 <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
 4007334:	e0bfe517 	ldw	r2,-108(fp)
 4007338:	10c00203 	ldbu	r3,8(r2)
 400733c:	10800243 	ldbu	r2,9(r2)
 4007340:	1004923a 	slli	r2,r2,8
 4007344:	10c4b03a 	or	r2,r2,r3
 4007348:	1007883a 	mov	r3,r2
 400734c:	e0bffc17 	ldw	r2,-16(fp)
 4007350:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
 4007354:	e0bfe517 	ldw	r2,-108(fp)
 4007358:	10c00283 	ldbu	r3,10(r2)
 400735c:	108002c3 	ldbu	r2,11(r2)
 4007360:	1004923a 	slli	r2,r2,8
 4007364:	10c4b03a 	or	r2,r2,r3
 4007368:	1007883a 	mov	r3,r2
 400736c:	e0bffc17 	ldw	r2,-16(fp)
 4007370:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
 4007374:	e0bfe517 	ldw	r2,-108(fp)
 4007378:	10800443 	ldbu	r2,17(r2)
 400737c:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
 4007380:	e0bffc17 	ldw	r2,-16(fp)
 4007384:	10c00217 	ldw	r3,8(r2)
 4007388:	e0bffc17 	ldw	r2,-16(fp)
 400738c:	10800303 	ldbu	r2,12(r2)
 4007390:	11003fcc 	andi	r4,r2,255
 4007394:	e0bffc17 	ldw	r2,-16(fp)
 4007398:	108004c4 	addi	r2,r2,19
 400739c:	100f883a 	mov	r7,r2
 40073a0:	01800044 	movi	r6,1
 40073a4:	200b883a 	mov	r5,r4
 40073a8:	1809883a 	mov	r4,r3
 40073ac:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 40073b0:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
 40073b4:	e0bfe303 	ldbu	r2,-116(fp)
 40073b8:	1000bd1e 	bne	r2,zero,40076b0 <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
 40073bc:	e0bffc17 	ldw	r2,-16(fp)
 40073c0:	1080040b 	ldhu	r2,16(r2)
 40073c4:	10bfffcc 	andi	r2,r2,65535
 40073c8:	01402004 	movi	r5,128
 40073cc:	1009883a 	mov	r4,r2
 40073d0:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
 40073d4:	e0bffc17 	ldw	r2,-16(fp)
 40073d8:	1080038b 	ldhu	r2,14(r2)
 40073dc:	10bfffcc 	andi	r2,r2,65535
 40073e0:	01402004 	movi	r5,128
 40073e4:	1009883a 	mov	r4,r2
 40073e8:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
 40073ec:	e0bfe903 	ldbu	r2,-92(fp)
 40073f0:	01402004 	movi	r5,128
 40073f4:	1009883a 	mov	r4,r2
 40073f8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
 40073fc:	e0bffc17 	ldw	r2,-16(fp)
 4007400:	00c000c4 	movi	r3,3
 4007404:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
 4007408:	e13ffc17 	ldw	r4,-16(fp)
 400740c:	400779c0 	call	400779c <_ZN9USBH_MIDI19setupDeviceSpecificEv>
        
        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
 4007410:	e03fe405 	stb	zero,-112(fp)
 4007414:	e0ffe403 	ldbu	r3,-112(fp)
 4007418:	e0bfe903 	ldbu	r2,-92(fp)
 400741c:	18802a2e 	bgeu	r3,r2,40074c8 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
 4007420:	e0bffc17 	ldw	r2,-16(fp)
 4007424:	10c00104 	addi	r3,r2,4
 4007428:	e0bfee04 	addi	r2,fp,-72
 400742c:	01800044 	movi	r6,1
 4007430:	180b883a 	mov	r5,r3
 4007434:	1009883a 	mov	r4,r2
 4007438:	40083000 	call	4008300 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
 400743c:	e0bffc17 	ldw	r2,-16(fp)
 4007440:	10c00217 	ldw	r3,8(r2)
 4007444:	e0bffc17 	ldw	r2,-16(fp)
 4007448:	10800303 	ldbu	r2,12(r2)
 400744c:	11003fcc 	andi	r4,r2,255
 4007450:	e17fe403 	ldbu	r5,-112(fp)
 4007454:	e0bfee04 	addi	r2,fp,-72
 4007458:	d8800015 	stw	r2,0(sp)
 400745c:	280f883a 	mov	r7,r5
 4007460:	000d883a 	mov	r6,zero
 4007464:	200b883a 	mov	r5,r4
 4007468:	1809883a 	mov	r4,r3
 400746c:	40030b00 	call	40030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 4007470:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
 4007474:	e0bfe303 	ldbu	r2,-116(fp)
 4007478:	10008f1e 	bne	r2,zero,40076b8 <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
 400747c:	e0bfee04 	addi	r2,fp,-72
 4007480:	1009883a 	mov	r4,r2
 4007484:	4008c0c0 	call	4008c0c <_ZN14MidiDescParser9getNumEPsEv>
 4007488:	1007883a 	mov	r3,r2
 400748c:	e0bfe383 	ldbu	r2,-114(fp)
 4007490:	10c5883a 	add	r2,r2,r3
 4007494:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
 4007498:	e0bfe383 	ldbu	r2,-114(fp)
 400749c:	108000b0 	cmpltui	r2,r2,2
 40074a0:	1000051e 	bne	r2,zero,40074b8 <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
 40074a4:	e0bfee04 	addi	r2,fp,-72
 40074a8:	1009883a 	mov	r4,r2
 40074ac:	4008be40 	call	4008be4 <_ZN14MidiDescParser12getConfValueEv>
 40074b0:	e0bfe345 	stb	r2,-115(fp)
 40074b4:	00000406 	br	40074c8 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();
        
        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
 40074b8:	e0bfe403 	ldbu	r2,-112(fp)
 40074bc:	10800044 	addi	r2,r2,1
 40074c0:	e0bfe405 	stb	r2,-112(fp)
 40074c4:	003fd306 	br	4007414 <__alt_mem_onchip_memory2_0+0xfc006174>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
 40074c8:	e0bfe383 	ldbu	r2,-114(fp)
 40074cc:	01402004 	movi	r5,128
 40074d0:	1009883a 	mov	r4,r2
 40074d4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
 40074d8:	e0bfe383 	ldbu	r2,-114(fp)
 40074dc:	10800058 	cmpnei	r2,r2,1
 40074e0:	1000321e 	bne	r2,zero,40075ac <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
 40074e4:	e03fe445 	stb	zero,-111(fp)
 40074e8:	e0ffe443 	ldbu	r3,-111(fp)
 40074ec:	e0bfe903 	ldbu	r2,-92(fp)
 40074f0:	18802a2e 	bgeu	r3,r2,400759c <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
 40074f4:	e0bffc17 	ldw	r2,-16(fp)
 40074f8:	10c00104 	addi	r3,r2,4
 40074fc:	e0bfee04 	addi	r2,fp,-72
 4007500:	000d883a 	mov	r6,zero
 4007504:	180b883a 	mov	r5,r3
 4007508:	1009883a 	mov	r4,r2
 400750c:	40083000 	call	4008300 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
 4007510:	e0bffc17 	ldw	r2,-16(fp)
 4007514:	10c00217 	ldw	r3,8(r2)
 4007518:	e0bffc17 	ldw	r2,-16(fp)
 400751c:	10800303 	ldbu	r2,12(r2)
 4007520:	11003fcc 	andi	r4,r2,255
 4007524:	e17fe443 	ldbu	r5,-111(fp)
 4007528:	e0bfee04 	addi	r2,fp,-72
 400752c:	d8800015 	stw	r2,0(sp)
 4007530:	280f883a 	mov	r7,r5
 4007534:	000d883a 	mov	r6,zero
 4007538:	200b883a 	mov	r5,r4
 400753c:	1809883a 	mov	r4,r3
 4007540:	40030b00 	call	40030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 4007544:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
 4007548:	e0bfe303 	ldbu	r2,-116(fp)
 400754c:	10005c1e 	bne	r2,zero,40076c0 <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
 4007550:	e0bfee04 	addi	r2,fp,-72
 4007554:	1009883a 	mov	r4,r2
 4007558:	4008c0c0 	call	4008c0c <_ZN14MidiDescParser9getNumEPsEv>
 400755c:	1007883a 	mov	r3,r2
 4007560:	e0bfe383 	ldbu	r2,-114(fp)
 4007564:	10c5883a 	add	r2,r2,r3
 4007568:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
 400756c:	e0bfe383 	ldbu	r2,-114(fp)
 4007570:	108000b0 	cmpltui	r2,r2,2
 4007574:	1000051e 	bne	r2,zero,400758c <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
 4007578:	e0bfee04 	addi	r2,fp,-72
 400757c:	1009883a 	mov	r4,r2
 4007580:	4008be40 	call	4008be4 <_ZN14MidiDescParser12getConfValueEv>
 4007584:	e0bfe345 	stb	r2,-115(fp)
 4007588:	00000406 	br	400759c <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
 400758c:	e0bfe443 	ldbu	r2,-111(fp)
 4007590:	10800044 	addi	r2,r2,1
 4007594:	e0bfe445 	stb	r2,-111(fp)
 4007598:	003fd306 	br	40074e8 <__alt_mem_onchip_memory2_0+0xfc006248>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
 400759c:	e0bfe383 	ldbu	r2,-114(fp)
 40075a0:	01402004 	movi	r5,128
 40075a4:	1009883a 	mov	r4,r2
 40075a8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
 40075ac:	e0bfe383 	ldbu	r2,-114(fp)
 40075b0:	108000a8 	cmpgeui	r2,r2,2
 40075b4:	1000031e 	bne	r2,zero,40075c4 <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
 40075b8:	00bfffc4 	movi	r2,-1
 40075bc:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
 40075c0:	00004206 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
 40075c4:	e0bffc17 	ldw	r2,-16(fp)
 40075c8:	10c00217 	ldw	r3,8(r2)
 40075cc:	e0bffc17 	ldw	r2,-16(fp)
 40075d0:	10800303 	ldbu	r2,12(r2)
 40075d4:	11003fcc 	andi	r4,r2,255
 40075d8:	e0bffc17 	ldw	r2,-16(fp)
 40075dc:	108004c4 	addi	r2,r2,19
 40075e0:	100f883a 	mov	r7,r2
 40075e4:	018000c4 	movi	r6,3
 40075e8:	200b883a 	mov	r5,r4
 40075ec:	1809883a 	mov	r4,r3
 40075f0:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 40075f4:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
 40075f8:	e0bfe343 	ldbu	r2,-115(fp)
 40075fc:	01402004 	movi	r5,128
 4007600:	1009883a 	mov	r4,r2
 4007604:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
 4007608:	e0bffc17 	ldw	r2,-16(fp)
 400760c:	10800583 	ldbu	r2,22(r2)
 4007610:	10bfe004 	addi	r2,r2,-128
 4007614:	10803fcc 	andi	r2,r2,255
 4007618:	01402004 	movi	r5,128
 400761c:	1009883a 	mov	r4,r2
 4007620:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
 4007624:	e0bffc17 	ldw	r2,-16(fp)
 4007628:	10800643 	ldbu	r2,25(r2)
 400762c:	10803fcc 	andi	r2,r2,255
 4007630:	01402004 	movi	r5,128
 4007634:	1009883a 	mov	r4,r2
 4007638:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
 400763c:	e0bffc17 	ldw	r2,-16(fp)
 4007640:	10c00217 	ldw	r3,8(r2)
 4007644:	e0bffc17 	ldw	r2,-16(fp)
 4007648:	10800303 	ldbu	r2,12(r2)
 400764c:	10803fcc 	andi	r2,r2,255
 4007650:	e13fe343 	ldbu	r4,-115(fp)
 4007654:	200f883a 	mov	r7,r4
 4007658:	000d883a 	mov	r6,zero
 400765c:	100b883a 	mov	r5,r2
 4007660:	1809883a 	mov	r4,r3
 4007664:	40032e40 	call	40032e4 <_ZN3USB7setConfEhhh>
 4007668:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
 400766c:	e0bfe303 	ldbu	r2,-116(fp)
 4007670:	1000151e 	bne	r2,zero,40076c8 <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        bPollEnable = true;
 4007674:	e0bffc17 	ldw	r2,-16(fp)
 4007678:	00c00044 	movi	r3,1
 400767c:	10c00345 	stb	r3,13(r2)

        if(pFuncOnInit)
 4007680:	e0bffc17 	ldw	r2,-16(fp)
 4007684:	10801817 	ldw	r2,96(r2)
 4007688:	10000326 	beq	r2,zero,4007698 <_ZN9USBH_MIDI4InitEhhb+0x7bc>
                pFuncOnInit(); // Call the user function
 400768c:	e0bffc17 	ldw	r2,-16(fp)
 4007690:	10801817 	ldw	r2,96(r2)
 4007694:	103ee83a 	callr	r2

        USBTRACE("Init done.\r\n");
        return 0;
 4007698:	0005883a 	mov	r2,zero
 400769c:	00001206 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
 40076a0:	0001883a 	nop
 40076a4:	00000906 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
 40076a8:	0001883a 	nop
 40076ac:	00000706 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
 40076b0:	0001883a 	nop
 40076b4:	00000506 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
 40076b8:	0001883a 	nop
 40076bc:	00000306 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
 40076c0:	0001883a 	nop
 40076c4:	00000106 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
 40076c8:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
 40076cc:	e0bffc17 	ldw	r2,-16(fp)
 40076d0:	10800017 	ldw	r2,0(r2)
 40076d4:	10800204 	addi	r2,r2,8
 40076d8:	10800017 	ldw	r2,0(r2)
 40076dc:	e13ffc17 	ldw	r4,-16(fp)
 40076e0:	103ee83a 	callr	r2
        return rcode;
 40076e4:	e0bfe303 	ldbu	r2,-116(fp)
}
 40076e8:	e037883a 	mov	sp,fp
 40076ec:	dfc00117 	ldw	ra,4(sp)
 40076f0:	df000017 	ldw	fp,0(sp)
 40076f4:	dec00204 	addi	sp,sp,8
 40076f8:	f800283a 	ret

040076fc <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
 40076fc:	defffd04 	addi	sp,sp,-12
 4007700:	dfc00215 	stw	ra,8(sp)
 4007704:	df000115 	stw	fp,4(sp)
 4007708:	df000104 	addi	fp,sp,4
 400770c:	e13fff15 	stw	r4,-4(fp)
        if(pFuncOnRelease && bPollEnable)
 4007710:	e0bfff17 	ldw	r2,-4(fp)
 4007714:	10801917 	ldw	r2,100(r2)
 4007718:	10000726 	beq	r2,zero,4007738 <_ZN9USBH_MIDI7ReleaseEv+0x3c>
 400771c:	e0bfff17 	ldw	r2,-4(fp)
 4007720:	10800343 	ldbu	r2,13(r2)
 4007724:	10803fcc 	andi	r2,r2,255
 4007728:	10000326 	beq	r2,zero,4007738 <_ZN9USBH_MIDI7ReleaseEv+0x3c>
                pFuncOnRelease(); // Call the user function
 400772c:	e0bfff17 	ldw	r2,-4(fp)
 4007730:	10801917 	ldw	r2,100(r2)
 4007734:	103ee83a 	callr	r2

        pUsb->GetAddressPool().FreeAddress(bAddress);
 4007738:	e0bfff17 	ldw	r2,-4(fp)
 400773c:	10800217 	ldw	r2,8(r2)
 4007740:	1009883a 	mov	r4,r2
 4007744:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 4007748:	1009883a 	mov	r4,r2
 400774c:	20800017 	ldw	r2,0(r4)
 4007750:	10800204 	addi	r2,r2,8
 4007754:	10800017 	ldw	r2,0(r2)
 4007758:	e0ffff17 	ldw	r3,-4(fp)
 400775c:	18c00303 	ldbu	r3,12(r3)
 4007760:	18c03fcc 	andi	r3,r3,255
 4007764:	180b883a 	mov	r5,r3
 4007768:	103ee83a 	callr	r2
        bAddress     = 0;
 400776c:	e0bfff17 	ldw	r2,-4(fp)
 4007770:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
 4007774:	e0bfff17 	ldw	r2,-4(fp)
 4007778:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
 400777c:	e0bfff17 	ldw	r2,-4(fp)
 4007780:	10001705 	stb	zero,92(r2)

        return 0;
 4007784:	0005883a 	mov	r2,zero
}
 4007788:	e037883a 	mov	sp,fp
 400778c:	dfc00117 	ldw	ra,4(sp)
 4007790:	df000017 	ldw	fp,0(sp)
 4007794:	dec00204 	addi	sp,sp,8
 4007798:	f800283a 	ret

0400779c <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
 400779c:	defffe04 	addi	sp,sp,-8
 40077a0:	df000115 	stw	fp,4(sp)
 40077a4:	df000104 	addi	fp,sp,4
 40077a8:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
 40077ac:	e0bfff17 	ldw	r2,-4(fp)
 40077b0:	1080040b 	ldhu	r2,16(r2)
 40077b4:	10bfffcc 	andi	r2,r2,65535
 40077b8:	10848d58 	cmpnei	r2,r2,4661
 40077bc:	10004e1e 	bne	r2,zero,40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
                // LaunchPad and LaunchKey endpoint attribute is interrupt 
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
 40077c0:	e0bfff17 	ldw	r2,-4(fp)
 40077c4:	1080038b 	ldhu	r2,14(r2)
 40077c8:	10bfffcc 	andi	r2,r2,65535
 40077cc:	10800820 	cmpeqi	r2,r2,32
 40077d0:	10000f1e 	bne	r2,zero,4007810 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
 40077d4:	e0bfff17 	ldw	r2,-4(fp)
 40077d8:	1080038b 	ldhu	r2,14(r2)
 40077dc:	10bfffcc 	andi	r2,r2,65535
 40077e0:	10800da0 	cmpeqi	r2,r2,54
 40077e4:	10000a1e 	bne	r2,zero,4007810 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
 40077e8:	e0bfff17 	ldw	r2,-4(fp)
 40077ec:	1080038b 	ldhu	r2,14(r2)
 40077f0:	10bfffcc 	andi	r2,r2,65535
 40077f4:	10801460 	cmpeqi	r2,r2,81
 40077f8:	1000051e 	bne	r2,zero,4007810 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
 40077fc:	e0bfff17 	ldw	r2,-4(fp)
 4007800:	1080038b 	ldhu	r2,14(r2)
 4007804:	10bfffcc 	andi	r2,r2,65535
 4007808:	10801a58 	cmpnei	r2,r2,105
 400780c:	1000041e 	bne	r2,zero,4007820 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
 4007810:	e0bfff17 	ldw	r2,-4(fp)
 4007814:	00c00084 	movi	r3,2
 4007818:	10c00485 	stb	r3,18(r2)
                        return;
 400781c:	00003606 	br	40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2, 0x0102,0x113-0x122:MiniMk3, 0x134-0x137:MK3
                if( (0x30 <= pid && pid <= 0x32) || pid == 0x35 || (0x7B <= pid && pid <= 0x7D) 
 4007820:	e0bfff17 	ldw	r2,-4(fp)
 4007824:	1080038b 	ldhu	r2,14(r2)
 4007828:	10bfffcc 	andi	r2,r2,65535
 400782c:	10800c30 	cmpltui	r2,r2,48
 4007830:	1000051e 	bne	r2,zero,4007848 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
 4007834:	e0bfff17 	ldw	r2,-4(fp)
 4007838:	1080038b 	ldhu	r2,14(r2)
 400783c:	10bfffcc 	andi	r2,r2,65535
 4007840:	10800cf0 	cmpltui	r2,r2,51
 4007844:	1000281e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 4007848:	e0bfff17 	ldw	r2,-4(fp)
 400784c:	1080038b 	ldhu	r2,14(r2)
 4007850:	10bfffcc 	andi	r2,r2,65535
 4007854:	10800d60 	cmpeqi	r2,r2,53
 4007858:	1000231e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 400785c:	e0bfff17 	ldw	r2,-4(fp)
 4007860:	1080038b 	ldhu	r2,14(r2)
 4007864:	10bfffcc 	andi	r2,r2,65535
 4007868:	10801ef0 	cmpltui	r2,r2,123
 400786c:	1000051e 	bne	r2,zero,4007884 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
 4007870:	e0bfff17 	ldw	r2,-4(fp)
 4007874:	1080038b 	ldhu	r2,14(r2)
 4007878:	10bfffcc 	andi	r2,r2,65535
 400787c:	10801fb0 	cmpltui	r2,r2,126
 4007880:	1000191e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
                  || pid == 0x102 || (0x113 <= pid && pid <= 0x122) || (0x134 <= pid && pid <= 0x137) ) {
 4007884:	e0bfff17 	ldw	r2,-4(fp)
 4007888:	1080038b 	ldhu	r2,14(r2)
 400788c:	10bfffcc 	andi	r2,r2,65535
 4007890:	108040a0 	cmpeqi	r2,r2,258
 4007894:	1000141e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 4007898:	e0bfff17 	ldw	r2,-4(fp)
 400789c:	1080038b 	ldhu	r2,14(r2)
 40078a0:	10bfffcc 	andi	r2,r2,65535
 40078a4:	108044f0 	cmpltui	r2,r2,275
 40078a8:	1000051e 	bne	r2,zero,40078c0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x124>
 40078ac:	e0bfff17 	ldw	r2,-4(fp)
 40078b0:	1080038b 	ldhu	r2,14(r2)
 40078b4:	10bfffcc 	andi	r2,r2,65535
 40078b8:	108048f0 	cmpltui	r2,r2,291
 40078bc:	10000a1e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 40078c0:	e0bfff17 	ldw	r2,-4(fp)
 40078c4:	1080038b 	ldhu	r2,14(r2)
 40078c8:	10bfffcc 	andi	r2,r2,65535
 40078cc:	10804d30 	cmpltui	r2,r2,308
 40078d0:	1000091e 	bne	r2,zero,40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
 40078d4:	e0bfff17 	ldw	r2,-4(fp)
 40078d8:	1080038b 	ldhu	r2,14(r2)
 40078dc:	10bfffcc 	andi	r2,r2,65535
 40078e0:	10804e28 	cmpgeui	r2,r2,312
 40078e4:	1000041e 	bne	r2,zero,40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
                        bTransferTypeMask = 2;
 40078e8:	e0bfff17 	ldw	r2,-4(fp)
 40078ec:	00c00084 	movi	r3,2
 40078f0:	10c00485 	stb	r3,18(r2)
                        return;
 40078f4:	0001883a 	nop
                }
        }
}
 40078f8:	e037883a 	mov	sp,fp
 40078fc:	df000017 	ldw	fp,0(sp)
 4007900:	dec00104 	addi	sp,sp,4
 4007904:	f800283a 	ret

04007908 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
 4007908:	defff804 	addi	sp,sp,-32
 400790c:	dfc00715 	stw	ra,28(sp)
 4007910:	df000615 	stw	fp,24(sp)
 4007914:	df000604 	addi	fp,sp,24
 4007918:	e13ffd15 	stw	r4,-12(fp)
 400791c:	e17ffe15 	stw	r5,-8(fp)
 4007920:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
 4007924:	e0bffd17 	ldw	r2,-12(fp)
 4007928:	108005c3 	ldbu	r2,23(r2)
 400792c:	10c03fcc 	andi	r3,r2,255
 4007930:	e0bffe17 	ldw	r2,-8(fp)
 4007934:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
 4007938:	e0bffd17 	ldw	r2,-12(fp)
 400793c:	10c00217 	ldw	r3,8(r2)
 4007940:	e0bffd17 	ldw	r2,-12(fp)
 4007944:	10800303 	ldbu	r2,12(r2)
 4007948:	11003fcc 	andi	r4,r2,255
 400794c:	e0bffd17 	ldw	r2,-12(fp)
 4007950:	10800583 	ldbu	r2,22(r2)
 4007954:	11403fcc 	andi	r5,r2,255
 4007958:	d8000115 	stw	zero,4(sp)
 400795c:	e0bfff17 	ldw	r2,-4(fp)
 4007960:	d8800015 	stw	r2,0(sp)
 4007964:	e1fffe17 	ldw	r7,-8(fp)
 4007968:	280d883a 	mov	r6,r5
 400796c:	200b883a 	mov	r5,r4
 4007970:	1809883a 	mov	r4,r3
 4007974:	40015fc0 	call	40015fc <_ZN3USB10inTransferEhhPtPhh>
 4007978:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
 400797c:	e0bffe17 	ldw	r2,-8(fp)
 4007980:	1080000b 	ldhu	r2,0(r2)
 4007984:	10bfffcc 	andi	r2,r2,65535
 4007988:	10800f28 	cmpgeui	r2,r2,60
 400798c:	10000d1e 	bne	r2,zero,40079c4 <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
 4007990:	e0bffe17 	ldw	r2,-8(fp)
 4007994:	1080000b 	ldhu	r2,0(r2)
 4007998:	10bfffcc 	andi	r2,r2,65535
 400799c:	e0ffff17 	ldw	r3,-4(fp)
 40079a0:	1885883a 	add	r2,r3,r2
 40079a4:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
 40079a8:	e0bffe17 	ldw	r2,-8(fp)
 40079ac:	1080000b 	ldhu	r2,0(r2)
 40079b0:	10bfffcc 	andi	r2,r2,65535
 40079b4:	10800044 	addi	r2,r2,1
 40079b8:	e0ffff17 	ldw	r3,-4(fp)
 40079bc:	1885883a 	add	r2,r3,r2
 40079c0:	10000005 	stb	zero,0(r2)
        }
        return r;
 40079c4:	e0bffc03 	ldbu	r2,-16(fp)
}
 40079c8:	e037883a 	mov	sp,fp
 40079cc:	dfc00117 	ldw	ra,4(sp)
 40079d0:	df000017 	ldw	fp,0(sp)
 40079d4:	dec00204 	addi	sp,sp,8
 40079d8:	f800283a 	ret

040079dc <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
 40079dc:	defff904 	addi	sp,sp,-28
 40079e0:	dfc00615 	stw	ra,24(sp)
 40079e4:	df000515 	stw	fp,20(sp)
 40079e8:	df000504 	addi	fp,sp,20
 40079ec:	e13ffd15 	stw	r4,-12(fp)
 40079f0:	e17ffe15 	stw	r5,-8(fp)
 40079f4:	3005883a 	mov	r2,r6
 40079f8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
 40079fc:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
 4007a00:	e0bffd17 	ldw	r2,-12(fp)
 4007a04:	10800343 	ldbu	r2,13(r2)
 4007a08:	1080005c 	xori	r2,r2,1
 4007a0c:	10803fcc 	andi	r2,r2,255
 4007a10:	10000226 	beq	r2,zero,4007a1c <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
 4007a14:	0005883a 	mov	r2,zero
 4007a18:	00008506 	br	4007c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
 4007a1c:	e0bffd17 	ldw	r2,-12(fp)
 4007a20:	10801703 	ldbu	r2,92(r2)
 4007a24:	10803fcc 	andi	r2,r2,255
 4007a28:	10001826 	beq	r2,zero,4007a8c <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
 4007a2c:	e0bffd17 	ldw	r2,-12(fp)
 4007a30:	10801703 	ldbu	r2,92(r2)
 4007a34:	10803fcc 	andi	r2,r2,255
 4007a38:	10801028 	cmpgeui	r2,r2,64
 4007a3c:	1000131e 	bne	r2,zero,4007a8c <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
 4007a40:	e0bffd17 	ldw	r2,-12(fp)
 4007a44:	10801703 	ldbu	r2,92(r2)
 4007a48:	10803fcc 	andi	r2,r2,255
 4007a4c:	e0fffd17 	ldw	r3,-12(fp)
 4007a50:	1885883a 	add	r2,r3,r2
 4007a54:	10800704 	addi	r2,r2,28
 4007a58:	10800003 	ldbu	r2,0(r2)
 4007a5c:	10803fcc 	andi	r2,r2,255
 4007a60:	10002a1e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007a64:	e0bffd17 	ldw	r2,-12(fp)
 4007a68:	10801703 	ldbu	r2,92(r2)
 4007a6c:	10803fcc 	andi	r2,r2,255
 4007a70:	10800044 	addi	r2,r2,1
 4007a74:	e0fffd17 	ldw	r3,-12(fp)
 4007a78:	1885883a 	add	r2,r3,r2
 4007a7c:	10800704 	addi	r2,r2,28
 4007a80:	10800003 	ldbu	r2,0(r2)
 4007a84:	10803fcc 	andi	r2,r2,255
 4007a88:	1000201e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
 4007a8c:	e0bffd17 	ldw	r2,-12(fp)
 4007a90:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
 4007a94:	e0bffd17 	ldw	r2,-12(fp)
 4007a98:	10c00704 	addi	r3,r2,28
 4007a9c:	e0bffc04 	addi	r2,fp,-16
 4007aa0:	180d883a 	mov	r6,r3
 4007aa4:	100b883a 	mov	r5,r2
 4007aa8:	e13ffd17 	ldw	r4,-12(fp)
 4007aac:	40079080 	call	4007908 <_ZN9USBH_MIDI8RecvDataEPtPh>
 4007ab0:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
 4007ab4:	e0bffb03 	ldbu	r2,-20(fp)
 4007ab8:	10000226 	beq	r2,zero,4007ac4 <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
 4007abc:	0005883a 	mov	r2,zero
 4007ac0:	00005b06 	br	4007c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
 4007ac4:	e0bffd17 	ldw	r2,-12(fp)
 4007ac8:	10800703 	ldbu	r2,28(r2)
 4007acc:	10803fcc 	andi	r2,r2,255
 4007ad0:	10000e1e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007ad4:	e0bffd17 	ldw	r2,-12(fp)
 4007ad8:	10800743 	ldbu	r2,29(r2)
 4007adc:	10803fcc 	andi	r2,r2,255
 4007ae0:	10000a1e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007ae4:	e0bffd17 	ldw	r2,-12(fp)
 4007ae8:	10800783 	ldbu	r2,30(r2)
 4007aec:	10803fcc 	andi	r2,r2,255
 4007af0:	1000061e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007af4:	e0bffd17 	ldw	r2,-12(fp)
 4007af8:	108007c3 	ldbu	r2,31(r2)
 4007afc:	10803fcc 	andi	r2,r2,255
 4007b00:	1000021e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
 4007b04:	0005883a 	mov	r2,zero
 4007b08:	00004906 	br	4007c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
 4007b0c:	e0bffd17 	ldw	r2,-12(fp)
 4007b10:	10801703 	ldbu	r2,92(r2)
 4007b14:	10803fcc 	andi	r2,r2,255
 4007b18:	e0fffd17 	ldw	r3,-12(fp)
 4007b1c:	1885883a 	add	r2,r3,r2
 4007b20:	10800704 	addi	r2,r2,28
 4007b24:	10800003 	ldbu	r2,0(r2)
 4007b28:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
 4007b2c:	e0bfff03 	ldbu	r2,-4(fp)
 4007b30:	10000526 	beq	r2,zero,4007b48 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
 4007b34:	e0bffe17 	ldw	r2,-8(fp)
 4007b38:	10c00044 	addi	r3,r2,1
 4007b3c:	e0fffe15 	stw	r3,-8(fp)
 4007b40:	e0fffb43 	ldbu	r3,-19(fp)
 4007b44:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
 4007b48:	e0bffd17 	ldw	r2,-12(fp)
 4007b4c:	10801703 	ldbu	r2,92(r2)
 4007b50:	10800044 	addi	r2,r2,1
 4007b54:	1007883a 	mov	r3,r2
 4007b58:	e0bffd17 	ldw	r2,-12(fp)
 4007b5c:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
 4007b60:	e0bffe17 	ldw	r2,-8(fp)
 4007b64:	10c00044 	addi	r3,r2,1
 4007b68:	e0fffe15 	stw	r3,-8(fp)
 4007b6c:	e0fffd17 	ldw	r3,-12(fp)
 4007b70:	18c01703 	ldbu	r3,92(r3)
 4007b74:	19000044 	addi	r4,r3,1
 4007b78:	200b883a 	mov	r5,r4
 4007b7c:	e13ffd17 	ldw	r4,-12(fp)
 4007b80:	21401705 	stb	r5,92(r4)
 4007b84:	18c03fcc 	andi	r3,r3,255
 4007b88:	e13ffd17 	ldw	r4,-12(fp)
 4007b8c:	20c7883a 	add	r3,r4,r3
 4007b90:	18c00704 	addi	r3,r3,28
 4007b94:	18c00003 	ldbu	r3,0(r3)
 4007b98:	e0fffb85 	stb	r3,-18(fp)
 4007b9c:	e0fffb83 	ldbu	r3,-18(fp)
 4007ba0:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
 4007ba4:	e0bffe17 	ldw	r2,-8(fp)
 4007ba8:	10c00044 	addi	r3,r2,1
 4007bac:	e0fffe15 	stw	r3,-8(fp)
 4007bb0:	e0fffd17 	ldw	r3,-12(fp)
 4007bb4:	18c01703 	ldbu	r3,92(r3)
 4007bb8:	19000044 	addi	r4,r3,1
 4007bbc:	200b883a 	mov	r5,r4
 4007bc0:	e13ffd17 	ldw	r4,-12(fp)
 4007bc4:	21401705 	stb	r5,92(r4)
 4007bc8:	18c03fcc 	andi	r3,r3,255
 4007bcc:	e13ffd17 	ldw	r4,-12(fp)
 4007bd0:	20c7883a 	add	r3,r4,r3
 4007bd4:	18c00704 	addi	r3,r3,28
 4007bd8:	18c00003 	ldbu	r3,0(r3)
 4007bdc:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
 4007be0:	e0bffe17 	ldw	r2,-8(fp)
 4007be4:	10c00044 	addi	r3,r2,1
 4007be8:	e0fffe15 	stw	r3,-8(fp)
 4007bec:	e0fffd17 	ldw	r3,-12(fp)
 4007bf0:	18c01703 	ldbu	r3,92(r3)
 4007bf4:	19000044 	addi	r4,r3,1
 4007bf8:	200b883a 	mov	r5,r4
 4007bfc:	e13ffd17 	ldw	r4,-12(fp)
 4007c00:	21401705 	stb	r5,92(r4)
 4007c04:	18c03fcc 	andi	r3,r3,255
 4007c08:	e13ffd17 	ldw	r4,-12(fp)
 4007c0c:	20c7883a 	add	r3,r4,r3
 4007c10:	18c00704 	addi	r3,r3,28
 4007c14:	18c00003 	ldbu	r3,0(r3)
 4007c18:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
 4007c1c:	e0bffb43 	ldbu	r2,-19(fp)
 4007c20:	108003cc 	andi	r2,r2,15
 4007c24:	100b883a 	mov	r5,r2
 4007c28:	e13ffd17 	ldw	r4,-12(fp)
 4007c2c:	4008c8c0 	call	4008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
 4007c30:	e037883a 	mov	sp,fp
 4007c34:	dfc00117 	ldw	ra,4(sp)
 4007c38:	df000017 	ldw	fp,0(sp)
 4007c3c:	dec00204 	addi	sp,sp,8
 4007c40:	f800283a 	ret

04007c44 <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
 4007c44:	defff804 	addi	sp,sp,-32
 4007c48:	dfc00715 	stw	ra,28(sp)
 4007c4c:	df000615 	stw	fp,24(sp)
 4007c50:	df000604 	addi	fp,sp,24
 4007c54:	e13ffd15 	stw	r4,-12(fp)
 4007c58:	e17ffe15 	stw	r5,-8(fp)
 4007c5c:	3005883a 	mov	r2,r6
 4007c60:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
 4007c64:	e0bffe17 	ldw	r2,-8(fp)
 4007c68:	10800003 	ldbu	r2,0(r2)
 4007c6c:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
 4007c70:	e0bffb03 	ldbu	r2,-20(fp)
 4007c74:	100b883a 	mov	r5,r2
 4007c78:	e13ffd17 	ldw	r4,-12(fp)
 4007c7c:	4008c340 	call	4008c34 <_ZN9USBH_MIDI17convertStatus2CinEh>
 4007c80:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
 4007c84:	e0bffb03 	ldbu	r2,-20(fp)
 4007c88:	10803c18 	cmpnei	r2,r2,240
 4007c8c:	10000b1e 	bne	r2,zero,4007cbc <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
 4007c90:	e17ffe17 	ldw	r5,-8(fp)
 4007c94:	e13ffd17 	ldw	r4,-12(fp)
 4007c98:	4007e040 	call	4007e04 <_ZN9USBH_MIDI18countSysExDataSizeEPh>
 4007c9c:	10bfffcc 	andi	r2,r2,65535
 4007ca0:	e0ffff03 	ldbu	r3,-4(fp)
 4007ca4:	180f883a 	mov	r7,r3
 4007ca8:	100d883a 	mov	r6,r2
 4007cac:	e17ffe17 	ldw	r5,-8(fp)
 4007cb0:	e13ffd17 	ldw	r4,-12(fp)
 4007cb4:	4007e8c0 	call	4007e8c <_ZN9USBH_MIDI9SendSysExEPhth>
 4007cb8:	00003406 	br	4007d8c <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
 4007cbc:	e0bfff03 	ldbu	r2,-4(fp)
 4007cc0:	1004913a 	slli	r2,r2,4
 4007cc4:	1007883a 	mov	r3,r2
 4007cc8:	e0bffb43 	ldbu	r2,-19(fp)
 4007ccc:	1884b03a 	or	r2,r3,r2
 4007cd0:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
 4007cd4:	e0bffe17 	ldw	r2,-8(fp)
 4007cd8:	10800003 	ldbu	r2,0(r2)
 4007cdc:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
 4007ce0:	e0bffb43 	ldbu	r2,-19(fp)
 4007ce4:	100b883a 	mov	r5,r2
 4007ce8:	e13ffd17 	ldw	r4,-12(fp)
 4007cec:	4008c8c0 	call	4008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
 4007cf0:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
 4007cf4:	e0bffb83 	ldbu	r2,-18(fp)
 4007cf8:	10c000a0 	cmpeqi	r3,r2,2
 4007cfc:	18000c1e 	bne	r3,zero,4007d30 <_ZN9USBH_MIDI8SendDataEPhh+0xec>
 4007d00:	10c000e0 	cmpeqi	r3,r2,3
 4007d04:	1800031e 	bne	r3,zero,4007d14 <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
 4007d08:	10800060 	cmpeqi	r2,r2,1
 4007d0c:	10000d1e 	bne	r2,zero,4007d44 <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
 4007d10:	00000f06 	br	4007d50 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
 4007d14:	e0bffe17 	ldw	r2,-8(fp)
 4007d18:	10800043 	ldbu	r2,1(r2)
 4007d1c:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
 4007d20:	e0bffe17 	ldw	r2,-8(fp)
 4007d24:	10800083 	ldbu	r2,2(r2)
 4007d28:	e0bffc85 	stb	r2,-14(fp)
                break;
 4007d2c:	00000806 	br	4007d50 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
 4007d30:	e0bffe17 	ldw	r2,-8(fp)
 4007d34:	10800043 	ldbu	r2,1(r2)
 4007d38:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
 4007d3c:	e03ffc85 	stb	zero,-14(fp)
                break;
 4007d40:	00000306 	br	4007d50 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
 4007d44:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
 4007d48:	e03ffc85 	stb	zero,-14(fp)
                break;
 4007d4c:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
 4007d50:	e0bffd17 	ldw	r2,-12(fp)
 4007d54:	10c00217 	ldw	r3,8(r2)
 4007d58:	e0bffd17 	ldw	r2,-12(fp)
 4007d5c:	10800303 	ldbu	r2,12(r2)
 4007d60:	11003fcc 	andi	r4,r2,255
 4007d64:	e0bffd17 	ldw	r2,-12(fp)
 4007d68:	10800643 	ldbu	r2,25(r2)
 4007d6c:	11403fcc 	andi	r5,r2,255
 4007d70:	e0bffbc4 	addi	r2,fp,-17
 4007d74:	d8800015 	stw	r2,0(sp)
 4007d78:	01c00104 	movi	r7,4
 4007d7c:	280d883a 	mov	r6,r5
 4007d80:	200b883a 	mov	r5,r4
 4007d84:	1809883a 	mov	r4,r3
 4007d88:	40019900 	call	4001990 <_ZN3USB11outTransferEhhtPh>
}
 4007d8c:	e037883a 	mov	sp,fp
 4007d90:	dfc00117 	ldw	ra,4(sp)
 4007d94:	df000017 	ldw	fp,0(sp)
 4007d98:	dec00204 	addi	sp,sp,8
 4007d9c:	f800283a 	ret

04007da0 <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
 4007da0:	defffb04 	addi	sp,sp,-20
 4007da4:	dfc00415 	stw	ra,16(sp)
 4007da8:	df000315 	stw	fp,12(sp)
 4007dac:	df000304 	addi	fp,sp,12
 4007db0:	e13ffd15 	stw	r4,-12(fp)
 4007db4:	2807883a 	mov	r3,r5
 4007db8:	3005883a 	mov	r2,r6
 4007dbc:	e0fffe05 	stb	r3,-8(fp)
 4007dc0:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
 4007dc4:	e0bfff03 	ldbu	r2,-4(fp)
 4007dc8:	1000051e 	bne	r2,zero,4007de0 <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
 4007dcc:	e0bffe03 	ldbu	r2,-8(fp)
 4007dd0:	100b883a 	mov	r5,r2
 4007dd4:	e13ffd17 	ldw	r4,-12(fp)
 4007dd8:	4008c340 	call	4008c34 <_ZN9USBH_MIDI17convertStatus2CinEh>
 4007ddc:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
 4007de0:	e0bfff03 	ldbu	r2,-4(fp)
 4007de4:	100b883a 	mov	r5,r2
 4007de8:	e13ffd17 	ldw	r4,-12(fp)
 4007dec:	4008c8c0 	call	4008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
 4007df0:	e037883a 	mov	sp,fp
 4007df4:	dfc00117 	ldw	ra,4(sp)
 4007df8:	df000017 	ldw	fp,0(sp)
 4007dfc:	dec00204 	addi	sp,sp,8
 4007e00:	f800283a 	ret

04007e04 <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
 4007e04:	defffc04 	addi	sp,sp,-16
 4007e08:	df000315 	stw	fp,12(sp)
 4007e0c:	df000304 	addi	fp,sp,12
 4007e10:	e13ffe15 	stw	r4,-8(fp)
 4007e14:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
 4007e18:	00800044 	movi	r2,1
 4007e1c:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
 4007e20:	e0bfff17 	ldw	r2,-4(fp)
 4007e24:	10800003 	ldbu	r2,0(r2)
 4007e28:	10803fcc 	andi	r2,r2,255
 4007e2c:	10803c20 	cmpeqi	r2,r2,240
 4007e30:	1000021e 	bne	r2,zero,4007e3c <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
 4007e34:	0005883a 	mov	r2,zero
 4007e38:	00001006 	br	4007e7c <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
 4007e3c:	e0bfff17 	ldw	r2,-4(fp)
 4007e40:	10800003 	ldbu	r2,0(r2)
 4007e44:	10803fcc 	andi	r2,r2,255
 4007e48:	10803de0 	cmpeqi	r2,r2,247
 4007e4c:	10000a1e 	bne	r2,zero,4007e78 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
 4007e50:	e0bfff17 	ldw	r2,-4(fp)
 4007e54:	10800044 	addi	r2,r2,1
 4007e58:	e0bfff15 	stw	r2,-4(fp)
                c++;
 4007e5c:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e60:	10800044 	addi	r2,r2,1
 4007e64:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
 4007e68:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e6c:	10804070 	cmpltui	r2,r2,257
 4007e70:	103ff21e 	bne	r2,zero,4007e3c <__alt_mem_onchip_memory2_0+0xfc006b9c>
                        c = 0;
 4007e74:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
 4007e78:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4007e7c:	e037883a 	mov	sp,fp
 4007e80:	df000017 	ldw	fp,0(sp)
 4007e84:	dec00104 	addi	sp,sp,4
 4007e88:	f800283a 	ret

04007e8c <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
 4007e8c:	deffe704 	addi	sp,sp,-100
 4007e90:	dfc01815 	stw	ra,96(sp)
 4007e94:	df001715 	stw	fp,92(sp)
 4007e98:	df001704 	addi	fp,sp,92
 4007e9c:	e13ffc15 	stw	r4,-16(fp)
 4007ea0:	e17ffd15 	stw	r5,-12(fp)
 4007ea4:	3007883a 	mov	r3,r6
 4007ea8:	3805883a 	mov	r2,r7
 4007eac:	e0fffe0d 	sth	r3,-8(fp)
 4007eb0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
 4007eb4:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
 4007eb8:	e0bffe0b 	ldhu	r2,-8(fp)
 4007ebc:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
 4007ec0:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
 4007ec4:	e0bffc17 	ldw	r2,-16(fp)
 4007ec8:	108005c3 	ldbu	r2,23(r2)
 4007ecc:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
 4007ed0:	e0bffe0b 	ldhu	r2,-8(fp)
 4007ed4:	01402004 	movi	r5,128
 4007ed8:	1009883a 	mov	r4,r2
 4007edc:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
 4007ee0:	e0bfea8b 	ldhu	r2,-86(fp)
 4007ee4:	1000b026 	beq	r2,zero,40081a8 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
 4007ee8:	e0bfeb03 	ldbu	r2,-84(fp)
 4007eec:	e0ffff03 	ldbu	r3,-4(fp)
 4007ef0:	1806913a 	slli	r3,r3,4
 4007ef4:	18c00114 	ori	r3,r3,4
 4007ef8:	1809883a 	mov	r4,r3
 4007efc:	e0ffeb84 	addi	r3,fp,-82
 4007f00:	1885883a 	add	r2,r3,r2
 4007f04:	11000005 	stb	r4,0(r2)

                switch ( n ) {
 4007f08:	e0bfea8b 	ldhu	r2,-86(fp)
 4007f0c:	10c000a0 	cmpeqi	r3,r2,2
 4007f10:	18002a1e 	bne	r3,zero,4007fbc <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
 4007f14:	10c000e0 	cmpeqi	r3,r2,3
 4007f18:	1800521e 	bne	r3,zero,4008064 <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
 4007f1c:	10800060 	cmpeqi	r2,r2,1
 4007f20:	10005826 	beq	r2,zero,4008084 <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
 4007f24:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f28:	10c00044 	addi	r3,r2,1
 4007f2c:	e0ffeb05 	stb	r3,-84(fp)
 4007f30:	10803fcc 	andi	r2,r2,255
 4007f34:	e0ffff03 	ldbu	r3,-4(fp)
 4007f38:	1806913a 	slli	r3,r3,4
 4007f3c:	18c00154 	ori	r3,r3,5
 4007f40:	1809883a 	mov	r4,r3
 4007f44:	e0ffeb84 	addi	r3,fp,-82
 4007f48:	1885883a 	add	r2,r3,r2
 4007f4c:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
 4007f50:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f54:	10c00044 	addi	r3,r2,1
 4007f58:	e0ffeb05 	stb	r3,-84(fp)
 4007f5c:	11003fcc 	andi	r4,r2,255
 4007f60:	e0bffd17 	ldw	r2,-12(fp)
 4007f64:	10c00044 	addi	r3,r2,1
 4007f68:	e0fffd15 	stw	r3,-12(fp)
 4007f6c:	10c00003 	ldbu	r3,0(r2)
 4007f70:	e0bfeb84 	addi	r2,fp,-82
 4007f74:	1105883a 	add	r2,r2,r4
 4007f78:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
 4007f7c:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f80:	10c00044 	addi	r3,r2,1
 4007f84:	e0ffeb05 	stb	r3,-84(fp)
 4007f88:	10803fcc 	andi	r2,r2,255
 4007f8c:	e0ffeb84 	addi	r3,fp,-82
 4007f90:	1885883a 	add	r2,r3,r2
 4007f94:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
 4007f98:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f9c:	10c00044 	addi	r3,r2,1
 4007fa0:	e0ffeb05 	stb	r3,-84(fp)
 4007fa4:	10803fcc 	andi	r2,r2,255
 4007fa8:	e0ffeb84 	addi	r3,fp,-82
 4007fac:	1885883a 	add	r2,r3,r2
 4007fb0:	10000005 	stb	zero,0(r2)
                        n = 0;
 4007fb4:	e03fea8d 	sth	zero,-86(fp)
                        break;
 4007fb8:	00005a06 	br	4008124 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
 4007fbc:	e0bfeb03 	ldbu	r2,-84(fp)
 4007fc0:	10c00044 	addi	r3,r2,1
 4007fc4:	e0ffeb05 	stb	r3,-84(fp)
 4007fc8:	10803fcc 	andi	r2,r2,255
 4007fcc:	e0ffff03 	ldbu	r3,-4(fp)
 4007fd0:	1806913a 	slli	r3,r3,4
 4007fd4:	18c00194 	ori	r3,r3,6
 4007fd8:	1809883a 	mov	r4,r3
 4007fdc:	e0ffeb84 	addi	r3,fp,-82
 4007fe0:	1885883a 	add	r2,r3,r2
 4007fe4:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
 4007fe8:	e0bfeb03 	ldbu	r2,-84(fp)
 4007fec:	10c00044 	addi	r3,r2,1
 4007ff0:	e0ffeb05 	stb	r3,-84(fp)
 4007ff4:	11003fcc 	andi	r4,r2,255
 4007ff8:	e0bffd17 	ldw	r2,-12(fp)
 4007ffc:	10c00044 	addi	r3,r2,1
 4008000:	e0fffd15 	stw	r3,-12(fp)
 4008004:	10c00003 	ldbu	r3,0(r2)
 4008008:	e0bfeb84 	addi	r2,fp,-82
 400800c:	1105883a 	add	r2,r2,r4
 4008010:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
 4008014:	e0bfeb03 	ldbu	r2,-84(fp)
 4008018:	10c00044 	addi	r3,r2,1
 400801c:	e0ffeb05 	stb	r3,-84(fp)
 4008020:	11003fcc 	andi	r4,r2,255
 4008024:	e0bffd17 	ldw	r2,-12(fp)
 4008028:	10c00044 	addi	r3,r2,1
 400802c:	e0fffd15 	stw	r3,-12(fp)
 4008030:	10c00003 	ldbu	r3,0(r2)
 4008034:	e0bfeb84 	addi	r2,fp,-82
 4008038:	1105883a 	add	r2,r2,r4
 400803c:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
 4008040:	e0bfeb03 	ldbu	r2,-84(fp)
 4008044:	10c00044 	addi	r3,r2,1
 4008048:	e0ffeb05 	stb	r3,-84(fp)
 400804c:	10803fcc 	andi	r2,r2,255
 4008050:	e0ffeb84 	addi	r3,fp,-82
 4008054:	1885883a 	add	r2,r3,r2
 4008058:	10000005 	stb	zero,0(r2)
                        n = 0;
 400805c:	e03fea8d 	sth	zero,-86(fp)
                        break;
 4008060:	00003006 	br	4008124 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
 4008064:	e0bfeb03 	ldbu	r2,-84(fp)
 4008068:	e0ffff03 	ldbu	r3,-4(fp)
 400806c:	1806913a 	slli	r3,r3,4
 4008070:	18c001d4 	ori	r3,r3,7
 4008074:	1809883a 	mov	r4,r3
 4008078:	e0ffeb84 	addi	r3,fp,-82
 400807c:	1885883a 	add	r2,r3,r2
 4008080:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
 4008084:	e0bfeb03 	ldbu	r2,-84(fp)
 4008088:	10800044 	addi	r2,r2,1
 400808c:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
 4008090:	e0bfeb03 	ldbu	r2,-84(fp)
 4008094:	10c00044 	addi	r3,r2,1
 4008098:	e0ffeb05 	stb	r3,-84(fp)
 400809c:	11003fcc 	andi	r4,r2,255
 40080a0:	e0bffd17 	ldw	r2,-12(fp)
 40080a4:	10c00044 	addi	r3,r2,1
 40080a8:	e0fffd15 	stw	r3,-12(fp)
 40080ac:	10c00003 	ldbu	r3,0(r2)
 40080b0:	e0bfeb84 	addi	r2,fp,-82
 40080b4:	1105883a 	add	r2,r2,r4
 40080b8:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
 40080bc:	e0bfeb03 	ldbu	r2,-84(fp)
 40080c0:	10c00044 	addi	r3,r2,1
 40080c4:	e0ffeb05 	stb	r3,-84(fp)
 40080c8:	11003fcc 	andi	r4,r2,255
 40080cc:	e0bffd17 	ldw	r2,-12(fp)
 40080d0:	10c00044 	addi	r3,r2,1
 40080d4:	e0fffd15 	stw	r3,-12(fp)
 40080d8:	10c00003 	ldbu	r3,0(r2)
 40080dc:	e0bfeb84 	addi	r2,fp,-82
 40080e0:	1105883a 	add	r2,r2,r4
 40080e4:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
 40080e8:	e0bfeb03 	ldbu	r2,-84(fp)
 40080ec:	10c00044 	addi	r3,r2,1
 40080f0:	e0ffeb05 	stb	r3,-84(fp)
 40080f4:	11003fcc 	andi	r4,r2,255
 40080f8:	e0bffd17 	ldw	r2,-12(fp)
 40080fc:	10c00044 	addi	r3,r2,1
 4008100:	e0fffd15 	stw	r3,-12(fp)
 4008104:	10c00003 	ldbu	r3,0(r2)
 4008108:	e0bfeb84 	addi	r2,fp,-82
 400810c:	1105883a 	add	r2,r2,r4
 4008110:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
 4008114:	e0bfea8b 	ldhu	r2,-86(fp)
 4008118:	10bfff44 	addi	r2,r2,-3
 400811c:	e0bfea8d 	sth	r2,-86(fp)
                        break;
 4008120:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
 4008124:	e0ffeb03 	ldbu	r3,-84(fp)
 4008128:	e0bfeb43 	ldbu	r2,-83(fp)
 400812c:	1880022e 	bgeu	r3,r2,4008138 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
 4008130:	e0bfea8b 	ldhu	r2,-86(fp)
 4008134:	103f6a1e 	bne	r2,zero,4007ee0 <__alt_mem_onchip_memory2_0+0xfc006c40>
                        USBTRACE2(" wptr:\t", wptr);
 4008138:	e0bfeb03 	ldbu	r2,-84(fp)
 400813c:	01402004 	movi	r5,128
 4008140:	1009883a 	mov	r4,r2
 4008144:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
 4008148:	e0bffc17 	ldw	r2,-16(fp)
 400814c:	10c00217 	ldw	r3,8(r2)
 4008150:	e0bffc17 	ldw	r2,-16(fp)
 4008154:	10800303 	ldbu	r2,12(r2)
 4008158:	11003fcc 	andi	r4,r2,255
 400815c:	e0bffc17 	ldw	r2,-16(fp)
 4008160:	10800643 	ldbu	r2,25(r2)
 4008164:	11403fcc 	andi	r5,r2,255
 4008168:	e1bfeb03 	ldbu	r6,-84(fp)
 400816c:	e0bfeb84 	addi	r2,fp,-82
 4008170:	d8800015 	stw	r2,0(sp)
 4008174:	300f883a 	mov	r7,r6
 4008178:	280d883a 	mov	r6,r5
 400817c:	200b883a 	mov	r5,r4
 4008180:	1809883a 	mov	r4,r3
 4008184:	40019900 	call	4001990 <_ZN3USB11outTransferEhhtPh>
 4008188:	e0bfea05 	stb	r2,-88(fp)
 400818c:	e0bfea03 	ldbu	r2,-88(fp)
 4008190:	1004c03a 	cmpne	r2,r2,zero
 4008194:	10803fcc 	andi	r2,r2,255
 4008198:	1000021e 	bne	r2,zero,40081a4 <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
 400819c:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
 40081a0:	003f4f06 	br	4007ee0 <__alt_mem_onchip_memory2_0+0xfc006c40>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
 40081a4:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
 40081a8:	e0bfea03 	ldbu	r2,-88(fp)
}
 40081ac:	e037883a 	mov	sp,fp
 40081b0:	dfc00117 	ldw	ra,4(sp)
 40081b4:	df000017 	ldw	fp,0(sp)
 40081b8:	dec00204 	addi	sp,sp,8
 40081bc:	f800283a 	ret

040081c0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
 40081c0:	defffb04 	addi	sp,sp,-20
 40081c4:	df000415 	stw	fp,16(sp)
 40081c8:	df000404 	addi	fp,sp,16
 40081cc:	e13ffd15 	stw	r4,-12(fp)
 40081d0:	e17ffe15 	stw	r5,-8(fp)
 40081d4:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
 40081d8:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
 40081dc:	e0bffe17 	ldw	r2,-8(fp)
 40081e0:	10800003 	ldbu	r2,0(r2)
 40081e4:	108003cc 	andi	r2,r2,15
 40081e8:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
 40081ec:	e0bffc43 	ldbu	r2,-15(fp)
 40081f0:	1080030c 	andi	r2,r2,12
 40081f4:	10800120 	cmpeqi	r2,r2,4
 40081f8:	1000021e 	bne	r2,zero,4008204 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
 40081fc:	e0bffc03 	ldbu	r2,-16(fp)
 4008200:	00003b06 	br	40082f0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
 4008204:	e0bffc43 	ldbu	r2,-15(fp)
 4008208:	10c00160 	cmpeqi	r3,r2,5
 400820c:	18002e1e 	bne	r3,zero,40082c8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
 4008210:	10c00188 	cmpgei	r3,r2,6
 4008214:	1800031e 	bne	r3,zero,4008224 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
 4008218:	10800120 	cmpeqi	r2,r2,4
 400821c:	1000061e 	bne	r2,zero,4008238 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
 4008220:	00003206 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
 4008224:	10c001a0 	cmpeqi	r3,r2,6
 4008228:	1800181e 	bne	r3,zero,400828c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
 400822c:	108001e0 	cmpeqi	r2,r2,7
 4008230:	1000011e 	bne	r2,zero,4008238 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
 4008234:	00002d06 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
 4008238:	e0bfff17 	ldw	r2,-4(fp)
 400823c:	10c00044 	addi	r3,r2,1
 4008240:	e0ffff15 	stw	r3,-4(fp)
 4008244:	e0fffe17 	ldw	r3,-8(fp)
 4008248:	18c00043 	ldbu	r3,1(r3)
 400824c:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
 4008250:	e0bfff17 	ldw	r2,-4(fp)
 4008254:	10c00044 	addi	r3,r2,1
 4008258:	e0ffff15 	stw	r3,-4(fp)
 400825c:	e0fffe17 	ldw	r3,-8(fp)
 4008260:	18c00083 	ldbu	r3,2(r3)
 4008264:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
 4008268:	e0bfff17 	ldw	r2,-4(fp)
 400826c:	10c00044 	addi	r3,r2,1
 4008270:	e0ffff15 	stw	r3,-4(fp)
 4008274:	e0fffe17 	ldw	r3,-8(fp)
 4008278:	18c000c3 	ldbu	r3,3(r3)
 400827c:	10c00005 	stb	r3,0(r2)
                rc = 3;
 4008280:	008000c4 	movi	r2,3
 4008284:	e0bffc05 	stb	r2,-16(fp)
                break;
 4008288:	00001806 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
 400828c:	e0bfff17 	ldw	r2,-4(fp)
 4008290:	10c00044 	addi	r3,r2,1
 4008294:	e0ffff15 	stw	r3,-4(fp)
 4008298:	e0fffe17 	ldw	r3,-8(fp)
 400829c:	18c00043 	ldbu	r3,1(r3)
 40082a0:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
 40082a4:	e0bfff17 	ldw	r2,-4(fp)
 40082a8:	10c00044 	addi	r3,r2,1
 40082ac:	e0ffff15 	stw	r3,-4(fp)
 40082b0:	e0fffe17 	ldw	r3,-8(fp)
 40082b4:	18c00083 	ldbu	r3,2(r3)
 40082b8:	10c00005 	stb	r3,0(r2)
                rc = 2;
 40082bc:	00800084 	movi	r2,2
 40082c0:	e0bffc05 	stb	r2,-16(fp)
                break;
 40082c4:	00000906 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
 40082c8:	e0bfff17 	ldw	r2,-4(fp)
 40082cc:	10c00044 	addi	r3,r2,1
 40082d0:	e0ffff15 	stw	r3,-4(fp)
 40082d4:	e0fffe17 	ldw	r3,-8(fp)
 40082d8:	18c00043 	ldbu	r3,1(r3)
 40082dc:	10c00005 	stb	r3,0(r2)
                rc = 1;
 40082e0:	00800044 	movi	r2,1
 40082e4:	e0bffc05 	stb	r2,-16(fp)
                break;
 40082e8:	0001883a 	nop
            default:
                break;
        }
        return(rc);
 40082ec:	e0bffc03 	ldbu	r2,-16(fp)
}
 40082f0:	e037883a 	mov	sp,fp
 40082f4:	df000017 	ldw	fp,0(sp)
 40082f8:	dec00104 	addi	sp,sp,4
 40082fc:	f800283a 	ret

04008300 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
 4008300:	defffb04 	addi	sp,sp,-20
 4008304:	dfc00415 	stw	ra,16(sp)
 4008308:	df000315 	stw	fp,12(sp)
 400830c:	df000304 	addi	fp,sp,12
 4008310:	e13ffd15 	stw	r4,-12(fp)
 4008314:	e17ffe15 	stw	r5,-8(fp)
 4008318:	3005883a 	mov	r2,r6
 400831c:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
 4008320:	e0bffd17 	ldw	r2,-12(fp)
 4008324:	1009883a 	mov	r4,r2
 4008328:	40056400 	call	4005640 <_ZN13USBReadParserC1Ev>
 400832c:	008100b4 	movhi	r2,1026
 4008330:	108c0e04 	addi	r2,r2,12344
 4008334:	e0fffd17 	ldw	r3,-12(fp)
 4008338:	18800015 	stw	r2,0(r3)
 400833c:	e0bffd17 	ldw	r2,-12(fp)
 4008340:	e0fffe17 	ldw	r3,-8(fp)
 4008344:	10c00115 	stw	r3,4(r2)
 4008348:	e0bffd17 	ldw	r2,-12(fp)
 400834c:	10800204 	addi	r2,r2,8
 4008350:	1009883a 	mov	r4,r2
 4008354:	4004f300 	call	4004f30 <_ZN16MultiValueBufferC1Ev>
 4008358:	e0bffd17 	ldw	r2,-12(fp)
 400835c:	10800404 	addi	r2,r2,16
 4008360:	1009883a 	mov	r4,r2
 4008364:	4004f900 	call	4004f90 <_ZN20MultiByteValueParserC1Ev>
 4008368:	e0bffd17 	ldw	r2,-12(fp)
 400836c:	10800604 	addi	r2,r2,24
 4008370:	1009883a 	mov	r4,r2
 4008374:	400504c0 	call	400504c <_ZN11ByteSkipperC1Ev>
 4008378:	e0bffd17 	ldw	r2,-12(fp)
 400837c:	10000c05 	stb	zero,48(r2)
 4008380:	e0bffd17 	ldw	r2,-12(fp)
 4008384:	10000c45 	stb	zero,49(r2)
 4008388:	e0bffd17 	ldw	r2,-12(fp)
 400838c:	10000c85 	stb	zero,50(r2)
 4008390:	e0bffd17 	ldw	r2,-12(fp)
 4008394:	10000cc5 	stb	zero,51(r2)
 4008398:	e0bffd17 	ldw	r2,-12(fp)
 400839c:	e0ffff03 	ldbu	r3,-4(fp)
 40083a0:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
 40083a4:	e0bffd17 	ldw	r2,-12(fp)
 40083a8:	10c00804 	addi	r3,r2,32
 40083ac:	e0bffd17 	ldw	r2,-12(fp)
 40083b0:	19803fcc 	andi	r6,r3,255
 40083b4:	11000243 	ldbu	r4,9(r2)
 40083b8:	2008703a 	and	r4,r4,zero
 40083bc:	200b883a 	mov	r5,r4
 40083c0:	3009883a 	mov	r4,r6
 40083c4:	2908b03a 	or	r4,r5,r4
 40083c8:	11000245 	stb	r4,9(r2)
 40083cc:	1808d23a 	srli	r4,r3,8
 40083d0:	21803fcc 	andi	r6,r4,255
 40083d4:	11000283 	ldbu	r4,10(r2)
 40083d8:	2008703a 	and	r4,r4,zero
 40083dc:	200b883a 	mov	r5,r4
 40083e0:	3009883a 	mov	r4,r6
 40083e4:	2908b03a 	or	r4,r5,r4
 40083e8:	11000285 	stb	r4,10(r2)
 40083ec:	1808d43a 	srli	r4,r3,16
 40083f0:	21803fcc 	andi	r6,r4,255
 40083f4:	110002c3 	ldbu	r4,11(r2)
 40083f8:	2008703a 	and	r4,r4,zero
 40083fc:	200b883a 	mov	r5,r4
 4008400:	3009883a 	mov	r4,r6
 4008404:	2908b03a 	or	r4,r5,r4
 4008408:	110002c5 	stb	r4,11(r2)
 400840c:	180ad63a 	srli	r5,r3,24
 4008410:	10c00303 	ldbu	r3,12(r2)
 4008414:	1806703a 	and	r3,r3,zero
 4008418:	1809883a 	mov	r4,r3
 400841c:	2807883a 	mov	r3,r5
 4008420:	20c6b03a 	or	r3,r4,r3
 4008424:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
 4008428:	e0bffd17 	ldw	r2,-12(fp)
 400842c:	10c00404 	addi	r3,r2,16
 4008430:	e0bffd17 	ldw	r2,-12(fp)
 4008434:	10800204 	addi	r2,r2,8
 4008438:	100b883a 	mov	r5,r2
 400843c:	1809883a 	mov	r4,r3
 4008440:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 4008444:	e0bffd17 	ldw	r2,-12(fp)
 4008448:	10c00604 	addi	r3,r2,24
 400844c:	e0bffd17 	ldw	r2,-12(fp)
 4008450:	10800204 	addi	r2,r2,8
 4008454:	100b883a 	mov	r5,r2
 4008458:	1809883a 	mov	r4,r3
 400845c:	40050880 	call	4005088 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
 4008460:	0001883a 	nop
 4008464:	e037883a 	mov	sp,fp
 4008468:	dfc00117 	ldw	ra,4(sp)
 400846c:	df000017 	ldw	fp,0(sp)
 4008470:	dec00204 	addi	sp,sp,8
 4008474:	f800283a 	ret

04008478 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 4008478:	defff804 	addi	sp,sp,-32
 400847c:	dfc00715 	stw	ra,28(sp)
 4008480:	df000615 	stw	fp,24(sp)
 4008484:	df000604 	addi	fp,sp,24
 4008488:	e13ffc15 	stw	r4,-16(fp)
 400848c:	2805883a 	mov	r2,r5
 4008490:	e1bffe15 	stw	r6,-8(fp)
 4008494:	e1ffff15 	stw	r7,-4(fp)
 4008498:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
 400849c:	e0bffd0b 	ldhu	r2,-12(fp)
 40084a0:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
 40084a4:	e0bffe17 	ldw	r2,-8(fp)
 40084a8:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
 40084ac:	e0bffa0b 	ldhu	r2,-24(fp)
 40084b0:	10bfffcc 	andi	r2,r2,65535
 40084b4:	10000a26 	beq	r2,zero,40084e0 <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
 40084b8:	e0bffb04 	addi	r2,fp,-20
 40084bc:	e1bffa04 	addi	r6,fp,-24
 40084c0:	100b883a 	mov	r5,r2
 40084c4:	e13ffc17 	ldw	r4,-16(fp)
 40084c8:	40084f40 	call	40084f4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
 40084cc:	1080005c 	xori	r2,r2,1
 40084d0:	10803fcc 	andi	r2,r2,255
 40084d4:	1000011e 	bne	r2,zero,40084dc <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
 40084d8:	003ff406 	br	40084ac <__alt_mem_onchip_memory2_0+0xfc00720c>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
 40084dc:	0001883a 	nop
}
 40084e0:	e037883a 	mov	sp,fp
 40084e4:	dfc00117 	ldw	ra,4(sp)
 40084e8:	df000017 	ldw	fp,0(sp)
 40084ec:	dec00204 	addi	sp,sp,8
 40084f0:	f800283a 	ret

040084f4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 40084f4:	defff604 	addi	sp,sp,-40
 40084f8:	dfc00915 	stw	ra,36(sp)
 40084fc:	df000815 	stw	fp,32(sp)
 4008500:	df000804 	addi	fp,sp,32
 4008504:	e13ffc15 	stw	r4,-16(fp)
 4008508:	e17ffd15 	stw	r5,-12(fp)
 400850c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 4008510:	e0bffc17 	ldw	r2,-16(fp)
 4008514:	10800804 	addi	r2,r2,32
 4008518:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 400851c:	e0bffc17 	ldw	r2,-16(fp)
 4008520:	10800804 	addi	r2,r2,32
 4008524:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
 4008528:	e0bffc17 	ldw	r2,-16(fp)
 400852c:	10800c03 	ldbu	r2,48(r2)
 4008530:	10803fcc 	andi	r2,r2,255
 4008534:	10c00168 	cmpgeui	r3,r2,5
 4008538:	1801411e 	bne	r3,zero,4008a40 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
 400853c:	100690ba 	slli	r3,r2,2
 4008540:	00810074 	movhi	r2,1025
 4008544:	10a15504 	addi	r2,r2,-31404
 4008548:	1885883a 	add	r2,r3,r2
 400854c:	10800017 	ldw	r2,0(r2)
 4008550:	1000683a 	jmp	r2
 4008554:	04008568 	cmpgeui	r16,zero,533
 4008558:	0400859c 	xori	r16,zero,534
 400855c:	04008624 	muli	r16,zero,536
 4008560:	040086b8 	rdprs	r16,zero,538
 4008564:	04008724 	muli	r16,zero,540
                case 0:
                        theBuffer.valueSize = 2;
 4008568:	e0bffc17 	ldw	r2,-16(fp)
 400856c:	00c00084 	movi	r3,2
 4008570:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 4008574:	e0bffc17 	ldw	r2,-16(fp)
 4008578:	10c00404 	addi	r3,r2,16
 400857c:	e0bffc17 	ldw	r2,-16(fp)
 4008580:	10800204 	addi	r2,r2,8
 4008584:	100b883a 	mov	r5,r2
 4008588:	1809883a 	mov	r4,r3
 400858c:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 4008590:	e0bffc17 	ldw	r2,-16(fp)
 4008594:	00c00044 	movi	r3,1
 4008598:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 400859c:	e0bffc17 	ldw	r2,-16(fp)
 40085a0:	10800404 	addi	r2,r2,16
 40085a4:	e1bffe17 	ldw	r6,-8(fp)
 40085a8:	e17ffd17 	ldw	r5,-12(fp)
 40085ac:	1009883a 	mov	r4,r2
 40085b0:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 40085b4:	1080005c 	xori	r2,r2,1
 40085b8:	10803fcc 	andi	r2,r2,255
 40085bc:	10000226 	beq	r2,zero,40085c8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
 40085c0:	0005883a 	mov	r2,zero
 40085c4:	00011f06 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 40085c8:	e0bffc17 	ldw	r2,-16(fp)
 40085cc:	10c00217 	ldw	r3,8(r2)
 40085d0:	1806d23a 	srli	r3,r3,8
 40085d4:	10800317 	ldw	r2,12(r2)
 40085d8:	10803fcc 	andi	r2,r2,255
 40085dc:	1004963a 	slli	r2,r2,24
 40085e0:	10c4b03a 	or	r2,r2,r3
 40085e4:	10c00003 	ldbu	r3,0(r2)
 40085e8:	e0bffc17 	ldw	r2,-16(fp)
 40085ec:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 40085f0:	e0bffc17 	ldw	r2,-16(fp)
 40085f4:	10c00217 	ldw	r3,8(r2)
 40085f8:	1806d23a 	srli	r3,r3,8
 40085fc:	10800317 	ldw	r2,12(r2)
 4008600:	10803fcc 	andi	r2,r2,255
 4008604:	1004963a 	slli	r2,r2,24
 4008608:	10c4b03a 	or	r2,r2,r3
 400860c:	10c00043 	ldbu	r3,1(r2)
 4008610:	e0bffc17 	ldw	r2,-16(fp)
 4008614:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
 4008618:	e0bffc17 	ldw	r2,-16(fp)
 400861c:	00c00084 	movi	r3,2
 4008620:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 4008624:	e0bffc17 	ldw	r2,-16(fp)
 4008628:	10800804 	addi	r2,r2,32
 400862c:	10c00084 	addi	r3,r2,2
 4008630:	e0bffc17 	ldw	r2,-16(fp)
 4008634:	19803fcc 	andi	r6,r3,255
 4008638:	11000243 	ldbu	r4,9(r2)
 400863c:	2008703a 	and	r4,r4,zero
 4008640:	200b883a 	mov	r5,r4
 4008644:	3009883a 	mov	r4,r6
 4008648:	2908b03a 	or	r4,r5,r4
 400864c:	11000245 	stb	r4,9(r2)
 4008650:	1808d23a 	srli	r4,r3,8
 4008654:	21803fcc 	andi	r6,r4,255
 4008658:	11000283 	ldbu	r4,10(r2)
 400865c:	2008703a 	and	r4,r4,zero
 4008660:	200b883a 	mov	r5,r4
 4008664:	3009883a 	mov	r4,r6
 4008668:	2908b03a 	or	r4,r5,r4
 400866c:	11000285 	stb	r4,10(r2)
 4008670:	1808d43a 	srli	r4,r3,16
 4008674:	21803fcc 	andi	r6,r4,255
 4008678:	110002c3 	ldbu	r4,11(r2)
 400867c:	2008703a 	and	r4,r4,zero
 4008680:	200b883a 	mov	r5,r4
 4008684:	3009883a 	mov	r4,r6
 4008688:	2908b03a 	or	r4,r5,r4
 400868c:	110002c5 	stb	r4,11(r2)
 4008690:	180ad63a 	srli	r5,r3,24
 4008694:	10c00303 	ldbu	r3,12(r2)
 4008698:	1806703a 	and	r3,r3,zero
 400869c:	1809883a 	mov	r4,r3
 40086a0:	2807883a 	mov	r3,r5
 40086a4:	20c6b03a 	or	r3,r4,r3
 40086a8:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
 40086ac:	e0bffc17 	ldw	r2,-16(fp)
 40086b0:	00c000c4 	movi	r3,3
 40086b4:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
 40086b8:	e0bffc17 	ldw	r2,-16(fp)
 40086bc:	10800c83 	ldbu	r2,50(r2)
 40086c0:	10803fcc 	andi	r2,r2,255
 40086c4:	10c00120 	cmpeqi	r3,r2,4
 40086c8:	1800021e 	bne	r3,zero,40086d4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
 40086cc:	10800148 	cmpgei	r2,r2,5
 40086d0:	00000306 	br	40086e0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 40086d4:	e0bffc17 	ldw	r2,-16(fp)
 40086d8:	10000d45 	stb	zero,53(r2)
                                        break;
 40086dc:	00000106 	br	40086e4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
 40086e0:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
 40086e4:	e0bffc17 	ldw	r2,-16(fp)
 40086e8:	10800c43 	ldbu	r2,49(r2)
 40086ec:	10bfff84 	addi	r2,r2,-2
 40086f0:	1007883a 	mov	r3,r2
 40086f4:	e0bffc17 	ldw	r2,-16(fp)
 40086f8:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 40086fc:	e0bffc17 	ldw	r2,-16(fp)
 4008700:	10c00404 	addi	r3,r2,16
 4008704:	e0bffc17 	ldw	r2,-16(fp)
 4008708:	10800204 	addi	r2,r2,8
 400870c:	100b883a 	mov	r5,r2
 4008710:	1809883a 	mov	r4,r3
 4008714:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 4008718:	e0bffc17 	ldw	r2,-16(fp)
 400871c:	00c00104 	movi	r3,4
 4008720:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
 4008724:	e0bffc17 	ldw	r2,-16(fp)
 4008728:	10800c83 	ldbu	r2,50(r2)
 400872c:	10803fcc 	andi	r2,r2,255
 4008730:	10c00120 	cmpeqi	r3,r2,4
 4008734:	1800141e 	bne	r3,zero,4008788 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
 4008738:	10c00160 	cmpeqi	r3,r2,5
 400873c:	18005a1e 	bne	r3,zero,40088a8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
 4008740:	108000a0 	cmpeqi	r2,r2,2
 4008744:	10008526 	beq	r2,zero,400895c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 4008748:	e0bffc17 	ldw	r2,-16(fp)
 400874c:	10800404 	addi	r2,r2,16
 4008750:	e1bffe17 	ldw	r6,-8(fp)
 4008754:	e17ffd17 	ldw	r5,-12(fp)
 4008758:	1009883a 	mov	r4,r2
 400875c:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4008760:	1080005c 	xori	r2,r2,1
 4008764:	10803fcc 	andi	r2,r2,255
 4008768:	10000226 	beq	r2,zero,4008774 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
 400876c:	0005883a 	mov	r2,zero
 4008770:	0000b406 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
 4008774:	e0bffa17 	ldw	r2,-24(fp)
 4008778:	10c00143 	ldbu	r3,5(r2)
 400877c:	e0bffc17 	ldw	r2,-16(fp)
 4008780:	10c00d85 	stb	r3,54(r2)
                                        break;
 4008784:	00008b06 	br	40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 4008788:	e0bffc17 	ldw	r2,-16(fp)
 400878c:	10800404 	addi	r2,r2,16
 4008790:	e1bffe17 	ldw	r6,-8(fp)
 4008794:	e17ffd17 	ldw	r5,-12(fp)
 4008798:	1009883a 	mov	r4,r2
 400879c:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 40087a0:	1080005c 	xori	r2,r2,1
 40087a4:	10803fcc 	andi	r2,r2,255
 40087a8:	10000226 	beq	r2,zero,40087b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
 40087ac:	0005883a 	mov	r2,zero
 40087b0:	0000a406 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
 40087b4:	e0bffb17 	ldw	r2,-20(fp)
 40087b8:	10800083 	ldbu	r2,2(r2)
 40087bc:	10803fcc 	andi	r2,r2,255
 40087c0:	01402004 	movi	r5,128
 40087c4:	1009883a 	mov	r4,r2
 40087c8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
 40087cc:	e0bffb17 	ldw	r2,-20(fp)
 40087d0:	108000c3 	ldbu	r2,3(r2)
 40087d4:	10803fcc 	andi	r2,r2,255
 40087d8:	01402004 	movi	r5,128
 40087dc:	1009883a 	mov	r4,r2
 40087e0:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
 40087e4:	e0bffb17 	ldw	r2,-20(fp)
 40087e8:	10800103 	ldbu	r2,4(r2)
 40087ec:	10803fcc 	andi	r2,r2,255
 40087f0:	01402004 	movi	r5,128
 40087f4:	1009883a 	mov	r4,r2
 40087f8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
 40087fc:	e0bffb17 	ldw	r2,-20(fp)
 4008800:	10800143 	ldbu	r2,5(r2)
 4008804:	10803fcc 	andi	r2,r2,255
 4008808:	01402004 	movi	r5,128
 400880c:	1009883a 	mov	r4,r2
 4008810:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
 4008814:	e0bffb17 	ldw	r2,-20(fp)
 4008818:	10800183 	ldbu	r2,6(r2)
 400881c:	10803fcc 	andi	r2,r2,255
 4008820:	01402004 	movi	r5,128
 4008824:	1009883a 	mov	r4,r2
 4008828:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
 400882c:	e0bffb17 	ldw	r2,-20(fp)
 4008830:	108001c3 	ldbu	r2,7(r2)
 4008834:	10803fcc 	andi	r2,r2,255
 4008838:	01402004 	movi	r5,128
 400883c:	1009883a 	mov	r4,r2
 4008840:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
 4008844:	e0bffc17 	ldw	r2,-16(fp)
 4008848:	10800d03 	ldbu	r2,52(r2)
 400884c:	10803fcc 	andi	r2,r2,255
 4008850:	10000a26 	beq	r2,zero,400887c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
 4008854:	e0bffb17 	ldw	r2,-20(fp)
 4008858:	10800143 	ldbu	r2,5(r2)
 400885c:	10803fcc 	andi	r2,r2,255
 4008860:	10800058 	cmpnei	r2,r2,1
 4008864:	10004e1e 	bne	r2,zero,40089a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
 4008868:	e0bffb17 	ldw	r2,-20(fp)
 400886c:	10800183 	ldbu	r2,6(r2)
 4008870:	10803fcc 	andi	r2,r2,255
 4008874:	108000d8 	cmpnei	r2,r2,3
 4008878:	1000491e 	bne	r2,zero,40089a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
 400887c:	e0bffc17 	ldw	r2,-16(fp)
 4008880:	00c00044 	movi	r3,1
 4008884:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
 4008888:	e0bffc17 	ldw	r2,-16(fp)
 400888c:	10800cc3 	ldbu	r2,51(r2)
 4008890:	10803fcc 	andi	r2,r2,255
 4008894:	108000a8 	cmpgeui	r2,r2,2
 4008898:	1000431e 	bne	r2,zero,40089a8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
 400889c:	e0bffc17 	ldw	r2,-16(fp)
 40088a0:	10000cc5 	stb	zero,51(r2)
                                        break;
 40088a4:	00004006 	br	40089a8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 40088a8:	e0bffc17 	ldw	r2,-16(fp)
 40088ac:	10800404 	addi	r2,r2,16
 40088b0:	e1bffe17 	ldw	r6,-8(fp)
 40088b4:	e17ffd17 	ldw	r5,-12(fp)
 40088b8:	1009883a 	mov	r4,r2
 40088bc:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 40088c0:	1080005c 	xori	r2,r2,1
 40088c4:	10803fcc 	andi	r2,r2,255
 40088c8:	10000226 	beq	r2,zero,40088d4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
 40088cc:	0005883a 	mov	r2,zero
 40088d0:	00005c06 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
 40088d4:	e0bffc17 	ldw	r2,-16(fp)
 40088d8:	10800d43 	ldbu	r2,53(r2)
 40088dc:	10803fcc 	andi	r2,r2,255
 40088e0:	10003326 	beq	r2,zero,40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
 40088e4:	e0bffc17 	ldw	r2,-16(fp)
 40088e8:	10800cc3 	ldbu	r2,51(r2)
 40088ec:	10803fcc 	andi	r2,r2,255
 40088f0:	108000a8 	cmpgeui	r2,r2,2
 40088f4:	10002e1e 	bne	r2,zero,40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) ) 
 40088f8:	e0bffc17 	ldw	r2,-16(fp)
 40088fc:	10800117 	ldw	r2,4(r2)
 4008900:	10800017 	ldw	r2,0(r2)
 4008904:	10800017 	ldw	r2,0(r2)
 4008908:	e0fffc17 	ldw	r3,-16(fp)
 400890c:	19000117 	ldw	r4,4(r3)
 4008910:	e0fffc17 	ldw	r3,-16(fp)
 4008914:	18c00d83 	ldbu	r3,54(r3)
 4008918:	19403fcc 	andi	r5,r3,255
 400891c:	e0fffc17 	ldw	r3,-16(fp)
 4008920:	18c00804 	addi	r3,r3,32
 4008924:	d8c00115 	stw	r3,4(sp)
 4008928:	d8000015 	stw	zero,0(sp)
 400892c:	000f883a 	mov	r7,zero
 4008930:	000d883a 	mov	r6,zero
 4008934:	103ee83a 	callr	r2
 4008938:	10803fcc 	andi	r2,r2,255
 400893c:	10001c26 	beq	r2,zero,40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
 4008940:	e0bffc17 	ldw	r2,-16(fp)
 4008944:	10800cc3 	ldbu	r2,51(r2)
 4008948:	10800044 	addi	r2,r2,1
 400894c:	1007883a 	mov	r3,r2
 4008950:	e0bffc17 	ldw	r2,-16(fp)
 4008954:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
 4008958:	00001506 	br	40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 400895c:	e0bffc17 	ldw	r2,-16(fp)
 4008960:	10c00604 	addi	r3,r2,24
 4008964:	e0bffc17 	ldw	r2,-16(fp)
 4008968:	10800c43 	ldbu	r2,49(r2)
 400896c:	10803fcc 	andi	r2,r2,255
 4008970:	10bfff84 	addi	r2,r2,-2
 4008974:	10bfffcc 	andi	r2,r2,65535
 4008978:	100f883a 	mov	r7,r2
 400897c:	e1bffe17 	ldw	r6,-8(fp)
 4008980:	e17ffd17 	ldw	r5,-12(fp)
 4008984:	1809883a 	mov	r4,r3
 4008988:	40050f00 	call	40050f0 <_ZN11ByteSkipper4SkipEPPhPtt>
 400898c:	1080005c 	xori	r2,r2,1
 4008990:	10803fcc 	andi	r2,r2,255
 4008994:	10000726 	beq	r2,zero,40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
 4008998:	0005883a 	mov	r2,zero
 400899c:	00002906 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
 40089a0:	0001883a 	nop
 40089a4:	00000306 	br	40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
 40089a8:	0001883a 	nop
 40089ac:	00000106 	br	40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) ) 
                                                        nEPs++;
                                        }
                                        break;
 40089b0:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
 40089b4:	e0bffc17 	ldw	r2,-16(fp)
 40089b8:	10c00804 	addi	r3,r2,32
 40089bc:	e0bffc17 	ldw	r2,-16(fp)
 40089c0:	19803fcc 	andi	r6,r3,255
 40089c4:	11000243 	ldbu	r4,9(r2)
 40089c8:	2008703a 	and	r4,r4,zero
 40089cc:	200b883a 	mov	r5,r4
 40089d0:	3009883a 	mov	r4,r6
 40089d4:	2908b03a 	or	r4,r5,r4
 40089d8:	11000245 	stb	r4,9(r2)
 40089dc:	1808d23a 	srli	r4,r3,8
 40089e0:	21803fcc 	andi	r6,r4,255
 40089e4:	11000283 	ldbu	r4,10(r2)
 40089e8:	2008703a 	and	r4,r4,zero
 40089ec:	200b883a 	mov	r5,r4
 40089f0:	3009883a 	mov	r4,r6
 40089f4:	2908b03a 	or	r4,r5,r4
 40089f8:	11000285 	stb	r4,10(r2)
 40089fc:	1808d43a 	srli	r4,r3,16
 4008a00:	21803fcc 	andi	r6,r4,255
 4008a04:	110002c3 	ldbu	r4,11(r2)
 4008a08:	2008703a 	and	r4,r4,zero
 4008a0c:	200b883a 	mov	r5,r4
 4008a10:	3009883a 	mov	r4,r6
 4008a14:	2908b03a 	or	r4,r5,r4
 4008a18:	110002c5 	stb	r4,11(r2)
 4008a1c:	180ad63a 	srli	r5,r3,24
 4008a20:	10c00303 	ldbu	r3,12(r2)
 4008a24:	1806703a 	and	r3,r3,zero
 4008a28:	1809883a 	mov	r4,r3
 4008a2c:	2807883a 	mov	r3,r5
 4008a30:	20c6b03a 	or	r3,r4,r3
 4008a34:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
 4008a38:	e0bffc17 	ldw	r2,-16(fp)
 4008a3c:	10000c05 	stb	zero,48(r2)
        }
        return true;
 4008a40:	00800044 	movi	r2,1
}
 4008a44:	e037883a 	mov	sp,fp
 4008a48:	dfc00117 	ldw	ra,4(sp)
 4008a4c:	df000017 	ldw	fp,0(sp)
 4008a50:	dec00204 	addi	sp,sp,8
 4008a54:	f800283a 	ret

04008a58 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
 4008a58:	defff904 	addi	sp,sp,-28
 4008a5c:	df000615 	stw	fp,24(sp)
 4008a60:	df000604 	addi	fp,sp,24
 4008a64:	e13ffb15 	stw	r4,-20(fp)
 4008a68:	3009883a 	mov	r4,r6
 4008a6c:	3807883a 	mov	r3,r7
 4008a70:	e0800117 	ldw	r2,4(fp)
 4008a74:	e17ffc05 	stb	r5,-16(fp)
 4008a78:	e13ffd05 	stb	r4,-12(fp)
 4008a7c:	e0fffe05 	stb	r3,-8(fp)
 4008a80:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
 4008a84:	e0800217 	ldw	r2,8(fp)
 4008a88:	10c000c3 	ldbu	r3,3(r2)
 4008a8c:	e0bffb17 	ldw	r2,-20(fp)
 4008a90:	10800483 	ldbu	r2,18(r2)
 4008a94:	1884703a 	and	r2,r3,r2
 4008a98:	10803fcc 	andi	r2,r2,255
 4008a9c:	10800098 	cmpnei	r2,r2,2
 4008aa0:	10001f1e 	bne	r2,zero,4008b20 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
 4008aa4:	e0800217 	ldw	r2,8(fp)
 4008aa8:	10800083 	ldbu	r2,2(r2)
 4008aac:	10803fcc 	andi	r2,r2,255
 4008ab0:	1080201c 	xori	r2,r2,128
 4008ab4:	10bfe004 	addi	r2,r2,-128
 4008ab8:	1000020e 	bge	r2,zero,4008ac4 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
 4008abc:	00800044 	movi	r2,1
 4008ac0:	00000106 	br	4008ac8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
 4008ac4:	00800084 	movi	r2,2
 4008ac8:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        } 

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 4008acc:	e0fffa03 	ldbu	r3,-24(fp)
 4008ad0:	e0800217 	ldw	r2,8(fp)
 4008ad4:	10800083 	ldbu	r2,2(r2)
 4008ad8:	108003cc 	andi	r2,r2,15
 4008adc:	100b883a 	mov	r5,r2
 4008ae0:	e13ffb17 	ldw	r4,-20(fp)
 4008ae4:	1805883a 	mov	r2,r3
 4008ae8:	1085883a 	add	r2,r2,r2
 4008aec:	10c5883a 	add	r2,r2,r3
 4008af0:	2085883a 	add	r2,r4,r2
 4008af4:	108004c4 	addi	r2,r2,19
 4008af8:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
 4008afc:	e0800217 	ldw	r2,8(fp)
 4008b00:	10c00103 	ldbu	r3,4(r2)
 4008b04:	10800143 	ldbu	r2,5(r2)
 4008b08:	1004923a 	slli	r2,r2,8
 4008b0c:	10c4b03a 	or	r2,r2,r3
 4008b10:	10bfffcc 	andi	r2,r2,65535
 4008b14:	10801070 	cmpltui	r2,r2,65
 4008b18:	10000d1e 	bne	r2,zero,4008b50 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
 4008b1c:	00000206 	br	4008b28 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
 4008b20:	0005883a 	mov	r2,zero
 4008b24:	00001906 	br	4008b8c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
 4008b28:	e0fffa03 	ldbu	r3,-24(fp)
 4008b2c:	e13ffb17 	ldw	r4,-20(fp)
 4008b30:	1805883a 	mov	r2,r3
 4008b34:	1085883a 	add	r2,r2,r2
 4008b38:	10c5883a 	add	r2,r2,r3
 4008b3c:	2085883a 	add	r2,r4,r2
 4008b40:	10800504 	addi	r2,r2,20
 4008b44:	00c01004 	movi	r3,64
 4008b48:	10c00005 	stb	r3,0(r2)
 4008b4c:	00000e06 	br	4008b88 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 4008b50:	e0fffa03 	ldbu	r3,-24(fp)
 4008b54:	e0800217 	ldw	r2,8(fp)
 4008b58:	11000103 	ldbu	r4,4(r2)
 4008b5c:	10800143 	ldbu	r2,5(r2)
 4008b60:	1004923a 	slli	r2,r2,8
 4008b64:	1104b03a 	or	r2,r2,r4
 4008b68:	100b883a 	mov	r5,r2
 4008b6c:	e13ffb17 	ldw	r4,-20(fp)
 4008b70:	1805883a 	mov	r2,r3
 4008b74:	1085883a 	add	r2,r2,r2
 4008b78:	10c5883a 	add	r2,r2,r3
 4008b7c:	2085883a 	add	r2,r4,r2
 4008b80:	10800504 	addi	r2,r2,20
 4008b84:	11400005 	stb	r5,0(r2)
        }

        return true;
 4008b88:	00800044 	movi	r2,1
}
 4008b8c:	e037883a 	mov	sp,fp
 4008b90:	df000017 	ldw	fp,0(sp)
 4008b94:	dec00104 	addi	sp,sp,4
 4008b98:	f800283a 	ret

04008b9c <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 4008b9c:	213fff04 	addi	r4,r4,-4
 4008ba0:	4008a581 	jmpi	4008a58 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

04008ba4 <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 4008ba4:	defffa04 	addi	sp,sp,-24
 4008ba8:	df000515 	stw	fp,20(sp)
 4008bac:	df000504 	addi	fp,sp,20
 4008bb0:	e13ffb15 	stw	r4,-20(fp)
 4008bb4:	3009883a 	mov	r4,r6
 4008bb8:	3807883a 	mov	r3,r7
 4008bbc:	e0800117 	ldw	r2,4(fp)
 4008bc0:	e17ffc05 	stb	r5,-16(fp)
 4008bc4:	e13ffd05 	stb	r4,-12(fp)
 4008bc8:	e0fffe05 	stb	r3,-8(fp)
 4008bcc:	e0bfff05 	stb	r2,-4(fp)
                return true;
 4008bd0:	00800044 	movi	r2,1
        };
 4008bd4:	e037883a 	mov	sp,fp
 4008bd8:	df000017 	ldw	fp,0(sp)
 4008bdc:	dec00104 	addi	sp,sp,4
 4008be0:	f800283a 	ret

04008be4 <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
 4008be4:	defffe04 	addi	sp,sp,-8
 4008be8:	df000115 	stw	fp,4(sp)
 4008bec:	df000104 	addi	fp,sp,4
 4008bf0:	e13fff15 	stw	r4,-4(fp)
 4008bf4:	e0bfff17 	ldw	r2,-4(fp)
 4008bf8:	10800d83 	ldbu	r2,54(r2)
 4008bfc:	e037883a 	mov	sp,fp
 4008c00:	df000017 	ldw	fp,0(sp)
 4008c04:	dec00104 	addi	sp,sp,4
 4008c08:	f800283a 	ret

04008c0c <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
 4008c0c:	defffe04 	addi	sp,sp,-8
 4008c10:	df000115 	stw	fp,4(sp)
 4008c14:	df000104 	addi	fp,sp,4
 4008c18:	e13fff15 	stw	r4,-4(fp)
 4008c1c:	e0bfff17 	ldw	r2,-4(fp)
 4008c20:	10800cc3 	ldbu	r2,51(r2)
 4008c24:	e037883a 	mov	sp,fp
 4008c28:	df000017 	ldw	fp,0(sp)
 4008c2c:	dec00104 	addi	sp,sp,4
 4008c30:	f800283a 	ret

04008c34 <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
 4008c34:	defffd04 	addi	sp,sp,-12
 4008c38:	df000215 	stw	fp,8(sp)
 4008c3c:	df000204 	addi	fp,sp,8
 4008c40:	e13ffe15 	stw	r4,-8(fp)
 4008c44:	2805883a 	mov	r2,r5
 4008c48:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
 4008c4c:	e0bfff03 	ldbu	r2,-4(fp)
 4008c50:	10803c28 	cmpgeui	r2,r2,240
 4008c54:	1000031e 	bne	r2,zero,4008c64 <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
 4008c58:	e0bfff03 	ldbu	r2,-4(fp)
 4008c5c:	1004d13a 	srli	r2,r2,4
 4008c60:	00000606 	br	4008c7c <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
 4008c64:	e0bfff03 	ldbu	r2,-4(fp)
 4008c68:	10c003cc 	andi	r3,r2,15
 4008c6c:	008100b4 	movhi	r2,1026
 4008c70:	108bf884 	addi	r2,r2,12258
 4008c74:	1885883a 	add	r2,r3,r2
 4008c78:	10800003 	ldbu	r2,0(r2)
        };
 4008c7c:	e037883a 	mov	sp,fp
 4008c80:	df000017 	ldw	fp,0(sp)
 4008c84:	dec00104 	addi	sp,sp,4
 4008c88:	f800283a 	ret

04008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
 4008c8c:	defffd04 	addi	sp,sp,-12
 4008c90:	df000215 	stw	fp,8(sp)
 4008c94:	df000204 	addi	fp,sp,8
 4008c98:	e13ffe15 	stw	r4,-8(fp)
 4008c9c:	2805883a 	mov	r2,r5
 4008ca0:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
 4008ca4:	e0ffff03 	ldbu	r3,-4(fp)
 4008ca8:	008100b4 	movhi	r2,1026
 4008cac:	108bf484 	addi	r2,r2,12242
 4008cb0:	1885883a 	add	r2,r3,r2
 4008cb4:	10800003 	ldbu	r2,0(r2)
        };
 4008cb8:	e037883a 	mov	sp,fp
 4008cbc:	df000017 	ldw	fp,0(sp)
 4008cc0:	dec00104 	addi	sp,sp,4
 4008cc4:	f800283a 	ret

04008cc8 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
 4008cc8:	defffe04 	addi	sp,sp,-8
 4008ccc:	df000115 	stw	fp,4(sp)
 4008cd0:	df000104 	addi	fp,sp,4
 4008cd4:	e13fff15 	stw	r4,-4(fp)
 4008cd8:	e0bfff17 	ldw	r2,-4(fp)
 4008cdc:	10800303 	ldbu	r2,12(r2)
 4008ce0:	e037883a 	mov	sp,fp
 4008ce4:	df000017 	ldw	fp,0(sp)
 4008ce8:	dec00104 	addi	sp,sp,4
 4008cec:	f800283a 	ret

04008cf0 <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
 4008cf0:	defffe04 	addi	sp,sp,-8
 4008cf4:	df000115 	stw	fp,4(sp)
 4008cf8:	df000104 	addi	fp,sp,4
 4008cfc:	e13fff15 	stw	r4,-4(fp)
 4008d00:	008100b4 	movhi	r2,1026
 4008d04:	108c1104 	addi	r2,r2,12356
 4008d08:	e0ffff17 	ldw	r3,-4(fp)
 4008d0c:	18800015 	stw	r2,0(r3)
 4008d10:	0001883a 	nop
 4008d14:	e037883a 	mov	sp,fp
 4008d18:	df000017 	ldw	fp,0(sp)
 4008d1c:	dec00104 	addi	sp,sp,4
 4008d20:	f800283a 	ret

04008d24 <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 4008d24:	defffd04 	addi	sp,sp,-12
 4008d28:	df000215 	stw	fp,8(sp)
 4008d2c:	df000204 	addi	fp,sp,8
 4008d30:	2005883a 	mov	r2,r4
 4008d34:	e17fff15 	stw	r5,-4(fp)
 4008d38:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 4008d3c:	0001883a 	nop
 4008d40:	e037883a 	mov	sp,fp
 4008d44:	df000017 	ldw	fp,0(sp)
 4008d48:	dec00104 	addi	sp,sp,4
 4008d4c:	f800283a 	ret

04008d50 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
 4008d50:	deffe204 	addi	sp,sp,-120
 4008d54:	dfc01d15 	stw	ra,116(sp)
 4008d58:	df001c15 	stw	fp,112(sp)
 4008d5c:	df001c04 	addi	fp,sp,112
 4008d60:	e13ffd15 	stw	r4,-12(fp)
 4008d64:	2805883a 	mov	r2,r5
 4008d68:	e1bfff15 	stw	r6,-4(fp)
 4008d6c:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
 4008d70:	00801004 	movi	r2,64
 4008d74:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
 4008d78:	e0bffd17 	ldw	r2,-12(fp)
 4008d7c:	11000217 	ldw	r4,8(r2)
 4008d80:	e0bffd17 	ldw	r2,-12(fp)
 4008d84:	10800303 	ldbu	r2,12(r2)
 4008d88:	11403fcc 	andi	r5,r2,255
 4008d8c:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
 4008d90:	e0ffff17 	ldw	r3,-4(fp)
 4008d94:	d8c00715 	stw	r3,28(sp)
 4008d98:	e0ffec84 	addi	r3,fp,-78
 4008d9c:	d8c00615 	stw	r3,24(sp)
 4008da0:	00c01004 	movi	r3,64
 4008da4:	d8c00515 	stw	r3,20(sp)
 4008da8:	00c02004 	movi	r3,128
 4008dac:	d8c00415 	stw	r3,16(sp)
 4008db0:	d8800315 	stw	r2,12(sp)
 4008db4:	00800884 	movi	r2,34
 4008db8:	d8800215 	stw	r2,8(sp)
 4008dbc:	d8000115 	stw	zero,4(sp)
 4008dc0:	00800184 	movi	r2,6
 4008dc4:	d8800015 	stw	r2,0(sp)
 4008dc8:	01c02044 	movi	r7,129
 4008dcc:	000d883a 	mov	r6,zero
 4008dd0:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 4008dd4:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
 4008dd8:	e0bfec43 	ldbu	r2,-79(fp)
}
 4008ddc:	e037883a 	mov	sp,fp
 4008de0:	dfc00117 	ldw	ra,4(sp)
 4008de4:	df000017 	ldw	fp,0(sp)
 4008de8:	dec00204 	addi	sp,sp,8
 4008dec:	f800283a 	ret

04008df0 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
 4008df0:	defff004 	addi	sp,sp,-64
 4008df4:	dfc00f15 	stw	ra,60(sp)
 4008df8:	df000e15 	stw	fp,56(sp)
 4008dfc:	df000e04 	addi	fp,sp,56
 4008e00:	e13ffa15 	stw	r4,-24(fp)
 4008e04:	2811883a 	mov	r8,r5
 4008e08:	300b883a 	mov	r5,r6
 4008e0c:	3809883a 	mov	r4,r7
 4008e10:	e0c00217 	ldw	r3,8(fp)
 4008e14:	e0800317 	ldw	r2,12(fp)
 4008e18:	e23ffb05 	stb	r8,-20(fp)
 4008e1c:	e17ffc05 	stb	r5,-16(fp)
 4008e20:	e13ffd05 	stb	r4,-12(fp)
 4008e24:	e0fffe05 	stb	r3,-8(fp)
 4008e28:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
 4008e2c:	e0bffa17 	ldw	r2,-24(fp)
 4008e30:	12000217 	ldw	r8,8(r2)
 4008e34:	e0bffa17 	ldw	r2,-24(fp)
 4008e38:	10800303 	ldbu	r2,12(r2)
 4008e3c:	12403fcc 	andi	r9,r2,255
 4008e40:	e2bffb03 	ldbu	r10,-20(fp)
 4008e44:	e0bffe03 	ldbu	r2,-8(fp)
 4008e48:	e0fffd03 	ldbu	r3,-12(fp)
 4008e4c:	e13ffc03 	ldbu	r4,-16(fp)
 4008e50:	e17fff0b 	ldhu	r5,-4(fp)
 4008e54:	e1bfff0b 	ldhu	r6,-4(fp)
 4008e58:	d8000715 	stw	zero,28(sp)
 4008e5c:	e1c00417 	ldw	r7,16(fp)
 4008e60:	d9c00615 	stw	r7,24(sp)
 4008e64:	d9800515 	stw	r6,20(sp)
 4008e68:	d9400415 	stw	r5,16(sp)
 4008e6c:	d9000315 	stw	r4,12(sp)
 4008e70:	d8c00215 	stw	r3,8(sp)
 4008e74:	d8800115 	stw	r2,4(sp)
 4008e78:	00800244 	movi	r2,9
 4008e7c:	d8800015 	stw	r2,0(sp)
 4008e80:	01c00844 	movi	r7,33
 4008e84:	500d883a 	mov	r6,r10
 4008e88:	480b883a 	mov	r5,r9
 4008e8c:	4009883a 	mov	r4,r8
 4008e90:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4008e94:	e037883a 	mov	sp,fp
 4008e98:	dfc00117 	ldw	ra,4(sp)
 4008e9c:	df000017 	ldw	fp,0(sp)
 4008ea0:	dec00204 	addi	sp,sp,8
 4008ea4:	f800283a 	ret

04008ea8 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
 4008ea8:	defff004 	addi	sp,sp,-64
 4008eac:	dfc00f15 	stw	ra,60(sp)
 4008eb0:	df000e15 	stw	fp,56(sp)
 4008eb4:	df000e04 	addi	fp,sp,56
 4008eb8:	e13ffa15 	stw	r4,-24(fp)
 4008ebc:	2811883a 	mov	r8,r5
 4008ec0:	300b883a 	mov	r5,r6
 4008ec4:	3809883a 	mov	r4,r7
 4008ec8:	e0c00217 	ldw	r3,8(fp)
 4008ecc:	e0800317 	ldw	r2,12(fp)
 4008ed0:	e23ffb05 	stb	r8,-20(fp)
 4008ed4:	e17ffc05 	stb	r5,-16(fp)
 4008ed8:	e13ffd05 	stb	r4,-12(fp)
 4008edc:	e0fffe05 	stb	r3,-8(fp)
 4008ee0:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
 4008ee4:	e0bffa17 	ldw	r2,-24(fp)
 4008ee8:	12000217 	ldw	r8,8(r2)
 4008eec:	e0bffa17 	ldw	r2,-24(fp)
 4008ef0:	10800303 	ldbu	r2,12(r2)
 4008ef4:	12403fcc 	andi	r9,r2,255
 4008ef8:	e2bffb03 	ldbu	r10,-20(fp)
 4008efc:	e0bffe03 	ldbu	r2,-8(fp)
 4008f00:	e0fffd03 	ldbu	r3,-12(fp)
 4008f04:	e13ffc03 	ldbu	r4,-16(fp)
 4008f08:	e17fff0b 	ldhu	r5,-4(fp)
 4008f0c:	e1bfff0b 	ldhu	r6,-4(fp)
 4008f10:	d8000715 	stw	zero,28(sp)
 4008f14:	e1c00417 	ldw	r7,16(fp)
 4008f18:	d9c00615 	stw	r7,24(sp)
 4008f1c:	d9800515 	stw	r6,20(sp)
 4008f20:	d9400415 	stw	r5,16(sp)
 4008f24:	d9000315 	stw	r4,12(sp)
 4008f28:	d8c00215 	stw	r3,8(sp)
 4008f2c:	d8800115 	stw	r2,4(sp)
 4008f30:	00800044 	movi	r2,1
 4008f34:	d8800015 	stw	r2,0(sp)
 4008f38:	01c02844 	movi	r7,161
 4008f3c:	500d883a 	mov	r6,r10
 4008f40:	480b883a 	mov	r5,r9
 4008f44:	4009883a 	mov	r4,r8
 4008f48:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4008f4c:	e037883a 	mov	sp,fp
 4008f50:	dfc00117 	ldw	ra,4(sp)
 4008f54:	df000017 	ldw	fp,0(sp)
 4008f58:	dec00204 	addi	sp,sp,8
 4008f5c:	f800283a 	ret

04008f60 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
 4008f60:	defff204 	addi	sp,sp,-56
 4008f64:	dfc00d15 	stw	ra,52(sp)
 4008f68:	df000c15 	stw	fp,48(sp)
 4008f6c:	df000c04 	addi	fp,sp,48
 4008f70:	e13ffc15 	stw	r4,-16(fp)
 4008f74:	2807883a 	mov	r3,r5
 4008f78:	3005883a 	mov	r2,r6
 4008f7c:	e1ffff15 	stw	r7,-4(fp)
 4008f80:	e0fffd05 	stb	r3,-12(fp)
 4008f84:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
 4008f88:	e0bffc17 	ldw	r2,-16(fp)
 4008f8c:	12000217 	ldw	r8,8(r2)
 4008f90:	e0bffc17 	ldw	r2,-16(fp)
 4008f94:	10800303 	ldbu	r2,12(r2)
 4008f98:	11403fcc 	andi	r5,r2,255
 4008f9c:	e0bffe03 	ldbu	r2,-8(fp)
 4008fa0:	e0fffd03 	ldbu	r3,-12(fp)
 4008fa4:	d8000715 	stw	zero,28(sp)
 4008fa8:	e13fff17 	ldw	r4,-4(fp)
 4008fac:	d9000615 	stw	r4,24(sp)
 4008fb0:	01000044 	movi	r4,1
 4008fb4:	d9000515 	stw	r4,20(sp)
 4008fb8:	01000044 	movi	r4,1
 4008fbc:	d9000415 	stw	r4,16(sp)
 4008fc0:	d8c00315 	stw	r3,12(sp)
 4008fc4:	d8000215 	stw	zero,8(sp)
 4008fc8:	d8800115 	stw	r2,4(sp)
 4008fcc:	00800084 	movi	r2,2
 4008fd0:	d8800015 	stw	r2,0(sp)
 4008fd4:	01c02844 	movi	r7,161
 4008fd8:	000d883a 	mov	r6,zero
 4008fdc:	4009883a 	mov	r4,r8
 4008fe0:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4008fe4:	e037883a 	mov	sp,fp
 4008fe8:	dfc00117 	ldw	ra,4(sp)
 4008fec:	df000017 	ldw	fp,0(sp)
 4008ff0:	dec00204 	addi	sp,sp,8
 4008ff4:	f800283a 	ret

04008ff8 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
 4008ff8:	defff204 	addi	sp,sp,-56
 4008ffc:	dfc00d15 	stw	ra,52(sp)
 4009000:	df000c15 	stw	fp,48(sp)
 4009004:	df000c04 	addi	fp,sp,48
 4009008:	e13ffc15 	stw	r4,-16(fp)
 400900c:	2809883a 	mov	r4,r5
 4009010:	3007883a 	mov	r3,r6
 4009014:	3805883a 	mov	r2,r7
 4009018:	e13ffd05 	stb	r4,-12(fp)
 400901c:	e0fffe05 	stb	r3,-8(fp)
 4009020:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
 4009024:	e0bffc17 	ldw	r2,-16(fp)
 4009028:	12000217 	ldw	r8,8(r2)
 400902c:	e0bffc17 	ldw	r2,-16(fp)
 4009030:	10800303 	ldbu	r2,12(r2)
 4009034:	11403fcc 	andi	r5,r2,255
 4009038:	e0bffe03 	ldbu	r2,-8(fp)
 400903c:	e0ffff03 	ldbu	r3,-4(fp)
 4009040:	e13ffd03 	ldbu	r4,-12(fp)
 4009044:	d8000715 	stw	zero,28(sp)
 4009048:	d8000615 	stw	zero,24(sp)
 400904c:	d8000515 	stw	zero,20(sp)
 4009050:	d8000415 	stw	zero,16(sp)
 4009054:	d9000315 	stw	r4,12(sp)
 4009058:	d8c00215 	stw	r3,8(sp)
 400905c:	d8800115 	stw	r2,4(sp)
 4009060:	00800284 	movi	r2,10
 4009064:	d8800015 	stw	r2,0(sp)
 4009068:	01c00844 	movi	r7,33
 400906c:	000d883a 	mov	r6,zero
 4009070:	4009883a 	mov	r4,r8
 4009074:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4009078:	e037883a 	mov	sp,fp
 400907c:	dfc00117 	ldw	ra,4(sp)
 4009080:	df000017 	ldw	fp,0(sp)
 4009084:	dec00204 	addi	sp,sp,8
 4009088:	f800283a 	ret

0400908c <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
 400908c:	defff304 	addi	sp,sp,-52
 4009090:	dfc00c15 	stw	ra,48(sp)
 4009094:	df000b15 	stw	fp,44(sp)
 4009098:	df000b04 	addi	fp,sp,44
 400909c:	e13ffd15 	stw	r4,-12(fp)
 40090a0:	2807883a 	mov	r3,r5
 40090a4:	3005883a 	mov	r2,r6
 40090a8:	e0fffe05 	stb	r3,-8(fp)
 40090ac:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
 40090b0:	e0bffd17 	ldw	r2,-12(fp)
 40090b4:	11000217 	ldw	r4,8(r2)
 40090b8:	e0bffd17 	ldw	r2,-12(fp)
 40090bc:	10800303 	ldbu	r2,12(r2)
 40090c0:	11403fcc 	andi	r5,r2,255
 40090c4:	e0bfff03 	ldbu	r2,-4(fp)
 40090c8:	e0fffe03 	ldbu	r3,-8(fp)
 40090cc:	d8000715 	stw	zero,28(sp)
 40090d0:	d8000615 	stw	zero,24(sp)
 40090d4:	d8000515 	stw	zero,20(sp)
 40090d8:	d8000415 	stw	zero,16(sp)
 40090dc:	d8c00315 	stw	r3,12(sp)
 40090e0:	d8000215 	stw	zero,8(sp)
 40090e4:	d8800115 	stw	r2,4(sp)
 40090e8:	008002c4 	movi	r2,11
 40090ec:	d8800015 	stw	r2,0(sp)
 40090f0:	01c00844 	movi	r7,33
 40090f4:	000d883a 	mov	r6,zero
 40090f8:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 40090fc:	e037883a 	mov	sp,fp
 4009100:	dfc00117 	ldw	ra,4(sp)
 4009104:	df000017 	ldw	fp,0(sp)
 4009108:	dec00204 	addi	sp,sp,8
 400910c:	f800283a 	ret

04009110 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
 4009110:	defff304 	addi	sp,sp,-52
 4009114:	dfc00c15 	stw	ra,48(sp)
 4009118:	df000b15 	stw	fp,44(sp)
 400911c:	df000b04 	addi	fp,sp,44
 4009120:	e13ffd15 	stw	r4,-12(fp)
 4009124:	2805883a 	mov	r2,r5
 4009128:	e1bfff15 	stw	r6,-4(fp)
 400912c:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
 4009130:	e0bffd17 	ldw	r2,-12(fp)
 4009134:	11000217 	ldw	r4,8(r2)
 4009138:	e0bffd17 	ldw	r2,-12(fp)
 400913c:	10800303 	ldbu	r2,12(r2)
 4009140:	11403fcc 	andi	r5,r2,255
 4009144:	e0bffe03 	ldbu	r2,-8(fp)
 4009148:	d8000715 	stw	zero,28(sp)
 400914c:	e0ffff17 	ldw	r3,-4(fp)
 4009150:	d8c00615 	stw	r3,24(sp)
 4009154:	00c00044 	movi	r3,1
 4009158:	d8c00515 	stw	r3,20(sp)
 400915c:	00c00044 	movi	r3,1
 4009160:	d8c00415 	stw	r3,16(sp)
 4009164:	d8800315 	stw	r2,12(sp)
 4009168:	d8000215 	stw	zero,8(sp)
 400916c:	d8000115 	stw	zero,4(sp)
 4009170:	008000c4 	movi	r2,3
 4009174:	d8800015 	stw	r2,0(sp)
 4009178:	01c02844 	movi	r7,161
 400917c:	000d883a 	mov	r6,zero
 4009180:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4009184:	e037883a 	mov	sp,fp
 4009188:	dfc00117 	ldw	ra,4(sp)
 400918c:	df000017 	ldw	fp,0(sp)
 4009190:	dec00204 	addi	sp,sp,8
 4009194:	f800283a 	ret

04009198 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
 4009198:	defffc04 	addi	sp,sp,-16
 400919c:	dfc00315 	stw	ra,12(sp)
 40091a0:	df000215 	stw	fp,8(sp)
 40091a4:	df000204 	addi	fp,sp,8
 40091a8:	e13ffe15 	stw	r4,-8(fp)
 40091ac:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
 40091b0:	e0bfff17 	ldw	r2,-4(fp)
 40091b4:	10800003 	ldbu	r2,0(r2)
 40091b8:	10803fcc 	andi	r2,r2,255
 40091bc:	01402004 	movi	r5,128
 40091c0:	1009883a 	mov	r4,r2
 40091c4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
 40091c8:	e0bfff17 	ldw	r2,-4(fp)
 40091cc:	10800043 	ldbu	r2,1(r2)
 40091d0:	10803fcc 	andi	r2,r2,255
 40091d4:	01402004 	movi	r5,128
 40091d8:	1009883a 	mov	r4,r2
 40091dc:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
 40091e0:	e0bfff17 	ldw	r2,-4(fp)
 40091e4:	10800083 	ldbu	r2,2(r2)
 40091e8:	10803fcc 	andi	r2,r2,255
 40091ec:	01402004 	movi	r5,128
 40091f0:	1009883a 	mov	r4,r2
 40091f4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
 40091f8:	e0bfff17 	ldw	r2,-4(fp)
 40091fc:	108000c3 	ldbu	r2,3(r2)
 4009200:	10803fcc 	andi	r2,r2,255
 4009204:	01402004 	movi	r5,128
 4009208:	1009883a 	mov	r4,r2
 400920c:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
 4009210:	e0bfff17 	ldw	r2,-4(fp)
 4009214:	10c00103 	ldbu	r3,4(r2)
 4009218:	10800143 	ldbu	r2,5(r2)
 400921c:	1004923a 	slli	r2,r2,8
 4009220:	10c4b03a 	or	r2,r2,r3
 4009224:	10bfffcc 	andi	r2,r2,65535
 4009228:	01402004 	movi	r5,128
 400922c:	1009883a 	mov	r4,r2
 4009230:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
 4009234:	e0bfff17 	ldw	r2,-4(fp)
 4009238:	10800183 	ldbu	r2,6(r2)
 400923c:	10803fcc 	andi	r2,r2,255
 4009240:	01402004 	movi	r5,128
 4009244:	1009883a 	mov	r4,r2
 4009248:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
}
 400924c:	0001883a 	nop
 4009250:	e037883a 	mov	sp,fp
 4009254:	dfc00117 	ldw	ra,4(sp)
 4009258:	df000017 	ldw	fp,0(sp)
 400925c:	dec00204 	addi	sp,sp,8
 4009260:	f800283a 	ret

04009264 <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
 4009264:	defffc04 	addi	sp,sp,-16
 4009268:	dfc00315 	stw	ra,12(sp)
 400926c:	df000215 	stw	fp,8(sp)
 4009270:	df000204 	addi	fp,sp,8
 4009274:	e13ffe15 	stw	r4,-8(fp)
 4009278:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
 400927c:	e0bfff17 	ldw	r2,-4(fp)
 4009280:	10800003 	ldbu	r2,0(r2)
 4009284:	10803fcc 	andi	r2,r2,255
 4009288:	01402004 	movi	r5,128
 400928c:	1009883a 	mov	r4,r2
 4009290:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
 4009294:	e0bfff17 	ldw	r2,-4(fp)
 4009298:	10800043 	ldbu	r2,1(r2)
 400929c:	10803fcc 	andi	r2,r2,255
 40092a0:	01402004 	movi	r5,128
 40092a4:	1009883a 	mov	r4,r2
 40092a8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
 40092ac:	e0bfff17 	ldw	r2,-4(fp)
 40092b0:	10c00083 	ldbu	r3,2(r2)
 40092b4:	108000c3 	ldbu	r2,3(r2)
 40092b8:	1004923a 	slli	r2,r2,8
 40092bc:	10c4b03a 	or	r2,r2,r3
 40092c0:	10bfffcc 	andi	r2,r2,65535
 40092c4:	01402004 	movi	r5,128
 40092c8:	1009883a 	mov	r4,r2
 40092cc:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
 40092d0:	e0bfff17 	ldw	r2,-4(fp)
 40092d4:	10800103 	ldbu	r2,4(r2)
 40092d8:	10803fcc 	andi	r2,r2,255
 40092dc:	01402004 	movi	r5,128
 40092e0:	1009883a 	mov	r4,r2
 40092e4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
 40092e8:	e0bfff17 	ldw	r2,-4(fp)
 40092ec:	10800143 	ldbu	r2,5(r2)
 40092f0:	10803fcc 	andi	r2,r2,255
 40092f4:	01402004 	movi	r5,128
 40092f8:	1009883a 	mov	r4,r2
 40092fc:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
 4009300:	e0bfff17 	ldw	r2,-4(fp)
 4009304:	10800183 	ldbu	r2,6(r2)
 4009308:	10803fcc 	andi	r2,r2,255
 400930c:	01402004 	movi	r5,128
 4009310:	1009883a 	mov	r4,r2
 4009314:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
 4009318:	e0bfff17 	ldw	r2,-4(fp)
 400931c:	10c001c3 	ldbu	r3,7(r2)
 4009320:	10800203 	ldbu	r2,8(r2)
 4009324:	1004923a 	slli	r2,r2,8
 4009328:	10c4b03a 	or	r2,r2,r3
 400932c:	10bfffcc 	andi	r2,r2,65535
 4009330:	01402004 	movi	r5,128
 4009334:	1009883a 	mov	r4,r2
 4009338:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
}
 400933c:	0001883a 	nop
 4009340:	e037883a 	mov	sp,fp
 4009344:	dfc00117 	ldw	ra,4(sp)
 4009348:	df000017 	ldw	fp,0(sp)
 400934c:	dec00204 	addi	sp,sp,8
 4009350:	f800283a 	ret

04009354 <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
 4009354:	defffd04 	addi	sp,sp,-12
 4009358:	dfc00215 	stw	ra,8(sp)
 400935c:	df000115 	stw	fp,4(sp)
 4009360:	df000104 	addi	fp,sp,4
 4009364:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
 4009368:	010100b4 	movhi	r4,1026
 400936c:	21145904 	addi	r4,r4,20836
 4009370:	400f8100 	call	400f810 <puts>
	vbusState = 0;
 4009374:	d0323745 	stb	zero,-14115(gp)
};
 4009378:	0001883a 	nop
 400937c:	e037883a 	mov	sp,fp
 4009380:	dfc00117 	ldw	ra,4(sp)
 4009384:	df000017 	ldw	fp,0(sp)
 4009388:	dec00204 	addi	sp,sp,8
 400938c:	f800283a 	ret

04009390 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
 4009390:	defffe04 	addi	sp,sp,-8
 4009394:	df000115 	stw	fp,4(sp)
 4009398:	df000104 	addi	fp,sp,4
 400939c:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
 40093a0:	d0b23743 	ldbu	r2,-14115(gp)
};
 40093a4:	e037883a 	mov	sp,fp
 40093a8:	df000017 	ldw	fp,0(sp)
 40093ac:	dec00104 	addi	sp,sp,4
 40093b0:	f800283a 	ret

040093b4 <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
 40093b4:	defff704 	addi	sp,sp,-36
 40093b8:	dfc00815 	stw	ra,32(sp)
 40093bc:	df000715 	stw	fp,28(sp)
 40093c0:	df000704 	addi	fp,sp,28
 40093c4:	e13ffd15 	stw	r4,-12(fp)
 40093c8:	2807883a 	mov	r3,r5
 40093cc:	3005883a 	mov	r2,r6
 40093d0:	e0fffe05 	stb	r3,-8(fp)
 40093d4:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
 40093d8:	e03ffc45 	stb	zero,-15(fp)
 40093dc:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
 40093e0:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
 40093e4:	e0bffe03 	ldbu	r2,-8(fp)
 40093e8:	10800084 	addi	r2,r2,2
 40093ec:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
 40093f0:	e0bfff03 	ldbu	r2,-4(fp)
 40093f4:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
 40093f8:	e0fffc44 	addi	r3,fp,-15
 40093fc:	d8000215 	stw	zero,8(sp)
 4009400:	e0bffcc4 	addi	r2,fp,-13
 4009404:	d8800115 	stw	r2,4(sp)
 4009408:	d8000015 	stw	zero,0(sp)
 400940c:	180f883a 	mov	r7,r3
 4009410:	01800084 	movi	r6,2
 4009414:	000b883a 	mov	r5,zero
 4009418:	01020034 	movhi	r4,2048
 400941c:	21043804 	addi	r4,r4,4320
 4009420:	401f1740 	call	401f174 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
 4009424:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
 4009428:	0001883a 	nop
 400942c:	e037883a 	mov	sp,fp
 4009430:	dfc00117 	ldw	ra,4(sp)
 4009434:	df000017 	ldw	fp,0(sp)
 4009438:	dec00204 	addi	sp,sp,8
 400943c:	f800283a 	ret

04009440 <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
 4009440:	defff304 	addi	sp,sp,-52
 4009444:	dfc00c15 	stw	ra,48(sp)
 4009448:	df000b15 	stw	fp,44(sp)
 400944c:	dc000a15 	stw	r16,40(sp)
 4009450:	df000b04 	addi	fp,sp,44
 4009454:	e13ffb15 	stw	r4,-20(fp)
 4009458:	3009883a 	mov	r4,r6
 400945c:	e1fffe15 	stw	r7,-8(fp)
 4009460:	e17ffc05 	stb	r5,-16(fp)
 4009464:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
 4009468:	d809883a 	mov	r4,sp
 400946c:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
 4009470:	e13ffd03 	ldbu	r4,-12(fp)
 4009474:	e13ff815 	stw	r4,-32(fp)
 4009478:	200b883a 	mov	r5,r4
 400947c:	29400044 	addi	r5,r5,1
 4009480:	2819883a 	mov	r12,r5
 4009484:	001b883a 	mov	r13,zero
 4009488:	600ad77a 	srli	r5,r12,29
 400948c:	681290fa 	slli	r9,r13,3
 4009490:	2a52b03a 	or	r9,r5,r9
 4009494:	601090fa 	slli	r8,r12,3
 4009498:	200b883a 	mov	r5,r4
 400949c:	29400044 	addi	r5,r5,1
 40094a0:	2815883a 	mov	r10,r5
 40094a4:	0017883a 	mov	r11,zero
 40094a8:	500ad77a 	srli	r5,r10,29
 40094ac:	580690fa 	slli	r3,r11,3
 40094b0:	28c6b03a 	or	r3,r5,r3
 40094b4:	500490fa 	slli	r2,r10,3
 40094b8:	2005883a 	mov	r2,r4
 40094bc:	10800044 	addi	r2,r2,1
 40094c0:	108000c4 	addi	r2,r2,3
 40094c4:	1004d0ba 	srli	r2,r2,2
 40094c8:	1085883a 	add	r2,r2,r2
 40094cc:	1085883a 	add	r2,r2,r2
 40094d0:	d8b7c83a 	sub	sp,sp,r2
 40094d4:	d8800304 	addi	r2,sp,12
 40094d8:	1005883a 	mov	r2,r2
 40094dc:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
 40094e0:	e0bffc03 	ldbu	r2,-16(fp)
 40094e4:	10800084 	addi	r2,r2,2
 40094e8:	1007883a 	mov	r3,r2
 40094ec:	e0bff917 	ldw	r2,-28(fp)
 40094f0:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
 40094f4:	e0bff917 	ldw	r2,-28(fp)
 40094f8:	10800044 	addi	r2,r2,1
 40094fc:	e0fffd03 	ldbu	r3,-12(fp)
 4009500:	180d883a 	mov	r6,r3
 4009504:	e17ffe17 	ldw	r5,-8(fp)
 4009508:	1009883a 	mov	r4,r2
 400950c:	400f4540 	call	400f454 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
 4009510:	e0bffd03 	ldbu	r2,-12(fp)
 4009514:	10800044 	addi	r2,r2,1
 4009518:	1009883a 	mov	r4,r2
 400951c:	e0fff917 	ldw	r3,-28(fp)
 4009520:	d8000215 	stw	zero,8(sp)
 4009524:	e0bffa44 	addi	r2,fp,-23
 4009528:	d8800115 	stw	r2,4(sp)
 400952c:	d8000015 	stw	zero,0(sp)
 4009530:	180f883a 	mov	r7,r3
 4009534:	200d883a 	mov	r6,r4
 4009538:	000b883a 	mov	r5,zero
 400953c:	01020034 	movhi	r4,2048
 4009540:	21043804 	addi	r4,r4,4320
 4009544:	401f1740 	call	401f174 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
 4009548:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
 400954c:	e0bffd03 	ldbu	r2,-12(fp)
 4009550:	e0fffe17 	ldw	r3,-8(fp)
 4009554:	1885883a 	add	r2,r3,r2
 4009558:	8037883a 	mov	sp,r16
}
 400955c:	e6ffff04 	addi	sp,fp,-4
 4009560:	dfc00217 	ldw	ra,8(sp)
 4009564:	df000117 	ldw	fp,4(sp)
 4009568:	dc000017 	ldw	r16,0(sp)
 400956c:	dec00304 	addi	sp,sp,12
 4009570:	f800283a 	ret

04009574 <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
 4009574:	defffc04 	addi	sp,sp,-16
 4009578:	dfc00315 	stw	ra,12(sp)
 400957c:	df000215 	stw	fp,8(sp)
 4009580:	df000204 	addi	fp,sp,8
 4009584:	e13ffe15 	stw	r4,-8(fp)
 4009588:	2805883a 	mov	r2,r5
 400958c:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
 4009590:	010100b4 	movhi	r4,1026
 4009594:	21145f04 	addi	r4,r4,20860
 4009598:	400f8100 	call	400f810 <puts>
	regWr(rIOPINS1, data);
 400959c:	e0bfff03 	ldbu	r2,-4(fp)
 40095a0:	100d883a 	mov	r6,r2
 40095a4:	01402804 	movi	r5,160
 40095a8:	e13ffe17 	ldw	r4,-8(fp)
 40095ac:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
 40095b0:	e0bfff03 	ldbu	r2,-4(fp)
 40095b4:	1005d13a 	srai	r2,r2,4
 40095b8:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
 40095bc:	e0bfff03 	ldbu	r2,-4(fp)
 40095c0:	100d883a 	mov	r6,r2
 40095c4:	01402a04 	movi	r5,168
 40095c8:	e13ffe17 	ldw	r4,-8(fp)
 40095cc:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	return;
 40095d0:	0001883a 	nop
}
 40095d4:	e037883a 	mov	sp,fp
 40095d8:	dfc00117 	ldw	ra,4(sp)
 40095dc:	df000017 	ldw	fp,0(sp)
 40095e0:	dec00204 	addi	sp,sp,8
 40095e4:	f800283a 	ret

040095e8 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
 40095e8:	defff804 	addi	sp,sp,-32
 40095ec:	dfc00715 	stw	ra,28(sp)
 40095f0:	df000615 	stw	fp,24(sp)
 40095f4:	df000604 	addi	fp,sp,24
 40095f8:	e13ffe15 	stw	r4,-8(fp)
 40095fc:	2805883a 	mov	r2,r5
 4009600:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
 4009604:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
 4009608:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
 400960c:	e0bfff03 	ldbu	r2,-4(fp)
 4009610:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
 4009614:	e0fffd44 	addi	r3,fp,-11
 4009618:	d8000215 	stw	zero,8(sp)
 400961c:	e0bffd84 	addi	r2,fp,-10
 4009620:	d8800115 	stw	r2,4(sp)
 4009624:	00800044 	movi	r2,1
 4009628:	d8800015 	stw	r2,0(sp)
 400962c:	180f883a 	mov	r7,r3
 4009630:	01800044 	movi	r6,1
 4009634:	000b883a 	mov	r5,zero
 4009638:	01020034 	movhi	r4,2048
 400963c:	21043804 	addi	r4,r4,4320
 4009640:	401f1740 	call	401f174 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
 4009644:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
 4009648:	e0bffd83 	ldbu	r2,-10(fp)
}
 400964c:	e037883a 	mov	sp,fp
 4009650:	dfc00117 	ldw	ra,4(sp)
 4009654:	df000017 	ldw	fp,0(sp)
 4009658:	dec00204 	addi	sp,sp,8
 400965c:	f800283a 	ret

04009660 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
 4009660:	defff604 	addi	sp,sp,-40
 4009664:	dfc00915 	stw	ra,36(sp)
 4009668:	df000815 	stw	fp,32(sp)
 400966c:	df000804 	addi	fp,sp,32
 4009670:	e13ffc15 	stw	r4,-16(fp)
 4009674:	2807883a 	mov	r3,r5
 4009678:	3005883a 	mov	r2,r6
 400967c:	e1ffff15 	stw	r7,-4(fp)
 4009680:	e0fffd05 	stb	r3,-12(fp)
 4009684:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
 4009688:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
 400968c:	e0bffd03 	ldbu	r2,-12(fp)
 4009690:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
 4009694:	e0bffe03 	ldbu	r2,-8(fp)
 4009698:	e13ffb44 	addi	r4,fp,-19
 400969c:	d8000215 	stw	zero,8(sp)
 40096a0:	e0ffff17 	ldw	r3,-4(fp)
 40096a4:	d8c00115 	stw	r3,4(sp)
 40096a8:	d8800015 	stw	r2,0(sp)
 40096ac:	200f883a 	mov	r7,r4
 40096b0:	01800044 	movi	r6,1
 40096b4:	000b883a 	mov	r5,zero
 40096b8:	01020034 	movhi	r4,2048
 40096bc:	21043804 	addi	r4,r4,4320
 40096c0:	401f1740 	call	401f174 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
 40096c4:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
 40096c8:	e0bffe03 	ldbu	r2,-8(fp)
 40096cc:	e0ffff17 	ldw	r3,-4(fp)
 40096d0:	1885883a 	add	r2,r3,r2
}
 40096d4:	e037883a 	mov	sp,fp
 40096d8:	dfc00117 	ldw	ra,4(sp)
 40096dc:	df000017 	ldw	fp,0(sp)
 40096e0:	dec00204 	addi	sp,sp,8
 40096e4:	f800283a 	ret

040096e8 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
 40096e8:	defffc04 	addi	sp,sp,-16
 40096ec:	dfc00315 	stw	ra,12(sp)
 40096f0:	df000215 	stw	fp,8(sp)
 40096f4:	df000204 	addi	fp,sp,8
 40096f8:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
 40096fc:	010100b4 	movhi	r4,1026
 4009700:	21146304 	addi	r4,r4,20876
 4009704:	400f8100 	call	400f810 <puts>
	uint8_t gpin = 0;
 4009708:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
 400970c:	01402a04 	movi	r5,168
 4009710:	e13fff17 	ldw	r4,-4(fp)
 4009714:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009718:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
 400971c:	e0fffe03 	ldbu	r3,-8(fp)
 4009720:	00bffc04 	movi	r2,-16
 4009724:	1884703a 	and	r2,r3,r2
 4009728:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
 400972c:	01402804 	movi	r5,160
 4009730:	e13fff17 	ldw	r4,-4(fp)
 4009734:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009738:	10803fcc 	andi	r2,r2,255
 400973c:	1005d13a 	srai	r2,r2,4
 4009740:	1007883a 	mov	r3,r2
 4009744:	e0bffe03 	ldbu	r2,-8(fp)
 4009748:	1884b03a 	or	r2,r3,r2
 400974c:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
 4009750:	e0bffe03 	ldbu	r2,-8(fp)
}
 4009754:	e037883a 	mov	sp,fp
 4009758:	dfc00117 	ldw	ra,4(sp)
 400975c:	df000017 	ldw	fp,0(sp)
 4009760:	dec00204 	addi	sp,sp,8
 4009764:	f800283a 	ret

04009768 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
 4009768:	defffc04 	addi	sp,sp,-16
 400976c:	dfc00315 	stw	ra,12(sp)
 4009770:	df000215 	stw	fp,8(sp)
 4009774:	df000204 	addi	fp,sp,8
 4009778:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
 400977c:	010100b4 	movhi	r4,1026
 4009780:	21146704 	addi	r4,r4,20892
 4009784:	400f8100 	call	400f810 <puts>
	uint8_t gpout = 0;
 4009788:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
 400978c:	01402804 	movi	r5,160
 4009790:	e13fff17 	ldw	r4,-4(fp)
 4009794:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009798:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
 400979c:	e0bffe03 	ldbu	r2,-8(fp)
 40097a0:	108003cc 	andi	r2,r2,15
 40097a4:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
 40097a8:	01402a04 	movi	r5,168
 40097ac:	e13fff17 	ldw	r4,-4(fp)
 40097b0:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 40097b4:	10803fcc 	andi	r2,r2,255
 40097b8:	1004913a 	slli	r2,r2,4
 40097bc:	1007883a 	mov	r3,r2
 40097c0:	e0bffe03 	ldbu	r2,-8(fp)
 40097c4:	1884b03a 	or	r2,r3,r2
 40097c8:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
 40097cc:	e0bffe03 	ldbu	r2,-8(fp)
}
 40097d0:	e037883a 	mov	sp,fp
 40097d4:	dfc00117 	ldw	ra,4(sp)
 40097d8:	df000017 	ldw	fp,0(sp)
 40097dc:	dec00204 	addi	sp,sp,8
 40097e0:	f800283a 	ret

040097e4 <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
 40097e4:	defffc04 	addi	sp,sp,-16
 40097e8:	dfc00315 	stw	ra,12(sp)
 40097ec:	df000215 	stw	fp,8(sp)
 40097f0:	df000204 	addi	fp,sp,8
 40097f4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
 40097f8:	010100b4 	movhi	r4,1026
 40097fc:	21146d04 	addi	r4,r4,20916
 4009800:	400f8100 	call	400f810 <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 4009804:	0007883a 	mov	r3,zero
 4009808:	00820034 	movhi	r2,2048
 400980c:	10849804 	addi	r2,r2,4704
 4009810:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 4009814:	010003f4 	movhi	r4,15
 4009818:	21109004 	addi	r4,r4,16960
 400981c:	401c8a80 	call	401c8a8 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 4009820:	00c00044 	movi	r3,1
 4009824:	00820034 	movhi	r2,2048
 4009828:	10849804 	addi	r2,r2,4704
 400982c:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
 4009830:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
 4009834:	01800804 	movi	r6,32
 4009838:	01401e04 	movi	r5,120
 400983c:	e13fff17 	ldw	r4,-4(fp)
 4009840:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
 4009844:	000d883a 	mov	r6,zero
 4009848:	01401e04 	movi	r5,120
 400984c:	e13fff17 	ldw	r4,-4(fp)
 4009850:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	while(++i) {
 4009854:	e0bffe0b 	ldhu	r2,-8(fp)
 4009858:	10800044 	addi	r2,r2,1
 400985c:	e0bffe0d 	sth	r2,-8(fp)
 4009860:	e0bffe0b 	ldhu	r2,-8(fp)
 4009864:	1004c03a 	cmpne	r2,r2,zero
 4009868:	10803fcc 	andi	r2,r2,255
 400986c:	10000a26 	beq	r2,zero,4009898 <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 4009870:	01401a04 	movi	r5,104
 4009874:	e13fff17 	ldw	r4,-4(fp)
 4009878:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 400987c:	10803fcc 	andi	r2,r2,255
 4009880:	1080004c 	andi	r2,r2,1
 4009884:	1004c03a 	cmpne	r2,r2,zero
 4009888:	10803fcc 	andi	r2,r2,255
 400988c:	1000011e 	bne	r2,zero,4009894 <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
 4009890:	003ff006 	br	4009854 <__alt_mem_onchip_memory2_0+0xfc0085b4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
 4009894:	0001883a 	nop
		}
	}
	return ( i);
 4009898:	e0bffe0b 	ldhu	r2,-8(fp)
}
 400989c:	e037883a 	mov	sp,fp
 40098a0:	dfc00117 	ldw	ra,4(sp)
 40098a4:	df000017 	ldw	fp,0(sp)
 40098a8:	dec00204 	addi	sp,sp,8
 40098ac:	f800283a 	ret

040098b0 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
 40098b0:	defffe04 	addi	sp,sp,-8
 40098b4:	df000115 	stw	fp,4(sp)
 40098b8:	df000104 	addi	fp,sp,4
 40098bc:	2005883a 	mov	r2,r4
 40098c0:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
 40098c4:	00800044 	movi	r2,1
}
 40098c8:	e037883a 	mov	sp,fp
 40098cc:	df000017 	ldw	fp,0(sp)
 40098d0:	dec00104 	addi	sp,sp,4
 40098d4:	f800283a 	ret

040098d8 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
 40098d8:	defffd04 	addi	sp,sp,-12
 40098dc:	dfc00215 	stw	ra,8(sp)
 40098e0:	df000115 	stw	fp,4(sp)
 40098e4:	df000104 	addi	fp,sp,4
 40098e8:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
 40098ec:	010100b4 	movhi	r4,1026
 40098f0:	21147104 	addi	r4,r4,20932
 40098f4:	400f8100 	call	400f810 <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 40098f8:	01800604 	movi	r6,24
 40098fc:	01402204 	movi	r5,136
 4009900:	e13fff17 	ldw	r4,-4(fp)
 4009904:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 4009908:	e13fff17 	ldw	r4,-4(fp)
 400990c:	40097e40 	call	40097e4 <_ZN8MAX3421e5resetEv>
 4009910:	10bfffcc 	andi	r2,r2,65535
 4009914:	1005003a 	cmpeq	r2,r2,zero
 4009918:	10803fcc 	andi	r2,r2,255
 400991c:	10000226 	beq	r2,zero,4009928 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
 4009920:	00bfffc4 	movi	r2,-1
 4009924:	00002006 	br	40099a8 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 4009928:	01803044 	movi	r6,193
 400992c:	01403604 	movi	r5,216
 4009930:	e13fff17 	ldw	r4,-4(fp)
 4009934:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 4009938:	01801804 	movi	r6,96
 400993c:	01403404 	movi	r5,208
 4009940:	e13fff17 	ldw	r4,-4(fp)
 4009944:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 4009948:	01800104 	movi	r6,4
 400994c:	01403a04 	movi	r5,232
 4009950:	e13fff17 	ldw	r4,-4(fp)
 4009954:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 4009958:	01403a04 	movi	r5,232
 400995c:	e13fff17 	ldw	r4,-4(fp)
 4009960:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009964:	10803fcc 	andi	r2,r2,255
 4009968:	1080010c 	andi	r2,r2,4
 400996c:	1005003a 	cmpeq	r2,r2,zero
 4009970:	10803fcc 	andi	r2,r2,255
 4009974:	10000126 	beq	r2,zero,400997c <_ZN8MAX3421e4InitEv+0xa4>
 4009978:	003ff706 	br	4009958 <__alt_mem_onchip_memory2_0+0xfc0086b8>

	busprobe(); //check if anything is connected
 400997c:	e13fff17 	ldw	r4,-4(fp)
 4009980:	4009ad40 	call	4009ad4 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 4009984:	01800804 	movi	r6,32
 4009988:	01403204 	movi	r5,200
 400998c:	e13fff17 	ldw	r4,-4(fp)
 4009990:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
 4009994:	01800044 	movi	r6,1
 4009998:	01402004 	movi	r5,128
 400999c:	e13fff17 	ldw	r4,-4(fp)
 40099a0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
 40099a4:	0005883a 	mov	r2,zero
}
 40099a8:	e037883a 	mov	sp,fp
 40099ac:	dfc00117 	ldw	ra,4(sp)
 40099b0:	df000017 	ldw	fp,0(sp)
 40099b4:	dec00204 	addi	sp,sp,8
 40099b8:	f800283a 	ret

040099bc <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
 40099bc:	defffc04 	addi	sp,sp,-16
 40099c0:	dfc00315 	stw	ra,12(sp)
 40099c4:	df000215 	stw	fp,8(sp)
 40099c8:	df000204 	addi	fp,sp,8
 40099cc:	e13ffe15 	stw	r4,-8(fp)
 40099d0:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
 40099d4:	010100b4 	movhi	r4,1026
 40099d8:	21147504 	addi	r4,r4,20948
 40099dc:	400f8100 	call	400f810 <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
 40099e0:	01800644 	movi	r6,25
 40099e4:	01402204 	movi	r5,136
 40099e8:	e13ffe17 	ldw	r4,-8(fp)
 40099ec:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 40099f0:	e13ffe17 	ldw	r4,-8(fp)
 40099f4:	40097e40 	call	40097e4 <_ZN8MAX3421e5resetEv>
 40099f8:	10bfffcc 	andi	r2,r2,65535
 40099fc:	1005003a 	cmpeq	r2,r2,zero
 4009a00:	10803fcc 	andi	r2,r2,255
 4009a04:	10000226 	beq	r2,zero,4009a10 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
 4009a08:	00bfffc4 	movi	r2,-1
 4009a0c:	00002c06 	br	4009ac0 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
 4009a10:	e0bfff17 	ldw	r2,-4(fp)
 4009a14:	1080fa08 	cmpgei	r2,r2,1000
 4009a18:	1000021e 	bne	r2,zero,4009a24 <_ZN8MAX3421e4InitEi+0x68>
 4009a1c:	0080fa04 	movi	r2,1000
 4009a20:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
 4009a24:	e0bfff17 	ldw	r2,-4(fp)
 4009a28:	1009883a 	mov	r4,r2
 4009a2c:	4000dd40 	call	4000dd4 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 4009a30:	01803044 	movi	r6,193
 4009a34:	01403604 	movi	r5,216
 4009a38:	e13ffe17 	ldw	r4,-8(fp)
 4009a3c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 4009a40:	01801804 	movi	r6,96
 4009a44:	01403404 	movi	r5,208
 4009a48:	e13ffe17 	ldw	r4,-8(fp)
 4009a4c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 4009a50:	01800104 	movi	r6,4
 4009a54:	01403a04 	movi	r5,232
 4009a58:	e13ffe17 	ldw	r4,-8(fp)
 4009a5c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 4009a60:	01403a04 	movi	r5,232
 4009a64:	e13ffe17 	ldw	r4,-8(fp)
 4009a68:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009a6c:	10803fcc 	andi	r2,r2,255
 4009a70:	1080010c 	andi	r2,r2,4
 4009a74:	1005003a 	cmpeq	r2,r2,zero
 4009a78:	10803fcc 	andi	r2,r2,255
 4009a7c:	10000126 	beq	r2,zero,4009a84 <_ZN8MAX3421e4InitEi+0xc8>
 4009a80:	003ff706 	br	4009a60 <__alt_mem_onchip_memory2_0+0xfc0087c0>

	busprobe(); //check if anything is connected
 4009a84:	e13ffe17 	ldw	r4,-8(fp)
 4009a88:	4009ad40 	call	4009ad4 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 4009a8c:	01800804 	movi	r6,32
 4009a90:	01403204 	movi	r5,200
 4009a94:	e13ffe17 	ldw	r4,-8(fp)
 4009a98:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
 4009a9c:	01800044 	movi	r6,1
 4009aa0:	01402004 	movi	r5,128
 4009aa4:	e13ffe17 	ldw	r4,-8(fp)
 4009aa8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 4009aac:	01800604 	movi	r6,24
 4009ab0:	01402204 	movi	r5,136
 4009ab4:	e13ffe17 	ldw	r4,-8(fp)
 4009ab8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	return ( 0);
 4009abc:	0005883a 	mov	r2,zero
}
 4009ac0:	e037883a 	mov	sp,fp
 4009ac4:	dfc00117 	ldw	ra,4(sp)
 4009ac8:	df000017 	ldw	fp,0(sp)
 4009acc:	dec00204 	addi	sp,sp,8
 4009ad0:	f800283a 	ret

04009ad4 <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
 4009ad4:	defffc04 	addi	sp,sp,-16
 4009ad8:	dfc00315 	stw	ra,12(sp)
 4009adc:	df000215 	stw	fp,8(sp)
 4009ae0:	df000204 	addi	fp,sp,8
 4009ae4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
 4009ae8:	010100b4 	movhi	r4,1026
 4009aec:	21147b04 	addi	r4,r4,20972
 4009af0:	400f8100 	call	400f810 <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
 4009af4:	01403e04 	movi	r5,248
 4009af8:	e13fff17 	ldw	r4,-4(fp)
 4009afc:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009b00:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 4009b04:	e0fffe03 	ldbu	r3,-8(fp)
 4009b08:	00bff004 	movi	r2,-64
 4009b0c:	1884703a 	and	r2,r3,r2
 4009b10:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
 4009b14:	e0bffe03 	ldbu	r2,-8(fp)
 4009b18:	10c01020 	cmpeqi	r3,r2,64
 4009b1c:	1800251e 	bne	r3,zero,4009bb4 <_ZN8MAX3421e8busprobeEv+0xe0>
 4009b20:	10c01048 	cmpgei	r3,r2,65
 4009b24:	1800021e 	bne	r3,zero,4009b30 <_ZN8MAX3421e8busprobeEv+0x5c>
 4009b28:	10003b26 	beq	r2,zero,4009c18 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
 4009b2c:	00004006 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
 4009b30:	10c02020 	cmpeqi	r3,r2,128
 4009b34:	1800031e 	bne	r3,zero,4009b44 <_ZN8MAX3421e8busprobeEv+0x70>
 4009b38:	10803020 	cmpeqi	r2,r2,192
 4009b3c:	1000331e 	bne	r2,zero,4009c0c <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
 4009b40:	00003b06 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
 4009b44:	01403604 	movi	r5,216
 4009b48:	e13fff17 	ldw	r4,-4(fp)
 4009b4c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009b50:	10803fcc 	andi	r2,r2,255
 4009b54:	1080008c 	andi	r2,r2,2
 4009b58:	1005003a 	cmpeq	r2,r2,zero
 4009b5c:	10803fcc 	andi	r2,r2,255
 4009b60:	10000a26 	beq	r2,zero,4009b8c <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
 4009b64:	010100b4 	movhi	r4,1026
 4009b68:	21148004 	addi	r4,r4,20992
 4009b6c:	400f8100 	call	400f810 <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
 4009b70:	01803244 	movi	r6,201
 4009b74:	01403604 	movi	r5,216
 4009b78:	e13fff17 	ldw	r4,-4(fp)
 4009b7c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
 4009b80:	00800084 	movi	r2,2
 4009b84:	d0b23745 	stb	r2,-14115(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
 4009b88:	00002906 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
 4009b8c:	010100b4 	movhi	r4,1026
 4009b90:	21148704 	addi	r4,r4,21020
 4009b94:	400f8100 	call	400f810 <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
 4009b98:	018032c4 	movi	r6,203
 4009b9c:	01403604 	movi	r5,216
 4009ba0:	e13fff17 	ldw	r4,-4(fp)
 4009ba4:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
 4009ba8:	008000c4 	movi	r2,3
 4009bac:	d0b23745 	stb	r2,-14115(gp)
			}
			break;
 4009bb0:	00001f06 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
 4009bb4:	01403604 	movi	r5,216
 4009bb8:	e13fff17 	ldw	r4,-4(fp)
 4009bbc:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009bc0:	10803fcc 	andi	r2,r2,255
 4009bc4:	1080008c 	andi	r2,r2,2
 4009bc8:	1005003a 	cmpeq	r2,r2,zero
 4009bcc:	10803fcc 	andi	r2,r2,255
 4009bd0:	10000726 	beq	r2,zero,4009bf0 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
 4009bd4:	018032c4 	movi	r6,203
 4009bd8:	01403604 	movi	r5,216
 4009bdc:	e13fff17 	ldw	r4,-4(fp)
 4009be0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
 4009be4:	008000c4 	movi	r2,3
 4009be8:	d0b23745 	stb	r2,-14115(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
 4009bec:	00001006 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
 4009bf0:	01803244 	movi	r6,201
 4009bf4:	01403604 	movi	r5,216
 4009bf8:	e13fff17 	ldw	r4,-4(fp)
 4009bfc:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
 4009c00:	00800084 	movi	r2,2
 4009c04:	d0b23745 	stb	r2,-14115(gp)
			}
			break;
 4009c08:	00000906 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
 4009c0c:	00800044 	movi	r2,1
 4009c10:	d0b23745 	stb	r2,-14115(gp)
			break;
 4009c14:	00000606 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 4009c18:	01803444 	movi	r6,209
 4009c1c:	01403604 	movi	r5,216
 4009c20:	e13fff17 	ldw	r4,-4(fp)
 4009c24:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
 4009c28:	d0323745 	stb	zero,-14115(gp)
			break;
 4009c2c:	0001883a 	nop
	}//end switch( bus_sample )
}
 4009c30:	0001883a 	nop
 4009c34:	e037883a 	mov	sp,fp
 4009c38:	dfc00117 	ldw	ra,4(sp)
 4009c3c:	df000017 	ldw	fp,0(sp)
 4009c40:	dec00204 	addi	sp,sp,8
 4009c44:	f800283a 	ret

04009c48 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
 4009c48:	defffc04 	addi	sp,sp,-16
 4009c4c:	dfc00315 	stw	ra,12(sp)
 4009c50:	df000215 	stw	fp,8(sp)
 4009c54:	df000204 	addi	fp,sp,8
 4009c58:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
 4009c5c:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
 4009c60:	00820034 	movhi	r2,2048
 4009c64:	1084a004 	addi	r2,r2,4736
 4009c68:	10800003 	ldbu	r2,0(r2)
 4009c6c:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 4009c70:	00820034 	movhi	r2,2048
 4009c74:	1084a004 	addi	r2,r2,4736
 4009c78:	10800037 	ldwio	r2,0(r2)
 4009c7c:	1005003a 	cmpeq	r2,r2,zero
 4009c80:	10803fcc 	andi	r2,r2,255
 4009c84:	10000326 	beq	r2,zero,4009c94 <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
 4009c88:	e13fff17 	ldw	r4,-4(fp)
 4009c8c:	4009cac0 	call	4009cac <_ZN8MAX3421e10IntHandlerEv>
 4009c90:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
 4009c94:	e0bffe03 	ldbu	r2,-8(fp)
}
 4009c98:	e037883a 	mov	sp,fp
 4009c9c:	dfc00117 	ldw	ra,4(sp)
 4009ca0:	df000017 	ldw	fp,0(sp)
 4009ca4:	dec00204 	addi	sp,sp,8
 4009ca8:	f800283a 	ret

04009cac <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
 4009cac:	defffc04 	addi	sp,sp,-16
 4009cb0:	dfc00315 	stw	ra,12(sp)
 4009cb4:	df000215 	stw	fp,8(sp)
 4009cb8:	df000204 	addi	fp,sp,8
 4009cbc:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
 4009cc0:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
 4009cc4:	01403204 	movi	r5,200
 4009cc8:	e13fff17 	ldw	r4,-4(fp)
 4009ccc:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009cd0:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
 4009cd4:	e0bffe43 	ldbu	r2,-7(fp)
 4009cd8:	1080080c 	andi	r2,r2,32
 4009cdc:	10000526 	beq	r2,zero,4009cf4 <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
 4009ce0:	e13fff17 	ldw	r4,-4(fp)
 4009ce4:	4009ad40 	call	4009ad4 <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
 4009ce8:	e0bffe03 	ldbu	r2,-8(fp)
 4009cec:	10800814 	ori	r2,r2,32
 4009cf0:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
 4009cf4:	e0bffe03 	ldbu	r2,-8(fp)
 4009cf8:	100d883a 	mov	r6,r2
 4009cfc:	01403204 	movi	r5,200
 4009d00:	e13fff17 	ldw	r4,-4(fp)
 4009d04:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
 4009d08:	e0bffe03 	ldbu	r2,-8(fp)
}
 4009d0c:	e037883a 	mov	sp,fp
 4009d10:	dfc00117 	ldw	ra,4(sp)
 4009d14:	df000017 	ldw	fp,0(sp)
 4009d18:	dec00204 	addi	sp,sp,8
 4009d1c:	f800283a 	ret

04009d20 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
 4009d20:	defffe04 	addi	sp,sp,-8
 4009d24:	df000115 	stw	fp,4(sp)
 4009d28:	df000104 	addi	fp,sp,4
 4009d2c:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
 4009d30:	0005883a 	mov	r2,zero
}
 4009d34:	e037883a 	mov	sp,fp
 4009d38:	df000017 	ldw	fp,0(sp)
 4009d3c:	dec00104 	addi	sp,sp,4
 4009d40:	f800283a 	ret

04009d44 <_Z8toBinaryh>:
USB_DEVICE_DESCRIPTOR buf;
USB Usb;


void toBinary(uint8_t a)
{
 4009d44:	defffc04 	addi	sp,sp,-16
 4009d48:	dfc00315 	stw	ra,12(sp)
 4009d4c:	df000215 	stw	fp,8(sp)
 4009d50:	df000204 	addi	fp,sp,8
 4009d54:	2005883a 	mov	r2,r4
 4009d58:	e0bfff05 	stb	r2,-4(fp)
    uint8_t i;

    for(i=0x80;i!=0;i>>=1)
 4009d5c:	00bfe004 	movi	r2,-128
 4009d60:	e0bffe05 	stb	r2,-8(fp)
 4009d64:	e0bffe03 	ldbu	r2,-8(fp)
 4009d68:	10000e26 	beq	r2,zero,4009da4 <_Z8toBinaryh+0x60>
        printf("%c",(a&i)?'1':'0');
 4009d6c:	e0ffff03 	ldbu	r3,-4(fp)
 4009d70:	e0bffe03 	ldbu	r2,-8(fp)
 4009d74:	1884703a 	and	r2,r3,r2
 4009d78:	10803fcc 	andi	r2,r2,255
 4009d7c:	10000226 	beq	r2,zero,4009d88 <_Z8toBinaryh+0x44>
 4009d80:	00800c44 	movi	r2,49
 4009d84:	00000106 	br	4009d8c <_Z8toBinaryh+0x48>
 4009d88:	00800c04 	movi	r2,48
 4009d8c:	1009883a 	mov	r4,r2
 4009d90:	400f7380 	call	400f738 <putchar>

void toBinary(uint8_t a)
{
    uint8_t i;

    for(i=0x80;i!=0;i>>=1)
 4009d94:	e0bffe03 	ldbu	r2,-8(fp)
 4009d98:	1005d07a 	srai	r2,r2,1
 4009d9c:	e0bffe05 	stb	r2,-8(fp)
 4009da0:	003ff006 	br	4009d64 <__alt_mem_onchip_memory2_0+0xfc008ac4>
        printf("%c",(a&i)?'1':'0');
}
 4009da4:	0001883a 	nop
 4009da8:	e037883a 	mov	sp,fp
 4009dac:	dfc00117 	ldw	ra,4(sp)
 4009db0:	df000017 	ldw	fp,0(sp)
 4009db4:	dec00204 	addi	sp,sp,8
 4009db8:	f800283a 	ret

04009dbc <main>:

extern "C" {
	#include "sgtl5000_test.h"
}

int main() {
 4009dbc:	deffa904 	addi	sp,sp,-348
 4009dc0:	dfc05615 	stw	ra,344(sp)
 4009dc4:	df005515 	stw	fp,340(sp)
 4009dc8:	ddc05415 	stw	r23,336(sp)
 4009dcc:	dd805315 	stw	r22,332(sp)
 4009dd0:	dd405215 	stw	r21,328(sp)
 4009dd4:	dd005115 	stw	r20,324(sp)
 4009dd8:	dcc05015 	stw	r19,320(sp)
 4009ddc:	dc804f15 	stw	r18,316(sp)
 4009de0:	dc404e15 	stw	r17,312(sp)
 4009de4:	dc004d15 	stw	r16,308(sp)
 4009de8:	df005504 	addi	fp,sp,340
	printf("Initializing SGTL5000...\n");
 4009dec:	010100b4 	movhi	r4,1026
 4009df0:	211cc304 	addi	r4,r4,29452
 4009df4:	400f8100 	call	400f810 <puts>
	initialize_sgtl5000();
 4009df8:	40006bc0 	call	40006bc <initialize_sgtl5000>
	printf("Initializing MIDI connection...\n");
 4009dfc:	010100b4 	movhi	r4,1026
 4009e00:	211cca04 	addi	r4,r4,29480
 4009e04:	400f8100 	call	400f810 <puts>
	USBH_MIDI Midi(&Usb);
 4009e08:	e0bfc504 	addi	r2,fp,-236
 4009e0c:	014100f4 	movhi	r5,1027
 4009e10:	29782504 	addi	r5,r5,-8044
 4009e14:	1009883a 	mov	r4,r2
 4009e18:	4006d540 	call	4006d54 <_ZN9USBH_MIDIC1EP3USB>
	if(Usb.Init() == -1){
 4009e1c:	010100f4 	movhi	r4,1027
 4009e20:	21382504 	addi	r4,r4,-8044
 4009e24:	40098d80 	call	40098d8 <_ZN8MAX3421e4InitEv>
 4009e28:	10803fcc 	andi	r2,r2,255
 4009e2c:	1080201c 	xori	r2,r2,128
 4009e30:	10bfe004 	addi	r2,r2,-128
 4009e34:	10bfffe0 	cmpeqi	r2,r2,-1
 4009e38:	10803fcc 	andi	r2,r2,255
 4009e3c:	10000426 	beq	r2,zero,4009e50 <main+0x94>
		printf("Halted...");
 4009e40:	010100b4 	movhi	r4,1026
 4009e44:	211cd204 	addi	r4,r4,29512
 4009e48:	400f6f40 	call	400f6f4 <printf>
		while(1);
 4009e4c:	003fff06 	br	4009e4c <__alt_mem_onchip_memory2_0+0xfc008bac>
	}
	delay(200);
 4009e50:	01003204 	movi	r4,200
 4009e54:	4000dd40 	call	4000dd4 <_Z5delaym>

	/* Pointers to PIOs */
	int NUM_NOTES = 4;
 4009e58:	00800104 	movi	r2,4
 4009e5c:	e0bfb615 	stw	r2,-296(fp)

	volatile unsigned int* note_vol_array[NUM_NOTES] = {(unsigned int*)0x08001200, (unsigned int*)0x080011f0, (unsigned int*)0x080011e0, (unsigned int*)0x080011d0};
 4009e60:	e0bfb617 	ldw	r2,-296(fp)
 4009e64:	113fffc4 	addi	r4,r2,-1
 4009e68:	e13fb715 	stw	r4,-292(fp)
 4009e6c:	2005883a 	mov	r2,r4
 4009e70:	10800044 	addi	r2,r2,1
 4009e74:	1025883a 	mov	r18,r2
 4009e78:	0027883a 	mov	r19,zero
 4009e7c:	9004d6fa 	srli	r2,r18,27
 4009e80:	9822917a 	slli	r17,r19,5
 4009e84:	1462b03a 	or	r17,r2,r17
 4009e88:	9020917a 	slli	r16,r18,5
 4009e8c:	2005883a 	mov	r2,r4
 4009e90:	10800044 	addi	r2,r2,1
 4009e94:	102d883a 	mov	r22,r2
 4009e98:	002f883a 	mov	r23,zero
 4009e9c:	b004d6fa 	srli	r2,r22,27
 4009ea0:	b82a917a 	slli	r21,r23,5
 4009ea4:	156ab03a 	or	r21,r2,r21
 4009ea8:	b028917a 	slli	r20,r22,5
 4009eac:	2005883a 	mov	r2,r4
 4009eb0:	10800044 	addi	r2,r2,1
 4009eb4:	1085883a 	add	r2,r2,r2
 4009eb8:	1085883a 	add	r2,r2,r2
 4009ebc:	108000c4 	addi	r2,r2,3
 4009ec0:	108000c4 	addi	r2,r2,3
 4009ec4:	1004d0ba 	srli	r2,r2,2
 4009ec8:	1085883a 	add	r2,r2,r2
 4009ecc:	1085883a 	add	r2,r2,r2
 4009ed0:	d8b7c83a 	sub	sp,sp,r2
 4009ed4:	d805883a 	mov	r2,sp
 4009ed8:	108000c4 	addi	r2,r2,3
 4009edc:	1004d0ba 	srli	r2,r2,2
 4009ee0:	1085883a 	add	r2,r2,r2
 4009ee4:	1085883a 	add	r2,r2,r2
 4009ee8:	e0bfb815 	stw	r2,-288(fp)
 4009eec:	e0ffb817 	ldw	r3,-288(fp)
 4009ef0:	00820034 	movhi	r2,2048
 4009ef4:	10848004 	addi	r2,r2,4608
 4009ef8:	18800015 	stw	r2,0(r3)
 4009efc:	18c00104 	addi	r3,r3,4
 4009f00:	213fffc4 	addi	r4,r4,-1
 4009f04:	00820034 	movhi	r2,2048
 4009f08:	10847c04 	addi	r2,r2,4592
 4009f0c:	18800015 	stw	r2,0(r3)
 4009f10:	18c00104 	addi	r3,r3,4
 4009f14:	213fffc4 	addi	r4,r4,-1
 4009f18:	00820034 	movhi	r2,2048
 4009f1c:	10847804 	addi	r2,r2,4576
 4009f20:	18800015 	stw	r2,0(r3)
 4009f24:	18c00104 	addi	r3,r3,4
 4009f28:	217fffc4 	addi	r5,r4,-1
 4009f2c:	00820034 	movhi	r2,2048
 4009f30:	10847404 	addi	r2,r2,4560
 4009f34:	18800015 	stw	r2,0(r3)
 4009f38:	19000104 	addi	r4,r3,4
 4009f3c:	28ffffc4 	addi	r3,r5,-1
 4009f40:	18bfffe0 	cmpeqi	r2,r3,-1
 4009f44:	1000041e 	bne	r2,zero,4009f58 <main+0x19c>
 4009f48:	20000015 	stw	zero,0(r4)
 4009f4c:	21000104 	addi	r4,r4,4
 4009f50:	18ffffc4 	addi	r3,r3,-1
 4009f54:	003ffa06 	br	4009f40 <__alt_mem_onchip_memory2_0+0xfc008ca0>
	volatile unsigned int* master_vol = (unsigned int*)0x08001220;
 4009f58:	00820034 	movhi	r2,2048
 4009f5c:	10848804 	addi	r2,r2,4640
 4009f60:	e0bfb915 	stw	r2,-284(fp)
	volatile unsigned int* reverb = (unsigned int*)0x08001210;
 4009f64:	00820034 	movhi	r2,2048
 4009f68:	10848404 	addi	r2,r2,4624
 4009f6c:	e0bfba15 	stw	r2,-280(fp)
	volatile unsigned int* vibrato = (unsigned int*)0x080011c0;
 4009f70:	00820034 	movhi	r2,2048
 4009f74:	10847004 	addi	r2,r2,4544
 4009f78:	e0bfbb15 	stw	r2,-276(fp)
	unsigned int decay_time, release_time, sustain_level, vol, ms_to_dec;

	/* Initialize effects */
	*(master_vol) = 64;
 4009f7c:	e0ffb917 	ldw	r3,-284(fp)
 4009f80:	00801004 	movi	r2,64
 4009f84:	18800015 	stw	r2,0(r3)
	*(vibrato) = 64;
 4009f88:	e0ffbb17 	ldw	r3,-276(fp)
 4009f8c:	00801004 	movi	r2,64
 4009f90:	18800015 	stw	r2,0(r3)
	*(reverb) = 0;
 4009f94:	e0bfba17 	ldw	r2,-280(fp)
 4009f98:	10000015 	stw	zero,0(r2)
	release_time = 0;
 4009f9c:	e03fab15 	stw	zero,-340(fp)
	decay_time = 0;
 4009fa0:	e03fbc15 	stw	zero,-272(fp)
	sustain_level = 127;
 4009fa4:	00801fc4 	movi	r2,127
 4009fa8:	e0bfac15 	stw	r2,-336(fp)

	for(int i = 0; i < NUM_NOTES; i++)
 4009fac:	e03fae15 	stw	zero,-328(fp)
 4009fb0:	e0ffae17 	ldw	r3,-328(fp)
 4009fb4:	e0bfb617 	ldw	r2,-296(fp)
 4009fb8:	18800b0e 	bge	r3,r2,4009fe8 <main+0x22c>
			*(note_vol_array[i]) = 0;
 4009fbc:	e0ffb817 	ldw	r3,-288(fp)
 4009fc0:	e0bfae17 	ldw	r2,-328(fp)
 4009fc4:	1085883a 	add	r2,r2,r2
 4009fc8:	1085883a 	add	r2,r2,r2
 4009fcc:	1885883a 	add	r2,r3,r2
 4009fd0:	10800017 	ldw	r2,0(r2)
 4009fd4:	10000015 	stw	zero,0(r2)
	*(reverb) = 0;
	release_time = 0;
	decay_time = 0;
	sustain_level = 127;

	for(int i = 0; i < NUM_NOTES; i++)
 4009fd8:	e0bfae17 	ldw	r2,-328(fp)
 4009fdc:	10800044 	addi	r2,r2,1
 4009fe0:	e0bfae15 	stw	r2,-328(fp)
 4009fe4:	003ff206 	br	4009fb0 <__alt_mem_onchip_memory2_0+0xfc008d10>
			*(note_vol_array[i]) = 0;

	clock_t note_clocks[NUM_NOTES];
 4009fe8:	e0bfb617 	ldw	r2,-296(fp)
 4009fec:	10ffffc4 	addi	r3,r2,-1
 4009ff0:	e0ffbd15 	stw	r3,-268(fp)
 4009ff4:	1805883a 	mov	r2,r3
 4009ff8:	10800044 	addi	r2,r2,1
 4009ffc:	e0bfe015 	stw	r2,-128(fp)
 400a000:	e03fe115 	stw	zero,-124(fp)
 400a004:	e13fe017 	ldw	r4,-128(fp)
 400a008:	2004d6fa 	srli	r2,r4,27
 400a00c:	e13fe117 	ldw	r4,-124(fp)
 400a010:	2008917a 	slli	r4,r4,5
 400a014:	e13fe315 	stw	r4,-116(fp)
 400a018:	e13fe317 	ldw	r4,-116(fp)
 400a01c:	1104b03a 	or	r2,r2,r4
 400a020:	e0bfe315 	stw	r2,-116(fp)
 400a024:	e0bfe017 	ldw	r2,-128(fp)
 400a028:	1004917a 	slli	r2,r2,5
 400a02c:	1805883a 	mov	r2,r3
 400a030:	10800044 	addi	r2,r2,1
 400a034:	e0bfe415 	stw	r2,-112(fp)
 400a038:	e03fe515 	stw	zero,-108(fp)
 400a03c:	e13fe417 	ldw	r4,-112(fp)
 400a040:	2004d6fa 	srli	r2,r4,27
 400a044:	e13fe517 	ldw	r4,-108(fp)
 400a048:	2008917a 	slli	r4,r4,5
 400a04c:	e13fe715 	stw	r4,-100(fp)
 400a050:	e13fe717 	ldw	r4,-100(fp)
 400a054:	1104b03a 	or	r2,r2,r4
 400a058:	e0bfe715 	stw	r2,-100(fp)
 400a05c:	e0bfe417 	ldw	r2,-112(fp)
 400a060:	1004917a 	slli	r2,r2,5
 400a064:	1805883a 	mov	r2,r3
 400a068:	10800044 	addi	r2,r2,1
 400a06c:	1085883a 	add	r2,r2,r2
 400a070:	1085883a 	add	r2,r2,r2
 400a074:	108000c4 	addi	r2,r2,3
 400a078:	108000c4 	addi	r2,r2,3
 400a07c:	1004d0ba 	srli	r2,r2,2
 400a080:	1085883a 	add	r2,r2,r2
 400a084:	1085883a 	add	r2,r2,r2
 400a088:	d8b7c83a 	sub	sp,sp,r2
 400a08c:	d805883a 	mov	r2,sp
 400a090:	108000c4 	addi	r2,r2,3
 400a094:	1004d0ba 	srli	r2,r2,2
 400a098:	1085883a 	add	r2,r2,r2
 400a09c:	1085883a 	add	r2,r2,r2
 400a0a0:	e0bfbe15 	stw	r2,-264(fp)
	int available_idx;
	bool note_used[NUM_NOTES] = {false};
 400a0a4:	e0bfb617 	ldw	r2,-296(fp)
 400a0a8:	10bfffc4 	addi	r2,r2,-1
 400a0ac:	e0bfbf15 	stw	r2,-260(fp)
 400a0b0:	1007883a 	mov	r3,r2
 400a0b4:	18c00044 	addi	r3,r3,1
 400a0b8:	e0ffe815 	stw	r3,-96(fp)
 400a0bc:	e03fe915 	stw	zero,-92(fp)
 400a0c0:	e13fe817 	ldw	r4,-96(fp)
 400a0c4:	2006d77a 	srli	r3,r4,29
 400a0c8:	e13fe917 	ldw	r4,-92(fp)
 400a0cc:	200890fa 	slli	r4,r4,3
 400a0d0:	e13feb15 	stw	r4,-84(fp)
 400a0d4:	e13feb17 	ldw	r4,-84(fp)
 400a0d8:	1906b03a 	or	r3,r3,r4
 400a0dc:	e0ffeb15 	stw	r3,-84(fp)
 400a0e0:	e0ffe817 	ldw	r3,-96(fp)
 400a0e4:	180690fa 	slli	r3,r3,3
 400a0e8:	1007883a 	mov	r3,r2
 400a0ec:	18c00044 	addi	r3,r3,1
 400a0f0:	e0ffec15 	stw	r3,-80(fp)
 400a0f4:	e03fed15 	stw	zero,-76(fp)
 400a0f8:	e13fec17 	ldw	r4,-80(fp)
 400a0fc:	2006d77a 	srli	r3,r4,29
 400a100:	e13fed17 	ldw	r4,-76(fp)
 400a104:	200890fa 	slli	r4,r4,3
 400a108:	e13fef15 	stw	r4,-68(fp)
 400a10c:	e13fef17 	ldw	r4,-68(fp)
 400a110:	1906b03a 	or	r3,r3,r4
 400a114:	e0ffef15 	stw	r3,-68(fp)
 400a118:	e0ffec17 	ldw	r3,-80(fp)
 400a11c:	180690fa 	slli	r3,r3,3
 400a120:	1007883a 	mov	r3,r2
 400a124:	18c00044 	addi	r3,r3,1
 400a128:	18c000c4 	addi	r3,r3,3
 400a12c:	1806d0ba 	srli	r3,r3,2
 400a130:	18c7883a 	add	r3,r3,r3
 400a134:	18c7883a 	add	r3,r3,r3
 400a138:	d8f7c83a 	sub	sp,sp,r3
 400a13c:	d807883a 	mov	r3,sp
 400a140:	1807883a 	mov	r3,r3
 400a144:	e0ffc015 	stw	r3,-256(fp)
 400a148:	e0ffc017 	ldw	r3,-256(fp)
 400a14c:	18000005 	stb	zero,0(r3)
 400a150:	18c00044 	addi	r3,r3,1
 400a154:	10bfffc4 	addi	r2,r2,-1
 400a158:	113fffe0 	cmpeqi	r4,r2,-1
 400a15c:	2000041e 	bne	r4,zero,400a170 <main+0x3b4>
 400a160:	18000005 	stb	zero,0(r3)
 400a164:	18c00044 	addi	r3,r3,1
 400a168:	10bfffc4 	addi	r2,r2,-1
 400a16c:	003ffa06 	br	400a158 <__alt_mem_onchip_memory2_0+0xfc008eb8>
	bool note_released[NUM_NOTES] = {false};
 400a170:	e0bfb617 	ldw	r2,-296(fp)
 400a174:	10bfffc4 	addi	r2,r2,-1
 400a178:	e0bfc115 	stw	r2,-252(fp)
 400a17c:	1007883a 	mov	r3,r2
 400a180:	18c00044 	addi	r3,r3,1
 400a184:	e0fff015 	stw	r3,-64(fp)
 400a188:	e03ff115 	stw	zero,-60(fp)
 400a18c:	e13ff017 	ldw	r4,-64(fp)
 400a190:	2006d77a 	srli	r3,r4,29
 400a194:	e13ff117 	ldw	r4,-60(fp)
 400a198:	200890fa 	slli	r4,r4,3
 400a19c:	e13ff315 	stw	r4,-52(fp)
 400a1a0:	e13ff317 	ldw	r4,-52(fp)
 400a1a4:	1906b03a 	or	r3,r3,r4
 400a1a8:	e0fff315 	stw	r3,-52(fp)
 400a1ac:	e0fff017 	ldw	r3,-64(fp)
 400a1b0:	180690fa 	slli	r3,r3,3
 400a1b4:	1007883a 	mov	r3,r2
 400a1b8:	18c00044 	addi	r3,r3,1
 400a1bc:	e0fff415 	stw	r3,-48(fp)
 400a1c0:	e03ff515 	stw	zero,-44(fp)
 400a1c4:	e13ff417 	ldw	r4,-48(fp)
 400a1c8:	2006d77a 	srli	r3,r4,29
 400a1cc:	e13ff517 	ldw	r4,-44(fp)
 400a1d0:	200890fa 	slli	r4,r4,3
 400a1d4:	e13ff715 	stw	r4,-36(fp)
 400a1d8:	e13ff717 	ldw	r4,-36(fp)
 400a1dc:	1906b03a 	or	r3,r3,r4
 400a1e0:	e0fff715 	stw	r3,-36(fp)
 400a1e4:	e0fff417 	ldw	r3,-48(fp)
 400a1e8:	180690fa 	slli	r3,r3,3
 400a1ec:	1007883a 	mov	r3,r2
 400a1f0:	18c00044 	addi	r3,r3,1
 400a1f4:	18c000c4 	addi	r3,r3,3
 400a1f8:	1806d0ba 	srli	r3,r3,2
 400a1fc:	18c7883a 	add	r3,r3,r3
 400a200:	18c7883a 	add	r3,r3,r3
 400a204:	d8f7c83a 	sub	sp,sp,r3
 400a208:	d807883a 	mov	r3,sp
 400a20c:	1807883a 	mov	r3,r3
 400a210:	e0ffc215 	stw	r3,-248(fp)
 400a214:	e0ffc217 	ldw	r3,-248(fp)
 400a218:	18000005 	stb	zero,0(r3)
 400a21c:	18c00044 	addi	r3,r3,1
 400a220:	10bfffc4 	addi	r2,r2,-1
 400a224:	113fffe0 	cmpeqi	r4,r2,-1
 400a228:	2000041e 	bne	r4,zero,400a23c <main+0x480>
 400a22c:	18000005 	stb	zero,0(r3)
 400a230:	18c00044 	addi	r3,r3,1
 400a234:	10bfffc4 	addi	r2,r2,-1
 400a238:	003ffa06 	br	400a224 <__alt_mem_onchip_memory2_0+0xfc008f84>
	bool first_note = true;
 400a23c:	00800044 	movi	r2,1
 400a240:	e0bfb005 	stb	r2,-320(fp)
	bool muted = false;
 400a244:	e03fb045 	stb	zero,-319(fp)
	bool foundNote = false;
 400a248:	e03fb085 	stb	zero,-318(fp)

	while(1){
		Usb.Task();
 400a24c:	010100f4 	movhi	r4,1027
 400a250:	21382504 	addi	r4,r4,-8044
 400a254:	4001f6c0 	call	4001f6c <_ZN3USB4TaskEv>
		if(Midi){
 400a258:	e0bfc504 	addi	r2,fp,-236
 400a25c:	1009883a 	mov	r4,r2
 400a260:	400b0a80 	call	400b0a8 <_ZN9USBH_MIDIcvbEv>
 400a264:	10803fcc 	andi	r2,r2,255
 400a268:	10015726 	beq	r2,zero,400a7c8 <main+0xa0c>
			uint8_t MIDI_packet[ 3 ];
			uint8_t size;

			do {
				if ( (size = Midi.RecvData(MIDI_packet)) > 0 ) {
 400a26c:	e0ffdf04 	addi	r3,fp,-132
 400a270:	e0bfc504 	addi	r2,fp,-236
 400a274:	000d883a 	mov	r6,zero
 400a278:	180b883a 	mov	r5,r3
 400a27c:	1009883a 	mov	r4,r2
 400a280:	40079dc0 	call	40079dc <_ZN9USBH_MIDI8RecvDataEPhb>
 400a284:	e0bfc305 	stb	r2,-244(fp)
 400a288:	e0bfc303 	ldbu	r2,-244(fp)
 400a28c:	1004c03a 	cmpne	r2,r2,zero
 400a290:	10803fcc 	andi	r2,r2,255
 400a294:	10014926 	beq	r2,zero,400a7bc <main+0xa00>

					switch(unsigned(MIDI_packet[0] >> 4)){
 400a298:	e0bfdf03 	ldbu	r2,-132(fp)
 400a29c:	10803fcc 	andi	r2,r2,255
 400a2a0:	1005d13a 	srai	r2,r2,4
 400a2a4:	10c00260 	cmpeqi	r3,r2,9
 400a2a8:	18000a1e 	bne	r3,zero,400a2d4 <main+0x518>
 400a2ac:	10c002a8 	cmpgeui	r3,r2,10
 400a2b0:	1800031e 	bne	r3,zero,400a2c0 <main+0x504>
 400a2b4:	10800220 	cmpeqi	r2,r2,8
 400a2b8:	1000711e 	bne	r2,zero,400a480 <main+0x6c4>
 400a2bc:	00013f06 	br	400a7bc <main+0xa00>
 400a2c0:	10c002e0 	cmpeqi	r3,r2,11
 400a2c4:	1800ab1e 	bne	r3,zero,400a574 <main+0x7b8>
 400a2c8:	108003a0 	cmpeqi	r2,r2,14
 400a2cc:	10009e1e 	bne	r2,zero,400a548 <main+0x78c>
 400a2d0:	00013a06 	br	400a7bc <main+0xa00>
					case 9:						//Note ON
						if(first_note){			//handles an initial data packet that gets interpreted as note on event
 400a2d4:	e0bfb003 	ldbu	r2,-320(fp)
 400a2d8:	10000226 	beq	r2,zero,400a2e4 <main+0x528>
							first_note = false;
 400a2dc:	e03fb005 	stb	zero,-320(fp)
							break;
 400a2e0:	00013606 	br	400a7bc <main+0xa00>
						}

						if(!muted){	//check muted flag
 400a2e4:	e0bfb043 	ldbu	r2,-319(fp)
 400a2e8:	1080005c 	xori	r2,r2,1
 400a2ec:	10803fcc 	andi	r2,r2,255
 400a2f0:	10012d26 	beq	r2,zero,400a7a8 <main+0x9ec>
							/* Find first available note_vol */
							available_idx = -1;
 400a2f4:	00bfffc4 	movi	r2,-1
 400a2f8:	e0bfaf15 	stw	r2,-324(fp)
							for(int i = 0; i < NUM_NOTES; i++){
 400a2fc:	e03fb115 	stw	zero,-316(fp)
 400a300:	e0ffb117 	ldw	r3,-316(fp)
 400a304:	e0bfb617 	ldw	r2,-296(fp)
 400a308:	1880280e 	bge	r3,r2,400a3ac <main+0x5f0>
								if(note_released[i] && ((*(note_vol_array[i]) >> 8) == unsigned(MIDI_packet[1]))){	//if note is decaying after release
 400a30c:	e0ffc217 	ldw	r3,-248(fp)
 400a310:	e0bfb117 	ldw	r2,-316(fp)
 400a314:	1885883a 	add	r2,r3,r2
 400a318:	10800003 	ldbu	r2,0(r2)
 400a31c:	10803fcc 	andi	r2,r2,255
 400a320:	10000d26 	beq	r2,zero,400a358 <main+0x59c>
 400a324:	e0ffb817 	ldw	r3,-288(fp)
 400a328:	e0bfb117 	ldw	r2,-316(fp)
 400a32c:	1085883a 	add	r2,r2,r2
 400a330:	1085883a 	add	r2,r2,r2
 400a334:	1885883a 	add	r2,r3,r2
 400a338:	10800017 	ldw	r2,0(r2)
 400a33c:	10800017 	ldw	r2,0(r2)
 400a340:	1006d23a 	srli	r3,r2,8
 400a344:	e0bfdf43 	ldbu	r2,-131(fp)
 400a348:	10803fcc 	andi	r2,r2,255
 400a34c:	1880021e 	bne	r3,r2,400a358 <main+0x59c>
 400a350:	00800044 	movi	r2,1
 400a354:	00000106 	br	400a35c <main+0x5a0>
 400a358:	0005883a 	mov	r2,zero
 400a35c:	10803fcc 	andi	r2,r2,255
 400a360:	10000e26 	beq	r2,zero,400a39c <main+0x5e0>
									available_idx = i;
 400a364:	e0bfb117 	ldw	r2,-316(fp)
 400a368:	e0bfaf15 	stw	r2,-324(fp)
									note_used[i] = true;
 400a36c:	e0ffc017 	ldw	r3,-256(fp)
 400a370:	e0bfb117 	ldw	r2,-316(fp)
 400a374:	1885883a 	add	r2,r3,r2
 400a378:	00c00044 	movi	r3,1
 400a37c:	10c00005 	stb	r3,0(r2)
									note_released[i] = false;
 400a380:	e0ffc217 	ldw	r3,-248(fp)
 400a384:	e0bfb117 	ldw	r2,-316(fp)
 400a388:	1885883a 	add	r2,r3,r2
 400a38c:	10000005 	stb	zero,0(r2)
									foundNote = true;
 400a390:	00800044 	movi	r2,1
 400a394:	e0bfb085 	stb	r2,-318(fp)
									break;
 400a398:	00000406 	br	400a3ac <main+0x5f0>
						}

						if(!muted){	//check muted flag
							/* Find first available note_vol */
							available_idx = -1;
							for(int i = 0; i < NUM_NOTES; i++){
 400a39c:	e0bfb117 	ldw	r2,-316(fp)
 400a3a0:	10800044 	addi	r2,r2,1
 400a3a4:	e0bfb115 	stw	r2,-316(fp)
 400a3a8:	003fd506 	br	400a300 <__alt_mem_onchip_memory2_0+0xfc009060>
									note_released[i] = false;
									foundNote = true;
									break;
								}
							}
							if(!foundNote){
 400a3ac:	e0bfb083 	ldbu	r2,-318(fp)
 400a3b0:	1080005c 	xori	r2,r2,1
 400a3b4:	10803fcc 	andi	r2,r2,255
 400a3b8:	10001726 	beq	r2,zero,400a418 <main+0x65c>
								for(int i = 0; i < NUM_NOTES; i++){
 400a3bc:	e03fb215 	stw	zero,-312(fp)
 400a3c0:	e0ffb217 	ldw	r3,-312(fp)
 400a3c4:	e0bfb617 	ldw	r2,-296(fp)
 400a3c8:	1880130e 	bge	r3,r2,400a418 <main+0x65c>
									if(!note_used[i]){
 400a3cc:	e0ffc017 	ldw	r3,-256(fp)
 400a3d0:	e0bfb217 	ldw	r2,-312(fp)
 400a3d4:	1885883a 	add	r2,r3,r2
 400a3d8:	10800003 	ldbu	r2,0(r2)
 400a3dc:	1080005c 	xori	r2,r2,1
 400a3e0:	10803fcc 	andi	r2,r2,255
 400a3e4:	10000826 	beq	r2,zero,400a408 <main+0x64c>
										available_idx = i;
 400a3e8:	e0bfb217 	ldw	r2,-312(fp)
 400a3ec:	e0bfaf15 	stw	r2,-324(fp)
										note_used[i] = true;
 400a3f0:	e0ffc017 	ldw	r3,-256(fp)
 400a3f4:	e0bfb217 	ldw	r2,-312(fp)
 400a3f8:	1885883a 	add	r2,r3,r2
 400a3fc:	00c00044 	movi	r3,1
 400a400:	10c00005 	stb	r3,0(r2)
										break;
 400a404:	00000406 	br	400a418 <main+0x65c>
									foundNote = true;
									break;
								}
							}
							if(!foundNote){
								for(int i = 0; i < NUM_NOTES; i++){
 400a408:	e0bfb217 	ldw	r2,-312(fp)
 400a40c:	10800044 	addi	r2,r2,1
 400a410:	e0bfb215 	stw	r2,-312(fp)
 400a414:	003fea06 	br	400a3c0 <__alt_mem_onchip_memory2_0+0xfc009120>
										note_used[i] = true;
										break;
									}
								}
							}
							foundNote = false;
 400a418:	e03fb085 	stb	zero,-318(fp)
							/* If a note_vol is available, write to it*/
							if(available_idx != -1){
 400a41c:	e0bfaf17 	ldw	r2,-324(fp)
 400a420:	10bfffe0 	cmpeqi	r2,r2,-1
 400a424:	1000e01e 	bne	r2,zero,400a7a8 <main+0x9ec>
								*(note_vol_array[available_idx]) = (MIDI_packet[1] << 8) + MIDI_packet[2];
 400a428:	e0ffb817 	ldw	r3,-288(fp)
 400a42c:	e0bfaf17 	ldw	r2,-324(fp)
 400a430:	1085883a 	add	r2,r2,r2
 400a434:	1085883a 	add	r2,r2,r2
 400a438:	1885883a 	add	r2,r3,r2
 400a43c:	10800017 	ldw	r2,0(r2)
 400a440:	e0ffdf43 	ldbu	r3,-131(fp)
 400a444:	18c03fcc 	andi	r3,r3,255
 400a448:	1808923a 	slli	r4,r3,8
 400a44c:	e0ffdf83 	ldbu	r3,-130(fp)
 400a450:	18c03fcc 	andi	r3,r3,255
 400a454:	20c7883a 	add	r3,r4,r3
 400a458:	10c00015 	stw	r3,0(r2)
								note_clocks[available_idx] = clock();
 400a45c:	400ebd40 	call	400ebd4 <clock>
 400a460:	1009883a 	mov	r4,r2
 400a464:	e0ffbe17 	ldw	r3,-264(fp)
 400a468:	e0bfaf17 	ldw	r2,-324(fp)
 400a46c:	1085883a 	add	r2,r2,r2
 400a470:	1085883a 	add	r2,r2,r2
 400a474:	1885883a 	add	r2,r3,r2
 400a478:	11000015 	stw	r4,0(r2)
							}
						}
						break;
 400a47c:	0000ca06 	br	400a7a8 <main+0x9ec>

					case 8:		//Note OFF
						for(int i = 0; i < NUM_NOTES; i++){    								//iterate over all note_vols
 400a480:	e03fb315 	stw	zero,-308(fp)
 400a484:	e0ffb317 	ldw	r3,-308(fp)
 400a488:	e0bfb617 	ldw	r2,-296(fp)
 400a48c:	1880c80e 	bge	r3,r2,400a7b0 <main+0x9f4>
							if((*(note_vol_array[i]) >> 8) == unsigned(MIDI_packet[1])){  	//we've found the note to turn off
 400a490:	e0ffb817 	ldw	r3,-288(fp)
 400a494:	e0bfb317 	ldw	r2,-308(fp)
 400a498:	1085883a 	add	r2,r2,r2
 400a49c:	1085883a 	add	r2,r2,r2
 400a4a0:	1885883a 	add	r2,r3,r2
 400a4a4:	10800017 	ldw	r2,0(r2)
 400a4a8:	10800017 	ldw	r2,0(r2)
 400a4ac:	1006d23a 	srli	r3,r2,8
 400a4b0:	e0bfdf43 	ldbu	r2,-131(fp)
 400a4b4:	10803fcc 	andi	r2,r2,255
 400a4b8:	1885003a 	cmpeq	r2,r3,r2
 400a4bc:	10803fcc 	andi	r2,r2,255
 400a4c0:	10001c26 	beq	r2,zero,400a534 <main+0x778>
								if(release_time != 0){
 400a4c4:	e0bfab17 	ldw	r2,-340(fp)
 400a4c8:	10000e26 	beq	r2,zero,400a504 <main+0x748>
									note_released[i] = true;
 400a4cc:	e0ffc217 	ldw	r3,-248(fp)
 400a4d0:	e0bfb317 	ldw	r2,-308(fp)
 400a4d4:	1885883a 	add	r2,r3,r2
 400a4d8:	00c00044 	movi	r3,1
 400a4dc:	10c00005 	stb	r3,0(r2)
									note_clocks[i] = clock();
 400a4e0:	400ebd40 	call	400ebd4 <clock>
 400a4e4:	1009883a 	mov	r4,r2
 400a4e8:	e0ffbe17 	ldw	r3,-264(fp)
 400a4ec:	e0bfb317 	ldw	r2,-308(fp)
 400a4f0:	1085883a 	add	r2,r2,r2
 400a4f4:	1085883a 	add	r2,r2,r2
 400a4f8:	1885883a 	add	r2,r3,r2
 400a4fc:	11000015 	stw	r4,0(r2)
								}
								else{
									*(note_vol_array[i]) = 0;                  					//note turned off
									note_used[i] = false;										//reset flag
								}
								break;
 400a500:	00001006 	br	400a544 <main+0x788>
								if(release_time != 0){
									note_released[i] = true;
									note_clocks[i] = clock();
								}
								else{
									*(note_vol_array[i]) = 0;                  					//note turned off
 400a504:	e0ffb817 	ldw	r3,-288(fp)
 400a508:	e0bfb317 	ldw	r2,-308(fp)
 400a50c:	1085883a 	add	r2,r2,r2
 400a510:	1085883a 	add	r2,r2,r2
 400a514:	1885883a 	add	r2,r3,r2
 400a518:	10800017 	ldw	r2,0(r2)
 400a51c:	10000015 	stw	zero,0(r2)
									note_used[i] = false;										//reset flag
 400a520:	e0ffc017 	ldw	r3,-256(fp)
 400a524:	e0bfb317 	ldw	r2,-308(fp)
 400a528:	1885883a 	add	r2,r3,r2
 400a52c:	10000005 	stb	zero,0(r2)
								}
								break;
 400a530:	00000406 	br	400a544 <main+0x788>
							}
						}
						break;

					case 8:		//Note OFF
						for(int i = 0; i < NUM_NOTES; i++){    								//iterate over all note_vols
 400a534:	e0bfb317 	ldw	r2,-308(fp)
 400a538:	10800044 	addi	r2,r2,1
 400a53c:	e0bfb315 	stw	r2,-308(fp)
 400a540:	003fd006 	br	400a484 <__alt_mem_onchip_memory2_0+0xfc0091e4>
									note_used[i] = false;										//reset flag
								}
								break;
							}
						}
						break;
 400a544:	00009a06 	br	400a7b0 <main+0x9f4>

					case 0xE:	//Pitch wheel
						*(vibrato) = unsigned(MIDI_packet[2]);
 400a548:	e0bfdf83 	ldbu	r2,-130(fp)
 400a54c:	10c03fcc 	andi	r3,r2,255
 400a550:	e0bfbb17 	ldw	r2,-276(fp)
 400a554:	10c00015 	stw	r3,0(r2)
						printf("Vibrato = %u\n", *vibrato);
 400a558:	e0bfbb17 	ldw	r2,-276(fp)
 400a55c:	10800017 	ldw	r2,0(r2)
 400a560:	100b883a 	mov	r5,r2
 400a564:	010100b4 	movhi	r4,1026
 400a568:	211cd504 	addi	r4,r4,29524
 400a56c:	400f6f40 	call	400f6f4 <printf>
						break;
 400a570:	00009206 	br	400a7bc <main+0xa00>

					case 0xB:	//Additional effects - Byte 2: Volume wheel (01), knobs (14-17), buttons (30-33)

						switch(unsigned(MIDI_packet[1])){
 400a574:	e0bfdf43 	ldbu	r2,-131(fp)
 400a578:	10803fcc 	andi	r2,r2,255
 400a57c:	10c00d28 	cmpgeui	r3,r2,52
 400a580:	18008d1e 	bne	r3,zero,400a7b8 <main+0x9fc>
 400a584:	100690ba 	slli	r3,r2,2
 400a588:	00810074 	movhi	r2,1025
 400a58c:	10a96704 	addi	r2,r2,-23140
 400a590:	1885883a 	add	r2,r3,r2
 400a594:	10800017 	ldw	r2,0(r2)
 400a598:	1000683a 	jmp	r2
 400a59c:	0400a7b8 	rdprs	r16,zero,670
 400a5a0:	0400a66c 	andhi	r16,zero,665
 400a5a4:	0400a7b8 	rdprs	r16,zero,670
 400a5a8:	0400a7b8 	rdprs	r16,zero,670
 400a5ac:	0400a7b8 	rdprs	r16,zero,670
 400a5b0:	0400a7b8 	rdprs	r16,zero,670
 400a5b4:	0400a7b8 	rdprs	r16,zero,670
 400a5b8:	0400a7b8 	rdprs	r16,zero,670
 400a5bc:	0400a7b8 	rdprs	r16,zero,670
 400a5c0:	0400a7b8 	rdprs	r16,zero,670
 400a5c4:	0400a7b8 	rdprs	r16,zero,670
 400a5c8:	0400a7b8 	rdprs	r16,zero,670
 400a5cc:	0400a7b8 	rdprs	r16,zero,670
 400a5d0:	0400a7b8 	rdprs	r16,zero,670
 400a5d4:	0400a7b8 	rdprs	r16,zero,670
 400a5d8:	0400a7b8 	rdprs	r16,zero,670
 400a5dc:	0400a7b8 	rdprs	r16,zero,670
 400a5e0:	0400a7b8 	rdprs	r16,zero,670
 400a5e4:	0400a7b8 	rdprs	r16,zero,670
 400a5e8:	0400a7b8 	rdprs	r16,zero,670
 400a5ec:	0400a698 	cmpnei	r16,zero,666
 400a5f0:	0400a6c4 	movi	r16,667
 400a5f4:	0400a6e4 	muli	r16,zero,667
 400a5f8:	0400a708 	cmpgei	r16,zero,668
 400a5fc:	0400a7b8 	rdprs	r16,zero,670
 400a600:	0400a7b8 	rdprs	r16,zero,670
 400a604:	0400a7b8 	rdprs	r16,zero,670
 400a608:	0400a7b8 	rdprs	r16,zero,670
 400a60c:	0400a7b8 	rdprs	r16,zero,670
 400a610:	0400a7b8 	rdprs	r16,zero,670
 400a614:	0400a7b8 	rdprs	r16,zero,670
 400a618:	0400a7b8 	rdprs	r16,zero,670
 400a61c:	0400a7b8 	rdprs	r16,zero,670
 400a620:	0400a7b8 	rdprs	r16,zero,670
 400a624:	0400a7b8 	rdprs	r16,zero,670
 400a628:	0400a7b8 	rdprs	r16,zero,670
 400a62c:	0400a7b8 	rdprs	r16,zero,670
 400a630:	0400a7b8 	rdprs	r16,zero,670
 400a634:	0400a7b8 	rdprs	r16,zero,670
 400a638:	0400a7b8 	rdprs	r16,zero,670
 400a63c:	0400a7b8 	rdprs	r16,zero,670
 400a640:	0400a7b8 	rdprs	r16,zero,670
 400a644:	0400a7b8 	rdprs	r16,zero,670
 400a648:	0400a7b8 	rdprs	r16,zero,670
 400a64c:	0400a7b8 	rdprs	r16,zero,670
 400a650:	0400a7b8 	rdprs	r16,zero,670
 400a654:	0400a7b8 	rdprs	r16,zero,670
 400a658:	0400a7b8 	rdprs	r16,zero,670
 400a65c:	0400a728 	cmpgeui	r16,zero,668
 400a660:	0400a794 	movui	r16,670
 400a664:	0400a794 	movui	r16,670
 400a668:	0400a794 	movui	r16,670

						/* Volume wheel */
						case 0x01:
							*(master_vol) = unsigned(MIDI_packet[2]);
 400a66c:	e0bfdf83 	ldbu	r2,-130(fp)
 400a670:	10c03fcc 	andi	r3,r2,255
 400a674:	e0bfb917 	ldw	r2,-284(fp)
 400a678:	10c00015 	stw	r3,0(r2)
							printf("Master vol = %d\n", *master_vol);
 400a67c:	e0bfb917 	ldw	r2,-284(fp)
 400a680:	10800017 	ldw	r2,0(r2)
 400a684:	100b883a 	mov	r5,r2
 400a688:	010100b4 	movhi	r4,1026
 400a68c:	211cd904 	addi	r4,r4,29540
 400a690:	400f6f40 	call	400f6f4 <printf>
							break;
 400a694:	00004206 	br	400a7a0 <main+0x9e4>

						/* Knobs */
						case 0x14:	//Reverb
							*(reverb) = unsigned(MIDI_packet[2]);
 400a698:	e0bfdf83 	ldbu	r2,-130(fp)
 400a69c:	10c03fcc 	andi	r3,r2,255
 400a6a0:	e0bfba17 	ldw	r2,-280(fp)
 400a6a4:	10c00015 	stw	r3,0(r2)
							printf("Reverb = %d\n", *reverb);
 400a6a8:	e0bfba17 	ldw	r2,-280(fp)
 400a6ac:	10800017 	ldw	r2,0(r2)
 400a6b0:	100b883a 	mov	r5,r2
 400a6b4:	010100b4 	movhi	r4,1026
 400a6b8:	211cde04 	addi	r4,r4,29560
 400a6bc:	400f6f40 	call	400f6f4 <printf>
							break;
 400a6c0:	00003706 	br	400a7a0 <main+0x9e4>

						case 0x15:	//Release time
							release_time = unsigned(MIDI_packet[2]);
 400a6c4:	e0bfdf83 	ldbu	r2,-130(fp)
 400a6c8:	10803fcc 	andi	r2,r2,255
 400a6cc:	e0bfab15 	stw	r2,-340(fp)
							printf("Release time = %d\n", release_time);
 400a6d0:	e17fab17 	ldw	r5,-340(fp)
 400a6d4:	010100b4 	movhi	r4,1026
 400a6d8:	211ce204 	addi	r4,r4,29576
 400a6dc:	400f6f40 	call	400f6f4 <printf>
							break;
 400a6e0:	00002f06 	br	400a7a0 <main+0x9e4>

						case 0x16:	//Decay time
							ms_to_dec = unsigned(MIDI_packet[2]) + 1;
 400a6e4:	e0bfdf83 	ldbu	r2,-130(fp)
 400a6e8:	10803fcc 	andi	r2,r2,255
 400a6ec:	10800044 	addi	r2,r2,1
 400a6f0:	e0bfad15 	stw	r2,-332(fp)
							printf("Decay time = %d\n", ms_to_dec);
 400a6f4:	e17fad17 	ldw	r5,-332(fp)
 400a6f8:	010100b4 	movhi	r4,1026
 400a6fc:	211ce704 	addi	r4,r4,29596
 400a700:	400f6f40 	call	400f6f4 <printf>
							break;
 400a704:	00002606 	br	400a7a0 <main+0x9e4>

						case 0x17:	//Sustain level
							sustain_level = unsigned(MIDI_packet[2]);
 400a708:	e0bfdf83 	ldbu	r2,-130(fp)
 400a70c:	10803fcc 	andi	r2,r2,255
 400a710:	e0bfac15 	stw	r2,-336(fp)
							printf("Sustain level = %u\n", sustain_level);
 400a714:	e17fac17 	ldw	r5,-336(fp)
 400a718:	010100b4 	movhi	r4,1026
 400a71c:	211cec04 	addi	r4,r4,29616
 400a720:	400f6f40 	call	400f6f4 <printf>
							break;
 400a724:	00001e06 	br	400a7a0 <main+0x9e4>

						/* Buttons */
						case 0x30:	//1: mute
							if(unsigned(MIDI_packet[2]) == 0x7F){	//button ON
 400a728:	e0bfdf83 	ldbu	r2,-130(fp)
 400a72c:	10803fcc 	andi	r2,r2,255
 400a730:	10801fd8 	cmpnei	r2,r2,127
 400a734:	1000151e 	bne	r2,zero,400a78c <main+0x9d0>
								muted = true;
 400a738:	00800044 	movi	r2,1
 400a73c:	e0bfb045 	stb	r2,-319(fp)
								for(int i = 0; i < NUM_NOTES; i++){
 400a740:	e03fb415 	stw	zero,-304(fp)
 400a744:	e0ffb417 	ldw	r3,-304(fp)
 400a748:	e0bfb617 	ldw	r2,-296(fp)
 400a74c:	1880130e 	bge	r3,r2,400a79c <main+0x9e0>
										*(note_vol_array[i]) = 0;
 400a750:	e0ffb817 	ldw	r3,-288(fp)
 400a754:	e0bfb417 	ldw	r2,-304(fp)
 400a758:	1085883a 	add	r2,r2,r2
 400a75c:	1085883a 	add	r2,r2,r2
 400a760:	1885883a 	add	r2,r3,r2
 400a764:	10800017 	ldw	r2,0(r2)
 400a768:	10000015 	stw	zero,0(r2)
										note_used[i] = false;
 400a76c:	e0ffc017 	ldw	r3,-256(fp)
 400a770:	e0bfb417 	ldw	r2,-304(fp)
 400a774:	1885883a 	add	r2,r3,r2
 400a778:	10000005 	stb	zero,0(r2)

						/* Buttons */
						case 0x30:	//1: mute
							if(unsigned(MIDI_packet[2]) == 0x7F){	//button ON
								muted = true;
								for(int i = 0; i < NUM_NOTES; i++){
 400a77c:	e0bfb417 	ldw	r2,-304(fp)
 400a780:	10800044 	addi	r2,r2,1
 400a784:	e0bfb415 	stw	r2,-304(fp)
 400a788:	003fee06 	br	400a744 <__alt_mem_onchip_memory2_0+0xfc0094a4>
										*(note_vol_array[i]) = 0;
										note_used[i] = false;
								}
							}
							else
								muted = false;
 400a78c:	e03fb045 	stb	zero,-319(fp)

							break;
 400a790:	00000206 	br	400a79c <main+0x9e0>

						case 0x31:	//2
							break;
 400a794:	0001883a 	nop
 400a798:	00000106 	br	400a7a0 <main+0x9e4>
								}
							}
							else
								muted = false;

							break;
 400a79c:	0001883a 	nop
						case 0x32:	//3
							break;
						case 0x33:	//4
							break;
						}
						break;
 400a7a0:	0001883a 	nop
 400a7a4:	00000406 	br	400a7b8 <main+0x9fc>
							if(available_idx != -1){
								*(note_vol_array[available_idx]) = (MIDI_packet[1] << 8) + MIDI_packet[2];
								note_clocks[available_idx] = clock();
							}
						}
						break;
 400a7a8:	0001883a 	nop
 400a7ac:	00000306 	br	400a7bc <main+0xa00>
									note_used[i] = false;										//reset flag
								}
								break;
							}
						}
						break;
 400a7b0:	0001883a 	nop
 400a7b4:	00000106 	br	400a7bc <main+0xa00>
						case 0x32:	//3
							break;
						case 0x33:	//4
							break;
						}
						break;
 400a7b8:	0001883a 	nop
					}
				}
			} while (size > 0);
 400a7bc:	e0bfc303 	ldbu	r2,-244(fp)
 400a7c0:	10000126 	beq	r2,zero,400a7c8 <main+0xa0c>
		Usb.Task();
		if(Midi){
			uint8_t MIDI_packet[ 3 ];
			uint8_t size;

			do {
 400a7c4:	003ea906 	br	400a26c <__alt_mem_onchip_memory2_0+0xfc008fcc>
						break;
					}
				}
			} while (size > 0);
		}
		for(int i = 0; i < NUM_NOTES; i++){
 400a7c8:	e03fb515 	stw	zero,-300(fp)
 400a7cc:	e0ffb517 	ldw	r3,-300(fp)
 400a7d0:	e0bfb617 	ldw	r2,-296(fp)
 400a7d4:	18be9d0e 	bge	r3,r2,400a24c <__alt_mem_onchip_memory2_0+0xfc008fac>
			/* Implement release effect */
			if(note_released[i]){
 400a7d8:	e0ffc217 	ldw	r3,-248(fp)
 400a7dc:	e0bfb517 	ldw	r2,-300(fp)
 400a7e0:	1885883a 	add	r2,r3,r2
 400a7e4:	10800003 	ldbu	r2,0(r2)
 400a7e8:	10803fcc 	andi	r2,r2,255
 400a7ec:	10004626 	beq	r2,zero,400a908 <main+0xb4c>
				vol = *(note_vol_array[i]) & 0x00FF;
 400a7f0:	e0ffb817 	ldw	r3,-288(fp)
 400a7f4:	e0bfb517 	ldw	r2,-300(fp)
 400a7f8:	1085883a 	add	r2,r2,r2
 400a7fc:	1085883a 	add	r2,r2,r2
 400a800:	1885883a 	add	r2,r3,r2
 400a804:	10800017 	ldw	r2,0(r2)
 400a808:	10800017 	ldw	r2,0(r2)
 400a80c:	10803fcc 	andi	r2,r2,255
 400a810:	e0bfc415 	stw	r2,-240(fp)
				if(5000*(clock() - note_clocks[i])/CLOCKS_PER_SEC >= release_time){
 400a814:	400ebd40 	call	400ebd4 <clock>
 400a818:	1009883a 	mov	r4,r2
 400a81c:	e0ffbe17 	ldw	r3,-264(fp)
 400a820:	e0bfb517 	ldw	r2,-300(fp)
 400a824:	1085883a 	add	r2,r2,r2
 400a828:	1085883a 	add	r2,r2,r2
 400a82c:	1885883a 	add	r2,r3,r2
 400a830:	10800017 	ldw	r2,0(r2)
 400a834:	2085c83a 	sub	r2,r4,r2
 400a838:	0144e204 	movi	r5,5000
 400a83c:	1009883a 	mov	r4,r2
 400a840:	400dae00 	call	400dae0 <__mulsi3>
 400a844:	0140fa04 	movi	r5,1000
 400a848:	1009883a 	mov	r4,r2
 400a84c:	400da240 	call	400da24 <__udivsi3>
 400a850:	1007883a 	mov	r3,r2
 400a854:	e0bfab17 	ldw	r2,-340(fp)
 400a858:	1885403a 	cmpgeu	r2,r3,r2
 400a85c:	10803fcc 	andi	r2,r2,255
 400a860:	10002926 	beq	r2,zero,400a908 <main+0xb4c>
					note_clocks[i] = clock();
 400a864:	400ebd40 	call	400ebd4 <clock>
 400a868:	1009883a 	mov	r4,r2
 400a86c:	e0ffbe17 	ldw	r3,-264(fp)
 400a870:	e0bfb517 	ldw	r2,-300(fp)
 400a874:	1085883a 	add	r2,r2,r2
 400a878:	1085883a 	add	r2,r2,r2
 400a87c:	1885883a 	add	r2,r3,r2
 400a880:	11000015 	stw	r4,0(r2)
					if(vol > 0)
 400a884:	e0bfc417 	ldw	r2,-240(fp)
 400a888:	10001026 	beq	r2,zero,400a8cc <main+0xb10>
						*(note_vol_array[i]) -= 1;
 400a88c:	e0ffb817 	ldw	r3,-288(fp)
 400a890:	e0bfb517 	ldw	r2,-300(fp)
 400a894:	1085883a 	add	r2,r2,r2
 400a898:	1085883a 	add	r2,r2,r2
 400a89c:	1885883a 	add	r2,r3,r2
 400a8a0:	10c00017 	ldw	r3,0(r2)
 400a8a4:	e13fb817 	ldw	r4,-288(fp)
 400a8a8:	e0bfb517 	ldw	r2,-300(fp)
 400a8ac:	1085883a 	add	r2,r2,r2
 400a8b0:	1085883a 	add	r2,r2,r2
 400a8b4:	2085883a 	add	r2,r4,r2
 400a8b8:	10800017 	ldw	r2,0(r2)
 400a8bc:	10800017 	ldw	r2,0(r2)
 400a8c0:	10bfffc4 	addi	r2,r2,-1
 400a8c4:	18800015 	stw	r2,0(r3)
 400a8c8:	00000f06 	br	400a908 <main+0xb4c>
					else{
						*(note_vol_array[i]) = 0;
 400a8cc:	e0ffb817 	ldw	r3,-288(fp)
 400a8d0:	e0bfb517 	ldw	r2,-300(fp)
 400a8d4:	1085883a 	add	r2,r2,r2
 400a8d8:	1085883a 	add	r2,r2,r2
 400a8dc:	1885883a 	add	r2,r3,r2
 400a8e0:	10800017 	ldw	r2,0(r2)
 400a8e4:	10000015 	stw	zero,0(r2)
						note_used[i] = false;
 400a8e8:	e0ffc017 	ldw	r3,-256(fp)
 400a8ec:	e0bfb517 	ldw	r2,-300(fp)
 400a8f0:	1885883a 	add	r2,r3,r2
 400a8f4:	10000005 	stb	zero,0(r2)
						note_released[i] = false;
 400a8f8:	e0ffc217 	ldw	r3,-248(fp)
 400a8fc:	e0bfb517 	ldw	r2,-300(fp)
 400a900:	1885883a 	add	r2,r3,r2
 400a904:	10000005 	stb	zero,0(r2)
					}
				}
			}
			/* Implement decay effect */
			if(note_used[i]){							//if note is being played
 400a908:	e0ffc017 	ldw	r3,-256(fp)
 400a90c:	e0bfb517 	ldw	r2,-300(fp)
 400a910:	1885883a 	add	r2,r3,r2
 400a914:	10800003 	ldbu	r2,0(r2)
 400a918:	10803fcc 	andi	r2,r2,255
 400a91c:	10004726 	beq	r2,zero,400aa3c <main+0xc80>
				vol = *(note_vol_array[i]) & 0x00FF;	//volume is bottom 8 bits
 400a920:	e0ffb817 	ldw	r3,-288(fp)
 400a924:	e0bfb517 	ldw	r2,-300(fp)
 400a928:	1085883a 	add	r2,r2,r2
 400a92c:	1085883a 	add	r2,r2,r2
 400a930:	1885883a 	add	r2,r3,r2
 400a934:	10800017 	ldw	r2,0(r2)
 400a938:	10800017 	ldw	r2,0(r2)
 400a93c:	10803fcc 	andi	r2,r2,255
 400a940:	e0bfc415 	stw	r2,-240(fp)
				if((2000*(clock() - note_clocks[i])/CLOCKS_PER_SEC) >= ms_to_dec){	//if above sustain level, decrement volume
 400a944:	400ebd40 	call	400ebd4 <clock>
 400a948:	1009883a 	mov	r4,r2
 400a94c:	e0ffbe17 	ldw	r3,-264(fp)
 400a950:	e0bfb517 	ldw	r2,-300(fp)
 400a954:	1085883a 	add	r2,r2,r2
 400a958:	1085883a 	add	r2,r2,r2
 400a95c:	1885883a 	add	r2,r3,r2
 400a960:	10800017 	ldw	r2,0(r2)
 400a964:	2085c83a 	sub	r2,r4,r2
 400a968:	0141f404 	movi	r5,2000
 400a96c:	1009883a 	mov	r4,r2
 400a970:	400dae00 	call	400dae0 <__mulsi3>
 400a974:	0140fa04 	movi	r5,1000
 400a978:	1009883a 	mov	r4,r2
 400a97c:	400da240 	call	400da24 <__udivsi3>
 400a980:	1007883a 	mov	r3,r2
 400a984:	e0bfad17 	ldw	r2,-332(fp)
 400a988:	1885403a 	cmpgeu	r2,r3,r2
 400a98c:	10803fcc 	andi	r2,r2,255
 400a990:	10002a26 	beq	r2,zero,400aa3c <main+0xc80>

					note_clocks[i] = clock();					//update note clock
 400a994:	400ebd40 	call	400ebd4 <clock>
 400a998:	1009883a 	mov	r4,r2
 400a99c:	e0ffbe17 	ldw	r3,-264(fp)
 400a9a0:	e0bfb517 	ldw	r2,-300(fp)
 400a9a4:	1085883a 	add	r2,r2,r2
 400a9a8:	1085883a 	add	r2,r2,r2
 400a9ac:	1885883a 	add	r2,r3,r2
 400a9b0:	11000015 	stw	r4,0(r2)
					if( (vol > sustain_level) && (vol > 0) )	//check to decrement volume
 400a9b4:	e0bfc417 	ldw	r2,-240(fp)
 400a9b8:	e0ffac17 	ldw	r3,-336(fp)
 400a9bc:	1880122e 	bgeu	r3,r2,400aa08 <main+0xc4c>
 400a9c0:	e0bfc417 	ldw	r2,-240(fp)
 400a9c4:	10001026 	beq	r2,zero,400aa08 <main+0xc4c>
						*(note_vol_array[i]) -= 1;
 400a9c8:	e0ffb817 	ldw	r3,-288(fp)
 400a9cc:	e0bfb517 	ldw	r2,-300(fp)
 400a9d0:	1085883a 	add	r2,r2,r2
 400a9d4:	1085883a 	add	r2,r2,r2
 400a9d8:	1885883a 	add	r2,r3,r2
 400a9dc:	10c00017 	ldw	r3,0(r2)
 400a9e0:	e13fb817 	ldw	r4,-288(fp)
 400a9e4:	e0bfb517 	ldw	r2,-300(fp)
 400a9e8:	1085883a 	add	r2,r2,r2
 400a9ec:	1085883a 	add	r2,r2,r2
 400a9f0:	2085883a 	add	r2,r4,r2
 400a9f4:	10800017 	ldw	r2,0(r2)
 400a9f8:	10800017 	ldw	r2,0(r2)
 400a9fc:	10bfffc4 	addi	r2,r2,-1
 400aa00:	18800015 	stw	r2,0(r3)
 400aa04:	00000d06 	br	400aa3c <main+0xc80>
					else if(vol == 0){										//turn note off if volume is zero
 400aa08:	e0bfc417 	ldw	r2,-240(fp)
 400aa0c:	10000b1e 	bne	r2,zero,400aa3c <main+0xc80>
						*(note_vol_array[i]) = 0;
 400aa10:	e0ffb817 	ldw	r3,-288(fp)
 400aa14:	e0bfb517 	ldw	r2,-300(fp)
 400aa18:	1085883a 	add	r2,r2,r2
 400aa1c:	1085883a 	add	r2,r2,r2
 400aa20:	1885883a 	add	r2,r3,r2
 400aa24:	10800017 	ldw	r2,0(r2)
 400aa28:	10000015 	stw	zero,0(r2)
						note_used[i] = false;
 400aa2c:	e0ffc017 	ldw	r3,-256(fp)
 400aa30:	e0bfb517 	ldw	r2,-300(fp)
 400aa34:	1885883a 	add	r2,r3,r2
 400aa38:	10000005 	stb	zero,0(r2)
						break;
					}
				}
			} while (size > 0);
		}
		for(int i = 0; i < NUM_NOTES; i++){
 400aa3c:	e0bfb517 	ldw	r2,-300(fp)
 400aa40:	10800044 	addi	r2,r2,1
 400aa44:	e0bfb515 	stw	r2,-300(fp)
 400aa48:	003f6006 	br	400a7cc <__alt_mem_onchip_memory2_0+0xfc00952c>

0400aa4c <_Z9test_loopv>:
		}
	}
}


void test_loop() {
 400aa4c:	defffd04 	addi	sp,sp,-12
 400aa50:	dfc00215 	stw	ra,8(sp)
 400aa54:	df000115 	stw	fp,4(sp)
 400aa58:	df000104 	addi	fp,sp,4
        delay(200);
 400aa5c:	01003204 	movi	r4,200
 400aa60:	4000dd40 	call	4000dd4 <_Z5delaym>
        Usb.Task();
 400aa64:	010100f4 	movhi	r4,1027
 400aa68:	21382504 	addi	r4,r4,-8044
 400aa6c:	4001f6c0 	call	4001f6c <_ZN3USB4TaskEv>
        usbstate = Usb.getUsbTaskState();
 400aa70:	010100f4 	movhi	r4,1027
 400aa74:	21382504 	addi	r4,r4,-8044
 400aa78:	4000ed80 	call	4000ed8 <_ZN3USB15getUsbTaskStateEv>
 400aa7c:	d0b237c5 	stb	r2,-14113(gp)
        if(usbstate != laststate) {
 400aa80:	d0f237c3 	ldbu	r3,-14113(gp)
 400aa84:	d0b23803 	ldbu	r2,-14112(gp)
 400aa88:	18c03fcc 	andi	r3,r3,255
 400aa8c:	10803fcc 	andi	r2,r2,255
 400aa90:	1880fc26 	beq	r3,r2,400ae84 <_Z9test_loopv+0x438>
                laststate = usbstate;
 400aa94:	d0b237c3 	ldbu	r2,-14113(gp)
 400aa98:	d0b23805 	stb	r2,-14112(gp)
                /**/
                switch(usbstate) {
 400aa9c:	d0b237c3 	ldbu	r2,-14113(gp)
 400aaa0:	10803fcc 	andi	r2,r2,255
 400aaa4:	10c01820 	cmpeqi	r3,r2,96
 400aaa8:	18001f1e 	bne	r3,zero,400ab28 <_Z9test_loopv+0xdc>
 400aaac:	10c01848 	cmpgei	r3,r2,97
 400aab0:	1800071e 	bne	r3,zero,400aad0 <_Z9test_loopv+0x84>
 400aab4:	10c00c20 	cmpeqi	r3,r2,48
 400aab8:	1800111e 	bne	r3,zero,400ab00 <_Z9test_loopv+0xb4>
 400aabc:	10c01420 	cmpeqi	r3,r2,80
 400aac0:	1800141e 	bne	r3,zero,400ab14 <_Z9test_loopv+0xc8>
 400aac4:	108004a0 	cmpeqi	r2,r2,18
 400aac8:	1000081e 	bne	r2,zero,400aaec <_Z9test_loopv+0xa0>
                        case( USB_STATE_ERROR):
                                E_Notify(PSTR("\r\nUSB state machine reached error state"), 0x80);
                                break;

                        default:
                                break;
 400aacc:	0000ed06 	br	400ae84 <_Z9test_loopv+0x438>
        Usb.Task();
        usbstate = Usb.getUsbTaskState();
        if(usbstate != laststate) {
                laststate = usbstate;
                /**/
                switch(usbstate) {
 400aad0:	10c02420 	cmpeqi	r3,r2,144
 400aad4:	18001e1e 	bne	r3,zero,400ab50 <_Z9test_loopv+0x104>
 400aad8:	10c02820 	cmpeqi	r3,r2,160
 400aadc:	1800e41e 	bne	r3,zero,400ae70 <_Z9test_loopv+0x424>
 400aae0:	10801c20 	cmpeqi	r2,r2,112
 400aae4:	1000151e 	bne	r2,zero,400ab3c <_Z9test_loopv+0xf0>
                        case( USB_STATE_ERROR):
                                E_Notify(PSTR("\r\nUSB state machine reached error state"), 0x80);
                                break;

                        default:
                                break;
 400aae8:	0000e606 	br	400ae84 <_Z9test_loopv+0x438>
        if(usbstate != laststate) {
                laststate = usbstate;
                /**/
                switch(usbstate) {
                        case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE):
                                E_Notify(PSTR("\r\nWaiting for device..."), 0x80);
 400aaec:	01402004 	movi	r5,128
 400aaf0:	010100b4 	movhi	r4,1026
 400aaf4:	211cf104 	addi	r4,r4,29636
 400aaf8:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400aafc:	0000e106 	br	400ae84 <_Z9test_loopv+0x438>
                        case( USB_ATTACHED_SUBSTATE_RESET_DEVICE):
                                E_Notify(PSTR("\r\nDevice connected. Resetting..."), 0x80);
 400ab00:	01402004 	movi	r5,128
 400ab04:	010100b4 	movhi	r4,1026
 400ab08:	211cf704 	addi	r4,r4,29660
 400ab0c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400ab10:	0000dc06 	br	400ae84 <_Z9test_loopv+0x438>
                        case( USB_ATTACHED_SUBSTATE_WAIT_SOF):
                                E_Notify(PSTR("\r\nReset complete. Waiting for the first SOF..."), 0x80);
 400ab14:	01402004 	movi	r5,128
 400ab18:	010100b4 	movhi	r4,1026
 400ab1c:	211d0004 	addi	r4,r4,29696
 400ab20:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400ab24:	0000d706 	br	400ae84 <_Z9test_loopv+0x438>
                        case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE):
                                E_Notify(PSTR("\r\nSOF generation started. Enumerating device..."), 0x80);
 400ab28:	01402004 	movi	r5,128
 400ab2c:	010100b4 	movhi	r4,1026
 400ab30:	211d0c04 	addi	r4,r4,29744
 400ab34:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400ab38:	0000d206 	br	400ae84 <_Z9test_loopv+0x438>
                        case( USB_STATE_ADDRESSING):
                                E_Notify(PSTR("\r\nSetting device address..."), 0x80);
 400ab3c:	01402004 	movi	r5,128
 400ab40:	010100b4 	movhi	r4,1026
 400ab44:	211d1804 	addi	r4,r4,29792
 400ab48:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400ab4c:	0000cd06 	br	400ae84 <_Z9test_loopv+0x438>
                        case( USB_STATE_RUNNING):
                                E_Notify(PSTR("\r\nGetting device descriptor"), 0x80);
 400ab50:	01402004 	movi	r5,128
 400ab54:	010100b4 	movhi	r4,1026
 400ab58:	211d1f04 	addi	r4,r4,29820
 400ab5c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                rcode = Usb.getDevDescr(1, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*) & buf);
 400ab60:	00800484 	movi	r2,18
 400ab64:	10ffffcc 	andi	r3,r2,65535
 400ab68:	008100f4 	movhi	r2,1027
 400ab6c:	10b82004 	addi	r2,r2,-8064
 400ab70:	d8800015 	stw	r2,0(sp)
 400ab74:	180f883a 	mov	r7,r3
 400ab78:	000d883a 	mov	r6,zero
 400ab7c:	01400044 	movi	r5,1
 400ab80:	010100f4 	movhi	r4,1027
 400ab84:	21382504 	addi	r4,r4,-8044
 400ab88:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 400ab8c:	d0b23785 	stb	r2,-14114(gp)

                                if(rcode) {
 400ab90:	d0b23783 	ldbu	r2,-14114(gp)
 400ab94:	10803fcc 	andi	r2,r2,255
 400ab98:	10000a26 	beq	r2,zero,400abc4 <_Z9test_loopv+0x178>
                                        E_Notify(PSTR("\r\nError reading device descriptor. Error code "), 0x80);
 400ab9c:	01402004 	movi	r5,128
 400aba0:	010100b4 	movhi	r4,1026
 400aba4:	211d2604 	addi	r4,r4,29848
 400aba8:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(rcode, 8);
 400abac:	d0b23783 	ldbu	r2,-14114(gp)
 400abb0:	10803fcc 	andi	r2,r2,255
 400abb4:	01400204 	movi	r5,8
 400abb8:	1009883a 	mov	r4,r2
 400abbc:	400aef40 	call	400aef4 <_Z9print_hexii>
#ifdef ESP8266
                                                yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif

                                }
                                break;
 400abc0:	0000b006 	br	400ae84 <_Z9test_loopv+0x438>
                                if(rcode) {
                                        E_Notify(PSTR("\r\nError reading device descriptor. Error code "), 0x80);
                                        print_hex(rcode, 8);
                                } else {
                                        /**/
                                        E_Notify(PSTR("\r\nDescriptor Length:\t"), 0x80);
 400abc4:	01402004 	movi	r5,128
 400abc8:	010100b4 	movhi	r4,1026
 400abcc:	211d3204 	addi	r4,r4,29896
 400abd0:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bLength, 8);
 400abd4:	008100f4 	movhi	r2,1027
 400abd8:	10b82004 	addi	r2,r2,-8064
 400abdc:	10800003 	ldbu	r2,0(r2)
 400abe0:	10803fcc 	andi	r2,r2,255
 400abe4:	01400204 	movi	r5,8
 400abe8:	1009883a 	mov	r4,r2
 400abec:	400aef40 	call	400aef4 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDescriptor type:\t"), 0x80);
 400abf0:	01402004 	movi	r5,128
 400abf4:	010100b4 	movhi	r4,1026
 400abf8:	211d3804 	addi	r4,r4,29920
 400abfc:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDescriptorType, 8);
 400ac00:	008100f4 	movhi	r2,1027
 400ac04:	10b82004 	addi	r2,r2,-8064
 400ac08:	10800043 	ldbu	r2,1(r2)
 400ac0c:	10803fcc 	andi	r2,r2,255
 400ac10:	01400204 	movi	r5,8
 400ac14:	1009883a 	mov	r4,r2
 400ac18:	400aef40 	call	400aef4 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nUSB version:\t\t"), 0x80);
 400ac1c:	01402004 	movi	r5,128
 400ac20:	010100b4 	movhi	r4,1026
 400ac24:	211d3d04 	addi	r4,r4,29940
 400ac28:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bcdUSB, 16);
 400ac2c:	008100f4 	movhi	r2,1027
 400ac30:	10b82004 	addi	r2,r2,-8064
 400ac34:	10c00083 	ldbu	r3,2(r2)
 400ac38:	108000c3 	ldbu	r2,3(r2)
 400ac3c:	1004923a 	slli	r2,r2,8
 400ac40:	10c4b03a 	or	r2,r2,r3
 400ac44:	10bfffcc 	andi	r2,r2,65535
 400ac48:	01400404 	movi	r5,16
 400ac4c:	1009883a 	mov	r4,r2
 400ac50:	400aef40 	call	400aef4 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDevice class:\t\t"), 0x80);
 400ac54:	01402004 	movi	r5,128
 400ac58:	010100b4 	movhi	r4,1026
 400ac5c:	211d4204 	addi	r4,r4,29960
 400ac60:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDeviceClass, 8);
 400ac64:	008100f4 	movhi	r2,1027
 400ac68:	10b82004 	addi	r2,r2,-8064
 400ac6c:	10800103 	ldbu	r2,4(r2)
 400ac70:	10803fcc 	andi	r2,r2,255
 400ac74:	01400204 	movi	r5,8
 400ac78:	1009883a 	mov	r4,r2
 400ac7c:	400aef40 	call	400aef4 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDevice Subclass:\t"), 0x80);
 400ac80:	01402004 	movi	r5,128
 400ac84:	010100b4 	movhi	r4,1026
 400ac88:	211d4704 	addi	r4,r4,29980
 400ac8c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDeviceSubClass, 8);
 400ac90:	008100f4 	movhi	r2,1027
 400ac94:	10b82004 	addi	r2,r2,-8064
 400ac98:	10800143 	ldbu	r2,5(r2)
 400ac9c:	10803fcc 	andi	r2,r2,255
 400aca0:	01400204 	movi	r5,8
 400aca4:	1009883a 	mov	r4,r2
 400aca8:	400aef40 	call	400aef4 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDevice Protocol:\t"), 0x80);
 400acac:	01402004 	movi	r5,128
 400acb0:	010100b4 	movhi	r4,1026
 400acb4:	211d4c04 	addi	r4,r4,30000
 400acb8:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDeviceProtocol, 8);
 400acbc:	008100f4 	movhi	r2,1027
 400acc0:	10b82004 	addi	r2,r2,-8064
 400acc4:	10800183 	ldbu	r2,6(r2)
 400acc8:	10803fcc 	andi	r2,r2,255
 400accc:	01400204 	movi	r5,8
 400acd0:	1009883a 	mov	r4,r2
 400acd4:	400aef40 	call	400aef4 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nMax.packet size:\t"), 0x80);
 400acd8:	01402004 	movi	r5,128
 400acdc:	010100b4 	movhi	r4,1026
 400ace0:	211d5104 	addi	r4,r4,30020
 400ace4:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bMaxPacketSize0, 8);
 400ace8:	008100f4 	movhi	r2,1027
 400acec:	10b82004 	addi	r2,r2,-8064
 400acf0:	108001c3 	ldbu	r2,7(r2)
 400acf4:	10803fcc 	andi	r2,r2,255
 400acf8:	01400204 	movi	r5,8
 400acfc:	1009883a 	mov	r4,r2
 400ad00:	400aef40 	call	400aef4 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nVendor  ID:\t\t"), 0x80);
 400ad04:	01402004 	movi	r5,128
 400ad08:	010100b4 	movhi	r4,1026
 400ad0c:	211d5604 	addi	r4,r4,30040
 400ad10:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.idVendor, 16);
 400ad14:	008100f4 	movhi	r2,1027
 400ad18:	10b82004 	addi	r2,r2,-8064
 400ad1c:	10c00203 	ldbu	r3,8(r2)
 400ad20:	10800243 	ldbu	r2,9(r2)
 400ad24:	1004923a 	slli	r2,r2,8
 400ad28:	10c4b03a 	or	r2,r2,r3
 400ad2c:	10bfffcc 	andi	r2,r2,65535
 400ad30:	01400404 	movi	r5,16
 400ad34:	1009883a 	mov	r4,r2
 400ad38:	400aef40 	call	400aef4 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nProduct ID:\t\t"), 0x80);
 400ad3c:	01402004 	movi	r5,128
 400ad40:	010100b4 	movhi	r4,1026
 400ad44:	211d5a04 	addi	r4,r4,30056
 400ad48:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.idProduct, 16);
 400ad4c:	008100f4 	movhi	r2,1027
 400ad50:	10b82004 	addi	r2,r2,-8064
 400ad54:	10c00283 	ldbu	r3,10(r2)
 400ad58:	108002c3 	ldbu	r2,11(r2)
 400ad5c:	1004923a 	slli	r2,r2,8
 400ad60:	10c4b03a 	or	r2,r2,r3
 400ad64:	10bfffcc 	andi	r2,r2,65535
 400ad68:	01400404 	movi	r5,16
 400ad6c:	1009883a 	mov	r4,r2
 400ad70:	400aef40 	call	400aef4 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nRevision ID:\t\t"), 0x80);
 400ad74:	01402004 	movi	r5,128
 400ad78:	010100b4 	movhi	r4,1026
 400ad7c:	211d5e04 	addi	r4,r4,30072
 400ad80:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bcdDevice, 16);
 400ad84:	008100f4 	movhi	r2,1027
 400ad88:	10b82004 	addi	r2,r2,-8064
 400ad8c:	10c00303 	ldbu	r3,12(r2)
 400ad90:	10800343 	ldbu	r2,13(r2)
 400ad94:	1004923a 	slli	r2,r2,8
 400ad98:	10c4b03a 	or	r2,r2,r3
 400ad9c:	10bfffcc 	andi	r2,r2,65535
 400ada0:	01400404 	movi	r5,16
 400ada4:	1009883a 	mov	r4,r2
 400ada8:	400aef40 	call	400aef4 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nMfg.string index:\t"), 0x80);
 400adac:	01402004 	movi	r5,128
 400adb0:	010100b4 	movhi	r4,1026
 400adb4:	211d6304 	addi	r4,r4,30092
 400adb8:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.iManufacturer, 8);
 400adbc:	008100f4 	movhi	r2,1027
 400adc0:	10b82004 	addi	r2,r2,-8064
 400adc4:	10800383 	ldbu	r2,14(r2)
 400adc8:	10803fcc 	andi	r2,r2,255
 400adcc:	01400204 	movi	r5,8
 400add0:	1009883a 	mov	r4,r2
 400add4:	400aef40 	call	400aef4 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nProd.string index:\t"), 0x80);
 400add8:	01402004 	movi	r5,128
 400addc:	010100b4 	movhi	r4,1026
 400ade0:	211d6904 	addi	r4,r4,30116
 400ade4:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.iProduct, 8);
 400ade8:	008100f4 	movhi	r2,1027
 400adec:	10b82004 	addi	r2,r2,-8064
 400adf0:	108003c3 	ldbu	r2,15(r2)
 400adf4:	10803fcc 	andi	r2,r2,255
 400adf8:	01400204 	movi	r5,8
 400adfc:	1009883a 	mov	r4,r2
 400ae00:	400aef40 	call	400aef4 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nSerial number index:\t"), 0x80);
 400ae04:	01402004 	movi	r5,128
 400ae08:	010100b4 	movhi	r4,1026
 400ae0c:	211d6f04 	addi	r4,r4,30140
 400ae10:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.iSerialNumber, 8);
 400ae14:	008100f4 	movhi	r2,1027
 400ae18:	10b82004 	addi	r2,r2,-8064
 400ae1c:	10800403 	ldbu	r2,16(r2)
 400ae20:	10803fcc 	andi	r2,r2,255
 400ae24:	01400204 	movi	r5,8
 400ae28:	1009883a 	mov	r4,r2
 400ae2c:	400aef40 	call	400aef4 <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nNumber of conf.:\t"), 0x80);
 400ae30:	01402004 	movi	r5,128
 400ae34:	010100b4 	movhi	r4,1026
 400ae38:	211d7504 	addi	r4,r4,30164
 400ae3c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bNumConfigurations, 8);
 400ae40:	008100f4 	movhi	r2,1027
 400ae44:	10b82004 	addi	r2,r2,-8064
 400ae48:	10800443 	ldbu	r2,17(r2)
 400ae4c:	10803fcc 	andi	r2,r2,255
 400ae50:	01400204 	movi	r5,8
 400ae54:	1009883a 	mov	r4,r2
 400ae58:	400aef40 	call	400aef4 <_Z9print_hexii>
                                        /**/
                                        E_Notify(PSTR("\r\n\nAll tests passed. Press RESET to restart test"), 0x80);
 400ae5c:	01402004 	movi	r5,128
 400ae60:	010100b4 	movhi	r4,1026
 400ae64:	211d7a04 	addi	r4,r4,30184
 400ae68:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
#ifdef ESP8266
                                                yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif

                                }
                                break;
 400ae6c:	00000506 	br	400ae84 <_Z9test_loopv+0x438>
                        case( USB_STATE_ERROR):
                                E_Notify(PSTR("\r\nUSB state machine reached error state"), 0x80);
 400ae70:	01402004 	movi	r5,128
 400ae74:	010100b4 	movhi	r4,1026
 400ae78:	211d8704 	addi	r4,r4,30236
 400ae7c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400ae80:	0001883a 	nop

                        default:
                                break;
                }//switch( usbstate...
        }
}//loop()...
 400ae84:	0001883a 	nop
 400ae88:	e037883a 	mov	sp,fp
 400ae8c:	dfc00117 	ldw	ra,4(sp)
 400ae90:	df000017 	ldw	fp,0(sp)
 400ae94:	dec00204 	addi	sp,sp,8
 400ae98:	f800283a 	ret

0400ae9c <_Z6halt55v>:

/* constantly transmits 0x55 via SPI to aid probing */
void halt55() {
 400ae9c:	defffe04 	addi	sp,sp,-8
 400aea0:	dfc00115 	stw	ra,4(sp)
 400aea4:	df000015 	stw	fp,0(sp)
 400aea8:	d839883a 	mov	fp,sp

        E_Notify(PSTR("\r\nUnrecoverable error - test halted!!"), 0x80);
 400aeac:	01402004 	movi	r5,128
 400aeb0:	010100b4 	movhi	r4,1026
 400aeb4:	211d9104 	addi	r4,r4,30276
 400aeb8:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
        E_Notify(PSTR("\r\n0x55 pattern is transmitted via SPI"), 0x80);
 400aebc:	01402004 	movi	r5,128
 400aec0:	010100b4 	movhi	r4,1026
 400aec4:	211d9b04 	addi	r4,r4,30316
 400aec8:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
        E_Notify(PSTR("\r\nPress RESET to restart test"), 0x80);
 400aecc:	01402004 	movi	r5,128
 400aed0:	010100b4 	movhi	r4,1026
 400aed4:	211da504 	addi	r4,r4,30356
 400aed8:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>

        while(1) {
                Usb.regWr(0x55, 0x55);
 400aedc:	01801544 	movi	r6,85
 400aee0:	01401544 	movi	r5,85
 400aee4:	010100f4 	movhi	r4,1027
 400aee8:	21382504 	addi	r4,r4,-8044
 400aeec:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        E_Notify(PSTR("\r\nUnrecoverable error - test halted!!"), 0x80);
        E_Notify(PSTR("\r\n0x55 pattern is transmitted via SPI"), 0x80);
        E_Notify(PSTR("\r\nPress RESET to restart test"), 0x80);

        while(1) {
 400aef0:	003ffa06 	br	400aedc <__alt_mem_onchip_memory2_0+0xfc009c3c>

0400aef4 <_Z9print_hexii>:
#endif
        }
}

/* prints hex numbers with leading zeroes */
void print_hex(int v, int num_places) {
 400aef4:	defff804 	addi	sp,sp,-32
 400aef8:	dfc00715 	stw	ra,28(sp)
 400aefc:	df000615 	stw	fp,24(sp)
 400af00:	df000604 	addi	fp,sp,24
 400af04:	e13ffe15 	stw	r4,-8(fp)
 400af08:	e17fff15 	stw	r5,-4(fp)
        int mask = 0, n, num_nibbles, digit;
 400af0c:	e03ffa15 	stw	zero,-24(fp)

        for(n = 1; n <= num_places; n++) {
 400af10:	00800044 	movi	r2,1
 400af14:	e0bffb15 	stw	r2,-20(fp)
 400af18:	e0bffb17 	ldw	r2,-20(fp)
 400af1c:	e0ffff17 	ldw	r3,-4(fp)
 400af20:	18800816 	blt	r3,r2,400af44 <_Z9print_hexii+0x50>
                mask = (mask << 1) | 0x0001;
 400af24:	e0bffa17 	ldw	r2,-24(fp)
 400af28:	1085883a 	add	r2,r2,r2
 400af2c:	10800054 	ori	r2,r2,1
 400af30:	e0bffa15 	stw	r2,-24(fp)

/* prints hex numbers with leading zeroes */
void print_hex(int v, int num_places) {
        int mask = 0, n, num_nibbles, digit;

        for(n = 1; n <= num_places; n++) {
 400af34:	e0bffb17 	ldw	r2,-20(fp)
 400af38:	10800044 	addi	r2,r2,1
 400af3c:	e0bffb15 	stw	r2,-20(fp)
 400af40:	003ff506 	br	400af18 <__alt_mem_onchip_memory2_0+0xfc009c78>
                mask = (mask << 1) | 0x0001;
        }
        v = v & mask; // truncate v to specified number of places
 400af44:	e0fffe17 	ldw	r3,-8(fp)
 400af48:	e0bffa17 	ldw	r2,-24(fp)
 400af4c:	1884703a 	and	r2,r3,r2
 400af50:	e0bffe15 	stw	r2,-8(fp)

        num_nibbles = num_places / 4;
 400af54:	e0bfff17 	ldw	r2,-4(fp)
 400af58:	1000010e 	bge	r2,zero,400af60 <_Z9print_hexii+0x6c>
 400af5c:	108000c4 	addi	r2,r2,3
 400af60:	1005d0ba 	srai	r2,r2,2
 400af64:	e0bffc15 	stw	r2,-16(fp)
        if((num_places % 4) != 0) {
 400af68:	e0bfff17 	ldw	r2,-4(fp)
 400af6c:	108000cc 	andi	r2,r2,3
 400af70:	10000326 	beq	r2,zero,400af80 <_Z9print_hexii+0x8c>
                ++num_nibbles;
 400af74:	e0bffc17 	ldw	r2,-16(fp)
 400af78:	10800044 	addi	r2,r2,1
 400af7c:	e0bffc15 	stw	r2,-16(fp)
        }
        do {
                digit = ((v >> (num_nibbles - 1) * 4)) & 0x0f;
 400af80:	e0bffc17 	ldw	r2,-16(fp)
 400af84:	10bfffc4 	addi	r2,r2,-1
 400af88:	1085883a 	add	r2,r2,r2
 400af8c:	1085883a 	add	r2,r2,r2
 400af90:	1007883a 	mov	r3,r2
 400af94:	e0bffe17 	ldw	r2,-8(fp)
 400af98:	10c5d83a 	sra	r2,r2,r3
 400af9c:	108003cc 	andi	r2,r2,15
 400afa0:	e0bffd15 	stw	r2,-12(fp)
                printf("%x\n", digit);
 400afa4:	e17ffd17 	ldw	r5,-12(fp)
 400afa8:	010100b4 	movhi	r4,1026
 400afac:	211dad04 	addi	r4,r4,30388
 400afb0:	400f6f40 	call	400f6f4 <printf>

        num_nibbles = num_places / 4;
        if((num_places % 4) != 0) {
                ++num_nibbles;
        }
        do {
 400afb4:	e0bffc17 	ldw	r2,-16(fp)
 400afb8:	10bfffc4 	addi	r2,r2,-1
 400afbc:	e0bffc15 	stw	r2,-16(fp)
 400afc0:	e0bffc17 	ldw	r2,-16(fp)
 400afc4:	1004c03a 	cmpne	r2,r2,zero
 400afc8:	10803fcc 	andi	r2,r2,255
 400afcc:	10000126 	beq	r2,zero,400afd4 <_Z9print_hexii+0xe0>
 400afd0:	003feb06 	br	400af80 <__alt_mem_onchip_memory2_0+0xfc009ce0>
                digit = ((v >> (num_nibbles - 1) * 4)) & 0x0f;
                printf("%x\n", digit);
        } while(--num_nibbles);
}
 400afd4:	0001883a 	nop
 400afd8:	e037883a 	mov	sp,fp
 400afdc:	dfc00117 	ldw	ra,4(sp)
 400afe0:	df000017 	ldw	fp,0(sp)
 400afe4:	dec00204 	addi	sp,sp,8
 400afe8:	f800283a 	ret

0400afec <_Z13press_any_keyv>:

/* prints "Press any key" and returns when key is pressed */
void press_any_key() {
 400afec:	defffe04 	addi	sp,sp,-8
 400aff0:	dfc00115 	stw	ra,4(sp)
 400aff4:	df000015 	stw	fp,0(sp)
 400aff8:	d839883a 	mov	fp,sp
        E_Notify(PSTR("\r\nPress any key to continue..."), 0x80);
 400affc:	01402004 	movi	r5,128
 400b000:	010100b4 	movhi	r4,1026
 400b004:	211dae04 	addi	r4,r4,30392
 400b008:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
//        char x;
//        scanf("%s", &x);
}
 400b00c:	0001883a 	nop
 400b010:	e037883a 	mov	sp,fp
 400b014:	dfc00117 	ldw	ra,4(sp)
 400b018:	df000017 	ldw	fp,0(sp)
 400b01c:	dec00204 	addi	sp,sp,8
 400b020:	f800283a 	ret

0400b024 <_Z41__static_initialization_and_destruction_0ii>:
 400b024:	defffc04 	addi	sp,sp,-16
 400b028:	dfc00315 	stw	ra,12(sp)
 400b02c:	df000215 	stw	fp,8(sp)
 400b030:	df000204 	addi	fp,sp,8
 400b034:	e13ffe15 	stw	r4,-8(fp)
 400b038:	e17fff15 	stw	r5,-4(fp)
 400b03c:	e0bffe17 	ldw	r2,-8(fp)
 400b040:	10800058 	cmpnei	r2,r2,1
 400b044:	1000061e 	bne	r2,zero,400b060 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 400b048:	e0ffff17 	ldw	r3,-4(fp)
 400b04c:	00bfffd4 	movui	r2,65535
 400b050:	1880031e 	bne	r3,r2,400b060 <_Z41__static_initialization_and_destruction_0ii+0x3c>
uint8_t rcode;
uint8_t usbstate;
uint8_t laststate;
//uint8_t buf[sizeof(USB_DEVICE_DESCRIPTOR)];
USB_DEVICE_DESCRIPTOR buf;
USB Usb;
 400b054:	010100f4 	movhi	r4,1027
 400b058:	21382504 	addi	r4,r4,-8044
 400b05c:	4000e540 	call	4000e54 <_ZN3USBC1Ev>
/* prints "Press any key" and returns when key is pressed */
void press_any_key() {
        E_Notify(PSTR("\r\nPress any key to continue..."), 0x80);
//        char x;
//        scanf("%s", &x);
}
 400b060:	0001883a 	nop
 400b064:	e037883a 	mov	sp,fp
 400b068:	dfc00117 	ldw	ra,4(sp)
 400b06c:	df000017 	ldw	fp,0(sp)
 400b070:	dec00204 	addi	sp,sp,8
 400b074:	f800283a 	ret

0400b078 <_GLOBAL__sub_I_rcode>:
 400b078:	defffe04 	addi	sp,sp,-8
 400b07c:	dfc00115 	stw	ra,4(sp)
 400b080:	df000015 	stw	fp,0(sp)
 400b084:	d839883a 	mov	fp,sp
 400b088:	017fffd4 	movui	r5,65535
 400b08c:	01000044 	movi	r4,1
 400b090:	400b0240 	call	400b024 <_Z41__static_initialization_and_destruction_0ii>
 400b094:	e037883a 	mov	sp,fp
 400b098:	dfc00117 	ldw	ra,4(sp)
 400b09c:	df000017 	ldw	fp,0(sp)
 400b0a0:	dec00204 	addi	sp,sp,8
 400b0a4:	f800283a 	ret

0400b0a8 <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
 400b0a8:	defffe04 	addi	sp,sp,-8
 400b0ac:	df000115 	stw	fp,4(sp)
 400b0b0:	df000104 	addi	fp,sp,4
 400b0b4:	e13fff15 	stw	r4,-4(fp)
 400b0b8:	e0bfff17 	ldw	r2,-4(fp)
 400b0bc:	10800343 	ldbu	r2,13(r2)
 400b0c0:	e037883a 	mov	sp,fp
 400b0c4:	df000017 	ldw	fp,0(sp)
 400b0c8:	dec00104 	addi	sp,sp,4
 400b0cc:	f800283a 	ret

0400b0d0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 400b0d0:	008100b4 	movhi	r2,1026
 400b0d4:	109dc504 	addi	r2,r2,30484
 400b0d8:	20800015 	stw	r2,0(r4)
 400b0dc:	400bea81 	jmpi	400bea8 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0400b0e0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 400b0e0:	defffe04 	addi	sp,sp,-8
 400b0e4:	008100b4 	movhi	r2,1026
 400b0e8:	dc000015 	stw	r16,0(sp)
 400b0ec:	dfc00115 	stw	ra,4(sp)
 400b0f0:	109dc504 	addi	r2,r2,30484
 400b0f4:	20800015 	stw	r2,0(r4)
 400b0f8:	2021883a 	mov	r16,r4
 400b0fc:	400bea80 	call	400bea8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 400b100:	8009883a 	mov	r4,r16
 400b104:	dfc00117 	ldw	ra,4(sp)
 400b108:	dc000017 	ldw	r16,0(sp)
 400b10c:	dec00204 	addi	sp,sp,8
 400b110:	400bdd41 	jmpi	400bdd4 <_ZdlPv>

0400b114 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 400b114:	defff504 	addi	sp,sp,-44
 400b118:	dc000115 	stw	r16,4(sp)
 400b11c:	38800117 	ldw	r2,4(r7)
 400b120:	24000117 	ldw	r16,4(r4)
 400b124:	df000915 	stw	fp,36(sp)
 400b128:	ddc00815 	stw	r23,32(sp)
 400b12c:	dd800715 	stw	r22,28(sp)
 400b130:	dcc00415 	stw	r19,16(sp)
 400b134:	dc800315 	stw	r18,12(sp)
 400b138:	dc400215 	stw	r17,8(sp)
 400b13c:	dfc00a15 	stw	ra,40(sp)
 400b140:	dd400615 	stw	r21,24(sp)
 400b144:	dd000515 	stw	r20,20(sp)
 400b148:	2823883a 	mov	r17,r5
 400b14c:	3039883a 	mov	fp,r6
 400b150:	dcc00b17 	ldw	r19,44(sp)
 400b154:	ddc00c17 	ldw	r23,48(sp)
 400b158:	dd800d17 	ldw	r22,52(sp)
 400b15c:	dc800e17 	ldw	r18,56(sp)
 400b160:	80800b26 	beq	r16,r2,400b190 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
 400b164:	80c00007 	ldb	r3,0(r16)
 400b168:	2029883a 	mov	r20,r4
 400b16c:	01000a84 	movi	r4,42
 400b170:	382b883a 	mov	r21,r7
 400b174:	19001a26 	beq	r3,r4,400b1e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 400b178:	100b883a 	mov	r5,r2
 400b17c:	8009883a 	mov	r4,r16
 400b180:	d8c00015 	stw	r3,0(sp)
 400b184:	400fb7c0 	call	400fb7c <strcmp>
 400b188:	d8c00017 	ldw	r3,0(sp)
 400b18c:	1000141e 	bne	r2,zero,400b1e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 400b190:	94c00015 	stw	r19,0(r18)
 400b194:	97000115 	stw	fp,4(r18)
 400b198:	88002816 	blt	r17,zero,400b23c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
 400b19c:	9c63883a 	add	r17,r19,r17
 400b1a0:	b4403226 	beq	r22,r17,400b26c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
 400b1a4:	00800044 	movi	r2,1
 400b1a8:	90800315 	stw	r2,12(r18)
 400b1ac:	0005883a 	mov	r2,zero
 400b1b0:	dfc00a17 	ldw	ra,40(sp)
 400b1b4:	df000917 	ldw	fp,36(sp)
 400b1b8:	ddc00817 	ldw	r23,32(sp)
 400b1bc:	dd800717 	ldw	r22,28(sp)
 400b1c0:	dd400617 	ldw	r21,24(sp)
 400b1c4:	dd000517 	ldw	r20,20(sp)
 400b1c8:	dcc00417 	ldw	r19,16(sp)
 400b1cc:	dc800317 	ldw	r18,12(sp)
 400b1d0:	dc400217 	ldw	r17,8(sp)
 400b1d4:	dc000117 	ldw	r16,4(sp)
 400b1d8:	dec00b04 	addi	sp,sp,44
 400b1dc:	f800283a 	ret
 400b1e0:	9d801926 	beq	r19,r22,400b248 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 400b1e4:	a1000217 	ldw	r4,8(r20)
 400b1e8:	a80f883a 	mov	r7,r21
 400b1ec:	e00d883a 	mov	r6,fp
 400b1f0:	20800017 	ldw	r2,0(r4)
 400b1f4:	dc800e15 	stw	r18,56(sp)
 400b1f8:	dd800d15 	stw	r22,52(sp)
 400b1fc:	ddc00c15 	stw	r23,48(sp)
 400b200:	dcc00b15 	stw	r19,44(sp)
 400b204:	10800717 	ldw	r2,28(r2)
 400b208:	880b883a 	mov	r5,r17
 400b20c:	dfc00a17 	ldw	ra,40(sp)
 400b210:	df000917 	ldw	fp,36(sp)
 400b214:	ddc00817 	ldw	r23,32(sp)
 400b218:	dd800717 	ldw	r22,28(sp)
 400b21c:	dd400617 	ldw	r21,24(sp)
 400b220:	dd000517 	ldw	r20,20(sp)
 400b224:	dcc00417 	ldw	r19,16(sp)
 400b228:	dc800317 	ldw	r18,12(sp)
 400b22c:	dc400217 	ldw	r17,8(sp)
 400b230:	dc000117 	ldw	r16,4(sp)
 400b234:	dec00b04 	addi	sp,sp,44
 400b238:	1000683a 	jmp	r2
 400b23c:	00bfff84 	movi	r2,-2
 400b240:	88bfda1e 	bne	r17,r2,400b1ac <__alt_mem_onchip_memory2_0+0xfc009f0c>
 400b244:	003fd706 	br	400b1a4 <__alt_mem_onchip_memory2_0+0xfc009f04>
 400b248:	b9400117 	ldw	r5,4(r23)
 400b24c:	81400526 	beq	r16,r5,400b264 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 400b250:	00800a84 	movi	r2,42
 400b254:	18bfe326 	beq	r3,r2,400b1e4 <__alt_mem_onchip_memory2_0+0xfc009f44>
 400b258:	8009883a 	mov	r4,r16
 400b25c:	400fb7c0 	call	400fb7c <strcmp>
 400b260:	103fe01e 	bne	r2,zero,400b1e4 <__alt_mem_onchip_memory2_0+0xfc009f44>
 400b264:	97000215 	stw	fp,8(r18)
 400b268:	003fd006 	br	400b1ac <__alt_mem_onchip_memory2_0+0xfc009f0c>
 400b26c:	00800184 	movi	r2,6
 400b270:	003fcd06 	br	400b1a8 <__alt_mem_onchip_memory2_0+0xfc009f08>

0400b274 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 400b274:	defffa04 	addi	sp,sp,-24
 400b278:	dc000215 	stw	r16,8(sp)
 400b27c:	dc000617 	ldw	r16,24(sp)
 400b280:	dc800415 	stw	r18,16(sp)
 400b284:	dc400315 	stw	r17,12(sp)
 400b288:	dfc00515 	stw	ra,20(sp)
 400b28c:	2023883a 	mov	r17,r4
 400b290:	2825883a 	mov	r18,r5
 400b294:	81800b26 	beq	r16,r6,400b2c4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
 400b298:	89000217 	ldw	r4,8(r17)
 400b29c:	900b883a 	mov	r5,r18
 400b2a0:	20800017 	ldw	r2,0(r4)
 400b2a4:	dc000615 	stw	r16,24(sp)
 400b2a8:	10800817 	ldw	r2,32(r2)
 400b2ac:	dfc00517 	ldw	ra,20(sp)
 400b2b0:	dc800417 	ldw	r18,16(sp)
 400b2b4:	dc400317 	ldw	r17,12(sp)
 400b2b8:	dc000217 	ldw	r16,8(sp)
 400b2bc:	dec00604 	addi	sp,sp,24
 400b2c0:	1000683a 	jmp	r2
 400b2c4:	21000117 	ldw	r4,4(r4)
 400b2c8:	39400117 	ldw	r5,4(r7)
 400b2cc:	21400926 	beq	r4,r5,400b2f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
 400b2d0:	20c00007 	ldb	r3,0(r4)
 400b2d4:	00800a84 	movi	r2,42
 400b2d8:	18bfef26 	beq	r3,r2,400b298 <__alt_mem_onchip_memory2_0+0xfc009ff8>
 400b2dc:	d9800015 	stw	r6,0(sp)
 400b2e0:	d9c00115 	stw	r7,4(sp)
 400b2e4:	400fb7c0 	call	400fb7c <strcmp>
 400b2e8:	d9800017 	ldw	r6,0(sp)
 400b2ec:	d9c00117 	ldw	r7,4(sp)
 400b2f0:	103fe91e 	bne	r2,zero,400b298 <__alt_mem_onchip_memory2_0+0xfc009ff8>
 400b2f4:	00800184 	movi	r2,6
 400b2f8:	dfc00517 	ldw	ra,20(sp)
 400b2fc:	dc800417 	ldw	r18,16(sp)
 400b300:	dc400317 	ldw	r17,12(sp)
 400b304:	dc000217 	ldw	r16,8(sp)
 400b308:	dec00604 	addi	sp,sp,24
 400b30c:	f800283a 	ret

0400b310 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 400b310:	defffb04 	addi	sp,sp,-20
 400b314:	dcc00315 	stw	r19,12(sp)
 400b318:	dc800215 	stw	r18,8(sp)
 400b31c:	dc400115 	stw	r17,4(sp)
 400b320:	dc000015 	stw	r16,0(sp)
 400b324:	dfc00415 	stw	ra,16(sp)
 400b328:	2027883a 	mov	r19,r4
 400b32c:	2821883a 	mov	r16,r5
 400b330:	3023883a 	mov	r17,r6
 400b334:	3825883a 	mov	r18,r7
 400b338:	400beec0 	call	400beec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 400b33c:	10c03fcc 	andi	r3,r2,255
 400b340:	18000726 	beq	r3,zero,400b360 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
 400b344:	dfc00417 	ldw	ra,16(sp)
 400b348:	dcc00317 	ldw	r19,12(sp)
 400b34c:	dc800217 	ldw	r18,8(sp)
 400b350:	dc400117 	ldw	r17,4(sp)
 400b354:	dc000017 	ldw	r16,0(sp)
 400b358:	dec00504 	addi	sp,sp,20
 400b35c:	f800283a 	ret
 400b360:	99000217 	ldw	r4,8(r19)
 400b364:	900f883a 	mov	r7,r18
 400b368:	880d883a 	mov	r6,r17
 400b36c:	20800017 	ldw	r2,0(r4)
 400b370:	800b883a 	mov	r5,r16
 400b374:	10800617 	ldw	r2,24(r2)
 400b378:	dfc00417 	ldw	ra,16(sp)
 400b37c:	dcc00317 	ldw	r19,12(sp)
 400b380:	dc800217 	ldw	r18,8(sp)
 400b384:	dc400117 	ldw	r17,4(sp)
 400b388:	dc000017 	ldw	r16,0(sp)
 400b38c:	dec00504 	addi	sp,sp,20
 400b390:	1000683a 	jmp	r2

0400b394 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 400b394:	008100b4 	movhi	r2,1026
 400b398:	109ddd04 	addi	r2,r2,30580
 400b39c:	20800015 	stw	r2,0(r4)
 400b3a0:	400bea81 	jmpi	400bea8 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0400b3a4 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 400b3a4:	defffe04 	addi	sp,sp,-8
 400b3a8:	008100b4 	movhi	r2,1026
 400b3ac:	dc000015 	stw	r16,0(sp)
 400b3b0:	dfc00115 	stw	ra,4(sp)
 400b3b4:	109ddd04 	addi	r2,r2,30580
 400b3b8:	20800015 	stw	r2,0(r4)
 400b3bc:	2021883a 	mov	r16,r4
 400b3c0:	400bea80 	call	400bea8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 400b3c4:	8009883a 	mov	r4,r16
 400b3c8:	dfc00117 	ldw	ra,4(sp)
 400b3cc:	dc000017 	ldw	r16,0(sp)
 400b3d0:	dec00204 	addi	sp,sp,8
 400b3d4:	400bdd41 	jmpi	400bdd4 <_ZdlPv>

0400b3d8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 400b3d8:	defff504 	addi	sp,sp,-44
 400b3dc:	dc400215 	stw	r17,8(sp)
 400b3e0:	dc400b17 	ldw	r17,44(sp)
 400b3e4:	df000915 	stw	fp,36(sp)
 400b3e8:	ddc00815 	stw	r23,32(sp)
 400b3ec:	dd800715 	stw	r22,28(sp)
 400b3f0:	dc000115 	stw	r16,4(sp)
 400b3f4:	dfc00a15 	stw	ra,40(sp)
 400b3f8:	dd400615 	stw	r21,24(sp)
 400b3fc:	dd000515 	stw	r20,20(sp)
 400b400:	dcc00415 	stw	r19,16(sp)
 400b404:	dc800315 	stw	r18,12(sp)
 400b408:	3039883a 	mov	fp,r6
 400b40c:	2021883a 	mov	r16,r4
 400b410:	282d883a 	mov	r22,r5
 400b414:	382f883a 	mov	r23,r7
 400b418:	34402c26 	beq	r6,r17,400b4cc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
 400b41c:	85000317 	ldw	r20,12(r16)
 400b420:	048000c4 	movi	r18,3
 400b424:	04ffff44 	movi	r19,-3
 400b428:	a484983a 	sll	r2,r20,r18
 400b42c:	b80f883a 	mov	r7,r23
 400b430:	b00b883a 	mov	r5,r22
 400b434:	10800304 	addi	r2,r2,12
 400b438:	80a1883a 	add	r16,r16,r2
 400b43c:	a0001626 	beq	r20,zero,400b498 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
 400b440:	81800017 	ldw	r6,0(r16)
 400b444:	a53fffc4 	addi	r20,r20,-1
 400b448:	3080008c 	andi	r2,r6,2
 400b44c:	3540004c 	andi	r21,r6,1
 400b450:	10000d26 	beq	r2,zero,400b488 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
 400b454:	300dd23a 	srai	r6,r6,8
 400b458:	a8000426 	beq	r21,zero,400b46c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
 400b45c:	b4c00a26 	beq	r22,r19,400b488 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
 400b460:	e0800017 	ldw	r2,0(fp)
 400b464:	118d883a 	add	r6,r2,r6
 400b468:	31800017 	ldw	r6,0(r6)
 400b46c:	813fff17 	ldw	r4,-4(r16)
 400b470:	e18d883a 	add	r6,fp,r6
 400b474:	20800017 	ldw	r2,0(r4)
 400b478:	dc400015 	stw	r17,0(sp)
 400b47c:	10800817 	ldw	r2,32(r2)
 400b480:	103ee83a 	callr	r2
 400b484:	90801b16 	blt	r18,r2,400b4f4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
 400b488:	843ffe04 	addi	r16,r16,-8
 400b48c:	b80f883a 	mov	r7,r23
 400b490:	b00b883a 	mov	r5,r22
 400b494:	a03fea1e 	bne	r20,zero,400b440 <__alt_mem_onchip_memory2_0+0xfc00a1a0>
 400b498:	00800044 	movi	r2,1
 400b49c:	dfc00a17 	ldw	ra,40(sp)
 400b4a0:	df000917 	ldw	fp,36(sp)
 400b4a4:	ddc00817 	ldw	r23,32(sp)
 400b4a8:	dd800717 	ldw	r22,28(sp)
 400b4ac:	dd400617 	ldw	r21,24(sp)
 400b4b0:	dd000517 	ldw	r20,20(sp)
 400b4b4:	dcc00417 	ldw	r19,16(sp)
 400b4b8:	dc800317 	ldw	r18,12(sp)
 400b4bc:	dc400217 	ldw	r17,8(sp)
 400b4c0:	dc000117 	ldw	r16,4(sp)
 400b4c4:	dec00b04 	addi	sp,sp,44
 400b4c8:	f800283a 	ret
 400b4cc:	21000117 	ldw	r4,4(r4)
 400b4d0:	39400117 	ldw	r5,4(r7)
 400b4d4:	21400526 	beq	r4,r5,400b4ec <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
 400b4d8:	20c00007 	ldb	r3,0(r4)
 400b4dc:	00800a84 	movi	r2,42
 400b4e0:	18bfce26 	beq	r3,r2,400b41c <__alt_mem_onchip_memory2_0+0xfc00a17c>
 400b4e4:	400fb7c0 	call	400fb7c <strcmp>
 400b4e8:	103fcc1e 	bne	r2,zero,400b41c <__alt_mem_onchip_memory2_0+0xfc00a17c>
 400b4ec:	00800184 	movi	r2,6
 400b4f0:	003fea06 	br	400b49c <__alt_mem_onchip_memory2_0+0xfc00a1fc>
 400b4f4:	a83fe926 	beq	r21,zero,400b49c <__alt_mem_onchip_memory2_0+0xfc00a1fc>
 400b4f8:	10800054 	ori	r2,r2,1
 400b4fc:	003fe706 	br	400b49c <__alt_mem_onchip_memory2_0+0xfc00a1fc>

0400b500 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 400b500:	deffe804 	addi	sp,sp,-96
 400b504:	df001615 	stw	fp,88(sp)
 400b508:	df001b17 	ldw	fp,108(sp)
 400b50c:	ddc01515 	stw	r23,84(sp)
 400b510:	dd001215 	stw	r20,72(sp)
 400b514:	e0800417 	ldw	r2,16(fp)
 400b518:	dcc01115 	stw	r19,68(sp)
 400b51c:	dfc01715 	stw	ra,92(sp)
 400b520:	dd801415 	stw	r22,80(sp)
 400b524:	dd401315 	stw	r21,76(sp)
 400b528:	dc801015 	stw	r18,64(sp)
 400b52c:	dc400f15 	stw	r17,60(sp)
 400b530:	dc000e15 	stw	r16,56(sp)
 400b534:	d9000b15 	stw	r4,44(sp)
 400b538:	d9c00915 	stw	r7,36(sp)
 400b53c:	1080040c 	andi	r2,r2,16
 400b540:	282f883a 	mov	r23,r5
 400b544:	3027883a 	mov	r19,r6
 400b548:	dd001817 	ldw	r20,96(sp)
 400b54c:	10000226 	beq	r2,zero,400b558 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
 400b550:	20800217 	ldw	r2,8(r4)
 400b554:	e0800415 	stw	r2,16(fp)
 400b558:	d8c01a17 	ldw	r3,104(sp)
 400b55c:	a0c0cb26 	beq	r20,r3,400b88c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
 400b560:	d8c00b17 	ldw	r3,44(sp)
 400b564:	1c000117 	ldw	r16,4(r3)
 400b568:	d8c00917 	ldw	r3,36(sp)
 400b56c:	19400117 	ldw	r5,4(r3)
 400b570:	2c000626 	beq	r5,r16,400b58c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 400b574:	80c00007 	ldb	r3,0(r16)
 400b578:	00800a84 	movi	r2,42
 400b57c:	18801b26 	beq	r3,r2,400b5ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 400b580:	8009883a 	mov	r4,r16
 400b584:	400fb7c0 	call	400fb7c <strcmp>
 400b588:	1000181e 	bne	r2,zero,400b5ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 400b58c:	e5000015 	stw	r20,0(fp)
 400b590:	e4c00115 	stw	r19,4(fp)
 400b594:	b8010916 	blt	r23,zero,400b9bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
 400b598:	d8c01a17 	ldw	r3,104(sp)
 400b59c:	a5d9883a 	add	r12,r20,r23
 400b5a0:	1b014126 	beq	r3,r12,400baa8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
 400b5a4:	00800044 	movi	r2,1
 400b5a8:	e0800315 	stw	r2,12(fp)
 400b5ac:	0005883a 	mov	r2,zero
 400b5b0:	dfc01717 	ldw	ra,92(sp)
 400b5b4:	df001617 	ldw	fp,88(sp)
 400b5b8:	ddc01517 	ldw	r23,84(sp)
 400b5bc:	dd801417 	ldw	r22,80(sp)
 400b5c0:	dd401317 	ldw	r21,76(sp)
 400b5c4:	dd001217 	ldw	r20,72(sp)
 400b5c8:	dcc01117 	ldw	r19,68(sp)
 400b5cc:	dc801017 	ldw	r18,64(sp)
 400b5d0:	dc400f17 	ldw	r17,60(sp)
 400b5d4:	dc000e17 	ldw	r16,56(sp)
 400b5d8:	dec01804 	addi	sp,sp,96
 400b5dc:	f800283a 	ret
 400b5e0:	d8c00917 	ldw	r3,36(sp)
 400b5e4:	18800117 	ldw	r2,4(r3)
 400b5e8:	80bfe826 	beq	r16,r2,400b58c <__alt_mem_onchip_memory2_0+0xfc00a2ec>
 400b5ec:	b800ef16 	blt	r23,zero,400b9ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
 400b5f0:	d8c01a17 	ldw	r3,104(sp)
 400b5f4:	1dedc83a 	sub	r22,r3,r23
 400b5f8:	e005883a 	mov	r2,fp
 400b5fc:	00c00044 	movi	r3,1
 400b600:	b039883a 	mov	fp,r22
 400b604:	0021883a 	mov	r16,zero
 400b608:	a02d883a 	mov	r22,r20
 400b60c:	d8000a45 	stb	zero,41(sp)
 400b610:	d8c00a05 	stb	r3,40(sp)
 400b614:	048000c4 	movi	r18,3
 400b618:	1029883a 	mov	r20,r2
 400b61c:	d8c00b17 	ldw	r3,44(sp)
 400b620:	b805883a 	mov	r2,r23
 400b624:	1ac00317 	ldw	r11,12(r3)
 400b628:	581490fa 	slli	r10,r11,3
 400b62c:	52800304 	addi	r10,r10,12
 400b630:	1aab883a 	add	r21,r3,r10
 400b634:	b007883a 	mov	r3,r22
 400b638:	582d883a 	mov	r22,r11
 400b63c:	a82f883a 	mov	r23,r21
 400b640:	1823883a 	mov	r17,r3
 400b644:	102b883a 	mov	r21,r2
 400b648:	b0005526 	beq	r22,zero,400b7a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
 400b64c:	b8800017 	ldw	r2,0(r23)
 400b650:	a1400417 	ldw	r5,16(r20)
 400b654:	d8000415 	stw	zero,16(sp)
 400b658:	d8000515 	stw	zero,20(sp)
 400b65c:	d8000615 	stw	zero,24(sp)
 400b660:	d8000715 	stw	zero,28(sp)
 400b664:	d9400815 	stw	r5,32(sp)
 400b668:	1100004c 	andi	r4,r2,1
 400b66c:	1007d23a 	srai	r3,r2,8
 400b670:	20007526 	beq	r4,zero,400b848 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
 400b674:	89000017 	ldw	r4,0(r17)
 400b678:	99800054 	ori	r6,r19,1
 400b67c:	20c7883a 	add	r3,r4,r3
 400b680:	18c00017 	ldw	r3,0(r3)
 400b684:	88c7883a 	add	r3,r17,r3
 400b688:	e0000326 	beq	fp,zero,400b698 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
 400b68c:	d9c00a03 	ldbu	r7,40(sp)
 400b690:	e0c9803a 	cmpltu	r4,fp,r3
 400b694:	21c07226 	beq	r4,r7,400b860 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
 400b698:	1080008c 	andi	r2,r2,2
 400b69c:	1000041e 	bne	r2,zero,400b6b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
 400b6a0:	013fff84 	movi	r4,-2
 400b6a4:	a9007126 	beq	r21,r4,400b86c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
 400b6a8:	00bfff44 	movi	r2,-3
 400b6ac:	308c703a 	and	r6,r6,r2
 400b6b0:	b93fff17 	ldw	r4,-4(r23)
 400b6b4:	d9400404 	addi	r5,sp,16
 400b6b8:	d9c00917 	ldw	r7,36(sp)
 400b6bc:	20800017 	ldw	r2,0(r4)
 400b6c0:	d9400315 	stw	r5,12(sp)
 400b6c4:	d9401a17 	ldw	r5,104(sp)
 400b6c8:	d8c00015 	stw	r3,0(sp)
 400b6cc:	d9400215 	stw	r5,8(sp)
 400b6d0:	d9401917 	ldw	r5,100(sp)
 400b6d4:	d9400115 	stw	r5,4(sp)
 400b6d8:	10800717 	ldw	r2,28(r2)
 400b6dc:	a80b883a 	mov	r5,r21
 400b6e0:	103ee83a 	callr	r2
 400b6e4:	a1400217 	ldw	r5,8(r20)
 400b6e8:	d9000617 	ldw	r4,24(sp)
 400b6ec:	d8c00717 	ldw	r3,28(sp)
 400b6f0:	2908b03a 	or	r4,r5,r4
 400b6f4:	a1000215 	stw	r4,8(r20)
 400b6f8:	01400184 	movi	r5,6
 400b6fc:	1940a426 	beq	r3,r5,400b990 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 400b700:	01400084 	movi	r5,2
 400b704:	1940a226 	beq	r3,r5,400b990 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 400b708:	81403fcc 	andi	r5,r16,255
 400b70c:	a1800017 	ldw	r6,0(r20)
 400b710:	28004f1e 	bne	r5,zero,400b850 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
 400b714:	30007926 	beq	r6,zero,400b8fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
 400b718:	d9400417 	ldw	r5,16(sp)
 400b71c:	29806926 	beq	r5,r6,400b8c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
 400b720:	28006d26 	beq	r5,zero,400b8d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
 400b724:	a2800317 	ldw	r10,12(r20)
 400b728:	9100250e 	bge	r18,r4,400b7c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
 400b72c:	2100004c 	andi	r4,r4,1
 400b730:	20000326 	beq	r4,zero,400b740 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
 400b734:	a0800417 	ldw	r2,16(r20)
 400b738:	1080008c 	andi	r2,r2,2
 400b73c:	1000201e 	bne	r2,zero,400b7c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
 400b740:	50004d1e 	bne	r10,zero,400b878 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
 400b744:	18002626 	beq	r3,zero,400b7e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
 400b748:	02800044 	movi	r10,1
 400b74c:	181b883a 	mov	r13,r3
 400b750:	1a84f03a 	xor	r2,r3,r10
 400b754:	501f883a 	mov	r15,r10
 400b758:	90801f0e 	bge	r18,r2,400b7d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
 400b75c:	90c0880e 	bge	r18,r3,400b980 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
 400b760:	d9400417 	ldw	r5,16(sp)
 400b764:	1880008c 	andi	r2,r3,2
 400b768:	d9000517 	ldw	r4,20(sp)
 400b76c:	a1400015 	stw	r5,0(r20)
 400b770:	0021883a 	mov	r16,zero
 400b774:	a1000115 	stw	r4,4(r20)
 400b778:	a0c00315 	stw	r3,12(r20)
 400b77c:	10004f1e 	bne	r2,zero,400b8bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 400b780:	6b40004c 	andi	r13,r13,1
 400b784:	68004d26 	beq	r13,zero,400b8bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 400b788:	a1000217 	ldw	r4,8(r20)
 400b78c:	01400104 	movi	r5,4
 400b790:	21408826 	beq	r4,r5,400b9b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400b794:	b5bfffc4 	addi	r22,r22,-1
 400b798:	bdfffe04 	addi	r23,r23,-8
 400b79c:	b03fab1e 	bne	r22,zero,400b64c <__alt_mem_onchip_memory2_0+0xfc00a3ac>
 400b7a0:	d8800a43 	ldbu	r2,41(sp)
 400b7a4:	a82f883a 	mov	r23,r21
 400b7a8:	882d883a 	mov	r22,r17
 400b7ac:	10008126 	beq	r2,zero,400b9b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400b7b0:	dd400a03 	ldbu	r21,40(sp)
 400b7b4:	a8007f26 	beq	r21,zero,400b9b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400b7b8:	d8000a05 	stb	zero,40(sp)
 400b7bc:	003f9706 	br	400b61c <__alt_mem_onchip_memory2_0+0xfc00a37c>
 400b7c0:	501f883a 	mov	r15,r10
 400b7c4:	181b883a 	mov	r13,r3
 400b7c8:	02800b0e 	bge	zero,r10,400b7f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
 400b7cc:	00c0570e 	bge	zero,r3,400b92c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
 400b7d0:	1a84f03a 	xor	r2,r3,r10
 400b7d4:	90bfe116 	blt	r18,r2,400b75c <__alt_mem_onchip_memory2_0+0xfc00a4bc>
 400b7d8:	1bc6703a 	and	r3,r3,r15
 400b7dc:	90c09916 	blt	r18,r3,400ba44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
 400b7e0:	01000044 	movi	r4,1
 400b7e4:	a1000315 	stw	r4,12(r20)
 400b7e8:	a0000015 	stw	zero,0(r20)
 400b7ec:	a1000217 	ldw	r4,8(r20)
 400b7f0:	04000044 	movi	r16,1
 400b7f4:	003fe506 	br	400b78c <__alt_mem_onchip_memory2_0+0xfc00a4ec>
 400b7f8:	90c00a0e 	bge	r18,r3,400b824 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 400b7fc:	1880004c 	andi	r2,r3,1
 400b800:	10000426 	beq	r2,zero,400b814 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
 400b804:	d9000b17 	ldw	r4,44(sp)
 400b808:	20800217 	ldw	r2,8(r4)
 400b80c:	1080008c 	andi	r2,r2,2
 400b810:	1000041e 	bne	r2,zero,400b824 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 400b814:	1880005c 	xori	r2,r3,1
 400b818:	90bfd216 	blt	r18,r2,400b764 <__alt_mem_onchip_memory2_0+0xfc00a4c4>
 400b81c:	03c00044 	movi	r15,1
 400b820:	003fed06 	br	400b7d8 <__alt_mem_onchip_memory2_0+0xfc00a538>
 400b824:	a8006e16 	blt	r21,zero,400b9e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
 400b828:	d8801a17 	ldw	r2,104(sp)
 400b82c:	354d883a 	add	r6,r6,r21
 400b830:	11805026 	beq	r2,r6,400b974 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
 400b834:	00c0a50e 	bge	zero,r3,400bacc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
 400b838:	03c00044 	movi	r15,1
 400b83c:	1bc4f03a 	xor	r2,r3,r15
 400b840:	7815883a 	mov	r10,r15
 400b844:	003fc406 	br	400b758 <__alt_mem_onchip_memory2_0+0xfc00a4b8>
 400b848:	980d883a 	mov	r6,r19
 400b84c:	003f8d06 	br	400b684 <__alt_mem_onchip_memory2_0+0xfc00a3e4>
 400b850:	303fb11e 	bne	r6,zero,400b718 <__alt_mem_onchip_memory2_0+0xfc00a478>
 400b854:	d9400417 	ldw	r5,16(sp)
 400b858:	283fb21e 	bne	r5,zero,400b724 <__alt_mem_onchip_memory2_0+0xfc00a484>
 400b85c:	003fcb06 	br	400b78c <__alt_mem_onchip_memory2_0+0xfc00a4ec>
 400b860:	00c00044 	movi	r3,1
 400b864:	d8c00a45 	stb	r3,41(sp)
 400b868:	003fca06 	br	400b794 <__alt_mem_onchip_memory2_0+0xfc00a4f4>
 400b86c:	294000cc 	andi	r5,r5,3
 400b870:	283fc826 	beq	r5,zero,400b794 <__alt_mem_onchip_memory2_0+0xfc00a4f4>
 400b874:	003f8c06 	br	400b6a8 <__alt_mem_onchip_memory2_0+0xfc00a408>
 400b878:	18001a26 	beq	r3,zero,400b8e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
 400b87c:	181b883a 	mov	r13,r3
 400b880:	501f883a 	mov	r15,r10
 400b884:	50c4f03a 	xor	r2,r10,r3
 400b888:	003fb306 	br	400b758 <__alt_mem_onchip_memory2_0+0xfc00a4b8>
 400b88c:	d8c00b17 	ldw	r3,44(sp)
 400b890:	1c000117 	ldw	r16,4(r3)
 400b894:	d8c01917 	ldw	r3,100(sp)
 400b898:	19400117 	ldw	r5,4(r3)
 400b89c:	81400626 	beq	r16,r5,400b8b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
 400b8a0:	80c00007 	ldb	r3,0(r16)
 400b8a4:	00800a84 	movi	r2,42
 400b8a8:	18bf4d26 	beq	r3,r2,400b5e0 <__alt_mem_onchip_memory2_0+0xfc00a340>
 400b8ac:	8009883a 	mov	r4,r16
 400b8b0:	400fb7c0 	call	400fb7c <strcmp>
 400b8b4:	10005c1e 	bne	r2,zero,400ba28 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
 400b8b8:	e4c00215 	stw	r19,8(fp)
 400b8bc:	0005883a 	mov	r2,zero
 400b8c0:	003f3b06 	br	400b5b0 <__alt_mem_onchip_memory2_0+0xfc00a310>
 400b8c4:	a0c00117 	ldw	r3,4(r20)
 400b8c8:	d8800517 	ldw	r2,20(sp)
 400b8cc:	1884b03a 	or	r2,r3,r2
 400b8d0:	a0800115 	stw	r2,4(r20)
 400b8d4:	003fad06 	br	400b78c <__alt_mem_onchip_memory2_0+0xfc00a4ec>
 400b8d8:	10803fcc 	andi	r2,r2,255
 400b8dc:	103f911e 	bne	r2,zero,400b724 <__alt_mem_onchip_memory2_0+0xfc00a484>
 400b8e0:	003faa06 	br	400b78c <__alt_mem_onchip_memory2_0+0xfc00a4ec>
 400b8e4:	501b883a 	mov	r13,r10
 400b8e8:	5080005c 	xori	r2,r10,1
 400b8ec:	5007883a 	mov	r3,r10
 400b8f0:	90bfbb0e 	bge	r18,r2,400b7e0 <__alt_mem_onchip_memory2_0+0xfc00a540>
 400b8f4:	6880008c 	andi	r2,r13,2
 400b8f8:	003f9f06 	br	400b778 <__alt_mem_onchip_memory2_0+0xfc00a4d8>
 400b8fc:	d8c00417 	ldw	r3,16(sp)
 400b900:	d9400517 	ldw	r5,20(sp)
 400b904:	a0c00015 	stw	r3,0(r20)
 400b908:	a1400115 	stw	r5,4(r20)
 400b90c:	18000526 	beq	r3,zero,400b924 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
 400b910:	20001626 	beq	r4,zero,400b96c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
 400b914:	d9400b17 	ldw	r5,44(sp)
 400b918:	28c00217 	ldw	r3,8(r5)
 400b91c:	18c0004c 	andi	r3,r3,1
 400b920:	183f2326 	beq	r3,zero,400b5b0 <__alt_mem_onchip_memory2_0+0xfc00a310>
 400b924:	1021883a 	mov	r16,r2
 400b928:	003f9806 	br	400b78c <__alt_mem_onchip_memory2_0+0xfc00a4ec>
 400b92c:	9280060e 	bge	r18,r10,400b948 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
 400b930:	5080004c 	andi	r2,r10,1
 400b934:	10002426 	beq	r2,zero,400b9c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
 400b938:	d8c00b17 	ldw	r3,44(sp)
 400b93c:	18800217 	ldw	r2,8(r3)
 400b940:	1080008c 	andi	r2,r2,2
 400b944:	10003c26 	beq	r2,zero,400ba38 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
 400b948:	d9400417 	ldw	r5,16(sp)
 400b94c:	a8004216 	blt	r21,zero,400ba58 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
 400b950:	d8c01a17 	ldw	r3,104(sp)
 400b954:	2d45883a 	add	r2,r5,r21
 400b958:	18805726 	beq	r3,r2,400bab8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
 400b95c:	7880005c 	xori	r2,r15,1
 400b960:	781b883a 	mov	r13,r15
 400b964:	5007883a 	mov	r3,r10
 400b968:	003fe106 	br	400b8f0 <__alt_mem_onchip_memory2_0+0xfc00a650>
 400b96c:	1021883a 	mov	r16,r2
 400b970:	003f8806 	br	400b794 <__alt_mem_onchip_memory2_0+0xfc00a4f4>
 400b974:	03c00184 	movi	r15,6
 400b978:	00ffb016 	blt	zero,r3,400b83c <__alt_mem_onchip_memory2_0+0xfc00a59c>
 400b97c:	7815883a 	mov	r10,r15
 400b980:	7880008c 	andi	r2,r15,2
 400b984:	781b883a 	mov	r13,r15
 400b988:	5007883a 	mov	r3,r10
 400b98c:	003f7a06 	br	400b778 <__alt_mem_onchip_memory2_0+0xfc00a4d8>
 400b990:	a039883a 	mov	fp,r20
 400b994:	e0c00315 	stw	r3,12(fp)
 400b998:	d8c00417 	ldw	r3,16(sp)
 400b99c:	a0c00015 	stw	r3,0(r20)
 400b9a0:	d8c00517 	ldw	r3,20(sp)
 400b9a4:	a0c00115 	stw	r3,4(r20)
 400b9a8:	003f0106 	br	400b5b0 <__alt_mem_onchip_memory2_0+0xfc00a310>
 400b9ac:	002d883a 	mov	r22,zero
 400b9b0:	003f1106 	br	400b5f8 <__alt_mem_onchip_memory2_0+0xfc00a358>
 400b9b4:	8005883a 	mov	r2,r16
 400b9b8:	003efd06 	br	400b5b0 <__alt_mem_onchip_memory2_0+0xfc00a310>
 400b9bc:	00bfff84 	movi	r2,-2
 400b9c0:	b8bfbe1e 	bne	r23,r2,400b8bc <__alt_mem_onchip_memory2_0+0xfc00a61c>
 400b9c4:	003ef706 	br	400b5a4 <__alt_mem_onchip_memory2_0+0xfc00a304>
 400b9c8:	5080005c 	xori	r2,r10,1
 400b9cc:	90bf840e 	bge	r18,r2,400b7e0 <__alt_mem_onchip_memory2_0+0xfc00a540>
 400b9d0:	501b883a 	mov	r13,r10
 400b9d4:	5080008c 	andi	r2,r10,2
 400b9d8:	5007883a 	mov	r3,r10
 400b9dc:	003f6606 	br	400b778 <__alt_mem_onchip_memory2_0+0xfc00a4d8>
 400b9e0:	013fff84 	movi	r4,-2
 400b9e4:	a9003226 	beq	r21,r4,400bab0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
 400b9e8:	d9400917 	ldw	r5,36(sp)
 400b9ec:	d9001a17 	ldw	r4,104(sp)
 400b9f0:	d9c01917 	ldw	r7,100(sp)
 400b9f4:	28800017 	ldw	r2,0(r5)
 400b9f8:	d9000015 	stw	r4,0(sp)
 400b9fc:	d9000917 	ldw	r4,36(sp)
 400ba00:	10800817 	ldw	r2,32(r2)
 400ba04:	a80b883a 	mov	r5,r21
 400ba08:	d8c00d15 	stw	r3,52(sp)
 400ba0c:	db400c15 	stw	r13,48(sp)
 400ba10:	103ee83a 	callr	r2
 400ba14:	1015883a 	mov	r10,r2
 400ba18:	101f883a 	mov	r15,r2
 400ba1c:	db400c17 	ldw	r13,48(sp)
 400ba20:	d8c00d17 	ldw	r3,52(sp)
 400ba24:	003f6906 	br	400b7cc <__alt_mem_onchip_memory2_0+0xfc00a52c>
 400ba28:	d8c00917 	ldw	r3,36(sp)
 400ba2c:	19400117 	ldw	r5,4(r3)
 400ba30:	817ed31e 	bne	r16,r5,400b580 <__alt_mem_onchip_memory2_0+0xfc00a2e0>
 400ba34:	003ed506 	br	400b58c <__alt_mem_onchip_memory2_0+0xfc00a2ec>
 400ba38:	5080005c 	xori	r2,r10,1
 400ba3c:	90bfe416 	blt	r18,r2,400b9d0 <__alt_mem_onchip_memory2_0+0xfc00a730>
 400ba40:	003f6706 	br	400b7e0 <__alt_mem_onchip_memory2_0+0xfc00a540>
 400ba44:	00800084 	movi	r2,2
 400ba48:	a0800315 	stw	r2,12(r20)
 400ba4c:	a0000015 	stw	zero,0(r20)
 400ba50:	00800044 	movi	r2,1
 400ba54:	003ed606 	br	400b5b0 <__alt_mem_onchip_memory2_0+0xfc00a310>
 400ba58:	013fff84 	movi	r4,-2
 400ba5c:	a9002526 	beq	r21,r4,400baf4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
 400ba60:	d8c00917 	ldw	r3,36(sp)
 400ba64:	d9c01917 	ldw	r7,100(sp)
 400ba68:	d9000917 	ldw	r4,36(sp)
 400ba6c:	18800017 	ldw	r2,0(r3)
 400ba70:	d8c01a17 	ldw	r3,104(sp)
 400ba74:	280d883a 	mov	r6,r5
 400ba78:	a80b883a 	mov	r5,r21
 400ba7c:	d8c00015 	stw	r3,0(sp)
 400ba80:	10800817 	ldw	r2,32(r2)
 400ba84:	da800c15 	stw	r10,48(sp)
 400ba88:	dbc00d15 	stw	r15,52(sp)
 400ba8c:	103ee83a 	callr	r2
 400ba90:	da800c17 	ldw	r10,48(sp)
 400ba94:	1007883a 	mov	r3,r2
 400ba98:	101b883a 	mov	r13,r2
 400ba9c:	dbc00d17 	ldw	r15,52(sp)
 400baa0:	1284f03a 	xor	r2,r2,r10
 400baa4:	003f2c06 	br	400b758 <__alt_mem_onchip_memory2_0+0xfc00a4b8>
 400baa8:	00800184 	movi	r2,6
 400baac:	003ebe06 	br	400b5a8 <__alt_mem_onchip_memory2_0+0xfc00a308>
 400bab0:	00ff4b0e 	bge	zero,r3,400b7e0 <__alt_mem_onchip_memory2_0+0xfc00a540>
 400bab4:	003f6006 	br	400b838 <__alt_mem_onchip_memory2_0+0xfc00a598>
 400bab8:	5080019c 	xori	r2,r10,6
 400babc:	90800916 	blt	r18,r2,400bae4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
 400bac0:	50c0018c 	andi	r3,r10,6
 400bac4:	90ff460e 	bge	r18,r3,400b7e0 <__alt_mem_onchip_memory2_0+0xfc00a540>
 400bac8:	003fde06 	br	400ba44 <__alt_mem_onchip_memory2_0+0xfc00a7a4>
 400bacc:	d8c01a17 	ldw	r3,104(sp)
 400bad0:	2d45883a 	add	r2,r5,r21
 400bad4:	18800326 	beq	r3,r2,400bae4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
 400bad8:	02800044 	movi	r10,1
 400badc:	501f883a 	mov	r15,r10
 400bae0:	003f9e06 	br	400b95c <__alt_mem_onchip_memory2_0+0xfc00a6bc>
 400bae4:	03400184 	movi	r13,6
 400bae8:	00800084 	movi	r2,2
 400baec:	6807883a 	mov	r3,r13
 400baf0:	003f1d06 	br	400b768 <__alt_mem_onchip_memory2_0+0xfc00a4c8>
 400baf4:	501b883a 	mov	r13,r10
 400baf8:	5080005c 	xori	r2,r10,1
 400bafc:	5007883a 	mov	r3,r10
 400bb00:	003f7b06 	br	400b8f0 <__alt_mem_onchip_memory2_0+0xfc00a650>

0400bb04 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 400bb04:	deffef04 	addi	sp,sp,-68
 400bb08:	ddc00e15 	stw	r23,56(sp)
 400bb0c:	dd000b15 	stw	r20,44(sp)
 400bb10:	dc400815 	stw	r17,32(sp)
 400bb14:	3029883a 	mov	r20,r6
 400bb18:	dfc01015 	stw	ra,64(sp)
 400bb1c:	df000f15 	stw	fp,60(sp)
 400bb20:	dd800d15 	stw	r22,52(sp)
 400bb24:	dd400c15 	stw	r21,48(sp)
 400bb28:	dcc00a15 	stw	r19,40(sp)
 400bb2c:	dc800915 	stw	r18,36(sp)
 400bb30:	dc000715 	stw	r16,28(sp)
 400bb34:	d9000515 	stw	r4,20(sp)
 400bb38:	2823883a 	mov	r17,r5
 400bb3c:	382f883a 	mov	r23,r7
 400bb40:	400beec0 	call	400beec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 400bb44:	100d883a 	mov	r6,r2
 400bb48:	10803fcc 	andi	r2,r2,255
 400bb4c:	1000441e 	bne	r2,zero,400bc60 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
 400bb50:	bc000217 	ldw	r16,8(r23)
 400bb54:	8080040c 	andi	r2,r16,16
 400bb58:	10000226 	beq	r2,zero,400bb64 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
 400bb5c:	d8c00517 	ldw	r3,20(sp)
 400bb60:	1c000217 	ldw	r16,8(r3)
 400bb64:	d8c00517 	ldw	r3,20(sp)
 400bb68:	d8800517 	ldw	r2,20(sp)
 400bb6c:	1f000317 	ldw	fp,12(r3)
 400bb70:	e01090fa 	slli	r8,fp,3
 400bb74:	40c00304 	addi	r3,r8,12
 400bb78:	10ed883a 	add	r22,r2,r3
 400bb7c:	80c0004c 	andi	r3,r16,1
 400bb80:	42000204 	addi	r8,r8,8
 400bb84:	d8c00415 	stw	r3,16(sp)
 400bb88:	122b883a 	add	r21,r2,r8
 400bb8c:	e0003226 	beq	fp,zero,400bc58 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
 400bb90:	b1800017 	ldw	r6,0(r22)
 400bb94:	d8000015 	stw	zero,0(sp)
 400bb98:	d8000115 	stw	zero,4(sp)
 400bb9c:	dc000215 	stw	r16,8(sp)
 400bba0:	d8000315 	stw	zero,12(sp)
 400bba4:	34c0008c 	andi	r19,r6,2
 400bba8:	3480004c 	andi	r18,r6,1
 400bbac:	9800021e 	bne	r19,zero,400bbb8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
 400bbb0:	d8c00417 	ldw	r3,16(sp)
 400bbb4:	18002426 	beq	r3,zero,400bc48 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
 400bbb8:	a0003626 	beq	r20,zero,400bc94 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
 400bbbc:	300dd23a 	srai	r6,r6,8
 400bbc0:	90000326 	beq	r18,zero,400bbd0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 400bbc4:	a0800017 	ldw	r2,0(r20)
 400bbc8:	118d883a 	add	r6,r2,r6
 400bbcc:	31800017 	ldw	r6,0(r6)
 400bbd0:	a18d883a 	add	r6,r20,r6
 400bbd4:	a9000017 	ldw	r4,0(r21)
 400bbd8:	d80f883a 	mov	r7,sp
 400bbdc:	880b883a 	mov	r5,r17
 400bbe0:	20800017 	ldw	r2,0(r4)
 400bbe4:	10800617 	ldw	r2,24(r2)
 400bbe8:	103ee83a 	callr	r2
 400bbec:	100d883a 	mov	r6,r2
 400bbf0:	10803fcc 	andi	r2,r2,255
 400bbf4:	10001426 	beq	r2,zero,400bc48 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
 400bbf8:	d8800317 	ldw	r2,12(sp)
 400bbfc:	00c00204 	movi	r3,8
 400bc00:	10c02626 	beq	r2,r3,400bc9c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
 400bc04:	d8800117 	ldw	r2,4(sp)
 400bc08:	00c000c4 	movi	r3,3
 400bc0c:	1880040e 	bge	r3,r2,400bc20 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 400bc10:	9800031e 	bne	r19,zero,400bc20 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 400bc14:	00ffff44 	movi	r3,-3
 400bc18:	10c4703a 	and	r2,r2,r3
 400bc1c:	d8800115 	stw	r2,4(sp)
 400bc20:	b9400317 	ldw	r5,12(r23)
 400bc24:	28002126 	beq	r5,zero,400bcac <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
 400bc28:	b8800017 	ldw	r2,0(r23)
 400bc2c:	d9000017 	ldw	r4,0(sp)
 400bc30:	11004d1e 	bne	r2,r4,400bd68 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
 400bc34:	10003126 	beq	r2,zero,400bcfc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
 400bc38:	b9000117 	ldw	r4,4(r23)
 400bc3c:	d8800117 	ldw	r2,4(sp)
 400bc40:	2084b03a 	or	r2,r4,r2
 400bc44:	b8800115 	stw	r2,4(r23)
 400bc48:	e73fffc4 	addi	fp,fp,-1
 400bc4c:	b5bffe04 	addi	r22,r22,-8
 400bc50:	ad7ffe04 	addi	r21,r21,-8
 400bc54:	e03fce1e 	bne	fp,zero,400bb90 <__alt_mem_onchip_memory2_0+0xfc00a8f0>
 400bc58:	b9800117 	ldw	r6,4(r23)
 400bc5c:	300cc03a 	cmpne	r6,r6,zero
 400bc60:	3005883a 	mov	r2,r6
 400bc64:	dfc01017 	ldw	ra,64(sp)
 400bc68:	df000f17 	ldw	fp,60(sp)
 400bc6c:	ddc00e17 	ldw	r23,56(sp)
 400bc70:	dd800d17 	ldw	r22,52(sp)
 400bc74:	dd400c17 	ldw	r21,48(sp)
 400bc78:	dd000b17 	ldw	r20,44(sp)
 400bc7c:	dcc00a17 	ldw	r19,40(sp)
 400bc80:	dc800917 	ldw	r18,36(sp)
 400bc84:	dc400817 	ldw	r17,32(sp)
 400bc88:	dc000717 	ldw	r16,28(sp)
 400bc8c:	dec01104 	addi	sp,sp,68
 400bc90:	f800283a 	ret
 400bc94:	000d883a 	mov	r6,zero
 400bc98:	003fce06 	br	400bbd4 <__alt_mem_onchip_memory2_0+0xfc00a934>
 400bc9c:	903fd926 	beq	r18,zero,400bc04 <__alt_mem_onchip_memory2_0+0xfc00a964>
 400bca0:	a8800017 	ldw	r2,0(r21)
 400bca4:	d8800315 	stw	r2,12(sp)
 400bca8:	003fd606 	br	400bc04 <__alt_mem_onchip_memory2_0+0xfc00a964>
 400bcac:	d9000017 	ldw	r4,0(sp)
 400bcb0:	d8800117 	ldw	r2,4(sp)
 400bcb4:	00c000c4 	movi	r3,3
 400bcb8:	b9000015 	stw	r4,0(r23)
 400bcbc:	d9000217 	ldw	r4,8(sp)
 400bcc0:	b8800115 	stw	r2,4(r23)
 400bcc4:	b9000215 	stw	r4,8(r23)
 400bcc8:	d9000317 	ldw	r4,12(sp)
 400bccc:	b9000315 	stw	r4,12(r23)
 400bcd0:	18bfe30e 	bge	r3,r2,400bc60 <__alt_mem_onchip_memory2_0+0xfc00a9c0>
 400bcd4:	1100008c 	andi	r4,r2,2
 400bcd8:	20001926 	beq	r4,zero,400bd40 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
 400bcdc:	d8c00517 	ldw	r3,20(sp)
 400bce0:	18800217 	ldw	r2,8(r3)
 400bce4:	1080004c 	andi	r2,r2,1
 400bce8:	103fdd26 	beq	r2,zero,400bc60 <__alt_mem_onchip_memory2_0+0xfc00a9c0>
 400bcec:	e73fffc4 	addi	fp,fp,-1
 400bcf0:	b5bffe04 	addi	r22,r22,-8
 400bcf4:	ad7ffe04 	addi	r21,r21,-8
 400bcf8:	003fd606 	br	400bc54 <__alt_mem_onchip_memory2_0+0xfc00a9b4>
 400bcfc:	d8800317 	ldw	r2,12(sp)
 400bd00:	00c00204 	movi	r3,8
 400bd04:	10c00b26 	beq	r2,r3,400bd34 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 400bd08:	28c00a26 	beq	r5,r3,400bd34 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 400bd0c:	11000117 	ldw	r4,4(r2)
 400bd10:	29400117 	ldw	r5,4(r5)
 400bd14:	217fc826 	beq	r4,r5,400bc38 <__alt_mem_onchip_memory2_0+0xfc00a998>
 400bd18:	20800007 	ldb	r2,0(r4)
 400bd1c:	00c00a84 	movi	r3,42
 400bd20:	10c00426 	beq	r2,r3,400bd34 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 400bd24:	d9800615 	stw	r6,24(sp)
 400bd28:	400fb7c0 	call	400fb7c <strcmp>
 400bd2c:	d9800617 	ldw	r6,24(sp)
 400bd30:	103fc126 	beq	r2,zero,400bc38 <__alt_mem_onchip_memory2_0+0xfc00a998>
 400bd34:	00800084 	movi	r2,2
 400bd38:	b8800115 	stw	r2,4(r23)
 400bd3c:	003fc806 	br	400bc60 <__alt_mem_onchip_memory2_0+0xfc00a9c0>
 400bd40:	1080004c 	andi	r2,r2,1
 400bd44:	103fc626 	beq	r2,zero,400bc60 <__alt_mem_onchip_memory2_0+0xfc00a9c0>
 400bd48:	d8c00517 	ldw	r3,20(sp)
 400bd4c:	18800217 	ldw	r2,8(r3)
 400bd50:	1080008c 	andi	r2,r2,2
 400bd54:	103fc226 	beq	r2,zero,400bc60 <__alt_mem_onchip_memory2_0+0xfc00a9c0>
 400bd58:	e73fffc4 	addi	fp,fp,-1
 400bd5c:	b5bffe04 	addi	r22,r22,-8
 400bd60:	ad7ffe04 	addi	r21,r21,-8
 400bd64:	003fbb06 	br	400bc54 <__alt_mem_onchip_memory2_0+0xfc00a9b4>
 400bd68:	00800084 	movi	r2,2
 400bd6c:	b8000015 	stw	zero,0(r23)
 400bd70:	b8800115 	stw	r2,4(r23)
 400bd74:	003fba06 	br	400bc60 <__alt_mem_onchip_memory2_0+0xfc00a9c0>

0400bd78 <_ZNSt9type_infoD1Ev>:
 400bd78:	f800283a 	ret

0400bd7c <_ZNKSt9type_info14__is_pointer_pEv>:
 400bd7c:	0005883a 	mov	r2,zero
 400bd80:	f800283a 	ret

0400bd84 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 400bd84:	0005883a 	mov	r2,zero
 400bd88:	f800283a 	ret

0400bd8c <_ZNSt9type_infoD0Ev>:
 400bd8c:	400bdd41 	jmpi	400bdd4 <_ZdlPv>

0400bd90 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 400bd90:	21000117 	ldw	r4,4(r4)
 400bd94:	29400117 	ldw	r5,4(r5)
 400bd98:	21400c26 	beq	r4,r5,400bdcc <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
 400bd9c:	20c00007 	ldb	r3,0(r4)
 400bda0:	00800a84 	movi	r2,42
 400bda4:	18800726 	beq	r3,r2,400bdc4 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
 400bda8:	deffff04 	addi	sp,sp,-4
 400bdac:	dfc00015 	stw	ra,0(sp)
 400bdb0:	400fb7c0 	call	400fb7c <strcmp>
 400bdb4:	1005003a 	cmpeq	r2,r2,zero
 400bdb8:	dfc00017 	ldw	ra,0(sp)
 400bdbc:	dec00104 	addi	sp,sp,4
 400bdc0:	f800283a 	ret
 400bdc4:	0005883a 	mov	r2,zero
 400bdc8:	f800283a 	ret
 400bdcc:	00800044 	movi	r2,1
 400bdd0:	f800283a 	ret

0400bdd4 <_ZdlPv>:
 400bdd4:	400ec341 	jmpi	400ec34 <free>

0400bdd8 <__cxa_pure_virtual>:
 400bdd8:	014100b4 	movhi	r5,1026
 400bddc:	deffff04 	addi	sp,sp,-4
 400bde0:	295df204 	addi	r5,r5,30664
 400bde4:	018006c4 	movi	r6,27
 400bde8:	01000084 	movi	r4,2
 400bdec:	dfc00015 	stw	ra,0(sp)
 400bdf0:	401c9140 	call	401c914 <write>
 400bdf4:	400c1a00 	call	400c1a0 <_ZSt9terminatev>

0400bdf8 <__cxa_deleted_virtual>:
 400bdf8:	014100b4 	movhi	r5,1026
 400bdfc:	deffff04 	addi	sp,sp,-4
 400be00:	295df904 	addi	r5,r5,30692
 400be04:	01800784 	movi	r6,30
 400be08:	01000084 	movi	r4,2
 400be0c:	dfc00015 	stw	ra,0(sp)
 400be10:	401c9140 	call	401c914 <write>
 400be14:	400c1a00 	call	400c1a0 <_ZSt9terminatev>

0400be18 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 400be18:	20800017 	ldw	r2,0(r4)
 400be1c:	defffa04 	addi	sp,sp,-24
 400be20:	dc000415 	stw	r16,16(sp)
 400be24:	10800617 	ldw	r2,24(r2)
 400be28:	3021883a 	mov	r16,r6
 400be2c:	31800017 	ldw	r6,0(r6)
 400be30:	00c00404 	movi	r3,16
 400be34:	d8c00215 	stw	r3,8(sp)
 400be38:	dfc00515 	stw	ra,20(sp)
 400be3c:	d8000015 	stw	zero,0(sp)
 400be40:	d8000115 	stw	zero,4(sp)
 400be44:	d8000315 	stw	zero,12(sp)
 400be48:	d80f883a 	mov	r7,sp
 400be4c:	103ee83a 	callr	r2
 400be50:	d8800117 	ldw	r2,4(sp)
 400be54:	00c00184 	movi	r3,6
 400be58:	1080018c 	andi	r2,r2,6
 400be5c:	10c00526 	beq	r2,r3,400be74 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
 400be60:	0005883a 	mov	r2,zero
 400be64:	dfc00517 	ldw	ra,20(sp)
 400be68:	dc000417 	ldw	r16,16(sp)
 400be6c:	dec00604 	addi	sp,sp,24
 400be70:	f800283a 	ret
 400be74:	d8c00017 	ldw	r3,0(sp)
 400be78:	00800044 	movi	r2,1
 400be7c:	80c00015 	stw	r3,0(r16)
 400be80:	dfc00517 	ldw	ra,20(sp)
 400be84:	dc000417 	ldw	r16,16(sp)
 400be88:	dec00604 	addi	sp,sp,24
 400be8c:	f800283a 	ret

0400be90 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 400be90:	d8800017 	ldw	r2,0(sp)
 400be94:	11800226 	beq	r2,r6,400bea0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
 400be98:	00800044 	movi	r2,1
 400be9c:	f800283a 	ret
 400bea0:	00800184 	movi	r2,6
 400bea4:	f800283a 	ret

0400bea8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 400bea8:	008100b4 	movhi	r2,1026
 400beac:	109e0f04 	addi	r2,r2,30780
 400beb0:	20800015 	stw	r2,0(r4)
 400beb4:	400bd781 	jmpi	400bd78 <_ZNSt9type_infoD1Ev>

0400beb8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 400beb8:	defffe04 	addi	sp,sp,-8
 400bebc:	008100b4 	movhi	r2,1026
 400bec0:	dc000015 	stw	r16,0(sp)
 400bec4:	dfc00115 	stw	ra,4(sp)
 400bec8:	109e0f04 	addi	r2,r2,30780
 400becc:	20800015 	stw	r2,0(r4)
 400bed0:	2021883a 	mov	r16,r4
 400bed4:	400bd780 	call	400bd78 <_ZNSt9type_infoD1Ev>
 400bed8:	8009883a 	mov	r4,r16
 400bedc:	dfc00117 	ldw	ra,4(sp)
 400bee0:	dc000017 	ldw	r16,0(sp)
 400bee4:	dec00204 	addi	sp,sp,8
 400bee8:	400bdd41 	jmpi	400bdd4 <_ZdlPv>

0400beec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 400beec:	21000117 	ldw	r4,4(r4)
 400bef0:	29400117 	ldw	r5,4(r5)
 400bef4:	defffd04 	addi	sp,sp,-12
 400bef8:	dc400115 	stw	r17,4(sp)
 400befc:	dc000015 	stw	r16,0(sp)
 400bf00:	dfc00215 	stw	ra,8(sp)
 400bf04:	3023883a 	mov	r17,r6
 400bf08:	3821883a 	mov	r16,r7
 400bf0c:	21400526 	beq	r4,r5,400bf24 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
 400bf10:	20c00007 	ldb	r3,0(r4)
 400bf14:	00800a84 	movi	r2,42
 400bf18:	18800d26 	beq	r3,r2,400bf50 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400bf1c:	400fb7c0 	call	400fb7c <strcmp>
 400bf20:	10000b1e 	bne	r2,zero,400bf50 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400bf24:	00800204 	movi	r2,8
 400bf28:	80800315 	stw	r2,12(r16)
 400bf2c:	00800184 	movi	r2,6
 400bf30:	80800115 	stw	r2,4(r16)
 400bf34:	84400015 	stw	r17,0(r16)
 400bf38:	00800044 	movi	r2,1
 400bf3c:	dfc00217 	ldw	ra,8(sp)
 400bf40:	dc400117 	ldw	r17,4(sp)
 400bf44:	dc000017 	ldw	r16,0(sp)
 400bf48:	dec00304 	addi	sp,sp,12
 400bf4c:	f800283a 	ret
 400bf50:	0005883a 	mov	r2,zero
 400bf54:	003ff906 	br	400bf3c <__alt_mem_onchip_memory2_0+0xfc00ac9c>

0400bf58 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 400bf58:	defffa04 	addi	sp,sp,-24
 400bf5c:	dc800415 	stw	r18,16(sp)
 400bf60:	d8800817 	ldw	r2,32(sp)
 400bf64:	dc800617 	ldw	r18,24(sp)
 400bf68:	dc400315 	stw	r17,12(sp)
 400bf6c:	dc000215 	stw	r16,8(sp)
 400bf70:	dfc00515 	stw	ra,20(sp)
 400bf74:	dc400917 	ldw	r17,36(sp)
 400bf78:	24000117 	ldw	r16,4(r4)
 400bf7c:	90801526 	beq	r18,r2,400bfd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
 400bf80:	39400117 	ldw	r5,4(r7)
 400bf84:	2c000826 	beq	r5,r16,400bfa8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
 400bf88:	80c00007 	ldb	r3,0(r16)
 400bf8c:	00800a84 	movi	r2,42
 400bf90:	18800926 	beq	r3,r2,400bfb8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400bf94:	8009883a 	mov	r4,r16
 400bf98:	d9800115 	stw	r6,4(sp)
 400bf9c:	400fb7c0 	call	400fb7c <strcmp>
 400bfa0:	d9800117 	ldw	r6,4(sp)
 400bfa4:	1000041e 	bne	r2,zero,400bfb8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400bfa8:	00800044 	movi	r2,1
 400bfac:	8c800015 	stw	r18,0(r17)
 400bfb0:	89800115 	stw	r6,4(r17)
 400bfb4:	88800315 	stw	r2,12(r17)
 400bfb8:	0005883a 	mov	r2,zero
 400bfbc:	dfc00517 	ldw	ra,20(sp)
 400bfc0:	dc800417 	ldw	r18,16(sp)
 400bfc4:	dc400317 	ldw	r17,12(sp)
 400bfc8:	dc000217 	ldw	r16,8(sp)
 400bfcc:	dec00604 	addi	sp,sp,24
 400bfd0:	f800283a 	ret
 400bfd4:	d8800717 	ldw	r2,28(sp)
 400bfd8:	11400117 	ldw	r5,4(r2)
 400bfdc:	81400a26 	beq	r16,r5,400c008 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
 400bfe0:	80c00007 	ldb	r3,0(r16)
 400bfe4:	00800a84 	movi	r2,42
 400bfe8:	18800c26 	beq	r3,r2,400c01c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 400bfec:	8009883a 	mov	r4,r16
 400bff0:	d9800115 	stw	r6,4(sp)
 400bff4:	d9c00015 	stw	r7,0(sp)
 400bff8:	400fb7c0 	call	400fb7c <strcmp>
 400bffc:	d9800117 	ldw	r6,4(sp)
 400c000:	d9c00017 	ldw	r7,0(sp)
 400c004:	1000021e 	bne	r2,zero,400c010 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 400c008:	89800215 	stw	r6,8(r17)
 400c00c:	003fea06 	br	400bfb8 <__alt_mem_onchip_memory2_0+0xfc00ad18>
 400c010:	39400117 	ldw	r5,4(r7)
 400c014:	817fdf1e 	bne	r16,r5,400bf94 <__alt_mem_onchip_memory2_0+0xfc00acf4>
 400c018:	003fe306 	br	400bfa8 <__alt_mem_onchip_memory2_0+0xfc00ad08>
 400c01c:	38800117 	ldw	r2,4(r7)
 400c020:	80bfe51e 	bne	r16,r2,400bfb8 <__alt_mem_onchip_memory2_0+0xfc00ad18>
 400c024:	003fe006 	br	400bfa8 <__alt_mem_onchip_memory2_0+0xfc00ad08>

0400c028 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 400c028:	20800117 	ldw	r2,4(r4)
 400c02c:	28c00117 	ldw	r3,4(r5)
 400c030:	10c02926 	beq	r2,r3,400c0d8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
 400c034:	defffb04 	addi	sp,sp,-20
 400c038:	dcc00315 	stw	r19,12(sp)
 400c03c:	dc800215 	stw	r18,8(sp)
 400c040:	dc400115 	stw	r17,4(sp)
 400c044:	dc000015 	stw	r16,0(sp)
 400c048:	dfc00415 	stw	ra,16(sp)
 400c04c:	2821883a 	mov	r16,r5
 400c050:	11400007 	ldb	r5,0(r2)
 400c054:	2025883a 	mov	r18,r4
 400c058:	01000a84 	movi	r4,42
 400c05c:	3823883a 	mov	r17,r7
 400c060:	3027883a 	mov	r19,r6
 400c064:	29000626 	beq	r5,r4,400c080 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400c068:	180b883a 	mov	r5,r3
 400c06c:	1009883a 	mov	r4,r2
 400c070:	400fb7c0 	call	400fb7c <strcmp>
 400c074:	1000021e 	bne	r2,zero,400c080 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400c078:	00800044 	movi	r2,1
 400c07c:	00000306 	br	400c08c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
 400c080:	008000c4 	movi	r2,3
 400c084:	1440082e 	bgeu	r2,r17,400c0a8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 400c088:	0005883a 	mov	r2,zero
 400c08c:	dfc00417 	ldw	ra,16(sp)
 400c090:	dcc00317 	ldw	r19,12(sp)
 400c094:	dc800217 	ldw	r18,8(sp)
 400c098:	dc400117 	ldw	r17,4(sp)
 400c09c:	dc000017 	ldw	r16,0(sp)
 400c0a0:	dec00504 	addi	sp,sp,20
 400c0a4:	f800283a 	ret
 400c0a8:	80800017 	ldw	r2,0(r16)
 400c0ac:	980d883a 	mov	r6,r19
 400c0b0:	900b883a 	mov	r5,r18
 400c0b4:	10800517 	ldw	r2,20(r2)
 400c0b8:	8009883a 	mov	r4,r16
 400c0bc:	dfc00417 	ldw	ra,16(sp)
 400c0c0:	dcc00317 	ldw	r19,12(sp)
 400c0c4:	dc800217 	ldw	r18,8(sp)
 400c0c8:	dc400117 	ldw	r17,4(sp)
 400c0cc:	dc000017 	ldw	r16,0(sp)
 400c0d0:	dec00504 	addi	sp,sp,20
 400c0d4:	1000683a 	jmp	r2
 400c0d8:	00800044 	movi	r2,1
 400c0dc:	f800283a 	ret

0400c0e0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 400c0e0:	00810074 	movhi	r2,1025
 400c0e4:	deffef04 	addi	sp,sp,-68
 400c0e8:	10b29204 	addi	r2,r2,-13752
 400c0ec:	d8800615 	stw	r2,24(sp)
 400c0f0:	008100b4 	movhi	r2,1026
 400c0f4:	10827504 	addi	r2,r2,2516
 400c0f8:	d8800715 	stw	r2,28(sp)
 400c0fc:	00810074 	movhi	r2,1025
 400c100:	10b04e04 	addi	r2,r2,-16072
 400c104:	d9000d15 	stw	r4,52(sp)
 400c108:	d809883a 	mov	r4,sp
 400c10c:	d8800915 	stw	r2,36(sp)
 400c110:	dfc01015 	stw	ra,64(sp)
 400c114:	df000f15 	stw	fp,60(sp)
 400c118:	dec00815 	stw	sp,32(sp)
 400c11c:	dec00a15 	stw	sp,40(sp)
 400c120:	400e8400 	call	400e840 <_Unwind_SjLj_Register>
 400c124:	00800044 	movi	r2,1
 400c128:	d8800115 	stw	r2,4(sp)
 400c12c:	d8800d17 	ldw	r2,52(sp)
 400c130:	103ee83a 	callr	r2
 400c134:	400ebbc0 	call	400ebbc <abort>
 400c138:	d8c00217 	ldw	r3,8(sp)
 400c13c:	d8800117 	ldw	r2,4(sp)
 400c140:	d8c00d15 	stw	r3,52(sp)
 400c144:	d8c00317 	ldw	r3,12(sp)
 400c148:	d8c00e15 	stw	r3,56(sp)
 400c14c:	10000b26 	beq	r2,zero,400c17c <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
 400c150:	10bfffc4 	addi	r2,r2,-1
 400c154:	10000126 	beq	r2,zero,400c15c <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
 400c158:	003b68fa 	trap	3
 400c15c:	d8000115 	stw	zero,4(sp)
 400c160:	400d48c0 	call	400d48c <__cxa_end_catch>
 400c164:	d8c00e17 	ldw	r3,56(sp)
 400c168:	00bfffc4 	movi	r2,-1
 400c16c:	18800826 	beq	r3,r2,400c190 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
 400c170:	d9000d17 	ldw	r4,52(sp)
 400c174:	d8800115 	stw	r2,4(sp)
 400c178:	400ea3c0 	call	400ea3c <_Unwind_SjLj_Resume>
 400c17c:	d9000d17 	ldw	r4,52(sp)
 400c180:	400d3d80 	call	400d3d8 <__cxa_begin_catch>
 400c184:	00800084 	movi	r2,2
 400c188:	d8800115 	stw	r2,4(sp)
 400c18c:	400ebbc0 	call	400ebbc <abort>
 400c190:	d8800e17 	ldw	r2,56(sp)
 400c194:	d9000d17 	ldw	r4,52(sp)
 400c198:	d8800115 	stw	r2,4(sp)
 400c19c:	400d0480 	call	400d048 <__cxa_call_unexpected>

0400c1a0 <_ZSt9terminatev>:
 400c1a0:	008100f4 	movhi	r2,1027
 400c1a4:	10ab7b04 	addi	r2,r2,-21012
 400c1a8:	11000017 	ldw	r4,0(r2)
 400c1ac:	deffff04 	addi	sp,sp,-4
 400c1b0:	dfc00015 	stw	ra,0(sp)
 400c1b4:	400c0e00 	call	400c0e0 <_ZN10__cxxabiv111__terminateEPFvvE>

0400c1b8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 400c1b8:	deffff04 	addi	sp,sp,-4
 400c1bc:	dfc00015 	stw	ra,0(sp)
 400c1c0:	203ee83a 	callr	r4
 400c1c4:	400c1a00 	call	400c1a0 <_ZSt9terminatev>

0400c1c8 <_ZSt10unexpectedv>:
 400c1c8:	008100f4 	movhi	r2,1027
 400c1cc:	10ab7a04 	addi	r2,r2,-21016
 400c1d0:	11000017 	ldw	r4,0(r2)
 400c1d4:	deffff04 	addi	sp,sp,-4
 400c1d8:	dfc00015 	stw	ra,0(sp)
 400c1dc:	400c1b80 	call	400c1b8 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0400c1e0 <_ZSt13set_terminatePFvvE>:
 400c1e0:	00c100f4 	movhi	r3,1027
 400c1e4:	18eb7b04 	addi	r3,r3,-21012
 400c1e8:	18800017 	ldw	r2,0(r3)
 400c1ec:	19000015 	stw	r4,0(r3)
 400c1f0:	f800283a 	ret

0400c1f4 <_ZSt13get_terminatev>:
 400c1f4:	008100f4 	movhi	r2,1027
 400c1f8:	10ab7b04 	addi	r2,r2,-21012
 400c1fc:	10800017 	ldw	r2,0(r2)
 400c200:	f800283a 	ret

0400c204 <_ZSt14set_unexpectedPFvvE>:
 400c204:	00c100f4 	movhi	r3,1027
 400c208:	18eb7a04 	addi	r3,r3,-21016
 400c20c:	18800017 	ldw	r2,0(r3)
 400c210:	19000015 	stw	r4,0(r3)
 400c214:	f800283a 	ret

0400c218 <_ZSt14get_unexpectedv>:
 400c218:	008100f4 	movhi	r2,1027
 400c21c:	10ab7a04 	addi	r2,r2,-21016
 400c220:	10800017 	ldw	r2,0(r2)
 400c224:	f800283a 	ret

0400c228 <_ZL21size_of_encoded_valueh>:
 400c228:	deffff04 	addi	sp,sp,-4
 400c22c:	dfc00015 	stw	ra,0(sp)
 400c230:	20c03fcc 	andi	r3,r4,255
 400c234:	00803fc4 	movi	r2,255
 400c238:	18802026 	beq	r3,r2,400c2bc <_ZL21size_of_encoded_valueh+0x94>
 400c23c:	210001cc 	andi	r4,r4,7
 400c240:	00800144 	movi	r2,5
 400c244:	11001c36 	bltu	r2,r4,400c2b8 <_ZL21size_of_encoded_valueh+0x90>
 400c248:	200890ba 	slli	r4,r4,2
 400c24c:	00810074 	movhi	r2,1025
 400c250:	10b09804 	addi	r2,r2,-15776
 400c254:	2089883a 	add	r4,r4,r2
 400c258:	20800017 	ldw	r2,0(r4)
 400c25c:	1000683a 	jmp	r2
 400c260:	0400c278 	rdprs	r16,zero,777
 400c264:	0400c2b8 	rdprs	r16,zero,778
 400c268:	0400c288 	cmpgei	r16,zero,778
 400c26c:	0400c278 	rdprs	r16,zero,777
 400c270:	0400c2a8 	cmpgeui	r16,zero,778
 400c274:	0400c298 	cmpnei	r16,zero,778
 400c278:	00800104 	movi	r2,4
 400c27c:	dfc00017 	ldw	ra,0(sp)
 400c280:	dec00104 	addi	sp,sp,4
 400c284:	f800283a 	ret
 400c288:	00800084 	movi	r2,2
 400c28c:	dfc00017 	ldw	ra,0(sp)
 400c290:	dec00104 	addi	sp,sp,4
 400c294:	f800283a 	ret
 400c298:	00800044 	movi	r2,1
 400c29c:	dfc00017 	ldw	ra,0(sp)
 400c2a0:	dec00104 	addi	sp,sp,4
 400c2a4:	f800283a 	ret
 400c2a8:	00800204 	movi	r2,8
 400c2ac:	dfc00017 	ldw	ra,0(sp)
 400c2b0:	dec00104 	addi	sp,sp,4
 400c2b4:	f800283a 	ret
 400c2b8:	400ebbc0 	call	400ebbc <abort>
 400c2bc:	0005883a 	mov	r2,zero
 400c2c0:	dfc00017 	ldw	ra,0(sp)
 400c2c4:	dec00104 	addi	sp,sp,4
 400c2c8:	f800283a 	ret

0400c2cc <_ZL28read_encoded_value_with_basehjPKhPj>:
 400c2cc:	deffff04 	addi	sp,sp,-4
 400c2d0:	dfc00015 	stw	ra,0(sp)
 400c2d4:	20c03fcc 	andi	r3,r4,255
 400c2d8:	00801404 	movi	r2,80
 400c2dc:	18807326 	beq	r3,r2,400c4ac <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
 400c2e0:	20c003cc 	andi	r3,r4,15
 400c2e4:	00800304 	movi	r2,12
 400c2e8:	10c06f36 	bltu	r2,r3,400c4a8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
 400c2ec:	180690ba 	slli	r3,r3,2
 400c2f0:	02010074 	movhi	r8,1025
 400c2f4:	4230c104 	addi	r8,r8,-15612
 400c2f8:	1a07883a 	add	r3,r3,r8
 400c2fc:	18800017 	ldw	r2,0(r3)
 400c300:	1000683a 	jmp	r2
 400c304:	0400c338 	rdprs	r16,zero,780
 400c308:	0400c454 	movui	r16,785
 400c30c:	0400c490 	cmplti	r16,zero,786
 400c310:	0400c338 	rdprs	r16,zero,780
 400c314:	0400c39c 	xori	r16,zero,782
 400c318:	0400c3f0 	cmpltui	r16,zero,783
 400c31c:	0400c4a8 	cmpgeui	r16,zero,786
 400c320:	0400c4a8 	cmpgeui	r16,zero,786
 400c324:	0400c4a8 	cmpgeui	r16,zero,786
 400c328:	0400c3fc 	xorhi	r16,zero,783
 400c32c:	0400c3cc 	andi	r16,zero,783
 400c330:	0400c338 	rdprs	r16,zero,780
 400c334:	0400c39c 	xori	r16,zero,782
 400c338:	30800043 	ldbu	r2,1(r6)
 400c33c:	30c00083 	ldbu	r3,2(r6)
 400c340:	324000c3 	ldbu	r9,3(r6)
 400c344:	32000003 	ldbu	r8,0(r6)
 400c348:	1004923a 	slli	r2,r2,8
 400c34c:	1806943a 	slli	r3,r3,16
 400c350:	4812963a 	slli	r9,r9,24
 400c354:	1204b03a 	or	r2,r2,r8
 400c358:	1884b03a 	or	r2,r3,r2
 400c35c:	4886b03a 	or	r3,r9,r2
 400c360:	30800104 	addi	r2,r6,4
 400c364:	18000926 	beq	r3,zero,400c38c <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 400c368:	22001c0c 	andi	r8,r4,112
 400c36c:	02400404 	movi	r9,16
 400c370:	42405726 	beq	r8,r9,400c4d0 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
 400c374:	21003fcc 	andi	r4,r4,255
 400c378:	2100201c 	xori	r4,r4,128
 400c37c:	213fe004 	addi	r4,r4,-128
 400c380:	1947883a 	add	r3,r3,r5
 400c384:	2000010e 	bge	r4,zero,400c38c <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 400c388:	18c00017 	ldw	r3,0(r3)
 400c38c:	38c00015 	stw	r3,0(r7)
 400c390:	dfc00017 	ldw	ra,0(sp)
 400c394:	dec00104 	addi	sp,sp,4
 400c398:	f800283a 	ret
 400c39c:	30800043 	ldbu	r2,1(r6)
 400c3a0:	30c00083 	ldbu	r3,2(r6)
 400c3a4:	324000c3 	ldbu	r9,3(r6)
 400c3a8:	32000003 	ldbu	r8,0(r6)
 400c3ac:	1004923a 	slli	r2,r2,8
 400c3b0:	1806943a 	slli	r3,r3,16
 400c3b4:	4812963a 	slli	r9,r9,24
 400c3b8:	1204b03a 	or	r2,r2,r8
 400c3bc:	1884b03a 	or	r2,r3,r2
 400c3c0:	4886b03a 	or	r3,r9,r2
 400c3c4:	30800204 	addi	r2,r6,8
 400c3c8:	003fe606 	br	400c364 <__alt_mem_onchip_memory2_0+0xfc00b0c4>
 400c3cc:	30c00043 	ldbu	r3,1(r6)
 400c3d0:	32000003 	ldbu	r8,0(r6)
 400c3d4:	30800084 	addi	r2,r6,2
 400c3d8:	1806923a 	slli	r3,r3,8
 400c3dc:	1a06b03a 	or	r3,r3,r8
 400c3e0:	18ffffcc 	andi	r3,r3,65535
 400c3e4:	18e0001c 	xori	r3,r3,32768
 400c3e8:	18e00004 	addi	r3,r3,-32768
 400c3ec:	003fdd06 	br	400c364 <__alt_mem_onchip_memory2_0+0xfc00b0c4>
 400c3f0:	30c00003 	ldbu	r3,0(r6)
 400c3f4:	30800044 	addi	r2,r6,1
 400c3f8:	003fda06 	br	400c364 <__alt_mem_onchip_memory2_0+0xfc00b0c4>
 400c3fc:	3017883a 	mov	r11,r6
 400c400:	0007883a 	mov	r3,zero
 400c404:	0013883a 	mov	r9,zero
 400c408:	5a800003 	ldbu	r10,0(r11)
 400c40c:	58800044 	addi	r2,r11,1
 400c410:	1017883a 	mov	r11,r2
 400c414:	52001fcc 	andi	r8,r10,127
 400c418:	4250983a 	sll	r8,r8,r9
 400c41c:	53003fcc 	andi	r12,r10,255
 400c420:	6300201c 	xori	r12,r12,128
 400c424:	633fe004 	addi	r12,r12,-128
 400c428:	1a06b03a 	or	r3,r3,r8
 400c42c:	4a4001c4 	addi	r9,r9,7
 400c430:	603ff516 	blt	r12,zero,400c408 <__alt_mem_onchip_memory2_0+0xfc00b168>
 400c434:	020007c4 	movi	r8,31
 400c438:	427fca36 	bltu	r8,r9,400c364 <__alt_mem_onchip_memory2_0+0xfc00b0c4>
 400c43c:	5280100c 	andi	r10,r10,64
 400c440:	503fc826 	beq	r10,zero,400c364 <__alt_mem_onchip_memory2_0+0xfc00b0c4>
 400c444:	023fffc4 	movi	r8,-1
 400c448:	4252983a 	sll	r9,r8,r9
 400c44c:	1a46b03a 	or	r3,r3,r9
 400c450:	003fc506 	br	400c368 <__alt_mem_onchip_memory2_0+0xfc00b0c8>
 400c454:	3017883a 	mov	r11,r6
 400c458:	0007883a 	mov	r3,zero
 400c45c:	0015883a 	mov	r10,zero
 400c460:	5a000003 	ldbu	r8,0(r11)
 400c464:	58800044 	addi	r2,r11,1
 400c468:	1017883a 	mov	r11,r2
 400c46c:	42401fcc 	andi	r9,r8,127
 400c470:	4a92983a 	sll	r9,r9,r10
 400c474:	42003fcc 	andi	r8,r8,255
 400c478:	4200201c 	xori	r8,r8,128
 400c47c:	423fe004 	addi	r8,r8,-128
 400c480:	1a46b03a 	or	r3,r3,r9
 400c484:	528001c4 	addi	r10,r10,7
 400c488:	403ff516 	blt	r8,zero,400c460 <__alt_mem_onchip_memory2_0+0xfc00b1c0>
 400c48c:	003fb506 	br	400c364 <__alt_mem_onchip_memory2_0+0xfc00b0c4>
 400c490:	30c00043 	ldbu	r3,1(r6)
 400c494:	32000003 	ldbu	r8,0(r6)
 400c498:	30800084 	addi	r2,r6,2
 400c49c:	1806923a 	slli	r3,r3,8
 400c4a0:	1a06b03a 	or	r3,r3,r8
 400c4a4:	003faf06 	br	400c364 <__alt_mem_onchip_memory2_0+0xfc00b0c4>
 400c4a8:	400ebbc0 	call	400ebbc <abort>
 400c4ac:	308000c4 	addi	r2,r6,3
 400c4b0:	00ffff04 	movi	r3,-4
 400c4b4:	10c4703a 	and	r2,r2,r3
 400c4b8:	10c00017 	ldw	r3,0(r2)
 400c4bc:	10800104 	addi	r2,r2,4
 400c4c0:	38c00015 	stw	r3,0(r7)
 400c4c4:	dfc00017 	ldw	ra,0(sp)
 400c4c8:	dec00104 	addi	sp,sp,4
 400c4cc:	f800283a 	ret
 400c4d0:	300b883a 	mov	r5,r6
 400c4d4:	003fa706 	br	400c374 <__alt_mem_onchip_memory2_0+0xfc00b0d4>

0400c4d8 <_ZL15get_ttype_entryP16lsda_header_infom>:
 400c4d8:	defffc04 	addi	sp,sp,-16
 400c4dc:	dfc00315 	stw	ra,12(sp)
 400c4e0:	dc000215 	stw	r16,8(sp)
 400c4e4:	2021883a 	mov	r16,r4
 400c4e8:	21000503 	ldbu	r4,20(r4)
 400c4ec:	d9400115 	stw	r5,4(sp)
 400c4f0:	400c2280 	call	400c228 <_ZL21size_of_encoded_valueh>
 400c4f4:	d9400117 	ldw	r5,4(sp)
 400c4f8:	1009883a 	mov	r4,r2
 400c4fc:	400dae00 	call	400dae0 <__mulsi3>
 400c500:	81800317 	ldw	r6,12(r16)
 400c504:	81400217 	ldw	r5,8(r16)
 400c508:	81000503 	ldbu	r4,20(r16)
 400c50c:	d80f883a 	mov	r7,sp
 400c510:	308dc83a 	sub	r6,r6,r2
 400c514:	400c2cc0 	call	400c2cc <_ZL28read_encoded_value_with_basehjPKhPj>
 400c518:	d8800017 	ldw	r2,0(sp)
 400c51c:	dfc00317 	ldw	ra,12(sp)
 400c520:	dc000217 	ldw	r16,8(sp)
 400c524:	dec00404 	addi	sp,sp,16
 400c528:	f800283a 	ret

0400c52c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 400c52c:	deffff04 	addi	sp,sp,-4
 400c530:	dfc00015 	stw	ra,0(sp)
 400c534:	20c03fcc 	andi	r3,r4,255
 400c538:	00803fc4 	movi	r2,255
 400c53c:	18800e26 	beq	r3,r2,400c578 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 400c540:	20801c0c 	andi	r2,r4,112
 400c544:	00c00804 	movi	r3,32
 400c548:	10c01726 	beq	r2,r3,400c5a8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
 400c54c:	18800e2e 	bgeu	r3,r2,400c588 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
 400c550:	00c01004 	movi	r3,64
 400c554:	10c01026 	beq	r2,r3,400c598 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
 400c558:	00c01404 	movi	r3,80
 400c55c:	10c00626 	beq	r2,r3,400c578 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 400c560:	00c00c04 	movi	r3,48
 400c564:	10c00b1e 	bne	r2,r3,400c594 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
 400c568:	2809883a 	mov	r4,r5
 400c56c:	dfc00017 	ldw	ra,0(sp)
 400c570:	dec00104 	addi	sp,sp,4
 400c574:	400e9181 	jmpi	400e918 <_Unwind_GetDataRelBase>
 400c578:	0005883a 	mov	r2,zero
 400c57c:	dfc00017 	ldw	ra,0(sp)
 400c580:	dec00104 	addi	sp,sp,4
 400c584:	f800283a 	ret
 400c588:	103ffb26 	beq	r2,zero,400c578 <__alt_mem_onchip_memory2_0+0xfc00b2d8>
 400c58c:	00c00404 	movi	r3,16
 400c590:	10fff926 	beq	r2,r3,400c578 <__alt_mem_onchip_memory2_0+0xfc00b2d8>
 400c594:	400ebbc0 	call	400ebbc <abort>
 400c598:	2809883a 	mov	r4,r5
 400c59c:	dfc00017 	ldw	ra,0(sp)
 400c5a0:	dec00104 	addi	sp,sp,4
 400c5a4:	400e9081 	jmpi	400e908 <_Unwind_GetRegionStart>
 400c5a8:	2809883a 	mov	r4,r5
 400c5ac:	dfc00017 	ldw	ra,0(sp)
 400c5b0:	dec00104 	addi	sp,sp,4
 400c5b4:	400e9201 	jmpi	400e920 <_Unwind_GetTextRelBase>

0400c5b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 400c5b8:	defffb04 	addi	sp,sp,-20
 400c5bc:	dcc00315 	stw	r19,12(sp)
 400c5c0:	dc400115 	stw	r17,4(sp)
 400c5c4:	dc000015 	stw	r16,0(sp)
 400c5c8:	dfc00415 	stw	ra,16(sp)
 400c5cc:	dc800215 	stw	r18,8(sp)
 400c5d0:	2027883a 	mov	r19,r4
 400c5d4:	2821883a 	mov	r16,r5
 400c5d8:	3023883a 	mov	r17,r6
 400c5dc:	20003f26 	beq	r4,zero,400c6dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
 400c5e0:	400e9080 	call	400e908 <_Unwind_GetRegionStart>
 400c5e4:	88800015 	stw	r2,0(r17)
 400c5e8:	84800003 	ldbu	r18,0(r16)
 400c5ec:	00c03fc4 	movi	r3,255
 400c5f0:	84000044 	addi	r16,r16,1
 400c5f4:	90c03726 	beq	r18,r3,400c6d4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
 400c5f8:	980b883a 	mov	r5,r19
 400c5fc:	9009883a 	mov	r4,r18
 400c600:	400c52c0 	call	400c52c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c604:	800d883a 	mov	r6,r16
 400c608:	89c00104 	addi	r7,r17,4
 400c60c:	100b883a 	mov	r5,r2
 400c610:	9009883a 	mov	r4,r18
 400c614:	400c2cc0 	call	400c2cc <_ZL28read_encoded_value_with_basehjPKhPj>
 400c618:	1021883a 	mov	r16,r2
 400c61c:	80c00003 	ldbu	r3,0(r16)
 400c620:	01003fc4 	movi	r4,255
 400c624:	80800044 	addi	r2,r16,1
 400c628:	88c00505 	stb	r3,20(r17)
 400c62c:	18c03fcc 	andi	r3,r3,255
 400c630:	19002c26 	beq	r3,r4,400c6e4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
 400c634:	100f883a 	mov	r7,r2
 400c638:	000d883a 	mov	r6,zero
 400c63c:	000b883a 	mov	r5,zero
 400c640:	38c00003 	ldbu	r3,0(r7)
 400c644:	10800044 	addi	r2,r2,1
 400c648:	100f883a 	mov	r7,r2
 400c64c:	19001fcc 	andi	r4,r3,127
 400c650:	2148983a 	sll	r4,r4,r5
 400c654:	18c03fcc 	andi	r3,r3,255
 400c658:	18c0201c 	xori	r3,r3,128
 400c65c:	18ffe004 	addi	r3,r3,-128
 400c660:	310cb03a 	or	r6,r6,r4
 400c664:	294001c4 	addi	r5,r5,7
 400c668:	183ff516 	blt	r3,zero,400c640 <__alt_mem_onchip_memory2_0+0xfc00b3a0>
 400c66c:	118d883a 	add	r6,r2,r6
 400c670:	89800315 	stw	r6,12(r17)
 400c674:	10c00003 	ldbu	r3,0(r2)
 400c678:	000d883a 	mov	r6,zero
 400c67c:	10800044 	addi	r2,r2,1
 400c680:	88c00545 	stb	r3,21(r17)
 400c684:	000b883a 	mov	r5,zero
 400c688:	10c00003 	ldbu	r3,0(r2)
 400c68c:	10800044 	addi	r2,r2,1
 400c690:	19001fcc 	andi	r4,r3,127
 400c694:	2148983a 	sll	r4,r4,r5
 400c698:	18c03fcc 	andi	r3,r3,255
 400c69c:	18c0201c 	xori	r3,r3,128
 400c6a0:	18ffe004 	addi	r3,r3,-128
 400c6a4:	310cb03a 	or	r6,r6,r4
 400c6a8:	294001c4 	addi	r5,r5,7
 400c6ac:	183ff616 	blt	r3,zero,400c688 <__alt_mem_onchip_memory2_0+0xfc00b3e8>
 400c6b0:	118d883a 	add	r6,r2,r6
 400c6b4:	89800415 	stw	r6,16(r17)
 400c6b8:	dfc00417 	ldw	ra,16(sp)
 400c6bc:	dcc00317 	ldw	r19,12(sp)
 400c6c0:	dc800217 	ldw	r18,8(sp)
 400c6c4:	dc400117 	ldw	r17,4(sp)
 400c6c8:	dc000017 	ldw	r16,0(sp)
 400c6cc:	dec00504 	addi	sp,sp,20
 400c6d0:	f800283a 	ret
 400c6d4:	88800115 	stw	r2,4(r17)
 400c6d8:	003fd006 	br	400c61c <__alt_mem_onchip_memory2_0+0xfc00b37c>
 400c6dc:	0005883a 	mov	r2,zero
 400c6e0:	003fc006 	br	400c5e4 <__alt_mem_onchip_memory2_0+0xfc00b344>
 400c6e4:	88000315 	stw	zero,12(r17)
 400c6e8:	003fe206 	br	400c674 <__alt_mem_onchip_memory2_0+0xfc00b3d4>

0400c6ec <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
 400c6ec:	28800017 	ldw	r2,0(r5)
 400c6f0:	30c00017 	ldw	r3,0(r6)
 400c6f4:	defffb04 	addi	sp,sp,-20
 400c6f8:	10800217 	ldw	r2,8(r2)
 400c6fc:	dc400315 	stw	r17,12(sp)
 400c700:	dc000215 	stw	r16,8(sp)
 400c704:	d9400115 	stw	r5,4(sp)
 400c708:	dfc00415 	stw	ra,16(sp)
 400c70c:	2021883a 	mov	r16,r4
 400c710:	d8c00015 	stw	r3,0(sp)
 400c714:	2809883a 	mov	r4,r5
 400c718:	3023883a 	mov	r17,r6
 400c71c:	103ee83a 	callr	r2
 400c720:	10803fcc 	andi	r2,r2,255
 400c724:	d9400117 	ldw	r5,4(sp)
 400c728:	10000326 	beq	r2,zero,400c738 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
 400c72c:	d8800017 	ldw	r2,0(sp)
 400c730:	10800017 	ldw	r2,0(r2)
 400c734:	d8800015 	stw	r2,0(sp)
 400c738:	80800017 	ldw	r2,0(r16)
 400c73c:	01c00044 	movi	r7,1
 400c740:	d80d883a 	mov	r6,sp
 400c744:	10800417 	ldw	r2,16(r2)
 400c748:	8009883a 	mov	r4,r16
 400c74c:	103ee83a 	callr	r2
 400c750:	10c03fcc 	andi	r3,r2,255
 400c754:	18000226 	beq	r3,zero,400c760 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
 400c758:	d8c00017 	ldw	r3,0(sp)
 400c75c:	88c00015 	stw	r3,0(r17)
 400c760:	dfc00417 	ldw	ra,16(sp)
 400c764:	dc400317 	ldw	r17,12(sp)
 400c768:	dc000217 	ldw	r16,8(sp)
 400c76c:	dec00504 	addi	sp,sp,20
 400c770:	f800283a 	ret

0400c774 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
 400c774:	defff304 	addi	sp,sp,-52
 400c778:	dc800615 	stw	r18,24(sp)
 400c77c:	3825d23a 	srai	r18,r7,8
 400c780:	dd000815 	stw	r20,32(sp)
 400c784:	dcc00715 	stw	r19,28(sp)
 400c788:	dfc00c15 	stw	ra,48(sp)
 400c78c:	ddc00b15 	stw	r23,44(sp)
 400c790:	dd800a15 	stw	r22,40(sp)
 400c794:	dd400915 	stw	r21,36(sp)
 400c798:	dc400515 	stw	r17,20(sp)
 400c79c:	dc000415 	stw	r16,16(sp)
 400c7a0:	d9400215 	stw	r5,8(sp)
 400c7a4:	3827883a 	mov	r19,r7
 400c7a8:	2029883a 	mov	r20,r4
 400c7ac:	9000010e 	bge	r18,zero,400c7b4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
 400c7b0:	04a5c83a 	sub	r18,zero,r18
 400c7b4:	000b883a 	mov	r5,zero
 400c7b8:	01000144 	movi	r4,5
 400c7bc:	d9800315 	stw	r6,12(sp)
 400c7c0:	400c52c0 	call	400c52c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c7c4:	d9800317 	ldw	r6,12(sp)
 400c7c8:	d9c00104 	addi	r7,sp,4
 400c7cc:	100b883a 	mov	r5,r2
 400c7d0:	01000144 	movi	r4,5
 400c7d4:	400c2cc0 	call	400c2cc <_ZL28read_encoded_value_with_basehjPKhPj>
 400c7d8:	017ffe44 	movi	r5,-7
 400c7dc:	1009883a 	mov	r4,r2
 400c7e0:	1021883a 	mov	r16,r2
 400c7e4:	400dae00 	call	400dae0 <__mulsi3>
 400c7e8:	102d883a 	mov	r22,r2
 400c7ec:	0023883a 	mov	r17,zero
 400c7f0:	85400003 	ldbu	r21,0(r16)
 400c7f4:	8009883a 	mov	r4,r16
 400c7f8:	014001c4 	movi	r5,7
 400c7fc:	400dae00 	call	400dae0 <__mulsi3>
 400c800:	a8c01fcc 	andi	r3,r21,127
 400c804:	1585883a 	add	r2,r2,r22
 400c808:	1886983a 	sll	r3,r3,r2
 400c80c:	ad403fcc 	andi	r21,r21,255
 400c810:	ad40201c 	xori	r21,r21,128
 400c814:	ad7fe004 	addi	r21,r21,-128
 400c818:	84000044 	addi	r16,r16,1
 400c81c:	88e2b03a 	or	r17,r17,r3
 400c820:	a83ff316 	blt	r21,zero,400c7f0 <__alt_mem_onchip_memory2_0+0xfc00b550>
 400c824:	8461883a 	add	r16,r16,r17
 400c828:	017ffe44 	movi	r5,-7
 400c82c:	8009883a 	mov	r4,r16
 400c830:	400dae00 	call	400dae0 <__mulsi3>
 400c834:	102d883a 	mov	r22,r2
 400c838:	002b883a 	mov	r21,zero
 400c83c:	84400003 	ldbu	r17,0(r16)
 400c840:	8009883a 	mov	r4,r16
 400c844:	014001c4 	movi	r5,7
 400c848:	400dae00 	call	400dae0 <__mulsi3>
 400c84c:	88c01fcc 	andi	r3,r17,127
 400c850:	1585883a 	add	r2,r2,r22
 400c854:	1886983a 	sll	r3,r3,r2
 400c858:	8c403fcc 	andi	r17,r17,255
 400c85c:	8c40201c 	xori	r17,r17,128
 400c860:	8c7fe004 	addi	r17,r17,-128
 400c864:	84000044 	addi	r16,r16,1
 400c868:	a8eab03a 	or	r21,r21,r3
 400c86c:	883ff316 	blt	r17,zero,400c83c <__alt_mem_onchip_memory2_0+0xfc00b59c>
 400c870:	94403fcc 	andi	r17,r18,255
 400c874:	8c7fffc4 	addi	r17,r17,-1
 400c878:	8463883a 	add	r17,r16,r17
 400c87c:	ad4000c4 	addi	r21,r21,3
 400c880:	00bfff04 	movi	r2,-4
 400c884:	ac21883a 	add	r16,r21,r16
 400c888:	017ffe44 	movi	r5,-7
 400c88c:	8809883a 	mov	r4,r17
 400c890:	80a0703a 	and	r16,r16,r2
 400c894:	400dae00 	call	400dae0 <__mulsi3>
 400c898:	0025883a 	mov	r18,zero
 400c89c:	102f883a 	mov	r23,r2
 400c8a0:	8d800003 	ldbu	r22,0(r17)
 400c8a4:	8809883a 	mov	r4,r17
 400c8a8:	014001c4 	movi	r5,7
 400c8ac:	400dae00 	call	400dae0 <__mulsi3>
 400c8b0:	b0c01fcc 	andi	r3,r22,127
 400c8b4:	15c5883a 	add	r2,r2,r23
 400c8b8:	1886983a 	sll	r3,r3,r2
 400c8bc:	b5803fcc 	andi	r22,r22,255
 400c8c0:	b580201c 	xori	r22,r22,128
 400c8c4:	8d400044 	addi	r21,r17,1
 400c8c8:	b5bfe004 	addi	r22,r22,-128
 400c8cc:	90e4b03a 	or	r18,r18,r3
 400c8d0:	a823883a 	mov	r17,r21
 400c8d4:	b03ff216 	blt	r22,zero,400c8a0 <__alt_mem_onchip_memory2_0+0xfc00b600>
 400c8d8:	9cc03fcc 	andi	r19,r19,255
 400c8dc:	90002426 	beq	r18,zero,400c970 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
 400c8e0:	9809883a 	mov	r4,r19
 400c8e4:	400c2280 	call	400c228 <_ZL21size_of_encoded_valueh>
 400c8e8:	100b883a 	mov	r5,r2
 400c8ec:	913fffc4 	addi	r4,r18,-1
 400c8f0:	400dae00 	call	400dae0 <__mulsi3>
 400c8f4:	d9400d17 	ldw	r5,52(sp)
 400c8f8:	d80f883a 	mov	r7,sp
 400c8fc:	9809883a 	mov	r4,r19
 400c900:	140d883a 	add	r6,r2,r16
 400c904:	400c2cc0 	call	400c2cc <_ZL28read_encoded_value_with_basehjPKhPj>
 400c908:	d9000017 	ldw	r4,0(sp)
 400c90c:	d9800204 	addi	r6,sp,8
 400c910:	a00b883a 	mov	r5,r20
 400c914:	400c6ec0 	call	400c6ec <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400c918:	10c03fcc 	andi	r3,r2,255
 400c91c:	1800151e 	bne	r3,zero,400c974 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
 400c920:	a809883a 	mov	r4,r21
 400c924:	017ffe44 	movi	r5,-7
 400c928:	400dae00 	call	400dae0 <__mulsi3>
 400c92c:	102d883a 	mov	r22,r2
 400c930:	a809883a 	mov	r4,r21
 400c934:	0025883a 	mov	r18,zero
 400c938:	24400003 	ldbu	r17,0(r4)
 400c93c:	014001c4 	movi	r5,7
 400c940:	400dae00 	call	400dae0 <__mulsi3>
 400c944:	88c01fcc 	andi	r3,r17,127
 400c948:	1585883a 	add	r2,r2,r22
 400c94c:	1886983a 	sll	r3,r3,r2
 400c950:	8c403fcc 	andi	r17,r17,255
 400c954:	8c40201c 	xori	r17,r17,128
 400c958:	ad400044 	addi	r21,r21,1
 400c95c:	8c7fe004 	addi	r17,r17,-128
 400c960:	90e4b03a 	or	r18,r18,r3
 400c964:	a809883a 	mov	r4,r21
 400c968:	883ff316 	blt	r17,zero,400c938 <__alt_mem_onchip_memory2_0+0xfc00b698>
 400c96c:	003fdb06 	br	400c8dc <__alt_mem_onchip_memory2_0+0xfc00b63c>
 400c970:	0005883a 	mov	r2,zero
 400c974:	dfc00c17 	ldw	ra,48(sp)
 400c978:	ddc00b17 	ldw	r23,44(sp)
 400c97c:	dd800a17 	ldw	r22,40(sp)
 400c980:	dd400917 	ldw	r21,36(sp)
 400c984:	dd000817 	ldw	r20,32(sp)
 400c988:	dcc00717 	ldw	r19,28(sp)
 400c98c:	dc800617 	ldw	r18,24(sp)
 400c990:	dc400517 	ldw	r17,20(sp)
 400c994:	dc000417 	ldw	r16,16(sp)
 400c998:	dec00d04 	addi	sp,sp,52
 400c99c:	f800283a 	ret

0400c9a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
 400c9a0:	defffb04 	addi	sp,sp,-20
 400c9a4:	dc000115 	stw	r16,4(sp)
 400c9a8:	24000317 	ldw	r16,12(r4)
 400c9ac:	01ce303a 	nor	r7,zero,r7
 400c9b0:	dc800315 	stw	r18,12(sp)
 400c9b4:	dc400215 	stw	r17,8(sp)
 400c9b8:	dfc00415 	stw	ra,16(sp)
 400c9bc:	2023883a 	mov	r17,r4
 400c9c0:	2825883a 	mov	r18,r5
 400c9c4:	d9800015 	stw	r6,0(sp)
 400c9c8:	81e1883a 	add	r16,r16,r7
 400c9cc:	800d883a 	mov	r6,r16
 400c9d0:	000b883a 	mov	r5,zero
 400c9d4:	0009883a 	mov	r4,zero
 400c9d8:	30800003 	ldbu	r2,0(r6)
 400c9dc:	84000044 	addi	r16,r16,1
 400c9e0:	800d883a 	mov	r6,r16
 400c9e4:	10c01fcc 	andi	r3,r2,127
 400c9e8:	1906983a 	sll	r3,r3,r4
 400c9ec:	10803fcc 	andi	r2,r2,255
 400c9f0:	1080201c 	xori	r2,r2,128
 400c9f4:	10bfe004 	addi	r2,r2,-128
 400c9f8:	28cab03a 	or	r5,r5,r3
 400c9fc:	210001c4 	addi	r4,r4,7
 400ca00:	103ff516 	blt	r2,zero,400c9d8 <__alt_mem_onchip_memory2_0+0xfc00b738>
 400ca04:	28000e26 	beq	r5,zero,400ca40 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
 400ca08:	8809883a 	mov	r4,r17
 400ca0c:	400c4d80 	call	400c4d8 <_ZL15get_ttype_entryP16lsda_header_infom>
 400ca10:	d80d883a 	mov	r6,sp
 400ca14:	900b883a 	mov	r5,r18
 400ca18:	1009883a 	mov	r4,r2
 400ca1c:	400c6ec0 	call	400c6ec <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400ca20:	10c03fcc 	andi	r3,r2,255
 400ca24:	183fe926 	beq	r3,zero,400c9cc <__alt_mem_onchip_memory2_0+0xfc00b72c>
 400ca28:	dfc00417 	ldw	ra,16(sp)
 400ca2c:	dc800317 	ldw	r18,12(sp)
 400ca30:	dc400217 	ldw	r17,8(sp)
 400ca34:	dc000117 	ldw	r16,4(sp)
 400ca38:	dec00504 	addi	sp,sp,20
 400ca3c:	f800283a 	ret
 400ca40:	0005883a 	mov	r2,zero
 400ca44:	003ff806 	br	400ca28 <__alt_mem_onchip_memory2_0+0xfc00b788>

0400ca48 <__gxx_personality_sj0>:
 400ca48:	00810074 	movhi	r2,1025
 400ca4c:	deffdd04 	addi	sp,sp,-140
 400ca50:	10b29204 	addi	r2,r2,-13752
 400ca54:	d8800e15 	stw	r2,56(sp)
 400ca58:	008100b4 	movhi	r2,1026
 400ca5c:	10827b04 	addi	r2,r2,2540
 400ca60:	d8800f15 	stw	r2,60(sp)
 400ca64:	00810074 	movhi	r2,1025
 400ca68:	10b40804 	addi	r2,r2,-12256
 400ca6c:	d9001515 	stw	r4,84(sp)
 400ca70:	d9000804 	addi	r4,sp,32
 400ca74:	d8801115 	stw	r2,68(sp)
 400ca78:	dfc02215 	stw	ra,136(sp)
 400ca7c:	df002115 	stw	fp,132(sp)
 400ca80:	dec01015 	stw	sp,64(sp)
 400ca84:	dec01215 	stw	sp,72(sp)
 400ca88:	d9401915 	stw	r5,100(sp)
 400ca8c:	d9801615 	stw	r6,88(sp)
 400ca90:	d9c01715 	stw	r7,92(sp)
 400ca94:	400e8400 	call	400e840 <_Unwind_SjLj_Register>
 400ca98:	d8c01517 	ldw	r3,84(sp)
 400ca9c:	d8000715 	stw	zero,28(sp)
 400caa0:	d8000615 	stw	zero,24(sp)
 400caa4:	00800044 	movi	r2,1
 400caa8:	18800926 	beq	r3,r2,400cad0 <__gxx_personality_sj0+0x88>
 400caac:	01c000c4 	movi	r7,3
 400cab0:	d9c01515 	stw	r7,84(sp)
 400cab4:	d9000804 	addi	r4,sp,32
 400cab8:	400e8580 	call	400e858 <_Unwind_SjLj_Unregister>
 400cabc:	d8801517 	ldw	r2,84(sp)
 400cac0:	dfc02217 	ldw	ra,136(sp)
 400cac4:	df002117 	ldw	fp,132(sp)
 400cac8:	dec02304 	addi	sp,sp,140
 400cacc:	f800283a 	ret
 400cad0:	d9001617 	ldw	r4,88(sp)
 400cad4:	00af3574 	movhi	r2,48341
 400cad8:	d9c01717 	ldw	r7,92(sp)
 400cadc:	10b54004 	addi	r2,r2,-11008
 400cae0:	00ee2cb4 	movhi	r3,47282
 400cae4:	2085883a 	add	r2,r4,r2
 400cae8:	18eaaf04 	addi	r3,r3,-21828
 400caec:	d8801b15 	stw	r2,108(sp)
 400caf0:	38c7883a 	add	r3,r7,r3
 400caf4:	1105803a 	cmpltu	r2,r2,r4
 400caf8:	10c7883a 	add	r3,r2,r3
 400cafc:	d8c01c15 	stw	r3,112(sp)
 400cb00:	d8c01917 	ldw	r3,100(sp)
 400cb04:	00800184 	movi	r2,6
 400cb08:	18805426 	beq	r3,r2,400cc5c <__gxx_personality_sj0+0x214>
 400cb0c:	d9002417 	ldw	r4,144(sp)
 400cb10:	00bfffc4 	movi	r2,-1
 400cb14:	d8800915 	stw	r2,36(sp)
 400cb18:	400e8fc0 	call	400e8fc <_Unwind_GetLanguageSpecificData>
 400cb1c:	d8801a15 	stw	r2,104(sp)
 400cb20:	1000c926 	beq	r2,zero,400ce48 <__gxx_personality_sj0+0x400>
 400cb24:	d9002417 	ldw	r4,144(sp)
 400cb28:	d80d883a 	mov	r6,sp
 400cb2c:	100b883a 	mov	r5,r2
 400cb30:	400c5b80 	call	400c5b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400cb34:	d9402417 	ldw	r5,144(sp)
 400cb38:	d9000503 	ldbu	r4,20(sp)
 400cb3c:	d8801515 	stw	r2,84(sp)
 400cb40:	400c52c0 	call	400c52c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400cb44:	d9002417 	ldw	r4,144(sp)
 400cb48:	d9400604 	addi	r5,sp,24
 400cb4c:	d8800215 	stw	r2,8(sp)
 400cb50:	400e8cc0 	call	400e8cc <_Unwind_GetIPInfo>
 400cb54:	d8c00617 	ldw	r3,24(sp)
 400cb58:	18006126 	beq	r3,zero,400cce0 <__gxx_personality_sj0+0x298>
 400cb5c:	1000ba16 	blt	r2,zero,400ce48 <__gxx_personality_sj0+0x400>
 400cb60:	10002f1e 	bne	r2,zero,400cc20 <__gxx_personality_sj0+0x1d8>
 400cb64:	d8001515 	stw	zero,84(sp)
 400cb68:	d8001f15 	stw	zero,124(sp)
 400cb6c:	d8001815 	stw	zero,96(sp)
 400cb70:	00c00044 	movi	r3,1
 400cb74:	d9001917 	ldw	r4,100(sp)
 400cb78:	2080004c 	andi	r2,r4,1
 400cb7c:	1000b51e 	bne	r2,zero,400ce54 <__gxx_personality_sj0+0x40c>
 400cb80:	d9001917 	ldw	r4,100(sp)
 400cb84:	2080020c 	andi	r2,r4,8
 400cb88:	1000b71e 	bne	r2,zero,400ce68 <__gxx_personality_sj0+0x420>
 400cb8c:	d9c01c17 	ldw	r7,112(sp)
 400cb90:	3800b826 	beq	r7,zero,400ce74 <__gxx_personality_sj0+0x42c>
 400cb94:	00800044 	movi	r2,1
 400cb98:	1880b526 	beq	r3,r2,400ce70 <__gxx_personality_sj0+0x428>
 400cb9c:	d9c01517 	ldw	r7,84(sp)
 400cba0:	3800f516 	blt	r7,zero,400cf78 <__gxx_personality_sj0+0x530>
 400cba4:	d9002417 	ldw	r4,144(sp)
 400cba8:	d9802317 	ldw	r6,140(sp)
 400cbac:	00bfffc4 	movi	r2,-1
 400cbb0:	000b883a 	mov	r5,zero
 400cbb4:	d8800915 	stw	r2,36(sp)
 400cbb8:	400e8a00 	call	400e8a0 <_Unwind_SetGR>
 400cbbc:	d9801517 	ldw	r6,84(sp)
 400cbc0:	d9002417 	ldw	r4,144(sp)
 400cbc4:	01400044 	movi	r5,1
 400cbc8:	400e8a00 	call	400e8a0 <_Unwind_SetGR>
 400cbcc:	d9002417 	ldw	r4,144(sp)
 400cbd0:	d9401f17 	ldw	r5,124(sp)
 400cbd4:	400e8ec0 	call	400e8ec <_Unwind_SetIP>
 400cbd8:	010001c4 	movi	r4,7
 400cbdc:	d9001515 	stw	r4,84(sp)
 400cbe0:	003fb406 	br	400cab4 <__alt_mem_onchip_memory2_0+0xfc00b814>
 400cbe4:	000f883a 	mov	r7,zero
 400cbe8:	000d883a 	mov	r6,zero
 400cbec:	19000003 	ldbu	r4,0(r3)
 400cbf0:	18c00044 	addi	r3,r3,1
 400cbf4:	d8c01515 	stw	r3,84(sp)
 400cbf8:	21401fcc 	andi	r5,r4,127
 400cbfc:	298a983a 	sll	r5,r5,r6
 400cc00:	21003fcc 	andi	r4,r4,255
 400cc04:	2100201c 	xori	r4,r4,128
 400cc08:	213fe004 	addi	r4,r4,-128
 400cc0c:	394eb03a 	or	r7,r7,r5
 400cc10:	318001c4 	addi	r6,r6,7
 400cc14:	203ff516 	blt	r4,zero,400cbec <__alt_mem_onchip_memory2_0+0xfc00b94c>
 400cc18:	10bfffc4 	addi	r2,r2,-1
 400cc1c:	10003226 	beq	r2,zero,400cce8 <__gxx_personality_sj0+0x2a0>
 400cc20:	d9c01517 	ldw	r7,84(sp)
 400cc24:	0011883a 	mov	r8,zero
 400cc28:	000d883a 	mov	r6,zero
 400cc2c:	39000003 	ldbu	r4,0(r7)
 400cc30:	38c00044 	addi	r3,r7,1
 400cc34:	180f883a 	mov	r7,r3
 400cc38:	21401fcc 	andi	r5,r4,127
 400cc3c:	298a983a 	sll	r5,r5,r6
 400cc40:	21003fcc 	andi	r4,r4,255
 400cc44:	2100201c 	xori	r4,r4,128
 400cc48:	213fe004 	addi	r4,r4,-128
 400cc4c:	4150b03a 	or	r8,r8,r5
 400cc50:	318001c4 	addi	r6,r6,7
 400cc54:	203ff516 	blt	r4,zero,400cc2c <__alt_mem_onchip_memory2_0+0xfc00b98c>
 400cc58:	003fe206 	br	400cbe4 <__alt_mem_onchip_memory2_0+0xfc00b944>
 400cc5c:	d9001c17 	ldw	r4,112(sp)
 400cc60:	203faa1e 	bne	r4,zero,400cb0c <__alt_mem_onchip_memory2_0+0xfc00b86c>
 400cc64:	d9c01517 	ldw	r7,84(sp)
 400cc68:	d8801b17 	ldw	r2,108(sp)
 400cc6c:	38bfa736 	bltu	r7,r2,400cb0c <__alt_mem_onchip_memory2_0+0xfc00b86c>
 400cc70:	d8c02317 	ldw	r3,140(sp)
 400cc74:	18fffe17 	ldw	r3,-8(r3)
 400cc78:	d8c01f15 	stw	r3,124(sp)
 400cc7c:	18008226 	beq	r3,zero,400ce88 <__gxx_personality_sj0+0x440>
 400cc80:	d9002317 	ldw	r4,140(sp)
 400cc84:	d9c02317 	ldw	r7,140(sp)
 400cc88:	213ffb17 	ldw	r4,-20(r4)
 400cc8c:	39fffd17 	ldw	r7,-12(r7)
 400cc90:	d9001515 	stw	r4,84(sp)
 400cc94:	d9c01a15 	stw	r7,104(sp)
 400cc98:	d8801517 	ldw	r2,84(sp)
 400cc9c:	103fc10e 	bge	r2,zero,400cba4 <__alt_mem_onchip_memory2_0+0xfc00b904>
 400cca0:	d9002417 	ldw	r4,144(sp)
 400cca4:	d9401a17 	ldw	r5,104(sp)
 400cca8:	d80d883a 	mov	r6,sp
 400ccac:	00bfffc4 	movi	r2,-1
 400ccb0:	d8800915 	stw	r2,36(sp)
 400ccb4:	400c5b80 	call	400c5b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400ccb8:	d9402417 	ldw	r5,144(sp)
 400ccbc:	d9000503 	ldbu	r4,20(sp)
 400ccc0:	400c52c0 	call	400c52c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400ccc4:	d9000503 	ldbu	r4,20(sp)
 400ccc8:	d9402417 	ldw	r5,144(sp)
 400cccc:	d8800215 	stw	r2,8(sp)
 400ccd0:	400c52c0 	call	400c52c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400ccd4:	d8c02317 	ldw	r3,140(sp)
 400ccd8:	18bffe15 	stw	r2,-8(r3)
 400ccdc:	003fb106 	br	400cba4 <__alt_mem_onchip_memory2_0+0xfc00b904>
 400cce0:	10bfffc4 	addi	r2,r2,-1
 400cce4:	003f9d06 	br	400cb5c <__alt_mem_onchip_memory2_0+0xfc00b8bc>
 400cce8:	42000044 	addi	r8,r8,1
 400ccec:	da001f15 	stw	r8,124(sp)
 400ccf0:	38005326 	beq	r7,zero,400ce40 <__gxx_personality_sj0+0x3f8>
 400ccf4:	d8800417 	ldw	r2,16(sp)
 400ccf8:	39ffffc4 	addi	r7,r7,-1
 400ccfc:	11c5883a 	add	r2,r2,r7
 400cd00:	d8801815 	stw	r2,96(sp)
 400cd04:	40005026 	beq	r8,zero,400ce48 <__gxx_personality_sj0+0x400>
 400cd08:	10007426 	beq	r2,zero,400cedc <__gxx_personality_sj0+0x494>
 400cd0c:	d8801917 	ldw	r2,100(sp)
 400cd10:	1080020c 	andi	r2,r2,8
 400cd14:	d8802015 	stw	r2,128(sp)
 400cd18:	1000a21e 	bne	r2,zero,400cfa4 <__gxx_personality_sj0+0x55c>
 400cd1c:	d8c01c17 	ldw	r3,112(sp)
 400cd20:	1800b026 	beq	r3,zero,400cfe4 <__gxx_personality_sj0+0x59c>
 400cd24:	01c100f4 	movhi	r7,1027
 400cd28:	39eb8004 	addi	r7,r7,-20992
 400cd2c:	d9c01e15 	stw	r7,120(sp)
 400cd30:	d8001d05 	stb	zero,116(sp)
 400cd34:	d8c01817 	ldw	r3,96(sp)
 400cd38:	d8001515 	stw	zero,84(sp)
 400cd3c:	0009883a 	mov	r4,zero
 400cd40:	19400003 	ldbu	r5,0(r3)
 400cd44:	18800044 	addi	r2,r3,1
 400cd48:	d9c01517 	ldw	r7,84(sp)
 400cd4c:	28c01fcc 	andi	r3,r5,127
 400cd50:	1906983a 	sll	r3,r3,r4
 400cd54:	29803fcc 	andi	r6,r5,255
 400cd58:	3180201c 	xori	r6,r6,128
 400cd5c:	38ceb03a 	or	r7,r7,r3
 400cd60:	d8801715 	stw	r2,92(sp)
 400cd64:	31bfe004 	addi	r6,r6,-128
 400cd68:	d9c01515 	stw	r7,84(sp)
 400cd6c:	210001c4 	addi	r4,r4,7
 400cd70:	1007883a 	mov	r3,r2
 400cd74:	303ff216 	blt	r6,zero,400cd40 <__alt_mem_onchip_memory2_0+0xfc00baa0>
 400cd78:	00c007c4 	movi	r3,31
 400cd7c:	19000836 	bltu	r3,r4,400cda0 <__gxx_personality_sj0+0x358>
 400cd80:	2940100c 	andi	r5,r5,64
 400cd84:	28000626 	beq	r5,zero,400cda0 <__gxx_personality_sj0+0x358>
 400cd88:	01c00044 	movi	r7,1
 400cd8c:	3908983a 	sll	r4,r7,r4
 400cd90:	d8c01517 	ldw	r3,84(sp)
 400cd94:	0109c83a 	sub	r4,zero,r4
 400cd98:	1906b03a 	or	r3,r3,r4
 400cd9c:	d8c01515 	stw	r3,84(sp)
 400cda0:	d8001615 	stw	zero,88(sp)
 400cda4:	0009883a 	mov	r4,zero
 400cda8:	11400003 	ldbu	r5,0(r2)
 400cdac:	d9c01617 	ldw	r7,88(sp)
 400cdb0:	10800044 	addi	r2,r2,1
 400cdb4:	28c01fcc 	andi	r3,r5,127
 400cdb8:	1906983a 	sll	r3,r3,r4
 400cdbc:	29803fcc 	andi	r6,r5,255
 400cdc0:	3180201c 	xori	r6,r6,128
 400cdc4:	38ceb03a 	or	r7,r7,r3
 400cdc8:	31bfe004 	addi	r6,r6,-128
 400cdcc:	d9c01615 	stw	r7,88(sp)
 400cdd0:	210001c4 	addi	r4,r4,7
 400cdd4:	303ff416 	blt	r6,zero,400cda8 <__alt_mem_onchip_memory2_0+0xfc00bb08>
 400cdd8:	008007c4 	movi	r2,31
 400cddc:	11000736 	bltu	r2,r4,400cdfc <__gxx_personality_sj0+0x3b4>
 400cde0:	2940100c 	andi	r5,r5,64
 400cde4:	28000526 	beq	r5,zero,400cdfc <__gxx_personality_sj0+0x3b4>
 400cde8:	00c00044 	movi	r3,1
 400cdec:	1908983a 	sll	r4,r3,r4
 400cdf0:	0109c83a 	sub	r4,zero,r4
 400cdf4:	390eb03a 	or	r7,r7,r4
 400cdf8:	d9c01615 	stw	r7,88(sp)
 400cdfc:	d9001517 	ldw	r4,84(sp)
 400ce00:	20003c26 	beq	r4,zero,400cef4 <__gxx_personality_sj0+0x4ac>
 400ce04:	01003e0e 	bge	zero,r4,400cf00 <__gxx_personality_sj0+0x4b8>
 400ce08:	01ffffc4 	movi	r7,-1
 400ce0c:	200b883a 	mov	r5,r4
 400ce10:	d809883a 	mov	r4,sp
 400ce14:	d9c00915 	stw	r7,36(sp)
 400ce18:	400c4d80 	call	400c4d8 <_ZL15get_ttype_entryP16lsda_header_infom>
 400ce1c:	10005f26 	beq	r2,zero,400cf9c <__gxx_personality_sj0+0x554>
 400ce20:	d8c01e17 	ldw	r3,120(sp)
 400ce24:	1800571e 	bne	r3,zero,400cf84 <__gxx_personality_sj0+0x53c>
 400ce28:	d9001617 	ldw	r4,88(sp)
 400ce2c:	20002926 	beq	r4,zero,400ced4 <__gxx_personality_sj0+0x48c>
 400ce30:	d9c01717 	ldw	r7,92(sp)
 400ce34:	390f883a 	add	r7,r7,r4
 400ce38:	d9c01815 	stw	r7,96(sp)
 400ce3c:	003fbd06 	br	400cd34 <__alt_mem_onchip_memory2_0+0xfc00ba94>
 400ce40:	d8c01f17 	ldw	r3,124(sp)
 400ce44:	1800251e 	bne	r3,zero,400cedc <__gxx_personality_sj0+0x494>
 400ce48:	01000204 	movi	r4,8
 400ce4c:	d9001515 	stw	r4,84(sp)
 400ce50:	003f1806 	br	400cab4 <__alt_mem_onchip_memory2_0+0xfc00b814>
 400ce54:	d8801c17 	ldw	r2,112(sp)
 400ce58:	10000d26 	beq	r2,zero,400ce90 <__gxx_personality_sj0+0x448>
 400ce5c:	00800184 	movi	r2,6
 400ce60:	d8801515 	stw	r2,84(sp)
 400ce64:	003f1306 	br	400cab4 <__alt_mem_onchip_memory2_0+0xfc00b814>
 400ce68:	00800044 	movi	r2,1
 400ce6c:	18bf4d1e 	bne	r3,r2,400cba4 <__alt_mem_onchip_memory2_0+0xfc00b904>
 400ce70:	400c1a00 	call	400c1a0 <_ZSt9terminatev>
 400ce74:	d9001b17 	ldw	r4,108(sp)
 400ce78:	00800044 	movi	r2,1
 400ce7c:	113f4536 	bltu	r2,r4,400cb94 <__alt_mem_onchip_memory2_0+0xfc00b8f4>
 400ce80:	00800044 	movi	r2,1
 400ce84:	18bf841e 	bne	r3,r2,400cc98 <__alt_mem_onchip_memory2_0+0xfc00b9f8>
 400ce88:	d9002317 	ldw	r4,140(sp)
 400ce8c:	400d8240 	call	400d824 <__cxa_call_terminate>
 400ce90:	d8c01b17 	ldw	r3,108(sp)
 400ce94:	00800044 	movi	r2,1
 400ce98:	10fff036 	bltu	r2,r3,400ce5c <__alt_mem_onchip_memory2_0+0xfc00bbbc>
 400ce9c:	d9002317 	ldw	r4,140(sp)
 400cea0:	d8801817 	ldw	r2,96(sp)
 400cea4:	d9c01517 	ldw	r7,84(sp)
 400cea8:	d8c01a17 	ldw	r3,104(sp)
 400ceac:	20bffc15 	stw	r2,-16(r4)
 400ceb0:	d8800717 	ldw	r2,28(sp)
 400ceb4:	21fffb15 	stw	r7,-20(r4)
 400ceb8:	d9c01f17 	ldw	r7,124(sp)
 400cebc:	20bfff15 	stw	r2,-4(r4)
 400cec0:	00800184 	movi	r2,6
 400cec4:	20fffd15 	stw	r3,-12(r4)
 400cec8:	21fffe15 	stw	r7,-8(r4)
 400cecc:	d8801515 	stw	r2,84(sp)
 400ced0:	003ef806 	br	400cab4 <__alt_mem_onchip_memory2_0+0xfc00b814>
 400ced4:	d8801d03 	ldbu	r2,116(sp)
 400ced8:	103fdb26 	beq	r2,zero,400ce48 <__alt_mem_onchip_memory2_0+0xfc00bba8>
 400cedc:	d8c01917 	ldw	r3,100(sp)
 400cee0:	1880004c 	andi	r2,r3,1
 400cee4:	103fd81e 	bne	r2,zero,400ce48 <__alt_mem_onchip_memory2_0+0xfc00bba8>
 400cee8:	d8001515 	stw	zero,84(sp)
 400ceec:	00c00084 	movi	r3,2
 400cef0:	003f2306 	br	400cb80 <__alt_mem_onchip_memory2_0+0xfc00b8e0>
 400cef4:	00c00044 	movi	r3,1
 400cef8:	d8c01d05 	stb	r3,116(sp)
 400cefc:	003fca06 	br	400ce28 <__alt_mem_onchip_memory2_0+0xfc00bb88>
 400cf00:	d9001e17 	ldw	r4,120(sp)
 400cf04:	20000426 	beq	r4,zero,400cf18 <__gxx_personality_sj0+0x4d0>
 400cf08:	d9c02017 	ldw	r7,128(sp)
 400cf0c:	3800021e 	bne	r7,zero,400cf18 <__gxx_personality_sj0+0x4d0>
 400cf10:	d8801c17 	ldw	r2,112(sp)
 400cf14:	10002726 	beq	r2,zero,400cfb4 <__gxx_personality_sj0+0x56c>
 400cf18:	d8801517 	ldw	r2,84(sp)
 400cf1c:	000d883a 	mov	r6,zero
 400cf20:	000b883a 	mov	r5,zero
 400cf24:	0088303a 	nor	r4,zero,r2
 400cf28:	d8800317 	ldw	r2,12(sp)
 400cf2c:	1109883a 	add	r4,r2,r4
 400cf30:	20800003 	ldbu	r2,0(r4)
 400cf34:	21000044 	addi	r4,r4,1
 400cf38:	10c01fcc 	andi	r3,r2,127
 400cf3c:	1946983a 	sll	r3,r3,r5
 400cf40:	10803fcc 	andi	r2,r2,255
 400cf44:	1080201c 	xori	r2,r2,128
 400cf48:	10bfe004 	addi	r2,r2,-128
 400cf4c:	30ccb03a 	or	r6,r6,r3
 400cf50:	294001c4 	addi	r5,r5,7
 400cf54:	103ff616 	blt	r2,zero,400cf30 <__alt_mem_onchip_memory2_0+0xfc00bc90>
 400cf58:	3005003a 	cmpeq	r2,r6,zero
 400cf5c:	10803fcc 	andi	r2,r2,255
 400cf60:	103fb126 	beq	r2,zero,400ce28 <__alt_mem_onchip_memory2_0+0xfc00bb88>
 400cf64:	d9c01917 	ldw	r7,100(sp)
 400cf68:	3880004c 	andi	r2,r7,1
 400cf6c:	103fb91e 	bne	r2,zero,400ce54 <__alt_mem_onchip_memory2_0+0xfc00bbb4>
 400cf70:	d8802017 	ldw	r2,128(sp)
 400cf74:	10002d26 	beq	r2,zero,400d02c <__gxx_personality_sj0+0x5e4>
 400cf78:	00800044 	movi	r2,1
 400cf7c:	d8800915 	stw	r2,36(sp)
 400cf80:	400c1c80 	call	400c1c8 <_ZSt10unexpectedv>
 400cf84:	d9800704 	addi	r6,sp,28
 400cf88:	180b883a 	mov	r5,r3
 400cf8c:	1009883a 	mov	r4,r2
 400cf90:	400c6ec0 	call	400c6ec <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400cf94:	10803fcc 	andi	r2,r2,255
 400cf98:	103fa326 	beq	r2,zero,400ce28 <__alt_mem_onchip_memory2_0+0xfc00bb88>
 400cf9c:	00c000c4 	movi	r3,3
 400cfa0:	003ef406 	br	400cb74 <__alt_mem_onchip_memory2_0+0xfc00b8d4>
 400cfa4:	010100f4 	movhi	r4,1027
 400cfa8:	212b7e04 	addi	r4,r4,-21000
 400cfac:	d9001e15 	stw	r4,120(sp)
 400cfb0:	003f5f06 	br	400cd30 <__alt_mem_onchip_memory2_0+0xfc00ba90>
 400cfb4:	d9001b17 	ldw	r4,108(sp)
 400cfb8:	00c00044 	movi	r3,1
 400cfbc:	193fd636 	bltu	r3,r4,400cf18 <__alt_mem_onchip_memory2_0+0xfc00bc78>
 400cfc0:	01ffffc4 	movi	r7,-1
 400cfc4:	d9c00915 	stw	r7,36(sp)
 400cfc8:	d9800717 	ldw	r6,28(sp)
 400cfcc:	d9c01517 	ldw	r7,84(sp)
 400cfd0:	d9401e17 	ldw	r5,120(sp)
 400cfd4:	d809883a 	mov	r4,sp
 400cfd8:	400c9a00 	call	400c9a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400cfdc:	1080005c 	xori	r2,r2,1
 400cfe0:	003fde06 	br	400cf5c <__alt_mem_onchip_memory2_0+0xfc00bcbc>
 400cfe4:	d9001b17 	ldw	r4,108(sp)
 400cfe8:	00800044 	movi	r2,1
 400cfec:	113f4d36 	bltu	r2,r4,400cd24 <__alt_mem_onchip_memory2_0+0xfc00ba84>
 400cff0:	d9c02317 	ldw	r7,140(sp)
 400cff4:	38800017 	ldw	r2,0(r7)
 400cff8:	1080004c 	andi	r2,r2,1
 400cffc:	1000061e 	bne	r2,zero,400d018 <__gxx_personality_sj0+0x5d0>
 400d000:	d8c02317 	ldw	r3,140(sp)
 400d004:	18800504 	addi	r2,r3,20
 400d008:	d8800715 	stw	r2,28(sp)
 400d00c:	10bff017 	ldw	r2,-64(r2)
 400d010:	d8801e15 	stw	r2,120(sp)
 400d014:	003f4606 	br	400cd30 <__alt_mem_onchip_memory2_0+0xfc00ba90>
 400d018:	38bff517 	ldw	r2,-44(r7)
 400d01c:	003ffa06 	br	400d008 <__alt_mem_onchip_memory2_0+0xfc00bd68>
 400d020:	d9000a17 	ldw	r4,40(sp)
 400d024:	400d3d80 	call	400d3d8 <__cxa_begin_catch>
 400d028:	003f9106 	br	400ce70 <__alt_mem_onchip_memory2_0+0xfc00bbd0>
 400d02c:	d9c01c17 	ldw	r7,112(sp)
 400d030:	383eda1e 	bne	r7,zero,400cb9c <__alt_mem_onchip_memory2_0+0xfc00b8fc>
 400d034:	d8c01b17 	ldw	r3,108(sp)
 400d038:	00800044 	movi	r2,1
 400d03c:	10fed736 	bltu	r2,r3,400cb9c <__alt_mem_onchip_memory2_0+0xfc00b8fc>
 400d040:	00c000c4 	movi	r3,3
 400d044:	003f8e06 	br	400ce80 <__alt_mem_onchip_memory2_0+0xfc00bbe0>

0400d048 <__cxa_call_unexpected>:
 400d048:	00810074 	movhi	r2,1025
 400d04c:	deffe604 	addi	sp,sp,-104
 400d050:	10b29204 	addi	r2,r2,-13752
 400d054:	d8800d15 	stw	r2,52(sp)
 400d058:	008100b4 	movhi	r2,1026
 400d05c:	10827f04 	addi	r2,r2,2556
 400d060:	d8800e15 	stw	r2,56(sp)
 400d064:	d8800104 	addi	r2,sp,4
 400d068:	d8800f15 	stw	r2,60(sp)
 400d06c:	00810074 	movhi	r2,1025
 400d070:	10b43504 	addi	r2,r2,-12076
 400d074:	d9001415 	stw	r4,80(sp)
 400d078:	d9000704 	addi	r4,sp,28
 400d07c:	dfc01915 	stw	ra,100(sp)
 400d080:	d8801015 	stw	r2,64(sp)
 400d084:	df001815 	stw	fp,96(sp)
 400d088:	dec01115 	stw	sp,68(sp)
 400d08c:	400e8400 	call	400e840 <_Unwind_SjLj_Register>
 400d090:	d9001417 	ldw	r4,80(sp)
 400d094:	400d3d80 	call	400d3d8 <__cxa_begin_catch>
 400d098:	d8c01417 	ldw	r3,80(sp)
 400d09c:	18bffe17 	ldw	r2,-8(r3)
 400d0a0:	193ff717 	ldw	r4,-36(r3)
 400d0a4:	18fffd17 	ldw	r3,-12(r3)
 400d0a8:	d8800315 	stw	r2,12(sp)
 400d0ac:	d8c01615 	stw	r3,88(sp)
 400d0b0:	d8c01417 	ldw	r3,80(sp)
 400d0b4:	18fffb17 	ldw	r3,-20(r3)
 400d0b8:	d8c01515 	stw	r3,84(sp)
 400d0bc:	d8c01417 	ldw	r3,80(sp)
 400d0c0:	18fff817 	ldw	r3,-32(r3)
 400d0c4:	d8c01415 	stw	r3,80(sp)
 400d0c8:	00c00044 	movi	r3,1
 400d0cc:	d8c00815 	stw	r3,32(sp)
 400d0d0:	400c1b80 	call	400c1b8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 400d0d4:	d8c00917 	ldw	r3,36(sp)
 400d0d8:	d8800817 	ldw	r2,32(sp)
 400d0dc:	d8c01715 	stw	r3,92(sp)
 400d0e0:	10000a26 	beq	r2,zero,400d10c <__cxa_call_unexpected+0xc4>
 400d0e4:	10bfffc4 	addi	r2,r2,-1
 400d0e8:	10000126 	beq	r2,zero,400d0f0 <__cxa_call_unexpected+0xa8>
 400d0ec:	003b68fa 	trap	3
 400d0f0:	d8000815 	stw	zero,32(sp)
 400d0f4:	400d48c0 	call	400d48c <__cxa_end_catch>
 400d0f8:	400d48c0 	call	400d48c <__cxa_end_catch>
 400d0fc:	d9001717 	ldw	r4,92(sp)
 400d100:	00bfffc4 	movi	r2,-1
 400d104:	d8800815 	stw	r2,32(sp)
 400d108:	400ea3c0 	call	400ea3c <_Unwind_SjLj_Resume>
 400d10c:	d9001717 	ldw	r4,92(sp)
 400d110:	400d3d80 	call	400d3d8 <__cxa_begin_catch>
 400d114:	400d87c0 	call	400d87c <__cxa_get_globals_fast>
 400d118:	10800017 	ldw	r2,0(r2)
 400d11c:	10c00b17 	ldw	r3,44(r2)
 400d120:	18c0004c 	andi	r3,r3,1
 400d124:	18001e26 	beq	r3,zero,400d1a0 <__cxa_call_unexpected+0x158>
 400d128:	10800017 	ldw	r2,0(r2)
 400d12c:	d8801715 	stw	r2,92(sp)
 400d130:	d8801517 	ldw	r2,84(sp)
 400d134:	00802b0e 	bge	zero,r2,400d1e4 <__cxa_call_unexpected+0x19c>
 400d138:	d8c01717 	ldw	r3,92(sp)
 400d13c:	d8800317 	ldw	r2,12(sp)
 400d140:	d9c01517 	ldw	r7,84(sp)
 400d144:	193ff017 	ldw	r4,-64(r3)
 400d148:	d9801617 	ldw	r6,88(sp)
 400d14c:	d8800015 	stw	r2,0(sp)
 400d150:	180b883a 	mov	r5,r3
 400d154:	00800084 	movi	r2,2
 400d158:	d8800815 	stw	r2,32(sp)
 400d15c:	400c7740 	call	400c774 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400d160:	10803fcc 	andi	r2,r2,255
 400d164:	10001e1e 	bne	r2,zero,400d1e0 <__cxa_call_unexpected+0x198>
 400d168:	d8800317 	ldw	r2,12(sp)
 400d16c:	d9c01517 	ldw	r7,84(sp)
 400d170:	d9801617 	ldw	r6,88(sp)
 400d174:	010100b4 	movhi	r4,1026
 400d178:	d8800015 	stw	r2,0(sp)
 400d17c:	211e2a04 	addi	r4,r4,30888
 400d180:	00800084 	movi	r2,2
 400d184:	000b883a 	mov	r5,zero
 400d188:	d8800815 	stw	r2,32(sp)
 400d18c:	400c7740 	call	400c774 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400d190:	10803fcc 	andi	r2,r2,255
 400d194:	1000051e 	bne	r2,zero,400d1ac <__cxa_call_unexpected+0x164>
 400d198:	d9001417 	ldw	r4,80(sp)
 400d19c:	400c0e00 	call	400c0e0 <_ZN10__cxxabiv111__terminateEPFvvE>
 400d1a0:	10801004 	addi	r2,r2,64
 400d1a4:	d8801715 	stw	r2,92(sp)
 400d1a8:	003fe106 	br	400d130 <__alt_mem_onchip_memory2_0+0xfc00be90>
 400d1ac:	01000104 	movi	r4,4
 400d1b0:	400d6c00 	call	400d6c0 <__cxa_allocate_exception>
 400d1b4:	00c100b4 	movhi	r3,1026
 400d1b8:	18de4504 	addi	r3,r3,30996
 400d1bc:	01810074 	movhi	r6,1025
 400d1c0:	014100b4 	movhi	r5,1026
 400d1c4:	10c00015 	stw	r3,0(r2)
 400d1c8:	31b62604 	addi	r6,r6,-10088
 400d1cc:	00c00084 	movi	r3,2
 400d1d0:	295e2a04 	addi	r5,r5,30888
 400d1d4:	1009883a 	mov	r4,r2
 400d1d8:	d8c00815 	stw	r3,32(sp)
 400d1dc:	400d2bc0 	call	400d2bc <__cxa_throw>
 400d1e0:	400d34c0 	call	400d34c <__cxa_rethrow>
 400d1e4:	d9401617 	ldw	r5,88(sp)
 400d1e8:	00800084 	movi	r2,2
 400d1ec:	d9800104 	addi	r6,sp,4
 400d1f0:	0009883a 	mov	r4,zero
 400d1f4:	d8800815 	stw	r2,32(sp)
 400d1f8:	400c5b80 	call	400c5b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400d1fc:	d9801717 	ldw	r6,92(sp)
 400d200:	d9c01517 	ldw	r7,84(sp)
 400d204:	d9000104 	addi	r4,sp,4
 400d208:	317ff017 	ldw	r5,-64(r6)
 400d20c:	400c9a00 	call	400c9a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400d210:	10803fcc 	andi	r2,r2,255
 400d214:	1000171e 	bne	r2,zero,400d274 <__cxa_call_unexpected+0x22c>
 400d218:	d9c01517 	ldw	r7,84(sp)
 400d21c:	014100b4 	movhi	r5,1026
 400d220:	00800084 	movi	r2,2
 400d224:	295e2a04 	addi	r5,r5,30888
 400d228:	000d883a 	mov	r6,zero
 400d22c:	d9000104 	addi	r4,sp,4
 400d230:	d8800815 	stw	r2,32(sp)
 400d234:	400c9a00 	call	400c9a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400d238:	10803fcc 	andi	r2,r2,255
 400d23c:	103fd626 	beq	r2,zero,400d198 <__alt_mem_onchip_memory2_0+0xfc00bef8>
 400d240:	01000104 	movi	r4,4
 400d244:	400d6c00 	call	400d6c0 <__cxa_allocate_exception>
 400d248:	00c100b4 	movhi	r3,1026
 400d24c:	18de4504 	addi	r3,r3,30996
 400d250:	01810074 	movhi	r6,1025
 400d254:	014100b4 	movhi	r5,1026
 400d258:	10c00015 	stw	r3,0(r2)
 400d25c:	31b62604 	addi	r6,r6,-10088
 400d260:	00c00084 	movi	r3,2
 400d264:	295e2a04 	addi	r5,r5,30888
 400d268:	1009883a 	mov	r4,r2
 400d26c:	d8c00815 	stw	r3,32(sp)
 400d270:	400d2bc0 	call	400d2bc <__cxa_throw>
 400d274:	400d34c0 	call	400d34c <__cxa_rethrow>

0400d278 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 400d278:	defffe04 	addi	sp,sp,-8
 400d27c:	dfc00115 	stw	ra,4(sp)
 400d280:	dc000015 	stw	r16,0(sp)
 400d284:	00800044 	movi	r2,1
 400d288:	11000a36 	bltu	r2,r4,400d2b4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
 400d28c:	28bff617 	ldw	r2,-40(r5)
 400d290:	2c000504 	addi	r16,r5,20
 400d294:	10000226 	beq	r2,zero,400d2a0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
 400d298:	8009883a 	mov	r4,r16
 400d29c:	103ee83a 	callr	r2
 400d2a0:	8009883a 	mov	r4,r16
 400d2a4:	dfc00117 	ldw	ra,4(sp)
 400d2a8:	dc000017 	ldw	r16,0(sp)
 400d2ac:	dec00204 	addi	sp,sp,8
 400d2b0:	400d7201 	jmpi	400d720 <__cxa_free_exception>
 400d2b4:	293ff817 	ldw	r4,-32(r5)
 400d2b8:	400c0e00 	call	400c0e0 <_ZN10__cxxabiv111__terminateEPFvvE>

0400d2bc <__cxa_throw>:
 400d2bc:	defffb04 	addi	sp,sp,-20
 400d2c0:	dfc00415 	stw	ra,16(sp)
 400d2c4:	dcc00315 	stw	r19,12(sp)
 400d2c8:	dc800215 	stw	r18,8(sp)
 400d2cc:	2827883a 	mov	r19,r5
 400d2d0:	3025883a 	mov	r18,r6
 400d2d4:	dc400115 	stw	r17,4(sp)
 400d2d8:	dc000015 	stw	r16,0(sp)
 400d2dc:	2021883a 	mov	r16,r4
 400d2e0:	400d8880 	call	400d888 <__cxa_get_globals>
 400d2e4:	10c00117 	ldw	r3,4(r2)
 400d2e8:	847ffb04 	addi	r17,r16,-20
 400d2ec:	18c00044 	addi	r3,r3,1
 400d2f0:	10c00115 	stw	r3,4(r2)
 400d2f4:	00800044 	movi	r2,1
 400d2f8:	80bfef15 	stw	r2,-68(r16)
 400d2fc:	84fff015 	stw	r19,-64(r16)
 400d300:	84bff115 	stw	r18,-60(r16)
 400d304:	400c2180 	call	400c218 <_ZSt14get_unexpectedv>
 400d308:	80bff215 	stw	r2,-56(r16)
 400d30c:	400c1f40 	call	400c1f4 <_ZSt13get_terminatev>
 400d310:	80bff315 	stw	r2,-52(r16)
 400d314:	0090caf4 	movhi	r2,17195
 400d318:	108ac004 	addi	r2,r2,11008
 400d31c:	80bffb15 	stw	r2,-20(r16)
 400d320:	0091d3b4 	movhi	r2,18254
 400d324:	109550c4 	addi	r2,r2,21827
 400d328:	80bffc15 	stw	r2,-16(r16)
 400d32c:	00810074 	movhi	r2,1025
 400d330:	10b49e04 	addi	r2,r2,-11656
 400d334:	8809883a 	mov	r4,r17
 400d338:	80bffd15 	stw	r2,-12(r16)
 400d33c:	400e9280 	call	400e928 <_Unwind_SjLj_RaiseException>
 400d340:	8809883a 	mov	r4,r17
 400d344:	400d3d80 	call	400d3d8 <__cxa_begin_catch>
 400d348:	400c1a00 	call	400c1a0 <_ZSt9terminatev>

0400d34c <__cxa_rethrow>:
 400d34c:	defffe04 	addi	sp,sp,-8
 400d350:	dfc00115 	stw	ra,4(sp)
 400d354:	dc000015 	stw	r16,0(sp)
 400d358:	400d8880 	call	400d888 <__cxa_get_globals>
 400d35c:	10c00117 	ldw	r3,4(r2)
 400d360:	11000017 	ldw	r4,0(r2)
 400d364:	18c00044 	addi	r3,r3,1
 400d368:	10c00115 	stw	r3,4(r2)
 400d36c:	20001126 	beq	r4,zero,400d3b4 <__cxa_rethrow+0x68>
 400d370:	21400b17 	ldw	r5,44(r4)
 400d374:	01ef3574 	movhi	r7,48341
 400d378:	39f54004 	addi	r7,r7,-11008
 400d37c:	29cf883a 	add	r7,r5,r7
 400d380:	20c00c17 	ldw	r3,48(r4)
 400d384:	394d803a 	cmpltu	r6,r7,r5
 400d388:	016e2cb4 	movhi	r5,47282
 400d38c:	296aaf04 	addi	r5,r5,-21828
 400d390:	1947883a 	add	r3,r3,r5
 400d394:	30c7883a 	add	r3,r6,r3
 400d398:	18000726 	beq	r3,zero,400d3b8 <__cxa_rethrow+0x6c>
 400d39c:	10000015 	stw	zero,0(r2)
 400d3a0:	24000b04 	addi	r16,r4,44
 400d3a4:	8009883a 	mov	r4,r16
 400d3a8:	400ea800 	call	400ea80 <_Unwind_SjLj_Resume_or_Rethrow>
 400d3ac:	8009883a 	mov	r4,r16
 400d3b0:	400d3d80 	call	400d3d8 <__cxa_begin_catch>
 400d3b4:	400c1a00 	call	400c1a0 <_ZSt9terminatev>
 400d3b8:	00c00044 	movi	r3,1
 400d3bc:	19fff736 	bltu	r3,r7,400d39c <__alt_mem_onchip_memory2_0+0xfc00c0fc>
 400d3c0:	20800517 	ldw	r2,20(r4)
 400d3c4:	0085c83a 	sub	r2,zero,r2
 400d3c8:	20800515 	stw	r2,20(r4)
 400d3cc:	003ff406 	br	400d3a0 <__alt_mem_onchip_memory2_0+0xfc00c100>

0400d3d0 <__cxa_get_exception_ptr>:
 400d3d0:	20bfff17 	ldw	r2,-4(r4)
 400d3d4:	f800283a 	ret

0400d3d8 <__cxa_begin_catch>:
 400d3d8:	defffe04 	addi	sp,sp,-8
 400d3dc:	dc000015 	stw	r16,0(sp)
 400d3e0:	dfc00115 	stw	ra,4(sp)
 400d3e4:	2021883a 	mov	r16,r4
 400d3e8:	400d8880 	call	400d888 <__cxa_get_globals>
 400d3ec:	81000017 	ldw	r4,0(r16)
 400d3f0:	80c00117 	ldw	r3,4(r16)
 400d3f4:	01af3574 	movhi	r6,48341
 400d3f8:	31b54004 	addi	r6,r6,-11008
 400d3fc:	016e2cb4 	movhi	r5,47282
 400d400:	296aaf04 	addi	r5,r5,-21828
 400d404:	218d883a 	add	r6,r4,r6
 400d408:	3109803a 	cmpltu	r4,r6,r4
 400d40c:	1947883a 	add	r3,r3,r5
 400d410:	20c7883a 	add	r3,r4,r3
 400d414:	817ff504 	addi	r5,r16,-44
 400d418:	11000017 	ldw	r4,0(r2)
 400d41c:	18000726 	beq	r3,zero,400d43c <__cxa_begin_catch+0x64>
 400d420:	2000191e 	bne	r4,zero,400d488 <__cxa_begin_catch+0xb0>
 400d424:	11400015 	stw	r5,0(r2)
 400d428:	0005883a 	mov	r2,zero
 400d42c:	dfc00117 	ldw	ra,4(sp)
 400d430:	dc000017 	ldw	r16,0(sp)
 400d434:	dec00204 	addi	sp,sp,8
 400d438:	f800283a 	ret
 400d43c:	01c00044 	movi	r7,1
 400d440:	39bff736 	bltu	r7,r6,400d420 <__alt_mem_onchip_memory2_0+0xfc00c180>
 400d444:	80fffa17 	ldw	r3,-24(r16)
 400d448:	18000d16 	blt	r3,zero,400d480 <__cxa_begin_catch+0xa8>
 400d44c:	18c00044 	addi	r3,r3,1
 400d450:	11800117 	ldw	r6,4(r2)
 400d454:	80fffa15 	stw	r3,-24(r16)
 400d458:	30ffffc4 	addi	r3,r6,-1
 400d45c:	10c00115 	stw	r3,4(r2)
 400d460:	21400226 	beq	r4,r5,400d46c <__cxa_begin_catch+0x94>
 400d464:	813ff915 	stw	r4,-28(r16)
 400d468:	11400015 	stw	r5,0(r2)
 400d46c:	80bfff17 	ldw	r2,-4(r16)
 400d470:	dfc00117 	ldw	ra,4(sp)
 400d474:	dc000017 	ldw	r16,0(sp)
 400d478:	dec00204 	addi	sp,sp,8
 400d47c:	f800283a 	ret
 400d480:	38c7c83a 	sub	r3,r7,r3
 400d484:	003ff206 	br	400d450 <__alt_mem_onchip_memory2_0+0xfc00c1b0>
 400d488:	400c1a00 	call	400c1a0 <_ZSt9terminatev>

0400d48c <__cxa_end_catch>:
 400d48c:	deffff04 	addi	sp,sp,-4
 400d490:	dfc00015 	stw	ra,0(sp)
 400d494:	400d87c0 	call	400d87c <__cxa_get_globals_fast>
 400d498:	11000017 	ldw	r4,0(r2)
 400d49c:	20001426 	beq	r4,zero,400d4f0 <__cxa_end_catch+0x64>
 400d4a0:	21400b17 	ldw	r5,44(r4)
 400d4a4:	01ef3574 	movhi	r7,48341
 400d4a8:	39f54004 	addi	r7,r7,-11008
 400d4ac:	29cf883a 	add	r7,r5,r7
 400d4b0:	20c00c17 	ldw	r3,48(r4)
 400d4b4:	394d803a 	cmpltu	r6,r7,r5
 400d4b8:	016e2cb4 	movhi	r5,47282
 400d4bc:	296aaf04 	addi	r5,r5,-21828
 400d4c0:	1947883a 	add	r3,r3,r5
 400d4c4:	30c7883a 	add	r3,r6,r3
 400d4c8:	18000c1e 	bne	r3,zero,400d4fc <__cxa_end_catch+0x70>
 400d4cc:	00c00044 	movi	r3,1
 400d4d0:	19c00a36 	bltu	r3,r7,400d4fc <__cxa_end_catch+0x70>
 400d4d4:	20c00517 	ldw	r3,20(r4)
 400d4d8:	18000d16 	blt	r3,zero,400d510 <__cxa_end_catch+0x84>
 400d4dc:	18ffffc4 	addi	r3,r3,-1
 400d4e0:	18001026 	beq	r3,zero,400d524 <__cxa_end_catch+0x98>
 400d4e4:	00bfffc4 	movi	r2,-1
 400d4e8:	18801426 	beq	r3,r2,400d53c <__cxa_end_catch+0xb0>
 400d4ec:	20c00515 	stw	r3,20(r4)
 400d4f0:	dfc00017 	ldw	ra,0(sp)
 400d4f4:	dec00104 	addi	sp,sp,4
 400d4f8:	f800283a 	ret
 400d4fc:	21000b04 	addi	r4,r4,44
 400d500:	10000015 	stw	zero,0(r2)
 400d504:	dfc00017 	ldw	ra,0(sp)
 400d508:	dec00104 	addi	sp,sp,4
 400d50c:	400eacc1 	jmpi	400eacc <_Unwind_DeleteException>
 400d510:	18c00044 	addi	r3,r3,1
 400d514:	183ff51e 	bne	r3,zero,400d4ec <__alt_mem_onchip_memory2_0+0xfc00c24c>
 400d518:	21400417 	ldw	r5,16(r4)
 400d51c:	11400015 	stw	r5,0(r2)
 400d520:	003ff206 	br	400d4ec <__alt_mem_onchip_memory2_0+0xfc00c24c>
 400d524:	20c00417 	ldw	r3,16(r4)
 400d528:	21000b04 	addi	r4,r4,44
 400d52c:	10c00015 	stw	r3,0(r2)
 400d530:	dfc00017 	ldw	ra,0(sp)
 400d534:	dec00104 	addi	sp,sp,4
 400d538:	400eacc1 	jmpi	400eacc <_Unwind_DeleteException>
 400d53c:	400c1a00 	call	400c1a0 <_ZSt9terminatev>

0400d540 <_ZSt18uncaught_exceptionv>:
 400d540:	deffff04 	addi	sp,sp,-4
 400d544:	dfc00015 	stw	ra,0(sp)
 400d548:	400d8880 	call	400d888 <__cxa_get_globals>
 400d54c:	10800117 	ldw	r2,4(r2)
 400d550:	1004c03a 	cmpne	r2,r2,zero
 400d554:	dfc00017 	ldw	ra,0(sp)
 400d558:	dec00104 	addi	sp,sp,4
 400d55c:	f800283a 	ret

0400d560 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 400d560:	018100f4 	movhi	r6,1027
 400d564:	31b85404 	addi	r6,r6,-7856
 400d568:	31400117 	ldw	r5,4(r6)
 400d56c:	223fff04 	addi	r8,r4,-4
 400d570:	227fff17 	ldw	r9,-4(r4)
 400d574:	28001326 	beq	r5,zero,400d5c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
 400d578:	424f883a 	add	r7,r8,r9
 400d57c:	29c01426 	beq	r5,r7,400d5d0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
 400d580:	28c00117 	ldw	r3,4(r5)
 400d584:	18001c26 	beq	r3,zero,400d5f8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
 400d588:	38c00336 	bltu	r7,r3,400d598 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 400d58c:	00001e06 	br	400d608 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
 400d590:	3880052e 	bgeu	r7,r2,400d5a8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
 400d594:	1007883a 	mov	r3,r2
 400d598:	18800117 	ldw	r2,4(r3)
 400d59c:	29800104 	addi	r6,r5,4
 400d5a0:	180b883a 	mov	r5,r3
 400d5a4:	103ffa1e 	bne	r2,zero,400d590 <__alt_mem_onchip_memory2_0+0xfc00c2f0>
 400d5a8:	19400017 	ldw	r5,0(r3)
 400d5ac:	194f883a 	add	r7,r3,r5
 400d5b0:	41c00e26 	beq	r8,r7,400d5ec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
 400d5b4:	20800015 	stw	r2,0(r4)
 400d5b8:	30800017 	ldw	r2,0(r6)
 400d5bc:	12000115 	stw	r8,4(r2)
 400d5c0:	f800283a 	ret
 400d5c4:	20000015 	stw	zero,0(r4)
 400d5c8:	32000115 	stw	r8,4(r6)
 400d5cc:	f800283a 	ret
 400d5d0:	28c00017 	ldw	r3,0(r5)
 400d5d4:	28800117 	ldw	r2,4(r5)
 400d5d8:	1a53883a 	add	r9,r3,r9
 400d5dc:	227fff15 	stw	r9,-4(r4)
 400d5e0:	20800015 	stw	r2,0(r4)
 400d5e4:	32000115 	stw	r8,4(r6)
 400d5e8:	f800283a 	ret
 400d5ec:	494b883a 	add	r5,r9,r5
 400d5f0:	19400015 	stw	r5,0(r3)
 400d5f4:	f800283a 	ret
 400d5f8:	0005883a 	mov	r2,zero
 400d5fc:	2807883a 	mov	r3,r5
 400d600:	31800104 	addi	r6,r6,4
 400d604:	003fe806 	br	400d5a8 <__alt_mem_onchip_memory2_0+0xfc00c308>
 400d608:	1805883a 	mov	r2,r3
 400d60c:	31800104 	addi	r6,r6,4
 400d610:	2807883a 	mov	r3,r5
 400d614:	003fe406 	br	400d5a8 <__alt_mem_onchip_memory2_0+0xfc00c308>

0400d618 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 400d618:	20800104 	addi	r2,r4,4
 400d61c:	00c001c4 	movi	r3,7
 400d620:	1880112e 	bgeu	r3,r2,400d668 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 400d624:	20c9883a 	add	r4,r4,r3
 400d628:	00bfff04 	movi	r2,-4
 400d62c:	208a703a 	and	r5,r4,r2
 400d630:	018100f4 	movhi	r6,1027
 400d634:	31b85404 	addi	r6,r6,-7856
 400d638:	30c00117 	ldw	r3,4(r6)
 400d63c:	18000826 	beq	r3,zero,400d660 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 400d640:	19000017 	ldw	r4,0(r3)
 400d644:	21400436 	bltu	r4,r5,400d658 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
 400d648:	00001a06 	br	400d6b4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
 400d64c:	11000017 	ldw	r4,0(r2)
 400d650:	2140072e 	bgeu	r4,r5,400d670 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 400d654:	1007883a 	mov	r3,r2
 400d658:	18800117 	ldw	r2,4(r3)
 400d65c:	103ffb1e 	bne	r2,zero,400d64c <__alt_mem_onchip_memory2_0+0xfc00c3ac>
 400d660:	0005883a 	mov	r2,zero
 400d664:	f800283a 	ret
 400d668:	01400204 	movi	r5,8
 400d66c:	003ff006 	br	400d630 <__alt_mem_onchip_memory2_0+0xfc00c390>
 400d670:	18c00104 	addi	r3,r3,4
 400d674:	2149c83a 	sub	r4,r4,r5
 400d678:	018001c4 	movi	r6,7
 400d67c:	3100092e 	bgeu	r6,r4,400d6a4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
 400d680:	11c00117 	ldw	r7,4(r2)
 400d684:	114d883a 	add	r6,r2,r5
 400d688:	31000015 	stw	r4,0(r6)
 400d68c:	31c00115 	stw	r7,4(r6)
 400d690:	18800017 	ldw	r2,0(r3)
 400d694:	11400015 	stw	r5,0(r2)
 400d698:	19800015 	stw	r6,0(r3)
 400d69c:	10800104 	addi	r2,r2,4
 400d6a0:	f800283a 	ret
 400d6a4:	11000117 	ldw	r4,4(r2)
 400d6a8:	10800104 	addi	r2,r2,4
 400d6ac:	19000015 	stw	r4,0(r3)
 400d6b0:	f800283a 	ret
 400d6b4:	1805883a 	mov	r2,r3
 400d6b8:	30c00104 	addi	r3,r6,4
 400d6bc:	003fed06 	br	400d674 <__alt_mem_onchip_memory2_0+0xfc00c3d4>

0400d6c0 <__cxa_allocate_exception>:
 400d6c0:	defffd04 	addi	sp,sp,-12
 400d6c4:	dc400115 	stw	r17,4(sp)
 400d6c8:	24401104 	addi	r17,r4,68
 400d6cc:	8809883a 	mov	r4,r17
 400d6d0:	dc000015 	stw	r16,0(sp)
 400d6d4:	dfc00215 	stw	ra,8(sp)
 400d6d8:	400ec200 	call	400ec20 <malloc>
 400d6dc:	1021883a 	mov	r16,r2
 400d6e0:	10000a26 	beq	r2,zero,400d70c <__cxa_allocate_exception+0x4c>
 400d6e4:	01801104 	movi	r6,68
 400d6e8:	000b883a 	mov	r5,zero
 400d6ec:	8009883a 	mov	r4,r16
 400d6f0:	400f59c0 	call	400f59c <memset>
 400d6f4:	80801104 	addi	r2,r16,68
 400d6f8:	dfc00217 	ldw	ra,8(sp)
 400d6fc:	dc400117 	ldw	r17,4(sp)
 400d700:	dc000017 	ldw	r16,0(sp)
 400d704:	dec00304 	addi	sp,sp,12
 400d708:	f800283a 	ret
 400d70c:	8809883a 	mov	r4,r17
 400d710:	400d6180 	call	400d618 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400d714:	1021883a 	mov	r16,r2
 400d718:	103ff21e 	bne	r2,zero,400d6e4 <__alt_mem_onchip_memory2_0+0xfc00c444>
 400d71c:	400c1a00 	call	400c1a0 <_ZSt9terminatev>

0400d720 <__cxa_free_exception>:
 400d720:	00c100f4 	movhi	r3,1027
 400d724:	18f85404 	addi	r3,r3,-7856
 400d728:	18800217 	ldw	r2,8(r3)
 400d72c:	213fef04 	addi	r4,r4,-68
 400d730:	1100042e 	bgeu	r2,r4,400d744 <__cxa_free_exception+0x24>
 400d734:	18c00317 	ldw	r3,12(r3)
 400d738:	10c5883a 	add	r2,r2,r3
 400d73c:	2080012e 	bgeu	r4,r2,400d744 <__cxa_free_exception+0x24>
 400d740:	400d5601 	jmpi	400d560 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400d744:	400ec341 	jmpi	400ec34 <free>

0400d748 <__cxa_allocate_dependent_exception>:
 400d748:	defffe04 	addi	sp,sp,-8
 400d74c:	01001004 	movi	r4,64
 400d750:	dc000015 	stw	r16,0(sp)
 400d754:	dfc00115 	stw	ra,4(sp)
 400d758:	400ec200 	call	400ec20 <malloc>
 400d75c:	1021883a 	mov	r16,r2
 400d760:	10000926 	beq	r2,zero,400d788 <__cxa_allocate_dependent_exception+0x40>
 400d764:	01801004 	movi	r6,64
 400d768:	000b883a 	mov	r5,zero
 400d76c:	8009883a 	mov	r4,r16
 400d770:	400f59c0 	call	400f59c <memset>
 400d774:	8005883a 	mov	r2,r16
 400d778:	dfc00117 	ldw	ra,4(sp)
 400d77c:	dc000017 	ldw	r16,0(sp)
 400d780:	dec00204 	addi	sp,sp,8
 400d784:	f800283a 	ret
 400d788:	01001004 	movi	r4,64
 400d78c:	400d6180 	call	400d618 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400d790:	1021883a 	mov	r16,r2
 400d794:	103ff31e 	bne	r2,zero,400d764 <__alt_mem_onchip_memory2_0+0xfc00c4c4>
 400d798:	400c1a00 	call	400c1a0 <_ZSt9terminatev>

0400d79c <__cxa_free_dependent_exception>:
 400d79c:	014100f4 	movhi	r5,1027
 400d7a0:	29785404 	addi	r5,r5,-7856
 400d7a4:	28c00217 	ldw	r3,8(r5)
 400d7a8:	2005883a 	mov	r2,r4
 400d7ac:	1900042e 	bgeu	r3,r4,400d7c0 <__cxa_free_dependent_exception+0x24>
 400d7b0:	29400317 	ldw	r5,12(r5)
 400d7b4:	1947883a 	add	r3,r3,r5
 400d7b8:	20c0012e 	bgeu	r4,r3,400d7c0 <__cxa_free_dependent_exception+0x24>
 400d7bc:	400d5601 	jmpi	400d560 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400d7c0:	1009883a 	mov	r4,r2
 400d7c4:	400ec341 	jmpi	400ec34 <free>

0400d7c8 <_GLOBAL__sub_I___cxa_allocate_exception>:
 400d7c8:	defffd04 	addi	sp,sp,-12
 400d7cc:	dc400115 	stw	r17,4(sp)
 400d7d0:	dc000015 	stw	r16,0(sp)
 400d7d4:	04424004 	movi	r17,2304
 400d7d8:	040100f4 	movhi	r16,1027
 400d7dc:	84385404 	addi	r16,r16,-7856
 400d7e0:	8809883a 	mov	r4,r17
 400d7e4:	dfc00215 	stw	ra,8(sp)
 400d7e8:	84400315 	stw	r17,12(r16)
 400d7ec:	400ec200 	call	400ec20 <malloc>
 400d7f0:	80800215 	stw	r2,8(r16)
 400d7f4:	10000826 	beq	r2,zero,400d818 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
 400d7f8:	80800115 	stw	r2,4(r16)
 400d7fc:	14400015 	stw	r17,0(r2)
 400d800:	10000115 	stw	zero,4(r2)
 400d804:	dfc00217 	ldw	ra,8(sp)
 400d808:	dc400117 	ldw	r17,4(sp)
 400d80c:	dc000017 	ldw	r16,0(sp)
 400d810:	dec00304 	addi	sp,sp,12
 400d814:	f800283a 	ret
 400d818:	80000315 	stw	zero,12(r16)
 400d81c:	80000115 	stw	zero,4(r16)
 400d820:	003ff806 	br	400d804 <__alt_mem_onchip_memory2_0+0xfc00c564>

0400d824 <__cxa_call_terminate>:
 400d824:	defffe04 	addi	sp,sp,-8
 400d828:	dfc00115 	stw	ra,4(sp)
 400d82c:	dc000015 	stw	r16,0(sp)
 400d830:	20000d26 	beq	r4,zero,400d868 <__cxa_call_terminate+0x44>
 400d834:	2021883a 	mov	r16,r4
 400d838:	400d3d80 	call	400d3d8 <__cxa_begin_catch>
 400d83c:	80c00017 	ldw	r3,0(r16)
 400d840:	016f3574 	movhi	r5,48341
 400d844:	29754004 	addi	r5,r5,-11008
 400d848:	194b883a 	add	r5,r3,r5
 400d84c:	80800117 	ldw	r2,4(r16)
 400d850:	28c9803a 	cmpltu	r4,r5,r3
 400d854:	00ee2cb4 	movhi	r3,47282
 400d858:	18eaaf04 	addi	r3,r3,-21828
 400d85c:	10c5883a 	add	r2,r2,r3
 400d860:	2085883a 	add	r2,r4,r2
 400d864:	10000126 	beq	r2,zero,400d86c <__cxa_call_terminate+0x48>
 400d868:	400c1a00 	call	400c1a0 <_ZSt9terminatev>
 400d86c:	00800044 	movi	r2,1
 400d870:	117ffd36 	bltu	r2,r5,400d868 <__alt_mem_onchip_memory2_0+0xfc00c5c8>
 400d874:	813ff817 	ldw	r4,-32(r16)
 400d878:	400c0e00 	call	400c0e0 <_ZN10__cxxabiv111__terminateEPFvvE>

0400d87c <__cxa_get_globals_fast>:
 400d87c:	008100f4 	movhi	r2,1027
 400d880:	10b80f04 	addi	r2,r2,-8132
 400d884:	f800283a 	ret

0400d888 <__cxa_get_globals>:
 400d888:	008100f4 	movhi	r2,1027
 400d88c:	10b80f04 	addi	r2,r2,-8132
 400d890:	f800283a 	ret

0400d894 <_ZNSt9exceptionD1Ev>:
 400d894:	f800283a 	ret

0400d898 <_ZNSt13bad_exceptionD1Ev>:
 400d898:	f800283a 	ret

0400d89c <_ZNKSt9exception4whatEv>:
 400d89c:	008100b4 	movhi	r2,1026
 400d8a0:	109e1804 	addi	r2,r2,30816
 400d8a4:	f800283a 	ret

0400d8a8 <_ZNKSt13bad_exception4whatEv>:
 400d8a8:	008100b4 	movhi	r2,1026
 400d8ac:	109e1c04 	addi	r2,r2,30832
 400d8b0:	f800283a 	ret

0400d8b4 <_ZNSt9exceptionD0Ev>:
 400d8b4:	400bdd41 	jmpi	400bdd4 <_ZdlPv>

0400d8b8 <_ZNSt13bad_exceptionD0Ev>:
 400d8b8:	400bdd41 	jmpi	400bdd4 <_ZdlPv>

0400d8bc <_ZN10__cxxabiv115__forced_unwindD1Ev>:
 400d8bc:	f800283a 	ret

0400d8c0 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
 400d8c0:	400bdd41 	jmpi	400bdd4 <_ZdlPv>

0400d8c4 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
 400d8c4:	f800283a 	ret

0400d8c8 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
 400d8c8:	400bdd41 	jmpi	400bdd4 <_ZdlPv>

0400d8cc <__fixunssfsi>:
 400d8cc:	defffd04 	addi	sp,sp,-12
 400d8d0:	dc000015 	stw	r16,0(sp)
 400d8d4:	0413c034 	movhi	r16,20224
 400d8d8:	800b883a 	mov	r5,r16
 400d8dc:	dc400115 	stw	r17,4(sp)
 400d8e0:	dfc00215 	stw	ra,8(sp)
 400d8e4:	2023883a 	mov	r17,r4
 400d8e8:	400db080 	call	400db08 <__gesf2>
 400d8ec:	1000070e 	bge	r2,zero,400d90c <__fixunssfsi+0x40>
 400d8f0:	8809883a 	mov	r4,r17
 400d8f4:	400e4d80 	call	400e4d8 <__fixsfsi>
 400d8f8:	dfc00217 	ldw	ra,8(sp)
 400d8fc:	dc400117 	ldw	r17,4(sp)
 400d900:	dc000017 	ldw	r16,0(sp)
 400d904:	dec00304 	addi	sp,sp,12
 400d908:	f800283a 	ret
 400d90c:	800b883a 	mov	r5,r16
 400d910:	8809883a 	mov	r4,r17
 400d914:	400dff40 	call	400dff4 <__subsf3>
 400d918:	1009883a 	mov	r4,r2
 400d91c:	400e4d80 	call	400e4d8 <__fixsfsi>
 400d920:	00e00034 	movhi	r3,32768
 400d924:	10c5883a 	add	r2,r2,r3
 400d928:	003ff306 	br	400d8f8 <__alt_mem_onchip_memory2_0+0xfc00c658>

0400d92c <__divsi3>:
 400d92c:	20001b16 	blt	r4,zero,400d99c <__divsi3+0x70>
 400d930:	000f883a 	mov	r7,zero
 400d934:	28001616 	blt	r5,zero,400d990 <__divsi3+0x64>
 400d938:	200d883a 	mov	r6,r4
 400d93c:	29001a2e 	bgeu	r5,r4,400d9a8 <__divsi3+0x7c>
 400d940:	00800804 	movi	r2,32
 400d944:	00c00044 	movi	r3,1
 400d948:	00000106 	br	400d950 <__divsi3+0x24>
 400d94c:	10000d26 	beq	r2,zero,400d984 <__divsi3+0x58>
 400d950:	294b883a 	add	r5,r5,r5
 400d954:	10bfffc4 	addi	r2,r2,-1
 400d958:	18c7883a 	add	r3,r3,r3
 400d95c:	293ffb36 	bltu	r5,r4,400d94c <__alt_mem_onchip_memory2_0+0xfc00c6ac>
 400d960:	0005883a 	mov	r2,zero
 400d964:	18000726 	beq	r3,zero,400d984 <__divsi3+0x58>
 400d968:	0005883a 	mov	r2,zero
 400d96c:	31400236 	bltu	r6,r5,400d978 <__divsi3+0x4c>
 400d970:	314dc83a 	sub	r6,r6,r5
 400d974:	10c4b03a 	or	r2,r2,r3
 400d978:	1806d07a 	srli	r3,r3,1
 400d97c:	280ad07a 	srli	r5,r5,1
 400d980:	183ffa1e 	bne	r3,zero,400d96c <__alt_mem_onchip_memory2_0+0xfc00c6cc>
 400d984:	38000126 	beq	r7,zero,400d98c <__divsi3+0x60>
 400d988:	0085c83a 	sub	r2,zero,r2
 400d98c:	f800283a 	ret
 400d990:	014bc83a 	sub	r5,zero,r5
 400d994:	39c0005c 	xori	r7,r7,1
 400d998:	003fe706 	br	400d938 <__alt_mem_onchip_memory2_0+0xfc00c698>
 400d99c:	0109c83a 	sub	r4,zero,r4
 400d9a0:	01c00044 	movi	r7,1
 400d9a4:	003fe306 	br	400d934 <__alt_mem_onchip_memory2_0+0xfc00c694>
 400d9a8:	00c00044 	movi	r3,1
 400d9ac:	003fee06 	br	400d968 <__alt_mem_onchip_memory2_0+0xfc00c6c8>

0400d9b0 <__modsi3>:
 400d9b0:	20001716 	blt	r4,zero,400da10 <__modsi3+0x60>
 400d9b4:	000f883a 	mov	r7,zero
 400d9b8:	2005883a 	mov	r2,r4
 400d9bc:	28001216 	blt	r5,zero,400da08 <__modsi3+0x58>
 400d9c0:	2900162e 	bgeu	r5,r4,400da1c <__modsi3+0x6c>
 400d9c4:	01800804 	movi	r6,32
 400d9c8:	00c00044 	movi	r3,1
 400d9cc:	00000106 	br	400d9d4 <__modsi3+0x24>
 400d9d0:	30000a26 	beq	r6,zero,400d9fc <__modsi3+0x4c>
 400d9d4:	294b883a 	add	r5,r5,r5
 400d9d8:	31bfffc4 	addi	r6,r6,-1
 400d9dc:	18c7883a 	add	r3,r3,r3
 400d9e0:	293ffb36 	bltu	r5,r4,400d9d0 <__alt_mem_onchip_memory2_0+0xfc00c730>
 400d9e4:	18000526 	beq	r3,zero,400d9fc <__modsi3+0x4c>
 400d9e8:	1806d07a 	srli	r3,r3,1
 400d9ec:	11400136 	bltu	r2,r5,400d9f4 <__modsi3+0x44>
 400d9f0:	1145c83a 	sub	r2,r2,r5
 400d9f4:	280ad07a 	srli	r5,r5,1
 400d9f8:	183ffb1e 	bne	r3,zero,400d9e8 <__alt_mem_onchip_memory2_0+0xfc00c748>
 400d9fc:	38000126 	beq	r7,zero,400da04 <__modsi3+0x54>
 400da00:	0085c83a 	sub	r2,zero,r2
 400da04:	f800283a 	ret
 400da08:	014bc83a 	sub	r5,zero,r5
 400da0c:	003fec06 	br	400d9c0 <__alt_mem_onchip_memory2_0+0xfc00c720>
 400da10:	0109c83a 	sub	r4,zero,r4
 400da14:	01c00044 	movi	r7,1
 400da18:	003fe706 	br	400d9b8 <__alt_mem_onchip_memory2_0+0xfc00c718>
 400da1c:	00c00044 	movi	r3,1
 400da20:	003ff106 	br	400d9e8 <__alt_mem_onchip_memory2_0+0xfc00c748>

0400da24 <__udivsi3>:
 400da24:	200d883a 	mov	r6,r4
 400da28:	2900152e 	bgeu	r5,r4,400da80 <__udivsi3+0x5c>
 400da2c:	28001416 	blt	r5,zero,400da80 <__udivsi3+0x5c>
 400da30:	00800804 	movi	r2,32
 400da34:	00c00044 	movi	r3,1
 400da38:	00000206 	br	400da44 <__udivsi3+0x20>
 400da3c:	10000e26 	beq	r2,zero,400da78 <__udivsi3+0x54>
 400da40:	28000516 	blt	r5,zero,400da58 <__udivsi3+0x34>
 400da44:	294b883a 	add	r5,r5,r5
 400da48:	10bfffc4 	addi	r2,r2,-1
 400da4c:	18c7883a 	add	r3,r3,r3
 400da50:	293ffa36 	bltu	r5,r4,400da3c <__alt_mem_onchip_memory2_0+0xfc00c79c>
 400da54:	18000826 	beq	r3,zero,400da78 <__udivsi3+0x54>
 400da58:	0005883a 	mov	r2,zero
 400da5c:	31400236 	bltu	r6,r5,400da68 <__udivsi3+0x44>
 400da60:	314dc83a 	sub	r6,r6,r5
 400da64:	10c4b03a 	or	r2,r2,r3
 400da68:	1806d07a 	srli	r3,r3,1
 400da6c:	280ad07a 	srli	r5,r5,1
 400da70:	183ffa1e 	bne	r3,zero,400da5c <__alt_mem_onchip_memory2_0+0xfc00c7bc>
 400da74:	f800283a 	ret
 400da78:	0005883a 	mov	r2,zero
 400da7c:	f800283a 	ret
 400da80:	00c00044 	movi	r3,1
 400da84:	003ff406 	br	400da58 <__alt_mem_onchip_memory2_0+0xfc00c7b8>

0400da88 <__umodsi3>:
 400da88:	2005883a 	mov	r2,r4
 400da8c:	2900122e 	bgeu	r5,r4,400dad8 <__umodsi3+0x50>
 400da90:	28001116 	blt	r5,zero,400dad8 <__umodsi3+0x50>
 400da94:	01800804 	movi	r6,32
 400da98:	00c00044 	movi	r3,1
 400da9c:	00000206 	br	400daa8 <__umodsi3+0x20>
 400daa0:	30000c26 	beq	r6,zero,400dad4 <__umodsi3+0x4c>
 400daa4:	28000516 	blt	r5,zero,400dabc <__umodsi3+0x34>
 400daa8:	294b883a 	add	r5,r5,r5
 400daac:	31bfffc4 	addi	r6,r6,-1
 400dab0:	18c7883a 	add	r3,r3,r3
 400dab4:	293ffa36 	bltu	r5,r4,400daa0 <__alt_mem_onchip_memory2_0+0xfc00c800>
 400dab8:	18000626 	beq	r3,zero,400dad4 <__umodsi3+0x4c>
 400dabc:	1806d07a 	srli	r3,r3,1
 400dac0:	11400136 	bltu	r2,r5,400dac8 <__umodsi3+0x40>
 400dac4:	1145c83a 	sub	r2,r2,r5
 400dac8:	280ad07a 	srli	r5,r5,1
 400dacc:	183ffb1e 	bne	r3,zero,400dabc <__alt_mem_onchip_memory2_0+0xfc00c81c>
 400dad0:	f800283a 	ret
 400dad4:	f800283a 	ret
 400dad8:	00c00044 	movi	r3,1
 400dadc:	003ff706 	br	400dabc <__alt_mem_onchip_memory2_0+0xfc00c81c>

0400dae0 <__mulsi3>:
 400dae0:	0005883a 	mov	r2,zero
 400dae4:	20000726 	beq	r4,zero,400db04 <__mulsi3+0x24>
 400dae8:	20c0004c 	andi	r3,r4,1
 400daec:	2008d07a 	srli	r4,r4,1
 400daf0:	18000126 	beq	r3,zero,400daf8 <__mulsi3+0x18>
 400daf4:	1145883a 	add	r2,r2,r5
 400daf8:	294b883a 	add	r5,r5,r5
 400dafc:	203ffa1e 	bne	r4,zero,400dae8 <__alt_mem_onchip_memory2_0+0xfc00c848>
 400db00:	f800283a 	ret
 400db04:	f800283a 	ret

0400db08 <__gesf2>:
 400db08:	2004d5fa 	srli	r2,r4,23
 400db0c:	2806d5fa 	srli	r3,r5,23
 400db10:	01802034 	movhi	r6,128
 400db14:	31bfffc4 	addi	r6,r6,-1
 400db18:	10803fcc 	andi	r2,r2,255
 400db1c:	01c03fc4 	movi	r7,255
 400db20:	3110703a 	and	r8,r6,r4
 400db24:	18c03fcc 	andi	r3,r3,255
 400db28:	314c703a 	and	r6,r6,r5
 400db2c:	2008d7fa 	srli	r4,r4,31
 400db30:	280ad7fa 	srli	r5,r5,31
 400db34:	11c01926 	beq	r2,r7,400db9c <__gesf2+0x94>
 400db38:	01c03fc4 	movi	r7,255
 400db3c:	19c00f26 	beq	r3,r7,400db7c <__gesf2+0x74>
 400db40:	1000061e 	bne	r2,zero,400db5c <__gesf2+0x54>
 400db44:	400f003a 	cmpeq	r7,r8,zero
 400db48:	1800071e 	bne	r3,zero,400db68 <__gesf2+0x60>
 400db4c:	3000061e 	bne	r6,zero,400db68 <__gesf2+0x60>
 400db50:	0005883a 	mov	r2,zero
 400db54:	40000e1e 	bne	r8,zero,400db90 <__gesf2+0x88>
 400db58:	f800283a 	ret
 400db5c:	18000a1e 	bne	r3,zero,400db88 <__gesf2+0x80>
 400db60:	30000b26 	beq	r6,zero,400db90 <__gesf2+0x88>
 400db64:	000f883a 	mov	r7,zero
 400db68:	29403fcc 	andi	r5,r5,255
 400db6c:	38000726 	beq	r7,zero,400db8c <__gesf2+0x84>
 400db70:	28000826 	beq	r5,zero,400db94 <__gesf2+0x8c>
 400db74:	00800044 	movi	r2,1
 400db78:	f800283a 	ret
 400db7c:	303ff026 	beq	r6,zero,400db40 <__alt_mem_onchip_memory2_0+0xfc00c8a0>
 400db80:	00bfff84 	movi	r2,-2
 400db84:	f800283a 	ret
 400db88:	29403fcc 	andi	r5,r5,255
 400db8c:	21400526 	beq	r4,r5,400dba4 <__gesf2+0x9c>
 400db90:	203ff826 	beq	r4,zero,400db74 <__alt_mem_onchip_memory2_0+0xfc00c8d4>
 400db94:	00bfffc4 	movi	r2,-1
 400db98:	f800283a 	ret
 400db9c:	403fe626 	beq	r8,zero,400db38 <__alt_mem_onchip_memory2_0+0xfc00c898>
 400dba0:	003ff706 	br	400db80 <__alt_mem_onchip_memory2_0+0xfc00c8e0>
 400dba4:	18bffa16 	blt	r3,r2,400db90 <__alt_mem_onchip_memory2_0+0xfc00c8f0>
 400dba8:	10c00216 	blt	r2,r3,400dbb4 <__gesf2+0xac>
 400dbac:	323ff836 	bltu	r6,r8,400db90 <__alt_mem_onchip_memory2_0+0xfc00c8f0>
 400dbb0:	4180022e 	bgeu	r8,r6,400dbbc <__gesf2+0xb4>
 400dbb4:	203fef1e 	bne	r4,zero,400db74 <__alt_mem_onchip_memory2_0+0xfc00c8d4>
 400dbb8:	003ff606 	br	400db94 <__alt_mem_onchip_memory2_0+0xfc00c8f4>
 400dbbc:	0005883a 	mov	r2,zero
 400dbc0:	f800283a 	ret

0400dbc4 <__mulsf3>:
 400dbc4:	defff504 	addi	sp,sp,-44
 400dbc8:	dc000115 	stw	r16,4(sp)
 400dbcc:	2020d5fa 	srli	r16,r4,23
 400dbd0:	dd400615 	stw	r21,24(sp)
 400dbd4:	202ad7fa 	srli	r21,r4,31
 400dbd8:	dc800315 	stw	r18,12(sp)
 400dbdc:	04802034 	movhi	r18,128
 400dbe0:	df000915 	stw	fp,36(sp)
 400dbe4:	dd000515 	stw	r20,20(sp)
 400dbe8:	94bfffc4 	addi	r18,r18,-1
 400dbec:	dfc00a15 	stw	ra,40(sp)
 400dbf0:	ddc00815 	stw	r23,32(sp)
 400dbf4:	dd800715 	stw	r22,28(sp)
 400dbf8:	dcc00415 	stw	r19,16(sp)
 400dbfc:	dc400215 	stw	r17,8(sp)
 400dc00:	84003fcc 	andi	r16,r16,255
 400dc04:	9124703a 	and	r18,r18,r4
 400dc08:	a829883a 	mov	r20,r21
 400dc0c:	af003fcc 	andi	fp,r21,255
 400dc10:	80005426 	beq	r16,zero,400dd64 <__mulsf3+0x1a0>
 400dc14:	00803fc4 	movi	r2,255
 400dc18:	80802f26 	beq	r16,r2,400dcd8 <__mulsf3+0x114>
 400dc1c:	91002034 	orhi	r4,r18,128
 400dc20:	202490fa 	slli	r18,r4,3
 400dc24:	843fe044 	addi	r16,r16,-127
 400dc28:	0023883a 	mov	r17,zero
 400dc2c:	002f883a 	mov	r23,zero
 400dc30:	2804d5fa 	srli	r2,r5,23
 400dc34:	282cd7fa 	srli	r22,r5,31
 400dc38:	01002034 	movhi	r4,128
 400dc3c:	213fffc4 	addi	r4,r4,-1
 400dc40:	10803fcc 	andi	r2,r2,255
 400dc44:	2166703a 	and	r19,r4,r5
 400dc48:	b1803fcc 	andi	r6,r22,255
 400dc4c:	10004c26 	beq	r2,zero,400dd80 <__mulsf3+0x1bc>
 400dc50:	00c03fc4 	movi	r3,255
 400dc54:	10c04726 	beq	r2,r3,400dd74 <__mulsf3+0x1b0>
 400dc58:	99002034 	orhi	r4,r19,128
 400dc5c:	202690fa 	slli	r19,r4,3
 400dc60:	10bfe044 	addi	r2,r2,-127
 400dc64:	0007883a 	mov	r3,zero
 400dc68:	80a1883a 	add	r16,r16,r2
 400dc6c:	010003c4 	movi	r4,15
 400dc70:	1c44b03a 	or	r2,r3,r17
 400dc74:	b56af03a 	xor	r21,r22,r21
 400dc78:	81c00044 	addi	r7,r16,1
 400dc7c:	20806b36 	bltu	r4,r2,400de2c <__mulsf3+0x268>
 400dc80:	100490ba 	slli	r2,r2,2
 400dc84:	01010074 	movhi	r4,1025
 400dc88:	21372604 	addi	r4,r4,-9064
 400dc8c:	1105883a 	add	r2,r2,r4
 400dc90:	10800017 	ldw	r2,0(r2)
 400dc94:	1000683a 	jmp	r2
 400dc98:	0400de2c 	andhi	r16,zero,888
 400dc9c:	0400dcec 	andhi	r16,zero,883
 400dca0:	0400dcec 	andhi	r16,zero,883
 400dca4:	0400dce8 	cmpgeui	r16,zero,883
 400dca8:	0400de10 	cmplti	r16,zero,888
 400dcac:	0400de10 	cmplti	r16,zero,888
 400dcb0:	0400ddfc 	xorhi	r16,zero,887
 400dcb4:	0400dce8 	cmpgeui	r16,zero,883
 400dcb8:	0400de10 	cmplti	r16,zero,888
 400dcbc:	0400ddfc 	xorhi	r16,zero,887
 400dcc0:	0400de10 	cmplti	r16,zero,888
 400dcc4:	0400dce8 	cmpgeui	r16,zero,883
 400dcc8:	0400de1c 	xori	r16,zero,888
 400dccc:	0400de1c 	xori	r16,zero,888
 400dcd0:	0400de1c 	xori	r16,zero,888
 400dcd4:	0400df2c 	andhi	r16,zero,892
 400dcd8:	90003b1e 	bne	r18,zero,400ddc8 <__mulsf3+0x204>
 400dcdc:	04400204 	movi	r17,8
 400dce0:	05c00084 	movi	r23,2
 400dce4:	003fd206 	br	400dc30 <__alt_mem_onchip_memory2_0+0xfc00c990>
 400dce8:	302b883a 	mov	r21,r6
 400dcec:	00800084 	movi	r2,2
 400dcf0:	18802626 	beq	r3,r2,400dd8c <__mulsf3+0x1c8>
 400dcf4:	008000c4 	movi	r2,3
 400dcf8:	1880b826 	beq	r3,r2,400dfdc <__mulsf3+0x418>
 400dcfc:	00800044 	movi	r2,1
 400dd00:	1880af1e 	bne	r3,r2,400dfc0 <__mulsf3+0x3fc>
 400dd04:	a829883a 	mov	r20,r21
 400dd08:	0007883a 	mov	r3,zero
 400dd0c:	0009883a 	mov	r4,zero
 400dd10:	18803fcc 	andi	r2,r3,255
 400dd14:	100695fa 	slli	r3,r2,23
 400dd18:	a0803fcc 	andi	r2,r20,255
 400dd1c:	100a97fa 	slli	r5,r2,31
 400dd20:	00802034 	movhi	r2,128
 400dd24:	10bfffc4 	addi	r2,r2,-1
 400dd28:	2084703a 	and	r2,r4,r2
 400dd2c:	10c4b03a 	or	r2,r2,r3
 400dd30:	1144b03a 	or	r2,r2,r5
 400dd34:	dfc00a17 	ldw	ra,40(sp)
 400dd38:	df000917 	ldw	fp,36(sp)
 400dd3c:	ddc00817 	ldw	r23,32(sp)
 400dd40:	dd800717 	ldw	r22,28(sp)
 400dd44:	dd400617 	ldw	r21,24(sp)
 400dd48:	dd000517 	ldw	r20,20(sp)
 400dd4c:	dcc00417 	ldw	r19,16(sp)
 400dd50:	dc800317 	ldw	r18,12(sp)
 400dd54:	dc400217 	ldw	r17,8(sp)
 400dd58:	dc000117 	ldw	r16,4(sp)
 400dd5c:	dec00b04 	addi	sp,sp,44
 400dd60:	f800283a 	ret
 400dd64:	90000d1e 	bne	r18,zero,400dd9c <__mulsf3+0x1d8>
 400dd68:	04400104 	movi	r17,4
 400dd6c:	05c00044 	movi	r23,1
 400dd70:	003faf06 	br	400dc30 <__alt_mem_onchip_memory2_0+0xfc00c990>
 400dd74:	9806c03a 	cmpne	r3,r19,zero
 400dd78:	18c00084 	addi	r3,r3,2
 400dd7c:	003fba06 	br	400dc68 <__alt_mem_onchip_memory2_0+0xfc00c9c8>
 400dd80:	9800141e 	bne	r19,zero,400ddd4 <__mulsf3+0x210>
 400dd84:	00c00044 	movi	r3,1
 400dd88:	003fb706 	br	400dc68 <__alt_mem_onchip_memory2_0+0xfc00c9c8>
 400dd8c:	a829883a 	mov	r20,r21
 400dd90:	00ffffc4 	movi	r3,-1
 400dd94:	0009883a 	mov	r4,zero
 400dd98:	003fdd06 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400dd9c:	9009883a 	mov	r4,r18
 400dda0:	d9400015 	stw	r5,0(sp)
 400dda4:	400eb580 	call	400eb58 <__clzsi2>
 400dda8:	10fffec4 	addi	r3,r2,-5
 400ddac:	10801d84 	addi	r2,r2,118
 400ddb0:	90e4983a 	sll	r18,r18,r3
 400ddb4:	00a1c83a 	sub	r16,zero,r2
 400ddb8:	0023883a 	mov	r17,zero
 400ddbc:	002f883a 	mov	r23,zero
 400ddc0:	d9400017 	ldw	r5,0(sp)
 400ddc4:	003f9a06 	br	400dc30 <__alt_mem_onchip_memory2_0+0xfc00c990>
 400ddc8:	04400304 	movi	r17,12
 400ddcc:	05c000c4 	movi	r23,3
 400ddd0:	003f9706 	br	400dc30 <__alt_mem_onchip_memory2_0+0xfc00c990>
 400ddd4:	9809883a 	mov	r4,r19
 400ddd8:	d9800015 	stw	r6,0(sp)
 400dddc:	400eb580 	call	400eb58 <__clzsi2>
 400dde0:	10fffec4 	addi	r3,r2,-5
 400dde4:	10801d84 	addi	r2,r2,118
 400dde8:	98e6983a 	sll	r19,r19,r3
 400ddec:	0085c83a 	sub	r2,zero,r2
 400ddf0:	0007883a 	mov	r3,zero
 400ddf4:	d9800017 	ldw	r6,0(sp)
 400ddf8:	003f9b06 	br	400dc68 <__alt_mem_onchip_memory2_0+0xfc00c9c8>
 400ddfc:	01002034 	movhi	r4,128
 400de00:	0029883a 	mov	r20,zero
 400de04:	213fffc4 	addi	r4,r4,-1
 400de08:	00ffffc4 	movi	r3,-1
 400de0c:	003fc006 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400de10:	9027883a 	mov	r19,r18
 400de14:	b807883a 	mov	r3,r23
 400de18:	003fb406 	br	400dcec <__alt_mem_onchip_memory2_0+0xfc00ca4c>
 400de1c:	9027883a 	mov	r19,r18
 400de20:	e02b883a 	mov	r21,fp
 400de24:	b807883a 	mov	r3,r23
 400de28:	003fb006 	br	400dcec <__alt_mem_onchip_memory2_0+0xfc00ca4c>
 400de2c:	9028d43a 	srli	r20,r18,16
 400de30:	982cd43a 	srli	r22,r19,16
 400de34:	94bfffcc 	andi	r18,r18,65535
 400de38:	9cffffcc 	andi	r19,r19,65535
 400de3c:	980b883a 	mov	r5,r19
 400de40:	9009883a 	mov	r4,r18
 400de44:	d9c00015 	stw	r7,0(sp)
 400de48:	400dae00 	call	400dae0 <__mulsi3>
 400de4c:	a00b883a 	mov	r5,r20
 400de50:	9809883a 	mov	r4,r19
 400de54:	1023883a 	mov	r17,r2
 400de58:	400dae00 	call	400dae0 <__mulsi3>
 400de5c:	a009883a 	mov	r4,r20
 400de60:	b00b883a 	mov	r5,r22
 400de64:	1027883a 	mov	r19,r2
 400de68:	400dae00 	call	400dae0 <__mulsi3>
 400de6c:	b00b883a 	mov	r5,r22
 400de70:	9009883a 	mov	r4,r18
 400de74:	1029883a 	mov	r20,r2
 400de78:	400dae00 	call	400dae0 <__mulsi3>
 400de7c:	8806d43a 	srli	r3,r17,16
 400de80:	14c5883a 	add	r2,r2,r19
 400de84:	d9c00017 	ldw	r7,0(sp)
 400de88:	1885883a 	add	r2,r3,r2
 400de8c:	14c0022e 	bgeu	r2,r19,400de98 <__mulsf3+0x2d4>
 400de90:	00c00074 	movhi	r3,1
 400de94:	a0e9883a 	add	r20,r20,r3
 400de98:	1026943a 	slli	r19,r2,16
 400de9c:	8c7fffcc 	andi	r17,r17,65535
 400dea0:	1004d43a 	srli	r2,r2,16
 400dea4:	9c63883a 	add	r17,r19,r17
 400dea8:	882691ba 	slli	r19,r17,6
 400deac:	1505883a 	add	r2,r2,r20
 400deb0:	8822d6ba 	srli	r17,r17,26
 400deb4:	100891ba 	slli	r4,r2,6
 400deb8:	9826c03a 	cmpne	r19,r19,zero
 400debc:	9c62b03a 	or	r17,r19,r17
 400dec0:	8926b03a 	or	r19,r17,r4
 400dec4:	9882002c 	andhi	r2,r19,2048
 400dec8:	10000426 	beq	r2,zero,400dedc <__mulsf3+0x318>
 400decc:	9804d07a 	srli	r2,r19,1
 400ded0:	9900004c 	andi	r4,r19,1
 400ded4:	3821883a 	mov	r16,r7
 400ded8:	1126b03a 	or	r19,r2,r4
 400dedc:	80c01fc4 	addi	r3,r16,127
 400dee0:	00c0210e 	bge	zero,r3,400df68 <__mulsf3+0x3a4>
 400dee4:	988001cc 	andi	r2,r19,7
 400dee8:	10000426 	beq	r2,zero,400defc <__mulsf3+0x338>
 400deec:	988003cc 	andi	r2,r19,15
 400def0:	01000104 	movi	r4,4
 400def4:	11000126 	beq	r2,r4,400defc <__mulsf3+0x338>
 400def8:	9927883a 	add	r19,r19,r4
 400defc:	9882002c 	andhi	r2,r19,2048
 400df00:	10000426 	beq	r2,zero,400df14 <__mulsf3+0x350>
 400df04:	00be0034 	movhi	r2,63488
 400df08:	10bfffc4 	addi	r2,r2,-1
 400df0c:	80c02004 	addi	r3,r16,128
 400df10:	98a6703a 	and	r19,r19,r2
 400df14:	00803f84 	movi	r2,254
 400df18:	10ff9c16 	blt	r2,r3,400dd8c <__alt_mem_onchip_memory2_0+0xfc00caec>
 400df1c:	980891ba 	slli	r4,r19,6
 400df20:	a829883a 	mov	r20,r21
 400df24:	2008d27a 	srli	r4,r4,9
 400df28:	003f7906 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400df2c:	9080102c 	andhi	r2,r18,64
 400df30:	10000826 	beq	r2,zero,400df54 <__mulsf3+0x390>
 400df34:	9880102c 	andhi	r2,r19,64
 400df38:	1000061e 	bne	r2,zero,400df54 <__mulsf3+0x390>
 400df3c:	00802034 	movhi	r2,128
 400df40:	99001034 	orhi	r4,r19,64
 400df44:	10bfffc4 	addi	r2,r2,-1
 400df48:	b029883a 	mov	r20,r22
 400df4c:	2088703a 	and	r4,r4,r2
 400df50:	003fad06 	br	400de08 <__alt_mem_onchip_memory2_0+0xfc00cb68>
 400df54:	00802034 	movhi	r2,128
 400df58:	91001034 	orhi	r4,r18,64
 400df5c:	10bfffc4 	addi	r2,r2,-1
 400df60:	2088703a 	and	r4,r4,r2
 400df64:	003fa806 	br	400de08 <__alt_mem_onchip_memory2_0+0xfc00cb68>
 400df68:	00800044 	movi	r2,1
 400df6c:	10c7c83a 	sub	r3,r2,r3
 400df70:	008006c4 	movi	r2,27
 400df74:	10ff6316 	blt	r2,r3,400dd04 <__alt_mem_onchip_memory2_0+0xfc00ca64>
 400df78:	00800804 	movi	r2,32
 400df7c:	10c5c83a 	sub	r2,r2,r3
 400df80:	9884983a 	sll	r2,r19,r2
 400df84:	98c6d83a 	srl	r3,r19,r3
 400df88:	1004c03a 	cmpne	r2,r2,zero
 400df8c:	1884b03a 	or	r2,r3,r2
 400df90:	10c001cc 	andi	r3,r2,7
 400df94:	18000426 	beq	r3,zero,400dfa8 <__mulsf3+0x3e4>
 400df98:	10c003cc 	andi	r3,r2,15
 400df9c:	01000104 	movi	r4,4
 400dfa0:	19000126 	beq	r3,r4,400dfa8 <__mulsf3+0x3e4>
 400dfa4:	1105883a 	add	r2,r2,r4
 400dfa8:	10c1002c 	andhi	r3,r2,1024
 400dfac:	18000626 	beq	r3,zero,400dfc8 <__mulsf3+0x404>
 400dfb0:	a829883a 	mov	r20,r21
 400dfb4:	00c00044 	movi	r3,1
 400dfb8:	0009883a 	mov	r4,zero
 400dfbc:	003f5406 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400dfc0:	3821883a 	mov	r16,r7
 400dfc4:	003fc506 	br	400dedc <__alt_mem_onchip_memory2_0+0xfc00cc3c>
 400dfc8:	100491ba 	slli	r2,r2,6
 400dfcc:	a829883a 	mov	r20,r21
 400dfd0:	0007883a 	mov	r3,zero
 400dfd4:	1008d27a 	srli	r4,r2,9
 400dfd8:	003f4d06 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400dfdc:	00802034 	movhi	r2,128
 400dfe0:	99001034 	orhi	r4,r19,64
 400dfe4:	10bfffc4 	addi	r2,r2,-1
 400dfe8:	a829883a 	mov	r20,r21
 400dfec:	2088703a 	and	r4,r4,r2
 400dff0:	003f8506 	br	400de08 <__alt_mem_onchip_memory2_0+0xfc00cb68>

0400dff4 <__subsf3>:
 400dff4:	defffc04 	addi	sp,sp,-16
 400dff8:	280cd5fa 	srli	r6,r5,23
 400dffc:	dc000015 	stw	r16,0(sp)
 400e000:	01c02034 	movhi	r7,128
 400e004:	2020d5fa 	srli	r16,r4,23
 400e008:	39ffffc4 	addi	r7,r7,-1
 400e00c:	3906703a 	and	r3,r7,r4
 400e010:	dc400115 	stw	r17,4(sp)
 400e014:	394e703a 	and	r7,r7,r5
 400e018:	2022d7fa 	srli	r17,r4,31
 400e01c:	dfc00315 	stw	ra,12(sp)
 400e020:	dc800215 	stw	r18,8(sp)
 400e024:	31803fcc 	andi	r6,r6,255
 400e028:	01003fc4 	movi	r4,255
 400e02c:	84003fcc 	andi	r16,r16,255
 400e030:	180690fa 	slli	r3,r3,3
 400e034:	2804d7fa 	srli	r2,r5,31
 400e038:	380e90fa 	slli	r7,r7,3
 400e03c:	31006d26 	beq	r6,r4,400e1f4 <__subsf3+0x200>
 400e040:	1080005c 	xori	r2,r2,1
 400e044:	8189c83a 	sub	r4,r16,r6
 400e048:	14404f26 	beq	r2,r17,400e188 <__subsf3+0x194>
 400e04c:	0100770e 	bge	zero,r4,400e22c <__subsf3+0x238>
 400e050:	30001e1e 	bne	r6,zero,400e0cc <__subsf3+0xd8>
 400e054:	38006a1e 	bne	r7,zero,400e200 <__subsf3+0x20c>
 400e058:	188001cc 	andi	r2,r3,7
 400e05c:	10000426 	beq	r2,zero,400e070 <__subsf3+0x7c>
 400e060:	188003cc 	andi	r2,r3,15
 400e064:	01000104 	movi	r4,4
 400e068:	11000126 	beq	r2,r4,400e070 <__subsf3+0x7c>
 400e06c:	1907883a 	add	r3,r3,r4
 400e070:	1881002c 	andhi	r2,r3,1024
 400e074:	10003926 	beq	r2,zero,400e15c <__subsf3+0x168>
 400e078:	84000044 	addi	r16,r16,1
 400e07c:	00803fc4 	movi	r2,255
 400e080:	80807526 	beq	r16,r2,400e258 <__subsf3+0x264>
 400e084:	180691ba 	slli	r3,r3,6
 400e088:	8880004c 	andi	r2,r17,1
 400e08c:	180ad27a 	srli	r5,r3,9
 400e090:	84003fcc 	andi	r16,r16,255
 400e094:	800695fa 	slli	r3,r16,23
 400e098:	10803fcc 	andi	r2,r2,255
 400e09c:	01002034 	movhi	r4,128
 400e0a0:	213fffc4 	addi	r4,r4,-1
 400e0a4:	100497fa 	slli	r2,r2,31
 400e0a8:	2920703a 	and	r16,r5,r4
 400e0ac:	80e0b03a 	or	r16,r16,r3
 400e0b0:	8084b03a 	or	r2,r16,r2
 400e0b4:	dfc00317 	ldw	ra,12(sp)
 400e0b8:	dc800217 	ldw	r18,8(sp)
 400e0bc:	dc400117 	ldw	r17,4(sp)
 400e0c0:	dc000017 	ldw	r16,0(sp)
 400e0c4:	dec00404 	addi	sp,sp,16
 400e0c8:	f800283a 	ret
 400e0cc:	00803fc4 	movi	r2,255
 400e0d0:	80bfe126 	beq	r16,r2,400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e0d4:	39c10034 	orhi	r7,r7,1024
 400e0d8:	008006c4 	movi	r2,27
 400e0dc:	11007416 	blt	r2,r4,400e2b0 <__subsf3+0x2bc>
 400e0e0:	00800804 	movi	r2,32
 400e0e4:	1105c83a 	sub	r2,r2,r4
 400e0e8:	3884983a 	sll	r2,r7,r2
 400e0ec:	390ed83a 	srl	r7,r7,r4
 400e0f0:	1008c03a 	cmpne	r4,r2,zero
 400e0f4:	390eb03a 	or	r7,r7,r4
 400e0f8:	19c7c83a 	sub	r3,r3,r7
 400e0fc:	1881002c 	andhi	r2,r3,1024
 400e100:	10001426 	beq	r2,zero,400e154 <__subsf3+0x160>
 400e104:	04810034 	movhi	r18,1024
 400e108:	94bfffc4 	addi	r18,r18,-1
 400e10c:	1ca4703a 	and	r18,r3,r18
 400e110:	9009883a 	mov	r4,r18
 400e114:	400eb580 	call	400eb58 <__clzsi2>
 400e118:	10bffec4 	addi	r2,r2,-5
 400e11c:	90a4983a 	sll	r18,r18,r2
 400e120:	14005116 	blt	r2,r16,400e268 <__subsf3+0x274>
 400e124:	1405c83a 	sub	r2,r2,r16
 400e128:	10c00044 	addi	r3,r2,1
 400e12c:	00800804 	movi	r2,32
 400e130:	10c5c83a 	sub	r2,r2,r3
 400e134:	9084983a 	sll	r2,r18,r2
 400e138:	90e4d83a 	srl	r18,r18,r3
 400e13c:	0021883a 	mov	r16,zero
 400e140:	1006c03a 	cmpne	r3,r2,zero
 400e144:	90c6b03a 	or	r3,r18,r3
 400e148:	003fc306 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e14c:	2000e026 	beq	r4,zero,400e4d0 <__subsf3+0x4dc>
 400e150:	2007883a 	mov	r3,r4
 400e154:	188001cc 	andi	r2,r3,7
 400e158:	103fc11e 	bne	r2,zero,400e060 <__alt_mem_onchip_memory2_0+0xfc00cdc0>
 400e15c:	180ad0fa 	srli	r5,r3,3
 400e160:	00c03fc4 	movi	r3,255
 400e164:	8880004c 	andi	r2,r17,1
 400e168:	80c0031e 	bne	r16,r3,400e178 <__subsf3+0x184>
 400e16c:	28006d26 	beq	r5,zero,400e324 <__subsf3+0x330>
 400e170:	29401034 	orhi	r5,r5,64
 400e174:	043fffc4 	movi	r16,-1
 400e178:	00c02034 	movhi	r3,128
 400e17c:	18ffffc4 	addi	r3,r3,-1
 400e180:	28ca703a 	and	r5,r5,r3
 400e184:	003fc206 	br	400e090 <__alt_mem_onchip_memory2_0+0xfc00cdf0>
 400e188:	01003c0e 	bge	zero,r4,400e27c <__subsf3+0x288>
 400e18c:	30002126 	beq	r6,zero,400e214 <__subsf3+0x220>
 400e190:	01403fc4 	movi	r5,255
 400e194:	817fb026 	beq	r16,r5,400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e198:	39c10034 	orhi	r7,r7,1024
 400e19c:	014006c4 	movi	r5,27
 400e1a0:	29007416 	blt	r5,r4,400e374 <__subsf3+0x380>
 400e1a4:	01400804 	movi	r5,32
 400e1a8:	290bc83a 	sub	r5,r5,r4
 400e1ac:	394a983a 	sll	r5,r7,r5
 400e1b0:	390ed83a 	srl	r7,r7,r4
 400e1b4:	2808c03a 	cmpne	r4,r5,zero
 400e1b8:	390eb03a 	or	r7,r7,r4
 400e1bc:	19c7883a 	add	r3,r3,r7
 400e1c0:	1901002c 	andhi	r4,r3,1024
 400e1c4:	20003826 	beq	r4,zero,400e2a8 <__subsf3+0x2b4>
 400e1c8:	84000044 	addi	r16,r16,1
 400e1cc:	01003fc4 	movi	r4,255
 400e1d0:	81005426 	beq	r16,r4,400e324 <__subsf3+0x330>
 400e1d4:	1023883a 	mov	r17,r2
 400e1d8:	00bf0034 	movhi	r2,64512
 400e1dc:	10bfffc4 	addi	r2,r2,-1
 400e1e0:	1900004c 	andi	r4,r3,1
 400e1e4:	1886703a 	and	r3,r3,r2
 400e1e8:	1806d07a 	srli	r3,r3,1
 400e1ec:	1906b03a 	or	r3,r3,r4
 400e1f0:	003f9906 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e1f4:	383f9226 	beq	r7,zero,400e040 <__alt_mem_onchip_memory2_0+0xfc00cda0>
 400e1f8:	10803fcc 	andi	r2,r2,255
 400e1fc:	003f9106 	br	400e044 <__alt_mem_onchip_memory2_0+0xfc00cda4>
 400e200:	213fffc4 	addi	r4,r4,-1
 400e204:	203fbc26 	beq	r4,zero,400e0f8 <__alt_mem_onchip_memory2_0+0xfc00ce58>
 400e208:	00803fc4 	movi	r2,255
 400e20c:	80bfb21e 	bne	r16,r2,400e0d8 <__alt_mem_onchip_memory2_0+0xfc00ce38>
 400e210:	003f9106 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e214:	383f9026 	beq	r7,zero,400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e218:	213fffc4 	addi	r4,r4,-1
 400e21c:	203fe726 	beq	r4,zero,400e1bc <__alt_mem_onchip_memory2_0+0xfc00cf1c>
 400e220:	01403fc4 	movi	r5,255
 400e224:	817fdd1e 	bne	r16,r5,400e19c <__alt_mem_onchip_memory2_0+0xfc00cefc>
 400e228:	003f8b06 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e22c:	2000221e 	bne	r4,zero,400e2b8 <__subsf3+0x2c4>
 400e230:	81000044 	addi	r4,r16,1
 400e234:	21003fcc 	andi	r4,r4,255
 400e238:	01400044 	movi	r5,1
 400e23c:	2900470e 	bge	r5,r4,400e35c <__subsf3+0x368>
 400e240:	19e5c83a 	sub	r18,r3,r7
 400e244:	9141002c 	andhi	r5,r18,1024
 400e248:	28002d26 	beq	r5,zero,400e300 <__subsf3+0x30c>
 400e24c:	38e5c83a 	sub	r18,r7,r3
 400e250:	1023883a 	mov	r17,r2
 400e254:	003fae06 	br	400e110 <__alt_mem_onchip_memory2_0+0xfc00ce70>
 400e258:	8880004c 	andi	r2,r17,1
 400e25c:	043fffc4 	movi	r16,-1
 400e260:	000b883a 	mov	r5,zero
 400e264:	003f8a06 	br	400e090 <__alt_mem_onchip_memory2_0+0xfc00cdf0>
 400e268:	00ff0034 	movhi	r3,64512
 400e26c:	18ffffc4 	addi	r3,r3,-1
 400e270:	80a1c83a 	sub	r16,r16,r2
 400e274:	90c6703a 	and	r3,r18,r3
 400e278:	003f7706 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e27c:	2000431e 	bne	r4,zero,400e38c <__subsf3+0x398>
 400e280:	81000044 	addi	r4,r16,1
 400e284:	21803fcc 	andi	r6,r4,255
 400e288:	01400044 	movi	r5,1
 400e28c:	2980280e 	bge	r5,r6,400e330 <__subsf3+0x33c>
 400e290:	01403fc4 	movi	r5,255
 400e294:	21402326 	beq	r4,r5,400e324 <__subsf3+0x330>
 400e298:	19c7883a 	add	r3,r3,r7
 400e29c:	1806d07a 	srli	r3,r3,1
 400e2a0:	2021883a 	mov	r16,r4
 400e2a4:	003f6c06 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e2a8:	1023883a 	mov	r17,r2
 400e2ac:	003fa906 	br	400e154 <__alt_mem_onchip_memory2_0+0xfc00ceb4>
 400e2b0:	01c00044 	movi	r7,1
 400e2b4:	003f9006 	br	400e0f8 <__alt_mem_onchip_memory2_0+0xfc00ce58>
 400e2b8:	8000151e 	bne	r16,zero,400e310 <__subsf3+0x31c>
 400e2bc:	18002f26 	beq	r3,zero,400e37c <__subsf3+0x388>
 400e2c0:	0108303a 	nor	r4,zero,r4
 400e2c4:	20000a26 	beq	r4,zero,400e2f0 <__subsf3+0x2fc>
 400e2c8:	01403fc4 	movi	r5,255
 400e2cc:	31402b26 	beq	r6,r5,400e37c <__subsf3+0x388>
 400e2d0:	014006c4 	movi	r5,27
 400e2d4:	29006e16 	blt	r5,r4,400e490 <__subsf3+0x49c>
 400e2d8:	01400804 	movi	r5,32
 400e2dc:	290bc83a 	sub	r5,r5,r4
 400e2e0:	194a983a 	sll	r5,r3,r5
 400e2e4:	1908d83a 	srl	r4,r3,r4
 400e2e8:	2806c03a 	cmpne	r3,r5,zero
 400e2ec:	20c6b03a 	or	r3,r4,r3
 400e2f0:	38c7c83a 	sub	r3,r7,r3
 400e2f4:	3021883a 	mov	r16,r6
 400e2f8:	1023883a 	mov	r17,r2
 400e2fc:	003f7f06 	br	400e0fc <__alt_mem_onchip_memory2_0+0xfc00ce5c>
 400e300:	903f831e 	bne	r18,zero,400e110 <__alt_mem_onchip_memory2_0+0xfc00ce70>
 400e304:	0005883a 	mov	r2,zero
 400e308:	0021883a 	mov	r16,zero
 400e30c:	003f9a06 	br	400e178 <__alt_mem_onchip_memory2_0+0xfc00ced8>
 400e310:	01403fc4 	movi	r5,255
 400e314:	31401926 	beq	r6,r5,400e37c <__subsf3+0x388>
 400e318:	0109c83a 	sub	r4,zero,r4
 400e31c:	18c10034 	orhi	r3,r3,1024
 400e320:	003feb06 	br	400e2d0 <__alt_mem_onchip_memory2_0+0xfc00d030>
 400e324:	043fffc4 	movi	r16,-1
 400e328:	000b883a 	mov	r5,zero
 400e32c:	003f5806 	br	400e090 <__alt_mem_onchip_memory2_0+0xfc00cdf0>
 400e330:	8000481e 	bne	r16,zero,400e454 <__subsf3+0x460>
 400e334:	18006226 	beq	r3,zero,400e4c0 <__subsf3+0x4cc>
 400e338:	383f4726 	beq	r7,zero,400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e33c:	19c7883a 	add	r3,r3,r7
 400e340:	1881002c 	andhi	r2,r3,1024
 400e344:	103f8326 	beq	r2,zero,400e154 <__alt_mem_onchip_memory2_0+0xfc00ceb4>
 400e348:	00bf0034 	movhi	r2,64512
 400e34c:	10bfffc4 	addi	r2,r2,-1
 400e350:	2821883a 	mov	r16,r5
 400e354:	1886703a 	and	r3,r3,r2
 400e358:	003f3f06 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e35c:	80001c1e 	bne	r16,zero,400e3d0 <__subsf3+0x3dc>
 400e360:	1800261e 	bne	r3,zero,400e3fc <__subsf3+0x408>
 400e364:	38004c26 	beq	r7,zero,400e498 <__subsf3+0x4a4>
 400e368:	3807883a 	mov	r3,r7
 400e36c:	1023883a 	mov	r17,r2
 400e370:	003f3906 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e374:	01c00044 	movi	r7,1
 400e378:	003f9006 	br	400e1bc <__alt_mem_onchip_memory2_0+0xfc00cf1c>
 400e37c:	3807883a 	mov	r3,r7
 400e380:	3021883a 	mov	r16,r6
 400e384:	1023883a 	mov	r17,r2
 400e388:	003f3306 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e38c:	8000161e 	bne	r16,zero,400e3e8 <__subsf3+0x3f4>
 400e390:	18002d26 	beq	r3,zero,400e448 <__subsf3+0x454>
 400e394:	0108303a 	nor	r4,zero,r4
 400e398:	20000a26 	beq	r4,zero,400e3c4 <__subsf3+0x3d0>
 400e39c:	01403fc4 	movi	r5,255
 400e3a0:	31402926 	beq	r6,r5,400e448 <__subsf3+0x454>
 400e3a4:	014006c4 	movi	r5,27
 400e3a8:	29004716 	blt	r5,r4,400e4c8 <__subsf3+0x4d4>
 400e3ac:	01400804 	movi	r5,32
 400e3b0:	290bc83a 	sub	r5,r5,r4
 400e3b4:	194a983a 	sll	r5,r3,r5
 400e3b8:	1908d83a 	srl	r4,r3,r4
 400e3bc:	2806c03a 	cmpne	r3,r5,zero
 400e3c0:	20c6b03a 	or	r3,r4,r3
 400e3c4:	19c7883a 	add	r3,r3,r7
 400e3c8:	3021883a 	mov	r16,r6
 400e3cc:	003f7c06 	br	400e1c0 <__alt_mem_onchip_memory2_0+0xfc00cf20>
 400e3d0:	1800111e 	bne	r3,zero,400e418 <__subsf3+0x424>
 400e3d4:	38003326 	beq	r7,zero,400e4a4 <__subsf3+0x4b0>
 400e3d8:	3807883a 	mov	r3,r7
 400e3dc:	1023883a 	mov	r17,r2
 400e3e0:	04003fc4 	movi	r16,255
 400e3e4:	003f1c06 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e3e8:	01403fc4 	movi	r5,255
 400e3ec:	31401626 	beq	r6,r5,400e448 <__subsf3+0x454>
 400e3f0:	0109c83a 	sub	r4,zero,r4
 400e3f4:	18c10034 	orhi	r3,r3,1024
 400e3f8:	003fea06 	br	400e3a4 <__alt_mem_onchip_memory2_0+0xfc00d104>
 400e3fc:	383f1626 	beq	r7,zero,400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e400:	19c9c83a 	sub	r4,r3,r7
 400e404:	2141002c 	andhi	r5,r4,1024
 400e408:	283f5026 	beq	r5,zero,400e14c <__alt_mem_onchip_memory2_0+0xfc00ceac>
 400e40c:	38c7c83a 	sub	r3,r7,r3
 400e410:	1023883a 	mov	r17,r2
 400e414:	003f1006 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e418:	38001b26 	beq	r7,zero,400e488 <__subsf3+0x494>
 400e41c:	1806d0fa 	srli	r3,r3,3
 400e420:	1900102c 	andhi	r4,r3,64
 400e424:	20000526 	beq	r4,zero,400e43c <__subsf3+0x448>
 400e428:	380ed0fa 	srli	r7,r7,3
 400e42c:	3900102c 	andhi	r4,r7,64
 400e430:	2000021e 	bne	r4,zero,400e43c <__subsf3+0x448>
 400e434:	3807883a 	mov	r3,r7
 400e438:	1023883a 	mov	r17,r2
 400e43c:	180690fa 	slli	r3,r3,3
 400e440:	04003fc4 	movi	r16,255
 400e444:	003f0406 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e448:	3807883a 	mov	r3,r7
 400e44c:	3021883a 	mov	r16,r6
 400e450:	003f0106 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e454:	18001726 	beq	r3,zero,400e4b4 <__subsf3+0x4c0>
 400e458:	38000b26 	beq	r7,zero,400e488 <__subsf3+0x494>
 400e45c:	1806d0fa 	srli	r3,r3,3
 400e460:	1900102c 	andhi	r4,r3,64
 400e464:	20000426 	beq	r4,zero,400e478 <__subsf3+0x484>
 400e468:	380ed0fa 	srli	r7,r7,3
 400e46c:	3900102c 	andhi	r4,r7,64
 400e470:	2000011e 	bne	r4,zero,400e478 <__subsf3+0x484>
 400e474:	3807883a 	mov	r3,r7
 400e478:	180690fa 	slli	r3,r3,3
 400e47c:	1023883a 	mov	r17,r2
 400e480:	04003fc4 	movi	r16,255
 400e484:	003ef406 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e488:	04003fc4 	movi	r16,255
 400e48c:	003ef206 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e490:	00c00044 	movi	r3,1
 400e494:	003f9606 	br	400e2f0 <__alt_mem_onchip_memory2_0+0xfc00d050>
 400e498:	000b883a 	mov	r5,zero
 400e49c:	0005883a 	mov	r2,zero
 400e4a0:	003f3506 	br	400e178 <__alt_mem_onchip_memory2_0+0xfc00ced8>
 400e4a4:	01402034 	movhi	r5,128
 400e4a8:	297fffc4 	addi	r5,r5,-1
 400e4ac:	0005883a 	mov	r2,zero
 400e4b0:	003f2f06 	br	400e170 <__alt_mem_onchip_memory2_0+0xfc00ced0>
 400e4b4:	3807883a 	mov	r3,r7
 400e4b8:	04003fc4 	movi	r16,255
 400e4bc:	003ee606 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e4c0:	3807883a 	mov	r3,r7
 400e4c4:	003ee406 	br	400e058 <__alt_mem_onchip_memory2_0+0xfc00cdb8>
 400e4c8:	00c00044 	movi	r3,1
 400e4cc:	003fbd06 	br	400e3c4 <__alt_mem_onchip_memory2_0+0xfc00d124>
 400e4d0:	0005883a 	mov	r2,zero
 400e4d4:	003f2806 	br	400e178 <__alt_mem_onchip_memory2_0+0xfc00ced8>

0400e4d8 <__fixsfsi>:
 400e4d8:	200ad5fa 	srli	r5,r4,23
 400e4dc:	00c02034 	movhi	r3,128
 400e4e0:	18ffffc4 	addi	r3,r3,-1
 400e4e4:	29403fcc 	andi	r5,r5,255
 400e4e8:	00801f84 	movi	r2,126
 400e4ec:	1906703a 	and	r3,r3,r4
 400e4f0:	2008d7fa 	srli	r4,r4,31
 400e4f4:	11400e0e 	bge	r2,r5,400e530 <__fixsfsi+0x58>
 400e4f8:	00802744 	movi	r2,157
 400e4fc:	11400816 	blt	r2,r5,400e520 <__fixsfsi+0x48>
 400e500:	00802544 	movi	r2,149
 400e504:	18c02034 	orhi	r3,r3,128
 400e508:	11400b0e 	bge	r2,r5,400e538 <__fixsfsi+0x60>
 400e50c:	28bfda84 	addi	r2,r5,-150
 400e510:	1884983a 	sll	r2,r3,r2
 400e514:	20000726 	beq	r4,zero,400e534 <__fixsfsi+0x5c>
 400e518:	0085c83a 	sub	r2,zero,r2
 400e51c:	f800283a 	ret
 400e520:	00a00034 	movhi	r2,32768
 400e524:	10bfffc4 	addi	r2,r2,-1
 400e528:	2085883a 	add	r2,r4,r2
 400e52c:	f800283a 	ret
 400e530:	0005883a 	mov	r2,zero
 400e534:	f800283a 	ret
 400e538:	00802584 	movi	r2,150
 400e53c:	1145c83a 	sub	r2,r2,r5
 400e540:	1884d83a 	srl	r2,r3,r2
 400e544:	003ff306 	br	400e514 <__alt_mem_onchip_memory2_0+0xfc00d274>

0400e548 <__floatunsisf>:
 400e548:	defffe04 	addi	sp,sp,-8
 400e54c:	dfc00115 	stw	ra,4(sp)
 400e550:	dc000015 	stw	r16,0(sp)
 400e554:	20002c26 	beq	r4,zero,400e608 <__floatunsisf+0xc0>
 400e558:	2021883a 	mov	r16,r4
 400e55c:	400eb580 	call	400eb58 <__clzsi2>
 400e560:	00c02784 	movi	r3,158
 400e564:	1887c83a 	sub	r3,r3,r2
 400e568:	01002584 	movi	r4,150
 400e56c:	20c00f16 	blt	r4,r3,400e5ac <__floatunsisf+0x64>
 400e570:	20c9c83a 	sub	r4,r4,r3
 400e574:	8108983a 	sll	r4,r16,r4
 400e578:	00802034 	movhi	r2,128
 400e57c:	10bfffc4 	addi	r2,r2,-1
 400e580:	2088703a 	and	r4,r4,r2
 400e584:	18803fcc 	andi	r2,r3,255
 400e588:	100695fa 	slli	r3,r2,23
 400e58c:	00802034 	movhi	r2,128
 400e590:	10bfffc4 	addi	r2,r2,-1
 400e594:	2084703a 	and	r2,r4,r2
 400e598:	10c4b03a 	or	r2,r2,r3
 400e59c:	dfc00117 	ldw	ra,4(sp)
 400e5a0:	dc000017 	ldw	r16,0(sp)
 400e5a4:	dec00204 	addi	sp,sp,8
 400e5a8:	f800283a 	ret
 400e5ac:	01002644 	movi	r4,153
 400e5b0:	20c01816 	blt	r4,r3,400e614 <__floatunsisf+0xcc>
 400e5b4:	20c9c83a 	sub	r4,r4,r3
 400e5b8:	8108983a 	sll	r4,r16,r4
 400e5bc:	017f0034 	movhi	r5,64512
 400e5c0:	297fffc4 	addi	r5,r5,-1
 400e5c4:	218001cc 	andi	r6,r4,7
 400e5c8:	214a703a 	and	r5,r4,r5
 400e5cc:	30000426 	beq	r6,zero,400e5e0 <__floatunsisf+0x98>
 400e5d0:	210003cc 	andi	r4,r4,15
 400e5d4:	01800104 	movi	r6,4
 400e5d8:	21800126 	beq	r4,r6,400e5e0 <__floatunsisf+0x98>
 400e5dc:	298b883a 	add	r5,r5,r6
 400e5e0:	2901002c 	andhi	r4,r5,1024
 400e5e4:	20000526 	beq	r4,zero,400e5fc <__floatunsisf+0xb4>
 400e5e8:	00c027c4 	movi	r3,159
 400e5ec:	1887c83a 	sub	r3,r3,r2
 400e5f0:	00bf0034 	movhi	r2,64512
 400e5f4:	10bfffc4 	addi	r2,r2,-1
 400e5f8:	288a703a 	and	r5,r5,r2
 400e5fc:	280891ba 	slli	r4,r5,6
 400e600:	2008d27a 	srli	r4,r4,9
 400e604:	003fdf06 	br	400e584 <__alt_mem_onchip_memory2_0+0xfc00d2e4>
 400e608:	0007883a 	mov	r3,zero
 400e60c:	0009883a 	mov	r4,zero
 400e610:	003fdc06 	br	400e584 <__alt_mem_onchip_memory2_0+0xfc00d2e4>
 400e614:	01402e44 	movi	r5,185
 400e618:	28cbc83a 	sub	r5,r5,r3
 400e61c:	01000144 	movi	r4,5
 400e620:	2089c83a 	sub	r4,r4,r2
 400e624:	814a983a 	sll	r5,r16,r5
 400e628:	8108d83a 	srl	r4,r16,r4
 400e62c:	2820c03a 	cmpne	r16,r5,zero
 400e630:	2408b03a 	or	r4,r4,r16
 400e634:	003fe106 	br	400e5bc <__alt_mem_onchip_memory2_0+0xfc00d31c>

0400e638 <_Unwind_ForcedUnwind_Phase2>:
 400e638:	defff404 	addi	sp,sp,-48
 400e63c:	dd800915 	stw	r22,36(sp)
 400e640:	058100f4 	movhi	r22,1027
 400e644:	ddc00a15 	stw	r23,40(sp)
 400e648:	dd400815 	stw	r21,32(sp)
 400e64c:	dd000715 	stw	r20,28(sp)
 400e650:	dcc00615 	stw	r19,24(sp)
 400e654:	dc400415 	stw	r17,16(sp)
 400e658:	dc000315 	stw	r16,12(sp)
 400e65c:	dfc00b15 	stw	ra,44(sp)
 400e660:	dc800515 	stw	r18,20(sp)
 400e664:	2021883a 	mov	r16,r4
 400e668:	2823883a 	mov	r17,r5
 400e66c:	24c00317 	ldw	r19,12(r4)
 400e670:	25000417 	ldw	r20,16(r4)
 400e674:	28c00017 	ldw	r3,0(r5)
 400e678:	b5b81104 	addi	r22,r22,-8124
 400e67c:	054001c4 	movi	r21,7
 400e680:	05c00204 	movi	r23,8
 400e684:	00001606 	br	400e6e0 <_Unwind_ForcedUnwind_Phase2+0xa8>
 400e688:	81800017 	ldw	r6,0(r16)
 400e68c:	81c00117 	ldw	r7,4(r16)
 400e690:	1c800617 	ldw	r18,24(r3)
 400e694:	dd000215 	stw	r20,8(sp)
 400e698:	dc400115 	stw	r17,4(sp)
 400e69c:	dc000015 	stw	r16,0(sp)
 400e6a0:	983ee83a 	callr	r19
 400e6a4:	01400284 	movi	r5,10
 400e6a8:	01000044 	movi	r4,1
 400e6ac:	1000241e 	bne	r2,zero,400e740 <_Unwind_ForcedUnwind_Phase2+0x108>
 400e6b0:	90000726 	beq	r18,zero,400e6d0 <_Unwind_ForcedUnwind_Phase2+0x98>
 400e6b4:	81800017 	ldw	r6,0(r16)
 400e6b8:	81c00117 	ldw	r7,4(r16)
 400e6bc:	dc400115 	stw	r17,4(sp)
 400e6c0:	dc000015 	stw	r16,0(sp)
 400e6c4:	903ee83a 	callr	r18
 400e6c8:	15401f26 	beq	r2,r21,400e748 <_Unwind_ForcedUnwind_Phase2+0x110>
 400e6cc:	15c01c1e 	bne	r2,r23,400e740 <_Unwind_ForcedUnwind_Phase2+0x108>
 400e6d0:	88800017 	ldw	r2,0(r17)
 400e6d4:	10c00017 	ldw	r3,0(r2)
 400e6d8:	b0c00015 	stw	r3,0(r22)
 400e6dc:	88c00015 	stw	r3,0(r17)
 400e6e0:	01400284 	movi	r5,10
 400e6e4:	01000044 	movi	r4,1
 400e6e8:	183fe71e 	bne	r3,zero,400e688 <__alt_mem_onchip_memory2_0+0xfc00d3e8>
 400e6ec:	81800017 	ldw	r6,0(r16)
 400e6f0:	81c00117 	ldw	r7,4(r16)
 400e6f4:	01400684 	movi	r5,26
 400e6f8:	dd000215 	stw	r20,8(sp)
 400e6fc:	dc400115 	stw	r17,4(sp)
 400e700:	dc000015 	stw	r16,0(sp)
 400e704:	01000044 	movi	r4,1
 400e708:	983ee83a 	callr	r19
 400e70c:	10000c1e 	bne	r2,zero,400e740 <_Unwind_ForcedUnwind_Phase2+0x108>
 400e710:	00800144 	movi	r2,5
 400e714:	dfc00b17 	ldw	ra,44(sp)
 400e718:	ddc00a17 	ldw	r23,40(sp)
 400e71c:	dd800917 	ldw	r22,36(sp)
 400e720:	dd400817 	ldw	r21,32(sp)
 400e724:	dd000717 	ldw	r20,28(sp)
 400e728:	dcc00617 	ldw	r19,24(sp)
 400e72c:	dc800517 	ldw	r18,20(sp)
 400e730:	dc400417 	ldw	r17,16(sp)
 400e734:	dc000317 	ldw	r16,12(sp)
 400e738:	dec00c04 	addi	sp,sp,48
 400e73c:	f800283a 	ret
 400e740:	00800084 	movi	r2,2
 400e744:	003ff306 	br	400e714 <__alt_mem_onchip_memory2_0+0xfc00d474>
 400e748:	a805883a 	mov	r2,r21
 400e74c:	003ff106 	br	400e714 <__alt_mem_onchip_memory2_0+0xfc00d474>

0400e750 <_Unwind_RaiseException_Phase2>:
 400e750:	28c00017 	ldw	r3,0(r5)
 400e754:	defff804 	addi	sp,sp,-32
 400e758:	dcc00515 	stw	r19,20(sp)
 400e75c:	dc800415 	stw	r18,16(sp)
 400e760:	dc400315 	stw	r17,12(sp)
 400e764:	dc000215 	stw	r16,8(sp)
 400e768:	dfc00715 	stw	ra,28(sp)
 400e76c:	dd000615 	stw	r20,24(sp)
 400e770:	2823883a 	mov	r17,r5
 400e774:	2021883a 	mov	r16,r4
 400e778:	048001c4 	movi	r18,7
 400e77c:	04c00204 	movi	r19,8
 400e780:	18001326 	beq	r3,zero,400e7d0 <_Unwind_RaiseException_Phase2+0x80>
 400e784:	81000417 	ldw	r4,16(r16)
 400e788:	1a000617 	ldw	r8,24(r3)
 400e78c:	19001926 	beq	r3,r4,400e7f4 <_Unwind_RaiseException_Phase2+0xa4>
 400e790:	40000c26 	beq	r8,zero,400e7c4 <_Unwind_RaiseException_Phase2+0x74>
 400e794:	01400084 	movi	r5,2
 400e798:	0029883a 	mov	r20,zero
 400e79c:	81800017 	ldw	r6,0(r16)
 400e7a0:	81c00117 	ldw	r7,4(r16)
 400e7a4:	01000044 	movi	r4,1
 400e7a8:	dc400115 	stw	r17,4(sp)
 400e7ac:	dc000015 	stw	r16,0(sp)
 400e7b0:	403ee83a 	callr	r8
 400e7b4:	14801326 	beq	r2,r18,400e804 <_Unwind_RaiseException_Phase2+0xb4>
 400e7b8:	14c0051e 	bne	r2,r19,400e7d0 <_Unwind_RaiseException_Phase2+0x80>
 400e7bc:	a000131e 	bne	r20,zero,400e80c <_Unwind_RaiseException_Phase2+0xbc>
 400e7c0:	88c00017 	ldw	r3,0(r17)
 400e7c4:	18c00017 	ldw	r3,0(r3)
 400e7c8:	88c00015 	stw	r3,0(r17)
 400e7cc:	183fed1e 	bne	r3,zero,400e784 <__alt_mem_onchip_memory2_0+0xfc00d4e4>
 400e7d0:	00800084 	movi	r2,2
 400e7d4:	dfc00717 	ldw	ra,28(sp)
 400e7d8:	dd000617 	ldw	r20,24(sp)
 400e7dc:	dcc00517 	ldw	r19,20(sp)
 400e7e0:	dc800417 	ldw	r18,16(sp)
 400e7e4:	dc400317 	ldw	r17,12(sp)
 400e7e8:	dc000217 	ldw	r16,8(sp)
 400e7ec:	dec00804 	addi	sp,sp,32
 400e7f0:	f800283a 	ret
 400e7f4:	40000526 	beq	r8,zero,400e80c <_Unwind_RaiseException_Phase2+0xbc>
 400e7f8:	01400184 	movi	r5,6
 400e7fc:	05000104 	movi	r20,4
 400e800:	003fe606 	br	400e79c <__alt_mem_onchip_memory2_0+0xfc00d4fc>
 400e804:	9005883a 	mov	r2,r18
 400e808:	003ff206 	br	400e7d4 <__alt_mem_onchip_memory2_0+0xfc00d534>
 400e80c:	400ebbc0 	call	400ebbc <abort>

0400e810 <uw_install_context.isra.1>:
 400e810:	20c00017 	ldw	r3,0(r4)
 400e814:	deffff04 	addi	sp,sp,-4
 400e818:	014100f4 	movhi	r5,1027
 400e81c:	19000917 	ldw	r4,36(r3)
 400e820:	df000015 	stw	fp,0(sp)
 400e824:	18800804 	addi	r2,r3,32
 400e828:	d839883a 	mov	fp,sp
 400e82c:	29781104 	addi	r5,r5,-8124
 400e830:	28c00015 	stw	r3,0(r5)
 400e834:	17000017 	ldw	fp,0(r2)
 400e838:	1ec00a17 	ldw	sp,40(r3)
 400e83c:	2000683a 	jmp	r4

0400e840 <_Unwind_SjLj_Register>:
 400e840:	008100f4 	movhi	r2,1027
 400e844:	10b81104 	addi	r2,r2,-8124
 400e848:	10c00017 	ldw	r3,0(r2)
 400e84c:	11000015 	stw	r4,0(r2)
 400e850:	20c00015 	stw	r3,0(r4)
 400e854:	f800283a 	ret

0400e858 <_Unwind_SjLj_Unregister>:
 400e858:	20c00017 	ldw	r3,0(r4)
 400e85c:	008100f4 	movhi	r2,1027
 400e860:	10b81104 	addi	r2,r2,-8124
 400e864:	10c00015 	stw	r3,0(r2)
 400e868:	f800283a 	ret

0400e86c <_Unwind_GetGR>:
 400e86c:	20800017 	ldw	r2,0(r4)
 400e870:	29400084 	addi	r5,r5,2
 400e874:	294b883a 	add	r5,r5,r5
 400e878:	294b883a 	add	r5,r5,r5
 400e87c:	114b883a 	add	r5,r2,r5
 400e880:	28800017 	ldw	r2,0(r5)
 400e884:	f800283a 	ret

0400e888 <_Unwind_GetCFA>:
 400e888:	20800017 	ldw	r2,0(r4)
 400e88c:	10000226 	beq	r2,zero,400e898 <_Unwind_GetCFA+0x10>
 400e890:	10800a17 	ldw	r2,40(r2)
 400e894:	f800283a 	ret
 400e898:	0005883a 	mov	r2,zero
 400e89c:	f800283a 	ret

0400e8a0 <_Unwind_SetGR>:
 400e8a0:	20800017 	ldw	r2,0(r4)
 400e8a4:	29400084 	addi	r5,r5,2
 400e8a8:	294b883a 	add	r5,r5,r5
 400e8ac:	294b883a 	add	r5,r5,r5
 400e8b0:	114b883a 	add	r5,r2,r5
 400e8b4:	29800015 	stw	r6,0(r5)
 400e8b8:	f800283a 	ret

0400e8bc <_Unwind_GetIP>:
 400e8bc:	20800017 	ldw	r2,0(r4)
 400e8c0:	10800117 	ldw	r2,4(r2)
 400e8c4:	10800044 	addi	r2,r2,1
 400e8c8:	f800283a 	ret

0400e8cc <_Unwind_GetIPInfo>:
 400e8cc:	20800017 	ldw	r2,0(r4)
 400e8d0:	28000015 	stw	zero,0(r5)
 400e8d4:	10000326 	beq	r2,zero,400e8e4 <_Unwind_GetIPInfo+0x18>
 400e8d8:	10800117 	ldw	r2,4(r2)
 400e8dc:	10800044 	addi	r2,r2,1
 400e8e0:	f800283a 	ret
 400e8e4:	0005883a 	mov	r2,zero
 400e8e8:	f800283a 	ret

0400e8ec <_Unwind_SetIP>:
 400e8ec:	20800017 	ldw	r2,0(r4)
 400e8f0:	297fffc4 	addi	r5,r5,-1
 400e8f4:	11400115 	stw	r5,4(r2)
 400e8f8:	f800283a 	ret

0400e8fc <_Unwind_GetLanguageSpecificData>:
 400e8fc:	20800017 	ldw	r2,0(r4)
 400e900:	10800717 	ldw	r2,28(r2)
 400e904:	f800283a 	ret

0400e908 <_Unwind_GetRegionStart>:
 400e908:	0005883a 	mov	r2,zero
 400e90c:	f800283a 	ret

0400e910 <_Unwind_FindEnclosingFunction>:
 400e910:	0005883a 	mov	r2,zero
 400e914:	f800283a 	ret

0400e918 <_Unwind_GetDataRelBase>:
 400e918:	0005883a 	mov	r2,zero
 400e91c:	f800283a 	ret

0400e920 <_Unwind_GetTextRelBase>:
 400e920:	0005883a 	mov	r2,zero
 400e924:	f800283a 	ret

0400e928 <_Unwind_SjLj_RaiseException>:
 400e928:	008100f4 	movhi	r2,1027
 400e92c:	defff804 	addi	sp,sp,-32
 400e930:	10b81104 	addi	r2,r2,-8124
 400e934:	dc800515 	stw	r18,20(sp)
 400e938:	14800017 	ldw	r18,0(r2)
 400e93c:	dfc00715 	stw	ra,28(sp)
 400e940:	dcc00615 	stw	r19,24(sp)
 400e944:	dc400415 	stw	r17,16(sp)
 400e948:	dc000315 	stw	r16,12(sp)
 400e94c:	dc800215 	stw	r18,8(sp)
 400e950:	90001426 	beq	r18,zero,400e9a4 <_Unwind_SjLj_RaiseException+0x7c>
 400e954:	2021883a 	mov	r16,r4
 400e958:	9005883a 	mov	r2,r18
 400e95c:	04400184 	movi	r17,6
 400e960:	04c00204 	movi	r19,8
 400e964:	10800617 	ldw	r2,24(r2)
 400e968:	10000a26 	beq	r2,zero,400e994 <_Unwind_SjLj_RaiseException+0x6c>
 400e96c:	81800017 	ldw	r6,0(r16)
 400e970:	81c00117 	ldw	r7,4(r16)
 400e974:	01400044 	movi	r5,1
 400e978:	d8c00204 	addi	r3,sp,8
 400e97c:	d8c00115 	stw	r3,4(sp)
 400e980:	dc000015 	stw	r16,0(sp)
 400e984:	2809883a 	mov	r4,r5
 400e988:	103ee83a 	callr	r2
 400e98c:	14400d26 	beq	r2,r17,400e9c4 <_Unwind_SjLj_RaiseException+0x9c>
 400e990:	14c0171e 	bne	r2,r19,400e9f0 <_Unwind_SjLj_RaiseException+0xc8>
 400e994:	d8800217 	ldw	r2,8(sp)
 400e998:	10800017 	ldw	r2,0(r2)
 400e99c:	d8800215 	stw	r2,8(sp)
 400e9a0:	103ff01e 	bne	r2,zero,400e964 <__alt_mem_onchip_memory2_0+0xfc00d6c4>
 400e9a4:	00800144 	movi	r2,5
 400e9a8:	dfc00717 	ldw	ra,28(sp)
 400e9ac:	dcc00617 	ldw	r19,24(sp)
 400e9b0:	dc800517 	ldw	r18,20(sp)
 400e9b4:	dc400417 	ldw	r17,16(sp)
 400e9b8:	dc000317 	ldw	r16,12(sp)
 400e9bc:	dec00804 	addi	sp,sp,32
 400e9c0:	f800283a 	ret
 400e9c4:	d8800217 	ldw	r2,8(sp)
 400e9c8:	80000315 	stw	zero,12(r16)
 400e9cc:	d9400204 	addi	r5,sp,8
 400e9d0:	80800415 	stw	r2,16(r16)
 400e9d4:	8009883a 	mov	r4,r16
 400e9d8:	dc800215 	stw	r18,8(sp)
 400e9dc:	400e7500 	call	400e750 <_Unwind_RaiseException_Phase2>
 400e9e0:	00c001c4 	movi	r3,7
 400e9e4:	10fff01e 	bne	r2,r3,400e9a8 <__alt_mem_onchip_memory2_0+0xfc00d708>
 400e9e8:	d9000204 	addi	r4,sp,8
 400e9ec:	400e8100 	call	400e810 <uw_install_context.isra.1>
 400e9f0:	008000c4 	movi	r2,3
 400e9f4:	003fec06 	br	400e9a8 <__alt_mem_onchip_memory2_0+0xfc00d708>

0400e9f8 <_Unwind_SjLj_ForcedUnwind>:
 400e9f8:	00c100f4 	movhi	r3,1027
 400e9fc:	18f81104 	addi	r3,r3,-8124
 400ea00:	defffe04 	addi	sp,sp,-8
 400ea04:	18c00017 	ldw	r3,0(r3)
 400ea08:	dfc00115 	stw	ra,4(sp)
 400ea0c:	21400315 	stw	r5,12(r4)
 400ea10:	21800415 	stw	r6,16(r4)
 400ea14:	d80b883a 	mov	r5,sp
 400ea18:	d8c00015 	stw	r3,0(sp)
 400ea1c:	400e6380 	call	400e638 <_Unwind_ForcedUnwind_Phase2>
 400ea20:	00c001c4 	movi	r3,7
 400ea24:	10c00326 	beq	r2,r3,400ea34 <_Unwind_SjLj_ForcedUnwind+0x3c>
 400ea28:	dfc00117 	ldw	ra,4(sp)
 400ea2c:	dec00204 	addi	sp,sp,8
 400ea30:	f800283a 	ret
 400ea34:	d809883a 	mov	r4,sp
 400ea38:	400e8100 	call	400e810 <uw_install_context.isra.1>

0400ea3c <_Unwind_SjLj_Resume>:
 400ea3c:	00c100f4 	movhi	r3,1027
 400ea40:	18f81104 	addi	r3,r3,-8124
 400ea44:	18c00017 	ldw	r3,0(r3)
 400ea48:	20800317 	ldw	r2,12(r4)
 400ea4c:	defffe04 	addi	sp,sp,-8
 400ea50:	dfc00115 	stw	ra,4(sp)
 400ea54:	d8c00015 	stw	r3,0(sp)
 400ea58:	d80b883a 	mov	r5,sp
 400ea5c:	1000041e 	bne	r2,zero,400ea70 <_Unwind_SjLj_Resume+0x34>
 400ea60:	400e7500 	call	400e750 <_Unwind_RaiseException_Phase2>
 400ea64:	00c001c4 	movi	r3,7
 400ea68:	10c00326 	beq	r2,r3,400ea78 <_Unwind_SjLj_Resume+0x3c>
 400ea6c:	400ebbc0 	call	400ebbc <abort>
 400ea70:	400e6380 	call	400e638 <_Unwind_ForcedUnwind_Phase2>
 400ea74:	003ffb06 	br	400ea64 <__alt_mem_onchip_memory2_0+0xfc00d7c4>
 400ea78:	d809883a 	mov	r4,sp
 400ea7c:	400e8100 	call	400e810 <uw_install_context.isra.1>

0400ea80 <_Unwind_SjLj_Resume_or_Rethrow>:
 400ea80:	20800317 	ldw	r2,12(r4)
 400ea84:	defffe04 	addi	sp,sp,-8
 400ea88:	dfc00115 	stw	ra,4(sp)
 400ea8c:	1000041e 	bne	r2,zero,400eaa0 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
 400ea90:	400e9280 	call	400e928 <_Unwind_SjLj_RaiseException>
 400ea94:	dfc00117 	ldw	ra,4(sp)
 400ea98:	dec00204 	addi	sp,sp,8
 400ea9c:	f800283a 	ret
 400eaa0:	008100f4 	movhi	r2,1027
 400eaa4:	10b81104 	addi	r2,r2,-8124
 400eaa8:	10800017 	ldw	r2,0(r2)
 400eaac:	d80b883a 	mov	r5,sp
 400eab0:	d8800015 	stw	r2,0(sp)
 400eab4:	400e6380 	call	400e638 <_Unwind_ForcedUnwind_Phase2>
 400eab8:	00c001c4 	movi	r3,7
 400eabc:	10c00126 	beq	r2,r3,400eac4 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
 400eac0:	400ebbc0 	call	400ebbc <abort>
 400eac4:	d809883a 	mov	r4,sp
 400eac8:	400e8100 	call	400e810 <uw_install_context.isra.1>

0400eacc <_Unwind_DeleteException>:
 400eacc:	20800217 	ldw	r2,8(r4)
 400ead0:	10000326 	beq	r2,zero,400eae0 <_Unwind_DeleteException+0x14>
 400ead4:	200b883a 	mov	r5,r4
 400ead8:	01000044 	movi	r4,1
 400eadc:	1000683a 	jmp	r2
 400eae0:	f800283a 	ret

0400eae4 <_Unwind_Backtrace>:
 400eae4:	008100f4 	movhi	r2,1027
 400eae8:	10b81104 	addi	r2,r2,-8124
 400eaec:	10800017 	ldw	r2,0(r2)
 400eaf0:	defffc04 	addi	sp,sp,-16
 400eaf4:	dc400215 	stw	r17,8(sp)
 400eaf8:	dc000115 	stw	r16,4(sp)
 400eafc:	dfc00315 	stw	ra,12(sp)
 400eb00:	2023883a 	mov	r17,r4
 400eb04:	2821883a 	mov	r16,r5
 400eb08:	d8800015 	stw	r2,0(sp)
 400eb0c:	00000506 	br	400eb24 <_Unwind_Backtrace+0x40>
 400eb10:	883ee83a 	callr	r17
 400eb14:	10000e1e 	bne	r2,zero,400eb50 <_Unwind_Backtrace+0x6c>
 400eb18:	d8800017 	ldw	r2,0(sp)
 400eb1c:	10800017 	ldw	r2,0(r2)
 400eb20:	d8800015 	stw	r2,0(sp)
 400eb24:	800b883a 	mov	r5,r16
 400eb28:	d809883a 	mov	r4,sp
 400eb2c:	103ff81e 	bne	r2,zero,400eb10 <__alt_mem_onchip_memory2_0+0xfc00d870>
 400eb30:	883ee83a 	callr	r17
 400eb34:	1000061e 	bne	r2,zero,400eb50 <_Unwind_Backtrace+0x6c>
 400eb38:	00800144 	movi	r2,5
 400eb3c:	dfc00317 	ldw	ra,12(sp)
 400eb40:	dc400217 	ldw	r17,8(sp)
 400eb44:	dc000117 	ldw	r16,4(sp)
 400eb48:	dec00404 	addi	sp,sp,16
 400eb4c:	f800283a 	ret
 400eb50:	008000c4 	movi	r2,3
 400eb54:	003ff906 	br	400eb3c <__alt_mem_onchip_memory2_0+0xfc00d89c>

0400eb58 <__clzsi2>:
 400eb58:	00bfffd4 	movui	r2,65535
 400eb5c:	11000536 	bltu	r2,r4,400eb74 <__clzsi2+0x1c>
 400eb60:	00803fc4 	movi	r2,255
 400eb64:	11000f36 	bltu	r2,r4,400eba4 <__clzsi2+0x4c>
 400eb68:	00800804 	movi	r2,32
 400eb6c:	0007883a 	mov	r3,zero
 400eb70:	00000506 	br	400eb88 <__clzsi2+0x30>
 400eb74:	00804034 	movhi	r2,256
 400eb78:	10bfffc4 	addi	r2,r2,-1
 400eb7c:	11000c2e 	bgeu	r2,r4,400ebb0 <__clzsi2+0x58>
 400eb80:	00800204 	movi	r2,8
 400eb84:	00c00604 	movi	r3,24
 400eb88:	20c8d83a 	srl	r4,r4,r3
 400eb8c:	00c100b4 	movhi	r3,1026
 400eb90:	18de5204 	addi	r3,r3,31048
 400eb94:	1909883a 	add	r4,r3,r4
 400eb98:	20c00003 	ldbu	r3,0(r4)
 400eb9c:	10c5c83a 	sub	r2,r2,r3
 400eba0:	f800283a 	ret
 400eba4:	00800604 	movi	r2,24
 400eba8:	00c00204 	movi	r3,8
 400ebac:	003ff606 	br	400eb88 <__alt_mem_onchip_memory2_0+0xfc00d8e8>
 400ebb0:	00800404 	movi	r2,16
 400ebb4:	1007883a 	mov	r3,r2
 400ebb8:	003ff306 	br	400eb88 <__alt_mem_onchip_memory2_0+0xfc00d8e8>

0400ebbc <abort>:
 400ebbc:	deffff04 	addi	sp,sp,-4
 400ebc0:	01000184 	movi	r4,6
 400ebc4:	dfc00015 	stw	ra,0(sp)
 400ebc8:	400facc0 	call	400facc <raise>
 400ebcc:	01000044 	movi	r4,1
 400ebd0:	401bf1c0 	call	401bf1c <_exit>

0400ebd4 <clock>:
 400ebd4:	008100f4 	movhi	r2,1027
 400ebd8:	10ab8304 	addi	r2,r2,-20980
 400ebdc:	11000017 	ldw	r4,0(r2)
 400ebe0:	defffb04 	addi	sp,sp,-20
 400ebe4:	d80b883a 	mov	r5,sp
 400ebe8:	dfc00415 	stw	ra,16(sp)
 400ebec:	400fcf00 	call	400fcf0 <_times_r>
 400ebf0:	00ffffc4 	movi	r3,-1
 400ebf4:	10c00726 	beq	r2,r3,400ec14 <clock+0x40>
 400ebf8:	d8c00017 	ldw	r3,0(sp)
 400ebfc:	d8800117 	ldw	r2,4(sp)
 400ec00:	1885883a 	add	r2,r3,r2
 400ec04:	d8c00217 	ldw	r3,8(sp)
 400ec08:	10c7883a 	add	r3,r2,r3
 400ec0c:	d8800317 	ldw	r2,12(sp)
 400ec10:	1885883a 	add	r2,r3,r2
 400ec14:	dfc00417 	ldw	ra,16(sp)
 400ec18:	dec00504 	addi	sp,sp,20
 400ec1c:	f800283a 	ret

0400ec20 <malloc>:
 400ec20:	008100f4 	movhi	r2,1027
 400ec24:	10ab8304 	addi	r2,r2,-20980
 400ec28:	200b883a 	mov	r5,r4
 400ec2c:	11000017 	ldw	r4,0(r2)
 400ec30:	400ec481 	jmpi	400ec48 <_malloc_r>

0400ec34 <free>:
 400ec34:	008100f4 	movhi	r2,1027
 400ec38:	10ab8304 	addi	r2,r2,-20980
 400ec3c:	200b883a 	mov	r5,r4
 400ec40:	11000017 	ldw	r4,0(r2)
 400ec44:	401422c1 	jmpi	401422c <_free_r>

0400ec48 <_malloc_r>:
 400ec48:	defff504 	addi	sp,sp,-44
 400ec4c:	dc800315 	stw	r18,12(sp)
 400ec50:	dfc00a15 	stw	ra,40(sp)
 400ec54:	df000915 	stw	fp,36(sp)
 400ec58:	ddc00815 	stw	r23,32(sp)
 400ec5c:	dd800715 	stw	r22,28(sp)
 400ec60:	dd400615 	stw	r21,24(sp)
 400ec64:	dd000515 	stw	r20,20(sp)
 400ec68:	dcc00415 	stw	r19,16(sp)
 400ec6c:	dc400215 	stw	r17,8(sp)
 400ec70:	dc000115 	stw	r16,4(sp)
 400ec74:	288002c4 	addi	r2,r5,11
 400ec78:	00c00584 	movi	r3,22
 400ec7c:	2025883a 	mov	r18,r4
 400ec80:	18807f2e 	bgeu	r3,r2,400ee80 <_malloc_r+0x238>
 400ec84:	047ffe04 	movi	r17,-8
 400ec88:	1462703a 	and	r17,r2,r17
 400ec8c:	8800a316 	blt	r17,zero,400ef1c <_malloc_r+0x2d4>
 400ec90:	8940a236 	bltu	r17,r5,400ef1c <_malloc_r+0x2d4>
 400ec94:	401c5380 	call	401c538 <__malloc_lock>
 400ec98:	00807dc4 	movi	r2,503
 400ec9c:	1441e92e 	bgeu	r2,r17,400f444 <_malloc_r+0x7fc>
 400eca0:	8804d27a 	srli	r2,r17,9
 400eca4:	1000a126 	beq	r2,zero,400ef2c <_malloc_r+0x2e4>
 400eca8:	00c00104 	movi	r3,4
 400ecac:	18811e36 	bltu	r3,r2,400f128 <_malloc_r+0x4e0>
 400ecb0:	8804d1ba 	srli	r2,r17,6
 400ecb4:	12000e44 	addi	r8,r2,57
 400ecb8:	11c00e04 	addi	r7,r2,56
 400ecbc:	4209883a 	add	r4,r8,r8
 400ecc0:	04c100f4 	movhi	r19,1027
 400ecc4:	2109883a 	add	r4,r4,r4
 400ecc8:	9ce02604 	addi	r19,r19,-32616
 400eccc:	2109883a 	add	r4,r4,r4
 400ecd0:	9909883a 	add	r4,r19,r4
 400ecd4:	24000117 	ldw	r16,4(r4)
 400ecd8:	213ffe04 	addi	r4,r4,-8
 400ecdc:	24009726 	beq	r4,r16,400ef3c <_malloc_r+0x2f4>
 400ece0:	80800117 	ldw	r2,4(r16)
 400ece4:	01bfff04 	movi	r6,-4
 400ece8:	014003c4 	movi	r5,15
 400ecec:	1184703a 	and	r2,r2,r6
 400ecf0:	1447c83a 	sub	r3,r2,r17
 400ecf4:	28c00716 	blt	r5,r3,400ed14 <_malloc_r+0xcc>
 400ecf8:	1800920e 	bge	r3,zero,400ef44 <_malloc_r+0x2fc>
 400ecfc:	84000317 	ldw	r16,12(r16)
 400ed00:	24008e26 	beq	r4,r16,400ef3c <_malloc_r+0x2f4>
 400ed04:	80800117 	ldw	r2,4(r16)
 400ed08:	1184703a 	and	r2,r2,r6
 400ed0c:	1447c83a 	sub	r3,r2,r17
 400ed10:	28fff90e 	bge	r5,r3,400ecf8 <__alt_mem_onchip_memory2_0+0xfc00da58>
 400ed14:	3809883a 	mov	r4,r7
 400ed18:	018100f4 	movhi	r6,1027
 400ed1c:	9c000417 	ldw	r16,16(r19)
 400ed20:	31a02604 	addi	r6,r6,-32616
 400ed24:	32000204 	addi	r8,r6,8
 400ed28:	82013426 	beq	r16,r8,400f1fc <_malloc_r+0x5b4>
 400ed2c:	80c00117 	ldw	r3,4(r16)
 400ed30:	00bfff04 	movi	r2,-4
 400ed34:	188e703a 	and	r7,r3,r2
 400ed38:	3c45c83a 	sub	r2,r7,r17
 400ed3c:	00c003c4 	movi	r3,15
 400ed40:	18811f16 	blt	r3,r2,400f1c0 <_malloc_r+0x578>
 400ed44:	32000515 	stw	r8,20(r6)
 400ed48:	32000415 	stw	r8,16(r6)
 400ed4c:	10007f0e 	bge	r2,zero,400ef4c <_malloc_r+0x304>
 400ed50:	00807fc4 	movi	r2,511
 400ed54:	11c0fd36 	bltu	r2,r7,400f14c <_malloc_r+0x504>
 400ed58:	3806d0fa 	srli	r3,r7,3
 400ed5c:	01c00044 	movi	r7,1
 400ed60:	30800117 	ldw	r2,4(r6)
 400ed64:	19400044 	addi	r5,r3,1
 400ed68:	294b883a 	add	r5,r5,r5
 400ed6c:	1807d0ba 	srai	r3,r3,2
 400ed70:	294b883a 	add	r5,r5,r5
 400ed74:	294b883a 	add	r5,r5,r5
 400ed78:	298b883a 	add	r5,r5,r6
 400ed7c:	38c6983a 	sll	r3,r7,r3
 400ed80:	29c00017 	ldw	r7,0(r5)
 400ed84:	2a7ffe04 	addi	r9,r5,-8
 400ed88:	1886b03a 	or	r3,r3,r2
 400ed8c:	82400315 	stw	r9,12(r16)
 400ed90:	81c00215 	stw	r7,8(r16)
 400ed94:	30c00115 	stw	r3,4(r6)
 400ed98:	2c000015 	stw	r16,0(r5)
 400ed9c:	3c000315 	stw	r16,12(r7)
 400eda0:	2005d0ba 	srai	r2,r4,2
 400eda4:	01400044 	movi	r5,1
 400eda8:	288a983a 	sll	r5,r5,r2
 400edac:	19406f36 	bltu	r3,r5,400ef6c <_malloc_r+0x324>
 400edb0:	28c4703a 	and	r2,r5,r3
 400edb4:	10000a1e 	bne	r2,zero,400ede0 <_malloc_r+0x198>
 400edb8:	00bfff04 	movi	r2,-4
 400edbc:	294b883a 	add	r5,r5,r5
 400edc0:	2088703a 	and	r4,r4,r2
 400edc4:	28c4703a 	and	r2,r5,r3
 400edc8:	21000104 	addi	r4,r4,4
 400edcc:	1000041e 	bne	r2,zero,400ede0 <_malloc_r+0x198>
 400edd0:	294b883a 	add	r5,r5,r5
 400edd4:	28c4703a 	and	r2,r5,r3
 400edd8:	21000104 	addi	r4,r4,4
 400eddc:	103ffc26 	beq	r2,zero,400edd0 <__alt_mem_onchip_memory2_0+0xfc00db30>
 400ede0:	02bfff04 	movi	r10,-4
 400ede4:	024003c4 	movi	r9,15
 400ede8:	21800044 	addi	r6,r4,1
 400edec:	318d883a 	add	r6,r6,r6
 400edf0:	318d883a 	add	r6,r6,r6
 400edf4:	318d883a 	add	r6,r6,r6
 400edf8:	998d883a 	add	r6,r19,r6
 400edfc:	333ffe04 	addi	r12,r6,-8
 400ee00:	2017883a 	mov	r11,r4
 400ee04:	31800104 	addi	r6,r6,4
 400ee08:	34000017 	ldw	r16,0(r6)
 400ee0c:	31fffd04 	addi	r7,r6,-12
 400ee10:	81c0041e 	bne	r16,r7,400ee24 <_malloc_r+0x1dc>
 400ee14:	0000fb06 	br	400f204 <_malloc_r+0x5bc>
 400ee18:	1801030e 	bge	r3,zero,400f228 <_malloc_r+0x5e0>
 400ee1c:	84000317 	ldw	r16,12(r16)
 400ee20:	81c0f826 	beq	r16,r7,400f204 <_malloc_r+0x5bc>
 400ee24:	80800117 	ldw	r2,4(r16)
 400ee28:	1284703a 	and	r2,r2,r10
 400ee2c:	1447c83a 	sub	r3,r2,r17
 400ee30:	48fff90e 	bge	r9,r3,400ee18 <__alt_mem_onchip_memory2_0+0xfc00db78>
 400ee34:	80800317 	ldw	r2,12(r16)
 400ee38:	81000217 	ldw	r4,8(r16)
 400ee3c:	89400054 	ori	r5,r17,1
 400ee40:	81400115 	stw	r5,4(r16)
 400ee44:	20800315 	stw	r2,12(r4)
 400ee48:	11000215 	stw	r4,8(r2)
 400ee4c:	8463883a 	add	r17,r16,r17
 400ee50:	9c400515 	stw	r17,20(r19)
 400ee54:	9c400415 	stw	r17,16(r19)
 400ee58:	18800054 	ori	r2,r3,1
 400ee5c:	88800115 	stw	r2,4(r17)
 400ee60:	8a000315 	stw	r8,12(r17)
 400ee64:	8a000215 	stw	r8,8(r17)
 400ee68:	88e3883a 	add	r17,r17,r3
 400ee6c:	88c00015 	stw	r3,0(r17)
 400ee70:	9009883a 	mov	r4,r18
 400ee74:	401c55c0 	call	401c55c <__malloc_unlock>
 400ee78:	80800204 	addi	r2,r16,8
 400ee7c:	00001b06 	br	400eeec <_malloc_r+0x2a4>
 400ee80:	04400404 	movi	r17,16
 400ee84:	89402536 	bltu	r17,r5,400ef1c <_malloc_r+0x2d4>
 400ee88:	401c5380 	call	401c538 <__malloc_lock>
 400ee8c:	00800184 	movi	r2,6
 400ee90:	01000084 	movi	r4,2
 400ee94:	04c100f4 	movhi	r19,1027
 400ee98:	1085883a 	add	r2,r2,r2
 400ee9c:	9ce02604 	addi	r19,r19,-32616
 400eea0:	1085883a 	add	r2,r2,r2
 400eea4:	9885883a 	add	r2,r19,r2
 400eea8:	14000117 	ldw	r16,4(r2)
 400eeac:	10fffe04 	addi	r3,r2,-8
 400eeb0:	80c0d926 	beq	r16,r3,400f218 <_malloc_r+0x5d0>
 400eeb4:	80c00117 	ldw	r3,4(r16)
 400eeb8:	81000317 	ldw	r4,12(r16)
 400eebc:	00bfff04 	movi	r2,-4
 400eec0:	1884703a 	and	r2,r3,r2
 400eec4:	81400217 	ldw	r5,8(r16)
 400eec8:	8085883a 	add	r2,r16,r2
 400eecc:	10c00117 	ldw	r3,4(r2)
 400eed0:	29000315 	stw	r4,12(r5)
 400eed4:	21400215 	stw	r5,8(r4)
 400eed8:	18c00054 	ori	r3,r3,1
 400eedc:	10c00115 	stw	r3,4(r2)
 400eee0:	9009883a 	mov	r4,r18
 400eee4:	401c55c0 	call	401c55c <__malloc_unlock>
 400eee8:	80800204 	addi	r2,r16,8
 400eeec:	dfc00a17 	ldw	ra,40(sp)
 400eef0:	df000917 	ldw	fp,36(sp)
 400eef4:	ddc00817 	ldw	r23,32(sp)
 400eef8:	dd800717 	ldw	r22,28(sp)
 400eefc:	dd400617 	ldw	r21,24(sp)
 400ef00:	dd000517 	ldw	r20,20(sp)
 400ef04:	dcc00417 	ldw	r19,16(sp)
 400ef08:	dc800317 	ldw	r18,12(sp)
 400ef0c:	dc400217 	ldw	r17,8(sp)
 400ef10:	dc000117 	ldw	r16,4(sp)
 400ef14:	dec00b04 	addi	sp,sp,44
 400ef18:	f800283a 	ret
 400ef1c:	00800304 	movi	r2,12
 400ef20:	90800015 	stw	r2,0(r18)
 400ef24:	0005883a 	mov	r2,zero
 400ef28:	003ff006 	br	400eeec <__alt_mem_onchip_memory2_0+0xfc00dc4c>
 400ef2c:	01002004 	movi	r4,128
 400ef30:	02001004 	movi	r8,64
 400ef34:	01c00fc4 	movi	r7,63
 400ef38:	003f6106 	br	400ecc0 <__alt_mem_onchip_memory2_0+0xfc00da20>
 400ef3c:	4009883a 	mov	r4,r8
 400ef40:	003f7506 	br	400ed18 <__alt_mem_onchip_memory2_0+0xfc00da78>
 400ef44:	81000317 	ldw	r4,12(r16)
 400ef48:	003fde06 	br	400eec4 <__alt_mem_onchip_memory2_0+0xfc00dc24>
 400ef4c:	81c5883a 	add	r2,r16,r7
 400ef50:	11400117 	ldw	r5,4(r2)
 400ef54:	9009883a 	mov	r4,r18
 400ef58:	29400054 	ori	r5,r5,1
 400ef5c:	11400115 	stw	r5,4(r2)
 400ef60:	401c55c0 	call	401c55c <__malloc_unlock>
 400ef64:	80800204 	addi	r2,r16,8
 400ef68:	003fe006 	br	400eeec <__alt_mem_onchip_memory2_0+0xfc00dc4c>
 400ef6c:	9c000217 	ldw	r16,8(r19)
 400ef70:	00bfff04 	movi	r2,-4
 400ef74:	85800117 	ldw	r22,4(r16)
 400ef78:	b0ac703a 	and	r22,r22,r2
 400ef7c:	b4400336 	bltu	r22,r17,400ef8c <_malloc_r+0x344>
 400ef80:	b445c83a 	sub	r2,r22,r17
 400ef84:	00c003c4 	movi	r3,15
 400ef88:	18805d16 	blt	r3,r2,400f100 <_malloc_r+0x4b8>
 400ef8c:	05c100f4 	movhi	r23,1027
 400ef90:	008100f4 	movhi	r2,1027
 400ef94:	10b81404 	addi	r2,r2,-8112
 400ef98:	bdeb8404 	addi	r23,r23,-20976
 400ef9c:	15400017 	ldw	r21,0(r2)
 400efa0:	b8c00017 	ldw	r3,0(r23)
 400efa4:	00bfffc4 	movi	r2,-1
 400efa8:	858d883a 	add	r6,r16,r22
 400efac:	8d6b883a 	add	r21,r17,r21
 400efb0:	1880ea26 	beq	r3,r2,400f35c <_malloc_r+0x714>
 400efb4:	ad4403c4 	addi	r21,r21,4111
 400efb8:	00bc0004 	movi	r2,-4096
 400efbc:	a8aa703a 	and	r21,r21,r2
 400efc0:	a80b883a 	mov	r5,r21
 400efc4:	9009883a 	mov	r4,r18
 400efc8:	d9800015 	stw	r6,0(sp)
 400efcc:	400f8240 	call	400f824 <_sbrk_r>
 400efd0:	1029883a 	mov	r20,r2
 400efd4:	00bfffc4 	movi	r2,-1
 400efd8:	d9800017 	ldw	r6,0(sp)
 400efdc:	a080e826 	beq	r20,r2,400f380 <_malloc_r+0x738>
 400efe0:	a180a636 	bltu	r20,r6,400f27c <_malloc_r+0x634>
 400efe4:	070100f4 	movhi	fp,1027
 400efe8:	e7385804 	addi	fp,fp,-7840
 400efec:	e0800017 	ldw	r2,0(fp)
 400eff0:	a887883a 	add	r3,r21,r2
 400eff4:	e0c00015 	stw	r3,0(fp)
 400eff8:	3500e626 	beq	r6,r20,400f394 <_malloc_r+0x74c>
 400effc:	b9000017 	ldw	r4,0(r23)
 400f000:	00bfffc4 	movi	r2,-1
 400f004:	2080ee26 	beq	r4,r2,400f3c0 <_malloc_r+0x778>
 400f008:	a185c83a 	sub	r2,r20,r6
 400f00c:	10c5883a 	add	r2,r2,r3
 400f010:	e0800015 	stw	r2,0(fp)
 400f014:	a0c001cc 	andi	r3,r20,7
 400f018:	1800bc26 	beq	r3,zero,400f30c <_malloc_r+0x6c4>
 400f01c:	a0e9c83a 	sub	r20,r20,r3
 400f020:	00840204 	movi	r2,4104
 400f024:	a5000204 	addi	r20,r20,8
 400f028:	10c7c83a 	sub	r3,r2,r3
 400f02c:	a545883a 	add	r2,r20,r21
 400f030:	1083ffcc 	andi	r2,r2,4095
 400f034:	18abc83a 	sub	r21,r3,r2
 400f038:	a80b883a 	mov	r5,r21
 400f03c:	9009883a 	mov	r4,r18
 400f040:	400f8240 	call	400f824 <_sbrk_r>
 400f044:	00ffffc4 	movi	r3,-1
 400f048:	10c0e126 	beq	r2,r3,400f3d0 <_malloc_r+0x788>
 400f04c:	1505c83a 	sub	r2,r2,r20
 400f050:	1545883a 	add	r2,r2,r21
 400f054:	10800054 	ori	r2,r2,1
 400f058:	e0c00017 	ldw	r3,0(fp)
 400f05c:	9d000215 	stw	r20,8(r19)
 400f060:	a0800115 	stw	r2,4(r20)
 400f064:	a8c7883a 	add	r3,r21,r3
 400f068:	e0c00015 	stw	r3,0(fp)
 400f06c:	84c00e26 	beq	r16,r19,400f0a8 <_malloc_r+0x460>
 400f070:	018003c4 	movi	r6,15
 400f074:	3580a72e 	bgeu	r6,r22,400f314 <_malloc_r+0x6cc>
 400f078:	81400117 	ldw	r5,4(r16)
 400f07c:	013ffe04 	movi	r4,-8
 400f080:	b0bffd04 	addi	r2,r22,-12
 400f084:	1104703a 	and	r2,r2,r4
 400f088:	2900004c 	andi	r4,r5,1
 400f08c:	2088b03a 	or	r4,r4,r2
 400f090:	81000115 	stw	r4,4(r16)
 400f094:	01400144 	movi	r5,5
 400f098:	8089883a 	add	r4,r16,r2
 400f09c:	21400115 	stw	r5,4(r4)
 400f0a0:	21400215 	stw	r5,8(r4)
 400f0a4:	3080cd36 	bltu	r6,r2,400f3dc <_malloc_r+0x794>
 400f0a8:	008100f4 	movhi	r2,1027
 400f0ac:	10b81304 	addi	r2,r2,-8116
 400f0b0:	11000017 	ldw	r4,0(r2)
 400f0b4:	20c0012e 	bgeu	r4,r3,400f0bc <_malloc_r+0x474>
 400f0b8:	10c00015 	stw	r3,0(r2)
 400f0bc:	008100f4 	movhi	r2,1027
 400f0c0:	10b81204 	addi	r2,r2,-8120
 400f0c4:	11000017 	ldw	r4,0(r2)
 400f0c8:	9c000217 	ldw	r16,8(r19)
 400f0cc:	20c0012e 	bgeu	r4,r3,400f0d4 <_malloc_r+0x48c>
 400f0d0:	10c00015 	stw	r3,0(r2)
 400f0d4:	80c00117 	ldw	r3,4(r16)
 400f0d8:	00bfff04 	movi	r2,-4
 400f0dc:	1886703a 	and	r3,r3,r2
 400f0e0:	1c45c83a 	sub	r2,r3,r17
 400f0e4:	1c400236 	bltu	r3,r17,400f0f0 <_malloc_r+0x4a8>
 400f0e8:	00c003c4 	movi	r3,15
 400f0ec:	18800416 	blt	r3,r2,400f100 <_malloc_r+0x4b8>
 400f0f0:	9009883a 	mov	r4,r18
 400f0f4:	401c55c0 	call	401c55c <__malloc_unlock>
 400f0f8:	0005883a 	mov	r2,zero
 400f0fc:	003f7b06 	br	400eeec <__alt_mem_onchip_memory2_0+0xfc00dc4c>
 400f100:	88c00054 	ori	r3,r17,1
 400f104:	80c00115 	stw	r3,4(r16)
 400f108:	8463883a 	add	r17,r16,r17
 400f10c:	10800054 	ori	r2,r2,1
 400f110:	9c400215 	stw	r17,8(r19)
 400f114:	88800115 	stw	r2,4(r17)
 400f118:	9009883a 	mov	r4,r18
 400f11c:	401c55c0 	call	401c55c <__malloc_unlock>
 400f120:	80800204 	addi	r2,r16,8
 400f124:	003f7106 	br	400eeec <__alt_mem_onchip_memory2_0+0xfc00dc4c>
 400f128:	00c00504 	movi	r3,20
 400f12c:	18804a2e 	bgeu	r3,r2,400f258 <_malloc_r+0x610>
 400f130:	00c01504 	movi	r3,84
 400f134:	18806e36 	bltu	r3,r2,400f2f0 <_malloc_r+0x6a8>
 400f138:	8804d33a 	srli	r2,r17,12
 400f13c:	12001bc4 	addi	r8,r2,111
 400f140:	11c01b84 	addi	r7,r2,110
 400f144:	4209883a 	add	r4,r8,r8
 400f148:	003edd06 	br	400ecc0 <__alt_mem_onchip_memory2_0+0xfc00da20>
 400f14c:	3804d27a 	srli	r2,r7,9
 400f150:	00c00104 	movi	r3,4
 400f154:	1880442e 	bgeu	r3,r2,400f268 <_malloc_r+0x620>
 400f158:	00c00504 	movi	r3,20
 400f15c:	18808136 	bltu	r3,r2,400f364 <_malloc_r+0x71c>
 400f160:	11401704 	addi	r5,r2,92
 400f164:	10c016c4 	addi	r3,r2,91
 400f168:	294b883a 	add	r5,r5,r5
 400f16c:	294b883a 	add	r5,r5,r5
 400f170:	294b883a 	add	r5,r5,r5
 400f174:	994b883a 	add	r5,r19,r5
 400f178:	28800017 	ldw	r2,0(r5)
 400f17c:	018100f4 	movhi	r6,1027
 400f180:	297ffe04 	addi	r5,r5,-8
 400f184:	31a02604 	addi	r6,r6,-32616
 400f188:	28806526 	beq	r5,r2,400f320 <_malloc_r+0x6d8>
 400f18c:	01bfff04 	movi	r6,-4
 400f190:	10c00117 	ldw	r3,4(r2)
 400f194:	1986703a 	and	r3,r3,r6
 400f198:	38c0022e 	bgeu	r7,r3,400f1a4 <_malloc_r+0x55c>
 400f19c:	10800217 	ldw	r2,8(r2)
 400f1a0:	28bffb1e 	bne	r5,r2,400f190 <__alt_mem_onchip_memory2_0+0xfc00def0>
 400f1a4:	11400317 	ldw	r5,12(r2)
 400f1a8:	98c00117 	ldw	r3,4(r19)
 400f1ac:	81400315 	stw	r5,12(r16)
 400f1b0:	80800215 	stw	r2,8(r16)
 400f1b4:	2c000215 	stw	r16,8(r5)
 400f1b8:	14000315 	stw	r16,12(r2)
 400f1bc:	003ef806 	br	400eda0 <__alt_mem_onchip_memory2_0+0xfc00db00>
 400f1c0:	88c00054 	ori	r3,r17,1
 400f1c4:	80c00115 	stw	r3,4(r16)
 400f1c8:	8463883a 	add	r17,r16,r17
 400f1cc:	34400515 	stw	r17,20(r6)
 400f1d0:	34400415 	stw	r17,16(r6)
 400f1d4:	10c00054 	ori	r3,r2,1
 400f1d8:	8a000315 	stw	r8,12(r17)
 400f1dc:	8a000215 	stw	r8,8(r17)
 400f1e0:	88c00115 	stw	r3,4(r17)
 400f1e4:	88a3883a 	add	r17,r17,r2
 400f1e8:	88800015 	stw	r2,0(r17)
 400f1ec:	9009883a 	mov	r4,r18
 400f1f0:	401c55c0 	call	401c55c <__malloc_unlock>
 400f1f4:	80800204 	addi	r2,r16,8
 400f1f8:	003f3c06 	br	400eeec <__alt_mem_onchip_memory2_0+0xfc00dc4c>
 400f1fc:	30c00117 	ldw	r3,4(r6)
 400f200:	003ee706 	br	400eda0 <__alt_mem_onchip_memory2_0+0xfc00db00>
 400f204:	5ac00044 	addi	r11,r11,1
 400f208:	588000cc 	andi	r2,r11,3
 400f20c:	31800204 	addi	r6,r6,8
 400f210:	103efd1e 	bne	r2,zero,400ee08 <__alt_mem_onchip_memory2_0+0xfc00db68>
 400f214:	00002406 	br	400f2a8 <_malloc_r+0x660>
 400f218:	14000317 	ldw	r16,12(r2)
 400f21c:	143f251e 	bne	r2,r16,400eeb4 <__alt_mem_onchip_memory2_0+0xfc00dc14>
 400f220:	21000084 	addi	r4,r4,2
 400f224:	003ebc06 	br	400ed18 <__alt_mem_onchip_memory2_0+0xfc00da78>
 400f228:	8085883a 	add	r2,r16,r2
 400f22c:	10c00117 	ldw	r3,4(r2)
 400f230:	81000317 	ldw	r4,12(r16)
 400f234:	81400217 	ldw	r5,8(r16)
 400f238:	18c00054 	ori	r3,r3,1
 400f23c:	10c00115 	stw	r3,4(r2)
 400f240:	29000315 	stw	r4,12(r5)
 400f244:	21400215 	stw	r5,8(r4)
 400f248:	9009883a 	mov	r4,r18
 400f24c:	401c55c0 	call	401c55c <__malloc_unlock>
 400f250:	80800204 	addi	r2,r16,8
 400f254:	003f2506 	br	400eeec <__alt_mem_onchip_memory2_0+0xfc00dc4c>
 400f258:	12001704 	addi	r8,r2,92
 400f25c:	11c016c4 	addi	r7,r2,91
 400f260:	4209883a 	add	r4,r8,r8
 400f264:	003e9606 	br	400ecc0 <__alt_mem_onchip_memory2_0+0xfc00da20>
 400f268:	3804d1ba 	srli	r2,r7,6
 400f26c:	11400e44 	addi	r5,r2,57
 400f270:	10c00e04 	addi	r3,r2,56
 400f274:	294b883a 	add	r5,r5,r5
 400f278:	003fbc06 	br	400f16c <__alt_mem_onchip_memory2_0+0xfc00decc>
 400f27c:	84ff5926 	beq	r16,r19,400efe4 <__alt_mem_onchip_memory2_0+0xfc00dd44>
 400f280:	008100f4 	movhi	r2,1027
 400f284:	10a02604 	addi	r2,r2,-32616
 400f288:	14000217 	ldw	r16,8(r2)
 400f28c:	00bfff04 	movi	r2,-4
 400f290:	80c00117 	ldw	r3,4(r16)
 400f294:	1886703a 	and	r3,r3,r2
 400f298:	003f9106 	br	400f0e0 <__alt_mem_onchip_memory2_0+0xfc00de40>
 400f29c:	60800217 	ldw	r2,8(r12)
 400f2a0:	213fffc4 	addi	r4,r4,-1
 400f2a4:	1300651e 	bne	r2,r12,400f43c <_malloc_r+0x7f4>
 400f2a8:	208000cc 	andi	r2,r4,3
 400f2ac:	633ffe04 	addi	r12,r12,-8
 400f2b0:	103ffa1e 	bne	r2,zero,400f29c <__alt_mem_onchip_memory2_0+0xfc00dffc>
 400f2b4:	98800117 	ldw	r2,4(r19)
 400f2b8:	0146303a 	nor	r3,zero,r5
 400f2bc:	1884703a 	and	r2,r3,r2
 400f2c0:	98800115 	stw	r2,4(r19)
 400f2c4:	294b883a 	add	r5,r5,r5
 400f2c8:	117f2836 	bltu	r2,r5,400ef6c <__alt_mem_onchip_memory2_0+0xfc00dccc>
 400f2cc:	283f2726 	beq	r5,zero,400ef6c <__alt_mem_onchip_memory2_0+0xfc00dccc>
 400f2d0:	2886703a 	and	r3,r5,r2
 400f2d4:	5809883a 	mov	r4,r11
 400f2d8:	183ec31e 	bne	r3,zero,400ede8 <__alt_mem_onchip_memory2_0+0xfc00db48>
 400f2dc:	294b883a 	add	r5,r5,r5
 400f2e0:	2886703a 	and	r3,r5,r2
 400f2e4:	21000104 	addi	r4,r4,4
 400f2e8:	183ffc26 	beq	r3,zero,400f2dc <__alt_mem_onchip_memory2_0+0xfc00e03c>
 400f2ec:	003ebe06 	br	400ede8 <__alt_mem_onchip_memory2_0+0xfc00db48>
 400f2f0:	00c05504 	movi	r3,340
 400f2f4:	18801236 	bltu	r3,r2,400f340 <_malloc_r+0x6f8>
 400f2f8:	8804d3fa 	srli	r2,r17,15
 400f2fc:	12001e04 	addi	r8,r2,120
 400f300:	11c01dc4 	addi	r7,r2,119
 400f304:	4209883a 	add	r4,r8,r8
 400f308:	003e6d06 	br	400ecc0 <__alt_mem_onchip_memory2_0+0xfc00da20>
 400f30c:	00c40004 	movi	r3,4096
 400f310:	003f4606 	br	400f02c <__alt_mem_onchip_memory2_0+0xfc00dd8c>
 400f314:	00800044 	movi	r2,1
 400f318:	a0800115 	stw	r2,4(r20)
 400f31c:	003f7406 	br	400f0f0 <__alt_mem_onchip_memory2_0+0xfc00de50>
 400f320:	1805d0ba 	srai	r2,r3,2
 400f324:	01c00044 	movi	r7,1
 400f328:	30c00117 	ldw	r3,4(r6)
 400f32c:	388e983a 	sll	r7,r7,r2
 400f330:	2805883a 	mov	r2,r5
 400f334:	38c6b03a 	or	r3,r7,r3
 400f338:	30c00115 	stw	r3,4(r6)
 400f33c:	003f9b06 	br	400f1ac <__alt_mem_onchip_memory2_0+0xfc00df0c>
 400f340:	00c15504 	movi	r3,1364
 400f344:	18801a36 	bltu	r3,r2,400f3b0 <_malloc_r+0x768>
 400f348:	8804d4ba 	srli	r2,r17,18
 400f34c:	12001f44 	addi	r8,r2,125
 400f350:	11c01f04 	addi	r7,r2,124
 400f354:	4209883a 	add	r4,r8,r8
 400f358:	003e5906 	br	400ecc0 <__alt_mem_onchip_memory2_0+0xfc00da20>
 400f35c:	ad400404 	addi	r21,r21,16
 400f360:	003f1706 	br	400efc0 <__alt_mem_onchip_memory2_0+0xfc00dd20>
 400f364:	00c01504 	movi	r3,84
 400f368:	18802336 	bltu	r3,r2,400f3f8 <_malloc_r+0x7b0>
 400f36c:	3804d33a 	srli	r2,r7,12
 400f370:	11401bc4 	addi	r5,r2,111
 400f374:	10c01b84 	addi	r3,r2,110
 400f378:	294b883a 	add	r5,r5,r5
 400f37c:	003f7b06 	br	400f16c <__alt_mem_onchip_memory2_0+0xfc00decc>
 400f380:	9c000217 	ldw	r16,8(r19)
 400f384:	00bfff04 	movi	r2,-4
 400f388:	80c00117 	ldw	r3,4(r16)
 400f38c:	1886703a 	and	r3,r3,r2
 400f390:	003f5306 	br	400f0e0 <__alt_mem_onchip_memory2_0+0xfc00de40>
 400f394:	3083ffcc 	andi	r2,r6,4095
 400f398:	103f181e 	bne	r2,zero,400effc <__alt_mem_onchip_memory2_0+0xfc00dd5c>
 400f39c:	99000217 	ldw	r4,8(r19)
 400f3a0:	b545883a 	add	r2,r22,r21
 400f3a4:	10800054 	ori	r2,r2,1
 400f3a8:	20800115 	stw	r2,4(r4)
 400f3ac:	003f3e06 	br	400f0a8 <__alt_mem_onchip_memory2_0+0xfc00de08>
 400f3b0:	01003f84 	movi	r4,254
 400f3b4:	02001fc4 	movi	r8,127
 400f3b8:	01c01f84 	movi	r7,126
 400f3bc:	003e4006 	br	400ecc0 <__alt_mem_onchip_memory2_0+0xfc00da20>
 400f3c0:	008100f4 	movhi	r2,1027
 400f3c4:	10ab8404 	addi	r2,r2,-20976
 400f3c8:	15000015 	stw	r20,0(r2)
 400f3cc:	003f1106 	br	400f014 <__alt_mem_onchip_memory2_0+0xfc00dd74>
 400f3d0:	00800044 	movi	r2,1
 400f3d4:	002b883a 	mov	r21,zero
 400f3d8:	003f1f06 	br	400f058 <__alt_mem_onchip_memory2_0+0xfc00ddb8>
 400f3dc:	81400204 	addi	r5,r16,8
 400f3e0:	9009883a 	mov	r4,r18
 400f3e4:	401422c0 	call	401422c <_free_r>
 400f3e8:	008100f4 	movhi	r2,1027
 400f3ec:	10b85804 	addi	r2,r2,-7840
 400f3f0:	10c00017 	ldw	r3,0(r2)
 400f3f4:	003f2c06 	br	400f0a8 <__alt_mem_onchip_memory2_0+0xfc00de08>
 400f3f8:	00c05504 	movi	r3,340
 400f3fc:	18800536 	bltu	r3,r2,400f414 <_malloc_r+0x7cc>
 400f400:	3804d3fa 	srli	r2,r7,15
 400f404:	11401e04 	addi	r5,r2,120
 400f408:	10c01dc4 	addi	r3,r2,119
 400f40c:	294b883a 	add	r5,r5,r5
 400f410:	003f5606 	br	400f16c <__alt_mem_onchip_memory2_0+0xfc00decc>
 400f414:	00c15504 	movi	r3,1364
 400f418:	18800536 	bltu	r3,r2,400f430 <_malloc_r+0x7e8>
 400f41c:	3804d4ba 	srli	r2,r7,18
 400f420:	11401f44 	addi	r5,r2,125
 400f424:	10c01f04 	addi	r3,r2,124
 400f428:	294b883a 	add	r5,r5,r5
 400f42c:	003f4f06 	br	400f16c <__alt_mem_onchip_memory2_0+0xfc00decc>
 400f430:	01403f84 	movi	r5,254
 400f434:	00c01f84 	movi	r3,126
 400f438:	003f4c06 	br	400f16c <__alt_mem_onchip_memory2_0+0xfc00decc>
 400f43c:	98800117 	ldw	r2,4(r19)
 400f440:	003fa006 	br	400f2c4 <__alt_mem_onchip_memory2_0+0xfc00e024>
 400f444:	8808d0fa 	srli	r4,r17,3
 400f448:	20800044 	addi	r2,r4,1
 400f44c:	1085883a 	add	r2,r2,r2
 400f450:	003e9006 	br	400ee94 <__alt_mem_onchip_memory2_0+0xfc00dbf4>

0400f454 <memcpy>:
 400f454:	defffd04 	addi	sp,sp,-12
 400f458:	dfc00215 	stw	ra,8(sp)
 400f45c:	dc400115 	stw	r17,4(sp)
 400f460:	dc000015 	stw	r16,0(sp)
 400f464:	00c003c4 	movi	r3,15
 400f468:	2005883a 	mov	r2,r4
 400f46c:	1980452e 	bgeu	r3,r6,400f584 <memcpy+0x130>
 400f470:	2906b03a 	or	r3,r5,r4
 400f474:	18c000cc 	andi	r3,r3,3
 400f478:	1800441e 	bne	r3,zero,400f58c <memcpy+0x138>
 400f47c:	347ffc04 	addi	r17,r6,-16
 400f480:	8822d13a 	srli	r17,r17,4
 400f484:	28c00104 	addi	r3,r5,4
 400f488:	23400104 	addi	r13,r4,4
 400f48c:	8820913a 	slli	r16,r17,4
 400f490:	2b000204 	addi	r12,r5,8
 400f494:	22c00204 	addi	r11,r4,8
 400f498:	84000504 	addi	r16,r16,20
 400f49c:	2a800304 	addi	r10,r5,12
 400f4a0:	22400304 	addi	r9,r4,12
 400f4a4:	2c21883a 	add	r16,r5,r16
 400f4a8:	2811883a 	mov	r8,r5
 400f4ac:	200f883a 	mov	r7,r4
 400f4b0:	41000017 	ldw	r4,0(r8)
 400f4b4:	1fc00017 	ldw	ra,0(r3)
 400f4b8:	63c00017 	ldw	r15,0(r12)
 400f4bc:	39000015 	stw	r4,0(r7)
 400f4c0:	53800017 	ldw	r14,0(r10)
 400f4c4:	6fc00015 	stw	ra,0(r13)
 400f4c8:	5bc00015 	stw	r15,0(r11)
 400f4cc:	4b800015 	stw	r14,0(r9)
 400f4d0:	18c00404 	addi	r3,r3,16
 400f4d4:	39c00404 	addi	r7,r7,16
 400f4d8:	42000404 	addi	r8,r8,16
 400f4dc:	6b400404 	addi	r13,r13,16
 400f4e0:	63000404 	addi	r12,r12,16
 400f4e4:	5ac00404 	addi	r11,r11,16
 400f4e8:	52800404 	addi	r10,r10,16
 400f4ec:	4a400404 	addi	r9,r9,16
 400f4f0:	1c3fef1e 	bne	r3,r16,400f4b0 <__alt_mem_onchip_memory2_0+0xfc00e210>
 400f4f4:	89c00044 	addi	r7,r17,1
 400f4f8:	380e913a 	slli	r7,r7,4
 400f4fc:	310003cc 	andi	r4,r6,15
 400f500:	02c000c4 	movi	r11,3
 400f504:	11c7883a 	add	r3,r2,r7
 400f508:	29cb883a 	add	r5,r5,r7
 400f50c:	5900212e 	bgeu	r11,r4,400f594 <memcpy+0x140>
 400f510:	1813883a 	mov	r9,r3
 400f514:	2811883a 	mov	r8,r5
 400f518:	200f883a 	mov	r7,r4
 400f51c:	42800017 	ldw	r10,0(r8)
 400f520:	4a400104 	addi	r9,r9,4
 400f524:	39ffff04 	addi	r7,r7,-4
 400f528:	4abfff15 	stw	r10,-4(r9)
 400f52c:	42000104 	addi	r8,r8,4
 400f530:	59fffa36 	bltu	r11,r7,400f51c <__alt_mem_onchip_memory2_0+0xfc00e27c>
 400f534:	213fff04 	addi	r4,r4,-4
 400f538:	2008d0ba 	srli	r4,r4,2
 400f53c:	318000cc 	andi	r6,r6,3
 400f540:	21000044 	addi	r4,r4,1
 400f544:	2109883a 	add	r4,r4,r4
 400f548:	2109883a 	add	r4,r4,r4
 400f54c:	1907883a 	add	r3,r3,r4
 400f550:	290b883a 	add	r5,r5,r4
 400f554:	30000626 	beq	r6,zero,400f570 <memcpy+0x11c>
 400f558:	198d883a 	add	r6,r3,r6
 400f55c:	29c00003 	ldbu	r7,0(r5)
 400f560:	18c00044 	addi	r3,r3,1
 400f564:	29400044 	addi	r5,r5,1
 400f568:	19ffffc5 	stb	r7,-1(r3)
 400f56c:	19bffb1e 	bne	r3,r6,400f55c <__alt_mem_onchip_memory2_0+0xfc00e2bc>
 400f570:	dfc00217 	ldw	ra,8(sp)
 400f574:	dc400117 	ldw	r17,4(sp)
 400f578:	dc000017 	ldw	r16,0(sp)
 400f57c:	dec00304 	addi	sp,sp,12
 400f580:	f800283a 	ret
 400f584:	2007883a 	mov	r3,r4
 400f588:	003ff206 	br	400f554 <__alt_mem_onchip_memory2_0+0xfc00e2b4>
 400f58c:	2007883a 	mov	r3,r4
 400f590:	003ff106 	br	400f558 <__alt_mem_onchip_memory2_0+0xfc00e2b8>
 400f594:	200d883a 	mov	r6,r4
 400f598:	003fee06 	br	400f554 <__alt_mem_onchip_memory2_0+0xfc00e2b4>

0400f59c <memset>:
 400f59c:	20c000cc 	andi	r3,r4,3
 400f5a0:	2005883a 	mov	r2,r4
 400f5a4:	18004426 	beq	r3,zero,400f6b8 <memset+0x11c>
 400f5a8:	31ffffc4 	addi	r7,r6,-1
 400f5ac:	30004026 	beq	r6,zero,400f6b0 <memset+0x114>
 400f5b0:	2813883a 	mov	r9,r5
 400f5b4:	200d883a 	mov	r6,r4
 400f5b8:	2007883a 	mov	r3,r4
 400f5bc:	00000406 	br	400f5d0 <memset+0x34>
 400f5c0:	3a3fffc4 	addi	r8,r7,-1
 400f5c4:	31800044 	addi	r6,r6,1
 400f5c8:	38003926 	beq	r7,zero,400f6b0 <memset+0x114>
 400f5cc:	400f883a 	mov	r7,r8
 400f5d0:	18c00044 	addi	r3,r3,1
 400f5d4:	32400005 	stb	r9,0(r6)
 400f5d8:	1a0000cc 	andi	r8,r3,3
 400f5dc:	403ff81e 	bne	r8,zero,400f5c0 <__alt_mem_onchip_memory2_0+0xfc00e320>
 400f5e0:	010000c4 	movi	r4,3
 400f5e4:	21c02d2e 	bgeu	r4,r7,400f69c <memset+0x100>
 400f5e8:	29003fcc 	andi	r4,r5,255
 400f5ec:	200c923a 	slli	r6,r4,8
 400f5f0:	3108b03a 	or	r4,r6,r4
 400f5f4:	200c943a 	slli	r6,r4,16
 400f5f8:	218cb03a 	or	r6,r4,r6
 400f5fc:	010003c4 	movi	r4,15
 400f600:	21c0182e 	bgeu	r4,r7,400f664 <memset+0xc8>
 400f604:	3b3ffc04 	addi	r12,r7,-16
 400f608:	6018d13a 	srli	r12,r12,4
 400f60c:	1a000104 	addi	r8,r3,4
 400f610:	1ac00204 	addi	r11,r3,8
 400f614:	6008913a 	slli	r4,r12,4
 400f618:	1a800304 	addi	r10,r3,12
 400f61c:	1813883a 	mov	r9,r3
 400f620:	21000504 	addi	r4,r4,20
 400f624:	1909883a 	add	r4,r3,r4
 400f628:	49800015 	stw	r6,0(r9)
 400f62c:	41800015 	stw	r6,0(r8)
 400f630:	59800015 	stw	r6,0(r11)
 400f634:	51800015 	stw	r6,0(r10)
 400f638:	42000404 	addi	r8,r8,16
 400f63c:	4a400404 	addi	r9,r9,16
 400f640:	5ac00404 	addi	r11,r11,16
 400f644:	52800404 	addi	r10,r10,16
 400f648:	413ff71e 	bne	r8,r4,400f628 <__alt_mem_onchip_memory2_0+0xfc00e388>
 400f64c:	63000044 	addi	r12,r12,1
 400f650:	6018913a 	slli	r12,r12,4
 400f654:	39c003cc 	andi	r7,r7,15
 400f658:	010000c4 	movi	r4,3
 400f65c:	1b07883a 	add	r3,r3,r12
 400f660:	21c00e2e 	bgeu	r4,r7,400f69c <memset+0x100>
 400f664:	1813883a 	mov	r9,r3
 400f668:	3811883a 	mov	r8,r7
 400f66c:	010000c4 	movi	r4,3
 400f670:	49800015 	stw	r6,0(r9)
 400f674:	423fff04 	addi	r8,r8,-4
 400f678:	4a400104 	addi	r9,r9,4
 400f67c:	223ffc36 	bltu	r4,r8,400f670 <__alt_mem_onchip_memory2_0+0xfc00e3d0>
 400f680:	393fff04 	addi	r4,r7,-4
 400f684:	2008d0ba 	srli	r4,r4,2
 400f688:	39c000cc 	andi	r7,r7,3
 400f68c:	21000044 	addi	r4,r4,1
 400f690:	2109883a 	add	r4,r4,r4
 400f694:	2109883a 	add	r4,r4,r4
 400f698:	1907883a 	add	r3,r3,r4
 400f69c:	38000526 	beq	r7,zero,400f6b4 <memset+0x118>
 400f6a0:	19cf883a 	add	r7,r3,r7
 400f6a4:	19400005 	stb	r5,0(r3)
 400f6a8:	18c00044 	addi	r3,r3,1
 400f6ac:	38fffd1e 	bne	r7,r3,400f6a4 <__alt_mem_onchip_memory2_0+0xfc00e404>
 400f6b0:	f800283a 	ret
 400f6b4:	f800283a 	ret
 400f6b8:	2007883a 	mov	r3,r4
 400f6bc:	300f883a 	mov	r7,r6
 400f6c0:	003fc706 	br	400f5e0 <__alt_mem_onchip_memory2_0+0xfc00e340>

0400f6c4 <_printf_r>:
 400f6c4:	defffd04 	addi	sp,sp,-12
 400f6c8:	2805883a 	mov	r2,r5
 400f6cc:	dfc00015 	stw	ra,0(sp)
 400f6d0:	d9800115 	stw	r6,4(sp)
 400f6d4:	d9c00215 	stw	r7,8(sp)
 400f6d8:	21400217 	ldw	r5,8(r4)
 400f6dc:	d9c00104 	addi	r7,sp,4
 400f6e0:	100d883a 	mov	r6,r2
 400f6e4:	400fcf80 	call	400fcf8 <___vfprintf_internal_r>
 400f6e8:	dfc00017 	ldw	ra,0(sp)
 400f6ec:	dec00304 	addi	sp,sp,12
 400f6f0:	f800283a 	ret

0400f6f4 <printf>:
 400f6f4:	defffc04 	addi	sp,sp,-16
 400f6f8:	dfc00015 	stw	ra,0(sp)
 400f6fc:	d9400115 	stw	r5,4(sp)
 400f700:	d9800215 	stw	r6,8(sp)
 400f704:	d9c00315 	stw	r7,12(sp)
 400f708:	008100f4 	movhi	r2,1027
 400f70c:	10ab8304 	addi	r2,r2,-20980
 400f710:	10800017 	ldw	r2,0(r2)
 400f714:	200b883a 	mov	r5,r4
 400f718:	d9800104 	addi	r6,sp,4
 400f71c:	11000217 	ldw	r4,8(r2)
 400f720:	4011fd40 	call	4011fd4 <__vfprintf_internal>
 400f724:	dfc00017 	ldw	ra,0(sp)
 400f728:	dec00404 	addi	sp,sp,16
 400f72c:	f800283a 	ret

0400f730 <_putchar_r>:
 400f730:	21800217 	ldw	r6,8(r4)
 400f734:	401611c1 	jmpi	401611c <_putc_r>

0400f738 <putchar>:
 400f738:	008100f4 	movhi	r2,1027
 400f73c:	10ab8304 	addi	r2,r2,-20980
 400f740:	200b883a 	mov	r5,r4
 400f744:	11000017 	ldw	r4,0(r2)
 400f748:	21800217 	ldw	r6,8(r4)
 400f74c:	401611c1 	jmpi	401611c <_putc_r>

0400f750 <_puts_r>:
 400f750:	defff604 	addi	sp,sp,-40
 400f754:	dc000715 	stw	r16,28(sp)
 400f758:	2021883a 	mov	r16,r4
 400f75c:	2809883a 	mov	r4,r5
 400f760:	dc400815 	stw	r17,32(sp)
 400f764:	dfc00915 	stw	ra,36(sp)
 400f768:	2823883a 	mov	r17,r5
 400f76c:	400fc580 	call	400fc58 <strlen>
 400f770:	10c00044 	addi	r3,r2,1
 400f774:	d8800115 	stw	r2,4(sp)
 400f778:	008100b4 	movhi	r2,1026
 400f77c:	109e9304 	addi	r2,r2,31308
 400f780:	d8800215 	stw	r2,8(sp)
 400f784:	00800044 	movi	r2,1
 400f788:	d8800315 	stw	r2,12(sp)
 400f78c:	00800084 	movi	r2,2
 400f790:	dc400015 	stw	r17,0(sp)
 400f794:	d8c00615 	stw	r3,24(sp)
 400f798:	dec00415 	stw	sp,16(sp)
 400f79c:	d8800515 	stw	r2,20(sp)
 400f7a0:	80000226 	beq	r16,zero,400f7ac <_puts_r+0x5c>
 400f7a4:	80800e17 	ldw	r2,56(r16)
 400f7a8:	10001426 	beq	r2,zero,400f7fc <_puts_r+0xac>
 400f7ac:	81400217 	ldw	r5,8(r16)
 400f7b0:	2880030b 	ldhu	r2,12(r5)
 400f7b4:	10c8000c 	andi	r3,r2,8192
 400f7b8:	1800061e 	bne	r3,zero,400f7d4 <_puts_r+0x84>
 400f7bc:	29001917 	ldw	r4,100(r5)
 400f7c0:	00f7ffc4 	movi	r3,-8193
 400f7c4:	10880014 	ori	r2,r2,8192
 400f7c8:	20c6703a 	and	r3,r4,r3
 400f7cc:	2880030d 	sth	r2,12(r5)
 400f7d0:	28c01915 	stw	r3,100(r5)
 400f7d4:	d9800404 	addi	r6,sp,16
 400f7d8:	8009883a 	mov	r4,r16
 400f7dc:	401453c0 	call	401453c <__sfvwrite_r>
 400f7e0:	1000091e 	bne	r2,zero,400f808 <_puts_r+0xb8>
 400f7e4:	00800284 	movi	r2,10
 400f7e8:	dfc00917 	ldw	ra,36(sp)
 400f7ec:	dc400817 	ldw	r17,32(sp)
 400f7f0:	dc000717 	ldw	r16,28(sp)
 400f7f4:	dec00a04 	addi	sp,sp,40
 400f7f8:	f800283a 	ret
 400f7fc:	8009883a 	mov	r4,r16
 400f800:	40140b80 	call	40140b8 <__sinit>
 400f804:	003fe906 	br	400f7ac <__alt_mem_onchip_memory2_0+0xfc00e50c>
 400f808:	00bfffc4 	movi	r2,-1
 400f80c:	003ff606 	br	400f7e8 <__alt_mem_onchip_memory2_0+0xfc00e548>

0400f810 <puts>:
 400f810:	008100f4 	movhi	r2,1027
 400f814:	10ab8304 	addi	r2,r2,-20980
 400f818:	200b883a 	mov	r5,r4
 400f81c:	11000017 	ldw	r4,0(r2)
 400f820:	400f7501 	jmpi	400f750 <_puts_r>

0400f824 <_sbrk_r>:
 400f824:	defffd04 	addi	sp,sp,-12
 400f828:	dc000015 	stw	r16,0(sp)
 400f82c:	040100f4 	movhi	r16,1027
 400f830:	dc400115 	stw	r17,4(sp)
 400f834:	84381504 	addi	r16,r16,-8108
 400f838:	2023883a 	mov	r17,r4
 400f83c:	2809883a 	mov	r4,r5
 400f840:	dfc00215 	stw	ra,8(sp)
 400f844:	80000015 	stw	zero,0(r16)
 400f848:	401c7440 	call	401c744 <sbrk>
 400f84c:	00ffffc4 	movi	r3,-1
 400f850:	10c00526 	beq	r2,r3,400f868 <_sbrk_r+0x44>
 400f854:	dfc00217 	ldw	ra,8(sp)
 400f858:	dc400117 	ldw	r17,4(sp)
 400f85c:	dc000017 	ldw	r16,0(sp)
 400f860:	dec00304 	addi	sp,sp,12
 400f864:	f800283a 	ret
 400f868:	80c00017 	ldw	r3,0(r16)
 400f86c:	183ff926 	beq	r3,zero,400f854 <__alt_mem_onchip_memory2_0+0xfc00e5b4>
 400f870:	88c00015 	stw	r3,0(r17)
 400f874:	003ff706 	br	400f854 <__alt_mem_onchip_memory2_0+0xfc00e5b4>

0400f878 <_init_signal_r>:
 400f878:	2080b717 	ldw	r2,732(r4)
 400f87c:	10000226 	beq	r2,zero,400f888 <_init_signal_r+0x10>
 400f880:	0005883a 	mov	r2,zero
 400f884:	f800283a 	ret
 400f888:	defffe04 	addi	sp,sp,-8
 400f88c:	01402004 	movi	r5,128
 400f890:	dc000015 	stw	r16,0(sp)
 400f894:	dfc00115 	stw	ra,4(sp)
 400f898:	2021883a 	mov	r16,r4
 400f89c:	400ec480 	call	400ec48 <_malloc_r>
 400f8a0:	8080b715 	stw	r2,732(r16)
 400f8a4:	10000d26 	beq	r2,zero,400f8dc <_init_signal_r+0x64>
 400f8a8:	0007883a 	mov	r3,zero
 400f8ac:	01002004 	movi	r4,128
 400f8b0:	00000106 	br	400f8b8 <_init_signal_r+0x40>
 400f8b4:	8080b717 	ldw	r2,732(r16)
 400f8b8:	10c5883a 	add	r2,r2,r3
 400f8bc:	10000015 	stw	zero,0(r2)
 400f8c0:	18c00104 	addi	r3,r3,4
 400f8c4:	193ffb1e 	bne	r3,r4,400f8b4 <__alt_mem_onchip_memory2_0+0xfc00e614>
 400f8c8:	0005883a 	mov	r2,zero
 400f8cc:	dfc00117 	ldw	ra,4(sp)
 400f8d0:	dc000017 	ldw	r16,0(sp)
 400f8d4:	dec00204 	addi	sp,sp,8
 400f8d8:	f800283a 	ret
 400f8dc:	00bfffc4 	movi	r2,-1
 400f8e0:	003ffa06 	br	400f8cc <__alt_mem_onchip_memory2_0+0xfc00e62c>

0400f8e4 <_signal_r>:
 400f8e4:	00c007c4 	movi	r3,31
 400f8e8:	19401536 	bltu	r3,r5,400f940 <_signal_r+0x5c>
 400f8ec:	2080b717 	ldw	r2,732(r4)
 400f8f0:	defffc04 	addi	sp,sp,-16
 400f8f4:	dc800215 	stw	r18,8(sp)
 400f8f8:	dc400115 	stw	r17,4(sp)
 400f8fc:	dc000015 	stw	r16,0(sp)
 400f900:	dfc00315 	stw	ra,12(sp)
 400f904:	3023883a 	mov	r17,r6
 400f908:	2021883a 	mov	r16,r4
 400f90c:	2825883a 	mov	r18,r5
 400f910:	10000f26 	beq	r2,zero,400f950 <_signal_r+0x6c>
 400f914:	948b883a 	add	r5,r18,r18
 400f918:	294b883a 	add	r5,r5,r5
 400f91c:	114b883a 	add	r5,r2,r5
 400f920:	28800017 	ldw	r2,0(r5)
 400f924:	2c400015 	stw	r17,0(r5)
 400f928:	dfc00317 	ldw	ra,12(sp)
 400f92c:	dc800217 	ldw	r18,8(sp)
 400f930:	dc400117 	ldw	r17,4(sp)
 400f934:	dc000017 	ldw	r16,0(sp)
 400f938:	dec00404 	addi	sp,sp,16
 400f93c:	f800283a 	ret
 400f940:	00c00584 	movi	r3,22
 400f944:	20c00015 	stw	r3,0(r4)
 400f948:	00bfffc4 	movi	r2,-1
 400f94c:	f800283a 	ret
 400f950:	400f8780 	call	400f878 <_init_signal_r>
 400f954:	1000021e 	bne	r2,zero,400f960 <_signal_r+0x7c>
 400f958:	8080b717 	ldw	r2,732(r16)
 400f95c:	003fed06 	br	400f914 <__alt_mem_onchip_memory2_0+0xfc00e674>
 400f960:	00bfffc4 	movi	r2,-1
 400f964:	003ff006 	br	400f928 <__alt_mem_onchip_memory2_0+0xfc00e688>

0400f968 <_raise_r>:
 400f968:	008007c4 	movi	r2,31
 400f96c:	11402936 	bltu	r2,r5,400fa14 <_raise_r+0xac>
 400f970:	20c0b717 	ldw	r3,732(r4)
 400f974:	defffd04 	addi	sp,sp,-12
 400f978:	dc400115 	stw	r17,4(sp)
 400f97c:	dc000015 	stw	r16,0(sp)
 400f980:	dfc00215 	stw	ra,8(sp)
 400f984:	2021883a 	mov	r16,r4
 400f988:	2823883a 	mov	r17,r5
 400f98c:	18001726 	beq	r3,zero,400f9ec <_raise_r+0x84>
 400f990:	2945883a 	add	r2,r5,r5
 400f994:	1085883a 	add	r2,r2,r2
 400f998:	1887883a 	add	r3,r3,r2
 400f99c:	19800017 	ldw	r6,0(r3)
 400f9a0:	30001226 	beq	r6,zero,400f9ec <_raise_r+0x84>
 400f9a4:	00800044 	movi	r2,1
 400f9a8:	30800e26 	beq	r6,r2,400f9e4 <_raise_r+0x7c>
 400f9ac:	013fffc4 	movi	r4,-1
 400f9b0:	31000926 	beq	r6,r4,400f9d8 <_raise_r+0x70>
 400f9b4:	18000015 	stw	zero,0(r3)
 400f9b8:	2809883a 	mov	r4,r5
 400f9bc:	303ee83a 	callr	r6
 400f9c0:	0005883a 	mov	r2,zero
 400f9c4:	dfc00217 	ldw	ra,8(sp)
 400f9c8:	dc400117 	ldw	r17,4(sp)
 400f9cc:	dc000017 	ldw	r16,0(sp)
 400f9d0:	dec00304 	addi	sp,sp,12
 400f9d4:	f800283a 	ret
 400f9d8:	00c00584 	movi	r3,22
 400f9dc:	80c00015 	stw	r3,0(r16)
 400f9e0:	003ff806 	br	400f9c4 <__alt_mem_onchip_memory2_0+0xfc00e724>
 400f9e4:	0005883a 	mov	r2,zero
 400f9e8:	003ff606 	br	400f9c4 <__alt_mem_onchip_memory2_0+0xfc00e724>
 400f9ec:	8009883a 	mov	r4,r16
 400f9f0:	400fb780 	call	400fb78 <_getpid_r>
 400f9f4:	880d883a 	mov	r6,r17
 400f9f8:	100b883a 	mov	r5,r2
 400f9fc:	8009883a 	mov	r4,r16
 400fa00:	dfc00217 	ldw	ra,8(sp)
 400fa04:	dc400117 	ldw	r17,4(sp)
 400fa08:	dc000017 	ldw	r16,0(sp)
 400fa0c:	dec00304 	addi	sp,sp,12
 400fa10:	400fb1c1 	jmpi	400fb1c <_kill_r>
 400fa14:	00800584 	movi	r2,22
 400fa18:	20800015 	stw	r2,0(r4)
 400fa1c:	00bfffc4 	movi	r2,-1
 400fa20:	f800283a 	ret

0400fa24 <__sigtramp_r>:
 400fa24:	008007c4 	movi	r2,31
 400fa28:	11402436 	bltu	r2,r5,400fabc <__sigtramp_r+0x98>
 400fa2c:	20c0b717 	ldw	r3,732(r4)
 400fa30:	defffd04 	addi	sp,sp,-12
 400fa34:	dc400115 	stw	r17,4(sp)
 400fa38:	dc000015 	stw	r16,0(sp)
 400fa3c:	dfc00215 	stw	ra,8(sp)
 400fa40:	2021883a 	mov	r16,r4
 400fa44:	2823883a 	mov	r17,r5
 400fa48:	18001826 	beq	r3,zero,400faac <__sigtramp_r+0x88>
 400fa4c:	8c45883a 	add	r2,r17,r17
 400fa50:	1085883a 	add	r2,r2,r2
 400fa54:	1885883a 	add	r2,r3,r2
 400fa58:	10c00017 	ldw	r3,0(r2)
 400fa5c:	18001126 	beq	r3,zero,400faa4 <__sigtramp_r+0x80>
 400fa60:	013fffc4 	movi	r4,-1
 400fa64:	19000d26 	beq	r3,r4,400fa9c <__sigtramp_r+0x78>
 400fa68:	01000044 	movi	r4,1
 400fa6c:	19000926 	beq	r3,r4,400fa94 <__sigtramp_r+0x70>
 400fa70:	10000015 	stw	zero,0(r2)
 400fa74:	8809883a 	mov	r4,r17
 400fa78:	183ee83a 	callr	r3
 400fa7c:	0005883a 	mov	r2,zero
 400fa80:	dfc00217 	ldw	ra,8(sp)
 400fa84:	dc400117 	ldw	r17,4(sp)
 400fa88:	dc000017 	ldw	r16,0(sp)
 400fa8c:	dec00304 	addi	sp,sp,12
 400fa90:	f800283a 	ret
 400fa94:	008000c4 	movi	r2,3
 400fa98:	003ff906 	br	400fa80 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 400fa9c:	00800084 	movi	r2,2
 400faa0:	003ff706 	br	400fa80 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 400faa4:	00800044 	movi	r2,1
 400faa8:	003ff506 	br	400fa80 <__alt_mem_onchip_memory2_0+0xfc00e7e0>
 400faac:	400f8780 	call	400f878 <_init_signal_r>
 400fab0:	1000041e 	bne	r2,zero,400fac4 <__sigtramp_r+0xa0>
 400fab4:	80c0b717 	ldw	r3,732(r16)
 400fab8:	003fe406 	br	400fa4c <__alt_mem_onchip_memory2_0+0xfc00e7ac>
 400fabc:	00bfffc4 	movi	r2,-1
 400fac0:	f800283a 	ret
 400fac4:	00bfffc4 	movi	r2,-1
 400fac8:	003fed06 	br	400fa80 <__alt_mem_onchip_memory2_0+0xfc00e7e0>

0400facc <raise>:
 400facc:	008100f4 	movhi	r2,1027
 400fad0:	10ab8304 	addi	r2,r2,-20980
 400fad4:	200b883a 	mov	r5,r4
 400fad8:	11000017 	ldw	r4,0(r2)
 400fadc:	400f9681 	jmpi	400f968 <_raise_r>

0400fae0 <signal>:
 400fae0:	008100f4 	movhi	r2,1027
 400fae4:	10ab8304 	addi	r2,r2,-20980
 400fae8:	280d883a 	mov	r6,r5
 400faec:	200b883a 	mov	r5,r4
 400faf0:	11000017 	ldw	r4,0(r2)
 400faf4:	400f8e41 	jmpi	400f8e4 <_signal_r>

0400faf8 <_init_signal>:
 400faf8:	008100f4 	movhi	r2,1027
 400fafc:	10ab8304 	addi	r2,r2,-20980
 400fb00:	11000017 	ldw	r4,0(r2)
 400fb04:	400f8781 	jmpi	400f878 <_init_signal_r>

0400fb08 <__sigtramp>:
 400fb08:	008100f4 	movhi	r2,1027
 400fb0c:	10ab8304 	addi	r2,r2,-20980
 400fb10:	200b883a 	mov	r5,r4
 400fb14:	11000017 	ldw	r4,0(r2)
 400fb18:	400fa241 	jmpi	400fa24 <__sigtramp_r>

0400fb1c <_kill_r>:
 400fb1c:	defffd04 	addi	sp,sp,-12
 400fb20:	2805883a 	mov	r2,r5
 400fb24:	dc000015 	stw	r16,0(sp)
 400fb28:	040100f4 	movhi	r16,1027
 400fb2c:	dc400115 	stw	r17,4(sp)
 400fb30:	84381504 	addi	r16,r16,-8108
 400fb34:	2023883a 	mov	r17,r4
 400fb38:	300b883a 	mov	r5,r6
 400fb3c:	1009883a 	mov	r4,r2
 400fb40:	dfc00215 	stw	ra,8(sp)
 400fb44:	80000015 	stw	zero,0(r16)
 400fb48:	401c1880 	call	401c188 <kill>
 400fb4c:	00ffffc4 	movi	r3,-1
 400fb50:	10c00526 	beq	r2,r3,400fb68 <_kill_r+0x4c>
 400fb54:	dfc00217 	ldw	ra,8(sp)
 400fb58:	dc400117 	ldw	r17,4(sp)
 400fb5c:	dc000017 	ldw	r16,0(sp)
 400fb60:	dec00304 	addi	sp,sp,12
 400fb64:	f800283a 	ret
 400fb68:	80c00017 	ldw	r3,0(r16)
 400fb6c:	183ff926 	beq	r3,zero,400fb54 <__alt_mem_onchip_memory2_0+0xfc00e8b4>
 400fb70:	88c00015 	stw	r3,0(r17)
 400fb74:	003ff706 	br	400fb54 <__alt_mem_onchip_memory2_0+0xfc00e8b4>

0400fb78 <_getpid_r>:
 400fb78:	401c0441 	jmpi	401c044 <getpid>

0400fb7c <strcmp>:
 400fb7c:	2144b03a 	or	r2,r4,r5
 400fb80:	108000cc 	andi	r2,r2,3
 400fb84:	1000171e 	bne	r2,zero,400fbe4 <strcmp+0x68>
 400fb88:	20800017 	ldw	r2,0(r4)
 400fb8c:	28c00017 	ldw	r3,0(r5)
 400fb90:	10c0141e 	bne	r2,r3,400fbe4 <strcmp+0x68>
 400fb94:	027fbff4 	movhi	r9,65279
 400fb98:	4a7fbfc4 	addi	r9,r9,-257
 400fb9c:	0086303a 	nor	r3,zero,r2
 400fba0:	02202074 	movhi	r8,32897
 400fba4:	1245883a 	add	r2,r2,r9
 400fba8:	42202004 	addi	r8,r8,-32640
 400fbac:	10c4703a 	and	r2,r2,r3
 400fbb0:	1204703a 	and	r2,r2,r8
 400fbb4:	10000226 	beq	r2,zero,400fbc0 <strcmp+0x44>
 400fbb8:	00002306 	br	400fc48 <strcmp+0xcc>
 400fbbc:	1000221e 	bne	r2,zero,400fc48 <strcmp+0xcc>
 400fbc0:	21000104 	addi	r4,r4,4
 400fbc4:	20c00017 	ldw	r3,0(r4)
 400fbc8:	29400104 	addi	r5,r5,4
 400fbcc:	29800017 	ldw	r6,0(r5)
 400fbd0:	1a4f883a 	add	r7,r3,r9
 400fbd4:	00c4303a 	nor	r2,zero,r3
 400fbd8:	3884703a 	and	r2,r7,r2
 400fbdc:	1204703a 	and	r2,r2,r8
 400fbe0:	19bff626 	beq	r3,r6,400fbbc <__alt_mem_onchip_memory2_0+0xfc00e91c>
 400fbe4:	20800003 	ldbu	r2,0(r4)
 400fbe8:	10c03fcc 	andi	r3,r2,255
 400fbec:	18c0201c 	xori	r3,r3,128
 400fbf0:	18ffe004 	addi	r3,r3,-128
 400fbf4:	18000c26 	beq	r3,zero,400fc28 <strcmp+0xac>
 400fbf8:	29800007 	ldb	r6,0(r5)
 400fbfc:	19800326 	beq	r3,r6,400fc0c <strcmp+0x90>
 400fc00:	00001306 	br	400fc50 <strcmp+0xd4>
 400fc04:	29800007 	ldb	r6,0(r5)
 400fc08:	11800b1e 	bne	r2,r6,400fc38 <strcmp+0xbc>
 400fc0c:	21000044 	addi	r4,r4,1
 400fc10:	20c00003 	ldbu	r3,0(r4)
 400fc14:	29400044 	addi	r5,r5,1
 400fc18:	18803fcc 	andi	r2,r3,255
 400fc1c:	1080201c 	xori	r2,r2,128
 400fc20:	10bfe004 	addi	r2,r2,-128
 400fc24:	103ff71e 	bne	r2,zero,400fc04 <__alt_mem_onchip_memory2_0+0xfc00e964>
 400fc28:	0007883a 	mov	r3,zero
 400fc2c:	28800003 	ldbu	r2,0(r5)
 400fc30:	1885c83a 	sub	r2,r3,r2
 400fc34:	f800283a 	ret
 400fc38:	28800003 	ldbu	r2,0(r5)
 400fc3c:	18c03fcc 	andi	r3,r3,255
 400fc40:	1885c83a 	sub	r2,r3,r2
 400fc44:	f800283a 	ret
 400fc48:	0005883a 	mov	r2,zero
 400fc4c:	f800283a 	ret
 400fc50:	10c03fcc 	andi	r3,r2,255
 400fc54:	003ff506 	br	400fc2c <__alt_mem_onchip_memory2_0+0xfc00e98c>

0400fc58 <strlen>:
 400fc58:	208000cc 	andi	r2,r4,3
 400fc5c:	10002026 	beq	r2,zero,400fce0 <strlen+0x88>
 400fc60:	20800007 	ldb	r2,0(r4)
 400fc64:	10002026 	beq	r2,zero,400fce8 <strlen+0x90>
 400fc68:	2005883a 	mov	r2,r4
 400fc6c:	00000206 	br	400fc78 <strlen+0x20>
 400fc70:	10c00007 	ldb	r3,0(r2)
 400fc74:	18001826 	beq	r3,zero,400fcd8 <strlen+0x80>
 400fc78:	10800044 	addi	r2,r2,1
 400fc7c:	10c000cc 	andi	r3,r2,3
 400fc80:	183ffb1e 	bne	r3,zero,400fc70 <__alt_mem_onchip_memory2_0+0xfc00e9d0>
 400fc84:	10c00017 	ldw	r3,0(r2)
 400fc88:	01ffbff4 	movhi	r7,65279
 400fc8c:	39ffbfc4 	addi	r7,r7,-257
 400fc90:	00ca303a 	nor	r5,zero,r3
 400fc94:	01a02074 	movhi	r6,32897
 400fc98:	19c7883a 	add	r3,r3,r7
 400fc9c:	31a02004 	addi	r6,r6,-32640
 400fca0:	1946703a 	and	r3,r3,r5
 400fca4:	1986703a 	and	r3,r3,r6
 400fca8:	1800091e 	bne	r3,zero,400fcd0 <strlen+0x78>
 400fcac:	10800104 	addi	r2,r2,4
 400fcb0:	10c00017 	ldw	r3,0(r2)
 400fcb4:	19cb883a 	add	r5,r3,r7
 400fcb8:	00c6303a 	nor	r3,zero,r3
 400fcbc:	28c6703a 	and	r3,r5,r3
 400fcc0:	1986703a 	and	r3,r3,r6
 400fcc4:	183ff926 	beq	r3,zero,400fcac <__alt_mem_onchip_memory2_0+0xfc00ea0c>
 400fcc8:	00000106 	br	400fcd0 <strlen+0x78>
 400fccc:	10800044 	addi	r2,r2,1
 400fcd0:	10c00007 	ldb	r3,0(r2)
 400fcd4:	183ffd1e 	bne	r3,zero,400fccc <__alt_mem_onchip_memory2_0+0xfc00ea2c>
 400fcd8:	1105c83a 	sub	r2,r2,r4
 400fcdc:	f800283a 	ret
 400fce0:	2005883a 	mov	r2,r4
 400fce4:	003fe706 	br	400fc84 <__alt_mem_onchip_memory2_0+0xfc00e9e4>
 400fce8:	0005883a 	mov	r2,zero
 400fcec:	f800283a 	ret

0400fcf0 <_times_r>:
 400fcf0:	2809883a 	mov	r4,r5
 400fcf4:	401c8301 	jmpi	401c830 <times>

0400fcf8 <___vfprintf_internal_r>:
 400fcf8:	deffb804 	addi	sp,sp,-288
 400fcfc:	dfc04715 	stw	ra,284(sp)
 400fd00:	ddc04515 	stw	r23,276(sp)
 400fd04:	dd404315 	stw	r21,268(sp)
 400fd08:	d9002d15 	stw	r4,180(sp)
 400fd0c:	282f883a 	mov	r23,r5
 400fd10:	302b883a 	mov	r21,r6
 400fd14:	d9c02e15 	stw	r7,184(sp)
 400fd18:	df004615 	stw	fp,280(sp)
 400fd1c:	dd804415 	stw	r22,272(sp)
 400fd20:	dd004215 	stw	r20,264(sp)
 400fd24:	dcc04115 	stw	r19,260(sp)
 400fd28:	dc804015 	stw	r18,256(sp)
 400fd2c:	dc403f15 	stw	r17,252(sp)
 400fd30:	dc003e15 	stw	r16,248(sp)
 400fd34:	4014c380 	call	4014c38 <_localeconv_r>
 400fd38:	10800017 	ldw	r2,0(r2)
 400fd3c:	1009883a 	mov	r4,r2
 400fd40:	d8803415 	stw	r2,208(sp)
 400fd44:	400fc580 	call	400fc58 <strlen>
 400fd48:	d8803715 	stw	r2,220(sp)
 400fd4c:	d8802d17 	ldw	r2,180(sp)
 400fd50:	10000226 	beq	r2,zero,400fd5c <___vfprintf_internal_r+0x64>
 400fd54:	10800e17 	ldw	r2,56(r2)
 400fd58:	1000fb26 	beq	r2,zero,4010148 <___vfprintf_internal_r+0x450>
 400fd5c:	b880030b 	ldhu	r2,12(r23)
 400fd60:	10c8000c 	andi	r3,r2,8192
 400fd64:	1800061e 	bne	r3,zero,400fd80 <___vfprintf_internal_r+0x88>
 400fd68:	b9001917 	ldw	r4,100(r23)
 400fd6c:	00f7ffc4 	movi	r3,-8193
 400fd70:	10880014 	ori	r2,r2,8192
 400fd74:	20c6703a 	and	r3,r4,r3
 400fd78:	b880030d 	sth	r2,12(r23)
 400fd7c:	b8c01915 	stw	r3,100(r23)
 400fd80:	10c0020c 	andi	r3,r2,8
 400fd84:	1800c326 	beq	r3,zero,4010094 <___vfprintf_internal_r+0x39c>
 400fd88:	b8c00417 	ldw	r3,16(r23)
 400fd8c:	1800c126 	beq	r3,zero,4010094 <___vfprintf_internal_r+0x39c>
 400fd90:	1080068c 	andi	r2,r2,26
 400fd94:	00c00284 	movi	r3,10
 400fd98:	10c0c626 	beq	r2,r3,40100b4 <___vfprintf_internal_r+0x3bc>
 400fd9c:	d8c00404 	addi	r3,sp,16
 400fda0:	050100b4 	movhi	r20,1026
 400fda4:	d9001e04 	addi	r4,sp,120
 400fda8:	a51ea484 	addi	r20,r20,31378
 400fdac:	d8c01e15 	stw	r3,120(sp)
 400fdb0:	d8002015 	stw	zero,128(sp)
 400fdb4:	d8001f15 	stw	zero,124(sp)
 400fdb8:	d8003315 	stw	zero,204(sp)
 400fdbc:	d8003615 	stw	zero,216(sp)
 400fdc0:	d8003815 	stw	zero,224(sp)
 400fdc4:	1811883a 	mov	r8,r3
 400fdc8:	d8003915 	stw	zero,228(sp)
 400fdcc:	d8003a15 	stw	zero,232(sp)
 400fdd0:	d8002f15 	stw	zero,188(sp)
 400fdd4:	d9002815 	stw	r4,160(sp)
 400fdd8:	a8800007 	ldb	r2,0(r21)
 400fddc:	10028b26 	beq	r2,zero,401080c <___vfprintf_internal_r+0xb14>
 400fde0:	00c00944 	movi	r3,37
 400fde4:	a823883a 	mov	r17,r21
 400fde8:	10c0021e 	bne	r2,r3,400fdf4 <___vfprintf_internal_r+0xfc>
 400fdec:	00001406 	br	400fe40 <___vfprintf_internal_r+0x148>
 400fdf0:	10c00326 	beq	r2,r3,400fe00 <___vfprintf_internal_r+0x108>
 400fdf4:	8c400044 	addi	r17,r17,1
 400fdf8:	88800007 	ldb	r2,0(r17)
 400fdfc:	103ffc1e 	bne	r2,zero,400fdf0 <__alt_mem_onchip_memory2_0+0xfc00eb50>
 400fe00:	8d61c83a 	sub	r16,r17,r21
 400fe04:	80000e26 	beq	r16,zero,400fe40 <___vfprintf_internal_r+0x148>
 400fe08:	d8c02017 	ldw	r3,128(sp)
 400fe0c:	d8801f17 	ldw	r2,124(sp)
 400fe10:	45400015 	stw	r21,0(r8)
 400fe14:	1c07883a 	add	r3,r3,r16
 400fe18:	10800044 	addi	r2,r2,1
 400fe1c:	d8c02015 	stw	r3,128(sp)
 400fe20:	44000115 	stw	r16,4(r8)
 400fe24:	d8801f15 	stw	r2,124(sp)
 400fe28:	00c001c4 	movi	r3,7
 400fe2c:	1880a916 	blt	r3,r2,40100d4 <___vfprintf_internal_r+0x3dc>
 400fe30:	42000204 	addi	r8,r8,8
 400fe34:	d9402f17 	ldw	r5,188(sp)
 400fe38:	2c0b883a 	add	r5,r5,r16
 400fe3c:	d9402f15 	stw	r5,188(sp)
 400fe40:	88800007 	ldb	r2,0(r17)
 400fe44:	1000aa26 	beq	r2,zero,40100f0 <___vfprintf_internal_r+0x3f8>
 400fe48:	8d400044 	addi	r21,r17,1
 400fe4c:	8c400047 	ldb	r17,1(r17)
 400fe50:	0021883a 	mov	r16,zero
 400fe54:	00bfffc4 	movi	r2,-1
 400fe58:	0025883a 	mov	r18,zero
 400fe5c:	dc002905 	stb	r16,164(sp)
 400fe60:	d8002785 	stb	zero,158(sp)
 400fe64:	d8002b05 	stb	zero,172(sp)
 400fe68:	d8802a15 	stw	r2,168(sp)
 400fe6c:	d8003115 	stw	zero,196(sp)
 400fe70:	04c01604 	movi	r19,88
 400fe74:	05800244 	movi	r22,9
 400fe78:	9021883a 	mov	r16,r18
 400fe7c:	4039883a 	mov	fp,r8
 400fe80:	ad400044 	addi	r21,r21,1
 400fe84:	88bff804 	addi	r2,r17,-32
 400fe88:	98833236 	bltu	r19,r2,4010b54 <___vfprintf_internal_r+0xe5c>
 400fe8c:	100490ba 	slli	r2,r2,2
 400fe90:	00c10074 	movhi	r3,1025
 400fe94:	18ffa904 	addi	r3,r3,-348
 400fe98:	10c5883a 	add	r2,r2,r3
 400fe9c:	10800017 	ldw	r2,0(r2)
 400fea0:	1000683a 	jmp	r2
 400fea4:	04010a4c 	andi	r16,zero,1065
 400fea8:	04010b54 	movui	r16,1069
 400feac:	04010b54 	movui	r16,1069
 400feb0:	04010a6c 	andhi	r16,zero,1065
 400feb4:	04010b54 	movui	r16,1069
 400feb8:	04010b54 	movui	r16,1069
 400febc:	04010b54 	movui	r16,1069
 400fec0:	04010b54 	movui	r16,1069
 400fec4:	04010b54 	movui	r16,1069
 400fec8:	04010b54 	movui	r16,1069
 400fecc:	04010154 	movui	r16,1029
 400fed0:	0401095c 	xori	r16,zero,1061
 400fed4:	04010b54 	movui	r16,1069
 400fed8:	04010018 	cmpnei	r16,zero,1024
 400fedc:	04010178 	rdprs	r16,zero,1029
 400fee0:	04010b54 	movui	r16,1069
 400fee4:	040101c8 	cmpgei	r16,zero,1031
 400fee8:	040101d4 	movui	r16,1031
 400feec:	040101d4 	movui	r16,1031
 400fef0:	040101d4 	movui	r16,1031
 400fef4:	040101d4 	movui	r16,1031
 400fef8:	040101d4 	movui	r16,1031
 400fefc:	040101d4 	movui	r16,1031
 400ff00:	040101d4 	movui	r16,1031
 400ff04:	040101d4 	movui	r16,1031
 400ff08:	040101d4 	movui	r16,1031
 400ff0c:	04010b54 	movui	r16,1069
 400ff10:	04010b54 	movui	r16,1069
 400ff14:	04010b54 	movui	r16,1069
 400ff18:	04010b54 	movui	r16,1069
 400ff1c:	04010b54 	movui	r16,1069
 400ff20:	04010b54 	movui	r16,1069
 400ff24:	04010b54 	movui	r16,1069
 400ff28:	04010b54 	movui	r16,1069
 400ff2c:	04010b54 	movui	r16,1069
 400ff30:	04010b54 	movui	r16,1069
 400ff34:	04010210 	cmplti	r16,zero,1032
 400ff38:	040102d8 	cmpnei	r16,zero,1035
 400ff3c:	04010b54 	movui	r16,1069
 400ff40:	040102d8 	cmpnei	r16,zero,1035
 400ff44:	04010b54 	movui	r16,1069
 400ff48:	04010b54 	movui	r16,1069
 400ff4c:	04010b54 	movui	r16,1069
 400ff50:	04010b54 	movui	r16,1069
 400ff54:	04010384 	movi	r16,1038
 400ff58:	04010b54 	movui	r16,1069
 400ff5c:	04010b54 	movui	r16,1069
 400ff60:	04010390 	cmplti	r16,zero,1038
 400ff64:	04010b54 	movui	r16,1069
 400ff68:	04010b54 	movui	r16,1069
 400ff6c:	04010b54 	movui	r16,1069
 400ff70:	04010b54 	movui	r16,1069
 400ff74:	04010b54 	movui	r16,1069
 400ff78:	04010814 	movui	r16,1056
 400ff7c:	04010b54 	movui	r16,1069
 400ff80:	04010b54 	movui	r16,1069
 400ff84:	04010880 	call	401088 <__alt_mem_sdram-0x3bfef78>
 400ff88:	04010b54 	movui	r16,1069
 400ff8c:	04010b54 	movui	r16,1069
 400ff90:	04010b54 	movui	r16,1069
 400ff94:	04010b54 	movui	r16,1069
 400ff98:	04010b54 	movui	r16,1069
 400ff9c:	04010b54 	movui	r16,1069
 400ffa0:	04010b54 	movui	r16,1069
 400ffa4:	04010b54 	movui	r16,1069
 400ffa8:	04010b54 	movui	r16,1069
 400ffac:	04010b54 	movui	r16,1069
 400ffb0:	04010af8 	rdprs	r16,zero,1067
 400ffb4:	04010a78 	rdprs	r16,zero,1065
 400ffb8:	040102d8 	cmpnei	r16,zero,1035
 400ffbc:	040102d8 	cmpnei	r16,zero,1035
 400ffc0:	040102d8 	cmpnei	r16,zero,1035
 400ffc4:	04010a98 	cmpnei	r16,zero,1066
 400ffc8:	04010a78 	rdprs	r16,zero,1065
 400ffcc:	04010b54 	movui	r16,1069
 400ffd0:	04010b54 	movui	r16,1069
 400ffd4:	04010aa4 	muli	r16,zero,1066
 400ffd8:	04010b54 	movui	r16,1069
 400ffdc:	04010ab8 	rdprs	r16,zero,1066
 400ffe0:	0401093c 	xorhi	r16,zero,1060
 400ffe4:	04010024 	muli	r16,zero,1024
 400ffe8:	04010974 	movhi	r16,1061
 400ffec:	04010b54 	movui	r16,1069
 400fff0:	04010980 	call	401098 <__alt_mem_sdram-0x3bfef68>
 400fff4:	04010b54 	movui	r16,1069
 400fff8:	040109e4 	muli	r16,zero,1063
 400fffc:	04010b54 	movui	r16,1069
 4010000:	04010b54 	movui	r16,1069
 4010004:	04010a04 	movi	r16,1064
 4010008:	d8c03117 	ldw	r3,196(sp)
 401000c:	d8802e15 	stw	r2,184(sp)
 4010010:	00c7c83a 	sub	r3,zero,r3
 4010014:	d8c03115 	stw	r3,196(sp)
 4010018:	84000114 	ori	r16,r16,4
 401001c:	ac400007 	ldb	r17,0(r21)
 4010020:	003f9706 	br	400fe80 <__alt_mem_onchip_memory2_0+0xfc00ebe0>
 4010024:	00800c04 	movi	r2,48
 4010028:	d8802705 	stb	r2,156(sp)
 401002c:	00801e04 	movi	r2,120
 4010030:	d8802745 	stb	r2,157(sp)
 4010034:	d9002a17 	ldw	r4,168(sp)
 4010038:	d8802e17 	ldw	r2,184(sp)
 401003c:	d8002785 	stb	zero,158(sp)
 4010040:	e011883a 	mov	r8,fp
 4010044:	10c00104 	addi	r3,r2,4
 4010048:	14c00017 	ldw	r19,0(r2)
 401004c:	002d883a 	mov	r22,zero
 4010050:	80800094 	ori	r2,r16,2
 4010054:	2002ca16 	blt	r4,zero,4010b80 <___vfprintf_internal_r+0xe88>
 4010058:	00bfdfc4 	movi	r2,-129
 401005c:	80a4703a 	and	r18,r16,r2
 4010060:	d8c02e15 	stw	r3,184(sp)
 4010064:	94800094 	ori	r18,r18,2
 4010068:	9802b41e 	bne	r19,zero,4010b3c <___vfprintf_internal_r+0xe44>
 401006c:	014100b4 	movhi	r5,1026
 4010070:	295e9d04 	addi	r5,r5,31348
 4010074:	d9403915 	stw	r5,228(sp)
 4010078:	04401e04 	movi	r17,120
 401007c:	d8802a17 	ldw	r2,168(sp)
 4010080:	0039883a 	mov	fp,zero
 4010084:	1001fa26 	beq	r2,zero,4010870 <___vfprintf_internal_r+0xb78>
 4010088:	0027883a 	mov	r19,zero
 401008c:	002d883a 	mov	r22,zero
 4010090:	00021906 	br	40108f8 <___vfprintf_internal_r+0xc00>
 4010094:	d9002d17 	ldw	r4,180(sp)
 4010098:	b80b883a 	mov	r5,r23
 401009c:	40120ac0 	call	40120ac <__swsetup_r>
 40100a0:	1005dc1e 	bne	r2,zero,4011814 <___vfprintf_internal_r+0x1b1c>
 40100a4:	b880030b 	ldhu	r2,12(r23)
 40100a8:	00c00284 	movi	r3,10
 40100ac:	1080068c 	andi	r2,r2,26
 40100b0:	10ff3a1e 	bne	r2,r3,400fd9c <__alt_mem_onchip_memory2_0+0xfc00eafc>
 40100b4:	b880038f 	ldh	r2,14(r23)
 40100b8:	103f3816 	blt	r2,zero,400fd9c <__alt_mem_onchip_memory2_0+0xfc00eafc>
 40100bc:	d9c02e17 	ldw	r7,184(sp)
 40100c0:	d9002d17 	ldw	r4,180(sp)
 40100c4:	a80d883a 	mov	r6,r21
 40100c8:	b80b883a 	mov	r5,r23
 40100cc:	4011ff00 	call	4011ff0 <__sbprintf>
 40100d0:	00001106 	br	4010118 <___vfprintf_internal_r+0x420>
 40100d4:	d9002d17 	ldw	r4,180(sp)
 40100d8:	d9801e04 	addi	r6,sp,120
 40100dc:	b80b883a 	mov	r5,r23
 40100e0:	4016a940 	call	4016a94 <__sprint_r>
 40100e4:	1000081e 	bne	r2,zero,4010108 <___vfprintf_internal_r+0x410>
 40100e8:	da000404 	addi	r8,sp,16
 40100ec:	003f5106 	br	400fe34 <__alt_mem_onchip_memory2_0+0xfc00eb94>
 40100f0:	d8802017 	ldw	r2,128(sp)
 40100f4:	10000426 	beq	r2,zero,4010108 <___vfprintf_internal_r+0x410>
 40100f8:	d9002d17 	ldw	r4,180(sp)
 40100fc:	d9801e04 	addi	r6,sp,120
 4010100:	b80b883a 	mov	r5,r23
 4010104:	4016a940 	call	4016a94 <__sprint_r>
 4010108:	b880030b 	ldhu	r2,12(r23)
 401010c:	1080100c 	andi	r2,r2,64
 4010110:	1005c01e 	bne	r2,zero,4011814 <___vfprintf_internal_r+0x1b1c>
 4010114:	d8802f17 	ldw	r2,188(sp)
 4010118:	dfc04717 	ldw	ra,284(sp)
 401011c:	df004617 	ldw	fp,280(sp)
 4010120:	ddc04517 	ldw	r23,276(sp)
 4010124:	dd804417 	ldw	r22,272(sp)
 4010128:	dd404317 	ldw	r21,268(sp)
 401012c:	dd004217 	ldw	r20,264(sp)
 4010130:	dcc04117 	ldw	r19,260(sp)
 4010134:	dc804017 	ldw	r18,256(sp)
 4010138:	dc403f17 	ldw	r17,252(sp)
 401013c:	dc003e17 	ldw	r16,248(sp)
 4010140:	dec04804 	addi	sp,sp,288
 4010144:	f800283a 	ret
 4010148:	d9002d17 	ldw	r4,180(sp)
 401014c:	40140b80 	call	40140b8 <__sinit>
 4010150:	003f0206 	br	400fd5c <__alt_mem_onchip_memory2_0+0xfc00eabc>
 4010154:	d9002e17 	ldw	r4,184(sp)
 4010158:	d9402e17 	ldw	r5,184(sp)
 401015c:	21000017 	ldw	r4,0(r4)
 4010160:	28800104 	addi	r2,r5,4
 4010164:	d9003115 	stw	r4,196(sp)
 4010168:	203fa716 	blt	r4,zero,4010008 <__alt_mem_onchip_memory2_0+0xfc00ed68>
 401016c:	d8802e15 	stw	r2,184(sp)
 4010170:	ac400007 	ldb	r17,0(r21)
 4010174:	003f4206 	br	400fe80 <__alt_mem_onchip_memory2_0+0xfc00ebe0>
 4010178:	ac400007 	ldb	r17,0(r21)
 401017c:	01000a84 	movi	r4,42
 4010180:	a8c00044 	addi	r3,r21,1
 4010184:	89075826 	beq	r17,r4,4011ee8 <___vfprintf_internal_r+0x21f0>
 4010188:	8cbff404 	addi	r18,r17,-48
 401018c:	b486ae36 	bltu	r22,r18,4011c48 <___vfprintf_internal_r+0x1f50>
 4010190:	0009883a 	mov	r4,zero
 4010194:	1823883a 	mov	r17,r3
 4010198:	01400284 	movi	r5,10
 401019c:	400dae00 	call	400dae0 <__mulsi3>
 40101a0:	88c00007 	ldb	r3,0(r17)
 40101a4:	1489883a 	add	r4,r2,r18
 40101a8:	8d400044 	addi	r21,r17,1
 40101ac:	1cbff404 	addi	r18,r3,-48
 40101b0:	a823883a 	mov	r17,r21
 40101b4:	b4bff82e 	bgeu	r22,r18,4010198 <__alt_mem_onchip_memory2_0+0xfc00eef8>
 40101b8:	1823883a 	mov	r17,r3
 40101bc:	2005f616 	blt	r4,zero,4011998 <___vfprintf_internal_r+0x1ca0>
 40101c0:	d9002a15 	stw	r4,168(sp)
 40101c4:	003f2f06 	br	400fe84 <__alt_mem_onchip_memory2_0+0xfc00ebe4>
 40101c8:	84002014 	ori	r16,r16,128
 40101cc:	ac400007 	ldb	r17,0(r21)
 40101d0:	003f2b06 	br	400fe80 <__alt_mem_onchip_memory2_0+0xfc00ebe0>
 40101d4:	8cbff404 	addi	r18,r17,-48
 40101d8:	d8003115 	stw	zero,196(sp)
 40101dc:	0009883a 	mov	r4,zero
 40101e0:	a823883a 	mov	r17,r21
 40101e4:	01400284 	movi	r5,10
 40101e8:	400dae00 	call	400dae0 <__mulsi3>
 40101ec:	88c00007 	ldb	r3,0(r17)
 40101f0:	9089883a 	add	r4,r18,r2
 40101f4:	ad400044 	addi	r21,r21,1
 40101f8:	1cbff404 	addi	r18,r3,-48
 40101fc:	a823883a 	mov	r17,r21
 4010200:	b4bff82e 	bgeu	r22,r18,40101e4 <__alt_mem_onchip_memory2_0+0xfc00ef44>
 4010204:	1823883a 	mov	r17,r3
 4010208:	d9003115 	stw	r4,196(sp)
 401020c:	003f1d06 	br	400fe84 <__alt_mem_onchip_memory2_0+0xfc00ebe4>
 4010210:	8025883a 	mov	r18,r16
 4010214:	dc002903 	ldbu	r16,164(sp)
 4010218:	e011883a 	mov	r8,fp
 401021c:	84003fcc 	andi	r16,r16,255
 4010220:	8007531e 	bne	r16,zero,4011f70 <___vfprintf_internal_r+0x2278>
 4010224:	94800414 	ori	r18,r18,16
 4010228:	9080080c 	andi	r2,r18,32
 401022c:	1003a326 	beq	r2,zero,40110bc <___vfprintf_internal_r+0x13c4>
 4010230:	d9002e17 	ldw	r4,184(sp)
 4010234:	20800117 	ldw	r2,4(r4)
 4010238:	24c00017 	ldw	r19,0(r4)
 401023c:	21000204 	addi	r4,r4,8
 4010240:	d9002e15 	stw	r4,184(sp)
 4010244:	102d883a 	mov	r22,r2
 4010248:	10047316 	blt	r2,zero,4011418 <___vfprintf_internal_r+0x1720>
 401024c:	d9002a17 	ldw	r4,168(sp)
 4010250:	df002783 	ldbu	fp,158(sp)
 4010254:	2003e416 	blt	r4,zero,40111e8 <___vfprintf_internal_r+0x14f0>
 4010258:	00ffdfc4 	movi	r3,-129
 401025c:	9d84b03a 	or	r2,r19,r22
 4010260:	90e4703a 	and	r18,r18,r3
 4010264:	10018026 	beq	r2,zero,4010868 <___vfprintf_internal_r+0xb70>
 4010268:	b003ab26 	beq	r22,zero,4011118 <___vfprintf_internal_r+0x1420>
 401026c:	dc402915 	stw	r17,164(sp)
 4010270:	dc001e04 	addi	r16,sp,120
 4010274:	b023883a 	mov	r17,r22
 4010278:	402d883a 	mov	r22,r8
 401027c:	9809883a 	mov	r4,r19
 4010280:	880b883a 	mov	r5,r17
 4010284:	01800284 	movi	r6,10
 4010288:	000f883a 	mov	r7,zero
 401028c:	4018fd80 	call	4018fd8 <__umoddi3>
 4010290:	10800c04 	addi	r2,r2,48
 4010294:	843fffc4 	addi	r16,r16,-1
 4010298:	9809883a 	mov	r4,r19
 401029c:	880b883a 	mov	r5,r17
 40102a0:	80800005 	stb	r2,0(r16)
 40102a4:	01800284 	movi	r6,10
 40102a8:	000f883a 	mov	r7,zero
 40102ac:	40189dc0 	call	40189dc <__udivdi3>
 40102b0:	1027883a 	mov	r19,r2
 40102b4:	10c4b03a 	or	r2,r2,r3
 40102b8:	1823883a 	mov	r17,r3
 40102bc:	103fef1e 	bne	r2,zero,401027c <__alt_mem_onchip_memory2_0+0xfc00efdc>
 40102c0:	d8c02817 	ldw	r3,160(sp)
 40102c4:	dc402917 	ldw	r17,164(sp)
 40102c8:	b011883a 	mov	r8,r22
 40102cc:	1c07c83a 	sub	r3,r3,r16
 40102d0:	d8c02b15 	stw	r3,172(sp)
 40102d4:	00005f06 	br	4010454 <___vfprintf_internal_r+0x75c>
 40102d8:	8025883a 	mov	r18,r16
 40102dc:	dc002903 	ldbu	r16,164(sp)
 40102e0:	e011883a 	mov	r8,fp
 40102e4:	84003fcc 	andi	r16,r16,255
 40102e8:	80071e1e 	bne	r16,zero,4011f64 <___vfprintf_internal_r+0x226c>
 40102ec:	9080020c 	andi	r2,r18,8
 40102f0:	1004af26 	beq	r2,zero,40115b0 <___vfprintf_internal_r+0x18b8>
 40102f4:	d9002e17 	ldw	r4,184(sp)
 40102f8:	d9402e17 	ldw	r5,184(sp)
 40102fc:	d8802e17 	ldw	r2,184(sp)
 4010300:	21000017 	ldw	r4,0(r4)
 4010304:	29400117 	ldw	r5,4(r5)
 4010308:	10800204 	addi	r2,r2,8
 401030c:	d9003615 	stw	r4,216(sp)
 4010310:	d9403815 	stw	r5,224(sp)
 4010314:	d8802e15 	stw	r2,184(sp)
 4010318:	d9003617 	ldw	r4,216(sp)
 401031c:	d9403817 	ldw	r5,224(sp)
 4010320:	da003d15 	stw	r8,244(sp)
 4010324:	04000044 	movi	r16,1
 4010328:	40167e80 	call	40167e8 <__fpclassifyd>
 401032c:	da003d17 	ldw	r8,244(sp)
 4010330:	1404441e 	bne	r2,r16,4011444 <___vfprintf_internal_r+0x174c>
 4010334:	d9003617 	ldw	r4,216(sp)
 4010338:	d9403817 	ldw	r5,224(sp)
 401033c:	000d883a 	mov	r6,zero
 4010340:	000f883a 	mov	r7,zero
 4010344:	401a97c0 	call	401a97c <__ledf2>
 4010348:	da003d17 	ldw	r8,244(sp)
 401034c:	1005e316 	blt	r2,zero,4011adc <___vfprintf_internal_r+0x1de4>
 4010350:	df002783 	ldbu	fp,158(sp)
 4010354:	008011c4 	movi	r2,71
 4010358:	1445580e 	bge	r2,r17,40118bc <___vfprintf_internal_r+0x1bc4>
 401035c:	040100b4 	movhi	r16,1026
 4010360:	841e9504 	addi	r16,r16,31316
 4010364:	00c000c4 	movi	r3,3
 4010368:	00bfdfc4 	movi	r2,-129
 401036c:	d8c02915 	stw	r3,164(sp)
 4010370:	90a4703a 	and	r18,r18,r2
 4010374:	d8c02b15 	stw	r3,172(sp)
 4010378:	d8002a15 	stw	zero,168(sp)
 401037c:	d8003215 	stw	zero,200(sp)
 4010380:	00003a06 	br	401046c <___vfprintf_internal_r+0x774>
 4010384:	84000214 	ori	r16,r16,8
 4010388:	ac400007 	ldb	r17,0(r21)
 401038c:	003ebc06 	br	400fe80 <__alt_mem_onchip_memory2_0+0xfc00ebe0>
 4010390:	8025883a 	mov	r18,r16
 4010394:	dc002903 	ldbu	r16,164(sp)
 4010398:	e011883a 	mov	r8,fp
 401039c:	84003fcc 	andi	r16,r16,255
 40103a0:	8007001e 	bne	r16,zero,4011fa4 <___vfprintf_internal_r+0x22ac>
 40103a4:	94800414 	ori	r18,r18,16
 40103a8:	9080080c 	andi	r2,r18,32
 40103ac:	1002fa26 	beq	r2,zero,4010f98 <___vfprintf_internal_r+0x12a0>
 40103b0:	d9002e17 	ldw	r4,184(sp)
 40103b4:	d9402a17 	ldw	r5,168(sp)
 40103b8:	d8002785 	stb	zero,158(sp)
 40103bc:	20800204 	addi	r2,r4,8
 40103c0:	24c00017 	ldw	r19,0(r4)
 40103c4:	25800117 	ldw	r22,4(r4)
 40103c8:	2804b116 	blt	r5,zero,4011690 <___vfprintf_internal_r+0x1998>
 40103cc:	013fdfc4 	movi	r4,-129
 40103d0:	9d86b03a 	or	r3,r19,r22
 40103d4:	d8802e15 	stw	r2,184(sp)
 40103d8:	9124703a 	and	r18,r18,r4
 40103dc:	1802fb1e 	bne	r3,zero,4010fcc <___vfprintf_internal_r+0x12d4>
 40103e0:	d8c02a17 	ldw	r3,168(sp)
 40103e4:	0039883a 	mov	fp,zero
 40103e8:	1805e526 	beq	r3,zero,4011b80 <___vfprintf_internal_r+0x1e88>
 40103ec:	0027883a 	mov	r19,zero
 40103f0:	002d883a 	mov	r22,zero
 40103f4:	dc001e04 	addi	r16,sp,120
 40103f8:	9806d0fa 	srli	r3,r19,3
 40103fc:	b008977a 	slli	r4,r22,29
 4010400:	b02cd0fa 	srli	r22,r22,3
 4010404:	9cc001cc 	andi	r19,r19,7
 4010408:	98800c04 	addi	r2,r19,48
 401040c:	843fffc4 	addi	r16,r16,-1
 4010410:	20e6b03a 	or	r19,r4,r3
 4010414:	80800005 	stb	r2,0(r16)
 4010418:	9d86b03a 	or	r3,r19,r22
 401041c:	183ff61e 	bne	r3,zero,40103f8 <__alt_mem_onchip_memory2_0+0xfc00f158>
 4010420:	90c0004c 	andi	r3,r18,1
 4010424:	18014126 	beq	r3,zero,401092c <___vfprintf_internal_r+0xc34>
 4010428:	10803fcc 	andi	r2,r2,255
 401042c:	1080201c 	xori	r2,r2,128
 4010430:	10bfe004 	addi	r2,r2,-128
 4010434:	00c00c04 	movi	r3,48
 4010438:	10c13c26 	beq	r2,r3,401092c <___vfprintf_internal_r+0xc34>
 401043c:	80ffffc5 	stb	r3,-1(r16)
 4010440:	d8c02817 	ldw	r3,160(sp)
 4010444:	80bfffc4 	addi	r2,r16,-1
 4010448:	1021883a 	mov	r16,r2
 401044c:	1887c83a 	sub	r3,r3,r2
 4010450:	d8c02b15 	stw	r3,172(sp)
 4010454:	d8802b17 	ldw	r2,172(sp)
 4010458:	d9002a17 	ldw	r4,168(sp)
 401045c:	1100010e 	bge	r2,r4,4010464 <___vfprintf_internal_r+0x76c>
 4010460:	2005883a 	mov	r2,r4
 4010464:	d8802915 	stw	r2,164(sp)
 4010468:	d8003215 	stw	zero,200(sp)
 401046c:	e7003fcc 	andi	fp,fp,255
 4010470:	e700201c 	xori	fp,fp,128
 4010474:	e73fe004 	addi	fp,fp,-128
 4010478:	e0000326 	beq	fp,zero,4010488 <___vfprintf_internal_r+0x790>
 401047c:	d8c02917 	ldw	r3,164(sp)
 4010480:	18c00044 	addi	r3,r3,1
 4010484:	d8c02915 	stw	r3,164(sp)
 4010488:	90c0008c 	andi	r3,r18,2
 401048c:	d8c02c15 	stw	r3,176(sp)
 4010490:	18000326 	beq	r3,zero,40104a0 <___vfprintf_internal_r+0x7a8>
 4010494:	d8c02917 	ldw	r3,164(sp)
 4010498:	18c00084 	addi	r3,r3,2
 401049c:	d8c02915 	stw	r3,164(sp)
 40104a0:	90c0210c 	andi	r3,r18,132
 40104a4:	d8c03015 	stw	r3,192(sp)
 40104a8:	1801c51e 	bne	r3,zero,4010bc0 <___vfprintf_internal_r+0xec8>
 40104ac:	d9003117 	ldw	r4,196(sp)
 40104b0:	d8c02917 	ldw	r3,164(sp)
 40104b4:	20e7c83a 	sub	r19,r4,r3
 40104b8:	04c1c10e 	bge	zero,r19,4010bc0 <___vfprintf_internal_r+0xec8>
 40104bc:	02400404 	movi	r9,16
 40104c0:	d8c02017 	ldw	r3,128(sp)
 40104c4:	d8801f17 	ldw	r2,124(sp)
 40104c8:	4cc52f0e 	bge	r9,r19,4011988 <___vfprintf_internal_r+0x1c90>
 40104cc:	014100b4 	movhi	r5,1026
 40104d0:	295ea884 	addi	r5,r5,31394
 40104d4:	dc403b15 	stw	r17,236(sp)
 40104d8:	d9403515 	stw	r5,212(sp)
 40104dc:	9823883a 	mov	r17,r19
 40104e0:	482d883a 	mov	r22,r9
 40104e4:	9027883a 	mov	r19,r18
 40104e8:	070001c4 	movi	fp,7
 40104ec:	8025883a 	mov	r18,r16
 40104f0:	dc002d17 	ldw	r16,180(sp)
 40104f4:	00000306 	br	4010504 <___vfprintf_internal_r+0x80c>
 40104f8:	8c7ffc04 	addi	r17,r17,-16
 40104fc:	42000204 	addi	r8,r8,8
 4010500:	b440130e 	bge	r22,r17,4010550 <___vfprintf_internal_r+0x858>
 4010504:	010100b4 	movhi	r4,1026
 4010508:	18c00404 	addi	r3,r3,16
 401050c:	10800044 	addi	r2,r2,1
 4010510:	211ea884 	addi	r4,r4,31394
 4010514:	41000015 	stw	r4,0(r8)
 4010518:	45800115 	stw	r22,4(r8)
 401051c:	d8c02015 	stw	r3,128(sp)
 4010520:	d8801f15 	stw	r2,124(sp)
 4010524:	e0bff40e 	bge	fp,r2,40104f8 <__alt_mem_onchip_memory2_0+0xfc00f258>
 4010528:	d9801e04 	addi	r6,sp,120
 401052c:	b80b883a 	mov	r5,r23
 4010530:	8009883a 	mov	r4,r16
 4010534:	4016a940 	call	4016a94 <__sprint_r>
 4010538:	103ef31e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 401053c:	8c7ffc04 	addi	r17,r17,-16
 4010540:	d8c02017 	ldw	r3,128(sp)
 4010544:	d8801f17 	ldw	r2,124(sp)
 4010548:	da000404 	addi	r8,sp,16
 401054c:	b47fed16 	blt	r22,r17,4010504 <__alt_mem_onchip_memory2_0+0xfc00f264>
 4010550:	9021883a 	mov	r16,r18
 4010554:	9825883a 	mov	r18,r19
 4010558:	8827883a 	mov	r19,r17
 401055c:	dc403b17 	ldw	r17,236(sp)
 4010560:	d9403517 	ldw	r5,212(sp)
 4010564:	98c7883a 	add	r3,r19,r3
 4010568:	10800044 	addi	r2,r2,1
 401056c:	41400015 	stw	r5,0(r8)
 4010570:	44c00115 	stw	r19,4(r8)
 4010574:	d8c02015 	stw	r3,128(sp)
 4010578:	d8801f15 	stw	r2,124(sp)
 401057c:	010001c4 	movi	r4,7
 4010580:	2082c516 	blt	r4,r2,4011098 <___vfprintf_internal_r+0x13a0>
 4010584:	df002787 	ldb	fp,158(sp)
 4010588:	42000204 	addi	r8,r8,8
 401058c:	e0000c26 	beq	fp,zero,40105c0 <___vfprintf_internal_r+0x8c8>
 4010590:	d8801f17 	ldw	r2,124(sp)
 4010594:	d9002784 	addi	r4,sp,158
 4010598:	18c00044 	addi	r3,r3,1
 401059c:	10800044 	addi	r2,r2,1
 40105a0:	41000015 	stw	r4,0(r8)
 40105a4:	01000044 	movi	r4,1
 40105a8:	41000115 	stw	r4,4(r8)
 40105ac:	d8c02015 	stw	r3,128(sp)
 40105b0:	d8801f15 	stw	r2,124(sp)
 40105b4:	010001c4 	movi	r4,7
 40105b8:	20825e16 	blt	r4,r2,4010f34 <___vfprintf_internal_r+0x123c>
 40105bc:	42000204 	addi	r8,r8,8
 40105c0:	d8802c17 	ldw	r2,176(sp)
 40105c4:	10000c26 	beq	r2,zero,40105f8 <___vfprintf_internal_r+0x900>
 40105c8:	d8801f17 	ldw	r2,124(sp)
 40105cc:	d9002704 	addi	r4,sp,156
 40105d0:	18c00084 	addi	r3,r3,2
 40105d4:	10800044 	addi	r2,r2,1
 40105d8:	41000015 	stw	r4,0(r8)
 40105dc:	01000084 	movi	r4,2
 40105e0:	41000115 	stw	r4,4(r8)
 40105e4:	d8c02015 	stw	r3,128(sp)
 40105e8:	d8801f15 	stw	r2,124(sp)
 40105ec:	010001c4 	movi	r4,7
 40105f0:	20825816 	blt	r4,r2,4010f54 <___vfprintf_internal_r+0x125c>
 40105f4:	42000204 	addi	r8,r8,8
 40105f8:	d9003017 	ldw	r4,192(sp)
 40105fc:	00802004 	movi	r2,128
 4010600:	2081bb26 	beq	r4,r2,4010cf0 <___vfprintf_internal_r+0xff8>
 4010604:	d9402a17 	ldw	r5,168(sp)
 4010608:	d8802b17 	ldw	r2,172(sp)
 401060c:	28adc83a 	sub	r22,r5,r2
 4010610:	0580310e 	bge	zero,r22,40106d8 <___vfprintf_internal_r+0x9e0>
 4010614:	07000404 	movi	fp,16
 4010618:	d8801f17 	ldw	r2,124(sp)
 401061c:	e584360e 	bge	fp,r22,40116f8 <___vfprintf_internal_r+0x1a00>
 4010620:	014100b4 	movhi	r5,1026
 4010624:	295ea484 	addi	r5,r5,31378
 4010628:	dc402a15 	stw	r17,168(sp)
 401062c:	d9402c15 	stw	r5,176(sp)
 4010630:	b023883a 	mov	r17,r22
 4010634:	04c001c4 	movi	r19,7
 4010638:	a82d883a 	mov	r22,r21
 401063c:	902b883a 	mov	r21,r18
 4010640:	8025883a 	mov	r18,r16
 4010644:	dc002d17 	ldw	r16,180(sp)
 4010648:	00000306 	br	4010658 <___vfprintf_internal_r+0x960>
 401064c:	8c7ffc04 	addi	r17,r17,-16
 4010650:	42000204 	addi	r8,r8,8
 4010654:	e440110e 	bge	fp,r17,401069c <___vfprintf_internal_r+0x9a4>
 4010658:	18c00404 	addi	r3,r3,16
 401065c:	10800044 	addi	r2,r2,1
 4010660:	45000015 	stw	r20,0(r8)
 4010664:	47000115 	stw	fp,4(r8)
 4010668:	d8c02015 	stw	r3,128(sp)
 401066c:	d8801f15 	stw	r2,124(sp)
 4010670:	98bff60e 	bge	r19,r2,401064c <__alt_mem_onchip_memory2_0+0xfc00f3ac>
 4010674:	d9801e04 	addi	r6,sp,120
 4010678:	b80b883a 	mov	r5,r23
 401067c:	8009883a 	mov	r4,r16
 4010680:	4016a940 	call	4016a94 <__sprint_r>
 4010684:	103ea01e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4010688:	8c7ffc04 	addi	r17,r17,-16
 401068c:	d8c02017 	ldw	r3,128(sp)
 4010690:	d8801f17 	ldw	r2,124(sp)
 4010694:	da000404 	addi	r8,sp,16
 4010698:	e47fef16 	blt	fp,r17,4010658 <__alt_mem_onchip_memory2_0+0xfc00f3b8>
 401069c:	9021883a 	mov	r16,r18
 40106a0:	a825883a 	mov	r18,r21
 40106a4:	b02b883a 	mov	r21,r22
 40106a8:	882d883a 	mov	r22,r17
 40106ac:	dc402a17 	ldw	r17,168(sp)
 40106b0:	d9002c17 	ldw	r4,176(sp)
 40106b4:	1d87883a 	add	r3,r3,r22
 40106b8:	10800044 	addi	r2,r2,1
 40106bc:	41000015 	stw	r4,0(r8)
 40106c0:	45800115 	stw	r22,4(r8)
 40106c4:	d8c02015 	stw	r3,128(sp)
 40106c8:	d8801f15 	stw	r2,124(sp)
 40106cc:	010001c4 	movi	r4,7
 40106d0:	20821016 	blt	r4,r2,4010f14 <___vfprintf_internal_r+0x121c>
 40106d4:	42000204 	addi	r8,r8,8
 40106d8:	9080400c 	andi	r2,r18,256
 40106dc:	10013a1e 	bne	r2,zero,4010bc8 <___vfprintf_internal_r+0xed0>
 40106e0:	d9402b17 	ldw	r5,172(sp)
 40106e4:	d8801f17 	ldw	r2,124(sp)
 40106e8:	44000015 	stw	r16,0(r8)
 40106ec:	1947883a 	add	r3,r3,r5
 40106f0:	10800044 	addi	r2,r2,1
 40106f4:	41400115 	stw	r5,4(r8)
 40106f8:	d8c02015 	stw	r3,128(sp)
 40106fc:	d8801f15 	stw	r2,124(sp)
 4010700:	010001c4 	movi	r4,7
 4010704:	2081f516 	blt	r4,r2,4010edc <___vfprintf_internal_r+0x11e4>
 4010708:	42000204 	addi	r8,r8,8
 401070c:	9480010c 	andi	r18,r18,4
 4010710:	90003226 	beq	r18,zero,40107dc <___vfprintf_internal_r+0xae4>
 4010714:	d9403117 	ldw	r5,196(sp)
 4010718:	d8802917 	ldw	r2,164(sp)
 401071c:	28a1c83a 	sub	r16,r5,r2
 4010720:	04002e0e 	bge	zero,r16,40107dc <___vfprintf_internal_r+0xae4>
 4010724:	04400404 	movi	r17,16
 4010728:	d8801f17 	ldw	r2,124(sp)
 401072c:	8c04c40e 	bge	r17,r16,4011a40 <___vfprintf_internal_r+0x1d48>
 4010730:	014100b4 	movhi	r5,1026
 4010734:	295ea884 	addi	r5,r5,31394
 4010738:	d9403515 	stw	r5,212(sp)
 401073c:	048001c4 	movi	r18,7
 4010740:	dcc02d17 	ldw	r19,180(sp)
 4010744:	00000306 	br	4010754 <___vfprintf_internal_r+0xa5c>
 4010748:	843ffc04 	addi	r16,r16,-16
 401074c:	42000204 	addi	r8,r8,8
 4010750:	8c00130e 	bge	r17,r16,40107a0 <___vfprintf_internal_r+0xaa8>
 4010754:	010100b4 	movhi	r4,1026
 4010758:	18c00404 	addi	r3,r3,16
 401075c:	10800044 	addi	r2,r2,1
 4010760:	211ea884 	addi	r4,r4,31394
 4010764:	41000015 	stw	r4,0(r8)
 4010768:	44400115 	stw	r17,4(r8)
 401076c:	d8c02015 	stw	r3,128(sp)
 4010770:	d8801f15 	stw	r2,124(sp)
 4010774:	90bff40e 	bge	r18,r2,4010748 <__alt_mem_onchip_memory2_0+0xfc00f4a8>
 4010778:	d9801e04 	addi	r6,sp,120
 401077c:	b80b883a 	mov	r5,r23
 4010780:	9809883a 	mov	r4,r19
 4010784:	4016a940 	call	4016a94 <__sprint_r>
 4010788:	103e5f1e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 401078c:	843ffc04 	addi	r16,r16,-16
 4010790:	d8c02017 	ldw	r3,128(sp)
 4010794:	d8801f17 	ldw	r2,124(sp)
 4010798:	da000404 	addi	r8,sp,16
 401079c:	8c3fed16 	blt	r17,r16,4010754 <__alt_mem_onchip_memory2_0+0xfc00f4b4>
 40107a0:	d9403517 	ldw	r5,212(sp)
 40107a4:	1c07883a 	add	r3,r3,r16
 40107a8:	10800044 	addi	r2,r2,1
 40107ac:	41400015 	stw	r5,0(r8)
 40107b0:	44000115 	stw	r16,4(r8)
 40107b4:	d8c02015 	stw	r3,128(sp)
 40107b8:	d8801f15 	stw	r2,124(sp)
 40107bc:	010001c4 	movi	r4,7
 40107c0:	2080060e 	bge	r4,r2,40107dc <___vfprintf_internal_r+0xae4>
 40107c4:	d9002d17 	ldw	r4,180(sp)
 40107c8:	d9801e04 	addi	r6,sp,120
 40107cc:	b80b883a 	mov	r5,r23
 40107d0:	4016a940 	call	4016a94 <__sprint_r>
 40107d4:	103e4c1e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 40107d8:	d8c02017 	ldw	r3,128(sp)
 40107dc:	d8803117 	ldw	r2,196(sp)
 40107e0:	d9002917 	ldw	r4,164(sp)
 40107e4:	1100010e 	bge	r2,r4,40107ec <___vfprintf_internal_r+0xaf4>
 40107e8:	2005883a 	mov	r2,r4
 40107ec:	d9402f17 	ldw	r5,188(sp)
 40107f0:	288b883a 	add	r5,r5,r2
 40107f4:	d9402f15 	stw	r5,188(sp)
 40107f8:	1801c01e 	bne	r3,zero,4010efc <___vfprintf_internal_r+0x1204>
 40107fc:	a8800007 	ldb	r2,0(r21)
 4010800:	d8001f15 	stw	zero,124(sp)
 4010804:	da000404 	addi	r8,sp,16
 4010808:	103d751e 	bne	r2,zero,400fde0 <__alt_mem_onchip_memory2_0+0xfc00eb40>
 401080c:	a823883a 	mov	r17,r21
 4010810:	003d8b06 	br	400fe40 <__alt_mem_onchip_memory2_0+0xfc00eba0>
 4010814:	8025883a 	mov	r18,r16
 4010818:	dc002903 	ldbu	r16,164(sp)
 401081c:	e011883a 	mov	r8,fp
 4010820:	84003fcc 	andi	r16,r16,255
 4010824:	8005e51e 	bne	r16,zero,4011fbc <___vfprintf_internal_r+0x22c4>
 4010828:	94800414 	ori	r18,r18,16
 401082c:	9080080c 	andi	r2,r18,32
 4010830:	10022b26 	beq	r2,zero,40110e0 <___vfprintf_internal_r+0x13e8>
 4010834:	d9002e17 	ldw	r4,184(sp)
 4010838:	d9402a17 	ldw	r5,168(sp)
 401083c:	d8002785 	stb	zero,158(sp)
 4010840:	20c00204 	addi	r3,r4,8
 4010844:	24c00017 	ldw	r19,0(r4)
 4010848:	25800117 	ldw	r22,4(r4)
 401084c:	28042e16 	blt	r5,zero,4011908 <___vfprintf_internal_r+0x1c10>
 4010850:	013fdfc4 	movi	r4,-129
 4010854:	9d84b03a 	or	r2,r19,r22
 4010858:	d8c02e15 	stw	r3,184(sp)
 401085c:	9124703a 	and	r18,r18,r4
 4010860:	0039883a 	mov	fp,zero
 4010864:	103e801e 	bne	r2,zero,4010268 <__alt_mem_onchip_memory2_0+0xfc00efc8>
 4010868:	d9002a17 	ldw	r4,168(sp)
 401086c:	2002e01e 	bne	r4,zero,40113f0 <___vfprintf_internal_r+0x16f8>
 4010870:	d8002a15 	stw	zero,168(sp)
 4010874:	d8002b15 	stw	zero,172(sp)
 4010878:	dc001e04 	addi	r16,sp,120
 401087c:	003ef506 	br	4010454 <__alt_mem_onchip_memory2_0+0xfc00f1b4>
 4010880:	8025883a 	mov	r18,r16
 4010884:	dc002903 	ldbu	r16,164(sp)
 4010888:	e011883a 	mov	r8,fp
 401088c:	84003fcc 	andi	r16,r16,255
 4010890:	8005ba1e 	bne	r16,zero,4011f7c <___vfprintf_internal_r+0x2284>
 4010894:	010100b4 	movhi	r4,1026
 4010898:	211e9804 	addi	r4,r4,31328
 401089c:	d9003915 	stw	r4,228(sp)
 40108a0:	9080080c 	andi	r2,r18,32
 40108a4:	10006126 	beq	r2,zero,4010a2c <___vfprintf_internal_r+0xd34>
 40108a8:	d9402e17 	ldw	r5,184(sp)
 40108ac:	2cc00017 	ldw	r19,0(r5)
 40108b0:	2d800117 	ldw	r22,4(r5)
 40108b4:	29400204 	addi	r5,r5,8
 40108b8:	d9402e15 	stw	r5,184(sp)
 40108bc:	9080004c 	andi	r2,r18,1
 40108c0:	1001ac26 	beq	r2,zero,4010f74 <___vfprintf_internal_r+0x127c>
 40108c4:	9d84b03a 	or	r2,r19,r22
 40108c8:	10038526 	beq	r2,zero,40116e0 <___vfprintf_internal_r+0x19e8>
 40108cc:	d8c02a17 	ldw	r3,168(sp)
 40108d0:	00800c04 	movi	r2,48
 40108d4:	d8802705 	stb	r2,156(sp)
 40108d8:	dc402745 	stb	r17,157(sp)
 40108dc:	d8002785 	stb	zero,158(sp)
 40108e0:	90800094 	ori	r2,r18,2
 40108e4:	18047916 	blt	r3,zero,4011acc <___vfprintf_internal_r+0x1dd4>
 40108e8:	00bfdfc4 	movi	r2,-129
 40108ec:	90a4703a 	and	r18,r18,r2
 40108f0:	94800094 	ori	r18,r18,2
 40108f4:	0039883a 	mov	fp,zero
 40108f8:	d9003917 	ldw	r4,228(sp)
 40108fc:	dc001e04 	addi	r16,sp,120
 4010900:	988003cc 	andi	r2,r19,15
 4010904:	b006973a 	slli	r3,r22,28
 4010908:	2085883a 	add	r2,r4,r2
 401090c:	9826d13a 	srli	r19,r19,4
 4010910:	10800003 	ldbu	r2,0(r2)
 4010914:	b02cd13a 	srli	r22,r22,4
 4010918:	843fffc4 	addi	r16,r16,-1
 401091c:	1ce6b03a 	or	r19,r3,r19
 4010920:	80800005 	stb	r2,0(r16)
 4010924:	9d84b03a 	or	r2,r19,r22
 4010928:	103ff51e 	bne	r2,zero,4010900 <__alt_mem_onchip_memory2_0+0xfc00f660>
 401092c:	d8c02817 	ldw	r3,160(sp)
 4010930:	1c07c83a 	sub	r3,r3,r16
 4010934:	d8c02b15 	stw	r3,172(sp)
 4010938:	003ec606 	br	4010454 <__alt_mem_onchip_memory2_0+0xfc00f1b4>
 401093c:	8025883a 	mov	r18,r16
 4010940:	dc002903 	ldbu	r16,164(sp)
 4010944:	e011883a 	mov	r8,fp
 4010948:	84003fcc 	andi	r16,r16,255
 401094c:	803e9626 	beq	r16,zero,40103a8 <__alt_mem_onchip_memory2_0+0xfc00f108>
 4010950:	d8c02b03 	ldbu	r3,172(sp)
 4010954:	d8c02785 	stb	r3,158(sp)
 4010958:	003e9306 	br	40103a8 <__alt_mem_onchip_memory2_0+0xfc00f108>
 401095c:	00c00044 	movi	r3,1
 4010960:	d8c02905 	stb	r3,164(sp)
 4010964:	00c00ac4 	movi	r3,43
 4010968:	d8c02b05 	stb	r3,172(sp)
 401096c:	ac400007 	ldb	r17,0(r21)
 4010970:	003d4306 	br	400fe80 <__alt_mem_onchip_memory2_0+0xfc00ebe0>
 4010974:	84000814 	ori	r16,r16,32
 4010978:	ac400007 	ldb	r17,0(r21)
 401097c:	003d4006 	br	400fe80 <__alt_mem_onchip_memory2_0+0xfc00ebe0>
 4010980:	d8802e17 	ldw	r2,184(sp)
 4010984:	8025883a 	mov	r18,r16
 4010988:	d8002785 	stb	zero,158(sp)
 401098c:	14000017 	ldw	r16,0(r2)
 4010990:	e011883a 	mov	r8,fp
 4010994:	14c00104 	addi	r19,r2,4
 4010998:	80042d26 	beq	r16,zero,4011a50 <___vfprintf_internal_r+0x1d58>
 401099c:	d8c02a17 	ldw	r3,168(sp)
 40109a0:	1803e416 	blt	r3,zero,4011934 <___vfprintf_internal_r+0x1c3c>
 40109a4:	180d883a 	mov	r6,r3
 40109a8:	000b883a 	mov	r5,zero
 40109ac:	8009883a 	mov	r4,r16
 40109b0:	df003d15 	stw	fp,244(sp)
 40109b4:	4014e240 	call	4014e24 <memchr>
 40109b8:	da003d17 	ldw	r8,244(sp)
 40109bc:	10046826 	beq	r2,zero,4011b60 <___vfprintf_internal_r+0x1e68>
 40109c0:	1405c83a 	sub	r2,r2,r16
 40109c4:	d8802b15 	stw	r2,172(sp)
 40109c8:	1003e016 	blt	r2,zero,401194c <___vfprintf_internal_r+0x1c54>
 40109cc:	df002783 	ldbu	fp,158(sp)
 40109d0:	d8802915 	stw	r2,164(sp)
 40109d4:	dcc02e15 	stw	r19,184(sp)
 40109d8:	d8002a15 	stw	zero,168(sp)
 40109dc:	d8003215 	stw	zero,200(sp)
 40109e0:	003ea206 	br	401046c <__alt_mem_onchip_memory2_0+0xfc00f1cc>
 40109e4:	8025883a 	mov	r18,r16
 40109e8:	dc002903 	ldbu	r16,164(sp)
 40109ec:	e011883a 	mov	r8,fp
 40109f0:	84003fcc 	andi	r16,r16,255
 40109f4:	803f8d26 	beq	r16,zero,401082c <__alt_mem_onchip_memory2_0+0xfc00f58c>
 40109f8:	d8c02b03 	ldbu	r3,172(sp)
 40109fc:	d8c02785 	stb	r3,158(sp)
 4010a00:	003f8a06 	br	401082c <__alt_mem_onchip_memory2_0+0xfc00f58c>
 4010a04:	8025883a 	mov	r18,r16
 4010a08:	dc002903 	ldbu	r16,164(sp)
 4010a0c:	e011883a 	mov	r8,fp
 4010a10:	84003fcc 	andi	r16,r16,255
 4010a14:	8005661e 	bne	r16,zero,4011fb0 <___vfprintf_internal_r+0x22b8>
 4010a18:	010100b4 	movhi	r4,1026
 4010a1c:	211e9d04 	addi	r4,r4,31348
 4010a20:	d9003915 	stw	r4,228(sp)
 4010a24:	9080080c 	andi	r2,r18,32
 4010a28:	103f9f1e 	bne	r2,zero,40108a8 <__alt_mem_onchip_memory2_0+0xfc00f608>
 4010a2c:	9080040c 	andi	r2,r18,16
 4010a30:	1002eb26 	beq	r2,zero,40115e0 <___vfprintf_internal_r+0x18e8>
 4010a34:	d8802e17 	ldw	r2,184(sp)
 4010a38:	002d883a 	mov	r22,zero
 4010a3c:	14c00017 	ldw	r19,0(r2)
 4010a40:	10800104 	addi	r2,r2,4
 4010a44:	d8802e15 	stw	r2,184(sp)
 4010a48:	003f9c06 	br	40108bc <__alt_mem_onchip_memory2_0+0xfc00f61c>
 4010a4c:	d8802b07 	ldb	r2,172(sp)
 4010a50:	1002e11e 	bne	r2,zero,40115d8 <___vfprintf_internal_r+0x18e0>
 4010a54:	00c00044 	movi	r3,1
 4010a58:	d8c02905 	stb	r3,164(sp)
 4010a5c:	00c00804 	movi	r3,32
 4010a60:	d8c02b05 	stb	r3,172(sp)
 4010a64:	ac400007 	ldb	r17,0(r21)
 4010a68:	003d0506 	br	400fe80 <__alt_mem_onchip_memory2_0+0xfc00ebe0>
 4010a6c:	84000054 	ori	r16,r16,1
 4010a70:	ac400007 	ldb	r17,0(r21)
 4010a74:	003d0206 	br	400fe80 <__alt_mem_onchip_memory2_0+0xfc00ebe0>
 4010a78:	8025883a 	mov	r18,r16
 4010a7c:	dc002903 	ldbu	r16,164(sp)
 4010a80:	e011883a 	mov	r8,fp
 4010a84:	84003fcc 	andi	r16,r16,255
 4010a88:	803de726 	beq	r16,zero,4010228 <__alt_mem_onchip_memory2_0+0xfc00ef88>
 4010a8c:	d8c02b03 	ldbu	r3,172(sp)
 4010a90:	d8c02785 	stb	r3,158(sp)
 4010a94:	003de406 	br	4010228 <__alt_mem_onchip_memory2_0+0xfc00ef88>
 4010a98:	84001014 	ori	r16,r16,64
 4010a9c:	ac400007 	ldb	r17,0(r21)
 4010aa0:	003cf706 	br	400fe80 <__alt_mem_onchip_memory2_0+0xfc00ebe0>
 4010aa4:	ac400007 	ldb	r17,0(r21)
 4010aa8:	00801b04 	movi	r2,108
 4010aac:	88838f26 	beq	r17,r2,40118ec <___vfprintf_internal_r+0x1bf4>
 4010ab0:	84000414 	ori	r16,r16,16
 4010ab4:	003cf206 	br	400fe80 <__alt_mem_onchip_memory2_0+0xfc00ebe0>
 4010ab8:	8025883a 	mov	r18,r16
 4010abc:	dc002903 	ldbu	r16,164(sp)
 4010ac0:	e011883a 	mov	r8,fp
 4010ac4:	84003fcc 	andi	r16,r16,255
 4010ac8:	80053f1e 	bne	r16,zero,4011fc8 <___vfprintf_internal_r+0x22d0>
 4010acc:	9080080c 	andi	r2,r18,32
 4010ad0:	1002d226 	beq	r2,zero,401161c <___vfprintf_internal_r+0x1924>
 4010ad4:	d9002e17 	ldw	r4,184(sp)
 4010ad8:	d9402f17 	ldw	r5,188(sp)
 4010adc:	20800017 	ldw	r2,0(r4)
 4010ae0:	2807d7fa 	srai	r3,r5,31
 4010ae4:	21000104 	addi	r4,r4,4
 4010ae8:	d9002e15 	stw	r4,184(sp)
 4010aec:	11400015 	stw	r5,0(r2)
 4010af0:	10c00115 	stw	r3,4(r2)
 4010af4:	003cb806 	br	400fdd8 <__alt_mem_onchip_memory2_0+0xfc00eb38>
 4010af8:	d8c02e17 	ldw	r3,184(sp)
 4010afc:	d9002e17 	ldw	r4,184(sp)
 4010b00:	8025883a 	mov	r18,r16
 4010b04:	18800017 	ldw	r2,0(r3)
 4010b08:	21000104 	addi	r4,r4,4
 4010b0c:	00c00044 	movi	r3,1
 4010b10:	e011883a 	mov	r8,fp
 4010b14:	d8c02915 	stw	r3,164(sp)
 4010b18:	d8002785 	stb	zero,158(sp)
 4010b1c:	d8801405 	stb	r2,80(sp)
 4010b20:	d9002e15 	stw	r4,184(sp)
 4010b24:	d8c02b15 	stw	r3,172(sp)
 4010b28:	d8002a15 	stw	zero,168(sp)
 4010b2c:	d8003215 	stw	zero,200(sp)
 4010b30:	dc001404 	addi	r16,sp,80
 4010b34:	0039883a 	mov	fp,zero
 4010b38:	003e5306 	br	4010488 <__alt_mem_onchip_memory2_0+0xfc00f1e8>
 4010b3c:	010100b4 	movhi	r4,1026
 4010b40:	211e9d04 	addi	r4,r4,31348
 4010b44:	0039883a 	mov	fp,zero
 4010b48:	d9003915 	stw	r4,228(sp)
 4010b4c:	04401e04 	movi	r17,120
 4010b50:	003f6906 	br	40108f8 <__alt_mem_onchip_memory2_0+0xfc00f658>
 4010b54:	8025883a 	mov	r18,r16
 4010b58:	dc002903 	ldbu	r16,164(sp)
 4010b5c:	e011883a 	mov	r8,fp
 4010b60:	84003fcc 	andi	r16,r16,255
 4010b64:	8005081e 	bne	r16,zero,4011f88 <___vfprintf_internal_r+0x2290>
 4010b68:	883d6126 	beq	r17,zero,40100f0 <__alt_mem_onchip_memory2_0+0xfc00ee50>
 4010b6c:	00c00044 	movi	r3,1
 4010b70:	d8c02915 	stw	r3,164(sp)
 4010b74:	dc401405 	stb	r17,80(sp)
 4010b78:	d8002785 	stb	zero,158(sp)
 4010b7c:	003fe906 	br	4010b24 <__alt_mem_onchip_memory2_0+0xfc00f884>
 4010b80:	014100b4 	movhi	r5,1026
 4010b84:	295e9d04 	addi	r5,r5,31348
 4010b88:	d9403915 	stw	r5,228(sp)
 4010b8c:	d8c02e15 	stw	r3,184(sp)
 4010b90:	1025883a 	mov	r18,r2
 4010b94:	04401e04 	movi	r17,120
 4010b98:	9d84b03a 	or	r2,r19,r22
 4010b9c:	1000fc1e 	bne	r2,zero,4010f90 <___vfprintf_internal_r+0x1298>
 4010ba0:	0039883a 	mov	fp,zero
 4010ba4:	00800084 	movi	r2,2
 4010ba8:	10803fcc 	andi	r2,r2,255
 4010bac:	00c00044 	movi	r3,1
 4010bb0:	10c20f26 	beq	r2,r3,40113f0 <___vfprintf_internal_r+0x16f8>
 4010bb4:	00c00084 	movi	r3,2
 4010bb8:	10fd3326 	beq	r2,r3,4010088 <__alt_mem_onchip_memory2_0+0xfc00ede8>
 4010bbc:	003e0b06 	br	40103ec <__alt_mem_onchip_memory2_0+0xfc00f14c>
 4010bc0:	d8c02017 	ldw	r3,128(sp)
 4010bc4:	003e7106 	br	401058c <__alt_mem_onchip_memory2_0+0xfc00f2ec>
 4010bc8:	00801944 	movi	r2,101
 4010bcc:	14407e0e 	bge	r2,r17,4010dc8 <___vfprintf_internal_r+0x10d0>
 4010bd0:	d9003617 	ldw	r4,216(sp)
 4010bd4:	d9403817 	ldw	r5,224(sp)
 4010bd8:	000d883a 	mov	r6,zero
 4010bdc:	000f883a 	mov	r7,zero
 4010be0:	d8c03c15 	stw	r3,240(sp)
 4010be4:	da003d15 	stw	r8,244(sp)
 4010be8:	401a8180 	call	401a818 <__eqdf2>
 4010bec:	d8c03c17 	ldw	r3,240(sp)
 4010bf0:	da003d17 	ldw	r8,244(sp)
 4010bf4:	1000f71e 	bne	r2,zero,4010fd4 <___vfprintf_internal_r+0x12dc>
 4010bf8:	d8801f17 	ldw	r2,124(sp)
 4010bfc:	010100b4 	movhi	r4,1026
 4010c00:	211ea404 	addi	r4,r4,31376
 4010c04:	18c00044 	addi	r3,r3,1
 4010c08:	10800044 	addi	r2,r2,1
 4010c0c:	41000015 	stw	r4,0(r8)
 4010c10:	01000044 	movi	r4,1
 4010c14:	41000115 	stw	r4,4(r8)
 4010c18:	d8c02015 	stw	r3,128(sp)
 4010c1c:	d8801f15 	stw	r2,124(sp)
 4010c20:	010001c4 	movi	r4,7
 4010c24:	2082b816 	blt	r4,r2,4011708 <___vfprintf_internal_r+0x1a10>
 4010c28:	42000204 	addi	r8,r8,8
 4010c2c:	d8802617 	ldw	r2,152(sp)
 4010c30:	d9403317 	ldw	r5,204(sp)
 4010c34:	11400216 	blt	r2,r5,4010c40 <___vfprintf_internal_r+0xf48>
 4010c38:	9080004c 	andi	r2,r18,1
 4010c3c:	103eb326 	beq	r2,zero,401070c <__alt_mem_onchip_memory2_0+0xfc00f46c>
 4010c40:	d8803717 	ldw	r2,220(sp)
 4010c44:	d9003417 	ldw	r4,208(sp)
 4010c48:	d9403717 	ldw	r5,220(sp)
 4010c4c:	1887883a 	add	r3,r3,r2
 4010c50:	d8801f17 	ldw	r2,124(sp)
 4010c54:	41000015 	stw	r4,0(r8)
 4010c58:	41400115 	stw	r5,4(r8)
 4010c5c:	10800044 	addi	r2,r2,1
 4010c60:	d8c02015 	stw	r3,128(sp)
 4010c64:	d8801f15 	stw	r2,124(sp)
 4010c68:	010001c4 	movi	r4,7
 4010c6c:	20832916 	blt	r4,r2,4011914 <___vfprintf_internal_r+0x1c1c>
 4010c70:	42000204 	addi	r8,r8,8
 4010c74:	d8803317 	ldw	r2,204(sp)
 4010c78:	143fffc4 	addi	r16,r2,-1
 4010c7c:	043ea30e 	bge	zero,r16,401070c <__alt_mem_onchip_memory2_0+0xfc00f46c>
 4010c80:	04400404 	movi	r17,16
 4010c84:	d8801f17 	ldw	r2,124(sp)
 4010c88:	8c00880e 	bge	r17,r16,4010eac <___vfprintf_internal_r+0x11b4>
 4010c8c:	014100b4 	movhi	r5,1026
 4010c90:	295ea484 	addi	r5,r5,31378
 4010c94:	d9402c15 	stw	r5,176(sp)
 4010c98:	058001c4 	movi	r22,7
 4010c9c:	dcc02d17 	ldw	r19,180(sp)
 4010ca0:	00000306 	br	4010cb0 <___vfprintf_internal_r+0xfb8>
 4010ca4:	42000204 	addi	r8,r8,8
 4010ca8:	843ffc04 	addi	r16,r16,-16
 4010cac:	8c00820e 	bge	r17,r16,4010eb8 <___vfprintf_internal_r+0x11c0>
 4010cb0:	18c00404 	addi	r3,r3,16
 4010cb4:	10800044 	addi	r2,r2,1
 4010cb8:	45000015 	stw	r20,0(r8)
 4010cbc:	44400115 	stw	r17,4(r8)
 4010cc0:	d8c02015 	stw	r3,128(sp)
 4010cc4:	d8801f15 	stw	r2,124(sp)
 4010cc8:	b0bff60e 	bge	r22,r2,4010ca4 <__alt_mem_onchip_memory2_0+0xfc00fa04>
 4010ccc:	d9801e04 	addi	r6,sp,120
 4010cd0:	b80b883a 	mov	r5,r23
 4010cd4:	9809883a 	mov	r4,r19
 4010cd8:	4016a940 	call	4016a94 <__sprint_r>
 4010cdc:	103d0a1e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4010ce0:	d8c02017 	ldw	r3,128(sp)
 4010ce4:	d8801f17 	ldw	r2,124(sp)
 4010ce8:	da000404 	addi	r8,sp,16
 4010cec:	003fee06 	br	4010ca8 <__alt_mem_onchip_memory2_0+0xfc00fa08>
 4010cf0:	d9403117 	ldw	r5,196(sp)
 4010cf4:	d8802917 	ldw	r2,164(sp)
 4010cf8:	28adc83a 	sub	r22,r5,r2
 4010cfc:	05be410e 	bge	zero,r22,4010604 <__alt_mem_onchip_memory2_0+0xfc00f364>
 4010d00:	07000404 	movi	fp,16
 4010d04:	d8801f17 	ldw	r2,124(sp)
 4010d08:	e5838f0e 	bge	fp,r22,4011b48 <___vfprintf_internal_r+0x1e50>
 4010d0c:	014100b4 	movhi	r5,1026
 4010d10:	295ea484 	addi	r5,r5,31378
 4010d14:	dc403015 	stw	r17,192(sp)
 4010d18:	d9402c15 	stw	r5,176(sp)
 4010d1c:	b023883a 	mov	r17,r22
 4010d20:	04c001c4 	movi	r19,7
 4010d24:	a82d883a 	mov	r22,r21
 4010d28:	902b883a 	mov	r21,r18
 4010d2c:	8025883a 	mov	r18,r16
 4010d30:	dc002d17 	ldw	r16,180(sp)
 4010d34:	00000306 	br	4010d44 <___vfprintf_internal_r+0x104c>
 4010d38:	8c7ffc04 	addi	r17,r17,-16
 4010d3c:	42000204 	addi	r8,r8,8
 4010d40:	e440110e 	bge	fp,r17,4010d88 <___vfprintf_internal_r+0x1090>
 4010d44:	18c00404 	addi	r3,r3,16
 4010d48:	10800044 	addi	r2,r2,1
 4010d4c:	45000015 	stw	r20,0(r8)
 4010d50:	47000115 	stw	fp,4(r8)
 4010d54:	d8c02015 	stw	r3,128(sp)
 4010d58:	d8801f15 	stw	r2,124(sp)
 4010d5c:	98bff60e 	bge	r19,r2,4010d38 <__alt_mem_onchip_memory2_0+0xfc00fa98>
 4010d60:	d9801e04 	addi	r6,sp,120
 4010d64:	b80b883a 	mov	r5,r23
 4010d68:	8009883a 	mov	r4,r16
 4010d6c:	4016a940 	call	4016a94 <__sprint_r>
 4010d70:	103ce51e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4010d74:	8c7ffc04 	addi	r17,r17,-16
 4010d78:	d8c02017 	ldw	r3,128(sp)
 4010d7c:	d8801f17 	ldw	r2,124(sp)
 4010d80:	da000404 	addi	r8,sp,16
 4010d84:	e47fef16 	blt	fp,r17,4010d44 <__alt_mem_onchip_memory2_0+0xfc00faa4>
 4010d88:	9021883a 	mov	r16,r18
 4010d8c:	a825883a 	mov	r18,r21
 4010d90:	b02b883a 	mov	r21,r22
 4010d94:	882d883a 	mov	r22,r17
 4010d98:	dc403017 	ldw	r17,192(sp)
 4010d9c:	d9002c17 	ldw	r4,176(sp)
 4010da0:	1d87883a 	add	r3,r3,r22
 4010da4:	10800044 	addi	r2,r2,1
 4010da8:	41000015 	stw	r4,0(r8)
 4010dac:	45800115 	stw	r22,4(r8)
 4010db0:	d8c02015 	stw	r3,128(sp)
 4010db4:	d8801f15 	stw	r2,124(sp)
 4010db8:	010001c4 	movi	r4,7
 4010dbc:	20818e16 	blt	r4,r2,40113f8 <___vfprintf_internal_r+0x1700>
 4010dc0:	42000204 	addi	r8,r8,8
 4010dc4:	003e0f06 	br	4010604 <__alt_mem_onchip_memory2_0+0xfc00f364>
 4010dc8:	d9403317 	ldw	r5,204(sp)
 4010dcc:	00800044 	movi	r2,1
 4010dd0:	18c00044 	addi	r3,r3,1
 4010dd4:	1141530e 	bge	r2,r5,4011324 <___vfprintf_internal_r+0x162c>
 4010dd8:	dc401f17 	ldw	r17,124(sp)
 4010ddc:	00800044 	movi	r2,1
 4010de0:	40800115 	stw	r2,4(r8)
 4010de4:	8c400044 	addi	r17,r17,1
 4010de8:	44000015 	stw	r16,0(r8)
 4010dec:	d8c02015 	stw	r3,128(sp)
 4010df0:	dc401f15 	stw	r17,124(sp)
 4010df4:	008001c4 	movi	r2,7
 4010df8:	14416b16 	blt	r2,r17,40113a8 <___vfprintf_internal_r+0x16b0>
 4010dfc:	42000204 	addi	r8,r8,8
 4010e00:	d8803717 	ldw	r2,220(sp)
 4010e04:	d9003417 	ldw	r4,208(sp)
 4010e08:	8c400044 	addi	r17,r17,1
 4010e0c:	10c7883a 	add	r3,r2,r3
 4010e10:	40800115 	stw	r2,4(r8)
 4010e14:	41000015 	stw	r4,0(r8)
 4010e18:	d8c02015 	stw	r3,128(sp)
 4010e1c:	dc401f15 	stw	r17,124(sp)
 4010e20:	008001c4 	movi	r2,7
 4010e24:	14416916 	blt	r2,r17,40113cc <___vfprintf_internal_r+0x16d4>
 4010e28:	45800204 	addi	r22,r8,8
 4010e2c:	d9003617 	ldw	r4,216(sp)
 4010e30:	d9403817 	ldw	r5,224(sp)
 4010e34:	000d883a 	mov	r6,zero
 4010e38:	000f883a 	mov	r7,zero
 4010e3c:	d8c03c15 	stw	r3,240(sp)
 4010e40:	401a8180 	call	401a818 <__eqdf2>
 4010e44:	d8c03c17 	ldw	r3,240(sp)
 4010e48:	1000bc26 	beq	r2,zero,401113c <___vfprintf_internal_r+0x1444>
 4010e4c:	d9403317 	ldw	r5,204(sp)
 4010e50:	84000044 	addi	r16,r16,1
 4010e54:	8c400044 	addi	r17,r17,1
 4010e58:	28bfffc4 	addi	r2,r5,-1
 4010e5c:	1887883a 	add	r3,r3,r2
 4010e60:	b0800115 	stw	r2,4(r22)
 4010e64:	b4000015 	stw	r16,0(r22)
 4010e68:	d8c02015 	stw	r3,128(sp)
 4010e6c:	dc401f15 	stw	r17,124(sp)
 4010e70:	008001c4 	movi	r2,7
 4010e74:	14414316 	blt	r2,r17,4011384 <___vfprintf_internal_r+0x168c>
 4010e78:	b5800204 	addi	r22,r22,8
 4010e7c:	d9003a17 	ldw	r4,232(sp)
 4010e80:	df0022c4 	addi	fp,sp,139
 4010e84:	8c400044 	addi	r17,r17,1
 4010e88:	20c7883a 	add	r3,r4,r3
 4010e8c:	b7000015 	stw	fp,0(r22)
 4010e90:	b1000115 	stw	r4,4(r22)
 4010e94:	d8c02015 	stw	r3,128(sp)
 4010e98:	dc401f15 	stw	r17,124(sp)
 4010e9c:	008001c4 	movi	r2,7
 4010ea0:	14400e16 	blt	r2,r17,4010edc <___vfprintf_internal_r+0x11e4>
 4010ea4:	b2000204 	addi	r8,r22,8
 4010ea8:	003e1806 	br	401070c <__alt_mem_onchip_memory2_0+0xfc00f46c>
 4010eac:	010100b4 	movhi	r4,1026
 4010eb0:	211ea484 	addi	r4,r4,31378
 4010eb4:	d9002c15 	stw	r4,176(sp)
 4010eb8:	d9002c17 	ldw	r4,176(sp)
 4010ebc:	1c07883a 	add	r3,r3,r16
 4010ec0:	44000115 	stw	r16,4(r8)
 4010ec4:	41000015 	stw	r4,0(r8)
 4010ec8:	10800044 	addi	r2,r2,1
 4010ecc:	d8c02015 	stw	r3,128(sp)
 4010ed0:	d8801f15 	stw	r2,124(sp)
 4010ed4:	010001c4 	movi	r4,7
 4010ed8:	20be0b0e 	bge	r4,r2,4010708 <__alt_mem_onchip_memory2_0+0xfc00f468>
 4010edc:	d9002d17 	ldw	r4,180(sp)
 4010ee0:	d9801e04 	addi	r6,sp,120
 4010ee4:	b80b883a 	mov	r5,r23
 4010ee8:	4016a940 	call	4016a94 <__sprint_r>
 4010eec:	103c861e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4010ef0:	d8c02017 	ldw	r3,128(sp)
 4010ef4:	da000404 	addi	r8,sp,16
 4010ef8:	003e0406 	br	401070c <__alt_mem_onchip_memory2_0+0xfc00f46c>
 4010efc:	d9002d17 	ldw	r4,180(sp)
 4010f00:	d9801e04 	addi	r6,sp,120
 4010f04:	b80b883a 	mov	r5,r23
 4010f08:	4016a940 	call	4016a94 <__sprint_r>
 4010f0c:	103e3b26 	beq	r2,zero,40107fc <__alt_mem_onchip_memory2_0+0xfc00f55c>
 4010f10:	003c7d06 	br	4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4010f14:	d9002d17 	ldw	r4,180(sp)
 4010f18:	d9801e04 	addi	r6,sp,120
 4010f1c:	b80b883a 	mov	r5,r23
 4010f20:	4016a940 	call	4016a94 <__sprint_r>
 4010f24:	103c781e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4010f28:	d8c02017 	ldw	r3,128(sp)
 4010f2c:	da000404 	addi	r8,sp,16
 4010f30:	003de906 	br	40106d8 <__alt_mem_onchip_memory2_0+0xfc00f438>
 4010f34:	d9002d17 	ldw	r4,180(sp)
 4010f38:	d9801e04 	addi	r6,sp,120
 4010f3c:	b80b883a 	mov	r5,r23
 4010f40:	4016a940 	call	4016a94 <__sprint_r>
 4010f44:	103c701e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4010f48:	d8c02017 	ldw	r3,128(sp)
 4010f4c:	da000404 	addi	r8,sp,16
 4010f50:	003d9b06 	br	40105c0 <__alt_mem_onchip_memory2_0+0xfc00f320>
 4010f54:	d9002d17 	ldw	r4,180(sp)
 4010f58:	d9801e04 	addi	r6,sp,120
 4010f5c:	b80b883a 	mov	r5,r23
 4010f60:	4016a940 	call	4016a94 <__sprint_r>
 4010f64:	103c681e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4010f68:	d8c02017 	ldw	r3,128(sp)
 4010f6c:	da000404 	addi	r8,sp,16
 4010f70:	003da106 	br	40105f8 <__alt_mem_onchip_memory2_0+0xfc00f358>
 4010f74:	d9402a17 	ldw	r5,168(sp)
 4010f78:	d8002785 	stb	zero,158(sp)
 4010f7c:	283f0616 	blt	r5,zero,4010b98 <__alt_mem_onchip_memory2_0+0xfc00f8f8>
 4010f80:	00ffdfc4 	movi	r3,-129
 4010f84:	9d84b03a 	or	r2,r19,r22
 4010f88:	90e4703a 	and	r18,r18,r3
 4010f8c:	103c3b26 	beq	r2,zero,401007c <__alt_mem_onchip_memory2_0+0xfc00eddc>
 4010f90:	0039883a 	mov	fp,zero
 4010f94:	003e5806 	br	40108f8 <__alt_mem_onchip_memory2_0+0xfc00f658>
 4010f98:	9080040c 	andi	r2,r18,16
 4010f9c:	1001b326 	beq	r2,zero,401166c <___vfprintf_internal_r+0x1974>
 4010fa0:	d8c02e17 	ldw	r3,184(sp)
 4010fa4:	d9002a17 	ldw	r4,168(sp)
 4010fa8:	d8002785 	stb	zero,158(sp)
 4010fac:	18800104 	addi	r2,r3,4
 4010fb0:	1cc00017 	ldw	r19,0(r3)
 4010fb4:	002d883a 	mov	r22,zero
 4010fb8:	2001b516 	blt	r4,zero,4011690 <___vfprintf_internal_r+0x1998>
 4010fbc:	00ffdfc4 	movi	r3,-129
 4010fc0:	d8802e15 	stw	r2,184(sp)
 4010fc4:	90e4703a 	and	r18,r18,r3
 4010fc8:	983d0526 	beq	r19,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00f140>
 4010fcc:	0039883a 	mov	fp,zero
 4010fd0:	003d0806 	br	40103f4 <__alt_mem_onchip_memory2_0+0xfc00f154>
 4010fd4:	dc402617 	ldw	r17,152(sp)
 4010fd8:	0441d30e 	bge	zero,r17,4011728 <___vfprintf_internal_r+0x1a30>
 4010fdc:	dc403217 	ldw	r17,200(sp)
 4010fe0:	d8803317 	ldw	r2,204(sp)
 4010fe4:	1440010e 	bge	r2,r17,4010fec <___vfprintf_internal_r+0x12f4>
 4010fe8:	1023883a 	mov	r17,r2
 4010fec:	04400a0e 	bge	zero,r17,4011018 <___vfprintf_internal_r+0x1320>
 4010ff0:	d8801f17 	ldw	r2,124(sp)
 4010ff4:	1c47883a 	add	r3,r3,r17
 4010ff8:	44000015 	stw	r16,0(r8)
 4010ffc:	10800044 	addi	r2,r2,1
 4011000:	44400115 	stw	r17,4(r8)
 4011004:	d8c02015 	stw	r3,128(sp)
 4011008:	d8801f15 	stw	r2,124(sp)
 401100c:	010001c4 	movi	r4,7
 4011010:	20826516 	blt	r4,r2,40119a8 <___vfprintf_internal_r+0x1cb0>
 4011014:	42000204 	addi	r8,r8,8
 4011018:	88026116 	blt	r17,zero,40119a0 <___vfprintf_internal_r+0x1ca8>
 401101c:	d9003217 	ldw	r4,200(sp)
 4011020:	2463c83a 	sub	r17,r4,r17
 4011024:	04407b0e 	bge	zero,r17,4011214 <___vfprintf_internal_r+0x151c>
 4011028:	05800404 	movi	r22,16
 401102c:	d8801f17 	ldw	r2,124(sp)
 4011030:	b4419d0e 	bge	r22,r17,40116a8 <___vfprintf_internal_r+0x19b0>
 4011034:	010100b4 	movhi	r4,1026
 4011038:	211ea484 	addi	r4,r4,31378
 401103c:	d9002c15 	stw	r4,176(sp)
 4011040:	070001c4 	movi	fp,7
 4011044:	dcc02d17 	ldw	r19,180(sp)
 4011048:	00000306 	br	4011058 <___vfprintf_internal_r+0x1360>
 401104c:	42000204 	addi	r8,r8,8
 4011050:	8c7ffc04 	addi	r17,r17,-16
 4011054:	b441970e 	bge	r22,r17,40116b4 <___vfprintf_internal_r+0x19bc>
 4011058:	18c00404 	addi	r3,r3,16
 401105c:	10800044 	addi	r2,r2,1
 4011060:	45000015 	stw	r20,0(r8)
 4011064:	45800115 	stw	r22,4(r8)
 4011068:	d8c02015 	stw	r3,128(sp)
 401106c:	d8801f15 	stw	r2,124(sp)
 4011070:	e0bff60e 	bge	fp,r2,401104c <__alt_mem_onchip_memory2_0+0xfc00fdac>
 4011074:	d9801e04 	addi	r6,sp,120
 4011078:	b80b883a 	mov	r5,r23
 401107c:	9809883a 	mov	r4,r19
 4011080:	4016a940 	call	4016a94 <__sprint_r>
 4011084:	103c201e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4011088:	d8c02017 	ldw	r3,128(sp)
 401108c:	d8801f17 	ldw	r2,124(sp)
 4011090:	da000404 	addi	r8,sp,16
 4011094:	003fee06 	br	4011050 <__alt_mem_onchip_memory2_0+0xfc00fdb0>
 4011098:	d9002d17 	ldw	r4,180(sp)
 401109c:	d9801e04 	addi	r6,sp,120
 40110a0:	b80b883a 	mov	r5,r23
 40110a4:	4016a940 	call	4016a94 <__sprint_r>
 40110a8:	103c171e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 40110ac:	d8c02017 	ldw	r3,128(sp)
 40110b0:	df002787 	ldb	fp,158(sp)
 40110b4:	da000404 	addi	r8,sp,16
 40110b8:	003d3406 	br	401058c <__alt_mem_onchip_memory2_0+0xfc00f2ec>
 40110bc:	9080040c 	andi	r2,r18,16
 40110c0:	10016126 	beq	r2,zero,4011648 <___vfprintf_internal_r+0x1950>
 40110c4:	d9402e17 	ldw	r5,184(sp)
 40110c8:	2cc00017 	ldw	r19,0(r5)
 40110cc:	29400104 	addi	r5,r5,4
 40110d0:	d9402e15 	stw	r5,184(sp)
 40110d4:	982dd7fa 	srai	r22,r19,31
 40110d8:	b005883a 	mov	r2,r22
 40110dc:	003c5a06 	br	4010248 <__alt_mem_onchip_memory2_0+0xfc00efa8>
 40110e0:	9080040c 	andi	r2,r18,16
 40110e4:	10003526 	beq	r2,zero,40111bc <___vfprintf_internal_r+0x14c4>
 40110e8:	d8c02e17 	ldw	r3,184(sp)
 40110ec:	d9002a17 	ldw	r4,168(sp)
 40110f0:	d8002785 	stb	zero,158(sp)
 40110f4:	18800104 	addi	r2,r3,4
 40110f8:	1cc00017 	ldw	r19,0(r3)
 40110fc:	002d883a 	mov	r22,zero
 4011100:	20003716 	blt	r4,zero,40111e0 <___vfprintf_internal_r+0x14e8>
 4011104:	00ffdfc4 	movi	r3,-129
 4011108:	d8802e15 	stw	r2,184(sp)
 401110c:	90e4703a 	and	r18,r18,r3
 4011110:	0039883a 	mov	fp,zero
 4011114:	983dd426 	beq	r19,zero,4010868 <__alt_mem_onchip_memory2_0+0xfc00f5c8>
 4011118:	00800244 	movi	r2,9
 401111c:	14fc5336 	bltu	r2,r19,401026c <__alt_mem_onchip_memory2_0+0xfc00efcc>
 4011120:	d8c02817 	ldw	r3,160(sp)
 4011124:	dc001dc4 	addi	r16,sp,119
 4011128:	9cc00c04 	addi	r19,r19,48
 401112c:	1c07c83a 	sub	r3,r3,r16
 4011130:	dcc01dc5 	stb	r19,119(sp)
 4011134:	d8c02b15 	stw	r3,172(sp)
 4011138:	003cc606 	br	4010454 <__alt_mem_onchip_memory2_0+0xfc00f1b4>
 401113c:	d8803317 	ldw	r2,204(sp)
 4011140:	143fffc4 	addi	r16,r2,-1
 4011144:	043f4d0e 	bge	zero,r16,4010e7c <__alt_mem_onchip_memory2_0+0xfc00fbdc>
 4011148:	07000404 	movi	fp,16
 401114c:	e400810e 	bge	fp,r16,4011354 <___vfprintf_internal_r+0x165c>
 4011150:	014100b4 	movhi	r5,1026
 4011154:	295ea484 	addi	r5,r5,31378
 4011158:	d9402c15 	stw	r5,176(sp)
 401115c:	01c001c4 	movi	r7,7
 4011160:	dcc02d17 	ldw	r19,180(sp)
 4011164:	00000306 	br	4011174 <___vfprintf_internal_r+0x147c>
 4011168:	b5800204 	addi	r22,r22,8
 401116c:	843ffc04 	addi	r16,r16,-16
 4011170:	e4007b0e 	bge	fp,r16,4011360 <___vfprintf_internal_r+0x1668>
 4011174:	18c00404 	addi	r3,r3,16
 4011178:	8c400044 	addi	r17,r17,1
 401117c:	b5000015 	stw	r20,0(r22)
 4011180:	b7000115 	stw	fp,4(r22)
 4011184:	d8c02015 	stw	r3,128(sp)
 4011188:	dc401f15 	stw	r17,124(sp)
 401118c:	3c7ff60e 	bge	r7,r17,4011168 <__alt_mem_onchip_memory2_0+0xfc00fec8>
 4011190:	d9801e04 	addi	r6,sp,120
 4011194:	b80b883a 	mov	r5,r23
 4011198:	9809883a 	mov	r4,r19
 401119c:	d9c03c15 	stw	r7,240(sp)
 40111a0:	4016a940 	call	4016a94 <__sprint_r>
 40111a4:	d9c03c17 	ldw	r7,240(sp)
 40111a8:	103bd71e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 40111ac:	d8c02017 	ldw	r3,128(sp)
 40111b0:	dc401f17 	ldw	r17,124(sp)
 40111b4:	dd800404 	addi	r22,sp,16
 40111b8:	003fec06 	br	401116c <__alt_mem_onchip_memory2_0+0xfc00fecc>
 40111bc:	9080100c 	andi	r2,r18,64
 40111c0:	d8002785 	stb	zero,158(sp)
 40111c4:	10010e26 	beq	r2,zero,4011600 <___vfprintf_internal_r+0x1908>
 40111c8:	d9402e17 	ldw	r5,184(sp)
 40111cc:	d8c02a17 	ldw	r3,168(sp)
 40111d0:	002d883a 	mov	r22,zero
 40111d4:	28800104 	addi	r2,r5,4
 40111d8:	2cc0000b 	ldhu	r19,0(r5)
 40111dc:	183fc90e 	bge	r3,zero,4011104 <__alt_mem_onchip_memory2_0+0xfc00fe64>
 40111e0:	d8802e15 	stw	r2,184(sp)
 40111e4:	0039883a 	mov	fp,zero
 40111e8:	9d84b03a 	or	r2,r19,r22
 40111ec:	103c1e1e 	bne	r2,zero,4010268 <__alt_mem_onchip_memory2_0+0xfc00efc8>
 40111f0:	00800044 	movi	r2,1
 40111f4:	003e6c06 	br	4010ba8 <__alt_mem_onchip_memory2_0+0xfc00f908>
 40111f8:	d9002d17 	ldw	r4,180(sp)
 40111fc:	d9801e04 	addi	r6,sp,120
 4011200:	b80b883a 	mov	r5,r23
 4011204:	4016a940 	call	4016a94 <__sprint_r>
 4011208:	103bbf1e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 401120c:	d8c02017 	ldw	r3,128(sp)
 4011210:	da000404 	addi	r8,sp,16
 4011214:	d9003217 	ldw	r4,200(sp)
 4011218:	d8802617 	ldw	r2,152(sp)
 401121c:	d9403317 	ldw	r5,204(sp)
 4011220:	8123883a 	add	r17,r16,r4
 4011224:	11400216 	blt	r2,r5,4011230 <___vfprintf_internal_r+0x1538>
 4011228:	9100004c 	andi	r4,r18,1
 401122c:	20000d26 	beq	r4,zero,4011264 <___vfprintf_internal_r+0x156c>
 4011230:	d9003717 	ldw	r4,220(sp)
 4011234:	d9403417 	ldw	r5,208(sp)
 4011238:	1907883a 	add	r3,r3,r4
 401123c:	d9001f17 	ldw	r4,124(sp)
 4011240:	41400015 	stw	r5,0(r8)
 4011244:	d9403717 	ldw	r5,220(sp)
 4011248:	21000044 	addi	r4,r4,1
 401124c:	d8c02015 	stw	r3,128(sp)
 4011250:	41400115 	stw	r5,4(r8)
 4011254:	d9001f15 	stw	r4,124(sp)
 4011258:	014001c4 	movi	r5,7
 401125c:	2901e816 	blt	r5,r4,4011a00 <___vfprintf_internal_r+0x1d08>
 4011260:	42000204 	addi	r8,r8,8
 4011264:	d9003317 	ldw	r4,204(sp)
 4011268:	8121883a 	add	r16,r16,r4
 401126c:	2085c83a 	sub	r2,r4,r2
 4011270:	8461c83a 	sub	r16,r16,r17
 4011274:	1400010e 	bge	r2,r16,401127c <___vfprintf_internal_r+0x1584>
 4011278:	1021883a 	mov	r16,r2
 401127c:	04000a0e 	bge	zero,r16,40112a8 <___vfprintf_internal_r+0x15b0>
 4011280:	d9001f17 	ldw	r4,124(sp)
 4011284:	1c07883a 	add	r3,r3,r16
 4011288:	44400015 	stw	r17,0(r8)
 401128c:	21000044 	addi	r4,r4,1
 4011290:	44000115 	stw	r16,4(r8)
 4011294:	d8c02015 	stw	r3,128(sp)
 4011298:	d9001f15 	stw	r4,124(sp)
 401129c:	014001c4 	movi	r5,7
 40112a0:	2901fb16 	blt	r5,r4,4011a90 <___vfprintf_internal_r+0x1d98>
 40112a4:	42000204 	addi	r8,r8,8
 40112a8:	8001f716 	blt	r16,zero,4011a88 <___vfprintf_internal_r+0x1d90>
 40112ac:	1421c83a 	sub	r16,r2,r16
 40112b0:	043d160e 	bge	zero,r16,401070c <__alt_mem_onchip_memory2_0+0xfc00f46c>
 40112b4:	04400404 	movi	r17,16
 40112b8:	d8801f17 	ldw	r2,124(sp)
 40112bc:	8c3efb0e 	bge	r17,r16,4010eac <__alt_mem_onchip_memory2_0+0xfc00fc0c>
 40112c0:	014100b4 	movhi	r5,1026
 40112c4:	295ea484 	addi	r5,r5,31378
 40112c8:	d9402c15 	stw	r5,176(sp)
 40112cc:	058001c4 	movi	r22,7
 40112d0:	dcc02d17 	ldw	r19,180(sp)
 40112d4:	00000306 	br	40112e4 <___vfprintf_internal_r+0x15ec>
 40112d8:	42000204 	addi	r8,r8,8
 40112dc:	843ffc04 	addi	r16,r16,-16
 40112e0:	8c3ef50e 	bge	r17,r16,4010eb8 <__alt_mem_onchip_memory2_0+0xfc00fc18>
 40112e4:	18c00404 	addi	r3,r3,16
 40112e8:	10800044 	addi	r2,r2,1
 40112ec:	45000015 	stw	r20,0(r8)
 40112f0:	44400115 	stw	r17,4(r8)
 40112f4:	d8c02015 	stw	r3,128(sp)
 40112f8:	d8801f15 	stw	r2,124(sp)
 40112fc:	b0bff60e 	bge	r22,r2,40112d8 <__alt_mem_onchip_memory2_0+0xfc010038>
 4011300:	d9801e04 	addi	r6,sp,120
 4011304:	b80b883a 	mov	r5,r23
 4011308:	9809883a 	mov	r4,r19
 401130c:	4016a940 	call	4016a94 <__sprint_r>
 4011310:	103b7d1e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4011314:	d8c02017 	ldw	r3,128(sp)
 4011318:	d8801f17 	ldw	r2,124(sp)
 401131c:	da000404 	addi	r8,sp,16
 4011320:	003fee06 	br	40112dc <__alt_mem_onchip_memory2_0+0xfc01003c>
 4011324:	9088703a 	and	r4,r18,r2
 4011328:	203eab1e 	bne	r4,zero,4010dd8 <__alt_mem_onchip_memory2_0+0xfc00fb38>
 401132c:	dc401f17 	ldw	r17,124(sp)
 4011330:	40800115 	stw	r2,4(r8)
 4011334:	44000015 	stw	r16,0(r8)
 4011338:	8c400044 	addi	r17,r17,1
 401133c:	d8c02015 	stw	r3,128(sp)
 4011340:	dc401f15 	stw	r17,124(sp)
 4011344:	008001c4 	movi	r2,7
 4011348:	14400e16 	blt	r2,r17,4011384 <___vfprintf_internal_r+0x168c>
 401134c:	45800204 	addi	r22,r8,8
 4011350:	003eca06 	br	4010e7c <__alt_mem_onchip_memory2_0+0xfc00fbdc>
 4011354:	010100b4 	movhi	r4,1026
 4011358:	211ea484 	addi	r4,r4,31378
 401135c:	d9002c15 	stw	r4,176(sp)
 4011360:	d8802c17 	ldw	r2,176(sp)
 4011364:	1c07883a 	add	r3,r3,r16
 4011368:	8c400044 	addi	r17,r17,1
 401136c:	b0800015 	stw	r2,0(r22)
 4011370:	b4000115 	stw	r16,4(r22)
 4011374:	d8c02015 	stw	r3,128(sp)
 4011378:	dc401f15 	stw	r17,124(sp)
 401137c:	008001c4 	movi	r2,7
 4011380:	147ebd0e 	bge	r2,r17,4010e78 <__alt_mem_onchip_memory2_0+0xfc00fbd8>
 4011384:	d9002d17 	ldw	r4,180(sp)
 4011388:	d9801e04 	addi	r6,sp,120
 401138c:	b80b883a 	mov	r5,r23
 4011390:	4016a940 	call	4016a94 <__sprint_r>
 4011394:	103b5c1e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4011398:	d8c02017 	ldw	r3,128(sp)
 401139c:	dc401f17 	ldw	r17,124(sp)
 40113a0:	dd800404 	addi	r22,sp,16
 40113a4:	003eb506 	br	4010e7c <__alt_mem_onchip_memory2_0+0xfc00fbdc>
 40113a8:	d9002d17 	ldw	r4,180(sp)
 40113ac:	d9801e04 	addi	r6,sp,120
 40113b0:	b80b883a 	mov	r5,r23
 40113b4:	4016a940 	call	4016a94 <__sprint_r>
 40113b8:	103b531e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 40113bc:	d8c02017 	ldw	r3,128(sp)
 40113c0:	dc401f17 	ldw	r17,124(sp)
 40113c4:	da000404 	addi	r8,sp,16
 40113c8:	003e8d06 	br	4010e00 <__alt_mem_onchip_memory2_0+0xfc00fb60>
 40113cc:	d9002d17 	ldw	r4,180(sp)
 40113d0:	d9801e04 	addi	r6,sp,120
 40113d4:	b80b883a 	mov	r5,r23
 40113d8:	4016a940 	call	4016a94 <__sprint_r>
 40113dc:	103b4a1e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 40113e0:	d8c02017 	ldw	r3,128(sp)
 40113e4:	dc401f17 	ldw	r17,124(sp)
 40113e8:	dd800404 	addi	r22,sp,16
 40113ec:	003e8f06 	br	4010e2c <__alt_mem_onchip_memory2_0+0xfc00fb8c>
 40113f0:	0027883a 	mov	r19,zero
 40113f4:	003f4a06 	br	4011120 <__alt_mem_onchip_memory2_0+0xfc00fe80>
 40113f8:	d9002d17 	ldw	r4,180(sp)
 40113fc:	d9801e04 	addi	r6,sp,120
 4011400:	b80b883a 	mov	r5,r23
 4011404:	4016a940 	call	4016a94 <__sprint_r>
 4011408:	103b3f1e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 401140c:	d8c02017 	ldw	r3,128(sp)
 4011410:	da000404 	addi	r8,sp,16
 4011414:	003c7b06 	br	4010604 <__alt_mem_onchip_memory2_0+0xfc00f364>
 4011418:	d9402a17 	ldw	r5,168(sp)
 401141c:	04e7c83a 	sub	r19,zero,r19
 4011420:	07000b44 	movi	fp,45
 4011424:	9804c03a 	cmpne	r2,r19,zero
 4011428:	05adc83a 	sub	r22,zero,r22
 401142c:	df002785 	stb	fp,158(sp)
 4011430:	b0adc83a 	sub	r22,r22,r2
 4011434:	28017b16 	blt	r5,zero,4011a24 <___vfprintf_internal_r+0x1d2c>
 4011438:	00bfdfc4 	movi	r2,-129
 401143c:	90a4703a 	and	r18,r18,r2
 4011440:	003b8906 	br	4010268 <__alt_mem_onchip_memory2_0+0xfc00efc8>
 4011444:	d9003617 	ldw	r4,216(sp)
 4011448:	d9403817 	ldw	r5,224(sp)
 401144c:	da003d15 	stw	r8,244(sp)
 4011450:	40167e80 	call	40167e8 <__fpclassifyd>
 4011454:	da003d17 	ldw	r8,244(sp)
 4011458:	1000f026 	beq	r2,zero,401181c <___vfprintf_internal_r+0x1b24>
 401145c:	d9002a17 	ldw	r4,168(sp)
 4011460:	05bff7c4 	movi	r22,-33
 4011464:	00bfffc4 	movi	r2,-1
 4011468:	8dac703a 	and	r22,r17,r22
 401146c:	20820026 	beq	r4,r2,4011c70 <___vfprintf_internal_r+0x1f78>
 4011470:	008011c4 	movi	r2,71
 4011474:	b081f726 	beq	r22,r2,4011c54 <___vfprintf_internal_r+0x1f5c>
 4011478:	d9003817 	ldw	r4,224(sp)
 401147c:	90c04014 	ori	r3,r18,256
 4011480:	d8c02c15 	stw	r3,176(sp)
 4011484:	20021516 	blt	r4,zero,4011cdc <___vfprintf_internal_r+0x1fe4>
 4011488:	dcc03817 	ldw	r19,224(sp)
 401148c:	d8002905 	stb	zero,164(sp)
 4011490:	00801984 	movi	r2,102
 4011494:	8881f926 	beq	r17,r2,4011c7c <___vfprintf_internal_r+0x1f84>
 4011498:	00801184 	movi	r2,70
 401149c:	88821c26 	beq	r17,r2,4011d10 <___vfprintf_internal_r+0x2018>
 40114a0:	00801144 	movi	r2,69
 40114a4:	b081ef26 	beq	r22,r2,4011c64 <___vfprintf_internal_r+0x1f6c>
 40114a8:	d8c02a17 	ldw	r3,168(sp)
 40114ac:	d8802104 	addi	r2,sp,132
 40114b0:	d8800315 	stw	r2,12(sp)
 40114b4:	d9403617 	ldw	r5,216(sp)
 40114b8:	d8802504 	addi	r2,sp,148
 40114bc:	d9002d17 	ldw	r4,180(sp)
 40114c0:	d8800215 	stw	r2,8(sp)
 40114c4:	d8802604 	addi	r2,sp,152
 40114c8:	d8c00015 	stw	r3,0(sp)
 40114cc:	d8800115 	stw	r2,4(sp)
 40114d0:	01c00084 	movi	r7,2
 40114d4:	980d883a 	mov	r6,r19
 40114d8:	d8c03c15 	stw	r3,240(sp)
 40114dc:	da003d15 	stw	r8,244(sp)
 40114e0:	40124280 	call	4012428 <_dtoa_r>
 40114e4:	1021883a 	mov	r16,r2
 40114e8:	008019c4 	movi	r2,103
 40114ec:	d8c03c17 	ldw	r3,240(sp)
 40114f0:	da003d17 	ldw	r8,244(sp)
 40114f4:	88817126 	beq	r17,r2,4011abc <___vfprintf_internal_r+0x1dc4>
 40114f8:	008011c4 	movi	r2,71
 40114fc:	88829126 	beq	r17,r2,4011f44 <___vfprintf_internal_r+0x224c>
 4011500:	80f9883a 	add	fp,r16,r3
 4011504:	d9003617 	ldw	r4,216(sp)
 4011508:	000d883a 	mov	r6,zero
 401150c:	000f883a 	mov	r7,zero
 4011510:	980b883a 	mov	r5,r19
 4011514:	da003d15 	stw	r8,244(sp)
 4011518:	401a8180 	call	401a818 <__eqdf2>
 401151c:	da003d17 	ldw	r8,244(sp)
 4011520:	10018d26 	beq	r2,zero,4011b58 <___vfprintf_internal_r+0x1e60>
 4011524:	d8802117 	ldw	r2,132(sp)
 4011528:	1700062e 	bgeu	r2,fp,4011544 <___vfprintf_internal_r+0x184c>
 401152c:	01000c04 	movi	r4,48
 4011530:	10c00044 	addi	r3,r2,1
 4011534:	d8c02115 	stw	r3,132(sp)
 4011538:	11000005 	stb	r4,0(r2)
 401153c:	d8802117 	ldw	r2,132(sp)
 4011540:	173ffb36 	bltu	r2,fp,4011530 <__alt_mem_onchip_memory2_0+0xfc010290>
 4011544:	1405c83a 	sub	r2,r2,r16
 4011548:	d8803315 	stw	r2,204(sp)
 401154c:	008011c4 	movi	r2,71
 4011550:	b0817626 	beq	r22,r2,4011b2c <___vfprintf_internal_r+0x1e34>
 4011554:	00801944 	movi	r2,101
 4011558:	1442800e 	bge	r2,r17,4011f5c <___vfprintf_internal_r+0x2264>
 401155c:	d8c02617 	ldw	r3,152(sp)
 4011560:	00801984 	movi	r2,102
 4011564:	d8c03215 	stw	r3,200(sp)
 4011568:	8881fe26 	beq	r17,r2,4011d64 <___vfprintf_internal_r+0x206c>
 401156c:	d8c03217 	ldw	r3,200(sp)
 4011570:	d9003317 	ldw	r4,204(sp)
 4011574:	1901dd16 	blt	r3,r4,4011cec <___vfprintf_internal_r+0x1ff4>
 4011578:	9480004c 	andi	r18,r18,1
 401157c:	90022b1e 	bne	r18,zero,4011e2c <___vfprintf_internal_r+0x2134>
 4011580:	1805883a 	mov	r2,r3
 4011584:	18028316 	blt	r3,zero,4011f94 <___vfprintf_internal_r+0x229c>
 4011588:	d8c03217 	ldw	r3,200(sp)
 401158c:	044019c4 	movi	r17,103
 4011590:	d8c02b15 	stw	r3,172(sp)
 4011594:	df002907 	ldb	fp,164(sp)
 4011598:	e001531e 	bne	fp,zero,4011ae8 <___vfprintf_internal_r+0x1df0>
 401159c:	df002783 	ldbu	fp,158(sp)
 40115a0:	d8802915 	stw	r2,164(sp)
 40115a4:	dc802c17 	ldw	r18,176(sp)
 40115a8:	d8002a15 	stw	zero,168(sp)
 40115ac:	003baf06 	br	401046c <__alt_mem_onchip_memory2_0+0xfc00f1cc>
 40115b0:	d8c02e17 	ldw	r3,184(sp)
 40115b4:	d9002e17 	ldw	r4,184(sp)
 40115b8:	d9402e17 	ldw	r5,184(sp)
 40115bc:	18c00017 	ldw	r3,0(r3)
 40115c0:	21000117 	ldw	r4,4(r4)
 40115c4:	29400204 	addi	r5,r5,8
 40115c8:	d8c03615 	stw	r3,216(sp)
 40115cc:	d9003815 	stw	r4,224(sp)
 40115d0:	d9402e15 	stw	r5,184(sp)
 40115d4:	003b5006 	br	4010318 <__alt_mem_onchip_memory2_0+0xfc00f078>
 40115d8:	ac400007 	ldb	r17,0(r21)
 40115dc:	003a2806 	br	400fe80 <__alt_mem_onchip_memory2_0+0xfc00ebe0>
 40115e0:	9080100c 	andi	r2,r18,64
 40115e4:	1000a826 	beq	r2,zero,4011888 <___vfprintf_internal_r+0x1b90>
 40115e8:	d8c02e17 	ldw	r3,184(sp)
 40115ec:	002d883a 	mov	r22,zero
 40115f0:	1cc0000b 	ldhu	r19,0(r3)
 40115f4:	18c00104 	addi	r3,r3,4
 40115f8:	d8c02e15 	stw	r3,184(sp)
 40115fc:	003caf06 	br	40108bc <__alt_mem_onchip_memory2_0+0xfc00f61c>
 4011600:	d9002e17 	ldw	r4,184(sp)
 4011604:	d9402a17 	ldw	r5,168(sp)
 4011608:	002d883a 	mov	r22,zero
 401160c:	20800104 	addi	r2,r4,4
 4011610:	24c00017 	ldw	r19,0(r4)
 4011614:	283ebb0e 	bge	r5,zero,4011104 <__alt_mem_onchip_memory2_0+0xfc00fe64>
 4011618:	003ef106 	br	40111e0 <__alt_mem_onchip_memory2_0+0xfc00ff40>
 401161c:	9080040c 	andi	r2,r18,16
 4011620:	1000921e 	bne	r2,zero,401186c <___vfprintf_internal_r+0x1b74>
 4011624:	9480100c 	andi	r18,r18,64
 4011628:	90013926 	beq	r18,zero,4011b10 <___vfprintf_internal_r+0x1e18>
 401162c:	d9402e17 	ldw	r5,184(sp)
 4011630:	d8c02f17 	ldw	r3,188(sp)
 4011634:	28800017 	ldw	r2,0(r5)
 4011638:	29400104 	addi	r5,r5,4
 401163c:	d9402e15 	stw	r5,184(sp)
 4011640:	10c0000d 	sth	r3,0(r2)
 4011644:	0039e406 	br	400fdd8 <__alt_mem_onchip_memory2_0+0xfc00eb38>
 4011648:	9080100c 	andi	r2,r18,64
 401164c:	10008026 	beq	r2,zero,4011850 <___vfprintf_internal_r+0x1b58>
 4011650:	d8802e17 	ldw	r2,184(sp)
 4011654:	14c0000f 	ldh	r19,0(r2)
 4011658:	10800104 	addi	r2,r2,4
 401165c:	d8802e15 	stw	r2,184(sp)
 4011660:	982dd7fa 	srai	r22,r19,31
 4011664:	b005883a 	mov	r2,r22
 4011668:	003af706 	br	4010248 <__alt_mem_onchip_memory2_0+0xfc00efa8>
 401166c:	9080100c 	andi	r2,r18,64
 4011670:	d8002785 	stb	zero,158(sp)
 4011674:	10008a1e 	bne	r2,zero,40118a0 <___vfprintf_internal_r+0x1ba8>
 4011678:	d9002e17 	ldw	r4,184(sp)
 401167c:	d9402a17 	ldw	r5,168(sp)
 4011680:	002d883a 	mov	r22,zero
 4011684:	20800104 	addi	r2,r4,4
 4011688:	24c00017 	ldw	r19,0(r4)
 401168c:	283e4b0e 	bge	r5,zero,4010fbc <__alt_mem_onchip_memory2_0+0xfc00fd1c>
 4011690:	9d86b03a 	or	r3,r19,r22
 4011694:	d8802e15 	stw	r2,184(sp)
 4011698:	183e4c1e 	bne	r3,zero,4010fcc <__alt_mem_onchip_memory2_0+0xfc00fd2c>
 401169c:	0039883a 	mov	fp,zero
 40116a0:	0005883a 	mov	r2,zero
 40116a4:	003d4006 	br	4010ba8 <__alt_mem_onchip_memory2_0+0xfc00f908>
 40116a8:	014100b4 	movhi	r5,1026
 40116ac:	295ea484 	addi	r5,r5,31378
 40116b0:	d9402c15 	stw	r5,176(sp)
 40116b4:	d9402c17 	ldw	r5,176(sp)
 40116b8:	1c47883a 	add	r3,r3,r17
 40116bc:	10800044 	addi	r2,r2,1
 40116c0:	41400015 	stw	r5,0(r8)
 40116c4:	44400115 	stw	r17,4(r8)
 40116c8:	d8c02015 	stw	r3,128(sp)
 40116cc:	d8801f15 	stw	r2,124(sp)
 40116d0:	010001c4 	movi	r4,7
 40116d4:	20bec816 	blt	r4,r2,40111f8 <__alt_mem_onchip_memory2_0+0xfc00ff58>
 40116d8:	42000204 	addi	r8,r8,8
 40116dc:	003ecd06 	br	4011214 <__alt_mem_onchip_memory2_0+0xfc00ff74>
 40116e0:	d9002a17 	ldw	r4,168(sp)
 40116e4:	d8002785 	stb	zero,158(sp)
 40116e8:	203d2d16 	blt	r4,zero,4010ba0 <__alt_mem_onchip_memory2_0+0xfc00f900>
 40116ec:	00bfdfc4 	movi	r2,-129
 40116f0:	90a4703a 	and	r18,r18,r2
 40116f4:	003a6106 	br	401007c <__alt_mem_onchip_memory2_0+0xfc00eddc>
 40116f8:	010100b4 	movhi	r4,1026
 40116fc:	211ea484 	addi	r4,r4,31378
 4011700:	d9002c15 	stw	r4,176(sp)
 4011704:	003bea06 	br	40106b0 <__alt_mem_onchip_memory2_0+0xfc00f410>
 4011708:	d9002d17 	ldw	r4,180(sp)
 401170c:	d9801e04 	addi	r6,sp,120
 4011710:	b80b883a 	mov	r5,r23
 4011714:	4016a940 	call	4016a94 <__sprint_r>
 4011718:	103a7b1e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 401171c:	d8c02017 	ldw	r3,128(sp)
 4011720:	da000404 	addi	r8,sp,16
 4011724:	003d4106 	br	4010c2c <__alt_mem_onchip_memory2_0+0xfc00f98c>
 4011728:	d8801f17 	ldw	r2,124(sp)
 401172c:	014100b4 	movhi	r5,1026
 4011730:	01000044 	movi	r4,1
 4011734:	18c00044 	addi	r3,r3,1
 4011738:	10800044 	addi	r2,r2,1
 401173c:	295ea404 	addi	r5,r5,31376
 4011740:	41000115 	stw	r4,4(r8)
 4011744:	41400015 	stw	r5,0(r8)
 4011748:	d8c02015 	stw	r3,128(sp)
 401174c:	d8801f15 	stw	r2,124(sp)
 4011750:	010001c4 	movi	r4,7
 4011754:	20805c16 	blt	r4,r2,40118c8 <___vfprintf_internal_r+0x1bd0>
 4011758:	42000204 	addi	r8,r8,8
 401175c:	8800041e 	bne	r17,zero,4011770 <___vfprintf_internal_r+0x1a78>
 4011760:	d8803317 	ldw	r2,204(sp)
 4011764:	1000021e 	bne	r2,zero,4011770 <___vfprintf_internal_r+0x1a78>
 4011768:	9080004c 	andi	r2,r18,1
 401176c:	103be726 	beq	r2,zero,401070c <__alt_mem_onchip_memory2_0+0xfc00f46c>
 4011770:	d9003717 	ldw	r4,220(sp)
 4011774:	d8801f17 	ldw	r2,124(sp)
 4011778:	d9403417 	ldw	r5,208(sp)
 401177c:	20c7883a 	add	r3,r4,r3
 4011780:	10800044 	addi	r2,r2,1
 4011784:	41000115 	stw	r4,4(r8)
 4011788:	41400015 	stw	r5,0(r8)
 401178c:	d8c02015 	stw	r3,128(sp)
 4011790:	d8801f15 	stw	r2,124(sp)
 4011794:	010001c4 	movi	r4,7
 4011798:	20812116 	blt	r4,r2,4011c20 <___vfprintf_internal_r+0x1f28>
 401179c:	42000204 	addi	r8,r8,8
 40117a0:	0463c83a 	sub	r17,zero,r17
 40117a4:	0440730e 	bge	zero,r17,4011974 <___vfprintf_internal_r+0x1c7c>
 40117a8:	05800404 	movi	r22,16
 40117ac:	b440860e 	bge	r22,r17,40119c8 <___vfprintf_internal_r+0x1cd0>
 40117b0:	014100b4 	movhi	r5,1026
 40117b4:	295ea484 	addi	r5,r5,31378
 40117b8:	d9402c15 	stw	r5,176(sp)
 40117bc:	070001c4 	movi	fp,7
 40117c0:	dcc02d17 	ldw	r19,180(sp)
 40117c4:	00000306 	br	40117d4 <___vfprintf_internal_r+0x1adc>
 40117c8:	42000204 	addi	r8,r8,8
 40117cc:	8c7ffc04 	addi	r17,r17,-16
 40117d0:	b440800e 	bge	r22,r17,40119d4 <___vfprintf_internal_r+0x1cdc>
 40117d4:	18c00404 	addi	r3,r3,16
 40117d8:	10800044 	addi	r2,r2,1
 40117dc:	45000015 	stw	r20,0(r8)
 40117e0:	45800115 	stw	r22,4(r8)
 40117e4:	d8c02015 	stw	r3,128(sp)
 40117e8:	d8801f15 	stw	r2,124(sp)
 40117ec:	e0bff60e 	bge	fp,r2,40117c8 <__alt_mem_onchip_memory2_0+0xfc010528>
 40117f0:	d9801e04 	addi	r6,sp,120
 40117f4:	b80b883a 	mov	r5,r23
 40117f8:	9809883a 	mov	r4,r19
 40117fc:	4016a940 	call	4016a94 <__sprint_r>
 4011800:	103a411e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4011804:	d8c02017 	ldw	r3,128(sp)
 4011808:	d8801f17 	ldw	r2,124(sp)
 401180c:	da000404 	addi	r8,sp,16
 4011810:	003fee06 	br	40117cc <__alt_mem_onchip_memory2_0+0xfc01052c>
 4011814:	00bfffc4 	movi	r2,-1
 4011818:	003a3f06 	br	4010118 <__alt_mem_onchip_memory2_0+0xfc00ee78>
 401181c:	008011c4 	movi	r2,71
 4011820:	1440b816 	blt	r2,r17,4011b04 <___vfprintf_internal_r+0x1e0c>
 4011824:	040100b4 	movhi	r16,1026
 4011828:	841e9604 	addi	r16,r16,31320
 401182c:	00c000c4 	movi	r3,3
 4011830:	00bfdfc4 	movi	r2,-129
 4011834:	d8c02915 	stw	r3,164(sp)
 4011838:	90a4703a 	and	r18,r18,r2
 401183c:	df002783 	ldbu	fp,158(sp)
 4011840:	d8c02b15 	stw	r3,172(sp)
 4011844:	d8002a15 	stw	zero,168(sp)
 4011848:	d8003215 	stw	zero,200(sp)
 401184c:	003b0706 	br	401046c <__alt_mem_onchip_memory2_0+0xfc00f1cc>
 4011850:	d8c02e17 	ldw	r3,184(sp)
 4011854:	1cc00017 	ldw	r19,0(r3)
 4011858:	18c00104 	addi	r3,r3,4
 401185c:	d8c02e15 	stw	r3,184(sp)
 4011860:	982dd7fa 	srai	r22,r19,31
 4011864:	b005883a 	mov	r2,r22
 4011868:	003a7706 	br	4010248 <__alt_mem_onchip_memory2_0+0xfc00efa8>
 401186c:	d8c02e17 	ldw	r3,184(sp)
 4011870:	d9002f17 	ldw	r4,188(sp)
 4011874:	18800017 	ldw	r2,0(r3)
 4011878:	18c00104 	addi	r3,r3,4
 401187c:	d8c02e15 	stw	r3,184(sp)
 4011880:	11000015 	stw	r4,0(r2)
 4011884:	00395406 	br	400fdd8 <__alt_mem_onchip_memory2_0+0xfc00eb38>
 4011888:	d9002e17 	ldw	r4,184(sp)
 401188c:	002d883a 	mov	r22,zero
 4011890:	24c00017 	ldw	r19,0(r4)
 4011894:	21000104 	addi	r4,r4,4
 4011898:	d9002e15 	stw	r4,184(sp)
 401189c:	003c0706 	br	40108bc <__alt_mem_onchip_memory2_0+0xfc00f61c>
 40118a0:	d9402e17 	ldw	r5,184(sp)
 40118a4:	d8c02a17 	ldw	r3,168(sp)
 40118a8:	002d883a 	mov	r22,zero
 40118ac:	28800104 	addi	r2,r5,4
 40118b0:	2cc0000b 	ldhu	r19,0(r5)
 40118b4:	183dc10e 	bge	r3,zero,4010fbc <__alt_mem_onchip_memory2_0+0xfc00fd1c>
 40118b8:	003f7506 	br	4011690 <__alt_mem_onchip_memory2_0+0xfc0103f0>
 40118bc:	040100b4 	movhi	r16,1026
 40118c0:	841e9404 	addi	r16,r16,31312
 40118c4:	003aa706 	br	4010364 <__alt_mem_onchip_memory2_0+0xfc00f0c4>
 40118c8:	d9002d17 	ldw	r4,180(sp)
 40118cc:	d9801e04 	addi	r6,sp,120
 40118d0:	b80b883a 	mov	r5,r23
 40118d4:	4016a940 	call	4016a94 <__sprint_r>
 40118d8:	103a0b1e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 40118dc:	dc402617 	ldw	r17,152(sp)
 40118e0:	d8c02017 	ldw	r3,128(sp)
 40118e4:	da000404 	addi	r8,sp,16
 40118e8:	003f9c06 	br	401175c <__alt_mem_onchip_memory2_0+0xfc0104bc>
 40118ec:	ac400043 	ldbu	r17,1(r21)
 40118f0:	84000814 	ori	r16,r16,32
 40118f4:	ad400044 	addi	r21,r21,1
 40118f8:	8c403fcc 	andi	r17,r17,255
 40118fc:	8c40201c 	xori	r17,r17,128
 4011900:	8c7fe004 	addi	r17,r17,-128
 4011904:	00395e06 	br	400fe80 <__alt_mem_onchip_memory2_0+0xfc00ebe0>
 4011908:	d8c02e15 	stw	r3,184(sp)
 401190c:	0039883a 	mov	fp,zero
 4011910:	003e3506 	br	40111e8 <__alt_mem_onchip_memory2_0+0xfc00ff48>
 4011914:	d9002d17 	ldw	r4,180(sp)
 4011918:	d9801e04 	addi	r6,sp,120
 401191c:	b80b883a 	mov	r5,r23
 4011920:	4016a940 	call	4016a94 <__sprint_r>
 4011924:	1039f81e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4011928:	d8c02017 	ldw	r3,128(sp)
 401192c:	da000404 	addi	r8,sp,16
 4011930:	003cd006 	br	4010c74 <__alt_mem_onchip_memory2_0+0xfc00f9d4>
 4011934:	8009883a 	mov	r4,r16
 4011938:	df003d15 	stw	fp,244(sp)
 401193c:	400fc580 	call	400fc58 <strlen>
 4011940:	d8802b15 	stw	r2,172(sp)
 4011944:	da003d17 	ldw	r8,244(sp)
 4011948:	103c200e 	bge	r2,zero,40109cc <__alt_mem_onchip_memory2_0+0xfc00f72c>
 401194c:	0005883a 	mov	r2,zero
 4011950:	003c1e06 	br	40109cc <__alt_mem_onchip_memory2_0+0xfc00f72c>
 4011954:	d9002d17 	ldw	r4,180(sp)
 4011958:	d9801e04 	addi	r6,sp,120
 401195c:	b80b883a 	mov	r5,r23
 4011960:	4016a940 	call	4016a94 <__sprint_r>
 4011964:	1039e81e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4011968:	d8c02017 	ldw	r3,128(sp)
 401196c:	d8801f17 	ldw	r2,124(sp)
 4011970:	da000404 	addi	r8,sp,16
 4011974:	d9403317 	ldw	r5,204(sp)
 4011978:	10800044 	addi	r2,r2,1
 401197c:	44000015 	stw	r16,0(r8)
 4011980:	28c7883a 	add	r3,r5,r3
 4011984:	003b5b06 	br	40106f4 <__alt_mem_onchip_memory2_0+0xfc00f454>
 4011988:	010100b4 	movhi	r4,1026
 401198c:	211ea884 	addi	r4,r4,31394
 4011990:	d9003515 	stw	r4,212(sp)
 4011994:	003af206 	br	4010560 <__alt_mem_onchip_memory2_0+0xfc00f2c0>
 4011998:	013fffc4 	movi	r4,-1
 401199c:	003a0806 	br	40101c0 <__alt_mem_onchip_memory2_0+0xfc00ef20>
 40119a0:	0023883a 	mov	r17,zero
 40119a4:	003d9d06 	br	401101c <__alt_mem_onchip_memory2_0+0xfc00fd7c>
 40119a8:	d9002d17 	ldw	r4,180(sp)
 40119ac:	d9801e04 	addi	r6,sp,120
 40119b0:	b80b883a 	mov	r5,r23
 40119b4:	4016a940 	call	4016a94 <__sprint_r>
 40119b8:	1039d31e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 40119bc:	d8c02017 	ldw	r3,128(sp)
 40119c0:	da000404 	addi	r8,sp,16
 40119c4:	003d9406 	br	4011018 <__alt_mem_onchip_memory2_0+0xfc00fd78>
 40119c8:	010100b4 	movhi	r4,1026
 40119cc:	211ea484 	addi	r4,r4,31378
 40119d0:	d9002c15 	stw	r4,176(sp)
 40119d4:	d9002c17 	ldw	r4,176(sp)
 40119d8:	1c47883a 	add	r3,r3,r17
 40119dc:	10800044 	addi	r2,r2,1
 40119e0:	41000015 	stw	r4,0(r8)
 40119e4:	44400115 	stw	r17,4(r8)
 40119e8:	d8c02015 	stw	r3,128(sp)
 40119ec:	d8801f15 	stw	r2,124(sp)
 40119f0:	010001c4 	movi	r4,7
 40119f4:	20bfd716 	blt	r4,r2,4011954 <__alt_mem_onchip_memory2_0+0xfc0106b4>
 40119f8:	42000204 	addi	r8,r8,8
 40119fc:	003fdd06 	br	4011974 <__alt_mem_onchip_memory2_0+0xfc0106d4>
 4011a00:	d9002d17 	ldw	r4,180(sp)
 4011a04:	d9801e04 	addi	r6,sp,120
 4011a08:	b80b883a 	mov	r5,r23
 4011a0c:	4016a940 	call	4016a94 <__sprint_r>
 4011a10:	1039bd1e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4011a14:	d8802617 	ldw	r2,152(sp)
 4011a18:	d8c02017 	ldw	r3,128(sp)
 4011a1c:	da000404 	addi	r8,sp,16
 4011a20:	003e1006 	br	4011264 <__alt_mem_onchip_memory2_0+0xfc00ffc4>
 4011a24:	00800044 	movi	r2,1
 4011a28:	10803fcc 	andi	r2,r2,255
 4011a2c:	00c00044 	movi	r3,1
 4011a30:	10fa0d26 	beq	r2,r3,4010268 <__alt_mem_onchip_memory2_0+0xfc00efc8>
 4011a34:	00c00084 	movi	r3,2
 4011a38:	10fbaf26 	beq	r2,r3,40108f8 <__alt_mem_onchip_memory2_0+0xfc00f658>
 4011a3c:	003a6d06 	br	40103f4 <__alt_mem_onchip_memory2_0+0xfc00f154>
 4011a40:	010100b4 	movhi	r4,1026
 4011a44:	211ea884 	addi	r4,r4,31394
 4011a48:	d9003515 	stw	r4,212(sp)
 4011a4c:	003b5406 	br	40107a0 <__alt_mem_onchip_memory2_0+0xfc00f500>
 4011a50:	d8802a17 	ldw	r2,168(sp)
 4011a54:	00c00184 	movi	r3,6
 4011a58:	1880012e 	bgeu	r3,r2,4011a60 <___vfprintf_internal_r+0x1d68>
 4011a5c:	1805883a 	mov	r2,r3
 4011a60:	d8802b15 	stw	r2,172(sp)
 4011a64:	1000ef16 	blt	r2,zero,4011e24 <___vfprintf_internal_r+0x212c>
 4011a68:	040100b4 	movhi	r16,1026
 4011a6c:	d8802915 	stw	r2,164(sp)
 4011a70:	dcc02e15 	stw	r19,184(sp)
 4011a74:	d8002a15 	stw	zero,168(sp)
 4011a78:	d8003215 	stw	zero,200(sp)
 4011a7c:	841ea204 	addi	r16,r16,31368
 4011a80:	0039883a 	mov	fp,zero
 4011a84:	003a8006 	br	4010488 <__alt_mem_onchip_memory2_0+0xfc00f1e8>
 4011a88:	0021883a 	mov	r16,zero
 4011a8c:	003e0706 	br	40112ac <__alt_mem_onchip_memory2_0+0xfc01000c>
 4011a90:	d9002d17 	ldw	r4,180(sp)
 4011a94:	d9801e04 	addi	r6,sp,120
 4011a98:	b80b883a 	mov	r5,r23
 4011a9c:	4016a940 	call	4016a94 <__sprint_r>
 4011aa0:	1039991e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4011aa4:	d8802617 	ldw	r2,152(sp)
 4011aa8:	d9403317 	ldw	r5,204(sp)
 4011aac:	d8c02017 	ldw	r3,128(sp)
 4011ab0:	da000404 	addi	r8,sp,16
 4011ab4:	2885c83a 	sub	r2,r5,r2
 4011ab8:	003dfb06 	br	40112a8 <__alt_mem_onchip_memory2_0+0xfc010008>
 4011abc:	9080004c 	andi	r2,r18,1
 4011ac0:	103e8f1e 	bne	r2,zero,4011500 <__alt_mem_onchip_memory2_0+0xfc010260>
 4011ac4:	d8802117 	ldw	r2,132(sp)
 4011ac8:	003e9e06 	br	4011544 <__alt_mem_onchip_memory2_0+0xfc0102a4>
 4011acc:	1025883a 	mov	r18,r2
 4011ad0:	0039883a 	mov	fp,zero
 4011ad4:	00800084 	movi	r2,2
 4011ad8:	003fd306 	br	4011a28 <__alt_mem_onchip_memory2_0+0xfc010788>
 4011adc:	07000b44 	movi	fp,45
 4011ae0:	df002785 	stb	fp,158(sp)
 4011ae4:	003a1b06 	br	4010354 <__alt_mem_onchip_memory2_0+0xfc00f0b4>
 4011ae8:	00c00b44 	movi	r3,45
 4011aec:	d8c02785 	stb	r3,158(sp)
 4011af0:	d8802915 	stw	r2,164(sp)
 4011af4:	dc802c17 	ldw	r18,176(sp)
 4011af8:	d8002a15 	stw	zero,168(sp)
 4011afc:	07000b44 	movi	fp,45
 4011b00:	003a5e06 	br	401047c <__alt_mem_onchip_memory2_0+0xfc00f1dc>
 4011b04:	040100b4 	movhi	r16,1026
 4011b08:	841e9704 	addi	r16,r16,31324
 4011b0c:	003f4706 	br	401182c <__alt_mem_onchip_memory2_0+0xfc01058c>
 4011b10:	d9002e17 	ldw	r4,184(sp)
 4011b14:	d9402f17 	ldw	r5,188(sp)
 4011b18:	20800017 	ldw	r2,0(r4)
 4011b1c:	21000104 	addi	r4,r4,4
 4011b20:	d9002e15 	stw	r4,184(sp)
 4011b24:	11400015 	stw	r5,0(r2)
 4011b28:	0038ab06 	br	400fdd8 <__alt_mem_onchip_memory2_0+0xfc00eb38>
 4011b2c:	dd802617 	ldw	r22,152(sp)
 4011b30:	00bfff44 	movi	r2,-3
 4011b34:	b0801c16 	blt	r22,r2,4011ba8 <___vfprintf_internal_r+0x1eb0>
 4011b38:	d9402a17 	ldw	r5,168(sp)
 4011b3c:	2d801a16 	blt	r5,r22,4011ba8 <___vfprintf_internal_r+0x1eb0>
 4011b40:	dd803215 	stw	r22,200(sp)
 4011b44:	003e8906 	br	401156c <__alt_mem_onchip_memory2_0+0xfc0102cc>
 4011b48:	010100b4 	movhi	r4,1026
 4011b4c:	211ea484 	addi	r4,r4,31378
 4011b50:	d9002c15 	stw	r4,176(sp)
 4011b54:	003c9106 	br	4010d9c <__alt_mem_onchip_memory2_0+0xfc00fafc>
 4011b58:	e005883a 	mov	r2,fp
 4011b5c:	003e7906 	br	4011544 <__alt_mem_onchip_memory2_0+0xfc0102a4>
 4011b60:	d9002a17 	ldw	r4,168(sp)
 4011b64:	df002783 	ldbu	fp,158(sp)
 4011b68:	dcc02e15 	stw	r19,184(sp)
 4011b6c:	d9002915 	stw	r4,164(sp)
 4011b70:	d9002b15 	stw	r4,172(sp)
 4011b74:	d8002a15 	stw	zero,168(sp)
 4011b78:	d8003215 	stw	zero,200(sp)
 4011b7c:	003a3b06 	br	401046c <__alt_mem_onchip_memory2_0+0xfc00f1cc>
 4011b80:	9080004c 	andi	r2,r18,1
 4011b84:	0039883a 	mov	fp,zero
 4011b88:	10000426 	beq	r2,zero,4011b9c <___vfprintf_internal_r+0x1ea4>
 4011b8c:	00800c04 	movi	r2,48
 4011b90:	dc001dc4 	addi	r16,sp,119
 4011b94:	d8801dc5 	stb	r2,119(sp)
 4011b98:	003b6406 	br	401092c <__alt_mem_onchip_memory2_0+0xfc00f68c>
 4011b9c:	d8002b15 	stw	zero,172(sp)
 4011ba0:	dc001e04 	addi	r16,sp,120
 4011ba4:	003a2b06 	br	4010454 <__alt_mem_onchip_memory2_0+0xfc00f1b4>
 4011ba8:	8c7fff84 	addi	r17,r17,-2
 4011bac:	b5bfffc4 	addi	r22,r22,-1
 4011bb0:	dd802615 	stw	r22,152(sp)
 4011bb4:	dc4022c5 	stb	r17,139(sp)
 4011bb8:	b000bf16 	blt	r22,zero,4011eb8 <___vfprintf_internal_r+0x21c0>
 4011bbc:	00800ac4 	movi	r2,43
 4011bc0:	d8802305 	stb	r2,140(sp)
 4011bc4:	00800244 	movi	r2,9
 4011bc8:	15807016 	blt	r2,r22,4011d8c <___vfprintf_internal_r+0x2094>
 4011bcc:	00800c04 	movi	r2,48
 4011bd0:	b5800c04 	addi	r22,r22,48
 4011bd4:	d8802345 	stb	r2,141(sp)
 4011bd8:	dd802385 	stb	r22,142(sp)
 4011bdc:	d88023c4 	addi	r2,sp,143
 4011be0:	df0022c4 	addi	fp,sp,139
 4011be4:	d8c03317 	ldw	r3,204(sp)
 4011be8:	1739c83a 	sub	fp,r2,fp
 4011bec:	d9003317 	ldw	r4,204(sp)
 4011bf0:	e0c7883a 	add	r3,fp,r3
 4011bf4:	df003a15 	stw	fp,232(sp)
 4011bf8:	d8c02b15 	stw	r3,172(sp)
 4011bfc:	00800044 	movi	r2,1
 4011c00:	1100b30e 	bge	r2,r4,4011ed0 <___vfprintf_internal_r+0x21d8>
 4011c04:	d8c02b17 	ldw	r3,172(sp)
 4011c08:	18c00044 	addi	r3,r3,1
 4011c0c:	d8c02b15 	stw	r3,172(sp)
 4011c10:	1805883a 	mov	r2,r3
 4011c14:	1800ac16 	blt	r3,zero,4011ec8 <___vfprintf_internal_r+0x21d0>
 4011c18:	d8003215 	stw	zero,200(sp)
 4011c1c:	003e5d06 	br	4011594 <__alt_mem_onchip_memory2_0+0xfc0102f4>
 4011c20:	d9002d17 	ldw	r4,180(sp)
 4011c24:	d9801e04 	addi	r6,sp,120
 4011c28:	b80b883a 	mov	r5,r23
 4011c2c:	4016a940 	call	4016a94 <__sprint_r>
 4011c30:	1039351e 	bne	r2,zero,4010108 <__alt_mem_onchip_memory2_0+0xfc00ee68>
 4011c34:	dc402617 	ldw	r17,152(sp)
 4011c38:	d8c02017 	ldw	r3,128(sp)
 4011c3c:	d8801f17 	ldw	r2,124(sp)
 4011c40:	da000404 	addi	r8,sp,16
 4011c44:	003ed606 	br	40117a0 <__alt_mem_onchip_memory2_0+0xfc010500>
 4011c48:	182b883a 	mov	r21,r3
 4011c4c:	d8002a15 	stw	zero,168(sp)
 4011c50:	00388c06 	br	400fe84 <__alt_mem_onchip_memory2_0+0xfc00ebe4>
 4011c54:	d8802a17 	ldw	r2,168(sp)
 4011c58:	103e071e 	bne	r2,zero,4011478 <__alt_mem_onchip_memory2_0+0xfc0101d8>
 4011c5c:	dc002a15 	stw	r16,168(sp)
 4011c60:	003e0506 	br	4011478 <__alt_mem_onchip_memory2_0+0xfc0101d8>
 4011c64:	d9002a17 	ldw	r4,168(sp)
 4011c68:	20c00044 	addi	r3,r4,1
 4011c6c:	003e0f06 	br	40114ac <__alt_mem_onchip_memory2_0+0xfc01020c>
 4011c70:	01400184 	movi	r5,6
 4011c74:	d9402a15 	stw	r5,168(sp)
 4011c78:	003dff06 	br	4011478 <__alt_mem_onchip_memory2_0+0xfc0101d8>
 4011c7c:	d8802104 	addi	r2,sp,132
 4011c80:	d8800315 	stw	r2,12(sp)
 4011c84:	d8802504 	addi	r2,sp,148
 4011c88:	d8800215 	stw	r2,8(sp)
 4011c8c:	d8802604 	addi	r2,sp,152
 4011c90:	d8800115 	stw	r2,4(sp)
 4011c94:	d8802a17 	ldw	r2,168(sp)
 4011c98:	d9403617 	ldw	r5,216(sp)
 4011c9c:	d9002d17 	ldw	r4,180(sp)
 4011ca0:	d8800015 	stw	r2,0(sp)
 4011ca4:	01c000c4 	movi	r7,3
 4011ca8:	980d883a 	mov	r6,r19
 4011cac:	da003d15 	stw	r8,244(sp)
 4011cb0:	40124280 	call	4012428 <_dtoa_r>
 4011cb4:	d8c02a17 	ldw	r3,168(sp)
 4011cb8:	da003d17 	ldw	r8,244(sp)
 4011cbc:	1021883a 	mov	r16,r2
 4011cc0:	10f9883a 	add	fp,r2,r3
 4011cc4:	81000007 	ldb	r4,0(r16)
 4011cc8:	00800c04 	movi	r2,48
 4011ccc:	20805e26 	beq	r4,r2,4011e48 <___vfprintf_internal_r+0x2150>
 4011cd0:	d8c02617 	ldw	r3,152(sp)
 4011cd4:	e0f9883a 	add	fp,fp,r3
 4011cd8:	003e0a06 	br	4011504 <__alt_mem_onchip_memory2_0+0xfc010264>
 4011cdc:	00c00b44 	movi	r3,45
 4011ce0:	24e0003c 	xorhi	r19,r4,32768
 4011ce4:	d8c02905 	stb	r3,164(sp)
 4011ce8:	003de906 	br	4011490 <__alt_mem_onchip_memory2_0+0xfc0101f0>
 4011cec:	d8c03217 	ldw	r3,200(sp)
 4011cf0:	00c07a0e 	bge	zero,r3,4011edc <___vfprintf_internal_r+0x21e4>
 4011cf4:	00800044 	movi	r2,1
 4011cf8:	d9003317 	ldw	r4,204(sp)
 4011cfc:	1105883a 	add	r2,r2,r4
 4011d00:	d8802b15 	stw	r2,172(sp)
 4011d04:	10004e16 	blt	r2,zero,4011e40 <___vfprintf_internal_r+0x2148>
 4011d08:	044019c4 	movi	r17,103
 4011d0c:	003e2106 	br	4011594 <__alt_mem_onchip_memory2_0+0xfc0102f4>
 4011d10:	d9002a17 	ldw	r4,168(sp)
 4011d14:	d8802104 	addi	r2,sp,132
 4011d18:	d8800315 	stw	r2,12(sp)
 4011d1c:	d9000015 	stw	r4,0(sp)
 4011d20:	d8802504 	addi	r2,sp,148
 4011d24:	d9403617 	ldw	r5,216(sp)
 4011d28:	d9002d17 	ldw	r4,180(sp)
 4011d2c:	d8800215 	stw	r2,8(sp)
 4011d30:	d8802604 	addi	r2,sp,152
 4011d34:	d8800115 	stw	r2,4(sp)
 4011d38:	01c000c4 	movi	r7,3
 4011d3c:	980d883a 	mov	r6,r19
 4011d40:	da003d15 	stw	r8,244(sp)
 4011d44:	40124280 	call	4012428 <_dtoa_r>
 4011d48:	d8c02a17 	ldw	r3,168(sp)
 4011d4c:	da003d17 	ldw	r8,244(sp)
 4011d50:	1021883a 	mov	r16,r2
 4011d54:	00801184 	movi	r2,70
 4011d58:	80f9883a 	add	fp,r16,r3
 4011d5c:	88bfd926 	beq	r17,r2,4011cc4 <__alt_mem_onchip_memory2_0+0xfc010a24>
 4011d60:	003de806 	br	4011504 <__alt_mem_onchip_memory2_0+0xfc010264>
 4011d64:	d9002a17 	ldw	r4,168(sp)
 4011d68:	00c04d0e 	bge	zero,r3,4011ea0 <___vfprintf_internal_r+0x21a8>
 4011d6c:	2000441e 	bne	r4,zero,4011e80 <___vfprintf_internal_r+0x2188>
 4011d70:	9480004c 	andi	r18,r18,1
 4011d74:	9000421e 	bne	r18,zero,4011e80 <___vfprintf_internal_r+0x2188>
 4011d78:	1805883a 	mov	r2,r3
 4011d7c:	18006f16 	blt	r3,zero,4011f3c <___vfprintf_internal_r+0x2244>
 4011d80:	d8c03217 	ldw	r3,200(sp)
 4011d84:	d8c02b15 	stw	r3,172(sp)
 4011d88:	003e0206 	br	4011594 <__alt_mem_onchip_memory2_0+0xfc0102f4>
 4011d8c:	df0022c4 	addi	fp,sp,139
 4011d90:	dc002a15 	stw	r16,168(sp)
 4011d94:	4027883a 	mov	r19,r8
 4011d98:	e021883a 	mov	r16,fp
 4011d9c:	b009883a 	mov	r4,r22
 4011da0:	01400284 	movi	r5,10
 4011da4:	400d9b00 	call	400d9b0 <__modsi3>
 4011da8:	10800c04 	addi	r2,r2,48
 4011dac:	843fffc4 	addi	r16,r16,-1
 4011db0:	b009883a 	mov	r4,r22
 4011db4:	01400284 	movi	r5,10
 4011db8:	80800005 	stb	r2,0(r16)
 4011dbc:	400d92c0 	call	400d92c <__divsi3>
 4011dc0:	102d883a 	mov	r22,r2
 4011dc4:	00800244 	movi	r2,9
 4011dc8:	15bff416 	blt	r2,r22,4011d9c <__alt_mem_onchip_memory2_0+0xfc010afc>
 4011dcc:	9811883a 	mov	r8,r19
 4011dd0:	b0800c04 	addi	r2,r22,48
 4011dd4:	8027883a 	mov	r19,r16
 4011dd8:	997fffc4 	addi	r5,r19,-1
 4011ddc:	98bfffc5 	stb	r2,-1(r19)
 4011de0:	dc002a17 	ldw	r16,168(sp)
 4011de4:	2f006d2e 	bgeu	r5,fp,4011f9c <___vfprintf_internal_r+0x22a4>
 4011de8:	d9c02384 	addi	r7,sp,142
 4011dec:	3ccfc83a 	sub	r7,r7,r19
 4011df0:	d9002344 	addi	r4,sp,141
 4011df4:	e1cf883a 	add	r7,fp,r7
 4011df8:	00000106 	br	4011e00 <___vfprintf_internal_r+0x2108>
 4011dfc:	28800003 	ldbu	r2,0(r5)
 4011e00:	20800005 	stb	r2,0(r4)
 4011e04:	21000044 	addi	r4,r4,1
 4011e08:	29400044 	addi	r5,r5,1
 4011e0c:	393ffb1e 	bne	r7,r4,4011dfc <__alt_mem_onchip_memory2_0+0xfc010b5c>
 4011e10:	d8802304 	addi	r2,sp,140
 4011e14:	14c5c83a 	sub	r2,r2,r19
 4011e18:	d8c02344 	addi	r3,sp,141
 4011e1c:	1885883a 	add	r2,r3,r2
 4011e20:	003f7006 	br	4011be4 <__alt_mem_onchip_memory2_0+0xfc010944>
 4011e24:	0005883a 	mov	r2,zero
 4011e28:	003f0f06 	br	4011a68 <__alt_mem_onchip_memory2_0+0xfc0107c8>
 4011e2c:	d8c03217 	ldw	r3,200(sp)
 4011e30:	18c00044 	addi	r3,r3,1
 4011e34:	d8c02b15 	stw	r3,172(sp)
 4011e38:	1805883a 	mov	r2,r3
 4011e3c:	183fb20e 	bge	r3,zero,4011d08 <__alt_mem_onchip_memory2_0+0xfc010a68>
 4011e40:	0005883a 	mov	r2,zero
 4011e44:	003fb006 	br	4011d08 <__alt_mem_onchip_memory2_0+0xfc010a68>
 4011e48:	d9003617 	ldw	r4,216(sp)
 4011e4c:	000d883a 	mov	r6,zero
 4011e50:	000f883a 	mov	r7,zero
 4011e54:	980b883a 	mov	r5,r19
 4011e58:	d8c03c15 	stw	r3,240(sp)
 4011e5c:	da003d15 	stw	r8,244(sp)
 4011e60:	401a8180 	call	401a818 <__eqdf2>
 4011e64:	d8c03c17 	ldw	r3,240(sp)
 4011e68:	da003d17 	ldw	r8,244(sp)
 4011e6c:	103f9826 	beq	r2,zero,4011cd0 <__alt_mem_onchip_memory2_0+0xfc010a30>
 4011e70:	00800044 	movi	r2,1
 4011e74:	10c7c83a 	sub	r3,r2,r3
 4011e78:	d8c02615 	stw	r3,152(sp)
 4011e7c:	003f9506 	br	4011cd4 <__alt_mem_onchip_memory2_0+0xfc010a34>
 4011e80:	d9002a17 	ldw	r4,168(sp)
 4011e84:	d8c03217 	ldw	r3,200(sp)
 4011e88:	20800044 	addi	r2,r4,1
 4011e8c:	1885883a 	add	r2,r3,r2
 4011e90:	d8802b15 	stw	r2,172(sp)
 4011e94:	103dbf0e 	bge	r2,zero,4011594 <__alt_mem_onchip_memory2_0+0xfc0102f4>
 4011e98:	0005883a 	mov	r2,zero
 4011e9c:	003dbd06 	br	4011594 <__alt_mem_onchip_memory2_0+0xfc0102f4>
 4011ea0:	2000201e 	bne	r4,zero,4011f24 <___vfprintf_internal_r+0x222c>
 4011ea4:	9480004c 	andi	r18,r18,1
 4011ea8:	90001e1e 	bne	r18,zero,4011f24 <___vfprintf_internal_r+0x222c>
 4011eac:	00800044 	movi	r2,1
 4011eb0:	d8802b15 	stw	r2,172(sp)
 4011eb4:	003db706 	br	4011594 <__alt_mem_onchip_memory2_0+0xfc0102f4>
 4011eb8:	00800b44 	movi	r2,45
 4011ebc:	05adc83a 	sub	r22,zero,r22
 4011ec0:	d8802305 	stb	r2,140(sp)
 4011ec4:	003f3f06 	br	4011bc4 <__alt_mem_onchip_memory2_0+0xfc010924>
 4011ec8:	0005883a 	mov	r2,zero
 4011ecc:	003f5206 	br	4011c18 <__alt_mem_onchip_memory2_0+0xfc010978>
 4011ed0:	90a4703a 	and	r18,r18,r2
 4011ed4:	903f4e26 	beq	r18,zero,4011c10 <__alt_mem_onchip_memory2_0+0xfc010970>
 4011ed8:	003f4a06 	br	4011c04 <__alt_mem_onchip_memory2_0+0xfc010964>
 4011edc:	00800084 	movi	r2,2
 4011ee0:	10c5c83a 	sub	r2,r2,r3
 4011ee4:	003f8406 	br	4011cf8 <__alt_mem_onchip_memory2_0+0xfc010a58>
 4011ee8:	d9402e17 	ldw	r5,184(sp)
 4011eec:	d9002e17 	ldw	r4,184(sp)
 4011ef0:	ac400043 	ldbu	r17,1(r21)
 4011ef4:	29400017 	ldw	r5,0(r5)
 4011ef8:	20800104 	addi	r2,r4,4
 4011efc:	d8802e15 	stw	r2,184(sp)
 4011f00:	d9402a15 	stw	r5,168(sp)
 4011f04:	182b883a 	mov	r21,r3
 4011f08:	283e7b0e 	bge	r5,zero,40118f8 <__alt_mem_onchip_memory2_0+0xfc010658>
 4011f0c:	8c403fcc 	andi	r17,r17,255
 4011f10:	017fffc4 	movi	r5,-1
 4011f14:	8c40201c 	xori	r17,r17,128
 4011f18:	d9402a15 	stw	r5,168(sp)
 4011f1c:	8c7fe004 	addi	r17,r17,-128
 4011f20:	0037d706 	br	400fe80 <__alt_mem_onchip_memory2_0+0xfc00ebe0>
 4011f24:	d8c02a17 	ldw	r3,168(sp)
 4011f28:	18c00084 	addi	r3,r3,2
 4011f2c:	d8c02b15 	stw	r3,172(sp)
 4011f30:	1805883a 	mov	r2,r3
 4011f34:	183d970e 	bge	r3,zero,4011594 <__alt_mem_onchip_memory2_0+0xfc0102f4>
 4011f38:	003fd706 	br	4011e98 <__alt_mem_onchip_memory2_0+0xfc010bf8>
 4011f3c:	0005883a 	mov	r2,zero
 4011f40:	003f8f06 	br	4011d80 <__alt_mem_onchip_memory2_0+0xfc010ae0>
 4011f44:	9080004c 	andi	r2,r18,1
 4011f48:	103f821e 	bne	r2,zero,4011d54 <__alt_mem_onchip_memory2_0+0xfc010ab4>
 4011f4c:	d8802117 	ldw	r2,132(sp)
 4011f50:	1405c83a 	sub	r2,r2,r16
 4011f54:	d8803315 	stw	r2,204(sp)
 4011f58:	b47ef426 	beq	r22,r17,4011b2c <__alt_mem_onchip_memory2_0+0xfc01088c>
 4011f5c:	dd802617 	ldw	r22,152(sp)
 4011f60:	003f1206 	br	4011bac <__alt_mem_onchip_memory2_0+0xfc01090c>
 4011f64:	d8c02b03 	ldbu	r3,172(sp)
 4011f68:	d8c02785 	stb	r3,158(sp)
 4011f6c:	0038df06 	br	40102ec <__alt_mem_onchip_memory2_0+0xfc00f04c>
 4011f70:	d8c02b03 	ldbu	r3,172(sp)
 4011f74:	d8c02785 	stb	r3,158(sp)
 4011f78:	0038aa06 	br	4010224 <__alt_mem_onchip_memory2_0+0xfc00ef84>
 4011f7c:	d8c02b03 	ldbu	r3,172(sp)
 4011f80:	d8c02785 	stb	r3,158(sp)
 4011f84:	003a4306 	br	4010894 <__alt_mem_onchip_memory2_0+0xfc00f5f4>
 4011f88:	d8c02b03 	ldbu	r3,172(sp)
 4011f8c:	d8c02785 	stb	r3,158(sp)
 4011f90:	003af506 	br	4010b68 <__alt_mem_onchip_memory2_0+0xfc00f8c8>
 4011f94:	0005883a 	mov	r2,zero
 4011f98:	003d7b06 	br	4011588 <__alt_mem_onchip_memory2_0+0xfc0102e8>
 4011f9c:	d8802344 	addi	r2,sp,141
 4011fa0:	003f1006 	br	4011be4 <__alt_mem_onchip_memory2_0+0xfc010944>
 4011fa4:	d8c02b03 	ldbu	r3,172(sp)
 4011fa8:	d8c02785 	stb	r3,158(sp)
 4011fac:	0038fd06 	br	40103a4 <__alt_mem_onchip_memory2_0+0xfc00f104>
 4011fb0:	d8c02b03 	ldbu	r3,172(sp)
 4011fb4:	d8c02785 	stb	r3,158(sp)
 4011fb8:	003a9706 	br	4010a18 <__alt_mem_onchip_memory2_0+0xfc00f778>
 4011fbc:	d8c02b03 	ldbu	r3,172(sp)
 4011fc0:	d8c02785 	stb	r3,158(sp)
 4011fc4:	003a1806 	br	4010828 <__alt_mem_onchip_memory2_0+0xfc00f588>
 4011fc8:	d8c02b03 	ldbu	r3,172(sp)
 4011fcc:	d8c02785 	stb	r3,158(sp)
 4011fd0:	003abe06 	br	4010acc <__alt_mem_onchip_memory2_0+0xfc00f82c>

04011fd4 <__vfprintf_internal>:
 4011fd4:	008100f4 	movhi	r2,1027
 4011fd8:	10ab8304 	addi	r2,r2,-20980
 4011fdc:	300f883a 	mov	r7,r6
 4011fe0:	280d883a 	mov	r6,r5
 4011fe4:	200b883a 	mov	r5,r4
 4011fe8:	11000017 	ldw	r4,0(r2)
 4011fec:	400fcf81 	jmpi	400fcf8 <___vfprintf_internal_r>

04011ff0 <__sbprintf>:
 4011ff0:	2880030b 	ldhu	r2,12(r5)
 4011ff4:	2ac01917 	ldw	r11,100(r5)
 4011ff8:	2a80038b 	ldhu	r10,14(r5)
 4011ffc:	2a400717 	ldw	r9,28(r5)
 4012000:	2a000917 	ldw	r8,36(r5)
 4012004:	defee204 	addi	sp,sp,-1144
 4012008:	00c10004 	movi	r3,1024
 401200c:	dc011a15 	stw	r16,1128(sp)
 4012010:	10bfff4c 	andi	r2,r2,65533
 4012014:	2821883a 	mov	r16,r5
 4012018:	d8cb883a 	add	r5,sp,r3
 401201c:	dc811c15 	stw	r18,1136(sp)
 4012020:	dc411b15 	stw	r17,1132(sp)
 4012024:	dfc11d15 	stw	ra,1140(sp)
 4012028:	2025883a 	mov	r18,r4
 401202c:	d881030d 	sth	r2,1036(sp)
 4012030:	dac11915 	stw	r11,1124(sp)
 4012034:	da81038d 	sth	r10,1038(sp)
 4012038:	da410715 	stw	r9,1052(sp)
 401203c:	da010915 	stw	r8,1060(sp)
 4012040:	dec10015 	stw	sp,1024(sp)
 4012044:	dec10415 	stw	sp,1040(sp)
 4012048:	d8c10215 	stw	r3,1032(sp)
 401204c:	d8c10515 	stw	r3,1044(sp)
 4012050:	d8010615 	stw	zero,1048(sp)
 4012054:	400fcf80 	call	400fcf8 <___vfprintf_internal_r>
 4012058:	1023883a 	mov	r17,r2
 401205c:	10000416 	blt	r2,zero,4012070 <__sbprintf+0x80>
 4012060:	d9410004 	addi	r5,sp,1024
 4012064:	9009883a 	mov	r4,r18
 4012068:	4013ccc0 	call	4013ccc <_fflush_r>
 401206c:	10000d1e 	bne	r2,zero,40120a4 <__sbprintf+0xb4>
 4012070:	d881030b 	ldhu	r2,1036(sp)
 4012074:	1080100c 	andi	r2,r2,64
 4012078:	10000326 	beq	r2,zero,4012088 <__sbprintf+0x98>
 401207c:	8080030b 	ldhu	r2,12(r16)
 4012080:	10801014 	ori	r2,r2,64
 4012084:	8080030d 	sth	r2,12(r16)
 4012088:	8805883a 	mov	r2,r17
 401208c:	dfc11d17 	ldw	ra,1140(sp)
 4012090:	dc811c17 	ldw	r18,1136(sp)
 4012094:	dc411b17 	ldw	r17,1132(sp)
 4012098:	dc011a17 	ldw	r16,1128(sp)
 401209c:	dec11e04 	addi	sp,sp,1144
 40120a0:	f800283a 	ret
 40120a4:	047fffc4 	movi	r17,-1
 40120a8:	003ff106 	br	4012070 <__alt_mem_onchip_memory2_0+0xfc010dd0>

040120ac <__swsetup_r>:
 40120ac:	008100f4 	movhi	r2,1027
 40120b0:	defffd04 	addi	sp,sp,-12
 40120b4:	10ab8304 	addi	r2,r2,-20980
 40120b8:	dc400115 	stw	r17,4(sp)
 40120bc:	2023883a 	mov	r17,r4
 40120c0:	11000017 	ldw	r4,0(r2)
 40120c4:	dc000015 	stw	r16,0(sp)
 40120c8:	dfc00215 	stw	ra,8(sp)
 40120cc:	2821883a 	mov	r16,r5
 40120d0:	20000226 	beq	r4,zero,40120dc <__swsetup_r+0x30>
 40120d4:	20800e17 	ldw	r2,56(r4)
 40120d8:	10003126 	beq	r2,zero,40121a0 <__swsetup_r+0xf4>
 40120dc:	8080030b 	ldhu	r2,12(r16)
 40120e0:	10c0020c 	andi	r3,r2,8
 40120e4:	1009883a 	mov	r4,r2
 40120e8:	18000f26 	beq	r3,zero,4012128 <__swsetup_r+0x7c>
 40120ec:	80c00417 	ldw	r3,16(r16)
 40120f0:	18001526 	beq	r3,zero,4012148 <__swsetup_r+0x9c>
 40120f4:	1100004c 	andi	r4,r2,1
 40120f8:	20001c1e 	bne	r4,zero,401216c <__swsetup_r+0xc0>
 40120fc:	1080008c 	andi	r2,r2,2
 4012100:	1000291e 	bne	r2,zero,40121a8 <__swsetup_r+0xfc>
 4012104:	80800517 	ldw	r2,20(r16)
 4012108:	80800215 	stw	r2,8(r16)
 401210c:	18001c26 	beq	r3,zero,4012180 <__swsetup_r+0xd4>
 4012110:	0005883a 	mov	r2,zero
 4012114:	dfc00217 	ldw	ra,8(sp)
 4012118:	dc400117 	ldw	r17,4(sp)
 401211c:	dc000017 	ldw	r16,0(sp)
 4012120:	dec00304 	addi	sp,sp,12
 4012124:	f800283a 	ret
 4012128:	2080040c 	andi	r2,r4,16
 401212c:	10002e26 	beq	r2,zero,40121e8 <__swsetup_r+0x13c>
 4012130:	2080010c 	andi	r2,r4,4
 4012134:	10001e1e 	bne	r2,zero,40121b0 <__swsetup_r+0x104>
 4012138:	80c00417 	ldw	r3,16(r16)
 401213c:	20800214 	ori	r2,r4,8
 4012140:	8080030d 	sth	r2,12(r16)
 4012144:	183feb1e 	bne	r3,zero,40120f4 <__alt_mem_onchip_memory2_0+0xfc010e54>
 4012148:	1100a00c 	andi	r4,r2,640
 401214c:	01408004 	movi	r5,512
 4012150:	217fe826 	beq	r4,r5,40120f4 <__alt_mem_onchip_memory2_0+0xfc010e54>
 4012154:	800b883a 	mov	r5,r16
 4012158:	8809883a 	mov	r4,r17
 401215c:	4014c680 	call	4014c68 <__smakebuf_r>
 4012160:	8080030b 	ldhu	r2,12(r16)
 4012164:	80c00417 	ldw	r3,16(r16)
 4012168:	003fe206 	br	40120f4 <__alt_mem_onchip_memory2_0+0xfc010e54>
 401216c:	80800517 	ldw	r2,20(r16)
 4012170:	80000215 	stw	zero,8(r16)
 4012174:	0085c83a 	sub	r2,zero,r2
 4012178:	80800615 	stw	r2,24(r16)
 401217c:	183fe41e 	bne	r3,zero,4012110 <__alt_mem_onchip_memory2_0+0xfc010e70>
 4012180:	80c0030b 	ldhu	r3,12(r16)
 4012184:	0005883a 	mov	r2,zero
 4012188:	1900200c 	andi	r4,r3,128
 401218c:	203fe126 	beq	r4,zero,4012114 <__alt_mem_onchip_memory2_0+0xfc010e74>
 4012190:	18c01014 	ori	r3,r3,64
 4012194:	80c0030d 	sth	r3,12(r16)
 4012198:	00bfffc4 	movi	r2,-1
 401219c:	003fdd06 	br	4012114 <__alt_mem_onchip_memory2_0+0xfc010e74>
 40121a0:	40140b80 	call	40140b8 <__sinit>
 40121a4:	003fcd06 	br	40120dc <__alt_mem_onchip_memory2_0+0xfc010e3c>
 40121a8:	0005883a 	mov	r2,zero
 40121ac:	003fd606 	br	4012108 <__alt_mem_onchip_memory2_0+0xfc010e68>
 40121b0:	81400c17 	ldw	r5,48(r16)
 40121b4:	28000626 	beq	r5,zero,40121d0 <__swsetup_r+0x124>
 40121b8:	80801004 	addi	r2,r16,64
 40121bc:	28800326 	beq	r5,r2,40121cc <__swsetup_r+0x120>
 40121c0:	8809883a 	mov	r4,r17
 40121c4:	401422c0 	call	401422c <_free_r>
 40121c8:	8100030b 	ldhu	r4,12(r16)
 40121cc:	80000c15 	stw	zero,48(r16)
 40121d0:	80c00417 	ldw	r3,16(r16)
 40121d4:	00bff6c4 	movi	r2,-37
 40121d8:	1108703a 	and	r4,r2,r4
 40121dc:	80000115 	stw	zero,4(r16)
 40121e0:	80c00015 	stw	r3,0(r16)
 40121e4:	003fd506 	br	401213c <__alt_mem_onchip_memory2_0+0xfc010e9c>
 40121e8:	00800244 	movi	r2,9
 40121ec:	88800015 	stw	r2,0(r17)
 40121f0:	20801014 	ori	r2,r4,64
 40121f4:	8080030d 	sth	r2,12(r16)
 40121f8:	00bfffc4 	movi	r2,-1
 40121fc:	003fc506 	br	4012114 <__alt_mem_onchip_memory2_0+0xfc010e74>

04012200 <quorem>:
 4012200:	defff204 	addi	sp,sp,-56
 4012204:	ddc00b15 	stw	r23,44(sp)
 4012208:	20800417 	ldw	r2,16(r4)
 401220c:	2dc00417 	ldw	r23,16(r5)
 4012210:	dfc00d15 	stw	ra,52(sp)
 4012214:	df000c15 	stw	fp,48(sp)
 4012218:	dd800a15 	stw	r22,40(sp)
 401221c:	dd400915 	stw	r21,36(sp)
 4012220:	dd000815 	stw	r20,32(sp)
 4012224:	dcc00715 	stw	r19,28(sp)
 4012228:	dc800615 	stw	r18,24(sp)
 401222c:	dc400515 	stw	r17,20(sp)
 4012230:	dc000415 	stw	r16,16(sp)
 4012234:	15c07a16 	blt	r2,r23,4012420 <quorem+0x220>
 4012238:	bdffffc4 	addi	r23,r23,-1
 401223c:	bde9883a 	add	r20,r23,r23
 4012240:	28c00504 	addi	r3,r5,20
 4012244:	a529883a 	add	r20,r20,r20
 4012248:	1d39883a 	add	fp,r3,r20
 401224c:	24c00504 	addi	r19,r4,20
 4012250:	d9400215 	stw	r5,8(sp)
 4012254:	9d29883a 	add	r20,r19,r20
 4012258:	e1400017 	ldw	r5,0(fp)
 401225c:	d9000015 	stw	r4,0(sp)
 4012260:	a1000017 	ldw	r4,0(r20)
 4012264:	29400044 	addi	r5,r5,1
 4012268:	d8c00115 	stw	r3,4(sp)
 401226c:	dd000315 	stw	r20,12(sp)
 4012270:	400da240 	call	400da24 <__udivsi3>
 4012274:	1025883a 	mov	r18,r2
 4012278:	10003026 	beq	r2,zero,401233c <quorem+0x13c>
 401227c:	dc400117 	ldw	r17,4(sp)
 4012280:	9829883a 	mov	r20,r19
 4012284:	002d883a 	mov	r22,zero
 4012288:	0021883a 	mov	r16,zero
 401228c:	8d400017 	ldw	r21,0(r17)
 4012290:	900b883a 	mov	r5,r18
 4012294:	8c400104 	addi	r17,r17,4
 4012298:	a93fffcc 	andi	r4,r21,65535
 401229c:	400dae00 	call	400dae0 <__mulsi3>
 40122a0:	a808d43a 	srli	r4,r21,16
 40122a4:	900b883a 	mov	r5,r18
 40122a8:	15ad883a 	add	r22,r2,r22
 40122ac:	400dae00 	call	400dae0 <__mulsi3>
 40122b0:	a1000017 	ldw	r4,0(r20)
 40122b4:	b00cd43a 	srli	r6,r22,16
 40122b8:	b0ffffcc 	andi	r3,r22,65535
 40122bc:	217fffcc 	andi	r5,r4,65535
 40122c0:	2c21883a 	add	r16,r5,r16
 40122c4:	80c7c83a 	sub	r3,r16,r3
 40122c8:	2008d43a 	srli	r4,r4,16
 40122cc:	1185883a 	add	r2,r2,r6
 40122d0:	1821d43a 	srai	r16,r3,16
 40122d4:	117fffcc 	andi	r5,r2,65535
 40122d8:	2149c83a 	sub	r4,r4,r5
 40122dc:	2421883a 	add	r16,r4,r16
 40122e0:	8008943a 	slli	r4,r16,16
 40122e4:	18ffffcc 	andi	r3,r3,65535
 40122e8:	102cd43a 	srli	r22,r2,16
 40122ec:	20c8b03a 	or	r4,r4,r3
 40122f0:	a1000015 	stw	r4,0(r20)
 40122f4:	8021d43a 	srai	r16,r16,16
 40122f8:	a5000104 	addi	r20,r20,4
 40122fc:	e47fe32e 	bgeu	fp,r17,401228c <__alt_mem_onchip_memory2_0+0xfc010fec>
 4012300:	d8c00317 	ldw	r3,12(sp)
 4012304:	18800017 	ldw	r2,0(r3)
 4012308:	10000c1e 	bne	r2,zero,401233c <quorem+0x13c>
 401230c:	18bfff04 	addi	r2,r3,-4
 4012310:	9880082e 	bgeu	r19,r2,4012334 <quorem+0x134>
 4012314:	18ffff17 	ldw	r3,-4(r3)
 4012318:	18000326 	beq	r3,zero,4012328 <quorem+0x128>
 401231c:	00000506 	br	4012334 <quorem+0x134>
 4012320:	10c00017 	ldw	r3,0(r2)
 4012324:	1800031e 	bne	r3,zero,4012334 <quorem+0x134>
 4012328:	10bfff04 	addi	r2,r2,-4
 401232c:	bdffffc4 	addi	r23,r23,-1
 4012330:	98bffb36 	bltu	r19,r2,4012320 <__alt_mem_onchip_memory2_0+0xfc011080>
 4012334:	d8c00017 	ldw	r3,0(sp)
 4012338:	1dc00415 	stw	r23,16(r3)
 401233c:	d9400217 	ldw	r5,8(sp)
 4012340:	d9000017 	ldw	r4,0(sp)
 4012344:	40159e80 	call	40159e8 <__mcmp>
 4012348:	10002816 	blt	r2,zero,40123ec <quorem+0x1ec>
 401234c:	dc400117 	ldw	r17,4(sp)
 4012350:	94800044 	addi	r18,r18,1
 4012354:	980d883a 	mov	r6,r19
 4012358:	0007883a 	mov	r3,zero
 401235c:	31000017 	ldw	r4,0(r6)
 4012360:	89400017 	ldw	r5,0(r17)
 4012364:	31800104 	addi	r6,r6,4
 4012368:	20bfffcc 	andi	r2,r4,65535
 401236c:	10c7883a 	add	r3,r2,r3
 4012370:	28bfffcc 	andi	r2,r5,65535
 4012374:	1885c83a 	sub	r2,r3,r2
 4012378:	280ad43a 	srli	r5,r5,16
 401237c:	2008d43a 	srli	r4,r4,16
 4012380:	1007d43a 	srai	r3,r2,16
 4012384:	10bfffcc 	andi	r2,r2,65535
 4012388:	2149c83a 	sub	r4,r4,r5
 401238c:	20c9883a 	add	r4,r4,r3
 4012390:	200a943a 	slli	r5,r4,16
 4012394:	8c400104 	addi	r17,r17,4
 4012398:	2007d43a 	srai	r3,r4,16
 401239c:	2884b03a 	or	r2,r5,r2
 40123a0:	30bfff15 	stw	r2,-4(r6)
 40123a4:	e47fed2e 	bgeu	fp,r17,401235c <__alt_mem_onchip_memory2_0+0xfc0110bc>
 40123a8:	bdc5883a 	add	r2,r23,r23
 40123ac:	1085883a 	add	r2,r2,r2
 40123b0:	9887883a 	add	r3,r19,r2
 40123b4:	18800017 	ldw	r2,0(r3)
 40123b8:	10000c1e 	bne	r2,zero,40123ec <quorem+0x1ec>
 40123bc:	18bfff04 	addi	r2,r3,-4
 40123c0:	9880082e 	bgeu	r19,r2,40123e4 <quorem+0x1e4>
 40123c4:	18ffff17 	ldw	r3,-4(r3)
 40123c8:	18000326 	beq	r3,zero,40123d8 <quorem+0x1d8>
 40123cc:	00000506 	br	40123e4 <quorem+0x1e4>
 40123d0:	10c00017 	ldw	r3,0(r2)
 40123d4:	1800031e 	bne	r3,zero,40123e4 <quorem+0x1e4>
 40123d8:	10bfff04 	addi	r2,r2,-4
 40123dc:	bdffffc4 	addi	r23,r23,-1
 40123e0:	98bffb36 	bltu	r19,r2,40123d0 <__alt_mem_onchip_memory2_0+0xfc011130>
 40123e4:	d8c00017 	ldw	r3,0(sp)
 40123e8:	1dc00415 	stw	r23,16(r3)
 40123ec:	9005883a 	mov	r2,r18
 40123f0:	dfc00d17 	ldw	ra,52(sp)
 40123f4:	df000c17 	ldw	fp,48(sp)
 40123f8:	ddc00b17 	ldw	r23,44(sp)
 40123fc:	dd800a17 	ldw	r22,40(sp)
 4012400:	dd400917 	ldw	r21,36(sp)
 4012404:	dd000817 	ldw	r20,32(sp)
 4012408:	dcc00717 	ldw	r19,28(sp)
 401240c:	dc800617 	ldw	r18,24(sp)
 4012410:	dc400517 	ldw	r17,20(sp)
 4012414:	dc000417 	ldw	r16,16(sp)
 4012418:	dec00e04 	addi	sp,sp,56
 401241c:	f800283a 	ret
 4012420:	0005883a 	mov	r2,zero
 4012424:	003ff206 	br	40123f0 <__alt_mem_onchip_memory2_0+0xfc011150>

04012428 <_dtoa_r>:
 4012428:	20801017 	ldw	r2,64(r4)
 401242c:	deffde04 	addi	sp,sp,-136
 4012430:	df002015 	stw	fp,128(sp)
 4012434:	dcc01b15 	stw	r19,108(sp)
 4012438:	dc801a15 	stw	r18,104(sp)
 401243c:	dc401915 	stw	r17,100(sp)
 4012440:	dc001815 	stw	r16,96(sp)
 4012444:	dfc02115 	stw	ra,132(sp)
 4012448:	ddc01f15 	stw	r23,124(sp)
 401244c:	dd801e15 	stw	r22,120(sp)
 4012450:	dd401d15 	stw	r21,116(sp)
 4012454:	dd001c15 	stw	r20,112(sp)
 4012458:	d9c00315 	stw	r7,12(sp)
 401245c:	2039883a 	mov	fp,r4
 4012460:	3023883a 	mov	r17,r6
 4012464:	2825883a 	mov	r18,r5
 4012468:	dc002417 	ldw	r16,144(sp)
 401246c:	3027883a 	mov	r19,r6
 4012470:	10000826 	beq	r2,zero,4012494 <_dtoa_r+0x6c>
 4012474:	21801117 	ldw	r6,68(r4)
 4012478:	00c00044 	movi	r3,1
 401247c:	100b883a 	mov	r5,r2
 4012480:	1986983a 	sll	r3,r3,r6
 4012484:	11800115 	stw	r6,4(r2)
 4012488:	10c00215 	stw	r3,8(r2)
 401248c:	401510c0 	call	401510c <_Bfree>
 4012490:	e0001015 	stw	zero,64(fp)
 4012494:	88002e16 	blt	r17,zero,4012550 <_dtoa_r+0x128>
 4012498:	80000015 	stw	zero,0(r16)
 401249c:	889ffc2c 	andhi	r2,r17,32752
 40124a0:	00dffc34 	movhi	r3,32752
 40124a4:	10c01c26 	beq	r2,r3,4012518 <_dtoa_r+0xf0>
 40124a8:	000d883a 	mov	r6,zero
 40124ac:	000f883a 	mov	r7,zero
 40124b0:	9009883a 	mov	r4,r18
 40124b4:	980b883a 	mov	r5,r19
 40124b8:	401a8180 	call	401a818 <__eqdf2>
 40124bc:	10002b1e 	bne	r2,zero,401256c <_dtoa_r+0x144>
 40124c0:	d9c02317 	ldw	r7,140(sp)
 40124c4:	00800044 	movi	r2,1
 40124c8:	38800015 	stw	r2,0(r7)
 40124cc:	d8802517 	ldw	r2,148(sp)
 40124d0:	10019e26 	beq	r2,zero,4012b4c <_dtoa_r+0x724>
 40124d4:	d8c02517 	ldw	r3,148(sp)
 40124d8:	008100b4 	movhi	r2,1026
 40124dc:	109ea444 	addi	r2,r2,31377
 40124e0:	18800015 	stw	r2,0(r3)
 40124e4:	10bfffc4 	addi	r2,r2,-1
 40124e8:	dfc02117 	ldw	ra,132(sp)
 40124ec:	df002017 	ldw	fp,128(sp)
 40124f0:	ddc01f17 	ldw	r23,124(sp)
 40124f4:	dd801e17 	ldw	r22,120(sp)
 40124f8:	dd401d17 	ldw	r21,116(sp)
 40124fc:	dd001c17 	ldw	r20,112(sp)
 4012500:	dcc01b17 	ldw	r19,108(sp)
 4012504:	dc801a17 	ldw	r18,104(sp)
 4012508:	dc401917 	ldw	r17,100(sp)
 401250c:	dc001817 	ldw	r16,96(sp)
 4012510:	dec02204 	addi	sp,sp,136
 4012514:	f800283a 	ret
 4012518:	d8c02317 	ldw	r3,140(sp)
 401251c:	0089c3c4 	movi	r2,9999
 4012520:	18800015 	stw	r2,0(r3)
 4012524:	90017726 	beq	r18,zero,4012b04 <_dtoa_r+0x6dc>
 4012528:	008100b4 	movhi	r2,1026
 401252c:	109eb004 	addi	r2,r2,31424
 4012530:	d9002517 	ldw	r4,148(sp)
 4012534:	203fec26 	beq	r4,zero,40124e8 <__alt_mem_onchip_memory2_0+0xfc011248>
 4012538:	10c000c7 	ldb	r3,3(r2)
 401253c:	1801781e 	bne	r3,zero,4012b20 <_dtoa_r+0x6f8>
 4012540:	10c000c4 	addi	r3,r2,3
 4012544:	d9802517 	ldw	r6,148(sp)
 4012548:	30c00015 	stw	r3,0(r6)
 401254c:	003fe606 	br	40124e8 <__alt_mem_onchip_memory2_0+0xfc011248>
 4012550:	04e00034 	movhi	r19,32768
 4012554:	9cffffc4 	addi	r19,r19,-1
 4012558:	00800044 	movi	r2,1
 401255c:	8ce6703a 	and	r19,r17,r19
 4012560:	80800015 	stw	r2,0(r16)
 4012564:	9823883a 	mov	r17,r19
 4012568:	003fcc06 	br	401249c <__alt_mem_onchip_memory2_0+0xfc0111fc>
 401256c:	d8800204 	addi	r2,sp,8
 4012570:	d8800015 	stw	r2,0(sp)
 4012574:	d9c00104 	addi	r7,sp,4
 4012578:	900b883a 	mov	r5,r18
 401257c:	980d883a 	mov	r6,r19
 4012580:	e009883a 	mov	r4,fp
 4012584:	8820d53a 	srli	r16,r17,20
 4012588:	4015db40 	call	4015db4 <__d2b>
 401258c:	d8800915 	stw	r2,36(sp)
 4012590:	8001651e 	bne	r16,zero,4012b28 <_dtoa_r+0x700>
 4012594:	dd800217 	ldw	r22,8(sp)
 4012598:	dc000117 	ldw	r16,4(sp)
 401259c:	00800804 	movi	r2,32
 40125a0:	b421883a 	add	r16,r22,r16
 40125a4:	80c10c84 	addi	r3,r16,1074
 40125a8:	10c2d10e 	bge	r2,r3,40130f0 <_dtoa_r+0xcc8>
 40125ac:	00801004 	movi	r2,64
 40125b0:	81010484 	addi	r4,r16,1042
 40125b4:	10c7c83a 	sub	r3,r2,r3
 40125b8:	9108d83a 	srl	r4,r18,r4
 40125bc:	88e2983a 	sll	r17,r17,r3
 40125c0:	2448b03a 	or	r4,r4,r17
 40125c4:	401bd340 	call	401bd34 <__floatunsidf>
 40125c8:	017f8434 	movhi	r5,65040
 40125cc:	01800044 	movi	r6,1
 40125d0:	1009883a 	mov	r4,r2
 40125d4:	194b883a 	add	r5,r3,r5
 40125d8:	843fffc4 	addi	r16,r16,-1
 40125dc:	d9801115 	stw	r6,68(sp)
 40125e0:	000d883a 	mov	r6,zero
 40125e4:	01cffe34 	movhi	r7,16376
 40125e8:	401b2dc0 	call	401b2dc <__subdf3>
 40125ec:	0198dbf4 	movhi	r6,25455
 40125f0:	01cff4f4 	movhi	r7,16339
 40125f4:	3190d844 	addi	r6,r6,17249
 40125f8:	39e1e9c4 	addi	r7,r7,-30809
 40125fc:	1009883a 	mov	r4,r2
 4012600:	180b883a 	mov	r5,r3
 4012604:	401aa700 	call	401aa70 <__muldf3>
 4012608:	01a2d874 	movhi	r6,35681
 401260c:	01cff1f4 	movhi	r7,16327
 4012610:	31b22cc4 	addi	r6,r6,-14157
 4012614:	39e28a04 	addi	r7,r7,-30168
 4012618:	180b883a 	mov	r5,r3
 401261c:	1009883a 	mov	r4,r2
 4012620:	401959c0 	call	401959c <__adddf3>
 4012624:	8009883a 	mov	r4,r16
 4012628:	1029883a 	mov	r20,r2
 401262c:	1823883a 	mov	r17,r3
 4012630:	401bc580 	call	401bc58 <__floatsidf>
 4012634:	019427f4 	movhi	r6,20639
 4012638:	01cff4f4 	movhi	r7,16339
 401263c:	319e7ec4 	addi	r6,r6,31227
 4012640:	39d104c4 	addi	r7,r7,17427
 4012644:	1009883a 	mov	r4,r2
 4012648:	180b883a 	mov	r5,r3
 401264c:	401aa700 	call	401aa70 <__muldf3>
 4012650:	100d883a 	mov	r6,r2
 4012654:	180f883a 	mov	r7,r3
 4012658:	a009883a 	mov	r4,r20
 401265c:	880b883a 	mov	r5,r17
 4012660:	401959c0 	call	401959c <__adddf3>
 4012664:	1009883a 	mov	r4,r2
 4012668:	180b883a 	mov	r5,r3
 401266c:	1029883a 	mov	r20,r2
 4012670:	1823883a 	mov	r17,r3
 4012674:	401bbd80 	call	401bbd8 <__fixdfsi>
 4012678:	000d883a 	mov	r6,zero
 401267c:	000f883a 	mov	r7,zero
 4012680:	a009883a 	mov	r4,r20
 4012684:	880b883a 	mov	r5,r17
 4012688:	d8800515 	stw	r2,20(sp)
 401268c:	401a97c0 	call	401a97c <__ledf2>
 4012690:	10028716 	blt	r2,zero,40130b0 <_dtoa_r+0xc88>
 4012694:	d8c00517 	ldw	r3,20(sp)
 4012698:	00800584 	movi	r2,22
 401269c:	10c27536 	bltu	r2,r3,4013074 <_dtoa_r+0xc4c>
 40126a0:	180490fa 	slli	r2,r3,3
 40126a4:	00c100b4 	movhi	r3,1026
 40126a8:	18decb04 	addi	r3,r3,31532
 40126ac:	1885883a 	add	r2,r3,r2
 40126b0:	11000017 	ldw	r4,0(r2)
 40126b4:	11400117 	ldw	r5,4(r2)
 40126b8:	900d883a 	mov	r6,r18
 40126bc:	980f883a 	mov	r7,r19
 40126c0:	401a8a00 	call	401a8a0 <__gedf2>
 40126c4:	00828d0e 	bge	zero,r2,40130fc <_dtoa_r+0xcd4>
 40126c8:	d9000517 	ldw	r4,20(sp)
 40126cc:	d8000e15 	stw	zero,56(sp)
 40126d0:	213fffc4 	addi	r4,r4,-1
 40126d4:	d9000515 	stw	r4,20(sp)
 40126d8:	b42dc83a 	sub	r22,r22,r16
 40126dc:	b5bfffc4 	addi	r22,r22,-1
 40126e0:	b0026f16 	blt	r22,zero,40130a0 <_dtoa_r+0xc78>
 40126e4:	d8000815 	stw	zero,32(sp)
 40126e8:	d9c00517 	ldw	r7,20(sp)
 40126ec:	38026416 	blt	r7,zero,4013080 <_dtoa_r+0xc58>
 40126f0:	b1ed883a 	add	r22,r22,r7
 40126f4:	d9c00d15 	stw	r7,52(sp)
 40126f8:	d8000a15 	stw	zero,40(sp)
 40126fc:	d9800317 	ldw	r6,12(sp)
 4012700:	00800244 	movi	r2,9
 4012704:	11811436 	bltu	r2,r6,4012b58 <_dtoa_r+0x730>
 4012708:	00800144 	movi	r2,5
 401270c:	1184e10e 	bge	r2,r6,4013a94 <_dtoa_r+0x166c>
 4012710:	31bfff04 	addi	r6,r6,-4
 4012714:	d9800315 	stw	r6,12(sp)
 4012718:	0023883a 	mov	r17,zero
 401271c:	d9800317 	ldw	r6,12(sp)
 4012720:	008000c4 	movi	r2,3
 4012724:	30836726 	beq	r6,r2,40134c4 <_dtoa_r+0x109c>
 4012728:	1183410e 	bge	r2,r6,4013430 <_dtoa_r+0x1008>
 401272c:	d9c00317 	ldw	r7,12(sp)
 4012730:	00800104 	movi	r2,4
 4012734:	38827c26 	beq	r7,r2,4013128 <_dtoa_r+0xd00>
 4012738:	00800144 	movi	r2,5
 401273c:	3884c41e 	bne	r7,r2,4013a50 <_dtoa_r+0x1628>
 4012740:	00800044 	movi	r2,1
 4012744:	d8800b15 	stw	r2,44(sp)
 4012748:	d8c00517 	ldw	r3,20(sp)
 401274c:	d9002217 	ldw	r4,136(sp)
 4012750:	1907883a 	add	r3,r3,r4
 4012754:	19800044 	addi	r6,r3,1
 4012758:	d8c00c15 	stw	r3,48(sp)
 401275c:	d9800615 	stw	r6,24(sp)
 4012760:	0183a40e 	bge	zero,r6,40135f4 <_dtoa_r+0x11cc>
 4012764:	d9800617 	ldw	r6,24(sp)
 4012768:	3021883a 	mov	r16,r6
 401276c:	e0001115 	stw	zero,68(fp)
 4012770:	008005c4 	movi	r2,23
 4012774:	1184c92e 	bgeu	r2,r6,4013a9c <_dtoa_r+0x1674>
 4012778:	00c00044 	movi	r3,1
 401277c:	00800104 	movi	r2,4
 4012780:	1085883a 	add	r2,r2,r2
 4012784:	11000504 	addi	r4,r2,20
 4012788:	180b883a 	mov	r5,r3
 401278c:	18c00044 	addi	r3,r3,1
 4012790:	313ffb2e 	bgeu	r6,r4,4012780 <__alt_mem_onchip_memory2_0+0xfc0114e0>
 4012794:	e1401115 	stw	r5,68(fp)
 4012798:	e009883a 	mov	r4,fp
 401279c:	40150640 	call	4015064 <_Balloc>
 40127a0:	d8800715 	stw	r2,28(sp)
 40127a4:	e0801015 	stw	r2,64(fp)
 40127a8:	00800384 	movi	r2,14
 40127ac:	1400f736 	bltu	r2,r16,4012b8c <_dtoa_r+0x764>
 40127b0:	8800f626 	beq	r17,zero,4012b8c <_dtoa_r+0x764>
 40127b4:	d9c00517 	ldw	r7,20(sp)
 40127b8:	01c39a0e 	bge	zero,r7,4013624 <_dtoa_r+0x11fc>
 40127bc:	388003cc 	andi	r2,r7,15
 40127c0:	100490fa 	slli	r2,r2,3
 40127c4:	382bd13a 	srai	r21,r7,4
 40127c8:	00c100b4 	movhi	r3,1026
 40127cc:	18decb04 	addi	r3,r3,31532
 40127d0:	1885883a 	add	r2,r3,r2
 40127d4:	a8c0040c 	andi	r3,r21,16
 40127d8:	12400017 	ldw	r9,0(r2)
 40127dc:	12000117 	ldw	r8,4(r2)
 40127e0:	18037926 	beq	r3,zero,40135c8 <_dtoa_r+0x11a0>
 40127e4:	008100b4 	movhi	r2,1026
 40127e8:	109ec104 	addi	r2,r2,31492
 40127ec:	11800817 	ldw	r6,32(r2)
 40127f0:	11c00917 	ldw	r7,36(r2)
 40127f4:	9009883a 	mov	r4,r18
 40127f8:	980b883a 	mov	r5,r19
 40127fc:	da001715 	stw	r8,92(sp)
 4012800:	da401615 	stw	r9,88(sp)
 4012804:	4019e480 	call	4019e48 <__divdf3>
 4012808:	da001717 	ldw	r8,92(sp)
 401280c:	da401617 	ldw	r9,88(sp)
 4012810:	ad4003cc 	andi	r21,r21,15
 4012814:	040000c4 	movi	r16,3
 4012818:	1023883a 	mov	r17,r2
 401281c:	1829883a 	mov	r20,r3
 4012820:	a8001126 	beq	r21,zero,4012868 <_dtoa_r+0x440>
 4012824:	05c100b4 	movhi	r23,1026
 4012828:	bddec104 	addi	r23,r23,31492
 401282c:	4805883a 	mov	r2,r9
 4012830:	4007883a 	mov	r3,r8
 4012834:	a980004c 	andi	r6,r21,1
 4012838:	1009883a 	mov	r4,r2
 401283c:	a82bd07a 	srai	r21,r21,1
 4012840:	180b883a 	mov	r5,r3
 4012844:	30000426 	beq	r6,zero,4012858 <_dtoa_r+0x430>
 4012848:	b9800017 	ldw	r6,0(r23)
 401284c:	b9c00117 	ldw	r7,4(r23)
 4012850:	84000044 	addi	r16,r16,1
 4012854:	401aa700 	call	401aa70 <__muldf3>
 4012858:	bdc00204 	addi	r23,r23,8
 401285c:	a83ff51e 	bne	r21,zero,4012834 <__alt_mem_onchip_memory2_0+0xfc011594>
 4012860:	1013883a 	mov	r9,r2
 4012864:	1811883a 	mov	r8,r3
 4012868:	480d883a 	mov	r6,r9
 401286c:	400f883a 	mov	r7,r8
 4012870:	8809883a 	mov	r4,r17
 4012874:	a00b883a 	mov	r5,r20
 4012878:	4019e480 	call	4019e48 <__divdf3>
 401287c:	d8800f15 	stw	r2,60(sp)
 4012880:	d8c01015 	stw	r3,64(sp)
 4012884:	d8c00e17 	ldw	r3,56(sp)
 4012888:	18000626 	beq	r3,zero,40128a4 <_dtoa_r+0x47c>
 401288c:	d9000f17 	ldw	r4,60(sp)
 4012890:	d9401017 	ldw	r5,64(sp)
 4012894:	000d883a 	mov	r6,zero
 4012898:	01cffc34 	movhi	r7,16368
 401289c:	401a97c0 	call	401a97c <__ledf2>
 40128a0:	10040b16 	blt	r2,zero,40138d0 <_dtoa_r+0x14a8>
 40128a4:	8009883a 	mov	r4,r16
 40128a8:	401bc580 	call	401bc58 <__floatsidf>
 40128ac:	d9800f17 	ldw	r6,60(sp)
 40128b0:	d9c01017 	ldw	r7,64(sp)
 40128b4:	1009883a 	mov	r4,r2
 40128b8:	180b883a 	mov	r5,r3
 40128bc:	401aa700 	call	401aa70 <__muldf3>
 40128c0:	000d883a 	mov	r6,zero
 40128c4:	01d00734 	movhi	r7,16412
 40128c8:	1009883a 	mov	r4,r2
 40128cc:	180b883a 	mov	r5,r3
 40128d0:	401959c0 	call	401959c <__adddf3>
 40128d4:	1021883a 	mov	r16,r2
 40128d8:	d8800617 	ldw	r2,24(sp)
 40128dc:	047f3034 	movhi	r17,64704
 40128e0:	1c63883a 	add	r17,r3,r17
 40128e4:	10031826 	beq	r2,zero,4013548 <_dtoa_r+0x1120>
 40128e8:	d8c00517 	ldw	r3,20(sp)
 40128ec:	db000617 	ldw	r12,24(sp)
 40128f0:	d8c01315 	stw	r3,76(sp)
 40128f4:	d9000b17 	ldw	r4,44(sp)
 40128f8:	20038f26 	beq	r4,zero,4013738 <_dtoa_r+0x1310>
 40128fc:	60bfffc4 	addi	r2,r12,-1
 4012900:	100490fa 	slli	r2,r2,3
 4012904:	00c100b4 	movhi	r3,1026
 4012908:	18decb04 	addi	r3,r3,31532
 401290c:	1885883a 	add	r2,r3,r2
 4012910:	11800017 	ldw	r6,0(r2)
 4012914:	11c00117 	ldw	r7,4(r2)
 4012918:	d8800717 	ldw	r2,28(sp)
 401291c:	0009883a 	mov	r4,zero
 4012920:	014ff834 	movhi	r5,16352
 4012924:	db001615 	stw	r12,88(sp)
 4012928:	15c00044 	addi	r23,r2,1
 401292c:	4019e480 	call	4019e48 <__divdf3>
 4012930:	800d883a 	mov	r6,r16
 4012934:	880f883a 	mov	r7,r17
 4012938:	1009883a 	mov	r4,r2
 401293c:	180b883a 	mov	r5,r3
 4012940:	401b2dc0 	call	401b2dc <__subdf3>
 4012944:	d9401017 	ldw	r5,64(sp)
 4012948:	d9000f17 	ldw	r4,60(sp)
 401294c:	102b883a 	mov	r21,r2
 4012950:	d8c01215 	stw	r3,72(sp)
 4012954:	401bbd80 	call	401bbd8 <__fixdfsi>
 4012958:	1009883a 	mov	r4,r2
 401295c:	1029883a 	mov	r20,r2
 4012960:	401bc580 	call	401bc58 <__floatsidf>
 4012964:	d9000f17 	ldw	r4,60(sp)
 4012968:	d9401017 	ldw	r5,64(sp)
 401296c:	100d883a 	mov	r6,r2
 4012970:	180f883a 	mov	r7,r3
 4012974:	401b2dc0 	call	401b2dc <__subdf3>
 4012978:	1823883a 	mov	r17,r3
 401297c:	d8c00717 	ldw	r3,28(sp)
 4012980:	d9401217 	ldw	r5,72(sp)
 4012984:	a2000c04 	addi	r8,r20,48
 4012988:	1021883a 	mov	r16,r2
 401298c:	1a000005 	stb	r8,0(r3)
 4012990:	800d883a 	mov	r6,r16
 4012994:	880f883a 	mov	r7,r17
 4012998:	a809883a 	mov	r4,r21
 401299c:	4029883a 	mov	r20,r8
 40129a0:	401a8a00 	call	401a8a0 <__gedf2>
 40129a4:	00841d16 	blt	zero,r2,4013a1c <_dtoa_r+0x15f4>
 40129a8:	800d883a 	mov	r6,r16
 40129ac:	880f883a 	mov	r7,r17
 40129b0:	0009883a 	mov	r4,zero
 40129b4:	014ffc34 	movhi	r5,16368
 40129b8:	401b2dc0 	call	401b2dc <__subdf3>
 40129bc:	d9401217 	ldw	r5,72(sp)
 40129c0:	100d883a 	mov	r6,r2
 40129c4:	180f883a 	mov	r7,r3
 40129c8:	a809883a 	mov	r4,r21
 40129cc:	401a8a00 	call	401a8a0 <__gedf2>
 40129d0:	db001617 	ldw	r12,88(sp)
 40129d4:	00840e16 	blt	zero,r2,4013a10 <_dtoa_r+0x15e8>
 40129d8:	00800044 	movi	r2,1
 40129dc:	13006b0e 	bge	r2,r12,4012b8c <_dtoa_r+0x764>
 40129e0:	d9000717 	ldw	r4,28(sp)
 40129e4:	dd800f15 	stw	r22,60(sp)
 40129e8:	dcc01015 	stw	r19,64(sp)
 40129ec:	2319883a 	add	r12,r4,r12
 40129f0:	dcc01217 	ldw	r19,72(sp)
 40129f4:	602d883a 	mov	r22,r12
 40129f8:	dc801215 	stw	r18,72(sp)
 40129fc:	b825883a 	mov	r18,r23
 4012a00:	00000906 	br	4012a28 <_dtoa_r+0x600>
 4012a04:	401b2dc0 	call	401b2dc <__subdf3>
 4012a08:	a80d883a 	mov	r6,r21
 4012a0c:	980f883a 	mov	r7,r19
 4012a10:	1009883a 	mov	r4,r2
 4012a14:	180b883a 	mov	r5,r3
 4012a18:	401a97c0 	call	401a97c <__ledf2>
 4012a1c:	1003e816 	blt	r2,zero,40139c0 <_dtoa_r+0x1598>
 4012a20:	b825883a 	mov	r18,r23
 4012a24:	bd83e926 	beq	r23,r22,40139cc <_dtoa_r+0x15a4>
 4012a28:	a809883a 	mov	r4,r21
 4012a2c:	980b883a 	mov	r5,r19
 4012a30:	000d883a 	mov	r6,zero
 4012a34:	01d00934 	movhi	r7,16420
 4012a38:	401aa700 	call	401aa70 <__muldf3>
 4012a3c:	000d883a 	mov	r6,zero
 4012a40:	01d00934 	movhi	r7,16420
 4012a44:	8009883a 	mov	r4,r16
 4012a48:	880b883a 	mov	r5,r17
 4012a4c:	102b883a 	mov	r21,r2
 4012a50:	1827883a 	mov	r19,r3
 4012a54:	401aa700 	call	401aa70 <__muldf3>
 4012a58:	180b883a 	mov	r5,r3
 4012a5c:	1009883a 	mov	r4,r2
 4012a60:	1821883a 	mov	r16,r3
 4012a64:	1023883a 	mov	r17,r2
 4012a68:	401bbd80 	call	401bbd8 <__fixdfsi>
 4012a6c:	1009883a 	mov	r4,r2
 4012a70:	1029883a 	mov	r20,r2
 4012a74:	401bc580 	call	401bc58 <__floatsidf>
 4012a78:	8809883a 	mov	r4,r17
 4012a7c:	800b883a 	mov	r5,r16
 4012a80:	100d883a 	mov	r6,r2
 4012a84:	180f883a 	mov	r7,r3
 4012a88:	401b2dc0 	call	401b2dc <__subdf3>
 4012a8c:	a5000c04 	addi	r20,r20,48
 4012a90:	a80d883a 	mov	r6,r21
 4012a94:	980f883a 	mov	r7,r19
 4012a98:	1009883a 	mov	r4,r2
 4012a9c:	180b883a 	mov	r5,r3
 4012aa0:	95000005 	stb	r20,0(r18)
 4012aa4:	1021883a 	mov	r16,r2
 4012aa8:	1823883a 	mov	r17,r3
 4012aac:	401a97c0 	call	401a97c <__ledf2>
 4012ab0:	bdc00044 	addi	r23,r23,1
 4012ab4:	800d883a 	mov	r6,r16
 4012ab8:	880f883a 	mov	r7,r17
 4012abc:	0009883a 	mov	r4,zero
 4012ac0:	014ffc34 	movhi	r5,16368
 4012ac4:	103fcf0e 	bge	r2,zero,4012a04 <__alt_mem_onchip_memory2_0+0xfc011764>
 4012ac8:	d8c01317 	ldw	r3,76(sp)
 4012acc:	d8c00515 	stw	r3,20(sp)
 4012ad0:	d9400917 	ldw	r5,36(sp)
 4012ad4:	e009883a 	mov	r4,fp
 4012ad8:	401510c0 	call	401510c <_Bfree>
 4012adc:	d9000517 	ldw	r4,20(sp)
 4012ae0:	d9802317 	ldw	r6,140(sp)
 4012ae4:	d9c02517 	ldw	r7,148(sp)
 4012ae8:	b8000005 	stb	zero,0(r23)
 4012aec:	20800044 	addi	r2,r4,1
 4012af0:	30800015 	stw	r2,0(r6)
 4012af4:	3802aa26 	beq	r7,zero,40135a0 <_dtoa_r+0x1178>
 4012af8:	3dc00015 	stw	r23,0(r7)
 4012afc:	d8800717 	ldw	r2,28(sp)
 4012b00:	003e7906 	br	40124e8 <__alt_mem_onchip_memory2_0+0xfc011248>
 4012b04:	00800434 	movhi	r2,16
 4012b08:	10bfffc4 	addi	r2,r2,-1
 4012b0c:	88a2703a 	and	r17,r17,r2
 4012b10:	883e851e 	bne	r17,zero,4012528 <__alt_mem_onchip_memory2_0+0xfc011288>
 4012b14:	008100b4 	movhi	r2,1026
 4012b18:	109ead04 	addi	r2,r2,31412
 4012b1c:	003e8406 	br	4012530 <__alt_mem_onchip_memory2_0+0xfc011290>
 4012b20:	10c00204 	addi	r3,r2,8
 4012b24:	003e8706 	br	4012544 <__alt_mem_onchip_memory2_0+0xfc0112a4>
 4012b28:	01400434 	movhi	r5,16
 4012b2c:	297fffc4 	addi	r5,r5,-1
 4012b30:	994a703a 	and	r5,r19,r5
 4012b34:	9009883a 	mov	r4,r18
 4012b38:	843f0044 	addi	r16,r16,-1023
 4012b3c:	294ffc34 	orhi	r5,r5,16368
 4012b40:	dd800217 	ldw	r22,8(sp)
 4012b44:	d8001115 	stw	zero,68(sp)
 4012b48:	003ea506 	br	40125e0 <__alt_mem_onchip_memory2_0+0xfc011340>
 4012b4c:	008100b4 	movhi	r2,1026
 4012b50:	109ea404 	addi	r2,r2,31376
 4012b54:	003e6406 	br	40124e8 <__alt_mem_onchip_memory2_0+0xfc011248>
 4012b58:	e0001115 	stw	zero,68(fp)
 4012b5c:	000b883a 	mov	r5,zero
 4012b60:	e009883a 	mov	r4,fp
 4012b64:	40150640 	call	4015064 <_Balloc>
 4012b68:	01bfffc4 	movi	r6,-1
 4012b6c:	01c00044 	movi	r7,1
 4012b70:	d8800715 	stw	r2,28(sp)
 4012b74:	d9800c15 	stw	r6,48(sp)
 4012b78:	e0801015 	stw	r2,64(fp)
 4012b7c:	d8000315 	stw	zero,12(sp)
 4012b80:	d9c00b15 	stw	r7,44(sp)
 4012b84:	d9800615 	stw	r6,24(sp)
 4012b88:	d8002215 	stw	zero,136(sp)
 4012b8c:	d8800117 	ldw	r2,4(sp)
 4012b90:	10008916 	blt	r2,zero,4012db8 <_dtoa_r+0x990>
 4012b94:	d9000517 	ldw	r4,20(sp)
 4012b98:	00c00384 	movi	r3,14
 4012b9c:	19008616 	blt	r3,r4,4012db8 <_dtoa_r+0x990>
 4012ba0:	200490fa 	slli	r2,r4,3
 4012ba4:	00c100b4 	movhi	r3,1026
 4012ba8:	d9802217 	ldw	r6,136(sp)
 4012bac:	18decb04 	addi	r3,r3,31532
 4012bb0:	1885883a 	add	r2,r3,r2
 4012bb4:	14000017 	ldw	r16,0(r2)
 4012bb8:	14400117 	ldw	r17,4(r2)
 4012bbc:	30016316 	blt	r6,zero,401314c <_dtoa_r+0xd24>
 4012bc0:	800d883a 	mov	r6,r16
 4012bc4:	880f883a 	mov	r7,r17
 4012bc8:	9009883a 	mov	r4,r18
 4012bcc:	980b883a 	mov	r5,r19
 4012bd0:	4019e480 	call	4019e48 <__divdf3>
 4012bd4:	180b883a 	mov	r5,r3
 4012bd8:	1009883a 	mov	r4,r2
 4012bdc:	401bbd80 	call	401bbd8 <__fixdfsi>
 4012be0:	1009883a 	mov	r4,r2
 4012be4:	102b883a 	mov	r21,r2
 4012be8:	401bc580 	call	401bc58 <__floatsidf>
 4012bec:	800d883a 	mov	r6,r16
 4012bf0:	880f883a 	mov	r7,r17
 4012bf4:	1009883a 	mov	r4,r2
 4012bf8:	180b883a 	mov	r5,r3
 4012bfc:	401aa700 	call	401aa70 <__muldf3>
 4012c00:	100d883a 	mov	r6,r2
 4012c04:	180f883a 	mov	r7,r3
 4012c08:	9009883a 	mov	r4,r18
 4012c0c:	980b883a 	mov	r5,r19
 4012c10:	401b2dc0 	call	401b2dc <__subdf3>
 4012c14:	d9c00717 	ldw	r7,28(sp)
 4012c18:	1009883a 	mov	r4,r2
 4012c1c:	a8800c04 	addi	r2,r21,48
 4012c20:	38800005 	stb	r2,0(r7)
 4012c24:	3dc00044 	addi	r23,r7,1
 4012c28:	d9c00617 	ldw	r7,24(sp)
 4012c2c:	01800044 	movi	r6,1
 4012c30:	180b883a 	mov	r5,r3
 4012c34:	2005883a 	mov	r2,r4
 4012c38:	39803826 	beq	r7,r6,4012d1c <_dtoa_r+0x8f4>
 4012c3c:	000d883a 	mov	r6,zero
 4012c40:	01d00934 	movhi	r7,16420
 4012c44:	401aa700 	call	401aa70 <__muldf3>
 4012c48:	000d883a 	mov	r6,zero
 4012c4c:	000f883a 	mov	r7,zero
 4012c50:	1009883a 	mov	r4,r2
 4012c54:	180b883a 	mov	r5,r3
 4012c58:	1025883a 	mov	r18,r2
 4012c5c:	1827883a 	mov	r19,r3
 4012c60:	401a8180 	call	401a818 <__eqdf2>
 4012c64:	103f9a26 	beq	r2,zero,4012ad0 <__alt_mem_onchip_memory2_0+0xfc011830>
 4012c68:	d9c00617 	ldw	r7,24(sp)
 4012c6c:	d8c00717 	ldw	r3,28(sp)
 4012c70:	b829883a 	mov	r20,r23
 4012c74:	38bfffc4 	addi	r2,r7,-1
 4012c78:	18ad883a 	add	r22,r3,r2
 4012c7c:	00000a06 	br	4012ca8 <_dtoa_r+0x880>
 4012c80:	401aa700 	call	401aa70 <__muldf3>
 4012c84:	000d883a 	mov	r6,zero
 4012c88:	000f883a 	mov	r7,zero
 4012c8c:	1009883a 	mov	r4,r2
 4012c90:	180b883a 	mov	r5,r3
 4012c94:	1025883a 	mov	r18,r2
 4012c98:	1827883a 	mov	r19,r3
 4012c9c:	b829883a 	mov	r20,r23
 4012ca0:	401a8180 	call	401a818 <__eqdf2>
 4012ca4:	103f8a26 	beq	r2,zero,4012ad0 <__alt_mem_onchip_memory2_0+0xfc011830>
 4012ca8:	800d883a 	mov	r6,r16
 4012cac:	880f883a 	mov	r7,r17
 4012cb0:	9009883a 	mov	r4,r18
 4012cb4:	980b883a 	mov	r5,r19
 4012cb8:	4019e480 	call	4019e48 <__divdf3>
 4012cbc:	180b883a 	mov	r5,r3
 4012cc0:	1009883a 	mov	r4,r2
 4012cc4:	401bbd80 	call	401bbd8 <__fixdfsi>
 4012cc8:	1009883a 	mov	r4,r2
 4012ccc:	102b883a 	mov	r21,r2
 4012cd0:	401bc580 	call	401bc58 <__floatsidf>
 4012cd4:	800d883a 	mov	r6,r16
 4012cd8:	880f883a 	mov	r7,r17
 4012cdc:	1009883a 	mov	r4,r2
 4012ce0:	180b883a 	mov	r5,r3
 4012ce4:	401aa700 	call	401aa70 <__muldf3>
 4012ce8:	100d883a 	mov	r6,r2
 4012cec:	180f883a 	mov	r7,r3
 4012cf0:	9009883a 	mov	r4,r18
 4012cf4:	980b883a 	mov	r5,r19
 4012cf8:	401b2dc0 	call	401b2dc <__subdf3>
 4012cfc:	aa000c04 	addi	r8,r21,48
 4012d00:	a2000005 	stb	r8,0(r20)
 4012d04:	000d883a 	mov	r6,zero
 4012d08:	01d00934 	movhi	r7,16420
 4012d0c:	1009883a 	mov	r4,r2
 4012d10:	180b883a 	mov	r5,r3
 4012d14:	a5c00044 	addi	r23,r20,1
 4012d18:	b53fd91e 	bne	r22,r20,4012c80 <__alt_mem_onchip_memory2_0+0xfc0119e0>
 4012d1c:	100d883a 	mov	r6,r2
 4012d20:	180f883a 	mov	r7,r3
 4012d24:	1009883a 	mov	r4,r2
 4012d28:	180b883a 	mov	r5,r3
 4012d2c:	401959c0 	call	401959c <__adddf3>
 4012d30:	100d883a 	mov	r6,r2
 4012d34:	180f883a 	mov	r7,r3
 4012d38:	8009883a 	mov	r4,r16
 4012d3c:	880b883a 	mov	r5,r17
 4012d40:	1027883a 	mov	r19,r2
 4012d44:	1825883a 	mov	r18,r3
 4012d48:	401a97c0 	call	401a97c <__ledf2>
 4012d4c:	10000816 	blt	r2,zero,4012d70 <_dtoa_r+0x948>
 4012d50:	980d883a 	mov	r6,r19
 4012d54:	900f883a 	mov	r7,r18
 4012d58:	8009883a 	mov	r4,r16
 4012d5c:	880b883a 	mov	r5,r17
 4012d60:	401a8180 	call	401a818 <__eqdf2>
 4012d64:	103f5a1e 	bne	r2,zero,4012ad0 <__alt_mem_onchip_memory2_0+0xfc011830>
 4012d68:	ad40004c 	andi	r21,r21,1
 4012d6c:	a83f5826 	beq	r21,zero,4012ad0 <__alt_mem_onchip_memory2_0+0xfc011830>
 4012d70:	bd3fffc3 	ldbu	r20,-1(r23)
 4012d74:	b8bfffc4 	addi	r2,r23,-1
 4012d78:	1007883a 	mov	r3,r2
 4012d7c:	01400e44 	movi	r5,57
 4012d80:	d9800717 	ldw	r6,28(sp)
 4012d84:	00000506 	br	4012d9c <_dtoa_r+0x974>
 4012d88:	18ffffc4 	addi	r3,r3,-1
 4012d8c:	11824726 	beq	r2,r6,40136ac <_dtoa_r+0x1284>
 4012d90:	1d000003 	ldbu	r20,0(r3)
 4012d94:	102f883a 	mov	r23,r2
 4012d98:	10bfffc4 	addi	r2,r2,-1
 4012d9c:	a1003fcc 	andi	r4,r20,255
 4012da0:	2100201c 	xori	r4,r4,128
 4012da4:	213fe004 	addi	r4,r4,-128
 4012da8:	217ff726 	beq	r4,r5,4012d88 <__alt_mem_onchip_memory2_0+0xfc011ae8>
 4012dac:	a2000044 	addi	r8,r20,1
 4012db0:	12000005 	stb	r8,0(r2)
 4012db4:	003f4606 	br	4012ad0 <__alt_mem_onchip_memory2_0+0xfc011830>
 4012db8:	d9000b17 	ldw	r4,44(sp)
 4012dbc:	2000c826 	beq	r4,zero,40130e0 <_dtoa_r+0xcb8>
 4012dc0:	d9800317 	ldw	r6,12(sp)
 4012dc4:	00c00044 	movi	r3,1
 4012dc8:	1980f90e 	bge	r3,r6,40131b0 <_dtoa_r+0xd88>
 4012dcc:	d8800617 	ldw	r2,24(sp)
 4012dd0:	d8c00a17 	ldw	r3,40(sp)
 4012dd4:	157fffc4 	addi	r21,r2,-1
 4012dd8:	1d41f316 	blt	r3,r21,40135a8 <_dtoa_r+0x1180>
 4012ddc:	1d6bc83a 	sub	r21,r3,r21
 4012de0:	d9c00617 	ldw	r7,24(sp)
 4012de4:	3802aa16 	blt	r7,zero,4013890 <_dtoa_r+0x1468>
 4012de8:	dd000817 	ldw	r20,32(sp)
 4012dec:	d8800617 	ldw	r2,24(sp)
 4012df0:	d8c00817 	ldw	r3,32(sp)
 4012df4:	01400044 	movi	r5,1
 4012df8:	e009883a 	mov	r4,fp
 4012dfc:	1887883a 	add	r3,r3,r2
 4012e00:	d8c00815 	stw	r3,32(sp)
 4012e04:	b0ad883a 	add	r22,r22,r2
 4012e08:	40154980 	call	4015498 <__i2b>
 4012e0c:	1023883a 	mov	r17,r2
 4012e10:	a0000826 	beq	r20,zero,4012e34 <_dtoa_r+0xa0c>
 4012e14:	0580070e 	bge	zero,r22,4012e34 <_dtoa_r+0xa0c>
 4012e18:	a005883a 	mov	r2,r20
 4012e1c:	b500b916 	blt	r22,r20,4013104 <_dtoa_r+0xcdc>
 4012e20:	d9000817 	ldw	r4,32(sp)
 4012e24:	a0a9c83a 	sub	r20,r20,r2
 4012e28:	b0adc83a 	sub	r22,r22,r2
 4012e2c:	2089c83a 	sub	r4,r4,r2
 4012e30:	d9000815 	stw	r4,32(sp)
 4012e34:	d9800a17 	ldw	r6,40(sp)
 4012e38:	0181810e 	bge	zero,r6,4013440 <_dtoa_r+0x1018>
 4012e3c:	d9c00b17 	ldw	r7,44(sp)
 4012e40:	3800b326 	beq	r7,zero,4013110 <_dtoa_r+0xce8>
 4012e44:	a800b226 	beq	r21,zero,4013110 <_dtoa_r+0xce8>
 4012e48:	880b883a 	mov	r5,r17
 4012e4c:	a80d883a 	mov	r6,r21
 4012e50:	e009883a 	mov	r4,fp
 4012e54:	40157600 	call	4015760 <__pow5mult>
 4012e58:	d9800917 	ldw	r6,36(sp)
 4012e5c:	100b883a 	mov	r5,r2
 4012e60:	e009883a 	mov	r4,fp
 4012e64:	1023883a 	mov	r17,r2
 4012e68:	40154d40 	call	40154d4 <__multiply>
 4012e6c:	1021883a 	mov	r16,r2
 4012e70:	d8800a17 	ldw	r2,40(sp)
 4012e74:	d9400917 	ldw	r5,36(sp)
 4012e78:	e009883a 	mov	r4,fp
 4012e7c:	1545c83a 	sub	r2,r2,r21
 4012e80:	d8800a15 	stw	r2,40(sp)
 4012e84:	401510c0 	call	401510c <_Bfree>
 4012e88:	d8c00a17 	ldw	r3,40(sp)
 4012e8c:	18009f1e 	bne	r3,zero,401310c <_dtoa_r+0xce4>
 4012e90:	05c00044 	movi	r23,1
 4012e94:	e009883a 	mov	r4,fp
 4012e98:	b80b883a 	mov	r5,r23
 4012e9c:	40154980 	call	4015498 <__i2b>
 4012ea0:	d9000d17 	ldw	r4,52(sp)
 4012ea4:	102b883a 	mov	r21,r2
 4012ea8:	2000ce26 	beq	r4,zero,40131e4 <_dtoa_r+0xdbc>
 4012eac:	200d883a 	mov	r6,r4
 4012eb0:	100b883a 	mov	r5,r2
 4012eb4:	e009883a 	mov	r4,fp
 4012eb8:	40157600 	call	4015760 <__pow5mult>
 4012ebc:	d9800317 	ldw	r6,12(sp)
 4012ec0:	102b883a 	mov	r21,r2
 4012ec4:	b981810e 	bge	r23,r6,40134cc <_dtoa_r+0x10a4>
 4012ec8:	0027883a 	mov	r19,zero
 4012ecc:	a8800417 	ldw	r2,16(r21)
 4012ed0:	05c00804 	movi	r23,32
 4012ed4:	10800104 	addi	r2,r2,4
 4012ed8:	1085883a 	add	r2,r2,r2
 4012edc:	1085883a 	add	r2,r2,r2
 4012ee0:	a885883a 	add	r2,r21,r2
 4012ee4:	11000017 	ldw	r4,0(r2)
 4012ee8:	40153800 	call	4015380 <__hi0bits>
 4012eec:	b885c83a 	sub	r2,r23,r2
 4012ef0:	1585883a 	add	r2,r2,r22
 4012ef4:	108007cc 	andi	r2,r2,31
 4012ef8:	1000b326 	beq	r2,zero,40131c8 <_dtoa_r+0xda0>
 4012efc:	00c00804 	movi	r3,32
 4012f00:	1887c83a 	sub	r3,r3,r2
 4012f04:	01000104 	movi	r4,4
 4012f08:	20c2cd0e 	bge	r4,r3,4013a40 <_dtoa_r+0x1618>
 4012f0c:	00c00704 	movi	r3,28
 4012f10:	1885c83a 	sub	r2,r3,r2
 4012f14:	d8c00817 	ldw	r3,32(sp)
 4012f18:	a0a9883a 	add	r20,r20,r2
 4012f1c:	b0ad883a 	add	r22,r22,r2
 4012f20:	1887883a 	add	r3,r3,r2
 4012f24:	d8c00815 	stw	r3,32(sp)
 4012f28:	d9800817 	ldw	r6,32(sp)
 4012f2c:	0180040e 	bge	zero,r6,4012f40 <_dtoa_r+0xb18>
 4012f30:	800b883a 	mov	r5,r16
 4012f34:	e009883a 	mov	r4,fp
 4012f38:	40158a00 	call	40158a0 <__lshift>
 4012f3c:	1021883a 	mov	r16,r2
 4012f40:	0580050e 	bge	zero,r22,4012f58 <_dtoa_r+0xb30>
 4012f44:	a80b883a 	mov	r5,r21
 4012f48:	b00d883a 	mov	r6,r22
 4012f4c:	e009883a 	mov	r4,fp
 4012f50:	40158a00 	call	40158a0 <__lshift>
 4012f54:	102b883a 	mov	r21,r2
 4012f58:	d9c00e17 	ldw	r7,56(sp)
 4012f5c:	3801211e 	bne	r7,zero,40133e4 <_dtoa_r+0xfbc>
 4012f60:	d9800617 	ldw	r6,24(sp)
 4012f64:	0181380e 	bge	zero,r6,4013448 <_dtoa_r+0x1020>
 4012f68:	d8c00b17 	ldw	r3,44(sp)
 4012f6c:	1800ab1e 	bne	r3,zero,401321c <_dtoa_r+0xdf4>
 4012f70:	dc800717 	ldw	r18,28(sp)
 4012f74:	dcc00617 	ldw	r19,24(sp)
 4012f78:	9029883a 	mov	r20,r18
 4012f7c:	00000206 	br	4012f88 <_dtoa_r+0xb60>
 4012f80:	40151340 	call	4015134 <__multadd>
 4012f84:	1021883a 	mov	r16,r2
 4012f88:	a80b883a 	mov	r5,r21
 4012f8c:	8009883a 	mov	r4,r16
 4012f90:	40122000 	call	4012200 <quorem>
 4012f94:	10800c04 	addi	r2,r2,48
 4012f98:	90800005 	stb	r2,0(r18)
 4012f9c:	94800044 	addi	r18,r18,1
 4012fa0:	9507c83a 	sub	r3,r18,r20
 4012fa4:	000f883a 	mov	r7,zero
 4012fa8:	01800284 	movi	r6,10
 4012fac:	800b883a 	mov	r5,r16
 4012fb0:	e009883a 	mov	r4,fp
 4012fb4:	1cfff216 	blt	r3,r19,4012f80 <__alt_mem_onchip_memory2_0+0xfc011ce0>
 4012fb8:	1011883a 	mov	r8,r2
 4012fbc:	d8800617 	ldw	r2,24(sp)
 4012fc0:	0082370e 	bge	zero,r2,40138a0 <_dtoa_r+0x1478>
 4012fc4:	d9000717 	ldw	r4,28(sp)
 4012fc8:	0025883a 	mov	r18,zero
 4012fcc:	20af883a 	add	r23,r4,r2
 4012fd0:	01800044 	movi	r6,1
 4012fd4:	800b883a 	mov	r5,r16
 4012fd8:	e009883a 	mov	r4,fp
 4012fdc:	da001715 	stw	r8,92(sp)
 4012fe0:	40158a00 	call	40158a0 <__lshift>
 4012fe4:	a80b883a 	mov	r5,r21
 4012fe8:	1009883a 	mov	r4,r2
 4012fec:	d8800915 	stw	r2,36(sp)
 4012ff0:	40159e80 	call	40159e8 <__mcmp>
 4012ff4:	da001717 	ldw	r8,92(sp)
 4012ff8:	0081800e 	bge	zero,r2,40135fc <_dtoa_r+0x11d4>
 4012ffc:	b93fffc3 	ldbu	r4,-1(r23)
 4013000:	b8bfffc4 	addi	r2,r23,-1
 4013004:	1007883a 	mov	r3,r2
 4013008:	01800e44 	movi	r6,57
 401300c:	d9c00717 	ldw	r7,28(sp)
 4013010:	00000506 	br	4013028 <_dtoa_r+0xc00>
 4013014:	18ffffc4 	addi	r3,r3,-1
 4013018:	11c12326 	beq	r2,r7,40134a8 <_dtoa_r+0x1080>
 401301c:	19000003 	ldbu	r4,0(r3)
 4013020:	102f883a 	mov	r23,r2
 4013024:	10bfffc4 	addi	r2,r2,-1
 4013028:	21403fcc 	andi	r5,r4,255
 401302c:	2940201c 	xori	r5,r5,128
 4013030:	297fe004 	addi	r5,r5,-128
 4013034:	29bff726 	beq	r5,r6,4013014 <__alt_mem_onchip_memory2_0+0xfc011d74>
 4013038:	21000044 	addi	r4,r4,1
 401303c:	11000005 	stb	r4,0(r2)
 4013040:	a80b883a 	mov	r5,r21
 4013044:	e009883a 	mov	r4,fp
 4013048:	401510c0 	call	401510c <_Bfree>
 401304c:	883ea026 	beq	r17,zero,4012ad0 <__alt_mem_onchip_memory2_0+0xfc011830>
 4013050:	90000426 	beq	r18,zero,4013064 <_dtoa_r+0xc3c>
 4013054:	94400326 	beq	r18,r17,4013064 <_dtoa_r+0xc3c>
 4013058:	900b883a 	mov	r5,r18
 401305c:	e009883a 	mov	r4,fp
 4013060:	401510c0 	call	401510c <_Bfree>
 4013064:	880b883a 	mov	r5,r17
 4013068:	e009883a 	mov	r4,fp
 401306c:	401510c0 	call	401510c <_Bfree>
 4013070:	003e9706 	br	4012ad0 <__alt_mem_onchip_memory2_0+0xfc011830>
 4013074:	01800044 	movi	r6,1
 4013078:	d9800e15 	stw	r6,56(sp)
 401307c:	003d9606 	br	40126d8 <__alt_mem_onchip_memory2_0+0xfc011438>
 4013080:	d8800817 	ldw	r2,32(sp)
 4013084:	d8c00517 	ldw	r3,20(sp)
 4013088:	d8000d15 	stw	zero,52(sp)
 401308c:	10c5c83a 	sub	r2,r2,r3
 4013090:	00c9c83a 	sub	r4,zero,r3
 4013094:	d8800815 	stw	r2,32(sp)
 4013098:	d9000a15 	stw	r4,40(sp)
 401309c:	003d9706 	br	40126fc <__alt_mem_onchip_memory2_0+0xfc01145c>
 40130a0:	05adc83a 	sub	r22,zero,r22
 40130a4:	dd800815 	stw	r22,32(sp)
 40130a8:	002d883a 	mov	r22,zero
 40130ac:	003d8e06 	br	40126e8 <__alt_mem_onchip_memory2_0+0xfc011448>
 40130b0:	d9000517 	ldw	r4,20(sp)
 40130b4:	401bc580 	call	401bc58 <__floatsidf>
 40130b8:	100d883a 	mov	r6,r2
 40130bc:	180f883a 	mov	r7,r3
 40130c0:	a009883a 	mov	r4,r20
 40130c4:	880b883a 	mov	r5,r17
 40130c8:	401a8180 	call	401a818 <__eqdf2>
 40130cc:	103d7126 	beq	r2,zero,4012694 <__alt_mem_onchip_memory2_0+0xfc0113f4>
 40130d0:	d9c00517 	ldw	r7,20(sp)
 40130d4:	39ffffc4 	addi	r7,r7,-1
 40130d8:	d9c00515 	stw	r7,20(sp)
 40130dc:	003d6d06 	br	4012694 <__alt_mem_onchip_memory2_0+0xfc0113f4>
 40130e0:	dd400a17 	ldw	r21,40(sp)
 40130e4:	dd000817 	ldw	r20,32(sp)
 40130e8:	0023883a 	mov	r17,zero
 40130ec:	003f4806 	br	4012e10 <__alt_mem_onchip_memory2_0+0xfc011b70>
 40130f0:	10e3c83a 	sub	r17,r2,r3
 40130f4:	9448983a 	sll	r4,r18,r17
 40130f8:	003d3206 	br	40125c4 <__alt_mem_onchip_memory2_0+0xfc011324>
 40130fc:	d8000e15 	stw	zero,56(sp)
 4013100:	003d7506 	br	40126d8 <__alt_mem_onchip_memory2_0+0xfc011438>
 4013104:	b005883a 	mov	r2,r22
 4013108:	003f4506 	br	4012e20 <__alt_mem_onchip_memory2_0+0xfc011b80>
 401310c:	dc000915 	stw	r16,36(sp)
 4013110:	d9800a17 	ldw	r6,40(sp)
 4013114:	d9400917 	ldw	r5,36(sp)
 4013118:	e009883a 	mov	r4,fp
 401311c:	40157600 	call	4015760 <__pow5mult>
 4013120:	1021883a 	mov	r16,r2
 4013124:	003f5a06 	br	4012e90 <__alt_mem_onchip_memory2_0+0xfc011bf0>
 4013128:	01c00044 	movi	r7,1
 401312c:	d9c00b15 	stw	r7,44(sp)
 4013130:	d8802217 	ldw	r2,136(sp)
 4013134:	0081280e 	bge	zero,r2,40135d8 <_dtoa_r+0x11b0>
 4013138:	100d883a 	mov	r6,r2
 401313c:	1021883a 	mov	r16,r2
 4013140:	d8800c15 	stw	r2,48(sp)
 4013144:	d8800615 	stw	r2,24(sp)
 4013148:	003d8806 	br	401276c <__alt_mem_onchip_memory2_0+0xfc0114cc>
 401314c:	d8800617 	ldw	r2,24(sp)
 4013150:	00be9b16 	blt	zero,r2,4012bc0 <__alt_mem_onchip_memory2_0+0xfc011920>
 4013154:	10010f1e 	bne	r2,zero,4013594 <_dtoa_r+0x116c>
 4013158:	880b883a 	mov	r5,r17
 401315c:	000d883a 	mov	r6,zero
 4013160:	01d00534 	movhi	r7,16404
 4013164:	8009883a 	mov	r4,r16
 4013168:	401aa700 	call	401aa70 <__muldf3>
 401316c:	900d883a 	mov	r6,r18
 4013170:	980f883a 	mov	r7,r19
 4013174:	1009883a 	mov	r4,r2
 4013178:	180b883a 	mov	r5,r3
 401317c:	401a8a00 	call	401a8a0 <__gedf2>
 4013180:	002b883a 	mov	r21,zero
 4013184:	0023883a 	mov	r17,zero
 4013188:	1000bf16 	blt	r2,zero,4013488 <_dtoa_r+0x1060>
 401318c:	d9802217 	ldw	r6,136(sp)
 4013190:	ddc00717 	ldw	r23,28(sp)
 4013194:	018c303a 	nor	r6,zero,r6
 4013198:	d9800515 	stw	r6,20(sp)
 401319c:	a80b883a 	mov	r5,r21
 40131a0:	e009883a 	mov	r4,fp
 40131a4:	401510c0 	call	401510c <_Bfree>
 40131a8:	883e4926 	beq	r17,zero,4012ad0 <__alt_mem_onchip_memory2_0+0xfc011830>
 40131ac:	003fad06 	br	4013064 <__alt_mem_onchip_memory2_0+0xfc011dc4>
 40131b0:	d9c01117 	ldw	r7,68(sp)
 40131b4:	3801bc26 	beq	r7,zero,40138a8 <_dtoa_r+0x1480>
 40131b8:	10810cc4 	addi	r2,r2,1075
 40131bc:	dd400a17 	ldw	r21,40(sp)
 40131c0:	dd000817 	ldw	r20,32(sp)
 40131c4:	003f0a06 	br	4012df0 <__alt_mem_onchip_memory2_0+0xfc011b50>
 40131c8:	00800704 	movi	r2,28
 40131cc:	d9000817 	ldw	r4,32(sp)
 40131d0:	a0a9883a 	add	r20,r20,r2
 40131d4:	b0ad883a 	add	r22,r22,r2
 40131d8:	2089883a 	add	r4,r4,r2
 40131dc:	d9000815 	stw	r4,32(sp)
 40131e0:	003f5106 	br	4012f28 <__alt_mem_onchip_memory2_0+0xfc011c88>
 40131e4:	d8c00317 	ldw	r3,12(sp)
 40131e8:	b8c1fc0e 	bge	r23,r3,40139dc <_dtoa_r+0x15b4>
 40131ec:	0027883a 	mov	r19,zero
 40131f0:	b805883a 	mov	r2,r23
 40131f4:	003f3e06 	br	4012ef0 <__alt_mem_onchip_memory2_0+0xfc011c50>
 40131f8:	880b883a 	mov	r5,r17
 40131fc:	e009883a 	mov	r4,fp
 4013200:	000f883a 	mov	r7,zero
 4013204:	01800284 	movi	r6,10
 4013208:	40151340 	call	4015134 <__multadd>
 401320c:	d9000c17 	ldw	r4,48(sp)
 4013210:	1023883a 	mov	r17,r2
 4013214:	0102040e 	bge	zero,r4,4013a28 <_dtoa_r+0x1600>
 4013218:	d9000615 	stw	r4,24(sp)
 401321c:	0500050e 	bge	zero,r20,4013234 <_dtoa_r+0xe0c>
 4013220:	880b883a 	mov	r5,r17
 4013224:	a00d883a 	mov	r6,r20
 4013228:	e009883a 	mov	r4,fp
 401322c:	40158a00 	call	40158a0 <__lshift>
 4013230:	1023883a 	mov	r17,r2
 4013234:	9801241e 	bne	r19,zero,40136c8 <_dtoa_r+0x12a0>
 4013238:	8829883a 	mov	r20,r17
 401323c:	d9000617 	ldw	r4,24(sp)
 4013240:	dcc00717 	ldw	r19,28(sp)
 4013244:	9480004c 	andi	r18,r18,1
 4013248:	20bfffc4 	addi	r2,r4,-1
 401324c:	9885883a 	add	r2,r19,r2
 4013250:	d8800415 	stw	r2,16(sp)
 4013254:	dc800615 	stw	r18,24(sp)
 4013258:	a80b883a 	mov	r5,r21
 401325c:	8009883a 	mov	r4,r16
 4013260:	40122000 	call	4012200 <quorem>
 4013264:	880b883a 	mov	r5,r17
 4013268:	8009883a 	mov	r4,r16
 401326c:	102f883a 	mov	r23,r2
 4013270:	40159e80 	call	40159e8 <__mcmp>
 4013274:	a80b883a 	mov	r5,r21
 4013278:	a00d883a 	mov	r6,r20
 401327c:	e009883a 	mov	r4,fp
 4013280:	102d883a 	mov	r22,r2
 4013284:	4015a480 	call	4015a48 <__mdiff>
 4013288:	1007883a 	mov	r3,r2
 401328c:	10800317 	ldw	r2,12(r2)
 4013290:	bc800c04 	addi	r18,r23,48
 4013294:	180b883a 	mov	r5,r3
 4013298:	10004e1e 	bne	r2,zero,40133d4 <_dtoa_r+0xfac>
 401329c:	8009883a 	mov	r4,r16
 40132a0:	d8c01615 	stw	r3,88(sp)
 40132a4:	40159e80 	call	40159e8 <__mcmp>
 40132a8:	d8c01617 	ldw	r3,88(sp)
 40132ac:	e009883a 	mov	r4,fp
 40132b0:	d8801615 	stw	r2,88(sp)
 40132b4:	180b883a 	mov	r5,r3
 40132b8:	401510c0 	call	401510c <_Bfree>
 40132bc:	d8801617 	ldw	r2,88(sp)
 40132c0:	1000041e 	bne	r2,zero,40132d4 <_dtoa_r+0xeac>
 40132c4:	d9800317 	ldw	r6,12(sp)
 40132c8:	3000021e 	bne	r6,zero,40132d4 <_dtoa_r+0xeac>
 40132cc:	d8c00617 	ldw	r3,24(sp)
 40132d0:	18003726 	beq	r3,zero,40133b0 <_dtoa_r+0xf88>
 40132d4:	b0002016 	blt	r22,zero,4013358 <_dtoa_r+0xf30>
 40132d8:	b000041e 	bne	r22,zero,40132ec <_dtoa_r+0xec4>
 40132dc:	d9000317 	ldw	r4,12(sp)
 40132e0:	2000021e 	bne	r4,zero,40132ec <_dtoa_r+0xec4>
 40132e4:	d8c00617 	ldw	r3,24(sp)
 40132e8:	18001b26 	beq	r3,zero,4013358 <_dtoa_r+0xf30>
 40132ec:	00810716 	blt	zero,r2,401370c <_dtoa_r+0x12e4>
 40132f0:	d8c00417 	ldw	r3,16(sp)
 40132f4:	9d800044 	addi	r22,r19,1
 40132f8:	9c800005 	stb	r18,0(r19)
 40132fc:	b02f883a 	mov	r23,r22
 4013300:	98c10626 	beq	r19,r3,401371c <_dtoa_r+0x12f4>
 4013304:	800b883a 	mov	r5,r16
 4013308:	000f883a 	mov	r7,zero
 401330c:	01800284 	movi	r6,10
 4013310:	e009883a 	mov	r4,fp
 4013314:	40151340 	call	4015134 <__multadd>
 4013318:	1021883a 	mov	r16,r2
 401331c:	000f883a 	mov	r7,zero
 4013320:	01800284 	movi	r6,10
 4013324:	880b883a 	mov	r5,r17
 4013328:	e009883a 	mov	r4,fp
 401332c:	8d002526 	beq	r17,r20,40133c4 <_dtoa_r+0xf9c>
 4013330:	40151340 	call	4015134 <__multadd>
 4013334:	a00b883a 	mov	r5,r20
 4013338:	000f883a 	mov	r7,zero
 401333c:	01800284 	movi	r6,10
 4013340:	e009883a 	mov	r4,fp
 4013344:	1023883a 	mov	r17,r2
 4013348:	40151340 	call	4015134 <__multadd>
 401334c:	1029883a 	mov	r20,r2
 4013350:	b027883a 	mov	r19,r22
 4013354:	003fc006 	br	4013258 <__alt_mem_onchip_memory2_0+0xfc011fb8>
 4013358:	9011883a 	mov	r8,r18
 401335c:	00800e0e 	bge	zero,r2,4013398 <_dtoa_r+0xf70>
 4013360:	800b883a 	mov	r5,r16
 4013364:	01800044 	movi	r6,1
 4013368:	e009883a 	mov	r4,fp
 401336c:	da001715 	stw	r8,92(sp)
 4013370:	40158a00 	call	40158a0 <__lshift>
 4013374:	a80b883a 	mov	r5,r21
 4013378:	1009883a 	mov	r4,r2
 401337c:	1021883a 	mov	r16,r2
 4013380:	40159e80 	call	40159e8 <__mcmp>
 4013384:	da001717 	ldw	r8,92(sp)
 4013388:	0081960e 	bge	zero,r2,40139e4 <_dtoa_r+0x15bc>
 401338c:	00800e44 	movi	r2,57
 4013390:	40817026 	beq	r8,r2,4013954 <_dtoa_r+0x152c>
 4013394:	ba000c44 	addi	r8,r23,49
 4013398:	8825883a 	mov	r18,r17
 401339c:	9dc00044 	addi	r23,r19,1
 40133a0:	9a000005 	stb	r8,0(r19)
 40133a4:	a023883a 	mov	r17,r20
 40133a8:	dc000915 	stw	r16,36(sp)
 40133ac:	003f2406 	br	4013040 <__alt_mem_onchip_memory2_0+0xfc011da0>
 40133b0:	00800e44 	movi	r2,57
 40133b4:	9011883a 	mov	r8,r18
 40133b8:	90816626 	beq	r18,r2,4013954 <_dtoa_r+0x152c>
 40133bc:	05bff516 	blt	zero,r22,4013394 <__alt_mem_onchip_memory2_0+0xfc0120f4>
 40133c0:	003ff506 	br	4013398 <__alt_mem_onchip_memory2_0+0xfc0120f8>
 40133c4:	40151340 	call	4015134 <__multadd>
 40133c8:	1023883a 	mov	r17,r2
 40133cc:	1029883a 	mov	r20,r2
 40133d0:	003fdf06 	br	4013350 <__alt_mem_onchip_memory2_0+0xfc0120b0>
 40133d4:	e009883a 	mov	r4,fp
 40133d8:	401510c0 	call	401510c <_Bfree>
 40133dc:	00800044 	movi	r2,1
 40133e0:	003fbc06 	br	40132d4 <__alt_mem_onchip_memory2_0+0xfc012034>
 40133e4:	a80b883a 	mov	r5,r21
 40133e8:	8009883a 	mov	r4,r16
 40133ec:	40159e80 	call	40159e8 <__mcmp>
 40133f0:	103edb0e 	bge	r2,zero,4012f60 <__alt_mem_onchip_memory2_0+0xfc011cc0>
 40133f4:	800b883a 	mov	r5,r16
 40133f8:	000f883a 	mov	r7,zero
 40133fc:	01800284 	movi	r6,10
 4013400:	e009883a 	mov	r4,fp
 4013404:	40151340 	call	4015134 <__multadd>
 4013408:	1021883a 	mov	r16,r2
 401340c:	d8800517 	ldw	r2,20(sp)
 4013410:	d8c00b17 	ldw	r3,44(sp)
 4013414:	10bfffc4 	addi	r2,r2,-1
 4013418:	d8800515 	stw	r2,20(sp)
 401341c:	183f761e 	bne	r3,zero,40131f8 <__alt_mem_onchip_memory2_0+0xfc011f58>
 4013420:	d9000c17 	ldw	r4,48(sp)
 4013424:	0101730e 	bge	zero,r4,40139f4 <_dtoa_r+0x15cc>
 4013428:	d9000615 	stw	r4,24(sp)
 401342c:	003ed006 	br	4012f70 <__alt_mem_onchip_memory2_0+0xfc011cd0>
 4013430:	00800084 	movi	r2,2
 4013434:	3081861e 	bne	r6,r2,4013a50 <_dtoa_r+0x1628>
 4013438:	d8000b15 	stw	zero,44(sp)
 401343c:	003f3c06 	br	4013130 <__alt_mem_onchip_memory2_0+0xfc011e90>
 4013440:	dc000917 	ldw	r16,36(sp)
 4013444:	003e9206 	br	4012e90 <__alt_mem_onchip_memory2_0+0xfc011bf0>
 4013448:	d9c00317 	ldw	r7,12(sp)
 401344c:	00800084 	movi	r2,2
 4013450:	11fec50e 	bge	r2,r7,4012f68 <__alt_mem_onchip_memory2_0+0xfc011cc8>
 4013454:	d9000617 	ldw	r4,24(sp)
 4013458:	20013c1e 	bne	r4,zero,401394c <_dtoa_r+0x1524>
 401345c:	a80b883a 	mov	r5,r21
 4013460:	000f883a 	mov	r7,zero
 4013464:	01800144 	movi	r6,5
 4013468:	e009883a 	mov	r4,fp
 401346c:	40151340 	call	4015134 <__multadd>
 4013470:	100b883a 	mov	r5,r2
 4013474:	8009883a 	mov	r4,r16
 4013478:	102b883a 	mov	r21,r2
 401347c:	40159e80 	call	40159e8 <__mcmp>
 4013480:	dc000915 	stw	r16,36(sp)
 4013484:	00bf410e 	bge	zero,r2,401318c <__alt_mem_onchip_memory2_0+0xfc011eec>
 4013488:	d9c00717 	ldw	r7,28(sp)
 401348c:	00800c44 	movi	r2,49
 4013490:	38800005 	stb	r2,0(r7)
 4013494:	d8800517 	ldw	r2,20(sp)
 4013498:	3dc00044 	addi	r23,r7,1
 401349c:	10800044 	addi	r2,r2,1
 40134a0:	d8800515 	stw	r2,20(sp)
 40134a4:	003f3d06 	br	401319c <__alt_mem_onchip_memory2_0+0xfc011efc>
 40134a8:	d9800517 	ldw	r6,20(sp)
 40134ac:	d9c00717 	ldw	r7,28(sp)
 40134b0:	00800c44 	movi	r2,49
 40134b4:	31800044 	addi	r6,r6,1
 40134b8:	d9800515 	stw	r6,20(sp)
 40134bc:	38800005 	stb	r2,0(r7)
 40134c0:	003edf06 	br	4013040 <__alt_mem_onchip_memory2_0+0xfc011da0>
 40134c4:	d8000b15 	stw	zero,44(sp)
 40134c8:	003c9f06 	br	4012748 <__alt_mem_onchip_memory2_0+0xfc0114a8>
 40134cc:	903e7e1e 	bne	r18,zero,4012ec8 <__alt_mem_onchip_memory2_0+0xfc011c28>
 40134d0:	00800434 	movhi	r2,16
 40134d4:	10bfffc4 	addi	r2,r2,-1
 40134d8:	9884703a 	and	r2,r19,r2
 40134dc:	1000ea1e 	bne	r2,zero,4013888 <_dtoa_r+0x1460>
 40134e0:	9cdffc2c 	andhi	r19,r19,32752
 40134e4:	9800e826 	beq	r19,zero,4013888 <_dtoa_r+0x1460>
 40134e8:	d9c00817 	ldw	r7,32(sp)
 40134ec:	b5800044 	addi	r22,r22,1
 40134f0:	04c00044 	movi	r19,1
 40134f4:	39c00044 	addi	r7,r7,1
 40134f8:	d9c00815 	stw	r7,32(sp)
 40134fc:	d8800d17 	ldw	r2,52(sp)
 4013500:	103e721e 	bne	r2,zero,4012ecc <__alt_mem_onchip_memory2_0+0xfc011c2c>
 4013504:	00800044 	movi	r2,1
 4013508:	003e7906 	br	4012ef0 <__alt_mem_onchip_memory2_0+0xfc011c50>
 401350c:	8009883a 	mov	r4,r16
 4013510:	401bc580 	call	401bc58 <__floatsidf>
 4013514:	d9800f17 	ldw	r6,60(sp)
 4013518:	d9c01017 	ldw	r7,64(sp)
 401351c:	1009883a 	mov	r4,r2
 4013520:	180b883a 	mov	r5,r3
 4013524:	401aa700 	call	401aa70 <__muldf3>
 4013528:	000d883a 	mov	r6,zero
 401352c:	01d00734 	movhi	r7,16412
 4013530:	1009883a 	mov	r4,r2
 4013534:	180b883a 	mov	r5,r3
 4013538:	401959c0 	call	401959c <__adddf3>
 401353c:	047f3034 	movhi	r17,64704
 4013540:	1021883a 	mov	r16,r2
 4013544:	1c63883a 	add	r17,r3,r17
 4013548:	d9000f17 	ldw	r4,60(sp)
 401354c:	d9401017 	ldw	r5,64(sp)
 4013550:	000d883a 	mov	r6,zero
 4013554:	01d00534 	movhi	r7,16404
 4013558:	401b2dc0 	call	401b2dc <__subdf3>
 401355c:	800d883a 	mov	r6,r16
 4013560:	880f883a 	mov	r7,r17
 4013564:	1009883a 	mov	r4,r2
 4013568:	180b883a 	mov	r5,r3
 401356c:	102b883a 	mov	r21,r2
 4013570:	1829883a 	mov	r20,r3
 4013574:	401a8a00 	call	401a8a0 <__gedf2>
 4013578:	00806c16 	blt	zero,r2,401372c <_dtoa_r+0x1304>
 401357c:	89e0003c 	xorhi	r7,r17,32768
 4013580:	800d883a 	mov	r6,r16
 4013584:	a809883a 	mov	r4,r21
 4013588:	a00b883a 	mov	r5,r20
 401358c:	401a97c0 	call	401a97c <__ledf2>
 4013590:	103d7e0e 	bge	r2,zero,4012b8c <__alt_mem_onchip_memory2_0+0xfc0118ec>
 4013594:	002b883a 	mov	r21,zero
 4013598:	0023883a 	mov	r17,zero
 401359c:	003efb06 	br	401318c <__alt_mem_onchip_memory2_0+0xfc011eec>
 40135a0:	d8800717 	ldw	r2,28(sp)
 40135a4:	003bd006 	br	40124e8 <__alt_mem_onchip_memory2_0+0xfc011248>
 40135a8:	d9000a17 	ldw	r4,40(sp)
 40135ac:	d9800d17 	ldw	r6,52(sp)
 40135b0:	dd400a15 	stw	r21,40(sp)
 40135b4:	a905c83a 	sub	r2,r21,r4
 40135b8:	308d883a 	add	r6,r6,r2
 40135bc:	d9800d15 	stw	r6,52(sp)
 40135c0:	002b883a 	mov	r21,zero
 40135c4:	003e0606 	br	4012de0 <__alt_mem_onchip_memory2_0+0xfc011b40>
 40135c8:	9023883a 	mov	r17,r18
 40135cc:	9829883a 	mov	r20,r19
 40135d0:	04000084 	movi	r16,2
 40135d4:	003c9206 	br	4012820 <__alt_mem_onchip_memory2_0+0xfc011580>
 40135d8:	04000044 	movi	r16,1
 40135dc:	dc000c15 	stw	r16,48(sp)
 40135e0:	dc000615 	stw	r16,24(sp)
 40135e4:	dc002215 	stw	r16,136(sp)
 40135e8:	e0001115 	stw	zero,68(fp)
 40135ec:	000b883a 	mov	r5,zero
 40135f0:	003c6906 	br	4012798 <__alt_mem_onchip_memory2_0+0xfc0114f8>
 40135f4:	3021883a 	mov	r16,r6
 40135f8:	003ffb06 	br	40135e8 <__alt_mem_onchip_memory2_0+0xfc012348>
 40135fc:	1000021e 	bne	r2,zero,4013608 <_dtoa_r+0x11e0>
 4013600:	4200004c 	andi	r8,r8,1
 4013604:	403e7d1e 	bne	r8,zero,4012ffc <__alt_mem_onchip_memory2_0+0xfc011d5c>
 4013608:	01000c04 	movi	r4,48
 401360c:	00000106 	br	4013614 <_dtoa_r+0x11ec>
 4013610:	102f883a 	mov	r23,r2
 4013614:	b8bfffc4 	addi	r2,r23,-1
 4013618:	10c00007 	ldb	r3,0(r2)
 401361c:	193ffc26 	beq	r3,r4,4013610 <__alt_mem_onchip_memory2_0+0xfc012370>
 4013620:	003e8706 	br	4013040 <__alt_mem_onchip_memory2_0+0xfc011da0>
 4013624:	d8800517 	ldw	r2,20(sp)
 4013628:	00a3c83a 	sub	r17,zero,r2
 401362c:	8800a426 	beq	r17,zero,40138c0 <_dtoa_r+0x1498>
 4013630:	888003cc 	andi	r2,r17,15
 4013634:	100490fa 	slli	r2,r2,3
 4013638:	00c100b4 	movhi	r3,1026
 401363c:	18decb04 	addi	r3,r3,31532
 4013640:	1885883a 	add	r2,r3,r2
 4013644:	11800017 	ldw	r6,0(r2)
 4013648:	11c00117 	ldw	r7,4(r2)
 401364c:	9009883a 	mov	r4,r18
 4013650:	980b883a 	mov	r5,r19
 4013654:	8823d13a 	srai	r17,r17,4
 4013658:	401aa700 	call	401aa70 <__muldf3>
 401365c:	d8800f15 	stw	r2,60(sp)
 4013660:	d8c01015 	stw	r3,64(sp)
 4013664:	8800e826 	beq	r17,zero,4013a08 <_dtoa_r+0x15e0>
 4013668:	050100b4 	movhi	r20,1026
 401366c:	a51ec104 	addi	r20,r20,31492
 4013670:	04000084 	movi	r16,2
 4013674:	8980004c 	andi	r6,r17,1
 4013678:	1009883a 	mov	r4,r2
 401367c:	8823d07a 	srai	r17,r17,1
 4013680:	180b883a 	mov	r5,r3
 4013684:	30000426 	beq	r6,zero,4013698 <_dtoa_r+0x1270>
 4013688:	a1800017 	ldw	r6,0(r20)
 401368c:	a1c00117 	ldw	r7,4(r20)
 4013690:	84000044 	addi	r16,r16,1
 4013694:	401aa700 	call	401aa70 <__muldf3>
 4013698:	a5000204 	addi	r20,r20,8
 401369c:	883ff51e 	bne	r17,zero,4013674 <__alt_mem_onchip_memory2_0+0xfc0123d4>
 40136a0:	d8800f15 	stw	r2,60(sp)
 40136a4:	d8c01015 	stw	r3,64(sp)
 40136a8:	003c7606 	br	4012884 <__alt_mem_onchip_memory2_0+0xfc0115e4>
 40136ac:	00c00c04 	movi	r3,48
 40136b0:	10c00005 	stb	r3,0(r2)
 40136b4:	d8c00517 	ldw	r3,20(sp)
 40136b8:	bd3fffc3 	ldbu	r20,-1(r23)
 40136bc:	18c00044 	addi	r3,r3,1
 40136c0:	d8c00515 	stw	r3,20(sp)
 40136c4:	003db906 	br	4012dac <__alt_mem_onchip_memory2_0+0xfc011b0c>
 40136c8:	89400117 	ldw	r5,4(r17)
 40136cc:	e009883a 	mov	r4,fp
 40136d0:	40150640 	call	4015064 <_Balloc>
 40136d4:	89800417 	ldw	r6,16(r17)
 40136d8:	89400304 	addi	r5,r17,12
 40136dc:	11000304 	addi	r4,r2,12
 40136e0:	31800084 	addi	r6,r6,2
 40136e4:	318d883a 	add	r6,r6,r6
 40136e8:	318d883a 	add	r6,r6,r6
 40136ec:	1027883a 	mov	r19,r2
 40136f0:	400f4540 	call	400f454 <memcpy>
 40136f4:	01800044 	movi	r6,1
 40136f8:	980b883a 	mov	r5,r19
 40136fc:	e009883a 	mov	r4,fp
 4013700:	40158a00 	call	40158a0 <__lshift>
 4013704:	1029883a 	mov	r20,r2
 4013708:	003ecc06 	br	401323c <__alt_mem_onchip_memory2_0+0xfc011f9c>
 401370c:	00800e44 	movi	r2,57
 4013710:	90809026 	beq	r18,r2,4013954 <_dtoa_r+0x152c>
 4013714:	92000044 	addi	r8,r18,1
 4013718:	003f1f06 	br	4013398 <__alt_mem_onchip_memory2_0+0xfc0120f8>
 401371c:	9011883a 	mov	r8,r18
 4013720:	8825883a 	mov	r18,r17
 4013724:	a023883a 	mov	r17,r20
 4013728:	003e2906 	br	4012fd0 <__alt_mem_onchip_memory2_0+0xfc011d30>
 401372c:	002b883a 	mov	r21,zero
 4013730:	0023883a 	mov	r17,zero
 4013734:	003f5406 	br	4013488 <__alt_mem_onchip_memory2_0+0xfc0121e8>
 4013738:	61bfffc4 	addi	r6,r12,-1
 401373c:	300490fa 	slli	r2,r6,3
 4013740:	00c100b4 	movhi	r3,1026
 4013744:	18decb04 	addi	r3,r3,31532
 4013748:	1885883a 	add	r2,r3,r2
 401374c:	11000017 	ldw	r4,0(r2)
 4013750:	11400117 	ldw	r5,4(r2)
 4013754:	d8800717 	ldw	r2,28(sp)
 4013758:	880f883a 	mov	r7,r17
 401375c:	d9801215 	stw	r6,72(sp)
 4013760:	800d883a 	mov	r6,r16
 4013764:	db001615 	stw	r12,88(sp)
 4013768:	15c00044 	addi	r23,r2,1
 401376c:	401aa700 	call	401aa70 <__muldf3>
 4013770:	d9401017 	ldw	r5,64(sp)
 4013774:	d9000f17 	ldw	r4,60(sp)
 4013778:	d8c01515 	stw	r3,84(sp)
 401377c:	d8801415 	stw	r2,80(sp)
 4013780:	401bbd80 	call	401bbd8 <__fixdfsi>
 4013784:	1009883a 	mov	r4,r2
 4013788:	1021883a 	mov	r16,r2
 401378c:	401bc580 	call	401bc58 <__floatsidf>
 4013790:	d9000f17 	ldw	r4,60(sp)
 4013794:	d9401017 	ldw	r5,64(sp)
 4013798:	100d883a 	mov	r6,r2
 401379c:	180f883a 	mov	r7,r3
 40137a0:	401b2dc0 	call	401b2dc <__subdf3>
 40137a4:	1829883a 	mov	r20,r3
 40137a8:	d8c00717 	ldw	r3,28(sp)
 40137ac:	84000c04 	addi	r16,r16,48
 40137b0:	1023883a 	mov	r17,r2
 40137b4:	1c000005 	stb	r16,0(r3)
 40137b8:	db001617 	ldw	r12,88(sp)
 40137bc:	00800044 	movi	r2,1
 40137c0:	60802226 	beq	r12,r2,401384c <_dtoa_r+0x1424>
 40137c4:	d9c00717 	ldw	r7,28(sp)
 40137c8:	8805883a 	mov	r2,r17
 40137cc:	b82b883a 	mov	r21,r23
 40137d0:	3b19883a 	add	r12,r7,r12
 40137d4:	6023883a 	mov	r17,r12
 40137d8:	a007883a 	mov	r3,r20
 40137dc:	dc800f15 	stw	r18,60(sp)
 40137e0:	000d883a 	mov	r6,zero
 40137e4:	01d00934 	movhi	r7,16420
 40137e8:	1009883a 	mov	r4,r2
 40137ec:	180b883a 	mov	r5,r3
 40137f0:	401aa700 	call	401aa70 <__muldf3>
 40137f4:	180b883a 	mov	r5,r3
 40137f8:	1009883a 	mov	r4,r2
 40137fc:	1829883a 	mov	r20,r3
 4013800:	1025883a 	mov	r18,r2
 4013804:	401bbd80 	call	401bbd8 <__fixdfsi>
 4013808:	1009883a 	mov	r4,r2
 401380c:	1021883a 	mov	r16,r2
 4013810:	401bc580 	call	401bc58 <__floatsidf>
 4013814:	100d883a 	mov	r6,r2
 4013818:	180f883a 	mov	r7,r3
 401381c:	9009883a 	mov	r4,r18
 4013820:	a00b883a 	mov	r5,r20
 4013824:	84000c04 	addi	r16,r16,48
 4013828:	401b2dc0 	call	401b2dc <__subdf3>
 401382c:	ad400044 	addi	r21,r21,1
 4013830:	ac3fffc5 	stb	r16,-1(r21)
 4013834:	ac7fea1e 	bne	r21,r17,40137e0 <__alt_mem_onchip_memory2_0+0xfc012540>
 4013838:	1023883a 	mov	r17,r2
 401383c:	d8801217 	ldw	r2,72(sp)
 4013840:	dc800f17 	ldw	r18,60(sp)
 4013844:	1829883a 	mov	r20,r3
 4013848:	b8af883a 	add	r23,r23,r2
 401384c:	d9001417 	ldw	r4,80(sp)
 4013850:	d9401517 	ldw	r5,84(sp)
 4013854:	000d883a 	mov	r6,zero
 4013858:	01cff834 	movhi	r7,16352
 401385c:	401959c0 	call	401959c <__adddf3>
 4013860:	880d883a 	mov	r6,r17
 4013864:	a00f883a 	mov	r7,r20
 4013868:	1009883a 	mov	r4,r2
 401386c:	180b883a 	mov	r5,r3
 4013870:	401a97c0 	call	401a97c <__ledf2>
 4013874:	10003e0e 	bge	r2,zero,4013970 <_dtoa_r+0x1548>
 4013878:	d9001317 	ldw	r4,76(sp)
 401387c:	bd3fffc3 	ldbu	r20,-1(r23)
 4013880:	d9000515 	stw	r4,20(sp)
 4013884:	003d3b06 	br	4012d74 <__alt_mem_onchip_memory2_0+0xfc011ad4>
 4013888:	0027883a 	mov	r19,zero
 401388c:	003f1b06 	br	40134fc <__alt_mem_onchip_memory2_0+0xfc01225c>
 4013890:	d8800817 	ldw	r2,32(sp)
 4013894:	11e9c83a 	sub	r20,r2,r7
 4013898:	0005883a 	mov	r2,zero
 401389c:	003d5406 	br	4012df0 <__alt_mem_onchip_memory2_0+0xfc011b50>
 40138a0:	00800044 	movi	r2,1
 40138a4:	003dc706 	br	4012fc4 <__alt_mem_onchip_memory2_0+0xfc011d24>
 40138a8:	d8c00217 	ldw	r3,8(sp)
 40138ac:	00800d84 	movi	r2,54
 40138b0:	dd400a17 	ldw	r21,40(sp)
 40138b4:	10c5c83a 	sub	r2,r2,r3
 40138b8:	dd000817 	ldw	r20,32(sp)
 40138bc:	003d4c06 	br	4012df0 <__alt_mem_onchip_memory2_0+0xfc011b50>
 40138c0:	dc800f15 	stw	r18,60(sp)
 40138c4:	dcc01015 	stw	r19,64(sp)
 40138c8:	04000084 	movi	r16,2
 40138cc:	003bed06 	br	4012884 <__alt_mem_onchip_memory2_0+0xfc0115e4>
 40138d0:	d9000617 	ldw	r4,24(sp)
 40138d4:	203f0d26 	beq	r4,zero,401350c <__alt_mem_onchip_memory2_0+0xfc01226c>
 40138d8:	d9800c17 	ldw	r6,48(sp)
 40138dc:	01bcab0e 	bge	zero,r6,4012b8c <__alt_mem_onchip_memory2_0+0xfc0118ec>
 40138e0:	d9401017 	ldw	r5,64(sp)
 40138e4:	d9000f17 	ldw	r4,60(sp)
 40138e8:	000d883a 	mov	r6,zero
 40138ec:	01d00934 	movhi	r7,16420
 40138f0:	401aa700 	call	401aa70 <__muldf3>
 40138f4:	81000044 	addi	r4,r16,1
 40138f8:	d8800f15 	stw	r2,60(sp)
 40138fc:	d8c01015 	stw	r3,64(sp)
 4013900:	401bc580 	call	401bc58 <__floatsidf>
 4013904:	d9800f17 	ldw	r6,60(sp)
 4013908:	d9c01017 	ldw	r7,64(sp)
 401390c:	1009883a 	mov	r4,r2
 4013910:	180b883a 	mov	r5,r3
 4013914:	401aa700 	call	401aa70 <__muldf3>
 4013918:	01d00734 	movhi	r7,16412
 401391c:	000d883a 	mov	r6,zero
 4013920:	1009883a 	mov	r4,r2
 4013924:	180b883a 	mov	r5,r3
 4013928:	401959c0 	call	401959c <__adddf3>
 401392c:	d9c00517 	ldw	r7,20(sp)
 4013930:	047f3034 	movhi	r17,64704
 4013934:	1021883a 	mov	r16,r2
 4013938:	39ffffc4 	addi	r7,r7,-1
 401393c:	d9c01315 	stw	r7,76(sp)
 4013940:	1c63883a 	add	r17,r3,r17
 4013944:	db000c17 	ldw	r12,48(sp)
 4013948:	003bea06 	br	40128f4 <__alt_mem_onchip_memory2_0+0xfc011654>
 401394c:	dc000915 	stw	r16,36(sp)
 4013950:	003e0e06 	br	401318c <__alt_mem_onchip_memory2_0+0xfc011eec>
 4013954:	01000e44 	movi	r4,57
 4013958:	8825883a 	mov	r18,r17
 401395c:	9dc00044 	addi	r23,r19,1
 4013960:	99000005 	stb	r4,0(r19)
 4013964:	a023883a 	mov	r17,r20
 4013968:	dc000915 	stw	r16,36(sp)
 401396c:	003da406 	br	4013000 <__alt_mem_onchip_memory2_0+0xfc011d60>
 4013970:	d9801417 	ldw	r6,80(sp)
 4013974:	d9c01517 	ldw	r7,84(sp)
 4013978:	0009883a 	mov	r4,zero
 401397c:	014ff834 	movhi	r5,16352
 4013980:	401b2dc0 	call	401b2dc <__subdf3>
 4013984:	880d883a 	mov	r6,r17
 4013988:	a00f883a 	mov	r7,r20
 401398c:	1009883a 	mov	r4,r2
 4013990:	180b883a 	mov	r5,r3
 4013994:	401a8a00 	call	401a8a0 <__gedf2>
 4013998:	00bc7c0e 	bge	zero,r2,4012b8c <__alt_mem_onchip_memory2_0+0xfc0118ec>
 401399c:	01000c04 	movi	r4,48
 40139a0:	00000106 	br	40139a8 <_dtoa_r+0x1580>
 40139a4:	102f883a 	mov	r23,r2
 40139a8:	b8bfffc4 	addi	r2,r23,-1
 40139ac:	10c00007 	ldb	r3,0(r2)
 40139b0:	193ffc26 	beq	r3,r4,40139a4 <__alt_mem_onchip_memory2_0+0xfc012704>
 40139b4:	d9801317 	ldw	r6,76(sp)
 40139b8:	d9800515 	stw	r6,20(sp)
 40139bc:	003c4406 	br	4012ad0 <__alt_mem_onchip_memory2_0+0xfc011830>
 40139c0:	d9801317 	ldw	r6,76(sp)
 40139c4:	d9800515 	stw	r6,20(sp)
 40139c8:	003cea06 	br	4012d74 <__alt_mem_onchip_memory2_0+0xfc011ad4>
 40139cc:	dd800f17 	ldw	r22,60(sp)
 40139d0:	dcc01017 	ldw	r19,64(sp)
 40139d4:	dc801217 	ldw	r18,72(sp)
 40139d8:	003c6c06 	br	4012b8c <__alt_mem_onchip_memory2_0+0xfc0118ec>
 40139dc:	903e031e 	bne	r18,zero,40131ec <__alt_mem_onchip_memory2_0+0xfc011f4c>
 40139e0:	003ebb06 	br	40134d0 <__alt_mem_onchip_memory2_0+0xfc012230>
 40139e4:	103e6c1e 	bne	r2,zero,4013398 <__alt_mem_onchip_memory2_0+0xfc0120f8>
 40139e8:	4080004c 	andi	r2,r8,1
 40139ec:	103e6a26 	beq	r2,zero,4013398 <__alt_mem_onchip_memory2_0+0xfc0120f8>
 40139f0:	003e6606 	br	401338c <__alt_mem_onchip_memory2_0+0xfc0120ec>
 40139f4:	d8c00317 	ldw	r3,12(sp)
 40139f8:	00800084 	movi	r2,2
 40139fc:	10c02916 	blt	r2,r3,4013aa4 <_dtoa_r+0x167c>
 4013a00:	d9000c17 	ldw	r4,48(sp)
 4013a04:	003e8806 	br	4013428 <__alt_mem_onchip_memory2_0+0xfc012188>
 4013a08:	04000084 	movi	r16,2
 4013a0c:	003b9d06 	br	4012884 <__alt_mem_onchip_memory2_0+0xfc0115e4>
 4013a10:	d9001317 	ldw	r4,76(sp)
 4013a14:	d9000515 	stw	r4,20(sp)
 4013a18:	003cd606 	br	4012d74 <__alt_mem_onchip_memory2_0+0xfc011ad4>
 4013a1c:	d8801317 	ldw	r2,76(sp)
 4013a20:	d8800515 	stw	r2,20(sp)
 4013a24:	003c2a06 	br	4012ad0 <__alt_mem_onchip_memory2_0+0xfc011830>
 4013a28:	d9800317 	ldw	r6,12(sp)
 4013a2c:	00800084 	movi	r2,2
 4013a30:	11801516 	blt	r2,r6,4013a88 <_dtoa_r+0x1660>
 4013a34:	d9c00c17 	ldw	r7,48(sp)
 4013a38:	d9c00615 	stw	r7,24(sp)
 4013a3c:	003df706 	br	401321c <__alt_mem_onchip_memory2_0+0xfc011f7c>
 4013a40:	193d3926 	beq	r3,r4,4012f28 <__alt_mem_onchip_memory2_0+0xfc011c88>
 4013a44:	00c00f04 	movi	r3,60
 4013a48:	1885c83a 	sub	r2,r3,r2
 4013a4c:	003ddf06 	br	40131cc <__alt_mem_onchip_memory2_0+0xfc011f2c>
 4013a50:	e009883a 	mov	r4,fp
 4013a54:	e0001115 	stw	zero,68(fp)
 4013a58:	000b883a 	mov	r5,zero
 4013a5c:	40150640 	call	4015064 <_Balloc>
 4013a60:	d8800715 	stw	r2,28(sp)
 4013a64:	d8c00717 	ldw	r3,28(sp)
 4013a68:	00bfffc4 	movi	r2,-1
 4013a6c:	01000044 	movi	r4,1
 4013a70:	d8800c15 	stw	r2,48(sp)
 4013a74:	e0c01015 	stw	r3,64(fp)
 4013a78:	d9000b15 	stw	r4,44(sp)
 4013a7c:	d8800615 	stw	r2,24(sp)
 4013a80:	d8002215 	stw	zero,136(sp)
 4013a84:	003c4106 	br	4012b8c <__alt_mem_onchip_memory2_0+0xfc0118ec>
 4013a88:	d8c00c17 	ldw	r3,48(sp)
 4013a8c:	d8c00615 	stw	r3,24(sp)
 4013a90:	003e7006 	br	4013454 <__alt_mem_onchip_memory2_0+0xfc0121b4>
 4013a94:	04400044 	movi	r17,1
 4013a98:	003b2006 	br	401271c <__alt_mem_onchip_memory2_0+0xfc01147c>
 4013a9c:	000b883a 	mov	r5,zero
 4013aa0:	003b3d06 	br	4012798 <__alt_mem_onchip_memory2_0+0xfc0114f8>
 4013aa4:	d8800c17 	ldw	r2,48(sp)
 4013aa8:	d8800615 	stw	r2,24(sp)
 4013aac:	003e6906 	br	4013454 <__alt_mem_onchip_memory2_0+0xfc0121b4>

04013ab0 <__sflush_r>:
 4013ab0:	2880030b 	ldhu	r2,12(r5)
 4013ab4:	defffb04 	addi	sp,sp,-20
 4013ab8:	dcc00315 	stw	r19,12(sp)
 4013abc:	dc400115 	stw	r17,4(sp)
 4013ac0:	dfc00415 	stw	ra,16(sp)
 4013ac4:	dc800215 	stw	r18,8(sp)
 4013ac8:	dc000015 	stw	r16,0(sp)
 4013acc:	10c0020c 	andi	r3,r2,8
 4013ad0:	2823883a 	mov	r17,r5
 4013ad4:	2027883a 	mov	r19,r4
 4013ad8:	1800311e 	bne	r3,zero,4013ba0 <__sflush_r+0xf0>
 4013adc:	28c00117 	ldw	r3,4(r5)
 4013ae0:	10820014 	ori	r2,r2,2048
 4013ae4:	2880030d 	sth	r2,12(r5)
 4013ae8:	00c04b0e 	bge	zero,r3,4013c18 <__sflush_r+0x168>
 4013aec:	8a000a17 	ldw	r8,40(r17)
 4013af0:	40002326 	beq	r8,zero,4013b80 <__sflush_r+0xd0>
 4013af4:	9c000017 	ldw	r16,0(r19)
 4013af8:	10c4000c 	andi	r3,r2,4096
 4013afc:	98000015 	stw	zero,0(r19)
 4013b00:	18004826 	beq	r3,zero,4013c24 <__sflush_r+0x174>
 4013b04:	89801417 	ldw	r6,80(r17)
 4013b08:	10c0010c 	andi	r3,r2,4
 4013b0c:	18000626 	beq	r3,zero,4013b28 <__sflush_r+0x78>
 4013b10:	88c00117 	ldw	r3,4(r17)
 4013b14:	88800c17 	ldw	r2,48(r17)
 4013b18:	30cdc83a 	sub	r6,r6,r3
 4013b1c:	10000226 	beq	r2,zero,4013b28 <__sflush_r+0x78>
 4013b20:	88800f17 	ldw	r2,60(r17)
 4013b24:	308dc83a 	sub	r6,r6,r2
 4013b28:	89400717 	ldw	r5,28(r17)
 4013b2c:	000f883a 	mov	r7,zero
 4013b30:	9809883a 	mov	r4,r19
 4013b34:	403ee83a 	callr	r8
 4013b38:	00ffffc4 	movi	r3,-1
 4013b3c:	10c04426 	beq	r2,r3,4013c50 <__sflush_r+0x1a0>
 4013b40:	88c0030b 	ldhu	r3,12(r17)
 4013b44:	89000417 	ldw	r4,16(r17)
 4013b48:	88000115 	stw	zero,4(r17)
 4013b4c:	197dffcc 	andi	r5,r3,63487
 4013b50:	8940030d 	sth	r5,12(r17)
 4013b54:	89000015 	stw	r4,0(r17)
 4013b58:	18c4000c 	andi	r3,r3,4096
 4013b5c:	18002c1e 	bne	r3,zero,4013c10 <__sflush_r+0x160>
 4013b60:	89400c17 	ldw	r5,48(r17)
 4013b64:	9c000015 	stw	r16,0(r19)
 4013b68:	28000526 	beq	r5,zero,4013b80 <__sflush_r+0xd0>
 4013b6c:	88801004 	addi	r2,r17,64
 4013b70:	28800226 	beq	r5,r2,4013b7c <__sflush_r+0xcc>
 4013b74:	9809883a 	mov	r4,r19
 4013b78:	401422c0 	call	401422c <_free_r>
 4013b7c:	88000c15 	stw	zero,48(r17)
 4013b80:	0005883a 	mov	r2,zero
 4013b84:	dfc00417 	ldw	ra,16(sp)
 4013b88:	dcc00317 	ldw	r19,12(sp)
 4013b8c:	dc800217 	ldw	r18,8(sp)
 4013b90:	dc400117 	ldw	r17,4(sp)
 4013b94:	dc000017 	ldw	r16,0(sp)
 4013b98:	dec00504 	addi	sp,sp,20
 4013b9c:	f800283a 	ret
 4013ba0:	2c800417 	ldw	r18,16(r5)
 4013ba4:	903ff626 	beq	r18,zero,4013b80 <__alt_mem_onchip_memory2_0+0xfc0128e0>
 4013ba8:	2c000017 	ldw	r16,0(r5)
 4013bac:	108000cc 	andi	r2,r2,3
 4013bb0:	2c800015 	stw	r18,0(r5)
 4013bb4:	84a1c83a 	sub	r16,r16,r18
 4013bb8:	1000131e 	bne	r2,zero,4013c08 <__sflush_r+0x158>
 4013bbc:	28800517 	ldw	r2,20(r5)
 4013bc0:	88800215 	stw	r2,8(r17)
 4013bc4:	04000316 	blt	zero,r16,4013bd4 <__sflush_r+0x124>
 4013bc8:	003fed06 	br	4013b80 <__alt_mem_onchip_memory2_0+0xfc0128e0>
 4013bcc:	90a5883a 	add	r18,r18,r2
 4013bd0:	043feb0e 	bge	zero,r16,4013b80 <__alt_mem_onchip_memory2_0+0xfc0128e0>
 4013bd4:	88800917 	ldw	r2,36(r17)
 4013bd8:	89400717 	ldw	r5,28(r17)
 4013bdc:	800f883a 	mov	r7,r16
 4013be0:	900d883a 	mov	r6,r18
 4013be4:	9809883a 	mov	r4,r19
 4013be8:	103ee83a 	callr	r2
 4013bec:	80a1c83a 	sub	r16,r16,r2
 4013bf0:	00bff616 	blt	zero,r2,4013bcc <__alt_mem_onchip_memory2_0+0xfc01292c>
 4013bf4:	88c0030b 	ldhu	r3,12(r17)
 4013bf8:	00bfffc4 	movi	r2,-1
 4013bfc:	18c01014 	ori	r3,r3,64
 4013c00:	88c0030d 	sth	r3,12(r17)
 4013c04:	003fdf06 	br	4013b84 <__alt_mem_onchip_memory2_0+0xfc0128e4>
 4013c08:	0005883a 	mov	r2,zero
 4013c0c:	003fec06 	br	4013bc0 <__alt_mem_onchip_memory2_0+0xfc012920>
 4013c10:	88801415 	stw	r2,80(r17)
 4013c14:	003fd206 	br	4013b60 <__alt_mem_onchip_memory2_0+0xfc0128c0>
 4013c18:	28c00f17 	ldw	r3,60(r5)
 4013c1c:	00ffb316 	blt	zero,r3,4013aec <__alt_mem_onchip_memory2_0+0xfc01284c>
 4013c20:	003fd706 	br	4013b80 <__alt_mem_onchip_memory2_0+0xfc0128e0>
 4013c24:	89400717 	ldw	r5,28(r17)
 4013c28:	000d883a 	mov	r6,zero
 4013c2c:	01c00044 	movi	r7,1
 4013c30:	9809883a 	mov	r4,r19
 4013c34:	403ee83a 	callr	r8
 4013c38:	100d883a 	mov	r6,r2
 4013c3c:	00bfffc4 	movi	r2,-1
 4013c40:	30801426 	beq	r6,r2,4013c94 <__sflush_r+0x1e4>
 4013c44:	8880030b 	ldhu	r2,12(r17)
 4013c48:	8a000a17 	ldw	r8,40(r17)
 4013c4c:	003fae06 	br	4013b08 <__alt_mem_onchip_memory2_0+0xfc012868>
 4013c50:	98c00017 	ldw	r3,0(r19)
 4013c54:	183fba26 	beq	r3,zero,4013b40 <__alt_mem_onchip_memory2_0+0xfc0128a0>
 4013c58:	01000744 	movi	r4,29
 4013c5c:	19000626 	beq	r3,r4,4013c78 <__sflush_r+0x1c8>
 4013c60:	01000584 	movi	r4,22
 4013c64:	19000426 	beq	r3,r4,4013c78 <__sflush_r+0x1c8>
 4013c68:	88c0030b 	ldhu	r3,12(r17)
 4013c6c:	18c01014 	ori	r3,r3,64
 4013c70:	88c0030d 	sth	r3,12(r17)
 4013c74:	003fc306 	br	4013b84 <__alt_mem_onchip_memory2_0+0xfc0128e4>
 4013c78:	8880030b 	ldhu	r2,12(r17)
 4013c7c:	88c00417 	ldw	r3,16(r17)
 4013c80:	88000115 	stw	zero,4(r17)
 4013c84:	10bdffcc 	andi	r2,r2,63487
 4013c88:	8880030d 	sth	r2,12(r17)
 4013c8c:	88c00015 	stw	r3,0(r17)
 4013c90:	003fb306 	br	4013b60 <__alt_mem_onchip_memory2_0+0xfc0128c0>
 4013c94:	98800017 	ldw	r2,0(r19)
 4013c98:	103fea26 	beq	r2,zero,4013c44 <__alt_mem_onchip_memory2_0+0xfc0129a4>
 4013c9c:	00c00744 	movi	r3,29
 4013ca0:	10c00226 	beq	r2,r3,4013cac <__sflush_r+0x1fc>
 4013ca4:	00c00584 	movi	r3,22
 4013ca8:	10c0031e 	bne	r2,r3,4013cb8 <__sflush_r+0x208>
 4013cac:	9c000015 	stw	r16,0(r19)
 4013cb0:	0005883a 	mov	r2,zero
 4013cb4:	003fb306 	br	4013b84 <__alt_mem_onchip_memory2_0+0xfc0128e4>
 4013cb8:	88c0030b 	ldhu	r3,12(r17)
 4013cbc:	3005883a 	mov	r2,r6
 4013cc0:	18c01014 	ori	r3,r3,64
 4013cc4:	88c0030d 	sth	r3,12(r17)
 4013cc8:	003fae06 	br	4013b84 <__alt_mem_onchip_memory2_0+0xfc0128e4>

04013ccc <_fflush_r>:
 4013ccc:	defffd04 	addi	sp,sp,-12
 4013cd0:	dc000115 	stw	r16,4(sp)
 4013cd4:	dfc00215 	stw	ra,8(sp)
 4013cd8:	2021883a 	mov	r16,r4
 4013cdc:	20000226 	beq	r4,zero,4013ce8 <_fflush_r+0x1c>
 4013ce0:	20800e17 	ldw	r2,56(r4)
 4013ce4:	10000c26 	beq	r2,zero,4013d18 <_fflush_r+0x4c>
 4013ce8:	2880030f 	ldh	r2,12(r5)
 4013cec:	1000051e 	bne	r2,zero,4013d04 <_fflush_r+0x38>
 4013cf0:	0005883a 	mov	r2,zero
 4013cf4:	dfc00217 	ldw	ra,8(sp)
 4013cf8:	dc000117 	ldw	r16,4(sp)
 4013cfc:	dec00304 	addi	sp,sp,12
 4013d00:	f800283a 	ret
 4013d04:	8009883a 	mov	r4,r16
 4013d08:	dfc00217 	ldw	ra,8(sp)
 4013d0c:	dc000117 	ldw	r16,4(sp)
 4013d10:	dec00304 	addi	sp,sp,12
 4013d14:	4013ab01 	jmpi	4013ab0 <__sflush_r>
 4013d18:	d9400015 	stw	r5,0(sp)
 4013d1c:	40140b80 	call	40140b8 <__sinit>
 4013d20:	d9400017 	ldw	r5,0(sp)
 4013d24:	003ff006 	br	4013ce8 <__alt_mem_onchip_memory2_0+0xfc012a48>

04013d28 <fflush>:
 4013d28:	20000526 	beq	r4,zero,4013d40 <fflush+0x18>
 4013d2c:	008100f4 	movhi	r2,1027
 4013d30:	10ab8304 	addi	r2,r2,-20980
 4013d34:	200b883a 	mov	r5,r4
 4013d38:	11000017 	ldw	r4,0(r2)
 4013d3c:	4013ccc1 	jmpi	4013ccc <_fflush_r>
 4013d40:	008100f4 	movhi	r2,1027
 4013d44:	10ab8204 	addi	r2,r2,-20984
 4013d48:	11000017 	ldw	r4,0(r2)
 4013d4c:	01410074 	movhi	r5,1025
 4013d50:	294f3304 	addi	r5,r5,15564
 4013d54:	4014ac81 	jmpi	4014ac8 <_fwalk_reent>

04013d58 <__fp_unlock>:
 4013d58:	0005883a 	mov	r2,zero
 4013d5c:	f800283a 	ret

04013d60 <_cleanup_r>:
 4013d60:	014100b4 	movhi	r5,1026
 4013d64:	2960de04 	addi	r5,r5,-31880
 4013d68:	4014ac81 	jmpi	4014ac8 <_fwalk_reent>

04013d6c <__sinit.part.1>:
 4013d6c:	defff704 	addi	sp,sp,-36
 4013d70:	00c10074 	movhi	r3,1025
 4013d74:	dfc00815 	stw	ra,32(sp)
 4013d78:	ddc00715 	stw	r23,28(sp)
 4013d7c:	dd800615 	stw	r22,24(sp)
 4013d80:	dd400515 	stw	r21,20(sp)
 4013d84:	dd000415 	stw	r20,16(sp)
 4013d88:	dcc00315 	stw	r19,12(sp)
 4013d8c:	dc800215 	stw	r18,8(sp)
 4013d90:	dc400115 	stw	r17,4(sp)
 4013d94:	dc000015 	stw	r16,0(sp)
 4013d98:	18cf5804 	addi	r3,r3,15712
 4013d9c:	24000117 	ldw	r16,4(r4)
 4013da0:	20c00f15 	stw	r3,60(r4)
 4013da4:	2080bb04 	addi	r2,r4,748
 4013da8:	00c000c4 	movi	r3,3
 4013dac:	20c0b915 	stw	r3,740(r4)
 4013db0:	2080ba15 	stw	r2,744(r4)
 4013db4:	2000b815 	stw	zero,736(r4)
 4013db8:	05c00204 	movi	r23,8
 4013dbc:	00800104 	movi	r2,4
 4013dc0:	2025883a 	mov	r18,r4
 4013dc4:	b80d883a 	mov	r6,r23
 4013dc8:	81001704 	addi	r4,r16,92
 4013dcc:	000b883a 	mov	r5,zero
 4013dd0:	80000015 	stw	zero,0(r16)
 4013dd4:	80000115 	stw	zero,4(r16)
 4013dd8:	80000215 	stw	zero,8(r16)
 4013ddc:	8080030d 	sth	r2,12(r16)
 4013de0:	80001915 	stw	zero,100(r16)
 4013de4:	8000038d 	sth	zero,14(r16)
 4013de8:	80000415 	stw	zero,16(r16)
 4013dec:	80000515 	stw	zero,20(r16)
 4013df0:	80000615 	stw	zero,24(r16)
 4013df4:	400f59c0 	call	400f59c <memset>
 4013df8:	05810074 	movhi	r22,1025
 4013dfc:	94400217 	ldw	r17,8(r18)
 4013e00:	05410074 	movhi	r21,1025
 4013e04:	05010074 	movhi	r20,1025
 4013e08:	04c10074 	movhi	r19,1025
 4013e0c:	b59a1704 	addi	r22,r22,26716
 4013e10:	ad5a2e04 	addi	r21,r21,26808
 4013e14:	a51a4d04 	addi	r20,r20,26932
 4013e18:	9cda6404 	addi	r19,r19,27024
 4013e1c:	85800815 	stw	r22,32(r16)
 4013e20:	85400915 	stw	r21,36(r16)
 4013e24:	85000a15 	stw	r20,40(r16)
 4013e28:	84c00b15 	stw	r19,44(r16)
 4013e2c:	84000715 	stw	r16,28(r16)
 4013e30:	00800284 	movi	r2,10
 4013e34:	8880030d 	sth	r2,12(r17)
 4013e38:	00800044 	movi	r2,1
 4013e3c:	b80d883a 	mov	r6,r23
 4013e40:	89001704 	addi	r4,r17,92
 4013e44:	000b883a 	mov	r5,zero
 4013e48:	88000015 	stw	zero,0(r17)
 4013e4c:	88000115 	stw	zero,4(r17)
 4013e50:	88000215 	stw	zero,8(r17)
 4013e54:	88001915 	stw	zero,100(r17)
 4013e58:	8880038d 	sth	r2,14(r17)
 4013e5c:	88000415 	stw	zero,16(r17)
 4013e60:	88000515 	stw	zero,20(r17)
 4013e64:	88000615 	stw	zero,24(r17)
 4013e68:	400f59c0 	call	400f59c <memset>
 4013e6c:	94000317 	ldw	r16,12(r18)
 4013e70:	00800484 	movi	r2,18
 4013e74:	8c400715 	stw	r17,28(r17)
 4013e78:	8d800815 	stw	r22,32(r17)
 4013e7c:	8d400915 	stw	r21,36(r17)
 4013e80:	8d000a15 	stw	r20,40(r17)
 4013e84:	8cc00b15 	stw	r19,44(r17)
 4013e88:	8080030d 	sth	r2,12(r16)
 4013e8c:	00800084 	movi	r2,2
 4013e90:	80000015 	stw	zero,0(r16)
 4013e94:	80000115 	stw	zero,4(r16)
 4013e98:	80000215 	stw	zero,8(r16)
 4013e9c:	80001915 	stw	zero,100(r16)
 4013ea0:	8080038d 	sth	r2,14(r16)
 4013ea4:	80000415 	stw	zero,16(r16)
 4013ea8:	80000515 	stw	zero,20(r16)
 4013eac:	80000615 	stw	zero,24(r16)
 4013eb0:	b80d883a 	mov	r6,r23
 4013eb4:	000b883a 	mov	r5,zero
 4013eb8:	81001704 	addi	r4,r16,92
 4013ebc:	400f59c0 	call	400f59c <memset>
 4013ec0:	00800044 	movi	r2,1
 4013ec4:	84000715 	stw	r16,28(r16)
 4013ec8:	85800815 	stw	r22,32(r16)
 4013ecc:	85400915 	stw	r21,36(r16)
 4013ed0:	85000a15 	stw	r20,40(r16)
 4013ed4:	84c00b15 	stw	r19,44(r16)
 4013ed8:	90800e15 	stw	r2,56(r18)
 4013edc:	dfc00817 	ldw	ra,32(sp)
 4013ee0:	ddc00717 	ldw	r23,28(sp)
 4013ee4:	dd800617 	ldw	r22,24(sp)
 4013ee8:	dd400517 	ldw	r21,20(sp)
 4013eec:	dd000417 	ldw	r20,16(sp)
 4013ef0:	dcc00317 	ldw	r19,12(sp)
 4013ef4:	dc800217 	ldw	r18,8(sp)
 4013ef8:	dc400117 	ldw	r17,4(sp)
 4013efc:	dc000017 	ldw	r16,0(sp)
 4013f00:	dec00904 	addi	sp,sp,36
 4013f04:	f800283a 	ret

04013f08 <__fp_lock>:
 4013f08:	0005883a 	mov	r2,zero
 4013f0c:	f800283a 	ret

04013f10 <__sfmoreglue>:
 4013f10:	defffc04 	addi	sp,sp,-16
 4013f14:	dc800215 	stw	r18,8(sp)
 4013f18:	2825883a 	mov	r18,r5
 4013f1c:	dc000015 	stw	r16,0(sp)
 4013f20:	01401a04 	movi	r5,104
 4013f24:	2021883a 	mov	r16,r4
 4013f28:	913fffc4 	addi	r4,r18,-1
 4013f2c:	dfc00315 	stw	ra,12(sp)
 4013f30:	dc400115 	stw	r17,4(sp)
 4013f34:	400dae00 	call	400dae0 <__mulsi3>
 4013f38:	8009883a 	mov	r4,r16
 4013f3c:	11401d04 	addi	r5,r2,116
 4013f40:	1023883a 	mov	r17,r2
 4013f44:	400ec480 	call	400ec48 <_malloc_r>
 4013f48:	1021883a 	mov	r16,r2
 4013f4c:	10000726 	beq	r2,zero,4013f6c <__sfmoreglue+0x5c>
 4013f50:	11000304 	addi	r4,r2,12
 4013f54:	10000015 	stw	zero,0(r2)
 4013f58:	14800115 	stw	r18,4(r2)
 4013f5c:	11000215 	stw	r4,8(r2)
 4013f60:	89801a04 	addi	r6,r17,104
 4013f64:	000b883a 	mov	r5,zero
 4013f68:	400f59c0 	call	400f59c <memset>
 4013f6c:	8005883a 	mov	r2,r16
 4013f70:	dfc00317 	ldw	ra,12(sp)
 4013f74:	dc800217 	ldw	r18,8(sp)
 4013f78:	dc400117 	ldw	r17,4(sp)
 4013f7c:	dc000017 	ldw	r16,0(sp)
 4013f80:	dec00404 	addi	sp,sp,16
 4013f84:	f800283a 	ret

04013f88 <__sfp>:
 4013f88:	defffb04 	addi	sp,sp,-20
 4013f8c:	dc000015 	stw	r16,0(sp)
 4013f90:	040100f4 	movhi	r16,1027
 4013f94:	842b8204 	addi	r16,r16,-20984
 4013f98:	dcc00315 	stw	r19,12(sp)
 4013f9c:	2027883a 	mov	r19,r4
 4013fa0:	81000017 	ldw	r4,0(r16)
 4013fa4:	dfc00415 	stw	ra,16(sp)
 4013fa8:	dc800215 	stw	r18,8(sp)
 4013fac:	20800e17 	ldw	r2,56(r4)
 4013fb0:	dc400115 	stw	r17,4(sp)
 4013fb4:	1000021e 	bne	r2,zero,4013fc0 <__sfp+0x38>
 4013fb8:	4013d6c0 	call	4013d6c <__sinit.part.1>
 4013fbc:	81000017 	ldw	r4,0(r16)
 4013fc0:	2480b804 	addi	r18,r4,736
 4013fc4:	047fffc4 	movi	r17,-1
 4013fc8:	91000117 	ldw	r4,4(r18)
 4013fcc:	94000217 	ldw	r16,8(r18)
 4013fd0:	213fffc4 	addi	r4,r4,-1
 4013fd4:	20000a16 	blt	r4,zero,4014000 <__sfp+0x78>
 4013fd8:	8080030f 	ldh	r2,12(r16)
 4013fdc:	10000c26 	beq	r2,zero,4014010 <__sfp+0x88>
 4013fe0:	80c01d04 	addi	r3,r16,116
 4013fe4:	00000206 	br	4013ff0 <__sfp+0x68>
 4013fe8:	18bfe60f 	ldh	r2,-104(r3)
 4013fec:	10000826 	beq	r2,zero,4014010 <__sfp+0x88>
 4013ff0:	213fffc4 	addi	r4,r4,-1
 4013ff4:	1c3ffd04 	addi	r16,r3,-12
 4013ff8:	18c01a04 	addi	r3,r3,104
 4013ffc:	247ffa1e 	bne	r4,r17,4013fe8 <__alt_mem_onchip_memory2_0+0xfc012d48>
 4014000:	90800017 	ldw	r2,0(r18)
 4014004:	10001d26 	beq	r2,zero,401407c <__sfp+0xf4>
 4014008:	1025883a 	mov	r18,r2
 401400c:	003fee06 	br	4013fc8 <__alt_mem_onchip_memory2_0+0xfc012d28>
 4014010:	00bfffc4 	movi	r2,-1
 4014014:	8080038d 	sth	r2,14(r16)
 4014018:	00800044 	movi	r2,1
 401401c:	8080030d 	sth	r2,12(r16)
 4014020:	80001915 	stw	zero,100(r16)
 4014024:	80000015 	stw	zero,0(r16)
 4014028:	80000215 	stw	zero,8(r16)
 401402c:	80000115 	stw	zero,4(r16)
 4014030:	80000415 	stw	zero,16(r16)
 4014034:	80000515 	stw	zero,20(r16)
 4014038:	80000615 	stw	zero,24(r16)
 401403c:	01800204 	movi	r6,8
 4014040:	000b883a 	mov	r5,zero
 4014044:	81001704 	addi	r4,r16,92
 4014048:	400f59c0 	call	400f59c <memset>
 401404c:	8005883a 	mov	r2,r16
 4014050:	80000c15 	stw	zero,48(r16)
 4014054:	80000d15 	stw	zero,52(r16)
 4014058:	80001115 	stw	zero,68(r16)
 401405c:	80001215 	stw	zero,72(r16)
 4014060:	dfc00417 	ldw	ra,16(sp)
 4014064:	dcc00317 	ldw	r19,12(sp)
 4014068:	dc800217 	ldw	r18,8(sp)
 401406c:	dc400117 	ldw	r17,4(sp)
 4014070:	dc000017 	ldw	r16,0(sp)
 4014074:	dec00504 	addi	sp,sp,20
 4014078:	f800283a 	ret
 401407c:	01400104 	movi	r5,4
 4014080:	9809883a 	mov	r4,r19
 4014084:	4013f100 	call	4013f10 <__sfmoreglue>
 4014088:	90800015 	stw	r2,0(r18)
 401408c:	103fde1e 	bne	r2,zero,4014008 <__alt_mem_onchip_memory2_0+0xfc012d68>
 4014090:	00800304 	movi	r2,12
 4014094:	98800015 	stw	r2,0(r19)
 4014098:	0005883a 	mov	r2,zero
 401409c:	003ff006 	br	4014060 <__alt_mem_onchip_memory2_0+0xfc012dc0>

040140a0 <_cleanup>:
 40140a0:	008100f4 	movhi	r2,1027
 40140a4:	10ab8204 	addi	r2,r2,-20984
 40140a8:	11000017 	ldw	r4,0(r2)
 40140ac:	014100b4 	movhi	r5,1026
 40140b0:	2960de04 	addi	r5,r5,-31880
 40140b4:	4014ac81 	jmpi	4014ac8 <_fwalk_reent>

040140b8 <__sinit>:
 40140b8:	20800e17 	ldw	r2,56(r4)
 40140bc:	10000126 	beq	r2,zero,40140c4 <__sinit+0xc>
 40140c0:	f800283a 	ret
 40140c4:	4013d6c1 	jmpi	4013d6c <__sinit.part.1>

040140c8 <__sfp_lock_acquire>:
 40140c8:	f800283a 	ret

040140cc <__sfp_lock_release>:
 40140cc:	f800283a 	ret

040140d0 <__sinit_lock_acquire>:
 40140d0:	f800283a 	ret

040140d4 <__sinit_lock_release>:
 40140d4:	f800283a 	ret

040140d8 <__fp_lock_all>:
 40140d8:	008100f4 	movhi	r2,1027
 40140dc:	10ab8304 	addi	r2,r2,-20980
 40140e0:	11000017 	ldw	r4,0(r2)
 40140e4:	01410074 	movhi	r5,1025
 40140e8:	294fc204 	addi	r5,r5,16136
 40140ec:	4014a041 	jmpi	4014a04 <_fwalk>

040140f0 <__fp_unlock_all>:
 40140f0:	008100f4 	movhi	r2,1027
 40140f4:	10ab8304 	addi	r2,r2,-20980
 40140f8:	11000017 	ldw	r4,0(r2)
 40140fc:	01410074 	movhi	r5,1025
 4014100:	294f5604 	addi	r5,r5,15704
 4014104:	4014a041 	jmpi	4014a04 <_fwalk>

04014108 <_malloc_trim_r>:
 4014108:	defffb04 	addi	sp,sp,-20
 401410c:	dcc00315 	stw	r19,12(sp)
 4014110:	04c100f4 	movhi	r19,1027
 4014114:	dc800215 	stw	r18,8(sp)
 4014118:	dc400115 	stw	r17,4(sp)
 401411c:	dc000015 	stw	r16,0(sp)
 4014120:	dfc00415 	stw	ra,16(sp)
 4014124:	2821883a 	mov	r16,r5
 4014128:	9ce02604 	addi	r19,r19,-32616
 401412c:	2025883a 	mov	r18,r4
 4014130:	401c5380 	call	401c538 <__malloc_lock>
 4014134:	98800217 	ldw	r2,8(r19)
 4014138:	14400117 	ldw	r17,4(r2)
 401413c:	00bfff04 	movi	r2,-4
 4014140:	88a2703a 	and	r17,r17,r2
 4014144:	8c21c83a 	sub	r16,r17,r16
 4014148:	8403fbc4 	addi	r16,r16,4079
 401414c:	8020d33a 	srli	r16,r16,12
 4014150:	0083ffc4 	movi	r2,4095
 4014154:	843fffc4 	addi	r16,r16,-1
 4014158:	8020933a 	slli	r16,r16,12
 401415c:	1400060e 	bge	r2,r16,4014178 <_malloc_trim_r+0x70>
 4014160:	000b883a 	mov	r5,zero
 4014164:	9009883a 	mov	r4,r18
 4014168:	400f8240 	call	400f824 <_sbrk_r>
 401416c:	98c00217 	ldw	r3,8(r19)
 4014170:	1c47883a 	add	r3,r3,r17
 4014174:	10c00a26 	beq	r2,r3,40141a0 <_malloc_trim_r+0x98>
 4014178:	9009883a 	mov	r4,r18
 401417c:	401c55c0 	call	401c55c <__malloc_unlock>
 4014180:	0005883a 	mov	r2,zero
 4014184:	dfc00417 	ldw	ra,16(sp)
 4014188:	dcc00317 	ldw	r19,12(sp)
 401418c:	dc800217 	ldw	r18,8(sp)
 4014190:	dc400117 	ldw	r17,4(sp)
 4014194:	dc000017 	ldw	r16,0(sp)
 4014198:	dec00504 	addi	sp,sp,20
 401419c:	f800283a 	ret
 40141a0:	040bc83a 	sub	r5,zero,r16
 40141a4:	9009883a 	mov	r4,r18
 40141a8:	400f8240 	call	400f824 <_sbrk_r>
 40141ac:	00ffffc4 	movi	r3,-1
 40141b0:	10c00d26 	beq	r2,r3,40141e8 <_malloc_trim_r+0xe0>
 40141b4:	00c100f4 	movhi	r3,1027
 40141b8:	18f85804 	addi	r3,r3,-7840
 40141bc:	18800017 	ldw	r2,0(r3)
 40141c0:	99000217 	ldw	r4,8(r19)
 40141c4:	8c23c83a 	sub	r17,r17,r16
 40141c8:	8c400054 	ori	r17,r17,1
 40141cc:	1421c83a 	sub	r16,r2,r16
 40141d0:	24400115 	stw	r17,4(r4)
 40141d4:	9009883a 	mov	r4,r18
 40141d8:	1c000015 	stw	r16,0(r3)
 40141dc:	401c55c0 	call	401c55c <__malloc_unlock>
 40141e0:	00800044 	movi	r2,1
 40141e4:	003fe706 	br	4014184 <__alt_mem_onchip_memory2_0+0xfc012ee4>
 40141e8:	000b883a 	mov	r5,zero
 40141ec:	9009883a 	mov	r4,r18
 40141f0:	400f8240 	call	400f824 <_sbrk_r>
 40141f4:	99000217 	ldw	r4,8(r19)
 40141f8:	014003c4 	movi	r5,15
 40141fc:	1107c83a 	sub	r3,r2,r4
 4014200:	28ffdd0e 	bge	r5,r3,4014178 <__alt_mem_onchip_memory2_0+0xfc012ed8>
 4014204:	014100f4 	movhi	r5,1027
 4014208:	296b8404 	addi	r5,r5,-20976
 401420c:	29400017 	ldw	r5,0(r5)
 4014210:	18c00054 	ori	r3,r3,1
 4014214:	20c00115 	stw	r3,4(r4)
 4014218:	00c100f4 	movhi	r3,1027
 401421c:	1145c83a 	sub	r2,r2,r5
 4014220:	18f85804 	addi	r3,r3,-7840
 4014224:	18800015 	stw	r2,0(r3)
 4014228:	003fd306 	br	4014178 <__alt_mem_onchip_memory2_0+0xfc012ed8>

0401422c <_free_r>:
 401422c:	28004126 	beq	r5,zero,4014334 <_free_r+0x108>
 4014230:	defffd04 	addi	sp,sp,-12
 4014234:	dc400115 	stw	r17,4(sp)
 4014238:	dc000015 	stw	r16,0(sp)
 401423c:	2023883a 	mov	r17,r4
 4014240:	2821883a 	mov	r16,r5
 4014244:	dfc00215 	stw	ra,8(sp)
 4014248:	401c5380 	call	401c538 <__malloc_lock>
 401424c:	81ffff17 	ldw	r7,-4(r16)
 4014250:	00bfff84 	movi	r2,-2
 4014254:	010100f4 	movhi	r4,1027
 4014258:	81bffe04 	addi	r6,r16,-8
 401425c:	3884703a 	and	r2,r7,r2
 4014260:	21202604 	addi	r4,r4,-32616
 4014264:	308b883a 	add	r5,r6,r2
 4014268:	2a400117 	ldw	r9,4(r5)
 401426c:	22000217 	ldw	r8,8(r4)
 4014270:	00ffff04 	movi	r3,-4
 4014274:	48c6703a 	and	r3,r9,r3
 4014278:	2a005726 	beq	r5,r8,40143d8 <_free_r+0x1ac>
 401427c:	28c00115 	stw	r3,4(r5)
 4014280:	39c0004c 	andi	r7,r7,1
 4014284:	3800091e 	bne	r7,zero,40142ac <_free_r+0x80>
 4014288:	823ffe17 	ldw	r8,-8(r16)
 401428c:	22400204 	addi	r9,r4,8
 4014290:	320dc83a 	sub	r6,r6,r8
 4014294:	31c00217 	ldw	r7,8(r6)
 4014298:	1205883a 	add	r2,r2,r8
 401429c:	3a406526 	beq	r7,r9,4014434 <_free_r+0x208>
 40142a0:	32000317 	ldw	r8,12(r6)
 40142a4:	3a000315 	stw	r8,12(r7)
 40142a8:	41c00215 	stw	r7,8(r8)
 40142ac:	28cf883a 	add	r7,r5,r3
 40142b0:	39c00117 	ldw	r7,4(r7)
 40142b4:	39c0004c 	andi	r7,r7,1
 40142b8:	38003a26 	beq	r7,zero,40143a4 <_free_r+0x178>
 40142bc:	10c00054 	ori	r3,r2,1
 40142c0:	30c00115 	stw	r3,4(r6)
 40142c4:	3087883a 	add	r3,r6,r2
 40142c8:	18800015 	stw	r2,0(r3)
 40142cc:	00c07fc4 	movi	r3,511
 40142d0:	18801936 	bltu	r3,r2,4014338 <_free_r+0x10c>
 40142d4:	1004d0fa 	srli	r2,r2,3
 40142d8:	01c00044 	movi	r7,1
 40142dc:	21400117 	ldw	r5,4(r4)
 40142e0:	10c00044 	addi	r3,r2,1
 40142e4:	18c7883a 	add	r3,r3,r3
 40142e8:	1005d0ba 	srai	r2,r2,2
 40142ec:	18c7883a 	add	r3,r3,r3
 40142f0:	18c7883a 	add	r3,r3,r3
 40142f4:	1907883a 	add	r3,r3,r4
 40142f8:	3884983a 	sll	r2,r7,r2
 40142fc:	19c00017 	ldw	r7,0(r3)
 4014300:	1a3ffe04 	addi	r8,r3,-8
 4014304:	1144b03a 	or	r2,r2,r5
 4014308:	32000315 	stw	r8,12(r6)
 401430c:	31c00215 	stw	r7,8(r6)
 4014310:	20800115 	stw	r2,4(r4)
 4014314:	19800015 	stw	r6,0(r3)
 4014318:	39800315 	stw	r6,12(r7)
 401431c:	8809883a 	mov	r4,r17
 4014320:	dfc00217 	ldw	ra,8(sp)
 4014324:	dc400117 	ldw	r17,4(sp)
 4014328:	dc000017 	ldw	r16,0(sp)
 401432c:	dec00304 	addi	sp,sp,12
 4014330:	401c55c1 	jmpi	401c55c <__malloc_unlock>
 4014334:	f800283a 	ret
 4014338:	100ad27a 	srli	r5,r2,9
 401433c:	00c00104 	movi	r3,4
 4014340:	19404a36 	bltu	r3,r5,401446c <_free_r+0x240>
 4014344:	100ad1ba 	srli	r5,r2,6
 4014348:	28c00e44 	addi	r3,r5,57
 401434c:	18c7883a 	add	r3,r3,r3
 4014350:	29400e04 	addi	r5,r5,56
 4014354:	18c7883a 	add	r3,r3,r3
 4014358:	18c7883a 	add	r3,r3,r3
 401435c:	1909883a 	add	r4,r3,r4
 4014360:	20c00017 	ldw	r3,0(r4)
 4014364:	01c100f4 	movhi	r7,1027
 4014368:	213ffe04 	addi	r4,r4,-8
 401436c:	39e02604 	addi	r7,r7,-32616
 4014370:	20c04426 	beq	r4,r3,4014484 <_free_r+0x258>
 4014374:	01ffff04 	movi	r7,-4
 4014378:	19400117 	ldw	r5,4(r3)
 401437c:	29ca703a 	and	r5,r5,r7
 4014380:	1140022e 	bgeu	r2,r5,401438c <_free_r+0x160>
 4014384:	18c00217 	ldw	r3,8(r3)
 4014388:	20fffb1e 	bne	r4,r3,4014378 <__alt_mem_onchip_memory2_0+0xfc0130d8>
 401438c:	19000317 	ldw	r4,12(r3)
 4014390:	31000315 	stw	r4,12(r6)
 4014394:	30c00215 	stw	r3,8(r6)
 4014398:	21800215 	stw	r6,8(r4)
 401439c:	19800315 	stw	r6,12(r3)
 40143a0:	003fde06 	br	401431c <__alt_mem_onchip_memory2_0+0xfc01307c>
 40143a4:	29c00217 	ldw	r7,8(r5)
 40143a8:	10c5883a 	add	r2,r2,r3
 40143ac:	00c100f4 	movhi	r3,1027
 40143b0:	18e02804 	addi	r3,r3,-32608
 40143b4:	38c03b26 	beq	r7,r3,40144a4 <_free_r+0x278>
 40143b8:	2a000317 	ldw	r8,12(r5)
 40143bc:	11400054 	ori	r5,r2,1
 40143c0:	3087883a 	add	r3,r6,r2
 40143c4:	3a000315 	stw	r8,12(r7)
 40143c8:	41c00215 	stw	r7,8(r8)
 40143cc:	31400115 	stw	r5,4(r6)
 40143d0:	18800015 	stw	r2,0(r3)
 40143d4:	003fbd06 	br	40142cc <__alt_mem_onchip_memory2_0+0xfc01302c>
 40143d8:	39c0004c 	andi	r7,r7,1
 40143dc:	10c5883a 	add	r2,r2,r3
 40143e0:	3800071e 	bne	r7,zero,4014400 <_free_r+0x1d4>
 40143e4:	81fffe17 	ldw	r7,-8(r16)
 40143e8:	31cdc83a 	sub	r6,r6,r7
 40143ec:	30c00317 	ldw	r3,12(r6)
 40143f0:	31400217 	ldw	r5,8(r6)
 40143f4:	11c5883a 	add	r2,r2,r7
 40143f8:	28c00315 	stw	r3,12(r5)
 40143fc:	19400215 	stw	r5,8(r3)
 4014400:	10c00054 	ori	r3,r2,1
 4014404:	30c00115 	stw	r3,4(r6)
 4014408:	00c100f4 	movhi	r3,1027
 401440c:	18eb8504 	addi	r3,r3,-20972
 4014410:	18c00017 	ldw	r3,0(r3)
 4014414:	21800215 	stw	r6,8(r4)
 4014418:	10ffc036 	bltu	r2,r3,401431c <__alt_mem_onchip_memory2_0+0xfc01307c>
 401441c:	008100f4 	movhi	r2,1027
 4014420:	10b81404 	addi	r2,r2,-8112
 4014424:	11400017 	ldw	r5,0(r2)
 4014428:	8809883a 	mov	r4,r17
 401442c:	40141080 	call	4014108 <_malloc_trim_r>
 4014430:	003fba06 	br	401431c <__alt_mem_onchip_memory2_0+0xfc01307c>
 4014434:	28c9883a 	add	r4,r5,r3
 4014438:	21000117 	ldw	r4,4(r4)
 401443c:	2100004c 	andi	r4,r4,1
 4014440:	2000391e 	bne	r4,zero,4014528 <_free_r+0x2fc>
 4014444:	29c00217 	ldw	r7,8(r5)
 4014448:	29000317 	ldw	r4,12(r5)
 401444c:	1885883a 	add	r2,r3,r2
 4014450:	10c00054 	ori	r3,r2,1
 4014454:	39000315 	stw	r4,12(r7)
 4014458:	21c00215 	stw	r7,8(r4)
 401445c:	30c00115 	stw	r3,4(r6)
 4014460:	308d883a 	add	r6,r6,r2
 4014464:	30800015 	stw	r2,0(r6)
 4014468:	003fac06 	br	401431c <__alt_mem_onchip_memory2_0+0xfc01307c>
 401446c:	00c00504 	movi	r3,20
 4014470:	19401536 	bltu	r3,r5,40144c8 <_free_r+0x29c>
 4014474:	28c01704 	addi	r3,r5,92
 4014478:	18c7883a 	add	r3,r3,r3
 401447c:	294016c4 	addi	r5,r5,91
 4014480:	003fb406 	br	4014354 <__alt_mem_onchip_memory2_0+0xfc0130b4>
 4014484:	280bd0ba 	srai	r5,r5,2
 4014488:	00c00044 	movi	r3,1
 401448c:	38800117 	ldw	r2,4(r7)
 4014490:	194a983a 	sll	r5,r3,r5
 4014494:	2007883a 	mov	r3,r4
 4014498:	2884b03a 	or	r2,r5,r2
 401449c:	38800115 	stw	r2,4(r7)
 40144a0:	003fbb06 	br	4014390 <__alt_mem_onchip_memory2_0+0xfc0130f0>
 40144a4:	21800515 	stw	r6,20(r4)
 40144a8:	21800415 	stw	r6,16(r4)
 40144ac:	10c00054 	ori	r3,r2,1
 40144b0:	31c00315 	stw	r7,12(r6)
 40144b4:	31c00215 	stw	r7,8(r6)
 40144b8:	30c00115 	stw	r3,4(r6)
 40144bc:	308d883a 	add	r6,r6,r2
 40144c0:	30800015 	stw	r2,0(r6)
 40144c4:	003f9506 	br	401431c <__alt_mem_onchip_memory2_0+0xfc01307c>
 40144c8:	00c01504 	movi	r3,84
 40144cc:	19400536 	bltu	r3,r5,40144e4 <_free_r+0x2b8>
 40144d0:	100ad33a 	srli	r5,r2,12
 40144d4:	28c01bc4 	addi	r3,r5,111
 40144d8:	18c7883a 	add	r3,r3,r3
 40144dc:	29401b84 	addi	r5,r5,110
 40144e0:	003f9c06 	br	4014354 <__alt_mem_onchip_memory2_0+0xfc0130b4>
 40144e4:	00c05504 	movi	r3,340
 40144e8:	19400536 	bltu	r3,r5,4014500 <_free_r+0x2d4>
 40144ec:	100ad3fa 	srli	r5,r2,15
 40144f0:	28c01e04 	addi	r3,r5,120
 40144f4:	18c7883a 	add	r3,r3,r3
 40144f8:	29401dc4 	addi	r5,r5,119
 40144fc:	003f9506 	br	4014354 <__alt_mem_onchip_memory2_0+0xfc0130b4>
 4014500:	00c15504 	movi	r3,1364
 4014504:	19400536 	bltu	r3,r5,401451c <_free_r+0x2f0>
 4014508:	100ad4ba 	srli	r5,r2,18
 401450c:	28c01f44 	addi	r3,r5,125
 4014510:	18c7883a 	add	r3,r3,r3
 4014514:	29401f04 	addi	r5,r5,124
 4014518:	003f8e06 	br	4014354 <__alt_mem_onchip_memory2_0+0xfc0130b4>
 401451c:	00c03f84 	movi	r3,254
 4014520:	01401f84 	movi	r5,126
 4014524:	003f8b06 	br	4014354 <__alt_mem_onchip_memory2_0+0xfc0130b4>
 4014528:	10c00054 	ori	r3,r2,1
 401452c:	30c00115 	stw	r3,4(r6)
 4014530:	308d883a 	add	r6,r6,r2
 4014534:	30800015 	stw	r2,0(r6)
 4014538:	003f7806 	br	401431c <__alt_mem_onchip_memory2_0+0xfc01307c>

0401453c <__sfvwrite_r>:
 401453c:	30800217 	ldw	r2,8(r6)
 4014540:	10006726 	beq	r2,zero,40146e0 <__sfvwrite_r+0x1a4>
 4014544:	28c0030b 	ldhu	r3,12(r5)
 4014548:	defff404 	addi	sp,sp,-48
 401454c:	dd400715 	stw	r21,28(sp)
 4014550:	dd000615 	stw	r20,24(sp)
 4014554:	dc000215 	stw	r16,8(sp)
 4014558:	dfc00b15 	stw	ra,44(sp)
 401455c:	df000a15 	stw	fp,40(sp)
 4014560:	ddc00915 	stw	r23,36(sp)
 4014564:	dd800815 	stw	r22,32(sp)
 4014568:	dcc00515 	stw	r19,20(sp)
 401456c:	dc800415 	stw	r18,16(sp)
 4014570:	dc400315 	stw	r17,12(sp)
 4014574:	1880020c 	andi	r2,r3,8
 4014578:	2821883a 	mov	r16,r5
 401457c:	202b883a 	mov	r21,r4
 4014580:	3029883a 	mov	r20,r6
 4014584:	10002726 	beq	r2,zero,4014624 <__sfvwrite_r+0xe8>
 4014588:	28800417 	ldw	r2,16(r5)
 401458c:	10002526 	beq	r2,zero,4014624 <__sfvwrite_r+0xe8>
 4014590:	1880008c 	andi	r2,r3,2
 4014594:	a4400017 	ldw	r17,0(r20)
 4014598:	10002a26 	beq	r2,zero,4014644 <__sfvwrite_r+0x108>
 401459c:	05a00034 	movhi	r22,32768
 40145a0:	0027883a 	mov	r19,zero
 40145a4:	0025883a 	mov	r18,zero
 40145a8:	b5bf0004 	addi	r22,r22,-1024
 40145ac:	980d883a 	mov	r6,r19
 40145b0:	a809883a 	mov	r4,r21
 40145b4:	90004626 	beq	r18,zero,40146d0 <__sfvwrite_r+0x194>
 40145b8:	900f883a 	mov	r7,r18
 40145bc:	b480022e 	bgeu	r22,r18,40145c8 <__sfvwrite_r+0x8c>
 40145c0:	01e00034 	movhi	r7,32768
 40145c4:	39ff0004 	addi	r7,r7,-1024
 40145c8:	80800917 	ldw	r2,36(r16)
 40145cc:	81400717 	ldw	r5,28(r16)
 40145d0:	103ee83a 	callr	r2
 40145d4:	00805a0e 	bge	zero,r2,4014740 <__sfvwrite_r+0x204>
 40145d8:	a0c00217 	ldw	r3,8(r20)
 40145dc:	98a7883a 	add	r19,r19,r2
 40145e0:	90a5c83a 	sub	r18,r18,r2
 40145e4:	1885c83a 	sub	r2,r3,r2
 40145e8:	a0800215 	stw	r2,8(r20)
 40145ec:	103fef1e 	bne	r2,zero,40145ac <__alt_mem_onchip_memory2_0+0xfc01330c>
 40145f0:	0005883a 	mov	r2,zero
 40145f4:	dfc00b17 	ldw	ra,44(sp)
 40145f8:	df000a17 	ldw	fp,40(sp)
 40145fc:	ddc00917 	ldw	r23,36(sp)
 4014600:	dd800817 	ldw	r22,32(sp)
 4014604:	dd400717 	ldw	r21,28(sp)
 4014608:	dd000617 	ldw	r20,24(sp)
 401460c:	dcc00517 	ldw	r19,20(sp)
 4014610:	dc800417 	ldw	r18,16(sp)
 4014614:	dc400317 	ldw	r17,12(sp)
 4014618:	dc000217 	ldw	r16,8(sp)
 401461c:	dec00c04 	addi	sp,sp,48
 4014620:	f800283a 	ret
 4014624:	800b883a 	mov	r5,r16
 4014628:	a809883a 	mov	r4,r21
 401462c:	40120ac0 	call	40120ac <__swsetup_r>
 4014630:	1000ee1e 	bne	r2,zero,40149ec <__sfvwrite_r+0x4b0>
 4014634:	80c0030b 	ldhu	r3,12(r16)
 4014638:	a4400017 	ldw	r17,0(r20)
 401463c:	1880008c 	andi	r2,r3,2
 4014640:	103fd61e 	bne	r2,zero,401459c <__alt_mem_onchip_memory2_0+0xfc0132fc>
 4014644:	1880004c 	andi	r2,r3,1
 4014648:	1000421e 	bne	r2,zero,4014754 <__sfvwrite_r+0x218>
 401464c:	0039883a 	mov	fp,zero
 4014650:	0025883a 	mov	r18,zero
 4014654:	90001a26 	beq	r18,zero,40146c0 <__sfvwrite_r+0x184>
 4014658:	1880800c 	andi	r2,r3,512
 401465c:	84c00217 	ldw	r19,8(r16)
 4014660:	10002126 	beq	r2,zero,40146e8 <__sfvwrite_r+0x1ac>
 4014664:	982f883a 	mov	r23,r19
 4014668:	94c09636 	bltu	r18,r19,40148c4 <__sfvwrite_r+0x388>
 401466c:	1881200c 	andi	r2,r3,1152
 4014670:	1000a11e 	bne	r2,zero,40148f8 <__sfvwrite_r+0x3bc>
 4014674:	81000017 	ldw	r4,0(r16)
 4014678:	b80d883a 	mov	r6,r23
 401467c:	e00b883a 	mov	r5,fp
 4014680:	4014f080 	call	4014f08 <memmove>
 4014684:	80c00217 	ldw	r3,8(r16)
 4014688:	81000017 	ldw	r4,0(r16)
 401468c:	9005883a 	mov	r2,r18
 4014690:	1ce7c83a 	sub	r19,r3,r19
 4014694:	25cf883a 	add	r7,r4,r23
 4014698:	84c00215 	stw	r19,8(r16)
 401469c:	81c00015 	stw	r7,0(r16)
 40146a0:	a0c00217 	ldw	r3,8(r20)
 40146a4:	e0b9883a 	add	fp,fp,r2
 40146a8:	90a5c83a 	sub	r18,r18,r2
 40146ac:	18a7c83a 	sub	r19,r3,r2
 40146b0:	a4c00215 	stw	r19,8(r20)
 40146b4:	983fce26 	beq	r19,zero,40145f0 <__alt_mem_onchip_memory2_0+0xfc013350>
 40146b8:	80c0030b 	ldhu	r3,12(r16)
 40146bc:	903fe61e 	bne	r18,zero,4014658 <__alt_mem_onchip_memory2_0+0xfc0133b8>
 40146c0:	8f000017 	ldw	fp,0(r17)
 40146c4:	8c800117 	ldw	r18,4(r17)
 40146c8:	8c400204 	addi	r17,r17,8
 40146cc:	003fe106 	br	4014654 <__alt_mem_onchip_memory2_0+0xfc0133b4>
 40146d0:	8cc00017 	ldw	r19,0(r17)
 40146d4:	8c800117 	ldw	r18,4(r17)
 40146d8:	8c400204 	addi	r17,r17,8
 40146dc:	003fb306 	br	40145ac <__alt_mem_onchip_memory2_0+0xfc01330c>
 40146e0:	0005883a 	mov	r2,zero
 40146e4:	f800283a 	ret
 40146e8:	81000017 	ldw	r4,0(r16)
 40146ec:	80800417 	ldw	r2,16(r16)
 40146f0:	11005a36 	bltu	r2,r4,401485c <__sfvwrite_r+0x320>
 40146f4:	85c00517 	ldw	r23,20(r16)
 40146f8:	95c05836 	bltu	r18,r23,401485c <__sfvwrite_r+0x320>
 40146fc:	00a00034 	movhi	r2,32768
 4014700:	10bfffc4 	addi	r2,r2,-1
 4014704:	9009883a 	mov	r4,r18
 4014708:	1480012e 	bgeu	r2,r18,4014710 <__sfvwrite_r+0x1d4>
 401470c:	1009883a 	mov	r4,r2
 4014710:	b80b883a 	mov	r5,r23
 4014714:	400d92c0 	call	400d92c <__divsi3>
 4014718:	b80b883a 	mov	r5,r23
 401471c:	1009883a 	mov	r4,r2
 4014720:	400dae00 	call	400dae0 <__mulsi3>
 4014724:	81400717 	ldw	r5,28(r16)
 4014728:	80c00917 	ldw	r3,36(r16)
 401472c:	100f883a 	mov	r7,r2
 4014730:	e00d883a 	mov	r6,fp
 4014734:	a809883a 	mov	r4,r21
 4014738:	183ee83a 	callr	r3
 401473c:	00bfd816 	blt	zero,r2,40146a0 <__alt_mem_onchip_memory2_0+0xfc013400>
 4014740:	8080030b 	ldhu	r2,12(r16)
 4014744:	10801014 	ori	r2,r2,64
 4014748:	8080030d 	sth	r2,12(r16)
 401474c:	00bfffc4 	movi	r2,-1
 4014750:	003fa806 	br	40145f4 <__alt_mem_onchip_memory2_0+0xfc013354>
 4014754:	0027883a 	mov	r19,zero
 4014758:	0011883a 	mov	r8,zero
 401475c:	0039883a 	mov	fp,zero
 4014760:	0025883a 	mov	r18,zero
 4014764:	90001f26 	beq	r18,zero,40147e4 <__sfvwrite_r+0x2a8>
 4014768:	40005a26 	beq	r8,zero,40148d4 <__sfvwrite_r+0x398>
 401476c:	982d883a 	mov	r22,r19
 4014770:	94c0012e 	bgeu	r18,r19,4014778 <__sfvwrite_r+0x23c>
 4014774:	902d883a 	mov	r22,r18
 4014778:	81000017 	ldw	r4,0(r16)
 401477c:	80800417 	ldw	r2,16(r16)
 4014780:	b02f883a 	mov	r23,r22
 4014784:	81c00517 	ldw	r7,20(r16)
 4014788:	1100032e 	bgeu	r2,r4,4014798 <__sfvwrite_r+0x25c>
 401478c:	80c00217 	ldw	r3,8(r16)
 4014790:	38c7883a 	add	r3,r7,r3
 4014794:	1d801816 	blt	r3,r22,40147f8 <__sfvwrite_r+0x2bc>
 4014798:	b1c03e16 	blt	r22,r7,4014894 <__sfvwrite_r+0x358>
 401479c:	80800917 	ldw	r2,36(r16)
 40147a0:	81400717 	ldw	r5,28(r16)
 40147a4:	e00d883a 	mov	r6,fp
 40147a8:	da000115 	stw	r8,4(sp)
 40147ac:	a809883a 	mov	r4,r21
 40147b0:	103ee83a 	callr	r2
 40147b4:	102f883a 	mov	r23,r2
 40147b8:	da000117 	ldw	r8,4(sp)
 40147bc:	00bfe00e 	bge	zero,r2,4014740 <__alt_mem_onchip_memory2_0+0xfc0134a0>
 40147c0:	9de7c83a 	sub	r19,r19,r23
 40147c4:	98001f26 	beq	r19,zero,4014844 <__sfvwrite_r+0x308>
 40147c8:	a0800217 	ldw	r2,8(r20)
 40147cc:	e5f9883a 	add	fp,fp,r23
 40147d0:	95e5c83a 	sub	r18,r18,r23
 40147d4:	15efc83a 	sub	r23,r2,r23
 40147d8:	a5c00215 	stw	r23,8(r20)
 40147dc:	b83f8426 	beq	r23,zero,40145f0 <__alt_mem_onchip_memory2_0+0xfc013350>
 40147e0:	903fe11e 	bne	r18,zero,4014768 <__alt_mem_onchip_memory2_0+0xfc0134c8>
 40147e4:	8f000017 	ldw	fp,0(r17)
 40147e8:	8c800117 	ldw	r18,4(r17)
 40147ec:	0011883a 	mov	r8,zero
 40147f0:	8c400204 	addi	r17,r17,8
 40147f4:	003fdb06 	br	4014764 <__alt_mem_onchip_memory2_0+0xfc0134c4>
 40147f8:	180d883a 	mov	r6,r3
 40147fc:	e00b883a 	mov	r5,fp
 4014800:	da000115 	stw	r8,4(sp)
 4014804:	d8c00015 	stw	r3,0(sp)
 4014808:	4014f080 	call	4014f08 <memmove>
 401480c:	d8c00017 	ldw	r3,0(sp)
 4014810:	80800017 	ldw	r2,0(r16)
 4014814:	800b883a 	mov	r5,r16
 4014818:	a809883a 	mov	r4,r21
 401481c:	10c5883a 	add	r2,r2,r3
 4014820:	80800015 	stw	r2,0(r16)
 4014824:	d8c00015 	stw	r3,0(sp)
 4014828:	4013ccc0 	call	4013ccc <_fflush_r>
 401482c:	d8c00017 	ldw	r3,0(sp)
 4014830:	da000117 	ldw	r8,4(sp)
 4014834:	103fc21e 	bne	r2,zero,4014740 <__alt_mem_onchip_memory2_0+0xfc0134a0>
 4014838:	182f883a 	mov	r23,r3
 401483c:	9de7c83a 	sub	r19,r19,r23
 4014840:	983fe11e 	bne	r19,zero,40147c8 <__alt_mem_onchip_memory2_0+0xfc013528>
 4014844:	800b883a 	mov	r5,r16
 4014848:	a809883a 	mov	r4,r21
 401484c:	4013ccc0 	call	4013ccc <_fflush_r>
 4014850:	103fbb1e 	bne	r2,zero,4014740 <__alt_mem_onchip_memory2_0+0xfc0134a0>
 4014854:	0011883a 	mov	r8,zero
 4014858:	003fdb06 	br	40147c8 <__alt_mem_onchip_memory2_0+0xfc013528>
 401485c:	94c0012e 	bgeu	r18,r19,4014864 <__sfvwrite_r+0x328>
 4014860:	9027883a 	mov	r19,r18
 4014864:	980d883a 	mov	r6,r19
 4014868:	e00b883a 	mov	r5,fp
 401486c:	4014f080 	call	4014f08 <memmove>
 4014870:	80800217 	ldw	r2,8(r16)
 4014874:	80c00017 	ldw	r3,0(r16)
 4014878:	14c5c83a 	sub	r2,r2,r19
 401487c:	1cc7883a 	add	r3,r3,r19
 4014880:	80800215 	stw	r2,8(r16)
 4014884:	80c00015 	stw	r3,0(r16)
 4014888:	10004326 	beq	r2,zero,4014998 <__sfvwrite_r+0x45c>
 401488c:	9805883a 	mov	r2,r19
 4014890:	003f8306 	br	40146a0 <__alt_mem_onchip_memory2_0+0xfc013400>
 4014894:	b00d883a 	mov	r6,r22
 4014898:	e00b883a 	mov	r5,fp
 401489c:	da000115 	stw	r8,4(sp)
 40148a0:	4014f080 	call	4014f08 <memmove>
 40148a4:	80800217 	ldw	r2,8(r16)
 40148a8:	80c00017 	ldw	r3,0(r16)
 40148ac:	da000117 	ldw	r8,4(sp)
 40148b0:	1585c83a 	sub	r2,r2,r22
 40148b4:	1dad883a 	add	r22,r3,r22
 40148b8:	80800215 	stw	r2,8(r16)
 40148bc:	85800015 	stw	r22,0(r16)
 40148c0:	003fbf06 	br	40147c0 <__alt_mem_onchip_memory2_0+0xfc013520>
 40148c4:	81000017 	ldw	r4,0(r16)
 40148c8:	9027883a 	mov	r19,r18
 40148cc:	902f883a 	mov	r23,r18
 40148d0:	003f6906 	br	4014678 <__alt_mem_onchip_memory2_0+0xfc0133d8>
 40148d4:	900d883a 	mov	r6,r18
 40148d8:	01400284 	movi	r5,10
 40148dc:	e009883a 	mov	r4,fp
 40148e0:	4014e240 	call	4014e24 <memchr>
 40148e4:	10003e26 	beq	r2,zero,40149e0 <__sfvwrite_r+0x4a4>
 40148e8:	10800044 	addi	r2,r2,1
 40148ec:	1727c83a 	sub	r19,r2,fp
 40148f0:	02000044 	movi	r8,1
 40148f4:	003f9d06 	br	401476c <__alt_mem_onchip_memory2_0+0xfc0134cc>
 40148f8:	80800517 	ldw	r2,20(r16)
 40148fc:	81400417 	ldw	r5,16(r16)
 4014900:	81c00017 	ldw	r7,0(r16)
 4014904:	10a7883a 	add	r19,r2,r2
 4014908:	9885883a 	add	r2,r19,r2
 401490c:	1026d7fa 	srli	r19,r2,31
 4014910:	396dc83a 	sub	r22,r7,r5
 4014914:	b1000044 	addi	r4,r22,1
 4014918:	9885883a 	add	r2,r19,r2
 401491c:	1027d07a 	srai	r19,r2,1
 4014920:	2485883a 	add	r2,r4,r18
 4014924:	980d883a 	mov	r6,r19
 4014928:	9880022e 	bgeu	r19,r2,4014934 <__sfvwrite_r+0x3f8>
 401492c:	1027883a 	mov	r19,r2
 4014930:	100d883a 	mov	r6,r2
 4014934:	18c1000c 	andi	r3,r3,1024
 4014938:	18001c26 	beq	r3,zero,40149ac <__sfvwrite_r+0x470>
 401493c:	300b883a 	mov	r5,r6
 4014940:	a809883a 	mov	r4,r21
 4014944:	400ec480 	call	400ec48 <_malloc_r>
 4014948:	102f883a 	mov	r23,r2
 401494c:	10002926 	beq	r2,zero,40149f4 <__sfvwrite_r+0x4b8>
 4014950:	81400417 	ldw	r5,16(r16)
 4014954:	b00d883a 	mov	r6,r22
 4014958:	1009883a 	mov	r4,r2
 401495c:	400f4540 	call	400f454 <memcpy>
 4014960:	8080030b 	ldhu	r2,12(r16)
 4014964:	00fedfc4 	movi	r3,-1153
 4014968:	10c4703a 	and	r2,r2,r3
 401496c:	10802014 	ori	r2,r2,128
 4014970:	8080030d 	sth	r2,12(r16)
 4014974:	bd89883a 	add	r4,r23,r22
 4014978:	9d8fc83a 	sub	r7,r19,r22
 401497c:	85c00415 	stw	r23,16(r16)
 4014980:	84c00515 	stw	r19,20(r16)
 4014984:	81000015 	stw	r4,0(r16)
 4014988:	9027883a 	mov	r19,r18
 401498c:	81c00215 	stw	r7,8(r16)
 4014990:	902f883a 	mov	r23,r18
 4014994:	003f3806 	br	4014678 <__alt_mem_onchip_memory2_0+0xfc0133d8>
 4014998:	800b883a 	mov	r5,r16
 401499c:	a809883a 	mov	r4,r21
 40149a0:	4013ccc0 	call	4013ccc <_fflush_r>
 40149a4:	103fb926 	beq	r2,zero,401488c <__alt_mem_onchip_memory2_0+0xfc0135ec>
 40149a8:	003f6506 	br	4014740 <__alt_mem_onchip_memory2_0+0xfc0134a0>
 40149ac:	a809883a 	mov	r4,r21
 40149b0:	40162840 	call	4016284 <_realloc_r>
 40149b4:	102f883a 	mov	r23,r2
 40149b8:	103fee1e 	bne	r2,zero,4014974 <__alt_mem_onchip_memory2_0+0xfc0136d4>
 40149bc:	81400417 	ldw	r5,16(r16)
 40149c0:	a809883a 	mov	r4,r21
 40149c4:	401422c0 	call	401422c <_free_r>
 40149c8:	8080030b 	ldhu	r2,12(r16)
 40149cc:	00ffdfc4 	movi	r3,-129
 40149d0:	1884703a 	and	r2,r3,r2
 40149d4:	00c00304 	movi	r3,12
 40149d8:	a8c00015 	stw	r3,0(r21)
 40149dc:	003f5906 	br	4014744 <__alt_mem_onchip_memory2_0+0xfc0134a4>
 40149e0:	94c00044 	addi	r19,r18,1
 40149e4:	02000044 	movi	r8,1
 40149e8:	003f6006 	br	401476c <__alt_mem_onchip_memory2_0+0xfc0134cc>
 40149ec:	00bfffc4 	movi	r2,-1
 40149f0:	003f0006 	br	40145f4 <__alt_mem_onchip_memory2_0+0xfc013354>
 40149f4:	00800304 	movi	r2,12
 40149f8:	a8800015 	stw	r2,0(r21)
 40149fc:	8080030b 	ldhu	r2,12(r16)
 4014a00:	003f5006 	br	4014744 <__alt_mem_onchip_memory2_0+0xfc0134a4>

04014a04 <_fwalk>:
 4014a04:	defff704 	addi	sp,sp,-36
 4014a08:	dd000415 	stw	r20,16(sp)
 4014a0c:	dfc00815 	stw	ra,32(sp)
 4014a10:	ddc00715 	stw	r23,28(sp)
 4014a14:	dd800615 	stw	r22,24(sp)
 4014a18:	dd400515 	stw	r21,20(sp)
 4014a1c:	dcc00315 	stw	r19,12(sp)
 4014a20:	dc800215 	stw	r18,8(sp)
 4014a24:	dc400115 	stw	r17,4(sp)
 4014a28:	dc000015 	stw	r16,0(sp)
 4014a2c:	2500b804 	addi	r20,r4,736
 4014a30:	a0002326 	beq	r20,zero,4014ac0 <_fwalk+0xbc>
 4014a34:	282b883a 	mov	r21,r5
 4014a38:	002f883a 	mov	r23,zero
 4014a3c:	05800044 	movi	r22,1
 4014a40:	04ffffc4 	movi	r19,-1
 4014a44:	a4400117 	ldw	r17,4(r20)
 4014a48:	a4800217 	ldw	r18,8(r20)
 4014a4c:	8c7fffc4 	addi	r17,r17,-1
 4014a50:	88000d16 	blt	r17,zero,4014a88 <_fwalk+0x84>
 4014a54:	94000304 	addi	r16,r18,12
 4014a58:	94800384 	addi	r18,r18,14
 4014a5c:	8080000b 	ldhu	r2,0(r16)
 4014a60:	8c7fffc4 	addi	r17,r17,-1
 4014a64:	813ffd04 	addi	r4,r16,-12
 4014a68:	b080042e 	bgeu	r22,r2,4014a7c <_fwalk+0x78>
 4014a6c:	9080000f 	ldh	r2,0(r18)
 4014a70:	14c00226 	beq	r2,r19,4014a7c <_fwalk+0x78>
 4014a74:	a83ee83a 	callr	r21
 4014a78:	b8aeb03a 	or	r23,r23,r2
 4014a7c:	84001a04 	addi	r16,r16,104
 4014a80:	94801a04 	addi	r18,r18,104
 4014a84:	8cfff51e 	bne	r17,r19,4014a5c <__alt_mem_onchip_memory2_0+0xfc0137bc>
 4014a88:	a5000017 	ldw	r20,0(r20)
 4014a8c:	a03fed1e 	bne	r20,zero,4014a44 <__alt_mem_onchip_memory2_0+0xfc0137a4>
 4014a90:	b805883a 	mov	r2,r23
 4014a94:	dfc00817 	ldw	ra,32(sp)
 4014a98:	ddc00717 	ldw	r23,28(sp)
 4014a9c:	dd800617 	ldw	r22,24(sp)
 4014aa0:	dd400517 	ldw	r21,20(sp)
 4014aa4:	dd000417 	ldw	r20,16(sp)
 4014aa8:	dcc00317 	ldw	r19,12(sp)
 4014aac:	dc800217 	ldw	r18,8(sp)
 4014ab0:	dc400117 	ldw	r17,4(sp)
 4014ab4:	dc000017 	ldw	r16,0(sp)
 4014ab8:	dec00904 	addi	sp,sp,36
 4014abc:	f800283a 	ret
 4014ac0:	002f883a 	mov	r23,zero
 4014ac4:	003ff206 	br	4014a90 <__alt_mem_onchip_memory2_0+0xfc0137f0>

04014ac8 <_fwalk_reent>:
 4014ac8:	defff704 	addi	sp,sp,-36
 4014acc:	dd000415 	stw	r20,16(sp)
 4014ad0:	dfc00815 	stw	ra,32(sp)
 4014ad4:	ddc00715 	stw	r23,28(sp)
 4014ad8:	dd800615 	stw	r22,24(sp)
 4014adc:	dd400515 	stw	r21,20(sp)
 4014ae0:	dcc00315 	stw	r19,12(sp)
 4014ae4:	dc800215 	stw	r18,8(sp)
 4014ae8:	dc400115 	stw	r17,4(sp)
 4014aec:	dc000015 	stw	r16,0(sp)
 4014af0:	2500b804 	addi	r20,r4,736
 4014af4:	a0002326 	beq	r20,zero,4014b84 <_fwalk_reent+0xbc>
 4014af8:	282b883a 	mov	r21,r5
 4014afc:	2027883a 	mov	r19,r4
 4014b00:	002f883a 	mov	r23,zero
 4014b04:	05800044 	movi	r22,1
 4014b08:	04bfffc4 	movi	r18,-1
 4014b0c:	a4400117 	ldw	r17,4(r20)
 4014b10:	a4000217 	ldw	r16,8(r20)
 4014b14:	8c7fffc4 	addi	r17,r17,-1
 4014b18:	88000c16 	blt	r17,zero,4014b4c <_fwalk_reent+0x84>
 4014b1c:	84000304 	addi	r16,r16,12
 4014b20:	8080000b 	ldhu	r2,0(r16)
 4014b24:	8c7fffc4 	addi	r17,r17,-1
 4014b28:	817ffd04 	addi	r5,r16,-12
 4014b2c:	b080052e 	bgeu	r22,r2,4014b44 <_fwalk_reent+0x7c>
 4014b30:	8080008f 	ldh	r2,2(r16)
 4014b34:	9809883a 	mov	r4,r19
 4014b38:	14800226 	beq	r2,r18,4014b44 <_fwalk_reent+0x7c>
 4014b3c:	a83ee83a 	callr	r21
 4014b40:	b8aeb03a 	or	r23,r23,r2
 4014b44:	84001a04 	addi	r16,r16,104
 4014b48:	8cbff51e 	bne	r17,r18,4014b20 <__alt_mem_onchip_memory2_0+0xfc013880>
 4014b4c:	a5000017 	ldw	r20,0(r20)
 4014b50:	a03fee1e 	bne	r20,zero,4014b0c <__alt_mem_onchip_memory2_0+0xfc01386c>
 4014b54:	b805883a 	mov	r2,r23
 4014b58:	dfc00817 	ldw	ra,32(sp)
 4014b5c:	ddc00717 	ldw	r23,28(sp)
 4014b60:	dd800617 	ldw	r22,24(sp)
 4014b64:	dd400517 	ldw	r21,20(sp)
 4014b68:	dd000417 	ldw	r20,16(sp)
 4014b6c:	dcc00317 	ldw	r19,12(sp)
 4014b70:	dc800217 	ldw	r18,8(sp)
 4014b74:	dc400117 	ldw	r17,4(sp)
 4014b78:	dc000017 	ldw	r16,0(sp)
 4014b7c:	dec00904 	addi	sp,sp,36
 4014b80:	f800283a 	ret
 4014b84:	002f883a 	mov	r23,zero
 4014b88:	003ff206 	br	4014b54 <__alt_mem_onchip_memory2_0+0xfc0138b4>

04014b8c <_setlocale_r>:
 4014b8c:	30001b26 	beq	r6,zero,4014bfc <_setlocale_r+0x70>
 4014b90:	014100b4 	movhi	r5,1026
 4014b94:	defffe04 	addi	sp,sp,-8
 4014b98:	295eb104 	addi	r5,r5,31428
 4014b9c:	3009883a 	mov	r4,r6
 4014ba0:	dc000015 	stw	r16,0(sp)
 4014ba4:	dfc00115 	stw	ra,4(sp)
 4014ba8:	3021883a 	mov	r16,r6
 4014bac:	400fb7c0 	call	400fb7c <strcmp>
 4014bb0:	1000061e 	bne	r2,zero,4014bcc <_setlocale_r+0x40>
 4014bb4:	008100b4 	movhi	r2,1026
 4014bb8:	109e9204 	addi	r2,r2,31304
 4014bbc:	dfc00117 	ldw	ra,4(sp)
 4014bc0:	dc000017 	ldw	r16,0(sp)
 4014bc4:	dec00204 	addi	sp,sp,8
 4014bc8:	f800283a 	ret
 4014bcc:	014100b4 	movhi	r5,1026
 4014bd0:	295e9204 	addi	r5,r5,31304
 4014bd4:	8009883a 	mov	r4,r16
 4014bd8:	400fb7c0 	call	400fb7c <strcmp>
 4014bdc:	103ff526 	beq	r2,zero,4014bb4 <__alt_mem_onchip_memory2_0+0xfc013914>
 4014be0:	014100b4 	movhi	r5,1026
 4014be4:	295e9c04 	addi	r5,r5,31344
 4014be8:	8009883a 	mov	r4,r16
 4014bec:	400fb7c0 	call	400fb7c <strcmp>
 4014bf0:	103ff026 	beq	r2,zero,4014bb4 <__alt_mem_onchip_memory2_0+0xfc013914>
 4014bf4:	0005883a 	mov	r2,zero
 4014bf8:	003ff006 	br	4014bbc <__alt_mem_onchip_memory2_0+0xfc01391c>
 4014bfc:	008100b4 	movhi	r2,1026
 4014c00:	109e9204 	addi	r2,r2,31304
 4014c04:	f800283a 	ret

04014c08 <__locale_charset>:
 4014c08:	008100f4 	movhi	r2,1027
 4014c0c:	10a13004 	addi	r2,r2,-31552
 4014c10:	f800283a 	ret

04014c14 <__locale_mb_cur_max>:
 4014c14:	008100f4 	movhi	r2,1027
 4014c18:	10ab8604 	addi	r2,r2,-20968
 4014c1c:	10800017 	ldw	r2,0(r2)
 4014c20:	f800283a 	ret

04014c24 <__locale_msgcharset>:
 4014c24:	008100f4 	movhi	r2,1027
 4014c28:	10a12804 	addi	r2,r2,-31584
 4014c2c:	f800283a 	ret

04014c30 <__locale_cjk_lang>:
 4014c30:	0005883a 	mov	r2,zero
 4014c34:	f800283a 	ret

04014c38 <_localeconv_r>:
 4014c38:	008100f4 	movhi	r2,1027
 4014c3c:	10a13804 	addi	r2,r2,-31520
 4014c40:	f800283a 	ret

04014c44 <setlocale>:
 4014c44:	008100f4 	movhi	r2,1027
 4014c48:	10ab8304 	addi	r2,r2,-20980
 4014c4c:	280d883a 	mov	r6,r5
 4014c50:	200b883a 	mov	r5,r4
 4014c54:	11000017 	ldw	r4,0(r2)
 4014c58:	4014b8c1 	jmpi	4014b8c <_setlocale_r>

04014c5c <localeconv>:
 4014c5c:	008100f4 	movhi	r2,1027
 4014c60:	10a13804 	addi	r2,r2,-31520
 4014c64:	f800283a 	ret

04014c68 <__smakebuf_r>:
 4014c68:	2880030b 	ldhu	r2,12(r5)
 4014c6c:	10c0008c 	andi	r3,r2,2
 4014c70:	1800411e 	bne	r3,zero,4014d78 <__smakebuf_r+0x110>
 4014c74:	deffec04 	addi	sp,sp,-80
 4014c78:	dc000f15 	stw	r16,60(sp)
 4014c7c:	2821883a 	mov	r16,r5
 4014c80:	2940038f 	ldh	r5,14(r5)
 4014c84:	dc401015 	stw	r17,64(sp)
 4014c88:	dfc01315 	stw	ra,76(sp)
 4014c8c:	dcc01215 	stw	r19,72(sp)
 4014c90:	dc801115 	stw	r18,68(sp)
 4014c94:	2023883a 	mov	r17,r4
 4014c98:	28001c16 	blt	r5,zero,4014d0c <__smakebuf_r+0xa4>
 4014c9c:	d80d883a 	mov	r6,sp
 4014ca0:	40186840 	call	4018684 <_fstat_r>
 4014ca4:	10001816 	blt	r2,zero,4014d08 <__smakebuf_r+0xa0>
 4014ca8:	d8800117 	ldw	r2,4(sp)
 4014cac:	00e00014 	movui	r3,32768
 4014cb0:	10bc000c 	andi	r2,r2,61440
 4014cb4:	14c80020 	cmpeqi	r19,r2,8192
 4014cb8:	10c03726 	beq	r2,r3,4014d98 <__smakebuf_r+0x130>
 4014cbc:	80c0030b 	ldhu	r3,12(r16)
 4014cc0:	18c20014 	ori	r3,r3,2048
 4014cc4:	80c0030d 	sth	r3,12(r16)
 4014cc8:	00c80004 	movi	r3,8192
 4014ccc:	10c0521e 	bne	r2,r3,4014e18 <__smakebuf_r+0x1b0>
 4014cd0:	8140038f 	ldh	r5,14(r16)
 4014cd4:	8809883a 	mov	r4,r17
 4014cd8:	40186e00 	call	40186e0 <_isatty_r>
 4014cdc:	10004c26 	beq	r2,zero,4014e10 <__smakebuf_r+0x1a8>
 4014ce0:	8080030b 	ldhu	r2,12(r16)
 4014ce4:	80c010c4 	addi	r3,r16,67
 4014ce8:	80c00015 	stw	r3,0(r16)
 4014cec:	10800054 	ori	r2,r2,1
 4014cf0:	8080030d 	sth	r2,12(r16)
 4014cf4:	00800044 	movi	r2,1
 4014cf8:	80c00415 	stw	r3,16(r16)
 4014cfc:	80800515 	stw	r2,20(r16)
 4014d00:	04810004 	movi	r18,1024
 4014d04:	00000706 	br	4014d24 <__smakebuf_r+0xbc>
 4014d08:	8080030b 	ldhu	r2,12(r16)
 4014d0c:	10c0200c 	andi	r3,r2,128
 4014d10:	18001f1e 	bne	r3,zero,4014d90 <__smakebuf_r+0x128>
 4014d14:	04810004 	movi	r18,1024
 4014d18:	10820014 	ori	r2,r2,2048
 4014d1c:	8080030d 	sth	r2,12(r16)
 4014d20:	0027883a 	mov	r19,zero
 4014d24:	900b883a 	mov	r5,r18
 4014d28:	8809883a 	mov	r4,r17
 4014d2c:	400ec480 	call	400ec48 <_malloc_r>
 4014d30:	10002c26 	beq	r2,zero,4014de4 <__smakebuf_r+0x17c>
 4014d34:	80c0030b 	ldhu	r3,12(r16)
 4014d38:	01010074 	movhi	r4,1025
 4014d3c:	210f5804 	addi	r4,r4,15712
 4014d40:	89000f15 	stw	r4,60(r17)
 4014d44:	18c02014 	ori	r3,r3,128
 4014d48:	80c0030d 	sth	r3,12(r16)
 4014d4c:	80800015 	stw	r2,0(r16)
 4014d50:	80800415 	stw	r2,16(r16)
 4014d54:	84800515 	stw	r18,20(r16)
 4014d58:	98001a1e 	bne	r19,zero,4014dc4 <__smakebuf_r+0x15c>
 4014d5c:	dfc01317 	ldw	ra,76(sp)
 4014d60:	dcc01217 	ldw	r19,72(sp)
 4014d64:	dc801117 	ldw	r18,68(sp)
 4014d68:	dc401017 	ldw	r17,64(sp)
 4014d6c:	dc000f17 	ldw	r16,60(sp)
 4014d70:	dec01404 	addi	sp,sp,80
 4014d74:	f800283a 	ret
 4014d78:	288010c4 	addi	r2,r5,67
 4014d7c:	28800015 	stw	r2,0(r5)
 4014d80:	28800415 	stw	r2,16(r5)
 4014d84:	00800044 	movi	r2,1
 4014d88:	28800515 	stw	r2,20(r5)
 4014d8c:	f800283a 	ret
 4014d90:	04801004 	movi	r18,64
 4014d94:	003fe006 	br	4014d18 <__alt_mem_onchip_memory2_0+0xfc013a78>
 4014d98:	81000a17 	ldw	r4,40(r16)
 4014d9c:	00c10074 	movhi	r3,1025
 4014da0:	18da4d04 	addi	r3,r3,26932
 4014da4:	20ffc51e 	bne	r4,r3,4014cbc <__alt_mem_onchip_memory2_0+0xfc013a1c>
 4014da8:	8080030b 	ldhu	r2,12(r16)
 4014dac:	04810004 	movi	r18,1024
 4014db0:	84801315 	stw	r18,76(r16)
 4014db4:	1484b03a 	or	r2,r2,r18
 4014db8:	8080030d 	sth	r2,12(r16)
 4014dbc:	0027883a 	mov	r19,zero
 4014dc0:	003fd806 	br	4014d24 <__alt_mem_onchip_memory2_0+0xfc013a84>
 4014dc4:	8140038f 	ldh	r5,14(r16)
 4014dc8:	8809883a 	mov	r4,r17
 4014dcc:	40186e00 	call	40186e0 <_isatty_r>
 4014dd0:	103fe226 	beq	r2,zero,4014d5c <__alt_mem_onchip_memory2_0+0xfc013abc>
 4014dd4:	8080030b 	ldhu	r2,12(r16)
 4014dd8:	10800054 	ori	r2,r2,1
 4014ddc:	8080030d 	sth	r2,12(r16)
 4014de0:	003fde06 	br	4014d5c <__alt_mem_onchip_memory2_0+0xfc013abc>
 4014de4:	8080030b 	ldhu	r2,12(r16)
 4014de8:	10c0800c 	andi	r3,r2,512
 4014dec:	183fdb1e 	bne	r3,zero,4014d5c <__alt_mem_onchip_memory2_0+0xfc013abc>
 4014df0:	10800094 	ori	r2,r2,2
 4014df4:	80c010c4 	addi	r3,r16,67
 4014df8:	8080030d 	sth	r2,12(r16)
 4014dfc:	00800044 	movi	r2,1
 4014e00:	80c00015 	stw	r3,0(r16)
 4014e04:	80c00415 	stw	r3,16(r16)
 4014e08:	80800515 	stw	r2,20(r16)
 4014e0c:	003fd306 	br	4014d5c <__alt_mem_onchip_memory2_0+0xfc013abc>
 4014e10:	04810004 	movi	r18,1024
 4014e14:	003fc306 	br	4014d24 <__alt_mem_onchip_memory2_0+0xfc013a84>
 4014e18:	0027883a 	mov	r19,zero
 4014e1c:	04810004 	movi	r18,1024
 4014e20:	003fc006 	br	4014d24 <__alt_mem_onchip_memory2_0+0xfc013a84>

04014e24 <memchr>:
 4014e24:	208000cc 	andi	r2,r4,3
 4014e28:	280f883a 	mov	r7,r5
 4014e2c:	10003426 	beq	r2,zero,4014f00 <memchr+0xdc>
 4014e30:	30bfffc4 	addi	r2,r6,-1
 4014e34:	30001a26 	beq	r6,zero,4014ea0 <memchr+0x7c>
 4014e38:	20c00003 	ldbu	r3,0(r4)
 4014e3c:	29803fcc 	andi	r6,r5,255
 4014e40:	30c0051e 	bne	r6,r3,4014e58 <memchr+0x34>
 4014e44:	00001806 	br	4014ea8 <memchr+0x84>
 4014e48:	10001526 	beq	r2,zero,4014ea0 <memchr+0x7c>
 4014e4c:	20c00003 	ldbu	r3,0(r4)
 4014e50:	10bfffc4 	addi	r2,r2,-1
 4014e54:	30c01426 	beq	r6,r3,4014ea8 <memchr+0x84>
 4014e58:	21000044 	addi	r4,r4,1
 4014e5c:	20c000cc 	andi	r3,r4,3
 4014e60:	183ff91e 	bne	r3,zero,4014e48 <__alt_mem_onchip_memory2_0+0xfc013ba8>
 4014e64:	020000c4 	movi	r8,3
 4014e68:	40801136 	bltu	r8,r2,4014eb0 <memchr+0x8c>
 4014e6c:	10000c26 	beq	r2,zero,4014ea0 <memchr+0x7c>
 4014e70:	20c00003 	ldbu	r3,0(r4)
 4014e74:	29403fcc 	andi	r5,r5,255
 4014e78:	28c00b26 	beq	r5,r3,4014ea8 <memchr+0x84>
 4014e7c:	20c00044 	addi	r3,r4,1
 4014e80:	39803fcc 	andi	r6,r7,255
 4014e84:	2089883a 	add	r4,r4,r2
 4014e88:	00000306 	br	4014e98 <memchr+0x74>
 4014e8c:	18c00044 	addi	r3,r3,1
 4014e90:	197fffc3 	ldbu	r5,-1(r3)
 4014e94:	31400526 	beq	r6,r5,4014eac <memchr+0x88>
 4014e98:	1805883a 	mov	r2,r3
 4014e9c:	20fffb1e 	bne	r4,r3,4014e8c <__alt_mem_onchip_memory2_0+0xfc013bec>
 4014ea0:	0005883a 	mov	r2,zero
 4014ea4:	f800283a 	ret
 4014ea8:	2005883a 	mov	r2,r4
 4014eac:	f800283a 	ret
 4014eb0:	28c03fcc 	andi	r3,r5,255
 4014eb4:	1812923a 	slli	r9,r3,8
 4014eb8:	02ffbff4 	movhi	r11,65279
 4014ebc:	02a02074 	movhi	r10,32897
 4014ec0:	48d2b03a 	or	r9,r9,r3
 4014ec4:	4806943a 	slli	r3,r9,16
 4014ec8:	5affbfc4 	addi	r11,r11,-257
 4014ecc:	52a02004 	addi	r10,r10,-32640
 4014ed0:	48d2b03a 	or	r9,r9,r3
 4014ed4:	20c00017 	ldw	r3,0(r4)
 4014ed8:	48c6f03a 	xor	r3,r9,r3
 4014edc:	1acd883a 	add	r6,r3,r11
 4014ee0:	00c6303a 	nor	r3,zero,r3
 4014ee4:	30c6703a 	and	r3,r6,r3
 4014ee8:	1a86703a 	and	r3,r3,r10
 4014eec:	183fe01e 	bne	r3,zero,4014e70 <__alt_mem_onchip_memory2_0+0xfc013bd0>
 4014ef0:	10bfff04 	addi	r2,r2,-4
 4014ef4:	21000104 	addi	r4,r4,4
 4014ef8:	40bff636 	bltu	r8,r2,4014ed4 <__alt_mem_onchip_memory2_0+0xfc013c34>
 4014efc:	003fdb06 	br	4014e6c <__alt_mem_onchip_memory2_0+0xfc013bcc>
 4014f00:	3005883a 	mov	r2,r6
 4014f04:	003fd706 	br	4014e64 <__alt_mem_onchip_memory2_0+0xfc013bc4>

04014f08 <memmove>:
 4014f08:	2005883a 	mov	r2,r4
 4014f0c:	29000b2e 	bgeu	r5,r4,4014f3c <memmove+0x34>
 4014f10:	298f883a 	add	r7,r5,r6
 4014f14:	21c0092e 	bgeu	r4,r7,4014f3c <memmove+0x34>
 4014f18:	2187883a 	add	r3,r4,r6
 4014f1c:	198bc83a 	sub	r5,r3,r6
 4014f20:	30004826 	beq	r6,zero,4015044 <memmove+0x13c>
 4014f24:	39ffffc4 	addi	r7,r7,-1
 4014f28:	39000003 	ldbu	r4,0(r7)
 4014f2c:	18ffffc4 	addi	r3,r3,-1
 4014f30:	19000005 	stb	r4,0(r3)
 4014f34:	28fffb1e 	bne	r5,r3,4014f24 <__alt_mem_onchip_memory2_0+0xfc013c84>
 4014f38:	f800283a 	ret
 4014f3c:	00c003c4 	movi	r3,15
 4014f40:	1980412e 	bgeu	r3,r6,4015048 <memmove+0x140>
 4014f44:	2886b03a 	or	r3,r5,r2
 4014f48:	18c000cc 	andi	r3,r3,3
 4014f4c:	1800401e 	bne	r3,zero,4015050 <memmove+0x148>
 4014f50:	33fffc04 	addi	r15,r6,-16
 4014f54:	781ed13a 	srli	r15,r15,4
 4014f58:	28c00104 	addi	r3,r5,4
 4014f5c:	13400104 	addi	r13,r2,4
 4014f60:	781c913a 	slli	r14,r15,4
 4014f64:	2b000204 	addi	r12,r5,8
 4014f68:	12c00204 	addi	r11,r2,8
 4014f6c:	73800504 	addi	r14,r14,20
 4014f70:	2a800304 	addi	r10,r5,12
 4014f74:	12400304 	addi	r9,r2,12
 4014f78:	2b9d883a 	add	r14,r5,r14
 4014f7c:	2811883a 	mov	r8,r5
 4014f80:	100f883a 	mov	r7,r2
 4014f84:	41000017 	ldw	r4,0(r8)
 4014f88:	39c00404 	addi	r7,r7,16
 4014f8c:	18c00404 	addi	r3,r3,16
 4014f90:	393ffc15 	stw	r4,-16(r7)
 4014f94:	193ffc17 	ldw	r4,-16(r3)
 4014f98:	6b400404 	addi	r13,r13,16
 4014f9c:	5ac00404 	addi	r11,r11,16
 4014fa0:	693ffc15 	stw	r4,-16(r13)
 4014fa4:	61000017 	ldw	r4,0(r12)
 4014fa8:	4a400404 	addi	r9,r9,16
 4014fac:	42000404 	addi	r8,r8,16
 4014fb0:	593ffc15 	stw	r4,-16(r11)
 4014fb4:	51000017 	ldw	r4,0(r10)
 4014fb8:	63000404 	addi	r12,r12,16
 4014fbc:	52800404 	addi	r10,r10,16
 4014fc0:	493ffc15 	stw	r4,-16(r9)
 4014fc4:	1bbfef1e 	bne	r3,r14,4014f84 <__alt_mem_onchip_memory2_0+0xfc013ce4>
 4014fc8:	79000044 	addi	r4,r15,1
 4014fcc:	2008913a 	slli	r4,r4,4
 4014fd0:	328003cc 	andi	r10,r6,15
 4014fd4:	02c000c4 	movi	r11,3
 4014fd8:	1107883a 	add	r3,r2,r4
 4014fdc:	290b883a 	add	r5,r5,r4
 4014fe0:	5a801e2e 	bgeu	r11,r10,401505c <memmove+0x154>
 4014fe4:	1813883a 	mov	r9,r3
 4014fe8:	2811883a 	mov	r8,r5
 4014fec:	500f883a 	mov	r7,r10
 4014ff0:	41000017 	ldw	r4,0(r8)
 4014ff4:	4a400104 	addi	r9,r9,4
 4014ff8:	39ffff04 	addi	r7,r7,-4
 4014ffc:	493fff15 	stw	r4,-4(r9)
 4015000:	42000104 	addi	r8,r8,4
 4015004:	59fffa36 	bltu	r11,r7,4014ff0 <__alt_mem_onchip_memory2_0+0xfc013d50>
 4015008:	513fff04 	addi	r4,r10,-4
 401500c:	2008d0ba 	srli	r4,r4,2
 4015010:	318000cc 	andi	r6,r6,3
 4015014:	21000044 	addi	r4,r4,1
 4015018:	2109883a 	add	r4,r4,r4
 401501c:	2109883a 	add	r4,r4,r4
 4015020:	1907883a 	add	r3,r3,r4
 4015024:	290b883a 	add	r5,r5,r4
 4015028:	30000b26 	beq	r6,zero,4015058 <memmove+0x150>
 401502c:	198d883a 	add	r6,r3,r6
 4015030:	29c00003 	ldbu	r7,0(r5)
 4015034:	18c00044 	addi	r3,r3,1
 4015038:	29400044 	addi	r5,r5,1
 401503c:	19ffffc5 	stb	r7,-1(r3)
 4015040:	19bffb1e 	bne	r3,r6,4015030 <__alt_mem_onchip_memory2_0+0xfc013d90>
 4015044:	f800283a 	ret
 4015048:	1007883a 	mov	r3,r2
 401504c:	003ff606 	br	4015028 <__alt_mem_onchip_memory2_0+0xfc013d88>
 4015050:	1007883a 	mov	r3,r2
 4015054:	003ff506 	br	401502c <__alt_mem_onchip_memory2_0+0xfc013d8c>
 4015058:	f800283a 	ret
 401505c:	500d883a 	mov	r6,r10
 4015060:	003ff106 	br	4015028 <__alt_mem_onchip_memory2_0+0xfc013d88>

04015064 <_Balloc>:
 4015064:	20801317 	ldw	r2,76(r4)
 4015068:	defffc04 	addi	sp,sp,-16
 401506c:	dc400115 	stw	r17,4(sp)
 4015070:	dc000015 	stw	r16,0(sp)
 4015074:	dfc00315 	stw	ra,12(sp)
 4015078:	dc800215 	stw	r18,8(sp)
 401507c:	2023883a 	mov	r17,r4
 4015080:	2821883a 	mov	r16,r5
 4015084:	10000f26 	beq	r2,zero,40150c4 <_Balloc+0x60>
 4015088:	8407883a 	add	r3,r16,r16
 401508c:	18c7883a 	add	r3,r3,r3
 4015090:	10c7883a 	add	r3,r2,r3
 4015094:	18800017 	ldw	r2,0(r3)
 4015098:	10001126 	beq	r2,zero,40150e0 <_Balloc+0x7c>
 401509c:	11000017 	ldw	r4,0(r2)
 40150a0:	19000015 	stw	r4,0(r3)
 40150a4:	10000415 	stw	zero,16(r2)
 40150a8:	10000315 	stw	zero,12(r2)
 40150ac:	dfc00317 	ldw	ra,12(sp)
 40150b0:	dc800217 	ldw	r18,8(sp)
 40150b4:	dc400117 	ldw	r17,4(sp)
 40150b8:	dc000017 	ldw	r16,0(sp)
 40150bc:	dec00404 	addi	sp,sp,16
 40150c0:	f800283a 	ret
 40150c4:	01800844 	movi	r6,33
 40150c8:	01400104 	movi	r5,4
 40150cc:	401829c0 	call	401829c <_calloc_r>
 40150d0:	88801315 	stw	r2,76(r17)
 40150d4:	103fec1e 	bne	r2,zero,4015088 <__alt_mem_onchip_memory2_0+0xfc013de8>
 40150d8:	0005883a 	mov	r2,zero
 40150dc:	003ff306 	br	40150ac <__alt_mem_onchip_memory2_0+0xfc013e0c>
 40150e0:	01400044 	movi	r5,1
 40150e4:	2c24983a 	sll	r18,r5,r16
 40150e8:	8809883a 	mov	r4,r17
 40150ec:	91800144 	addi	r6,r18,5
 40150f0:	318d883a 	add	r6,r6,r6
 40150f4:	318d883a 	add	r6,r6,r6
 40150f8:	401829c0 	call	401829c <_calloc_r>
 40150fc:	103ff626 	beq	r2,zero,40150d8 <__alt_mem_onchip_memory2_0+0xfc013e38>
 4015100:	14000115 	stw	r16,4(r2)
 4015104:	14800215 	stw	r18,8(r2)
 4015108:	003fe606 	br	40150a4 <__alt_mem_onchip_memory2_0+0xfc013e04>

0401510c <_Bfree>:
 401510c:	28000826 	beq	r5,zero,4015130 <_Bfree+0x24>
 4015110:	28c00117 	ldw	r3,4(r5)
 4015114:	20801317 	ldw	r2,76(r4)
 4015118:	18c7883a 	add	r3,r3,r3
 401511c:	18c7883a 	add	r3,r3,r3
 4015120:	10c5883a 	add	r2,r2,r3
 4015124:	10c00017 	ldw	r3,0(r2)
 4015128:	28c00015 	stw	r3,0(r5)
 401512c:	11400015 	stw	r5,0(r2)
 4015130:	f800283a 	ret

04015134 <__multadd>:
 4015134:	defff704 	addi	sp,sp,-36
 4015138:	dc800215 	stw	r18,8(sp)
 401513c:	2c800417 	ldw	r18,16(r5)
 4015140:	dd800615 	stw	r22,24(sp)
 4015144:	dd400515 	stw	r21,20(sp)
 4015148:	dd000415 	stw	r20,16(sp)
 401514c:	dcc00315 	stw	r19,12(sp)
 4015150:	dc400115 	stw	r17,4(sp)
 4015154:	dc000015 	stw	r16,0(sp)
 4015158:	dfc00815 	stw	ra,32(sp)
 401515c:	ddc00715 	stw	r23,28(sp)
 4015160:	2827883a 	mov	r19,r5
 4015164:	2029883a 	mov	r20,r4
 4015168:	3023883a 	mov	r17,r6
 401516c:	3821883a 	mov	r16,r7
 4015170:	2d400504 	addi	r21,r5,20
 4015174:	002d883a 	mov	r22,zero
 4015178:	adc00017 	ldw	r23,0(r21)
 401517c:	880b883a 	mov	r5,r17
 4015180:	ad400104 	addi	r21,r21,4
 4015184:	b93fffcc 	andi	r4,r23,65535
 4015188:	400dae00 	call	400dae0 <__mulsi3>
 401518c:	b808d43a 	srli	r4,r23,16
 4015190:	880b883a 	mov	r5,r17
 4015194:	1421883a 	add	r16,r2,r16
 4015198:	400dae00 	call	400dae0 <__mulsi3>
 401519c:	800ed43a 	srli	r7,r16,16
 40151a0:	80ffffcc 	andi	r3,r16,65535
 40151a4:	b5800044 	addi	r22,r22,1
 40151a8:	11c5883a 	add	r2,r2,r7
 40151ac:	100e943a 	slli	r7,r2,16
 40151b0:	1020d43a 	srli	r16,r2,16
 40151b4:	38c7883a 	add	r3,r7,r3
 40151b8:	a8ffff15 	stw	r3,-4(r21)
 40151bc:	b4bfee16 	blt	r22,r18,4015178 <__alt_mem_onchip_memory2_0+0xfc013ed8>
 40151c0:	80000926 	beq	r16,zero,40151e8 <__multadd+0xb4>
 40151c4:	98800217 	ldw	r2,8(r19)
 40151c8:	9080130e 	bge	r18,r2,4015218 <__multadd+0xe4>
 40151cc:	90800144 	addi	r2,r18,5
 40151d0:	1085883a 	add	r2,r2,r2
 40151d4:	1085883a 	add	r2,r2,r2
 40151d8:	9885883a 	add	r2,r19,r2
 40151dc:	14000015 	stw	r16,0(r2)
 40151e0:	94800044 	addi	r18,r18,1
 40151e4:	9c800415 	stw	r18,16(r19)
 40151e8:	9805883a 	mov	r2,r19
 40151ec:	dfc00817 	ldw	ra,32(sp)
 40151f0:	ddc00717 	ldw	r23,28(sp)
 40151f4:	dd800617 	ldw	r22,24(sp)
 40151f8:	dd400517 	ldw	r21,20(sp)
 40151fc:	dd000417 	ldw	r20,16(sp)
 4015200:	dcc00317 	ldw	r19,12(sp)
 4015204:	dc800217 	ldw	r18,8(sp)
 4015208:	dc400117 	ldw	r17,4(sp)
 401520c:	dc000017 	ldw	r16,0(sp)
 4015210:	dec00904 	addi	sp,sp,36
 4015214:	f800283a 	ret
 4015218:	99400117 	ldw	r5,4(r19)
 401521c:	a009883a 	mov	r4,r20
 4015220:	29400044 	addi	r5,r5,1
 4015224:	40150640 	call	4015064 <_Balloc>
 4015228:	99800417 	ldw	r6,16(r19)
 401522c:	99400304 	addi	r5,r19,12
 4015230:	11000304 	addi	r4,r2,12
 4015234:	31800084 	addi	r6,r6,2
 4015238:	318d883a 	add	r6,r6,r6
 401523c:	318d883a 	add	r6,r6,r6
 4015240:	1023883a 	mov	r17,r2
 4015244:	400f4540 	call	400f454 <memcpy>
 4015248:	98000a26 	beq	r19,zero,4015274 <__multadd+0x140>
 401524c:	98c00117 	ldw	r3,4(r19)
 4015250:	a0801317 	ldw	r2,76(r20)
 4015254:	18c7883a 	add	r3,r3,r3
 4015258:	18c7883a 	add	r3,r3,r3
 401525c:	10c5883a 	add	r2,r2,r3
 4015260:	10c00017 	ldw	r3,0(r2)
 4015264:	98c00015 	stw	r3,0(r19)
 4015268:	14c00015 	stw	r19,0(r2)
 401526c:	8827883a 	mov	r19,r17
 4015270:	003fd606 	br	40151cc <__alt_mem_onchip_memory2_0+0xfc013f2c>
 4015274:	8827883a 	mov	r19,r17
 4015278:	003fd406 	br	40151cc <__alt_mem_onchip_memory2_0+0xfc013f2c>

0401527c <__s2b>:
 401527c:	defff904 	addi	sp,sp,-28
 4015280:	dc400115 	stw	r17,4(sp)
 4015284:	dc000015 	stw	r16,0(sp)
 4015288:	2023883a 	mov	r17,r4
 401528c:	2821883a 	mov	r16,r5
 4015290:	39000204 	addi	r4,r7,8
 4015294:	01400244 	movi	r5,9
 4015298:	dcc00315 	stw	r19,12(sp)
 401529c:	dc800215 	stw	r18,8(sp)
 40152a0:	dfc00615 	stw	ra,24(sp)
 40152a4:	dd400515 	stw	r21,20(sp)
 40152a8:	dd000415 	stw	r20,16(sp)
 40152ac:	3825883a 	mov	r18,r7
 40152b0:	3027883a 	mov	r19,r6
 40152b4:	400d92c0 	call	400d92c <__divsi3>
 40152b8:	00c00044 	movi	r3,1
 40152bc:	000b883a 	mov	r5,zero
 40152c0:	1880030e 	bge	r3,r2,40152d0 <__s2b+0x54>
 40152c4:	18c7883a 	add	r3,r3,r3
 40152c8:	29400044 	addi	r5,r5,1
 40152cc:	18bffd16 	blt	r3,r2,40152c4 <__alt_mem_onchip_memory2_0+0xfc014024>
 40152d0:	8809883a 	mov	r4,r17
 40152d4:	40150640 	call	4015064 <_Balloc>
 40152d8:	d8c00717 	ldw	r3,28(sp)
 40152dc:	10c00515 	stw	r3,20(r2)
 40152e0:	00c00044 	movi	r3,1
 40152e4:	10c00415 	stw	r3,16(r2)
 40152e8:	00c00244 	movi	r3,9
 40152ec:	1cc0210e 	bge	r3,r19,4015374 <__s2b+0xf8>
 40152f0:	80eb883a 	add	r21,r16,r3
 40152f4:	a829883a 	mov	r20,r21
 40152f8:	84e1883a 	add	r16,r16,r19
 40152fc:	a1c00007 	ldb	r7,0(r20)
 4015300:	01800284 	movi	r6,10
 4015304:	a5000044 	addi	r20,r20,1
 4015308:	100b883a 	mov	r5,r2
 401530c:	39fff404 	addi	r7,r7,-48
 4015310:	8809883a 	mov	r4,r17
 4015314:	40151340 	call	4015134 <__multadd>
 4015318:	a43ff81e 	bne	r20,r16,40152fc <__alt_mem_onchip_memory2_0+0xfc01405c>
 401531c:	ace1883a 	add	r16,r21,r19
 4015320:	843ffe04 	addi	r16,r16,-8
 4015324:	9c800a0e 	bge	r19,r18,4015350 <__s2b+0xd4>
 4015328:	94e5c83a 	sub	r18,r18,r19
 401532c:	84a5883a 	add	r18,r16,r18
 4015330:	81c00007 	ldb	r7,0(r16)
 4015334:	01800284 	movi	r6,10
 4015338:	84000044 	addi	r16,r16,1
 401533c:	100b883a 	mov	r5,r2
 4015340:	39fff404 	addi	r7,r7,-48
 4015344:	8809883a 	mov	r4,r17
 4015348:	40151340 	call	4015134 <__multadd>
 401534c:	84bff81e 	bne	r16,r18,4015330 <__alt_mem_onchip_memory2_0+0xfc014090>
 4015350:	dfc00617 	ldw	ra,24(sp)
 4015354:	dd400517 	ldw	r21,20(sp)
 4015358:	dd000417 	ldw	r20,16(sp)
 401535c:	dcc00317 	ldw	r19,12(sp)
 4015360:	dc800217 	ldw	r18,8(sp)
 4015364:	dc400117 	ldw	r17,4(sp)
 4015368:	dc000017 	ldw	r16,0(sp)
 401536c:	dec00704 	addi	sp,sp,28
 4015370:	f800283a 	ret
 4015374:	84000284 	addi	r16,r16,10
 4015378:	1827883a 	mov	r19,r3
 401537c:	003fe906 	br	4015324 <__alt_mem_onchip_memory2_0+0xfc014084>

04015380 <__hi0bits>:
 4015380:	20bfffec 	andhi	r2,r4,65535
 4015384:	1000141e 	bne	r2,zero,40153d8 <__hi0bits+0x58>
 4015388:	2008943a 	slli	r4,r4,16
 401538c:	00800404 	movi	r2,16
 4015390:	20ffc02c 	andhi	r3,r4,65280
 4015394:	1800021e 	bne	r3,zero,40153a0 <__hi0bits+0x20>
 4015398:	2008923a 	slli	r4,r4,8
 401539c:	10800204 	addi	r2,r2,8
 40153a0:	20fc002c 	andhi	r3,r4,61440
 40153a4:	1800021e 	bne	r3,zero,40153b0 <__hi0bits+0x30>
 40153a8:	2008913a 	slli	r4,r4,4
 40153ac:	10800104 	addi	r2,r2,4
 40153b0:	20f0002c 	andhi	r3,r4,49152
 40153b4:	1800031e 	bne	r3,zero,40153c4 <__hi0bits+0x44>
 40153b8:	2109883a 	add	r4,r4,r4
 40153bc:	10800084 	addi	r2,r2,2
 40153c0:	2109883a 	add	r4,r4,r4
 40153c4:	20000316 	blt	r4,zero,40153d4 <__hi0bits+0x54>
 40153c8:	2110002c 	andhi	r4,r4,16384
 40153cc:	2000041e 	bne	r4,zero,40153e0 <__hi0bits+0x60>
 40153d0:	00800804 	movi	r2,32
 40153d4:	f800283a 	ret
 40153d8:	0005883a 	mov	r2,zero
 40153dc:	003fec06 	br	4015390 <__alt_mem_onchip_memory2_0+0xfc0140f0>
 40153e0:	10800044 	addi	r2,r2,1
 40153e4:	f800283a 	ret

040153e8 <__lo0bits>:
 40153e8:	20c00017 	ldw	r3,0(r4)
 40153ec:	188001cc 	andi	r2,r3,7
 40153f0:	10000826 	beq	r2,zero,4015414 <__lo0bits+0x2c>
 40153f4:	1880004c 	andi	r2,r3,1
 40153f8:	1000211e 	bne	r2,zero,4015480 <__lo0bits+0x98>
 40153fc:	1880008c 	andi	r2,r3,2
 4015400:	1000211e 	bne	r2,zero,4015488 <__lo0bits+0xa0>
 4015404:	1806d0ba 	srli	r3,r3,2
 4015408:	00800084 	movi	r2,2
 401540c:	20c00015 	stw	r3,0(r4)
 4015410:	f800283a 	ret
 4015414:	18bfffcc 	andi	r2,r3,65535
 4015418:	10001326 	beq	r2,zero,4015468 <__lo0bits+0x80>
 401541c:	0005883a 	mov	r2,zero
 4015420:	19403fcc 	andi	r5,r3,255
 4015424:	2800021e 	bne	r5,zero,4015430 <__lo0bits+0x48>
 4015428:	1806d23a 	srli	r3,r3,8
 401542c:	10800204 	addi	r2,r2,8
 4015430:	194003cc 	andi	r5,r3,15
 4015434:	2800021e 	bne	r5,zero,4015440 <__lo0bits+0x58>
 4015438:	1806d13a 	srli	r3,r3,4
 401543c:	10800104 	addi	r2,r2,4
 4015440:	194000cc 	andi	r5,r3,3
 4015444:	2800021e 	bne	r5,zero,4015450 <__lo0bits+0x68>
 4015448:	1806d0ba 	srli	r3,r3,2
 401544c:	10800084 	addi	r2,r2,2
 4015450:	1940004c 	andi	r5,r3,1
 4015454:	2800081e 	bne	r5,zero,4015478 <__lo0bits+0x90>
 4015458:	1806d07a 	srli	r3,r3,1
 401545c:	1800051e 	bne	r3,zero,4015474 <__lo0bits+0x8c>
 4015460:	00800804 	movi	r2,32
 4015464:	f800283a 	ret
 4015468:	1806d43a 	srli	r3,r3,16
 401546c:	00800404 	movi	r2,16
 4015470:	003feb06 	br	4015420 <__alt_mem_onchip_memory2_0+0xfc014180>
 4015474:	10800044 	addi	r2,r2,1
 4015478:	20c00015 	stw	r3,0(r4)
 401547c:	f800283a 	ret
 4015480:	0005883a 	mov	r2,zero
 4015484:	f800283a 	ret
 4015488:	1806d07a 	srli	r3,r3,1
 401548c:	00800044 	movi	r2,1
 4015490:	20c00015 	stw	r3,0(r4)
 4015494:	f800283a 	ret

04015498 <__i2b>:
 4015498:	defffd04 	addi	sp,sp,-12
 401549c:	dc000015 	stw	r16,0(sp)
 40154a0:	04000044 	movi	r16,1
 40154a4:	dc400115 	stw	r17,4(sp)
 40154a8:	2823883a 	mov	r17,r5
 40154ac:	800b883a 	mov	r5,r16
 40154b0:	dfc00215 	stw	ra,8(sp)
 40154b4:	40150640 	call	4015064 <_Balloc>
 40154b8:	14400515 	stw	r17,20(r2)
 40154bc:	14000415 	stw	r16,16(r2)
 40154c0:	dfc00217 	ldw	ra,8(sp)
 40154c4:	dc400117 	ldw	r17,4(sp)
 40154c8:	dc000017 	ldw	r16,0(sp)
 40154cc:	dec00304 	addi	sp,sp,12
 40154d0:	f800283a 	ret

040154d4 <__multiply>:
 40154d4:	deffef04 	addi	sp,sp,-68
 40154d8:	dc400815 	stw	r17,32(sp)
 40154dc:	dc000715 	stw	r16,28(sp)
 40154e0:	34400417 	ldw	r17,16(r6)
 40154e4:	2c000417 	ldw	r16,16(r5)
 40154e8:	dd800d15 	stw	r22,52(sp)
 40154ec:	dc800915 	stw	r18,36(sp)
 40154f0:	dfc01015 	stw	ra,64(sp)
 40154f4:	df000f15 	stw	fp,60(sp)
 40154f8:	ddc00e15 	stw	r23,56(sp)
 40154fc:	dd400c15 	stw	r21,48(sp)
 4015500:	dd000b15 	stw	r20,44(sp)
 4015504:	dcc00a15 	stw	r19,40(sp)
 4015508:	2825883a 	mov	r18,r5
 401550c:	302d883a 	mov	r22,r6
 4015510:	8440050e 	bge	r16,r17,4015528 <__multiply+0x54>
 4015514:	8007883a 	mov	r3,r16
 4015518:	3025883a 	mov	r18,r6
 401551c:	8821883a 	mov	r16,r17
 4015520:	282d883a 	mov	r22,r5
 4015524:	1823883a 	mov	r17,r3
 4015528:	90800217 	ldw	r2,8(r18)
 401552c:	8447883a 	add	r3,r16,r17
 4015530:	d8c00215 	stw	r3,8(sp)
 4015534:	91400117 	ldw	r5,4(r18)
 4015538:	10c0010e 	bge	r2,r3,4015540 <__multiply+0x6c>
 401553c:	29400044 	addi	r5,r5,1
 4015540:	40150640 	call	4015064 <_Balloc>
 4015544:	d8c00217 	ldw	r3,8(sp)
 4015548:	d8800615 	stw	r2,24(sp)
 401554c:	18eb883a 	add	r21,r3,r3
 4015550:	ad6b883a 	add	r21,r21,r21
 4015554:	10c00504 	addi	r3,r2,20
 4015558:	1d6b883a 	add	r21,r3,r21
 401555c:	d8c00115 	stw	r3,4(sp)
 4015560:	dd400315 	stw	r21,12(sp)
 4015564:	1805883a 	mov	r2,r3
 4015568:	1d40042e 	bgeu	r3,r21,401557c <__multiply+0xa8>
 401556c:	d8c00317 	ldw	r3,12(sp)
 4015570:	10000015 	stw	zero,0(r2)
 4015574:	10800104 	addi	r2,r2,4
 4015578:	10fffc36 	bltu	r2,r3,401556c <__alt_mem_onchip_memory2_0+0xfc0142cc>
 401557c:	8c63883a 	add	r17,r17,r17
 4015580:	b5800504 	addi	r22,r22,20
 4015584:	8c63883a 	add	r17,r17,r17
 4015588:	94800504 	addi	r18,r18,20
 401558c:	8421883a 	add	r16,r16,r16
 4015590:	b463883a 	add	r17,r22,r17
 4015594:	8421883a 	add	r16,r16,r16
 4015598:	dd800015 	stw	r22,0(sp)
 401559c:	dc800415 	stw	r18,16(sp)
 40155a0:	dc400515 	stw	r17,20(sp)
 40155a4:	9429883a 	add	r20,r18,r16
 40155a8:	b4404f2e 	bgeu	r22,r17,40156e8 <__multiply+0x214>
 40155ac:	d8c00017 	ldw	r3,0(sp)
 40155b0:	1c800017 	ldw	r18,0(r3)
 40155b4:	947fffcc 	andi	r17,r18,65535
 40155b8:	88001e26 	beq	r17,zero,4015634 <__multiply+0x160>
 40155bc:	dd800117 	ldw	r22,4(sp)
 40155c0:	dd400417 	ldw	r21,16(sp)
 40155c4:	0027883a 	mov	r19,zero
 40155c8:	ac800017 	ldw	r18,0(r21)
 40155cc:	b4000017 	ldw	r16,0(r22)
 40155d0:	880b883a 	mov	r5,r17
 40155d4:	913fffcc 	andi	r4,r18,65535
 40155d8:	400dae00 	call	400dae0 <__mulsi3>
 40155dc:	9008d43a 	srli	r4,r18,16
 40155e0:	84bfffcc 	andi	r18,r16,65535
 40155e4:	1485883a 	add	r2,r2,r18
 40155e8:	14e5883a 	add	r18,r2,r19
 40155ec:	8020d43a 	srli	r16,r16,16
 40155f0:	9026d43a 	srli	r19,r18,16
 40155f4:	880b883a 	mov	r5,r17
 40155f8:	400dae00 	call	400dae0 <__mulsi3>
 40155fc:	1405883a 	add	r2,r2,r16
 4015600:	14e1883a 	add	r16,r2,r19
 4015604:	90ffffcc 	andi	r3,r18,65535
 4015608:	8024943a 	slli	r18,r16,16
 401560c:	ad400104 	addi	r21,r21,4
 4015610:	b005883a 	mov	r2,r22
 4015614:	90c6b03a 	or	r3,r18,r3
 4015618:	b0c00015 	stw	r3,0(r22)
 401561c:	8026d43a 	srli	r19,r16,16
 4015620:	b5800104 	addi	r22,r22,4
 4015624:	ad3fe836 	bltu	r21,r20,40155c8 <__alt_mem_onchip_memory2_0+0xfc014328>
 4015628:	d8c00017 	ldw	r3,0(sp)
 401562c:	14c00115 	stw	r19,4(r2)
 4015630:	1c800017 	ldw	r18,0(r3)
 4015634:	9024d43a 	srli	r18,r18,16
 4015638:	90002226 	beq	r18,zero,40156c4 <__multiply+0x1f0>
 401563c:	d8c00117 	ldw	r3,4(sp)
 4015640:	dd800417 	ldw	r22,16(sp)
 4015644:	002f883a 	mov	r23,zero
 4015648:	1f000017 	ldw	fp,0(r3)
 401564c:	1823883a 	mov	r17,r3
 4015650:	182b883a 	mov	r21,r3
 4015654:	e021883a 	mov	r16,fp
 4015658:	00000106 	br	4015660 <__multiply+0x18c>
 401565c:	982b883a 	mov	r21,r19
 4015660:	b100000b 	ldhu	r4,0(r22)
 4015664:	8020d43a 	srli	r16,r16,16
 4015668:	900b883a 	mov	r5,r18
 401566c:	400dae00 	call	400dae0 <__mulsi3>
 4015670:	1405883a 	add	r2,r2,r16
 4015674:	15ef883a 	add	r23,r2,r23
 4015678:	b804943a 	slli	r2,r23,16
 401567c:	e0ffffcc 	andi	r3,fp,65535
 4015680:	8c400104 	addi	r17,r17,4
 4015684:	10c6b03a 	or	r3,r2,r3
 4015688:	88ffff15 	stw	r3,-4(r17)
 401568c:	b5800104 	addi	r22,r22,4
 4015690:	b13fff17 	ldw	r4,-4(r22)
 4015694:	acc00104 	addi	r19,r21,4
 4015698:	900b883a 	mov	r5,r18
 401569c:	2008d43a 	srli	r4,r4,16
 40156a0:	9c000017 	ldw	r16,0(r19)
 40156a4:	400dae00 	call	400dae0 <__mulsi3>
 40156a8:	b806d43a 	srli	r3,r23,16
 40156ac:	813fffcc 	andi	r4,r16,65535
 40156b0:	1105883a 	add	r2,r2,r4
 40156b4:	10f9883a 	add	fp,r2,r3
 40156b8:	e02ed43a 	srli	r23,fp,16
 40156bc:	b53fe736 	bltu	r22,r20,401565c <__alt_mem_onchip_memory2_0+0xfc0143bc>
 40156c0:	af000115 	stw	fp,4(r21)
 40156c4:	d8c00017 	ldw	r3,0(sp)
 40156c8:	d9000517 	ldw	r4,20(sp)
 40156cc:	18c00104 	addi	r3,r3,4
 40156d0:	d8c00015 	stw	r3,0(sp)
 40156d4:	d8c00117 	ldw	r3,4(sp)
 40156d8:	18c00104 	addi	r3,r3,4
 40156dc:	d8c00115 	stw	r3,4(sp)
 40156e0:	d8c00017 	ldw	r3,0(sp)
 40156e4:	193fb136 	bltu	r3,r4,40155ac <__alt_mem_onchip_memory2_0+0xfc01430c>
 40156e8:	d8c00217 	ldw	r3,8(sp)
 40156ec:	00c00c0e 	bge	zero,r3,4015720 <__multiply+0x24c>
 40156f0:	d8c00317 	ldw	r3,12(sp)
 40156f4:	18bfff17 	ldw	r2,-4(r3)
 40156f8:	1d7fff04 	addi	r21,r3,-4
 40156fc:	10000326 	beq	r2,zero,401570c <__multiply+0x238>
 4015700:	00000706 	br	4015720 <__multiply+0x24c>
 4015704:	a8800017 	ldw	r2,0(r21)
 4015708:	1000051e 	bne	r2,zero,4015720 <__multiply+0x24c>
 401570c:	d8c00217 	ldw	r3,8(sp)
 4015710:	ad7fff04 	addi	r21,r21,-4
 4015714:	18ffffc4 	addi	r3,r3,-1
 4015718:	d8c00215 	stw	r3,8(sp)
 401571c:	183ff91e 	bne	r3,zero,4015704 <__alt_mem_onchip_memory2_0+0xfc014464>
 4015720:	d8c00617 	ldw	r3,24(sp)
 4015724:	d9000217 	ldw	r4,8(sp)
 4015728:	1805883a 	mov	r2,r3
 401572c:	19000415 	stw	r4,16(r3)
 4015730:	dfc01017 	ldw	ra,64(sp)
 4015734:	df000f17 	ldw	fp,60(sp)
 4015738:	ddc00e17 	ldw	r23,56(sp)
 401573c:	dd800d17 	ldw	r22,52(sp)
 4015740:	dd400c17 	ldw	r21,48(sp)
 4015744:	dd000b17 	ldw	r20,44(sp)
 4015748:	dcc00a17 	ldw	r19,40(sp)
 401574c:	dc800917 	ldw	r18,36(sp)
 4015750:	dc400817 	ldw	r17,32(sp)
 4015754:	dc000717 	ldw	r16,28(sp)
 4015758:	dec01104 	addi	sp,sp,68
 401575c:	f800283a 	ret

04015760 <__pow5mult>:
 4015760:	defffa04 	addi	sp,sp,-24
 4015764:	dcc00315 	stw	r19,12(sp)
 4015768:	dc000015 	stw	r16,0(sp)
 401576c:	dfc00515 	stw	ra,20(sp)
 4015770:	dd000415 	stw	r20,16(sp)
 4015774:	dc800215 	stw	r18,8(sp)
 4015778:	dc400115 	stw	r17,4(sp)
 401577c:	308000cc 	andi	r2,r6,3
 4015780:	3021883a 	mov	r16,r6
 4015784:	2027883a 	mov	r19,r4
 4015788:	10002f1e 	bne	r2,zero,4015848 <__pow5mult+0xe8>
 401578c:	2825883a 	mov	r18,r5
 4015790:	8021d0ba 	srai	r16,r16,2
 4015794:	80001a26 	beq	r16,zero,4015800 <__pow5mult+0xa0>
 4015798:	9c401217 	ldw	r17,72(r19)
 401579c:	8800061e 	bne	r17,zero,40157b8 <__pow5mult+0x58>
 40157a0:	00003406 	br	4015874 <__pow5mult+0x114>
 40157a4:	8021d07a 	srai	r16,r16,1
 40157a8:	80001526 	beq	r16,zero,4015800 <__pow5mult+0xa0>
 40157ac:	88800017 	ldw	r2,0(r17)
 40157b0:	10001c26 	beq	r2,zero,4015824 <__pow5mult+0xc4>
 40157b4:	1023883a 	mov	r17,r2
 40157b8:	8080004c 	andi	r2,r16,1
 40157bc:	103ff926 	beq	r2,zero,40157a4 <__alt_mem_onchip_memory2_0+0xfc014504>
 40157c0:	880d883a 	mov	r6,r17
 40157c4:	900b883a 	mov	r5,r18
 40157c8:	9809883a 	mov	r4,r19
 40157cc:	40154d40 	call	40154d4 <__multiply>
 40157d0:	90001b26 	beq	r18,zero,4015840 <__pow5mult+0xe0>
 40157d4:	91000117 	ldw	r4,4(r18)
 40157d8:	98c01317 	ldw	r3,76(r19)
 40157dc:	8021d07a 	srai	r16,r16,1
 40157e0:	2109883a 	add	r4,r4,r4
 40157e4:	2109883a 	add	r4,r4,r4
 40157e8:	1907883a 	add	r3,r3,r4
 40157ec:	19000017 	ldw	r4,0(r3)
 40157f0:	91000015 	stw	r4,0(r18)
 40157f4:	1c800015 	stw	r18,0(r3)
 40157f8:	1025883a 	mov	r18,r2
 40157fc:	803feb1e 	bne	r16,zero,40157ac <__alt_mem_onchip_memory2_0+0xfc01450c>
 4015800:	9005883a 	mov	r2,r18
 4015804:	dfc00517 	ldw	ra,20(sp)
 4015808:	dd000417 	ldw	r20,16(sp)
 401580c:	dcc00317 	ldw	r19,12(sp)
 4015810:	dc800217 	ldw	r18,8(sp)
 4015814:	dc400117 	ldw	r17,4(sp)
 4015818:	dc000017 	ldw	r16,0(sp)
 401581c:	dec00604 	addi	sp,sp,24
 4015820:	f800283a 	ret
 4015824:	880d883a 	mov	r6,r17
 4015828:	880b883a 	mov	r5,r17
 401582c:	9809883a 	mov	r4,r19
 4015830:	40154d40 	call	40154d4 <__multiply>
 4015834:	88800015 	stw	r2,0(r17)
 4015838:	10000015 	stw	zero,0(r2)
 401583c:	003fdd06 	br	40157b4 <__alt_mem_onchip_memory2_0+0xfc014514>
 4015840:	1025883a 	mov	r18,r2
 4015844:	003fd706 	br	40157a4 <__alt_mem_onchip_memory2_0+0xfc014504>
 4015848:	10bfffc4 	addi	r2,r2,-1
 401584c:	1085883a 	add	r2,r2,r2
 4015850:	00c100b4 	movhi	r3,1026
 4015854:	18deb404 	addi	r3,r3,31440
 4015858:	1085883a 	add	r2,r2,r2
 401585c:	1885883a 	add	r2,r3,r2
 4015860:	11800017 	ldw	r6,0(r2)
 4015864:	000f883a 	mov	r7,zero
 4015868:	40151340 	call	4015134 <__multadd>
 401586c:	1025883a 	mov	r18,r2
 4015870:	003fc706 	br	4015790 <__alt_mem_onchip_memory2_0+0xfc0144f0>
 4015874:	05000044 	movi	r20,1
 4015878:	a00b883a 	mov	r5,r20
 401587c:	9809883a 	mov	r4,r19
 4015880:	40150640 	call	4015064 <_Balloc>
 4015884:	1023883a 	mov	r17,r2
 4015888:	00809c44 	movi	r2,625
 401588c:	88800515 	stw	r2,20(r17)
 4015890:	8d000415 	stw	r20,16(r17)
 4015894:	9c401215 	stw	r17,72(r19)
 4015898:	88000015 	stw	zero,0(r17)
 401589c:	003fc606 	br	40157b8 <__alt_mem_onchip_memory2_0+0xfc014518>

040158a0 <__lshift>:
 40158a0:	defff904 	addi	sp,sp,-28
 40158a4:	dd400515 	stw	r21,20(sp)
 40158a8:	dcc00315 	stw	r19,12(sp)
 40158ac:	302bd17a 	srai	r21,r6,5
 40158b0:	2cc00417 	ldw	r19,16(r5)
 40158b4:	28800217 	ldw	r2,8(r5)
 40158b8:	dd000415 	stw	r20,16(sp)
 40158bc:	ace7883a 	add	r19,r21,r19
 40158c0:	dc800215 	stw	r18,8(sp)
 40158c4:	dc400115 	stw	r17,4(sp)
 40158c8:	dc000015 	stw	r16,0(sp)
 40158cc:	dfc00615 	stw	ra,24(sp)
 40158d0:	9c000044 	addi	r16,r19,1
 40158d4:	2823883a 	mov	r17,r5
 40158d8:	3029883a 	mov	r20,r6
 40158dc:	2025883a 	mov	r18,r4
 40158e0:	29400117 	ldw	r5,4(r5)
 40158e4:	1400030e 	bge	r2,r16,40158f4 <__lshift+0x54>
 40158e8:	1085883a 	add	r2,r2,r2
 40158ec:	29400044 	addi	r5,r5,1
 40158f0:	143ffd16 	blt	r2,r16,40158e8 <__alt_mem_onchip_memory2_0+0xfc014648>
 40158f4:	9009883a 	mov	r4,r18
 40158f8:	40150640 	call	4015064 <_Balloc>
 40158fc:	10c00504 	addi	r3,r2,20
 4015900:	0540070e 	bge	zero,r21,4015920 <__lshift+0x80>
 4015904:	ad6b883a 	add	r21,r21,r21
 4015908:	ad6b883a 	add	r21,r21,r21
 401590c:	1809883a 	mov	r4,r3
 4015910:	1d47883a 	add	r3,r3,r21
 4015914:	20000015 	stw	zero,0(r4)
 4015918:	21000104 	addi	r4,r4,4
 401591c:	193ffd1e 	bne	r3,r4,4015914 <__alt_mem_onchip_memory2_0+0xfc014674>
 4015920:	8a000417 	ldw	r8,16(r17)
 4015924:	89000504 	addi	r4,r17,20
 4015928:	a18007cc 	andi	r6,r20,31
 401592c:	4211883a 	add	r8,r8,r8
 4015930:	4211883a 	add	r8,r8,r8
 4015934:	2211883a 	add	r8,r4,r8
 4015938:	30002326 	beq	r6,zero,40159c8 <__lshift+0x128>
 401593c:	02400804 	movi	r9,32
 4015940:	4993c83a 	sub	r9,r9,r6
 4015944:	000b883a 	mov	r5,zero
 4015948:	21c00017 	ldw	r7,0(r4)
 401594c:	1815883a 	mov	r10,r3
 4015950:	18c00104 	addi	r3,r3,4
 4015954:	398e983a 	sll	r7,r7,r6
 4015958:	21000104 	addi	r4,r4,4
 401595c:	394ab03a 	or	r5,r7,r5
 4015960:	197fff15 	stw	r5,-4(r3)
 4015964:	217fff17 	ldw	r5,-4(r4)
 4015968:	2a4ad83a 	srl	r5,r5,r9
 401596c:	223ff636 	bltu	r4,r8,4015948 <__alt_mem_onchip_memory2_0+0xfc0146a8>
 4015970:	51400115 	stw	r5,4(r10)
 4015974:	28001a1e 	bne	r5,zero,40159e0 <__lshift+0x140>
 4015978:	843fffc4 	addi	r16,r16,-1
 401597c:	14000415 	stw	r16,16(r2)
 4015980:	88000826 	beq	r17,zero,40159a4 <__lshift+0x104>
 4015984:	89000117 	ldw	r4,4(r17)
 4015988:	90c01317 	ldw	r3,76(r18)
 401598c:	2109883a 	add	r4,r4,r4
 4015990:	2109883a 	add	r4,r4,r4
 4015994:	1907883a 	add	r3,r3,r4
 4015998:	19000017 	ldw	r4,0(r3)
 401599c:	89000015 	stw	r4,0(r17)
 40159a0:	1c400015 	stw	r17,0(r3)
 40159a4:	dfc00617 	ldw	ra,24(sp)
 40159a8:	dd400517 	ldw	r21,20(sp)
 40159ac:	dd000417 	ldw	r20,16(sp)
 40159b0:	dcc00317 	ldw	r19,12(sp)
 40159b4:	dc800217 	ldw	r18,8(sp)
 40159b8:	dc400117 	ldw	r17,4(sp)
 40159bc:	dc000017 	ldw	r16,0(sp)
 40159c0:	dec00704 	addi	sp,sp,28
 40159c4:	f800283a 	ret
 40159c8:	21400017 	ldw	r5,0(r4)
 40159cc:	18c00104 	addi	r3,r3,4
 40159d0:	21000104 	addi	r4,r4,4
 40159d4:	197fff15 	stw	r5,-4(r3)
 40159d8:	223ffb36 	bltu	r4,r8,40159c8 <__alt_mem_onchip_memory2_0+0xfc014728>
 40159dc:	003fe606 	br	4015978 <__alt_mem_onchip_memory2_0+0xfc0146d8>
 40159e0:	9c000084 	addi	r16,r19,2
 40159e4:	003fe406 	br	4015978 <__alt_mem_onchip_memory2_0+0xfc0146d8>

040159e8 <__mcmp>:
 40159e8:	20800417 	ldw	r2,16(r4)
 40159ec:	28c00417 	ldw	r3,16(r5)
 40159f0:	10c5c83a 	sub	r2,r2,r3
 40159f4:	1000111e 	bne	r2,zero,4015a3c <__mcmp+0x54>
 40159f8:	18c7883a 	add	r3,r3,r3
 40159fc:	18c7883a 	add	r3,r3,r3
 4015a00:	21000504 	addi	r4,r4,20
 4015a04:	29400504 	addi	r5,r5,20
 4015a08:	20c5883a 	add	r2,r4,r3
 4015a0c:	28cb883a 	add	r5,r5,r3
 4015a10:	00000106 	br	4015a18 <__mcmp+0x30>
 4015a14:	20800a2e 	bgeu	r4,r2,4015a40 <__mcmp+0x58>
 4015a18:	10bfff04 	addi	r2,r2,-4
 4015a1c:	297fff04 	addi	r5,r5,-4
 4015a20:	11800017 	ldw	r6,0(r2)
 4015a24:	28c00017 	ldw	r3,0(r5)
 4015a28:	30fffa26 	beq	r6,r3,4015a14 <__alt_mem_onchip_memory2_0+0xfc014774>
 4015a2c:	30c00236 	bltu	r6,r3,4015a38 <__mcmp+0x50>
 4015a30:	00800044 	movi	r2,1
 4015a34:	f800283a 	ret
 4015a38:	00bfffc4 	movi	r2,-1
 4015a3c:	f800283a 	ret
 4015a40:	0005883a 	mov	r2,zero
 4015a44:	f800283a 	ret

04015a48 <__mdiff>:
 4015a48:	28c00417 	ldw	r3,16(r5)
 4015a4c:	30800417 	ldw	r2,16(r6)
 4015a50:	defffa04 	addi	sp,sp,-24
 4015a54:	dcc00315 	stw	r19,12(sp)
 4015a58:	dc800215 	stw	r18,8(sp)
 4015a5c:	dfc00515 	stw	ra,20(sp)
 4015a60:	dd000415 	stw	r20,16(sp)
 4015a64:	dc400115 	stw	r17,4(sp)
 4015a68:	dc000015 	stw	r16,0(sp)
 4015a6c:	1887c83a 	sub	r3,r3,r2
 4015a70:	2825883a 	mov	r18,r5
 4015a74:	3027883a 	mov	r19,r6
 4015a78:	1800141e 	bne	r3,zero,4015acc <__mdiff+0x84>
 4015a7c:	1085883a 	add	r2,r2,r2
 4015a80:	1085883a 	add	r2,r2,r2
 4015a84:	2a000504 	addi	r8,r5,20
 4015a88:	34000504 	addi	r16,r6,20
 4015a8c:	4087883a 	add	r3,r8,r2
 4015a90:	8085883a 	add	r2,r16,r2
 4015a94:	00000106 	br	4015a9c <__mdiff+0x54>
 4015a98:	40c0592e 	bgeu	r8,r3,4015c00 <__mdiff+0x1b8>
 4015a9c:	18ffff04 	addi	r3,r3,-4
 4015aa0:	10bfff04 	addi	r2,r2,-4
 4015aa4:	19c00017 	ldw	r7,0(r3)
 4015aa8:	11400017 	ldw	r5,0(r2)
 4015aac:	397ffa26 	beq	r7,r5,4015a98 <__alt_mem_onchip_memory2_0+0xfc0147f8>
 4015ab0:	3940592e 	bgeu	r7,r5,4015c18 <__mdiff+0x1d0>
 4015ab4:	9005883a 	mov	r2,r18
 4015ab8:	4023883a 	mov	r17,r8
 4015abc:	9825883a 	mov	r18,r19
 4015ac0:	05000044 	movi	r20,1
 4015ac4:	1027883a 	mov	r19,r2
 4015ac8:	00000406 	br	4015adc <__mdiff+0x94>
 4015acc:	18005616 	blt	r3,zero,4015c28 <__mdiff+0x1e0>
 4015ad0:	34400504 	addi	r17,r6,20
 4015ad4:	2c000504 	addi	r16,r5,20
 4015ad8:	0029883a 	mov	r20,zero
 4015adc:	91400117 	ldw	r5,4(r18)
 4015ae0:	40150640 	call	4015064 <_Balloc>
 4015ae4:	92400417 	ldw	r9,16(r18)
 4015ae8:	9b000417 	ldw	r12,16(r19)
 4015aec:	12c00504 	addi	r11,r2,20
 4015af0:	4a51883a 	add	r8,r9,r9
 4015af4:	6319883a 	add	r12,r12,r12
 4015af8:	4211883a 	add	r8,r8,r8
 4015afc:	6319883a 	add	r12,r12,r12
 4015b00:	15000315 	stw	r20,12(r2)
 4015b04:	8211883a 	add	r8,r16,r8
 4015b08:	8b19883a 	add	r12,r17,r12
 4015b0c:	0007883a 	mov	r3,zero
 4015b10:	81400017 	ldw	r5,0(r16)
 4015b14:	89c00017 	ldw	r7,0(r17)
 4015b18:	59800104 	addi	r6,r11,4
 4015b1c:	293fffcc 	andi	r4,r5,65535
 4015b20:	20c7883a 	add	r3,r4,r3
 4015b24:	393fffcc 	andi	r4,r7,65535
 4015b28:	1909c83a 	sub	r4,r3,r4
 4015b2c:	280ad43a 	srli	r5,r5,16
 4015b30:	380ed43a 	srli	r7,r7,16
 4015b34:	2007d43a 	srai	r3,r4,16
 4015b38:	213fffcc 	andi	r4,r4,65535
 4015b3c:	29cbc83a 	sub	r5,r5,r7
 4015b40:	28c7883a 	add	r3,r5,r3
 4015b44:	180a943a 	slli	r5,r3,16
 4015b48:	8c400104 	addi	r17,r17,4
 4015b4c:	84000104 	addi	r16,r16,4
 4015b50:	2908b03a 	or	r4,r5,r4
 4015b54:	59000015 	stw	r4,0(r11)
 4015b58:	1807d43a 	srai	r3,r3,16
 4015b5c:	3015883a 	mov	r10,r6
 4015b60:	3017883a 	mov	r11,r6
 4015b64:	8b3fea36 	bltu	r17,r12,4015b10 <__alt_mem_onchip_memory2_0+0xfc014870>
 4015b68:	8200162e 	bgeu	r16,r8,4015bc4 <__mdiff+0x17c>
 4015b6c:	8017883a 	mov	r11,r16
 4015b70:	59400017 	ldw	r5,0(r11)
 4015b74:	31800104 	addi	r6,r6,4
 4015b78:	5ac00104 	addi	r11,r11,4
 4015b7c:	293fffcc 	andi	r4,r5,65535
 4015b80:	20c7883a 	add	r3,r4,r3
 4015b84:	280ed43a 	srli	r7,r5,16
 4015b88:	180bd43a 	srai	r5,r3,16
 4015b8c:	193fffcc 	andi	r4,r3,65535
 4015b90:	3947883a 	add	r3,r7,r5
 4015b94:	180a943a 	slli	r5,r3,16
 4015b98:	1807d43a 	srai	r3,r3,16
 4015b9c:	2908b03a 	or	r4,r5,r4
 4015ba0:	313fff15 	stw	r4,-4(r6)
 4015ba4:	5a3ff236 	bltu	r11,r8,4015b70 <__alt_mem_onchip_memory2_0+0xfc0148d0>
 4015ba8:	0406303a 	nor	r3,zero,r16
 4015bac:	1a07883a 	add	r3,r3,r8
 4015bb0:	1806d0ba 	srli	r3,r3,2
 4015bb4:	18c00044 	addi	r3,r3,1
 4015bb8:	18c7883a 	add	r3,r3,r3
 4015bbc:	18c7883a 	add	r3,r3,r3
 4015bc0:	50d5883a 	add	r10,r10,r3
 4015bc4:	50ffff04 	addi	r3,r10,-4
 4015bc8:	2000041e 	bne	r4,zero,4015bdc <__mdiff+0x194>
 4015bcc:	18ffff04 	addi	r3,r3,-4
 4015bd0:	19000017 	ldw	r4,0(r3)
 4015bd4:	4a7fffc4 	addi	r9,r9,-1
 4015bd8:	203ffc26 	beq	r4,zero,4015bcc <__alt_mem_onchip_memory2_0+0xfc01492c>
 4015bdc:	12400415 	stw	r9,16(r2)
 4015be0:	dfc00517 	ldw	ra,20(sp)
 4015be4:	dd000417 	ldw	r20,16(sp)
 4015be8:	dcc00317 	ldw	r19,12(sp)
 4015bec:	dc800217 	ldw	r18,8(sp)
 4015bf0:	dc400117 	ldw	r17,4(sp)
 4015bf4:	dc000017 	ldw	r16,0(sp)
 4015bf8:	dec00604 	addi	sp,sp,24
 4015bfc:	f800283a 	ret
 4015c00:	000b883a 	mov	r5,zero
 4015c04:	40150640 	call	4015064 <_Balloc>
 4015c08:	00c00044 	movi	r3,1
 4015c0c:	10c00415 	stw	r3,16(r2)
 4015c10:	10000515 	stw	zero,20(r2)
 4015c14:	003ff206 	br	4015be0 <__alt_mem_onchip_memory2_0+0xfc014940>
 4015c18:	8023883a 	mov	r17,r16
 4015c1c:	0029883a 	mov	r20,zero
 4015c20:	4021883a 	mov	r16,r8
 4015c24:	003fad06 	br	4015adc <__alt_mem_onchip_memory2_0+0xfc01483c>
 4015c28:	9005883a 	mov	r2,r18
 4015c2c:	94400504 	addi	r17,r18,20
 4015c30:	9c000504 	addi	r16,r19,20
 4015c34:	9825883a 	mov	r18,r19
 4015c38:	05000044 	movi	r20,1
 4015c3c:	1027883a 	mov	r19,r2
 4015c40:	003fa606 	br	4015adc <__alt_mem_onchip_memory2_0+0xfc01483c>

04015c44 <__ulp>:
 4015c44:	295ffc2c 	andhi	r5,r5,32752
 4015c48:	00bf3034 	movhi	r2,64704
 4015c4c:	2887883a 	add	r3,r5,r2
 4015c50:	00c0020e 	bge	zero,r3,4015c5c <__ulp+0x18>
 4015c54:	0005883a 	mov	r2,zero
 4015c58:	f800283a 	ret
 4015c5c:	00c7c83a 	sub	r3,zero,r3
 4015c60:	1807d53a 	srai	r3,r3,20
 4015c64:	008004c4 	movi	r2,19
 4015c68:	10c00b0e 	bge	r2,r3,4015c98 <__ulp+0x54>
 4015c6c:	18bffb04 	addi	r2,r3,-20
 4015c70:	01000784 	movi	r4,30
 4015c74:	0007883a 	mov	r3,zero
 4015c78:	20800516 	blt	r4,r2,4015c90 <__ulp+0x4c>
 4015c7c:	010007c4 	movi	r4,31
 4015c80:	2089c83a 	sub	r4,r4,r2
 4015c84:	00800044 	movi	r2,1
 4015c88:	1104983a 	sll	r2,r2,r4
 4015c8c:	f800283a 	ret
 4015c90:	00800044 	movi	r2,1
 4015c94:	f800283a 	ret
 4015c98:	01400234 	movhi	r5,8
 4015c9c:	28c7d83a 	sra	r3,r5,r3
 4015ca0:	0005883a 	mov	r2,zero
 4015ca4:	f800283a 	ret

04015ca8 <__b2d>:
 4015ca8:	defffa04 	addi	sp,sp,-24
 4015cac:	dc000015 	stw	r16,0(sp)
 4015cb0:	24000417 	ldw	r16,16(r4)
 4015cb4:	dc400115 	stw	r17,4(sp)
 4015cb8:	24400504 	addi	r17,r4,20
 4015cbc:	8421883a 	add	r16,r16,r16
 4015cc0:	8421883a 	add	r16,r16,r16
 4015cc4:	8c21883a 	add	r16,r17,r16
 4015cc8:	dc800215 	stw	r18,8(sp)
 4015ccc:	84bfff17 	ldw	r18,-4(r16)
 4015cd0:	dd000415 	stw	r20,16(sp)
 4015cd4:	dcc00315 	stw	r19,12(sp)
 4015cd8:	9009883a 	mov	r4,r18
 4015cdc:	2829883a 	mov	r20,r5
 4015ce0:	dfc00515 	stw	ra,20(sp)
 4015ce4:	40153800 	call	4015380 <__hi0bits>
 4015ce8:	00c00804 	movi	r3,32
 4015cec:	1889c83a 	sub	r4,r3,r2
 4015cf0:	a1000015 	stw	r4,0(r20)
 4015cf4:	01000284 	movi	r4,10
 4015cf8:	84ffff04 	addi	r19,r16,-4
 4015cfc:	20801216 	blt	r4,r2,4015d48 <__b2d+0xa0>
 4015d00:	018002c4 	movi	r6,11
 4015d04:	308dc83a 	sub	r6,r6,r2
 4015d08:	9186d83a 	srl	r3,r18,r6
 4015d0c:	18cffc34 	orhi	r3,r3,16368
 4015d10:	8cc0212e 	bgeu	r17,r19,4015d98 <__b2d+0xf0>
 4015d14:	813ffe17 	ldw	r4,-8(r16)
 4015d18:	218cd83a 	srl	r6,r4,r6
 4015d1c:	10800544 	addi	r2,r2,21
 4015d20:	9084983a 	sll	r2,r18,r2
 4015d24:	1184b03a 	or	r2,r2,r6
 4015d28:	dfc00517 	ldw	ra,20(sp)
 4015d2c:	dd000417 	ldw	r20,16(sp)
 4015d30:	dcc00317 	ldw	r19,12(sp)
 4015d34:	dc800217 	ldw	r18,8(sp)
 4015d38:	dc400117 	ldw	r17,4(sp)
 4015d3c:	dc000017 	ldw	r16,0(sp)
 4015d40:	dec00604 	addi	sp,sp,24
 4015d44:	f800283a 	ret
 4015d48:	8cc00f2e 	bgeu	r17,r19,4015d88 <__b2d+0xe0>
 4015d4c:	117ffd44 	addi	r5,r2,-11
 4015d50:	80bffe17 	ldw	r2,-8(r16)
 4015d54:	28000e26 	beq	r5,zero,4015d90 <__b2d+0xe8>
 4015d58:	1949c83a 	sub	r4,r3,r5
 4015d5c:	9164983a 	sll	r18,r18,r5
 4015d60:	1106d83a 	srl	r3,r2,r4
 4015d64:	81bffe04 	addi	r6,r16,-8
 4015d68:	948ffc34 	orhi	r18,r18,16368
 4015d6c:	90c6b03a 	or	r3,r18,r3
 4015d70:	89800e2e 	bgeu	r17,r6,4015dac <__b2d+0x104>
 4015d74:	81bffd17 	ldw	r6,-12(r16)
 4015d78:	1144983a 	sll	r2,r2,r5
 4015d7c:	310ad83a 	srl	r5,r6,r4
 4015d80:	2884b03a 	or	r2,r5,r2
 4015d84:	003fe806 	br	4015d28 <__alt_mem_onchip_memory2_0+0xfc014a88>
 4015d88:	10bffd44 	addi	r2,r2,-11
 4015d8c:	1000041e 	bne	r2,zero,4015da0 <__b2d+0xf8>
 4015d90:	90cffc34 	orhi	r3,r18,16368
 4015d94:	003fe406 	br	4015d28 <__alt_mem_onchip_memory2_0+0xfc014a88>
 4015d98:	000d883a 	mov	r6,zero
 4015d9c:	003fdf06 	br	4015d1c <__alt_mem_onchip_memory2_0+0xfc014a7c>
 4015da0:	90a4983a 	sll	r18,r18,r2
 4015da4:	0005883a 	mov	r2,zero
 4015da8:	003ff906 	br	4015d90 <__alt_mem_onchip_memory2_0+0xfc014af0>
 4015dac:	1144983a 	sll	r2,r2,r5
 4015db0:	003fdd06 	br	4015d28 <__alt_mem_onchip_memory2_0+0xfc014a88>

04015db4 <__d2b>:
 4015db4:	defff804 	addi	sp,sp,-32
 4015db8:	dc000215 	stw	r16,8(sp)
 4015dbc:	3021883a 	mov	r16,r6
 4015dc0:	dc400315 	stw	r17,12(sp)
 4015dc4:	8022907a 	slli	r17,r16,1
 4015dc8:	dd000615 	stw	r20,24(sp)
 4015dcc:	2829883a 	mov	r20,r5
 4015dd0:	01400044 	movi	r5,1
 4015dd4:	dcc00515 	stw	r19,20(sp)
 4015dd8:	dc800415 	stw	r18,16(sp)
 4015ddc:	dfc00715 	stw	ra,28(sp)
 4015de0:	3825883a 	mov	r18,r7
 4015de4:	8822d57a 	srli	r17,r17,21
 4015de8:	40150640 	call	4015064 <_Balloc>
 4015dec:	1027883a 	mov	r19,r2
 4015df0:	00800434 	movhi	r2,16
 4015df4:	10bfffc4 	addi	r2,r2,-1
 4015df8:	808c703a 	and	r6,r16,r2
 4015dfc:	88000126 	beq	r17,zero,4015e04 <__d2b+0x50>
 4015e00:	31800434 	orhi	r6,r6,16
 4015e04:	d9800015 	stw	r6,0(sp)
 4015e08:	a0002426 	beq	r20,zero,4015e9c <__d2b+0xe8>
 4015e0c:	d9000104 	addi	r4,sp,4
 4015e10:	dd000115 	stw	r20,4(sp)
 4015e14:	40153e80 	call	40153e8 <__lo0bits>
 4015e18:	d8c00017 	ldw	r3,0(sp)
 4015e1c:	10002f1e 	bne	r2,zero,4015edc <__d2b+0x128>
 4015e20:	d9000117 	ldw	r4,4(sp)
 4015e24:	99000515 	stw	r4,20(r19)
 4015e28:	1821003a 	cmpeq	r16,r3,zero
 4015e2c:	01000084 	movi	r4,2
 4015e30:	2421c83a 	sub	r16,r4,r16
 4015e34:	98c00615 	stw	r3,24(r19)
 4015e38:	9c000415 	stw	r16,16(r19)
 4015e3c:	88001f1e 	bne	r17,zero,4015ebc <__d2b+0x108>
 4015e40:	10bef384 	addi	r2,r2,-1074
 4015e44:	90800015 	stw	r2,0(r18)
 4015e48:	00900034 	movhi	r2,16384
 4015e4c:	10bfffc4 	addi	r2,r2,-1
 4015e50:	8085883a 	add	r2,r16,r2
 4015e54:	1085883a 	add	r2,r2,r2
 4015e58:	1085883a 	add	r2,r2,r2
 4015e5c:	9885883a 	add	r2,r19,r2
 4015e60:	11000517 	ldw	r4,20(r2)
 4015e64:	8020917a 	slli	r16,r16,5
 4015e68:	40153800 	call	4015380 <__hi0bits>
 4015e6c:	d8c00817 	ldw	r3,32(sp)
 4015e70:	8085c83a 	sub	r2,r16,r2
 4015e74:	18800015 	stw	r2,0(r3)
 4015e78:	9805883a 	mov	r2,r19
 4015e7c:	dfc00717 	ldw	ra,28(sp)
 4015e80:	dd000617 	ldw	r20,24(sp)
 4015e84:	dcc00517 	ldw	r19,20(sp)
 4015e88:	dc800417 	ldw	r18,16(sp)
 4015e8c:	dc400317 	ldw	r17,12(sp)
 4015e90:	dc000217 	ldw	r16,8(sp)
 4015e94:	dec00804 	addi	sp,sp,32
 4015e98:	f800283a 	ret
 4015e9c:	d809883a 	mov	r4,sp
 4015ea0:	40153e80 	call	40153e8 <__lo0bits>
 4015ea4:	d8c00017 	ldw	r3,0(sp)
 4015ea8:	04000044 	movi	r16,1
 4015eac:	9c000415 	stw	r16,16(r19)
 4015eb0:	98c00515 	stw	r3,20(r19)
 4015eb4:	10800804 	addi	r2,r2,32
 4015eb8:	883fe126 	beq	r17,zero,4015e40 <__alt_mem_onchip_memory2_0+0xfc014ba0>
 4015ebc:	00c00d44 	movi	r3,53
 4015ec0:	8c7ef344 	addi	r17,r17,-1075
 4015ec4:	88a3883a 	add	r17,r17,r2
 4015ec8:	1885c83a 	sub	r2,r3,r2
 4015ecc:	d8c00817 	ldw	r3,32(sp)
 4015ed0:	94400015 	stw	r17,0(r18)
 4015ed4:	18800015 	stw	r2,0(r3)
 4015ed8:	003fe706 	br	4015e78 <__alt_mem_onchip_memory2_0+0xfc014bd8>
 4015edc:	01000804 	movi	r4,32
 4015ee0:	2089c83a 	sub	r4,r4,r2
 4015ee4:	1908983a 	sll	r4,r3,r4
 4015ee8:	d9400117 	ldw	r5,4(sp)
 4015eec:	1886d83a 	srl	r3,r3,r2
 4015ef0:	2148b03a 	or	r4,r4,r5
 4015ef4:	99000515 	stw	r4,20(r19)
 4015ef8:	d8c00015 	stw	r3,0(sp)
 4015efc:	003fca06 	br	4015e28 <__alt_mem_onchip_memory2_0+0xfc014b88>

04015f00 <__ratio>:
 4015f00:	defff904 	addi	sp,sp,-28
 4015f04:	dc400315 	stw	r17,12(sp)
 4015f08:	2823883a 	mov	r17,r5
 4015f0c:	d9400104 	addi	r5,sp,4
 4015f10:	dfc00615 	stw	ra,24(sp)
 4015f14:	dcc00515 	stw	r19,20(sp)
 4015f18:	dc800415 	stw	r18,16(sp)
 4015f1c:	2027883a 	mov	r19,r4
 4015f20:	dc000215 	stw	r16,8(sp)
 4015f24:	4015ca80 	call	4015ca8 <__b2d>
 4015f28:	d80b883a 	mov	r5,sp
 4015f2c:	8809883a 	mov	r4,r17
 4015f30:	1025883a 	mov	r18,r2
 4015f34:	1821883a 	mov	r16,r3
 4015f38:	4015ca80 	call	4015ca8 <__b2d>
 4015f3c:	8a000417 	ldw	r8,16(r17)
 4015f40:	99000417 	ldw	r4,16(r19)
 4015f44:	d9400117 	ldw	r5,4(sp)
 4015f48:	2209c83a 	sub	r4,r4,r8
 4015f4c:	2010917a 	slli	r8,r4,5
 4015f50:	d9000017 	ldw	r4,0(sp)
 4015f54:	2909c83a 	sub	r4,r5,r4
 4015f58:	4109883a 	add	r4,r8,r4
 4015f5c:	01000e0e 	bge	zero,r4,4015f98 <__ratio+0x98>
 4015f60:	2008953a 	slli	r4,r4,20
 4015f64:	2421883a 	add	r16,r4,r16
 4015f68:	100d883a 	mov	r6,r2
 4015f6c:	180f883a 	mov	r7,r3
 4015f70:	9009883a 	mov	r4,r18
 4015f74:	800b883a 	mov	r5,r16
 4015f78:	4019e480 	call	4019e48 <__divdf3>
 4015f7c:	dfc00617 	ldw	ra,24(sp)
 4015f80:	dcc00517 	ldw	r19,20(sp)
 4015f84:	dc800417 	ldw	r18,16(sp)
 4015f88:	dc400317 	ldw	r17,12(sp)
 4015f8c:	dc000217 	ldw	r16,8(sp)
 4015f90:	dec00704 	addi	sp,sp,28
 4015f94:	f800283a 	ret
 4015f98:	2008953a 	slli	r4,r4,20
 4015f9c:	1907c83a 	sub	r3,r3,r4
 4015fa0:	003ff106 	br	4015f68 <__alt_mem_onchip_memory2_0+0xfc014cc8>

04015fa4 <_mprec_log10>:
 4015fa4:	defffe04 	addi	sp,sp,-8
 4015fa8:	dc000015 	stw	r16,0(sp)
 4015fac:	dfc00115 	stw	ra,4(sp)
 4015fb0:	008005c4 	movi	r2,23
 4015fb4:	2021883a 	mov	r16,r4
 4015fb8:	11000d0e 	bge	r2,r4,4015ff0 <_mprec_log10+0x4c>
 4015fbc:	0005883a 	mov	r2,zero
 4015fc0:	00cffc34 	movhi	r3,16368
 4015fc4:	843fffc4 	addi	r16,r16,-1
 4015fc8:	000d883a 	mov	r6,zero
 4015fcc:	01d00934 	movhi	r7,16420
 4015fd0:	1009883a 	mov	r4,r2
 4015fd4:	180b883a 	mov	r5,r3
 4015fd8:	401aa700 	call	401aa70 <__muldf3>
 4015fdc:	803ff91e 	bne	r16,zero,4015fc4 <__alt_mem_onchip_memory2_0+0xfc014d24>
 4015fe0:	dfc00117 	ldw	ra,4(sp)
 4015fe4:	dc000017 	ldw	r16,0(sp)
 4015fe8:	dec00204 	addi	sp,sp,8
 4015fec:	f800283a 	ret
 4015ff0:	202090fa 	slli	r16,r4,3
 4015ff4:	008100b4 	movhi	r2,1026
 4015ff8:	109ecb04 	addi	r2,r2,31532
 4015ffc:	1421883a 	add	r16,r2,r16
 4016000:	80800017 	ldw	r2,0(r16)
 4016004:	80c00117 	ldw	r3,4(r16)
 4016008:	dfc00117 	ldw	ra,4(sp)
 401600c:	dc000017 	ldw	r16,0(sp)
 4016010:	dec00204 	addi	sp,sp,8
 4016014:	f800283a 	ret

04016018 <__copybits>:
 4016018:	297fffc4 	addi	r5,r5,-1
 401601c:	280fd17a 	srai	r7,r5,5
 4016020:	30c00417 	ldw	r3,16(r6)
 4016024:	30800504 	addi	r2,r6,20
 4016028:	39c00044 	addi	r7,r7,1
 401602c:	18c7883a 	add	r3,r3,r3
 4016030:	39cf883a 	add	r7,r7,r7
 4016034:	18c7883a 	add	r3,r3,r3
 4016038:	39cf883a 	add	r7,r7,r7
 401603c:	10c7883a 	add	r3,r2,r3
 4016040:	21cf883a 	add	r7,r4,r7
 4016044:	10c00d2e 	bgeu	r2,r3,401607c <__copybits+0x64>
 4016048:	200b883a 	mov	r5,r4
 401604c:	12000017 	ldw	r8,0(r2)
 4016050:	29400104 	addi	r5,r5,4
 4016054:	10800104 	addi	r2,r2,4
 4016058:	2a3fff15 	stw	r8,-4(r5)
 401605c:	10fffb36 	bltu	r2,r3,401604c <__alt_mem_onchip_memory2_0+0xfc014dac>
 4016060:	1985c83a 	sub	r2,r3,r6
 4016064:	10bffac4 	addi	r2,r2,-21
 4016068:	1004d0ba 	srli	r2,r2,2
 401606c:	10800044 	addi	r2,r2,1
 4016070:	1085883a 	add	r2,r2,r2
 4016074:	1085883a 	add	r2,r2,r2
 4016078:	2089883a 	add	r4,r4,r2
 401607c:	21c0032e 	bgeu	r4,r7,401608c <__copybits+0x74>
 4016080:	20000015 	stw	zero,0(r4)
 4016084:	21000104 	addi	r4,r4,4
 4016088:	21fffd36 	bltu	r4,r7,4016080 <__alt_mem_onchip_memory2_0+0xfc014de0>
 401608c:	f800283a 	ret

04016090 <__any_on>:
 4016090:	20c00417 	ldw	r3,16(r4)
 4016094:	2805d17a 	srai	r2,r5,5
 4016098:	21000504 	addi	r4,r4,20
 401609c:	18800d0e 	bge	r3,r2,40160d4 <__any_on+0x44>
 40160a0:	18c7883a 	add	r3,r3,r3
 40160a4:	18c7883a 	add	r3,r3,r3
 40160a8:	20c7883a 	add	r3,r4,r3
 40160ac:	20c0192e 	bgeu	r4,r3,4016114 <__any_on+0x84>
 40160b0:	18bfff17 	ldw	r2,-4(r3)
 40160b4:	18ffff04 	addi	r3,r3,-4
 40160b8:	1000041e 	bne	r2,zero,40160cc <__any_on+0x3c>
 40160bc:	20c0142e 	bgeu	r4,r3,4016110 <__any_on+0x80>
 40160c0:	18ffff04 	addi	r3,r3,-4
 40160c4:	19400017 	ldw	r5,0(r3)
 40160c8:	283ffc26 	beq	r5,zero,40160bc <__alt_mem_onchip_memory2_0+0xfc014e1c>
 40160cc:	00800044 	movi	r2,1
 40160d0:	f800283a 	ret
 40160d4:	10c00a0e 	bge	r2,r3,4016100 <__any_on+0x70>
 40160d8:	1085883a 	add	r2,r2,r2
 40160dc:	1085883a 	add	r2,r2,r2
 40160e0:	294007cc 	andi	r5,r5,31
 40160e4:	2087883a 	add	r3,r4,r2
 40160e8:	283ff026 	beq	r5,zero,40160ac <__alt_mem_onchip_memory2_0+0xfc014e0c>
 40160ec:	19800017 	ldw	r6,0(r3)
 40160f0:	3144d83a 	srl	r2,r6,r5
 40160f4:	114a983a 	sll	r5,r2,r5
 40160f8:	317ff41e 	bne	r6,r5,40160cc <__alt_mem_onchip_memory2_0+0xfc014e2c>
 40160fc:	003feb06 	br	40160ac <__alt_mem_onchip_memory2_0+0xfc014e0c>
 4016100:	1085883a 	add	r2,r2,r2
 4016104:	1085883a 	add	r2,r2,r2
 4016108:	2087883a 	add	r3,r4,r2
 401610c:	003fe706 	br	40160ac <__alt_mem_onchip_memory2_0+0xfc014e0c>
 4016110:	f800283a 	ret
 4016114:	0005883a 	mov	r2,zero
 4016118:	f800283a 	ret

0401611c <_putc_r>:
 401611c:	defffc04 	addi	sp,sp,-16
 4016120:	dc000215 	stw	r16,8(sp)
 4016124:	dfc00315 	stw	ra,12(sp)
 4016128:	2021883a 	mov	r16,r4
 401612c:	20000226 	beq	r4,zero,4016138 <_putc_r+0x1c>
 4016130:	20800e17 	ldw	r2,56(r4)
 4016134:	10001b26 	beq	r2,zero,40161a4 <_putc_r+0x88>
 4016138:	30800217 	ldw	r2,8(r6)
 401613c:	10bfffc4 	addi	r2,r2,-1
 4016140:	30800215 	stw	r2,8(r6)
 4016144:	10000a16 	blt	r2,zero,4016170 <_putc_r+0x54>
 4016148:	30800017 	ldw	r2,0(r6)
 401614c:	11400005 	stb	r5,0(r2)
 4016150:	30800017 	ldw	r2,0(r6)
 4016154:	10c00044 	addi	r3,r2,1
 4016158:	30c00015 	stw	r3,0(r6)
 401615c:	10800003 	ldbu	r2,0(r2)
 4016160:	dfc00317 	ldw	ra,12(sp)
 4016164:	dc000217 	ldw	r16,8(sp)
 4016168:	dec00404 	addi	sp,sp,16
 401616c:	f800283a 	ret
 4016170:	30c00617 	ldw	r3,24(r6)
 4016174:	10c00616 	blt	r2,r3,4016190 <_putc_r+0x74>
 4016178:	30800017 	ldw	r2,0(r6)
 401617c:	00c00284 	movi	r3,10
 4016180:	11400005 	stb	r5,0(r2)
 4016184:	30800017 	ldw	r2,0(r6)
 4016188:	11400003 	ldbu	r5,0(r2)
 401618c:	28fff11e 	bne	r5,r3,4016154 <__alt_mem_onchip_memory2_0+0xfc014eb4>
 4016190:	8009883a 	mov	r4,r16
 4016194:	dfc00317 	ldw	ra,12(sp)
 4016198:	dc000217 	ldw	r16,8(sp)
 401619c:	dec00404 	addi	sp,sp,16
 40161a0:	40180901 	jmpi	4018090 <__swbuf_r>
 40161a4:	d9400015 	stw	r5,0(sp)
 40161a8:	d9800115 	stw	r6,4(sp)
 40161ac:	40140b80 	call	40140b8 <__sinit>
 40161b0:	d9800117 	ldw	r6,4(sp)
 40161b4:	d9400017 	ldw	r5,0(sp)
 40161b8:	003fdf06 	br	4016138 <__alt_mem_onchip_memory2_0+0xfc014e98>

040161bc <putc>:
 40161bc:	008100f4 	movhi	r2,1027
 40161c0:	defffc04 	addi	sp,sp,-16
 40161c4:	10ab8304 	addi	r2,r2,-20980
 40161c8:	dc000115 	stw	r16,4(sp)
 40161cc:	14000017 	ldw	r16,0(r2)
 40161d0:	dc400215 	stw	r17,8(sp)
 40161d4:	dfc00315 	stw	ra,12(sp)
 40161d8:	2023883a 	mov	r17,r4
 40161dc:	80000226 	beq	r16,zero,40161e8 <putc+0x2c>
 40161e0:	80800e17 	ldw	r2,56(r16)
 40161e4:	10001a26 	beq	r2,zero,4016250 <putc+0x94>
 40161e8:	28800217 	ldw	r2,8(r5)
 40161ec:	10bfffc4 	addi	r2,r2,-1
 40161f0:	28800215 	stw	r2,8(r5)
 40161f4:	10000b16 	blt	r2,zero,4016224 <putc+0x68>
 40161f8:	28800017 	ldw	r2,0(r5)
 40161fc:	14400005 	stb	r17,0(r2)
 4016200:	28800017 	ldw	r2,0(r5)
 4016204:	10c00044 	addi	r3,r2,1
 4016208:	28c00015 	stw	r3,0(r5)
 401620c:	10800003 	ldbu	r2,0(r2)
 4016210:	dfc00317 	ldw	ra,12(sp)
 4016214:	dc400217 	ldw	r17,8(sp)
 4016218:	dc000117 	ldw	r16,4(sp)
 401621c:	dec00404 	addi	sp,sp,16
 4016220:	f800283a 	ret
 4016224:	28c00617 	ldw	r3,24(r5)
 4016228:	10c00e16 	blt	r2,r3,4016264 <putc+0xa8>
 401622c:	28800017 	ldw	r2,0(r5)
 4016230:	01000284 	movi	r4,10
 4016234:	14400005 	stb	r17,0(r2)
 4016238:	28800017 	ldw	r2,0(r5)
 401623c:	10c00003 	ldbu	r3,0(r2)
 4016240:	193ff01e 	bne	r3,r4,4016204 <__alt_mem_onchip_memory2_0+0xfc014f64>
 4016244:	280d883a 	mov	r6,r5
 4016248:	180b883a 	mov	r5,r3
 401624c:	00000706 	br	401626c <putc+0xb0>
 4016250:	8009883a 	mov	r4,r16
 4016254:	d9400015 	stw	r5,0(sp)
 4016258:	40140b80 	call	40140b8 <__sinit>
 401625c:	d9400017 	ldw	r5,0(sp)
 4016260:	003fe106 	br	40161e8 <__alt_mem_onchip_memory2_0+0xfc014f48>
 4016264:	280d883a 	mov	r6,r5
 4016268:	880b883a 	mov	r5,r17
 401626c:	8009883a 	mov	r4,r16
 4016270:	dfc00317 	ldw	ra,12(sp)
 4016274:	dc400217 	ldw	r17,8(sp)
 4016278:	dc000117 	ldw	r16,4(sp)
 401627c:	dec00404 	addi	sp,sp,16
 4016280:	40180901 	jmpi	4018090 <__swbuf_r>

04016284 <_realloc_r>:
 4016284:	defff604 	addi	sp,sp,-40
 4016288:	dc800215 	stw	r18,8(sp)
 401628c:	dfc00915 	stw	ra,36(sp)
 4016290:	df000815 	stw	fp,32(sp)
 4016294:	ddc00715 	stw	r23,28(sp)
 4016298:	dd800615 	stw	r22,24(sp)
 401629c:	dd400515 	stw	r21,20(sp)
 40162a0:	dd000415 	stw	r20,16(sp)
 40162a4:	dcc00315 	stw	r19,12(sp)
 40162a8:	dc400115 	stw	r17,4(sp)
 40162ac:	dc000015 	stw	r16,0(sp)
 40162b0:	3025883a 	mov	r18,r6
 40162b4:	2800b726 	beq	r5,zero,4016594 <_realloc_r+0x310>
 40162b8:	282b883a 	mov	r21,r5
 40162bc:	2029883a 	mov	r20,r4
 40162c0:	401c5380 	call	401c538 <__malloc_lock>
 40162c4:	a8bfff17 	ldw	r2,-4(r21)
 40162c8:	043fff04 	movi	r16,-4
 40162cc:	90c002c4 	addi	r3,r18,11
 40162d0:	01000584 	movi	r4,22
 40162d4:	acfffe04 	addi	r19,r21,-8
 40162d8:	1420703a 	and	r16,r2,r16
 40162dc:	20c0332e 	bgeu	r4,r3,40163ac <_realloc_r+0x128>
 40162e0:	047ffe04 	movi	r17,-8
 40162e4:	1c62703a 	and	r17,r3,r17
 40162e8:	8807883a 	mov	r3,r17
 40162ec:	88005816 	blt	r17,zero,4016450 <_realloc_r+0x1cc>
 40162f0:	8c805736 	bltu	r17,r18,4016450 <_realloc_r+0x1cc>
 40162f4:	80c0300e 	bge	r16,r3,40163b8 <_realloc_r+0x134>
 40162f8:	070100f4 	movhi	fp,1027
 40162fc:	e7202604 	addi	fp,fp,-32616
 4016300:	e1c00217 	ldw	r7,8(fp)
 4016304:	9c09883a 	add	r4,r19,r16
 4016308:	22000117 	ldw	r8,4(r4)
 401630c:	21c06326 	beq	r4,r7,401649c <_realloc_r+0x218>
 4016310:	017fff84 	movi	r5,-2
 4016314:	414a703a 	and	r5,r8,r5
 4016318:	214b883a 	add	r5,r4,r5
 401631c:	29800117 	ldw	r6,4(r5)
 4016320:	3180004c 	andi	r6,r6,1
 4016324:	30003f26 	beq	r6,zero,4016424 <_realloc_r+0x1a0>
 4016328:	1080004c 	andi	r2,r2,1
 401632c:	10008326 	beq	r2,zero,401653c <_realloc_r+0x2b8>
 4016330:	900b883a 	mov	r5,r18
 4016334:	a009883a 	mov	r4,r20
 4016338:	400ec480 	call	400ec48 <_malloc_r>
 401633c:	1025883a 	mov	r18,r2
 4016340:	10011e26 	beq	r2,zero,40167bc <_realloc_r+0x538>
 4016344:	a93fff17 	ldw	r4,-4(r21)
 4016348:	10fffe04 	addi	r3,r2,-8
 401634c:	00bfff84 	movi	r2,-2
 4016350:	2084703a 	and	r2,r4,r2
 4016354:	9885883a 	add	r2,r19,r2
 4016358:	1880ee26 	beq	r3,r2,4016714 <_realloc_r+0x490>
 401635c:	81bfff04 	addi	r6,r16,-4
 4016360:	00800904 	movi	r2,36
 4016364:	1180b836 	bltu	r2,r6,4016648 <_realloc_r+0x3c4>
 4016368:	00c004c4 	movi	r3,19
 401636c:	19809636 	bltu	r3,r6,40165c8 <_realloc_r+0x344>
 4016370:	9005883a 	mov	r2,r18
 4016374:	a807883a 	mov	r3,r21
 4016378:	19000017 	ldw	r4,0(r3)
 401637c:	11000015 	stw	r4,0(r2)
 4016380:	19000117 	ldw	r4,4(r3)
 4016384:	11000115 	stw	r4,4(r2)
 4016388:	18c00217 	ldw	r3,8(r3)
 401638c:	10c00215 	stw	r3,8(r2)
 4016390:	a80b883a 	mov	r5,r21
 4016394:	a009883a 	mov	r4,r20
 4016398:	401422c0 	call	401422c <_free_r>
 401639c:	a009883a 	mov	r4,r20
 40163a0:	401c55c0 	call	401c55c <__malloc_unlock>
 40163a4:	9005883a 	mov	r2,r18
 40163a8:	00001206 	br	40163f4 <_realloc_r+0x170>
 40163ac:	00c00404 	movi	r3,16
 40163b0:	1823883a 	mov	r17,r3
 40163b4:	003fce06 	br	40162f0 <__alt_mem_onchip_memory2_0+0xfc015050>
 40163b8:	a825883a 	mov	r18,r21
 40163bc:	8445c83a 	sub	r2,r16,r17
 40163c0:	00c003c4 	movi	r3,15
 40163c4:	18802636 	bltu	r3,r2,4016460 <_realloc_r+0x1dc>
 40163c8:	99800117 	ldw	r6,4(r19)
 40163cc:	9c07883a 	add	r3,r19,r16
 40163d0:	3180004c 	andi	r6,r6,1
 40163d4:	3420b03a 	or	r16,r6,r16
 40163d8:	9c000115 	stw	r16,4(r19)
 40163dc:	18800117 	ldw	r2,4(r3)
 40163e0:	10800054 	ori	r2,r2,1
 40163e4:	18800115 	stw	r2,4(r3)
 40163e8:	a009883a 	mov	r4,r20
 40163ec:	401c55c0 	call	401c55c <__malloc_unlock>
 40163f0:	9005883a 	mov	r2,r18
 40163f4:	dfc00917 	ldw	ra,36(sp)
 40163f8:	df000817 	ldw	fp,32(sp)
 40163fc:	ddc00717 	ldw	r23,28(sp)
 4016400:	dd800617 	ldw	r22,24(sp)
 4016404:	dd400517 	ldw	r21,20(sp)
 4016408:	dd000417 	ldw	r20,16(sp)
 401640c:	dcc00317 	ldw	r19,12(sp)
 4016410:	dc800217 	ldw	r18,8(sp)
 4016414:	dc400117 	ldw	r17,4(sp)
 4016418:	dc000017 	ldw	r16,0(sp)
 401641c:	dec00a04 	addi	sp,sp,40
 4016420:	f800283a 	ret
 4016424:	017fff04 	movi	r5,-4
 4016428:	414a703a 	and	r5,r8,r5
 401642c:	814d883a 	add	r6,r16,r5
 4016430:	30c01f16 	blt	r6,r3,40164b0 <_realloc_r+0x22c>
 4016434:	20800317 	ldw	r2,12(r4)
 4016438:	20c00217 	ldw	r3,8(r4)
 401643c:	a825883a 	mov	r18,r21
 4016440:	3021883a 	mov	r16,r6
 4016444:	18800315 	stw	r2,12(r3)
 4016448:	10c00215 	stw	r3,8(r2)
 401644c:	003fdb06 	br	40163bc <__alt_mem_onchip_memory2_0+0xfc01511c>
 4016450:	00800304 	movi	r2,12
 4016454:	a0800015 	stw	r2,0(r20)
 4016458:	0005883a 	mov	r2,zero
 401645c:	003fe506 	br	40163f4 <__alt_mem_onchip_memory2_0+0xfc015154>
 4016460:	98c00117 	ldw	r3,4(r19)
 4016464:	9c4b883a 	add	r5,r19,r17
 4016468:	11000054 	ori	r4,r2,1
 401646c:	18c0004c 	andi	r3,r3,1
 4016470:	1c62b03a 	or	r17,r3,r17
 4016474:	9c400115 	stw	r17,4(r19)
 4016478:	29000115 	stw	r4,4(r5)
 401647c:	2885883a 	add	r2,r5,r2
 4016480:	10c00117 	ldw	r3,4(r2)
 4016484:	29400204 	addi	r5,r5,8
 4016488:	a009883a 	mov	r4,r20
 401648c:	18c00054 	ori	r3,r3,1
 4016490:	10c00115 	stw	r3,4(r2)
 4016494:	401422c0 	call	401422c <_free_r>
 4016498:	003fd306 	br	40163e8 <__alt_mem_onchip_memory2_0+0xfc015148>
 401649c:	017fff04 	movi	r5,-4
 40164a0:	414a703a 	and	r5,r8,r5
 40164a4:	89800404 	addi	r6,r17,16
 40164a8:	8151883a 	add	r8,r16,r5
 40164ac:	4180590e 	bge	r8,r6,4016614 <_realloc_r+0x390>
 40164b0:	1080004c 	andi	r2,r2,1
 40164b4:	103f9e1e 	bne	r2,zero,4016330 <__alt_mem_onchip_memory2_0+0xfc015090>
 40164b8:	adbffe17 	ldw	r22,-8(r21)
 40164bc:	00bfff04 	movi	r2,-4
 40164c0:	9dadc83a 	sub	r22,r19,r22
 40164c4:	b1800117 	ldw	r6,4(r22)
 40164c8:	3084703a 	and	r2,r6,r2
 40164cc:	20002026 	beq	r4,zero,4016550 <_realloc_r+0x2cc>
 40164d0:	80af883a 	add	r23,r16,r2
 40164d4:	b96f883a 	add	r23,r23,r5
 40164d8:	21c05f26 	beq	r4,r7,4016658 <_realloc_r+0x3d4>
 40164dc:	b8c01c16 	blt	r23,r3,4016550 <_realloc_r+0x2cc>
 40164e0:	20800317 	ldw	r2,12(r4)
 40164e4:	20c00217 	ldw	r3,8(r4)
 40164e8:	81bfff04 	addi	r6,r16,-4
 40164ec:	01000904 	movi	r4,36
 40164f0:	18800315 	stw	r2,12(r3)
 40164f4:	10c00215 	stw	r3,8(r2)
 40164f8:	b0c00217 	ldw	r3,8(r22)
 40164fc:	b0800317 	ldw	r2,12(r22)
 4016500:	b4800204 	addi	r18,r22,8
 4016504:	18800315 	stw	r2,12(r3)
 4016508:	10c00215 	stw	r3,8(r2)
 401650c:	21801b36 	bltu	r4,r6,401657c <_realloc_r+0x2f8>
 4016510:	008004c4 	movi	r2,19
 4016514:	1180352e 	bgeu	r2,r6,40165ec <_realloc_r+0x368>
 4016518:	a8800017 	ldw	r2,0(r21)
 401651c:	b0800215 	stw	r2,8(r22)
 4016520:	a8800117 	ldw	r2,4(r21)
 4016524:	b0800315 	stw	r2,12(r22)
 4016528:	008006c4 	movi	r2,27
 401652c:	11807f36 	bltu	r2,r6,401672c <_realloc_r+0x4a8>
 4016530:	b0800404 	addi	r2,r22,16
 4016534:	ad400204 	addi	r21,r21,8
 4016538:	00002d06 	br	40165f0 <_realloc_r+0x36c>
 401653c:	adbffe17 	ldw	r22,-8(r21)
 4016540:	00bfff04 	movi	r2,-4
 4016544:	9dadc83a 	sub	r22,r19,r22
 4016548:	b1000117 	ldw	r4,4(r22)
 401654c:	2084703a 	and	r2,r4,r2
 4016550:	b03f7726 	beq	r22,zero,4016330 <__alt_mem_onchip_memory2_0+0xfc015090>
 4016554:	80af883a 	add	r23,r16,r2
 4016558:	b8ff7516 	blt	r23,r3,4016330 <__alt_mem_onchip_memory2_0+0xfc015090>
 401655c:	b0800317 	ldw	r2,12(r22)
 4016560:	b0c00217 	ldw	r3,8(r22)
 4016564:	81bfff04 	addi	r6,r16,-4
 4016568:	01000904 	movi	r4,36
 401656c:	18800315 	stw	r2,12(r3)
 4016570:	10c00215 	stw	r3,8(r2)
 4016574:	b4800204 	addi	r18,r22,8
 4016578:	21bfe52e 	bgeu	r4,r6,4016510 <__alt_mem_onchip_memory2_0+0xfc015270>
 401657c:	a80b883a 	mov	r5,r21
 4016580:	9009883a 	mov	r4,r18
 4016584:	4014f080 	call	4014f08 <memmove>
 4016588:	b821883a 	mov	r16,r23
 401658c:	b027883a 	mov	r19,r22
 4016590:	003f8a06 	br	40163bc <__alt_mem_onchip_memory2_0+0xfc01511c>
 4016594:	300b883a 	mov	r5,r6
 4016598:	dfc00917 	ldw	ra,36(sp)
 401659c:	df000817 	ldw	fp,32(sp)
 40165a0:	ddc00717 	ldw	r23,28(sp)
 40165a4:	dd800617 	ldw	r22,24(sp)
 40165a8:	dd400517 	ldw	r21,20(sp)
 40165ac:	dd000417 	ldw	r20,16(sp)
 40165b0:	dcc00317 	ldw	r19,12(sp)
 40165b4:	dc800217 	ldw	r18,8(sp)
 40165b8:	dc400117 	ldw	r17,4(sp)
 40165bc:	dc000017 	ldw	r16,0(sp)
 40165c0:	dec00a04 	addi	sp,sp,40
 40165c4:	400ec481 	jmpi	400ec48 <_malloc_r>
 40165c8:	a8c00017 	ldw	r3,0(r21)
 40165cc:	90c00015 	stw	r3,0(r18)
 40165d0:	a8c00117 	ldw	r3,4(r21)
 40165d4:	90c00115 	stw	r3,4(r18)
 40165d8:	00c006c4 	movi	r3,27
 40165dc:	19804536 	bltu	r3,r6,40166f4 <_realloc_r+0x470>
 40165e0:	90800204 	addi	r2,r18,8
 40165e4:	a8c00204 	addi	r3,r21,8
 40165e8:	003f6306 	br	4016378 <__alt_mem_onchip_memory2_0+0xfc0150d8>
 40165ec:	9005883a 	mov	r2,r18
 40165f0:	a8c00017 	ldw	r3,0(r21)
 40165f4:	b821883a 	mov	r16,r23
 40165f8:	b027883a 	mov	r19,r22
 40165fc:	10c00015 	stw	r3,0(r2)
 4016600:	a8c00117 	ldw	r3,4(r21)
 4016604:	10c00115 	stw	r3,4(r2)
 4016608:	a8c00217 	ldw	r3,8(r21)
 401660c:	10c00215 	stw	r3,8(r2)
 4016610:	003f6a06 	br	40163bc <__alt_mem_onchip_memory2_0+0xfc01511c>
 4016614:	9c67883a 	add	r19,r19,r17
 4016618:	4445c83a 	sub	r2,r8,r17
 401661c:	e4c00215 	stw	r19,8(fp)
 4016620:	10800054 	ori	r2,r2,1
 4016624:	98800115 	stw	r2,4(r19)
 4016628:	a8bfff17 	ldw	r2,-4(r21)
 401662c:	a009883a 	mov	r4,r20
 4016630:	1080004c 	andi	r2,r2,1
 4016634:	1462b03a 	or	r17,r2,r17
 4016638:	ac7fff15 	stw	r17,-4(r21)
 401663c:	401c55c0 	call	401c55c <__malloc_unlock>
 4016640:	a805883a 	mov	r2,r21
 4016644:	003f6b06 	br	40163f4 <__alt_mem_onchip_memory2_0+0xfc015154>
 4016648:	a80b883a 	mov	r5,r21
 401664c:	9009883a 	mov	r4,r18
 4016650:	4014f080 	call	4014f08 <memmove>
 4016654:	003f4e06 	br	4016390 <__alt_mem_onchip_memory2_0+0xfc0150f0>
 4016658:	89000404 	addi	r4,r17,16
 401665c:	b93fbc16 	blt	r23,r4,4016550 <__alt_mem_onchip_memory2_0+0xfc0152b0>
 4016660:	b0800317 	ldw	r2,12(r22)
 4016664:	b0c00217 	ldw	r3,8(r22)
 4016668:	81bfff04 	addi	r6,r16,-4
 401666c:	01000904 	movi	r4,36
 4016670:	18800315 	stw	r2,12(r3)
 4016674:	10c00215 	stw	r3,8(r2)
 4016678:	b4800204 	addi	r18,r22,8
 401667c:	21804336 	bltu	r4,r6,401678c <_realloc_r+0x508>
 4016680:	008004c4 	movi	r2,19
 4016684:	11803f2e 	bgeu	r2,r6,4016784 <_realloc_r+0x500>
 4016688:	a8800017 	ldw	r2,0(r21)
 401668c:	b0800215 	stw	r2,8(r22)
 4016690:	a8800117 	ldw	r2,4(r21)
 4016694:	b0800315 	stw	r2,12(r22)
 4016698:	008006c4 	movi	r2,27
 401669c:	11803f36 	bltu	r2,r6,401679c <_realloc_r+0x518>
 40166a0:	b0800404 	addi	r2,r22,16
 40166a4:	ad400204 	addi	r21,r21,8
 40166a8:	a8c00017 	ldw	r3,0(r21)
 40166ac:	10c00015 	stw	r3,0(r2)
 40166b0:	a8c00117 	ldw	r3,4(r21)
 40166b4:	10c00115 	stw	r3,4(r2)
 40166b8:	a8c00217 	ldw	r3,8(r21)
 40166bc:	10c00215 	stw	r3,8(r2)
 40166c0:	b447883a 	add	r3,r22,r17
 40166c4:	bc45c83a 	sub	r2,r23,r17
 40166c8:	e0c00215 	stw	r3,8(fp)
 40166cc:	10800054 	ori	r2,r2,1
 40166d0:	18800115 	stw	r2,4(r3)
 40166d4:	b0800117 	ldw	r2,4(r22)
 40166d8:	a009883a 	mov	r4,r20
 40166dc:	1080004c 	andi	r2,r2,1
 40166e0:	1462b03a 	or	r17,r2,r17
 40166e4:	b4400115 	stw	r17,4(r22)
 40166e8:	401c55c0 	call	401c55c <__malloc_unlock>
 40166ec:	9005883a 	mov	r2,r18
 40166f0:	003f4006 	br	40163f4 <__alt_mem_onchip_memory2_0+0xfc015154>
 40166f4:	a8c00217 	ldw	r3,8(r21)
 40166f8:	90c00215 	stw	r3,8(r18)
 40166fc:	a8c00317 	ldw	r3,12(r21)
 4016700:	90c00315 	stw	r3,12(r18)
 4016704:	30801126 	beq	r6,r2,401674c <_realloc_r+0x4c8>
 4016708:	90800404 	addi	r2,r18,16
 401670c:	a8c00404 	addi	r3,r21,16
 4016710:	003f1906 	br	4016378 <__alt_mem_onchip_memory2_0+0xfc0150d8>
 4016714:	90ffff17 	ldw	r3,-4(r18)
 4016718:	00bfff04 	movi	r2,-4
 401671c:	a825883a 	mov	r18,r21
 4016720:	1884703a 	and	r2,r3,r2
 4016724:	80a1883a 	add	r16,r16,r2
 4016728:	003f2406 	br	40163bc <__alt_mem_onchip_memory2_0+0xfc01511c>
 401672c:	a8800217 	ldw	r2,8(r21)
 4016730:	b0800415 	stw	r2,16(r22)
 4016734:	a8800317 	ldw	r2,12(r21)
 4016738:	b0800515 	stw	r2,20(r22)
 401673c:	31000a26 	beq	r6,r4,4016768 <_realloc_r+0x4e4>
 4016740:	b0800604 	addi	r2,r22,24
 4016744:	ad400404 	addi	r21,r21,16
 4016748:	003fa906 	br	40165f0 <__alt_mem_onchip_memory2_0+0xfc015350>
 401674c:	a9000417 	ldw	r4,16(r21)
 4016750:	90800604 	addi	r2,r18,24
 4016754:	a8c00604 	addi	r3,r21,24
 4016758:	91000415 	stw	r4,16(r18)
 401675c:	a9000517 	ldw	r4,20(r21)
 4016760:	91000515 	stw	r4,20(r18)
 4016764:	003f0406 	br	4016378 <__alt_mem_onchip_memory2_0+0xfc0150d8>
 4016768:	a8c00417 	ldw	r3,16(r21)
 401676c:	ad400604 	addi	r21,r21,24
 4016770:	b0800804 	addi	r2,r22,32
 4016774:	b0c00615 	stw	r3,24(r22)
 4016778:	a8ffff17 	ldw	r3,-4(r21)
 401677c:	b0c00715 	stw	r3,28(r22)
 4016780:	003f9b06 	br	40165f0 <__alt_mem_onchip_memory2_0+0xfc015350>
 4016784:	9005883a 	mov	r2,r18
 4016788:	003fc706 	br	40166a8 <__alt_mem_onchip_memory2_0+0xfc015408>
 401678c:	a80b883a 	mov	r5,r21
 4016790:	9009883a 	mov	r4,r18
 4016794:	4014f080 	call	4014f08 <memmove>
 4016798:	003fc906 	br	40166c0 <__alt_mem_onchip_memory2_0+0xfc015420>
 401679c:	a8800217 	ldw	r2,8(r21)
 40167a0:	b0800415 	stw	r2,16(r22)
 40167a4:	a8800317 	ldw	r2,12(r21)
 40167a8:	b0800515 	stw	r2,20(r22)
 40167ac:	31000726 	beq	r6,r4,40167cc <_realloc_r+0x548>
 40167b0:	b0800604 	addi	r2,r22,24
 40167b4:	ad400404 	addi	r21,r21,16
 40167b8:	003fbb06 	br	40166a8 <__alt_mem_onchip_memory2_0+0xfc015408>
 40167bc:	a009883a 	mov	r4,r20
 40167c0:	401c55c0 	call	401c55c <__malloc_unlock>
 40167c4:	0005883a 	mov	r2,zero
 40167c8:	003f0a06 	br	40163f4 <__alt_mem_onchip_memory2_0+0xfc015154>
 40167cc:	a8c00417 	ldw	r3,16(r21)
 40167d0:	ad400604 	addi	r21,r21,24
 40167d4:	b0800804 	addi	r2,r22,32
 40167d8:	b0c00615 	stw	r3,24(r22)
 40167dc:	a8ffff17 	ldw	r3,-4(r21)
 40167e0:	b0c00715 	stw	r3,28(r22)
 40167e4:	003fb006 	br	40166a8 <__alt_mem_onchip_memory2_0+0xfc015408>

040167e8 <__fpclassifyd>:
 40167e8:	00a00034 	movhi	r2,32768
 40167ec:	10bfffc4 	addi	r2,r2,-1
 40167f0:	2884703a 	and	r2,r5,r2
 40167f4:	10000726 	beq	r2,zero,4016814 <__fpclassifyd+0x2c>
 40167f8:	00fffc34 	movhi	r3,65520
 40167fc:	019ff834 	movhi	r6,32736
 4016800:	28c7883a 	add	r3,r5,r3
 4016804:	31bfffc4 	addi	r6,r6,-1
 4016808:	30c00536 	bltu	r6,r3,4016820 <__fpclassifyd+0x38>
 401680c:	00800104 	movi	r2,4
 4016810:	f800283a 	ret
 4016814:	2000021e 	bne	r4,zero,4016820 <__fpclassifyd+0x38>
 4016818:	00800084 	movi	r2,2
 401681c:	f800283a 	ret
 4016820:	00dffc34 	movhi	r3,32752
 4016824:	019ff834 	movhi	r6,32736
 4016828:	28cb883a 	add	r5,r5,r3
 401682c:	31bfffc4 	addi	r6,r6,-1
 4016830:	317ff62e 	bgeu	r6,r5,401680c <__alt_mem_onchip_memory2_0+0xfc01556c>
 4016834:	01400434 	movhi	r5,16
 4016838:	297fffc4 	addi	r5,r5,-1
 401683c:	28800236 	bltu	r5,r2,4016848 <__fpclassifyd+0x60>
 4016840:	008000c4 	movi	r2,3
 4016844:	f800283a 	ret
 4016848:	10c00226 	beq	r2,r3,4016854 <__fpclassifyd+0x6c>
 401684c:	0005883a 	mov	r2,zero
 4016850:	f800283a 	ret
 4016854:	2005003a 	cmpeq	r2,r4,zero
 4016858:	f800283a 	ret

0401685c <__sread>:
 401685c:	defffe04 	addi	sp,sp,-8
 4016860:	dc000015 	stw	r16,0(sp)
 4016864:	2821883a 	mov	r16,r5
 4016868:	2940038f 	ldh	r5,14(r5)
 401686c:	dfc00115 	stw	ra,4(sp)
 4016870:	40187940 	call	4018794 <_read_r>
 4016874:	10000716 	blt	r2,zero,4016894 <__sread+0x38>
 4016878:	80c01417 	ldw	r3,80(r16)
 401687c:	1887883a 	add	r3,r3,r2
 4016880:	80c01415 	stw	r3,80(r16)
 4016884:	dfc00117 	ldw	ra,4(sp)
 4016888:	dc000017 	ldw	r16,0(sp)
 401688c:	dec00204 	addi	sp,sp,8
 4016890:	f800283a 	ret
 4016894:	80c0030b 	ldhu	r3,12(r16)
 4016898:	18fbffcc 	andi	r3,r3,61439
 401689c:	80c0030d 	sth	r3,12(r16)
 40168a0:	dfc00117 	ldw	ra,4(sp)
 40168a4:	dc000017 	ldw	r16,0(sp)
 40168a8:	dec00204 	addi	sp,sp,8
 40168ac:	f800283a 	ret

040168b0 <__seofread>:
 40168b0:	0005883a 	mov	r2,zero
 40168b4:	f800283a 	ret

040168b8 <__swrite>:
 40168b8:	2880030b 	ldhu	r2,12(r5)
 40168bc:	defffb04 	addi	sp,sp,-20
 40168c0:	dcc00315 	stw	r19,12(sp)
 40168c4:	dc800215 	stw	r18,8(sp)
 40168c8:	dc400115 	stw	r17,4(sp)
 40168cc:	dc000015 	stw	r16,0(sp)
 40168d0:	dfc00415 	stw	ra,16(sp)
 40168d4:	10c0400c 	andi	r3,r2,256
 40168d8:	2821883a 	mov	r16,r5
 40168dc:	2023883a 	mov	r17,r4
 40168e0:	3025883a 	mov	r18,r6
 40168e4:	3827883a 	mov	r19,r7
 40168e8:	18000526 	beq	r3,zero,4016900 <__swrite+0x48>
 40168ec:	2940038f 	ldh	r5,14(r5)
 40168f0:	01c00084 	movi	r7,2
 40168f4:	000d883a 	mov	r6,zero
 40168f8:	40187340 	call	4018734 <_lseek_r>
 40168fc:	8080030b 	ldhu	r2,12(r16)
 4016900:	8140038f 	ldh	r5,14(r16)
 4016904:	10bbffcc 	andi	r2,r2,61439
 4016908:	980f883a 	mov	r7,r19
 401690c:	900d883a 	mov	r6,r18
 4016910:	8809883a 	mov	r4,r17
 4016914:	8080030d 	sth	r2,12(r16)
 4016918:	dfc00417 	ldw	ra,16(sp)
 401691c:	dcc00317 	ldw	r19,12(sp)
 4016920:	dc800217 	ldw	r18,8(sp)
 4016924:	dc400117 	ldw	r17,4(sp)
 4016928:	dc000017 	ldw	r16,0(sp)
 401692c:	dec00504 	addi	sp,sp,20
 4016930:	40181e81 	jmpi	40181e8 <_write_r>

04016934 <__sseek>:
 4016934:	defffe04 	addi	sp,sp,-8
 4016938:	dc000015 	stw	r16,0(sp)
 401693c:	2821883a 	mov	r16,r5
 4016940:	2940038f 	ldh	r5,14(r5)
 4016944:	dfc00115 	stw	ra,4(sp)
 4016948:	40187340 	call	4018734 <_lseek_r>
 401694c:	00ffffc4 	movi	r3,-1
 4016950:	10c00826 	beq	r2,r3,4016974 <__sseek+0x40>
 4016954:	80c0030b 	ldhu	r3,12(r16)
 4016958:	80801415 	stw	r2,80(r16)
 401695c:	18c40014 	ori	r3,r3,4096
 4016960:	80c0030d 	sth	r3,12(r16)
 4016964:	dfc00117 	ldw	ra,4(sp)
 4016968:	dc000017 	ldw	r16,0(sp)
 401696c:	dec00204 	addi	sp,sp,8
 4016970:	f800283a 	ret
 4016974:	80c0030b 	ldhu	r3,12(r16)
 4016978:	18fbffcc 	andi	r3,r3,61439
 401697c:	80c0030d 	sth	r3,12(r16)
 4016980:	dfc00117 	ldw	ra,4(sp)
 4016984:	dc000017 	ldw	r16,0(sp)
 4016988:	dec00204 	addi	sp,sp,8
 401698c:	f800283a 	ret

04016990 <__sclose>:
 4016990:	2940038f 	ldh	r5,14(r5)
 4016994:	40182481 	jmpi	4018248 <_close_r>

04016998 <__sprint_r.part.0>:
 4016998:	28801917 	ldw	r2,100(r5)
 401699c:	defff604 	addi	sp,sp,-40
 40169a0:	dd400515 	stw	r21,20(sp)
 40169a4:	dfc00915 	stw	ra,36(sp)
 40169a8:	df000815 	stw	fp,32(sp)
 40169ac:	ddc00715 	stw	r23,28(sp)
 40169b0:	dd800615 	stw	r22,24(sp)
 40169b4:	dd000415 	stw	r20,16(sp)
 40169b8:	dcc00315 	stw	r19,12(sp)
 40169bc:	dc800215 	stw	r18,8(sp)
 40169c0:	dc400115 	stw	r17,4(sp)
 40169c4:	dc000015 	stw	r16,0(sp)
 40169c8:	1088000c 	andi	r2,r2,8192
 40169cc:	302b883a 	mov	r21,r6
 40169d0:	10002e26 	beq	r2,zero,4016a8c <__sprint_r.part.0+0xf4>
 40169d4:	30800217 	ldw	r2,8(r6)
 40169d8:	35800017 	ldw	r22,0(r6)
 40169dc:	10002926 	beq	r2,zero,4016a84 <__sprint_r.part.0+0xec>
 40169e0:	2827883a 	mov	r19,r5
 40169e4:	2029883a 	mov	r20,r4
 40169e8:	b5c00104 	addi	r23,r22,4
 40169ec:	04bfffc4 	movi	r18,-1
 40169f0:	bc400017 	ldw	r17,0(r23)
 40169f4:	b4000017 	ldw	r16,0(r22)
 40169f8:	0039883a 	mov	fp,zero
 40169fc:	8822d0ba 	srli	r17,r17,2
 4016a00:	8800031e 	bne	r17,zero,4016a10 <__sprint_r.part.0+0x78>
 4016a04:	00001806 	br	4016a68 <__sprint_r.part.0+0xd0>
 4016a08:	84000104 	addi	r16,r16,4
 4016a0c:	8f001526 	beq	r17,fp,4016a64 <__sprint_r.part.0+0xcc>
 4016a10:	81400017 	ldw	r5,0(r16)
 4016a14:	980d883a 	mov	r6,r19
 4016a18:	a009883a 	mov	r4,r20
 4016a1c:	40185e00 	call	40185e0 <_fputwc_r>
 4016a20:	e7000044 	addi	fp,fp,1
 4016a24:	14bff81e 	bne	r2,r18,4016a08 <__alt_mem_onchip_memory2_0+0xfc015768>
 4016a28:	9005883a 	mov	r2,r18
 4016a2c:	a8000215 	stw	zero,8(r21)
 4016a30:	a8000115 	stw	zero,4(r21)
 4016a34:	dfc00917 	ldw	ra,36(sp)
 4016a38:	df000817 	ldw	fp,32(sp)
 4016a3c:	ddc00717 	ldw	r23,28(sp)
 4016a40:	dd800617 	ldw	r22,24(sp)
 4016a44:	dd400517 	ldw	r21,20(sp)
 4016a48:	dd000417 	ldw	r20,16(sp)
 4016a4c:	dcc00317 	ldw	r19,12(sp)
 4016a50:	dc800217 	ldw	r18,8(sp)
 4016a54:	dc400117 	ldw	r17,4(sp)
 4016a58:	dc000017 	ldw	r16,0(sp)
 4016a5c:	dec00a04 	addi	sp,sp,40
 4016a60:	f800283a 	ret
 4016a64:	a8800217 	ldw	r2,8(r21)
 4016a68:	8c63883a 	add	r17,r17,r17
 4016a6c:	8c63883a 	add	r17,r17,r17
 4016a70:	1445c83a 	sub	r2,r2,r17
 4016a74:	a8800215 	stw	r2,8(r21)
 4016a78:	b5800204 	addi	r22,r22,8
 4016a7c:	bdc00204 	addi	r23,r23,8
 4016a80:	103fdb1e 	bne	r2,zero,40169f0 <__alt_mem_onchip_memory2_0+0xfc015750>
 4016a84:	0005883a 	mov	r2,zero
 4016a88:	003fe806 	br	4016a2c <__alt_mem_onchip_memory2_0+0xfc01578c>
 4016a8c:	401453c0 	call	401453c <__sfvwrite_r>
 4016a90:	003fe606 	br	4016a2c <__alt_mem_onchip_memory2_0+0xfc01578c>

04016a94 <__sprint_r>:
 4016a94:	30c00217 	ldw	r3,8(r6)
 4016a98:	18000126 	beq	r3,zero,4016aa0 <__sprint_r+0xc>
 4016a9c:	40169981 	jmpi	4016998 <__sprint_r.part.0>
 4016aa0:	30000115 	stw	zero,4(r6)
 4016aa4:	0005883a 	mov	r2,zero
 4016aa8:	f800283a 	ret

04016aac <___vfiprintf_internal_r>:
 4016aac:	deffca04 	addi	sp,sp,-216
 4016ab0:	dd403115 	stw	r21,196(sp)
 4016ab4:	dfc03515 	stw	ra,212(sp)
 4016ab8:	df003415 	stw	fp,208(sp)
 4016abc:	ddc03315 	stw	r23,204(sp)
 4016ac0:	dd803215 	stw	r22,200(sp)
 4016ac4:	dd003015 	stw	r20,192(sp)
 4016ac8:	dcc02f15 	stw	r19,188(sp)
 4016acc:	dc802e15 	stw	r18,184(sp)
 4016ad0:	dc402d15 	stw	r17,180(sp)
 4016ad4:	dc002c15 	stw	r16,176(sp)
 4016ad8:	d9002115 	stw	r4,132(sp)
 4016adc:	d9402015 	stw	r5,128(sp)
 4016ae0:	d9c02215 	stw	r7,136(sp)
 4016ae4:	302b883a 	mov	r21,r6
 4016ae8:	20000226 	beq	r4,zero,4016af4 <___vfiprintf_internal_r+0x48>
 4016aec:	20800e17 	ldw	r2,56(r4)
 4016af0:	1000cf26 	beq	r2,zero,4016e30 <___vfiprintf_internal_r+0x384>
 4016af4:	d8c02017 	ldw	r3,128(sp)
 4016af8:	1880030b 	ldhu	r2,12(r3)
 4016afc:	10c8000c 	andi	r3,r2,8192
 4016b00:	1800071e 	bne	r3,zero,4016b20 <___vfiprintf_internal_r+0x74>
 4016b04:	d9402017 	ldw	r5,128(sp)
 4016b08:	00f7ffc4 	movi	r3,-8193
 4016b0c:	10880014 	ori	r2,r2,8192
 4016b10:	29001917 	ldw	r4,100(r5)
 4016b14:	2880030d 	sth	r2,12(r5)
 4016b18:	20c6703a 	and	r3,r4,r3
 4016b1c:	28c01915 	stw	r3,100(r5)
 4016b20:	10c0020c 	andi	r3,r2,8
 4016b24:	1800a526 	beq	r3,zero,4016dbc <___vfiprintf_internal_r+0x310>
 4016b28:	d9002017 	ldw	r4,128(sp)
 4016b2c:	20c00417 	ldw	r3,16(r4)
 4016b30:	1800a226 	beq	r3,zero,4016dbc <___vfiprintf_internal_r+0x310>
 4016b34:	1080068c 	andi	r2,r2,26
 4016b38:	00c00284 	movi	r3,10
 4016b3c:	10c0a826 	beq	r2,r3,4016de0 <___vfiprintf_internal_r+0x334>
 4016b40:	d9001a04 	addi	r4,sp,104
 4016b44:	d94019c4 	addi	r5,sp,103
 4016b48:	048100b4 	movhi	r18,1026
 4016b4c:	2145c83a 	sub	r2,r4,r5
 4016b50:	949efd04 	addi	r18,r18,31732
 4016b54:	d9001e15 	stw	r4,120(sp)
 4016b58:	d9401f15 	stw	r5,124(sp)
 4016b5c:	dec01a15 	stw	sp,104(sp)
 4016b60:	d8001c15 	stw	zero,112(sp)
 4016b64:	d8001b15 	stw	zero,108(sp)
 4016b68:	d811883a 	mov	r8,sp
 4016b6c:	d8002615 	stw	zero,152(sp)
 4016b70:	d8002415 	stw	zero,144(sp)
 4016b74:	d8802815 	stw	r2,160(sp)
 4016b78:	a82d883a 	mov	r22,r21
 4016b7c:	b0800007 	ldb	r2,0(r22)
 4016b80:	10040d26 	beq	r2,zero,4017bb8 <___vfiprintf_internal_r+0x110c>
 4016b84:	00c00944 	movi	r3,37
 4016b88:	b029883a 	mov	r20,r22
 4016b8c:	10c0021e 	bne	r2,r3,4016b98 <___vfiprintf_internal_r+0xec>
 4016b90:	00001606 	br	4016bec <___vfiprintf_internal_r+0x140>
 4016b94:	10c00326 	beq	r2,r3,4016ba4 <___vfiprintf_internal_r+0xf8>
 4016b98:	a5000044 	addi	r20,r20,1
 4016b9c:	a0800007 	ldb	r2,0(r20)
 4016ba0:	103ffc1e 	bne	r2,zero,4016b94 <__alt_mem_onchip_memory2_0+0xfc0158f4>
 4016ba4:	a5a1c83a 	sub	r16,r20,r22
 4016ba8:	80001026 	beq	r16,zero,4016bec <___vfiprintf_internal_r+0x140>
 4016bac:	d8c01c17 	ldw	r3,112(sp)
 4016bb0:	d8801b17 	ldw	r2,108(sp)
 4016bb4:	45800015 	stw	r22,0(r8)
 4016bb8:	80c7883a 	add	r3,r16,r3
 4016bbc:	10800044 	addi	r2,r2,1
 4016bc0:	44000115 	stw	r16,4(r8)
 4016bc4:	d8c01c15 	stw	r3,112(sp)
 4016bc8:	d8801b15 	stw	r2,108(sp)
 4016bcc:	010001c4 	movi	r4,7
 4016bd0:	2080750e 	bge	r4,r2,4016da8 <___vfiprintf_internal_r+0x2fc>
 4016bd4:	1803951e 	bne	r3,zero,4017a2c <___vfiprintf_internal_r+0xf80>
 4016bd8:	d8c02417 	ldw	r3,144(sp)
 4016bdc:	d8001b15 	stw	zero,108(sp)
 4016be0:	d811883a 	mov	r8,sp
 4016be4:	1c07883a 	add	r3,r3,r16
 4016be8:	d8c02415 	stw	r3,144(sp)
 4016bec:	a0800007 	ldb	r2,0(r20)
 4016bf0:	1002e026 	beq	r2,zero,4017774 <___vfiprintf_internal_r+0xcc8>
 4016bf4:	a5800044 	addi	r22,r20,1
 4016bf8:	a0c00047 	ldb	r3,1(r20)
 4016bfc:	d8001d85 	stb	zero,118(sp)
 4016c00:	0027883a 	mov	r19,zero
 4016c04:	d8002305 	stb	zero,140(sp)
 4016c08:	043fffc4 	movi	r16,-1
 4016c0c:	d8002515 	stw	zero,148(sp)
 4016c10:	0023883a 	mov	r17,zero
 4016c14:	05001604 	movi	r20,88
 4016c18:	05400244 	movi	r21,9
 4016c1c:	402f883a 	mov	r23,r8
 4016c20:	b5800044 	addi	r22,r22,1
 4016c24:	18bff804 	addi	r2,r3,-32
 4016c28:	a0827736 	bltu	r20,r2,4017608 <___vfiprintf_internal_r+0xb5c>
 4016c2c:	100490ba 	slli	r2,r2,2
 4016c30:	01010074 	movhi	r4,1025
 4016c34:	211b1104 	addi	r4,r4,27716
 4016c38:	1105883a 	add	r2,r2,r4
 4016c3c:	10800017 	ldw	r2,0(r2)
 4016c40:	1000683a 	jmp	r2
 4016c44:	04017308 	cmpgei	r16,zero,1484
 4016c48:	04017608 	cmpgei	r16,zero,1496
 4016c4c:	04017608 	cmpgei	r16,zero,1496
 4016c50:	04017324 	muli	r16,zero,1484
 4016c54:	04017608 	cmpgei	r16,zero,1496
 4016c58:	04017608 	cmpgei	r16,zero,1496
 4016c5c:	04017608 	cmpgei	r16,zero,1496
 4016c60:	04017608 	cmpgei	r16,zero,1496
 4016c64:	04017608 	cmpgei	r16,zero,1496
 4016c68:	04017608 	cmpgei	r16,zero,1496
 4016c6c:	0401752c 	andhi	r16,zero,1492
 4016c70:	04017550 	cmplti	r16,zero,1493
 4016c74:	04017608 	cmpgei	r16,zero,1496
 4016c78:	04016e48 	cmpgei	r16,zero,1465
 4016c7c:	04017564 	muli	r16,zero,1493
 4016c80:	04017608 	cmpgei	r16,zero,1496
 4016c84:	04017330 	cmpltui	r16,zero,1484
 4016c88:	0401733c 	xorhi	r16,zero,1484
 4016c8c:	0401733c 	xorhi	r16,zero,1484
 4016c90:	0401733c 	xorhi	r16,zero,1484
 4016c94:	0401733c 	xorhi	r16,zero,1484
 4016c98:	0401733c 	xorhi	r16,zero,1484
 4016c9c:	0401733c 	xorhi	r16,zero,1484
 4016ca0:	0401733c 	xorhi	r16,zero,1484
 4016ca4:	0401733c 	xorhi	r16,zero,1484
 4016ca8:	0401733c 	xorhi	r16,zero,1484
 4016cac:	04017608 	cmpgei	r16,zero,1496
 4016cb0:	04017608 	cmpgei	r16,zero,1496
 4016cb4:	04017608 	cmpgei	r16,zero,1496
 4016cb8:	04017608 	cmpgei	r16,zero,1496
 4016cbc:	04017608 	cmpgei	r16,zero,1496
 4016cc0:	04017608 	cmpgei	r16,zero,1496
 4016cc4:	04017608 	cmpgei	r16,zero,1496
 4016cc8:	04017608 	cmpgei	r16,zero,1496
 4016ccc:	04017608 	cmpgei	r16,zero,1496
 4016cd0:	04017608 	cmpgei	r16,zero,1496
 4016cd4:	0401737c 	xorhi	r16,zero,1485
 4016cd8:	04017608 	cmpgei	r16,zero,1496
 4016cdc:	04017608 	cmpgei	r16,zero,1496
 4016ce0:	04017608 	cmpgei	r16,zero,1496
 4016ce4:	04017608 	cmpgei	r16,zero,1496
 4016ce8:	04017608 	cmpgei	r16,zero,1496
 4016cec:	04017608 	cmpgei	r16,zero,1496
 4016cf0:	04017608 	cmpgei	r16,zero,1496
 4016cf4:	04017608 	cmpgei	r16,zero,1496
 4016cf8:	04017608 	cmpgei	r16,zero,1496
 4016cfc:	04017608 	cmpgei	r16,zero,1496
 4016d00:	040173b8 	rdprs	r16,zero,1486
 4016d04:	04017608 	cmpgei	r16,zero,1496
 4016d08:	04017608 	cmpgei	r16,zero,1496
 4016d0c:	04017608 	cmpgei	r16,zero,1496
 4016d10:	04017608 	cmpgei	r16,zero,1496
 4016d14:	04017608 	cmpgei	r16,zero,1496
 4016d18:	04017414 	movui	r16,1488
 4016d1c:	04017608 	cmpgei	r16,zero,1496
 4016d20:	04017608 	cmpgei	r16,zero,1496
 4016d24:	04017488 	cmpgei	r16,zero,1490
 4016d28:	04017608 	cmpgei	r16,zero,1496
 4016d2c:	04017608 	cmpgei	r16,zero,1496
 4016d30:	04017608 	cmpgei	r16,zero,1496
 4016d34:	04017608 	cmpgei	r16,zero,1496
 4016d38:	04017608 	cmpgei	r16,zero,1496
 4016d3c:	04017608 	cmpgei	r16,zero,1496
 4016d40:	04017608 	cmpgei	r16,zero,1496
 4016d44:	04017608 	cmpgei	r16,zero,1496
 4016d48:	04017608 	cmpgei	r16,zero,1496
 4016d4c:	04017608 	cmpgei	r16,zero,1496
 4016d50:	04017230 	cmpltui	r16,zero,1480
 4016d54:	04017260 	cmpeqi	r16,zero,1481
 4016d58:	04017608 	cmpgei	r16,zero,1496
 4016d5c:	04017608 	cmpgei	r16,zero,1496
 4016d60:	04017608 	cmpgei	r16,zero,1496
 4016d64:	040175b0 	cmpltui	r16,zero,1494
 4016d68:	04017260 	cmpeqi	r16,zero,1481
 4016d6c:	04017608 	cmpgei	r16,zero,1496
 4016d70:	04017608 	cmpgei	r16,zero,1496
 4016d74:	04017108 	cmpgei	r16,zero,1476
 4016d78:	04017608 	cmpgei	r16,zero,1496
 4016d7c:	0401711c 	xori	r16,zero,1476
 4016d80:	04017154 	movui	r16,1477
 4016d84:	04016e54 	movui	r16,1465
 4016d88:	040170fc 	xorhi	r16,zero,1475
 4016d8c:	04017608 	cmpgei	r16,zero,1496
 4016d90:	040174c8 	cmpgei	r16,zero,1491
 4016d94:	04017608 	cmpgei	r16,zero,1496
 4016d98:	04017514 	movui	r16,1492
 4016d9c:	04017608 	cmpgei	r16,zero,1496
 4016da0:	04017608 	cmpgei	r16,zero,1496
 4016da4:	040171d8 	cmpnei	r16,zero,1479
 4016da8:	42000204 	addi	r8,r8,8
 4016dac:	d8c02417 	ldw	r3,144(sp)
 4016db0:	1c07883a 	add	r3,r3,r16
 4016db4:	d8c02415 	stw	r3,144(sp)
 4016db8:	003f8c06 	br	4016bec <__alt_mem_onchip_memory2_0+0xfc01594c>
 4016dbc:	d9402017 	ldw	r5,128(sp)
 4016dc0:	d9002117 	ldw	r4,132(sp)
 4016dc4:	40120ac0 	call	40120ac <__swsetup_r>
 4016dc8:	1003c11e 	bne	r2,zero,4017cd0 <___vfiprintf_internal_r+0x1224>
 4016dcc:	d9402017 	ldw	r5,128(sp)
 4016dd0:	00c00284 	movi	r3,10
 4016dd4:	2880030b 	ldhu	r2,12(r5)
 4016dd8:	1080068c 	andi	r2,r2,26
 4016ddc:	10ff581e 	bne	r2,r3,4016b40 <__alt_mem_onchip_memory2_0+0xfc0158a0>
 4016de0:	d8c02017 	ldw	r3,128(sp)
 4016de4:	1880038f 	ldh	r2,14(r3)
 4016de8:	103f5516 	blt	r2,zero,4016b40 <__alt_mem_onchip_memory2_0+0xfc0158a0>
 4016dec:	d9c02217 	ldw	r7,136(sp)
 4016df0:	d9002117 	ldw	r4,132(sp)
 4016df4:	a80d883a 	mov	r6,r21
 4016df8:	180b883a 	mov	r5,r3
 4016dfc:	4017fd40 	call	4017fd4 <__sbprintf>
 4016e00:	dfc03517 	ldw	ra,212(sp)
 4016e04:	df003417 	ldw	fp,208(sp)
 4016e08:	ddc03317 	ldw	r23,204(sp)
 4016e0c:	dd803217 	ldw	r22,200(sp)
 4016e10:	dd403117 	ldw	r21,196(sp)
 4016e14:	dd003017 	ldw	r20,192(sp)
 4016e18:	dcc02f17 	ldw	r19,188(sp)
 4016e1c:	dc802e17 	ldw	r18,184(sp)
 4016e20:	dc402d17 	ldw	r17,180(sp)
 4016e24:	dc002c17 	ldw	r16,176(sp)
 4016e28:	dec03604 	addi	sp,sp,216
 4016e2c:	f800283a 	ret
 4016e30:	40140b80 	call	40140b8 <__sinit>
 4016e34:	003f2f06 	br	4016af4 <__alt_mem_onchip_memory2_0+0xfc015854>
 4016e38:	d8c02517 	ldw	r3,148(sp)
 4016e3c:	d8802215 	stw	r2,136(sp)
 4016e40:	00c7c83a 	sub	r3,zero,r3
 4016e44:	d8c02515 	stw	r3,148(sp)
 4016e48:	8c400114 	ori	r17,r17,4
 4016e4c:	b0c00007 	ldb	r3,0(r22)
 4016e50:	003f7306 	br	4016c20 <__alt_mem_onchip_memory2_0+0xfc015980>
 4016e54:	00800c04 	movi	r2,48
 4016e58:	d9402217 	ldw	r5,136(sp)
 4016e5c:	d8801d05 	stb	r2,116(sp)
 4016e60:	00801e04 	movi	r2,120
 4016e64:	d8801d45 	stb	r2,117(sp)
 4016e68:	d8001d85 	stb	zero,118(sp)
 4016e6c:	b811883a 	mov	r8,r23
 4016e70:	28c00104 	addi	r3,r5,4
 4016e74:	2cc00017 	ldw	r19,0(r5)
 4016e78:	0029883a 	mov	r20,zero
 4016e7c:	88800094 	ori	r2,r17,2
 4016e80:	80032516 	blt	r16,zero,4017b18 <___vfiprintf_internal_r+0x106c>
 4016e84:	00bfdfc4 	movi	r2,-129
 4016e88:	88a2703a 	and	r17,r17,r2
 4016e8c:	d8c02215 	stw	r3,136(sp)
 4016e90:	8c400094 	ori	r17,r17,2
 4016e94:	98032a1e 	bne	r19,zero,4017b40 <___vfiprintf_internal_r+0x1094>
 4016e98:	008100b4 	movhi	r2,1026
 4016e9c:	109e9d04 	addi	r2,r2,31348
 4016ea0:	d8802615 	stw	r2,152(sp)
 4016ea4:	002b883a 	mov	r21,zero
 4016ea8:	8001741e 	bne	r16,zero,401747c <___vfiprintf_internal_r+0x9d0>
 4016eac:	0021883a 	mov	r16,zero
 4016eb0:	0029883a 	mov	r20,zero
 4016eb4:	ddc01a04 	addi	r23,sp,104
 4016eb8:	8027883a 	mov	r19,r16
 4016ebc:	8500010e 	bge	r16,r20,4016ec4 <___vfiprintf_internal_r+0x418>
 4016ec0:	a027883a 	mov	r19,r20
 4016ec4:	ad403fcc 	andi	r21,r21,255
 4016ec8:	ad40201c 	xori	r21,r21,128
 4016ecc:	ad7fe004 	addi	r21,r21,-128
 4016ed0:	a8000126 	beq	r21,zero,4016ed8 <___vfiprintf_internal_r+0x42c>
 4016ed4:	9cc00044 	addi	r19,r19,1
 4016ed8:	89c0008c 	andi	r7,r17,2
 4016edc:	38000126 	beq	r7,zero,4016ee4 <___vfiprintf_internal_r+0x438>
 4016ee0:	9cc00084 	addi	r19,r19,2
 4016ee4:	88c0210c 	andi	r3,r17,132
 4016ee8:	1801dd1e 	bne	r3,zero,4017660 <___vfiprintf_internal_r+0xbb4>
 4016eec:	d9402517 	ldw	r5,148(sp)
 4016ef0:	2cebc83a 	sub	r21,r5,r19
 4016ef4:	0541da0e 	bge	zero,r21,4017660 <___vfiprintf_internal_r+0xbb4>
 4016ef8:	07000404 	movi	fp,16
 4016efc:	d8801c17 	ldw	r2,112(sp)
 4016f00:	e543be0e 	bge	fp,r21,4017dfc <___vfiprintf_internal_r+0x1350>
 4016f04:	014100b4 	movhi	r5,1026
 4016f08:	295f0104 	addi	r5,r5,31748
 4016f0c:	dc002715 	stw	r16,156(sp)
 4016f10:	d9801b17 	ldw	r6,108(sp)
 4016f14:	a821883a 	mov	r16,r21
 4016f18:	d9402315 	stw	r5,140(sp)
 4016f1c:	028001c4 	movi	r10,7
 4016f20:	d9c02915 	stw	r7,164(sp)
 4016f24:	182b883a 	mov	r21,r3
 4016f28:	00000506 	br	4016f40 <___vfiprintf_internal_r+0x494>
 4016f2c:	31000084 	addi	r4,r6,2
 4016f30:	42000204 	addi	r8,r8,8
 4016f34:	180d883a 	mov	r6,r3
 4016f38:	843ffc04 	addi	r16,r16,-16
 4016f3c:	e4000f0e 	bge	fp,r16,4016f7c <___vfiprintf_internal_r+0x4d0>
 4016f40:	010100b4 	movhi	r4,1026
 4016f44:	10800404 	addi	r2,r2,16
 4016f48:	30c00044 	addi	r3,r6,1
 4016f4c:	211f0104 	addi	r4,r4,31748
 4016f50:	41000015 	stw	r4,0(r8)
 4016f54:	47000115 	stw	fp,4(r8)
 4016f58:	d8801c15 	stw	r2,112(sp)
 4016f5c:	d8c01b15 	stw	r3,108(sp)
 4016f60:	50fff20e 	bge	r10,r3,4016f2c <__alt_mem_onchip_memory2_0+0xfc015c8c>
 4016f64:	1001b21e 	bne	r2,zero,4017630 <___vfiprintf_internal_r+0xb84>
 4016f68:	843ffc04 	addi	r16,r16,-16
 4016f6c:	000d883a 	mov	r6,zero
 4016f70:	01000044 	movi	r4,1
 4016f74:	d811883a 	mov	r8,sp
 4016f78:	e43ff116 	blt	fp,r16,4016f40 <__alt_mem_onchip_memory2_0+0xfc015ca0>
 4016f7c:	a807883a 	mov	r3,r21
 4016f80:	d9c02917 	ldw	r7,164(sp)
 4016f84:	802b883a 	mov	r21,r16
 4016f88:	dc002717 	ldw	r16,156(sp)
 4016f8c:	d9402317 	ldw	r5,140(sp)
 4016f90:	a885883a 	add	r2,r21,r2
 4016f94:	45400115 	stw	r21,4(r8)
 4016f98:	41400015 	stw	r5,0(r8)
 4016f9c:	d8801c15 	stw	r2,112(sp)
 4016fa0:	d9001b15 	stw	r4,108(sp)
 4016fa4:	014001c4 	movi	r5,7
 4016fa8:	29026216 	blt	r5,r4,4017934 <___vfiprintf_internal_r+0xe88>
 4016fac:	d9801d87 	ldb	r6,118(sp)
 4016fb0:	42000204 	addi	r8,r8,8
 4016fb4:	21400044 	addi	r5,r4,1
 4016fb8:	3001ae1e 	bne	r6,zero,4017674 <___vfiprintf_internal_r+0xbc8>
 4016fbc:	3801bb26 	beq	r7,zero,40176ac <___vfiprintf_internal_r+0xc00>
 4016fc0:	d9001d04 	addi	r4,sp,116
 4016fc4:	10800084 	addi	r2,r2,2
 4016fc8:	41000015 	stw	r4,0(r8)
 4016fcc:	01000084 	movi	r4,2
 4016fd0:	41000115 	stw	r4,4(r8)
 4016fd4:	d8801c15 	stw	r2,112(sp)
 4016fd8:	d9401b15 	stw	r5,108(sp)
 4016fdc:	010001c4 	movi	r4,7
 4016fe0:	2142680e 	bge	r4,r5,4017984 <___vfiprintf_internal_r+0xed8>
 4016fe4:	1002b11e 	bne	r2,zero,4017aac <___vfiprintf_internal_r+0x1000>
 4016fe8:	01802004 	movi	r6,128
 4016fec:	01400044 	movi	r5,1
 4016ff0:	0009883a 	mov	r4,zero
 4016ff4:	d811883a 	mov	r8,sp
 4016ff8:	1981ae1e 	bne	r3,r6,40176b4 <___vfiprintf_internal_r+0xc08>
 4016ffc:	d8c02517 	ldw	r3,148(sp)
 4017000:	1cf9c83a 	sub	fp,r3,r19
 4017004:	0701ab0e 	bge	zero,fp,40176b4 <___vfiprintf_internal_r+0xc08>
 4017008:	05400404 	movi	r21,16
 401700c:	af03a90e 	bge	r21,fp,4017eb4 <___vfiprintf_internal_r+0x1408>
 4017010:	014100b4 	movhi	r5,1026
 4017014:	295efd04 	addi	r5,r5,31732
 4017018:	d9402315 	stw	r5,140(sp)
 401701c:	01c001c4 	movi	r7,7
 4017020:	00000506 	br	4017038 <___vfiprintf_internal_r+0x58c>
 4017024:	21800084 	addi	r6,r4,2
 4017028:	42000204 	addi	r8,r8,8
 401702c:	1809883a 	mov	r4,r3
 4017030:	e73ffc04 	addi	fp,fp,-16
 4017034:	af000d0e 	bge	r21,fp,401706c <___vfiprintf_internal_r+0x5c0>
 4017038:	10800404 	addi	r2,r2,16
 401703c:	20c00044 	addi	r3,r4,1
 4017040:	44800015 	stw	r18,0(r8)
 4017044:	45400115 	stw	r21,4(r8)
 4017048:	d8801c15 	stw	r2,112(sp)
 401704c:	d8c01b15 	stw	r3,108(sp)
 4017050:	38fff40e 	bge	r7,r3,4017024 <__alt_mem_onchip_memory2_0+0xfc015d84>
 4017054:	10022b1e 	bne	r2,zero,4017904 <___vfiprintf_internal_r+0xe58>
 4017058:	e73ffc04 	addi	fp,fp,-16
 401705c:	01800044 	movi	r6,1
 4017060:	0009883a 	mov	r4,zero
 4017064:	d811883a 	mov	r8,sp
 4017068:	af3ff316 	blt	r21,fp,4017038 <__alt_mem_onchip_memory2_0+0xfc015d98>
 401706c:	d8c02317 	ldw	r3,140(sp)
 4017070:	1705883a 	add	r2,r2,fp
 4017074:	47000115 	stw	fp,4(r8)
 4017078:	40c00015 	stw	r3,0(r8)
 401707c:	d8801c15 	stw	r2,112(sp)
 4017080:	d9801b15 	stw	r6,108(sp)
 4017084:	00c001c4 	movi	r3,7
 4017088:	19829416 	blt	r3,r6,4017adc <___vfiprintf_internal_r+0x1030>
 401708c:	8521c83a 	sub	r16,r16,r20
 4017090:	42000204 	addi	r8,r8,8
 4017094:	31400044 	addi	r5,r6,1
 4017098:	3009883a 	mov	r4,r6
 401709c:	04018716 	blt	zero,r16,40176bc <___vfiprintf_internal_r+0xc10>
 40170a0:	a085883a 	add	r2,r20,r2
 40170a4:	45c00015 	stw	r23,0(r8)
 40170a8:	45000115 	stw	r20,4(r8)
 40170ac:	d8801c15 	stw	r2,112(sp)
 40170b0:	d9401b15 	stw	r5,108(sp)
 40170b4:	00c001c4 	movi	r3,7
 40170b8:	1941c20e 	bge	r3,r5,40177c4 <___vfiprintf_internal_r+0xd18>
 40170bc:	1002531e 	bne	r2,zero,4017a0c <___vfiprintf_internal_r+0xf60>
 40170c0:	d8001b15 	stw	zero,108(sp)
 40170c4:	8c40010c 	andi	r17,r17,4
 40170c8:	88023226 	beq	r17,zero,4017994 <___vfiprintf_internal_r+0xee8>
 40170cc:	d9002517 	ldw	r4,148(sp)
 40170d0:	24e3c83a 	sub	r17,r4,r19
 40170d4:	04432916 	blt	zero,r17,4017d7c <___vfiprintf_internal_r+0x12d0>
 40170d8:	d8802517 	ldw	r2,148(sp)
 40170dc:	14c0010e 	bge	r2,r19,40170e4 <___vfiprintf_internal_r+0x638>
 40170e0:	9805883a 	mov	r2,r19
 40170e4:	d8c02417 	ldw	r3,144(sp)
 40170e8:	1887883a 	add	r3,r3,r2
 40170ec:	d8c02415 	stw	r3,144(sp)
 40170f0:	d8001b15 	stw	zero,108(sp)
 40170f4:	d811883a 	mov	r8,sp
 40170f8:	003ea006 	br	4016b7c <__alt_mem_onchip_memory2_0+0xfc0158dc>
 40170fc:	8c400814 	ori	r17,r17,32
 4017100:	b0c00007 	ldb	r3,0(r22)
 4017104:	003ec606 	br	4016c20 <__alt_mem_onchip_memory2_0+0xfc015980>
 4017108:	b0c00007 	ldb	r3,0(r22)
 401710c:	00801b04 	movi	r2,108
 4017110:	18832026 	beq	r3,r2,4017d94 <___vfiprintf_internal_r+0x12e8>
 4017114:	8c400414 	ori	r17,r17,16
 4017118:	003ec106 	br	4016c20 <__alt_mem_onchip_memory2_0+0xfc015980>
 401711c:	9cc03fcc 	andi	r19,r19,255
 4017120:	b811883a 	mov	r8,r23
 4017124:	9803981e 	bne	r19,zero,4017f88 <___vfiprintf_internal_r+0x14dc>
 4017128:	8880080c 	andi	r2,r17,32
 401712c:	1002be26 	beq	r2,zero,4017c28 <___vfiprintf_internal_r+0x117c>
 4017130:	d9002217 	ldw	r4,136(sp)
 4017134:	d9402417 	ldw	r5,144(sp)
 4017138:	20800017 	ldw	r2,0(r4)
 401713c:	2807d7fa 	srai	r3,r5,31
 4017140:	21000104 	addi	r4,r4,4
 4017144:	d9002215 	stw	r4,136(sp)
 4017148:	11400015 	stw	r5,0(r2)
 401714c:	10c00115 	stw	r3,4(r2)
 4017150:	003e8a06 	br	4016b7c <__alt_mem_onchip_memory2_0+0xfc0158dc>
 4017154:	9cc03fcc 	andi	r19,r19,255
 4017158:	b811883a 	mov	r8,r23
 401715c:	9803871e 	bne	r19,zero,4017f7c <___vfiprintf_internal_r+0x14d0>
 4017160:	8880080c 	andi	r2,r17,32
 4017164:	10009a26 	beq	r2,zero,40173d0 <___vfiprintf_internal_r+0x924>
 4017168:	d9002217 	ldw	r4,136(sp)
 401716c:	d8001d85 	stb	zero,118(sp)
 4017170:	20800204 	addi	r2,r4,8
 4017174:	24c00017 	ldw	r19,0(r4)
 4017178:	25000117 	ldw	r20,4(r4)
 401717c:	8002a416 	blt	r16,zero,4017c10 <___vfiprintf_internal_r+0x1164>
 4017180:	013fdfc4 	movi	r4,-129
 4017184:	9d06b03a 	or	r3,r19,r20
 4017188:	d8802215 	stw	r2,136(sp)
 401718c:	8922703a 	and	r17,r17,r4
 4017190:	18009b26 	beq	r3,zero,4017400 <___vfiprintf_internal_r+0x954>
 4017194:	002b883a 	mov	r21,zero
 4017198:	ddc01a04 	addi	r23,sp,104
 401719c:	9806d0fa 	srli	r3,r19,3
 40171a0:	a008977a 	slli	r4,r20,29
 40171a4:	a028d0fa 	srli	r20,r20,3
 40171a8:	9cc001cc 	andi	r19,r19,7
 40171ac:	98800c04 	addi	r2,r19,48
 40171b0:	bdffffc4 	addi	r23,r23,-1
 40171b4:	20e6b03a 	or	r19,r4,r3
 40171b8:	b8800005 	stb	r2,0(r23)
 40171bc:	9d06b03a 	or	r3,r19,r20
 40171c0:	183ff61e 	bne	r3,zero,401719c <__alt_mem_onchip_memory2_0+0xfc015efc>
 40171c4:	88c0004c 	andi	r3,r17,1
 40171c8:	18021f1e 	bne	r3,zero,4017a48 <___vfiprintf_internal_r+0xf9c>
 40171cc:	d9401e17 	ldw	r5,120(sp)
 40171d0:	2de9c83a 	sub	r20,r5,r23
 40171d4:	003f3806 	br	4016eb8 <__alt_mem_onchip_memory2_0+0xfc015c18>
 40171d8:	9cc03fcc 	andi	r19,r19,255
 40171dc:	b811883a 	mov	r8,r23
 40171e0:	98034f1e 	bne	r19,zero,4017f20 <___vfiprintf_internal_r+0x1474>
 40171e4:	008100b4 	movhi	r2,1026
 40171e8:	109e9d04 	addi	r2,r2,31348
 40171ec:	d8802615 	stw	r2,152(sp)
 40171f0:	8880080c 	andi	r2,r17,32
 40171f4:	1000ac26 	beq	r2,zero,40174a8 <___vfiprintf_internal_r+0x9fc>
 40171f8:	d9002217 	ldw	r4,136(sp)
 40171fc:	24c00017 	ldw	r19,0(r4)
 4017200:	25000117 	ldw	r20,4(r4)
 4017204:	21000204 	addi	r4,r4,8
 4017208:	d9002215 	stw	r4,136(sp)
 401720c:	8880004c 	andi	r2,r17,1
 4017210:	1001e726 	beq	r2,zero,40179b0 <___vfiprintf_internal_r+0xf04>
 4017214:	9d04b03a 	or	r2,r19,r20
 4017218:	10025c1e 	bne	r2,zero,4017b8c <___vfiprintf_internal_r+0x10e0>
 401721c:	d8001d85 	stb	zero,118(sp)
 4017220:	80024416 	blt	r16,zero,4017b34 <___vfiprintf_internal_r+0x1088>
 4017224:	00bfdfc4 	movi	r2,-129
 4017228:	88a2703a 	and	r17,r17,r2
 401722c:	003f1d06 	br	4016ea4 <__alt_mem_onchip_memory2_0+0xfc015c04>
 4017230:	d8c02217 	ldw	r3,136(sp)
 4017234:	04c00044 	movi	r19,1
 4017238:	b811883a 	mov	r8,r23
 401723c:	18800017 	ldw	r2,0(r3)
 4017240:	18c00104 	addi	r3,r3,4
 4017244:	d8001d85 	stb	zero,118(sp)
 4017248:	d8801005 	stb	r2,64(sp)
 401724c:	d8c02215 	stw	r3,136(sp)
 4017250:	9829883a 	mov	r20,r19
 4017254:	ddc01004 	addi	r23,sp,64
 4017258:	0021883a 	mov	r16,zero
 401725c:	003f1e06 	br	4016ed8 <__alt_mem_onchip_memory2_0+0xfc015c38>
 4017260:	9cc03fcc 	andi	r19,r19,255
 4017264:	b811883a 	mov	r8,r23
 4017268:	9803331e 	bne	r19,zero,4017f38 <___vfiprintf_internal_r+0x148c>
 401726c:	8880080c 	andi	r2,r17,32
 4017270:	10004826 	beq	r2,zero,4017394 <___vfiprintf_internal_r+0x8e8>
 4017274:	d9002217 	ldw	r4,136(sp)
 4017278:	20800117 	ldw	r2,4(r4)
 401727c:	24c00017 	ldw	r19,0(r4)
 4017280:	21000204 	addi	r4,r4,8
 4017284:	d9002215 	stw	r4,136(sp)
 4017288:	1029883a 	mov	r20,r2
 401728c:	10024c16 	blt	r2,zero,4017bc0 <___vfiprintf_internal_r+0x1114>
 4017290:	dd401d83 	ldbu	r21,118(sp)
 4017294:	80007116 	blt	r16,zero,401745c <___vfiprintf_internal_r+0x9b0>
 4017298:	00ffdfc4 	movi	r3,-129
 401729c:	9d04b03a 	or	r2,r19,r20
 40172a0:	88e2703a 	and	r17,r17,r3
 40172a4:	1000d126 	beq	r2,zero,40175ec <___vfiprintf_internal_r+0xb40>
 40172a8:	a0023526 	beq	r20,zero,4017b80 <___vfiprintf_internal_r+0x10d4>
 40172ac:	ddc01a04 	addi	r23,sp,104
 40172b0:	4039883a 	mov	fp,r8
 40172b4:	9809883a 	mov	r4,r19
 40172b8:	a00b883a 	mov	r5,r20
 40172bc:	01800284 	movi	r6,10
 40172c0:	000f883a 	mov	r7,zero
 40172c4:	4018fd80 	call	4018fd8 <__umoddi3>
 40172c8:	10800c04 	addi	r2,r2,48
 40172cc:	bdffffc4 	addi	r23,r23,-1
 40172d0:	9809883a 	mov	r4,r19
 40172d4:	a00b883a 	mov	r5,r20
 40172d8:	b8800005 	stb	r2,0(r23)
 40172dc:	01800284 	movi	r6,10
 40172e0:	000f883a 	mov	r7,zero
 40172e4:	40189dc0 	call	40189dc <__udivdi3>
 40172e8:	1027883a 	mov	r19,r2
 40172ec:	10c4b03a 	or	r2,r2,r3
 40172f0:	1829883a 	mov	r20,r3
 40172f4:	103fef1e 	bne	r2,zero,40172b4 <__alt_mem_onchip_memory2_0+0xfc016014>
 40172f8:	d9001e17 	ldw	r4,120(sp)
 40172fc:	e011883a 	mov	r8,fp
 4017300:	25e9c83a 	sub	r20,r4,r23
 4017304:	003eec06 	br	4016eb8 <__alt_mem_onchip_memory2_0+0xfc015c18>
 4017308:	d8802307 	ldb	r2,140(sp)
 401730c:	1002361e 	bne	r2,zero,4017be8 <___vfiprintf_internal_r+0x113c>
 4017310:	00c00804 	movi	r3,32
 4017314:	d8c02305 	stb	r3,140(sp)
 4017318:	04c00044 	movi	r19,1
 401731c:	b0c00007 	ldb	r3,0(r22)
 4017320:	003e3f06 	br	4016c20 <__alt_mem_onchip_memory2_0+0xfc015980>
 4017324:	8c400054 	ori	r17,r17,1
 4017328:	b0c00007 	ldb	r3,0(r22)
 401732c:	003e3c06 	br	4016c20 <__alt_mem_onchip_memory2_0+0xfc015980>
 4017330:	8c402014 	ori	r17,r17,128
 4017334:	b0c00007 	ldb	r3,0(r22)
 4017338:	003e3906 	br	4016c20 <__alt_mem_onchip_memory2_0+0xfc015980>
 401733c:	dc002715 	stw	r16,156(sp)
 4017340:	d8002515 	stw	zero,148(sp)
 4017344:	1f3ff404 	addi	fp,r3,-48
 4017348:	0009883a 	mov	r4,zero
 401734c:	b021883a 	mov	r16,r22
 4017350:	01400284 	movi	r5,10
 4017354:	400dae00 	call	400dae0 <__mulsi3>
 4017358:	80c00007 	ldb	r3,0(r16)
 401735c:	e089883a 	add	r4,fp,r2
 4017360:	b5800044 	addi	r22,r22,1
 4017364:	1f3ff404 	addi	fp,r3,-48
 4017368:	b021883a 	mov	r16,r22
 401736c:	af3ff82e 	bgeu	r21,fp,4017350 <__alt_mem_onchip_memory2_0+0xfc0160b0>
 4017370:	d9002515 	stw	r4,148(sp)
 4017374:	dc002717 	ldw	r16,156(sp)
 4017378:	003e2a06 	br	4016c24 <__alt_mem_onchip_memory2_0+0xfc015984>
 401737c:	9cc03fcc 	andi	r19,r19,255
 4017380:	b811883a 	mov	r8,r23
 4017384:	9802e91e 	bne	r19,zero,4017f2c <___vfiprintf_internal_r+0x1480>
 4017388:	8c400414 	ori	r17,r17,16
 401738c:	8880080c 	andi	r2,r17,32
 4017390:	103fb81e 	bne	r2,zero,4017274 <__alt_mem_onchip_memory2_0+0xfc015fd4>
 4017394:	8880040c 	andi	r2,r17,16
 4017398:	10022e26 	beq	r2,zero,4017c54 <___vfiprintf_internal_r+0x11a8>
 401739c:	d9402217 	ldw	r5,136(sp)
 40173a0:	2cc00017 	ldw	r19,0(r5)
 40173a4:	29400104 	addi	r5,r5,4
 40173a8:	d9402215 	stw	r5,136(sp)
 40173ac:	9829d7fa 	srai	r20,r19,31
 40173b0:	a005883a 	mov	r2,r20
 40173b4:	003fb506 	br	401728c <__alt_mem_onchip_memory2_0+0xfc015fec>
 40173b8:	9cc03fcc 	andi	r19,r19,255
 40173bc:	b811883a 	mov	r8,r23
 40173c0:	9802fa1e 	bne	r19,zero,4017fac <___vfiprintf_internal_r+0x1500>
 40173c4:	8c400414 	ori	r17,r17,16
 40173c8:	8880080c 	andi	r2,r17,32
 40173cc:	103f661e 	bne	r2,zero,4017168 <__alt_mem_onchip_memory2_0+0xfc015ec8>
 40173d0:	8880040c 	andi	r2,r17,16
 40173d4:	10020626 	beq	r2,zero,4017bf0 <___vfiprintf_internal_r+0x1144>
 40173d8:	d9402217 	ldw	r5,136(sp)
 40173dc:	d8001d85 	stb	zero,118(sp)
 40173e0:	0029883a 	mov	r20,zero
 40173e4:	28800104 	addi	r2,r5,4
 40173e8:	2cc00017 	ldw	r19,0(r5)
 40173ec:	80020816 	blt	r16,zero,4017c10 <___vfiprintf_internal_r+0x1164>
 40173f0:	00ffdfc4 	movi	r3,-129
 40173f4:	d8802215 	stw	r2,136(sp)
 40173f8:	88e2703a 	and	r17,r17,r3
 40173fc:	983f651e 	bne	r19,zero,4017194 <__alt_mem_onchip_memory2_0+0xfc015ef4>
 4017400:	002b883a 	mov	r21,zero
 4017404:	8002cf26 	beq	r16,zero,4017f44 <___vfiprintf_internal_r+0x1498>
 4017408:	0027883a 	mov	r19,zero
 401740c:	0029883a 	mov	r20,zero
 4017410:	003f6106 	br	4017198 <__alt_mem_onchip_memory2_0+0xfc015ef8>
 4017414:	9cc03fcc 	andi	r19,r19,255
 4017418:	b811883a 	mov	r8,r23
 401741c:	9802e01e 	bne	r19,zero,4017fa0 <___vfiprintf_internal_r+0x14f4>
 4017420:	8c400414 	ori	r17,r17,16
 4017424:	8880080c 	andi	r2,r17,32
 4017428:	1000641e 	bne	r2,zero,40175bc <___vfiprintf_internal_r+0xb10>
 401742c:	8880040c 	andi	r2,r17,16
 4017430:	1001c81e 	bne	r2,zero,4017b54 <___vfiprintf_internal_r+0x10a8>
 4017434:	8880100c 	andi	r2,r17,64
 4017438:	d8001d85 	stb	zero,118(sp)
 401743c:	1002281e 	bne	r2,zero,4017ce0 <___vfiprintf_internal_r+0x1234>
 4017440:	d9002217 	ldw	r4,136(sp)
 4017444:	0029883a 	mov	r20,zero
 4017448:	20800104 	addi	r2,r4,4
 401744c:	24c00017 	ldw	r19,0(r4)
 4017450:	8001c60e 	bge	r16,zero,4017b6c <___vfiprintf_internal_r+0x10c0>
 4017454:	d8802215 	stw	r2,136(sp)
 4017458:	002b883a 	mov	r21,zero
 401745c:	9d04b03a 	or	r2,r19,r20
 4017460:	103f911e 	bne	r2,zero,40172a8 <__alt_mem_onchip_memory2_0+0xfc016008>
 4017464:	00800044 	movi	r2,1
 4017468:	10803fcc 	andi	r2,r2,255
 401746c:	00c00044 	movi	r3,1
 4017470:	10c05f26 	beq	r2,r3,40175f0 <___vfiprintf_internal_r+0xb44>
 4017474:	00c00084 	movi	r3,2
 4017478:	10ffe31e 	bne	r2,r3,4017408 <__alt_mem_onchip_memory2_0+0xfc016168>
 401747c:	0027883a 	mov	r19,zero
 4017480:	0029883a 	mov	r20,zero
 4017484:	00015106 	br	40179cc <___vfiprintf_internal_r+0xf20>
 4017488:	9cc03fcc 	andi	r19,r19,255
 401748c:	b811883a 	mov	r8,r23
 4017490:	9802c01e 	bne	r19,zero,4017f94 <___vfiprintf_internal_r+0x14e8>
 4017494:	014100b4 	movhi	r5,1026
 4017498:	295e9804 	addi	r5,r5,31328
 401749c:	d9402615 	stw	r5,152(sp)
 40174a0:	8880080c 	andi	r2,r17,32
 40174a4:	103f541e 	bne	r2,zero,40171f8 <__alt_mem_onchip_memory2_0+0xfc015f58>
 40174a8:	8880040c 	andi	r2,r17,16
 40174ac:	1001f226 	beq	r2,zero,4017c78 <___vfiprintf_internal_r+0x11cc>
 40174b0:	d9402217 	ldw	r5,136(sp)
 40174b4:	0029883a 	mov	r20,zero
 40174b8:	2cc00017 	ldw	r19,0(r5)
 40174bc:	29400104 	addi	r5,r5,4
 40174c0:	d9402215 	stw	r5,136(sp)
 40174c4:	003f5106 	br	401720c <__alt_mem_onchip_memory2_0+0xfc015f6c>
 40174c8:	d8c02217 	ldw	r3,136(sp)
 40174cc:	b811883a 	mov	r8,r23
 40174d0:	d8001d85 	stb	zero,118(sp)
 40174d4:	1dc00017 	ldw	r23,0(r3)
 40174d8:	1f000104 	addi	fp,r3,4
 40174dc:	b8025926 	beq	r23,zero,4017e44 <___vfiprintf_internal_r+0x1398>
 40174e0:	80023316 	blt	r16,zero,4017db0 <___vfiprintf_internal_r+0x1304>
 40174e4:	800d883a 	mov	r6,r16
 40174e8:	000b883a 	mov	r5,zero
 40174ec:	b809883a 	mov	r4,r23
 40174f0:	da002a15 	stw	r8,168(sp)
 40174f4:	4014e240 	call	4014e24 <memchr>
 40174f8:	da002a17 	ldw	r8,168(sp)
 40174fc:	10026826 	beq	r2,zero,4017ea0 <___vfiprintf_internal_r+0x13f4>
 4017500:	15e9c83a 	sub	r20,r2,r23
 4017504:	dd401d83 	ldbu	r21,118(sp)
 4017508:	df002215 	stw	fp,136(sp)
 401750c:	0021883a 	mov	r16,zero
 4017510:	003e6906 	br	4016eb8 <__alt_mem_onchip_memory2_0+0xfc015c18>
 4017514:	9cc03fcc 	andi	r19,r19,255
 4017518:	b811883a 	mov	r8,r23
 401751c:	983fc126 	beq	r19,zero,4017424 <__alt_mem_onchip_memory2_0+0xfc016184>
 4017520:	d8c02303 	ldbu	r3,140(sp)
 4017524:	d8c01d85 	stb	r3,118(sp)
 4017528:	003fbe06 	br	4017424 <__alt_mem_onchip_memory2_0+0xfc016184>
 401752c:	d9002217 	ldw	r4,136(sp)
 4017530:	d9402217 	ldw	r5,136(sp)
 4017534:	21000017 	ldw	r4,0(r4)
 4017538:	28800104 	addi	r2,r5,4
 401753c:	d9002515 	stw	r4,148(sp)
 4017540:	203e3d16 	blt	r4,zero,4016e38 <__alt_mem_onchip_memory2_0+0xfc015b98>
 4017544:	d8802215 	stw	r2,136(sp)
 4017548:	b0c00007 	ldb	r3,0(r22)
 401754c:	003db406 	br	4016c20 <__alt_mem_onchip_memory2_0+0xfc015980>
 4017550:	00c00ac4 	movi	r3,43
 4017554:	d8c02305 	stb	r3,140(sp)
 4017558:	04c00044 	movi	r19,1
 401755c:	b0c00007 	ldb	r3,0(r22)
 4017560:	003daf06 	br	4016c20 <__alt_mem_onchip_memory2_0+0xfc015980>
 4017564:	b0c00007 	ldb	r3,0(r22)
 4017568:	01000a84 	movi	r4,42
 401756c:	b4000044 	addi	r16,r22,1
 4017570:	19025e26 	beq	r3,r4,4017eec <___vfiprintf_internal_r+0x1440>
 4017574:	1f3ff404 	addi	fp,r3,-48
 4017578:	0009883a 	mov	r4,zero
 401757c:	af025236 	bltu	r21,fp,4017ec8 <___vfiprintf_internal_r+0x141c>
 4017580:	01400284 	movi	r5,10
 4017584:	400dae00 	call	400dae0 <__mulsi3>
 4017588:	80c00007 	ldb	r3,0(r16)
 401758c:	1709883a 	add	r4,r2,fp
 4017590:	85800044 	addi	r22,r16,1
 4017594:	1f3ff404 	addi	fp,r3,-48
 4017598:	b021883a 	mov	r16,r22
 401759c:	af3ff82e 	bgeu	r21,fp,4017580 <__alt_mem_onchip_memory2_0+0xfc0162e0>
 40175a0:	2021883a 	mov	r16,r4
 40175a4:	203d9f0e 	bge	r4,zero,4016c24 <__alt_mem_onchip_memory2_0+0xfc015984>
 40175a8:	043fffc4 	movi	r16,-1
 40175ac:	003d9d06 	br	4016c24 <__alt_mem_onchip_memory2_0+0xfc015984>
 40175b0:	8c401014 	ori	r17,r17,64
 40175b4:	b0c00007 	ldb	r3,0(r22)
 40175b8:	003d9906 	br	4016c20 <__alt_mem_onchip_memory2_0+0xfc015980>
 40175bc:	d9002217 	ldw	r4,136(sp)
 40175c0:	d8001d85 	stb	zero,118(sp)
 40175c4:	20c00204 	addi	r3,r4,8
 40175c8:	24c00017 	ldw	r19,0(r4)
 40175cc:	25000117 	ldw	r20,4(r4)
 40175d0:	8001e716 	blt	r16,zero,4017d70 <___vfiprintf_internal_r+0x12c4>
 40175d4:	013fdfc4 	movi	r4,-129
 40175d8:	9d04b03a 	or	r2,r19,r20
 40175dc:	d8c02215 	stw	r3,136(sp)
 40175e0:	8922703a 	and	r17,r17,r4
 40175e4:	002b883a 	mov	r21,zero
 40175e8:	103f2f1e 	bne	r2,zero,40172a8 <__alt_mem_onchip_memory2_0+0xfc016008>
 40175ec:	803e2f26 	beq	r16,zero,4016eac <__alt_mem_onchip_memory2_0+0xfc015c0c>
 40175f0:	0027883a 	mov	r19,zero
 40175f4:	9cc00c04 	addi	r19,r19,48
 40175f8:	dcc019c5 	stb	r19,103(sp)
 40175fc:	dd002817 	ldw	r20,160(sp)
 4017600:	ddc019c4 	addi	r23,sp,103
 4017604:	003e2c06 	br	4016eb8 <__alt_mem_onchip_memory2_0+0xfc015c18>
 4017608:	9cc03fcc 	andi	r19,r19,255
 401760c:	b811883a 	mov	r8,r23
 4017610:	9802571e 	bne	r19,zero,4017f70 <___vfiprintf_internal_r+0x14c4>
 4017614:	18005726 	beq	r3,zero,4017774 <___vfiprintf_internal_r+0xcc8>
 4017618:	04c00044 	movi	r19,1
 401761c:	d8c01005 	stb	r3,64(sp)
 4017620:	d8001d85 	stb	zero,118(sp)
 4017624:	9829883a 	mov	r20,r19
 4017628:	ddc01004 	addi	r23,sp,64
 401762c:	003f0a06 	br	4017258 <__alt_mem_onchip_memory2_0+0xfc015fb8>
 4017630:	d9402017 	ldw	r5,128(sp)
 4017634:	d9002117 	ldw	r4,132(sp)
 4017638:	d9801a04 	addi	r6,sp,104
 401763c:	da802a15 	stw	r10,168(sp)
 4017640:	40169980 	call	4016998 <__sprint_r.part.0>
 4017644:	da802a17 	ldw	r10,168(sp)
 4017648:	1000501e 	bne	r2,zero,401778c <___vfiprintf_internal_r+0xce0>
 401764c:	d9801b17 	ldw	r6,108(sp)
 4017650:	d8801c17 	ldw	r2,112(sp)
 4017654:	d811883a 	mov	r8,sp
 4017658:	31000044 	addi	r4,r6,1
 401765c:	003e3606 	br	4016f38 <__alt_mem_onchip_memory2_0+0xfc015c98>
 4017660:	d9001b17 	ldw	r4,108(sp)
 4017664:	d8801c17 	ldw	r2,112(sp)
 4017668:	21400044 	addi	r5,r4,1
 401766c:	d9801d87 	ldb	r6,118(sp)
 4017670:	303e5226 	beq	r6,zero,4016fbc <__alt_mem_onchip_memory2_0+0xfc015d1c>
 4017674:	01800044 	movi	r6,1
 4017678:	d9001d84 	addi	r4,sp,118
 401767c:	1185883a 	add	r2,r2,r6
 4017680:	41000015 	stw	r4,0(r8)
 4017684:	41800115 	stw	r6,4(r8)
 4017688:	d8801c15 	stw	r2,112(sp)
 401768c:	d9401b15 	stw	r5,108(sp)
 4017690:	010001c4 	movi	r4,7
 4017694:	2140b00e 	bge	r4,r5,4017958 <___vfiprintf_internal_r+0xeac>
 4017698:	1000f61e 	bne	r2,zero,4017a74 <___vfiprintf_internal_r+0xfc8>
 401769c:	3800b31e 	bne	r7,zero,401796c <___vfiprintf_internal_r+0xec0>
 40176a0:	0009883a 	mov	r4,zero
 40176a4:	300b883a 	mov	r5,r6
 40176a8:	d811883a 	mov	r8,sp
 40176ac:	01802004 	movi	r6,128
 40176b0:	19be5226 	beq	r3,r6,4016ffc <__alt_mem_onchip_memory2_0+0xfc015d5c>
 40176b4:	8521c83a 	sub	r16,r16,r20
 40176b8:	043e790e 	bge	zero,r16,40170a0 <__alt_mem_onchip_memory2_0+0xfc015e00>
 40176bc:	05400404 	movi	r21,16
 40176c0:	ac01b00e 	bge	r21,r16,4017d84 <___vfiprintf_internal_r+0x12d8>
 40176c4:	014100b4 	movhi	r5,1026
 40176c8:	295efd04 	addi	r5,r5,31732
 40176cc:	d9402315 	stw	r5,140(sp)
 40176d0:	070001c4 	movi	fp,7
 40176d4:	00000506 	br	40176ec <___vfiprintf_internal_r+0xc40>
 40176d8:	21400084 	addi	r5,r4,2
 40176dc:	42000204 	addi	r8,r8,8
 40176e0:	1809883a 	mov	r4,r3
 40176e4:	843ffc04 	addi	r16,r16,-16
 40176e8:	ac000d0e 	bge	r21,r16,4017720 <___vfiprintf_internal_r+0xc74>
 40176ec:	10800404 	addi	r2,r2,16
 40176f0:	20c00044 	addi	r3,r4,1
 40176f4:	44800015 	stw	r18,0(r8)
 40176f8:	45400115 	stw	r21,4(r8)
 40176fc:	d8801c15 	stw	r2,112(sp)
 4017700:	d8c01b15 	stw	r3,108(sp)
 4017704:	e0fff40e 	bge	fp,r3,40176d8 <__alt_mem_onchip_memory2_0+0xfc016438>
 4017708:	1000101e 	bne	r2,zero,401774c <___vfiprintf_internal_r+0xca0>
 401770c:	843ffc04 	addi	r16,r16,-16
 4017710:	01400044 	movi	r5,1
 4017714:	0009883a 	mov	r4,zero
 4017718:	d811883a 	mov	r8,sp
 401771c:	ac3ff316 	blt	r21,r16,40176ec <__alt_mem_onchip_memory2_0+0xfc01644c>
 4017720:	d8c02317 	ldw	r3,140(sp)
 4017724:	1405883a 	add	r2,r2,r16
 4017728:	44000115 	stw	r16,4(r8)
 401772c:	40c00015 	stw	r3,0(r8)
 4017730:	d8801c15 	stw	r2,112(sp)
 4017734:	d9401b15 	stw	r5,108(sp)
 4017738:	00c001c4 	movi	r3,7
 401773c:	19401916 	blt	r3,r5,40177a4 <___vfiprintf_internal_r+0xcf8>
 4017740:	42000204 	addi	r8,r8,8
 4017744:	29400044 	addi	r5,r5,1
 4017748:	003e5506 	br	40170a0 <__alt_mem_onchip_memory2_0+0xfc015e00>
 401774c:	d9402017 	ldw	r5,128(sp)
 4017750:	d9002117 	ldw	r4,132(sp)
 4017754:	d9801a04 	addi	r6,sp,104
 4017758:	40169980 	call	4016998 <__sprint_r.part.0>
 401775c:	10000b1e 	bne	r2,zero,401778c <___vfiprintf_internal_r+0xce0>
 4017760:	d9001b17 	ldw	r4,108(sp)
 4017764:	d8801c17 	ldw	r2,112(sp)
 4017768:	d811883a 	mov	r8,sp
 401776c:	21400044 	addi	r5,r4,1
 4017770:	003fdc06 	br	40176e4 <__alt_mem_onchip_memory2_0+0xfc016444>
 4017774:	d8801c17 	ldw	r2,112(sp)
 4017778:	10000426 	beq	r2,zero,401778c <___vfiprintf_internal_r+0xce0>
 401777c:	d9402017 	ldw	r5,128(sp)
 4017780:	d9002117 	ldw	r4,132(sp)
 4017784:	d9801a04 	addi	r6,sp,104
 4017788:	40169980 	call	4016998 <__sprint_r.part.0>
 401778c:	d9402017 	ldw	r5,128(sp)
 4017790:	2880030b 	ldhu	r2,12(r5)
 4017794:	1080100c 	andi	r2,r2,64
 4017798:	10014d1e 	bne	r2,zero,4017cd0 <___vfiprintf_internal_r+0x1224>
 401779c:	d8802417 	ldw	r2,144(sp)
 40177a0:	003d9706 	br	4016e00 <__alt_mem_onchip_memory2_0+0xfc015b60>
 40177a4:	1000d21e 	bne	r2,zero,4017af0 <___vfiprintf_internal_r+0x1044>
 40177a8:	00c00044 	movi	r3,1
 40177ac:	a005883a 	mov	r2,r20
 40177b0:	ddc00015 	stw	r23,0(sp)
 40177b4:	dd000115 	stw	r20,4(sp)
 40177b8:	dd001c15 	stw	r20,112(sp)
 40177bc:	d8c01b15 	stw	r3,108(sp)
 40177c0:	d811883a 	mov	r8,sp
 40177c4:	42000204 	addi	r8,r8,8
 40177c8:	8c40010c 	andi	r17,r17,4
 40177cc:	88004026 	beq	r17,zero,40178d0 <___vfiprintf_internal_r+0xe24>
 40177d0:	d9002517 	ldw	r4,148(sp)
 40177d4:	24e3c83a 	sub	r17,r4,r19
 40177d8:	04403d0e 	bge	zero,r17,40178d0 <___vfiprintf_internal_r+0xe24>
 40177dc:	04000404 	movi	r16,16
 40177e0:	8441a90e 	bge	r16,r17,4017e88 <___vfiprintf_internal_r+0x13dc>
 40177e4:	00c100b4 	movhi	r3,1026
 40177e8:	18df0104 	addi	r3,r3,31748
 40177ec:	d9001b17 	ldw	r4,108(sp)
 40177f0:	d8c02315 	stw	r3,140(sp)
 40177f4:	050001c4 	movi	r20,7
 40177f8:	dd402117 	ldw	r21,132(sp)
 40177fc:	ddc02017 	ldw	r23,128(sp)
 4017800:	00000506 	br	4017818 <___vfiprintf_internal_r+0xd6c>
 4017804:	21400084 	addi	r5,r4,2
 4017808:	42000204 	addi	r8,r8,8
 401780c:	1809883a 	mov	r4,r3
 4017810:	8c7ffc04 	addi	r17,r17,-16
 4017814:	84400f0e 	bge	r16,r17,4017854 <___vfiprintf_internal_r+0xda8>
 4017818:	014100b4 	movhi	r5,1026
 401781c:	10800404 	addi	r2,r2,16
 4017820:	20c00044 	addi	r3,r4,1
 4017824:	295f0104 	addi	r5,r5,31748
 4017828:	41400015 	stw	r5,0(r8)
 401782c:	44000115 	stw	r16,4(r8)
 4017830:	d8801c15 	stw	r2,112(sp)
 4017834:	d8c01b15 	stw	r3,108(sp)
 4017838:	a0fff20e 	bge	r20,r3,4017804 <__alt_mem_onchip_memory2_0+0xfc016564>
 401783c:	1000141e 	bne	r2,zero,4017890 <___vfiprintf_internal_r+0xde4>
 4017840:	8c7ffc04 	addi	r17,r17,-16
 4017844:	01400044 	movi	r5,1
 4017848:	0009883a 	mov	r4,zero
 401784c:	d811883a 	mov	r8,sp
 4017850:	847ff116 	blt	r16,r17,4017818 <__alt_mem_onchip_memory2_0+0xfc016578>
 4017854:	d8c02317 	ldw	r3,140(sp)
 4017858:	1445883a 	add	r2,r2,r17
 401785c:	44400115 	stw	r17,4(r8)
 4017860:	40c00015 	stw	r3,0(r8)
 4017864:	d8801c15 	stw	r2,112(sp)
 4017868:	d9401b15 	stw	r5,108(sp)
 401786c:	00c001c4 	movi	r3,7
 4017870:	1940170e 	bge	r3,r5,40178d0 <___vfiprintf_internal_r+0xe24>
 4017874:	1000101e 	bne	r2,zero,40178b8 <___vfiprintf_internal_r+0xe0c>
 4017878:	d8802517 	ldw	r2,148(sp)
 401787c:	14c11616 	blt	r2,r19,4017cd8 <___vfiprintf_internal_r+0x122c>
 4017880:	d9002417 	ldw	r4,144(sp)
 4017884:	2089883a 	add	r4,r4,r2
 4017888:	d9002415 	stw	r4,144(sp)
 401788c:	003e1806 	br	40170f0 <__alt_mem_onchip_memory2_0+0xfc015e50>
 4017890:	d9801a04 	addi	r6,sp,104
 4017894:	b80b883a 	mov	r5,r23
 4017898:	a809883a 	mov	r4,r21
 401789c:	40169980 	call	4016998 <__sprint_r.part.0>
 40178a0:	103fba1e 	bne	r2,zero,401778c <__alt_mem_onchip_memory2_0+0xfc0164ec>
 40178a4:	d9001b17 	ldw	r4,108(sp)
 40178a8:	d8801c17 	ldw	r2,112(sp)
 40178ac:	d811883a 	mov	r8,sp
 40178b0:	21400044 	addi	r5,r4,1
 40178b4:	003fd606 	br	4017810 <__alt_mem_onchip_memory2_0+0xfc016570>
 40178b8:	d9402017 	ldw	r5,128(sp)
 40178bc:	d9002117 	ldw	r4,132(sp)
 40178c0:	d9801a04 	addi	r6,sp,104
 40178c4:	40169980 	call	4016998 <__sprint_r.part.0>
 40178c8:	103fb01e 	bne	r2,zero,401778c <__alt_mem_onchip_memory2_0+0xfc0164ec>
 40178cc:	d8801c17 	ldw	r2,112(sp)
 40178d0:	d8c02517 	ldw	r3,148(sp)
 40178d4:	1cc0010e 	bge	r3,r19,40178dc <___vfiprintf_internal_r+0xe30>
 40178d8:	9807883a 	mov	r3,r19
 40178dc:	d9002417 	ldw	r4,144(sp)
 40178e0:	20c9883a 	add	r4,r4,r3
 40178e4:	d9002415 	stw	r4,144(sp)
 40178e8:	103e0126 	beq	r2,zero,40170f0 <__alt_mem_onchip_memory2_0+0xfc015e50>
 40178ec:	d9402017 	ldw	r5,128(sp)
 40178f0:	d9002117 	ldw	r4,132(sp)
 40178f4:	d9801a04 	addi	r6,sp,104
 40178f8:	40169980 	call	4016998 <__sprint_r.part.0>
 40178fc:	103dfc26 	beq	r2,zero,40170f0 <__alt_mem_onchip_memory2_0+0xfc015e50>
 4017900:	003fa206 	br	401778c <__alt_mem_onchip_memory2_0+0xfc0164ec>
 4017904:	d9402017 	ldw	r5,128(sp)
 4017908:	d9002117 	ldw	r4,132(sp)
 401790c:	d9801a04 	addi	r6,sp,104
 4017910:	d9c02b15 	stw	r7,172(sp)
 4017914:	40169980 	call	4016998 <__sprint_r.part.0>
 4017918:	d9c02b17 	ldw	r7,172(sp)
 401791c:	103f9b1e 	bne	r2,zero,401778c <__alt_mem_onchip_memory2_0+0xfc0164ec>
 4017920:	d9001b17 	ldw	r4,108(sp)
 4017924:	d8801c17 	ldw	r2,112(sp)
 4017928:	d811883a 	mov	r8,sp
 401792c:	21800044 	addi	r6,r4,1
 4017930:	003dbf06 	br	4017030 <__alt_mem_onchip_memory2_0+0xfc015d90>
 4017934:	1000d81e 	bne	r2,zero,4017c98 <___vfiprintf_internal_r+0x11ec>
 4017938:	d9001d87 	ldb	r4,118(sp)
 401793c:	20000a26 	beq	r4,zero,4017968 <___vfiprintf_internal_r+0xebc>
 4017940:	00800044 	movi	r2,1
 4017944:	d9001d84 	addi	r4,sp,118
 4017948:	100b883a 	mov	r5,r2
 401794c:	d9000015 	stw	r4,0(sp)
 4017950:	d8800115 	stw	r2,4(sp)
 4017954:	d811883a 	mov	r8,sp
 4017958:	2809883a 	mov	r4,r5
 401795c:	42000204 	addi	r8,r8,8
 4017960:	29400044 	addi	r5,r5,1
 4017964:	003d9506 	br	4016fbc <__alt_mem_onchip_memory2_0+0xfc015d1c>
 4017968:	3800fd26 	beq	r7,zero,4017d60 <___vfiprintf_internal_r+0x12b4>
 401796c:	00800084 	movi	r2,2
 4017970:	d9001d04 	addi	r4,sp,116
 4017974:	d9000015 	stw	r4,0(sp)
 4017978:	d8800115 	stw	r2,4(sp)
 401797c:	01400044 	movi	r5,1
 4017980:	d811883a 	mov	r8,sp
 4017984:	2809883a 	mov	r4,r5
 4017988:	42000204 	addi	r8,r8,8
 401798c:	29400044 	addi	r5,r5,1
 4017990:	003f4606 	br	40176ac <__alt_mem_onchip_memory2_0+0xfc01640c>
 4017994:	d8802517 	ldw	r2,148(sp)
 4017998:	14c0010e 	bge	r2,r19,40179a0 <___vfiprintf_internal_r+0xef4>
 401799c:	9805883a 	mov	r2,r19
 40179a0:	d9402417 	ldw	r5,144(sp)
 40179a4:	288b883a 	add	r5,r5,r2
 40179a8:	d9402415 	stw	r5,144(sp)
 40179ac:	003dd006 	br	40170f0 <__alt_mem_onchip_memory2_0+0xfc015e50>
 40179b0:	d8001d85 	stb	zero,118(sp)
 40179b4:	80005d16 	blt	r16,zero,4017b2c <___vfiprintf_internal_r+0x1080>
 40179b8:	00ffdfc4 	movi	r3,-129
 40179bc:	9d04b03a 	or	r2,r19,r20
 40179c0:	88e2703a 	and	r17,r17,r3
 40179c4:	103d3726 	beq	r2,zero,4016ea4 <__alt_mem_onchip_memory2_0+0xfc015c04>
 40179c8:	002b883a 	mov	r21,zero
 40179cc:	d9002617 	ldw	r4,152(sp)
 40179d0:	ddc01a04 	addi	r23,sp,104
 40179d4:	988003cc 	andi	r2,r19,15
 40179d8:	a006973a 	slli	r3,r20,28
 40179dc:	2085883a 	add	r2,r4,r2
 40179e0:	9826d13a 	srli	r19,r19,4
 40179e4:	10800003 	ldbu	r2,0(r2)
 40179e8:	a028d13a 	srli	r20,r20,4
 40179ec:	bdffffc4 	addi	r23,r23,-1
 40179f0:	1ce6b03a 	or	r19,r3,r19
 40179f4:	b8800005 	stb	r2,0(r23)
 40179f8:	9d04b03a 	or	r2,r19,r20
 40179fc:	103ff51e 	bne	r2,zero,40179d4 <__alt_mem_onchip_memory2_0+0xfc016734>
 4017a00:	d8801e17 	ldw	r2,120(sp)
 4017a04:	15e9c83a 	sub	r20,r2,r23
 4017a08:	003d2b06 	br	4016eb8 <__alt_mem_onchip_memory2_0+0xfc015c18>
 4017a0c:	d9402017 	ldw	r5,128(sp)
 4017a10:	d9002117 	ldw	r4,132(sp)
 4017a14:	d9801a04 	addi	r6,sp,104
 4017a18:	40169980 	call	4016998 <__sprint_r.part.0>
 4017a1c:	103f5b1e 	bne	r2,zero,401778c <__alt_mem_onchip_memory2_0+0xfc0164ec>
 4017a20:	d8801c17 	ldw	r2,112(sp)
 4017a24:	d811883a 	mov	r8,sp
 4017a28:	003f6706 	br	40177c8 <__alt_mem_onchip_memory2_0+0xfc016528>
 4017a2c:	d9402017 	ldw	r5,128(sp)
 4017a30:	d9002117 	ldw	r4,132(sp)
 4017a34:	d9801a04 	addi	r6,sp,104
 4017a38:	40169980 	call	4016998 <__sprint_r.part.0>
 4017a3c:	103f531e 	bne	r2,zero,401778c <__alt_mem_onchip_memory2_0+0xfc0164ec>
 4017a40:	d811883a 	mov	r8,sp
 4017a44:	003cd906 	br	4016dac <__alt_mem_onchip_memory2_0+0xfc015b0c>
 4017a48:	10803fcc 	andi	r2,r2,255
 4017a4c:	1080201c 	xori	r2,r2,128
 4017a50:	10bfe004 	addi	r2,r2,-128
 4017a54:	00c00c04 	movi	r3,48
 4017a58:	10ffe926 	beq	r2,r3,4017a00 <__alt_mem_onchip_memory2_0+0xfc016760>
 4017a5c:	b8ffffc5 	stb	r3,-1(r23)
 4017a60:	d8c01e17 	ldw	r3,120(sp)
 4017a64:	b8bfffc4 	addi	r2,r23,-1
 4017a68:	102f883a 	mov	r23,r2
 4017a6c:	18a9c83a 	sub	r20,r3,r2
 4017a70:	003d1106 	br	4016eb8 <__alt_mem_onchip_memory2_0+0xfc015c18>
 4017a74:	d9402017 	ldw	r5,128(sp)
 4017a78:	d9002117 	ldw	r4,132(sp)
 4017a7c:	d9801a04 	addi	r6,sp,104
 4017a80:	d8c02a15 	stw	r3,168(sp)
 4017a84:	d9c02b15 	stw	r7,172(sp)
 4017a88:	40169980 	call	4016998 <__sprint_r.part.0>
 4017a8c:	d8c02a17 	ldw	r3,168(sp)
 4017a90:	d9c02b17 	ldw	r7,172(sp)
 4017a94:	103f3d1e 	bne	r2,zero,401778c <__alt_mem_onchip_memory2_0+0xfc0164ec>
 4017a98:	d9001b17 	ldw	r4,108(sp)
 4017a9c:	d8801c17 	ldw	r2,112(sp)
 4017aa0:	d811883a 	mov	r8,sp
 4017aa4:	21400044 	addi	r5,r4,1
 4017aa8:	003d4406 	br	4016fbc <__alt_mem_onchip_memory2_0+0xfc015d1c>
 4017aac:	d9402017 	ldw	r5,128(sp)
 4017ab0:	d9002117 	ldw	r4,132(sp)
 4017ab4:	d9801a04 	addi	r6,sp,104
 4017ab8:	d8c02a15 	stw	r3,168(sp)
 4017abc:	40169980 	call	4016998 <__sprint_r.part.0>
 4017ac0:	d8c02a17 	ldw	r3,168(sp)
 4017ac4:	103f311e 	bne	r2,zero,401778c <__alt_mem_onchip_memory2_0+0xfc0164ec>
 4017ac8:	d9001b17 	ldw	r4,108(sp)
 4017acc:	d8801c17 	ldw	r2,112(sp)
 4017ad0:	d811883a 	mov	r8,sp
 4017ad4:	21400044 	addi	r5,r4,1
 4017ad8:	003ef406 	br	40176ac <__alt_mem_onchip_memory2_0+0xfc01640c>
 4017adc:	1000bd1e 	bne	r2,zero,4017dd4 <___vfiprintf_internal_r+0x1328>
 4017ae0:	01400044 	movi	r5,1
 4017ae4:	0009883a 	mov	r4,zero
 4017ae8:	d811883a 	mov	r8,sp
 4017aec:	003ef106 	br	40176b4 <__alt_mem_onchip_memory2_0+0xfc016414>
 4017af0:	d9402017 	ldw	r5,128(sp)
 4017af4:	d9002117 	ldw	r4,132(sp)
 4017af8:	d9801a04 	addi	r6,sp,104
 4017afc:	40169980 	call	4016998 <__sprint_r.part.0>
 4017b00:	103f221e 	bne	r2,zero,401778c <__alt_mem_onchip_memory2_0+0xfc0164ec>
 4017b04:	d9401b17 	ldw	r5,108(sp)
 4017b08:	d8801c17 	ldw	r2,112(sp)
 4017b0c:	d811883a 	mov	r8,sp
 4017b10:	29400044 	addi	r5,r5,1
 4017b14:	003d6206 	br	40170a0 <__alt_mem_onchip_memory2_0+0xfc015e00>
 4017b18:	014100b4 	movhi	r5,1026
 4017b1c:	295e9d04 	addi	r5,r5,31348
 4017b20:	d9402615 	stw	r5,152(sp)
 4017b24:	d8c02215 	stw	r3,136(sp)
 4017b28:	1023883a 	mov	r17,r2
 4017b2c:	9d04b03a 	or	r2,r19,r20
 4017b30:	103fa51e 	bne	r2,zero,40179c8 <__alt_mem_onchip_memory2_0+0xfc016728>
 4017b34:	002b883a 	mov	r21,zero
 4017b38:	00800084 	movi	r2,2
 4017b3c:	003e4a06 	br	4017468 <__alt_mem_onchip_memory2_0+0xfc0161c8>
 4017b40:	014100b4 	movhi	r5,1026
 4017b44:	295e9d04 	addi	r5,r5,31348
 4017b48:	002b883a 	mov	r21,zero
 4017b4c:	d9402615 	stw	r5,152(sp)
 4017b50:	003f9e06 	br	40179cc <__alt_mem_onchip_memory2_0+0xfc01672c>
 4017b54:	d9402217 	ldw	r5,136(sp)
 4017b58:	d8001d85 	stb	zero,118(sp)
 4017b5c:	0029883a 	mov	r20,zero
 4017b60:	28800104 	addi	r2,r5,4
 4017b64:	2cc00017 	ldw	r19,0(r5)
 4017b68:	803e3a16 	blt	r16,zero,4017454 <__alt_mem_onchip_memory2_0+0xfc0161b4>
 4017b6c:	00ffdfc4 	movi	r3,-129
 4017b70:	d8802215 	stw	r2,136(sp)
 4017b74:	88e2703a 	and	r17,r17,r3
 4017b78:	002b883a 	mov	r21,zero
 4017b7c:	983e9b26 	beq	r19,zero,40175ec <__alt_mem_onchip_memory2_0+0xfc01634c>
 4017b80:	00800244 	movi	r2,9
 4017b84:	14fdc936 	bltu	r2,r19,40172ac <__alt_mem_onchip_memory2_0+0xfc01600c>
 4017b88:	003e9a06 	br	40175f4 <__alt_mem_onchip_memory2_0+0xfc016354>
 4017b8c:	00800c04 	movi	r2,48
 4017b90:	d8c01d45 	stb	r3,117(sp)
 4017b94:	d8801d05 	stb	r2,116(sp)
 4017b98:	d8001d85 	stb	zero,118(sp)
 4017b9c:	88c00094 	ori	r3,r17,2
 4017ba0:	80009c16 	blt	r16,zero,4017e14 <___vfiprintf_internal_r+0x1368>
 4017ba4:	00bfdfc4 	movi	r2,-129
 4017ba8:	88a2703a 	and	r17,r17,r2
 4017bac:	8c400094 	ori	r17,r17,2
 4017bb0:	002b883a 	mov	r21,zero
 4017bb4:	003f8506 	br	40179cc <__alt_mem_onchip_memory2_0+0xfc01672c>
 4017bb8:	b029883a 	mov	r20,r22
 4017bbc:	003c0b06 	br	4016bec <__alt_mem_onchip_memory2_0+0xfc01594c>
 4017bc0:	04e7c83a 	sub	r19,zero,r19
 4017bc4:	05400b44 	movi	r21,45
 4017bc8:	9804c03a 	cmpne	r2,r19,zero
 4017bcc:	0529c83a 	sub	r20,zero,r20
 4017bd0:	dd401d85 	stb	r21,118(sp)
 4017bd4:	a0a9c83a 	sub	r20,r20,r2
 4017bd8:	80009716 	blt	r16,zero,4017e38 <___vfiprintf_internal_r+0x138c>
 4017bdc:	00bfdfc4 	movi	r2,-129
 4017be0:	88a2703a 	and	r17,r17,r2
 4017be4:	003db006 	br	40172a8 <__alt_mem_onchip_memory2_0+0xfc016008>
 4017be8:	b0c00007 	ldb	r3,0(r22)
 4017bec:	003c0c06 	br	4016c20 <__alt_mem_onchip_memory2_0+0xfc015980>
 4017bf0:	8880100c 	andi	r2,r17,64
 4017bf4:	d8001d85 	stb	zero,118(sp)
 4017bf8:	1000461e 	bne	r2,zero,4017d14 <___vfiprintf_internal_r+0x1268>
 4017bfc:	d9002217 	ldw	r4,136(sp)
 4017c00:	0029883a 	mov	r20,zero
 4017c04:	20800104 	addi	r2,r4,4
 4017c08:	24c00017 	ldw	r19,0(r4)
 4017c0c:	803df80e 	bge	r16,zero,40173f0 <__alt_mem_onchip_memory2_0+0xfc016150>
 4017c10:	9d06b03a 	or	r3,r19,r20
 4017c14:	d8802215 	stw	r2,136(sp)
 4017c18:	183d5e1e 	bne	r3,zero,4017194 <__alt_mem_onchip_memory2_0+0xfc015ef4>
 4017c1c:	002b883a 	mov	r21,zero
 4017c20:	0005883a 	mov	r2,zero
 4017c24:	003e1006 	br	4017468 <__alt_mem_onchip_memory2_0+0xfc0161c8>
 4017c28:	8880040c 	andi	r2,r17,16
 4017c2c:	1000321e 	bne	r2,zero,4017cf8 <___vfiprintf_internal_r+0x124c>
 4017c30:	8c40100c 	andi	r17,r17,64
 4017c34:	88008d26 	beq	r17,zero,4017e6c <___vfiprintf_internal_r+0x13c0>
 4017c38:	d9402217 	ldw	r5,136(sp)
 4017c3c:	d8c02417 	ldw	r3,144(sp)
 4017c40:	28800017 	ldw	r2,0(r5)
 4017c44:	29400104 	addi	r5,r5,4
 4017c48:	d9402215 	stw	r5,136(sp)
 4017c4c:	10c0000d 	sth	r3,0(r2)
 4017c50:	003bca06 	br	4016b7c <__alt_mem_onchip_memory2_0+0xfc0158dc>
 4017c54:	8880100c 	andi	r2,r17,64
 4017c58:	10003a26 	beq	r2,zero,4017d44 <___vfiprintf_internal_r+0x1298>
 4017c5c:	d8802217 	ldw	r2,136(sp)
 4017c60:	14c0000f 	ldh	r19,0(r2)
 4017c64:	10800104 	addi	r2,r2,4
 4017c68:	d8802215 	stw	r2,136(sp)
 4017c6c:	9829d7fa 	srai	r20,r19,31
 4017c70:	a005883a 	mov	r2,r20
 4017c74:	003d8506 	br	401728c <__alt_mem_onchip_memory2_0+0xfc015fec>
 4017c78:	8880100c 	andi	r2,r17,64
 4017c7c:	10002b26 	beq	r2,zero,4017d2c <___vfiprintf_internal_r+0x1280>
 4017c80:	d8802217 	ldw	r2,136(sp)
 4017c84:	0029883a 	mov	r20,zero
 4017c88:	14c0000b 	ldhu	r19,0(r2)
 4017c8c:	10800104 	addi	r2,r2,4
 4017c90:	d8802215 	stw	r2,136(sp)
 4017c94:	003d5d06 	br	401720c <__alt_mem_onchip_memory2_0+0xfc015f6c>
 4017c98:	d9402017 	ldw	r5,128(sp)
 4017c9c:	d9002117 	ldw	r4,132(sp)
 4017ca0:	d9801a04 	addi	r6,sp,104
 4017ca4:	d8c02a15 	stw	r3,168(sp)
 4017ca8:	d9c02b15 	stw	r7,172(sp)
 4017cac:	40169980 	call	4016998 <__sprint_r.part.0>
 4017cb0:	d8c02a17 	ldw	r3,168(sp)
 4017cb4:	d9c02b17 	ldw	r7,172(sp)
 4017cb8:	103eb41e 	bne	r2,zero,401778c <__alt_mem_onchip_memory2_0+0xfc0164ec>
 4017cbc:	d9001b17 	ldw	r4,108(sp)
 4017cc0:	d8801c17 	ldw	r2,112(sp)
 4017cc4:	d811883a 	mov	r8,sp
 4017cc8:	21400044 	addi	r5,r4,1
 4017ccc:	003e6706 	br	401766c <__alt_mem_onchip_memory2_0+0xfc0163cc>
 4017cd0:	00bfffc4 	movi	r2,-1
 4017cd4:	003c4a06 	br	4016e00 <__alt_mem_onchip_memory2_0+0xfc015b60>
 4017cd8:	9805883a 	mov	r2,r19
 4017cdc:	003ee806 	br	4017880 <__alt_mem_onchip_memory2_0+0xfc0165e0>
 4017ce0:	d8c02217 	ldw	r3,136(sp)
 4017ce4:	0029883a 	mov	r20,zero
 4017ce8:	18800104 	addi	r2,r3,4
 4017cec:	1cc0000b 	ldhu	r19,0(r3)
 4017cf0:	803f9e0e 	bge	r16,zero,4017b6c <__alt_mem_onchip_memory2_0+0xfc0168cc>
 4017cf4:	003dd706 	br	4017454 <__alt_mem_onchip_memory2_0+0xfc0161b4>
 4017cf8:	d8c02217 	ldw	r3,136(sp)
 4017cfc:	d9002417 	ldw	r4,144(sp)
 4017d00:	18800017 	ldw	r2,0(r3)
 4017d04:	18c00104 	addi	r3,r3,4
 4017d08:	d8c02215 	stw	r3,136(sp)
 4017d0c:	11000015 	stw	r4,0(r2)
 4017d10:	003b9a06 	br	4016b7c <__alt_mem_onchip_memory2_0+0xfc0158dc>
 4017d14:	d8c02217 	ldw	r3,136(sp)
 4017d18:	0029883a 	mov	r20,zero
 4017d1c:	18800104 	addi	r2,r3,4
 4017d20:	1cc0000b 	ldhu	r19,0(r3)
 4017d24:	803db20e 	bge	r16,zero,40173f0 <__alt_mem_onchip_memory2_0+0xfc016150>
 4017d28:	003fb906 	br	4017c10 <__alt_mem_onchip_memory2_0+0xfc016970>
 4017d2c:	d9002217 	ldw	r4,136(sp)
 4017d30:	0029883a 	mov	r20,zero
 4017d34:	24c00017 	ldw	r19,0(r4)
 4017d38:	21000104 	addi	r4,r4,4
 4017d3c:	d9002215 	stw	r4,136(sp)
 4017d40:	003d3206 	br	401720c <__alt_mem_onchip_memory2_0+0xfc015f6c>
 4017d44:	d8c02217 	ldw	r3,136(sp)
 4017d48:	1cc00017 	ldw	r19,0(r3)
 4017d4c:	18c00104 	addi	r3,r3,4
 4017d50:	d8c02215 	stw	r3,136(sp)
 4017d54:	9829d7fa 	srai	r20,r19,31
 4017d58:	a005883a 	mov	r2,r20
 4017d5c:	003d4b06 	br	401728c <__alt_mem_onchip_memory2_0+0xfc015fec>
 4017d60:	0009883a 	mov	r4,zero
 4017d64:	01400044 	movi	r5,1
 4017d68:	d811883a 	mov	r8,sp
 4017d6c:	003e4f06 	br	40176ac <__alt_mem_onchip_memory2_0+0xfc01640c>
 4017d70:	d8c02215 	stw	r3,136(sp)
 4017d74:	002b883a 	mov	r21,zero
 4017d78:	003db806 	br	401745c <__alt_mem_onchip_memory2_0+0xfc0161bc>
 4017d7c:	d811883a 	mov	r8,sp
 4017d80:	003e9606 	br	40177dc <__alt_mem_onchip_memory2_0+0xfc01653c>
 4017d84:	010100b4 	movhi	r4,1026
 4017d88:	211efd04 	addi	r4,r4,31732
 4017d8c:	d9002315 	stw	r4,140(sp)
 4017d90:	003e6306 	br	4017720 <__alt_mem_onchip_memory2_0+0xfc016480>
 4017d94:	b0c00043 	ldbu	r3,1(r22)
 4017d98:	8c400814 	ori	r17,r17,32
 4017d9c:	b5800044 	addi	r22,r22,1
 4017da0:	18c03fcc 	andi	r3,r3,255
 4017da4:	18c0201c 	xori	r3,r3,128
 4017da8:	18ffe004 	addi	r3,r3,-128
 4017dac:	003b9c06 	br	4016c20 <__alt_mem_onchip_memory2_0+0xfc015980>
 4017db0:	b809883a 	mov	r4,r23
 4017db4:	da002a15 	stw	r8,168(sp)
 4017db8:	400fc580 	call	400fc58 <strlen>
 4017dbc:	1029883a 	mov	r20,r2
 4017dc0:	dd401d83 	ldbu	r21,118(sp)
 4017dc4:	df002215 	stw	fp,136(sp)
 4017dc8:	0021883a 	mov	r16,zero
 4017dcc:	da002a17 	ldw	r8,168(sp)
 4017dd0:	003c3906 	br	4016eb8 <__alt_mem_onchip_memory2_0+0xfc015c18>
 4017dd4:	d9402017 	ldw	r5,128(sp)
 4017dd8:	d9002117 	ldw	r4,132(sp)
 4017ddc:	d9801a04 	addi	r6,sp,104
 4017de0:	40169980 	call	4016998 <__sprint_r.part.0>
 4017de4:	103e691e 	bne	r2,zero,401778c <__alt_mem_onchip_memory2_0+0xfc0164ec>
 4017de8:	d9001b17 	ldw	r4,108(sp)
 4017dec:	d8801c17 	ldw	r2,112(sp)
 4017df0:	d811883a 	mov	r8,sp
 4017df4:	21400044 	addi	r5,r4,1
 4017df8:	003e2e06 	br	40176b4 <__alt_mem_onchip_memory2_0+0xfc016414>
 4017dfc:	010100b4 	movhi	r4,1026
 4017e00:	211f0104 	addi	r4,r4,31748
 4017e04:	d9002315 	stw	r4,140(sp)
 4017e08:	d9001b17 	ldw	r4,108(sp)
 4017e0c:	21000044 	addi	r4,r4,1
 4017e10:	003c5e06 	br	4016f8c <__alt_mem_onchip_memory2_0+0xfc015cec>
 4017e14:	002b883a 	mov	r21,zero
 4017e18:	00800084 	movi	r2,2
 4017e1c:	10803fcc 	andi	r2,r2,255
 4017e20:	01000044 	movi	r4,1
 4017e24:	11002b26 	beq	r2,r4,4017ed4 <___vfiprintf_internal_r+0x1428>
 4017e28:	01000084 	movi	r4,2
 4017e2c:	11002b1e 	bne	r2,r4,4017edc <___vfiprintf_internal_r+0x1430>
 4017e30:	1823883a 	mov	r17,r3
 4017e34:	003ee506 	br	40179cc <__alt_mem_onchip_memory2_0+0xfc01672c>
 4017e38:	8807883a 	mov	r3,r17
 4017e3c:	00800044 	movi	r2,1
 4017e40:	003ff606 	br	4017e1c <__alt_mem_onchip_memory2_0+0xfc016b7c>
 4017e44:	00800184 	movi	r2,6
 4017e48:	1400012e 	bgeu	r2,r16,4017e50 <___vfiprintf_internal_r+0x13a4>
 4017e4c:	1021883a 	mov	r16,r2
 4017e50:	8029883a 	mov	r20,r16
 4017e54:	8027883a 	mov	r19,r16
 4017e58:	80002216 	blt	r16,zero,4017ee4 <___vfiprintf_internal_r+0x1438>
 4017e5c:	05c100b4 	movhi	r23,1026
 4017e60:	df002215 	stw	fp,136(sp)
 4017e64:	bddea204 	addi	r23,r23,31368
 4017e68:	003cfb06 	br	4017258 <__alt_mem_onchip_memory2_0+0xfc015fb8>
 4017e6c:	d9002217 	ldw	r4,136(sp)
 4017e70:	d9402417 	ldw	r5,144(sp)
 4017e74:	20800017 	ldw	r2,0(r4)
 4017e78:	21000104 	addi	r4,r4,4
 4017e7c:	d9002215 	stw	r4,136(sp)
 4017e80:	11400015 	stw	r5,0(r2)
 4017e84:	003b3d06 	br	4016b7c <__alt_mem_onchip_memory2_0+0xfc0158dc>
 4017e88:	014100b4 	movhi	r5,1026
 4017e8c:	295f0104 	addi	r5,r5,31748
 4017e90:	d9402315 	stw	r5,140(sp)
 4017e94:	d9401b17 	ldw	r5,108(sp)
 4017e98:	29400044 	addi	r5,r5,1
 4017e9c:	003e6d06 	br	4017854 <__alt_mem_onchip_memory2_0+0xfc0165b4>
 4017ea0:	8029883a 	mov	r20,r16
 4017ea4:	dd401d83 	ldbu	r21,118(sp)
 4017ea8:	df002215 	stw	fp,136(sp)
 4017eac:	0021883a 	mov	r16,zero
 4017eb0:	003c0106 	br	4016eb8 <__alt_mem_onchip_memory2_0+0xfc015c18>
 4017eb4:	00c100b4 	movhi	r3,1026
 4017eb8:	18defd04 	addi	r3,r3,31732
 4017ebc:	d8c02315 	stw	r3,140(sp)
 4017ec0:	280d883a 	mov	r6,r5
 4017ec4:	003c6906 	br	401706c <__alt_mem_onchip_memory2_0+0xfc015dcc>
 4017ec8:	802d883a 	mov	r22,r16
 4017ecc:	0021883a 	mov	r16,zero
 4017ed0:	003b5406 	br	4016c24 <__alt_mem_onchip_memory2_0+0xfc015984>
 4017ed4:	1823883a 	mov	r17,r3
 4017ed8:	003cf306 	br	40172a8 <__alt_mem_onchip_memory2_0+0xfc016008>
 4017edc:	1823883a 	mov	r17,r3
 4017ee0:	003cad06 	br	4017198 <__alt_mem_onchip_memory2_0+0xfc015ef8>
 4017ee4:	0027883a 	mov	r19,zero
 4017ee8:	003fdc06 	br	4017e5c <__alt_mem_onchip_memory2_0+0xfc016bbc>
 4017eec:	d9402217 	ldw	r5,136(sp)
 4017ef0:	8005883a 	mov	r2,r16
 4017ef4:	b0c00043 	ldbu	r3,1(r22)
 4017ef8:	2c000017 	ldw	r16,0(r5)
 4017efc:	29000104 	addi	r4,r5,4
 4017f00:	d9002215 	stw	r4,136(sp)
 4017f04:	102d883a 	mov	r22,r2
 4017f08:	803fa50e 	bge	r16,zero,4017da0 <__alt_mem_onchip_memory2_0+0xfc016b00>
 4017f0c:	18c03fcc 	andi	r3,r3,255
 4017f10:	18c0201c 	xori	r3,r3,128
 4017f14:	043fffc4 	movi	r16,-1
 4017f18:	18ffe004 	addi	r3,r3,-128
 4017f1c:	003b4006 	br	4016c20 <__alt_mem_onchip_memory2_0+0xfc015980>
 4017f20:	d9402303 	ldbu	r5,140(sp)
 4017f24:	d9401d85 	stb	r5,118(sp)
 4017f28:	003cae06 	br	40171e4 <__alt_mem_onchip_memory2_0+0xfc015f44>
 4017f2c:	d8c02303 	ldbu	r3,140(sp)
 4017f30:	d8c01d85 	stb	r3,118(sp)
 4017f34:	003d1406 	br	4017388 <__alt_mem_onchip_memory2_0+0xfc0160e8>
 4017f38:	d8c02303 	ldbu	r3,140(sp)
 4017f3c:	d8c01d85 	stb	r3,118(sp)
 4017f40:	003cca06 	br	401726c <__alt_mem_onchip_memory2_0+0xfc015fcc>
 4017f44:	8880004c 	andi	r2,r17,1
 4017f48:	002b883a 	mov	r21,zero
 4017f4c:	10000526 	beq	r2,zero,4017f64 <___vfiprintf_internal_r+0x14b8>
 4017f50:	00800c04 	movi	r2,48
 4017f54:	d88019c5 	stb	r2,103(sp)
 4017f58:	dd002817 	ldw	r20,160(sp)
 4017f5c:	ddc019c4 	addi	r23,sp,103
 4017f60:	003bd506 	br	4016eb8 <__alt_mem_onchip_memory2_0+0xfc015c18>
 4017f64:	0029883a 	mov	r20,zero
 4017f68:	ddc01a04 	addi	r23,sp,104
 4017f6c:	003bd206 	br	4016eb8 <__alt_mem_onchip_memory2_0+0xfc015c18>
 4017f70:	d9002303 	ldbu	r4,140(sp)
 4017f74:	d9001d85 	stb	r4,118(sp)
 4017f78:	003da606 	br	4017614 <__alt_mem_onchip_memory2_0+0xfc016374>
 4017f7c:	d8c02303 	ldbu	r3,140(sp)
 4017f80:	d8c01d85 	stb	r3,118(sp)
 4017f84:	003c7606 	br	4017160 <__alt_mem_onchip_memory2_0+0xfc015ec0>
 4017f88:	d8c02303 	ldbu	r3,140(sp)
 4017f8c:	d8c01d85 	stb	r3,118(sp)
 4017f90:	003c6506 	br	4017128 <__alt_mem_onchip_memory2_0+0xfc015e88>
 4017f94:	d9002303 	ldbu	r4,140(sp)
 4017f98:	d9001d85 	stb	r4,118(sp)
 4017f9c:	003d3d06 	br	4017494 <__alt_mem_onchip_memory2_0+0xfc0161f4>
 4017fa0:	d8c02303 	ldbu	r3,140(sp)
 4017fa4:	d8c01d85 	stb	r3,118(sp)
 4017fa8:	003d1d06 	br	4017420 <__alt_mem_onchip_memory2_0+0xfc016180>
 4017fac:	d8c02303 	ldbu	r3,140(sp)
 4017fb0:	d8c01d85 	stb	r3,118(sp)
 4017fb4:	003d0306 	br	40173c4 <__alt_mem_onchip_memory2_0+0xfc016124>

04017fb8 <__vfiprintf_internal>:
 4017fb8:	008100f4 	movhi	r2,1027
 4017fbc:	10ab8304 	addi	r2,r2,-20980
 4017fc0:	300f883a 	mov	r7,r6
 4017fc4:	280d883a 	mov	r6,r5
 4017fc8:	200b883a 	mov	r5,r4
 4017fcc:	11000017 	ldw	r4,0(r2)
 4017fd0:	4016aac1 	jmpi	4016aac <___vfiprintf_internal_r>

04017fd4 <__sbprintf>:
 4017fd4:	2880030b 	ldhu	r2,12(r5)
 4017fd8:	2ac01917 	ldw	r11,100(r5)
 4017fdc:	2a80038b 	ldhu	r10,14(r5)
 4017fe0:	2a400717 	ldw	r9,28(r5)
 4017fe4:	2a000917 	ldw	r8,36(r5)
 4017fe8:	defee204 	addi	sp,sp,-1144
 4017fec:	00c10004 	movi	r3,1024
 4017ff0:	dc011a15 	stw	r16,1128(sp)
 4017ff4:	10bfff4c 	andi	r2,r2,65533
 4017ff8:	2821883a 	mov	r16,r5
 4017ffc:	d8cb883a 	add	r5,sp,r3
 4018000:	dc811c15 	stw	r18,1136(sp)
 4018004:	dc411b15 	stw	r17,1132(sp)
 4018008:	dfc11d15 	stw	ra,1140(sp)
 401800c:	2025883a 	mov	r18,r4
 4018010:	d881030d 	sth	r2,1036(sp)
 4018014:	dac11915 	stw	r11,1124(sp)
 4018018:	da81038d 	sth	r10,1038(sp)
 401801c:	da410715 	stw	r9,1052(sp)
 4018020:	da010915 	stw	r8,1060(sp)
 4018024:	dec10015 	stw	sp,1024(sp)
 4018028:	dec10415 	stw	sp,1040(sp)
 401802c:	d8c10215 	stw	r3,1032(sp)
 4018030:	d8c10515 	stw	r3,1044(sp)
 4018034:	d8010615 	stw	zero,1048(sp)
 4018038:	4016aac0 	call	4016aac <___vfiprintf_internal_r>
 401803c:	1023883a 	mov	r17,r2
 4018040:	10000416 	blt	r2,zero,4018054 <__sbprintf+0x80>
 4018044:	d9410004 	addi	r5,sp,1024
 4018048:	9009883a 	mov	r4,r18
 401804c:	4013ccc0 	call	4013ccc <_fflush_r>
 4018050:	10000d1e 	bne	r2,zero,4018088 <__sbprintf+0xb4>
 4018054:	d881030b 	ldhu	r2,1036(sp)
 4018058:	1080100c 	andi	r2,r2,64
 401805c:	10000326 	beq	r2,zero,401806c <__sbprintf+0x98>
 4018060:	8080030b 	ldhu	r2,12(r16)
 4018064:	10801014 	ori	r2,r2,64
 4018068:	8080030d 	sth	r2,12(r16)
 401806c:	8805883a 	mov	r2,r17
 4018070:	dfc11d17 	ldw	ra,1140(sp)
 4018074:	dc811c17 	ldw	r18,1136(sp)
 4018078:	dc411b17 	ldw	r17,1132(sp)
 401807c:	dc011a17 	ldw	r16,1128(sp)
 4018080:	dec11e04 	addi	sp,sp,1144
 4018084:	f800283a 	ret
 4018088:	047fffc4 	movi	r17,-1
 401808c:	003ff106 	br	4018054 <__alt_mem_onchip_memory2_0+0xfc016db4>

04018090 <__swbuf_r>:
 4018090:	defffb04 	addi	sp,sp,-20
 4018094:	dcc00315 	stw	r19,12(sp)
 4018098:	dc800215 	stw	r18,8(sp)
 401809c:	dc000015 	stw	r16,0(sp)
 40180a0:	dfc00415 	stw	ra,16(sp)
 40180a4:	dc400115 	stw	r17,4(sp)
 40180a8:	2025883a 	mov	r18,r4
 40180ac:	2827883a 	mov	r19,r5
 40180b0:	3021883a 	mov	r16,r6
 40180b4:	20000226 	beq	r4,zero,40180c0 <__swbuf_r+0x30>
 40180b8:	20800e17 	ldw	r2,56(r4)
 40180bc:	10004226 	beq	r2,zero,40181c8 <__swbuf_r+0x138>
 40180c0:	80800617 	ldw	r2,24(r16)
 40180c4:	8100030b 	ldhu	r4,12(r16)
 40180c8:	80800215 	stw	r2,8(r16)
 40180cc:	2080020c 	andi	r2,r4,8
 40180d0:	10003626 	beq	r2,zero,40181ac <__swbuf_r+0x11c>
 40180d4:	80c00417 	ldw	r3,16(r16)
 40180d8:	18003426 	beq	r3,zero,40181ac <__swbuf_r+0x11c>
 40180dc:	2088000c 	andi	r2,r4,8192
 40180e0:	9c403fcc 	andi	r17,r19,255
 40180e4:	10001a26 	beq	r2,zero,4018150 <__swbuf_r+0xc0>
 40180e8:	80800017 	ldw	r2,0(r16)
 40180ec:	81000517 	ldw	r4,20(r16)
 40180f0:	10c7c83a 	sub	r3,r2,r3
 40180f4:	1900200e 	bge	r3,r4,4018178 <__swbuf_r+0xe8>
 40180f8:	18c00044 	addi	r3,r3,1
 40180fc:	81000217 	ldw	r4,8(r16)
 4018100:	11400044 	addi	r5,r2,1
 4018104:	81400015 	stw	r5,0(r16)
 4018108:	213fffc4 	addi	r4,r4,-1
 401810c:	81000215 	stw	r4,8(r16)
 4018110:	14c00005 	stb	r19,0(r2)
 4018114:	80800517 	ldw	r2,20(r16)
 4018118:	10c01e26 	beq	r2,r3,4018194 <__swbuf_r+0x104>
 401811c:	8080030b 	ldhu	r2,12(r16)
 4018120:	1080004c 	andi	r2,r2,1
 4018124:	10000226 	beq	r2,zero,4018130 <__swbuf_r+0xa0>
 4018128:	00800284 	movi	r2,10
 401812c:	88801926 	beq	r17,r2,4018194 <__swbuf_r+0x104>
 4018130:	8805883a 	mov	r2,r17
 4018134:	dfc00417 	ldw	ra,16(sp)
 4018138:	dcc00317 	ldw	r19,12(sp)
 401813c:	dc800217 	ldw	r18,8(sp)
 4018140:	dc400117 	ldw	r17,4(sp)
 4018144:	dc000017 	ldw	r16,0(sp)
 4018148:	dec00504 	addi	sp,sp,20
 401814c:	f800283a 	ret
 4018150:	81401917 	ldw	r5,100(r16)
 4018154:	00b7ffc4 	movi	r2,-8193
 4018158:	21080014 	ori	r4,r4,8192
 401815c:	2884703a 	and	r2,r5,r2
 4018160:	80801915 	stw	r2,100(r16)
 4018164:	80800017 	ldw	r2,0(r16)
 4018168:	8100030d 	sth	r4,12(r16)
 401816c:	81000517 	ldw	r4,20(r16)
 4018170:	10c7c83a 	sub	r3,r2,r3
 4018174:	193fe016 	blt	r3,r4,40180f8 <__alt_mem_onchip_memory2_0+0xfc016e58>
 4018178:	800b883a 	mov	r5,r16
 401817c:	9009883a 	mov	r4,r18
 4018180:	4013ccc0 	call	4013ccc <_fflush_r>
 4018184:	1000071e 	bne	r2,zero,40181a4 <__swbuf_r+0x114>
 4018188:	80800017 	ldw	r2,0(r16)
 401818c:	00c00044 	movi	r3,1
 4018190:	003fda06 	br	40180fc <__alt_mem_onchip_memory2_0+0xfc016e5c>
 4018194:	800b883a 	mov	r5,r16
 4018198:	9009883a 	mov	r4,r18
 401819c:	4013ccc0 	call	4013ccc <_fflush_r>
 40181a0:	103fe326 	beq	r2,zero,4018130 <__alt_mem_onchip_memory2_0+0xfc016e90>
 40181a4:	00bfffc4 	movi	r2,-1
 40181a8:	003fe206 	br	4018134 <__alt_mem_onchip_memory2_0+0xfc016e94>
 40181ac:	800b883a 	mov	r5,r16
 40181b0:	9009883a 	mov	r4,r18
 40181b4:	40120ac0 	call	40120ac <__swsetup_r>
 40181b8:	103ffa1e 	bne	r2,zero,40181a4 <__alt_mem_onchip_memory2_0+0xfc016f04>
 40181bc:	8100030b 	ldhu	r4,12(r16)
 40181c0:	80c00417 	ldw	r3,16(r16)
 40181c4:	003fc506 	br	40180dc <__alt_mem_onchip_memory2_0+0xfc016e3c>
 40181c8:	40140b80 	call	40140b8 <__sinit>
 40181cc:	003fbc06 	br	40180c0 <__alt_mem_onchip_memory2_0+0xfc016e20>

040181d0 <__swbuf>:
 40181d0:	008100f4 	movhi	r2,1027
 40181d4:	10ab8304 	addi	r2,r2,-20980
 40181d8:	280d883a 	mov	r6,r5
 40181dc:	200b883a 	mov	r5,r4
 40181e0:	11000017 	ldw	r4,0(r2)
 40181e4:	40180901 	jmpi	4018090 <__swbuf_r>

040181e8 <_write_r>:
 40181e8:	defffd04 	addi	sp,sp,-12
 40181ec:	2805883a 	mov	r2,r5
 40181f0:	dc000015 	stw	r16,0(sp)
 40181f4:	040100f4 	movhi	r16,1027
 40181f8:	dc400115 	stw	r17,4(sp)
 40181fc:	300b883a 	mov	r5,r6
 4018200:	84381504 	addi	r16,r16,-8108
 4018204:	2023883a 	mov	r17,r4
 4018208:	380d883a 	mov	r6,r7
 401820c:	1009883a 	mov	r4,r2
 4018210:	dfc00215 	stw	ra,8(sp)
 4018214:	80000015 	stw	zero,0(r16)
 4018218:	401c9140 	call	401c914 <write>
 401821c:	00ffffc4 	movi	r3,-1
 4018220:	10c00526 	beq	r2,r3,4018238 <_write_r+0x50>
 4018224:	dfc00217 	ldw	ra,8(sp)
 4018228:	dc400117 	ldw	r17,4(sp)
 401822c:	dc000017 	ldw	r16,0(sp)
 4018230:	dec00304 	addi	sp,sp,12
 4018234:	f800283a 	ret
 4018238:	80c00017 	ldw	r3,0(r16)
 401823c:	183ff926 	beq	r3,zero,4018224 <__alt_mem_onchip_memory2_0+0xfc016f84>
 4018240:	88c00015 	stw	r3,0(r17)
 4018244:	003ff706 	br	4018224 <__alt_mem_onchip_memory2_0+0xfc016f84>

04018248 <_close_r>:
 4018248:	defffd04 	addi	sp,sp,-12
 401824c:	dc000015 	stw	r16,0(sp)
 4018250:	040100f4 	movhi	r16,1027
 4018254:	dc400115 	stw	r17,4(sp)
 4018258:	84381504 	addi	r16,r16,-8108
 401825c:	2023883a 	mov	r17,r4
 4018260:	2809883a 	mov	r4,r5
 4018264:	dfc00215 	stw	ra,8(sp)
 4018268:	80000015 	stw	zero,0(r16)
 401826c:	401be180 	call	401be18 <close>
 4018270:	00ffffc4 	movi	r3,-1
 4018274:	10c00526 	beq	r2,r3,401828c <_close_r+0x44>
 4018278:	dfc00217 	ldw	ra,8(sp)
 401827c:	dc400117 	ldw	r17,4(sp)
 4018280:	dc000017 	ldw	r16,0(sp)
 4018284:	dec00304 	addi	sp,sp,12
 4018288:	f800283a 	ret
 401828c:	80c00017 	ldw	r3,0(r16)
 4018290:	183ff926 	beq	r3,zero,4018278 <__alt_mem_onchip_memory2_0+0xfc016fd8>
 4018294:	88c00015 	stw	r3,0(r17)
 4018298:	003ff706 	br	4018278 <__alt_mem_onchip_memory2_0+0xfc016fd8>

0401829c <_calloc_r>:
 401829c:	defffe04 	addi	sp,sp,-8
 40182a0:	2805883a 	mov	r2,r5
 40182a4:	dc000015 	stw	r16,0(sp)
 40182a8:	300b883a 	mov	r5,r6
 40182ac:	2021883a 	mov	r16,r4
 40182b0:	1009883a 	mov	r4,r2
 40182b4:	dfc00115 	stw	ra,4(sp)
 40182b8:	400dae00 	call	400dae0 <__mulsi3>
 40182bc:	100b883a 	mov	r5,r2
 40182c0:	8009883a 	mov	r4,r16
 40182c4:	400ec480 	call	400ec48 <_malloc_r>
 40182c8:	10002926 	beq	r2,zero,4018370 <_calloc_r+0xd4>
 40182cc:	11bfff17 	ldw	r6,-4(r2)
 40182d0:	1021883a 	mov	r16,r2
 40182d4:	00bfff04 	movi	r2,-4
 40182d8:	308c703a 	and	r6,r6,r2
 40182dc:	00c00904 	movi	r3,36
 40182e0:	308d883a 	add	r6,r6,r2
 40182e4:	19801636 	bltu	r3,r6,4018340 <_calloc_r+0xa4>
 40182e8:	008004c4 	movi	r2,19
 40182ec:	11800b2e 	bgeu	r2,r6,401831c <_calloc_r+0x80>
 40182f0:	80000015 	stw	zero,0(r16)
 40182f4:	80000115 	stw	zero,4(r16)
 40182f8:	008006c4 	movi	r2,27
 40182fc:	11801a2e 	bgeu	r2,r6,4018368 <_calloc_r+0xcc>
 4018300:	80000215 	stw	zero,8(r16)
 4018304:	80000315 	stw	zero,12(r16)
 4018308:	30c0151e 	bne	r6,r3,4018360 <_calloc_r+0xc4>
 401830c:	80000415 	stw	zero,16(r16)
 4018310:	80800604 	addi	r2,r16,24
 4018314:	80000515 	stw	zero,20(r16)
 4018318:	00000106 	br	4018320 <_calloc_r+0x84>
 401831c:	8005883a 	mov	r2,r16
 4018320:	10000015 	stw	zero,0(r2)
 4018324:	10000115 	stw	zero,4(r2)
 4018328:	10000215 	stw	zero,8(r2)
 401832c:	8005883a 	mov	r2,r16
 4018330:	dfc00117 	ldw	ra,4(sp)
 4018334:	dc000017 	ldw	r16,0(sp)
 4018338:	dec00204 	addi	sp,sp,8
 401833c:	f800283a 	ret
 4018340:	000b883a 	mov	r5,zero
 4018344:	8009883a 	mov	r4,r16
 4018348:	400f59c0 	call	400f59c <memset>
 401834c:	8005883a 	mov	r2,r16
 4018350:	dfc00117 	ldw	ra,4(sp)
 4018354:	dc000017 	ldw	r16,0(sp)
 4018358:	dec00204 	addi	sp,sp,8
 401835c:	f800283a 	ret
 4018360:	80800404 	addi	r2,r16,16
 4018364:	003fee06 	br	4018320 <__alt_mem_onchip_memory2_0+0xfc017080>
 4018368:	80800204 	addi	r2,r16,8
 401836c:	003fec06 	br	4018320 <__alt_mem_onchip_memory2_0+0xfc017080>
 4018370:	0005883a 	mov	r2,zero
 4018374:	003fee06 	br	4018330 <__alt_mem_onchip_memory2_0+0xfc017090>

04018378 <_fclose_r>:
 4018378:	28003926 	beq	r5,zero,4018460 <_fclose_r+0xe8>
 401837c:	defffc04 	addi	sp,sp,-16
 4018380:	dc400115 	stw	r17,4(sp)
 4018384:	dc000015 	stw	r16,0(sp)
 4018388:	dfc00315 	stw	ra,12(sp)
 401838c:	dc800215 	stw	r18,8(sp)
 4018390:	2023883a 	mov	r17,r4
 4018394:	2821883a 	mov	r16,r5
 4018398:	20000226 	beq	r4,zero,40183a4 <_fclose_r+0x2c>
 401839c:	20800e17 	ldw	r2,56(r4)
 40183a0:	10002726 	beq	r2,zero,4018440 <_fclose_r+0xc8>
 40183a4:	8080030f 	ldh	r2,12(r16)
 40183a8:	1000071e 	bne	r2,zero,40183c8 <_fclose_r+0x50>
 40183ac:	0005883a 	mov	r2,zero
 40183b0:	dfc00317 	ldw	ra,12(sp)
 40183b4:	dc800217 	ldw	r18,8(sp)
 40183b8:	dc400117 	ldw	r17,4(sp)
 40183bc:	dc000017 	ldw	r16,0(sp)
 40183c0:	dec00404 	addi	sp,sp,16
 40183c4:	f800283a 	ret
 40183c8:	800b883a 	mov	r5,r16
 40183cc:	8809883a 	mov	r4,r17
 40183d0:	4013ab00 	call	4013ab0 <__sflush_r>
 40183d4:	1025883a 	mov	r18,r2
 40183d8:	80800b17 	ldw	r2,44(r16)
 40183dc:	10000426 	beq	r2,zero,40183f0 <_fclose_r+0x78>
 40183e0:	81400717 	ldw	r5,28(r16)
 40183e4:	8809883a 	mov	r4,r17
 40183e8:	103ee83a 	callr	r2
 40183ec:	10001616 	blt	r2,zero,4018448 <_fclose_r+0xd0>
 40183f0:	8080030b 	ldhu	r2,12(r16)
 40183f4:	1080200c 	andi	r2,r2,128
 40183f8:	1000151e 	bne	r2,zero,4018450 <_fclose_r+0xd8>
 40183fc:	81400c17 	ldw	r5,48(r16)
 4018400:	28000526 	beq	r5,zero,4018418 <_fclose_r+0xa0>
 4018404:	80801004 	addi	r2,r16,64
 4018408:	28800226 	beq	r5,r2,4018414 <_fclose_r+0x9c>
 401840c:	8809883a 	mov	r4,r17
 4018410:	401422c0 	call	401422c <_free_r>
 4018414:	80000c15 	stw	zero,48(r16)
 4018418:	81401117 	ldw	r5,68(r16)
 401841c:	28000326 	beq	r5,zero,401842c <_fclose_r+0xb4>
 4018420:	8809883a 	mov	r4,r17
 4018424:	401422c0 	call	401422c <_free_r>
 4018428:	80001115 	stw	zero,68(r16)
 401842c:	40140c80 	call	40140c8 <__sfp_lock_acquire>
 4018430:	8000030d 	sth	zero,12(r16)
 4018434:	40140cc0 	call	40140cc <__sfp_lock_release>
 4018438:	9005883a 	mov	r2,r18
 401843c:	003fdc06 	br	40183b0 <__alt_mem_onchip_memory2_0+0xfc017110>
 4018440:	40140b80 	call	40140b8 <__sinit>
 4018444:	003fd706 	br	40183a4 <__alt_mem_onchip_memory2_0+0xfc017104>
 4018448:	04bfffc4 	movi	r18,-1
 401844c:	003fe806 	br	40183f0 <__alt_mem_onchip_memory2_0+0xfc017150>
 4018450:	81400417 	ldw	r5,16(r16)
 4018454:	8809883a 	mov	r4,r17
 4018458:	401422c0 	call	401422c <_free_r>
 401845c:	003fe706 	br	40183fc <__alt_mem_onchip_memory2_0+0xfc01715c>
 4018460:	0005883a 	mov	r2,zero
 4018464:	f800283a 	ret

04018468 <fclose>:
 4018468:	008100f4 	movhi	r2,1027
 401846c:	10ab8304 	addi	r2,r2,-20980
 4018470:	200b883a 	mov	r5,r4
 4018474:	11000017 	ldw	r4,0(r2)
 4018478:	40183781 	jmpi	4018378 <_fclose_r>

0401847c <__fputwc>:
 401847c:	defff804 	addi	sp,sp,-32
 4018480:	dcc00415 	stw	r19,16(sp)
 4018484:	dc800315 	stw	r18,12(sp)
 4018488:	dc000115 	stw	r16,4(sp)
 401848c:	dfc00715 	stw	ra,28(sp)
 4018490:	dd400615 	stw	r21,24(sp)
 4018494:	dd000515 	stw	r20,20(sp)
 4018498:	dc400215 	stw	r17,8(sp)
 401849c:	2027883a 	mov	r19,r4
 40184a0:	2825883a 	mov	r18,r5
 40184a4:	3021883a 	mov	r16,r6
 40184a8:	4014c140 	call	4014c14 <__locale_mb_cur_max>
 40184ac:	00c00044 	movi	r3,1
 40184b0:	10c03e26 	beq	r2,r3,40185ac <__fputwc+0x130>
 40184b4:	81c01704 	addi	r7,r16,92
 40184b8:	900d883a 	mov	r6,r18
 40184bc:	d80b883a 	mov	r5,sp
 40184c0:	9809883a 	mov	r4,r19
 40184c4:	40187f40 	call	40187f4 <_wcrtomb_r>
 40184c8:	1029883a 	mov	r20,r2
 40184cc:	00bfffc4 	movi	r2,-1
 40184d0:	a0802026 	beq	r20,r2,4018554 <__fputwc+0xd8>
 40184d4:	d9400003 	ldbu	r5,0(sp)
 40184d8:	a0001c26 	beq	r20,zero,401854c <__fputwc+0xd0>
 40184dc:	0023883a 	mov	r17,zero
 40184e0:	05400284 	movi	r21,10
 40184e4:	00000906 	br	401850c <__fputwc+0x90>
 40184e8:	80800017 	ldw	r2,0(r16)
 40184ec:	11400005 	stb	r5,0(r2)
 40184f0:	80c00017 	ldw	r3,0(r16)
 40184f4:	18c00044 	addi	r3,r3,1
 40184f8:	80c00015 	stw	r3,0(r16)
 40184fc:	8c400044 	addi	r17,r17,1
 4018500:	dc45883a 	add	r2,sp,r17
 4018504:	8d00112e 	bgeu	r17,r20,401854c <__fputwc+0xd0>
 4018508:	11400003 	ldbu	r5,0(r2)
 401850c:	80c00217 	ldw	r3,8(r16)
 4018510:	18ffffc4 	addi	r3,r3,-1
 4018514:	80c00215 	stw	r3,8(r16)
 4018518:	183ff30e 	bge	r3,zero,40184e8 <__alt_mem_onchip_memory2_0+0xfc017248>
 401851c:	80800617 	ldw	r2,24(r16)
 4018520:	18801916 	blt	r3,r2,4018588 <__fputwc+0x10c>
 4018524:	80800017 	ldw	r2,0(r16)
 4018528:	11400005 	stb	r5,0(r2)
 401852c:	80800017 	ldw	r2,0(r16)
 4018530:	10c00003 	ldbu	r3,0(r2)
 4018534:	10800044 	addi	r2,r2,1
 4018538:	1d402326 	beq	r3,r21,40185c8 <__fputwc+0x14c>
 401853c:	80800015 	stw	r2,0(r16)
 4018540:	8c400044 	addi	r17,r17,1
 4018544:	dc45883a 	add	r2,sp,r17
 4018548:	8d3fef36 	bltu	r17,r20,4018508 <__alt_mem_onchip_memory2_0+0xfc017268>
 401854c:	9005883a 	mov	r2,r18
 4018550:	00000406 	br	4018564 <__fputwc+0xe8>
 4018554:	80c0030b 	ldhu	r3,12(r16)
 4018558:	a005883a 	mov	r2,r20
 401855c:	18c01014 	ori	r3,r3,64
 4018560:	80c0030d 	sth	r3,12(r16)
 4018564:	dfc00717 	ldw	ra,28(sp)
 4018568:	dd400617 	ldw	r21,24(sp)
 401856c:	dd000517 	ldw	r20,20(sp)
 4018570:	dcc00417 	ldw	r19,16(sp)
 4018574:	dc800317 	ldw	r18,12(sp)
 4018578:	dc400217 	ldw	r17,8(sp)
 401857c:	dc000117 	ldw	r16,4(sp)
 4018580:	dec00804 	addi	sp,sp,32
 4018584:	f800283a 	ret
 4018588:	800d883a 	mov	r6,r16
 401858c:	29403fcc 	andi	r5,r5,255
 4018590:	9809883a 	mov	r4,r19
 4018594:	40180900 	call	4018090 <__swbuf_r>
 4018598:	10bfffe0 	cmpeqi	r2,r2,-1
 401859c:	10803fcc 	andi	r2,r2,255
 40185a0:	103fd626 	beq	r2,zero,40184fc <__alt_mem_onchip_memory2_0+0xfc01725c>
 40185a4:	00bfffc4 	movi	r2,-1
 40185a8:	003fee06 	br	4018564 <__alt_mem_onchip_memory2_0+0xfc0172c4>
 40185ac:	90ffffc4 	addi	r3,r18,-1
 40185b0:	01003f84 	movi	r4,254
 40185b4:	20ffbf36 	bltu	r4,r3,40184b4 <__alt_mem_onchip_memory2_0+0xfc017214>
 40185b8:	900b883a 	mov	r5,r18
 40185bc:	dc800005 	stb	r18,0(sp)
 40185c0:	1029883a 	mov	r20,r2
 40185c4:	003fc506 	br	40184dc <__alt_mem_onchip_memory2_0+0xfc01723c>
 40185c8:	800d883a 	mov	r6,r16
 40185cc:	a80b883a 	mov	r5,r21
 40185d0:	9809883a 	mov	r4,r19
 40185d4:	40180900 	call	4018090 <__swbuf_r>
 40185d8:	10bfffe0 	cmpeqi	r2,r2,-1
 40185dc:	003fef06 	br	401859c <__alt_mem_onchip_memory2_0+0xfc0172fc>

040185e0 <_fputwc_r>:
 40185e0:	3080030b 	ldhu	r2,12(r6)
 40185e4:	10c8000c 	andi	r3,r2,8192
 40185e8:	1800051e 	bne	r3,zero,4018600 <_fputwc_r+0x20>
 40185ec:	30c01917 	ldw	r3,100(r6)
 40185f0:	10880014 	ori	r2,r2,8192
 40185f4:	3080030d 	sth	r2,12(r6)
 40185f8:	18880014 	ori	r2,r3,8192
 40185fc:	30801915 	stw	r2,100(r6)
 4018600:	401847c1 	jmpi	401847c <__fputwc>

04018604 <fputwc>:
 4018604:	008100f4 	movhi	r2,1027
 4018608:	defffc04 	addi	sp,sp,-16
 401860c:	10ab8304 	addi	r2,r2,-20980
 4018610:	dc000115 	stw	r16,4(sp)
 4018614:	14000017 	ldw	r16,0(r2)
 4018618:	dc400215 	stw	r17,8(sp)
 401861c:	dfc00315 	stw	ra,12(sp)
 4018620:	2023883a 	mov	r17,r4
 4018624:	80000226 	beq	r16,zero,4018630 <fputwc+0x2c>
 4018628:	80800e17 	ldw	r2,56(r16)
 401862c:	10001026 	beq	r2,zero,4018670 <fputwc+0x6c>
 4018630:	2880030b 	ldhu	r2,12(r5)
 4018634:	10c8000c 	andi	r3,r2,8192
 4018638:	1800051e 	bne	r3,zero,4018650 <fputwc+0x4c>
 401863c:	28c01917 	ldw	r3,100(r5)
 4018640:	10880014 	ori	r2,r2,8192
 4018644:	2880030d 	sth	r2,12(r5)
 4018648:	18880014 	ori	r2,r3,8192
 401864c:	28801915 	stw	r2,100(r5)
 4018650:	280d883a 	mov	r6,r5
 4018654:	8009883a 	mov	r4,r16
 4018658:	880b883a 	mov	r5,r17
 401865c:	dfc00317 	ldw	ra,12(sp)
 4018660:	dc400217 	ldw	r17,8(sp)
 4018664:	dc000117 	ldw	r16,4(sp)
 4018668:	dec00404 	addi	sp,sp,16
 401866c:	401847c1 	jmpi	401847c <__fputwc>
 4018670:	8009883a 	mov	r4,r16
 4018674:	d9400015 	stw	r5,0(sp)
 4018678:	40140b80 	call	40140b8 <__sinit>
 401867c:	d9400017 	ldw	r5,0(sp)
 4018680:	003feb06 	br	4018630 <__alt_mem_onchip_memory2_0+0xfc017390>

04018684 <_fstat_r>:
 4018684:	defffd04 	addi	sp,sp,-12
 4018688:	2805883a 	mov	r2,r5
 401868c:	dc000015 	stw	r16,0(sp)
 4018690:	040100f4 	movhi	r16,1027
 4018694:	dc400115 	stw	r17,4(sp)
 4018698:	84381504 	addi	r16,r16,-8108
 401869c:	2023883a 	mov	r17,r4
 40186a0:	300b883a 	mov	r5,r6
 40186a4:	1009883a 	mov	r4,r2
 40186a8:	dfc00215 	stw	ra,8(sp)
 40186ac:	80000015 	stw	zero,0(r16)
 40186b0:	401bf8c0 	call	401bf8c <fstat>
 40186b4:	00ffffc4 	movi	r3,-1
 40186b8:	10c00526 	beq	r2,r3,40186d0 <_fstat_r+0x4c>
 40186bc:	dfc00217 	ldw	ra,8(sp)
 40186c0:	dc400117 	ldw	r17,4(sp)
 40186c4:	dc000017 	ldw	r16,0(sp)
 40186c8:	dec00304 	addi	sp,sp,12
 40186cc:	f800283a 	ret
 40186d0:	80c00017 	ldw	r3,0(r16)
 40186d4:	183ff926 	beq	r3,zero,40186bc <__alt_mem_onchip_memory2_0+0xfc01741c>
 40186d8:	88c00015 	stw	r3,0(r17)
 40186dc:	003ff706 	br	40186bc <__alt_mem_onchip_memory2_0+0xfc01741c>

040186e0 <_isatty_r>:
 40186e0:	defffd04 	addi	sp,sp,-12
 40186e4:	dc000015 	stw	r16,0(sp)
 40186e8:	040100f4 	movhi	r16,1027
 40186ec:	dc400115 	stw	r17,4(sp)
 40186f0:	84381504 	addi	r16,r16,-8108
 40186f4:	2023883a 	mov	r17,r4
 40186f8:	2809883a 	mov	r4,r5
 40186fc:	dfc00215 	stw	ra,8(sp)
 4018700:	80000015 	stw	zero,0(r16)
 4018704:	401c0a00 	call	401c0a0 <isatty>
 4018708:	00ffffc4 	movi	r3,-1
 401870c:	10c00526 	beq	r2,r3,4018724 <_isatty_r+0x44>
 4018710:	dfc00217 	ldw	ra,8(sp)
 4018714:	dc400117 	ldw	r17,4(sp)
 4018718:	dc000017 	ldw	r16,0(sp)
 401871c:	dec00304 	addi	sp,sp,12
 4018720:	f800283a 	ret
 4018724:	80c00017 	ldw	r3,0(r16)
 4018728:	183ff926 	beq	r3,zero,4018710 <__alt_mem_onchip_memory2_0+0xfc017470>
 401872c:	88c00015 	stw	r3,0(r17)
 4018730:	003ff706 	br	4018710 <__alt_mem_onchip_memory2_0+0xfc017470>

04018734 <_lseek_r>:
 4018734:	defffd04 	addi	sp,sp,-12
 4018738:	2805883a 	mov	r2,r5
 401873c:	dc000015 	stw	r16,0(sp)
 4018740:	040100f4 	movhi	r16,1027
 4018744:	dc400115 	stw	r17,4(sp)
 4018748:	300b883a 	mov	r5,r6
 401874c:	84381504 	addi	r16,r16,-8108
 4018750:	2023883a 	mov	r17,r4
 4018754:	380d883a 	mov	r6,r7
 4018758:	1009883a 	mov	r4,r2
 401875c:	dfc00215 	stw	ra,8(sp)
 4018760:	80000015 	stw	zero,0(r16)
 4018764:	401c3e00 	call	401c3e0 <lseek>
 4018768:	00ffffc4 	movi	r3,-1
 401876c:	10c00526 	beq	r2,r3,4018784 <_lseek_r+0x50>
 4018770:	dfc00217 	ldw	ra,8(sp)
 4018774:	dc400117 	ldw	r17,4(sp)
 4018778:	dc000017 	ldw	r16,0(sp)
 401877c:	dec00304 	addi	sp,sp,12
 4018780:	f800283a 	ret
 4018784:	80c00017 	ldw	r3,0(r16)
 4018788:	183ff926 	beq	r3,zero,4018770 <__alt_mem_onchip_memory2_0+0xfc0174d0>
 401878c:	88c00015 	stw	r3,0(r17)
 4018790:	003ff706 	br	4018770 <__alt_mem_onchip_memory2_0+0xfc0174d0>

04018794 <_read_r>:
 4018794:	defffd04 	addi	sp,sp,-12
 4018798:	2805883a 	mov	r2,r5
 401879c:	dc000015 	stw	r16,0(sp)
 40187a0:	040100f4 	movhi	r16,1027
 40187a4:	dc400115 	stw	r17,4(sp)
 40187a8:	300b883a 	mov	r5,r6
 40187ac:	84381504 	addi	r16,r16,-8108
 40187b0:	2023883a 	mov	r17,r4
 40187b4:	380d883a 	mov	r6,r7
 40187b8:	1009883a 	mov	r4,r2
 40187bc:	dfc00215 	stw	ra,8(sp)
 40187c0:	80000015 	stw	zero,0(r16)
 40187c4:	401c5bc0 	call	401c5bc <read>
 40187c8:	00ffffc4 	movi	r3,-1
 40187cc:	10c00526 	beq	r2,r3,40187e4 <_read_r+0x50>
 40187d0:	dfc00217 	ldw	ra,8(sp)
 40187d4:	dc400117 	ldw	r17,4(sp)
 40187d8:	dc000017 	ldw	r16,0(sp)
 40187dc:	dec00304 	addi	sp,sp,12
 40187e0:	f800283a 	ret
 40187e4:	80c00017 	ldw	r3,0(r16)
 40187e8:	183ff926 	beq	r3,zero,40187d0 <__alt_mem_onchip_memory2_0+0xfc017530>
 40187ec:	88c00015 	stw	r3,0(r17)
 40187f0:	003ff706 	br	40187d0 <__alt_mem_onchip_memory2_0+0xfc017530>

040187f4 <_wcrtomb_r>:
 40187f4:	defff604 	addi	sp,sp,-40
 40187f8:	008100f4 	movhi	r2,1027
 40187fc:	dc800815 	stw	r18,32(sp)
 4018800:	dc400715 	stw	r17,28(sp)
 4018804:	dc000615 	stw	r16,24(sp)
 4018808:	10ab8704 	addi	r2,r2,-20964
 401880c:	dfc00915 	stw	ra,36(sp)
 4018810:	2021883a 	mov	r16,r4
 4018814:	3823883a 	mov	r17,r7
 4018818:	14800017 	ldw	r18,0(r2)
 401881c:	28001426 	beq	r5,zero,4018870 <_wcrtomb_r+0x7c>
 4018820:	d9400415 	stw	r5,16(sp)
 4018824:	d9800515 	stw	r6,20(sp)
 4018828:	4014c080 	call	4014c08 <__locale_charset>
 401882c:	d9800517 	ldw	r6,20(sp)
 4018830:	d9400417 	ldw	r5,16(sp)
 4018834:	100f883a 	mov	r7,r2
 4018838:	dc400015 	stw	r17,0(sp)
 401883c:	8009883a 	mov	r4,r16
 4018840:	903ee83a 	callr	r18
 4018844:	00ffffc4 	movi	r3,-1
 4018848:	10c0031e 	bne	r2,r3,4018858 <_wcrtomb_r+0x64>
 401884c:	88000015 	stw	zero,0(r17)
 4018850:	00c02284 	movi	r3,138
 4018854:	80c00015 	stw	r3,0(r16)
 4018858:	dfc00917 	ldw	ra,36(sp)
 401885c:	dc800817 	ldw	r18,32(sp)
 4018860:	dc400717 	ldw	r17,28(sp)
 4018864:	dc000617 	ldw	r16,24(sp)
 4018868:	dec00a04 	addi	sp,sp,40
 401886c:	f800283a 	ret
 4018870:	4014c080 	call	4014c08 <__locale_charset>
 4018874:	100f883a 	mov	r7,r2
 4018878:	dc400015 	stw	r17,0(sp)
 401887c:	000d883a 	mov	r6,zero
 4018880:	d9400104 	addi	r5,sp,4
 4018884:	8009883a 	mov	r4,r16
 4018888:	903ee83a 	callr	r18
 401888c:	003fed06 	br	4018844 <__alt_mem_onchip_memory2_0+0xfc0175a4>

04018890 <wcrtomb>:
 4018890:	defff604 	addi	sp,sp,-40
 4018894:	008100f4 	movhi	r2,1027
 4018898:	dc800615 	stw	r18,24(sp)
 401889c:	dc400515 	stw	r17,20(sp)
 40188a0:	10ab8304 	addi	r2,r2,-20980
 40188a4:	dfc00915 	stw	ra,36(sp)
 40188a8:	dd000815 	stw	r20,32(sp)
 40188ac:	dcc00715 	stw	r19,28(sp)
 40188b0:	dc000415 	stw	r16,16(sp)
 40188b4:	3025883a 	mov	r18,r6
 40188b8:	14400017 	ldw	r17,0(r2)
 40188bc:	20001926 	beq	r4,zero,4018924 <wcrtomb+0x94>
 40188c0:	008100f4 	movhi	r2,1027
 40188c4:	10ab8704 	addi	r2,r2,-20964
 40188c8:	15000017 	ldw	r20,0(r2)
 40188cc:	2021883a 	mov	r16,r4
 40188d0:	2827883a 	mov	r19,r5
 40188d4:	4014c080 	call	4014c08 <__locale_charset>
 40188d8:	100f883a 	mov	r7,r2
 40188dc:	dc800015 	stw	r18,0(sp)
 40188e0:	980d883a 	mov	r6,r19
 40188e4:	800b883a 	mov	r5,r16
 40188e8:	8809883a 	mov	r4,r17
 40188ec:	a03ee83a 	callr	r20
 40188f0:	00ffffc4 	movi	r3,-1
 40188f4:	10c0031e 	bne	r2,r3,4018904 <wcrtomb+0x74>
 40188f8:	90000015 	stw	zero,0(r18)
 40188fc:	00c02284 	movi	r3,138
 4018900:	88c00015 	stw	r3,0(r17)
 4018904:	dfc00917 	ldw	ra,36(sp)
 4018908:	dd000817 	ldw	r20,32(sp)
 401890c:	dcc00717 	ldw	r19,28(sp)
 4018910:	dc800617 	ldw	r18,24(sp)
 4018914:	dc400517 	ldw	r17,20(sp)
 4018918:	dc000417 	ldw	r16,16(sp)
 401891c:	dec00a04 	addi	sp,sp,40
 4018920:	f800283a 	ret
 4018924:	008100f4 	movhi	r2,1027
 4018928:	10ab8704 	addi	r2,r2,-20964
 401892c:	14000017 	ldw	r16,0(r2)
 4018930:	4014c080 	call	4014c08 <__locale_charset>
 4018934:	100f883a 	mov	r7,r2
 4018938:	dc800015 	stw	r18,0(sp)
 401893c:	000d883a 	mov	r6,zero
 4018940:	d9400104 	addi	r5,sp,4
 4018944:	8809883a 	mov	r4,r17
 4018948:	803ee83a 	callr	r16
 401894c:	003fe806 	br	40188f0 <__alt_mem_onchip_memory2_0+0xfc017650>

04018950 <__ascii_wctomb>:
 4018950:	28000526 	beq	r5,zero,4018968 <__ascii_wctomb+0x18>
 4018954:	00803fc4 	movi	r2,255
 4018958:	11800536 	bltu	r2,r6,4018970 <__ascii_wctomb+0x20>
 401895c:	29800005 	stb	r6,0(r5)
 4018960:	00800044 	movi	r2,1
 4018964:	f800283a 	ret
 4018968:	0005883a 	mov	r2,zero
 401896c:	f800283a 	ret
 4018970:	00802284 	movi	r2,138
 4018974:	20800015 	stw	r2,0(r4)
 4018978:	00bfffc4 	movi	r2,-1
 401897c:	f800283a 	ret

04018980 <_wctomb_r>:
 4018980:	008100f4 	movhi	r2,1027
 4018984:	defff904 	addi	sp,sp,-28
 4018988:	10ab8704 	addi	r2,r2,-20964
 401898c:	dfc00615 	stw	ra,24(sp)
 4018990:	dc400515 	stw	r17,20(sp)
 4018994:	dc000415 	stw	r16,16(sp)
 4018998:	3823883a 	mov	r17,r7
 401899c:	14000017 	ldw	r16,0(r2)
 40189a0:	d9000115 	stw	r4,4(sp)
 40189a4:	d9400215 	stw	r5,8(sp)
 40189a8:	d9800315 	stw	r6,12(sp)
 40189ac:	4014c080 	call	4014c08 <__locale_charset>
 40189b0:	d9800317 	ldw	r6,12(sp)
 40189b4:	d9400217 	ldw	r5,8(sp)
 40189b8:	d9000117 	ldw	r4,4(sp)
 40189bc:	100f883a 	mov	r7,r2
 40189c0:	dc400015 	stw	r17,0(sp)
 40189c4:	803ee83a 	callr	r16
 40189c8:	dfc00617 	ldw	ra,24(sp)
 40189cc:	dc400517 	ldw	r17,20(sp)
 40189d0:	dc000417 	ldw	r16,16(sp)
 40189d4:	dec00704 	addi	sp,sp,28
 40189d8:	f800283a 	ret

040189dc <__udivdi3>:
 40189dc:	defff404 	addi	sp,sp,-48
 40189e0:	dcc00515 	stw	r19,20(sp)
 40189e4:	dc000215 	stw	r16,8(sp)
 40189e8:	dfc00b15 	stw	ra,44(sp)
 40189ec:	df000a15 	stw	fp,40(sp)
 40189f0:	ddc00915 	stw	r23,36(sp)
 40189f4:	dd800815 	stw	r22,32(sp)
 40189f8:	dd400715 	stw	r21,28(sp)
 40189fc:	dd000615 	stw	r20,24(sp)
 4018a00:	dc800415 	stw	r18,16(sp)
 4018a04:	dc400315 	stw	r17,12(sp)
 4018a08:	2027883a 	mov	r19,r4
 4018a0c:	2821883a 	mov	r16,r5
 4018a10:	3800461e 	bne	r7,zero,4018b2c <__udivdi3+0x150>
 4018a14:	3023883a 	mov	r17,r6
 4018a18:	2025883a 	mov	r18,r4
 4018a1c:	2980572e 	bgeu	r5,r6,4018b7c <__udivdi3+0x1a0>
 4018a20:	00bfffd4 	movui	r2,65535
 4018a24:	282d883a 	mov	r22,r5
 4018a28:	1180b236 	bltu	r2,r6,4018cf4 <__udivdi3+0x318>
 4018a2c:	00803fc4 	movi	r2,255
 4018a30:	1185803a 	cmpltu	r2,r2,r6
 4018a34:	100490fa 	slli	r2,r2,3
 4018a38:	3086d83a 	srl	r3,r6,r2
 4018a3c:	010100b4 	movhi	r4,1026
 4018a40:	211e5204 	addi	r4,r4,31048
 4018a44:	20c7883a 	add	r3,r4,r3
 4018a48:	18c00003 	ldbu	r3,0(r3)
 4018a4c:	1885883a 	add	r2,r3,r2
 4018a50:	00c00804 	movi	r3,32
 4018a54:	1887c83a 	sub	r3,r3,r2
 4018a58:	18000526 	beq	r3,zero,4018a70 <__udivdi3+0x94>
 4018a5c:	80e0983a 	sll	r16,r16,r3
 4018a60:	9884d83a 	srl	r2,r19,r2
 4018a64:	30e2983a 	sll	r17,r6,r3
 4018a68:	98e4983a 	sll	r18,r19,r3
 4018a6c:	142cb03a 	or	r22,r2,r16
 4018a70:	882ad43a 	srli	r21,r17,16
 4018a74:	b009883a 	mov	r4,r22
 4018a78:	8d3fffcc 	andi	r20,r17,65535
 4018a7c:	a80b883a 	mov	r5,r21
 4018a80:	400da880 	call	400da88 <__umodsi3>
 4018a84:	b009883a 	mov	r4,r22
 4018a88:	a80b883a 	mov	r5,r21
 4018a8c:	1027883a 	mov	r19,r2
 4018a90:	400da240 	call	400da24 <__udivsi3>
 4018a94:	100b883a 	mov	r5,r2
 4018a98:	a009883a 	mov	r4,r20
 4018a9c:	102d883a 	mov	r22,r2
 4018aa0:	400dae00 	call	400dae0 <__mulsi3>
 4018aa4:	9826943a 	slli	r19,r19,16
 4018aa8:	9006d43a 	srli	r3,r18,16
 4018aac:	1cc6b03a 	or	r3,r3,r19
 4018ab0:	1880052e 	bgeu	r3,r2,4018ac8 <__udivdi3+0xec>
 4018ab4:	1c47883a 	add	r3,r3,r17
 4018ab8:	b13fffc4 	addi	r4,r22,-1
 4018abc:	1c400136 	bltu	r3,r17,4018ac4 <__udivdi3+0xe8>
 4018ac0:	18814236 	bltu	r3,r2,4018fcc <__udivdi3+0x5f0>
 4018ac4:	202d883a 	mov	r22,r4
 4018ac8:	18a1c83a 	sub	r16,r3,r2
 4018acc:	8009883a 	mov	r4,r16
 4018ad0:	a80b883a 	mov	r5,r21
 4018ad4:	400da880 	call	400da88 <__umodsi3>
 4018ad8:	1027883a 	mov	r19,r2
 4018adc:	8009883a 	mov	r4,r16
 4018ae0:	a80b883a 	mov	r5,r21
 4018ae4:	9826943a 	slli	r19,r19,16
 4018ae8:	400da240 	call	400da24 <__udivsi3>
 4018aec:	100b883a 	mov	r5,r2
 4018af0:	a009883a 	mov	r4,r20
 4018af4:	94bfffcc 	andi	r18,r18,65535
 4018af8:	1021883a 	mov	r16,r2
 4018afc:	94e4b03a 	or	r18,r18,r19
 4018b00:	400dae00 	call	400dae0 <__mulsi3>
 4018b04:	9080052e 	bgeu	r18,r2,4018b1c <__udivdi3+0x140>
 4018b08:	8ca5883a 	add	r18,r17,r18
 4018b0c:	80ffffc4 	addi	r3,r16,-1
 4018b10:	94410c36 	bltu	r18,r17,4018f44 <__udivdi3+0x568>
 4018b14:	90810b2e 	bgeu	r18,r2,4018f44 <__udivdi3+0x568>
 4018b18:	843fff84 	addi	r16,r16,-2
 4018b1c:	b004943a 	slli	r2,r22,16
 4018b20:	0007883a 	mov	r3,zero
 4018b24:	1404b03a 	or	r2,r2,r16
 4018b28:	00005e06 	br	4018ca4 <__udivdi3+0x2c8>
 4018b2c:	29c05b36 	bltu	r5,r7,4018c9c <__udivdi3+0x2c0>
 4018b30:	00bfffd4 	movui	r2,65535
 4018b34:	11c0672e 	bgeu	r2,r7,4018cd4 <__udivdi3+0x2f8>
 4018b38:	00804034 	movhi	r2,256
 4018b3c:	10bfffc4 	addi	r2,r2,-1
 4018b40:	11c10a36 	bltu	r2,r7,4018f6c <__udivdi3+0x590>
 4018b44:	00800404 	movi	r2,16
 4018b48:	3886d83a 	srl	r3,r7,r2
 4018b4c:	010100b4 	movhi	r4,1026
 4018b50:	211e5204 	addi	r4,r4,31048
 4018b54:	20c7883a 	add	r3,r4,r3
 4018b58:	18c00003 	ldbu	r3,0(r3)
 4018b5c:	05c00804 	movi	r23,32
 4018b60:	1885883a 	add	r2,r3,r2
 4018b64:	b8afc83a 	sub	r23,r23,r2
 4018b68:	b800671e 	bne	r23,zero,4018d08 <__udivdi3+0x32c>
 4018b6c:	3c010536 	bltu	r7,r16,4018f84 <__udivdi3+0x5a8>
 4018b70:	9985403a 	cmpgeu	r2,r19,r6
 4018b74:	0007883a 	mov	r3,zero
 4018b78:	00004a06 	br	4018ca4 <__udivdi3+0x2c8>
 4018b7c:	3000041e 	bne	r6,zero,4018b90 <__udivdi3+0x1b4>
 4018b80:	000b883a 	mov	r5,zero
 4018b84:	01000044 	movi	r4,1
 4018b88:	400da240 	call	400da24 <__udivsi3>
 4018b8c:	1023883a 	mov	r17,r2
 4018b90:	00bfffd4 	movui	r2,65535
 4018b94:	1440532e 	bgeu	r2,r17,4018ce4 <__udivdi3+0x308>
 4018b98:	00804034 	movhi	r2,256
 4018b9c:	10bfffc4 	addi	r2,r2,-1
 4018ba0:	1440f436 	bltu	r2,r17,4018f74 <__udivdi3+0x598>
 4018ba4:	00800404 	movi	r2,16
 4018ba8:	8886d83a 	srl	r3,r17,r2
 4018bac:	010100b4 	movhi	r4,1026
 4018bb0:	211e5204 	addi	r4,r4,31048
 4018bb4:	20c7883a 	add	r3,r4,r3
 4018bb8:	18c00003 	ldbu	r3,0(r3)
 4018bbc:	1885883a 	add	r2,r3,r2
 4018bc0:	00c00804 	movi	r3,32
 4018bc4:	1887c83a 	sub	r3,r3,r2
 4018bc8:	1800a51e 	bne	r3,zero,4018e60 <__udivdi3+0x484>
 4018bcc:	882ad43a 	srli	r21,r17,16
 4018bd0:	8461c83a 	sub	r16,r16,r17
 4018bd4:	8d3fffcc 	andi	r20,r17,65535
 4018bd8:	00c00044 	movi	r3,1
 4018bdc:	a80b883a 	mov	r5,r21
 4018be0:	8009883a 	mov	r4,r16
 4018be4:	d8c00115 	stw	r3,4(sp)
 4018be8:	400da880 	call	400da88 <__umodsi3>
 4018bec:	a80b883a 	mov	r5,r21
 4018bf0:	8009883a 	mov	r4,r16
 4018bf4:	1027883a 	mov	r19,r2
 4018bf8:	400da240 	call	400da24 <__udivsi3>
 4018bfc:	a00b883a 	mov	r5,r20
 4018c00:	1009883a 	mov	r4,r2
 4018c04:	102d883a 	mov	r22,r2
 4018c08:	400dae00 	call	400dae0 <__mulsi3>
 4018c0c:	9826943a 	slli	r19,r19,16
 4018c10:	900ed43a 	srli	r7,r18,16
 4018c14:	d8c00117 	ldw	r3,4(sp)
 4018c18:	3cceb03a 	or	r7,r7,r19
 4018c1c:	3880052e 	bgeu	r7,r2,4018c34 <__udivdi3+0x258>
 4018c20:	3c4f883a 	add	r7,r7,r17
 4018c24:	b13fffc4 	addi	r4,r22,-1
 4018c28:	3c400136 	bltu	r7,r17,4018c30 <__udivdi3+0x254>
 4018c2c:	3880e436 	bltu	r7,r2,4018fc0 <__udivdi3+0x5e4>
 4018c30:	202d883a 	mov	r22,r4
 4018c34:	38a1c83a 	sub	r16,r7,r2
 4018c38:	8009883a 	mov	r4,r16
 4018c3c:	a80b883a 	mov	r5,r21
 4018c40:	d8c00115 	stw	r3,4(sp)
 4018c44:	400da880 	call	400da88 <__umodsi3>
 4018c48:	1027883a 	mov	r19,r2
 4018c4c:	8009883a 	mov	r4,r16
 4018c50:	a80b883a 	mov	r5,r21
 4018c54:	9826943a 	slli	r19,r19,16
 4018c58:	400da240 	call	400da24 <__udivsi3>
 4018c5c:	a00b883a 	mov	r5,r20
 4018c60:	1009883a 	mov	r4,r2
 4018c64:	94bfffcc 	andi	r18,r18,65535
 4018c68:	1021883a 	mov	r16,r2
 4018c6c:	94e4b03a 	or	r18,r18,r19
 4018c70:	400dae00 	call	400dae0 <__mulsi3>
 4018c74:	d8c00117 	ldw	r3,4(sp)
 4018c78:	9080052e 	bgeu	r18,r2,4018c90 <__udivdi3+0x2b4>
 4018c7c:	8ca5883a 	add	r18,r17,r18
 4018c80:	813fffc4 	addi	r4,r16,-1
 4018c84:	9440ad36 	bltu	r18,r17,4018f3c <__udivdi3+0x560>
 4018c88:	9080ac2e 	bgeu	r18,r2,4018f3c <__udivdi3+0x560>
 4018c8c:	843fff84 	addi	r16,r16,-2
 4018c90:	b004943a 	slli	r2,r22,16
 4018c94:	1404b03a 	or	r2,r2,r16
 4018c98:	00000206 	br	4018ca4 <__udivdi3+0x2c8>
 4018c9c:	0007883a 	mov	r3,zero
 4018ca0:	0005883a 	mov	r2,zero
 4018ca4:	dfc00b17 	ldw	ra,44(sp)
 4018ca8:	df000a17 	ldw	fp,40(sp)
 4018cac:	ddc00917 	ldw	r23,36(sp)
 4018cb0:	dd800817 	ldw	r22,32(sp)
 4018cb4:	dd400717 	ldw	r21,28(sp)
 4018cb8:	dd000617 	ldw	r20,24(sp)
 4018cbc:	dcc00517 	ldw	r19,20(sp)
 4018cc0:	dc800417 	ldw	r18,16(sp)
 4018cc4:	dc400317 	ldw	r17,12(sp)
 4018cc8:	dc000217 	ldw	r16,8(sp)
 4018ccc:	dec00c04 	addi	sp,sp,48
 4018cd0:	f800283a 	ret
 4018cd4:	00803fc4 	movi	r2,255
 4018cd8:	11c5803a 	cmpltu	r2,r2,r7
 4018cdc:	100490fa 	slli	r2,r2,3
 4018ce0:	003f9906 	br	4018b48 <__alt_mem_onchip_memory2_0+0xfc0178a8>
 4018ce4:	00803fc4 	movi	r2,255
 4018ce8:	1445803a 	cmpltu	r2,r2,r17
 4018cec:	100490fa 	slli	r2,r2,3
 4018cf0:	003fad06 	br	4018ba8 <__alt_mem_onchip_memory2_0+0xfc017908>
 4018cf4:	00804034 	movhi	r2,256
 4018cf8:	10bfffc4 	addi	r2,r2,-1
 4018cfc:	11809f36 	bltu	r2,r6,4018f7c <__udivdi3+0x5a0>
 4018d00:	00800404 	movi	r2,16
 4018d04:	003f4c06 	br	4018a38 <__alt_mem_onchip_memory2_0+0xfc017798>
 4018d08:	3dce983a 	sll	r7,r7,r23
 4018d0c:	30b8d83a 	srl	fp,r6,r2
 4018d10:	80a2d83a 	srl	r17,r16,r2
 4018d14:	35cc983a 	sll	r6,r6,r23
 4018d18:	3f38b03a 	or	fp,r7,fp
 4018d1c:	e024d43a 	srli	r18,fp,16
 4018d20:	9884d83a 	srl	r2,r19,r2
 4018d24:	85e0983a 	sll	r16,r16,r23
 4018d28:	8809883a 	mov	r4,r17
 4018d2c:	900b883a 	mov	r5,r18
 4018d30:	d9800015 	stw	r6,0(sp)
 4018d34:	1420b03a 	or	r16,r2,r16
 4018d38:	400da880 	call	400da88 <__umodsi3>
 4018d3c:	900b883a 	mov	r5,r18
 4018d40:	8809883a 	mov	r4,r17
 4018d44:	1029883a 	mov	r20,r2
 4018d48:	e5bfffcc 	andi	r22,fp,65535
 4018d4c:	400da240 	call	400da24 <__udivsi3>
 4018d50:	100b883a 	mov	r5,r2
 4018d54:	b009883a 	mov	r4,r22
 4018d58:	102b883a 	mov	r21,r2
 4018d5c:	400dae00 	call	400dae0 <__mulsi3>
 4018d60:	a028943a 	slli	r20,r20,16
 4018d64:	8006d43a 	srli	r3,r16,16
 4018d68:	1d06b03a 	or	r3,r3,r20
 4018d6c:	1880042e 	bgeu	r3,r2,4018d80 <__udivdi3+0x3a4>
 4018d70:	1f07883a 	add	r3,r3,fp
 4018d74:	a93fffc4 	addi	r4,r21,-1
 4018d78:	1f00892e 	bgeu	r3,fp,4018fa0 <__udivdi3+0x5c4>
 4018d7c:	202b883a 	mov	r21,r4
 4018d80:	18a3c83a 	sub	r17,r3,r2
 4018d84:	8809883a 	mov	r4,r17
 4018d88:	900b883a 	mov	r5,r18
 4018d8c:	400da880 	call	400da88 <__umodsi3>
 4018d90:	1029883a 	mov	r20,r2
 4018d94:	8809883a 	mov	r4,r17
 4018d98:	900b883a 	mov	r5,r18
 4018d9c:	a028943a 	slli	r20,r20,16
 4018da0:	400da240 	call	400da24 <__udivsi3>
 4018da4:	100b883a 	mov	r5,r2
 4018da8:	b009883a 	mov	r4,r22
 4018dac:	843fffcc 	andi	r16,r16,65535
 4018db0:	1023883a 	mov	r17,r2
 4018db4:	8520b03a 	or	r16,r16,r20
 4018db8:	400dae00 	call	400dae0 <__mulsi3>
 4018dbc:	8080042e 	bgeu	r16,r2,4018dd0 <__udivdi3+0x3f4>
 4018dc0:	8721883a 	add	r16,r16,fp
 4018dc4:	88ffffc4 	addi	r3,r17,-1
 4018dc8:	8700712e 	bgeu	r16,fp,4018f90 <__udivdi3+0x5b4>
 4018dcc:	1823883a 	mov	r17,r3
 4018dd0:	a80e943a 	slli	r7,r21,16
 4018dd4:	d8c00017 	ldw	r3,0(sp)
 4018dd8:	80a1c83a 	sub	r16,r16,r2
 4018ddc:	3c64b03a 	or	r18,r7,r17
 4018de0:	1d3fffcc 	andi	r20,r3,65535
 4018de4:	9022d43a 	srli	r17,r18,16
 4018de8:	95bfffcc 	andi	r22,r18,65535
 4018dec:	a00b883a 	mov	r5,r20
 4018df0:	b009883a 	mov	r4,r22
 4018df4:	182ad43a 	srli	r21,r3,16
 4018df8:	400dae00 	call	400dae0 <__mulsi3>
 4018dfc:	a00b883a 	mov	r5,r20
 4018e00:	8809883a 	mov	r4,r17
 4018e04:	1039883a 	mov	fp,r2
 4018e08:	400dae00 	call	400dae0 <__mulsi3>
 4018e0c:	8809883a 	mov	r4,r17
 4018e10:	a80b883a 	mov	r5,r21
 4018e14:	1029883a 	mov	r20,r2
 4018e18:	400dae00 	call	400dae0 <__mulsi3>
 4018e1c:	a80b883a 	mov	r5,r21
 4018e20:	b009883a 	mov	r4,r22
 4018e24:	1023883a 	mov	r17,r2
 4018e28:	400dae00 	call	400dae0 <__mulsi3>
 4018e2c:	e006d43a 	srli	r3,fp,16
 4018e30:	1505883a 	add	r2,r2,r20
 4018e34:	1887883a 	add	r3,r3,r2
 4018e38:	1d00022e 	bgeu	r3,r20,4018e44 <__udivdi3+0x468>
 4018e3c:	00800074 	movhi	r2,1
 4018e40:	88a3883a 	add	r17,r17,r2
 4018e44:	1804d43a 	srli	r2,r3,16
 4018e48:	1463883a 	add	r17,r2,r17
 4018e4c:	84404436 	bltu	r16,r17,4018f60 <__udivdi3+0x584>
 4018e50:	84403e26 	beq	r16,r17,4018f4c <__udivdi3+0x570>
 4018e54:	9005883a 	mov	r2,r18
 4018e58:	0007883a 	mov	r3,zero
 4018e5c:	003f9106 	br	4018ca4 <__alt_mem_onchip_memory2_0+0xfc017a04>
 4018e60:	88e2983a 	sll	r17,r17,r3
 4018e64:	80aed83a 	srl	r23,r16,r2
 4018e68:	80e0983a 	sll	r16,r16,r3
 4018e6c:	882ad43a 	srli	r21,r17,16
 4018e70:	9884d83a 	srl	r2,r19,r2
 4018e74:	b809883a 	mov	r4,r23
 4018e78:	a80b883a 	mov	r5,r21
 4018e7c:	98e4983a 	sll	r18,r19,r3
 4018e80:	142cb03a 	or	r22,r2,r16
 4018e84:	400da880 	call	400da88 <__umodsi3>
 4018e88:	b809883a 	mov	r4,r23
 4018e8c:	a80b883a 	mov	r5,r21
 4018e90:	1027883a 	mov	r19,r2
 4018e94:	8d3fffcc 	andi	r20,r17,65535
 4018e98:	400da240 	call	400da24 <__udivsi3>
 4018e9c:	a009883a 	mov	r4,r20
 4018ea0:	100b883a 	mov	r5,r2
 4018ea4:	102f883a 	mov	r23,r2
 4018ea8:	400dae00 	call	400dae0 <__mulsi3>
 4018eac:	9826943a 	slli	r19,r19,16
 4018eb0:	b008d43a 	srli	r4,r22,16
 4018eb4:	24c8b03a 	or	r4,r4,r19
 4018eb8:	2080062e 	bgeu	r4,r2,4018ed4 <__udivdi3+0x4f8>
 4018ebc:	2449883a 	add	r4,r4,r17
 4018ec0:	b8ffffc4 	addi	r3,r23,-1
 4018ec4:	24403c36 	bltu	r4,r17,4018fb8 <__udivdi3+0x5dc>
 4018ec8:	20803b2e 	bgeu	r4,r2,4018fb8 <__udivdi3+0x5dc>
 4018ecc:	bdffff84 	addi	r23,r23,-2
 4018ed0:	2449883a 	add	r4,r4,r17
 4018ed4:	20a1c83a 	sub	r16,r4,r2
 4018ed8:	a80b883a 	mov	r5,r21
 4018edc:	8009883a 	mov	r4,r16
 4018ee0:	400da880 	call	400da88 <__umodsi3>
 4018ee4:	a80b883a 	mov	r5,r21
 4018ee8:	8009883a 	mov	r4,r16
 4018eec:	1027883a 	mov	r19,r2
 4018ef0:	400da240 	call	400da24 <__udivsi3>
 4018ef4:	a009883a 	mov	r4,r20
 4018ef8:	100b883a 	mov	r5,r2
 4018efc:	9826943a 	slli	r19,r19,16
 4018f00:	1039883a 	mov	fp,r2
 4018f04:	400dae00 	call	400dae0 <__mulsi3>
 4018f08:	b13fffcc 	andi	r4,r22,65535
 4018f0c:	24c8b03a 	or	r4,r4,r19
 4018f10:	2080062e 	bgeu	r4,r2,4018f2c <__udivdi3+0x550>
 4018f14:	2449883a 	add	r4,r4,r17
 4018f18:	e0ffffc4 	addi	r3,fp,-1
 4018f1c:	24402436 	bltu	r4,r17,4018fb0 <__udivdi3+0x5d4>
 4018f20:	2080232e 	bgeu	r4,r2,4018fb0 <__udivdi3+0x5d4>
 4018f24:	e73fff84 	addi	fp,fp,-2
 4018f28:	2449883a 	add	r4,r4,r17
 4018f2c:	b82e943a 	slli	r23,r23,16
 4018f30:	20a1c83a 	sub	r16,r4,r2
 4018f34:	bf06b03a 	or	r3,r23,fp
 4018f38:	003f2806 	br	4018bdc <__alt_mem_onchip_memory2_0+0xfc01793c>
 4018f3c:	2021883a 	mov	r16,r4
 4018f40:	003f5306 	br	4018c90 <__alt_mem_onchip_memory2_0+0xfc0179f0>
 4018f44:	1821883a 	mov	r16,r3
 4018f48:	003ef406 	br	4018b1c <__alt_mem_onchip_memory2_0+0xfc01787c>
 4018f4c:	1806943a 	slli	r3,r3,16
 4018f50:	9de6983a 	sll	r19,r19,r23
 4018f54:	e73fffcc 	andi	fp,fp,65535
 4018f58:	1f07883a 	add	r3,r3,fp
 4018f5c:	98ffbd2e 	bgeu	r19,r3,4018e54 <__alt_mem_onchip_memory2_0+0xfc017bb4>
 4018f60:	90bfffc4 	addi	r2,r18,-1
 4018f64:	0007883a 	mov	r3,zero
 4018f68:	003f4e06 	br	4018ca4 <__alt_mem_onchip_memory2_0+0xfc017a04>
 4018f6c:	00800604 	movi	r2,24
 4018f70:	003ef506 	br	4018b48 <__alt_mem_onchip_memory2_0+0xfc0178a8>
 4018f74:	00800604 	movi	r2,24
 4018f78:	003f0b06 	br	4018ba8 <__alt_mem_onchip_memory2_0+0xfc017908>
 4018f7c:	00800604 	movi	r2,24
 4018f80:	003ead06 	br	4018a38 <__alt_mem_onchip_memory2_0+0xfc017798>
 4018f84:	0007883a 	mov	r3,zero
 4018f88:	00800044 	movi	r2,1
 4018f8c:	003f4506 	br	4018ca4 <__alt_mem_onchip_memory2_0+0xfc017a04>
 4018f90:	80bf8e2e 	bgeu	r16,r2,4018dcc <__alt_mem_onchip_memory2_0+0xfc017b2c>
 4018f94:	8c7fff84 	addi	r17,r17,-2
 4018f98:	8721883a 	add	r16,r16,fp
 4018f9c:	003f8c06 	br	4018dd0 <__alt_mem_onchip_memory2_0+0xfc017b30>
 4018fa0:	18bf762e 	bgeu	r3,r2,4018d7c <__alt_mem_onchip_memory2_0+0xfc017adc>
 4018fa4:	ad7fff84 	addi	r21,r21,-2
 4018fa8:	1f07883a 	add	r3,r3,fp
 4018fac:	003f7406 	br	4018d80 <__alt_mem_onchip_memory2_0+0xfc017ae0>
 4018fb0:	1839883a 	mov	fp,r3
 4018fb4:	003fdd06 	br	4018f2c <__alt_mem_onchip_memory2_0+0xfc017c8c>
 4018fb8:	182f883a 	mov	r23,r3
 4018fbc:	003fc506 	br	4018ed4 <__alt_mem_onchip_memory2_0+0xfc017c34>
 4018fc0:	b5bfff84 	addi	r22,r22,-2
 4018fc4:	3c4f883a 	add	r7,r7,r17
 4018fc8:	003f1a06 	br	4018c34 <__alt_mem_onchip_memory2_0+0xfc017994>
 4018fcc:	b5bfff84 	addi	r22,r22,-2
 4018fd0:	1c47883a 	add	r3,r3,r17
 4018fd4:	003ebc06 	br	4018ac8 <__alt_mem_onchip_memory2_0+0xfc017828>

04018fd8 <__umoddi3>:
 4018fd8:	defff304 	addi	sp,sp,-52
 4018fdc:	df000b15 	stw	fp,44(sp)
 4018fe0:	dc400415 	stw	r17,16(sp)
 4018fe4:	dc000315 	stw	r16,12(sp)
 4018fe8:	dfc00c15 	stw	ra,48(sp)
 4018fec:	ddc00a15 	stw	r23,40(sp)
 4018ff0:	dd800915 	stw	r22,36(sp)
 4018ff4:	dd400815 	stw	r21,32(sp)
 4018ff8:	dd000715 	stw	r20,28(sp)
 4018ffc:	dcc00615 	stw	r19,24(sp)
 4019000:	dc800515 	stw	r18,20(sp)
 4019004:	2021883a 	mov	r16,r4
 4019008:	2823883a 	mov	r17,r5
 401900c:	2839883a 	mov	fp,r5
 4019010:	3800401e 	bne	r7,zero,4019114 <__umoddi3+0x13c>
 4019014:	3027883a 	mov	r19,r6
 4019018:	2029883a 	mov	r20,r4
 401901c:	2980552e 	bgeu	r5,r6,4019174 <__umoddi3+0x19c>
 4019020:	00bfffd4 	movui	r2,65535
 4019024:	1180a236 	bltu	r2,r6,40192b0 <__umoddi3+0x2d8>
 4019028:	01003fc4 	movi	r4,255
 401902c:	2189803a 	cmpltu	r4,r4,r6
 4019030:	200890fa 	slli	r4,r4,3
 4019034:	3104d83a 	srl	r2,r6,r4
 4019038:	00c100b4 	movhi	r3,1026
 401903c:	18de5204 	addi	r3,r3,31048
 4019040:	1885883a 	add	r2,r3,r2
 4019044:	10c00003 	ldbu	r3,0(r2)
 4019048:	00800804 	movi	r2,32
 401904c:	1909883a 	add	r4,r3,r4
 4019050:	1125c83a 	sub	r18,r2,r4
 4019054:	90000526 	beq	r18,zero,401906c <__umoddi3+0x94>
 4019058:	8ca2983a 	sll	r17,r17,r18
 401905c:	8108d83a 	srl	r4,r16,r4
 4019060:	34a6983a 	sll	r19,r6,r18
 4019064:	84a8983a 	sll	r20,r16,r18
 4019068:	2478b03a 	or	fp,r4,r17
 401906c:	982cd43a 	srli	r22,r19,16
 4019070:	e009883a 	mov	r4,fp
 4019074:	9dffffcc 	andi	r23,r19,65535
 4019078:	b00b883a 	mov	r5,r22
 401907c:	400da880 	call	400da88 <__umodsi3>
 4019080:	b00b883a 	mov	r5,r22
 4019084:	e009883a 	mov	r4,fp
 4019088:	102b883a 	mov	r21,r2
 401908c:	400da240 	call	400da24 <__udivsi3>
 4019090:	100b883a 	mov	r5,r2
 4019094:	b809883a 	mov	r4,r23
 4019098:	400dae00 	call	400dae0 <__mulsi3>
 401909c:	a82a943a 	slli	r21,r21,16
 40190a0:	a006d43a 	srli	r3,r20,16
 40190a4:	1d46b03a 	or	r3,r3,r21
 40190a8:	1880032e 	bgeu	r3,r2,40190b8 <__umoddi3+0xe0>
 40190ac:	1cc7883a 	add	r3,r3,r19
 40190b0:	1cc00136 	bltu	r3,r19,40190b8 <__umoddi3+0xe0>
 40190b4:	18813136 	bltu	r3,r2,401957c <__umoddi3+0x5a4>
 40190b8:	18a1c83a 	sub	r16,r3,r2
 40190bc:	b00b883a 	mov	r5,r22
 40190c0:	8009883a 	mov	r4,r16
 40190c4:	400da880 	call	400da88 <__umodsi3>
 40190c8:	b00b883a 	mov	r5,r22
 40190cc:	8009883a 	mov	r4,r16
 40190d0:	1023883a 	mov	r17,r2
 40190d4:	400da240 	call	400da24 <__udivsi3>
 40190d8:	100b883a 	mov	r5,r2
 40190dc:	b809883a 	mov	r4,r23
 40190e0:	8822943a 	slli	r17,r17,16
 40190e4:	400dae00 	call	400dae0 <__mulsi3>
 40190e8:	a0ffffcc 	andi	r3,r20,65535
 40190ec:	1c46b03a 	or	r3,r3,r17
 40190f0:	1880042e 	bgeu	r3,r2,4019104 <__umoddi3+0x12c>
 40190f4:	1cc7883a 	add	r3,r3,r19
 40190f8:	1cc00236 	bltu	r3,r19,4019104 <__umoddi3+0x12c>
 40190fc:	1880012e 	bgeu	r3,r2,4019104 <__umoddi3+0x12c>
 4019100:	1cc7883a 	add	r3,r3,r19
 4019104:	1885c83a 	sub	r2,r3,r2
 4019108:	1484d83a 	srl	r2,r2,r18
 401910c:	0007883a 	mov	r3,zero
 4019110:	00005306 	br	4019260 <__umoddi3+0x288>
 4019114:	29c05036 	bltu	r5,r7,4019258 <__umoddi3+0x280>
 4019118:	00bfffd4 	movui	r2,65535
 401911c:	11c05c2e 	bgeu	r2,r7,4019290 <__umoddi3+0x2b8>
 4019120:	00804034 	movhi	r2,256
 4019124:	10bfffc4 	addi	r2,r2,-1
 4019128:	11c10636 	bltu	r2,r7,4019544 <__umoddi3+0x56c>
 401912c:	01000404 	movi	r4,16
 4019130:	3904d83a 	srl	r2,r7,r4
 4019134:	00c100b4 	movhi	r3,1026
 4019138:	18de5204 	addi	r3,r3,31048
 401913c:	1885883a 	add	r2,r3,r2
 4019140:	14c00003 	ldbu	r19,0(r2)
 4019144:	00c00804 	movi	r3,32
 4019148:	9927883a 	add	r19,r19,r4
 401914c:	1ce9c83a 	sub	r20,r3,r19
 4019150:	a0005c1e 	bne	r20,zero,40192c4 <__umoddi3+0x2ec>
 4019154:	3c400136 	bltu	r7,r17,401915c <__umoddi3+0x184>
 4019158:	81810a36 	bltu	r16,r6,4019584 <__umoddi3+0x5ac>
 401915c:	8185c83a 	sub	r2,r16,r6
 4019160:	89e3c83a 	sub	r17,r17,r7
 4019164:	8089803a 	cmpltu	r4,r16,r2
 4019168:	8939c83a 	sub	fp,r17,r4
 401916c:	e007883a 	mov	r3,fp
 4019170:	00003b06 	br	4019260 <__umoddi3+0x288>
 4019174:	3000041e 	bne	r6,zero,4019188 <__umoddi3+0x1b0>
 4019178:	000b883a 	mov	r5,zero
 401917c:	01000044 	movi	r4,1
 4019180:	400da240 	call	400da24 <__udivsi3>
 4019184:	1027883a 	mov	r19,r2
 4019188:	00bfffd4 	movui	r2,65535
 401918c:	14c0442e 	bgeu	r2,r19,40192a0 <__umoddi3+0x2c8>
 4019190:	00804034 	movhi	r2,256
 4019194:	10bfffc4 	addi	r2,r2,-1
 4019198:	14c0ec36 	bltu	r2,r19,401954c <__umoddi3+0x574>
 401919c:	00800404 	movi	r2,16
 40191a0:	9886d83a 	srl	r3,r19,r2
 40191a4:	010100b4 	movhi	r4,1026
 40191a8:	211e5204 	addi	r4,r4,31048
 40191ac:	20c7883a 	add	r3,r4,r3
 40191b0:	18c00003 	ldbu	r3,0(r3)
 40191b4:	1887883a 	add	r3,r3,r2
 40191b8:	00800804 	movi	r2,32
 40191bc:	10e5c83a 	sub	r18,r2,r3
 40191c0:	9000ab1e 	bne	r18,zero,4019470 <__umoddi3+0x498>
 40191c4:	982cd43a 	srli	r22,r19,16
 40191c8:	8ce3c83a 	sub	r17,r17,r19
 40191cc:	9dffffcc 	andi	r23,r19,65535
 40191d0:	b00b883a 	mov	r5,r22
 40191d4:	8809883a 	mov	r4,r17
 40191d8:	400da880 	call	400da88 <__umodsi3>
 40191dc:	b00b883a 	mov	r5,r22
 40191e0:	8809883a 	mov	r4,r17
 40191e4:	102b883a 	mov	r21,r2
 40191e8:	400da240 	call	400da24 <__udivsi3>
 40191ec:	b80b883a 	mov	r5,r23
 40191f0:	1009883a 	mov	r4,r2
 40191f4:	400dae00 	call	400dae0 <__mulsi3>
 40191f8:	a82a943a 	slli	r21,r21,16
 40191fc:	a006d43a 	srli	r3,r20,16
 4019200:	1d46b03a 	or	r3,r3,r21
 4019204:	1880042e 	bgeu	r3,r2,4019218 <__umoddi3+0x240>
 4019208:	1cc7883a 	add	r3,r3,r19
 401920c:	1cc00236 	bltu	r3,r19,4019218 <__umoddi3+0x240>
 4019210:	1880012e 	bgeu	r3,r2,4019218 <__umoddi3+0x240>
 4019214:	1cc7883a 	add	r3,r3,r19
 4019218:	18a1c83a 	sub	r16,r3,r2
 401921c:	b00b883a 	mov	r5,r22
 4019220:	8009883a 	mov	r4,r16
 4019224:	400da880 	call	400da88 <__umodsi3>
 4019228:	1023883a 	mov	r17,r2
 401922c:	b00b883a 	mov	r5,r22
 4019230:	8009883a 	mov	r4,r16
 4019234:	400da240 	call	400da24 <__udivsi3>
 4019238:	8822943a 	slli	r17,r17,16
 401923c:	b80b883a 	mov	r5,r23
 4019240:	1009883a 	mov	r4,r2
 4019244:	400dae00 	call	400dae0 <__mulsi3>
 4019248:	a53fffcc 	andi	r20,r20,65535
 401924c:	a446b03a 	or	r3,r20,r17
 4019250:	18bfac2e 	bgeu	r3,r2,4019104 <__alt_mem_onchip_memory2_0+0xfc017e64>
 4019254:	003fa706 	br	40190f4 <__alt_mem_onchip_memory2_0+0xfc017e54>
 4019258:	2005883a 	mov	r2,r4
 401925c:	2807883a 	mov	r3,r5
 4019260:	dfc00c17 	ldw	ra,48(sp)
 4019264:	df000b17 	ldw	fp,44(sp)
 4019268:	ddc00a17 	ldw	r23,40(sp)
 401926c:	dd800917 	ldw	r22,36(sp)
 4019270:	dd400817 	ldw	r21,32(sp)
 4019274:	dd000717 	ldw	r20,28(sp)
 4019278:	dcc00617 	ldw	r19,24(sp)
 401927c:	dc800517 	ldw	r18,20(sp)
 4019280:	dc400417 	ldw	r17,16(sp)
 4019284:	dc000317 	ldw	r16,12(sp)
 4019288:	dec00d04 	addi	sp,sp,52
 401928c:	f800283a 	ret
 4019290:	04c03fc4 	movi	r19,255
 4019294:	99c9803a 	cmpltu	r4,r19,r7
 4019298:	200890fa 	slli	r4,r4,3
 401929c:	003fa406 	br	4019130 <__alt_mem_onchip_memory2_0+0xfc017e90>
 40192a0:	00803fc4 	movi	r2,255
 40192a4:	14c5803a 	cmpltu	r2,r2,r19
 40192a8:	100490fa 	slli	r2,r2,3
 40192ac:	003fbc06 	br	40191a0 <__alt_mem_onchip_memory2_0+0xfc017f00>
 40192b0:	00804034 	movhi	r2,256
 40192b4:	10bfffc4 	addi	r2,r2,-1
 40192b8:	1180a636 	bltu	r2,r6,4019554 <__umoddi3+0x57c>
 40192bc:	01000404 	movi	r4,16
 40192c0:	003f5c06 	br	4019034 <__alt_mem_onchip_memory2_0+0xfc017d94>
 40192c4:	3d0e983a 	sll	r7,r7,r20
 40192c8:	34ead83a 	srl	r21,r6,r19
 40192cc:	8cc6d83a 	srl	r3,r17,r19
 40192d0:	8d10983a 	sll	r8,r17,r20
 40192d4:	3d6ab03a 	or	r21,r7,r21
 40192d8:	a82cd43a 	srli	r22,r21,16
 40192dc:	84e2d83a 	srl	r17,r16,r19
 40192e0:	1809883a 	mov	r4,r3
 40192e4:	b00b883a 	mov	r5,r22
 40192e8:	8a22b03a 	or	r17,r17,r8
 40192ec:	3524983a 	sll	r18,r6,r20
 40192f0:	dc400015 	stw	r17,0(sp)
 40192f4:	d8c00115 	stw	r3,4(sp)
 40192f8:	400da880 	call	400da88 <__umodsi3>
 40192fc:	d8c00117 	ldw	r3,4(sp)
 4019300:	b00b883a 	mov	r5,r22
 4019304:	1039883a 	mov	fp,r2
 4019308:	1809883a 	mov	r4,r3
 401930c:	400da240 	call	400da24 <__udivsi3>
 4019310:	adffffcc 	andi	r23,r21,65535
 4019314:	100b883a 	mov	r5,r2
 4019318:	b809883a 	mov	r4,r23
 401931c:	1023883a 	mov	r17,r2
 4019320:	400dae00 	call	400dae0 <__mulsi3>
 4019324:	d9400017 	ldw	r5,0(sp)
 4019328:	e008943a 	slli	r4,fp,16
 401932c:	8520983a 	sll	r16,r16,r20
 4019330:	2806d43a 	srli	r3,r5,16
 4019334:	1906b03a 	or	r3,r3,r4
 4019338:	1880042e 	bgeu	r3,r2,401934c <__umoddi3+0x374>
 401933c:	1d47883a 	add	r3,r3,r21
 4019340:	893fffc4 	addi	r4,r17,-1
 4019344:	1d40892e 	bgeu	r3,r21,401956c <__umoddi3+0x594>
 4019348:	2023883a 	mov	r17,r4
 401934c:	18b9c83a 	sub	fp,r3,r2
 4019350:	b00b883a 	mov	r5,r22
 4019354:	e009883a 	mov	r4,fp
 4019358:	400da880 	call	400da88 <__umodsi3>
 401935c:	b00b883a 	mov	r5,r22
 4019360:	e009883a 	mov	r4,fp
 4019364:	d8800215 	stw	r2,8(sp)
 4019368:	400da240 	call	400da24 <__udivsi3>
 401936c:	100b883a 	mov	r5,r2
 4019370:	b809883a 	mov	r4,r23
 4019374:	102d883a 	mov	r22,r2
 4019378:	400dae00 	call	400dae0 <__mulsi3>
 401937c:	d9800217 	ldw	r6,8(sp)
 4019380:	d8c00017 	ldw	r3,0(sp)
 4019384:	300c943a 	slli	r6,r6,16
 4019388:	1a3fffcc 	andi	r8,r3,65535
 401938c:	4190b03a 	or	r8,r8,r6
 4019390:	4080042e 	bgeu	r8,r2,40193a4 <__umoddi3+0x3cc>
 4019394:	4551883a 	add	r8,r8,r21
 4019398:	b0ffffc4 	addi	r3,r22,-1
 401939c:	45406f2e 	bgeu	r8,r21,401955c <__umoddi3+0x584>
 40193a0:	182d883a 	mov	r22,r3
 40193a4:	880e943a 	slli	r7,r17,16
 40193a8:	9006d43a 	srli	r3,r18,16
 40193ac:	91bfffcc 	andi	r6,r18,65535
 40193b0:	3dacb03a 	or	r22,r7,r22
 40193b4:	b02ed43a 	srli	r23,r22,16
 40193b8:	b5bfffcc 	andi	r22,r22,65535
 40193bc:	300b883a 	mov	r5,r6
 40193c0:	b009883a 	mov	r4,r22
 40193c4:	40a3c83a 	sub	r17,r8,r2
 40193c8:	d8c00115 	stw	r3,4(sp)
 40193cc:	d9800215 	stw	r6,8(sp)
 40193d0:	400dae00 	call	400dae0 <__mulsi3>
 40193d4:	d9800217 	ldw	r6,8(sp)
 40193d8:	b809883a 	mov	r4,r23
 40193dc:	1039883a 	mov	fp,r2
 40193e0:	300b883a 	mov	r5,r6
 40193e4:	400dae00 	call	400dae0 <__mulsi3>
 40193e8:	d8c00117 	ldw	r3,4(sp)
 40193ec:	b809883a 	mov	r4,r23
 40193f0:	d8800215 	stw	r2,8(sp)
 40193f4:	180b883a 	mov	r5,r3
 40193f8:	400dae00 	call	400dae0 <__mulsi3>
 40193fc:	d8c00117 	ldw	r3,4(sp)
 4019400:	b009883a 	mov	r4,r22
 4019404:	102f883a 	mov	r23,r2
 4019408:	180b883a 	mov	r5,r3
 401940c:	400dae00 	call	400dae0 <__mulsi3>
 4019410:	d9800217 	ldw	r6,8(sp)
 4019414:	e006d43a 	srli	r3,fp,16
 4019418:	1185883a 	add	r2,r2,r6
 401941c:	1885883a 	add	r2,r3,r2
 4019420:	1180022e 	bgeu	r2,r6,401942c <__umoddi3+0x454>
 4019424:	00c00074 	movhi	r3,1
 4019428:	b8ef883a 	add	r23,r23,r3
 401942c:	1006d43a 	srli	r3,r2,16
 4019430:	1004943a 	slli	r2,r2,16
 4019434:	e73fffcc 	andi	fp,fp,65535
 4019438:	1dc7883a 	add	r3,r3,r23
 401943c:	1739883a 	add	fp,r2,fp
 4019440:	88c03a36 	bltu	r17,r3,401952c <__umoddi3+0x554>
 4019444:	88c05126 	beq	r17,r3,401958c <__umoddi3+0x5b4>
 4019448:	88c9c83a 	sub	r4,r17,r3
 401944c:	e00f883a 	mov	r7,fp
 4019450:	81cfc83a 	sub	r7,r16,r7
 4019454:	81c7803a 	cmpltu	r3,r16,r7
 4019458:	20c7c83a 	sub	r3,r4,r3
 401945c:	1cc4983a 	sll	r2,r3,r19
 4019460:	3d0ed83a 	srl	r7,r7,r20
 4019464:	1d06d83a 	srl	r3,r3,r20
 4019468:	11c4b03a 	or	r2,r2,r7
 401946c:	003f7c06 	br	4019260 <__alt_mem_onchip_memory2_0+0xfc017fc0>
 4019470:	9ca6983a 	sll	r19,r19,r18
 4019474:	88f8d83a 	srl	fp,r17,r3
 4019478:	80c4d83a 	srl	r2,r16,r3
 401947c:	982cd43a 	srli	r22,r19,16
 4019480:	8ca2983a 	sll	r17,r17,r18
 4019484:	e009883a 	mov	r4,fp
 4019488:	b00b883a 	mov	r5,r22
 401948c:	146ab03a 	or	r21,r2,r17
 4019490:	400da880 	call	400da88 <__umodsi3>
 4019494:	b00b883a 	mov	r5,r22
 4019498:	e009883a 	mov	r4,fp
 401949c:	1029883a 	mov	r20,r2
 40194a0:	9dffffcc 	andi	r23,r19,65535
 40194a4:	400da240 	call	400da24 <__udivsi3>
 40194a8:	b809883a 	mov	r4,r23
 40194ac:	100b883a 	mov	r5,r2
 40194b0:	400dae00 	call	400dae0 <__mulsi3>
 40194b4:	a008943a 	slli	r4,r20,16
 40194b8:	a806d43a 	srli	r3,r21,16
 40194bc:	84a8983a 	sll	r20,r16,r18
 40194c0:	1906b03a 	or	r3,r3,r4
 40194c4:	1880042e 	bgeu	r3,r2,40194d8 <__umoddi3+0x500>
 40194c8:	1cc7883a 	add	r3,r3,r19
 40194cc:	1cc00236 	bltu	r3,r19,40194d8 <__umoddi3+0x500>
 40194d0:	1880012e 	bgeu	r3,r2,40194d8 <__umoddi3+0x500>
 40194d4:	1cc7883a 	add	r3,r3,r19
 40194d8:	18a3c83a 	sub	r17,r3,r2
 40194dc:	b00b883a 	mov	r5,r22
 40194e0:	8809883a 	mov	r4,r17
 40194e4:	400da880 	call	400da88 <__umodsi3>
 40194e8:	b00b883a 	mov	r5,r22
 40194ec:	8809883a 	mov	r4,r17
 40194f0:	1021883a 	mov	r16,r2
 40194f4:	400da240 	call	400da24 <__udivsi3>
 40194f8:	100b883a 	mov	r5,r2
 40194fc:	b809883a 	mov	r4,r23
 4019500:	8020943a 	slli	r16,r16,16
 4019504:	400dae00 	call	400dae0 <__mulsi3>
 4019508:	a8ffffcc 	andi	r3,r21,65535
 401950c:	1c06b03a 	or	r3,r3,r16
 4019510:	1880042e 	bgeu	r3,r2,4019524 <__umoddi3+0x54c>
 4019514:	1cc7883a 	add	r3,r3,r19
 4019518:	1cc00236 	bltu	r3,r19,4019524 <__umoddi3+0x54c>
 401951c:	1880012e 	bgeu	r3,r2,4019524 <__umoddi3+0x54c>
 4019520:	1cc7883a 	add	r3,r3,r19
 4019524:	18a3c83a 	sub	r17,r3,r2
 4019528:	003f2906 	br	40191d0 <__alt_mem_onchip_memory2_0+0xfc017f30>
 401952c:	e48fc83a 	sub	r7,fp,r18
 4019530:	1d49c83a 	sub	r4,r3,r21
 4019534:	e1f9803a 	cmpltu	fp,fp,r7
 4019538:	2739c83a 	sub	fp,r4,fp
 401953c:	8f09c83a 	sub	r4,r17,fp
 4019540:	003fc306 	br	4019450 <__alt_mem_onchip_memory2_0+0xfc0181b0>
 4019544:	01000604 	movi	r4,24
 4019548:	003ef906 	br	4019130 <__alt_mem_onchip_memory2_0+0xfc017e90>
 401954c:	00800604 	movi	r2,24
 4019550:	003f1306 	br	40191a0 <__alt_mem_onchip_memory2_0+0xfc017f00>
 4019554:	01000604 	movi	r4,24
 4019558:	003eb606 	br	4019034 <__alt_mem_onchip_memory2_0+0xfc017d94>
 401955c:	40bf902e 	bgeu	r8,r2,40193a0 <__alt_mem_onchip_memory2_0+0xfc018100>
 4019560:	b5bfff84 	addi	r22,r22,-2
 4019564:	4551883a 	add	r8,r8,r21
 4019568:	003f8e06 	br	40193a4 <__alt_mem_onchip_memory2_0+0xfc018104>
 401956c:	18bf762e 	bgeu	r3,r2,4019348 <__alt_mem_onchip_memory2_0+0xfc0180a8>
 4019570:	8c7fff84 	addi	r17,r17,-2
 4019574:	1d47883a 	add	r3,r3,r21
 4019578:	003f7406 	br	401934c <__alt_mem_onchip_memory2_0+0xfc0180ac>
 401957c:	1cc7883a 	add	r3,r3,r19
 4019580:	003ecd06 	br	40190b8 <__alt_mem_onchip_memory2_0+0xfc017e18>
 4019584:	8005883a 	mov	r2,r16
 4019588:	003ef806 	br	401916c <__alt_mem_onchip_memory2_0+0xfc017ecc>
 401958c:	873fe736 	bltu	r16,fp,401952c <__alt_mem_onchip_memory2_0+0xfc01828c>
 4019590:	e00f883a 	mov	r7,fp
 4019594:	0009883a 	mov	r4,zero
 4019598:	003fad06 	br	4019450 <__alt_mem_onchip_memory2_0+0xfc0181b0>

0401959c <__adddf3>:
 401959c:	02c00434 	movhi	r11,16
 40195a0:	5affffc4 	addi	r11,r11,-1
 40195a4:	2806d7fa 	srli	r3,r5,31
 40195a8:	2ad4703a 	and	r10,r5,r11
 40195ac:	3ad2703a 	and	r9,r7,r11
 40195b0:	3804d53a 	srli	r2,r7,20
 40195b4:	3018d77a 	srli	r12,r6,29
 40195b8:	280ad53a 	srli	r5,r5,20
 40195bc:	501490fa 	slli	r10,r10,3
 40195c0:	2010d77a 	srli	r8,r4,29
 40195c4:	481290fa 	slli	r9,r9,3
 40195c8:	380ed7fa 	srli	r7,r7,31
 40195cc:	defffb04 	addi	sp,sp,-20
 40195d0:	dc800215 	stw	r18,8(sp)
 40195d4:	dc400115 	stw	r17,4(sp)
 40195d8:	dc000015 	stw	r16,0(sp)
 40195dc:	dfc00415 	stw	ra,16(sp)
 40195e0:	dcc00315 	stw	r19,12(sp)
 40195e4:	1c803fcc 	andi	r18,r3,255
 40195e8:	2c01ffcc 	andi	r16,r5,2047
 40195ec:	5210b03a 	or	r8,r10,r8
 40195f0:	202290fa 	slli	r17,r4,3
 40195f4:	1081ffcc 	andi	r2,r2,2047
 40195f8:	4b12b03a 	or	r9,r9,r12
 40195fc:	300c90fa 	slli	r6,r6,3
 4019600:	91c07526 	beq	r18,r7,40197d8 <__adddf3+0x23c>
 4019604:	8087c83a 	sub	r3,r16,r2
 4019608:	00c0ab0e 	bge	zero,r3,40198b8 <__adddf3+0x31c>
 401960c:	10002a1e 	bne	r2,zero,40196b8 <__adddf3+0x11c>
 4019610:	4984b03a 	or	r2,r9,r6
 4019614:	1000961e 	bne	r2,zero,4019870 <__adddf3+0x2d4>
 4019618:	888001cc 	andi	r2,r17,7
 401961c:	10000726 	beq	r2,zero,401963c <__adddf3+0xa0>
 4019620:	888003cc 	andi	r2,r17,15
 4019624:	00c00104 	movi	r3,4
 4019628:	10c00426 	beq	r2,r3,401963c <__adddf3+0xa0>
 401962c:	88c7883a 	add	r3,r17,r3
 4019630:	1c63803a 	cmpltu	r17,r3,r17
 4019634:	4451883a 	add	r8,r8,r17
 4019638:	1823883a 	mov	r17,r3
 401963c:	4080202c 	andhi	r2,r8,128
 4019640:	10005926 	beq	r2,zero,40197a8 <__adddf3+0x20c>
 4019644:	84000044 	addi	r16,r16,1
 4019648:	0081ffc4 	movi	r2,2047
 401964c:	8080ba26 	beq	r16,r2,4019938 <__adddf3+0x39c>
 4019650:	00bfe034 	movhi	r2,65408
 4019654:	10bfffc4 	addi	r2,r2,-1
 4019658:	4090703a 	and	r8,r8,r2
 401965c:	4004977a 	slli	r2,r8,29
 4019660:	4010927a 	slli	r8,r8,9
 4019664:	8822d0fa 	srli	r17,r17,3
 4019668:	8401ffcc 	andi	r16,r16,2047
 401966c:	4010d33a 	srli	r8,r8,12
 4019670:	9007883a 	mov	r3,r18
 4019674:	1444b03a 	or	r2,r2,r17
 4019678:	8401ffcc 	andi	r16,r16,2047
 401967c:	8020953a 	slli	r16,r16,20
 4019680:	18c03fcc 	andi	r3,r3,255
 4019684:	01000434 	movhi	r4,16
 4019688:	213fffc4 	addi	r4,r4,-1
 401968c:	180697fa 	slli	r3,r3,31
 4019690:	4110703a 	and	r8,r8,r4
 4019694:	4410b03a 	or	r8,r8,r16
 4019698:	40c6b03a 	or	r3,r8,r3
 401969c:	dfc00417 	ldw	ra,16(sp)
 40196a0:	dcc00317 	ldw	r19,12(sp)
 40196a4:	dc800217 	ldw	r18,8(sp)
 40196a8:	dc400117 	ldw	r17,4(sp)
 40196ac:	dc000017 	ldw	r16,0(sp)
 40196b0:	dec00504 	addi	sp,sp,20
 40196b4:	f800283a 	ret
 40196b8:	0081ffc4 	movi	r2,2047
 40196bc:	80bfd626 	beq	r16,r2,4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 40196c0:	4a402034 	orhi	r9,r9,128
 40196c4:	00800e04 	movi	r2,56
 40196c8:	10c09f16 	blt	r2,r3,4019948 <__adddf3+0x3ac>
 40196cc:	008007c4 	movi	r2,31
 40196d0:	10c0c216 	blt	r2,r3,40199dc <__adddf3+0x440>
 40196d4:	00800804 	movi	r2,32
 40196d8:	10c5c83a 	sub	r2,r2,r3
 40196dc:	488a983a 	sll	r5,r9,r2
 40196e0:	30c8d83a 	srl	r4,r6,r3
 40196e4:	3084983a 	sll	r2,r6,r2
 40196e8:	48c6d83a 	srl	r3,r9,r3
 40196ec:	290cb03a 	or	r6,r5,r4
 40196f0:	1004c03a 	cmpne	r2,r2,zero
 40196f4:	308cb03a 	or	r6,r6,r2
 40196f8:	898dc83a 	sub	r6,r17,r6
 40196fc:	89a3803a 	cmpltu	r17,r17,r6
 4019700:	40d1c83a 	sub	r8,r8,r3
 4019704:	4451c83a 	sub	r8,r8,r17
 4019708:	3023883a 	mov	r17,r6
 401970c:	4080202c 	andhi	r2,r8,128
 4019710:	10002326 	beq	r2,zero,40197a0 <__adddf3+0x204>
 4019714:	04c02034 	movhi	r19,128
 4019718:	9cffffc4 	addi	r19,r19,-1
 401971c:	44e6703a 	and	r19,r8,r19
 4019720:	98007626 	beq	r19,zero,40198fc <__adddf3+0x360>
 4019724:	9809883a 	mov	r4,r19
 4019728:	400eb580 	call	400eb58 <__clzsi2>
 401972c:	10fffe04 	addi	r3,r2,-8
 4019730:	010007c4 	movi	r4,31
 4019734:	20c07716 	blt	r4,r3,4019914 <__adddf3+0x378>
 4019738:	00800804 	movi	r2,32
 401973c:	10c5c83a 	sub	r2,r2,r3
 4019740:	8884d83a 	srl	r2,r17,r2
 4019744:	98d0983a 	sll	r8,r19,r3
 4019748:	88e2983a 	sll	r17,r17,r3
 401974c:	1204b03a 	or	r2,r2,r8
 4019750:	1c007416 	blt	r3,r16,4019924 <__adddf3+0x388>
 4019754:	1c21c83a 	sub	r16,r3,r16
 4019758:	82000044 	addi	r8,r16,1
 401975c:	00c007c4 	movi	r3,31
 4019760:	1a009116 	blt	r3,r8,40199a8 <__adddf3+0x40c>
 4019764:	00c00804 	movi	r3,32
 4019768:	1a07c83a 	sub	r3,r3,r8
 401976c:	8a08d83a 	srl	r4,r17,r8
 4019770:	88e2983a 	sll	r17,r17,r3
 4019774:	10c6983a 	sll	r3,r2,r3
 4019778:	1210d83a 	srl	r8,r2,r8
 401977c:	8804c03a 	cmpne	r2,r17,zero
 4019780:	1906b03a 	or	r3,r3,r4
 4019784:	18a2b03a 	or	r17,r3,r2
 4019788:	0021883a 	mov	r16,zero
 401978c:	003fa206 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019790:	1890b03a 	or	r8,r3,r2
 4019794:	40017d26 	beq	r8,zero,4019d8c <__adddf3+0x7f0>
 4019798:	1011883a 	mov	r8,r2
 401979c:	1823883a 	mov	r17,r3
 40197a0:	888001cc 	andi	r2,r17,7
 40197a4:	103f9e1e 	bne	r2,zero,4019620 <__alt_mem_onchip_memory2_0+0xfc018380>
 40197a8:	4004977a 	slli	r2,r8,29
 40197ac:	8822d0fa 	srli	r17,r17,3
 40197b0:	4010d0fa 	srli	r8,r8,3
 40197b4:	9007883a 	mov	r3,r18
 40197b8:	1444b03a 	or	r2,r2,r17
 40197bc:	0101ffc4 	movi	r4,2047
 40197c0:	81002426 	beq	r16,r4,4019854 <__adddf3+0x2b8>
 40197c4:	8120703a 	and	r16,r16,r4
 40197c8:	01000434 	movhi	r4,16
 40197cc:	213fffc4 	addi	r4,r4,-1
 40197d0:	4110703a 	and	r8,r8,r4
 40197d4:	003fa806 	br	4019678 <__alt_mem_onchip_memory2_0+0xfc0183d8>
 40197d8:	8089c83a 	sub	r4,r16,r2
 40197dc:	01005e0e 	bge	zero,r4,4019958 <__adddf3+0x3bc>
 40197e0:	10002b26 	beq	r2,zero,4019890 <__adddf3+0x2f4>
 40197e4:	0081ffc4 	movi	r2,2047
 40197e8:	80bf8b26 	beq	r16,r2,4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 40197ec:	4a402034 	orhi	r9,r9,128
 40197f0:	00800e04 	movi	r2,56
 40197f4:	1100a40e 	bge	r2,r4,4019a88 <__adddf3+0x4ec>
 40197f8:	498cb03a 	or	r6,r9,r6
 40197fc:	300ac03a 	cmpne	r5,r6,zero
 4019800:	0013883a 	mov	r9,zero
 4019804:	2c4b883a 	add	r5,r5,r17
 4019808:	2c63803a 	cmpltu	r17,r5,r17
 401980c:	4a11883a 	add	r8,r9,r8
 4019810:	8a11883a 	add	r8,r17,r8
 4019814:	2823883a 	mov	r17,r5
 4019818:	4080202c 	andhi	r2,r8,128
 401981c:	103fe026 	beq	r2,zero,40197a0 <__alt_mem_onchip_memory2_0+0xfc018500>
 4019820:	84000044 	addi	r16,r16,1
 4019824:	0081ffc4 	movi	r2,2047
 4019828:	8080d226 	beq	r16,r2,4019b74 <__adddf3+0x5d8>
 401982c:	00bfe034 	movhi	r2,65408
 4019830:	10bfffc4 	addi	r2,r2,-1
 4019834:	4090703a 	and	r8,r8,r2
 4019838:	880ad07a 	srli	r5,r17,1
 401983c:	400897fa 	slli	r4,r8,31
 4019840:	88c0004c 	andi	r3,r17,1
 4019844:	28e2b03a 	or	r17,r5,r3
 4019848:	4010d07a 	srli	r8,r8,1
 401984c:	2462b03a 	or	r17,r4,r17
 4019850:	003f7106 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019854:	4088b03a 	or	r4,r8,r2
 4019858:	20014526 	beq	r4,zero,4019d70 <__adddf3+0x7d4>
 401985c:	01000434 	movhi	r4,16
 4019860:	42000234 	orhi	r8,r8,8
 4019864:	213fffc4 	addi	r4,r4,-1
 4019868:	4110703a 	and	r8,r8,r4
 401986c:	003f8206 	br	4019678 <__alt_mem_onchip_memory2_0+0xfc0183d8>
 4019870:	18ffffc4 	addi	r3,r3,-1
 4019874:	1800491e 	bne	r3,zero,401999c <__adddf3+0x400>
 4019878:	898bc83a 	sub	r5,r17,r6
 401987c:	8963803a 	cmpltu	r17,r17,r5
 4019880:	4251c83a 	sub	r8,r8,r9
 4019884:	4451c83a 	sub	r8,r8,r17
 4019888:	2823883a 	mov	r17,r5
 401988c:	003f9f06 	br	401970c <__alt_mem_onchip_memory2_0+0xfc01846c>
 4019890:	4984b03a 	or	r2,r9,r6
 4019894:	103f6026 	beq	r2,zero,4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019898:	213fffc4 	addi	r4,r4,-1
 401989c:	2000931e 	bne	r4,zero,4019aec <__adddf3+0x550>
 40198a0:	898d883a 	add	r6,r17,r6
 40198a4:	3463803a 	cmpltu	r17,r6,r17
 40198a8:	4251883a 	add	r8,r8,r9
 40198ac:	8a11883a 	add	r8,r17,r8
 40198b0:	3023883a 	mov	r17,r6
 40198b4:	003fd806 	br	4019818 <__alt_mem_onchip_memory2_0+0xfc018578>
 40198b8:	1800541e 	bne	r3,zero,4019a0c <__adddf3+0x470>
 40198bc:	80800044 	addi	r2,r16,1
 40198c0:	1081ffcc 	andi	r2,r2,2047
 40198c4:	00c00044 	movi	r3,1
 40198c8:	1880a00e 	bge	r3,r2,4019b4c <__adddf3+0x5b0>
 40198cc:	8989c83a 	sub	r4,r17,r6
 40198d0:	8905803a 	cmpltu	r2,r17,r4
 40198d4:	4267c83a 	sub	r19,r8,r9
 40198d8:	98a7c83a 	sub	r19,r19,r2
 40198dc:	9880202c 	andhi	r2,r19,128
 40198e0:	10006326 	beq	r2,zero,4019a70 <__adddf3+0x4d4>
 40198e4:	3463c83a 	sub	r17,r6,r17
 40198e8:	4a07c83a 	sub	r3,r9,r8
 40198ec:	344d803a 	cmpltu	r6,r6,r17
 40198f0:	19a7c83a 	sub	r19,r3,r6
 40198f4:	3825883a 	mov	r18,r7
 40198f8:	983f8a1e 	bne	r19,zero,4019724 <__alt_mem_onchip_memory2_0+0xfc018484>
 40198fc:	8809883a 	mov	r4,r17
 4019900:	400eb580 	call	400eb58 <__clzsi2>
 4019904:	10800804 	addi	r2,r2,32
 4019908:	10fffe04 	addi	r3,r2,-8
 401990c:	010007c4 	movi	r4,31
 4019910:	20ff890e 	bge	r4,r3,4019738 <__alt_mem_onchip_memory2_0+0xfc018498>
 4019914:	10bff604 	addi	r2,r2,-40
 4019918:	8884983a 	sll	r2,r17,r2
 401991c:	0023883a 	mov	r17,zero
 4019920:	1c3f8c0e 	bge	r3,r16,4019754 <__alt_mem_onchip_memory2_0+0xfc0184b4>
 4019924:	023fe034 	movhi	r8,65408
 4019928:	423fffc4 	addi	r8,r8,-1
 401992c:	80e1c83a 	sub	r16,r16,r3
 4019930:	1210703a 	and	r8,r2,r8
 4019934:	003f3806 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019938:	9007883a 	mov	r3,r18
 401993c:	0011883a 	mov	r8,zero
 4019940:	0005883a 	mov	r2,zero
 4019944:	003f4c06 	br	4019678 <__alt_mem_onchip_memory2_0+0xfc0183d8>
 4019948:	498cb03a 	or	r6,r9,r6
 401994c:	300cc03a 	cmpne	r6,r6,zero
 4019950:	0007883a 	mov	r3,zero
 4019954:	003f6806 	br	40196f8 <__alt_mem_onchip_memory2_0+0xfc018458>
 4019958:	20009c1e 	bne	r4,zero,4019bcc <__adddf3+0x630>
 401995c:	80800044 	addi	r2,r16,1
 4019960:	1141ffcc 	andi	r5,r2,2047
 4019964:	01000044 	movi	r4,1
 4019968:	2140670e 	bge	r4,r5,4019b08 <__adddf3+0x56c>
 401996c:	0101ffc4 	movi	r4,2047
 4019970:	11007f26 	beq	r2,r4,4019b70 <__adddf3+0x5d4>
 4019974:	898d883a 	add	r6,r17,r6
 4019978:	4247883a 	add	r3,r8,r9
 401997c:	3451803a 	cmpltu	r8,r6,r17
 4019980:	40d1883a 	add	r8,r8,r3
 4019984:	402297fa 	slli	r17,r8,31
 4019988:	300cd07a 	srli	r6,r6,1
 401998c:	4010d07a 	srli	r8,r8,1
 4019990:	1021883a 	mov	r16,r2
 4019994:	89a2b03a 	or	r17,r17,r6
 4019998:	003f1f06 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 401999c:	0081ffc4 	movi	r2,2047
 40199a0:	80bf481e 	bne	r16,r2,40196c4 <__alt_mem_onchip_memory2_0+0xfc018424>
 40199a4:	003f1c06 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 40199a8:	843ff844 	addi	r16,r16,-31
 40199ac:	01000804 	movi	r4,32
 40199b0:	1406d83a 	srl	r3,r2,r16
 40199b4:	41005026 	beq	r8,r4,4019af8 <__adddf3+0x55c>
 40199b8:	01001004 	movi	r4,64
 40199bc:	2211c83a 	sub	r8,r4,r8
 40199c0:	1204983a 	sll	r2,r2,r8
 40199c4:	88a2b03a 	or	r17,r17,r2
 40199c8:	8822c03a 	cmpne	r17,r17,zero
 40199cc:	1c62b03a 	or	r17,r3,r17
 40199d0:	0011883a 	mov	r8,zero
 40199d4:	0021883a 	mov	r16,zero
 40199d8:	003f7106 	br	40197a0 <__alt_mem_onchip_memory2_0+0xfc018500>
 40199dc:	193ff804 	addi	r4,r3,-32
 40199e0:	00800804 	movi	r2,32
 40199e4:	4908d83a 	srl	r4,r9,r4
 40199e8:	18804526 	beq	r3,r2,4019b00 <__adddf3+0x564>
 40199ec:	00801004 	movi	r2,64
 40199f0:	10c5c83a 	sub	r2,r2,r3
 40199f4:	4886983a 	sll	r3,r9,r2
 40199f8:	198cb03a 	or	r6,r3,r6
 40199fc:	300cc03a 	cmpne	r6,r6,zero
 4019a00:	218cb03a 	or	r6,r4,r6
 4019a04:	0007883a 	mov	r3,zero
 4019a08:	003f3b06 	br	40196f8 <__alt_mem_onchip_memory2_0+0xfc018458>
 4019a0c:	80002a26 	beq	r16,zero,4019ab8 <__adddf3+0x51c>
 4019a10:	0101ffc4 	movi	r4,2047
 4019a14:	11006826 	beq	r2,r4,4019bb8 <__adddf3+0x61c>
 4019a18:	00c7c83a 	sub	r3,zero,r3
 4019a1c:	42002034 	orhi	r8,r8,128
 4019a20:	01000e04 	movi	r4,56
 4019a24:	20c07c16 	blt	r4,r3,4019c18 <__adddf3+0x67c>
 4019a28:	010007c4 	movi	r4,31
 4019a2c:	20c0da16 	blt	r4,r3,4019d98 <__adddf3+0x7fc>
 4019a30:	01000804 	movi	r4,32
 4019a34:	20c9c83a 	sub	r4,r4,r3
 4019a38:	4114983a 	sll	r10,r8,r4
 4019a3c:	88cad83a 	srl	r5,r17,r3
 4019a40:	8908983a 	sll	r4,r17,r4
 4019a44:	40c6d83a 	srl	r3,r8,r3
 4019a48:	5162b03a 	or	r17,r10,r5
 4019a4c:	2008c03a 	cmpne	r4,r4,zero
 4019a50:	8922b03a 	or	r17,r17,r4
 4019a54:	3463c83a 	sub	r17,r6,r17
 4019a58:	48c7c83a 	sub	r3,r9,r3
 4019a5c:	344d803a 	cmpltu	r6,r6,r17
 4019a60:	1991c83a 	sub	r8,r3,r6
 4019a64:	1021883a 	mov	r16,r2
 4019a68:	3825883a 	mov	r18,r7
 4019a6c:	003f2706 	br	401970c <__alt_mem_onchip_memory2_0+0xfc01846c>
 4019a70:	24d0b03a 	or	r8,r4,r19
 4019a74:	40001b1e 	bne	r8,zero,4019ae4 <__adddf3+0x548>
 4019a78:	0005883a 	mov	r2,zero
 4019a7c:	0007883a 	mov	r3,zero
 4019a80:	0021883a 	mov	r16,zero
 4019a84:	003f4d06 	br	40197bc <__alt_mem_onchip_memory2_0+0xfc01851c>
 4019a88:	008007c4 	movi	r2,31
 4019a8c:	11003c16 	blt	r2,r4,4019b80 <__adddf3+0x5e4>
 4019a90:	00800804 	movi	r2,32
 4019a94:	1105c83a 	sub	r2,r2,r4
 4019a98:	488e983a 	sll	r7,r9,r2
 4019a9c:	310ad83a 	srl	r5,r6,r4
 4019aa0:	3084983a 	sll	r2,r6,r2
 4019aa4:	4912d83a 	srl	r9,r9,r4
 4019aa8:	394ab03a 	or	r5,r7,r5
 4019aac:	1004c03a 	cmpne	r2,r2,zero
 4019ab0:	288ab03a 	or	r5,r5,r2
 4019ab4:	003f5306 	br	4019804 <__alt_mem_onchip_memory2_0+0xfc018564>
 4019ab8:	4448b03a 	or	r4,r8,r17
 4019abc:	20003e26 	beq	r4,zero,4019bb8 <__adddf3+0x61c>
 4019ac0:	00c6303a 	nor	r3,zero,r3
 4019ac4:	18003a1e 	bne	r3,zero,4019bb0 <__adddf3+0x614>
 4019ac8:	3463c83a 	sub	r17,r6,r17
 4019acc:	4a07c83a 	sub	r3,r9,r8
 4019ad0:	344d803a 	cmpltu	r6,r6,r17
 4019ad4:	1991c83a 	sub	r8,r3,r6
 4019ad8:	1021883a 	mov	r16,r2
 4019adc:	3825883a 	mov	r18,r7
 4019ae0:	003f0a06 	br	401970c <__alt_mem_onchip_memory2_0+0xfc01846c>
 4019ae4:	2023883a 	mov	r17,r4
 4019ae8:	003f0d06 	br	4019720 <__alt_mem_onchip_memory2_0+0xfc018480>
 4019aec:	0081ffc4 	movi	r2,2047
 4019af0:	80bf3f1e 	bne	r16,r2,40197f0 <__alt_mem_onchip_memory2_0+0xfc018550>
 4019af4:	003ec806 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019af8:	0005883a 	mov	r2,zero
 4019afc:	003fb106 	br	40199c4 <__alt_mem_onchip_memory2_0+0xfc018724>
 4019b00:	0007883a 	mov	r3,zero
 4019b04:	003fbc06 	br	40199f8 <__alt_mem_onchip_memory2_0+0xfc018758>
 4019b08:	4444b03a 	or	r2,r8,r17
 4019b0c:	8000871e 	bne	r16,zero,4019d2c <__adddf3+0x790>
 4019b10:	1000ba26 	beq	r2,zero,4019dfc <__adddf3+0x860>
 4019b14:	4984b03a 	or	r2,r9,r6
 4019b18:	103ebf26 	beq	r2,zero,4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019b1c:	8985883a 	add	r2,r17,r6
 4019b20:	4247883a 	add	r3,r8,r9
 4019b24:	1451803a 	cmpltu	r8,r2,r17
 4019b28:	40d1883a 	add	r8,r8,r3
 4019b2c:	40c0202c 	andhi	r3,r8,128
 4019b30:	1023883a 	mov	r17,r2
 4019b34:	183f1a26 	beq	r3,zero,40197a0 <__alt_mem_onchip_memory2_0+0xfc018500>
 4019b38:	00bfe034 	movhi	r2,65408
 4019b3c:	10bfffc4 	addi	r2,r2,-1
 4019b40:	2021883a 	mov	r16,r4
 4019b44:	4090703a 	and	r8,r8,r2
 4019b48:	003eb306 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019b4c:	4444b03a 	or	r2,r8,r17
 4019b50:	8000291e 	bne	r16,zero,4019bf8 <__adddf3+0x65c>
 4019b54:	10004b1e 	bne	r2,zero,4019c84 <__adddf3+0x6e8>
 4019b58:	4990b03a 	or	r8,r9,r6
 4019b5c:	40008b26 	beq	r8,zero,4019d8c <__adddf3+0x7f0>
 4019b60:	4811883a 	mov	r8,r9
 4019b64:	3023883a 	mov	r17,r6
 4019b68:	3825883a 	mov	r18,r7
 4019b6c:	003eaa06 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019b70:	1021883a 	mov	r16,r2
 4019b74:	0011883a 	mov	r8,zero
 4019b78:	0005883a 	mov	r2,zero
 4019b7c:	003f0f06 	br	40197bc <__alt_mem_onchip_memory2_0+0xfc01851c>
 4019b80:	217ff804 	addi	r5,r4,-32
 4019b84:	00800804 	movi	r2,32
 4019b88:	494ad83a 	srl	r5,r9,r5
 4019b8c:	20807d26 	beq	r4,r2,4019d84 <__adddf3+0x7e8>
 4019b90:	00801004 	movi	r2,64
 4019b94:	1109c83a 	sub	r4,r2,r4
 4019b98:	4912983a 	sll	r9,r9,r4
 4019b9c:	498cb03a 	or	r6,r9,r6
 4019ba0:	300cc03a 	cmpne	r6,r6,zero
 4019ba4:	298ab03a 	or	r5,r5,r6
 4019ba8:	0013883a 	mov	r9,zero
 4019bac:	003f1506 	br	4019804 <__alt_mem_onchip_memory2_0+0xfc018564>
 4019bb0:	0101ffc4 	movi	r4,2047
 4019bb4:	113f9a1e 	bne	r2,r4,4019a20 <__alt_mem_onchip_memory2_0+0xfc018780>
 4019bb8:	4811883a 	mov	r8,r9
 4019bbc:	3023883a 	mov	r17,r6
 4019bc0:	1021883a 	mov	r16,r2
 4019bc4:	3825883a 	mov	r18,r7
 4019bc8:	003e9306 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019bcc:	8000161e 	bne	r16,zero,4019c28 <__adddf3+0x68c>
 4019bd0:	444ab03a 	or	r5,r8,r17
 4019bd4:	28005126 	beq	r5,zero,4019d1c <__adddf3+0x780>
 4019bd8:	0108303a 	nor	r4,zero,r4
 4019bdc:	20004d1e 	bne	r4,zero,4019d14 <__adddf3+0x778>
 4019be0:	89a3883a 	add	r17,r17,r6
 4019be4:	4253883a 	add	r9,r8,r9
 4019be8:	898d803a 	cmpltu	r6,r17,r6
 4019bec:	3251883a 	add	r8,r6,r9
 4019bf0:	1021883a 	mov	r16,r2
 4019bf4:	003f0806 	br	4019818 <__alt_mem_onchip_memory2_0+0xfc018578>
 4019bf8:	1000301e 	bne	r2,zero,4019cbc <__adddf3+0x720>
 4019bfc:	4984b03a 	or	r2,r9,r6
 4019c00:	10007126 	beq	r2,zero,4019dc8 <__adddf3+0x82c>
 4019c04:	4811883a 	mov	r8,r9
 4019c08:	3023883a 	mov	r17,r6
 4019c0c:	3825883a 	mov	r18,r7
 4019c10:	0401ffc4 	movi	r16,2047
 4019c14:	003e8006 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019c18:	4462b03a 	or	r17,r8,r17
 4019c1c:	8822c03a 	cmpne	r17,r17,zero
 4019c20:	0007883a 	mov	r3,zero
 4019c24:	003f8b06 	br	4019a54 <__alt_mem_onchip_memory2_0+0xfc0187b4>
 4019c28:	0141ffc4 	movi	r5,2047
 4019c2c:	11403b26 	beq	r2,r5,4019d1c <__adddf3+0x780>
 4019c30:	0109c83a 	sub	r4,zero,r4
 4019c34:	42002034 	orhi	r8,r8,128
 4019c38:	01400e04 	movi	r5,56
 4019c3c:	29006716 	blt	r5,r4,4019ddc <__adddf3+0x840>
 4019c40:	014007c4 	movi	r5,31
 4019c44:	29007016 	blt	r5,r4,4019e08 <__adddf3+0x86c>
 4019c48:	01400804 	movi	r5,32
 4019c4c:	290bc83a 	sub	r5,r5,r4
 4019c50:	4154983a 	sll	r10,r8,r5
 4019c54:	890ed83a 	srl	r7,r17,r4
 4019c58:	894a983a 	sll	r5,r17,r5
 4019c5c:	4108d83a 	srl	r4,r8,r4
 4019c60:	51e2b03a 	or	r17,r10,r7
 4019c64:	280ac03a 	cmpne	r5,r5,zero
 4019c68:	8962b03a 	or	r17,r17,r5
 4019c6c:	89a3883a 	add	r17,r17,r6
 4019c70:	2253883a 	add	r9,r4,r9
 4019c74:	898d803a 	cmpltu	r6,r17,r6
 4019c78:	3251883a 	add	r8,r6,r9
 4019c7c:	1021883a 	mov	r16,r2
 4019c80:	003ee506 	br	4019818 <__alt_mem_onchip_memory2_0+0xfc018578>
 4019c84:	4984b03a 	or	r2,r9,r6
 4019c88:	103e6326 	beq	r2,zero,4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019c8c:	8987c83a 	sub	r3,r17,r6
 4019c90:	88c9803a 	cmpltu	r4,r17,r3
 4019c94:	4245c83a 	sub	r2,r8,r9
 4019c98:	1105c83a 	sub	r2,r2,r4
 4019c9c:	1100202c 	andhi	r4,r2,128
 4019ca0:	203ebb26 	beq	r4,zero,4019790 <__alt_mem_onchip_memory2_0+0xfc0184f0>
 4019ca4:	3463c83a 	sub	r17,r6,r17
 4019ca8:	4a07c83a 	sub	r3,r9,r8
 4019cac:	344d803a 	cmpltu	r6,r6,r17
 4019cb0:	1991c83a 	sub	r8,r3,r6
 4019cb4:	3825883a 	mov	r18,r7
 4019cb8:	003e5706 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019cbc:	4984b03a 	or	r2,r9,r6
 4019cc0:	10002e26 	beq	r2,zero,4019d7c <__adddf3+0x7e0>
 4019cc4:	4004d0fa 	srli	r2,r8,3
 4019cc8:	8822d0fa 	srli	r17,r17,3
 4019ccc:	4010977a 	slli	r8,r8,29
 4019cd0:	10c0022c 	andhi	r3,r2,8
 4019cd4:	4462b03a 	or	r17,r8,r17
 4019cd8:	18000826 	beq	r3,zero,4019cfc <__adddf3+0x760>
 4019cdc:	4808d0fa 	srli	r4,r9,3
 4019ce0:	20c0022c 	andhi	r3,r4,8
 4019ce4:	1800051e 	bne	r3,zero,4019cfc <__adddf3+0x760>
 4019ce8:	300cd0fa 	srli	r6,r6,3
 4019cec:	4806977a 	slli	r3,r9,29
 4019cf0:	2005883a 	mov	r2,r4
 4019cf4:	3825883a 	mov	r18,r7
 4019cf8:	19a2b03a 	or	r17,r3,r6
 4019cfc:	8810d77a 	srli	r8,r17,29
 4019d00:	100490fa 	slli	r2,r2,3
 4019d04:	882290fa 	slli	r17,r17,3
 4019d08:	0401ffc4 	movi	r16,2047
 4019d0c:	4090b03a 	or	r8,r8,r2
 4019d10:	003e4106 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019d14:	0141ffc4 	movi	r5,2047
 4019d18:	117fc71e 	bne	r2,r5,4019c38 <__alt_mem_onchip_memory2_0+0xfc018998>
 4019d1c:	4811883a 	mov	r8,r9
 4019d20:	3023883a 	mov	r17,r6
 4019d24:	1021883a 	mov	r16,r2
 4019d28:	003e3b06 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019d2c:	10002f26 	beq	r2,zero,4019dec <__adddf3+0x850>
 4019d30:	4984b03a 	or	r2,r9,r6
 4019d34:	10001126 	beq	r2,zero,4019d7c <__adddf3+0x7e0>
 4019d38:	4004d0fa 	srli	r2,r8,3
 4019d3c:	8822d0fa 	srli	r17,r17,3
 4019d40:	4010977a 	slli	r8,r8,29
 4019d44:	10c0022c 	andhi	r3,r2,8
 4019d48:	4462b03a 	or	r17,r8,r17
 4019d4c:	183feb26 	beq	r3,zero,4019cfc <__alt_mem_onchip_memory2_0+0xfc018a5c>
 4019d50:	4808d0fa 	srli	r4,r9,3
 4019d54:	20c0022c 	andhi	r3,r4,8
 4019d58:	183fe81e 	bne	r3,zero,4019cfc <__alt_mem_onchip_memory2_0+0xfc018a5c>
 4019d5c:	300cd0fa 	srli	r6,r6,3
 4019d60:	4806977a 	slli	r3,r9,29
 4019d64:	2005883a 	mov	r2,r4
 4019d68:	19a2b03a 	or	r17,r3,r6
 4019d6c:	003fe306 	br	4019cfc <__alt_mem_onchip_memory2_0+0xfc018a5c>
 4019d70:	0011883a 	mov	r8,zero
 4019d74:	0005883a 	mov	r2,zero
 4019d78:	003e3f06 	br	4019678 <__alt_mem_onchip_memory2_0+0xfc0183d8>
 4019d7c:	0401ffc4 	movi	r16,2047
 4019d80:	003e2506 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019d84:	0013883a 	mov	r9,zero
 4019d88:	003f8406 	br	4019b9c <__alt_mem_onchip_memory2_0+0xfc0188fc>
 4019d8c:	0005883a 	mov	r2,zero
 4019d90:	0007883a 	mov	r3,zero
 4019d94:	003e8906 	br	40197bc <__alt_mem_onchip_memory2_0+0xfc01851c>
 4019d98:	197ff804 	addi	r5,r3,-32
 4019d9c:	01000804 	movi	r4,32
 4019da0:	414ad83a 	srl	r5,r8,r5
 4019da4:	19002426 	beq	r3,r4,4019e38 <__adddf3+0x89c>
 4019da8:	01001004 	movi	r4,64
 4019dac:	20c7c83a 	sub	r3,r4,r3
 4019db0:	40c6983a 	sll	r3,r8,r3
 4019db4:	1c46b03a 	or	r3,r3,r17
 4019db8:	1806c03a 	cmpne	r3,r3,zero
 4019dbc:	28e2b03a 	or	r17,r5,r3
 4019dc0:	0007883a 	mov	r3,zero
 4019dc4:	003f2306 	br	4019a54 <__alt_mem_onchip_memory2_0+0xfc0187b4>
 4019dc8:	0007883a 	mov	r3,zero
 4019dcc:	5811883a 	mov	r8,r11
 4019dd0:	00bfffc4 	movi	r2,-1
 4019dd4:	0401ffc4 	movi	r16,2047
 4019dd8:	003e7806 	br	40197bc <__alt_mem_onchip_memory2_0+0xfc01851c>
 4019ddc:	4462b03a 	or	r17,r8,r17
 4019de0:	8822c03a 	cmpne	r17,r17,zero
 4019de4:	0009883a 	mov	r4,zero
 4019de8:	003fa006 	br	4019c6c <__alt_mem_onchip_memory2_0+0xfc0189cc>
 4019dec:	4811883a 	mov	r8,r9
 4019df0:	3023883a 	mov	r17,r6
 4019df4:	0401ffc4 	movi	r16,2047
 4019df8:	003e0706 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019dfc:	4811883a 	mov	r8,r9
 4019e00:	3023883a 	mov	r17,r6
 4019e04:	003e0406 	br	4019618 <__alt_mem_onchip_memory2_0+0xfc018378>
 4019e08:	21fff804 	addi	r7,r4,-32
 4019e0c:	01400804 	movi	r5,32
 4019e10:	41ced83a 	srl	r7,r8,r7
 4019e14:	21400a26 	beq	r4,r5,4019e40 <__adddf3+0x8a4>
 4019e18:	01401004 	movi	r5,64
 4019e1c:	2909c83a 	sub	r4,r5,r4
 4019e20:	4108983a 	sll	r4,r8,r4
 4019e24:	2448b03a 	or	r4,r4,r17
 4019e28:	2008c03a 	cmpne	r4,r4,zero
 4019e2c:	3922b03a 	or	r17,r7,r4
 4019e30:	0009883a 	mov	r4,zero
 4019e34:	003f8d06 	br	4019c6c <__alt_mem_onchip_memory2_0+0xfc0189cc>
 4019e38:	0007883a 	mov	r3,zero
 4019e3c:	003fdd06 	br	4019db4 <__alt_mem_onchip_memory2_0+0xfc018b14>
 4019e40:	0009883a 	mov	r4,zero
 4019e44:	003ff706 	br	4019e24 <__alt_mem_onchip_memory2_0+0xfc018b84>

04019e48 <__divdf3>:
 4019e48:	defff004 	addi	sp,sp,-64
 4019e4c:	dc800815 	stw	r18,32(sp)
 4019e50:	2824d53a 	srli	r18,r5,20
 4019e54:	dd800c15 	stw	r22,48(sp)
 4019e58:	282cd7fa 	srli	r22,r5,31
 4019e5c:	dc000615 	stw	r16,24(sp)
 4019e60:	04000434 	movhi	r16,16
 4019e64:	843fffc4 	addi	r16,r16,-1
 4019e68:	dfc00f15 	stw	ra,60(sp)
 4019e6c:	df000e15 	stw	fp,56(sp)
 4019e70:	ddc00d15 	stw	r23,52(sp)
 4019e74:	dd400b15 	stw	r21,44(sp)
 4019e78:	dd000a15 	stw	r20,40(sp)
 4019e7c:	dcc00915 	stw	r19,36(sp)
 4019e80:	dc400715 	stw	r17,28(sp)
 4019e84:	9481ffcc 	andi	r18,r18,2047
 4019e88:	2c20703a 	and	r16,r5,r16
 4019e8c:	b2003fcc 	andi	r8,r22,255
 4019e90:	90006126 	beq	r18,zero,401a018 <__divdf3+0x1d0>
 4019e94:	0081ffc4 	movi	r2,2047
 4019e98:	202b883a 	mov	r21,r4
 4019e9c:	90803726 	beq	r18,r2,4019f7c <__divdf3+0x134>
 4019ea0:	80800434 	orhi	r2,r16,16
 4019ea4:	100490fa 	slli	r2,r2,3
 4019ea8:	2020d77a 	srli	r16,r4,29
 4019eac:	202a90fa 	slli	r21,r4,3
 4019eb0:	94bf0044 	addi	r18,r18,-1023
 4019eb4:	80a0b03a 	or	r16,r16,r2
 4019eb8:	0013883a 	mov	r9,zero
 4019ebc:	000b883a 	mov	r5,zero
 4019ec0:	3806d53a 	srli	r3,r7,20
 4019ec4:	382ed7fa 	srli	r23,r7,31
 4019ec8:	04400434 	movhi	r17,16
 4019ecc:	8c7fffc4 	addi	r17,r17,-1
 4019ed0:	18c1ffcc 	andi	r3,r3,2047
 4019ed4:	3029883a 	mov	r20,r6
 4019ed8:	3c62703a 	and	r17,r7,r17
 4019edc:	bf003fcc 	andi	fp,r23,255
 4019ee0:	18006e26 	beq	r3,zero,401a09c <__divdf3+0x254>
 4019ee4:	0081ffc4 	movi	r2,2047
 4019ee8:	18806626 	beq	r3,r2,401a084 <__divdf3+0x23c>
 4019eec:	88800434 	orhi	r2,r17,16
 4019ef0:	100490fa 	slli	r2,r2,3
 4019ef4:	3022d77a 	srli	r17,r6,29
 4019ef8:	302890fa 	slli	r20,r6,3
 4019efc:	18ff0044 	addi	r3,r3,-1023
 4019f00:	88a2b03a 	or	r17,r17,r2
 4019f04:	000f883a 	mov	r7,zero
 4019f08:	b5e6f03a 	xor	r19,r22,r23
 4019f0c:	3a4cb03a 	or	r6,r7,r9
 4019f10:	008003c4 	movi	r2,15
 4019f14:	9809883a 	mov	r4,r19
 4019f18:	90c7c83a 	sub	r3,r18,r3
 4019f1c:	9cc03fcc 	andi	r19,r19,255
 4019f20:	11809636 	bltu	r2,r6,401a17c <__divdf3+0x334>
 4019f24:	300c90ba 	slli	r6,r6,2
 4019f28:	008100b4 	movhi	r2,1026
 4019f2c:	10a7cf04 	addi	r2,r2,-24772
 4019f30:	308d883a 	add	r6,r6,r2
 4019f34:	30800017 	ldw	r2,0(r6)
 4019f38:	1000683a 	jmp	r2
 4019f3c:	0401a17c 	xorhi	r16,zero,1669
 4019f40:	04019fb4 	movhi	r16,1662
 4019f44:	0401a16c 	andhi	r16,zero,1669
 4019f48:	04019fa8 	cmpgeui	r16,zero,1662
 4019f4c:	0401a16c 	andhi	r16,zero,1669
 4019f50:	0401a140 	call	401a14 <__alt_mem_sdram-0x3bfe5ec>
 4019f54:	0401a16c 	andhi	r16,zero,1669
 4019f58:	04019fa8 	cmpgeui	r16,zero,1662
 4019f5c:	04019fb4 	movhi	r16,1662
 4019f60:	04019fb4 	movhi	r16,1662
 4019f64:	0401a140 	call	401a14 <__alt_mem_sdram-0x3bfe5ec>
 4019f68:	04019fa8 	cmpgeui	r16,zero,1662
 4019f6c:	04019f98 	cmpnei	r16,zero,1662
 4019f70:	04019f98 	cmpnei	r16,zero,1662
 4019f74:	04019f98 	cmpnei	r16,zero,1662
 4019f78:	0401a504 	movi	r16,1684
 4019f7c:	2404b03a 	or	r2,r4,r16
 4019f80:	10006c1e 	bne	r2,zero,401a134 <__divdf3+0x2ec>
 4019f84:	02400204 	movi	r9,8
 4019f88:	0021883a 	mov	r16,zero
 4019f8c:	002b883a 	mov	r21,zero
 4019f90:	01400084 	movi	r5,2
 4019f94:	003fca06 	br	4019ec0 <__alt_mem_onchip_memory2_0+0xfc018c20>
 4019f98:	8023883a 	mov	r17,r16
 4019f9c:	a829883a 	mov	r20,r21
 4019fa0:	4039883a 	mov	fp,r8
 4019fa4:	280f883a 	mov	r7,r5
 4019fa8:	00800084 	movi	r2,2
 4019fac:	3881601e 	bne	r7,r2,401a530 <__divdf3+0x6e8>
 4019fb0:	e027883a 	mov	r19,fp
 4019fb4:	9900004c 	andi	r4,r19,1
 4019fb8:	0081ffc4 	movi	r2,2047
 4019fbc:	0021883a 	mov	r16,zero
 4019fc0:	002b883a 	mov	r21,zero
 4019fc4:	1004953a 	slli	r2,r2,20
 4019fc8:	20c03fcc 	andi	r3,r4,255
 4019fcc:	01400434 	movhi	r5,16
 4019fd0:	297fffc4 	addi	r5,r5,-1
 4019fd4:	180697fa 	slli	r3,r3,31
 4019fd8:	8160703a 	and	r16,r16,r5
 4019fdc:	80a0b03a 	or	r16,r16,r2
 4019fe0:	80c6b03a 	or	r3,r16,r3
 4019fe4:	a805883a 	mov	r2,r21
 4019fe8:	dfc00f17 	ldw	ra,60(sp)
 4019fec:	df000e17 	ldw	fp,56(sp)
 4019ff0:	ddc00d17 	ldw	r23,52(sp)
 4019ff4:	dd800c17 	ldw	r22,48(sp)
 4019ff8:	dd400b17 	ldw	r21,44(sp)
 4019ffc:	dd000a17 	ldw	r20,40(sp)
 401a000:	dcc00917 	ldw	r19,36(sp)
 401a004:	dc800817 	ldw	r18,32(sp)
 401a008:	dc400717 	ldw	r17,28(sp)
 401a00c:	dc000617 	ldw	r16,24(sp)
 401a010:	dec01004 	addi	sp,sp,64
 401a014:	f800283a 	ret
 401a018:	2404b03a 	or	r2,r4,r16
 401a01c:	2023883a 	mov	r17,r4
 401a020:	10003f26 	beq	r2,zero,401a120 <__divdf3+0x2d8>
 401a024:	80015e26 	beq	r16,zero,401a5a0 <__divdf3+0x758>
 401a028:	8009883a 	mov	r4,r16
 401a02c:	d9800215 	stw	r6,8(sp)
 401a030:	d9c00515 	stw	r7,20(sp)
 401a034:	da000415 	stw	r8,16(sp)
 401a038:	400eb580 	call	400eb58 <__clzsi2>
 401a03c:	d9800217 	ldw	r6,8(sp)
 401a040:	d9c00517 	ldw	r7,20(sp)
 401a044:	da000417 	ldw	r8,16(sp)
 401a048:	113ffd44 	addi	r4,r2,-11
 401a04c:	00c00704 	movi	r3,28
 401a050:	19014f16 	blt	r3,r4,401a590 <__divdf3+0x748>
 401a054:	00c00744 	movi	r3,29
 401a058:	157ffe04 	addi	r21,r2,-8
 401a05c:	1907c83a 	sub	r3,r3,r4
 401a060:	8560983a 	sll	r16,r16,r21
 401a064:	88c6d83a 	srl	r3,r17,r3
 401a068:	8d6a983a 	sll	r21,r17,r21
 401a06c:	1c20b03a 	or	r16,r3,r16
 401a070:	1080fcc4 	addi	r2,r2,1011
 401a074:	00a5c83a 	sub	r18,zero,r2
 401a078:	0013883a 	mov	r9,zero
 401a07c:	000b883a 	mov	r5,zero
 401a080:	003f8f06 	br	4019ec0 <__alt_mem_onchip_memory2_0+0xfc018c20>
 401a084:	3444b03a 	or	r2,r6,r17
 401a088:	1000231e 	bne	r2,zero,401a118 <__divdf3+0x2d0>
 401a08c:	0023883a 	mov	r17,zero
 401a090:	0029883a 	mov	r20,zero
 401a094:	01c00084 	movi	r7,2
 401a098:	003f9b06 	br	4019f08 <__alt_mem_onchip_memory2_0+0xfc018c68>
 401a09c:	3444b03a 	or	r2,r6,r17
 401a0a0:	10001926 	beq	r2,zero,401a108 <__divdf3+0x2c0>
 401a0a4:	88014b26 	beq	r17,zero,401a5d4 <__divdf3+0x78c>
 401a0a8:	8809883a 	mov	r4,r17
 401a0ac:	d9400115 	stw	r5,4(sp)
 401a0b0:	d9800215 	stw	r6,8(sp)
 401a0b4:	da000415 	stw	r8,16(sp)
 401a0b8:	da400315 	stw	r9,12(sp)
 401a0bc:	400eb580 	call	400eb58 <__clzsi2>
 401a0c0:	d9400117 	ldw	r5,4(sp)
 401a0c4:	d9800217 	ldw	r6,8(sp)
 401a0c8:	da000417 	ldw	r8,16(sp)
 401a0cc:	da400317 	ldw	r9,12(sp)
 401a0d0:	113ffd44 	addi	r4,r2,-11
 401a0d4:	00c00704 	movi	r3,28
 401a0d8:	19013a16 	blt	r3,r4,401a5c4 <__divdf3+0x77c>
 401a0dc:	00c00744 	movi	r3,29
 401a0e0:	153ffe04 	addi	r20,r2,-8
 401a0e4:	1907c83a 	sub	r3,r3,r4
 401a0e8:	8d22983a 	sll	r17,r17,r20
 401a0ec:	30c6d83a 	srl	r3,r6,r3
 401a0f0:	3528983a 	sll	r20,r6,r20
 401a0f4:	1c62b03a 	or	r17,r3,r17
 401a0f8:	1080fcc4 	addi	r2,r2,1011
 401a0fc:	0087c83a 	sub	r3,zero,r2
 401a100:	000f883a 	mov	r7,zero
 401a104:	003f8006 	br	4019f08 <__alt_mem_onchip_memory2_0+0xfc018c68>
 401a108:	0023883a 	mov	r17,zero
 401a10c:	0029883a 	mov	r20,zero
 401a110:	01c00044 	movi	r7,1
 401a114:	003f7c06 	br	4019f08 <__alt_mem_onchip_memory2_0+0xfc018c68>
 401a118:	01c000c4 	movi	r7,3
 401a11c:	003f7a06 	br	4019f08 <__alt_mem_onchip_memory2_0+0xfc018c68>
 401a120:	02400104 	movi	r9,4
 401a124:	0021883a 	mov	r16,zero
 401a128:	002b883a 	mov	r21,zero
 401a12c:	01400044 	movi	r5,1
 401a130:	003f6306 	br	4019ec0 <__alt_mem_onchip_memory2_0+0xfc018c20>
 401a134:	02400304 	movi	r9,12
 401a138:	014000c4 	movi	r5,3
 401a13c:	003f6006 	br	4019ec0 <__alt_mem_onchip_memory2_0+0xfc018c20>
 401a140:	04000434 	movhi	r16,16
 401a144:	0009883a 	mov	r4,zero
 401a148:	843fffc4 	addi	r16,r16,-1
 401a14c:	057fffc4 	movi	r21,-1
 401a150:	0081ffc4 	movi	r2,2047
 401a154:	003f9b06 	br	4019fc4 <__alt_mem_onchip_memory2_0+0xfc018d24>
 401a158:	00c00044 	movi	r3,1
 401a15c:	1887c83a 	sub	r3,r3,r2
 401a160:	01000e04 	movi	r4,56
 401a164:	20c1530e 	bge	r4,r3,401a6b4 <__divdf3+0x86c>
 401a168:	9900004c 	andi	r4,r19,1
 401a16c:	0005883a 	mov	r2,zero
 401a170:	0021883a 	mov	r16,zero
 401a174:	002b883a 	mov	r21,zero
 401a178:	003f9206 	br	4019fc4 <__alt_mem_onchip_memory2_0+0xfc018d24>
 401a17c:	8c012e36 	bltu	r17,r16,401a638 <__divdf3+0x7f0>
 401a180:	84412c26 	beq	r16,r17,401a634 <__divdf3+0x7ec>
 401a184:	a82f883a 	mov	r23,r21
 401a188:	18ffffc4 	addi	r3,r3,-1
 401a18c:	002b883a 	mov	r21,zero
 401a190:	a004d63a 	srli	r2,r20,24
 401a194:	8822923a 	slli	r17,r17,8
 401a198:	a028923a 	slli	r20,r20,8
 401a19c:	8009883a 	mov	r4,r16
 401a1a0:	88acb03a 	or	r22,r17,r2
 401a1a4:	dd000015 	stw	r20,0(sp)
 401a1a8:	b028d43a 	srli	r20,r22,16
 401a1ac:	d8c00215 	stw	r3,8(sp)
 401a1b0:	b4bfffcc 	andi	r18,r22,65535
 401a1b4:	a00b883a 	mov	r5,r20
 401a1b8:	400da240 	call	400da24 <__udivsi3>
 401a1bc:	100b883a 	mov	r5,r2
 401a1c0:	9009883a 	mov	r4,r18
 401a1c4:	1023883a 	mov	r17,r2
 401a1c8:	400dae00 	call	400dae0 <__mulsi3>
 401a1cc:	8009883a 	mov	r4,r16
 401a1d0:	a00b883a 	mov	r5,r20
 401a1d4:	1039883a 	mov	fp,r2
 401a1d8:	400da880 	call	400da88 <__umodsi3>
 401a1dc:	1004943a 	slli	r2,r2,16
 401a1e0:	b808d43a 	srli	r4,r23,16
 401a1e4:	d8c00217 	ldw	r3,8(sp)
 401a1e8:	2084b03a 	or	r2,r4,r2
 401a1ec:	1700062e 	bgeu	r2,fp,401a208 <__divdf3+0x3c0>
 401a1f0:	1585883a 	add	r2,r2,r22
 401a1f4:	893fffc4 	addi	r4,r17,-1
 401a1f8:	15811d36 	bltu	r2,r22,401a670 <__divdf3+0x828>
 401a1fc:	17011c2e 	bgeu	r2,fp,401a670 <__divdf3+0x828>
 401a200:	8c7fff84 	addi	r17,r17,-2
 401a204:	1585883a 	add	r2,r2,r22
 401a208:	1739c83a 	sub	fp,r2,fp
 401a20c:	a00b883a 	mov	r5,r20
 401a210:	e009883a 	mov	r4,fp
 401a214:	d8c00215 	stw	r3,8(sp)
 401a218:	400da240 	call	400da24 <__udivsi3>
 401a21c:	100b883a 	mov	r5,r2
 401a220:	9009883a 	mov	r4,r18
 401a224:	1021883a 	mov	r16,r2
 401a228:	400dae00 	call	400dae0 <__mulsi3>
 401a22c:	a00b883a 	mov	r5,r20
 401a230:	e009883a 	mov	r4,fp
 401a234:	d8800415 	stw	r2,16(sp)
 401a238:	400da880 	call	400da88 <__umodsi3>
 401a23c:	1004943a 	slli	r2,r2,16
 401a240:	da000417 	ldw	r8,16(sp)
 401a244:	bdffffcc 	andi	r23,r23,65535
 401a248:	b884b03a 	or	r2,r23,r2
 401a24c:	d8c00217 	ldw	r3,8(sp)
 401a250:	1200062e 	bgeu	r2,r8,401a26c <__divdf3+0x424>
 401a254:	1585883a 	add	r2,r2,r22
 401a258:	813fffc4 	addi	r4,r16,-1
 401a25c:	15810236 	bltu	r2,r22,401a668 <__divdf3+0x820>
 401a260:	1201012e 	bgeu	r2,r8,401a668 <__divdf3+0x820>
 401a264:	843fff84 	addi	r16,r16,-2
 401a268:	1585883a 	add	r2,r2,r22
 401a26c:	8822943a 	slli	r17,r17,16
 401a270:	d9800017 	ldw	r6,0(sp)
 401a274:	1211c83a 	sub	r8,r2,r8
 401a278:	8c22b03a 	or	r17,r17,r16
 401a27c:	373fffcc 	andi	fp,r6,65535
 401a280:	8abfffcc 	andi	r10,r17,65535
 401a284:	8820d43a 	srli	r16,r17,16
 401a288:	5009883a 	mov	r4,r10
 401a28c:	e00b883a 	mov	r5,fp
 401a290:	302ed43a 	srli	r23,r6,16
 401a294:	d8c00215 	stw	r3,8(sp)
 401a298:	da000415 	stw	r8,16(sp)
 401a29c:	da800115 	stw	r10,4(sp)
 401a2a0:	400dae00 	call	400dae0 <__mulsi3>
 401a2a4:	800b883a 	mov	r5,r16
 401a2a8:	e009883a 	mov	r4,fp
 401a2ac:	d8800515 	stw	r2,20(sp)
 401a2b0:	400dae00 	call	400dae0 <__mulsi3>
 401a2b4:	8009883a 	mov	r4,r16
 401a2b8:	b80b883a 	mov	r5,r23
 401a2bc:	d8800315 	stw	r2,12(sp)
 401a2c0:	400dae00 	call	400dae0 <__mulsi3>
 401a2c4:	da800117 	ldw	r10,4(sp)
 401a2c8:	b80b883a 	mov	r5,r23
 401a2cc:	1021883a 	mov	r16,r2
 401a2d0:	5009883a 	mov	r4,r10
 401a2d4:	400dae00 	call	400dae0 <__mulsi3>
 401a2d8:	d9c00517 	ldw	r7,20(sp)
 401a2dc:	da400317 	ldw	r9,12(sp)
 401a2e0:	d8c00217 	ldw	r3,8(sp)
 401a2e4:	3808d43a 	srli	r4,r7,16
 401a2e8:	1245883a 	add	r2,r2,r9
 401a2ec:	da000417 	ldw	r8,16(sp)
 401a2f0:	2085883a 	add	r2,r4,r2
 401a2f4:	1240022e 	bgeu	r2,r9,401a300 <__divdf3+0x4b8>
 401a2f8:	01000074 	movhi	r4,1
 401a2fc:	8121883a 	add	r16,r16,r4
 401a300:	1008d43a 	srli	r4,r2,16
 401a304:	1004943a 	slli	r2,r2,16
 401a308:	39ffffcc 	andi	r7,r7,65535
 401a30c:	2409883a 	add	r4,r4,r16
 401a310:	11c5883a 	add	r2,r2,r7
 401a314:	4100bb36 	bltu	r8,r4,401a604 <__divdf3+0x7bc>
 401a318:	4100d726 	beq	r8,r4,401a678 <__divdf3+0x830>
 401a31c:	4109c83a 	sub	r4,r8,r4
 401a320:	a8a1c83a 	sub	r16,r21,r2
 401a324:	ac2b803a 	cmpltu	r21,r21,r16
 401a328:	256bc83a 	sub	r21,r4,r21
 401a32c:	b540d926 	beq	r22,r21,401a694 <__divdf3+0x84c>
 401a330:	a00b883a 	mov	r5,r20
 401a334:	a809883a 	mov	r4,r21
 401a338:	d8c00215 	stw	r3,8(sp)
 401a33c:	400da240 	call	400da24 <__udivsi3>
 401a340:	100b883a 	mov	r5,r2
 401a344:	9009883a 	mov	r4,r18
 401a348:	d8800515 	stw	r2,20(sp)
 401a34c:	400dae00 	call	400dae0 <__mulsi3>
 401a350:	a809883a 	mov	r4,r21
 401a354:	a00b883a 	mov	r5,r20
 401a358:	d8800415 	stw	r2,16(sp)
 401a35c:	400da880 	call	400da88 <__umodsi3>
 401a360:	1004943a 	slli	r2,r2,16
 401a364:	8008d43a 	srli	r4,r16,16
 401a368:	da000417 	ldw	r8,16(sp)
 401a36c:	d8c00217 	ldw	r3,8(sp)
 401a370:	2084b03a 	or	r2,r4,r2
 401a374:	d9c00517 	ldw	r7,20(sp)
 401a378:	1200062e 	bgeu	r2,r8,401a394 <__divdf3+0x54c>
 401a37c:	1585883a 	add	r2,r2,r22
 401a380:	393fffc4 	addi	r4,r7,-1
 401a384:	1580c536 	bltu	r2,r22,401a69c <__divdf3+0x854>
 401a388:	1200c42e 	bgeu	r2,r8,401a69c <__divdf3+0x854>
 401a38c:	39ffff84 	addi	r7,r7,-2
 401a390:	1585883a 	add	r2,r2,r22
 401a394:	122bc83a 	sub	r21,r2,r8
 401a398:	a00b883a 	mov	r5,r20
 401a39c:	a809883a 	mov	r4,r21
 401a3a0:	d8c00215 	stw	r3,8(sp)
 401a3a4:	d9c00515 	stw	r7,20(sp)
 401a3a8:	400da240 	call	400da24 <__udivsi3>
 401a3ac:	9009883a 	mov	r4,r18
 401a3b0:	100b883a 	mov	r5,r2
 401a3b4:	d8800415 	stw	r2,16(sp)
 401a3b8:	400dae00 	call	400dae0 <__mulsi3>
 401a3bc:	a809883a 	mov	r4,r21
 401a3c0:	a00b883a 	mov	r5,r20
 401a3c4:	1025883a 	mov	r18,r2
 401a3c8:	400da880 	call	400da88 <__umodsi3>
 401a3cc:	1004943a 	slli	r2,r2,16
 401a3d0:	813fffcc 	andi	r4,r16,65535
 401a3d4:	d8c00217 	ldw	r3,8(sp)
 401a3d8:	20a0b03a 	or	r16,r4,r2
 401a3dc:	d9c00517 	ldw	r7,20(sp)
 401a3e0:	da000417 	ldw	r8,16(sp)
 401a3e4:	8480062e 	bgeu	r16,r18,401a400 <__divdf3+0x5b8>
 401a3e8:	85a1883a 	add	r16,r16,r22
 401a3ec:	40bfffc4 	addi	r2,r8,-1
 401a3f0:	8580ac36 	bltu	r16,r22,401a6a4 <__divdf3+0x85c>
 401a3f4:	8480ab2e 	bgeu	r16,r18,401a6a4 <__divdf3+0x85c>
 401a3f8:	423fff84 	addi	r8,r8,-2
 401a3fc:	85a1883a 	add	r16,r16,r22
 401a400:	3804943a 	slli	r2,r7,16
 401a404:	84a1c83a 	sub	r16,r16,r18
 401a408:	e009883a 	mov	r4,fp
 401a40c:	1228b03a 	or	r20,r2,r8
 401a410:	a1ffffcc 	andi	r7,r20,65535
 401a414:	a024d43a 	srli	r18,r20,16
 401a418:	380b883a 	mov	r5,r7
 401a41c:	d8c00215 	stw	r3,8(sp)
 401a420:	d9c00515 	stw	r7,20(sp)
 401a424:	400dae00 	call	400dae0 <__mulsi3>
 401a428:	900b883a 	mov	r5,r18
 401a42c:	e009883a 	mov	r4,fp
 401a430:	102b883a 	mov	r21,r2
 401a434:	400dae00 	call	400dae0 <__mulsi3>
 401a438:	900b883a 	mov	r5,r18
 401a43c:	b809883a 	mov	r4,r23
 401a440:	1039883a 	mov	fp,r2
 401a444:	400dae00 	call	400dae0 <__mulsi3>
 401a448:	d9c00517 	ldw	r7,20(sp)
 401a44c:	b80b883a 	mov	r5,r23
 401a450:	1025883a 	mov	r18,r2
 401a454:	3809883a 	mov	r4,r7
 401a458:	400dae00 	call	400dae0 <__mulsi3>
 401a45c:	a808d43a 	srli	r4,r21,16
 401a460:	1705883a 	add	r2,r2,fp
 401a464:	d8c00217 	ldw	r3,8(sp)
 401a468:	2085883a 	add	r2,r4,r2
 401a46c:	1700022e 	bgeu	r2,fp,401a478 <__divdf3+0x630>
 401a470:	01000074 	movhi	r4,1
 401a474:	9125883a 	add	r18,r18,r4
 401a478:	1008d43a 	srli	r4,r2,16
 401a47c:	1004943a 	slli	r2,r2,16
 401a480:	ad7fffcc 	andi	r21,r21,65535
 401a484:	2489883a 	add	r4,r4,r18
 401a488:	1545883a 	add	r2,r2,r21
 401a48c:	81003836 	bltu	r16,r4,401a570 <__divdf3+0x728>
 401a490:	81003626 	beq	r16,r4,401a56c <__divdf3+0x724>
 401a494:	a5000054 	ori	r20,r20,1
 401a498:	1880ffc4 	addi	r2,r3,1023
 401a49c:	00bf2e0e 	bge	zero,r2,401a158 <__alt_mem_onchip_memory2_0+0xfc018eb8>
 401a4a0:	a10001cc 	andi	r4,r20,7
 401a4a4:	20000726 	beq	r4,zero,401a4c4 <__divdf3+0x67c>
 401a4a8:	a10003cc 	andi	r4,r20,15
 401a4ac:	01400104 	movi	r5,4
 401a4b0:	21400426 	beq	r4,r5,401a4c4 <__divdf3+0x67c>
 401a4b4:	a149883a 	add	r4,r20,r5
 401a4b8:	2529803a 	cmpltu	r20,r4,r20
 401a4bc:	8d23883a 	add	r17,r17,r20
 401a4c0:	2029883a 	mov	r20,r4
 401a4c4:	8900402c 	andhi	r4,r17,256
 401a4c8:	20000426 	beq	r4,zero,401a4dc <__divdf3+0x694>
 401a4cc:	18810004 	addi	r2,r3,1024
 401a4d0:	00ffc034 	movhi	r3,65280
 401a4d4:	18ffffc4 	addi	r3,r3,-1
 401a4d8:	88e2703a 	and	r17,r17,r3
 401a4dc:	00c1ff84 	movi	r3,2046
 401a4e0:	18beb416 	blt	r3,r2,4019fb4 <__alt_mem_onchip_memory2_0+0xfc018d14>
 401a4e4:	a028d0fa 	srli	r20,r20,3
 401a4e8:	882a977a 	slli	r21,r17,29
 401a4ec:	8820927a 	slli	r16,r17,9
 401a4f0:	1081ffcc 	andi	r2,r2,2047
 401a4f4:	ad2ab03a 	or	r21,r21,r20
 401a4f8:	8020d33a 	srli	r16,r16,12
 401a4fc:	9900004c 	andi	r4,r19,1
 401a500:	003eb006 	br	4019fc4 <__alt_mem_onchip_memory2_0+0xfc018d24>
 401a504:	8080022c 	andhi	r2,r16,8
 401a508:	10001226 	beq	r2,zero,401a554 <__divdf3+0x70c>
 401a50c:	8880022c 	andhi	r2,r17,8
 401a510:	1000101e 	bne	r2,zero,401a554 <__divdf3+0x70c>
 401a514:	00800434 	movhi	r2,16
 401a518:	8c000234 	orhi	r16,r17,8
 401a51c:	10bfffc4 	addi	r2,r2,-1
 401a520:	b809883a 	mov	r4,r23
 401a524:	80a0703a 	and	r16,r16,r2
 401a528:	a02b883a 	mov	r21,r20
 401a52c:	003f0806 	br	401a150 <__alt_mem_onchip_memory2_0+0xfc018eb0>
 401a530:	008000c4 	movi	r2,3
 401a534:	3880b126 	beq	r7,r2,401a7fc <__divdf3+0x9b4>
 401a538:	00800044 	movi	r2,1
 401a53c:	38805b1e 	bne	r7,r2,401a6ac <__divdf3+0x864>
 401a540:	e009883a 	mov	r4,fp
 401a544:	0005883a 	mov	r2,zero
 401a548:	0021883a 	mov	r16,zero
 401a54c:	002b883a 	mov	r21,zero
 401a550:	003e9c06 	br	4019fc4 <__alt_mem_onchip_memory2_0+0xfc018d24>
 401a554:	00800434 	movhi	r2,16
 401a558:	84000234 	orhi	r16,r16,8
 401a55c:	10bfffc4 	addi	r2,r2,-1
 401a560:	b009883a 	mov	r4,r22
 401a564:	80a0703a 	and	r16,r16,r2
 401a568:	003ef906 	br	401a150 <__alt_mem_onchip_memory2_0+0xfc018eb0>
 401a56c:	103fca26 	beq	r2,zero,401a498 <__alt_mem_onchip_memory2_0+0xfc0191f8>
 401a570:	b421883a 	add	r16,r22,r16
 401a574:	a17fffc4 	addi	r5,r20,-1
 401a578:	8580422e 	bgeu	r16,r22,401a684 <__divdf3+0x83c>
 401a57c:	2829883a 	mov	r20,r5
 401a580:	813fc41e 	bne	r16,r4,401a494 <__alt_mem_onchip_memory2_0+0xfc0191f4>
 401a584:	d9800017 	ldw	r6,0(sp)
 401a588:	30bfc21e 	bne	r6,r2,401a494 <__alt_mem_onchip_memory2_0+0xfc0191f4>
 401a58c:	003fc206 	br	401a498 <__alt_mem_onchip_memory2_0+0xfc0191f8>
 401a590:	143ff604 	addi	r16,r2,-40
 401a594:	8c20983a 	sll	r16,r17,r16
 401a598:	002b883a 	mov	r21,zero
 401a59c:	003eb406 	br	401a070 <__alt_mem_onchip_memory2_0+0xfc018dd0>
 401a5a0:	d9800215 	stw	r6,8(sp)
 401a5a4:	d9c00515 	stw	r7,20(sp)
 401a5a8:	da000415 	stw	r8,16(sp)
 401a5ac:	400eb580 	call	400eb58 <__clzsi2>
 401a5b0:	10800804 	addi	r2,r2,32
 401a5b4:	da000417 	ldw	r8,16(sp)
 401a5b8:	d9c00517 	ldw	r7,20(sp)
 401a5bc:	d9800217 	ldw	r6,8(sp)
 401a5c0:	003ea106 	br	401a048 <__alt_mem_onchip_memory2_0+0xfc018da8>
 401a5c4:	147ff604 	addi	r17,r2,-40
 401a5c8:	3462983a 	sll	r17,r6,r17
 401a5cc:	0029883a 	mov	r20,zero
 401a5d0:	003ec906 	br	401a0f8 <__alt_mem_onchip_memory2_0+0xfc018e58>
 401a5d4:	3009883a 	mov	r4,r6
 401a5d8:	d9400115 	stw	r5,4(sp)
 401a5dc:	d9800215 	stw	r6,8(sp)
 401a5e0:	da000415 	stw	r8,16(sp)
 401a5e4:	da400315 	stw	r9,12(sp)
 401a5e8:	400eb580 	call	400eb58 <__clzsi2>
 401a5ec:	10800804 	addi	r2,r2,32
 401a5f0:	da400317 	ldw	r9,12(sp)
 401a5f4:	da000417 	ldw	r8,16(sp)
 401a5f8:	d9800217 	ldw	r6,8(sp)
 401a5fc:	d9400117 	ldw	r5,4(sp)
 401a600:	003eb306 	br	401a0d0 <__alt_mem_onchip_memory2_0+0xfc018e30>
 401a604:	d9800017 	ldw	r6,0(sp)
 401a608:	a9ab883a 	add	r21,r21,r6
 401a60c:	a98b803a 	cmpltu	r5,r21,r6
 401a610:	2d8b883a 	add	r5,r5,r22
 401a614:	2a11883a 	add	r8,r5,r8
 401a618:	897fffc4 	addi	r5,r17,-1
 401a61c:	b2000c2e 	bgeu	r22,r8,401a650 <__divdf3+0x808>
 401a620:	41003f36 	bltu	r8,r4,401a720 <__divdf3+0x8d8>
 401a624:	22006c26 	beq	r4,r8,401a7d8 <__divdf3+0x990>
 401a628:	4109c83a 	sub	r4,r8,r4
 401a62c:	2823883a 	mov	r17,r5
 401a630:	003f3b06 	br	401a320 <__alt_mem_onchip_memory2_0+0xfc019080>
 401a634:	ad3ed336 	bltu	r21,r20,401a184 <__alt_mem_onchip_memory2_0+0xfc018ee4>
 401a638:	a804d07a 	srli	r2,r21,1
 401a63c:	802e97fa 	slli	r23,r16,31
 401a640:	a82a97fa 	slli	r21,r21,31
 401a644:	8020d07a 	srli	r16,r16,1
 401a648:	b8aeb03a 	or	r23,r23,r2
 401a64c:	003ed006 	br	401a190 <__alt_mem_onchip_memory2_0+0xfc018ef0>
 401a650:	b23ff51e 	bne	r22,r8,401a628 <__alt_mem_onchip_memory2_0+0xfc019388>
 401a654:	d9800017 	ldw	r6,0(sp)
 401a658:	a9bff12e 	bgeu	r21,r6,401a620 <__alt_mem_onchip_memory2_0+0xfc019380>
 401a65c:	b109c83a 	sub	r4,r22,r4
 401a660:	2823883a 	mov	r17,r5
 401a664:	003f2e06 	br	401a320 <__alt_mem_onchip_memory2_0+0xfc019080>
 401a668:	2021883a 	mov	r16,r4
 401a66c:	003eff06 	br	401a26c <__alt_mem_onchip_memory2_0+0xfc018fcc>
 401a670:	2023883a 	mov	r17,r4
 401a674:	003ee406 	br	401a208 <__alt_mem_onchip_memory2_0+0xfc018f68>
 401a678:	a8bfe236 	bltu	r21,r2,401a604 <__alt_mem_onchip_memory2_0+0xfc019364>
 401a67c:	0009883a 	mov	r4,zero
 401a680:	003f2706 	br	401a320 <__alt_mem_onchip_memory2_0+0xfc019080>
 401a684:	81002d36 	bltu	r16,r4,401a73c <__divdf3+0x8f4>
 401a688:	24005626 	beq	r4,r16,401a7e4 <__divdf3+0x99c>
 401a68c:	2829883a 	mov	r20,r5
 401a690:	003f8006 	br	401a494 <__alt_mem_onchip_memory2_0+0xfc0191f4>
 401a694:	053fffc4 	movi	r20,-1
 401a698:	003f7f06 	br	401a498 <__alt_mem_onchip_memory2_0+0xfc0191f8>
 401a69c:	200f883a 	mov	r7,r4
 401a6a0:	003f3c06 	br	401a394 <__alt_mem_onchip_memory2_0+0xfc0190f4>
 401a6a4:	1011883a 	mov	r8,r2
 401a6a8:	003f5506 	br	401a400 <__alt_mem_onchip_memory2_0+0xfc019160>
 401a6ac:	e027883a 	mov	r19,fp
 401a6b0:	003f7906 	br	401a498 <__alt_mem_onchip_memory2_0+0xfc0191f8>
 401a6b4:	010007c4 	movi	r4,31
 401a6b8:	20c02816 	blt	r4,r3,401a75c <__divdf3+0x914>
 401a6bc:	00800804 	movi	r2,32
 401a6c0:	10c5c83a 	sub	r2,r2,r3
 401a6c4:	888a983a 	sll	r5,r17,r2
 401a6c8:	a0c8d83a 	srl	r4,r20,r3
 401a6cc:	a084983a 	sll	r2,r20,r2
 401a6d0:	88e2d83a 	srl	r17,r17,r3
 401a6d4:	2906b03a 	or	r3,r5,r4
 401a6d8:	1004c03a 	cmpne	r2,r2,zero
 401a6dc:	1886b03a 	or	r3,r3,r2
 401a6e0:	188001cc 	andi	r2,r3,7
 401a6e4:	10000726 	beq	r2,zero,401a704 <__divdf3+0x8bc>
 401a6e8:	188003cc 	andi	r2,r3,15
 401a6ec:	01000104 	movi	r4,4
 401a6f0:	11000426 	beq	r2,r4,401a704 <__divdf3+0x8bc>
 401a6f4:	1805883a 	mov	r2,r3
 401a6f8:	10c00104 	addi	r3,r2,4
 401a6fc:	1885803a 	cmpltu	r2,r3,r2
 401a700:	88a3883a 	add	r17,r17,r2
 401a704:	8880202c 	andhi	r2,r17,128
 401a708:	10002926 	beq	r2,zero,401a7b0 <__divdf3+0x968>
 401a70c:	9900004c 	andi	r4,r19,1
 401a710:	00800044 	movi	r2,1
 401a714:	0021883a 	mov	r16,zero
 401a718:	002b883a 	mov	r21,zero
 401a71c:	003e2906 	br	4019fc4 <__alt_mem_onchip_memory2_0+0xfc018d24>
 401a720:	d9800017 	ldw	r6,0(sp)
 401a724:	8c7fff84 	addi	r17,r17,-2
 401a728:	a9ab883a 	add	r21,r21,r6
 401a72c:	a98b803a 	cmpltu	r5,r21,r6
 401a730:	2d8b883a 	add	r5,r5,r22
 401a734:	2a11883a 	add	r8,r5,r8
 401a738:	003ef806 	br	401a31c <__alt_mem_onchip_memory2_0+0xfc01907c>
 401a73c:	d9800017 	ldw	r6,0(sp)
 401a740:	318f883a 	add	r7,r6,r6
 401a744:	398b803a 	cmpltu	r5,r7,r6
 401a748:	2d8d883a 	add	r6,r5,r22
 401a74c:	81a1883a 	add	r16,r16,r6
 401a750:	a17fff84 	addi	r5,r20,-2
 401a754:	d9c00015 	stw	r7,0(sp)
 401a758:	003f8806 	br	401a57c <__alt_mem_onchip_memory2_0+0xfc0192dc>
 401a75c:	013ff844 	movi	r4,-31
 401a760:	2085c83a 	sub	r2,r4,r2
 401a764:	8888d83a 	srl	r4,r17,r2
 401a768:	00800804 	movi	r2,32
 401a76c:	18802126 	beq	r3,r2,401a7f4 <__divdf3+0x9ac>
 401a770:	04001004 	movi	r16,64
 401a774:	80c7c83a 	sub	r3,r16,r3
 401a778:	88e0983a 	sll	r16,r17,r3
 401a77c:	8504b03a 	or	r2,r16,r20
 401a780:	1004c03a 	cmpne	r2,r2,zero
 401a784:	2084b03a 	or	r2,r4,r2
 401a788:	144001cc 	andi	r17,r2,7
 401a78c:	88000d1e 	bne	r17,zero,401a7c4 <__divdf3+0x97c>
 401a790:	0021883a 	mov	r16,zero
 401a794:	102ad0fa 	srli	r21,r2,3
 401a798:	9900004c 	andi	r4,r19,1
 401a79c:	0005883a 	mov	r2,zero
 401a7a0:	ac6ab03a 	or	r21,r21,r17
 401a7a4:	003e0706 	br	4019fc4 <__alt_mem_onchip_memory2_0+0xfc018d24>
 401a7a8:	1007883a 	mov	r3,r2
 401a7ac:	0023883a 	mov	r17,zero
 401a7b0:	8820927a 	slli	r16,r17,9
 401a7b4:	1805883a 	mov	r2,r3
 401a7b8:	8822977a 	slli	r17,r17,29
 401a7bc:	8020d33a 	srli	r16,r16,12
 401a7c0:	003ff406 	br	401a794 <__alt_mem_onchip_memory2_0+0xfc0194f4>
 401a7c4:	10c003cc 	andi	r3,r2,15
 401a7c8:	01000104 	movi	r4,4
 401a7cc:	193ff626 	beq	r3,r4,401a7a8 <__alt_mem_onchip_memory2_0+0xfc019508>
 401a7d0:	0023883a 	mov	r17,zero
 401a7d4:	003fc806 	br	401a6f8 <__alt_mem_onchip_memory2_0+0xfc019458>
 401a7d8:	a8bfd136 	bltu	r21,r2,401a720 <__alt_mem_onchip_memory2_0+0xfc019480>
 401a7dc:	2823883a 	mov	r17,r5
 401a7e0:	003fa606 	br	401a67c <__alt_mem_onchip_memory2_0+0xfc0193dc>
 401a7e4:	d9800017 	ldw	r6,0(sp)
 401a7e8:	30bfd436 	bltu	r6,r2,401a73c <__alt_mem_onchip_memory2_0+0xfc01949c>
 401a7ec:	2829883a 	mov	r20,r5
 401a7f0:	003f6406 	br	401a584 <__alt_mem_onchip_memory2_0+0xfc0192e4>
 401a7f4:	0021883a 	mov	r16,zero
 401a7f8:	003fe006 	br	401a77c <__alt_mem_onchip_memory2_0+0xfc0194dc>
 401a7fc:	00800434 	movhi	r2,16
 401a800:	8c000234 	orhi	r16,r17,8
 401a804:	10bfffc4 	addi	r2,r2,-1
 401a808:	e009883a 	mov	r4,fp
 401a80c:	80a0703a 	and	r16,r16,r2
 401a810:	a02b883a 	mov	r21,r20
 401a814:	003e4e06 	br	401a150 <__alt_mem_onchip_memory2_0+0xfc018eb0>

0401a818 <__eqdf2>:
 401a818:	2804d53a 	srli	r2,r5,20
 401a81c:	3806d53a 	srli	r3,r7,20
 401a820:	02000434 	movhi	r8,16
 401a824:	423fffc4 	addi	r8,r8,-1
 401a828:	1081ffcc 	andi	r2,r2,2047
 401a82c:	0281ffc4 	movi	r10,2047
 401a830:	2a12703a 	and	r9,r5,r8
 401a834:	18c1ffcc 	andi	r3,r3,2047
 401a838:	3a10703a 	and	r8,r7,r8
 401a83c:	280ad7fa 	srli	r5,r5,31
 401a840:	380ed7fa 	srli	r7,r7,31
 401a844:	12801026 	beq	r2,r10,401a888 <__eqdf2+0x70>
 401a848:	0281ffc4 	movi	r10,2047
 401a84c:	1a800a26 	beq	r3,r10,401a878 <__eqdf2+0x60>
 401a850:	10c00226 	beq	r2,r3,401a85c <__eqdf2+0x44>
 401a854:	00800044 	movi	r2,1
 401a858:	f800283a 	ret
 401a85c:	4a3ffd1e 	bne	r9,r8,401a854 <__alt_mem_onchip_memory2_0+0xfc0195b4>
 401a860:	21bffc1e 	bne	r4,r6,401a854 <__alt_mem_onchip_memory2_0+0xfc0195b4>
 401a864:	29c00c26 	beq	r5,r7,401a898 <__eqdf2+0x80>
 401a868:	103ffa1e 	bne	r2,zero,401a854 <__alt_mem_onchip_memory2_0+0xfc0195b4>
 401a86c:	2244b03a 	or	r2,r4,r9
 401a870:	1004c03a 	cmpne	r2,r2,zero
 401a874:	f800283a 	ret
 401a878:	3214b03a 	or	r10,r6,r8
 401a87c:	503ff426 	beq	r10,zero,401a850 <__alt_mem_onchip_memory2_0+0xfc0195b0>
 401a880:	00800044 	movi	r2,1
 401a884:	f800283a 	ret
 401a888:	2254b03a 	or	r10,r4,r9
 401a88c:	503fee26 	beq	r10,zero,401a848 <__alt_mem_onchip_memory2_0+0xfc0195a8>
 401a890:	00800044 	movi	r2,1
 401a894:	f800283a 	ret
 401a898:	0005883a 	mov	r2,zero
 401a89c:	f800283a 	ret

0401a8a0 <__gedf2>:
 401a8a0:	2804d53a 	srli	r2,r5,20
 401a8a4:	3806d53a 	srli	r3,r7,20
 401a8a8:	02000434 	movhi	r8,16
 401a8ac:	423fffc4 	addi	r8,r8,-1
 401a8b0:	1081ffcc 	andi	r2,r2,2047
 401a8b4:	0241ffc4 	movi	r9,2047
 401a8b8:	2a14703a 	and	r10,r5,r8
 401a8bc:	18c1ffcc 	andi	r3,r3,2047
 401a8c0:	3a10703a 	and	r8,r7,r8
 401a8c4:	280ad7fa 	srli	r5,r5,31
 401a8c8:	380ed7fa 	srli	r7,r7,31
 401a8cc:	12401d26 	beq	r2,r9,401a944 <__gedf2+0xa4>
 401a8d0:	0241ffc4 	movi	r9,2047
 401a8d4:	1a401226 	beq	r3,r9,401a920 <__gedf2+0x80>
 401a8d8:	1000081e 	bne	r2,zero,401a8fc <__gedf2+0x5c>
 401a8dc:	2296b03a 	or	r11,r4,r10
 401a8e0:	5813003a 	cmpeq	r9,r11,zero
 401a8e4:	1800091e 	bne	r3,zero,401a90c <__gedf2+0x6c>
 401a8e8:	3218b03a 	or	r12,r6,r8
 401a8ec:	6000071e 	bne	r12,zero,401a90c <__gedf2+0x6c>
 401a8f0:	0005883a 	mov	r2,zero
 401a8f4:	5800101e 	bne	r11,zero,401a938 <__gedf2+0x98>
 401a8f8:	f800283a 	ret
 401a8fc:	18000c1e 	bne	r3,zero,401a930 <__gedf2+0x90>
 401a900:	3212b03a 	or	r9,r6,r8
 401a904:	48000c26 	beq	r9,zero,401a938 <__gedf2+0x98>
 401a908:	0013883a 	mov	r9,zero
 401a90c:	39c03fcc 	andi	r7,r7,255
 401a910:	48000826 	beq	r9,zero,401a934 <__gedf2+0x94>
 401a914:	38000926 	beq	r7,zero,401a93c <__gedf2+0x9c>
 401a918:	00800044 	movi	r2,1
 401a91c:	f800283a 	ret
 401a920:	3212b03a 	or	r9,r6,r8
 401a924:	483fec26 	beq	r9,zero,401a8d8 <__alt_mem_onchip_memory2_0+0xfc019638>
 401a928:	00bfff84 	movi	r2,-2
 401a92c:	f800283a 	ret
 401a930:	39c03fcc 	andi	r7,r7,255
 401a934:	29c00626 	beq	r5,r7,401a950 <__gedf2+0xb0>
 401a938:	283ff726 	beq	r5,zero,401a918 <__alt_mem_onchip_memory2_0+0xfc019678>
 401a93c:	00bfffc4 	movi	r2,-1
 401a940:	f800283a 	ret
 401a944:	2292b03a 	or	r9,r4,r10
 401a948:	483fe126 	beq	r9,zero,401a8d0 <__alt_mem_onchip_memory2_0+0xfc019630>
 401a94c:	003ff606 	br	401a928 <__alt_mem_onchip_memory2_0+0xfc019688>
 401a950:	18bff916 	blt	r3,r2,401a938 <__alt_mem_onchip_memory2_0+0xfc019698>
 401a954:	10c00316 	blt	r2,r3,401a964 <__gedf2+0xc4>
 401a958:	42bff736 	bltu	r8,r10,401a938 <__alt_mem_onchip_memory2_0+0xfc019698>
 401a95c:	52000326 	beq	r10,r8,401a96c <__gedf2+0xcc>
 401a960:	5200042e 	bgeu	r10,r8,401a974 <__gedf2+0xd4>
 401a964:	283fec1e 	bne	r5,zero,401a918 <__alt_mem_onchip_memory2_0+0xfc019678>
 401a968:	003ff406 	br	401a93c <__alt_mem_onchip_memory2_0+0xfc01969c>
 401a96c:	313ff236 	bltu	r6,r4,401a938 <__alt_mem_onchip_memory2_0+0xfc019698>
 401a970:	21bffc36 	bltu	r4,r6,401a964 <__alt_mem_onchip_memory2_0+0xfc0196c4>
 401a974:	0005883a 	mov	r2,zero
 401a978:	f800283a 	ret

0401a97c <__ledf2>:
 401a97c:	2804d53a 	srli	r2,r5,20
 401a980:	3810d53a 	srli	r8,r7,20
 401a984:	00c00434 	movhi	r3,16
 401a988:	18ffffc4 	addi	r3,r3,-1
 401a98c:	1081ffcc 	andi	r2,r2,2047
 401a990:	0241ffc4 	movi	r9,2047
 401a994:	28d4703a 	and	r10,r5,r3
 401a998:	4201ffcc 	andi	r8,r8,2047
 401a99c:	38c6703a 	and	r3,r7,r3
 401a9a0:	280ad7fa 	srli	r5,r5,31
 401a9a4:	380ed7fa 	srli	r7,r7,31
 401a9a8:	12401f26 	beq	r2,r9,401aa28 <__ledf2+0xac>
 401a9ac:	0241ffc4 	movi	r9,2047
 401a9b0:	42401426 	beq	r8,r9,401aa04 <__ledf2+0x88>
 401a9b4:	1000091e 	bne	r2,zero,401a9dc <__ledf2+0x60>
 401a9b8:	2296b03a 	or	r11,r4,r10
 401a9bc:	5813003a 	cmpeq	r9,r11,zero
 401a9c0:	29403fcc 	andi	r5,r5,255
 401a9c4:	40000a1e 	bne	r8,zero,401a9f0 <__ledf2+0x74>
 401a9c8:	30d8b03a 	or	r12,r6,r3
 401a9cc:	6000081e 	bne	r12,zero,401a9f0 <__ledf2+0x74>
 401a9d0:	0005883a 	mov	r2,zero
 401a9d4:	5800111e 	bne	r11,zero,401aa1c <__ledf2+0xa0>
 401a9d8:	f800283a 	ret
 401a9dc:	29403fcc 	andi	r5,r5,255
 401a9e0:	40000c1e 	bne	r8,zero,401aa14 <__ledf2+0x98>
 401a9e4:	30d2b03a 	or	r9,r6,r3
 401a9e8:	48000c26 	beq	r9,zero,401aa1c <__ledf2+0xa0>
 401a9ec:	0013883a 	mov	r9,zero
 401a9f0:	39c03fcc 	andi	r7,r7,255
 401a9f4:	48000826 	beq	r9,zero,401aa18 <__ledf2+0x9c>
 401a9f8:	38001126 	beq	r7,zero,401aa40 <__ledf2+0xc4>
 401a9fc:	00800044 	movi	r2,1
 401aa00:	f800283a 	ret
 401aa04:	30d2b03a 	or	r9,r6,r3
 401aa08:	483fea26 	beq	r9,zero,401a9b4 <__alt_mem_onchip_memory2_0+0xfc019714>
 401aa0c:	00800084 	movi	r2,2
 401aa10:	f800283a 	ret
 401aa14:	39c03fcc 	andi	r7,r7,255
 401aa18:	39400726 	beq	r7,r5,401aa38 <__ledf2+0xbc>
 401aa1c:	2800081e 	bne	r5,zero,401aa40 <__ledf2+0xc4>
 401aa20:	00800044 	movi	r2,1
 401aa24:	f800283a 	ret
 401aa28:	2292b03a 	or	r9,r4,r10
 401aa2c:	483fdf26 	beq	r9,zero,401a9ac <__alt_mem_onchip_memory2_0+0xfc01970c>
 401aa30:	00800084 	movi	r2,2
 401aa34:	f800283a 	ret
 401aa38:	4080030e 	bge	r8,r2,401aa48 <__ledf2+0xcc>
 401aa3c:	383fef26 	beq	r7,zero,401a9fc <__alt_mem_onchip_memory2_0+0xfc01975c>
 401aa40:	00bfffc4 	movi	r2,-1
 401aa44:	f800283a 	ret
 401aa48:	123feb16 	blt	r2,r8,401a9f8 <__alt_mem_onchip_memory2_0+0xfc019758>
 401aa4c:	1abff336 	bltu	r3,r10,401aa1c <__alt_mem_onchip_memory2_0+0xfc01977c>
 401aa50:	50c00326 	beq	r10,r3,401aa60 <__ledf2+0xe4>
 401aa54:	50c0042e 	bgeu	r10,r3,401aa68 <__ledf2+0xec>
 401aa58:	283fe81e 	bne	r5,zero,401a9fc <__alt_mem_onchip_memory2_0+0xfc01975c>
 401aa5c:	003ff806 	br	401aa40 <__alt_mem_onchip_memory2_0+0xfc0197a0>
 401aa60:	313fee36 	bltu	r6,r4,401aa1c <__alt_mem_onchip_memory2_0+0xfc01977c>
 401aa64:	21bffc36 	bltu	r4,r6,401aa58 <__alt_mem_onchip_memory2_0+0xfc0197b8>
 401aa68:	0005883a 	mov	r2,zero
 401aa6c:	f800283a 	ret

0401aa70 <__muldf3>:
 401aa70:	deffee04 	addi	sp,sp,-72
 401aa74:	dd000c15 	stw	r20,48(sp)
 401aa78:	2828d53a 	srli	r20,r5,20
 401aa7c:	ddc00f15 	stw	r23,60(sp)
 401aa80:	282ed7fa 	srli	r23,r5,31
 401aa84:	dc000815 	stw	r16,32(sp)
 401aa88:	04000434 	movhi	r16,16
 401aa8c:	dcc00b15 	stw	r19,44(sp)
 401aa90:	843fffc4 	addi	r16,r16,-1
 401aa94:	dfc01115 	stw	ra,68(sp)
 401aa98:	df001015 	stw	fp,64(sp)
 401aa9c:	dd800e15 	stw	r22,56(sp)
 401aaa0:	dd400d15 	stw	r21,52(sp)
 401aaa4:	dc800a15 	stw	r18,40(sp)
 401aaa8:	dc400915 	stw	r17,36(sp)
 401aaac:	a501ffcc 	andi	r20,r20,2047
 401aab0:	2c20703a 	and	r16,r5,r16
 401aab4:	b827883a 	mov	r19,r23
 401aab8:	ba403fcc 	andi	r9,r23,255
 401aabc:	a0006026 	beq	r20,zero,401ac40 <__muldf3+0x1d0>
 401aac0:	0081ffc4 	movi	r2,2047
 401aac4:	202d883a 	mov	r22,r4
 401aac8:	a0803626 	beq	r20,r2,401aba4 <__muldf3+0x134>
 401aacc:	84000434 	orhi	r16,r16,16
 401aad0:	200ad77a 	srli	r5,r4,29
 401aad4:	800490fa 	slli	r2,r16,3
 401aad8:	202c90fa 	slli	r22,r4,3
 401aadc:	a53f0044 	addi	r20,r20,-1023
 401aae0:	28a0b03a 	or	r16,r5,r2
 401aae4:	002b883a 	mov	r21,zero
 401aae8:	000b883a 	mov	r5,zero
 401aaec:	3804d53a 	srli	r2,r7,20
 401aaf0:	3838d7fa 	srli	fp,r7,31
 401aaf4:	04400434 	movhi	r17,16
 401aaf8:	8c7fffc4 	addi	r17,r17,-1
 401aafc:	1081ffcc 	andi	r2,r2,2047
 401ab00:	3025883a 	mov	r18,r6
 401ab04:	3c62703a 	and	r17,r7,r17
 401ab08:	e2803fcc 	andi	r10,fp,255
 401ab0c:	10006d26 	beq	r2,zero,401acc4 <__muldf3+0x254>
 401ab10:	00c1ffc4 	movi	r3,2047
 401ab14:	10c06526 	beq	r2,r3,401acac <__muldf3+0x23c>
 401ab18:	8c400434 	orhi	r17,r17,16
 401ab1c:	300ed77a 	srli	r7,r6,29
 401ab20:	880690fa 	slli	r3,r17,3
 401ab24:	302490fa 	slli	r18,r6,3
 401ab28:	10bf0044 	addi	r2,r2,-1023
 401ab2c:	38e2b03a 	or	r17,r7,r3
 401ab30:	000f883a 	mov	r7,zero
 401ab34:	a087883a 	add	r3,r20,r2
 401ab38:	010003c4 	movi	r4,15
 401ab3c:	3d44b03a 	or	r2,r7,r21
 401ab40:	e5ccf03a 	xor	r6,fp,r23
 401ab44:	1a000044 	addi	r8,r3,1
 401ab48:	20809b36 	bltu	r4,r2,401adb8 <__muldf3+0x348>
 401ab4c:	100490ba 	slli	r2,r2,2
 401ab50:	010100b4 	movhi	r4,1026
 401ab54:	212ad904 	addi	r4,r4,-21660
 401ab58:	1105883a 	add	r2,r2,r4
 401ab5c:	10800017 	ldw	r2,0(r2)
 401ab60:	1000683a 	jmp	r2
 401ab64:	0401adb8 	rdprs	r16,zero,1718
 401ab68:	0401abc4 	movi	r16,1711
 401ab6c:	0401abc4 	movi	r16,1711
 401ab70:	0401abc0 	call	401abc <__alt_mem_sdram-0x3bfe544>
 401ab74:	0401ad94 	movui	r16,1718
 401ab78:	0401ad94 	movui	r16,1718
 401ab7c:	0401ad7c 	xorhi	r16,zero,1717
 401ab80:	0401abc0 	call	401abc <__alt_mem_sdram-0x3bfe544>
 401ab84:	0401ad94 	movui	r16,1718
 401ab88:	0401ad7c 	xorhi	r16,zero,1717
 401ab8c:	0401ad94 	movui	r16,1718
 401ab90:	0401abc0 	call	401abc <__alt_mem_sdram-0x3bfe544>
 401ab94:	0401ada4 	muli	r16,zero,1718
 401ab98:	0401ada4 	muli	r16,zero,1718
 401ab9c:	0401ada4 	muli	r16,zero,1718
 401aba0:	0401b104 	movi	r16,1732
 401aba4:	2404b03a 	or	r2,r4,r16
 401aba8:	1000711e 	bne	r2,zero,401ad70 <__muldf3+0x300>
 401abac:	05400204 	movi	r21,8
 401abb0:	0021883a 	mov	r16,zero
 401abb4:	002d883a 	mov	r22,zero
 401abb8:	01400084 	movi	r5,2
 401abbc:	003fcb06 	br	401aaec <__alt_mem_onchip_memory2_0+0xfc01984c>
 401abc0:	500d883a 	mov	r6,r10
 401abc4:	00800084 	movi	r2,2
 401abc8:	38805926 	beq	r7,r2,401ad30 <__muldf3+0x2c0>
 401abcc:	008000c4 	movi	r2,3
 401abd0:	3881bb26 	beq	r7,r2,401b2c0 <__muldf3+0x850>
 401abd4:	00800044 	movi	r2,1
 401abd8:	3881961e 	bne	r7,r2,401b234 <__muldf3+0x7c4>
 401abdc:	3027883a 	mov	r19,r6
 401abe0:	0005883a 	mov	r2,zero
 401abe4:	0021883a 	mov	r16,zero
 401abe8:	002d883a 	mov	r22,zero
 401abec:	1004953a 	slli	r2,r2,20
 401abf0:	98c03fcc 	andi	r3,r19,255
 401abf4:	04400434 	movhi	r17,16
 401abf8:	8c7fffc4 	addi	r17,r17,-1
 401abfc:	180697fa 	slli	r3,r3,31
 401ac00:	8460703a 	and	r16,r16,r17
 401ac04:	80a0b03a 	or	r16,r16,r2
 401ac08:	80c6b03a 	or	r3,r16,r3
 401ac0c:	b005883a 	mov	r2,r22
 401ac10:	dfc01117 	ldw	ra,68(sp)
 401ac14:	df001017 	ldw	fp,64(sp)
 401ac18:	ddc00f17 	ldw	r23,60(sp)
 401ac1c:	dd800e17 	ldw	r22,56(sp)
 401ac20:	dd400d17 	ldw	r21,52(sp)
 401ac24:	dd000c17 	ldw	r20,48(sp)
 401ac28:	dcc00b17 	ldw	r19,44(sp)
 401ac2c:	dc800a17 	ldw	r18,40(sp)
 401ac30:	dc400917 	ldw	r17,36(sp)
 401ac34:	dc000817 	ldw	r16,32(sp)
 401ac38:	dec01204 	addi	sp,sp,72
 401ac3c:	f800283a 	ret
 401ac40:	2404b03a 	or	r2,r4,r16
 401ac44:	202b883a 	mov	r21,r4
 401ac48:	10004426 	beq	r2,zero,401ad5c <__muldf3+0x2ec>
 401ac4c:	80015126 	beq	r16,zero,401b194 <__muldf3+0x724>
 401ac50:	8009883a 	mov	r4,r16
 401ac54:	d9800715 	stw	r6,28(sp)
 401ac58:	d9c00215 	stw	r7,8(sp)
 401ac5c:	da400415 	stw	r9,16(sp)
 401ac60:	400eb580 	call	400eb58 <__clzsi2>
 401ac64:	d9800717 	ldw	r6,28(sp)
 401ac68:	d9c00217 	ldw	r7,8(sp)
 401ac6c:	da400417 	ldw	r9,16(sp)
 401ac70:	113ffd44 	addi	r4,r2,-11
 401ac74:	00c00704 	movi	r3,28
 401ac78:	19014216 	blt	r3,r4,401b184 <__muldf3+0x714>
 401ac7c:	00c00744 	movi	r3,29
 401ac80:	15bffe04 	addi	r22,r2,-8
 401ac84:	1907c83a 	sub	r3,r3,r4
 401ac88:	85a0983a 	sll	r16,r16,r22
 401ac8c:	a8c6d83a 	srl	r3,r21,r3
 401ac90:	adac983a 	sll	r22,r21,r22
 401ac94:	1c20b03a 	or	r16,r3,r16
 401ac98:	1080fcc4 	addi	r2,r2,1011
 401ac9c:	00a9c83a 	sub	r20,zero,r2
 401aca0:	002b883a 	mov	r21,zero
 401aca4:	000b883a 	mov	r5,zero
 401aca8:	003f9006 	br	401aaec <__alt_mem_onchip_memory2_0+0xfc01984c>
 401acac:	3446b03a 	or	r3,r6,r17
 401acb0:	1800281e 	bne	r3,zero,401ad54 <__muldf3+0x2e4>
 401acb4:	0023883a 	mov	r17,zero
 401acb8:	0025883a 	mov	r18,zero
 401acbc:	01c00084 	movi	r7,2
 401acc0:	003f9c06 	br	401ab34 <__alt_mem_onchip_memory2_0+0xfc019894>
 401acc4:	3446b03a 	or	r3,r6,r17
 401acc8:	18001e26 	beq	r3,zero,401ad44 <__muldf3+0x2d4>
 401accc:	88012126 	beq	r17,zero,401b154 <__muldf3+0x6e4>
 401acd0:	8809883a 	mov	r4,r17
 401acd4:	d9400215 	stw	r5,8(sp)
 401acd8:	d9800715 	stw	r6,28(sp)
 401acdc:	da400415 	stw	r9,16(sp)
 401ace0:	da800315 	stw	r10,12(sp)
 401ace4:	400eb580 	call	400eb58 <__clzsi2>
 401ace8:	d9400217 	ldw	r5,8(sp)
 401acec:	d9800717 	ldw	r6,28(sp)
 401acf0:	da400417 	ldw	r9,16(sp)
 401acf4:	da800317 	ldw	r10,12(sp)
 401acf8:	113ffd44 	addi	r4,r2,-11
 401acfc:	00c00704 	movi	r3,28
 401ad00:	19011016 	blt	r3,r4,401b144 <__muldf3+0x6d4>
 401ad04:	00c00744 	movi	r3,29
 401ad08:	14bffe04 	addi	r18,r2,-8
 401ad0c:	1907c83a 	sub	r3,r3,r4
 401ad10:	8ca2983a 	sll	r17,r17,r18
 401ad14:	30c6d83a 	srl	r3,r6,r3
 401ad18:	34a4983a 	sll	r18,r6,r18
 401ad1c:	1c62b03a 	or	r17,r3,r17
 401ad20:	1080fcc4 	addi	r2,r2,1011
 401ad24:	0085c83a 	sub	r2,zero,r2
 401ad28:	000f883a 	mov	r7,zero
 401ad2c:	003f8106 	br	401ab34 <__alt_mem_onchip_memory2_0+0xfc019894>
 401ad30:	3027883a 	mov	r19,r6
 401ad34:	0081ffc4 	movi	r2,2047
 401ad38:	0021883a 	mov	r16,zero
 401ad3c:	002d883a 	mov	r22,zero
 401ad40:	003faa06 	br	401abec <__alt_mem_onchip_memory2_0+0xfc01994c>
 401ad44:	0023883a 	mov	r17,zero
 401ad48:	0025883a 	mov	r18,zero
 401ad4c:	01c00044 	movi	r7,1
 401ad50:	003f7806 	br	401ab34 <__alt_mem_onchip_memory2_0+0xfc019894>
 401ad54:	01c000c4 	movi	r7,3
 401ad58:	003f7606 	br	401ab34 <__alt_mem_onchip_memory2_0+0xfc019894>
 401ad5c:	05400104 	movi	r21,4
 401ad60:	0021883a 	mov	r16,zero
 401ad64:	002d883a 	mov	r22,zero
 401ad68:	01400044 	movi	r5,1
 401ad6c:	003f5f06 	br	401aaec <__alt_mem_onchip_memory2_0+0xfc01984c>
 401ad70:	05400304 	movi	r21,12
 401ad74:	014000c4 	movi	r5,3
 401ad78:	003f5c06 	br	401aaec <__alt_mem_onchip_memory2_0+0xfc01984c>
 401ad7c:	04000434 	movhi	r16,16
 401ad80:	0027883a 	mov	r19,zero
 401ad84:	843fffc4 	addi	r16,r16,-1
 401ad88:	05bfffc4 	movi	r22,-1
 401ad8c:	0081ffc4 	movi	r2,2047
 401ad90:	003f9606 	br	401abec <__alt_mem_onchip_memory2_0+0xfc01994c>
 401ad94:	8023883a 	mov	r17,r16
 401ad98:	b025883a 	mov	r18,r22
 401ad9c:	280f883a 	mov	r7,r5
 401ada0:	003f8806 	br	401abc4 <__alt_mem_onchip_memory2_0+0xfc019924>
 401ada4:	8023883a 	mov	r17,r16
 401ada8:	b025883a 	mov	r18,r22
 401adac:	480d883a 	mov	r6,r9
 401adb0:	280f883a 	mov	r7,r5
 401adb4:	003f8306 	br	401abc4 <__alt_mem_onchip_memory2_0+0xfc019924>
 401adb8:	b026d43a 	srli	r19,r22,16
 401adbc:	902ed43a 	srli	r23,r18,16
 401adc0:	b5bfffcc 	andi	r22,r22,65535
 401adc4:	94bfffcc 	andi	r18,r18,65535
 401adc8:	b00b883a 	mov	r5,r22
 401adcc:	9009883a 	mov	r4,r18
 401add0:	d8c00515 	stw	r3,20(sp)
 401add4:	d9800715 	stw	r6,28(sp)
 401add8:	da000615 	stw	r8,24(sp)
 401addc:	400dae00 	call	400dae0 <__mulsi3>
 401ade0:	980b883a 	mov	r5,r19
 401ade4:	9009883a 	mov	r4,r18
 401ade8:	1029883a 	mov	r20,r2
 401adec:	400dae00 	call	400dae0 <__mulsi3>
 401adf0:	b80b883a 	mov	r5,r23
 401adf4:	9809883a 	mov	r4,r19
 401adf8:	102b883a 	mov	r21,r2
 401adfc:	400dae00 	call	400dae0 <__mulsi3>
 401ae00:	b809883a 	mov	r4,r23
 401ae04:	b00b883a 	mov	r5,r22
 401ae08:	1039883a 	mov	fp,r2
 401ae0c:	400dae00 	call	400dae0 <__mulsi3>
 401ae10:	a008d43a 	srli	r4,r20,16
 401ae14:	1545883a 	add	r2,r2,r21
 401ae18:	d8c00517 	ldw	r3,20(sp)
 401ae1c:	2085883a 	add	r2,r4,r2
 401ae20:	d9800717 	ldw	r6,28(sp)
 401ae24:	da000617 	ldw	r8,24(sp)
 401ae28:	1540022e 	bgeu	r2,r21,401ae34 <__muldf3+0x3c4>
 401ae2c:	01000074 	movhi	r4,1
 401ae30:	e139883a 	add	fp,fp,r4
 401ae34:	100e943a 	slli	r7,r2,16
 401ae38:	1004d43a 	srli	r2,r2,16
 401ae3c:	882ad43a 	srli	r21,r17,16
 401ae40:	a53fffcc 	andi	r20,r20,65535
 401ae44:	8c7fffcc 	andi	r17,r17,65535
 401ae48:	3d29883a 	add	r20,r7,r20
 401ae4c:	b00b883a 	mov	r5,r22
 401ae50:	8809883a 	mov	r4,r17
 401ae54:	d8c00515 	stw	r3,20(sp)
 401ae58:	d9800715 	stw	r6,28(sp)
 401ae5c:	da000615 	stw	r8,24(sp)
 401ae60:	dd000115 	stw	r20,4(sp)
 401ae64:	d8800015 	stw	r2,0(sp)
 401ae68:	400dae00 	call	400dae0 <__mulsi3>
 401ae6c:	980b883a 	mov	r5,r19
 401ae70:	8809883a 	mov	r4,r17
 401ae74:	d8800215 	stw	r2,8(sp)
 401ae78:	400dae00 	call	400dae0 <__mulsi3>
 401ae7c:	9809883a 	mov	r4,r19
 401ae80:	a80b883a 	mov	r5,r21
 401ae84:	1029883a 	mov	r20,r2
 401ae88:	400dae00 	call	400dae0 <__mulsi3>
 401ae8c:	b00b883a 	mov	r5,r22
 401ae90:	a809883a 	mov	r4,r21
 401ae94:	d8800415 	stw	r2,16(sp)
 401ae98:	400dae00 	call	400dae0 <__mulsi3>
 401ae9c:	d9c00217 	ldw	r7,8(sp)
 401aea0:	1505883a 	add	r2,r2,r20
 401aea4:	d8c00517 	ldw	r3,20(sp)
 401aea8:	3826d43a 	srli	r19,r7,16
 401aeac:	d9800717 	ldw	r6,28(sp)
 401aeb0:	da000617 	ldw	r8,24(sp)
 401aeb4:	9885883a 	add	r2,r19,r2
 401aeb8:	da400417 	ldw	r9,16(sp)
 401aebc:	1500022e 	bgeu	r2,r20,401aec8 <__muldf3+0x458>
 401aec0:	01000074 	movhi	r4,1
 401aec4:	4913883a 	add	r9,r9,r4
 401aec8:	1028d43a 	srli	r20,r2,16
 401aecc:	1004943a 	slli	r2,r2,16
 401aed0:	802cd43a 	srli	r22,r16,16
 401aed4:	843fffcc 	andi	r16,r16,65535
 401aed8:	3cffffcc 	andi	r19,r7,65535
 401aedc:	9009883a 	mov	r4,r18
 401aee0:	800b883a 	mov	r5,r16
 401aee4:	a269883a 	add	r20,r20,r9
 401aee8:	d8c00515 	stw	r3,20(sp)
 401aeec:	d9800715 	stw	r6,28(sp)
 401aef0:	da000615 	stw	r8,24(sp)
 401aef4:	14e7883a 	add	r19,r2,r19
 401aef8:	400dae00 	call	400dae0 <__mulsi3>
 401aefc:	9009883a 	mov	r4,r18
 401af00:	b00b883a 	mov	r5,r22
 401af04:	d8800315 	stw	r2,12(sp)
 401af08:	400dae00 	call	400dae0 <__mulsi3>
 401af0c:	b809883a 	mov	r4,r23
 401af10:	b00b883a 	mov	r5,r22
 401af14:	d8800215 	stw	r2,8(sp)
 401af18:	400dae00 	call	400dae0 <__mulsi3>
 401af1c:	b80b883a 	mov	r5,r23
 401af20:	8009883a 	mov	r4,r16
 401af24:	d8800415 	stw	r2,16(sp)
 401af28:	400dae00 	call	400dae0 <__mulsi3>
 401af2c:	da800317 	ldw	r10,12(sp)
 401af30:	d9c00217 	ldw	r7,8(sp)
 401af34:	d9000017 	ldw	r4,0(sp)
 401af38:	502ed43a 	srli	r23,r10,16
 401af3c:	11c5883a 	add	r2,r2,r7
 401af40:	24e5883a 	add	r18,r4,r19
 401af44:	b885883a 	add	r2,r23,r2
 401af48:	d8c00517 	ldw	r3,20(sp)
 401af4c:	d9800717 	ldw	r6,28(sp)
 401af50:	da000617 	ldw	r8,24(sp)
 401af54:	da400417 	ldw	r9,16(sp)
 401af58:	11c0022e 	bgeu	r2,r7,401af64 <__muldf3+0x4f4>
 401af5c:	01000074 	movhi	r4,1
 401af60:	4913883a 	add	r9,r9,r4
 401af64:	100ed43a 	srli	r7,r2,16
 401af68:	1004943a 	slli	r2,r2,16
 401af6c:	55ffffcc 	andi	r23,r10,65535
 401af70:	3a53883a 	add	r9,r7,r9
 401af74:	8809883a 	mov	r4,r17
 401af78:	800b883a 	mov	r5,r16
 401af7c:	d8c00515 	stw	r3,20(sp)
 401af80:	d9800715 	stw	r6,28(sp)
 401af84:	da000615 	stw	r8,24(sp)
 401af88:	da400415 	stw	r9,16(sp)
 401af8c:	15ef883a 	add	r23,r2,r23
 401af90:	400dae00 	call	400dae0 <__mulsi3>
 401af94:	8809883a 	mov	r4,r17
 401af98:	b00b883a 	mov	r5,r22
 401af9c:	d8800215 	stw	r2,8(sp)
 401afa0:	400dae00 	call	400dae0 <__mulsi3>
 401afa4:	b00b883a 	mov	r5,r22
 401afa8:	a809883a 	mov	r4,r21
 401afac:	d8800315 	stw	r2,12(sp)
 401afb0:	400dae00 	call	400dae0 <__mulsi3>
 401afb4:	8009883a 	mov	r4,r16
 401afb8:	a80b883a 	mov	r5,r21
 401afbc:	1023883a 	mov	r17,r2
 401afc0:	400dae00 	call	400dae0 <__mulsi3>
 401afc4:	d9c00217 	ldw	r7,8(sp)
 401afc8:	da800317 	ldw	r10,12(sp)
 401afcc:	d8c00517 	ldw	r3,20(sp)
 401afd0:	3808d43a 	srli	r4,r7,16
 401afd4:	1285883a 	add	r2,r2,r10
 401afd8:	d9800717 	ldw	r6,28(sp)
 401afdc:	2085883a 	add	r2,r4,r2
 401afe0:	da000617 	ldw	r8,24(sp)
 401afe4:	da400417 	ldw	r9,16(sp)
 401afe8:	1280022e 	bgeu	r2,r10,401aff4 <__muldf3+0x584>
 401afec:	01000074 	movhi	r4,1
 401aff0:	8923883a 	add	r17,r17,r4
 401aff4:	1008943a 	slli	r4,r2,16
 401aff8:	39ffffcc 	andi	r7,r7,65535
 401affc:	e4b9883a 	add	fp,fp,r18
 401b000:	21cf883a 	add	r7,r4,r7
 401b004:	e4e7803a 	cmpltu	r19,fp,r19
 401b008:	3d0f883a 	add	r7,r7,r20
 401b00c:	bf39883a 	add	fp,r23,fp
 401b010:	99c9883a 	add	r4,r19,r7
 401b014:	e5ef803a 	cmpltu	r23,fp,r23
 401b018:	490b883a 	add	r5,r9,r4
 401b01c:	1004d43a 	srli	r2,r2,16
 401b020:	b965883a 	add	r18,r23,r5
 401b024:	24c9803a 	cmpltu	r4,r4,r19
 401b028:	3d29803a 	cmpltu	r20,r7,r20
 401b02c:	a128b03a 	or	r20,r20,r4
 401b030:	95ef803a 	cmpltu	r23,r18,r23
 401b034:	2a53803a 	cmpltu	r9,r5,r9
 401b038:	a0a9883a 	add	r20,r20,r2
 401b03c:	4deeb03a 	or	r23,r9,r23
 401b040:	a5ef883a 	add	r23,r20,r23
 401b044:	bc63883a 	add	r17,r23,r17
 401b048:	e004927a 	slli	r2,fp,9
 401b04c:	d9000117 	ldw	r4,4(sp)
 401b050:	882e927a 	slli	r23,r17,9
 401b054:	9022d5fa 	srli	r17,r18,23
 401b058:	e038d5fa 	srli	fp,fp,23
 401b05c:	1104b03a 	or	r2,r2,r4
 401b060:	9024927a 	slli	r18,r18,9
 401b064:	1004c03a 	cmpne	r2,r2,zero
 401b068:	bc62b03a 	or	r17,r23,r17
 401b06c:	1738b03a 	or	fp,r2,fp
 401b070:	8880402c 	andhi	r2,r17,256
 401b074:	e4a4b03a 	or	r18,fp,r18
 401b078:	10000726 	beq	r2,zero,401b098 <__muldf3+0x628>
 401b07c:	9006d07a 	srli	r3,r18,1
 401b080:	880497fa 	slli	r2,r17,31
 401b084:	9480004c 	andi	r18,r18,1
 401b088:	8822d07a 	srli	r17,r17,1
 401b08c:	1ca4b03a 	or	r18,r3,r18
 401b090:	14a4b03a 	or	r18,r2,r18
 401b094:	4007883a 	mov	r3,r8
 401b098:	1880ffc4 	addi	r2,r3,1023
 401b09c:	0080460e 	bge	zero,r2,401b1b8 <__muldf3+0x748>
 401b0a0:	910001cc 	andi	r4,r18,7
 401b0a4:	20000726 	beq	r4,zero,401b0c4 <__muldf3+0x654>
 401b0a8:	910003cc 	andi	r4,r18,15
 401b0ac:	01400104 	movi	r5,4
 401b0b0:	21400426 	beq	r4,r5,401b0c4 <__muldf3+0x654>
 401b0b4:	9149883a 	add	r4,r18,r5
 401b0b8:	24a5803a 	cmpltu	r18,r4,r18
 401b0bc:	8ca3883a 	add	r17,r17,r18
 401b0c0:	2025883a 	mov	r18,r4
 401b0c4:	8900402c 	andhi	r4,r17,256
 401b0c8:	20000426 	beq	r4,zero,401b0dc <__muldf3+0x66c>
 401b0cc:	18810004 	addi	r2,r3,1024
 401b0d0:	00ffc034 	movhi	r3,65280
 401b0d4:	18ffffc4 	addi	r3,r3,-1
 401b0d8:	88e2703a 	and	r17,r17,r3
 401b0dc:	00c1ff84 	movi	r3,2046
 401b0e0:	18bf1316 	blt	r3,r2,401ad30 <__alt_mem_onchip_memory2_0+0xfc019a90>
 401b0e4:	882c977a 	slli	r22,r17,29
 401b0e8:	9024d0fa 	srli	r18,r18,3
 401b0ec:	8822927a 	slli	r17,r17,9
 401b0f0:	1081ffcc 	andi	r2,r2,2047
 401b0f4:	b4acb03a 	or	r22,r22,r18
 401b0f8:	8820d33a 	srli	r16,r17,12
 401b0fc:	3027883a 	mov	r19,r6
 401b100:	003eba06 	br	401abec <__alt_mem_onchip_memory2_0+0xfc01994c>
 401b104:	8080022c 	andhi	r2,r16,8
 401b108:	10000926 	beq	r2,zero,401b130 <__muldf3+0x6c0>
 401b10c:	8880022c 	andhi	r2,r17,8
 401b110:	1000071e 	bne	r2,zero,401b130 <__muldf3+0x6c0>
 401b114:	00800434 	movhi	r2,16
 401b118:	8c000234 	orhi	r16,r17,8
 401b11c:	10bfffc4 	addi	r2,r2,-1
 401b120:	e027883a 	mov	r19,fp
 401b124:	80a0703a 	and	r16,r16,r2
 401b128:	902d883a 	mov	r22,r18
 401b12c:	003f1706 	br	401ad8c <__alt_mem_onchip_memory2_0+0xfc019aec>
 401b130:	00800434 	movhi	r2,16
 401b134:	84000234 	orhi	r16,r16,8
 401b138:	10bfffc4 	addi	r2,r2,-1
 401b13c:	80a0703a 	and	r16,r16,r2
 401b140:	003f1206 	br	401ad8c <__alt_mem_onchip_memory2_0+0xfc019aec>
 401b144:	147ff604 	addi	r17,r2,-40
 401b148:	3462983a 	sll	r17,r6,r17
 401b14c:	0025883a 	mov	r18,zero
 401b150:	003ef306 	br	401ad20 <__alt_mem_onchip_memory2_0+0xfc019a80>
 401b154:	3009883a 	mov	r4,r6
 401b158:	d9400215 	stw	r5,8(sp)
 401b15c:	d9800715 	stw	r6,28(sp)
 401b160:	da400415 	stw	r9,16(sp)
 401b164:	da800315 	stw	r10,12(sp)
 401b168:	400eb580 	call	400eb58 <__clzsi2>
 401b16c:	10800804 	addi	r2,r2,32
 401b170:	da800317 	ldw	r10,12(sp)
 401b174:	da400417 	ldw	r9,16(sp)
 401b178:	d9800717 	ldw	r6,28(sp)
 401b17c:	d9400217 	ldw	r5,8(sp)
 401b180:	003edd06 	br	401acf8 <__alt_mem_onchip_memory2_0+0xfc019a58>
 401b184:	143ff604 	addi	r16,r2,-40
 401b188:	ac20983a 	sll	r16,r21,r16
 401b18c:	002d883a 	mov	r22,zero
 401b190:	003ec106 	br	401ac98 <__alt_mem_onchip_memory2_0+0xfc0199f8>
 401b194:	d9800715 	stw	r6,28(sp)
 401b198:	d9c00215 	stw	r7,8(sp)
 401b19c:	da400415 	stw	r9,16(sp)
 401b1a0:	400eb580 	call	400eb58 <__clzsi2>
 401b1a4:	10800804 	addi	r2,r2,32
 401b1a8:	da400417 	ldw	r9,16(sp)
 401b1ac:	d9c00217 	ldw	r7,8(sp)
 401b1b0:	d9800717 	ldw	r6,28(sp)
 401b1b4:	003eae06 	br	401ac70 <__alt_mem_onchip_memory2_0+0xfc0199d0>
 401b1b8:	00c00044 	movi	r3,1
 401b1bc:	1887c83a 	sub	r3,r3,r2
 401b1c0:	01000e04 	movi	r4,56
 401b1c4:	20fe8516 	blt	r4,r3,401abdc <__alt_mem_onchip_memory2_0+0xfc01993c>
 401b1c8:	010007c4 	movi	r4,31
 401b1cc:	20c01b16 	blt	r4,r3,401b23c <__muldf3+0x7cc>
 401b1d0:	00800804 	movi	r2,32
 401b1d4:	10c5c83a 	sub	r2,r2,r3
 401b1d8:	888a983a 	sll	r5,r17,r2
 401b1dc:	90c8d83a 	srl	r4,r18,r3
 401b1e0:	9084983a 	sll	r2,r18,r2
 401b1e4:	88e2d83a 	srl	r17,r17,r3
 401b1e8:	2906b03a 	or	r3,r5,r4
 401b1ec:	1004c03a 	cmpne	r2,r2,zero
 401b1f0:	1886b03a 	or	r3,r3,r2
 401b1f4:	188001cc 	andi	r2,r3,7
 401b1f8:	10000726 	beq	r2,zero,401b218 <__muldf3+0x7a8>
 401b1fc:	188003cc 	andi	r2,r3,15
 401b200:	01000104 	movi	r4,4
 401b204:	11000426 	beq	r2,r4,401b218 <__muldf3+0x7a8>
 401b208:	1805883a 	mov	r2,r3
 401b20c:	10c00104 	addi	r3,r2,4
 401b210:	1885803a 	cmpltu	r2,r3,r2
 401b214:	88a3883a 	add	r17,r17,r2
 401b218:	8880202c 	andhi	r2,r17,128
 401b21c:	10001c26 	beq	r2,zero,401b290 <__muldf3+0x820>
 401b220:	3027883a 	mov	r19,r6
 401b224:	00800044 	movi	r2,1
 401b228:	0021883a 	mov	r16,zero
 401b22c:	002d883a 	mov	r22,zero
 401b230:	003e6e06 	br	401abec <__alt_mem_onchip_memory2_0+0xfc01994c>
 401b234:	4007883a 	mov	r3,r8
 401b238:	003f9706 	br	401b098 <__alt_mem_onchip_memory2_0+0xfc019df8>
 401b23c:	017ff844 	movi	r5,-31
 401b240:	2885c83a 	sub	r2,r5,r2
 401b244:	888ad83a 	srl	r5,r17,r2
 401b248:	00800804 	movi	r2,32
 401b24c:	18801a26 	beq	r3,r2,401b2b8 <__muldf3+0x848>
 401b250:	01001004 	movi	r4,64
 401b254:	20c7c83a 	sub	r3,r4,r3
 401b258:	88e2983a 	sll	r17,r17,r3
 401b25c:	8ca4b03a 	or	r18,r17,r18
 401b260:	9004c03a 	cmpne	r2,r18,zero
 401b264:	2884b03a 	or	r2,r5,r2
 401b268:	144001cc 	andi	r17,r2,7
 401b26c:	88000d1e 	bne	r17,zero,401b2a4 <__muldf3+0x834>
 401b270:	0021883a 	mov	r16,zero
 401b274:	102cd0fa 	srli	r22,r2,3
 401b278:	3027883a 	mov	r19,r6
 401b27c:	0005883a 	mov	r2,zero
 401b280:	b46cb03a 	or	r22,r22,r17
 401b284:	003e5906 	br	401abec <__alt_mem_onchip_memory2_0+0xfc01994c>
 401b288:	1007883a 	mov	r3,r2
 401b28c:	0023883a 	mov	r17,zero
 401b290:	8820927a 	slli	r16,r17,9
 401b294:	1805883a 	mov	r2,r3
 401b298:	8822977a 	slli	r17,r17,29
 401b29c:	8020d33a 	srli	r16,r16,12
 401b2a0:	003ff406 	br	401b274 <__alt_mem_onchip_memory2_0+0xfc019fd4>
 401b2a4:	10c003cc 	andi	r3,r2,15
 401b2a8:	01000104 	movi	r4,4
 401b2ac:	193ff626 	beq	r3,r4,401b288 <__alt_mem_onchip_memory2_0+0xfc019fe8>
 401b2b0:	0023883a 	mov	r17,zero
 401b2b4:	003fd506 	br	401b20c <__alt_mem_onchip_memory2_0+0xfc019f6c>
 401b2b8:	0023883a 	mov	r17,zero
 401b2bc:	003fe706 	br	401b25c <__alt_mem_onchip_memory2_0+0xfc019fbc>
 401b2c0:	00800434 	movhi	r2,16
 401b2c4:	8c000234 	orhi	r16,r17,8
 401b2c8:	10bfffc4 	addi	r2,r2,-1
 401b2cc:	3027883a 	mov	r19,r6
 401b2d0:	80a0703a 	and	r16,r16,r2
 401b2d4:	902d883a 	mov	r22,r18
 401b2d8:	003eac06 	br	401ad8c <__alt_mem_onchip_memory2_0+0xfc019aec>

0401b2dc <__subdf3>:
 401b2dc:	02000434 	movhi	r8,16
 401b2e0:	423fffc4 	addi	r8,r8,-1
 401b2e4:	defffb04 	addi	sp,sp,-20
 401b2e8:	2a14703a 	and	r10,r5,r8
 401b2ec:	3812d53a 	srli	r9,r7,20
 401b2f0:	3a10703a 	and	r8,r7,r8
 401b2f4:	2006d77a 	srli	r3,r4,29
 401b2f8:	3004d77a 	srli	r2,r6,29
 401b2fc:	dc000015 	stw	r16,0(sp)
 401b300:	501490fa 	slli	r10,r10,3
 401b304:	2820d53a 	srli	r16,r5,20
 401b308:	401090fa 	slli	r8,r8,3
 401b30c:	dc800215 	stw	r18,8(sp)
 401b310:	dc400115 	stw	r17,4(sp)
 401b314:	dfc00415 	stw	ra,16(sp)
 401b318:	202290fa 	slli	r17,r4,3
 401b31c:	dcc00315 	stw	r19,12(sp)
 401b320:	4a41ffcc 	andi	r9,r9,2047
 401b324:	0101ffc4 	movi	r4,2047
 401b328:	2824d7fa 	srli	r18,r5,31
 401b32c:	8401ffcc 	andi	r16,r16,2047
 401b330:	50c6b03a 	or	r3,r10,r3
 401b334:	380ed7fa 	srli	r7,r7,31
 401b338:	408ab03a 	or	r5,r8,r2
 401b33c:	300c90fa 	slli	r6,r6,3
 401b340:	49009626 	beq	r9,r4,401b59c <__subdf3+0x2c0>
 401b344:	39c0005c 	xori	r7,r7,1
 401b348:	8245c83a 	sub	r2,r16,r9
 401b34c:	3c807426 	beq	r7,r18,401b520 <__subdf3+0x244>
 401b350:	0080af0e 	bge	zero,r2,401b610 <__subdf3+0x334>
 401b354:	48002a1e 	bne	r9,zero,401b400 <__subdf3+0x124>
 401b358:	2988b03a 	or	r4,r5,r6
 401b35c:	20009a1e 	bne	r4,zero,401b5c8 <__subdf3+0x2ec>
 401b360:	888001cc 	andi	r2,r17,7
 401b364:	10000726 	beq	r2,zero,401b384 <__subdf3+0xa8>
 401b368:	888003cc 	andi	r2,r17,15
 401b36c:	01000104 	movi	r4,4
 401b370:	11000426 	beq	r2,r4,401b384 <__subdf3+0xa8>
 401b374:	890b883a 	add	r5,r17,r4
 401b378:	2c63803a 	cmpltu	r17,r5,r17
 401b37c:	1c47883a 	add	r3,r3,r17
 401b380:	2823883a 	mov	r17,r5
 401b384:	1880202c 	andhi	r2,r3,128
 401b388:	10005926 	beq	r2,zero,401b4f0 <__subdf3+0x214>
 401b38c:	84000044 	addi	r16,r16,1
 401b390:	0081ffc4 	movi	r2,2047
 401b394:	8080be26 	beq	r16,r2,401b690 <__subdf3+0x3b4>
 401b398:	017fe034 	movhi	r5,65408
 401b39c:	297fffc4 	addi	r5,r5,-1
 401b3a0:	1946703a 	and	r3,r3,r5
 401b3a4:	1804977a 	slli	r2,r3,29
 401b3a8:	1806927a 	slli	r3,r3,9
 401b3ac:	8822d0fa 	srli	r17,r17,3
 401b3b0:	8401ffcc 	andi	r16,r16,2047
 401b3b4:	180ad33a 	srli	r5,r3,12
 401b3b8:	9100004c 	andi	r4,r18,1
 401b3bc:	1444b03a 	or	r2,r2,r17
 401b3c0:	80c1ffcc 	andi	r3,r16,2047
 401b3c4:	1820953a 	slli	r16,r3,20
 401b3c8:	20c03fcc 	andi	r3,r4,255
 401b3cc:	180897fa 	slli	r4,r3,31
 401b3d0:	00c00434 	movhi	r3,16
 401b3d4:	18ffffc4 	addi	r3,r3,-1
 401b3d8:	28c6703a 	and	r3,r5,r3
 401b3dc:	1c06b03a 	or	r3,r3,r16
 401b3e0:	1906b03a 	or	r3,r3,r4
 401b3e4:	dfc00417 	ldw	ra,16(sp)
 401b3e8:	dcc00317 	ldw	r19,12(sp)
 401b3ec:	dc800217 	ldw	r18,8(sp)
 401b3f0:	dc400117 	ldw	r17,4(sp)
 401b3f4:	dc000017 	ldw	r16,0(sp)
 401b3f8:	dec00504 	addi	sp,sp,20
 401b3fc:	f800283a 	ret
 401b400:	0101ffc4 	movi	r4,2047
 401b404:	813fd626 	beq	r16,r4,401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401b408:	29402034 	orhi	r5,r5,128
 401b40c:	01000e04 	movi	r4,56
 401b410:	2080a316 	blt	r4,r2,401b6a0 <__subdf3+0x3c4>
 401b414:	010007c4 	movi	r4,31
 401b418:	2080c616 	blt	r4,r2,401b734 <__subdf3+0x458>
 401b41c:	01000804 	movi	r4,32
 401b420:	2089c83a 	sub	r4,r4,r2
 401b424:	2910983a 	sll	r8,r5,r4
 401b428:	308ed83a 	srl	r7,r6,r2
 401b42c:	3108983a 	sll	r4,r6,r4
 401b430:	2884d83a 	srl	r2,r5,r2
 401b434:	41ccb03a 	or	r6,r8,r7
 401b438:	2008c03a 	cmpne	r4,r4,zero
 401b43c:	310cb03a 	or	r6,r6,r4
 401b440:	898dc83a 	sub	r6,r17,r6
 401b444:	89a3803a 	cmpltu	r17,r17,r6
 401b448:	1887c83a 	sub	r3,r3,r2
 401b44c:	1c47c83a 	sub	r3,r3,r17
 401b450:	3023883a 	mov	r17,r6
 401b454:	1880202c 	andhi	r2,r3,128
 401b458:	10002326 	beq	r2,zero,401b4e8 <__subdf3+0x20c>
 401b45c:	04c02034 	movhi	r19,128
 401b460:	9cffffc4 	addi	r19,r19,-1
 401b464:	1ce6703a 	and	r19,r3,r19
 401b468:	98007a26 	beq	r19,zero,401b654 <__subdf3+0x378>
 401b46c:	9809883a 	mov	r4,r19
 401b470:	400eb580 	call	400eb58 <__clzsi2>
 401b474:	113ffe04 	addi	r4,r2,-8
 401b478:	00c007c4 	movi	r3,31
 401b47c:	19007b16 	blt	r3,r4,401b66c <__subdf3+0x390>
 401b480:	00800804 	movi	r2,32
 401b484:	1105c83a 	sub	r2,r2,r4
 401b488:	8884d83a 	srl	r2,r17,r2
 401b48c:	9906983a 	sll	r3,r19,r4
 401b490:	8922983a 	sll	r17,r17,r4
 401b494:	10c4b03a 	or	r2,r2,r3
 401b498:	24007816 	blt	r4,r16,401b67c <__subdf3+0x3a0>
 401b49c:	2421c83a 	sub	r16,r4,r16
 401b4a0:	80c00044 	addi	r3,r16,1
 401b4a4:	010007c4 	movi	r4,31
 401b4a8:	20c09516 	blt	r4,r3,401b700 <__subdf3+0x424>
 401b4ac:	01400804 	movi	r5,32
 401b4b0:	28cbc83a 	sub	r5,r5,r3
 401b4b4:	88c8d83a 	srl	r4,r17,r3
 401b4b8:	8962983a 	sll	r17,r17,r5
 401b4bc:	114a983a 	sll	r5,r2,r5
 401b4c0:	10c6d83a 	srl	r3,r2,r3
 401b4c4:	8804c03a 	cmpne	r2,r17,zero
 401b4c8:	290ab03a 	or	r5,r5,r4
 401b4cc:	28a2b03a 	or	r17,r5,r2
 401b4d0:	0021883a 	mov	r16,zero
 401b4d4:	003fa206 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401b4d8:	2090b03a 	or	r8,r4,r2
 401b4dc:	40018e26 	beq	r8,zero,401bb18 <__subdf3+0x83c>
 401b4e0:	1007883a 	mov	r3,r2
 401b4e4:	2023883a 	mov	r17,r4
 401b4e8:	888001cc 	andi	r2,r17,7
 401b4ec:	103f9e1e 	bne	r2,zero,401b368 <__alt_mem_onchip_memory2_0+0xfc01a0c8>
 401b4f0:	1804977a 	slli	r2,r3,29
 401b4f4:	8822d0fa 	srli	r17,r17,3
 401b4f8:	1810d0fa 	srli	r8,r3,3
 401b4fc:	9100004c 	andi	r4,r18,1
 401b500:	1444b03a 	or	r2,r2,r17
 401b504:	00c1ffc4 	movi	r3,2047
 401b508:	80c02826 	beq	r16,r3,401b5ac <__subdf3+0x2d0>
 401b50c:	01400434 	movhi	r5,16
 401b510:	297fffc4 	addi	r5,r5,-1
 401b514:	80e0703a 	and	r16,r16,r3
 401b518:	414a703a 	and	r5,r8,r5
 401b51c:	003fa806 	br	401b3c0 <__alt_mem_onchip_memory2_0+0xfc01a120>
 401b520:	0080630e 	bge	zero,r2,401b6b0 <__subdf3+0x3d4>
 401b524:	48003026 	beq	r9,zero,401b5e8 <__subdf3+0x30c>
 401b528:	0101ffc4 	movi	r4,2047
 401b52c:	813f8c26 	beq	r16,r4,401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401b530:	29402034 	orhi	r5,r5,128
 401b534:	01000e04 	movi	r4,56
 401b538:	2080a90e 	bge	r4,r2,401b7e0 <__subdf3+0x504>
 401b53c:	298cb03a 	or	r6,r5,r6
 401b540:	3012c03a 	cmpne	r9,r6,zero
 401b544:	0005883a 	mov	r2,zero
 401b548:	4c53883a 	add	r9,r9,r17
 401b54c:	4c63803a 	cmpltu	r17,r9,r17
 401b550:	10c7883a 	add	r3,r2,r3
 401b554:	88c7883a 	add	r3,r17,r3
 401b558:	4823883a 	mov	r17,r9
 401b55c:	1880202c 	andhi	r2,r3,128
 401b560:	1000d026 	beq	r2,zero,401b8a4 <__subdf3+0x5c8>
 401b564:	84000044 	addi	r16,r16,1
 401b568:	0081ffc4 	movi	r2,2047
 401b56c:	8080fe26 	beq	r16,r2,401b968 <__subdf3+0x68c>
 401b570:	00bfe034 	movhi	r2,65408
 401b574:	10bfffc4 	addi	r2,r2,-1
 401b578:	1886703a 	and	r3,r3,r2
 401b57c:	880ad07a 	srli	r5,r17,1
 401b580:	180497fa 	slli	r2,r3,31
 401b584:	8900004c 	andi	r4,r17,1
 401b588:	2922b03a 	or	r17,r5,r4
 401b58c:	1806d07a 	srli	r3,r3,1
 401b590:	1462b03a 	or	r17,r2,r17
 401b594:	3825883a 	mov	r18,r7
 401b598:	003f7106 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401b59c:	2984b03a 	or	r2,r5,r6
 401b5a0:	103f6826 	beq	r2,zero,401b344 <__alt_mem_onchip_memory2_0+0xfc01a0a4>
 401b5a4:	39c03fcc 	andi	r7,r7,255
 401b5a8:	003f6706 	br	401b348 <__alt_mem_onchip_memory2_0+0xfc01a0a8>
 401b5ac:	4086b03a 	or	r3,r8,r2
 401b5b0:	18015226 	beq	r3,zero,401bafc <__subdf3+0x820>
 401b5b4:	00c00434 	movhi	r3,16
 401b5b8:	41400234 	orhi	r5,r8,8
 401b5bc:	18ffffc4 	addi	r3,r3,-1
 401b5c0:	28ca703a 	and	r5,r5,r3
 401b5c4:	003f7e06 	br	401b3c0 <__alt_mem_onchip_memory2_0+0xfc01a120>
 401b5c8:	10bfffc4 	addi	r2,r2,-1
 401b5cc:	1000491e 	bne	r2,zero,401b6f4 <__subdf3+0x418>
 401b5d0:	898fc83a 	sub	r7,r17,r6
 401b5d4:	89e3803a 	cmpltu	r17,r17,r7
 401b5d8:	1947c83a 	sub	r3,r3,r5
 401b5dc:	1c47c83a 	sub	r3,r3,r17
 401b5e0:	3823883a 	mov	r17,r7
 401b5e4:	003f9b06 	br	401b454 <__alt_mem_onchip_memory2_0+0xfc01a1b4>
 401b5e8:	2988b03a 	or	r4,r5,r6
 401b5ec:	203f5c26 	beq	r4,zero,401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401b5f0:	10bfffc4 	addi	r2,r2,-1
 401b5f4:	1000931e 	bne	r2,zero,401b844 <__subdf3+0x568>
 401b5f8:	898d883a 	add	r6,r17,r6
 401b5fc:	3463803a 	cmpltu	r17,r6,r17
 401b600:	1947883a 	add	r3,r3,r5
 401b604:	88c7883a 	add	r3,r17,r3
 401b608:	3023883a 	mov	r17,r6
 401b60c:	003fd306 	br	401b55c <__alt_mem_onchip_memory2_0+0xfc01a2bc>
 401b610:	1000541e 	bne	r2,zero,401b764 <__subdf3+0x488>
 401b614:	80800044 	addi	r2,r16,1
 401b618:	1081ffcc 	andi	r2,r2,2047
 401b61c:	01000044 	movi	r4,1
 401b620:	2080a20e 	bge	r4,r2,401b8ac <__subdf3+0x5d0>
 401b624:	8989c83a 	sub	r4,r17,r6
 401b628:	8905803a 	cmpltu	r2,r17,r4
 401b62c:	1967c83a 	sub	r19,r3,r5
 401b630:	98a7c83a 	sub	r19,r19,r2
 401b634:	9880202c 	andhi	r2,r19,128
 401b638:	10006326 	beq	r2,zero,401b7c8 <__subdf3+0x4ec>
 401b63c:	3463c83a 	sub	r17,r6,r17
 401b640:	28c7c83a 	sub	r3,r5,r3
 401b644:	344d803a 	cmpltu	r6,r6,r17
 401b648:	19a7c83a 	sub	r19,r3,r6
 401b64c:	3825883a 	mov	r18,r7
 401b650:	983f861e 	bne	r19,zero,401b46c <__alt_mem_onchip_memory2_0+0xfc01a1cc>
 401b654:	8809883a 	mov	r4,r17
 401b658:	400eb580 	call	400eb58 <__clzsi2>
 401b65c:	10800804 	addi	r2,r2,32
 401b660:	113ffe04 	addi	r4,r2,-8
 401b664:	00c007c4 	movi	r3,31
 401b668:	193f850e 	bge	r3,r4,401b480 <__alt_mem_onchip_memory2_0+0xfc01a1e0>
 401b66c:	10bff604 	addi	r2,r2,-40
 401b670:	8884983a 	sll	r2,r17,r2
 401b674:	0023883a 	mov	r17,zero
 401b678:	243f880e 	bge	r4,r16,401b49c <__alt_mem_onchip_memory2_0+0xfc01a1fc>
 401b67c:	00ffe034 	movhi	r3,65408
 401b680:	18ffffc4 	addi	r3,r3,-1
 401b684:	8121c83a 	sub	r16,r16,r4
 401b688:	10c6703a 	and	r3,r2,r3
 401b68c:	003f3406 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401b690:	9100004c 	andi	r4,r18,1
 401b694:	000b883a 	mov	r5,zero
 401b698:	0005883a 	mov	r2,zero
 401b69c:	003f4806 	br	401b3c0 <__alt_mem_onchip_memory2_0+0xfc01a120>
 401b6a0:	298cb03a 	or	r6,r5,r6
 401b6a4:	300cc03a 	cmpne	r6,r6,zero
 401b6a8:	0005883a 	mov	r2,zero
 401b6ac:	003f6406 	br	401b440 <__alt_mem_onchip_memory2_0+0xfc01a1a0>
 401b6b0:	10009a1e 	bne	r2,zero,401b91c <__subdf3+0x640>
 401b6b4:	82400044 	addi	r9,r16,1
 401b6b8:	4881ffcc 	andi	r2,r9,2047
 401b6bc:	02800044 	movi	r10,1
 401b6c0:	5080670e 	bge	r10,r2,401b860 <__subdf3+0x584>
 401b6c4:	0081ffc4 	movi	r2,2047
 401b6c8:	4880af26 	beq	r9,r2,401b988 <__subdf3+0x6ac>
 401b6cc:	898d883a 	add	r6,r17,r6
 401b6d0:	1945883a 	add	r2,r3,r5
 401b6d4:	3447803a 	cmpltu	r3,r6,r17
 401b6d8:	1887883a 	add	r3,r3,r2
 401b6dc:	182297fa 	slli	r17,r3,31
 401b6e0:	300cd07a 	srli	r6,r6,1
 401b6e4:	1806d07a 	srli	r3,r3,1
 401b6e8:	4821883a 	mov	r16,r9
 401b6ec:	89a2b03a 	or	r17,r17,r6
 401b6f0:	003f1b06 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401b6f4:	0101ffc4 	movi	r4,2047
 401b6f8:	813f441e 	bne	r16,r4,401b40c <__alt_mem_onchip_memory2_0+0xfc01a16c>
 401b6fc:	003f1806 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401b700:	843ff844 	addi	r16,r16,-31
 401b704:	01400804 	movi	r5,32
 401b708:	1408d83a 	srl	r4,r2,r16
 401b70c:	19405026 	beq	r3,r5,401b850 <__subdf3+0x574>
 401b710:	01401004 	movi	r5,64
 401b714:	28c7c83a 	sub	r3,r5,r3
 401b718:	10c4983a 	sll	r2,r2,r3
 401b71c:	88a2b03a 	or	r17,r17,r2
 401b720:	8822c03a 	cmpne	r17,r17,zero
 401b724:	2462b03a 	or	r17,r4,r17
 401b728:	0007883a 	mov	r3,zero
 401b72c:	0021883a 	mov	r16,zero
 401b730:	003f6d06 	br	401b4e8 <__alt_mem_onchip_memory2_0+0xfc01a248>
 401b734:	11fff804 	addi	r7,r2,-32
 401b738:	01000804 	movi	r4,32
 401b73c:	29ced83a 	srl	r7,r5,r7
 401b740:	11004526 	beq	r2,r4,401b858 <__subdf3+0x57c>
 401b744:	01001004 	movi	r4,64
 401b748:	2089c83a 	sub	r4,r4,r2
 401b74c:	2904983a 	sll	r2,r5,r4
 401b750:	118cb03a 	or	r6,r2,r6
 401b754:	300cc03a 	cmpne	r6,r6,zero
 401b758:	398cb03a 	or	r6,r7,r6
 401b75c:	0005883a 	mov	r2,zero
 401b760:	003f3706 	br	401b440 <__alt_mem_onchip_memory2_0+0xfc01a1a0>
 401b764:	80002a26 	beq	r16,zero,401b810 <__subdf3+0x534>
 401b768:	0101ffc4 	movi	r4,2047
 401b76c:	49006626 	beq	r9,r4,401b908 <__subdf3+0x62c>
 401b770:	0085c83a 	sub	r2,zero,r2
 401b774:	18c02034 	orhi	r3,r3,128
 401b778:	01000e04 	movi	r4,56
 401b77c:	20807e16 	blt	r4,r2,401b978 <__subdf3+0x69c>
 401b780:	010007c4 	movi	r4,31
 401b784:	2080e716 	blt	r4,r2,401bb24 <__subdf3+0x848>
 401b788:	01000804 	movi	r4,32
 401b78c:	2089c83a 	sub	r4,r4,r2
 401b790:	1914983a 	sll	r10,r3,r4
 401b794:	8890d83a 	srl	r8,r17,r2
 401b798:	8908983a 	sll	r4,r17,r4
 401b79c:	1884d83a 	srl	r2,r3,r2
 401b7a0:	5222b03a 	or	r17,r10,r8
 401b7a4:	2006c03a 	cmpne	r3,r4,zero
 401b7a8:	88e2b03a 	or	r17,r17,r3
 401b7ac:	3463c83a 	sub	r17,r6,r17
 401b7b0:	2885c83a 	sub	r2,r5,r2
 401b7b4:	344d803a 	cmpltu	r6,r6,r17
 401b7b8:	1187c83a 	sub	r3,r2,r6
 401b7bc:	4821883a 	mov	r16,r9
 401b7c0:	3825883a 	mov	r18,r7
 401b7c4:	003f2306 	br	401b454 <__alt_mem_onchip_memory2_0+0xfc01a1b4>
 401b7c8:	24d0b03a 	or	r8,r4,r19
 401b7cc:	40001b1e 	bne	r8,zero,401b83c <__subdf3+0x560>
 401b7d0:	0005883a 	mov	r2,zero
 401b7d4:	0009883a 	mov	r4,zero
 401b7d8:	0021883a 	mov	r16,zero
 401b7dc:	003f4906 	br	401b504 <__alt_mem_onchip_memory2_0+0xfc01a264>
 401b7e0:	010007c4 	movi	r4,31
 401b7e4:	20803a16 	blt	r4,r2,401b8d0 <__subdf3+0x5f4>
 401b7e8:	01000804 	movi	r4,32
 401b7ec:	2089c83a 	sub	r4,r4,r2
 401b7f0:	2912983a 	sll	r9,r5,r4
 401b7f4:	3090d83a 	srl	r8,r6,r2
 401b7f8:	3108983a 	sll	r4,r6,r4
 401b7fc:	2884d83a 	srl	r2,r5,r2
 401b800:	4a12b03a 	or	r9,r9,r8
 401b804:	2008c03a 	cmpne	r4,r4,zero
 401b808:	4912b03a 	or	r9,r9,r4
 401b80c:	003f4e06 	br	401b548 <__alt_mem_onchip_memory2_0+0xfc01a2a8>
 401b810:	1c48b03a 	or	r4,r3,r17
 401b814:	20003c26 	beq	r4,zero,401b908 <__subdf3+0x62c>
 401b818:	0084303a 	nor	r2,zero,r2
 401b81c:	1000381e 	bne	r2,zero,401b900 <__subdf3+0x624>
 401b820:	3463c83a 	sub	r17,r6,r17
 401b824:	28c5c83a 	sub	r2,r5,r3
 401b828:	344d803a 	cmpltu	r6,r6,r17
 401b82c:	1187c83a 	sub	r3,r2,r6
 401b830:	4821883a 	mov	r16,r9
 401b834:	3825883a 	mov	r18,r7
 401b838:	003f0606 	br	401b454 <__alt_mem_onchip_memory2_0+0xfc01a1b4>
 401b83c:	2023883a 	mov	r17,r4
 401b840:	003f0906 	br	401b468 <__alt_mem_onchip_memory2_0+0xfc01a1c8>
 401b844:	0101ffc4 	movi	r4,2047
 401b848:	813f3a1e 	bne	r16,r4,401b534 <__alt_mem_onchip_memory2_0+0xfc01a294>
 401b84c:	003ec406 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401b850:	0005883a 	mov	r2,zero
 401b854:	003fb106 	br	401b71c <__alt_mem_onchip_memory2_0+0xfc01a47c>
 401b858:	0005883a 	mov	r2,zero
 401b85c:	003fbc06 	br	401b750 <__alt_mem_onchip_memory2_0+0xfc01a4b0>
 401b860:	1c44b03a 	or	r2,r3,r17
 401b864:	80008e1e 	bne	r16,zero,401baa0 <__subdf3+0x7c4>
 401b868:	1000c826 	beq	r2,zero,401bb8c <__subdf3+0x8b0>
 401b86c:	2984b03a 	or	r2,r5,r6
 401b870:	103ebb26 	beq	r2,zero,401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401b874:	8989883a 	add	r4,r17,r6
 401b878:	1945883a 	add	r2,r3,r5
 401b87c:	2447803a 	cmpltu	r3,r4,r17
 401b880:	1887883a 	add	r3,r3,r2
 401b884:	1880202c 	andhi	r2,r3,128
 401b888:	2023883a 	mov	r17,r4
 401b88c:	103f1626 	beq	r2,zero,401b4e8 <__alt_mem_onchip_memory2_0+0xfc01a248>
 401b890:	00bfe034 	movhi	r2,65408
 401b894:	10bfffc4 	addi	r2,r2,-1
 401b898:	5021883a 	mov	r16,r10
 401b89c:	1886703a 	and	r3,r3,r2
 401b8a0:	003eaf06 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401b8a4:	3825883a 	mov	r18,r7
 401b8a8:	003f0f06 	br	401b4e8 <__alt_mem_onchip_memory2_0+0xfc01a248>
 401b8ac:	1c44b03a 	or	r2,r3,r17
 401b8b0:	8000251e 	bne	r16,zero,401b948 <__subdf3+0x66c>
 401b8b4:	1000661e 	bne	r2,zero,401ba50 <__subdf3+0x774>
 401b8b8:	2990b03a 	or	r8,r5,r6
 401b8bc:	40009626 	beq	r8,zero,401bb18 <__subdf3+0x83c>
 401b8c0:	2807883a 	mov	r3,r5
 401b8c4:	3023883a 	mov	r17,r6
 401b8c8:	3825883a 	mov	r18,r7
 401b8cc:	003ea406 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401b8d0:	127ff804 	addi	r9,r2,-32
 401b8d4:	01000804 	movi	r4,32
 401b8d8:	2a52d83a 	srl	r9,r5,r9
 401b8dc:	11008c26 	beq	r2,r4,401bb10 <__subdf3+0x834>
 401b8e0:	01001004 	movi	r4,64
 401b8e4:	2085c83a 	sub	r2,r4,r2
 401b8e8:	2884983a 	sll	r2,r5,r2
 401b8ec:	118cb03a 	or	r6,r2,r6
 401b8f0:	300cc03a 	cmpne	r6,r6,zero
 401b8f4:	4992b03a 	or	r9,r9,r6
 401b8f8:	0005883a 	mov	r2,zero
 401b8fc:	003f1206 	br	401b548 <__alt_mem_onchip_memory2_0+0xfc01a2a8>
 401b900:	0101ffc4 	movi	r4,2047
 401b904:	493f9c1e 	bne	r9,r4,401b778 <__alt_mem_onchip_memory2_0+0xfc01a4d8>
 401b908:	2807883a 	mov	r3,r5
 401b90c:	3023883a 	mov	r17,r6
 401b910:	4821883a 	mov	r16,r9
 401b914:	3825883a 	mov	r18,r7
 401b918:	003e9106 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401b91c:	80001f1e 	bne	r16,zero,401b99c <__subdf3+0x6c0>
 401b920:	1c48b03a 	or	r4,r3,r17
 401b924:	20005a26 	beq	r4,zero,401ba90 <__subdf3+0x7b4>
 401b928:	0084303a 	nor	r2,zero,r2
 401b92c:	1000561e 	bne	r2,zero,401ba88 <__subdf3+0x7ac>
 401b930:	89a3883a 	add	r17,r17,r6
 401b934:	1945883a 	add	r2,r3,r5
 401b938:	898d803a 	cmpltu	r6,r17,r6
 401b93c:	3087883a 	add	r3,r6,r2
 401b940:	4821883a 	mov	r16,r9
 401b944:	003f0506 	br	401b55c <__alt_mem_onchip_memory2_0+0xfc01a2bc>
 401b948:	10002b1e 	bne	r2,zero,401b9f8 <__subdf3+0x71c>
 401b94c:	2984b03a 	or	r2,r5,r6
 401b950:	10008026 	beq	r2,zero,401bb54 <__subdf3+0x878>
 401b954:	2807883a 	mov	r3,r5
 401b958:	3023883a 	mov	r17,r6
 401b95c:	3825883a 	mov	r18,r7
 401b960:	0401ffc4 	movi	r16,2047
 401b964:	003e7e06 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401b968:	3809883a 	mov	r4,r7
 401b96c:	0011883a 	mov	r8,zero
 401b970:	0005883a 	mov	r2,zero
 401b974:	003ee306 	br	401b504 <__alt_mem_onchip_memory2_0+0xfc01a264>
 401b978:	1c62b03a 	or	r17,r3,r17
 401b97c:	8822c03a 	cmpne	r17,r17,zero
 401b980:	0005883a 	mov	r2,zero
 401b984:	003f8906 	br	401b7ac <__alt_mem_onchip_memory2_0+0xfc01a50c>
 401b988:	3809883a 	mov	r4,r7
 401b98c:	4821883a 	mov	r16,r9
 401b990:	0011883a 	mov	r8,zero
 401b994:	0005883a 	mov	r2,zero
 401b998:	003eda06 	br	401b504 <__alt_mem_onchip_memory2_0+0xfc01a264>
 401b99c:	0101ffc4 	movi	r4,2047
 401b9a0:	49003b26 	beq	r9,r4,401ba90 <__subdf3+0x7b4>
 401b9a4:	0085c83a 	sub	r2,zero,r2
 401b9a8:	18c02034 	orhi	r3,r3,128
 401b9ac:	01000e04 	movi	r4,56
 401b9b0:	20806e16 	blt	r4,r2,401bb6c <__subdf3+0x890>
 401b9b4:	010007c4 	movi	r4,31
 401b9b8:	20807716 	blt	r4,r2,401bb98 <__subdf3+0x8bc>
 401b9bc:	01000804 	movi	r4,32
 401b9c0:	2089c83a 	sub	r4,r4,r2
 401b9c4:	1914983a 	sll	r10,r3,r4
 401b9c8:	8890d83a 	srl	r8,r17,r2
 401b9cc:	8908983a 	sll	r4,r17,r4
 401b9d0:	1884d83a 	srl	r2,r3,r2
 401b9d4:	5222b03a 	or	r17,r10,r8
 401b9d8:	2006c03a 	cmpne	r3,r4,zero
 401b9dc:	88e2b03a 	or	r17,r17,r3
 401b9e0:	89a3883a 	add	r17,r17,r6
 401b9e4:	1145883a 	add	r2,r2,r5
 401b9e8:	898d803a 	cmpltu	r6,r17,r6
 401b9ec:	3087883a 	add	r3,r6,r2
 401b9f0:	4821883a 	mov	r16,r9
 401b9f4:	003ed906 	br	401b55c <__alt_mem_onchip_memory2_0+0xfc01a2bc>
 401b9f8:	2984b03a 	or	r2,r5,r6
 401b9fc:	10004226 	beq	r2,zero,401bb08 <__subdf3+0x82c>
 401ba00:	1808d0fa 	srli	r4,r3,3
 401ba04:	8822d0fa 	srli	r17,r17,3
 401ba08:	1806977a 	slli	r3,r3,29
 401ba0c:	2080022c 	andhi	r2,r4,8
 401ba10:	1c62b03a 	or	r17,r3,r17
 401ba14:	10000826 	beq	r2,zero,401ba38 <__subdf3+0x75c>
 401ba18:	2812d0fa 	srli	r9,r5,3
 401ba1c:	4880022c 	andhi	r2,r9,8
 401ba20:	1000051e 	bne	r2,zero,401ba38 <__subdf3+0x75c>
 401ba24:	300cd0fa 	srli	r6,r6,3
 401ba28:	2804977a 	slli	r2,r5,29
 401ba2c:	4809883a 	mov	r4,r9
 401ba30:	3825883a 	mov	r18,r7
 401ba34:	11a2b03a 	or	r17,r2,r6
 401ba38:	8806d77a 	srli	r3,r17,29
 401ba3c:	200890fa 	slli	r4,r4,3
 401ba40:	882290fa 	slli	r17,r17,3
 401ba44:	0401ffc4 	movi	r16,2047
 401ba48:	1906b03a 	or	r3,r3,r4
 401ba4c:	003e4406 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401ba50:	2984b03a 	or	r2,r5,r6
 401ba54:	103e4226 	beq	r2,zero,401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401ba58:	8989c83a 	sub	r4,r17,r6
 401ba5c:	8911803a 	cmpltu	r8,r17,r4
 401ba60:	1945c83a 	sub	r2,r3,r5
 401ba64:	1205c83a 	sub	r2,r2,r8
 401ba68:	1200202c 	andhi	r8,r2,128
 401ba6c:	403e9a26 	beq	r8,zero,401b4d8 <__alt_mem_onchip_memory2_0+0xfc01a238>
 401ba70:	3463c83a 	sub	r17,r6,r17
 401ba74:	28c5c83a 	sub	r2,r5,r3
 401ba78:	344d803a 	cmpltu	r6,r6,r17
 401ba7c:	1187c83a 	sub	r3,r2,r6
 401ba80:	3825883a 	mov	r18,r7
 401ba84:	003e3606 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401ba88:	0101ffc4 	movi	r4,2047
 401ba8c:	493fc71e 	bne	r9,r4,401b9ac <__alt_mem_onchip_memory2_0+0xfc01a70c>
 401ba90:	2807883a 	mov	r3,r5
 401ba94:	3023883a 	mov	r17,r6
 401ba98:	4821883a 	mov	r16,r9
 401ba9c:	003e3006 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401baa0:	10003626 	beq	r2,zero,401bb7c <__subdf3+0x8a0>
 401baa4:	2984b03a 	or	r2,r5,r6
 401baa8:	10001726 	beq	r2,zero,401bb08 <__subdf3+0x82c>
 401baac:	1808d0fa 	srli	r4,r3,3
 401bab0:	8822d0fa 	srli	r17,r17,3
 401bab4:	1806977a 	slli	r3,r3,29
 401bab8:	2080022c 	andhi	r2,r4,8
 401babc:	1c62b03a 	or	r17,r3,r17
 401bac0:	10000726 	beq	r2,zero,401bae0 <__subdf3+0x804>
 401bac4:	2812d0fa 	srli	r9,r5,3
 401bac8:	4880022c 	andhi	r2,r9,8
 401bacc:	1000041e 	bne	r2,zero,401bae0 <__subdf3+0x804>
 401bad0:	300cd0fa 	srli	r6,r6,3
 401bad4:	2804977a 	slli	r2,r5,29
 401bad8:	4809883a 	mov	r4,r9
 401badc:	11a2b03a 	or	r17,r2,r6
 401bae0:	8806d77a 	srli	r3,r17,29
 401bae4:	200890fa 	slli	r4,r4,3
 401bae8:	882290fa 	slli	r17,r17,3
 401baec:	3825883a 	mov	r18,r7
 401baf0:	1906b03a 	or	r3,r3,r4
 401baf4:	0401ffc4 	movi	r16,2047
 401baf8:	003e1906 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401bafc:	000b883a 	mov	r5,zero
 401bb00:	0005883a 	mov	r2,zero
 401bb04:	003e2e06 	br	401b3c0 <__alt_mem_onchip_memory2_0+0xfc01a120>
 401bb08:	0401ffc4 	movi	r16,2047
 401bb0c:	003e1406 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401bb10:	0005883a 	mov	r2,zero
 401bb14:	003f7506 	br	401b8ec <__alt_mem_onchip_memory2_0+0xfc01a64c>
 401bb18:	0005883a 	mov	r2,zero
 401bb1c:	0009883a 	mov	r4,zero
 401bb20:	003e7806 	br	401b504 <__alt_mem_onchip_memory2_0+0xfc01a264>
 401bb24:	123ff804 	addi	r8,r2,-32
 401bb28:	01000804 	movi	r4,32
 401bb2c:	1a10d83a 	srl	r8,r3,r8
 401bb30:	11002526 	beq	r2,r4,401bbc8 <__subdf3+0x8ec>
 401bb34:	01001004 	movi	r4,64
 401bb38:	2085c83a 	sub	r2,r4,r2
 401bb3c:	1884983a 	sll	r2,r3,r2
 401bb40:	1444b03a 	or	r2,r2,r17
 401bb44:	1004c03a 	cmpne	r2,r2,zero
 401bb48:	40a2b03a 	or	r17,r8,r2
 401bb4c:	0005883a 	mov	r2,zero
 401bb50:	003f1606 	br	401b7ac <__alt_mem_onchip_memory2_0+0xfc01a50c>
 401bb54:	02000434 	movhi	r8,16
 401bb58:	0009883a 	mov	r4,zero
 401bb5c:	423fffc4 	addi	r8,r8,-1
 401bb60:	00bfffc4 	movi	r2,-1
 401bb64:	0401ffc4 	movi	r16,2047
 401bb68:	003e6606 	br	401b504 <__alt_mem_onchip_memory2_0+0xfc01a264>
 401bb6c:	1c62b03a 	or	r17,r3,r17
 401bb70:	8822c03a 	cmpne	r17,r17,zero
 401bb74:	0005883a 	mov	r2,zero
 401bb78:	003f9906 	br	401b9e0 <__alt_mem_onchip_memory2_0+0xfc01a740>
 401bb7c:	2807883a 	mov	r3,r5
 401bb80:	3023883a 	mov	r17,r6
 401bb84:	0401ffc4 	movi	r16,2047
 401bb88:	003df506 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401bb8c:	2807883a 	mov	r3,r5
 401bb90:	3023883a 	mov	r17,r6
 401bb94:	003df206 	br	401b360 <__alt_mem_onchip_memory2_0+0xfc01a0c0>
 401bb98:	123ff804 	addi	r8,r2,-32
 401bb9c:	01000804 	movi	r4,32
 401bba0:	1a10d83a 	srl	r8,r3,r8
 401bba4:	11000a26 	beq	r2,r4,401bbd0 <__subdf3+0x8f4>
 401bba8:	01001004 	movi	r4,64
 401bbac:	2085c83a 	sub	r2,r4,r2
 401bbb0:	1884983a 	sll	r2,r3,r2
 401bbb4:	1444b03a 	or	r2,r2,r17
 401bbb8:	1004c03a 	cmpne	r2,r2,zero
 401bbbc:	40a2b03a 	or	r17,r8,r2
 401bbc0:	0005883a 	mov	r2,zero
 401bbc4:	003f8606 	br	401b9e0 <__alt_mem_onchip_memory2_0+0xfc01a740>
 401bbc8:	0005883a 	mov	r2,zero
 401bbcc:	003fdc06 	br	401bb40 <__alt_mem_onchip_memory2_0+0xfc01a8a0>
 401bbd0:	0005883a 	mov	r2,zero
 401bbd4:	003ff706 	br	401bbb4 <__alt_mem_onchip_memory2_0+0xfc01a914>

0401bbd8 <__fixdfsi>:
 401bbd8:	280cd53a 	srli	r6,r5,20
 401bbdc:	00c00434 	movhi	r3,16
 401bbe0:	18ffffc4 	addi	r3,r3,-1
 401bbe4:	3181ffcc 	andi	r6,r6,2047
 401bbe8:	01c0ff84 	movi	r7,1022
 401bbec:	28c6703a 	and	r3,r5,r3
 401bbf0:	280ad7fa 	srli	r5,r5,31
 401bbf4:	3980120e 	bge	r7,r6,401bc40 <__fixdfsi+0x68>
 401bbf8:	00810744 	movi	r2,1053
 401bbfc:	11800c16 	blt	r2,r6,401bc30 <__fixdfsi+0x58>
 401bc00:	00810cc4 	movi	r2,1075
 401bc04:	1185c83a 	sub	r2,r2,r6
 401bc08:	01c007c4 	movi	r7,31
 401bc0c:	18c00434 	orhi	r3,r3,16
 401bc10:	38800d16 	blt	r7,r2,401bc48 <__fixdfsi+0x70>
 401bc14:	31befb44 	addi	r6,r6,-1043
 401bc18:	2084d83a 	srl	r2,r4,r2
 401bc1c:	1986983a 	sll	r3,r3,r6
 401bc20:	1884b03a 	or	r2,r3,r2
 401bc24:	28000726 	beq	r5,zero,401bc44 <__fixdfsi+0x6c>
 401bc28:	0085c83a 	sub	r2,zero,r2
 401bc2c:	f800283a 	ret
 401bc30:	00a00034 	movhi	r2,32768
 401bc34:	10bfffc4 	addi	r2,r2,-1
 401bc38:	2885883a 	add	r2,r5,r2
 401bc3c:	f800283a 	ret
 401bc40:	0005883a 	mov	r2,zero
 401bc44:	f800283a 	ret
 401bc48:	008104c4 	movi	r2,1043
 401bc4c:	1185c83a 	sub	r2,r2,r6
 401bc50:	1884d83a 	srl	r2,r3,r2
 401bc54:	003ff306 	br	401bc24 <__alt_mem_onchip_memory2_0+0xfc01a984>

0401bc58 <__floatsidf>:
 401bc58:	defffd04 	addi	sp,sp,-12
 401bc5c:	dfc00215 	stw	ra,8(sp)
 401bc60:	dc400115 	stw	r17,4(sp)
 401bc64:	dc000015 	stw	r16,0(sp)
 401bc68:	20002b26 	beq	r4,zero,401bd18 <__floatsidf+0xc0>
 401bc6c:	2023883a 	mov	r17,r4
 401bc70:	2020d7fa 	srli	r16,r4,31
 401bc74:	20002d16 	blt	r4,zero,401bd2c <__floatsidf+0xd4>
 401bc78:	8809883a 	mov	r4,r17
 401bc7c:	400eb580 	call	400eb58 <__clzsi2>
 401bc80:	01410784 	movi	r5,1054
 401bc84:	288bc83a 	sub	r5,r5,r2
 401bc88:	01010cc4 	movi	r4,1075
 401bc8c:	2149c83a 	sub	r4,r4,r5
 401bc90:	00c007c4 	movi	r3,31
 401bc94:	1900160e 	bge	r3,r4,401bcf0 <__floatsidf+0x98>
 401bc98:	00c104c4 	movi	r3,1043
 401bc9c:	1947c83a 	sub	r3,r3,r5
 401bca0:	88c6983a 	sll	r3,r17,r3
 401bca4:	00800434 	movhi	r2,16
 401bca8:	10bfffc4 	addi	r2,r2,-1
 401bcac:	1886703a 	and	r3,r3,r2
 401bcb0:	2941ffcc 	andi	r5,r5,2047
 401bcb4:	800d883a 	mov	r6,r16
 401bcb8:	0005883a 	mov	r2,zero
 401bcbc:	280a953a 	slli	r5,r5,20
 401bcc0:	31803fcc 	andi	r6,r6,255
 401bcc4:	01000434 	movhi	r4,16
 401bcc8:	300c97fa 	slli	r6,r6,31
 401bccc:	213fffc4 	addi	r4,r4,-1
 401bcd0:	1906703a 	and	r3,r3,r4
 401bcd4:	1946b03a 	or	r3,r3,r5
 401bcd8:	1986b03a 	or	r3,r3,r6
 401bcdc:	dfc00217 	ldw	ra,8(sp)
 401bce0:	dc400117 	ldw	r17,4(sp)
 401bce4:	dc000017 	ldw	r16,0(sp)
 401bce8:	dec00304 	addi	sp,sp,12
 401bcec:	f800283a 	ret
 401bcf0:	00c002c4 	movi	r3,11
 401bcf4:	1887c83a 	sub	r3,r3,r2
 401bcf8:	88c6d83a 	srl	r3,r17,r3
 401bcfc:	8904983a 	sll	r2,r17,r4
 401bd00:	01000434 	movhi	r4,16
 401bd04:	213fffc4 	addi	r4,r4,-1
 401bd08:	2941ffcc 	andi	r5,r5,2047
 401bd0c:	1906703a 	and	r3,r3,r4
 401bd10:	800d883a 	mov	r6,r16
 401bd14:	003fe906 	br	401bcbc <__alt_mem_onchip_memory2_0+0xfc01aa1c>
 401bd18:	000d883a 	mov	r6,zero
 401bd1c:	000b883a 	mov	r5,zero
 401bd20:	0007883a 	mov	r3,zero
 401bd24:	0005883a 	mov	r2,zero
 401bd28:	003fe406 	br	401bcbc <__alt_mem_onchip_memory2_0+0xfc01aa1c>
 401bd2c:	0123c83a 	sub	r17,zero,r4
 401bd30:	003fd106 	br	401bc78 <__alt_mem_onchip_memory2_0+0xfc01a9d8>

0401bd34 <__floatunsidf>:
 401bd34:	defffe04 	addi	sp,sp,-8
 401bd38:	dc000015 	stw	r16,0(sp)
 401bd3c:	dfc00115 	stw	ra,4(sp)
 401bd40:	2021883a 	mov	r16,r4
 401bd44:	20002226 	beq	r4,zero,401bdd0 <__floatunsidf+0x9c>
 401bd48:	400eb580 	call	400eb58 <__clzsi2>
 401bd4c:	01010784 	movi	r4,1054
 401bd50:	2089c83a 	sub	r4,r4,r2
 401bd54:	01810cc4 	movi	r6,1075
 401bd58:	310dc83a 	sub	r6,r6,r4
 401bd5c:	00c007c4 	movi	r3,31
 401bd60:	1980120e 	bge	r3,r6,401bdac <__floatunsidf+0x78>
 401bd64:	00c104c4 	movi	r3,1043
 401bd68:	1907c83a 	sub	r3,r3,r4
 401bd6c:	80ca983a 	sll	r5,r16,r3
 401bd70:	00800434 	movhi	r2,16
 401bd74:	10bfffc4 	addi	r2,r2,-1
 401bd78:	2101ffcc 	andi	r4,r4,2047
 401bd7c:	0021883a 	mov	r16,zero
 401bd80:	288a703a 	and	r5,r5,r2
 401bd84:	2008953a 	slli	r4,r4,20
 401bd88:	00c00434 	movhi	r3,16
 401bd8c:	18ffffc4 	addi	r3,r3,-1
 401bd90:	28c6703a 	and	r3,r5,r3
 401bd94:	8005883a 	mov	r2,r16
 401bd98:	1906b03a 	or	r3,r3,r4
 401bd9c:	dfc00117 	ldw	ra,4(sp)
 401bda0:	dc000017 	ldw	r16,0(sp)
 401bda4:	dec00204 	addi	sp,sp,8
 401bda8:	f800283a 	ret
 401bdac:	00c002c4 	movi	r3,11
 401bdb0:	188bc83a 	sub	r5,r3,r2
 401bdb4:	814ad83a 	srl	r5,r16,r5
 401bdb8:	00c00434 	movhi	r3,16
 401bdbc:	18ffffc4 	addi	r3,r3,-1
 401bdc0:	81a0983a 	sll	r16,r16,r6
 401bdc4:	2101ffcc 	andi	r4,r4,2047
 401bdc8:	28ca703a 	and	r5,r5,r3
 401bdcc:	003fed06 	br	401bd84 <__alt_mem_onchip_memory2_0+0xfc01aae4>
 401bdd0:	0009883a 	mov	r4,zero
 401bdd4:	000b883a 	mov	r5,zero
 401bdd8:	003fea06 	br	401bd84 <__alt_mem_onchip_memory2_0+0xfc01aae4>

0401bddc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401bddc:	defffe04 	addi	sp,sp,-8
 401bde0:	dfc00115 	stw	ra,4(sp)
 401bde4:	df000015 	stw	fp,0(sp)
 401bde8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401bdec:	d0a5b717 	ldw	r2,-26916(gp)
 401bdf0:	10000326 	beq	r2,zero,401be00 <alt_get_errno+0x24>
 401bdf4:	d0a5b717 	ldw	r2,-26916(gp)
 401bdf8:	103ee83a 	callr	r2
 401bdfc:	00000106 	br	401be04 <alt_get_errno+0x28>
 401be00:	d0b23f04 	addi	r2,gp,-14084
}
 401be04:	e037883a 	mov	sp,fp
 401be08:	dfc00117 	ldw	ra,4(sp)
 401be0c:	df000017 	ldw	fp,0(sp)
 401be10:	dec00204 	addi	sp,sp,8
 401be14:	f800283a 	ret

0401be18 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 401be18:	defffb04 	addi	sp,sp,-20
 401be1c:	dfc00415 	stw	ra,16(sp)
 401be20:	df000315 	stw	fp,12(sp)
 401be24:	df000304 	addi	fp,sp,12
 401be28:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 401be2c:	e0bfff17 	ldw	r2,-4(fp)
 401be30:	10000816 	blt	r2,zero,401be54 <close+0x3c>
 401be34:	01400304 	movi	r5,12
 401be38:	e13fff17 	ldw	r4,-4(fp)
 401be3c:	400dae00 	call	400dae0 <__mulsi3>
 401be40:	1007883a 	mov	r3,r2
 401be44:	008100f4 	movhi	r2,1027
 401be48:	10a15004 	addi	r2,r2,-31424
 401be4c:	1885883a 	add	r2,r3,r2
 401be50:	00000106 	br	401be58 <close+0x40>
 401be54:	0005883a 	mov	r2,zero
 401be58:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 401be5c:	e0bffd17 	ldw	r2,-12(fp)
 401be60:	10001926 	beq	r2,zero,401bec8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 401be64:	e0bffd17 	ldw	r2,-12(fp)
 401be68:	10800017 	ldw	r2,0(r2)
 401be6c:	10800417 	ldw	r2,16(r2)
 401be70:	10000626 	beq	r2,zero,401be8c <close+0x74>
 401be74:	e0bffd17 	ldw	r2,-12(fp)
 401be78:	10800017 	ldw	r2,0(r2)
 401be7c:	10800417 	ldw	r2,16(r2)
 401be80:	e13ffd17 	ldw	r4,-12(fp)
 401be84:	103ee83a 	callr	r2
 401be88:	00000106 	br	401be90 <close+0x78>
 401be8c:	0005883a 	mov	r2,zero
 401be90:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 401be94:	e13fff17 	ldw	r4,-4(fp)
 401be98:	401c6c00 	call	401c6c0 <alt_release_fd>
    if (rval < 0)
 401be9c:	e0bffe17 	ldw	r2,-8(fp)
 401bea0:	1000070e 	bge	r2,zero,401bec0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 401bea4:	401bddc0 	call	401bddc <alt_get_errno>
 401bea8:	1007883a 	mov	r3,r2
 401beac:	e0bffe17 	ldw	r2,-8(fp)
 401beb0:	0085c83a 	sub	r2,zero,r2
 401beb4:	18800015 	stw	r2,0(r3)
      return -1;
 401beb8:	00bfffc4 	movi	r2,-1
 401bebc:	00000706 	br	401bedc <close+0xc4>
    }
    return 0;
 401bec0:	0005883a 	mov	r2,zero
 401bec4:	00000506 	br	401bedc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401bec8:	401bddc0 	call	401bddc <alt_get_errno>
 401becc:	1007883a 	mov	r3,r2
 401bed0:	00801444 	movi	r2,81
 401bed4:	18800015 	stw	r2,0(r3)
    return -1;
 401bed8:	00bfffc4 	movi	r2,-1
  }
}
 401bedc:	e037883a 	mov	sp,fp
 401bee0:	dfc00117 	ldw	ra,4(sp)
 401bee4:	df000017 	ldw	fp,0(sp)
 401bee8:	dec00204 	addi	sp,sp,8
 401beec:	f800283a 	ret

0401bef0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 401bef0:	defffc04 	addi	sp,sp,-16
 401bef4:	df000315 	stw	fp,12(sp)
 401bef8:	df000304 	addi	fp,sp,12
 401befc:	e13ffd15 	stw	r4,-12(fp)
 401bf00:	e17ffe15 	stw	r5,-8(fp)
 401bf04:	e1bfff15 	stw	r6,-4(fp)
  return len;
 401bf08:	e0bfff17 	ldw	r2,-4(fp)
}
 401bf0c:	e037883a 	mov	sp,fp
 401bf10:	df000017 	ldw	fp,0(sp)
 401bf14:	dec00104 	addi	sp,sp,4
 401bf18:	f800283a 	ret

0401bf1c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401bf1c:	defffd04 	addi	sp,sp,-12
 401bf20:	df000215 	stw	fp,8(sp)
 401bf24:	df000204 	addi	fp,sp,8
 401bf28:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401bf2c:	0001883a 	nop
 401bf30:	e0bfff17 	ldw	r2,-4(fp)
 401bf34:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 401bf38:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401bf3c:	10000226 	beq	r2,zero,401bf48 <_exit+0x2c>
    ALT_SIM_FAIL();
 401bf40:	002af070 	cmpltui	zero,zero,43969
 401bf44:	00000106 	br	401bf4c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 401bf48:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401bf4c:	003fff06 	br	401bf4c <__alt_mem_onchip_memory2_0+0xfc01acac>

0401bf50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401bf50:	defffe04 	addi	sp,sp,-8
 401bf54:	dfc00115 	stw	ra,4(sp)
 401bf58:	df000015 	stw	fp,0(sp)
 401bf5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401bf60:	d0a5b717 	ldw	r2,-26916(gp)
 401bf64:	10000326 	beq	r2,zero,401bf74 <alt_get_errno+0x24>
 401bf68:	d0a5b717 	ldw	r2,-26916(gp)
 401bf6c:	103ee83a 	callr	r2
 401bf70:	00000106 	br	401bf78 <alt_get_errno+0x28>
 401bf74:	d0b23f04 	addi	r2,gp,-14084
}
 401bf78:	e037883a 	mov	sp,fp
 401bf7c:	dfc00117 	ldw	ra,4(sp)
 401bf80:	df000017 	ldw	fp,0(sp)
 401bf84:	dec00204 	addi	sp,sp,8
 401bf88:	f800283a 	ret

0401bf8c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 401bf8c:	defffb04 	addi	sp,sp,-20
 401bf90:	dfc00415 	stw	ra,16(sp)
 401bf94:	df000315 	stw	fp,12(sp)
 401bf98:	df000304 	addi	fp,sp,12
 401bf9c:	e13ffe15 	stw	r4,-8(fp)
 401bfa0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401bfa4:	e0bffe17 	ldw	r2,-8(fp)
 401bfa8:	10000816 	blt	r2,zero,401bfcc <fstat+0x40>
 401bfac:	01400304 	movi	r5,12
 401bfb0:	e13ffe17 	ldw	r4,-8(fp)
 401bfb4:	400dae00 	call	400dae0 <__mulsi3>
 401bfb8:	1007883a 	mov	r3,r2
 401bfbc:	008100f4 	movhi	r2,1027
 401bfc0:	10a15004 	addi	r2,r2,-31424
 401bfc4:	1885883a 	add	r2,r3,r2
 401bfc8:	00000106 	br	401bfd0 <fstat+0x44>
 401bfcc:	0005883a 	mov	r2,zero
 401bfd0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 401bfd4:	e0bffd17 	ldw	r2,-12(fp)
 401bfd8:	10001026 	beq	r2,zero,401c01c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 401bfdc:	e0bffd17 	ldw	r2,-12(fp)
 401bfe0:	10800017 	ldw	r2,0(r2)
 401bfe4:	10800817 	ldw	r2,32(r2)
 401bfe8:	10000726 	beq	r2,zero,401c008 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 401bfec:	e0bffd17 	ldw	r2,-12(fp)
 401bff0:	10800017 	ldw	r2,0(r2)
 401bff4:	10800817 	ldw	r2,32(r2)
 401bff8:	e17fff17 	ldw	r5,-4(fp)
 401bffc:	e13ffd17 	ldw	r4,-12(fp)
 401c000:	103ee83a 	callr	r2
 401c004:	00000a06 	br	401c030 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 401c008:	e0bfff17 	ldw	r2,-4(fp)
 401c00c:	00c80004 	movi	r3,8192
 401c010:	10c00115 	stw	r3,4(r2)
      return 0;
 401c014:	0005883a 	mov	r2,zero
 401c018:	00000506 	br	401c030 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401c01c:	401bf500 	call	401bf50 <alt_get_errno>
 401c020:	1007883a 	mov	r3,r2
 401c024:	00801444 	movi	r2,81
 401c028:	18800015 	stw	r2,0(r3)
    return -1;
 401c02c:	00bfffc4 	movi	r2,-1
  }
}
 401c030:	e037883a 	mov	sp,fp
 401c034:	dfc00117 	ldw	ra,4(sp)
 401c038:	df000017 	ldw	fp,0(sp)
 401c03c:	dec00204 	addi	sp,sp,8
 401c040:	f800283a 	ret

0401c044 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 401c044:	deffff04 	addi	sp,sp,-4
 401c048:	df000015 	stw	fp,0(sp)
 401c04c:	d839883a 	mov	fp,sp
  return 0;
 401c050:	0005883a 	mov	r2,zero
}
 401c054:	e037883a 	mov	sp,fp
 401c058:	df000017 	ldw	fp,0(sp)
 401c05c:	dec00104 	addi	sp,sp,4
 401c060:	f800283a 	ret

0401c064 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c064:	defffe04 	addi	sp,sp,-8
 401c068:	dfc00115 	stw	ra,4(sp)
 401c06c:	df000015 	stw	fp,0(sp)
 401c070:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c074:	d0a5b717 	ldw	r2,-26916(gp)
 401c078:	10000326 	beq	r2,zero,401c088 <alt_get_errno+0x24>
 401c07c:	d0a5b717 	ldw	r2,-26916(gp)
 401c080:	103ee83a 	callr	r2
 401c084:	00000106 	br	401c08c <alt_get_errno+0x28>
 401c088:	d0b23f04 	addi	r2,gp,-14084
}
 401c08c:	e037883a 	mov	sp,fp
 401c090:	dfc00117 	ldw	ra,4(sp)
 401c094:	df000017 	ldw	fp,0(sp)
 401c098:	dec00204 	addi	sp,sp,8
 401c09c:	f800283a 	ret

0401c0a0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 401c0a0:	deffed04 	addi	sp,sp,-76
 401c0a4:	dfc01215 	stw	ra,72(sp)
 401c0a8:	df001115 	stw	fp,68(sp)
 401c0ac:	df001104 	addi	fp,sp,68
 401c0b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401c0b4:	e0bfff17 	ldw	r2,-4(fp)
 401c0b8:	10000816 	blt	r2,zero,401c0dc <isatty+0x3c>
 401c0bc:	01400304 	movi	r5,12
 401c0c0:	e13fff17 	ldw	r4,-4(fp)
 401c0c4:	400dae00 	call	400dae0 <__mulsi3>
 401c0c8:	1007883a 	mov	r3,r2
 401c0cc:	008100f4 	movhi	r2,1027
 401c0d0:	10a15004 	addi	r2,r2,-31424
 401c0d4:	1885883a 	add	r2,r3,r2
 401c0d8:	00000106 	br	401c0e0 <isatty+0x40>
 401c0dc:	0005883a 	mov	r2,zero
 401c0e0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 401c0e4:	e0bfef17 	ldw	r2,-68(fp)
 401c0e8:	10000e26 	beq	r2,zero,401c124 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 401c0ec:	e0bfef17 	ldw	r2,-68(fp)
 401c0f0:	10800017 	ldw	r2,0(r2)
 401c0f4:	10800817 	ldw	r2,32(r2)
 401c0f8:	1000021e 	bne	r2,zero,401c104 <isatty+0x64>
    {
      return 1;
 401c0fc:	00800044 	movi	r2,1
 401c100:	00000d06 	br	401c138 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 401c104:	e0bff004 	addi	r2,fp,-64
 401c108:	100b883a 	mov	r5,r2
 401c10c:	e13fff17 	ldw	r4,-4(fp)
 401c110:	401bf8c0 	call	401bf8c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 401c114:	e0bff117 	ldw	r2,-60(fp)
 401c118:	10880020 	cmpeqi	r2,r2,8192
 401c11c:	10803fcc 	andi	r2,r2,255
 401c120:	00000506 	br	401c138 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401c124:	401c0640 	call	401c064 <alt_get_errno>
 401c128:	1007883a 	mov	r3,r2
 401c12c:	00801444 	movi	r2,81
 401c130:	18800015 	stw	r2,0(r3)
    return 0;
 401c134:	0005883a 	mov	r2,zero
  }
}
 401c138:	e037883a 	mov	sp,fp
 401c13c:	dfc00117 	ldw	ra,4(sp)
 401c140:	df000017 	ldw	fp,0(sp)
 401c144:	dec00204 	addi	sp,sp,8
 401c148:	f800283a 	ret

0401c14c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c14c:	defffe04 	addi	sp,sp,-8
 401c150:	dfc00115 	stw	ra,4(sp)
 401c154:	df000015 	stw	fp,0(sp)
 401c158:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c15c:	d0a5b717 	ldw	r2,-26916(gp)
 401c160:	10000326 	beq	r2,zero,401c170 <alt_get_errno+0x24>
 401c164:	d0a5b717 	ldw	r2,-26916(gp)
 401c168:	103ee83a 	callr	r2
 401c16c:	00000106 	br	401c174 <alt_get_errno+0x28>
 401c170:	d0b23f04 	addi	r2,gp,-14084
}
 401c174:	e037883a 	mov	sp,fp
 401c178:	dfc00117 	ldw	ra,4(sp)
 401c17c:	df000017 	ldw	fp,0(sp)
 401c180:	dec00204 	addi	sp,sp,8
 401c184:	f800283a 	ret

0401c188 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 401c188:	defffb04 	addi	sp,sp,-20
 401c18c:	dfc00415 	stw	ra,16(sp)
 401c190:	df000315 	stw	fp,12(sp)
 401c194:	df000304 	addi	fp,sp,12
 401c198:	e13ffe15 	stw	r4,-8(fp)
 401c19c:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 401c1a0:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 401c1a4:	e0bffe17 	ldw	r2,-8(fp)
 401c1a8:	00802f16 	blt	zero,r2,401c268 <kill+0xe0>
  {
    switch (sig)
 401c1ac:	e0bfff17 	ldw	r2,-4(fp)
 401c1b0:	10800828 	cmpgeui	r2,r2,32
 401c1b4:	1000291e 	bne	r2,zero,401c25c <kill+0xd4>
 401c1b8:	e0bfff17 	ldw	r2,-4(fp)
 401c1bc:	100690ba 	slli	r3,r2,2
 401c1c0:	008100b4 	movhi	r2,1026
 401c1c4:	10b07504 	addi	r2,r2,-15916
 401c1c8:	1885883a 	add	r2,r3,r2
 401c1cc:	10800017 	ldw	r2,0(r2)
 401c1d0:	1000683a 	jmp	r2
 401c1d4:	0401c27c 	xorhi	r16,zero,1801
 401c1d8:	0401c25c 	xori	r16,zero,1801
 401c1dc:	0401c25c 	xori	r16,zero,1801
 401c1e0:	0401c254 	movui	r16,1801
 401c1e4:	0401c254 	movui	r16,1801
 401c1e8:	0401c254 	movui	r16,1801
 401c1ec:	0401c254 	movui	r16,1801
 401c1f0:	0401c25c 	xori	r16,zero,1801
 401c1f4:	0401c254 	movui	r16,1801
 401c1f8:	0401c254 	movui	r16,1801
 401c1fc:	0401c254 	movui	r16,1801
 401c200:	0401c254 	movui	r16,1801
 401c204:	0401c254 	movui	r16,1801
 401c208:	0401c254 	movui	r16,1801
 401c20c:	0401c254 	movui	r16,1801
 401c210:	0401c254 	movui	r16,1801
 401c214:	0401c27c 	xorhi	r16,zero,1801
 401c218:	0401c25c 	xori	r16,zero,1801
 401c21c:	0401c25c 	xori	r16,zero,1801
 401c220:	0401c25c 	xori	r16,zero,1801
 401c224:	0401c27c 	xorhi	r16,zero,1801
 401c228:	0401c25c 	xori	r16,zero,1801
 401c22c:	0401c25c 	xori	r16,zero,1801
 401c230:	0401c254 	movui	r16,1801
 401c234:	0401c254 	movui	r16,1801
 401c238:	0401c254 	movui	r16,1801
 401c23c:	0401c254 	movui	r16,1801
 401c240:	0401c254 	movui	r16,1801
 401c244:	0401c25c 	xori	r16,zero,1801
 401c248:	0401c25c 	xori	r16,zero,1801
 401c24c:	0401c254 	movui	r16,1801
 401c250:	0401c254 	movui	r16,1801
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 401c254:	0009883a 	mov	r4,zero
 401c258:	401bf1c0 	call	401bf1c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 401c25c:	00800584 	movi	r2,22
 401c260:	e0bffd15 	stw	r2,-12(fp)
 401c264:	00000606 	br	401c280 <kill+0xf8>
    }
  }

  else if (pid > 0)
 401c268:	e0bffe17 	ldw	r2,-8(fp)
 401c26c:	0080040e 	bge	zero,r2,401c280 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 401c270:	008000c4 	movi	r2,3
 401c274:	e0bffd15 	stw	r2,-12(fp)
 401c278:	00000106 	br	401c280 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 401c27c:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 401c280:	e0bffd17 	ldw	r2,-12(fp)
 401c284:	10000626 	beq	r2,zero,401c2a0 <kill+0x118>
  {
    ALT_ERRNO = status;
 401c288:	401c14c0 	call	401c14c <alt_get_errno>
 401c28c:	1007883a 	mov	r3,r2
 401c290:	e0bffd17 	ldw	r2,-12(fp)
 401c294:	18800015 	stw	r2,0(r3)
    return -1;
 401c298:	00bfffc4 	movi	r2,-1
 401c29c:	00000106 	br	401c2a4 <kill+0x11c>
  }

  return 0;
 401c2a0:	0005883a 	mov	r2,zero
}
 401c2a4:	e037883a 	mov	sp,fp
 401c2a8:	dfc00117 	ldw	ra,4(sp)
 401c2ac:	df000017 	ldw	fp,0(sp)
 401c2b0:	dec00204 	addi	sp,sp,8
 401c2b4:	f800283a 	ret

0401c2b8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 401c2b8:	defffc04 	addi	sp,sp,-16
 401c2bc:	df000315 	stw	fp,12(sp)
 401c2c0:	df000304 	addi	fp,sp,12
 401c2c4:	e13ffd15 	stw	r4,-12(fp)
 401c2c8:	e17ffe15 	stw	r5,-8(fp)
 401c2cc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 401c2d0:	e0fffe17 	ldw	r3,-8(fp)
 401c2d4:	e0bffd17 	ldw	r2,-12(fp)
 401c2d8:	18800c26 	beq	r3,r2,401c30c <alt_load_section+0x54>
  {
    while( to != end )
 401c2dc:	00000806 	br	401c300 <alt_load_section+0x48>
    {
      *to++ = *from++;
 401c2e0:	e0bffe17 	ldw	r2,-8(fp)
 401c2e4:	10c00104 	addi	r3,r2,4
 401c2e8:	e0fffe15 	stw	r3,-8(fp)
 401c2ec:	e0fffd17 	ldw	r3,-12(fp)
 401c2f0:	19000104 	addi	r4,r3,4
 401c2f4:	e13ffd15 	stw	r4,-12(fp)
 401c2f8:	18c00017 	ldw	r3,0(r3)
 401c2fc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 401c300:	e0fffe17 	ldw	r3,-8(fp)
 401c304:	e0bfff17 	ldw	r2,-4(fp)
 401c308:	18bff51e 	bne	r3,r2,401c2e0 <__alt_mem_onchip_memory2_0+0xfc01b040>
    {
      *to++ = *from++;
    }
  }
}
 401c30c:	0001883a 	nop
 401c310:	e037883a 	mov	sp,fp
 401c314:	df000017 	ldw	fp,0(sp)
 401c318:	dec00104 	addi	sp,sp,4
 401c31c:	f800283a 	ret

0401c320 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 401c320:	defffe04 	addi	sp,sp,-8
 401c324:	dfc00115 	stw	ra,4(sp)
 401c328:	df000015 	stw	fp,0(sp)
 401c32c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 401c330:	018100f4 	movhi	r6,1027
 401c334:	31ab9404 	addi	r6,r6,-20912
 401c338:	014100b4 	movhi	r5,1026
 401c33c:	295f1d04 	addi	r5,r5,31860
 401c340:	010100f4 	movhi	r4,1027
 401c344:	212b9404 	addi	r4,r4,-20912
 401c348:	401c2b80 	call	401c2b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 401c34c:	01810034 	movhi	r6,1024
 401c350:	31808c04 	addi	r6,r6,560
 401c354:	01410034 	movhi	r5,1024
 401c358:	29400804 	addi	r5,r5,32
 401c35c:	01010034 	movhi	r4,1024
 401c360:	21000804 	addi	r4,r4,32
 401c364:	401c2b80 	call	401c2b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 401c368:	018100b4 	movhi	r6,1026
 401c36c:	319f1d04 	addi	r6,r6,31860
 401c370:	014100b4 	movhi	r5,1026
 401c374:	29428504 	addi	r5,r5,2580
 401c378:	010100b4 	movhi	r4,1026
 401c37c:	21028504 	addi	r4,r4,2580
 401c380:	401c2b80 	call	401c2b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 401c384:	401f6e80 	call	401f6e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 401c388:	401f9380 	call	401f938 <alt_icache_flush_all>
}
 401c38c:	0001883a 	nop
 401c390:	e037883a 	mov	sp,fp
 401c394:	dfc00117 	ldw	ra,4(sp)
 401c398:	df000017 	ldw	fp,0(sp)
 401c39c:	dec00204 	addi	sp,sp,8
 401c3a0:	f800283a 	ret

0401c3a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c3a4:	defffe04 	addi	sp,sp,-8
 401c3a8:	dfc00115 	stw	ra,4(sp)
 401c3ac:	df000015 	stw	fp,0(sp)
 401c3b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c3b4:	d0a5b717 	ldw	r2,-26916(gp)
 401c3b8:	10000326 	beq	r2,zero,401c3c8 <alt_get_errno+0x24>
 401c3bc:	d0a5b717 	ldw	r2,-26916(gp)
 401c3c0:	103ee83a 	callr	r2
 401c3c4:	00000106 	br	401c3cc <alt_get_errno+0x28>
 401c3c8:	d0b23f04 	addi	r2,gp,-14084
}
 401c3cc:	e037883a 	mov	sp,fp
 401c3d0:	dfc00117 	ldw	ra,4(sp)
 401c3d4:	df000017 	ldw	fp,0(sp)
 401c3d8:	dec00204 	addi	sp,sp,8
 401c3dc:	f800283a 	ret

0401c3e0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 401c3e0:	defff904 	addi	sp,sp,-28
 401c3e4:	dfc00615 	stw	ra,24(sp)
 401c3e8:	df000515 	stw	fp,20(sp)
 401c3ec:	df000504 	addi	fp,sp,20
 401c3f0:	e13ffd15 	stw	r4,-12(fp)
 401c3f4:	e17ffe15 	stw	r5,-8(fp)
 401c3f8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 401c3fc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401c400:	e0bffd17 	ldw	r2,-12(fp)
 401c404:	10000816 	blt	r2,zero,401c428 <lseek+0x48>
 401c408:	01400304 	movi	r5,12
 401c40c:	e13ffd17 	ldw	r4,-12(fp)
 401c410:	400dae00 	call	400dae0 <__mulsi3>
 401c414:	1007883a 	mov	r3,r2
 401c418:	008100f4 	movhi	r2,1027
 401c41c:	10a15004 	addi	r2,r2,-31424
 401c420:	1885883a 	add	r2,r3,r2
 401c424:	00000106 	br	401c42c <lseek+0x4c>
 401c428:	0005883a 	mov	r2,zero
 401c42c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 401c430:	e0bffc17 	ldw	r2,-16(fp)
 401c434:	10001026 	beq	r2,zero,401c478 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 401c438:	e0bffc17 	ldw	r2,-16(fp)
 401c43c:	10800017 	ldw	r2,0(r2)
 401c440:	10800717 	ldw	r2,28(r2)
 401c444:	10000926 	beq	r2,zero,401c46c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 401c448:	e0bffc17 	ldw	r2,-16(fp)
 401c44c:	10800017 	ldw	r2,0(r2)
 401c450:	10800717 	ldw	r2,28(r2)
 401c454:	e1bfff17 	ldw	r6,-4(fp)
 401c458:	e17ffe17 	ldw	r5,-8(fp)
 401c45c:	e13ffc17 	ldw	r4,-16(fp)
 401c460:	103ee83a 	callr	r2
 401c464:	e0bffb15 	stw	r2,-20(fp)
 401c468:	00000506 	br	401c480 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 401c46c:	00bfde84 	movi	r2,-134
 401c470:	e0bffb15 	stw	r2,-20(fp)
 401c474:	00000206 	br	401c480 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 401c478:	00bfebc4 	movi	r2,-81
 401c47c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 401c480:	e0bffb17 	ldw	r2,-20(fp)
 401c484:	1000070e 	bge	r2,zero,401c4a4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 401c488:	401c3a40 	call	401c3a4 <alt_get_errno>
 401c48c:	1007883a 	mov	r3,r2
 401c490:	e0bffb17 	ldw	r2,-20(fp)
 401c494:	0085c83a 	sub	r2,zero,r2
 401c498:	18800015 	stw	r2,0(r3)
    rc = -1;
 401c49c:	00bfffc4 	movi	r2,-1
 401c4a0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 401c4a4:	e0bffb17 	ldw	r2,-20(fp)
}
 401c4a8:	e037883a 	mov	sp,fp
 401c4ac:	dfc00117 	ldw	ra,4(sp)
 401c4b0:	df000017 	ldw	fp,0(sp)
 401c4b4:	dec00204 	addi	sp,sp,8
 401c4b8:	f800283a 	ret

0401c4bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 401c4bc:	defffd04 	addi	sp,sp,-12
 401c4c0:	dfc00215 	stw	ra,8(sp)
 401c4c4:	df000115 	stw	fp,4(sp)
 401c4c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 401c4cc:	0009883a 	mov	r4,zero
 401c4d0:	401ca480 	call	401ca48 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 401c4d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 401c4d8:	401ca800 	call	401ca80 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 401c4dc:	018100b4 	movhi	r6,1026
 401c4e0:	319f0804 	addi	r6,r6,31776
 401c4e4:	014100b4 	movhi	r5,1026
 401c4e8:	295f0804 	addi	r5,r5,31776
 401c4ec:	010100b4 	movhi	r4,1026
 401c4f0:	211f0804 	addi	r4,r4,31776
 401c4f4:	401fcdc0 	call	401fcdc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 401c4f8:	401f7e80 	call	401f7e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 401c4fc:	010100b4 	movhi	r4,1026
 401c500:	213e1204 	addi	r4,r4,-1976
 401c504:	40206740 	call	4020674 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 401c508:	d0b24317 	ldw	r2,-14068(gp)
 401c50c:	d0f24417 	ldw	r3,-14064(gp)
 401c510:	d1324517 	ldw	r4,-14060(gp)
 401c514:	200d883a 	mov	r6,r4
 401c518:	180b883a 	mov	r5,r3
 401c51c:	1009883a 	mov	r4,r2
 401c520:	4009dbc0 	call	4009dbc <main>
 401c524:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 401c528:	01000044 	movi	r4,1
 401c52c:	401be180 	call	401be18 <close>
  exit (result);
 401c530:	e13fff17 	ldw	r4,-4(fp)
 401c534:	40206880 	call	4020688 <exit>

0401c538 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 401c538:	defffe04 	addi	sp,sp,-8
 401c53c:	df000115 	stw	fp,4(sp)
 401c540:	df000104 	addi	fp,sp,4
 401c544:	e13fff15 	stw	r4,-4(fp)
}
 401c548:	0001883a 	nop
 401c54c:	e037883a 	mov	sp,fp
 401c550:	df000017 	ldw	fp,0(sp)
 401c554:	dec00104 	addi	sp,sp,4
 401c558:	f800283a 	ret

0401c55c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 401c55c:	defffe04 	addi	sp,sp,-8
 401c560:	df000115 	stw	fp,4(sp)
 401c564:	df000104 	addi	fp,sp,4
 401c568:	e13fff15 	stw	r4,-4(fp)
}
 401c56c:	0001883a 	nop
 401c570:	e037883a 	mov	sp,fp
 401c574:	df000017 	ldw	fp,0(sp)
 401c578:	dec00104 	addi	sp,sp,4
 401c57c:	f800283a 	ret

0401c580 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c580:	defffe04 	addi	sp,sp,-8
 401c584:	dfc00115 	stw	ra,4(sp)
 401c588:	df000015 	stw	fp,0(sp)
 401c58c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c590:	d0a5b717 	ldw	r2,-26916(gp)
 401c594:	10000326 	beq	r2,zero,401c5a4 <alt_get_errno+0x24>
 401c598:	d0a5b717 	ldw	r2,-26916(gp)
 401c59c:	103ee83a 	callr	r2
 401c5a0:	00000106 	br	401c5a8 <alt_get_errno+0x28>
 401c5a4:	d0b23f04 	addi	r2,gp,-14084
}
 401c5a8:	e037883a 	mov	sp,fp
 401c5ac:	dfc00117 	ldw	ra,4(sp)
 401c5b0:	df000017 	ldw	fp,0(sp)
 401c5b4:	dec00204 	addi	sp,sp,8
 401c5b8:	f800283a 	ret

0401c5bc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 401c5bc:	defff904 	addi	sp,sp,-28
 401c5c0:	dfc00615 	stw	ra,24(sp)
 401c5c4:	df000515 	stw	fp,20(sp)
 401c5c8:	df000504 	addi	fp,sp,20
 401c5cc:	e13ffd15 	stw	r4,-12(fp)
 401c5d0:	e17ffe15 	stw	r5,-8(fp)
 401c5d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401c5d8:	e0bffd17 	ldw	r2,-12(fp)
 401c5dc:	10000816 	blt	r2,zero,401c600 <read+0x44>
 401c5e0:	01400304 	movi	r5,12
 401c5e4:	e13ffd17 	ldw	r4,-12(fp)
 401c5e8:	400dae00 	call	400dae0 <__mulsi3>
 401c5ec:	1007883a 	mov	r3,r2
 401c5f0:	008100f4 	movhi	r2,1027
 401c5f4:	10a15004 	addi	r2,r2,-31424
 401c5f8:	1885883a 	add	r2,r3,r2
 401c5fc:	00000106 	br	401c604 <read+0x48>
 401c600:	0005883a 	mov	r2,zero
 401c604:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401c608:	e0bffb17 	ldw	r2,-20(fp)
 401c60c:	10002226 	beq	r2,zero,401c698 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401c610:	e0bffb17 	ldw	r2,-20(fp)
 401c614:	10800217 	ldw	r2,8(r2)
 401c618:	108000cc 	andi	r2,r2,3
 401c61c:	10800060 	cmpeqi	r2,r2,1
 401c620:	1000181e 	bne	r2,zero,401c684 <read+0xc8>
        (fd->dev->read))
 401c624:	e0bffb17 	ldw	r2,-20(fp)
 401c628:	10800017 	ldw	r2,0(r2)
 401c62c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401c630:	10001426 	beq	r2,zero,401c684 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 401c634:	e0bffb17 	ldw	r2,-20(fp)
 401c638:	10800017 	ldw	r2,0(r2)
 401c63c:	10800517 	ldw	r2,20(r2)
 401c640:	e0ffff17 	ldw	r3,-4(fp)
 401c644:	180d883a 	mov	r6,r3
 401c648:	e17ffe17 	ldw	r5,-8(fp)
 401c64c:	e13ffb17 	ldw	r4,-20(fp)
 401c650:	103ee83a 	callr	r2
 401c654:	e0bffc15 	stw	r2,-16(fp)
 401c658:	e0bffc17 	ldw	r2,-16(fp)
 401c65c:	1000070e 	bge	r2,zero,401c67c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 401c660:	401c5800 	call	401c580 <alt_get_errno>
 401c664:	1007883a 	mov	r3,r2
 401c668:	e0bffc17 	ldw	r2,-16(fp)
 401c66c:	0085c83a 	sub	r2,zero,r2
 401c670:	18800015 	stw	r2,0(r3)
          return -1;
 401c674:	00bfffc4 	movi	r2,-1
 401c678:	00000c06 	br	401c6ac <read+0xf0>
        }
        return rval;
 401c67c:	e0bffc17 	ldw	r2,-16(fp)
 401c680:	00000a06 	br	401c6ac <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 401c684:	401c5800 	call	401c580 <alt_get_errno>
 401c688:	1007883a 	mov	r3,r2
 401c68c:	00800344 	movi	r2,13
 401c690:	18800015 	stw	r2,0(r3)
 401c694:	00000406 	br	401c6a8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 401c698:	401c5800 	call	401c580 <alt_get_errno>
 401c69c:	1007883a 	mov	r3,r2
 401c6a0:	00801444 	movi	r2,81
 401c6a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401c6a8:	00bfffc4 	movi	r2,-1
}
 401c6ac:	e037883a 	mov	sp,fp
 401c6b0:	dfc00117 	ldw	ra,4(sp)
 401c6b4:	df000017 	ldw	fp,0(sp)
 401c6b8:	dec00204 	addi	sp,sp,8
 401c6bc:	f800283a 	ret

0401c6c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 401c6c0:	defffc04 	addi	sp,sp,-16
 401c6c4:	dfc00315 	stw	ra,12(sp)
 401c6c8:	df000215 	stw	fp,8(sp)
 401c6cc:	dc000115 	stw	r16,4(sp)
 401c6d0:	df000204 	addi	fp,sp,8
 401c6d4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 401c6d8:	e0bffe17 	ldw	r2,-8(fp)
 401c6dc:	108000d0 	cmplti	r2,r2,3
 401c6e0:	1000111e 	bne	r2,zero,401c728 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 401c6e4:	040100f4 	movhi	r16,1027
 401c6e8:	84215004 	addi	r16,r16,-31424
 401c6ec:	e0bffe17 	ldw	r2,-8(fp)
 401c6f0:	01400304 	movi	r5,12
 401c6f4:	1009883a 	mov	r4,r2
 401c6f8:	400dae00 	call	400dae0 <__mulsi3>
 401c6fc:	8085883a 	add	r2,r16,r2
 401c700:	10800204 	addi	r2,r2,8
 401c704:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 401c708:	040100f4 	movhi	r16,1027
 401c70c:	84215004 	addi	r16,r16,-31424
 401c710:	e0bffe17 	ldw	r2,-8(fp)
 401c714:	01400304 	movi	r5,12
 401c718:	1009883a 	mov	r4,r2
 401c71c:	400dae00 	call	400dae0 <__mulsi3>
 401c720:	8085883a 	add	r2,r16,r2
 401c724:	10000015 	stw	zero,0(r2)
  }
}
 401c728:	0001883a 	nop
 401c72c:	e6ffff04 	addi	sp,fp,-4
 401c730:	dfc00217 	ldw	ra,8(sp)
 401c734:	df000117 	ldw	fp,4(sp)
 401c738:	dc000017 	ldw	r16,0(sp)
 401c73c:	dec00304 	addi	sp,sp,12
 401c740:	f800283a 	ret

0401c744 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 401c744:	defff904 	addi	sp,sp,-28
 401c748:	df000615 	stw	fp,24(sp)
 401c74c:	df000604 	addi	fp,sp,24
 401c750:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c754:	0005303a 	rdctl	r2,status
 401c758:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c75c:	e0fffe17 	ldw	r3,-8(fp)
 401c760:	00bfff84 	movi	r2,-2
 401c764:	1884703a 	and	r2,r3,r2
 401c768:	1001703a 	wrctl	status,r2
  
  return context;
 401c76c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 401c770:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 401c774:	d0a5b817 	ldw	r2,-26912(gp)
 401c778:	10c000c4 	addi	r3,r2,3
 401c77c:	00bfff04 	movi	r2,-4
 401c780:	1884703a 	and	r2,r3,r2
 401c784:	d0a5b815 	stw	r2,-26912(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 401c788:	d0e5b817 	ldw	r3,-26912(gp)
 401c78c:	e0bfff17 	ldw	r2,-4(fp)
 401c790:	1887883a 	add	r3,r3,r2
 401c794:	00820034 	movhi	r2,2048
 401c798:	10800004 	addi	r2,r2,0
 401c79c:	10c0062e 	bgeu	r2,r3,401c7b8 <sbrk+0x74>
 401c7a0:	e0bffb17 	ldw	r2,-20(fp)
 401c7a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c7a8:	e0bffa17 	ldw	r2,-24(fp)
 401c7ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 401c7b0:	00bfffc4 	movi	r2,-1
 401c7b4:	00000b06 	br	401c7e4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 401c7b8:	d0a5b817 	ldw	r2,-26912(gp)
 401c7bc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 401c7c0:	d0e5b817 	ldw	r3,-26912(gp)
 401c7c4:	e0bfff17 	ldw	r2,-4(fp)
 401c7c8:	1885883a 	add	r2,r3,r2
 401c7cc:	d0a5b815 	stw	r2,-26912(gp)
 401c7d0:	e0bffb17 	ldw	r2,-20(fp)
 401c7d4:	e0bffc15 	stw	r2,-16(fp)
 401c7d8:	e0bffc17 	ldw	r2,-16(fp)
 401c7dc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 401c7e0:	e0bffd17 	ldw	r2,-12(fp)
} 
 401c7e4:	e037883a 	mov	sp,fp
 401c7e8:	df000017 	ldw	fp,0(sp)
 401c7ec:	dec00104 	addi	sp,sp,4
 401c7f0:	f800283a 	ret

0401c7f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c7f4:	defffe04 	addi	sp,sp,-8
 401c7f8:	dfc00115 	stw	ra,4(sp)
 401c7fc:	df000015 	stw	fp,0(sp)
 401c800:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c804:	d0a5b717 	ldw	r2,-26916(gp)
 401c808:	10000326 	beq	r2,zero,401c818 <alt_get_errno+0x24>
 401c80c:	d0a5b717 	ldw	r2,-26916(gp)
 401c810:	103ee83a 	callr	r2
 401c814:	00000106 	br	401c81c <alt_get_errno+0x28>
 401c818:	d0b23f04 	addi	r2,gp,-14084
}
 401c81c:	e037883a 	mov	sp,fp
 401c820:	dfc00117 	ldw	ra,4(sp)
 401c824:	df000017 	ldw	fp,0(sp)
 401c828:	dec00204 	addi	sp,sp,8
 401c82c:	f800283a 	ret

0401c830 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 401c830:	defffc04 	addi	sp,sp,-16
 401c834:	dfc00315 	stw	ra,12(sp)
 401c838:	df000215 	stw	fp,8(sp)
 401c83c:	df000204 	addi	fp,sp,8
 401c840:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401c844:	d0b24817 	ldw	r2,-14048(gp)
  clock_t ticks = alt_nticks(); 
 401c848:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401c84c:	d0b24717 	ldw	r2,-14052(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 401c850:	1000061e 	bne	r2,zero,401c86c <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
 401c854:	401c7f40 	call	401c7f4 <alt_get_errno>
 401c858:	1007883a 	mov	r3,r2
 401c85c:	00801604 	movi	r2,88
 401c860:	18800015 	stw	r2,0(r3)
    return 0;
 401c864:	0005883a 	mov	r2,zero
 401c868:	00000a06 	br	401c894 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 401c86c:	e0bfff17 	ldw	r2,-4(fp)
 401c870:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 401c874:	e0bfff17 	ldw	r2,-4(fp)
 401c878:	e0fffe17 	ldw	r3,-8(fp)
 401c87c:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 401c880:	e0bfff17 	ldw	r2,-4(fp)
 401c884:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 401c888:	e0bfff17 	ldw	r2,-4(fp)
 401c88c:	10000315 	stw	zero,12(r2)

  return ticks;
 401c890:	e0bffe17 	ldw	r2,-8(fp)
}
 401c894:	e037883a 	mov	sp,fp
 401c898:	dfc00117 	ldw	ra,4(sp)
 401c89c:	df000017 	ldw	fp,0(sp)
 401c8a0:	dec00204 	addi	sp,sp,8
 401c8a4:	f800283a 	ret

0401c8a8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 401c8a8:	defffd04 	addi	sp,sp,-12
 401c8ac:	dfc00215 	stw	ra,8(sp)
 401c8b0:	df000115 	stw	fp,4(sp)
 401c8b4:	df000104 	addi	fp,sp,4
 401c8b8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 401c8bc:	e13fff17 	ldw	r4,-4(fp)
 401c8c0:	401f5900 	call	401f590 <alt_busy_sleep>
}
 401c8c4:	e037883a 	mov	sp,fp
 401c8c8:	dfc00117 	ldw	ra,4(sp)
 401c8cc:	df000017 	ldw	fp,0(sp)
 401c8d0:	dec00204 	addi	sp,sp,8
 401c8d4:	f800283a 	ret

0401c8d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c8d8:	defffe04 	addi	sp,sp,-8
 401c8dc:	dfc00115 	stw	ra,4(sp)
 401c8e0:	df000015 	stw	fp,0(sp)
 401c8e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c8e8:	d0a5b717 	ldw	r2,-26916(gp)
 401c8ec:	10000326 	beq	r2,zero,401c8fc <alt_get_errno+0x24>
 401c8f0:	d0a5b717 	ldw	r2,-26916(gp)
 401c8f4:	103ee83a 	callr	r2
 401c8f8:	00000106 	br	401c900 <alt_get_errno+0x28>
 401c8fc:	d0b23f04 	addi	r2,gp,-14084
}
 401c900:	e037883a 	mov	sp,fp
 401c904:	dfc00117 	ldw	ra,4(sp)
 401c908:	df000017 	ldw	fp,0(sp)
 401c90c:	dec00204 	addi	sp,sp,8
 401c910:	f800283a 	ret

0401c914 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 401c914:	defff904 	addi	sp,sp,-28
 401c918:	dfc00615 	stw	ra,24(sp)
 401c91c:	df000515 	stw	fp,20(sp)
 401c920:	df000504 	addi	fp,sp,20
 401c924:	e13ffd15 	stw	r4,-12(fp)
 401c928:	e17ffe15 	stw	r5,-8(fp)
 401c92c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401c930:	e0bffd17 	ldw	r2,-12(fp)
 401c934:	10000816 	blt	r2,zero,401c958 <write+0x44>
 401c938:	01400304 	movi	r5,12
 401c93c:	e13ffd17 	ldw	r4,-12(fp)
 401c940:	400dae00 	call	400dae0 <__mulsi3>
 401c944:	1007883a 	mov	r3,r2
 401c948:	008100f4 	movhi	r2,1027
 401c94c:	10a15004 	addi	r2,r2,-31424
 401c950:	1885883a 	add	r2,r3,r2
 401c954:	00000106 	br	401c95c <write+0x48>
 401c958:	0005883a 	mov	r2,zero
 401c95c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401c960:	e0bffb17 	ldw	r2,-20(fp)
 401c964:	10002126 	beq	r2,zero,401c9ec <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 401c968:	e0bffb17 	ldw	r2,-20(fp)
 401c96c:	10800217 	ldw	r2,8(r2)
 401c970:	108000cc 	andi	r2,r2,3
 401c974:	10001826 	beq	r2,zero,401c9d8 <write+0xc4>
 401c978:	e0bffb17 	ldw	r2,-20(fp)
 401c97c:	10800017 	ldw	r2,0(r2)
 401c980:	10800617 	ldw	r2,24(r2)
 401c984:	10001426 	beq	r2,zero,401c9d8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 401c988:	e0bffb17 	ldw	r2,-20(fp)
 401c98c:	10800017 	ldw	r2,0(r2)
 401c990:	10800617 	ldw	r2,24(r2)
 401c994:	e0ffff17 	ldw	r3,-4(fp)
 401c998:	180d883a 	mov	r6,r3
 401c99c:	e17ffe17 	ldw	r5,-8(fp)
 401c9a0:	e13ffb17 	ldw	r4,-20(fp)
 401c9a4:	103ee83a 	callr	r2
 401c9a8:	e0bffc15 	stw	r2,-16(fp)
 401c9ac:	e0bffc17 	ldw	r2,-16(fp)
 401c9b0:	1000070e 	bge	r2,zero,401c9d0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 401c9b4:	401c8d80 	call	401c8d8 <alt_get_errno>
 401c9b8:	1007883a 	mov	r3,r2
 401c9bc:	e0bffc17 	ldw	r2,-16(fp)
 401c9c0:	0085c83a 	sub	r2,zero,r2
 401c9c4:	18800015 	stw	r2,0(r3)
        return -1;
 401c9c8:	00bfffc4 	movi	r2,-1
 401c9cc:	00000c06 	br	401ca00 <write+0xec>
      }
      return rval;
 401c9d0:	e0bffc17 	ldw	r2,-16(fp)
 401c9d4:	00000a06 	br	401ca00 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 401c9d8:	401c8d80 	call	401c8d8 <alt_get_errno>
 401c9dc:	1007883a 	mov	r3,r2
 401c9e0:	00800344 	movi	r2,13
 401c9e4:	18800015 	stw	r2,0(r3)
 401c9e8:	00000406 	br	401c9fc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 401c9ec:	401c8d80 	call	401c8d8 <alt_get_errno>
 401c9f0:	1007883a 	mov	r3,r2
 401c9f4:	00801444 	movi	r2,81
 401c9f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401c9fc:	00bfffc4 	movi	r2,-1
}
 401ca00:	e037883a 	mov	sp,fp
 401ca04:	dfc00117 	ldw	ra,4(sp)
 401ca08:	df000017 	ldw	fp,0(sp)
 401ca0c:	dec00204 	addi	sp,sp,8
 401ca10:	f800283a 	ret

0401ca14 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 401ca14:	defffd04 	addi	sp,sp,-12
 401ca18:	dfc00215 	stw	ra,8(sp)
 401ca1c:	df000115 	stw	fp,4(sp)
 401ca20:	df000104 	addi	fp,sp,4
 401ca24:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 401ca28:	d165b404 	addi	r5,gp,-26928
 401ca2c:	e13fff17 	ldw	r4,-4(fp)
 401ca30:	401f7440 	call	401f744 <alt_dev_llist_insert>
}
 401ca34:	e037883a 	mov	sp,fp
 401ca38:	dfc00117 	ldw	ra,4(sp)
 401ca3c:	df000017 	ldw	fp,0(sp)
 401ca40:	dec00204 	addi	sp,sp,8
 401ca44:	f800283a 	ret

0401ca48 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 401ca48:	defffd04 	addi	sp,sp,-12
 401ca4c:	dfc00215 	stw	ra,8(sp)
 401ca50:	df000115 	stw	fp,4(sp)
 401ca54:	df000104 	addi	fp,sp,4
 401ca58:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 401ca5c:	40203e80 	call	40203e8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 401ca60:	00800044 	movi	r2,1
 401ca64:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 401ca68:	0001883a 	nop
 401ca6c:	e037883a 	mov	sp,fp
 401ca70:	dfc00117 	ldw	ra,4(sp)
 401ca74:	df000017 	ldw	fp,0(sp)
 401ca78:	dec00204 	addi	sp,sp,8
 401ca7c:	f800283a 	ret

0401ca80 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 401ca80:	defffe04 	addi	sp,sp,-8
 401ca84:	dfc00115 	stw	ra,4(sp)
 401ca88:	df000015 	stw	fp,0(sp)
 401ca8c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 401ca90:	01c0fa04 	movi	r7,1000
 401ca94:	01800084 	movi	r6,2
 401ca98:	000b883a 	mov	r5,zero
 401ca9c:	01020034 	movhi	r4,2048
 401caa0:	21041004 	addi	r4,r4,4160
 401caa4:	401f3e80 	call	401f3e8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 401caa8:	010100f4 	movhi	r4,1027
 401caac:	2121b004 	addi	r4,r4,-31040
 401cab0:	401cd440 	call	401cd44 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 401cab4:	01800044 	movi	r6,1
 401cab8:	000b883a 	mov	r5,zero
 401cabc:	010100f4 	movhi	r4,1027
 401cac0:	2121c804 	addi	r4,r4,-30944
 401cac4:	401e8700 	call	401e870 <altera_avalon_jtag_uart_init>
 401cac8:	010100f4 	movhi	r4,1027
 401cacc:	2121be04 	addi	r4,r4,-30984
 401cad0:	401ca140 	call	401ca14 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 401cad4:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 401cad8:	0001883a 	nop
}
 401cadc:	0001883a 	nop
 401cae0:	e037883a 	mov	sp,fp
 401cae4:	dfc00117 	ldw	ra,4(sp)
 401cae8:	df000017 	ldw	fp,0(sp)
 401caec:	dec00204 	addi	sp,sp,8
 401caf0:	f800283a 	ret

0401caf4 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 401caf4:	defff904 	addi	sp,sp,-28
 401caf8:	dfc00615 	stw	ra,24(sp)
 401cafc:	df000515 	stw	fp,20(sp)
 401cb00:	df000504 	addi	fp,sp,20
 401cb04:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 401cb08:	008000b4 	movhi	r2,2
 401cb0c:	10a1a804 	addi	r2,r2,-31072
 401cb10:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 401cb14:	e0bfff17 	ldw	r2,-4(fp)
 401cb18:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 401cb1c:	e0bffc17 	ldw	r2,-16(fp)
 401cb20:	10800717 	ldw	r2,28(r2)
 401cb24:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 401cb28:	e0bffd17 	ldw	r2,-12(fp)
 401cb2c:	10800217 	ldw	r2,8(r2)
 401cb30:	10800098 	cmpnei	r2,r2,2
 401cb34:	1000251e 	bne	r2,zero,401cbcc <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 401cb38:	e0bffd17 	ldw	r2,-12(fp)
 401cb3c:	10c00017 	ldw	r3,0(r2)
 401cb40:	e0bffd17 	ldw	r2,-12(fp)
 401cb44:	10800117 	ldw	r2,4(r2)
 401cb48:	e13ffe04 	addi	r4,fp,-8
 401cb4c:	200f883a 	mov	r7,r4
 401cb50:	100d883a 	mov	r6,r2
 401cb54:	180b883a 	mov	r5,r3
 401cb58:	e13ffc17 	ldw	r4,-16(fp)
 401cb5c:	401d2a40 	call	401d2a4 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 401cb60:	e0bffd17 	ldw	r2,-12(fp)
 401cb64:	10c00117 	ldw	r3,4(r2)
 401cb68:	e0bffe17 	ldw	r2,-8(fp)
 401cb6c:	1887c83a 	sub	r3,r3,r2
 401cb70:	e0bffd17 	ldw	r2,-12(fp)
 401cb74:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 401cb78:	e0bffd17 	ldw	r2,-12(fp)
 401cb7c:	10c00017 	ldw	r3,0(r2)
 401cb80:	e0bffe17 	ldw	r2,-8(fp)
 401cb84:	1887883a 	add	r3,r3,r2
 401cb88:	e0bffd17 	ldw	r2,-12(fp)
 401cb8c:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 401cb90:	e0bffd17 	ldw	r2,-12(fp)
 401cb94:	10800117 	ldw	r2,4(r2)
 401cb98:	10000c26 	beq	r2,zero,401cbcc <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401cb9c:	01400704 	movi	r5,28
 401cba0:	e13ffc17 	ldw	r4,-16(fp)
 401cba4:	401e45c0 	call	401e45c <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 401cba8:	01400084 	movi	r5,2
 401cbac:	e13ffc17 	ldw	r4,-16(fp)
 401cbb0:	401e5000 	call	401e500 <alt_avalon_i2c_int_enable>
 401cbb4:	00000e06 	br	401cbf0 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 401cbb8:	e0bffb17 	ldw	r2,-20(fp)
 401cbbc:	10bfffc4 	addi	r2,r2,-1
 401cbc0:	e0bffb15 	stw	r2,-20(fp)
 401cbc4:	e0bffb17 	ldw	r2,-20(fp)
 401cbc8:	10000426 	beq	r2,zero,401cbdc <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 401cbcc:	e13ffc17 	ldw	r4,-16(fp)
 401cbd0:	401d2600 	call	401d260 <alt_avalon_i2c_is_busy>
 401cbd4:	103ff81e 	bne	r2,zero,401cbb8 <__alt_mem_onchip_memory2_0+0xfc01b918>
 401cbd8:	00000106 	br	401cbe0 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 401cbdc:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 401cbe0:	e13ffc17 	ldw	r4,-16(fp)
 401cbe4:	401cf080 	call	401cf08 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 401cbe8:	e0bffd17 	ldw	r2,-12(fp)
 401cbec:	10000215 	stw	zero,8(r2)
}
 401cbf0:	e037883a 	mov	sp,fp
 401cbf4:	dfc00117 	ldw	ra,4(sp)
 401cbf8:	df000017 	ldw	fp,0(sp)
 401cbfc:	dec00204 	addi	sp,sp,8
 401cc00:	f800283a 	ret

0401cc04 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 401cc04:	defffc04 	addi	sp,sp,-16
 401cc08:	dfc00315 	stw	ra,12(sp)
 401cc0c:	df000215 	stw	fp,8(sp)
 401cc10:	df000204 	addi	fp,sp,8
 401cc14:	e13ffe15 	stw	r4,-8(fp)
 401cc18:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 401cc1c:	e0bfff17 	ldw	r2,-4(fp)
 401cc20:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 401cc24:	e1ffff17 	ldw	r7,-4(fp)
 401cc28:	000d883a 	mov	r6,zero
 401cc2c:	014100b4 	movhi	r5,1026
 401cc30:	2972bd04 	addi	r5,r5,-13580
 401cc34:	e13ffe17 	ldw	r4,-8(fp)
 401cc38:	401ccf00 	call	401ccf0 <alt_avalon_i2c_register_callback>
}
 401cc3c:	0001883a 	nop
 401cc40:	e037883a 	mov	sp,fp
 401cc44:	dfc00117 	ldw	ra,4(sp)
 401cc48:	df000017 	ldw	fp,0(sp)
 401cc4c:	dec00204 	addi	sp,sp,8
 401cc50:	f800283a 	ret

0401cc54 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 401cc54:	defff904 	addi	sp,sp,-28
 401cc58:	dfc00615 	stw	ra,24(sp)
 401cc5c:	df000515 	stw	fp,20(sp)
 401cc60:	df000504 	addi	fp,sp,20
 401cc64:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 401cc68:	e0bfff17 	ldw	r2,-4(fp)
 401cc6c:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 401cc70:	014007c4 	movi	r5,31
 401cc74:	e13ffb17 	ldw	r4,-20(fp)
 401cc78:	401e4980 	call	401e498 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401cc7c:	01400704 	movi	r5,28
 401cc80:	e13ffb17 	ldw	r4,-20(fp)
 401cc84:	401e45c0 	call	401e45c <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 401cc88:	e0bffb17 	ldw	r2,-20(fp)
 401cc8c:	10800617 	ldw	r2,24(r2)
 401cc90:	10001126 	beq	r2,zero,401ccd8 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401cc94:	0005303a 	rdctl	r2,status
 401cc98:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401cc9c:	e0fffd17 	ldw	r3,-12(fp)
 401cca0:	00bfff84 	movi	r2,-2
 401cca4:	1884703a 	and	r2,r3,r2
 401cca8:	1001703a 	wrctl	status,r2
  
  return context;
 401ccac:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 401ccb0:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 401ccb4:	e0bffb17 	ldw	r2,-20(fp)
 401ccb8:	10800617 	ldw	r2,24(r2)
 401ccbc:	e13ffb17 	ldw	r4,-20(fp)
 401ccc0:	103ee83a 	callr	r2
 401ccc4:	e0bffc17 	ldw	r2,-16(fp)
 401ccc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401cccc:	e0bffe17 	ldw	r2,-8(fp)
 401ccd0:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 401ccd4:	0001883a 	nop
 401ccd8:	0001883a 	nop
}
 401ccdc:	e037883a 	mov	sp,fp
 401cce0:	dfc00117 	ldw	ra,4(sp)
 401cce4:	df000017 	ldw	fp,0(sp)
 401cce8:	dec00204 	addi	sp,sp,8
 401ccec:	f800283a 	ret

0401ccf0 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 401ccf0:	defffb04 	addi	sp,sp,-20
 401ccf4:	df000415 	stw	fp,16(sp)
 401ccf8:	df000404 	addi	fp,sp,16
 401ccfc:	e13ffc15 	stw	r4,-16(fp)
 401cd00:	e17ffd15 	stw	r5,-12(fp)
 401cd04:	e1bffe15 	stw	r6,-8(fp)
 401cd08:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 401cd0c:	e0bffc17 	ldw	r2,-16(fp)
 401cd10:	e0fffd17 	ldw	r3,-12(fp)
 401cd14:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 401cd18:	e0bffc17 	ldw	r2,-16(fp)
 401cd1c:	e0ffff17 	ldw	r3,-4(fp)
 401cd20:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 401cd24:	e0bffc17 	ldw	r2,-16(fp)
 401cd28:	e0fffe17 	ldw	r3,-8(fp)
 401cd2c:	10c00815 	stw	r3,32(r2)

    return ;
 401cd30:	0001883a 	nop
}
 401cd34:	e037883a 	mov	sp,fp
 401cd38:	df000017 	ldw	fp,0(sp)
 401cd3c:	dec00104 	addi	sp,sp,4
 401cd40:	f800283a 	ret

0401cd44 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 401cd44:	defff704 	addi	sp,sp,-36
 401cd48:	dfc00815 	stw	ra,32(sp)
 401cd4c:	df000715 	stw	fp,28(sp)
 401cd50:	df000704 	addi	fp,sp,28
 401cd54:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 401cd58:	e13fff17 	ldw	r4,-4(fp)
 401cd5c:	401cf080 	call	401cf08 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 401cd60:	014007c4 	movi	r5,31
 401cd64:	e13fff17 	ldw	r4,-4(fp)
 401cd68:	401e4980 	call	401e498 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401cd6c:	01400704 	movi	r5,28
 401cd70:	e13fff17 	ldw	r4,-4(fp)
 401cd74:	401e45c0 	call	401e45c <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 401cd78:	014000c4 	movi	r5,3
 401cd7c:	e13fff17 	ldw	r4,-4(fp)
 401cd80:	401e6a40 	call	401e6a4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 401cd84:	014000c4 	movi	r5,3
 401cd88:	e13fff17 	ldw	r4,-4(fp)
 401cd8c:	401e5f40 	call	401e5f4 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 401cd90:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 401cd94:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 401cd98:	e0bffb04 	addi	r2,fp,-20
 401cd9c:	018000b4 	movhi	r6,2
 401cda0:	31a1a804 	addi	r6,r6,-31072
 401cda4:	100b883a 	mov	r5,r2
 401cda8:	e13fff17 	ldw	r4,-4(fp)
 401cdac:	401d1640 	call	401d164 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 401cdb0:	e0bffb04 	addi	r2,fp,-20
 401cdb4:	100b883a 	mov	r5,r2
 401cdb8:	e13fff17 	ldw	r4,-4(fp)
 401cdbc:	401d0040 	call	401d004 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 401cdc0:	d165b904 	addi	r5,gp,-26908
 401cdc4:	e13fff17 	ldw	r4,-4(fp)
 401cdc8:	401f7440 	call	401f744 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 401cdcc:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 401cdd0:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 401cdd4:	e0bffa17 	ldw	r2,-24(fp)
 401cdd8:	10000c1e 	bne	r2,zero,401ce0c <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 401cddc:	e0bfff17 	ldw	r2,-4(fp)
 401cde0:	10c00417 	ldw	r3,16(r2)
 401cde4:	e0bfff17 	ldw	r2,-4(fp)
 401cde8:	10800517 	ldw	r2,20(r2)
 401cdec:	d8000015 	stw	zero,0(sp)
 401cdf0:	e1ffff17 	ldw	r7,-4(fp)
 401cdf4:	018100b4 	movhi	r6,1026
 401cdf8:	31b31504 	addi	r6,r6,-13228
 401cdfc:	100b883a 	mov	r5,r2
 401ce00:	1809883a 	mov	r4,r3
 401ce04:	401f9580 	call	401f958 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 401ce08:	00000406 	br	401ce1c <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 401ce0c:	010100b4 	movhi	r4,1026
 401ce10:	211f1504 	addi	r4,r4,31828
 401ce14:	401ffdc0 	call	401ffdc <alt_printf>
    }

    return;
 401ce18:	0001883a 	nop

}
 401ce1c:	e037883a 	mov	sp,fp
 401ce20:	dfc00117 	ldw	ra,4(sp)
 401ce24:	df000017 	ldw	fp,0(sp)
 401ce28:	dec00204 	addi	sp,sp,8
 401ce2c:	f800283a 	ret

0401ce30 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 401ce30:	defffc04 	addi	sp,sp,-16
 401ce34:	dfc00315 	stw	ra,12(sp)
 401ce38:	df000215 	stw	fp,8(sp)
 401ce3c:	df000204 	addi	fp,sp,8
 401ce40:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 401ce44:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 401ce48:	d165b904 	addi	r5,gp,-26908
 401ce4c:	e13fff17 	ldw	r4,-4(fp)
 401ce50:	401f8a80 	call	401f8a8 <alt_find_dev>
 401ce54:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 401ce58:	e0bffe17 	ldw	r2,-8(fp)
}
 401ce5c:	e037883a 	mov	sp,fp
 401ce60:	dfc00117 	ldw	ra,4(sp)
 401ce64:	df000017 	ldw	fp,0(sp)
 401ce68:	dec00204 	addi	sp,sp,8
 401ce6c:	f800283a 	ret

0401ce70 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401ce70:	defffc04 	addi	sp,sp,-16
 401ce74:	df000315 	stw	fp,12(sp)
 401ce78:	df000304 	addi	fp,sp,12
 401ce7c:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 401ce80:	e0bfff17 	ldw	r2,-4(fp)
 401ce84:	10800717 	ldw	r2,28(r2)
 401ce88:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 401ce8c:	e0bfff17 	ldw	r2,-4(fp)
 401ce90:	10800317 	ldw	r2,12(r2)
 401ce94:	10800204 	addi	r2,r2,8
 401ce98:	10800037 	ldwio	r2,0(r2)
 401ce9c:	1080004c 	andi	r2,r2,1
 401cea0:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 401cea4:	e0bffe17 	ldw	r2,-8(fp)
 401cea8:	10000226 	beq	r2,zero,401ceb4 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 401ceac:	00bffe44 	movi	r2,-7
 401ceb0:	00001106 	br	401cef8 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 401ceb4:	e0bfff17 	ldw	r2,-4(fp)
 401ceb8:	10c00617 	ldw	r3,24(r2)
 401cebc:	008100b4 	movhi	r2,1026
 401cec0:	10b2bd04 	addi	r2,r2,-13580
 401cec4:	1880021e 	bne	r3,r2,401ced0 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 401cec8:	e0bffd17 	ldw	r2,-12(fp)
 401cecc:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 401ced0:	e0bfff17 	ldw	r2,-4(fp)
 401ced4:	10800317 	ldw	r2,12(r2)
 401ced8:	10800204 	addi	r2,r2,8
 401cedc:	e0ffff17 	ldw	r3,-4(fp)
 401cee0:	18c00317 	ldw	r3,12(r3)
 401cee4:	18c00204 	addi	r3,r3,8
 401cee8:	18c00037 	ldwio	r3,0(r3)
 401ceec:	18c00054 	ori	r3,r3,1
 401cef0:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 401cef4:	0005883a 	mov	r2,zero
}
 401cef8:	e037883a 	mov	sp,fp
 401cefc:	df000017 	ldw	fp,0(sp)
 401cf00:	dec00104 	addi	sp,sp,4
 401cf04:	f800283a 	ret

0401cf08 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401cf08:	defffe04 	addi	sp,sp,-8
 401cf0c:	df000115 	stw	fp,4(sp)
 401cf10:	df000104 	addi	fp,sp,4
 401cf14:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 401cf18:	e0bfff17 	ldw	r2,-4(fp)
 401cf1c:	10800317 	ldw	r2,12(r2)
 401cf20:	10800204 	addi	r2,r2,8
 401cf24:	e0ffff17 	ldw	r3,-4(fp)
 401cf28:	18c00317 	ldw	r3,12(r3)
 401cf2c:	18c00204 	addi	r3,r3,8
 401cf30:	19000037 	ldwio	r4,0(r3)
 401cf34:	00ffff84 	movi	r3,-2
 401cf38:	20c6703a 	and	r3,r4,r3
 401cf3c:	10c00035 	stwio	r3,0(r2)

}
 401cf40:	0001883a 	nop
 401cf44:	e037883a 	mov	sp,fp
 401cf48:	df000017 	ldw	fp,0(sp)
 401cf4c:	dec00104 	addi	sp,sp,4
 401cf50:	f800283a 	ret

0401cf54 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 401cf54:	defffd04 	addi	sp,sp,-12
 401cf58:	df000215 	stw	fp,8(sp)
 401cf5c:	df000204 	addi	fp,sp,8
 401cf60:	e13ffe15 	stw	r4,-8(fp)
 401cf64:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 401cf68:	e0bffe17 	ldw	r2,-8(fp)
 401cf6c:	10c00d17 	ldw	r3,52(r2)
 401cf70:	e0bfff17 	ldw	r2,-4(fp)
 401cf74:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 401cf78:	e0bffe17 	ldw	r2,-8(fp)
 401cf7c:	10800317 	ldw	r2,12(r2)
 401cf80:	10800204 	addi	r2,r2,8
 401cf84:	10800037 	ldwio	r2,0(r2)
 401cf88:	1080008c 	andi	r2,r2,2
 401cf8c:	1005d07a 	srai	r2,r2,1
 401cf90:	1007883a 	mov	r3,r2
 401cf94:	e0bfff17 	ldw	r2,-4(fp)
 401cf98:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 401cf9c:	e0bffe17 	ldw	r2,-8(fp)
 401cfa0:	10800317 	ldw	r2,12(r2)
 401cfa4:	10800904 	addi	r2,r2,36
 401cfa8:	10800037 	ldwio	r2,0(r2)
 401cfac:	1007883a 	mov	r3,r2
 401cfb0:	e0bfff17 	ldw	r2,-4(fp)
 401cfb4:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 401cfb8:	e0bffe17 	ldw	r2,-8(fp)
 401cfbc:	10800317 	ldw	r2,12(r2)
 401cfc0:	10800804 	addi	r2,r2,32
 401cfc4:	10800037 	ldwio	r2,0(r2)
 401cfc8:	1007883a 	mov	r3,r2
 401cfcc:	e0bfff17 	ldw	r2,-4(fp)
 401cfd0:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 401cfd4:	e0bffe17 	ldw	r2,-8(fp)
 401cfd8:	10800317 	ldw	r2,12(r2)
 401cfdc:	10800a04 	addi	r2,r2,40
 401cfe0:	10800037 	ldwio	r2,0(r2)
 401cfe4:	1007883a 	mov	r3,r2
 401cfe8:	e0bfff17 	ldw	r2,-4(fp)
 401cfec:	10c0030d 	sth	r3,12(r2)
}
 401cff0:	0001883a 	nop
 401cff4:	e037883a 	mov	sp,fp
 401cff8:	df000017 	ldw	fp,0(sp)
 401cffc:	dec00104 	addi	sp,sp,4
 401d000:	f800283a 	ret

0401d004 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 401d004:	defffd04 	addi	sp,sp,-12
 401d008:	df000215 	stw	fp,8(sp)
 401d00c:	df000204 	addi	fp,sp,8
 401d010:	e13ffe15 	stw	r4,-8(fp)
 401d014:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 401d018:	e0bfff17 	ldw	r2,-4(fp)
 401d01c:	10c00017 	ldw	r3,0(r2)
 401d020:	e0bffe17 	ldw	r2,-8(fp)
 401d024:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 401d028:	e0bffe17 	ldw	r2,-8(fp)
 401d02c:	10800317 	ldw	r2,12(r2)
 401d030:	10c00204 	addi	r3,r2,8
 401d034:	e0bffe17 	ldw	r2,-8(fp)
 401d038:	10800317 	ldw	r2,12(r2)
 401d03c:	10800204 	addi	r2,r2,8
 401d040:	10800037 	ldwio	r2,0(r2)
 401d044:	1009883a 	mov	r4,r2
 401d048:	00bfff44 	movi	r2,-3
 401d04c:	2088703a 	and	r4,r4,r2
 401d050:	e0bfff17 	ldw	r2,-4(fp)
 401d054:	10800117 	ldw	r2,4(r2)
 401d058:	1085883a 	add	r2,r2,r2
 401d05c:	1080008c 	andi	r2,r2,2
 401d060:	2084b03a 	or	r2,r4,r2
 401d064:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 401d068:	e0bffe17 	ldw	r2,-8(fp)
 401d06c:	10800317 	ldw	r2,12(r2)
 401d070:	10800904 	addi	r2,r2,36
 401d074:	e0ffff17 	ldw	r3,-4(fp)
 401d078:	18c0020b 	ldhu	r3,8(r3)
 401d07c:	18ffffcc 	andi	r3,r3,65535
 401d080:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 401d084:	e0bffe17 	ldw	r2,-8(fp)
 401d088:	10800317 	ldw	r2,12(r2)
 401d08c:	10800804 	addi	r2,r2,32
 401d090:	e0ffff17 	ldw	r3,-4(fp)
 401d094:	18c0028b 	ldhu	r3,10(r3)
 401d098:	18ffffcc 	andi	r3,r3,65535
 401d09c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 401d0a0:	e0bffe17 	ldw	r2,-8(fp)
 401d0a4:	10800317 	ldw	r2,12(r2)
 401d0a8:	10800a04 	addi	r2,r2,40
 401d0ac:	e0ffff17 	ldw	r3,-4(fp)
 401d0b0:	18c0030b 	ldhu	r3,12(r3)
 401d0b4:	18ffffcc 	andi	r3,r3,65535
 401d0b8:	10c00035 	stwio	r3,0(r2)
}
 401d0bc:	0001883a 	nop
 401d0c0:	e037883a 	mov	sp,fp
 401d0c4:	df000017 	ldw	fp,0(sp)
 401d0c8:	dec00104 	addi	sp,sp,4
 401d0cc:	f800283a 	ret

0401d0d0 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 401d0d0:	defffb04 	addi	sp,sp,-20
 401d0d4:	dfc00415 	stw	ra,16(sp)
 401d0d8:	df000315 	stw	fp,12(sp)
 401d0dc:	df000304 	addi	fp,sp,12
 401d0e0:	e13ffd15 	stw	r4,-12(fp)
 401d0e4:	e17ffe15 	stw	r5,-8(fp)
 401d0e8:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 401d0ec:	e0bffe17 	ldw	r2,-8(fp)
 401d0f0:	1080028b 	ldhu	r2,10(r2)
 401d0f4:	10bfffcc 	andi	r2,r2,65535
 401d0f8:	10000426 	beq	r2,zero,401d10c <alt_avalon_i2c_master_config_speed_get+0x3c>
 401d0fc:	e0bffe17 	ldw	r2,-8(fp)
 401d100:	1080020b 	ldhu	r2,8(r2)
 401d104:	10bfffcc 	andi	r2,r2,65535
 401d108:	1000021e 	bne	r2,zero,401d114 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 401d10c:	00bfff44 	movi	r2,-3
 401d110:	00000f06 	br	401d150 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 401d114:	e0bffd17 	ldw	r2,-12(fp)
 401d118:	11000c17 	ldw	r4,48(r2)
 401d11c:	e0bffe17 	ldw	r2,-8(fp)
 401d120:	1080028b 	ldhu	r2,10(r2)
 401d124:	10ffffcc 	andi	r3,r2,65535
 401d128:	e0bffe17 	ldw	r2,-8(fp)
 401d12c:	1080020b 	ldhu	r2,8(r2)
 401d130:	10bfffcc 	andi	r2,r2,65535
 401d134:	1885883a 	add	r2,r3,r2
 401d138:	100b883a 	mov	r5,r2
 401d13c:	400da240 	call	400da24 <__udivsi3>
 401d140:	1007883a 	mov	r3,r2
 401d144:	e0bfff17 	ldw	r2,-4(fp)
 401d148:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 401d14c:	0005883a 	mov	r2,zero
}
 401d150:	e037883a 	mov	sp,fp
 401d154:	dfc00117 	ldw	ra,4(sp)
 401d158:	df000017 	ldw	fp,0(sp)
 401d15c:	dec00204 	addi	sp,sp,8
 401d160:	f800283a 	ret

0401d164 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 401d164:	defff904 	addi	sp,sp,-28
 401d168:	dfc00615 	stw	ra,24(sp)
 401d16c:	df000515 	stw	fp,20(sp)
 401d170:	df000504 	addi	fp,sp,20
 401d174:	e13ffd15 	stw	r4,-12(fp)
 401d178:	e17ffe15 	stw	r5,-8(fp)
 401d17c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 401d180:	e0ffff17 	ldw	r3,-4(fp)
 401d184:	008001b4 	movhi	r2,6
 401d188:	1086a004 	addi	r2,r2,6784
 401d18c:	10c00436 	bltu	r2,r3,401d1a0 <alt_avalon_i2c_master_config_speed_set+0x3c>
 401d190:	e0bfff17 	ldw	r2,-4(fp)
 401d194:	10000226 	beq	r2,zero,401d1a0 <alt_avalon_i2c_master_config_speed_set+0x3c>
 401d198:	e0bfff17 	ldw	r2,-4(fp)
 401d19c:	1000021e 	bne	r2,zero,401d1a8 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 401d1a0:	00bfff04 	movi	r2,-4
 401d1a4:	00002906 	br	401d24c <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 401d1a8:	e0bffd17 	ldw	r2,-12(fp)
 401d1ac:	10c00c17 	ldw	r3,48(r2)
 401d1b0:	e0bfff17 	ldw	r2,-4(fp)
 401d1b4:	1085883a 	add	r2,r2,r2
 401d1b8:	100b883a 	mov	r5,r2
 401d1bc:	1809883a 	mov	r4,r3
 401d1c0:	400da240 	call	400da24 <__udivsi3>
 401d1c4:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 401d1c8:	e0bffb17 	ldw	r2,-20(fp)
 401d1cc:	10800f04 	addi	r2,r2,60
 401d1d0:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 401d1d4:	e0bffb17 	ldw	r2,-20(fp)
 401d1d8:	10bff104 	addi	r2,r2,-60
 401d1dc:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 401d1e0:	e0ffff17 	ldw	r3,-4(fp)
 401d1e4:	008000b4 	movhi	r2,2
 401d1e8:	10a1a804 	addi	r2,r2,-31072
 401d1ec:	10c0042e 	bgeu	r2,r3,401d200 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 401d1f0:	e0bffe17 	ldw	r2,-8(fp)
 401d1f4:	00c00044 	movi	r3,1
 401d1f8:	10c00115 	stw	r3,4(r2)
 401d1fc:	00000206 	br	401d208 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 401d200:	e0bffe17 	ldw	r2,-8(fp)
 401d204:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 401d208:	e0bffb17 	ldw	r2,-20(fp)
 401d20c:	1007883a 	mov	r3,r2
 401d210:	e0bffe17 	ldw	r2,-8(fp)
 401d214:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 401d218:	e0bffc17 	ldw	r2,-16(fp)
 401d21c:	1007883a 	mov	r3,r2
 401d220:	e0bffe17 	ldw	r2,-8(fp)
 401d224:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 401d228:	e0bffb17 	ldw	r2,-20(fp)
 401d22c:	1007883a 	mov	r3,r2
 401d230:	e0bffb17 	ldw	r2,-20(fp)
 401d234:	1004d07a 	srli	r2,r2,1
 401d238:	1885c83a 	sub	r2,r3,r2
 401d23c:	1007883a 	mov	r3,r2
 401d240:	e0bffe17 	ldw	r2,-8(fp)
 401d244:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 401d248:	0005883a 	mov	r2,zero

}
 401d24c:	e037883a 	mov	sp,fp
 401d250:	dfc00117 	ldw	ra,4(sp)
 401d254:	df000017 	ldw	fp,0(sp)
 401d258:	dec00204 	addi	sp,sp,8
 401d25c:	f800283a 	ret

0401d260 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401d260:	defffe04 	addi	sp,sp,-8
 401d264:	df000115 	stw	fp,4(sp)
 401d268:	df000104 	addi	fp,sp,4
 401d26c:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 401d270:	e0bfff17 	ldw	r2,-4(fp)
 401d274:	10800317 	ldw	r2,12(r2)
 401d278:	10800504 	addi	r2,r2,20
 401d27c:	10800037 	ldwio	r2,0(r2)
 401d280:	1080004c 	andi	r2,r2,1
 401d284:	10000226 	beq	r2,zero,401d290 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 401d288:	00800044 	movi	r2,1
 401d28c:	00000106 	br	401d294 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 401d290:	0005883a 	mov	r2,zero
}
 401d294:	e037883a 	mov	sp,fp
 401d298:	df000017 	ldw	fp,0(sp)
 401d29c:	dec00104 	addi	sp,sp,4
 401d2a0:	f800283a 	ret

0401d2a4 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 401d2a4:	defffb04 	addi	sp,sp,-20
 401d2a8:	df000415 	stw	fp,16(sp)
 401d2ac:	df000404 	addi	fp,sp,16
 401d2b0:	e13ffc15 	stw	r4,-16(fp)
 401d2b4:	e17ffd15 	stw	r5,-12(fp)
 401d2b8:	e1bffe15 	stw	r6,-8(fp)
 401d2bc:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 401d2c0:	e0bfff17 	ldw	r2,-4(fp)
 401d2c4:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 401d2c8:	00001406 	br	401d31c <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 401d2cc:	e0bfff17 	ldw	r2,-4(fp)
 401d2d0:	10800017 	ldw	r2,0(r2)
 401d2d4:	e0fffd17 	ldw	r3,-12(fp)
 401d2d8:	1885883a 	add	r2,r3,r2
 401d2dc:	e0fffc17 	ldw	r3,-16(fp)
 401d2e0:	18c00317 	ldw	r3,12(r3)
 401d2e4:	18c00104 	addi	r3,r3,4
 401d2e8:	18c00037 	ldwio	r3,0(r3)
 401d2ec:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 401d2f0:	e0bfff17 	ldw	r2,-4(fp)
 401d2f4:	10800017 	ldw	r2,0(r2)
 401d2f8:	10c00044 	addi	r3,r2,1
 401d2fc:	e0bfff17 	ldw	r2,-4(fp)
 401d300:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 401d304:	e0bfff17 	ldw	r2,-4(fp)
 401d308:	10c00017 	ldw	r3,0(r2)
 401d30c:	e0bffe17 	ldw	r2,-8(fp)
 401d310:	1880021e 	bne	r3,r2,401d31c <alt_avalon_i2c_rx_read_available+0x78>
 401d314:	e0bffe17 	ldw	r2,-8(fp)
 401d318:	1000061e 	bne	r2,zero,401d334 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 401d31c:	e0bffc17 	ldw	r2,-16(fp)
 401d320:	10800317 	ldw	r2,12(r2)
 401d324:	10800704 	addi	r2,r2,28
 401d328:	10800037 	ldwio	r2,0(r2)
 401d32c:	103fe71e 	bne	r2,zero,401d2cc <__alt_mem_onchip_memory2_0+0xfc01c02c>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 401d330:	00000106 	br	401d338 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 401d334:	0001883a 	nop
    }
}
 401d338:	0001883a 	nop
 401d33c:	e037883a 	mov	sp,fp
 401d340:	df000017 	ldw	fp,0(sp)
 401d344:	dec00104 	addi	sp,sp,4
 401d348:	f800283a 	ret

0401d34c <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 401d34c:	defffa04 	addi	sp,sp,-24
 401d350:	dfc00515 	stw	ra,20(sp)
 401d354:	df000415 	stw	fp,16(sp)
 401d358:	df000404 	addi	fp,sp,16
 401d35c:	e13ffe15 	stw	r4,-8(fp)
 401d360:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 401d364:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 401d368:	008000b4 	movhi	r2,2
 401d36c:	10a1a804 	addi	r2,r2,-31072
 401d370:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 401d374:	00000d06 	br	401d3ac <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 401d378:	e0bffd17 	ldw	r2,-12(fp)
 401d37c:	108002a8 	cmpgeui	r2,r2,10
 401d380:	1000021e 	bne	r2,zero,401d38c <alt_avalon_i2c_rx_read+0x40>
 401d384:	0109c404 	movi	r4,10000
 401d388:	401f5900 	call	401f590 <alt_busy_sleep>
      if (--timeout == 0)
 401d38c:	e0bffd17 	ldw	r2,-12(fp)
 401d390:	10bfffc4 	addi	r2,r2,-1
 401d394:	e0bffd15 	stw	r2,-12(fp)
 401d398:	e0bffd17 	ldw	r2,-12(fp)
 401d39c:	1000031e 	bne	r2,zero,401d3ac <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 401d3a0:	00bfff84 	movi	r2,-2
 401d3a4:	e0bffc15 	stw	r2,-16(fp)
        break;
 401d3a8:	00000506 	br	401d3c0 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 401d3ac:	e0bffe17 	ldw	r2,-8(fp)
 401d3b0:	10800317 	ldw	r2,12(r2)
 401d3b4:	10800704 	addi	r2,r2,28
 401d3b8:	10800037 	ldwio	r2,0(r2)
 401d3bc:	103fee26 	beq	r2,zero,401d378 <__alt_mem_onchip_memory2_0+0xfc01c0d8>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 401d3c0:	e0bffe17 	ldw	r2,-8(fp)
 401d3c4:	10800317 	ldw	r2,12(r2)
 401d3c8:	10800104 	addi	r2,r2,4
 401d3cc:	10800037 	ldwio	r2,0(r2)
 401d3d0:	1007883a 	mov	r3,r2
 401d3d4:	e0bfff17 	ldw	r2,-4(fp)
 401d3d8:	10c00005 	stb	r3,0(r2)
        
    return status;
 401d3dc:	e0bffc17 	ldw	r2,-16(fp)
}
 401d3e0:	e037883a 	mov	sp,fp
 401d3e4:	dfc00117 	ldw	ra,4(sp)
 401d3e8:	df000017 	ldw	fp,0(sp)
 401d3ec:	dec00204 	addi	sp,sp,8
 401d3f0:	f800283a 	ret

0401d3f4 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 401d3f4:	defff804 	addi	sp,sp,-32
 401d3f8:	dfc00715 	stw	ra,28(sp)
 401d3fc:	df000615 	stw	fp,24(sp)
 401d400:	df000604 	addi	fp,sp,24
 401d404:	e13ffc15 	stw	r4,-16(fp)
 401d408:	2809883a 	mov	r4,r5
 401d40c:	3007883a 	mov	r3,r6
 401d410:	3805883a 	mov	r2,r7
 401d414:	e13ffd05 	stb	r4,-12(fp)
 401d418:	e0fffe05 	stb	r3,-8(fp)
 401d41c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 401d420:	0089c404 	movi	r2,10000
 401d424:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d428:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 401d42c:	00000c06 	br	401d460 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 401d430:	e0bffa17 	ldw	r2,-24(fp)
 401d434:	108002a8 	cmpgeui	r2,r2,10
 401d438:	1000021e 	bne	r2,zero,401d444 <alt_avalon_i2c_cmd_write+0x50>
 401d43c:	0109c404 	movi	r4,10000
 401d440:	401f5900 	call	401f590 <alt_busy_sleep>
      if (--timeout == 0)
 401d444:	e0bffa17 	ldw	r2,-24(fp)
 401d448:	10bfffc4 	addi	r2,r2,-1
 401d44c:	e0bffa15 	stw	r2,-24(fp)
 401d450:	e0bffa17 	ldw	r2,-24(fp)
 401d454:	1000021e 	bne	r2,zero,401d460 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 401d458:	00bfff84 	movi	r2,-2
 401d45c:	00001906 	br	401d4c4 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 401d460:	e0bffc17 	ldw	r2,-16(fp)
 401d464:	10800317 	ldw	r2,12(r2)
 401d468:	10800404 	addi	r2,r2,16
 401d46c:	10800037 	ldwio	r2,0(r2)
 401d470:	1080004c 	andi	r2,r2,1
 401d474:	103fee26 	beq	r2,zero,401d430 <__alt_mem_onchip_memory2_0+0xfc01c190>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 401d478:	e0bffc17 	ldw	r2,-16(fp)
 401d47c:	10800317 	ldw	r2,12(r2)
 401d480:	e13ffd03 	ldbu	r4,-12(fp)
 401d484:	e0fffe03 	ldbu	r3,-8(fp)
 401d488:	1806927a 	slli	r3,r3,9
 401d48c:	20c8b03a 	or	r4,r4,r3
 401d490:	e0ffff03 	ldbu	r3,-4(fp)
 401d494:	1806923a 	slli	r3,r3,8
 401d498:	20c6b03a 	or	r3,r4,r3
 401d49c:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 401d4a0:	e0bffb04 	addi	r2,fp,-20
 401d4a4:	100b883a 	mov	r5,r2
 401d4a8:	e13ffc17 	ldw	r4,-16(fp)
 401d4ac:	401d6340 	call	401d634 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 401d4b0:	e0bffb04 	addi	r2,fp,-20
 401d4b4:	100b883a 	mov	r5,r2
 401d4b8:	e13ffc17 	ldw	r4,-16(fp)
 401d4bc:	401d6800 	call	401d680 <alt_avalon_i2c_check_arblost>
    
    return status;
 401d4c0:	e0bffb17 	ldw	r2,-20(fp)
}
 401d4c4:	e037883a 	mov	sp,fp
 401d4c8:	dfc00117 	ldw	ra,4(sp)
 401d4cc:	df000017 	ldw	fp,0(sp)
 401d4d0:	dec00204 	addi	sp,sp,8
 401d4d4:	f800283a 	ret

0401d4d8 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 401d4d8:	defffa04 	addi	sp,sp,-24
 401d4dc:	dfc00515 	stw	ra,20(sp)
 401d4e0:	df000415 	stw	fp,16(sp)
 401d4e4:	df000404 	addi	fp,sp,16
 401d4e8:	e13ffd15 	stw	r4,-12(fp)
 401d4ec:	e17ffe15 	stw	r5,-8(fp)
 401d4f0:	3005883a 	mov	r2,r6
 401d4f4:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 401d4f8:	e0bffd17 	ldw	r2,-12(fp)
 401d4fc:	10800d17 	ldw	r2,52(r2)
 401d500:	10800058 	cmpnei	r2,r2,1
 401d504:	10001c1e 	bne	r2,zero,401d578 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 401d508:	e0bffd17 	ldw	r2,-12(fp)
 401d50c:	10800917 	ldw	r2,36(r2)
 401d510:	109e0014 	ori	r2,r2,30720
 401d514:	1004d1fa 	srli	r2,r2,7
 401d518:	1007883a 	mov	r3,r2
 401d51c:	00bfff84 	movi	r2,-2
 401d520:	1884703a 	and	r2,r3,r2
 401d524:	1007883a 	mov	r3,r2
 401d528:	e0bffe17 	ldw	r2,-8(fp)
 401d52c:	1884b03a 	or	r2,r3,r2
 401d530:	10803fcc 	andi	r2,r2,255
 401d534:	e0ffff03 	ldbu	r3,-4(fp)
 401d538:	000f883a 	mov	r7,zero
 401d53c:	180d883a 	mov	r6,r3
 401d540:	100b883a 	mov	r5,r2
 401d544:	e13ffd17 	ldw	r4,-12(fp)
 401d548:	401d3f40 	call	401d3f4 <alt_avalon_i2c_cmd_write>
 401d54c:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 401d550:	e0bffd17 	ldw	r2,-12(fp)
 401d554:	10800917 	ldw	r2,36(r2)
 401d558:	10803fcc 	andi	r2,r2,255
 401d55c:	000f883a 	mov	r7,zero
 401d560:	000d883a 	mov	r6,zero
 401d564:	100b883a 	mov	r5,r2
 401d568:	e13ffd17 	ldw	r4,-12(fp)
 401d56c:	401d3f40 	call	401d3f4 <alt_avalon_i2c_cmd_write>
 401d570:	e0bffc15 	stw	r2,-16(fp)
 401d574:	00000e06 	br	401d5b0 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 401d578:	e0bffd17 	ldw	r2,-12(fp)
 401d57c:	10800917 	ldw	r2,36(r2)
 401d580:	1085883a 	add	r2,r2,r2
 401d584:	1007883a 	mov	r3,r2
 401d588:	e0bffe17 	ldw	r2,-8(fp)
 401d58c:	1884b03a 	or	r2,r3,r2
 401d590:	10803fcc 	andi	r2,r2,255
 401d594:	e0ffff03 	ldbu	r3,-4(fp)
 401d598:	000f883a 	mov	r7,zero
 401d59c:	180d883a 	mov	r6,r3
 401d5a0:	100b883a 	mov	r5,r2
 401d5a4:	e13ffd17 	ldw	r4,-12(fp)
 401d5a8:	401d3f40 	call	401d3f4 <alt_avalon_i2c_cmd_write>
 401d5ac:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 401d5b0:	e0bffc17 	ldw	r2,-16(fp)
}
 401d5b4:	e037883a 	mov	sp,fp
 401d5b8:	dfc00117 	ldw	ra,4(sp)
 401d5bc:	df000017 	ldw	fp,0(sp)
 401d5c0:	dec00204 	addi	sp,sp,8
 401d5c4:	f800283a 	ret

0401d5c8 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 401d5c8:	defffd04 	addi	sp,sp,-12
 401d5cc:	df000215 	stw	fp,8(sp)
 401d5d0:	df000204 	addi	fp,sp,8
 401d5d4:	e13ffe15 	stw	r4,-8(fp)
 401d5d8:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 401d5dc:	e0bffe17 	ldw	r2,-8(fp)
 401d5e0:	10c00917 	ldw	r3,36(r2)
 401d5e4:	e0bfff17 	ldw	r2,-4(fp)
 401d5e8:	10c00015 	stw	r3,0(r2)
}
 401d5ec:	0001883a 	nop
 401d5f0:	e037883a 	mov	sp,fp
 401d5f4:	df000017 	ldw	fp,0(sp)
 401d5f8:	dec00104 	addi	sp,sp,4
 401d5fc:	f800283a 	ret

0401d600 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 401d600:	defffd04 	addi	sp,sp,-12
 401d604:	df000215 	stw	fp,8(sp)
 401d608:	df000204 	addi	fp,sp,8
 401d60c:	e13ffe15 	stw	r4,-8(fp)
 401d610:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 401d614:	e0bffe17 	ldw	r2,-8(fp)
 401d618:	e0ffff17 	ldw	r3,-4(fp)
 401d61c:	10c00915 	stw	r3,36(r2)
}
 401d620:	0001883a 	nop
 401d624:	e037883a 	mov	sp,fp
 401d628:	df000017 	ldw	fp,0(sp)
 401d62c:	dec00104 	addi	sp,sp,4
 401d630:	f800283a 	ret

0401d634 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 401d634:	defffd04 	addi	sp,sp,-12
 401d638:	df000215 	stw	fp,8(sp)
 401d63c:	df000204 	addi	fp,sp,8
 401d640:	e13ffe15 	stw	r4,-8(fp)
 401d644:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 401d648:	e0bffe17 	ldw	r2,-8(fp)
 401d64c:	10800317 	ldw	r2,12(r2)
 401d650:	10800404 	addi	r2,r2,16
 401d654:	10800037 	ldwio	r2,0(r2)
 401d658:	1080010c 	andi	r2,r2,4
 401d65c:	10000326 	beq	r2,zero,401d66c <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 401d660:	e0bfff17 	ldw	r2,-4(fp)
 401d664:	00fffec4 	movi	r3,-5
 401d668:	10c00015 	stw	r3,0(r2)
    }
}
 401d66c:	0001883a 	nop
 401d670:	e037883a 	mov	sp,fp
 401d674:	df000017 	ldw	fp,0(sp)
 401d678:	dec00104 	addi	sp,sp,4
 401d67c:	f800283a 	ret

0401d680 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 401d680:	defffd04 	addi	sp,sp,-12
 401d684:	df000215 	stw	fp,8(sp)
 401d688:	df000204 	addi	fp,sp,8
 401d68c:	e13ffe15 	stw	r4,-8(fp)
 401d690:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 401d694:	e0bffe17 	ldw	r2,-8(fp)
 401d698:	10800317 	ldw	r2,12(r2)
 401d69c:	10800404 	addi	r2,r2,16
 401d6a0:	10800037 	ldwio	r2,0(r2)
 401d6a4:	1080020c 	andi	r2,r2,8
 401d6a8:	10000326 	beq	r2,zero,401d6b8 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 401d6ac:	e0bfff17 	ldw	r2,-4(fp)
 401d6b0:	00fffe84 	movi	r3,-6
 401d6b4:	10c00015 	stw	r3,0(r2)
    }
}
 401d6b8:	0001883a 	nop
 401d6bc:	e037883a 	mov	sp,fp
 401d6c0:	df000017 	ldw	fp,0(sp)
 401d6c4:	dec00104 	addi	sp,sp,4
 401d6c8:	f800283a 	ret

0401d6cc <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401d6cc:	defff804 	addi	sp,sp,-32
 401d6d0:	dfc00715 	stw	ra,28(sp)
 401d6d4:	df000615 	stw	fp,24(sp)
 401d6d8:	df000604 	addi	fp,sp,24
 401d6dc:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d6e0:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 401d6e4:	e0bfff17 	ldw	r2,-4(fp)
 401d6e8:	10800717 	ldw	r2,28(r2)
 401d6ec:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 401d6f0:	e0bffb17 	ldw	r2,-20(fp)
 401d6f4:	10800117 	ldw	r2,4(r2)
 401d6f8:	10800044 	addi	r2,r2,1
 401d6fc:	0149c404 	movi	r5,10000
 401d700:	1009883a 	mov	r4,r2
 401d704:	400dae00 	call	400dae0 <__mulsi3>
 401d708:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 401d70c:	e0bffd04 	addi	r2,fp,-12
 401d710:	100b883a 	mov	r5,r2
 401d714:	e13fff17 	ldw	r4,-4(fp)
 401d718:	401e5640 	call	401e564 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 401d71c:	e0bffd17 	ldw	r2,-12(fp)
 401d720:	100b883a 	mov	r5,r2
 401d724:	e13fff17 	ldw	r4,-4(fp)
 401d728:	401e4980 	call	401e498 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 401d72c:	e0bffc04 	addi	r2,fp,-16
 401d730:	100b883a 	mov	r5,r2
 401d734:	e13fff17 	ldw	r4,-4(fp)
 401d738:	401d6340 	call	401d634 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 401d73c:	e0bffc17 	ldw	r2,-16(fp)
 401d740:	10002226 	beq	r2,zero,401d7cc <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 401d744:	e0bffb17 	ldw	r2,-20(fp)
 401d748:	10800217 	ldw	r2,8(r2)
 401d74c:	10001d26 	beq	r2,zero,401d7c4 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d750:	00000d06 	br	401d788 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 401d754:	e0bffa17 	ldw	r2,-24(fp)
 401d758:	108002a8 	cmpgeui	r2,r2,10
 401d75c:	1000021e 	bne	r2,zero,401d768 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 401d760:	0109c404 	movi	r4,10000
 401d764:	401f5900 	call	401f590 <alt_busy_sleep>
              if (--timeout == 0)
 401d768:	e0bffa17 	ldw	r2,-24(fp)
 401d76c:	10bfffc4 	addi	r2,r2,-1
 401d770:	e0bffa15 	stw	r2,-24(fp)
 401d774:	e0bffa17 	ldw	r2,-24(fp)
 401d778:	1000031e 	bne	r2,zero,401d788 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 401d77c:	00bfff84 	movi	r2,-2
 401d780:	e0bffc15 	stw	r2,-16(fp)
                 break;
 401d784:	00000306 	br	401d794 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d788:	e13fff17 	ldw	r4,-4(fp)
 401d78c:	401d2600 	call	401d260 <alt_avalon_i2c_is_busy>
 401d790:	103ff01e 	bne	r2,zero,401d754 <__alt_mem_onchip_memory2_0+0xfc01c4b4>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 401d794:	e0bffb17 	ldw	r2,-20(fp)
 401d798:	10800017 	ldw	r2,0(r2)
 401d79c:	e0fffe04 	addi	r3,fp,-8
 401d7a0:	180f883a 	mov	r7,r3
 401d7a4:	000d883a 	mov	r6,zero
 401d7a8:	100b883a 	mov	r5,r2
 401d7ac:	e13fff17 	ldw	r4,-4(fp)
 401d7b0:	401d2a40 	call	401d2a4 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 401d7b4:	e13fff17 	ldw	r4,-4(fp)
 401d7b8:	401cf080 	call	401cf08 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 401d7bc:	e0bffb17 	ldw	r2,-20(fp)
 401d7c0:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 401d7c4:	e0bffc17 	ldw	r2,-16(fp)
 401d7c8:	00000a06 	br	401d7f4 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 401d7cc:	e0bffb17 	ldw	r2,-20(fp)
 401d7d0:	10800217 	ldw	r2,8(r2)
 401d7d4:	10000626 	beq	r2,zero,401d7f0 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 401d7d8:	e0bffd17 	ldw	r2,-12(fp)
 401d7dc:	100b883a 	mov	r5,r2
 401d7e0:	e13fff17 	ldw	r4,-4(fp)
 401d7e4:	401e5000 	call	401e500 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 401d7e8:	00bffe44 	movi	r2,-7
 401d7ec:	00000106 	br	401d7f4 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 401d7f0:	0005883a 	mov	r2,zero
}
 401d7f4:	e037883a 	mov	sp,fp
 401d7f8:	dfc00117 	ldw	ra,4(sp)
 401d7fc:	df000017 	ldw	fp,0(sp)
 401d800:	dec00204 	addi	sp,sp,8
 401d804:	f800283a 	ret

0401d808 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 401d808:	defff704 	addi	sp,sp,-36
 401d80c:	dfc00815 	stw	ra,32(sp)
 401d810:	df000715 	stw	fp,28(sp)
 401d814:	df000704 	addi	fp,sp,28
 401d818:	e13ffc15 	stw	r4,-16(fp)
 401d81c:	e17ffd15 	stw	r5,-12(fp)
 401d820:	e1bffe15 	stw	r6,-8(fp)
 401d824:	3805883a 	mov	r2,r7
 401d828:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401d82c:	0089c404 	movi	r2,10000
 401d830:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 401d834:	00002206 	br	401d8c0 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 401d838:	e0bffb17 	ldw	r2,-20(fp)
 401d83c:	108002a8 	cmpgeui	r2,r2,10
 401d840:	1000021e 	bne	r2,zero,401d84c <alt_avalon_i2c_master_tx+0x44>
 401d844:	0109c404 	movi	r4,10000
 401d848:	401f5900 	call	401f590 <alt_busy_sleep>
      if (use_interrupts)
 401d84c:	e0bfff03 	ldbu	r2,-4(fp)
 401d850:	10000926 	beq	r2,zero,401d878 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 401d854:	00800044 	movi	r2,1
 401d858:	d8800015 	stw	r2,0(sp)
 401d85c:	000f883a 	mov	r7,zero
 401d860:	e1bffe17 	ldw	r6,-8(fp)
 401d864:	e17ffd17 	ldw	r5,-12(fp)
 401d868:	e13ffc17 	ldw	r4,-16(fp)
 401d86c:	401ddb40 	call	401ddb4 <alt_avalon_i2c_master_transmit_using_interrupts>
 401d870:	e0bffa15 	stw	r2,-24(fp)
 401d874:	00000806 	br	401d898 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 401d878:	00800044 	movi	r2,1
 401d87c:	d8800015 	stw	r2,0(sp)
 401d880:	000f883a 	mov	r7,zero
 401d884:	e1bffe17 	ldw	r6,-8(fp)
 401d888:	e17ffd17 	ldw	r5,-12(fp)
 401d88c:	e13ffc17 	ldw	r4,-16(fp)
 401d890:	401dbf40 	call	401dbf4 <alt_avalon_i2c_master_transmit>
 401d894:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d898:	e0bffa17 	ldw	r2,-24(fp)
 401d89c:	10bffea0 	cmpeqi	r2,r2,-6
 401d8a0:	1000061e 	bne	r2,zero,401d8bc <alt_avalon_i2c_master_tx+0xb4>
 401d8a4:	e0bffa17 	ldw	r2,-24(fp)
 401d8a8:	10bffee0 	cmpeqi	r2,r2,-5
 401d8ac:	1000031e 	bne	r2,zero,401d8bc <alt_avalon_i2c_master_tx+0xb4>
 401d8b0:	e0bffa17 	ldw	r2,-24(fp)
 401d8b4:	10bffe58 	cmpnei	r2,r2,-7
 401d8b8:	1000061e 	bne	r2,zero,401d8d4 <alt_avalon_i2c_master_tx+0xcc>
 401d8bc:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 401d8c0:	e0bffb17 	ldw	r2,-20(fp)
 401d8c4:	10ffffc4 	addi	r3,r2,-1
 401d8c8:	e0fffb15 	stw	r3,-20(fp)
 401d8cc:	103fda1e 	bne	r2,zero,401d838 <__alt_mem_onchip_memory2_0+0xfc01c598>
 401d8d0:	00000106 	br	401d8d8 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 401d8d4:	0001883a 	nop
    }

    return status;
 401d8d8:	e0bffa17 	ldw	r2,-24(fp)
}        
 401d8dc:	e037883a 	mov	sp,fp
 401d8e0:	dfc00117 	ldw	ra,4(sp)
 401d8e4:	df000017 	ldw	fp,0(sp)
 401d8e8:	dec00204 	addi	sp,sp,8
 401d8ec:	f800283a 	ret

0401d8f0 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 401d8f0:	defff704 	addi	sp,sp,-36
 401d8f4:	dfc00815 	stw	ra,32(sp)
 401d8f8:	df000715 	stw	fp,28(sp)
 401d8fc:	df000704 	addi	fp,sp,28
 401d900:	e13ffc15 	stw	r4,-16(fp)
 401d904:	e17ffd15 	stw	r5,-12(fp)
 401d908:	e1bffe15 	stw	r6,-8(fp)
 401d90c:	3805883a 	mov	r2,r7
 401d910:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401d914:	0089c404 	movi	r2,10000
 401d918:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 401d91c:	e0bfff03 	ldbu	r2,-4(fp)
 401d920:	10003426 	beq	r2,zero,401d9f4 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 401d924:	00001706 	br	401d984 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 401d928:	e0bffb17 	ldw	r2,-20(fp)
 401d92c:	108002a8 	cmpgeui	r2,r2,10
 401d930:	1000021e 	bne	r2,zero,401d93c <alt_avalon_i2c_master_rx+0x4c>
 401d934:	0109c404 	movi	r4,10000
 401d938:	401f5900 	call	401f590 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 401d93c:	00800044 	movi	r2,1
 401d940:	d8800015 	stw	r2,0(sp)
 401d944:	000f883a 	mov	r7,zero
 401d948:	e1bffe17 	ldw	r6,-8(fp)
 401d94c:	e17ffd17 	ldw	r5,-12(fp)
 401d950:	e13ffc17 	ldw	r4,-16(fp)
 401d954:	401e1d00 	call	401e1d0 <alt_avalon_i2c_master_receive_using_interrupts>
 401d958:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d95c:	e0bffa17 	ldw	r2,-24(fp)
 401d960:	10bffea0 	cmpeqi	r2,r2,-6
 401d964:	1000061e 	bne	r2,zero,401d980 <alt_avalon_i2c_master_rx+0x90>
 401d968:	e0bffa17 	ldw	r2,-24(fp)
 401d96c:	10bffee0 	cmpeqi	r2,r2,-5
 401d970:	1000031e 	bne	r2,zero,401d980 <alt_avalon_i2c_master_rx+0x90>
 401d974:	e0bffa17 	ldw	r2,-24(fp)
 401d978:	10bffe58 	cmpnei	r2,r2,-7
 401d97c:	1000221e 	bne	r2,zero,401da08 <alt_avalon_i2c_master_rx+0x118>
 401d980:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 401d984:	e0bffb17 	ldw	r2,-20(fp)
 401d988:	10ffffc4 	addi	r3,r2,-1
 401d98c:	e0fffb15 	stw	r3,-20(fp)
 401d990:	103fe51e 	bne	r2,zero,401d928 <__alt_mem_onchip_memory2_0+0xfc01c688>
 401d994:	00001f06 	br	401da14 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 401d998:	e0bffb17 	ldw	r2,-20(fp)
 401d99c:	108002a8 	cmpgeui	r2,r2,10
 401d9a0:	1000021e 	bne	r2,zero,401d9ac <alt_avalon_i2c_master_rx+0xbc>
 401d9a4:	0109c404 	movi	r4,10000
 401d9a8:	401f5900 	call	401f590 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 401d9ac:	00800044 	movi	r2,1
 401d9b0:	d8800015 	stw	r2,0(sp)
 401d9b4:	000f883a 	mov	r7,zero
 401d9b8:	e1bffe17 	ldw	r6,-8(fp)
 401d9bc:	e17ffd17 	ldw	r5,-12(fp)
 401d9c0:	e13ffc17 	ldw	r4,-16(fp)
 401d9c4:	401dfc00 	call	401dfc0 <alt_avalon_i2c_master_receive>
 401d9c8:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d9cc:	e0bffa17 	ldw	r2,-24(fp)
 401d9d0:	10bffea0 	cmpeqi	r2,r2,-6
 401d9d4:	1000061e 	bne	r2,zero,401d9f0 <alt_avalon_i2c_master_rx+0x100>
 401d9d8:	e0bffa17 	ldw	r2,-24(fp)
 401d9dc:	10bffee0 	cmpeqi	r2,r2,-5
 401d9e0:	1000031e 	bne	r2,zero,401d9f0 <alt_avalon_i2c_master_rx+0x100>
 401d9e4:	e0bffa17 	ldw	r2,-24(fp)
 401d9e8:	10bffe58 	cmpnei	r2,r2,-7
 401d9ec:	1000081e 	bne	r2,zero,401da10 <alt_avalon_i2c_master_rx+0x120>
 401d9f0:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 401d9f4:	e0bffb17 	ldw	r2,-20(fp)
 401d9f8:	10ffffc4 	addi	r3,r2,-1
 401d9fc:	e0fffb15 	stw	r3,-20(fp)
 401da00:	103fe51e 	bne	r2,zero,401d998 <__alt_mem_onchip_memory2_0+0xfc01c6f8>
 401da04:	00000306 	br	401da14 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 401da08:	0001883a 	nop
 401da0c:	00000106 	br	401da14 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 401da10:	0001883a 	nop
      }
    }
    
    return status;
 401da14:	e0bffa17 	ldw	r2,-24(fp)
}        
 401da18:	e037883a 	mov	sp,fp
 401da1c:	dfc00117 	ldw	ra,4(sp)
 401da20:	df000017 	ldw	fp,0(sp)
 401da24:	dec00204 	addi	sp,sp,8
 401da28:	f800283a 	ret

0401da2c <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 401da2c:	defff604 	addi	sp,sp,-40
 401da30:	dfc00915 	stw	ra,36(sp)
 401da34:	df000815 	stw	fp,32(sp)
 401da38:	df000804 	addi	fp,sp,32
 401da3c:	e13ffb15 	stw	r4,-20(fp)
 401da40:	e17ffc15 	stw	r5,-16(fp)
 401da44:	e1bffd15 	stw	r6,-12(fp)
 401da48:	e1fffe15 	stw	r7,-8(fp)
 401da4c:	e0800317 	ldw	r2,12(fp)
 401da50:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401da54:	0089c404 	movi	r2,10000
 401da58:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 401da5c:	e0bfff03 	ldbu	r2,-4(fp)
 401da60:	10005626 	beq	r2,zero,401dbbc <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 401da64:	00002806 	br	401db08 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 401da68:	e0bffa17 	ldw	r2,-24(fp)
 401da6c:	108002a8 	cmpgeui	r2,r2,10
 401da70:	1000021e 	bne	r2,zero,401da7c <alt_avalon_i2c_master_tx_rx+0x50>
 401da74:	0109c404 	movi	r4,10000
 401da78:	401f5900 	call	401f590 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 401da7c:	d8000015 	stw	zero,0(sp)
 401da80:	000f883a 	mov	r7,zero
 401da84:	e1bffd17 	ldw	r6,-12(fp)
 401da88:	e17ffc17 	ldw	r5,-16(fp)
 401da8c:	e13ffb17 	ldw	r4,-20(fp)
 401da90:	401ddb40 	call	401ddb4 <alt_avalon_i2c_master_transmit_using_interrupts>
 401da94:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401da98:	e0bff917 	ldw	r2,-28(fp)
 401da9c:	10bffea0 	cmpeqi	r2,r2,-6
 401daa0:	1000191e 	bne	r2,zero,401db08 <alt_avalon_i2c_master_tx_rx+0xdc>
 401daa4:	e0bff917 	ldw	r2,-28(fp)
 401daa8:	10bffee0 	cmpeqi	r2,r2,-5
 401daac:	1000161e 	bne	r2,zero,401db08 <alt_avalon_i2c_master_tx_rx+0xdc>
 401dab0:	e0bff917 	ldw	r2,-28(fp)
 401dab4:	10bffe58 	cmpnei	r2,r2,-7
 401dab8:	1000011e 	bne	r2,zero,401dac0 <alt_avalon_i2c_master_tx_rx+0x94>
 401dabc:	00001206 	br	401db08 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 401dac0:	00800044 	movi	r2,1
 401dac4:	d8800015 	stw	r2,0(sp)
 401dac8:	01c00044 	movi	r7,1
 401dacc:	e1800217 	ldw	r6,8(fp)
 401dad0:	e17ffe17 	ldw	r5,-8(fp)
 401dad4:	e13ffb17 	ldw	r4,-20(fp)
 401dad8:	401e1d00 	call	401e1d0 <alt_avalon_i2c_master_receive_using_interrupts>
 401dadc:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401dae0:	e0bff917 	ldw	r2,-28(fp)
 401dae4:	10bffea0 	cmpeqi	r2,r2,-6
 401dae8:	1000061e 	bne	r2,zero,401db04 <alt_avalon_i2c_master_tx_rx+0xd8>
 401daec:	e0bff917 	ldw	r2,-28(fp)
 401daf0:	10bffee0 	cmpeqi	r2,r2,-5
 401daf4:	1000031e 	bne	r2,zero,401db04 <alt_avalon_i2c_master_tx_rx+0xd8>
 401daf8:	e0bff917 	ldw	r2,-28(fp)
 401dafc:	10bffe58 	cmpnei	r2,r2,-7
 401db00:	1000331e 	bne	r2,zero,401dbd0 <alt_avalon_i2c_master_tx_rx+0x1a4>
 401db04:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 401db08:	e0bffa17 	ldw	r2,-24(fp)
 401db0c:	10ffffc4 	addi	r3,r2,-1
 401db10:	e0fffa15 	stw	r3,-24(fp)
 401db14:	103fd41e 	bne	r2,zero,401da68 <__alt_mem_onchip_memory2_0+0xfc01c7c8>
 401db18:	00003006 	br	401dbdc <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 401db1c:	e0bffa17 	ldw	r2,-24(fp)
 401db20:	108002a8 	cmpgeui	r2,r2,10
 401db24:	1000021e 	bne	r2,zero,401db30 <alt_avalon_i2c_master_tx_rx+0x104>
 401db28:	0109c404 	movi	r4,10000
 401db2c:	401f5900 	call	401f590 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 401db30:	d8000015 	stw	zero,0(sp)
 401db34:	000f883a 	mov	r7,zero
 401db38:	e1bffd17 	ldw	r6,-12(fp)
 401db3c:	e17ffc17 	ldw	r5,-16(fp)
 401db40:	e13ffb17 	ldw	r4,-20(fp)
 401db44:	401dbf40 	call	401dbf4 <alt_avalon_i2c_master_transmit>
 401db48:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401db4c:	e0bff917 	ldw	r2,-28(fp)
 401db50:	10bffea0 	cmpeqi	r2,r2,-6
 401db54:	1000191e 	bne	r2,zero,401dbbc <alt_avalon_i2c_master_tx_rx+0x190>
 401db58:	e0bff917 	ldw	r2,-28(fp)
 401db5c:	10bffee0 	cmpeqi	r2,r2,-5
 401db60:	1000161e 	bne	r2,zero,401dbbc <alt_avalon_i2c_master_tx_rx+0x190>
 401db64:	e0bff917 	ldw	r2,-28(fp)
 401db68:	10bffe58 	cmpnei	r2,r2,-7
 401db6c:	1000011e 	bne	r2,zero,401db74 <alt_avalon_i2c_master_tx_rx+0x148>
 401db70:	00001206 	br	401dbbc <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 401db74:	00800044 	movi	r2,1
 401db78:	d8800015 	stw	r2,0(sp)
 401db7c:	01c00044 	movi	r7,1
 401db80:	e1800217 	ldw	r6,8(fp)
 401db84:	e17ffe17 	ldw	r5,-8(fp)
 401db88:	e13ffb17 	ldw	r4,-20(fp)
 401db8c:	401dfc00 	call	401dfc0 <alt_avalon_i2c_master_receive>
 401db90:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401db94:	e0bff917 	ldw	r2,-28(fp)
 401db98:	10bffea0 	cmpeqi	r2,r2,-6
 401db9c:	1000061e 	bne	r2,zero,401dbb8 <alt_avalon_i2c_master_tx_rx+0x18c>
 401dba0:	e0bff917 	ldw	r2,-28(fp)
 401dba4:	10bffee0 	cmpeqi	r2,r2,-5
 401dba8:	1000031e 	bne	r2,zero,401dbb8 <alt_avalon_i2c_master_tx_rx+0x18c>
 401dbac:	e0bff917 	ldw	r2,-28(fp)
 401dbb0:	10bffe58 	cmpnei	r2,r2,-7
 401dbb4:	1000081e 	bne	r2,zero,401dbd8 <alt_avalon_i2c_master_tx_rx+0x1ac>
 401dbb8:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 401dbbc:	e0bffa17 	ldw	r2,-24(fp)
 401dbc0:	10ffffc4 	addi	r3,r2,-1
 401dbc4:	e0fffa15 	stw	r3,-24(fp)
 401dbc8:	103fd41e 	bne	r2,zero,401db1c <__alt_mem_onchip_memory2_0+0xfc01c87c>
 401dbcc:	00000306 	br	401dbdc <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 401dbd0:	0001883a 	nop
 401dbd4:	00000106 	br	401dbdc <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 401dbd8:	0001883a 	nop
      }
    }
    
    return status;
 401dbdc:	e0bff917 	ldw	r2,-28(fp)
}                                       
 401dbe0:	e037883a 	mov	sp,fp
 401dbe4:	dfc00117 	ldw	ra,4(sp)
 401dbe8:	df000017 	ldw	fp,0(sp)
 401dbec:	dec00204 	addi	sp,sp,8
 401dbf0:	f800283a 	ret

0401dbf4 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 401dbf4:	defff704 	addi	sp,sp,-36
 401dbf8:	dfc00815 	stw	ra,32(sp)
 401dbfc:	df000715 	stw	fp,28(sp)
 401dc00:	df000704 	addi	fp,sp,28
 401dc04:	e13ffb15 	stw	r4,-20(fp)
 401dc08:	e17ffc15 	stw	r5,-16(fp)
 401dc0c:	e1bffd15 	stw	r6,-12(fp)
 401dc10:	3807883a 	mov	r3,r7
 401dc14:	e0800217 	ldw	r2,8(fp)
 401dc18:	e0fffe05 	stb	r3,-8(fp)
 401dc1c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401dc20:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 401dc24:	0149c404 	movi	r5,10000
 401dc28:	e13ffd17 	ldw	r4,-12(fp)
 401dc2c:	400dae00 	call	400dae0 <__mulsi3>
 401dc30:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 401dc34:	e0bffd17 	ldw	r2,-12(fp)
 401dc38:	1000021e 	bne	r2,zero,401dc44 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401dc3c:	0005883a 	mov	r2,zero
 401dc40:	00005706 	br	401dda0 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401dc44:	e0bffe03 	ldbu	r2,-8(fp)
 401dc48:	10000a1e 	bne	r2,zero,401dc74 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401dc4c:	e13ffb17 	ldw	r4,-20(fp)
 401dc50:	401ce700 	call	401ce70 <alt_avalon_i2c_enable>
 401dc54:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401dc58:	e0bffa17 	ldw	r2,-24(fp)
 401dc5c:	10000226 	beq	r2,zero,401dc68 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 401dc60:	e0bffa17 	ldw	r2,-24(fp)
 401dc64:	00004e06 	br	401dda0 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401dc68:	01400704 	movi	r5,28
 401dc6c:	e13ffb17 	ldw	r4,-20(fp)
 401dc70:	401e45c0 	call	401e45c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 401dc74:	e0bffe03 	ldbu	r2,-8(fp)
 401dc78:	100d883a 	mov	r6,r2
 401dc7c:	000b883a 	mov	r5,zero
 401dc80:	e13ffb17 	ldw	r4,-20(fp)
 401dc84:	401d4d80 	call	401d4d8 <alt_avalon_i2c_send_address>
 401dc88:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 401dc8c:	e0bffa17 	ldw	r2,-24(fp)
 401dc90:	1000271e 	bne	r2,zero,401dd30 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401dc94:	00000f06 	br	401dcd4 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401dc98:	e0bffc17 	ldw	r2,-16(fp)
 401dc9c:	10800003 	ldbu	r2,0(r2)
 401dca0:	10803fcc 	andi	r2,r2,255
 401dca4:	000f883a 	mov	r7,zero
 401dca8:	000d883a 	mov	r6,zero
 401dcac:	100b883a 	mov	r5,r2
 401dcb0:	e13ffb17 	ldw	r4,-20(fp)
 401dcb4:	401d3f40 	call	401d3f4 <alt_avalon_i2c_cmd_write>
 401dcb8:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 401dcbc:	e0bffc17 	ldw	r2,-16(fp)
 401dcc0:	10800044 	addi	r2,r2,1
 401dcc4:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401dcc8:	e0bffd17 	ldw	r2,-12(fp)
 401dccc:	10bfffc4 	addi	r2,r2,-1
 401dcd0:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401dcd4:	e0bffd17 	ldw	r2,-12(fp)
 401dcd8:	108000b0 	cmpltui	r2,r2,2
 401dcdc:	1000021e 	bne	r2,zero,401dce8 <alt_avalon_i2c_master_transmit+0xf4>
 401dce0:	e0bffa17 	ldw	r2,-24(fp)
 401dce4:	103fec26 	beq	r2,zero,401dc98 <__alt_mem_onchip_memory2_0+0xfc01c9f8>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401dce8:	e0bffa17 	ldw	r2,-24(fp)
 401dcec:	1000101e 	bne	r2,zero,401dd30 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401dcf0:	e0bffc17 	ldw	r2,-16(fp)
 401dcf4:	10800003 	ldbu	r2,0(r2)
 401dcf8:	10803fcc 	andi	r2,r2,255
 401dcfc:	e0ffff03 	ldbu	r3,-4(fp)
 401dd00:	180f883a 	mov	r7,r3
 401dd04:	000d883a 	mov	r6,zero
 401dd08:	100b883a 	mov	r5,r2
 401dd0c:	e13ffb17 	ldw	r4,-20(fp)
 401dd10:	401d3f40 	call	401d3f4 <alt_avalon_i2c_cmd_write>
 401dd14:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 401dd18:	e0bffc17 	ldw	r2,-16(fp)
 401dd1c:	10800044 	addi	r2,r2,1
 401dd20:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401dd24:	e0bffd17 	ldw	r2,-12(fp)
 401dd28:	10bfffc4 	addi	r2,r2,-1
 401dd2c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 401dd30:	e0bfff03 	ldbu	r2,-4(fp)
 401dd34:	1000101e 	bne	r2,zero,401dd78 <alt_avalon_i2c_master_transmit+0x184>
 401dd38:	e0bffa17 	ldw	r2,-24(fp)
 401dd3c:	10001726 	beq	r2,zero,401dd9c <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401dd40:	00000d06 	br	401dd78 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401dd44:	e0bff917 	ldw	r2,-28(fp)
 401dd48:	108002a8 	cmpgeui	r2,r2,10
 401dd4c:	1000021e 	bne	r2,zero,401dd58 <alt_avalon_i2c_master_transmit+0x164>
 401dd50:	0109c404 	movi	r4,10000
 401dd54:	401f5900 	call	401f590 <alt_busy_sleep>
            if (--timeout == 0)
 401dd58:	e0bff917 	ldw	r2,-28(fp)
 401dd5c:	10bfffc4 	addi	r2,r2,-1
 401dd60:	e0bff915 	stw	r2,-28(fp)
 401dd64:	e0bff917 	ldw	r2,-28(fp)
 401dd68:	1000031e 	bne	r2,zero,401dd78 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401dd6c:	00bfff84 	movi	r2,-2
 401dd70:	e0bffa15 	stw	r2,-24(fp)
               break;
 401dd74:	00000306 	br	401dd84 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401dd78:	e13ffb17 	ldw	r4,-20(fp)
 401dd7c:	401d2600 	call	401d260 <alt_avalon_i2c_is_busy>
 401dd80:	103ff01e 	bne	r2,zero,401dd44 <__alt_mem_onchip_memory2_0+0xfc01caa4>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 401dd84:	e0bffa04 	addi	r2,fp,-24
 401dd88:	100b883a 	mov	r5,r2
 401dd8c:	e13ffb17 	ldw	r4,-20(fp)
 401dd90:	401d6340 	call	401d634 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401dd94:	e13ffb17 	ldw	r4,-20(fp)
 401dd98:	401cf080 	call	401cf08 <alt_avalon_i2c_disable>
    }


    return status;
 401dd9c:	e0bffa17 	ldw	r2,-24(fp)
}
 401dda0:	e037883a 	mov	sp,fp
 401dda4:	dfc00117 	ldw	ra,4(sp)
 401dda8:	df000017 	ldw	fp,0(sp)
 401ddac:	dec00204 	addi	sp,sp,8
 401ddb0:	f800283a 	ret

0401ddb4 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 401ddb4:	defff604 	addi	sp,sp,-40
 401ddb8:	dfc00915 	stw	ra,36(sp)
 401ddbc:	df000815 	stw	fp,32(sp)
 401ddc0:	df000804 	addi	fp,sp,32
 401ddc4:	e13ffb15 	stw	r4,-20(fp)
 401ddc8:	e17ffc15 	stw	r5,-16(fp)
 401ddcc:	e1bffd15 	stw	r6,-12(fp)
 401ddd0:	3807883a 	mov	r3,r7
 401ddd4:	e0800217 	ldw	r2,8(fp)
 401ddd8:	e0fffe05 	stb	r3,-8(fp)
 401dddc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401dde0:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 401dde4:	0149c404 	movi	r5,10000
 401dde8:	e13ffd17 	ldw	r4,-12(fp)
 401ddec:	400dae00 	call	400dae0 <__mulsi3>
 401ddf0:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 401ddf4:	e0bffb17 	ldw	r2,-20(fp)
 401ddf8:	10800717 	ldw	r2,28(r2)
 401ddfc:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 401de00:	e0bffd17 	ldw	r2,-12(fp)
 401de04:	1000021e 	bne	r2,zero,401de10 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401de08:	0005883a 	mov	r2,zero
 401de0c:	00006706 	br	401dfac <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 401de10:	e0bffb17 	ldw	r2,-20(fp)
 401de14:	10c00617 	ldw	r3,24(r2)
 401de18:	008100b4 	movhi	r2,1026
 401de1c:	10b2bd04 	addi	r2,r2,-13580
 401de20:	18800226 	beq	r3,r2,401de2c <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 401de24:	00bfff44 	movi	r2,-3
 401de28:	00006006 	br	401dfac <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401de2c:	e0bffe03 	ldbu	r2,-8(fp)
 401de30:	10000a1e 	bne	r2,zero,401de5c <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401de34:	e13ffb17 	ldw	r4,-20(fp)
 401de38:	401ce700 	call	401ce70 <alt_avalon_i2c_enable>
 401de3c:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401de40:	e0bff817 	ldw	r2,-32(fp)
 401de44:	10000226 	beq	r2,zero,401de50 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 401de48:	e0bff817 	ldw	r2,-32(fp)
 401de4c:	00005706 	br	401dfac <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401de50:	01400704 	movi	r5,28
 401de54:	e13ffb17 	ldw	r4,-20(fp)
 401de58:	401e45c0 	call	401e45c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 401de5c:	e0bffe03 	ldbu	r2,-8(fp)
 401de60:	100d883a 	mov	r6,r2
 401de64:	000b883a 	mov	r5,zero
 401de68:	e13ffb17 	ldw	r4,-20(fp)
 401de6c:	401d4d80 	call	401d4d8 <alt_avalon_i2c_send_address>
 401de70:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 401de74:	e0bff817 	ldw	r2,-32(fp)
 401de78:	1000271e 	bne	r2,zero,401df18 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401de7c:	00000f06 	br	401debc <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401de80:	e0bffc17 	ldw	r2,-16(fp)
 401de84:	10800003 	ldbu	r2,0(r2)
 401de88:	10803fcc 	andi	r2,r2,255
 401de8c:	000f883a 	mov	r7,zero
 401de90:	000d883a 	mov	r6,zero
 401de94:	100b883a 	mov	r5,r2
 401de98:	e13ffb17 	ldw	r4,-20(fp)
 401de9c:	401d3f40 	call	401d3f4 <alt_avalon_i2c_cmd_write>
 401dea0:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 401dea4:	e0bffc17 	ldw	r2,-16(fp)
 401dea8:	10800044 	addi	r2,r2,1
 401deac:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401deb0:	e0bffd17 	ldw	r2,-12(fp)
 401deb4:	10bfffc4 	addi	r2,r2,-1
 401deb8:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401debc:	e0bffd17 	ldw	r2,-12(fp)
 401dec0:	108000b0 	cmpltui	r2,r2,2
 401dec4:	1000021e 	bne	r2,zero,401ded0 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 401dec8:	e0bff817 	ldw	r2,-32(fp)
 401decc:	103fec26 	beq	r2,zero,401de80 <__alt_mem_onchip_memory2_0+0xfc01cbe0>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401ded0:	e0bff817 	ldw	r2,-32(fp)
 401ded4:	1000101e 	bne	r2,zero,401df18 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401ded8:	e0bffc17 	ldw	r2,-16(fp)
 401dedc:	10800003 	ldbu	r2,0(r2)
 401dee0:	10803fcc 	andi	r2,r2,255
 401dee4:	e0ffff03 	ldbu	r3,-4(fp)
 401dee8:	180f883a 	mov	r7,r3
 401deec:	000d883a 	mov	r6,zero
 401def0:	100b883a 	mov	r5,r2
 401def4:	e13ffb17 	ldw	r4,-20(fp)
 401def8:	401d3f40 	call	401d3f4 <alt_avalon_i2c_cmd_write>
 401defc:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 401df00:	e0bffc17 	ldw	r2,-16(fp)
 401df04:	10800044 	addi	r2,r2,1
 401df08:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401df0c:	e0bffd17 	ldw	r2,-12(fp)
 401df10:	10bfffc4 	addi	r2,r2,-1
 401df14:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 401df18:	e0bff817 	ldw	r2,-32(fp)
 401df1c:	10001426 	beq	r2,zero,401df70 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401df20:	00000d06 	br	401df58 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 401df24:	e0bff917 	ldw	r2,-28(fp)
 401df28:	108002a8 	cmpgeui	r2,r2,10
 401df2c:	1000021e 	bne	r2,zero,401df38 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 401df30:	0109c404 	movi	r4,10000
 401df34:	401f5900 	call	401f590 <alt_busy_sleep>
            if (--timeout == 0)
 401df38:	e0bff917 	ldw	r2,-28(fp)
 401df3c:	10bfffc4 	addi	r2,r2,-1
 401df40:	e0bff915 	stw	r2,-28(fp)
 401df44:	e0bff917 	ldw	r2,-28(fp)
 401df48:	1000031e 	bne	r2,zero,401df58 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401df4c:	00bfff84 	movi	r2,-2
 401df50:	e0bff815 	stw	r2,-32(fp)
               break;
 401df54:	00000306 	br	401df64 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401df58:	e13ffb17 	ldw	r4,-20(fp)
 401df5c:	401d2600 	call	401d260 <alt_avalon_i2c_is_busy>
 401df60:	103ff01e 	bne	r2,zero,401df24 <__alt_mem_onchip_memory2_0+0xfc01cc84>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401df64:	e13ffb17 	ldw	r4,-20(fp)
 401df68:	401cf080 	call	401cf08 <alt_avalon_i2c_disable>
 401df6c:	00000e06 	br	401dfa8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 401df70:	e0bfff03 	ldbu	r2,-4(fp)
 401df74:	10000c26 	beq	r2,zero,401dfa8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401df78:	01400704 	movi	r5,28
 401df7c:	e13ffb17 	ldw	r4,-20(fp)
 401df80:	401e45c0 	call	401e45c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 401df84:	000b883a 	mov	r5,zero
 401df88:	e13ffb17 	ldw	r4,-20(fp)
 401df8c:	401e6a40 	call	401e6a4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 401df90:	e0bffa17 	ldw	r2,-24(fp)
 401df94:	00c00044 	movi	r3,1
 401df98:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 401df9c:	01400044 	movi	r5,1
 401dfa0:	e13ffb17 	ldw	r4,-20(fp)
 401dfa4:	401e5000 	call	401e500 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 401dfa8:	e0bff817 	ldw	r2,-32(fp)
}
 401dfac:	e037883a 	mov	sp,fp
 401dfb0:	dfc00117 	ldw	ra,4(sp)
 401dfb4:	df000017 	ldw	fp,0(sp)
 401dfb8:	dec00204 	addi	sp,sp,8
 401dfbc:	f800283a 	ret

0401dfc0 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 401dfc0:	defff404 	addi	sp,sp,-48
 401dfc4:	dfc00b15 	stw	ra,44(sp)
 401dfc8:	df000a15 	stw	fp,40(sp)
 401dfcc:	df000a04 	addi	fp,sp,40
 401dfd0:	e13ffb15 	stw	r4,-20(fp)
 401dfd4:	e17ffc15 	stw	r5,-16(fp)
 401dfd8:	e1bffd15 	stw	r6,-12(fp)
 401dfdc:	3807883a 	mov	r3,r7
 401dfe0:	e0800217 	ldw	r2,8(fp)
 401dfe4:	e0fffe05 	stb	r3,-8(fp)
 401dfe8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401dfec:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 401dff0:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 401dff4:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 401dff8:	e0bffd17 	ldw	r2,-12(fp)
 401dffc:	1000021e 	bne	r2,zero,401e008 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401e000:	0005883a 	mov	r2,zero
 401e004:	00006d06 	br	401e1bc <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401e008:	e0bffe03 	ldbu	r2,-8(fp)
 401e00c:	10000a1e 	bne	r2,zero,401e038 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401e010:	e13ffb17 	ldw	r4,-20(fp)
 401e014:	401ce700 	call	401ce70 <alt_avalon_i2c_enable>
 401e018:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401e01c:	e0bff917 	ldw	r2,-28(fp)
 401e020:	10000226 	beq	r2,zero,401e02c <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 401e024:	e0bff917 	ldw	r2,-28(fp)
 401e028:	00006406 	br	401e1bc <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401e02c:	01400704 	movi	r5,28
 401e030:	e13ffb17 	ldw	r4,-20(fp)
 401e034:	401e45c0 	call	401e45c <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 401e038:	e0bffe03 	ldbu	r2,-8(fp)
 401e03c:	100d883a 	mov	r6,r2
 401e040:	01400044 	movi	r5,1
 401e044:	e13ffb17 	ldw	r4,-20(fp)
 401e048:	401d4d80 	call	401d4d8 <alt_avalon_i2c_send_address>
 401e04c:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 401e050:	e0bff917 	ldw	r2,-28(fp)
 401e054:	1000341e 	bne	r2,zero,401e128 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401e058:	00001906 	br	401e0c0 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401e05c:	000f883a 	mov	r7,zero
 401e060:	000d883a 	mov	r6,zero
 401e064:	000b883a 	mov	r5,zero
 401e068:	e13ffb17 	ldw	r4,-20(fp)
 401e06c:	401d3f40 	call	401d3f4 <alt_avalon_i2c_cmd_write>
 401e070:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 401e074:	e0bff817 	ldw	r2,-32(fp)
 401e078:	10800044 	addi	r2,r2,1
 401e07c:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 401e080:	e0bff917 	ldw	r2,-28(fp)
 401e084:	10000e1e 	bne	r2,zero,401e0c0 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 401e088:	e0bffa04 	addi	r2,fp,-24
 401e08c:	100f883a 	mov	r7,r2
 401e090:	000d883a 	mov	r6,zero
 401e094:	e17ffc17 	ldw	r5,-16(fp)
 401e098:	e13ffb17 	ldw	r4,-20(fp)
 401e09c:	401d2a40 	call	401d2a4 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 401e0a0:	e0bffa17 	ldw	r2,-24(fp)
 401e0a4:	e0fffc17 	ldw	r3,-16(fp)
 401e0a8:	1885883a 	add	r2,r3,r2
 401e0ac:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 401e0b0:	e0bffa17 	ldw	r2,-24(fp)
 401e0b4:	e0fff717 	ldw	r3,-36(fp)
 401e0b8:	1885883a 	add	r2,r3,r2
 401e0bc:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401e0c0:	e0bffd17 	ldw	r2,-12(fp)
 401e0c4:	10bfffc4 	addi	r2,r2,-1
 401e0c8:	e0fff817 	ldw	r3,-32(fp)
 401e0cc:	1880022e 	bgeu	r3,r2,401e0d8 <alt_avalon_i2c_master_receive+0x118>
 401e0d0:	e0bff917 	ldw	r2,-28(fp)
 401e0d4:	103fe126 	beq	r2,zero,401e05c <__alt_mem_onchip_memory2_0+0xfc01cdbc>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401e0d8:	e0bff917 	ldw	r2,-28(fp)
 401e0dc:	1000121e 	bne	r2,zero,401e128 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401e0e0:	e0bfff03 	ldbu	r2,-4(fp)
 401e0e4:	100f883a 	mov	r7,r2
 401e0e8:	000d883a 	mov	r6,zero
 401e0ec:	000b883a 	mov	r5,zero
 401e0f0:	e13ffb17 	ldw	r4,-20(fp)
 401e0f4:	401d3f40 	call	401d3f4 <alt_avalon_i2c_cmd_write>
 401e0f8:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 401e0fc:	00000a06 	br	401e128 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 401e100:	e17ffc17 	ldw	r5,-16(fp)
 401e104:	e13ffb17 	ldw	r4,-20(fp)
 401e108:	401d34c0 	call	401d34c <alt_avalon_i2c_rx_read>
 401e10c:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 401e110:	e0bffc17 	ldw	r2,-16(fp)
 401e114:	10800044 	addi	r2,r2,1
 401e118:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 401e11c:	e0bff717 	ldw	r2,-36(fp)
 401e120:	10800044 	addi	r2,r2,1
 401e124:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 401e128:	e0fff717 	ldw	r3,-36(fp)
 401e12c:	e0bffd17 	ldw	r2,-12(fp)
 401e130:	1880022e 	bgeu	r3,r2,401e13c <alt_avalon_i2c_master_receive+0x17c>
 401e134:	e0bff917 	ldw	r2,-28(fp)
 401e138:	103ff126 	beq	r2,zero,401e100 <__alt_mem_onchip_memory2_0+0xfc01ce60>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 401e13c:	e0bfff03 	ldbu	r2,-4(fp)
 401e140:	1000021e 	bne	r2,zero,401e14c <alt_avalon_i2c_master_receive+0x18c>
 401e144:	e0bff917 	ldw	r2,-28(fp)
 401e148:	10001b26 	beq	r2,zero,401e1b8 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 401e14c:	0149c404 	movi	r5,10000
 401e150:	e13ffd17 	ldw	r4,-12(fp)
 401e154:	400dae00 	call	400dae0 <__mulsi3>
 401e158:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401e15c:	00000d06 	br	401e194 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401e160:	e0bff617 	ldw	r2,-40(fp)
 401e164:	108002a8 	cmpgeui	r2,r2,10
 401e168:	1000021e 	bne	r2,zero,401e174 <alt_avalon_i2c_master_receive+0x1b4>
 401e16c:	0109c404 	movi	r4,10000
 401e170:	401f5900 	call	401f590 <alt_busy_sleep>
            if (--timeout == 0)
 401e174:	e0bff617 	ldw	r2,-40(fp)
 401e178:	10bfffc4 	addi	r2,r2,-1
 401e17c:	e0bff615 	stw	r2,-40(fp)
 401e180:	e0bff617 	ldw	r2,-40(fp)
 401e184:	1000031e 	bne	r2,zero,401e194 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401e188:	00bfff84 	movi	r2,-2
 401e18c:	e0bff915 	stw	r2,-28(fp)
               break;
 401e190:	00000306 	br	401e1a0 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401e194:	e13ffb17 	ldw	r4,-20(fp)
 401e198:	401d2600 	call	401d260 <alt_avalon_i2c_is_busy>
 401e19c:	103ff01e 	bne	r2,zero,401e160 <__alt_mem_onchip_memory2_0+0xfc01cec0>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 401e1a0:	e0bff904 	addi	r2,fp,-28
 401e1a4:	100b883a 	mov	r5,r2
 401e1a8:	e13ffb17 	ldw	r4,-20(fp)
 401e1ac:	401d6340 	call	401d634 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401e1b0:	e13ffb17 	ldw	r4,-20(fp)
 401e1b4:	401cf080 	call	401cf08 <alt_avalon_i2c_disable>
    }

    return status;
 401e1b8:	e0bff917 	ldw	r2,-28(fp)
}
 401e1bc:	e037883a 	mov	sp,fp
 401e1c0:	dfc00117 	ldw	ra,4(sp)
 401e1c4:	df000017 	ldw	fp,0(sp)
 401e1c8:	dec00204 	addi	sp,sp,8
 401e1cc:	f800283a 	ret

0401e1d0 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 401e1d0:	defff504 	addi	sp,sp,-44
 401e1d4:	dfc00a15 	stw	ra,40(sp)
 401e1d8:	df000915 	stw	fp,36(sp)
 401e1dc:	df000904 	addi	fp,sp,36
 401e1e0:	e13ffb15 	stw	r4,-20(fp)
 401e1e4:	e17ffc15 	stw	r5,-16(fp)
 401e1e8:	e1bffd15 	stw	r6,-12(fp)
 401e1ec:	3807883a 	mov	r3,r7
 401e1f0:	e0800217 	ldw	r2,8(fp)
 401e1f4:	e0fffe05 	stb	r3,-8(fp)
 401e1f8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401e1fc:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 401e200:	e0bffb17 	ldw	r2,-20(fp)
 401e204:	10800717 	ldw	r2,28(r2)
 401e208:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 401e20c:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 401e210:	e0bffd17 	ldw	r2,-12(fp)
 401e214:	1000021e 	bne	r2,zero,401e220 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401e218:	0005883a 	mov	r2,zero
 401e21c:	00006306 	br	401e3ac <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 401e220:	e0bffb17 	ldw	r2,-20(fp)
 401e224:	10c00617 	ldw	r3,24(r2)
 401e228:	008100b4 	movhi	r2,1026
 401e22c:	10b2bd04 	addi	r2,r2,-13580
 401e230:	18800226 	beq	r3,r2,401e23c <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 401e234:	00bfff44 	movi	r2,-3
 401e238:	00005c06 	br	401e3ac <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401e23c:	e0bffe03 	ldbu	r2,-8(fp)
 401e240:	10000a1e 	bne	r2,zero,401e26c <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401e244:	e13ffb17 	ldw	r4,-20(fp)
 401e248:	401ce700 	call	401ce70 <alt_avalon_i2c_enable>
 401e24c:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401e250:	e0bff717 	ldw	r2,-36(fp)
 401e254:	10000226 	beq	r2,zero,401e260 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 401e258:	e0bff717 	ldw	r2,-36(fp)
 401e25c:	00005306 	br	401e3ac <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401e260:	01400704 	movi	r5,28
 401e264:	e13ffb17 	ldw	r4,-20(fp)
 401e268:	401e45c0 	call	401e45c <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 401e26c:	e0bffe03 	ldbu	r2,-8(fp)
 401e270:	100d883a 	mov	r6,r2
 401e274:	01400044 	movi	r5,1
 401e278:	e13ffb17 	ldw	r4,-20(fp)
 401e27c:	401d4d80 	call	401d4d8 <alt_avalon_i2c_send_address>
 401e280:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 401e284:	e0bff717 	ldw	r2,-36(fp)
 401e288:	1000191e 	bne	r2,zero,401e2f0 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401e28c:	00000906 	br	401e2b4 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401e290:	000f883a 	mov	r7,zero
 401e294:	000d883a 	mov	r6,zero
 401e298:	000b883a 	mov	r5,zero
 401e29c:	e13ffb17 	ldw	r4,-20(fp)
 401e2a0:	401d3f40 	call	401d3f4 <alt_avalon_i2c_cmd_write>
 401e2a4:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 401e2a8:	e0bff917 	ldw	r2,-28(fp)
 401e2ac:	10800044 	addi	r2,r2,1
 401e2b0:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401e2b4:	e0bffd17 	ldw	r2,-12(fp)
 401e2b8:	10bfffc4 	addi	r2,r2,-1
 401e2bc:	e0fff917 	ldw	r3,-28(fp)
 401e2c0:	1880022e 	bgeu	r3,r2,401e2cc <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 401e2c4:	e0bff717 	ldw	r2,-36(fp)
 401e2c8:	103ff126 	beq	r2,zero,401e290 <__alt_mem_onchip_memory2_0+0xfc01cff0>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401e2cc:	e0bff717 	ldw	r2,-36(fp)
 401e2d0:	1000071e 	bne	r2,zero,401e2f0 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401e2d4:	e0bfff03 	ldbu	r2,-4(fp)
 401e2d8:	100f883a 	mov	r7,r2
 401e2dc:	000d883a 	mov	r6,zero
 401e2e0:	000b883a 	mov	r5,zero
 401e2e4:	e13ffb17 	ldw	r4,-20(fp)
 401e2e8:	401d3f40 	call	401d3f4 <alt_avalon_i2c_cmd_write>
 401e2ec:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 401e2f0:	e0bff717 	ldw	r2,-36(fp)
 401e2f4:	10001826 	beq	r2,zero,401e358 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 401e2f8:	0149c404 	movi	r5,10000
 401e2fc:	e13ffd17 	ldw	r4,-12(fp)
 401e300:	400dae00 	call	400dae0 <__mulsi3>
 401e304:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401e308:	00000d06 	br	401e340 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401e30c:	e0bff817 	ldw	r2,-32(fp)
 401e310:	108002a8 	cmpgeui	r2,r2,10
 401e314:	1000021e 	bne	r2,zero,401e320 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 401e318:	0109c404 	movi	r4,10000
 401e31c:	401f5900 	call	401f590 <alt_busy_sleep>
            if (--timeout == 0)
 401e320:	e0bff817 	ldw	r2,-32(fp)
 401e324:	10bfffc4 	addi	r2,r2,-1
 401e328:	e0bff815 	stw	r2,-32(fp)
 401e32c:	e0bff817 	ldw	r2,-32(fp)
 401e330:	1000031e 	bne	r2,zero,401e340 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401e334:	00bfff84 	movi	r2,-2
 401e338:	e0bff715 	stw	r2,-36(fp)
               break;
 401e33c:	00000306 	br	401e34c <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401e340:	e13ffb17 	ldw	r4,-20(fp)
 401e344:	401d2600 	call	401d260 <alt_avalon_i2c_is_busy>
 401e348:	103ff01e 	bne	r2,zero,401e30c <__alt_mem_onchip_memory2_0+0xfc01d06c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401e34c:	e13ffb17 	ldw	r4,-20(fp)
 401e350:	401cf080 	call	401cf08 <alt_avalon_i2c_disable>
 401e354:	00001406 	br	401e3a8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 401e358:	e0bfff03 	ldbu	r2,-4(fp)
 401e35c:	10001226 	beq	r2,zero,401e3a8 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401e360:	01400704 	movi	r5,28
 401e364:	e13ffb17 	ldw	r4,-20(fp)
 401e368:	401e45c0 	call	401e45c <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 401e36c:	000b883a 	mov	r5,zero
 401e370:	e13ffb17 	ldw	r4,-20(fp)
 401e374:	401e5f40 	call	401e5f4 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 401e378:	e0bffa17 	ldw	r2,-24(fp)
 401e37c:	00c00084 	movi	r3,2
 401e380:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 401e384:	e0bffa17 	ldw	r2,-24(fp)
 401e388:	e0fffc17 	ldw	r3,-16(fp)
 401e38c:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 401e390:	e0bffa17 	ldw	r2,-24(fp)
 401e394:	e0fffd17 	ldw	r3,-12(fp)
 401e398:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 401e39c:	01400084 	movi	r5,2
 401e3a0:	e13ffb17 	ldw	r4,-20(fp)
 401e3a4:	401e5000 	call	401e500 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 401e3a8:	e0bff717 	ldw	r2,-36(fp)
}
 401e3ac:	e037883a 	mov	sp,fp
 401e3b0:	dfc00117 	ldw	ra,4(sp)
 401e3b4:	df000017 	ldw	fp,0(sp)
 401e3b8:	dec00204 	addi	sp,sp,8
 401e3bc:	f800283a 	ret

0401e3c0 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 401e3c0:	defffd04 	addi	sp,sp,-12
 401e3c4:	df000215 	stw	fp,8(sp)
 401e3c8:	df000204 	addi	fp,sp,8
 401e3cc:	e13ffe15 	stw	r4,-8(fp)
 401e3d0:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 401e3d4:	e0bffe17 	ldw	r2,-8(fp)
 401e3d8:	10800317 	ldw	r2,12(r2)
 401e3dc:	10800404 	addi	r2,r2,16
 401e3e0:	10c00037 	ldwio	r3,0(r2)
 401e3e4:	e0bffe17 	ldw	r2,-8(fp)
 401e3e8:	10800317 	ldw	r2,12(r2)
 401e3ec:	10800304 	addi	r2,r2,12
 401e3f0:	10800037 	ldwio	r2,0(r2)
 401e3f4:	1884703a 	and	r2,r3,r2
 401e3f8:	1007883a 	mov	r3,r2
 401e3fc:	e0bfff17 	ldw	r2,-4(fp)
 401e400:	10c00015 	stw	r3,0(r2)
}
 401e404:	0001883a 	nop
 401e408:	e037883a 	mov	sp,fp
 401e40c:	df000017 	ldw	fp,0(sp)
 401e410:	dec00104 	addi	sp,sp,4
 401e414:	f800283a 	ret

0401e418 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 401e418:	defffd04 	addi	sp,sp,-12
 401e41c:	df000215 	stw	fp,8(sp)
 401e420:	df000204 	addi	fp,sp,8
 401e424:	e13ffe15 	stw	r4,-8(fp)
 401e428:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 401e42c:	e0bffe17 	ldw	r2,-8(fp)
 401e430:	10800317 	ldw	r2,12(r2)
 401e434:	10800404 	addi	r2,r2,16
 401e438:	10800037 	ldwio	r2,0(r2)
 401e43c:	1007883a 	mov	r3,r2
 401e440:	e0bfff17 	ldw	r2,-4(fp)
 401e444:	10c00015 	stw	r3,0(r2)
}
 401e448:	0001883a 	nop
 401e44c:	e037883a 	mov	sp,fp
 401e450:	df000017 	ldw	fp,0(sp)
 401e454:	dec00104 	addi	sp,sp,4
 401e458:	f800283a 	ret

0401e45c <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 401e45c:	defffd04 	addi	sp,sp,-12
 401e460:	df000215 	stw	fp,8(sp)
 401e464:	df000204 	addi	fp,sp,8
 401e468:	e13ffe15 	stw	r4,-8(fp)
 401e46c:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 401e470:	e0bffe17 	ldw	r2,-8(fp)
 401e474:	10800317 	ldw	r2,12(r2)
 401e478:	10800404 	addi	r2,r2,16
 401e47c:	e0ffff17 	ldw	r3,-4(fp)
 401e480:	10c00035 	stwio	r3,0(r2)
}
 401e484:	0001883a 	nop
 401e488:	e037883a 	mov	sp,fp
 401e48c:	df000017 	ldw	fp,0(sp)
 401e490:	dec00104 	addi	sp,sp,4
 401e494:	f800283a 	ret

0401e498 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 401e498:	defffb04 	addi	sp,sp,-20
 401e49c:	dfc00415 	stw	ra,16(sp)
 401e4a0:	df000315 	stw	fp,12(sp)
 401e4a4:	df000304 	addi	fp,sp,12
 401e4a8:	e13ffe15 	stw	r4,-8(fp)
 401e4ac:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 401e4b0:	e17ffd04 	addi	r5,fp,-12
 401e4b4:	e13ffe17 	ldw	r4,-8(fp)
 401e4b8:	401e5640 	call	401e564 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 401e4bc:	e0bfff17 	ldw	r2,-4(fp)
 401e4c0:	0086303a 	nor	r3,zero,r2
 401e4c4:	e0bffd17 	ldw	r2,-12(fp)
 401e4c8:	1884703a 	and	r2,r3,r2
 401e4cc:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 401e4d0:	e0bffe17 	ldw	r2,-8(fp)
 401e4d4:	10800317 	ldw	r2,12(r2)
 401e4d8:	10800304 	addi	r2,r2,12
 401e4dc:	e0fffd17 	ldw	r3,-12(fp)
 401e4e0:	18c007cc 	andi	r3,r3,31
 401e4e4:	10c00035 	stwio	r3,0(r2)
}
 401e4e8:	0001883a 	nop
 401e4ec:	e037883a 	mov	sp,fp
 401e4f0:	dfc00117 	ldw	ra,4(sp)
 401e4f4:	df000017 	ldw	fp,0(sp)
 401e4f8:	dec00204 	addi	sp,sp,8
 401e4fc:	f800283a 	ret

0401e500 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 401e500:	defffb04 	addi	sp,sp,-20
 401e504:	dfc00415 	stw	ra,16(sp)
 401e508:	df000315 	stw	fp,12(sp)
 401e50c:	df000304 	addi	fp,sp,12
 401e510:	e13ffe15 	stw	r4,-8(fp)
 401e514:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 401e518:	e17ffd04 	addi	r5,fp,-12
 401e51c:	e13ffe17 	ldw	r4,-8(fp)
 401e520:	401e5640 	call	401e564 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 401e524:	e0fffd17 	ldw	r3,-12(fp)
 401e528:	e0bfff17 	ldw	r2,-4(fp)
 401e52c:	1884b03a 	or	r2,r3,r2
 401e530:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 401e534:	e0bffe17 	ldw	r2,-8(fp)
 401e538:	10800317 	ldw	r2,12(r2)
 401e53c:	10800304 	addi	r2,r2,12
 401e540:	e0fffd17 	ldw	r3,-12(fp)
 401e544:	18c007cc 	andi	r3,r3,31
 401e548:	10c00035 	stwio	r3,0(r2)
}
 401e54c:	0001883a 	nop
 401e550:	e037883a 	mov	sp,fp
 401e554:	dfc00117 	ldw	ra,4(sp)
 401e558:	df000017 	ldw	fp,0(sp)
 401e55c:	dec00204 	addi	sp,sp,8
 401e560:	f800283a 	ret

0401e564 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 401e564:	defffd04 	addi	sp,sp,-12
 401e568:	df000215 	stw	fp,8(sp)
 401e56c:	df000204 	addi	fp,sp,8
 401e570:	e13ffe15 	stw	r4,-8(fp)
 401e574:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 401e578:	e0bffe17 	ldw	r2,-8(fp)
 401e57c:	10800317 	ldw	r2,12(r2)
 401e580:	10800304 	addi	r2,r2,12
 401e584:	10800037 	ldwio	r2,0(r2)
 401e588:	10c007cc 	andi	r3,r2,31
 401e58c:	e0bfff17 	ldw	r2,-4(fp)
 401e590:	10c00015 	stw	r3,0(r2)
}
 401e594:	0001883a 	nop
 401e598:	e037883a 	mov	sp,fp
 401e59c:	df000017 	ldw	fp,0(sp)
 401e5a0:	dec00104 	addi	sp,sp,4
 401e5a4:	f800283a 	ret

0401e5a8 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 401e5a8:	defffd04 	addi	sp,sp,-12
 401e5ac:	df000215 	stw	fp,8(sp)
 401e5b0:	df000204 	addi	fp,sp,8
 401e5b4:	e13ffe15 	stw	r4,-8(fp)
 401e5b8:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 401e5bc:	e0bffe17 	ldw	r2,-8(fp)
 401e5c0:	10800317 	ldw	r2,12(r2)
 401e5c4:	10800204 	addi	r2,r2,8
 401e5c8:	10800037 	ldwio	r2,0(r2)
 401e5cc:	10800c0c 	andi	r2,r2,48
 401e5d0:	1005d13a 	srai	r2,r2,4
 401e5d4:	1007883a 	mov	r3,r2
 401e5d8:	e0bfff17 	ldw	r2,-4(fp)
 401e5dc:	10c00015 	stw	r3,0(r2)
}
 401e5e0:	0001883a 	nop
 401e5e4:	e037883a 	mov	sp,fp
 401e5e8:	df000017 	ldw	fp,0(sp)
 401e5ec:	dec00104 	addi	sp,sp,4
 401e5f0:	f800283a 	ret

0401e5f4 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 401e5f4:	defffd04 	addi	sp,sp,-12
 401e5f8:	df000215 	stw	fp,8(sp)
 401e5fc:	df000204 	addi	fp,sp,8
 401e600:	e13ffe15 	stw	r4,-8(fp)
 401e604:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 401e608:	e0bffe17 	ldw	r2,-8(fp)
 401e60c:	10800317 	ldw	r2,12(r2)
 401e610:	10800204 	addi	r2,r2,8
 401e614:	e0fffe17 	ldw	r3,-8(fp)
 401e618:	18c00317 	ldw	r3,12(r3)
 401e61c:	18c00204 	addi	r3,r3,8
 401e620:	18c00037 	ldwio	r3,0(r3)
 401e624:	1809883a 	mov	r4,r3
 401e628:	00fff3c4 	movi	r3,-49
 401e62c:	20c8703a 	and	r4,r4,r3
 401e630:	e0ffff17 	ldw	r3,-4(fp)
 401e634:	1806913a 	slli	r3,r3,4
 401e638:	18c00c0c 	andi	r3,r3,48
 401e63c:	20c6b03a 	or	r3,r4,r3
 401e640:	10c00035 	stwio	r3,0(r2)
}
 401e644:	0001883a 	nop
 401e648:	e037883a 	mov	sp,fp
 401e64c:	df000017 	ldw	fp,0(sp)
 401e650:	dec00104 	addi	sp,sp,4
 401e654:	f800283a 	ret

0401e658 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 401e658:	defffd04 	addi	sp,sp,-12
 401e65c:	df000215 	stw	fp,8(sp)
 401e660:	df000204 	addi	fp,sp,8
 401e664:	e13ffe15 	stw	r4,-8(fp)
 401e668:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 401e66c:	e0bffe17 	ldw	r2,-8(fp)
 401e670:	10800317 	ldw	r2,12(r2)
 401e674:	10800204 	addi	r2,r2,8
 401e678:	10800037 	ldwio	r2,0(r2)
 401e67c:	1080030c 	andi	r2,r2,12
 401e680:	1005d0ba 	srai	r2,r2,2
 401e684:	1007883a 	mov	r3,r2
 401e688:	e0bfff17 	ldw	r2,-4(fp)
 401e68c:	10c00015 	stw	r3,0(r2)
}
 401e690:	0001883a 	nop
 401e694:	e037883a 	mov	sp,fp
 401e698:	df000017 	ldw	fp,0(sp)
 401e69c:	dec00104 	addi	sp,sp,4
 401e6a0:	f800283a 	ret

0401e6a4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 401e6a4:	defffd04 	addi	sp,sp,-12
 401e6a8:	df000215 	stw	fp,8(sp)
 401e6ac:	df000204 	addi	fp,sp,8
 401e6b0:	e13ffe15 	stw	r4,-8(fp)
 401e6b4:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 401e6b8:	e0bffe17 	ldw	r2,-8(fp)
 401e6bc:	10800317 	ldw	r2,12(r2)
 401e6c0:	10c00204 	addi	r3,r2,8
 401e6c4:	e0bffe17 	ldw	r2,-8(fp)
 401e6c8:	10800317 	ldw	r2,12(r2)
 401e6cc:	10800204 	addi	r2,r2,8
 401e6d0:	10800037 	ldwio	r2,0(r2)
 401e6d4:	1009883a 	mov	r4,r2
 401e6d8:	00bffcc4 	movi	r2,-13
 401e6dc:	2088703a 	and	r4,r4,r2
 401e6e0:	e0bfff17 	ldw	r2,-4(fp)
 401e6e4:	1085883a 	add	r2,r2,r2
 401e6e8:	1085883a 	add	r2,r2,r2
 401e6ec:	1080030c 	andi	r2,r2,12
 401e6f0:	2084b03a 	or	r2,r4,r2
 401e6f4:	18800035 	stwio	r2,0(r3)
}
 401e6f8:	0001883a 	nop
 401e6fc:	e037883a 	mov	sp,fp
 401e700:	df000017 	ldw	fp,0(sp)
 401e704:	dec00104 	addi	sp,sp,4
 401e708:	f800283a 	ret

0401e70c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 401e70c:	defffa04 	addi	sp,sp,-24
 401e710:	dfc00515 	stw	ra,20(sp)
 401e714:	df000415 	stw	fp,16(sp)
 401e718:	df000404 	addi	fp,sp,16
 401e71c:	e13ffd15 	stw	r4,-12(fp)
 401e720:	e17ffe15 	stw	r5,-8(fp)
 401e724:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401e728:	e0bffd17 	ldw	r2,-12(fp)
 401e72c:	10800017 	ldw	r2,0(r2)
 401e730:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 401e734:	e0bffc17 	ldw	r2,-16(fp)
 401e738:	10c00a04 	addi	r3,r2,40
 401e73c:	e0bffd17 	ldw	r2,-12(fp)
 401e740:	10800217 	ldw	r2,8(r2)
 401e744:	100f883a 	mov	r7,r2
 401e748:	e1bfff17 	ldw	r6,-4(fp)
 401e74c:	e17ffe17 	ldw	r5,-8(fp)
 401e750:	1809883a 	mov	r4,r3
 401e754:	401ed340 	call	401ed34 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 401e758:	e037883a 	mov	sp,fp
 401e75c:	dfc00117 	ldw	ra,4(sp)
 401e760:	df000017 	ldw	fp,0(sp)
 401e764:	dec00204 	addi	sp,sp,8
 401e768:	f800283a 	ret

0401e76c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 401e76c:	defffa04 	addi	sp,sp,-24
 401e770:	dfc00515 	stw	ra,20(sp)
 401e774:	df000415 	stw	fp,16(sp)
 401e778:	df000404 	addi	fp,sp,16
 401e77c:	e13ffd15 	stw	r4,-12(fp)
 401e780:	e17ffe15 	stw	r5,-8(fp)
 401e784:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401e788:	e0bffd17 	ldw	r2,-12(fp)
 401e78c:	10800017 	ldw	r2,0(r2)
 401e790:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 401e794:	e0bffc17 	ldw	r2,-16(fp)
 401e798:	10c00a04 	addi	r3,r2,40
 401e79c:	e0bffd17 	ldw	r2,-12(fp)
 401e7a0:	10800217 	ldw	r2,8(r2)
 401e7a4:	100f883a 	mov	r7,r2
 401e7a8:	e1bfff17 	ldw	r6,-4(fp)
 401e7ac:	e17ffe17 	ldw	r5,-8(fp)
 401e7b0:	1809883a 	mov	r4,r3
 401e7b4:	401ef500 	call	401ef50 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 401e7b8:	e037883a 	mov	sp,fp
 401e7bc:	dfc00117 	ldw	ra,4(sp)
 401e7c0:	df000017 	ldw	fp,0(sp)
 401e7c4:	dec00204 	addi	sp,sp,8
 401e7c8:	f800283a 	ret

0401e7cc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 401e7cc:	defffc04 	addi	sp,sp,-16
 401e7d0:	dfc00315 	stw	ra,12(sp)
 401e7d4:	df000215 	stw	fp,8(sp)
 401e7d8:	df000204 	addi	fp,sp,8
 401e7dc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401e7e0:	e0bfff17 	ldw	r2,-4(fp)
 401e7e4:	10800017 	ldw	r2,0(r2)
 401e7e8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 401e7ec:	e0bffe17 	ldw	r2,-8(fp)
 401e7f0:	10c00a04 	addi	r3,r2,40
 401e7f4:	e0bfff17 	ldw	r2,-4(fp)
 401e7f8:	10800217 	ldw	r2,8(r2)
 401e7fc:	100b883a 	mov	r5,r2
 401e800:	1809883a 	mov	r4,r3
 401e804:	401ebdc0 	call	401ebdc <altera_avalon_jtag_uart_close>
}
 401e808:	e037883a 	mov	sp,fp
 401e80c:	dfc00117 	ldw	ra,4(sp)
 401e810:	df000017 	ldw	fp,0(sp)
 401e814:	dec00204 	addi	sp,sp,8
 401e818:	f800283a 	ret

0401e81c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 401e81c:	defffa04 	addi	sp,sp,-24
 401e820:	dfc00515 	stw	ra,20(sp)
 401e824:	df000415 	stw	fp,16(sp)
 401e828:	df000404 	addi	fp,sp,16
 401e82c:	e13ffd15 	stw	r4,-12(fp)
 401e830:	e17ffe15 	stw	r5,-8(fp)
 401e834:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 401e838:	e0bffd17 	ldw	r2,-12(fp)
 401e83c:	10800017 	ldw	r2,0(r2)
 401e840:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 401e844:	e0bffc17 	ldw	r2,-16(fp)
 401e848:	10800a04 	addi	r2,r2,40
 401e84c:	e1bfff17 	ldw	r6,-4(fp)
 401e850:	e17ffe17 	ldw	r5,-8(fp)
 401e854:	1009883a 	mov	r4,r2
 401e858:	401ec440 	call	401ec44 <altera_avalon_jtag_uart_ioctl>
}
 401e85c:	e037883a 	mov	sp,fp
 401e860:	dfc00117 	ldw	ra,4(sp)
 401e864:	df000017 	ldw	fp,0(sp)
 401e868:	dec00204 	addi	sp,sp,8
 401e86c:	f800283a 	ret

0401e870 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 401e870:	defffa04 	addi	sp,sp,-24
 401e874:	dfc00515 	stw	ra,20(sp)
 401e878:	df000415 	stw	fp,16(sp)
 401e87c:	df000404 	addi	fp,sp,16
 401e880:	e13ffd15 	stw	r4,-12(fp)
 401e884:	e17ffe15 	stw	r5,-8(fp)
 401e888:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401e88c:	e0bffd17 	ldw	r2,-12(fp)
 401e890:	00c00044 	movi	r3,1
 401e894:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 401e898:	e0bffd17 	ldw	r2,-12(fp)
 401e89c:	10800017 	ldw	r2,0(r2)
 401e8a0:	10800104 	addi	r2,r2,4
 401e8a4:	1007883a 	mov	r3,r2
 401e8a8:	e0bffd17 	ldw	r2,-12(fp)
 401e8ac:	10800817 	ldw	r2,32(r2)
 401e8b0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 401e8b4:	e0bffe17 	ldw	r2,-8(fp)
 401e8b8:	e0ffff17 	ldw	r3,-4(fp)
 401e8bc:	d8000015 	stw	zero,0(sp)
 401e8c0:	e1fffd17 	ldw	r7,-12(fp)
 401e8c4:	018100b4 	movhi	r6,1026
 401e8c8:	31ba4c04 	addi	r6,r6,-5840
 401e8cc:	180b883a 	mov	r5,r3
 401e8d0:	1009883a 	mov	r4,r2
 401e8d4:	401f9580 	call	401f958 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 401e8d8:	e0bffd17 	ldw	r2,-12(fp)
 401e8dc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 401e8e0:	e0bffd17 	ldw	r2,-12(fp)
 401e8e4:	10800204 	addi	r2,r2,8
 401e8e8:	d0f24717 	ldw	r3,-14052(gp)
 401e8ec:	e1fffd17 	ldw	r7,-12(fp)
 401e8f0:	018100b4 	movhi	r6,1026
 401e8f4:	31bacf04 	addi	r6,r6,-5316
 401e8f8:	180b883a 	mov	r5,r3
 401e8fc:	1009883a 	mov	r4,r2
 401e900:	401f4640 	call	401f464 <alt_alarm_start>
 401e904:	1000040e 	bge	r2,zero,401e918 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 401e908:	e0fffd17 	ldw	r3,-12(fp)
 401e90c:	00a00034 	movhi	r2,32768
 401e910:	10bfffc4 	addi	r2,r2,-1
 401e914:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 401e918:	0001883a 	nop
 401e91c:	e037883a 	mov	sp,fp
 401e920:	dfc00117 	ldw	ra,4(sp)
 401e924:	df000017 	ldw	fp,0(sp)
 401e928:	dec00204 	addi	sp,sp,8
 401e92c:	f800283a 	ret

0401e930 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 401e930:	defff804 	addi	sp,sp,-32
 401e934:	df000715 	stw	fp,28(sp)
 401e938:	df000704 	addi	fp,sp,28
 401e93c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 401e940:	e0bfff17 	ldw	r2,-4(fp)
 401e944:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 401e948:	e0bffb17 	ldw	r2,-20(fp)
 401e94c:	10800017 	ldw	r2,0(r2)
 401e950:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401e954:	e0bffc17 	ldw	r2,-16(fp)
 401e958:	10800104 	addi	r2,r2,4
 401e95c:	10800037 	ldwio	r2,0(r2)
 401e960:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 401e964:	e0bffd17 	ldw	r2,-12(fp)
 401e968:	1080c00c 	andi	r2,r2,768
 401e96c:	10006d26 	beq	r2,zero,401eb24 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 401e970:	e0bffd17 	ldw	r2,-12(fp)
 401e974:	1080400c 	andi	r2,r2,256
 401e978:	10003526 	beq	r2,zero,401ea50 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 401e97c:	00800074 	movhi	r2,1
 401e980:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e984:	e0bffb17 	ldw	r2,-20(fp)
 401e988:	10800a17 	ldw	r2,40(r2)
 401e98c:	10800044 	addi	r2,r2,1
 401e990:	1081ffcc 	andi	r2,r2,2047
 401e994:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 401e998:	e0bffb17 	ldw	r2,-20(fp)
 401e99c:	10c00b17 	ldw	r3,44(r2)
 401e9a0:	e0bffe17 	ldw	r2,-8(fp)
 401e9a4:	18801526 	beq	r3,r2,401e9fc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 401e9a8:	e0bffc17 	ldw	r2,-16(fp)
 401e9ac:	10800037 	ldwio	r2,0(r2)
 401e9b0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 401e9b4:	e0bff917 	ldw	r2,-28(fp)
 401e9b8:	10a0000c 	andi	r2,r2,32768
 401e9bc:	10001126 	beq	r2,zero,401ea04 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 401e9c0:	e0bffb17 	ldw	r2,-20(fp)
 401e9c4:	10800a17 	ldw	r2,40(r2)
 401e9c8:	e0fff917 	ldw	r3,-28(fp)
 401e9cc:	1809883a 	mov	r4,r3
 401e9d0:	e0fffb17 	ldw	r3,-20(fp)
 401e9d4:	1885883a 	add	r2,r3,r2
 401e9d8:	10800e04 	addi	r2,r2,56
 401e9dc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e9e0:	e0bffb17 	ldw	r2,-20(fp)
 401e9e4:	10800a17 	ldw	r2,40(r2)
 401e9e8:	10800044 	addi	r2,r2,1
 401e9ec:	10c1ffcc 	andi	r3,r2,2047
 401e9f0:	e0bffb17 	ldw	r2,-20(fp)
 401e9f4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 401e9f8:	003fe206 	br	401e984 <__alt_mem_onchip_memory2_0+0xfc01d6e4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 401e9fc:	0001883a 	nop
 401ea00:	00000106 	br	401ea08 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 401ea04:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 401ea08:	e0bff917 	ldw	r2,-28(fp)
 401ea0c:	10bfffec 	andhi	r2,r2,65535
 401ea10:	10000f26 	beq	r2,zero,401ea50 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401ea14:	e0bffb17 	ldw	r2,-20(fp)
 401ea18:	10c00817 	ldw	r3,32(r2)
 401ea1c:	00bfff84 	movi	r2,-2
 401ea20:	1886703a 	and	r3,r3,r2
 401ea24:	e0bffb17 	ldw	r2,-20(fp)
 401ea28:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 401ea2c:	e0bffc17 	ldw	r2,-16(fp)
 401ea30:	10800104 	addi	r2,r2,4
 401ea34:	1007883a 	mov	r3,r2
 401ea38:	e0bffb17 	ldw	r2,-20(fp)
 401ea3c:	10800817 	ldw	r2,32(r2)
 401ea40:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401ea44:	e0bffc17 	ldw	r2,-16(fp)
 401ea48:	10800104 	addi	r2,r2,4
 401ea4c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 401ea50:	e0bffd17 	ldw	r2,-12(fp)
 401ea54:	1080800c 	andi	r2,r2,512
 401ea58:	103fbe26 	beq	r2,zero,401e954 <__alt_mem_onchip_memory2_0+0xfc01d6b4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 401ea5c:	e0bffd17 	ldw	r2,-12(fp)
 401ea60:	1004d43a 	srli	r2,r2,16
 401ea64:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 401ea68:	00001406 	br	401eabc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 401ea6c:	e0bffc17 	ldw	r2,-16(fp)
 401ea70:	e0fffb17 	ldw	r3,-20(fp)
 401ea74:	18c00d17 	ldw	r3,52(r3)
 401ea78:	e13ffb17 	ldw	r4,-20(fp)
 401ea7c:	20c7883a 	add	r3,r4,r3
 401ea80:	18c20e04 	addi	r3,r3,2104
 401ea84:	18c00003 	ldbu	r3,0(r3)
 401ea88:	18c03fcc 	andi	r3,r3,255
 401ea8c:	18c0201c 	xori	r3,r3,128
 401ea90:	18ffe004 	addi	r3,r3,-128
 401ea94:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401ea98:	e0bffb17 	ldw	r2,-20(fp)
 401ea9c:	10800d17 	ldw	r2,52(r2)
 401eaa0:	10800044 	addi	r2,r2,1
 401eaa4:	10c1ffcc 	andi	r3,r2,2047
 401eaa8:	e0bffb17 	ldw	r2,-20(fp)
 401eaac:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 401eab0:	e0bffa17 	ldw	r2,-24(fp)
 401eab4:	10bfffc4 	addi	r2,r2,-1
 401eab8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 401eabc:	e0bffa17 	ldw	r2,-24(fp)
 401eac0:	10000526 	beq	r2,zero,401ead8 <altera_avalon_jtag_uart_irq+0x1a8>
 401eac4:	e0bffb17 	ldw	r2,-20(fp)
 401eac8:	10c00d17 	ldw	r3,52(r2)
 401eacc:	e0bffb17 	ldw	r2,-20(fp)
 401ead0:	10800c17 	ldw	r2,48(r2)
 401ead4:	18bfe51e 	bne	r3,r2,401ea6c <__alt_mem_onchip_memory2_0+0xfc01d7cc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 401ead8:	e0bffa17 	ldw	r2,-24(fp)
 401eadc:	103f9d26 	beq	r2,zero,401e954 <__alt_mem_onchip_memory2_0+0xfc01d6b4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401eae0:	e0bffb17 	ldw	r2,-20(fp)
 401eae4:	10c00817 	ldw	r3,32(r2)
 401eae8:	00bfff44 	movi	r2,-3
 401eaec:	1886703a 	and	r3,r3,r2
 401eaf0:	e0bffb17 	ldw	r2,-20(fp)
 401eaf4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401eaf8:	e0bffb17 	ldw	r2,-20(fp)
 401eafc:	10800017 	ldw	r2,0(r2)
 401eb00:	10800104 	addi	r2,r2,4
 401eb04:	1007883a 	mov	r3,r2
 401eb08:	e0bffb17 	ldw	r2,-20(fp)
 401eb0c:	10800817 	ldw	r2,32(r2)
 401eb10:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401eb14:	e0bffc17 	ldw	r2,-16(fp)
 401eb18:	10800104 	addi	r2,r2,4
 401eb1c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 401eb20:	003f8c06 	br	401e954 <__alt_mem_onchip_memory2_0+0xfc01d6b4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 401eb24:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 401eb28:	0001883a 	nop
 401eb2c:	e037883a 	mov	sp,fp
 401eb30:	df000017 	ldw	fp,0(sp)
 401eb34:	dec00104 	addi	sp,sp,4
 401eb38:	f800283a 	ret

0401eb3c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 401eb3c:	defff804 	addi	sp,sp,-32
 401eb40:	df000715 	stw	fp,28(sp)
 401eb44:	df000704 	addi	fp,sp,28
 401eb48:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 401eb4c:	e0bffb17 	ldw	r2,-20(fp)
 401eb50:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 401eb54:	e0bff917 	ldw	r2,-28(fp)
 401eb58:	10800017 	ldw	r2,0(r2)
 401eb5c:	10800104 	addi	r2,r2,4
 401eb60:	10800037 	ldwio	r2,0(r2)
 401eb64:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 401eb68:	e0bffa17 	ldw	r2,-24(fp)
 401eb6c:	1081000c 	andi	r2,r2,1024
 401eb70:	10000b26 	beq	r2,zero,401eba0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 401eb74:	e0bff917 	ldw	r2,-28(fp)
 401eb78:	10800017 	ldw	r2,0(r2)
 401eb7c:	10800104 	addi	r2,r2,4
 401eb80:	1007883a 	mov	r3,r2
 401eb84:	e0bff917 	ldw	r2,-28(fp)
 401eb88:	10800817 	ldw	r2,32(r2)
 401eb8c:	10810014 	ori	r2,r2,1024
 401eb90:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 401eb94:	e0bff917 	ldw	r2,-28(fp)
 401eb98:	10000915 	stw	zero,36(r2)
 401eb9c:	00000a06 	br	401ebc8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 401eba0:	e0bff917 	ldw	r2,-28(fp)
 401eba4:	10c00917 	ldw	r3,36(r2)
 401eba8:	00a00034 	movhi	r2,32768
 401ebac:	10bfff04 	addi	r2,r2,-4
 401ebb0:	10c00536 	bltu	r2,r3,401ebc8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 401ebb4:	e0bff917 	ldw	r2,-28(fp)
 401ebb8:	10800917 	ldw	r2,36(r2)
 401ebbc:	10c00044 	addi	r3,r2,1
 401ebc0:	e0bff917 	ldw	r2,-28(fp)
 401ebc4:	10c00915 	stw	r3,36(r2)
 401ebc8:	d0b24717 	ldw	r2,-14052(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 401ebcc:	e037883a 	mov	sp,fp
 401ebd0:	df000017 	ldw	fp,0(sp)
 401ebd4:	dec00104 	addi	sp,sp,4
 401ebd8:	f800283a 	ret

0401ebdc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 401ebdc:	defffd04 	addi	sp,sp,-12
 401ebe0:	df000215 	stw	fp,8(sp)
 401ebe4:	df000204 	addi	fp,sp,8
 401ebe8:	e13ffe15 	stw	r4,-8(fp)
 401ebec:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401ebf0:	00000506 	br	401ec08 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 401ebf4:	e0bfff17 	ldw	r2,-4(fp)
 401ebf8:	1090000c 	andi	r2,r2,16384
 401ebfc:	10000226 	beq	r2,zero,401ec08 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 401ec00:	00bffd44 	movi	r2,-11
 401ec04:	00000b06 	br	401ec34 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401ec08:	e0bffe17 	ldw	r2,-8(fp)
 401ec0c:	10c00d17 	ldw	r3,52(r2)
 401ec10:	e0bffe17 	ldw	r2,-8(fp)
 401ec14:	10800c17 	ldw	r2,48(r2)
 401ec18:	18800526 	beq	r3,r2,401ec30 <altera_avalon_jtag_uart_close+0x54>
 401ec1c:	e0bffe17 	ldw	r2,-8(fp)
 401ec20:	10c00917 	ldw	r3,36(r2)
 401ec24:	e0bffe17 	ldw	r2,-8(fp)
 401ec28:	10800117 	ldw	r2,4(r2)
 401ec2c:	18bff136 	bltu	r3,r2,401ebf4 <__alt_mem_onchip_memory2_0+0xfc01d954>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 401ec30:	0005883a 	mov	r2,zero
}
 401ec34:	e037883a 	mov	sp,fp
 401ec38:	df000017 	ldw	fp,0(sp)
 401ec3c:	dec00104 	addi	sp,sp,4
 401ec40:	f800283a 	ret

0401ec44 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 401ec44:	defffa04 	addi	sp,sp,-24
 401ec48:	df000515 	stw	fp,20(sp)
 401ec4c:	df000504 	addi	fp,sp,20
 401ec50:	e13ffd15 	stw	r4,-12(fp)
 401ec54:	e17ffe15 	stw	r5,-8(fp)
 401ec58:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 401ec5c:	00bff9c4 	movi	r2,-25
 401ec60:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 401ec64:	e0bffe17 	ldw	r2,-8(fp)
 401ec68:	10da8060 	cmpeqi	r3,r2,27137
 401ec6c:	1800031e 	bne	r3,zero,401ec7c <altera_avalon_jtag_uart_ioctl+0x38>
 401ec70:	109a80a0 	cmpeqi	r2,r2,27138
 401ec74:	1000181e 	bne	r2,zero,401ecd8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 401ec78:	00002906 	br	401ed20 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 401ec7c:	e0bffd17 	ldw	r2,-12(fp)
 401ec80:	10c00117 	ldw	r3,4(r2)
 401ec84:	00a00034 	movhi	r2,32768
 401ec88:	10bfffc4 	addi	r2,r2,-1
 401ec8c:	18802126 	beq	r3,r2,401ed14 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 401ec90:	e0bfff17 	ldw	r2,-4(fp)
 401ec94:	10800017 	ldw	r2,0(r2)
 401ec98:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 401ec9c:	e0bffc17 	ldw	r2,-16(fp)
 401eca0:	10800090 	cmplti	r2,r2,2
 401eca4:	1000061e 	bne	r2,zero,401ecc0 <altera_avalon_jtag_uart_ioctl+0x7c>
 401eca8:	e0fffc17 	ldw	r3,-16(fp)
 401ecac:	00a00034 	movhi	r2,32768
 401ecb0:	10bfffc4 	addi	r2,r2,-1
 401ecb4:	18800226 	beq	r3,r2,401ecc0 <altera_avalon_jtag_uart_ioctl+0x7c>
 401ecb8:	e0bffc17 	ldw	r2,-16(fp)
 401ecbc:	00000206 	br	401ecc8 <altera_avalon_jtag_uart_ioctl+0x84>
 401ecc0:	00a00034 	movhi	r2,32768
 401ecc4:	10bfff84 	addi	r2,r2,-2
 401ecc8:	e0fffd17 	ldw	r3,-12(fp)
 401eccc:	18800115 	stw	r2,4(r3)
      rc = 0;
 401ecd0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401ecd4:	00000f06 	br	401ed14 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401ecd8:	e0bffd17 	ldw	r2,-12(fp)
 401ecdc:	10c00117 	ldw	r3,4(r2)
 401ece0:	00a00034 	movhi	r2,32768
 401ece4:	10bfffc4 	addi	r2,r2,-1
 401ece8:	18800c26 	beq	r3,r2,401ed1c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 401ecec:	e0bffd17 	ldw	r2,-12(fp)
 401ecf0:	10c00917 	ldw	r3,36(r2)
 401ecf4:	e0bffd17 	ldw	r2,-12(fp)
 401ecf8:	10800117 	ldw	r2,4(r2)
 401ecfc:	1885803a 	cmpltu	r2,r3,r2
 401ed00:	10c03fcc 	andi	r3,r2,255
 401ed04:	e0bfff17 	ldw	r2,-4(fp)
 401ed08:	10c00015 	stw	r3,0(r2)
      rc = 0;
 401ed0c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401ed10:	00000206 	br	401ed1c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 401ed14:	0001883a 	nop
 401ed18:	00000106 	br	401ed20 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 401ed1c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 401ed20:	e0bffb17 	ldw	r2,-20(fp)
}
 401ed24:	e037883a 	mov	sp,fp
 401ed28:	df000017 	ldw	fp,0(sp)
 401ed2c:	dec00104 	addi	sp,sp,4
 401ed30:	f800283a 	ret

0401ed34 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 401ed34:	defff304 	addi	sp,sp,-52
 401ed38:	dfc00c15 	stw	ra,48(sp)
 401ed3c:	df000b15 	stw	fp,44(sp)
 401ed40:	df000b04 	addi	fp,sp,44
 401ed44:	e13ffc15 	stw	r4,-16(fp)
 401ed48:	e17ffd15 	stw	r5,-12(fp)
 401ed4c:	e1bffe15 	stw	r6,-8(fp)
 401ed50:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 401ed54:	e0bffd17 	ldw	r2,-12(fp)
 401ed58:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401ed5c:	00004706 	br	401ee7c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401ed60:	e0bffc17 	ldw	r2,-16(fp)
 401ed64:	10800a17 	ldw	r2,40(r2)
 401ed68:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 401ed6c:	e0bffc17 	ldw	r2,-16(fp)
 401ed70:	10800b17 	ldw	r2,44(r2)
 401ed74:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 401ed78:	e0fff717 	ldw	r3,-36(fp)
 401ed7c:	e0bff817 	ldw	r2,-32(fp)
 401ed80:	18800536 	bltu	r3,r2,401ed98 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 401ed84:	e0fff717 	ldw	r3,-36(fp)
 401ed88:	e0bff817 	ldw	r2,-32(fp)
 401ed8c:	1885c83a 	sub	r2,r3,r2
 401ed90:	e0bff615 	stw	r2,-40(fp)
 401ed94:	00000406 	br	401eda8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 401ed98:	00c20004 	movi	r3,2048
 401ed9c:	e0bff817 	ldw	r2,-32(fp)
 401eda0:	1885c83a 	sub	r2,r3,r2
 401eda4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401eda8:	e0bff617 	ldw	r2,-40(fp)
 401edac:	10001e26 	beq	r2,zero,401ee28 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 401edb0:	e0fffe17 	ldw	r3,-8(fp)
 401edb4:	e0bff617 	ldw	r2,-40(fp)
 401edb8:	1880022e 	bgeu	r3,r2,401edc4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 401edbc:	e0bffe17 	ldw	r2,-8(fp)
 401edc0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 401edc4:	e0bffc17 	ldw	r2,-16(fp)
 401edc8:	10c00e04 	addi	r3,r2,56
 401edcc:	e0bff817 	ldw	r2,-32(fp)
 401edd0:	1885883a 	add	r2,r3,r2
 401edd4:	e1bff617 	ldw	r6,-40(fp)
 401edd8:	100b883a 	mov	r5,r2
 401eddc:	e13ff517 	ldw	r4,-44(fp)
 401ede0:	400f4540 	call	400f454 <memcpy>
      ptr   += n;
 401ede4:	e0fff517 	ldw	r3,-44(fp)
 401ede8:	e0bff617 	ldw	r2,-40(fp)
 401edec:	1885883a 	add	r2,r3,r2
 401edf0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 401edf4:	e0fffe17 	ldw	r3,-8(fp)
 401edf8:	e0bff617 	ldw	r2,-40(fp)
 401edfc:	1885c83a 	sub	r2,r3,r2
 401ee00:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401ee04:	e0fff817 	ldw	r3,-32(fp)
 401ee08:	e0bff617 	ldw	r2,-40(fp)
 401ee0c:	1885883a 	add	r2,r3,r2
 401ee10:	10c1ffcc 	andi	r3,r2,2047
 401ee14:	e0bffc17 	ldw	r2,-16(fp)
 401ee18:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 401ee1c:	e0bffe17 	ldw	r2,-8(fp)
 401ee20:	00bfcf16 	blt	zero,r2,401ed60 <__alt_mem_onchip_memory2_0+0xfc01dac0>
 401ee24:	00000106 	br	401ee2c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 401ee28:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 401ee2c:	e0fff517 	ldw	r3,-44(fp)
 401ee30:	e0bffd17 	ldw	r2,-12(fp)
 401ee34:	1880141e 	bne	r3,r2,401ee88 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401ee38:	e0bfff17 	ldw	r2,-4(fp)
 401ee3c:	1090000c 	andi	r2,r2,16384
 401ee40:	1000131e 	bne	r2,zero,401ee90 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 401ee44:	0001883a 	nop
 401ee48:	e0bffc17 	ldw	r2,-16(fp)
 401ee4c:	10c00a17 	ldw	r3,40(r2)
 401ee50:	e0bff717 	ldw	r2,-36(fp)
 401ee54:	1880051e 	bne	r3,r2,401ee6c <altera_avalon_jtag_uart_read+0x138>
 401ee58:	e0bffc17 	ldw	r2,-16(fp)
 401ee5c:	10c00917 	ldw	r3,36(r2)
 401ee60:	e0bffc17 	ldw	r2,-16(fp)
 401ee64:	10800117 	ldw	r2,4(r2)
 401ee68:	18bff736 	bltu	r3,r2,401ee48 <__alt_mem_onchip_memory2_0+0xfc01dba8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 401ee6c:	e0bffc17 	ldw	r2,-16(fp)
 401ee70:	10c00a17 	ldw	r3,40(r2)
 401ee74:	e0bff717 	ldw	r2,-36(fp)
 401ee78:	18800726 	beq	r3,r2,401ee98 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401ee7c:	e0bffe17 	ldw	r2,-8(fp)
 401ee80:	00bfb716 	blt	zero,r2,401ed60 <__alt_mem_onchip_memory2_0+0xfc01dac0>
 401ee84:	00000506 	br	401ee9c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 401ee88:	0001883a 	nop
 401ee8c:	00000306 	br	401ee9c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 401ee90:	0001883a 	nop
 401ee94:	00000106 	br	401ee9c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 401ee98:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 401ee9c:	e0fff517 	ldw	r3,-44(fp)
 401eea0:	e0bffd17 	ldw	r2,-12(fp)
 401eea4:	18801826 	beq	r3,r2,401ef08 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401eea8:	0005303a 	rdctl	r2,status
 401eeac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401eeb0:	e0fffb17 	ldw	r3,-20(fp)
 401eeb4:	00bfff84 	movi	r2,-2
 401eeb8:	1884703a 	and	r2,r3,r2
 401eebc:	1001703a 	wrctl	status,r2
  
  return context;
 401eec0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 401eec4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401eec8:	e0bffc17 	ldw	r2,-16(fp)
 401eecc:	10800817 	ldw	r2,32(r2)
 401eed0:	10c00054 	ori	r3,r2,1
 401eed4:	e0bffc17 	ldw	r2,-16(fp)
 401eed8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401eedc:	e0bffc17 	ldw	r2,-16(fp)
 401eee0:	10800017 	ldw	r2,0(r2)
 401eee4:	10800104 	addi	r2,r2,4
 401eee8:	1007883a 	mov	r3,r2
 401eeec:	e0bffc17 	ldw	r2,-16(fp)
 401eef0:	10800817 	ldw	r2,32(r2)
 401eef4:	18800035 	stwio	r2,0(r3)
 401eef8:	e0bffa17 	ldw	r2,-24(fp)
 401eefc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ef00:	e0bff917 	ldw	r2,-28(fp)
 401ef04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 401ef08:	e0fff517 	ldw	r3,-44(fp)
 401ef0c:	e0bffd17 	ldw	r2,-12(fp)
 401ef10:	18800426 	beq	r3,r2,401ef24 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 401ef14:	e0fff517 	ldw	r3,-44(fp)
 401ef18:	e0bffd17 	ldw	r2,-12(fp)
 401ef1c:	1885c83a 	sub	r2,r3,r2
 401ef20:	00000606 	br	401ef3c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 401ef24:	e0bfff17 	ldw	r2,-4(fp)
 401ef28:	1090000c 	andi	r2,r2,16384
 401ef2c:	10000226 	beq	r2,zero,401ef38 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 401ef30:	00bffd44 	movi	r2,-11
 401ef34:	00000106 	br	401ef3c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 401ef38:	00bffec4 	movi	r2,-5
}
 401ef3c:	e037883a 	mov	sp,fp
 401ef40:	dfc00117 	ldw	ra,4(sp)
 401ef44:	df000017 	ldw	fp,0(sp)
 401ef48:	dec00204 	addi	sp,sp,8
 401ef4c:	f800283a 	ret

0401ef50 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401ef50:	defff304 	addi	sp,sp,-52
 401ef54:	dfc00c15 	stw	ra,48(sp)
 401ef58:	df000b15 	stw	fp,44(sp)
 401ef5c:	df000b04 	addi	fp,sp,44
 401ef60:	e13ffc15 	stw	r4,-16(fp)
 401ef64:	e17ffd15 	stw	r5,-12(fp)
 401ef68:	e1bffe15 	stw	r6,-8(fp)
 401ef6c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401ef70:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 401ef74:	e0bffd17 	ldw	r2,-12(fp)
 401ef78:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401ef7c:	00003706 	br	401f05c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 401ef80:	e0bffc17 	ldw	r2,-16(fp)
 401ef84:	10800c17 	ldw	r2,48(r2)
 401ef88:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 401ef8c:	e0bffc17 	ldw	r2,-16(fp)
 401ef90:	10800d17 	ldw	r2,52(r2)
 401ef94:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 401ef98:	e0fff917 	ldw	r3,-28(fp)
 401ef9c:	e0bff517 	ldw	r2,-44(fp)
 401efa0:	1880062e 	bgeu	r3,r2,401efbc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 401efa4:	e0fff517 	ldw	r3,-44(fp)
 401efa8:	e0bff917 	ldw	r2,-28(fp)
 401efac:	1885c83a 	sub	r2,r3,r2
 401efb0:	10bfffc4 	addi	r2,r2,-1
 401efb4:	e0bff615 	stw	r2,-40(fp)
 401efb8:	00000b06 	br	401efe8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 401efbc:	e0bff517 	ldw	r2,-44(fp)
 401efc0:	10000526 	beq	r2,zero,401efd8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 401efc4:	00c20004 	movi	r3,2048
 401efc8:	e0bff917 	ldw	r2,-28(fp)
 401efcc:	1885c83a 	sub	r2,r3,r2
 401efd0:	e0bff615 	stw	r2,-40(fp)
 401efd4:	00000406 	br	401efe8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 401efd8:	00c1ffc4 	movi	r3,2047
 401efdc:	e0bff917 	ldw	r2,-28(fp)
 401efe0:	1885c83a 	sub	r2,r3,r2
 401efe4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401efe8:	e0bff617 	ldw	r2,-40(fp)
 401efec:	10001e26 	beq	r2,zero,401f068 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 401eff0:	e0fffe17 	ldw	r3,-8(fp)
 401eff4:	e0bff617 	ldw	r2,-40(fp)
 401eff8:	1880022e 	bgeu	r3,r2,401f004 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 401effc:	e0bffe17 	ldw	r2,-8(fp)
 401f000:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 401f004:	e0bffc17 	ldw	r2,-16(fp)
 401f008:	10c20e04 	addi	r3,r2,2104
 401f00c:	e0bff917 	ldw	r2,-28(fp)
 401f010:	1885883a 	add	r2,r3,r2
 401f014:	e1bff617 	ldw	r6,-40(fp)
 401f018:	e17ffd17 	ldw	r5,-12(fp)
 401f01c:	1009883a 	mov	r4,r2
 401f020:	400f4540 	call	400f454 <memcpy>
      ptr   += n;
 401f024:	e0fffd17 	ldw	r3,-12(fp)
 401f028:	e0bff617 	ldw	r2,-40(fp)
 401f02c:	1885883a 	add	r2,r3,r2
 401f030:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 401f034:	e0fffe17 	ldw	r3,-8(fp)
 401f038:	e0bff617 	ldw	r2,-40(fp)
 401f03c:	1885c83a 	sub	r2,r3,r2
 401f040:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401f044:	e0fff917 	ldw	r3,-28(fp)
 401f048:	e0bff617 	ldw	r2,-40(fp)
 401f04c:	1885883a 	add	r2,r3,r2
 401f050:	10c1ffcc 	andi	r3,r2,2047
 401f054:	e0bffc17 	ldw	r2,-16(fp)
 401f058:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401f05c:	e0bffe17 	ldw	r2,-8(fp)
 401f060:	00bfc716 	blt	zero,r2,401ef80 <__alt_mem_onchip_memory2_0+0xfc01dce0>
 401f064:	00000106 	br	401f06c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 401f068:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f06c:	0005303a 	rdctl	r2,status
 401f070:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f074:	e0fffb17 	ldw	r3,-20(fp)
 401f078:	00bfff84 	movi	r2,-2
 401f07c:	1884703a 	and	r2,r3,r2
 401f080:	1001703a 	wrctl	status,r2
  
  return context;
 401f084:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 401f088:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401f08c:	e0bffc17 	ldw	r2,-16(fp)
 401f090:	10800817 	ldw	r2,32(r2)
 401f094:	10c00094 	ori	r3,r2,2
 401f098:	e0bffc17 	ldw	r2,-16(fp)
 401f09c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401f0a0:	e0bffc17 	ldw	r2,-16(fp)
 401f0a4:	10800017 	ldw	r2,0(r2)
 401f0a8:	10800104 	addi	r2,r2,4
 401f0ac:	1007883a 	mov	r3,r2
 401f0b0:	e0bffc17 	ldw	r2,-16(fp)
 401f0b4:	10800817 	ldw	r2,32(r2)
 401f0b8:	18800035 	stwio	r2,0(r3)
 401f0bc:	e0bffa17 	ldw	r2,-24(fp)
 401f0c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f0c4:	e0bff817 	ldw	r2,-32(fp)
 401f0c8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 401f0cc:	e0bffe17 	ldw	r2,-8(fp)
 401f0d0:	0080100e 	bge	zero,r2,401f114 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 401f0d4:	e0bfff17 	ldw	r2,-4(fp)
 401f0d8:	1090000c 	andi	r2,r2,16384
 401f0dc:	1000101e 	bne	r2,zero,401f120 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401f0e0:	0001883a 	nop
 401f0e4:	e0bffc17 	ldw	r2,-16(fp)
 401f0e8:	10c00d17 	ldw	r3,52(r2)
 401f0ec:	e0bff517 	ldw	r2,-44(fp)
 401f0f0:	1880051e 	bne	r3,r2,401f108 <altera_avalon_jtag_uart_write+0x1b8>
 401f0f4:	e0bffc17 	ldw	r2,-16(fp)
 401f0f8:	10c00917 	ldw	r3,36(r2)
 401f0fc:	e0bffc17 	ldw	r2,-16(fp)
 401f100:	10800117 	ldw	r2,4(r2)
 401f104:	18bff736 	bltu	r3,r2,401f0e4 <__alt_mem_onchip_memory2_0+0xfc01de44>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 401f108:	e0bffc17 	ldw	r2,-16(fp)
 401f10c:	10800917 	ldw	r2,36(r2)
 401f110:	1000051e 	bne	r2,zero,401f128 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 401f114:	e0bffe17 	ldw	r2,-8(fp)
 401f118:	00bfd016 	blt	zero,r2,401f05c <__alt_mem_onchip_memory2_0+0xfc01ddbc>
 401f11c:	00000306 	br	401f12c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401f120:	0001883a 	nop
 401f124:	00000106 	br	401f12c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 401f128:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 401f12c:	e0fffd17 	ldw	r3,-12(fp)
 401f130:	e0bff717 	ldw	r2,-36(fp)
 401f134:	18800426 	beq	r3,r2,401f148 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 401f138:	e0fffd17 	ldw	r3,-12(fp)
 401f13c:	e0bff717 	ldw	r2,-36(fp)
 401f140:	1885c83a 	sub	r2,r3,r2
 401f144:	00000606 	br	401f160 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 401f148:	e0bfff17 	ldw	r2,-4(fp)
 401f14c:	1090000c 	andi	r2,r2,16384
 401f150:	10000226 	beq	r2,zero,401f15c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 401f154:	00bffd44 	movi	r2,-11
 401f158:	00000106 	br	401f160 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 401f15c:	00bffec4 	movi	r2,-5
}
 401f160:	e037883a 	mov	sp,fp
 401f164:	dfc00117 	ldw	ra,4(sp)
 401f168:	df000017 	ldw	fp,0(sp)
 401f16c:	dec00204 	addi	sp,sp,8
 401f170:	f800283a 	ret

0401f174 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 401f174:	defff404 	addi	sp,sp,-48
 401f178:	df000b15 	stw	fp,44(sp)
 401f17c:	df000b04 	addi	fp,sp,44
 401f180:	e13ffc15 	stw	r4,-16(fp)
 401f184:	e17ffd15 	stw	r5,-12(fp)
 401f188:	e1bffe15 	stw	r6,-8(fp)
 401f18c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 401f190:	e0ffff17 	ldw	r3,-4(fp)
 401f194:	e0bffe17 	ldw	r2,-8(fp)
 401f198:	1885883a 	add	r2,r3,r2
 401f19c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 401f1a0:	e0c00217 	ldw	r3,8(fp)
 401f1a4:	e0800117 	ldw	r2,4(fp)
 401f1a8:	1885883a 	add	r2,r3,r2
 401f1ac:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 401f1b0:	e0800117 	ldw	r2,4(fp)
 401f1b4:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 401f1b8:	e0bffe17 	ldw	r2,-8(fp)
 401f1bc:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 401f1c0:	00800044 	movi	r2,1
 401f1c4:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 401f1c8:	e0bffc17 	ldw	r2,-16(fp)
 401f1cc:	10800504 	addi	r2,r2,20
 401f1d0:	1009883a 	mov	r4,r2
 401f1d4:	00c00044 	movi	r3,1
 401f1d8:	e0bffd17 	ldw	r2,-12(fp)
 401f1dc:	1884983a 	sll	r2,r3,r2
 401f1e0:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 401f1e4:	e0800317 	ldw	r2,12(fp)
 401f1e8:	1080008c 	andi	r2,r2,2
 401f1ec:	1000051e 	bne	r2,zero,401f204 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 401f1f0:	e0bffc17 	ldw	r2,-16(fp)
 401f1f4:	10800304 	addi	r2,r2,12
 401f1f8:	1007883a 	mov	r3,r2
 401f1fc:	00810004 	movi	r2,1024
 401f200:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401f204:	e0bffc17 	ldw	r2,-16(fp)
 401f208:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401f20c:	e0bffc17 	ldw	r2,-16(fp)
 401f210:	10800204 	addi	r2,r2,8
 401f214:	10800037 	ldwio	r2,0(r2)
 401f218:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401f21c:	e0bffa17 	ldw	r2,-24(fp)
 401f220:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401f224:	10000226 	beq	r2,zero,401f230 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401f228:	e0bff717 	ldw	r2,-36(fp)
 401f22c:	1000031e 	bne	r2,zero,401f23c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401f230:	e0bffa17 	ldw	r2,-24(fp)
 401f234:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401f238:	103ff426 	beq	r2,zero,401f20c <__alt_mem_onchip_memory2_0+0xfc01df6c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 401f23c:	e0bffa17 	ldw	r2,-24(fp)
 401f240:	1080100c 	andi	r2,r2,64
 401f244:	10001e26 	beq	r2,zero,401f2c0 <alt_avalon_spi_command+0x14c>
 401f248:	e0bff717 	ldw	r2,-36(fp)
 401f24c:	00801c0e 	bge	zero,r2,401f2c0 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 401f250:	e0bff717 	ldw	r2,-36(fp)
 401f254:	10bfffc4 	addi	r2,r2,-1
 401f258:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 401f25c:	e0ffff17 	ldw	r3,-4(fp)
 401f260:	e0bff817 	ldw	r2,-32(fp)
 401f264:	18800a2e 	bgeu	r3,r2,401f290 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 401f268:	e0bffc17 	ldw	r2,-16(fp)
 401f26c:	10800104 	addi	r2,r2,4
 401f270:	1009883a 	mov	r4,r2
 401f274:	e0bfff17 	ldw	r2,-4(fp)
 401f278:	10c00044 	addi	r3,r2,1
 401f27c:	e0ffff15 	stw	r3,-4(fp)
 401f280:	10800003 	ldbu	r2,0(r2)
 401f284:	10803fcc 	andi	r2,r2,255
 401f288:	20800035 	stwio	r2,0(r4)
 401f28c:	00000c06 	br	401f2c0 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 401f290:	e0bff517 	ldw	r2,-44(fp)
 401f294:	10000826 	beq	r2,zero,401f2b8 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 401f298:	e0bff517 	ldw	r2,-44(fp)
 401f29c:	10bfffc4 	addi	r2,r2,-1
 401f2a0:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 401f2a4:	e0bffc17 	ldw	r2,-16(fp)
 401f2a8:	10800104 	addi	r2,r2,4
 401f2ac:	0007883a 	mov	r3,zero
 401f2b0:	10c00035 	stwio	r3,0(r2)
 401f2b4:	00000206 	br	401f2c0 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 401f2b8:	00bf0004 	movi	r2,-1024
 401f2bc:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 401f2c0:	e0bffa17 	ldw	r2,-24(fp)
 401f2c4:	1080200c 	andi	r2,r2,128
 401f2c8:	103fd026 	beq	r2,zero,401f20c <__alt_mem_onchip_memory2_0+0xfc01df6c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401f2cc:	e0bffc17 	ldw	r2,-16(fp)
 401f2d0:	10800037 	ldwio	r2,0(r2)
 401f2d4:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 401f2d8:	e0bff617 	ldw	r2,-40(fp)
 401f2dc:	10000426 	beq	r2,zero,401f2f0 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 401f2e0:	e0bff617 	ldw	r2,-40(fp)
 401f2e4:	10bfffc4 	addi	r2,r2,-1
 401f2e8:	e0bff615 	stw	r2,-40(fp)
 401f2ec:	00000506 	br	401f304 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 401f2f0:	e0800217 	ldw	r2,8(fp)
 401f2f4:	10c00044 	addi	r3,r2,1
 401f2f8:	e0c00215 	stw	r3,8(fp)
 401f2fc:	e0fffb17 	ldw	r3,-20(fp)
 401f300:	10c00005 	stb	r3,0(r2)
      credits++;
 401f304:	e0bff717 	ldw	r2,-36(fp)
 401f308:	10800044 	addi	r2,r2,1
 401f30c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 401f310:	e0bff617 	ldw	r2,-40(fp)
 401f314:	103fbd1e 	bne	r2,zero,401f20c <__alt_mem_onchip_memory2_0+0xfc01df6c>
 401f318:	e0c00217 	ldw	r3,8(fp)
 401f31c:	e0bff917 	ldw	r2,-28(fp)
 401f320:	18bfba1e 	bne	r3,r2,401f20c <__alt_mem_onchip_memory2_0+0xfc01df6c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401f324:	e0bffc17 	ldw	r2,-16(fp)
 401f328:	10800204 	addi	r2,r2,8
 401f32c:	10800037 	ldwio	r2,0(r2)
 401f330:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 401f334:	e0bffa17 	ldw	r2,-24(fp)
 401f338:	1080080c 	andi	r2,r2,32
 401f33c:	103ff926 	beq	r2,zero,401f324 <__alt_mem_onchip_memory2_0+0xfc01e084>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 401f340:	e0800317 	ldw	r2,12(fp)
 401f344:	1080004c 	andi	r2,r2,1
 401f348:	1000041e 	bne	r2,zero,401f35c <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 401f34c:	e0bffc17 	ldw	r2,-16(fp)
 401f350:	10800304 	addi	r2,r2,12
 401f354:	0007883a 	mov	r3,zero
 401f358:	10c00035 	stwio	r3,0(r2)

  return read_length;
 401f35c:	e0800117 	ldw	r2,4(fp)
}
 401f360:	e037883a 	mov	sp,fp
 401f364:	df000017 	ldw	fp,0(sp)
 401f368:	dec00104 	addi	sp,sp,4
 401f36c:	f800283a 	ret

0401f370 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 401f370:	defffa04 	addi	sp,sp,-24
 401f374:	dfc00515 	stw	ra,20(sp)
 401f378:	df000415 	stw	fp,16(sp)
 401f37c:	df000404 	addi	fp,sp,16
 401f380:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 401f384:	0007883a 	mov	r3,zero
 401f388:	e0bfff17 	ldw	r2,-4(fp)
 401f38c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401f390:	e0bfff17 	ldw	r2,-4(fp)
 401f394:	10800104 	addi	r2,r2,4
 401f398:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f39c:	0005303a 	rdctl	r2,status
 401f3a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f3a4:	e0fffd17 	ldw	r3,-12(fp)
 401f3a8:	00bfff84 	movi	r2,-2
 401f3ac:	1884703a 	and	r2,r3,r2
 401f3b0:	1001703a 	wrctl	status,r2
  
  return context;
 401f3b4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 401f3b8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 401f3bc:	40202e00 	call	40202e0 <alt_tick>
 401f3c0:	e0bffc17 	ldw	r2,-16(fp)
 401f3c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f3c8:	e0bffe17 	ldw	r2,-8(fp)
 401f3cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 401f3d0:	0001883a 	nop
 401f3d4:	e037883a 	mov	sp,fp
 401f3d8:	dfc00117 	ldw	ra,4(sp)
 401f3dc:	df000017 	ldw	fp,0(sp)
 401f3e0:	dec00204 	addi	sp,sp,8
 401f3e4:	f800283a 	ret

0401f3e8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 401f3e8:	defff804 	addi	sp,sp,-32
 401f3ec:	dfc00715 	stw	ra,28(sp)
 401f3f0:	df000615 	stw	fp,24(sp)
 401f3f4:	df000604 	addi	fp,sp,24
 401f3f8:	e13ffc15 	stw	r4,-16(fp)
 401f3fc:	e17ffd15 	stw	r5,-12(fp)
 401f400:	e1bffe15 	stw	r6,-8(fp)
 401f404:	e1ffff15 	stw	r7,-4(fp)
 401f408:	e0bfff17 	ldw	r2,-4(fp)
 401f40c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 401f410:	d0b24717 	ldw	r2,-14052(gp)
 401f414:	1000021e 	bne	r2,zero,401f420 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 401f418:	e0bffb17 	ldw	r2,-20(fp)
 401f41c:	d0b24715 	stw	r2,-14052(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401f420:	e0bffc17 	ldw	r2,-16(fp)
 401f424:	10800104 	addi	r2,r2,4
 401f428:	00c001c4 	movi	r3,7
 401f42c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 401f430:	d8000015 	stw	zero,0(sp)
 401f434:	e1fffc17 	ldw	r7,-16(fp)
 401f438:	018100b4 	movhi	r6,1026
 401f43c:	31bcdc04 	addi	r6,r6,-3216
 401f440:	e17ffe17 	ldw	r5,-8(fp)
 401f444:	e13ffd17 	ldw	r4,-12(fp)
 401f448:	401f9580 	call	401f958 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401f44c:	0001883a 	nop
 401f450:	e037883a 	mov	sp,fp
 401f454:	dfc00117 	ldw	ra,4(sp)
 401f458:	df000017 	ldw	fp,0(sp)
 401f45c:	dec00204 	addi	sp,sp,8
 401f460:	f800283a 	ret

0401f464 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 401f464:	defff504 	addi	sp,sp,-44
 401f468:	df000a15 	stw	fp,40(sp)
 401f46c:	df000a04 	addi	fp,sp,40
 401f470:	e13ffc15 	stw	r4,-16(fp)
 401f474:	e17ffd15 	stw	r5,-12(fp)
 401f478:	e1bffe15 	stw	r6,-8(fp)
 401f47c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 401f480:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401f484:	d0b24717 	ldw	r2,-14052(gp)
  
  if (alt_ticks_per_second ())
 401f488:	10003c26 	beq	r2,zero,401f57c <alt_alarm_start+0x118>
  {
    if (alarm)
 401f48c:	e0bffc17 	ldw	r2,-16(fp)
 401f490:	10003826 	beq	r2,zero,401f574 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 401f494:	e0bffc17 	ldw	r2,-16(fp)
 401f498:	e0fffe17 	ldw	r3,-8(fp)
 401f49c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 401f4a0:	e0bffc17 	ldw	r2,-16(fp)
 401f4a4:	e0ffff17 	ldw	r3,-4(fp)
 401f4a8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f4ac:	0005303a 	rdctl	r2,status
 401f4b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f4b4:	e0fff917 	ldw	r3,-28(fp)
 401f4b8:	00bfff84 	movi	r2,-2
 401f4bc:	1884703a 	and	r2,r3,r2
 401f4c0:	1001703a 	wrctl	status,r2
  
  return context;
 401f4c4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 401f4c8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401f4cc:	d0b24817 	ldw	r2,-14048(gp)
      
      current_nticks = alt_nticks();
 401f4d0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 401f4d4:	e0fffd17 	ldw	r3,-12(fp)
 401f4d8:	e0bff617 	ldw	r2,-40(fp)
 401f4dc:	1885883a 	add	r2,r3,r2
 401f4e0:	10c00044 	addi	r3,r2,1
 401f4e4:	e0bffc17 	ldw	r2,-16(fp)
 401f4e8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 401f4ec:	e0bffc17 	ldw	r2,-16(fp)
 401f4f0:	10c00217 	ldw	r3,8(r2)
 401f4f4:	e0bff617 	ldw	r2,-40(fp)
 401f4f8:	1880042e 	bgeu	r3,r2,401f50c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 401f4fc:	e0bffc17 	ldw	r2,-16(fp)
 401f500:	00c00044 	movi	r3,1
 401f504:	10c00405 	stb	r3,16(r2)
 401f508:	00000206 	br	401f514 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 401f50c:	e0bffc17 	ldw	r2,-16(fp)
 401f510:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 401f514:	e0bffc17 	ldw	r2,-16(fp)
 401f518:	d0e5bc04 	addi	r3,gp,-26896
 401f51c:	e0fffa15 	stw	r3,-24(fp)
 401f520:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401f524:	e0bffb17 	ldw	r2,-20(fp)
 401f528:	e0fffa17 	ldw	r3,-24(fp)
 401f52c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401f530:	e0bffa17 	ldw	r2,-24(fp)
 401f534:	10c00017 	ldw	r3,0(r2)
 401f538:	e0bffb17 	ldw	r2,-20(fp)
 401f53c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401f540:	e0bffa17 	ldw	r2,-24(fp)
 401f544:	10800017 	ldw	r2,0(r2)
 401f548:	e0fffb17 	ldw	r3,-20(fp)
 401f54c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401f550:	e0bffa17 	ldw	r2,-24(fp)
 401f554:	e0fffb17 	ldw	r3,-20(fp)
 401f558:	10c00015 	stw	r3,0(r2)
 401f55c:	e0bff817 	ldw	r2,-32(fp)
 401f560:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f564:	e0bff717 	ldw	r2,-36(fp)
 401f568:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 401f56c:	0005883a 	mov	r2,zero
 401f570:	00000306 	br	401f580 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 401f574:	00bffa84 	movi	r2,-22
 401f578:	00000106 	br	401f580 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 401f57c:	00bfde84 	movi	r2,-134
  }
}
 401f580:	e037883a 	mov	sp,fp
 401f584:	df000017 	ldw	fp,0(sp)
 401f588:	dec00104 	addi	sp,sp,4
 401f58c:	f800283a 	ret

0401f590 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 401f590:	defffa04 	addi	sp,sp,-24
 401f594:	dfc00515 	stw	ra,20(sp)
 401f598:	df000415 	stw	fp,16(sp)
 401f59c:	df000404 	addi	fp,sp,16
 401f5a0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 401f5a4:	00800244 	movi	r2,9
 401f5a8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 401f5ac:	014003f4 	movhi	r5,15
 401f5b0:	29509004 	addi	r5,r5,16960
 401f5b4:	e13ffd17 	ldw	r4,-12(fp)
 401f5b8:	400dae00 	call	400dae0 <__mulsi3>
 401f5bc:	100b883a 	mov	r5,r2
 401f5c0:	0100bef4 	movhi	r4,763
 401f5c4:	213c2004 	addi	r4,r4,-3968
 401f5c8:	400da240 	call	400da24 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401f5cc:	100b883a 	mov	r5,r2
 401f5d0:	01200034 	movhi	r4,32768
 401f5d4:	213fffc4 	addi	r4,r4,-1
 401f5d8:	400da240 	call	400da24 <__udivsi3>
 401f5dc:	100b883a 	mov	r5,r2
 401f5e0:	e13fff17 	ldw	r4,-4(fp)
 401f5e4:	400da240 	call	400da24 <__udivsi3>
 401f5e8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 401f5ec:	e0bffe17 	ldw	r2,-8(fp)
 401f5f0:	10002a26 	beq	r2,zero,401f69c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 401f5f4:	e03ffc15 	stw	zero,-16(fp)
 401f5f8:	00001706 	br	401f658 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 401f5fc:	00a00034 	movhi	r2,32768
 401f600:	10bfffc4 	addi	r2,r2,-1
 401f604:	10bfffc4 	addi	r2,r2,-1
 401f608:	103ffe1e 	bne	r2,zero,401f604 <__alt_mem_onchip_memory2_0+0xfc01e364>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 401f60c:	014003f4 	movhi	r5,15
 401f610:	29509004 	addi	r5,r5,16960
 401f614:	e13ffd17 	ldw	r4,-12(fp)
 401f618:	400dae00 	call	400dae0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 401f61c:	100b883a 	mov	r5,r2
 401f620:	0100bef4 	movhi	r4,763
 401f624:	213c2004 	addi	r4,r4,-3968
 401f628:	400da240 	call	400da24 <__udivsi3>
 401f62c:	100b883a 	mov	r5,r2
 401f630:	01200034 	movhi	r4,32768
 401f634:	213fffc4 	addi	r4,r4,-1
 401f638:	400da240 	call	400da24 <__udivsi3>
 401f63c:	1007883a 	mov	r3,r2
 401f640:	e0bfff17 	ldw	r2,-4(fp)
 401f644:	10c5c83a 	sub	r2,r2,r3
 401f648:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 401f64c:	e0bffc17 	ldw	r2,-16(fp)
 401f650:	10800044 	addi	r2,r2,1
 401f654:	e0bffc15 	stw	r2,-16(fp)
 401f658:	e0fffc17 	ldw	r3,-16(fp)
 401f65c:	e0bffe17 	ldw	r2,-8(fp)
 401f660:	18bfe616 	blt	r3,r2,401f5fc <__alt_mem_onchip_memory2_0+0xfc01e35c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401f664:	014003f4 	movhi	r5,15
 401f668:	29509004 	addi	r5,r5,16960
 401f66c:	e13ffd17 	ldw	r4,-12(fp)
 401f670:	400dae00 	call	400dae0 <__mulsi3>
 401f674:	100b883a 	mov	r5,r2
 401f678:	0100bef4 	movhi	r4,763
 401f67c:	213c2004 	addi	r4,r4,-3968
 401f680:	400da240 	call	400da24 <__udivsi3>
 401f684:	e17fff17 	ldw	r5,-4(fp)
 401f688:	1009883a 	mov	r4,r2
 401f68c:	400dae00 	call	400dae0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401f690:	10bfffc4 	addi	r2,r2,-1
 401f694:	103ffe1e 	bne	r2,zero,401f690 <__alt_mem_onchip_memory2_0+0xfc01e3f0>
 401f698:	00000d06 	br	401f6d0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401f69c:	014003f4 	movhi	r5,15
 401f6a0:	29509004 	addi	r5,r5,16960
 401f6a4:	e13ffd17 	ldw	r4,-12(fp)
 401f6a8:	400dae00 	call	400dae0 <__mulsi3>
 401f6ac:	100b883a 	mov	r5,r2
 401f6b0:	0100bef4 	movhi	r4,763
 401f6b4:	213c2004 	addi	r4,r4,-3968
 401f6b8:	400da240 	call	400da24 <__udivsi3>
 401f6bc:	e17fff17 	ldw	r5,-4(fp)
 401f6c0:	1009883a 	mov	r4,r2
 401f6c4:	400dae00 	call	400dae0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401f6c8:	10bfffc4 	addi	r2,r2,-1
 401f6cc:	00bffe16 	blt	zero,r2,401f6c8 <__alt_mem_onchip_memory2_0+0xfc01e428>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 401f6d0:	0005883a 	mov	r2,zero
}
 401f6d4:	e037883a 	mov	sp,fp
 401f6d8:	dfc00117 	ldw	ra,4(sp)
 401f6dc:	df000017 	ldw	fp,0(sp)
 401f6e0:	dec00204 	addi	sp,sp,8
 401f6e4:	f800283a 	ret

0401f6e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401f6e8:	deffff04 	addi	sp,sp,-4
 401f6ec:	df000015 	stw	fp,0(sp)
 401f6f0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 401f6f4:	0001883a 	nop
 401f6f8:	e037883a 	mov	sp,fp
 401f6fc:	df000017 	ldw	fp,0(sp)
 401f700:	dec00104 	addi	sp,sp,4
 401f704:	f800283a 	ret

0401f708 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401f708:	defffe04 	addi	sp,sp,-8
 401f70c:	dfc00115 	stw	ra,4(sp)
 401f710:	df000015 	stw	fp,0(sp)
 401f714:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401f718:	d0a5b717 	ldw	r2,-26916(gp)
 401f71c:	10000326 	beq	r2,zero,401f72c <alt_get_errno+0x24>
 401f720:	d0a5b717 	ldw	r2,-26916(gp)
 401f724:	103ee83a 	callr	r2
 401f728:	00000106 	br	401f730 <alt_get_errno+0x28>
 401f72c:	d0b23f04 	addi	r2,gp,-14084
}
 401f730:	e037883a 	mov	sp,fp
 401f734:	dfc00117 	ldw	ra,4(sp)
 401f738:	df000017 	ldw	fp,0(sp)
 401f73c:	dec00204 	addi	sp,sp,8
 401f740:	f800283a 	ret

0401f744 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 401f744:	defffa04 	addi	sp,sp,-24
 401f748:	dfc00515 	stw	ra,20(sp)
 401f74c:	df000415 	stw	fp,16(sp)
 401f750:	df000404 	addi	fp,sp,16
 401f754:	e13ffe15 	stw	r4,-8(fp)
 401f758:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 401f75c:	e0bffe17 	ldw	r2,-8(fp)
 401f760:	10000326 	beq	r2,zero,401f770 <alt_dev_llist_insert+0x2c>
 401f764:	e0bffe17 	ldw	r2,-8(fp)
 401f768:	10800217 	ldw	r2,8(r2)
 401f76c:	1000061e 	bne	r2,zero,401f788 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 401f770:	401f7080 	call	401f708 <alt_get_errno>
 401f774:	1007883a 	mov	r3,r2
 401f778:	00800584 	movi	r2,22
 401f77c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 401f780:	00bffa84 	movi	r2,-22
 401f784:	00001306 	br	401f7d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 401f788:	e0bffe17 	ldw	r2,-8(fp)
 401f78c:	e0ffff17 	ldw	r3,-4(fp)
 401f790:	e0fffc15 	stw	r3,-16(fp)
 401f794:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401f798:	e0bffd17 	ldw	r2,-12(fp)
 401f79c:	e0fffc17 	ldw	r3,-16(fp)
 401f7a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401f7a4:	e0bffc17 	ldw	r2,-16(fp)
 401f7a8:	10c00017 	ldw	r3,0(r2)
 401f7ac:	e0bffd17 	ldw	r2,-12(fp)
 401f7b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401f7b4:	e0bffc17 	ldw	r2,-16(fp)
 401f7b8:	10800017 	ldw	r2,0(r2)
 401f7bc:	e0fffd17 	ldw	r3,-12(fp)
 401f7c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401f7c4:	e0bffc17 	ldw	r2,-16(fp)
 401f7c8:	e0fffd17 	ldw	r3,-12(fp)
 401f7cc:	10c00015 	stw	r3,0(r2)

  return 0;  
 401f7d0:	0005883a 	mov	r2,zero
}
 401f7d4:	e037883a 	mov	sp,fp
 401f7d8:	dfc00117 	ldw	ra,4(sp)
 401f7dc:	df000017 	ldw	fp,0(sp)
 401f7e0:	dec00204 	addi	sp,sp,8
 401f7e4:	f800283a 	ret

0401f7e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 401f7e8:	defffd04 	addi	sp,sp,-12
 401f7ec:	dfc00215 	stw	ra,8(sp)
 401f7f0:	df000115 	stw	fp,4(sp)
 401f7f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401f7f8:	008100b4 	movhi	r2,1026
 401f7fc:	10828404 	addi	r2,r2,2576
 401f800:	e0bfff15 	stw	r2,-4(fp)
 401f804:	00000606 	br	401f820 <_do_ctors+0x38>
        (*ctor) (); 
 401f808:	e0bfff17 	ldw	r2,-4(fp)
 401f80c:	10800017 	ldw	r2,0(r2)
 401f810:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401f814:	e0bfff17 	ldw	r2,-4(fp)
 401f818:	10bfff04 	addi	r2,r2,-4
 401f81c:	e0bfff15 	stw	r2,-4(fp)
 401f820:	e0ffff17 	ldw	r3,-4(fp)
 401f824:	008100b4 	movhi	r2,1026
 401f828:	10828304 	addi	r2,r2,2572
 401f82c:	18bff62e 	bgeu	r3,r2,401f808 <__alt_mem_onchip_memory2_0+0xfc01e568>
        (*ctor) (); 
}
 401f830:	0001883a 	nop
 401f834:	e037883a 	mov	sp,fp
 401f838:	dfc00117 	ldw	ra,4(sp)
 401f83c:	df000017 	ldw	fp,0(sp)
 401f840:	dec00204 	addi	sp,sp,8
 401f844:	f800283a 	ret

0401f848 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 401f848:	defffd04 	addi	sp,sp,-12
 401f84c:	dfc00215 	stw	ra,8(sp)
 401f850:	df000115 	stw	fp,4(sp)
 401f854:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401f858:	008100b4 	movhi	r2,1026
 401f85c:	10828404 	addi	r2,r2,2576
 401f860:	e0bfff15 	stw	r2,-4(fp)
 401f864:	00000606 	br	401f880 <_do_dtors+0x38>
        (*dtor) (); 
 401f868:	e0bfff17 	ldw	r2,-4(fp)
 401f86c:	10800017 	ldw	r2,0(r2)
 401f870:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401f874:	e0bfff17 	ldw	r2,-4(fp)
 401f878:	10bfff04 	addi	r2,r2,-4
 401f87c:	e0bfff15 	stw	r2,-4(fp)
 401f880:	e0ffff17 	ldw	r3,-4(fp)
 401f884:	008100b4 	movhi	r2,1026
 401f888:	10828504 	addi	r2,r2,2580
 401f88c:	18bff62e 	bgeu	r3,r2,401f868 <__alt_mem_onchip_memory2_0+0xfc01e5c8>
        (*dtor) (); 
}
 401f890:	0001883a 	nop
 401f894:	e037883a 	mov	sp,fp
 401f898:	dfc00117 	ldw	ra,4(sp)
 401f89c:	df000017 	ldw	fp,0(sp)
 401f8a0:	dec00204 	addi	sp,sp,8
 401f8a4:	f800283a 	ret

0401f8a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401f8a8:	defffa04 	addi	sp,sp,-24
 401f8ac:	dfc00515 	stw	ra,20(sp)
 401f8b0:	df000415 	stw	fp,16(sp)
 401f8b4:	df000404 	addi	fp,sp,16
 401f8b8:	e13ffe15 	stw	r4,-8(fp)
 401f8bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 401f8c0:	e0bfff17 	ldw	r2,-4(fp)
 401f8c4:	10800017 	ldw	r2,0(r2)
 401f8c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 401f8cc:	e13ffe17 	ldw	r4,-8(fp)
 401f8d0:	400fc580 	call	400fc58 <strlen>
 401f8d4:	10800044 	addi	r2,r2,1
 401f8d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401f8dc:	00000d06 	br	401f914 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 401f8e0:	e0bffc17 	ldw	r2,-16(fp)
 401f8e4:	10800217 	ldw	r2,8(r2)
 401f8e8:	e0fffd17 	ldw	r3,-12(fp)
 401f8ec:	180d883a 	mov	r6,r3
 401f8f0:	e17ffe17 	ldw	r5,-8(fp)
 401f8f4:	1009883a 	mov	r4,r2
 401f8f8:	40206c00 	call	40206c0 <memcmp>
 401f8fc:	1000021e 	bne	r2,zero,401f908 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 401f900:	e0bffc17 	ldw	r2,-16(fp)
 401f904:	00000706 	br	401f924 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401f908:	e0bffc17 	ldw	r2,-16(fp)
 401f90c:	10800017 	ldw	r2,0(r2)
 401f910:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401f914:	e0fffc17 	ldw	r3,-16(fp)
 401f918:	e0bfff17 	ldw	r2,-4(fp)
 401f91c:	18bff01e 	bne	r3,r2,401f8e0 <__alt_mem_onchip_memory2_0+0xfc01e640>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 401f920:	0005883a 	mov	r2,zero
}
 401f924:	e037883a 	mov	sp,fp
 401f928:	dfc00117 	ldw	ra,4(sp)
 401f92c:	df000017 	ldw	fp,0(sp)
 401f930:	dec00204 	addi	sp,sp,8
 401f934:	f800283a 	ret

0401f938 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 401f938:	deffff04 	addi	sp,sp,-4
 401f93c:	df000015 	stw	fp,0(sp)
 401f940:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 401f944:	0001883a 	nop
 401f948:	e037883a 	mov	sp,fp
 401f94c:	df000017 	ldw	fp,0(sp)
 401f950:	dec00104 	addi	sp,sp,4
 401f954:	f800283a 	ret

0401f958 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401f958:	defff904 	addi	sp,sp,-28
 401f95c:	dfc00615 	stw	ra,24(sp)
 401f960:	df000515 	stw	fp,20(sp)
 401f964:	df000504 	addi	fp,sp,20
 401f968:	e13ffc15 	stw	r4,-16(fp)
 401f96c:	e17ffd15 	stw	r5,-12(fp)
 401f970:	e1bffe15 	stw	r6,-8(fp)
 401f974:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 401f978:	e0800217 	ldw	r2,8(fp)
 401f97c:	d8800015 	stw	r2,0(sp)
 401f980:	e1ffff17 	ldw	r7,-4(fp)
 401f984:	e1bffe17 	ldw	r6,-8(fp)
 401f988:	e17ffd17 	ldw	r5,-12(fp)
 401f98c:	e13ffc17 	ldw	r4,-16(fp)
 401f990:	401fb080 	call	401fb08 <alt_iic_isr_register>
}  
 401f994:	e037883a 	mov	sp,fp
 401f998:	dfc00117 	ldw	ra,4(sp)
 401f99c:	df000017 	ldw	fp,0(sp)
 401f9a0:	dec00204 	addi	sp,sp,8
 401f9a4:	f800283a 	ret

0401f9a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 401f9a8:	defff904 	addi	sp,sp,-28
 401f9ac:	df000615 	stw	fp,24(sp)
 401f9b0:	df000604 	addi	fp,sp,24
 401f9b4:	e13ffe15 	stw	r4,-8(fp)
 401f9b8:	e17fff15 	stw	r5,-4(fp)
 401f9bc:	e0bfff17 	ldw	r2,-4(fp)
 401f9c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f9c4:	0005303a 	rdctl	r2,status
 401f9c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f9cc:	e0fffb17 	ldw	r3,-20(fp)
 401f9d0:	00bfff84 	movi	r2,-2
 401f9d4:	1884703a 	and	r2,r3,r2
 401f9d8:	1001703a 	wrctl	status,r2
  
  return context;
 401f9dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401f9e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 401f9e4:	00c00044 	movi	r3,1
 401f9e8:	e0bffa17 	ldw	r2,-24(fp)
 401f9ec:	1884983a 	sll	r2,r3,r2
 401f9f0:	1007883a 	mov	r3,r2
 401f9f4:	d0b24617 	ldw	r2,-14056(gp)
 401f9f8:	1884b03a 	or	r2,r3,r2
 401f9fc:	d0b24615 	stw	r2,-14056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401fa00:	d0b24617 	ldw	r2,-14056(gp)
 401fa04:	100170fa 	wrctl	ienable,r2
 401fa08:	e0bffc17 	ldw	r2,-16(fp)
 401fa0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401fa10:	e0bffd17 	ldw	r2,-12(fp)
 401fa14:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401fa18:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 401fa1c:	0001883a 	nop
}
 401fa20:	e037883a 	mov	sp,fp
 401fa24:	df000017 	ldw	fp,0(sp)
 401fa28:	dec00104 	addi	sp,sp,4
 401fa2c:	f800283a 	ret

0401fa30 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 401fa30:	defff904 	addi	sp,sp,-28
 401fa34:	df000615 	stw	fp,24(sp)
 401fa38:	df000604 	addi	fp,sp,24
 401fa3c:	e13ffe15 	stw	r4,-8(fp)
 401fa40:	e17fff15 	stw	r5,-4(fp)
 401fa44:	e0bfff17 	ldw	r2,-4(fp)
 401fa48:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401fa4c:	0005303a 	rdctl	r2,status
 401fa50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401fa54:	e0fffb17 	ldw	r3,-20(fp)
 401fa58:	00bfff84 	movi	r2,-2
 401fa5c:	1884703a 	and	r2,r3,r2
 401fa60:	1001703a 	wrctl	status,r2
  
  return context;
 401fa64:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401fa68:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 401fa6c:	00c00044 	movi	r3,1
 401fa70:	e0bffa17 	ldw	r2,-24(fp)
 401fa74:	1884983a 	sll	r2,r3,r2
 401fa78:	0084303a 	nor	r2,zero,r2
 401fa7c:	1007883a 	mov	r3,r2
 401fa80:	d0b24617 	ldw	r2,-14056(gp)
 401fa84:	1884703a 	and	r2,r3,r2
 401fa88:	d0b24615 	stw	r2,-14056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401fa8c:	d0b24617 	ldw	r2,-14056(gp)
 401fa90:	100170fa 	wrctl	ienable,r2
 401fa94:	e0bffc17 	ldw	r2,-16(fp)
 401fa98:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401fa9c:	e0bffd17 	ldw	r2,-12(fp)
 401faa0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401faa4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 401faa8:	0001883a 	nop
}
 401faac:	e037883a 	mov	sp,fp
 401fab0:	df000017 	ldw	fp,0(sp)
 401fab4:	dec00104 	addi	sp,sp,4
 401fab8:	f800283a 	ret

0401fabc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401fabc:	defffc04 	addi	sp,sp,-16
 401fac0:	df000315 	stw	fp,12(sp)
 401fac4:	df000304 	addi	fp,sp,12
 401fac8:	e13ffe15 	stw	r4,-8(fp)
 401facc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 401fad0:	000530fa 	rdctl	r2,ienable
 401fad4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 401fad8:	00c00044 	movi	r3,1
 401fadc:	e0bfff17 	ldw	r2,-4(fp)
 401fae0:	1884983a 	sll	r2,r3,r2
 401fae4:	1007883a 	mov	r3,r2
 401fae8:	e0bffd17 	ldw	r2,-12(fp)
 401faec:	1884703a 	and	r2,r3,r2
 401faf0:	1004c03a 	cmpne	r2,r2,zero
 401faf4:	10803fcc 	andi	r2,r2,255
}
 401faf8:	e037883a 	mov	sp,fp
 401fafc:	df000017 	ldw	fp,0(sp)
 401fb00:	dec00104 	addi	sp,sp,4
 401fb04:	f800283a 	ret

0401fb08 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401fb08:	defff504 	addi	sp,sp,-44
 401fb0c:	dfc00a15 	stw	ra,40(sp)
 401fb10:	df000915 	stw	fp,36(sp)
 401fb14:	df000904 	addi	fp,sp,36
 401fb18:	e13ffc15 	stw	r4,-16(fp)
 401fb1c:	e17ffd15 	stw	r5,-12(fp)
 401fb20:	e1bffe15 	stw	r6,-8(fp)
 401fb24:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 401fb28:	00bffa84 	movi	r2,-22
 401fb2c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 401fb30:	e0bffd17 	ldw	r2,-12(fp)
 401fb34:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401fb38:	e0bff817 	ldw	r2,-32(fp)
 401fb3c:	10800808 	cmpgei	r2,r2,32
 401fb40:	1000271e 	bne	r2,zero,401fbe0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401fb44:	0005303a 	rdctl	r2,status
 401fb48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401fb4c:	e0fffb17 	ldw	r3,-20(fp)
 401fb50:	00bfff84 	movi	r2,-2
 401fb54:	1884703a 	and	r2,r3,r2
 401fb58:	1001703a 	wrctl	status,r2
  
  return context;
 401fb5c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401fb60:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 401fb64:	008100f4 	movhi	r2,1027
 401fb68:	10b86204 	addi	r2,r2,-7800
 401fb6c:	e0fff817 	ldw	r3,-32(fp)
 401fb70:	180690fa 	slli	r3,r3,3
 401fb74:	10c5883a 	add	r2,r2,r3
 401fb78:	e0fffe17 	ldw	r3,-8(fp)
 401fb7c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 401fb80:	008100f4 	movhi	r2,1027
 401fb84:	10b86204 	addi	r2,r2,-7800
 401fb88:	e0fff817 	ldw	r3,-32(fp)
 401fb8c:	180690fa 	slli	r3,r3,3
 401fb90:	10c5883a 	add	r2,r2,r3
 401fb94:	10800104 	addi	r2,r2,4
 401fb98:	e0ffff17 	ldw	r3,-4(fp)
 401fb9c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401fba0:	e0bffe17 	ldw	r2,-8(fp)
 401fba4:	10000526 	beq	r2,zero,401fbbc <alt_iic_isr_register+0xb4>
 401fba8:	e0bff817 	ldw	r2,-32(fp)
 401fbac:	100b883a 	mov	r5,r2
 401fbb0:	e13ffc17 	ldw	r4,-16(fp)
 401fbb4:	401f9a80 	call	401f9a8 <alt_ic_irq_enable>
 401fbb8:	00000406 	br	401fbcc <alt_iic_isr_register+0xc4>
 401fbbc:	e0bff817 	ldw	r2,-32(fp)
 401fbc0:	100b883a 	mov	r5,r2
 401fbc4:	e13ffc17 	ldw	r4,-16(fp)
 401fbc8:	401fa300 	call	401fa30 <alt_ic_irq_disable>
 401fbcc:	e0bff715 	stw	r2,-36(fp)
 401fbd0:	e0bffa17 	ldw	r2,-24(fp)
 401fbd4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401fbd8:	e0bff917 	ldw	r2,-28(fp)
 401fbdc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 401fbe0:	e0bff717 	ldw	r2,-36(fp)
}
 401fbe4:	e037883a 	mov	sp,fp
 401fbe8:	dfc00117 	ldw	ra,4(sp)
 401fbec:	df000017 	ldw	fp,0(sp)
 401fbf0:	dec00204 	addi	sp,sp,8
 401fbf4:	f800283a 	ret

0401fbf8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401fbf8:	defff804 	addi	sp,sp,-32
 401fbfc:	dfc00715 	stw	ra,28(sp)
 401fc00:	df000615 	stw	fp,24(sp)
 401fc04:	dc000515 	stw	r16,20(sp)
 401fc08:	df000604 	addi	fp,sp,24
 401fc0c:	e13ffb15 	stw	r4,-20(fp)
 401fc10:	e17ffc15 	stw	r5,-16(fp)
 401fc14:	e1bffd15 	stw	r6,-12(fp)
 401fc18:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 401fc1c:	e1bffe17 	ldw	r6,-8(fp)
 401fc20:	e17ffd17 	ldw	r5,-12(fp)
 401fc24:	e13ffc17 	ldw	r4,-16(fp)
 401fc28:	401fe800 	call	401fe80 <open>
 401fc2c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 401fc30:	e0bffa17 	ldw	r2,-24(fp)
 401fc34:	10002216 	blt	r2,zero,401fcc0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 401fc38:	040100f4 	movhi	r16,1027
 401fc3c:	84215004 	addi	r16,r16,-31424
 401fc40:	e0bffa17 	ldw	r2,-24(fp)
 401fc44:	01400304 	movi	r5,12
 401fc48:	1009883a 	mov	r4,r2
 401fc4c:	400dae00 	call	400dae0 <__mulsi3>
 401fc50:	8085883a 	add	r2,r16,r2
 401fc54:	10c00017 	ldw	r3,0(r2)
 401fc58:	e0bffb17 	ldw	r2,-20(fp)
 401fc5c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401fc60:	040100f4 	movhi	r16,1027
 401fc64:	84215004 	addi	r16,r16,-31424
 401fc68:	e0bffa17 	ldw	r2,-24(fp)
 401fc6c:	01400304 	movi	r5,12
 401fc70:	1009883a 	mov	r4,r2
 401fc74:	400dae00 	call	400dae0 <__mulsi3>
 401fc78:	8085883a 	add	r2,r16,r2
 401fc7c:	10800104 	addi	r2,r2,4
 401fc80:	10c00017 	ldw	r3,0(r2)
 401fc84:	e0bffb17 	ldw	r2,-20(fp)
 401fc88:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401fc8c:	040100f4 	movhi	r16,1027
 401fc90:	84215004 	addi	r16,r16,-31424
 401fc94:	e0bffa17 	ldw	r2,-24(fp)
 401fc98:	01400304 	movi	r5,12
 401fc9c:	1009883a 	mov	r4,r2
 401fca0:	400dae00 	call	400dae0 <__mulsi3>
 401fca4:	8085883a 	add	r2,r16,r2
 401fca8:	10800204 	addi	r2,r2,8
 401fcac:	10c00017 	ldw	r3,0(r2)
 401fcb0:	e0bffb17 	ldw	r2,-20(fp)
 401fcb4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401fcb8:	e13ffa17 	ldw	r4,-24(fp)
 401fcbc:	401c6c00 	call	401c6c0 <alt_release_fd>
  }
} 
 401fcc0:	0001883a 	nop
 401fcc4:	e6ffff04 	addi	sp,fp,-4
 401fcc8:	dfc00217 	ldw	ra,8(sp)
 401fccc:	df000117 	ldw	fp,4(sp)
 401fcd0:	dc000017 	ldw	r16,0(sp)
 401fcd4:	dec00304 	addi	sp,sp,12
 401fcd8:	f800283a 	ret

0401fcdc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401fcdc:	defffb04 	addi	sp,sp,-20
 401fce0:	dfc00415 	stw	ra,16(sp)
 401fce4:	df000315 	stw	fp,12(sp)
 401fce8:	df000304 	addi	fp,sp,12
 401fcec:	e13ffd15 	stw	r4,-12(fp)
 401fcf0:	e17ffe15 	stw	r5,-8(fp)
 401fcf4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401fcf8:	01c07fc4 	movi	r7,511
 401fcfc:	01800044 	movi	r6,1
 401fd00:	e17ffd17 	ldw	r5,-12(fp)
 401fd04:	010100f4 	movhi	r4,1027
 401fd08:	21215304 	addi	r4,r4,-31412
 401fd0c:	401fbf80 	call	401fbf8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 401fd10:	01c07fc4 	movi	r7,511
 401fd14:	000d883a 	mov	r6,zero
 401fd18:	e17ffe17 	ldw	r5,-8(fp)
 401fd1c:	010100f4 	movhi	r4,1027
 401fd20:	21215004 	addi	r4,r4,-31424
 401fd24:	401fbf80 	call	401fbf8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401fd28:	01c07fc4 	movi	r7,511
 401fd2c:	01800044 	movi	r6,1
 401fd30:	e17fff17 	ldw	r5,-4(fp)
 401fd34:	010100f4 	movhi	r4,1027
 401fd38:	21215604 	addi	r4,r4,-31400
 401fd3c:	401fbf80 	call	401fbf8 <alt_open_fd>
}  
 401fd40:	0001883a 	nop
 401fd44:	e037883a 	mov	sp,fp
 401fd48:	dfc00117 	ldw	ra,4(sp)
 401fd4c:	df000017 	ldw	fp,0(sp)
 401fd50:	dec00204 	addi	sp,sp,8
 401fd54:	f800283a 	ret

0401fd58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401fd58:	defffe04 	addi	sp,sp,-8
 401fd5c:	dfc00115 	stw	ra,4(sp)
 401fd60:	df000015 	stw	fp,0(sp)
 401fd64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401fd68:	d0a5b717 	ldw	r2,-26916(gp)
 401fd6c:	10000326 	beq	r2,zero,401fd7c <alt_get_errno+0x24>
 401fd70:	d0a5b717 	ldw	r2,-26916(gp)
 401fd74:	103ee83a 	callr	r2
 401fd78:	00000106 	br	401fd80 <alt_get_errno+0x28>
 401fd7c:	d0b23f04 	addi	r2,gp,-14084
}
 401fd80:	e037883a 	mov	sp,fp
 401fd84:	dfc00117 	ldw	ra,4(sp)
 401fd88:	df000017 	ldw	fp,0(sp)
 401fd8c:	dec00204 	addi	sp,sp,8
 401fd90:	f800283a 	ret

0401fd94 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 401fd94:	defffb04 	addi	sp,sp,-20
 401fd98:	dfc00415 	stw	ra,16(sp)
 401fd9c:	df000315 	stw	fp,12(sp)
 401fda0:	dc000215 	stw	r16,8(sp)
 401fda4:	df000304 	addi	fp,sp,12
 401fda8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401fdac:	e0bffe17 	ldw	r2,-8(fp)
 401fdb0:	10800217 	ldw	r2,8(r2)
 401fdb4:	10d00034 	orhi	r3,r2,16384
 401fdb8:	e0bffe17 	ldw	r2,-8(fp)
 401fdbc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401fdc0:	e03ffd15 	stw	zero,-12(fp)
 401fdc4:	00002306 	br	401fe54 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401fdc8:	040100f4 	movhi	r16,1027
 401fdcc:	84215004 	addi	r16,r16,-31424
 401fdd0:	e0bffd17 	ldw	r2,-12(fp)
 401fdd4:	01400304 	movi	r5,12
 401fdd8:	1009883a 	mov	r4,r2
 401fddc:	400dae00 	call	400dae0 <__mulsi3>
 401fde0:	8085883a 	add	r2,r16,r2
 401fde4:	10c00017 	ldw	r3,0(r2)
 401fde8:	e0bffe17 	ldw	r2,-8(fp)
 401fdec:	10800017 	ldw	r2,0(r2)
 401fdf0:	1880151e 	bne	r3,r2,401fe48 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401fdf4:	040100f4 	movhi	r16,1027
 401fdf8:	84215004 	addi	r16,r16,-31424
 401fdfc:	e0bffd17 	ldw	r2,-12(fp)
 401fe00:	01400304 	movi	r5,12
 401fe04:	1009883a 	mov	r4,r2
 401fe08:	400dae00 	call	400dae0 <__mulsi3>
 401fe0c:	8085883a 	add	r2,r16,r2
 401fe10:	10800204 	addi	r2,r2,8
 401fe14:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401fe18:	10000b0e 	bge	r2,zero,401fe48 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 401fe1c:	01400304 	movi	r5,12
 401fe20:	e13ffd17 	ldw	r4,-12(fp)
 401fe24:	400dae00 	call	400dae0 <__mulsi3>
 401fe28:	1007883a 	mov	r3,r2
 401fe2c:	008100f4 	movhi	r2,1027
 401fe30:	10a15004 	addi	r2,r2,-31424
 401fe34:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401fe38:	e0bffe17 	ldw	r2,-8(fp)
 401fe3c:	18800226 	beq	r3,r2,401fe48 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401fe40:	00bffcc4 	movi	r2,-13
 401fe44:	00000806 	br	401fe68 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401fe48:	e0bffd17 	ldw	r2,-12(fp)
 401fe4c:	10800044 	addi	r2,r2,1
 401fe50:	e0bffd15 	stw	r2,-12(fp)
 401fe54:	d0a5b617 	ldw	r2,-26920(gp)
 401fe58:	1007883a 	mov	r3,r2
 401fe5c:	e0bffd17 	ldw	r2,-12(fp)
 401fe60:	18bfd92e 	bgeu	r3,r2,401fdc8 <__alt_mem_onchip_memory2_0+0xfc01eb28>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 401fe64:	0005883a 	mov	r2,zero
}
 401fe68:	e6ffff04 	addi	sp,fp,-4
 401fe6c:	dfc00217 	ldw	ra,8(sp)
 401fe70:	df000117 	ldw	fp,4(sp)
 401fe74:	dc000017 	ldw	r16,0(sp)
 401fe78:	dec00304 	addi	sp,sp,12
 401fe7c:	f800283a 	ret

0401fe80 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401fe80:	defff604 	addi	sp,sp,-40
 401fe84:	dfc00915 	stw	ra,36(sp)
 401fe88:	df000815 	stw	fp,32(sp)
 401fe8c:	df000804 	addi	fp,sp,32
 401fe90:	e13ffd15 	stw	r4,-12(fp)
 401fe94:	e17ffe15 	stw	r5,-8(fp)
 401fe98:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401fe9c:	00bfffc4 	movi	r2,-1
 401fea0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 401fea4:	00bffb44 	movi	r2,-19
 401fea8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401feac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401feb0:	d165b404 	addi	r5,gp,-26928
 401feb4:	e13ffd17 	ldw	r4,-12(fp)
 401feb8:	401f8a80 	call	401f8a8 <alt_find_dev>
 401febc:	e0bff815 	stw	r2,-32(fp)
 401fec0:	e0bff817 	ldw	r2,-32(fp)
 401fec4:	1000051e 	bne	r2,zero,401fedc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401fec8:	e13ffd17 	ldw	r4,-12(fp)
 401fecc:	402040c0 	call	402040c <alt_find_file>
 401fed0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 401fed4:	00800044 	movi	r2,1
 401fed8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401fedc:	e0bff817 	ldw	r2,-32(fp)
 401fee0:	10002b26 	beq	r2,zero,401ff90 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401fee4:	e13ff817 	ldw	r4,-32(fp)
 401fee8:	40205140 	call	4020514 <alt_get_fd>
 401feec:	e0bff915 	stw	r2,-28(fp)
 401fef0:	e0bff917 	ldw	r2,-28(fp)
 401fef4:	1000030e 	bge	r2,zero,401ff04 <open+0x84>
    {
      status = index;
 401fef8:	e0bff917 	ldw	r2,-28(fp)
 401fefc:	e0bffa15 	stw	r2,-24(fp)
 401ff00:	00002506 	br	401ff98 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 401ff04:	01400304 	movi	r5,12
 401ff08:	e13ff917 	ldw	r4,-28(fp)
 401ff0c:	400dae00 	call	400dae0 <__mulsi3>
 401ff10:	1007883a 	mov	r3,r2
 401ff14:	008100f4 	movhi	r2,1027
 401ff18:	10a15004 	addi	r2,r2,-31424
 401ff1c:	1885883a 	add	r2,r3,r2
 401ff20:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401ff24:	e0fffe17 	ldw	r3,-8(fp)
 401ff28:	00900034 	movhi	r2,16384
 401ff2c:	10bfffc4 	addi	r2,r2,-1
 401ff30:	1886703a 	and	r3,r3,r2
 401ff34:	e0bffc17 	ldw	r2,-16(fp)
 401ff38:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401ff3c:	e0bffb17 	ldw	r2,-20(fp)
 401ff40:	1000051e 	bne	r2,zero,401ff58 <open+0xd8>
 401ff44:	e13ffc17 	ldw	r4,-16(fp)
 401ff48:	401fd940 	call	401fd94 <alt_file_locked>
 401ff4c:	e0bffa15 	stw	r2,-24(fp)
 401ff50:	e0bffa17 	ldw	r2,-24(fp)
 401ff54:	10001016 	blt	r2,zero,401ff98 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401ff58:	e0bff817 	ldw	r2,-32(fp)
 401ff5c:	10800317 	ldw	r2,12(r2)
 401ff60:	10000826 	beq	r2,zero,401ff84 <open+0x104>
 401ff64:	e0bff817 	ldw	r2,-32(fp)
 401ff68:	10800317 	ldw	r2,12(r2)
 401ff6c:	e1ffff17 	ldw	r7,-4(fp)
 401ff70:	e1bffe17 	ldw	r6,-8(fp)
 401ff74:	e17ffd17 	ldw	r5,-12(fp)
 401ff78:	e13ffc17 	ldw	r4,-16(fp)
 401ff7c:	103ee83a 	callr	r2
 401ff80:	00000106 	br	401ff88 <open+0x108>
 401ff84:	0005883a 	mov	r2,zero
 401ff88:	e0bffa15 	stw	r2,-24(fp)
 401ff8c:	00000206 	br	401ff98 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401ff90:	00bffb44 	movi	r2,-19
 401ff94:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401ff98:	e0bffa17 	ldw	r2,-24(fp)
 401ff9c:	1000090e 	bge	r2,zero,401ffc4 <open+0x144>
  {
    alt_release_fd (index);  
 401ffa0:	e13ff917 	ldw	r4,-28(fp)
 401ffa4:	401c6c00 	call	401c6c0 <alt_release_fd>
    ALT_ERRNO = -status;
 401ffa8:	401fd580 	call	401fd58 <alt_get_errno>
 401ffac:	1007883a 	mov	r3,r2
 401ffb0:	e0bffa17 	ldw	r2,-24(fp)
 401ffb4:	0085c83a 	sub	r2,zero,r2
 401ffb8:	18800015 	stw	r2,0(r3)
    return -1;
 401ffbc:	00bfffc4 	movi	r2,-1
 401ffc0:	00000106 	br	401ffc8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 401ffc4:	e0bff917 	ldw	r2,-28(fp)
}
 401ffc8:	e037883a 	mov	sp,fp
 401ffcc:	dfc00117 	ldw	ra,4(sp)
 401ffd0:	df000017 	ldw	fp,0(sp)
 401ffd4:	dec00204 	addi	sp,sp,8
 401ffd8:	f800283a 	ret

0401ffdc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 401ffdc:	defff204 	addi	sp,sp,-56
 401ffe0:	dfc00a15 	stw	ra,40(sp)
 401ffe4:	df000915 	stw	fp,36(sp)
 401ffe8:	df000904 	addi	fp,sp,36
 401ffec:	e13fff15 	stw	r4,-4(fp)
 401fff0:	e1400215 	stw	r5,8(fp)
 401fff4:	e1800315 	stw	r6,12(fp)
 401fff8:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 401fffc:	e0800204 	addi	r2,fp,8
 4020000:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 4020004:	e0bfff17 	ldw	r2,-4(fp)
 4020008:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 402000c:	00006f06 	br	40201cc <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 4020010:	e0bff807 	ldb	r2,-32(fp)
 4020014:	10800960 	cmpeqi	r2,r2,37
 4020018:	1000041e 	bne	r2,zero,402002c <alt_printf+0x50>
        {
            alt_putchar(c);
 402001c:	e0bff807 	ldb	r2,-32(fp)
 4020020:	1009883a 	mov	r4,r2
 4020024:	40202080 	call	4020208 <alt_putchar>
 4020028:	00006806 	br	40201cc <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 402002c:	e0bff717 	ldw	r2,-36(fp)
 4020030:	10c00044 	addi	r3,r2,1
 4020034:	e0fff715 	stw	r3,-36(fp)
 4020038:	10800003 	ldbu	r2,0(r2)
 402003c:	e0bff805 	stb	r2,-32(fp)
 4020040:	e0bff807 	ldb	r2,-32(fp)
 4020044:	10006926 	beq	r2,zero,40201ec <alt_printf+0x210>
            {
                if (c == '%')
 4020048:	e0bff807 	ldb	r2,-32(fp)
 402004c:	10800958 	cmpnei	r2,r2,37
 4020050:	1000041e 	bne	r2,zero,4020064 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 4020054:	e0bff807 	ldb	r2,-32(fp)
 4020058:	1009883a 	mov	r4,r2
 402005c:	40202080 	call	4020208 <alt_putchar>
 4020060:	00005a06 	br	40201cc <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 4020064:	e0bff807 	ldb	r2,-32(fp)
 4020068:	108018d8 	cmpnei	r2,r2,99
 402006c:	1000081e 	bne	r2,zero,4020090 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 4020070:	e0bffe17 	ldw	r2,-8(fp)
 4020074:	10c00104 	addi	r3,r2,4
 4020078:	e0fffe15 	stw	r3,-8(fp)
 402007c:	10800017 	ldw	r2,0(r2)
 4020080:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 4020084:	e13ffd17 	ldw	r4,-12(fp)
 4020088:	40202080 	call	4020208 <alt_putchar>
 402008c:	00004f06 	br	40201cc <alt_printf+0x1f0>
                }
                else if (c == 'x')
 4020090:	e0bff807 	ldb	r2,-32(fp)
 4020094:	10801e18 	cmpnei	r2,r2,120
 4020098:	1000341e 	bne	r2,zero,402016c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 402009c:	e0bffe17 	ldw	r2,-8(fp)
 40200a0:	10c00104 	addi	r3,r2,4
 40200a4:	e0fffe15 	stw	r3,-8(fp)
 40200a8:	10800017 	ldw	r2,0(r2)
 40200ac:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 40200b0:	e0bffb17 	ldw	r2,-20(fp)
 40200b4:	1000031e 	bne	r2,zero,40200c4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 40200b8:	01000c04 	movi	r4,48
 40200bc:	40202080 	call	4020208 <alt_putchar>
                        continue;
 40200c0:	00004206 	br	40201cc <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 40200c4:	00800704 	movi	r2,28
 40200c8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 40200cc:	00000306 	br	40200dc <alt_printf+0x100>
                        digit_shift -= 4;
 40200d0:	e0bff917 	ldw	r2,-28(fp)
 40200d4:	10bfff04 	addi	r2,r2,-4
 40200d8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 40200dc:	00c003c4 	movi	r3,15
 40200e0:	e0bff917 	ldw	r2,-28(fp)
 40200e4:	1884983a 	sll	r2,r3,r2
 40200e8:	1007883a 	mov	r3,r2
 40200ec:	e0bffb17 	ldw	r2,-20(fp)
 40200f0:	1884703a 	and	r2,r3,r2
 40200f4:	103ff626 	beq	r2,zero,40200d0 <__alt_mem_onchip_memory2_0+0xfc01ee30>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 40200f8:	00001906 	br	4020160 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 40200fc:	00c003c4 	movi	r3,15
 4020100:	e0bff917 	ldw	r2,-28(fp)
 4020104:	1884983a 	sll	r2,r3,r2
 4020108:	1007883a 	mov	r3,r2
 402010c:	e0bffb17 	ldw	r2,-20(fp)
 4020110:	1886703a 	and	r3,r3,r2
 4020114:	e0bff917 	ldw	r2,-28(fp)
 4020118:	1884d83a 	srl	r2,r3,r2
 402011c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 4020120:	e0bffc17 	ldw	r2,-16(fp)
 4020124:	108002a8 	cmpgeui	r2,r2,10
 4020128:	1000041e 	bne	r2,zero,402013c <alt_printf+0x160>
                            c = '0' + digit;
 402012c:	e0bffc17 	ldw	r2,-16(fp)
 4020130:	10800c04 	addi	r2,r2,48
 4020134:	e0bff805 	stb	r2,-32(fp)
 4020138:	00000306 	br	4020148 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 402013c:	e0bffc17 	ldw	r2,-16(fp)
 4020140:	108015c4 	addi	r2,r2,87
 4020144:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 4020148:	e0bff807 	ldb	r2,-32(fp)
 402014c:	1009883a 	mov	r4,r2
 4020150:	40202080 	call	4020208 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4020154:	e0bff917 	ldw	r2,-28(fp)
 4020158:	10bfff04 	addi	r2,r2,-4
 402015c:	e0bff915 	stw	r2,-28(fp)
 4020160:	e0bff917 	ldw	r2,-28(fp)
 4020164:	103fe50e 	bge	r2,zero,40200fc <__alt_mem_onchip_memory2_0+0xfc01ee5c>
 4020168:	00001806 	br	40201cc <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 402016c:	e0bff807 	ldb	r2,-32(fp)
 4020170:	10801cd8 	cmpnei	r2,r2,115
 4020174:	1000151e 	bne	r2,zero,40201cc <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 4020178:	e0bffe17 	ldw	r2,-8(fp)
 402017c:	10c00104 	addi	r3,r2,4
 4020180:	e0fffe15 	stw	r3,-8(fp)
 4020184:	10800017 	ldw	r2,0(r2)
 4020188:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 402018c:	00000906 	br	40201b4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 4020190:	e0bffa17 	ldw	r2,-24(fp)
 4020194:	10c00044 	addi	r3,r2,1
 4020198:	e0fffa15 	stw	r3,-24(fp)
 402019c:	10800003 	ldbu	r2,0(r2)
 40201a0:	10803fcc 	andi	r2,r2,255
 40201a4:	1080201c 	xori	r2,r2,128
 40201a8:	10bfe004 	addi	r2,r2,-128
 40201ac:	1009883a 	mov	r4,r2
 40201b0:	40202080 	call	4020208 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 40201b4:	e0bffa17 	ldw	r2,-24(fp)
 40201b8:	10800003 	ldbu	r2,0(r2)
 40201bc:	10803fcc 	andi	r2,r2,255
 40201c0:	1080201c 	xori	r2,r2,128
 40201c4:	10bfe004 	addi	r2,r2,-128
 40201c8:	103ff11e 	bne	r2,zero,4020190 <__alt_mem_onchip_memory2_0+0xfc01eef0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 40201cc:	e0bff717 	ldw	r2,-36(fp)
 40201d0:	10c00044 	addi	r3,r2,1
 40201d4:	e0fff715 	stw	r3,-36(fp)
 40201d8:	10800003 	ldbu	r2,0(r2)
 40201dc:	e0bff805 	stb	r2,-32(fp)
 40201e0:	e0bff807 	ldb	r2,-32(fp)
 40201e4:	103f8a1e 	bne	r2,zero,4020010 <__alt_mem_onchip_memory2_0+0xfc01ed70>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 40201e8:	00000106 	br	40201f0 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 40201ec:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 40201f0:	0001883a 	nop
 40201f4:	e037883a 	mov	sp,fp
 40201f8:	dfc00117 	ldw	ra,4(sp)
 40201fc:	df000017 	ldw	fp,0(sp)
 4020200:	dec00504 	addi	sp,sp,20
 4020204:	f800283a 	ret

04020208 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 4020208:	defffd04 	addi	sp,sp,-12
 402020c:	dfc00215 	stw	ra,8(sp)
 4020210:	df000115 	stw	fp,4(sp)
 4020214:	df000104 	addi	fp,sp,4
 4020218:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 402021c:	d0a5ad17 	ldw	r2,-26956(gp)
 4020220:	10800217 	ldw	r2,8(r2)
 4020224:	100b883a 	mov	r5,r2
 4020228:	e13fff17 	ldw	r4,-4(fp)
 402022c:	40161bc0 	call	40161bc <putc>
#endif
#endif
}
 4020230:	e037883a 	mov	sp,fp
 4020234:	dfc00117 	ldw	ra,4(sp)
 4020238:	df000017 	ldw	fp,0(sp)
 402023c:	dec00204 	addi	sp,sp,8
 4020240:	f800283a 	ret

04020244 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4020244:	defffa04 	addi	sp,sp,-24
 4020248:	df000515 	stw	fp,20(sp)
 402024c:	df000504 	addi	fp,sp,20
 4020250:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4020254:	0005303a 	rdctl	r2,status
 4020258:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402025c:	e0fffc17 	ldw	r3,-16(fp)
 4020260:	00bfff84 	movi	r2,-2
 4020264:	1884703a 	and	r2,r3,r2
 4020268:	1001703a 	wrctl	status,r2
  
  return context;
 402026c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4020270:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4020274:	e0bfff17 	ldw	r2,-4(fp)
 4020278:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 402027c:	e0bffd17 	ldw	r2,-12(fp)
 4020280:	10800017 	ldw	r2,0(r2)
 4020284:	e0fffd17 	ldw	r3,-12(fp)
 4020288:	18c00117 	ldw	r3,4(r3)
 402028c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4020290:	e0bffd17 	ldw	r2,-12(fp)
 4020294:	10800117 	ldw	r2,4(r2)
 4020298:	e0fffd17 	ldw	r3,-12(fp)
 402029c:	18c00017 	ldw	r3,0(r3)
 40202a0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 40202a4:	e0bffd17 	ldw	r2,-12(fp)
 40202a8:	e0fffd17 	ldw	r3,-12(fp)
 40202ac:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 40202b0:	e0bffd17 	ldw	r2,-12(fp)
 40202b4:	e0fffd17 	ldw	r3,-12(fp)
 40202b8:	10c00015 	stw	r3,0(r2)
 40202bc:	e0bffb17 	ldw	r2,-20(fp)
 40202c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40202c4:	e0bffe17 	ldw	r2,-8(fp)
 40202c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40202cc:	0001883a 	nop
 40202d0:	e037883a 	mov	sp,fp
 40202d4:	df000017 	ldw	fp,0(sp)
 40202d8:	dec00104 	addi	sp,sp,4
 40202dc:	f800283a 	ret

040202e0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40202e0:	defffb04 	addi	sp,sp,-20
 40202e4:	dfc00415 	stw	ra,16(sp)
 40202e8:	df000315 	stw	fp,12(sp)
 40202ec:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40202f0:	d0a5bc17 	ldw	r2,-26896(gp)
 40202f4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40202f8:	d0b24817 	ldw	r2,-14048(gp)
 40202fc:	10800044 	addi	r2,r2,1
 4020300:	d0b24815 	stw	r2,-14048(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4020304:	00002e06 	br	40203c0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4020308:	e0bffd17 	ldw	r2,-12(fp)
 402030c:	10800017 	ldw	r2,0(r2)
 4020310:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4020314:	e0bffd17 	ldw	r2,-12(fp)
 4020318:	10800403 	ldbu	r2,16(r2)
 402031c:	10803fcc 	andi	r2,r2,255
 4020320:	10000426 	beq	r2,zero,4020334 <alt_tick+0x54>
 4020324:	d0b24817 	ldw	r2,-14048(gp)
 4020328:	1000021e 	bne	r2,zero,4020334 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 402032c:	e0bffd17 	ldw	r2,-12(fp)
 4020330:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4020334:	e0bffd17 	ldw	r2,-12(fp)
 4020338:	10800217 	ldw	r2,8(r2)
 402033c:	d0f24817 	ldw	r3,-14048(gp)
 4020340:	18801d36 	bltu	r3,r2,40203b8 <alt_tick+0xd8>
 4020344:	e0bffd17 	ldw	r2,-12(fp)
 4020348:	10800403 	ldbu	r2,16(r2)
 402034c:	10803fcc 	andi	r2,r2,255
 4020350:	1000191e 	bne	r2,zero,40203b8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4020354:	e0bffd17 	ldw	r2,-12(fp)
 4020358:	10800317 	ldw	r2,12(r2)
 402035c:	e0fffd17 	ldw	r3,-12(fp)
 4020360:	18c00517 	ldw	r3,20(r3)
 4020364:	1809883a 	mov	r4,r3
 4020368:	103ee83a 	callr	r2
 402036c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4020370:	e0bfff17 	ldw	r2,-4(fp)
 4020374:	1000031e 	bne	r2,zero,4020384 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4020378:	e13ffd17 	ldw	r4,-12(fp)
 402037c:	40202440 	call	4020244 <alt_alarm_stop>
 4020380:	00000d06 	br	40203b8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4020384:	e0bffd17 	ldw	r2,-12(fp)
 4020388:	10c00217 	ldw	r3,8(r2)
 402038c:	e0bfff17 	ldw	r2,-4(fp)
 4020390:	1887883a 	add	r3,r3,r2
 4020394:	e0bffd17 	ldw	r2,-12(fp)
 4020398:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 402039c:	e0bffd17 	ldw	r2,-12(fp)
 40203a0:	10c00217 	ldw	r3,8(r2)
 40203a4:	d0b24817 	ldw	r2,-14048(gp)
 40203a8:	1880032e 	bgeu	r3,r2,40203b8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 40203ac:	e0bffd17 	ldw	r2,-12(fp)
 40203b0:	00c00044 	movi	r3,1
 40203b4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40203b8:	e0bffe17 	ldw	r2,-8(fp)
 40203bc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40203c0:	e0fffd17 	ldw	r3,-12(fp)
 40203c4:	d0a5bc04 	addi	r2,gp,-26896
 40203c8:	18bfcf1e 	bne	r3,r2,4020308 <__alt_mem_onchip_memory2_0+0xfc01f068>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 40203cc:	0001883a 	nop
}
 40203d0:	0001883a 	nop
 40203d4:	e037883a 	mov	sp,fp
 40203d8:	dfc00117 	ldw	ra,4(sp)
 40203dc:	df000017 	ldw	fp,0(sp)
 40203e0:	dec00204 	addi	sp,sp,8
 40203e4:	f800283a 	ret

040203e8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 40203e8:	deffff04 	addi	sp,sp,-4
 40203ec:	df000015 	stw	fp,0(sp)
 40203f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40203f4:	000170fa 	wrctl	ienable,zero
}
 40203f8:	0001883a 	nop
 40203fc:	e037883a 	mov	sp,fp
 4020400:	df000017 	ldw	fp,0(sp)
 4020404:	dec00104 	addi	sp,sp,4
 4020408:	f800283a 	ret

0402040c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 402040c:	defffb04 	addi	sp,sp,-20
 4020410:	dfc00415 	stw	ra,16(sp)
 4020414:	df000315 	stw	fp,12(sp)
 4020418:	df000304 	addi	fp,sp,12
 402041c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4020420:	d0a5b217 	ldw	r2,-26936(gp)
 4020424:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4020428:	00003106 	br	40204f0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 402042c:	e0bffd17 	ldw	r2,-12(fp)
 4020430:	10800217 	ldw	r2,8(r2)
 4020434:	1009883a 	mov	r4,r2
 4020438:	400fc580 	call	400fc58 <strlen>
 402043c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4020440:	e0bffd17 	ldw	r2,-12(fp)
 4020444:	10c00217 	ldw	r3,8(r2)
 4020448:	e0bffe17 	ldw	r2,-8(fp)
 402044c:	10bfffc4 	addi	r2,r2,-1
 4020450:	1885883a 	add	r2,r3,r2
 4020454:	10800003 	ldbu	r2,0(r2)
 4020458:	10803fcc 	andi	r2,r2,255
 402045c:	1080201c 	xori	r2,r2,128
 4020460:	10bfe004 	addi	r2,r2,-128
 4020464:	10800bd8 	cmpnei	r2,r2,47
 4020468:	1000031e 	bne	r2,zero,4020478 <alt_find_file+0x6c>
    {
      len -= 1;
 402046c:	e0bffe17 	ldw	r2,-8(fp)
 4020470:	10bfffc4 	addi	r2,r2,-1
 4020474:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4020478:	e0bffe17 	ldw	r2,-8(fp)
 402047c:	e0ffff17 	ldw	r3,-4(fp)
 4020480:	1885883a 	add	r2,r3,r2
 4020484:	10800003 	ldbu	r2,0(r2)
 4020488:	10803fcc 	andi	r2,r2,255
 402048c:	1080201c 	xori	r2,r2,128
 4020490:	10bfe004 	addi	r2,r2,-128
 4020494:	10800be0 	cmpeqi	r2,r2,47
 4020498:	1000081e 	bne	r2,zero,40204bc <alt_find_file+0xb0>
 402049c:	e0bffe17 	ldw	r2,-8(fp)
 40204a0:	e0ffff17 	ldw	r3,-4(fp)
 40204a4:	1885883a 	add	r2,r3,r2
 40204a8:	10800003 	ldbu	r2,0(r2)
 40204ac:	10803fcc 	andi	r2,r2,255
 40204b0:	1080201c 	xori	r2,r2,128
 40204b4:	10bfe004 	addi	r2,r2,-128
 40204b8:	10000a1e 	bne	r2,zero,40204e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 40204bc:	e0bffd17 	ldw	r2,-12(fp)
 40204c0:	10800217 	ldw	r2,8(r2)
 40204c4:	e0fffe17 	ldw	r3,-8(fp)
 40204c8:	180d883a 	mov	r6,r3
 40204cc:	e17fff17 	ldw	r5,-4(fp)
 40204d0:	1009883a 	mov	r4,r2
 40204d4:	40206c00 	call	40206c0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40204d8:	1000021e 	bne	r2,zero,40204e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40204dc:	e0bffd17 	ldw	r2,-12(fp)
 40204e0:	00000706 	br	4020500 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 40204e4:	e0bffd17 	ldw	r2,-12(fp)
 40204e8:	10800017 	ldw	r2,0(r2)
 40204ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40204f0:	e0fffd17 	ldw	r3,-12(fp)
 40204f4:	d0a5b204 	addi	r2,gp,-26936
 40204f8:	18bfcc1e 	bne	r3,r2,402042c <__alt_mem_onchip_memory2_0+0xfc01f18c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40204fc:	0005883a 	mov	r2,zero
}
 4020500:	e037883a 	mov	sp,fp
 4020504:	dfc00117 	ldw	ra,4(sp)
 4020508:	df000017 	ldw	fp,0(sp)
 402050c:	dec00204 	addi	sp,sp,8
 4020510:	f800283a 	ret

04020514 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4020514:	defffa04 	addi	sp,sp,-24
 4020518:	dfc00515 	stw	ra,20(sp)
 402051c:	df000415 	stw	fp,16(sp)
 4020520:	dc000315 	stw	r16,12(sp)
 4020524:	df000404 	addi	fp,sp,16
 4020528:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 402052c:	00bffa04 	movi	r2,-24
 4020530:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4020534:	e03ffc15 	stw	zero,-16(fp)
 4020538:	00001d06 	br	40205b0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 402053c:	040100f4 	movhi	r16,1027
 4020540:	84215004 	addi	r16,r16,-31424
 4020544:	e0bffc17 	ldw	r2,-16(fp)
 4020548:	01400304 	movi	r5,12
 402054c:	1009883a 	mov	r4,r2
 4020550:	400dae00 	call	400dae0 <__mulsi3>
 4020554:	8085883a 	add	r2,r16,r2
 4020558:	10800017 	ldw	r2,0(r2)
 402055c:	1000111e 	bne	r2,zero,40205a4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4020560:	040100f4 	movhi	r16,1027
 4020564:	84215004 	addi	r16,r16,-31424
 4020568:	e0bffc17 	ldw	r2,-16(fp)
 402056c:	01400304 	movi	r5,12
 4020570:	1009883a 	mov	r4,r2
 4020574:	400dae00 	call	400dae0 <__mulsi3>
 4020578:	8085883a 	add	r2,r16,r2
 402057c:	e0fffe17 	ldw	r3,-8(fp)
 4020580:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4020584:	d0e5b617 	ldw	r3,-26920(gp)
 4020588:	e0bffc17 	ldw	r2,-16(fp)
 402058c:	1880020e 	bge	r3,r2,4020598 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4020590:	e0bffc17 	ldw	r2,-16(fp)
 4020594:	d0a5b615 	stw	r2,-26920(gp)
      }
      rc = i;
 4020598:	e0bffc17 	ldw	r2,-16(fp)
 402059c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 40205a0:	00000606 	br	40205bc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40205a4:	e0bffc17 	ldw	r2,-16(fp)
 40205a8:	10800044 	addi	r2,r2,1
 40205ac:	e0bffc15 	stw	r2,-16(fp)
 40205b0:	e0bffc17 	ldw	r2,-16(fp)
 40205b4:	10800810 	cmplti	r2,r2,32
 40205b8:	103fe01e 	bne	r2,zero,402053c <__alt_mem_onchip_memory2_0+0xfc01f29c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40205bc:	e0bffd17 	ldw	r2,-12(fp)
}
 40205c0:	e6ffff04 	addi	sp,fp,-4
 40205c4:	dfc00217 	ldw	ra,8(sp)
 40205c8:	df000117 	ldw	fp,4(sp)
 40205cc:	dc000017 	ldw	r16,0(sp)
 40205d0:	dec00304 	addi	sp,sp,12
 40205d4:	f800283a 	ret

040205d8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 40205d8:	defffe04 	addi	sp,sp,-8
 40205dc:	df000115 	stw	fp,4(sp)
 40205e0:	df000104 	addi	fp,sp,4
 40205e4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 40205e8:	e0bfff17 	ldw	r2,-4(fp)
 40205ec:	10bffe84 	addi	r2,r2,-6
 40205f0:	10c00428 	cmpgeui	r3,r2,16
 40205f4:	18001a1e 	bne	r3,zero,4020660 <alt_exception_cause_generated_bad_addr+0x88>
 40205f8:	100690ba 	slli	r3,r2,2
 40205fc:	008100b4 	movhi	r2,1026
 4020600:	10818404 	addi	r2,r2,1552
 4020604:	1885883a 	add	r2,r3,r2
 4020608:	10800017 	ldw	r2,0(r2)
 402060c:	1000683a 	jmp	r2
 4020610:	04020650 	cmplti	r16,zero,2073
 4020614:	04020650 	cmplti	r16,zero,2073
 4020618:	04020660 	cmpeqi	r16,zero,2073
 402061c:	04020660 	cmpeqi	r16,zero,2073
 4020620:	04020660 	cmpeqi	r16,zero,2073
 4020624:	04020650 	cmplti	r16,zero,2073
 4020628:	04020658 	cmpnei	r16,zero,2073
 402062c:	04020660 	cmpeqi	r16,zero,2073
 4020630:	04020650 	cmplti	r16,zero,2073
 4020634:	04020650 	cmplti	r16,zero,2073
 4020638:	04020660 	cmpeqi	r16,zero,2073
 402063c:	04020650 	cmplti	r16,zero,2073
 4020640:	04020658 	cmpnei	r16,zero,2073
 4020644:	04020660 	cmpeqi	r16,zero,2073
 4020648:	04020660 	cmpeqi	r16,zero,2073
 402064c:	04020650 	cmplti	r16,zero,2073
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4020650:	00800044 	movi	r2,1
 4020654:	00000306 	br	4020664 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4020658:	0005883a 	mov	r2,zero
 402065c:	00000106 	br	4020664 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4020660:	0005883a 	mov	r2,zero
  }
}
 4020664:	e037883a 	mov	sp,fp
 4020668:	df000017 	ldw	fp,0(sp)
 402066c:	dec00104 	addi	sp,sp,4
 4020670:	f800283a 	ret

04020674 <atexit>:
 4020674:	200b883a 	mov	r5,r4
 4020678:	000f883a 	mov	r7,zero
 402067c:	000d883a 	mov	r6,zero
 4020680:	0009883a 	mov	r4,zero
 4020684:	402073c1 	jmpi	402073c <__register_exitproc>

04020688 <exit>:
 4020688:	defffe04 	addi	sp,sp,-8
 402068c:	000b883a 	mov	r5,zero
 4020690:	dc000015 	stw	r16,0(sp)
 4020694:	dfc00115 	stw	ra,4(sp)
 4020698:	2021883a 	mov	r16,r4
 402069c:	40208540 	call	4020854 <__call_exitprocs>
 40206a0:	008100f4 	movhi	r2,1027
 40206a4:	10ab8204 	addi	r2,r2,-20984
 40206a8:	11000017 	ldw	r4,0(r2)
 40206ac:	20800f17 	ldw	r2,60(r4)
 40206b0:	10000126 	beq	r2,zero,40206b8 <exit+0x30>
 40206b4:	103ee83a 	callr	r2
 40206b8:	8009883a 	mov	r4,r16
 40206bc:	401bf1c0 	call	401bf1c <_exit>

040206c0 <memcmp>:
 40206c0:	01c000c4 	movi	r7,3
 40206c4:	3980192e 	bgeu	r7,r6,402072c <memcmp+0x6c>
 40206c8:	2144b03a 	or	r2,r4,r5
 40206cc:	11c4703a 	and	r2,r2,r7
 40206d0:	10000f26 	beq	r2,zero,4020710 <memcmp+0x50>
 40206d4:	20800003 	ldbu	r2,0(r4)
 40206d8:	28c00003 	ldbu	r3,0(r5)
 40206dc:	10c0151e 	bne	r2,r3,4020734 <memcmp+0x74>
 40206e0:	31bfff84 	addi	r6,r6,-2
 40206e4:	01ffffc4 	movi	r7,-1
 40206e8:	00000406 	br	40206fc <memcmp+0x3c>
 40206ec:	20800003 	ldbu	r2,0(r4)
 40206f0:	28c00003 	ldbu	r3,0(r5)
 40206f4:	31bfffc4 	addi	r6,r6,-1
 40206f8:	10c00e1e 	bne	r2,r3,4020734 <memcmp+0x74>
 40206fc:	21000044 	addi	r4,r4,1
 4020700:	29400044 	addi	r5,r5,1
 4020704:	31fff91e 	bne	r6,r7,40206ec <__alt_mem_onchip_memory2_0+0xfc01f44c>
 4020708:	0005883a 	mov	r2,zero
 402070c:	f800283a 	ret
 4020710:	20c00017 	ldw	r3,0(r4)
 4020714:	28800017 	ldw	r2,0(r5)
 4020718:	18bfee1e 	bne	r3,r2,40206d4 <__alt_mem_onchip_memory2_0+0xfc01f434>
 402071c:	31bfff04 	addi	r6,r6,-4
 4020720:	21000104 	addi	r4,r4,4
 4020724:	29400104 	addi	r5,r5,4
 4020728:	39bff936 	bltu	r7,r6,4020710 <__alt_mem_onchip_memory2_0+0xfc01f470>
 402072c:	303fe91e 	bne	r6,zero,40206d4 <__alt_mem_onchip_memory2_0+0xfc01f434>
 4020730:	003ff506 	br	4020708 <__alt_mem_onchip_memory2_0+0xfc01f468>
 4020734:	10c5c83a 	sub	r2,r2,r3
 4020738:	f800283a 	ret

0402073c <__register_exitproc>:
 402073c:	defffa04 	addi	sp,sp,-24
 4020740:	dc000315 	stw	r16,12(sp)
 4020744:	040100f4 	movhi	r16,1027
 4020748:	842b8204 	addi	r16,r16,-20984
 402074c:	80c00017 	ldw	r3,0(r16)
 4020750:	dc400415 	stw	r17,16(sp)
 4020754:	dfc00515 	stw	ra,20(sp)
 4020758:	18805217 	ldw	r2,328(r3)
 402075c:	2023883a 	mov	r17,r4
 4020760:	10003726 	beq	r2,zero,4020840 <__register_exitproc+0x104>
 4020764:	10c00117 	ldw	r3,4(r2)
 4020768:	010007c4 	movi	r4,31
 402076c:	20c00e16 	blt	r4,r3,40207a8 <__register_exitproc+0x6c>
 4020770:	1a000044 	addi	r8,r3,1
 4020774:	8800221e 	bne	r17,zero,4020800 <__register_exitproc+0xc4>
 4020778:	18c00084 	addi	r3,r3,2
 402077c:	18c7883a 	add	r3,r3,r3
 4020780:	18c7883a 	add	r3,r3,r3
 4020784:	12000115 	stw	r8,4(r2)
 4020788:	10c7883a 	add	r3,r2,r3
 402078c:	19400015 	stw	r5,0(r3)
 4020790:	0005883a 	mov	r2,zero
 4020794:	dfc00517 	ldw	ra,20(sp)
 4020798:	dc400417 	ldw	r17,16(sp)
 402079c:	dc000317 	ldw	r16,12(sp)
 40207a0:	dec00604 	addi	sp,sp,24
 40207a4:	f800283a 	ret
 40207a8:	00810074 	movhi	r2,1025
 40207ac:	10bb0804 	addi	r2,r2,-5088
 40207b0:	10002626 	beq	r2,zero,402084c <__register_exitproc+0x110>
 40207b4:	01006404 	movi	r4,400
 40207b8:	d9400015 	stw	r5,0(sp)
 40207bc:	d9800115 	stw	r6,4(sp)
 40207c0:	d9c00215 	stw	r7,8(sp)
 40207c4:	400ec200 	call	400ec20 <malloc>
 40207c8:	d9400017 	ldw	r5,0(sp)
 40207cc:	d9800117 	ldw	r6,4(sp)
 40207d0:	d9c00217 	ldw	r7,8(sp)
 40207d4:	10001d26 	beq	r2,zero,402084c <__register_exitproc+0x110>
 40207d8:	81000017 	ldw	r4,0(r16)
 40207dc:	10000115 	stw	zero,4(r2)
 40207e0:	02000044 	movi	r8,1
 40207e4:	22405217 	ldw	r9,328(r4)
 40207e8:	0007883a 	mov	r3,zero
 40207ec:	12400015 	stw	r9,0(r2)
 40207f0:	20805215 	stw	r2,328(r4)
 40207f4:	10006215 	stw	zero,392(r2)
 40207f8:	10006315 	stw	zero,396(r2)
 40207fc:	883fde26 	beq	r17,zero,4020778 <__alt_mem_onchip_memory2_0+0xfc01f4d8>
 4020800:	18c9883a 	add	r4,r3,r3
 4020804:	2109883a 	add	r4,r4,r4
 4020808:	1109883a 	add	r4,r2,r4
 402080c:	21802215 	stw	r6,136(r4)
 4020810:	01800044 	movi	r6,1
 4020814:	12406217 	ldw	r9,392(r2)
 4020818:	30cc983a 	sll	r6,r6,r3
 402081c:	4992b03a 	or	r9,r9,r6
 4020820:	12406215 	stw	r9,392(r2)
 4020824:	21c04215 	stw	r7,264(r4)
 4020828:	01000084 	movi	r4,2
 402082c:	893fd21e 	bne	r17,r4,4020778 <__alt_mem_onchip_memory2_0+0xfc01f4d8>
 4020830:	11006317 	ldw	r4,396(r2)
 4020834:	218cb03a 	or	r6,r4,r6
 4020838:	11806315 	stw	r6,396(r2)
 402083c:	003fce06 	br	4020778 <__alt_mem_onchip_memory2_0+0xfc01f4d8>
 4020840:	18805304 	addi	r2,r3,332
 4020844:	18805215 	stw	r2,328(r3)
 4020848:	003fc606 	br	4020764 <__alt_mem_onchip_memory2_0+0xfc01f4c4>
 402084c:	00bfffc4 	movi	r2,-1
 4020850:	003fd006 	br	4020794 <__alt_mem_onchip_memory2_0+0xfc01f4f4>

04020854 <__call_exitprocs>:
 4020854:	defff504 	addi	sp,sp,-44
 4020858:	df000915 	stw	fp,36(sp)
 402085c:	dd400615 	stw	r21,24(sp)
 4020860:	dc800315 	stw	r18,12(sp)
 4020864:	dfc00a15 	stw	ra,40(sp)
 4020868:	ddc00815 	stw	r23,32(sp)
 402086c:	dd800715 	stw	r22,28(sp)
 4020870:	dd000515 	stw	r20,20(sp)
 4020874:	dcc00415 	stw	r19,16(sp)
 4020878:	dc400215 	stw	r17,8(sp)
 402087c:	dc000115 	stw	r16,4(sp)
 4020880:	d9000015 	stw	r4,0(sp)
 4020884:	2839883a 	mov	fp,r5
 4020888:	04800044 	movi	r18,1
 402088c:	057fffc4 	movi	r21,-1
 4020890:	008100f4 	movhi	r2,1027
 4020894:	10ab8204 	addi	r2,r2,-20984
 4020898:	12000017 	ldw	r8,0(r2)
 402089c:	45005217 	ldw	r20,328(r8)
 40208a0:	44c05204 	addi	r19,r8,328
 40208a4:	a0001c26 	beq	r20,zero,4020918 <__call_exitprocs+0xc4>
 40208a8:	a0800117 	ldw	r2,4(r20)
 40208ac:	15ffffc4 	addi	r23,r2,-1
 40208b0:	b8000d16 	blt	r23,zero,40208e8 <__call_exitprocs+0x94>
 40208b4:	14000044 	addi	r16,r2,1
 40208b8:	8421883a 	add	r16,r16,r16
 40208bc:	8421883a 	add	r16,r16,r16
 40208c0:	84402004 	addi	r17,r16,128
 40208c4:	a463883a 	add	r17,r20,r17
 40208c8:	a421883a 	add	r16,r20,r16
 40208cc:	e0001e26 	beq	fp,zero,4020948 <__call_exitprocs+0xf4>
 40208d0:	80804017 	ldw	r2,256(r16)
 40208d4:	e0801c26 	beq	fp,r2,4020948 <__call_exitprocs+0xf4>
 40208d8:	bdffffc4 	addi	r23,r23,-1
 40208dc:	843fff04 	addi	r16,r16,-4
 40208e0:	8c7fff04 	addi	r17,r17,-4
 40208e4:	bd7ff91e 	bne	r23,r21,40208cc <__alt_mem_onchip_memory2_0+0xfc01f62c>
 40208e8:	00810074 	movhi	r2,1025
 40208ec:	10bb0d04 	addi	r2,r2,-5068
 40208f0:	10000926 	beq	r2,zero,4020918 <__call_exitprocs+0xc4>
 40208f4:	a0800117 	ldw	r2,4(r20)
 40208f8:	1000301e 	bne	r2,zero,40209bc <__call_exitprocs+0x168>
 40208fc:	a0800017 	ldw	r2,0(r20)
 4020900:	10003226 	beq	r2,zero,40209cc <__call_exitprocs+0x178>
 4020904:	a009883a 	mov	r4,r20
 4020908:	98800015 	stw	r2,0(r19)
 402090c:	400ec340 	call	400ec34 <free>
 4020910:	9d000017 	ldw	r20,0(r19)
 4020914:	a03fe41e 	bne	r20,zero,40208a8 <__alt_mem_onchip_memory2_0+0xfc01f608>
 4020918:	dfc00a17 	ldw	ra,40(sp)
 402091c:	df000917 	ldw	fp,36(sp)
 4020920:	ddc00817 	ldw	r23,32(sp)
 4020924:	dd800717 	ldw	r22,28(sp)
 4020928:	dd400617 	ldw	r21,24(sp)
 402092c:	dd000517 	ldw	r20,20(sp)
 4020930:	dcc00417 	ldw	r19,16(sp)
 4020934:	dc800317 	ldw	r18,12(sp)
 4020938:	dc400217 	ldw	r17,8(sp)
 402093c:	dc000117 	ldw	r16,4(sp)
 4020940:	dec00b04 	addi	sp,sp,44
 4020944:	f800283a 	ret
 4020948:	a0800117 	ldw	r2,4(r20)
 402094c:	80c00017 	ldw	r3,0(r16)
 4020950:	10bfffc4 	addi	r2,r2,-1
 4020954:	15c01426 	beq	r2,r23,40209a8 <__call_exitprocs+0x154>
 4020958:	80000015 	stw	zero,0(r16)
 402095c:	183fde26 	beq	r3,zero,40208d8 <__alt_mem_onchip_memory2_0+0xfc01f638>
 4020960:	95c8983a 	sll	r4,r18,r23
 4020964:	a0806217 	ldw	r2,392(r20)
 4020968:	a5800117 	ldw	r22,4(r20)
 402096c:	2084703a 	and	r2,r4,r2
 4020970:	10000b26 	beq	r2,zero,40209a0 <__call_exitprocs+0x14c>
 4020974:	a0806317 	ldw	r2,396(r20)
 4020978:	2088703a 	and	r4,r4,r2
 402097c:	20000c1e 	bne	r4,zero,40209b0 <__call_exitprocs+0x15c>
 4020980:	89400017 	ldw	r5,0(r17)
 4020984:	d9000017 	ldw	r4,0(sp)
 4020988:	183ee83a 	callr	r3
 402098c:	a0800117 	ldw	r2,4(r20)
 4020990:	15bfbf1e 	bne	r2,r22,4020890 <__alt_mem_onchip_memory2_0+0xfc01f5f0>
 4020994:	98800017 	ldw	r2,0(r19)
 4020998:	153fcf26 	beq	r2,r20,40208d8 <__alt_mem_onchip_memory2_0+0xfc01f638>
 402099c:	003fbc06 	br	4020890 <__alt_mem_onchip_memory2_0+0xfc01f5f0>
 40209a0:	183ee83a 	callr	r3
 40209a4:	003ff906 	br	402098c <__alt_mem_onchip_memory2_0+0xfc01f6ec>
 40209a8:	a5c00115 	stw	r23,4(r20)
 40209ac:	003feb06 	br	402095c <__alt_mem_onchip_memory2_0+0xfc01f6bc>
 40209b0:	89000017 	ldw	r4,0(r17)
 40209b4:	183ee83a 	callr	r3
 40209b8:	003ff406 	br	402098c <__alt_mem_onchip_memory2_0+0xfc01f6ec>
 40209bc:	a0800017 	ldw	r2,0(r20)
 40209c0:	a027883a 	mov	r19,r20
 40209c4:	1029883a 	mov	r20,r2
 40209c8:	003fb606 	br	40208a4 <__alt_mem_onchip_memory2_0+0xfc01f604>
 40209cc:	0005883a 	mov	r2,zero
 40209d0:	003ffb06 	br	40209c0 <__alt_mem_onchip_memory2_0+0xfc01f720>
 40209d4:	01110bff 	0x1110bff
 40209d8:	01010004 	movi	r4,1024
 40209dc:	7f000105 	stb	fp,4(r15)
 40209e0:	007d0000 	call	7d000 <__alt_mem_sdram-0x3f83000>
 40209e4:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 40209e8:	01883a00 	call	1883a0 <__alt_mem_sdram-0x3e77c60>
 40209ec:	010d0bff 	0x10d0bff
 40209f0:	01010002 	0x1010002
	...
 40209fc:	010d0bff 	0x10d0bff
 4020a00:	01010004 	movi	r4,1024
 4020a04:	00000100 	call	10 <__alt_mem_sdram-0x3fffff0>
 4020a08:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4020a0c:	0400b078 	rdprs	r16,zero,705
 4020a10:	0400d7c8 	cmpgei	r16,zero,863
