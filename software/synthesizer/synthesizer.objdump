
synthesizer.elf:     file format elf32-littlenios2
synthesizer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000278d4 memsz 0x000278d4 flags r-x
    LOAD off    0x000288f4 vaddr 0x040278f4 paddr 0x0402aad0 align 2**12
         filesz 0x000031dc memsz 0x000031dc flags rw-
    LOAD off    0x0002bcac vaddr 0x0402dcac paddr 0x0402dcac align 2**12
         filesz 0x00000000 memsz 0x0000025c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0002049c  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00007228  040206cc  040206cc  000216cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031dc  040278f4  0402aad0  000288f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000025c  0402dcac  0402dcac  0002bcac  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0402df08  0402df08  0002bad0  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  080012a0  080012a0  0002bad0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0002bad0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000019f0  00000000  00000000  0002baf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000503d0  00000000  00000000  0002d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00010515  00000000  00000000  0007d8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001403b  00000000  00000000  0008ddcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000577c  00000000  00000000  000a1e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000fd77  00000000  00000000  000a7584  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001eafd  00000000  00000000  000b72fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000070  00000000  00000000  000d5df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000029f0  00000000  00000000  000d5e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000f0fc2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000f0fc5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000f0fd1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000f0fd2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000f0fd3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000f0fd7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000f0fdb  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000f0fdf  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000f0fea  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000f0ff5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  000f1000  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000020  00000000  00000000  000f100f  2**0
                  CONTENTS, READONLY
 30 .jdi          000057d2  00000000  00000000  000f102f  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000b9330  00000000  00000000  000f6801  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
040206cc l    d  .rodata	00000000 .rodata
040278f4 l    d  .rwdata	00000000 .rwdata
0402dcac l    d  .bss	00000000 .bss
0402df08 l    d  .sdram	00000000 .sdram
080012a0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../synthesizer_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
040293d8 l     O .rwdata	00000001 _ZL9SPI_MODE0
040293d9 l     O .rwdata	00000001 _ZL9SPI_MODE1
040293da l     O .rwdata	00000001 _ZL9SPI_MODE2
040293db l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
040293dc l     O .rwdata	00000001 _ZL9SPI_MODE0
040293dd l     O .rwdata	00000001 _ZL9SPI_MODE1
040293de l     O .rwdata	00000001 _ZL9SPI_MODE2
040293df l     O .rwdata	00000001 _ZL9SPI_MODE3
0402dcac l     O .bss	00000001 _ZL9usb_error
0402dcad l     O .bss	00000001 _ZL14usb_task_state
0402dcb0 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
040293e8 l     O .rwdata	00000001 _ZL9SPI_MODE0
040293e9 l     O .rwdata	00000001 _ZL9SPI_MODE1
040293ea l     O .rwdata	00000001 _ZL9SPI_MODE2
040293eb l     O .rwdata	00000001 _ZL9SPI_MODE3
040293ec l     O .rwdata	00000006 _ZL9XBOX_LEDS
040209ba l     O .rodata	00000024 _ZL12XBOX_BUTTONS
04004454 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 hidboot.cpp
0402940c l     O .rwdata	00000001 _ZL9SPI_MODE0
0402940d l     O .rwdata	00000001 _ZL9SPI_MODE1
0402940e l     O .rwdata	00000001 _ZL9SPI_MODE2
0402940f l     O .rwdata	00000001 _ZL9SPI_MODE3
04029410 l     O .rwdata	00000002 _ZL9pstrSpace
04029414 l     O .rwdata	00000003 _ZL8pstrCRLF
04029418 l     O .rwdata	00000002 _ZL13pstrSingleTab
0402941c l     O .rwdata	00000003 _ZL13pstrDoubleTab
04029420 l     O .rwdata	00000004 _ZL13pstrTripleTab
04029424 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
04020b08 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
04020b1c l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
04020b28 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
04020b34 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
04020b40 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
04020b4c l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
04020b5c l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0402942c l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
04029434 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0402943c l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
04029444 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
04020b68 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
04020b74 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
04029448 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0402944c l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
04020b80 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
04020b90 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
04029454 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0402945c l     O .rwdata	00000006 _ZL18pstrUsagePagePower
04020ba0 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
04029464 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
04020bb0 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0402946c l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
04020bc8 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
04029470 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
04020bd4 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
04020be0 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
04029478 l     O .rwdata	00000008 _ZL16pstrUsagePointer
04029480 l     O .rwdata	00000006 _ZL14pstrUsageMouse
04020bec l     O .rodata	00000009 _ZL17pstrUsageJoystick
04020bf8 l     O .rodata	00000009 _ZL16pstrUsageGamePad
04029488 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
04029490 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
04020c04 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
04020c14 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
04029498 l     O .rwdata	00000002 _ZL10pstrUsageX
0402949c l     O .rwdata	00000002 _ZL10pstrUsageY
040294a0 l     O .rwdata	00000002 _ZL10pstrUsageZ
040294a4 l     O .rwdata	00000003 _ZL11pstrUsageRx
040294a8 l     O .rwdata	00000003 _ZL11pstrUsageRy
040294ac l     O .rwdata	00000003 _ZL11pstrUsageRz
040294b0 l     O .rwdata	00000007 _ZL15pstrUsageSlider
040294b8 l     O .rwdata	00000005 _ZL13pstrUsageDial
040294c0 l     O .rwdata	00000006 _ZL14pstrUsageWheel
04020c28 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
04020c34 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
04020c40 l     O .rodata	0000000b _ZL18pstrUsageByteCount
04020c4c l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
040294c8 l     O .rwdata	00000006 _ZL14pstrUsageStart
040294d0 l     O .rwdata	00000004 _ZL15pstrUsageSelect
040294d4 l     O .rwdata	00000003 _ZL11pstrUsageVx
040294d8 l     O .rwdata	00000003 _ZL11pstrUsageVy
040294dc l     O .rwdata	00000003 _ZL11pstrUsageVz
040294e0 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
040294e8 l     O .rwdata	00000005 _ZL13pstrUsageVbry
040294f0 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
040294f8 l     O .rwdata	00000004 _ZL12pstrUsageVno
04020c5c l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
04020c6c l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
04020c78 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
04020c84 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
04020c94 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
04020ca0 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
04020cac l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
04020cc0 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
04020cd0 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
04020ce0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
04020cf0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
04020d00 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
04020d10 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
04020d20 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
04020d30 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
04020d3c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
04020d4c l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
04020d60 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
04020d74 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
04020d80 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
04020d8c l     O .rodata	0000000c _ZL18pstrUsageDPadRight
04020d98 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
04020da4 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
04020db0 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
04020dbc l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
04020dc8 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
04020dd4 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
04020de0 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
04020dec l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
04020df8 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
04020e08 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
04020e14 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
04020e24 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
04020e34 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
04020e44 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
04020e54 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
04020e64 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
04020e7c l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
04020e94 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
04020eac l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
04020ebc l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
04020ecc l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
04020edc l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
04020eec l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
04020efc l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
04020f0c l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
04020f1c l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
04020f2c l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
04020f3c l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
04020f4c l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
04020f64 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
04020f74 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
04020f88 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
04020f98 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
04020fa4 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
04020fb0 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
04020fbc l     O .rodata	0000000b _ZL21pstrUsageTrackControl
040294fc l     O .rwdata	00000008 _ZL16pstrUsageAileron
04020fc8 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
04020fd8 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
04020fec l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
04021000 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
04021010 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
04021020 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
0402102c l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
04021040 l     O .rodata	00000009 _ZL17pstrUsageElevator
0402104c l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
04029504 l     O .rwdata	00000007 _ZL15pstrUsageRudder
0402105c l     O .rodata	00000009 _ZL17pstrUsageThrottle
04021068 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
04021074 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
04021084 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
04021094 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0402950c l     O .rwdata	00000008 _ZL16pstrUsageTrigger
040210a0 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
040210ac l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
040210b8 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
04029514 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0402951c l     O .rwdata	00000006 _ZL14pstrUsageBrake
04029524 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0402952c l     O .rwdata	00000008 _ZL16pstrUsageShifter
040210c4 l     O .rodata	00000009 _ZL17pstrUsageSteering
040210d0 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
040210dc l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
040210e8 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
04029534 l     O .rwdata	00000008 _ZL16pstrUsageBallast
040210f4 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
04021104 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
04021110 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
0402111c l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0402953c l     O .rwdata	00000005 _ZL13pstrUsageBelt
04021128 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
04029544 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0402954c l     O .rwdata	00000006 _ZL14pstrUsageGlove
04021134 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
04021140 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
0402114c l     O .rodata	0000000b _ZL20pstrUsageHandTracker
04021158 l     O .rodata	0000000b _ZL19pstrUsageOculometer
04029554 l     O .rwdata	00000005 _ZL13pstrUsageVest
04021164 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
04021170 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
0402117c l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
0402118c l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
0402119c l     O .rodata	0000000a _ZL17pstrUsageGolfClub
040211a8 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
040211b4 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0402955c l     O .rwdata	00000004 _ZL12pstrUsageOar
04029560 l     O .rwdata	00000006 _ZL14pstrUsageSlope
04029568 l     O .rwdata	00000005 _ZL13pstrUsageRate
040211c0 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
040211cc l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
040211dc l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
040211ec l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
040211fc l     O .rodata	0000000c _ZL19pstrUsageStickTempo
04021208 l     O .rodata	0000000b _ZL18pstrUsageStickType
04021214 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
04029570 l     O .rwdata	00000007 _ZL15pstrUsagePutter
04029578 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
04029580 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
04029588 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
04029590 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
04029598 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
040295a0 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
040295a8 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
040295b0 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
040295b8 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
040295c0 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
040295c8 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
04021220 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
0402122c l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
04021238 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
040295d0 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
040295d8 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
040295e0 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
040295e8 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
040295f0 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
04021244 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
04021254 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
040295f8 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
04029600 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
04021260 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
04021270 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
04021280 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
04021290 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
040212a0 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
040212b0 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
040212c0 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
040212d0 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
040212e0 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
04029604 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
040212f0 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0402960c l     O .rwdata	00000005 _ZL13pstrUsageBump
04021300 l     O .rodata	00000009 _ZL16pstrUsageNewGame
0402130c l     O .rodata	0000000b _ZL18pstrUsageShootBall
04029614 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
04021318 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
04021324 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0402961c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
04021330 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
04021340 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
0402134c l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
04021358 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
04021364 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
04021378 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
04021388 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
04021398 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
040213a4 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
040213b0 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
040213c8 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
040213dc l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
040213f4 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
04021408 l     O .rodata	00000009 _ZL16pstrUsageNumLock
04021414 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
04021420 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
04029624 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0402962c l     O .rwdata	00000005 _ZL13pstrUsageKana
04029634 l     O .rwdata	00000004 _ZL14pstrUsagePower
04029638 l     O .rwdata	00000006 _ZL14pstrUsageShift
04029640 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
04029644 l     O .rwdata	00000005 _ZL13pstrUsageMute
0402142c l     O .rodata	0000000a _ZL19pstrUsageToneEnable
04021438 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
04021448 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0402964c l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
04021458 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
04021468 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
04029654 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0402965c l     O .rwdata	00000007 _ZL15pstrUsageStereo
04021474 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
04021488 l     O .rodata	00000009 _ZL17pstrUsageSpinning
04029664 l     O .rwdata	00000004 _ZL12pstrUsageCAV
04029668 l     O .rwdata	00000004 _ZL12pstrUsageCLV
04021494 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
040214a8 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0402966c l     O .rwdata	00000005 _ZL13pstrUsageRing
040214b4 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
040214c0 l     O .rodata	0000000a _ZL17pstrUsageDataMode
04029674 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0402967c l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
04029684 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0402968c l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
040214cc l     O .rodata	00000009 _ZL16pstrUsageHeadSet
04029694 l     O .rwdata	00000005 _ZL13pstrUsageHold
0402969c l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
040214d8 l     O .rodata	00000009 _ZL17pstrUsageCoverage
040214e4 l     O .rodata	0000000b _ZL18pstrUsageNightMode
040214f0 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
040214fc l     O .rodata	0000000c _ZL19pstrUsageCallPickup
040296a0 l     O .rwdata	00000005 _ZL19pstrUsageConference
04021508 l     O .rodata	00000009 _ZL16pstrUsageStandBy
040296a8 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
040296b0 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
040296b8 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
04021514 l     O .rodata	00000009 _ZL16pstrUsageOffLine
040296c0 l     O .rwdata	00000005 _ZL13pstrUsageBusy
040296c8 l     O .rwdata	00000006 _ZL14pstrUsageReady
04021520 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
0402152c l     O .rodata	0000000a _ZL17pstrUsagePaperJam
040296d0 l     O .rwdata	00000007 _ZL15pstrUsageRemote
040296d8 l     O .rwdata	00000004 _ZL16pstrUsageForward
040296dc l     O .rwdata	00000004 _ZL16pstrUsageReverse
040296e0 l     O .rwdata	00000005 _ZL13pstrUsageStop
040296e8 l     O .rwdata	00000007 _ZL15pstrUsageRewind
04021538 l     O .rodata	00000009 _ZL20pstrUsageFastForward
040296f0 l     O .rwdata	00000005 _ZL13pstrUsagePlay
040296f8 l     O .rwdata	00000006 _ZL14pstrUsagePause
04029700 l     O .rwdata	00000004 _ZL15pstrUsageRecord
04029704 l     O .rwdata	00000006 _ZL14pstrUsageError
04021544 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
04021554 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
04021568 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0402970c l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
04021580 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
0402158c l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
0402159c l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
04029714 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
040215ac l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
040215bc l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
040215d0 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
040215e4 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
040215f8 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
0402160c l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0402971c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
0402161c l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
04021628 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
04029724 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
04021634 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
04021640 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0402972c l     O .rwdata	00000006 _ZL14pstrUsagePhone
04021650 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
0402165c l     O .rodata	0000000a _ZL24pstrUsageMessageControls
04029734 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0402973c l     O .rwdata	00000008 _ZL16pstrUsageHeadset
04021668 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
04021674 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
04029744 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0402974c l     O .rwdata	00000006 _ZL14pstrUsageFlash
04029754 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0402975c l     O .rwdata	00000007 _ZL15pstrUsageRedial
04021680 l     O .rodata	00000009 _ZL17pstrUsageTransfer
04029764 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0402976c l     O .rwdata	00000005 _ZL13pstrUsagePark
0402168c l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
04021698 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
04029774 l     O .rwdata	00000005 _ZL13pstrUsageLine
040216a4 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
040216b0 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
040216bc l     O .rodata	00000009 _ZL19pstrUsageRingSelect
040216c8 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
040216d4 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0402977c l     O .rwdata	00000005 _ZL13pstrUsageSend
040216e0 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
040216ec l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
040216f8 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
04021704 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
04021710 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
0402171c l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
04029784 l     O .rwdata	00000004 _ZL16pstrUsageMessage
0402172c l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
0402173c l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
04021750 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
04021764 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
04021778 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
0402178c l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
0402179c l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
040217ac l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
040217c0 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
040217d0 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
040217e0 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
040217f0 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
040217fc l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
04021808 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
04021814 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
04029788 l     O .rwdata	00000007 _ZL15pstrUsageRinger
04029790 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
04029794 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
04029798 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0402979c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
040297a0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
040297a4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
040297a8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
040297ac l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
040297b0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
040297b4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
040297b8 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
040297bc l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
040297c0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
040297c4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
040297c8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
040297cc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
04021828 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
04021838 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
04021844 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
04021850 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
040297d0 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
040297d4 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
040297dc l     O .rwdata	00000006 _ZL13pstrUsageAMPM
040297e4 l     O .rwdata	00000006 _ZL14pstrUsageReset
040297ec l     O .rwdata	00000006 _ZL14pstrUsageSleep
0402185c l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
04021868 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
040297f4 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
04021874 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
040297fc l     O .rwdata	00000005 _ZL13pstrUsageMenu
04021880 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
04029804 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
0402188c l     O .rodata	0000000a _ZL17pstrUsageMenuDown
04021898 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
040218a4 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
040218b0 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
040218bc l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
040218cc l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
040218dc l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
040218e8 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
040218f4 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0402980c l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
04021904 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
04021914 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
04029814 l     O .rwdata	00000006 _ZL14pstrUsageStill
0402981c l     O .rwdata	00000004 _ZL18pstrUsageSelection
04021920 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
0402192c l     O .rodata	0000000a _ZL17pstrUsageModeStep
04021938 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
04021944 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
04021954 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
04029820 l     O .rwdata	00000008 _ZL16pstrUsageChannel
04029828 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
04021960 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
04021970 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
0402197c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
04021988 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
04021994 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
040219a0 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
040219ac l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
040219b8 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
040219c8 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
040219d4 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
040219e0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
040219ec l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
04029830 l     O .rwdata	00000005 _ZL13pstrUsageQuit
04029838 l     O .rwdata	00000005 _ZL13pstrUsageHelp
040219fc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
04021a0c l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
04021a18 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
04021a24 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
04021a34 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
04021a44 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
04029840 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
04029848 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
04021a54 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
04029850 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
04029858 l     O .rwdata	00000005 _ZL13pstrUsageOnce
04029860 l     O .rwdata	00000006 _ZL14pstrUsageDaily
04029868 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
04029870 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
04021a60 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
04021a6c l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
04029878 l     O .rwdata	00000006 _ZL14pstrUsageEject
04029880 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
04021a78 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
04021a84 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
04021a90 l     O .rodata	00000009 _ZL17pstrUsageTracking
04021a9c l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
04021aa8 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
04029888 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
04021ab4 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
04029890 l     O .rwdata	00000005 _ZL13pstrUsageMark
04021ac0 l     O .rodata	00000009 _ZL18pstrUsageClearMark
04021acc l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
04021ad8 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
04021ae4 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
04021af4 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
04021b08 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
04021b18 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
04021b28 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
04021b34 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
04021b40 l     O .rodata	0000000b _ZL18pstrUsageStopEject
04021b4c l     O .rodata	0000000b _ZL18pstrUsagePlayPause
04021b58 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
04029898 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0402989c l     O .rwdata	00000008 _ZL16pstrUsageBalance
040298a4 l     O .rwdata	00000005 _ZL13pstrUsageBass
040298ac l     O .rwdata	00000007 _ZL15pstrUsageTreble
04021b64 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
04021b70 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
040298b4 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
040298bc l     O .rwdata	00000004 _ZL12pstrUsageMPX
040298c0 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
040298c8 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
040298d0 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
04021b7c l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
04021b88 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
04021b94 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
04021ba0 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
040298d8 l     O .rwdata	00000005 _ZL13pstrUsageSlow
04021bac l     O .rodata	00000009 _ZL18pstrUsageFanEnable
04021bb8 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
04021bc4 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
04021bd0 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
04021be0 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
04021bf0 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
04021bfc l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
04021c08 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
04021c14 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
040298e0 l     O .rwdata	00000005 _ZL18pstrUsageProximity
040298e8 l     O .rwdata	00000007 _ZL15pstrUsageMotion
04021c20 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
04021c2c l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
040298f0 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
04021c38 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
04021c48 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
04021c58 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
04021c64 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
04021c70 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
04021c7c l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
040298f8 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
04029900 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
04021c88 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
04021c94 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
04021ca0 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
04021cac l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
04029908 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
04021cbc l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
04021cc8 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
04029910 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
04029918 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
04029920 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
04021cd8 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
04021ce4 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
04021cf0 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
04021cfc l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
04021d08 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
04021d18 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
04021d2c l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
04021d38 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
04021d4c l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
04021d5c l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
04021d68 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
04021d78 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
04021d88 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
04021d98 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
04021da4 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
04021db4 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
04021dc0 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
04021dd0 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
04021de0 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
04021df0 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
04021e00 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
04021e14 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
04029928 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
04021e24 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
04021e38 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
04021e4c l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
04021e5c l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
04021e6c l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
04021e7c l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
04021e88 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
04021e94 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
04021ea0 l     O .rodata	00000009 _ZL16pstrUsageALLogon
04021eac l     O .rodata	0000000a _ZL17pstrUsageALLogoff
04021eb8 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
04021ec8 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
04021ee0 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
04021eec l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
04021ef8 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
04021f04 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
04021f10 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
04021f1c l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
04021f28 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
04021f3c l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
04029930 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
04021f48 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
04029938 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
04021f54 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
04021f60 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
04021f70 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
04021f7c l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
04021f8c l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
04021f9c l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
04021fac l     O .rodata	0000000b _ZL21pstrUsageALEncryption
04021fb8 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
04021fc4 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
04021fd0 l     O .rodata	00000009 _ZL16pstrUsageALClock
04021fdc l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
04021fec l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
04021ff8 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
04022004 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
04022010 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
0402201c l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
04022030 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
04022040 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
0402204c l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
04022060 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
0402206c l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
0402207c l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
04022090 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
040220a4 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
040220b8 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
040220c8 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
040220e0 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
040220f4 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
04022104 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
04022114 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
04029940 l     O .rwdata	00000007 _ZL14pstrUsageACNew
04029948 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
04022128 l     O .rodata	00000009 _ZL16pstrUsageACClose
04029950 l     O .rwdata	00000008 _ZL15pstrUsageACExit
04029958 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
04029960 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
04029968 l     O .rwdata	00000008 _ZL15pstrUsageACSave
04022134 l     O .rodata	00000009 _ZL16pstrUsageACPrint
04029970 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
04029978 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
04029980 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
04029988 l     O .rwdata	00000007 _ZL14pstrUsageACCut
04022140 l     O .rodata	00000009 _ZL16pstrUsageACPaste
0402214c l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
04029990 l     O .rwdata	00000008 _ZL15pstrUsageACFind
04022158 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
04022168 l     O .rodata	0000000a _ZL17pstrUsageACSearch
04029998 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
040299a0 l     O .rwdata	00000008 _ZL15pstrUsageACHome
040299a8 l     O .rwdata	00000008 _ZL15pstrUsageACBack
040299b0 l     O .rwdata	00000007 _ZL18pstrUsageACForward
040299b8 l     O .rwdata	00000008 _ZL15pstrUsageACStop
04022174 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
04022180 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
04022190 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
040221a0 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
040299c0 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
040221ac l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
040221b8 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
040221c4 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
040299c8 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
040221d0 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
040221dc l     O .rodata	0000000d _ZL21pstrUsageACNormalView
040221ec l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
040221f8 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
04022208 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
04022218 l     O .rodata	0000000a _ZL17pstrUsageACScroll
04022224 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
04022230 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
040299d0 l     O .rwdata	00000007 _ZL14pstrUsageACPan
04022240 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
0402224c l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
0402225c l     O .rodata	0000000d _ZL19pstrUsageACTileVert
040299d8 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
040299e0 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
040299e8 l     O .rwdata	00000008 _ZL15pstrUsageACBold
040299f0 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
0402226c l     O .rodata	00000009 _ZL20pstrUsageACUnderline
04022278 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
040299f8 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
04022284 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
04022290 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
0402229c l     O .rodata	0000000a _ZL17pstrUsageACRotate
040222a8 l     O .rodata	0000000a _ZL17pstrUsageACResize
040222b4 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
040222c0 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
040222cc l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
040222d8 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
040222e4 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
040222f0 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
040222fc l     O .rodata	0000000c _ZL19pstrUsageACFontSize
04022308 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
04022318 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
04022328 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
04022338 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
04022348 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
04022354 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
04022364 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
04022370 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
04022380 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
04022390 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
040223a0 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
040223ac l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
040223b8 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
040223c4 l     O .rodata	0000000b _ZL18pstrUsageACPromote
040223d0 l     O .rodata	0000000a _ZL17pstrUsageACDemote
04029a00 l     O .rwdata	00000007 _ZL14pstrUsageACYes
04029a08 l     O .rwdata	00000006 _ZL13pstrUsageACNo
040223dc l     O .rodata	0000000a _ZL17pstrUsageACCancel
04029a10 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
04029a18 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
040223e8 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
04029a20 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
040223f4 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
04022404 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
04022410 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
04022420 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
04022430 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
04022440 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
04029a28 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
04029a30 l     O .rwdata	00000008 _ZL15pstrUsageACLock
0402244c l     O .rodata	0000000a _ZL17pstrUsageACUnlock
04029a38 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
04022458 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
04022464 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
04022474 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
04022480 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
04022490 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
0402249c l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
040224a8 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
040224b4 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
040224c0 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
040224cc l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
040224d8 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
04029a40 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
04029a48 l     O .rwdata	00000008 _ZL15pstrUsageACSort
040224e4 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
040224f0 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
04029a50 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
04022500 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
0402250c l     O .rodata	0000000c _ZL20pstrUsageACViewClock
04022518 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
04022528 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
04022538 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
04022544 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
04022550 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
0402255c l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
04029a58 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
04022568 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
04022574 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
04022580 l     O .rodata	00000009 _ZL16pstrUsageACReply
0402258c l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
0402259c l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
04029a60 l     O .rwdata	00000007 _ZL15pstrUsageACSend
040225a8 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
04029a68 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
04029a70 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
040225b4 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
040225c0 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
040225cc l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
040225d8 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
040225e4 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
040225f0 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
040225fc l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
04022608 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
04022614 l     O .rodata	0000000a _ZL17pstrUsageACRename
04022620 l     O .rodata	00000009 _ZL16pstrUsageACMerge
0402262c l     O .rodata	00000009 _ZL16pstrUsageACSplit
04022638 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
04022644 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
04022650 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
04029a78 l     O .rwdata	00000004 _ZL12pstrUsagePen
0402265c l     O .rodata	0000000a _ZL17pstrUsageLightPen
04022668 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
04022674 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
04022680 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
0402268c l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
04029a7c l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
0402269c l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
04029a84 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
040226a8 l     O .rodata	00000009 _ZL17pstrUsageArmature
040226b4 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
040226c8 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
04029a8c l     O .rwdata	00000007 _ZL15pstrUsageStylus
04029a94 l     O .rwdata	00000005 _ZL13pstrUsagePuck
04029a9c l     O .rwdata	00000007 _ZL15pstrUsageFinger
040226d8 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
040226e4 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
040226f0 l     O .rodata	00000009 _ZL16pstrUsageInRange
04029aa4 l     O .rwdata	00000006 _ZL14pstrUsageTouch
04029aac l     O .rwdata	00000008 _ZL16pstrUsageUntouch
04029ab4 l     O .rwdata	00000004 _ZL12pstrUsageTap
04029ab8 l     O .rwdata	00000005 _ZL16pstrUsageQuality
040226fc l     O .rodata	0000000b _ZL18pstrUsageDataValid
04022708 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
04022718 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
04022728 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
04029ac0 l     O .rwdata	00000007 _ZL15pstrUsageInvert
04029ac8 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
04029ad0 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
04029ad8 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
04022738 l     O .rodata	00000009 _ZL17pstrUsageAltitude
04029ae0 l     O .rwdata	00000006 _ZL14pstrUsageTwist
04029ae8 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
04022744 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
04029af0 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
04029af8 l     O .rwdata	00000007 _ZL15pstrUsageEraser
04022750 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0402275c l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0402276c l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
04022778 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
04022788 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
04022794 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
040227a4 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
040227b0 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
040227c0 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
040227cc l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
040227dc l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
040227ec l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
040227f8 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
04022804 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
04022810 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0402281c l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
04022828 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
04022834 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
04022840 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
04022850 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
04022860 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
04029b00 l     O .rwdata	00000004 _ZL12pstrUsageRow
04029b04 l     O .rwdata	00000004 _ZL15pstrUsageColumn
04029b08 l     O .rwdata	00000005 _ZL13pstrUsageRows
04029b10 l     O .rwdata	00000005 _ZL16pstrUsageColumns
0402286c l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
04022878 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
04022884 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
04022890 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
04029b18 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
0402289c l     O .rodata	00000009 _ZL17pstrUsageFontData
040228a8 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
040228b4 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
040228c0 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
040228d0 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
040228e0 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
040228f0 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
040228fc l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
04022908 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
04022914 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
04022920 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0402292c l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
04022938 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
04022944 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
04022950 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0402295c l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0402296c l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0402297c l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
0402298c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
04022998 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
040229a4 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
040229b4 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
04029b20 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
040229c0 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
040229d0 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
040229e0 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
040229ec l     O .rodata	00000009 _ZL19pstrUsageBlitReport
040229f8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
04022a08 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
04022a18 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
04022a28 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
04022a38 l     O .rodata	0000000a _ZL17pstrUsageBlitData
04022a44 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
04022a50 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
04022a5c l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
04022a6c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
04022a7c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
04022a8c l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
04022a9c l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
04029b28 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
04029b30 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
04022aac l     O .rodata	0000000b _ZL18pstrUsageClipStore
04029b38 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
04029b40 l     O .rwdata	00000005 _ZL13pstrUsageNext
04029b48 l     O .rwdata	00000005 _ZL13pstrUsageSave
04029b50 l     O .rwdata	00000006 _ZL14pstrUsagePrint
04022ab8 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
04029b58 l     O .rwdata	00000005 _ZL13pstrUsageCine
04022ac4 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
04029b60 l     O .rwdata	00000006 _ZL14pstrUsageFocus
04029b68 l     O .rwdata	00000006 _ZL14pstrUsageDepth
04022ad0 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
04022ae0 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
04022af0 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
04022b00 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
04022b0c l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
04022b18 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
04022b2c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
04022b40 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
04022b54 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
04022b68 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
04022b78 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
04022b88 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
04022b94 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
04022ba0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
04022bb0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
04029b7c l     O .rwdata	00000001 _ZL9SPI_MODE0
04029b7d l     O .rwdata	00000001 _ZL9SPI_MODE1
04029b7e l     O .rwdata	00000001 _ZL9SPI_MODE2
04029b7f l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
04029b84 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029b85 l     O .rwdata	00000001 _ZL9SPI_MODE1
04029b86 l     O .rwdata	00000001 _ZL9SPI_MODE2
04029b87 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 usbh_midi.cpp
04029b88 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029b89 l     O .rwdata	00000001 _ZL9SPI_MODE1
04029b8a l     O .rwdata	00000001 _ZL9SPI_MODE2
04029b8b l     O .rwdata	00000001 _ZL9SPI_MODE3
04022c8a l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
04022c9a l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
04008a58 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
04029b94 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029b95 l     O .rwdata	00000001 _ZL9SPI_MODE1
04029b96 l     O .rwdata	00000001 _ZL9SPI_MODE2
04029b97 l     O .rwdata	00000001 _ZL9SPI_MODE3
04029b98 l     O .rwdata	00000002 _ZL9pstrSpace
04029b9c l     O .rwdata	00000003 _ZL8pstrCRLF
04029ba0 l     O .rwdata	00000002 _ZL13pstrSingleTab
04029ba4 l     O .rwdata	00000003 _ZL13pstrDoubleTab
04029ba8 l     O .rwdata	00000004 _ZL13pstrTripleTab
04029bac l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
04022d64 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
04022d78 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
04022d84 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
04022d90 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
04022d9c l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
04022da8 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
04022db8 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
04029bb4 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
04029bbc l     O .rwdata	00000007 _ZL19pstrUsagePageButton
04029bc4 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
04029bcc l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
04022dc4 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
04022dd0 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
04029bd0 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
04029bd4 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
04022ddc l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
04022dec l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
04029bdc l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
04029be4 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
04022dfc l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
04029bec l     O .rwdata	00000006 _ZL18pstrUsagePageScale
04022e0c l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
04029bf4 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
04022e24 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
04029bf8 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
04022e30 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
04022e3c l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
04029c00 l     O .rwdata	00000008 _ZL16pstrUsagePointer
04029c08 l     O .rwdata	00000006 _ZL14pstrUsageMouse
04022e48 l     O .rodata	00000009 _ZL17pstrUsageJoystick
04022e54 l     O .rodata	00000009 _ZL16pstrUsageGamePad
04029c10 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
04029c18 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
04022e60 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
04022e70 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
04029c20 l     O .rwdata	00000002 _ZL10pstrUsageX
04029c24 l     O .rwdata	00000002 _ZL10pstrUsageY
04029c28 l     O .rwdata	00000002 _ZL10pstrUsageZ
04029c2c l     O .rwdata	00000003 _ZL11pstrUsageRx
04029c30 l     O .rwdata	00000003 _ZL11pstrUsageRy
04029c34 l     O .rwdata	00000003 _ZL11pstrUsageRz
04029c38 l     O .rwdata	00000007 _ZL15pstrUsageSlider
04029c40 l     O .rwdata	00000005 _ZL13pstrUsageDial
04029c48 l     O .rwdata	00000006 _ZL14pstrUsageWheel
04022e84 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
04022e90 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
04022e9c l     O .rodata	0000000b _ZL18pstrUsageByteCount
04022ea8 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
04029c50 l     O .rwdata	00000006 _ZL14pstrUsageStart
04029c58 l     O .rwdata	00000004 _ZL15pstrUsageSelect
04029c5c l     O .rwdata	00000003 _ZL11pstrUsageVx
04029c60 l     O .rwdata	00000003 _ZL11pstrUsageVy
04029c64 l     O .rwdata	00000003 _ZL11pstrUsageVz
04029c68 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
04029c70 l     O .rwdata	00000005 _ZL13pstrUsageVbry
04029c78 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
04029c80 l     O .rwdata	00000004 _ZL12pstrUsageVno
04022eb8 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
04022ec8 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
04022ed4 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
04022ee0 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
04022ef0 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
04022efc l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
04022f08 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
04022f1c l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
04022f2c l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
04022f3c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
04022f4c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
04022f5c l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
04022f6c l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
04022f7c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
04022f8c l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
04022f98 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
04022fa8 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
04022fbc l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
04022fd0 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
04022fdc l     O .rodata	0000000b _ZL17pstrUsageDPadDown
04022fe8 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
04022ff4 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
04023000 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
0402300c l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
04023018 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
04023024 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
04023030 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
0402303c l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
04023048 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
04023054 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
04023064 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
04023070 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
04023080 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
04023090 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
040230a0 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
040230b0 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
040230c0 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
040230d8 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
040230f0 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
04023108 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
04023118 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
04023128 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
04023138 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
04023148 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
04023158 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
04023168 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
04023178 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
04023188 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
04023198 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
040231a8 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
040231c0 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
040231d0 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
040231e4 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
040231f4 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
04023200 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
0402320c l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
04023218 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
04029c84 l     O .rwdata	00000008 _ZL16pstrUsageAileron
04023224 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
04023234 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
04023248 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
0402325c l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
0402326c l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
0402327c l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
04023288 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
0402329c l     O .rodata	00000009 _ZL17pstrUsageElevator
040232a8 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
04029c8c l     O .rwdata	00000007 _ZL15pstrUsageRudder
040232b8 l     O .rodata	00000009 _ZL17pstrUsageThrottle
040232c4 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
040232d0 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
040232e0 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
040232f0 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
04029c94 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
040232fc l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
04023308 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
04023314 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
04029c9c l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
04029ca4 l     O .rwdata	00000006 _ZL14pstrUsageBrake
04029cac l     O .rwdata	00000007 _ZL15pstrUsageClutch
04029cb4 l     O .rwdata	00000008 _ZL16pstrUsageShifter
04023320 l     O .rodata	00000009 _ZL17pstrUsageSteering
0402332c l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
04023338 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
04023344 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
04029cbc l     O .rwdata	00000008 _ZL16pstrUsageBallast
04023350 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
04023360 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
0402336c l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
04023378 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
04029cc4 l     O .rwdata	00000005 _ZL13pstrUsageBelt
04023384 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
04029ccc l     O .rwdata	00000007 _ZL15pstrUsageFlexor
04029cd4 l     O .rwdata	00000006 _ZL14pstrUsageGlove
04023390 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
0402339c l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
040233a8 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
040233b4 l     O .rodata	0000000b _ZL19pstrUsageOculometer
04029cdc l     O .rwdata	00000005 _ZL13pstrUsageVest
040233c0 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
040233cc l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
040233d8 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
040233e8 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
040233f8 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
04023404 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
04023410 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
04029ce4 l     O .rwdata	00000004 _ZL12pstrUsageOar
04029ce8 l     O .rwdata	00000006 _ZL14pstrUsageSlope
04029cf0 l     O .rwdata	00000005 _ZL13pstrUsageRate
0402341c l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
04023428 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
04023438 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
04023448 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
04023458 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
04023464 l     O .rodata	0000000b _ZL18pstrUsageStickType
04023470 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
04029cf8 l     O .rwdata	00000007 _ZL15pstrUsagePutter
04029d00 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
04029d08 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
04029d10 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
04029d18 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
04029d20 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
04029d28 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
04029d30 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
04029d38 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
04029d40 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
04029d48 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
04029d50 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
0402347c l     O .rodata	0000000b _ZL18pstrUsageSandWedge
04023488 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
04023494 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
04029d58 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
04029d60 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
04029d68 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
04029d70 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
04029d78 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
040234a0 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
040234b0 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
04029d80 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
04029d88 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
040234bc l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
040234cc l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
040234dc l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
040234ec l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
040234fc l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
0402350c l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
0402351c l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
0402352c l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
0402353c l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
04029d8c l     O .rwdata	00000008 _ZL16pstrUsageFlipper
0402354c l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
04029d94 l     O .rwdata	00000005 _ZL13pstrUsageBump
0402355c l     O .rodata	00000009 _ZL16pstrUsageNewGame
04023568 l     O .rodata	0000000b _ZL18pstrUsageShootBall
04029d9c l     O .rwdata	00000007 _ZL15pstrUsagePlayer
04023574 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
04023580 l     O .rodata	00000009 _ZL16pstrUsageGunClip
04029da4 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
0402358c l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
0402359c l     O .rodata	0000000a _ZL17pstrUsageGunBurst
040235a8 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
040235b4 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
040235c0 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
040235d4 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
040235e4 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
040235f4 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
04023600 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
0402360c l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
04023624 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
04023638 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
04023650 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
04023664 l     O .rodata	00000009 _ZL16pstrUsageNumLock
04023670 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
0402367c l     O .rodata	0000000c _ZL19pstrUsageScrollLock
04029dac l     O .rwdata	00000008 _ZL16pstrUsageCompose
04029db4 l     O .rwdata	00000005 _ZL13pstrUsageKana
04029dbc l     O .rwdata	00000004 _ZL14pstrUsagePower
04029dc0 l     O .rwdata	00000006 _ZL14pstrUsageShift
04029dc8 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
04029dcc l     O .rwdata	00000005 _ZL13pstrUsageMute
04023688 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
04023694 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
040236a4 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
04029dd4 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
040236b4 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
040236c4 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
04029ddc l     O .rwdata	00000007 _ZL15pstrUsageRepeat
04029de4 l     O .rwdata	00000007 _ZL15pstrUsageStereo
040236d0 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
040236e4 l     O .rodata	00000009 _ZL17pstrUsageSpinning
04029dec l     O .rwdata	00000004 _ZL12pstrUsageCAV
04029df0 l     O .rwdata	00000004 _ZL12pstrUsageCLV
040236f0 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
04023704 l     O .rodata	00000009 _ZL16pstrUsageOffHook
04029df4 l     O .rwdata	00000005 _ZL13pstrUsageRing
04023710 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
0402371c l     O .rodata	0000000a _ZL17pstrUsageDataMode
04029dfc l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
04029e04 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
04029e0c l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
04029e14 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
04023728 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
04029e1c l     O .rwdata	00000005 _ZL13pstrUsageHold
04029e24 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
04023734 l     O .rodata	00000009 _ZL17pstrUsageCoverage
04023740 l     O .rodata	0000000b _ZL18pstrUsageNightMode
0402374c l     O .rodata	0000000b _ZL18pstrUsageSendCalls
04023758 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
04029e28 l     O .rwdata	00000005 _ZL19pstrUsageConference
04023764 l     O .rodata	00000009 _ZL16pstrUsageStandBy
04029e30 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
04029e38 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
04029e40 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
04023770 l     O .rodata	00000009 _ZL16pstrUsageOffLine
04029e48 l     O .rwdata	00000005 _ZL13pstrUsageBusy
04029e50 l     O .rwdata	00000006 _ZL14pstrUsageReady
0402377c l     O .rodata	0000000a _ZL17pstrUsagePaperOut
04023788 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
04029e58 l     O .rwdata	00000007 _ZL15pstrUsageRemote
04029e60 l     O .rwdata	00000004 _ZL16pstrUsageForward
04029e64 l     O .rwdata	00000004 _ZL16pstrUsageReverse
04029e68 l     O .rwdata	00000005 _ZL13pstrUsageStop
04029e70 l     O .rwdata	00000007 _ZL15pstrUsageRewind
04023794 l     O .rodata	00000009 _ZL20pstrUsageFastForward
04029e78 l     O .rwdata	00000005 _ZL13pstrUsagePlay
04029e80 l     O .rwdata	00000006 _ZL14pstrUsagePause
04029e88 l     O .rwdata	00000004 _ZL15pstrUsageRecord
04029e8c l     O .rwdata	00000006 _ZL14pstrUsageError
040237a0 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
040237b0 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
040237c4 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
04029e94 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
040237dc l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
040237e8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
040237f8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
04029e9c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
04023808 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
04023818 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
0402382c l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
04023840 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
04023854 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
04023868 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
04029ea4 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
04023878 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
04023884 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
04029eac l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
04023890 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
0402389c l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
04029eb4 l     O .rwdata	00000006 _ZL14pstrUsagePhone
040238ac l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
040238b8 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
04029ebc l     O .rwdata	00000008 _ZL16pstrUsageHandset
04029ec4 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
040238c4 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
040238d0 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
04029ecc l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
04029ed4 l     O .rwdata	00000006 _ZL14pstrUsageFlash
04029edc l     O .rwdata	00000008 _ZL16pstrUsageFeature
04029ee4 l     O .rwdata	00000007 _ZL15pstrUsageRedial
040238dc l     O .rodata	00000009 _ZL17pstrUsageTransfer
04029eec l     O .rwdata	00000005 _ZL13pstrUsageDrop
04029ef4 l     O .rwdata	00000005 _ZL13pstrUsagePark
040238e8 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
040238f4 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
04029efc l     O .rwdata	00000005 _ZL13pstrUsageLine
04023900 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
0402390c l     O .rodata	0000000a _ZL19pstrUsageRingEnable
04023918 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
04023924 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
04023930 l     O .rodata	0000000a _ZL17pstrUsageCallerID
04029f04 l     O .rwdata	00000005 _ZL13pstrUsageSend
0402393c l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
04023948 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
04023954 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
04023960 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
0402396c l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
04023978 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
04029f0c l     O .rwdata	00000004 _ZL16pstrUsageMessage
04023988 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
04023998 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
040239ac l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
040239c0 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
040239d4 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
040239e8 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
040239f8 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
04023a08 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
04023a1c l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
04023a2c l     O .rodata	0000000d _ZL20pstrUsageReorderTone
04023a3c l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
04023a4c l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
04023a58 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
04023a64 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
04023a70 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
04029f10 l     O .rwdata	00000007 _ZL15pstrUsageRinger
04029f18 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
04029f1c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
04029f20 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
04029f24 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
04029f28 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
04029f2c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
04029f30 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
04029f34 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
04029f38 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
04029f3c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
04029f40 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
04029f44 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
04029f48 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
04029f4c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
04029f50 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
04029f54 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
04023a84 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
04023a94 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
04023aa0 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
04023aac l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
04029f58 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
04029f5c l     O .rwdata	00000005 _ZL16pstrUsagePlus100
04029f64 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
04029f6c l     O .rwdata	00000006 _ZL14pstrUsageReset
04029f74 l     O .rwdata	00000006 _ZL14pstrUsageSleep
04023ab8 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
04023ac4 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
04029f7c l     O .rwdata	00000008 _ZL21pstrUsageIllumination
04023ad0 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
04029f84 l     O .rwdata	00000005 _ZL13pstrUsageMenu
04023adc l     O .rodata	0000000a _ZL17pstrUsageMenuPick
04029f8c l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
04023ae8 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
04023af4 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
04023b00 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
04023b0c l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
04023b18 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
04023b28 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
04023b38 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
04023b44 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
04023b50 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
04029f94 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
04023b60 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
04023b70 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
04029f9c l     O .rwdata	00000006 _ZL14pstrUsageStill
04029fa4 l     O .rwdata	00000004 _ZL18pstrUsageSelection
04023b7c l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
04023b88 l     O .rodata	0000000a _ZL17pstrUsageModeStep
04023b94 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
04023ba0 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
04023bb0 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
04029fa8 l     O .rwdata	00000008 _ZL16pstrUsageChannel
04029fb0 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
04023bbc l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
04023bcc l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
04023bd8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
04023be4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
04023bf0 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
04023bfc l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
04023c08 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
04023c14 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
04023c24 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
04023c30 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
04023c3c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
04023c48 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
04029fb8 l     O .rwdata	00000005 _ZL13pstrUsageQuit
04029fc0 l     O .rwdata	00000005 _ZL13pstrUsageHelp
04023c58 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
04023c68 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
04023c74 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
04023c80 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
04023c90 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
04023ca0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
04029fc8 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
04029fd0 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
04023cb0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
04029fd8 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
04029fe0 l     O .rwdata	00000005 _ZL13pstrUsageOnce
04029fe8 l     O .rwdata	00000006 _ZL14pstrUsageDaily
04029ff0 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
04029ff8 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
04023cbc l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
04023cc8 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0402a000 l     O .rwdata	00000006 _ZL14pstrUsageEject
0402a008 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
04023cd4 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
04023ce0 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
04023cec l     O .rodata	00000009 _ZL17pstrUsageTracking
04023cf8 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
04023d04 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0402a010 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
04023d10 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0402a018 l     O .rwdata	00000005 _ZL13pstrUsageMark
04023d1c l     O .rodata	00000009 _ZL18pstrUsageClearMark
04023d28 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
04023d34 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
04023d40 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
04023d50 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
04023d64 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
04023d74 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
04023d84 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
04023d90 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
04023d9c l     O .rodata	0000000b _ZL18pstrUsageStopEject
04023da8 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
04023db4 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0402a020 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0402a024 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0402a02c l     O .rwdata	00000005 _ZL13pstrUsageBass
0402a034 l     O .rwdata	00000007 _ZL15pstrUsageTreble
04023dc0 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
04023dcc l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0402a03c l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0402a044 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0402a048 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0402a050 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0402a058 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
04023dd8 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
04023de4 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
04023df0 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
04023dfc l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0402a060 l     O .rwdata	00000005 _ZL13pstrUsageSlow
04023e08 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
04023e14 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
04023e20 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
04023e2c l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
04023e3c l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
04023e4c l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
04023e58 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
04023e64 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
04023e70 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0402a068 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0402a070 l     O .rwdata	00000007 _ZL15pstrUsageMotion
04023e7c l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
04023e88 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0402a078 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
04023e94 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
04023ea4 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
04023eb4 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
04023ec0 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
04023ecc l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
04023ed8 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0402a080 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0402a088 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
04023ee4 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
04023ef0 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
04023efc l     O .rodata	00000009 _ZL21pstrUsageChannelFront
04023f08 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0402a090 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
04023f18 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
04023f24 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0402a098 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0402a0a0 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0402a0a8 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
04023f34 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
04023f40 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
04023f4c l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
04023f58 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
04023f64 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
04023f74 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
04023f88 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
04023f94 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
04023fa8 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
04023fb8 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
04023fc4 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
04023fd4 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
04023fe4 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
04023ff4 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
04024000 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
04024010 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
0402401c l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
0402402c l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0402403c l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0402404c l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0402405c l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
04024070 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0402a0b0 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
04024080 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
04024094 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
040240a8 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
040240b8 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
040240c8 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
040240d8 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
040240e4 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
040240f0 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
040240fc l     O .rodata	00000009 _ZL16pstrUsageALLogon
04024108 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
04024114 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
04024124 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0402413c l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
04024148 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
04024154 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
04024160 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0402416c l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
04024178 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
04024184 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
04024198 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0402a0b8 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
040241a4 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0402a0c0 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
040241b0 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
040241bc l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
040241cc l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
040241d8 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
040241e8 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
040241f8 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
04024208 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
04024214 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
04024220 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
0402422c l     O .rodata	00000009 _ZL16pstrUsageALClock
04024238 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
04024248 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
04024254 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
04024260 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0402426c l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
04024278 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0402428c l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
0402429c l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
040242a8 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
040242bc l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
040242c8 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
040242d8 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
040242ec l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
04024300 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
04024314 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
04024324 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
0402433c l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
04024350 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
04024360 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
04024370 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0402a0c8 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0402a0d0 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
04024384 l     O .rodata	00000009 _ZL16pstrUsageACClose
0402a0d8 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0402a0e0 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0402a0e8 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0402a0f0 l     O .rwdata	00000008 _ZL15pstrUsageACSave
04024390 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0402a0f8 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0402a100 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0402a108 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0402a110 l     O .rwdata	00000007 _ZL14pstrUsageACCut
0402439c l     O .rodata	00000009 _ZL16pstrUsageACPaste
040243a8 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0402a118 l     O .rwdata	00000008 _ZL15pstrUsageACFind
040243b4 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
040243c4 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0402a120 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0402a128 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0402a130 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0402a138 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0402a140 l     O .rwdata	00000008 _ZL15pstrUsageACStop
040243d0 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
040243dc l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
040243ec l     O .rodata	0000000d _ZL19pstrUsageACNextLink
040243fc l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0402a148 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
04024408 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
04024414 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
04024420 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0402a150 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
0402442c l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
04024438 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
04024448 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
04024454 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
04024464 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
04024474 l     O .rodata	0000000a _ZL17pstrUsageACScroll
04024480 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
0402448c l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0402a158 l     O .rwdata	00000007 _ZL14pstrUsageACPan
0402449c l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
040244a8 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
040244b8 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0402a160 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0402a168 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0402a170 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0402a178 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
040244c8 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
040244d4 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0402a180 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
040244e0 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
040244ec l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
040244f8 l     O .rodata	0000000a _ZL17pstrUsageACRotate
04024504 l     O .rodata	0000000a _ZL17pstrUsageACResize
04024510 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
0402451c l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
04024528 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
04024534 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
04024540 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
0402454c l     O .rodata	0000000b _ZL20pstrUsageACFontColor
04024558 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
04024564 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
04024574 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
04024584 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
04024594 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
040245a4 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
040245b0 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
040245c0 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
040245cc l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
040245dc l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
040245ec l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
040245fc l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
04024608 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
04024614 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
04024620 l     O .rodata	0000000b _ZL18pstrUsageACPromote
0402462c l     O .rodata	0000000a _ZL17pstrUsageACDemote
0402a188 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0402a190 l     O .rwdata	00000006 _ZL13pstrUsageACNo
04024638 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0402a198 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0402a1a0 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
04024644 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0402a1a8 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
04024650 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
04024660 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
0402466c l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
0402467c l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
0402468c l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
0402469c l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0402a1b0 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0402a1b8 l     O .rwdata	00000008 _ZL15pstrUsageACLock
040246a8 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0402a1c0 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
040246b4 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
040246c0 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
040246d0 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
040246dc l     O .rodata	0000000d _ZL22pstrUsageACViewComment
040246ec l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
040246f8 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
04024704 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
04024710 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
0402471c l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
04024728 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
04024734 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0402a1c8 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0402a1d0 l     O .rwdata	00000008 _ZL15pstrUsageACSort
04024740 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
0402474c l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0402a1d8 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
0402475c l     O .rodata	0000000b _ZL19pstrUsageACSetClock
04024768 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
04024774 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
04024784 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
04024794 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
040247a0 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
040247ac l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
040247b8 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0402a1e0 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
040247c4 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
040247d0 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
040247dc l     O .rodata	00000009 _ZL16pstrUsageACReply
040247e8 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
040247f8 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0402a1e8 l     O .rwdata	00000007 _ZL15pstrUsageACSend
04024804 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0402a1f0 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0402a1f8 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
04024810 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
0402481c l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
04024828 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
04024834 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
04024840 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
0402484c l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
04024858 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
04024864 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
04024870 l     O .rodata	0000000a _ZL17pstrUsageACRename
0402487c l     O .rodata	00000009 _ZL16pstrUsageACMerge
04024888 l     O .rodata	00000009 _ZL16pstrUsageACSplit
04024894 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
040248a0 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
040248ac l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0402a200 l     O .rwdata	00000004 _ZL12pstrUsagePen
040248b8 l     O .rodata	0000000a _ZL17pstrUsageLightPen
040248c4 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
040248d0 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
040248dc l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
040248e8 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0402a204 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
040248f8 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0402a20c l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
04024904 l     O .rodata	00000009 _ZL17pstrUsageArmature
04024910 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
04024924 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0402a214 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0402a21c l     O .rwdata	00000005 _ZL13pstrUsagePuck
0402a224 l     O .rwdata	00000007 _ZL15pstrUsageFinger
04024934 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
04024940 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
0402494c l     O .rodata	00000009 _ZL16pstrUsageInRange
0402a22c l     O .rwdata	00000006 _ZL14pstrUsageTouch
0402a234 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0402a23c l     O .rwdata	00000004 _ZL12pstrUsageTap
0402a240 l     O .rwdata	00000005 _ZL16pstrUsageQuality
04024958 l     O .rodata	0000000b _ZL18pstrUsageDataValid
04024964 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
04024974 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
04024984 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0402a248 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0402a250 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0402a258 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0402a260 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
04024994 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0402a268 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0402a270 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
040249a0 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0402a278 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0402a280 l     O .rwdata	00000007 _ZL15pstrUsageEraser
040249ac l     O .rodata	00000009 _ZL19pstrUsageTabletPick
040249b8 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
040249c8 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
040249d4 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
040249e4 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
040249f0 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
04024a00 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
04024a0c l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
04024a1c l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
04024a28 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
04024a38 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
04024a48 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
04024a54 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
04024a60 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
04024a6c l     O .rodata	0000000a _ZL20pstrUsageDisplayData
04024a78 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
04024a84 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
04024a90 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
04024a9c l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
04024aac l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
04024abc l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0402a288 l     O .rwdata	00000004 _ZL12pstrUsageRow
0402a28c l     O .rwdata	00000004 _ZL15pstrUsageColumn
0402a290 l     O .rwdata	00000005 _ZL13pstrUsageRows
0402a298 l     O .rwdata	00000005 _ZL16pstrUsageColumns
04024ac8 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
04024ad4 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
04024ae0 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
04024aec l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0402a2a0 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
04024af8 l     O .rodata	00000009 _ZL17pstrUsageFontData
04024b04 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
04024b10 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
04024b1c l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
04024b2c l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
04024b3c l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
04024b4c l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
04024b58 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
04024b64 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
04024b70 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
04024b7c l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
04024b88 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
04024b94 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
04024ba0 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
04024bac l     O .rodata	0000000a _ZL22pstrUsageAttributeData
04024bb8 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
04024bc8 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
04024bd8 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
04024be8 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
04024bf4 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
04024c00 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
04024c10 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0402a2a8 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
04024c1c l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
04024c2c l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
04024c3c l     O .rodata	00000009 _ZL20pstrUsagePaletteData
04024c48 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
04024c54 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
04024c64 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
04024c74 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
04024c84 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
04024c94 l     O .rodata	0000000a _ZL17pstrUsageBlitData
04024ca0 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
04024cac l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
04024cb8 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
04024cc8 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
04024cd8 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
04024ce8 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
04024cf8 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0402a2b0 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0402a2b8 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
04024d08 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0402a2c0 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0402a2c8 l     O .rwdata	00000005 _ZL13pstrUsageNext
0402a2d0 l     O .rwdata	00000005 _ZL13pstrUsageSave
0402a2d8 l     O .rwdata	00000006 _ZL14pstrUsagePrint
04024d14 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0402a2e0 l     O .rwdata	00000005 _ZL13pstrUsageCine
04024d20 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0402a2e8 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0402a2f0 l     O .rwdata	00000006 _ZL14pstrUsageDepth
04024d2c l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
04024d3c l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
04024d4c l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
04024d5c l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
04024d68 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
04024d74 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
04024d88 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
04024d9c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
04024db0 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
04024dc4 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
04024dd4 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
04024de4 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
04024df0 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
04024dfc l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
04024e0c l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
0402a2f6 l     O .rwdata	00000001 _ZL9SPI_MODE0
0402a2f7 l     O .rwdata	00000001 _ZL9SPI_MODE1
0402a2f8 l     O .rwdata	00000001 _ZL9SPI_MODE2
0402a2f9 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
0402a2fc l     O .rwdata	00000001 _ZL9SPI_MODE0
0402a2fd l     O .rwdata	00000001 _ZL9SPI_MODE1
0402a2fe l     O .rwdata	00000001 _ZL9SPI_MODE2
0402a2ff l     O .rwdata	00000001 _ZL9SPI_MODE3
0402a300 l     O .rwdata	00000002 _ZL9pstrSpace
0402a304 l     O .rwdata	00000003 _ZL8pstrCRLF
0402a308 l     O .rwdata	00000002 _ZL13pstrSingleTab
0402a30c l     O .rwdata	00000003 _ZL13pstrDoubleTab
0402a310 l     O .rwdata	00000004 _ZL13pstrTripleTab
0402a314 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
04024eec l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
04024f00 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
04024f0c l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
04024f18 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
04024f24 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
04024f30 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
04024f40 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
0402a31c l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0402a324 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
0402a32c l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0402a334 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
04024f4c l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
04024f58 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0402a338 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
0402a33c l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
04024f64 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
04024f74 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0402a344 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
0402a34c l     O .rwdata	00000006 _ZL18pstrUsagePagePower
04024f84 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
0402a354 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
04024f94 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
0402a35c l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
04024fac l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0402a360 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
04024fb8 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
04024fc4 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0402a368 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0402a370 l     O .rwdata	00000006 _ZL14pstrUsageMouse
04024fd0 l     O .rodata	00000009 _ZL17pstrUsageJoystick
04024fdc l     O .rodata	00000009 _ZL16pstrUsageGamePad
0402a378 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
0402a380 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
04024fe8 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
04024ff8 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0402a388 l     O .rwdata	00000002 _ZL10pstrUsageX
0402a38c l     O .rwdata	00000002 _ZL10pstrUsageY
0402a390 l     O .rwdata	00000002 _ZL10pstrUsageZ
0402a394 l     O .rwdata	00000003 _ZL11pstrUsageRx
0402a398 l     O .rwdata	00000003 _ZL11pstrUsageRy
0402a39c l     O .rwdata	00000003 _ZL11pstrUsageRz
0402a3a0 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0402a3a8 l     O .rwdata	00000005 _ZL13pstrUsageDial
0402a3b0 l     O .rwdata	00000006 _ZL14pstrUsageWheel
0402500c l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
04025018 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
04025024 l     O .rodata	0000000b _ZL18pstrUsageByteCount
04025030 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0402a3b8 l     O .rwdata	00000006 _ZL14pstrUsageStart
0402a3c0 l     O .rwdata	00000004 _ZL15pstrUsageSelect
0402a3c4 l     O .rwdata	00000003 _ZL11pstrUsageVx
0402a3c8 l     O .rwdata	00000003 _ZL11pstrUsageVy
0402a3cc l     O .rwdata	00000003 _ZL11pstrUsageVz
0402a3d0 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0402a3d8 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0402a3e0 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0402a3e8 l     O .rwdata	00000004 _ZL12pstrUsageVno
04025040 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
04025050 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
0402505c l     O .rodata	00000009 _ZL22pstrUsageSystemControl
04025068 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
04025078 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
04025084 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
04025090 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
040250a4 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
040250b4 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
040250c4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
040250d4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
040250e4 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
040250f4 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
04025104 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
04025114 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
04025120 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
04025130 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
04025144 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
04025158 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
04025164 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
04025170 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
0402517c l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
04025188 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
04025194 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
040251a0 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
040251ac l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
040251b8 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
040251c4 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
040251d0 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
040251dc l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
040251ec l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
040251f8 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
04025208 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
04025218 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
04025228 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
04025238 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
04025248 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
04025260 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
04025278 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
04025290 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
040252a0 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
040252b0 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
040252c0 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
040252d0 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
040252e0 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
040252f0 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
04025300 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
04025310 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
04025320 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
04025330 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
04025348 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
04025358 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
0402536c l     O .rodata	0000000d _ZL20pstrUsageFlightStick
0402537c l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
04025388 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
04025394 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
040253a0 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
0402a3ec l     O .rwdata	00000008 _ZL16pstrUsageAileron
040253ac l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
040253bc l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
040253d0 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
040253e4 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
040253f4 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
04025404 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
04025410 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
04025424 l     O .rodata	00000009 _ZL17pstrUsageElevator
04025430 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
0402a3f4 l     O .rwdata	00000007 _ZL15pstrUsageRudder
04025440 l     O .rodata	00000009 _ZL17pstrUsageThrottle
0402544c l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
04025458 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
04025468 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
04025478 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
0402a3fc l     O .rwdata	00000008 _ZL16pstrUsageTrigger
04025484 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
04025490 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
0402549c l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
0402a404 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
0402a40c l     O .rwdata	00000006 _ZL14pstrUsageBrake
0402a414 l     O .rwdata	00000007 _ZL15pstrUsageClutch
0402a41c l     O .rwdata	00000008 _ZL16pstrUsageShifter
040254a8 l     O .rodata	00000009 _ZL17pstrUsageSteering
040254b4 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
040254c0 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
040254cc l     O .rodata	0000000b _ZL18pstrUsageDivePlane
0402a424 l     O .rwdata	00000008 _ZL16pstrUsageBallast
040254d8 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
040254e8 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
040254f4 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
04025500 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
0402a42c l     O .rwdata	00000005 _ZL13pstrUsageBelt
0402550c l     O .rodata	0000000a _ZL17pstrUsageBodySuit
0402a434 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
0402a43c l     O .rwdata	00000006 _ZL14pstrUsageGlove
04025518 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
04025524 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
04025530 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
0402553c l     O .rodata	0000000b _ZL19pstrUsageOculometer
0402a444 l     O .rwdata	00000005 _ZL13pstrUsageVest
04025548 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
04025554 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
04025560 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
04025570 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
04025580 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
0402558c l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
04025598 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
0402a44c l     O .rwdata	00000004 _ZL12pstrUsageOar
0402a450 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0402a458 l     O .rwdata	00000005 _ZL13pstrUsageRate
040255a4 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
040255b0 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
040255c0 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
040255d0 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
040255e0 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
040255ec l     O .rodata	0000000b _ZL18pstrUsageStickType
040255f8 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0402a460 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0402a468 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0402a470 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0402a478 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0402a480 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0402a488 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0402a490 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0402a498 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0402a4a0 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0402a4a8 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0402a4b0 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0402a4b8 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
04025604 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
04025610 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
0402561c l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0402a4c0 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0402a4c8 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0402a4d0 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0402a4d8 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0402a4e0 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
04025628 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
04025638 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0402a4e8 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0402a4f0 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
04025644 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
04025654 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
04025664 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
04025674 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
04025684 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
04025694 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
040256a4 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
040256b4 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
040256c4 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0402a4f4 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
040256d4 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0402a4fc l     O .rwdata	00000005 _ZL13pstrUsageBump
040256e4 l     O .rodata	00000009 _ZL16pstrUsageNewGame
040256f0 l     O .rodata	0000000b _ZL18pstrUsageShootBall
0402a504 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
040256fc l     O .rodata	00000009 _ZL16pstrUsageGunBolt
04025708 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0402a50c l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
04025714 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
04025724 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
04025730 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
0402573c l     O .rodata	0000000b _ZL18pstrUsageGunSafety
04025748 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
0402575c l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
0402576c l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
0402577c l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
04025788 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
04025794 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
040257ac l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
040257c0 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
040257d8 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
040257ec l     O .rodata	00000009 _ZL16pstrUsageNumLock
040257f8 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
04025804 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0402a514 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0402a51c l     O .rwdata	00000005 _ZL13pstrUsageKana
0402a524 l     O .rwdata	00000004 _ZL14pstrUsagePower
0402a528 l     O .rwdata	00000006 _ZL14pstrUsageShift
0402a530 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0402a534 l     O .rwdata	00000005 _ZL13pstrUsageMute
04025810 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
0402581c l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
0402582c l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0402a53c l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
0402583c l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
0402584c l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0402a544 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0402a54c l     O .rwdata	00000007 _ZL15pstrUsageStereo
04025858 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
0402586c l     O .rodata	00000009 _ZL17pstrUsageSpinning
0402a554 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0402a558 l     O .rwdata	00000004 _ZL12pstrUsageCLV
04025878 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
0402588c l     O .rodata	00000009 _ZL16pstrUsageOffHook
0402a55c l     O .rwdata	00000005 _ZL13pstrUsageRing
04025898 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
040258a4 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0402a564 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0402a56c l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0402a574 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0402a57c l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
040258b0 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0402a584 l     O .rwdata	00000005 _ZL13pstrUsageHold
0402a58c l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
040258bc l     O .rodata	00000009 _ZL17pstrUsageCoverage
040258c8 l     O .rodata	0000000b _ZL18pstrUsageNightMode
040258d4 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
040258e0 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0402a590 l     O .rwdata	00000005 _ZL19pstrUsageConference
040258ec l     O .rodata	00000009 _ZL16pstrUsageStandBy
0402a598 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0402a5a0 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0402a5a8 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
040258f8 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0402a5b0 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0402a5b8 l     O .rwdata	00000006 _ZL14pstrUsageReady
04025904 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
04025910 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0402a5c0 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0402a5c8 l     O .rwdata	00000004 _ZL16pstrUsageForward
0402a5cc l     O .rwdata	00000004 _ZL16pstrUsageReverse
0402a5d0 l     O .rwdata	00000005 _ZL13pstrUsageStop
0402a5d8 l     O .rwdata	00000007 _ZL15pstrUsageRewind
0402591c l     O .rodata	00000009 _ZL20pstrUsageFastForward
0402a5e0 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0402a5e8 l     O .rwdata	00000006 _ZL14pstrUsagePause
0402a5f0 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0402a5f4 l     O .rwdata	00000006 _ZL14pstrUsageError
04025928 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
04025938 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
0402594c l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0402a5fc l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
04025964 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
04025970 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
04025980 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0402a604 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
04025990 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
040259a0 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
040259b4 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
040259c8 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
040259dc l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
040259f0 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0402a60c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
04025a00 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
04025a0c l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0402a614 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
04025a18 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
04025a24 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0402a61c l     O .rwdata	00000006 _ZL14pstrUsagePhone
04025a34 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
04025a40 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0402a624 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0402a62c l     O .rwdata	00000008 _ZL16pstrUsageHeadset
04025a4c l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
04025a58 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0402a634 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0402a63c l     O .rwdata	00000006 _ZL14pstrUsageFlash
0402a644 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0402a64c l     O .rwdata	00000007 _ZL15pstrUsageRedial
04025a64 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0402a654 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0402a65c l     O .rwdata	00000005 _ZL13pstrUsagePark
04025a70 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
04025a7c l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0402a664 l     O .rwdata	00000005 _ZL13pstrUsageLine
04025a88 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
04025a94 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
04025aa0 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
04025aac l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
04025ab8 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0402a66c l     O .rwdata	00000005 _ZL13pstrUsageSend
04025ac4 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
04025ad0 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
04025adc l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
04025ae8 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
04025af4 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
04025b00 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0402a674 l     O .rwdata	00000004 _ZL16pstrUsageMessage
04025b10 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
04025b20 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
04025b34 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
04025b48 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
04025b5c l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
04025b70 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
04025b80 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
04025b90 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
04025ba4 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
04025bb4 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
04025bc4 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
04025bd4 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
04025be0 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
04025bec l     O .rodata	0000000a _ZL17pstrUsageTonesOff
04025bf8 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0402a678 l     O .rwdata	00000007 _ZL15pstrUsageRinger
0402a680 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0402a684 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0402a688 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0402a68c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0402a690 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0402a694 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0402a698 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0402a69c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0402a6a0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0402a6a4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0402a6a8 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0402a6ac l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0402a6b0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0402a6b4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0402a6b8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0402a6bc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
04025c0c l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
04025c1c l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
04025c28 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
04025c34 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0402a6c0 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0402a6c4 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0402a6cc l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0402a6d4 l     O .rwdata	00000006 _ZL14pstrUsageReset
0402a6dc l     O .rwdata	00000006 _ZL14pstrUsageSleep
04025c40 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
04025c4c l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0402a6e4 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
04025c58 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0402a6ec l     O .rwdata	00000005 _ZL13pstrUsageMenu
04025c64 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0402a6f4 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
04025c70 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
04025c7c l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
04025c88 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
04025c94 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
04025ca0 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
04025cb0 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
04025cc0 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
04025ccc l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
04025cd8 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0402a6fc l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
04025ce8 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
04025cf8 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0402a704 l     O .rwdata	00000006 _ZL14pstrUsageStill
0402a70c l     O .rwdata	00000004 _ZL18pstrUsageSelection
04025d04 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
04025d10 l     O .rodata	0000000a _ZL17pstrUsageModeStep
04025d1c l     O .rodata	0000000c _ZL19pstrUsageRecallLast
04025d28 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
04025d38 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0402a710 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0402a718 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
04025d44 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
04025d54 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
04025d60 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
04025d6c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
04025d78 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
04025d84 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
04025d90 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
04025d9c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
04025dac l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
04025db8 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
04025dc4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
04025dd0 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0402a720 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0402a728 l     O .rwdata	00000005 _ZL13pstrUsageHelp
04025de0 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
04025df0 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
04025dfc l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
04025e08 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
04025e18 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
04025e28 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0402a730 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0402a738 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
04025e38 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0402a740 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0402a748 l     O .rwdata	00000005 _ZL13pstrUsageOnce
0402a750 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0402a758 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0402a760 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
04025e44 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
04025e50 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0402a768 l     O .rwdata	00000006 _ZL14pstrUsageEject
0402a770 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
04025e5c l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
04025e68 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
04025e74 l     O .rodata	00000009 _ZL17pstrUsageTracking
04025e80 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
04025e8c l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0402a778 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
04025e98 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0402a780 l     O .rwdata	00000005 _ZL13pstrUsageMark
04025ea4 l     O .rodata	00000009 _ZL18pstrUsageClearMark
04025eb0 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
04025ebc l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
04025ec8 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
04025ed8 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
04025eec l     O .rodata	0000000e _ZL21pstrUsageCounterReset
04025efc l     O .rodata	0000000d _ZL20pstrUsageShowCounter
04025f0c l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
04025f18 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
04025f24 l     O .rodata	0000000b _ZL18pstrUsageStopEject
04025f30 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
04025f3c l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0402a788 l     O .rwdata	00000004 _ZL15pstrUsageVolume
0402a78c l     O .rwdata	00000008 _ZL16pstrUsageBalance
0402a794 l     O .rwdata	00000005 _ZL13pstrUsageBass
0402a79c l     O .rwdata	00000007 _ZL15pstrUsageTreble
04025f48 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
04025f54 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0402a7a4 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0402a7ac l     O .rwdata	00000004 _ZL12pstrUsageMPX
0402a7b0 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0402a7b8 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0402a7c0 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
04025f60 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
04025f6c l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
04025f78 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
04025f84 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0402a7c8 l     O .rwdata	00000005 _ZL13pstrUsageSlow
04025f90 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
04025f9c l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
04025fa8 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
04025fb4 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
04025fc4 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
04025fd4 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
04025fe0 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
04025fec l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
04025ff8 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0402a7d0 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0402a7d8 l     O .rwdata	00000007 _ZL15pstrUsageMotion
04026004 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
04026010 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0402a7e0 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
0402601c l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
0402602c l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
0402603c l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
04026048 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
04026054 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
04026060 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0402a7e8 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0402a7f0 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
0402606c l     O .rodata	00000009 _ZL21pstrUsageChannelRight
04026078 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
04026084 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
04026090 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0402a7f8 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
040260a0 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
040260ac l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0402a800 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0402a808 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0402a810 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
040260bc l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
040260c8 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
040260d4 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
040260e0 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
040260ec l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
040260fc l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
04026110 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
0402611c l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
04026130 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
04026140 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
0402614c l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
0402615c l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
0402616c l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
0402617c l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
04026188 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
04026198 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
040261a4 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
040261b4 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
040261c4 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
040261d4 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
040261e4 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
040261f8 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0402a818 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
04026208 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
0402621c l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
04026230 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
04026240 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
04026250 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
04026260 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
0402626c l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
04026278 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
04026284 l     O .rodata	00000009 _ZL16pstrUsageALLogon
04026290 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
0402629c l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
040262ac l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
040262c4 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
040262d0 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
040262dc l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
040262e8 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
040262f4 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
04026300 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
0402630c l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
04026320 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0402a820 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
0402632c l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0402a828 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
04026338 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
04026344 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
04026354 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
04026360 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
04026370 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
04026380 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
04026390 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
0402639c l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
040263a8 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
040263b4 l     O .rodata	00000009 _ZL16pstrUsageALClock
040263c0 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
040263d0 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
040263dc l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
040263e8 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
040263f4 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
04026400 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
04026414 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
04026424 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
04026430 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
04026444 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
04026450 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
04026460 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
04026474 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
04026488 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
0402649c l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
040264ac l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
040264c4 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
040264d8 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
040264e8 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
040264f8 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0402a830 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0402a838 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
0402650c l     O .rodata	00000009 _ZL16pstrUsageACClose
0402a840 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0402a848 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0402a850 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0402a858 l     O .rwdata	00000008 _ZL15pstrUsageACSave
04026518 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0402a860 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0402a868 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0402a870 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0402a878 l     O .rwdata	00000007 _ZL14pstrUsageACCut
04026524 l     O .rodata	00000009 _ZL16pstrUsageACPaste
04026530 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0402a880 l     O .rwdata	00000008 _ZL15pstrUsageACFind
0402653c l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
0402654c l     O .rodata	0000000a _ZL17pstrUsageACSearch
0402a888 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0402a890 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0402a898 l     O .rwdata	00000008 _ZL15pstrUsageACBack
0402a8a0 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0402a8a8 l     O .rwdata	00000008 _ZL15pstrUsageACStop
04026558 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
04026564 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
04026574 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
04026584 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0402a8b0 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
04026590 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0402659c l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
040265a8 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0402a8b8 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
040265b4 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
040265c0 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
040265d0 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
040265dc l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
040265ec l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
040265fc l     O .rodata	0000000a _ZL17pstrUsageACScroll
04026608 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
04026614 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0402a8c0 l     O .rwdata	00000007 _ZL14pstrUsageACPan
04026624 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
04026630 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
04026640 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0402a8c8 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0402a8d0 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0402a8d8 l     O .rwdata	00000008 _ZL15pstrUsageACBold
0402a8e0 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
04026650 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
0402665c l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0402a8e8 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
04026668 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
04026674 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
04026680 l     O .rodata	0000000a _ZL17pstrUsageACRotate
0402668c l     O .rodata	0000000a _ZL17pstrUsageACResize
04026698 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
040266a4 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
040266b0 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
040266bc l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
040266c8 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
040266d4 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
040266e0 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
040266ec l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
040266fc l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
0402670c l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
0402671c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
0402672c l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
04026738 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
04026748 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
04026754 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
04026764 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
04026774 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
04026784 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
04026790 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0402679c l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
040267a8 l     O .rodata	0000000b _ZL18pstrUsageACPromote
040267b4 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0402a8f0 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0402a8f8 l     O .rwdata	00000006 _ZL13pstrUsageACNo
040267c0 l     O .rodata	0000000a _ZL17pstrUsageACCancel
0402a900 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0402a908 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
040267cc l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0402a910 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
040267d8 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
040267e8 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
040267f4 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
04026804 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
04026814 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
04026824 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0402a918 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0402a920 l     O .rwdata	00000008 _ZL15pstrUsageACLock
04026830 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0402a928 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
0402683c l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
04026848 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
04026858 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
04026864 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
04026874 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
04026880 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
0402688c l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
04026898 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
040268a4 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
040268b0 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
040268bc l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0402a930 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0402a938 l     O .rwdata	00000008 _ZL15pstrUsageACSort
040268c8 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
040268d4 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0402a940 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
040268e4 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
040268f0 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
040268fc l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
0402690c l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
0402691c l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
04026928 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
04026934 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
04026940 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0402a948 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
0402694c l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
04026958 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
04026964 l     O .rodata	00000009 _ZL16pstrUsageACReply
04026970 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
04026980 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0402a950 l     O .rwdata	00000007 _ZL15pstrUsageACSend
0402698c l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0402a958 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0402a960 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
04026998 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
040269a4 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
040269b0 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
040269bc l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
040269c8 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
040269d4 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
040269e0 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
040269ec l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
040269f8 l     O .rodata	0000000a _ZL17pstrUsageACRename
04026a04 l     O .rodata	00000009 _ZL16pstrUsageACMerge
04026a10 l     O .rodata	00000009 _ZL16pstrUsageACSplit
04026a1c l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
04026a28 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
04026a34 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0402a968 l     O .rwdata	00000004 _ZL12pstrUsagePen
04026a40 l     O .rodata	0000000a _ZL17pstrUsageLightPen
04026a4c l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
04026a58 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
04026a64 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
04026a70 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0402a96c l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
04026a80 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0402a974 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
04026a8c l     O .rodata	00000009 _ZL17pstrUsageArmature
04026a98 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
04026aac l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0402a97c l     O .rwdata	00000007 _ZL15pstrUsageStylus
0402a984 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0402a98c l     O .rwdata	00000007 _ZL15pstrUsageFinger
04026abc l     O .rodata	0000000a _ZL20pstrUsageTipPressure
04026ac8 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
04026ad4 l     O .rodata	00000009 _ZL16pstrUsageInRange
0402a994 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0402a99c l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0402a9a4 l     O .rwdata	00000004 _ZL12pstrUsageTap
0402a9a8 l     O .rwdata	00000005 _ZL16pstrUsageQuality
04026ae0 l     O .rodata	0000000b _ZL18pstrUsageDataValid
04026aec l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
04026afc l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
04026b0c l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0402a9b0 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0402a9b8 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0402a9c0 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0402a9c8 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
04026b1c l     O .rodata	00000009 _ZL17pstrUsageAltitude
0402a9d0 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0402a9d8 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
04026b28 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0402a9e0 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0402a9e8 l     O .rwdata	00000007 _ZL15pstrUsageEraser
04026b34 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
04026b40 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
04026b50 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
04026b5c l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
04026b6c l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
04026b78 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
04026b88 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
04026b94 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
04026ba4 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
04026bb0 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
04026bc0 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
04026bd0 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
04026bdc l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
04026be8 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
04026bf4 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
04026c00 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
04026c0c l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
04026c18 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
04026c24 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
04026c34 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
04026c44 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0402a9f0 l     O .rwdata	00000004 _ZL12pstrUsageRow
0402a9f4 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0402a9f8 l     O .rwdata	00000005 _ZL13pstrUsageRows
0402aa00 l     O .rwdata	00000005 _ZL16pstrUsageColumns
04026c50 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
04026c5c l     O .rodata	00000009 _ZL19pstrUsageCursorMode
04026c68 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
04026c74 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0402aa08 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
04026c80 l     O .rodata	00000009 _ZL17pstrUsageFontData
04026c8c l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
04026c98 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
04026ca4 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
04026cb4 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
04026cc4 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
04026cd4 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
04026ce0 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
04026cec l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
04026cf8 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
04026d04 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
04026d10 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
04026d1c l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
04026d28 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
04026d34 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
04026d40 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
04026d50 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
04026d60 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
04026d70 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
04026d7c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
04026d88 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
04026d98 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0402aa10 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
04026da4 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
04026db4 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
04026dc4 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
04026dd0 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
04026ddc l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
04026dec l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
04026dfc l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
04026e0c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
04026e1c l     O .rodata	0000000a _ZL17pstrUsageBlitData
04026e28 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
04026e34 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
04026e40 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
04026e50 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
04026e60 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
04026e70 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
04026e80 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0402aa18 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0402aa20 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
04026e90 l     O .rodata	0000000b _ZL18pstrUsageClipStore
0402aa28 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0402aa30 l     O .rwdata	00000005 _ZL13pstrUsageNext
0402aa38 l     O .rwdata	00000005 _ZL13pstrUsageSave
0402aa40 l     O .rwdata	00000006 _ZL14pstrUsagePrint
04026e9c l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0402aa48 l     O .rwdata	00000005 _ZL13pstrUsageCine
04026ea8 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0402aa50 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0402aa58 l     O .rwdata	00000006 _ZL14pstrUsageDepth
04026eb4 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
04026ec4 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
04026ed4 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
04026ee4 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
04026ef0 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
04026efc l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
04026f10 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
04026f24 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
04026f38 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
04026f4c l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
04026f5c l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
04026f6c l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
04026f78 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
04026f84 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
04026f94 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
04026fa2 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
04026fb2 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0400acdc l     F .text	00000054 _Z41__static_initialization_and_destruction_0ii
0400ad30 l     F .text	00000030 _GLOBAL__sub_I_rcode
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0400bee0 l     F .text	000000a4 _ZL21size_of_encoded_valueh
0400bf84 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0400c190 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0400c1e4 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0400c270 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0400c3a4 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0400c42c l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0400c658 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0400cf30 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0400d218 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
0402ddd0 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0400d2d0 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0400d480 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
0402dcbc l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0400e2f0 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
0402dcc4 l     O .bss	00000004 fc_static
0400e408 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0400e4c8 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
040278f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
04027712 l     O .rodata	00000010 zeroes.4404
04011ca8 l     F .text	000000bc __sbprintf
04027722 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04011eb8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04013a10 l     F .text	00000008 __fp_unlock
04013a24 l     F .text	0000019c __sinit.part.1
04013bc0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
04028140 l     O .rwdata	00000020 lc_ctype_charset
04028120 l     O .rwdata	00000020 lc_message_charset
04028160 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
04027750 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
04016650 l     F .text	000000fc __sprint_r.part.0
04027874 l     O .rodata	00000010 zeroes.4349
04017c8c l     F .text	000000bc __sbprintf
04027884 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0401ba94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0401bba8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0401bc08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0401bd1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0401be04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0401bf70 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0401c05c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0401c238 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0402aab8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0401c4ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0401c590 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401c6cc l     F .text	00000034 alt_dev_reg
04028340 l     O .rwdata	00000038 i2c_0
04028378 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0401c7ac l     F .text	00000110 optional_irq_callback
0401c90c l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0401e5e8 l     F .text	0000020c altera_avalon_jtag_uart_irq
0401e7f4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0401f028 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401f3c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401f8b0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0401fa10 l     F .text	0000003c alt_get_errno
0401fa4c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0402dcfc g     O .bss	00000004 alt_instruction_exception_handler
0400d3d8 g     F .text	00000028 __cxa_free_exception
04020a20  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0400f3f0 g     F .text	00000018 putchar
0400ba34 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
04015c5c g     F .text	00000074 _mprec_log10
04004f90  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0400be80 g     F .text	00000018 _ZSt10unexpectedv
04015d48 g     F .text	0000008c __any_on
04018398 g     F .text	00000054 _isatty_r
0402775c g     O .rodata	00000028 __mprec_tinytens
0401c174 g     F .text	0000007c alt_main
0400f408 g     F .text	000000c0 _puts_r
04000e54 g     F .text	00000058 _ZN3USBC1Ev
0402de08 g     O .bss	00000100 alt_irq
0400d574 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
04009264 g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
040183ec g     F .text	00000060 _lseek_r
0400e584 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0402aad0 g       *ABS*	00000000 __flash_rwdata_start
040069f8 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0401a4d0 g     F .text	00000088 .hidden __eqdf2
04004f90  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
0400301c g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0400d004 g     F .text	00000084 __cxa_rethrow
0400e510 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0400bebc g     F .text	00000014 _ZSt14set_unexpectedPFvvE
0400e574 g     F .text	00000010 .hidden _Unwind_GetIP
0402df08 g       *ABS*	00000000 __alt_heap_start
04008ba4  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0400f7d4 g     F .text	0000005c _kill_r
04006d54 g     F .text	00000188 _ZN9USBH_MIDIC2EP3USB
0400f3ac g     F .text	0000003c printf
04020a44  w    O .rodata	0000002c _ZTV15USBDeviceConfig
040184ac g     F .text	0000009c _wcrtomb_r
0400f59c g     F .text	00000084 _signal_r
04006780  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
040165ec g     F .text	0000005c __sseek
04013d70 g     F .text	00000010 __sinit
04017d48 g     F .text	00000140 __swbuf_r
040098d8 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0400d454 g     F .text	0000002c __cxa_free_dependent_exception
0400ad88 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
04004f30  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
04014844 g     F .text	0000007c _setlocale_r
04027358  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
04013bc8 g     F .text	00000078 __sfmoreglue
0401d004 g     F .text	000000a8 alt_avalon_i2c_rx_read
0401c214 g     F .text	00000024 __malloc_unlock
0400d574 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
040084f4 g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0400b7bc g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04008c8c  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
0400274c g     F .text	00000710 _ZN3USB11ConfiguringEhhb
0400d1f8 g     F .text	00000020 _ZSt18uncaught_exceptionv
0400abac g     F .text	000000f8 _Z9print_hexii
0401e21c g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
040024bc g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
04009cac g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0402dcb8 g     O .bss	00000001 laststate
0400bab0 g     F .text	00000020 __cxa_deleted_virtual
0401cd88 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
0400348c  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
04008d50 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
040096e8 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
04014bc0 g     F .text	0000015c memmove
0400649c  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0400d54c g     F .text	00000004 _ZNSt9exceptionD2Ev
04013d58 g     F .text	00000018 _cleanup
0401da6c g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
04014d1c g     F .text	000000a8 _Balloc
0400e190 g     F .text	00000070 .hidden __fixsfsi
04004590 g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0400ab54 g     F .text	00000058 _Z6halt55v
0401a558 g     F .text	000000dc .hidden __gtdf2
04004654 g     F .text	000000f8 _ZN7XBOXONE4PollEv
0402758c  w    O .rodata	00000014 _ZTVSt13bad_exception
040200a0 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
0401c4e8 g     F .text	00000078 times
04008c0c  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0400e5c0 g     F .text	00000008 .hidden _Unwind_GetRegionStart
040293f4  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
04000020 g       *ABS*	00000000 __flash_exceptions_start
04008478 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
04000ae0 g     F .text	0000003c _ZN6SPI_SS3SetEh
0400545c  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
0401833c g     F .text	0000005c _fstat_r
040093b4 g     F .text	0000008c _ZN8MAX3421e5regWrEhh
04001160 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
0402dcd4 g     O .bss	00000004 errno
040061dc g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
04016568 g     F .text	00000008 __seofread
04008f60 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
0400e79c g     F .text	00000074 .hidden _Unwind_Backtrace
0402dce8 g     O .bss	00000004 alt_argv
04003c1c g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
040313d8 g       *ABS*	00000000 _gp
0401c560 g     F .text	00000030 usleep
0401e260 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0400dcac g     F .text	000004e4 .hidden __subsf3
04007e04 g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
04029b8c  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0401bcfc g     F .text	00000020 getpid
0400cd00 g     F .text	00000230 __cxa_call_unexpected
0400d088 g     F .text	00000008 __cxa_get_exception_ptr
0401cf18 g     F .text	00000044 alt_avalon_i2c_is_busy
040281c0 g     O .rwdata	00000180 alt_fd_list
04009110 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
04020990  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
04006d54 g     F .text	00000188 _ZN9USBH_MIDIC1EP3USB
04000dd4 g     F .text	00000058 _Z5delaym
04004d68 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0400f3e8 g     F .text	00000008 _putchar_r
0400e6b0 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
0401ccbc g     F .text	000000cc alt_avalon_i2c_master_config_set
0400235c g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0400e540 g     F .text	00000018 .hidden _Unwind_GetCFA
0400be98 g     F .text	00000014 _ZSt13set_terminatePFvvE
0401f560 g     F .text	00000090 alt_find_dev
04020984  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
0400f9a8 g     F .text	00000008 _times_r
0400f10c g     F .text	00000148 memcpy
04000ed8 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
04006564  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
04000b1c g     F .text	0000003c _ZN6SPI_SS5ClearEh
0400d400 g     F .text	00000054 __cxa_allocate_dependent_exception
04013a18 g     F .text	0000000c _cleanup_r
0400bb48 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0401b910 g     F .text	000000dc .hidden __floatsidf
04020a38  w    O .rodata	0000000c _ZTV13USBReadParser
0401f994 g     F .text	0000007c alt_io_redirect
0401a634 g     F .text	000000f4 .hidden __ltdf2
040052b0  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
040006bc g     F .text	00000300 initialize_sgtl5000
04000efc g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
040206cc g       *ABS*	00000000 __DTOR_END__
0400bb60 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0401d8ac g     F .text	000001c0 alt_avalon_i2c_master_transmit
0400f4c8 g     F .text	00000014 puts
040273e0  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
04020290 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04007e8c g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
04009198 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
040164a0 g     F .text	00000074 __fpclassifyd
04015bb8 g     F .text	000000a4 __ratio
04017c70 g     F .text	0000001c __vfiprintf_internal
04007908 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
0401e9ec g     F .text	0000021c altera_avalon_jtag_uart_read
0400e8d8 g     F .text	00000014 malloc
0400f37c g     F .text	00000030 _printf_r
080012a0 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0400d6dc g     F .text	00000064 .hidden __udivsi3
0401bd58 g     F .text	000000ac isatty
0400f620 g     F .text	000000bc _raise_r
04009354 g     F .text	0000003c _ZN8MAX3421eC2Ev
040277ac g     O .rodata	000000c8 __mprec_tens
040148c0 g     F .text	0000000c __locale_charset
04000e54 g     F .text	00000058 _ZN3USBC2Ev
04005268  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
0401cb28 g     F .text	00000098 alt_avalon_i2c_enable
0402dcd0 g     O .bss	00000004 __malloc_top_pad
0400f830 g     F .text	00000004 _getpid_r
0401e150 g     F .text	00000068 alt_avalon_i2c_int_disable
0402dcb4 g     O .bss	00000001 usb_task_state
0402aa98 g     O .rwdata	00000004 __mb_cur_max
040148f0 g     F .text	0000000c _localeconv_r
0400b04c g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
040045c0 g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
04006edc g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
04015150 g     F .text	0000003c __i2b
040141f4 g     F .text	000004c8 __sfvwrite_r
0400bce0 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0400f6dc g     F .text	000000a8 __sigtramp_r
040081c0 g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
04003544  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
0400f4dc g     F .text	00000054 _sbrk_r
04027428  w    O .rodata	00000020 _ZTVSt9type_info
04005360  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
04008ff8 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
0401844c g     F .text	00000060 _read_r
0400d554 g     F .text	0000000c _ZNKSt9exception4whatEv
0400026c g     F .text	000000b4 SGTL5000_Reg_Rd
0402aab0 g     O .rwdata	00000004 alt_max_fd
04006850 g     F .text	00000050 _Z9E_Notifycci
04008300 g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
04018030 g     F .text	000000f0 _fclose_r
040139e0 g     F .text	00000030 fflush
0402dccc g     O .bss	00000004 __malloc_max_sbrked_mem
04009660 g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
0401dc78 g     F .text	00000210 alt_avalon_i2c_master_receive
04022d20  w    O .rodata	0000000b _ZTS9USBH_MIDI
04019254 g     F .text	000008ac .hidden __adddf3
0402738c  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
0400538c  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
04008a58 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
04015960 g     F .text	0000010c __b2d
04018c90 g     F .text	000005c4 .hidden __umoddi3
0401c098 g     F .text	000000dc lseek
0400658c  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0400bba4 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
040069a8 g     F .text	00000028 _Z8E_Notifyhi
0400ba8c g     F .text	00000004 _ZdlPv
0401e1b8 g     F .text	00000064 alt_avalon_i2c_int_enable
0402aa88 g     O .rwdata	00000004 _global_impure_ptr
0400b05c g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
04015f3c g     F .text	00000564 _realloc_r
0402df08 g       *ABS*	00000000 __bss_end
0401f7c0 g     F .text	000000f0 alt_iic_isr_register
0401ff98 g     F .text	00000108 alt_tick
04000aac g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0400e4f8 g     F .text	00000018 .hidden _Unwind_SjLj_Register
04018694 g     F .text	000005fc .hidden __udivdi3
0401e078 g     F .text	00000058 alt_avalon_i2c_int_status_get
04018298 g     F .text	00000024 _fputwc_r
04027784 g     O .rodata	00000028 __mprec_bigtens
04014f34 g     F .text	00000104 __s2b
0400e874 g     F .text	00000018 abort
0401b9ec g     F .text	000000a8 .hidden __floatunsidf
04022c64  w    O .rodata	00000014 _ZTS17MouseReportParser
040156a0 g     F .text	00000060 __mcmp
04000e2c g     F .text	00000028 _Z6millisv
04008cc8  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
04003e00 g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0400d144 g     F .text	000000b4 __cxa_end_catch
0400908c g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
04013d90 g     F .text	00000018 __fp_lock_all
04020a7c  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
0401f774 g     F .text	0000004c alt_ic_irq_enabled
0400d550 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
04003810  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
0400653c  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
0401fefc g     F .text	0000009c alt_alarm_stop
04000a70 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
04022cac  w    O .rodata	0000003c _ZTV9USBH_MIDI
04000f30 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
0401c9a8 g     F .text	00000054 alt_avalon_i2c_register_callback
0402dcf0 g     O .bss	00000004 alt_irq_active
0401c9fc g     F .text	000000ec alt_avalon_i2c_init
0400be58 g     F .text	00000018 _ZSt9terminatev
040000fc g     F .exceptions	000000d4 alt_irq_handler
04028198 g     O .rwdata	00000028 alt_dev_null
0400b090 g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
040067b4  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0400d57c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
0400560c  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
040039bc  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
040032e4 g     F .text	00000084 _ZN3USB7setConfEhhh
04008b9c g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
04027484  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
04001044 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
0401f3a0 g     F .text	00000020 alt_dcache_flush_all
04015038 g     F .text	00000068 __hi0bits
04022d2c  w    O .rodata	0000000c _ZTI14MidiDescParser
040098b0 g     F .text	00000028 _Z10Vbus_powerb
0402aa70  w    O .rwdata	00000008 _ZTISt9exception
0401b890 g     F .text	00000080 .hidden __fixdfsi
04022c78  w    O .rodata	00000012 _ZTS15HIDReportParser
0400ad60  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
04001990 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0400a704 g     F .text	00000450 _Z9test_loopv
0402aad0 g       *ABS*	00000000 __ram_rwdata_end
0400ba30 g     F .text	00000004 _ZNSt9type_infoD1Ev
0402aaa8 g     O .rwdata	00000008 alt_dev_list
0400d57c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0401c5cc g     F .text	00000100 write
04015dd4 g     F .text	000000a0 _putc_r
04009d20 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
0401d338 g     F .text	0000004c alt_avalon_i2c_check_arblost
0400ba44 g     F .text	00000004 _ZNSt9type_infoD0Ev
04005484  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0400d7c0 g     F .text	000000bc .hidden __gtsf2
0400aca4 g     F .text	00000038 _Z13press_any_keyv
0401e114 g     F .text	0000003c alt_avalon_i2c_int_clear
04008d24  w    F .text	0000002c _Z10D_PrintHexItEvT_i
04020970  w    O .rodata	00000014 _ZTV11AddressPool
040278f4 g       *ABS*	00000000 __ram_rodata_end
0401bc44 g     F .text	000000b8 fstat
040033c0  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0401be40 g     F .text	00000130 kill
0400682c  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0401a634 g     F .text	000000f4 .hidden __ledf2
04020aa4  w    O .rodata	00000020 _ZTI7XBOXONE
0402aabc g     O .rwdata	00000008 alt_avalon_i2c_list
040051f0  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
04022bbe g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
04015418 g     F .text	00000140 __pow5mult
040057d8  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
04016764 g     F .text	0000150c ___vfiprintf_internal_r
0402dce0 g     O .bss	00000004 __nlocale_changed
0400d740 g     F .text	00000058 .hidden __umodsi3
0400ba3c g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
04004fcc  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
04002e5c g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0400beac g     F .text	00000010 _ZSt13get_terminatev
0402df08 g       *ABS*	00000000 end
04020a2c  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
040055d8  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
04009574 g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
0400674c  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0400e784 g     F .text	00000018 .hidden _Unwind_DeleteException
0401e528 g     F .text	000000c0 altera_avalon_jtag_uart_init
04006514  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0401cae8 g     F .text	00000040 alt_avalon_i2c_open
04022bd4 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
0400bc10 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0400b04c g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
04029b80 g     O .rwdata	00000004 UsbDEBUGlvl
040206c4 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0401d4c0 g     F .text	000000e8 alt_avalon_i2c_master_tx
0401f0a0 g     F .text	0000007c alt_avalon_timer_sc_init
0400e810 g     F .text	00000064 .hidden __clzsi2
0400bad0 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0401ec08 g     F .text	00000224 altera_avalon_jtag_uart_write
04013d80 g     F .text	00000004 __sfp_lock_acquire
04027514  w    O .rodata	00000012 _ZTSSt13bad_exception
04014adc g     F .text	000000e4 memchr
0400f9b0 g     F .text	000022dc ___vfprintf_internal_r
04004f30  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
04013ee4 g     F .text	00000310 _free_r
0401fc94 g     F .text	0000022c alt_printf
040148cc g     F .text	00000010 __locale_mb_cur_max
0402050c g     F .text	00000180 __call_exitprocs
04000b58 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
0402dcdc g     O .bss	00000004 __mlocale_changed
0401c8bc g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0402aa90 g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
04004598 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
0402dcf4 g     O .bss	00000004 _alt_tick_rate
04027418  w    O .rodata	0000000d _ZTSSt9type_info
0401de88 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0400ba90 g     F .text	00000020 __cxa_pure_virtual
0402095c  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
04020ae4  w    O .rodata	00000010 _ZTS13USBReadParser
0401e2ac g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
04015558 g     F .text	00000148 __lshift
0401ee2c g     F .text	000001fc alt_avalon_spi_command
0402dcf8 g     O .bss	00000004 _alt_nticks
0400f798 g     F .text	00000018 signal
0401c274 g     F .text	00000104 read
04005d04 g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
0401c738 g     F .text	00000074 alt_sys_init
040209e0  w    O .rodata	00000040 _ZTV7XBOXONE
04001a40 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
04000c7c g     F .text	00000158 _Z14alt_busy_sleepj
040203f4 g     F .text	00000118 __register_exitproc
04003250 g     F .text	00000094 _ZN3USB7setAddrEhhh
040068a0 g     F .text	00000084 _Z8E_NotifyPKci
04022ce8  w    O .rodata	0000000c _ZTV14MidiDescParser
04008c34  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
04003a50  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
04009d44 g     F .text	00000078 _Z8toBinaryh
0400adcc g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
04006718  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
0400541c  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0401d6e4 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
0401518c g     F .text	0000028c __multiply
040031a8 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
04029b6e g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
0401e894 g     F .text	00000068 altera_avalon_jtag_uart_close
040033c0  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0400d798 g     F .text	00000028 .hidden __mulsi3
040278f4 g       *ABS*	00000000 __ram_rwdata_start
0400e5e0 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
040206cc g       *ABS*	00000000 __ram_rodata_start
0402dde0 g     O .bss	00000028 __malloc_current_mallinfo
04005674  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0400e6f4 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
04015a6c g     F .text	0000014c __d2b
040275b4  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0400ba30 g     F .text	00000004 _ZNSt9type_infoD2Ev
04008be4  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
04005088  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
040293e0  w    O .rwdata	00000008 _ZTI11AddressPool
0400d580 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0400afc8 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04022d38  w    O .rodata	00000011 _ZTS14MidiDescParser
0400040c g     F .text	00000050 clearLED
040273b8  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
0401e3c4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040201cc g     F .text	000000c4 alt_get_fd
04005f20 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
0401f248 g     F .text	00000158 alt_busy_sleep
0402aa80  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
04017f00 g     F .text	00000054 _close_r
04020378 g     F .text	0000007c memcmp
0401cf5c g     F .text	000000a8 alt_avalon_i2c_rx_read_available
0401e484 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040079dc g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
0402df08 g       *ABS*	00000000 __alt_stack_base
0401e4d4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0400ad88 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
04007c44 g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
04004cc8 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
04011d64 g     F .text	00000154 __swsetup_r
0400e738 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
04019b00 g     F .text	000009d0 .hidden __divdf3
04013c40 g     F .text	00000118 __sfp
04015cd0 g     F .text	00000078 __copybits
0400ba34 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
04027d18 g     O .rwdata	00000408 __malloc_av_
0400504c  w    F .text	0000003c _ZN11ByteSkipperC1Ev
04000b94 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
04013d8c g     F .text	00000004 __sinit_lock_release
0401a728 g     F .text	0000086c .hidden __muldf3
04016514 g     F .text	00000054 __sread
04005640  w    F .text	00000034 _ZN13USBReadParserC2Ev
04027578  w    O .rodata	00000014 _ZTVSt9exception
0400d578 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
0400338c  w    F .text	00000034 _ZN11AddressPoolC2Ev
040200c4 g     F .text	00000108 alt_find_file
04005334  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
0401f3fc g     F .text	000000a4 alt_dev_llist_insert
0401c1f0 g     F .text	00000024 __malloc_lock
0401c3fc g     F .text	000000b0 sbrk
0401d384 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0401d2ec g     F .text	0000004c alt_avalon_i2c_check_nack
040274b4  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0400cf74 g     F .text	00000090 __cxa_throw
04013984 g     F .text	0000005c _fflush_r
0400e5a4 g     F .text	00000010 .hidden _Unwind_SetIP
040012ec g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
04017f54 g     F .text	000000dc _calloc_r
04020ad0  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
040069d0 g     F .text	00000028 _Z8E_Notifydi
0400779c g     F .text	0000016c _ZN9USBH_MIDI19setupDeviceSpecificEv
0402dcac g       *ABS*	00000000 __bss_start
04029404  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0400f254 g     F .text	00000128 memset
04008300 g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
04005854  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
04009dbc g     F .text	00000948 main
040095e8 g     F .text	00000078 _ZN8MAX3421e5regRdEh
040097e4 g     F .text	000000cc _ZN8MAX3421e5resetEv
0401d2b8 g     F .text	00000034 alt_avalon_i2c_master_target_set
0402dcec g     O .bss	00000004 alt_envp
04020af4  w    O .rodata	00000012 _ZTS15USBDeviceConfig
0402dcc8 g     O .bss	00000004 __malloc_max_total_mem
0401e424 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0402dcb5 g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
04017e88 g     F .text	00000018 __swbuf
0400d534 g     F .text	0000000c __cxa_get_globals_fast
0401e0d0 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
04009354 g     F .text	0000003c _ZN8MAX3421eC1Ev
0400560c  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
04003368  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
04016648 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04018120 g     F .text	00000014 fclose
04004b9c g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
04006924 g     F .text	00000084 _Z11E_NotifyStrPKci
04000bd0 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
040120e0 g     F .text	00001688 _dtoa_r
0400e900 g     F .text	0000080c _malloc_r
04018608 g     F .text	00000030 __ascii_wctomb
0400d560 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0402aab4 g     O .rwdata	00000004 alt_errno
04022c58  w    O .rodata	0000000c _ZTI17MouseReportParser
0400f7b0 g     F .text	00000010 _init_signal
040030b0 g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
040274a8  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
04004e0c g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
040146bc g     F .text	000000c4 _fwalk
04009390 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
04003954  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0400d550 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
04015e74 g     F .text	000000c8 putc
0400d5e4 g     F .text	00000084 .hidden __divsi3
04022d4c  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
0400057c g     F .text	00000140 printSignedHex1
04013dc0 g     F .text	00000124 _malloc_trim_r
040206cc g       *ABS*	00000000 __CTOR_END__
0400d87c g     F .text	00000430 .hidden __mulsf3
0400522c  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
04008cf0  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
04022c0c  w    O .rodata	00000028 _ZTV17MouseReportParser
0400f834 g     F .text	000000dc strcmp
04003c1c g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
040206cc g       *ABS*	00000000 __flash_rodata_start
040275a0  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
040206cc g       *ABS*	00000000 __DTOR_LIST__
04022cf4  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
04000320 g     F .text	000000a0 SGTL5000_Reg_Wr
0402dcb7 g     O .bss	00000001 usbstate
0401a4d0 g     F .text	00000088 .hidden __nedf2
0401c700 g     F .text	00000038 alt_irq_init
0401c378 g     F .text	00000084 alt_release_fd
0400ad98 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
04020ac4  w    O .rodata	00000009 _ZTS7XBOXONE
040275c8 g     O .rodata	00000100 .hidden __clz_tab
0402dcd8 g     O .bss	00000004 _PathLocale
0402032c g     F .text	00000014 atexit
0400d7c0 g     F .text	000000bc .hidden __gesf2
04017ea0 g     F .text	00000060 _write_r
04002f94 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
04003518  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
040148fc g     F .text	00000018 setlocale
04000c48 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
04022be0  w    O .rodata	0000002c _ZTV20KeyboardReportParser
04009768 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0400e5d8 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
040273ec  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0400d4dc g     F .text	00000058 __cxa_call_terminate
0402aa8c g     O .rwdata	00000004 _impure_ptr
0402aa78  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
040209ac  w    O .rodata	0000000e _ZTS11AddressPool
0402dce4 g     O .bss	00000004 alt_argc
04003b54  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
04013768 g     F .text	0000021c __sflush_r
04008cf0  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
040037a4  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
0401f500 g     F .text	00000060 _do_dtors
040148e8 g     F .text	00000008 __locale_cjk_lang
0401d280 g     F .text	00000038 alt_avalon_i2c_master_target_get
0401d190 g     F .text	000000f0 alt_avalon_i2c_send_address
0402dd00 g     O .bss	00000012 buf
0400bed0 g     F .text	00000010 _ZSt14get_unexpectedv
04000020 g       .exceptions	00000000 alt_irq_entry
0400338c  w    F .text	00000034 _ZN11AddressPoolC1Ev
04000eac g     F .text	0000002c _ZN3USB4initEv
040158fc g     F .text	00000064 __ulp
0400e5c8 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
04013da8 g     F .text	00000018 __fp_unlock_all
04005674  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
04004c8c g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
040052d4  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0402aaa0 g     O .rwdata	00000008 alt_fs_list
04027554  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
04022c40  w    O .rodata	00000017 _ZTS20KeyboardReportParser
04005640  w    F .text	00000034 _ZN13USBReadParserC1Ev
0400e5b4 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
04005300  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0400d090 g     F .text	000000b4 __cxa_begin_catch
04004e84 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
0400bb60 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0400be70 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
040064ec  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
04000020 g       *ABS*	00000000 __ram_exceptions_start
04014914 g     F .text	0000000c localeconv
04009ad4 g     F .text	00000174 _ZN8MAX3421e8busprobeEv
040009bc g     F .text	0000003c _ZN6SPI_SS5WriteEh
040003c0 g     F .text	0000004c setLED
040054ac  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0400d570 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
0401e35c g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0402aa6c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
04000c0c g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
04008df0 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
0401f610 g     F .text	00000050 alt_ic_isr_register
0401cbc0 g     F .text	0000004c alt_avalon_i2c_disable
0400d378 g     F .text	00000060 __cxa_allocate_exception
04027380  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0402aad0 g       *ABS*	00000000 _edata
040055d8  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
0402df08 g       *ABS*	00000000 _end
0400b1b8 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0400c700 g     F .text	00000600 __gxx_personality_sj0
04018134 g     F .text	00000164 __fputwc
04000230 g       *ABS*	00000000 __ram_exceptions_end
04001f6c g     F .text	000003f0 _ZN3USB4TaskEv
0401e8fc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
040009f8 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
040293fc  w    O .rwdata	00000008 _ZTI13USBReadParser
0401cc0c g     F .text	000000b0 alt_avalon_i2c_master_config_get
0400d54c g     F .text	00000004 _ZNSt9exceptionD1Ev
0401f6e8 g     F .text	0000008c alt_ic_irq_disable
04006474  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
04016570 g     F .text	0000007c __swrite
0402aa94 g     O .rwdata	00000004 __malloc_trim_threshold
040148dc g     F .text	0000000c __locale_msgcharset
04020340 g     F .text	00000038 exit
0400e558 g     F .text	0000001c .hidden _Unwind_SetGR
040064c4  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
04014780 g     F .text	000000c4 _fwalk_reent
0400af2c g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0400e200 g     F .text	000000f0 .hidden __floatunsisf
04015700 g     F .text	000001fc __mdiff
0400bd98 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0400d668 g     F .text	00000074 .hidden __modsi3
040016e4 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0402dcb6 g     O .bss	00000001 rcode
04013d84 g     F .text	00000004 __sfp_lock_release
04027528  w    O .rodata	0000000c _ZTISt13bad_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
040067dc  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
0400474c g     F .text	000003c8 _ZN7XBOXONE10readReportEv
0401ce1c g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
040099bc g     F .text	00000118 _ZN8MAX3421e4InitEi
04001dec g     F .text	00000180 _ZN3USB11dispatchPktEhht
0401d0ac g     F .text	000000e4 alt_avalon_i2c_cmd_write
04022d00  w    O .rodata	00000020 _ZTI9USBH_MIDI
04004b14 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0400d584 g     F .text	00000060 .hidden __fixunssfsi
040076fc g     F .text	000000a0 _ZN9USBH_MIDI7ReleaseEv
0401bbd4 g     F .text	00000034 _exit
0401f11c g     F .text	0000012c alt_alarm_start
04022c34  w    O .rodata	0000000c _ZTI20KeyboardReportParser
04007da0 g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0400045c g     F .text	00000120 printSignedHex0
0400e524 g     F .text	0000001c .hidden _Unwind_GetGR
0400d540 g     F .text	0000000c __cxa_get_globals
04006b00 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
04014920 g     F .text	000001bc __smakebuf_r
0402aa68 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0400528c  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0400f910 g     F .text	00000098 strlen
0400f530 g     F .text	0000006c _init_signal_r
0402aa60  w    O .rwdata	00000008 _ZTISt9type_info
0401fb38 g     F .text	0000015c open
0401a558 g     F .text	000000dc .hidden __gedf2
0401fec0 g     F .text	0000003c alt_putchar
04027504  w    O .rodata	0000000d _ZTSSt9exception
0400e88c g     F .text	0000004c clock
04006804  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
04009c48 g     F .text	00000064 _ZN8MAX3421e4TaskEv
04022bc8 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
04009440 g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0402aa9c g     O .rwdata	00000004 __wctomb
0400d56c g     F .text	00000004 _ZNSt9exceptionD0Ev
0401674c g     F .text	00000018 __sprint_r
0401f5f0 g     F .text	00000020 alt_icache_flush_all
0400e5d0 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
0402dd14 g     O .bss	000000bc Usb
0402aac4 g     O .rwdata	00000004 alt_priority_mask
0400504c  w    F .text	0000003c _ZN11ByteSkipperC2Ev
0401f660 g     F .text	00000088 alt_ic_irq_enable
04011c8c g     F .text	0000001c __vfprintf_internal
04000a3c g     F .text	00000034 _ZN6SPI_SS4ReadEv
04018638 g     F .text	0000005c _wctomb_r
0401af94 g     F .text	000008fc .hidden __subdf3
040015fc g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
04004454 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
040150a0 g     F .text	000000b0 __lo0bits
0402aac8 g     O .rwdata	00000008 alt_alarm_list
0401f4a0 g     F .text	00000060 _do_ctors
04020a70  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0400f7c0 g     F .text	00000014 __sigtramp
04008ea8 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
04018548 g     F .text	000000c0 wcrtomb
0401bad0 g     F .text	000000d8 close
0401e310 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
04027534  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0401bfd8 g     F .text	00000084 alt_load
0401d5a8 g     F .text	0000013c alt_avalon_i2c_master_rx
0400ba48 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
040050f0  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
040182bc g     F .text	00000080 fputwc
0400f784 g     F .text	00000014 raise
04029b74  w    O .rwdata	00000008 _ZTI15HIDReportParser
0400e8ec g     F .text	00000014 free
04013d88 g     F .text	00000004 __sinit_lock_acquire
04014dec g     F .text	00000148 __multadd
0400bb70 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
04014dc4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100f4 	movhi	r2,1027
 4000140:	10b78204 	addi	r2,r2,-8696
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100f4 	movhi	r2,1027
 4000158:	10b78204 	addi	r2,r2,-8696
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_mem_onchip_memory2_0+0xfbffee8c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_mem_onchip_memory2_0+0xfbffee80>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0b24917 	ldw	r2,-14044(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0b24917 	ldw	r2,-14044(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 400023c:	d684f614 	ori	gp,gp,5080
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	008100b4 	movhi	r2,1026
    ori r2, r2, %lo(__bss_start)
 4000244:	10b72b14 	ori	r2,r2,56492

    movhi r3, %hi(__bss_end)
 4000248:	00c100b4 	movhi	r3,1026
    ori r3, r3, %lo(__bss_end)
 400024c:	18f7c214 	ori	r3,r3,57096

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_mem_onchip_memory2_0+0xfbffefb4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	401bfd80 	call	401bfd8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	401c1740 	call	401c174 <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_mem_onchip_memory2_0+0xfbffefc8>

0400026c <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
 400026c:	defff804 	addi	sp,sp,-32
 4000270:	dfc00715 	stw	ra,28(sp)
 4000274:	df000615 	stw	fp,24(sp)
 4000278:	df000604 	addi	fp,sp,24
 400027c:	e13ffe15 	stw	r4,-8(fp)
 4000280:	2805883a 	mov	r2,r5
 4000284:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
 4000288:	e0bfff0b 	ldhu	r2,-4(fp)
 400028c:	1004d23a 	srli	r2,r2,8
 4000290:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
 4000294:	e0bfff0b 	ldhu	r2,-4(fp)
 4000298:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
 400029c:	e13ffd84 	addi	r4,fp,-10
 40002a0:	e0fffd84 	addi	r3,fp,-10
 40002a4:	d8000115 	stw	zero,4(sp)
 40002a8:	00800084 	movi	r2,2
 40002ac:	d8800015 	stw	r2,0(sp)
 40002b0:	200f883a 	mov	r7,r4
 40002b4:	01800084 	movi	r6,2
 40002b8:	180b883a 	mov	r5,r3
 40002bc:	e13ffe17 	ldw	r4,-8(fp)
 40002c0:	401d6e40 	call	401d6e4 <alt_avalon_i2c_master_tx_rx>
 40002c4:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 40002c8:	e0bffc17 	ldw	r2,-16(fp)
 40002cc:	10000626 	beq	r2,zero,40002e8 <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 40002d0:	e0bfff0b 	ldhu	r2,-4(fp)
 40002d4:	100b883a 	mov	r5,r2
 40002d8:	010100b4 	movhi	r4,1026
 40002dc:	2101b304 	addi	r4,r4,1740
 40002e0:	400f3ac0 	call	400f3ac <printf>
		while (1)
		{
			//hang here
		}
 40002e4:	003fff06 	br	40002e4 <__alt_mem_onchip_memory2_0+0xfbfff044>
	}
	value = (buffer[0] << 8) | buffer[1];
 40002e8:	e0bffd83 	ldbu	r2,-10(fp)
 40002ec:	10803fcc 	andi	r2,r2,255
 40002f0:	1004923a 	slli	r2,r2,8
 40002f4:	1007883a 	mov	r3,r2
 40002f8:	e0bffdc3 	ldbu	r2,-9(fp)
 40002fc:	10803fcc 	andi	r2,r2,255
 4000300:	1884b03a 	or	r2,r3,r2
 4000304:	e0bffd0d 	sth	r2,-12(fp)
	return value;
 4000308:	e0bffd0b 	ldhu	r2,-12(fp)
}
 400030c:	e037883a 	mov	sp,fp
 4000310:	dfc00117 	ldw	ra,4(sp)
 4000314:	df000017 	ldw	fp,0(sp)
 4000318:	dec00204 	addi	sp,sp,8
 400031c:	f800283a 	ret

04000320 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
 4000320:	defff904 	addi	sp,sp,-28
 4000324:	dfc00615 	stw	ra,24(sp)
 4000328:	df000515 	stw	fp,20(sp)
 400032c:	df000504 	addi	fp,sp,20
 4000330:	e13ffd15 	stw	r4,-12(fp)
 4000334:	2807883a 	mov	r3,r5
 4000338:	3005883a 	mov	r2,r6
 400033c:	e0fffe0d 	sth	r3,-8(fp)
 4000340:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
 4000344:	e0bffe0b 	ldhu	r2,-8(fp)
 4000348:	1004d23a 	srli	r2,r2,8
 400034c:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
 4000350:	e0bffe0b 	ldhu	r2,-8(fp)
 4000354:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
 4000358:	e0bfff0b 	ldhu	r2,-4(fp)
 400035c:	1004d23a 	srli	r2,r2,8
 4000360:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
 4000364:	e0bfff0b 	ldhu	r2,-4(fp)
 4000368:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
 400036c:	e0bffc04 	addi	r2,fp,-16
 4000370:	000f883a 	mov	r7,zero
 4000374:	01800104 	movi	r6,4
 4000378:	100b883a 	mov	r5,r2
 400037c:	e13ffd17 	ldw	r4,-12(fp)
 4000380:	401d4c00 	call	401d4c0 <alt_avalon_i2c_master_tx>
 4000384:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 4000388:	e0bffb17 	ldw	r2,-20(fp)
 400038c:	10000626 	beq	r2,zero,40003a8 <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 4000390:	e0bffe0b 	ldhu	r2,-8(fp)
 4000394:	100b883a 	mov	r5,r2
 4000398:	010100b4 	movhi	r4,1026
 400039c:	2101b304 	addi	r4,r4,1740
 40003a0:	400f3ac0 	call	400f3ac <printf>
		while (1)
		{
			//hang here
		}
 40003a4:	003fff06 	br	40003a4 <__alt_mem_onchip_memory2_0+0xfbfff104>
	}
	return DATA;
 40003a8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 40003ac:	e037883a 	mov	sp,fp
 40003b0:	dfc00117 	ldw	ra,4(sp)
 40003b4:	df000017 	ldw	fp,0(sp)
 40003b8:	dec00204 	addi	sp,sp,8
 40003bc:	f800283a 	ret

040003c0 <setLED>:
#include "sgtl5000/GenericTypeDefs.h"
#include "sgtl5000/sgtl5000.h"
#include "sgtl5000_test.h"

void setLED(int LED)
{
 40003c0:	defffe04 	addi	sp,sp,-8
 40003c4:	df000115 	stw	fp,4(sp)
 40003c8:	df000104 	addi	fp,sp,4
 40003cc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
 40003d0:	00820034 	movhi	r2,2048
 40003d4:	10849004 	addi	r2,r2,4672
 40003d8:	10c00037 	ldwio	r3,0(r2)
 40003dc:	01000044 	movi	r4,1
 40003e0:	e0bfff17 	ldw	r2,-4(fp)
 40003e4:	2084983a 	sll	r2,r4,r2
 40003e8:	1886b03a 	or	r3,r3,r2
 40003ec:	00820034 	movhi	r2,2048
 40003f0:	10849004 	addi	r2,r2,4672
 40003f4:	10c00035 	stwio	r3,0(r2)
}
 40003f8:	0001883a 	nop
 40003fc:	e037883a 	mov	sp,fp
 4000400:	df000017 	ldw	fp,0(sp)
 4000404:	dec00104 	addi	sp,sp,4
 4000408:	f800283a 	ret

0400040c <clearLED>:

void clearLED(int LED)
{
 400040c:	defffe04 	addi	sp,sp,-8
 4000410:	df000115 	stw	fp,4(sp)
 4000414:	df000104 	addi	fp,sp,4
 4000418:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));
 400041c:	00820034 	movhi	r2,2048
 4000420:	10849004 	addi	r2,r2,4672
 4000424:	10c00037 	ldwio	r3,0(r2)
 4000428:	01000044 	movi	r4,1
 400042c:	e0bfff17 	ldw	r2,-4(fp)
 4000430:	2084983a 	sll	r2,r4,r2
 4000434:	0084303a 	nor	r2,zero,r2
 4000438:	1886703a 	and	r3,r3,r2
 400043c:	00820034 	movhi	r2,2048
 4000440:	10849004 	addi	r2,r2,4672
 4000444:	10c00035 	stwio	r3,0(r2)

}
 4000448:	0001883a 	nop
 400044c:	e037883a 	mov	sp,fp
 4000450:	df000017 	ldw	fp,0(sp)
 4000454:	dec00104 	addi	sp,sp,4
 4000458:	f800283a 	ret

0400045c <printSignedHex0>:

void printSignedHex0(signed char value)
{
 400045c:	defffc04 	addi	sp,sp,-16
 4000460:	dfc00315 	stw	ra,12(sp)
 4000464:	df000215 	stw	fp,8(sp)
 4000468:	df000204 	addi	fp,sp,8
 400046c:	2005883a 	mov	r2,r4
 4000470:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000474:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 4000478:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 400047c:	00820034 	movhi	r2,2048
 4000480:	10849404 	addi	r2,r2,4688
 4000484:	10800037 	ldwio	r2,0(r2)
 4000488:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0)
 400048c:	e0bfff07 	ldb	r2,-4(fp)
 4000490:	1000060e 	bge	r2,zero,40004ac <printSignedHex0+0x50>
	{
		setLED(11);
 4000494:	010002c4 	movi	r4,11
 4000498:	40003c00 	call	40003c0 <setLED>
		value = -value;
 400049c:	e0bfff03 	ldbu	r2,-4(fp)
 40004a0:	0085c83a 	sub	r2,zero,r2
 40004a4:	e0bfff05 	stb	r2,-4(fp)
 40004a8:	00000206 	br	40004b4 <printSignedHex0+0x58>
	}
	else
	{
		clearLED(11);
 40004ac:	010002c4 	movi	r4,11
 40004b0:	400040c0 	call	400040c <clearLED>
	}
	//handled hundreds
	if (value / 100)
 40004b4:	e0bfff03 	ldbu	r2,-4(fp)
 40004b8:	108018c4 	addi	r2,r2,99
 40004bc:	10803fcc 	andi	r2,r2,255
 40004c0:	108031f0 	cmpltui	r2,r2,199
 40004c4:	1000031e 	bne	r2,zero,40004d4 <printSignedHex0+0x78>
		setLED(13);
 40004c8:	01000344 	movi	r4,13
 40004cc:	40003c00 	call	40003c0 <setLED>
 40004d0:	00000206 	br	40004dc <printSignedHex0+0x80>
	else
		clearLED(13);
 40004d4:	01000344 	movi	r4,13
 40004d8:	400040c0 	call	400040c <clearLED>

	value = value % 100;
 40004dc:	e0bfff07 	ldb	r2,-4(fp)
 40004e0:	01401904 	movi	r5,100
 40004e4:	1009883a 	mov	r4,r2
 40004e8:	400d6680 	call	400d668 <__modsi3>
 40004ec:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 40004f0:	e0bfff07 	ldb	r2,-4(fp)
 40004f4:	01400284 	movi	r5,10
 40004f8:	1009883a 	mov	r4,r2
 40004fc:	400d5e40 	call	400d5e4 <__divsi3>
 4000500:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 4000504:	e0bfff07 	ldb	r2,-4(fp)
 4000508:	01400284 	movi	r5,10
 400050c:	1009883a 	mov	r4,r2
 4000510:	400d6680 	call	400d668 <__modsi3>
 4000514:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 4000518:	e0bffe8b 	ldhu	r2,-6(fp)
 400051c:	10803fcc 	andi	r2,r2,255
 4000520:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 4000524:	e0bffe03 	ldbu	r2,-8(fp)
 4000528:	1004933a 	slli	r2,r2,12
 400052c:	1007883a 	mov	r3,r2
 4000530:	e0bffe8b 	ldhu	r2,-6(fp)
 4000534:	1884b03a 	or	r2,r3,r2
 4000538:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 400053c:	e0bffe43 	ldbu	r2,-7(fp)
 4000540:	1004923a 	slli	r2,r2,8
 4000544:	1007883a 	mov	r3,r2
 4000548:	e0bffe8b 	ldhu	r2,-6(fp)
 400054c:	1884b03a 	or	r2,r3,r2
 4000550:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000554:	e0fffe8b 	ldhu	r3,-6(fp)
 4000558:	00820034 	movhi	r2,2048
 400055c:	10849404 	addi	r2,r2,4688
 4000560:	10c00035 	stwio	r3,0(r2)
}
 4000564:	0001883a 	nop
 4000568:	e037883a 	mov	sp,fp
 400056c:	dfc00117 	ldw	ra,4(sp)
 4000570:	df000017 	ldw	fp,0(sp)
 4000574:	dec00204 	addi	sp,sp,8
 4000578:	f800283a 	ret

0400057c <printSignedHex1>:

void printSignedHex1(signed char value)
{
 400057c:	defffb04 	addi	sp,sp,-20
 4000580:	dfc00415 	stw	ra,16(sp)
 4000584:	df000315 	stw	fp,12(sp)
 4000588:	df000304 	addi	fp,sp,12
 400058c:	2005883a 	mov	r2,r4
 4000590:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000594:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 4000598:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 400059c:	00820034 	movhi	r2,2048
 40005a0:	10849404 	addi	r2,r2,4688
 40005a4:	10800037 	ldwio	r2,0(r2)
 40005a8:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0)
 40005ac:	e0bfff07 	ldb	r2,-4(fp)
 40005b0:	1000060e 	bge	r2,zero,40005cc <printSignedHex1+0x50>
	{
		setLED(10);
 40005b4:	01000284 	movi	r4,10
 40005b8:	40003c00 	call	40003c0 <setLED>
		value = -value;
 40005bc:	e0bfff03 	ldbu	r2,-4(fp)
 40005c0:	0085c83a 	sub	r2,zero,r2
 40005c4:	e0bfff05 	stb	r2,-4(fp)
 40005c8:	00000206 	br	40005d4 <printSignedHex1+0x58>
	}
	else
	{
		clearLED(10);
 40005cc:	01000284 	movi	r4,10
 40005d0:	400040c0 	call	400040c <clearLED>
	}
	//handled hundreds
	if (value / 100)
 40005d4:	e0bfff03 	ldbu	r2,-4(fp)
 40005d8:	108018c4 	addi	r2,r2,99
 40005dc:	10803fcc 	andi	r2,r2,255
 40005e0:	108031f0 	cmpltui	r2,r2,199
 40005e4:	1000031e 	bne	r2,zero,40005f4 <printSignedHex1+0x78>
		setLED(12);
 40005e8:	01000304 	movi	r4,12
 40005ec:	40003c00 	call	40003c0 <setLED>
 40005f0:	00000206 	br	40005fc <printSignedHex1+0x80>
	else
		clearLED(12);
 40005f4:	01000304 	movi	r4,12
 40005f8:	400040c0 	call	400040c <clearLED>

	value = value % 100;
 40005fc:	e0bfff07 	ldb	r2,-4(fp)
 4000600:	01401904 	movi	r5,100
 4000604:	1009883a 	mov	r4,r2
 4000608:	400d6680 	call	400d668 <__modsi3>
 400060c:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 4000610:	e0bfff07 	ldb	r2,-4(fp)
 4000614:	01400284 	movi	r5,10
 4000618:	1009883a 	mov	r4,r2
 400061c:	400d5e40 	call	400d5e4 <__divsi3>
 4000620:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 4000624:	e0bfff07 	ldb	r2,-4(fp)
 4000628:	01400284 	movi	r5,10
 400062c:	1009883a 	mov	r4,r2
 4000630:	400d6680 	call	400d668 <__modsi3>
 4000634:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 4000638:	e0bfff07 	ldb	r2,-4(fp)
 400063c:	01400284 	movi	r5,10
 4000640:	1009883a 	mov	r4,r2
 4000644:	400d5e40 	call	400d5e4 <__divsi3>
 4000648:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 400064c:	e0bfff07 	ldb	r2,-4(fp)
 4000650:	01400284 	movi	r5,10
 4000654:	1009883a 	mov	r4,r2
 4000658:	400d6680 	call	400d668 <__modsi3>
 400065c:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 4000660:	e0bffe17 	ldw	r2,-8(fp)
 4000664:	10bfc00c 	andi	r2,r2,65280
 4000668:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 400066c:	e0bffd03 	ldbu	r2,-12(fp)
 4000670:	1004913a 	slli	r2,r2,4
 4000674:	1007883a 	mov	r3,r2
 4000678:	e0bffe17 	ldw	r2,-8(fp)
 400067c:	10c4b03a 	or	r2,r2,r3
 4000680:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 4000684:	e0bffd43 	ldbu	r2,-11(fp)
 4000688:	e0fffe17 	ldw	r3,-8(fp)
 400068c:	1884b03a 	or	r2,r3,r2
 4000690:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000694:	e0fffe17 	ldw	r3,-8(fp)
 4000698:	00820034 	movhi	r2,2048
 400069c:	10849404 	addi	r2,r2,4688
 40006a0:	10c00035 	stwio	r3,0(r2)
}
 40006a4:	0001883a 	nop
 40006a8:	e037883a 	mov	sp,fp
 40006ac:	dfc00117 	ldw	ra,4(sp)
 40006b0:	df000017 	ldw	fp,0(sp)
 40006b4:	dec00204 	addi	sp,sp,8
 40006b8:	f800283a 	ret

040006bc <initialize_sgtl5000>:


int initialize_sgtl5000()
{
 40006bc:	defffc04 	addi	sp,sp,-16
 40006c0:	dfc00315 	stw	ra,12(sp)
 40006c4:	df000215 	stw	fp,8(sp)
 40006c8:	df000204 	addi	fp,sp,8
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
 40006cc:	010100b4 	movhi	r4,1026
 40006d0:	2101bb04 	addi	r4,r4,1772
 40006d4:	401cae80 	call	401cae8 <alt_avalon_i2c_open>
 40006d8:	e0bffe15 	stw	r2,-8(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
 40006dc:	e0bffe17 	ldw	r2,-8(fp)
 40006e0:	1000051e 	bne	r2,zero,40006f8 <initialize_sgtl5000+0x3c>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
 40006e4:	010100b4 	movhi	r4,1026
 40006e8:	2101be04 	addi	r4,r4,1784
 40006ec:	400f4c80 	call	400f4c8 <puts>
		return 1;
 40006f0:	00800044 	movi	r2,1
 40006f4:	0000ac06 	br	40009a8 <initialize_sgtl5000+0x2ec>
	}
	printf ("I2C Test Program\n");
 40006f8:	010100b4 	movhi	r4,1026
 40006fc:	2101c604 	addi	r4,r4,1816
 4000700:	400f4c80 	call	400f4c8 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
 4000704:	01400284 	movi	r5,10
 4000708:	e13ffe17 	ldw	r4,-8(fp)
 400070c:	401d2b80 	call	401d2b8 <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
 4000710:	000b883a 	mov	r5,zero
 4000714:	e13ffe17 	ldw	r4,-8(fp)
 4000718:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 400071c:	10bfffcc 	andi	r2,r2,65535
 4000720:	100b883a 	mov	r5,r2
 4000724:	010100b4 	movhi	r4,1026
 4000728:	2101cb04 	addi	r4,r4,1836
 400072c:	400f3ac0 	call	400f3ac <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
 4000730:	00800384 	movi	r2,14
 4000734:	e0bfff05 	stb	r2,-4(fp)
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
 4000738:	e0bfff03 	ldbu	r2,-4(fp)
 400073c:	1009883a 	mov	r4,r2
 4000740:	400e2000 	call	400e200 <__floatunsisf>
 4000744:	1007883a 	mov	r3,r2
 4000748:	180b883a 	mov	r5,r3
 400074c:	011059f4 	movhi	r4,16743
 4000750:	210d8144 	addi	r4,r4,13829
 4000754:	400dcac0 	call	400dcac <__subsf3>
 4000758:	1007883a 	mov	r3,r2
 400075c:	1805883a 	mov	r2,r3
 4000760:	01514034 	movhi	r5,17664
 4000764:	1009883a 	mov	r4,r2
 4000768:	400d87c0 	call	400d87c <__mulsf3>
 400076c:	1007883a 	mov	r3,r2
 4000770:	1805883a 	mov	r2,r3
 4000774:	1009883a 	mov	r4,r2
 4000778:	400d5840 	call	400d584 <__fixunssfsi>
 400077c:	e0bfff8d 	sth	r2,-2(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
 4000780:	e0bfff03 	ldbu	r2,-4(fp)
 4000784:	e0ffff8b 	ldhu	r3,-2(fp)
 4000788:	180d883a 	mov	r6,r3
 400078c:	100b883a 	mov	r5,r2
 4000790:	010100b4 	movhi	r4,1026
 4000794:	2101d104 	addi	r4,r4,1860
 4000798:	400f3ac0 	call	400f3ac <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
 400079c:	e0bfff03 	ldbu	r2,-4(fp)
 40007a0:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
 40007a4:	1007883a 	mov	r3,r2
 40007a8:	e0bfff8b 	ldhu	r2,-2(fp)
 40007ac:	1884b03a 	or	r2,r3,r2
 40007b0:	10bfffcc 	andi	r2,r2,65535
 40007b4:	100d883a 	mov	r6,r2
 40007b8:	01400c84 	movi	r5,50
 40007bc:	e13ffe17 	ldw	r4,-8(fp)
 40007c0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
 40007c4:	01400c84 	movi	r5,50
 40007c8:	e13ffe17 	ldw	r4,-8(fp)
 40007cc:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40007d0:	10bfffcc 	andi	r2,r2,65535
 40007d4:	100b883a 	mov	r5,r2
 40007d8:	010100b4 	movhi	r4,1026
 40007dc:	2101e204 	addi	r4,r4,1928
 40007e0:	400f3ac0 	call	400f3ac <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
 40007e4:	01917f84 	movi	r6,17918
 40007e8:	01400c04 	movi	r5,48
 40007ec:	e13ffe17 	ldw	r4,-8(fp)
 40007f0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
 40007f4:	01400c04 	movi	r5,48
 40007f8:	e13ffe17 	ldw	r4,-8(fp)
 40007fc:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000800:	10bfffcc 	andi	r2,r2,65535
 4000804:	100b883a 	mov	r5,r2
 4000808:	010100b4 	movhi	r4,1026
 400080c:	2101e904 	addi	r4,r4,1956
 4000810:	400f3ac0 	call	400f3ac <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
 4000814:	01801384 	movi	r6,78
 4000818:	01400a04 	movi	r5,40
 400081c:	e13ffe17 	ldw	r4,-8(fp)
 4000820:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
 4000824:	01400a04 	movi	r5,40
 4000828:	e13ffe17 	ldw	r4,-8(fp)
 400082c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000830:	10bfffcc 	andi	r2,r2,65535
 4000834:	100b883a 	mov	r5,r2
 4000838:	010100b4 	movhi	r4,1026
 400083c:	2101f104 	addi	r4,r4,1988
 4000840:	400f3ac0 	call	400f3ac <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
 4000844:	018018c4 	movi	r6,99
 4000848:	01400084 	movi	r5,2
 400084c:	e13ffe17 	ldw	r4,-8(fp)
 4000850:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
 4000854:	01400084 	movi	r5,2
 4000858:	e13ffe17 	ldw	r4,-8(fp)
 400085c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000860:	10bfffcc 	andi	r2,r2,65535
 4000864:	100b883a 	mov	r5,r2
 4000868:	010100b4 	movhi	r4,1026
 400086c:	2101f804 	addi	r4,r4,2016
 4000870:	400f3ac0 	call	400f3ac <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
 4000874:	018001c4 	movi	r6,7
 4000878:	01400104 	movi	r5,4
 400087c:	e13ffe17 	ldw	r4,-8(fp)
 4000880:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
 4000884:	01400104 	movi	r5,4
 4000888:	e13ffe17 	ldw	r4,-8(fp)
 400088c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000890:	10bfffcc 	andi	r2,r2,65535
 4000894:	100b883a 	mov	r5,r2
 4000898:	010100b4 	movhi	r4,1026
 400089c:	21020004 	addi	r4,r4,2048
 40008a0:	400f3ac0 	call	400f3ac <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
 40008a4:	01802004 	movi	r6,128
 40008a8:	01400184 	movi	r5,6
 40008ac:	e13ffe17 	ldw	r4,-8(fp)
 40008b0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
 40008b4:	01400184 	movi	r5,6
 40008b8:	e13ffe17 	ldw	r4,-8(fp)
 40008bc:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40008c0:	10bfffcc 	andi	r2,r2,65535
 40008c4:	100b883a 	mov	r5,r2
 40008c8:	010100b4 	movhi	r4,1026
 40008cc:	21020704 	addi	r4,r4,2076
 40008d0:	400f3ac0 	call	400f3ac <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
 40008d4:	01800104 	movi	r6,4
 40008d8:	01400904 	movi	r5,36
 40008dc:	e13ffe17 	ldw	r4,-8(fp)
 40008e0:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 40008e4:	01400904 	movi	r5,36
 40008e8:	e13ffe17 	ldw	r4,-8(fp)
 40008ec:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40008f0:	10bfffcc 	andi	r2,r2,65535
 40008f4:	100b883a 	mov	r5,r2
 40008f8:	010100b4 	movhi	r4,1026
 40008fc:	21020e04 	addi	r4,r4,2104
 4000900:	400f3ac0 	call	400f3ac <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
 4000904:	01800404 	movi	r6,16
 4000908:	01400284 	movi	r5,10
 400090c:	e13ffe17 	ldw	r4,-8(fp)
 4000910:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
 4000914:	01400284 	movi	r5,10
 4000918:	e13ffe17 	ldw	r4,-8(fp)
 400091c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000920:	10bfffcc 	andi	r2,r2,65535
 4000924:	100b883a 	mov	r5,r2
 4000928:	010100b4 	movhi	r4,1026
 400092c:	21021504 	addi	r4,r4,2132
 4000930:	400f3ac0 	call	400f3ac <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 4000934:	01400904 	movi	r5,36
 4000938:	e13ffe17 	ldw	r4,-8(fp)
 400093c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000940:	10bfffcc 	andi	r2,r2,65535
 4000944:	100b883a 	mov	r5,r2
 4000948:	010100b4 	movhi	r4,1026
 400094c:	21020e04 	addi	r4,r4,2104
 4000950:	400f3ac0 	call	400f3ac <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
 4000954:	000d883a 	mov	r6,zero
 4000958:	01400384 	movi	r5,14
 400095c:	e13ffe17 	ldw	r4,-8(fp)
 4000960:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
 4000964:	01400384 	movi	r5,14
 4000968:	e13ffe17 	ldw	r4,-8(fp)
 400096c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000970:	10bfffcc 	andi	r2,r2,65535
 4000974:	100b883a 	mov	r5,r2
 4000978:	010100b4 	movhi	r4,1026
 400097c:	21021c04 	addi	r4,r4,2160
 4000980:	400f3ac0 	call	400f3ac <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
 4000984:	01400504 	movi	r5,20
 4000988:	e13ffe17 	ldw	r4,-8(fp)
 400098c:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000990:	10bfffcc 	andi	r2,r2,65535
 4000994:	100b883a 	mov	r5,r2
 4000998:	010100b4 	movhi	r4,1026
 400099c:	21022404 	addi	r4,r4,2192
 40009a0:	400f3ac0 	call	400f3ac <printf>


	return 0;
 40009a4:	0005883a 	mov	r2,zero
}
 40009a8:	e037883a 	mov	sp,fp
 40009ac:	dfc00117 	ldw	ra,4(sp)
 40009b0:	df000017 	ldw	fp,0(sp)
 40009b4:	dec00204 	addi	sp,sp,8
 40009b8:	f800283a 	ret

040009bc <_ZN6SPI_SS5WriteEh>:
 40009bc:	defffd04 	addi	sp,sp,-12
 40009c0:	dfc00215 	stw	ra,8(sp)
 40009c4:	df000115 	stw	fp,4(sp)
 40009c8:	df000104 	addi	fp,sp,4
 40009cc:	2005883a 	mov	r2,r4
 40009d0:	e0bfff05 	stb	r2,-4(fp)
 40009d4:	010100b4 	movhi	r4,1026
 40009d8:	21022c04 	addi	r4,r4,2224
 40009dc:	400f4c80 	call	400f4c8 <puts>
 40009e0:	0001883a 	nop
 40009e4:	e037883a 	mov	sp,fp
 40009e8:	dfc00117 	ldw	ra,4(sp)
 40009ec:	df000017 	ldw	fp,0(sp)
 40009f0:	dec00204 	addi	sp,sp,8
 40009f4:	f800283a 	ret

040009f8 <_ZN6SPI_SS11ClearAndSetEhh>:
 40009f8:	defffc04 	addi	sp,sp,-16
 40009fc:	dfc00315 	stw	ra,12(sp)
 4000a00:	df000215 	stw	fp,8(sp)
 4000a04:	df000204 	addi	fp,sp,8
 4000a08:	2007883a 	mov	r3,r4
 4000a0c:	2805883a 	mov	r2,r5
 4000a10:	e0fffe05 	stb	r3,-8(fp)
 4000a14:	e0bfff05 	stb	r2,-4(fp)
 4000a18:	010100b4 	movhi	r4,1026
 4000a1c:	21022f04 	addi	r4,r4,2236
 4000a20:	400f4c80 	call	400f4c8 <puts>
 4000a24:	0001883a 	nop
 4000a28:	e037883a 	mov	sp,fp
 4000a2c:	dfc00117 	ldw	ra,4(sp)
 4000a30:	df000017 	ldw	fp,0(sp)
 4000a34:	dec00204 	addi	sp,sp,8
 4000a38:	f800283a 	ret

04000a3c <_ZN6SPI_SS4ReadEv>:
 4000a3c:	defffe04 	addi	sp,sp,-8
 4000a40:	dfc00115 	stw	ra,4(sp)
 4000a44:	df000015 	stw	fp,0(sp)
 4000a48:	d839883a 	mov	fp,sp
 4000a4c:	010100b4 	movhi	r4,1026
 4000a50:	21023404 	addi	r4,r4,2256
 4000a54:	400f4c80 	call	400f4c8 <puts>
 4000a58:	0001883a 	nop
 4000a5c:	e037883a 	mov	sp,fp
 4000a60:	dfc00117 	ldw	ra,4(sp)
 4000a64:	df000017 	ldw	fp,0(sp)
 4000a68:	dec00204 	addi	sp,sp,8
 4000a6c:	f800283a 	ret

04000a70 <_ZN6SPI_SS8DirWriteEh>:
 4000a70:	defffd04 	addi	sp,sp,-12
 4000a74:	dfc00215 	stw	ra,8(sp)
 4000a78:	df000115 	stw	fp,4(sp)
 4000a7c:	df000104 	addi	fp,sp,4
 4000a80:	2005883a 	mov	r2,r4
 4000a84:	e0bfff05 	stb	r2,-4(fp)
 4000a88:	010100b4 	movhi	r4,1026
 4000a8c:	21023704 	addi	r4,r4,2268
 4000a90:	400f4c80 	call	400f4c8 <puts>
 4000a94:	0001883a 	nop
 4000a98:	e037883a 	mov	sp,fp
 4000a9c:	dfc00117 	ldw	ra,4(sp)
 4000aa0:	df000017 	ldw	fp,0(sp)
 4000aa4:	dec00204 	addi	sp,sp,8
 4000aa8:	f800283a 	ret

04000aac <_ZN6SPI_SS7DirReadEv>:
 4000aac:	defffe04 	addi	sp,sp,-8
 4000ab0:	dfc00115 	stw	ra,4(sp)
 4000ab4:	df000015 	stw	fp,0(sp)
 4000ab8:	d839883a 	mov	fp,sp
 4000abc:	010100b4 	movhi	r4,1026
 4000ac0:	21023b04 	addi	r4,r4,2284
 4000ac4:	400f4c80 	call	400f4c8 <puts>
 4000ac8:	0001883a 	nop
 4000acc:	e037883a 	mov	sp,fp
 4000ad0:	dfc00117 	ldw	ra,4(sp)
 4000ad4:	df000017 	ldw	fp,0(sp)
 4000ad8:	dec00204 	addi	sp,sp,8
 4000adc:	f800283a 	ret

04000ae0 <_ZN6SPI_SS3SetEh>:
 4000ae0:	defffd04 	addi	sp,sp,-12
 4000ae4:	dfc00215 	stw	ra,8(sp)
 4000ae8:	df000115 	stw	fp,4(sp)
 4000aec:	df000104 	addi	fp,sp,4
 4000af0:	2005883a 	mov	r2,r4
 4000af4:	e0bfff05 	stb	r2,-4(fp)
 4000af8:	010100b4 	movhi	r4,1026
 4000afc:	21023f04 	addi	r4,r4,2300
 4000b00:	400f4c80 	call	400f4c8 <puts>
 4000b04:	0001883a 	nop
 4000b08:	e037883a 	mov	sp,fp
 4000b0c:	dfc00117 	ldw	ra,4(sp)
 4000b10:	df000017 	ldw	fp,0(sp)
 4000b14:	dec00204 	addi	sp,sp,8
 4000b18:	f800283a 	ret

04000b1c <_ZN6SPI_SS5ClearEh>:
 4000b1c:	defffd04 	addi	sp,sp,-12
 4000b20:	dfc00215 	stw	ra,8(sp)
 4000b24:	df000115 	stw	fp,4(sp)
 4000b28:	df000104 	addi	fp,sp,4
 4000b2c:	2005883a 	mov	r2,r4
 4000b30:	e0bfff05 	stb	r2,-4(fp)
 4000b34:	010100b4 	movhi	r4,1026
 4000b38:	21024204 	addi	r4,r4,2312
 4000b3c:	400f4c80 	call	400f4c8 <puts>
 4000b40:	0001883a 	nop
 4000b44:	e037883a 	mov	sp,fp
 4000b48:	dfc00117 	ldw	ra,4(sp)
 4000b4c:	df000017 	ldw	fp,0(sp)
 4000b50:	dec00204 	addi	sp,sp,8
 4000b54:	f800283a 	ret

04000b58 <_ZN6SPI_SS6ToggleEh>:
 4000b58:	defffd04 	addi	sp,sp,-12
 4000b5c:	dfc00215 	stw	ra,8(sp)
 4000b60:	df000115 	stw	fp,4(sp)
 4000b64:	df000104 	addi	fp,sp,4
 4000b68:	2005883a 	mov	r2,r4
 4000b6c:	e0bfff05 	stb	r2,-4(fp)
 4000b70:	010100b4 	movhi	r4,1026
 4000b74:	21024504 	addi	r4,r4,2324
 4000b78:	400f4c80 	call	400f4c8 <puts>
 4000b7c:	0001883a 	nop
 4000b80:	e037883a 	mov	sp,fp
 4000b84:	dfc00117 	ldw	ra,4(sp)
 4000b88:	df000017 	ldw	fp,0(sp)
 4000b8c:	dec00204 	addi	sp,sp,8
 4000b90:	f800283a 	ret

04000b94 <_ZN6SPI_SS6DirSetEh>:
 4000b94:	defffd04 	addi	sp,sp,-12
 4000b98:	dfc00215 	stw	ra,8(sp)
 4000b9c:	df000115 	stw	fp,4(sp)
 4000ba0:	df000104 	addi	fp,sp,4
 4000ba4:	2005883a 	mov	r2,r4
 4000ba8:	e0bfff05 	stb	r2,-4(fp)
 4000bac:	010100b4 	movhi	r4,1026
 4000bb0:	21024804 	addi	r4,r4,2336
 4000bb4:	400f4c80 	call	400f4c8 <puts>
 4000bb8:	0001883a 	nop
 4000bbc:	e037883a 	mov	sp,fp
 4000bc0:	dfc00117 	ldw	ra,4(sp)
 4000bc4:	df000017 	ldw	fp,0(sp)
 4000bc8:	dec00204 	addi	sp,sp,8
 4000bcc:	f800283a 	ret

04000bd0 <_ZN6SPI_SS8DirClearEh>:
 4000bd0:	defffd04 	addi	sp,sp,-12
 4000bd4:	dfc00215 	stw	ra,8(sp)
 4000bd8:	df000115 	stw	fp,4(sp)
 4000bdc:	df000104 	addi	fp,sp,4
 4000be0:	2005883a 	mov	r2,r4
 4000be4:	e0bfff05 	stb	r2,-4(fp)
 4000be8:	010100b4 	movhi	r4,1026
 4000bec:	21024b04 	addi	r4,r4,2348
 4000bf0:	400f4c80 	call	400f4c8 <puts>
 4000bf4:	0001883a 	nop
 4000bf8:	e037883a 	mov	sp,fp
 4000bfc:	dfc00117 	ldw	ra,4(sp)
 4000c00:	df000017 	ldw	fp,0(sp)
 4000c04:	dec00204 	addi	sp,sp,8
 4000c08:	f800283a 	ret

04000c0c <_ZN6SPI_SS9DirToggleEh>:
 4000c0c:	defffd04 	addi	sp,sp,-12
 4000c10:	dfc00215 	stw	ra,8(sp)
 4000c14:	df000115 	stw	fp,4(sp)
 4000c18:	df000104 	addi	fp,sp,4
 4000c1c:	2005883a 	mov	r2,r4
 4000c20:	e0bfff05 	stb	r2,-4(fp)
 4000c24:	010100b4 	movhi	r4,1026
 4000c28:	21024f04 	addi	r4,r4,2364
 4000c2c:	400f4c80 	call	400f4c8 <puts>
 4000c30:	0001883a 	nop
 4000c34:	e037883a 	mov	sp,fp
 4000c38:	dfc00117 	ldw	ra,4(sp)
 4000c3c:	df000017 	ldw	fp,0(sp)
 4000c40:	dec00204 	addi	sp,sp,8
 4000c44:	f800283a 	ret

04000c48 <_ZN6SPI_SS7PinReadEv>:
 4000c48:	defffe04 	addi	sp,sp,-8
 4000c4c:	dfc00115 	stw	ra,4(sp)
 4000c50:	df000015 	stw	fp,0(sp)
 4000c54:	d839883a 	mov	fp,sp
 4000c58:	010100b4 	movhi	r4,1026
 4000c5c:	21025304 	addi	r4,r4,2380
 4000c60:	400f4c80 	call	400f4c8 <puts>
 4000c64:	0001883a 	nop
 4000c68:	e037883a 	mov	sp,fp
 4000c6c:	dfc00117 	ldw	ra,4(sp)
 4000c70:	df000017 	ldw	fp,0(sp)
 4000c74:	dec00204 	addi	sp,sp,8
 4000c78:	f800283a 	ret

04000c7c <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4000c7c:	defffa04 	addi	sp,sp,-24
 4000c80:	dfc00515 	stw	ra,20(sp)
 4000c84:	df000415 	stw	fp,16(sp)
 4000c88:	df000404 	addi	fp,sp,16
 4000c8c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4000c90:	00800244 	movi	r2,9
 4000c94:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4000c98:	014003f4 	movhi	r5,15
 4000c9c:	29509004 	addi	r5,r5,16960
 4000ca0:	e13ffd17 	ldw	r4,-12(fp)
 4000ca4:	400d7980 	call	400d798 <__mulsi3>
 4000ca8:	100b883a 	mov	r5,r2
 4000cac:	0100bef4 	movhi	r4,763
 4000cb0:	213c2004 	addi	r4,r4,-3968
 4000cb4:	400d6dc0 	call	400d6dc <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
 4000cb8:	100b883a 	mov	r5,r2
 4000cbc:	01200034 	movhi	r4,32768
 4000cc0:	213fffc4 	addi	r4,r4,-1
 4000cc4:	400d6dc0 	call	400d6dc <__udivsi3>
 4000cc8:	100b883a 	mov	r5,r2
 4000ccc:	e13fff17 	ldw	r4,-4(fp)
 4000cd0:	400d6dc0 	call	400d6dc <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4000cd4:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
 4000cd8:	e0bffe17 	ldw	r2,-8(fp)
 4000cdc:	10002a26 	beq	r2,zero,4000d88 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4000ce0:	e03ffc15 	stw	zero,-16(fp)
 4000ce4:	e0fffc17 	ldw	r3,-16(fp)
 4000ce8:	e0bffe17 	ldw	r2,-8(fp)
 4000cec:	1880180e 	bge	r3,r2,4000d50 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
 4000cf0:	00a00034 	movhi	r2,32768
 4000cf4:	10bfffc4 	addi	r2,r2,-1
 4000cf8:	10bfffc4 	addi	r2,r2,-1
 4000cfc:	103ffe1e 	bne	r2,zero,4000cf8 <__alt_mem_onchip_memory2_0+0xfbfffa58>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4000d00:	014003f4 	movhi	r5,15
 4000d04:	29509004 	addi	r5,r5,16960
 4000d08:	e13ffd17 	ldw	r4,-12(fp)
 4000d0c:	400d7980 	call	400d798 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4000d10:	100b883a 	mov	r5,r2
 4000d14:	0100bef4 	movhi	r4,763
 4000d18:	213c2004 	addi	r4,r4,-3968
 4000d1c:	400d6dc0 	call	400d6dc <__udivsi3>
 4000d20:	100b883a 	mov	r5,r2
 4000d24:	01200034 	movhi	r4,32768
 4000d28:	213fffc4 	addi	r4,r4,-1
 4000d2c:	400d6dc0 	call	400d6dc <__udivsi3>
 4000d30:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
 4000d34:	e0bfff17 	ldw	r2,-4(fp)
 4000d38:	10c5c83a 	sub	r2,r2,r3
 4000d3c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4000d40:	e0bffc17 	ldw	r2,-16(fp)
 4000d44:	10800044 	addi	r2,r2,1
 4000d48:	e0bffc15 	stw	r2,-16(fp)
 4000d4c:	003fe506 	br	4000ce4 <__alt_mem_onchip_memory2_0+0xfbfffa44>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4000d50:	014003f4 	movhi	r5,15
 4000d54:	29509004 	addi	r5,r5,16960
 4000d58:	e13ffd17 	ldw	r4,-12(fp)
 4000d5c:	400d7980 	call	400d798 <__mulsi3>
 4000d60:	100b883a 	mov	r5,r2
 4000d64:	0100bef4 	movhi	r4,763
 4000d68:	213c2004 	addi	r4,r4,-3968
 4000d6c:	400d6dc0 	call	400d6dc <__udivsi3>
 4000d70:	e17fff17 	ldw	r5,-4(fp)
 4000d74:	1009883a 	mov	r4,r2
 4000d78:	400d7980 	call	400d798 <__mulsi3>
 4000d7c:	10bfffc4 	addi	r2,r2,-1
 4000d80:	103ffe1e 	bne	r2,zero,4000d7c <__alt_mem_onchip_memory2_0+0xfbfffadc>
 4000d84:	00000d06 	br	4000dbc <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4000d88:	014003f4 	movhi	r5,15
 4000d8c:	29509004 	addi	r5,r5,16960
 4000d90:	e13ffd17 	ldw	r4,-12(fp)
 4000d94:	400d7980 	call	400d798 <__mulsi3>
 4000d98:	100b883a 	mov	r5,r2
 4000d9c:	0100bef4 	movhi	r4,763
 4000da0:	213c2004 	addi	r4,r4,-3968
 4000da4:	400d6dc0 	call	400d6dc <__udivsi3>
 4000da8:	e17fff17 	ldw	r5,-4(fp)
 4000dac:	1009883a 	mov	r4,r2
 4000db0:	400d7980 	call	400d798 <__mulsi3>
 4000db4:	10bfffc4 	addi	r2,r2,-1
 4000db8:	00bffe16 	blt	zero,r2,4000db4 <__alt_mem_onchip_memory2_0+0xfbfffb14>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4000dbc:	0005883a 	mov	r2,zero
}
 4000dc0:	e037883a 	mov	sp,fp
 4000dc4:	dfc00117 	ldw	ra,4(sp)
 4000dc8:	df000017 	ldw	fp,0(sp)
 4000dcc:	dec00204 	addi	sp,sp,8
 4000dd0:	f800283a 	ret

04000dd4 <_Z5delaym>:

void delay(uint32_t a) {
 4000dd4:	defffc04 	addi	sp,sp,-16
 4000dd8:	dfc00315 	stw	ra,12(sp)
 4000ddc:	df000215 	stw	fp,8(sp)
 4000de0:	df000204 	addi	fp,sp,8
 4000de4:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
 4000de8:	400e88c0 	call	400e88c <clock>
 4000dec:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
 4000df0:	400e88c0 	call	400e88c <clock>
 4000df4:	1007883a 	mov	r3,r2
 4000df8:	e0bffe17 	ldw	r2,-8(fp)
 4000dfc:	1887c83a 	sub	r3,r3,r2
 4000e00:	e0bfff17 	ldw	r2,-4(fp)
 4000e04:	1885803a 	cmpltu	r2,r3,r2
 4000e08:	10803fcc 	andi	r2,r2,255
 4000e0c:	10000126 	beq	r2,zero,4000e14 <_Z5delaym+0x40>
 4000e10:	003ff706 	br	4000df0 <__alt_mem_onchip_memory2_0+0xfbfffb50>
}
 4000e14:	0001883a 	nop
 4000e18:	e037883a 	mov	sp,fp
 4000e1c:	dfc00117 	ldw	ra,4(sp)
 4000e20:	df000017 	ldw	fp,0(sp)
 4000e24:	dec00204 	addi	sp,sp,8
 4000e28:	f800283a 	ret

04000e2c <_Z6millisv>:
uint32_t millis() {
 4000e2c:	defffe04 	addi	sp,sp,-8
 4000e30:	dfc00115 	stw	ra,4(sp)
 4000e34:	df000015 	stw	fp,0(sp)
 4000e38:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
 4000e3c:	400e88c0 	call	400e88c <clock>
}
 4000e40:	e037883a 	mov	sp,fp
 4000e44:	dfc00117 	ldw	ra,4(sp)
 4000e48:	df000017 	ldw	fp,0(sp)
 4000e4c:	dec00204 	addi	sp,sp,8
 4000e50:	f800283a 	ret

04000e54 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 4000e54:	defffd04 	addi	sp,sp,-12
 4000e58:	dfc00215 	stw	ra,8(sp)
 4000e5c:	df000115 	stw	fp,4(sp)
 4000e60:	df000104 	addi	fp,sp,4
 4000e64:	e13fff15 	stw	r4,-4(fp)
 4000e68:	e13fff17 	ldw	r4,-4(fp)
 4000e6c:	40093540 	call	4009354 <_ZN8MAX3421eC1Ev>
 4000e70:	e0bfff17 	ldw	r2,-4(fp)
 4000e74:	1009883a 	mov	r4,r2
 4000e78:	40033c00 	call	40033c0 <_ZN15AddressPoolImplILh16EEC1Ev>
 4000e7c:	e0bfff17 	ldw	r2,-4(fp)
 4000e80:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 4000e84:	00800444 	movi	r2,17
 4000e88:	d0b23545 	stb	r2,-14123(gp)
        init();
 4000e8c:	e13fff17 	ldw	r4,-4(fp)
 4000e90:	4000eac0 	call	4000eac <_ZN3USB4initEv>
}
 4000e94:	0001883a 	nop
 4000e98:	e037883a 	mov	sp,fp
 4000e9c:	dfc00117 	ldw	ra,4(sp)
 4000ea0:	df000017 	ldw	fp,0(sp)
 4000ea4:	dec00204 	addi	sp,sp,8
 4000ea8:	f800283a 	ret

04000eac <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 4000eac:	defffe04 	addi	sp,sp,-8
 4000eb0:	df000115 	stw	fp,4(sp)
 4000eb4:	df000104 	addi	fp,sp,4
 4000eb8:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
 4000ebc:	e0bfff17 	ldw	r2,-4(fp)
 4000ec0:	10002e05 	stb	zero,184(r2)
}
 4000ec4:	0001883a 	nop
 4000ec8:	e037883a 	mov	sp,fp
 4000ecc:	df000017 	ldw	fp,0(sp)
 4000ed0:	dec00104 	addi	sp,sp,4
 4000ed4:	f800283a 	ret

04000ed8 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
 4000ed8:	defffe04 	addi	sp,sp,-8
 4000edc:	df000115 	stw	fp,4(sp)
 4000ee0:	df000104 	addi	fp,sp,4
 4000ee4:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
 4000ee8:	d0b23543 	ldbu	r2,-14123(gp)
}
 4000eec:	e037883a 	mov	sp,fp
 4000ef0:	df000017 	ldw	fp,0(sp)
 4000ef4:	dec00104 	addi	sp,sp,4
 4000ef8:	f800283a 	ret

04000efc <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
 4000efc:	defffd04 	addi	sp,sp,-12
 4000f00:	df000215 	stw	fp,8(sp)
 4000f04:	df000204 	addi	fp,sp,8
 4000f08:	e13ffe15 	stw	r4,-8(fp)
 4000f0c:	2805883a 	mov	r2,r5
 4000f10:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
 4000f14:	e0bfff03 	ldbu	r2,-4(fp)
 4000f18:	d0b23545 	stb	r2,-14123(gp)
}
 4000f1c:	0001883a 	nop
 4000f20:	e037883a 	mov	sp,fp
 4000f24:	df000017 	ldw	fp,0(sp)
 4000f28:	dec00104 	addi	sp,sp,4
 4000f2c:	f800283a 	ret

04000f30 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 4000f30:	defff804 	addi	sp,sp,-32
 4000f34:	dfc00715 	stw	ra,28(sp)
 4000f38:	df000615 	stw	fp,24(sp)
 4000f3c:	df000604 	addi	fp,sp,24
 4000f40:	e13ffd15 	stw	r4,-12(fp)
 4000f44:	2807883a 	mov	r3,r5
 4000f48:	3005883a 	mov	r2,r6
 4000f4c:	e0fffe05 	stb	r3,-8(fp)
 4000f50:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 4000f54:	e0bffd17 	ldw	r2,-12(fp)
 4000f58:	e0fffe03 	ldbu	r3,-8(fp)
 4000f5c:	180b883a 	mov	r5,r3
 4000f60:	1009883a 	mov	r4,r2
 4000f64:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4000f68:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
 4000f6c:	e0bffc17 	ldw	r2,-16(fp)
 4000f70:	10000c26 	beq	r2,zero,4000fa4 <_ZN3USB14getEpInfoEntryEhh+0x74>
 4000f74:	e0bffc17 	ldw	r2,-16(fp)
 4000f78:	10c00003 	ldbu	r3,0(r2)
 4000f7c:	11000043 	ldbu	r4,1(r2)
 4000f80:	2008923a 	slli	r4,r4,8
 4000f84:	20c6b03a 	or	r3,r4,r3
 4000f88:	11000083 	ldbu	r4,2(r2)
 4000f8c:	2008943a 	slli	r4,r4,16
 4000f90:	20c6b03a 	or	r3,r4,r3
 4000f94:	108000c3 	ldbu	r2,3(r2)
 4000f98:	1004963a 	slli	r2,r2,24
 4000f9c:	10c4b03a 	or	r2,r2,r3
 4000fa0:	1000021e 	bne	r2,zero,4000fac <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
 4000fa4:	0005883a 	mov	r2,zero
 4000fa8:	00002106 	br	4001030 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
 4000fac:	e0bffc17 	ldw	r2,-16(fp)
 4000fb0:	10c00003 	ldbu	r3,0(r2)
 4000fb4:	11000043 	ldbu	r4,1(r2)
 4000fb8:	2008923a 	slli	r4,r4,8
 4000fbc:	20c6b03a 	or	r3,r4,r3
 4000fc0:	11000083 	ldbu	r4,2(r2)
 4000fc4:	2008943a 	slli	r4,r4,16
 4000fc8:	20c6b03a 	or	r3,r4,r3
 4000fcc:	108000c3 	ldbu	r2,3(r2)
 4000fd0:	1004963a 	slli	r2,r2,24
 4000fd4:	10c4b03a 	or	r2,r2,r3
 4000fd8:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
 4000fdc:	e03ffb05 	stb	zero,-20(fp)
 4000fe0:	e0bffc17 	ldw	r2,-16(fp)
 4000fe4:	10800143 	ldbu	r2,5(r2)
 4000fe8:	10803fcc 	andi	r2,r2,255
 4000fec:	e0fffb03 	ldbu	r3,-20(fp)
 4000ff0:	18800e2e 	bgeu	r3,r2,400102c <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
 4000ff4:	e0bffa17 	ldw	r2,-24(fp)
 4000ff8:	10800003 	ldbu	r2,0(r2)
 4000ffc:	10c03fcc 	andi	r3,r2,255
 4001000:	e0bfff03 	ldbu	r2,-4(fp)
 4001004:	1880021e 	bne	r3,r2,4001010 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
 4001008:	e0bffa17 	ldw	r2,-24(fp)
 400100c:	00000806 	br	4001030 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
 4001010:	e0bffa17 	ldw	r2,-24(fp)
 4001014:	108000c4 	addi	r2,r2,3
 4001018:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
 400101c:	e0bffb03 	ldbu	r2,-20(fp)
 4001020:	10800044 	addi	r2,r2,1
 4001024:	e0bffb05 	stb	r2,-20(fp)
 4001028:	003fed06 	br	4000fe0 <__alt_mem_onchip_memory2_0+0xfbfffd40>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
 400102c:	0005883a 	mov	r2,zero
}
 4001030:	e037883a 	mov	sp,fp
 4001034:	dfc00117 	ldw	ra,4(sp)
 4001038:	df000017 	ldw	fp,0(sp)
 400103c:	dec00204 	addi	sp,sp,8
 4001040:	f800283a 	ret

04001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 4001044:	defff904 	addi	sp,sp,-28
 4001048:	dfc00615 	stw	ra,24(sp)
 400104c:	df000515 	stw	fp,20(sp)
 4001050:	df000504 	addi	fp,sp,20
 4001054:	e13ffc15 	stw	r4,-16(fp)
 4001058:	2807883a 	mov	r3,r5
 400105c:	3005883a 	mov	r2,r6
 4001060:	e1ffff15 	stw	r7,-4(fp)
 4001064:	e0fffd05 	stb	r3,-12(fp)
 4001068:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
 400106c:	e0bfff17 	ldw	r2,-4(fp)
 4001070:	1000021e 	bne	r2,zero,400107c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
 4001074:	00bff604 	movi	r2,-40
 4001078:	00003406 	br	400114c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 400107c:	e0bffc17 	ldw	r2,-16(fp)
 4001080:	e0fffd03 	ldbu	r3,-12(fp)
 4001084:	180b883a 	mov	r5,r3
 4001088:	1009883a 	mov	r4,r2
 400108c:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4001090:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
 4001094:	e0bffb17 	ldw	r2,-20(fp)
 4001098:	1000021e 	bne	r2,zero,40010a4 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 400109c:	00bff584 	movi	r2,-42
 40010a0:	00002a06 	br	400114c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
 40010a4:	e0bffb17 	ldw	r2,-20(fp)
 40010a8:	e0fffd03 	ldbu	r3,-12(fp)
 40010ac:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
 40010b0:	e0bffb17 	ldw	r2,-20(fp)
 40010b4:	e0ffff17 	ldw	r3,-4(fp)
 40010b8:	19403fcc 	andi	r5,r3,255
 40010bc:	10c00003 	ldbu	r3,0(r2)
 40010c0:	1806703a 	and	r3,r3,zero
 40010c4:	1809883a 	mov	r4,r3
 40010c8:	2807883a 	mov	r3,r5
 40010cc:	20c6b03a 	or	r3,r4,r3
 40010d0:	10c00005 	stb	r3,0(r2)
 40010d4:	e0ffff17 	ldw	r3,-4(fp)
 40010d8:	1806d23a 	srli	r3,r3,8
 40010dc:	19403fcc 	andi	r5,r3,255
 40010e0:	10c00043 	ldbu	r3,1(r2)
 40010e4:	1806703a 	and	r3,r3,zero
 40010e8:	1809883a 	mov	r4,r3
 40010ec:	2807883a 	mov	r3,r5
 40010f0:	20c6b03a 	or	r3,r4,r3
 40010f4:	10c00045 	stb	r3,1(r2)
 40010f8:	e0ffff17 	ldw	r3,-4(fp)
 40010fc:	1806d43a 	srli	r3,r3,16
 4001100:	19403fcc 	andi	r5,r3,255
 4001104:	10c00083 	ldbu	r3,2(r2)
 4001108:	1806703a 	and	r3,r3,zero
 400110c:	1809883a 	mov	r4,r3
 4001110:	2807883a 	mov	r3,r5
 4001114:	20c6b03a 	or	r3,r4,r3
 4001118:	10c00085 	stb	r3,2(r2)
 400111c:	e0ffff17 	ldw	r3,-4(fp)
 4001120:	180ad63a 	srli	r5,r3,24
 4001124:	10c000c3 	ldbu	r3,3(r2)
 4001128:	1806703a 	and	r3,r3,zero
 400112c:	1809883a 	mov	r4,r3
 4001130:	2807883a 	mov	r3,r5
 4001134:	20c6b03a 	or	r3,r4,r3
 4001138:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
 400113c:	e0bffb17 	ldw	r2,-20(fp)
 4001140:	e0fffe03 	ldbu	r3,-8(fp)
 4001144:	10c00145 	stb	r3,5(r2)

        return 0;
 4001148:	0005883a 	mov	r2,zero
}
 400114c:	e037883a 	mov	sp,fp
 4001150:	dfc00117 	ldw	ra,4(sp)
 4001154:	df000017 	ldw	fp,0(sp)
 4001158:	dec00204 	addi	sp,sp,8
 400115c:	f800283a 	ret

04001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 4001160:	defff804 	addi	sp,sp,-32
 4001164:	dfc00715 	stw	ra,28(sp)
 4001168:	df000615 	stw	fp,24(sp)
 400116c:	df000604 	addi	fp,sp,24
 4001170:	e13ffc15 	stw	r4,-16(fp)
 4001174:	2807883a 	mov	r3,r5
 4001178:	3005883a 	mov	r2,r6
 400117c:	e1ffff15 	stw	r7,-4(fp)
 4001180:	e0fffd05 	stb	r3,-12(fp)
 4001184:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 4001188:	e0bffc17 	ldw	r2,-16(fp)
 400118c:	e0fffd03 	ldbu	r3,-12(fp)
 4001190:	180b883a 	mov	r5,r3
 4001194:	1009883a 	mov	r4,r2
 4001198:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 400119c:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
 40011a0:	e0bffa17 	ldw	r2,-24(fp)
 40011a4:	1000021e 	bne	r2,zero,40011b0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40011a8:	00bff584 	movi	r2,-42
 40011ac:	00004a06 	br	40012d8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
 40011b0:	e0bffa17 	ldw	r2,-24(fp)
 40011b4:	10c00003 	ldbu	r3,0(r2)
 40011b8:	11000043 	ldbu	r4,1(r2)
 40011bc:	2008923a 	slli	r4,r4,8
 40011c0:	20c6b03a 	or	r3,r4,r3
 40011c4:	11000083 	ldbu	r4,2(r2)
 40011c8:	2008943a 	slli	r4,r4,16
 40011cc:	20c6b03a 	or	r3,r4,r3
 40011d0:	108000c3 	ldbu	r2,3(r2)
 40011d4:	1004963a 	slli	r2,r2,24
 40011d8:	10c4b03a 	or	r2,r2,r3
 40011dc:	1000021e 	bne	r2,zero,40011e8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
 40011e0:	00bff5c4 	movi	r2,-41
 40011e4:	00003c06 	br	40012d8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
 40011e8:	e0bffd03 	ldbu	r2,-12(fp)
 40011ec:	e0fffe03 	ldbu	r3,-8(fp)
 40011f0:	180d883a 	mov	r6,r3
 40011f4:	100b883a 	mov	r5,r2
 40011f8:	e13ffc17 	ldw	r4,-16(fp)
 40011fc:	4000f300 	call	4000f30 <_ZN3USB14getEpInfoEntryEhh>
 4001200:	1007883a 	mov	r3,r2
 4001204:	e0bfff17 	ldw	r2,-4(fp)
 4001208:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
 400120c:	e0bfff17 	ldw	r2,-4(fp)
 4001210:	10800017 	ldw	r2,0(r2)
 4001214:	1000021e 	bne	r2,zero,4001220 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 4001218:	00bff6c4 	movi	r2,-37
 400121c:	00002e06 	br	40012d8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 4001220:	e0bfff17 	ldw	r2,-4(fp)
 4001224:	10800017 	ldw	r2,0(r2)
 4001228:	10800083 	ldbu	r2,2(r2)
 400122c:	1004d0ba 	srli	r2,r2,2
 4001230:	10803fcc 	andi	r2,r2,255
 4001234:	10c00410 	cmplti	r3,r2,16
 4001238:	1800011e 	bne	r3,zero,4001240 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
 400123c:	008003c4 	movi	r2,15
 4001240:	00c00044 	movi	r3,1
 4001244:	1884983a 	sll	r2,r3,r2
 4001248:	1007883a 	mov	r3,r2
 400124c:	e0800217 	ldw	r2,8(fp)
 4001250:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
 4001254:	e0800217 	ldw	r2,8(fp)
 4001258:	1080000b 	ldhu	r2,0(r2)
 400125c:	10bfffc4 	addi	r2,r2,-1
 4001260:	1007883a 	mov	r3,r2
 4001264:	e0800217 	ldw	r2,8(fp)
 4001268:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 400126c:	e0bffd03 	ldbu	r2,-12(fp)
 4001270:	100d883a 	mov	r6,r2
 4001274:	01403804 	movi	r5,224
 4001278:	e13ffc17 	ldw	r4,-16(fp)
 400127c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
 4001280:	01403604 	movi	r5,216
 4001284:	e13ffc17 	ldw	r4,-16(fp)
 4001288:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 400128c:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 4001290:	e0bffa17 	ldw	r2,-24(fp)
 4001294:	10800183 	ldbu	r2,6(r2)
 4001298:	10803fcc 	andi	r2,r2,255
 400129c:	10000726 	beq	r2,zero,40012bc <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
 40012a0:	e0bffc17 	ldw	r2,-16(fp)
 40012a4:	10c02e03 	ldbu	r3,184(r2)
 40012a8:	e0bffb03 	ldbu	r2,-20(fp)
 40012ac:	1884b03a 	or	r2,r3,r2
 40012b0:	10800094 	ori	r2,r2,2
 40012b4:	10803fcc 	andi	r2,r2,255
 40012b8:	00000206 	br	40012c4 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
 40012bc:	e0bffb03 	ldbu	r2,-20(fp)
 40012c0:	10803e4c 	andi	r2,r2,249
 40012c4:	100d883a 	mov	r6,r2
 40012c8:	01403604 	movi	r5,216
 40012cc:	e13ffc17 	ldw	r4,-16(fp)
 40012d0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        return 0;
 40012d4:	0005883a 	mov	r2,zero
}
 40012d8:	e037883a 	mov	sp,fp
 40012dc:	dfc00117 	ldw	ra,4(sp)
 40012e0:	df000017 	ldw	fp,0(sp)
 40012e4:	dec00204 	addi	sp,sp,8
 40012e8:	f800283a 	ret

040012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 40012ec:	deffeb04 	addi	sp,sp,-84
 40012f0:	dfc01415 	stw	ra,80(sp)
 40012f4:	df001315 	stw	fp,76(sp)
 40012f8:	dc001215 	stw	r16,72(sp)
 40012fc:	df001304 	addi	fp,sp,76
 4001300:	e13ff515 	stw	r4,-44(fp)
 4001304:	2815883a 	mov	r10,r5
 4001308:	3013883a 	mov	r9,r6
 400130c:	3811883a 	mov	r8,r7
 4001310:	e1c00217 	ldw	r7,8(fp)
 4001314:	e1800317 	ldw	r6,12(fp)
 4001318:	e1400417 	ldw	r5,16(fp)
 400131c:	e1000517 	ldw	r4,20(fp)
 4001320:	e0c00617 	ldw	r3,24(fp)
 4001324:	e0800717 	ldw	r2,28(fp)
 4001328:	e2bff605 	stb	r10,-40(fp)
 400132c:	e27ff705 	stb	r9,-36(fp)
 4001330:	e23ff805 	stb	r8,-32(fp)
 4001334:	e1fff905 	stb	r7,-28(fp)
 4001338:	e1bffa05 	stb	r6,-24(fp)
 400133c:	e17ffb05 	stb	r5,-20(fp)
 4001340:	e13ffc0d 	sth	r4,-16(fp)
 4001344:	e0fffd0d 	sth	r3,-12(fp)
 4001348:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
 400134c:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 4001350:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
 4001354:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 4001358:	e0fff603 	ldbu	r3,-40(fp)
 400135c:	e13ff703 	ldbu	r4,-36(fp)
 4001360:	e17ff304 	addi	r5,fp,-52
 4001364:	e0bff404 	addi	r2,fp,-48
 4001368:	d8800015 	stw	r2,0(sp)
 400136c:	280f883a 	mov	r7,r5
 4001370:	200d883a 	mov	r6,r4
 4001374:	180b883a 	mov	r5,r3
 4001378:	e13ff517 	ldw	r4,-44(fp)
 400137c:	40011600 	call	4001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 4001380:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
 4001384:	e0bfef03 	ldbu	r2,-68(fp)
 4001388:	10000226 	beq	r2,zero,4001394 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
 400138c:	e0bfef03 	ldbu	r2,-68(fp)
 4001390:	00009406 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
 4001394:	e0bff803 	ldbu	r2,-32(fp)
 4001398:	1080200c 	andi	r2,r2,128
 400139c:	0084803a 	cmplt	r2,zero,r2
 40013a0:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 40013a4:	e0bff803 	ldbu	r2,-32(fp)
 40013a8:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
 40013ac:	e0bff903 	ldbu	r2,-28(fp)
 40013b0:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
 40013b4:	e0bffa03 	ldbu	r2,-24(fp)
 40013b8:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
 40013bc:	e0bffb03 	ldbu	r2,-20(fp)
 40013c0:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
 40013c4:	e0bffc0b 	ldhu	r2,-16(fp)
 40013c8:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
 40013cc:	e0bffd0b 	ldhu	r2,-12(fp)
 40013d0:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 40013d4:	e0bff104 	addi	r2,fp,-60
 40013d8:	100f883a 	mov	r7,r2
 40013dc:	01800204 	movi	r6,8
 40013e0:	01400804 	movi	r5,32
 40013e4:	e13ff517 	ldw	r4,-44(fp)
 40013e8:	40094400 	call	4009440 <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 40013ec:	e0bff703 	ldbu	r2,-36(fp)
 40013f0:	e0fff40b 	ldhu	r3,-48(fp)
 40013f4:	18ffffcc 	andi	r3,r3,65535
 40013f8:	180f883a 	mov	r7,r3
 40013fc:	100d883a 	mov	r6,r2
 4001400:	01400404 	movi	r5,16
 4001404:	e13ff517 	ldw	r4,-44(fp)
 4001408:	4001dec0 	call	4001dec <_ZN3USB11dispatchPktEhht>
 400140c:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
 4001410:	e0bfef03 	ldbu	r2,-68(fp)
 4001414:	10000226 	beq	r2,zero,4001420 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
 4001418:	e0bfef03 	ldbu	r2,-68(fp)
 400141c:	00007106 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
 4001420:	e0800817 	ldw	r2,32(fp)
 4001424:	10006226 	beq	r2,zero,40015b0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
 4001428:	e0bff003 	ldbu	r2,-64(fp)
 400142c:	10004a26 	beq	r2,zero,4001558 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
 4001430:	e0bffd0b 	ldhu	r2,-12(fp)
 4001434:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 4001438:	e0bff317 	ldw	r2,-52(fp)
 400143c:	10c00083 	ldbu	r3,2(r2)
 4001440:	18c00094 	ori	r3,r3,2
 4001444:	10c00085 	stb	r3,2(r2)

                        while(left) {
 4001448:	e0bfef8b 	ldhu	r2,-66(fp)
 400144c:	10005426 	beq	r2,zero,40015a0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 4001450:	e0bffe0b 	ldhu	r2,-8(fp)
 4001454:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 4001458:	e0fff317 	ldw	r3,-52(fp)
 400145c:	e0bff40b 	ldhu	r2,-48(fp)
 4001460:	113fffcc 	andi	r4,r2,65535
 4001464:	e17ff484 	addi	r5,fp,-46
 4001468:	d8000115 	stw	zero,4(sp)
 400146c:	e0800817 	ldw	r2,32(fp)
 4001470:	d8800015 	stw	r2,0(sp)
 4001474:	280f883a 	mov	r7,r5
 4001478:	200d883a 	mov	r6,r4
 400147c:	180b883a 	mov	r5,r3
 4001480:	e13ff517 	ldw	r4,-44(fp)
 4001484:	40016e40 	call	40016e4 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 4001488:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
 400148c:	e0bfef03 	ldbu	r2,-68(fp)
 4001490:	10800198 	cmpnei	r2,r2,6
 4001494:	1000111e 	bne	r2,zero,40014dc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 4001498:	e43ff317 	ldw	r16,-52(fp)
 400149c:	01403e04 	movi	r5,248
 40014a0:	e13ff517 	ldw	r4,-44(fp)
 40014a4:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 40014a8:	10803fcc 	andi	r2,r2,255
 40014ac:	1080080c 	andi	r2,r2,32
 40014b0:	1005003a 	cmpeq	r2,r2,zero
 40014b4:	1080004c 	andi	r2,r2,1
 40014b8:	1089883a 	add	r4,r2,r2
 40014bc:	80c00083 	ldbu	r3,2(r16)
 40014c0:	00bfff44 	movi	r2,-3
 40014c4:	1884703a 	and	r2,r3,r2
 40014c8:	1007883a 	mov	r3,r2
 40014cc:	2005883a 	mov	r2,r4
 40014d0:	1884b03a 	or	r2,r3,r2
 40014d4:	80800085 	stb	r2,2(r16)
 40014d8:	003fdb06 	br	4001448 <__alt_mem_onchip_memory2_0+0xfc0001a8>
                                        continue;
                                }

                                if(rcode)
 40014dc:	e0bfef03 	ldbu	r2,-68(fp)
 40014e0:	10000226 	beq	r2,zero,40014ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
 40014e4:	e0bfef03 	ldbu	r2,-68(fp)
 40014e8:	00003e06 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 40014ec:	e0bfef03 	ldbu	r2,-68(fp)
 40014f0:	1000101e 	bne	r2,zero,4001534 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
 40014f4:	e0800917 	ldw	r2,36(fp)
 40014f8:	10000e26 	beq	r2,zero,4001534 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 40014fc:	e0800917 	ldw	r2,36(fp)
 4001500:	10800017 	ldw	r2,0(r2)
 4001504:	10800017 	ldw	r2,0(r2)
 4001508:	e0fff48b 	ldhu	r3,-46(fp)
 400150c:	197fffcc 	andi	r5,r3,65535
 4001510:	e13ffd0b 	ldhu	r4,-12(fp)
 4001514:	e0ffef8b 	ldhu	r3,-66(fp)
 4001518:	20c7c83a 	sub	r3,r4,r3
 400151c:	e0fff08d 	sth	r3,-62(fp)
 4001520:	e0fff084 	addi	r3,fp,-62
 4001524:	180f883a 	mov	r7,r3
 4001528:	e1800817 	ldw	r6,32(fp)
 400152c:	e1000917 	ldw	r4,36(fp)
 4001530:	103ee83a 	callr	r2

                                left -= read;
 4001534:	e0bff48b 	ldhu	r2,-46(fp)
 4001538:	e0ffef8b 	ldhu	r3,-66(fp)
 400153c:	1885c83a 	sub	r2,r3,r2
 4001540:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
 4001544:	e0bff48b 	ldhu	r2,-46(fp)
 4001548:	10ffffcc 	andi	r3,r2,65535
 400154c:	e0bffe0b 	ldhu	r2,-8(fp)
 4001550:	18801236 	bltu	r3,r2,400159c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
 4001554:	003fbc06 	br	4001448 <__alt_mem_onchip_memory2_0+0xfc0001a8>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 4001558:	e0bff317 	ldw	r2,-52(fp)
 400155c:	10c00083 	ldbu	r3,2(r2)
 4001560:	18c00054 	ori	r3,r3,1
 4001564:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 4001568:	e0fff317 	ldw	r3,-52(fp)
 400156c:	e0bff40b 	ldhu	r2,-48(fp)
 4001570:	113fffcc 	andi	r4,r2,65535
 4001574:	e17ffe0b 	ldhu	r5,-8(fp)
 4001578:	e0800817 	ldw	r2,32(fp)
 400157c:	d8800015 	stw	r2,0(sp)
 4001580:	280f883a 	mov	r7,r5
 4001584:	200d883a 	mov	r6,r4
 4001588:	180b883a 	mov	r5,r3
 400158c:	e13ff517 	ldw	r4,-44(fp)
 4001590:	4001a400 	call	4001a40 <_ZN3USB11OutTransferEP6EpInfottPh>
 4001594:	e0bfef05 	stb	r2,-68(fp)
 4001598:	00000106 	br	40015a0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
 400159c:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
 40015a0:	e0bfef03 	ldbu	r2,-68(fp)
 40015a4:	10000226 	beq	r2,zero,40015b0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
 40015a8:	e0bfef03 	ldbu	r2,-68(fp)
 40015ac:	00000d06 	br	40015e4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 40015b0:	e0bff003 	ldbu	r2,-64(fp)
 40015b4:	10000226 	beq	r2,zero,40015c0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
 40015b8:	00802804 	movi	r2,160
 40015bc:	00000106 	br	40015c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
 40015c0:	00802004 	movi	r2,128
 40015c4:	e0fff703 	ldbu	r3,-36(fp)
 40015c8:	e13ff40b 	ldhu	r4,-48(fp)
 40015cc:	213fffcc 	andi	r4,r4,65535
 40015d0:	200f883a 	mov	r7,r4
 40015d4:	180d883a 	mov	r6,r3
 40015d8:	100b883a 	mov	r5,r2
 40015dc:	e13ff517 	ldw	r4,-44(fp)
 40015e0:	4001dec0 	call	4001dec <_ZN3USB11dispatchPktEhht>
}
 40015e4:	e6ffff04 	addi	sp,fp,-4
 40015e8:	dfc00217 	ldw	ra,8(sp)
 40015ec:	df000117 	ldw	fp,4(sp)
 40015f0:	dc000017 	ldw	r16,0(sp)
 40015f4:	dec00304 	addi	sp,sp,12
 40015f8:	f800283a 	ret

040015fc <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 40015fc:	defff404 	addi	sp,sp,-48
 4001600:	dfc00b15 	stw	ra,44(sp)
 4001604:	df000a15 	stw	fp,40(sp)
 4001608:	df000a04 	addi	fp,sp,40
 400160c:	e13ffb15 	stw	r4,-20(fp)
 4001610:	2809883a 	mov	r4,r5
 4001614:	3007883a 	mov	r3,r6
 4001618:	e1fffe15 	stw	r7,-8(fp)
 400161c:	e0800317 	ldw	r2,12(fp)
 4001620:	e13ffc05 	stb	r4,-16(fp)
 4001624:	e0fffd05 	stb	r3,-12(fp)
 4001628:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
 400162c:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
 4001630:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 4001634:	e0fffc03 	ldbu	r3,-16(fp)
 4001638:	e13ffd03 	ldbu	r4,-12(fp)
 400163c:	e17ff904 	addi	r5,fp,-28
 4001640:	e0bffa04 	addi	r2,fp,-24
 4001644:	d8800015 	stw	r2,0(sp)
 4001648:	280f883a 	mov	r7,r5
 400164c:	200d883a 	mov	r6,r4
 4001650:	180b883a 	mov	r5,r3
 4001654:	e13ffb17 	ldw	r4,-20(fp)
 4001658:	40011600 	call	4001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 400165c:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
 4001660:	e0bff803 	ldbu	r2,-32(fp)
 4001664:	10000e26 	beq	r2,zero,40016a0 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 4001668:	e0bff803 	ldbu	r2,-32(fp)
 400166c:	01402044 	movi	r5,129
 4001670:	1009883a 	mov	r4,r2
 4001674:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 4001678:	e0bffc03 	ldbu	r2,-16(fp)
 400167c:	01402044 	movi	r5,129
 4001680:	1009883a 	mov	r4,r2
 4001684:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 4001688:	e0bffd03 	ldbu	r2,-12(fp)
 400168c:	01402044 	movi	r5,129
 4001690:	1009883a 	mov	r4,r2
 4001694:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 4001698:	e0bff803 	ldbu	r2,-32(fp)
 400169c:	00000c06 	br	40016d0 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 40016a0:	e0fff917 	ldw	r3,-28(fp)
 40016a4:	e0bffa0b 	ldhu	r2,-24(fp)
 40016a8:	113fffcc 	andi	r4,r2,65535
 40016ac:	e0bfff03 	ldbu	r2,-4(fp)
 40016b0:	d8800115 	stw	r2,4(sp)
 40016b4:	e0800217 	ldw	r2,8(fp)
 40016b8:	d8800015 	stw	r2,0(sp)
 40016bc:	e1fffe17 	ldw	r7,-8(fp)
 40016c0:	200d883a 	mov	r6,r4
 40016c4:	180b883a 	mov	r5,r3
 40016c8:	e13ffb17 	ldw	r4,-20(fp)
 40016cc:	40016e40 	call	40016e4 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
 40016d0:	e037883a 	mov	sp,fp
 40016d4:	dfc00117 	ldw	ra,4(sp)
 40016d8:	df000017 	ldw	fp,0(sp)
 40016dc:	dec00204 	addi	sp,sp,8
 40016e0:	f800283a 	ret

040016e4 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 40016e4:	defff704 	addi	sp,sp,-36
 40016e8:	dfc00815 	stw	ra,32(sp)
 40016ec:	df000715 	stw	fp,28(sp)
 40016f0:	df000704 	addi	fp,sp,28
 40016f4:	e13ffb15 	stw	r4,-20(fp)
 40016f8:	e17ffc15 	stw	r5,-16(fp)
 40016fc:	3007883a 	mov	r3,r6
 4001700:	e1fffe15 	stw	r7,-8(fp)
 4001704:	e0800317 	ldw	r2,12(fp)
 4001708:	e0fffd0d 	sth	r3,-12(fp)
 400170c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
 4001710:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 4001714:	e0bffe17 	ldw	r2,-8(fp)
 4001718:	1080000b 	ldhu	r2,0(r2)
 400171c:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 4001720:	e0bffc17 	ldw	r2,-16(fp)
 4001724:	10800043 	ldbu	r2,1(r2)
 4001728:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
 400172c:	e0bffe17 	ldw	r2,-8(fp)
 4001730:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 4001734:	e0bffc17 	ldw	r2,-16(fp)
 4001738:	10800083 	ldbu	r2,2(r2)
 400173c:	1080008c 	andi	r2,r2,2
 4001740:	10803fcc 	andi	r2,r2,255
 4001744:	10000226 	beq	r2,zero,4001750 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
 4001748:	00800804 	movi	r2,32
 400174c:	00000106 	br	4001754 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
 4001750:	00800404 	movi	r2,16
 4001754:	100d883a 	mov	r6,r2
 4001758:	01403a04 	movi	r5,232
 400175c:	e13ffb17 	ldw	r4,-20(fp)
 4001760:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 4001764:	e0bffc17 	ldw	r2,-16(fp)
 4001768:	10800003 	ldbu	r2,0(r2)
 400176c:	10803fcc 	andi	r2,r2,255
 4001770:	e0fffd0b 	ldhu	r3,-12(fp)
 4001774:	180f883a 	mov	r7,r3
 4001778:	100d883a 	mov	r6,r2
 400177c:	000b883a 	mov	r5,zero
 4001780:	e13ffb17 	ldw	r4,-20(fp)
 4001784:	4001dec0 	call	4001dec <_ZN3USB11dispatchPktEhht>
 4001788:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
 400178c:	e0bff903 	ldbu	r2,-28(fp)
 4001790:	10800198 	cmpnei	r2,r2,6
 4001794:	10001e1e 	bne	r2,zero,4001810 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 4001798:	01403e04 	movi	r5,248
 400179c:	e13ffb17 	ldw	r4,-20(fp)
 40017a0:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 40017a4:	10803fcc 	andi	r2,r2,255
 40017a8:	1080040c 	andi	r2,r2,16
 40017ac:	1005003a 	cmpeq	r2,r2,zero
 40017b0:	1007883a 	mov	r3,r2
 40017b4:	e0bffc17 	ldw	r2,-16(fp)
 40017b8:	18c0004c 	andi	r3,r3,1
 40017bc:	18cb883a 	add	r5,r3,r3
 40017c0:	11000083 	ldbu	r4,2(r2)
 40017c4:	00ffff44 	movi	r3,-3
 40017c8:	20c6703a 	and	r3,r4,r3
 40017cc:	1809883a 	mov	r4,r3
 40017d0:	2807883a 	mov	r3,r5
 40017d4:	20c6b03a 	or	r3,r4,r3
 40017d8:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 40017dc:	e0bffc17 	ldw	r2,-16(fp)
 40017e0:	10800083 	ldbu	r2,2(r2)
 40017e4:	1080008c 	andi	r2,r2,2
 40017e8:	10803fcc 	andi	r2,r2,255
 40017ec:	10000226 	beq	r2,zero,40017f8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
 40017f0:	00800804 	movi	r2,32
 40017f4:	00000106 	br	40017fc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
 40017f8:	00800404 	movi	r2,16
 40017fc:	100d883a 	mov	r6,r2
 4001800:	01403a04 	movi	r5,232
 4001804:	e13ffb17 	ldw	r4,-20(fp)
 4001808:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        continue;
 400180c:	00005806 	br	4001970 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
 4001810:	e0bff903 	ldbu	r2,-28(fp)
 4001814:	1000571e 	bne	r2,zero,4001974 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 4001818:	01403204 	movi	r5,200
 400181c:	e13ffb17 	ldw	r4,-20(fp)
 4001820:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001824:	10803fcc 	andi	r2,r2,255
 4001828:	1080010c 	andi	r2,r2,4
 400182c:	1005003a 	cmpeq	r2,r2,zero
 4001830:	10803fcc 	andi	r2,r2,255
 4001834:	10000326 	beq	r2,zero,4001844 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 4001838:	00bffc04 	movi	r2,-16
 400183c:	e0bff905 	stb	r2,-28(fp)
                        break;
 4001840:	00004d06 	br	4001978 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 4001844:	01400c04 	movi	r5,48
 4001848:	e13ffb17 	ldw	r4,-20(fp)
 400184c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001850:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 4001854:	e0bff943 	ldbu	r2,-27(fp)
 4001858:	10bfffcc 	andi	r2,r2,65535
 400185c:	e0fffa0b 	ldhu	r3,-24(fp)
 4001860:	1880022e 	bgeu	r3,r2,400186c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 4001864:	e0bffa0b 	ldhu	r2,-24(fp)
 4001868:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 400186c:	e0bffe17 	ldw	r2,-8(fp)
 4001870:	1080000b 	ldhu	r2,0(r2)
 4001874:	1007883a 	mov	r3,r2
 4001878:	e0bffa0b 	ldhu	r2,-24(fp)
 400187c:	10c5c83a 	sub	r2,r2,r3
 4001880:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
 4001884:	e0bff98f 	ldh	r2,-26(fp)
 4001888:	1000010e 	bge	r2,zero,4001890 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
 400188c:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 4001890:	e0bff943 	ldbu	r2,-27(fp)
 4001894:	e0fff98f 	ldh	r3,-26(fp)
 4001898:	1880010e 	bge	r3,r2,40018a0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
 400189c:	1805883a 	mov	r2,r3
 40018a0:	10803fcc 	andi	r2,r2,255
 40018a4:	e1c00217 	ldw	r7,8(fp)
 40018a8:	100d883a 	mov	r6,r2
 40018ac:	01400204 	movi	r5,8
 40018b0:	e13ffb17 	ldw	r4,-20(fp)
 40018b4:	40096600 	call	4009660 <_ZN8MAX3421e7bytesRdEhhPh>
 40018b8:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 40018bc:	01800104 	movi	r6,4
 40018c0:	01403204 	movi	r5,200
 40018c4:	e13ffb17 	ldw	r4,-20(fp)
 40018c8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 40018cc:	e0bffe17 	ldw	r2,-8(fp)
 40018d0:	10c0000b 	ldhu	r3,0(r2)
 40018d4:	e0bff943 	ldbu	r2,-27(fp)
 40018d8:	1885883a 	add	r2,r3,r2
 40018dc:	1007883a 	mov	r3,r2
 40018e0:	e0bffe17 	ldw	r2,-8(fp)
 40018e4:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 40018e8:	e0fff943 	ldbu	r3,-27(fp)
 40018ec:	e0bffa83 	ldbu	r2,-22(fp)
 40018f0:	18800536 	bltu	r3,r2,4001908 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
 40018f4:	e0bffe17 	ldw	r2,-8(fp)
 40018f8:	1080000b 	ldhu	r2,0(r2)
 40018fc:	10ffffcc 	andi	r3,r2,65535
 4001900:	e0bffa0b 	ldhu	r2,-24(fp)
 4001904:	18801536 	bltu	r3,r2,400195c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 4001908:	01403e04 	movi	r5,248
 400190c:	e13ffb17 	ldw	r4,-20(fp)
 4001910:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001914:	10803fcc 	andi	r2,r2,255
 4001918:	1080040c 	andi	r2,r2,16
 400191c:	10000226 	beq	r2,zero,4001928 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
 4001920:	00c00044 	movi	r3,1
 4001924:	00000106 	br	400192c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
 4001928:	0007883a 	mov	r3,zero
 400192c:	e0bffc17 	ldw	r2,-16(fp)
 4001930:	18c0004c 	andi	r3,r3,1
 4001934:	18cb883a 	add	r5,r3,r3
 4001938:	11000083 	ldbu	r4,2(r2)
 400193c:	00ffff44 	movi	r3,-3
 4001940:	20c6703a 	and	r3,r4,r3
 4001944:	1809883a 	mov	r4,r3
 4001948:	2807883a 	mov	r3,r5
 400194c:	20c6b03a 	or	r3,r4,r3
 4001950:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
 4001954:	e03ff905 	stb	zero,-28(fp)
                        break;
 4001958:	00000706 	br	4001978 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
 400195c:	e0bfff03 	ldbu	r2,-4(fp)
 4001960:	103f8026 	beq	r2,zero,4001764 <__alt_mem_onchip_memory2_0+0xfc0004c4>
                        delay(bInterval); // Delay according to polling interval
 4001964:	e0bfff03 	ldbu	r2,-4(fp)
 4001968:	1009883a 	mov	r4,r2
 400196c:	4000dd40 	call	4000dd4 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
 4001970:	003f7c06 	br	4001764 <__alt_mem_onchip_memory2_0+0xfc0004c4>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
 4001974:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
 4001978:	e0bff903 	ldbu	r2,-28(fp)
}
 400197c:	e037883a 	mov	sp,fp
 4001980:	dfc00117 	ldw	ra,4(sp)
 4001984:	df000017 	ldw	fp,0(sp)
 4001988:	dec00204 	addi	sp,sp,8
 400198c:	f800283a 	ret

04001990 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 4001990:	defff604 	addi	sp,sp,-40
 4001994:	dfc00915 	stw	ra,36(sp)
 4001998:	df000815 	stw	fp,32(sp)
 400199c:	df000804 	addi	fp,sp,32
 40019a0:	e13ffc15 	stw	r4,-16(fp)
 40019a4:	2809883a 	mov	r4,r5
 40019a8:	3007883a 	mov	r3,r6
 40019ac:	3805883a 	mov	r2,r7
 40019b0:	e13ffd05 	stb	r4,-12(fp)
 40019b4:	e0fffe05 	stb	r3,-8(fp)
 40019b8:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
 40019bc:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
 40019c0:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 40019c4:	e0fffd03 	ldbu	r3,-12(fp)
 40019c8:	e13ffe03 	ldbu	r4,-8(fp)
 40019cc:	e17ffa04 	addi	r5,fp,-24
 40019d0:	e0bffb04 	addi	r2,fp,-20
 40019d4:	d8800015 	stw	r2,0(sp)
 40019d8:	280f883a 	mov	r7,r5
 40019dc:	200d883a 	mov	r6,r4
 40019e0:	180b883a 	mov	r5,r3
 40019e4:	e13ffc17 	ldw	r4,-16(fp)
 40019e8:	40011600 	call	4001160 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 40019ec:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
 40019f0:	e0bff903 	ldbu	r2,-28(fp)
 40019f4:	10000226 	beq	r2,zero,4001a00 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
 40019f8:	e0bff903 	ldbu	r2,-28(fp)
 40019fc:	00000b06 	br	4001a2c <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 4001a00:	e0fffa17 	ldw	r3,-24(fp)
 4001a04:	e0bffb0b 	ldhu	r2,-20(fp)
 4001a08:	113fffcc 	andi	r4,r2,65535
 4001a0c:	e17fff0b 	ldhu	r5,-4(fp)
 4001a10:	e0800217 	ldw	r2,8(fp)
 4001a14:	d8800015 	stw	r2,0(sp)
 4001a18:	280f883a 	mov	r7,r5
 4001a1c:	200d883a 	mov	r6,r4
 4001a20:	180b883a 	mov	r5,r3
 4001a24:	e13ffc17 	ldw	r4,-16(fp)
 4001a28:	4001a400 	call	4001a40 <_ZN3USB11OutTransferEP6EpInfottPh>
}
 4001a2c:	e037883a 	mov	sp,fp
 4001a30:	dfc00117 	ldw	ra,4(sp)
 4001a34:	df000017 	ldw	fp,0(sp)
 4001a38:	dec00204 	addi	sp,sp,8
 4001a3c:	f800283a 	ret

04001a40 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 4001a40:	defff404 	addi	sp,sp,-48
 4001a44:	dfc00b15 	stw	ra,44(sp)
 4001a48:	df000a15 	stw	fp,40(sp)
 4001a4c:	df000a04 	addi	fp,sp,40
 4001a50:	e13ffc15 	stw	r4,-16(fp)
 4001a54:	e17ffd15 	stw	r5,-12(fp)
 4001a58:	3007883a 	mov	r3,r6
 4001a5c:	3805883a 	mov	r2,r7
 4001a60:	e0fffe0d 	sth	r3,-8(fp)
 4001a64:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
 4001a68:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
 4001a6c:	e0800217 	ldw	r2,8(fp)
 4001a70:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 4001a74:	e0bfff0b 	ldhu	r2,-4(fp)
 4001a78:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
 4001a7c:	e0bffd17 	ldw	r2,-12(fp)
 4001a80:	10800043 	ldbu	r2,1(r2)
 4001a84:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
 4001a88:	e0bff903 	ldbu	r2,-28(fp)
 4001a8c:	10000326 	beq	r2,zero,4001a9c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 4001a90:	e0bff903 	ldbu	r2,-28(fp)
 4001a94:	10801070 	cmpltui	r2,r2,65
 4001a98:	1000021e 	bne	r2,zero,4001aa4 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 4001a9c:	00bff684 	movi	r2,-38
 4001aa0:	0000cd06 	br	4001dd8 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 4001aa4:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001aa8:	1084e204 	addi	r2,r2,5000
 4001aac:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 4001ab0:	e0bffd17 	ldw	r2,-12(fp)
 4001ab4:	10800083 	ldbu	r2,2(r2)
 4001ab8:	1080004c 	andi	r2,r2,1
 4001abc:	10803fcc 	andi	r2,r2,255
 4001ac0:	10000226 	beq	r2,zero,4001acc <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
 4001ac4:	00802004 	movi	r2,128
 4001ac8:	00000106 	br	4001ad0 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
 4001acc:	00801004 	movi	r2,64
 4001ad0:	100d883a 	mov	r6,r2
 4001ad4:	01403a04 	movi	r5,232
 4001ad8:	e13ffc17 	ldw	r4,-16(fp)
 4001adc:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
 4001ae0:	e0bff88b 	ldhu	r2,-30(fp)
 4001ae4:	1000a926 	beq	r2,zero,4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 4001ae8:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
 4001aec:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 4001af0:	e0bff903 	ldbu	r2,-28(fp)
 4001af4:	e17ff88b 	ldhu	r5,-30(fp)
 4001af8:	10ffffcc 	andi	r3,r2,65535
 4001afc:	293fffcc 	andi	r4,r5,65535
 4001b00:	20c0012e 	bgeu	r4,r3,4001b08 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
 4001b04:	2805883a 	mov	r2,r5
 4001b08:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 4001b0c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001b10:	10803fcc 	andi	r2,r2,255
 4001b14:	e1fff717 	ldw	r7,-36(fp)
 4001b18:	100d883a 	mov	r6,r2
 4001b1c:	01400404 	movi	r5,16
 4001b20:	e13ffc17 	ldw	r4,-16(fp)
 4001b24:	40094400 	call	4009440 <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 4001b28:	e0bffb0b 	ldhu	r2,-20(fp)
 4001b2c:	10803fcc 	andi	r2,r2,255
 4001b30:	100d883a 	mov	r6,r2
 4001b34:	01400e04 	movi	r5,56
 4001b38:	e13ffc17 	ldw	r4,-16(fp)
 4001b3c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 4001b40:	e0bffd17 	ldw	r2,-12(fp)
 4001b44:	10800003 	ldbu	r2,0(r2)
 4001b48:	10800814 	ori	r2,r2,32
 4001b4c:	10803fcc 	andi	r2,r2,255
 4001b50:	100d883a 	mov	r6,r2
 4001b54:	01403c04 	movi	r5,240
 4001b58:	e13ffc17 	ldw	r4,-16(fp)
 4001b5c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 4001b60:	01403204 	movi	r5,200
 4001b64:	e13ffc17 	ldw	r4,-16(fp)
 4001b68:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001b6c:	0084303a 	nor	r2,zero,r2
 4001b70:	10803fcc 	andi	r2,r2,255
 4001b74:	1004d1fa 	srli	r2,r2,7
 4001b78:	10803fcc 	andi	r2,r2,255
 4001b7c:	10000126 	beq	r2,zero,4001b84 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
 4001b80:	003ff706 	br	4001b60 <__alt_mem_onchip_memory2_0+0xfc0008c0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 4001b84:	01802004 	movi	r6,128
 4001b88:	01403204 	movi	r5,200
 4001b8c:	e13ffc17 	ldw	r4,-16(fp)
 4001b90:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 4001b94:	01403e04 	movi	r5,248
 4001b98:	e13ffc17 	ldw	r4,-16(fp)
 4001b9c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001ba0:	108003cc 	andi	r2,r2,15
 4001ba4:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 4001ba8:	e0bff603 	ldbu	r2,-40(fp)
 4001bac:	10000726 	beq	r2,zero,4001bcc <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 4001bb0:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001bb4:	1007883a 	mov	r3,r2
 4001bb8:	e0bffa17 	ldw	r2,-24(fp)
 4001bbc:	1885c83a 	sub	r2,r3,r2
 4001bc0:	1000020e 	bge	r2,zero,4001bcc <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 4001bc4:	00800044 	movi	r2,1
 4001bc8:	00000106 	br	4001bd0 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
 4001bcc:	0005883a 	mov	r2,zero
 4001bd0:	10803fcc 	andi	r2,r2,255
 4001bd4:	10006426 	beq	r2,zero,4001d68 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 4001bd8:	e0bff603 	ldbu	r2,-40(fp)
 4001bdc:	10c001a0 	cmpeqi	r3,r2,6
 4001be0:	1800151e 	bne	r3,zero,4001c38 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
 4001be4:	10c003a0 	cmpeqi	r3,r2,14
 4001be8:	18000c1e 	bne	r3,zero,4001c1c <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
 4001bec:	10800120 	cmpeqi	r2,r2,4
 4001bf0:	1000011e 	bne	r2,zero,4001bf8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 4001bf4:	00006506 	br	4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
 4001bf8:	e0bff80b 	ldhu	r2,-32(fp)
 4001bfc:	10800044 	addi	r2,r2,1
 4001c00:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
 4001c04:	e0bffe0b 	ldhu	r2,-8(fp)
 4001c08:	10002826 	beq	r2,zero,4001cac <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
 4001c0c:	e0fff80b 	ldhu	r3,-32(fp)
 4001c10:	e0bffe0b 	ldhu	r2,-8(fp)
 4001c14:	1880251e 	bne	r3,r2,4001cac <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
 4001c18:	00005c06 	br	4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
 4001c1c:	e0bff643 	ldbu	r2,-39(fp)
 4001c20:	10800044 	addi	r2,r2,1
 4001c24:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
 4001c28:	e0bff643 	ldbu	r2,-39(fp)
 4001c2c:	108000d8 	cmpnei	r2,r2,3
 4001c30:	1000201e 	bne	r2,zero,4001cb4 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
 4001c34:	00005506 	br	4001d8c <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 4001c38:	01403e04 	movi	r5,248
 4001c3c:	e13ffc17 	ldw	r4,-16(fp)
 4001c40:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001c44:	10803fcc 	andi	r2,r2,255
 4001c48:	1080080c 	andi	r2,r2,32
 4001c4c:	1005003a 	cmpeq	r2,r2,zero
 4001c50:	1007883a 	mov	r3,r2
 4001c54:	e0bffd17 	ldw	r2,-12(fp)
 4001c58:	1940004c 	andi	r5,r3,1
 4001c5c:	11000083 	ldbu	r4,2(r2)
 4001c60:	00ffff84 	movi	r3,-2
 4001c64:	20c6703a 	and	r3,r4,r3
 4001c68:	1809883a 	mov	r4,r3
 4001c6c:	2807883a 	mov	r3,r5
 4001c70:	20c6b03a 	or	r3,r4,r3
 4001c74:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 4001c78:	e0bffd17 	ldw	r2,-12(fp)
 4001c7c:	10800083 	ldbu	r2,2(r2)
 4001c80:	1080004c 	andi	r2,r2,1
 4001c84:	10803fcc 	andi	r2,r2,255
 4001c88:	10000226 	beq	r2,zero,4001c94 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
 4001c8c:	00802004 	movi	r2,128
 4001c90:	00000106 	br	4001c98 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
 4001c94:	00801004 	movi	r2,64
 4001c98:	100d883a 	mov	r6,r2
 4001c9c:	01403a04 	movi	r5,232
 4001ca0:	e13ffc17 	ldw	r4,-16(fp)
 4001ca4:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                                        break;
 4001ca8:	00000306 	br	4001cb8 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
 4001cac:	0001883a 	nop
 4001cb0:	00000106 	br	4001cb8 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
 4001cb4:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 4001cb8:	000d883a 	mov	r6,zero
 4001cbc:	01400e04 	movi	r5,56
 4001cc0:	e13ffc17 	ldw	r4,-16(fp)
 4001cc4:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 4001cc8:	e0bff717 	ldw	r2,-36(fp)
 4001ccc:	10800003 	ldbu	r2,0(r2)
 4001cd0:	10803fcc 	andi	r2,r2,255
 4001cd4:	100d883a 	mov	r6,r2
 4001cd8:	01400404 	movi	r5,16
 4001cdc:	e13ffc17 	ldw	r4,-16(fp)
 4001ce0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 4001ce4:	e0bffb0b 	ldhu	r2,-20(fp)
 4001ce8:	10803fcc 	andi	r2,r2,255
 4001cec:	100d883a 	mov	r6,r2
 4001cf0:	01400e04 	movi	r5,56
 4001cf4:	e13ffc17 	ldw	r4,-16(fp)
 4001cf8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 4001cfc:	e0bffd17 	ldw	r2,-12(fp)
 4001d00:	10800003 	ldbu	r2,0(r2)
 4001d04:	10800814 	ori	r2,r2,32
 4001d08:	10803fcc 	andi	r2,r2,255
 4001d0c:	100d883a 	mov	r6,r2
 4001d10:	01403c04 	movi	r5,240
 4001d14:	e13ffc17 	ldw	r4,-16(fp)
 4001d18:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 4001d1c:	01403204 	movi	r5,200
 4001d20:	e13ffc17 	ldw	r4,-16(fp)
 4001d24:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001d28:	0084303a 	nor	r2,zero,r2
 4001d2c:	10803fcc 	andi	r2,r2,255
 4001d30:	1004d1fa 	srli	r2,r2,7
 4001d34:	10803fcc 	andi	r2,r2,255
 4001d38:	10000126 	beq	r2,zero,4001d40 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
 4001d3c:	003ff706 	br	4001d1c <__alt_mem_onchip_memory2_0+0xfc000a7c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 4001d40:	01802004 	movi	r6,128
 4001d44:	01403204 	movi	r5,200
 4001d48:	e13ffc17 	ldw	r4,-16(fp)
 4001d4c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 4001d50:	01403e04 	movi	r5,248
 4001d54:	e13ffc17 	ldw	r4,-16(fp)
 4001d58:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001d5c:	108003cc 	andi	r2,r2,15
 4001d60:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 4001d64:	003f9006 	br	4001ba8 <__alt_mem_onchip_memory2_0+0xfc000908>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 4001d68:	e0fff88b 	ldhu	r3,-30(fp)
 4001d6c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001d70:	1885c83a 	sub	r2,r3,r2
 4001d74:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
 4001d78:	e0bffb0b 	ldhu	r2,-20(fp)
 4001d7c:	e0fff717 	ldw	r3,-36(fp)
 4001d80:	1885883a 	add	r2,r3,r2
 4001d84:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
 4001d88:	003f5506 	br	4001ae0 <__alt_mem_onchip_memory2_0+0xfc000840>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 4001d8c:	01403e04 	movi	r5,248
 4001d90:	e13ffc17 	ldw	r4,-16(fp)
 4001d94:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001d98:	10803fcc 	andi	r2,r2,255
 4001d9c:	1080080c 	andi	r2,r2,32
 4001da0:	10000226 	beq	r2,zero,4001dac <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
 4001da4:	00c00044 	movi	r3,1
 4001da8:	00000106 	br	4001db0 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
 4001dac:	0007883a 	mov	r3,zero
 4001db0:	e0bffd17 	ldw	r2,-12(fp)
 4001db4:	1940004c 	andi	r5,r3,1
 4001db8:	11000083 	ldbu	r4,2(r2)
 4001dbc:	00ffff84 	movi	r3,-2
 4001dc0:	20c6703a 	and	r3,r4,r3
 4001dc4:	1809883a 	mov	r4,r3
 4001dc8:	2807883a 	mov	r3,r5
 4001dcc:	20c6b03a 	or	r3,r4,r3
 4001dd0:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
 4001dd4:	e0bff603 	ldbu	r2,-40(fp)
}
 4001dd8:	e037883a 	mov	sp,fp
 4001ddc:	dfc00117 	ldw	ra,4(sp)
 4001de0:	df000017 	ldw	fp,0(sp)
 4001de4:	dec00204 	addi	sp,sp,8
 4001de8:	f800283a 	ret

04001dec <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 4001dec:	defff704 	addi	sp,sp,-36
 4001df0:	dfc00815 	stw	ra,32(sp)
 4001df4:	df000715 	stw	fp,28(sp)
 4001df8:	df000704 	addi	fp,sp,28
 4001dfc:	e13ffc15 	stw	r4,-16(fp)
 4001e00:	2809883a 	mov	r4,r5
 4001e04:	3007883a 	mov	r3,r6
 4001e08:	3805883a 	mov	r2,r7
 4001e0c:	e13ffd05 	stb	r4,-12(fp)
 4001e10:	e0fffe05 	stb	r3,-8(fp)
 4001e14:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 4001e18:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001e1c:	1084e204 	addi	r2,r2,5000
 4001e20:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 4001e24:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
 4001e28:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
 4001e2c:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 4001e30:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001e34:	1007883a 	mov	r3,r2
 4001e38:	e0bffa17 	ldw	r2,-24(fp)
 4001e3c:	1885c83a 	sub	r2,r3,r2
 4001e40:	1004d7fa 	srli	r2,r2,31
 4001e44:	10803fcc 	andi	r2,r2,255
 4001e48:	10004226 	beq	r2,zero,4001f54 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 4001e4c:	e0fffd03 	ldbu	r3,-12(fp)
 4001e50:	e0bffe03 	ldbu	r2,-8(fp)
 4001e54:	1884b03a 	or	r2,r3,r2
 4001e58:	10803fcc 	andi	r2,r2,255
 4001e5c:	100d883a 	mov	r6,r2
 4001e60:	01403c04 	movi	r5,240
 4001e64:	e13ffc17 	ldw	r4,-16(fp)
 4001e68:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 4001e6c:	00bfffc4 	movi	r2,-1
 4001e70:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 4001e74:	4000e2c0 	call	4000e2c <_Z6millisv>
 4001e78:	1007883a 	mov	r3,r2
 4001e7c:	e0bffa17 	ldw	r2,-24(fp)
 4001e80:	1885c83a 	sub	r2,r3,r2
 4001e84:	1004d7fa 	srli	r2,r2,31
 4001e88:	10803fcc 	andi	r2,r2,255
 4001e8c:	10000e26 	beq	r2,zero,4001ec8 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 4001e90:	01403204 	movi	r5,200
 4001e94:	e13ffc17 	ldw	r4,-16(fp)
 4001e98:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001e9c:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
 4001ea0:	e0bffb03 	ldbu	r2,-20(fp)
 4001ea4:	10803fcc 	andi	r2,r2,255
 4001ea8:	1080201c 	xori	r2,r2,128
 4001eac:	10bfe004 	addi	r2,r2,-128
 4001eb0:	103ff00e 	bge	r2,zero,4001e74 <__alt_mem_onchip_memory2_0+0xfc000bd4>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 4001eb4:	01802004 	movi	r6,128
 4001eb8:	01403204 	movi	r5,200
 4001ebc:	e13ffc17 	ldw	r4,-16(fp)
 4001ec0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
 4001ec4:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 4001ec8:	01403e04 	movi	r5,248
 4001ecc:	e13ffc17 	ldw	r4,-16(fp)
 4001ed0:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4001ed4:	108003cc 	andi	r2,r2,15
 4001ed8:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
 4001edc:	e0bff903 	ldbu	r2,-28(fp)
 4001ee0:	10c00120 	cmpeqi	r3,r2,4
 4001ee4:	1800031e 	bne	r3,zero,4001ef4 <_ZN3USB11dispatchPktEhht+0x108>
 4001ee8:	108003a0 	cmpeqi	r2,r2,14
 4001eec:	10000b1e 	bne	r2,zero,4001f1c <_ZN3USB11dispatchPktEhht+0x130>
 4001ef0:	00001206 	br	4001f3c <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
 4001ef4:	e0bff98b 	ldhu	r2,-26(fp)
 4001ef8:	10800044 	addi	r2,r2,1
 4001efc:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
 4001f00:	e0bfff0b 	ldhu	r2,-4(fp)
 4001f04:	10000f26 	beq	r2,zero,4001f44 <_ZN3USB11dispatchPktEhht+0x158>
 4001f08:	e0fff98b 	ldhu	r3,-26(fp)
 4001f0c:	e0bfff0b 	ldhu	r2,-4(fp)
 4001f10:	18800c1e 	bne	r3,r2,4001f44 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
 4001f14:	e0bff903 	ldbu	r2,-28(fp)
 4001f18:	00000f06 	br	4001f58 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 4001f1c:	e0bff943 	ldbu	r2,-27(fp)
 4001f20:	10800044 	addi	r2,r2,1
 4001f24:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
 4001f28:	e0bff943 	ldbu	r2,-27(fp)
 4001f2c:	108000d8 	cmpnei	r2,r2,3
 4001f30:	1000061e 	bne	r2,zero,4001f4c <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
 4001f34:	e0bff903 	ldbu	r2,-28(fp)
 4001f38:	00000706 	br	4001f58 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
 4001f3c:	e0bff903 	ldbu	r2,-28(fp)
 4001f40:	00000506 	br	4001f58 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
 4001f44:	0001883a 	nop
 4001f48:	003fb906 	br	4001e30 <__alt_mem_onchip_memory2_0+0xfc000b90>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
 4001f4c:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 4001f50:	003fb706 	br	4001e30 <__alt_mem_onchip_memory2_0+0xfc000b90>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 4001f54:	e0bff903 	ldbu	r2,-28(fp)
}
 4001f58:	e037883a 	mov	sp,fp
 4001f5c:	dfc00117 	ldw	ra,4(sp)
 4001f60:	df000017 	ldw	fp,0(sp)
 4001f64:	dec00204 	addi	sp,sp,8
 4001f68:	f800283a 	ret

04001f6c <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 4001f6c:	defffa04 	addi	sp,sp,-24
 4001f70:	dfc00515 	stw	ra,20(sp)
 4001f74:	df000415 	stw	fp,16(sp)
 4001f78:	df000404 	addi	fp,sp,16
 4001f7c:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 4001f80:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
 4001f84:	e13ffe17 	ldw	r4,-8(fp)
 4001f88:	4009c480 	call	4009c48 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
 4001f8c:	e13ffe17 	ldw	r4,-8(fp)
 4001f90:	40093900 	call	4009390 <_ZN8MAX3421e12getVbusStateEv>
 4001f94:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 4001f98:	e0bffcc3 	ldbu	r2,-13(fp)
 4001f9c:	10c00060 	cmpeqi	r3,r2,1
 4001fa0:	1800091e 	bne	r3,zero,4001fc8 <_ZN3USB4TaskEv+0x5c>
 4001fa4:	10c00088 	cmpgei	r3,r2,2
 4001fa8:	1800021e 	bne	r3,zero,4001fb4 <_ZN3USB4TaskEv+0x48>
 4001fac:	10000a26 	beq	r2,zero,4001fd8 <_ZN3USB4TaskEv+0x6c>
 4001fb0:	00001f06 	br	4002030 <_ZN3USB4TaskEv+0xc4>
 4001fb4:	10c000a0 	cmpeqi	r3,r2,2
 4001fb8:	1800121e 	bne	r3,zero,4002004 <_ZN3USB4TaskEv+0x98>
 4001fbc:	108000e0 	cmpeqi	r2,r2,3
 4001fc0:	10000e1e 	bne	r2,zero,4001ffc <_ZN3USB4TaskEv+0x90>
 4001fc4:	00001a06 	br	4002030 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 4001fc8:	008004c4 	movi	r2,19
 4001fcc:	d0b23545 	stb	r2,-14123(gp)
                        lowspeed = false;
 4001fd0:	e03ffc05 	stb	zero,-16(fp)
                        break;
 4001fd4:	00001606 	br	4002030 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 4001fd8:	d0b23543 	ldbu	r2,-14123(gp)
 4001fdc:	10803fcc 	andi	r2,r2,255
 4001fe0:	10803c0c 	andi	r2,r2,240
 4001fe4:	10800420 	cmpeqi	r2,r2,16
 4001fe8:	1000021e 	bne	r2,zero,4001ff4 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 4001fec:	00800444 	movi	r2,17
 4001ff0:	d0b23545 	stb	r2,-14123(gp)
                        lowspeed = false;
 4001ff4:	e03ffc05 	stb	zero,-16(fp)
                        break;
 4001ff8:	00000d06 	br	4002030 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
 4001ffc:	00800044 	movi	r2,1
 4002000:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 4002004:	d0b23543 	ldbu	r2,-14123(gp)
 4002008:	10803fcc 	andi	r2,r2,255
 400200c:	10803c0c 	andi	r2,r2,240
 4002010:	10800418 	cmpnei	r2,r2,16
 4002014:	1000051e 	bne	r2,zero,400202c <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 4002018:	4000e2c0 	call	4000e2c <_Z6millisv>
 400201c:	10803204 	addi	r2,r2,200
 4002020:	d0b23615 	stw	r2,-14120(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 4002024:	00800804 	movi	r2,32
 4002028:	d0b23545 	stb	r2,-14123(gp)
                        }
                        break;
 400202c:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 4002030:	e03ffc45 	stb	zero,-15(fp)
 4002034:	e0bffc43 	ldbu	r2,-15(fp)
 4002038:	10800428 	cmpgeui	r2,r2,16
 400203c:	1000201e 	bne	r2,zero,40020c0 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
 4002040:	e0bffc43 	ldbu	r2,-15(fp)
 4002044:	e0fffe17 	ldw	r3,-8(fp)
 4002048:	10800784 	addi	r2,r2,30
 400204c:	1085883a 	add	r2,r2,r2
 4002050:	1085883a 	add	r2,r2,r2
 4002054:	1885883a 	add	r2,r3,r2
 4002058:	10800017 	ldw	r2,0(r2)
 400205c:	10001426 	beq	r2,zero,40020b0 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
 4002060:	e0bffc43 	ldbu	r2,-15(fp)
 4002064:	e0fffe17 	ldw	r3,-8(fp)
 4002068:	10800784 	addi	r2,r2,30
 400206c:	1085883a 	add	r2,r2,r2
 4002070:	1085883a 	add	r2,r2,r2
 4002074:	1885883a 	add	r2,r3,r2
 4002078:	10800017 	ldw	r2,0(r2)
 400207c:	10800017 	ldw	r2,0(r2)
 4002080:	10800304 	addi	r2,r2,12
 4002084:	10c00017 	ldw	r3,0(r2)
 4002088:	e0bffc43 	ldbu	r2,-15(fp)
 400208c:	e13ffe17 	ldw	r4,-8(fp)
 4002090:	10800784 	addi	r2,r2,30
 4002094:	1085883a 	add	r2,r2,r2
 4002098:	1085883a 	add	r2,r2,r2
 400209c:	2085883a 	add	r2,r4,r2
 40020a0:	10800017 	ldw	r2,0(r2)
 40020a4:	1009883a 	mov	r4,r2
 40020a8:	183ee83a 	callr	r3
 40020ac:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 40020b0:	e0bffc43 	ldbu	r2,-15(fp)
 40020b4:	10800044 	addi	r2,r2,1
 40020b8:	e0bffc45 	stb	r2,-15(fp)
 40020bc:	003fdd06 	br	4002034 <__alt_mem_onchip_memory2_0+0xfc000d94>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 40020c0:	d0b23543 	ldbu	r2,-14123(gp)
 40020c4:	10803fcc 	andi	r2,r2,255
 40020c8:	10c01020 	cmpeqi	r3,r2,64
 40020cc:	1800511e 	bne	r3,zero,4002214 <_ZN3USB4TaskEv+0x2a8>
 40020d0:	10c01048 	cmpgei	r3,r2,65
 40020d4:	18000c1e 	bne	r3,zero,4002108 <_ZN3USB4TaskEv+0x19c>
 40020d8:	10c004e0 	cmpeqi	r3,r2,19
 40020dc:	18008e1e 	bne	r3,zero,4002318 <_ZN3USB4TaskEv+0x3ac>
 40020e0:	10c00508 	cmpgei	r3,r2,20
 40020e4:	1800031e 	bne	r3,zero,40020f4 <_ZN3USB4TaskEv+0x188>
 40020e8:	10800460 	cmpeqi	r2,r2,17
 40020ec:	10000f1e 	bne	r2,zero,400212c <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
 40020f0:	00009406 	br	4002344 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 40020f4:	10c00820 	cmpeqi	r3,r2,32
 40020f8:	1800351e 	bne	r3,zero,40021d0 <_ZN3USB4TaskEv+0x264>
 40020fc:	10800c20 	cmpeqi	r2,r2,48
 4002100:	10003d1e 	bne	r2,zero,40021f8 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 4002104:	00008f06 	br	4002344 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 4002108:	10c02020 	cmpeqi	r3,r2,128
 400210c:	18006e1e 	bne	r3,zero,40022c8 <_ZN3USB4TaskEv+0x35c>
 4002110:	10c02048 	cmpgei	r3,r2,129
 4002114:	18008b1e 	bne	r3,zero,4002344 <_ZN3USB4TaskEv+0x3d8>
 4002118:	10c01420 	cmpeqi	r3,r2,80
 400211c:	1800521e 	bne	r3,zero,4002268 <_ZN3USB4TaskEv+0x2fc>
 4002120:	10801460 	cmpeqi	r2,r2,81
 4002124:	10005e1e 	bne	r2,zero,40022a0 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 4002128:	00008606 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
 400212c:	e13ffe17 	ldw	r4,-8(fp)
 4002130:	4000eac0 	call	4000eac <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 4002134:	e03ffc85 	stb	zero,-14(fp)
 4002138:	e0bffc83 	ldbu	r2,-14(fp)
 400213c:	10800428 	cmpgeui	r2,r2,16
 4002140:	1000201e 	bne	r2,zero,40021c4 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
 4002144:	e0bffc83 	ldbu	r2,-14(fp)
 4002148:	e0fffe17 	ldw	r3,-8(fp)
 400214c:	10800784 	addi	r2,r2,30
 4002150:	1085883a 	add	r2,r2,r2
 4002154:	1085883a 	add	r2,r2,r2
 4002158:	1885883a 	add	r2,r3,r2
 400215c:	10800017 	ldw	r2,0(r2)
 4002160:	10001426 	beq	r2,zero,40021b4 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
 4002164:	e0bffc83 	ldbu	r2,-14(fp)
 4002168:	e0fffe17 	ldw	r3,-8(fp)
 400216c:	10800784 	addi	r2,r2,30
 4002170:	1085883a 	add	r2,r2,r2
 4002174:	1085883a 	add	r2,r2,r2
 4002178:	1885883a 	add	r2,r3,r2
 400217c:	10800017 	ldw	r2,0(r2)
 4002180:	10800017 	ldw	r2,0(r2)
 4002184:	10800204 	addi	r2,r2,8
 4002188:	10c00017 	ldw	r3,0(r2)
 400218c:	e0bffc83 	ldbu	r2,-14(fp)
 4002190:	e13ffe17 	ldw	r4,-8(fp)
 4002194:	10800784 	addi	r2,r2,30
 4002198:	1085883a 	add	r2,r2,r2
 400219c:	1085883a 	add	r2,r2,r2
 40021a0:	2085883a 	add	r2,r4,r2
 40021a4:	10800017 	ldw	r2,0(r2)
 40021a8:	1009883a 	mov	r4,r2
 40021ac:	183ee83a 	callr	r3
 40021b0:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 40021b4:	e0bffc83 	ldbu	r2,-14(fp)
 40021b8:	10800044 	addi	r2,r2,1
 40021bc:	e0bffc85 	stb	r2,-14(fp)
 40021c0:	003fdd06 	br	4002138 <__alt_mem_onchip_memory2_0+0xfc000e98>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 40021c4:	00800484 	movi	r2,18
 40021c8:	d0b23545 	stb	r2,-14123(gp)
                        break;
 40021cc:	00005d06 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 40021d0:	4000e2c0 	call	4000e2c <_Z6millisv>
 40021d4:	1007883a 	mov	r3,r2
 40021d8:	d0b23617 	ldw	r2,-14120(gp)
 40021dc:	1885c83a 	sub	r2,r3,r2
 40021e0:	0084303a 	nor	r2,zero,r2
 40021e4:	1004d7fa 	srli	r2,r2,31
 40021e8:	10803fcc 	andi	r2,r2,255
 40021ec:	10004c26 	beq	r2,zero,4002320 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 40021f0:	00800c04 	movi	r2,48
 40021f4:	d0b23545 	stb	r2,-14123(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 40021f8:	01800044 	movi	r6,1
 40021fc:	01403a04 	movi	r5,232
 4002200:	e13ffe17 	ldw	r4,-8(fp)
 4002204:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 4002208:	00801004 	movi	r2,64
 400220c:	d0b23545 	stb	r2,-14123(gp)
                        break;
 4002210:	00004c06 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 4002214:	01403a04 	movi	r5,232
 4002218:	e13ffe17 	ldw	r4,-8(fp)
 400221c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4002220:	10803fcc 	andi	r2,r2,255
 4002224:	1080004c 	andi	r2,r2,1
 4002228:	1005003a 	cmpeq	r2,r2,zero
 400222c:	10803fcc 	andi	r2,r2,255
 4002230:	10003d26 	beq	r2,zero,4002328 <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 4002234:	01403604 	movi	r5,216
 4002238:	e13ffe17 	ldw	r4,-8(fp)
 400223c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4002240:	10800214 	ori	r2,r2,8
 4002244:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
 4002248:	e0bffcc3 	ldbu	r2,-13(fp)
 400224c:	100d883a 	mov	r6,r2
 4002250:	01403604 	movi	r5,216
 4002254:	e13ffe17 	ldw	r4,-8(fp)
 4002258:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 400225c:	00801404 	movi	r2,80
 4002260:	d0b23545 	stb	r2,-14123(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
 4002264:	00003006 	br	4002328 <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 4002268:	01403204 	movi	r5,200
 400226c:	e13ffe17 	ldw	r4,-8(fp)
 4002270:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4002274:	10803fcc 	andi	r2,r2,255
 4002278:	1080100c 	andi	r2,r2,64
 400227c:	1004c03a 	cmpne	r2,r2,zero
 4002280:	10803fcc 	andi	r2,r2,255
 4002284:	10002a26 	beq	r2,zero,4002330 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 4002288:	00801444 	movi	r2,81
 400228c:	d0b23545 	stb	r2,-14123(gp)
                                delay = (uint32_t)millis() + 20;
 4002290:	4000e2c0 	call	4000e2c <_Z6millisv>
 4002294:	10800504 	addi	r2,r2,20
 4002298:	d0b23615 	stw	r2,-14120(gp)
                        }
                        break;
 400229c:	00002406 	br	4002330 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 40022a0:	4000e2c0 	call	4000e2c <_Z6millisv>
 40022a4:	1007883a 	mov	r3,r2
 40022a8:	d0b23617 	ldw	r2,-14120(gp)
 40022ac:	1885c83a 	sub	r2,r3,r2
 40022b0:	0084303a 	nor	r2,zero,r2
 40022b4:	1004d7fa 	srli	r2,r2,31
 40022b8:	10803fcc 	andi	r2,r2,255
 40022bc:	10001e26 	beq	r2,zero,4002338 <_ZN3USB4TaskEv+0x3cc>
 40022c0:	00bfe004 	movi	r2,-128
 40022c4:	d0b23545 	stb	r2,-14123(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
 40022c8:	e0bffc03 	ldbu	r2,-16(fp)
 40022cc:	100f883a 	mov	r7,r2
 40022d0:	000d883a 	mov	r6,zero
 40022d4:	000b883a 	mov	r5,zero
 40022d8:	e13ffe17 	ldw	r4,-8(fp)
 40022dc:	400274c0 	call	400274c <_ZN3USB11ConfiguringEhhb>
 40022e0:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
 40022e4:	e0bffd03 	ldbu	r2,-12(fp)
 40022e8:	10000826 	beq	r2,zero,400230c <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 40022ec:	e0bffd03 	ldbu	r2,-12(fp)
 40022f0:	108034a0 	cmpeqi	r2,r2,210
 40022f4:	1000121e 	bne	r2,zero,4002340 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
 40022f8:	e0bffd03 	ldbu	r2,-12(fp)
 40022fc:	d0b23505 	stb	r2,-14124(gp)
                                        usb_task_state = USB_STATE_ERROR;
 4002300:	00bfe804 	movi	r2,-96
 4002304:	d0b23545 	stb	r2,-14123(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
 4002308:	00000d06 	br	4002340 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
 400230c:	00bfe404 	movi	r2,-112
 4002310:	d0b23545 	stb	r2,-14123(gp)
                        break;
 4002314:	00000a06 	br	4002340 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
 4002318:	0001883a 	nop
 400231c:	00000906 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
 4002320:	0001883a 	nop
 4002324:	00000706 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
 4002328:	0001883a 	nop
 400232c:	00000506 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
 4002330:	0001883a 	nop
 4002334:	00000306 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
 4002338:	0001883a 	nop
 400233c:	00000106 	br	4002344 <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
 4002340:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 4002344:	0001883a 	nop
 4002348:	e037883a 	mov	sp,fp
 400234c:	dfc00117 	ldw	ra,4(sp)
 4002350:	df000017 	ldw	fp,0(sp)
 4002354:	dec00204 	addi	sp,sp,8
 4002358:	f800283a 	ret

0400235c <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 400235c:	defff704 	addi	sp,sp,-36
 4002360:	dfc00815 	stw	ra,32(sp)
 4002364:	df000715 	stw	fp,28(sp)
 4002368:	df000704 	addi	fp,sp,28
 400236c:	e13ffc15 	stw	r4,-16(fp)
 4002370:	2809883a 	mov	r4,r5
 4002374:	3007883a 	mov	r3,r6
 4002378:	3805883a 	mov	r2,r7
 400237c:	e13ffd05 	stb	r4,-12(fp)
 4002380:	e0fffe05 	stb	r3,-8(fp)
 4002384:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 4002388:	e03ff915 	stw	zero,-28(fp)
 400238c:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 4002390:	e0bffc17 	ldw	r2,-16(fp)
 4002394:	000b883a 	mov	r5,zero
 4002398:	1009883a 	mov	r4,r2
 400239c:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 40023a0:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
 40023a4:	e0bff917 	ldw	r2,-28(fp)
 40023a8:	1000021e 	bne	r2,zero,40023b4 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40023ac:	00bff584 	movi	r2,-42
 40023b0:	00003d06 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
 40023b4:	e0bff917 	ldw	r2,-28(fp)
 40023b8:	10c00003 	ldbu	r3,0(r2)
 40023bc:	11000043 	ldbu	r4,1(r2)
 40023c0:	2008923a 	slli	r4,r4,8
 40023c4:	20c6b03a 	or	r3,r4,r3
 40023c8:	11000083 	ldbu	r4,2(r2)
 40023cc:	2008943a 	slli	r4,r4,16
 40023d0:	20c6b03a 	or	r3,r4,r3
 40023d4:	108000c3 	ldbu	r2,3(r2)
 40023d8:	1004963a 	slli	r2,r2,24
 40023dc:	10c4b03a 	or	r2,r2,r3
 40023e0:	1000021e 	bne	r2,zero,40023ec <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
 40023e4:	00bff5c4 	movi	r2,-41
 40023e8:	00002f06 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
 40023ec:	e0bff917 	ldw	r2,-28(fp)
 40023f0:	e0ffff03 	ldbu	r3,-4(fp)
 40023f4:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 40023f8:	e0bffc17 	ldw	r2,-16(fp)
 40023fc:	e0fffd03 	ldbu	r3,-12(fp)
 4002400:	e13ffe03 	ldbu	r4,-8(fp)
 4002404:	200f883a 	mov	r7,r4
 4002408:	000d883a 	mov	r6,zero
 400240c:	180b883a 	mov	r5,r3
 4002410:	1009883a 	mov	r4,r2
 4002414:	40035440 	call	4003544 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 4002418:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
 400241c:	e0bffb03 	ldbu	r2,-20(fp)
 4002420:	1000021e 	bne	r2,zero,400242c <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 4002424:	00bff504 	movi	r2,-44
 4002428:	00001f06 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
 400242c:	e0bffc17 	ldw	r2,-16(fp)
 4002430:	e0fffb03 	ldbu	r3,-20(fp)
 4002434:	180b883a 	mov	r5,r3
 4002438:	1009883a 	mov	r4,r2
 400243c:	400348c0 	call	400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4002440:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
 4002444:	e0bffa17 	ldw	r2,-24(fp)
 4002448:	1000021e 	bne	r2,zero,4002454 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 400244c:	00bff584 	movi	r2,-42
 4002450:	00001506 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
 4002454:	e0bffa17 	ldw	r2,-24(fp)
 4002458:	e0ffff03 	ldbu	r3,-4(fp)
 400245c:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 4002460:	e0bffb03 	ldbu	r2,-20(fp)
 4002464:	100f883a 	mov	r7,r2
 4002468:	000d883a 	mov	r6,zero
 400246c:	000b883a 	mov	r5,zero
 4002470:	e13ffc17 	ldw	r4,-16(fp)
 4002474:	40032500 	call	4003250 <_ZN3USB7setAddrEhhh>
 4002478:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
 400247c:	e0bffb43 	ldbu	r2,-19(fp)
 4002480:	10000826 	beq	r2,zero,40024a4 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
 4002484:	e0bffc17 	ldw	r2,-16(fp)
 4002488:	e0fffb03 	ldbu	r3,-20(fp)
 400248c:	180b883a 	mov	r5,r3
 4002490:	1009883a 	mov	r4,r2
 4002494:	40037a40 	call	40037a4 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 4002498:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
 400249c:	e0bffb43 	ldbu	r2,-19(fp)
 40024a0:	00000106 	br	40024a8 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
 40024a4:	0005883a 	mov	r2,zero
};
 40024a8:	e037883a 	mov	sp,fp
 40024ac:	dfc00117 	ldw	ra,4(sp)
 40024b0:	df000017 	ldw	fp,0(sp)
 40024b4:	dec00204 	addi	sp,sp,8
 40024b8:	f800283a 	ret

040024bc <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 40024bc:	defff804 	addi	sp,sp,-32
 40024c0:	dfc00715 	stw	ra,28(sp)
 40024c4:	df000615 	stw	fp,24(sp)
 40024c8:	df000604 	addi	fp,sp,24
 40024cc:	e13ffb15 	stw	r4,-20(fp)
 40024d0:	3009883a 	mov	r4,r6
 40024d4:	3807883a 	mov	r3,r7
 40024d8:	e0800217 	ldw	r2,8(fp)
 40024dc:	e17ffc05 	stb	r5,-16(fp)
 40024e0:	e13ffd05 	stb	r4,-12(fp)
 40024e4:	e0fffe05 	stb	r3,-8(fp)
 40024e8:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 40024ec:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 40024f0:	e0bffc03 	ldbu	r2,-16(fp)
 40024f4:	e0fffb17 	ldw	r3,-20(fp)
 40024f8:	10800784 	addi	r2,r2,30
 40024fc:	1085883a 	add	r2,r2,r2
 4002500:	1085883a 	add	r2,r2,r2
 4002504:	1885883a 	add	r2,r3,r2
 4002508:	10800017 	ldw	r2,0(r2)
 400250c:	10800017 	ldw	r2,0(r2)
 4002510:	10800104 	addi	r2,r2,4
 4002514:	10c00017 	ldw	r3,0(r2)
 4002518:	e0bffc03 	ldbu	r2,-16(fp)
 400251c:	e13ffb17 	ldw	r4,-20(fp)
 4002520:	10800784 	addi	r2,r2,30
 4002524:	1085883a 	add	r2,r2,r2
 4002528:	1085883a 	add	r2,r2,r2
 400252c:	2085883a 	add	r2,r4,r2
 4002530:	10800017 	ldw	r2,0(r2)
 4002534:	e13ffd03 	ldbu	r4,-12(fp)
 4002538:	e17ffe03 	ldbu	r5,-8(fp)
 400253c:	e1bfff03 	ldbu	r6,-4(fp)
 4002540:	300f883a 	mov	r7,r6
 4002544:	280d883a 	mov	r6,r5
 4002548:	200b883a 	mov	r5,r4
 400254c:	1009883a 	mov	r4,r2
 4002550:	183ee83a 	callr	r3
 4002554:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 4002558:	e0bffa43 	ldbu	r2,-23(fp)
 400255c:	10803818 	cmpnei	r2,r2,224
 4002560:	10001f1e 	bne	r2,zero,40025e0 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
 4002564:	e0bffd03 	ldbu	r2,-12(fp)
 4002568:	1000071e 	bne	r2,zero,4002588 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 400256c:	01800044 	movi	r6,1
 4002570:	01403a04 	movi	r5,232
 4002574:	e13ffb17 	ldw	r4,-20(fp)
 4002578:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 400257c:	01001984 	movi	r4,102
 4002580:	4000dd40 	call	4000dd4 <_Z5delaym>
 4002584:	00002606 	br	4002620 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 4002588:	e0bffd03 	ldbu	r2,-12(fp)
 400258c:	e0fffb17 	ldw	r3,-20(fp)
 4002590:	10800784 	addi	r2,r2,30
 4002594:	1085883a 	add	r2,r2,r2
 4002598:	1085883a 	add	r2,r2,r2
 400259c:	1885883a 	add	r2,r3,r2
 40025a0:	10800017 	ldw	r2,0(r2)
 40025a4:	10800017 	ldw	r2,0(r2)
 40025a8:	10800504 	addi	r2,r2,20
 40025ac:	10c00017 	ldw	r3,0(r2)
 40025b0:	e0bffd03 	ldbu	r2,-12(fp)
 40025b4:	e13ffb17 	ldw	r4,-20(fp)
 40025b8:	10800784 	addi	r2,r2,30
 40025bc:	1085883a 	add	r2,r2,r2
 40025c0:	1085883a 	add	r2,r2,r2
 40025c4:	2085883a 	add	r2,r4,r2
 40025c8:	10800017 	ldw	r2,0(r2)
 40025cc:	e13ffe03 	ldbu	r4,-8(fp)
 40025d0:	200b883a 	mov	r5,r4
 40025d4:	1009883a 	mov	r4,r2
 40025d8:	183ee83a 	callr	r3
 40025dc:	00001006 	br	4002620 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 40025e0:	e0bffa43 	ldbu	r2,-23(fp)
 40025e4:	10800358 	cmpnei	r2,r2,13
 40025e8:	1000091e 	bne	r2,zero,4002610 <_ZN3USB13AttemptConfigEhhhb+0x154>
 40025ec:	e0bffa03 	ldbu	r2,-24(fp)
 40025f0:	108000e8 	cmpgeui	r2,r2,3
 40025f4:	1000061e 	bne	r2,zero,4002610 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
 40025f8:	01001904 	movi	r4,100
 40025fc:	4000dd40 	call	4000dd4 <_Z5delaym>
                retries++;
 4002600:	e0bffa03 	ldbu	r2,-24(fp)
 4002604:	10800044 	addi	r2,r2,1
 4002608:	e0bffa05 	stb	r2,-24(fp)
                goto again;
 400260c:	003fb806 	br	40024f0 <__alt_mem_onchip_memory2_0+0xfc001250>
        } else if(rcode)
 4002610:	e0bffa43 	ldbu	r2,-23(fp)
 4002614:	10000226 	beq	r2,zero,4002620 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
 4002618:	e0bffa43 	ldbu	r2,-23(fp)
 400261c:	00004606 	br	4002738 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 4002620:	e0bffc03 	ldbu	r2,-16(fp)
 4002624:	e0fffb17 	ldw	r3,-20(fp)
 4002628:	10800784 	addi	r2,r2,30
 400262c:	1085883a 	add	r2,r2,r2
 4002630:	1085883a 	add	r2,r2,r2
 4002634:	1885883a 	add	r2,r3,r2
 4002638:	10800017 	ldw	r2,0(r2)
 400263c:	10800017 	ldw	r2,0(r2)
 4002640:	10c00017 	ldw	r3,0(r2)
 4002644:	e0bffc03 	ldbu	r2,-16(fp)
 4002648:	e13ffb17 	ldw	r4,-20(fp)
 400264c:	10800784 	addi	r2,r2,30
 4002650:	1085883a 	add	r2,r2,r2
 4002654:	1085883a 	add	r2,r2,r2
 4002658:	2085883a 	add	r2,r4,r2
 400265c:	10800017 	ldw	r2,0(r2)
 4002660:	e13ffd03 	ldbu	r4,-12(fp)
 4002664:	e17ffe03 	ldbu	r5,-8(fp)
 4002668:	e1bfff03 	ldbu	r6,-4(fp)
 400266c:	300f883a 	mov	r7,r6
 4002670:	280d883a 	mov	r6,r5
 4002674:	200b883a 	mov	r5,r4
 4002678:	1009883a 	mov	r4,r2
 400267c:	183ee83a 	callr	r3
 4002680:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 4002684:	e0bffa43 	ldbu	r2,-23(fp)
 4002688:	10800358 	cmpnei	r2,r2,13
 400268c:	1000091e 	bne	r2,zero,40026b4 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
 4002690:	e0bffa03 	ldbu	r2,-24(fp)
 4002694:	108000e8 	cmpgeui	r2,r2,3
 4002698:	1000061e 	bne	r2,zero,40026b4 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
 400269c:	01001904 	movi	r4,100
 40026a0:	4000dd40 	call	4000dd4 <_Z5delaym>
                retries++;
 40026a4:	e0bffa03 	ldbu	r2,-24(fp)
 40026a8:	10800044 	addi	r2,r2,1
 40026ac:	e0bffa05 	stb	r2,-24(fp)
                goto again;
 40026b0:	003f8f06 	br	40024f0 <__alt_mem_onchip_memory2_0+0xfc001250>
        }
        if(rcode) {
 40026b4:	e0bffa43 	ldbu	r2,-23(fp)
 40026b8:	10001e26 	beq	r2,zero,4002734 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 40026bc:	e0bffd03 	ldbu	r2,-12(fp)
 40026c0:	1000071e 	bne	r2,zero,40026e0 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 40026c4:	01800044 	movi	r6,1
 40026c8:	01403a04 	movi	r5,232
 40026cc:	e13ffb17 	ldw	r4,-20(fp)
 40026d0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 40026d4:	01001984 	movi	r4,102
 40026d8:	4000dd40 	call	4000dd4 <_Z5delaym>
 40026dc:	00001506 	br	4002734 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 40026e0:	e0bffd03 	ldbu	r2,-12(fp)
 40026e4:	e0fffb17 	ldw	r3,-20(fp)
 40026e8:	10800784 	addi	r2,r2,30
 40026ec:	1085883a 	add	r2,r2,r2
 40026f0:	1085883a 	add	r2,r2,r2
 40026f4:	1885883a 	add	r2,r3,r2
 40026f8:	10800017 	ldw	r2,0(r2)
 40026fc:	10800017 	ldw	r2,0(r2)
 4002700:	10800504 	addi	r2,r2,20
 4002704:	10c00017 	ldw	r3,0(r2)
 4002708:	e0bffd03 	ldbu	r2,-12(fp)
 400270c:	e13ffb17 	ldw	r4,-20(fp)
 4002710:	10800784 	addi	r2,r2,30
 4002714:	1085883a 	add	r2,r2,r2
 4002718:	1085883a 	add	r2,r2,r2
 400271c:	2085883a 	add	r2,r4,r2
 4002720:	10800017 	ldw	r2,0(r2)
 4002724:	e13ffe03 	ldbu	r4,-8(fp)
 4002728:	200b883a 	mov	r5,r4
 400272c:	1009883a 	mov	r4,r2
 4002730:	183ee83a 	callr	r3
                }
        }
        return rcode;
 4002734:	e0bffa43 	ldbu	r2,-23(fp)
}
 4002738:	e037883a 	mov	sp,fp
 400273c:	dfc00117 	ldw	ra,4(sp)
 4002740:	df000017 	ldw	fp,0(sp)
 4002744:	dec00204 	addi	sp,sp,8
 4002748:	f800283a 	ret

0400274c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 400274c:	deffed04 	addi	sp,sp,-76
 4002750:	dfc01215 	stw	ra,72(sp)
 4002754:	df001115 	stw	fp,68(sp)
 4002758:	df001104 	addi	fp,sp,68
 400275c:	e13ffc15 	stw	r4,-16(fp)
 4002760:	2809883a 	mov	r4,r5
 4002764:	3007883a 	mov	r3,r6
 4002768:	3805883a 	mov	r2,r7
 400276c:	e13ffd05 	stb	r4,-12(fp)
 4002770:	e0fffe05 	stb	r3,-8(fp)
 4002774:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 4002778:	e03ff045 	stb	zero,-63(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 400277c:	e0bff684 	addi	r2,fp,-38
 4002780:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
 4002784:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
 4002788:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
 400278c:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
 4002790:	00800204 	movi	r2,8
 4002794:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
 4002798:	e0fffb83 	ldbu	r3,-18(fp)
 400279c:	00bfff84 	movi	r2,-2
 40027a0:	1884703a 	and	r2,r3,r2
 40027a4:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
 40027a8:	e0fffb83 	ldbu	r3,-18(fp)
 40027ac:	00bfff44 	movi	r2,-3
 40027b0:	1884703a 	and	r2,r3,r2
 40027b4:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 40027b8:	e0bffb83 	ldbu	r2,-18(fp)
 40027bc:	108000cc 	andi	r2,r2,3
 40027c0:	10800f14 	ori	r2,r2,60
 40027c4:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 40027c8:	e13ffc17 	ldw	r4,-16(fp)
 40027cc:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 40027d0:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 40027d4:	e0bff417 	ldw	r2,-48(fp)
 40027d8:	10800017 	ldw	r2,0(r2)
 40027dc:	10800017 	ldw	r2,0(r2)
 40027e0:	000b883a 	mov	r5,zero
 40027e4:	e13ff417 	ldw	r4,-48(fp)
 40027e8:	103ee83a 	callr	r2
 40027ec:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
 40027f0:	e0bff217 	ldw	r2,-56(fp)
 40027f4:	1000021e 	bne	r2,zero,4002800 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40027f8:	00bff584 	movi	r2,-42
 40027fc:	00019206 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 4002800:	e0bff217 	ldw	r2,-56(fp)
 4002804:	10c00003 	ldbu	r3,0(r2)
 4002808:	11000043 	ldbu	r4,1(r2)
 400280c:	2008923a 	slli	r4,r4,8
 4002810:	20c6b03a 	or	r3,r4,r3
 4002814:	11000083 	ldbu	r4,2(r2)
 4002818:	2008943a 	slli	r4,r4,16
 400281c:	20c6b03a 	or	r3,r4,r3
 4002820:	108000c3 	ldbu	r2,3(r2)
 4002824:	1004963a 	slli	r2,r2,24
 4002828:	10c4b03a 	or	r2,r2,r3
 400282c:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 4002830:	e0bff217 	ldw	r2,-56(fp)
 4002834:	e0fffb04 	addi	r3,fp,-20
 4002838:	19803fcc 	andi	r6,r3,255
 400283c:	11000003 	ldbu	r4,0(r2)
 4002840:	2008703a 	and	r4,r4,zero
 4002844:	200b883a 	mov	r5,r4
 4002848:	3009883a 	mov	r4,r6
 400284c:	2908b03a 	or	r4,r5,r4
 4002850:	11000005 	stb	r4,0(r2)
 4002854:	1808d23a 	srli	r4,r3,8
 4002858:	21803fcc 	andi	r6,r4,255
 400285c:	11000043 	ldbu	r4,1(r2)
 4002860:	2008703a 	and	r4,r4,zero
 4002864:	200b883a 	mov	r5,r4
 4002868:	3009883a 	mov	r4,r6
 400286c:	2908b03a 	or	r4,r5,r4
 4002870:	11000045 	stb	r4,1(r2)
 4002874:	1808d43a 	srli	r4,r3,16
 4002878:	21803fcc 	andi	r6,r4,255
 400287c:	11000083 	ldbu	r4,2(r2)
 4002880:	2008703a 	and	r4,r4,zero
 4002884:	200b883a 	mov	r5,r4
 4002888:	3009883a 	mov	r4,r6
 400288c:	2908b03a 	or	r4,r5,r4
 4002890:	11000085 	stb	r4,2(r2)
 4002894:	180ad63a 	srli	r5,r3,24
 4002898:	10c000c3 	ldbu	r3,3(r2)
 400289c:	1806703a 	and	r3,r3,zero
 40028a0:	1809883a 	mov	r4,r3
 40028a4:	2807883a 	mov	r3,r5
 40028a8:	20c6b03a 	or	r3,r4,r3
 40028ac:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
 40028b0:	e0bff217 	ldw	r2,-56(fp)
 40028b4:	e0ffff03 	ldbu	r3,-4(fp)
 40028b8:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 40028bc:	00800484 	movi	r2,18
 40028c0:	10ffffcc 	andi	r3,r2,65535
 40028c4:	e0bff684 	addi	r2,fp,-38
 40028c8:	d8800015 	stw	r2,0(sp)
 40028cc:	180f883a 	mov	r7,r3
 40028d0:	000d883a 	mov	r6,zero
 40028d4:	000b883a 	mov	r5,zero
 40028d8:	e13ffc17 	ldw	r4,-16(fp)
 40028dc:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 40028e0:	e0bff045 	stb	r2,-63(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 40028e4:	e0bff217 	ldw	r2,-56(fp)
 40028e8:	e0fff317 	ldw	r3,-52(fp)
 40028ec:	19403fcc 	andi	r5,r3,255
 40028f0:	10c00003 	ldbu	r3,0(r2)
 40028f4:	1806703a 	and	r3,r3,zero
 40028f8:	1809883a 	mov	r4,r3
 40028fc:	2807883a 	mov	r3,r5
 4002900:	20c6b03a 	or	r3,r4,r3
 4002904:	10c00005 	stb	r3,0(r2)
 4002908:	e0fff317 	ldw	r3,-52(fp)
 400290c:	1806d23a 	srli	r3,r3,8
 4002910:	19403fcc 	andi	r5,r3,255
 4002914:	10c00043 	ldbu	r3,1(r2)
 4002918:	1806703a 	and	r3,r3,zero
 400291c:	1809883a 	mov	r4,r3
 4002920:	2807883a 	mov	r3,r5
 4002924:	20c6b03a 	or	r3,r4,r3
 4002928:	10c00045 	stb	r3,1(r2)
 400292c:	e0fff317 	ldw	r3,-52(fp)
 4002930:	1806d43a 	srli	r3,r3,16
 4002934:	19403fcc 	andi	r5,r3,255
 4002938:	10c00083 	ldbu	r3,2(r2)
 400293c:	1806703a 	and	r3,r3,zero
 4002940:	1809883a 	mov	r4,r3
 4002944:	2807883a 	mov	r3,r5
 4002948:	20c6b03a 	or	r3,r4,r3
 400294c:	10c00085 	stb	r3,2(r2)
 4002950:	e0fff317 	ldw	r3,-52(fp)
 4002954:	180ad63a 	srli	r5,r3,24
 4002958:	10c000c3 	ldbu	r3,3(r2)
 400295c:	1806703a 	and	r3,r3,zero
 4002960:	1809883a 	mov	r4,r3
 4002964:	2807883a 	mov	r3,r5
 4002968:	20c6b03a 	or	r3,r4,r3
 400296c:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
 4002970:	e0bff043 	ldbu	r2,-63(fp)
 4002974:	10000226 	beq	r2,zero,4002980 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 4002978:	e0bff043 	ldbu	r2,-63(fp)
 400297c:	00013206 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 4002980:	e0bff117 	ldw	r2,-60(fp)
 4002984:	10c00203 	ldbu	r3,8(r2)
 4002988:	10800243 	ldbu	r2,9(r2)
 400298c:	1004923a 	slli	r2,r2,8
 4002990:	10c4b03a 	or	r2,r2,r3
 4002994:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
 4002998:	e0bff117 	ldw	r2,-60(fp)
 400299c:	10c00283 	ldbu	r3,10(r2)
 40029a0:	108002c3 	ldbu	r2,11(r2)
 40029a4:	1004923a 	slli	r2,r2,8
 40029a8:	10c4b03a 	or	r2,r2,r3
 40029ac:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
 40029b0:	e0bff117 	ldw	r2,-60(fp)
 40029b4:	10800103 	ldbu	r2,4(r2)
 40029b8:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
 40029bc:	e0bff117 	ldw	r2,-60(fp)
 40029c0:	10800143 	ldbu	r2,5(r2)
 40029c4:	e0bff645 	stb	r2,-39(fp)
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 40029c8:	e03ff005 	stb	zero,-64(fp)
 40029cc:	e0bff003 	ldbu	r2,-64(fp)
 40029d0:	10800428 	cmpgeui	r2,r2,16
 40029d4:	1000821e 	bne	r2,zero,4002be0 <_ZN3USB11ConfiguringEhhb+0x494>
                if(!devConfig[devConfigIndex]) continue; // no driver
 40029d8:	e0bff003 	ldbu	r2,-64(fp)
 40029dc:	e0fffc17 	ldw	r3,-16(fp)
 40029e0:	10800784 	addi	r2,r2,30
 40029e4:	1085883a 	add	r2,r2,r2
 40029e8:	1085883a 	add	r2,r2,r2
 40029ec:	1885883a 	add	r2,r3,r2
 40029f0:	10800017 	ldw	r2,0(r2)
 40029f4:	10007226 	beq	r2,zero,4002bc0 <_ZN3USB11ConfiguringEhhb+0x474>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 40029f8:	e0bff003 	ldbu	r2,-64(fp)
 40029fc:	e0fffc17 	ldw	r3,-16(fp)
 4002a00:	10800784 	addi	r2,r2,30
 4002a04:	1085883a 	add	r2,r2,r2
 4002a08:	1085883a 	add	r2,r2,r2
 4002a0c:	1885883a 	add	r2,r3,r2
 4002a10:	10800017 	ldw	r2,0(r2)
 4002a14:	10800017 	ldw	r2,0(r2)
 4002a18:	10800404 	addi	r2,r2,16
 4002a1c:	10c00017 	ldw	r3,0(r2)
 4002a20:	e0bff003 	ldbu	r2,-64(fp)
 4002a24:	e13ffc17 	ldw	r4,-16(fp)
 4002a28:	10800784 	addi	r2,r2,30
 4002a2c:	1085883a 	add	r2,r2,r2
 4002a30:	1085883a 	add	r2,r2,r2
 4002a34:	2085883a 	add	r2,r4,r2
 4002a38:	10800017 	ldw	r2,0(r2)
 4002a3c:	1009883a 	mov	r4,r2
 4002a40:	183ee83a 	callr	r3
 4002a44:	10803fcc 	andi	r2,r2,255
 4002a48:	1004c03a 	cmpne	r2,r2,zero
 4002a4c:	10803fcc 	andi	r2,r2,255
 4002a50:	10005d1e 	bne	r2,zero,4002bc8 <_ZN3USB11ConfiguringEhhb+0x47c>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 4002a54:	e0bff003 	ldbu	r2,-64(fp)
 4002a58:	e0fffc17 	ldw	r3,-16(fp)
 4002a5c:	10800784 	addi	r2,r2,30
 4002a60:	1085883a 	add	r2,r2,r2
 4002a64:	1085883a 	add	r2,r2,r2
 4002a68:	1885883a 	add	r2,r3,r2
 4002a6c:	10800017 	ldw	r2,0(r2)
 4002a70:	10800017 	ldw	r2,0(r2)
 4002a74:	10800804 	addi	r2,r2,32
 4002a78:	10c00017 	ldw	r3,0(r2)
 4002a7c:	e0bff003 	ldbu	r2,-64(fp)
 4002a80:	e13ffc17 	ldw	r4,-16(fp)
 4002a84:	10800784 	addi	r2,r2,30
 4002a88:	1085883a 	add	r2,r2,r2
 4002a8c:	1085883a 	add	r2,r2,r2
 4002a90:	2085883a 	add	r2,r4,r2
 4002a94:	10800017 	ldw	r2,0(r2)
 4002a98:	e13ff643 	ldbu	r4,-39(fp)
 4002a9c:	200b883a 	mov	r5,r4
 4002aa0:	1009883a 	mov	r4,r2
 4002aa4:	183ee83a 	callr	r3
 4002aa8:	10803fcc 	andi	r2,r2,255
 4002aac:	10003226 	beq	r2,zero,4002b78 <_ZN3USB11ConfiguringEhhb+0x42c>
 4002ab0:	e0bff003 	ldbu	r2,-64(fp)
 4002ab4:	e0fffc17 	ldw	r3,-16(fp)
 4002ab8:	10800784 	addi	r2,r2,30
 4002abc:	1085883a 	add	r2,r2,r2
 4002ac0:	1085883a 	add	r2,r2,r2
 4002ac4:	1885883a 	add	r2,r3,r2
 4002ac8:	10800017 	ldw	r2,0(r2)
 4002acc:	10800017 	ldw	r2,0(r2)
 4002ad0:	10800604 	addi	r2,r2,24
 4002ad4:	10c00017 	ldw	r3,0(r2)
 4002ad8:	e0bff003 	ldbu	r2,-64(fp)
 4002adc:	e13ffc17 	ldw	r4,-16(fp)
 4002ae0:	10800784 	addi	r2,r2,30
 4002ae4:	1085883a 	add	r2,r2,r2
 4002ae8:	1085883a 	add	r2,r2,r2
 4002aec:	2085883a 	add	r2,r4,r2
 4002af0:	10800017 	ldw	r2,0(r2)
 4002af4:	e13ff50b 	ldhu	r4,-44(fp)
 4002af8:	e17ff58b 	ldhu	r5,-42(fp)
 4002afc:	280d883a 	mov	r6,r5
 4002b00:	200b883a 	mov	r5,r4
 4002b04:	1009883a 	mov	r4,r2
 4002b08:	183ee83a 	callr	r3
 4002b0c:	10803fcc 	andi	r2,r2,255
 4002b10:	1000171e 	bne	r2,zero,4002b70 <_ZN3USB11ConfiguringEhhb+0x424>
 4002b14:	e0bff003 	ldbu	r2,-64(fp)
 4002b18:	e0fffc17 	ldw	r3,-16(fp)
 4002b1c:	10800784 	addi	r2,r2,30
 4002b20:	1085883a 	add	r2,r2,r2
 4002b24:	1085883a 	add	r2,r2,r2
 4002b28:	1885883a 	add	r2,r3,r2
 4002b2c:	10800017 	ldw	r2,0(r2)
 4002b30:	10800017 	ldw	r2,0(r2)
 4002b34:	10800704 	addi	r2,r2,28
 4002b38:	10c00017 	ldw	r3,0(r2)
 4002b3c:	e0bff003 	ldbu	r2,-64(fp)
 4002b40:	e13ffc17 	ldw	r4,-16(fp)
 4002b44:	10800784 	addi	r2,r2,30
 4002b48:	1085883a 	add	r2,r2,r2
 4002b4c:	1085883a 	add	r2,r2,r2
 4002b50:	2085883a 	add	r2,r4,r2
 4002b54:	10800017 	ldw	r2,0(r2)
 4002b58:	e13ff603 	ldbu	r4,-40(fp)
 4002b5c:	200b883a 	mov	r5,r4
 4002b60:	1009883a 	mov	r4,r2
 4002b64:	183ee83a 	callr	r3
 4002b68:	10803fcc 	andi	r2,r2,255
 4002b6c:	10000226 	beq	r2,zero,4002b78 <_ZN3USB11ConfiguringEhhb+0x42c>
 4002b70:	00800044 	movi	r2,1
 4002b74:	00000106 	br	4002b7c <_ZN3USB11ConfiguringEhhb+0x430>
 4002b78:	0005883a 	mov	r2,zero
 4002b7c:	10803fcc 	andi	r2,r2,255
 4002b80:	10001226 	beq	r2,zero,4002bcc <_ZN3USB11ConfiguringEhhb+0x480>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 4002b84:	e0fff003 	ldbu	r3,-64(fp)
 4002b88:	e13ffd03 	ldbu	r4,-12(fp)
 4002b8c:	e17ffe03 	ldbu	r5,-8(fp)
 4002b90:	e0bfff03 	ldbu	r2,-4(fp)
 4002b94:	d8800015 	stw	r2,0(sp)
 4002b98:	280f883a 	mov	r7,r5
 4002b9c:	200d883a 	mov	r6,r4
 4002ba0:	180b883a 	mov	r5,r3
 4002ba4:	e13ffc17 	ldw	r4,-16(fp)
 4002ba8:	40024bc0 	call	40024bc <_ZN3USB13AttemptConfigEhhhb>
 4002bac:	e0bff045 	stb	r2,-63(fp)
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 4002bb0:	e0bff043 	ldbu	r2,-63(fp)
 4002bb4:	10803460 	cmpeqi	r2,r2,209
 4002bb8:	10000826 	beq	r2,zero,4002bdc <_ZN3USB11ConfiguringEhhb+0x490>
 4002bbc:	00000306 	br	4002bcc <_ZN3USB11ConfiguringEhhb+0x480>
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue; // no driver
 4002bc0:	0001883a 	nop
 4002bc4:	00000106 	br	4002bcc <_ZN3USB11ConfiguringEhhb+0x480>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002bc8:	0001883a 	nop
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002bcc:	e0bff003 	ldbu	r2,-64(fp)
 4002bd0:	10800044 	addi	r2,r2,1
 4002bd4:	e0bff005 	stb	r2,-64(fp)
 4002bd8:	003f7c06 	br	40029cc <__alt_mem_onchip_memory2_0+0xfc00172c>
                if(!devConfig[devConfigIndex]) continue; // no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
                                break;
 4002bdc:	0001883a 	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 4002be0:	e0bff003 	ldbu	r2,-64(fp)
 4002be4:	10800428 	cmpgeui	r2,r2,16
 4002be8:	1000021e 	bne	r2,zero,4002bf4 <_ZN3USB11ConfiguringEhhb+0x4a8>
                return rcode;
 4002bec:	e0bff043 	ldbu	r2,-63(fp)
 4002bf0:	00009506 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002bf4:	e03ff005 	stb	zero,-64(fp)
 4002bf8:	e0bff003 	ldbu	r2,-64(fp)
 4002bfc:	10800428 	cmpgeui	r2,r2,16
 4002c00:	1000871e 	bne	r2,zero,4002e20 <_ZN3USB11ConfiguringEhhb+0x6d4>
                if(!devConfig[devConfigIndex]) continue;
 4002c04:	e0bff003 	ldbu	r2,-64(fp)
 4002c08:	e0fffc17 	ldw	r3,-16(fp)
 4002c0c:	10800784 	addi	r2,r2,30
 4002c10:	1085883a 	add	r2,r2,r2
 4002c14:	1085883a 	add	r2,r2,r2
 4002c18:	1885883a 	add	r2,r3,r2
 4002c1c:	10800017 	ldw	r2,0(r2)
 4002c20:	10007626 	beq	r2,zero,4002dfc <_ZN3USB11ConfiguringEhhb+0x6b0>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002c24:	e0bff003 	ldbu	r2,-64(fp)
 4002c28:	e0fffc17 	ldw	r3,-16(fp)
 4002c2c:	10800784 	addi	r2,r2,30
 4002c30:	1085883a 	add	r2,r2,r2
 4002c34:	1085883a 	add	r2,r2,r2
 4002c38:	1885883a 	add	r2,r3,r2
 4002c3c:	10800017 	ldw	r2,0(r2)
 4002c40:	10800017 	ldw	r2,0(r2)
 4002c44:	10800404 	addi	r2,r2,16
 4002c48:	10c00017 	ldw	r3,0(r2)
 4002c4c:	e0bff003 	ldbu	r2,-64(fp)
 4002c50:	e13ffc17 	ldw	r4,-16(fp)
 4002c54:	10800784 	addi	r2,r2,30
 4002c58:	1085883a 	add	r2,r2,r2
 4002c5c:	1085883a 	add	r2,r2,r2
 4002c60:	2085883a 	add	r2,r4,r2
 4002c64:	10800017 	ldw	r2,0(r2)
 4002c68:	1009883a 	mov	r4,r2
 4002c6c:	183ee83a 	callr	r3
 4002c70:	10803fcc 	andi	r2,r2,255
 4002c74:	1004c03a 	cmpne	r2,r2,zero
 4002c78:	10803fcc 	andi	r2,r2,255
 4002c7c:	1000611e 	bne	r2,zero,4002e04 <_ZN3USB11ConfiguringEhhb+0x6b8>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 4002c80:	e0bff003 	ldbu	r2,-64(fp)
 4002c84:	e0fffc17 	ldw	r3,-16(fp)
 4002c88:	10800784 	addi	r2,r2,30
 4002c8c:	1085883a 	add	r2,r2,r2
 4002c90:	1085883a 	add	r2,r2,r2
 4002c94:	1885883a 	add	r2,r3,r2
 4002c98:	10800017 	ldw	r2,0(r2)
 4002c9c:	10800017 	ldw	r2,0(r2)
 4002ca0:	10800804 	addi	r2,r2,32
 4002ca4:	10c00017 	ldw	r3,0(r2)
 4002ca8:	e0bff003 	ldbu	r2,-64(fp)
 4002cac:	e13ffc17 	ldw	r4,-16(fp)
 4002cb0:	10800784 	addi	r2,r2,30
 4002cb4:	1085883a 	add	r2,r2,r2
 4002cb8:	1085883a 	add	r2,r2,r2
 4002cbc:	2085883a 	add	r2,r4,r2
 4002cc0:	10800017 	ldw	r2,0(r2)
 4002cc4:	e13ff643 	ldbu	r4,-39(fp)
 4002cc8:	200b883a 	mov	r5,r4
 4002ccc:	1009883a 	mov	r4,r2
 4002cd0:	183ee83a 	callr	r3
 4002cd4:	10803fcc 	andi	r2,r2,255
 4002cd8:	10003226 	beq	r2,zero,4002da4 <_ZN3USB11ConfiguringEhhb+0x658>
 4002cdc:	e0bff003 	ldbu	r2,-64(fp)
 4002ce0:	e0fffc17 	ldw	r3,-16(fp)
 4002ce4:	10800784 	addi	r2,r2,30
 4002ce8:	1085883a 	add	r2,r2,r2
 4002cec:	1085883a 	add	r2,r2,r2
 4002cf0:	1885883a 	add	r2,r3,r2
 4002cf4:	10800017 	ldw	r2,0(r2)
 4002cf8:	10800017 	ldw	r2,0(r2)
 4002cfc:	10800604 	addi	r2,r2,24
 4002d00:	10c00017 	ldw	r3,0(r2)
 4002d04:	e0bff003 	ldbu	r2,-64(fp)
 4002d08:	e13ffc17 	ldw	r4,-16(fp)
 4002d0c:	10800784 	addi	r2,r2,30
 4002d10:	1085883a 	add	r2,r2,r2
 4002d14:	1085883a 	add	r2,r2,r2
 4002d18:	2085883a 	add	r2,r4,r2
 4002d1c:	10800017 	ldw	r2,0(r2)
 4002d20:	e13ff50b 	ldhu	r4,-44(fp)
 4002d24:	e17ff58b 	ldhu	r5,-42(fp)
 4002d28:	280d883a 	mov	r6,r5
 4002d2c:	200b883a 	mov	r5,r4
 4002d30:	1009883a 	mov	r4,r2
 4002d34:	183ee83a 	callr	r3
 4002d38:	10803fcc 	andi	r2,r2,255
 4002d3c:	1000171e 	bne	r2,zero,4002d9c <_ZN3USB11ConfiguringEhhb+0x650>
 4002d40:	e0bff003 	ldbu	r2,-64(fp)
 4002d44:	e0fffc17 	ldw	r3,-16(fp)
 4002d48:	10800784 	addi	r2,r2,30
 4002d4c:	1085883a 	add	r2,r2,r2
 4002d50:	1085883a 	add	r2,r2,r2
 4002d54:	1885883a 	add	r2,r3,r2
 4002d58:	10800017 	ldw	r2,0(r2)
 4002d5c:	10800017 	ldw	r2,0(r2)
 4002d60:	10800704 	addi	r2,r2,28
 4002d64:	10c00017 	ldw	r3,0(r2)
 4002d68:	e0bff003 	ldbu	r2,-64(fp)
 4002d6c:	e13ffc17 	ldw	r4,-16(fp)
 4002d70:	10800784 	addi	r2,r2,30
 4002d74:	1085883a 	add	r2,r2,r2
 4002d78:	1085883a 	add	r2,r2,r2
 4002d7c:	2085883a 	add	r2,r4,r2
 4002d80:	10800017 	ldw	r2,0(r2)
 4002d84:	e13ff603 	ldbu	r4,-40(fp)
 4002d88:	200b883a 	mov	r5,r4
 4002d8c:	1009883a 	mov	r4,r2
 4002d90:	183ee83a 	callr	r3
 4002d94:	10803fcc 	andi	r2,r2,255
 4002d98:	10000226 	beq	r2,zero,4002da4 <_ZN3USB11ConfiguringEhhb+0x658>
 4002d9c:	00800044 	movi	r2,1
 4002da0:	00000106 	br	4002da8 <_ZN3USB11ConfiguringEhhb+0x65c>
 4002da4:	0005883a 	mov	r2,zero
 4002da8:	10803fcc 	andi	r2,r2,255
 4002dac:	1000171e 	bne	r2,zero,4002e0c <_ZN3USB11ConfiguringEhhb+0x6c0>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 4002db0:	e0fff003 	ldbu	r3,-64(fp)
 4002db4:	e13ffd03 	ldbu	r4,-12(fp)
 4002db8:	e17ffe03 	ldbu	r5,-8(fp)
 4002dbc:	e0bfff03 	ldbu	r2,-4(fp)
 4002dc0:	d8800015 	stw	r2,0(sp)
 4002dc4:	280f883a 	mov	r7,r5
 4002dc8:	200d883a 	mov	r6,r4
 4002dcc:	180b883a 	mov	r5,r3
 4002dd0:	e13ffc17 	ldw	r4,-16(fp)
 4002dd4:	40024bc0 	call	40024bc <_ZN3USB13AttemptConfigEhhhb>
 4002dd8:	e0bff045 	stb	r2,-63(fp)

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 4002ddc:	e0bff043 	ldbu	r2,-63(fp)
 4002de0:	10803460 	cmpeqi	r2,r2,209
 4002de4:	10000a1e 	bne	r2,zero,4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
 4002de8:	e0bff043 	ldbu	r2,-63(fp)
 4002dec:	10803660 	cmpeqi	r2,r2,217
 4002df0:	1000071e 	bne	r2,zero,4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 4002df4:	e0bff043 	ldbu	r2,-63(fp)
 4002df8:	00001306 	br	4002e48 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;
 4002dfc:	0001883a 	nop
 4002e00:	00000306 	br	4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002e04:	0001883a 	nop
 4002e08:	00000106 	br	4002e10 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 4002e0c:	0001883a 	nop
                return rcode;
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002e10:	e0bff003 	ldbu	r2,-64(fp)
 4002e14:	10800044 	addi	r2,r2,1
 4002e18:	e0bff005 	stb	r2,-64(fp)
 4002e1c:	003f7606 	br	4002bf8 <__alt_mem_onchip_memory2_0+0xfc001958>
                        //        devConfigIndex = 0;
                        return rcode;
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 4002e20:	e0bffd03 	ldbu	r2,-12(fp)
 4002e24:	e0fffe03 	ldbu	r3,-8(fp)
 4002e28:	e13fff03 	ldbu	r4,-4(fp)
 4002e2c:	200f883a 	mov	r7,r4
 4002e30:	180d883a 	mov	r6,r3
 4002e34:	100b883a 	mov	r5,r2
 4002e38:	e13ffc17 	ldw	r4,-16(fp)
 4002e3c:	400235c0 	call	400235c <_ZN3USB17DefaultAddressingEhhb>
 4002e40:	e0bff045 	stb	r2,-63(fp)

        return rcode;
 4002e44:	e0bff043 	ldbu	r2,-63(fp)
}
 4002e48:	e037883a 	mov	sp,fp
 4002e4c:	dfc00117 	ldw	ra,4(sp)
 4002e50:	df000017 	ldw	fp,0(sp)
 4002e54:	dec00204 	addi	sp,sp,8
 4002e58:	f800283a 	ret

04002e5c <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
 4002e5c:	defffb04 	addi	sp,sp,-20
 4002e60:	dfc00415 	stw	ra,16(sp)
 4002e64:	df000315 	stw	fp,12(sp)
 4002e68:	df000304 	addi	fp,sp,12
 4002e6c:	e13ffe15 	stw	r4,-8(fp)
 4002e70:	2805883a 	mov	r2,r5
 4002e74:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
 4002e78:	e0bfff03 	ldbu	r2,-4(fp)
 4002e7c:	1000021e 	bne	r2,zero,4002e88 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
 4002e80:	0005883a 	mov	r2,zero
 4002e84:	00003e06 	br	4002f80 <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 4002e88:	e03ffd05 	stb	zero,-12(fp)
 4002e8c:	e0bffd03 	ldbu	r2,-12(fp)
 4002e90:	10800428 	cmpgeui	r2,r2,16
 4002e94:	1000391e 	bne	r2,zero,4002f7c <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
 4002e98:	e0bffd03 	ldbu	r2,-12(fp)
 4002e9c:	e0fffe17 	ldw	r3,-8(fp)
 4002ea0:	10800784 	addi	r2,r2,30
 4002ea4:	1085883a 	add	r2,r2,r2
 4002ea8:	1085883a 	add	r2,r2,r2
 4002eac:	1885883a 	add	r2,r3,r2
 4002eb0:	10800017 	ldw	r2,0(r2)
 4002eb4:	10002c26 	beq	r2,zero,4002f68 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
 4002eb8:	e0bffd03 	ldbu	r2,-12(fp)
 4002ebc:	e0fffe17 	ldw	r3,-8(fp)
 4002ec0:	10800784 	addi	r2,r2,30
 4002ec4:	1085883a 	add	r2,r2,r2
 4002ec8:	1085883a 	add	r2,r2,r2
 4002ecc:	1885883a 	add	r2,r3,r2
 4002ed0:	10800017 	ldw	r2,0(r2)
 4002ed4:	10800017 	ldw	r2,0(r2)
 4002ed8:	10800404 	addi	r2,r2,16
 4002edc:	10c00017 	ldw	r3,0(r2)
 4002ee0:	e0bffd03 	ldbu	r2,-12(fp)
 4002ee4:	e13ffe17 	ldw	r4,-8(fp)
 4002ee8:	10800784 	addi	r2,r2,30
 4002eec:	1085883a 	add	r2,r2,r2
 4002ef0:	1085883a 	add	r2,r2,r2
 4002ef4:	2085883a 	add	r2,r4,r2
 4002ef8:	10800017 	ldw	r2,0(r2)
 4002efc:	1009883a 	mov	r4,r2
 4002f00:	183ee83a 	callr	r3
 4002f04:	10c03fcc 	andi	r3,r2,255
 4002f08:	e0bfff03 	ldbu	r2,-4(fp)
 4002f0c:	1885003a 	cmpeq	r2,r3,r2
 4002f10:	10803fcc 	andi	r2,r2,255
 4002f14:	10001526 	beq	r2,zero,4002f6c <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
 4002f18:	e0bffd03 	ldbu	r2,-12(fp)
 4002f1c:	e0fffe17 	ldw	r3,-8(fp)
 4002f20:	10800784 	addi	r2,r2,30
 4002f24:	1085883a 	add	r2,r2,r2
 4002f28:	1085883a 	add	r2,r2,r2
 4002f2c:	1885883a 	add	r2,r3,r2
 4002f30:	10800017 	ldw	r2,0(r2)
 4002f34:	10800017 	ldw	r2,0(r2)
 4002f38:	10800204 	addi	r2,r2,8
 4002f3c:	10c00017 	ldw	r3,0(r2)
 4002f40:	e0bffd03 	ldbu	r2,-12(fp)
 4002f44:	e13ffe17 	ldw	r4,-8(fp)
 4002f48:	10800784 	addi	r2,r2,30
 4002f4c:	1085883a 	add	r2,r2,r2
 4002f50:	1085883a 	add	r2,r2,r2
 4002f54:	2085883a 	add	r2,r4,r2
 4002f58:	10800017 	ldw	r2,0(r2)
 4002f5c:	1009883a 	mov	r4,r2
 4002f60:	183ee83a 	callr	r3
 4002f64:	00000606 	br	4002f80 <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
 4002f68:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 4002f6c:	e0bffd03 	ldbu	r2,-12(fp)
 4002f70:	10800044 	addi	r2,r2,1
 4002f74:	e0bffd05 	stb	r2,-12(fp)
 4002f78:	003fc406 	br	4002e8c <__alt_mem_onchip_memory2_0+0xfc001bec>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
 4002f7c:	0005883a 	mov	r2,zero
}
 4002f80:	e037883a 	mov	sp,fp
 4002f84:	dfc00117 	ldw	ra,4(sp)
 4002f88:	df000017 	ldw	fp,0(sp)
 4002f8c:	dec00204 	addi	sp,sp,8
 4002f90:	f800283a 	ret

04002f94 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 4002f94:	defff204 	addi	sp,sp,-56
 4002f98:	dfc00d15 	stw	ra,52(sp)
 4002f9c:	df000c15 	stw	fp,48(sp)
 4002fa0:	df000c04 	addi	fp,sp,48
 4002fa4:	e13ffc15 	stw	r4,-16(fp)
 4002fa8:	2809883a 	mov	r4,r5
 4002fac:	3007883a 	mov	r3,r6
 4002fb0:	3805883a 	mov	r2,r7
 4002fb4:	e13ffd05 	stb	r4,-12(fp)
 4002fb8:	e0fffe05 	stb	r3,-8(fp)
 4002fbc:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 4002fc0:	e17ffd03 	ldbu	r5,-12(fp)
 4002fc4:	e1bffe03 	ldbu	r6,-8(fp)
 4002fc8:	e0bfff0b 	ldhu	r2,-4(fp)
 4002fcc:	e0ffff0b 	ldhu	r3,-4(fp)
 4002fd0:	d8000715 	stw	zero,28(sp)
 4002fd4:	e1000217 	ldw	r4,8(fp)
 4002fd8:	d9000615 	stw	r4,24(sp)
 4002fdc:	d8c00515 	stw	r3,20(sp)
 4002fe0:	d8800415 	stw	r2,16(sp)
 4002fe4:	d8000315 	stw	zero,12(sp)
 4002fe8:	00800044 	movi	r2,1
 4002fec:	d8800215 	stw	r2,8(sp)
 4002ff0:	d8000115 	stw	zero,4(sp)
 4002ff4:	00800184 	movi	r2,6
 4002ff8:	d8800015 	stw	r2,0(sp)
 4002ffc:	01c02004 	movi	r7,128
 4003000:	e13ffc17 	ldw	r4,-16(fp)
 4003004:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4003008:	e037883a 	mov	sp,fp
 400300c:	dfc00117 	ldw	ra,4(sp)
 4003010:	df000017 	ldw	fp,0(sp)
 4003014:	dec00204 	addi	sp,sp,8
 4003018:	f800283a 	ret

0400301c <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 400301c:	defff104 	addi	sp,sp,-60
 4003020:	dfc00e15 	stw	ra,56(sp)
 4003024:	df000d15 	stw	fp,52(sp)
 4003028:	df000d04 	addi	fp,sp,52
 400302c:	e13ffb15 	stw	r4,-20(fp)
 4003030:	3009883a 	mov	r4,r6
 4003034:	3807883a 	mov	r3,r7
 4003038:	e0800217 	ldw	r2,8(fp)
 400303c:	e17ffc05 	stb	r5,-16(fp)
 4003040:	e13ffd05 	stb	r4,-12(fp)
 4003044:	e0fffe0d 	sth	r3,-8(fp)
 4003048:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 400304c:	e23ffc03 	ldbu	r8,-16(fp)
 4003050:	e1bffd03 	ldbu	r6,-12(fp)
 4003054:	e0bfff03 	ldbu	r2,-4(fp)
 4003058:	e0fffe0b 	ldhu	r3,-8(fp)
 400305c:	e13ffe0b 	ldhu	r4,-8(fp)
 4003060:	d8000715 	stw	zero,28(sp)
 4003064:	e1400317 	ldw	r5,12(fp)
 4003068:	d9400615 	stw	r5,24(sp)
 400306c:	d9000515 	stw	r4,20(sp)
 4003070:	d8c00415 	stw	r3,16(sp)
 4003074:	d8000315 	stw	zero,12(sp)
 4003078:	00c00084 	movi	r3,2
 400307c:	d8c00215 	stw	r3,8(sp)
 4003080:	d8800115 	stw	r2,4(sp)
 4003084:	00800184 	movi	r2,6
 4003088:	d8800015 	stw	r2,0(sp)
 400308c:	01c02004 	movi	r7,128
 4003090:	400b883a 	mov	r5,r8
 4003094:	e13ffb17 	ldw	r4,-20(fp)
 4003098:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 400309c:	e037883a 	mov	sp,fp
 40030a0:	dfc00117 	ldw	ra,4(sp)
 40030a4:	df000017 	ldw	fp,0(sp)
 40030a8:	dec00204 	addi	sp,sp,8
 40030ac:	f800283a 	ret

040030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 40030b0:	deffdf04 	addi	sp,sp,-132
 40030b4:	dfc02015 	stw	ra,128(sp)
 40030b8:	df001f15 	stw	fp,124(sp)
 40030bc:	df001f04 	addi	fp,sp,124
 40030c0:	e13ffc15 	stw	r4,-16(fp)
 40030c4:	2809883a 	mov	r4,r5
 40030c8:	3007883a 	mov	r3,r6
 40030cc:	3805883a 	mov	r2,r7
 40030d0:	e13ffd05 	stb	r4,-12(fp)
 40030d4:	e0fffe05 	stb	r3,-8(fp)
 40030d8:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
 40030dc:	00801004 	movi	r2,64
 40030e0:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 40030e4:	e0bfec04 	addi	r2,fp,-80
 40030e8:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 40030ec:	e13ffd03 	ldbu	r4,-12(fp)
 40030f0:	e17ffe03 	ldbu	r5,-8(fp)
 40030f4:	e0bfff03 	ldbu	r2,-4(fp)
 40030f8:	e0ffec04 	addi	r3,fp,-80
 40030fc:	d8c00115 	stw	r3,4(sp)
 4003100:	d8800015 	stw	r2,0(sp)
 4003104:	01c00244 	movi	r7,9
 4003108:	280d883a 	mov	r6,r5
 400310c:	200b883a 	mov	r5,r4
 4003110:	e13ffc17 	ldw	r4,-16(fp)
 4003114:	400301c0 	call	400301c <_ZN3USB12getConfDescrEhhthPh>
 4003118:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
 400311c:	e0bfeb03 	ldbu	r2,-84(fp)
 4003120:	10000226 	beq	r2,zero,400312c <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
 4003124:	e0bfeb03 	ldbu	r2,-84(fp)
 4003128:	00001a06 	br	4003194 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
 400312c:	e0bfea17 	ldw	r2,-88(fp)
 4003130:	10c00083 	ldbu	r3,2(r2)
 4003134:	108000c3 	ldbu	r2,3(r2)
 4003138:	1004923a 	slli	r2,r2,8
 400313c:	10c4b03a 	or	r2,r2,r3
 4003140:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 4003144:	e17ffd03 	ldbu	r5,-12(fp)
 4003148:	e1bffe03 	ldbu	r6,-8(fp)
 400314c:	e0bfff03 	ldbu	r2,-4(fp)
 4003150:	e0ffeb8b 	ldhu	r3,-82(fp)
 4003154:	e1000217 	ldw	r4,8(fp)
 4003158:	d9000715 	stw	r4,28(sp)
 400315c:	e13fec04 	addi	r4,fp,-80
 4003160:	d9000615 	stw	r4,24(sp)
 4003164:	01001004 	movi	r4,64
 4003168:	d9000515 	stw	r4,20(sp)
 400316c:	d8c00415 	stw	r3,16(sp)
 4003170:	d8000315 	stw	zero,12(sp)
 4003174:	00c00084 	movi	r3,2
 4003178:	d8c00215 	stw	r3,8(sp)
 400317c:	d8800115 	stw	r2,4(sp)
 4003180:	00800184 	movi	r2,6
 4003184:	d8800015 	stw	r2,0(sp)
 4003188:	01c02004 	movi	r7,128
 400318c:	e13ffc17 	ldw	r4,-16(fp)
 4003190:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4003194:	e037883a 	mov	sp,fp
 4003198:	dfc00117 	ldw	ra,4(sp)
 400319c:	df000017 	ldw	fp,0(sp)
 40031a0:	dec00204 	addi	sp,sp,8
 40031a4:	f800283a 	ret

040031a8 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
 40031a8:	defff004 	addi	sp,sp,-64
 40031ac:	dfc00f15 	stw	ra,60(sp)
 40031b0:	df000e15 	stw	fp,56(sp)
 40031b4:	df000e04 	addi	fp,sp,56
 40031b8:	e13ffa15 	stw	r4,-24(fp)
 40031bc:	2811883a 	mov	r8,r5
 40031c0:	300b883a 	mov	r5,r6
 40031c4:	3809883a 	mov	r4,r7
 40031c8:	e0c00217 	ldw	r3,8(fp)
 40031cc:	e0800317 	ldw	r2,12(fp)
 40031d0:	e23ffb05 	stb	r8,-20(fp)
 40031d4:	e17ffc05 	stb	r5,-16(fp)
 40031d8:	e13ffd0d 	sth	r4,-12(fp)
 40031dc:	e0fffe05 	stb	r3,-8(fp)
 40031e0:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
 40031e4:	e23ffb03 	ldbu	r8,-20(fp)
 40031e8:	e27ffc03 	ldbu	r9,-16(fp)
 40031ec:	e0bffe03 	ldbu	r2,-8(fp)
 40031f0:	e0ffff0b 	ldhu	r3,-4(fp)
 40031f4:	e13ffd0b 	ldhu	r4,-12(fp)
 40031f8:	e17ffd0b 	ldhu	r5,-12(fp)
 40031fc:	d8000715 	stw	zero,28(sp)
 4003200:	e1800417 	ldw	r6,16(fp)
 4003204:	d9800615 	stw	r6,24(sp)
 4003208:	d9400515 	stw	r5,20(sp)
 400320c:	d9000415 	stw	r4,16(sp)
 4003210:	d8c00315 	stw	r3,12(sp)
 4003214:	00c000c4 	movi	r3,3
 4003218:	d8c00215 	stw	r3,8(sp)
 400321c:	d8800115 	stw	r2,4(sp)
 4003220:	00800184 	movi	r2,6
 4003224:	d8800015 	stw	r2,0(sp)
 4003228:	01c02004 	movi	r7,128
 400322c:	480d883a 	mov	r6,r9
 4003230:	400b883a 	mov	r5,r8
 4003234:	e13ffa17 	ldw	r4,-24(fp)
 4003238:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 400323c:	e037883a 	mov	sp,fp
 4003240:	dfc00117 	ldw	ra,4(sp)
 4003244:	df000017 	ldw	fp,0(sp)
 4003248:	dec00204 	addi	sp,sp,8
 400324c:	f800283a 	ret

04003250 <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 4003250:	defff104 	addi	sp,sp,-60
 4003254:	dfc00e15 	stw	ra,56(sp)
 4003258:	df000d15 	stw	fp,52(sp)
 400325c:	df000d04 	addi	fp,sp,52
 4003260:	e13ffc15 	stw	r4,-16(fp)
 4003264:	2809883a 	mov	r4,r5
 4003268:	3007883a 	mov	r3,r6
 400326c:	3805883a 	mov	r2,r7
 4003270:	e13ffd05 	stb	r4,-12(fp)
 4003274:	e0fffe05 	stb	r3,-8(fp)
 4003278:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 400327c:	e0fffd03 	ldbu	r3,-12(fp)
 4003280:	e13ffe03 	ldbu	r4,-8(fp)
 4003284:	e0bfff03 	ldbu	r2,-4(fp)
 4003288:	d8000715 	stw	zero,28(sp)
 400328c:	d8000615 	stw	zero,24(sp)
 4003290:	d8000515 	stw	zero,20(sp)
 4003294:	d8000415 	stw	zero,16(sp)
 4003298:	d8000315 	stw	zero,12(sp)
 400329c:	d8000215 	stw	zero,8(sp)
 40032a0:	d8800115 	stw	r2,4(sp)
 40032a4:	00800144 	movi	r2,5
 40032a8:	d8800015 	stw	r2,0(sp)
 40032ac:	000f883a 	mov	r7,zero
 40032b0:	200d883a 	mov	r6,r4
 40032b4:	180b883a 	mov	r5,r3
 40032b8:	e13ffc17 	ldw	r4,-16(fp)
 40032bc:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 40032c0:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 40032c4:	01004b04 	movi	r4,300
 40032c8:	4000dd40 	call	4000dd4 <_Z5delaym>
        return rcode;
 40032cc:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 40032d0:	e037883a 	mov	sp,fp
 40032d4:	dfc00117 	ldw	ra,4(sp)
 40032d8:	df000017 	ldw	fp,0(sp)
 40032dc:	dec00204 	addi	sp,sp,8
 40032e0:	f800283a 	ret

040032e4 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 40032e4:	defff204 	addi	sp,sp,-56
 40032e8:	dfc00d15 	stw	ra,52(sp)
 40032ec:	df000c15 	stw	fp,48(sp)
 40032f0:	df000c04 	addi	fp,sp,48
 40032f4:	e13ffc15 	stw	r4,-16(fp)
 40032f8:	2809883a 	mov	r4,r5
 40032fc:	3007883a 	mov	r3,r6
 4003300:	3805883a 	mov	r2,r7
 4003304:	e13ffd05 	stb	r4,-12(fp)
 4003308:	e0fffe05 	stb	r3,-8(fp)
 400330c:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 4003310:	e0fffd03 	ldbu	r3,-12(fp)
 4003314:	e13ffe03 	ldbu	r4,-8(fp)
 4003318:	e0bfff03 	ldbu	r2,-4(fp)
 400331c:	d8000715 	stw	zero,28(sp)
 4003320:	d8000615 	stw	zero,24(sp)
 4003324:	d8000515 	stw	zero,20(sp)
 4003328:	d8000415 	stw	zero,16(sp)
 400332c:	d8000315 	stw	zero,12(sp)
 4003330:	d8000215 	stw	zero,8(sp)
 4003334:	d8800115 	stw	r2,4(sp)
 4003338:	00800244 	movi	r2,9
 400333c:	d8800015 	stw	r2,0(sp)
 4003340:	000f883a 	mov	r7,zero
 4003344:	200d883a 	mov	r6,r4
 4003348:	180b883a 	mov	r5,r3
 400334c:	e13ffc17 	ldw	r4,-16(fp)
 4003350:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4003354:	e037883a 	mov	sp,fp
 4003358:	dfc00117 	ldw	ra,4(sp)
 400335c:	df000017 	ldw	fp,0(sp)
 4003360:	dec00204 	addi	sp,sp,8
 4003364:	f800283a 	ret

04003368 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 4003368:	defffe04 	addi	sp,sp,-8
 400336c:	df000115 	stw	fp,4(sp)
 4003370:	df000104 	addi	fp,sp,4
 4003374:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
 4003378:	e0bfff17 	ldw	r2,-4(fp)
        };
 400337c:	e037883a 	mov	sp,fp
 4003380:	df000017 	ldw	fp,0(sp)
 4003384:	dec00104 	addi	sp,sp,4
 4003388:	f800283a 	ret

0400338c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 400338c:	defffe04 	addi	sp,sp,-8
 4003390:	df000115 	stw	fp,4(sp)
 4003394:	df000104 	addi	fp,sp,4
 4003398:	e13fff15 	stw	r4,-4(fp)
 400339c:	008100b4 	movhi	r2,1026
 40033a0:	10825e04 	addi	r2,r2,2424
 40033a4:	e0ffff17 	ldw	r3,-4(fp)
 40033a8:	18800015 	stw	r2,0(r3)
 40033ac:	0001883a 	nop
 40033b0:	e037883a 	mov	sp,fp
 40033b4:	df000017 	ldw	fp,0(sp)
 40033b8:	dec00104 	addi	sp,sp,4
 40033bc:	f800283a 	ret

040033c0 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 40033c0:	defffd04 	addi	sp,sp,-12
 40033c4:	dfc00215 	stw	ra,8(sp)
 40033c8:	df000115 	stw	fp,4(sp)
 40033cc:	df000104 	addi	fp,sp,4
 40033d0:	e13fff15 	stw	r4,-4(fp)
 40033d4:	e0bfff17 	ldw	r2,-4(fp)
 40033d8:	1009883a 	mov	r4,r2
 40033dc:	400338c0 	call	400338c <_ZN11AddressPoolC1Ev>
 40033e0:	008100b4 	movhi	r2,1026
 40033e4:	10825904 	addi	r2,r2,2404
 40033e8:	e0ffff17 	ldw	r3,-4(fp)
 40033ec:	18800015 	stw	r2,0(r3)
 40033f0:	e0bfff17 	ldw	r2,-4(fp)
 40033f4:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
 40033f8:	000b883a 	mov	r5,zero
 40033fc:	e13fff17 	ldw	r4,-4(fp)
 4003400:	40038100 	call	4003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 4003404:	e0bfff17 	ldw	r2,-4(fp)
 4003408:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
 400340c:	e0bfff17 	ldw	r2,-4(fp)
 4003410:	10c00104 	addi	r3,r2,4
 4003414:	e0bfff17 	ldw	r2,-4(fp)
 4003418:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
 400341c:	e0bfff17 	ldw	r2,-4(fp)
 4003420:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
 4003424:	e0bfff17 	ldw	r2,-4(fp)
 4003428:	00c00204 	movi	r3,8
 400342c:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 4003430:	e0bfff17 	ldw	r2,-4(fp)
 4003434:	11000183 	ldbu	r4,6(r2)
 4003438:	00ffff84 	movi	r3,-2
 400343c:	20c6703a 	and	r3,r4,r3
 4003440:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
 4003444:	e0bfff17 	ldw	r2,-4(fp)
 4003448:	11000183 	ldbu	r4,6(r2)
 400344c:	00ffff44 	movi	r3,-3
 4003450:	20c6703a 	and	r3,r4,r3
 4003454:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 4003458:	e0bfff17 	ldw	r2,-4(fp)
 400345c:	10c00183 	ldbu	r3,6(r2)
 4003460:	18c000cc 	andi	r3,r3,3
 4003464:	18c00f14 	ori	r3,r3,60
 4003468:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
 400346c:	e13fff17 	ldw	r4,-4(fp)
 4003470:	40039540 	call	4003954 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 4003474:	0001883a 	nop
 4003478:	e037883a 	mov	sp,fp
 400347c:	dfc00117 	ldw	ra,4(sp)
 4003480:	df000017 	ldw	fp,0(sp)
 4003484:	dec00204 	addi	sp,sp,8
 4003488:	f800283a 	ret

0400348c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 400348c:	defffa04 	addi	sp,sp,-24
 4003490:	dfc00515 	stw	ra,20(sp)
 4003494:	df000415 	stw	fp,16(sp)
 4003498:	dc000315 	stw	r16,12(sp)
 400349c:	df000404 	addi	fp,sp,16
 40034a0:	e13ffd15 	stw	r4,-12(fp)
 40034a4:	2805883a 	mov	r2,r5
 40034a8:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
 40034ac:	e0bffe03 	ldbu	r2,-8(fp)
 40034b0:	1000031e 	bne	r2,zero,40034c0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
 40034b4:	e0bffd17 	ldw	r2,-12(fp)
 40034b8:	10800204 	addi	r2,r2,8
 40034bc:	00001006 	br	4003500 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
 40034c0:	e0bffe03 	ldbu	r2,-8(fp)
 40034c4:	100b883a 	mov	r5,r2
 40034c8:	e13ffd17 	ldw	r4,-12(fp)
 40034cc:	40039bc0 	call	40039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 40034d0:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
 40034d4:	e0bffc03 	ldbu	r2,-16(fp)
 40034d8:	10000826 	beq	r2,zero,40034fc <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
 40034dc:	e0bffd17 	ldw	r2,-12(fp)
 40034e0:	14000204 	addi	r16,r2,8
 40034e4:	e0bffc03 	ldbu	r2,-16(fp)
 40034e8:	014001c4 	movi	r5,7
 40034ec:	1009883a 	mov	r4,r2
 40034f0:	400d7980 	call	400d798 <__mulsi3>
 40034f4:	8085883a 	add	r2,r16,r2
 40034f8:	00000106 	br	4003500 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
 40034fc:	0005883a 	mov	r2,zero
        };
 4003500:	e6ffff04 	addi	sp,fp,-4
 4003504:	dfc00217 	ldw	ra,8(sp)
 4003508:	df000117 	ldw	fp,4(sp)
 400350c:	dc000017 	ldw	r16,0(sp)
 4003510:	dec00304 	addi	sp,sp,12
 4003514:	f800283a 	ret

04003518 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 4003518:	defffd04 	addi	sp,sp,-12
 400351c:	df000215 	stw	fp,8(sp)
 4003520:	df000204 	addi	fp,sp,8
 4003524:	2005883a 	mov	r2,r4
 4003528:	e17fff15 	stw	r5,-4(fp)
 400352c:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 4003530:	0001883a 	nop
 4003534:	e037883a 	mov	sp,fp
 4003538:	df000017 	ldw	fp,0(sp)
 400353c:	dec00104 	addi	sp,sp,4
 4003540:	f800283a 	ret

04003544 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 4003544:	defff804 	addi	sp,sp,-32
 4003548:	dfc00715 	stw	ra,28(sp)
 400354c:	df000615 	stw	fp,24(sp)
 4003550:	dc000515 	stw	r16,20(sp)
 4003554:	df000604 	addi	fp,sp,24
 4003558:	e13ffb15 	stw	r4,-20(fp)
 400355c:	2809883a 	mov	r4,r5
 4003560:	3007883a 	mov	r3,r6
 4003564:	3805883a 	mov	r2,r7
 4003568:	e13ffc05 	stb	r4,-16(fp)
 400356c:	e0fffd05 	stb	r3,-12(fp)
 4003570:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 4003574:	e0bffc03 	ldbu	r2,-16(fp)
 4003578:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
 400357c:	e0fffa43 	ldbu	r3,-23(fp)
 4003580:	00bfe004 	movi	r2,-128
 4003584:	1884703a 	and	r2,r3,r2
 4003588:	10803fcc 	andi	r2,r2,255
 400358c:	1000031e 	bne	r2,zero,400359c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
 4003590:	e0bffe03 	ldbu	r2,-8(fp)
 4003594:	10800230 	cmpltui	r2,r2,8
 4003598:	1000021e 	bne	r2,zero,40035a4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
 400359c:	0005883a 	mov	r2,zero
 40035a0:	00007a06 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
 40035a4:	e0bffd03 	ldbu	r2,-12(fp)
 40035a8:	10000726 	beq	r2,zero,40035c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
 40035ac:	e0bffb17 	ldw	r2,-20(fp)
 40035b0:	108001c3 	ldbu	r2,7(r2)
 40035b4:	10803fcc 	andi	r2,r2,255
 40035b8:	108001d8 	cmpnei	r2,r2,7
 40035bc:	1000021e 	bne	r2,zero,40035c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
 40035c0:	0005883a 	mov	r2,zero
 40035c4:	00007106 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 40035c8:	000b883a 	mov	r5,zero
 40035cc:	e13ffb17 	ldw	r4,-20(fp)
 40035d0:	40039bc0 	call	40039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 40035d4:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
 40035d8:	e0bffa03 	ldbu	r2,-24(fp)
 40035dc:	1000021e 	bne	r2,zero,40035e8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
 40035e0:	0005883a 	mov	r2,zero
 40035e4:	00006906 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
 40035e8:	e0bffa43 	ldbu	r2,-23(fp)
 40035ec:	10803fcc 	andi	r2,r2,255
 40035f0:	1000241e 	bne	r2,zero,4003684 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
 40035f4:	e0bffd03 	ldbu	r2,-12(fp)
 40035f8:	10001026 	beq	r2,zero,400363c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
 40035fc:	e0bffa03 	ldbu	r2,-24(fp)
 4003600:	e43ffb17 	ldw	r16,-20(fp)
 4003604:	014001c4 	movi	r5,7
 4003608:	1009883a 	mov	r4,r2
 400360c:	400d7980 	call	400d798 <__mulsi3>
 4003610:	8085883a 	add	r2,r16,r2
 4003614:	10800304 	addi	r2,r2,12
 4003618:	00c01044 	movi	r3,65
 400361c:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
 4003620:	e0bffb17 	ldw	r2,-20(fp)
 4003624:	108001c3 	ldbu	r2,7(r2)
 4003628:	10800044 	addi	r2,r2,1
 400362c:	1007883a 	mov	r3,r2
 4003630:	e0bffb17 	ldw	r2,-20(fp)
 4003634:	10c001c5 	stb	r3,7(r2)
 4003638:	00000906 	br	4003660 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
 400363c:	e0bffa03 	ldbu	r2,-24(fp)
 4003640:	e43ffb17 	ldw	r16,-20(fp)
 4003644:	014001c4 	movi	r5,7
 4003648:	1009883a 	mov	r4,r2
 400364c:	400d7980 	call	400d798 <__mulsi3>
 4003650:	8085883a 	add	r2,r16,r2
 4003654:	10800304 	addi	r2,r2,12
 4003658:	00c00044 	movi	r3,1
 400365c:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
 4003660:	e0bffa03 	ldbu	r2,-24(fp)
 4003664:	e43ffb17 	ldw	r16,-20(fp)
 4003668:	014001c4 	movi	r5,7
 400366c:	1009883a 	mov	r4,r2
 4003670:	400d7980 	call	400d798 <__mulsi3>
 4003674:	8085883a 	add	r2,r16,r2
 4003678:	10800304 	addi	r2,r2,12
 400367c:	10800003 	ldbu	r2,0(r2)
 4003680:	00004206 	br	400378c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 4003684:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
 4003688:	e0bffa43 	ldbu	r2,-23(fp)
 400368c:	108001cc 	andi	r2,r2,7
 4003690:	108001cc 	andi	r2,r2,7
 4003694:	100890fa 	slli	r4,r2,3
 4003698:	e0fffa83 	ldbu	r3,-22(fp)
 400369c:	00bff1c4 	movi	r2,-57
 40036a0:	1884703a 	and	r2,r3,r2
 40036a4:	1007883a 	mov	r3,r2
 40036a8:	2005883a 	mov	r2,r4
 40036ac:	1884b03a 	or	r2,r3,r2
 40036b0:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
 40036b4:	e0bffd03 	ldbu	r2,-12(fp)
 40036b8:	10001526 	beq	r2,zero,4003710 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
 40036bc:	e0bffa83 	ldbu	r2,-22(fp)
 40036c0:	10801014 	ori	r2,r2,64
 40036c4:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
 40036c8:	e0bffb17 	ldw	r2,-20(fp)
 40036cc:	108001c3 	ldbu	r2,7(r2)
 40036d0:	10800044 	addi	r2,r2,1
 40036d4:	1007883a 	mov	r3,r2
 40036d8:	e0bffb17 	ldw	r2,-20(fp)
 40036dc:	10c001c5 	stb	r3,7(r2)
 40036e0:	e0bffb17 	ldw	r2,-20(fp)
 40036e4:	108001c3 	ldbu	r2,7(r2)
 40036e8:	108001cc 	andi	r2,r2,7
 40036ec:	110001cc 	andi	r4,r2,7
 40036f0:	e0fffa83 	ldbu	r3,-22(fp)
 40036f4:	00bffe04 	movi	r2,-8
 40036f8:	1884703a 	and	r2,r3,r2
 40036fc:	1007883a 	mov	r3,r2
 4003700:	2005883a 	mov	r2,r4
 4003704:	1884b03a 	or	r2,r3,r2
 4003708:	e0bffa85 	stb	r2,-22(fp)
 400370c:	00000e06 	br	4003748 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
 4003710:	e0fffa83 	ldbu	r3,-22(fp)
 4003714:	00bfefc4 	movi	r2,-65
 4003718:	1884703a 	and	r2,r3,r2
 400371c:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
 4003720:	e0bffe03 	ldbu	r2,-8(fp)
 4003724:	108001cc 	andi	r2,r2,7
 4003728:	110001cc 	andi	r4,r2,7
 400372c:	e0fffa83 	ldbu	r3,-22(fp)
 4003730:	00bffe04 	movi	r2,-8
 4003734:	1884703a 	and	r2,r3,r2
 4003738:	1007883a 	mov	r3,r2
 400373c:	2005883a 	mov	r2,r4
 4003740:	1884b03a 	or	r2,r3,r2
 4003744:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
 4003748:	e0bffa03 	ldbu	r2,-24(fp)
 400374c:	e43ffb17 	ldw	r16,-20(fp)
 4003750:	014001c4 	movi	r5,7
 4003754:	1009883a 	mov	r4,r2
 4003758:	400d7980 	call	400d798 <__mulsi3>
 400375c:	8085883a 	add	r2,r16,r2
 4003760:	10800304 	addi	r2,r2,12
 4003764:	e0fffa83 	ldbu	r3,-22(fp)
 4003768:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 400376c:	e0bffa03 	ldbu	r2,-24(fp)
 4003770:	e43ffb17 	ldw	r16,-20(fp)
 4003774:	014001c4 	movi	r5,7
 4003778:	1009883a 	mov	r4,r2
 400377c:	400d7980 	call	400d798 <__mulsi3>
 4003780:	8085883a 	add	r2,r16,r2
 4003784:	10800304 	addi	r2,r2,12
 4003788:	10800003 	ldbu	r2,0(r2)
        };
 400378c:	e6ffff04 	addi	sp,fp,-4
 4003790:	dfc00217 	ldw	ra,8(sp)
 4003794:	df000117 	ldw	fp,4(sp)
 4003798:	dc000017 	ldw	r16,0(sp)
 400379c:	dec00304 	addi	sp,sp,12
 40037a0:	f800283a 	ret

040037a4 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 40037a4:	defffb04 	addi	sp,sp,-20
 40037a8:	dfc00415 	stw	ra,16(sp)
 40037ac:	df000315 	stw	fp,12(sp)
 40037b0:	df000304 	addi	fp,sp,12
 40037b4:	e13ffe15 	stw	r4,-8(fp)
 40037b8:	2805883a 	mov	r2,r5
 40037bc:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 40037c0:	e0bfff03 	ldbu	r2,-4(fp)
 40037c4:	10801058 	cmpnei	r2,r2,65
 40037c8:	1000031e 	bne	r2,zero,40037d8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
 40037cc:	e13ffe17 	ldw	r4,-8(fp)
 40037d0:	40039540 	call	4003954 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 40037d4:	00000906 	br	40037fc <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
 40037d8:	e0bfff03 	ldbu	r2,-4(fp)
 40037dc:	100b883a 	mov	r5,r2
 40037e0:	e13ffe17 	ldw	r4,-8(fp)
 40037e4:	40039bc0 	call	40039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 40037e8:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
 40037ec:	e0bffd03 	ldbu	r2,-12(fp)
 40037f0:	100b883a 	mov	r5,r2
 40037f4:	e13ffe17 	ldw	r4,-8(fp)
 40037f8:	4003a500 	call	4003a50 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 40037fc:	e037883a 	mov	sp,fp
 4003800:	dfc00117 	ldw	ra,4(sp)
 4003804:	df000017 	ldw	fp,0(sp)
 4003808:	dec00204 	addi	sp,sp,8
 400380c:	f800283a 	ret

04003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
 4003810:	defffa04 	addi	sp,sp,-24
 4003814:	dfc00515 	stw	ra,20(sp)
 4003818:	df000415 	stw	fp,16(sp)
 400381c:	dc400315 	stw	r17,12(sp)
 4003820:	dc000215 	stw	r16,8(sp)
 4003824:	df000404 	addi	fp,sp,16
 4003828:	e13ffc15 	stw	r4,-16(fp)
 400382c:	2805883a 	mov	r2,r5
 4003830:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
 4003834:	e0bffd03 	ldbu	r2,-12(fp)
 4003838:	e43ffc17 	ldw	r16,-16(fp)
 400383c:	014001c4 	movi	r5,7
 4003840:	1009883a 	mov	r4,r2
 4003844:	400d7980 	call	400d798 <__mulsi3>
 4003848:	8085883a 	add	r2,r16,r2
 400384c:	10800304 	addi	r2,r2,12
 4003850:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
 4003854:	e0bffd03 	ldbu	r2,-12(fp)
 4003858:	e43ffc17 	ldw	r16,-16(fp)
 400385c:	014001c4 	movi	r5,7
 4003860:	1009883a 	mov	r4,r2
 4003864:	400d7980 	call	400d798 <__mulsi3>
 4003868:	8085883a 	add	r2,r16,r2
 400386c:	10800344 	addi	r2,r2,13
 4003870:	00c00044 	movi	r3,1
 4003874:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
 4003878:	e0bffd03 	ldbu	r2,-12(fp)
 400387c:	e43ffc17 	ldw	r16,-16(fp)
 4003880:	014001c4 	movi	r5,7
 4003884:	1009883a 	mov	r4,r2
 4003888:	400d7980 	call	400d798 <__mulsi3>
 400388c:	8085883a 	add	r2,r16,r2
 4003890:	10800384 	addi	r2,r2,14
 4003894:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
 4003898:	e0fffd03 	ldbu	r3,-12(fp)
 400389c:	e0bffc17 	ldw	r2,-16(fp)
 40038a0:	14000104 	addi	r16,r2,4
 40038a4:	e47ffc17 	ldw	r17,-16(fp)
 40038a8:	014001c4 	movi	r5,7
 40038ac:	1809883a 	mov	r4,r3
 40038b0:	400d7980 	call	400d798 <__mulsi3>
 40038b4:	8885883a 	add	r2,r17,r2
 40038b8:	10800204 	addi	r2,r2,8
 40038bc:	81403fcc 	andi	r5,r16,255
 40038c0:	10c00003 	ldbu	r3,0(r2)
 40038c4:	1806703a 	and	r3,r3,zero
 40038c8:	1809883a 	mov	r4,r3
 40038cc:	2807883a 	mov	r3,r5
 40038d0:	20c6b03a 	or	r3,r4,r3
 40038d4:	10c00005 	stb	r3,0(r2)
 40038d8:	8006d23a 	srli	r3,r16,8
 40038dc:	19403fcc 	andi	r5,r3,255
 40038e0:	10c00043 	ldbu	r3,1(r2)
 40038e4:	1806703a 	and	r3,r3,zero
 40038e8:	1809883a 	mov	r4,r3
 40038ec:	2807883a 	mov	r3,r5
 40038f0:	20c6b03a 	or	r3,r4,r3
 40038f4:	10c00045 	stb	r3,1(r2)
 40038f8:	8006d43a 	srli	r3,r16,16
 40038fc:	19403fcc 	andi	r5,r3,255
 4003900:	10c00083 	ldbu	r3,2(r2)
 4003904:	1806703a 	and	r3,r3,zero
 4003908:	1809883a 	mov	r4,r3
 400390c:	2807883a 	mov	r3,r5
 4003910:	20c6b03a 	or	r3,r4,r3
 4003914:	10c00085 	stb	r3,2(r2)
 4003918:	800ad63a 	srli	r5,r16,24
 400391c:	10c000c3 	ldbu	r3,3(r2)
 4003920:	1806703a 	and	r3,r3,zero
 4003924:	1809883a 	mov	r4,r3
 4003928:	2807883a 	mov	r3,r5
 400392c:	20c6b03a 	or	r3,r4,r3
 4003930:	10c000c5 	stb	r3,3(r2)
        };
 4003934:	0001883a 	nop
 4003938:	e6fffe04 	addi	sp,fp,-8
 400393c:	dfc00317 	ldw	ra,12(sp)
 4003940:	df000217 	ldw	fp,8(sp)
 4003944:	dc400117 	ldw	r17,4(sp)
 4003948:	dc000017 	ldw	r16,0(sp)
 400394c:	dec00404 	addi	sp,sp,16
 4003950:	f800283a 	ret

04003954 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
 4003954:	defffc04 	addi	sp,sp,-16
 4003958:	dfc00315 	stw	ra,12(sp)
 400395c:	df000215 	stw	fp,8(sp)
 4003960:	df000204 	addi	fp,sp,8
 4003964:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 4003968:	00800044 	movi	r2,1
 400396c:	e0bffe05 	stb	r2,-8(fp)
 4003970:	e0bffe03 	ldbu	r2,-8(fp)
 4003974:	10800428 	cmpgeui	r2,r2,16
 4003978:	1000081e 	bne	r2,zero,400399c <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
 400397c:	e0bffe03 	ldbu	r2,-8(fp)
 4003980:	100b883a 	mov	r5,r2
 4003984:	e13fff17 	ldw	r4,-4(fp)
 4003988:	40038100 	call	4003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 400398c:	e0bffe03 	ldbu	r2,-8(fp)
 4003990:	10800044 	addi	r2,r2,1
 4003994:	e0bffe05 	stb	r2,-8(fp)
 4003998:	003ff506 	br	4003970 <__alt_mem_onchip_memory2_0+0xfc0026d0>
                        InitEntry(i);

                hubCounter = 0;
 400399c:	e0bfff17 	ldw	r2,-4(fp)
 40039a0:	100001c5 	stb	zero,7(r2)
        };
 40039a4:	0001883a 	nop
 40039a8:	e037883a 	mov	sp,fp
 40039ac:	dfc00117 	ldw	ra,4(sp)
 40039b0:	df000017 	ldw	fp,0(sp)
 40039b4:	dec00204 	addi	sp,sp,8
 40039b8:	f800283a 	ret

040039bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
 40039bc:	defffa04 	addi	sp,sp,-24
 40039c0:	dfc00515 	stw	ra,20(sp)
 40039c4:	df000415 	stw	fp,16(sp)
 40039c8:	dc000315 	stw	r16,12(sp)
 40039cc:	df000404 	addi	fp,sp,16
 40039d0:	e13ffd15 	stw	r4,-12(fp)
 40039d4:	2805883a 	mov	r2,r5
 40039d8:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 40039dc:	00800044 	movi	r2,1
 40039e0:	e0bffc05 	stb	r2,-16(fp)
 40039e4:	e0bffc03 	ldbu	r2,-16(fp)
 40039e8:	10800428 	cmpgeui	r2,r2,16
 40039ec:	1000111e 	bne	r2,zero,4003a34 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
 40039f0:	e0bffc03 	ldbu	r2,-16(fp)
 40039f4:	e43ffd17 	ldw	r16,-12(fp)
 40039f8:	014001c4 	movi	r5,7
 40039fc:	1009883a 	mov	r4,r2
 4003a00:	400d7980 	call	400d798 <__mulsi3>
 4003a04:	8085883a 	add	r2,r16,r2
 4003a08:	10800304 	addi	r2,r2,12
 4003a0c:	10800003 	ldbu	r2,0(r2)
 4003a10:	10c03fcc 	andi	r3,r2,255
 4003a14:	e0bffe03 	ldbu	r2,-8(fp)
 4003a18:	1880021e 	bne	r3,r2,4003a24 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
 4003a1c:	e0bffc03 	ldbu	r2,-16(fp)
 4003a20:	00000506 	br	4003a38 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 4003a24:	e0bffc03 	ldbu	r2,-16(fp)
 4003a28:	10800044 	addi	r2,r2,1
 4003a2c:	e0bffc05 	stb	r2,-16(fp)
 4003a30:	003fec06 	br	40039e4 <__alt_mem_onchip_memory2_0+0xfc002744>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
 4003a34:	0005883a 	mov	r2,zero
        };
 4003a38:	e6ffff04 	addi	sp,fp,-4
 4003a3c:	dfc00217 	ldw	ra,8(sp)
 4003a40:	df000117 	ldw	fp,4(sp)
 4003a44:	dc000017 	ldw	r16,0(sp)
 4003a48:	dec00304 	addi	sp,sp,12
 4003a4c:	f800283a 	ret

04003a50 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
 4003a50:	defffa04 	addi	sp,sp,-24
 4003a54:	dfc00515 	stw	ra,20(sp)
 4003a58:	df000415 	stw	fp,16(sp)
 4003a5c:	dc000315 	stw	r16,12(sp)
 4003a60:	df000404 	addi	fp,sp,16
 4003a64:	e13ffd15 	stw	r4,-12(fp)
 4003a68:	2805883a 	mov	r2,r5
 4003a6c:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
 4003a70:	e0bffe03 	ldbu	r2,-8(fp)
 4003a74:	10003026 	beq	r2,zero,4003b38 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
 4003a78:	e0bffe03 	ldbu	r2,-8(fp)
 4003a7c:	e43ffd17 	ldw	r16,-12(fp)
 4003a80:	014001c4 	movi	r5,7
 4003a84:	1009883a 	mov	r4,r2
 4003a88:	400d7980 	call	400d798 <__mulsi3>
 4003a8c:	8085883a 	add	r2,r16,r2
 4003a90:	10800304 	addi	r2,r2,12
 4003a94:	10800003 	ldbu	r2,0(r2)
 4003a98:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
 4003a9c:	e0bffc43 	ldbu	r2,-15(fp)
 4003aa0:	1080100c 	andi	r2,r2,64
 4003aa4:	10803fcc 	andi	r2,r2,255
 4003aa8:	10001e26 	beq	r2,zero,4003b24 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 4003aac:	00800044 	movi	r2,1
 4003ab0:	e0bffc05 	stb	r2,-16(fp)
 4003ab4:	e0bffc03 	ldbu	r2,-16(fp)
 4003ab8:	100d883a 	mov	r6,r2
 4003abc:	e17ffc43 	ldbu	r5,-15(fp)
 4003ac0:	e13ffd17 	ldw	r4,-12(fp)
 4003ac4:	4003b540 	call	4003b54 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 4003ac8:	e0bffc05 	stb	r2,-16(fp)
 4003acc:	e0bffc03 	ldbu	r2,-16(fp)
 4003ad0:	1004c03a 	cmpne	r2,r2,zero
 4003ad4:	10803fcc 	andi	r2,r2,255
 4003ad8:	10000526 	beq	r2,zero,4003af0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
 4003adc:	e0bffc03 	ldbu	r2,-16(fp)
 4003ae0:	100b883a 	mov	r5,r2
 4003ae4:	e13ffd17 	ldw	r4,-12(fp)
 4003ae8:	4003a500 	call	4003a50 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 4003aec:	003ff106 	br	4003ab4 <__alt_mem_onchip_memory2_0+0xfc002814>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
 4003af0:	e0bffd17 	ldw	r2,-12(fp)
 4003af4:	10c001c3 	ldbu	r3,7(r2)
 4003af8:	e0bffc43 	ldbu	r2,-15(fp)
 4003afc:	108001cc 	andi	r2,r2,7
 4003b00:	18c03fcc 	andi	r3,r3,255
 4003b04:	10803fcc 	andi	r2,r2,255
 4003b08:	1880061e 	bne	r3,r2,4003b24 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
 4003b0c:	e0bffd17 	ldw	r2,-12(fp)
 4003b10:	108001c3 	ldbu	r2,7(r2)
 4003b14:	10bfffc4 	addi	r2,r2,-1
 4003b18:	1007883a 	mov	r3,r2
 4003b1c:	e0bffd17 	ldw	r2,-12(fp)
 4003b20:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
 4003b24:	e0bffe03 	ldbu	r2,-8(fp)
 4003b28:	100b883a 	mov	r5,r2
 4003b2c:	e13ffd17 	ldw	r4,-12(fp)
 4003b30:	40038100 	call	4003810 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 4003b34:	00000106 	br	4003b3c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
 4003b38:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
 4003b3c:	e6ffff04 	addi	sp,fp,-4
 4003b40:	dfc00217 	ldw	ra,8(sp)
 4003b44:	df000117 	ldw	fp,4(sp)
 4003b48:	dc000017 	ldw	r16,0(sp)
 4003b4c:	dec00304 	addi	sp,sp,12
 4003b50:	f800283a 	ret

04003b54 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 4003b54:	defff904 	addi	sp,sp,-28
 4003b58:	dfc00615 	stw	ra,24(sp)
 4003b5c:	df000515 	stw	fp,20(sp)
 4003b60:	dc000415 	stw	r16,16(sp)
 4003b64:	df000504 	addi	fp,sp,20
 4003b68:	e13ffc15 	stw	r4,-16(fp)
 4003b6c:	e17ffd05 	stb	r5,-12(fp)
 4003b70:	3005883a 	mov	r2,r6
 4003b74:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 4003b78:	e0bffe03 	ldbu	r2,-8(fp)
 4003b7c:	10000526 	beq	r2,zero,4003b94 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
 4003b80:	e0bffe03 	ldbu	r2,-8(fp)
 4003b84:	10800428 	cmpgeui	r2,r2,16
 4003b88:	1000021e 	bne	r2,zero,4003b94 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
 4003b8c:	e0bffe03 	ldbu	r2,-8(fp)
 4003b90:	00000106 	br	4003b98 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
 4003b94:	00800044 	movi	r2,1
 4003b98:	e0bffb05 	stb	r2,-20(fp)
 4003b9c:	e0bffb03 	ldbu	r2,-20(fp)
 4003ba0:	10800428 	cmpgeui	r2,r2,16
 4003ba4:	1000161e 	bne	r2,zero,4003c00 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 4003ba8:	e0bffb03 	ldbu	r2,-20(fp)
 4003bac:	e43ffc17 	ldw	r16,-16(fp)
 4003bb0:	014001c4 	movi	r5,7
 4003bb4:	1009883a 	mov	r4,r2
 4003bb8:	400d7980 	call	400d798 <__mulsi3>
 4003bbc:	8085883a 	add	r2,r16,r2
 4003bc0:	10800304 	addi	r2,r2,12
 4003bc4:	10800003 	ldbu	r2,0(r2)
 4003bc8:	1004d0fa 	srli	r2,r2,3
 4003bcc:	108001cc 	andi	r2,r2,7
 4003bd0:	1007883a 	mov	r3,r2
 4003bd4:	e0bffd03 	ldbu	r2,-12(fp)
 4003bd8:	108001cc 	andi	r2,r2,7
 4003bdc:	18c03fcc 	andi	r3,r3,255
 4003be0:	10803fcc 	andi	r2,r2,255
 4003be4:	1880021e 	bne	r3,r2,4003bf0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
 4003be8:	e0bffb03 	ldbu	r2,-20(fp)
 4003bec:	00000506 	br	4003c04 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 4003bf0:	e0bffb03 	ldbu	r2,-20(fp)
 4003bf4:	10800044 	addi	r2,r2,1
 4003bf8:	e0bffb05 	stb	r2,-20(fp)
 4003bfc:	003fe706 	br	4003b9c <__alt_mem_onchip_memory2_0+0xfc0028fc>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
 4003c00:	0005883a 	mov	r2,zero
        };
 4003c04:	e6ffff04 	addi	sp,fp,-4
 4003c08:	dfc00217 	ldw	ra,8(sp)
 4003c0c:	df000117 	ldw	fp,4(sp)
 4003c10:	dc000017 	ldw	r16,0(sp)
 4003c14:	dec00304 	addi	sp,sp,12
 4003c18:	f800283a 	ret

04003c1c <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
 4003c1c:	defffb04 	addi	sp,sp,-20
 4003c20:	dfc00415 	stw	ra,16(sp)
 4003c24:	df000315 	stw	fp,12(sp)
 4003c28:	df000304 	addi	fp,sp,12
 4003c2c:	e13ffe15 	stw	r4,-8(fp)
 4003c30:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
 4003c34:	e0bffe17 	ldw	r2,-8(fp)
 4003c38:	1009883a 	mov	r4,r2
 4003c3c:	40055d80 	call	40055d8 <_ZN15USBDeviceConfigC1Ev>
 4003c40:	e0bffe17 	ldw	r2,-8(fp)
 4003c44:	10800104 	addi	r2,r2,4
 4003c48:	1009883a 	mov	r4,r2
 4003c4c:	400560c0 	call	400560c <_ZN17UsbConfigXtracterC1Ev>
 4003c50:	008100b4 	movhi	r2,1026
 4003c54:	10827a04 	addi	r2,r2,2536
 4003c58:	e0fffe17 	ldw	r3,-8(fp)
 4003c5c:	18800015 	stw	r2,0(r3)
 4003c60:	008100b4 	movhi	r2,1026
 4003c64:	10828704 	addi	r2,r2,2588
 4003c68:	e0fffe17 	ldw	r3,-8(fp)
 4003c6c:	18800115 	stw	r2,4(r3)
 4003c70:	e0bffe17 	ldw	r2,-8(fp)
 4003c74:	e0ffff17 	ldw	r3,-4(fp)
 4003c78:	10c00315 	stw	r3,12(r2)
 4003c7c:	e0bffe17 	ldw	r2,-8(fp)
 4003c80:	10000405 	stb	zero,16(r2)
 4003c84:	e0bffe17 	ldw	r2,-8(fp)
 4003c88:	00c00044 	movi	r3,1
 4003c8c:	10c006c5 	stb	r3,27(r2)
 4003c90:	e0bffe17 	ldw	r2,-8(fp)
 4003c94:	10000715 	stw	zero,28(r2)
 4003c98:	e0bffe17 	ldw	r2,-8(fp)
 4003c9c:	10000905 	stb	zero,36(r2)
 4003ca0:	e0bffe17 	ldw	r2,-8(fp)
 4003ca4:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
 4003ca8:	e03ffd05 	stb	zero,-12(fp)
 4003cac:	e0bffd03 	ldbu	r2,-12(fp)
 4003cb0:	108000e8 	cmpgeui	r2,r2,3
 4003cb4:	1000431e 	bne	r2,zero,4003dc4 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
 4003cb8:	e0fffd03 	ldbu	r3,-12(fp)
 4003cbc:	e13ffe17 	ldw	r4,-8(fp)
 4003cc0:	1805883a 	mov	r2,r3
 4003cc4:	1085883a 	add	r2,r2,r2
 4003cc8:	10c5883a 	add	r2,r2,r3
 4003ccc:	2085883a 	add	r2,r4,r2
 4003cd0:	10800444 	addi	r2,r2,17
 4003cd4:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 4003cd8:	e13ffd03 	ldbu	r4,-12(fp)
 4003cdc:	e0bffd03 	ldbu	r2,-12(fp)
 4003ce0:	10000226 	beq	r2,zero,4003cec <_ZN7XBOXONEC1EP3USB+0xd0>
 4003ce4:	0007883a 	mov	r3,zero
 4003ce8:	00000106 	br	4003cf0 <_ZN7XBOXONEC1EP3USB+0xd4>
 4003cec:	00c00204 	movi	r3,8
 4003cf0:	e17ffe17 	ldw	r5,-8(fp)
 4003cf4:	2005883a 	mov	r2,r4
 4003cf8:	1085883a 	add	r2,r2,r2
 4003cfc:	1105883a 	add	r2,r2,r4
 4003d00:	2885883a 	add	r2,r5,r2
 4003d04:	10800484 	addi	r2,r2,18
 4003d08:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
 4003d0c:	e0fffd03 	ldbu	r3,-12(fp)
 4003d10:	e13ffe17 	ldw	r4,-8(fp)
 4003d14:	1805883a 	mov	r2,r3
 4003d18:	1085883a 	add	r2,r2,r2
 4003d1c:	10c5883a 	add	r2,r2,r3
 4003d20:	2085883a 	add	r2,r4,r2
 4003d24:	10800404 	addi	r2,r2,16
 4003d28:	110000c3 	ldbu	r4,3(r2)
 4003d2c:	00ffff84 	movi	r3,-2
 4003d30:	20c6703a 	and	r3,r4,r3
 4003d34:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
 4003d38:	e0fffd03 	ldbu	r3,-12(fp)
 4003d3c:	e13ffe17 	ldw	r4,-8(fp)
 4003d40:	1805883a 	mov	r2,r3
 4003d44:	1085883a 	add	r2,r2,r2
 4003d48:	10c5883a 	add	r2,r2,r3
 4003d4c:	2085883a 	add	r2,r4,r2
 4003d50:	10800404 	addi	r2,r2,16
 4003d54:	110000c3 	ldbu	r4,3(r2)
 4003d58:	00ffff44 	movi	r3,-3
 4003d5c:	20c6703a 	and	r3,r4,r3
 4003d60:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 4003d64:	e13ffd03 	ldbu	r4,-12(fp)
 4003d68:	e0bffd03 	ldbu	r2,-12(fp)
 4003d6c:	10000226 	beq	r2,zero,4003d78 <_ZN7XBOXONEC1EP3USB+0x15c>
 4003d70:	00c00044 	movi	r3,1
 4003d74:	00000106 	br	4003d7c <_ZN7XBOXONEC1EP3USB+0x160>
 4003d78:	00c003c4 	movi	r3,15
 4003d7c:	e17ffe17 	ldw	r5,-8(fp)
 4003d80:	2005883a 	mov	r2,r4
 4003d84:	1085883a 	add	r2,r2,r2
 4003d88:	1105883a 	add	r2,r2,r4
 4003d8c:	2885883a 	add	r2,r5,r2
 4003d90:	10800404 	addi	r2,r2,16
 4003d94:	18c7883a 	add	r3,r3,r3
 4003d98:	18cb883a 	add	r5,r3,r3
 4003d9c:	10c000c3 	ldbu	r3,3(r2)
 4003da0:	18c000cc 	andi	r3,r3,3
 4003da4:	1809883a 	mov	r4,r3
 4003da8:	2807883a 	mov	r3,r5
 4003dac:	20c6b03a 	or	r3,r4,r3
 4003db0:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
 4003db4:	e0bffd03 	ldbu	r2,-12(fp)
 4003db8:	10800044 	addi	r2,r2,1
 4003dbc:	e0bffd05 	stb	r2,-12(fp)
 4003dc0:	003fba06 	br	4003cac <__alt_mem_onchip_memory2_0+0xfc002a0c>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
 4003dc4:	e0bffe17 	ldw	r2,-8(fp)
 4003dc8:	10800317 	ldw	r2,12(r2)
 4003dcc:	10000626 	beq	r2,zero,4003de8 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
 4003dd0:	e0bffe17 	ldw	r2,-8(fp)
 4003dd4:	10800317 	ldw	r2,12(r2)
 4003dd8:	e0fffe17 	ldw	r3,-8(fp)
 4003ddc:	180b883a 	mov	r5,r3
 4003de0:	1009883a 	mov	r4,r2
 4003de4:	400538c0 	call	400538c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 4003de8:	0001883a 	nop
 4003dec:	e037883a 	mov	sp,fp
 4003df0:	dfc00117 	ldw	ra,4(sp)
 4003df4:	df000017 	ldw	fp,0(sp)
 4003df8:	dec00204 	addi	sp,sp,8
 4003dfc:	f800283a 	ret

04003e00 <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
 4003e00:	deffde04 	addi	sp,sp,-136
 4003e04:	dfc02115 	stw	ra,132(sp)
 4003e08:	df002015 	stw	fp,128(sp)
 4003e0c:	df002004 	addi	fp,sp,128
 4003e10:	e13ffc15 	stw	r4,-16(fp)
 4003e14:	2809883a 	mov	r4,r5
 4003e18:	3007883a 	mov	r3,r6
 4003e1c:	3805883a 	mov	r2,r7
 4003e20:	e13ffd05 	stb	r4,-12(fp)
 4003e24:	e0fffe05 	stb	r3,-8(fp)
 4003e28:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 4003e2c:	e0bfe744 	addi	r2,fp,-99
 4003e30:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
 4003e34:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
 4003e38:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
 4003e3c:	e0bffc17 	ldw	r2,-16(fp)
 4003e40:	10800317 	ldw	r2,12(r2)
 4003e44:	1009883a 	mov	r4,r2
 4003e48:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 4003e4c:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
 4003e50:	e0bffc17 	ldw	r2,-16(fp)
 4003e54:	10800403 	ldbu	r2,16(r2)
 4003e58:	10803fcc 	andi	r2,r2,255
 4003e5c:	10000226 	beq	r2,zero,4003e68 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 4003e60:	00bff644 	movi	r2,-39
 4003e64:	00017606 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 4003e68:	e0bfe517 	ldw	r2,-108(fp)
 4003e6c:	10800017 	ldw	r2,0(r2)
 4003e70:	10800017 	ldw	r2,0(r2)
 4003e74:	000b883a 	mov	r5,zero
 4003e78:	e13fe517 	ldw	r4,-108(fp)
 4003e7c:	103ee83a 	callr	r2
 4003e80:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
 4003e84:	e0bfe317 	ldw	r2,-116(fp)
 4003e88:	1000021e 	bne	r2,zero,4003e94 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4003e8c:	00bff584 	movi	r2,-42
 4003e90:	00016b06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
 4003e94:	e0bfe317 	ldw	r2,-116(fp)
 4003e98:	10c00003 	ldbu	r3,0(r2)
 4003e9c:	11000043 	ldbu	r4,1(r2)
 4003ea0:	2008923a 	slli	r4,r4,8
 4003ea4:	20c6b03a 	or	r3,r4,r3
 4003ea8:	11000083 	ldbu	r4,2(r2)
 4003eac:	2008943a 	slli	r4,r4,16
 4003eb0:	20c6b03a 	or	r3,r4,r3
 4003eb4:	108000c3 	ldbu	r2,3(r2)
 4003eb8:	1004963a 	slli	r2,r2,24
 4003ebc:	10c4b03a 	or	r2,r2,r3
 4003ec0:	1000021e 	bne	r2,zero,4003ecc <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 4003ec4:	00bff5c4 	movi	r2,-41
 4003ec8:	00015d06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 4003ecc:	e0bfe317 	ldw	r2,-116(fp)
 4003ed0:	10c00003 	ldbu	r3,0(r2)
 4003ed4:	11000043 	ldbu	r4,1(r2)
 4003ed8:	2008923a 	slli	r4,r4,8
 4003edc:	20c6b03a 	or	r3,r4,r3
 4003ee0:	11000083 	ldbu	r4,2(r2)
 4003ee4:	2008943a 	slli	r4,r4,16
 4003ee8:	20c6b03a 	or	r3,r4,r3
 4003eec:	108000c3 	ldbu	r2,3(r2)
 4003ef0:	1004963a 	slli	r2,r2,24
 4003ef4:	10c4b03a 	or	r2,r2,r3
 4003ef8:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
 4003efc:	e0bffc17 	ldw	r2,-16(fp)
 4003f00:	10c00444 	addi	r3,r2,17
 4003f04:	e0bfe317 	ldw	r2,-116(fp)
 4003f08:	19803fcc 	andi	r6,r3,255
 4003f0c:	11000003 	ldbu	r4,0(r2)
 4003f10:	2008703a 	and	r4,r4,zero
 4003f14:	200b883a 	mov	r5,r4
 4003f18:	3009883a 	mov	r4,r6
 4003f1c:	2908b03a 	or	r4,r5,r4
 4003f20:	11000005 	stb	r4,0(r2)
 4003f24:	1808d23a 	srli	r4,r3,8
 4003f28:	21803fcc 	andi	r6,r4,255
 4003f2c:	11000043 	ldbu	r4,1(r2)
 4003f30:	2008703a 	and	r4,r4,zero
 4003f34:	200b883a 	mov	r5,r4
 4003f38:	3009883a 	mov	r4,r6
 4003f3c:	2908b03a 	or	r4,r5,r4
 4003f40:	11000045 	stb	r4,1(r2)
 4003f44:	1808d43a 	srli	r4,r3,16
 4003f48:	21803fcc 	andi	r6,r4,255
 4003f4c:	11000083 	ldbu	r4,2(r2)
 4003f50:	2008703a 	and	r4,r4,zero
 4003f54:	200b883a 	mov	r5,r4
 4003f58:	3009883a 	mov	r4,r6
 4003f5c:	2908b03a 	or	r4,r5,r4
 4003f60:	11000085 	stb	r4,2(r2)
 4003f64:	180ad63a 	srli	r5,r3,24
 4003f68:	10c000c3 	ldbu	r3,3(r2)
 4003f6c:	1806703a 	and	r3,r3,zero
 4003f70:	1809883a 	mov	r4,r3
 4003f74:	2807883a 	mov	r3,r5
 4003f78:	20c6b03a 	or	r3,r4,r3
 4003f7c:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
 4003f80:	e0bfe317 	ldw	r2,-116(fp)
 4003f84:	e0ffff03 	ldbu	r3,-4(fp)
 4003f88:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 4003f8c:	e0bffc17 	ldw	r2,-16(fp)
 4003f90:	10c00317 	ldw	r3,12(r2)
 4003f94:	00800484 	movi	r2,18
 4003f98:	113fffcc 	andi	r4,r2,65535
 4003f9c:	e0bfe744 	addi	r2,fp,-99
 4003fa0:	d8800015 	stw	r2,0(sp)
 4003fa4:	200f883a 	mov	r7,r4
 4003fa8:	000d883a 	mov	r6,zero
 4003fac:	000b883a 	mov	r5,zero
 4003fb0:	1809883a 	mov	r4,r3
 4003fb4:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 4003fb8:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 4003fbc:	e0bfe317 	ldw	r2,-116(fp)
 4003fc0:	e0ffe417 	ldw	r3,-112(fp)
 4003fc4:	19403fcc 	andi	r5,r3,255
 4003fc8:	10c00003 	ldbu	r3,0(r2)
 4003fcc:	1806703a 	and	r3,r3,zero
 4003fd0:	1809883a 	mov	r4,r3
 4003fd4:	2807883a 	mov	r3,r5
 4003fd8:	20c6b03a 	or	r3,r4,r3
 4003fdc:	10c00005 	stb	r3,0(r2)
 4003fe0:	e0ffe417 	ldw	r3,-112(fp)
 4003fe4:	1806d23a 	srli	r3,r3,8
 4003fe8:	19403fcc 	andi	r5,r3,255
 4003fec:	10c00043 	ldbu	r3,1(r2)
 4003ff0:	1806703a 	and	r3,r3,zero
 4003ff4:	1809883a 	mov	r4,r3
 4003ff8:	2807883a 	mov	r3,r5
 4003ffc:	20c6b03a 	or	r3,r4,r3
 4004000:	10c00045 	stb	r3,1(r2)
 4004004:	e0ffe417 	ldw	r3,-112(fp)
 4004008:	1806d43a 	srli	r3,r3,16
 400400c:	19403fcc 	andi	r5,r3,255
 4004010:	10c00083 	ldbu	r3,2(r2)
 4004014:	1806703a 	and	r3,r3,zero
 4004018:	1809883a 	mov	r4,r3
 400401c:	2807883a 	mov	r3,r5
 4004020:	20c6b03a 	or	r3,r4,r3
 4004024:	10c00085 	stb	r3,2(r2)
 4004028:	e0ffe417 	ldw	r3,-112(fp)
 400402c:	180ad63a 	srli	r5,r3,24
 4004030:	10c000c3 	ldbu	r3,3(r2)
 4004034:	1806703a 	and	r3,r3,zero
 4004038:	1809883a 	mov	r4,r3
 400403c:	2807883a 	mov	r3,r5
 4004040:	20c6b03a 	or	r3,r4,r3
 4004044:	10c000c5 	stb	r3,3(r2)

        if(rcode)
 4004048:	e0bfe103 	ldbu	r2,-124(fp)
 400404c:	1000e61e 	bne	r2,zero,40043e8 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
 4004050:	e0bfe217 	ldw	r2,-120(fp)
 4004054:	10c00203 	ldbu	r3,8(r2)
 4004058:	10800243 	ldbu	r2,9(r2)
 400405c:	1004923a 	slli	r2,r2,8
 4004060:	10c4b03a 	or	r2,r2,r3
 4004064:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
 4004068:	e0bfe217 	ldw	r2,-120(fp)
 400406c:	10c00283 	ldbu	r3,10(r2)
 4004070:	108002c3 	ldbu	r2,11(r2)
 4004074:	1004923a 	slli	r2,r2,8
 4004078:	10c4b03a 	or	r2,r2,r3
 400407c:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
 4004080:	e0bffc17 	ldw	r2,-16(fp)
 4004084:	10800017 	ldw	r2,0(r2)
 4004088:	10800604 	addi	r2,r2,24
 400408c:	10800017 	ldw	r2,0(r2)
 4004090:	e0ffe60b 	ldhu	r3,-104(fp)
 4004094:	e13fe68b 	ldhu	r4,-102(fp)
 4004098:	200d883a 	mov	r6,r4
 400409c:	180b883a 	mov	r5,r3
 40040a0:	e13ffc17 	ldw	r4,-16(fp)
 40040a4:	103ee83a 	callr	r2
 40040a8:	1080005c 	xori	r2,r2,1
 40040ac:	10803fcc 	andi	r2,r2,255
 40040b0:	1000d51e 	bne	r2,zero,4004408 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
 40040b4:	e0bfe517 	ldw	r2,-108(fp)
 40040b8:	10800017 	ldw	r2,0(r2)
 40040bc:	10800104 	addi	r2,r2,4
 40040c0:	10800017 	ldw	r2,0(r2)
 40040c4:	e0fffd03 	ldbu	r3,-12(fp)
 40040c8:	e13ffe03 	ldbu	r4,-8(fp)
 40040cc:	200f883a 	mov	r7,r4
 40040d0:	000d883a 	mov	r6,zero
 40040d4:	180b883a 	mov	r5,r3
 40040d8:	e13fe517 	ldw	r4,-108(fp)
 40040dc:	103ee83a 	callr	r2
 40040e0:	1007883a 	mov	r3,r2
 40040e4:	e0bffc17 	ldw	r2,-16(fp)
 40040e8:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
 40040ec:	e0bffc17 	ldw	r2,-16(fp)
 40040f0:	10800403 	ldbu	r2,16(r2)
 40040f4:	10803fcc 	andi	r2,r2,255
 40040f8:	1000021e 	bne	r2,zero,4004104 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 40040fc:	00bff504 	movi	r2,-44
 4004100:	0000cf06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
 4004104:	e0bfe217 	ldw	r2,-120(fp)
 4004108:	10c001c3 	ldbu	r3,7(r2)
 400410c:	e0bffc17 	ldw	r2,-16(fp)
 4004110:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
 4004114:	e0bffc17 	ldw	r2,-16(fp)
 4004118:	10c00317 	ldw	r3,12(r2)
 400411c:	e0bffc17 	ldw	r2,-16(fp)
 4004120:	10800403 	ldbu	r2,16(r2)
 4004124:	10803fcc 	andi	r2,r2,255
 4004128:	100f883a 	mov	r7,r2
 400412c:	000d883a 	mov	r6,zero
 4004130:	000b883a 	mov	r5,zero
 4004134:	1809883a 	mov	r4,r3
 4004138:	40032500 	call	4003250 <_ZN3USB7setAddrEhhh>
 400413c:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
 4004140:	e0bfe103 	ldbu	r2,-124(fp)
 4004144:	10001026 	beq	r2,zero,4004188 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
 4004148:	e0bfe317 	ldw	r2,-116(fp)
 400414c:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
 4004150:	e0bfe517 	ldw	r2,-108(fp)
 4004154:	10800017 	ldw	r2,0(r2)
 4004158:	10800204 	addi	r2,r2,8
 400415c:	10800017 	ldw	r2,0(r2)
 4004160:	e0fffc17 	ldw	r3,-16(fp)
 4004164:	18c00403 	ldbu	r3,16(r3)
 4004168:	18c03fcc 	andi	r3,r3,255
 400416c:	180b883a 	mov	r5,r3
 4004170:	e13fe517 	ldw	r4,-108(fp)
 4004174:	103ee83a 	callr	r2
                bAddress = 0;
 4004178:	e0bffc17 	ldw	r2,-16(fp)
 400417c:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
 4004180:	e0bfe103 	ldbu	r2,-124(fp)
 4004184:	0000ae06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
 4004188:	e0bfe317 	ldw	r2,-116(fp)
 400418c:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
 4004190:	e0bfe517 	ldw	r2,-108(fp)
 4004194:	10800017 	ldw	r2,0(r2)
 4004198:	10800017 	ldw	r2,0(r2)
 400419c:	e0fffc17 	ldw	r3,-16(fp)
 40041a0:	18c00403 	ldbu	r3,16(r3)
 40041a4:	18c03fcc 	andi	r3,r3,255
 40041a8:	180b883a 	mov	r5,r3
 40041ac:	e13fe517 	ldw	r4,-108(fp)
 40041b0:	103ee83a 	callr	r2
 40041b4:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
 40041b8:	e0bfe317 	ldw	r2,-116(fp)
 40041bc:	1000021e 	bne	r2,zero,40041c8 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40041c0:	00bff584 	movi	r2,-42
 40041c4:	00009e06 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
 40041c8:	e0bfe317 	ldw	r2,-116(fp)
 40041cc:	e0ffff03 	ldbu	r3,-4(fp)
 40041d0:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
 40041d4:	e0bffc17 	ldw	r2,-16(fp)
 40041d8:	10c00317 	ldw	r3,12(r2)
 40041dc:	e0bffc17 	ldw	r2,-16(fp)
 40041e0:	10800403 	ldbu	r2,16(r2)
 40041e4:	11003fcc 	andi	r4,r2,255
 40041e8:	e0bffc17 	ldw	r2,-16(fp)
 40041ec:	10800444 	addi	r2,r2,17
 40041f0:	100f883a 	mov	r7,r2
 40041f4:	01800044 	movi	r6,1
 40041f8:	200b883a 	mov	r5,r4
 40041fc:	1809883a 	mov	r4,r3
 4004200:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 4004204:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 4004208:	e0bfe103 	ldbu	r2,-124(fp)
 400420c:	1000781e 	bne	r2,zero,40043f0 <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
 4004210:	e0bfe217 	ldw	r2,-120(fp)
 4004214:	10800443 	ldbu	r2,17(r2)
 4004218:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
 400421c:	e0bfe703 	ldbu	r2,-100(fp)
 4004220:	01402004 	movi	r5,128
 4004224:	1009883a 	mov	r4,r2
 4004228:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
 400422c:	e03fe145 	stb	zero,-123(fp)
 4004230:	e0ffe143 	ldbu	r3,-123(fp)
 4004234:	e0bfe703 	ldbu	r2,-100(fp)
 4004238:	1880222e 	bgeu	r3,r2,40042c4 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
 400423c:	e0bffc17 	ldw	r2,-16(fp)
 4004240:	10c00104 	addi	r3,r2,4
 4004244:	e0bfed04 	addi	r2,fp,-76
 4004248:	180b883a 	mov	r5,r3
 400424c:	1009883a 	mov	r4,r2
 4004250:	40056740 	call	4005674 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 4004254:	e0bffc17 	ldw	r2,-16(fp)
 4004258:	10c00317 	ldw	r3,12(r2)
 400425c:	e0bffc17 	ldw	r2,-16(fp)
 4004260:	10800403 	ldbu	r2,16(r2)
 4004264:	11003fcc 	andi	r4,r2,255
 4004268:	e17fe143 	ldbu	r5,-123(fp)
 400426c:	e0bfed04 	addi	r2,fp,-76
 4004270:	d8800015 	stw	r2,0(sp)
 4004274:	280f883a 	mov	r7,r5
 4004278:	000d883a 	mov	r6,zero
 400427c:	200b883a 	mov	r5,r4
 4004280:	1809883a 	mov	r4,r3
 4004284:	40030b00 	call	40030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 4004288:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
 400428c:	e0bfe103 	ldbu	r2,-124(fp)
 4004290:	10000226 	beq	r2,zero,400429c <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
 4004294:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 4004298:	00006206 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
 400429c:	e0bffc17 	ldw	r2,-16(fp)
 40042a0:	108006c3 	ldbu	r2,27(r2)
 40042a4:	10803fcc 	andi	r2,r2,255
 40042a8:	108000f0 	cmpltui	r2,r2,3
 40042ac:	10000426 	beq	r2,zero,40042c0 <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
 40042b0:	e0bfe143 	ldbu	r2,-123(fp)
 40042b4:	10800044 	addi	r2,r2,1
 40042b8:	e0bfe145 	stb	r2,-123(fp)
 40042bc:	003fdc06 	br	4004230 <__alt_mem_onchip_memory2_0+0xfc002f90>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
 40042c0:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
 40042c4:	e0bffc17 	ldw	r2,-16(fp)
 40042c8:	108006c3 	ldbu	r2,27(r2)
 40042cc:	10803fcc 	andi	r2,r2,255
 40042d0:	108000e8 	cmpgeui	r2,r2,3
 40042d4:	10004e26 	beq	r2,zero,4004410 <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 40042d8:	e0bffc17 	ldw	r2,-16(fp)
 40042dc:	10c00317 	ldw	r3,12(r2)
 40042e0:	e0bffc17 	ldw	r2,-16(fp)
 40042e4:	10800403 	ldbu	r2,16(r2)
 40042e8:	11003fcc 	andi	r4,r2,255
 40042ec:	e0bffc17 	ldw	r2,-16(fp)
 40042f0:	108006c3 	ldbu	r2,27(r2)
 40042f4:	11403fcc 	andi	r5,r2,255
 40042f8:	e0bffc17 	ldw	r2,-16(fp)
 40042fc:	10800444 	addi	r2,r2,17
 4004300:	100f883a 	mov	r7,r2
 4004304:	280d883a 	mov	r6,r5
 4004308:	200b883a 	mov	r5,r4
 400430c:	1809883a 	mov	r4,r3
 4004310:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 4004314:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 4004318:	e0bfe103 	ldbu	r2,-124(fp)
 400431c:	1000361e 	bne	r2,zero,40043f8 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
 4004320:	01003204 	movi	r4,200
 4004324:	4000dd40 	call	4000dd4 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
 4004328:	e0bffc17 	ldw	r2,-16(fp)
 400432c:	10c00317 	ldw	r3,12(r2)
 4004330:	e0bffc17 	ldw	r2,-16(fp)
 4004334:	10800403 	ldbu	r2,16(r2)
 4004338:	11003fcc 	andi	r4,r2,255
 400433c:	e0bffc17 	ldw	r2,-16(fp)
 4004340:	10800443 	ldbu	r2,17(r2)
 4004344:	11403fcc 	andi	r5,r2,255
 4004348:	e0bffc17 	ldw	r2,-16(fp)
 400434c:	10800683 	ldbu	r2,26(r2)
 4004350:	10803fcc 	andi	r2,r2,255
 4004354:	100f883a 	mov	r7,r2
 4004358:	280d883a 	mov	r6,r5
 400435c:	200b883a 	mov	r5,r4
 4004360:	1809883a 	mov	r4,r3
 4004364:	40032e40 	call	40032e4 <_ZN3USB7setConfEhhh>
 4004368:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 400436c:	e0bfe103 	ldbu	r2,-124(fp)
 4004370:	1000231e 	bne	r2,zero,4004400 <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
 4004374:	01003204 	movi	r4,200
 4004378:	4000dd40 	call	4000dd4 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
 400437c:	e0bffc17 	ldw	r2,-16(fp)
 4004380:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
 4004384:	00800144 	movi	r2,5
 4004388:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
 400438c:	00800804 	movi	r2,32
 4004390:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
 4004394:	00800044 	movi	r2,1
 4004398:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
 400439c:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
 40043a0:	e0bfebc4 	addi	r2,fp,-81
 40043a4:	01800144 	movi	r6,5
 40043a8:	100b883a 	mov	r5,r2
 40043ac:	e13ffc17 	ldw	r4,-16(fp)
 40043b0:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>
 40043b4:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
 40043b8:	e0bfe103 	ldbu	r2,-124(fp)
 40043bc:	1000181e 	bne	r2,zero,4004420 <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
 40043c0:	e13ffc17 	ldw	r4,-16(fp)
 40043c4:	4004d680 	call	4004d68 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
 40043c8:	e0bffc17 	ldw	r2,-16(fp)
 40043cc:	00c00044 	movi	r3,1
 40043d0:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
 40043d4:	e0bffc17 	ldw	r2,-16(fp)
 40043d8:	00c00044 	movi	r3,1
 40043dc:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
 40043e0:	0005883a 	mov	r2,zero
 40043e4:	00001606 	br	4004440 <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
 40043e8:	0001883a 	nop
 40043ec:	00000d06 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
 40043f0:	0001883a 	nop
 40043f4:	00000b06 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
 40043f8:	0001883a 	nop
 40043fc:	00000906 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
 4004400:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 4004404:	00000706 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
 4004408:	0001883a 	nop
 400440c:	00000106 	br	4004414 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
 4004410:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 4004414:	00bff444 	movi	r2,-47
 4004418:	e0bfe105 	stb	r2,-124(fp)
 400441c:	00000106 	br	4004424 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
 4004420:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 4004424:	e0bffc17 	ldw	r2,-16(fp)
 4004428:	10800017 	ldw	r2,0(r2)
 400442c:	10800204 	addi	r2,r2,8
 4004430:	10800017 	ldw	r2,0(r2)
 4004434:	e13ffc17 	ldw	r4,-16(fp)
 4004438:	103ee83a 	callr	r2
        return rcode;
 400443c:	e0bfe103 	ldbu	r2,-124(fp)
}
 4004440:	e037883a 	mov	sp,fp
 4004444:	dfc00117 	ldw	ra,4(sp)
 4004448:	df000017 	ldw	fp,0(sp)
 400444c:	dec00204 	addi	sp,sp,8
 4004450:	f800283a 	ret

04004454 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
 4004454:	defff904 	addi	sp,sp,-28
 4004458:	df000615 	stw	fp,24(sp)
 400445c:	df000604 	addi	fp,sp,24
 4004460:	e13ffb15 	stw	r4,-20(fp)
 4004464:	3009883a 	mov	r4,r6
 4004468:	3807883a 	mov	r3,r7
 400446c:	e0800117 	ldw	r2,4(fp)
 4004470:	e17ffc05 	stb	r5,-16(fp)
 4004474:	e13ffd05 	stb	r4,-12(fp)
 4004478:	e0fffe05 	stb	r3,-8(fp)
 400447c:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
 4004480:	e0bffb17 	ldw	r2,-20(fp)
 4004484:	e0fffc03 	ldbu	r3,-16(fp)
 4004488:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
 400448c:	e0800217 	ldw	r2,8(fp)
 4004490:	108000c3 	ldbu	r2,3(r2)
 4004494:	10803fcc 	andi	r2,r2,255
 4004498:	108000cc 	andi	r2,r2,3
 400449c:	108000d8 	cmpnei	r2,r2,3
 40044a0:	1000361e 	bne	r2,zero,400457c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
 40044a4:	e0800217 	ldw	r2,8(fp)
 40044a8:	10800083 	ldbu	r2,2(r2)
 40044ac:	10803fcc 	andi	r2,r2,255
 40044b0:	1080201c 	xori	r2,r2,128
 40044b4:	10bfe004 	addi	r2,r2,-128
 40044b8:	1000020e 	bge	r2,zero,40044c4 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
 40044bc:	00800084 	movi	r2,2
 40044c0:	00000106 	br	40044c8 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
 40044c4:	00800044 	movi	r2,1
 40044c8:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 40044cc:	e0fffa03 	ldbu	r3,-24(fp)
 40044d0:	e0800217 	ldw	r2,8(fp)
 40044d4:	10800083 	ldbu	r2,2(r2)
 40044d8:	108003cc 	andi	r2,r2,15
 40044dc:	100b883a 	mov	r5,r2
 40044e0:	e13ffb17 	ldw	r4,-20(fp)
 40044e4:	1805883a 	mov	r2,r3
 40044e8:	1085883a 	add	r2,r2,r2
 40044ec:	10c5883a 	add	r2,r2,r3
 40044f0:	2085883a 	add	r2,r4,r2
 40044f4:	10800444 	addi	r2,r2,17
 40044f8:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 40044fc:	e0fffa03 	ldbu	r3,-24(fp)
 4004500:	e0800217 	ldw	r2,8(fp)
 4004504:	11000103 	ldbu	r4,4(r2)
 4004508:	10800143 	ldbu	r2,5(r2)
 400450c:	1004923a 	slli	r2,r2,8
 4004510:	1104b03a 	or	r2,r2,r4
 4004514:	100b883a 	mov	r5,r2
 4004518:	e13ffb17 	ldw	r4,-20(fp)
 400451c:	1805883a 	mov	r2,r3
 4004520:	1085883a 	add	r2,r2,r2
 4004524:	10c5883a 	add	r2,r2,r3
 4004528:	2085883a 	add	r2,r4,r2
 400452c:	10800484 	addi	r2,r2,18
 4004530:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 4004534:	e0bffb17 	ldw	r2,-20(fp)
 4004538:	10c00903 	ldbu	r3,36(r2)
 400453c:	e0800217 	ldw	r2,8(fp)
 4004540:	10800183 	ldbu	r2,6(r2)
 4004544:	18c03fcc 	andi	r3,r3,255
 4004548:	10803fcc 	andi	r2,r2,255
 400454c:	1880042e 	bgeu	r3,r2,4004560 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
 4004550:	e0800217 	ldw	r2,8(fp)
 4004554:	10c00183 	ldbu	r3,6(r2)
 4004558:	e0bffb17 	ldw	r2,-20(fp)
 400455c:	10c00905 	stb	r3,36(r2)
        bNumEP++;
 4004560:	e0bffb17 	ldw	r2,-20(fp)
 4004564:	108006c3 	ldbu	r2,27(r2)
 4004568:	10800044 	addi	r2,r2,1
 400456c:	1007883a 	mov	r3,r2
 4004570:	e0bffb17 	ldw	r2,-20(fp)
 4004574:	10c006c5 	stb	r3,27(r2)
 4004578:	00000106 	br	4004580 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
 400457c:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
 4004580:	e037883a 	mov	sp,fp
 4004584:	df000017 	ldw	fp,0(sp)
 4004588:	dec00104 	addi	sp,sp,4
 400458c:	f800283a 	ret

04004590 <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 4004590:	213fff04 	addi	r4,r4,-4
 4004594:	40044541 	jmpi	4004454 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

04004598 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
 4004598:	defffd04 	addi	sp,sp,-12
 400459c:	df000215 	stw	fp,8(sp)
 40045a0:	df000204 	addi	fp,sp,8
 40045a4:	e13ffe15 	stw	r4,-8(fp)
 40045a8:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
 40045ac:	0001883a 	nop
 40045b0:	e037883a 	mov	sp,fp
 40045b4:	df000017 	ldw	fp,0(sp)
 40045b8:	dec00104 	addi	sp,sp,4
 40045bc:	f800283a 	ret

040045c0 <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
 40045c0:	defffd04 	addi	sp,sp,-12
 40045c4:	dfc00215 	stw	ra,8(sp)
 40045c8:	df000115 	stw	fp,4(sp)
 40045cc:	df000104 	addi	fp,sp,4
 40045d0:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
 40045d4:	e0bfff17 	ldw	r2,-4(fp)
 40045d8:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
 40045dc:	e0bfff17 	ldw	r2,-4(fp)
 40045e0:	10800317 	ldw	r2,12(r2)
 40045e4:	1009883a 	mov	r4,r2
 40045e8:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 40045ec:	1009883a 	mov	r4,r2
 40045f0:	20800017 	ldw	r2,0(r4)
 40045f4:	10800204 	addi	r2,r2,8
 40045f8:	10800017 	ldw	r2,0(r2)
 40045fc:	e0ffff17 	ldw	r3,-4(fp)
 4004600:	18c00403 	ldbu	r3,16(r3)
 4004604:	18c03fcc 	andi	r3,r3,255
 4004608:	180b883a 	mov	r5,r3
 400460c:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
 4004610:	e0bfff17 	ldw	r2,-4(fp)
 4004614:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
 4004618:	e0bfff17 	ldw	r2,-4(fp)
 400461c:	00c00044 	movi	r3,1
 4004620:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
 4004624:	e0bfff17 	ldw	r2,-4(fp)
 4004628:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
 400462c:	e0bfff17 	ldw	r2,-4(fp)
 4004630:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
 4004634:	e0bfff17 	ldw	r2,-4(fp)
 4004638:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
 400463c:	0005883a 	mov	r2,zero
}
 4004640:	e037883a 	mov	sp,fp
 4004644:	dfc00117 	ldw	ra,4(sp)
 4004648:	df000017 	ldw	fp,0(sp)
 400464c:	dec00204 	addi	sp,sp,8
 4004650:	f800283a 	ret

04004654 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
 4004654:	defffa04 	addi	sp,sp,-24
 4004658:	dfc00515 	stw	ra,20(sp)
 400465c:	df000415 	stw	fp,16(sp)
 4004660:	df000404 	addi	fp,sp,16
 4004664:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
 4004668:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
 400466c:	e0bfff17 	ldw	r2,-4(fp)
 4004670:	10800943 	ldbu	r2,37(r2)
 4004674:	1080005c 	xori	r2,r2,1
 4004678:	10803fcc 	andi	r2,r2,255
 400467c:	10000226 	beq	r2,zero,4004688 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
 4004680:	0005883a 	mov	r2,zero
 4004684:	00002c06 	br	4004738 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
 4004688:	4000e2c0 	call	4000e2c <_Z6millisv>
 400468c:	1007883a 	mov	r3,r2
 4004690:	e0bfff17 	ldw	r2,-4(fp)
 4004694:	10800717 	ldw	r2,28(r2)
 4004698:	1885c83a 	sub	r2,r3,r2
 400469c:	0084303a 	nor	r2,zero,r2
 40046a0:	1004d7fa 	srli	r2,r2,31
 40046a4:	10803fcc 	andi	r2,r2,255
 40046a8:	10002226 	beq	r2,zero,4004734 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 40046ac:	4000e2c0 	call	4000e2c <_Z6millisv>
 40046b0:	1007883a 	mov	r3,r2
 40046b4:	e0bfff17 	ldw	r2,-4(fp)
 40046b8:	10800903 	ldbu	r2,36(r2)
 40046bc:	10803fcc 	andi	r2,r2,255
 40046c0:	1887883a 	add	r3,r3,r2
 40046c4:	e0bfff17 	ldw	r2,-4(fp)
 40046c8:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
 40046cc:	e0bfff17 	ldw	r2,-4(fp)
 40046d0:	10800603 	ldbu	r2,24(r2)
 40046d4:	10803fcc 	andi	r2,r2,255
 40046d8:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
 40046dc:	e0bfff17 	ldw	r2,-4(fp)
 40046e0:	11000317 	ldw	r4,12(r2)
 40046e4:	e0bfff17 	ldw	r2,-4(fp)
 40046e8:	10800403 	ldbu	r2,16(r2)
 40046ec:	11403fcc 	andi	r5,r2,255
 40046f0:	e0bfff17 	ldw	r2,-4(fp)
 40046f4:	108005c3 	ldbu	r2,23(r2)
 40046f8:	11803fcc 	andi	r6,r2,255
 40046fc:	e0bfff17 	ldw	r2,-4(fp)
 4004700:	10800f84 	addi	r2,r2,62
 4004704:	e0ffff17 	ldw	r3,-4(fp)
 4004708:	18c00903 	ldbu	r3,36(r3)
 400470c:	18c03fcc 	andi	r3,r3,255
 4004710:	e1fffe84 	addi	r7,fp,-6
 4004714:	d8c00115 	stw	r3,4(sp)
 4004718:	d8800015 	stw	r2,0(sp)
 400471c:	40015fc0 	call	40015fc <_ZN3USB10inTransferEhhPtPhh>
 4004720:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
 4004724:	e0bffe43 	ldbu	r2,-7(fp)
 4004728:	1000021e 	bne	r2,zero,4004734 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
 400472c:	e13fff17 	ldw	r4,-4(fp)
 4004730:	400474c0 	call	400474c <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
 4004734:	e0bffe03 	ldbu	r2,-8(fp)
}
 4004738:	e037883a 	mov	sp,fp
 400473c:	dfc00117 	ldw	ra,4(sp)
 4004740:	df000017 	ldw	fp,0(sp)
 4004744:	dec00204 	addi	sp,sp,8
 4004748:	f800283a 	ret

0400474c <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
 400474c:	defffd04 	addi	sp,sp,-12
 4004750:	df000215 	stw	fp,8(sp)
 4004754:	df000204 	addi	fp,sp,8
 4004758:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
 400475c:	e0bfff17 	ldw	r2,-4(fp)
 4004760:	10800f83 	ldbu	r2,62(r2)
 4004764:	10803fcc 	andi	r2,r2,255
 4004768:	108001d8 	cmpnei	r2,r2,7
 400476c:	10002f1e 	bne	r2,zero,400482c <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
 4004770:	e0bfff17 	ldw	r2,-4(fp)
 4004774:	10801083 	ldbu	r2,66(r2)
 4004778:	10803fcc 	andi	r2,r2,255
 400477c:	10800058 	cmpnei	r2,r2,1
 4004780:	10000a1e 	bne	r2,zero,40047ac <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
 4004784:	e0bfff17 	ldw	r2,-4(fp)
 4004788:	10c0098b 	ldhu	r3,38(r2)
 400478c:	008100b4 	movhi	r2,1026
 4004790:	10827684 	addi	r2,r2,2522
 4004794:	1080000b 	ldhu	r2,0(r2)
 4004798:	1884b03a 	or	r2,r3,r2
 400479c:	1007883a 	mov	r3,r2
 40047a0:	e0bfff17 	ldw	r2,-4(fp)
 40047a4:	10c0098d 	sth	r3,38(r2)
 40047a8:	00000b06 	br	40047d8 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
 40047ac:	e0bfff17 	ldw	r2,-4(fp)
 40047b0:	1080098b 	ldhu	r2,38(r2)
 40047b4:	1007883a 	mov	r3,r2
 40047b8:	008100b4 	movhi	r2,1026
 40047bc:	10827684 	addi	r2,r2,2522
 40047c0:	1080000b 	ldhu	r2,0(r2)
 40047c4:	0084303a 	nor	r2,zero,r2
 40047c8:	1884703a 	and	r2,r3,r2
 40047cc:	1007883a 	mov	r3,r2
 40047d0:	e0bfff17 	ldw	r2,-4(fp)
 40047d4:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
 40047d8:	e0bfff17 	ldw	r2,-4(fp)
 40047dc:	10c0098b 	ldhu	r3,38(r2)
 40047e0:	e0bfff17 	ldw	r2,-4(fp)
 40047e4:	10800a0b 	ldhu	r2,40(r2)
 40047e8:	18ffffcc 	andi	r3,r3,65535
 40047ec:	10bfffcc 	andi	r2,r2,65535
 40047f0:	18800e26 	beq	r3,r2,400482c <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
 40047f4:	e0bfff17 	ldw	r2,-4(fp)
 40047f8:	1080098b 	ldhu	r2,38(r2)
 40047fc:	1007883a 	mov	r3,r2
 4004800:	e0bfff17 	ldw	r2,-4(fp)
 4004804:	10800a0b 	ldhu	r2,40(r2)
 4004808:	0084303a 	nor	r2,zero,r2
 400480c:	1884703a 	and	r2,r3,r2
 4004810:	1007883a 	mov	r3,r2
 4004814:	e0bfff17 	ldw	r2,-4(fp)
 4004818:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
 400481c:	e0bfff17 	ldw	r2,-4(fp)
 4004820:	10c0098b 	ldhu	r3,38(r2)
 4004824:	e0bfff17 	ldw	r2,-4(fp)
 4004828:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
 400482c:	e0bfff17 	ldw	r2,-4(fp)
 4004830:	10800f83 	ldbu	r2,62(r2)
 4004834:	10803fcc 	andi	r2,r2,255
 4004838:	10800820 	cmpeqi	r2,r2,32
 400483c:	1000b026 	beq	r2,zero,4004b00 <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
 4004840:	e0bfff17 	ldw	r2,-4(fp)
 4004844:	10c0098b 	ldhu	r3,38(r2)
 4004848:	008100b4 	movhi	r2,1026
 400484c:	10827684 	addi	r2,r2,2522
 4004850:	1080000b 	ldhu	r2,0(r2)
 4004854:	1884703a 	and	r2,r3,r2
 4004858:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
 400485c:	e0bfff17 	ldw	r2,-4(fp)
 4004860:	108010c3 	ldbu	r2,67(r2)
 4004864:	10803fcc 	andi	r2,r2,255
 4004868:	108003cc 	andi	r2,r2,15
 400486c:	1004923a 	slli	r2,r2,8
 4004870:	1007883a 	mov	r3,r2
 4004874:	e0bffe0b 	ldhu	r2,-8(fp)
 4004878:	1884b03a 	or	r2,r3,r2
 400487c:	1007883a 	mov	r3,r2
 4004880:	e0bfff17 	ldw	r2,-4(fp)
 4004884:	10801083 	ldbu	r2,66(r2)
 4004888:	10803fcc 	andi	r2,r2,255
 400488c:	10803c0c 	andi	r2,r2,240
 4004890:	1884b03a 	or	r2,r3,r2
 4004894:	1007883a 	mov	r3,r2
 4004898:	e0bfff17 	ldw	r2,-4(fp)
 400489c:	10801083 	ldbu	r2,66(r2)
 40048a0:	10803fcc 	andi	r2,r2,255
 40048a4:	1080030c 	andi	r2,r2,12
 40048a8:	100492ba 	slli	r2,r2,10
 40048ac:	1884b03a 	or	r2,r3,r2
 40048b0:	1007883a 	mov	r3,r2
 40048b4:	e0bfff17 	ldw	r2,-4(fp)
 40048b8:	10801083 	ldbu	r2,66(r2)
 40048bc:	10803fcc 	andi	r2,r2,255
 40048c0:	1080004c 	andi	r2,r2,1
 40048c4:	100490fa 	slli	r2,r2,3
 40048c8:	1884b03a 	or	r2,r3,r2
 40048cc:	1007883a 	mov	r3,r2
 40048d0:	e0bfff17 	ldw	r2,-4(fp)
 40048d4:	108010c3 	ldbu	r2,67(r2)
 40048d8:	10803fcc 	andi	r2,r2,255
 40048dc:	1080300c 	andi	r2,r2,192
 40048e0:	1004923a 	slli	r2,r2,8
 40048e4:	1884b03a 	or	r2,r3,r2
 40048e8:	1007883a 	mov	r3,r2
 40048ec:	e0bfff17 	ldw	r2,-4(fp)
 40048f0:	108010c3 	ldbu	r2,67(r2)
 40048f4:	10803fcc 	andi	r2,r2,255
 40048f8:	10800c0c 	andi	r2,r2,48
 40048fc:	1005d13a 	srai	r2,r2,4
 4004900:	1884b03a 	or	r2,r3,r2
 4004904:	1007883a 	mov	r3,r2
 4004908:	e0bfff17 	ldw	r2,-4(fp)
 400490c:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
 4004910:	e0bfff17 	ldw	r2,-4(fp)
 4004914:	10801143 	ldbu	r2,69(r2)
 4004918:	10803fcc 	andi	r2,r2,255
 400491c:	1004923a 	slli	r2,r2,8
 4004920:	1007883a 	mov	r3,r2
 4004924:	e0bfff17 	ldw	r2,-4(fp)
 4004928:	10801103 	ldbu	r2,68(r2)
 400492c:	10803fcc 	andi	r2,r2,255
 4004930:	1884b03a 	or	r2,r3,r2
 4004934:	1007883a 	mov	r3,r2
 4004938:	e0bfff17 	ldw	r2,-4(fp)
 400493c:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
 4004940:	e0bfff17 	ldw	r2,-4(fp)
 4004944:	108011c3 	ldbu	r2,71(r2)
 4004948:	10803fcc 	andi	r2,r2,255
 400494c:	1004923a 	slli	r2,r2,8
 4004950:	1007883a 	mov	r3,r2
 4004954:	e0bfff17 	ldw	r2,-4(fp)
 4004958:	10801183 	ldbu	r2,70(r2)
 400495c:	10803fcc 	andi	r2,r2,255
 4004960:	1884b03a 	or	r2,r3,r2
 4004964:	1007883a 	mov	r3,r2
 4004968:	e0bfff17 	ldw	r2,-4(fp)
 400496c:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
 4004970:	e0bfff17 	ldw	r2,-4(fp)
 4004974:	10801243 	ldbu	r2,73(r2)
 4004978:	10803fcc 	andi	r2,r2,255
 400497c:	1004923a 	slli	r2,r2,8
 4004980:	1007883a 	mov	r3,r2
 4004984:	e0bfff17 	ldw	r2,-4(fp)
 4004988:	10801203 	ldbu	r2,72(r2)
 400498c:	10803fcc 	andi	r2,r2,255
 4004990:	1884b03a 	or	r2,r3,r2
 4004994:	1007883a 	mov	r3,r2
 4004998:	e0bfff17 	ldw	r2,-4(fp)
 400499c:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
 40049a0:	e0bfff17 	ldw	r2,-4(fp)
 40049a4:	108012c3 	ldbu	r2,75(r2)
 40049a8:	10803fcc 	andi	r2,r2,255
 40049ac:	1004923a 	slli	r2,r2,8
 40049b0:	1007883a 	mov	r3,r2
 40049b4:	e0bfff17 	ldw	r2,-4(fp)
 40049b8:	10801283 	ldbu	r2,74(r2)
 40049bc:	10803fcc 	andi	r2,r2,255
 40049c0:	1884b03a 	or	r2,r3,r2
 40049c4:	1007883a 	mov	r3,r2
 40049c8:	e0bfff17 	ldw	r2,-4(fp)
 40049cc:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
 40049d0:	e0bfff17 	ldw	r2,-4(fp)
 40049d4:	10801343 	ldbu	r2,77(r2)
 40049d8:	10803fcc 	andi	r2,r2,255
 40049dc:	1004923a 	slli	r2,r2,8
 40049e0:	1007883a 	mov	r3,r2
 40049e4:	e0bfff17 	ldw	r2,-4(fp)
 40049e8:	10801303 	ldbu	r2,76(r2)
 40049ec:	10803fcc 	andi	r2,r2,255
 40049f0:	1884b03a 	or	r2,r3,r2
 40049f4:	1007883a 	mov	r3,r2
 40049f8:	e0bfff17 	ldw	r2,-4(fp)
 40049fc:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
 4004a00:	e0bfff17 	ldw	r2,-4(fp)
 4004a04:	108013c3 	ldbu	r2,79(r2)
 4004a08:	10803fcc 	andi	r2,r2,255
 4004a0c:	1004923a 	slli	r2,r2,8
 4004a10:	1007883a 	mov	r3,r2
 4004a14:	e0bfff17 	ldw	r2,-4(fp)
 4004a18:	10801383 	ldbu	r2,78(r2)
 4004a1c:	10803fcc 	andi	r2,r2,255
 4004a20:	1884b03a 	or	r2,r3,r2
 4004a24:	1007883a 	mov	r3,r2
 4004a28:	e0bfff17 	ldw	r2,-4(fp)
 4004a2c:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
 4004a30:	e0bfff17 	ldw	r2,-4(fp)
 4004a34:	10c0098b 	ldhu	r3,38(r2)
 4004a38:	e0bfff17 	ldw	r2,-4(fp)
 4004a3c:	10800a0b 	ldhu	r2,40(r2)
 4004a40:	18ffffcc 	andi	r3,r3,65535
 4004a44:	10bfffcc 	andi	r2,r2,65535
 4004a48:	18800e26 	beq	r3,r2,4004a84 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
 4004a4c:	e0bfff17 	ldw	r2,-4(fp)
 4004a50:	1080098b 	ldhu	r2,38(r2)
 4004a54:	1007883a 	mov	r3,r2
 4004a58:	e0bfff17 	ldw	r2,-4(fp)
 4004a5c:	10800a0b 	ldhu	r2,40(r2)
 4004a60:	0084303a 	nor	r2,zero,r2
 4004a64:	1884703a 	and	r2,r3,r2
 4004a68:	1007883a 	mov	r3,r2
 4004a6c:	e0bfff17 	ldw	r2,-4(fp)
 4004a70:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
 4004a74:	e0bfff17 	ldw	r2,-4(fp)
 4004a78:	10c0098b 	ldhu	r3,38(r2)
 4004a7c:	e0bfff17 	ldw	r2,-4(fp)
 4004a80:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
 4004a84:	e0bfff17 	ldw	r2,-4(fp)
 4004a88:	10800d0b 	ldhu	r2,52(r2)
 4004a8c:	10bfffcc 	andi	r2,r2,65535
 4004a90:	10000726 	beq	r2,zero,4004ab0 <_ZN7XBOXONE10readReportEv+0x364>
 4004a94:	e0bfff17 	ldw	r2,-4(fp)
 4004a98:	10800e0b 	ldhu	r2,56(r2)
 4004a9c:	10bfffcc 	andi	r2,r2,65535
 4004aa0:	1000031e 	bne	r2,zero,4004ab0 <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
 4004aa4:	e0bfff17 	ldw	r2,-4(fp)
 4004aa8:	00c00044 	movi	r3,1
 4004aac:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
 4004ab0:	e0bfff17 	ldw	r2,-4(fp)
 4004ab4:	10c00d0b 	ldhu	r3,52(r2)
 4004ab8:	e0bfff17 	ldw	r2,-4(fp)
 4004abc:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
 4004ac0:	e0bfff17 	ldw	r2,-4(fp)
 4004ac4:	10800d8b 	ldhu	r2,54(r2)
 4004ac8:	10bfffcc 	andi	r2,r2,65535
 4004acc:	10000726 	beq	r2,zero,4004aec <_ZN7XBOXONE10readReportEv+0x3a0>
 4004ad0:	e0bfff17 	ldw	r2,-4(fp)
 4004ad4:	10800e8b 	ldhu	r2,58(r2)
 4004ad8:	10bfffcc 	andi	r2,r2,65535
 4004adc:	1000031e 	bne	r2,zero,4004aec <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
 4004ae0:	e0bfff17 	ldw	r2,-4(fp)
 4004ae4:	00c00044 	movi	r3,1
 4004ae8:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
 4004aec:	e0bfff17 	ldw	r2,-4(fp)
 4004af0:	10c00d8b 	ldhu	r3,54(r2)
 4004af4:	e0bfff17 	ldw	r2,-4(fp)
 4004af8:	10c00e8d 	sth	r3,58(r2)
 4004afc:	00000106 	br	4004b04 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
 4004b00:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
 4004b04:	e037883a 	mov	sp,fp
 4004b08:	df000017 	ldw	fp,0(sp)
 4004b0c:	dec00104 	addi	sp,sp,4
 4004b10:	f800283a 	ret

04004b14 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
 4004b14:	defffd04 	addi	sp,sp,-12
 4004b18:	df000215 	stw	fp,8(sp)
 4004b1c:	df000204 	addi	fp,sp,8
 4004b20:	e13ffe15 	stw	r4,-8(fp)
 4004b24:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
 4004b28:	e0bfff17 	ldw	r2,-4(fp)
 4004b2c:	10800218 	cmpnei	r2,r2,8
 4004b30:	1000031e 	bne	r2,zero,4004b40 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
 4004b34:	e0bffe17 	ldw	r2,-8(fp)
 4004b38:	10800d0b 	ldhu	r2,52(r2)
 4004b3c:	00001306 	br	4004b8c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
 4004b40:	e0bfff17 	ldw	r2,-4(fp)
 4004b44:	10800258 	cmpnei	r2,r2,9
 4004b48:	1000031e 	bne	r2,zero,4004b58 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
 4004b4c:	e0bffe17 	ldw	r2,-8(fp)
 4004b50:	10800d8b 	ldhu	r2,54(r2)
 4004b54:	00000d06 	br	4004b8c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
 4004b58:	e0bffe17 	ldw	r2,-8(fp)
 4004b5c:	10c0098b 	ldhu	r3,38(r2)
 4004b60:	e0bfff17 	ldw	r2,-4(fp)
 4004b64:	10803fcc 	andi	r2,r2,255
 4004b68:	1089883a 	add	r4,r2,r2
 4004b6c:	008100b4 	movhi	r2,1026
 4004b70:	10826e84 	addi	r2,r2,2490
 4004b74:	2085883a 	add	r2,r4,r2
 4004b78:	1080000b 	ldhu	r2,0(r2)
 4004b7c:	1884703a 	and	r2,r3,r2
 4004b80:	10bfffcc 	andi	r2,r2,65535
 4004b84:	1004c03a 	cmpne	r2,r2,zero
 4004b88:	10803fcc 	andi	r2,r2,255
}
 4004b8c:	e037883a 	mov	sp,fp
 4004b90:	df000017 	ldw	fp,0(sp)
 4004b94:	dec00104 	addi	sp,sp,4
 4004b98:	f800283a 	ret

04004b9c <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
 4004b9c:	defffc04 	addi	sp,sp,-16
 4004ba0:	df000315 	stw	fp,12(sp)
 4004ba4:	df000304 	addi	fp,sp,12
 4004ba8:	e13ffe15 	stw	r4,-8(fp)
 4004bac:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
 4004bb0:	e0bfff17 	ldw	r2,-4(fp)
 4004bb4:	10800218 	cmpnei	r2,r2,8
 4004bb8:	10000a1e 	bne	r2,zero,4004be4 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
 4004bbc:	e0bffe17 	ldw	r2,-8(fp)
 4004bc0:	10800f03 	ldbu	r2,60(r2)
 4004bc4:	10803fcc 	andi	r2,r2,255
 4004bc8:	10000426 	beq	r2,zero,4004bdc <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
 4004bcc:	e0bffe17 	ldw	r2,-8(fp)
 4004bd0:	10000f05 	stb	zero,60(r2)
                        return true;
 4004bd4:	00800044 	movi	r2,1
 4004bd8:	00002806 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
 4004bdc:	0005883a 	mov	r2,zero
 4004be0:	00002606 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
 4004be4:	e0bfff17 	ldw	r2,-4(fp)
 4004be8:	10800258 	cmpnei	r2,r2,9
 4004bec:	10000a1e 	bne	r2,zero,4004c18 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
 4004bf0:	e0bffe17 	ldw	r2,-8(fp)
 4004bf4:	10800f43 	ldbu	r2,61(r2)
 4004bf8:	10803fcc 	andi	r2,r2,255
 4004bfc:	10000426 	beq	r2,zero,4004c10 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
 4004c00:	e0bffe17 	ldw	r2,-8(fp)
 4004c04:	10000f45 	stb	zero,61(r2)
                        return true;
 4004c08:	00800044 	movi	r2,1
 4004c0c:	00001b06 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
 4004c10:	0005883a 	mov	r2,zero
 4004c14:	00001906 	br	4004c7c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
 4004c18:	e0bfff17 	ldw	r2,-4(fp)
 4004c1c:	10803fcc 	andi	r2,r2,255
 4004c20:	1087883a 	add	r3,r2,r2
 4004c24:	008100b4 	movhi	r2,1026
 4004c28:	10826e84 	addi	r2,r2,2490
 4004c2c:	1885883a 	add	r2,r3,r2
 4004c30:	1080000b 	ldhu	r2,0(r2)
 4004c34:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
 4004c38:	e0bffe17 	ldw	r2,-8(fp)
 4004c3c:	10c00a8b 	ldhu	r3,42(r2)
 4004c40:	e0bffd0b 	ldhu	r2,-12(fp)
 4004c44:	1884703a 	and	r2,r3,r2
 4004c48:	10bfffcc 	andi	r2,r2,65535
 4004c4c:	1004c03a 	cmpne	r2,r2,zero
 4004c50:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
 4004c54:	e0bffe17 	ldw	r2,-8(fp)
 4004c58:	10800a8b 	ldhu	r2,42(r2)
 4004c5c:	1007883a 	mov	r3,r2
 4004c60:	e0bffd0b 	ldhu	r2,-12(fp)
 4004c64:	0084303a 	nor	r2,zero,r2
 4004c68:	1884703a 	and	r2,r3,r2
 4004c6c:	1007883a 	mov	r3,r2
 4004c70:	e0bffe17 	ldw	r2,-8(fp)
 4004c74:	10c00a8d 	sth	r3,42(r2)
        return click;
 4004c78:	e0bffd83 	ldbu	r2,-10(fp)
}
 4004c7c:	e037883a 	mov	sp,fp
 4004c80:	df000017 	ldw	fp,0(sp)
 4004c84:	dec00104 	addi	sp,sp,4
 4004c88:	f800283a 	ret

04004c8c <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
 4004c8c:	defffd04 	addi	sp,sp,-12
 4004c90:	df000215 	stw	fp,8(sp)
 4004c94:	df000204 	addi	fp,sp,8
 4004c98:	e13ffe15 	stw	r4,-8(fp)
 4004c9c:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
 4004ca0:	e0bfff17 	ldw	r2,-4(fp)
 4004ca4:	e0fffe17 	ldw	r3,-8(fp)
 4004ca8:	10800584 	addi	r2,r2,22
 4004cac:	1085883a 	add	r2,r2,r2
 4004cb0:	1885883a 	add	r2,r3,r2
 4004cb4:	1080000b 	ldhu	r2,0(r2)
}
 4004cb8:	e037883a 	mov	sp,fp
 4004cbc:	df000017 	ldw	fp,0(sp)
 4004cc0:	dec00104 	addi	sp,sp,4
 4004cc4:	f800283a 	ret

04004cc8 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
 4004cc8:	defff904 	addi	sp,sp,-28
 4004ccc:	dfc00615 	stw	ra,24(sp)
 4004cd0:	df000515 	stw	fp,20(sp)
 4004cd4:	df000504 	addi	fp,sp,20
 4004cd8:	e13ffd15 	stw	r4,-12(fp)
 4004cdc:	e17ffe15 	stw	r5,-8(fp)
 4004ce0:	3005883a 	mov	r2,r6
 4004ce4:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
 4004ce8:	e0bffe17 	ldw	r2,-8(fp)
 4004cec:	10c00084 	addi	r3,r2,2
 4004cf0:	e0bffd17 	ldw	r2,-12(fp)
 4004cf4:	10801f83 	ldbu	r2,126(r2)
 4004cf8:	11000044 	addi	r4,r2,1
 4004cfc:	200b883a 	mov	r5,r4
 4004d00:	e13ffd17 	ldw	r4,-12(fp)
 4004d04:	21401f85 	stb	r5,126(r4)
 4004d08:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
 4004d0c:	e0bffd17 	ldw	r2,-12(fp)
 4004d10:	10c00317 	ldw	r3,12(r2)
 4004d14:	e0bffd17 	ldw	r2,-12(fp)
 4004d18:	10800403 	ldbu	r2,16(r2)
 4004d1c:	11003fcc 	andi	r4,r2,255
 4004d20:	e0bffd17 	ldw	r2,-12(fp)
 4004d24:	10800503 	ldbu	r2,20(r2)
 4004d28:	11403fcc 	andi	r5,r2,255
 4004d2c:	e1bfff0b 	ldhu	r6,-4(fp)
 4004d30:	e0bffe17 	ldw	r2,-8(fp)
 4004d34:	d8800015 	stw	r2,0(sp)
 4004d38:	300f883a 	mov	r7,r6
 4004d3c:	280d883a 	mov	r6,r5
 4004d40:	200b883a 	mov	r5,r4
 4004d44:	1809883a 	mov	r4,r3
 4004d48:	40019900 	call	4001990 <_ZN3USB11outTransferEhhtPh>
 4004d4c:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
 4004d50:	e0bffc03 	ldbu	r2,-16(fp)
}
 4004d54:	e037883a 	mov	sp,fp
 4004d58:	dfc00117 	ldw	ra,4(sp)
 4004d5c:	df000017 	ldw	fp,0(sp)
 4004d60:	dec00204 	addi	sp,sp,8
 4004d64:	f800283a 	ret

04004d68 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
 4004d68:	defff904 	addi	sp,sp,-28
 4004d6c:	dfc00615 	stw	ra,24(sp)
 4004d70:	df000515 	stw	fp,20(sp)
 4004d74:	df000504 	addi	fp,sp,20
 4004d78:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004d7c:	00800244 	movi	r2,9
 4004d80:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
 4004d84:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004d88:	00800244 	movi	r2,9
 4004d8c:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
 4004d90:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004d94:	008003c4 	movi	r2,15
 4004d98:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
 4004d9c:	00800104 	movi	r2,4
 4004da0:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
 4004da4:	00800104 	movi	r2,4
 4004da8:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
 4004dac:	00800804 	movi	r2,32
 4004db0:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
 4004db4:	00800804 	movi	r2,32
 4004db8:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
 4004dbc:	00bfe004 	movi	r2,-128
 4004dc0:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
 4004dc4:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
 4004dc8:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
 4004dcc:	01800344 	movi	r6,13
 4004dd0:	e17ffb04 	addi	r5,fp,-20
 4004dd4:	e13fff17 	ldw	r4,-4(fp)
 4004dd8:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
 4004ddc:	e0bfff17 	ldw	r2,-4(fp)
 4004de0:	10800817 	ldw	r2,32(r2)
 4004de4:	10000326 	beq	r2,zero,4004df4 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
 4004de8:	e0bfff17 	ldw	r2,-4(fp)
 4004dec:	10800817 	ldw	r2,32(r2)
 4004df0:	103ee83a 	callr	r2
}
 4004df4:	0001883a 	nop
 4004df8:	e037883a 	mov	sp,fp
 4004dfc:	dfc00117 	ldw	ra,4(sp)
 4004e00:	df000017 	ldw	fp,0(sp)
 4004e04:	dec00204 	addi	sp,sp,8
 4004e08:	f800283a 	ret

04004e0c <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
 4004e0c:	defff904 	addi	sp,sp,-28
 4004e10:	dfc00615 	stw	ra,24(sp)
 4004e14:	df000515 	stw	fp,20(sp)
 4004e18:	df000504 	addi	fp,sp,20
 4004e1c:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004e20:	00800244 	movi	r2,9
 4004e24:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
 4004e28:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004e2c:	00800244 	movi	r2,9
 4004e30:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
 4004e34:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004e38:	008003c4 	movi	r2,15
 4004e3c:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
 4004e40:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
 4004e44:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
 4004e48:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
 4004e4c:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
 4004e50:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
 4004e54:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
 4004e58:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
 4004e5c:	01800344 	movi	r6,13
 4004e60:	e17ffb04 	addi	r5,fp,-20
 4004e64:	e13fff17 	ldw	r4,-4(fp)
 4004e68:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>
}
 4004e6c:	0001883a 	nop
 4004e70:	e037883a 	mov	sp,fp
 4004e74:	dfc00117 	ldw	ra,4(sp)
 4004e78:	df000017 	ldw	fp,0(sp)
 4004e7c:	dec00204 	addi	sp,sp,8
 4004e80:	f800283a 	ret

04004e84 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
 4004e84:	defff504 	addi	sp,sp,-44
 4004e88:	dfc00a15 	stw	ra,40(sp)
 4004e8c:	df000915 	stw	fp,36(sp)
 4004e90:	df000904 	addi	fp,sp,36
 4004e94:	e13ffb15 	stw	r4,-20(fp)
 4004e98:	3009883a 	mov	r4,r6
 4004e9c:	3807883a 	mov	r3,r7
 4004ea0:	e0800217 	ldw	r2,8(fp)
 4004ea4:	e17ffc05 	stb	r5,-16(fp)
 4004ea8:	e13ffd05 	stb	r4,-12(fp)
 4004eac:	e0fffe05 	stb	r3,-8(fp)
 4004eb0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004eb4:	00800244 	movi	r2,9
 4004eb8:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
 4004ebc:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004ec0:	00800244 	movi	r2,9
 4004ec4:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
 4004ec8:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004ecc:	008003c4 	movi	r2,15
 4004ed0:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
 4004ed4:	e0bffc03 	ldbu	r2,-16(fp)
 4004ed8:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
 4004edc:	e0bffd03 	ldbu	r2,-12(fp)
 4004ee0:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
 4004ee4:	e0bffe03 	ldbu	r2,-8(fp)
 4004ee8:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
 4004eec:	e0bfff03 	ldbu	r2,-4(fp)
 4004ef0:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
 4004ef4:	00bfffc4 	movi	r2,-1
 4004ef8:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
 4004efc:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
 4004f00:	00bfffc4 	movi	r2,-1
 4004f04:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
 4004f08:	01800344 	movi	r6,13
 4004f0c:	e17ff704 	addi	r5,fp,-36
 4004f10:	e13ffb17 	ldw	r4,-20(fp)
 4004f14:	4004cc80 	call	4004cc8 <_ZN7XBOXONE11XboxCommandEPht>
}
 4004f18:	0001883a 	nop
 4004f1c:	e037883a 	mov	sp,fp
 4004f20:	dfc00117 	ldw	ra,4(sp)
 4004f24:	df000017 	ldw	fp,0(sp)
 4004f28:	dec00204 	addi	sp,sp,8
 4004f2c:	f800283a 	ret

04004f30 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 4004f30:	defffe04 	addi	sp,sp,-8
 4004f34:	df000115 	stw	fp,4(sp)
 4004f38:	df000104 	addi	fp,sp,4
 4004f3c:	e13fff15 	stw	r4,-4(fp)
 4004f40:	e0bfff17 	ldw	r2,-4(fp)
 4004f44:	10000005 	stb	zero,0(r2)
 4004f48:	e0bfff17 	ldw	r2,-4(fp)
 4004f4c:	10c00043 	ldbu	r3,1(r2)
 4004f50:	1806703a 	and	r3,r3,zero
 4004f54:	10c00045 	stb	r3,1(r2)
 4004f58:	10c00083 	ldbu	r3,2(r2)
 4004f5c:	1806703a 	and	r3,r3,zero
 4004f60:	10c00085 	stb	r3,2(r2)
 4004f64:	10c000c3 	ldbu	r3,3(r2)
 4004f68:	1806703a 	and	r3,r3,zero
 4004f6c:	10c000c5 	stb	r3,3(r2)
 4004f70:	10c00103 	ldbu	r3,4(r2)
 4004f74:	1806703a 	and	r3,r3,zero
 4004f78:	10c00105 	stb	r3,4(r2)
        };
 4004f7c:	0001883a 	nop
 4004f80:	e037883a 	mov	sp,fp
 4004f84:	df000017 	ldw	fp,0(sp)
 4004f88:	dec00104 	addi	sp,sp,4
 4004f8c:	f800283a 	ret

04004f90 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 4004f90:	defffe04 	addi	sp,sp,-8
 4004f94:	df000115 	stw	fp,4(sp)
 4004f98:	df000104 	addi	fp,sp,4
 4004f9c:	e13fff15 	stw	r4,-4(fp)
 4004fa0:	e0bfff17 	ldw	r2,-4(fp)
 4004fa4:	10000015 	stw	zero,0(r2)
 4004fa8:	e0bfff17 	ldw	r2,-4(fp)
 4004fac:	10000105 	stb	zero,4(r2)
 4004fb0:	e0bfff17 	ldw	r2,-4(fp)
 4004fb4:	10000145 	stb	zero,5(r2)
        };
 4004fb8:	0001883a 	nop
 4004fbc:	e037883a 	mov	sp,fp
 4004fc0:	df000017 	ldw	fp,0(sp)
 4004fc4:	dec00104 	addi	sp,sp,4
 4004fc8:	f800283a 	ret

04004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 4004fcc:	defffd04 	addi	sp,sp,-12
 4004fd0:	df000215 	stw	fp,8(sp)
 4004fd4:	df000204 	addi	fp,sp,8
 4004fd8:	e13ffe15 	stw	r4,-8(fp)
 4004fdc:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
 4004fe0:	e0bfff17 	ldw	r2,-4(fp)
 4004fe4:	10c00043 	ldbu	r3,1(r2)
 4004fe8:	11000083 	ldbu	r4,2(r2)
 4004fec:	2008923a 	slli	r4,r4,8
 4004ff0:	20c6b03a 	or	r3,r4,r3
 4004ff4:	110000c3 	ldbu	r4,3(r2)
 4004ff8:	2008943a 	slli	r4,r4,16
 4004ffc:	20c6b03a 	or	r3,r4,r3
 4005000:	10800103 	ldbu	r2,4(r2)
 4005004:	1004963a 	slli	r2,r2,24
 4005008:	10c4b03a 	or	r2,r2,r3
 400500c:	1007883a 	mov	r3,r2
 4005010:	e0bffe17 	ldw	r2,-8(fp)
 4005014:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
 4005018:	e0bfff17 	ldw	r2,-4(fp)
 400501c:	10c00003 	ldbu	r3,0(r2)
 4005020:	e0bffe17 	ldw	r2,-8(fp)
 4005024:	10c00145 	stb	r3,5(r2)
 4005028:	e0bffe17 	ldw	r2,-8(fp)
 400502c:	10c00143 	ldbu	r3,5(r2)
 4005030:	e0bffe17 	ldw	r2,-8(fp)
 4005034:	10c00105 	stb	r3,4(r2)
        };
 4005038:	0001883a 	nop
 400503c:	e037883a 	mov	sp,fp
 4005040:	df000017 	ldw	fp,0(sp)
 4005044:	dec00104 	addi	sp,sp,4
 4005048:	f800283a 	ret

0400504c <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 400504c:	defffe04 	addi	sp,sp,-8
 4005050:	df000115 	stw	fp,4(sp)
 4005054:	df000104 	addi	fp,sp,4
 4005058:	e13fff15 	stw	r4,-4(fp)
 400505c:	e0bfff17 	ldw	r2,-4(fp)
 4005060:	10000015 	stw	zero,0(r2)
 4005064:	e0bfff17 	ldw	r2,-4(fp)
 4005068:	10000105 	stb	zero,4(r2)
 400506c:	e0bfff17 	ldw	r2,-4(fp)
 4005070:	1000018d 	sth	zero,6(r2)
        };
 4005074:	0001883a 	nop
 4005078:	e037883a 	mov	sp,fp
 400507c:	df000017 	ldw	fp,0(sp)
 4005080:	dec00104 	addi	sp,sp,4
 4005084:	f800283a 	ret

04005088 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 4005088:	defffd04 	addi	sp,sp,-12
 400508c:	df000215 	stw	fp,8(sp)
 4005090:	df000204 	addi	fp,sp,8
 4005094:	e13ffe15 	stw	r4,-8(fp)
 4005098:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
 400509c:	e0bfff17 	ldw	r2,-4(fp)
 40050a0:	10c00043 	ldbu	r3,1(r2)
 40050a4:	11000083 	ldbu	r4,2(r2)
 40050a8:	2008923a 	slli	r4,r4,8
 40050ac:	20c6b03a 	or	r3,r4,r3
 40050b0:	110000c3 	ldbu	r4,3(r2)
 40050b4:	2008943a 	slli	r4,r4,16
 40050b8:	20c6b03a 	or	r3,r4,r3
 40050bc:	10800103 	ldbu	r2,4(r2)
 40050c0:	1004963a 	slli	r2,r2,24
 40050c4:	10c4b03a 	or	r2,r2,r3
 40050c8:	1007883a 	mov	r3,r2
 40050cc:	e0bffe17 	ldw	r2,-8(fp)
 40050d0:	10c00015 	stw	r3,0(r2)
                countDown = 0;
 40050d4:	e0bffe17 	ldw	r2,-8(fp)
 40050d8:	1000018d 	sth	zero,6(r2)
        };
 40050dc:	0001883a 	nop
 40050e0:	e037883a 	mov	sp,fp
 40050e4:	df000017 	ldw	fp,0(sp)
 40050e8:	dec00104 	addi	sp,sp,4
 40050ec:	f800283a 	ret

040050f0 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 40050f0:	defffb04 	addi	sp,sp,-20
 40050f4:	df000415 	stw	fp,16(sp)
 40050f8:	df000404 	addi	fp,sp,16
 40050fc:	e13ffc15 	stw	r4,-16(fp)
 4005100:	e17ffd15 	stw	r5,-12(fp)
 4005104:	e1bffe15 	stw	r6,-8(fp)
 4005108:	3805883a 	mov	r2,r7
 400510c:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
 4005110:	e0bffc17 	ldw	r2,-16(fp)
 4005114:	10800103 	ldbu	r2,4(r2)
 4005118:	10803fcc 	andi	r2,r2,255
 400511c:	10000326 	beq	r2,zero,400512c <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
 4005120:	10800060 	cmpeqi	r2,r2,1
 4005124:	10000a1e 	bne	r2,zero,4005150 <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
 4005128:	00002906 	br	40051d0 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
 400512c:	e0bffc17 	ldw	r2,-16(fp)
 4005130:	e0ffff0b 	ldhu	r3,-4(fp)
 4005134:	10c0018d 	sth	r3,6(r2)
                                nStage++;
 4005138:	e0bffc17 	ldw	r2,-16(fp)
 400513c:	10800103 	ldbu	r2,4(r2)
 4005140:	10800044 	addi	r2,r2,1
 4005144:	1007883a 	mov	r3,r2
 4005148:	e0bffc17 	ldw	r2,-16(fp)
 400514c:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 4005150:	e0bffc17 	ldw	r2,-16(fp)
 4005154:	1080018b 	ldhu	r2,6(r2)
 4005158:	10bfffcc 	andi	r2,r2,65535
 400515c:	10001626 	beq	r2,zero,40051b8 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
 4005160:	e0bffe17 	ldw	r2,-8(fp)
 4005164:	1080000b 	ldhu	r2,0(r2)
 4005168:	10bfffcc 	andi	r2,r2,65535
 400516c:	10001226 	beq	r2,zero,40051b8 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
 4005170:	e0bffc17 	ldw	r2,-16(fp)
 4005174:	1080018b 	ldhu	r2,6(r2)
 4005178:	10bfffc4 	addi	r2,r2,-1
 400517c:	1007883a 	mov	r3,r2
 4005180:	e0bffc17 	ldw	r2,-16(fp)
 4005184:	10c0018d 	sth	r3,6(r2)
 4005188:	e0bffd17 	ldw	r2,-12(fp)
 400518c:	10800017 	ldw	r2,0(r2)
 4005190:	10c00044 	addi	r3,r2,1
 4005194:	e0bffd17 	ldw	r2,-12(fp)
 4005198:	10c00015 	stw	r3,0(r2)
 400519c:	e0bffe17 	ldw	r2,-8(fp)
 40051a0:	1080000b 	ldhu	r2,0(r2)
 40051a4:	10bfffc4 	addi	r2,r2,-1
 40051a8:	1007883a 	mov	r3,r2
 40051ac:	e0bffe17 	ldw	r2,-8(fp)
 40051b0:	10c0000d 	sth	r3,0(r2)
 40051b4:	003fe606 	br	4005150 <__alt_mem_onchip_memory2_0+0xfc003eb0>

                                if(!countDown)
 40051b8:	e0bffc17 	ldw	r2,-16(fp)
 40051bc:	1080018b 	ldhu	r2,6(r2)
 40051c0:	10bfffcc 	andi	r2,r2,65535
 40051c4:	1000021e 	bne	r2,zero,40051d0 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
 40051c8:	e0bffc17 	ldw	r2,-16(fp)
 40051cc:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
 40051d0:	e0bffc17 	ldw	r2,-16(fp)
 40051d4:	1080018b 	ldhu	r2,6(r2)
 40051d8:	10bfffcc 	andi	r2,r2,65535
 40051dc:	1005003a 	cmpeq	r2,r2,zero
        };
 40051e0:	e037883a 	mov	sp,fp
 40051e4:	df000017 	ldw	fp,0(sp)
 40051e8:	dec00104 	addi	sp,sp,4
 40051ec:	f800283a 	ret

040051f0 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 40051f0:	defffb04 	addi	sp,sp,-20
 40051f4:	df000415 	stw	fp,16(sp)
 40051f8:	df000404 	addi	fp,sp,16
 40051fc:	e13ffc15 	stw	r4,-16(fp)
 4005200:	2809883a 	mov	r4,r5
 4005204:	3007883a 	mov	r3,r6
 4005208:	3805883a 	mov	r2,r7
 400520c:	e13ffd05 	stb	r4,-12(fp)
 4005210:	e0fffe05 	stb	r3,-8(fp)
 4005214:	e0bfff05 	stb	r2,-4(fp)
                return 0;
 4005218:	0005883a 	mov	r2,zero
        }
 400521c:	e037883a 	mov	sp,fp
 4005220:	df000017 	ldw	fp,0(sp)
 4005224:	dec00104 	addi	sp,sp,4
 4005228:	f800283a 	ret

0400522c <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 400522c:	defffb04 	addi	sp,sp,-20
 4005230:	df000415 	stw	fp,16(sp)
 4005234:	df000404 	addi	fp,sp,16
 4005238:	e13ffc15 	stw	r4,-16(fp)
 400523c:	2809883a 	mov	r4,r5
 4005240:	3007883a 	mov	r3,r6
 4005244:	3805883a 	mov	r2,r7
 4005248:	e13ffd05 	stb	r4,-12(fp)
 400524c:	e0fffe05 	stb	r3,-8(fp)
 4005250:	e0bfff05 	stb	r2,-4(fp)
                return 0;
 4005254:	0005883a 	mov	r2,zero
        }
 4005258:	e037883a 	mov	sp,fp
 400525c:	df000017 	ldw	fp,0(sp)
 4005260:	dec00104 	addi	sp,sp,4
 4005264:	f800283a 	ret

04005268 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 4005268:	defffe04 	addi	sp,sp,-8
 400526c:	df000115 	stw	fp,4(sp)
 4005270:	df000104 	addi	fp,sp,4
 4005274:	e13fff15 	stw	r4,-4(fp)
                return 0;
 4005278:	0005883a 	mov	r2,zero
        }
 400527c:	e037883a 	mov	sp,fp
 4005280:	df000017 	ldw	fp,0(sp)
 4005284:	dec00104 	addi	sp,sp,4
 4005288:	f800283a 	ret

0400528c <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 400528c:	defffe04 	addi	sp,sp,-8
 4005290:	df000115 	stw	fp,4(sp)
 4005294:	df000104 	addi	fp,sp,4
 4005298:	e13fff15 	stw	r4,-4(fp)
                return 0;
 400529c:	0005883a 	mov	r2,zero
        }
 40052a0:	e037883a 	mov	sp,fp
 40052a4:	df000017 	ldw	fp,0(sp)
 40052a8:	dec00104 	addi	sp,sp,4
 40052ac:	f800283a 	ret

040052b0 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 40052b0:	defffe04 	addi	sp,sp,-8
 40052b4:	df000115 	stw	fp,4(sp)
 40052b8:	df000104 	addi	fp,sp,4
 40052bc:	e13fff15 	stw	r4,-4(fp)
                return 0;
 40052c0:	0005883a 	mov	r2,zero
        }
 40052c4:	e037883a 	mov	sp,fp
 40052c8:	df000017 	ldw	fp,0(sp)
 40052cc:	dec00104 	addi	sp,sp,4
 40052d0:	f800283a 	ret

040052d4 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 40052d4:	defffd04 	addi	sp,sp,-12
 40052d8:	df000215 	stw	fp,8(sp)
 40052dc:	df000204 	addi	fp,sp,8
 40052e0:	e13ffe15 	stw	r4,-8(fp)
 40052e4:	2805883a 	mov	r2,r5
 40052e8:	e0bfff05 	stb	r2,-4(fp)
                return;
 40052ec:	0001883a 	nop
        } // Note used for hubs only!
 40052f0:	e037883a 	mov	sp,fp
 40052f4:	df000017 	ldw	fp,0(sp)
 40052f8:	dec00104 	addi	sp,sp,4
 40052fc:	f800283a 	ret

04005300 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 4005300:	defffc04 	addi	sp,sp,-16
 4005304:	df000315 	stw	fp,12(sp)
 4005308:	df000304 	addi	fp,sp,12
 400530c:	e13ffd15 	stw	r4,-12(fp)
 4005310:	2807883a 	mov	r3,r5
 4005314:	3005883a 	mov	r2,r6
 4005318:	e0fffe0d 	sth	r3,-8(fp)
 400531c:	e0bfff0d 	sth	r2,-4(fp)
                return false;
 4005320:	0005883a 	mov	r2,zero
        }
 4005324:	e037883a 	mov	sp,fp
 4005328:	df000017 	ldw	fp,0(sp)
 400532c:	dec00104 	addi	sp,sp,4
 4005330:	f800283a 	ret

04005334 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 4005334:	defffd04 	addi	sp,sp,-12
 4005338:	df000215 	stw	fp,8(sp)
 400533c:	df000204 	addi	fp,sp,8
 4005340:	e13ffe15 	stw	r4,-8(fp)
 4005344:	2805883a 	mov	r2,r5
 4005348:	e0bfff05 	stb	r2,-4(fp)
                return false;
 400534c:	0005883a 	mov	r2,zero
        }
 4005350:	e037883a 	mov	sp,fp
 4005354:	df000017 	ldw	fp,0(sp)
 4005358:	dec00104 	addi	sp,sp,4
 400535c:	f800283a 	ret

04005360 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 4005360:	defffd04 	addi	sp,sp,-12
 4005364:	df000215 	stw	fp,8(sp)
 4005368:	df000204 	addi	fp,sp,8
 400536c:	e13ffe15 	stw	r4,-8(fp)
 4005370:	2805883a 	mov	r2,r5
 4005374:	e0bfff05 	stb	r2,-4(fp)
                return true;
 4005378:	00800044 	movi	r2,1
        }
 400537c:	e037883a 	mov	sp,fp
 4005380:	df000017 	ldw	fp,0(sp)
 4005384:	dec00104 	addi	sp,sp,4
 4005388:	f800283a 	ret

0400538c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 400538c:	defffc04 	addi	sp,sp,-16
 4005390:	df000315 	stw	fp,12(sp)
 4005394:	df000304 	addi	fp,sp,12
 4005398:	e13ffe15 	stw	r4,-8(fp)
 400539c:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 40053a0:	e03ffd05 	stb	zero,-12(fp)
 40053a4:	e0bffd03 	ldbu	r2,-12(fp)
 40053a8:	10800428 	cmpgeui	r2,r2,16
 40053ac:	1000161e 	bne	r2,zero,4005408 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
 40053b0:	e0bffd03 	ldbu	r2,-12(fp)
 40053b4:	e0fffe17 	ldw	r3,-8(fp)
 40053b8:	10800784 	addi	r2,r2,30
 40053bc:	1085883a 	add	r2,r2,r2
 40053c0:	1085883a 	add	r2,r2,r2
 40053c4:	1885883a 	add	r2,r3,r2
 40053c8:	10800017 	ldw	r2,0(r2)
 40053cc:	10000a1e 	bne	r2,zero,40053f8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
 40053d0:	e0bffd03 	ldbu	r2,-12(fp)
 40053d4:	e0fffe17 	ldw	r3,-8(fp)
 40053d8:	10800784 	addi	r2,r2,30
 40053dc:	1085883a 	add	r2,r2,r2
 40053e0:	1085883a 	add	r2,r2,r2
 40053e4:	1885883a 	add	r2,r3,r2
 40053e8:	e0ffff17 	ldw	r3,-4(fp)
 40053ec:	10c00015 	stw	r3,0(r2)
                                return 0;
 40053f0:	0005883a 	mov	r2,zero
 40053f4:	00000506 	br	400540c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 40053f8:	e0bffd03 	ldbu	r2,-12(fp)
 40053fc:	10800044 	addi	r2,r2,1
 4005400:	e0bffd05 	stb	r2,-12(fp)
 4005404:	003fe706 	br	40053a4 <__alt_mem_onchip_memory2_0+0xfc004104>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 4005408:	00bff4c4 	movi	r2,-45
        };
 400540c:	e037883a 	mov	sp,fp
 4005410:	df000017 	ldw	fp,0(sp)
 4005414:	dec00104 	addi	sp,sp,4
 4005418:	f800283a 	ret

0400541c <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 400541c:	defffa04 	addi	sp,sp,-24
 4005420:	df000515 	stw	fp,20(sp)
 4005424:	df000504 	addi	fp,sp,20
 4005428:	e13ffb15 	stw	r4,-20(fp)
 400542c:	3009883a 	mov	r4,r6
 4005430:	3807883a 	mov	r3,r7
 4005434:	e0800117 	ldw	r2,4(fp)
 4005438:	e17ffc05 	stb	r5,-16(fp)
 400543c:	e13ffd05 	stb	r4,-12(fp)
 4005440:	e0fffe05 	stb	r3,-8(fp)
 4005444:	e0bfff05 	stb	r2,-4(fp)
        };
 4005448:	0001883a 	nop
 400544c:	e037883a 	mov	sp,fp
 4005450:	df000017 	ldw	fp,0(sp)
 4005454:	dec00104 	addi	sp,sp,4
 4005458:	f800283a 	ret

0400545c <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
 400545c:	defffe04 	addi	sp,sp,-8
 4005460:	df000115 	stw	fp,4(sp)
 4005464:	df000104 	addi	fp,sp,4
 4005468:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
 400546c:	e0bfff17 	ldw	r2,-4(fp)
 4005470:	10800403 	ldbu	r2,16(r2)
        };
 4005474:	e037883a 	mov	sp,fp
 4005478:	df000017 	ldw	fp,0(sp)
 400547c:	dec00104 	addi	sp,sp,4
 4005480:	f800283a 	ret

04005484 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
 4005484:	defffe04 	addi	sp,sp,-8
 4005488:	df000115 	stw	fp,4(sp)
 400548c:	df000104 	addi	fp,sp,4
 4005490:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
 4005494:	e0bfff17 	ldw	r2,-4(fp)
 4005498:	10800943 	ldbu	r2,37(r2)
        };
 400549c:	e037883a 	mov	sp,fp
 40054a0:	df000017 	ldw	fp,0(sp)
 40054a4:	dec00104 	addi	sp,sp,4
 40054a8:	f800283a 	ret

040054ac <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 40054ac:	defffc04 	addi	sp,sp,-16
 40054b0:	df000315 	stw	fp,12(sp)
 40054b4:	df000304 	addi	fp,sp,12
 40054b8:	e13ffd15 	stw	r4,-12(fp)
 40054bc:	2807883a 	mov	r3,r5
 40054c0:	3005883a 	mov	r2,r6
 40054c4:	e0fffe0d 	sth	r3,-8(fp)
 40054c8:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
 40054cc:	e0bffe0b 	ldhu	r2,-8(fp)
 40054d0:	108117a0 	cmpeqi	r2,r2,1118
 40054d4:	10000f1e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054d8:	e0bffe0b 	ldhu	r2,-8(fp)
 40054dc:	1081ce20 	cmpeqi	r2,r2,1848
 40054e0:	10000c1e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054e4:	e0bffe0b 	ldhu	r2,-8(fp)
 40054e8:	10839be0 	cmpeqi	r2,r2,3695
 40054ec:	1000091e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054f0:	e0bffe0b 	ldhu	r2,-8(fp)
 40054f4:	1083c360 	cmpeqi	r2,r2,3853
 40054f8:	1000061e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054fc:	e0bffe0b 	ldhu	r2,-8(fp)
 4005500:	10854ca0 	cmpeqi	r2,r2,5426
 4005504:	1000031e 	bne	r2,zero,4005514 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 4005508:	e0bffe0b 	ldhu	r2,-8(fp)
 400550c:	10893198 	cmpnei	r2,r2,9414
 4005510:	10002c1e 	bne	r2,zero,40055c4 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
 4005514:	e0bfff0b 	ldhu	r2,-4(fp)
 4005518:	1080b460 	cmpeqi	r2,r2,721
 400551c:	1000271e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
 4005520:	e0bfff0b 	ldhu	r2,-4(fp)
 4005524:	1080b760 	cmpeqi	r2,r2,733
 4005528:	1000241e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 400552c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005530:	1080b8e0 	cmpeqi	r2,r2,739
 4005534:	1000211e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005538:	e0bfff0b 	ldhu	r2,-4(fp)
 400553c:	1080baa0 	cmpeqi	r2,r2,746
 4005540:	10001e1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005544:	e0bfff0b 	ldhu	r2,-4(fp)
 4005548:	10928060 	cmpeqi	r2,r2,18945
 400554c:	10001b1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
 4005550:	e0bfff0b 	ldhu	r2,-4(fp)
 4005554:	10804e60 	cmpeqi	r2,r2,313
 4005558:	1000181e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 400555c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005560:	108051a0 	cmpeqi	r2,r2,326
 4005564:	1000151e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005568:	e0bfff0b 	ldhu	r2,-4(fp)
 400556c:	108019e0 	cmpeqi	r2,r2,103
 4005570:	1000121e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005574:	e0bfff0b 	ldhu	r2,-4(fp)
 4005578:	108280e0 	cmpeqi	r2,r2,2563
 400557c:	10000f1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
 4005580:	e0bfff0b 	ldhu	r2,-4(fp)
 4005584:	109506a0 	cmpeqi	r2,r2,21530
 4005588:	10000c1e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 400558c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005590:	10950aa0 	cmpeqi	r2,r2,21546
 4005594:	1000091e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005598:	e0bfff0b 	ldhu	r2,-4(fp)
 400559c:	10950ea0 	cmpeqi	r2,r2,21562
 40055a0:	1000061e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 40055a4:	e0bfff0b 	ldhu	r2,-4(fp)
 40055a8:	1082c2a0 	cmpeqi	r2,r2,2826
 40055ac:	1000031e 	bne	r2,zero,40055bc <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
 40055b0:	e0bfff0b 	ldhu	r2,-4(fp)
 40055b4:	1082c498 	cmpnei	r2,r2,2834
 40055b8:	1000021e 	bne	r2,zero,40055c4 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
 40055bc:	00800044 	movi	r2,1
 40055c0:	00000106 	br	40055c8 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
 40055c4:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
 40055c8:	e037883a 	mov	sp,fp
 40055cc:	df000017 	ldw	fp,0(sp)
 40055d0:	dec00104 	addi	sp,sp,4
 40055d4:	f800283a 	ret

040055d8 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
 40055d8:	defffe04 	addi	sp,sp,-8
 40055dc:	df000115 	stw	fp,4(sp)
 40055e0:	df000104 	addi	fp,sp,4
 40055e4:	e13fff15 	stw	r4,-4(fp)
 40055e8:	008100b4 	movhi	r2,1026
 40055ec:	10829304 	addi	r2,r2,2636
 40055f0:	e0ffff17 	ldw	r3,-4(fp)
 40055f4:	18800015 	stw	r2,0(r3)
 40055f8:	0001883a 	nop
 40055fc:	e037883a 	mov	sp,fp
 4005600:	df000017 	ldw	fp,0(sp)
 4005604:	dec00104 	addi	sp,sp,4
 4005608:	f800283a 	ret

0400560c <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
 400560c:	defffe04 	addi	sp,sp,-8
 4005610:	df000115 	stw	fp,4(sp)
 4005614:	df000104 	addi	fp,sp,4
 4005618:	e13fff15 	stw	r4,-4(fp)
 400561c:	008100b4 	movhi	r2,1026
 4005620:	10828d04 	addi	r2,r2,2612
 4005624:	e0ffff17 	ldw	r3,-4(fp)
 4005628:	18800015 	stw	r2,0(r3)
 400562c:	0001883a 	nop
 4005630:	e037883a 	mov	sp,fp
 4005634:	df000017 	ldw	fp,0(sp)
 4005638:	dec00104 	addi	sp,sp,4
 400563c:	f800283a 	ret

04005640 <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
 4005640:	defffe04 	addi	sp,sp,-8
 4005644:	df000115 	stw	fp,4(sp)
 4005648:	df000104 	addi	fp,sp,4
 400564c:	e13fff15 	stw	r4,-4(fp)
 4005650:	008100b4 	movhi	r2,1026
 4005654:	10829004 	addi	r2,r2,2624
 4005658:	e0ffff17 	ldw	r3,-4(fp)
 400565c:	18800015 	stw	r2,0(r3)
 4005660:	0001883a 	nop
 4005664:	e037883a 	mov	sp,fp
 4005668:	df000017 	ldw	fp,0(sp)
 400566c:	dec00104 	addi	sp,sp,4
 4005670:	f800283a 	ret

04005674 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 4005674:	defffc04 	addi	sp,sp,-16
 4005678:	dfc00315 	stw	ra,12(sp)
 400567c:	df000215 	stw	fp,8(sp)
 4005680:	df000204 	addi	fp,sp,8
 4005684:	e13ffe15 	stw	r4,-8(fp)
 4005688:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 400568c:	e0bffe17 	ldw	r2,-8(fp)
 4005690:	1009883a 	mov	r4,r2
 4005694:	40056400 	call	4005640 <_ZN13USBReadParserC1Ev>
 4005698:	008100b4 	movhi	r2,1026
 400569c:	10828a04 	addi	r2,r2,2600
 40056a0:	e0fffe17 	ldw	r3,-8(fp)
 40056a4:	18800015 	stw	r2,0(r3)
 40056a8:	e0bffe17 	ldw	r2,-8(fp)
 40056ac:	e0ffff17 	ldw	r3,-4(fp)
 40056b0:	10c00115 	stw	r3,4(r2)
 40056b4:	e0bffe17 	ldw	r2,-8(fp)
 40056b8:	10800204 	addi	r2,r2,8
 40056bc:	1009883a 	mov	r4,r2
 40056c0:	4004f300 	call	4004f30 <_ZN16MultiValueBufferC1Ev>
 40056c4:	e0bffe17 	ldw	r2,-8(fp)
 40056c8:	10800404 	addi	r2,r2,16
 40056cc:	1009883a 	mov	r4,r2
 40056d0:	4004f900 	call	4004f90 <_ZN20MultiByteValueParserC1Ev>
 40056d4:	e0bffe17 	ldw	r2,-8(fp)
 40056d8:	10800604 	addi	r2,r2,24
 40056dc:	1009883a 	mov	r4,r2
 40056e0:	400504c0 	call	400504c <_ZN11ByteSkipperC1Ev>
 40056e4:	e0bffe17 	ldw	r2,-8(fp)
 40056e8:	10000c05 	stb	zero,48(r2)
 40056ec:	e0bffe17 	ldw	r2,-8(fp)
 40056f0:	10000c45 	stb	zero,49(r2)
 40056f4:	e0bffe17 	ldw	r2,-8(fp)
 40056f8:	10000c85 	stb	zero,50(r2)
 40056fc:	e0bffe17 	ldw	r2,-8(fp)
 4005700:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
 4005704:	e0bffe17 	ldw	r2,-8(fp)
 4005708:	10c00804 	addi	r3,r2,32
 400570c:	e0bffe17 	ldw	r2,-8(fp)
 4005710:	19803fcc 	andi	r6,r3,255
 4005714:	11000243 	ldbu	r4,9(r2)
 4005718:	2008703a 	and	r4,r4,zero
 400571c:	200b883a 	mov	r5,r4
 4005720:	3009883a 	mov	r4,r6
 4005724:	2908b03a 	or	r4,r5,r4
 4005728:	11000245 	stb	r4,9(r2)
 400572c:	1808d23a 	srli	r4,r3,8
 4005730:	21803fcc 	andi	r6,r4,255
 4005734:	11000283 	ldbu	r4,10(r2)
 4005738:	2008703a 	and	r4,r4,zero
 400573c:	200b883a 	mov	r5,r4
 4005740:	3009883a 	mov	r4,r6
 4005744:	2908b03a 	or	r4,r5,r4
 4005748:	11000285 	stb	r4,10(r2)
 400574c:	1808d43a 	srli	r4,r3,16
 4005750:	21803fcc 	andi	r6,r4,255
 4005754:	110002c3 	ldbu	r4,11(r2)
 4005758:	2008703a 	and	r4,r4,zero
 400575c:	200b883a 	mov	r5,r4
 4005760:	3009883a 	mov	r4,r6
 4005764:	2908b03a 	or	r4,r5,r4
 4005768:	110002c5 	stb	r4,11(r2)
 400576c:	180ad63a 	srli	r5,r3,24
 4005770:	10c00303 	ldbu	r3,12(r2)
 4005774:	1806703a 	and	r3,r3,zero
 4005778:	1809883a 	mov	r4,r3
 400577c:	2807883a 	mov	r3,r5
 4005780:	20c6b03a 	or	r3,r4,r3
 4005784:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
 4005788:	e0bffe17 	ldw	r2,-8(fp)
 400578c:	10c00404 	addi	r3,r2,16
 4005790:	e0bffe17 	ldw	r2,-8(fp)
 4005794:	10800204 	addi	r2,r2,8
 4005798:	100b883a 	mov	r5,r2
 400579c:	1809883a 	mov	r4,r3
 40057a0:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 40057a4:	e0bffe17 	ldw	r2,-8(fp)
 40057a8:	10c00604 	addi	r3,r2,24
 40057ac:	e0bffe17 	ldw	r2,-8(fp)
 40057b0:	10800204 	addi	r2,r2,8
 40057b4:	100b883a 	mov	r5,r2
 40057b8:	1809883a 	mov	r4,r3
 40057bc:	40050880 	call	4005088 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 40057c0:	0001883a 	nop
 40057c4:	e037883a 	mov	sp,fp
 40057c8:	dfc00117 	ldw	ra,4(sp)
 40057cc:	df000017 	ldw	fp,0(sp)
 40057d0:	dec00204 	addi	sp,sp,8
 40057d4:	f800283a 	ret

040057d8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 40057d8:	defff804 	addi	sp,sp,-32
 40057dc:	dfc00715 	stw	ra,28(sp)
 40057e0:	df000615 	stw	fp,24(sp)
 40057e4:	df000604 	addi	fp,sp,24
 40057e8:	e13ffc15 	stw	r4,-16(fp)
 40057ec:	2805883a 	mov	r2,r5
 40057f0:	e1bffe15 	stw	r6,-8(fp)
 40057f4:	e1ffff15 	stw	r7,-4(fp)
 40057f8:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
 40057fc:	e0bffd0b 	ldhu	r2,-12(fp)
 4005800:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
 4005804:	e0bffe17 	ldw	r2,-8(fp)
 4005808:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
 400580c:	e0bffa0b 	ldhu	r2,-24(fp)
 4005810:	10bfffcc 	andi	r2,r2,65535
 4005814:	10000a26 	beq	r2,zero,4005840 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
 4005818:	e0bffb04 	addi	r2,fp,-20
 400581c:	e1bffa04 	addi	r6,fp,-24
 4005820:	100b883a 	mov	r5,r2
 4005824:	e13ffc17 	ldw	r4,-16(fp)
 4005828:	40058540 	call	4005854 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
 400582c:	1080005c 	xori	r2,r2,1
 4005830:	10803fcc 	andi	r2,r2,255
 4005834:	1000011e 	bne	r2,zero,400583c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
 4005838:	003ff406 	br	400580c <__alt_mem_onchip_memory2_0+0xfc00456c>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
 400583c:	0001883a 	nop
}
 4005840:	e037883a 	mov	sp,fp
 4005844:	dfc00117 	ldw	ra,4(sp)
 4005848:	df000017 	ldw	fp,0(sp)
 400584c:	dec00204 	addi	sp,sp,8
 4005850:	f800283a 	ret

04005854 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 4005854:	defff604 	addi	sp,sp,-40
 4005858:	dfc00915 	stw	ra,36(sp)
 400585c:	df000815 	stw	fp,32(sp)
 4005860:	df000804 	addi	fp,sp,32
 4005864:	e13ffc15 	stw	r4,-16(fp)
 4005868:	e17ffd15 	stw	r5,-12(fp)
 400586c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 4005870:	e0bffc17 	ldw	r2,-16(fp)
 4005874:	10800804 	addi	r2,r2,32
 4005878:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 400587c:	e0bffc17 	ldw	r2,-16(fp)
 4005880:	10800804 	addi	r2,r2,32
 4005884:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
 4005888:	e0bffc17 	ldw	r2,-16(fp)
 400588c:	10800c03 	ldbu	r2,48(r2)
 4005890:	10803fcc 	andi	r2,r2,255
 4005894:	10c00168 	cmpgeui	r3,r2,5
 4005898:	1801141e 	bne	r3,zero,4005cec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
 400589c:	100690ba 	slli	r3,r2,2
 40058a0:	00810034 	movhi	r2,1024
 40058a4:	10962d04 	addi	r2,r2,22708
 40058a8:	1885883a 	add	r2,r3,r2
 40058ac:	10800017 	ldw	r2,0(r2)
 40058b0:	1000683a 	jmp	r2
 40058b4:	040058c8 	cmpgei	r16,zero,355
 40058b8:	040058fc 	xorhi	r16,zero,355
 40058bc:	04005984 	movi	r16,358
 40058c0:	04005a18 	cmpnei	r16,zero,360
 40058c4:	04005a84 	movi	r16,362
                case 0:
                        theBuffer.valueSize = 2;
 40058c8:	e0bffc17 	ldw	r2,-16(fp)
 40058cc:	00c00084 	movi	r3,2
 40058d0:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 40058d4:	e0bffc17 	ldw	r2,-16(fp)
 40058d8:	10c00404 	addi	r3,r2,16
 40058dc:	e0bffc17 	ldw	r2,-16(fp)
 40058e0:	10800204 	addi	r2,r2,8
 40058e4:	100b883a 	mov	r5,r2
 40058e8:	1809883a 	mov	r4,r3
 40058ec:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 40058f0:	e0bffc17 	ldw	r2,-16(fp)
 40058f4:	00c00044 	movi	r3,1
 40058f8:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 40058fc:	e0bffc17 	ldw	r2,-16(fp)
 4005900:	10800404 	addi	r2,r2,16
 4005904:	e1bffe17 	ldw	r6,-8(fp)
 4005908:	e17ffd17 	ldw	r5,-12(fp)
 400590c:	1009883a 	mov	r4,r2
 4005910:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005914:	1080005c 	xori	r2,r2,1
 4005918:	10803fcc 	andi	r2,r2,255
 400591c:	10000226 	beq	r2,zero,4005928 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
 4005920:	0005883a 	mov	r2,zero
 4005924:	0000f206 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 4005928:	e0bffc17 	ldw	r2,-16(fp)
 400592c:	10c00217 	ldw	r3,8(r2)
 4005930:	1806d23a 	srli	r3,r3,8
 4005934:	10800317 	ldw	r2,12(r2)
 4005938:	10803fcc 	andi	r2,r2,255
 400593c:	1004963a 	slli	r2,r2,24
 4005940:	10c4b03a 	or	r2,r2,r3
 4005944:	10c00003 	ldbu	r3,0(r2)
 4005948:	e0bffc17 	ldw	r2,-16(fp)
 400594c:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 4005950:	e0bffc17 	ldw	r2,-16(fp)
 4005954:	10c00217 	ldw	r3,8(r2)
 4005958:	1806d23a 	srli	r3,r3,8
 400595c:	10800317 	ldw	r2,12(r2)
 4005960:	10803fcc 	andi	r2,r2,255
 4005964:	1004963a 	slli	r2,r2,24
 4005968:	10c4b03a 	or	r2,r2,r3
 400596c:	10c00043 	ldbu	r3,1(r2)
 4005970:	e0bffc17 	ldw	r2,-16(fp)
 4005974:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
 4005978:	e0bffc17 	ldw	r2,-16(fp)
 400597c:	00c00084 	movi	r3,2
 4005980:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 4005984:	e0bffc17 	ldw	r2,-16(fp)
 4005988:	10800804 	addi	r2,r2,32
 400598c:	10c00084 	addi	r3,r2,2
 4005990:	e0bffc17 	ldw	r2,-16(fp)
 4005994:	19803fcc 	andi	r6,r3,255
 4005998:	11000243 	ldbu	r4,9(r2)
 400599c:	2008703a 	and	r4,r4,zero
 40059a0:	200b883a 	mov	r5,r4
 40059a4:	3009883a 	mov	r4,r6
 40059a8:	2908b03a 	or	r4,r5,r4
 40059ac:	11000245 	stb	r4,9(r2)
 40059b0:	1808d23a 	srli	r4,r3,8
 40059b4:	21803fcc 	andi	r6,r4,255
 40059b8:	11000283 	ldbu	r4,10(r2)
 40059bc:	2008703a 	and	r4,r4,zero
 40059c0:	200b883a 	mov	r5,r4
 40059c4:	3009883a 	mov	r4,r6
 40059c8:	2908b03a 	or	r4,r5,r4
 40059cc:	11000285 	stb	r4,10(r2)
 40059d0:	1808d43a 	srli	r4,r3,16
 40059d4:	21803fcc 	andi	r6,r4,255
 40059d8:	110002c3 	ldbu	r4,11(r2)
 40059dc:	2008703a 	and	r4,r4,zero
 40059e0:	200b883a 	mov	r5,r4
 40059e4:	3009883a 	mov	r4,r6
 40059e8:	2908b03a 	or	r4,r5,r4
 40059ec:	110002c5 	stb	r4,11(r2)
 40059f0:	180ad63a 	srli	r5,r3,24
 40059f4:	10c00303 	ldbu	r3,12(r2)
 40059f8:	1806703a 	and	r3,r3,zero
 40059fc:	1809883a 	mov	r4,r3
 4005a00:	2807883a 	mov	r3,r5
 4005a04:	20c6b03a 	or	r3,r4,r3
 4005a08:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
 4005a0c:	e0bffc17 	ldw	r2,-16(fp)
 4005a10:	00c000c4 	movi	r3,3
 4005a14:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
 4005a18:	e0bffc17 	ldw	r2,-16(fp)
 4005a1c:	10800c83 	ldbu	r2,50(r2)
 4005a20:	10803fcc 	andi	r2,r2,255
 4005a24:	10c00120 	cmpeqi	r3,r2,4
 4005a28:	1800021e 	bne	r3,zero,4005a34 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
 4005a2c:	10800148 	cmpgei	r2,r2,5
 4005a30:	00000306 	br	4005a40 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 4005a34:	e0bffc17 	ldw	r2,-16(fp)
 4005a38:	10000cc5 	stb	zero,51(r2)
                                        break;
 4005a3c:	00000106 	br	4005a44 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
 4005a40:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
 4005a44:	e0bffc17 	ldw	r2,-16(fp)
 4005a48:	10800c43 	ldbu	r2,49(r2)
 4005a4c:	10bfff84 	addi	r2,r2,-2
 4005a50:	1007883a 	mov	r3,r2
 4005a54:	e0bffc17 	ldw	r2,-16(fp)
 4005a58:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 4005a5c:	e0bffc17 	ldw	r2,-16(fp)
 4005a60:	10c00404 	addi	r3,r2,16
 4005a64:	e0bffc17 	ldw	r2,-16(fp)
 4005a68:	10800204 	addi	r2,r2,8
 4005a6c:	100b883a 	mov	r5,r2
 4005a70:	1809883a 	mov	r4,r3
 4005a74:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 4005a78:	e0bffc17 	ldw	r2,-16(fp)
 4005a7c:	00c00104 	movi	r3,4
 4005a80:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
 4005a84:	e0bffc17 	ldw	r2,-16(fp)
 4005a88:	10800c83 	ldbu	r2,50(r2)
 4005a8c:	10803fcc 	andi	r2,r2,255
 4005a90:	10c00120 	cmpeqi	r3,r2,4
 4005a94:	1800141e 	bne	r3,zero,4005ae8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
 4005a98:	10c00160 	cmpeqi	r3,r2,5
 4005a9c:	1800311e 	bne	r3,zero,4005b64 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
 4005aa0:	108000a0 	cmpeqi	r2,r2,2
 4005aa4:	10005a26 	beq	r2,zero,4005c10 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 4005aa8:	e0bffc17 	ldw	r2,-16(fp)
 4005aac:	10800404 	addi	r2,r2,16
 4005ab0:	e1bffe17 	ldw	r6,-8(fp)
 4005ab4:	e17ffd17 	ldw	r5,-12(fp)
 4005ab8:	1009883a 	mov	r4,r2
 4005abc:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005ac0:	1080005c 	xori	r2,r2,1
 4005ac4:	10803fcc 	andi	r2,r2,255
 4005ac8:	10000226 	beq	r2,zero,4005ad4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
 4005acc:	0005883a 	mov	r2,zero
 4005ad0:	00008706 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
 4005ad4:	e0bffa17 	ldw	r2,-24(fp)
 4005ad8:	10c00143 	ldbu	r3,5(r2)
 4005adc:	e0bffc17 	ldw	r2,-16(fp)
 4005ae0:	10c00d05 	stb	r3,52(r2)
                                        break;
 4005ae4:	00005e06 	br	4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 4005ae8:	e0bffc17 	ldw	r2,-16(fp)
 4005aec:	10800404 	addi	r2,r2,16
 4005af0:	e1bffe17 	ldw	r6,-8(fp)
 4005af4:	e17ffd17 	ldw	r5,-12(fp)
 4005af8:	1009883a 	mov	r4,r2
 4005afc:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005b00:	1080005c 	xori	r2,r2,1
 4005b04:	10803fcc 	andi	r2,r2,255
 4005b08:	10000226 	beq	r2,zero,4005b14 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
 4005b0c:	0005883a 	mov	r2,zero
 4005b10:	00007706 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
 4005b14:	e0bffc17 	ldw	r2,-16(fp)
 4005b18:	10800e03 	ldbu	r2,56(r2)
 4005b1c:	10803fcc 	andi	r2,r2,255
 4005b20:	10004c1e 	bne	r2,zero,4005c54 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
 4005b24:	e0bffc17 	ldw	r2,-16(fp)
 4005b28:	00c00044 	movi	r3,1
 4005b2c:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
 4005b30:	e0bffb17 	ldw	r2,-20(fp)
 4005b34:	10c00083 	ldbu	r3,2(r2)
 4005b38:	e0bffc17 	ldw	r2,-16(fp)
 4005b3c:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
 4005b40:	e0bffb17 	ldw	r2,-20(fp)
 4005b44:	10c000c3 	ldbu	r3,3(r2)
 4005b48:	e0bffc17 	ldw	r2,-16(fp)
 4005b4c:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
 4005b50:	e0bffb17 	ldw	r2,-20(fp)
 4005b54:	10c001c3 	ldbu	r3,7(r2)
 4005b58:	e0bffc17 	ldw	r2,-16(fp)
 4005b5c:	10c00d45 	stb	r3,53(r2)
                                        break;
 4005b60:	00003f06 	br	4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 4005b64:	e0bffc17 	ldw	r2,-16(fp)
 4005b68:	10800404 	addi	r2,r2,16
 4005b6c:	e1bffe17 	ldw	r6,-8(fp)
 4005b70:	e17ffd17 	ldw	r5,-12(fp)
 4005b74:	1009883a 	mov	r4,r2
 4005b78:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005b7c:	1080005c 	xori	r2,r2,1
 4005b80:	10803fcc 	andi	r2,r2,255
 4005b84:	10000226 	beq	r2,zero,4005b90 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
 4005b88:	0005883a 	mov	r2,zero
 4005b8c:	00005806 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
 4005b90:	e0bffc17 	ldw	r2,-16(fp)
 4005b94:	10800cc3 	ldbu	r2,51(r2)
 4005b98:	10803fcc 	andi	r2,r2,255
 4005b9c:	10002f26 	beq	r2,zero,4005c5c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
 4005ba0:	e0bffc17 	ldw	r2,-16(fp)
 4005ba4:	10800117 	ldw	r2,4(r2)
 4005ba8:	10002c26 	beq	r2,zero,4005c5c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 4005bac:	e0bffc17 	ldw	r2,-16(fp)
 4005bb0:	10800117 	ldw	r2,4(r2)
 4005bb4:	10800017 	ldw	r2,0(r2)
 4005bb8:	10800017 	ldw	r2,0(r2)
 4005bbc:	e0fffc17 	ldw	r3,-16(fp)
 4005bc0:	1a000117 	ldw	r8,4(r3)
 4005bc4:	e0fffc17 	ldw	r3,-16(fp)
 4005bc8:	18c00d03 	ldbu	r3,52(r3)
 4005bcc:	19403fcc 	andi	r5,r3,255
 4005bd0:	e0fffc17 	ldw	r3,-16(fp)
 4005bd4:	18c00d83 	ldbu	r3,54(r3)
 4005bd8:	19803fcc 	andi	r6,r3,255
 4005bdc:	e0fffc17 	ldw	r3,-16(fp)
 4005be0:	18c00dc3 	ldbu	r3,55(r3)
 4005be4:	19c03fcc 	andi	r7,r3,255
 4005be8:	e0fffc17 	ldw	r3,-16(fp)
 4005bec:	18c00d43 	ldbu	r3,53(r3)
 4005bf0:	18c03fcc 	andi	r3,r3,255
 4005bf4:	e13ffc17 	ldw	r4,-16(fp)
 4005bf8:	21000804 	addi	r4,r4,32
 4005bfc:	d9000115 	stw	r4,4(sp)
 4005c00:	d8c00015 	stw	r3,0(sp)
 4005c04:	4009883a 	mov	r4,r8
 4005c08:	103ee83a 	callr	r2
                                        break;
 4005c0c:	00001306 	br	4005c5c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 4005c10:	e0bffc17 	ldw	r2,-16(fp)
 4005c14:	10c00604 	addi	r3,r2,24
 4005c18:	e0bffc17 	ldw	r2,-16(fp)
 4005c1c:	10800c43 	ldbu	r2,49(r2)
 4005c20:	10803fcc 	andi	r2,r2,255
 4005c24:	10bfff84 	addi	r2,r2,-2
 4005c28:	10bfffcc 	andi	r2,r2,65535
 4005c2c:	100f883a 	mov	r7,r2
 4005c30:	e1bffe17 	ldw	r6,-8(fp)
 4005c34:	e17ffd17 	ldw	r5,-12(fp)
 4005c38:	1809883a 	mov	r4,r3
 4005c3c:	40050f00 	call	40050f0 <_ZN11ByteSkipper4SkipEPPhPtt>
 4005c40:	1080005c 	xori	r2,r2,1
 4005c44:	10803fcc 	andi	r2,r2,255
 4005c48:	10000526 	beq	r2,zero,4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
 4005c4c:	0005883a 	mov	r2,zero
 4005c50:	00002706 	br	4005cf0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
 4005c54:	0001883a 	nop
 4005c58:	00000106 	br	4005c60 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
 4005c5c:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
 4005c60:	e0bffc17 	ldw	r2,-16(fp)
 4005c64:	10c00804 	addi	r3,r2,32
 4005c68:	e0bffc17 	ldw	r2,-16(fp)
 4005c6c:	19803fcc 	andi	r6,r3,255
 4005c70:	11000243 	ldbu	r4,9(r2)
 4005c74:	2008703a 	and	r4,r4,zero
 4005c78:	200b883a 	mov	r5,r4
 4005c7c:	3009883a 	mov	r4,r6
 4005c80:	2908b03a 	or	r4,r5,r4
 4005c84:	11000245 	stb	r4,9(r2)
 4005c88:	1808d23a 	srli	r4,r3,8
 4005c8c:	21803fcc 	andi	r6,r4,255
 4005c90:	11000283 	ldbu	r4,10(r2)
 4005c94:	2008703a 	and	r4,r4,zero
 4005c98:	200b883a 	mov	r5,r4
 4005c9c:	3009883a 	mov	r4,r6
 4005ca0:	2908b03a 	or	r4,r5,r4
 4005ca4:	11000285 	stb	r4,10(r2)
 4005ca8:	1808d43a 	srli	r4,r3,16
 4005cac:	21803fcc 	andi	r6,r4,255
 4005cb0:	110002c3 	ldbu	r4,11(r2)
 4005cb4:	2008703a 	and	r4,r4,zero
 4005cb8:	200b883a 	mov	r5,r4
 4005cbc:	3009883a 	mov	r4,r6
 4005cc0:	2908b03a 	or	r4,r5,r4
 4005cc4:	110002c5 	stb	r4,11(r2)
 4005cc8:	180ad63a 	srli	r5,r3,24
 4005ccc:	10c00303 	ldbu	r3,12(r2)
 4005cd0:	1806703a 	and	r3,r3,zero
 4005cd4:	1809883a 	mov	r4,r3
 4005cd8:	2807883a 	mov	r3,r5
 4005cdc:	20c6b03a 	or	r3,r4,r3
 4005ce0:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
 4005ce4:	e0bffc17 	ldw	r2,-16(fp)
 4005ce8:	10000c05 	stb	zero,48(r2)
        }
        return true;
 4005cec:	00800044 	movi	r2,1
}
 4005cf0:	e037883a 	mov	sp,fp
 4005cf4:	dfc00117 	ldw	ra,4(sp)
 4005cf8:	df000017 	ldw	fp,0(sp)
 4005cfc:	dec00204 	addi	sp,sp,8
 4005d00:	f800283a 	ret

04005d04 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
 4005d04:	defff904 	addi	sp,sp,-28
 4005d08:	dfc00615 	stw	ra,24(sp)
 4005d0c:	df000515 	stw	fp,20(sp)
 4005d10:	df000504 	addi	fp,sp,20
 4005d14:	e13ffc15 	stw	r4,-16(fp)
 4005d18:	e17ffd15 	stw	r5,-12(fp)
 4005d1c:	3007883a 	mov	r3,r6
 4005d20:	3805883a 	mov	r2,r7
 4005d24:	e0fffe05 	stb	r3,-8(fp)
 4005d28:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
 4005d2c:	e0800217 	ldw	r2,8(fp)
 4005d30:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
 4005d34:	e0bffc17 	ldw	r2,-16(fp)
 4005d38:	10800117 	ldw	r2,4(r2)
 4005d3c:	1080004c 	andi	r2,r2,1
 4005d40:	1007883a 	mov	r3,r2
 4005d44:	e0bffb17 	ldw	r2,-20(fp)
 4005d48:	10800003 	ldbu	r2,0(r2)
 4005d4c:	1080004c 	andi	r2,r2,1
 4005d50:	18c03fcc 	andi	r3,r3,255
 4005d54:	10803fcc 	andi	r2,r2,255
 4005d58:	18801426 	beq	r3,r2,4005dac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
 4005d5c:	e0bffb17 	ldw	r2,-20(fp)
 4005d60:	10800003 	ldbu	r2,0(r2)
 4005d64:	1080004c 	andi	r2,r2,1
 4005d68:	10803fcc 	andi	r2,r2,255
 4005d6c:	10000826 	beq	r2,zero,4005d90 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
 4005d70:	e0bffc17 	ldw	r2,-16(fp)
 4005d74:	10800017 	ldw	r2,0(r2)
 4005d78:	10800304 	addi	r2,r2,12
 4005d7c:	10800017 	ldw	r2,0(r2)
 4005d80:	e17ffb17 	ldw	r5,-20(fp)
 4005d84:	e13ffc17 	ldw	r4,-16(fp)
 4005d88:	103ee83a 	callr	r2
 4005d8c:	00000706 	br	4005dac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
 4005d90:	e0bffc17 	ldw	r2,-16(fp)
 4005d94:	10800017 	ldw	r2,0(r2)
 4005d98:	10800204 	addi	r2,r2,8
 4005d9c:	10800017 	ldw	r2,0(r2)
 4005da0:	e17ffb17 	ldw	r5,-20(fp)
 4005da4:	e13ffc17 	ldw	r4,-16(fp)
 4005da8:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
 4005dac:	e0bffc17 	ldw	r2,-16(fp)
 4005db0:	10800117 	ldw	r2,4(r2)
 4005db4:	1004d07a 	srli	r2,r2,1
 4005db8:	1080004c 	andi	r2,r2,1
 4005dbc:	1007883a 	mov	r3,r2
 4005dc0:	e0bffb17 	ldw	r2,-20(fp)
 4005dc4:	10800003 	ldbu	r2,0(r2)
 4005dc8:	1004d07a 	srli	r2,r2,1
 4005dcc:	1080004c 	andi	r2,r2,1
 4005dd0:	18c03fcc 	andi	r3,r3,255
 4005dd4:	10803fcc 	andi	r2,r2,255
 4005dd8:	18801426 	beq	r3,r2,4005e2c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
 4005ddc:	e0bffb17 	ldw	r2,-20(fp)
 4005de0:	10800003 	ldbu	r2,0(r2)
 4005de4:	1080008c 	andi	r2,r2,2
 4005de8:	10803fcc 	andi	r2,r2,255
 4005dec:	10000826 	beq	r2,zero,4005e10 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
 4005df0:	e0bffc17 	ldw	r2,-16(fp)
 4005df4:	10800017 	ldw	r2,0(r2)
 4005df8:	10800504 	addi	r2,r2,20
 4005dfc:	10800017 	ldw	r2,0(r2)
 4005e00:	e17ffb17 	ldw	r5,-20(fp)
 4005e04:	e13ffc17 	ldw	r4,-16(fp)
 4005e08:	103ee83a 	callr	r2
 4005e0c:	00000706 	br	4005e2c <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
 4005e10:	e0bffc17 	ldw	r2,-16(fp)
 4005e14:	10800017 	ldw	r2,0(r2)
 4005e18:	10800404 	addi	r2,r2,16
 4005e1c:	10800017 	ldw	r2,0(r2)
 4005e20:	e17ffb17 	ldw	r5,-20(fp)
 4005e24:	e13ffc17 	ldw	r4,-16(fp)
 4005e28:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
 4005e2c:	e0bffc17 	ldw	r2,-16(fp)
 4005e30:	10800117 	ldw	r2,4(r2)
 4005e34:	1004d0ba 	srli	r2,r2,2
 4005e38:	1080004c 	andi	r2,r2,1
 4005e3c:	1007883a 	mov	r3,r2
 4005e40:	e0bffb17 	ldw	r2,-20(fp)
 4005e44:	10800003 	ldbu	r2,0(r2)
 4005e48:	1004d0ba 	srli	r2,r2,2
 4005e4c:	1080004c 	andi	r2,r2,1
 4005e50:	18c03fcc 	andi	r3,r3,255
 4005e54:	10803fcc 	andi	r2,r2,255
 4005e58:	18801426 	beq	r3,r2,4005eac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
 4005e5c:	e0bffb17 	ldw	r2,-20(fp)
 4005e60:	10800003 	ldbu	r2,0(r2)
 4005e64:	1080010c 	andi	r2,r2,4
 4005e68:	10803fcc 	andi	r2,r2,255
 4005e6c:	10000826 	beq	r2,zero,4005e90 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
 4005e70:	e0bffc17 	ldw	r2,-16(fp)
 4005e74:	10800017 	ldw	r2,0(r2)
 4005e78:	10800704 	addi	r2,r2,28
 4005e7c:	10800017 	ldw	r2,0(r2)
 4005e80:	e17ffb17 	ldw	r5,-20(fp)
 4005e84:	e13ffc17 	ldw	r4,-16(fp)
 4005e88:	103ee83a 	callr	r2
 4005e8c:	00000706 	br	4005eac <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
 4005e90:	e0bffc17 	ldw	r2,-16(fp)
 4005e94:	10800017 	ldw	r2,0(r2)
 4005e98:	10800604 	addi	r2,r2,24
 4005e9c:	10800017 	ldw	r2,0(r2)
 4005ea0:	e17ffb17 	ldw	r5,-20(fp)
 4005ea4:	e13ffc17 	ldw	r4,-16(fp)
 4005ea8:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
 4005eac:	e0bffb17 	ldw	r2,-20(fp)
 4005eb0:	10800043 	ldbu	r2,1(r2)
 4005eb4:	10803fcc 	andi	r2,r2,255
 4005eb8:	1080201c 	xori	r2,r2,128
 4005ebc:	10bfe004 	addi	r2,r2,-128
 4005ec0:	1000061e 	bne	r2,zero,4005edc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
 4005ec4:	e0bffb17 	ldw	r2,-20(fp)
 4005ec8:	10800083 	ldbu	r2,2(r2)
 4005ecc:	10803fcc 	andi	r2,r2,255
 4005ed0:	1080201c 	xori	r2,r2,128
 4005ed4:	10bfe004 	addi	r2,r2,-128
 4005ed8:	10000726 	beq	r2,zero,4005ef8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
 4005edc:	e0bffc17 	ldw	r2,-16(fp)
 4005ee0:	10800017 	ldw	r2,0(r2)
 4005ee4:	10800104 	addi	r2,r2,4
 4005ee8:	10800017 	ldw	r2,0(r2)
 4005eec:	e17ffb17 	ldw	r5,-20(fp)
 4005ef0:	e13ffc17 	ldw	r4,-16(fp)
 4005ef4:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
 4005ef8:	e0800217 	ldw	r2,8(fp)
 4005efc:	10c00003 	ldbu	r3,0(r2)
 4005f00:	e0bffc17 	ldw	r2,-16(fp)
 4005f04:	10c00105 	stb	r3,4(r2)
#endif

};
 4005f08:	0001883a 	nop
 4005f0c:	e037883a 	mov	sp,fp
 4005f10:	dfc00117 	ldw	ra,4(sp)
 4005f14:	df000017 	ldw	fp,0(sp)
 4005f18:	dec00204 	addi	sp,sp,8
 4005f1c:	f800283a 	ret

04005f20 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
 4005f20:	defff804 	addi	sp,sp,-32
 4005f24:	dfc00715 	stw	ra,28(sp)
 4005f28:	df000615 	stw	fp,24(sp)
 4005f2c:	df000604 	addi	fp,sp,24
 4005f30:	e13ffc15 	stw	r4,-16(fp)
 4005f34:	e17ffd15 	stw	r5,-12(fp)
 4005f38:	3007883a 	mov	r3,r6
 4005f3c:	3805883a 	mov	r2,r7
 4005f40:	e0fffe05 	stb	r3,-8(fp)
 4005f44:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
 4005f48:	e0800217 	ldw	r2,8(fp)
 4005f4c:	10800084 	addi	r2,r2,2
 4005f50:	10800003 	ldbu	r2,0(r2)
 4005f54:	10803fcc 	andi	r2,r2,255
 4005f58:	10800058 	cmpnei	r2,r2,1
 4005f5c:	10009926 	beq	r2,zero,40061c4 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
 4005f60:	e0bffc17 	ldw	r2,-16(fp)
 4005f64:	10c00103 	ldbu	r3,4(r2)
 4005f68:	e0800217 	ldw	r2,8(fp)
 4005f6c:	10800003 	ldbu	r2,0(r2)
 4005f70:	18c03fcc 	andi	r3,r3,255
 4005f74:	10803fcc 	andi	r2,r2,255
 4005f78:	18800e26 	beq	r3,r2,4005fb4 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
 4005f7c:	e0bffc17 	ldw	r2,-16(fp)
 4005f80:	10800017 	ldw	r2,0(r2)
 4005f84:	10800204 	addi	r2,r2,8
 4005f88:	10800017 	ldw	r2,0(r2)
 4005f8c:	e0fffc17 	ldw	r3,-16(fp)
 4005f90:	18c00103 	ldbu	r3,4(r3)
 4005f94:	19003fcc 	andi	r4,r3,255
 4005f98:	e0c00217 	ldw	r3,8(fp)
 4005f9c:	18c00003 	ldbu	r3,0(r3)
 4005fa0:	18c03fcc 	andi	r3,r3,255
 4005fa4:	180d883a 	mov	r6,r3
 4005fa8:	200b883a 	mov	r5,r4
 4005fac:	e13ffc17 	ldw	r4,-16(fp)
 4005fb0:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
 4005fb4:	00800084 	movi	r2,2
 4005fb8:	e0bffa05 	stb	r2,-24(fp)
 4005fbc:	e0bffa03 	ldbu	r2,-24(fp)
 4005fc0:	10800228 	cmpgeui	r2,r2,8
 4005fc4:	10006e1e 	bne	r2,zero,4006180 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
 4005fc8:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
 4005fcc:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
 4005fd0:	00800084 	movi	r2,2
 4005fd4:	e0bffac5 	stb	r2,-21(fp)
 4005fd8:	e0bffac3 	ldbu	r2,-21(fp)
 4005fdc:	10800228 	cmpgeui	r2,r2,8
 4005fe0:	10002f1e 	bne	r2,zero,40060a0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
 4005fe4:	e0bffa03 	ldbu	r2,-24(fp)
 4005fe8:	e0c00217 	ldw	r3,8(fp)
 4005fec:	1885883a 	add	r2,r3,r2
 4005ff0:	11000003 	ldbu	r4,0(r2)
 4005ff4:	e0bffac3 	ldbu	r2,-21(fp)
 4005ff8:	e0fffc17 	ldw	r3,-16(fp)
 4005ffc:	1885883a 	add	r2,r3,r2
 4006000:	10800104 	addi	r2,r2,4
 4006004:	10800003 	ldbu	r2,0(r2)
 4006008:	20c03fcc 	andi	r3,r4,255
 400600c:	10803fcc 	andi	r2,r2,255
 4006010:	1880091e 	bne	r3,r2,4006038 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
 4006014:	e0bffa03 	ldbu	r2,-24(fp)
 4006018:	e0c00217 	ldw	r3,8(fp)
 400601c:	1885883a 	add	r2,r3,r2
 4006020:	10800003 	ldbu	r2,0(r2)
 4006024:	10803fcc 	andi	r2,r2,255
 4006028:	10800060 	cmpeqi	r2,r2,1
 400602c:	1000021e 	bne	r2,zero,4006038 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
 4006030:	00800044 	movi	r2,1
 4006034:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
 4006038:	e0bffac3 	ldbu	r2,-21(fp)
 400603c:	e0c00217 	ldw	r3,8(fp)
 4006040:	1885883a 	add	r2,r3,r2
 4006044:	11000003 	ldbu	r4,0(r2)
 4006048:	e0bffa03 	ldbu	r2,-24(fp)
 400604c:	e0fffc17 	ldw	r3,-16(fp)
 4006050:	1885883a 	add	r2,r3,r2
 4006054:	10800104 	addi	r2,r2,4
 4006058:	10800003 	ldbu	r2,0(r2)
 400605c:	20c03fcc 	andi	r3,r4,255
 4006060:	10803fcc 	andi	r2,r2,255
 4006064:	18800a1e 	bne	r3,r2,4006090 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
 4006068:	e0bffa03 	ldbu	r2,-24(fp)
 400606c:	e0fffc17 	ldw	r3,-16(fp)
 4006070:	1885883a 	add	r2,r3,r2
 4006074:	10800104 	addi	r2,r2,4
 4006078:	10800003 	ldbu	r2,0(r2)
 400607c:	10803fcc 	andi	r2,r2,255
 4006080:	10800060 	cmpeqi	r2,r2,1
 4006084:	1000021e 	bne	r2,zero,4006090 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
 4006088:	00800044 	movi	r2,1
 400608c:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
 4006090:	e0bffac3 	ldbu	r2,-21(fp)
 4006094:	10800044 	addi	r2,r2,1
 4006098:	e0bffac5 	stb	r2,-21(fp)
 400609c:	003fce06 	br	4005fd8 <__alt_mem_onchip_memory2_0+0xfc004d38>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
 40060a0:	e0bffa43 	ldbu	r2,-23(fp)
 40060a4:	1080005c 	xori	r2,r2,1
 40060a8:	10803fcc 	andi	r2,r2,255
 40060ac:	10001c26 	beq	r2,zero,4006120 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
 40060b0:	e0bffc17 	ldw	r2,-16(fp)
 40060b4:	10800017 	ldw	r2,0(r2)
 40060b8:	10800104 	addi	r2,r2,4
 40060bc:	10800017 	ldw	r2,0(r2)
 40060c0:	e0fffa03 	ldbu	r3,-24(fp)
 40060c4:	e1000217 	ldw	r4,8(fp)
 40060c8:	20c7883a 	add	r3,r4,r3
 40060cc:	18c00003 	ldbu	r3,0(r3)
 40060d0:	18c03fcc 	andi	r3,r3,255
 40060d4:	180d883a 	mov	r6,r3
 40060d8:	e17ffd17 	ldw	r5,-12(fp)
 40060dc:	e13ffc17 	ldw	r4,-16(fp)
 40060e0:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
 40060e4:	e0bffc17 	ldw	r2,-16(fp)
 40060e8:	10800017 	ldw	r2,0(r2)
 40060ec:	10800304 	addi	r2,r2,12
 40060f0:	10800017 	ldw	r2,0(r2)
 40060f4:	e0c00217 	ldw	r3,8(fp)
 40060f8:	18c00003 	ldbu	r3,0(r3)
 40060fc:	19403fcc 	andi	r5,r3,255
 4006100:	e0fffa03 	ldbu	r3,-24(fp)
 4006104:	e1000217 	ldw	r4,8(fp)
 4006108:	20c7883a 	add	r3,r4,r3
 400610c:	18c00003 	ldbu	r3,0(r3)
 4006110:	18c03fcc 	andi	r3,r3,255
 4006114:	180d883a 	mov	r6,r3
 4006118:	e13ffc17 	ldw	r4,-16(fp)
 400611c:	103ee83a 	callr	r2
                }
                if (!up)
 4006120:	e0bffa83 	ldbu	r2,-22(fp)
 4006124:	1080005c 	xori	r2,r2,1
 4006128:	10803fcc 	andi	r2,r2,255
 400612c:	10001026 	beq	r2,zero,4006170 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
 4006130:	e0bffc17 	ldw	r2,-16(fp)
 4006134:	10800017 	ldw	r2,0(r2)
 4006138:	10800404 	addi	r2,r2,16
 400613c:	10800017 	ldw	r2,0(r2)
 4006140:	e0fffc17 	ldw	r3,-16(fp)
 4006144:	18c00103 	ldbu	r3,4(r3)
 4006148:	19403fcc 	andi	r5,r3,255
 400614c:	e0fffa03 	ldbu	r3,-24(fp)
 4006150:	e13ffc17 	ldw	r4,-16(fp)
 4006154:	20c7883a 	add	r3,r4,r3
 4006158:	18c00104 	addi	r3,r3,4
 400615c:	18c00003 	ldbu	r3,0(r3)
 4006160:	18c03fcc 	andi	r3,r3,255
 4006164:	180d883a 	mov	r6,r3
 4006168:	e13ffc17 	ldw	r4,-16(fp)
 400616c:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
 4006170:	e0bffa03 	ldbu	r2,-24(fp)
 4006174:	10800044 	addi	r2,r2,1
 4006178:	e0bffa05 	stb	r2,-24(fp)
 400617c:	003f8f06 	br	4005fbc <__alt_mem_onchip_memory2_0+0xfc004d1c>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
 4006180:	e03ffb05 	stb	zero,-20(fp)
 4006184:	e0bffb03 	ldbu	r2,-20(fp)
 4006188:	10800228 	cmpgeui	r2,r2,8
 400618c:	10000e1e 	bne	r2,zero,40061c8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
 4006190:	e0bffb03 	ldbu	r2,-20(fp)
 4006194:	e0fffb03 	ldbu	r3,-20(fp)
 4006198:	e1000217 	ldw	r4,8(fp)
 400619c:	20c7883a 	add	r3,r4,r3
 40061a0:	18c00003 	ldbu	r3,0(r3)
 40061a4:	e13ffc17 	ldw	r4,-16(fp)
 40061a8:	2085883a 	add	r2,r4,r2
 40061ac:	10800104 	addi	r2,r2,4
 40061b0:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
 40061b4:	e0bffb03 	ldbu	r2,-20(fp)
 40061b8:	10800044 	addi	r2,r2,1
 40061bc:	e0bffb05 	stb	r2,-20(fp)
 40061c0:	003ff006 	br	4006184 <__alt_mem_onchip_memory2_0+0xfc004ee4>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
 40061c4:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
 40061c8:	e037883a 	mov	sp,fp
 40061cc:	dfc00117 	ldw	ra,4(sp)
 40061d0:	df000017 	ldw	fp,0(sp)
 40061d4:	dec00204 	addi	sp,sp,8
 40061d8:	f800283a 	ret

040061dc <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
 40061dc:	defffa04 	addi	sp,sp,-24
 40061e0:	dfc00515 	stw	ra,20(sp)
 40061e4:	df000415 	stw	fp,16(sp)
 40061e8:	df000404 	addi	fp,sp,16
 40061ec:	e13ffd15 	stw	r4,-12(fp)
 40061f0:	2807883a 	mov	r3,r5
 40061f4:	3005883a 	mov	r2,r6
 40061f8:	e0fffe05 	stb	r3,-8(fp)
 40061fc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
 4006200:	e0bffe03 	ldbu	r2,-8(fp)
 4006204:	1080088c 	andi	r2,r2,34
 4006208:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
 400620c:	e0bfff03 	ldbu	r2,-4(fp)
 4006210:	10800130 	cmpltui	r2,r2,4
 4006214:	1000151e 	bne	r2,zero,400626c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
 4006218:	e0bfff03 	ldbu	r2,-4(fp)
 400621c:	108007a8 	cmpgeui	r2,r2,30
 4006220:	1000121e 	bne	r2,zero,400626c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
 4006224:	e0bffd17 	ldw	r2,-12(fp)
 4006228:	10800317 	ldw	r2,12(r2)
 400622c:	1080008c 	andi	r2,r2,2
 4006230:	1000021e 	bne	r2,zero,400623c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
 4006234:	e0bffc03 	ldbu	r2,-16(fp)
 4006238:	1000061e 	bne	r2,zero,4006254 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
 400623c:	e0bffd17 	ldw	r2,-12(fp)
 4006240:	10800317 	ldw	r2,12(r2)
 4006244:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
 4006248:	10000526 	beq	r2,zero,4006260 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
 400624c:	e0bffc03 	ldbu	r2,-16(fp)
 4006250:	1000031e 	bne	r2,zero,4006260 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
 4006254:	e0bfff03 	ldbu	r2,-4(fp)
 4006258:	10800f44 	addi	r2,r2,61
 400625c:	00008006 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
 4006260:	e0bfff03 	ldbu	r2,-4(fp)
 4006264:	10801744 	addi	r2,r2,93
 4006268:	00007d06 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
 400626c:	e0bfff03 	ldbu	r2,-4(fp)
 4006270:	108007b0 	cmpltui	r2,r2,30
 4006274:	1000191e 	bne	r2,zero,40062dc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
 4006278:	e0bfff03 	ldbu	r2,-4(fp)
 400627c:	10800a28 	cmpgeui	r2,r2,40
 4006280:	1000161e 	bne	r2,zero,40062dc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
 4006284:	e0bffc03 	ldbu	r2,-16(fp)
 4006288:	10000c26 	beq	r2,zero,40062bc <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
 400628c:	e0bffd17 	ldw	r2,-12(fp)
 4006290:	10800017 	ldw	r2,0(r2)
 4006294:	10800504 	addi	r2,r2,20
 4006298:	10800017 	ldw	r2,0(r2)
 400629c:	e13ffd17 	ldw	r4,-12(fp)
 40062a0:	103ee83a 	callr	r2
 40062a4:	1007883a 	mov	r3,r2
 40062a8:	e0bfff03 	ldbu	r2,-4(fp)
 40062ac:	10bff884 	addi	r2,r2,-30
 40062b0:	1885883a 	add	r2,r3,r2
 40062b4:	10800003 	ldbu	r2,0(r2)
 40062b8:	00006906 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
 40062bc:	e0bfff03 	ldbu	r2,-4(fp)
 40062c0:	108009e0 	cmpeqi	r2,r2,39
 40062c4:	1000031e 	bne	r2,zero,40062d4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
 40062c8:	e0bfff03 	ldbu	r2,-4(fp)
 40062cc:	108004c4 	addi	r2,r2,19
 40062d0:	00006306 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 40062d4:	00800c04 	movi	r2,48
 40062d8:	00006106 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
 40062dc:	e0bfff03 	ldbu	r2,-4(fp)
 40062e0:	10801670 	cmpltui	r2,r2,89
 40062e4:	10000a1e 	bne	r2,zero,4006310 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
 40062e8:	e0bfff03 	ldbu	r2,-4(fp)
 40062ec:	108018a8 	cmpgeui	r2,r2,98
 40062f0:	1000071e 	bne	r2,zero,4006310 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
 40062f4:	e0bffd17 	ldw	r2,-12(fp)
 40062f8:	10800317 	ldw	r2,12(r2)
 40062fc:	1080004c 	andi	r2,r2,1
 4006300:	10005626 	beq	r2,zero,400645c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
 4006304:	e0bfff03 	ldbu	r2,-4(fp)
 4006308:	10bff604 	addi	r2,r2,-40
 400630c:	00005406 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
 4006310:	e0bfff03 	ldbu	r2,-4(fp)
 4006314:	10800b70 	cmpltui	r2,r2,45
 4006318:	10001d1e 	bne	r2,zero,4006390 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
 400631c:	e0bfff03 	ldbu	r2,-4(fp)
 4006320:	10800e68 	cmpgeui	r2,r2,57
 4006324:	10001a1e 	bne	r2,zero,4006390 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
 4006328:	e0bffc03 	ldbu	r2,-16(fp)
 400632c:	10000c26 	beq	r2,zero,4006360 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
 4006330:	e0bffd17 	ldw	r2,-12(fp)
 4006334:	10800017 	ldw	r2,0(r2)
 4006338:	10800604 	addi	r2,r2,24
 400633c:	10800017 	ldw	r2,0(r2)
 4006340:	e13ffd17 	ldw	r4,-12(fp)
 4006344:	103ee83a 	callr	r2
 4006348:	1007883a 	mov	r3,r2
 400634c:	e0bfff03 	ldbu	r2,-4(fp)
 4006350:	10bff4c4 	addi	r2,r2,-45
 4006354:	1885883a 	add	r2,r3,r2
 4006358:	10800003 	ldbu	r2,0(r2)
 400635c:	00004006 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4006360:	e0bffd17 	ldw	r2,-12(fp)
 4006364:	10800017 	ldw	r2,0(r2)
 4006368:	10800704 	addi	r2,r2,28
 400636c:	10800017 	ldw	r2,0(r2)
 4006370:	e13ffd17 	ldw	r4,-12(fp)
 4006374:	103ee83a 	callr	r2
 4006378:	1007883a 	mov	r3,r2
 400637c:	e0bfff03 	ldbu	r2,-4(fp)
 4006380:	10bff4c4 	addi	r2,r2,-45
 4006384:	1885883a 	add	r2,r3,r2
 4006388:	10800003 	ldbu	r2,0(r2)
 400638c:	00003406 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
 4006390:	e0bfff03 	ldbu	r2,-4(fp)
 4006394:	10801530 	cmpltui	r2,r2,84
 4006398:	10000f1e 	bne	r2,zero,40063d8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
 400639c:	e0bfff03 	ldbu	r2,-4(fp)
 40063a0:	10801668 	cmpgeui	r2,r2,89
 40063a4:	10000c1e 	bne	r2,zero,40063d8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
 40063a8:	e0bffd17 	ldw	r2,-12(fp)
 40063ac:	10800017 	ldw	r2,0(r2)
 40063b0:	10800804 	addi	r2,r2,32
 40063b4:	10800017 	ldw	r2,0(r2)
 40063b8:	e13ffd17 	ldw	r4,-12(fp)
 40063bc:	103ee83a 	callr	r2
 40063c0:	1007883a 	mov	r3,r2
 40063c4:	e0bfff03 	ldbu	r2,-4(fp)
 40063c8:	10bfeb04 	addi	r2,r2,-84
 40063cc:	1885883a 	add	r2,r3,r2
 40063d0:	10800003 	ldbu	r2,0(r2)
 40063d4:	00002206 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
 40063d8:	e0bfff03 	ldbu	r2,-4(fp)
 40063dc:	10c00b20 	cmpeqi	r3,r2,44
 40063e0:	18000a1e 	bne	r3,zero,400640c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
 40063e4:	10c00b48 	cmpgei	r3,r2,45
 40063e8:	1800031e 	bne	r3,zero,40063f8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
 40063ec:	10800a20 	cmpeqi	r2,r2,40
 40063f0:	1000081e 	bne	r2,zero,4006414 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
 40063f4:	00001906 	br	400645c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
 40063f8:	10c018a0 	cmpeqi	r3,r2,98
 40063fc:	1800071e 	bne	r3,zero,400641c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
 4006400:	108018e0 	cmpeqi	r2,r2,99
 4006404:	10000d1e 	bne	r2,zero,400643c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
 4006408:	00001406 	br	400645c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
 400640c:	00800804 	movi	r2,32
 4006410:	00001306 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
 4006414:	00800344 	movi	r2,13
 4006418:	00001106 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
 400641c:	e0bffd17 	ldw	r2,-12(fp)
 4006420:	10800317 	ldw	r2,12(r2)
 4006424:	1080004c 	andi	r2,r2,1
 4006428:	10000226 	beq	r2,zero,4006434 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
 400642c:	00800c04 	movi	r2,48
 4006430:	00000b06 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4006434:	0005883a 	mov	r2,zero
 4006438:	00000906 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
 400643c:	e0bffd17 	ldw	r2,-12(fp)
 4006440:	10800317 	ldw	r2,12(r2)
 4006444:	1080004c 	andi	r2,r2,1
 4006448:	10000226 	beq	r2,zero,4006454 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
 400644c:	00800b84 	movi	r2,46
 4006450:	00000306 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4006454:	0005883a 	mov	r2,zero
 4006458:	00000106 	br	4006460 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
 400645c:	0005883a 	mov	r2,zero
}
 4006460:	e037883a 	mov	sp,fp
 4006464:	dfc00117 	ldw	ra,4(sp)
 4006468:	df000017 	ldw	fp,0(sp)
 400646c:	dec00204 	addi	sp,sp,8
 4006470:	f800283a 	ret

04006474 <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
 4006474:	defffd04 	addi	sp,sp,-12
 4006478:	df000215 	stw	fp,8(sp)
 400647c:	df000204 	addi	fp,sp,8
 4006480:	e13ffe15 	stw	r4,-8(fp)
 4006484:	e17fff15 	stw	r5,-4(fp)
        };
 4006488:	0001883a 	nop
 400648c:	e037883a 	mov	sp,fp
 4006490:	df000017 	ldw	fp,0(sp)
 4006494:	dec00104 	addi	sp,sp,4
 4006498:	f800283a 	ret

0400649c <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 400649c:	defffd04 	addi	sp,sp,-12
 40064a0:	df000215 	stw	fp,8(sp)
 40064a4:	df000204 	addi	fp,sp,8
 40064a8:	e13ffe15 	stw	r4,-8(fp)
 40064ac:	e17fff15 	stw	r5,-4(fp)
        };
 40064b0:	0001883a 	nop
 40064b4:	e037883a 	mov	sp,fp
 40064b8:	df000017 	ldw	fp,0(sp)
 40064bc:	dec00104 	addi	sp,sp,4
 40064c0:	f800283a 	ret

040064c4 <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 40064c4:	defffd04 	addi	sp,sp,-12
 40064c8:	df000215 	stw	fp,8(sp)
 40064cc:	df000204 	addi	fp,sp,8
 40064d0:	e13ffe15 	stw	r4,-8(fp)
 40064d4:	e17fff15 	stw	r5,-4(fp)
        };
 40064d8:	0001883a 	nop
 40064dc:	e037883a 	mov	sp,fp
 40064e0:	df000017 	ldw	fp,0(sp)
 40064e4:	dec00104 	addi	sp,sp,4
 40064e8:	f800283a 	ret

040064ec <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 40064ec:	defffd04 	addi	sp,sp,-12
 40064f0:	df000215 	stw	fp,8(sp)
 40064f4:	df000204 	addi	fp,sp,8
 40064f8:	e13ffe15 	stw	r4,-8(fp)
 40064fc:	e17fff15 	stw	r5,-4(fp)
        };
 4006500:	0001883a 	nop
 4006504:	e037883a 	mov	sp,fp
 4006508:	df000017 	ldw	fp,0(sp)
 400650c:	dec00104 	addi	sp,sp,4
 4006510:	f800283a 	ret

04006514 <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 4006514:	defffd04 	addi	sp,sp,-12
 4006518:	df000215 	stw	fp,8(sp)
 400651c:	df000204 	addi	fp,sp,8
 4006520:	e13ffe15 	stw	r4,-8(fp)
 4006524:	e17fff15 	stw	r5,-4(fp)
        };
 4006528:	0001883a 	nop
 400652c:	e037883a 	mov	sp,fp
 4006530:	df000017 	ldw	fp,0(sp)
 4006534:	dec00104 	addi	sp,sp,4
 4006538:	f800283a 	ret

0400653c <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 400653c:	defffd04 	addi	sp,sp,-12
 4006540:	df000215 	stw	fp,8(sp)
 4006544:	df000204 	addi	fp,sp,8
 4006548:	e13ffe15 	stw	r4,-8(fp)
 400654c:	e17fff15 	stw	r5,-4(fp)
        };
 4006550:	0001883a 	nop
 4006554:	e037883a 	mov	sp,fp
 4006558:	df000017 	ldw	fp,0(sp)
 400655c:	dec00104 	addi	sp,sp,4
 4006560:	f800283a 	ret

04006564 <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 4006564:	defffd04 	addi	sp,sp,-12
 4006568:	df000215 	stw	fp,8(sp)
 400656c:	df000204 	addi	fp,sp,8
 4006570:	e13ffe15 	stw	r4,-8(fp)
 4006574:	e17fff15 	stw	r5,-4(fp)
        };
 4006578:	0001883a 	nop
 400657c:	e037883a 	mov	sp,fp
 4006580:	df000017 	ldw	fp,0(sp)
 4006584:	dec00104 	addi	sp,sp,4
 4006588:	f800283a 	ret

0400658c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
 400658c:	defff704 	addi	sp,sp,-36
 4006590:	dfc00815 	stw	ra,32(sp)
 4006594:	df000715 	stw	fp,28(sp)
 4006598:	df000704 	addi	fp,sp,28
 400659c:	e13ffd15 	stw	r4,-12(fp)
 40065a0:	e17ffe15 	stw	r5,-8(fp)
 40065a4:	3005883a 	mov	r2,r6
 40065a8:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
 40065ac:	e0bffd17 	ldw	r2,-12(fp)
 40065b0:	10800303 	ldbu	r2,12(r2)
 40065b4:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
 40065b8:	e0bfff03 	ldbu	r2,-4(fp)
 40065bc:	10c011e0 	cmpeqi	r3,r2,71
 40065c0:	1800271e 	bne	r3,zero,4006660 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
 40065c4:	10c014e0 	cmpeqi	r3,r2,83
 40065c8:	1800031e 	bne	r3,zero,40065d8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
 40065cc:	10800e60 	cmpeqi	r2,r2,57
 40065d0:	1000111e 	bne	r2,zero,4006618 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
 40065d4:	00003506 	br	40066ac <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
 40065d8:	e0bffd17 	ldw	r2,-12(fp)
 40065dc:	10800317 	ldw	r2,12(r2)
 40065e0:	1080004c 	andi	r2,r2,1
 40065e4:	0084303a 	nor	r2,zero,r2
 40065e8:	1080004c 	andi	r2,r2,1
 40065ec:	1007883a 	mov	r3,r2
 40065f0:	e0bffd17 	ldw	r2,-12(fp)
 40065f4:	1940004c 	andi	r5,r3,1
 40065f8:	11000303 	ldbu	r4,12(r2)
 40065fc:	00ffff84 	movi	r3,-2
 4006600:	20c6703a 	and	r3,r4,r3
 4006604:	1809883a 	mov	r4,r3
 4006608:	2807883a 	mov	r3,r5
 400660c:	20c6b03a 	or	r3,r4,r3
 4006610:	10c00305 	stb	r3,12(r2)
                                break;
 4006614:	00002506 	br	40066ac <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
 4006618:	e0bffd17 	ldw	r2,-12(fp)
 400661c:	10800317 	ldw	r2,12(r2)
 4006620:	1004d07a 	srli	r2,r2,1
 4006624:	1080004c 	andi	r2,r2,1
 4006628:	0084303a 	nor	r2,zero,r2
 400662c:	1080004c 	andi	r2,r2,1
 4006630:	1007883a 	mov	r3,r2
 4006634:	e0bffd17 	ldw	r2,-12(fp)
 4006638:	18c0004c 	andi	r3,r3,1
 400663c:	18cb883a 	add	r5,r3,r3
 4006640:	11000303 	ldbu	r4,12(r2)
 4006644:	00ffff44 	movi	r3,-3
 4006648:	20c6703a 	and	r3,r4,r3
 400664c:	1809883a 	mov	r4,r3
 4006650:	2807883a 	mov	r3,r5
 4006654:	20c6b03a 	or	r3,r4,r3
 4006658:	10c00305 	stb	r3,12(r2)
                                break;
 400665c:	00001306 	br	40066ac <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
 4006660:	e0bffd17 	ldw	r2,-12(fp)
 4006664:	10800317 	ldw	r2,12(r2)
 4006668:	1004d0ba 	srli	r2,r2,2
 400666c:	1080004c 	andi	r2,r2,1
 4006670:	0084303a 	nor	r2,zero,r2
 4006674:	1080004c 	andi	r2,r2,1
 4006678:	1007883a 	mov	r3,r2
 400667c:	e0bffd17 	ldw	r2,-12(fp)
 4006680:	18c0004c 	andi	r3,r3,1
 4006684:	18c7883a 	add	r3,r3,r3
 4006688:	18cb883a 	add	r5,r3,r3
 400668c:	11000303 	ldbu	r4,12(r2)
 4006690:	00fffec4 	movi	r3,-5
 4006694:	20c6703a 	and	r3,r4,r3
 4006698:	1809883a 	mov	r4,r3
 400669c:	2807883a 	mov	r3,r5
 40066a0:	20c6b03a 	or	r3,r4,r3
 40066a4:	10c00305 	stb	r3,12(r2)
                                break;
 40066a8:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
 40066ac:	e0bffd17 	ldw	r2,-12(fp)
 40066b0:	10800303 	ldbu	r2,12(r2)
 40066b4:	10c03fcc 	andi	r3,r2,255
 40066b8:	e0bffc03 	ldbu	r2,-16(fp)
 40066bc:	18801026 	beq	r3,r2,4006700 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
 40066c0:	e0bffe17 	ldw	r2,-8(fp)
 40066c4:	10000e26 	beq	r2,zero,4006700 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
 40066c8:	e0bffd17 	ldw	r2,-12(fp)
 40066cc:	10800303 	ldbu	r2,12(r2)
 40066d0:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
 40066d4:	e0bffc44 	addi	r2,fp,-15
 40066d8:	d8800215 	stw	r2,8(sp)
 40066dc:	00800044 	movi	r2,1
 40066e0:	d8800115 	stw	r2,4(sp)
 40066e4:	d8000015 	stw	zero,0(sp)
 40066e8:	01c00084 	movi	r7,2
 40066ec:	000d883a 	mov	r6,zero
 40066f0:	000b883a 	mov	r5,zero
 40066f4:	e13ffe17 	ldw	r4,-8(fp)
 40066f8:	4008df00 	call	4008df0 <_ZN6USBHID9SetReportEhhhhtPh>
 40066fc:	00000106 	br	4006704 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
 4006700:	0005883a 	mov	r2,zero
        };
 4006704:	e037883a 	mov	sp,fp
 4006708:	dfc00117 	ldw	ra,4(sp)
 400670c:	df000017 	ldw	fp,0(sp)
 4006710:	dec00204 	addi	sp,sp,8
 4006714:	f800283a 	ret

04006718 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
 4006718:	defffc04 	addi	sp,sp,-16
 400671c:	df000315 	stw	fp,12(sp)
 4006720:	df000304 	addi	fp,sp,12
 4006724:	e13ffd15 	stw	r4,-12(fp)
 4006728:	2807883a 	mov	r3,r5
 400672c:	3005883a 	mov	r2,r6
 4006730:	e0fffe05 	stb	r3,-8(fp)
 4006734:	e0bfff05 	stb	r2,-4(fp)
        };
 4006738:	0001883a 	nop
 400673c:	e037883a 	mov	sp,fp
 4006740:	df000017 	ldw	fp,0(sp)
 4006744:	dec00104 	addi	sp,sp,4
 4006748:	f800283a 	ret

0400674c <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
 400674c:	defffc04 	addi	sp,sp,-16
 4006750:	df000315 	stw	fp,12(sp)
 4006754:	df000304 	addi	fp,sp,12
 4006758:	e13ffd15 	stw	r4,-12(fp)
 400675c:	2807883a 	mov	r3,r5
 4006760:	3005883a 	mov	r2,r6
 4006764:	e0fffe05 	stb	r3,-8(fp)
 4006768:	e0bfff05 	stb	r2,-4(fp)
        };
 400676c:	0001883a 	nop
 4006770:	e037883a 	mov	sp,fp
 4006774:	df000017 	ldw	fp,0(sp)
 4006778:	dec00104 	addi	sp,sp,4
 400677c:	f800283a 	ret

04006780 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
 4006780:	defffc04 	addi	sp,sp,-16
 4006784:	df000315 	stw	fp,12(sp)
 4006788:	df000304 	addi	fp,sp,12
 400678c:	e13ffd15 	stw	r4,-12(fp)
 4006790:	2807883a 	mov	r3,r5
 4006794:	3005883a 	mov	r2,r6
 4006798:	e0fffe05 	stb	r3,-8(fp)
 400679c:	e0bfff05 	stb	r2,-4(fp)
        };
 40067a0:	0001883a 	nop
 40067a4:	e037883a 	mov	sp,fp
 40067a8:	df000017 	ldw	fp,0(sp)
 40067ac:	dec00104 	addi	sp,sp,4
 40067b0:	f800283a 	ret

040067b4 <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
 40067b4:	defffe04 	addi	sp,sp,-8
 40067b8:	df000115 	stw	fp,4(sp)
 40067bc:	df000104 	addi	fp,sp,4
 40067c0:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
 40067c4:	008100b4 	movhi	r2,1026
 40067c8:	108aef84 	addi	r2,r2,11198
        };
 40067cc:	e037883a 	mov	sp,fp
 40067d0:	df000017 	ldw	fp,0(sp)
 40067d4:	dec00104 	addi	sp,sp,4
 40067d8:	f800283a 	ret

040067dc <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
 40067dc:	defffe04 	addi	sp,sp,-8
 40067e0:	df000115 	stw	fp,4(sp)
 40067e4:	df000104 	addi	fp,sp,4
 40067e8:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
 40067ec:	008100b4 	movhi	r2,1026
 40067f0:	108af204 	addi	r2,r2,11208
        };
 40067f4:	e037883a 	mov	sp,fp
 40067f8:	df000017 	ldw	fp,0(sp)
 40067fc:	dec00104 	addi	sp,sp,4
 4006800:	f800283a 	ret

04006804 <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
 4006804:	defffe04 	addi	sp,sp,-8
 4006808:	df000115 	stw	fp,4(sp)
 400680c:	df000104 	addi	fp,sp,4
 4006810:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
 4006814:	008100b4 	movhi	r2,1026
 4006818:	108af504 	addi	r2,r2,11220
        };
 400681c:	e037883a 	mov	sp,fp
 4006820:	df000017 	ldw	fp,0(sp)
 4006824:	dec00104 	addi	sp,sp,4
 4006828:	f800283a 	ret

0400682c <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
 400682c:	defffe04 	addi	sp,sp,-8
 4006830:	df000115 	stw	fp,4(sp)
 4006834:	df000104 	addi	fp,sp,4
 4006838:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
 400683c:	d0a1e584 	addi	r2,gp,-30826
        };
 4006840:	e037883a 	mov	sp,fp
 4006844:	df000017 	ldw	fp,0(sp)
 4006848:	dec00104 	addi	sp,sp,4
 400684c:	f800283a 	ret

04006850 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
 4006850:	defffc04 	addi	sp,sp,-16
 4006854:	dfc00315 	stw	ra,12(sp)
 4006858:	df000215 	stw	fp,8(sp)
 400685c:	df000204 	addi	fp,sp,8
 4006860:	2005883a 	mov	r2,r4
 4006864:	e17fff15 	stw	r5,-4(fp)
 4006868:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
 400686c:	d0e1ea17 	ldw	r3,-30808(gp)
 4006870:	e0bfff17 	ldw	r2,-4(fp)
 4006874:	18800416 	blt	r3,r2,4006888 <_Z9E_Notifycci+0x38>
        printf("%c", c);
 4006878:	e0bffe07 	ldb	r2,-8(fp)
 400687c:	1009883a 	mov	r4,r2
 4006880:	400f3f00 	call	400f3f0 <putchar>
 4006884:	00000106 	br	400688c <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 4006888:	0001883a 	nop
        printf("%c", c);
}
 400688c:	e037883a 	mov	sp,fp
 4006890:	dfc00117 	ldw	ra,4(sp)
 4006894:	df000017 	ldw	fp,0(sp)
 4006898:	dec00204 	addi	sp,sp,8
 400689c:	f800283a 	ret

040068a0 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
 40068a0:	defffb04 	addi	sp,sp,-20
 40068a4:	dfc00415 	stw	ra,16(sp)
 40068a8:	df000315 	stw	fp,12(sp)
 40068ac:	df000304 	addi	fp,sp,12
 40068b0:	e13ffe15 	stw	r4,-8(fp)
 40068b4:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
 40068b8:	d0e1ea17 	ldw	r3,-30808(gp)
 40068bc:	e0bfff17 	ldw	r2,-4(fp)
 40068c0:	18801016 	blt	r3,r2,4006904 <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
 40068c4:	e0bffe17 	ldw	r2,-8(fp)
 40068c8:	10001026 	beq	r2,zero,400690c <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
 40068cc:	e0bffe17 	ldw	r2,-8(fp)
 40068d0:	10c00044 	addi	r3,r2,1
 40068d4:	e0fffe15 	stw	r3,-8(fp)
 40068d8:	10800003 	ldbu	r2,0(r2)
 40068dc:	e0bffd05 	stb	r2,-12(fp)
 40068e0:	e0bffd07 	ldb	r2,-12(fp)
 40068e4:	1004c03a 	cmpne	r2,r2,zero
 40068e8:	10803fcc 	andi	r2,r2,255
 40068ec:	10000826 	beq	r2,zero,4006910 <_Z8E_NotifyPKci+0x70>
 40068f0:	e0bffd07 	ldb	r2,-12(fp)
 40068f4:	e17fff17 	ldw	r5,-4(fp)
 40068f8:	1009883a 	mov	r4,r2
 40068fc:	40068500 	call	4006850 <_Z9E_Notifycci>
 4006900:	003ff206 	br	40068cc <__alt_mem_onchip_memory2_0+0xfc00562c>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 4006904:	0001883a 	nop
 4006908:	00000106 	br	4006910 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
 400690c:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
 4006910:	e037883a 	mov	sp,fp
 4006914:	dfc00117 	ldw	ra,4(sp)
 4006918:	df000017 	ldw	fp,0(sp)
 400691c:	dec00204 	addi	sp,sp,8
 4006920:	f800283a 	ret

04006924 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
 4006924:	defffb04 	addi	sp,sp,-20
 4006928:	dfc00415 	stw	ra,16(sp)
 400692c:	df000315 	stw	fp,12(sp)
 4006930:	df000304 	addi	fp,sp,12
 4006934:	e13ffe15 	stw	r4,-8(fp)
 4006938:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
 400693c:	d0e1ea17 	ldw	r3,-30808(gp)
 4006940:	e0bfff17 	ldw	r2,-4(fp)
 4006944:	18801016 	blt	r3,r2,4006988 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
 4006948:	e0bffe17 	ldw	r2,-8(fp)
 400694c:	10001026 	beq	r2,zero,4006990 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
 4006950:	e0bffe17 	ldw	r2,-8(fp)
 4006954:	10c00044 	addi	r3,r2,1
 4006958:	e0fffe15 	stw	r3,-8(fp)
 400695c:	10800003 	ldbu	r2,0(r2)
 4006960:	e0bffd05 	stb	r2,-12(fp)
 4006964:	e0bffd07 	ldb	r2,-12(fp)
 4006968:	1004c03a 	cmpne	r2,r2,zero
 400696c:	10803fcc 	andi	r2,r2,255
 4006970:	10000826 	beq	r2,zero,4006994 <_Z11E_NotifyStrPKci+0x70>
 4006974:	e0bffd07 	ldb	r2,-12(fp)
 4006978:	e17fff17 	ldw	r5,-4(fp)
 400697c:	1009883a 	mov	r4,r2
 4006980:	40068500 	call	4006850 <_Z9E_Notifycci>
 4006984:	003ff206 	br	4006950 <__alt_mem_onchip_memory2_0+0xfc0056b0>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 4006988:	0001883a 	nop
 400698c:	00000106 	br	4006994 <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
 4006990:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
 4006994:	e037883a 	mov	sp,fp
 4006998:	dfc00117 	ldw	ra,4(sp)
 400699c:	df000017 	ldw	fp,0(sp)
 40069a0:	dec00204 	addi	sp,sp,8
 40069a4:	f800283a 	ret

040069a8 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
 40069a8:	defffd04 	addi	sp,sp,-12
 40069ac:	df000215 	stw	fp,8(sp)
 40069b0:	df000204 	addi	fp,sp,8
 40069b4:	2005883a 	mov	r2,r4
 40069b8:	e17fff15 	stw	r5,-4(fp)
 40069bc:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
 40069c0:	e037883a 	mov	sp,fp
 40069c4:	df000017 	ldw	fp,0(sp)
 40069c8:	dec00104 	addi	sp,sp,4
 40069cc:	f800283a 	ret

040069d0 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
 40069d0:	defffc04 	addi	sp,sp,-16
 40069d4:	df000315 	stw	fp,12(sp)
 40069d8:	df000304 	addi	fp,sp,12
 40069dc:	e13ffd15 	stw	r4,-12(fp)
 40069e0:	e17ffe15 	stw	r5,-8(fp)
 40069e4:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
 40069e8:	e037883a 	mov	sp,fp
 40069ec:	df000017 	ldw	fp,0(sp)
 40069f0:	dec00104 	addi	sp,sp,4
 40069f4:	f800283a 	ret

040069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 40069f8:	defffc04 	addi	sp,sp,-16
 40069fc:	df000315 	stw	fp,12(sp)
 4006a00:	df000304 	addi	fp,sp,12
 4006a04:	e13ffd15 	stw	r4,-12(fp)
 4006a08:	e17ffe15 	stw	r5,-8(fp)
 4006a0c:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
 4006a10:	e0bffd17 	ldw	r2,-12(fp)
 4006a14:	10800017 	ldw	r2,0(r2)
 4006a18:	1000021e 	bne	r2,zero,4006a24 <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 4006a1c:	0005883a 	mov	r2,zero
 4006a20:	00003306 	br	4006af0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 4006a24:	e0bffd17 	ldw	r2,-12(fp)
 4006a28:	10800103 	ldbu	r2,4(r2)
 4006a2c:	10803fcc 	andi	r2,r2,255
 4006a30:	10002426 	beq	r2,zero,4006ac4 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
 4006a34:	e0bfff17 	ldw	r2,-4(fp)
 4006a38:	1080000b 	ldhu	r2,0(r2)
 4006a3c:	10bfffcc 	andi	r2,r2,65535
 4006a40:	10002026 	beq	r2,zero,4006ac4 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
 4006a44:	e0bffd17 	ldw	r2,-12(fp)
 4006a48:	10800017 	ldw	r2,0(r2)
 4006a4c:	e0fffd17 	ldw	r3,-12(fp)
 4006a50:	18c00143 	ldbu	r3,5(r3)
 4006a54:	19003fcc 	andi	r4,r3,255
 4006a58:	e0fffd17 	ldw	r3,-12(fp)
 4006a5c:	18c00103 	ldbu	r3,4(r3)
 4006a60:	18c03fcc 	andi	r3,r3,255
 4006a64:	20c7c83a 	sub	r3,r4,r3
 4006a68:	10c5883a 	add	r2,r2,r3
 4006a6c:	e0fffe17 	ldw	r3,-8(fp)
 4006a70:	18c00017 	ldw	r3,0(r3)
 4006a74:	18c00003 	ldbu	r3,0(r3)
 4006a78:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 4006a7c:	e0bffd17 	ldw	r2,-12(fp)
 4006a80:	10800103 	ldbu	r2,4(r2)
 4006a84:	10bfffc4 	addi	r2,r2,-1
 4006a88:	1007883a 	mov	r3,r2
 4006a8c:	e0bffd17 	ldw	r2,-12(fp)
 4006a90:	10c00105 	stb	r3,4(r2)
 4006a94:	e0bfff17 	ldw	r2,-4(fp)
 4006a98:	1080000b 	ldhu	r2,0(r2)
 4006a9c:	10bfffc4 	addi	r2,r2,-1
 4006aa0:	1007883a 	mov	r3,r2
 4006aa4:	e0bfff17 	ldw	r2,-4(fp)
 4006aa8:	10c0000d 	sth	r3,0(r2)
 4006aac:	e0bffe17 	ldw	r2,-8(fp)
 4006ab0:	10800017 	ldw	r2,0(r2)
 4006ab4:	10c00044 	addi	r3,r2,1
 4006ab8:	e0bffe17 	ldw	r2,-8(fp)
 4006abc:	10c00015 	stw	r3,0(r2)
 4006ac0:	003fd806 	br	4006a24 <__alt_mem_onchip_memory2_0+0xfc005784>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
 4006ac4:	e0bffd17 	ldw	r2,-12(fp)
 4006ac8:	10800103 	ldbu	r2,4(r2)
 4006acc:	10803fcc 	andi	r2,r2,255
 4006ad0:	10000226 	beq	r2,zero,4006adc <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
 4006ad4:	0005883a 	mov	r2,zero
 4006ad8:	00000506 	br	4006af0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
 4006adc:	e0bffd17 	ldw	r2,-12(fp)
 4006ae0:	10c00143 	ldbu	r3,5(r2)
 4006ae4:	e0bffd17 	ldw	r2,-12(fp)
 4006ae8:	10c00105 	stb	r3,4(r2)
        return true;
 4006aec:	00800044 	movi	r2,1
}
 4006af0:	e037883a 	mov	sp,fp
 4006af4:	df000017 	ldw	fp,0(sp)
 4006af8:	dec00104 	addi	sp,sp,4
 4006afc:	f800283a 	ret

04006b00 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
 4006b00:	defffa04 	addi	sp,sp,-24
 4006b04:	dfc00515 	stw	ra,20(sp)
 4006b08:	df000415 	stw	fp,16(sp)
 4006b0c:	df000404 	addi	fp,sp,16
 4006b10:	e13ffc15 	stw	r4,-16(fp)
 4006b14:	e17ffd15 	stw	r5,-12(fp)
 4006b18:	e1bffe15 	stw	r6,-8(fp)
 4006b1c:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
 4006b20:	e0bffc17 	ldw	r2,-16(fp)
 4006b24:	10800003 	ldbu	r2,0(r2)
 4006b28:	10803fcc 	andi	r2,r2,255
 4006b2c:	10c00060 	cmpeqi	r3,r2,1
 4006b30:	1800181e 	bne	r3,zero,4006b94 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
 4006b34:	10c00088 	cmpgei	r3,r2,2
 4006b38:	1800021e 	bne	r3,zero,4006b44 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
 4006b3c:	10000626 	beq	r2,zero,4006b58 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
 4006b40:	00007e06 	br	4006d3c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
 4006b44:	10c000a0 	cmpeqi	r3,r2,2
 4006b48:	18004a1e 	bne	r3,zero,4006c74 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
 4006b4c:	108000e0 	cmpeqi	r2,r2,3
 4006b50:	1000571e 	bne	r2,zero,4006cb0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
 4006b54:	00007906 	br	4006d3c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
 4006b58:	e0bffc17 	ldw	r2,-16(fp)
 4006b5c:	10800417 	ldw	r2,16(r2)
 4006b60:	e0fffc17 	ldw	r3,-16(fp)
 4006b64:	18c00303 	ldbu	r3,12(r3)
 4006b68:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
 4006b6c:	e0bffc17 	ldw	r2,-16(fp)
 4006b70:	10c00504 	addi	r3,r2,20
 4006b74:	e0bffc17 	ldw	r2,-16(fp)
 4006b78:	10800417 	ldw	r2,16(r2)
 4006b7c:	100b883a 	mov	r5,r2
 4006b80:	1809883a 	mov	r4,r3
 4006b84:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
 4006b88:	e0bffc17 	ldw	r2,-16(fp)
 4006b8c:	00c00044 	movi	r3,1
 4006b90:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
 4006b94:	e0bffc17 	ldw	r2,-16(fp)
 4006b98:	10800504 	addi	r2,r2,20
 4006b9c:	e1bffe17 	ldw	r6,-8(fp)
 4006ba0:	e17ffd17 	ldw	r5,-12(fp)
 4006ba4:	1009883a 	mov	r4,r2
 4006ba8:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4006bac:	1080005c 	xori	r2,r2,1
 4006bb0:	10803fcc 	andi	r2,r2,255
 4006bb4:	10000226 	beq	r2,zero,4006bc0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
 4006bb8:	0005883a 	mov	r2,zero
 4006bbc:	00006006 	br	4006d40 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
 4006bc0:	e0bffc17 	ldw	r2,-16(fp)
 4006bc4:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
 4006bc8:	e0bffc17 	ldw	r2,-16(fp)
 4006bcc:	10800417 	ldw	r2,16(r2)
 4006bd0:	10800003 	ldbu	r2,0(r2)
 4006bd4:	10803fcc 	andi	r2,r2,255
 4006bd8:	10800130 	cmpltui	r2,r2,4
 4006bdc:	10000e1e 	bne	r2,zero,4006c18 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
 4006be0:	e0bffc17 	ldw	r2,-16(fp)
 4006be4:	10800417 	ldw	r2,16(r2)
 4006be8:	10c00043 	ldbu	r3,1(r2)
 4006bec:	11000083 	ldbu	r4,2(r2)
 4006bf0:	2008923a 	slli	r4,r4,8
 4006bf4:	20c6b03a 	or	r3,r4,r3
 4006bf8:	110000c3 	ldbu	r4,3(r2)
 4006bfc:	2008943a 	slli	r4,r4,16
 4006c00:	20c6b03a 	or	r3,r4,r3
 4006c04:	10800103 	ldbu	r2,4(r2)
 4006c08:	1004963a 	slli	r2,r2,24
 4006c0c:	10c4b03a 	or	r2,r2,r3
 4006c10:	10800017 	ldw	r2,0(r2)
 4006c14:	00000e06 	br	4006c50 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
 4006c18:	e0bffc17 	ldw	r2,-16(fp)
 4006c1c:	10800417 	ldw	r2,16(r2)
 4006c20:	10c00043 	ldbu	r3,1(r2)
 4006c24:	11000083 	ldbu	r4,2(r2)
 4006c28:	2008923a 	slli	r4,r4,8
 4006c2c:	20c6b03a 	or	r3,r4,r3
 4006c30:	110000c3 	ldbu	r4,3(r2)
 4006c34:	2008943a 	slli	r4,r4,16
 4006c38:	20c6b03a 	or	r3,r4,r3
 4006c3c:	10800103 	ldbu	r2,4(r2)
 4006c40:	1004963a 	slli	r2,r2,24
 4006c44:	10c4b03a 	or	r2,r2,r3
 4006c48:	1080000b 	ldhu	r2,0(r2)
 4006c4c:	10bfffcc 	andi	r2,r2,65535
 4006c50:	e0fffc17 	ldw	r3,-16(fp)
 4006c54:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
 4006c58:	e0bffc17 	ldw	r2,-16(fp)
 4006c5c:	10c00117 	ldw	r3,4(r2)
 4006c60:	e0bffc17 	ldw	r2,-16(fp)
 4006c64:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
 4006c68:	e0bffc17 	ldw	r2,-16(fp)
 4006c6c:	00c00084 	movi	r3,2
 4006c70:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
 4006c74:	e0bffc17 	ldw	r2,-16(fp)
 4006c78:	10800417 	ldw	r2,16(r2)
 4006c7c:	e0fffc17 	ldw	r3,-16(fp)
 4006c80:	18c00343 	ldbu	r3,13(r3)
 4006c84:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
 4006c88:	e0bffc17 	ldw	r2,-16(fp)
 4006c8c:	10c00504 	addi	r3,r2,20
 4006c90:	e0bffc17 	ldw	r2,-16(fp)
 4006c94:	10800417 	ldw	r2,16(r2)
 4006c98:	100b883a 	mov	r5,r2
 4006c9c:	1809883a 	mov	r4,r3
 4006ca0:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
 4006ca4:	e0bffc17 	ldw	r2,-16(fp)
 4006ca8:	00c000c4 	movi	r3,3
 4006cac:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
 4006cb0:	e0bffc17 	ldw	r2,-16(fp)
 4006cb4:	10800217 	ldw	r2,8(r2)
 4006cb8:	10001e26 	beq	r2,zero,4006d34 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
 4006cbc:	e0bffc17 	ldw	r2,-16(fp)
 4006cc0:	10800504 	addi	r2,r2,20
 4006cc4:	e1bffe17 	ldw	r6,-8(fp)
 4006cc8:	e17ffd17 	ldw	r5,-12(fp)
 4006ccc:	1009883a 	mov	r4,r2
 4006cd0:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4006cd4:	1080005c 	xori	r2,r2,1
 4006cd8:	10803fcc 	andi	r2,r2,255
 4006cdc:	10000226 	beq	r2,zero,4006ce8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
 4006ce0:	0005883a 	mov	r2,zero
 4006ce4:	00001606 	br	4006d40 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
 4006ce8:	e0bfff17 	ldw	r2,-4(fp)
 4006cec:	10000b26 	beq	r2,zero,4006d1c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
 4006cf0:	e0bffc17 	ldw	r2,-16(fp)
 4006cf4:	11000417 	ldw	r4,16(r2)
 4006cf8:	e0bffc17 	ldw	r2,-16(fp)
 4006cfc:	10c00117 	ldw	r3,4(r2)
 4006d00:	e0bffc17 	ldw	r2,-16(fp)
 4006d04:	10800217 	ldw	r2,8(r2)
 4006d08:	1887c83a 	sub	r3,r3,r2
 4006d0c:	e0bfff17 	ldw	r2,-4(fp)
 4006d10:	e1800217 	ldw	r6,8(fp)
 4006d14:	180b883a 	mov	r5,r3
 4006d18:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
 4006d1c:	e0bffc17 	ldw	r2,-16(fp)
 4006d20:	10800217 	ldw	r2,8(r2)
 4006d24:	10ffffc4 	addi	r3,r2,-1
 4006d28:	e0bffc17 	ldw	r2,-16(fp)
 4006d2c:	10c00215 	stw	r3,8(r2)
 4006d30:	003fdf06 	br	4006cb0 <__alt_mem_onchip_memory2_0+0xfc005a10>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
 4006d34:	e0bffc17 	ldw	r2,-16(fp)
 4006d38:	10000005 	stb	zero,0(r2)
        }
        return true;
 4006d3c:	00800044 	movi	r2,1
}
 4006d40:	e037883a 	mov	sp,fp
 4006d44:	dfc00117 	ldw	ra,4(sp)
 4006d48:	df000017 	ldw	fp,0(sp)
 4006d4c:	dec00204 	addi	sp,sp,8
 4006d50:	f800283a 	ret

04006d54 <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
 4006d54:	defffb04 	addi	sp,sp,-20
 4006d58:	dfc00415 	stw	ra,16(sp)
 4006d5c:	df000315 	stw	fp,12(sp)
 4006d60:	df000304 	addi	fp,sp,12
 4006d64:	e13ffe15 	stw	r4,-8(fp)
 4006d68:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
 4006d6c:	e0bffe17 	ldw	r2,-8(fp)
 4006d70:	1009883a 	mov	r4,r2
 4006d74:	40055d80 	call	40055d8 <_ZN15USBDeviceConfigC1Ev>
 4006d78:	e0bffe17 	ldw	r2,-8(fp)
 4006d7c:	10800104 	addi	r2,r2,4
 4006d80:	1009883a 	mov	r4,r2
 4006d84:	4008cf00 	call	4008cf0 <_ZN21UsbMidiConfigXtracterC1Ev>
 4006d88:	008100b4 	movhi	r2,1026
 4006d8c:	108b2d04 	addi	r2,r2,11444
 4006d90:	e0fffe17 	ldw	r3,-8(fp)
 4006d94:	18800015 	stw	r2,0(r3)
 4006d98:	008100b4 	movhi	r2,1026
 4006d9c:	108b3904 	addi	r2,r2,11492
 4006da0:	e0fffe17 	ldw	r3,-8(fp)
 4006da4:	18800115 	stw	r2,4(r3)
 4006da8:	e0bffe17 	ldw	r2,-8(fp)
 4006dac:	e0ffff17 	ldw	r3,-4(fp)
 4006db0:	10c00215 	stw	r3,8(r2)
 4006db4:	e0bffe17 	ldw	r2,-8(fp)
 4006db8:	10000305 	stb	zero,12(r2)
 4006dbc:	e0bffe17 	ldw	r2,-8(fp)
 4006dc0:	10000345 	stb	zero,13(r2)
 4006dc4:	e0bffe17 	ldw	r2,-8(fp)
 4006dc8:	10001705 	stb	zero,92(r2)
 4006dcc:	e0bffe17 	ldw	r2,-8(fp)
 4006dd0:	10001815 	stw	zero,96(r2)
 4006dd4:	e0bffe17 	ldw	r2,-8(fp)
 4006dd8:	10001915 	stw	zero,100(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
 4006ddc:	e03ffd05 	stb	zero,-12(fp)
 4006de0:	e0bffd03 	ldbu	r2,-12(fp)
 4006de4:	108000e8 	cmpgeui	r2,r2,3
 4006de8:	10002d1e 	bne	r2,zero,4006ea0 <_ZN9USBH_MIDIC1EP3USB+0x14c>
                epInfo[i].epAddr      = 0;
 4006dec:	e0fffd03 	ldbu	r3,-12(fp)
 4006df0:	e13ffe17 	ldw	r4,-8(fp)
 4006df4:	1805883a 	mov	r2,r3
 4006df8:	1085883a 	add	r2,r2,r2
 4006dfc:	10c5883a 	add	r2,r2,r3
 4006e00:	2085883a 	add	r2,r4,r2
 4006e04:	108004c4 	addi	r2,r2,19
 4006e08:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
 4006e0c:	e13ffd03 	ldbu	r4,-12(fp)
 4006e10:	e0bffd03 	ldbu	r2,-12(fp)
 4006e14:	10000226 	beq	r2,zero,4006e20 <_ZN9USBH_MIDIC1EP3USB+0xcc>
 4006e18:	0007883a 	mov	r3,zero
 4006e1c:	00000106 	br	4006e24 <_ZN9USBH_MIDIC1EP3USB+0xd0>
 4006e20:	00c00204 	movi	r3,8
 4006e24:	e17ffe17 	ldw	r5,-8(fp)
 4006e28:	2005883a 	mov	r2,r4
 4006e2c:	1085883a 	add	r2,r2,r2
 4006e30:	1105883a 	add	r2,r2,r4
 4006e34:	2885883a 	add	r2,r5,r2
 4006e38:	10800504 	addi	r2,r2,20
 4006e3c:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 4006e40:	e13ffd03 	ldbu	r4,-12(fp)
 4006e44:	e0bffd03 	ldbu	r2,-12(fp)
 4006e48:	10000226 	beq	r2,zero,4006e54 <_ZN9USBH_MIDIC1EP3USB+0x100>
 4006e4c:	00c00044 	movi	r3,1
 4006e50:	00000106 	br	4006e58 <_ZN9USBH_MIDIC1EP3USB+0x104>
 4006e54:	00c003c4 	movi	r3,15
 4006e58:	e17ffe17 	ldw	r5,-8(fp)
 4006e5c:	2005883a 	mov	r2,r4
 4006e60:	1085883a 	add	r2,r2,r2
 4006e64:	1105883a 	add	r2,r2,r4
 4006e68:	2885883a 	add	r2,r5,r2
 4006e6c:	10800404 	addi	r2,r2,16
 4006e70:	18c7883a 	add	r3,r3,r3
 4006e74:	18cb883a 	add	r5,r3,r3
 4006e78:	10c00143 	ldbu	r3,5(r2)
 4006e7c:	18c000cc 	andi	r3,r3,3
 4006e80:	1809883a 	mov	r4,r3
 4006e84:	2807883a 	mov	r3,r5
 4006e88:	20c6b03a 	or	r3,r4,r3
 4006e8c:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
 4006e90:	e0bffd03 	ldbu	r2,-12(fp)
 4006e94:	10800044 	addi	r2,r2,1
 4006e98:	e0bffd05 	stb	r2,-12(fp)
 4006e9c:	003fd006 	br	4006de0 <__alt_mem_onchip_memory2_0+0xfc005b40>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
 4006ea0:	e0bffe17 	ldw	r2,-8(fp)
 4006ea4:	10800217 	ldw	r2,8(r2)
 4006ea8:	10000626 	beq	r2,zero,4006ec4 <_ZN9USBH_MIDIC1EP3USB+0x170>
                pUsb->RegisterDeviceClass(this);
 4006eac:	e0bffe17 	ldw	r2,-8(fp)
 4006eb0:	10800217 	ldw	r2,8(r2)
 4006eb4:	e0fffe17 	ldw	r3,-8(fp)
 4006eb8:	180b883a 	mov	r5,r3
 4006ebc:	1009883a 	mov	r4,r2
 4006ec0:	400538c0 	call	400538c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
 4006ec4:	0001883a 	nop
 4006ec8:	e037883a 	mov	sp,fp
 4006ecc:	dfc00117 	ldw	ra,4(sp)
 4006ed0:	df000017 	ldw	fp,0(sp)
 4006ed4:	dec00204 	addi	sp,sp,8
 4006ed8:	f800283a 	ret

04006edc <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
 4006edc:	deffe004 	addi	sp,sp,-128
 4006ee0:	dfc01f15 	stw	ra,124(sp)
 4006ee4:	df001e15 	stw	fp,120(sp)
 4006ee8:	df001e04 	addi	fp,sp,120
 4006eec:	e13ffc15 	stw	r4,-16(fp)
 4006ef0:	2809883a 	mov	r4,r5
 4006ef4:	3007883a 	mov	r3,r6
 4006ef8:	3805883a 	mov	r2,r7
 4006efc:	e13ffd05 	stb	r4,-12(fp)
 4006f00:	e0fffe05 	stb	r3,-8(fp)
 4006f04:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 4006f08:	e0bfe944 	addi	r2,fp,-91
 4006f0c:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
 4006f10:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
 4006f14:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
 4006f18:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
 4006f1c:	00800044 	movi	r2,1
 4006f20:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
 4006f24:	00800044 	movi	r2,1
 4006f28:	e0bfe3c5 	stb	r2,-113(fp)
 4006f2c:	e0bfe3c3 	ldbu	r2,-113(fp)
 4006f30:	108000e8 	cmpgeui	r2,r2,3
 4006f34:	10001a1e 	bne	r2,zero,4006fa0 <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
 4006f38:	e0ffe3c3 	ldbu	r3,-113(fp)
 4006f3c:	e13ffc17 	ldw	r4,-16(fp)
 4006f40:	1805883a 	mov	r2,r3
 4006f44:	1085883a 	add	r2,r2,r2
 4006f48:	10c5883a 	add	r2,r2,r3
 4006f4c:	2085883a 	add	r2,r4,r2
 4006f50:	10800404 	addi	r2,r2,16
 4006f54:	11000143 	ldbu	r4,5(r2)
 4006f58:	00ffff84 	movi	r3,-2
 4006f5c:	20c6703a 	and	r3,r4,r3
 4006f60:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
 4006f64:	e0ffe3c3 	ldbu	r3,-113(fp)
 4006f68:	e13ffc17 	ldw	r4,-16(fp)
 4006f6c:	1805883a 	mov	r2,r3
 4006f70:	1085883a 	add	r2,r2,r2
 4006f74:	10c5883a 	add	r2,r2,r3
 4006f78:	2085883a 	add	r2,r4,r2
 4006f7c:	10800404 	addi	r2,r2,16
 4006f80:	11000143 	ldbu	r4,5(r2)
 4006f84:	00ffff44 	movi	r3,-3
 4006f88:	20c6703a 	and	r3,r4,r3
 4006f8c:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
 4006f90:	e0bfe3c3 	ldbu	r2,-113(fp)
 4006f94:	10800044 	addi	r2,r2,1
 4006f98:	e0bfe3c5 	stb	r2,-113(fp)
 4006f9c:	003fe306 	br	4006f2c <__alt_mem_onchip_memory2_0+0xfc005c8c>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
 4006fa0:	e0bffc17 	ldw	r2,-16(fp)
 4006fa4:	10800217 	ldw	r2,8(r2)
 4006fa8:	1009883a 	mov	r4,r2
 4006fac:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 4006fb0:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
 4006fb4:	e0bffc17 	ldw	r2,-16(fp)
 4006fb8:	10800303 	ldbu	r2,12(r2)
 4006fbc:	10803fcc 	andi	r2,r2,255
 4006fc0:	10000226 	beq	r2,zero,4006fcc <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 4006fc4:	00bff644 	movi	r2,-39
 4006fc8:	0001c706 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
 4006fcc:	e0bfe817 	ldw	r2,-96(fp)
 4006fd0:	10800017 	ldw	r2,0(r2)
 4006fd4:	10800017 	ldw	r2,0(r2)
 4006fd8:	e0fffc17 	ldw	r3,-16(fp)
 4006fdc:	18c00303 	ldbu	r3,12(r3)
 4006fe0:	18c03fcc 	andi	r3,r3,255
 4006fe4:	180b883a 	mov	r5,r3
 4006fe8:	e13fe817 	ldw	r4,-96(fp)
 4006fec:	103ee83a 	callr	r2
 4006ff0:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
 4006ff4:	e0bfe617 	ldw	r2,-104(fp)
 4006ff8:	1000021e 	bne	r2,zero,4007004 <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4006ffc:	00bff584 	movi	r2,-42
 4007000:	0001b906 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
 4007004:	e0bfe617 	ldw	r2,-104(fp)
 4007008:	10c00003 	ldbu	r3,0(r2)
 400700c:	11000043 	ldbu	r4,1(r2)
 4007010:	2008923a 	slli	r4,r4,8
 4007014:	20c6b03a 	or	r3,r4,r3
 4007018:	11000083 	ldbu	r4,2(r2)
 400701c:	2008943a 	slli	r4,r4,16
 4007020:	20c6b03a 	or	r3,r4,r3
 4007024:	108000c3 	ldbu	r2,3(r2)
 4007028:	1004963a 	slli	r2,r2,24
 400702c:	10c4b03a 	or	r2,r2,r3
 4007030:	1000021e 	bne	r2,zero,400703c <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
 4007034:	00bff5c4 	movi	r2,-41
 4007038:	0001ab06 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 400703c:	e0bfe617 	ldw	r2,-104(fp)
 4007040:	10c00003 	ldbu	r3,0(r2)
 4007044:	11000043 	ldbu	r4,1(r2)
 4007048:	2008923a 	slli	r4,r4,8
 400704c:	20c6b03a 	or	r3,r4,r3
 4007050:	11000083 	ldbu	r4,2(r2)
 4007054:	2008943a 	slli	r4,r4,16
 4007058:	20c6b03a 	or	r3,r4,r3
 400705c:	108000c3 	ldbu	r2,3(r2)
 4007060:	1004963a 	slli	r2,r2,24
 4007064:	10c4b03a 	or	r2,r2,r3
 4007068:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
 400706c:	e0bffc17 	ldw	r2,-16(fp)
 4007070:	10c004c4 	addi	r3,r2,19
 4007074:	e0bfe617 	ldw	r2,-104(fp)
 4007078:	19803fcc 	andi	r6,r3,255
 400707c:	11000003 	ldbu	r4,0(r2)
 4007080:	2008703a 	and	r4,r4,zero
 4007084:	200b883a 	mov	r5,r4
 4007088:	3009883a 	mov	r4,r6
 400708c:	2908b03a 	or	r4,r5,r4
 4007090:	11000005 	stb	r4,0(r2)
 4007094:	1808d23a 	srli	r4,r3,8
 4007098:	21803fcc 	andi	r6,r4,255
 400709c:	11000043 	ldbu	r4,1(r2)
 40070a0:	2008703a 	and	r4,r4,zero
 40070a4:	200b883a 	mov	r5,r4
 40070a8:	3009883a 	mov	r4,r6
 40070ac:	2908b03a 	or	r4,r5,r4
 40070b0:	11000045 	stb	r4,1(r2)
 40070b4:	1808d43a 	srli	r4,r3,16
 40070b8:	21803fcc 	andi	r6,r4,255
 40070bc:	11000083 	ldbu	r4,2(r2)
 40070c0:	2008703a 	and	r4,r4,zero
 40070c4:	200b883a 	mov	r5,r4
 40070c8:	3009883a 	mov	r4,r6
 40070cc:	2908b03a 	or	r4,r5,r4
 40070d0:	11000085 	stb	r4,2(r2)
 40070d4:	180ad63a 	srli	r5,r3,24
 40070d8:	10c000c3 	ldbu	r3,3(r2)
 40070dc:	1806703a 	and	r3,r3,zero
 40070e0:	1809883a 	mov	r4,r3
 40070e4:	2807883a 	mov	r3,r5
 40070e8:	20c6b03a 	or	r3,r4,r3
 40070ec:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
 40070f0:	e0bfe617 	ldw	r2,-104(fp)
 40070f4:	e0ffff03 	ldbu	r3,-4(fp)
 40070f8:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
 40070fc:	e0bffc17 	ldw	r2,-16(fp)
 4007100:	10c00217 	ldw	r3,8(r2)
 4007104:	e0bfe944 	addi	r2,fp,-91
 4007108:	d8800015 	stw	r2,0(sp)
 400710c:	01c00204 	movi	r7,8
 4007110:	000d883a 	mov	r6,zero
 4007114:	000b883a 	mov	r5,zero
 4007118:	1809883a 	mov	r4,r3
 400711c:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 4007120:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 4007124:	e0bfe617 	ldw	r2,-104(fp)
 4007128:	e0ffe717 	ldw	r3,-100(fp)
 400712c:	19403fcc 	andi	r5,r3,255
 4007130:	10c00003 	ldbu	r3,0(r2)
 4007134:	1806703a 	and	r3,r3,zero
 4007138:	1809883a 	mov	r4,r3
 400713c:	2807883a 	mov	r3,r5
 4007140:	20c6b03a 	or	r3,r4,r3
 4007144:	10c00005 	stb	r3,0(r2)
 4007148:	e0ffe717 	ldw	r3,-100(fp)
 400714c:	1806d23a 	srli	r3,r3,8
 4007150:	19403fcc 	andi	r5,r3,255
 4007154:	10c00043 	ldbu	r3,1(r2)
 4007158:	1806703a 	and	r3,r3,zero
 400715c:	1809883a 	mov	r4,r3
 4007160:	2807883a 	mov	r3,r5
 4007164:	20c6b03a 	or	r3,r4,r3
 4007168:	10c00045 	stb	r3,1(r2)
 400716c:	e0ffe717 	ldw	r3,-100(fp)
 4007170:	1806d43a 	srli	r3,r3,16
 4007174:	19403fcc 	andi	r5,r3,255
 4007178:	10c00083 	ldbu	r3,2(r2)
 400717c:	1806703a 	and	r3,r3,zero
 4007180:	1809883a 	mov	r4,r3
 4007184:	2807883a 	mov	r3,r5
 4007188:	20c6b03a 	or	r3,r4,r3
 400718c:	10c00085 	stb	r3,2(r2)
 4007190:	e0ffe717 	ldw	r3,-100(fp)
 4007194:	180ad63a 	srli	r5,r3,24
 4007198:	10c000c3 	ldbu	r3,3(r2)
 400719c:	1806703a 	and	r3,r3,zero
 40071a0:	1809883a 	mov	r4,r3
 40071a4:	2807883a 	mov	r3,r5
 40071a8:	20c6b03a 	or	r3,r4,r3
 40071ac:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
 40071b0:	e0bfe303 	ldbu	r2,-116(fp)
 40071b4:	10013a1e 	bne	r2,zero,40076a0 <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
 40071b8:	e0bfe817 	ldw	r2,-96(fp)
 40071bc:	10800017 	ldw	r2,0(r2)
 40071c0:	10800104 	addi	r2,r2,4
 40071c4:	10800017 	ldw	r2,0(r2)
 40071c8:	e0fffd03 	ldbu	r3,-12(fp)
 40071cc:	e13ffe03 	ldbu	r4,-8(fp)
 40071d0:	200f883a 	mov	r7,r4
 40071d4:	000d883a 	mov	r6,zero
 40071d8:	180b883a 	mov	r5,r3
 40071dc:	e13fe817 	ldw	r4,-96(fp)
 40071e0:	103ee83a 	callr	r2
 40071e4:	1007883a 	mov	r3,r2
 40071e8:	e0bffc17 	ldw	r2,-16(fp)
 40071ec:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
 40071f0:	e0bffc17 	ldw	r2,-16(fp)
 40071f4:	10800303 	ldbu	r2,12(r2)
 40071f8:	10803fcc 	andi	r2,r2,255
 40071fc:	1000021e 	bne	r2,zero,4007208 <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 4007200:	00bff504 	movi	r2,-44
 4007204:	00013806 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
 4007208:	e0bfe517 	ldw	r2,-108(fp)
 400720c:	10c001c3 	ldbu	r3,7(r2)
 4007210:	e0bffc17 	ldw	r2,-16(fp)
 4007214:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
 4007218:	e0bffc17 	ldw	r2,-16(fp)
 400721c:	10c00217 	ldw	r3,8(r2)
 4007220:	e0bffc17 	ldw	r2,-16(fp)
 4007224:	10800303 	ldbu	r2,12(r2)
 4007228:	10803fcc 	andi	r2,r2,255
 400722c:	100f883a 	mov	r7,r2
 4007230:	000d883a 	mov	r6,zero
 4007234:	000b883a 	mov	r5,zero
 4007238:	1809883a 	mov	r4,r3
 400723c:	40032500 	call	4003250 <_ZN3USB7setAddrEhhh>
 4007240:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
 4007244:	e0bfe303 	ldbu	r2,-116(fp)
 4007248:	10001026 	beq	r2,zero,400728c <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
 400724c:	e0bfe617 	ldw	r2,-104(fp)
 4007250:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
 4007254:	e0bfe817 	ldw	r2,-96(fp)
 4007258:	10800017 	ldw	r2,0(r2)
 400725c:	10800204 	addi	r2,r2,8
 4007260:	10800017 	ldw	r2,0(r2)
 4007264:	e0fffc17 	ldw	r3,-16(fp)
 4007268:	18c00303 	ldbu	r3,12(r3)
 400726c:	18c03fcc 	andi	r3,r3,255
 4007270:	180b883a 	mov	r5,r3
 4007274:	e13fe817 	ldw	r4,-96(fp)
 4007278:	103ee83a 	callr	r2
                bAddress = 0;
 400727c:	e0bffc17 	ldw	r2,-16(fp)
 4007280:	10000305 	stb	zero,12(r2)
                return rcode;
 4007284:	e0bfe303 	ldbu	r2,-116(fp)
 4007288:	00011706 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
 400728c:	e0bffc17 	ldw	r2,-16(fp)
 4007290:	10800303 	ldbu	r2,12(r2)
 4007294:	10803fcc 	andi	r2,r2,255
 4007298:	01402004 	movi	r5,128
 400729c:	1009883a 	mov	r4,r2
 40072a0:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
 40072a4:	e0bfe617 	ldw	r2,-104(fp)
 40072a8:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
 40072ac:	e0bfe817 	ldw	r2,-96(fp)
 40072b0:	10800017 	ldw	r2,0(r2)
 40072b4:	10800017 	ldw	r2,0(r2)
 40072b8:	e0fffc17 	ldw	r3,-16(fp)
 40072bc:	18c00303 	ldbu	r3,12(r3)
 40072c0:	18c03fcc 	andi	r3,r3,255
 40072c4:	180b883a 	mov	r5,r3
 40072c8:	e13fe817 	ldw	r4,-96(fp)
 40072cc:	103ee83a 	callr	r2
 40072d0:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
 40072d4:	e0bfe617 	ldw	r2,-104(fp)
 40072d8:	1000021e 	bne	r2,zero,40072e4 <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40072dc:	00bff584 	movi	r2,-42
 40072e0:	00010106 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
 40072e4:	e0bfe617 	ldw	r2,-104(fp)
 40072e8:	e0ffff03 	ldbu	r3,-4(fp)
 40072ec:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
 40072f0:	e0bffc17 	ldw	r2,-16(fp)
 40072f4:	10c00217 	ldw	r3,8(r2)
 40072f8:	e0bffc17 	ldw	r2,-16(fp)
 40072fc:	10800303 	ldbu	r2,12(r2)
 4007300:	11003fcc 	andi	r4,r2,255
 4007304:	00800484 	movi	r2,18
 4007308:	117fffcc 	andi	r5,r2,65535
 400730c:	e0bfe944 	addi	r2,fp,-91
 4007310:	d8800015 	stw	r2,0(sp)
 4007314:	280f883a 	mov	r7,r5
 4007318:	000d883a 	mov	r6,zero
 400731c:	200b883a 	mov	r5,r4
 4007320:	1809883a 	mov	r4,r3
 4007324:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 4007328:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
 400732c:	e0bfe303 	ldbu	r2,-116(fp)
 4007330:	1000dd1e 	bne	r2,zero,40076a8 <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
 4007334:	e0bfe517 	ldw	r2,-108(fp)
 4007338:	10c00203 	ldbu	r3,8(r2)
 400733c:	10800243 	ldbu	r2,9(r2)
 4007340:	1004923a 	slli	r2,r2,8
 4007344:	10c4b03a 	or	r2,r2,r3
 4007348:	1007883a 	mov	r3,r2
 400734c:	e0bffc17 	ldw	r2,-16(fp)
 4007350:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
 4007354:	e0bfe517 	ldw	r2,-108(fp)
 4007358:	10c00283 	ldbu	r3,10(r2)
 400735c:	108002c3 	ldbu	r2,11(r2)
 4007360:	1004923a 	slli	r2,r2,8
 4007364:	10c4b03a 	or	r2,r2,r3
 4007368:	1007883a 	mov	r3,r2
 400736c:	e0bffc17 	ldw	r2,-16(fp)
 4007370:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
 4007374:	e0bfe517 	ldw	r2,-108(fp)
 4007378:	10800443 	ldbu	r2,17(r2)
 400737c:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
 4007380:	e0bffc17 	ldw	r2,-16(fp)
 4007384:	10c00217 	ldw	r3,8(r2)
 4007388:	e0bffc17 	ldw	r2,-16(fp)
 400738c:	10800303 	ldbu	r2,12(r2)
 4007390:	11003fcc 	andi	r4,r2,255
 4007394:	e0bffc17 	ldw	r2,-16(fp)
 4007398:	108004c4 	addi	r2,r2,19
 400739c:	100f883a 	mov	r7,r2
 40073a0:	01800044 	movi	r6,1
 40073a4:	200b883a 	mov	r5,r4
 40073a8:	1809883a 	mov	r4,r3
 40073ac:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 40073b0:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
 40073b4:	e0bfe303 	ldbu	r2,-116(fp)
 40073b8:	1000bd1e 	bne	r2,zero,40076b0 <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
 40073bc:	e0bffc17 	ldw	r2,-16(fp)
 40073c0:	1080040b 	ldhu	r2,16(r2)
 40073c4:	10bfffcc 	andi	r2,r2,65535
 40073c8:	01402004 	movi	r5,128
 40073cc:	1009883a 	mov	r4,r2
 40073d0:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
 40073d4:	e0bffc17 	ldw	r2,-16(fp)
 40073d8:	1080038b 	ldhu	r2,14(r2)
 40073dc:	10bfffcc 	andi	r2,r2,65535
 40073e0:	01402004 	movi	r5,128
 40073e4:	1009883a 	mov	r4,r2
 40073e8:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
 40073ec:	e0bfe903 	ldbu	r2,-92(fp)
 40073f0:	01402004 	movi	r5,128
 40073f4:	1009883a 	mov	r4,r2
 40073f8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
 40073fc:	e0bffc17 	ldw	r2,-16(fp)
 4007400:	00c000c4 	movi	r3,3
 4007404:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
 4007408:	e13ffc17 	ldw	r4,-16(fp)
 400740c:	400779c0 	call	400779c <_ZN9USBH_MIDI19setupDeviceSpecificEv>
        
        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
 4007410:	e03fe405 	stb	zero,-112(fp)
 4007414:	e0ffe403 	ldbu	r3,-112(fp)
 4007418:	e0bfe903 	ldbu	r2,-92(fp)
 400741c:	18802a2e 	bgeu	r3,r2,40074c8 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
 4007420:	e0bffc17 	ldw	r2,-16(fp)
 4007424:	10c00104 	addi	r3,r2,4
 4007428:	e0bfee04 	addi	r2,fp,-72
 400742c:	01800044 	movi	r6,1
 4007430:	180b883a 	mov	r5,r3
 4007434:	1009883a 	mov	r4,r2
 4007438:	40083000 	call	4008300 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
 400743c:	e0bffc17 	ldw	r2,-16(fp)
 4007440:	10c00217 	ldw	r3,8(r2)
 4007444:	e0bffc17 	ldw	r2,-16(fp)
 4007448:	10800303 	ldbu	r2,12(r2)
 400744c:	11003fcc 	andi	r4,r2,255
 4007450:	e17fe403 	ldbu	r5,-112(fp)
 4007454:	e0bfee04 	addi	r2,fp,-72
 4007458:	d8800015 	stw	r2,0(sp)
 400745c:	280f883a 	mov	r7,r5
 4007460:	000d883a 	mov	r6,zero
 4007464:	200b883a 	mov	r5,r4
 4007468:	1809883a 	mov	r4,r3
 400746c:	40030b00 	call	40030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 4007470:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
 4007474:	e0bfe303 	ldbu	r2,-116(fp)
 4007478:	10008f1e 	bne	r2,zero,40076b8 <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
 400747c:	e0bfee04 	addi	r2,fp,-72
 4007480:	1009883a 	mov	r4,r2
 4007484:	4008c0c0 	call	4008c0c <_ZN14MidiDescParser9getNumEPsEv>
 4007488:	1007883a 	mov	r3,r2
 400748c:	e0bfe383 	ldbu	r2,-114(fp)
 4007490:	10c5883a 	add	r2,r2,r3
 4007494:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
 4007498:	e0bfe383 	ldbu	r2,-114(fp)
 400749c:	108000b0 	cmpltui	r2,r2,2
 40074a0:	1000051e 	bne	r2,zero,40074b8 <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
 40074a4:	e0bfee04 	addi	r2,fp,-72
 40074a8:	1009883a 	mov	r4,r2
 40074ac:	4008be40 	call	4008be4 <_ZN14MidiDescParser12getConfValueEv>
 40074b0:	e0bfe345 	stb	r2,-115(fp)
 40074b4:	00000406 	br	40074c8 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();
        
        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
 40074b8:	e0bfe403 	ldbu	r2,-112(fp)
 40074bc:	10800044 	addi	r2,r2,1
 40074c0:	e0bfe405 	stb	r2,-112(fp)
 40074c4:	003fd306 	br	4007414 <__alt_mem_onchip_memory2_0+0xfc006174>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
 40074c8:	e0bfe383 	ldbu	r2,-114(fp)
 40074cc:	01402004 	movi	r5,128
 40074d0:	1009883a 	mov	r4,r2
 40074d4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
 40074d8:	e0bfe383 	ldbu	r2,-114(fp)
 40074dc:	10800058 	cmpnei	r2,r2,1
 40074e0:	1000321e 	bne	r2,zero,40075ac <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
 40074e4:	e03fe445 	stb	zero,-111(fp)
 40074e8:	e0ffe443 	ldbu	r3,-111(fp)
 40074ec:	e0bfe903 	ldbu	r2,-92(fp)
 40074f0:	18802a2e 	bgeu	r3,r2,400759c <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
 40074f4:	e0bffc17 	ldw	r2,-16(fp)
 40074f8:	10c00104 	addi	r3,r2,4
 40074fc:	e0bfee04 	addi	r2,fp,-72
 4007500:	000d883a 	mov	r6,zero
 4007504:	180b883a 	mov	r5,r3
 4007508:	1009883a 	mov	r4,r2
 400750c:	40083000 	call	4008300 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
 4007510:	e0bffc17 	ldw	r2,-16(fp)
 4007514:	10c00217 	ldw	r3,8(r2)
 4007518:	e0bffc17 	ldw	r2,-16(fp)
 400751c:	10800303 	ldbu	r2,12(r2)
 4007520:	11003fcc 	andi	r4,r2,255
 4007524:	e17fe443 	ldbu	r5,-111(fp)
 4007528:	e0bfee04 	addi	r2,fp,-72
 400752c:	d8800015 	stw	r2,0(sp)
 4007530:	280f883a 	mov	r7,r5
 4007534:	000d883a 	mov	r6,zero
 4007538:	200b883a 	mov	r5,r4
 400753c:	1809883a 	mov	r4,r3
 4007540:	40030b00 	call	40030b0 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 4007544:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
 4007548:	e0bfe303 	ldbu	r2,-116(fp)
 400754c:	10005c1e 	bne	r2,zero,40076c0 <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
 4007550:	e0bfee04 	addi	r2,fp,-72
 4007554:	1009883a 	mov	r4,r2
 4007558:	4008c0c0 	call	4008c0c <_ZN14MidiDescParser9getNumEPsEv>
 400755c:	1007883a 	mov	r3,r2
 4007560:	e0bfe383 	ldbu	r2,-114(fp)
 4007564:	10c5883a 	add	r2,r2,r3
 4007568:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
 400756c:	e0bfe383 	ldbu	r2,-114(fp)
 4007570:	108000b0 	cmpltui	r2,r2,2
 4007574:	1000051e 	bne	r2,zero,400758c <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
 4007578:	e0bfee04 	addi	r2,fp,-72
 400757c:	1009883a 	mov	r4,r2
 4007580:	4008be40 	call	4008be4 <_ZN14MidiDescParser12getConfValueEv>
 4007584:	e0bfe345 	stb	r2,-115(fp)
 4007588:	00000406 	br	400759c <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
 400758c:	e0bfe443 	ldbu	r2,-111(fp)
 4007590:	10800044 	addi	r2,r2,1
 4007594:	e0bfe445 	stb	r2,-111(fp)
 4007598:	003fd306 	br	40074e8 <__alt_mem_onchip_memory2_0+0xfc006248>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
 400759c:	e0bfe383 	ldbu	r2,-114(fp)
 40075a0:	01402004 	movi	r5,128
 40075a4:	1009883a 	mov	r4,r2
 40075a8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
 40075ac:	e0bfe383 	ldbu	r2,-114(fp)
 40075b0:	108000a8 	cmpgeui	r2,r2,2
 40075b4:	1000031e 	bne	r2,zero,40075c4 <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
 40075b8:	00bfffc4 	movi	r2,-1
 40075bc:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
 40075c0:	00004206 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
 40075c4:	e0bffc17 	ldw	r2,-16(fp)
 40075c8:	10c00217 	ldw	r3,8(r2)
 40075cc:	e0bffc17 	ldw	r2,-16(fp)
 40075d0:	10800303 	ldbu	r2,12(r2)
 40075d4:	11003fcc 	andi	r4,r2,255
 40075d8:	e0bffc17 	ldw	r2,-16(fp)
 40075dc:	108004c4 	addi	r2,r2,19
 40075e0:	100f883a 	mov	r7,r2
 40075e4:	018000c4 	movi	r6,3
 40075e8:	200b883a 	mov	r5,r4
 40075ec:	1809883a 	mov	r4,r3
 40075f0:	40010440 	call	4001044 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 40075f4:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
 40075f8:	e0bfe343 	ldbu	r2,-115(fp)
 40075fc:	01402004 	movi	r5,128
 4007600:	1009883a 	mov	r4,r2
 4007604:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
 4007608:	e0bffc17 	ldw	r2,-16(fp)
 400760c:	10800583 	ldbu	r2,22(r2)
 4007610:	10bfe004 	addi	r2,r2,-128
 4007614:	10803fcc 	andi	r2,r2,255
 4007618:	01402004 	movi	r5,128
 400761c:	1009883a 	mov	r4,r2
 4007620:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
 4007624:	e0bffc17 	ldw	r2,-16(fp)
 4007628:	10800643 	ldbu	r2,25(r2)
 400762c:	10803fcc 	andi	r2,r2,255
 4007630:	01402004 	movi	r5,128
 4007634:	1009883a 	mov	r4,r2
 4007638:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
 400763c:	e0bffc17 	ldw	r2,-16(fp)
 4007640:	10c00217 	ldw	r3,8(r2)
 4007644:	e0bffc17 	ldw	r2,-16(fp)
 4007648:	10800303 	ldbu	r2,12(r2)
 400764c:	10803fcc 	andi	r2,r2,255
 4007650:	e13fe343 	ldbu	r4,-115(fp)
 4007654:	200f883a 	mov	r7,r4
 4007658:	000d883a 	mov	r6,zero
 400765c:	100b883a 	mov	r5,r2
 4007660:	1809883a 	mov	r4,r3
 4007664:	40032e40 	call	40032e4 <_ZN3USB7setConfEhhh>
 4007668:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
 400766c:	e0bfe303 	ldbu	r2,-116(fp)
 4007670:	1000151e 	bne	r2,zero,40076c8 <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        bPollEnable = true;
 4007674:	e0bffc17 	ldw	r2,-16(fp)
 4007678:	00c00044 	movi	r3,1
 400767c:	10c00345 	stb	r3,13(r2)

        if(pFuncOnInit)
 4007680:	e0bffc17 	ldw	r2,-16(fp)
 4007684:	10801817 	ldw	r2,96(r2)
 4007688:	10000326 	beq	r2,zero,4007698 <_ZN9USBH_MIDI4InitEhhb+0x7bc>
                pFuncOnInit(); // Call the user function
 400768c:	e0bffc17 	ldw	r2,-16(fp)
 4007690:	10801817 	ldw	r2,96(r2)
 4007694:	103ee83a 	callr	r2

        USBTRACE("Init done.\r\n");
        return 0;
 4007698:	0005883a 	mov	r2,zero
 400769c:	00001206 	br	40076e8 <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
 40076a0:	0001883a 	nop
 40076a4:	00000906 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
 40076a8:	0001883a 	nop
 40076ac:	00000706 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
 40076b0:	0001883a 	nop
 40076b4:	00000506 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
 40076b8:	0001883a 	nop
 40076bc:	00000306 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
 40076c0:	0001883a 	nop
 40076c4:	00000106 	br	40076cc <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
 40076c8:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
 40076cc:	e0bffc17 	ldw	r2,-16(fp)
 40076d0:	10800017 	ldw	r2,0(r2)
 40076d4:	10800204 	addi	r2,r2,8
 40076d8:	10800017 	ldw	r2,0(r2)
 40076dc:	e13ffc17 	ldw	r4,-16(fp)
 40076e0:	103ee83a 	callr	r2
        return rcode;
 40076e4:	e0bfe303 	ldbu	r2,-116(fp)
}
 40076e8:	e037883a 	mov	sp,fp
 40076ec:	dfc00117 	ldw	ra,4(sp)
 40076f0:	df000017 	ldw	fp,0(sp)
 40076f4:	dec00204 	addi	sp,sp,8
 40076f8:	f800283a 	ret

040076fc <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
 40076fc:	defffd04 	addi	sp,sp,-12
 4007700:	dfc00215 	stw	ra,8(sp)
 4007704:	df000115 	stw	fp,4(sp)
 4007708:	df000104 	addi	fp,sp,4
 400770c:	e13fff15 	stw	r4,-4(fp)
        if(pFuncOnRelease && bPollEnable)
 4007710:	e0bfff17 	ldw	r2,-4(fp)
 4007714:	10801917 	ldw	r2,100(r2)
 4007718:	10000726 	beq	r2,zero,4007738 <_ZN9USBH_MIDI7ReleaseEv+0x3c>
 400771c:	e0bfff17 	ldw	r2,-4(fp)
 4007720:	10800343 	ldbu	r2,13(r2)
 4007724:	10803fcc 	andi	r2,r2,255
 4007728:	10000326 	beq	r2,zero,4007738 <_ZN9USBH_MIDI7ReleaseEv+0x3c>
                pFuncOnRelease(); // Call the user function
 400772c:	e0bfff17 	ldw	r2,-4(fp)
 4007730:	10801917 	ldw	r2,100(r2)
 4007734:	103ee83a 	callr	r2

        pUsb->GetAddressPool().FreeAddress(bAddress);
 4007738:	e0bfff17 	ldw	r2,-4(fp)
 400773c:	10800217 	ldw	r2,8(r2)
 4007740:	1009883a 	mov	r4,r2
 4007744:	40033680 	call	4003368 <_ZN3USB14GetAddressPoolEv>
 4007748:	1009883a 	mov	r4,r2
 400774c:	20800017 	ldw	r2,0(r4)
 4007750:	10800204 	addi	r2,r2,8
 4007754:	10800017 	ldw	r2,0(r2)
 4007758:	e0ffff17 	ldw	r3,-4(fp)
 400775c:	18c00303 	ldbu	r3,12(r3)
 4007760:	18c03fcc 	andi	r3,r3,255
 4007764:	180b883a 	mov	r5,r3
 4007768:	103ee83a 	callr	r2
        bAddress     = 0;
 400776c:	e0bfff17 	ldw	r2,-4(fp)
 4007770:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
 4007774:	e0bfff17 	ldw	r2,-4(fp)
 4007778:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
 400777c:	e0bfff17 	ldw	r2,-4(fp)
 4007780:	10001705 	stb	zero,92(r2)

        return 0;
 4007784:	0005883a 	mov	r2,zero
}
 4007788:	e037883a 	mov	sp,fp
 400778c:	dfc00117 	ldw	ra,4(sp)
 4007790:	df000017 	ldw	fp,0(sp)
 4007794:	dec00204 	addi	sp,sp,8
 4007798:	f800283a 	ret

0400779c <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
 400779c:	defffe04 	addi	sp,sp,-8
 40077a0:	df000115 	stw	fp,4(sp)
 40077a4:	df000104 	addi	fp,sp,4
 40077a8:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
 40077ac:	e0bfff17 	ldw	r2,-4(fp)
 40077b0:	1080040b 	ldhu	r2,16(r2)
 40077b4:	10bfffcc 	andi	r2,r2,65535
 40077b8:	10848d58 	cmpnei	r2,r2,4661
 40077bc:	10004e1e 	bne	r2,zero,40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
                // LaunchPad and LaunchKey endpoint attribute is interrupt 
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
 40077c0:	e0bfff17 	ldw	r2,-4(fp)
 40077c4:	1080038b 	ldhu	r2,14(r2)
 40077c8:	10bfffcc 	andi	r2,r2,65535
 40077cc:	10800820 	cmpeqi	r2,r2,32
 40077d0:	10000f1e 	bne	r2,zero,4007810 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
 40077d4:	e0bfff17 	ldw	r2,-4(fp)
 40077d8:	1080038b 	ldhu	r2,14(r2)
 40077dc:	10bfffcc 	andi	r2,r2,65535
 40077e0:	10800da0 	cmpeqi	r2,r2,54
 40077e4:	10000a1e 	bne	r2,zero,4007810 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
 40077e8:	e0bfff17 	ldw	r2,-4(fp)
 40077ec:	1080038b 	ldhu	r2,14(r2)
 40077f0:	10bfffcc 	andi	r2,r2,65535
 40077f4:	10801460 	cmpeqi	r2,r2,81
 40077f8:	1000051e 	bne	r2,zero,4007810 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
 40077fc:	e0bfff17 	ldw	r2,-4(fp)
 4007800:	1080038b 	ldhu	r2,14(r2)
 4007804:	10bfffcc 	andi	r2,r2,65535
 4007808:	10801a58 	cmpnei	r2,r2,105
 400780c:	1000041e 	bne	r2,zero,4007820 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
 4007810:	e0bfff17 	ldw	r2,-4(fp)
 4007814:	00c00084 	movi	r3,2
 4007818:	10c00485 	stb	r3,18(r2)
                        return;
 400781c:	00003606 	br	40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2, 0x0102,0x113-0x122:MiniMk3, 0x134-0x137:MK3
                if( (0x30 <= pid && pid <= 0x32) || pid == 0x35 || (0x7B <= pid && pid <= 0x7D) 
 4007820:	e0bfff17 	ldw	r2,-4(fp)
 4007824:	1080038b 	ldhu	r2,14(r2)
 4007828:	10bfffcc 	andi	r2,r2,65535
 400782c:	10800c30 	cmpltui	r2,r2,48
 4007830:	1000051e 	bne	r2,zero,4007848 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
 4007834:	e0bfff17 	ldw	r2,-4(fp)
 4007838:	1080038b 	ldhu	r2,14(r2)
 400783c:	10bfffcc 	andi	r2,r2,65535
 4007840:	10800cf0 	cmpltui	r2,r2,51
 4007844:	1000281e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 4007848:	e0bfff17 	ldw	r2,-4(fp)
 400784c:	1080038b 	ldhu	r2,14(r2)
 4007850:	10bfffcc 	andi	r2,r2,65535
 4007854:	10800d60 	cmpeqi	r2,r2,53
 4007858:	1000231e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 400785c:	e0bfff17 	ldw	r2,-4(fp)
 4007860:	1080038b 	ldhu	r2,14(r2)
 4007864:	10bfffcc 	andi	r2,r2,65535
 4007868:	10801ef0 	cmpltui	r2,r2,123
 400786c:	1000051e 	bne	r2,zero,4007884 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
 4007870:	e0bfff17 	ldw	r2,-4(fp)
 4007874:	1080038b 	ldhu	r2,14(r2)
 4007878:	10bfffcc 	andi	r2,r2,65535
 400787c:	10801fb0 	cmpltui	r2,r2,126
 4007880:	1000191e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
                  || pid == 0x102 || (0x113 <= pid && pid <= 0x122) || (0x134 <= pid && pid <= 0x137) ) {
 4007884:	e0bfff17 	ldw	r2,-4(fp)
 4007888:	1080038b 	ldhu	r2,14(r2)
 400788c:	10bfffcc 	andi	r2,r2,65535
 4007890:	108040a0 	cmpeqi	r2,r2,258
 4007894:	1000141e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 4007898:	e0bfff17 	ldw	r2,-4(fp)
 400789c:	1080038b 	ldhu	r2,14(r2)
 40078a0:	10bfffcc 	andi	r2,r2,65535
 40078a4:	108044f0 	cmpltui	r2,r2,275
 40078a8:	1000051e 	bne	r2,zero,40078c0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x124>
 40078ac:	e0bfff17 	ldw	r2,-4(fp)
 40078b0:	1080038b 	ldhu	r2,14(r2)
 40078b4:	10bfffcc 	andi	r2,r2,65535
 40078b8:	108048f0 	cmpltui	r2,r2,291
 40078bc:	10000a1e 	bne	r2,zero,40078e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 40078c0:	e0bfff17 	ldw	r2,-4(fp)
 40078c4:	1080038b 	ldhu	r2,14(r2)
 40078c8:	10bfffcc 	andi	r2,r2,65535
 40078cc:	10804d30 	cmpltui	r2,r2,308
 40078d0:	1000091e 	bne	r2,zero,40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
 40078d4:	e0bfff17 	ldw	r2,-4(fp)
 40078d8:	1080038b 	ldhu	r2,14(r2)
 40078dc:	10bfffcc 	andi	r2,r2,65535
 40078e0:	10804e28 	cmpgeui	r2,r2,312
 40078e4:	1000041e 	bne	r2,zero,40078f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
                        bTransferTypeMask = 2;
 40078e8:	e0bfff17 	ldw	r2,-4(fp)
 40078ec:	00c00084 	movi	r3,2
 40078f0:	10c00485 	stb	r3,18(r2)
                        return;
 40078f4:	0001883a 	nop
                }
        }
}
 40078f8:	e037883a 	mov	sp,fp
 40078fc:	df000017 	ldw	fp,0(sp)
 4007900:	dec00104 	addi	sp,sp,4
 4007904:	f800283a 	ret

04007908 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
 4007908:	defff804 	addi	sp,sp,-32
 400790c:	dfc00715 	stw	ra,28(sp)
 4007910:	df000615 	stw	fp,24(sp)
 4007914:	df000604 	addi	fp,sp,24
 4007918:	e13ffd15 	stw	r4,-12(fp)
 400791c:	e17ffe15 	stw	r5,-8(fp)
 4007920:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
 4007924:	e0bffd17 	ldw	r2,-12(fp)
 4007928:	108005c3 	ldbu	r2,23(r2)
 400792c:	10c03fcc 	andi	r3,r2,255
 4007930:	e0bffe17 	ldw	r2,-8(fp)
 4007934:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
 4007938:	e0bffd17 	ldw	r2,-12(fp)
 400793c:	10c00217 	ldw	r3,8(r2)
 4007940:	e0bffd17 	ldw	r2,-12(fp)
 4007944:	10800303 	ldbu	r2,12(r2)
 4007948:	11003fcc 	andi	r4,r2,255
 400794c:	e0bffd17 	ldw	r2,-12(fp)
 4007950:	10800583 	ldbu	r2,22(r2)
 4007954:	11403fcc 	andi	r5,r2,255
 4007958:	d8000115 	stw	zero,4(sp)
 400795c:	e0bfff17 	ldw	r2,-4(fp)
 4007960:	d8800015 	stw	r2,0(sp)
 4007964:	e1fffe17 	ldw	r7,-8(fp)
 4007968:	280d883a 	mov	r6,r5
 400796c:	200b883a 	mov	r5,r4
 4007970:	1809883a 	mov	r4,r3
 4007974:	40015fc0 	call	40015fc <_ZN3USB10inTransferEhhPtPhh>
 4007978:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
 400797c:	e0bffe17 	ldw	r2,-8(fp)
 4007980:	1080000b 	ldhu	r2,0(r2)
 4007984:	10bfffcc 	andi	r2,r2,65535
 4007988:	10800f28 	cmpgeui	r2,r2,60
 400798c:	10000d1e 	bne	r2,zero,40079c4 <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
 4007990:	e0bffe17 	ldw	r2,-8(fp)
 4007994:	1080000b 	ldhu	r2,0(r2)
 4007998:	10bfffcc 	andi	r2,r2,65535
 400799c:	e0ffff17 	ldw	r3,-4(fp)
 40079a0:	1885883a 	add	r2,r3,r2
 40079a4:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
 40079a8:	e0bffe17 	ldw	r2,-8(fp)
 40079ac:	1080000b 	ldhu	r2,0(r2)
 40079b0:	10bfffcc 	andi	r2,r2,65535
 40079b4:	10800044 	addi	r2,r2,1
 40079b8:	e0ffff17 	ldw	r3,-4(fp)
 40079bc:	1885883a 	add	r2,r3,r2
 40079c0:	10000005 	stb	zero,0(r2)
        }
        return r;
 40079c4:	e0bffc03 	ldbu	r2,-16(fp)
}
 40079c8:	e037883a 	mov	sp,fp
 40079cc:	dfc00117 	ldw	ra,4(sp)
 40079d0:	df000017 	ldw	fp,0(sp)
 40079d4:	dec00204 	addi	sp,sp,8
 40079d8:	f800283a 	ret

040079dc <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
 40079dc:	defff904 	addi	sp,sp,-28
 40079e0:	dfc00615 	stw	ra,24(sp)
 40079e4:	df000515 	stw	fp,20(sp)
 40079e8:	df000504 	addi	fp,sp,20
 40079ec:	e13ffd15 	stw	r4,-12(fp)
 40079f0:	e17ffe15 	stw	r5,-8(fp)
 40079f4:	3005883a 	mov	r2,r6
 40079f8:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
 40079fc:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
 4007a00:	e0bffd17 	ldw	r2,-12(fp)
 4007a04:	10800343 	ldbu	r2,13(r2)
 4007a08:	1080005c 	xori	r2,r2,1
 4007a0c:	10803fcc 	andi	r2,r2,255
 4007a10:	10000226 	beq	r2,zero,4007a1c <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
 4007a14:	0005883a 	mov	r2,zero
 4007a18:	00008506 	br	4007c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
 4007a1c:	e0bffd17 	ldw	r2,-12(fp)
 4007a20:	10801703 	ldbu	r2,92(r2)
 4007a24:	10803fcc 	andi	r2,r2,255
 4007a28:	10001826 	beq	r2,zero,4007a8c <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
 4007a2c:	e0bffd17 	ldw	r2,-12(fp)
 4007a30:	10801703 	ldbu	r2,92(r2)
 4007a34:	10803fcc 	andi	r2,r2,255
 4007a38:	10801028 	cmpgeui	r2,r2,64
 4007a3c:	1000131e 	bne	r2,zero,4007a8c <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
 4007a40:	e0bffd17 	ldw	r2,-12(fp)
 4007a44:	10801703 	ldbu	r2,92(r2)
 4007a48:	10803fcc 	andi	r2,r2,255
 4007a4c:	e0fffd17 	ldw	r3,-12(fp)
 4007a50:	1885883a 	add	r2,r3,r2
 4007a54:	10800704 	addi	r2,r2,28
 4007a58:	10800003 	ldbu	r2,0(r2)
 4007a5c:	10803fcc 	andi	r2,r2,255
 4007a60:	10002a1e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007a64:	e0bffd17 	ldw	r2,-12(fp)
 4007a68:	10801703 	ldbu	r2,92(r2)
 4007a6c:	10803fcc 	andi	r2,r2,255
 4007a70:	10800044 	addi	r2,r2,1
 4007a74:	e0fffd17 	ldw	r3,-12(fp)
 4007a78:	1885883a 	add	r2,r3,r2
 4007a7c:	10800704 	addi	r2,r2,28
 4007a80:	10800003 	ldbu	r2,0(r2)
 4007a84:	10803fcc 	andi	r2,r2,255
 4007a88:	1000201e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
 4007a8c:	e0bffd17 	ldw	r2,-12(fp)
 4007a90:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
 4007a94:	e0bffd17 	ldw	r2,-12(fp)
 4007a98:	10c00704 	addi	r3,r2,28
 4007a9c:	e0bffc04 	addi	r2,fp,-16
 4007aa0:	180d883a 	mov	r6,r3
 4007aa4:	100b883a 	mov	r5,r2
 4007aa8:	e13ffd17 	ldw	r4,-12(fp)
 4007aac:	40079080 	call	4007908 <_ZN9USBH_MIDI8RecvDataEPtPh>
 4007ab0:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
 4007ab4:	e0bffb03 	ldbu	r2,-20(fp)
 4007ab8:	10000226 	beq	r2,zero,4007ac4 <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
 4007abc:	0005883a 	mov	r2,zero
 4007ac0:	00005b06 	br	4007c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
 4007ac4:	e0bffd17 	ldw	r2,-12(fp)
 4007ac8:	10800703 	ldbu	r2,28(r2)
 4007acc:	10803fcc 	andi	r2,r2,255
 4007ad0:	10000e1e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007ad4:	e0bffd17 	ldw	r2,-12(fp)
 4007ad8:	10800743 	ldbu	r2,29(r2)
 4007adc:	10803fcc 	andi	r2,r2,255
 4007ae0:	10000a1e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007ae4:	e0bffd17 	ldw	r2,-12(fp)
 4007ae8:	10800783 	ldbu	r2,30(r2)
 4007aec:	10803fcc 	andi	r2,r2,255
 4007af0:	1000061e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007af4:	e0bffd17 	ldw	r2,-12(fp)
 4007af8:	108007c3 	ldbu	r2,31(r2)
 4007afc:	10803fcc 	andi	r2,r2,255
 4007b00:	1000021e 	bne	r2,zero,4007b0c <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
 4007b04:	0005883a 	mov	r2,zero
 4007b08:	00004906 	br	4007c30 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
 4007b0c:	e0bffd17 	ldw	r2,-12(fp)
 4007b10:	10801703 	ldbu	r2,92(r2)
 4007b14:	10803fcc 	andi	r2,r2,255
 4007b18:	e0fffd17 	ldw	r3,-12(fp)
 4007b1c:	1885883a 	add	r2,r3,r2
 4007b20:	10800704 	addi	r2,r2,28
 4007b24:	10800003 	ldbu	r2,0(r2)
 4007b28:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
 4007b2c:	e0bfff03 	ldbu	r2,-4(fp)
 4007b30:	10000526 	beq	r2,zero,4007b48 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
 4007b34:	e0bffe17 	ldw	r2,-8(fp)
 4007b38:	10c00044 	addi	r3,r2,1
 4007b3c:	e0fffe15 	stw	r3,-8(fp)
 4007b40:	e0fffb43 	ldbu	r3,-19(fp)
 4007b44:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
 4007b48:	e0bffd17 	ldw	r2,-12(fp)
 4007b4c:	10801703 	ldbu	r2,92(r2)
 4007b50:	10800044 	addi	r2,r2,1
 4007b54:	1007883a 	mov	r3,r2
 4007b58:	e0bffd17 	ldw	r2,-12(fp)
 4007b5c:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
 4007b60:	e0bffe17 	ldw	r2,-8(fp)
 4007b64:	10c00044 	addi	r3,r2,1
 4007b68:	e0fffe15 	stw	r3,-8(fp)
 4007b6c:	e0fffd17 	ldw	r3,-12(fp)
 4007b70:	18c01703 	ldbu	r3,92(r3)
 4007b74:	19000044 	addi	r4,r3,1
 4007b78:	200b883a 	mov	r5,r4
 4007b7c:	e13ffd17 	ldw	r4,-12(fp)
 4007b80:	21401705 	stb	r5,92(r4)
 4007b84:	18c03fcc 	andi	r3,r3,255
 4007b88:	e13ffd17 	ldw	r4,-12(fp)
 4007b8c:	20c7883a 	add	r3,r4,r3
 4007b90:	18c00704 	addi	r3,r3,28
 4007b94:	18c00003 	ldbu	r3,0(r3)
 4007b98:	e0fffb85 	stb	r3,-18(fp)
 4007b9c:	e0fffb83 	ldbu	r3,-18(fp)
 4007ba0:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
 4007ba4:	e0bffe17 	ldw	r2,-8(fp)
 4007ba8:	10c00044 	addi	r3,r2,1
 4007bac:	e0fffe15 	stw	r3,-8(fp)
 4007bb0:	e0fffd17 	ldw	r3,-12(fp)
 4007bb4:	18c01703 	ldbu	r3,92(r3)
 4007bb8:	19000044 	addi	r4,r3,1
 4007bbc:	200b883a 	mov	r5,r4
 4007bc0:	e13ffd17 	ldw	r4,-12(fp)
 4007bc4:	21401705 	stb	r5,92(r4)
 4007bc8:	18c03fcc 	andi	r3,r3,255
 4007bcc:	e13ffd17 	ldw	r4,-12(fp)
 4007bd0:	20c7883a 	add	r3,r4,r3
 4007bd4:	18c00704 	addi	r3,r3,28
 4007bd8:	18c00003 	ldbu	r3,0(r3)
 4007bdc:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
 4007be0:	e0bffe17 	ldw	r2,-8(fp)
 4007be4:	10c00044 	addi	r3,r2,1
 4007be8:	e0fffe15 	stw	r3,-8(fp)
 4007bec:	e0fffd17 	ldw	r3,-12(fp)
 4007bf0:	18c01703 	ldbu	r3,92(r3)
 4007bf4:	19000044 	addi	r4,r3,1
 4007bf8:	200b883a 	mov	r5,r4
 4007bfc:	e13ffd17 	ldw	r4,-12(fp)
 4007c00:	21401705 	stb	r5,92(r4)
 4007c04:	18c03fcc 	andi	r3,r3,255
 4007c08:	e13ffd17 	ldw	r4,-12(fp)
 4007c0c:	20c7883a 	add	r3,r4,r3
 4007c10:	18c00704 	addi	r3,r3,28
 4007c14:	18c00003 	ldbu	r3,0(r3)
 4007c18:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
 4007c1c:	e0bffb43 	ldbu	r2,-19(fp)
 4007c20:	108003cc 	andi	r2,r2,15
 4007c24:	100b883a 	mov	r5,r2
 4007c28:	e13ffd17 	ldw	r4,-12(fp)
 4007c2c:	4008c8c0 	call	4008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
 4007c30:	e037883a 	mov	sp,fp
 4007c34:	dfc00117 	ldw	ra,4(sp)
 4007c38:	df000017 	ldw	fp,0(sp)
 4007c3c:	dec00204 	addi	sp,sp,8
 4007c40:	f800283a 	ret

04007c44 <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
 4007c44:	defff804 	addi	sp,sp,-32
 4007c48:	dfc00715 	stw	ra,28(sp)
 4007c4c:	df000615 	stw	fp,24(sp)
 4007c50:	df000604 	addi	fp,sp,24
 4007c54:	e13ffd15 	stw	r4,-12(fp)
 4007c58:	e17ffe15 	stw	r5,-8(fp)
 4007c5c:	3005883a 	mov	r2,r6
 4007c60:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
 4007c64:	e0bffe17 	ldw	r2,-8(fp)
 4007c68:	10800003 	ldbu	r2,0(r2)
 4007c6c:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
 4007c70:	e0bffb03 	ldbu	r2,-20(fp)
 4007c74:	100b883a 	mov	r5,r2
 4007c78:	e13ffd17 	ldw	r4,-12(fp)
 4007c7c:	4008c340 	call	4008c34 <_ZN9USBH_MIDI17convertStatus2CinEh>
 4007c80:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
 4007c84:	e0bffb03 	ldbu	r2,-20(fp)
 4007c88:	10803c18 	cmpnei	r2,r2,240
 4007c8c:	10000b1e 	bne	r2,zero,4007cbc <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
 4007c90:	e17ffe17 	ldw	r5,-8(fp)
 4007c94:	e13ffd17 	ldw	r4,-12(fp)
 4007c98:	4007e040 	call	4007e04 <_ZN9USBH_MIDI18countSysExDataSizeEPh>
 4007c9c:	10bfffcc 	andi	r2,r2,65535
 4007ca0:	e0ffff03 	ldbu	r3,-4(fp)
 4007ca4:	180f883a 	mov	r7,r3
 4007ca8:	100d883a 	mov	r6,r2
 4007cac:	e17ffe17 	ldw	r5,-8(fp)
 4007cb0:	e13ffd17 	ldw	r4,-12(fp)
 4007cb4:	4007e8c0 	call	4007e8c <_ZN9USBH_MIDI9SendSysExEPhth>
 4007cb8:	00003406 	br	4007d8c <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
 4007cbc:	e0bfff03 	ldbu	r2,-4(fp)
 4007cc0:	1004913a 	slli	r2,r2,4
 4007cc4:	1007883a 	mov	r3,r2
 4007cc8:	e0bffb43 	ldbu	r2,-19(fp)
 4007ccc:	1884b03a 	or	r2,r3,r2
 4007cd0:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
 4007cd4:	e0bffe17 	ldw	r2,-8(fp)
 4007cd8:	10800003 	ldbu	r2,0(r2)
 4007cdc:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
 4007ce0:	e0bffb43 	ldbu	r2,-19(fp)
 4007ce4:	100b883a 	mov	r5,r2
 4007ce8:	e13ffd17 	ldw	r4,-12(fp)
 4007cec:	4008c8c0 	call	4008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
 4007cf0:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
 4007cf4:	e0bffb83 	ldbu	r2,-18(fp)
 4007cf8:	10c000a0 	cmpeqi	r3,r2,2
 4007cfc:	18000c1e 	bne	r3,zero,4007d30 <_ZN9USBH_MIDI8SendDataEPhh+0xec>
 4007d00:	10c000e0 	cmpeqi	r3,r2,3
 4007d04:	1800031e 	bne	r3,zero,4007d14 <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
 4007d08:	10800060 	cmpeqi	r2,r2,1
 4007d0c:	10000d1e 	bne	r2,zero,4007d44 <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
 4007d10:	00000f06 	br	4007d50 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
 4007d14:	e0bffe17 	ldw	r2,-8(fp)
 4007d18:	10800043 	ldbu	r2,1(r2)
 4007d1c:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
 4007d20:	e0bffe17 	ldw	r2,-8(fp)
 4007d24:	10800083 	ldbu	r2,2(r2)
 4007d28:	e0bffc85 	stb	r2,-14(fp)
                break;
 4007d2c:	00000806 	br	4007d50 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
 4007d30:	e0bffe17 	ldw	r2,-8(fp)
 4007d34:	10800043 	ldbu	r2,1(r2)
 4007d38:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
 4007d3c:	e03ffc85 	stb	zero,-14(fp)
                break;
 4007d40:	00000306 	br	4007d50 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
 4007d44:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
 4007d48:	e03ffc85 	stb	zero,-14(fp)
                break;
 4007d4c:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
 4007d50:	e0bffd17 	ldw	r2,-12(fp)
 4007d54:	10c00217 	ldw	r3,8(r2)
 4007d58:	e0bffd17 	ldw	r2,-12(fp)
 4007d5c:	10800303 	ldbu	r2,12(r2)
 4007d60:	11003fcc 	andi	r4,r2,255
 4007d64:	e0bffd17 	ldw	r2,-12(fp)
 4007d68:	10800643 	ldbu	r2,25(r2)
 4007d6c:	11403fcc 	andi	r5,r2,255
 4007d70:	e0bffbc4 	addi	r2,fp,-17
 4007d74:	d8800015 	stw	r2,0(sp)
 4007d78:	01c00104 	movi	r7,4
 4007d7c:	280d883a 	mov	r6,r5
 4007d80:	200b883a 	mov	r5,r4
 4007d84:	1809883a 	mov	r4,r3
 4007d88:	40019900 	call	4001990 <_ZN3USB11outTransferEhhtPh>
}
 4007d8c:	e037883a 	mov	sp,fp
 4007d90:	dfc00117 	ldw	ra,4(sp)
 4007d94:	df000017 	ldw	fp,0(sp)
 4007d98:	dec00204 	addi	sp,sp,8
 4007d9c:	f800283a 	ret

04007da0 <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
 4007da0:	defffb04 	addi	sp,sp,-20
 4007da4:	dfc00415 	stw	ra,16(sp)
 4007da8:	df000315 	stw	fp,12(sp)
 4007dac:	df000304 	addi	fp,sp,12
 4007db0:	e13ffd15 	stw	r4,-12(fp)
 4007db4:	2807883a 	mov	r3,r5
 4007db8:	3005883a 	mov	r2,r6
 4007dbc:	e0fffe05 	stb	r3,-8(fp)
 4007dc0:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
 4007dc4:	e0bfff03 	ldbu	r2,-4(fp)
 4007dc8:	1000051e 	bne	r2,zero,4007de0 <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
 4007dcc:	e0bffe03 	ldbu	r2,-8(fp)
 4007dd0:	100b883a 	mov	r5,r2
 4007dd4:	e13ffd17 	ldw	r4,-12(fp)
 4007dd8:	4008c340 	call	4008c34 <_ZN9USBH_MIDI17convertStatus2CinEh>
 4007ddc:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
 4007de0:	e0bfff03 	ldbu	r2,-4(fp)
 4007de4:	100b883a 	mov	r5,r2
 4007de8:	e13ffd17 	ldw	r4,-12(fp)
 4007dec:	4008c8c0 	call	4008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
 4007df0:	e037883a 	mov	sp,fp
 4007df4:	dfc00117 	ldw	ra,4(sp)
 4007df8:	df000017 	ldw	fp,0(sp)
 4007dfc:	dec00204 	addi	sp,sp,8
 4007e00:	f800283a 	ret

04007e04 <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
 4007e04:	defffc04 	addi	sp,sp,-16
 4007e08:	df000315 	stw	fp,12(sp)
 4007e0c:	df000304 	addi	fp,sp,12
 4007e10:	e13ffe15 	stw	r4,-8(fp)
 4007e14:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
 4007e18:	00800044 	movi	r2,1
 4007e1c:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
 4007e20:	e0bfff17 	ldw	r2,-4(fp)
 4007e24:	10800003 	ldbu	r2,0(r2)
 4007e28:	10803fcc 	andi	r2,r2,255
 4007e2c:	10803c20 	cmpeqi	r2,r2,240
 4007e30:	1000021e 	bne	r2,zero,4007e3c <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
 4007e34:	0005883a 	mov	r2,zero
 4007e38:	00001006 	br	4007e7c <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
 4007e3c:	e0bfff17 	ldw	r2,-4(fp)
 4007e40:	10800003 	ldbu	r2,0(r2)
 4007e44:	10803fcc 	andi	r2,r2,255
 4007e48:	10803de0 	cmpeqi	r2,r2,247
 4007e4c:	10000a1e 	bne	r2,zero,4007e78 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
 4007e50:	e0bfff17 	ldw	r2,-4(fp)
 4007e54:	10800044 	addi	r2,r2,1
 4007e58:	e0bfff15 	stw	r2,-4(fp)
                c++;
 4007e5c:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e60:	10800044 	addi	r2,r2,1
 4007e64:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
 4007e68:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e6c:	10804070 	cmpltui	r2,r2,257
 4007e70:	103ff21e 	bne	r2,zero,4007e3c <__alt_mem_onchip_memory2_0+0xfc006b9c>
                        c = 0;
 4007e74:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
 4007e78:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4007e7c:	e037883a 	mov	sp,fp
 4007e80:	df000017 	ldw	fp,0(sp)
 4007e84:	dec00104 	addi	sp,sp,4
 4007e88:	f800283a 	ret

04007e8c <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
 4007e8c:	deffe704 	addi	sp,sp,-100
 4007e90:	dfc01815 	stw	ra,96(sp)
 4007e94:	df001715 	stw	fp,92(sp)
 4007e98:	df001704 	addi	fp,sp,92
 4007e9c:	e13ffc15 	stw	r4,-16(fp)
 4007ea0:	e17ffd15 	stw	r5,-12(fp)
 4007ea4:	3007883a 	mov	r3,r6
 4007ea8:	3805883a 	mov	r2,r7
 4007eac:	e0fffe0d 	sth	r3,-8(fp)
 4007eb0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
 4007eb4:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
 4007eb8:	e0bffe0b 	ldhu	r2,-8(fp)
 4007ebc:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
 4007ec0:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
 4007ec4:	e0bffc17 	ldw	r2,-16(fp)
 4007ec8:	108005c3 	ldbu	r2,23(r2)
 4007ecc:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
 4007ed0:	e0bffe0b 	ldhu	r2,-8(fp)
 4007ed4:	01402004 	movi	r5,128
 4007ed8:	1009883a 	mov	r4,r2
 4007edc:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
 4007ee0:	e0bfea8b 	ldhu	r2,-86(fp)
 4007ee4:	1000b026 	beq	r2,zero,40081a8 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
 4007ee8:	e0bfeb03 	ldbu	r2,-84(fp)
 4007eec:	e0ffff03 	ldbu	r3,-4(fp)
 4007ef0:	1806913a 	slli	r3,r3,4
 4007ef4:	18c00114 	ori	r3,r3,4
 4007ef8:	1809883a 	mov	r4,r3
 4007efc:	e0ffeb84 	addi	r3,fp,-82
 4007f00:	1885883a 	add	r2,r3,r2
 4007f04:	11000005 	stb	r4,0(r2)

                switch ( n ) {
 4007f08:	e0bfea8b 	ldhu	r2,-86(fp)
 4007f0c:	10c000a0 	cmpeqi	r3,r2,2
 4007f10:	18002a1e 	bne	r3,zero,4007fbc <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
 4007f14:	10c000e0 	cmpeqi	r3,r2,3
 4007f18:	1800521e 	bne	r3,zero,4008064 <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
 4007f1c:	10800060 	cmpeqi	r2,r2,1
 4007f20:	10005826 	beq	r2,zero,4008084 <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
 4007f24:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f28:	10c00044 	addi	r3,r2,1
 4007f2c:	e0ffeb05 	stb	r3,-84(fp)
 4007f30:	10803fcc 	andi	r2,r2,255
 4007f34:	e0ffff03 	ldbu	r3,-4(fp)
 4007f38:	1806913a 	slli	r3,r3,4
 4007f3c:	18c00154 	ori	r3,r3,5
 4007f40:	1809883a 	mov	r4,r3
 4007f44:	e0ffeb84 	addi	r3,fp,-82
 4007f48:	1885883a 	add	r2,r3,r2
 4007f4c:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
 4007f50:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f54:	10c00044 	addi	r3,r2,1
 4007f58:	e0ffeb05 	stb	r3,-84(fp)
 4007f5c:	11003fcc 	andi	r4,r2,255
 4007f60:	e0bffd17 	ldw	r2,-12(fp)
 4007f64:	10c00044 	addi	r3,r2,1
 4007f68:	e0fffd15 	stw	r3,-12(fp)
 4007f6c:	10c00003 	ldbu	r3,0(r2)
 4007f70:	e0bfeb84 	addi	r2,fp,-82
 4007f74:	1105883a 	add	r2,r2,r4
 4007f78:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
 4007f7c:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f80:	10c00044 	addi	r3,r2,1
 4007f84:	e0ffeb05 	stb	r3,-84(fp)
 4007f88:	10803fcc 	andi	r2,r2,255
 4007f8c:	e0ffeb84 	addi	r3,fp,-82
 4007f90:	1885883a 	add	r2,r3,r2
 4007f94:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
 4007f98:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f9c:	10c00044 	addi	r3,r2,1
 4007fa0:	e0ffeb05 	stb	r3,-84(fp)
 4007fa4:	10803fcc 	andi	r2,r2,255
 4007fa8:	e0ffeb84 	addi	r3,fp,-82
 4007fac:	1885883a 	add	r2,r3,r2
 4007fb0:	10000005 	stb	zero,0(r2)
                        n = 0;
 4007fb4:	e03fea8d 	sth	zero,-86(fp)
                        break;
 4007fb8:	00005a06 	br	4008124 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
 4007fbc:	e0bfeb03 	ldbu	r2,-84(fp)
 4007fc0:	10c00044 	addi	r3,r2,1
 4007fc4:	e0ffeb05 	stb	r3,-84(fp)
 4007fc8:	10803fcc 	andi	r2,r2,255
 4007fcc:	e0ffff03 	ldbu	r3,-4(fp)
 4007fd0:	1806913a 	slli	r3,r3,4
 4007fd4:	18c00194 	ori	r3,r3,6
 4007fd8:	1809883a 	mov	r4,r3
 4007fdc:	e0ffeb84 	addi	r3,fp,-82
 4007fe0:	1885883a 	add	r2,r3,r2
 4007fe4:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
 4007fe8:	e0bfeb03 	ldbu	r2,-84(fp)
 4007fec:	10c00044 	addi	r3,r2,1
 4007ff0:	e0ffeb05 	stb	r3,-84(fp)
 4007ff4:	11003fcc 	andi	r4,r2,255
 4007ff8:	e0bffd17 	ldw	r2,-12(fp)
 4007ffc:	10c00044 	addi	r3,r2,1
 4008000:	e0fffd15 	stw	r3,-12(fp)
 4008004:	10c00003 	ldbu	r3,0(r2)
 4008008:	e0bfeb84 	addi	r2,fp,-82
 400800c:	1105883a 	add	r2,r2,r4
 4008010:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
 4008014:	e0bfeb03 	ldbu	r2,-84(fp)
 4008018:	10c00044 	addi	r3,r2,1
 400801c:	e0ffeb05 	stb	r3,-84(fp)
 4008020:	11003fcc 	andi	r4,r2,255
 4008024:	e0bffd17 	ldw	r2,-12(fp)
 4008028:	10c00044 	addi	r3,r2,1
 400802c:	e0fffd15 	stw	r3,-12(fp)
 4008030:	10c00003 	ldbu	r3,0(r2)
 4008034:	e0bfeb84 	addi	r2,fp,-82
 4008038:	1105883a 	add	r2,r2,r4
 400803c:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
 4008040:	e0bfeb03 	ldbu	r2,-84(fp)
 4008044:	10c00044 	addi	r3,r2,1
 4008048:	e0ffeb05 	stb	r3,-84(fp)
 400804c:	10803fcc 	andi	r2,r2,255
 4008050:	e0ffeb84 	addi	r3,fp,-82
 4008054:	1885883a 	add	r2,r3,r2
 4008058:	10000005 	stb	zero,0(r2)
                        n = 0;
 400805c:	e03fea8d 	sth	zero,-86(fp)
                        break;
 4008060:	00003006 	br	4008124 <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
 4008064:	e0bfeb03 	ldbu	r2,-84(fp)
 4008068:	e0ffff03 	ldbu	r3,-4(fp)
 400806c:	1806913a 	slli	r3,r3,4
 4008070:	18c001d4 	ori	r3,r3,7
 4008074:	1809883a 	mov	r4,r3
 4008078:	e0ffeb84 	addi	r3,fp,-82
 400807c:	1885883a 	add	r2,r3,r2
 4008080:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
 4008084:	e0bfeb03 	ldbu	r2,-84(fp)
 4008088:	10800044 	addi	r2,r2,1
 400808c:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
 4008090:	e0bfeb03 	ldbu	r2,-84(fp)
 4008094:	10c00044 	addi	r3,r2,1
 4008098:	e0ffeb05 	stb	r3,-84(fp)
 400809c:	11003fcc 	andi	r4,r2,255
 40080a0:	e0bffd17 	ldw	r2,-12(fp)
 40080a4:	10c00044 	addi	r3,r2,1
 40080a8:	e0fffd15 	stw	r3,-12(fp)
 40080ac:	10c00003 	ldbu	r3,0(r2)
 40080b0:	e0bfeb84 	addi	r2,fp,-82
 40080b4:	1105883a 	add	r2,r2,r4
 40080b8:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
 40080bc:	e0bfeb03 	ldbu	r2,-84(fp)
 40080c0:	10c00044 	addi	r3,r2,1
 40080c4:	e0ffeb05 	stb	r3,-84(fp)
 40080c8:	11003fcc 	andi	r4,r2,255
 40080cc:	e0bffd17 	ldw	r2,-12(fp)
 40080d0:	10c00044 	addi	r3,r2,1
 40080d4:	e0fffd15 	stw	r3,-12(fp)
 40080d8:	10c00003 	ldbu	r3,0(r2)
 40080dc:	e0bfeb84 	addi	r2,fp,-82
 40080e0:	1105883a 	add	r2,r2,r4
 40080e4:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
 40080e8:	e0bfeb03 	ldbu	r2,-84(fp)
 40080ec:	10c00044 	addi	r3,r2,1
 40080f0:	e0ffeb05 	stb	r3,-84(fp)
 40080f4:	11003fcc 	andi	r4,r2,255
 40080f8:	e0bffd17 	ldw	r2,-12(fp)
 40080fc:	10c00044 	addi	r3,r2,1
 4008100:	e0fffd15 	stw	r3,-12(fp)
 4008104:	10c00003 	ldbu	r3,0(r2)
 4008108:	e0bfeb84 	addi	r2,fp,-82
 400810c:	1105883a 	add	r2,r2,r4
 4008110:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
 4008114:	e0bfea8b 	ldhu	r2,-86(fp)
 4008118:	10bfff44 	addi	r2,r2,-3
 400811c:	e0bfea8d 	sth	r2,-86(fp)
                        break;
 4008120:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
 4008124:	e0ffeb03 	ldbu	r3,-84(fp)
 4008128:	e0bfeb43 	ldbu	r2,-83(fp)
 400812c:	1880022e 	bgeu	r3,r2,4008138 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
 4008130:	e0bfea8b 	ldhu	r2,-86(fp)
 4008134:	103f6a1e 	bne	r2,zero,4007ee0 <__alt_mem_onchip_memory2_0+0xfc006c40>
                        USBTRACE2(" wptr:\t", wptr);
 4008138:	e0bfeb03 	ldbu	r2,-84(fp)
 400813c:	01402004 	movi	r5,128
 4008140:	1009883a 	mov	r4,r2
 4008144:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
 4008148:	e0bffc17 	ldw	r2,-16(fp)
 400814c:	10c00217 	ldw	r3,8(r2)
 4008150:	e0bffc17 	ldw	r2,-16(fp)
 4008154:	10800303 	ldbu	r2,12(r2)
 4008158:	11003fcc 	andi	r4,r2,255
 400815c:	e0bffc17 	ldw	r2,-16(fp)
 4008160:	10800643 	ldbu	r2,25(r2)
 4008164:	11403fcc 	andi	r5,r2,255
 4008168:	e1bfeb03 	ldbu	r6,-84(fp)
 400816c:	e0bfeb84 	addi	r2,fp,-82
 4008170:	d8800015 	stw	r2,0(sp)
 4008174:	300f883a 	mov	r7,r6
 4008178:	280d883a 	mov	r6,r5
 400817c:	200b883a 	mov	r5,r4
 4008180:	1809883a 	mov	r4,r3
 4008184:	40019900 	call	4001990 <_ZN3USB11outTransferEhhtPh>
 4008188:	e0bfea05 	stb	r2,-88(fp)
 400818c:	e0bfea03 	ldbu	r2,-88(fp)
 4008190:	1004c03a 	cmpne	r2,r2,zero
 4008194:	10803fcc 	andi	r2,r2,255
 4008198:	1000021e 	bne	r2,zero,40081a4 <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
 400819c:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
 40081a0:	003f4f06 	br	4007ee0 <__alt_mem_onchip_memory2_0+0xfc006c40>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
 40081a4:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
 40081a8:	e0bfea03 	ldbu	r2,-88(fp)
}
 40081ac:	e037883a 	mov	sp,fp
 40081b0:	dfc00117 	ldw	ra,4(sp)
 40081b4:	df000017 	ldw	fp,0(sp)
 40081b8:	dec00204 	addi	sp,sp,8
 40081bc:	f800283a 	ret

040081c0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
 40081c0:	defffb04 	addi	sp,sp,-20
 40081c4:	df000415 	stw	fp,16(sp)
 40081c8:	df000404 	addi	fp,sp,16
 40081cc:	e13ffd15 	stw	r4,-12(fp)
 40081d0:	e17ffe15 	stw	r5,-8(fp)
 40081d4:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
 40081d8:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
 40081dc:	e0bffe17 	ldw	r2,-8(fp)
 40081e0:	10800003 	ldbu	r2,0(r2)
 40081e4:	108003cc 	andi	r2,r2,15
 40081e8:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
 40081ec:	e0bffc43 	ldbu	r2,-15(fp)
 40081f0:	1080030c 	andi	r2,r2,12
 40081f4:	10800120 	cmpeqi	r2,r2,4
 40081f8:	1000021e 	bne	r2,zero,4008204 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
 40081fc:	e0bffc03 	ldbu	r2,-16(fp)
 4008200:	00003b06 	br	40082f0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
 4008204:	e0bffc43 	ldbu	r2,-15(fp)
 4008208:	10c00160 	cmpeqi	r3,r2,5
 400820c:	18002e1e 	bne	r3,zero,40082c8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
 4008210:	10c00188 	cmpgei	r3,r2,6
 4008214:	1800031e 	bne	r3,zero,4008224 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
 4008218:	10800120 	cmpeqi	r2,r2,4
 400821c:	1000061e 	bne	r2,zero,4008238 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
 4008220:	00003206 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
 4008224:	10c001a0 	cmpeqi	r3,r2,6
 4008228:	1800181e 	bne	r3,zero,400828c <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
 400822c:	108001e0 	cmpeqi	r2,r2,7
 4008230:	1000011e 	bne	r2,zero,4008238 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
 4008234:	00002d06 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
 4008238:	e0bfff17 	ldw	r2,-4(fp)
 400823c:	10c00044 	addi	r3,r2,1
 4008240:	e0ffff15 	stw	r3,-4(fp)
 4008244:	e0fffe17 	ldw	r3,-8(fp)
 4008248:	18c00043 	ldbu	r3,1(r3)
 400824c:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
 4008250:	e0bfff17 	ldw	r2,-4(fp)
 4008254:	10c00044 	addi	r3,r2,1
 4008258:	e0ffff15 	stw	r3,-4(fp)
 400825c:	e0fffe17 	ldw	r3,-8(fp)
 4008260:	18c00083 	ldbu	r3,2(r3)
 4008264:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
 4008268:	e0bfff17 	ldw	r2,-4(fp)
 400826c:	10c00044 	addi	r3,r2,1
 4008270:	e0ffff15 	stw	r3,-4(fp)
 4008274:	e0fffe17 	ldw	r3,-8(fp)
 4008278:	18c000c3 	ldbu	r3,3(r3)
 400827c:	10c00005 	stb	r3,0(r2)
                rc = 3;
 4008280:	008000c4 	movi	r2,3
 4008284:	e0bffc05 	stb	r2,-16(fp)
                break;
 4008288:	00001806 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
 400828c:	e0bfff17 	ldw	r2,-4(fp)
 4008290:	10c00044 	addi	r3,r2,1
 4008294:	e0ffff15 	stw	r3,-4(fp)
 4008298:	e0fffe17 	ldw	r3,-8(fp)
 400829c:	18c00043 	ldbu	r3,1(r3)
 40082a0:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
 40082a4:	e0bfff17 	ldw	r2,-4(fp)
 40082a8:	10c00044 	addi	r3,r2,1
 40082ac:	e0ffff15 	stw	r3,-4(fp)
 40082b0:	e0fffe17 	ldw	r3,-8(fp)
 40082b4:	18c00083 	ldbu	r3,2(r3)
 40082b8:	10c00005 	stb	r3,0(r2)
                rc = 2;
 40082bc:	00800084 	movi	r2,2
 40082c0:	e0bffc05 	stb	r2,-16(fp)
                break;
 40082c4:	00000906 	br	40082ec <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
 40082c8:	e0bfff17 	ldw	r2,-4(fp)
 40082cc:	10c00044 	addi	r3,r2,1
 40082d0:	e0ffff15 	stw	r3,-4(fp)
 40082d4:	e0fffe17 	ldw	r3,-8(fp)
 40082d8:	18c00043 	ldbu	r3,1(r3)
 40082dc:	10c00005 	stb	r3,0(r2)
                rc = 1;
 40082e0:	00800044 	movi	r2,1
 40082e4:	e0bffc05 	stb	r2,-16(fp)
                break;
 40082e8:	0001883a 	nop
            default:
                break;
        }
        return(rc);
 40082ec:	e0bffc03 	ldbu	r2,-16(fp)
}
 40082f0:	e037883a 	mov	sp,fp
 40082f4:	df000017 	ldw	fp,0(sp)
 40082f8:	dec00104 	addi	sp,sp,4
 40082fc:	f800283a 	ret

04008300 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
 4008300:	defffb04 	addi	sp,sp,-20
 4008304:	dfc00415 	stw	ra,16(sp)
 4008308:	df000315 	stw	fp,12(sp)
 400830c:	df000304 	addi	fp,sp,12
 4008310:	e13ffd15 	stw	r4,-12(fp)
 4008314:	e17ffe15 	stw	r5,-8(fp)
 4008318:	3005883a 	mov	r2,r6
 400831c:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
 4008320:	e0bffd17 	ldw	r2,-12(fp)
 4008324:	1009883a 	mov	r4,r2
 4008328:	40056400 	call	4005640 <_ZN13USBReadParserC1Ev>
 400832c:	008100b4 	movhi	r2,1026
 4008330:	108b3c04 	addi	r2,r2,11504
 4008334:	e0fffd17 	ldw	r3,-12(fp)
 4008338:	18800015 	stw	r2,0(r3)
 400833c:	e0bffd17 	ldw	r2,-12(fp)
 4008340:	e0fffe17 	ldw	r3,-8(fp)
 4008344:	10c00115 	stw	r3,4(r2)
 4008348:	e0bffd17 	ldw	r2,-12(fp)
 400834c:	10800204 	addi	r2,r2,8
 4008350:	1009883a 	mov	r4,r2
 4008354:	4004f300 	call	4004f30 <_ZN16MultiValueBufferC1Ev>
 4008358:	e0bffd17 	ldw	r2,-12(fp)
 400835c:	10800404 	addi	r2,r2,16
 4008360:	1009883a 	mov	r4,r2
 4008364:	4004f900 	call	4004f90 <_ZN20MultiByteValueParserC1Ev>
 4008368:	e0bffd17 	ldw	r2,-12(fp)
 400836c:	10800604 	addi	r2,r2,24
 4008370:	1009883a 	mov	r4,r2
 4008374:	400504c0 	call	400504c <_ZN11ByteSkipperC1Ev>
 4008378:	e0bffd17 	ldw	r2,-12(fp)
 400837c:	10000c05 	stb	zero,48(r2)
 4008380:	e0bffd17 	ldw	r2,-12(fp)
 4008384:	10000c45 	stb	zero,49(r2)
 4008388:	e0bffd17 	ldw	r2,-12(fp)
 400838c:	10000c85 	stb	zero,50(r2)
 4008390:	e0bffd17 	ldw	r2,-12(fp)
 4008394:	10000cc5 	stb	zero,51(r2)
 4008398:	e0bffd17 	ldw	r2,-12(fp)
 400839c:	e0ffff03 	ldbu	r3,-4(fp)
 40083a0:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
 40083a4:	e0bffd17 	ldw	r2,-12(fp)
 40083a8:	10c00804 	addi	r3,r2,32
 40083ac:	e0bffd17 	ldw	r2,-12(fp)
 40083b0:	19803fcc 	andi	r6,r3,255
 40083b4:	11000243 	ldbu	r4,9(r2)
 40083b8:	2008703a 	and	r4,r4,zero
 40083bc:	200b883a 	mov	r5,r4
 40083c0:	3009883a 	mov	r4,r6
 40083c4:	2908b03a 	or	r4,r5,r4
 40083c8:	11000245 	stb	r4,9(r2)
 40083cc:	1808d23a 	srli	r4,r3,8
 40083d0:	21803fcc 	andi	r6,r4,255
 40083d4:	11000283 	ldbu	r4,10(r2)
 40083d8:	2008703a 	and	r4,r4,zero
 40083dc:	200b883a 	mov	r5,r4
 40083e0:	3009883a 	mov	r4,r6
 40083e4:	2908b03a 	or	r4,r5,r4
 40083e8:	11000285 	stb	r4,10(r2)
 40083ec:	1808d43a 	srli	r4,r3,16
 40083f0:	21803fcc 	andi	r6,r4,255
 40083f4:	110002c3 	ldbu	r4,11(r2)
 40083f8:	2008703a 	and	r4,r4,zero
 40083fc:	200b883a 	mov	r5,r4
 4008400:	3009883a 	mov	r4,r6
 4008404:	2908b03a 	or	r4,r5,r4
 4008408:	110002c5 	stb	r4,11(r2)
 400840c:	180ad63a 	srli	r5,r3,24
 4008410:	10c00303 	ldbu	r3,12(r2)
 4008414:	1806703a 	and	r3,r3,zero
 4008418:	1809883a 	mov	r4,r3
 400841c:	2807883a 	mov	r3,r5
 4008420:	20c6b03a 	or	r3,r4,r3
 4008424:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
 4008428:	e0bffd17 	ldw	r2,-12(fp)
 400842c:	10c00404 	addi	r3,r2,16
 4008430:	e0bffd17 	ldw	r2,-12(fp)
 4008434:	10800204 	addi	r2,r2,8
 4008438:	100b883a 	mov	r5,r2
 400843c:	1809883a 	mov	r4,r3
 4008440:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 4008444:	e0bffd17 	ldw	r2,-12(fp)
 4008448:	10c00604 	addi	r3,r2,24
 400844c:	e0bffd17 	ldw	r2,-12(fp)
 4008450:	10800204 	addi	r2,r2,8
 4008454:	100b883a 	mov	r5,r2
 4008458:	1809883a 	mov	r4,r3
 400845c:	40050880 	call	4005088 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
 4008460:	0001883a 	nop
 4008464:	e037883a 	mov	sp,fp
 4008468:	dfc00117 	ldw	ra,4(sp)
 400846c:	df000017 	ldw	fp,0(sp)
 4008470:	dec00204 	addi	sp,sp,8
 4008474:	f800283a 	ret

04008478 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 4008478:	defff804 	addi	sp,sp,-32
 400847c:	dfc00715 	stw	ra,28(sp)
 4008480:	df000615 	stw	fp,24(sp)
 4008484:	df000604 	addi	fp,sp,24
 4008488:	e13ffc15 	stw	r4,-16(fp)
 400848c:	2805883a 	mov	r2,r5
 4008490:	e1bffe15 	stw	r6,-8(fp)
 4008494:	e1ffff15 	stw	r7,-4(fp)
 4008498:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
 400849c:	e0bffd0b 	ldhu	r2,-12(fp)
 40084a0:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
 40084a4:	e0bffe17 	ldw	r2,-8(fp)
 40084a8:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
 40084ac:	e0bffa0b 	ldhu	r2,-24(fp)
 40084b0:	10bfffcc 	andi	r2,r2,65535
 40084b4:	10000a26 	beq	r2,zero,40084e0 <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
 40084b8:	e0bffb04 	addi	r2,fp,-20
 40084bc:	e1bffa04 	addi	r6,fp,-24
 40084c0:	100b883a 	mov	r5,r2
 40084c4:	e13ffc17 	ldw	r4,-16(fp)
 40084c8:	40084f40 	call	40084f4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
 40084cc:	1080005c 	xori	r2,r2,1
 40084d0:	10803fcc 	andi	r2,r2,255
 40084d4:	1000011e 	bne	r2,zero,40084dc <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
 40084d8:	003ff406 	br	40084ac <__alt_mem_onchip_memory2_0+0xfc00720c>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
 40084dc:	0001883a 	nop
}
 40084e0:	e037883a 	mov	sp,fp
 40084e4:	dfc00117 	ldw	ra,4(sp)
 40084e8:	df000017 	ldw	fp,0(sp)
 40084ec:	dec00204 	addi	sp,sp,8
 40084f0:	f800283a 	ret

040084f4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 40084f4:	defff604 	addi	sp,sp,-40
 40084f8:	dfc00915 	stw	ra,36(sp)
 40084fc:	df000815 	stw	fp,32(sp)
 4008500:	df000804 	addi	fp,sp,32
 4008504:	e13ffc15 	stw	r4,-16(fp)
 4008508:	e17ffd15 	stw	r5,-12(fp)
 400850c:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 4008510:	e0bffc17 	ldw	r2,-16(fp)
 4008514:	10800804 	addi	r2,r2,32
 4008518:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 400851c:	e0bffc17 	ldw	r2,-16(fp)
 4008520:	10800804 	addi	r2,r2,32
 4008524:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
 4008528:	e0bffc17 	ldw	r2,-16(fp)
 400852c:	10800c03 	ldbu	r2,48(r2)
 4008530:	10803fcc 	andi	r2,r2,255
 4008534:	10c00168 	cmpgeui	r3,r2,5
 4008538:	1801411e 	bne	r3,zero,4008a40 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
 400853c:	100690ba 	slli	r3,r2,2
 4008540:	00810074 	movhi	r2,1025
 4008544:	10a15504 	addi	r2,r2,-31404
 4008548:	1885883a 	add	r2,r3,r2
 400854c:	10800017 	ldw	r2,0(r2)
 4008550:	1000683a 	jmp	r2
 4008554:	04008568 	cmpgeui	r16,zero,533
 4008558:	0400859c 	xori	r16,zero,534
 400855c:	04008624 	muli	r16,zero,536
 4008560:	040086b8 	rdprs	r16,zero,538
 4008564:	04008724 	muli	r16,zero,540
                case 0:
                        theBuffer.valueSize = 2;
 4008568:	e0bffc17 	ldw	r2,-16(fp)
 400856c:	00c00084 	movi	r3,2
 4008570:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 4008574:	e0bffc17 	ldw	r2,-16(fp)
 4008578:	10c00404 	addi	r3,r2,16
 400857c:	e0bffc17 	ldw	r2,-16(fp)
 4008580:	10800204 	addi	r2,r2,8
 4008584:	100b883a 	mov	r5,r2
 4008588:	1809883a 	mov	r4,r3
 400858c:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 4008590:	e0bffc17 	ldw	r2,-16(fp)
 4008594:	00c00044 	movi	r3,1
 4008598:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 400859c:	e0bffc17 	ldw	r2,-16(fp)
 40085a0:	10800404 	addi	r2,r2,16
 40085a4:	e1bffe17 	ldw	r6,-8(fp)
 40085a8:	e17ffd17 	ldw	r5,-12(fp)
 40085ac:	1009883a 	mov	r4,r2
 40085b0:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 40085b4:	1080005c 	xori	r2,r2,1
 40085b8:	10803fcc 	andi	r2,r2,255
 40085bc:	10000226 	beq	r2,zero,40085c8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
 40085c0:	0005883a 	mov	r2,zero
 40085c4:	00011f06 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 40085c8:	e0bffc17 	ldw	r2,-16(fp)
 40085cc:	10c00217 	ldw	r3,8(r2)
 40085d0:	1806d23a 	srli	r3,r3,8
 40085d4:	10800317 	ldw	r2,12(r2)
 40085d8:	10803fcc 	andi	r2,r2,255
 40085dc:	1004963a 	slli	r2,r2,24
 40085e0:	10c4b03a 	or	r2,r2,r3
 40085e4:	10c00003 	ldbu	r3,0(r2)
 40085e8:	e0bffc17 	ldw	r2,-16(fp)
 40085ec:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 40085f0:	e0bffc17 	ldw	r2,-16(fp)
 40085f4:	10c00217 	ldw	r3,8(r2)
 40085f8:	1806d23a 	srli	r3,r3,8
 40085fc:	10800317 	ldw	r2,12(r2)
 4008600:	10803fcc 	andi	r2,r2,255
 4008604:	1004963a 	slli	r2,r2,24
 4008608:	10c4b03a 	or	r2,r2,r3
 400860c:	10c00043 	ldbu	r3,1(r2)
 4008610:	e0bffc17 	ldw	r2,-16(fp)
 4008614:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
 4008618:	e0bffc17 	ldw	r2,-16(fp)
 400861c:	00c00084 	movi	r3,2
 4008620:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 4008624:	e0bffc17 	ldw	r2,-16(fp)
 4008628:	10800804 	addi	r2,r2,32
 400862c:	10c00084 	addi	r3,r2,2
 4008630:	e0bffc17 	ldw	r2,-16(fp)
 4008634:	19803fcc 	andi	r6,r3,255
 4008638:	11000243 	ldbu	r4,9(r2)
 400863c:	2008703a 	and	r4,r4,zero
 4008640:	200b883a 	mov	r5,r4
 4008644:	3009883a 	mov	r4,r6
 4008648:	2908b03a 	or	r4,r5,r4
 400864c:	11000245 	stb	r4,9(r2)
 4008650:	1808d23a 	srli	r4,r3,8
 4008654:	21803fcc 	andi	r6,r4,255
 4008658:	11000283 	ldbu	r4,10(r2)
 400865c:	2008703a 	and	r4,r4,zero
 4008660:	200b883a 	mov	r5,r4
 4008664:	3009883a 	mov	r4,r6
 4008668:	2908b03a 	or	r4,r5,r4
 400866c:	11000285 	stb	r4,10(r2)
 4008670:	1808d43a 	srli	r4,r3,16
 4008674:	21803fcc 	andi	r6,r4,255
 4008678:	110002c3 	ldbu	r4,11(r2)
 400867c:	2008703a 	and	r4,r4,zero
 4008680:	200b883a 	mov	r5,r4
 4008684:	3009883a 	mov	r4,r6
 4008688:	2908b03a 	or	r4,r5,r4
 400868c:	110002c5 	stb	r4,11(r2)
 4008690:	180ad63a 	srli	r5,r3,24
 4008694:	10c00303 	ldbu	r3,12(r2)
 4008698:	1806703a 	and	r3,r3,zero
 400869c:	1809883a 	mov	r4,r3
 40086a0:	2807883a 	mov	r3,r5
 40086a4:	20c6b03a 	or	r3,r4,r3
 40086a8:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
 40086ac:	e0bffc17 	ldw	r2,-16(fp)
 40086b0:	00c000c4 	movi	r3,3
 40086b4:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
 40086b8:	e0bffc17 	ldw	r2,-16(fp)
 40086bc:	10800c83 	ldbu	r2,50(r2)
 40086c0:	10803fcc 	andi	r2,r2,255
 40086c4:	10c00120 	cmpeqi	r3,r2,4
 40086c8:	1800021e 	bne	r3,zero,40086d4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
 40086cc:	10800148 	cmpgei	r2,r2,5
 40086d0:	00000306 	br	40086e0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 40086d4:	e0bffc17 	ldw	r2,-16(fp)
 40086d8:	10000d45 	stb	zero,53(r2)
                                        break;
 40086dc:	00000106 	br	40086e4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
 40086e0:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
 40086e4:	e0bffc17 	ldw	r2,-16(fp)
 40086e8:	10800c43 	ldbu	r2,49(r2)
 40086ec:	10bfff84 	addi	r2,r2,-2
 40086f0:	1007883a 	mov	r3,r2
 40086f4:	e0bffc17 	ldw	r2,-16(fp)
 40086f8:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 40086fc:	e0bffc17 	ldw	r2,-16(fp)
 4008700:	10c00404 	addi	r3,r2,16
 4008704:	e0bffc17 	ldw	r2,-16(fp)
 4008708:	10800204 	addi	r2,r2,8
 400870c:	100b883a 	mov	r5,r2
 4008710:	1809883a 	mov	r4,r3
 4008714:	4004fcc0 	call	4004fcc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 4008718:	e0bffc17 	ldw	r2,-16(fp)
 400871c:	00c00104 	movi	r3,4
 4008720:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
 4008724:	e0bffc17 	ldw	r2,-16(fp)
 4008728:	10800c83 	ldbu	r2,50(r2)
 400872c:	10803fcc 	andi	r2,r2,255
 4008730:	10c00120 	cmpeqi	r3,r2,4
 4008734:	1800141e 	bne	r3,zero,4008788 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
 4008738:	10c00160 	cmpeqi	r3,r2,5
 400873c:	18005a1e 	bne	r3,zero,40088a8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
 4008740:	108000a0 	cmpeqi	r2,r2,2
 4008744:	10008526 	beq	r2,zero,400895c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 4008748:	e0bffc17 	ldw	r2,-16(fp)
 400874c:	10800404 	addi	r2,r2,16
 4008750:	e1bffe17 	ldw	r6,-8(fp)
 4008754:	e17ffd17 	ldw	r5,-12(fp)
 4008758:	1009883a 	mov	r4,r2
 400875c:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4008760:	1080005c 	xori	r2,r2,1
 4008764:	10803fcc 	andi	r2,r2,255
 4008768:	10000226 	beq	r2,zero,4008774 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
 400876c:	0005883a 	mov	r2,zero
 4008770:	0000b406 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
 4008774:	e0bffa17 	ldw	r2,-24(fp)
 4008778:	10c00143 	ldbu	r3,5(r2)
 400877c:	e0bffc17 	ldw	r2,-16(fp)
 4008780:	10c00d85 	stb	r3,54(r2)
                                        break;
 4008784:	00008b06 	br	40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 4008788:	e0bffc17 	ldw	r2,-16(fp)
 400878c:	10800404 	addi	r2,r2,16
 4008790:	e1bffe17 	ldw	r6,-8(fp)
 4008794:	e17ffd17 	ldw	r5,-12(fp)
 4008798:	1009883a 	mov	r4,r2
 400879c:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 40087a0:	1080005c 	xori	r2,r2,1
 40087a4:	10803fcc 	andi	r2,r2,255
 40087a8:	10000226 	beq	r2,zero,40087b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
 40087ac:	0005883a 	mov	r2,zero
 40087b0:	0000a406 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
 40087b4:	e0bffb17 	ldw	r2,-20(fp)
 40087b8:	10800083 	ldbu	r2,2(r2)
 40087bc:	10803fcc 	andi	r2,r2,255
 40087c0:	01402004 	movi	r5,128
 40087c4:	1009883a 	mov	r4,r2
 40087c8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
 40087cc:	e0bffb17 	ldw	r2,-20(fp)
 40087d0:	108000c3 	ldbu	r2,3(r2)
 40087d4:	10803fcc 	andi	r2,r2,255
 40087d8:	01402004 	movi	r5,128
 40087dc:	1009883a 	mov	r4,r2
 40087e0:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
 40087e4:	e0bffb17 	ldw	r2,-20(fp)
 40087e8:	10800103 	ldbu	r2,4(r2)
 40087ec:	10803fcc 	andi	r2,r2,255
 40087f0:	01402004 	movi	r5,128
 40087f4:	1009883a 	mov	r4,r2
 40087f8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
 40087fc:	e0bffb17 	ldw	r2,-20(fp)
 4008800:	10800143 	ldbu	r2,5(r2)
 4008804:	10803fcc 	andi	r2,r2,255
 4008808:	01402004 	movi	r5,128
 400880c:	1009883a 	mov	r4,r2
 4008810:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
 4008814:	e0bffb17 	ldw	r2,-20(fp)
 4008818:	10800183 	ldbu	r2,6(r2)
 400881c:	10803fcc 	andi	r2,r2,255
 4008820:	01402004 	movi	r5,128
 4008824:	1009883a 	mov	r4,r2
 4008828:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
 400882c:	e0bffb17 	ldw	r2,-20(fp)
 4008830:	108001c3 	ldbu	r2,7(r2)
 4008834:	10803fcc 	andi	r2,r2,255
 4008838:	01402004 	movi	r5,128
 400883c:	1009883a 	mov	r4,r2
 4008840:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
 4008844:	e0bffc17 	ldw	r2,-16(fp)
 4008848:	10800d03 	ldbu	r2,52(r2)
 400884c:	10803fcc 	andi	r2,r2,255
 4008850:	10000a26 	beq	r2,zero,400887c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
 4008854:	e0bffb17 	ldw	r2,-20(fp)
 4008858:	10800143 	ldbu	r2,5(r2)
 400885c:	10803fcc 	andi	r2,r2,255
 4008860:	10800058 	cmpnei	r2,r2,1
 4008864:	10004e1e 	bne	r2,zero,40089a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
 4008868:	e0bffb17 	ldw	r2,-20(fp)
 400886c:	10800183 	ldbu	r2,6(r2)
 4008870:	10803fcc 	andi	r2,r2,255
 4008874:	108000d8 	cmpnei	r2,r2,3
 4008878:	1000491e 	bne	r2,zero,40089a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
 400887c:	e0bffc17 	ldw	r2,-16(fp)
 4008880:	00c00044 	movi	r3,1
 4008884:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
 4008888:	e0bffc17 	ldw	r2,-16(fp)
 400888c:	10800cc3 	ldbu	r2,51(r2)
 4008890:	10803fcc 	andi	r2,r2,255
 4008894:	108000a8 	cmpgeui	r2,r2,2
 4008898:	1000431e 	bne	r2,zero,40089a8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
 400889c:	e0bffc17 	ldw	r2,-16(fp)
 40088a0:	10000cc5 	stb	zero,51(r2)
                                        break;
 40088a4:	00004006 	br	40089a8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 40088a8:	e0bffc17 	ldw	r2,-16(fp)
 40088ac:	10800404 	addi	r2,r2,16
 40088b0:	e1bffe17 	ldw	r6,-8(fp)
 40088b4:	e17ffd17 	ldw	r5,-12(fp)
 40088b8:	1009883a 	mov	r4,r2
 40088bc:	40069f80 	call	40069f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 40088c0:	1080005c 	xori	r2,r2,1
 40088c4:	10803fcc 	andi	r2,r2,255
 40088c8:	10000226 	beq	r2,zero,40088d4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
 40088cc:	0005883a 	mov	r2,zero
 40088d0:	00005c06 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
 40088d4:	e0bffc17 	ldw	r2,-16(fp)
 40088d8:	10800d43 	ldbu	r2,53(r2)
 40088dc:	10803fcc 	andi	r2,r2,255
 40088e0:	10003326 	beq	r2,zero,40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
 40088e4:	e0bffc17 	ldw	r2,-16(fp)
 40088e8:	10800cc3 	ldbu	r2,51(r2)
 40088ec:	10803fcc 	andi	r2,r2,255
 40088f0:	108000a8 	cmpgeui	r2,r2,2
 40088f4:	10002e1e 	bne	r2,zero,40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) ) 
 40088f8:	e0bffc17 	ldw	r2,-16(fp)
 40088fc:	10800117 	ldw	r2,4(r2)
 4008900:	10800017 	ldw	r2,0(r2)
 4008904:	10800017 	ldw	r2,0(r2)
 4008908:	e0fffc17 	ldw	r3,-16(fp)
 400890c:	19000117 	ldw	r4,4(r3)
 4008910:	e0fffc17 	ldw	r3,-16(fp)
 4008914:	18c00d83 	ldbu	r3,54(r3)
 4008918:	19403fcc 	andi	r5,r3,255
 400891c:	e0fffc17 	ldw	r3,-16(fp)
 4008920:	18c00804 	addi	r3,r3,32
 4008924:	d8c00115 	stw	r3,4(sp)
 4008928:	d8000015 	stw	zero,0(sp)
 400892c:	000f883a 	mov	r7,zero
 4008930:	000d883a 	mov	r6,zero
 4008934:	103ee83a 	callr	r2
 4008938:	10803fcc 	andi	r2,r2,255
 400893c:	10001c26 	beq	r2,zero,40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
 4008940:	e0bffc17 	ldw	r2,-16(fp)
 4008944:	10800cc3 	ldbu	r2,51(r2)
 4008948:	10800044 	addi	r2,r2,1
 400894c:	1007883a 	mov	r3,r2
 4008950:	e0bffc17 	ldw	r2,-16(fp)
 4008954:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
 4008958:	00001506 	br	40089b0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 400895c:	e0bffc17 	ldw	r2,-16(fp)
 4008960:	10c00604 	addi	r3,r2,24
 4008964:	e0bffc17 	ldw	r2,-16(fp)
 4008968:	10800c43 	ldbu	r2,49(r2)
 400896c:	10803fcc 	andi	r2,r2,255
 4008970:	10bfff84 	addi	r2,r2,-2
 4008974:	10bfffcc 	andi	r2,r2,65535
 4008978:	100f883a 	mov	r7,r2
 400897c:	e1bffe17 	ldw	r6,-8(fp)
 4008980:	e17ffd17 	ldw	r5,-12(fp)
 4008984:	1809883a 	mov	r4,r3
 4008988:	40050f00 	call	40050f0 <_ZN11ByteSkipper4SkipEPPhPtt>
 400898c:	1080005c 	xori	r2,r2,1
 4008990:	10803fcc 	andi	r2,r2,255
 4008994:	10000726 	beq	r2,zero,40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
 4008998:	0005883a 	mov	r2,zero
 400899c:	00002906 	br	4008a44 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
 40089a0:	0001883a 	nop
 40089a4:	00000306 	br	40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
 40089a8:	0001883a 	nop
 40089ac:	00000106 	br	40089b4 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) ) 
                                                        nEPs++;
                                        }
                                        break;
 40089b0:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
 40089b4:	e0bffc17 	ldw	r2,-16(fp)
 40089b8:	10c00804 	addi	r3,r2,32
 40089bc:	e0bffc17 	ldw	r2,-16(fp)
 40089c0:	19803fcc 	andi	r6,r3,255
 40089c4:	11000243 	ldbu	r4,9(r2)
 40089c8:	2008703a 	and	r4,r4,zero
 40089cc:	200b883a 	mov	r5,r4
 40089d0:	3009883a 	mov	r4,r6
 40089d4:	2908b03a 	or	r4,r5,r4
 40089d8:	11000245 	stb	r4,9(r2)
 40089dc:	1808d23a 	srli	r4,r3,8
 40089e0:	21803fcc 	andi	r6,r4,255
 40089e4:	11000283 	ldbu	r4,10(r2)
 40089e8:	2008703a 	and	r4,r4,zero
 40089ec:	200b883a 	mov	r5,r4
 40089f0:	3009883a 	mov	r4,r6
 40089f4:	2908b03a 	or	r4,r5,r4
 40089f8:	11000285 	stb	r4,10(r2)
 40089fc:	1808d43a 	srli	r4,r3,16
 4008a00:	21803fcc 	andi	r6,r4,255
 4008a04:	110002c3 	ldbu	r4,11(r2)
 4008a08:	2008703a 	and	r4,r4,zero
 4008a0c:	200b883a 	mov	r5,r4
 4008a10:	3009883a 	mov	r4,r6
 4008a14:	2908b03a 	or	r4,r5,r4
 4008a18:	110002c5 	stb	r4,11(r2)
 4008a1c:	180ad63a 	srli	r5,r3,24
 4008a20:	10c00303 	ldbu	r3,12(r2)
 4008a24:	1806703a 	and	r3,r3,zero
 4008a28:	1809883a 	mov	r4,r3
 4008a2c:	2807883a 	mov	r3,r5
 4008a30:	20c6b03a 	or	r3,r4,r3
 4008a34:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
 4008a38:	e0bffc17 	ldw	r2,-16(fp)
 4008a3c:	10000c05 	stb	zero,48(r2)
        }
        return true;
 4008a40:	00800044 	movi	r2,1
}
 4008a44:	e037883a 	mov	sp,fp
 4008a48:	dfc00117 	ldw	ra,4(sp)
 4008a4c:	df000017 	ldw	fp,0(sp)
 4008a50:	dec00204 	addi	sp,sp,8
 4008a54:	f800283a 	ret

04008a58 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
 4008a58:	defff904 	addi	sp,sp,-28
 4008a5c:	df000615 	stw	fp,24(sp)
 4008a60:	df000604 	addi	fp,sp,24
 4008a64:	e13ffb15 	stw	r4,-20(fp)
 4008a68:	3009883a 	mov	r4,r6
 4008a6c:	3807883a 	mov	r3,r7
 4008a70:	e0800117 	ldw	r2,4(fp)
 4008a74:	e17ffc05 	stb	r5,-16(fp)
 4008a78:	e13ffd05 	stb	r4,-12(fp)
 4008a7c:	e0fffe05 	stb	r3,-8(fp)
 4008a80:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
 4008a84:	e0800217 	ldw	r2,8(fp)
 4008a88:	10c000c3 	ldbu	r3,3(r2)
 4008a8c:	e0bffb17 	ldw	r2,-20(fp)
 4008a90:	10800483 	ldbu	r2,18(r2)
 4008a94:	1884703a 	and	r2,r3,r2
 4008a98:	10803fcc 	andi	r2,r2,255
 4008a9c:	10800098 	cmpnei	r2,r2,2
 4008aa0:	10001f1e 	bne	r2,zero,4008b20 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
 4008aa4:	e0800217 	ldw	r2,8(fp)
 4008aa8:	10800083 	ldbu	r2,2(r2)
 4008aac:	10803fcc 	andi	r2,r2,255
 4008ab0:	1080201c 	xori	r2,r2,128
 4008ab4:	10bfe004 	addi	r2,r2,-128
 4008ab8:	1000020e 	bge	r2,zero,4008ac4 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
 4008abc:	00800044 	movi	r2,1
 4008ac0:	00000106 	br	4008ac8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
 4008ac4:	00800084 	movi	r2,2
 4008ac8:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        } 

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 4008acc:	e0fffa03 	ldbu	r3,-24(fp)
 4008ad0:	e0800217 	ldw	r2,8(fp)
 4008ad4:	10800083 	ldbu	r2,2(r2)
 4008ad8:	108003cc 	andi	r2,r2,15
 4008adc:	100b883a 	mov	r5,r2
 4008ae0:	e13ffb17 	ldw	r4,-20(fp)
 4008ae4:	1805883a 	mov	r2,r3
 4008ae8:	1085883a 	add	r2,r2,r2
 4008aec:	10c5883a 	add	r2,r2,r3
 4008af0:	2085883a 	add	r2,r4,r2
 4008af4:	108004c4 	addi	r2,r2,19
 4008af8:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
 4008afc:	e0800217 	ldw	r2,8(fp)
 4008b00:	10c00103 	ldbu	r3,4(r2)
 4008b04:	10800143 	ldbu	r2,5(r2)
 4008b08:	1004923a 	slli	r2,r2,8
 4008b0c:	10c4b03a 	or	r2,r2,r3
 4008b10:	10bfffcc 	andi	r2,r2,65535
 4008b14:	10801070 	cmpltui	r2,r2,65
 4008b18:	10000d1e 	bne	r2,zero,4008b50 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
 4008b1c:	00000206 	br	4008b28 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
 4008b20:	0005883a 	mov	r2,zero
 4008b24:	00001906 	br	4008b8c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
 4008b28:	e0fffa03 	ldbu	r3,-24(fp)
 4008b2c:	e13ffb17 	ldw	r4,-20(fp)
 4008b30:	1805883a 	mov	r2,r3
 4008b34:	1085883a 	add	r2,r2,r2
 4008b38:	10c5883a 	add	r2,r2,r3
 4008b3c:	2085883a 	add	r2,r4,r2
 4008b40:	10800504 	addi	r2,r2,20
 4008b44:	00c01004 	movi	r3,64
 4008b48:	10c00005 	stb	r3,0(r2)
 4008b4c:	00000e06 	br	4008b88 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 4008b50:	e0fffa03 	ldbu	r3,-24(fp)
 4008b54:	e0800217 	ldw	r2,8(fp)
 4008b58:	11000103 	ldbu	r4,4(r2)
 4008b5c:	10800143 	ldbu	r2,5(r2)
 4008b60:	1004923a 	slli	r2,r2,8
 4008b64:	1104b03a 	or	r2,r2,r4
 4008b68:	100b883a 	mov	r5,r2
 4008b6c:	e13ffb17 	ldw	r4,-20(fp)
 4008b70:	1805883a 	mov	r2,r3
 4008b74:	1085883a 	add	r2,r2,r2
 4008b78:	10c5883a 	add	r2,r2,r3
 4008b7c:	2085883a 	add	r2,r4,r2
 4008b80:	10800504 	addi	r2,r2,20
 4008b84:	11400005 	stb	r5,0(r2)
        }

        return true;
 4008b88:	00800044 	movi	r2,1
}
 4008b8c:	e037883a 	mov	sp,fp
 4008b90:	df000017 	ldw	fp,0(sp)
 4008b94:	dec00104 	addi	sp,sp,4
 4008b98:	f800283a 	ret

04008b9c <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 4008b9c:	213fff04 	addi	r4,r4,-4
 4008ba0:	4008a581 	jmpi	4008a58 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

04008ba4 <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 4008ba4:	defffa04 	addi	sp,sp,-24
 4008ba8:	df000515 	stw	fp,20(sp)
 4008bac:	df000504 	addi	fp,sp,20
 4008bb0:	e13ffb15 	stw	r4,-20(fp)
 4008bb4:	3009883a 	mov	r4,r6
 4008bb8:	3807883a 	mov	r3,r7
 4008bbc:	e0800117 	ldw	r2,4(fp)
 4008bc0:	e17ffc05 	stb	r5,-16(fp)
 4008bc4:	e13ffd05 	stb	r4,-12(fp)
 4008bc8:	e0fffe05 	stb	r3,-8(fp)
 4008bcc:	e0bfff05 	stb	r2,-4(fp)
                return true;
 4008bd0:	00800044 	movi	r2,1
        };
 4008bd4:	e037883a 	mov	sp,fp
 4008bd8:	df000017 	ldw	fp,0(sp)
 4008bdc:	dec00104 	addi	sp,sp,4
 4008be0:	f800283a 	ret

04008be4 <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
 4008be4:	defffe04 	addi	sp,sp,-8
 4008be8:	df000115 	stw	fp,4(sp)
 4008bec:	df000104 	addi	fp,sp,4
 4008bf0:	e13fff15 	stw	r4,-4(fp)
 4008bf4:	e0bfff17 	ldw	r2,-4(fp)
 4008bf8:	10800d83 	ldbu	r2,54(r2)
 4008bfc:	e037883a 	mov	sp,fp
 4008c00:	df000017 	ldw	fp,0(sp)
 4008c04:	dec00104 	addi	sp,sp,4
 4008c08:	f800283a 	ret

04008c0c <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
 4008c0c:	defffe04 	addi	sp,sp,-8
 4008c10:	df000115 	stw	fp,4(sp)
 4008c14:	df000104 	addi	fp,sp,4
 4008c18:	e13fff15 	stw	r4,-4(fp)
 4008c1c:	e0bfff17 	ldw	r2,-4(fp)
 4008c20:	10800cc3 	ldbu	r2,51(r2)
 4008c24:	e037883a 	mov	sp,fp
 4008c28:	df000017 	ldw	fp,0(sp)
 4008c2c:	dec00104 	addi	sp,sp,4
 4008c30:	f800283a 	ret

04008c34 <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
 4008c34:	defffd04 	addi	sp,sp,-12
 4008c38:	df000215 	stw	fp,8(sp)
 4008c3c:	df000204 	addi	fp,sp,8
 4008c40:	e13ffe15 	stw	r4,-8(fp)
 4008c44:	2805883a 	mov	r2,r5
 4008c48:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
 4008c4c:	e0bfff03 	ldbu	r2,-4(fp)
 4008c50:	10803c28 	cmpgeui	r2,r2,240
 4008c54:	1000031e 	bne	r2,zero,4008c64 <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
 4008c58:	e0bfff03 	ldbu	r2,-4(fp)
 4008c5c:	1004d13a 	srli	r2,r2,4
 4008c60:	00000606 	br	4008c7c <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
 4008c64:	e0bfff03 	ldbu	r2,-4(fp)
 4008c68:	10c003cc 	andi	r3,r2,15
 4008c6c:	008100b4 	movhi	r2,1026
 4008c70:	108b2684 	addi	r2,r2,11418
 4008c74:	1885883a 	add	r2,r3,r2
 4008c78:	10800003 	ldbu	r2,0(r2)
        };
 4008c7c:	e037883a 	mov	sp,fp
 4008c80:	df000017 	ldw	fp,0(sp)
 4008c84:	dec00104 	addi	sp,sp,4
 4008c88:	f800283a 	ret

04008c8c <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
 4008c8c:	defffd04 	addi	sp,sp,-12
 4008c90:	df000215 	stw	fp,8(sp)
 4008c94:	df000204 	addi	fp,sp,8
 4008c98:	e13ffe15 	stw	r4,-8(fp)
 4008c9c:	2805883a 	mov	r2,r5
 4008ca0:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
 4008ca4:	e0ffff03 	ldbu	r3,-4(fp)
 4008ca8:	008100b4 	movhi	r2,1026
 4008cac:	108b2284 	addi	r2,r2,11402
 4008cb0:	1885883a 	add	r2,r3,r2
 4008cb4:	10800003 	ldbu	r2,0(r2)
        };
 4008cb8:	e037883a 	mov	sp,fp
 4008cbc:	df000017 	ldw	fp,0(sp)
 4008cc0:	dec00104 	addi	sp,sp,4
 4008cc4:	f800283a 	ret

04008cc8 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
 4008cc8:	defffe04 	addi	sp,sp,-8
 4008ccc:	df000115 	stw	fp,4(sp)
 4008cd0:	df000104 	addi	fp,sp,4
 4008cd4:	e13fff15 	stw	r4,-4(fp)
 4008cd8:	e0bfff17 	ldw	r2,-4(fp)
 4008cdc:	10800303 	ldbu	r2,12(r2)
 4008ce0:	e037883a 	mov	sp,fp
 4008ce4:	df000017 	ldw	fp,0(sp)
 4008ce8:	dec00104 	addi	sp,sp,4
 4008cec:	f800283a 	ret

04008cf0 <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
 4008cf0:	defffe04 	addi	sp,sp,-8
 4008cf4:	df000115 	stw	fp,4(sp)
 4008cf8:	df000104 	addi	fp,sp,4
 4008cfc:	e13fff15 	stw	r4,-4(fp)
 4008d00:	008100b4 	movhi	r2,1026
 4008d04:	108b3f04 	addi	r2,r2,11516
 4008d08:	e0ffff17 	ldw	r3,-4(fp)
 4008d0c:	18800015 	stw	r2,0(r3)
 4008d10:	0001883a 	nop
 4008d14:	e037883a 	mov	sp,fp
 4008d18:	df000017 	ldw	fp,0(sp)
 4008d1c:	dec00104 	addi	sp,sp,4
 4008d20:	f800283a 	ret

04008d24 <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 4008d24:	defffd04 	addi	sp,sp,-12
 4008d28:	df000215 	stw	fp,8(sp)
 4008d2c:	df000204 	addi	fp,sp,8
 4008d30:	2005883a 	mov	r2,r4
 4008d34:	e17fff15 	stw	r5,-4(fp)
 4008d38:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 4008d3c:	0001883a 	nop
 4008d40:	e037883a 	mov	sp,fp
 4008d44:	df000017 	ldw	fp,0(sp)
 4008d48:	dec00104 	addi	sp,sp,4
 4008d4c:	f800283a 	ret

04008d50 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
 4008d50:	deffe204 	addi	sp,sp,-120
 4008d54:	dfc01d15 	stw	ra,116(sp)
 4008d58:	df001c15 	stw	fp,112(sp)
 4008d5c:	df001c04 	addi	fp,sp,112
 4008d60:	e13ffd15 	stw	r4,-12(fp)
 4008d64:	2805883a 	mov	r2,r5
 4008d68:	e1bfff15 	stw	r6,-4(fp)
 4008d6c:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
 4008d70:	00801004 	movi	r2,64
 4008d74:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
 4008d78:	e0bffd17 	ldw	r2,-12(fp)
 4008d7c:	11000217 	ldw	r4,8(r2)
 4008d80:	e0bffd17 	ldw	r2,-12(fp)
 4008d84:	10800303 	ldbu	r2,12(r2)
 4008d88:	11403fcc 	andi	r5,r2,255
 4008d8c:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
 4008d90:	e0ffff17 	ldw	r3,-4(fp)
 4008d94:	d8c00715 	stw	r3,28(sp)
 4008d98:	e0ffec84 	addi	r3,fp,-78
 4008d9c:	d8c00615 	stw	r3,24(sp)
 4008da0:	00c01004 	movi	r3,64
 4008da4:	d8c00515 	stw	r3,20(sp)
 4008da8:	00c02004 	movi	r3,128
 4008dac:	d8c00415 	stw	r3,16(sp)
 4008db0:	d8800315 	stw	r2,12(sp)
 4008db4:	00800884 	movi	r2,34
 4008db8:	d8800215 	stw	r2,8(sp)
 4008dbc:	d8000115 	stw	zero,4(sp)
 4008dc0:	00800184 	movi	r2,6
 4008dc4:	d8800015 	stw	r2,0(sp)
 4008dc8:	01c02044 	movi	r7,129
 4008dcc:	000d883a 	mov	r6,zero
 4008dd0:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 4008dd4:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
 4008dd8:	e0bfec43 	ldbu	r2,-79(fp)
}
 4008ddc:	e037883a 	mov	sp,fp
 4008de0:	dfc00117 	ldw	ra,4(sp)
 4008de4:	df000017 	ldw	fp,0(sp)
 4008de8:	dec00204 	addi	sp,sp,8
 4008dec:	f800283a 	ret

04008df0 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
 4008df0:	defff004 	addi	sp,sp,-64
 4008df4:	dfc00f15 	stw	ra,60(sp)
 4008df8:	df000e15 	stw	fp,56(sp)
 4008dfc:	df000e04 	addi	fp,sp,56
 4008e00:	e13ffa15 	stw	r4,-24(fp)
 4008e04:	2811883a 	mov	r8,r5
 4008e08:	300b883a 	mov	r5,r6
 4008e0c:	3809883a 	mov	r4,r7
 4008e10:	e0c00217 	ldw	r3,8(fp)
 4008e14:	e0800317 	ldw	r2,12(fp)
 4008e18:	e23ffb05 	stb	r8,-20(fp)
 4008e1c:	e17ffc05 	stb	r5,-16(fp)
 4008e20:	e13ffd05 	stb	r4,-12(fp)
 4008e24:	e0fffe05 	stb	r3,-8(fp)
 4008e28:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
 4008e2c:	e0bffa17 	ldw	r2,-24(fp)
 4008e30:	12000217 	ldw	r8,8(r2)
 4008e34:	e0bffa17 	ldw	r2,-24(fp)
 4008e38:	10800303 	ldbu	r2,12(r2)
 4008e3c:	12403fcc 	andi	r9,r2,255
 4008e40:	e2bffb03 	ldbu	r10,-20(fp)
 4008e44:	e0bffe03 	ldbu	r2,-8(fp)
 4008e48:	e0fffd03 	ldbu	r3,-12(fp)
 4008e4c:	e13ffc03 	ldbu	r4,-16(fp)
 4008e50:	e17fff0b 	ldhu	r5,-4(fp)
 4008e54:	e1bfff0b 	ldhu	r6,-4(fp)
 4008e58:	d8000715 	stw	zero,28(sp)
 4008e5c:	e1c00417 	ldw	r7,16(fp)
 4008e60:	d9c00615 	stw	r7,24(sp)
 4008e64:	d9800515 	stw	r6,20(sp)
 4008e68:	d9400415 	stw	r5,16(sp)
 4008e6c:	d9000315 	stw	r4,12(sp)
 4008e70:	d8c00215 	stw	r3,8(sp)
 4008e74:	d8800115 	stw	r2,4(sp)
 4008e78:	00800244 	movi	r2,9
 4008e7c:	d8800015 	stw	r2,0(sp)
 4008e80:	01c00844 	movi	r7,33
 4008e84:	500d883a 	mov	r6,r10
 4008e88:	480b883a 	mov	r5,r9
 4008e8c:	4009883a 	mov	r4,r8
 4008e90:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4008e94:	e037883a 	mov	sp,fp
 4008e98:	dfc00117 	ldw	ra,4(sp)
 4008e9c:	df000017 	ldw	fp,0(sp)
 4008ea0:	dec00204 	addi	sp,sp,8
 4008ea4:	f800283a 	ret

04008ea8 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
 4008ea8:	defff004 	addi	sp,sp,-64
 4008eac:	dfc00f15 	stw	ra,60(sp)
 4008eb0:	df000e15 	stw	fp,56(sp)
 4008eb4:	df000e04 	addi	fp,sp,56
 4008eb8:	e13ffa15 	stw	r4,-24(fp)
 4008ebc:	2811883a 	mov	r8,r5
 4008ec0:	300b883a 	mov	r5,r6
 4008ec4:	3809883a 	mov	r4,r7
 4008ec8:	e0c00217 	ldw	r3,8(fp)
 4008ecc:	e0800317 	ldw	r2,12(fp)
 4008ed0:	e23ffb05 	stb	r8,-20(fp)
 4008ed4:	e17ffc05 	stb	r5,-16(fp)
 4008ed8:	e13ffd05 	stb	r4,-12(fp)
 4008edc:	e0fffe05 	stb	r3,-8(fp)
 4008ee0:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
 4008ee4:	e0bffa17 	ldw	r2,-24(fp)
 4008ee8:	12000217 	ldw	r8,8(r2)
 4008eec:	e0bffa17 	ldw	r2,-24(fp)
 4008ef0:	10800303 	ldbu	r2,12(r2)
 4008ef4:	12403fcc 	andi	r9,r2,255
 4008ef8:	e2bffb03 	ldbu	r10,-20(fp)
 4008efc:	e0bffe03 	ldbu	r2,-8(fp)
 4008f00:	e0fffd03 	ldbu	r3,-12(fp)
 4008f04:	e13ffc03 	ldbu	r4,-16(fp)
 4008f08:	e17fff0b 	ldhu	r5,-4(fp)
 4008f0c:	e1bfff0b 	ldhu	r6,-4(fp)
 4008f10:	d8000715 	stw	zero,28(sp)
 4008f14:	e1c00417 	ldw	r7,16(fp)
 4008f18:	d9c00615 	stw	r7,24(sp)
 4008f1c:	d9800515 	stw	r6,20(sp)
 4008f20:	d9400415 	stw	r5,16(sp)
 4008f24:	d9000315 	stw	r4,12(sp)
 4008f28:	d8c00215 	stw	r3,8(sp)
 4008f2c:	d8800115 	stw	r2,4(sp)
 4008f30:	00800044 	movi	r2,1
 4008f34:	d8800015 	stw	r2,0(sp)
 4008f38:	01c02844 	movi	r7,161
 4008f3c:	500d883a 	mov	r6,r10
 4008f40:	480b883a 	mov	r5,r9
 4008f44:	4009883a 	mov	r4,r8
 4008f48:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4008f4c:	e037883a 	mov	sp,fp
 4008f50:	dfc00117 	ldw	ra,4(sp)
 4008f54:	df000017 	ldw	fp,0(sp)
 4008f58:	dec00204 	addi	sp,sp,8
 4008f5c:	f800283a 	ret

04008f60 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
 4008f60:	defff204 	addi	sp,sp,-56
 4008f64:	dfc00d15 	stw	ra,52(sp)
 4008f68:	df000c15 	stw	fp,48(sp)
 4008f6c:	df000c04 	addi	fp,sp,48
 4008f70:	e13ffc15 	stw	r4,-16(fp)
 4008f74:	2807883a 	mov	r3,r5
 4008f78:	3005883a 	mov	r2,r6
 4008f7c:	e1ffff15 	stw	r7,-4(fp)
 4008f80:	e0fffd05 	stb	r3,-12(fp)
 4008f84:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
 4008f88:	e0bffc17 	ldw	r2,-16(fp)
 4008f8c:	12000217 	ldw	r8,8(r2)
 4008f90:	e0bffc17 	ldw	r2,-16(fp)
 4008f94:	10800303 	ldbu	r2,12(r2)
 4008f98:	11403fcc 	andi	r5,r2,255
 4008f9c:	e0bffe03 	ldbu	r2,-8(fp)
 4008fa0:	e0fffd03 	ldbu	r3,-12(fp)
 4008fa4:	d8000715 	stw	zero,28(sp)
 4008fa8:	e13fff17 	ldw	r4,-4(fp)
 4008fac:	d9000615 	stw	r4,24(sp)
 4008fb0:	01000044 	movi	r4,1
 4008fb4:	d9000515 	stw	r4,20(sp)
 4008fb8:	01000044 	movi	r4,1
 4008fbc:	d9000415 	stw	r4,16(sp)
 4008fc0:	d8c00315 	stw	r3,12(sp)
 4008fc4:	d8000215 	stw	zero,8(sp)
 4008fc8:	d8800115 	stw	r2,4(sp)
 4008fcc:	00800084 	movi	r2,2
 4008fd0:	d8800015 	stw	r2,0(sp)
 4008fd4:	01c02844 	movi	r7,161
 4008fd8:	000d883a 	mov	r6,zero
 4008fdc:	4009883a 	mov	r4,r8
 4008fe0:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4008fe4:	e037883a 	mov	sp,fp
 4008fe8:	dfc00117 	ldw	ra,4(sp)
 4008fec:	df000017 	ldw	fp,0(sp)
 4008ff0:	dec00204 	addi	sp,sp,8
 4008ff4:	f800283a 	ret

04008ff8 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
 4008ff8:	defff204 	addi	sp,sp,-56
 4008ffc:	dfc00d15 	stw	ra,52(sp)
 4009000:	df000c15 	stw	fp,48(sp)
 4009004:	df000c04 	addi	fp,sp,48
 4009008:	e13ffc15 	stw	r4,-16(fp)
 400900c:	2809883a 	mov	r4,r5
 4009010:	3007883a 	mov	r3,r6
 4009014:	3805883a 	mov	r2,r7
 4009018:	e13ffd05 	stb	r4,-12(fp)
 400901c:	e0fffe05 	stb	r3,-8(fp)
 4009020:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
 4009024:	e0bffc17 	ldw	r2,-16(fp)
 4009028:	12000217 	ldw	r8,8(r2)
 400902c:	e0bffc17 	ldw	r2,-16(fp)
 4009030:	10800303 	ldbu	r2,12(r2)
 4009034:	11403fcc 	andi	r5,r2,255
 4009038:	e0bffe03 	ldbu	r2,-8(fp)
 400903c:	e0ffff03 	ldbu	r3,-4(fp)
 4009040:	e13ffd03 	ldbu	r4,-12(fp)
 4009044:	d8000715 	stw	zero,28(sp)
 4009048:	d8000615 	stw	zero,24(sp)
 400904c:	d8000515 	stw	zero,20(sp)
 4009050:	d8000415 	stw	zero,16(sp)
 4009054:	d9000315 	stw	r4,12(sp)
 4009058:	d8c00215 	stw	r3,8(sp)
 400905c:	d8800115 	stw	r2,4(sp)
 4009060:	00800284 	movi	r2,10
 4009064:	d8800015 	stw	r2,0(sp)
 4009068:	01c00844 	movi	r7,33
 400906c:	000d883a 	mov	r6,zero
 4009070:	4009883a 	mov	r4,r8
 4009074:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4009078:	e037883a 	mov	sp,fp
 400907c:	dfc00117 	ldw	ra,4(sp)
 4009080:	df000017 	ldw	fp,0(sp)
 4009084:	dec00204 	addi	sp,sp,8
 4009088:	f800283a 	ret

0400908c <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
 400908c:	defff304 	addi	sp,sp,-52
 4009090:	dfc00c15 	stw	ra,48(sp)
 4009094:	df000b15 	stw	fp,44(sp)
 4009098:	df000b04 	addi	fp,sp,44
 400909c:	e13ffd15 	stw	r4,-12(fp)
 40090a0:	2807883a 	mov	r3,r5
 40090a4:	3005883a 	mov	r2,r6
 40090a8:	e0fffe05 	stb	r3,-8(fp)
 40090ac:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
 40090b0:	e0bffd17 	ldw	r2,-12(fp)
 40090b4:	11000217 	ldw	r4,8(r2)
 40090b8:	e0bffd17 	ldw	r2,-12(fp)
 40090bc:	10800303 	ldbu	r2,12(r2)
 40090c0:	11403fcc 	andi	r5,r2,255
 40090c4:	e0bfff03 	ldbu	r2,-4(fp)
 40090c8:	e0fffe03 	ldbu	r3,-8(fp)
 40090cc:	d8000715 	stw	zero,28(sp)
 40090d0:	d8000615 	stw	zero,24(sp)
 40090d4:	d8000515 	stw	zero,20(sp)
 40090d8:	d8000415 	stw	zero,16(sp)
 40090dc:	d8c00315 	stw	r3,12(sp)
 40090e0:	d8000215 	stw	zero,8(sp)
 40090e4:	d8800115 	stw	r2,4(sp)
 40090e8:	008002c4 	movi	r2,11
 40090ec:	d8800015 	stw	r2,0(sp)
 40090f0:	01c00844 	movi	r7,33
 40090f4:	000d883a 	mov	r6,zero
 40090f8:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 40090fc:	e037883a 	mov	sp,fp
 4009100:	dfc00117 	ldw	ra,4(sp)
 4009104:	df000017 	ldw	fp,0(sp)
 4009108:	dec00204 	addi	sp,sp,8
 400910c:	f800283a 	ret

04009110 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
 4009110:	defff304 	addi	sp,sp,-52
 4009114:	dfc00c15 	stw	ra,48(sp)
 4009118:	df000b15 	stw	fp,44(sp)
 400911c:	df000b04 	addi	fp,sp,44
 4009120:	e13ffd15 	stw	r4,-12(fp)
 4009124:	2805883a 	mov	r2,r5
 4009128:	e1bfff15 	stw	r6,-4(fp)
 400912c:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
 4009130:	e0bffd17 	ldw	r2,-12(fp)
 4009134:	11000217 	ldw	r4,8(r2)
 4009138:	e0bffd17 	ldw	r2,-12(fp)
 400913c:	10800303 	ldbu	r2,12(r2)
 4009140:	11403fcc 	andi	r5,r2,255
 4009144:	e0bffe03 	ldbu	r2,-8(fp)
 4009148:	d8000715 	stw	zero,28(sp)
 400914c:	e0ffff17 	ldw	r3,-4(fp)
 4009150:	d8c00615 	stw	r3,24(sp)
 4009154:	00c00044 	movi	r3,1
 4009158:	d8c00515 	stw	r3,20(sp)
 400915c:	00c00044 	movi	r3,1
 4009160:	d8c00415 	stw	r3,16(sp)
 4009164:	d8800315 	stw	r2,12(sp)
 4009168:	d8000215 	stw	zero,8(sp)
 400916c:	d8000115 	stw	zero,4(sp)
 4009170:	008000c4 	movi	r2,3
 4009174:	d8800015 	stw	r2,0(sp)
 4009178:	01c02844 	movi	r7,161
 400917c:	000d883a 	mov	r6,zero
 4009180:	40012ec0 	call	40012ec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4009184:	e037883a 	mov	sp,fp
 4009188:	dfc00117 	ldw	ra,4(sp)
 400918c:	df000017 	ldw	fp,0(sp)
 4009190:	dec00204 	addi	sp,sp,8
 4009194:	f800283a 	ret

04009198 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
 4009198:	defffc04 	addi	sp,sp,-16
 400919c:	dfc00315 	stw	ra,12(sp)
 40091a0:	df000215 	stw	fp,8(sp)
 40091a4:	df000204 	addi	fp,sp,8
 40091a8:	e13ffe15 	stw	r4,-8(fp)
 40091ac:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
 40091b0:	e0bfff17 	ldw	r2,-4(fp)
 40091b4:	10800003 	ldbu	r2,0(r2)
 40091b8:	10803fcc 	andi	r2,r2,255
 40091bc:	01402004 	movi	r5,128
 40091c0:	1009883a 	mov	r4,r2
 40091c4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
 40091c8:	e0bfff17 	ldw	r2,-4(fp)
 40091cc:	10800043 	ldbu	r2,1(r2)
 40091d0:	10803fcc 	andi	r2,r2,255
 40091d4:	01402004 	movi	r5,128
 40091d8:	1009883a 	mov	r4,r2
 40091dc:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
 40091e0:	e0bfff17 	ldw	r2,-4(fp)
 40091e4:	10800083 	ldbu	r2,2(r2)
 40091e8:	10803fcc 	andi	r2,r2,255
 40091ec:	01402004 	movi	r5,128
 40091f0:	1009883a 	mov	r4,r2
 40091f4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
 40091f8:	e0bfff17 	ldw	r2,-4(fp)
 40091fc:	108000c3 	ldbu	r2,3(r2)
 4009200:	10803fcc 	andi	r2,r2,255
 4009204:	01402004 	movi	r5,128
 4009208:	1009883a 	mov	r4,r2
 400920c:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
 4009210:	e0bfff17 	ldw	r2,-4(fp)
 4009214:	10c00103 	ldbu	r3,4(r2)
 4009218:	10800143 	ldbu	r2,5(r2)
 400921c:	1004923a 	slli	r2,r2,8
 4009220:	10c4b03a 	or	r2,r2,r3
 4009224:	10bfffcc 	andi	r2,r2,65535
 4009228:	01402004 	movi	r5,128
 400922c:	1009883a 	mov	r4,r2
 4009230:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
 4009234:	e0bfff17 	ldw	r2,-4(fp)
 4009238:	10800183 	ldbu	r2,6(r2)
 400923c:	10803fcc 	andi	r2,r2,255
 4009240:	01402004 	movi	r5,128
 4009244:	1009883a 	mov	r4,r2
 4009248:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>
}
 400924c:	0001883a 	nop
 4009250:	e037883a 	mov	sp,fp
 4009254:	dfc00117 	ldw	ra,4(sp)
 4009258:	df000017 	ldw	fp,0(sp)
 400925c:	dec00204 	addi	sp,sp,8
 4009260:	f800283a 	ret

04009264 <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
 4009264:	defffc04 	addi	sp,sp,-16
 4009268:	dfc00315 	stw	ra,12(sp)
 400926c:	df000215 	stw	fp,8(sp)
 4009270:	df000204 	addi	fp,sp,8
 4009274:	e13ffe15 	stw	r4,-8(fp)
 4009278:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
 400927c:	e0bfff17 	ldw	r2,-4(fp)
 4009280:	10800003 	ldbu	r2,0(r2)
 4009284:	10803fcc 	andi	r2,r2,255
 4009288:	01402004 	movi	r5,128
 400928c:	1009883a 	mov	r4,r2
 4009290:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
 4009294:	e0bfff17 	ldw	r2,-4(fp)
 4009298:	10800043 	ldbu	r2,1(r2)
 400929c:	10803fcc 	andi	r2,r2,255
 40092a0:	01402004 	movi	r5,128
 40092a4:	1009883a 	mov	r4,r2
 40092a8:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
 40092ac:	e0bfff17 	ldw	r2,-4(fp)
 40092b0:	10c00083 	ldbu	r3,2(r2)
 40092b4:	108000c3 	ldbu	r2,3(r2)
 40092b8:	1004923a 	slli	r2,r2,8
 40092bc:	10c4b03a 	or	r2,r2,r3
 40092c0:	10bfffcc 	andi	r2,r2,65535
 40092c4:	01402004 	movi	r5,128
 40092c8:	1009883a 	mov	r4,r2
 40092cc:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
 40092d0:	e0bfff17 	ldw	r2,-4(fp)
 40092d4:	10800103 	ldbu	r2,4(r2)
 40092d8:	10803fcc 	andi	r2,r2,255
 40092dc:	01402004 	movi	r5,128
 40092e0:	1009883a 	mov	r4,r2
 40092e4:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
 40092e8:	e0bfff17 	ldw	r2,-4(fp)
 40092ec:	10800143 	ldbu	r2,5(r2)
 40092f0:	10803fcc 	andi	r2,r2,255
 40092f4:	01402004 	movi	r5,128
 40092f8:	1009883a 	mov	r4,r2
 40092fc:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
 4009300:	e0bfff17 	ldw	r2,-4(fp)
 4009304:	10800183 	ldbu	r2,6(r2)
 4009308:	10803fcc 	andi	r2,r2,255
 400930c:	01402004 	movi	r5,128
 4009310:	1009883a 	mov	r4,r2
 4009314:	40035180 	call	4003518 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
 4009318:	e0bfff17 	ldw	r2,-4(fp)
 400931c:	10c001c3 	ldbu	r3,7(r2)
 4009320:	10800203 	ldbu	r2,8(r2)
 4009324:	1004923a 	slli	r2,r2,8
 4009328:	10c4b03a 	or	r2,r2,r3
 400932c:	10bfffcc 	andi	r2,r2,65535
 4009330:	01402004 	movi	r5,128
 4009334:	1009883a 	mov	r4,r2
 4009338:	4008d240 	call	4008d24 <_Z10D_PrintHexItEvT_i>
}
 400933c:	0001883a 	nop
 4009340:	e037883a 	mov	sp,fp
 4009344:	dfc00117 	ldw	ra,4(sp)
 4009348:	df000017 	ldw	fp,0(sp)
 400934c:	dec00204 	addi	sp,sp,8
 4009350:	f800283a 	ret

04009354 <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
 4009354:	defffd04 	addi	sp,sp,-12
 4009358:	dfc00215 	stw	ra,8(sp)
 400935c:	df000115 	stw	fp,4(sp)
 4009360:	df000104 	addi	fp,sp,4
 4009364:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
 4009368:	010100b4 	movhi	r4,1026
 400936c:	21138704 	addi	r4,r4,19996
 4009370:	400f4c80 	call	400f4c8 <puts>
	vbusState = 0;
 4009374:	d0323745 	stb	zero,-14115(gp)
};
 4009378:	0001883a 	nop
 400937c:	e037883a 	mov	sp,fp
 4009380:	dfc00117 	ldw	ra,4(sp)
 4009384:	df000017 	ldw	fp,0(sp)
 4009388:	dec00204 	addi	sp,sp,8
 400938c:	f800283a 	ret

04009390 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
 4009390:	defffe04 	addi	sp,sp,-8
 4009394:	df000115 	stw	fp,4(sp)
 4009398:	df000104 	addi	fp,sp,4
 400939c:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
 40093a0:	d0b23743 	ldbu	r2,-14115(gp)
};
 40093a4:	e037883a 	mov	sp,fp
 40093a8:	df000017 	ldw	fp,0(sp)
 40093ac:	dec00104 	addi	sp,sp,4
 40093b0:	f800283a 	ret

040093b4 <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
 40093b4:	defff704 	addi	sp,sp,-36
 40093b8:	dfc00815 	stw	ra,32(sp)
 40093bc:	df000715 	stw	fp,28(sp)
 40093c0:	df000704 	addi	fp,sp,28
 40093c4:	e13ffd15 	stw	r4,-12(fp)
 40093c8:	2807883a 	mov	r3,r5
 40093cc:	3005883a 	mov	r2,r6
 40093d0:	e0fffe05 	stb	r3,-8(fp)
 40093d4:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
 40093d8:	e03ffc45 	stb	zero,-15(fp)
 40093dc:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
 40093e0:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
 40093e4:	e0bffe03 	ldbu	r2,-8(fp)
 40093e8:	10800084 	addi	r2,r2,2
 40093ec:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
 40093f0:	e0bfff03 	ldbu	r2,-4(fp)
 40093f4:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
 40093f8:	e0fffc44 	addi	r3,fp,-15
 40093fc:	d8000215 	stw	zero,8(sp)
 4009400:	e0bffcc4 	addi	r2,fp,-13
 4009404:	d8800115 	stw	r2,4(sp)
 4009408:	d8000015 	stw	zero,0(sp)
 400940c:	180f883a 	mov	r7,r3
 4009410:	01800084 	movi	r6,2
 4009414:	000b883a 	mov	r5,zero
 4009418:	01020034 	movhi	r4,2048
 400941c:	21043804 	addi	r4,r4,4320
 4009420:	401ee2c0 	call	401ee2c <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
 4009424:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
 4009428:	0001883a 	nop
 400942c:	e037883a 	mov	sp,fp
 4009430:	dfc00117 	ldw	ra,4(sp)
 4009434:	df000017 	ldw	fp,0(sp)
 4009438:	dec00204 	addi	sp,sp,8
 400943c:	f800283a 	ret

04009440 <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
 4009440:	defff304 	addi	sp,sp,-52
 4009444:	dfc00c15 	stw	ra,48(sp)
 4009448:	df000b15 	stw	fp,44(sp)
 400944c:	dc000a15 	stw	r16,40(sp)
 4009450:	df000b04 	addi	fp,sp,44
 4009454:	e13ffb15 	stw	r4,-20(fp)
 4009458:	3009883a 	mov	r4,r6
 400945c:	e1fffe15 	stw	r7,-8(fp)
 4009460:	e17ffc05 	stb	r5,-16(fp)
 4009464:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
 4009468:	d809883a 	mov	r4,sp
 400946c:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
 4009470:	e13ffd03 	ldbu	r4,-12(fp)
 4009474:	e13ff815 	stw	r4,-32(fp)
 4009478:	200b883a 	mov	r5,r4
 400947c:	29400044 	addi	r5,r5,1
 4009480:	2819883a 	mov	r12,r5
 4009484:	001b883a 	mov	r13,zero
 4009488:	600ad77a 	srli	r5,r12,29
 400948c:	681290fa 	slli	r9,r13,3
 4009490:	2a52b03a 	or	r9,r5,r9
 4009494:	601090fa 	slli	r8,r12,3
 4009498:	200b883a 	mov	r5,r4
 400949c:	29400044 	addi	r5,r5,1
 40094a0:	2815883a 	mov	r10,r5
 40094a4:	0017883a 	mov	r11,zero
 40094a8:	500ad77a 	srli	r5,r10,29
 40094ac:	580690fa 	slli	r3,r11,3
 40094b0:	28c6b03a 	or	r3,r5,r3
 40094b4:	500490fa 	slli	r2,r10,3
 40094b8:	2005883a 	mov	r2,r4
 40094bc:	10800044 	addi	r2,r2,1
 40094c0:	108000c4 	addi	r2,r2,3
 40094c4:	1004d0ba 	srli	r2,r2,2
 40094c8:	1085883a 	add	r2,r2,r2
 40094cc:	1085883a 	add	r2,r2,r2
 40094d0:	d8b7c83a 	sub	sp,sp,r2
 40094d4:	d8800304 	addi	r2,sp,12
 40094d8:	1005883a 	mov	r2,r2
 40094dc:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
 40094e0:	e0bffc03 	ldbu	r2,-16(fp)
 40094e4:	10800084 	addi	r2,r2,2
 40094e8:	1007883a 	mov	r3,r2
 40094ec:	e0bff917 	ldw	r2,-28(fp)
 40094f0:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
 40094f4:	e0bff917 	ldw	r2,-28(fp)
 40094f8:	10800044 	addi	r2,r2,1
 40094fc:	e0fffd03 	ldbu	r3,-12(fp)
 4009500:	180d883a 	mov	r6,r3
 4009504:	e17ffe17 	ldw	r5,-8(fp)
 4009508:	1009883a 	mov	r4,r2
 400950c:	400f10c0 	call	400f10c <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
 4009510:	e0bffd03 	ldbu	r2,-12(fp)
 4009514:	10800044 	addi	r2,r2,1
 4009518:	1009883a 	mov	r4,r2
 400951c:	e0fff917 	ldw	r3,-28(fp)
 4009520:	d8000215 	stw	zero,8(sp)
 4009524:	e0bffa44 	addi	r2,fp,-23
 4009528:	d8800115 	stw	r2,4(sp)
 400952c:	d8000015 	stw	zero,0(sp)
 4009530:	180f883a 	mov	r7,r3
 4009534:	200d883a 	mov	r6,r4
 4009538:	000b883a 	mov	r5,zero
 400953c:	01020034 	movhi	r4,2048
 4009540:	21043804 	addi	r4,r4,4320
 4009544:	401ee2c0 	call	401ee2c <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
 4009548:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
 400954c:	e0bffd03 	ldbu	r2,-12(fp)
 4009550:	e0fffe17 	ldw	r3,-8(fp)
 4009554:	1885883a 	add	r2,r3,r2
 4009558:	8037883a 	mov	sp,r16
}
 400955c:	e6ffff04 	addi	sp,fp,-4
 4009560:	dfc00217 	ldw	ra,8(sp)
 4009564:	df000117 	ldw	fp,4(sp)
 4009568:	dc000017 	ldw	r16,0(sp)
 400956c:	dec00304 	addi	sp,sp,12
 4009570:	f800283a 	ret

04009574 <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
 4009574:	defffc04 	addi	sp,sp,-16
 4009578:	dfc00315 	stw	ra,12(sp)
 400957c:	df000215 	stw	fp,8(sp)
 4009580:	df000204 	addi	fp,sp,8
 4009584:	e13ffe15 	stw	r4,-8(fp)
 4009588:	2805883a 	mov	r2,r5
 400958c:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
 4009590:	010100b4 	movhi	r4,1026
 4009594:	21138d04 	addi	r4,r4,20020
 4009598:	400f4c80 	call	400f4c8 <puts>
	regWr(rIOPINS1, data);
 400959c:	e0bfff03 	ldbu	r2,-4(fp)
 40095a0:	100d883a 	mov	r6,r2
 40095a4:	01402804 	movi	r5,160
 40095a8:	e13ffe17 	ldw	r4,-8(fp)
 40095ac:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
 40095b0:	e0bfff03 	ldbu	r2,-4(fp)
 40095b4:	1005d13a 	srai	r2,r2,4
 40095b8:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
 40095bc:	e0bfff03 	ldbu	r2,-4(fp)
 40095c0:	100d883a 	mov	r6,r2
 40095c4:	01402a04 	movi	r5,168
 40095c8:	e13ffe17 	ldw	r4,-8(fp)
 40095cc:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	return;
 40095d0:	0001883a 	nop
}
 40095d4:	e037883a 	mov	sp,fp
 40095d8:	dfc00117 	ldw	ra,4(sp)
 40095dc:	df000017 	ldw	fp,0(sp)
 40095e0:	dec00204 	addi	sp,sp,8
 40095e4:	f800283a 	ret

040095e8 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
 40095e8:	defff804 	addi	sp,sp,-32
 40095ec:	dfc00715 	stw	ra,28(sp)
 40095f0:	df000615 	stw	fp,24(sp)
 40095f4:	df000604 	addi	fp,sp,24
 40095f8:	e13ffe15 	stw	r4,-8(fp)
 40095fc:	2805883a 	mov	r2,r5
 4009600:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
 4009604:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
 4009608:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
 400960c:	e0bfff03 	ldbu	r2,-4(fp)
 4009610:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
 4009614:	e0fffd44 	addi	r3,fp,-11
 4009618:	d8000215 	stw	zero,8(sp)
 400961c:	e0bffd84 	addi	r2,fp,-10
 4009620:	d8800115 	stw	r2,4(sp)
 4009624:	00800044 	movi	r2,1
 4009628:	d8800015 	stw	r2,0(sp)
 400962c:	180f883a 	mov	r7,r3
 4009630:	01800044 	movi	r6,1
 4009634:	000b883a 	mov	r5,zero
 4009638:	01020034 	movhi	r4,2048
 400963c:	21043804 	addi	r4,r4,4320
 4009640:	401ee2c0 	call	401ee2c <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
 4009644:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
 4009648:	e0bffd83 	ldbu	r2,-10(fp)
}
 400964c:	e037883a 	mov	sp,fp
 4009650:	dfc00117 	ldw	ra,4(sp)
 4009654:	df000017 	ldw	fp,0(sp)
 4009658:	dec00204 	addi	sp,sp,8
 400965c:	f800283a 	ret

04009660 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
 4009660:	defff604 	addi	sp,sp,-40
 4009664:	dfc00915 	stw	ra,36(sp)
 4009668:	df000815 	stw	fp,32(sp)
 400966c:	df000804 	addi	fp,sp,32
 4009670:	e13ffc15 	stw	r4,-16(fp)
 4009674:	2807883a 	mov	r3,r5
 4009678:	3005883a 	mov	r2,r6
 400967c:	e1ffff15 	stw	r7,-4(fp)
 4009680:	e0fffd05 	stb	r3,-12(fp)
 4009684:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
 4009688:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
 400968c:	e0bffd03 	ldbu	r2,-12(fp)
 4009690:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
 4009694:	e0bffe03 	ldbu	r2,-8(fp)
 4009698:	e13ffb44 	addi	r4,fp,-19
 400969c:	d8000215 	stw	zero,8(sp)
 40096a0:	e0ffff17 	ldw	r3,-4(fp)
 40096a4:	d8c00115 	stw	r3,4(sp)
 40096a8:	d8800015 	stw	r2,0(sp)
 40096ac:	200f883a 	mov	r7,r4
 40096b0:	01800044 	movi	r6,1
 40096b4:	000b883a 	mov	r5,zero
 40096b8:	01020034 	movhi	r4,2048
 40096bc:	21043804 	addi	r4,r4,4320
 40096c0:	401ee2c0 	call	401ee2c <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
 40096c4:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
 40096c8:	e0bffe03 	ldbu	r2,-8(fp)
 40096cc:	e0ffff17 	ldw	r3,-4(fp)
 40096d0:	1885883a 	add	r2,r3,r2
}
 40096d4:	e037883a 	mov	sp,fp
 40096d8:	dfc00117 	ldw	ra,4(sp)
 40096dc:	df000017 	ldw	fp,0(sp)
 40096e0:	dec00204 	addi	sp,sp,8
 40096e4:	f800283a 	ret

040096e8 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
 40096e8:	defffc04 	addi	sp,sp,-16
 40096ec:	dfc00315 	stw	ra,12(sp)
 40096f0:	df000215 	stw	fp,8(sp)
 40096f4:	df000204 	addi	fp,sp,8
 40096f8:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
 40096fc:	010100b4 	movhi	r4,1026
 4009700:	21139104 	addi	r4,r4,20036
 4009704:	400f4c80 	call	400f4c8 <puts>
	uint8_t gpin = 0;
 4009708:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
 400970c:	01402a04 	movi	r5,168
 4009710:	e13fff17 	ldw	r4,-4(fp)
 4009714:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009718:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
 400971c:	e0fffe03 	ldbu	r3,-8(fp)
 4009720:	00bffc04 	movi	r2,-16
 4009724:	1884703a 	and	r2,r3,r2
 4009728:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
 400972c:	01402804 	movi	r5,160
 4009730:	e13fff17 	ldw	r4,-4(fp)
 4009734:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009738:	10803fcc 	andi	r2,r2,255
 400973c:	1005d13a 	srai	r2,r2,4
 4009740:	1007883a 	mov	r3,r2
 4009744:	e0bffe03 	ldbu	r2,-8(fp)
 4009748:	1884b03a 	or	r2,r3,r2
 400974c:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
 4009750:	e0bffe03 	ldbu	r2,-8(fp)
}
 4009754:	e037883a 	mov	sp,fp
 4009758:	dfc00117 	ldw	ra,4(sp)
 400975c:	df000017 	ldw	fp,0(sp)
 4009760:	dec00204 	addi	sp,sp,8
 4009764:	f800283a 	ret

04009768 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
 4009768:	defffc04 	addi	sp,sp,-16
 400976c:	dfc00315 	stw	ra,12(sp)
 4009770:	df000215 	stw	fp,8(sp)
 4009774:	df000204 	addi	fp,sp,8
 4009778:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
 400977c:	010100b4 	movhi	r4,1026
 4009780:	21139504 	addi	r4,r4,20052
 4009784:	400f4c80 	call	400f4c8 <puts>
	uint8_t gpout = 0;
 4009788:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
 400978c:	01402804 	movi	r5,160
 4009790:	e13fff17 	ldw	r4,-4(fp)
 4009794:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009798:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
 400979c:	e0bffe03 	ldbu	r2,-8(fp)
 40097a0:	108003cc 	andi	r2,r2,15
 40097a4:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
 40097a8:	01402a04 	movi	r5,168
 40097ac:	e13fff17 	ldw	r4,-4(fp)
 40097b0:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 40097b4:	10803fcc 	andi	r2,r2,255
 40097b8:	1004913a 	slli	r2,r2,4
 40097bc:	1007883a 	mov	r3,r2
 40097c0:	e0bffe03 	ldbu	r2,-8(fp)
 40097c4:	1884b03a 	or	r2,r3,r2
 40097c8:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
 40097cc:	e0bffe03 	ldbu	r2,-8(fp)
}
 40097d0:	e037883a 	mov	sp,fp
 40097d4:	dfc00117 	ldw	ra,4(sp)
 40097d8:	df000017 	ldw	fp,0(sp)
 40097dc:	dec00204 	addi	sp,sp,8
 40097e0:	f800283a 	ret

040097e4 <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
 40097e4:	defffc04 	addi	sp,sp,-16
 40097e8:	dfc00315 	stw	ra,12(sp)
 40097ec:	df000215 	stw	fp,8(sp)
 40097f0:	df000204 	addi	fp,sp,8
 40097f4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
 40097f8:	010100b4 	movhi	r4,1026
 40097fc:	21139b04 	addi	r4,r4,20076
 4009800:	400f4c80 	call	400f4c8 <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 4009804:	0007883a 	mov	r3,zero
 4009808:	00820034 	movhi	r2,2048
 400980c:	10849804 	addi	r2,r2,4704
 4009810:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 4009814:	010003f4 	movhi	r4,15
 4009818:	21109004 	addi	r4,r4,16960
 400981c:	401c5600 	call	401c560 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 4009820:	00c00044 	movi	r3,1
 4009824:	00820034 	movhi	r2,2048
 4009828:	10849804 	addi	r2,r2,4704
 400982c:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
 4009830:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
 4009834:	01800804 	movi	r6,32
 4009838:	01401e04 	movi	r5,120
 400983c:	e13fff17 	ldw	r4,-4(fp)
 4009840:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
 4009844:	000d883a 	mov	r6,zero
 4009848:	01401e04 	movi	r5,120
 400984c:	e13fff17 	ldw	r4,-4(fp)
 4009850:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	while(++i) {
 4009854:	e0bffe0b 	ldhu	r2,-8(fp)
 4009858:	10800044 	addi	r2,r2,1
 400985c:	e0bffe0d 	sth	r2,-8(fp)
 4009860:	e0bffe0b 	ldhu	r2,-8(fp)
 4009864:	1004c03a 	cmpne	r2,r2,zero
 4009868:	10803fcc 	andi	r2,r2,255
 400986c:	10000a26 	beq	r2,zero,4009898 <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 4009870:	01401a04 	movi	r5,104
 4009874:	e13fff17 	ldw	r4,-4(fp)
 4009878:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 400987c:	10803fcc 	andi	r2,r2,255
 4009880:	1080004c 	andi	r2,r2,1
 4009884:	1004c03a 	cmpne	r2,r2,zero
 4009888:	10803fcc 	andi	r2,r2,255
 400988c:	1000011e 	bne	r2,zero,4009894 <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
 4009890:	003ff006 	br	4009854 <__alt_mem_onchip_memory2_0+0xfc0085b4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
 4009894:	0001883a 	nop
		}
	}
	return ( i);
 4009898:	e0bffe0b 	ldhu	r2,-8(fp)
}
 400989c:	e037883a 	mov	sp,fp
 40098a0:	dfc00117 	ldw	ra,4(sp)
 40098a4:	df000017 	ldw	fp,0(sp)
 40098a8:	dec00204 	addi	sp,sp,8
 40098ac:	f800283a 	ret

040098b0 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
 40098b0:	defffe04 	addi	sp,sp,-8
 40098b4:	df000115 	stw	fp,4(sp)
 40098b8:	df000104 	addi	fp,sp,4
 40098bc:	2005883a 	mov	r2,r4
 40098c0:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
 40098c4:	00800044 	movi	r2,1
}
 40098c8:	e037883a 	mov	sp,fp
 40098cc:	df000017 	ldw	fp,0(sp)
 40098d0:	dec00104 	addi	sp,sp,4
 40098d4:	f800283a 	ret

040098d8 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
 40098d8:	defffd04 	addi	sp,sp,-12
 40098dc:	dfc00215 	stw	ra,8(sp)
 40098e0:	df000115 	stw	fp,4(sp)
 40098e4:	df000104 	addi	fp,sp,4
 40098e8:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
 40098ec:	010100b4 	movhi	r4,1026
 40098f0:	21139f04 	addi	r4,r4,20092
 40098f4:	400f4c80 	call	400f4c8 <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 40098f8:	01800604 	movi	r6,24
 40098fc:	01402204 	movi	r5,136
 4009900:	e13fff17 	ldw	r4,-4(fp)
 4009904:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 4009908:	e13fff17 	ldw	r4,-4(fp)
 400990c:	40097e40 	call	40097e4 <_ZN8MAX3421e5resetEv>
 4009910:	10bfffcc 	andi	r2,r2,65535
 4009914:	1005003a 	cmpeq	r2,r2,zero
 4009918:	10803fcc 	andi	r2,r2,255
 400991c:	10000226 	beq	r2,zero,4009928 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
 4009920:	00bfffc4 	movi	r2,-1
 4009924:	00002006 	br	40099a8 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 4009928:	01803044 	movi	r6,193
 400992c:	01403604 	movi	r5,216
 4009930:	e13fff17 	ldw	r4,-4(fp)
 4009934:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 4009938:	01801804 	movi	r6,96
 400993c:	01403404 	movi	r5,208
 4009940:	e13fff17 	ldw	r4,-4(fp)
 4009944:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 4009948:	01800104 	movi	r6,4
 400994c:	01403a04 	movi	r5,232
 4009950:	e13fff17 	ldw	r4,-4(fp)
 4009954:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 4009958:	01403a04 	movi	r5,232
 400995c:	e13fff17 	ldw	r4,-4(fp)
 4009960:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009964:	10803fcc 	andi	r2,r2,255
 4009968:	1080010c 	andi	r2,r2,4
 400996c:	1005003a 	cmpeq	r2,r2,zero
 4009970:	10803fcc 	andi	r2,r2,255
 4009974:	10000126 	beq	r2,zero,400997c <_ZN8MAX3421e4InitEv+0xa4>
 4009978:	003ff706 	br	4009958 <__alt_mem_onchip_memory2_0+0xfc0086b8>

	busprobe(); //check if anything is connected
 400997c:	e13fff17 	ldw	r4,-4(fp)
 4009980:	4009ad40 	call	4009ad4 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 4009984:	01800804 	movi	r6,32
 4009988:	01403204 	movi	r5,200
 400998c:	e13fff17 	ldw	r4,-4(fp)
 4009990:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
 4009994:	01800044 	movi	r6,1
 4009998:	01402004 	movi	r5,128
 400999c:	e13fff17 	ldw	r4,-4(fp)
 40099a0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
 40099a4:	0005883a 	mov	r2,zero
}
 40099a8:	e037883a 	mov	sp,fp
 40099ac:	dfc00117 	ldw	ra,4(sp)
 40099b0:	df000017 	ldw	fp,0(sp)
 40099b4:	dec00204 	addi	sp,sp,8
 40099b8:	f800283a 	ret

040099bc <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
 40099bc:	defffc04 	addi	sp,sp,-16
 40099c0:	dfc00315 	stw	ra,12(sp)
 40099c4:	df000215 	stw	fp,8(sp)
 40099c8:	df000204 	addi	fp,sp,8
 40099cc:	e13ffe15 	stw	r4,-8(fp)
 40099d0:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
 40099d4:	010100b4 	movhi	r4,1026
 40099d8:	2113a304 	addi	r4,r4,20108
 40099dc:	400f4c80 	call	400f4c8 <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
 40099e0:	01800644 	movi	r6,25
 40099e4:	01402204 	movi	r5,136
 40099e8:	e13ffe17 	ldw	r4,-8(fp)
 40099ec:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 40099f0:	e13ffe17 	ldw	r4,-8(fp)
 40099f4:	40097e40 	call	40097e4 <_ZN8MAX3421e5resetEv>
 40099f8:	10bfffcc 	andi	r2,r2,65535
 40099fc:	1005003a 	cmpeq	r2,r2,zero
 4009a00:	10803fcc 	andi	r2,r2,255
 4009a04:	10000226 	beq	r2,zero,4009a10 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
 4009a08:	00bfffc4 	movi	r2,-1
 4009a0c:	00002c06 	br	4009ac0 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
 4009a10:	e0bfff17 	ldw	r2,-4(fp)
 4009a14:	1080fa08 	cmpgei	r2,r2,1000
 4009a18:	1000021e 	bne	r2,zero,4009a24 <_ZN8MAX3421e4InitEi+0x68>
 4009a1c:	0080fa04 	movi	r2,1000
 4009a20:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
 4009a24:	e0bfff17 	ldw	r2,-4(fp)
 4009a28:	1009883a 	mov	r4,r2
 4009a2c:	4000dd40 	call	4000dd4 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 4009a30:	01803044 	movi	r6,193
 4009a34:	01403604 	movi	r5,216
 4009a38:	e13ffe17 	ldw	r4,-8(fp)
 4009a3c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 4009a40:	01801804 	movi	r6,96
 4009a44:	01403404 	movi	r5,208
 4009a48:	e13ffe17 	ldw	r4,-8(fp)
 4009a4c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 4009a50:	01800104 	movi	r6,4
 4009a54:	01403a04 	movi	r5,232
 4009a58:	e13ffe17 	ldw	r4,-8(fp)
 4009a5c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 4009a60:	01403a04 	movi	r5,232
 4009a64:	e13ffe17 	ldw	r4,-8(fp)
 4009a68:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009a6c:	10803fcc 	andi	r2,r2,255
 4009a70:	1080010c 	andi	r2,r2,4
 4009a74:	1005003a 	cmpeq	r2,r2,zero
 4009a78:	10803fcc 	andi	r2,r2,255
 4009a7c:	10000126 	beq	r2,zero,4009a84 <_ZN8MAX3421e4InitEi+0xc8>
 4009a80:	003ff706 	br	4009a60 <__alt_mem_onchip_memory2_0+0xfc0087c0>

	busprobe(); //check if anything is connected
 4009a84:	e13ffe17 	ldw	r4,-8(fp)
 4009a88:	4009ad40 	call	4009ad4 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 4009a8c:	01800804 	movi	r6,32
 4009a90:	01403204 	movi	r5,200
 4009a94:	e13ffe17 	ldw	r4,-8(fp)
 4009a98:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
 4009a9c:	01800044 	movi	r6,1
 4009aa0:	01402004 	movi	r5,128
 4009aa4:	e13ffe17 	ldw	r4,-8(fp)
 4009aa8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 4009aac:	01800604 	movi	r6,24
 4009ab0:	01402204 	movi	r5,136
 4009ab4:	e13ffe17 	ldw	r4,-8(fp)
 4009ab8:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

	return ( 0);
 4009abc:	0005883a 	mov	r2,zero
}
 4009ac0:	e037883a 	mov	sp,fp
 4009ac4:	dfc00117 	ldw	ra,4(sp)
 4009ac8:	df000017 	ldw	fp,0(sp)
 4009acc:	dec00204 	addi	sp,sp,8
 4009ad0:	f800283a 	ret

04009ad4 <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
 4009ad4:	defffc04 	addi	sp,sp,-16
 4009ad8:	dfc00315 	stw	ra,12(sp)
 4009adc:	df000215 	stw	fp,8(sp)
 4009ae0:	df000204 	addi	fp,sp,8
 4009ae4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
 4009ae8:	010100b4 	movhi	r4,1026
 4009aec:	2113a904 	addi	r4,r4,20132
 4009af0:	400f4c80 	call	400f4c8 <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
 4009af4:	01403e04 	movi	r5,248
 4009af8:	e13fff17 	ldw	r4,-4(fp)
 4009afc:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009b00:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 4009b04:	e0fffe03 	ldbu	r3,-8(fp)
 4009b08:	00bff004 	movi	r2,-64
 4009b0c:	1884703a 	and	r2,r3,r2
 4009b10:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
 4009b14:	e0bffe03 	ldbu	r2,-8(fp)
 4009b18:	10c01020 	cmpeqi	r3,r2,64
 4009b1c:	1800251e 	bne	r3,zero,4009bb4 <_ZN8MAX3421e8busprobeEv+0xe0>
 4009b20:	10c01048 	cmpgei	r3,r2,65
 4009b24:	1800021e 	bne	r3,zero,4009b30 <_ZN8MAX3421e8busprobeEv+0x5c>
 4009b28:	10003b26 	beq	r2,zero,4009c18 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
 4009b2c:	00004006 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
 4009b30:	10c02020 	cmpeqi	r3,r2,128
 4009b34:	1800031e 	bne	r3,zero,4009b44 <_ZN8MAX3421e8busprobeEv+0x70>
 4009b38:	10803020 	cmpeqi	r2,r2,192
 4009b3c:	1000331e 	bne	r2,zero,4009c0c <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
 4009b40:	00003b06 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
 4009b44:	01403604 	movi	r5,216
 4009b48:	e13fff17 	ldw	r4,-4(fp)
 4009b4c:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009b50:	10803fcc 	andi	r2,r2,255
 4009b54:	1080008c 	andi	r2,r2,2
 4009b58:	1005003a 	cmpeq	r2,r2,zero
 4009b5c:	10803fcc 	andi	r2,r2,255
 4009b60:	10000a26 	beq	r2,zero,4009b8c <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
 4009b64:	010100b4 	movhi	r4,1026
 4009b68:	2113ae04 	addi	r4,r4,20152
 4009b6c:	400f4c80 	call	400f4c8 <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
 4009b70:	01803244 	movi	r6,201
 4009b74:	01403604 	movi	r5,216
 4009b78:	e13fff17 	ldw	r4,-4(fp)
 4009b7c:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
 4009b80:	00800084 	movi	r2,2
 4009b84:	d0b23745 	stb	r2,-14115(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
 4009b88:	00002906 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
 4009b8c:	010100b4 	movhi	r4,1026
 4009b90:	2113b504 	addi	r4,r4,20180
 4009b94:	400f4c80 	call	400f4c8 <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
 4009b98:	018032c4 	movi	r6,203
 4009b9c:	01403604 	movi	r5,216
 4009ba0:	e13fff17 	ldw	r4,-4(fp)
 4009ba4:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
 4009ba8:	008000c4 	movi	r2,3
 4009bac:	d0b23745 	stb	r2,-14115(gp)
			}
			break;
 4009bb0:	00001f06 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
 4009bb4:	01403604 	movi	r5,216
 4009bb8:	e13fff17 	ldw	r4,-4(fp)
 4009bbc:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009bc0:	10803fcc 	andi	r2,r2,255
 4009bc4:	1080008c 	andi	r2,r2,2
 4009bc8:	1005003a 	cmpeq	r2,r2,zero
 4009bcc:	10803fcc 	andi	r2,r2,255
 4009bd0:	10000726 	beq	r2,zero,4009bf0 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
 4009bd4:	018032c4 	movi	r6,203
 4009bd8:	01403604 	movi	r5,216
 4009bdc:	e13fff17 	ldw	r4,-4(fp)
 4009be0:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
 4009be4:	008000c4 	movi	r2,3
 4009be8:	d0b23745 	stb	r2,-14115(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
 4009bec:	00001006 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
 4009bf0:	01803244 	movi	r6,201
 4009bf4:	01403604 	movi	r5,216
 4009bf8:	e13fff17 	ldw	r4,-4(fp)
 4009bfc:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
 4009c00:	00800084 	movi	r2,2
 4009c04:	d0b23745 	stb	r2,-14115(gp)
			}
			break;
 4009c08:	00000906 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
 4009c0c:	00800044 	movi	r2,1
 4009c10:	d0b23745 	stb	r2,-14115(gp)
			break;
 4009c14:	00000606 	br	4009c30 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 4009c18:	01803444 	movi	r6,209
 4009c1c:	01403604 	movi	r5,216
 4009c20:	e13fff17 	ldw	r4,-4(fp)
 4009c24:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
 4009c28:	d0323745 	stb	zero,-14115(gp)
			break;
 4009c2c:	0001883a 	nop
	}//end switch( bus_sample )
}
 4009c30:	0001883a 	nop
 4009c34:	e037883a 	mov	sp,fp
 4009c38:	dfc00117 	ldw	ra,4(sp)
 4009c3c:	df000017 	ldw	fp,0(sp)
 4009c40:	dec00204 	addi	sp,sp,8
 4009c44:	f800283a 	ret

04009c48 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
 4009c48:	defffc04 	addi	sp,sp,-16
 4009c4c:	dfc00315 	stw	ra,12(sp)
 4009c50:	df000215 	stw	fp,8(sp)
 4009c54:	df000204 	addi	fp,sp,8
 4009c58:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
 4009c5c:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
 4009c60:	00820034 	movhi	r2,2048
 4009c64:	1084a004 	addi	r2,r2,4736
 4009c68:	10800003 	ldbu	r2,0(r2)
 4009c6c:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 4009c70:	00820034 	movhi	r2,2048
 4009c74:	1084a004 	addi	r2,r2,4736
 4009c78:	10800037 	ldwio	r2,0(r2)
 4009c7c:	1005003a 	cmpeq	r2,r2,zero
 4009c80:	10803fcc 	andi	r2,r2,255
 4009c84:	10000326 	beq	r2,zero,4009c94 <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
 4009c88:	e13fff17 	ldw	r4,-4(fp)
 4009c8c:	4009cac0 	call	4009cac <_ZN8MAX3421e10IntHandlerEv>
 4009c90:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
 4009c94:	e0bffe03 	ldbu	r2,-8(fp)
}
 4009c98:	e037883a 	mov	sp,fp
 4009c9c:	dfc00117 	ldw	ra,4(sp)
 4009ca0:	df000017 	ldw	fp,0(sp)
 4009ca4:	dec00204 	addi	sp,sp,8
 4009ca8:	f800283a 	ret

04009cac <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
 4009cac:	defffc04 	addi	sp,sp,-16
 4009cb0:	dfc00315 	stw	ra,12(sp)
 4009cb4:	df000215 	stw	fp,8(sp)
 4009cb8:	df000204 	addi	fp,sp,8
 4009cbc:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
 4009cc0:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
 4009cc4:	01403204 	movi	r5,200
 4009cc8:	e13fff17 	ldw	r4,-4(fp)
 4009ccc:	40095e80 	call	40095e8 <_ZN8MAX3421e5regRdEh>
 4009cd0:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
 4009cd4:	e0bffe43 	ldbu	r2,-7(fp)
 4009cd8:	1080080c 	andi	r2,r2,32
 4009cdc:	10000526 	beq	r2,zero,4009cf4 <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
 4009ce0:	e13fff17 	ldw	r4,-4(fp)
 4009ce4:	4009ad40 	call	4009ad4 <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
 4009ce8:	e0bffe03 	ldbu	r2,-8(fp)
 4009cec:	10800814 	ori	r2,r2,32
 4009cf0:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
 4009cf4:	e0bffe03 	ldbu	r2,-8(fp)
 4009cf8:	100d883a 	mov	r6,r2
 4009cfc:	01403204 	movi	r5,200
 4009d00:	e13fff17 	ldw	r4,-4(fp)
 4009d04:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
 4009d08:	e0bffe03 	ldbu	r2,-8(fp)
}
 4009d0c:	e037883a 	mov	sp,fp
 4009d10:	dfc00117 	ldw	ra,4(sp)
 4009d14:	df000017 	ldw	fp,0(sp)
 4009d18:	dec00204 	addi	sp,sp,8
 4009d1c:	f800283a 	ret

04009d20 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
 4009d20:	defffe04 	addi	sp,sp,-8
 4009d24:	df000115 	stw	fp,4(sp)
 4009d28:	df000104 	addi	fp,sp,4
 4009d2c:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
 4009d30:	0005883a 	mov	r2,zero
}
 4009d34:	e037883a 	mov	sp,fp
 4009d38:	df000017 	ldw	fp,0(sp)
 4009d3c:	dec00104 	addi	sp,sp,4
 4009d40:	f800283a 	ret

04009d44 <_Z8toBinaryh>:
USB_DEVICE_DESCRIPTOR buf;
USB Usb;


void toBinary(uint8_t a)
{
 4009d44:	defffc04 	addi	sp,sp,-16
 4009d48:	dfc00315 	stw	ra,12(sp)
 4009d4c:	df000215 	stw	fp,8(sp)
 4009d50:	df000204 	addi	fp,sp,8
 4009d54:	2005883a 	mov	r2,r4
 4009d58:	e0bfff05 	stb	r2,-4(fp)
    uint8_t i;

    for(i=0x80;i!=0;i>>=1)
 4009d5c:	00bfe004 	movi	r2,-128
 4009d60:	e0bffe05 	stb	r2,-8(fp)
 4009d64:	e0bffe03 	ldbu	r2,-8(fp)
 4009d68:	10000e26 	beq	r2,zero,4009da4 <_Z8toBinaryh+0x60>
        printf("%c",(a&i)?'1':'0');
 4009d6c:	e0ffff03 	ldbu	r3,-4(fp)
 4009d70:	e0bffe03 	ldbu	r2,-8(fp)
 4009d74:	1884703a 	and	r2,r3,r2
 4009d78:	10803fcc 	andi	r2,r2,255
 4009d7c:	10000226 	beq	r2,zero,4009d88 <_Z8toBinaryh+0x44>
 4009d80:	00800c44 	movi	r2,49
 4009d84:	00000106 	br	4009d8c <_Z8toBinaryh+0x48>
 4009d88:	00800c04 	movi	r2,48
 4009d8c:	1009883a 	mov	r4,r2
 4009d90:	400f3f00 	call	400f3f0 <putchar>

void toBinary(uint8_t a)
{
    uint8_t i;

    for(i=0x80;i!=0;i>>=1)
 4009d94:	e0bffe03 	ldbu	r2,-8(fp)
 4009d98:	1005d07a 	srai	r2,r2,1
 4009d9c:	e0bffe05 	stb	r2,-8(fp)
 4009da0:	003ff006 	br	4009d64 <__alt_mem_onchip_memory2_0+0xfc008ac4>
        printf("%c",(a&i)?'1':'0');
}
 4009da4:	0001883a 	nop
 4009da8:	e037883a 	mov	sp,fp
 4009dac:	dfc00117 	ldw	ra,4(sp)
 4009db0:	df000017 	ldw	fp,0(sp)
 4009db4:	dec00204 	addi	sp,sp,8
 4009db8:	f800283a 	ret

04009dbc <main>:

extern "C" {
        #include "sgtl5000_test.h"
}

int main() {
 4009dbc:	deffb404 	addi	sp,sp,-304
 4009dc0:	dfc04b15 	stw	ra,300(sp)
 4009dc4:	df004a15 	stw	fp,296(sp)
 4009dc8:	ddc04915 	stw	r23,292(sp)
 4009dcc:	dd804815 	stw	r22,288(sp)
 4009dd0:	dd404715 	stw	r21,284(sp)
 4009dd4:	dd004615 	stw	r20,280(sp)
 4009dd8:	dcc04515 	stw	r19,276(sp)
 4009ddc:	dc804415 	stw	r18,272(sp)
 4009de0:	dc404315 	stw	r17,268(sp)
 4009de4:	dc004215 	stw	r16,264(sp)
 4009de8:	df004a04 	addi	fp,sp,296
	printf("Initializing SGTL5000...\n");
 4009dec:	010100b4 	movhi	r4,1026
 4009df0:	211bf104 	addi	r4,r4,28612
 4009df4:	400f4c80 	call	400f4c8 <puts>
	initialize_sgtl5000();
 4009df8:	40006bc0 	call	40006bc <initialize_sgtl5000>
	printf("Initializing MIDI connection...\n");
 4009dfc:	010100b4 	movhi	r4,1026
 4009e00:	211bf804 	addi	r4,r4,28640
 4009e04:	400f4c80 	call	400f4c8 <puts>
	USBH_MIDI Midi(&Usb);
 4009e08:	e0bfcd04 	addi	r2,fp,-204
 4009e0c:	014100f4 	movhi	r5,1027
 4009e10:	29774504 	addi	r5,r5,-8940
 4009e14:	1009883a 	mov	r4,r2
 4009e18:	4006d540 	call	4006d54 <_ZN9USBH_MIDIC1EP3USB>
	if(Usb.Init() == -1){
 4009e1c:	010100f4 	movhi	r4,1027
 4009e20:	21374504 	addi	r4,r4,-8940
 4009e24:	40098d80 	call	40098d8 <_ZN8MAX3421e4InitEv>
 4009e28:	10803fcc 	andi	r2,r2,255
 4009e2c:	1080201c 	xori	r2,r2,128
 4009e30:	10bfe004 	addi	r2,r2,-128
 4009e34:	10bfffe0 	cmpeqi	r2,r2,-1
 4009e38:	10803fcc 	andi	r2,r2,255
 4009e3c:	10000426 	beq	r2,zero,4009e50 <main+0x94>
		printf("Halted...");
 4009e40:	010100b4 	movhi	r4,1026
 4009e44:	211c0004 	addi	r4,r4,28672
 4009e48:	400f3ac0 	call	400f3ac <printf>
		while(1);
 4009e4c:	003fff06 	br	4009e4c <__alt_mem_onchip_memory2_0+0xfc008bac>
	}
	delay(200);
 4009e50:	01003204 	movi	r4,200
 4009e54:	4000dd40 	call	4000dd4 <_Z5delaym>

	/* Pointers to PIOs */
	int NUM_NOTES = 4;
 4009e58:	00800104 	movi	r2,4
 4009e5c:	e0bfbf15 	stw	r2,-260(fp)

	volatile unsigned int* note_vol_array[NUM_NOTES] = {(unsigned int*)0x08001200, (unsigned int*)0x080011f0, (unsigned int*)0x080011e0, (unsigned int*)0x080011d0};
 4009e60:	e0bfbf17 	ldw	r2,-260(fp)
 4009e64:	113fffc4 	addi	r4,r2,-1
 4009e68:	e13fc015 	stw	r4,-256(fp)
 4009e6c:	2005883a 	mov	r2,r4
 4009e70:	10800044 	addi	r2,r2,1
 4009e74:	e0bfe815 	stw	r2,-96(fp)
 4009e78:	e03fe915 	stw	zero,-92(fp)
 4009e7c:	e0ffe817 	ldw	r3,-96(fp)
 4009e80:	1804d6fa 	srli	r2,r3,27
 4009e84:	e0ffe917 	ldw	r3,-92(fp)
 4009e88:	1806917a 	slli	r3,r3,5
 4009e8c:	e0ffeb15 	stw	r3,-84(fp)
 4009e90:	e0ffeb17 	ldw	r3,-84(fp)
 4009e94:	10c4b03a 	or	r2,r2,r3
 4009e98:	e0bfeb15 	stw	r2,-84(fp)
 4009e9c:	e0bfe817 	ldw	r2,-96(fp)
 4009ea0:	1004917a 	slli	r2,r2,5
 4009ea4:	2005883a 	mov	r2,r4
 4009ea8:	10800044 	addi	r2,r2,1
 4009eac:	e0bfec15 	stw	r2,-80(fp)
 4009eb0:	e03fed15 	stw	zero,-76(fp)
 4009eb4:	e0ffec17 	ldw	r3,-80(fp)
 4009eb8:	1804d6fa 	srli	r2,r3,27
 4009ebc:	e0ffed17 	ldw	r3,-76(fp)
 4009ec0:	1806917a 	slli	r3,r3,5
 4009ec4:	e0ffef15 	stw	r3,-68(fp)
 4009ec8:	e0ffef17 	ldw	r3,-68(fp)
 4009ecc:	10c4b03a 	or	r2,r2,r3
 4009ed0:	e0bfef15 	stw	r2,-68(fp)
 4009ed4:	e0bfec17 	ldw	r2,-80(fp)
 4009ed8:	1004917a 	slli	r2,r2,5
 4009edc:	2005883a 	mov	r2,r4
 4009ee0:	10800044 	addi	r2,r2,1
 4009ee4:	1085883a 	add	r2,r2,r2
 4009ee8:	1085883a 	add	r2,r2,r2
 4009eec:	108000c4 	addi	r2,r2,3
 4009ef0:	108000c4 	addi	r2,r2,3
 4009ef4:	1004d0ba 	srli	r2,r2,2
 4009ef8:	1085883a 	add	r2,r2,r2
 4009efc:	1085883a 	add	r2,r2,r2
 4009f00:	d8b7c83a 	sub	sp,sp,r2
 4009f04:	d805883a 	mov	r2,sp
 4009f08:	108000c4 	addi	r2,r2,3
 4009f0c:	1004d0ba 	srli	r2,r2,2
 4009f10:	1085883a 	add	r2,r2,r2
 4009f14:	1085883a 	add	r2,r2,r2
 4009f18:	e0bfc115 	stw	r2,-252(fp)
 4009f1c:	e0ffc117 	ldw	r3,-252(fp)
 4009f20:	00820034 	movhi	r2,2048
 4009f24:	10848004 	addi	r2,r2,4608
 4009f28:	18800015 	stw	r2,0(r3)
 4009f2c:	18c00104 	addi	r3,r3,4
 4009f30:	213fffc4 	addi	r4,r4,-1
 4009f34:	00820034 	movhi	r2,2048
 4009f38:	10847c04 	addi	r2,r2,4592
 4009f3c:	18800015 	stw	r2,0(r3)
 4009f40:	18c00104 	addi	r3,r3,4
 4009f44:	213fffc4 	addi	r4,r4,-1
 4009f48:	00820034 	movhi	r2,2048
 4009f4c:	10847804 	addi	r2,r2,4576
 4009f50:	18800015 	stw	r2,0(r3)
 4009f54:	18c00104 	addi	r3,r3,4
 4009f58:	213fffc4 	addi	r4,r4,-1
 4009f5c:	00820034 	movhi	r2,2048
 4009f60:	10847404 	addi	r2,r2,4560
 4009f64:	18800015 	stw	r2,0(r3)
 4009f68:	18c00104 	addi	r3,r3,4
 4009f6c:	20bfffc4 	addi	r2,r4,-1
 4009f70:	113fffe0 	cmpeqi	r4,r2,-1
 4009f74:	2000041e 	bne	r4,zero,4009f88 <main+0x1cc>
 4009f78:	18000015 	stw	zero,0(r3)
 4009f7c:	18c00104 	addi	r3,r3,4
 4009f80:	10bfffc4 	addi	r2,r2,-1
 4009f84:	003ffa06 	br	4009f70 <__alt_mem_onchip_memory2_0+0xfc008cd0>
	volatile unsigned int* master_vol = (unsigned int*)0x08001220;
 4009f88:	00820034 	movhi	r2,2048
 4009f8c:	10848804 	addi	r2,r2,4640
 4009f90:	e0bfc215 	stw	r2,-248(fp)
	volatile unsigned int* reverb = (unsigned int*)0x08001210;
 4009f94:	00820034 	movhi	r2,2048
 4009f98:	10848404 	addi	r2,r2,4624
 4009f9c:	e0bfc315 	stw	r2,-244(fp)
	volatile unsigned int* vibrato = (unsigned int*)0x080011c0;
 4009fa0:	00820034 	movhi	r2,2048
 4009fa4:	10847004 	addi	r2,r2,4544
 4009fa8:	e0bfc415 	stw	r2,-240(fp)
	unsigned int decay_time, release_time, sustain_level, vol, ms_to_dec;

	/* Initialize effects */
	*(master_vol) = 64;
 4009fac:	e0bfc217 	ldw	r2,-248(fp)
 4009fb0:	00c01004 	movi	r3,64
 4009fb4:	10c00015 	stw	r3,0(r2)
	*(vibrato) = 64;
 4009fb8:	e0bfc417 	ldw	r2,-240(fp)
 4009fbc:	00c01004 	movi	r3,64
 4009fc0:	10c00015 	stw	r3,0(r2)
	*(reverb) = 0;
 4009fc4:	e0bfc317 	ldw	r2,-244(fp)
 4009fc8:	10000015 	stw	zero,0(r2)
	release_time = 0;
 4009fcc:	e03fc515 	stw	zero,-236(fp)
	decay_time = 0;
 4009fd0:	e03fc615 	stw	zero,-232(fp)
	sustain_level = 127;
 4009fd4:	00801fc4 	movi	r2,127
 4009fd8:	e0bfb615 	stw	r2,-296(fp)

	for(int i = 0; i < NUM_NOTES; i++)
 4009fdc:	e03fb815 	stw	zero,-288(fp)
 4009fe0:	e0ffb817 	ldw	r3,-288(fp)
 4009fe4:	e0bfbf17 	ldw	r2,-260(fp)
 4009fe8:	18800b0e 	bge	r3,r2,400a018 <main+0x25c>
			*(note_vol_array[i]) = 0;
 4009fec:	e0ffc117 	ldw	r3,-252(fp)
 4009ff0:	e0bfb817 	ldw	r2,-288(fp)
 4009ff4:	1085883a 	add	r2,r2,r2
 4009ff8:	1085883a 	add	r2,r2,r2
 4009ffc:	1885883a 	add	r2,r3,r2
 400a000:	10800017 	ldw	r2,0(r2)
 400a004:	10000015 	stw	zero,0(r2)
	*(reverb) = 0;
	release_time = 0;
	decay_time = 0;
	sustain_level = 127;

	for(int i = 0; i < NUM_NOTES; i++)
 400a008:	e0bfb817 	ldw	r2,-288(fp)
 400a00c:	10800044 	addi	r2,r2,1
 400a010:	e0bfb815 	stw	r2,-288(fp)
 400a014:	003ff206 	br	4009fe0 <__alt_mem_onchip_memory2_0+0xfc008d40>
			*(note_vol_array[i]) = 0;

	clock_t note_clocks[NUM_NOTES];
 400a018:	e0bfbf17 	ldw	r2,-260(fp)
 400a01c:	10bfffc4 	addi	r2,r2,-1
 400a020:	e0bfc715 	stw	r2,-228(fp)
 400a024:	1007883a 	mov	r3,r2
 400a028:	18c00044 	addi	r3,r3,1
 400a02c:	e0fff015 	stw	r3,-64(fp)
 400a030:	e03ff115 	stw	zero,-60(fp)
 400a034:	e13ff017 	ldw	r4,-64(fp)
 400a038:	2006d6fa 	srli	r3,r4,27
 400a03c:	e13ff117 	ldw	r4,-60(fp)
 400a040:	202e917a 	slli	r23,r4,5
 400a044:	1deeb03a 	or	r23,r3,r23
 400a048:	e0fff017 	ldw	r3,-64(fp)
 400a04c:	182c917a 	slli	r22,r3,5
 400a050:	1007883a 	mov	r3,r2
 400a054:	18c00044 	addi	r3,r3,1
 400a058:	e0fff215 	stw	r3,-56(fp)
 400a05c:	e03ff315 	stw	zero,-52(fp)
 400a060:	e13ff217 	ldw	r4,-56(fp)
 400a064:	2006d6fa 	srli	r3,r4,27
 400a068:	e13ff317 	ldw	r4,-52(fp)
 400a06c:	202a917a 	slli	r21,r4,5
 400a070:	1d6ab03a 	or	r21,r3,r21
 400a074:	e0fff217 	ldw	r3,-56(fp)
 400a078:	1828917a 	slli	r20,r3,5
 400a07c:	10800044 	addi	r2,r2,1
 400a080:	1085883a 	add	r2,r2,r2
 400a084:	1085883a 	add	r2,r2,r2
 400a088:	108000c4 	addi	r2,r2,3
 400a08c:	108000c4 	addi	r2,r2,3
 400a090:	1004d0ba 	srli	r2,r2,2
 400a094:	1085883a 	add	r2,r2,r2
 400a098:	1085883a 	add	r2,r2,r2
 400a09c:	d8b7c83a 	sub	sp,sp,r2
 400a0a0:	d805883a 	mov	r2,sp
 400a0a4:	108000c4 	addi	r2,r2,3
 400a0a8:	1004d0ba 	srli	r2,r2,2
 400a0ac:	1085883a 	add	r2,r2,r2
 400a0b0:	1085883a 	add	r2,r2,r2
 400a0b4:	e0bfc815 	stw	r2,-224(fp)
	int available_idx;
	bool note_used[NUM_NOTES] = {false};
 400a0b8:	e0bfbf17 	ldw	r2,-260(fp)
 400a0bc:	10bfffc4 	addi	r2,r2,-1
 400a0c0:	e0bfc915 	stw	r2,-220(fp)
 400a0c4:	1007883a 	mov	r3,r2
 400a0c8:	18c00044 	addi	r3,r3,1
 400a0cc:	e0fff415 	stw	r3,-48(fp)
 400a0d0:	e03ff515 	stw	zero,-44(fp)
 400a0d4:	e13ff417 	ldw	r4,-48(fp)
 400a0d8:	2006d77a 	srli	r3,r4,29
 400a0dc:	e13ff517 	ldw	r4,-44(fp)
 400a0e0:	202690fa 	slli	r19,r4,3
 400a0e4:	1ce6b03a 	or	r19,r3,r19
 400a0e8:	e0fff417 	ldw	r3,-48(fp)
 400a0ec:	182490fa 	slli	r18,r3,3
 400a0f0:	1007883a 	mov	r3,r2
 400a0f4:	18c00044 	addi	r3,r3,1
 400a0f8:	e0fff615 	stw	r3,-40(fp)
 400a0fc:	e03ff715 	stw	zero,-36(fp)
 400a100:	e13ff617 	ldw	r4,-40(fp)
 400a104:	2006d77a 	srli	r3,r4,29
 400a108:	e13ff717 	ldw	r4,-36(fp)
 400a10c:	202290fa 	slli	r17,r4,3
 400a110:	1c62b03a 	or	r17,r3,r17
 400a114:	e0fff617 	ldw	r3,-40(fp)
 400a118:	182090fa 	slli	r16,r3,3
 400a11c:	1007883a 	mov	r3,r2
 400a120:	18c00044 	addi	r3,r3,1
 400a124:	18c000c4 	addi	r3,r3,3
 400a128:	1806d0ba 	srli	r3,r3,2
 400a12c:	18c7883a 	add	r3,r3,r3
 400a130:	18c7883a 	add	r3,r3,r3
 400a134:	d8f7c83a 	sub	sp,sp,r3
 400a138:	d807883a 	mov	r3,sp
 400a13c:	1807883a 	mov	r3,r3
 400a140:	e0ffca15 	stw	r3,-216(fp)
 400a144:	e0ffca17 	ldw	r3,-216(fp)
 400a148:	18000005 	stb	zero,0(r3)
 400a14c:	18c00044 	addi	r3,r3,1
 400a150:	10bfffc4 	addi	r2,r2,-1
 400a154:	113fffe0 	cmpeqi	r4,r2,-1
 400a158:	2000041e 	bne	r4,zero,400a16c <main+0x3b0>
 400a15c:	18000005 	stb	zero,0(r3)
 400a160:	18c00044 	addi	r3,r3,1
 400a164:	10bfffc4 	addi	r2,r2,-1
 400a168:	003ffa06 	br	400a154 <__alt_mem_onchip_memory2_0+0xfc008eb4>
	bool first_note = true;
 400a16c:	00800044 	movi	r2,1
 400a170:	e0bfba05 	stb	r2,-280(fp)
	bool muted = false;
 400a174:	e03fba45 	stb	zero,-279(fp)

	while(1){
		Usb.Task();
 400a178:	010100f4 	movhi	r4,1027
 400a17c:	21374504 	addi	r4,r4,-8940
 400a180:	4001f6c0 	call	4001f6c <_ZN3USB4TaskEv>
		if(Midi){
 400a184:	e0bfcd04 	addi	r2,fp,-204
 400a188:	1009883a 	mov	r4,r2
 400a18c:	400ad600 	call	400ad60 <_ZN9USBH_MIDIcvbEv>
 400a190:	10803fcc 	andi	r2,r2,255
 400a194:	10010626 	beq	r2,zero,400a5b0 <main+0x7f4>
			uint8_t MIDI_packet[ 3 ];
			uint8_t size;

			do {
				if ( (size = Midi.RecvData(MIDI_packet)) > 0 ) {
 400a198:	e0ffe704 	addi	r3,fp,-100
 400a19c:	e0bfcd04 	addi	r2,fp,-204
 400a1a0:	000d883a 	mov	r6,zero
 400a1a4:	180b883a 	mov	r5,r3
 400a1a8:	1009883a 	mov	r4,r2
 400a1ac:	40079dc0 	call	40079dc <_ZN9USBH_MIDI8RecvDataEPhb>
 400a1b0:	e0bfcb05 	stb	r2,-212(fp)
 400a1b4:	e0bfcb03 	ldbu	r2,-212(fp)
 400a1b8:	1004c03a 	cmpne	r2,r2,zero
 400a1bc:	10803fcc 	andi	r2,r2,255
 400a1c0:	1000f826 	beq	r2,zero,400a5a4 <main+0x7e8>

					switch(unsigned(MIDI_packet[0] >> 4)){
 400a1c4:	e0bfe703 	ldbu	r2,-100(fp)
 400a1c8:	10803fcc 	andi	r2,r2,255
 400a1cc:	1005d13a 	srai	r2,r2,4
 400a1d0:	10c00260 	cmpeqi	r3,r2,9
 400a1d4:	18000a1e 	bne	r3,zero,400a200 <main+0x444>
 400a1d8:	10c002a8 	cmpgeui	r3,r2,10
 400a1dc:	1800031e 	bne	r3,zero,400a1ec <main+0x430>
 400a1e0:	10800220 	cmpeqi	r2,r2,8
 400a1e4:	1000401e 	bne	r2,zero,400a2e8 <main+0x52c>
 400a1e8:	0000ee06 	br	400a5a4 <main+0x7e8>
 400a1ec:	10c002e0 	cmpeqi	r3,r2,11
 400a1f0:	18006a1e 	bne	r3,zero,400a39c <main+0x5e0>
 400a1f4:	108003a0 	cmpeqi	r2,r2,14
 400a1f8:	10005d1e 	bne	r2,zero,400a370 <main+0x5b4>
 400a1fc:	0000e906 	br	400a5a4 <main+0x7e8>
					case 9:						//Note ON
						if(first_note){			//handles an initial data packet that gets interpreted as note on event
 400a200:	e0bfba03 	ldbu	r2,-280(fp)
 400a204:	10000226 	beq	r2,zero,400a210 <main+0x454>
							first_note = false;
 400a208:	e03fba05 	stb	zero,-280(fp)
							break;
 400a20c:	0000e506 	br	400a5a4 <main+0x7e8>
						}

						if(!muted){	//check muted flag
 400a210:	e0bfba43 	ldbu	r2,-279(fp)
 400a214:	1080005c 	xori	r2,r2,1
 400a218:	10803fcc 	andi	r2,r2,255
 400a21c:	1000dc26 	beq	r2,zero,400a590 <main+0x7d4>
							/* Find first available note_vol */
							available_idx = -1;
 400a220:	00bfffc4 	movi	r2,-1
 400a224:	e0bfb915 	stw	r2,-284(fp)
							for(int i = 0; i < NUM_NOTES; i++){
 400a228:	e03fbb15 	stw	zero,-276(fp)
 400a22c:	e0ffbb17 	ldw	r3,-276(fp)
 400a230:	e0bfbf17 	ldw	r2,-260(fp)
 400a234:	1880130e 	bge	r3,r2,400a284 <main+0x4c8>
								if(!note_used[i]){
 400a238:	e0ffca17 	ldw	r3,-216(fp)
 400a23c:	e0bfbb17 	ldw	r2,-276(fp)
 400a240:	1885883a 	add	r2,r3,r2
 400a244:	10800003 	ldbu	r2,0(r2)
 400a248:	1080005c 	xori	r2,r2,1
 400a24c:	10803fcc 	andi	r2,r2,255
 400a250:	10000826 	beq	r2,zero,400a274 <main+0x4b8>
									available_idx = i;
 400a254:	e0bfbb17 	ldw	r2,-276(fp)
 400a258:	e0bfb915 	stw	r2,-284(fp)
									note_used[i] = true;
 400a25c:	e0ffca17 	ldw	r3,-216(fp)
 400a260:	e0bfbb17 	ldw	r2,-276(fp)
 400a264:	1885883a 	add	r2,r3,r2
 400a268:	00c00044 	movi	r3,1
 400a26c:	10c00005 	stb	r3,0(r2)
									break;
 400a270:	00000406 	br	400a284 <main+0x4c8>
						}

						if(!muted){	//check muted flag
							/* Find first available note_vol */
							available_idx = -1;
							for(int i = 0; i < NUM_NOTES; i++){
 400a274:	e0bfbb17 	ldw	r2,-276(fp)
 400a278:	10800044 	addi	r2,r2,1
 400a27c:	e0bfbb15 	stw	r2,-276(fp)
 400a280:	003fea06 	br	400a22c <__alt_mem_onchip_memory2_0+0xfc008f8c>
									note_used[i] = true;
									break;
								}
							}
							/* If a note_vol is available, write to it*/
							if(available_idx != -1){
 400a284:	e0bfb917 	ldw	r2,-284(fp)
 400a288:	10bfffe0 	cmpeqi	r2,r2,-1
 400a28c:	1000c01e 	bne	r2,zero,400a590 <main+0x7d4>
								*(note_vol_array[available_idx]) = (MIDI_packet[1] << 8) + MIDI_packet[2];
 400a290:	e0ffc117 	ldw	r3,-252(fp)
 400a294:	e0bfb917 	ldw	r2,-284(fp)
 400a298:	1085883a 	add	r2,r2,r2
 400a29c:	1085883a 	add	r2,r2,r2
 400a2a0:	1885883a 	add	r2,r3,r2
 400a2a4:	10800017 	ldw	r2,0(r2)
 400a2a8:	e0ffe743 	ldbu	r3,-99(fp)
 400a2ac:	18c03fcc 	andi	r3,r3,255
 400a2b0:	1808923a 	slli	r4,r3,8
 400a2b4:	e0ffe783 	ldbu	r3,-98(fp)
 400a2b8:	18c03fcc 	andi	r3,r3,255
 400a2bc:	20c7883a 	add	r3,r4,r3
 400a2c0:	10c00015 	stw	r3,0(r2)
								note_clocks[available_idx] = clock();
 400a2c4:	400e88c0 	call	400e88c <clock>
 400a2c8:	1009883a 	mov	r4,r2
 400a2cc:	e0ffc817 	ldw	r3,-224(fp)
 400a2d0:	e0bfb917 	ldw	r2,-284(fp)
 400a2d4:	1085883a 	add	r2,r2,r2
 400a2d8:	1085883a 	add	r2,r2,r2
 400a2dc:	1885883a 	add	r2,r3,r2
 400a2e0:	11000015 	stw	r4,0(r2)
							}
						}
						break;
 400a2e4:	0000aa06 	br	400a590 <main+0x7d4>

					case 8:		//Note OFF
						for(int i = 0; i < NUM_NOTES; i++){    								//iterate over all note_vols
 400a2e8:	e03fbc15 	stw	zero,-272(fp)
 400a2ec:	e0ffbc17 	ldw	r3,-272(fp)
 400a2f0:	e0bfbf17 	ldw	r2,-260(fp)
 400a2f4:	1880a80e 	bge	r3,r2,400a598 <main+0x7dc>
							if((*(note_vol_array[i]) >> 8) == unsigned(MIDI_packet[1])){  	//we've found the note to turn off
 400a2f8:	e0ffc117 	ldw	r3,-252(fp)
 400a2fc:	e0bfbc17 	ldw	r2,-272(fp)
 400a300:	1085883a 	add	r2,r2,r2
 400a304:	1085883a 	add	r2,r2,r2
 400a308:	1885883a 	add	r2,r3,r2
 400a30c:	10800017 	ldw	r2,0(r2)
 400a310:	10800017 	ldw	r2,0(r2)
 400a314:	1006d23a 	srli	r3,r2,8
 400a318:	e0bfe743 	ldbu	r2,-99(fp)
 400a31c:	10803fcc 	andi	r2,r2,255
 400a320:	1885003a 	cmpeq	r2,r3,r2
 400a324:	10803fcc 	andi	r2,r2,255
 400a328:	10000d26 	beq	r2,zero,400a360 <main+0x5a4>
								*(note_vol_array[i]) = 0;                  					//note turned off
 400a32c:	e0ffc117 	ldw	r3,-252(fp)
 400a330:	e0bfbc17 	ldw	r2,-272(fp)
 400a334:	1085883a 	add	r2,r2,r2
 400a338:	1085883a 	add	r2,r2,r2
 400a33c:	1885883a 	add	r2,r3,r2
 400a340:	10800017 	ldw	r2,0(r2)
 400a344:	10000015 	stw	zero,0(r2)
								note_used[i] = false;										//reset flag
 400a348:	e0ffca17 	ldw	r3,-216(fp)
 400a34c:	e0bfbc17 	ldw	r2,-272(fp)
 400a350:	1885883a 	add	r2,r3,r2
 400a354:	10000005 	stb	zero,0(r2)
								break;
 400a358:	0001883a 	nop
							}
						}
						break;
 400a35c:	00008e06 	br	400a598 <main+0x7dc>
							}
						}
						break;

					case 8:		//Note OFF
						for(int i = 0; i < NUM_NOTES; i++){    								//iterate over all note_vols
 400a360:	e0bfbc17 	ldw	r2,-272(fp)
 400a364:	10800044 	addi	r2,r2,1
 400a368:	e0bfbc15 	stw	r2,-272(fp)
 400a36c:	003fdf06 	br	400a2ec <__alt_mem_onchip_memory2_0+0xfc00904c>
							}
						}
						break;

					case 0xE:	//Pitch wheel
						*(vibrato) = unsigned(MIDI_packet[2]);
 400a370:	e0bfe783 	ldbu	r2,-98(fp)
 400a374:	10c03fcc 	andi	r3,r2,255
 400a378:	e0bfc417 	ldw	r2,-240(fp)
 400a37c:	10c00015 	stw	r3,0(r2)
						printf("Vibrato = %u\n", *vibrato);
 400a380:	e0bfc417 	ldw	r2,-240(fp)
 400a384:	10800017 	ldw	r2,0(r2)
 400a388:	100b883a 	mov	r5,r2
 400a38c:	010100b4 	movhi	r4,1026
 400a390:	211c0304 	addi	r4,r4,28684
 400a394:	400f3ac0 	call	400f3ac <printf>
						break;
 400a398:	00008206 	br	400a5a4 <main+0x7e8>

					case 0xB:	//Additional effects - Byte 2: Volume wheel (01), knobs (14-17), buttons (30-33)

						switch(unsigned(MIDI_packet[1])){
 400a39c:	e0bfe743 	ldbu	r2,-99(fp)
 400a3a0:	10803fcc 	andi	r2,r2,255
 400a3a4:	10c00d28 	cmpgeui	r3,r2,52
 400a3a8:	18007d1e 	bne	r3,zero,400a5a0 <main+0x7e4>
 400a3ac:	100690ba 	slli	r3,r2,2
 400a3b0:	00810074 	movhi	r2,1025
 400a3b4:	10a8f104 	addi	r2,r2,-23612
 400a3b8:	1885883a 	add	r2,r3,r2
 400a3bc:	10800017 	ldw	r2,0(r2)
 400a3c0:	1000683a 	jmp	r2
 400a3c4:	0400a5a0 	cmpeqi	r16,zero,662
 400a3c8:	0400a494 	movui	r16,658
 400a3cc:	0400a5a0 	cmpeqi	r16,zero,662
 400a3d0:	0400a5a0 	cmpeqi	r16,zero,662
 400a3d4:	0400a5a0 	cmpeqi	r16,zero,662
 400a3d8:	0400a5a0 	cmpeqi	r16,zero,662
 400a3dc:	0400a5a0 	cmpeqi	r16,zero,662
 400a3e0:	0400a5a0 	cmpeqi	r16,zero,662
 400a3e4:	0400a5a0 	cmpeqi	r16,zero,662
 400a3e8:	0400a5a0 	cmpeqi	r16,zero,662
 400a3ec:	0400a5a0 	cmpeqi	r16,zero,662
 400a3f0:	0400a5a0 	cmpeqi	r16,zero,662
 400a3f4:	0400a5a0 	cmpeqi	r16,zero,662
 400a3f8:	0400a5a0 	cmpeqi	r16,zero,662
 400a3fc:	0400a5a0 	cmpeqi	r16,zero,662
 400a400:	0400a5a0 	cmpeqi	r16,zero,662
 400a404:	0400a5a0 	cmpeqi	r16,zero,662
 400a408:	0400a5a0 	cmpeqi	r16,zero,662
 400a40c:	0400a5a0 	cmpeqi	r16,zero,662
 400a410:	0400a5a0 	cmpeqi	r16,zero,662
 400a414:	0400a4a8 	cmpgeui	r16,zero,658
 400a418:	0400a4bc 	xorhi	r16,zero,658
 400a41c:	0400a4cc 	andi	r16,zero,659
 400a420:	0400a4f0 	cmpltui	r16,zero,659
 400a424:	0400a5a0 	cmpeqi	r16,zero,662
 400a428:	0400a5a0 	cmpeqi	r16,zero,662
 400a42c:	0400a5a0 	cmpeqi	r16,zero,662
 400a430:	0400a5a0 	cmpeqi	r16,zero,662
 400a434:	0400a5a0 	cmpeqi	r16,zero,662
 400a438:	0400a5a0 	cmpeqi	r16,zero,662
 400a43c:	0400a5a0 	cmpeqi	r16,zero,662
 400a440:	0400a5a0 	cmpeqi	r16,zero,662
 400a444:	0400a5a0 	cmpeqi	r16,zero,662
 400a448:	0400a5a0 	cmpeqi	r16,zero,662
 400a44c:	0400a5a0 	cmpeqi	r16,zero,662
 400a450:	0400a5a0 	cmpeqi	r16,zero,662
 400a454:	0400a5a0 	cmpeqi	r16,zero,662
 400a458:	0400a5a0 	cmpeqi	r16,zero,662
 400a45c:	0400a5a0 	cmpeqi	r16,zero,662
 400a460:	0400a5a0 	cmpeqi	r16,zero,662
 400a464:	0400a5a0 	cmpeqi	r16,zero,662
 400a468:	0400a5a0 	cmpeqi	r16,zero,662
 400a46c:	0400a5a0 	cmpeqi	r16,zero,662
 400a470:	0400a5a0 	cmpeqi	r16,zero,662
 400a474:	0400a5a0 	cmpeqi	r16,zero,662
 400a478:	0400a5a0 	cmpeqi	r16,zero,662
 400a47c:	0400a5a0 	cmpeqi	r16,zero,662
 400a480:	0400a5a0 	cmpeqi	r16,zero,662
 400a484:	0400a510 	cmplti	r16,zero,660
 400a488:	0400a57c 	xorhi	r16,zero,661
 400a48c:	0400a57c 	xorhi	r16,zero,661
 400a490:	0400a57c 	xorhi	r16,zero,661

						/* Volume wheel */
						case 0x01:
							*(master_vol) = unsigned(MIDI_packet[2]);
 400a494:	e0bfe783 	ldbu	r2,-98(fp)
 400a498:	10c03fcc 	andi	r3,r2,255
 400a49c:	e0bfc217 	ldw	r2,-248(fp)
 400a4a0:	10c00015 	stw	r3,0(r2)
							break;
 400a4a4:	00003806 	br	400a588 <main+0x7cc>

						/* Knobs */
						case 0x14:	//Reverb
							*(reverb) = unsigned(MIDI_packet[2]);
 400a4a8:	e0bfe783 	ldbu	r2,-98(fp)
 400a4ac:	10c03fcc 	andi	r3,r2,255
 400a4b0:	e0bfc317 	ldw	r2,-244(fp)
 400a4b4:	10c00015 	stw	r3,0(r2)
							break;
 400a4b8:	00003306 	br	400a588 <main+0x7cc>

						case 0x15:	//Release time
							release_time = unsigned(MIDI_packet[2]);
 400a4bc:	e0bfe783 	ldbu	r2,-98(fp)
 400a4c0:	10803fcc 	andi	r2,r2,255
 400a4c4:	e0bfc515 	stw	r2,-236(fp)
							break;
 400a4c8:	00002f06 	br	400a588 <main+0x7cc>

						case 0x16:	//Decay time
							ms_to_dec = unsigned(MIDI_packet[2]) + 1;
 400a4cc:	e0bfe783 	ldbu	r2,-98(fp)
 400a4d0:	10803fcc 	andi	r2,r2,255
 400a4d4:	10800044 	addi	r2,r2,1
 400a4d8:	e0bfb715 	stw	r2,-292(fp)
							printf("Decay time = %d\n", ms_to_dec);
 400a4dc:	e17fb717 	ldw	r5,-292(fp)
 400a4e0:	010100b4 	movhi	r4,1026
 400a4e4:	211c0704 	addi	r4,r4,28700
 400a4e8:	400f3ac0 	call	400f3ac <printf>
							break;
 400a4ec:	00002606 	br	400a588 <main+0x7cc>

						case 0x17:	//Sustain level
							sustain_level = unsigned(MIDI_packet[2]);
 400a4f0:	e0bfe783 	ldbu	r2,-98(fp)
 400a4f4:	10803fcc 	andi	r2,r2,255
 400a4f8:	e0bfb615 	stw	r2,-296(fp)
							printf("Sustain level = %u\n", sustain_level);
 400a4fc:	e17fb617 	ldw	r5,-296(fp)
 400a500:	010100b4 	movhi	r4,1026
 400a504:	211c0c04 	addi	r4,r4,28720
 400a508:	400f3ac0 	call	400f3ac <printf>
							break;
 400a50c:	00001e06 	br	400a588 <main+0x7cc>

						/* Buttons */
						case 0x30:	//1: mute
							if(unsigned(MIDI_packet[2]) == 0x7F){	//button ON
 400a510:	e0bfe783 	ldbu	r2,-98(fp)
 400a514:	10803fcc 	andi	r2,r2,255
 400a518:	10801fd8 	cmpnei	r2,r2,127
 400a51c:	1000151e 	bne	r2,zero,400a574 <main+0x7b8>
								muted = true;
 400a520:	00800044 	movi	r2,1
 400a524:	e0bfba45 	stb	r2,-279(fp)
								for(int i = 0; i < NUM_NOTES; i++){
 400a528:	e03fbd15 	stw	zero,-268(fp)
 400a52c:	e0ffbd17 	ldw	r3,-268(fp)
 400a530:	e0bfbf17 	ldw	r2,-260(fp)
 400a534:	1880130e 	bge	r3,r2,400a584 <main+0x7c8>
										*(note_vol_array[i]) = 0;
 400a538:	e0ffc117 	ldw	r3,-252(fp)
 400a53c:	e0bfbd17 	ldw	r2,-268(fp)
 400a540:	1085883a 	add	r2,r2,r2
 400a544:	1085883a 	add	r2,r2,r2
 400a548:	1885883a 	add	r2,r3,r2
 400a54c:	10800017 	ldw	r2,0(r2)
 400a550:	10000015 	stw	zero,0(r2)
										note_used[i] = false;
 400a554:	e0ffca17 	ldw	r3,-216(fp)
 400a558:	e0bfbd17 	ldw	r2,-268(fp)
 400a55c:	1885883a 	add	r2,r3,r2
 400a560:	10000005 	stb	zero,0(r2)

						/* Buttons */
						case 0x30:	//1: mute
							if(unsigned(MIDI_packet[2]) == 0x7F){	//button ON
								muted = true;
								for(int i = 0; i < NUM_NOTES; i++){
 400a564:	e0bfbd17 	ldw	r2,-268(fp)
 400a568:	10800044 	addi	r2,r2,1
 400a56c:	e0bfbd15 	stw	r2,-268(fp)
 400a570:	003fee06 	br	400a52c <__alt_mem_onchip_memory2_0+0xfc00928c>
										*(note_vol_array[i]) = 0;
										note_used[i] = false;
								}
							}
							else
								muted = false;
 400a574:	e03fba45 	stb	zero,-279(fp)

							break;
 400a578:	00000206 	br	400a584 <main+0x7c8>

						case 0x31:	//2
							break;
 400a57c:	0001883a 	nop
 400a580:	00000106 	br	400a588 <main+0x7cc>
								}
							}
							else
								muted = false;

							break;
 400a584:	0001883a 	nop
						case 0x32:	//3
							break;
						case 0x33:	//4
							break;
						}
						break;
 400a588:	0001883a 	nop
 400a58c:	00000406 	br	400a5a0 <main+0x7e4>
							if(available_idx != -1){
								*(note_vol_array[available_idx]) = (MIDI_packet[1] << 8) + MIDI_packet[2];
								note_clocks[available_idx] = clock();
							}
						}
						break;
 400a590:	0001883a 	nop
 400a594:	00000306 	br	400a5a4 <main+0x7e8>
								*(note_vol_array[i]) = 0;                  					//note turned off
								note_used[i] = false;										//reset flag
								break;
							}
						}
						break;
 400a598:	0001883a 	nop
 400a59c:	00000106 	br	400a5a4 <main+0x7e8>
						case 0x32:	//3
							break;
						case 0x33:	//4
							break;
						}
						break;
 400a5a0:	0001883a 	nop
					}
				}
			} while (size > 0);
 400a5a4:	e0bfcb03 	ldbu	r2,-212(fp)
 400a5a8:	10000126 	beq	r2,zero,400a5b0 <main+0x7f4>
		Usb.Task();
		if(Midi){
			uint8_t MIDI_packet[ 3 ];
			uint8_t size;

			do {
 400a5ac:	003efa06 	br	400a198 <__alt_mem_onchip_memory2_0+0xfc008ef8>
						break;
					}
				}
			} while (size > 0);
		}
		for(int i = 0; i < NUM_NOTES; i++){
 400a5b0:	e03fbe15 	stw	zero,-264(fp)
 400a5b4:	e0ffbe17 	ldw	r3,-264(fp)
 400a5b8:	e0bfbf17 	ldw	r2,-260(fp)
 400a5bc:	18beee0e 	bge	r3,r2,400a178 <__alt_mem_onchip_memory2_0+0xfc008ed8>
			if(note_used[i]){							//if note is being played
 400a5c0:	e0ffca17 	ldw	r3,-216(fp)
 400a5c4:	e0bfbe17 	ldw	r2,-264(fp)
 400a5c8:	1885883a 	add	r2,r3,r2
 400a5cc:	10800003 	ldbu	r2,0(r2)
 400a5d0:	10803fcc 	andi	r2,r2,255
 400a5d4:	10004726 	beq	r2,zero,400a6f4 <main+0x938>
				vol = *(note_vol_array[i]) & 0x00FF;	//volume is bottom 8 bits
 400a5d8:	e0ffc117 	ldw	r3,-252(fp)
 400a5dc:	e0bfbe17 	ldw	r2,-264(fp)
 400a5e0:	1085883a 	add	r2,r2,r2
 400a5e4:	1085883a 	add	r2,r2,r2
 400a5e8:	1885883a 	add	r2,r3,r2
 400a5ec:	10800017 	ldw	r2,0(r2)
 400a5f0:	10800017 	ldw	r2,0(r2)
 400a5f4:	10803fcc 	andi	r2,r2,255
 400a5f8:	e0bfcc15 	stw	r2,-208(fp)
				if((2000*(clock() - note_clocks[i])/CLOCKS_PER_SEC) >= ms_to_dec){	//if above sustain level, decrement volume
 400a5fc:	400e88c0 	call	400e88c <clock>
 400a600:	1009883a 	mov	r4,r2
 400a604:	e0ffc817 	ldw	r3,-224(fp)
 400a608:	e0bfbe17 	ldw	r2,-264(fp)
 400a60c:	1085883a 	add	r2,r2,r2
 400a610:	1085883a 	add	r2,r2,r2
 400a614:	1885883a 	add	r2,r3,r2
 400a618:	10800017 	ldw	r2,0(r2)
 400a61c:	2085c83a 	sub	r2,r4,r2
 400a620:	0141f404 	movi	r5,2000
 400a624:	1009883a 	mov	r4,r2
 400a628:	400d7980 	call	400d798 <__mulsi3>
 400a62c:	0140fa04 	movi	r5,1000
 400a630:	1009883a 	mov	r4,r2
 400a634:	400d6dc0 	call	400d6dc <__udivsi3>
 400a638:	1007883a 	mov	r3,r2
 400a63c:	e0bfb717 	ldw	r2,-292(fp)
 400a640:	1885403a 	cmpgeu	r2,r3,r2
 400a644:	10803fcc 	andi	r2,r2,255
 400a648:	10002a26 	beq	r2,zero,400a6f4 <main+0x938>

					note_clocks[i] = clock();					//update note clock
 400a64c:	400e88c0 	call	400e88c <clock>
 400a650:	1009883a 	mov	r4,r2
 400a654:	e0ffc817 	ldw	r3,-224(fp)
 400a658:	e0bfbe17 	ldw	r2,-264(fp)
 400a65c:	1085883a 	add	r2,r2,r2
 400a660:	1085883a 	add	r2,r2,r2
 400a664:	1885883a 	add	r2,r3,r2
 400a668:	11000015 	stw	r4,0(r2)
					if( (vol > sustain_level) && (vol > 0) )	//check to decrement volume
 400a66c:	e0bfcc17 	ldw	r2,-208(fp)
 400a670:	e0ffb617 	ldw	r3,-296(fp)
 400a674:	1880122e 	bgeu	r3,r2,400a6c0 <main+0x904>
 400a678:	e0bfcc17 	ldw	r2,-208(fp)
 400a67c:	10001026 	beq	r2,zero,400a6c0 <main+0x904>
						*(note_vol_array[i]) -= 1;
 400a680:	e0ffc117 	ldw	r3,-252(fp)
 400a684:	e0bfbe17 	ldw	r2,-264(fp)
 400a688:	1085883a 	add	r2,r2,r2
 400a68c:	1085883a 	add	r2,r2,r2
 400a690:	1885883a 	add	r2,r3,r2
 400a694:	10c00017 	ldw	r3,0(r2)
 400a698:	e13fc117 	ldw	r4,-252(fp)
 400a69c:	e0bfbe17 	ldw	r2,-264(fp)
 400a6a0:	1085883a 	add	r2,r2,r2
 400a6a4:	1085883a 	add	r2,r2,r2
 400a6a8:	2085883a 	add	r2,r4,r2
 400a6ac:	10800017 	ldw	r2,0(r2)
 400a6b0:	10800017 	ldw	r2,0(r2)
 400a6b4:	10bfffc4 	addi	r2,r2,-1
 400a6b8:	18800015 	stw	r2,0(r3)
 400a6bc:	00000d06 	br	400a6f4 <main+0x938>
					else if(vol == 0){										//turn note off if volume is zero
 400a6c0:	e0bfcc17 	ldw	r2,-208(fp)
 400a6c4:	10000b1e 	bne	r2,zero,400a6f4 <main+0x938>
						*(note_vol_array[i]) = 0;
 400a6c8:	e0ffc117 	ldw	r3,-252(fp)
 400a6cc:	e0bfbe17 	ldw	r2,-264(fp)
 400a6d0:	1085883a 	add	r2,r2,r2
 400a6d4:	1085883a 	add	r2,r2,r2
 400a6d8:	1885883a 	add	r2,r3,r2
 400a6dc:	10800017 	ldw	r2,0(r2)
 400a6e0:	10000015 	stw	zero,0(r2)
						note_used[i] = false;
 400a6e4:	e0ffca17 	ldw	r3,-216(fp)
 400a6e8:	e0bfbe17 	ldw	r2,-264(fp)
 400a6ec:	1885883a 	add	r2,r3,r2
 400a6f0:	10000005 	stb	zero,0(r2)
						break;
					}
				}
			} while (size > 0);
		}
		for(int i = 0; i < NUM_NOTES; i++){
 400a6f4:	e0bfbe17 	ldw	r2,-264(fp)
 400a6f8:	10800044 	addi	r2,r2,1
 400a6fc:	e0bfbe15 	stw	r2,-264(fp)
 400a700:	003fac06 	br	400a5b4 <__alt_mem_onchip_memory2_0+0xfc009314>

0400a704 <_Z9test_loopv>:
		}
	}
}


void test_loop() {
 400a704:	defffd04 	addi	sp,sp,-12
 400a708:	dfc00215 	stw	ra,8(sp)
 400a70c:	df000115 	stw	fp,4(sp)
 400a710:	df000104 	addi	fp,sp,4
        delay(200);
 400a714:	01003204 	movi	r4,200
 400a718:	4000dd40 	call	4000dd4 <_Z5delaym>
        Usb.Task();
 400a71c:	010100f4 	movhi	r4,1027
 400a720:	21374504 	addi	r4,r4,-8940
 400a724:	4001f6c0 	call	4001f6c <_ZN3USB4TaskEv>
        usbstate = Usb.getUsbTaskState();
 400a728:	010100f4 	movhi	r4,1027
 400a72c:	21374504 	addi	r4,r4,-8940
 400a730:	4000ed80 	call	4000ed8 <_ZN3USB15getUsbTaskStateEv>
 400a734:	d0b237c5 	stb	r2,-14113(gp)
        if(usbstate != laststate) {
 400a738:	d0f237c3 	ldbu	r3,-14113(gp)
 400a73c:	d0b23803 	ldbu	r2,-14112(gp)
 400a740:	18c03fcc 	andi	r3,r3,255
 400a744:	10803fcc 	andi	r2,r2,255
 400a748:	1880fc26 	beq	r3,r2,400ab3c <_Z9test_loopv+0x438>
                laststate = usbstate;
 400a74c:	d0b237c3 	ldbu	r2,-14113(gp)
 400a750:	d0b23805 	stb	r2,-14112(gp)
                /**/
                switch(usbstate) {
 400a754:	d0b237c3 	ldbu	r2,-14113(gp)
 400a758:	10803fcc 	andi	r2,r2,255
 400a75c:	10c01820 	cmpeqi	r3,r2,96
 400a760:	18001f1e 	bne	r3,zero,400a7e0 <_Z9test_loopv+0xdc>
 400a764:	10c01848 	cmpgei	r3,r2,97
 400a768:	1800071e 	bne	r3,zero,400a788 <_Z9test_loopv+0x84>
 400a76c:	10c00c20 	cmpeqi	r3,r2,48
 400a770:	1800111e 	bne	r3,zero,400a7b8 <_Z9test_loopv+0xb4>
 400a774:	10c01420 	cmpeqi	r3,r2,80
 400a778:	1800141e 	bne	r3,zero,400a7cc <_Z9test_loopv+0xc8>
 400a77c:	108004a0 	cmpeqi	r2,r2,18
 400a780:	1000081e 	bne	r2,zero,400a7a4 <_Z9test_loopv+0xa0>
                        case( USB_STATE_ERROR):
                                E_Notify(PSTR("\r\nUSB state machine reached error state"), 0x80);
                                break;

                        default:
                                break;
 400a784:	0000ed06 	br	400ab3c <_Z9test_loopv+0x438>
        Usb.Task();
        usbstate = Usb.getUsbTaskState();
        if(usbstate != laststate) {
                laststate = usbstate;
                /**/
                switch(usbstate) {
 400a788:	10c02420 	cmpeqi	r3,r2,144
 400a78c:	18001e1e 	bne	r3,zero,400a808 <_Z9test_loopv+0x104>
 400a790:	10c02820 	cmpeqi	r3,r2,160
 400a794:	1800e41e 	bne	r3,zero,400ab28 <_Z9test_loopv+0x424>
 400a798:	10801c20 	cmpeqi	r2,r2,112
 400a79c:	1000151e 	bne	r2,zero,400a7f4 <_Z9test_loopv+0xf0>
                        case( USB_STATE_ERROR):
                                E_Notify(PSTR("\r\nUSB state machine reached error state"), 0x80);
                                break;

                        default:
                                break;
 400a7a0:	0000e606 	br	400ab3c <_Z9test_loopv+0x438>
        if(usbstate != laststate) {
                laststate = usbstate;
                /**/
                switch(usbstate) {
                        case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE):
                                E_Notify(PSTR("\r\nWaiting for device..."), 0x80);
 400a7a4:	01402004 	movi	r5,128
 400a7a8:	010100b4 	movhi	r4,1026
 400a7ac:	211c1104 	addi	r4,r4,28740
 400a7b0:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a7b4:	0000e106 	br	400ab3c <_Z9test_loopv+0x438>
                        case( USB_ATTACHED_SUBSTATE_RESET_DEVICE):
                                E_Notify(PSTR("\r\nDevice connected. Resetting..."), 0x80);
 400a7b8:	01402004 	movi	r5,128
 400a7bc:	010100b4 	movhi	r4,1026
 400a7c0:	211c1704 	addi	r4,r4,28764
 400a7c4:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a7c8:	0000dc06 	br	400ab3c <_Z9test_loopv+0x438>
                        case( USB_ATTACHED_SUBSTATE_WAIT_SOF):
                                E_Notify(PSTR("\r\nReset complete. Waiting for the first SOF..."), 0x80);
 400a7cc:	01402004 	movi	r5,128
 400a7d0:	010100b4 	movhi	r4,1026
 400a7d4:	211c2004 	addi	r4,r4,28800
 400a7d8:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a7dc:	0000d706 	br	400ab3c <_Z9test_loopv+0x438>
                        case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE):
                                E_Notify(PSTR("\r\nSOF generation started. Enumerating device..."), 0x80);
 400a7e0:	01402004 	movi	r5,128
 400a7e4:	010100b4 	movhi	r4,1026
 400a7e8:	211c2c04 	addi	r4,r4,28848
 400a7ec:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a7f0:	0000d206 	br	400ab3c <_Z9test_loopv+0x438>
                        case( USB_STATE_ADDRESSING):
                                E_Notify(PSTR("\r\nSetting device address..."), 0x80);
 400a7f4:	01402004 	movi	r5,128
 400a7f8:	010100b4 	movhi	r4,1026
 400a7fc:	211c3804 	addi	r4,r4,28896
 400a800:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400a804:	0000cd06 	br	400ab3c <_Z9test_loopv+0x438>
                        case( USB_STATE_RUNNING):
                                E_Notify(PSTR("\r\nGetting device descriptor"), 0x80);
 400a808:	01402004 	movi	r5,128
 400a80c:	010100b4 	movhi	r4,1026
 400a810:	211c3f04 	addi	r4,r4,28924
 400a814:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                rcode = Usb.getDevDescr(1, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*) & buf);
 400a818:	00800484 	movi	r2,18
 400a81c:	10ffffcc 	andi	r3,r2,65535
 400a820:	008100f4 	movhi	r2,1027
 400a824:	10b74004 	addi	r2,r2,-8960
 400a828:	d8800015 	stw	r2,0(sp)
 400a82c:	180f883a 	mov	r7,r3
 400a830:	000d883a 	mov	r6,zero
 400a834:	01400044 	movi	r5,1
 400a838:	010100f4 	movhi	r4,1027
 400a83c:	21374504 	addi	r4,r4,-8940
 400a840:	4002f940 	call	4002f94 <_ZN3USB11getDevDescrEhhtPh>
 400a844:	d0b23785 	stb	r2,-14114(gp)

                                if(rcode) {
 400a848:	d0b23783 	ldbu	r2,-14114(gp)
 400a84c:	10803fcc 	andi	r2,r2,255
 400a850:	10000a26 	beq	r2,zero,400a87c <_Z9test_loopv+0x178>
                                        E_Notify(PSTR("\r\nError reading device descriptor. Error code "), 0x80);
 400a854:	01402004 	movi	r5,128
 400a858:	010100b4 	movhi	r4,1026
 400a85c:	211c4604 	addi	r4,r4,28952
 400a860:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(rcode, 8);
 400a864:	d0b23783 	ldbu	r2,-14114(gp)
 400a868:	10803fcc 	andi	r2,r2,255
 400a86c:	01400204 	movi	r5,8
 400a870:	1009883a 	mov	r4,r2
 400a874:	400abac0 	call	400abac <_Z9print_hexii>
#ifdef ESP8266
                                                yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif

                                }
                                break;
 400a878:	0000b006 	br	400ab3c <_Z9test_loopv+0x438>
                                if(rcode) {
                                        E_Notify(PSTR("\r\nError reading device descriptor. Error code "), 0x80);
                                        print_hex(rcode, 8);
                                } else {
                                        /**/
                                        E_Notify(PSTR("\r\nDescriptor Length:\t"), 0x80);
 400a87c:	01402004 	movi	r5,128
 400a880:	010100b4 	movhi	r4,1026
 400a884:	211c5204 	addi	r4,r4,29000
 400a888:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bLength, 8);
 400a88c:	008100f4 	movhi	r2,1027
 400a890:	10b74004 	addi	r2,r2,-8960
 400a894:	10800003 	ldbu	r2,0(r2)
 400a898:	10803fcc 	andi	r2,r2,255
 400a89c:	01400204 	movi	r5,8
 400a8a0:	1009883a 	mov	r4,r2
 400a8a4:	400abac0 	call	400abac <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDescriptor type:\t"), 0x80);
 400a8a8:	01402004 	movi	r5,128
 400a8ac:	010100b4 	movhi	r4,1026
 400a8b0:	211c5804 	addi	r4,r4,29024
 400a8b4:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDescriptorType, 8);
 400a8b8:	008100f4 	movhi	r2,1027
 400a8bc:	10b74004 	addi	r2,r2,-8960
 400a8c0:	10800043 	ldbu	r2,1(r2)
 400a8c4:	10803fcc 	andi	r2,r2,255
 400a8c8:	01400204 	movi	r5,8
 400a8cc:	1009883a 	mov	r4,r2
 400a8d0:	400abac0 	call	400abac <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nUSB version:\t\t"), 0x80);
 400a8d4:	01402004 	movi	r5,128
 400a8d8:	010100b4 	movhi	r4,1026
 400a8dc:	211c5d04 	addi	r4,r4,29044
 400a8e0:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bcdUSB, 16);
 400a8e4:	008100f4 	movhi	r2,1027
 400a8e8:	10b74004 	addi	r2,r2,-8960
 400a8ec:	10c00083 	ldbu	r3,2(r2)
 400a8f0:	108000c3 	ldbu	r2,3(r2)
 400a8f4:	1004923a 	slli	r2,r2,8
 400a8f8:	10c4b03a 	or	r2,r2,r3
 400a8fc:	10bfffcc 	andi	r2,r2,65535
 400a900:	01400404 	movi	r5,16
 400a904:	1009883a 	mov	r4,r2
 400a908:	400abac0 	call	400abac <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDevice class:\t\t"), 0x80);
 400a90c:	01402004 	movi	r5,128
 400a910:	010100b4 	movhi	r4,1026
 400a914:	211c6204 	addi	r4,r4,29064
 400a918:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDeviceClass, 8);
 400a91c:	008100f4 	movhi	r2,1027
 400a920:	10b74004 	addi	r2,r2,-8960
 400a924:	10800103 	ldbu	r2,4(r2)
 400a928:	10803fcc 	andi	r2,r2,255
 400a92c:	01400204 	movi	r5,8
 400a930:	1009883a 	mov	r4,r2
 400a934:	400abac0 	call	400abac <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDevice Subclass:\t"), 0x80);
 400a938:	01402004 	movi	r5,128
 400a93c:	010100b4 	movhi	r4,1026
 400a940:	211c6704 	addi	r4,r4,29084
 400a944:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDeviceSubClass, 8);
 400a948:	008100f4 	movhi	r2,1027
 400a94c:	10b74004 	addi	r2,r2,-8960
 400a950:	10800143 	ldbu	r2,5(r2)
 400a954:	10803fcc 	andi	r2,r2,255
 400a958:	01400204 	movi	r5,8
 400a95c:	1009883a 	mov	r4,r2
 400a960:	400abac0 	call	400abac <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nDevice Protocol:\t"), 0x80);
 400a964:	01402004 	movi	r5,128
 400a968:	010100b4 	movhi	r4,1026
 400a96c:	211c6c04 	addi	r4,r4,29104
 400a970:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bDeviceProtocol, 8);
 400a974:	008100f4 	movhi	r2,1027
 400a978:	10b74004 	addi	r2,r2,-8960
 400a97c:	10800183 	ldbu	r2,6(r2)
 400a980:	10803fcc 	andi	r2,r2,255
 400a984:	01400204 	movi	r5,8
 400a988:	1009883a 	mov	r4,r2
 400a98c:	400abac0 	call	400abac <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nMax.packet size:\t"), 0x80);
 400a990:	01402004 	movi	r5,128
 400a994:	010100b4 	movhi	r4,1026
 400a998:	211c7104 	addi	r4,r4,29124
 400a99c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bMaxPacketSize0, 8);
 400a9a0:	008100f4 	movhi	r2,1027
 400a9a4:	10b74004 	addi	r2,r2,-8960
 400a9a8:	108001c3 	ldbu	r2,7(r2)
 400a9ac:	10803fcc 	andi	r2,r2,255
 400a9b0:	01400204 	movi	r5,8
 400a9b4:	1009883a 	mov	r4,r2
 400a9b8:	400abac0 	call	400abac <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nVendor  ID:\t\t"), 0x80);
 400a9bc:	01402004 	movi	r5,128
 400a9c0:	010100b4 	movhi	r4,1026
 400a9c4:	211c7604 	addi	r4,r4,29144
 400a9c8:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.idVendor, 16);
 400a9cc:	008100f4 	movhi	r2,1027
 400a9d0:	10b74004 	addi	r2,r2,-8960
 400a9d4:	10c00203 	ldbu	r3,8(r2)
 400a9d8:	10800243 	ldbu	r2,9(r2)
 400a9dc:	1004923a 	slli	r2,r2,8
 400a9e0:	10c4b03a 	or	r2,r2,r3
 400a9e4:	10bfffcc 	andi	r2,r2,65535
 400a9e8:	01400404 	movi	r5,16
 400a9ec:	1009883a 	mov	r4,r2
 400a9f0:	400abac0 	call	400abac <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nProduct ID:\t\t"), 0x80);
 400a9f4:	01402004 	movi	r5,128
 400a9f8:	010100b4 	movhi	r4,1026
 400a9fc:	211c7a04 	addi	r4,r4,29160
 400aa00:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.idProduct, 16);
 400aa04:	008100f4 	movhi	r2,1027
 400aa08:	10b74004 	addi	r2,r2,-8960
 400aa0c:	10c00283 	ldbu	r3,10(r2)
 400aa10:	108002c3 	ldbu	r2,11(r2)
 400aa14:	1004923a 	slli	r2,r2,8
 400aa18:	10c4b03a 	or	r2,r2,r3
 400aa1c:	10bfffcc 	andi	r2,r2,65535
 400aa20:	01400404 	movi	r5,16
 400aa24:	1009883a 	mov	r4,r2
 400aa28:	400abac0 	call	400abac <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nRevision ID:\t\t"), 0x80);
 400aa2c:	01402004 	movi	r5,128
 400aa30:	010100b4 	movhi	r4,1026
 400aa34:	211c7e04 	addi	r4,r4,29176
 400aa38:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bcdDevice, 16);
 400aa3c:	008100f4 	movhi	r2,1027
 400aa40:	10b74004 	addi	r2,r2,-8960
 400aa44:	10c00303 	ldbu	r3,12(r2)
 400aa48:	10800343 	ldbu	r2,13(r2)
 400aa4c:	1004923a 	slli	r2,r2,8
 400aa50:	10c4b03a 	or	r2,r2,r3
 400aa54:	10bfffcc 	andi	r2,r2,65535
 400aa58:	01400404 	movi	r5,16
 400aa5c:	1009883a 	mov	r4,r2
 400aa60:	400abac0 	call	400abac <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nMfg.string index:\t"), 0x80);
 400aa64:	01402004 	movi	r5,128
 400aa68:	010100b4 	movhi	r4,1026
 400aa6c:	211c8304 	addi	r4,r4,29196
 400aa70:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.iManufacturer, 8);
 400aa74:	008100f4 	movhi	r2,1027
 400aa78:	10b74004 	addi	r2,r2,-8960
 400aa7c:	10800383 	ldbu	r2,14(r2)
 400aa80:	10803fcc 	andi	r2,r2,255
 400aa84:	01400204 	movi	r5,8
 400aa88:	1009883a 	mov	r4,r2
 400aa8c:	400abac0 	call	400abac <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nProd.string index:\t"), 0x80);
 400aa90:	01402004 	movi	r5,128
 400aa94:	010100b4 	movhi	r4,1026
 400aa98:	211c8904 	addi	r4,r4,29220
 400aa9c:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.iProduct, 8);
 400aaa0:	008100f4 	movhi	r2,1027
 400aaa4:	10b74004 	addi	r2,r2,-8960
 400aaa8:	108003c3 	ldbu	r2,15(r2)
 400aaac:	10803fcc 	andi	r2,r2,255
 400aab0:	01400204 	movi	r5,8
 400aab4:	1009883a 	mov	r4,r2
 400aab8:	400abac0 	call	400abac <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nSerial number index:\t"), 0x80);
 400aabc:	01402004 	movi	r5,128
 400aac0:	010100b4 	movhi	r4,1026
 400aac4:	211c8f04 	addi	r4,r4,29244
 400aac8:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.iSerialNumber, 8);
 400aacc:	008100f4 	movhi	r2,1027
 400aad0:	10b74004 	addi	r2,r2,-8960
 400aad4:	10800403 	ldbu	r2,16(r2)
 400aad8:	10803fcc 	andi	r2,r2,255
 400aadc:	01400204 	movi	r5,8
 400aae0:	1009883a 	mov	r4,r2
 400aae4:	400abac0 	call	400abac <_Z9print_hexii>
                                        E_Notify(PSTR("\r\nNumber of conf.:\t"), 0x80);
 400aae8:	01402004 	movi	r5,128
 400aaec:	010100b4 	movhi	r4,1026
 400aaf0:	211c9504 	addi	r4,r4,29268
 400aaf4:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                        print_hex(buf.bNumConfigurations, 8);
 400aaf8:	008100f4 	movhi	r2,1027
 400aafc:	10b74004 	addi	r2,r2,-8960
 400ab00:	10800443 	ldbu	r2,17(r2)
 400ab04:	10803fcc 	andi	r2,r2,255
 400ab08:	01400204 	movi	r5,8
 400ab0c:	1009883a 	mov	r4,r2
 400ab10:	400abac0 	call	400abac <_Z9print_hexii>
                                        /**/
                                        E_Notify(PSTR("\r\n\nAll tests passed. Press RESET to restart test"), 0x80);
 400ab14:	01402004 	movi	r5,128
 400ab18:	010100b4 	movhi	r4,1026
 400ab1c:	211c9a04 	addi	r4,r4,29288
 400ab20:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
#ifdef ESP8266
                                                yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif

                                }
                                break;
 400ab24:	00000506 	br	400ab3c <_Z9test_loopv+0x438>
                        case( USB_STATE_ERROR):
                                E_Notify(PSTR("\r\nUSB state machine reached error state"), 0x80);
 400ab28:	01402004 	movi	r5,128
 400ab2c:	010100b4 	movhi	r4,1026
 400ab30:	211ca704 	addi	r4,r4,29340
 400ab34:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
                                break;
 400ab38:	0001883a 	nop

                        default:
                                break;
                }//switch( usbstate...
        }
}//loop()...
 400ab3c:	0001883a 	nop
 400ab40:	e037883a 	mov	sp,fp
 400ab44:	dfc00117 	ldw	ra,4(sp)
 400ab48:	df000017 	ldw	fp,0(sp)
 400ab4c:	dec00204 	addi	sp,sp,8
 400ab50:	f800283a 	ret

0400ab54 <_Z6halt55v>:

/* constantly transmits 0x55 via SPI to aid probing */
void halt55() {
 400ab54:	defffe04 	addi	sp,sp,-8
 400ab58:	dfc00115 	stw	ra,4(sp)
 400ab5c:	df000015 	stw	fp,0(sp)
 400ab60:	d839883a 	mov	fp,sp

        E_Notify(PSTR("\r\nUnrecoverable error - test halted!!"), 0x80);
 400ab64:	01402004 	movi	r5,128
 400ab68:	010100b4 	movhi	r4,1026
 400ab6c:	211cb104 	addi	r4,r4,29380
 400ab70:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
        E_Notify(PSTR("\r\n0x55 pattern is transmitted via SPI"), 0x80);
 400ab74:	01402004 	movi	r5,128
 400ab78:	010100b4 	movhi	r4,1026
 400ab7c:	211cbb04 	addi	r4,r4,29420
 400ab80:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
        E_Notify(PSTR("\r\nPress RESET to restart test"), 0x80);
 400ab84:	01402004 	movi	r5,128
 400ab88:	010100b4 	movhi	r4,1026
 400ab8c:	211cc504 	addi	r4,r4,29460
 400ab90:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>

        while(1) {
                Usb.regWr(0x55, 0x55);
 400ab94:	01801544 	movi	r6,85
 400ab98:	01401544 	movi	r5,85
 400ab9c:	010100f4 	movhi	r4,1027
 400aba0:	21374504 	addi	r4,r4,-8940
 400aba4:	40093b40 	call	40093b4 <_ZN8MAX3421e5regWrEhh>

        E_Notify(PSTR("\r\nUnrecoverable error - test halted!!"), 0x80);
        E_Notify(PSTR("\r\n0x55 pattern is transmitted via SPI"), 0x80);
        E_Notify(PSTR("\r\nPress RESET to restart test"), 0x80);

        while(1) {
 400aba8:	003ffa06 	br	400ab94 <__alt_mem_onchip_memory2_0+0xfc0098f4>

0400abac <_Z9print_hexii>:
#endif
        }
}

/* prints hex numbers with leading zeroes */
void print_hex(int v, int num_places) {
 400abac:	defff804 	addi	sp,sp,-32
 400abb0:	dfc00715 	stw	ra,28(sp)
 400abb4:	df000615 	stw	fp,24(sp)
 400abb8:	df000604 	addi	fp,sp,24
 400abbc:	e13ffe15 	stw	r4,-8(fp)
 400abc0:	e17fff15 	stw	r5,-4(fp)
        int mask = 0, n, num_nibbles, digit;
 400abc4:	e03ffa15 	stw	zero,-24(fp)

        for(n = 1; n <= num_places; n++) {
 400abc8:	00800044 	movi	r2,1
 400abcc:	e0bffb15 	stw	r2,-20(fp)
 400abd0:	e0bffb17 	ldw	r2,-20(fp)
 400abd4:	e0ffff17 	ldw	r3,-4(fp)
 400abd8:	18800816 	blt	r3,r2,400abfc <_Z9print_hexii+0x50>
                mask = (mask << 1) | 0x0001;
 400abdc:	e0bffa17 	ldw	r2,-24(fp)
 400abe0:	1085883a 	add	r2,r2,r2
 400abe4:	10800054 	ori	r2,r2,1
 400abe8:	e0bffa15 	stw	r2,-24(fp)

/* prints hex numbers with leading zeroes */
void print_hex(int v, int num_places) {
        int mask = 0, n, num_nibbles, digit;

        for(n = 1; n <= num_places; n++) {
 400abec:	e0bffb17 	ldw	r2,-20(fp)
 400abf0:	10800044 	addi	r2,r2,1
 400abf4:	e0bffb15 	stw	r2,-20(fp)
 400abf8:	003ff506 	br	400abd0 <__alt_mem_onchip_memory2_0+0xfc009930>
                mask = (mask << 1) | 0x0001;
        }
        v = v & mask; // truncate v to specified number of places
 400abfc:	e0fffe17 	ldw	r3,-8(fp)
 400ac00:	e0bffa17 	ldw	r2,-24(fp)
 400ac04:	1884703a 	and	r2,r3,r2
 400ac08:	e0bffe15 	stw	r2,-8(fp)

        num_nibbles = num_places / 4;
 400ac0c:	e0bfff17 	ldw	r2,-4(fp)
 400ac10:	1000010e 	bge	r2,zero,400ac18 <_Z9print_hexii+0x6c>
 400ac14:	108000c4 	addi	r2,r2,3
 400ac18:	1005d0ba 	srai	r2,r2,2
 400ac1c:	e0bffc15 	stw	r2,-16(fp)
        if((num_places % 4) != 0) {
 400ac20:	e0bfff17 	ldw	r2,-4(fp)
 400ac24:	108000cc 	andi	r2,r2,3
 400ac28:	10000326 	beq	r2,zero,400ac38 <_Z9print_hexii+0x8c>
                ++num_nibbles;
 400ac2c:	e0bffc17 	ldw	r2,-16(fp)
 400ac30:	10800044 	addi	r2,r2,1
 400ac34:	e0bffc15 	stw	r2,-16(fp)
        }
        do {
                digit = ((v >> (num_nibbles - 1) * 4)) & 0x0f;
 400ac38:	e0bffc17 	ldw	r2,-16(fp)
 400ac3c:	10bfffc4 	addi	r2,r2,-1
 400ac40:	1085883a 	add	r2,r2,r2
 400ac44:	1085883a 	add	r2,r2,r2
 400ac48:	1007883a 	mov	r3,r2
 400ac4c:	e0bffe17 	ldw	r2,-8(fp)
 400ac50:	10c5d83a 	sra	r2,r2,r3
 400ac54:	108003cc 	andi	r2,r2,15
 400ac58:	e0bffd15 	stw	r2,-12(fp)
                printf("%x\n", digit);
 400ac5c:	e17ffd17 	ldw	r5,-12(fp)
 400ac60:	010100b4 	movhi	r4,1026
 400ac64:	211ccd04 	addi	r4,r4,29492
 400ac68:	400f3ac0 	call	400f3ac <printf>

        num_nibbles = num_places / 4;
        if((num_places % 4) != 0) {
                ++num_nibbles;
        }
        do {
 400ac6c:	e0bffc17 	ldw	r2,-16(fp)
 400ac70:	10bfffc4 	addi	r2,r2,-1
 400ac74:	e0bffc15 	stw	r2,-16(fp)
 400ac78:	e0bffc17 	ldw	r2,-16(fp)
 400ac7c:	1004c03a 	cmpne	r2,r2,zero
 400ac80:	10803fcc 	andi	r2,r2,255
 400ac84:	10000126 	beq	r2,zero,400ac8c <_Z9print_hexii+0xe0>
 400ac88:	003feb06 	br	400ac38 <__alt_mem_onchip_memory2_0+0xfc009998>
                digit = ((v >> (num_nibbles - 1) * 4)) & 0x0f;
                printf("%x\n", digit);
        } while(--num_nibbles);
}
 400ac8c:	0001883a 	nop
 400ac90:	e037883a 	mov	sp,fp
 400ac94:	dfc00117 	ldw	ra,4(sp)
 400ac98:	df000017 	ldw	fp,0(sp)
 400ac9c:	dec00204 	addi	sp,sp,8
 400aca0:	f800283a 	ret

0400aca4 <_Z13press_any_keyv>:

/* prints "Press any key" and returns when key is pressed */
void press_any_key() {
 400aca4:	defffe04 	addi	sp,sp,-8
 400aca8:	dfc00115 	stw	ra,4(sp)
 400acac:	df000015 	stw	fp,0(sp)
 400acb0:	d839883a 	mov	fp,sp
        E_Notify(PSTR("\r\nPress any key to continue..."), 0x80);
 400acb4:	01402004 	movi	r5,128
 400acb8:	010100b4 	movhi	r4,1026
 400acbc:	211cce04 	addi	r4,r4,29496
 400acc0:	40068a00 	call	40068a0 <_Z8E_NotifyPKci>
//        char x;
//        scanf("%s", &x);
}
 400acc4:	0001883a 	nop
 400acc8:	e037883a 	mov	sp,fp
 400accc:	dfc00117 	ldw	ra,4(sp)
 400acd0:	df000017 	ldw	fp,0(sp)
 400acd4:	dec00204 	addi	sp,sp,8
 400acd8:	f800283a 	ret

0400acdc <_Z41__static_initialization_and_destruction_0ii>:
 400acdc:	defffc04 	addi	sp,sp,-16
 400ace0:	dfc00315 	stw	ra,12(sp)
 400ace4:	df000215 	stw	fp,8(sp)
 400ace8:	df000204 	addi	fp,sp,8
 400acec:	e13ffe15 	stw	r4,-8(fp)
 400acf0:	e17fff15 	stw	r5,-4(fp)
 400acf4:	e0bffe17 	ldw	r2,-8(fp)
 400acf8:	10800058 	cmpnei	r2,r2,1
 400acfc:	1000061e 	bne	r2,zero,400ad18 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 400ad00:	e0ffff17 	ldw	r3,-4(fp)
 400ad04:	00bfffd4 	movui	r2,65535
 400ad08:	1880031e 	bne	r3,r2,400ad18 <_Z41__static_initialization_and_destruction_0ii+0x3c>
uint8_t rcode;
uint8_t usbstate;
uint8_t laststate;
//uint8_t buf[sizeof(USB_DEVICE_DESCRIPTOR)];
USB_DEVICE_DESCRIPTOR buf;
USB Usb;
 400ad0c:	010100f4 	movhi	r4,1027
 400ad10:	21374504 	addi	r4,r4,-8940
 400ad14:	4000e540 	call	4000e54 <_ZN3USBC1Ev>
/* prints "Press any key" and returns when key is pressed */
void press_any_key() {
        E_Notify(PSTR("\r\nPress any key to continue..."), 0x80);
//        char x;
//        scanf("%s", &x);
}
 400ad18:	0001883a 	nop
 400ad1c:	e037883a 	mov	sp,fp
 400ad20:	dfc00117 	ldw	ra,4(sp)
 400ad24:	df000017 	ldw	fp,0(sp)
 400ad28:	dec00204 	addi	sp,sp,8
 400ad2c:	f800283a 	ret

0400ad30 <_GLOBAL__sub_I_rcode>:
 400ad30:	defffe04 	addi	sp,sp,-8
 400ad34:	dfc00115 	stw	ra,4(sp)
 400ad38:	df000015 	stw	fp,0(sp)
 400ad3c:	d839883a 	mov	fp,sp
 400ad40:	017fffd4 	movui	r5,65535
 400ad44:	01000044 	movi	r4,1
 400ad48:	400acdc0 	call	400acdc <_Z41__static_initialization_and_destruction_0ii>
 400ad4c:	e037883a 	mov	sp,fp
 400ad50:	dfc00117 	ldw	ra,4(sp)
 400ad54:	df000017 	ldw	fp,0(sp)
 400ad58:	dec00204 	addi	sp,sp,8
 400ad5c:	f800283a 	ret

0400ad60 <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
 400ad60:	defffe04 	addi	sp,sp,-8
 400ad64:	df000115 	stw	fp,4(sp)
 400ad68:	df000104 	addi	fp,sp,4
 400ad6c:	e13fff15 	stw	r4,-4(fp)
 400ad70:	e0bfff17 	ldw	r2,-4(fp)
 400ad74:	10800343 	ldbu	r2,13(r2)
 400ad78:	e037883a 	mov	sp,fp
 400ad7c:	df000017 	ldw	fp,0(sp)
 400ad80:	dec00104 	addi	sp,sp,4
 400ad84:	f800283a 	ret

0400ad88 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 400ad88:	008100b4 	movhi	r2,1026
 400ad8c:	109ce504 	addi	r2,r2,29588
 400ad90:	20800015 	stw	r2,0(r4)
 400ad94:	400bb601 	jmpi	400bb60 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0400ad98 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 400ad98:	defffe04 	addi	sp,sp,-8
 400ad9c:	008100b4 	movhi	r2,1026
 400ada0:	dc000015 	stw	r16,0(sp)
 400ada4:	dfc00115 	stw	ra,4(sp)
 400ada8:	109ce504 	addi	r2,r2,29588
 400adac:	20800015 	stw	r2,0(r4)
 400adb0:	2021883a 	mov	r16,r4
 400adb4:	400bb600 	call	400bb60 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 400adb8:	8009883a 	mov	r4,r16
 400adbc:	dfc00117 	ldw	ra,4(sp)
 400adc0:	dc000017 	ldw	r16,0(sp)
 400adc4:	dec00204 	addi	sp,sp,8
 400adc8:	400ba8c1 	jmpi	400ba8c <_ZdlPv>

0400adcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 400adcc:	defff504 	addi	sp,sp,-44
 400add0:	dc000115 	stw	r16,4(sp)
 400add4:	38800117 	ldw	r2,4(r7)
 400add8:	24000117 	ldw	r16,4(r4)
 400addc:	df000915 	stw	fp,36(sp)
 400ade0:	ddc00815 	stw	r23,32(sp)
 400ade4:	dd800715 	stw	r22,28(sp)
 400ade8:	dcc00415 	stw	r19,16(sp)
 400adec:	dc800315 	stw	r18,12(sp)
 400adf0:	dc400215 	stw	r17,8(sp)
 400adf4:	dfc00a15 	stw	ra,40(sp)
 400adf8:	dd400615 	stw	r21,24(sp)
 400adfc:	dd000515 	stw	r20,20(sp)
 400ae00:	2823883a 	mov	r17,r5
 400ae04:	3039883a 	mov	fp,r6
 400ae08:	dcc00b17 	ldw	r19,44(sp)
 400ae0c:	ddc00c17 	ldw	r23,48(sp)
 400ae10:	dd800d17 	ldw	r22,52(sp)
 400ae14:	dc800e17 	ldw	r18,56(sp)
 400ae18:	80800b26 	beq	r16,r2,400ae48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
 400ae1c:	80c00007 	ldb	r3,0(r16)
 400ae20:	2029883a 	mov	r20,r4
 400ae24:	01000a84 	movi	r4,42
 400ae28:	382b883a 	mov	r21,r7
 400ae2c:	19001a26 	beq	r3,r4,400ae98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 400ae30:	100b883a 	mov	r5,r2
 400ae34:	8009883a 	mov	r4,r16
 400ae38:	d8c00015 	stw	r3,0(sp)
 400ae3c:	400f8340 	call	400f834 <strcmp>
 400ae40:	d8c00017 	ldw	r3,0(sp)
 400ae44:	1000141e 	bne	r2,zero,400ae98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 400ae48:	94c00015 	stw	r19,0(r18)
 400ae4c:	97000115 	stw	fp,4(r18)
 400ae50:	88002816 	blt	r17,zero,400aef4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
 400ae54:	9c63883a 	add	r17,r19,r17
 400ae58:	b4403226 	beq	r22,r17,400af24 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
 400ae5c:	00800044 	movi	r2,1
 400ae60:	90800315 	stw	r2,12(r18)
 400ae64:	0005883a 	mov	r2,zero
 400ae68:	dfc00a17 	ldw	ra,40(sp)
 400ae6c:	df000917 	ldw	fp,36(sp)
 400ae70:	ddc00817 	ldw	r23,32(sp)
 400ae74:	dd800717 	ldw	r22,28(sp)
 400ae78:	dd400617 	ldw	r21,24(sp)
 400ae7c:	dd000517 	ldw	r20,20(sp)
 400ae80:	dcc00417 	ldw	r19,16(sp)
 400ae84:	dc800317 	ldw	r18,12(sp)
 400ae88:	dc400217 	ldw	r17,8(sp)
 400ae8c:	dc000117 	ldw	r16,4(sp)
 400ae90:	dec00b04 	addi	sp,sp,44
 400ae94:	f800283a 	ret
 400ae98:	9d801926 	beq	r19,r22,400af00 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 400ae9c:	a1000217 	ldw	r4,8(r20)
 400aea0:	a80f883a 	mov	r7,r21
 400aea4:	e00d883a 	mov	r6,fp
 400aea8:	20800017 	ldw	r2,0(r4)
 400aeac:	dc800e15 	stw	r18,56(sp)
 400aeb0:	dd800d15 	stw	r22,52(sp)
 400aeb4:	ddc00c15 	stw	r23,48(sp)
 400aeb8:	dcc00b15 	stw	r19,44(sp)
 400aebc:	10800717 	ldw	r2,28(r2)
 400aec0:	880b883a 	mov	r5,r17
 400aec4:	dfc00a17 	ldw	ra,40(sp)
 400aec8:	df000917 	ldw	fp,36(sp)
 400aecc:	ddc00817 	ldw	r23,32(sp)
 400aed0:	dd800717 	ldw	r22,28(sp)
 400aed4:	dd400617 	ldw	r21,24(sp)
 400aed8:	dd000517 	ldw	r20,20(sp)
 400aedc:	dcc00417 	ldw	r19,16(sp)
 400aee0:	dc800317 	ldw	r18,12(sp)
 400aee4:	dc400217 	ldw	r17,8(sp)
 400aee8:	dc000117 	ldw	r16,4(sp)
 400aeec:	dec00b04 	addi	sp,sp,44
 400aef0:	1000683a 	jmp	r2
 400aef4:	00bfff84 	movi	r2,-2
 400aef8:	88bfda1e 	bne	r17,r2,400ae64 <__alt_mem_onchip_memory2_0+0xfc009bc4>
 400aefc:	003fd706 	br	400ae5c <__alt_mem_onchip_memory2_0+0xfc009bbc>
 400af00:	b9400117 	ldw	r5,4(r23)
 400af04:	81400526 	beq	r16,r5,400af1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 400af08:	00800a84 	movi	r2,42
 400af0c:	18bfe326 	beq	r3,r2,400ae9c <__alt_mem_onchip_memory2_0+0xfc009bfc>
 400af10:	8009883a 	mov	r4,r16
 400af14:	400f8340 	call	400f834 <strcmp>
 400af18:	103fe01e 	bne	r2,zero,400ae9c <__alt_mem_onchip_memory2_0+0xfc009bfc>
 400af1c:	97000215 	stw	fp,8(r18)
 400af20:	003fd006 	br	400ae64 <__alt_mem_onchip_memory2_0+0xfc009bc4>
 400af24:	00800184 	movi	r2,6
 400af28:	003fcd06 	br	400ae60 <__alt_mem_onchip_memory2_0+0xfc009bc0>

0400af2c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 400af2c:	defffa04 	addi	sp,sp,-24
 400af30:	dc000215 	stw	r16,8(sp)
 400af34:	dc000617 	ldw	r16,24(sp)
 400af38:	dc800415 	stw	r18,16(sp)
 400af3c:	dc400315 	stw	r17,12(sp)
 400af40:	dfc00515 	stw	ra,20(sp)
 400af44:	2023883a 	mov	r17,r4
 400af48:	2825883a 	mov	r18,r5
 400af4c:	81800b26 	beq	r16,r6,400af7c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
 400af50:	89000217 	ldw	r4,8(r17)
 400af54:	900b883a 	mov	r5,r18
 400af58:	20800017 	ldw	r2,0(r4)
 400af5c:	dc000615 	stw	r16,24(sp)
 400af60:	10800817 	ldw	r2,32(r2)
 400af64:	dfc00517 	ldw	ra,20(sp)
 400af68:	dc800417 	ldw	r18,16(sp)
 400af6c:	dc400317 	ldw	r17,12(sp)
 400af70:	dc000217 	ldw	r16,8(sp)
 400af74:	dec00604 	addi	sp,sp,24
 400af78:	1000683a 	jmp	r2
 400af7c:	21000117 	ldw	r4,4(r4)
 400af80:	39400117 	ldw	r5,4(r7)
 400af84:	21400926 	beq	r4,r5,400afac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
 400af88:	20c00007 	ldb	r3,0(r4)
 400af8c:	00800a84 	movi	r2,42
 400af90:	18bfef26 	beq	r3,r2,400af50 <__alt_mem_onchip_memory2_0+0xfc009cb0>
 400af94:	d9800015 	stw	r6,0(sp)
 400af98:	d9c00115 	stw	r7,4(sp)
 400af9c:	400f8340 	call	400f834 <strcmp>
 400afa0:	d9800017 	ldw	r6,0(sp)
 400afa4:	d9c00117 	ldw	r7,4(sp)
 400afa8:	103fe91e 	bne	r2,zero,400af50 <__alt_mem_onchip_memory2_0+0xfc009cb0>
 400afac:	00800184 	movi	r2,6
 400afb0:	dfc00517 	ldw	ra,20(sp)
 400afb4:	dc800417 	ldw	r18,16(sp)
 400afb8:	dc400317 	ldw	r17,12(sp)
 400afbc:	dc000217 	ldw	r16,8(sp)
 400afc0:	dec00604 	addi	sp,sp,24
 400afc4:	f800283a 	ret

0400afc8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 400afc8:	defffb04 	addi	sp,sp,-20
 400afcc:	dcc00315 	stw	r19,12(sp)
 400afd0:	dc800215 	stw	r18,8(sp)
 400afd4:	dc400115 	stw	r17,4(sp)
 400afd8:	dc000015 	stw	r16,0(sp)
 400afdc:	dfc00415 	stw	ra,16(sp)
 400afe0:	2027883a 	mov	r19,r4
 400afe4:	2821883a 	mov	r16,r5
 400afe8:	3023883a 	mov	r17,r6
 400afec:	3825883a 	mov	r18,r7
 400aff0:	400bba40 	call	400bba4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 400aff4:	10c03fcc 	andi	r3,r2,255
 400aff8:	18000726 	beq	r3,zero,400b018 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
 400affc:	dfc00417 	ldw	ra,16(sp)
 400b000:	dcc00317 	ldw	r19,12(sp)
 400b004:	dc800217 	ldw	r18,8(sp)
 400b008:	dc400117 	ldw	r17,4(sp)
 400b00c:	dc000017 	ldw	r16,0(sp)
 400b010:	dec00504 	addi	sp,sp,20
 400b014:	f800283a 	ret
 400b018:	99000217 	ldw	r4,8(r19)
 400b01c:	900f883a 	mov	r7,r18
 400b020:	880d883a 	mov	r6,r17
 400b024:	20800017 	ldw	r2,0(r4)
 400b028:	800b883a 	mov	r5,r16
 400b02c:	10800617 	ldw	r2,24(r2)
 400b030:	dfc00417 	ldw	ra,16(sp)
 400b034:	dcc00317 	ldw	r19,12(sp)
 400b038:	dc800217 	ldw	r18,8(sp)
 400b03c:	dc400117 	ldw	r17,4(sp)
 400b040:	dc000017 	ldw	r16,0(sp)
 400b044:	dec00504 	addi	sp,sp,20
 400b048:	1000683a 	jmp	r2

0400b04c <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 400b04c:	008100b4 	movhi	r2,1026
 400b050:	109cfd04 	addi	r2,r2,29684
 400b054:	20800015 	stw	r2,0(r4)
 400b058:	400bb601 	jmpi	400bb60 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0400b05c <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 400b05c:	defffe04 	addi	sp,sp,-8
 400b060:	008100b4 	movhi	r2,1026
 400b064:	dc000015 	stw	r16,0(sp)
 400b068:	dfc00115 	stw	ra,4(sp)
 400b06c:	109cfd04 	addi	r2,r2,29684
 400b070:	20800015 	stw	r2,0(r4)
 400b074:	2021883a 	mov	r16,r4
 400b078:	400bb600 	call	400bb60 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 400b07c:	8009883a 	mov	r4,r16
 400b080:	dfc00117 	ldw	ra,4(sp)
 400b084:	dc000017 	ldw	r16,0(sp)
 400b088:	dec00204 	addi	sp,sp,8
 400b08c:	400ba8c1 	jmpi	400ba8c <_ZdlPv>

0400b090 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 400b090:	defff504 	addi	sp,sp,-44
 400b094:	dc400215 	stw	r17,8(sp)
 400b098:	dc400b17 	ldw	r17,44(sp)
 400b09c:	df000915 	stw	fp,36(sp)
 400b0a0:	ddc00815 	stw	r23,32(sp)
 400b0a4:	dd800715 	stw	r22,28(sp)
 400b0a8:	dc000115 	stw	r16,4(sp)
 400b0ac:	dfc00a15 	stw	ra,40(sp)
 400b0b0:	dd400615 	stw	r21,24(sp)
 400b0b4:	dd000515 	stw	r20,20(sp)
 400b0b8:	dcc00415 	stw	r19,16(sp)
 400b0bc:	dc800315 	stw	r18,12(sp)
 400b0c0:	3039883a 	mov	fp,r6
 400b0c4:	2021883a 	mov	r16,r4
 400b0c8:	282d883a 	mov	r22,r5
 400b0cc:	382f883a 	mov	r23,r7
 400b0d0:	34402c26 	beq	r6,r17,400b184 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
 400b0d4:	85000317 	ldw	r20,12(r16)
 400b0d8:	048000c4 	movi	r18,3
 400b0dc:	04ffff44 	movi	r19,-3
 400b0e0:	a484983a 	sll	r2,r20,r18
 400b0e4:	b80f883a 	mov	r7,r23
 400b0e8:	b00b883a 	mov	r5,r22
 400b0ec:	10800304 	addi	r2,r2,12
 400b0f0:	80a1883a 	add	r16,r16,r2
 400b0f4:	a0001626 	beq	r20,zero,400b150 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
 400b0f8:	81800017 	ldw	r6,0(r16)
 400b0fc:	a53fffc4 	addi	r20,r20,-1
 400b100:	3080008c 	andi	r2,r6,2
 400b104:	3540004c 	andi	r21,r6,1
 400b108:	10000d26 	beq	r2,zero,400b140 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
 400b10c:	300dd23a 	srai	r6,r6,8
 400b110:	a8000426 	beq	r21,zero,400b124 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
 400b114:	b4c00a26 	beq	r22,r19,400b140 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
 400b118:	e0800017 	ldw	r2,0(fp)
 400b11c:	118d883a 	add	r6,r2,r6
 400b120:	31800017 	ldw	r6,0(r6)
 400b124:	813fff17 	ldw	r4,-4(r16)
 400b128:	e18d883a 	add	r6,fp,r6
 400b12c:	20800017 	ldw	r2,0(r4)
 400b130:	dc400015 	stw	r17,0(sp)
 400b134:	10800817 	ldw	r2,32(r2)
 400b138:	103ee83a 	callr	r2
 400b13c:	90801b16 	blt	r18,r2,400b1ac <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
 400b140:	843ffe04 	addi	r16,r16,-8
 400b144:	b80f883a 	mov	r7,r23
 400b148:	b00b883a 	mov	r5,r22
 400b14c:	a03fea1e 	bne	r20,zero,400b0f8 <__alt_mem_onchip_memory2_0+0xfc009e58>
 400b150:	00800044 	movi	r2,1
 400b154:	dfc00a17 	ldw	ra,40(sp)
 400b158:	df000917 	ldw	fp,36(sp)
 400b15c:	ddc00817 	ldw	r23,32(sp)
 400b160:	dd800717 	ldw	r22,28(sp)
 400b164:	dd400617 	ldw	r21,24(sp)
 400b168:	dd000517 	ldw	r20,20(sp)
 400b16c:	dcc00417 	ldw	r19,16(sp)
 400b170:	dc800317 	ldw	r18,12(sp)
 400b174:	dc400217 	ldw	r17,8(sp)
 400b178:	dc000117 	ldw	r16,4(sp)
 400b17c:	dec00b04 	addi	sp,sp,44
 400b180:	f800283a 	ret
 400b184:	21000117 	ldw	r4,4(r4)
 400b188:	39400117 	ldw	r5,4(r7)
 400b18c:	21400526 	beq	r4,r5,400b1a4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
 400b190:	20c00007 	ldb	r3,0(r4)
 400b194:	00800a84 	movi	r2,42
 400b198:	18bfce26 	beq	r3,r2,400b0d4 <__alt_mem_onchip_memory2_0+0xfc009e34>
 400b19c:	400f8340 	call	400f834 <strcmp>
 400b1a0:	103fcc1e 	bne	r2,zero,400b0d4 <__alt_mem_onchip_memory2_0+0xfc009e34>
 400b1a4:	00800184 	movi	r2,6
 400b1a8:	003fea06 	br	400b154 <__alt_mem_onchip_memory2_0+0xfc009eb4>
 400b1ac:	a83fe926 	beq	r21,zero,400b154 <__alt_mem_onchip_memory2_0+0xfc009eb4>
 400b1b0:	10800054 	ori	r2,r2,1
 400b1b4:	003fe706 	br	400b154 <__alt_mem_onchip_memory2_0+0xfc009eb4>

0400b1b8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 400b1b8:	deffe804 	addi	sp,sp,-96
 400b1bc:	df001615 	stw	fp,88(sp)
 400b1c0:	df001b17 	ldw	fp,108(sp)
 400b1c4:	ddc01515 	stw	r23,84(sp)
 400b1c8:	dd001215 	stw	r20,72(sp)
 400b1cc:	e0800417 	ldw	r2,16(fp)
 400b1d0:	dcc01115 	stw	r19,68(sp)
 400b1d4:	dfc01715 	stw	ra,92(sp)
 400b1d8:	dd801415 	stw	r22,80(sp)
 400b1dc:	dd401315 	stw	r21,76(sp)
 400b1e0:	dc801015 	stw	r18,64(sp)
 400b1e4:	dc400f15 	stw	r17,60(sp)
 400b1e8:	dc000e15 	stw	r16,56(sp)
 400b1ec:	d9000b15 	stw	r4,44(sp)
 400b1f0:	d9c00915 	stw	r7,36(sp)
 400b1f4:	1080040c 	andi	r2,r2,16
 400b1f8:	282f883a 	mov	r23,r5
 400b1fc:	3027883a 	mov	r19,r6
 400b200:	dd001817 	ldw	r20,96(sp)
 400b204:	10000226 	beq	r2,zero,400b210 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
 400b208:	20800217 	ldw	r2,8(r4)
 400b20c:	e0800415 	stw	r2,16(fp)
 400b210:	d8c01a17 	ldw	r3,104(sp)
 400b214:	a0c0cb26 	beq	r20,r3,400b544 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
 400b218:	d8c00b17 	ldw	r3,44(sp)
 400b21c:	1c000117 	ldw	r16,4(r3)
 400b220:	d8c00917 	ldw	r3,36(sp)
 400b224:	19400117 	ldw	r5,4(r3)
 400b228:	2c000626 	beq	r5,r16,400b244 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 400b22c:	80c00007 	ldb	r3,0(r16)
 400b230:	00800a84 	movi	r2,42
 400b234:	18801b26 	beq	r3,r2,400b2a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 400b238:	8009883a 	mov	r4,r16
 400b23c:	400f8340 	call	400f834 <strcmp>
 400b240:	1000181e 	bne	r2,zero,400b2a4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 400b244:	e5000015 	stw	r20,0(fp)
 400b248:	e4c00115 	stw	r19,4(fp)
 400b24c:	b8010916 	blt	r23,zero,400b674 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
 400b250:	d8c01a17 	ldw	r3,104(sp)
 400b254:	a5d9883a 	add	r12,r20,r23
 400b258:	1b014126 	beq	r3,r12,400b760 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
 400b25c:	00800044 	movi	r2,1
 400b260:	e0800315 	stw	r2,12(fp)
 400b264:	0005883a 	mov	r2,zero
 400b268:	dfc01717 	ldw	ra,92(sp)
 400b26c:	df001617 	ldw	fp,88(sp)
 400b270:	ddc01517 	ldw	r23,84(sp)
 400b274:	dd801417 	ldw	r22,80(sp)
 400b278:	dd401317 	ldw	r21,76(sp)
 400b27c:	dd001217 	ldw	r20,72(sp)
 400b280:	dcc01117 	ldw	r19,68(sp)
 400b284:	dc801017 	ldw	r18,64(sp)
 400b288:	dc400f17 	ldw	r17,60(sp)
 400b28c:	dc000e17 	ldw	r16,56(sp)
 400b290:	dec01804 	addi	sp,sp,96
 400b294:	f800283a 	ret
 400b298:	d8c00917 	ldw	r3,36(sp)
 400b29c:	18800117 	ldw	r2,4(r3)
 400b2a0:	80bfe826 	beq	r16,r2,400b244 <__alt_mem_onchip_memory2_0+0xfc009fa4>
 400b2a4:	b800ef16 	blt	r23,zero,400b664 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
 400b2a8:	d8c01a17 	ldw	r3,104(sp)
 400b2ac:	1dedc83a 	sub	r22,r3,r23
 400b2b0:	e005883a 	mov	r2,fp
 400b2b4:	00c00044 	movi	r3,1
 400b2b8:	b039883a 	mov	fp,r22
 400b2bc:	0021883a 	mov	r16,zero
 400b2c0:	a02d883a 	mov	r22,r20
 400b2c4:	d8000a45 	stb	zero,41(sp)
 400b2c8:	d8c00a05 	stb	r3,40(sp)
 400b2cc:	048000c4 	movi	r18,3
 400b2d0:	1029883a 	mov	r20,r2
 400b2d4:	d8c00b17 	ldw	r3,44(sp)
 400b2d8:	b805883a 	mov	r2,r23
 400b2dc:	1ac00317 	ldw	r11,12(r3)
 400b2e0:	581490fa 	slli	r10,r11,3
 400b2e4:	52800304 	addi	r10,r10,12
 400b2e8:	1aab883a 	add	r21,r3,r10
 400b2ec:	b007883a 	mov	r3,r22
 400b2f0:	582d883a 	mov	r22,r11
 400b2f4:	a82f883a 	mov	r23,r21
 400b2f8:	1823883a 	mov	r17,r3
 400b2fc:	102b883a 	mov	r21,r2
 400b300:	b0005526 	beq	r22,zero,400b458 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
 400b304:	b8800017 	ldw	r2,0(r23)
 400b308:	a1400417 	ldw	r5,16(r20)
 400b30c:	d8000415 	stw	zero,16(sp)
 400b310:	d8000515 	stw	zero,20(sp)
 400b314:	d8000615 	stw	zero,24(sp)
 400b318:	d8000715 	stw	zero,28(sp)
 400b31c:	d9400815 	stw	r5,32(sp)
 400b320:	1100004c 	andi	r4,r2,1
 400b324:	1007d23a 	srai	r3,r2,8
 400b328:	20007526 	beq	r4,zero,400b500 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
 400b32c:	89000017 	ldw	r4,0(r17)
 400b330:	99800054 	ori	r6,r19,1
 400b334:	20c7883a 	add	r3,r4,r3
 400b338:	18c00017 	ldw	r3,0(r3)
 400b33c:	88c7883a 	add	r3,r17,r3
 400b340:	e0000326 	beq	fp,zero,400b350 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
 400b344:	d9c00a03 	ldbu	r7,40(sp)
 400b348:	e0c9803a 	cmpltu	r4,fp,r3
 400b34c:	21c07226 	beq	r4,r7,400b518 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
 400b350:	1080008c 	andi	r2,r2,2
 400b354:	1000041e 	bne	r2,zero,400b368 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
 400b358:	013fff84 	movi	r4,-2
 400b35c:	a9007126 	beq	r21,r4,400b524 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
 400b360:	00bfff44 	movi	r2,-3
 400b364:	308c703a 	and	r6,r6,r2
 400b368:	b93fff17 	ldw	r4,-4(r23)
 400b36c:	d9400404 	addi	r5,sp,16
 400b370:	d9c00917 	ldw	r7,36(sp)
 400b374:	20800017 	ldw	r2,0(r4)
 400b378:	d9400315 	stw	r5,12(sp)
 400b37c:	d9401a17 	ldw	r5,104(sp)
 400b380:	d8c00015 	stw	r3,0(sp)
 400b384:	d9400215 	stw	r5,8(sp)
 400b388:	d9401917 	ldw	r5,100(sp)
 400b38c:	d9400115 	stw	r5,4(sp)
 400b390:	10800717 	ldw	r2,28(r2)
 400b394:	a80b883a 	mov	r5,r21
 400b398:	103ee83a 	callr	r2
 400b39c:	a1400217 	ldw	r5,8(r20)
 400b3a0:	d9000617 	ldw	r4,24(sp)
 400b3a4:	d8c00717 	ldw	r3,28(sp)
 400b3a8:	2908b03a 	or	r4,r5,r4
 400b3ac:	a1000215 	stw	r4,8(r20)
 400b3b0:	01400184 	movi	r5,6
 400b3b4:	1940a426 	beq	r3,r5,400b648 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 400b3b8:	01400084 	movi	r5,2
 400b3bc:	1940a226 	beq	r3,r5,400b648 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 400b3c0:	81403fcc 	andi	r5,r16,255
 400b3c4:	a1800017 	ldw	r6,0(r20)
 400b3c8:	28004f1e 	bne	r5,zero,400b508 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
 400b3cc:	30007926 	beq	r6,zero,400b5b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
 400b3d0:	d9400417 	ldw	r5,16(sp)
 400b3d4:	29806926 	beq	r5,r6,400b57c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
 400b3d8:	28006d26 	beq	r5,zero,400b590 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
 400b3dc:	a2800317 	ldw	r10,12(r20)
 400b3e0:	9100250e 	bge	r18,r4,400b478 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
 400b3e4:	2100004c 	andi	r4,r4,1
 400b3e8:	20000326 	beq	r4,zero,400b3f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
 400b3ec:	a0800417 	ldw	r2,16(r20)
 400b3f0:	1080008c 	andi	r2,r2,2
 400b3f4:	1000201e 	bne	r2,zero,400b478 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
 400b3f8:	50004d1e 	bne	r10,zero,400b530 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
 400b3fc:	18002626 	beq	r3,zero,400b498 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
 400b400:	02800044 	movi	r10,1
 400b404:	181b883a 	mov	r13,r3
 400b408:	1a84f03a 	xor	r2,r3,r10
 400b40c:	501f883a 	mov	r15,r10
 400b410:	90801f0e 	bge	r18,r2,400b490 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
 400b414:	90c0880e 	bge	r18,r3,400b638 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
 400b418:	d9400417 	ldw	r5,16(sp)
 400b41c:	1880008c 	andi	r2,r3,2
 400b420:	d9000517 	ldw	r4,20(sp)
 400b424:	a1400015 	stw	r5,0(r20)
 400b428:	0021883a 	mov	r16,zero
 400b42c:	a1000115 	stw	r4,4(r20)
 400b430:	a0c00315 	stw	r3,12(r20)
 400b434:	10004f1e 	bne	r2,zero,400b574 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 400b438:	6b40004c 	andi	r13,r13,1
 400b43c:	68004d26 	beq	r13,zero,400b574 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 400b440:	a1000217 	ldw	r4,8(r20)
 400b444:	01400104 	movi	r5,4
 400b448:	21408826 	beq	r4,r5,400b66c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400b44c:	b5bfffc4 	addi	r22,r22,-1
 400b450:	bdfffe04 	addi	r23,r23,-8
 400b454:	b03fab1e 	bne	r22,zero,400b304 <__alt_mem_onchip_memory2_0+0xfc00a064>
 400b458:	d8800a43 	ldbu	r2,41(sp)
 400b45c:	a82f883a 	mov	r23,r21
 400b460:	882d883a 	mov	r22,r17
 400b464:	10008126 	beq	r2,zero,400b66c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400b468:	dd400a03 	ldbu	r21,40(sp)
 400b46c:	a8007f26 	beq	r21,zero,400b66c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400b470:	d8000a05 	stb	zero,40(sp)
 400b474:	003f9706 	br	400b2d4 <__alt_mem_onchip_memory2_0+0xfc00a034>
 400b478:	501f883a 	mov	r15,r10
 400b47c:	181b883a 	mov	r13,r3
 400b480:	02800b0e 	bge	zero,r10,400b4b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
 400b484:	00c0570e 	bge	zero,r3,400b5e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
 400b488:	1a84f03a 	xor	r2,r3,r10
 400b48c:	90bfe116 	blt	r18,r2,400b414 <__alt_mem_onchip_memory2_0+0xfc00a174>
 400b490:	1bc6703a 	and	r3,r3,r15
 400b494:	90c09916 	blt	r18,r3,400b6fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
 400b498:	01000044 	movi	r4,1
 400b49c:	a1000315 	stw	r4,12(r20)
 400b4a0:	a0000015 	stw	zero,0(r20)
 400b4a4:	a1000217 	ldw	r4,8(r20)
 400b4a8:	04000044 	movi	r16,1
 400b4ac:	003fe506 	br	400b444 <__alt_mem_onchip_memory2_0+0xfc00a1a4>
 400b4b0:	90c00a0e 	bge	r18,r3,400b4dc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 400b4b4:	1880004c 	andi	r2,r3,1
 400b4b8:	10000426 	beq	r2,zero,400b4cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
 400b4bc:	d9000b17 	ldw	r4,44(sp)
 400b4c0:	20800217 	ldw	r2,8(r4)
 400b4c4:	1080008c 	andi	r2,r2,2
 400b4c8:	1000041e 	bne	r2,zero,400b4dc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 400b4cc:	1880005c 	xori	r2,r3,1
 400b4d0:	90bfd216 	blt	r18,r2,400b41c <__alt_mem_onchip_memory2_0+0xfc00a17c>
 400b4d4:	03c00044 	movi	r15,1
 400b4d8:	003fed06 	br	400b490 <__alt_mem_onchip_memory2_0+0xfc00a1f0>
 400b4dc:	a8006e16 	blt	r21,zero,400b698 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
 400b4e0:	d8801a17 	ldw	r2,104(sp)
 400b4e4:	354d883a 	add	r6,r6,r21
 400b4e8:	11805026 	beq	r2,r6,400b62c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
 400b4ec:	00c0a50e 	bge	zero,r3,400b784 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
 400b4f0:	03c00044 	movi	r15,1
 400b4f4:	1bc4f03a 	xor	r2,r3,r15
 400b4f8:	7815883a 	mov	r10,r15
 400b4fc:	003fc406 	br	400b410 <__alt_mem_onchip_memory2_0+0xfc00a170>
 400b500:	980d883a 	mov	r6,r19
 400b504:	003f8d06 	br	400b33c <__alt_mem_onchip_memory2_0+0xfc00a09c>
 400b508:	303fb11e 	bne	r6,zero,400b3d0 <__alt_mem_onchip_memory2_0+0xfc00a130>
 400b50c:	d9400417 	ldw	r5,16(sp)
 400b510:	283fb21e 	bne	r5,zero,400b3dc <__alt_mem_onchip_memory2_0+0xfc00a13c>
 400b514:	003fcb06 	br	400b444 <__alt_mem_onchip_memory2_0+0xfc00a1a4>
 400b518:	00c00044 	movi	r3,1
 400b51c:	d8c00a45 	stb	r3,41(sp)
 400b520:	003fca06 	br	400b44c <__alt_mem_onchip_memory2_0+0xfc00a1ac>
 400b524:	294000cc 	andi	r5,r5,3
 400b528:	283fc826 	beq	r5,zero,400b44c <__alt_mem_onchip_memory2_0+0xfc00a1ac>
 400b52c:	003f8c06 	br	400b360 <__alt_mem_onchip_memory2_0+0xfc00a0c0>
 400b530:	18001a26 	beq	r3,zero,400b59c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
 400b534:	181b883a 	mov	r13,r3
 400b538:	501f883a 	mov	r15,r10
 400b53c:	50c4f03a 	xor	r2,r10,r3
 400b540:	003fb306 	br	400b410 <__alt_mem_onchip_memory2_0+0xfc00a170>
 400b544:	d8c00b17 	ldw	r3,44(sp)
 400b548:	1c000117 	ldw	r16,4(r3)
 400b54c:	d8c01917 	ldw	r3,100(sp)
 400b550:	19400117 	ldw	r5,4(r3)
 400b554:	81400626 	beq	r16,r5,400b570 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
 400b558:	80c00007 	ldb	r3,0(r16)
 400b55c:	00800a84 	movi	r2,42
 400b560:	18bf4d26 	beq	r3,r2,400b298 <__alt_mem_onchip_memory2_0+0xfc009ff8>
 400b564:	8009883a 	mov	r4,r16
 400b568:	400f8340 	call	400f834 <strcmp>
 400b56c:	10005c1e 	bne	r2,zero,400b6e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
 400b570:	e4c00215 	stw	r19,8(fp)
 400b574:	0005883a 	mov	r2,zero
 400b578:	003f3b06 	br	400b268 <__alt_mem_onchip_memory2_0+0xfc009fc8>
 400b57c:	a0c00117 	ldw	r3,4(r20)
 400b580:	d8800517 	ldw	r2,20(sp)
 400b584:	1884b03a 	or	r2,r3,r2
 400b588:	a0800115 	stw	r2,4(r20)
 400b58c:	003fad06 	br	400b444 <__alt_mem_onchip_memory2_0+0xfc00a1a4>
 400b590:	10803fcc 	andi	r2,r2,255
 400b594:	103f911e 	bne	r2,zero,400b3dc <__alt_mem_onchip_memory2_0+0xfc00a13c>
 400b598:	003faa06 	br	400b444 <__alt_mem_onchip_memory2_0+0xfc00a1a4>
 400b59c:	501b883a 	mov	r13,r10
 400b5a0:	5080005c 	xori	r2,r10,1
 400b5a4:	5007883a 	mov	r3,r10
 400b5a8:	90bfbb0e 	bge	r18,r2,400b498 <__alt_mem_onchip_memory2_0+0xfc00a1f8>
 400b5ac:	6880008c 	andi	r2,r13,2
 400b5b0:	003f9f06 	br	400b430 <__alt_mem_onchip_memory2_0+0xfc00a190>
 400b5b4:	d8c00417 	ldw	r3,16(sp)
 400b5b8:	d9400517 	ldw	r5,20(sp)
 400b5bc:	a0c00015 	stw	r3,0(r20)
 400b5c0:	a1400115 	stw	r5,4(r20)
 400b5c4:	18000526 	beq	r3,zero,400b5dc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
 400b5c8:	20001626 	beq	r4,zero,400b624 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
 400b5cc:	d9400b17 	ldw	r5,44(sp)
 400b5d0:	28c00217 	ldw	r3,8(r5)
 400b5d4:	18c0004c 	andi	r3,r3,1
 400b5d8:	183f2326 	beq	r3,zero,400b268 <__alt_mem_onchip_memory2_0+0xfc009fc8>
 400b5dc:	1021883a 	mov	r16,r2
 400b5e0:	003f9806 	br	400b444 <__alt_mem_onchip_memory2_0+0xfc00a1a4>
 400b5e4:	9280060e 	bge	r18,r10,400b600 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
 400b5e8:	5080004c 	andi	r2,r10,1
 400b5ec:	10002426 	beq	r2,zero,400b680 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
 400b5f0:	d8c00b17 	ldw	r3,44(sp)
 400b5f4:	18800217 	ldw	r2,8(r3)
 400b5f8:	1080008c 	andi	r2,r2,2
 400b5fc:	10003c26 	beq	r2,zero,400b6f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
 400b600:	d9400417 	ldw	r5,16(sp)
 400b604:	a8004216 	blt	r21,zero,400b710 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
 400b608:	d8c01a17 	ldw	r3,104(sp)
 400b60c:	2d45883a 	add	r2,r5,r21
 400b610:	18805726 	beq	r3,r2,400b770 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
 400b614:	7880005c 	xori	r2,r15,1
 400b618:	781b883a 	mov	r13,r15
 400b61c:	5007883a 	mov	r3,r10
 400b620:	003fe106 	br	400b5a8 <__alt_mem_onchip_memory2_0+0xfc00a308>
 400b624:	1021883a 	mov	r16,r2
 400b628:	003f8806 	br	400b44c <__alt_mem_onchip_memory2_0+0xfc00a1ac>
 400b62c:	03c00184 	movi	r15,6
 400b630:	00ffb016 	blt	zero,r3,400b4f4 <__alt_mem_onchip_memory2_0+0xfc00a254>
 400b634:	7815883a 	mov	r10,r15
 400b638:	7880008c 	andi	r2,r15,2
 400b63c:	781b883a 	mov	r13,r15
 400b640:	5007883a 	mov	r3,r10
 400b644:	003f7a06 	br	400b430 <__alt_mem_onchip_memory2_0+0xfc00a190>
 400b648:	a039883a 	mov	fp,r20
 400b64c:	e0c00315 	stw	r3,12(fp)
 400b650:	d8c00417 	ldw	r3,16(sp)
 400b654:	a0c00015 	stw	r3,0(r20)
 400b658:	d8c00517 	ldw	r3,20(sp)
 400b65c:	a0c00115 	stw	r3,4(r20)
 400b660:	003f0106 	br	400b268 <__alt_mem_onchip_memory2_0+0xfc009fc8>
 400b664:	002d883a 	mov	r22,zero
 400b668:	003f1106 	br	400b2b0 <__alt_mem_onchip_memory2_0+0xfc00a010>
 400b66c:	8005883a 	mov	r2,r16
 400b670:	003efd06 	br	400b268 <__alt_mem_onchip_memory2_0+0xfc009fc8>
 400b674:	00bfff84 	movi	r2,-2
 400b678:	b8bfbe1e 	bne	r23,r2,400b574 <__alt_mem_onchip_memory2_0+0xfc00a2d4>
 400b67c:	003ef706 	br	400b25c <__alt_mem_onchip_memory2_0+0xfc009fbc>
 400b680:	5080005c 	xori	r2,r10,1
 400b684:	90bf840e 	bge	r18,r2,400b498 <__alt_mem_onchip_memory2_0+0xfc00a1f8>
 400b688:	501b883a 	mov	r13,r10
 400b68c:	5080008c 	andi	r2,r10,2
 400b690:	5007883a 	mov	r3,r10
 400b694:	003f6606 	br	400b430 <__alt_mem_onchip_memory2_0+0xfc00a190>
 400b698:	013fff84 	movi	r4,-2
 400b69c:	a9003226 	beq	r21,r4,400b768 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
 400b6a0:	d9400917 	ldw	r5,36(sp)
 400b6a4:	d9001a17 	ldw	r4,104(sp)
 400b6a8:	d9c01917 	ldw	r7,100(sp)
 400b6ac:	28800017 	ldw	r2,0(r5)
 400b6b0:	d9000015 	stw	r4,0(sp)
 400b6b4:	d9000917 	ldw	r4,36(sp)
 400b6b8:	10800817 	ldw	r2,32(r2)
 400b6bc:	a80b883a 	mov	r5,r21
 400b6c0:	d8c00d15 	stw	r3,52(sp)
 400b6c4:	db400c15 	stw	r13,48(sp)
 400b6c8:	103ee83a 	callr	r2
 400b6cc:	1015883a 	mov	r10,r2
 400b6d0:	101f883a 	mov	r15,r2
 400b6d4:	db400c17 	ldw	r13,48(sp)
 400b6d8:	d8c00d17 	ldw	r3,52(sp)
 400b6dc:	003f6906 	br	400b484 <__alt_mem_onchip_memory2_0+0xfc00a1e4>
 400b6e0:	d8c00917 	ldw	r3,36(sp)
 400b6e4:	19400117 	ldw	r5,4(r3)
 400b6e8:	817ed31e 	bne	r16,r5,400b238 <__alt_mem_onchip_memory2_0+0xfc009f98>
 400b6ec:	003ed506 	br	400b244 <__alt_mem_onchip_memory2_0+0xfc009fa4>
 400b6f0:	5080005c 	xori	r2,r10,1
 400b6f4:	90bfe416 	blt	r18,r2,400b688 <__alt_mem_onchip_memory2_0+0xfc00a3e8>
 400b6f8:	003f6706 	br	400b498 <__alt_mem_onchip_memory2_0+0xfc00a1f8>
 400b6fc:	00800084 	movi	r2,2
 400b700:	a0800315 	stw	r2,12(r20)
 400b704:	a0000015 	stw	zero,0(r20)
 400b708:	00800044 	movi	r2,1
 400b70c:	003ed606 	br	400b268 <__alt_mem_onchip_memory2_0+0xfc009fc8>
 400b710:	013fff84 	movi	r4,-2
 400b714:	a9002526 	beq	r21,r4,400b7ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
 400b718:	d8c00917 	ldw	r3,36(sp)
 400b71c:	d9c01917 	ldw	r7,100(sp)
 400b720:	d9000917 	ldw	r4,36(sp)
 400b724:	18800017 	ldw	r2,0(r3)
 400b728:	d8c01a17 	ldw	r3,104(sp)
 400b72c:	280d883a 	mov	r6,r5
 400b730:	a80b883a 	mov	r5,r21
 400b734:	d8c00015 	stw	r3,0(sp)
 400b738:	10800817 	ldw	r2,32(r2)
 400b73c:	da800c15 	stw	r10,48(sp)
 400b740:	dbc00d15 	stw	r15,52(sp)
 400b744:	103ee83a 	callr	r2
 400b748:	da800c17 	ldw	r10,48(sp)
 400b74c:	1007883a 	mov	r3,r2
 400b750:	101b883a 	mov	r13,r2
 400b754:	dbc00d17 	ldw	r15,52(sp)
 400b758:	1284f03a 	xor	r2,r2,r10
 400b75c:	003f2c06 	br	400b410 <__alt_mem_onchip_memory2_0+0xfc00a170>
 400b760:	00800184 	movi	r2,6
 400b764:	003ebe06 	br	400b260 <__alt_mem_onchip_memory2_0+0xfc009fc0>
 400b768:	00ff4b0e 	bge	zero,r3,400b498 <__alt_mem_onchip_memory2_0+0xfc00a1f8>
 400b76c:	003f6006 	br	400b4f0 <__alt_mem_onchip_memory2_0+0xfc00a250>
 400b770:	5080019c 	xori	r2,r10,6
 400b774:	90800916 	blt	r18,r2,400b79c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
 400b778:	50c0018c 	andi	r3,r10,6
 400b77c:	90ff460e 	bge	r18,r3,400b498 <__alt_mem_onchip_memory2_0+0xfc00a1f8>
 400b780:	003fde06 	br	400b6fc <__alt_mem_onchip_memory2_0+0xfc00a45c>
 400b784:	d8c01a17 	ldw	r3,104(sp)
 400b788:	2d45883a 	add	r2,r5,r21
 400b78c:	18800326 	beq	r3,r2,400b79c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
 400b790:	02800044 	movi	r10,1
 400b794:	501f883a 	mov	r15,r10
 400b798:	003f9e06 	br	400b614 <__alt_mem_onchip_memory2_0+0xfc00a374>
 400b79c:	03400184 	movi	r13,6
 400b7a0:	00800084 	movi	r2,2
 400b7a4:	6807883a 	mov	r3,r13
 400b7a8:	003f1d06 	br	400b420 <__alt_mem_onchip_memory2_0+0xfc00a180>
 400b7ac:	501b883a 	mov	r13,r10
 400b7b0:	5080005c 	xori	r2,r10,1
 400b7b4:	5007883a 	mov	r3,r10
 400b7b8:	003f7b06 	br	400b5a8 <__alt_mem_onchip_memory2_0+0xfc00a308>

0400b7bc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 400b7bc:	deffef04 	addi	sp,sp,-68
 400b7c0:	ddc00e15 	stw	r23,56(sp)
 400b7c4:	dd000b15 	stw	r20,44(sp)
 400b7c8:	dc400815 	stw	r17,32(sp)
 400b7cc:	3029883a 	mov	r20,r6
 400b7d0:	dfc01015 	stw	ra,64(sp)
 400b7d4:	df000f15 	stw	fp,60(sp)
 400b7d8:	dd800d15 	stw	r22,52(sp)
 400b7dc:	dd400c15 	stw	r21,48(sp)
 400b7e0:	dcc00a15 	stw	r19,40(sp)
 400b7e4:	dc800915 	stw	r18,36(sp)
 400b7e8:	dc000715 	stw	r16,28(sp)
 400b7ec:	d9000515 	stw	r4,20(sp)
 400b7f0:	2823883a 	mov	r17,r5
 400b7f4:	382f883a 	mov	r23,r7
 400b7f8:	400bba40 	call	400bba4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 400b7fc:	100d883a 	mov	r6,r2
 400b800:	10803fcc 	andi	r2,r2,255
 400b804:	1000441e 	bne	r2,zero,400b918 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
 400b808:	bc000217 	ldw	r16,8(r23)
 400b80c:	8080040c 	andi	r2,r16,16
 400b810:	10000226 	beq	r2,zero,400b81c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
 400b814:	d8c00517 	ldw	r3,20(sp)
 400b818:	1c000217 	ldw	r16,8(r3)
 400b81c:	d8c00517 	ldw	r3,20(sp)
 400b820:	d8800517 	ldw	r2,20(sp)
 400b824:	1f000317 	ldw	fp,12(r3)
 400b828:	e01090fa 	slli	r8,fp,3
 400b82c:	40c00304 	addi	r3,r8,12
 400b830:	10ed883a 	add	r22,r2,r3
 400b834:	80c0004c 	andi	r3,r16,1
 400b838:	42000204 	addi	r8,r8,8
 400b83c:	d8c00415 	stw	r3,16(sp)
 400b840:	122b883a 	add	r21,r2,r8
 400b844:	e0003226 	beq	fp,zero,400b910 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
 400b848:	b1800017 	ldw	r6,0(r22)
 400b84c:	d8000015 	stw	zero,0(sp)
 400b850:	d8000115 	stw	zero,4(sp)
 400b854:	dc000215 	stw	r16,8(sp)
 400b858:	d8000315 	stw	zero,12(sp)
 400b85c:	34c0008c 	andi	r19,r6,2
 400b860:	3480004c 	andi	r18,r6,1
 400b864:	9800021e 	bne	r19,zero,400b870 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
 400b868:	d8c00417 	ldw	r3,16(sp)
 400b86c:	18002426 	beq	r3,zero,400b900 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
 400b870:	a0003626 	beq	r20,zero,400b94c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
 400b874:	300dd23a 	srai	r6,r6,8
 400b878:	90000326 	beq	r18,zero,400b888 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 400b87c:	a0800017 	ldw	r2,0(r20)
 400b880:	118d883a 	add	r6,r2,r6
 400b884:	31800017 	ldw	r6,0(r6)
 400b888:	a18d883a 	add	r6,r20,r6
 400b88c:	a9000017 	ldw	r4,0(r21)
 400b890:	d80f883a 	mov	r7,sp
 400b894:	880b883a 	mov	r5,r17
 400b898:	20800017 	ldw	r2,0(r4)
 400b89c:	10800617 	ldw	r2,24(r2)
 400b8a0:	103ee83a 	callr	r2
 400b8a4:	100d883a 	mov	r6,r2
 400b8a8:	10803fcc 	andi	r2,r2,255
 400b8ac:	10001426 	beq	r2,zero,400b900 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
 400b8b0:	d8800317 	ldw	r2,12(sp)
 400b8b4:	00c00204 	movi	r3,8
 400b8b8:	10c02626 	beq	r2,r3,400b954 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
 400b8bc:	d8800117 	ldw	r2,4(sp)
 400b8c0:	00c000c4 	movi	r3,3
 400b8c4:	1880040e 	bge	r3,r2,400b8d8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 400b8c8:	9800031e 	bne	r19,zero,400b8d8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 400b8cc:	00ffff44 	movi	r3,-3
 400b8d0:	10c4703a 	and	r2,r2,r3
 400b8d4:	d8800115 	stw	r2,4(sp)
 400b8d8:	b9400317 	ldw	r5,12(r23)
 400b8dc:	28002126 	beq	r5,zero,400b964 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
 400b8e0:	b8800017 	ldw	r2,0(r23)
 400b8e4:	d9000017 	ldw	r4,0(sp)
 400b8e8:	11004d1e 	bne	r2,r4,400ba20 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
 400b8ec:	10003126 	beq	r2,zero,400b9b4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
 400b8f0:	b9000117 	ldw	r4,4(r23)
 400b8f4:	d8800117 	ldw	r2,4(sp)
 400b8f8:	2084b03a 	or	r2,r4,r2
 400b8fc:	b8800115 	stw	r2,4(r23)
 400b900:	e73fffc4 	addi	fp,fp,-1
 400b904:	b5bffe04 	addi	r22,r22,-8
 400b908:	ad7ffe04 	addi	r21,r21,-8
 400b90c:	e03fce1e 	bne	fp,zero,400b848 <__alt_mem_onchip_memory2_0+0xfc00a5a8>
 400b910:	b9800117 	ldw	r6,4(r23)
 400b914:	300cc03a 	cmpne	r6,r6,zero
 400b918:	3005883a 	mov	r2,r6
 400b91c:	dfc01017 	ldw	ra,64(sp)
 400b920:	df000f17 	ldw	fp,60(sp)
 400b924:	ddc00e17 	ldw	r23,56(sp)
 400b928:	dd800d17 	ldw	r22,52(sp)
 400b92c:	dd400c17 	ldw	r21,48(sp)
 400b930:	dd000b17 	ldw	r20,44(sp)
 400b934:	dcc00a17 	ldw	r19,40(sp)
 400b938:	dc800917 	ldw	r18,36(sp)
 400b93c:	dc400817 	ldw	r17,32(sp)
 400b940:	dc000717 	ldw	r16,28(sp)
 400b944:	dec01104 	addi	sp,sp,68
 400b948:	f800283a 	ret
 400b94c:	000d883a 	mov	r6,zero
 400b950:	003fce06 	br	400b88c <__alt_mem_onchip_memory2_0+0xfc00a5ec>
 400b954:	903fd926 	beq	r18,zero,400b8bc <__alt_mem_onchip_memory2_0+0xfc00a61c>
 400b958:	a8800017 	ldw	r2,0(r21)
 400b95c:	d8800315 	stw	r2,12(sp)
 400b960:	003fd606 	br	400b8bc <__alt_mem_onchip_memory2_0+0xfc00a61c>
 400b964:	d9000017 	ldw	r4,0(sp)
 400b968:	d8800117 	ldw	r2,4(sp)
 400b96c:	00c000c4 	movi	r3,3
 400b970:	b9000015 	stw	r4,0(r23)
 400b974:	d9000217 	ldw	r4,8(sp)
 400b978:	b8800115 	stw	r2,4(r23)
 400b97c:	b9000215 	stw	r4,8(r23)
 400b980:	d9000317 	ldw	r4,12(sp)
 400b984:	b9000315 	stw	r4,12(r23)
 400b988:	18bfe30e 	bge	r3,r2,400b918 <__alt_mem_onchip_memory2_0+0xfc00a678>
 400b98c:	1100008c 	andi	r4,r2,2
 400b990:	20001926 	beq	r4,zero,400b9f8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
 400b994:	d8c00517 	ldw	r3,20(sp)
 400b998:	18800217 	ldw	r2,8(r3)
 400b99c:	1080004c 	andi	r2,r2,1
 400b9a0:	103fdd26 	beq	r2,zero,400b918 <__alt_mem_onchip_memory2_0+0xfc00a678>
 400b9a4:	e73fffc4 	addi	fp,fp,-1
 400b9a8:	b5bffe04 	addi	r22,r22,-8
 400b9ac:	ad7ffe04 	addi	r21,r21,-8
 400b9b0:	003fd606 	br	400b90c <__alt_mem_onchip_memory2_0+0xfc00a66c>
 400b9b4:	d8800317 	ldw	r2,12(sp)
 400b9b8:	00c00204 	movi	r3,8
 400b9bc:	10c00b26 	beq	r2,r3,400b9ec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 400b9c0:	28c00a26 	beq	r5,r3,400b9ec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 400b9c4:	11000117 	ldw	r4,4(r2)
 400b9c8:	29400117 	ldw	r5,4(r5)
 400b9cc:	217fc826 	beq	r4,r5,400b8f0 <__alt_mem_onchip_memory2_0+0xfc00a650>
 400b9d0:	20800007 	ldb	r2,0(r4)
 400b9d4:	00c00a84 	movi	r3,42
 400b9d8:	10c00426 	beq	r2,r3,400b9ec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 400b9dc:	d9800615 	stw	r6,24(sp)
 400b9e0:	400f8340 	call	400f834 <strcmp>
 400b9e4:	d9800617 	ldw	r6,24(sp)
 400b9e8:	103fc126 	beq	r2,zero,400b8f0 <__alt_mem_onchip_memory2_0+0xfc00a650>
 400b9ec:	00800084 	movi	r2,2
 400b9f0:	b8800115 	stw	r2,4(r23)
 400b9f4:	003fc806 	br	400b918 <__alt_mem_onchip_memory2_0+0xfc00a678>
 400b9f8:	1080004c 	andi	r2,r2,1
 400b9fc:	103fc626 	beq	r2,zero,400b918 <__alt_mem_onchip_memory2_0+0xfc00a678>
 400ba00:	d8c00517 	ldw	r3,20(sp)
 400ba04:	18800217 	ldw	r2,8(r3)
 400ba08:	1080008c 	andi	r2,r2,2
 400ba0c:	103fc226 	beq	r2,zero,400b918 <__alt_mem_onchip_memory2_0+0xfc00a678>
 400ba10:	e73fffc4 	addi	fp,fp,-1
 400ba14:	b5bffe04 	addi	r22,r22,-8
 400ba18:	ad7ffe04 	addi	r21,r21,-8
 400ba1c:	003fbb06 	br	400b90c <__alt_mem_onchip_memory2_0+0xfc00a66c>
 400ba20:	00800084 	movi	r2,2
 400ba24:	b8000015 	stw	zero,0(r23)
 400ba28:	b8800115 	stw	r2,4(r23)
 400ba2c:	003fba06 	br	400b918 <__alt_mem_onchip_memory2_0+0xfc00a678>

0400ba30 <_ZNSt9type_infoD1Ev>:
 400ba30:	f800283a 	ret

0400ba34 <_ZNKSt9type_info14__is_pointer_pEv>:
 400ba34:	0005883a 	mov	r2,zero
 400ba38:	f800283a 	ret

0400ba3c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 400ba3c:	0005883a 	mov	r2,zero
 400ba40:	f800283a 	ret

0400ba44 <_ZNSt9type_infoD0Ev>:
 400ba44:	400ba8c1 	jmpi	400ba8c <_ZdlPv>

0400ba48 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 400ba48:	21000117 	ldw	r4,4(r4)
 400ba4c:	29400117 	ldw	r5,4(r5)
 400ba50:	21400c26 	beq	r4,r5,400ba84 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
 400ba54:	20c00007 	ldb	r3,0(r4)
 400ba58:	00800a84 	movi	r2,42
 400ba5c:	18800726 	beq	r3,r2,400ba7c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
 400ba60:	deffff04 	addi	sp,sp,-4
 400ba64:	dfc00015 	stw	ra,0(sp)
 400ba68:	400f8340 	call	400f834 <strcmp>
 400ba6c:	1005003a 	cmpeq	r2,r2,zero
 400ba70:	dfc00017 	ldw	ra,0(sp)
 400ba74:	dec00104 	addi	sp,sp,4
 400ba78:	f800283a 	ret
 400ba7c:	0005883a 	mov	r2,zero
 400ba80:	f800283a 	ret
 400ba84:	00800044 	movi	r2,1
 400ba88:	f800283a 	ret

0400ba8c <_ZdlPv>:
 400ba8c:	400e8ec1 	jmpi	400e8ec <free>

0400ba90 <__cxa_pure_virtual>:
 400ba90:	014100b4 	movhi	r5,1026
 400ba94:	deffff04 	addi	sp,sp,-4
 400ba98:	295d1204 	addi	r5,r5,29768
 400ba9c:	018006c4 	movi	r6,27
 400baa0:	01000084 	movi	r4,2
 400baa4:	dfc00015 	stw	ra,0(sp)
 400baa8:	401c5cc0 	call	401c5cc <write>
 400baac:	400be580 	call	400be58 <_ZSt9terminatev>

0400bab0 <__cxa_deleted_virtual>:
 400bab0:	014100b4 	movhi	r5,1026
 400bab4:	deffff04 	addi	sp,sp,-4
 400bab8:	295d1904 	addi	r5,r5,29796
 400babc:	01800784 	movi	r6,30
 400bac0:	01000084 	movi	r4,2
 400bac4:	dfc00015 	stw	ra,0(sp)
 400bac8:	401c5cc0 	call	401c5cc <write>
 400bacc:	400be580 	call	400be58 <_ZSt9terminatev>

0400bad0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 400bad0:	20800017 	ldw	r2,0(r4)
 400bad4:	defffa04 	addi	sp,sp,-24
 400bad8:	dc000415 	stw	r16,16(sp)
 400badc:	10800617 	ldw	r2,24(r2)
 400bae0:	3021883a 	mov	r16,r6
 400bae4:	31800017 	ldw	r6,0(r6)
 400bae8:	00c00404 	movi	r3,16
 400baec:	d8c00215 	stw	r3,8(sp)
 400baf0:	dfc00515 	stw	ra,20(sp)
 400baf4:	d8000015 	stw	zero,0(sp)
 400baf8:	d8000115 	stw	zero,4(sp)
 400bafc:	d8000315 	stw	zero,12(sp)
 400bb00:	d80f883a 	mov	r7,sp
 400bb04:	103ee83a 	callr	r2
 400bb08:	d8800117 	ldw	r2,4(sp)
 400bb0c:	00c00184 	movi	r3,6
 400bb10:	1080018c 	andi	r2,r2,6
 400bb14:	10c00526 	beq	r2,r3,400bb2c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
 400bb18:	0005883a 	mov	r2,zero
 400bb1c:	dfc00517 	ldw	ra,20(sp)
 400bb20:	dc000417 	ldw	r16,16(sp)
 400bb24:	dec00604 	addi	sp,sp,24
 400bb28:	f800283a 	ret
 400bb2c:	d8c00017 	ldw	r3,0(sp)
 400bb30:	00800044 	movi	r2,1
 400bb34:	80c00015 	stw	r3,0(r16)
 400bb38:	dfc00517 	ldw	ra,20(sp)
 400bb3c:	dc000417 	ldw	r16,16(sp)
 400bb40:	dec00604 	addi	sp,sp,24
 400bb44:	f800283a 	ret

0400bb48 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 400bb48:	d8800017 	ldw	r2,0(sp)
 400bb4c:	11800226 	beq	r2,r6,400bb58 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
 400bb50:	00800044 	movi	r2,1
 400bb54:	f800283a 	ret
 400bb58:	00800184 	movi	r2,6
 400bb5c:	f800283a 	ret

0400bb60 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 400bb60:	008100b4 	movhi	r2,1026
 400bb64:	109d2f04 	addi	r2,r2,29884
 400bb68:	20800015 	stw	r2,0(r4)
 400bb6c:	400ba301 	jmpi	400ba30 <_ZNSt9type_infoD1Ev>

0400bb70 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 400bb70:	defffe04 	addi	sp,sp,-8
 400bb74:	008100b4 	movhi	r2,1026
 400bb78:	dc000015 	stw	r16,0(sp)
 400bb7c:	dfc00115 	stw	ra,4(sp)
 400bb80:	109d2f04 	addi	r2,r2,29884
 400bb84:	20800015 	stw	r2,0(r4)
 400bb88:	2021883a 	mov	r16,r4
 400bb8c:	400ba300 	call	400ba30 <_ZNSt9type_infoD1Ev>
 400bb90:	8009883a 	mov	r4,r16
 400bb94:	dfc00117 	ldw	ra,4(sp)
 400bb98:	dc000017 	ldw	r16,0(sp)
 400bb9c:	dec00204 	addi	sp,sp,8
 400bba0:	400ba8c1 	jmpi	400ba8c <_ZdlPv>

0400bba4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 400bba4:	21000117 	ldw	r4,4(r4)
 400bba8:	29400117 	ldw	r5,4(r5)
 400bbac:	defffd04 	addi	sp,sp,-12
 400bbb0:	dc400115 	stw	r17,4(sp)
 400bbb4:	dc000015 	stw	r16,0(sp)
 400bbb8:	dfc00215 	stw	ra,8(sp)
 400bbbc:	3023883a 	mov	r17,r6
 400bbc0:	3821883a 	mov	r16,r7
 400bbc4:	21400526 	beq	r4,r5,400bbdc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
 400bbc8:	20c00007 	ldb	r3,0(r4)
 400bbcc:	00800a84 	movi	r2,42
 400bbd0:	18800d26 	beq	r3,r2,400bc08 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400bbd4:	400f8340 	call	400f834 <strcmp>
 400bbd8:	10000b1e 	bne	r2,zero,400bc08 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400bbdc:	00800204 	movi	r2,8
 400bbe0:	80800315 	stw	r2,12(r16)
 400bbe4:	00800184 	movi	r2,6
 400bbe8:	80800115 	stw	r2,4(r16)
 400bbec:	84400015 	stw	r17,0(r16)
 400bbf0:	00800044 	movi	r2,1
 400bbf4:	dfc00217 	ldw	ra,8(sp)
 400bbf8:	dc400117 	ldw	r17,4(sp)
 400bbfc:	dc000017 	ldw	r16,0(sp)
 400bc00:	dec00304 	addi	sp,sp,12
 400bc04:	f800283a 	ret
 400bc08:	0005883a 	mov	r2,zero
 400bc0c:	003ff906 	br	400bbf4 <__alt_mem_onchip_memory2_0+0xfc00a954>

0400bc10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 400bc10:	defffa04 	addi	sp,sp,-24
 400bc14:	dc800415 	stw	r18,16(sp)
 400bc18:	d8800817 	ldw	r2,32(sp)
 400bc1c:	dc800617 	ldw	r18,24(sp)
 400bc20:	dc400315 	stw	r17,12(sp)
 400bc24:	dc000215 	stw	r16,8(sp)
 400bc28:	dfc00515 	stw	ra,20(sp)
 400bc2c:	dc400917 	ldw	r17,36(sp)
 400bc30:	24000117 	ldw	r16,4(r4)
 400bc34:	90801526 	beq	r18,r2,400bc8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
 400bc38:	39400117 	ldw	r5,4(r7)
 400bc3c:	2c000826 	beq	r5,r16,400bc60 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
 400bc40:	80c00007 	ldb	r3,0(r16)
 400bc44:	00800a84 	movi	r2,42
 400bc48:	18800926 	beq	r3,r2,400bc70 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400bc4c:	8009883a 	mov	r4,r16
 400bc50:	d9800115 	stw	r6,4(sp)
 400bc54:	400f8340 	call	400f834 <strcmp>
 400bc58:	d9800117 	ldw	r6,4(sp)
 400bc5c:	1000041e 	bne	r2,zero,400bc70 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400bc60:	00800044 	movi	r2,1
 400bc64:	8c800015 	stw	r18,0(r17)
 400bc68:	89800115 	stw	r6,4(r17)
 400bc6c:	88800315 	stw	r2,12(r17)
 400bc70:	0005883a 	mov	r2,zero
 400bc74:	dfc00517 	ldw	ra,20(sp)
 400bc78:	dc800417 	ldw	r18,16(sp)
 400bc7c:	dc400317 	ldw	r17,12(sp)
 400bc80:	dc000217 	ldw	r16,8(sp)
 400bc84:	dec00604 	addi	sp,sp,24
 400bc88:	f800283a 	ret
 400bc8c:	d8800717 	ldw	r2,28(sp)
 400bc90:	11400117 	ldw	r5,4(r2)
 400bc94:	81400a26 	beq	r16,r5,400bcc0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
 400bc98:	80c00007 	ldb	r3,0(r16)
 400bc9c:	00800a84 	movi	r2,42
 400bca0:	18800c26 	beq	r3,r2,400bcd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 400bca4:	8009883a 	mov	r4,r16
 400bca8:	d9800115 	stw	r6,4(sp)
 400bcac:	d9c00015 	stw	r7,0(sp)
 400bcb0:	400f8340 	call	400f834 <strcmp>
 400bcb4:	d9800117 	ldw	r6,4(sp)
 400bcb8:	d9c00017 	ldw	r7,0(sp)
 400bcbc:	1000021e 	bne	r2,zero,400bcc8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 400bcc0:	89800215 	stw	r6,8(r17)
 400bcc4:	003fea06 	br	400bc70 <__alt_mem_onchip_memory2_0+0xfc00a9d0>
 400bcc8:	39400117 	ldw	r5,4(r7)
 400bccc:	817fdf1e 	bne	r16,r5,400bc4c <__alt_mem_onchip_memory2_0+0xfc00a9ac>
 400bcd0:	003fe306 	br	400bc60 <__alt_mem_onchip_memory2_0+0xfc00a9c0>
 400bcd4:	38800117 	ldw	r2,4(r7)
 400bcd8:	80bfe51e 	bne	r16,r2,400bc70 <__alt_mem_onchip_memory2_0+0xfc00a9d0>
 400bcdc:	003fe006 	br	400bc60 <__alt_mem_onchip_memory2_0+0xfc00a9c0>

0400bce0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 400bce0:	20800117 	ldw	r2,4(r4)
 400bce4:	28c00117 	ldw	r3,4(r5)
 400bce8:	10c02926 	beq	r2,r3,400bd90 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
 400bcec:	defffb04 	addi	sp,sp,-20
 400bcf0:	dcc00315 	stw	r19,12(sp)
 400bcf4:	dc800215 	stw	r18,8(sp)
 400bcf8:	dc400115 	stw	r17,4(sp)
 400bcfc:	dc000015 	stw	r16,0(sp)
 400bd00:	dfc00415 	stw	ra,16(sp)
 400bd04:	2821883a 	mov	r16,r5
 400bd08:	11400007 	ldb	r5,0(r2)
 400bd0c:	2025883a 	mov	r18,r4
 400bd10:	01000a84 	movi	r4,42
 400bd14:	3823883a 	mov	r17,r7
 400bd18:	3027883a 	mov	r19,r6
 400bd1c:	29000626 	beq	r5,r4,400bd38 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400bd20:	180b883a 	mov	r5,r3
 400bd24:	1009883a 	mov	r4,r2
 400bd28:	400f8340 	call	400f834 <strcmp>
 400bd2c:	1000021e 	bne	r2,zero,400bd38 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400bd30:	00800044 	movi	r2,1
 400bd34:	00000306 	br	400bd44 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
 400bd38:	008000c4 	movi	r2,3
 400bd3c:	1440082e 	bgeu	r2,r17,400bd60 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 400bd40:	0005883a 	mov	r2,zero
 400bd44:	dfc00417 	ldw	ra,16(sp)
 400bd48:	dcc00317 	ldw	r19,12(sp)
 400bd4c:	dc800217 	ldw	r18,8(sp)
 400bd50:	dc400117 	ldw	r17,4(sp)
 400bd54:	dc000017 	ldw	r16,0(sp)
 400bd58:	dec00504 	addi	sp,sp,20
 400bd5c:	f800283a 	ret
 400bd60:	80800017 	ldw	r2,0(r16)
 400bd64:	980d883a 	mov	r6,r19
 400bd68:	900b883a 	mov	r5,r18
 400bd6c:	10800517 	ldw	r2,20(r2)
 400bd70:	8009883a 	mov	r4,r16
 400bd74:	dfc00417 	ldw	ra,16(sp)
 400bd78:	dcc00317 	ldw	r19,12(sp)
 400bd7c:	dc800217 	ldw	r18,8(sp)
 400bd80:	dc400117 	ldw	r17,4(sp)
 400bd84:	dc000017 	ldw	r16,0(sp)
 400bd88:	dec00504 	addi	sp,sp,20
 400bd8c:	1000683a 	jmp	r2
 400bd90:	00800044 	movi	r2,1
 400bd94:	f800283a 	ret

0400bd98 <_ZN10__cxxabiv111__terminateEPFvvE>:
 400bd98:	00810074 	movhi	r2,1025
 400bd9c:	deffef04 	addi	sp,sp,-68
 400bda0:	10b1c004 	addi	r2,r2,-14592
 400bda4:	d8800615 	stw	r2,24(sp)
 400bda8:	008100b4 	movhi	r2,1026
 400bdac:	1081a304 	addi	r2,r2,1676
 400bdb0:	d8800715 	stw	r2,28(sp)
 400bdb4:	00810074 	movhi	r2,1025
 400bdb8:	10af7c04 	addi	r2,r2,-16912
 400bdbc:	d9000d15 	stw	r4,52(sp)
 400bdc0:	d809883a 	mov	r4,sp
 400bdc4:	d8800915 	stw	r2,36(sp)
 400bdc8:	dfc01015 	stw	ra,64(sp)
 400bdcc:	df000f15 	stw	fp,60(sp)
 400bdd0:	dec00815 	stw	sp,32(sp)
 400bdd4:	dec00a15 	stw	sp,40(sp)
 400bdd8:	400e4f80 	call	400e4f8 <_Unwind_SjLj_Register>
 400bddc:	00800044 	movi	r2,1
 400bde0:	d8800115 	stw	r2,4(sp)
 400bde4:	d8800d17 	ldw	r2,52(sp)
 400bde8:	103ee83a 	callr	r2
 400bdec:	400e8740 	call	400e874 <abort>
 400bdf0:	d8c00217 	ldw	r3,8(sp)
 400bdf4:	d8800117 	ldw	r2,4(sp)
 400bdf8:	d8c00d15 	stw	r3,52(sp)
 400bdfc:	d8c00317 	ldw	r3,12(sp)
 400be00:	d8c00e15 	stw	r3,56(sp)
 400be04:	10000b26 	beq	r2,zero,400be34 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
 400be08:	10bfffc4 	addi	r2,r2,-1
 400be0c:	10000126 	beq	r2,zero,400be14 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
 400be10:	003b68fa 	trap	3
 400be14:	d8000115 	stw	zero,4(sp)
 400be18:	400d1440 	call	400d144 <__cxa_end_catch>
 400be1c:	d8c00e17 	ldw	r3,56(sp)
 400be20:	00bfffc4 	movi	r2,-1
 400be24:	18800826 	beq	r3,r2,400be48 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
 400be28:	d9000d17 	ldw	r4,52(sp)
 400be2c:	d8800115 	stw	r2,4(sp)
 400be30:	400e6f40 	call	400e6f4 <_Unwind_SjLj_Resume>
 400be34:	d9000d17 	ldw	r4,52(sp)
 400be38:	400d0900 	call	400d090 <__cxa_begin_catch>
 400be3c:	00800084 	movi	r2,2
 400be40:	d8800115 	stw	r2,4(sp)
 400be44:	400e8740 	call	400e874 <abort>
 400be48:	d8800e17 	ldw	r2,56(sp)
 400be4c:	d9000d17 	ldw	r4,52(sp)
 400be50:	d8800115 	stw	r2,4(sp)
 400be54:	400cd000 	call	400cd00 <__cxa_call_unexpected>

0400be58 <_ZSt9terminatev>:
 400be58:	008100f4 	movhi	r2,1027
 400be5c:	10aa9b04 	addi	r2,r2,-21908
 400be60:	11000017 	ldw	r4,0(r2)
 400be64:	deffff04 	addi	sp,sp,-4
 400be68:	dfc00015 	stw	ra,0(sp)
 400be6c:	400bd980 	call	400bd98 <_ZN10__cxxabiv111__terminateEPFvvE>

0400be70 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 400be70:	deffff04 	addi	sp,sp,-4
 400be74:	dfc00015 	stw	ra,0(sp)
 400be78:	203ee83a 	callr	r4
 400be7c:	400be580 	call	400be58 <_ZSt9terminatev>

0400be80 <_ZSt10unexpectedv>:
 400be80:	008100f4 	movhi	r2,1027
 400be84:	10aa9a04 	addi	r2,r2,-21912
 400be88:	11000017 	ldw	r4,0(r2)
 400be8c:	deffff04 	addi	sp,sp,-4
 400be90:	dfc00015 	stw	ra,0(sp)
 400be94:	400be700 	call	400be70 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0400be98 <_ZSt13set_terminatePFvvE>:
 400be98:	00c100f4 	movhi	r3,1027
 400be9c:	18ea9b04 	addi	r3,r3,-21908
 400bea0:	18800017 	ldw	r2,0(r3)
 400bea4:	19000015 	stw	r4,0(r3)
 400bea8:	f800283a 	ret

0400beac <_ZSt13get_terminatev>:
 400beac:	008100f4 	movhi	r2,1027
 400beb0:	10aa9b04 	addi	r2,r2,-21908
 400beb4:	10800017 	ldw	r2,0(r2)
 400beb8:	f800283a 	ret

0400bebc <_ZSt14set_unexpectedPFvvE>:
 400bebc:	00c100f4 	movhi	r3,1027
 400bec0:	18ea9a04 	addi	r3,r3,-21912
 400bec4:	18800017 	ldw	r2,0(r3)
 400bec8:	19000015 	stw	r4,0(r3)
 400becc:	f800283a 	ret

0400bed0 <_ZSt14get_unexpectedv>:
 400bed0:	008100f4 	movhi	r2,1027
 400bed4:	10aa9a04 	addi	r2,r2,-21912
 400bed8:	10800017 	ldw	r2,0(r2)
 400bedc:	f800283a 	ret

0400bee0 <_ZL21size_of_encoded_valueh>:
 400bee0:	deffff04 	addi	sp,sp,-4
 400bee4:	dfc00015 	stw	ra,0(sp)
 400bee8:	20c03fcc 	andi	r3,r4,255
 400beec:	00803fc4 	movi	r2,255
 400bef0:	18802026 	beq	r3,r2,400bf74 <_ZL21size_of_encoded_valueh+0x94>
 400bef4:	210001cc 	andi	r4,r4,7
 400bef8:	00800144 	movi	r2,5
 400befc:	11001c36 	bltu	r2,r4,400bf70 <_ZL21size_of_encoded_valueh+0x90>
 400bf00:	200890ba 	slli	r4,r4,2
 400bf04:	00810074 	movhi	r2,1025
 400bf08:	10afc604 	addi	r2,r2,-16616
 400bf0c:	2089883a 	add	r4,r4,r2
 400bf10:	20800017 	ldw	r2,0(r4)
 400bf14:	1000683a 	jmp	r2
 400bf18:	0400bf30 	cmpltui	r16,zero,764
 400bf1c:	0400bf70 	cmpltui	r16,zero,765
 400bf20:	0400bf40 	call	400bf4 <__alt_mem_sdram-0x3bff40c>
 400bf24:	0400bf30 	cmpltui	r16,zero,764
 400bf28:	0400bf60 	cmpeqi	r16,zero,765
 400bf2c:	0400bf50 	cmplti	r16,zero,765
 400bf30:	00800104 	movi	r2,4
 400bf34:	dfc00017 	ldw	ra,0(sp)
 400bf38:	dec00104 	addi	sp,sp,4
 400bf3c:	f800283a 	ret
 400bf40:	00800084 	movi	r2,2
 400bf44:	dfc00017 	ldw	ra,0(sp)
 400bf48:	dec00104 	addi	sp,sp,4
 400bf4c:	f800283a 	ret
 400bf50:	00800044 	movi	r2,1
 400bf54:	dfc00017 	ldw	ra,0(sp)
 400bf58:	dec00104 	addi	sp,sp,4
 400bf5c:	f800283a 	ret
 400bf60:	00800204 	movi	r2,8
 400bf64:	dfc00017 	ldw	ra,0(sp)
 400bf68:	dec00104 	addi	sp,sp,4
 400bf6c:	f800283a 	ret
 400bf70:	400e8740 	call	400e874 <abort>
 400bf74:	0005883a 	mov	r2,zero
 400bf78:	dfc00017 	ldw	ra,0(sp)
 400bf7c:	dec00104 	addi	sp,sp,4
 400bf80:	f800283a 	ret

0400bf84 <_ZL28read_encoded_value_with_basehjPKhPj>:
 400bf84:	deffff04 	addi	sp,sp,-4
 400bf88:	dfc00015 	stw	ra,0(sp)
 400bf8c:	20c03fcc 	andi	r3,r4,255
 400bf90:	00801404 	movi	r2,80
 400bf94:	18807326 	beq	r3,r2,400c164 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
 400bf98:	20c003cc 	andi	r3,r4,15
 400bf9c:	00800304 	movi	r2,12
 400bfa0:	10c06f36 	bltu	r2,r3,400c160 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
 400bfa4:	180690ba 	slli	r3,r3,2
 400bfa8:	02010074 	movhi	r8,1025
 400bfac:	422fef04 	addi	r8,r8,-16452
 400bfb0:	1a07883a 	add	r3,r3,r8
 400bfb4:	18800017 	ldw	r2,0(r3)
 400bfb8:	1000683a 	jmp	r2
 400bfbc:	0400bff0 	cmpltui	r16,zero,767
 400bfc0:	0400c10c 	andi	r16,zero,772
 400bfc4:	0400c148 	cmpgei	r16,zero,773
 400bfc8:	0400bff0 	cmpltui	r16,zero,767
 400bfcc:	0400c054 	movui	r16,769
 400bfd0:	0400c0a8 	cmpgeui	r16,zero,770
 400bfd4:	0400c160 	cmpeqi	r16,zero,773
 400bfd8:	0400c160 	cmpeqi	r16,zero,773
 400bfdc:	0400c160 	cmpeqi	r16,zero,773
 400bfe0:	0400c0b4 	movhi	r16,770
 400bfe4:	0400c084 	movi	r16,770
 400bfe8:	0400bff0 	cmpltui	r16,zero,767
 400bfec:	0400c054 	movui	r16,769
 400bff0:	30800043 	ldbu	r2,1(r6)
 400bff4:	30c00083 	ldbu	r3,2(r6)
 400bff8:	324000c3 	ldbu	r9,3(r6)
 400bffc:	32000003 	ldbu	r8,0(r6)
 400c000:	1004923a 	slli	r2,r2,8
 400c004:	1806943a 	slli	r3,r3,16
 400c008:	4812963a 	slli	r9,r9,24
 400c00c:	1204b03a 	or	r2,r2,r8
 400c010:	1884b03a 	or	r2,r3,r2
 400c014:	4886b03a 	or	r3,r9,r2
 400c018:	30800104 	addi	r2,r6,4
 400c01c:	18000926 	beq	r3,zero,400c044 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 400c020:	22001c0c 	andi	r8,r4,112
 400c024:	02400404 	movi	r9,16
 400c028:	42405726 	beq	r8,r9,400c188 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
 400c02c:	21003fcc 	andi	r4,r4,255
 400c030:	2100201c 	xori	r4,r4,128
 400c034:	213fe004 	addi	r4,r4,-128
 400c038:	1947883a 	add	r3,r3,r5
 400c03c:	2000010e 	bge	r4,zero,400c044 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 400c040:	18c00017 	ldw	r3,0(r3)
 400c044:	38c00015 	stw	r3,0(r7)
 400c048:	dfc00017 	ldw	ra,0(sp)
 400c04c:	dec00104 	addi	sp,sp,4
 400c050:	f800283a 	ret
 400c054:	30800043 	ldbu	r2,1(r6)
 400c058:	30c00083 	ldbu	r3,2(r6)
 400c05c:	324000c3 	ldbu	r9,3(r6)
 400c060:	32000003 	ldbu	r8,0(r6)
 400c064:	1004923a 	slli	r2,r2,8
 400c068:	1806943a 	slli	r3,r3,16
 400c06c:	4812963a 	slli	r9,r9,24
 400c070:	1204b03a 	or	r2,r2,r8
 400c074:	1884b03a 	or	r2,r3,r2
 400c078:	4886b03a 	or	r3,r9,r2
 400c07c:	30800204 	addi	r2,r6,8
 400c080:	003fe606 	br	400c01c <__alt_mem_onchip_memory2_0+0xfc00ad7c>
 400c084:	30c00043 	ldbu	r3,1(r6)
 400c088:	32000003 	ldbu	r8,0(r6)
 400c08c:	30800084 	addi	r2,r6,2
 400c090:	1806923a 	slli	r3,r3,8
 400c094:	1a06b03a 	or	r3,r3,r8
 400c098:	18ffffcc 	andi	r3,r3,65535
 400c09c:	18e0001c 	xori	r3,r3,32768
 400c0a0:	18e00004 	addi	r3,r3,-32768
 400c0a4:	003fdd06 	br	400c01c <__alt_mem_onchip_memory2_0+0xfc00ad7c>
 400c0a8:	30c00003 	ldbu	r3,0(r6)
 400c0ac:	30800044 	addi	r2,r6,1
 400c0b0:	003fda06 	br	400c01c <__alt_mem_onchip_memory2_0+0xfc00ad7c>
 400c0b4:	3017883a 	mov	r11,r6
 400c0b8:	0007883a 	mov	r3,zero
 400c0bc:	0013883a 	mov	r9,zero
 400c0c0:	5a800003 	ldbu	r10,0(r11)
 400c0c4:	58800044 	addi	r2,r11,1
 400c0c8:	1017883a 	mov	r11,r2
 400c0cc:	52001fcc 	andi	r8,r10,127
 400c0d0:	4250983a 	sll	r8,r8,r9
 400c0d4:	53003fcc 	andi	r12,r10,255
 400c0d8:	6300201c 	xori	r12,r12,128
 400c0dc:	633fe004 	addi	r12,r12,-128
 400c0e0:	1a06b03a 	or	r3,r3,r8
 400c0e4:	4a4001c4 	addi	r9,r9,7
 400c0e8:	603ff516 	blt	r12,zero,400c0c0 <__alt_mem_onchip_memory2_0+0xfc00ae20>
 400c0ec:	020007c4 	movi	r8,31
 400c0f0:	427fca36 	bltu	r8,r9,400c01c <__alt_mem_onchip_memory2_0+0xfc00ad7c>
 400c0f4:	5280100c 	andi	r10,r10,64
 400c0f8:	503fc826 	beq	r10,zero,400c01c <__alt_mem_onchip_memory2_0+0xfc00ad7c>
 400c0fc:	023fffc4 	movi	r8,-1
 400c100:	4252983a 	sll	r9,r8,r9
 400c104:	1a46b03a 	or	r3,r3,r9
 400c108:	003fc506 	br	400c020 <__alt_mem_onchip_memory2_0+0xfc00ad80>
 400c10c:	3017883a 	mov	r11,r6
 400c110:	0007883a 	mov	r3,zero
 400c114:	0015883a 	mov	r10,zero
 400c118:	5a000003 	ldbu	r8,0(r11)
 400c11c:	58800044 	addi	r2,r11,1
 400c120:	1017883a 	mov	r11,r2
 400c124:	42401fcc 	andi	r9,r8,127
 400c128:	4a92983a 	sll	r9,r9,r10
 400c12c:	42003fcc 	andi	r8,r8,255
 400c130:	4200201c 	xori	r8,r8,128
 400c134:	423fe004 	addi	r8,r8,-128
 400c138:	1a46b03a 	or	r3,r3,r9
 400c13c:	528001c4 	addi	r10,r10,7
 400c140:	403ff516 	blt	r8,zero,400c118 <__alt_mem_onchip_memory2_0+0xfc00ae78>
 400c144:	003fb506 	br	400c01c <__alt_mem_onchip_memory2_0+0xfc00ad7c>
 400c148:	30c00043 	ldbu	r3,1(r6)
 400c14c:	32000003 	ldbu	r8,0(r6)
 400c150:	30800084 	addi	r2,r6,2
 400c154:	1806923a 	slli	r3,r3,8
 400c158:	1a06b03a 	or	r3,r3,r8
 400c15c:	003faf06 	br	400c01c <__alt_mem_onchip_memory2_0+0xfc00ad7c>
 400c160:	400e8740 	call	400e874 <abort>
 400c164:	308000c4 	addi	r2,r6,3
 400c168:	00ffff04 	movi	r3,-4
 400c16c:	10c4703a 	and	r2,r2,r3
 400c170:	10c00017 	ldw	r3,0(r2)
 400c174:	10800104 	addi	r2,r2,4
 400c178:	38c00015 	stw	r3,0(r7)
 400c17c:	dfc00017 	ldw	ra,0(sp)
 400c180:	dec00104 	addi	sp,sp,4
 400c184:	f800283a 	ret
 400c188:	300b883a 	mov	r5,r6
 400c18c:	003fa706 	br	400c02c <__alt_mem_onchip_memory2_0+0xfc00ad8c>

0400c190 <_ZL15get_ttype_entryP16lsda_header_infom>:
 400c190:	defffc04 	addi	sp,sp,-16
 400c194:	dfc00315 	stw	ra,12(sp)
 400c198:	dc000215 	stw	r16,8(sp)
 400c19c:	2021883a 	mov	r16,r4
 400c1a0:	21000503 	ldbu	r4,20(r4)
 400c1a4:	d9400115 	stw	r5,4(sp)
 400c1a8:	400bee00 	call	400bee0 <_ZL21size_of_encoded_valueh>
 400c1ac:	d9400117 	ldw	r5,4(sp)
 400c1b0:	1009883a 	mov	r4,r2
 400c1b4:	400d7980 	call	400d798 <__mulsi3>
 400c1b8:	81800317 	ldw	r6,12(r16)
 400c1bc:	81400217 	ldw	r5,8(r16)
 400c1c0:	81000503 	ldbu	r4,20(r16)
 400c1c4:	d80f883a 	mov	r7,sp
 400c1c8:	308dc83a 	sub	r6,r6,r2
 400c1cc:	400bf840 	call	400bf84 <_ZL28read_encoded_value_with_basehjPKhPj>
 400c1d0:	d8800017 	ldw	r2,0(sp)
 400c1d4:	dfc00317 	ldw	ra,12(sp)
 400c1d8:	dc000217 	ldw	r16,8(sp)
 400c1dc:	dec00404 	addi	sp,sp,16
 400c1e0:	f800283a 	ret

0400c1e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 400c1e4:	deffff04 	addi	sp,sp,-4
 400c1e8:	dfc00015 	stw	ra,0(sp)
 400c1ec:	20c03fcc 	andi	r3,r4,255
 400c1f0:	00803fc4 	movi	r2,255
 400c1f4:	18800e26 	beq	r3,r2,400c230 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 400c1f8:	20801c0c 	andi	r2,r4,112
 400c1fc:	00c00804 	movi	r3,32
 400c200:	10c01726 	beq	r2,r3,400c260 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
 400c204:	18800e2e 	bgeu	r3,r2,400c240 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
 400c208:	00c01004 	movi	r3,64
 400c20c:	10c01026 	beq	r2,r3,400c250 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
 400c210:	00c01404 	movi	r3,80
 400c214:	10c00626 	beq	r2,r3,400c230 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 400c218:	00c00c04 	movi	r3,48
 400c21c:	10c00b1e 	bne	r2,r3,400c24c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
 400c220:	2809883a 	mov	r4,r5
 400c224:	dfc00017 	ldw	ra,0(sp)
 400c228:	dec00104 	addi	sp,sp,4
 400c22c:	400e5d01 	jmpi	400e5d0 <_Unwind_GetDataRelBase>
 400c230:	0005883a 	mov	r2,zero
 400c234:	dfc00017 	ldw	ra,0(sp)
 400c238:	dec00104 	addi	sp,sp,4
 400c23c:	f800283a 	ret
 400c240:	103ffb26 	beq	r2,zero,400c230 <__alt_mem_onchip_memory2_0+0xfc00af90>
 400c244:	00c00404 	movi	r3,16
 400c248:	10fff926 	beq	r2,r3,400c230 <__alt_mem_onchip_memory2_0+0xfc00af90>
 400c24c:	400e8740 	call	400e874 <abort>
 400c250:	2809883a 	mov	r4,r5
 400c254:	dfc00017 	ldw	ra,0(sp)
 400c258:	dec00104 	addi	sp,sp,4
 400c25c:	400e5c01 	jmpi	400e5c0 <_Unwind_GetRegionStart>
 400c260:	2809883a 	mov	r4,r5
 400c264:	dfc00017 	ldw	ra,0(sp)
 400c268:	dec00104 	addi	sp,sp,4
 400c26c:	400e5d81 	jmpi	400e5d8 <_Unwind_GetTextRelBase>

0400c270 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 400c270:	defffb04 	addi	sp,sp,-20
 400c274:	dcc00315 	stw	r19,12(sp)
 400c278:	dc400115 	stw	r17,4(sp)
 400c27c:	dc000015 	stw	r16,0(sp)
 400c280:	dfc00415 	stw	ra,16(sp)
 400c284:	dc800215 	stw	r18,8(sp)
 400c288:	2027883a 	mov	r19,r4
 400c28c:	2821883a 	mov	r16,r5
 400c290:	3023883a 	mov	r17,r6
 400c294:	20003f26 	beq	r4,zero,400c394 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
 400c298:	400e5c00 	call	400e5c0 <_Unwind_GetRegionStart>
 400c29c:	88800015 	stw	r2,0(r17)
 400c2a0:	84800003 	ldbu	r18,0(r16)
 400c2a4:	00c03fc4 	movi	r3,255
 400c2a8:	84000044 	addi	r16,r16,1
 400c2ac:	90c03726 	beq	r18,r3,400c38c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
 400c2b0:	980b883a 	mov	r5,r19
 400c2b4:	9009883a 	mov	r4,r18
 400c2b8:	400c1e40 	call	400c1e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c2bc:	800d883a 	mov	r6,r16
 400c2c0:	89c00104 	addi	r7,r17,4
 400c2c4:	100b883a 	mov	r5,r2
 400c2c8:	9009883a 	mov	r4,r18
 400c2cc:	400bf840 	call	400bf84 <_ZL28read_encoded_value_with_basehjPKhPj>
 400c2d0:	1021883a 	mov	r16,r2
 400c2d4:	80c00003 	ldbu	r3,0(r16)
 400c2d8:	01003fc4 	movi	r4,255
 400c2dc:	80800044 	addi	r2,r16,1
 400c2e0:	88c00505 	stb	r3,20(r17)
 400c2e4:	18c03fcc 	andi	r3,r3,255
 400c2e8:	19002c26 	beq	r3,r4,400c39c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
 400c2ec:	100f883a 	mov	r7,r2
 400c2f0:	000d883a 	mov	r6,zero
 400c2f4:	000b883a 	mov	r5,zero
 400c2f8:	38c00003 	ldbu	r3,0(r7)
 400c2fc:	10800044 	addi	r2,r2,1
 400c300:	100f883a 	mov	r7,r2
 400c304:	19001fcc 	andi	r4,r3,127
 400c308:	2148983a 	sll	r4,r4,r5
 400c30c:	18c03fcc 	andi	r3,r3,255
 400c310:	18c0201c 	xori	r3,r3,128
 400c314:	18ffe004 	addi	r3,r3,-128
 400c318:	310cb03a 	or	r6,r6,r4
 400c31c:	294001c4 	addi	r5,r5,7
 400c320:	183ff516 	blt	r3,zero,400c2f8 <__alt_mem_onchip_memory2_0+0xfc00b058>
 400c324:	118d883a 	add	r6,r2,r6
 400c328:	89800315 	stw	r6,12(r17)
 400c32c:	10c00003 	ldbu	r3,0(r2)
 400c330:	000d883a 	mov	r6,zero
 400c334:	10800044 	addi	r2,r2,1
 400c338:	88c00545 	stb	r3,21(r17)
 400c33c:	000b883a 	mov	r5,zero
 400c340:	10c00003 	ldbu	r3,0(r2)
 400c344:	10800044 	addi	r2,r2,1
 400c348:	19001fcc 	andi	r4,r3,127
 400c34c:	2148983a 	sll	r4,r4,r5
 400c350:	18c03fcc 	andi	r3,r3,255
 400c354:	18c0201c 	xori	r3,r3,128
 400c358:	18ffe004 	addi	r3,r3,-128
 400c35c:	310cb03a 	or	r6,r6,r4
 400c360:	294001c4 	addi	r5,r5,7
 400c364:	183ff616 	blt	r3,zero,400c340 <__alt_mem_onchip_memory2_0+0xfc00b0a0>
 400c368:	118d883a 	add	r6,r2,r6
 400c36c:	89800415 	stw	r6,16(r17)
 400c370:	dfc00417 	ldw	ra,16(sp)
 400c374:	dcc00317 	ldw	r19,12(sp)
 400c378:	dc800217 	ldw	r18,8(sp)
 400c37c:	dc400117 	ldw	r17,4(sp)
 400c380:	dc000017 	ldw	r16,0(sp)
 400c384:	dec00504 	addi	sp,sp,20
 400c388:	f800283a 	ret
 400c38c:	88800115 	stw	r2,4(r17)
 400c390:	003fd006 	br	400c2d4 <__alt_mem_onchip_memory2_0+0xfc00b034>
 400c394:	0005883a 	mov	r2,zero
 400c398:	003fc006 	br	400c29c <__alt_mem_onchip_memory2_0+0xfc00affc>
 400c39c:	88000315 	stw	zero,12(r17)
 400c3a0:	003fe206 	br	400c32c <__alt_mem_onchip_memory2_0+0xfc00b08c>

0400c3a4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
 400c3a4:	28800017 	ldw	r2,0(r5)
 400c3a8:	30c00017 	ldw	r3,0(r6)
 400c3ac:	defffb04 	addi	sp,sp,-20
 400c3b0:	10800217 	ldw	r2,8(r2)
 400c3b4:	dc400315 	stw	r17,12(sp)
 400c3b8:	dc000215 	stw	r16,8(sp)
 400c3bc:	d9400115 	stw	r5,4(sp)
 400c3c0:	dfc00415 	stw	ra,16(sp)
 400c3c4:	2021883a 	mov	r16,r4
 400c3c8:	d8c00015 	stw	r3,0(sp)
 400c3cc:	2809883a 	mov	r4,r5
 400c3d0:	3023883a 	mov	r17,r6
 400c3d4:	103ee83a 	callr	r2
 400c3d8:	10803fcc 	andi	r2,r2,255
 400c3dc:	d9400117 	ldw	r5,4(sp)
 400c3e0:	10000326 	beq	r2,zero,400c3f0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
 400c3e4:	d8800017 	ldw	r2,0(sp)
 400c3e8:	10800017 	ldw	r2,0(r2)
 400c3ec:	d8800015 	stw	r2,0(sp)
 400c3f0:	80800017 	ldw	r2,0(r16)
 400c3f4:	01c00044 	movi	r7,1
 400c3f8:	d80d883a 	mov	r6,sp
 400c3fc:	10800417 	ldw	r2,16(r2)
 400c400:	8009883a 	mov	r4,r16
 400c404:	103ee83a 	callr	r2
 400c408:	10c03fcc 	andi	r3,r2,255
 400c40c:	18000226 	beq	r3,zero,400c418 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
 400c410:	d8c00017 	ldw	r3,0(sp)
 400c414:	88c00015 	stw	r3,0(r17)
 400c418:	dfc00417 	ldw	ra,16(sp)
 400c41c:	dc400317 	ldw	r17,12(sp)
 400c420:	dc000217 	ldw	r16,8(sp)
 400c424:	dec00504 	addi	sp,sp,20
 400c428:	f800283a 	ret

0400c42c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
 400c42c:	defff304 	addi	sp,sp,-52
 400c430:	dc800615 	stw	r18,24(sp)
 400c434:	3825d23a 	srai	r18,r7,8
 400c438:	dd000815 	stw	r20,32(sp)
 400c43c:	dcc00715 	stw	r19,28(sp)
 400c440:	dfc00c15 	stw	ra,48(sp)
 400c444:	ddc00b15 	stw	r23,44(sp)
 400c448:	dd800a15 	stw	r22,40(sp)
 400c44c:	dd400915 	stw	r21,36(sp)
 400c450:	dc400515 	stw	r17,20(sp)
 400c454:	dc000415 	stw	r16,16(sp)
 400c458:	d9400215 	stw	r5,8(sp)
 400c45c:	3827883a 	mov	r19,r7
 400c460:	2029883a 	mov	r20,r4
 400c464:	9000010e 	bge	r18,zero,400c46c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
 400c468:	04a5c83a 	sub	r18,zero,r18
 400c46c:	000b883a 	mov	r5,zero
 400c470:	01000144 	movi	r4,5
 400c474:	d9800315 	stw	r6,12(sp)
 400c478:	400c1e40 	call	400c1e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c47c:	d9800317 	ldw	r6,12(sp)
 400c480:	d9c00104 	addi	r7,sp,4
 400c484:	100b883a 	mov	r5,r2
 400c488:	01000144 	movi	r4,5
 400c48c:	400bf840 	call	400bf84 <_ZL28read_encoded_value_with_basehjPKhPj>
 400c490:	017ffe44 	movi	r5,-7
 400c494:	1009883a 	mov	r4,r2
 400c498:	1021883a 	mov	r16,r2
 400c49c:	400d7980 	call	400d798 <__mulsi3>
 400c4a0:	102d883a 	mov	r22,r2
 400c4a4:	0023883a 	mov	r17,zero
 400c4a8:	85400003 	ldbu	r21,0(r16)
 400c4ac:	8009883a 	mov	r4,r16
 400c4b0:	014001c4 	movi	r5,7
 400c4b4:	400d7980 	call	400d798 <__mulsi3>
 400c4b8:	a8c01fcc 	andi	r3,r21,127
 400c4bc:	1585883a 	add	r2,r2,r22
 400c4c0:	1886983a 	sll	r3,r3,r2
 400c4c4:	ad403fcc 	andi	r21,r21,255
 400c4c8:	ad40201c 	xori	r21,r21,128
 400c4cc:	ad7fe004 	addi	r21,r21,-128
 400c4d0:	84000044 	addi	r16,r16,1
 400c4d4:	88e2b03a 	or	r17,r17,r3
 400c4d8:	a83ff316 	blt	r21,zero,400c4a8 <__alt_mem_onchip_memory2_0+0xfc00b208>
 400c4dc:	8461883a 	add	r16,r16,r17
 400c4e0:	017ffe44 	movi	r5,-7
 400c4e4:	8009883a 	mov	r4,r16
 400c4e8:	400d7980 	call	400d798 <__mulsi3>
 400c4ec:	102d883a 	mov	r22,r2
 400c4f0:	002b883a 	mov	r21,zero
 400c4f4:	84400003 	ldbu	r17,0(r16)
 400c4f8:	8009883a 	mov	r4,r16
 400c4fc:	014001c4 	movi	r5,7
 400c500:	400d7980 	call	400d798 <__mulsi3>
 400c504:	88c01fcc 	andi	r3,r17,127
 400c508:	1585883a 	add	r2,r2,r22
 400c50c:	1886983a 	sll	r3,r3,r2
 400c510:	8c403fcc 	andi	r17,r17,255
 400c514:	8c40201c 	xori	r17,r17,128
 400c518:	8c7fe004 	addi	r17,r17,-128
 400c51c:	84000044 	addi	r16,r16,1
 400c520:	a8eab03a 	or	r21,r21,r3
 400c524:	883ff316 	blt	r17,zero,400c4f4 <__alt_mem_onchip_memory2_0+0xfc00b254>
 400c528:	94403fcc 	andi	r17,r18,255
 400c52c:	8c7fffc4 	addi	r17,r17,-1
 400c530:	8463883a 	add	r17,r16,r17
 400c534:	ad4000c4 	addi	r21,r21,3
 400c538:	00bfff04 	movi	r2,-4
 400c53c:	ac21883a 	add	r16,r21,r16
 400c540:	017ffe44 	movi	r5,-7
 400c544:	8809883a 	mov	r4,r17
 400c548:	80a0703a 	and	r16,r16,r2
 400c54c:	400d7980 	call	400d798 <__mulsi3>
 400c550:	0025883a 	mov	r18,zero
 400c554:	102f883a 	mov	r23,r2
 400c558:	8d800003 	ldbu	r22,0(r17)
 400c55c:	8809883a 	mov	r4,r17
 400c560:	014001c4 	movi	r5,7
 400c564:	400d7980 	call	400d798 <__mulsi3>
 400c568:	b0c01fcc 	andi	r3,r22,127
 400c56c:	15c5883a 	add	r2,r2,r23
 400c570:	1886983a 	sll	r3,r3,r2
 400c574:	b5803fcc 	andi	r22,r22,255
 400c578:	b580201c 	xori	r22,r22,128
 400c57c:	8d400044 	addi	r21,r17,1
 400c580:	b5bfe004 	addi	r22,r22,-128
 400c584:	90e4b03a 	or	r18,r18,r3
 400c588:	a823883a 	mov	r17,r21
 400c58c:	b03ff216 	blt	r22,zero,400c558 <__alt_mem_onchip_memory2_0+0xfc00b2b8>
 400c590:	9cc03fcc 	andi	r19,r19,255
 400c594:	90002426 	beq	r18,zero,400c628 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
 400c598:	9809883a 	mov	r4,r19
 400c59c:	400bee00 	call	400bee0 <_ZL21size_of_encoded_valueh>
 400c5a0:	100b883a 	mov	r5,r2
 400c5a4:	913fffc4 	addi	r4,r18,-1
 400c5a8:	400d7980 	call	400d798 <__mulsi3>
 400c5ac:	d9400d17 	ldw	r5,52(sp)
 400c5b0:	d80f883a 	mov	r7,sp
 400c5b4:	9809883a 	mov	r4,r19
 400c5b8:	140d883a 	add	r6,r2,r16
 400c5bc:	400bf840 	call	400bf84 <_ZL28read_encoded_value_with_basehjPKhPj>
 400c5c0:	d9000017 	ldw	r4,0(sp)
 400c5c4:	d9800204 	addi	r6,sp,8
 400c5c8:	a00b883a 	mov	r5,r20
 400c5cc:	400c3a40 	call	400c3a4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400c5d0:	10c03fcc 	andi	r3,r2,255
 400c5d4:	1800151e 	bne	r3,zero,400c62c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
 400c5d8:	a809883a 	mov	r4,r21
 400c5dc:	017ffe44 	movi	r5,-7
 400c5e0:	400d7980 	call	400d798 <__mulsi3>
 400c5e4:	102d883a 	mov	r22,r2
 400c5e8:	a809883a 	mov	r4,r21
 400c5ec:	0025883a 	mov	r18,zero
 400c5f0:	24400003 	ldbu	r17,0(r4)
 400c5f4:	014001c4 	movi	r5,7
 400c5f8:	400d7980 	call	400d798 <__mulsi3>
 400c5fc:	88c01fcc 	andi	r3,r17,127
 400c600:	1585883a 	add	r2,r2,r22
 400c604:	1886983a 	sll	r3,r3,r2
 400c608:	8c403fcc 	andi	r17,r17,255
 400c60c:	8c40201c 	xori	r17,r17,128
 400c610:	ad400044 	addi	r21,r21,1
 400c614:	8c7fe004 	addi	r17,r17,-128
 400c618:	90e4b03a 	or	r18,r18,r3
 400c61c:	a809883a 	mov	r4,r21
 400c620:	883ff316 	blt	r17,zero,400c5f0 <__alt_mem_onchip_memory2_0+0xfc00b350>
 400c624:	003fdb06 	br	400c594 <__alt_mem_onchip_memory2_0+0xfc00b2f4>
 400c628:	0005883a 	mov	r2,zero
 400c62c:	dfc00c17 	ldw	ra,48(sp)
 400c630:	ddc00b17 	ldw	r23,44(sp)
 400c634:	dd800a17 	ldw	r22,40(sp)
 400c638:	dd400917 	ldw	r21,36(sp)
 400c63c:	dd000817 	ldw	r20,32(sp)
 400c640:	dcc00717 	ldw	r19,28(sp)
 400c644:	dc800617 	ldw	r18,24(sp)
 400c648:	dc400517 	ldw	r17,20(sp)
 400c64c:	dc000417 	ldw	r16,16(sp)
 400c650:	dec00d04 	addi	sp,sp,52
 400c654:	f800283a 	ret

0400c658 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
 400c658:	defffb04 	addi	sp,sp,-20
 400c65c:	dc000115 	stw	r16,4(sp)
 400c660:	24000317 	ldw	r16,12(r4)
 400c664:	01ce303a 	nor	r7,zero,r7
 400c668:	dc800315 	stw	r18,12(sp)
 400c66c:	dc400215 	stw	r17,8(sp)
 400c670:	dfc00415 	stw	ra,16(sp)
 400c674:	2023883a 	mov	r17,r4
 400c678:	2825883a 	mov	r18,r5
 400c67c:	d9800015 	stw	r6,0(sp)
 400c680:	81e1883a 	add	r16,r16,r7
 400c684:	800d883a 	mov	r6,r16
 400c688:	000b883a 	mov	r5,zero
 400c68c:	0009883a 	mov	r4,zero
 400c690:	30800003 	ldbu	r2,0(r6)
 400c694:	84000044 	addi	r16,r16,1
 400c698:	800d883a 	mov	r6,r16
 400c69c:	10c01fcc 	andi	r3,r2,127
 400c6a0:	1906983a 	sll	r3,r3,r4
 400c6a4:	10803fcc 	andi	r2,r2,255
 400c6a8:	1080201c 	xori	r2,r2,128
 400c6ac:	10bfe004 	addi	r2,r2,-128
 400c6b0:	28cab03a 	or	r5,r5,r3
 400c6b4:	210001c4 	addi	r4,r4,7
 400c6b8:	103ff516 	blt	r2,zero,400c690 <__alt_mem_onchip_memory2_0+0xfc00b3f0>
 400c6bc:	28000e26 	beq	r5,zero,400c6f8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
 400c6c0:	8809883a 	mov	r4,r17
 400c6c4:	400c1900 	call	400c190 <_ZL15get_ttype_entryP16lsda_header_infom>
 400c6c8:	d80d883a 	mov	r6,sp
 400c6cc:	900b883a 	mov	r5,r18
 400c6d0:	1009883a 	mov	r4,r2
 400c6d4:	400c3a40 	call	400c3a4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400c6d8:	10c03fcc 	andi	r3,r2,255
 400c6dc:	183fe926 	beq	r3,zero,400c684 <__alt_mem_onchip_memory2_0+0xfc00b3e4>
 400c6e0:	dfc00417 	ldw	ra,16(sp)
 400c6e4:	dc800317 	ldw	r18,12(sp)
 400c6e8:	dc400217 	ldw	r17,8(sp)
 400c6ec:	dc000117 	ldw	r16,4(sp)
 400c6f0:	dec00504 	addi	sp,sp,20
 400c6f4:	f800283a 	ret
 400c6f8:	0005883a 	mov	r2,zero
 400c6fc:	003ff806 	br	400c6e0 <__alt_mem_onchip_memory2_0+0xfc00b440>

0400c700 <__gxx_personality_sj0>:
 400c700:	00810074 	movhi	r2,1025
 400c704:	deffdd04 	addi	sp,sp,-140
 400c708:	10b1c004 	addi	r2,r2,-14592
 400c70c:	d8800e15 	stw	r2,56(sp)
 400c710:	008100b4 	movhi	r2,1026
 400c714:	1081a904 	addi	r2,r2,1700
 400c718:	d8800f15 	stw	r2,60(sp)
 400c71c:	00810074 	movhi	r2,1025
 400c720:	10b33604 	addi	r2,r2,-13096
 400c724:	d9001515 	stw	r4,84(sp)
 400c728:	d9000804 	addi	r4,sp,32
 400c72c:	d8801115 	stw	r2,68(sp)
 400c730:	dfc02215 	stw	ra,136(sp)
 400c734:	df002115 	stw	fp,132(sp)
 400c738:	dec01015 	stw	sp,64(sp)
 400c73c:	dec01215 	stw	sp,72(sp)
 400c740:	d9401915 	stw	r5,100(sp)
 400c744:	d9801615 	stw	r6,88(sp)
 400c748:	d9c01715 	stw	r7,92(sp)
 400c74c:	400e4f80 	call	400e4f8 <_Unwind_SjLj_Register>
 400c750:	d8c01517 	ldw	r3,84(sp)
 400c754:	d8000715 	stw	zero,28(sp)
 400c758:	d8000615 	stw	zero,24(sp)
 400c75c:	00800044 	movi	r2,1
 400c760:	18800926 	beq	r3,r2,400c788 <__gxx_personality_sj0+0x88>
 400c764:	01c000c4 	movi	r7,3
 400c768:	d9c01515 	stw	r7,84(sp)
 400c76c:	d9000804 	addi	r4,sp,32
 400c770:	400e5100 	call	400e510 <_Unwind_SjLj_Unregister>
 400c774:	d8801517 	ldw	r2,84(sp)
 400c778:	dfc02217 	ldw	ra,136(sp)
 400c77c:	df002117 	ldw	fp,132(sp)
 400c780:	dec02304 	addi	sp,sp,140
 400c784:	f800283a 	ret
 400c788:	d9001617 	ldw	r4,88(sp)
 400c78c:	00af3574 	movhi	r2,48341
 400c790:	d9c01717 	ldw	r7,92(sp)
 400c794:	10b54004 	addi	r2,r2,-11008
 400c798:	00ee2cb4 	movhi	r3,47282
 400c79c:	2085883a 	add	r2,r4,r2
 400c7a0:	18eaaf04 	addi	r3,r3,-21828
 400c7a4:	d8801b15 	stw	r2,108(sp)
 400c7a8:	38c7883a 	add	r3,r7,r3
 400c7ac:	1105803a 	cmpltu	r2,r2,r4
 400c7b0:	10c7883a 	add	r3,r2,r3
 400c7b4:	d8c01c15 	stw	r3,112(sp)
 400c7b8:	d8c01917 	ldw	r3,100(sp)
 400c7bc:	00800184 	movi	r2,6
 400c7c0:	18805426 	beq	r3,r2,400c914 <__gxx_personality_sj0+0x214>
 400c7c4:	d9002417 	ldw	r4,144(sp)
 400c7c8:	00bfffc4 	movi	r2,-1
 400c7cc:	d8800915 	stw	r2,36(sp)
 400c7d0:	400e5b40 	call	400e5b4 <_Unwind_GetLanguageSpecificData>
 400c7d4:	d8801a15 	stw	r2,104(sp)
 400c7d8:	1000c926 	beq	r2,zero,400cb00 <__gxx_personality_sj0+0x400>
 400c7dc:	d9002417 	ldw	r4,144(sp)
 400c7e0:	d80d883a 	mov	r6,sp
 400c7e4:	100b883a 	mov	r5,r2
 400c7e8:	400c2700 	call	400c270 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400c7ec:	d9402417 	ldw	r5,144(sp)
 400c7f0:	d9000503 	ldbu	r4,20(sp)
 400c7f4:	d8801515 	stw	r2,84(sp)
 400c7f8:	400c1e40 	call	400c1e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c7fc:	d9002417 	ldw	r4,144(sp)
 400c800:	d9400604 	addi	r5,sp,24
 400c804:	d8800215 	stw	r2,8(sp)
 400c808:	400e5840 	call	400e584 <_Unwind_GetIPInfo>
 400c80c:	d8c00617 	ldw	r3,24(sp)
 400c810:	18006126 	beq	r3,zero,400c998 <__gxx_personality_sj0+0x298>
 400c814:	1000ba16 	blt	r2,zero,400cb00 <__gxx_personality_sj0+0x400>
 400c818:	10002f1e 	bne	r2,zero,400c8d8 <__gxx_personality_sj0+0x1d8>
 400c81c:	d8001515 	stw	zero,84(sp)
 400c820:	d8001f15 	stw	zero,124(sp)
 400c824:	d8001815 	stw	zero,96(sp)
 400c828:	00c00044 	movi	r3,1
 400c82c:	d9001917 	ldw	r4,100(sp)
 400c830:	2080004c 	andi	r2,r4,1
 400c834:	1000b51e 	bne	r2,zero,400cb0c <__gxx_personality_sj0+0x40c>
 400c838:	d9001917 	ldw	r4,100(sp)
 400c83c:	2080020c 	andi	r2,r4,8
 400c840:	1000b71e 	bne	r2,zero,400cb20 <__gxx_personality_sj0+0x420>
 400c844:	d9c01c17 	ldw	r7,112(sp)
 400c848:	3800b826 	beq	r7,zero,400cb2c <__gxx_personality_sj0+0x42c>
 400c84c:	00800044 	movi	r2,1
 400c850:	1880b526 	beq	r3,r2,400cb28 <__gxx_personality_sj0+0x428>
 400c854:	d9c01517 	ldw	r7,84(sp)
 400c858:	3800f516 	blt	r7,zero,400cc30 <__gxx_personality_sj0+0x530>
 400c85c:	d9002417 	ldw	r4,144(sp)
 400c860:	d9802317 	ldw	r6,140(sp)
 400c864:	00bfffc4 	movi	r2,-1
 400c868:	000b883a 	mov	r5,zero
 400c86c:	d8800915 	stw	r2,36(sp)
 400c870:	400e5580 	call	400e558 <_Unwind_SetGR>
 400c874:	d9801517 	ldw	r6,84(sp)
 400c878:	d9002417 	ldw	r4,144(sp)
 400c87c:	01400044 	movi	r5,1
 400c880:	400e5580 	call	400e558 <_Unwind_SetGR>
 400c884:	d9002417 	ldw	r4,144(sp)
 400c888:	d9401f17 	ldw	r5,124(sp)
 400c88c:	400e5a40 	call	400e5a4 <_Unwind_SetIP>
 400c890:	010001c4 	movi	r4,7
 400c894:	d9001515 	stw	r4,84(sp)
 400c898:	003fb406 	br	400c76c <__alt_mem_onchip_memory2_0+0xfc00b4cc>
 400c89c:	000f883a 	mov	r7,zero
 400c8a0:	000d883a 	mov	r6,zero
 400c8a4:	19000003 	ldbu	r4,0(r3)
 400c8a8:	18c00044 	addi	r3,r3,1
 400c8ac:	d8c01515 	stw	r3,84(sp)
 400c8b0:	21401fcc 	andi	r5,r4,127
 400c8b4:	298a983a 	sll	r5,r5,r6
 400c8b8:	21003fcc 	andi	r4,r4,255
 400c8bc:	2100201c 	xori	r4,r4,128
 400c8c0:	213fe004 	addi	r4,r4,-128
 400c8c4:	394eb03a 	or	r7,r7,r5
 400c8c8:	318001c4 	addi	r6,r6,7
 400c8cc:	203ff516 	blt	r4,zero,400c8a4 <__alt_mem_onchip_memory2_0+0xfc00b604>
 400c8d0:	10bfffc4 	addi	r2,r2,-1
 400c8d4:	10003226 	beq	r2,zero,400c9a0 <__gxx_personality_sj0+0x2a0>
 400c8d8:	d9c01517 	ldw	r7,84(sp)
 400c8dc:	0011883a 	mov	r8,zero
 400c8e0:	000d883a 	mov	r6,zero
 400c8e4:	39000003 	ldbu	r4,0(r7)
 400c8e8:	38c00044 	addi	r3,r7,1
 400c8ec:	180f883a 	mov	r7,r3
 400c8f0:	21401fcc 	andi	r5,r4,127
 400c8f4:	298a983a 	sll	r5,r5,r6
 400c8f8:	21003fcc 	andi	r4,r4,255
 400c8fc:	2100201c 	xori	r4,r4,128
 400c900:	213fe004 	addi	r4,r4,-128
 400c904:	4150b03a 	or	r8,r8,r5
 400c908:	318001c4 	addi	r6,r6,7
 400c90c:	203ff516 	blt	r4,zero,400c8e4 <__alt_mem_onchip_memory2_0+0xfc00b644>
 400c910:	003fe206 	br	400c89c <__alt_mem_onchip_memory2_0+0xfc00b5fc>
 400c914:	d9001c17 	ldw	r4,112(sp)
 400c918:	203faa1e 	bne	r4,zero,400c7c4 <__alt_mem_onchip_memory2_0+0xfc00b524>
 400c91c:	d9c01517 	ldw	r7,84(sp)
 400c920:	d8801b17 	ldw	r2,108(sp)
 400c924:	38bfa736 	bltu	r7,r2,400c7c4 <__alt_mem_onchip_memory2_0+0xfc00b524>
 400c928:	d8c02317 	ldw	r3,140(sp)
 400c92c:	18fffe17 	ldw	r3,-8(r3)
 400c930:	d8c01f15 	stw	r3,124(sp)
 400c934:	18008226 	beq	r3,zero,400cb40 <__gxx_personality_sj0+0x440>
 400c938:	d9002317 	ldw	r4,140(sp)
 400c93c:	d9c02317 	ldw	r7,140(sp)
 400c940:	213ffb17 	ldw	r4,-20(r4)
 400c944:	39fffd17 	ldw	r7,-12(r7)
 400c948:	d9001515 	stw	r4,84(sp)
 400c94c:	d9c01a15 	stw	r7,104(sp)
 400c950:	d8801517 	ldw	r2,84(sp)
 400c954:	103fc10e 	bge	r2,zero,400c85c <__alt_mem_onchip_memory2_0+0xfc00b5bc>
 400c958:	d9002417 	ldw	r4,144(sp)
 400c95c:	d9401a17 	ldw	r5,104(sp)
 400c960:	d80d883a 	mov	r6,sp
 400c964:	00bfffc4 	movi	r2,-1
 400c968:	d8800915 	stw	r2,36(sp)
 400c96c:	400c2700 	call	400c270 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400c970:	d9402417 	ldw	r5,144(sp)
 400c974:	d9000503 	ldbu	r4,20(sp)
 400c978:	400c1e40 	call	400c1e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c97c:	d9000503 	ldbu	r4,20(sp)
 400c980:	d9402417 	ldw	r5,144(sp)
 400c984:	d8800215 	stw	r2,8(sp)
 400c988:	400c1e40 	call	400c1e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c98c:	d8c02317 	ldw	r3,140(sp)
 400c990:	18bffe15 	stw	r2,-8(r3)
 400c994:	003fb106 	br	400c85c <__alt_mem_onchip_memory2_0+0xfc00b5bc>
 400c998:	10bfffc4 	addi	r2,r2,-1
 400c99c:	003f9d06 	br	400c814 <__alt_mem_onchip_memory2_0+0xfc00b574>
 400c9a0:	42000044 	addi	r8,r8,1
 400c9a4:	da001f15 	stw	r8,124(sp)
 400c9a8:	38005326 	beq	r7,zero,400caf8 <__gxx_personality_sj0+0x3f8>
 400c9ac:	d8800417 	ldw	r2,16(sp)
 400c9b0:	39ffffc4 	addi	r7,r7,-1
 400c9b4:	11c5883a 	add	r2,r2,r7
 400c9b8:	d8801815 	stw	r2,96(sp)
 400c9bc:	40005026 	beq	r8,zero,400cb00 <__gxx_personality_sj0+0x400>
 400c9c0:	10007426 	beq	r2,zero,400cb94 <__gxx_personality_sj0+0x494>
 400c9c4:	d8801917 	ldw	r2,100(sp)
 400c9c8:	1080020c 	andi	r2,r2,8
 400c9cc:	d8802015 	stw	r2,128(sp)
 400c9d0:	1000a21e 	bne	r2,zero,400cc5c <__gxx_personality_sj0+0x55c>
 400c9d4:	d8c01c17 	ldw	r3,112(sp)
 400c9d8:	1800b026 	beq	r3,zero,400cc9c <__gxx_personality_sj0+0x59c>
 400c9dc:	01c100f4 	movhi	r7,1027
 400c9e0:	39eaa004 	addi	r7,r7,-21888
 400c9e4:	d9c01e15 	stw	r7,120(sp)
 400c9e8:	d8001d05 	stb	zero,116(sp)
 400c9ec:	d8c01817 	ldw	r3,96(sp)
 400c9f0:	d8001515 	stw	zero,84(sp)
 400c9f4:	0009883a 	mov	r4,zero
 400c9f8:	19400003 	ldbu	r5,0(r3)
 400c9fc:	18800044 	addi	r2,r3,1
 400ca00:	d9c01517 	ldw	r7,84(sp)
 400ca04:	28c01fcc 	andi	r3,r5,127
 400ca08:	1906983a 	sll	r3,r3,r4
 400ca0c:	29803fcc 	andi	r6,r5,255
 400ca10:	3180201c 	xori	r6,r6,128
 400ca14:	38ceb03a 	or	r7,r7,r3
 400ca18:	d8801715 	stw	r2,92(sp)
 400ca1c:	31bfe004 	addi	r6,r6,-128
 400ca20:	d9c01515 	stw	r7,84(sp)
 400ca24:	210001c4 	addi	r4,r4,7
 400ca28:	1007883a 	mov	r3,r2
 400ca2c:	303ff216 	blt	r6,zero,400c9f8 <__alt_mem_onchip_memory2_0+0xfc00b758>
 400ca30:	00c007c4 	movi	r3,31
 400ca34:	19000836 	bltu	r3,r4,400ca58 <__gxx_personality_sj0+0x358>
 400ca38:	2940100c 	andi	r5,r5,64
 400ca3c:	28000626 	beq	r5,zero,400ca58 <__gxx_personality_sj0+0x358>
 400ca40:	01c00044 	movi	r7,1
 400ca44:	3908983a 	sll	r4,r7,r4
 400ca48:	d8c01517 	ldw	r3,84(sp)
 400ca4c:	0109c83a 	sub	r4,zero,r4
 400ca50:	1906b03a 	or	r3,r3,r4
 400ca54:	d8c01515 	stw	r3,84(sp)
 400ca58:	d8001615 	stw	zero,88(sp)
 400ca5c:	0009883a 	mov	r4,zero
 400ca60:	11400003 	ldbu	r5,0(r2)
 400ca64:	d9c01617 	ldw	r7,88(sp)
 400ca68:	10800044 	addi	r2,r2,1
 400ca6c:	28c01fcc 	andi	r3,r5,127
 400ca70:	1906983a 	sll	r3,r3,r4
 400ca74:	29803fcc 	andi	r6,r5,255
 400ca78:	3180201c 	xori	r6,r6,128
 400ca7c:	38ceb03a 	or	r7,r7,r3
 400ca80:	31bfe004 	addi	r6,r6,-128
 400ca84:	d9c01615 	stw	r7,88(sp)
 400ca88:	210001c4 	addi	r4,r4,7
 400ca8c:	303ff416 	blt	r6,zero,400ca60 <__alt_mem_onchip_memory2_0+0xfc00b7c0>
 400ca90:	008007c4 	movi	r2,31
 400ca94:	11000736 	bltu	r2,r4,400cab4 <__gxx_personality_sj0+0x3b4>
 400ca98:	2940100c 	andi	r5,r5,64
 400ca9c:	28000526 	beq	r5,zero,400cab4 <__gxx_personality_sj0+0x3b4>
 400caa0:	00c00044 	movi	r3,1
 400caa4:	1908983a 	sll	r4,r3,r4
 400caa8:	0109c83a 	sub	r4,zero,r4
 400caac:	390eb03a 	or	r7,r7,r4
 400cab0:	d9c01615 	stw	r7,88(sp)
 400cab4:	d9001517 	ldw	r4,84(sp)
 400cab8:	20003c26 	beq	r4,zero,400cbac <__gxx_personality_sj0+0x4ac>
 400cabc:	01003e0e 	bge	zero,r4,400cbb8 <__gxx_personality_sj0+0x4b8>
 400cac0:	01ffffc4 	movi	r7,-1
 400cac4:	200b883a 	mov	r5,r4
 400cac8:	d809883a 	mov	r4,sp
 400cacc:	d9c00915 	stw	r7,36(sp)
 400cad0:	400c1900 	call	400c190 <_ZL15get_ttype_entryP16lsda_header_infom>
 400cad4:	10005f26 	beq	r2,zero,400cc54 <__gxx_personality_sj0+0x554>
 400cad8:	d8c01e17 	ldw	r3,120(sp)
 400cadc:	1800571e 	bne	r3,zero,400cc3c <__gxx_personality_sj0+0x53c>
 400cae0:	d9001617 	ldw	r4,88(sp)
 400cae4:	20002926 	beq	r4,zero,400cb8c <__gxx_personality_sj0+0x48c>
 400cae8:	d9c01717 	ldw	r7,92(sp)
 400caec:	390f883a 	add	r7,r7,r4
 400caf0:	d9c01815 	stw	r7,96(sp)
 400caf4:	003fbd06 	br	400c9ec <__alt_mem_onchip_memory2_0+0xfc00b74c>
 400caf8:	d8c01f17 	ldw	r3,124(sp)
 400cafc:	1800251e 	bne	r3,zero,400cb94 <__gxx_personality_sj0+0x494>
 400cb00:	01000204 	movi	r4,8
 400cb04:	d9001515 	stw	r4,84(sp)
 400cb08:	003f1806 	br	400c76c <__alt_mem_onchip_memory2_0+0xfc00b4cc>
 400cb0c:	d8801c17 	ldw	r2,112(sp)
 400cb10:	10000d26 	beq	r2,zero,400cb48 <__gxx_personality_sj0+0x448>
 400cb14:	00800184 	movi	r2,6
 400cb18:	d8801515 	stw	r2,84(sp)
 400cb1c:	003f1306 	br	400c76c <__alt_mem_onchip_memory2_0+0xfc00b4cc>
 400cb20:	00800044 	movi	r2,1
 400cb24:	18bf4d1e 	bne	r3,r2,400c85c <__alt_mem_onchip_memory2_0+0xfc00b5bc>
 400cb28:	400be580 	call	400be58 <_ZSt9terminatev>
 400cb2c:	d9001b17 	ldw	r4,108(sp)
 400cb30:	00800044 	movi	r2,1
 400cb34:	113f4536 	bltu	r2,r4,400c84c <__alt_mem_onchip_memory2_0+0xfc00b5ac>
 400cb38:	00800044 	movi	r2,1
 400cb3c:	18bf841e 	bne	r3,r2,400c950 <__alt_mem_onchip_memory2_0+0xfc00b6b0>
 400cb40:	d9002317 	ldw	r4,140(sp)
 400cb44:	400d4dc0 	call	400d4dc <__cxa_call_terminate>
 400cb48:	d8c01b17 	ldw	r3,108(sp)
 400cb4c:	00800044 	movi	r2,1
 400cb50:	10fff036 	bltu	r2,r3,400cb14 <__alt_mem_onchip_memory2_0+0xfc00b874>
 400cb54:	d9002317 	ldw	r4,140(sp)
 400cb58:	d8801817 	ldw	r2,96(sp)
 400cb5c:	d9c01517 	ldw	r7,84(sp)
 400cb60:	d8c01a17 	ldw	r3,104(sp)
 400cb64:	20bffc15 	stw	r2,-16(r4)
 400cb68:	d8800717 	ldw	r2,28(sp)
 400cb6c:	21fffb15 	stw	r7,-20(r4)
 400cb70:	d9c01f17 	ldw	r7,124(sp)
 400cb74:	20bfff15 	stw	r2,-4(r4)
 400cb78:	00800184 	movi	r2,6
 400cb7c:	20fffd15 	stw	r3,-12(r4)
 400cb80:	21fffe15 	stw	r7,-8(r4)
 400cb84:	d8801515 	stw	r2,84(sp)
 400cb88:	003ef806 	br	400c76c <__alt_mem_onchip_memory2_0+0xfc00b4cc>
 400cb8c:	d8801d03 	ldbu	r2,116(sp)
 400cb90:	103fdb26 	beq	r2,zero,400cb00 <__alt_mem_onchip_memory2_0+0xfc00b860>
 400cb94:	d8c01917 	ldw	r3,100(sp)
 400cb98:	1880004c 	andi	r2,r3,1
 400cb9c:	103fd81e 	bne	r2,zero,400cb00 <__alt_mem_onchip_memory2_0+0xfc00b860>
 400cba0:	d8001515 	stw	zero,84(sp)
 400cba4:	00c00084 	movi	r3,2
 400cba8:	003f2306 	br	400c838 <__alt_mem_onchip_memory2_0+0xfc00b598>
 400cbac:	00c00044 	movi	r3,1
 400cbb0:	d8c01d05 	stb	r3,116(sp)
 400cbb4:	003fca06 	br	400cae0 <__alt_mem_onchip_memory2_0+0xfc00b840>
 400cbb8:	d9001e17 	ldw	r4,120(sp)
 400cbbc:	20000426 	beq	r4,zero,400cbd0 <__gxx_personality_sj0+0x4d0>
 400cbc0:	d9c02017 	ldw	r7,128(sp)
 400cbc4:	3800021e 	bne	r7,zero,400cbd0 <__gxx_personality_sj0+0x4d0>
 400cbc8:	d8801c17 	ldw	r2,112(sp)
 400cbcc:	10002726 	beq	r2,zero,400cc6c <__gxx_personality_sj0+0x56c>
 400cbd0:	d8801517 	ldw	r2,84(sp)
 400cbd4:	000d883a 	mov	r6,zero
 400cbd8:	000b883a 	mov	r5,zero
 400cbdc:	0088303a 	nor	r4,zero,r2
 400cbe0:	d8800317 	ldw	r2,12(sp)
 400cbe4:	1109883a 	add	r4,r2,r4
 400cbe8:	20800003 	ldbu	r2,0(r4)
 400cbec:	21000044 	addi	r4,r4,1
 400cbf0:	10c01fcc 	andi	r3,r2,127
 400cbf4:	1946983a 	sll	r3,r3,r5
 400cbf8:	10803fcc 	andi	r2,r2,255
 400cbfc:	1080201c 	xori	r2,r2,128
 400cc00:	10bfe004 	addi	r2,r2,-128
 400cc04:	30ccb03a 	or	r6,r6,r3
 400cc08:	294001c4 	addi	r5,r5,7
 400cc0c:	103ff616 	blt	r2,zero,400cbe8 <__alt_mem_onchip_memory2_0+0xfc00b948>
 400cc10:	3005003a 	cmpeq	r2,r6,zero
 400cc14:	10803fcc 	andi	r2,r2,255
 400cc18:	103fb126 	beq	r2,zero,400cae0 <__alt_mem_onchip_memory2_0+0xfc00b840>
 400cc1c:	d9c01917 	ldw	r7,100(sp)
 400cc20:	3880004c 	andi	r2,r7,1
 400cc24:	103fb91e 	bne	r2,zero,400cb0c <__alt_mem_onchip_memory2_0+0xfc00b86c>
 400cc28:	d8802017 	ldw	r2,128(sp)
 400cc2c:	10002d26 	beq	r2,zero,400cce4 <__gxx_personality_sj0+0x5e4>
 400cc30:	00800044 	movi	r2,1
 400cc34:	d8800915 	stw	r2,36(sp)
 400cc38:	400be800 	call	400be80 <_ZSt10unexpectedv>
 400cc3c:	d9800704 	addi	r6,sp,28
 400cc40:	180b883a 	mov	r5,r3
 400cc44:	1009883a 	mov	r4,r2
 400cc48:	400c3a40 	call	400c3a4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400cc4c:	10803fcc 	andi	r2,r2,255
 400cc50:	103fa326 	beq	r2,zero,400cae0 <__alt_mem_onchip_memory2_0+0xfc00b840>
 400cc54:	00c000c4 	movi	r3,3
 400cc58:	003ef406 	br	400c82c <__alt_mem_onchip_memory2_0+0xfc00b58c>
 400cc5c:	010100f4 	movhi	r4,1027
 400cc60:	212a9e04 	addi	r4,r4,-21896
 400cc64:	d9001e15 	stw	r4,120(sp)
 400cc68:	003f5f06 	br	400c9e8 <__alt_mem_onchip_memory2_0+0xfc00b748>
 400cc6c:	d9001b17 	ldw	r4,108(sp)
 400cc70:	00c00044 	movi	r3,1
 400cc74:	193fd636 	bltu	r3,r4,400cbd0 <__alt_mem_onchip_memory2_0+0xfc00b930>
 400cc78:	01ffffc4 	movi	r7,-1
 400cc7c:	d9c00915 	stw	r7,36(sp)
 400cc80:	d9800717 	ldw	r6,28(sp)
 400cc84:	d9c01517 	ldw	r7,84(sp)
 400cc88:	d9401e17 	ldw	r5,120(sp)
 400cc8c:	d809883a 	mov	r4,sp
 400cc90:	400c6580 	call	400c658 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400cc94:	1080005c 	xori	r2,r2,1
 400cc98:	003fde06 	br	400cc14 <__alt_mem_onchip_memory2_0+0xfc00b974>
 400cc9c:	d9001b17 	ldw	r4,108(sp)
 400cca0:	00800044 	movi	r2,1
 400cca4:	113f4d36 	bltu	r2,r4,400c9dc <__alt_mem_onchip_memory2_0+0xfc00b73c>
 400cca8:	d9c02317 	ldw	r7,140(sp)
 400ccac:	38800017 	ldw	r2,0(r7)
 400ccb0:	1080004c 	andi	r2,r2,1
 400ccb4:	1000061e 	bne	r2,zero,400ccd0 <__gxx_personality_sj0+0x5d0>
 400ccb8:	d8c02317 	ldw	r3,140(sp)
 400ccbc:	18800504 	addi	r2,r3,20
 400ccc0:	d8800715 	stw	r2,28(sp)
 400ccc4:	10bff017 	ldw	r2,-64(r2)
 400ccc8:	d8801e15 	stw	r2,120(sp)
 400cccc:	003f4606 	br	400c9e8 <__alt_mem_onchip_memory2_0+0xfc00b748>
 400ccd0:	38bff517 	ldw	r2,-44(r7)
 400ccd4:	003ffa06 	br	400ccc0 <__alt_mem_onchip_memory2_0+0xfc00ba20>
 400ccd8:	d9000a17 	ldw	r4,40(sp)
 400ccdc:	400d0900 	call	400d090 <__cxa_begin_catch>
 400cce0:	003f9106 	br	400cb28 <__alt_mem_onchip_memory2_0+0xfc00b888>
 400cce4:	d9c01c17 	ldw	r7,112(sp)
 400cce8:	383eda1e 	bne	r7,zero,400c854 <__alt_mem_onchip_memory2_0+0xfc00b5b4>
 400ccec:	d8c01b17 	ldw	r3,108(sp)
 400ccf0:	00800044 	movi	r2,1
 400ccf4:	10fed736 	bltu	r2,r3,400c854 <__alt_mem_onchip_memory2_0+0xfc00b5b4>
 400ccf8:	00c000c4 	movi	r3,3
 400ccfc:	003f8e06 	br	400cb38 <__alt_mem_onchip_memory2_0+0xfc00b898>

0400cd00 <__cxa_call_unexpected>:
 400cd00:	00810074 	movhi	r2,1025
 400cd04:	deffe604 	addi	sp,sp,-104
 400cd08:	10b1c004 	addi	r2,r2,-14592
 400cd0c:	d8800d15 	stw	r2,52(sp)
 400cd10:	008100b4 	movhi	r2,1026
 400cd14:	1081ad04 	addi	r2,r2,1716
 400cd18:	d8800e15 	stw	r2,56(sp)
 400cd1c:	d8800104 	addi	r2,sp,4
 400cd20:	d8800f15 	stw	r2,60(sp)
 400cd24:	00810074 	movhi	r2,1025
 400cd28:	10b36304 	addi	r2,r2,-12916
 400cd2c:	d9001415 	stw	r4,80(sp)
 400cd30:	d9000704 	addi	r4,sp,28
 400cd34:	dfc01915 	stw	ra,100(sp)
 400cd38:	d8801015 	stw	r2,64(sp)
 400cd3c:	df001815 	stw	fp,96(sp)
 400cd40:	dec01115 	stw	sp,68(sp)
 400cd44:	400e4f80 	call	400e4f8 <_Unwind_SjLj_Register>
 400cd48:	d9001417 	ldw	r4,80(sp)
 400cd4c:	400d0900 	call	400d090 <__cxa_begin_catch>
 400cd50:	d8c01417 	ldw	r3,80(sp)
 400cd54:	18bffe17 	ldw	r2,-8(r3)
 400cd58:	193ff717 	ldw	r4,-36(r3)
 400cd5c:	18fffd17 	ldw	r3,-12(r3)
 400cd60:	d8800315 	stw	r2,12(sp)
 400cd64:	d8c01615 	stw	r3,88(sp)
 400cd68:	d8c01417 	ldw	r3,80(sp)
 400cd6c:	18fffb17 	ldw	r3,-20(r3)
 400cd70:	d8c01515 	stw	r3,84(sp)
 400cd74:	d8c01417 	ldw	r3,80(sp)
 400cd78:	18fff817 	ldw	r3,-32(r3)
 400cd7c:	d8c01415 	stw	r3,80(sp)
 400cd80:	00c00044 	movi	r3,1
 400cd84:	d8c00815 	stw	r3,32(sp)
 400cd88:	400be700 	call	400be70 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 400cd8c:	d8c00917 	ldw	r3,36(sp)
 400cd90:	d8800817 	ldw	r2,32(sp)
 400cd94:	d8c01715 	stw	r3,92(sp)
 400cd98:	10000a26 	beq	r2,zero,400cdc4 <__cxa_call_unexpected+0xc4>
 400cd9c:	10bfffc4 	addi	r2,r2,-1
 400cda0:	10000126 	beq	r2,zero,400cda8 <__cxa_call_unexpected+0xa8>
 400cda4:	003b68fa 	trap	3
 400cda8:	d8000815 	stw	zero,32(sp)
 400cdac:	400d1440 	call	400d144 <__cxa_end_catch>
 400cdb0:	400d1440 	call	400d144 <__cxa_end_catch>
 400cdb4:	d9001717 	ldw	r4,92(sp)
 400cdb8:	00bfffc4 	movi	r2,-1
 400cdbc:	d8800815 	stw	r2,32(sp)
 400cdc0:	400e6f40 	call	400e6f4 <_Unwind_SjLj_Resume>
 400cdc4:	d9001717 	ldw	r4,92(sp)
 400cdc8:	400d0900 	call	400d090 <__cxa_begin_catch>
 400cdcc:	400d5340 	call	400d534 <__cxa_get_globals_fast>
 400cdd0:	10800017 	ldw	r2,0(r2)
 400cdd4:	10c00b17 	ldw	r3,44(r2)
 400cdd8:	18c0004c 	andi	r3,r3,1
 400cddc:	18001e26 	beq	r3,zero,400ce58 <__cxa_call_unexpected+0x158>
 400cde0:	10800017 	ldw	r2,0(r2)
 400cde4:	d8801715 	stw	r2,92(sp)
 400cde8:	d8801517 	ldw	r2,84(sp)
 400cdec:	00802b0e 	bge	zero,r2,400ce9c <__cxa_call_unexpected+0x19c>
 400cdf0:	d8c01717 	ldw	r3,92(sp)
 400cdf4:	d8800317 	ldw	r2,12(sp)
 400cdf8:	d9c01517 	ldw	r7,84(sp)
 400cdfc:	193ff017 	ldw	r4,-64(r3)
 400ce00:	d9801617 	ldw	r6,88(sp)
 400ce04:	d8800015 	stw	r2,0(sp)
 400ce08:	180b883a 	mov	r5,r3
 400ce0c:	00800084 	movi	r2,2
 400ce10:	d8800815 	stw	r2,32(sp)
 400ce14:	400c42c0 	call	400c42c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400ce18:	10803fcc 	andi	r2,r2,255
 400ce1c:	10001e1e 	bne	r2,zero,400ce98 <__cxa_call_unexpected+0x198>
 400ce20:	d8800317 	ldw	r2,12(sp)
 400ce24:	d9c01517 	ldw	r7,84(sp)
 400ce28:	d9801617 	ldw	r6,88(sp)
 400ce2c:	010100b4 	movhi	r4,1026
 400ce30:	d8800015 	stw	r2,0(sp)
 400ce34:	211d4a04 	addi	r4,r4,29992
 400ce38:	00800084 	movi	r2,2
 400ce3c:	000b883a 	mov	r5,zero
 400ce40:	d8800815 	stw	r2,32(sp)
 400ce44:	400c42c0 	call	400c42c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400ce48:	10803fcc 	andi	r2,r2,255
 400ce4c:	1000051e 	bne	r2,zero,400ce64 <__cxa_call_unexpected+0x164>
 400ce50:	d9001417 	ldw	r4,80(sp)
 400ce54:	400bd980 	call	400bd98 <_ZN10__cxxabiv111__terminateEPFvvE>
 400ce58:	10801004 	addi	r2,r2,64
 400ce5c:	d8801715 	stw	r2,92(sp)
 400ce60:	003fe106 	br	400cde8 <__alt_mem_onchip_memory2_0+0xfc00bb48>
 400ce64:	01000104 	movi	r4,4
 400ce68:	400d3780 	call	400d378 <__cxa_allocate_exception>
 400ce6c:	00c100b4 	movhi	r3,1026
 400ce70:	18dd6504 	addi	r3,r3,30100
 400ce74:	01810074 	movhi	r6,1025
 400ce78:	014100b4 	movhi	r5,1026
 400ce7c:	10c00015 	stw	r3,0(r2)
 400ce80:	31b55404 	addi	r6,r6,-10928
 400ce84:	00c00084 	movi	r3,2
 400ce88:	295d4a04 	addi	r5,r5,29992
 400ce8c:	1009883a 	mov	r4,r2
 400ce90:	d8c00815 	stw	r3,32(sp)
 400ce94:	400cf740 	call	400cf74 <__cxa_throw>
 400ce98:	400d0040 	call	400d004 <__cxa_rethrow>
 400ce9c:	d9401617 	ldw	r5,88(sp)
 400cea0:	00800084 	movi	r2,2
 400cea4:	d9800104 	addi	r6,sp,4
 400cea8:	0009883a 	mov	r4,zero
 400ceac:	d8800815 	stw	r2,32(sp)
 400ceb0:	400c2700 	call	400c270 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400ceb4:	d9801717 	ldw	r6,92(sp)
 400ceb8:	d9c01517 	ldw	r7,84(sp)
 400cebc:	d9000104 	addi	r4,sp,4
 400cec0:	317ff017 	ldw	r5,-64(r6)
 400cec4:	400c6580 	call	400c658 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400cec8:	10803fcc 	andi	r2,r2,255
 400cecc:	1000171e 	bne	r2,zero,400cf2c <__cxa_call_unexpected+0x22c>
 400ced0:	d9c01517 	ldw	r7,84(sp)
 400ced4:	014100b4 	movhi	r5,1026
 400ced8:	00800084 	movi	r2,2
 400cedc:	295d4a04 	addi	r5,r5,29992
 400cee0:	000d883a 	mov	r6,zero
 400cee4:	d9000104 	addi	r4,sp,4
 400cee8:	d8800815 	stw	r2,32(sp)
 400ceec:	400c6580 	call	400c658 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400cef0:	10803fcc 	andi	r2,r2,255
 400cef4:	103fd626 	beq	r2,zero,400ce50 <__alt_mem_onchip_memory2_0+0xfc00bbb0>
 400cef8:	01000104 	movi	r4,4
 400cefc:	400d3780 	call	400d378 <__cxa_allocate_exception>
 400cf00:	00c100b4 	movhi	r3,1026
 400cf04:	18dd6504 	addi	r3,r3,30100
 400cf08:	01810074 	movhi	r6,1025
 400cf0c:	014100b4 	movhi	r5,1026
 400cf10:	10c00015 	stw	r3,0(r2)
 400cf14:	31b55404 	addi	r6,r6,-10928
 400cf18:	00c00084 	movi	r3,2
 400cf1c:	295d4a04 	addi	r5,r5,29992
 400cf20:	1009883a 	mov	r4,r2
 400cf24:	d8c00815 	stw	r3,32(sp)
 400cf28:	400cf740 	call	400cf74 <__cxa_throw>
 400cf2c:	400d0040 	call	400d004 <__cxa_rethrow>

0400cf30 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 400cf30:	defffe04 	addi	sp,sp,-8
 400cf34:	dfc00115 	stw	ra,4(sp)
 400cf38:	dc000015 	stw	r16,0(sp)
 400cf3c:	00800044 	movi	r2,1
 400cf40:	11000a36 	bltu	r2,r4,400cf6c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
 400cf44:	28bff617 	ldw	r2,-40(r5)
 400cf48:	2c000504 	addi	r16,r5,20
 400cf4c:	10000226 	beq	r2,zero,400cf58 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
 400cf50:	8009883a 	mov	r4,r16
 400cf54:	103ee83a 	callr	r2
 400cf58:	8009883a 	mov	r4,r16
 400cf5c:	dfc00117 	ldw	ra,4(sp)
 400cf60:	dc000017 	ldw	r16,0(sp)
 400cf64:	dec00204 	addi	sp,sp,8
 400cf68:	400d3d81 	jmpi	400d3d8 <__cxa_free_exception>
 400cf6c:	293ff817 	ldw	r4,-32(r5)
 400cf70:	400bd980 	call	400bd98 <_ZN10__cxxabiv111__terminateEPFvvE>

0400cf74 <__cxa_throw>:
 400cf74:	defffb04 	addi	sp,sp,-20
 400cf78:	dfc00415 	stw	ra,16(sp)
 400cf7c:	dcc00315 	stw	r19,12(sp)
 400cf80:	dc800215 	stw	r18,8(sp)
 400cf84:	2827883a 	mov	r19,r5
 400cf88:	3025883a 	mov	r18,r6
 400cf8c:	dc400115 	stw	r17,4(sp)
 400cf90:	dc000015 	stw	r16,0(sp)
 400cf94:	2021883a 	mov	r16,r4
 400cf98:	400d5400 	call	400d540 <__cxa_get_globals>
 400cf9c:	10c00117 	ldw	r3,4(r2)
 400cfa0:	847ffb04 	addi	r17,r16,-20
 400cfa4:	18c00044 	addi	r3,r3,1
 400cfa8:	10c00115 	stw	r3,4(r2)
 400cfac:	00800044 	movi	r2,1
 400cfb0:	80bfef15 	stw	r2,-68(r16)
 400cfb4:	84fff015 	stw	r19,-64(r16)
 400cfb8:	84bff115 	stw	r18,-60(r16)
 400cfbc:	400bed00 	call	400bed0 <_ZSt14get_unexpectedv>
 400cfc0:	80bff215 	stw	r2,-56(r16)
 400cfc4:	400beac0 	call	400beac <_ZSt13get_terminatev>
 400cfc8:	80bff315 	stw	r2,-52(r16)
 400cfcc:	0090caf4 	movhi	r2,17195
 400cfd0:	108ac004 	addi	r2,r2,11008
 400cfd4:	80bffb15 	stw	r2,-20(r16)
 400cfd8:	0091d3b4 	movhi	r2,18254
 400cfdc:	109550c4 	addi	r2,r2,21827
 400cfe0:	80bffc15 	stw	r2,-16(r16)
 400cfe4:	00810074 	movhi	r2,1025
 400cfe8:	10b3cc04 	addi	r2,r2,-12496
 400cfec:	8809883a 	mov	r4,r17
 400cff0:	80bffd15 	stw	r2,-12(r16)
 400cff4:	400e5e00 	call	400e5e0 <_Unwind_SjLj_RaiseException>
 400cff8:	8809883a 	mov	r4,r17
 400cffc:	400d0900 	call	400d090 <__cxa_begin_catch>
 400d000:	400be580 	call	400be58 <_ZSt9terminatev>

0400d004 <__cxa_rethrow>:
 400d004:	defffe04 	addi	sp,sp,-8
 400d008:	dfc00115 	stw	ra,4(sp)
 400d00c:	dc000015 	stw	r16,0(sp)
 400d010:	400d5400 	call	400d540 <__cxa_get_globals>
 400d014:	10c00117 	ldw	r3,4(r2)
 400d018:	11000017 	ldw	r4,0(r2)
 400d01c:	18c00044 	addi	r3,r3,1
 400d020:	10c00115 	stw	r3,4(r2)
 400d024:	20001126 	beq	r4,zero,400d06c <__cxa_rethrow+0x68>
 400d028:	21400b17 	ldw	r5,44(r4)
 400d02c:	01ef3574 	movhi	r7,48341
 400d030:	39f54004 	addi	r7,r7,-11008
 400d034:	29cf883a 	add	r7,r5,r7
 400d038:	20c00c17 	ldw	r3,48(r4)
 400d03c:	394d803a 	cmpltu	r6,r7,r5
 400d040:	016e2cb4 	movhi	r5,47282
 400d044:	296aaf04 	addi	r5,r5,-21828
 400d048:	1947883a 	add	r3,r3,r5
 400d04c:	30c7883a 	add	r3,r6,r3
 400d050:	18000726 	beq	r3,zero,400d070 <__cxa_rethrow+0x6c>
 400d054:	10000015 	stw	zero,0(r2)
 400d058:	24000b04 	addi	r16,r4,44
 400d05c:	8009883a 	mov	r4,r16
 400d060:	400e7380 	call	400e738 <_Unwind_SjLj_Resume_or_Rethrow>
 400d064:	8009883a 	mov	r4,r16
 400d068:	400d0900 	call	400d090 <__cxa_begin_catch>
 400d06c:	400be580 	call	400be58 <_ZSt9terminatev>
 400d070:	00c00044 	movi	r3,1
 400d074:	19fff736 	bltu	r3,r7,400d054 <__alt_mem_onchip_memory2_0+0xfc00bdb4>
 400d078:	20800517 	ldw	r2,20(r4)
 400d07c:	0085c83a 	sub	r2,zero,r2
 400d080:	20800515 	stw	r2,20(r4)
 400d084:	003ff406 	br	400d058 <__alt_mem_onchip_memory2_0+0xfc00bdb8>

0400d088 <__cxa_get_exception_ptr>:
 400d088:	20bfff17 	ldw	r2,-4(r4)
 400d08c:	f800283a 	ret

0400d090 <__cxa_begin_catch>:
 400d090:	defffe04 	addi	sp,sp,-8
 400d094:	dc000015 	stw	r16,0(sp)
 400d098:	dfc00115 	stw	ra,4(sp)
 400d09c:	2021883a 	mov	r16,r4
 400d0a0:	400d5400 	call	400d540 <__cxa_get_globals>
 400d0a4:	81000017 	ldw	r4,0(r16)
 400d0a8:	80c00117 	ldw	r3,4(r16)
 400d0ac:	01af3574 	movhi	r6,48341
 400d0b0:	31b54004 	addi	r6,r6,-11008
 400d0b4:	016e2cb4 	movhi	r5,47282
 400d0b8:	296aaf04 	addi	r5,r5,-21828
 400d0bc:	218d883a 	add	r6,r4,r6
 400d0c0:	3109803a 	cmpltu	r4,r6,r4
 400d0c4:	1947883a 	add	r3,r3,r5
 400d0c8:	20c7883a 	add	r3,r4,r3
 400d0cc:	817ff504 	addi	r5,r16,-44
 400d0d0:	11000017 	ldw	r4,0(r2)
 400d0d4:	18000726 	beq	r3,zero,400d0f4 <__cxa_begin_catch+0x64>
 400d0d8:	2000191e 	bne	r4,zero,400d140 <__cxa_begin_catch+0xb0>
 400d0dc:	11400015 	stw	r5,0(r2)
 400d0e0:	0005883a 	mov	r2,zero
 400d0e4:	dfc00117 	ldw	ra,4(sp)
 400d0e8:	dc000017 	ldw	r16,0(sp)
 400d0ec:	dec00204 	addi	sp,sp,8
 400d0f0:	f800283a 	ret
 400d0f4:	01c00044 	movi	r7,1
 400d0f8:	39bff736 	bltu	r7,r6,400d0d8 <__alt_mem_onchip_memory2_0+0xfc00be38>
 400d0fc:	80fffa17 	ldw	r3,-24(r16)
 400d100:	18000d16 	blt	r3,zero,400d138 <__cxa_begin_catch+0xa8>
 400d104:	18c00044 	addi	r3,r3,1
 400d108:	11800117 	ldw	r6,4(r2)
 400d10c:	80fffa15 	stw	r3,-24(r16)
 400d110:	30ffffc4 	addi	r3,r6,-1
 400d114:	10c00115 	stw	r3,4(r2)
 400d118:	21400226 	beq	r4,r5,400d124 <__cxa_begin_catch+0x94>
 400d11c:	813ff915 	stw	r4,-28(r16)
 400d120:	11400015 	stw	r5,0(r2)
 400d124:	80bfff17 	ldw	r2,-4(r16)
 400d128:	dfc00117 	ldw	ra,4(sp)
 400d12c:	dc000017 	ldw	r16,0(sp)
 400d130:	dec00204 	addi	sp,sp,8
 400d134:	f800283a 	ret
 400d138:	38c7c83a 	sub	r3,r7,r3
 400d13c:	003ff206 	br	400d108 <__alt_mem_onchip_memory2_0+0xfc00be68>
 400d140:	400be580 	call	400be58 <_ZSt9terminatev>

0400d144 <__cxa_end_catch>:
 400d144:	deffff04 	addi	sp,sp,-4
 400d148:	dfc00015 	stw	ra,0(sp)
 400d14c:	400d5340 	call	400d534 <__cxa_get_globals_fast>
 400d150:	11000017 	ldw	r4,0(r2)
 400d154:	20001426 	beq	r4,zero,400d1a8 <__cxa_end_catch+0x64>
 400d158:	21400b17 	ldw	r5,44(r4)
 400d15c:	01ef3574 	movhi	r7,48341
 400d160:	39f54004 	addi	r7,r7,-11008
 400d164:	29cf883a 	add	r7,r5,r7
 400d168:	20c00c17 	ldw	r3,48(r4)
 400d16c:	394d803a 	cmpltu	r6,r7,r5
 400d170:	016e2cb4 	movhi	r5,47282
 400d174:	296aaf04 	addi	r5,r5,-21828
 400d178:	1947883a 	add	r3,r3,r5
 400d17c:	30c7883a 	add	r3,r6,r3
 400d180:	18000c1e 	bne	r3,zero,400d1b4 <__cxa_end_catch+0x70>
 400d184:	00c00044 	movi	r3,1
 400d188:	19c00a36 	bltu	r3,r7,400d1b4 <__cxa_end_catch+0x70>
 400d18c:	20c00517 	ldw	r3,20(r4)
 400d190:	18000d16 	blt	r3,zero,400d1c8 <__cxa_end_catch+0x84>
 400d194:	18ffffc4 	addi	r3,r3,-1
 400d198:	18001026 	beq	r3,zero,400d1dc <__cxa_end_catch+0x98>
 400d19c:	00bfffc4 	movi	r2,-1
 400d1a0:	18801426 	beq	r3,r2,400d1f4 <__cxa_end_catch+0xb0>
 400d1a4:	20c00515 	stw	r3,20(r4)
 400d1a8:	dfc00017 	ldw	ra,0(sp)
 400d1ac:	dec00104 	addi	sp,sp,4
 400d1b0:	f800283a 	ret
 400d1b4:	21000b04 	addi	r4,r4,44
 400d1b8:	10000015 	stw	zero,0(r2)
 400d1bc:	dfc00017 	ldw	ra,0(sp)
 400d1c0:	dec00104 	addi	sp,sp,4
 400d1c4:	400e7841 	jmpi	400e784 <_Unwind_DeleteException>
 400d1c8:	18c00044 	addi	r3,r3,1
 400d1cc:	183ff51e 	bne	r3,zero,400d1a4 <__alt_mem_onchip_memory2_0+0xfc00bf04>
 400d1d0:	21400417 	ldw	r5,16(r4)
 400d1d4:	11400015 	stw	r5,0(r2)
 400d1d8:	003ff206 	br	400d1a4 <__alt_mem_onchip_memory2_0+0xfc00bf04>
 400d1dc:	20c00417 	ldw	r3,16(r4)
 400d1e0:	21000b04 	addi	r4,r4,44
 400d1e4:	10c00015 	stw	r3,0(r2)
 400d1e8:	dfc00017 	ldw	ra,0(sp)
 400d1ec:	dec00104 	addi	sp,sp,4
 400d1f0:	400e7841 	jmpi	400e784 <_Unwind_DeleteException>
 400d1f4:	400be580 	call	400be58 <_ZSt9terminatev>

0400d1f8 <_ZSt18uncaught_exceptionv>:
 400d1f8:	deffff04 	addi	sp,sp,-4
 400d1fc:	dfc00015 	stw	ra,0(sp)
 400d200:	400d5400 	call	400d540 <__cxa_get_globals>
 400d204:	10800117 	ldw	r2,4(r2)
 400d208:	1004c03a 	cmpne	r2,r2,zero
 400d20c:	dfc00017 	ldw	ra,0(sp)
 400d210:	dec00104 	addi	sp,sp,4
 400d214:	f800283a 	ret

0400d218 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 400d218:	018100f4 	movhi	r6,1027
 400d21c:	31b77404 	addi	r6,r6,-8752
 400d220:	31400117 	ldw	r5,4(r6)
 400d224:	223fff04 	addi	r8,r4,-4
 400d228:	227fff17 	ldw	r9,-4(r4)
 400d22c:	28001326 	beq	r5,zero,400d27c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
 400d230:	424f883a 	add	r7,r8,r9
 400d234:	29c01426 	beq	r5,r7,400d288 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
 400d238:	28c00117 	ldw	r3,4(r5)
 400d23c:	18001c26 	beq	r3,zero,400d2b0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
 400d240:	38c00336 	bltu	r7,r3,400d250 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 400d244:	00001e06 	br	400d2c0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
 400d248:	3880052e 	bgeu	r7,r2,400d260 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
 400d24c:	1007883a 	mov	r3,r2
 400d250:	18800117 	ldw	r2,4(r3)
 400d254:	29800104 	addi	r6,r5,4
 400d258:	180b883a 	mov	r5,r3
 400d25c:	103ffa1e 	bne	r2,zero,400d248 <__alt_mem_onchip_memory2_0+0xfc00bfa8>
 400d260:	19400017 	ldw	r5,0(r3)
 400d264:	194f883a 	add	r7,r3,r5
 400d268:	41c00e26 	beq	r8,r7,400d2a4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
 400d26c:	20800015 	stw	r2,0(r4)
 400d270:	30800017 	ldw	r2,0(r6)
 400d274:	12000115 	stw	r8,4(r2)
 400d278:	f800283a 	ret
 400d27c:	20000015 	stw	zero,0(r4)
 400d280:	32000115 	stw	r8,4(r6)
 400d284:	f800283a 	ret
 400d288:	28c00017 	ldw	r3,0(r5)
 400d28c:	28800117 	ldw	r2,4(r5)
 400d290:	1a53883a 	add	r9,r3,r9
 400d294:	227fff15 	stw	r9,-4(r4)
 400d298:	20800015 	stw	r2,0(r4)
 400d29c:	32000115 	stw	r8,4(r6)
 400d2a0:	f800283a 	ret
 400d2a4:	494b883a 	add	r5,r9,r5
 400d2a8:	19400015 	stw	r5,0(r3)
 400d2ac:	f800283a 	ret
 400d2b0:	0005883a 	mov	r2,zero
 400d2b4:	2807883a 	mov	r3,r5
 400d2b8:	31800104 	addi	r6,r6,4
 400d2bc:	003fe806 	br	400d260 <__alt_mem_onchip_memory2_0+0xfc00bfc0>
 400d2c0:	1805883a 	mov	r2,r3
 400d2c4:	31800104 	addi	r6,r6,4
 400d2c8:	2807883a 	mov	r3,r5
 400d2cc:	003fe406 	br	400d260 <__alt_mem_onchip_memory2_0+0xfc00bfc0>

0400d2d0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 400d2d0:	20800104 	addi	r2,r4,4
 400d2d4:	00c001c4 	movi	r3,7
 400d2d8:	1880112e 	bgeu	r3,r2,400d320 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 400d2dc:	20c9883a 	add	r4,r4,r3
 400d2e0:	00bfff04 	movi	r2,-4
 400d2e4:	208a703a 	and	r5,r4,r2
 400d2e8:	018100f4 	movhi	r6,1027
 400d2ec:	31b77404 	addi	r6,r6,-8752
 400d2f0:	30c00117 	ldw	r3,4(r6)
 400d2f4:	18000826 	beq	r3,zero,400d318 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 400d2f8:	19000017 	ldw	r4,0(r3)
 400d2fc:	21400436 	bltu	r4,r5,400d310 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
 400d300:	00001a06 	br	400d36c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
 400d304:	11000017 	ldw	r4,0(r2)
 400d308:	2140072e 	bgeu	r4,r5,400d328 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 400d30c:	1007883a 	mov	r3,r2
 400d310:	18800117 	ldw	r2,4(r3)
 400d314:	103ffb1e 	bne	r2,zero,400d304 <__alt_mem_onchip_memory2_0+0xfc00c064>
 400d318:	0005883a 	mov	r2,zero
 400d31c:	f800283a 	ret
 400d320:	01400204 	movi	r5,8
 400d324:	003ff006 	br	400d2e8 <__alt_mem_onchip_memory2_0+0xfc00c048>
 400d328:	18c00104 	addi	r3,r3,4
 400d32c:	2149c83a 	sub	r4,r4,r5
 400d330:	018001c4 	movi	r6,7
 400d334:	3100092e 	bgeu	r6,r4,400d35c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
 400d338:	11c00117 	ldw	r7,4(r2)
 400d33c:	114d883a 	add	r6,r2,r5
 400d340:	31000015 	stw	r4,0(r6)
 400d344:	31c00115 	stw	r7,4(r6)
 400d348:	18800017 	ldw	r2,0(r3)
 400d34c:	11400015 	stw	r5,0(r2)
 400d350:	19800015 	stw	r6,0(r3)
 400d354:	10800104 	addi	r2,r2,4
 400d358:	f800283a 	ret
 400d35c:	11000117 	ldw	r4,4(r2)
 400d360:	10800104 	addi	r2,r2,4
 400d364:	19000015 	stw	r4,0(r3)
 400d368:	f800283a 	ret
 400d36c:	1805883a 	mov	r2,r3
 400d370:	30c00104 	addi	r3,r6,4
 400d374:	003fed06 	br	400d32c <__alt_mem_onchip_memory2_0+0xfc00c08c>

0400d378 <__cxa_allocate_exception>:
 400d378:	defffd04 	addi	sp,sp,-12
 400d37c:	dc400115 	stw	r17,4(sp)
 400d380:	24401104 	addi	r17,r4,68
 400d384:	8809883a 	mov	r4,r17
 400d388:	dc000015 	stw	r16,0(sp)
 400d38c:	dfc00215 	stw	ra,8(sp)
 400d390:	400e8d80 	call	400e8d8 <malloc>
 400d394:	1021883a 	mov	r16,r2
 400d398:	10000a26 	beq	r2,zero,400d3c4 <__cxa_allocate_exception+0x4c>
 400d39c:	01801104 	movi	r6,68
 400d3a0:	000b883a 	mov	r5,zero
 400d3a4:	8009883a 	mov	r4,r16
 400d3a8:	400f2540 	call	400f254 <memset>
 400d3ac:	80801104 	addi	r2,r16,68
 400d3b0:	dfc00217 	ldw	ra,8(sp)
 400d3b4:	dc400117 	ldw	r17,4(sp)
 400d3b8:	dc000017 	ldw	r16,0(sp)
 400d3bc:	dec00304 	addi	sp,sp,12
 400d3c0:	f800283a 	ret
 400d3c4:	8809883a 	mov	r4,r17
 400d3c8:	400d2d00 	call	400d2d0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400d3cc:	1021883a 	mov	r16,r2
 400d3d0:	103ff21e 	bne	r2,zero,400d39c <__alt_mem_onchip_memory2_0+0xfc00c0fc>
 400d3d4:	400be580 	call	400be58 <_ZSt9terminatev>

0400d3d8 <__cxa_free_exception>:
 400d3d8:	00c100f4 	movhi	r3,1027
 400d3dc:	18f77404 	addi	r3,r3,-8752
 400d3e0:	18800217 	ldw	r2,8(r3)
 400d3e4:	213fef04 	addi	r4,r4,-68
 400d3e8:	1100042e 	bgeu	r2,r4,400d3fc <__cxa_free_exception+0x24>
 400d3ec:	18c00317 	ldw	r3,12(r3)
 400d3f0:	10c5883a 	add	r2,r2,r3
 400d3f4:	2080012e 	bgeu	r4,r2,400d3fc <__cxa_free_exception+0x24>
 400d3f8:	400d2181 	jmpi	400d218 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400d3fc:	400e8ec1 	jmpi	400e8ec <free>

0400d400 <__cxa_allocate_dependent_exception>:
 400d400:	defffe04 	addi	sp,sp,-8
 400d404:	01001004 	movi	r4,64
 400d408:	dc000015 	stw	r16,0(sp)
 400d40c:	dfc00115 	stw	ra,4(sp)
 400d410:	400e8d80 	call	400e8d8 <malloc>
 400d414:	1021883a 	mov	r16,r2
 400d418:	10000926 	beq	r2,zero,400d440 <__cxa_allocate_dependent_exception+0x40>
 400d41c:	01801004 	movi	r6,64
 400d420:	000b883a 	mov	r5,zero
 400d424:	8009883a 	mov	r4,r16
 400d428:	400f2540 	call	400f254 <memset>
 400d42c:	8005883a 	mov	r2,r16
 400d430:	dfc00117 	ldw	ra,4(sp)
 400d434:	dc000017 	ldw	r16,0(sp)
 400d438:	dec00204 	addi	sp,sp,8
 400d43c:	f800283a 	ret
 400d440:	01001004 	movi	r4,64
 400d444:	400d2d00 	call	400d2d0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400d448:	1021883a 	mov	r16,r2
 400d44c:	103ff31e 	bne	r2,zero,400d41c <__alt_mem_onchip_memory2_0+0xfc00c17c>
 400d450:	400be580 	call	400be58 <_ZSt9terminatev>

0400d454 <__cxa_free_dependent_exception>:
 400d454:	014100f4 	movhi	r5,1027
 400d458:	29777404 	addi	r5,r5,-8752
 400d45c:	28c00217 	ldw	r3,8(r5)
 400d460:	2005883a 	mov	r2,r4
 400d464:	1900042e 	bgeu	r3,r4,400d478 <__cxa_free_dependent_exception+0x24>
 400d468:	29400317 	ldw	r5,12(r5)
 400d46c:	1947883a 	add	r3,r3,r5
 400d470:	20c0012e 	bgeu	r4,r3,400d478 <__cxa_free_dependent_exception+0x24>
 400d474:	400d2181 	jmpi	400d218 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400d478:	1009883a 	mov	r4,r2
 400d47c:	400e8ec1 	jmpi	400e8ec <free>

0400d480 <_GLOBAL__sub_I___cxa_allocate_exception>:
 400d480:	defffd04 	addi	sp,sp,-12
 400d484:	dc400115 	stw	r17,4(sp)
 400d488:	dc000015 	stw	r16,0(sp)
 400d48c:	04424004 	movi	r17,2304
 400d490:	040100f4 	movhi	r16,1027
 400d494:	84377404 	addi	r16,r16,-8752
 400d498:	8809883a 	mov	r4,r17
 400d49c:	dfc00215 	stw	ra,8(sp)
 400d4a0:	84400315 	stw	r17,12(r16)
 400d4a4:	400e8d80 	call	400e8d8 <malloc>
 400d4a8:	80800215 	stw	r2,8(r16)
 400d4ac:	10000826 	beq	r2,zero,400d4d0 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
 400d4b0:	80800115 	stw	r2,4(r16)
 400d4b4:	14400015 	stw	r17,0(r2)
 400d4b8:	10000115 	stw	zero,4(r2)
 400d4bc:	dfc00217 	ldw	ra,8(sp)
 400d4c0:	dc400117 	ldw	r17,4(sp)
 400d4c4:	dc000017 	ldw	r16,0(sp)
 400d4c8:	dec00304 	addi	sp,sp,12
 400d4cc:	f800283a 	ret
 400d4d0:	80000315 	stw	zero,12(r16)
 400d4d4:	80000115 	stw	zero,4(r16)
 400d4d8:	003ff806 	br	400d4bc <__alt_mem_onchip_memory2_0+0xfc00c21c>

0400d4dc <__cxa_call_terminate>:
 400d4dc:	defffe04 	addi	sp,sp,-8
 400d4e0:	dfc00115 	stw	ra,4(sp)
 400d4e4:	dc000015 	stw	r16,0(sp)
 400d4e8:	20000d26 	beq	r4,zero,400d520 <__cxa_call_terminate+0x44>
 400d4ec:	2021883a 	mov	r16,r4
 400d4f0:	400d0900 	call	400d090 <__cxa_begin_catch>
 400d4f4:	80c00017 	ldw	r3,0(r16)
 400d4f8:	016f3574 	movhi	r5,48341
 400d4fc:	29754004 	addi	r5,r5,-11008
 400d500:	194b883a 	add	r5,r3,r5
 400d504:	80800117 	ldw	r2,4(r16)
 400d508:	28c9803a 	cmpltu	r4,r5,r3
 400d50c:	00ee2cb4 	movhi	r3,47282
 400d510:	18eaaf04 	addi	r3,r3,-21828
 400d514:	10c5883a 	add	r2,r2,r3
 400d518:	2085883a 	add	r2,r4,r2
 400d51c:	10000126 	beq	r2,zero,400d524 <__cxa_call_terminate+0x48>
 400d520:	400be580 	call	400be58 <_ZSt9terminatev>
 400d524:	00800044 	movi	r2,1
 400d528:	117ffd36 	bltu	r2,r5,400d520 <__alt_mem_onchip_memory2_0+0xfc00c280>
 400d52c:	813ff817 	ldw	r4,-32(r16)
 400d530:	400bd980 	call	400bd98 <_ZN10__cxxabiv111__terminateEPFvvE>

0400d534 <__cxa_get_globals_fast>:
 400d534:	008100f4 	movhi	r2,1027
 400d538:	10b72f04 	addi	r2,r2,-9028
 400d53c:	f800283a 	ret

0400d540 <__cxa_get_globals>:
 400d540:	008100f4 	movhi	r2,1027
 400d544:	10b72f04 	addi	r2,r2,-9028
 400d548:	f800283a 	ret

0400d54c <_ZNSt9exceptionD1Ev>:
 400d54c:	f800283a 	ret

0400d550 <_ZNSt13bad_exceptionD1Ev>:
 400d550:	f800283a 	ret

0400d554 <_ZNKSt9exception4whatEv>:
 400d554:	008100b4 	movhi	r2,1026
 400d558:	109d3804 	addi	r2,r2,29920
 400d55c:	f800283a 	ret

0400d560 <_ZNKSt13bad_exception4whatEv>:
 400d560:	008100b4 	movhi	r2,1026
 400d564:	109d3c04 	addi	r2,r2,29936
 400d568:	f800283a 	ret

0400d56c <_ZNSt9exceptionD0Ev>:
 400d56c:	400ba8c1 	jmpi	400ba8c <_ZdlPv>

0400d570 <_ZNSt13bad_exceptionD0Ev>:
 400d570:	400ba8c1 	jmpi	400ba8c <_ZdlPv>

0400d574 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
 400d574:	f800283a 	ret

0400d578 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
 400d578:	400ba8c1 	jmpi	400ba8c <_ZdlPv>

0400d57c <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
 400d57c:	f800283a 	ret

0400d580 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
 400d580:	400ba8c1 	jmpi	400ba8c <_ZdlPv>

0400d584 <__fixunssfsi>:
 400d584:	defffd04 	addi	sp,sp,-12
 400d588:	dc000015 	stw	r16,0(sp)
 400d58c:	0413c034 	movhi	r16,20224
 400d590:	800b883a 	mov	r5,r16
 400d594:	dc400115 	stw	r17,4(sp)
 400d598:	dfc00215 	stw	ra,8(sp)
 400d59c:	2023883a 	mov	r17,r4
 400d5a0:	400d7c00 	call	400d7c0 <__gesf2>
 400d5a4:	1000070e 	bge	r2,zero,400d5c4 <__fixunssfsi+0x40>
 400d5a8:	8809883a 	mov	r4,r17
 400d5ac:	400e1900 	call	400e190 <__fixsfsi>
 400d5b0:	dfc00217 	ldw	ra,8(sp)
 400d5b4:	dc400117 	ldw	r17,4(sp)
 400d5b8:	dc000017 	ldw	r16,0(sp)
 400d5bc:	dec00304 	addi	sp,sp,12
 400d5c0:	f800283a 	ret
 400d5c4:	800b883a 	mov	r5,r16
 400d5c8:	8809883a 	mov	r4,r17
 400d5cc:	400dcac0 	call	400dcac <__subsf3>
 400d5d0:	1009883a 	mov	r4,r2
 400d5d4:	400e1900 	call	400e190 <__fixsfsi>
 400d5d8:	00e00034 	movhi	r3,32768
 400d5dc:	10c5883a 	add	r2,r2,r3
 400d5e0:	003ff306 	br	400d5b0 <__alt_mem_onchip_memory2_0+0xfc00c310>

0400d5e4 <__divsi3>:
 400d5e4:	20001b16 	blt	r4,zero,400d654 <__divsi3+0x70>
 400d5e8:	000f883a 	mov	r7,zero
 400d5ec:	28001616 	blt	r5,zero,400d648 <__divsi3+0x64>
 400d5f0:	200d883a 	mov	r6,r4
 400d5f4:	29001a2e 	bgeu	r5,r4,400d660 <__divsi3+0x7c>
 400d5f8:	00800804 	movi	r2,32
 400d5fc:	00c00044 	movi	r3,1
 400d600:	00000106 	br	400d608 <__divsi3+0x24>
 400d604:	10000d26 	beq	r2,zero,400d63c <__divsi3+0x58>
 400d608:	294b883a 	add	r5,r5,r5
 400d60c:	10bfffc4 	addi	r2,r2,-1
 400d610:	18c7883a 	add	r3,r3,r3
 400d614:	293ffb36 	bltu	r5,r4,400d604 <__alt_mem_onchip_memory2_0+0xfc00c364>
 400d618:	0005883a 	mov	r2,zero
 400d61c:	18000726 	beq	r3,zero,400d63c <__divsi3+0x58>
 400d620:	0005883a 	mov	r2,zero
 400d624:	31400236 	bltu	r6,r5,400d630 <__divsi3+0x4c>
 400d628:	314dc83a 	sub	r6,r6,r5
 400d62c:	10c4b03a 	or	r2,r2,r3
 400d630:	1806d07a 	srli	r3,r3,1
 400d634:	280ad07a 	srli	r5,r5,1
 400d638:	183ffa1e 	bne	r3,zero,400d624 <__alt_mem_onchip_memory2_0+0xfc00c384>
 400d63c:	38000126 	beq	r7,zero,400d644 <__divsi3+0x60>
 400d640:	0085c83a 	sub	r2,zero,r2
 400d644:	f800283a 	ret
 400d648:	014bc83a 	sub	r5,zero,r5
 400d64c:	39c0005c 	xori	r7,r7,1
 400d650:	003fe706 	br	400d5f0 <__alt_mem_onchip_memory2_0+0xfc00c350>
 400d654:	0109c83a 	sub	r4,zero,r4
 400d658:	01c00044 	movi	r7,1
 400d65c:	003fe306 	br	400d5ec <__alt_mem_onchip_memory2_0+0xfc00c34c>
 400d660:	00c00044 	movi	r3,1
 400d664:	003fee06 	br	400d620 <__alt_mem_onchip_memory2_0+0xfc00c380>

0400d668 <__modsi3>:
 400d668:	20001716 	blt	r4,zero,400d6c8 <__modsi3+0x60>
 400d66c:	000f883a 	mov	r7,zero
 400d670:	2005883a 	mov	r2,r4
 400d674:	28001216 	blt	r5,zero,400d6c0 <__modsi3+0x58>
 400d678:	2900162e 	bgeu	r5,r4,400d6d4 <__modsi3+0x6c>
 400d67c:	01800804 	movi	r6,32
 400d680:	00c00044 	movi	r3,1
 400d684:	00000106 	br	400d68c <__modsi3+0x24>
 400d688:	30000a26 	beq	r6,zero,400d6b4 <__modsi3+0x4c>
 400d68c:	294b883a 	add	r5,r5,r5
 400d690:	31bfffc4 	addi	r6,r6,-1
 400d694:	18c7883a 	add	r3,r3,r3
 400d698:	293ffb36 	bltu	r5,r4,400d688 <__alt_mem_onchip_memory2_0+0xfc00c3e8>
 400d69c:	18000526 	beq	r3,zero,400d6b4 <__modsi3+0x4c>
 400d6a0:	1806d07a 	srli	r3,r3,1
 400d6a4:	11400136 	bltu	r2,r5,400d6ac <__modsi3+0x44>
 400d6a8:	1145c83a 	sub	r2,r2,r5
 400d6ac:	280ad07a 	srli	r5,r5,1
 400d6b0:	183ffb1e 	bne	r3,zero,400d6a0 <__alt_mem_onchip_memory2_0+0xfc00c400>
 400d6b4:	38000126 	beq	r7,zero,400d6bc <__modsi3+0x54>
 400d6b8:	0085c83a 	sub	r2,zero,r2
 400d6bc:	f800283a 	ret
 400d6c0:	014bc83a 	sub	r5,zero,r5
 400d6c4:	003fec06 	br	400d678 <__alt_mem_onchip_memory2_0+0xfc00c3d8>
 400d6c8:	0109c83a 	sub	r4,zero,r4
 400d6cc:	01c00044 	movi	r7,1
 400d6d0:	003fe706 	br	400d670 <__alt_mem_onchip_memory2_0+0xfc00c3d0>
 400d6d4:	00c00044 	movi	r3,1
 400d6d8:	003ff106 	br	400d6a0 <__alt_mem_onchip_memory2_0+0xfc00c400>

0400d6dc <__udivsi3>:
 400d6dc:	200d883a 	mov	r6,r4
 400d6e0:	2900152e 	bgeu	r5,r4,400d738 <__udivsi3+0x5c>
 400d6e4:	28001416 	blt	r5,zero,400d738 <__udivsi3+0x5c>
 400d6e8:	00800804 	movi	r2,32
 400d6ec:	00c00044 	movi	r3,1
 400d6f0:	00000206 	br	400d6fc <__udivsi3+0x20>
 400d6f4:	10000e26 	beq	r2,zero,400d730 <__udivsi3+0x54>
 400d6f8:	28000516 	blt	r5,zero,400d710 <__udivsi3+0x34>
 400d6fc:	294b883a 	add	r5,r5,r5
 400d700:	10bfffc4 	addi	r2,r2,-1
 400d704:	18c7883a 	add	r3,r3,r3
 400d708:	293ffa36 	bltu	r5,r4,400d6f4 <__alt_mem_onchip_memory2_0+0xfc00c454>
 400d70c:	18000826 	beq	r3,zero,400d730 <__udivsi3+0x54>
 400d710:	0005883a 	mov	r2,zero
 400d714:	31400236 	bltu	r6,r5,400d720 <__udivsi3+0x44>
 400d718:	314dc83a 	sub	r6,r6,r5
 400d71c:	10c4b03a 	or	r2,r2,r3
 400d720:	1806d07a 	srli	r3,r3,1
 400d724:	280ad07a 	srli	r5,r5,1
 400d728:	183ffa1e 	bne	r3,zero,400d714 <__alt_mem_onchip_memory2_0+0xfc00c474>
 400d72c:	f800283a 	ret
 400d730:	0005883a 	mov	r2,zero
 400d734:	f800283a 	ret
 400d738:	00c00044 	movi	r3,1
 400d73c:	003ff406 	br	400d710 <__alt_mem_onchip_memory2_0+0xfc00c470>

0400d740 <__umodsi3>:
 400d740:	2005883a 	mov	r2,r4
 400d744:	2900122e 	bgeu	r5,r4,400d790 <__umodsi3+0x50>
 400d748:	28001116 	blt	r5,zero,400d790 <__umodsi3+0x50>
 400d74c:	01800804 	movi	r6,32
 400d750:	00c00044 	movi	r3,1
 400d754:	00000206 	br	400d760 <__umodsi3+0x20>
 400d758:	30000c26 	beq	r6,zero,400d78c <__umodsi3+0x4c>
 400d75c:	28000516 	blt	r5,zero,400d774 <__umodsi3+0x34>
 400d760:	294b883a 	add	r5,r5,r5
 400d764:	31bfffc4 	addi	r6,r6,-1
 400d768:	18c7883a 	add	r3,r3,r3
 400d76c:	293ffa36 	bltu	r5,r4,400d758 <__alt_mem_onchip_memory2_0+0xfc00c4b8>
 400d770:	18000626 	beq	r3,zero,400d78c <__umodsi3+0x4c>
 400d774:	1806d07a 	srli	r3,r3,1
 400d778:	11400136 	bltu	r2,r5,400d780 <__umodsi3+0x40>
 400d77c:	1145c83a 	sub	r2,r2,r5
 400d780:	280ad07a 	srli	r5,r5,1
 400d784:	183ffb1e 	bne	r3,zero,400d774 <__alt_mem_onchip_memory2_0+0xfc00c4d4>
 400d788:	f800283a 	ret
 400d78c:	f800283a 	ret
 400d790:	00c00044 	movi	r3,1
 400d794:	003ff706 	br	400d774 <__alt_mem_onchip_memory2_0+0xfc00c4d4>

0400d798 <__mulsi3>:
 400d798:	0005883a 	mov	r2,zero
 400d79c:	20000726 	beq	r4,zero,400d7bc <__mulsi3+0x24>
 400d7a0:	20c0004c 	andi	r3,r4,1
 400d7a4:	2008d07a 	srli	r4,r4,1
 400d7a8:	18000126 	beq	r3,zero,400d7b0 <__mulsi3+0x18>
 400d7ac:	1145883a 	add	r2,r2,r5
 400d7b0:	294b883a 	add	r5,r5,r5
 400d7b4:	203ffa1e 	bne	r4,zero,400d7a0 <__alt_mem_onchip_memory2_0+0xfc00c500>
 400d7b8:	f800283a 	ret
 400d7bc:	f800283a 	ret

0400d7c0 <__gesf2>:
 400d7c0:	2004d5fa 	srli	r2,r4,23
 400d7c4:	2806d5fa 	srli	r3,r5,23
 400d7c8:	01802034 	movhi	r6,128
 400d7cc:	31bfffc4 	addi	r6,r6,-1
 400d7d0:	10803fcc 	andi	r2,r2,255
 400d7d4:	01c03fc4 	movi	r7,255
 400d7d8:	3110703a 	and	r8,r6,r4
 400d7dc:	18c03fcc 	andi	r3,r3,255
 400d7e0:	314c703a 	and	r6,r6,r5
 400d7e4:	2008d7fa 	srli	r4,r4,31
 400d7e8:	280ad7fa 	srli	r5,r5,31
 400d7ec:	11c01926 	beq	r2,r7,400d854 <__gesf2+0x94>
 400d7f0:	01c03fc4 	movi	r7,255
 400d7f4:	19c00f26 	beq	r3,r7,400d834 <__gesf2+0x74>
 400d7f8:	1000061e 	bne	r2,zero,400d814 <__gesf2+0x54>
 400d7fc:	400f003a 	cmpeq	r7,r8,zero
 400d800:	1800071e 	bne	r3,zero,400d820 <__gesf2+0x60>
 400d804:	3000061e 	bne	r6,zero,400d820 <__gesf2+0x60>
 400d808:	0005883a 	mov	r2,zero
 400d80c:	40000e1e 	bne	r8,zero,400d848 <__gesf2+0x88>
 400d810:	f800283a 	ret
 400d814:	18000a1e 	bne	r3,zero,400d840 <__gesf2+0x80>
 400d818:	30000b26 	beq	r6,zero,400d848 <__gesf2+0x88>
 400d81c:	000f883a 	mov	r7,zero
 400d820:	29403fcc 	andi	r5,r5,255
 400d824:	38000726 	beq	r7,zero,400d844 <__gesf2+0x84>
 400d828:	28000826 	beq	r5,zero,400d84c <__gesf2+0x8c>
 400d82c:	00800044 	movi	r2,1
 400d830:	f800283a 	ret
 400d834:	303ff026 	beq	r6,zero,400d7f8 <__alt_mem_onchip_memory2_0+0xfc00c558>
 400d838:	00bfff84 	movi	r2,-2
 400d83c:	f800283a 	ret
 400d840:	29403fcc 	andi	r5,r5,255
 400d844:	21400526 	beq	r4,r5,400d85c <__gesf2+0x9c>
 400d848:	203ff826 	beq	r4,zero,400d82c <__alt_mem_onchip_memory2_0+0xfc00c58c>
 400d84c:	00bfffc4 	movi	r2,-1
 400d850:	f800283a 	ret
 400d854:	403fe626 	beq	r8,zero,400d7f0 <__alt_mem_onchip_memory2_0+0xfc00c550>
 400d858:	003ff706 	br	400d838 <__alt_mem_onchip_memory2_0+0xfc00c598>
 400d85c:	18bffa16 	blt	r3,r2,400d848 <__alt_mem_onchip_memory2_0+0xfc00c5a8>
 400d860:	10c00216 	blt	r2,r3,400d86c <__gesf2+0xac>
 400d864:	323ff836 	bltu	r6,r8,400d848 <__alt_mem_onchip_memory2_0+0xfc00c5a8>
 400d868:	4180022e 	bgeu	r8,r6,400d874 <__gesf2+0xb4>
 400d86c:	203fef1e 	bne	r4,zero,400d82c <__alt_mem_onchip_memory2_0+0xfc00c58c>
 400d870:	003ff606 	br	400d84c <__alt_mem_onchip_memory2_0+0xfc00c5ac>
 400d874:	0005883a 	mov	r2,zero
 400d878:	f800283a 	ret

0400d87c <__mulsf3>:
 400d87c:	defff504 	addi	sp,sp,-44
 400d880:	dc000115 	stw	r16,4(sp)
 400d884:	2020d5fa 	srli	r16,r4,23
 400d888:	dd400615 	stw	r21,24(sp)
 400d88c:	202ad7fa 	srli	r21,r4,31
 400d890:	dc800315 	stw	r18,12(sp)
 400d894:	04802034 	movhi	r18,128
 400d898:	df000915 	stw	fp,36(sp)
 400d89c:	dd000515 	stw	r20,20(sp)
 400d8a0:	94bfffc4 	addi	r18,r18,-1
 400d8a4:	dfc00a15 	stw	ra,40(sp)
 400d8a8:	ddc00815 	stw	r23,32(sp)
 400d8ac:	dd800715 	stw	r22,28(sp)
 400d8b0:	dcc00415 	stw	r19,16(sp)
 400d8b4:	dc400215 	stw	r17,8(sp)
 400d8b8:	84003fcc 	andi	r16,r16,255
 400d8bc:	9124703a 	and	r18,r18,r4
 400d8c0:	a829883a 	mov	r20,r21
 400d8c4:	af003fcc 	andi	fp,r21,255
 400d8c8:	80005426 	beq	r16,zero,400da1c <__mulsf3+0x1a0>
 400d8cc:	00803fc4 	movi	r2,255
 400d8d0:	80802f26 	beq	r16,r2,400d990 <__mulsf3+0x114>
 400d8d4:	91002034 	orhi	r4,r18,128
 400d8d8:	202490fa 	slli	r18,r4,3
 400d8dc:	843fe044 	addi	r16,r16,-127
 400d8e0:	0023883a 	mov	r17,zero
 400d8e4:	002f883a 	mov	r23,zero
 400d8e8:	2804d5fa 	srli	r2,r5,23
 400d8ec:	282cd7fa 	srli	r22,r5,31
 400d8f0:	01002034 	movhi	r4,128
 400d8f4:	213fffc4 	addi	r4,r4,-1
 400d8f8:	10803fcc 	andi	r2,r2,255
 400d8fc:	2166703a 	and	r19,r4,r5
 400d900:	b1803fcc 	andi	r6,r22,255
 400d904:	10004c26 	beq	r2,zero,400da38 <__mulsf3+0x1bc>
 400d908:	00c03fc4 	movi	r3,255
 400d90c:	10c04726 	beq	r2,r3,400da2c <__mulsf3+0x1b0>
 400d910:	99002034 	orhi	r4,r19,128
 400d914:	202690fa 	slli	r19,r4,3
 400d918:	10bfe044 	addi	r2,r2,-127
 400d91c:	0007883a 	mov	r3,zero
 400d920:	80a1883a 	add	r16,r16,r2
 400d924:	010003c4 	movi	r4,15
 400d928:	1c44b03a 	or	r2,r3,r17
 400d92c:	b56af03a 	xor	r21,r22,r21
 400d930:	81c00044 	addi	r7,r16,1
 400d934:	20806b36 	bltu	r4,r2,400dae4 <__mulsf3+0x268>
 400d938:	100490ba 	slli	r2,r2,2
 400d93c:	01010074 	movhi	r4,1025
 400d940:	21365404 	addi	r4,r4,-9904
 400d944:	1105883a 	add	r2,r2,r4
 400d948:	10800017 	ldw	r2,0(r2)
 400d94c:	1000683a 	jmp	r2
 400d950:	0400dae4 	muli	r16,zero,875
 400d954:	0400d9a4 	muli	r16,zero,870
 400d958:	0400d9a4 	muli	r16,zero,870
 400d95c:	0400d9a0 	cmpeqi	r16,zero,870
 400d960:	0400dac8 	cmpgei	r16,zero,875
 400d964:	0400dac8 	cmpgei	r16,zero,875
 400d968:	0400dab4 	movhi	r16,874
 400d96c:	0400d9a0 	cmpeqi	r16,zero,870
 400d970:	0400dac8 	cmpgei	r16,zero,875
 400d974:	0400dab4 	movhi	r16,874
 400d978:	0400dac8 	cmpgei	r16,zero,875
 400d97c:	0400d9a0 	cmpeqi	r16,zero,870
 400d980:	0400dad4 	movui	r16,875
 400d984:	0400dad4 	movui	r16,875
 400d988:	0400dad4 	movui	r16,875
 400d98c:	0400dbe4 	muli	r16,zero,879
 400d990:	90003b1e 	bne	r18,zero,400da80 <__mulsf3+0x204>
 400d994:	04400204 	movi	r17,8
 400d998:	05c00084 	movi	r23,2
 400d99c:	003fd206 	br	400d8e8 <__alt_mem_onchip_memory2_0+0xfc00c648>
 400d9a0:	302b883a 	mov	r21,r6
 400d9a4:	00800084 	movi	r2,2
 400d9a8:	18802626 	beq	r3,r2,400da44 <__mulsf3+0x1c8>
 400d9ac:	008000c4 	movi	r2,3
 400d9b0:	1880b826 	beq	r3,r2,400dc94 <__mulsf3+0x418>
 400d9b4:	00800044 	movi	r2,1
 400d9b8:	1880af1e 	bne	r3,r2,400dc78 <__mulsf3+0x3fc>
 400d9bc:	a829883a 	mov	r20,r21
 400d9c0:	0007883a 	mov	r3,zero
 400d9c4:	0009883a 	mov	r4,zero
 400d9c8:	18803fcc 	andi	r2,r3,255
 400d9cc:	100695fa 	slli	r3,r2,23
 400d9d0:	a0803fcc 	andi	r2,r20,255
 400d9d4:	100a97fa 	slli	r5,r2,31
 400d9d8:	00802034 	movhi	r2,128
 400d9dc:	10bfffc4 	addi	r2,r2,-1
 400d9e0:	2084703a 	and	r2,r4,r2
 400d9e4:	10c4b03a 	or	r2,r2,r3
 400d9e8:	1144b03a 	or	r2,r2,r5
 400d9ec:	dfc00a17 	ldw	ra,40(sp)
 400d9f0:	df000917 	ldw	fp,36(sp)
 400d9f4:	ddc00817 	ldw	r23,32(sp)
 400d9f8:	dd800717 	ldw	r22,28(sp)
 400d9fc:	dd400617 	ldw	r21,24(sp)
 400da00:	dd000517 	ldw	r20,20(sp)
 400da04:	dcc00417 	ldw	r19,16(sp)
 400da08:	dc800317 	ldw	r18,12(sp)
 400da0c:	dc400217 	ldw	r17,8(sp)
 400da10:	dc000117 	ldw	r16,4(sp)
 400da14:	dec00b04 	addi	sp,sp,44
 400da18:	f800283a 	ret
 400da1c:	90000d1e 	bne	r18,zero,400da54 <__mulsf3+0x1d8>
 400da20:	04400104 	movi	r17,4
 400da24:	05c00044 	movi	r23,1
 400da28:	003faf06 	br	400d8e8 <__alt_mem_onchip_memory2_0+0xfc00c648>
 400da2c:	9806c03a 	cmpne	r3,r19,zero
 400da30:	18c00084 	addi	r3,r3,2
 400da34:	003fba06 	br	400d920 <__alt_mem_onchip_memory2_0+0xfc00c680>
 400da38:	9800141e 	bne	r19,zero,400da8c <__mulsf3+0x210>
 400da3c:	00c00044 	movi	r3,1
 400da40:	003fb706 	br	400d920 <__alt_mem_onchip_memory2_0+0xfc00c680>
 400da44:	a829883a 	mov	r20,r21
 400da48:	00ffffc4 	movi	r3,-1
 400da4c:	0009883a 	mov	r4,zero
 400da50:	003fdd06 	br	400d9c8 <__alt_mem_onchip_memory2_0+0xfc00c728>
 400da54:	9009883a 	mov	r4,r18
 400da58:	d9400015 	stw	r5,0(sp)
 400da5c:	400e8100 	call	400e810 <__clzsi2>
 400da60:	10fffec4 	addi	r3,r2,-5
 400da64:	10801d84 	addi	r2,r2,118
 400da68:	90e4983a 	sll	r18,r18,r3
 400da6c:	00a1c83a 	sub	r16,zero,r2
 400da70:	0023883a 	mov	r17,zero
 400da74:	002f883a 	mov	r23,zero
 400da78:	d9400017 	ldw	r5,0(sp)
 400da7c:	003f9a06 	br	400d8e8 <__alt_mem_onchip_memory2_0+0xfc00c648>
 400da80:	04400304 	movi	r17,12
 400da84:	05c000c4 	movi	r23,3
 400da88:	003f9706 	br	400d8e8 <__alt_mem_onchip_memory2_0+0xfc00c648>
 400da8c:	9809883a 	mov	r4,r19
 400da90:	d9800015 	stw	r6,0(sp)
 400da94:	400e8100 	call	400e810 <__clzsi2>
 400da98:	10fffec4 	addi	r3,r2,-5
 400da9c:	10801d84 	addi	r2,r2,118
 400daa0:	98e6983a 	sll	r19,r19,r3
 400daa4:	0085c83a 	sub	r2,zero,r2
 400daa8:	0007883a 	mov	r3,zero
 400daac:	d9800017 	ldw	r6,0(sp)
 400dab0:	003f9b06 	br	400d920 <__alt_mem_onchip_memory2_0+0xfc00c680>
 400dab4:	01002034 	movhi	r4,128
 400dab8:	0029883a 	mov	r20,zero
 400dabc:	213fffc4 	addi	r4,r4,-1
 400dac0:	00ffffc4 	movi	r3,-1
 400dac4:	003fc006 	br	400d9c8 <__alt_mem_onchip_memory2_0+0xfc00c728>
 400dac8:	9027883a 	mov	r19,r18
 400dacc:	b807883a 	mov	r3,r23
 400dad0:	003fb406 	br	400d9a4 <__alt_mem_onchip_memory2_0+0xfc00c704>
 400dad4:	9027883a 	mov	r19,r18
 400dad8:	e02b883a 	mov	r21,fp
 400dadc:	b807883a 	mov	r3,r23
 400dae0:	003fb006 	br	400d9a4 <__alt_mem_onchip_memory2_0+0xfc00c704>
 400dae4:	9028d43a 	srli	r20,r18,16
 400dae8:	982cd43a 	srli	r22,r19,16
 400daec:	94bfffcc 	andi	r18,r18,65535
 400daf0:	9cffffcc 	andi	r19,r19,65535
 400daf4:	980b883a 	mov	r5,r19
 400daf8:	9009883a 	mov	r4,r18
 400dafc:	d9c00015 	stw	r7,0(sp)
 400db00:	400d7980 	call	400d798 <__mulsi3>
 400db04:	a00b883a 	mov	r5,r20
 400db08:	9809883a 	mov	r4,r19
 400db0c:	1023883a 	mov	r17,r2
 400db10:	400d7980 	call	400d798 <__mulsi3>
 400db14:	a009883a 	mov	r4,r20
 400db18:	b00b883a 	mov	r5,r22
 400db1c:	1027883a 	mov	r19,r2
 400db20:	400d7980 	call	400d798 <__mulsi3>
 400db24:	b00b883a 	mov	r5,r22
 400db28:	9009883a 	mov	r4,r18
 400db2c:	1029883a 	mov	r20,r2
 400db30:	400d7980 	call	400d798 <__mulsi3>
 400db34:	8806d43a 	srli	r3,r17,16
 400db38:	14c5883a 	add	r2,r2,r19
 400db3c:	d9c00017 	ldw	r7,0(sp)
 400db40:	1885883a 	add	r2,r3,r2
 400db44:	14c0022e 	bgeu	r2,r19,400db50 <__mulsf3+0x2d4>
 400db48:	00c00074 	movhi	r3,1
 400db4c:	a0e9883a 	add	r20,r20,r3
 400db50:	1026943a 	slli	r19,r2,16
 400db54:	8c7fffcc 	andi	r17,r17,65535
 400db58:	1004d43a 	srli	r2,r2,16
 400db5c:	9c63883a 	add	r17,r19,r17
 400db60:	882691ba 	slli	r19,r17,6
 400db64:	1505883a 	add	r2,r2,r20
 400db68:	8822d6ba 	srli	r17,r17,26
 400db6c:	100891ba 	slli	r4,r2,6
 400db70:	9826c03a 	cmpne	r19,r19,zero
 400db74:	9c62b03a 	or	r17,r19,r17
 400db78:	8926b03a 	or	r19,r17,r4
 400db7c:	9882002c 	andhi	r2,r19,2048
 400db80:	10000426 	beq	r2,zero,400db94 <__mulsf3+0x318>
 400db84:	9804d07a 	srli	r2,r19,1
 400db88:	9900004c 	andi	r4,r19,1
 400db8c:	3821883a 	mov	r16,r7
 400db90:	1126b03a 	or	r19,r2,r4
 400db94:	80c01fc4 	addi	r3,r16,127
 400db98:	00c0210e 	bge	zero,r3,400dc20 <__mulsf3+0x3a4>
 400db9c:	988001cc 	andi	r2,r19,7
 400dba0:	10000426 	beq	r2,zero,400dbb4 <__mulsf3+0x338>
 400dba4:	988003cc 	andi	r2,r19,15
 400dba8:	01000104 	movi	r4,4
 400dbac:	11000126 	beq	r2,r4,400dbb4 <__mulsf3+0x338>
 400dbb0:	9927883a 	add	r19,r19,r4
 400dbb4:	9882002c 	andhi	r2,r19,2048
 400dbb8:	10000426 	beq	r2,zero,400dbcc <__mulsf3+0x350>
 400dbbc:	00be0034 	movhi	r2,63488
 400dbc0:	10bfffc4 	addi	r2,r2,-1
 400dbc4:	80c02004 	addi	r3,r16,128
 400dbc8:	98a6703a 	and	r19,r19,r2
 400dbcc:	00803f84 	movi	r2,254
 400dbd0:	10ff9c16 	blt	r2,r3,400da44 <__alt_mem_onchip_memory2_0+0xfc00c7a4>
 400dbd4:	980891ba 	slli	r4,r19,6
 400dbd8:	a829883a 	mov	r20,r21
 400dbdc:	2008d27a 	srli	r4,r4,9
 400dbe0:	003f7906 	br	400d9c8 <__alt_mem_onchip_memory2_0+0xfc00c728>
 400dbe4:	9080102c 	andhi	r2,r18,64
 400dbe8:	10000826 	beq	r2,zero,400dc0c <__mulsf3+0x390>
 400dbec:	9880102c 	andhi	r2,r19,64
 400dbf0:	1000061e 	bne	r2,zero,400dc0c <__mulsf3+0x390>
 400dbf4:	00802034 	movhi	r2,128
 400dbf8:	99001034 	orhi	r4,r19,64
 400dbfc:	10bfffc4 	addi	r2,r2,-1
 400dc00:	b029883a 	mov	r20,r22
 400dc04:	2088703a 	and	r4,r4,r2
 400dc08:	003fad06 	br	400dac0 <__alt_mem_onchip_memory2_0+0xfc00c820>
 400dc0c:	00802034 	movhi	r2,128
 400dc10:	91001034 	orhi	r4,r18,64
 400dc14:	10bfffc4 	addi	r2,r2,-1
 400dc18:	2088703a 	and	r4,r4,r2
 400dc1c:	003fa806 	br	400dac0 <__alt_mem_onchip_memory2_0+0xfc00c820>
 400dc20:	00800044 	movi	r2,1
 400dc24:	10c7c83a 	sub	r3,r2,r3
 400dc28:	008006c4 	movi	r2,27
 400dc2c:	10ff6316 	blt	r2,r3,400d9bc <__alt_mem_onchip_memory2_0+0xfc00c71c>
 400dc30:	00800804 	movi	r2,32
 400dc34:	10c5c83a 	sub	r2,r2,r3
 400dc38:	9884983a 	sll	r2,r19,r2
 400dc3c:	98c6d83a 	srl	r3,r19,r3
 400dc40:	1004c03a 	cmpne	r2,r2,zero
 400dc44:	1884b03a 	or	r2,r3,r2
 400dc48:	10c001cc 	andi	r3,r2,7
 400dc4c:	18000426 	beq	r3,zero,400dc60 <__mulsf3+0x3e4>
 400dc50:	10c003cc 	andi	r3,r2,15
 400dc54:	01000104 	movi	r4,4
 400dc58:	19000126 	beq	r3,r4,400dc60 <__mulsf3+0x3e4>
 400dc5c:	1105883a 	add	r2,r2,r4
 400dc60:	10c1002c 	andhi	r3,r2,1024
 400dc64:	18000626 	beq	r3,zero,400dc80 <__mulsf3+0x404>
 400dc68:	a829883a 	mov	r20,r21
 400dc6c:	00c00044 	movi	r3,1
 400dc70:	0009883a 	mov	r4,zero
 400dc74:	003f5406 	br	400d9c8 <__alt_mem_onchip_memory2_0+0xfc00c728>
 400dc78:	3821883a 	mov	r16,r7
 400dc7c:	003fc506 	br	400db94 <__alt_mem_onchip_memory2_0+0xfc00c8f4>
 400dc80:	100491ba 	slli	r2,r2,6
 400dc84:	a829883a 	mov	r20,r21
 400dc88:	0007883a 	mov	r3,zero
 400dc8c:	1008d27a 	srli	r4,r2,9
 400dc90:	003f4d06 	br	400d9c8 <__alt_mem_onchip_memory2_0+0xfc00c728>
 400dc94:	00802034 	movhi	r2,128
 400dc98:	99001034 	orhi	r4,r19,64
 400dc9c:	10bfffc4 	addi	r2,r2,-1
 400dca0:	a829883a 	mov	r20,r21
 400dca4:	2088703a 	and	r4,r4,r2
 400dca8:	003f8506 	br	400dac0 <__alt_mem_onchip_memory2_0+0xfc00c820>

0400dcac <__subsf3>:
 400dcac:	defffc04 	addi	sp,sp,-16
 400dcb0:	280cd5fa 	srli	r6,r5,23
 400dcb4:	dc000015 	stw	r16,0(sp)
 400dcb8:	01c02034 	movhi	r7,128
 400dcbc:	2020d5fa 	srli	r16,r4,23
 400dcc0:	39ffffc4 	addi	r7,r7,-1
 400dcc4:	3906703a 	and	r3,r7,r4
 400dcc8:	dc400115 	stw	r17,4(sp)
 400dccc:	394e703a 	and	r7,r7,r5
 400dcd0:	2022d7fa 	srli	r17,r4,31
 400dcd4:	dfc00315 	stw	ra,12(sp)
 400dcd8:	dc800215 	stw	r18,8(sp)
 400dcdc:	31803fcc 	andi	r6,r6,255
 400dce0:	01003fc4 	movi	r4,255
 400dce4:	84003fcc 	andi	r16,r16,255
 400dce8:	180690fa 	slli	r3,r3,3
 400dcec:	2804d7fa 	srli	r2,r5,31
 400dcf0:	380e90fa 	slli	r7,r7,3
 400dcf4:	31006d26 	beq	r6,r4,400deac <__subsf3+0x200>
 400dcf8:	1080005c 	xori	r2,r2,1
 400dcfc:	8189c83a 	sub	r4,r16,r6
 400dd00:	14404f26 	beq	r2,r17,400de40 <__subsf3+0x194>
 400dd04:	0100770e 	bge	zero,r4,400dee4 <__subsf3+0x238>
 400dd08:	30001e1e 	bne	r6,zero,400dd84 <__subsf3+0xd8>
 400dd0c:	38006a1e 	bne	r7,zero,400deb8 <__subsf3+0x20c>
 400dd10:	188001cc 	andi	r2,r3,7
 400dd14:	10000426 	beq	r2,zero,400dd28 <__subsf3+0x7c>
 400dd18:	188003cc 	andi	r2,r3,15
 400dd1c:	01000104 	movi	r4,4
 400dd20:	11000126 	beq	r2,r4,400dd28 <__subsf3+0x7c>
 400dd24:	1907883a 	add	r3,r3,r4
 400dd28:	1881002c 	andhi	r2,r3,1024
 400dd2c:	10003926 	beq	r2,zero,400de14 <__subsf3+0x168>
 400dd30:	84000044 	addi	r16,r16,1
 400dd34:	00803fc4 	movi	r2,255
 400dd38:	80807526 	beq	r16,r2,400df10 <__subsf3+0x264>
 400dd3c:	180691ba 	slli	r3,r3,6
 400dd40:	8880004c 	andi	r2,r17,1
 400dd44:	180ad27a 	srli	r5,r3,9
 400dd48:	84003fcc 	andi	r16,r16,255
 400dd4c:	800695fa 	slli	r3,r16,23
 400dd50:	10803fcc 	andi	r2,r2,255
 400dd54:	01002034 	movhi	r4,128
 400dd58:	213fffc4 	addi	r4,r4,-1
 400dd5c:	100497fa 	slli	r2,r2,31
 400dd60:	2920703a 	and	r16,r5,r4
 400dd64:	80e0b03a 	or	r16,r16,r3
 400dd68:	8084b03a 	or	r2,r16,r2
 400dd6c:	dfc00317 	ldw	ra,12(sp)
 400dd70:	dc800217 	ldw	r18,8(sp)
 400dd74:	dc400117 	ldw	r17,4(sp)
 400dd78:	dc000017 	ldw	r16,0(sp)
 400dd7c:	dec00404 	addi	sp,sp,16
 400dd80:	f800283a 	ret
 400dd84:	00803fc4 	movi	r2,255
 400dd88:	80bfe126 	beq	r16,r2,400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400dd8c:	39c10034 	orhi	r7,r7,1024
 400dd90:	008006c4 	movi	r2,27
 400dd94:	11007416 	blt	r2,r4,400df68 <__subsf3+0x2bc>
 400dd98:	00800804 	movi	r2,32
 400dd9c:	1105c83a 	sub	r2,r2,r4
 400dda0:	3884983a 	sll	r2,r7,r2
 400dda4:	390ed83a 	srl	r7,r7,r4
 400dda8:	1008c03a 	cmpne	r4,r2,zero
 400ddac:	390eb03a 	or	r7,r7,r4
 400ddb0:	19c7c83a 	sub	r3,r3,r7
 400ddb4:	1881002c 	andhi	r2,r3,1024
 400ddb8:	10001426 	beq	r2,zero,400de0c <__subsf3+0x160>
 400ddbc:	04810034 	movhi	r18,1024
 400ddc0:	94bfffc4 	addi	r18,r18,-1
 400ddc4:	1ca4703a 	and	r18,r3,r18
 400ddc8:	9009883a 	mov	r4,r18
 400ddcc:	400e8100 	call	400e810 <__clzsi2>
 400ddd0:	10bffec4 	addi	r2,r2,-5
 400ddd4:	90a4983a 	sll	r18,r18,r2
 400ddd8:	14005116 	blt	r2,r16,400df20 <__subsf3+0x274>
 400dddc:	1405c83a 	sub	r2,r2,r16
 400dde0:	10c00044 	addi	r3,r2,1
 400dde4:	00800804 	movi	r2,32
 400dde8:	10c5c83a 	sub	r2,r2,r3
 400ddec:	9084983a 	sll	r2,r18,r2
 400ddf0:	90e4d83a 	srl	r18,r18,r3
 400ddf4:	0021883a 	mov	r16,zero
 400ddf8:	1006c03a 	cmpne	r3,r2,zero
 400ddfc:	90c6b03a 	or	r3,r18,r3
 400de00:	003fc306 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400de04:	2000e026 	beq	r4,zero,400e188 <__subsf3+0x4dc>
 400de08:	2007883a 	mov	r3,r4
 400de0c:	188001cc 	andi	r2,r3,7
 400de10:	103fc11e 	bne	r2,zero,400dd18 <__alt_mem_onchip_memory2_0+0xfc00ca78>
 400de14:	180ad0fa 	srli	r5,r3,3
 400de18:	00c03fc4 	movi	r3,255
 400de1c:	8880004c 	andi	r2,r17,1
 400de20:	80c0031e 	bne	r16,r3,400de30 <__subsf3+0x184>
 400de24:	28006d26 	beq	r5,zero,400dfdc <__subsf3+0x330>
 400de28:	29401034 	orhi	r5,r5,64
 400de2c:	043fffc4 	movi	r16,-1
 400de30:	00c02034 	movhi	r3,128
 400de34:	18ffffc4 	addi	r3,r3,-1
 400de38:	28ca703a 	and	r5,r5,r3
 400de3c:	003fc206 	br	400dd48 <__alt_mem_onchip_memory2_0+0xfc00caa8>
 400de40:	01003c0e 	bge	zero,r4,400df34 <__subsf3+0x288>
 400de44:	30002126 	beq	r6,zero,400decc <__subsf3+0x220>
 400de48:	01403fc4 	movi	r5,255
 400de4c:	817fb026 	beq	r16,r5,400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400de50:	39c10034 	orhi	r7,r7,1024
 400de54:	014006c4 	movi	r5,27
 400de58:	29007416 	blt	r5,r4,400e02c <__subsf3+0x380>
 400de5c:	01400804 	movi	r5,32
 400de60:	290bc83a 	sub	r5,r5,r4
 400de64:	394a983a 	sll	r5,r7,r5
 400de68:	390ed83a 	srl	r7,r7,r4
 400de6c:	2808c03a 	cmpne	r4,r5,zero
 400de70:	390eb03a 	or	r7,r7,r4
 400de74:	19c7883a 	add	r3,r3,r7
 400de78:	1901002c 	andhi	r4,r3,1024
 400de7c:	20003826 	beq	r4,zero,400df60 <__subsf3+0x2b4>
 400de80:	84000044 	addi	r16,r16,1
 400de84:	01003fc4 	movi	r4,255
 400de88:	81005426 	beq	r16,r4,400dfdc <__subsf3+0x330>
 400de8c:	1023883a 	mov	r17,r2
 400de90:	00bf0034 	movhi	r2,64512
 400de94:	10bfffc4 	addi	r2,r2,-1
 400de98:	1900004c 	andi	r4,r3,1
 400de9c:	1886703a 	and	r3,r3,r2
 400dea0:	1806d07a 	srli	r3,r3,1
 400dea4:	1906b03a 	or	r3,r3,r4
 400dea8:	003f9906 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400deac:	383f9226 	beq	r7,zero,400dcf8 <__alt_mem_onchip_memory2_0+0xfc00ca58>
 400deb0:	10803fcc 	andi	r2,r2,255
 400deb4:	003f9106 	br	400dcfc <__alt_mem_onchip_memory2_0+0xfc00ca5c>
 400deb8:	213fffc4 	addi	r4,r4,-1
 400debc:	203fbc26 	beq	r4,zero,400ddb0 <__alt_mem_onchip_memory2_0+0xfc00cb10>
 400dec0:	00803fc4 	movi	r2,255
 400dec4:	80bfb21e 	bne	r16,r2,400dd90 <__alt_mem_onchip_memory2_0+0xfc00caf0>
 400dec8:	003f9106 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400decc:	383f9026 	beq	r7,zero,400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400ded0:	213fffc4 	addi	r4,r4,-1
 400ded4:	203fe726 	beq	r4,zero,400de74 <__alt_mem_onchip_memory2_0+0xfc00cbd4>
 400ded8:	01403fc4 	movi	r5,255
 400dedc:	817fdd1e 	bne	r16,r5,400de54 <__alt_mem_onchip_memory2_0+0xfc00cbb4>
 400dee0:	003f8b06 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400dee4:	2000221e 	bne	r4,zero,400df70 <__subsf3+0x2c4>
 400dee8:	81000044 	addi	r4,r16,1
 400deec:	21003fcc 	andi	r4,r4,255
 400def0:	01400044 	movi	r5,1
 400def4:	2900470e 	bge	r5,r4,400e014 <__subsf3+0x368>
 400def8:	19e5c83a 	sub	r18,r3,r7
 400defc:	9141002c 	andhi	r5,r18,1024
 400df00:	28002d26 	beq	r5,zero,400dfb8 <__subsf3+0x30c>
 400df04:	38e5c83a 	sub	r18,r7,r3
 400df08:	1023883a 	mov	r17,r2
 400df0c:	003fae06 	br	400ddc8 <__alt_mem_onchip_memory2_0+0xfc00cb28>
 400df10:	8880004c 	andi	r2,r17,1
 400df14:	043fffc4 	movi	r16,-1
 400df18:	000b883a 	mov	r5,zero
 400df1c:	003f8a06 	br	400dd48 <__alt_mem_onchip_memory2_0+0xfc00caa8>
 400df20:	00ff0034 	movhi	r3,64512
 400df24:	18ffffc4 	addi	r3,r3,-1
 400df28:	80a1c83a 	sub	r16,r16,r2
 400df2c:	90c6703a 	and	r3,r18,r3
 400df30:	003f7706 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400df34:	2000431e 	bne	r4,zero,400e044 <__subsf3+0x398>
 400df38:	81000044 	addi	r4,r16,1
 400df3c:	21803fcc 	andi	r6,r4,255
 400df40:	01400044 	movi	r5,1
 400df44:	2980280e 	bge	r5,r6,400dfe8 <__subsf3+0x33c>
 400df48:	01403fc4 	movi	r5,255
 400df4c:	21402326 	beq	r4,r5,400dfdc <__subsf3+0x330>
 400df50:	19c7883a 	add	r3,r3,r7
 400df54:	1806d07a 	srli	r3,r3,1
 400df58:	2021883a 	mov	r16,r4
 400df5c:	003f6c06 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400df60:	1023883a 	mov	r17,r2
 400df64:	003fa906 	br	400de0c <__alt_mem_onchip_memory2_0+0xfc00cb6c>
 400df68:	01c00044 	movi	r7,1
 400df6c:	003f9006 	br	400ddb0 <__alt_mem_onchip_memory2_0+0xfc00cb10>
 400df70:	8000151e 	bne	r16,zero,400dfc8 <__subsf3+0x31c>
 400df74:	18002f26 	beq	r3,zero,400e034 <__subsf3+0x388>
 400df78:	0108303a 	nor	r4,zero,r4
 400df7c:	20000a26 	beq	r4,zero,400dfa8 <__subsf3+0x2fc>
 400df80:	01403fc4 	movi	r5,255
 400df84:	31402b26 	beq	r6,r5,400e034 <__subsf3+0x388>
 400df88:	014006c4 	movi	r5,27
 400df8c:	29006e16 	blt	r5,r4,400e148 <__subsf3+0x49c>
 400df90:	01400804 	movi	r5,32
 400df94:	290bc83a 	sub	r5,r5,r4
 400df98:	194a983a 	sll	r5,r3,r5
 400df9c:	1908d83a 	srl	r4,r3,r4
 400dfa0:	2806c03a 	cmpne	r3,r5,zero
 400dfa4:	20c6b03a 	or	r3,r4,r3
 400dfa8:	38c7c83a 	sub	r3,r7,r3
 400dfac:	3021883a 	mov	r16,r6
 400dfb0:	1023883a 	mov	r17,r2
 400dfb4:	003f7f06 	br	400ddb4 <__alt_mem_onchip_memory2_0+0xfc00cb14>
 400dfb8:	903f831e 	bne	r18,zero,400ddc8 <__alt_mem_onchip_memory2_0+0xfc00cb28>
 400dfbc:	0005883a 	mov	r2,zero
 400dfc0:	0021883a 	mov	r16,zero
 400dfc4:	003f9a06 	br	400de30 <__alt_mem_onchip_memory2_0+0xfc00cb90>
 400dfc8:	01403fc4 	movi	r5,255
 400dfcc:	31401926 	beq	r6,r5,400e034 <__subsf3+0x388>
 400dfd0:	0109c83a 	sub	r4,zero,r4
 400dfd4:	18c10034 	orhi	r3,r3,1024
 400dfd8:	003feb06 	br	400df88 <__alt_mem_onchip_memory2_0+0xfc00cce8>
 400dfdc:	043fffc4 	movi	r16,-1
 400dfe0:	000b883a 	mov	r5,zero
 400dfe4:	003f5806 	br	400dd48 <__alt_mem_onchip_memory2_0+0xfc00caa8>
 400dfe8:	8000481e 	bne	r16,zero,400e10c <__subsf3+0x460>
 400dfec:	18006226 	beq	r3,zero,400e178 <__subsf3+0x4cc>
 400dff0:	383f4726 	beq	r7,zero,400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400dff4:	19c7883a 	add	r3,r3,r7
 400dff8:	1881002c 	andhi	r2,r3,1024
 400dffc:	103f8326 	beq	r2,zero,400de0c <__alt_mem_onchip_memory2_0+0xfc00cb6c>
 400e000:	00bf0034 	movhi	r2,64512
 400e004:	10bfffc4 	addi	r2,r2,-1
 400e008:	2821883a 	mov	r16,r5
 400e00c:	1886703a 	and	r3,r3,r2
 400e010:	003f3f06 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400e014:	80001c1e 	bne	r16,zero,400e088 <__subsf3+0x3dc>
 400e018:	1800261e 	bne	r3,zero,400e0b4 <__subsf3+0x408>
 400e01c:	38004c26 	beq	r7,zero,400e150 <__subsf3+0x4a4>
 400e020:	3807883a 	mov	r3,r7
 400e024:	1023883a 	mov	r17,r2
 400e028:	003f3906 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400e02c:	01c00044 	movi	r7,1
 400e030:	003f9006 	br	400de74 <__alt_mem_onchip_memory2_0+0xfc00cbd4>
 400e034:	3807883a 	mov	r3,r7
 400e038:	3021883a 	mov	r16,r6
 400e03c:	1023883a 	mov	r17,r2
 400e040:	003f3306 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400e044:	8000161e 	bne	r16,zero,400e0a0 <__subsf3+0x3f4>
 400e048:	18002d26 	beq	r3,zero,400e100 <__subsf3+0x454>
 400e04c:	0108303a 	nor	r4,zero,r4
 400e050:	20000a26 	beq	r4,zero,400e07c <__subsf3+0x3d0>
 400e054:	01403fc4 	movi	r5,255
 400e058:	31402926 	beq	r6,r5,400e100 <__subsf3+0x454>
 400e05c:	014006c4 	movi	r5,27
 400e060:	29004716 	blt	r5,r4,400e180 <__subsf3+0x4d4>
 400e064:	01400804 	movi	r5,32
 400e068:	290bc83a 	sub	r5,r5,r4
 400e06c:	194a983a 	sll	r5,r3,r5
 400e070:	1908d83a 	srl	r4,r3,r4
 400e074:	2806c03a 	cmpne	r3,r5,zero
 400e078:	20c6b03a 	or	r3,r4,r3
 400e07c:	19c7883a 	add	r3,r3,r7
 400e080:	3021883a 	mov	r16,r6
 400e084:	003f7c06 	br	400de78 <__alt_mem_onchip_memory2_0+0xfc00cbd8>
 400e088:	1800111e 	bne	r3,zero,400e0d0 <__subsf3+0x424>
 400e08c:	38003326 	beq	r7,zero,400e15c <__subsf3+0x4b0>
 400e090:	3807883a 	mov	r3,r7
 400e094:	1023883a 	mov	r17,r2
 400e098:	04003fc4 	movi	r16,255
 400e09c:	003f1c06 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400e0a0:	01403fc4 	movi	r5,255
 400e0a4:	31401626 	beq	r6,r5,400e100 <__subsf3+0x454>
 400e0a8:	0109c83a 	sub	r4,zero,r4
 400e0ac:	18c10034 	orhi	r3,r3,1024
 400e0b0:	003fea06 	br	400e05c <__alt_mem_onchip_memory2_0+0xfc00cdbc>
 400e0b4:	383f1626 	beq	r7,zero,400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400e0b8:	19c9c83a 	sub	r4,r3,r7
 400e0bc:	2141002c 	andhi	r5,r4,1024
 400e0c0:	283f5026 	beq	r5,zero,400de04 <__alt_mem_onchip_memory2_0+0xfc00cb64>
 400e0c4:	38c7c83a 	sub	r3,r7,r3
 400e0c8:	1023883a 	mov	r17,r2
 400e0cc:	003f1006 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400e0d0:	38001b26 	beq	r7,zero,400e140 <__subsf3+0x494>
 400e0d4:	1806d0fa 	srli	r3,r3,3
 400e0d8:	1900102c 	andhi	r4,r3,64
 400e0dc:	20000526 	beq	r4,zero,400e0f4 <__subsf3+0x448>
 400e0e0:	380ed0fa 	srli	r7,r7,3
 400e0e4:	3900102c 	andhi	r4,r7,64
 400e0e8:	2000021e 	bne	r4,zero,400e0f4 <__subsf3+0x448>
 400e0ec:	3807883a 	mov	r3,r7
 400e0f0:	1023883a 	mov	r17,r2
 400e0f4:	180690fa 	slli	r3,r3,3
 400e0f8:	04003fc4 	movi	r16,255
 400e0fc:	003f0406 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400e100:	3807883a 	mov	r3,r7
 400e104:	3021883a 	mov	r16,r6
 400e108:	003f0106 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400e10c:	18001726 	beq	r3,zero,400e16c <__subsf3+0x4c0>
 400e110:	38000b26 	beq	r7,zero,400e140 <__subsf3+0x494>
 400e114:	1806d0fa 	srli	r3,r3,3
 400e118:	1900102c 	andhi	r4,r3,64
 400e11c:	20000426 	beq	r4,zero,400e130 <__subsf3+0x484>
 400e120:	380ed0fa 	srli	r7,r7,3
 400e124:	3900102c 	andhi	r4,r7,64
 400e128:	2000011e 	bne	r4,zero,400e130 <__subsf3+0x484>
 400e12c:	3807883a 	mov	r3,r7
 400e130:	180690fa 	slli	r3,r3,3
 400e134:	1023883a 	mov	r17,r2
 400e138:	04003fc4 	movi	r16,255
 400e13c:	003ef406 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400e140:	04003fc4 	movi	r16,255
 400e144:	003ef206 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400e148:	00c00044 	movi	r3,1
 400e14c:	003f9606 	br	400dfa8 <__alt_mem_onchip_memory2_0+0xfc00cd08>
 400e150:	000b883a 	mov	r5,zero
 400e154:	0005883a 	mov	r2,zero
 400e158:	003f3506 	br	400de30 <__alt_mem_onchip_memory2_0+0xfc00cb90>
 400e15c:	01402034 	movhi	r5,128
 400e160:	297fffc4 	addi	r5,r5,-1
 400e164:	0005883a 	mov	r2,zero
 400e168:	003f2f06 	br	400de28 <__alt_mem_onchip_memory2_0+0xfc00cb88>
 400e16c:	3807883a 	mov	r3,r7
 400e170:	04003fc4 	movi	r16,255
 400e174:	003ee606 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400e178:	3807883a 	mov	r3,r7
 400e17c:	003ee406 	br	400dd10 <__alt_mem_onchip_memory2_0+0xfc00ca70>
 400e180:	00c00044 	movi	r3,1
 400e184:	003fbd06 	br	400e07c <__alt_mem_onchip_memory2_0+0xfc00cddc>
 400e188:	0005883a 	mov	r2,zero
 400e18c:	003f2806 	br	400de30 <__alt_mem_onchip_memory2_0+0xfc00cb90>

0400e190 <__fixsfsi>:
 400e190:	200ad5fa 	srli	r5,r4,23
 400e194:	00c02034 	movhi	r3,128
 400e198:	18ffffc4 	addi	r3,r3,-1
 400e19c:	29403fcc 	andi	r5,r5,255
 400e1a0:	00801f84 	movi	r2,126
 400e1a4:	1906703a 	and	r3,r3,r4
 400e1a8:	2008d7fa 	srli	r4,r4,31
 400e1ac:	11400e0e 	bge	r2,r5,400e1e8 <__fixsfsi+0x58>
 400e1b0:	00802744 	movi	r2,157
 400e1b4:	11400816 	blt	r2,r5,400e1d8 <__fixsfsi+0x48>
 400e1b8:	00802544 	movi	r2,149
 400e1bc:	18c02034 	orhi	r3,r3,128
 400e1c0:	11400b0e 	bge	r2,r5,400e1f0 <__fixsfsi+0x60>
 400e1c4:	28bfda84 	addi	r2,r5,-150
 400e1c8:	1884983a 	sll	r2,r3,r2
 400e1cc:	20000726 	beq	r4,zero,400e1ec <__fixsfsi+0x5c>
 400e1d0:	0085c83a 	sub	r2,zero,r2
 400e1d4:	f800283a 	ret
 400e1d8:	00a00034 	movhi	r2,32768
 400e1dc:	10bfffc4 	addi	r2,r2,-1
 400e1e0:	2085883a 	add	r2,r4,r2
 400e1e4:	f800283a 	ret
 400e1e8:	0005883a 	mov	r2,zero
 400e1ec:	f800283a 	ret
 400e1f0:	00802584 	movi	r2,150
 400e1f4:	1145c83a 	sub	r2,r2,r5
 400e1f8:	1884d83a 	srl	r2,r3,r2
 400e1fc:	003ff306 	br	400e1cc <__alt_mem_onchip_memory2_0+0xfc00cf2c>

0400e200 <__floatunsisf>:
 400e200:	defffe04 	addi	sp,sp,-8
 400e204:	dfc00115 	stw	ra,4(sp)
 400e208:	dc000015 	stw	r16,0(sp)
 400e20c:	20002c26 	beq	r4,zero,400e2c0 <__floatunsisf+0xc0>
 400e210:	2021883a 	mov	r16,r4
 400e214:	400e8100 	call	400e810 <__clzsi2>
 400e218:	00c02784 	movi	r3,158
 400e21c:	1887c83a 	sub	r3,r3,r2
 400e220:	01002584 	movi	r4,150
 400e224:	20c00f16 	blt	r4,r3,400e264 <__floatunsisf+0x64>
 400e228:	20c9c83a 	sub	r4,r4,r3
 400e22c:	8108983a 	sll	r4,r16,r4
 400e230:	00802034 	movhi	r2,128
 400e234:	10bfffc4 	addi	r2,r2,-1
 400e238:	2088703a 	and	r4,r4,r2
 400e23c:	18803fcc 	andi	r2,r3,255
 400e240:	100695fa 	slli	r3,r2,23
 400e244:	00802034 	movhi	r2,128
 400e248:	10bfffc4 	addi	r2,r2,-1
 400e24c:	2084703a 	and	r2,r4,r2
 400e250:	10c4b03a 	or	r2,r2,r3
 400e254:	dfc00117 	ldw	ra,4(sp)
 400e258:	dc000017 	ldw	r16,0(sp)
 400e25c:	dec00204 	addi	sp,sp,8
 400e260:	f800283a 	ret
 400e264:	01002644 	movi	r4,153
 400e268:	20c01816 	blt	r4,r3,400e2cc <__floatunsisf+0xcc>
 400e26c:	20c9c83a 	sub	r4,r4,r3
 400e270:	8108983a 	sll	r4,r16,r4
 400e274:	017f0034 	movhi	r5,64512
 400e278:	297fffc4 	addi	r5,r5,-1
 400e27c:	218001cc 	andi	r6,r4,7
 400e280:	214a703a 	and	r5,r4,r5
 400e284:	30000426 	beq	r6,zero,400e298 <__floatunsisf+0x98>
 400e288:	210003cc 	andi	r4,r4,15
 400e28c:	01800104 	movi	r6,4
 400e290:	21800126 	beq	r4,r6,400e298 <__floatunsisf+0x98>
 400e294:	298b883a 	add	r5,r5,r6
 400e298:	2901002c 	andhi	r4,r5,1024
 400e29c:	20000526 	beq	r4,zero,400e2b4 <__floatunsisf+0xb4>
 400e2a0:	00c027c4 	movi	r3,159
 400e2a4:	1887c83a 	sub	r3,r3,r2
 400e2a8:	00bf0034 	movhi	r2,64512
 400e2ac:	10bfffc4 	addi	r2,r2,-1
 400e2b0:	288a703a 	and	r5,r5,r2
 400e2b4:	280891ba 	slli	r4,r5,6
 400e2b8:	2008d27a 	srli	r4,r4,9
 400e2bc:	003fdf06 	br	400e23c <__alt_mem_onchip_memory2_0+0xfc00cf9c>
 400e2c0:	0007883a 	mov	r3,zero
 400e2c4:	0009883a 	mov	r4,zero
 400e2c8:	003fdc06 	br	400e23c <__alt_mem_onchip_memory2_0+0xfc00cf9c>
 400e2cc:	01402e44 	movi	r5,185
 400e2d0:	28cbc83a 	sub	r5,r5,r3
 400e2d4:	01000144 	movi	r4,5
 400e2d8:	2089c83a 	sub	r4,r4,r2
 400e2dc:	814a983a 	sll	r5,r16,r5
 400e2e0:	8108d83a 	srl	r4,r16,r4
 400e2e4:	2820c03a 	cmpne	r16,r5,zero
 400e2e8:	2408b03a 	or	r4,r4,r16
 400e2ec:	003fe106 	br	400e274 <__alt_mem_onchip_memory2_0+0xfc00cfd4>

0400e2f0 <_Unwind_ForcedUnwind_Phase2>:
 400e2f0:	defff404 	addi	sp,sp,-48
 400e2f4:	dd800915 	stw	r22,36(sp)
 400e2f8:	058100f4 	movhi	r22,1027
 400e2fc:	ddc00a15 	stw	r23,40(sp)
 400e300:	dd400815 	stw	r21,32(sp)
 400e304:	dd000715 	stw	r20,28(sp)
 400e308:	dcc00615 	stw	r19,24(sp)
 400e30c:	dc400415 	stw	r17,16(sp)
 400e310:	dc000315 	stw	r16,12(sp)
 400e314:	dfc00b15 	stw	ra,44(sp)
 400e318:	dc800515 	stw	r18,20(sp)
 400e31c:	2021883a 	mov	r16,r4
 400e320:	2823883a 	mov	r17,r5
 400e324:	24c00317 	ldw	r19,12(r4)
 400e328:	25000417 	ldw	r20,16(r4)
 400e32c:	28c00017 	ldw	r3,0(r5)
 400e330:	b5b73104 	addi	r22,r22,-9020
 400e334:	054001c4 	movi	r21,7
 400e338:	05c00204 	movi	r23,8
 400e33c:	00001606 	br	400e398 <_Unwind_ForcedUnwind_Phase2+0xa8>
 400e340:	81800017 	ldw	r6,0(r16)
 400e344:	81c00117 	ldw	r7,4(r16)
 400e348:	1c800617 	ldw	r18,24(r3)
 400e34c:	dd000215 	stw	r20,8(sp)
 400e350:	dc400115 	stw	r17,4(sp)
 400e354:	dc000015 	stw	r16,0(sp)
 400e358:	983ee83a 	callr	r19
 400e35c:	01400284 	movi	r5,10
 400e360:	01000044 	movi	r4,1
 400e364:	1000241e 	bne	r2,zero,400e3f8 <_Unwind_ForcedUnwind_Phase2+0x108>
 400e368:	90000726 	beq	r18,zero,400e388 <_Unwind_ForcedUnwind_Phase2+0x98>
 400e36c:	81800017 	ldw	r6,0(r16)
 400e370:	81c00117 	ldw	r7,4(r16)
 400e374:	dc400115 	stw	r17,4(sp)
 400e378:	dc000015 	stw	r16,0(sp)
 400e37c:	903ee83a 	callr	r18
 400e380:	15401f26 	beq	r2,r21,400e400 <_Unwind_ForcedUnwind_Phase2+0x110>
 400e384:	15c01c1e 	bne	r2,r23,400e3f8 <_Unwind_ForcedUnwind_Phase2+0x108>
 400e388:	88800017 	ldw	r2,0(r17)
 400e38c:	10c00017 	ldw	r3,0(r2)
 400e390:	b0c00015 	stw	r3,0(r22)
 400e394:	88c00015 	stw	r3,0(r17)
 400e398:	01400284 	movi	r5,10
 400e39c:	01000044 	movi	r4,1
 400e3a0:	183fe71e 	bne	r3,zero,400e340 <__alt_mem_onchip_memory2_0+0xfc00d0a0>
 400e3a4:	81800017 	ldw	r6,0(r16)
 400e3a8:	81c00117 	ldw	r7,4(r16)
 400e3ac:	01400684 	movi	r5,26
 400e3b0:	dd000215 	stw	r20,8(sp)
 400e3b4:	dc400115 	stw	r17,4(sp)
 400e3b8:	dc000015 	stw	r16,0(sp)
 400e3bc:	01000044 	movi	r4,1
 400e3c0:	983ee83a 	callr	r19
 400e3c4:	10000c1e 	bne	r2,zero,400e3f8 <_Unwind_ForcedUnwind_Phase2+0x108>
 400e3c8:	00800144 	movi	r2,5
 400e3cc:	dfc00b17 	ldw	ra,44(sp)
 400e3d0:	ddc00a17 	ldw	r23,40(sp)
 400e3d4:	dd800917 	ldw	r22,36(sp)
 400e3d8:	dd400817 	ldw	r21,32(sp)
 400e3dc:	dd000717 	ldw	r20,28(sp)
 400e3e0:	dcc00617 	ldw	r19,24(sp)
 400e3e4:	dc800517 	ldw	r18,20(sp)
 400e3e8:	dc400417 	ldw	r17,16(sp)
 400e3ec:	dc000317 	ldw	r16,12(sp)
 400e3f0:	dec00c04 	addi	sp,sp,48
 400e3f4:	f800283a 	ret
 400e3f8:	00800084 	movi	r2,2
 400e3fc:	003ff306 	br	400e3cc <__alt_mem_onchip_memory2_0+0xfc00d12c>
 400e400:	a805883a 	mov	r2,r21
 400e404:	003ff106 	br	400e3cc <__alt_mem_onchip_memory2_0+0xfc00d12c>

0400e408 <_Unwind_RaiseException_Phase2>:
 400e408:	28c00017 	ldw	r3,0(r5)
 400e40c:	defff804 	addi	sp,sp,-32
 400e410:	dcc00515 	stw	r19,20(sp)
 400e414:	dc800415 	stw	r18,16(sp)
 400e418:	dc400315 	stw	r17,12(sp)
 400e41c:	dc000215 	stw	r16,8(sp)
 400e420:	dfc00715 	stw	ra,28(sp)
 400e424:	dd000615 	stw	r20,24(sp)
 400e428:	2823883a 	mov	r17,r5
 400e42c:	2021883a 	mov	r16,r4
 400e430:	048001c4 	movi	r18,7
 400e434:	04c00204 	movi	r19,8
 400e438:	18001326 	beq	r3,zero,400e488 <_Unwind_RaiseException_Phase2+0x80>
 400e43c:	81000417 	ldw	r4,16(r16)
 400e440:	1a000617 	ldw	r8,24(r3)
 400e444:	19001926 	beq	r3,r4,400e4ac <_Unwind_RaiseException_Phase2+0xa4>
 400e448:	40000c26 	beq	r8,zero,400e47c <_Unwind_RaiseException_Phase2+0x74>
 400e44c:	01400084 	movi	r5,2
 400e450:	0029883a 	mov	r20,zero
 400e454:	81800017 	ldw	r6,0(r16)
 400e458:	81c00117 	ldw	r7,4(r16)
 400e45c:	01000044 	movi	r4,1
 400e460:	dc400115 	stw	r17,4(sp)
 400e464:	dc000015 	stw	r16,0(sp)
 400e468:	403ee83a 	callr	r8
 400e46c:	14801326 	beq	r2,r18,400e4bc <_Unwind_RaiseException_Phase2+0xb4>
 400e470:	14c0051e 	bne	r2,r19,400e488 <_Unwind_RaiseException_Phase2+0x80>
 400e474:	a000131e 	bne	r20,zero,400e4c4 <_Unwind_RaiseException_Phase2+0xbc>
 400e478:	88c00017 	ldw	r3,0(r17)
 400e47c:	18c00017 	ldw	r3,0(r3)
 400e480:	88c00015 	stw	r3,0(r17)
 400e484:	183fed1e 	bne	r3,zero,400e43c <__alt_mem_onchip_memory2_0+0xfc00d19c>
 400e488:	00800084 	movi	r2,2
 400e48c:	dfc00717 	ldw	ra,28(sp)
 400e490:	dd000617 	ldw	r20,24(sp)
 400e494:	dcc00517 	ldw	r19,20(sp)
 400e498:	dc800417 	ldw	r18,16(sp)
 400e49c:	dc400317 	ldw	r17,12(sp)
 400e4a0:	dc000217 	ldw	r16,8(sp)
 400e4a4:	dec00804 	addi	sp,sp,32
 400e4a8:	f800283a 	ret
 400e4ac:	40000526 	beq	r8,zero,400e4c4 <_Unwind_RaiseException_Phase2+0xbc>
 400e4b0:	01400184 	movi	r5,6
 400e4b4:	05000104 	movi	r20,4
 400e4b8:	003fe606 	br	400e454 <__alt_mem_onchip_memory2_0+0xfc00d1b4>
 400e4bc:	9005883a 	mov	r2,r18
 400e4c0:	003ff206 	br	400e48c <__alt_mem_onchip_memory2_0+0xfc00d1ec>
 400e4c4:	400e8740 	call	400e874 <abort>

0400e4c8 <uw_install_context.isra.1>:
 400e4c8:	20c00017 	ldw	r3,0(r4)
 400e4cc:	deffff04 	addi	sp,sp,-4
 400e4d0:	014100f4 	movhi	r5,1027
 400e4d4:	19000917 	ldw	r4,36(r3)
 400e4d8:	df000015 	stw	fp,0(sp)
 400e4dc:	18800804 	addi	r2,r3,32
 400e4e0:	d839883a 	mov	fp,sp
 400e4e4:	29773104 	addi	r5,r5,-9020
 400e4e8:	28c00015 	stw	r3,0(r5)
 400e4ec:	17000017 	ldw	fp,0(r2)
 400e4f0:	1ec00a17 	ldw	sp,40(r3)
 400e4f4:	2000683a 	jmp	r4

0400e4f8 <_Unwind_SjLj_Register>:
 400e4f8:	008100f4 	movhi	r2,1027
 400e4fc:	10b73104 	addi	r2,r2,-9020
 400e500:	10c00017 	ldw	r3,0(r2)
 400e504:	11000015 	stw	r4,0(r2)
 400e508:	20c00015 	stw	r3,0(r4)
 400e50c:	f800283a 	ret

0400e510 <_Unwind_SjLj_Unregister>:
 400e510:	20c00017 	ldw	r3,0(r4)
 400e514:	008100f4 	movhi	r2,1027
 400e518:	10b73104 	addi	r2,r2,-9020
 400e51c:	10c00015 	stw	r3,0(r2)
 400e520:	f800283a 	ret

0400e524 <_Unwind_GetGR>:
 400e524:	20800017 	ldw	r2,0(r4)
 400e528:	29400084 	addi	r5,r5,2
 400e52c:	294b883a 	add	r5,r5,r5
 400e530:	294b883a 	add	r5,r5,r5
 400e534:	114b883a 	add	r5,r2,r5
 400e538:	28800017 	ldw	r2,0(r5)
 400e53c:	f800283a 	ret

0400e540 <_Unwind_GetCFA>:
 400e540:	20800017 	ldw	r2,0(r4)
 400e544:	10000226 	beq	r2,zero,400e550 <_Unwind_GetCFA+0x10>
 400e548:	10800a17 	ldw	r2,40(r2)
 400e54c:	f800283a 	ret
 400e550:	0005883a 	mov	r2,zero
 400e554:	f800283a 	ret

0400e558 <_Unwind_SetGR>:
 400e558:	20800017 	ldw	r2,0(r4)
 400e55c:	29400084 	addi	r5,r5,2
 400e560:	294b883a 	add	r5,r5,r5
 400e564:	294b883a 	add	r5,r5,r5
 400e568:	114b883a 	add	r5,r2,r5
 400e56c:	29800015 	stw	r6,0(r5)
 400e570:	f800283a 	ret

0400e574 <_Unwind_GetIP>:
 400e574:	20800017 	ldw	r2,0(r4)
 400e578:	10800117 	ldw	r2,4(r2)
 400e57c:	10800044 	addi	r2,r2,1
 400e580:	f800283a 	ret

0400e584 <_Unwind_GetIPInfo>:
 400e584:	20800017 	ldw	r2,0(r4)
 400e588:	28000015 	stw	zero,0(r5)
 400e58c:	10000326 	beq	r2,zero,400e59c <_Unwind_GetIPInfo+0x18>
 400e590:	10800117 	ldw	r2,4(r2)
 400e594:	10800044 	addi	r2,r2,1
 400e598:	f800283a 	ret
 400e59c:	0005883a 	mov	r2,zero
 400e5a0:	f800283a 	ret

0400e5a4 <_Unwind_SetIP>:
 400e5a4:	20800017 	ldw	r2,0(r4)
 400e5a8:	297fffc4 	addi	r5,r5,-1
 400e5ac:	11400115 	stw	r5,4(r2)
 400e5b0:	f800283a 	ret

0400e5b4 <_Unwind_GetLanguageSpecificData>:
 400e5b4:	20800017 	ldw	r2,0(r4)
 400e5b8:	10800717 	ldw	r2,28(r2)
 400e5bc:	f800283a 	ret

0400e5c0 <_Unwind_GetRegionStart>:
 400e5c0:	0005883a 	mov	r2,zero
 400e5c4:	f800283a 	ret

0400e5c8 <_Unwind_FindEnclosingFunction>:
 400e5c8:	0005883a 	mov	r2,zero
 400e5cc:	f800283a 	ret

0400e5d0 <_Unwind_GetDataRelBase>:
 400e5d0:	0005883a 	mov	r2,zero
 400e5d4:	f800283a 	ret

0400e5d8 <_Unwind_GetTextRelBase>:
 400e5d8:	0005883a 	mov	r2,zero
 400e5dc:	f800283a 	ret

0400e5e0 <_Unwind_SjLj_RaiseException>:
 400e5e0:	008100f4 	movhi	r2,1027
 400e5e4:	defff804 	addi	sp,sp,-32
 400e5e8:	10b73104 	addi	r2,r2,-9020
 400e5ec:	dc800515 	stw	r18,20(sp)
 400e5f0:	14800017 	ldw	r18,0(r2)
 400e5f4:	dfc00715 	stw	ra,28(sp)
 400e5f8:	dcc00615 	stw	r19,24(sp)
 400e5fc:	dc400415 	stw	r17,16(sp)
 400e600:	dc000315 	stw	r16,12(sp)
 400e604:	dc800215 	stw	r18,8(sp)
 400e608:	90001426 	beq	r18,zero,400e65c <_Unwind_SjLj_RaiseException+0x7c>
 400e60c:	2021883a 	mov	r16,r4
 400e610:	9005883a 	mov	r2,r18
 400e614:	04400184 	movi	r17,6
 400e618:	04c00204 	movi	r19,8
 400e61c:	10800617 	ldw	r2,24(r2)
 400e620:	10000a26 	beq	r2,zero,400e64c <_Unwind_SjLj_RaiseException+0x6c>
 400e624:	81800017 	ldw	r6,0(r16)
 400e628:	81c00117 	ldw	r7,4(r16)
 400e62c:	01400044 	movi	r5,1
 400e630:	d8c00204 	addi	r3,sp,8
 400e634:	d8c00115 	stw	r3,4(sp)
 400e638:	dc000015 	stw	r16,0(sp)
 400e63c:	2809883a 	mov	r4,r5
 400e640:	103ee83a 	callr	r2
 400e644:	14400d26 	beq	r2,r17,400e67c <_Unwind_SjLj_RaiseException+0x9c>
 400e648:	14c0171e 	bne	r2,r19,400e6a8 <_Unwind_SjLj_RaiseException+0xc8>
 400e64c:	d8800217 	ldw	r2,8(sp)
 400e650:	10800017 	ldw	r2,0(r2)
 400e654:	d8800215 	stw	r2,8(sp)
 400e658:	103ff01e 	bne	r2,zero,400e61c <__alt_mem_onchip_memory2_0+0xfc00d37c>
 400e65c:	00800144 	movi	r2,5
 400e660:	dfc00717 	ldw	ra,28(sp)
 400e664:	dcc00617 	ldw	r19,24(sp)
 400e668:	dc800517 	ldw	r18,20(sp)
 400e66c:	dc400417 	ldw	r17,16(sp)
 400e670:	dc000317 	ldw	r16,12(sp)
 400e674:	dec00804 	addi	sp,sp,32
 400e678:	f800283a 	ret
 400e67c:	d8800217 	ldw	r2,8(sp)
 400e680:	80000315 	stw	zero,12(r16)
 400e684:	d9400204 	addi	r5,sp,8
 400e688:	80800415 	stw	r2,16(r16)
 400e68c:	8009883a 	mov	r4,r16
 400e690:	dc800215 	stw	r18,8(sp)
 400e694:	400e4080 	call	400e408 <_Unwind_RaiseException_Phase2>
 400e698:	00c001c4 	movi	r3,7
 400e69c:	10fff01e 	bne	r2,r3,400e660 <__alt_mem_onchip_memory2_0+0xfc00d3c0>
 400e6a0:	d9000204 	addi	r4,sp,8
 400e6a4:	400e4c80 	call	400e4c8 <uw_install_context.isra.1>
 400e6a8:	008000c4 	movi	r2,3
 400e6ac:	003fec06 	br	400e660 <__alt_mem_onchip_memory2_0+0xfc00d3c0>

0400e6b0 <_Unwind_SjLj_ForcedUnwind>:
 400e6b0:	00c100f4 	movhi	r3,1027
 400e6b4:	18f73104 	addi	r3,r3,-9020
 400e6b8:	defffe04 	addi	sp,sp,-8
 400e6bc:	18c00017 	ldw	r3,0(r3)
 400e6c0:	dfc00115 	stw	ra,4(sp)
 400e6c4:	21400315 	stw	r5,12(r4)
 400e6c8:	21800415 	stw	r6,16(r4)
 400e6cc:	d80b883a 	mov	r5,sp
 400e6d0:	d8c00015 	stw	r3,0(sp)
 400e6d4:	400e2f00 	call	400e2f0 <_Unwind_ForcedUnwind_Phase2>
 400e6d8:	00c001c4 	movi	r3,7
 400e6dc:	10c00326 	beq	r2,r3,400e6ec <_Unwind_SjLj_ForcedUnwind+0x3c>
 400e6e0:	dfc00117 	ldw	ra,4(sp)
 400e6e4:	dec00204 	addi	sp,sp,8
 400e6e8:	f800283a 	ret
 400e6ec:	d809883a 	mov	r4,sp
 400e6f0:	400e4c80 	call	400e4c8 <uw_install_context.isra.1>

0400e6f4 <_Unwind_SjLj_Resume>:
 400e6f4:	00c100f4 	movhi	r3,1027
 400e6f8:	18f73104 	addi	r3,r3,-9020
 400e6fc:	18c00017 	ldw	r3,0(r3)
 400e700:	20800317 	ldw	r2,12(r4)
 400e704:	defffe04 	addi	sp,sp,-8
 400e708:	dfc00115 	stw	ra,4(sp)
 400e70c:	d8c00015 	stw	r3,0(sp)
 400e710:	d80b883a 	mov	r5,sp
 400e714:	1000041e 	bne	r2,zero,400e728 <_Unwind_SjLj_Resume+0x34>
 400e718:	400e4080 	call	400e408 <_Unwind_RaiseException_Phase2>
 400e71c:	00c001c4 	movi	r3,7
 400e720:	10c00326 	beq	r2,r3,400e730 <_Unwind_SjLj_Resume+0x3c>
 400e724:	400e8740 	call	400e874 <abort>
 400e728:	400e2f00 	call	400e2f0 <_Unwind_ForcedUnwind_Phase2>
 400e72c:	003ffb06 	br	400e71c <__alt_mem_onchip_memory2_0+0xfc00d47c>
 400e730:	d809883a 	mov	r4,sp
 400e734:	400e4c80 	call	400e4c8 <uw_install_context.isra.1>

0400e738 <_Unwind_SjLj_Resume_or_Rethrow>:
 400e738:	20800317 	ldw	r2,12(r4)
 400e73c:	defffe04 	addi	sp,sp,-8
 400e740:	dfc00115 	stw	ra,4(sp)
 400e744:	1000041e 	bne	r2,zero,400e758 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
 400e748:	400e5e00 	call	400e5e0 <_Unwind_SjLj_RaiseException>
 400e74c:	dfc00117 	ldw	ra,4(sp)
 400e750:	dec00204 	addi	sp,sp,8
 400e754:	f800283a 	ret
 400e758:	008100f4 	movhi	r2,1027
 400e75c:	10b73104 	addi	r2,r2,-9020
 400e760:	10800017 	ldw	r2,0(r2)
 400e764:	d80b883a 	mov	r5,sp
 400e768:	d8800015 	stw	r2,0(sp)
 400e76c:	400e2f00 	call	400e2f0 <_Unwind_ForcedUnwind_Phase2>
 400e770:	00c001c4 	movi	r3,7
 400e774:	10c00126 	beq	r2,r3,400e77c <_Unwind_SjLj_Resume_or_Rethrow+0x44>
 400e778:	400e8740 	call	400e874 <abort>
 400e77c:	d809883a 	mov	r4,sp
 400e780:	400e4c80 	call	400e4c8 <uw_install_context.isra.1>

0400e784 <_Unwind_DeleteException>:
 400e784:	20800217 	ldw	r2,8(r4)
 400e788:	10000326 	beq	r2,zero,400e798 <_Unwind_DeleteException+0x14>
 400e78c:	200b883a 	mov	r5,r4
 400e790:	01000044 	movi	r4,1
 400e794:	1000683a 	jmp	r2
 400e798:	f800283a 	ret

0400e79c <_Unwind_Backtrace>:
 400e79c:	008100f4 	movhi	r2,1027
 400e7a0:	10b73104 	addi	r2,r2,-9020
 400e7a4:	10800017 	ldw	r2,0(r2)
 400e7a8:	defffc04 	addi	sp,sp,-16
 400e7ac:	dc400215 	stw	r17,8(sp)
 400e7b0:	dc000115 	stw	r16,4(sp)
 400e7b4:	dfc00315 	stw	ra,12(sp)
 400e7b8:	2023883a 	mov	r17,r4
 400e7bc:	2821883a 	mov	r16,r5
 400e7c0:	d8800015 	stw	r2,0(sp)
 400e7c4:	00000506 	br	400e7dc <_Unwind_Backtrace+0x40>
 400e7c8:	883ee83a 	callr	r17
 400e7cc:	10000e1e 	bne	r2,zero,400e808 <_Unwind_Backtrace+0x6c>
 400e7d0:	d8800017 	ldw	r2,0(sp)
 400e7d4:	10800017 	ldw	r2,0(r2)
 400e7d8:	d8800015 	stw	r2,0(sp)
 400e7dc:	800b883a 	mov	r5,r16
 400e7e0:	d809883a 	mov	r4,sp
 400e7e4:	103ff81e 	bne	r2,zero,400e7c8 <__alt_mem_onchip_memory2_0+0xfc00d528>
 400e7e8:	883ee83a 	callr	r17
 400e7ec:	1000061e 	bne	r2,zero,400e808 <_Unwind_Backtrace+0x6c>
 400e7f0:	00800144 	movi	r2,5
 400e7f4:	dfc00317 	ldw	ra,12(sp)
 400e7f8:	dc400217 	ldw	r17,8(sp)
 400e7fc:	dc000117 	ldw	r16,4(sp)
 400e800:	dec00404 	addi	sp,sp,16
 400e804:	f800283a 	ret
 400e808:	008000c4 	movi	r2,3
 400e80c:	003ff906 	br	400e7f4 <__alt_mem_onchip_memory2_0+0xfc00d554>

0400e810 <__clzsi2>:
 400e810:	00bfffd4 	movui	r2,65535
 400e814:	11000536 	bltu	r2,r4,400e82c <__clzsi2+0x1c>
 400e818:	00803fc4 	movi	r2,255
 400e81c:	11000f36 	bltu	r2,r4,400e85c <__clzsi2+0x4c>
 400e820:	00800804 	movi	r2,32
 400e824:	0007883a 	mov	r3,zero
 400e828:	00000506 	br	400e840 <__clzsi2+0x30>
 400e82c:	00804034 	movhi	r2,256
 400e830:	10bfffc4 	addi	r2,r2,-1
 400e834:	11000c2e 	bgeu	r2,r4,400e868 <__clzsi2+0x58>
 400e838:	00800204 	movi	r2,8
 400e83c:	00c00604 	movi	r3,24
 400e840:	20c8d83a 	srl	r4,r4,r3
 400e844:	00c100b4 	movhi	r3,1026
 400e848:	18dd7204 	addi	r3,r3,30152
 400e84c:	1909883a 	add	r4,r3,r4
 400e850:	20c00003 	ldbu	r3,0(r4)
 400e854:	10c5c83a 	sub	r2,r2,r3
 400e858:	f800283a 	ret
 400e85c:	00800604 	movi	r2,24
 400e860:	00c00204 	movi	r3,8
 400e864:	003ff606 	br	400e840 <__alt_mem_onchip_memory2_0+0xfc00d5a0>
 400e868:	00800404 	movi	r2,16
 400e86c:	1007883a 	mov	r3,r2
 400e870:	003ff306 	br	400e840 <__alt_mem_onchip_memory2_0+0xfc00d5a0>

0400e874 <abort>:
 400e874:	deffff04 	addi	sp,sp,-4
 400e878:	01000184 	movi	r4,6
 400e87c:	dfc00015 	stw	ra,0(sp)
 400e880:	400f7840 	call	400f784 <raise>
 400e884:	01000044 	movi	r4,1
 400e888:	401bbd40 	call	401bbd4 <_exit>

0400e88c <clock>:
 400e88c:	008100f4 	movhi	r2,1027
 400e890:	10aaa304 	addi	r2,r2,-21876
 400e894:	11000017 	ldw	r4,0(r2)
 400e898:	defffb04 	addi	sp,sp,-20
 400e89c:	d80b883a 	mov	r5,sp
 400e8a0:	dfc00415 	stw	ra,16(sp)
 400e8a4:	400f9a80 	call	400f9a8 <_times_r>
 400e8a8:	00ffffc4 	movi	r3,-1
 400e8ac:	10c00726 	beq	r2,r3,400e8cc <clock+0x40>
 400e8b0:	d8c00017 	ldw	r3,0(sp)
 400e8b4:	d8800117 	ldw	r2,4(sp)
 400e8b8:	1885883a 	add	r2,r3,r2
 400e8bc:	d8c00217 	ldw	r3,8(sp)
 400e8c0:	10c7883a 	add	r3,r2,r3
 400e8c4:	d8800317 	ldw	r2,12(sp)
 400e8c8:	1885883a 	add	r2,r3,r2
 400e8cc:	dfc00417 	ldw	ra,16(sp)
 400e8d0:	dec00504 	addi	sp,sp,20
 400e8d4:	f800283a 	ret

0400e8d8 <malloc>:
 400e8d8:	008100f4 	movhi	r2,1027
 400e8dc:	10aaa304 	addi	r2,r2,-21876
 400e8e0:	200b883a 	mov	r5,r4
 400e8e4:	11000017 	ldw	r4,0(r2)
 400e8e8:	400e9001 	jmpi	400e900 <_malloc_r>

0400e8ec <free>:
 400e8ec:	008100f4 	movhi	r2,1027
 400e8f0:	10aaa304 	addi	r2,r2,-21876
 400e8f4:	200b883a 	mov	r5,r4
 400e8f8:	11000017 	ldw	r4,0(r2)
 400e8fc:	4013ee41 	jmpi	4013ee4 <_free_r>

0400e900 <_malloc_r>:
 400e900:	defff504 	addi	sp,sp,-44
 400e904:	dc800315 	stw	r18,12(sp)
 400e908:	dfc00a15 	stw	ra,40(sp)
 400e90c:	df000915 	stw	fp,36(sp)
 400e910:	ddc00815 	stw	r23,32(sp)
 400e914:	dd800715 	stw	r22,28(sp)
 400e918:	dd400615 	stw	r21,24(sp)
 400e91c:	dd000515 	stw	r20,20(sp)
 400e920:	dcc00415 	stw	r19,16(sp)
 400e924:	dc400215 	stw	r17,8(sp)
 400e928:	dc000115 	stw	r16,4(sp)
 400e92c:	288002c4 	addi	r2,r5,11
 400e930:	00c00584 	movi	r3,22
 400e934:	2025883a 	mov	r18,r4
 400e938:	18807f2e 	bgeu	r3,r2,400eb38 <_malloc_r+0x238>
 400e93c:	047ffe04 	movi	r17,-8
 400e940:	1462703a 	and	r17,r2,r17
 400e944:	8800a316 	blt	r17,zero,400ebd4 <_malloc_r+0x2d4>
 400e948:	8940a236 	bltu	r17,r5,400ebd4 <_malloc_r+0x2d4>
 400e94c:	401c1f00 	call	401c1f0 <__malloc_lock>
 400e950:	00807dc4 	movi	r2,503
 400e954:	1441e92e 	bgeu	r2,r17,400f0fc <_malloc_r+0x7fc>
 400e958:	8804d27a 	srli	r2,r17,9
 400e95c:	1000a126 	beq	r2,zero,400ebe4 <_malloc_r+0x2e4>
 400e960:	00c00104 	movi	r3,4
 400e964:	18811e36 	bltu	r3,r2,400ede0 <_malloc_r+0x4e0>
 400e968:	8804d1ba 	srli	r2,r17,6
 400e96c:	12000e44 	addi	r8,r2,57
 400e970:	11c00e04 	addi	r7,r2,56
 400e974:	4209883a 	add	r4,r8,r8
 400e978:	04c100b4 	movhi	r19,1026
 400e97c:	2109883a 	add	r4,r4,r4
 400e980:	9cdf4604 	addi	r19,r19,32024
 400e984:	2109883a 	add	r4,r4,r4
 400e988:	9909883a 	add	r4,r19,r4
 400e98c:	24000117 	ldw	r16,4(r4)
 400e990:	213ffe04 	addi	r4,r4,-8
 400e994:	24009726 	beq	r4,r16,400ebf4 <_malloc_r+0x2f4>
 400e998:	80800117 	ldw	r2,4(r16)
 400e99c:	01bfff04 	movi	r6,-4
 400e9a0:	014003c4 	movi	r5,15
 400e9a4:	1184703a 	and	r2,r2,r6
 400e9a8:	1447c83a 	sub	r3,r2,r17
 400e9ac:	28c00716 	blt	r5,r3,400e9cc <_malloc_r+0xcc>
 400e9b0:	1800920e 	bge	r3,zero,400ebfc <_malloc_r+0x2fc>
 400e9b4:	84000317 	ldw	r16,12(r16)
 400e9b8:	24008e26 	beq	r4,r16,400ebf4 <_malloc_r+0x2f4>
 400e9bc:	80800117 	ldw	r2,4(r16)
 400e9c0:	1184703a 	and	r2,r2,r6
 400e9c4:	1447c83a 	sub	r3,r2,r17
 400e9c8:	28fff90e 	bge	r5,r3,400e9b0 <__alt_mem_onchip_memory2_0+0xfc00d710>
 400e9cc:	3809883a 	mov	r4,r7
 400e9d0:	018100b4 	movhi	r6,1026
 400e9d4:	9c000417 	ldw	r16,16(r19)
 400e9d8:	319f4604 	addi	r6,r6,32024
 400e9dc:	32000204 	addi	r8,r6,8
 400e9e0:	82013426 	beq	r16,r8,400eeb4 <_malloc_r+0x5b4>
 400e9e4:	80c00117 	ldw	r3,4(r16)
 400e9e8:	00bfff04 	movi	r2,-4
 400e9ec:	188e703a 	and	r7,r3,r2
 400e9f0:	3c45c83a 	sub	r2,r7,r17
 400e9f4:	00c003c4 	movi	r3,15
 400e9f8:	18811f16 	blt	r3,r2,400ee78 <_malloc_r+0x578>
 400e9fc:	32000515 	stw	r8,20(r6)
 400ea00:	32000415 	stw	r8,16(r6)
 400ea04:	10007f0e 	bge	r2,zero,400ec04 <_malloc_r+0x304>
 400ea08:	00807fc4 	movi	r2,511
 400ea0c:	11c0fd36 	bltu	r2,r7,400ee04 <_malloc_r+0x504>
 400ea10:	3806d0fa 	srli	r3,r7,3
 400ea14:	01c00044 	movi	r7,1
 400ea18:	30800117 	ldw	r2,4(r6)
 400ea1c:	19400044 	addi	r5,r3,1
 400ea20:	294b883a 	add	r5,r5,r5
 400ea24:	1807d0ba 	srai	r3,r3,2
 400ea28:	294b883a 	add	r5,r5,r5
 400ea2c:	294b883a 	add	r5,r5,r5
 400ea30:	298b883a 	add	r5,r5,r6
 400ea34:	38c6983a 	sll	r3,r7,r3
 400ea38:	29c00017 	ldw	r7,0(r5)
 400ea3c:	2a7ffe04 	addi	r9,r5,-8
 400ea40:	1886b03a 	or	r3,r3,r2
 400ea44:	82400315 	stw	r9,12(r16)
 400ea48:	81c00215 	stw	r7,8(r16)
 400ea4c:	30c00115 	stw	r3,4(r6)
 400ea50:	2c000015 	stw	r16,0(r5)
 400ea54:	3c000315 	stw	r16,12(r7)
 400ea58:	2005d0ba 	srai	r2,r4,2
 400ea5c:	01400044 	movi	r5,1
 400ea60:	288a983a 	sll	r5,r5,r2
 400ea64:	19406f36 	bltu	r3,r5,400ec24 <_malloc_r+0x324>
 400ea68:	28c4703a 	and	r2,r5,r3
 400ea6c:	10000a1e 	bne	r2,zero,400ea98 <_malloc_r+0x198>
 400ea70:	00bfff04 	movi	r2,-4
 400ea74:	294b883a 	add	r5,r5,r5
 400ea78:	2088703a 	and	r4,r4,r2
 400ea7c:	28c4703a 	and	r2,r5,r3
 400ea80:	21000104 	addi	r4,r4,4
 400ea84:	1000041e 	bne	r2,zero,400ea98 <_malloc_r+0x198>
 400ea88:	294b883a 	add	r5,r5,r5
 400ea8c:	28c4703a 	and	r2,r5,r3
 400ea90:	21000104 	addi	r4,r4,4
 400ea94:	103ffc26 	beq	r2,zero,400ea88 <__alt_mem_onchip_memory2_0+0xfc00d7e8>
 400ea98:	02bfff04 	movi	r10,-4
 400ea9c:	024003c4 	movi	r9,15
 400eaa0:	21800044 	addi	r6,r4,1
 400eaa4:	318d883a 	add	r6,r6,r6
 400eaa8:	318d883a 	add	r6,r6,r6
 400eaac:	318d883a 	add	r6,r6,r6
 400eab0:	998d883a 	add	r6,r19,r6
 400eab4:	333ffe04 	addi	r12,r6,-8
 400eab8:	2017883a 	mov	r11,r4
 400eabc:	31800104 	addi	r6,r6,4
 400eac0:	34000017 	ldw	r16,0(r6)
 400eac4:	31fffd04 	addi	r7,r6,-12
 400eac8:	81c0041e 	bne	r16,r7,400eadc <_malloc_r+0x1dc>
 400eacc:	0000fb06 	br	400eebc <_malloc_r+0x5bc>
 400ead0:	1801030e 	bge	r3,zero,400eee0 <_malloc_r+0x5e0>
 400ead4:	84000317 	ldw	r16,12(r16)
 400ead8:	81c0f826 	beq	r16,r7,400eebc <_malloc_r+0x5bc>
 400eadc:	80800117 	ldw	r2,4(r16)
 400eae0:	1284703a 	and	r2,r2,r10
 400eae4:	1447c83a 	sub	r3,r2,r17
 400eae8:	48fff90e 	bge	r9,r3,400ead0 <__alt_mem_onchip_memory2_0+0xfc00d830>
 400eaec:	80800317 	ldw	r2,12(r16)
 400eaf0:	81000217 	ldw	r4,8(r16)
 400eaf4:	89400054 	ori	r5,r17,1
 400eaf8:	81400115 	stw	r5,4(r16)
 400eafc:	20800315 	stw	r2,12(r4)
 400eb00:	11000215 	stw	r4,8(r2)
 400eb04:	8463883a 	add	r17,r16,r17
 400eb08:	9c400515 	stw	r17,20(r19)
 400eb0c:	9c400415 	stw	r17,16(r19)
 400eb10:	18800054 	ori	r2,r3,1
 400eb14:	88800115 	stw	r2,4(r17)
 400eb18:	8a000315 	stw	r8,12(r17)
 400eb1c:	8a000215 	stw	r8,8(r17)
 400eb20:	88e3883a 	add	r17,r17,r3
 400eb24:	88c00015 	stw	r3,0(r17)
 400eb28:	9009883a 	mov	r4,r18
 400eb2c:	401c2140 	call	401c214 <__malloc_unlock>
 400eb30:	80800204 	addi	r2,r16,8
 400eb34:	00001b06 	br	400eba4 <_malloc_r+0x2a4>
 400eb38:	04400404 	movi	r17,16
 400eb3c:	89402536 	bltu	r17,r5,400ebd4 <_malloc_r+0x2d4>
 400eb40:	401c1f00 	call	401c1f0 <__malloc_lock>
 400eb44:	00800184 	movi	r2,6
 400eb48:	01000084 	movi	r4,2
 400eb4c:	04c100b4 	movhi	r19,1026
 400eb50:	1085883a 	add	r2,r2,r2
 400eb54:	9cdf4604 	addi	r19,r19,32024
 400eb58:	1085883a 	add	r2,r2,r2
 400eb5c:	9885883a 	add	r2,r19,r2
 400eb60:	14000117 	ldw	r16,4(r2)
 400eb64:	10fffe04 	addi	r3,r2,-8
 400eb68:	80c0d926 	beq	r16,r3,400eed0 <_malloc_r+0x5d0>
 400eb6c:	80c00117 	ldw	r3,4(r16)
 400eb70:	81000317 	ldw	r4,12(r16)
 400eb74:	00bfff04 	movi	r2,-4
 400eb78:	1884703a 	and	r2,r3,r2
 400eb7c:	81400217 	ldw	r5,8(r16)
 400eb80:	8085883a 	add	r2,r16,r2
 400eb84:	10c00117 	ldw	r3,4(r2)
 400eb88:	29000315 	stw	r4,12(r5)
 400eb8c:	21400215 	stw	r5,8(r4)
 400eb90:	18c00054 	ori	r3,r3,1
 400eb94:	10c00115 	stw	r3,4(r2)
 400eb98:	9009883a 	mov	r4,r18
 400eb9c:	401c2140 	call	401c214 <__malloc_unlock>
 400eba0:	80800204 	addi	r2,r16,8
 400eba4:	dfc00a17 	ldw	ra,40(sp)
 400eba8:	df000917 	ldw	fp,36(sp)
 400ebac:	ddc00817 	ldw	r23,32(sp)
 400ebb0:	dd800717 	ldw	r22,28(sp)
 400ebb4:	dd400617 	ldw	r21,24(sp)
 400ebb8:	dd000517 	ldw	r20,20(sp)
 400ebbc:	dcc00417 	ldw	r19,16(sp)
 400ebc0:	dc800317 	ldw	r18,12(sp)
 400ebc4:	dc400217 	ldw	r17,8(sp)
 400ebc8:	dc000117 	ldw	r16,4(sp)
 400ebcc:	dec00b04 	addi	sp,sp,44
 400ebd0:	f800283a 	ret
 400ebd4:	00800304 	movi	r2,12
 400ebd8:	90800015 	stw	r2,0(r18)
 400ebdc:	0005883a 	mov	r2,zero
 400ebe0:	003ff006 	br	400eba4 <__alt_mem_onchip_memory2_0+0xfc00d904>
 400ebe4:	01002004 	movi	r4,128
 400ebe8:	02001004 	movi	r8,64
 400ebec:	01c00fc4 	movi	r7,63
 400ebf0:	003f6106 	br	400e978 <__alt_mem_onchip_memory2_0+0xfc00d6d8>
 400ebf4:	4009883a 	mov	r4,r8
 400ebf8:	003f7506 	br	400e9d0 <__alt_mem_onchip_memory2_0+0xfc00d730>
 400ebfc:	81000317 	ldw	r4,12(r16)
 400ec00:	003fde06 	br	400eb7c <__alt_mem_onchip_memory2_0+0xfc00d8dc>
 400ec04:	81c5883a 	add	r2,r16,r7
 400ec08:	11400117 	ldw	r5,4(r2)
 400ec0c:	9009883a 	mov	r4,r18
 400ec10:	29400054 	ori	r5,r5,1
 400ec14:	11400115 	stw	r5,4(r2)
 400ec18:	401c2140 	call	401c214 <__malloc_unlock>
 400ec1c:	80800204 	addi	r2,r16,8
 400ec20:	003fe006 	br	400eba4 <__alt_mem_onchip_memory2_0+0xfc00d904>
 400ec24:	9c000217 	ldw	r16,8(r19)
 400ec28:	00bfff04 	movi	r2,-4
 400ec2c:	85800117 	ldw	r22,4(r16)
 400ec30:	b0ac703a 	and	r22,r22,r2
 400ec34:	b4400336 	bltu	r22,r17,400ec44 <_malloc_r+0x344>
 400ec38:	b445c83a 	sub	r2,r22,r17
 400ec3c:	00c003c4 	movi	r3,15
 400ec40:	18805d16 	blt	r3,r2,400edb8 <_malloc_r+0x4b8>
 400ec44:	05c100f4 	movhi	r23,1027
 400ec48:	008100f4 	movhi	r2,1027
 400ec4c:	10b73404 	addi	r2,r2,-9008
 400ec50:	bdeaa404 	addi	r23,r23,-21872
 400ec54:	15400017 	ldw	r21,0(r2)
 400ec58:	b8c00017 	ldw	r3,0(r23)
 400ec5c:	00bfffc4 	movi	r2,-1
 400ec60:	858d883a 	add	r6,r16,r22
 400ec64:	8d6b883a 	add	r21,r17,r21
 400ec68:	1880ea26 	beq	r3,r2,400f014 <_malloc_r+0x714>
 400ec6c:	ad4403c4 	addi	r21,r21,4111
 400ec70:	00bc0004 	movi	r2,-4096
 400ec74:	a8aa703a 	and	r21,r21,r2
 400ec78:	a80b883a 	mov	r5,r21
 400ec7c:	9009883a 	mov	r4,r18
 400ec80:	d9800015 	stw	r6,0(sp)
 400ec84:	400f4dc0 	call	400f4dc <_sbrk_r>
 400ec88:	1029883a 	mov	r20,r2
 400ec8c:	00bfffc4 	movi	r2,-1
 400ec90:	d9800017 	ldw	r6,0(sp)
 400ec94:	a080e826 	beq	r20,r2,400f038 <_malloc_r+0x738>
 400ec98:	a180a636 	bltu	r20,r6,400ef34 <_malloc_r+0x634>
 400ec9c:	070100f4 	movhi	fp,1027
 400eca0:	e7377804 	addi	fp,fp,-8736
 400eca4:	e0800017 	ldw	r2,0(fp)
 400eca8:	a887883a 	add	r3,r21,r2
 400ecac:	e0c00015 	stw	r3,0(fp)
 400ecb0:	3500e626 	beq	r6,r20,400f04c <_malloc_r+0x74c>
 400ecb4:	b9000017 	ldw	r4,0(r23)
 400ecb8:	00bfffc4 	movi	r2,-1
 400ecbc:	2080ee26 	beq	r4,r2,400f078 <_malloc_r+0x778>
 400ecc0:	a185c83a 	sub	r2,r20,r6
 400ecc4:	10c5883a 	add	r2,r2,r3
 400ecc8:	e0800015 	stw	r2,0(fp)
 400eccc:	a0c001cc 	andi	r3,r20,7
 400ecd0:	1800bc26 	beq	r3,zero,400efc4 <_malloc_r+0x6c4>
 400ecd4:	a0e9c83a 	sub	r20,r20,r3
 400ecd8:	00840204 	movi	r2,4104
 400ecdc:	a5000204 	addi	r20,r20,8
 400ece0:	10c7c83a 	sub	r3,r2,r3
 400ece4:	a545883a 	add	r2,r20,r21
 400ece8:	1083ffcc 	andi	r2,r2,4095
 400ecec:	18abc83a 	sub	r21,r3,r2
 400ecf0:	a80b883a 	mov	r5,r21
 400ecf4:	9009883a 	mov	r4,r18
 400ecf8:	400f4dc0 	call	400f4dc <_sbrk_r>
 400ecfc:	00ffffc4 	movi	r3,-1
 400ed00:	10c0e126 	beq	r2,r3,400f088 <_malloc_r+0x788>
 400ed04:	1505c83a 	sub	r2,r2,r20
 400ed08:	1545883a 	add	r2,r2,r21
 400ed0c:	10800054 	ori	r2,r2,1
 400ed10:	e0c00017 	ldw	r3,0(fp)
 400ed14:	9d000215 	stw	r20,8(r19)
 400ed18:	a0800115 	stw	r2,4(r20)
 400ed1c:	a8c7883a 	add	r3,r21,r3
 400ed20:	e0c00015 	stw	r3,0(fp)
 400ed24:	84c00e26 	beq	r16,r19,400ed60 <_malloc_r+0x460>
 400ed28:	018003c4 	movi	r6,15
 400ed2c:	3580a72e 	bgeu	r6,r22,400efcc <_malloc_r+0x6cc>
 400ed30:	81400117 	ldw	r5,4(r16)
 400ed34:	013ffe04 	movi	r4,-8
 400ed38:	b0bffd04 	addi	r2,r22,-12
 400ed3c:	1104703a 	and	r2,r2,r4
 400ed40:	2900004c 	andi	r4,r5,1
 400ed44:	2088b03a 	or	r4,r4,r2
 400ed48:	81000115 	stw	r4,4(r16)
 400ed4c:	01400144 	movi	r5,5
 400ed50:	8089883a 	add	r4,r16,r2
 400ed54:	21400115 	stw	r5,4(r4)
 400ed58:	21400215 	stw	r5,8(r4)
 400ed5c:	3080cd36 	bltu	r6,r2,400f094 <_malloc_r+0x794>
 400ed60:	008100f4 	movhi	r2,1027
 400ed64:	10b73304 	addi	r2,r2,-9012
 400ed68:	11000017 	ldw	r4,0(r2)
 400ed6c:	20c0012e 	bgeu	r4,r3,400ed74 <_malloc_r+0x474>
 400ed70:	10c00015 	stw	r3,0(r2)
 400ed74:	008100f4 	movhi	r2,1027
 400ed78:	10b73204 	addi	r2,r2,-9016
 400ed7c:	11000017 	ldw	r4,0(r2)
 400ed80:	9c000217 	ldw	r16,8(r19)
 400ed84:	20c0012e 	bgeu	r4,r3,400ed8c <_malloc_r+0x48c>
 400ed88:	10c00015 	stw	r3,0(r2)
 400ed8c:	80c00117 	ldw	r3,4(r16)
 400ed90:	00bfff04 	movi	r2,-4
 400ed94:	1886703a 	and	r3,r3,r2
 400ed98:	1c45c83a 	sub	r2,r3,r17
 400ed9c:	1c400236 	bltu	r3,r17,400eda8 <_malloc_r+0x4a8>
 400eda0:	00c003c4 	movi	r3,15
 400eda4:	18800416 	blt	r3,r2,400edb8 <_malloc_r+0x4b8>
 400eda8:	9009883a 	mov	r4,r18
 400edac:	401c2140 	call	401c214 <__malloc_unlock>
 400edb0:	0005883a 	mov	r2,zero
 400edb4:	003f7b06 	br	400eba4 <__alt_mem_onchip_memory2_0+0xfc00d904>
 400edb8:	88c00054 	ori	r3,r17,1
 400edbc:	80c00115 	stw	r3,4(r16)
 400edc0:	8463883a 	add	r17,r16,r17
 400edc4:	10800054 	ori	r2,r2,1
 400edc8:	9c400215 	stw	r17,8(r19)
 400edcc:	88800115 	stw	r2,4(r17)
 400edd0:	9009883a 	mov	r4,r18
 400edd4:	401c2140 	call	401c214 <__malloc_unlock>
 400edd8:	80800204 	addi	r2,r16,8
 400eddc:	003f7106 	br	400eba4 <__alt_mem_onchip_memory2_0+0xfc00d904>
 400ede0:	00c00504 	movi	r3,20
 400ede4:	18804a2e 	bgeu	r3,r2,400ef10 <_malloc_r+0x610>
 400ede8:	00c01504 	movi	r3,84
 400edec:	18806e36 	bltu	r3,r2,400efa8 <_malloc_r+0x6a8>
 400edf0:	8804d33a 	srli	r2,r17,12
 400edf4:	12001bc4 	addi	r8,r2,111
 400edf8:	11c01b84 	addi	r7,r2,110
 400edfc:	4209883a 	add	r4,r8,r8
 400ee00:	003edd06 	br	400e978 <__alt_mem_onchip_memory2_0+0xfc00d6d8>
 400ee04:	3804d27a 	srli	r2,r7,9
 400ee08:	00c00104 	movi	r3,4
 400ee0c:	1880442e 	bgeu	r3,r2,400ef20 <_malloc_r+0x620>
 400ee10:	00c00504 	movi	r3,20
 400ee14:	18808136 	bltu	r3,r2,400f01c <_malloc_r+0x71c>
 400ee18:	11401704 	addi	r5,r2,92
 400ee1c:	10c016c4 	addi	r3,r2,91
 400ee20:	294b883a 	add	r5,r5,r5
 400ee24:	294b883a 	add	r5,r5,r5
 400ee28:	294b883a 	add	r5,r5,r5
 400ee2c:	994b883a 	add	r5,r19,r5
 400ee30:	28800017 	ldw	r2,0(r5)
 400ee34:	018100b4 	movhi	r6,1026
 400ee38:	297ffe04 	addi	r5,r5,-8
 400ee3c:	319f4604 	addi	r6,r6,32024
 400ee40:	28806526 	beq	r5,r2,400efd8 <_malloc_r+0x6d8>
 400ee44:	01bfff04 	movi	r6,-4
 400ee48:	10c00117 	ldw	r3,4(r2)
 400ee4c:	1986703a 	and	r3,r3,r6
 400ee50:	38c0022e 	bgeu	r7,r3,400ee5c <_malloc_r+0x55c>
 400ee54:	10800217 	ldw	r2,8(r2)
 400ee58:	28bffb1e 	bne	r5,r2,400ee48 <__alt_mem_onchip_memory2_0+0xfc00dba8>
 400ee5c:	11400317 	ldw	r5,12(r2)
 400ee60:	98c00117 	ldw	r3,4(r19)
 400ee64:	81400315 	stw	r5,12(r16)
 400ee68:	80800215 	stw	r2,8(r16)
 400ee6c:	2c000215 	stw	r16,8(r5)
 400ee70:	14000315 	stw	r16,12(r2)
 400ee74:	003ef806 	br	400ea58 <__alt_mem_onchip_memory2_0+0xfc00d7b8>
 400ee78:	88c00054 	ori	r3,r17,1
 400ee7c:	80c00115 	stw	r3,4(r16)
 400ee80:	8463883a 	add	r17,r16,r17
 400ee84:	34400515 	stw	r17,20(r6)
 400ee88:	34400415 	stw	r17,16(r6)
 400ee8c:	10c00054 	ori	r3,r2,1
 400ee90:	8a000315 	stw	r8,12(r17)
 400ee94:	8a000215 	stw	r8,8(r17)
 400ee98:	88c00115 	stw	r3,4(r17)
 400ee9c:	88a3883a 	add	r17,r17,r2
 400eea0:	88800015 	stw	r2,0(r17)
 400eea4:	9009883a 	mov	r4,r18
 400eea8:	401c2140 	call	401c214 <__malloc_unlock>
 400eeac:	80800204 	addi	r2,r16,8
 400eeb0:	003f3c06 	br	400eba4 <__alt_mem_onchip_memory2_0+0xfc00d904>
 400eeb4:	30c00117 	ldw	r3,4(r6)
 400eeb8:	003ee706 	br	400ea58 <__alt_mem_onchip_memory2_0+0xfc00d7b8>
 400eebc:	5ac00044 	addi	r11,r11,1
 400eec0:	588000cc 	andi	r2,r11,3
 400eec4:	31800204 	addi	r6,r6,8
 400eec8:	103efd1e 	bne	r2,zero,400eac0 <__alt_mem_onchip_memory2_0+0xfc00d820>
 400eecc:	00002406 	br	400ef60 <_malloc_r+0x660>
 400eed0:	14000317 	ldw	r16,12(r2)
 400eed4:	143f251e 	bne	r2,r16,400eb6c <__alt_mem_onchip_memory2_0+0xfc00d8cc>
 400eed8:	21000084 	addi	r4,r4,2
 400eedc:	003ebc06 	br	400e9d0 <__alt_mem_onchip_memory2_0+0xfc00d730>
 400eee0:	8085883a 	add	r2,r16,r2
 400eee4:	10c00117 	ldw	r3,4(r2)
 400eee8:	81000317 	ldw	r4,12(r16)
 400eeec:	81400217 	ldw	r5,8(r16)
 400eef0:	18c00054 	ori	r3,r3,1
 400eef4:	10c00115 	stw	r3,4(r2)
 400eef8:	29000315 	stw	r4,12(r5)
 400eefc:	21400215 	stw	r5,8(r4)
 400ef00:	9009883a 	mov	r4,r18
 400ef04:	401c2140 	call	401c214 <__malloc_unlock>
 400ef08:	80800204 	addi	r2,r16,8
 400ef0c:	003f2506 	br	400eba4 <__alt_mem_onchip_memory2_0+0xfc00d904>
 400ef10:	12001704 	addi	r8,r2,92
 400ef14:	11c016c4 	addi	r7,r2,91
 400ef18:	4209883a 	add	r4,r8,r8
 400ef1c:	003e9606 	br	400e978 <__alt_mem_onchip_memory2_0+0xfc00d6d8>
 400ef20:	3804d1ba 	srli	r2,r7,6
 400ef24:	11400e44 	addi	r5,r2,57
 400ef28:	10c00e04 	addi	r3,r2,56
 400ef2c:	294b883a 	add	r5,r5,r5
 400ef30:	003fbc06 	br	400ee24 <__alt_mem_onchip_memory2_0+0xfc00db84>
 400ef34:	84ff5926 	beq	r16,r19,400ec9c <__alt_mem_onchip_memory2_0+0xfc00d9fc>
 400ef38:	008100b4 	movhi	r2,1026
 400ef3c:	109f4604 	addi	r2,r2,32024
 400ef40:	14000217 	ldw	r16,8(r2)
 400ef44:	00bfff04 	movi	r2,-4
 400ef48:	80c00117 	ldw	r3,4(r16)
 400ef4c:	1886703a 	and	r3,r3,r2
 400ef50:	003f9106 	br	400ed98 <__alt_mem_onchip_memory2_0+0xfc00daf8>
 400ef54:	60800217 	ldw	r2,8(r12)
 400ef58:	213fffc4 	addi	r4,r4,-1
 400ef5c:	1300651e 	bne	r2,r12,400f0f4 <_malloc_r+0x7f4>
 400ef60:	208000cc 	andi	r2,r4,3
 400ef64:	633ffe04 	addi	r12,r12,-8
 400ef68:	103ffa1e 	bne	r2,zero,400ef54 <__alt_mem_onchip_memory2_0+0xfc00dcb4>
 400ef6c:	98800117 	ldw	r2,4(r19)
 400ef70:	0146303a 	nor	r3,zero,r5
 400ef74:	1884703a 	and	r2,r3,r2
 400ef78:	98800115 	stw	r2,4(r19)
 400ef7c:	294b883a 	add	r5,r5,r5
 400ef80:	117f2836 	bltu	r2,r5,400ec24 <__alt_mem_onchip_memory2_0+0xfc00d984>
 400ef84:	283f2726 	beq	r5,zero,400ec24 <__alt_mem_onchip_memory2_0+0xfc00d984>
 400ef88:	2886703a 	and	r3,r5,r2
 400ef8c:	5809883a 	mov	r4,r11
 400ef90:	183ec31e 	bne	r3,zero,400eaa0 <__alt_mem_onchip_memory2_0+0xfc00d800>
 400ef94:	294b883a 	add	r5,r5,r5
 400ef98:	2886703a 	and	r3,r5,r2
 400ef9c:	21000104 	addi	r4,r4,4
 400efa0:	183ffc26 	beq	r3,zero,400ef94 <__alt_mem_onchip_memory2_0+0xfc00dcf4>
 400efa4:	003ebe06 	br	400eaa0 <__alt_mem_onchip_memory2_0+0xfc00d800>
 400efa8:	00c05504 	movi	r3,340
 400efac:	18801236 	bltu	r3,r2,400eff8 <_malloc_r+0x6f8>
 400efb0:	8804d3fa 	srli	r2,r17,15
 400efb4:	12001e04 	addi	r8,r2,120
 400efb8:	11c01dc4 	addi	r7,r2,119
 400efbc:	4209883a 	add	r4,r8,r8
 400efc0:	003e6d06 	br	400e978 <__alt_mem_onchip_memory2_0+0xfc00d6d8>
 400efc4:	00c40004 	movi	r3,4096
 400efc8:	003f4606 	br	400ece4 <__alt_mem_onchip_memory2_0+0xfc00da44>
 400efcc:	00800044 	movi	r2,1
 400efd0:	a0800115 	stw	r2,4(r20)
 400efd4:	003f7406 	br	400eda8 <__alt_mem_onchip_memory2_0+0xfc00db08>
 400efd8:	1805d0ba 	srai	r2,r3,2
 400efdc:	01c00044 	movi	r7,1
 400efe0:	30c00117 	ldw	r3,4(r6)
 400efe4:	388e983a 	sll	r7,r7,r2
 400efe8:	2805883a 	mov	r2,r5
 400efec:	38c6b03a 	or	r3,r7,r3
 400eff0:	30c00115 	stw	r3,4(r6)
 400eff4:	003f9b06 	br	400ee64 <__alt_mem_onchip_memory2_0+0xfc00dbc4>
 400eff8:	00c15504 	movi	r3,1364
 400effc:	18801a36 	bltu	r3,r2,400f068 <_malloc_r+0x768>
 400f000:	8804d4ba 	srli	r2,r17,18
 400f004:	12001f44 	addi	r8,r2,125
 400f008:	11c01f04 	addi	r7,r2,124
 400f00c:	4209883a 	add	r4,r8,r8
 400f010:	003e5906 	br	400e978 <__alt_mem_onchip_memory2_0+0xfc00d6d8>
 400f014:	ad400404 	addi	r21,r21,16
 400f018:	003f1706 	br	400ec78 <__alt_mem_onchip_memory2_0+0xfc00d9d8>
 400f01c:	00c01504 	movi	r3,84
 400f020:	18802336 	bltu	r3,r2,400f0b0 <_malloc_r+0x7b0>
 400f024:	3804d33a 	srli	r2,r7,12
 400f028:	11401bc4 	addi	r5,r2,111
 400f02c:	10c01b84 	addi	r3,r2,110
 400f030:	294b883a 	add	r5,r5,r5
 400f034:	003f7b06 	br	400ee24 <__alt_mem_onchip_memory2_0+0xfc00db84>
 400f038:	9c000217 	ldw	r16,8(r19)
 400f03c:	00bfff04 	movi	r2,-4
 400f040:	80c00117 	ldw	r3,4(r16)
 400f044:	1886703a 	and	r3,r3,r2
 400f048:	003f5306 	br	400ed98 <__alt_mem_onchip_memory2_0+0xfc00daf8>
 400f04c:	3083ffcc 	andi	r2,r6,4095
 400f050:	103f181e 	bne	r2,zero,400ecb4 <__alt_mem_onchip_memory2_0+0xfc00da14>
 400f054:	99000217 	ldw	r4,8(r19)
 400f058:	b545883a 	add	r2,r22,r21
 400f05c:	10800054 	ori	r2,r2,1
 400f060:	20800115 	stw	r2,4(r4)
 400f064:	003f3e06 	br	400ed60 <__alt_mem_onchip_memory2_0+0xfc00dac0>
 400f068:	01003f84 	movi	r4,254
 400f06c:	02001fc4 	movi	r8,127
 400f070:	01c01f84 	movi	r7,126
 400f074:	003e4006 	br	400e978 <__alt_mem_onchip_memory2_0+0xfc00d6d8>
 400f078:	008100f4 	movhi	r2,1027
 400f07c:	10aaa404 	addi	r2,r2,-21872
 400f080:	15000015 	stw	r20,0(r2)
 400f084:	003f1106 	br	400eccc <__alt_mem_onchip_memory2_0+0xfc00da2c>
 400f088:	00800044 	movi	r2,1
 400f08c:	002b883a 	mov	r21,zero
 400f090:	003f1f06 	br	400ed10 <__alt_mem_onchip_memory2_0+0xfc00da70>
 400f094:	81400204 	addi	r5,r16,8
 400f098:	9009883a 	mov	r4,r18
 400f09c:	4013ee40 	call	4013ee4 <_free_r>
 400f0a0:	008100f4 	movhi	r2,1027
 400f0a4:	10b77804 	addi	r2,r2,-8736
 400f0a8:	10c00017 	ldw	r3,0(r2)
 400f0ac:	003f2c06 	br	400ed60 <__alt_mem_onchip_memory2_0+0xfc00dac0>
 400f0b0:	00c05504 	movi	r3,340
 400f0b4:	18800536 	bltu	r3,r2,400f0cc <_malloc_r+0x7cc>
 400f0b8:	3804d3fa 	srli	r2,r7,15
 400f0bc:	11401e04 	addi	r5,r2,120
 400f0c0:	10c01dc4 	addi	r3,r2,119
 400f0c4:	294b883a 	add	r5,r5,r5
 400f0c8:	003f5606 	br	400ee24 <__alt_mem_onchip_memory2_0+0xfc00db84>
 400f0cc:	00c15504 	movi	r3,1364
 400f0d0:	18800536 	bltu	r3,r2,400f0e8 <_malloc_r+0x7e8>
 400f0d4:	3804d4ba 	srli	r2,r7,18
 400f0d8:	11401f44 	addi	r5,r2,125
 400f0dc:	10c01f04 	addi	r3,r2,124
 400f0e0:	294b883a 	add	r5,r5,r5
 400f0e4:	003f4f06 	br	400ee24 <__alt_mem_onchip_memory2_0+0xfc00db84>
 400f0e8:	01403f84 	movi	r5,254
 400f0ec:	00c01f84 	movi	r3,126
 400f0f0:	003f4c06 	br	400ee24 <__alt_mem_onchip_memory2_0+0xfc00db84>
 400f0f4:	98800117 	ldw	r2,4(r19)
 400f0f8:	003fa006 	br	400ef7c <__alt_mem_onchip_memory2_0+0xfc00dcdc>
 400f0fc:	8808d0fa 	srli	r4,r17,3
 400f100:	20800044 	addi	r2,r4,1
 400f104:	1085883a 	add	r2,r2,r2
 400f108:	003e9006 	br	400eb4c <__alt_mem_onchip_memory2_0+0xfc00d8ac>

0400f10c <memcpy>:
 400f10c:	defffd04 	addi	sp,sp,-12
 400f110:	dfc00215 	stw	ra,8(sp)
 400f114:	dc400115 	stw	r17,4(sp)
 400f118:	dc000015 	stw	r16,0(sp)
 400f11c:	00c003c4 	movi	r3,15
 400f120:	2005883a 	mov	r2,r4
 400f124:	1980452e 	bgeu	r3,r6,400f23c <memcpy+0x130>
 400f128:	2906b03a 	or	r3,r5,r4
 400f12c:	18c000cc 	andi	r3,r3,3
 400f130:	1800441e 	bne	r3,zero,400f244 <memcpy+0x138>
 400f134:	347ffc04 	addi	r17,r6,-16
 400f138:	8822d13a 	srli	r17,r17,4
 400f13c:	28c00104 	addi	r3,r5,4
 400f140:	23400104 	addi	r13,r4,4
 400f144:	8820913a 	slli	r16,r17,4
 400f148:	2b000204 	addi	r12,r5,8
 400f14c:	22c00204 	addi	r11,r4,8
 400f150:	84000504 	addi	r16,r16,20
 400f154:	2a800304 	addi	r10,r5,12
 400f158:	22400304 	addi	r9,r4,12
 400f15c:	2c21883a 	add	r16,r5,r16
 400f160:	2811883a 	mov	r8,r5
 400f164:	200f883a 	mov	r7,r4
 400f168:	41000017 	ldw	r4,0(r8)
 400f16c:	1fc00017 	ldw	ra,0(r3)
 400f170:	63c00017 	ldw	r15,0(r12)
 400f174:	39000015 	stw	r4,0(r7)
 400f178:	53800017 	ldw	r14,0(r10)
 400f17c:	6fc00015 	stw	ra,0(r13)
 400f180:	5bc00015 	stw	r15,0(r11)
 400f184:	4b800015 	stw	r14,0(r9)
 400f188:	18c00404 	addi	r3,r3,16
 400f18c:	39c00404 	addi	r7,r7,16
 400f190:	42000404 	addi	r8,r8,16
 400f194:	6b400404 	addi	r13,r13,16
 400f198:	63000404 	addi	r12,r12,16
 400f19c:	5ac00404 	addi	r11,r11,16
 400f1a0:	52800404 	addi	r10,r10,16
 400f1a4:	4a400404 	addi	r9,r9,16
 400f1a8:	1c3fef1e 	bne	r3,r16,400f168 <__alt_mem_onchip_memory2_0+0xfc00dec8>
 400f1ac:	89c00044 	addi	r7,r17,1
 400f1b0:	380e913a 	slli	r7,r7,4
 400f1b4:	310003cc 	andi	r4,r6,15
 400f1b8:	02c000c4 	movi	r11,3
 400f1bc:	11c7883a 	add	r3,r2,r7
 400f1c0:	29cb883a 	add	r5,r5,r7
 400f1c4:	5900212e 	bgeu	r11,r4,400f24c <memcpy+0x140>
 400f1c8:	1813883a 	mov	r9,r3
 400f1cc:	2811883a 	mov	r8,r5
 400f1d0:	200f883a 	mov	r7,r4
 400f1d4:	42800017 	ldw	r10,0(r8)
 400f1d8:	4a400104 	addi	r9,r9,4
 400f1dc:	39ffff04 	addi	r7,r7,-4
 400f1e0:	4abfff15 	stw	r10,-4(r9)
 400f1e4:	42000104 	addi	r8,r8,4
 400f1e8:	59fffa36 	bltu	r11,r7,400f1d4 <__alt_mem_onchip_memory2_0+0xfc00df34>
 400f1ec:	213fff04 	addi	r4,r4,-4
 400f1f0:	2008d0ba 	srli	r4,r4,2
 400f1f4:	318000cc 	andi	r6,r6,3
 400f1f8:	21000044 	addi	r4,r4,1
 400f1fc:	2109883a 	add	r4,r4,r4
 400f200:	2109883a 	add	r4,r4,r4
 400f204:	1907883a 	add	r3,r3,r4
 400f208:	290b883a 	add	r5,r5,r4
 400f20c:	30000626 	beq	r6,zero,400f228 <memcpy+0x11c>
 400f210:	198d883a 	add	r6,r3,r6
 400f214:	29c00003 	ldbu	r7,0(r5)
 400f218:	18c00044 	addi	r3,r3,1
 400f21c:	29400044 	addi	r5,r5,1
 400f220:	19ffffc5 	stb	r7,-1(r3)
 400f224:	19bffb1e 	bne	r3,r6,400f214 <__alt_mem_onchip_memory2_0+0xfc00df74>
 400f228:	dfc00217 	ldw	ra,8(sp)
 400f22c:	dc400117 	ldw	r17,4(sp)
 400f230:	dc000017 	ldw	r16,0(sp)
 400f234:	dec00304 	addi	sp,sp,12
 400f238:	f800283a 	ret
 400f23c:	2007883a 	mov	r3,r4
 400f240:	003ff206 	br	400f20c <__alt_mem_onchip_memory2_0+0xfc00df6c>
 400f244:	2007883a 	mov	r3,r4
 400f248:	003ff106 	br	400f210 <__alt_mem_onchip_memory2_0+0xfc00df70>
 400f24c:	200d883a 	mov	r6,r4
 400f250:	003fee06 	br	400f20c <__alt_mem_onchip_memory2_0+0xfc00df6c>

0400f254 <memset>:
 400f254:	20c000cc 	andi	r3,r4,3
 400f258:	2005883a 	mov	r2,r4
 400f25c:	18004426 	beq	r3,zero,400f370 <memset+0x11c>
 400f260:	31ffffc4 	addi	r7,r6,-1
 400f264:	30004026 	beq	r6,zero,400f368 <memset+0x114>
 400f268:	2813883a 	mov	r9,r5
 400f26c:	200d883a 	mov	r6,r4
 400f270:	2007883a 	mov	r3,r4
 400f274:	00000406 	br	400f288 <memset+0x34>
 400f278:	3a3fffc4 	addi	r8,r7,-1
 400f27c:	31800044 	addi	r6,r6,1
 400f280:	38003926 	beq	r7,zero,400f368 <memset+0x114>
 400f284:	400f883a 	mov	r7,r8
 400f288:	18c00044 	addi	r3,r3,1
 400f28c:	32400005 	stb	r9,0(r6)
 400f290:	1a0000cc 	andi	r8,r3,3
 400f294:	403ff81e 	bne	r8,zero,400f278 <__alt_mem_onchip_memory2_0+0xfc00dfd8>
 400f298:	010000c4 	movi	r4,3
 400f29c:	21c02d2e 	bgeu	r4,r7,400f354 <memset+0x100>
 400f2a0:	29003fcc 	andi	r4,r5,255
 400f2a4:	200c923a 	slli	r6,r4,8
 400f2a8:	3108b03a 	or	r4,r6,r4
 400f2ac:	200c943a 	slli	r6,r4,16
 400f2b0:	218cb03a 	or	r6,r4,r6
 400f2b4:	010003c4 	movi	r4,15
 400f2b8:	21c0182e 	bgeu	r4,r7,400f31c <memset+0xc8>
 400f2bc:	3b3ffc04 	addi	r12,r7,-16
 400f2c0:	6018d13a 	srli	r12,r12,4
 400f2c4:	1a000104 	addi	r8,r3,4
 400f2c8:	1ac00204 	addi	r11,r3,8
 400f2cc:	6008913a 	slli	r4,r12,4
 400f2d0:	1a800304 	addi	r10,r3,12
 400f2d4:	1813883a 	mov	r9,r3
 400f2d8:	21000504 	addi	r4,r4,20
 400f2dc:	1909883a 	add	r4,r3,r4
 400f2e0:	49800015 	stw	r6,0(r9)
 400f2e4:	41800015 	stw	r6,0(r8)
 400f2e8:	59800015 	stw	r6,0(r11)
 400f2ec:	51800015 	stw	r6,0(r10)
 400f2f0:	42000404 	addi	r8,r8,16
 400f2f4:	4a400404 	addi	r9,r9,16
 400f2f8:	5ac00404 	addi	r11,r11,16
 400f2fc:	52800404 	addi	r10,r10,16
 400f300:	413ff71e 	bne	r8,r4,400f2e0 <__alt_mem_onchip_memory2_0+0xfc00e040>
 400f304:	63000044 	addi	r12,r12,1
 400f308:	6018913a 	slli	r12,r12,4
 400f30c:	39c003cc 	andi	r7,r7,15
 400f310:	010000c4 	movi	r4,3
 400f314:	1b07883a 	add	r3,r3,r12
 400f318:	21c00e2e 	bgeu	r4,r7,400f354 <memset+0x100>
 400f31c:	1813883a 	mov	r9,r3
 400f320:	3811883a 	mov	r8,r7
 400f324:	010000c4 	movi	r4,3
 400f328:	49800015 	stw	r6,0(r9)
 400f32c:	423fff04 	addi	r8,r8,-4
 400f330:	4a400104 	addi	r9,r9,4
 400f334:	223ffc36 	bltu	r4,r8,400f328 <__alt_mem_onchip_memory2_0+0xfc00e088>
 400f338:	393fff04 	addi	r4,r7,-4
 400f33c:	2008d0ba 	srli	r4,r4,2
 400f340:	39c000cc 	andi	r7,r7,3
 400f344:	21000044 	addi	r4,r4,1
 400f348:	2109883a 	add	r4,r4,r4
 400f34c:	2109883a 	add	r4,r4,r4
 400f350:	1907883a 	add	r3,r3,r4
 400f354:	38000526 	beq	r7,zero,400f36c <memset+0x118>
 400f358:	19cf883a 	add	r7,r3,r7
 400f35c:	19400005 	stb	r5,0(r3)
 400f360:	18c00044 	addi	r3,r3,1
 400f364:	38fffd1e 	bne	r7,r3,400f35c <__alt_mem_onchip_memory2_0+0xfc00e0bc>
 400f368:	f800283a 	ret
 400f36c:	f800283a 	ret
 400f370:	2007883a 	mov	r3,r4
 400f374:	300f883a 	mov	r7,r6
 400f378:	003fc706 	br	400f298 <__alt_mem_onchip_memory2_0+0xfc00dff8>

0400f37c <_printf_r>:
 400f37c:	defffd04 	addi	sp,sp,-12
 400f380:	2805883a 	mov	r2,r5
 400f384:	dfc00015 	stw	ra,0(sp)
 400f388:	d9800115 	stw	r6,4(sp)
 400f38c:	d9c00215 	stw	r7,8(sp)
 400f390:	21400217 	ldw	r5,8(r4)
 400f394:	d9c00104 	addi	r7,sp,4
 400f398:	100d883a 	mov	r6,r2
 400f39c:	400f9b00 	call	400f9b0 <___vfprintf_internal_r>
 400f3a0:	dfc00017 	ldw	ra,0(sp)
 400f3a4:	dec00304 	addi	sp,sp,12
 400f3a8:	f800283a 	ret

0400f3ac <printf>:
 400f3ac:	defffc04 	addi	sp,sp,-16
 400f3b0:	dfc00015 	stw	ra,0(sp)
 400f3b4:	d9400115 	stw	r5,4(sp)
 400f3b8:	d9800215 	stw	r6,8(sp)
 400f3bc:	d9c00315 	stw	r7,12(sp)
 400f3c0:	008100f4 	movhi	r2,1027
 400f3c4:	10aaa304 	addi	r2,r2,-21876
 400f3c8:	10800017 	ldw	r2,0(r2)
 400f3cc:	200b883a 	mov	r5,r4
 400f3d0:	d9800104 	addi	r6,sp,4
 400f3d4:	11000217 	ldw	r4,8(r2)
 400f3d8:	4011c8c0 	call	4011c8c <__vfprintf_internal>
 400f3dc:	dfc00017 	ldw	ra,0(sp)
 400f3e0:	dec00404 	addi	sp,sp,16
 400f3e4:	f800283a 	ret

0400f3e8 <_putchar_r>:
 400f3e8:	21800217 	ldw	r6,8(r4)
 400f3ec:	4015dd41 	jmpi	4015dd4 <_putc_r>

0400f3f0 <putchar>:
 400f3f0:	008100f4 	movhi	r2,1027
 400f3f4:	10aaa304 	addi	r2,r2,-21876
 400f3f8:	200b883a 	mov	r5,r4
 400f3fc:	11000017 	ldw	r4,0(r2)
 400f400:	21800217 	ldw	r6,8(r4)
 400f404:	4015dd41 	jmpi	4015dd4 <_putc_r>

0400f408 <_puts_r>:
 400f408:	defff604 	addi	sp,sp,-40
 400f40c:	dc000715 	stw	r16,28(sp)
 400f410:	2021883a 	mov	r16,r4
 400f414:	2809883a 	mov	r4,r5
 400f418:	dc400815 	stw	r17,32(sp)
 400f41c:	dfc00915 	stw	ra,36(sp)
 400f420:	2823883a 	mov	r17,r5
 400f424:	400f9100 	call	400f910 <strlen>
 400f428:	10c00044 	addi	r3,r2,1
 400f42c:	d8800115 	stw	r2,4(sp)
 400f430:	008100b4 	movhi	r2,1026
 400f434:	109db304 	addi	r2,r2,30412
 400f438:	d8800215 	stw	r2,8(sp)
 400f43c:	00800044 	movi	r2,1
 400f440:	d8800315 	stw	r2,12(sp)
 400f444:	00800084 	movi	r2,2
 400f448:	dc400015 	stw	r17,0(sp)
 400f44c:	d8c00615 	stw	r3,24(sp)
 400f450:	dec00415 	stw	sp,16(sp)
 400f454:	d8800515 	stw	r2,20(sp)
 400f458:	80000226 	beq	r16,zero,400f464 <_puts_r+0x5c>
 400f45c:	80800e17 	ldw	r2,56(r16)
 400f460:	10001426 	beq	r2,zero,400f4b4 <_puts_r+0xac>
 400f464:	81400217 	ldw	r5,8(r16)
 400f468:	2880030b 	ldhu	r2,12(r5)
 400f46c:	10c8000c 	andi	r3,r2,8192
 400f470:	1800061e 	bne	r3,zero,400f48c <_puts_r+0x84>
 400f474:	29001917 	ldw	r4,100(r5)
 400f478:	00f7ffc4 	movi	r3,-8193
 400f47c:	10880014 	ori	r2,r2,8192
 400f480:	20c6703a 	and	r3,r4,r3
 400f484:	2880030d 	sth	r2,12(r5)
 400f488:	28c01915 	stw	r3,100(r5)
 400f48c:	d9800404 	addi	r6,sp,16
 400f490:	8009883a 	mov	r4,r16
 400f494:	40141f40 	call	40141f4 <__sfvwrite_r>
 400f498:	1000091e 	bne	r2,zero,400f4c0 <_puts_r+0xb8>
 400f49c:	00800284 	movi	r2,10
 400f4a0:	dfc00917 	ldw	ra,36(sp)
 400f4a4:	dc400817 	ldw	r17,32(sp)
 400f4a8:	dc000717 	ldw	r16,28(sp)
 400f4ac:	dec00a04 	addi	sp,sp,40
 400f4b0:	f800283a 	ret
 400f4b4:	8009883a 	mov	r4,r16
 400f4b8:	4013d700 	call	4013d70 <__sinit>
 400f4bc:	003fe906 	br	400f464 <__alt_mem_onchip_memory2_0+0xfc00e1c4>
 400f4c0:	00bfffc4 	movi	r2,-1
 400f4c4:	003ff606 	br	400f4a0 <__alt_mem_onchip_memory2_0+0xfc00e200>

0400f4c8 <puts>:
 400f4c8:	008100f4 	movhi	r2,1027
 400f4cc:	10aaa304 	addi	r2,r2,-21876
 400f4d0:	200b883a 	mov	r5,r4
 400f4d4:	11000017 	ldw	r4,0(r2)
 400f4d8:	400f4081 	jmpi	400f408 <_puts_r>

0400f4dc <_sbrk_r>:
 400f4dc:	defffd04 	addi	sp,sp,-12
 400f4e0:	dc000015 	stw	r16,0(sp)
 400f4e4:	040100f4 	movhi	r16,1027
 400f4e8:	dc400115 	stw	r17,4(sp)
 400f4ec:	84373504 	addi	r16,r16,-9004
 400f4f0:	2023883a 	mov	r17,r4
 400f4f4:	2809883a 	mov	r4,r5
 400f4f8:	dfc00215 	stw	ra,8(sp)
 400f4fc:	80000015 	stw	zero,0(r16)
 400f500:	401c3fc0 	call	401c3fc <sbrk>
 400f504:	00ffffc4 	movi	r3,-1
 400f508:	10c00526 	beq	r2,r3,400f520 <_sbrk_r+0x44>
 400f50c:	dfc00217 	ldw	ra,8(sp)
 400f510:	dc400117 	ldw	r17,4(sp)
 400f514:	dc000017 	ldw	r16,0(sp)
 400f518:	dec00304 	addi	sp,sp,12
 400f51c:	f800283a 	ret
 400f520:	80c00017 	ldw	r3,0(r16)
 400f524:	183ff926 	beq	r3,zero,400f50c <__alt_mem_onchip_memory2_0+0xfc00e26c>
 400f528:	88c00015 	stw	r3,0(r17)
 400f52c:	003ff706 	br	400f50c <__alt_mem_onchip_memory2_0+0xfc00e26c>

0400f530 <_init_signal_r>:
 400f530:	2080b717 	ldw	r2,732(r4)
 400f534:	10000226 	beq	r2,zero,400f540 <_init_signal_r+0x10>
 400f538:	0005883a 	mov	r2,zero
 400f53c:	f800283a 	ret
 400f540:	defffe04 	addi	sp,sp,-8
 400f544:	01402004 	movi	r5,128
 400f548:	dc000015 	stw	r16,0(sp)
 400f54c:	dfc00115 	stw	ra,4(sp)
 400f550:	2021883a 	mov	r16,r4
 400f554:	400e9000 	call	400e900 <_malloc_r>
 400f558:	8080b715 	stw	r2,732(r16)
 400f55c:	10000d26 	beq	r2,zero,400f594 <_init_signal_r+0x64>
 400f560:	0007883a 	mov	r3,zero
 400f564:	01002004 	movi	r4,128
 400f568:	00000106 	br	400f570 <_init_signal_r+0x40>
 400f56c:	8080b717 	ldw	r2,732(r16)
 400f570:	10c5883a 	add	r2,r2,r3
 400f574:	10000015 	stw	zero,0(r2)
 400f578:	18c00104 	addi	r3,r3,4
 400f57c:	193ffb1e 	bne	r3,r4,400f56c <__alt_mem_onchip_memory2_0+0xfc00e2cc>
 400f580:	0005883a 	mov	r2,zero
 400f584:	dfc00117 	ldw	ra,4(sp)
 400f588:	dc000017 	ldw	r16,0(sp)
 400f58c:	dec00204 	addi	sp,sp,8
 400f590:	f800283a 	ret
 400f594:	00bfffc4 	movi	r2,-1
 400f598:	003ffa06 	br	400f584 <__alt_mem_onchip_memory2_0+0xfc00e2e4>

0400f59c <_signal_r>:
 400f59c:	00c007c4 	movi	r3,31
 400f5a0:	19401536 	bltu	r3,r5,400f5f8 <_signal_r+0x5c>
 400f5a4:	2080b717 	ldw	r2,732(r4)
 400f5a8:	defffc04 	addi	sp,sp,-16
 400f5ac:	dc800215 	stw	r18,8(sp)
 400f5b0:	dc400115 	stw	r17,4(sp)
 400f5b4:	dc000015 	stw	r16,0(sp)
 400f5b8:	dfc00315 	stw	ra,12(sp)
 400f5bc:	3023883a 	mov	r17,r6
 400f5c0:	2021883a 	mov	r16,r4
 400f5c4:	2825883a 	mov	r18,r5
 400f5c8:	10000f26 	beq	r2,zero,400f608 <_signal_r+0x6c>
 400f5cc:	948b883a 	add	r5,r18,r18
 400f5d0:	294b883a 	add	r5,r5,r5
 400f5d4:	114b883a 	add	r5,r2,r5
 400f5d8:	28800017 	ldw	r2,0(r5)
 400f5dc:	2c400015 	stw	r17,0(r5)
 400f5e0:	dfc00317 	ldw	ra,12(sp)
 400f5e4:	dc800217 	ldw	r18,8(sp)
 400f5e8:	dc400117 	ldw	r17,4(sp)
 400f5ec:	dc000017 	ldw	r16,0(sp)
 400f5f0:	dec00404 	addi	sp,sp,16
 400f5f4:	f800283a 	ret
 400f5f8:	00c00584 	movi	r3,22
 400f5fc:	20c00015 	stw	r3,0(r4)
 400f600:	00bfffc4 	movi	r2,-1
 400f604:	f800283a 	ret
 400f608:	400f5300 	call	400f530 <_init_signal_r>
 400f60c:	1000021e 	bne	r2,zero,400f618 <_signal_r+0x7c>
 400f610:	8080b717 	ldw	r2,732(r16)
 400f614:	003fed06 	br	400f5cc <__alt_mem_onchip_memory2_0+0xfc00e32c>
 400f618:	00bfffc4 	movi	r2,-1
 400f61c:	003ff006 	br	400f5e0 <__alt_mem_onchip_memory2_0+0xfc00e340>

0400f620 <_raise_r>:
 400f620:	008007c4 	movi	r2,31
 400f624:	11402936 	bltu	r2,r5,400f6cc <_raise_r+0xac>
 400f628:	20c0b717 	ldw	r3,732(r4)
 400f62c:	defffd04 	addi	sp,sp,-12
 400f630:	dc400115 	stw	r17,4(sp)
 400f634:	dc000015 	stw	r16,0(sp)
 400f638:	dfc00215 	stw	ra,8(sp)
 400f63c:	2021883a 	mov	r16,r4
 400f640:	2823883a 	mov	r17,r5
 400f644:	18001726 	beq	r3,zero,400f6a4 <_raise_r+0x84>
 400f648:	2945883a 	add	r2,r5,r5
 400f64c:	1085883a 	add	r2,r2,r2
 400f650:	1887883a 	add	r3,r3,r2
 400f654:	19800017 	ldw	r6,0(r3)
 400f658:	30001226 	beq	r6,zero,400f6a4 <_raise_r+0x84>
 400f65c:	00800044 	movi	r2,1
 400f660:	30800e26 	beq	r6,r2,400f69c <_raise_r+0x7c>
 400f664:	013fffc4 	movi	r4,-1
 400f668:	31000926 	beq	r6,r4,400f690 <_raise_r+0x70>
 400f66c:	18000015 	stw	zero,0(r3)
 400f670:	2809883a 	mov	r4,r5
 400f674:	303ee83a 	callr	r6
 400f678:	0005883a 	mov	r2,zero
 400f67c:	dfc00217 	ldw	ra,8(sp)
 400f680:	dc400117 	ldw	r17,4(sp)
 400f684:	dc000017 	ldw	r16,0(sp)
 400f688:	dec00304 	addi	sp,sp,12
 400f68c:	f800283a 	ret
 400f690:	00c00584 	movi	r3,22
 400f694:	80c00015 	stw	r3,0(r16)
 400f698:	003ff806 	br	400f67c <__alt_mem_onchip_memory2_0+0xfc00e3dc>
 400f69c:	0005883a 	mov	r2,zero
 400f6a0:	003ff606 	br	400f67c <__alt_mem_onchip_memory2_0+0xfc00e3dc>
 400f6a4:	8009883a 	mov	r4,r16
 400f6a8:	400f8300 	call	400f830 <_getpid_r>
 400f6ac:	880d883a 	mov	r6,r17
 400f6b0:	100b883a 	mov	r5,r2
 400f6b4:	8009883a 	mov	r4,r16
 400f6b8:	dfc00217 	ldw	ra,8(sp)
 400f6bc:	dc400117 	ldw	r17,4(sp)
 400f6c0:	dc000017 	ldw	r16,0(sp)
 400f6c4:	dec00304 	addi	sp,sp,12
 400f6c8:	400f7d41 	jmpi	400f7d4 <_kill_r>
 400f6cc:	00800584 	movi	r2,22
 400f6d0:	20800015 	stw	r2,0(r4)
 400f6d4:	00bfffc4 	movi	r2,-1
 400f6d8:	f800283a 	ret

0400f6dc <__sigtramp_r>:
 400f6dc:	008007c4 	movi	r2,31
 400f6e0:	11402436 	bltu	r2,r5,400f774 <__sigtramp_r+0x98>
 400f6e4:	20c0b717 	ldw	r3,732(r4)
 400f6e8:	defffd04 	addi	sp,sp,-12
 400f6ec:	dc400115 	stw	r17,4(sp)
 400f6f0:	dc000015 	stw	r16,0(sp)
 400f6f4:	dfc00215 	stw	ra,8(sp)
 400f6f8:	2021883a 	mov	r16,r4
 400f6fc:	2823883a 	mov	r17,r5
 400f700:	18001826 	beq	r3,zero,400f764 <__sigtramp_r+0x88>
 400f704:	8c45883a 	add	r2,r17,r17
 400f708:	1085883a 	add	r2,r2,r2
 400f70c:	1885883a 	add	r2,r3,r2
 400f710:	10c00017 	ldw	r3,0(r2)
 400f714:	18001126 	beq	r3,zero,400f75c <__sigtramp_r+0x80>
 400f718:	013fffc4 	movi	r4,-1
 400f71c:	19000d26 	beq	r3,r4,400f754 <__sigtramp_r+0x78>
 400f720:	01000044 	movi	r4,1
 400f724:	19000926 	beq	r3,r4,400f74c <__sigtramp_r+0x70>
 400f728:	10000015 	stw	zero,0(r2)
 400f72c:	8809883a 	mov	r4,r17
 400f730:	183ee83a 	callr	r3
 400f734:	0005883a 	mov	r2,zero
 400f738:	dfc00217 	ldw	ra,8(sp)
 400f73c:	dc400117 	ldw	r17,4(sp)
 400f740:	dc000017 	ldw	r16,0(sp)
 400f744:	dec00304 	addi	sp,sp,12
 400f748:	f800283a 	ret
 400f74c:	008000c4 	movi	r2,3
 400f750:	003ff906 	br	400f738 <__alt_mem_onchip_memory2_0+0xfc00e498>
 400f754:	00800084 	movi	r2,2
 400f758:	003ff706 	br	400f738 <__alt_mem_onchip_memory2_0+0xfc00e498>
 400f75c:	00800044 	movi	r2,1
 400f760:	003ff506 	br	400f738 <__alt_mem_onchip_memory2_0+0xfc00e498>
 400f764:	400f5300 	call	400f530 <_init_signal_r>
 400f768:	1000041e 	bne	r2,zero,400f77c <__sigtramp_r+0xa0>
 400f76c:	80c0b717 	ldw	r3,732(r16)
 400f770:	003fe406 	br	400f704 <__alt_mem_onchip_memory2_0+0xfc00e464>
 400f774:	00bfffc4 	movi	r2,-1
 400f778:	f800283a 	ret
 400f77c:	00bfffc4 	movi	r2,-1
 400f780:	003fed06 	br	400f738 <__alt_mem_onchip_memory2_0+0xfc00e498>

0400f784 <raise>:
 400f784:	008100f4 	movhi	r2,1027
 400f788:	10aaa304 	addi	r2,r2,-21876
 400f78c:	200b883a 	mov	r5,r4
 400f790:	11000017 	ldw	r4,0(r2)
 400f794:	400f6201 	jmpi	400f620 <_raise_r>

0400f798 <signal>:
 400f798:	008100f4 	movhi	r2,1027
 400f79c:	10aaa304 	addi	r2,r2,-21876
 400f7a0:	280d883a 	mov	r6,r5
 400f7a4:	200b883a 	mov	r5,r4
 400f7a8:	11000017 	ldw	r4,0(r2)
 400f7ac:	400f59c1 	jmpi	400f59c <_signal_r>

0400f7b0 <_init_signal>:
 400f7b0:	008100f4 	movhi	r2,1027
 400f7b4:	10aaa304 	addi	r2,r2,-21876
 400f7b8:	11000017 	ldw	r4,0(r2)
 400f7bc:	400f5301 	jmpi	400f530 <_init_signal_r>

0400f7c0 <__sigtramp>:
 400f7c0:	008100f4 	movhi	r2,1027
 400f7c4:	10aaa304 	addi	r2,r2,-21876
 400f7c8:	200b883a 	mov	r5,r4
 400f7cc:	11000017 	ldw	r4,0(r2)
 400f7d0:	400f6dc1 	jmpi	400f6dc <__sigtramp_r>

0400f7d4 <_kill_r>:
 400f7d4:	defffd04 	addi	sp,sp,-12
 400f7d8:	2805883a 	mov	r2,r5
 400f7dc:	dc000015 	stw	r16,0(sp)
 400f7e0:	040100f4 	movhi	r16,1027
 400f7e4:	dc400115 	stw	r17,4(sp)
 400f7e8:	84373504 	addi	r16,r16,-9004
 400f7ec:	2023883a 	mov	r17,r4
 400f7f0:	300b883a 	mov	r5,r6
 400f7f4:	1009883a 	mov	r4,r2
 400f7f8:	dfc00215 	stw	ra,8(sp)
 400f7fc:	80000015 	stw	zero,0(r16)
 400f800:	401be400 	call	401be40 <kill>
 400f804:	00ffffc4 	movi	r3,-1
 400f808:	10c00526 	beq	r2,r3,400f820 <_kill_r+0x4c>
 400f80c:	dfc00217 	ldw	ra,8(sp)
 400f810:	dc400117 	ldw	r17,4(sp)
 400f814:	dc000017 	ldw	r16,0(sp)
 400f818:	dec00304 	addi	sp,sp,12
 400f81c:	f800283a 	ret
 400f820:	80c00017 	ldw	r3,0(r16)
 400f824:	183ff926 	beq	r3,zero,400f80c <__alt_mem_onchip_memory2_0+0xfc00e56c>
 400f828:	88c00015 	stw	r3,0(r17)
 400f82c:	003ff706 	br	400f80c <__alt_mem_onchip_memory2_0+0xfc00e56c>

0400f830 <_getpid_r>:
 400f830:	401bcfc1 	jmpi	401bcfc <getpid>

0400f834 <strcmp>:
 400f834:	2144b03a 	or	r2,r4,r5
 400f838:	108000cc 	andi	r2,r2,3
 400f83c:	1000171e 	bne	r2,zero,400f89c <strcmp+0x68>
 400f840:	20800017 	ldw	r2,0(r4)
 400f844:	28c00017 	ldw	r3,0(r5)
 400f848:	10c0141e 	bne	r2,r3,400f89c <strcmp+0x68>
 400f84c:	027fbff4 	movhi	r9,65279
 400f850:	4a7fbfc4 	addi	r9,r9,-257
 400f854:	0086303a 	nor	r3,zero,r2
 400f858:	02202074 	movhi	r8,32897
 400f85c:	1245883a 	add	r2,r2,r9
 400f860:	42202004 	addi	r8,r8,-32640
 400f864:	10c4703a 	and	r2,r2,r3
 400f868:	1204703a 	and	r2,r2,r8
 400f86c:	10000226 	beq	r2,zero,400f878 <strcmp+0x44>
 400f870:	00002306 	br	400f900 <strcmp+0xcc>
 400f874:	1000221e 	bne	r2,zero,400f900 <strcmp+0xcc>
 400f878:	21000104 	addi	r4,r4,4
 400f87c:	20c00017 	ldw	r3,0(r4)
 400f880:	29400104 	addi	r5,r5,4
 400f884:	29800017 	ldw	r6,0(r5)
 400f888:	1a4f883a 	add	r7,r3,r9
 400f88c:	00c4303a 	nor	r2,zero,r3
 400f890:	3884703a 	and	r2,r7,r2
 400f894:	1204703a 	and	r2,r2,r8
 400f898:	19bff626 	beq	r3,r6,400f874 <__alt_mem_onchip_memory2_0+0xfc00e5d4>
 400f89c:	20800003 	ldbu	r2,0(r4)
 400f8a0:	10c03fcc 	andi	r3,r2,255
 400f8a4:	18c0201c 	xori	r3,r3,128
 400f8a8:	18ffe004 	addi	r3,r3,-128
 400f8ac:	18000c26 	beq	r3,zero,400f8e0 <strcmp+0xac>
 400f8b0:	29800007 	ldb	r6,0(r5)
 400f8b4:	19800326 	beq	r3,r6,400f8c4 <strcmp+0x90>
 400f8b8:	00001306 	br	400f908 <strcmp+0xd4>
 400f8bc:	29800007 	ldb	r6,0(r5)
 400f8c0:	11800b1e 	bne	r2,r6,400f8f0 <strcmp+0xbc>
 400f8c4:	21000044 	addi	r4,r4,1
 400f8c8:	20c00003 	ldbu	r3,0(r4)
 400f8cc:	29400044 	addi	r5,r5,1
 400f8d0:	18803fcc 	andi	r2,r3,255
 400f8d4:	1080201c 	xori	r2,r2,128
 400f8d8:	10bfe004 	addi	r2,r2,-128
 400f8dc:	103ff71e 	bne	r2,zero,400f8bc <__alt_mem_onchip_memory2_0+0xfc00e61c>
 400f8e0:	0007883a 	mov	r3,zero
 400f8e4:	28800003 	ldbu	r2,0(r5)
 400f8e8:	1885c83a 	sub	r2,r3,r2
 400f8ec:	f800283a 	ret
 400f8f0:	28800003 	ldbu	r2,0(r5)
 400f8f4:	18c03fcc 	andi	r3,r3,255
 400f8f8:	1885c83a 	sub	r2,r3,r2
 400f8fc:	f800283a 	ret
 400f900:	0005883a 	mov	r2,zero
 400f904:	f800283a 	ret
 400f908:	10c03fcc 	andi	r3,r2,255
 400f90c:	003ff506 	br	400f8e4 <__alt_mem_onchip_memory2_0+0xfc00e644>

0400f910 <strlen>:
 400f910:	208000cc 	andi	r2,r4,3
 400f914:	10002026 	beq	r2,zero,400f998 <strlen+0x88>
 400f918:	20800007 	ldb	r2,0(r4)
 400f91c:	10002026 	beq	r2,zero,400f9a0 <strlen+0x90>
 400f920:	2005883a 	mov	r2,r4
 400f924:	00000206 	br	400f930 <strlen+0x20>
 400f928:	10c00007 	ldb	r3,0(r2)
 400f92c:	18001826 	beq	r3,zero,400f990 <strlen+0x80>
 400f930:	10800044 	addi	r2,r2,1
 400f934:	10c000cc 	andi	r3,r2,3
 400f938:	183ffb1e 	bne	r3,zero,400f928 <__alt_mem_onchip_memory2_0+0xfc00e688>
 400f93c:	10c00017 	ldw	r3,0(r2)
 400f940:	01ffbff4 	movhi	r7,65279
 400f944:	39ffbfc4 	addi	r7,r7,-257
 400f948:	00ca303a 	nor	r5,zero,r3
 400f94c:	01a02074 	movhi	r6,32897
 400f950:	19c7883a 	add	r3,r3,r7
 400f954:	31a02004 	addi	r6,r6,-32640
 400f958:	1946703a 	and	r3,r3,r5
 400f95c:	1986703a 	and	r3,r3,r6
 400f960:	1800091e 	bne	r3,zero,400f988 <strlen+0x78>
 400f964:	10800104 	addi	r2,r2,4
 400f968:	10c00017 	ldw	r3,0(r2)
 400f96c:	19cb883a 	add	r5,r3,r7
 400f970:	00c6303a 	nor	r3,zero,r3
 400f974:	28c6703a 	and	r3,r5,r3
 400f978:	1986703a 	and	r3,r3,r6
 400f97c:	183ff926 	beq	r3,zero,400f964 <__alt_mem_onchip_memory2_0+0xfc00e6c4>
 400f980:	00000106 	br	400f988 <strlen+0x78>
 400f984:	10800044 	addi	r2,r2,1
 400f988:	10c00007 	ldb	r3,0(r2)
 400f98c:	183ffd1e 	bne	r3,zero,400f984 <__alt_mem_onchip_memory2_0+0xfc00e6e4>
 400f990:	1105c83a 	sub	r2,r2,r4
 400f994:	f800283a 	ret
 400f998:	2005883a 	mov	r2,r4
 400f99c:	003fe706 	br	400f93c <__alt_mem_onchip_memory2_0+0xfc00e69c>
 400f9a0:	0005883a 	mov	r2,zero
 400f9a4:	f800283a 	ret

0400f9a8 <_times_r>:
 400f9a8:	2809883a 	mov	r4,r5
 400f9ac:	401c4e81 	jmpi	401c4e8 <times>

0400f9b0 <___vfprintf_internal_r>:
 400f9b0:	deffb804 	addi	sp,sp,-288
 400f9b4:	dfc04715 	stw	ra,284(sp)
 400f9b8:	ddc04515 	stw	r23,276(sp)
 400f9bc:	dd404315 	stw	r21,268(sp)
 400f9c0:	d9002d15 	stw	r4,180(sp)
 400f9c4:	282f883a 	mov	r23,r5
 400f9c8:	302b883a 	mov	r21,r6
 400f9cc:	d9c02e15 	stw	r7,184(sp)
 400f9d0:	df004615 	stw	fp,280(sp)
 400f9d4:	dd804415 	stw	r22,272(sp)
 400f9d8:	dd004215 	stw	r20,264(sp)
 400f9dc:	dcc04115 	stw	r19,260(sp)
 400f9e0:	dc804015 	stw	r18,256(sp)
 400f9e4:	dc403f15 	stw	r17,252(sp)
 400f9e8:	dc003e15 	stw	r16,248(sp)
 400f9ec:	40148f00 	call	40148f0 <_localeconv_r>
 400f9f0:	10800017 	ldw	r2,0(r2)
 400f9f4:	1009883a 	mov	r4,r2
 400f9f8:	d8803415 	stw	r2,208(sp)
 400f9fc:	400f9100 	call	400f910 <strlen>
 400fa00:	d8803715 	stw	r2,220(sp)
 400fa04:	d8802d17 	ldw	r2,180(sp)
 400fa08:	10000226 	beq	r2,zero,400fa14 <___vfprintf_internal_r+0x64>
 400fa0c:	10800e17 	ldw	r2,56(r2)
 400fa10:	1000fb26 	beq	r2,zero,400fe00 <___vfprintf_internal_r+0x450>
 400fa14:	b880030b 	ldhu	r2,12(r23)
 400fa18:	10c8000c 	andi	r3,r2,8192
 400fa1c:	1800061e 	bne	r3,zero,400fa38 <___vfprintf_internal_r+0x88>
 400fa20:	b9001917 	ldw	r4,100(r23)
 400fa24:	00f7ffc4 	movi	r3,-8193
 400fa28:	10880014 	ori	r2,r2,8192
 400fa2c:	20c6703a 	and	r3,r4,r3
 400fa30:	b880030d 	sth	r2,12(r23)
 400fa34:	b8c01915 	stw	r3,100(r23)
 400fa38:	10c0020c 	andi	r3,r2,8
 400fa3c:	1800c326 	beq	r3,zero,400fd4c <___vfprintf_internal_r+0x39c>
 400fa40:	b8c00417 	ldw	r3,16(r23)
 400fa44:	1800c126 	beq	r3,zero,400fd4c <___vfprintf_internal_r+0x39c>
 400fa48:	1080068c 	andi	r2,r2,26
 400fa4c:	00c00284 	movi	r3,10
 400fa50:	10c0c626 	beq	r2,r3,400fd6c <___vfprintf_internal_r+0x3bc>
 400fa54:	d8c00404 	addi	r3,sp,16
 400fa58:	050100b4 	movhi	r20,1026
 400fa5c:	d9001e04 	addi	r4,sp,120
 400fa60:	a51dc484 	addi	r20,r20,30482
 400fa64:	d8c01e15 	stw	r3,120(sp)
 400fa68:	d8002015 	stw	zero,128(sp)
 400fa6c:	d8001f15 	stw	zero,124(sp)
 400fa70:	d8003315 	stw	zero,204(sp)
 400fa74:	d8003615 	stw	zero,216(sp)
 400fa78:	d8003815 	stw	zero,224(sp)
 400fa7c:	1811883a 	mov	r8,r3
 400fa80:	d8003915 	stw	zero,228(sp)
 400fa84:	d8003a15 	stw	zero,232(sp)
 400fa88:	d8002f15 	stw	zero,188(sp)
 400fa8c:	d9002815 	stw	r4,160(sp)
 400fa90:	a8800007 	ldb	r2,0(r21)
 400fa94:	10028b26 	beq	r2,zero,40104c4 <___vfprintf_internal_r+0xb14>
 400fa98:	00c00944 	movi	r3,37
 400fa9c:	a823883a 	mov	r17,r21
 400faa0:	10c0021e 	bne	r2,r3,400faac <___vfprintf_internal_r+0xfc>
 400faa4:	00001406 	br	400faf8 <___vfprintf_internal_r+0x148>
 400faa8:	10c00326 	beq	r2,r3,400fab8 <___vfprintf_internal_r+0x108>
 400faac:	8c400044 	addi	r17,r17,1
 400fab0:	88800007 	ldb	r2,0(r17)
 400fab4:	103ffc1e 	bne	r2,zero,400faa8 <__alt_mem_onchip_memory2_0+0xfc00e808>
 400fab8:	8d61c83a 	sub	r16,r17,r21
 400fabc:	80000e26 	beq	r16,zero,400faf8 <___vfprintf_internal_r+0x148>
 400fac0:	d8c02017 	ldw	r3,128(sp)
 400fac4:	d8801f17 	ldw	r2,124(sp)
 400fac8:	45400015 	stw	r21,0(r8)
 400facc:	1c07883a 	add	r3,r3,r16
 400fad0:	10800044 	addi	r2,r2,1
 400fad4:	d8c02015 	stw	r3,128(sp)
 400fad8:	44000115 	stw	r16,4(r8)
 400fadc:	d8801f15 	stw	r2,124(sp)
 400fae0:	00c001c4 	movi	r3,7
 400fae4:	1880a916 	blt	r3,r2,400fd8c <___vfprintf_internal_r+0x3dc>
 400fae8:	42000204 	addi	r8,r8,8
 400faec:	d9402f17 	ldw	r5,188(sp)
 400faf0:	2c0b883a 	add	r5,r5,r16
 400faf4:	d9402f15 	stw	r5,188(sp)
 400faf8:	88800007 	ldb	r2,0(r17)
 400fafc:	1000aa26 	beq	r2,zero,400fda8 <___vfprintf_internal_r+0x3f8>
 400fb00:	8d400044 	addi	r21,r17,1
 400fb04:	8c400047 	ldb	r17,1(r17)
 400fb08:	0021883a 	mov	r16,zero
 400fb0c:	00bfffc4 	movi	r2,-1
 400fb10:	0025883a 	mov	r18,zero
 400fb14:	dc002905 	stb	r16,164(sp)
 400fb18:	d8002785 	stb	zero,158(sp)
 400fb1c:	d8002b05 	stb	zero,172(sp)
 400fb20:	d8802a15 	stw	r2,168(sp)
 400fb24:	d8003115 	stw	zero,196(sp)
 400fb28:	04c01604 	movi	r19,88
 400fb2c:	05800244 	movi	r22,9
 400fb30:	9021883a 	mov	r16,r18
 400fb34:	4039883a 	mov	fp,r8
 400fb38:	ad400044 	addi	r21,r21,1
 400fb3c:	88bff804 	addi	r2,r17,-32
 400fb40:	98833236 	bltu	r19,r2,401080c <___vfprintf_internal_r+0xe5c>
 400fb44:	100490ba 	slli	r2,r2,2
 400fb48:	00c10074 	movhi	r3,1025
 400fb4c:	18fed704 	addi	r3,r3,-1188
 400fb50:	10c5883a 	add	r2,r2,r3
 400fb54:	10800017 	ldw	r2,0(r2)
 400fb58:	1000683a 	jmp	r2
 400fb5c:	04010704 	movi	r16,1052
 400fb60:	0401080c 	andi	r16,zero,1056
 400fb64:	0401080c 	andi	r16,zero,1056
 400fb68:	04010724 	muli	r16,zero,1052
 400fb6c:	0401080c 	andi	r16,zero,1056
 400fb70:	0401080c 	andi	r16,zero,1056
 400fb74:	0401080c 	andi	r16,zero,1056
 400fb78:	0401080c 	andi	r16,zero,1056
 400fb7c:	0401080c 	andi	r16,zero,1056
 400fb80:	0401080c 	andi	r16,zero,1056
 400fb84:	0400fe0c 	andi	r16,zero,1016
 400fb88:	04010614 	movui	r16,1048
 400fb8c:	0401080c 	andi	r16,zero,1056
 400fb90:	0400fcd0 	cmplti	r16,zero,1011
 400fb94:	0400fe30 	cmpltui	r16,zero,1016
 400fb98:	0401080c 	andi	r16,zero,1056
 400fb9c:	0400fe80 	call	400fe8 <__alt_mem_sdram-0x3bff018>
 400fba0:	0400fe8c 	andi	r16,zero,1018
 400fba4:	0400fe8c 	andi	r16,zero,1018
 400fba8:	0400fe8c 	andi	r16,zero,1018
 400fbac:	0400fe8c 	andi	r16,zero,1018
 400fbb0:	0400fe8c 	andi	r16,zero,1018
 400fbb4:	0400fe8c 	andi	r16,zero,1018
 400fbb8:	0400fe8c 	andi	r16,zero,1018
 400fbbc:	0400fe8c 	andi	r16,zero,1018
 400fbc0:	0400fe8c 	andi	r16,zero,1018
 400fbc4:	0401080c 	andi	r16,zero,1056
 400fbc8:	0401080c 	andi	r16,zero,1056
 400fbcc:	0401080c 	andi	r16,zero,1056
 400fbd0:	0401080c 	andi	r16,zero,1056
 400fbd4:	0401080c 	andi	r16,zero,1056
 400fbd8:	0401080c 	andi	r16,zero,1056
 400fbdc:	0401080c 	andi	r16,zero,1056
 400fbe0:	0401080c 	andi	r16,zero,1056
 400fbe4:	0401080c 	andi	r16,zero,1056
 400fbe8:	0401080c 	andi	r16,zero,1056
 400fbec:	0400fec8 	cmpgei	r16,zero,1019
 400fbf0:	0400ff90 	cmplti	r16,zero,1022
 400fbf4:	0401080c 	andi	r16,zero,1056
 400fbf8:	0400ff90 	cmplti	r16,zero,1022
 400fbfc:	0401080c 	andi	r16,zero,1056
 400fc00:	0401080c 	andi	r16,zero,1056
 400fc04:	0401080c 	andi	r16,zero,1056
 400fc08:	0401080c 	andi	r16,zero,1056
 400fc0c:	0401003c 	xorhi	r16,zero,1024
 400fc10:	0401080c 	andi	r16,zero,1056
 400fc14:	0401080c 	andi	r16,zero,1056
 400fc18:	04010048 	cmpgei	r16,zero,1025
 400fc1c:	0401080c 	andi	r16,zero,1056
 400fc20:	0401080c 	andi	r16,zero,1056
 400fc24:	0401080c 	andi	r16,zero,1056
 400fc28:	0401080c 	andi	r16,zero,1056
 400fc2c:	0401080c 	andi	r16,zero,1056
 400fc30:	040104cc 	andi	r16,zero,1043
 400fc34:	0401080c 	andi	r16,zero,1056
 400fc38:	0401080c 	andi	r16,zero,1056
 400fc3c:	04010538 	rdprs	r16,zero,1044
 400fc40:	0401080c 	andi	r16,zero,1056
 400fc44:	0401080c 	andi	r16,zero,1056
 400fc48:	0401080c 	andi	r16,zero,1056
 400fc4c:	0401080c 	andi	r16,zero,1056
 400fc50:	0401080c 	andi	r16,zero,1056
 400fc54:	0401080c 	andi	r16,zero,1056
 400fc58:	0401080c 	andi	r16,zero,1056
 400fc5c:	0401080c 	andi	r16,zero,1056
 400fc60:	0401080c 	andi	r16,zero,1056
 400fc64:	0401080c 	andi	r16,zero,1056
 400fc68:	040107b0 	cmpltui	r16,zero,1054
 400fc6c:	04010730 	cmpltui	r16,zero,1052
 400fc70:	0400ff90 	cmplti	r16,zero,1022
 400fc74:	0400ff90 	cmplti	r16,zero,1022
 400fc78:	0400ff90 	cmplti	r16,zero,1022
 400fc7c:	04010750 	cmplti	r16,zero,1053
 400fc80:	04010730 	cmpltui	r16,zero,1052
 400fc84:	0401080c 	andi	r16,zero,1056
 400fc88:	0401080c 	andi	r16,zero,1056
 400fc8c:	0401075c 	xori	r16,zero,1053
 400fc90:	0401080c 	andi	r16,zero,1056
 400fc94:	04010770 	cmpltui	r16,zero,1053
 400fc98:	040105f4 	movhi	r16,1047
 400fc9c:	0400fcdc 	xori	r16,zero,1011
 400fca0:	0401062c 	andhi	r16,zero,1048
 400fca4:	0401080c 	andi	r16,zero,1056
 400fca8:	04010638 	rdprs	r16,zero,1048
 400fcac:	0401080c 	andi	r16,zero,1056
 400fcb0:	0401069c 	xori	r16,zero,1050
 400fcb4:	0401080c 	andi	r16,zero,1056
 400fcb8:	0401080c 	andi	r16,zero,1056
 400fcbc:	040106bc 	xorhi	r16,zero,1050
 400fcc0:	d8c03117 	ldw	r3,196(sp)
 400fcc4:	d8802e15 	stw	r2,184(sp)
 400fcc8:	00c7c83a 	sub	r3,zero,r3
 400fccc:	d8c03115 	stw	r3,196(sp)
 400fcd0:	84000114 	ori	r16,r16,4
 400fcd4:	ac400007 	ldb	r17,0(r21)
 400fcd8:	003f9706 	br	400fb38 <__alt_mem_onchip_memory2_0+0xfc00e898>
 400fcdc:	00800c04 	movi	r2,48
 400fce0:	d8802705 	stb	r2,156(sp)
 400fce4:	00801e04 	movi	r2,120
 400fce8:	d8802745 	stb	r2,157(sp)
 400fcec:	d9002a17 	ldw	r4,168(sp)
 400fcf0:	d8802e17 	ldw	r2,184(sp)
 400fcf4:	d8002785 	stb	zero,158(sp)
 400fcf8:	e011883a 	mov	r8,fp
 400fcfc:	10c00104 	addi	r3,r2,4
 400fd00:	14c00017 	ldw	r19,0(r2)
 400fd04:	002d883a 	mov	r22,zero
 400fd08:	80800094 	ori	r2,r16,2
 400fd0c:	2002ca16 	blt	r4,zero,4010838 <___vfprintf_internal_r+0xe88>
 400fd10:	00bfdfc4 	movi	r2,-129
 400fd14:	80a4703a 	and	r18,r16,r2
 400fd18:	d8c02e15 	stw	r3,184(sp)
 400fd1c:	94800094 	ori	r18,r18,2
 400fd20:	9802b41e 	bne	r19,zero,40107f4 <___vfprintf_internal_r+0xe44>
 400fd24:	014100b4 	movhi	r5,1026
 400fd28:	295dbd04 	addi	r5,r5,30452
 400fd2c:	d9403915 	stw	r5,228(sp)
 400fd30:	04401e04 	movi	r17,120
 400fd34:	d8802a17 	ldw	r2,168(sp)
 400fd38:	0039883a 	mov	fp,zero
 400fd3c:	1001fa26 	beq	r2,zero,4010528 <___vfprintf_internal_r+0xb78>
 400fd40:	0027883a 	mov	r19,zero
 400fd44:	002d883a 	mov	r22,zero
 400fd48:	00021906 	br	40105b0 <___vfprintf_internal_r+0xc00>
 400fd4c:	d9002d17 	ldw	r4,180(sp)
 400fd50:	b80b883a 	mov	r5,r23
 400fd54:	4011d640 	call	4011d64 <__swsetup_r>
 400fd58:	1005dc1e 	bne	r2,zero,40114cc <___vfprintf_internal_r+0x1b1c>
 400fd5c:	b880030b 	ldhu	r2,12(r23)
 400fd60:	00c00284 	movi	r3,10
 400fd64:	1080068c 	andi	r2,r2,26
 400fd68:	10ff3a1e 	bne	r2,r3,400fa54 <__alt_mem_onchip_memory2_0+0xfc00e7b4>
 400fd6c:	b880038f 	ldh	r2,14(r23)
 400fd70:	103f3816 	blt	r2,zero,400fa54 <__alt_mem_onchip_memory2_0+0xfc00e7b4>
 400fd74:	d9c02e17 	ldw	r7,184(sp)
 400fd78:	d9002d17 	ldw	r4,180(sp)
 400fd7c:	a80d883a 	mov	r6,r21
 400fd80:	b80b883a 	mov	r5,r23
 400fd84:	4011ca80 	call	4011ca8 <__sbprintf>
 400fd88:	00001106 	br	400fdd0 <___vfprintf_internal_r+0x420>
 400fd8c:	d9002d17 	ldw	r4,180(sp)
 400fd90:	d9801e04 	addi	r6,sp,120
 400fd94:	b80b883a 	mov	r5,r23
 400fd98:	401674c0 	call	401674c <__sprint_r>
 400fd9c:	1000081e 	bne	r2,zero,400fdc0 <___vfprintf_internal_r+0x410>
 400fda0:	da000404 	addi	r8,sp,16
 400fda4:	003f5106 	br	400faec <__alt_mem_onchip_memory2_0+0xfc00e84c>
 400fda8:	d8802017 	ldw	r2,128(sp)
 400fdac:	10000426 	beq	r2,zero,400fdc0 <___vfprintf_internal_r+0x410>
 400fdb0:	d9002d17 	ldw	r4,180(sp)
 400fdb4:	d9801e04 	addi	r6,sp,120
 400fdb8:	b80b883a 	mov	r5,r23
 400fdbc:	401674c0 	call	401674c <__sprint_r>
 400fdc0:	b880030b 	ldhu	r2,12(r23)
 400fdc4:	1080100c 	andi	r2,r2,64
 400fdc8:	1005c01e 	bne	r2,zero,40114cc <___vfprintf_internal_r+0x1b1c>
 400fdcc:	d8802f17 	ldw	r2,188(sp)
 400fdd0:	dfc04717 	ldw	ra,284(sp)
 400fdd4:	df004617 	ldw	fp,280(sp)
 400fdd8:	ddc04517 	ldw	r23,276(sp)
 400fddc:	dd804417 	ldw	r22,272(sp)
 400fde0:	dd404317 	ldw	r21,268(sp)
 400fde4:	dd004217 	ldw	r20,264(sp)
 400fde8:	dcc04117 	ldw	r19,260(sp)
 400fdec:	dc804017 	ldw	r18,256(sp)
 400fdf0:	dc403f17 	ldw	r17,252(sp)
 400fdf4:	dc003e17 	ldw	r16,248(sp)
 400fdf8:	dec04804 	addi	sp,sp,288
 400fdfc:	f800283a 	ret
 400fe00:	d9002d17 	ldw	r4,180(sp)
 400fe04:	4013d700 	call	4013d70 <__sinit>
 400fe08:	003f0206 	br	400fa14 <__alt_mem_onchip_memory2_0+0xfc00e774>
 400fe0c:	d9002e17 	ldw	r4,184(sp)
 400fe10:	d9402e17 	ldw	r5,184(sp)
 400fe14:	21000017 	ldw	r4,0(r4)
 400fe18:	28800104 	addi	r2,r5,4
 400fe1c:	d9003115 	stw	r4,196(sp)
 400fe20:	203fa716 	blt	r4,zero,400fcc0 <__alt_mem_onchip_memory2_0+0xfc00ea20>
 400fe24:	d8802e15 	stw	r2,184(sp)
 400fe28:	ac400007 	ldb	r17,0(r21)
 400fe2c:	003f4206 	br	400fb38 <__alt_mem_onchip_memory2_0+0xfc00e898>
 400fe30:	ac400007 	ldb	r17,0(r21)
 400fe34:	01000a84 	movi	r4,42
 400fe38:	a8c00044 	addi	r3,r21,1
 400fe3c:	89075826 	beq	r17,r4,4011ba0 <___vfprintf_internal_r+0x21f0>
 400fe40:	8cbff404 	addi	r18,r17,-48
 400fe44:	b486ae36 	bltu	r22,r18,4011900 <___vfprintf_internal_r+0x1f50>
 400fe48:	0009883a 	mov	r4,zero
 400fe4c:	1823883a 	mov	r17,r3
 400fe50:	01400284 	movi	r5,10
 400fe54:	400d7980 	call	400d798 <__mulsi3>
 400fe58:	88c00007 	ldb	r3,0(r17)
 400fe5c:	1489883a 	add	r4,r2,r18
 400fe60:	8d400044 	addi	r21,r17,1
 400fe64:	1cbff404 	addi	r18,r3,-48
 400fe68:	a823883a 	mov	r17,r21
 400fe6c:	b4bff82e 	bgeu	r22,r18,400fe50 <__alt_mem_onchip_memory2_0+0xfc00ebb0>
 400fe70:	1823883a 	mov	r17,r3
 400fe74:	2005f616 	blt	r4,zero,4011650 <___vfprintf_internal_r+0x1ca0>
 400fe78:	d9002a15 	stw	r4,168(sp)
 400fe7c:	003f2f06 	br	400fb3c <__alt_mem_onchip_memory2_0+0xfc00e89c>
 400fe80:	84002014 	ori	r16,r16,128
 400fe84:	ac400007 	ldb	r17,0(r21)
 400fe88:	003f2b06 	br	400fb38 <__alt_mem_onchip_memory2_0+0xfc00e898>
 400fe8c:	8cbff404 	addi	r18,r17,-48
 400fe90:	d8003115 	stw	zero,196(sp)
 400fe94:	0009883a 	mov	r4,zero
 400fe98:	a823883a 	mov	r17,r21
 400fe9c:	01400284 	movi	r5,10
 400fea0:	400d7980 	call	400d798 <__mulsi3>
 400fea4:	88c00007 	ldb	r3,0(r17)
 400fea8:	9089883a 	add	r4,r18,r2
 400feac:	ad400044 	addi	r21,r21,1
 400feb0:	1cbff404 	addi	r18,r3,-48
 400feb4:	a823883a 	mov	r17,r21
 400feb8:	b4bff82e 	bgeu	r22,r18,400fe9c <__alt_mem_onchip_memory2_0+0xfc00ebfc>
 400febc:	1823883a 	mov	r17,r3
 400fec0:	d9003115 	stw	r4,196(sp)
 400fec4:	003f1d06 	br	400fb3c <__alt_mem_onchip_memory2_0+0xfc00e89c>
 400fec8:	8025883a 	mov	r18,r16
 400fecc:	dc002903 	ldbu	r16,164(sp)
 400fed0:	e011883a 	mov	r8,fp
 400fed4:	84003fcc 	andi	r16,r16,255
 400fed8:	8007531e 	bne	r16,zero,4011c28 <___vfprintf_internal_r+0x2278>
 400fedc:	94800414 	ori	r18,r18,16
 400fee0:	9080080c 	andi	r2,r18,32
 400fee4:	1003a326 	beq	r2,zero,4010d74 <___vfprintf_internal_r+0x13c4>
 400fee8:	d9002e17 	ldw	r4,184(sp)
 400feec:	20800117 	ldw	r2,4(r4)
 400fef0:	24c00017 	ldw	r19,0(r4)
 400fef4:	21000204 	addi	r4,r4,8
 400fef8:	d9002e15 	stw	r4,184(sp)
 400fefc:	102d883a 	mov	r22,r2
 400ff00:	10047316 	blt	r2,zero,40110d0 <___vfprintf_internal_r+0x1720>
 400ff04:	d9002a17 	ldw	r4,168(sp)
 400ff08:	df002783 	ldbu	fp,158(sp)
 400ff0c:	2003e416 	blt	r4,zero,4010ea0 <___vfprintf_internal_r+0x14f0>
 400ff10:	00ffdfc4 	movi	r3,-129
 400ff14:	9d84b03a 	or	r2,r19,r22
 400ff18:	90e4703a 	and	r18,r18,r3
 400ff1c:	10018026 	beq	r2,zero,4010520 <___vfprintf_internal_r+0xb70>
 400ff20:	b003ab26 	beq	r22,zero,4010dd0 <___vfprintf_internal_r+0x1420>
 400ff24:	dc402915 	stw	r17,164(sp)
 400ff28:	dc001e04 	addi	r16,sp,120
 400ff2c:	b023883a 	mov	r17,r22
 400ff30:	402d883a 	mov	r22,r8
 400ff34:	9809883a 	mov	r4,r19
 400ff38:	880b883a 	mov	r5,r17
 400ff3c:	01800284 	movi	r6,10
 400ff40:	000f883a 	mov	r7,zero
 400ff44:	4018c900 	call	4018c90 <__umoddi3>
 400ff48:	10800c04 	addi	r2,r2,48
 400ff4c:	843fffc4 	addi	r16,r16,-1
 400ff50:	9809883a 	mov	r4,r19
 400ff54:	880b883a 	mov	r5,r17
 400ff58:	80800005 	stb	r2,0(r16)
 400ff5c:	01800284 	movi	r6,10
 400ff60:	000f883a 	mov	r7,zero
 400ff64:	40186940 	call	4018694 <__udivdi3>
 400ff68:	1027883a 	mov	r19,r2
 400ff6c:	10c4b03a 	or	r2,r2,r3
 400ff70:	1823883a 	mov	r17,r3
 400ff74:	103fef1e 	bne	r2,zero,400ff34 <__alt_mem_onchip_memory2_0+0xfc00ec94>
 400ff78:	d8c02817 	ldw	r3,160(sp)
 400ff7c:	dc402917 	ldw	r17,164(sp)
 400ff80:	b011883a 	mov	r8,r22
 400ff84:	1c07c83a 	sub	r3,r3,r16
 400ff88:	d8c02b15 	stw	r3,172(sp)
 400ff8c:	00005f06 	br	401010c <___vfprintf_internal_r+0x75c>
 400ff90:	8025883a 	mov	r18,r16
 400ff94:	dc002903 	ldbu	r16,164(sp)
 400ff98:	e011883a 	mov	r8,fp
 400ff9c:	84003fcc 	andi	r16,r16,255
 400ffa0:	80071e1e 	bne	r16,zero,4011c1c <___vfprintf_internal_r+0x226c>
 400ffa4:	9080020c 	andi	r2,r18,8
 400ffa8:	1004af26 	beq	r2,zero,4011268 <___vfprintf_internal_r+0x18b8>
 400ffac:	d9002e17 	ldw	r4,184(sp)
 400ffb0:	d9402e17 	ldw	r5,184(sp)
 400ffb4:	d8802e17 	ldw	r2,184(sp)
 400ffb8:	21000017 	ldw	r4,0(r4)
 400ffbc:	29400117 	ldw	r5,4(r5)
 400ffc0:	10800204 	addi	r2,r2,8
 400ffc4:	d9003615 	stw	r4,216(sp)
 400ffc8:	d9403815 	stw	r5,224(sp)
 400ffcc:	d8802e15 	stw	r2,184(sp)
 400ffd0:	d9003617 	ldw	r4,216(sp)
 400ffd4:	d9403817 	ldw	r5,224(sp)
 400ffd8:	da003d15 	stw	r8,244(sp)
 400ffdc:	04000044 	movi	r16,1
 400ffe0:	40164a00 	call	40164a0 <__fpclassifyd>
 400ffe4:	da003d17 	ldw	r8,244(sp)
 400ffe8:	1404441e 	bne	r2,r16,40110fc <___vfprintf_internal_r+0x174c>
 400ffec:	d9003617 	ldw	r4,216(sp)
 400fff0:	d9403817 	ldw	r5,224(sp)
 400fff4:	000d883a 	mov	r6,zero
 400fff8:	000f883a 	mov	r7,zero
 400fffc:	401a6340 	call	401a634 <__ledf2>
 4010000:	da003d17 	ldw	r8,244(sp)
 4010004:	1005e316 	blt	r2,zero,4011794 <___vfprintf_internal_r+0x1de4>
 4010008:	df002783 	ldbu	fp,158(sp)
 401000c:	008011c4 	movi	r2,71
 4010010:	1445580e 	bge	r2,r17,4011574 <___vfprintf_internal_r+0x1bc4>
 4010014:	040100b4 	movhi	r16,1026
 4010018:	841db504 	addi	r16,r16,30420
 401001c:	00c000c4 	movi	r3,3
 4010020:	00bfdfc4 	movi	r2,-129
 4010024:	d8c02915 	stw	r3,164(sp)
 4010028:	90a4703a 	and	r18,r18,r2
 401002c:	d8c02b15 	stw	r3,172(sp)
 4010030:	d8002a15 	stw	zero,168(sp)
 4010034:	d8003215 	stw	zero,200(sp)
 4010038:	00003a06 	br	4010124 <___vfprintf_internal_r+0x774>
 401003c:	84000214 	ori	r16,r16,8
 4010040:	ac400007 	ldb	r17,0(r21)
 4010044:	003ebc06 	br	400fb38 <__alt_mem_onchip_memory2_0+0xfc00e898>
 4010048:	8025883a 	mov	r18,r16
 401004c:	dc002903 	ldbu	r16,164(sp)
 4010050:	e011883a 	mov	r8,fp
 4010054:	84003fcc 	andi	r16,r16,255
 4010058:	8007001e 	bne	r16,zero,4011c5c <___vfprintf_internal_r+0x22ac>
 401005c:	94800414 	ori	r18,r18,16
 4010060:	9080080c 	andi	r2,r18,32
 4010064:	1002fa26 	beq	r2,zero,4010c50 <___vfprintf_internal_r+0x12a0>
 4010068:	d9002e17 	ldw	r4,184(sp)
 401006c:	d9402a17 	ldw	r5,168(sp)
 4010070:	d8002785 	stb	zero,158(sp)
 4010074:	20800204 	addi	r2,r4,8
 4010078:	24c00017 	ldw	r19,0(r4)
 401007c:	25800117 	ldw	r22,4(r4)
 4010080:	2804b116 	blt	r5,zero,4011348 <___vfprintf_internal_r+0x1998>
 4010084:	013fdfc4 	movi	r4,-129
 4010088:	9d86b03a 	or	r3,r19,r22
 401008c:	d8802e15 	stw	r2,184(sp)
 4010090:	9124703a 	and	r18,r18,r4
 4010094:	1802fb1e 	bne	r3,zero,4010c84 <___vfprintf_internal_r+0x12d4>
 4010098:	d8c02a17 	ldw	r3,168(sp)
 401009c:	0039883a 	mov	fp,zero
 40100a0:	1805e526 	beq	r3,zero,4011838 <___vfprintf_internal_r+0x1e88>
 40100a4:	0027883a 	mov	r19,zero
 40100a8:	002d883a 	mov	r22,zero
 40100ac:	dc001e04 	addi	r16,sp,120
 40100b0:	9806d0fa 	srli	r3,r19,3
 40100b4:	b008977a 	slli	r4,r22,29
 40100b8:	b02cd0fa 	srli	r22,r22,3
 40100bc:	9cc001cc 	andi	r19,r19,7
 40100c0:	98800c04 	addi	r2,r19,48
 40100c4:	843fffc4 	addi	r16,r16,-1
 40100c8:	20e6b03a 	or	r19,r4,r3
 40100cc:	80800005 	stb	r2,0(r16)
 40100d0:	9d86b03a 	or	r3,r19,r22
 40100d4:	183ff61e 	bne	r3,zero,40100b0 <__alt_mem_onchip_memory2_0+0xfc00ee10>
 40100d8:	90c0004c 	andi	r3,r18,1
 40100dc:	18014126 	beq	r3,zero,40105e4 <___vfprintf_internal_r+0xc34>
 40100e0:	10803fcc 	andi	r2,r2,255
 40100e4:	1080201c 	xori	r2,r2,128
 40100e8:	10bfe004 	addi	r2,r2,-128
 40100ec:	00c00c04 	movi	r3,48
 40100f0:	10c13c26 	beq	r2,r3,40105e4 <___vfprintf_internal_r+0xc34>
 40100f4:	80ffffc5 	stb	r3,-1(r16)
 40100f8:	d8c02817 	ldw	r3,160(sp)
 40100fc:	80bfffc4 	addi	r2,r16,-1
 4010100:	1021883a 	mov	r16,r2
 4010104:	1887c83a 	sub	r3,r3,r2
 4010108:	d8c02b15 	stw	r3,172(sp)
 401010c:	d8802b17 	ldw	r2,172(sp)
 4010110:	d9002a17 	ldw	r4,168(sp)
 4010114:	1100010e 	bge	r2,r4,401011c <___vfprintf_internal_r+0x76c>
 4010118:	2005883a 	mov	r2,r4
 401011c:	d8802915 	stw	r2,164(sp)
 4010120:	d8003215 	stw	zero,200(sp)
 4010124:	e7003fcc 	andi	fp,fp,255
 4010128:	e700201c 	xori	fp,fp,128
 401012c:	e73fe004 	addi	fp,fp,-128
 4010130:	e0000326 	beq	fp,zero,4010140 <___vfprintf_internal_r+0x790>
 4010134:	d8c02917 	ldw	r3,164(sp)
 4010138:	18c00044 	addi	r3,r3,1
 401013c:	d8c02915 	stw	r3,164(sp)
 4010140:	90c0008c 	andi	r3,r18,2
 4010144:	d8c02c15 	stw	r3,176(sp)
 4010148:	18000326 	beq	r3,zero,4010158 <___vfprintf_internal_r+0x7a8>
 401014c:	d8c02917 	ldw	r3,164(sp)
 4010150:	18c00084 	addi	r3,r3,2
 4010154:	d8c02915 	stw	r3,164(sp)
 4010158:	90c0210c 	andi	r3,r18,132
 401015c:	d8c03015 	stw	r3,192(sp)
 4010160:	1801c51e 	bne	r3,zero,4010878 <___vfprintf_internal_r+0xec8>
 4010164:	d9003117 	ldw	r4,196(sp)
 4010168:	d8c02917 	ldw	r3,164(sp)
 401016c:	20e7c83a 	sub	r19,r4,r3
 4010170:	04c1c10e 	bge	zero,r19,4010878 <___vfprintf_internal_r+0xec8>
 4010174:	02400404 	movi	r9,16
 4010178:	d8c02017 	ldw	r3,128(sp)
 401017c:	d8801f17 	ldw	r2,124(sp)
 4010180:	4cc52f0e 	bge	r9,r19,4011640 <___vfprintf_internal_r+0x1c90>
 4010184:	014100b4 	movhi	r5,1026
 4010188:	295dc884 	addi	r5,r5,30498
 401018c:	dc403b15 	stw	r17,236(sp)
 4010190:	d9403515 	stw	r5,212(sp)
 4010194:	9823883a 	mov	r17,r19
 4010198:	482d883a 	mov	r22,r9
 401019c:	9027883a 	mov	r19,r18
 40101a0:	070001c4 	movi	fp,7
 40101a4:	8025883a 	mov	r18,r16
 40101a8:	dc002d17 	ldw	r16,180(sp)
 40101ac:	00000306 	br	40101bc <___vfprintf_internal_r+0x80c>
 40101b0:	8c7ffc04 	addi	r17,r17,-16
 40101b4:	42000204 	addi	r8,r8,8
 40101b8:	b440130e 	bge	r22,r17,4010208 <___vfprintf_internal_r+0x858>
 40101bc:	010100b4 	movhi	r4,1026
 40101c0:	18c00404 	addi	r3,r3,16
 40101c4:	10800044 	addi	r2,r2,1
 40101c8:	211dc884 	addi	r4,r4,30498
 40101cc:	41000015 	stw	r4,0(r8)
 40101d0:	45800115 	stw	r22,4(r8)
 40101d4:	d8c02015 	stw	r3,128(sp)
 40101d8:	d8801f15 	stw	r2,124(sp)
 40101dc:	e0bff40e 	bge	fp,r2,40101b0 <__alt_mem_onchip_memory2_0+0xfc00ef10>
 40101e0:	d9801e04 	addi	r6,sp,120
 40101e4:	b80b883a 	mov	r5,r23
 40101e8:	8009883a 	mov	r4,r16
 40101ec:	401674c0 	call	401674c <__sprint_r>
 40101f0:	103ef31e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 40101f4:	8c7ffc04 	addi	r17,r17,-16
 40101f8:	d8c02017 	ldw	r3,128(sp)
 40101fc:	d8801f17 	ldw	r2,124(sp)
 4010200:	da000404 	addi	r8,sp,16
 4010204:	b47fed16 	blt	r22,r17,40101bc <__alt_mem_onchip_memory2_0+0xfc00ef1c>
 4010208:	9021883a 	mov	r16,r18
 401020c:	9825883a 	mov	r18,r19
 4010210:	8827883a 	mov	r19,r17
 4010214:	dc403b17 	ldw	r17,236(sp)
 4010218:	d9403517 	ldw	r5,212(sp)
 401021c:	98c7883a 	add	r3,r19,r3
 4010220:	10800044 	addi	r2,r2,1
 4010224:	41400015 	stw	r5,0(r8)
 4010228:	44c00115 	stw	r19,4(r8)
 401022c:	d8c02015 	stw	r3,128(sp)
 4010230:	d8801f15 	stw	r2,124(sp)
 4010234:	010001c4 	movi	r4,7
 4010238:	2082c516 	blt	r4,r2,4010d50 <___vfprintf_internal_r+0x13a0>
 401023c:	df002787 	ldb	fp,158(sp)
 4010240:	42000204 	addi	r8,r8,8
 4010244:	e0000c26 	beq	fp,zero,4010278 <___vfprintf_internal_r+0x8c8>
 4010248:	d8801f17 	ldw	r2,124(sp)
 401024c:	d9002784 	addi	r4,sp,158
 4010250:	18c00044 	addi	r3,r3,1
 4010254:	10800044 	addi	r2,r2,1
 4010258:	41000015 	stw	r4,0(r8)
 401025c:	01000044 	movi	r4,1
 4010260:	41000115 	stw	r4,4(r8)
 4010264:	d8c02015 	stw	r3,128(sp)
 4010268:	d8801f15 	stw	r2,124(sp)
 401026c:	010001c4 	movi	r4,7
 4010270:	20825e16 	blt	r4,r2,4010bec <___vfprintf_internal_r+0x123c>
 4010274:	42000204 	addi	r8,r8,8
 4010278:	d8802c17 	ldw	r2,176(sp)
 401027c:	10000c26 	beq	r2,zero,40102b0 <___vfprintf_internal_r+0x900>
 4010280:	d8801f17 	ldw	r2,124(sp)
 4010284:	d9002704 	addi	r4,sp,156
 4010288:	18c00084 	addi	r3,r3,2
 401028c:	10800044 	addi	r2,r2,1
 4010290:	41000015 	stw	r4,0(r8)
 4010294:	01000084 	movi	r4,2
 4010298:	41000115 	stw	r4,4(r8)
 401029c:	d8c02015 	stw	r3,128(sp)
 40102a0:	d8801f15 	stw	r2,124(sp)
 40102a4:	010001c4 	movi	r4,7
 40102a8:	20825816 	blt	r4,r2,4010c0c <___vfprintf_internal_r+0x125c>
 40102ac:	42000204 	addi	r8,r8,8
 40102b0:	d9003017 	ldw	r4,192(sp)
 40102b4:	00802004 	movi	r2,128
 40102b8:	2081bb26 	beq	r4,r2,40109a8 <___vfprintf_internal_r+0xff8>
 40102bc:	d9402a17 	ldw	r5,168(sp)
 40102c0:	d8802b17 	ldw	r2,172(sp)
 40102c4:	28adc83a 	sub	r22,r5,r2
 40102c8:	0580310e 	bge	zero,r22,4010390 <___vfprintf_internal_r+0x9e0>
 40102cc:	07000404 	movi	fp,16
 40102d0:	d8801f17 	ldw	r2,124(sp)
 40102d4:	e584360e 	bge	fp,r22,40113b0 <___vfprintf_internal_r+0x1a00>
 40102d8:	014100b4 	movhi	r5,1026
 40102dc:	295dc484 	addi	r5,r5,30482
 40102e0:	dc402a15 	stw	r17,168(sp)
 40102e4:	d9402c15 	stw	r5,176(sp)
 40102e8:	b023883a 	mov	r17,r22
 40102ec:	04c001c4 	movi	r19,7
 40102f0:	a82d883a 	mov	r22,r21
 40102f4:	902b883a 	mov	r21,r18
 40102f8:	8025883a 	mov	r18,r16
 40102fc:	dc002d17 	ldw	r16,180(sp)
 4010300:	00000306 	br	4010310 <___vfprintf_internal_r+0x960>
 4010304:	8c7ffc04 	addi	r17,r17,-16
 4010308:	42000204 	addi	r8,r8,8
 401030c:	e440110e 	bge	fp,r17,4010354 <___vfprintf_internal_r+0x9a4>
 4010310:	18c00404 	addi	r3,r3,16
 4010314:	10800044 	addi	r2,r2,1
 4010318:	45000015 	stw	r20,0(r8)
 401031c:	47000115 	stw	fp,4(r8)
 4010320:	d8c02015 	stw	r3,128(sp)
 4010324:	d8801f15 	stw	r2,124(sp)
 4010328:	98bff60e 	bge	r19,r2,4010304 <__alt_mem_onchip_memory2_0+0xfc00f064>
 401032c:	d9801e04 	addi	r6,sp,120
 4010330:	b80b883a 	mov	r5,r23
 4010334:	8009883a 	mov	r4,r16
 4010338:	401674c0 	call	401674c <__sprint_r>
 401033c:	103ea01e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4010340:	8c7ffc04 	addi	r17,r17,-16
 4010344:	d8c02017 	ldw	r3,128(sp)
 4010348:	d8801f17 	ldw	r2,124(sp)
 401034c:	da000404 	addi	r8,sp,16
 4010350:	e47fef16 	blt	fp,r17,4010310 <__alt_mem_onchip_memory2_0+0xfc00f070>
 4010354:	9021883a 	mov	r16,r18
 4010358:	a825883a 	mov	r18,r21
 401035c:	b02b883a 	mov	r21,r22
 4010360:	882d883a 	mov	r22,r17
 4010364:	dc402a17 	ldw	r17,168(sp)
 4010368:	d9002c17 	ldw	r4,176(sp)
 401036c:	1d87883a 	add	r3,r3,r22
 4010370:	10800044 	addi	r2,r2,1
 4010374:	41000015 	stw	r4,0(r8)
 4010378:	45800115 	stw	r22,4(r8)
 401037c:	d8c02015 	stw	r3,128(sp)
 4010380:	d8801f15 	stw	r2,124(sp)
 4010384:	010001c4 	movi	r4,7
 4010388:	20821016 	blt	r4,r2,4010bcc <___vfprintf_internal_r+0x121c>
 401038c:	42000204 	addi	r8,r8,8
 4010390:	9080400c 	andi	r2,r18,256
 4010394:	10013a1e 	bne	r2,zero,4010880 <___vfprintf_internal_r+0xed0>
 4010398:	d9402b17 	ldw	r5,172(sp)
 401039c:	d8801f17 	ldw	r2,124(sp)
 40103a0:	44000015 	stw	r16,0(r8)
 40103a4:	1947883a 	add	r3,r3,r5
 40103a8:	10800044 	addi	r2,r2,1
 40103ac:	41400115 	stw	r5,4(r8)
 40103b0:	d8c02015 	stw	r3,128(sp)
 40103b4:	d8801f15 	stw	r2,124(sp)
 40103b8:	010001c4 	movi	r4,7
 40103bc:	2081f516 	blt	r4,r2,4010b94 <___vfprintf_internal_r+0x11e4>
 40103c0:	42000204 	addi	r8,r8,8
 40103c4:	9480010c 	andi	r18,r18,4
 40103c8:	90003226 	beq	r18,zero,4010494 <___vfprintf_internal_r+0xae4>
 40103cc:	d9403117 	ldw	r5,196(sp)
 40103d0:	d8802917 	ldw	r2,164(sp)
 40103d4:	28a1c83a 	sub	r16,r5,r2
 40103d8:	04002e0e 	bge	zero,r16,4010494 <___vfprintf_internal_r+0xae4>
 40103dc:	04400404 	movi	r17,16
 40103e0:	d8801f17 	ldw	r2,124(sp)
 40103e4:	8c04c40e 	bge	r17,r16,40116f8 <___vfprintf_internal_r+0x1d48>
 40103e8:	014100b4 	movhi	r5,1026
 40103ec:	295dc884 	addi	r5,r5,30498
 40103f0:	d9403515 	stw	r5,212(sp)
 40103f4:	048001c4 	movi	r18,7
 40103f8:	dcc02d17 	ldw	r19,180(sp)
 40103fc:	00000306 	br	401040c <___vfprintf_internal_r+0xa5c>
 4010400:	843ffc04 	addi	r16,r16,-16
 4010404:	42000204 	addi	r8,r8,8
 4010408:	8c00130e 	bge	r17,r16,4010458 <___vfprintf_internal_r+0xaa8>
 401040c:	010100b4 	movhi	r4,1026
 4010410:	18c00404 	addi	r3,r3,16
 4010414:	10800044 	addi	r2,r2,1
 4010418:	211dc884 	addi	r4,r4,30498
 401041c:	41000015 	stw	r4,0(r8)
 4010420:	44400115 	stw	r17,4(r8)
 4010424:	d8c02015 	stw	r3,128(sp)
 4010428:	d8801f15 	stw	r2,124(sp)
 401042c:	90bff40e 	bge	r18,r2,4010400 <__alt_mem_onchip_memory2_0+0xfc00f160>
 4010430:	d9801e04 	addi	r6,sp,120
 4010434:	b80b883a 	mov	r5,r23
 4010438:	9809883a 	mov	r4,r19
 401043c:	401674c0 	call	401674c <__sprint_r>
 4010440:	103e5f1e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4010444:	843ffc04 	addi	r16,r16,-16
 4010448:	d8c02017 	ldw	r3,128(sp)
 401044c:	d8801f17 	ldw	r2,124(sp)
 4010450:	da000404 	addi	r8,sp,16
 4010454:	8c3fed16 	blt	r17,r16,401040c <__alt_mem_onchip_memory2_0+0xfc00f16c>
 4010458:	d9403517 	ldw	r5,212(sp)
 401045c:	1c07883a 	add	r3,r3,r16
 4010460:	10800044 	addi	r2,r2,1
 4010464:	41400015 	stw	r5,0(r8)
 4010468:	44000115 	stw	r16,4(r8)
 401046c:	d8c02015 	stw	r3,128(sp)
 4010470:	d8801f15 	stw	r2,124(sp)
 4010474:	010001c4 	movi	r4,7
 4010478:	2080060e 	bge	r4,r2,4010494 <___vfprintf_internal_r+0xae4>
 401047c:	d9002d17 	ldw	r4,180(sp)
 4010480:	d9801e04 	addi	r6,sp,120
 4010484:	b80b883a 	mov	r5,r23
 4010488:	401674c0 	call	401674c <__sprint_r>
 401048c:	103e4c1e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4010490:	d8c02017 	ldw	r3,128(sp)
 4010494:	d8803117 	ldw	r2,196(sp)
 4010498:	d9002917 	ldw	r4,164(sp)
 401049c:	1100010e 	bge	r2,r4,40104a4 <___vfprintf_internal_r+0xaf4>
 40104a0:	2005883a 	mov	r2,r4
 40104a4:	d9402f17 	ldw	r5,188(sp)
 40104a8:	288b883a 	add	r5,r5,r2
 40104ac:	d9402f15 	stw	r5,188(sp)
 40104b0:	1801c01e 	bne	r3,zero,4010bb4 <___vfprintf_internal_r+0x1204>
 40104b4:	a8800007 	ldb	r2,0(r21)
 40104b8:	d8001f15 	stw	zero,124(sp)
 40104bc:	da000404 	addi	r8,sp,16
 40104c0:	103d751e 	bne	r2,zero,400fa98 <__alt_mem_onchip_memory2_0+0xfc00e7f8>
 40104c4:	a823883a 	mov	r17,r21
 40104c8:	003d8b06 	br	400faf8 <__alt_mem_onchip_memory2_0+0xfc00e858>
 40104cc:	8025883a 	mov	r18,r16
 40104d0:	dc002903 	ldbu	r16,164(sp)
 40104d4:	e011883a 	mov	r8,fp
 40104d8:	84003fcc 	andi	r16,r16,255
 40104dc:	8005e51e 	bne	r16,zero,4011c74 <___vfprintf_internal_r+0x22c4>
 40104e0:	94800414 	ori	r18,r18,16
 40104e4:	9080080c 	andi	r2,r18,32
 40104e8:	10022b26 	beq	r2,zero,4010d98 <___vfprintf_internal_r+0x13e8>
 40104ec:	d9002e17 	ldw	r4,184(sp)
 40104f0:	d9402a17 	ldw	r5,168(sp)
 40104f4:	d8002785 	stb	zero,158(sp)
 40104f8:	20c00204 	addi	r3,r4,8
 40104fc:	24c00017 	ldw	r19,0(r4)
 4010500:	25800117 	ldw	r22,4(r4)
 4010504:	28042e16 	blt	r5,zero,40115c0 <___vfprintf_internal_r+0x1c10>
 4010508:	013fdfc4 	movi	r4,-129
 401050c:	9d84b03a 	or	r2,r19,r22
 4010510:	d8c02e15 	stw	r3,184(sp)
 4010514:	9124703a 	and	r18,r18,r4
 4010518:	0039883a 	mov	fp,zero
 401051c:	103e801e 	bne	r2,zero,400ff20 <__alt_mem_onchip_memory2_0+0xfc00ec80>
 4010520:	d9002a17 	ldw	r4,168(sp)
 4010524:	2002e01e 	bne	r4,zero,40110a8 <___vfprintf_internal_r+0x16f8>
 4010528:	d8002a15 	stw	zero,168(sp)
 401052c:	d8002b15 	stw	zero,172(sp)
 4010530:	dc001e04 	addi	r16,sp,120
 4010534:	003ef506 	br	401010c <__alt_mem_onchip_memory2_0+0xfc00ee6c>
 4010538:	8025883a 	mov	r18,r16
 401053c:	dc002903 	ldbu	r16,164(sp)
 4010540:	e011883a 	mov	r8,fp
 4010544:	84003fcc 	andi	r16,r16,255
 4010548:	8005ba1e 	bne	r16,zero,4011c34 <___vfprintf_internal_r+0x2284>
 401054c:	010100b4 	movhi	r4,1026
 4010550:	211db804 	addi	r4,r4,30432
 4010554:	d9003915 	stw	r4,228(sp)
 4010558:	9080080c 	andi	r2,r18,32
 401055c:	10006126 	beq	r2,zero,40106e4 <___vfprintf_internal_r+0xd34>
 4010560:	d9402e17 	ldw	r5,184(sp)
 4010564:	2cc00017 	ldw	r19,0(r5)
 4010568:	2d800117 	ldw	r22,4(r5)
 401056c:	29400204 	addi	r5,r5,8
 4010570:	d9402e15 	stw	r5,184(sp)
 4010574:	9080004c 	andi	r2,r18,1
 4010578:	1001ac26 	beq	r2,zero,4010c2c <___vfprintf_internal_r+0x127c>
 401057c:	9d84b03a 	or	r2,r19,r22
 4010580:	10038526 	beq	r2,zero,4011398 <___vfprintf_internal_r+0x19e8>
 4010584:	d8c02a17 	ldw	r3,168(sp)
 4010588:	00800c04 	movi	r2,48
 401058c:	d8802705 	stb	r2,156(sp)
 4010590:	dc402745 	stb	r17,157(sp)
 4010594:	d8002785 	stb	zero,158(sp)
 4010598:	90800094 	ori	r2,r18,2
 401059c:	18047916 	blt	r3,zero,4011784 <___vfprintf_internal_r+0x1dd4>
 40105a0:	00bfdfc4 	movi	r2,-129
 40105a4:	90a4703a 	and	r18,r18,r2
 40105a8:	94800094 	ori	r18,r18,2
 40105ac:	0039883a 	mov	fp,zero
 40105b0:	d9003917 	ldw	r4,228(sp)
 40105b4:	dc001e04 	addi	r16,sp,120
 40105b8:	988003cc 	andi	r2,r19,15
 40105bc:	b006973a 	slli	r3,r22,28
 40105c0:	2085883a 	add	r2,r4,r2
 40105c4:	9826d13a 	srli	r19,r19,4
 40105c8:	10800003 	ldbu	r2,0(r2)
 40105cc:	b02cd13a 	srli	r22,r22,4
 40105d0:	843fffc4 	addi	r16,r16,-1
 40105d4:	1ce6b03a 	or	r19,r3,r19
 40105d8:	80800005 	stb	r2,0(r16)
 40105dc:	9d84b03a 	or	r2,r19,r22
 40105e0:	103ff51e 	bne	r2,zero,40105b8 <__alt_mem_onchip_memory2_0+0xfc00f318>
 40105e4:	d8c02817 	ldw	r3,160(sp)
 40105e8:	1c07c83a 	sub	r3,r3,r16
 40105ec:	d8c02b15 	stw	r3,172(sp)
 40105f0:	003ec606 	br	401010c <__alt_mem_onchip_memory2_0+0xfc00ee6c>
 40105f4:	8025883a 	mov	r18,r16
 40105f8:	dc002903 	ldbu	r16,164(sp)
 40105fc:	e011883a 	mov	r8,fp
 4010600:	84003fcc 	andi	r16,r16,255
 4010604:	803e9626 	beq	r16,zero,4010060 <__alt_mem_onchip_memory2_0+0xfc00edc0>
 4010608:	d8c02b03 	ldbu	r3,172(sp)
 401060c:	d8c02785 	stb	r3,158(sp)
 4010610:	003e9306 	br	4010060 <__alt_mem_onchip_memory2_0+0xfc00edc0>
 4010614:	00c00044 	movi	r3,1
 4010618:	d8c02905 	stb	r3,164(sp)
 401061c:	00c00ac4 	movi	r3,43
 4010620:	d8c02b05 	stb	r3,172(sp)
 4010624:	ac400007 	ldb	r17,0(r21)
 4010628:	003d4306 	br	400fb38 <__alt_mem_onchip_memory2_0+0xfc00e898>
 401062c:	84000814 	ori	r16,r16,32
 4010630:	ac400007 	ldb	r17,0(r21)
 4010634:	003d4006 	br	400fb38 <__alt_mem_onchip_memory2_0+0xfc00e898>
 4010638:	d8802e17 	ldw	r2,184(sp)
 401063c:	8025883a 	mov	r18,r16
 4010640:	d8002785 	stb	zero,158(sp)
 4010644:	14000017 	ldw	r16,0(r2)
 4010648:	e011883a 	mov	r8,fp
 401064c:	14c00104 	addi	r19,r2,4
 4010650:	80042d26 	beq	r16,zero,4011708 <___vfprintf_internal_r+0x1d58>
 4010654:	d8c02a17 	ldw	r3,168(sp)
 4010658:	1803e416 	blt	r3,zero,40115ec <___vfprintf_internal_r+0x1c3c>
 401065c:	180d883a 	mov	r6,r3
 4010660:	000b883a 	mov	r5,zero
 4010664:	8009883a 	mov	r4,r16
 4010668:	df003d15 	stw	fp,244(sp)
 401066c:	4014adc0 	call	4014adc <memchr>
 4010670:	da003d17 	ldw	r8,244(sp)
 4010674:	10046826 	beq	r2,zero,4011818 <___vfprintf_internal_r+0x1e68>
 4010678:	1405c83a 	sub	r2,r2,r16
 401067c:	d8802b15 	stw	r2,172(sp)
 4010680:	1003e016 	blt	r2,zero,4011604 <___vfprintf_internal_r+0x1c54>
 4010684:	df002783 	ldbu	fp,158(sp)
 4010688:	d8802915 	stw	r2,164(sp)
 401068c:	dcc02e15 	stw	r19,184(sp)
 4010690:	d8002a15 	stw	zero,168(sp)
 4010694:	d8003215 	stw	zero,200(sp)
 4010698:	003ea206 	br	4010124 <__alt_mem_onchip_memory2_0+0xfc00ee84>
 401069c:	8025883a 	mov	r18,r16
 40106a0:	dc002903 	ldbu	r16,164(sp)
 40106a4:	e011883a 	mov	r8,fp
 40106a8:	84003fcc 	andi	r16,r16,255
 40106ac:	803f8d26 	beq	r16,zero,40104e4 <__alt_mem_onchip_memory2_0+0xfc00f244>
 40106b0:	d8c02b03 	ldbu	r3,172(sp)
 40106b4:	d8c02785 	stb	r3,158(sp)
 40106b8:	003f8a06 	br	40104e4 <__alt_mem_onchip_memory2_0+0xfc00f244>
 40106bc:	8025883a 	mov	r18,r16
 40106c0:	dc002903 	ldbu	r16,164(sp)
 40106c4:	e011883a 	mov	r8,fp
 40106c8:	84003fcc 	andi	r16,r16,255
 40106cc:	8005661e 	bne	r16,zero,4011c68 <___vfprintf_internal_r+0x22b8>
 40106d0:	010100b4 	movhi	r4,1026
 40106d4:	211dbd04 	addi	r4,r4,30452
 40106d8:	d9003915 	stw	r4,228(sp)
 40106dc:	9080080c 	andi	r2,r18,32
 40106e0:	103f9f1e 	bne	r2,zero,4010560 <__alt_mem_onchip_memory2_0+0xfc00f2c0>
 40106e4:	9080040c 	andi	r2,r18,16
 40106e8:	1002eb26 	beq	r2,zero,4011298 <___vfprintf_internal_r+0x18e8>
 40106ec:	d8802e17 	ldw	r2,184(sp)
 40106f0:	002d883a 	mov	r22,zero
 40106f4:	14c00017 	ldw	r19,0(r2)
 40106f8:	10800104 	addi	r2,r2,4
 40106fc:	d8802e15 	stw	r2,184(sp)
 4010700:	003f9c06 	br	4010574 <__alt_mem_onchip_memory2_0+0xfc00f2d4>
 4010704:	d8802b07 	ldb	r2,172(sp)
 4010708:	1002e11e 	bne	r2,zero,4011290 <___vfprintf_internal_r+0x18e0>
 401070c:	00c00044 	movi	r3,1
 4010710:	d8c02905 	stb	r3,164(sp)
 4010714:	00c00804 	movi	r3,32
 4010718:	d8c02b05 	stb	r3,172(sp)
 401071c:	ac400007 	ldb	r17,0(r21)
 4010720:	003d0506 	br	400fb38 <__alt_mem_onchip_memory2_0+0xfc00e898>
 4010724:	84000054 	ori	r16,r16,1
 4010728:	ac400007 	ldb	r17,0(r21)
 401072c:	003d0206 	br	400fb38 <__alt_mem_onchip_memory2_0+0xfc00e898>
 4010730:	8025883a 	mov	r18,r16
 4010734:	dc002903 	ldbu	r16,164(sp)
 4010738:	e011883a 	mov	r8,fp
 401073c:	84003fcc 	andi	r16,r16,255
 4010740:	803de726 	beq	r16,zero,400fee0 <__alt_mem_onchip_memory2_0+0xfc00ec40>
 4010744:	d8c02b03 	ldbu	r3,172(sp)
 4010748:	d8c02785 	stb	r3,158(sp)
 401074c:	003de406 	br	400fee0 <__alt_mem_onchip_memory2_0+0xfc00ec40>
 4010750:	84001014 	ori	r16,r16,64
 4010754:	ac400007 	ldb	r17,0(r21)
 4010758:	003cf706 	br	400fb38 <__alt_mem_onchip_memory2_0+0xfc00e898>
 401075c:	ac400007 	ldb	r17,0(r21)
 4010760:	00801b04 	movi	r2,108
 4010764:	88838f26 	beq	r17,r2,40115a4 <___vfprintf_internal_r+0x1bf4>
 4010768:	84000414 	ori	r16,r16,16
 401076c:	003cf206 	br	400fb38 <__alt_mem_onchip_memory2_0+0xfc00e898>
 4010770:	8025883a 	mov	r18,r16
 4010774:	dc002903 	ldbu	r16,164(sp)
 4010778:	e011883a 	mov	r8,fp
 401077c:	84003fcc 	andi	r16,r16,255
 4010780:	80053f1e 	bne	r16,zero,4011c80 <___vfprintf_internal_r+0x22d0>
 4010784:	9080080c 	andi	r2,r18,32
 4010788:	1002d226 	beq	r2,zero,40112d4 <___vfprintf_internal_r+0x1924>
 401078c:	d9002e17 	ldw	r4,184(sp)
 4010790:	d9402f17 	ldw	r5,188(sp)
 4010794:	20800017 	ldw	r2,0(r4)
 4010798:	2807d7fa 	srai	r3,r5,31
 401079c:	21000104 	addi	r4,r4,4
 40107a0:	d9002e15 	stw	r4,184(sp)
 40107a4:	11400015 	stw	r5,0(r2)
 40107a8:	10c00115 	stw	r3,4(r2)
 40107ac:	003cb806 	br	400fa90 <__alt_mem_onchip_memory2_0+0xfc00e7f0>
 40107b0:	d8c02e17 	ldw	r3,184(sp)
 40107b4:	d9002e17 	ldw	r4,184(sp)
 40107b8:	8025883a 	mov	r18,r16
 40107bc:	18800017 	ldw	r2,0(r3)
 40107c0:	21000104 	addi	r4,r4,4
 40107c4:	00c00044 	movi	r3,1
 40107c8:	e011883a 	mov	r8,fp
 40107cc:	d8c02915 	stw	r3,164(sp)
 40107d0:	d8002785 	stb	zero,158(sp)
 40107d4:	d8801405 	stb	r2,80(sp)
 40107d8:	d9002e15 	stw	r4,184(sp)
 40107dc:	d8c02b15 	stw	r3,172(sp)
 40107e0:	d8002a15 	stw	zero,168(sp)
 40107e4:	d8003215 	stw	zero,200(sp)
 40107e8:	dc001404 	addi	r16,sp,80
 40107ec:	0039883a 	mov	fp,zero
 40107f0:	003e5306 	br	4010140 <__alt_mem_onchip_memory2_0+0xfc00eea0>
 40107f4:	010100b4 	movhi	r4,1026
 40107f8:	211dbd04 	addi	r4,r4,30452
 40107fc:	0039883a 	mov	fp,zero
 4010800:	d9003915 	stw	r4,228(sp)
 4010804:	04401e04 	movi	r17,120
 4010808:	003f6906 	br	40105b0 <__alt_mem_onchip_memory2_0+0xfc00f310>
 401080c:	8025883a 	mov	r18,r16
 4010810:	dc002903 	ldbu	r16,164(sp)
 4010814:	e011883a 	mov	r8,fp
 4010818:	84003fcc 	andi	r16,r16,255
 401081c:	8005081e 	bne	r16,zero,4011c40 <___vfprintf_internal_r+0x2290>
 4010820:	883d6126 	beq	r17,zero,400fda8 <__alt_mem_onchip_memory2_0+0xfc00eb08>
 4010824:	00c00044 	movi	r3,1
 4010828:	d8c02915 	stw	r3,164(sp)
 401082c:	dc401405 	stb	r17,80(sp)
 4010830:	d8002785 	stb	zero,158(sp)
 4010834:	003fe906 	br	40107dc <__alt_mem_onchip_memory2_0+0xfc00f53c>
 4010838:	014100b4 	movhi	r5,1026
 401083c:	295dbd04 	addi	r5,r5,30452
 4010840:	d9403915 	stw	r5,228(sp)
 4010844:	d8c02e15 	stw	r3,184(sp)
 4010848:	1025883a 	mov	r18,r2
 401084c:	04401e04 	movi	r17,120
 4010850:	9d84b03a 	or	r2,r19,r22
 4010854:	1000fc1e 	bne	r2,zero,4010c48 <___vfprintf_internal_r+0x1298>
 4010858:	0039883a 	mov	fp,zero
 401085c:	00800084 	movi	r2,2
 4010860:	10803fcc 	andi	r2,r2,255
 4010864:	00c00044 	movi	r3,1
 4010868:	10c20f26 	beq	r2,r3,40110a8 <___vfprintf_internal_r+0x16f8>
 401086c:	00c00084 	movi	r3,2
 4010870:	10fd3326 	beq	r2,r3,400fd40 <__alt_mem_onchip_memory2_0+0xfc00eaa0>
 4010874:	003e0b06 	br	40100a4 <__alt_mem_onchip_memory2_0+0xfc00ee04>
 4010878:	d8c02017 	ldw	r3,128(sp)
 401087c:	003e7106 	br	4010244 <__alt_mem_onchip_memory2_0+0xfc00efa4>
 4010880:	00801944 	movi	r2,101
 4010884:	14407e0e 	bge	r2,r17,4010a80 <___vfprintf_internal_r+0x10d0>
 4010888:	d9003617 	ldw	r4,216(sp)
 401088c:	d9403817 	ldw	r5,224(sp)
 4010890:	000d883a 	mov	r6,zero
 4010894:	000f883a 	mov	r7,zero
 4010898:	d8c03c15 	stw	r3,240(sp)
 401089c:	da003d15 	stw	r8,244(sp)
 40108a0:	401a4d00 	call	401a4d0 <__eqdf2>
 40108a4:	d8c03c17 	ldw	r3,240(sp)
 40108a8:	da003d17 	ldw	r8,244(sp)
 40108ac:	1000f71e 	bne	r2,zero,4010c8c <___vfprintf_internal_r+0x12dc>
 40108b0:	d8801f17 	ldw	r2,124(sp)
 40108b4:	010100b4 	movhi	r4,1026
 40108b8:	211dc404 	addi	r4,r4,30480
 40108bc:	18c00044 	addi	r3,r3,1
 40108c0:	10800044 	addi	r2,r2,1
 40108c4:	41000015 	stw	r4,0(r8)
 40108c8:	01000044 	movi	r4,1
 40108cc:	41000115 	stw	r4,4(r8)
 40108d0:	d8c02015 	stw	r3,128(sp)
 40108d4:	d8801f15 	stw	r2,124(sp)
 40108d8:	010001c4 	movi	r4,7
 40108dc:	2082b816 	blt	r4,r2,40113c0 <___vfprintf_internal_r+0x1a10>
 40108e0:	42000204 	addi	r8,r8,8
 40108e4:	d8802617 	ldw	r2,152(sp)
 40108e8:	d9403317 	ldw	r5,204(sp)
 40108ec:	11400216 	blt	r2,r5,40108f8 <___vfprintf_internal_r+0xf48>
 40108f0:	9080004c 	andi	r2,r18,1
 40108f4:	103eb326 	beq	r2,zero,40103c4 <__alt_mem_onchip_memory2_0+0xfc00f124>
 40108f8:	d8803717 	ldw	r2,220(sp)
 40108fc:	d9003417 	ldw	r4,208(sp)
 4010900:	d9403717 	ldw	r5,220(sp)
 4010904:	1887883a 	add	r3,r3,r2
 4010908:	d8801f17 	ldw	r2,124(sp)
 401090c:	41000015 	stw	r4,0(r8)
 4010910:	41400115 	stw	r5,4(r8)
 4010914:	10800044 	addi	r2,r2,1
 4010918:	d8c02015 	stw	r3,128(sp)
 401091c:	d8801f15 	stw	r2,124(sp)
 4010920:	010001c4 	movi	r4,7
 4010924:	20832916 	blt	r4,r2,40115cc <___vfprintf_internal_r+0x1c1c>
 4010928:	42000204 	addi	r8,r8,8
 401092c:	d8803317 	ldw	r2,204(sp)
 4010930:	143fffc4 	addi	r16,r2,-1
 4010934:	043ea30e 	bge	zero,r16,40103c4 <__alt_mem_onchip_memory2_0+0xfc00f124>
 4010938:	04400404 	movi	r17,16
 401093c:	d8801f17 	ldw	r2,124(sp)
 4010940:	8c00880e 	bge	r17,r16,4010b64 <___vfprintf_internal_r+0x11b4>
 4010944:	014100b4 	movhi	r5,1026
 4010948:	295dc484 	addi	r5,r5,30482
 401094c:	d9402c15 	stw	r5,176(sp)
 4010950:	058001c4 	movi	r22,7
 4010954:	dcc02d17 	ldw	r19,180(sp)
 4010958:	00000306 	br	4010968 <___vfprintf_internal_r+0xfb8>
 401095c:	42000204 	addi	r8,r8,8
 4010960:	843ffc04 	addi	r16,r16,-16
 4010964:	8c00820e 	bge	r17,r16,4010b70 <___vfprintf_internal_r+0x11c0>
 4010968:	18c00404 	addi	r3,r3,16
 401096c:	10800044 	addi	r2,r2,1
 4010970:	45000015 	stw	r20,0(r8)
 4010974:	44400115 	stw	r17,4(r8)
 4010978:	d8c02015 	stw	r3,128(sp)
 401097c:	d8801f15 	stw	r2,124(sp)
 4010980:	b0bff60e 	bge	r22,r2,401095c <__alt_mem_onchip_memory2_0+0xfc00f6bc>
 4010984:	d9801e04 	addi	r6,sp,120
 4010988:	b80b883a 	mov	r5,r23
 401098c:	9809883a 	mov	r4,r19
 4010990:	401674c0 	call	401674c <__sprint_r>
 4010994:	103d0a1e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4010998:	d8c02017 	ldw	r3,128(sp)
 401099c:	d8801f17 	ldw	r2,124(sp)
 40109a0:	da000404 	addi	r8,sp,16
 40109a4:	003fee06 	br	4010960 <__alt_mem_onchip_memory2_0+0xfc00f6c0>
 40109a8:	d9403117 	ldw	r5,196(sp)
 40109ac:	d8802917 	ldw	r2,164(sp)
 40109b0:	28adc83a 	sub	r22,r5,r2
 40109b4:	05be410e 	bge	zero,r22,40102bc <__alt_mem_onchip_memory2_0+0xfc00f01c>
 40109b8:	07000404 	movi	fp,16
 40109bc:	d8801f17 	ldw	r2,124(sp)
 40109c0:	e5838f0e 	bge	fp,r22,4011800 <___vfprintf_internal_r+0x1e50>
 40109c4:	014100b4 	movhi	r5,1026
 40109c8:	295dc484 	addi	r5,r5,30482
 40109cc:	dc403015 	stw	r17,192(sp)
 40109d0:	d9402c15 	stw	r5,176(sp)
 40109d4:	b023883a 	mov	r17,r22
 40109d8:	04c001c4 	movi	r19,7
 40109dc:	a82d883a 	mov	r22,r21
 40109e0:	902b883a 	mov	r21,r18
 40109e4:	8025883a 	mov	r18,r16
 40109e8:	dc002d17 	ldw	r16,180(sp)
 40109ec:	00000306 	br	40109fc <___vfprintf_internal_r+0x104c>
 40109f0:	8c7ffc04 	addi	r17,r17,-16
 40109f4:	42000204 	addi	r8,r8,8
 40109f8:	e440110e 	bge	fp,r17,4010a40 <___vfprintf_internal_r+0x1090>
 40109fc:	18c00404 	addi	r3,r3,16
 4010a00:	10800044 	addi	r2,r2,1
 4010a04:	45000015 	stw	r20,0(r8)
 4010a08:	47000115 	stw	fp,4(r8)
 4010a0c:	d8c02015 	stw	r3,128(sp)
 4010a10:	d8801f15 	stw	r2,124(sp)
 4010a14:	98bff60e 	bge	r19,r2,40109f0 <__alt_mem_onchip_memory2_0+0xfc00f750>
 4010a18:	d9801e04 	addi	r6,sp,120
 4010a1c:	b80b883a 	mov	r5,r23
 4010a20:	8009883a 	mov	r4,r16
 4010a24:	401674c0 	call	401674c <__sprint_r>
 4010a28:	103ce51e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4010a2c:	8c7ffc04 	addi	r17,r17,-16
 4010a30:	d8c02017 	ldw	r3,128(sp)
 4010a34:	d8801f17 	ldw	r2,124(sp)
 4010a38:	da000404 	addi	r8,sp,16
 4010a3c:	e47fef16 	blt	fp,r17,40109fc <__alt_mem_onchip_memory2_0+0xfc00f75c>
 4010a40:	9021883a 	mov	r16,r18
 4010a44:	a825883a 	mov	r18,r21
 4010a48:	b02b883a 	mov	r21,r22
 4010a4c:	882d883a 	mov	r22,r17
 4010a50:	dc403017 	ldw	r17,192(sp)
 4010a54:	d9002c17 	ldw	r4,176(sp)
 4010a58:	1d87883a 	add	r3,r3,r22
 4010a5c:	10800044 	addi	r2,r2,1
 4010a60:	41000015 	stw	r4,0(r8)
 4010a64:	45800115 	stw	r22,4(r8)
 4010a68:	d8c02015 	stw	r3,128(sp)
 4010a6c:	d8801f15 	stw	r2,124(sp)
 4010a70:	010001c4 	movi	r4,7
 4010a74:	20818e16 	blt	r4,r2,40110b0 <___vfprintf_internal_r+0x1700>
 4010a78:	42000204 	addi	r8,r8,8
 4010a7c:	003e0f06 	br	40102bc <__alt_mem_onchip_memory2_0+0xfc00f01c>
 4010a80:	d9403317 	ldw	r5,204(sp)
 4010a84:	00800044 	movi	r2,1
 4010a88:	18c00044 	addi	r3,r3,1
 4010a8c:	1141530e 	bge	r2,r5,4010fdc <___vfprintf_internal_r+0x162c>
 4010a90:	dc401f17 	ldw	r17,124(sp)
 4010a94:	00800044 	movi	r2,1
 4010a98:	40800115 	stw	r2,4(r8)
 4010a9c:	8c400044 	addi	r17,r17,1
 4010aa0:	44000015 	stw	r16,0(r8)
 4010aa4:	d8c02015 	stw	r3,128(sp)
 4010aa8:	dc401f15 	stw	r17,124(sp)
 4010aac:	008001c4 	movi	r2,7
 4010ab0:	14416b16 	blt	r2,r17,4011060 <___vfprintf_internal_r+0x16b0>
 4010ab4:	42000204 	addi	r8,r8,8
 4010ab8:	d8803717 	ldw	r2,220(sp)
 4010abc:	d9003417 	ldw	r4,208(sp)
 4010ac0:	8c400044 	addi	r17,r17,1
 4010ac4:	10c7883a 	add	r3,r2,r3
 4010ac8:	40800115 	stw	r2,4(r8)
 4010acc:	41000015 	stw	r4,0(r8)
 4010ad0:	d8c02015 	stw	r3,128(sp)
 4010ad4:	dc401f15 	stw	r17,124(sp)
 4010ad8:	008001c4 	movi	r2,7
 4010adc:	14416916 	blt	r2,r17,4011084 <___vfprintf_internal_r+0x16d4>
 4010ae0:	45800204 	addi	r22,r8,8
 4010ae4:	d9003617 	ldw	r4,216(sp)
 4010ae8:	d9403817 	ldw	r5,224(sp)
 4010aec:	000d883a 	mov	r6,zero
 4010af0:	000f883a 	mov	r7,zero
 4010af4:	d8c03c15 	stw	r3,240(sp)
 4010af8:	401a4d00 	call	401a4d0 <__eqdf2>
 4010afc:	d8c03c17 	ldw	r3,240(sp)
 4010b00:	1000bc26 	beq	r2,zero,4010df4 <___vfprintf_internal_r+0x1444>
 4010b04:	d9403317 	ldw	r5,204(sp)
 4010b08:	84000044 	addi	r16,r16,1
 4010b0c:	8c400044 	addi	r17,r17,1
 4010b10:	28bfffc4 	addi	r2,r5,-1
 4010b14:	1887883a 	add	r3,r3,r2
 4010b18:	b0800115 	stw	r2,4(r22)
 4010b1c:	b4000015 	stw	r16,0(r22)
 4010b20:	d8c02015 	stw	r3,128(sp)
 4010b24:	dc401f15 	stw	r17,124(sp)
 4010b28:	008001c4 	movi	r2,7
 4010b2c:	14414316 	blt	r2,r17,401103c <___vfprintf_internal_r+0x168c>
 4010b30:	b5800204 	addi	r22,r22,8
 4010b34:	d9003a17 	ldw	r4,232(sp)
 4010b38:	df0022c4 	addi	fp,sp,139
 4010b3c:	8c400044 	addi	r17,r17,1
 4010b40:	20c7883a 	add	r3,r4,r3
 4010b44:	b7000015 	stw	fp,0(r22)
 4010b48:	b1000115 	stw	r4,4(r22)
 4010b4c:	d8c02015 	stw	r3,128(sp)
 4010b50:	dc401f15 	stw	r17,124(sp)
 4010b54:	008001c4 	movi	r2,7
 4010b58:	14400e16 	blt	r2,r17,4010b94 <___vfprintf_internal_r+0x11e4>
 4010b5c:	b2000204 	addi	r8,r22,8
 4010b60:	003e1806 	br	40103c4 <__alt_mem_onchip_memory2_0+0xfc00f124>
 4010b64:	010100b4 	movhi	r4,1026
 4010b68:	211dc484 	addi	r4,r4,30482
 4010b6c:	d9002c15 	stw	r4,176(sp)
 4010b70:	d9002c17 	ldw	r4,176(sp)
 4010b74:	1c07883a 	add	r3,r3,r16
 4010b78:	44000115 	stw	r16,4(r8)
 4010b7c:	41000015 	stw	r4,0(r8)
 4010b80:	10800044 	addi	r2,r2,1
 4010b84:	d8c02015 	stw	r3,128(sp)
 4010b88:	d8801f15 	stw	r2,124(sp)
 4010b8c:	010001c4 	movi	r4,7
 4010b90:	20be0b0e 	bge	r4,r2,40103c0 <__alt_mem_onchip_memory2_0+0xfc00f120>
 4010b94:	d9002d17 	ldw	r4,180(sp)
 4010b98:	d9801e04 	addi	r6,sp,120
 4010b9c:	b80b883a 	mov	r5,r23
 4010ba0:	401674c0 	call	401674c <__sprint_r>
 4010ba4:	103c861e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4010ba8:	d8c02017 	ldw	r3,128(sp)
 4010bac:	da000404 	addi	r8,sp,16
 4010bb0:	003e0406 	br	40103c4 <__alt_mem_onchip_memory2_0+0xfc00f124>
 4010bb4:	d9002d17 	ldw	r4,180(sp)
 4010bb8:	d9801e04 	addi	r6,sp,120
 4010bbc:	b80b883a 	mov	r5,r23
 4010bc0:	401674c0 	call	401674c <__sprint_r>
 4010bc4:	103e3b26 	beq	r2,zero,40104b4 <__alt_mem_onchip_memory2_0+0xfc00f214>
 4010bc8:	003c7d06 	br	400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4010bcc:	d9002d17 	ldw	r4,180(sp)
 4010bd0:	d9801e04 	addi	r6,sp,120
 4010bd4:	b80b883a 	mov	r5,r23
 4010bd8:	401674c0 	call	401674c <__sprint_r>
 4010bdc:	103c781e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4010be0:	d8c02017 	ldw	r3,128(sp)
 4010be4:	da000404 	addi	r8,sp,16
 4010be8:	003de906 	br	4010390 <__alt_mem_onchip_memory2_0+0xfc00f0f0>
 4010bec:	d9002d17 	ldw	r4,180(sp)
 4010bf0:	d9801e04 	addi	r6,sp,120
 4010bf4:	b80b883a 	mov	r5,r23
 4010bf8:	401674c0 	call	401674c <__sprint_r>
 4010bfc:	103c701e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4010c00:	d8c02017 	ldw	r3,128(sp)
 4010c04:	da000404 	addi	r8,sp,16
 4010c08:	003d9b06 	br	4010278 <__alt_mem_onchip_memory2_0+0xfc00efd8>
 4010c0c:	d9002d17 	ldw	r4,180(sp)
 4010c10:	d9801e04 	addi	r6,sp,120
 4010c14:	b80b883a 	mov	r5,r23
 4010c18:	401674c0 	call	401674c <__sprint_r>
 4010c1c:	103c681e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4010c20:	d8c02017 	ldw	r3,128(sp)
 4010c24:	da000404 	addi	r8,sp,16
 4010c28:	003da106 	br	40102b0 <__alt_mem_onchip_memory2_0+0xfc00f010>
 4010c2c:	d9402a17 	ldw	r5,168(sp)
 4010c30:	d8002785 	stb	zero,158(sp)
 4010c34:	283f0616 	blt	r5,zero,4010850 <__alt_mem_onchip_memory2_0+0xfc00f5b0>
 4010c38:	00ffdfc4 	movi	r3,-129
 4010c3c:	9d84b03a 	or	r2,r19,r22
 4010c40:	90e4703a 	and	r18,r18,r3
 4010c44:	103c3b26 	beq	r2,zero,400fd34 <__alt_mem_onchip_memory2_0+0xfc00ea94>
 4010c48:	0039883a 	mov	fp,zero
 4010c4c:	003e5806 	br	40105b0 <__alt_mem_onchip_memory2_0+0xfc00f310>
 4010c50:	9080040c 	andi	r2,r18,16
 4010c54:	1001b326 	beq	r2,zero,4011324 <___vfprintf_internal_r+0x1974>
 4010c58:	d8c02e17 	ldw	r3,184(sp)
 4010c5c:	d9002a17 	ldw	r4,168(sp)
 4010c60:	d8002785 	stb	zero,158(sp)
 4010c64:	18800104 	addi	r2,r3,4
 4010c68:	1cc00017 	ldw	r19,0(r3)
 4010c6c:	002d883a 	mov	r22,zero
 4010c70:	2001b516 	blt	r4,zero,4011348 <___vfprintf_internal_r+0x1998>
 4010c74:	00ffdfc4 	movi	r3,-129
 4010c78:	d8802e15 	stw	r2,184(sp)
 4010c7c:	90e4703a 	and	r18,r18,r3
 4010c80:	983d0526 	beq	r19,zero,4010098 <__alt_mem_onchip_memory2_0+0xfc00edf8>
 4010c84:	0039883a 	mov	fp,zero
 4010c88:	003d0806 	br	40100ac <__alt_mem_onchip_memory2_0+0xfc00ee0c>
 4010c8c:	dc402617 	ldw	r17,152(sp)
 4010c90:	0441d30e 	bge	zero,r17,40113e0 <___vfprintf_internal_r+0x1a30>
 4010c94:	dc403217 	ldw	r17,200(sp)
 4010c98:	d8803317 	ldw	r2,204(sp)
 4010c9c:	1440010e 	bge	r2,r17,4010ca4 <___vfprintf_internal_r+0x12f4>
 4010ca0:	1023883a 	mov	r17,r2
 4010ca4:	04400a0e 	bge	zero,r17,4010cd0 <___vfprintf_internal_r+0x1320>
 4010ca8:	d8801f17 	ldw	r2,124(sp)
 4010cac:	1c47883a 	add	r3,r3,r17
 4010cb0:	44000015 	stw	r16,0(r8)
 4010cb4:	10800044 	addi	r2,r2,1
 4010cb8:	44400115 	stw	r17,4(r8)
 4010cbc:	d8c02015 	stw	r3,128(sp)
 4010cc0:	d8801f15 	stw	r2,124(sp)
 4010cc4:	010001c4 	movi	r4,7
 4010cc8:	20826516 	blt	r4,r2,4011660 <___vfprintf_internal_r+0x1cb0>
 4010ccc:	42000204 	addi	r8,r8,8
 4010cd0:	88026116 	blt	r17,zero,4011658 <___vfprintf_internal_r+0x1ca8>
 4010cd4:	d9003217 	ldw	r4,200(sp)
 4010cd8:	2463c83a 	sub	r17,r4,r17
 4010cdc:	04407b0e 	bge	zero,r17,4010ecc <___vfprintf_internal_r+0x151c>
 4010ce0:	05800404 	movi	r22,16
 4010ce4:	d8801f17 	ldw	r2,124(sp)
 4010ce8:	b4419d0e 	bge	r22,r17,4011360 <___vfprintf_internal_r+0x19b0>
 4010cec:	010100b4 	movhi	r4,1026
 4010cf0:	211dc484 	addi	r4,r4,30482
 4010cf4:	d9002c15 	stw	r4,176(sp)
 4010cf8:	070001c4 	movi	fp,7
 4010cfc:	dcc02d17 	ldw	r19,180(sp)
 4010d00:	00000306 	br	4010d10 <___vfprintf_internal_r+0x1360>
 4010d04:	42000204 	addi	r8,r8,8
 4010d08:	8c7ffc04 	addi	r17,r17,-16
 4010d0c:	b441970e 	bge	r22,r17,401136c <___vfprintf_internal_r+0x19bc>
 4010d10:	18c00404 	addi	r3,r3,16
 4010d14:	10800044 	addi	r2,r2,1
 4010d18:	45000015 	stw	r20,0(r8)
 4010d1c:	45800115 	stw	r22,4(r8)
 4010d20:	d8c02015 	stw	r3,128(sp)
 4010d24:	d8801f15 	stw	r2,124(sp)
 4010d28:	e0bff60e 	bge	fp,r2,4010d04 <__alt_mem_onchip_memory2_0+0xfc00fa64>
 4010d2c:	d9801e04 	addi	r6,sp,120
 4010d30:	b80b883a 	mov	r5,r23
 4010d34:	9809883a 	mov	r4,r19
 4010d38:	401674c0 	call	401674c <__sprint_r>
 4010d3c:	103c201e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4010d40:	d8c02017 	ldw	r3,128(sp)
 4010d44:	d8801f17 	ldw	r2,124(sp)
 4010d48:	da000404 	addi	r8,sp,16
 4010d4c:	003fee06 	br	4010d08 <__alt_mem_onchip_memory2_0+0xfc00fa68>
 4010d50:	d9002d17 	ldw	r4,180(sp)
 4010d54:	d9801e04 	addi	r6,sp,120
 4010d58:	b80b883a 	mov	r5,r23
 4010d5c:	401674c0 	call	401674c <__sprint_r>
 4010d60:	103c171e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4010d64:	d8c02017 	ldw	r3,128(sp)
 4010d68:	df002787 	ldb	fp,158(sp)
 4010d6c:	da000404 	addi	r8,sp,16
 4010d70:	003d3406 	br	4010244 <__alt_mem_onchip_memory2_0+0xfc00efa4>
 4010d74:	9080040c 	andi	r2,r18,16
 4010d78:	10016126 	beq	r2,zero,4011300 <___vfprintf_internal_r+0x1950>
 4010d7c:	d9402e17 	ldw	r5,184(sp)
 4010d80:	2cc00017 	ldw	r19,0(r5)
 4010d84:	29400104 	addi	r5,r5,4
 4010d88:	d9402e15 	stw	r5,184(sp)
 4010d8c:	982dd7fa 	srai	r22,r19,31
 4010d90:	b005883a 	mov	r2,r22
 4010d94:	003c5a06 	br	400ff00 <__alt_mem_onchip_memory2_0+0xfc00ec60>
 4010d98:	9080040c 	andi	r2,r18,16
 4010d9c:	10003526 	beq	r2,zero,4010e74 <___vfprintf_internal_r+0x14c4>
 4010da0:	d8c02e17 	ldw	r3,184(sp)
 4010da4:	d9002a17 	ldw	r4,168(sp)
 4010da8:	d8002785 	stb	zero,158(sp)
 4010dac:	18800104 	addi	r2,r3,4
 4010db0:	1cc00017 	ldw	r19,0(r3)
 4010db4:	002d883a 	mov	r22,zero
 4010db8:	20003716 	blt	r4,zero,4010e98 <___vfprintf_internal_r+0x14e8>
 4010dbc:	00ffdfc4 	movi	r3,-129
 4010dc0:	d8802e15 	stw	r2,184(sp)
 4010dc4:	90e4703a 	and	r18,r18,r3
 4010dc8:	0039883a 	mov	fp,zero
 4010dcc:	983dd426 	beq	r19,zero,4010520 <__alt_mem_onchip_memory2_0+0xfc00f280>
 4010dd0:	00800244 	movi	r2,9
 4010dd4:	14fc5336 	bltu	r2,r19,400ff24 <__alt_mem_onchip_memory2_0+0xfc00ec84>
 4010dd8:	d8c02817 	ldw	r3,160(sp)
 4010ddc:	dc001dc4 	addi	r16,sp,119
 4010de0:	9cc00c04 	addi	r19,r19,48
 4010de4:	1c07c83a 	sub	r3,r3,r16
 4010de8:	dcc01dc5 	stb	r19,119(sp)
 4010dec:	d8c02b15 	stw	r3,172(sp)
 4010df0:	003cc606 	br	401010c <__alt_mem_onchip_memory2_0+0xfc00ee6c>
 4010df4:	d8803317 	ldw	r2,204(sp)
 4010df8:	143fffc4 	addi	r16,r2,-1
 4010dfc:	043f4d0e 	bge	zero,r16,4010b34 <__alt_mem_onchip_memory2_0+0xfc00f894>
 4010e00:	07000404 	movi	fp,16
 4010e04:	e400810e 	bge	fp,r16,401100c <___vfprintf_internal_r+0x165c>
 4010e08:	014100b4 	movhi	r5,1026
 4010e0c:	295dc484 	addi	r5,r5,30482
 4010e10:	d9402c15 	stw	r5,176(sp)
 4010e14:	01c001c4 	movi	r7,7
 4010e18:	dcc02d17 	ldw	r19,180(sp)
 4010e1c:	00000306 	br	4010e2c <___vfprintf_internal_r+0x147c>
 4010e20:	b5800204 	addi	r22,r22,8
 4010e24:	843ffc04 	addi	r16,r16,-16
 4010e28:	e4007b0e 	bge	fp,r16,4011018 <___vfprintf_internal_r+0x1668>
 4010e2c:	18c00404 	addi	r3,r3,16
 4010e30:	8c400044 	addi	r17,r17,1
 4010e34:	b5000015 	stw	r20,0(r22)
 4010e38:	b7000115 	stw	fp,4(r22)
 4010e3c:	d8c02015 	stw	r3,128(sp)
 4010e40:	dc401f15 	stw	r17,124(sp)
 4010e44:	3c7ff60e 	bge	r7,r17,4010e20 <__alt_mem_onchip_memory2_0+0xfc00fb80>
 4010e48:	d9801e04 	addi	r6,sp,120
 4010e4c:	b80b883a 	mov	r5,r23
 4010e50:	9809883a 	mov	r4,r19
 4010e54:	d9c03c15 	stw	r7,240(sp)
 4010e58:	401674c0 	call	401674c <__sprint_r>
 4010e5c:	d9c03c17 	ldw	r7,240(sp)
 4010e60:	103bd71e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4010e64:	d8c02017 	ldw	r3,128(sp)
 4010e68:	dc401f17 	ldw	r17,124(sp)
 4010e6c:	dd800404 	addi	r22,sp,16
 4010e70:	003fec06 	br	4010e24 <__alt_mem_onchip_memory2_0+0xfc00fb84>
 4010e74:	9080100c 	andi	r2,r18,64
 4010e78:	d8002785 	stb	zero,158(sp)
 4010e7c:	10010e26 	beq	r2,zero,40112b8 <___vfprintf_internal_r+0x1908>
 4010e80:	d9402e17 	ldw	r5,184(sp)
 4010e84:	d8c02a17 	ldw	r3,168(sp)
 4010e88:	002d883a 	mov	r22,zero
 4010e8c:	28800104 	addi	r2,r5,4
 4010e90:	2cc0000b 	ldhu	r19,0(r5)
 4010e94:	183fc90e 	bge	r3,zero,4010dbc <__alt_mem_onchip_memory2_0+0xfc00fb1c>
 4010e98:	d8802e15 	stw	r2,184(sp)
 4010e9c:	0039883a 	mov	fp,zero
 4010ea0:	9d84b03a 	or	r2,r19,r22
 4010ea4:	103c1e1e 	bne	r2,zero,400ff20 <__alt_mem_onchip_memory2_0+0xfc00ec80>
 4010ea8:	00800044 	movi	r2,1
 4010eac:	003e6c06 	br	4010860 <__alt_mem_onchip_memory2_0+0xfc00f5c0>
 4010eb0:	d9002d17 	ldw	r4,180(sp)
 4010eb4:	d9801e04 	addi	r6,sp,120
 4010eb8:	b80b883a 	mov	r5,r23
 4010ebc:	401674c0 	call	401674c <__sprint_r>
 4010ec0:	103bbf1e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4010ec4:	d8c02017 	ldw	r3,128(sp)
 4010ec8:	da000404 	addi	r8,sp,16
 4010ecc:	d9003217 	ldw	r4,200(sp)
 4010ed0:	d8802617 	ldw	r2,152(sp)
 4010ed4:	d9403317 	ldw	r5,204(sp)
 4010ed8:	8123883a 	add	r17,r16,r4
 4010edc:	11400216 	blt	r2,r5,4010ee8 <___vfprintf_internal_r+0x1538>
 4010ee0:	9100004c 	andi	r4,r18,1
 4010ee4:	20000d26 	beq	r4,zero,4010f1c <___vfprintf_internal_r+0x156c>
 4010ee8:	d9003717 	ldw	r4,220(sp)
 4010eec:	d9403417 	ldw	r5,208(sp)
 4010ef0:	1907883a 	add	r3,r3,r4
 4010ef4:	d9001f17 	ldw	r4,124(sp)
 4010ef8:	41400015 	stw	r5,0(r8)
 4010efc:	d9403717 	ldw	r5,220(sp)
 4010f00:	21000044 	addi	r4,r4,1
 4010f04:	d8c02015 	stw	r3,128(sp)
 4010f08:	41400115 	stw	r5,4(r8)
 4010f0c:	d9001f15 	stw	r4,124(sp)
 4010f10:	014001c4 	movi	r5,7
 4010f14:	2901e816 	blt	r5,r4,40116b8 <___vfprintf_internal_r+0x1d08>
 4010f18:	42000204 	addi	r8,r8,8
 4010f1c:	d9003317 	ldw	r4,204(sp)
 4010f20:	8121883a 	add	r16,r16,r4
 4010f24:	2085c83a 	sub	r2,r4,r2
 4010f28:	8461c83a 	sub	r16,r16,r17
 4010f2c:	1400010e 	bge	r2,r16,4010f34 <___vfprintf_internal_r+0x1584>
 4010f30:	1021883a 	mov	r16,r2
 4010f34:	04000a0e 	bge	zero,r16,4010f60 <___vfprintf_internal_r+0x15b0>
 4010f38:	d9001f17 	ldw	r4,124(sp)
 4010f3c:	1c07883a 	add	r3,r3,r16
 4010f40:	44400015 	stw	r17,0(r8)
 4010f44:	21000044 	addi	r4,r4,1
 4010f48:	44000115 	stw	r16,4(r8)
 4010f4c:	d8c02015 	stw	r3,128(sp)
 4010f50:	d9001f15 	stw	r4,124(sp)
 4010f54:	014001c4 	movi	r5,7
 4010f58:	2901fb16 	blt	r5,r4,4011748 <___vfprintf_internal_r+0x1d98>
 4010f5c:	42000204 	addi	r8,r8,8
 4010f60:	8001f716 	blt	r16,zero,4011740 <___vfprintf_internal_r+0x1d90>
 4010f64:	1421c83a 	sub	r16,r2,r16
 4010f68:	043d160e 	bge	zero,r16,40103c4 <__alt_mem_onchip_memory2_0+0xfc00f124>
 4010f6c:	04400404 	movi	r17,16
 4010f70:	d8801f17 	ldw	r2,124(sp)
 4010f74:	8c3efb0e 	bge	r17,r16,4010b64 <__alt_mem_onchip_memory2_0+0xfc00f8c4>
 4010f78:	014100b4 	movhi	r5,1026
 4010f7c:	295dc484 	addi	r5,r5,30482
 4010f80:	d9402c15 	stw	r5,176(sp)
 4010f84:	058001c4 	movi	r22,7
 4010f88:	dcc02d17 	ldw	r19,180(sp)
 4010f8c:	00000306 	br	4010f9c <___vfprintf_internal_r+0x15ec>
 4010f90:	42000204 	addi	r8,r8,8
 4010f94:	843ffc04 	addi	r16,r16,-16
 4010f98:	8c3ef50e 	bge	r17,r16,4010b70 <__alt_mem_onchip_memory2_0+0xfc00f8d0>
 4010f9c:	18c00404 	addi	r3,r3,16
 4010fa0:	10800044 	addi	r2,r2,1
 4010fa4:	45000015 	stw	r20,0(r8)
 4010fa8:	44400115 	stw	r17,4(r8)
 4010fac:	d8c02015 	stw	r3,128(sp)
 4010fb0:	d8801f15 	stw	r2,124(sp)
 4010fb4:	b0bff60e 	bge	r22,r2,4010f90 <__alt_mem_onchip_memory2_0+0xfc00fcf0>
 4010fb8:	d9801e04 	addi	r6,sp,120
 4010fbc:	b80b883a 	mov	r5,r23
 4010fc0:	9809883a 	mov	r4,r19
 4010fc4:	401674c0 	call	401674c <__sprint_r>
 4010fc8:	103b7d1e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4010fcc:	d8c02017 	ldw	r3,128(sp)
 4010fd0:	d8801f17 	ldw	r2,124(sp)
 4010fd4:	da000404 	addi	r8,sp,16
 4010fd8:	003fee06 	br	4010f94 <__alt_mem_onchip_memory2_0+0xfc00fcf4>
 4010fdc:	9088703a 	and	r4,r18,r2
 4010fe0:	203eab1e 	bne	r4,zero,4010a90 <__alt_mem_onchip_memory2_0+0xfc00f7f0>
 4010fe4:	dc401f17 	ldw	r17,124(sp)
 4010fe8:	40800115 	stw	r2,4(r8)
 4010fec:	44000015 	stw	r16,0(r8)
 4010ff0:	8c400044 	addi	r17,r17,1
 4010ff4:	d8c02015 	stw	r3,128(sp)
 4010ff8:	dc401f15 	stw	r17,124(sp)
 4010ffc:	008001c4 	movi	r2,7
 4011000:	14400e16 	blt	r2,r17,401103c <___vfprintf_internal_r+0x168c>
 4011004:	45800204 	addi	r22,r8,8
 4011008:	003eca06 	br	4010b34 <__alt_mem_onchip_memory2_0+0xfc00f894>
 401100c:	010100b4 	movhi	r4,1026
 4011010:	211dc484 	addi	r4,r4,30482
 4011014:	d9002c15 	stw	r4,176(sp)
 4011018:	d8802c17 	ldw	r2,176(sp)
 401101c:	1c07883a 	add	r3,r3,r16
 4011020:	8c400044 	addi	r17,r17,1
 4011024:	b0800015 	stw	r2,0(r22)
 4011028:	b4000115 	stw	r16,4(r22)
 401102c:	d8c02015 	stw	r3,128(sp)
 4011030:	dc401f15 	stw	r17,124(sp)
 4011034:	008001c4 	movi	r2,7
 4011038:	147ebd0e 	bge	r2,r17,4010b30 <__alt_mem_onchip_memory2_0+0xfc00f890>
 401103c:	d9002d17 	ldw	r4,180(sp)
 4011040:	d9801e04 	addi	r6,sp,120
 4011044:	b80b883a 	mov	r5,r23
 4011048:	401674c0 	call	401674c <__sprint_r>
 401104c:	103b5c1e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4011050:	d8c02017 	ldw	r3,128(sp)
 4011054:	dc401f17 	ldw	r17,124(sp)
 4011058:	dd800404 	addi	r22,sp,16
 401105c:	003eb506 	br	4010b34 <__alt_mem_onchip_memory2_0+0xfc00f894>
 4011060:	d9002d17 	ldw	r4,180(sp)
 4011064:	d9801e04 	addi	r6,sp,120
 4011068:	b80b883a 	mov	r5,r23
 401106c:	401674c0 	call	401674c <__sprint_r>
 4011070:	103b531e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4011074:	d8c02017 	ldw	r3,128(sp)
 4011078:	dc401f17 	ldw	r17,124(sp)
 401107c:	da000404 	addi	r8,sp,16
 4011080:	003e8d06 	br	4010ab8 <__alt_mem_onchip_memory2_0+0xfc00f818>
 4011084:	d9002d17 	ldw	r4,180(sp)
 4011088:	d9801e04 	addi	r6,sp,120
 401108c:	b80b883a 	mov	r5,r23
 4011090:	401674c0 	call	401674c <__sprint_r>
 4011094:	103b4a1e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4011098:	d8c02017 	ldw	r3,128(sp)
 401109c:	dc401f17 	ldw	r17,124(sp)
 40110a0:	dd800404 	addi	r22,sp,16
 40110a4:	003e8f06 	br	4010ae4 <__alt_mem_onchip_memory2_0+0xfc00f844>
 40110a8:	0027883a 	mov	r19,zero
 40110ac:	003f4a06 	br	4010dd8 <__alt_mem_onchip_memory2_0+0xfc00fb38>
 40110b0:	d9002d17 	ldw	r4,180(sp)
 40110b4:	d9801e04 	addi	r6,sp,120
 40110b8:	b80b883a 	mov	r5,r23
 40110bc:	401674c0 	call	401674c <__sprint_r>
 40110c0:	103b3f1e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 40110c4:	d8c02017 	ldw	r3,128(sp)
 40110c8:	da000404 	addi	r8,sp,16
 40110cc:	003c7b06 	br	40102bc <__alt_mem_onchip_memory2_0+0xfc00f01c>
 40110d0:	d9402a17 	ldw	r5,168(sp)
 40110d4:	04e7c83a 	sub	r19,zero,r19
 40110d8:	07000b44 	movi	fp,45
 40110dc:	9804c03a 	cmpne	r2,r19,zero
 40110e0:	05adc83a 	sub	r22,zero,r22
 40110e4:	df002785 	stb	fp,158(sp)
 40110e8:	b0adc83a 	sub	r22,r22,r2
 40110ec:	28017b16 	blt	r5,zero,40116dc <___vfprintf_internal_r+0x1d2c>
 40110f0:	00bfdfc4 	movi	r2,-129
 40110f4:	90a4703a 	and	r18,r18,r2
 40110f8:	003b8906 	br	400ff20 <__alt_mem_onchip_memory2_0+0xfc00ec80>
 40110fc:	d9003617 	ldw	r4,216(sp)
 4011100:	d9403817 	ldw	r5,224(sp)
 4011104:	da003d15 	stw	r8,244(sp)
 4011108:	40164a00 	call	40164a0 <__fpclassifyd>
 401110c:	da003d17 	ldw	r8,244(sp)
 4011110:	1000f026 	beq	r2,zero,40114d4 <___vfprintf_internal_r+0x1b24>
 4011114:	d9002a17 	ldw	r4,168(sp)
 4011118:	05bff7c4 	movi	r22,-33
 401111c:	00bfffc4 	movi	r2,-1
 4011120:	8dac703a 	and	r22,r17,r22
 4011124:	20820026 	beq	r4,r2,4011928 <___vfprintf_internal_r+0x1f78>
 4011128:	008011c4 	movi	r2,71
 401112c:	b081f726 	beq	r22,r2,401190c <___vfprintf_internal_r+0x1f5c>
 4011130:	d9003817 	ldw	r4,224(sp)
 4011134:	90c04014 	ori	r3,r18,256
 4011138:	d8c02c15 	stw	r3,176(sp)
 401113c:	20021516 	blt	r4,zero,4011994 <___vfprintf_internal_r+0x1fe4>
 4011140:	dcc03817 	ldw	r19,224(sp)
 4011144:	d8002905 	stb	zero,164(sp)
 4011148:	00801984 	movi	r2,102
 401114c:	8881f926 	beq	r17,r2,4011934 <___vfprintf_internal_r+0x1f84>
 4011150:	00801184 	movi	r2,70
 4011154:	88821c26 	beq	r17,r2,40119c8 <___vfprintf_internal_r+0x2018>
 4011158:	00801144 	movi	r2,69
 401115c:	b081ef26 	beq	r22,r2,401191c <___vfprintf_internal_r+0x1f6c>
 4011160:	d8c02a17 	ldw	r3,168(sp)
 4011164:	d8802104 	addi	r2,sp,132
 4011168:	d8800315 	stw	r2,12(sp)
 401116c:	d9403617 	ldw	r5,216(sp)
 4011170:	d8802504 	addi	r2,sp,148
 4011174:	d9002d17 	ldw	r4,180(sp)
 4011178:	d8800215 	stw	r2,8(sp)
 401117c:	d8802604 	addi	r2,sp,152
 4011180:	d8c00015 	stw	r3,0(sp)
 4011184:	d8800115 	stw	r2,4(sp)
 4011188:	01c00084 	movi	r7,2
 401118c:	980d883a 	mov	r6,r19
 4011190:	d8c03c15 	stw	r3,240(sp)
 4011194:	da003d15 	stw	r8,244(sp)
 4011198:	40120e00 	call	40120e0 <_dtoa_r>
 401119c:	1021883a 	mov	r16,r2
 40111a0:	008019c4 	movi	r2,103
 40111a4:	d8c03c17 	ldw	r3,240(sp)
 40111a8:	da003d17 	ldw	r8,244(sp)
 40111ac:	88817126 	beq	r17,r2,4011774 <___vfprintf_internal_r+0x1dc4>
 40111b0:	008011c4 	movi	r2,71
 40111b4:	88829126 	beq	r17,r2,4011bfc <___vfprintf_internal_r+0x224c>
 40111b8:	80f9883a 	add	fp,r16,r3
 40111bc:	d9003617 	ldw	r4,216(sp)
 40111c0:	000d883a 	mov	r6,zero
 40111c4:	000f883a 	mov	r7,zero
 40111c8:	980b883a 	mov	r5,r19
 40111cc:	da003d15 	stw	r8,244(sp)
 40111d0:	401a4d00 	call	401a4d0 <__eqdf2>
 40111d4:	da003d17 	ldw	r8,244(sp)
 40111d8:	10018d26 	beq	r2,zero,4011810 <___vfprintf_internal_r+0x1e60>
 40111dc:	d8802117 	ldw	r2,132(sp)
 40111e0:	1700062e 	bgeu	r2,fp,40111fc <___vfprintf_internal_r+0x184c>
 40111e4:	01000c04 	movi	r4,48
 40111e8:	10c00044 	addi	r3,r2,1
 40111ec:	d8c02115 	stw	r3,132(sp)
 40111f0:	11000005 	stb	r4,0(r2)
 40111f4:	d8802117 	ldw	r2,132(sp)
 40111f8:	173ffb36 	bltu	r2,fp,40111e8 <__alt_mem_onchip_memory2_0+0xfc00ff48>
 40111fc:	1405c83a 	sub	r2,r2,r16
 4011200:	d8803315 	stw	r2,204(sp)
 4011204:	008011c4 	movi	r2,71
 4011208:	b0817626 	beq	r22,r2,40117e4 <___vfprintf_internal_r+0x1e34>
 401120c:	00801944 	movi	r2,101
 4011210:	1442800e 	bge	r2,r17,4011c14 <___vfprintf_internal_r+0x2264>
 4011214:	d8c02617 	ldw	r3,152(sp)
 4011218:	00801984 	movi	r2,102
 401121c:	d8c03215 	stw	r3,200(sp)
 4011220:	8881fe26 	beq	r17,r2,4011a1c <___vfprintf_internal_r+0x206c>
 4011224:	d8c03217 	ldw	r3,200(sp)
 4011228:	d9003317 	ldw	r4,204(sp)
 401122c:	1901dd16 	blt	r3,r4,40119a4 <___vfprintf_internal_r+0x1ff4>
 4011230:	9480004c 	andi	r18,r18,1
 4011234:	90022b1e 	bne	r18,zero,4011ae4 <___vfprintf_internal_r+0x2134>
 4011238:	1805883a 	mov	r2,r3
 401123c:	18028316 	blt	r3,zero,4011c4c <___vfprintf_internal_r+0x229c>
 4011240:	d8c03217 	ldw	r3,200(sp)
 4011244:	044019c4 	movi	r17,103
 4011248:	d8c02b15 	stw	r3,172(sp)
 401124c:	df002907 	ldb	fp,164(sp)
 4011250:	e001531e 	bne	fp,zero,40117a0 <___vfprintf_internal_r+0x1df0>
 4011254:	df002783 	ldbu	fp,158(sp)
 4011258:	d8802915 	stw	r2,164(sp)
 401125c:	dc802c17 	ldw	r18,176(sp)
 4011260:	d8002a15 	stw	zero,168(sp)
 4011264:	003baf06 	br	4010124 <__alt_mem_onchip_memory2_0+0xfc00ee84>
 4011268:	d8c02e17 	ldw	r3,184(sp)
 401126c:	d9002e17 	ldw	r4,184(sp)
 4011270:	d9402e17 	ldw	r5,184(sp)
 4011274:	18c00017 	ldw	r3,0(r3)
 4011278:	21000117 	ldw	r4,4(r4)
 401127c:	29400204 	addi	r5,r5,8
 4011280:	d8c03615 	stw	r3,216(sp)
 4011284:	d9003815 	stw	r4,224(sp)
 4011288:	d9402e15 	stw	r5,184(sp)
 401128c:	003b5006 	br	400ffd0 <__alt_mem_onchip_memory2_0+0xfc00ed30>
 4011290:	ac400007 	ldb	r17,0(r21)
 4011294:	003a2806 	br	400fb38 <__alt_mem_onchip_memory2_0+0xfc00e898>
 4011298:	9080100c 	andi	r2,r18,64
 401129c:	1000a826 	beq	r2,zero,4011540 <___vfprintf_internal_r+0x1b90>
 40112a0:	d8c02e17 	ldw	r3,184(sp)
 40112a4:	002d883a 	mov	r22,zero
 40112a8:	1cc0000b 	ldhu	r19,0(r3)
 40112ac:	18c00104 	addi	r3,r3,4
 40112b0:	d8c02e15 	stw	r3,184(sp)
 40112b4:	003caf06 	br	4010574 <__alt_mem_onchip_memory2_0+0xfc00f2d4>
 40112b8:	d9002e17 	ldw	r4,184(sp)
 40112bc:	d9402a17 	ldw	r5,168(sp)
 40112c0:	002d883a 	mov	r22,zero
 40112c4:	20800104 	addi	r2,r4,4
 40112c8:	24c00017 	ldw	r19,0(r4)
 40112cc:	283ebb0e 	bge	r5,zero,4010dbc <__alt_mem_onchip_memory2_0+0xfc00fb1c>
 40112d0:	003ef106 	br	4010e98 <__alt_mem_onchip_memory2_0+0xfc00fbf8>
 40112d4:	9080040c 	andi	r2,r18,16
 40112d8:	1000921e 	bne	r2,zero,4011524 <___vfprintf_internal_r+0x1b74>
 40112dc:	9480100c 	andi	r18,r18,64
 40112e0:	90013926 	beq	r18,zero,40117c8 <___vfprintf_internal_r+0x1e18>
 40112e4:	d9402e17 	ldw	r5,184(sp)
 40112e8:	d8c02f17 	ldw	r3,188(sp)
 40112ec:	28800017 	ldw	r2,0(r5)
 40112f0:	29400104 	addi	r5,r5,4
 40112f4:	d9402e15 	stw	r5,184(sp)
 40112f8:	10c0000d 	sth	r3,0(r2)
 40112fc:	0039e406 	br	400fa90 <__alt_mem_onchip_memory2_0+0xfc00e7f0>
 4011300:	9080100c 	andi	r2,r18,64
 4011304:	10008026 	beq	r2,zero,4011508 <___vfprintf_internal_r+0x1b58>
 4011308:	d8802e17 	ldw	r2,184(sp)
 401130c:	14c0000f 	ldh	r19,0(r2)
 4011310:	10800104 	addi	r2,r2,4
 4011314:	d8802e15 	stw	r2,184(sp)
 4011318:	982dd7fa 	srai	r22,r19,31
 401131c:	b005883a 	mov	r2,r22
 4011320:	003af706 	br	400ff00 <__alt_mem_onchip_memory2_0+0xfc00ec60>
 4011324:	9080100c 	andi	r2,r18,64
 4011328:	d8002785 	stb	zero,158(sp)
 401132c:	10008a1e 	bne	r2,zero,4011558 <___vfprintf_internal_r+0x1ba8>
 4011330:	d9002e17 	ldw	r4,184(sp)
 4011334:	d9402a17 	ldw	r5,168(sp)
 4011338:	002d883a 	mov	r22,zero
 401133c:	20800104 	addi	r2,r4,4
 4011340:	24c00017 	ldw	r19,0(r4)
 4011344:	283e4b0e 	bge	r5,zero,4010c74 <__alt_mem_onchip_memory2_0+0xfc00f9d4>
 4011348:	9d86b03a 	or	r3,r19,r22
 401134c:	d8802e15 	stw	r2,184(sp)
 4011350:	183e4c1e 	bne	r3,zero,4010c84 <__alt_mem_onchip_memory2_0+0xfc00f9e4>
 4011354:	0039883a 	mov	fp,zero
 4011358:	0005883a 	mov	r2,zero
 401135c:	003d4006 	br	4010860 <__alt_mem_onchip_memory2_0+0xfc00f5c0>
 4011360:	014100b4 	movhi	r5,1026
 4011364:	295dc484 	addi	r5,r5,30482
 4011368:	d9402c15 	stw	r5,176(sp)
 401136c:	d9402c17 	ldw	r5,176(sp)
 4011370:	1c47883a 	add	r3,r3,r17
 4011374:	10800044 	addi	r2,r2,1
 4011378:	41400015 	stw	r5,0(r8)
 401137c:	44400115 	stw	r17,4(r8)
 4011380:	d8c02015 	stw	r3,128(sp)
 4011384:	d8801f15 	stw	r2,124(sp)
 4011388:	010001c4 	movi	r4,7
 401138c:	20bec816 	blt	r4,r2,4010eb0 <__alt_mem_onchip_memory2_0+0xfc00fc10>
 4011390:	42000204 	addi	r8,r8,8
 4011394:	003ecd06 	br	4010ecc <__alt_mem_onchip_memory2_0+0xfc00fc2c>
 4011398:	d9002a17 	ldw	r4,168(sp)
 401139c:	d8002785 	stb	zero,158(sp)
 40113a0:	203d2d16 	blt	r4,zero,4010858 <__alt_mem_onchip_memory2_0+0xfc00f5b8>
 40113a4:	00bfdfc4 	movi	r2,-129
 40113a8:	90a4703a 	and	r18,r18,r2
 40113ac:	003a6106 	br	400fd34 <__alt_mem_onchip_memory2_0+0xfc00ea94>
 40113b0:	010100b4 	movhi	r4,1026
 40113b4:	211dc484 	addi	r4,r4,30482
 40113b8:	d9002c15 	stw	r4,176(sp)
 40113bc:	003bea06 	br	4010368 <__alt_mem_onchip_memory2_0+0xfc00f0c8>
 40113c0:	d9002d17 	ldw	r4,180(sp)
 40113c4:	d9801e04 	addi	r6,sp,120
 40113c8:	b80b883a 	mov	r5,r23
 40113cc:	401674c0 	call	401674c <__sprint_r>
 40113d0:	103a7b1e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 40113d4:	d8c02017 	ldw	r3,128(sp)
 40113d8:	da000404 	addi	r8,sp,16
 40113dc:	003d4106 	br	40108e4 <__alt_mem_onchip_memory2_0+0xfc00f644>
 40113e0:	d8801f17 	ldw	r2,124(sp)
 40113e4:	014100b4 	movhi	r5,1026
 40113e8:	01000044 	movi	r4,1
 40113ec:	18c00044 	addi	r3,r3,1
 40113f0:	10800044 	addi	r2,r2,1
 40113f4:	295dc404 	addi	r5,r5,30480
 40113f8:	41000115 	stw	r4,4(r8)
 40113fc:	41400015 	stw	r5,0(r8)
 4011400:	d8c02015 	stw	r3,128(sp)
 4011404:	d8801f15 	stw	r2,124(sp)
 4011408:	010001c4 	movi	r4,7
 401140c:	20805c16 	blt	r4,r2,4011580 <___vfprintf_internal_r+0x1bd0>
 4011410:	42000204 	addi	r8,r8,8
 4011414:	8800041e 	bne	r17,zero,4011428 <___vfprintf_internal_r+0x1a78>
 4011418:	d8803317 	ldw	r2,204(sp)
 401141c:	1000021e 	bne	r2,zero,4011428 <___vfprintf_internal_r+0x1a78>
 4011420:	9080004c 	andi	r2,r18,1
 4011424:	103be726 	beq	r2,zero,40103c4 <__alt_mem_onchip_memory2_0+0xfc00f124>
 4011428:	d9003717 	ldw	r4,220(sp)
 401142c:	d8801f17 	ldw	r2,124(sp)
 4011430:	d9403417 	ldw	r5,208(sp)
 4011434:	20c7883a 	add	r3,r4,r3
 4011438:	10800044 	addi	r2,r2,1
 401143c:	41000115 	stw	r4,4(r8)
 4011440:	41400015 	stw	r5,0(r8)
 4011444:	d8c02015 	stw	r3,128(sp)
 4011448:	d8801f15 	stw	r2,124(sp)
 401144c:	010001c4 	movi	r4,7
 4011450:	20812116 	blt	r4,r2,40118d8 <___vfprintf_internal_r+0x1f28>
 4011454:	42000204 	addi	r8,r8,8
 4011458:	0463c83a 	sub	r17,zero,r17
 401145c:	0440730e 	bge	zero,r17,401162c <___vfprintf_internal_r+0x1c7c>
 4011460:	05800404 	movi	r22,16
 4011464:	b440860e 	bge	r22,r17,4011680 <___vfprintf_internal_r+0x1cd0>
 4011468:	014100b4 	movhi	r5,1026
 401146c:	295dc484 	addi	r5,r5,30482
 4011470:	d9402c15 	stw	r5,176(sp)
 4011474:	070001c4 	movi	fp,7
 4011478:	dcc02d17 	ldw	r19,180(sp)
 401147c:	00000306 	br	401148c <___vfprintf_internal_r+0x1adc>
 4011480:	42000204 	addi	r8,r8,8
 4011484:	8c7ffc04 	addi	r17,r17,-16
 4011488:	b440800e 	bge	r22,r17,401168c <___vfprintf_internal_r+0x1cdc>
 401148c:	18c00404 	addi	r3,r3,16
 4011490:	10800044 	addi	r2,r2,1
 4011494:	45000015 	stw	r20,0(r8)
 4011498:	45800115 	stw	r22,4(r8)
 401149c:	d8c02015 	stw	r3,128(sp)
 40114a0:	d8801f15 	stw	r2,124(sp)
 40114a4:	e0bff60e 	bge	fp,r2,4011480 <__alt_mem_onchip_memory2_0+0xfc0101e0>
 40114a8:	d9801e04 	addi	r6,sp,120
 40114ac:	b80b883a 	mov	r5,r23
 40114b0:	9809883a 	mov	r4,r19
 40114b4:	401674c0 	call	401674c <__sprint_r>
 40114b8:	103a411e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 40114bc:	d8c02017 	ldw	r3,128(sp)
 40114c0:	d8801f17 	ldw	r2,124(sp)
 40114c4:	da000404 	addi	r8,sp,16
 40114c8:	003fee06 	br	4011484 <__alt_mem_onchip_memory2_0+0xfc0101e4>
 40114cc:	00bfffc4 	movi	r2,-1
 40114d0:	003a3f06 	br	400fdd0 <__alt_mem_onchip_memory2_0+0xfc00eb30>
 40114d4:	008011c4 	movi	r2,71
 40114d8:	1440b816 	blt	r2,r17,40117bc <___vfprintf_internal_r+0x1e0c>
 40114dc:	040100b4 	movhi	r16,1026
 40114e0:	841db604 	addi	r16,r16,30424
 40114e4:	00c000c4 	movi	r3,3
 40114e8:	00bfdfc4 	movi	r2,-129
 40114ec:	d8c02915 	stw	r3,164(sp)
 40114f0:	90a4703a 	and	r18,r18,r2
 40114f4:	df002783 	ldbu	fp,158(sp)
 40114f8:	d8c02b15 	stw	r3,172(sp)
 40114fc:	d8002a15 	stw	zero,168(sp)
 4011500:	d8003215 	stw	zero,200(sp)
 4011504:	003b0706 	br	4010124 <__alt_mem_onchip_memory2_0+0xfc00ee84>
 4011508:	d8c02e17 	ldw	r3,184(sp)
 401150c:	1cc00017 	ldw	r19,0(r3)
 4011510:	18c00104 	addi	r3,r3,4
 4011514:	d8c02e15 	stw	r3,184(sp)
 4011518:	982dd7fa 	srai	r22,r19,31
 401151c:	b005883a 	mov	r2,r22
 4011520:	003a7706 	br	400ff00 <__alt_mem_onchip_memory2_0+0xfc00ec60>
 4011524:	d8c02e17 	ldw	r3,184(sp)
 4011528:	d9002f17 	ldw	r4,188(sp)
 401152c:	18800017 	ldw	r2,0(r3)
 4011530:	18c00104 	addi	r3,r3,4
 4011534:	d8c02e15 	stw	r3,184(sp)
 4011538:	11000015 	stw	r4,0(r2)
 401153c:	00395406 	br	400fa90 <__alt_mem_onchip_memory2_0+0xfc00e7f0>
 4011540:	d9002e17 	ldw	r4,184(sp)
 4011544:	002d883a 	mov	r22,zero
 4011548:	24c00017 	ldw	r19,0(r4)
 401154c:	21000104 	addi	r4,r4,4
 4011550:	d9002e15 	stw	r4,184(sp)
 4011554:	003c0706 	br	4010574 <__alt_mem_onchip_memory2_0+0xfc00f2d4>
 4011558:	d9402e17 	ldw	r5,184(sp)
 401155c:	d8c02a17 	ldw	r3,168(sp)
 4011560:	002d883a 	mov	r22,zero
 4011564:	28800104 	addi	r2,r5,4
 4011568:	2cc0000b 	ldhu	r19,0(r5)
 401156c:	183dc10e 	bge	r3,zero,4010c74 <__alt_mem_onchip_memory2_0+0xfc00f9d4>
 4011570:	003f7506 	br	4011348 <__alt_mem_onchip_memory2_0+0xfc0100a8>
 4011574:	040100b4 	movhi	r16,1026
 4011578:	841db404 	addi	r16,r16,30416
 401157c:	003aa706 	br	401001c <__alt_mem_onchip_memory2_0+0xfc00ed7c>
 4011580:	d9002d17 	ldw	r4,180(sp)
 4011584:	d9801e04 	addi	r6,sp,120
 4011588:	b80b883a 	mov	r5,r23
 401158c:	401674c0 	call	401674c <__sprint_r>
 4011590:	103a0b1e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4011594:	dc402617 	ldw	r17,152(sp)
 4011598:	d8c02017 	ldw	r3,128(sp)
 401159c:	da000404 	addi	r8,sp,16
 40115a0:	003f9c06 	br	4011414 <__alt_mem_onchip_memory2_0+0xfc010174>
 40115a4:	ac400043 	ldbu	r17,1(r21)
 40115a8:	84000814 	ori	r16,r16,32
 40115ac:	ad400044 	addi	r21,r21,1
 40115b0:	8c403fcc 	andi	r17,r17,255
 40115b4:	8c40201c 	xori	r17,r17,128
 40115b8:	8c7fe004 	addi	r17,r17,-128
 40115bc:	00395e06 	br	400fb38 <__alt_mem_onchip_memory2_0+0xfc00e898>
 40115c0:	d8c02e15 	stw	r3,184(sp)
 40115c4:	0039883a 	mov	fp,zero
 40115c8:	003e3506 	br	4010ea0 <__alt_mem_onchip_memory2_0+0xfc00fc00>
 40115cc:	d9002d17 	ldw	r4,180(sp)
 40115d0:	d9801e04 	addi	r6,sp,120
 40115d4:	b80b883a 	mov	r5,r23
 40115d8:	401674c0 	call	401674c <__sprint_r>
 40115dc:	1039f81e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 40115e0:	d8c02017 	ldw	r3,128(sp)
 40115e4:	da000404 	addi	r8,sp,16
 40115e8:	003cd006 	br	401092c <__alt_mem_onchip_memory2_0+0xfc00f68c>
 40115ec:	8009883a 	mov	r4,r16
 40115f0:	df003d15 	stw	fp,244(sp)
 40115f4:	400f9100 	call	400f910 <strlen>
 40115f8:	d8802b15 	stw	r2,172(sp)
 40115fc:	da003d17 	ldw	r8,244(sp)
 4011600:	103c200e 	bge	r2,zero,4010684 <__alt_mem_onchip_memory2_0+0xfc00f3e4>
 4011604:	0005883a 	mov	r2,zero
 4011608:	003c1e06 	br	4010684 <__alt_mem_onchip_memory2_0+0xfc00f3e4>
 401160c:	d9002d17 	ldw	r4,180(sp)
 4011610:	d9801e04 	addi	r6,sp,120
 4011614:	b80b883a 	mov	r5,r23
 4011618:	401674c0 	call	401674c <__sprint_r>
 401161c:	1039e81e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4011620:	d8c02017 	ldw	r3,128(sp)
 4011624:	d8801f17 	ldw	r2,124(sp)
 4011628:	da000404 	addi	r8,sp,16
 401162c:	d9403317 	ldw	r5,204(sp)
 4011630:	10800044 	addi	r2,r2,1
 4011634:	44000015 	stw	r16,0(r8)
 4011638:	28c7883a 	add	r3,r5,r3
 401163c:	003b5b06 	br	40103ac <__alt_mem_onchip_memory2_0+0xfc00f10c>
 4011640:	010100b4 	movhi	r4,1026
 4011644:	211dc884 	addi	r4,r4,30498
 4011648:	d9003515 	stw	r4,212(sp)
 401164c:	003af206 	br	4010218 <__alt_mem_onchip_memory2_0+0xfc00ef78>
 4011650:	013fffc4 	movi	r4,-1
 4011654:	003a0806 	br	400fe78 <__alt_mem_onchip_memory2_0+0xfc00ebd8>
 4011658:	0023883a 	mov	r17,zero
 401165c:	003d9d06 	br	4010cd4 <__alt_mem_onchip_memory2_0+0xfc00fa34>
 4011660:	d9002d17 	ldw	r4,180(sp)
 4011664:	d9801e04 	addi	r6,sp,120
 4011668:	b80b883a 	mov	r5,r23
 401166c:	401674c0 	call	401674c <__sprint_r>
 4011670:	1039d31e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 4011674:	d8c02017 	ldw	r3,128(sp)
 4011678:	da000404 	addi	r8,sp,16
 401167c:	003d9406 	br	4010cd0 <__alt_mem_onchip_memory2_0+0xfc00fa30>
 4011680:	010100b4 	movhi	r4,1026
 4011684:	211dc484 	addi	r4,r4,30482
 4011688:	d9002c15 	stw	r4,176(sp)
 401168c:	d9002c17 	ldw	r4,176(sp)
 4011690:	1c47883a 	add	r3,r3,r17
 4011694:	10800044 	addi	r2,r2,1
 4011698:	41000015 	stw	r4,0(r8)
 401169c:	44400115 	stw	r17,4(r8)
 40116a0:	d8c02015 	stw	r3,128(sp)
 40116a4:	d8801f15 	stw	r2,124(sp)
 40116a8:	010001c4 	movi	r4,7
 40116ac:	20bfd716 	blt	r4,r2,401160c <__alt_mem_onchip_memory2_0+0xfc01036c>
 40116b0:	42000204 	addi	r8,r8,8
 40116b4:	003fdd06 	br	401162c <__alt_mem_onchip_memory2_0+0xfc01038c>
 40116b8:	d9002d17 	ldw	r4,180(sp)
 40116bc:	d9801e04 	addi	r6,sp,120
 40116c0:	b80b883a 	mov	r5,r23
 40116c4:	401674c0 	call	401674c <__sprint_r>
 40116c8:	1039bd1e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 40116cc:	d8802617 	ldw	r2,152(sp)
 40116d0:	d8c02017 	ldw	r3,128(sp)
 40116d4:	da000404 	addi	r8,sp,16
 40116d8:	003e1006 	br	4010f1c <__alt_mem_onchip_memory2_0+0xfc00fc7c>
 40116dc:	00800044 	movi	r2,1
 40116e0:	10803fcc 	andi	r2,r2,255
 40116e4:	00c00044 	movi	r3,1
 40116e8:	10fa0d26 	beq	r2,r3,400ff20 <__alt_mem_onchip_memory2_0+0xfc00ec80>
 40116ec:	00c00084 	movi	r3,2
 40116f0:	10fbaf26 	beq	r2,r3,40105b0 <__alt_mem_onchip_memory2_0+0xfc00f310>
 40116f4:	003a6d06 	br	40100ac <__alt_mem_onchip_memory2_0+0xfc00ee0c>
 40116f8:	010100b4 	movhi	r4,1026
 40116fc:	211dc884 	addi	r4,r4,30498
 4011700:	d9003515 	stw	r4,212(sp)
 4011704:	003b5406 	br	4010458 <__alt_mem_onchip_memory2_0+0xfc00f1b8>
 4011708:	d8802a17 	ldw	r2,168(sp)
 401170c:	00c00184 	movi	r3,6
 4011710:	1880012e 	bgeu	r3,r2,4011718 <___vfprintf_internal_r+0x1d68>
 4011714:	1805883a 	mov	r2,r3
 4011718:	d8802b15 	stw	r2,172(sp)
 401171c:	1000ef16 	blt	r2,zero,4011adc <___vfprintf_internal_r+0x212c>
 4011720:	040100b4 	movhi	r16,1026
 4011724:	d8802915 	stw	r2,164(sp)
 4011728:	dcc02e15 	stw	r19,184(sp)
 401172c:	d8002a15 	stw	zero,168(sp)
 4011730:	d8003215 	stw	zero,200(sp)
 4011734:	841dc204 	addi	r16,r16,30472
 4011738:	0039883a 	mov	fp,zero
 401173c:	003a8006 	br	4010140 <__alt_mem_onchip_memory2_0+0xfc00eea0>
 4011740:	0021883a 	mov	r16,zero
 4011744:	003e0706 	br	4010f64 <__alt_mem_onchip_memory2_0+0xfc00fcc4>
 4011748:	d9002d17 	ldw	r4,180(sp)
 401174c:	d9801e04 	addi	r6,sp,120
 4011750:	b80b883a 	mov	r5,r23
 4011754:	401674c0 	call	401674c <__sprint_r>
 4011758:	1039991e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 401175c:	d8802617 	ldw	r2,152(sp)
 4011760:	d9403317 	ldw	r5,204(sp)
 4011764:	d8c02017 	ldw	r3,128(sp)
 4011768:	da000404 	addi	r8,sp,16
 401176c:	2885c83a 	sub	r2,r5,r2
 4011770:	003dfb06 	br	4010f60 <__alt_mem_onchip_memory2_0+0xfc00fcc0>
 4011774:	9080004c 	andi	r2,r18,1
 4011778:	103e8f1e 	bne	r2,zero,40111b8 <__alt_mem_onchip_memory2_0+0xfc00ff18>
 401177c:	d8802117 	ldw	r2,132(sp)
 4011780:	003e9e06 	br	40111fc <__alt_mem_onchip_memory2_0+0xfc00ff5c>
 4011784:	1025883a 	mov	r18,r2
 4011788:	0039883a 	mov	fp,zero
 401178c:	00800084 	movi	r2,2
 4011790:	003fd306 	br	40116e0 <__alt_mem_onchip_memory2_0+0xfc010440>
 4011794:	07000b44 	movi	fp,45
 4011798:	df002785 	stb	fp,158(sp)
 401179c:	003a1b06 	br	401000c <__alt_mem_onchip_memory2_0+0xfc00ed6c>
 40117a0:	00c00b44 	movi	r3,45
 40117a4:	d8c02785 	stb	r3,158(sp)
 40117a8:	d8802915 	stw	r2,164(sp)
 40117ac:	dc802c17 	ldw	r18,176(sp)
 40117b0:	d8002a15 	stw	zero,168(sp)
 40117b4:	07000b44 	movi	fp,45
 40117b8:	003a5e06 	br	4010134 <__alt_mem_onchip_memory2_0+0xfc00ee94>
 40117bc:	040100b4 	movhi	r16,1026
 40117c0:	841db704 	addi	r16,r16,30428
 40117c4:	003f4706 	br	40114e4 <__alt_mem_onchip_memory2_0+0xfc010244>
 40117c8:	d9002e17 	ldw	r4,184(sp)
 40117cc:	d9402f17 	ldw	r5,188(sp)
 40117d0:	20800017 	ldw	r2,0(r4)
 40117d4:	21000104 	addi	r4,r4,4
 40117d8:	d9002e15 	stw	r4,184(sp)
 40117dc:	11400015 	stw	r5,0(r2)
 40117e0:	0038ab06 	br	400fa90 <__alt_mem_onchip_memory2_0+0xfc00e7f0>
 40117e4:	dd802617 	ldw	r22,152(sp)
 40117e8:	00bfff44 	movi	r2,-3
 40117ec:	b0801c16 	blt	r22,r2,4011860 <___vfprintf_internal_r+0x1eb0>
 40117f0:	d9402a17 	ldw	r5,168(sp)
 40117f4:	2d801a16 	blt	r5,r22,4011860 <___vfprintf_internal_r+0x1eb0>
 40117f8:	dd803215 	stw	r22,200(sp)
 40117fc:	003e8906 	br	4011224 <__alt_mem_onchip_memory2_0+0xfc00ff84>
 4011800:	010100b4 	movhi	r4,1026
 4011804:	211dc484 	addi	r4,r4,30482
 4011808:	d9002c15 	stw	r4,176(sp)
 401180c:	003c9106 	br	4010a54 <__alt_mem_onchip_memory2_0+0xfc00f7b4>
 4011810:	e005883a 	mov	r2,fp
 4011814:	003e7906 	br	40111fc <__alt_mem_onchip_memory2_0+0xfc00ff5c>
 4011818:	d9002a17 	ldw	r4,168(sp)
 401181c:	df002783 	ldbu	fp,158(sp)
 4011820:	dcc02e15 	stw	r19,184(sp)
 4011824:	d9002915 	stw	r4,164(sp)
 4011828:	d9002b15 	stw	r4,172(sp)
 401182c:	d8002a15 	stw	zero,168(sp)
 4011830:	d8003215 	stw	zero,200(sp)
 4011834:	003a3b06 	br	4010124 <__alt_mem_onchip_memory2_0+0xfc00ee84>
 4011838:	9080004c 	andi	r2,r18,1
 401183c:	0039883a 	mov	fp,zero
 4011840:	10000426 	beq	r2,zero,4011854 <___vfprintf_internal_r+0x1ea4>
 4011844:	00800c04 	movi	r2,48
 4011848:	dc001dc4 	addi	r16,sp,119
 401184c:	d8801dc5 	stb	r2,119(sp)
 4011850:	003b6406 	br	40105e4 <__alt_mem_onchip_memory2_0+0xfc00f344>
 4011854:	d8002b15 	stw	zero,172(sp)
 4011858:	dc001e04 	addi	r16,sp,120
 401185c:	003a2b06 	br	401010c <__alt_mem_onchip_memory2_0+0xfc00ee6c>
 4011860:	8c7fff84 	addi	r17,r17,-2
 4011864:	b5bfffc4 	addi	r22,r22,-1
 4011868:	dd802615 	stw	r22,152(sp)
 401186c:	dc4022c5 	stb	r17,139(sp)
 4011870:	b000bf16 	blt	r22,zero,4011b70 <___vfprintf_internal_r+0x21c0>
 4011874:	00800ac4 	movi	r2,43
 4011878:	d8802305 	stb	r2,140(sp)
 401187c:	00800244 	movi	r2,9
 4011880:	15807016 	blt	r2,r22,4011a44 <___vfprintf_internal_r+0x2094>
 4011884:	00800c04 	movi	r2,48
 4011888:	b5800c04 	addi	r22,r22,48
 401188c:	d8802345 	stb	r2,141(sp)
 4011890:	dd802385 	stb	r22,142(sp)
 4011894:	d88023c4 	addi	r2,sp,143
 4011898:	df0022c4 	addi	fp,sp,139
 401189c:	d8c03317 	ldw	r3,204(sp)
 40118a0:	1739c83a 	sub	fp,r2,fp
 40118a4:	d9003317 	ldw	r4,204(sp)
 40118a8:	e0c7883a 	add	r3,fp,r3
 40118ac:	df003a15 	stw	fp,232(sp)
 40118b0:	d8c02b15 	stw	r3,172(sp)
 40118b4:	00800044 	movi	r2,1
 40118b8:	1100b30e 	bge	r2,r4,4011b88 <___vfprintf_internal_r+0x21d8>
 40118bc:	d8c02b17 	ldw	r3,172(sp)
 40118c0:	18c00044 	addi	r3,r3,1
 40118c4:	d8c02b15 	stw	r3,172(sp)
 40118c8:	1805883a 	mov	r2,r3
 40118cc:	1800ac16 	blt	r3,zero,4011b80 <___vfprintf_internal_r+0x21d0>
 40118d0:	d8003215 	stw	zero,200(sp)
 40118d4:	003e5d06 	br	401124c <__alt_mem_onchip_memory2_0+0xfc00ffac>
 40118d8:	d9002d17 	ldw	r4,180(sp)
 40118dc:	d9801e04 	addi	r6,sp,120
 40118e0:	b80b883a 	mov	r5,r23
 40118e4:	401674c0 	call	401674c <__sprint_r>
 40118e8:	1039351e 	bne	r2,zero,400fdc0 <__alt_mem_onchip_memory2_0+0xfc00eb20>
 40118ec:	dc402617 	ldw	r17,152(sp)
 40118f0:	d8c02017 	ldw	r3,128(sp)
 40118f4:	d8801f17 	ldw	r2,124(sp)
 40118f8:	da000404 	addi	r8,sp,16
 40118fc:	003ed606 	br	4011458 <__alt_mem_onchip_memory2_0+0xfc0101b8>
 4011900:	182b883a 	mov	r21,r3
 4011904:	d8002a15 	stw	zero,168(sp)
 4011908:	00388c06 	br	400fb3c <__alt_mem_onchip_memory2_0+0xfc00e89c>
 401190c:	d8802a17 	ldw	r2,168(sp)
 4011910:	103e071e 	bne	r2,zero,4011130 <__alt_mem_onchip_memory2_0+0xfc00fe90>
 4011914:	dc002a15 	stw	r16,168(sp)
 4011918:	003e0506 	br	4011130 <__alt_mem_onchip_memory2_0+0xfc00fe90>
 401191c:	d9002a17 	ldw	r4,168(sp)
 4011920:	20c00044 	addi	r3,r4,1
 4011924:	003e0f06 	br	4011164 <__alt_mem_onchip_memory2_0+0xfc00fec4>
 4011928:	01400184 	movi	r5,6
 401192c:	d9402a15 	stw	r5,168(sp)
 4011930:	003dff06 	br	4011130 <__alt_mem_onchip_memory2_0+0xfc00fe90>
 4011934:	d8802104 	addi	r2,sp,132
 4011938:	d8800315 	stw	r2,12(sp)
 401193c:	d8802504 	addi	r2,sp,148
 4011940:	d8800215 	stw	r2,8(sp)
 4011944:	d8802604 	addi	r2,sp,152
 4011948:	d8800115 	stw	r2,4(sp)
 401194c:	d8802a17 	ldw	r2,168(sp)
 4011950:	d9403617 	ldw	r5,216(sp)
 4011954:	d9002d17 	ldw	r4,180(sp)
 4011958:	d8800015 	stw	r2,0(sp)
 401195c:	01c000c4 	movi	r7,3
 4011960:	980d883a 	mov	r6,r19
 4011964:	da003d15 	stw	r8,244(sp)
 4011968:	40120e00 	call	40120e0 <_dtoa_r>
 401196c:	d8c02a17 	ldw	r3,168(sp)
 4011970:	da003d17 	ldw	r8,244(sp)
 4011974:	1021883a 	mov	r16,r2
 4011978:	10f9883a 	add	fp,r2,r3
 401197c:	81000007 	ldb	r4,0(r16)
 4011980:	00800c04 	movi	r2,48
 4011984:	20805e26 	beq	r4,r2,4011b00 <___vfprintf_internal_r+0x2150>
 4011988:	d8c02617 	ldw	r3,152(sp)
 401198c:	e0f9883a 	add	fp,fp,r3
 4011990:	003e0a06 	br	40111bc <__alt_mem_onchip_memory2_0+0xfc00ff1c>
 4011994:	00c00b44 	movi	r3,45
 4011998:	24e0003c 	xorhi	r19,r4,32768
 401199c:	d8c02905 	stb	r3,164(sp)
 40119a0:	003de906 	br	4011148 <__alt_mem_onchip_memory2_0+0xfc00fea8>
 40119a4:	d8c03217 	ldw	r3,200(sp)
 40119a8:	00c07a0e 	bge	zero,r3,4011b94 <___vfprintf_internal_r+0x21e4>
 40119ac:	00800044 	movi	r2,1
 40119b0:	d9003317 	ldw	r4,204(sp)
 40119b4:	1105883a 	add	r2,r2,r4
 40119b8:	d8802b15 	stw	r2,172(sp)
 40119bc:	10004e16 	blt	r2,zero,4011af8 <___vfprintf_internal_r+0x2148>
 40119c0:	044019c4 	movi	r17,103
 40119c4:	003e2106 	br	401124c <__alt_mem_onchip_memory2_0+0xfc00ffac>
 40119c8:	d9002a17 	ldw	r4,168(sp)
 40119cc:	d8802104 	addi	r2,sp,132
 40119d0:	d8800315 	stw	r2,12(sp)
 40119d4:	d9000015 	stw	r4,0(sp)
 40119d8:	d8802504 	addi	r2,sp,148
 40119dc:	d9403617 	ldw	r5,216(sp)
 40119e0:	d9002d17 	ldw	r4,180(sp)
 40119e4:	d8800215 	stw	r2,8(sp)
 40119e8:	d8802604 	addi	r2,sp,152
 40119ec:	d8800115 	stw	r2,4(sp)
 40119f0:	01c000c4 	movi	r7,3
 40119f4:	980d883a 	mov	r6,r19
 40119f8:	da003d15 	stw	r8,244(sp)
 40119fc:	40120e00 	call	40120e0 <_dtoa_r>
 4011a00:	d8c02a17 	ldw	r3,168(sp)
 4011a04:	da003d17 	ldw	r8,244(sp)
 4011a08:	1021883a 	mov	r16,r2
 4011a0c:	00801184 	movi	r2,70
 4011a10:	80f9883a 	add	fp,r16,r3
 4011a14:	88bfd926 	beq	r17,r2,401197c <__alt_mem_onchip_memory2_0+0xfc0106dc>
 4011a18:	003de806 	br	40111bc <__alt_mem_onchip_memory2_0+0xfc00ff1c>
 4011a1c:	d9002a17 	ldw	r4,168(sp)
 4011a20:	00c04d0e 	bge	zero,r3,4011b58 <___vfprintf_internal_r+0x21a8>
 4011a24:	2000441e 	bne	r4,zero,4011b38 <___vfprintf_internal_r+0x2188>
 4011a28:	9480004c 	andi	r18,r18,1
 4011a2c:	9000421e 	bne	r18,zero,4011b38 <___vfprintf_internal_r+0x2188>
 4011a30:	1805883a 	mov	r2,r3
 4011a34:	18006f16 	blt	r3,zero,4011bf4 <___vfprintf_internal_r+0x2244>
 4011a38:	d8c03217 	ldw	r3,200(sp)
 4011a3c:	d8c02b15 	stw	r3,172(sp)
 4011a40:	003e0206 	br	401124c <__alt_mem_onchip_memory2_0+0xfc00ffac>
 4011a44:	df0022c4 	addi	fp,sp,139
 4011a48:	dc002a15 	stw	r16,168(sp)
 4011a4c:	4027883a 	mov	r19,r8
 4011a50:	e021883a 	mov	r16,fp
 4011a54:	b009883a 	mov	r4,r22
 4011a58:	01400284 	movi	r5,10
 4011a5c:	400d6680 	call	400d668 <__modsi3>
 4011a60:	10800c04 	addi	r2,r2,48
 4011a64:	843fffc4 	addi	r16,r16,-1
 4011a68:	b009883a 	mov	r4,r22
 4011a6c:	01400284 	movi	r5,10
 4011a70:	80800005 	stb	r2,0(r16)
 4011a74:	400d5e40 	call	400d5e4 <__divsi3>
 4011a78:	102d883a 	mov	r22,r2
 4011a7c:	00800244 	movi	r2,9
 4011a80:	15bff416 	blt	r2,r22,4011a54 <__alt_mem_onchip_memory2_0+0xfc0107b4>
 4011a84:	9811883a 	mov	r8,r19
 4011a88:	b0800c04 	addi	r2,r22,48
 4011a8c:	8027883a 	mov	r19,r16
 4011a90:	997fffc4 	addi	r5,r19,-1
 4011a94:	98bfffc5 	stb	r2,-1(r19)
 4011a98:	dc002a17 	ldw	r16,168(sp)
 4011a9c:	2f006d2e 	bgeu	r5,fp,4011c54 <___vfprintf_internal_r+0x22a4>
 4011aa0:	d9c02384 	addi	r7,sp,142
 4011aa4:	3ccfc83a 	sub	r7,r7,r19
 4011aa8:	d9002344 	addi	r4,sp,141
 4011aac:	e1cf883a 	add	r7,fp,r7
 4011ab0:	00000106 	br	4011ab8 <___vfprintf_internal_r+0x2108>
 4011ab4:	28800003 	ldbu	r2,0(r5)
 4011ab8:	20800005 	stb	r2,0(r4)
 4011abc:	21000044 	addi	r4,r4,1
 4011ac0:	29400044 	addi	r5,r5,1
 4011ac4:	393ffb1e 	bne	r7,r4,4011ab4 <__alt_mem_onchip_memory2_0+0xfc010814>
 4011ac8:	d8802304 	addi	r2,sp,140
 4011acc:	14c5c83a 	sub	r2,r2,r19
 4011ad0:	d8c02344 	addi	r3,sp,141
 4011ad4:	1885883a 	add	r2,r3,r2
 4011ad8:	003f7006 	br	401189c <__alt_mem_onchip_memory2_0+0xfc0105fc>
 4011adc:	0005883a 	mov	r2,zero
 4011ae0:	003f0f06 	br	4011720 <__alt_mem_onchip_memory2_0+0xfc010480>
 4011ae4:	d8c03217 	ldw	r3,200(sp)
 4011ae8:	18c00044 	addi	r3,r3,1
 4011aec:	d8c02b15 	stw	r3,172(sp)
 4011af0:	1805883a 	mov	r2,r3
 4011af4:	183fb20e 	bge	r3,zero,40119c0 <__alt_mem_onchip_memory2_0+0xfc010720>
 4011af8:	0005883a 	mov	r2,zero
 4011afc:	003fb006 	br	40119c0 <__alt_mem_onchip_memory2_0+0xfc010720>
 4011b00:	d9003617 	ldw	r4,216(sp)
 4011b04:	000d883a 	mov	r6,zero
 4011b08:	000f883a 	mov	r7,zero
 4011b0c:	980b883a 	mov	r5,r19
 4011b10:	d8c03c15 	stw	r3,240(sp)
 4011b14:	da003d15 	stw	r8,244(sp)
 4011b18:	401a4d00 	call	401a4d0 <__eqdf2>
 4011b1c:	d8c03c17 	ldw	r3,240(sp)
 4011b20:	da003d17 	ldw	r8,244(sp)
 4011b24:	103f9826 	beq	r2,zero,4011988 <__alt_mem_onchip_memory2_0+0xfc0106e8>
 4011b28:	00800044 	movi	r2,1
 4011b2c:	10c7c83a 	sub	r3,r2,r3
 4011b30:	d8c02615 	stw	r3,152(sp)
 4011b34:	003f9506 	br	401198c <__alt_mem_onchip_memory2_0+0xfc0106ec>
 4011b38:	d9002a17 	ldw	r4,168(sp)
 4011b3c:	d8c03217 	ldw	r3,200(sp)
 4011b40:	20800044 	addi	r2,r4,1
 4011b44:	1885883a 	add	r2,r3,r2
 4011b48:	d8802b15 	stw	r2,172(sp)
 4011b4c:	103dbf0e 	bge	r2,zero,401124c <__alt_mem_onchip_memory2_0+0xfc00ffac>
 4011b50:	0005883a 	mov	r2,zero
 4011b54:	003dbd06 	br	401124c <__alt_mem_onchip_memory2_0+0xfc00ffac>
 4011b58:	2000201e 	bne	r4,zero,4011bdc <___vfprintf_internal_r+0x222c>
 4011b5c:	9480004c 	andi	r18,r18,1
 4011b60:	90001e1e 	bne	r18,zero,4011bdc <___vfprintf_internal_r+0x222c>
 4011b64:	00800044 	movi	r2,1
 4011b68:	d8802b15 	stw	r2,172(sp)
 4011b6c:	003db706 	br	401124c <__alt_mem_onchip_memory2_0+0xfc00ffac>
 4011b70:	00800b44 	movi	r2,45
 4011b74:	05adc83a 	sub	r22,zero,r22
 4011b78:	d8802305 	stb	r2,140(sp)
 4011b7c:	003f3f06 	br	401187c <__alt_mem_onchip_memory2_0+0xfc0105dc>
 4011b80:	0005883a 	mov	r2,zero
 4011b84:	003f5206 	br	40118d0 <__alt_mem_onchip_memory2_0+0xfc010630>
 4011b88:	90a4703a 	and	r18,r18,r2
 4011b8c:	903f4e26 	beq	r18,zero,40118c8 <__alt_mem_onchip_memory2_0+0xfc010628>
 4011b90:	003f4a06 	br	40118bc <__alt_mem_onchip_memory2_0+0xfc01061c>
 4011b94:	00800084 	movi	r2,2
 4011b98:	10c5c83a 	sub	r2,r2,r3
 4011b9c:	003f8406 	br	40119b0 <__alt_mem_onchip_memory2_0+0xfc010710>
 4011ba0:	d9402e17 	ldw	r5,184(sp)
 4011ba4:	d9002e17 	ldw	r4,184(sp)
 4011ba8:	ac400043 	ldbu	r17,1(r21)
 4011bac:	29400017 	ldw	r5,0(r5)
 4011bb0:	20800104 	addi	r2,r4,4
 4011bb4:	d8802e15 	stw	r2,184(sp)
 4011bb8:	d9402a15 	stw	r5,168(sp)
 4011bbc:	182b883a 	mov	r21,r3
 4011bc0:	283e7b0e 	bge	r5,zero,40115b0 <__alt_mem_onchip_memory2_0+0xfc010310>
 4011bc4:	8c403fcc 	andi	r17,r17,255
 4011bc8:	017fffc4 	movi	r5,-1
 4011bcc:	8c40201c 	xori	r17,r17,128
 4011bd0:	d9402a15 	stw	r5,168(sp)
 4011bd4:	8c7fe004 	addi	r17,r17,-128
 4011bd8:	0037d706 	br	400fb38 <__alt_mem_onchip_memory2_0+0xfc00e898>
 4011bdc:	d8c02a17 	ldw	r3,168(sp)
 4011be0:	18c00084 	addi	r3,r3,2
 4011be4:	d8c02b15 	stw	r3,172(sp)
 4011be8:	1805883a 	mov	r2,r3
 4011bec:	183d970e 	bge	r3,zero,401124c <__alt_mem_onchip_memory2_0+0xfc00ffac>
 4011bf0:	003fd706 	br	4011b50 <__alt_mem_onchip_memory2_0+0xfc0108b0>
 4011bf4:	0005883a 	mov	r2,zero
 4011bf8:	003f8f06 	br	4011a38 <__alt_mem_onchip_memory2_0+0xfc010798>
 4011bfc:	9080004c 	andi	r2,r18,1
 4011c00:	103f821e 	bne	r2,zero,4011a0c <__alt_mem_onchip_memory2_0+0xfc01076c>
 4011c04:	d8802117 	ldw	r2,132(sp)
 4011c08:	1405c83a 	sub	r2,r2,r16
 4011c0c:	d8803315 	stw	r2,204(sp)
 4011c10:	b47ef426 	beq	r22,r17,40117e4 <__alt_mem_onchip_memory2_0+0xfc010544>
 4011c14:	dd802617 	ldw	r22,152(sp)
 4011c18:	003f1206 	br	4011864 <__alt_mem_onchip_memory2_0+0xfc0105c4>
 4011c1c:	d8c02b03 	ldbu	r3,172(sp)
 4011c20:	d8c02785 	stb	r3,158(sp)
 4011c24:	0038df06 	br	400ffa4 <__alt_mem_onchip_memory2_0+0xfc00ed04>
 4011c28:	d8c02b03 	ldbu	r3,172(sp)
 4011c2c:	d8c02785 	stb	r3,158(sp)
 4011c30:	0038aa06 	br	400fedc <__alt_mem_onchip_memory2_0+0xfc00ec3c>
 4011c34:	d8c02b03 	ldbu	r3,172(sp)
 4011c38:	d8c02785 	stb	r3,158(sp)
 4011c3c:	003a4306 	br	401054c <__alt_mem_onchip_memory2_0+0xfc00f2ac>
 4011c40:	d8c02b03 	ldbu	r3,172(sp)
 4011c44:	d8c02785 	stb	r3,158(sp)
 4011c48:	003af506 	br	4010820 <__alt_mem_onchip_memory2_0+0xfc00f580>
 4011c4c:	0005883a 	mov	r2,zero
 4011c50:	003d7b06 	br	4011240 <__alt_mem_onchip_memory2_0+0xfc00ffa0>
 4011c54:	d8802344 	addi	r2,sp,141
 4011c58:	003f1006 	br	401189c <__alt_mem_onchip_memory2_0+0xfc0105fc>
 4011c5c:	d8c02b03 	ldbu	r3,172(sp)
 4011c60:	d8c02785 	stb	r3,158(sp)
 4011c64:	0038fd06 	br	401005c <__alt_mem_onchip_memory2_0+0xfc00edbc>
 4011c68:	d8c02b03 	ldbu	r3,172(sp)
 4011c6c:	d8c02785 	stb	r3,158(sp)
 4011c70:	003a9706 	br	40106d0 <__alt_mem_onchip_memory2_0+0xfc00f430>
 4011c74:	d8c02b03 	ldbu	r3,172(sp)
 4011c78:	d8c02785 	stb	r3,158(sp)
 4011c7c:	003a1806 	br	40104e0 <__alt_mem_onchip_memory2_0+0xfc00f240>
 4011c80:	d8c02b03 	ldbu	r3,172(sp)
 4011c84:	d8c02785 	stb	r3,158(sp)
 4011c88:	003abe06 	br	4010784 <__alt_mem_onchip_memory2_0+0xfc00f4e4>

04011c8c <__vfprintf_internal>:
 4011c8c:	008100f4 	movhi	r2,1027
 4011c90:	10aaa304 	addi	r2,r2,-21876
 4011c94:	300f883a 	mov	r7,r6
 4011c98:	280d883a 	mov	r6,r5
 4011c9c:	200b883a 	mov	r5,r4
 4011ca0:	11000017 	ldw	r4,0(r2)
 4011ca4:	400f9b01 	jmpi	400f9b0 <___vfprintf_internal_r>

04011ca8 <__sbprintf>:
 4011ca8:	2880030b 	ldhu	r2,12(r5)
 4011cac:	2ac01917 	ldw	r11,100(r5)
 4011cb0:	2a80038b 	ldhu	r10,14(r5)
 4011cb4:	2a400717 	ldw	r9,28(r5)
 4011cb8:	2a000917 	ldw	r8,36(r5)
 4011cbc:	defee204 	addi	sp,sp,-1144
 4011cc0:	00c10004 	movi	r3,1024
 4011cc4:	dc011a15 	stw	r16,1128(sp)
 4011cc8:	10bfff4c 	andi	r2,r2,65533
 4011ccc:	2821883a 	mov	r16,r5
 4011cd0:	d8cb883a 	add	r5,sp,r3
 4011cd4:	dc811c15 	stw	r18,1136(sp)
 4011cd8:	dc411b15 	stw	r17,1132(sp)
 4011cdc:	dfc11d15 	stw	ra,1140(sp)
 4011ce0:	2025883a 	mov	r18,r4
 4011ce4:	d881030d 	sth	r2,1036(sp)
 4011ce8:	dac11915 	stw	r11,1124(sp)
 4011cec:	da81038d 	sth	r10,1038(sp)
 4011cf0:	da410715 	stw	r9,1052(sp)
 4011cf4:	da010915 	stw	r8,1060(sp)
 4011cf8:	dec10015 	stw	sp,1024(sp)
 4011cfc:	dec10415 	stw	sp,1040(sp)
 4011d00:	d8c10215 	stw	r3,1032(sp)
 4011d04:	d8c10515 	stw	r3,1044(sp)
 4011d08:	d8010615 	stw	zero,1048(sp)
 4011d0c:	400f9b00 	call	400f9b0 <___vfprintf_internal_r>
 4011d10:	1023883a 	mov	r17,r2
 4011d14:	10000416 	blt	r2,zero,4011d28 <__sbprintf+0x80>
 4011d18:	d9410004 	addi	r5,sp,1024
 4011d1c:	9009883a 	mov	r4,r18
 4011d20:	40139840 	call	4013984 <_fflush_r>
 4011d24:	10000d1e 	bne	r2,zero,4011d5c <__sbprintf+0xb4>
 4011d28:	d881030b 	ldhu	r2,1036(sp)
 4011d2c:	1080100c 	andi	r2,r2,64
 4011d30:	10000326 	beq	r2,zero,4011d40 <__sbprintf+0x98>
 4011d34:	8080030b 	ldhu	r2,12(r16)
 4011d38:	10801014 	ori	r2,r2,64
 4011d3c:	8080030d 	sth	r2,12(r16)
 4011d40:	8805883a 	mov	r2,r17
 4011d44:	dfc11d17 	ldw	ra,1140(sp)
 4011d48:	dc811c17 	ldw	r18,1136(sp)
 4011d4c:	dc411b17 	ldw	r17,1132(sp)
 4011d50:	dc011a17 	ldw	r16,1128(sp)
 4011d54:	dec11e04 	addi	sp,sp,1144
 4011d58:	f800283a 	ret
 4011d5c:	047fffc4 	movi	r17,-1
 4011d60:	003ff106 	br	4011d28 <__alt_mem_onchip_memory2_0+0xfc010a88>

04011d64 <__swsetup_r>:
 4011d64:	008100f4 	movhi	r2,1027
 4011d68:	defffd04 	addi	sp,sp,-12
 4011d6c:	10aaa304 	addi	r2,r2,-21876
 4011d70:	dc400115 	stw	r17,4(sp)
 4011d74:	2023883a 	mov	r17,r4
 4011d78:	11000017 	ldw	r4,0(r2)
 4011d7c:	dc000015 	stw	r16,0(sp)
 4011d80:	dfc00215 	stw	ra,8(sp)
 4011d84:	2821883a 	mov	r16,r5
 4011d88:	20000226 	beq	r4,zero,4011d94 <__swsetup_r+0x30>
 4011d8c:	20800e17 	ldw	r2,56(r4)
 4011d90:	10003126 	beq	r2,zero,4011e58 <__swsetup_r+0xf4>
 4011d94:	8080030b 	ldhu	r2,12(r16)
 4011d98:	10c0020c 	andi	r3,r2,8
 4011d9c:	1009883a 	mov	r4,r2
 4011da0:	18000f26 	beq	r3,zero,4011de0 <__swsetup_r+0x7c>
 4011da4:	80c00417 	ldw	r3,16(r16)
 4011da8:	18001526 	beq	r3,zero,4011e00 <__swsetup_r+0x9c>
 4011dac:	1100004c 	andi	r4,r2,1
 4011db0:	20001c1e 	bne	r4,zero,4011e24 <__swsetup_r+0xc0>
 4011db4:	1080008c 	andi	r2,r2,2
 4011db8:	1000291e 	bne	r2,zero,4011e60 <__swsetup_r+0xfc>
 4011dbc:	80800517 	ldw	r2,20(r16)
 4011dc0:	80800215 	stw	r2,8(r16)
 4011dc4:	18001c26 	beq	r3,zero,4011e38 <__swsetup_r+0xd4>
 4011dc8:	0005883a 	mov	r2,zero
 4011dcc:	dfc00217 	ldw	ra,8(sp)
 4011dd0:	dc400117 	ldw	r17,4(sp)
 4011dd4:	dc000017 	ldw	r16,0(sp)
 4011dd8:	dec00304 	addi	sp,sp,12
 4011ddc:	f800283a 	ret
 4011de0:	2080040c 	andi	r2,r4,16
 4011de4:	10002e26 	beq	r2,zero,4011ea0 <__swsetup_r+0x13c>
 4011de8:	2080010c 	andi	r2,r4,4
 4011dec:	10001e1e 	bne	r2,zero,4011e68 <__swsetup_r+0x104>
 4011df0:	80c00417 	ldw	r3,16(r16)
 4011df4:	20800214 	ori	r2,r4,8
 4011df8:	8080030d 	sth	r2,12(r16)
 4011dfc:	183feb1e 	bne	r3,zero,4011dac <__alt_mem_onchip_memory2_0+0xfc010b0c>
 4011e00:	1100a00c 	andi	r4,r2,640
 4011e04:	01408004 	movi	r5,512
 4011e08:	217fe826 	beq	r4,r5,4011dac <__alt_mem_onchip_memory2_0+0xfc010b0c>
 4011e0c:	800b883a 	mov	r5,r16
 4011e10:	8809883a 	mov	r4,r17
 4011e14:	40149200 	call	4014920 <__smakebuf_r>
 4011e18:	8080030b 	ldhu	r2,12(r16)
 4011e1c:	80c00417 	ldw	r3,16(r16)
 4011e20:	003fe206 	br	4011dac <__alt_mem_onchip_memory2_0+0xfc010b0c>
 4011e24:	80800517 	ldw	r2,20(r16)
 4011e28:	80000215 	stw	zero,8(r16)
 4011e2c:	0085c83a 	sub	r2,zero,r2
 4011e30:	80800615 	stw	r2,24(r16)
 4011e34:	183fe41e 	bne	r3,zero,4011dc8 <__alt_mem_onchip_memory2_0+0xfc010b28>
 4011e38:	80c0030b 	ldhu	r3,12(r16)
 4011e3c:	0005883a 	mov	r2,zero
 4011e40:	1900200c 	andi	r4,r3,128
 4011e44:	203fe126 	beq	r4,zero,4011dcc <__alt_mem_onchip_memory2_0+0xfc010b2c>
 4011e48:	18c01014 	ori	r3,r3,64
 4011e4c:	80c0030d 	sth	r3,12(r16)
 4011e50:	00bfffc4 	movi	r2,-1
 4011e54:	003fdd06 	br	4011dcc <__alt_mem_onchip_memory2_0+0xfc010b2c>
 4011e58:	4013d700 	call	4013d70 <__sinit>
 4011e5c:	003fcd06 	br	4011d94 <__alt_mem_onchip_memory2_0+0xfc010af4>
 4011e60:	0005883a 	mov	r2,zero
 4011e64:	003fd606 	br	4011dc0 <__alt_mem_onchip_memory2_0+0xfc010b20>
 4011e68:	81400c17 	ldw	r5,48(r16)
 4011e6c:	28000626 	beq	r5,zero,4011e88 <__swsetup_r+0x124>
 4011e70:	80801004 	addi	r2,r16,64
 4011e74:	28800326 	beq	r5,r2,4011e84 <__swsetup_r+0x120>
 4011e78:	8809883a 	mov	r4,r17
 4011e7c:	4013ee40 	call	4013ee4 <_free_r>
 4011e80:	8100030b 	ldhu	r4,12(r16)
 4011e84:	80000c15 	stw	zero,48(r16)
 4011e88:	80c00417 	ldw	r3,16(r16)
 4011e8c:	00bff6c4 	movi	r2,-37
 4011e90:	1108703a 	and	r4,r2,r4
 4011e94:	80000115 	stw	zero,4(r16)
 4011e98:	80c00015 	stw	r3,0(r16)
 4011e9c:	003fd506 	br	4011df4 <__alt_mem_onchip_memory2_0+0xfc010b54>
 4011ea0:	00800244 	movi	r2,9
 4011ea4:	88800015 	stw	r2,0(r17)
 4011ea8:	20801014 	ori	r2,r4,64
 4011eac:	8080030d 	sth	r2,12(r16)
 4011eb0:	00bfffc4 	movi	r2,-1
 4011eb4:	003fc506 	br	4011dcc <__alt_mem_onchip_memory2_0+0xfc010b2c>

04011eb8 <quorem>:
 4011eb8:	defff204 	addi	sp,sp,-56
 4011ebc:	ddc00b15 	stw	r23,44(sp)
 4011ec0:	20800417 	ldw	r2,16(r4)
 4011ec4:	2dc00417 	ldw	r23,16(r5)
 4011ec8:	dfc00d15 	stw	ra,52(sp)
 4011ecc:	df000c15 	stw	fp,48(sp)
 4011ed0:	dd800a15 	stw	r22,40(sp)
 4011ed4:	dd400915 	stw	r21,36(sp)
 4011ed8:	dd000815 	stw	r20,32(sp)
 4011edc:	dcc00715 	stw	r19,28(sp)
 4011ee0:	dc800615 	stw	r18,24(sp)
 4011ee4:	dc400515 	stw	r17,20(sp)
 4011ee8:	dc000415 	stw	r16,16(sp)
 4011eec:	15c07a16 	blt	r2,r23,40120d8 <quorem+0x220>
 4011ef0:	bdffffc4 	addi	r23,r23,-1
 4011ef4:	bde9883a 	add	r20,r23,r23
 4011ef8:	28c00504 	addi	r3,r5,20
 4011efc:	a529883a 	add	r20,r20,r20
 4011f00:	1d39883a 	add	fp,r3,r20
 4011f04:	24c00504 	addi	r19,r4,20
 4011f08:	d9400215 	stw	r5,8(sp)
 4011f0c:	9d29883a 	add	r20,r19,r20
 4011f10:	e1400017 	ldw	r5,0(fp)
 4011f14:	d9000015 	stw	r4,0(sp)
 4011f18:	a1000017 	ldw	r4,0(r20)
 4011f1c:	29400044 	addi	r5,r5,1
 4011f20:	d8c00115 	stw	r3,4(sp)
 4011f24:	dd000315 	stw	r20,12(sp)
 4011f28:	400d6dc0 	call	400d6dc <__udivsi3>
 4011f2c:	1025883a 	mov	r18,r2
 4011f30:	10003026 	beq	r2,zero,4011ff4 <quorem+0x13c>
 4011f34:	dc400117 	ldw	r17,4(sp)
 4011f38:	9829883a 	mov	r20,r19
 4011f3c:	002d883a 	mov	r22,zero
 4011f40:	0021883a 	mov	r16,zero
 4011f44:	8d400017 	ldw	r21,0(r17)
 4011f48:	900b883a 	mov	r5,r18
 4011f4c:	8c400104 	addi	r17,r17,4
 4011f50:	a93fffcc 	andi	r4,r21,65535
 4011f54:	400d7980 	call	400d798 <__mulsi3>
 4011f58:	a808d43a 	srli	r4,r21,16
 4011f5c:	900b883a 	mov	r5,r18
 4011f60:	15ad883a 	add	r22,r2,r22
 4011f64:	400d7980 	call	400d798 <__mulsi3>
 4011f68:	a1000017 	ldw	r4,0(r20)
 4011f6c:	b00cd43a 	srli	r6,r22,16
 4011f70:	b0ffffcc 	andi	r3,r22,65535
 4011f74:	217fffcc 	andi	r5,r4,65535
 4011f78:	2c21883a 	add	r16,r5,r16
 4011f7c:	80c7c83a 	sub	r3,r16,r3
 4011f80:	2008d43a 	srli	r4,r4,16
 4011f84:	1185883a 	add	r2,r2,r6
 4011f88:	1821d43a 	srai	r16,r3,16
 4011f8c:	117fffcc 	andi	r5,r2,65535
 4011f90:	2149c83a 	sub	r4,r4,r5
 4011f94:	2421883a 	add	r16,r4,r16
 4011f98:	8008943a 	slli	r4,r16,16
 4011f9c:	18ffffcc 	andi	r3,r3,65535
 4011fa0:	102cd43a 	srli	r22,r2,16
 4011fa4:	20c8b03a 	or	r4,r4,r3
 4011fa8:	a1000015 	stw	r4,0(r20)
 4011fac:	8021d43a 	srai	r16,r16,16
 4011fb0:	a5000104 	addi	r20,r20,4
 4011fb4:	e47fe32e 	bgeu	fp,r17,4011f44 <__alt_mem_onchip_memory2_0+0xfc010ca4>
 4011fb8:	d8c00317 	ldw	r3,12(sp)
 4011fbc:	18800017 	ldw	r2,0(r3)
 4011fc0:	10000c1e 	bne	r2,zero,4011ff4 <quorem+0x13c>
 4011fc4:	18bfff04 	addi	r2,r3,-4
 4011fc8:	9880082e 	bgeu	r19,r2,4011fec <quorem+0x134>
 4011fcc:	18ffff17 	ldw	r3,-4(r3)
 4011fd0:	18000326 	beq	r3,zero,4011fe0 <quorem+0x128>
 4011fd4:	00000506 	br	4011fec <quorem+0x134>
 4011fd8:	10c00017 	ldw	r3,0(r2)
 4011fdc:	1800031e 	bne	r3,zero,4011fec <quorem+0x134>
 4011fe0:	10bfff04 	addi	r2,r2,-4
 4011fe4:	bdffffc4 	addi	r23,r23,-1
 4011fe8:	98bffb36 	bltu	r19,r2,4011fd8 <__alt_mem_onchip_memory2_0+0xfc010d38>
 4011fec:	d8c00017 	ldw	r3,0(sp)
 4011ff0:	1dc00415 	stw	r23,16(r3)
 4011ff4:	d9400217 	ldw	r5,8(sp)
 4011ff8:	d9000017 	ldw	r4,0(sp)
 4011ffc:	40156a00 	call	40156a0 <__mcmp>
 4012000:	10002816 	blt	r2,zero,40120a4 <quorem+0x1ec>
 4012004:	dc400117 	ldw	r17,4(sp)
 4012008:	94800044 	addi	r18,r18,1
 401200c:	980d883a 	mov	r6,r19
 4012010:	0007883a 	mov	r3,zero
 4012014:	31000017 	ldw	r4,0(r6)
 4012018:	89400017 	ldw	r5,0(r17)
 401201c:	31800104 	addi	r6,r6,4
 4012020:	20bfffcc 	andi	r2,r4,65535
 4012024:	10c7883a 	add	r3,r2,r3
 4012028:	28bfffcc 	andi	r2,r5,65535
 401202c:	1885c83a 	sub	r2,r3,r2
 4012030:	280ad43a 	srli	r5,r5,16
 4012034:	2008d43a 	srli	r4,r4,16
 4012038:	1007d43a 	srai	r3,r2,16
 401203c:	10bfffcc 	andi	r2,r2,65535
 4012040:	2149c83a 	sub	r4,r4,r5
 4012044:	20c9883a 	add	r4,r4,r3
 4012048:	200a943a 	slli	r5,r4,16
 401204c:	8c400104 	addi	r17,r17,4
 4012050:	2007d43a 	srai	r3,r4,16
 4012054:	2884b03a 	or	r2,r5,r2
 4012058:	30bfff15 	stw	r2,-4(r6)
 401205c:	e47fed2e 	bgeu	fp,r17,4012014 <__alt_mem_onchip_memory2_0+0xfc010d74>
 4012060:	bdc5883a 	add	r2,r23,r23
 4012064:	1085883a 	add	r2,r2,r2
 4012068:	9887883a 	add	r3,r19,r2
 401206c:	18800017 	ldw	r2,0(r3)
 4012070:	10000c1e 	bne	r2,zero,40120a4 <quorem+0x1ec>
 4012074:	18bfff04 	addi	r2,r3,-4
 4012078:	9880082e 	bgeu	r19,r2,401209c <quorem+0x1e4>
 401207c:	18ffff17 	ldw	r3,-4(r3)
 4012080:	18000326 	beq	r3,zero,4012090 <quorem+0x1d8>
 4012084:	00000506 	br	401209c <quorem+0x1e4>
 4012088:	10c00017 	ldw	r3,0(r2)
 401208c:	1800031e 	bne	r3,zero,401209c <quorem+0x1e4>
 4012090:	10bfff04 	addi	r2,r2,-4
 4012094:	bdffffc4 	addi	r23,r23,-1
 4012098:	98bffb36 	bltu	r19,r2,4012088 <__alt_mem_onchip_memory2_0+0xfc010de8>
 401209c:	d8c00017 	ldw	r3,0(sp)
 40120a0:	1dc00415 	stw	r23,16(r3)
 40120a4:	9005883a 	mov	r2,r18
 40120a8:	dfc00d17 	ldw	ra,52(sp)
 40120ac:	df000c17 	ldw	fp,48(sp)
 40120b0:	ddc00b17 	ldw	r23,44(sp)
 40120b4:	dd800a17 	ldw	r22,40(sp)
 40120b8:	dd400917 	ldw	r21,36(sp)
 40120bc:	dd000817 	ldw	r20,32(sp)
 40120c0:	dcc00717 	ldw	r19,28(sp)
 40120c4:	dc800617 	ldw	r18,24(sp)
 40120c8:	dc400517 	ldw	r17,20(sp)
 40120cc:	dc000417 	ldw	r16,16(sp)
 40120d0:	dec00e04 	addi	sp,sp,56
 40120d4:	f800283a 	ret
 40120d8:	0005883a 	mov	r2,zero
 40120dc:	003ff206 	br	40120a8 <__alt_mem_onchip_memory2_0+0xfc010e08>

040120e0 <_dtoa_r>:
 40120e0:	20801017 	ldw	r2,64(r4)
 40120e4:	deffde04 	addi	sp,sp,-136
 40120e8:	df002015 	stw	fp,128(sp)
 40120ec:	dcc01b15 	stw	r19,108(sp)
 40120f0:	dc801a15 	stw	r18,104(sp)
 40120f4:	dc401915 	stw	r17,100(sp)
 40120f8:	dc001815 	stw	r16,96(sp)
 40120fc:	dfc02115 	stw	ra,132(sp)
 4012100:	ddc01f15 	stw	r23,124(sp)
 4012104:	dd801e15 	stw	r22,120(sp)
 4012108:	dd401d15 	stw	r21,116(sp)
 401210c:	dd001c15 	stw	r20,112(sp)
 4012110:	d9c00315 	stw	r7,12(sp)
 4012114:	2039883a 	mov	fp,r4
 4012118:	3023883a 	mov	r17,r6
 401211c:	2825883a 	mov	r18,r5
 4012120:	dc002417 	ldw	r16,144(sp)
 4012124:	3027883a 	mov	r19,r6
 4012128:	10000826 	beq	r2,zero,401214c <_dtoa_r+0x6c>
 401212c:	21801117 	ldw	r6,68(r4)
 4012130:	00c00044 	movi	r3,1
 4012134:	100b883a 	mov	r5,r2
 4012138:	1986983a 	sll	r3,r3,r6
 401213c:	11800115 	stw	r6,4(r2)
 4012140:	10c00215 	stw	r3,8(r2)
 4012144:	4014dc40 	call	4014dc4 <_Bfree>
 4012148:	e0001015 	stw	zero,64(fp)
 401214c:	88002e16 	blt	r17,zero,4012208 <_dtoa_r+0x128>
 4012150:	80000015 	stw	zero,0(r16)
 4012154:	889ffc2c 	andhi	r2,r17,32752
 4012158:	00dffc34 	movhi	r3,32752
 401215c:	10c01c26 	beq	r2,r3,40121d0 <_dtoa_r+0xf0>
 4012160:	000d883a 	mov	r6,zero
 4012164:	000f883a 	mov	r7,zero
 4012168:	9009883a 	mov	r4,r18
 401216c:	980b883a 	mov	r5,r19
 4012170:	401a4d00 	call	401a4d0 <__eqdf2>
 4012174:	10002b1e 	bne	r2,zero,4012224 <_dtoa_r+0x144>
 4012178:	d9c02317 	ldw	r7,140(sp)
 401217c:	00800044 	movi	r2,1
 4012180:	38800015 	stw	r2,0(r7)
 4012184:	d8802517 	ldw	r2,148(sp)
 4012188:	10019e26 	beq	r2,zero,4012804 <_dtoa_r+0x724>
 401218c:	d8c02517 	ldw	r3,148(sp)
 4012190:	008100b4 	movhi	r2,1026
 4012194:	109dc444 	addi	r2,r2,30481
 4012198:	18800015 	stw	r2,0(r3)
 401219c:	10bfffc4 	addi	r2,r2,-1
 40121a0:	dfc02117 	ldw	ra,132(sp)
 40121a4:	df002017 	ldw	fp,128(sp)
 40121a8:	ddc01f17 	ldw	r23,124(sp)
 40121ac:	dd801e17 	ldw	r22,120(sp)
 40121b0:	dd401d17 	ldw	r21,116(sp)
 40121b4:	dd001c17 	ldw	r20,112(sp)
 40121b8:	dcc01b17 	ldw	r19,108(sp)
 40121bc:	dc801a17 	ldw	r18,104(sp)
 40121c0:	dc401917 	ldw	r17,100(sp)
 40121c4:	dc001817 	ldw	r16,96(sp)
 40121c8:	dec02204 	addi	sp,sp,136
 40121cc:	f800283a 	ret
 40121d0:	d8c02317 	ldw	r3,140(sp)
 40121d4:	0089c3c4 	movi	r2,9999
 40121d8:	18800015 	stw	r2,0(r3)
 40121dc:	90017726 	beq	r18,zero,40127bc <_dtoa_r+0x6dc>
 40121e0:	008100b4 	movhi	r2,1026
 40121e4:	109dd004 	addi	r2,r2,30528
 40121e8:	d9002517 	ldw	r4,148(sp)
 40121ec:	203fec26 	beq	r4,zero,40121a0 <__alt_mem_onchip_memory2_0+0xfc010f00>
 40121f0:	10c000c7 	ldb	r3,3(r2)
 40121f4:	1801781e 	bne	r3,zero,40127d8 <_dtoa_r+0x6f8>
 40121f8:	10c000c4 	addi	r3,r2,3
 40121fc:	d9802517 	ldw	r6,148(sp)
 4012200:	30c00015 	stw	r3,0(r6)
 4012204:	003fe606 	br	40121a0 <__alt_mem_onchip_memory2_0+0xfc010f00>
 4012208:	04e00034 	movhi	r19,32768
 401220c:	9cffffc4 	addi	r19,r19,-1
 4012210:	00800044 	movi	r2,1
 4012214:	8ce6703a 	and	r19,r17,r19
 4012218:	80800015 	stw	r2,0(r16)
 401221c:	9823883a 	mov	r17,r19
 4012220:	003fcc06 	br	4012154 <__alt_mem_onchip_memory2_0+0xfc010eb4>
 4012224:	d8800204 	addi	r2,sp,8
 4012228:	d8800015 	stw	r2,0(sp)
 401222c:	d9c00104 	addi	r7,sp,4
 4012230:	900b883a 	mov	r5,r18
 4012234:	980d883a 	mov	r6,r19
 4012238:	e009883a 	mov	r4,fp
 401223c:	8820d53a 	srli	r16,r17,20
 4012240:	4015a6c0 	call	4015a6c <__d2b>
 4012244:	d8800915 	stw	r2,36(sp)
 4012248:	8001651e 	bne	r16,zero,40127e0 <_dtoa_r+0x700>
 401224c:	dd800217 	ldw	r22,8(sp)
 4012250:	dc000117 	ldw	r16,4(sp)
 4012254:	00800804 	movi	r2,32
 4012258:	b421883a 	add	r16,r22,r16
 401225c:	80c10c84 	addi	r3,r16,1074
 4012260:	10c2d10e 	bge	r2,r3,4012da8 <_dtoa_r+0xcc8>
 4012264:	00801004 	movi	r2,64
 4012268:	81010484 	addi	r4,r16,1042
 401226c:	10c7c83a 	sub	r3,r2,r3
 4012270:	9108d83a 	srl	r4,r18,r4
 4012274:	88e2983a 	sll	r17,r17,r3
 4012278:	2448b03a 	or	r4,r4,r17
 401227c:	401b9ec0 	call	401b9ec <__floatunsidf>
 4012280:	017f8434 	movhi	r5,65040
 4012284:	01800044 	movi	r6,1
 4012288:	1009883a 	mov	r4,r2
 401228c:	194b883a 	add	r5,r3,r5
 4012290:	843fffc4 	addi	r16,r16,-1
 4012294:	d9801115 	stw	r6,68(sp)
 4012298:	000d883a 	mov	r6,zero
 401229c:	01cffe34 	movhi	r7,16376
 40122a0:	401af940 	call	401af94 <__subdf3>
 40122a4:	0198dbf4 	movhi	r6,25455
 40122a8:	01cff4f4 	movhi	r7,16339
 40122ac:	3190d844 	addi	r6,r6,17249
 40122b0:	39e1e9c4 	addi	r7,r7,-30809
 40122b4:	1009883a 	mov	r4,r2
 40122b8:	180b883a 	mov	r5,r3
 40122bc:	401a7280 	call	401a728 <__muldf3>
 40122c0:	01a2d874 	movhi	r6,35681
 40122c4:	01cff1f4 	movhi	r7,16327
 40122c8:	31b22cc4 	addi	r6,r6,-14157
 40122cc:	39e28a04 	addi	r7,r7,-30168
 40122d0:	180b883a 	mov	r5,r3
 40122d4:	1009883a 	mov	r4,r2
 40122d8:	40192540 	call	4019254 <__adddf3>
 40122dc:	8009883a 	mov	r4,r16
 40122e0:	1029883a 	mov	r20,r2
 40122e4:	1823883a 	mov	r17,r3
 40122e8:	401b9100 	call	401b910 <__floatsidf>
 40122ec:	019427f4 	movhi	r6,20639
 40122f0:	01cff4f4 	movhi	r7,16339
 40122f4:	319e7ec4 	addi	r6,r6,31227
 40122f8:	39d104c4 	addi	r7,r7,17427
 40122fc:	1009883a 	mov	r4,r2
 4012300:	180b883a 	mov	r5,r3
 4012304:	401a7280 	call	401a728 <__muldf3>
 4012308:	100d883a 	mov	r6,r2
 401230c:	180f883a 	mov	r7,r3
 4012310:	a009883a 	mov	r4,r20
 4012314:	880b883a 	mov	r5,r17
 4012318:	40192540 	call	4019254 <__adddf3>
 401231c:	1009883a 	mov	r4,r2
 4012320:	180b883a 	mov	r5,r3
 4012324:	1029883a 	mov	r20,r2
 4012328:	1823883a 	mov	r17,r3
 401232c:	401b8900 	call	401b890 <__fixdfsi>
 4012330:	000d883a 	mov	r6,zero
 4012334:	000f883a 	mov	r7,zero
 4012338:	a009883a 	mov	r4,r20
 401233c:	880b883a 	mov	r5,r17
 4012340:	d8800515 	stw	r2,20(sp)
 4012344:	401a6340 	call	401a634 <__ledf2>
 4012348:	10028716 	blt	r2,zero,4012d68 <_dtoa_r+0xc88>
 401234c:	d8c00517 	ldw	r3,20(sp)
 4012350:	00800584 	movi	r2,22
 4012354:	10c27536 	bltu	r2,r3,4012d2c <_dtoa_r+0xc4c>
 4012358:	180490fa 	slli	r2,r3,3
 401235c:	00c100b4 	movhi	r3,1026
 4012360:	18ddeb04 	addi	r3,r3,30636
 4012364:	1885883a 	add	r2,r3,r2
 4012368:	11000017 	ldw	r4,0(r2)
 401236c:	11400117 	ldw	r5,4(r2)
 4012370:	900d883a 	mov	r6,r18
 4012374:	980f883a 	mov	r7,r19
 4012378:	401a5580 	call	401a558 <__gedf2>
 401237c:	00828d0e 	bge	zero,r2,4012db4 <_dtoa_r+0xcd4>
 4012380:	d9000517 	ldw	r4,20(sp)
 4012384:	d8000e15 	stw	zero,56(sp)
 4012388:	213fffc4 	addi	r4,r4,-1
 401238c:	d9000515 	stw	r4,20(sp)
 4012390:	b42dc83a 	sub	r22,r22,r16
 4012394:	b5bfffc4 	addi	r22,r22,-1
 4012398:	b0026f16 	blt	r22,zero,4012d58 <_dtoa_r+0xc78>
 401239c:	d8000815 	stw	zero,32(sp)
 40123a0:	d9c00517 	ldw	r7,20(sp)
 40123a4:	38026416 	blt	r7,zero,4012d38 <_dtoa_r+0xc58>
 40123a8:	b1ed883a 	add	r22,r22,r7
 40123ac:	d9c00d15 	stw	r7,52(sp)
 40123b0:	d8000a15 	stw	zero,40(sp)
 40123b4:	d9800317 	ldw	r6,12(sp)
 40123b8:	00800244 	movi	r2,9
 40123bc:	11811436 	bltu	r2,r6,4012810 <_dtoa_r+0x730>
 40123c0:	00800144 	movi	r2,5
 40123c4:	1184e10e 	bge	r2,r6,401374c <_dtoa_r+0x166c>
 40123c8:	31bfff04 	addi	r6,r6,-4
 40123cc:	d9800315 	stw	r6,12(sp)
 40123d0:	0023883a 	mov	r17,zero
 40123d4:	d9800317 	ldw	r6,12(sp)
 40123d8:	008000c4 	movi	r2,3
 40123dc:	30836726 	beq	r6,r2,401317c <_dtoa_r+0x109c>
 40123e0:	1183410e 	bge	r2,r6,40130e8 <_dtoa_r+0x1008>
 40123e4:	d9c00317 	ldw	r7,12(sp)
 40123e8:	00800104 	movi	r2,4
 40123ec:	38827c26 	beq	r7,r2,4012de0 <_dtoa_r+0xd00>
 40123f0:	00800144 	movi	r2,5
 40123f4:	3884c41e 	bne	r7,r2,4013708 <_dtoa_r+0x1628>
 40123f8:	00800044 	movi	r2,1
 40123fc:	d8800b15 	stw	r2,44(sp)
 4012400:	d8c00517 	ldw	r3,20(sp)
 4012404:	d9002217 	ldw	r4,136(sp)
 4012408:	1907883a 	add	r3,r3,r4
 401240c:	19800044 	addi	r6,r3,1
 4012410:	d8c00c15 	stw	r3,48(sp)
 4012414:	d9800615 	stw	r6,24(sp)
 4012418:	0183a40e 	bge	zero,r6,40132ac <_dtoa_r+0x11cc>
 401241c:	d9800617 	ldw	r6,24(sp)
 4012420:	3021883a 	mov	r16,r6
 4012424:	e0001115 	stw	zero,68(fp)
 4012428:	008005c4 	movi	r2,23
 401242c:	1184c92e 	bgeu	r2,r6,4013754 <_dtoa_r+0x1674>
 4012430:	00c00044 	movi	r3,1
 4012434:	00800104 	movi	r2,4
 4012438:	1085883a 	add	r2,r2,r2
 401243c:	11000504 	addi	r4,r2,20
 4012440:	180b883a 	mov	r5,r3
 4012444:	18c00044 	addi	r3,r3,1
 4012448:	313ffb2e 	bgeu	r6,r4,4012438 <__alt_mem_onchip_memory2_0+0xfc011198>
 401244c:	e1401115 	stw	r5,68(fp)
 4012450:	e009883a 	mov	r4,fp
 4012454:	4014d1c0 	call	4014d1c <_Balloc>
 4012458:	d8800715 	stw	r2,28(sp)
 401245c:	e0801015 	stw	r2,64(fp)
 4012460:	00800384 	movi	r2,14
 4012464:	1400f736 	bltu	r2,r16,4012844 <_dtoa_r+0x764>
 4012468:	8800f626 	beq	r17,zero,4012844 <_dtoa_r+0x764>
 401246c:	d9c00517 	ldw	r7,20(sp)
 4012470:	01c39a0e 	bge	zero,r7,40132dc <_dtoa_r+0x11fc>
 4012474:	388003cc 	andi	r2,r7,15
 4012478:	100490fa 	slli	r2,r2,3
 401247c:	382bd13a 	srai	r21,r7,4
 4012480:	00c100b4 	movhi	r3,1026
 4012484:	18ddeb04 	addi	r3,r3,30636
 4012488:	1885883a 	add	r2,r3,r2
 401248c:	a8c0040c 	andi	r3,r21,16
 4012490:	12400017 	ldw	r9,0(r2)
 4012494:	12000117 	ldw	r8,4(r2)
 4012498:	18037926 	beq	r3,zero,4013280 <_dtoa_r+0x11a0>
 401249c:	008100b4 	movhi	r2,1026
 40124a0:	109de104 	addi	r2,r2,30596
 40124a4:	11800817 	ldw	r6,32(r2)
 40124a8:	11c00917 	ldw	r7,36(r2)
 40124ac:	9009883a 	mov	r4,r18
 40124b0:	980b883a 	mov	r5,r19
 40124b4:	da001715 	stw	r8,92(sp)
 40124b8:	da401615 	stw	r9,88(sp)
 40124bc:	4019b000 	call	4019b00 <__divdf3>
 40124c0:	da001717 	ldw	r8,92(sp)
 40124c4:	da401617 	ldw	r9,88(sp)
 40124c8:	ad4003cc 	andi	r21,r21,15
 40124cc:	040000c4 	movi	r16,3
 40124d0:	1023883a 	mov	r17,r2
 40124d4:	1829883a 	mov	r20,r3
 40124d8:	a8001126 	beq	r21,zero,4012520 <_dtoa_r+0x440>
 40124dc:	05c100b4 	movhi	r23,1026
 40124e0:	bddde104 	addi	r23,r23,30596
 40124e4:	4805883a 	mov	r2,r9
 40124e8:	4007883a 	mov	r3,r8
 40124ec:	a980004c 	andi	r6,r21,1
 40124f0:	1009883a 	mov	r4,r2
 40124f4:	a82bd07a 	srai	r21,r21,1
 40124f8:	180b883a 	mov	r5,r3
 40124fc:	30000426 	beq	r6,zero,4012510 <_dtoa_r+0x430>
 4012500:	b9800017 	ldw	r6,0(r23)
 4012504:	b9c00117 	ldw	r7,4(r23)
 4012508:	84000044 	addi	r16,r16,1
 401250c:	401a7280 	call	401a728 <__muldf3>
 4012510:	bdc00204 	addi	r23,r23,8
 4012514:	a83ff51e 	bne	r21,zero,40124ec <__alt_mem_onchip_memory2_0+0xfc01124c>
 4012518:	1013883a 	mov	r9,r2
 401251c:	1811883a 	mov	r8,r3
 4012520:	480d883a 	mov	r6,r9
 4012524:	400f883a 	mov	r7,r8
 4012528:	8809883a 	mov	r4,r17
 401252c:	a00b883a 	mov	r5,r20
 4012530:	4019b000 	call	4019b00 <__divdf3>
 4012534:	d8800f15 	stw	r2,60(sp)
 4012538:	d8c01015 	stw	r3,64(sp)
 401253c:	d8c00e17 	ldw	r3,56(sp)
 4012540:	18000626 	beq	r3,zero,401255c <_dtoa_r+0x47c>
 4012544:	d9000f17 	ldw	r4,60(sp)
 4012548:	d9401017 	ldw	r5,64(sp)
 401254c:	000d883a 	mov	r6,zero
 4012550:	01cffc34 	movhi	r7,16368
 4012554:	401a6340 	call	401a634 <__ledf2>
 4012558:	10040b16 	blt	r2,zero,4013588 <_dtoa_r+0x14a8>
 401255c:	8009883a 	mov	r4,r16
 4012560:	401b9100 	call	401b910 <__floatsidf>
 4012564:	d9800f17 	ldw	r6,60(sp)
 4012568:	d9c01017 	ldw	r7,64(sp)
 401256c:	1009883a 	mov	r4,r2
 4012570:	180b883a 	mov	r5,r3
 4012574:	401a7280 	call	401a728 <__muldf3>
 4012578:	000d883a 	mov	r6,zero
 401257c:	01d00734 	movhi	r7,16412
 4012580:	1009883a 	mov	r4,r2
 4012584:	180b883a 	mov	r5,r3
 4012588:	40192540 	call	4019254 <__adddf3>
 401258c:	1021883a 	mov	r16,r2
 4012590:	d8800617 	ldw	r2,24(sp)
 4012594:	047f3034 	movhi	r17,64704
 4012598:	1c63883a 	add	r17,r3,r17
 401259c:	10031826 	beq	r2,zero,4013200 <_dtoa_r+0x1120>
 40125a0:	d8c00517 	ldw	r3,20(sp)
 40125a4:	db000617 	ldw	r12,24(sp)
 40125a8:	d8c01315 	stw	r3,76(sp)
 40125ac:	d9000b17 	ldw	r4,44(sp)
 40125b0:	20038f26 	beq	r4,zero,40133f0 <_dtoa_r+0x1310>
 40125b4:	60bfffc4 	addi	r2,r12,-1
 40125b8:	100490fa 	slli	r2,r2,3
 40125bc:	00c100b4 	movhi	r3,1026
 40125c0:	18ddeb04 	addi	r3,r3,30636
 40125c4:	1885883a 	add	r2,r3,r2
 40125c8:	11800017 	ldw	r6,0(r2)
 40125cc:	11c00117 	ldw	r7,4(r2)
 40125d0:	d8800717 	ldw	r2,28(sp)
 40125d4:	0009883a 	mov	r4,zero
 40125d8:	014ff834 	movhi	r5,16352
 40125dc:	db001615 	stw	r12,88(sp)
 40125e0:	15c00044 	addi	r23,r2,1
 40125e4:	4019b000 	call	4019b00 <__divdf3>
 40125e8:	800d883a 	mov	r6,r16
 40125ec:	880f883a 	mov	r7,r17
 40125f0:	1009883a 	mov	r4,r2
 40125f4:	180b883a 	mov	r5,r3
 40125f8:	401af940 	call	401af94 <__subdf3>
 40125fc:	d9401017 	ldw	r5,64(sp)
 4012600:	d9000f17 	ldw	r4,60(sp)
 4012604:	102b883a 	mov	r21,r2
 4012608:	d8c01215 	stw	r3,72(sp)
 401260c:	401b8900 	call	401b890 <__fixdfsi>
 4012610:	1009883a 	mov	r4,r2
 4012614:	1029883a 	mov	r20,r2
 4012618:	401b9100 	call	401b910 <__floatsidf>
 401261c:	d9000f17 	ldw	r4,60(sp)
 4012620:	d9401017 	ldw	r5,64(sp)
 4012624:	100d883a 	mov	r6,r2
 4012628:	180f883a 	mov	r7,r3
 401262c:	401af940 	call	401af94 <__subdf3>
 4012630:	1823883a 	mov	r17,r3
 4012634:	d8c00717 	ldw	r3,28(sp)
 4012638:	d9401217 	ldw	r5,72(sp)
 401263c:	a2000c04 	addi	r8,r20,48
 4012640:	1021883a 	mov	r16,r2
 4012644:	1a000005 	stb	r8,0(r3)
 4012648:	800d883a 	mov	r6,r16
 401264c:	880f883a 	mov	r7,r17
 4012650:	a809883a 	mov	r4,r21
 4012654:	4029883a 	mov	r20,r8
 4012658:	401a5580 	call	401a558 <__gedf2>
 401265c:	00841d16 	blt	zero,r2,40136d4 <_dtoa_r+0x15f4>
 4012660:	800d883a 	mov	r6,r16
 4012664:	880f883a 	mov	r7,r17
 4012668:	0009883a 	mov	r4,zero
 401266c:	014ffc34 	movhi	r5,16368
 4012670:	401af940 	call	401af94 <__subdf3>
 4012674:	d9401217 	ldw	r5,72(sp)
 4012678:	100d883a 	mov	r6,r2
 401267c:	180f883a 	mov	r7,r3
 4012680:	a809883a 	mov	r4,r21
 4012684:	401a5580 	call	401a558 <__gedf2>
 4012688:	db001617 	ldw	r12,88(sp)
 401268c:	00840e16 	blt	zero,r2,40136c8 <_dtoa_r+0x15e8>
 4012690:	00800044 	movi	r2,1
 4012694:	13006b0e 	bge	r2,r12,4012844 <_dtoa_r+0x764>
 4012698:	d9000717 	ldw	r4,28(sp)
 401269c:	dd800f15 	stw	r22,60(sp)
 40126a0:	dcc01015 	stw	r19,64(sp)
 40126a4:	2319883a 	add	r12,r4,r12
 40126a8:	dcc01217 	ldw	r19,72(sp)
 40126ac:	602d883a 	mov	r22,r12
 40126b0:	dc801215 	stw	r18,72(sp)
 40126b4:	b825883a 	mov	r18,r23
 40126b8:	00000906 	br	40126e0 <_dtoa_r+0x600>
 40126bc:	401af940 	call	401af94 <__subdf3>
 40126c0:	a80d883a 	mov	r6,r21
 40126c4:	980f883a 	mov	r7,r19
 40126c8:	1009883a 	mov	r4,r2
 40126cc:	180b883a 	mov	r5,r3
 40126d0:	401a6340 	call	401a634 <__ledf2>
 40126d4:	1003e816 	blt	r2,zero,4013678 <_dtoa_r+0x1598>
 40126d8:	b825883a 	mov	r18,r23
 40126dc:	bd83e926 	beq	r23,r22,4013684 <_dtoa_r+0x15a4>
 40126e0:	a809883a 	mov	r4,r21
 40126e4:	980b883a 	mov	r5,r19
 40126e8:	000d883a 	mov	r6,zero
 40126ec:	01d00934 	movhi	r7,16420
 40126f0:	401a7280 	call	401a728 <__muldf3>
 40126f4:	000d883a 	mov	r6,zero
 40126f8:	01d00934 	movhi	r7,16420
 40126fc:	8009883a 	mov	r4,r16
 4012700:	880b883a 	mov	r5,r17
 4012704:	102b883a 	mov	r21,r2
 4012708:	1827883a 	mov	r19,r3
 401270c:	401a7280 	call	401a728 <__muldf3>
 4012710:	180b883a 	mov	r5,r3
 4012714:	1009883a 	mov	r4,r2
 4012718:	1821883a 	mov	r16,r3
 401271c:	1023883a 	mov	r17,r2
 4012720:	401b8900 	call	401b890 <__fixdfsi>
 4012724:	1009883a 	mov	r4,r2
 4012728:	1029883a 	mov	r20,r2
 401272c:	401b9100 	call	401b910 <__floatsidf>
 4012730:	8809883a 	mov	r4,r17
 4012734:	800b883a 	mov	r5,r16
 4012738:	100d883a 	mov	r6,r2
 401273c:	180f883a 	mov	r7,r3
 4012740:	401af940 	call	401af94 <__subdf3>
 4012744:	a5000c04 	addi	r20,r20,48
 4012748:	a80d883a 	mov	r6,r21
 401274c:	980f883a 	mov	r7,r19
 4012750:	1009883a 	mov	r4,r2
 4012754:	180b883a 	mov	r5,r3
 4012758:	95000005 	stb	r20,0(r18)
 401275c:	1021883a 	mov	r16,r2
 4012760:	1823883a 	mov	r17,r3
 4012764:	401a6340 	call	401a634 <__ledf2>
 4012768:	bdc00044 	addi	r23,r23,1
 401276c:	800d883a 	mov	r6,r16
 4012770:	880f883a 	mov	r7,r17
 4012774:	0009883a 	mov	r4,zero
 4012778:	014ffc34 	movhi	r5,16368
 401277c:	103fcf0e 	bge	r2,zero,40126bc <__alt_mem_onchip_memory2_0+0xfc01141c>
 4012780:	d8c01317 	ldw	r3,76(sp)
 4012784:	d8c00515 	stw	r3,20(sp)
 4012788:	d9400917 	ldw	r5,36(sp)
 401278c:	e009883a 	mov	r4,fp
 4012790:	4014dc40 	call	4014dc4 <_Bfree>
 4012794:	d9000517 	ldw	r4,20(sp)
 4012798:	d9802317 	ldw	r6,140(sp)
 401279c:	d9c02517 	ldw	r7,148(sp)
 40127a0:	b8000005 	stb	zero,0(r23)
 40127a4:	20800044 	addi	r2,r4,1
 40127a8:	30800015 	stw	r2,0(r6)
 40127ac:	3802aa26 	beq	r7,zero,4013258 <_dtoa_r+0x1178>
 40127b0:	3dc00015 	stw	r23,0(r7)
 40127b4:	d8800717 	ldw	r2,28(sp)
 40127b8:	003e7906 	br	40121a0 <__alt_mem_onchip_memory2_0+0xfc010f00>
 40127bc:	00800434 	movhi	r2,16
 40127c0:	10bfffc4 	addi	r2,r2,-1
 40127c4:	88a2703a 	and	r17,r17,r2
 40127c8:	883e851e 	bne	r17,zero,40121e0 <__alt_mem_onchip_memory2_0+0xfc010f40>
 40127cc:	008100b4 	movhi	r2,1026
 40127d0:	109dcd04 	addi	r2,r2,30516
 40127d4:	003e8406 	br	40121e8 <__alt_mem_onchip_memory2_0+0xfc010f48>
 40127d8:	10c00204 	addi	r3,r2,8
 40127dc:	003e8706 	br	40121fc <__alt_mem_onchip_memory2_0+0xfc010f5c>
 40127e0:	01400434 	movhi	r5,16
 40127e4:	297fffc4 	addi	r5,r5,-1
 40127e8:	994a703a 	and	r5,r19,r5
 40127ec:	9009883a 	mov	r4,r18
 40127f0:	843f0044 	addi	r16,r16,-1023
 40127f4:	294ffc34 	orhi	r5,r5,16368
 40127f8:	dd800217 	ldw	r22,8(sp)
 40127fc:	d8001115 	stw	zero,68(sp)
 4012800:	003ea506 	br	4012298 <__alt_mem_onchip_memory2_0+0xfc010ff8>
 4012804:	008100b4 	movhi	r2,1026
 4012808:	109dc404 	addi	r2,r2,30480
 401280c:	003e6406 	br	40121a0 <__alt_mem_onchip_memory2_0+0xfc010f00>
 4012810:	e0001115 	stw	zero,68(fp)
 4012814:	000b883a 	mov	r5,zero
 4012818:	e009883a 	mov	r4,fp
 401281c:	4014d1c0 	call	4014d1c <_Balloc>
 4012820:	01bfffc4 	movi	r6,-1
 4012824:	01c00044 	movi	r7,1
 4012828:	d8800715 	stw	r2,28(sp)
 401282c:	d9800c15 	stw	r6,48(sp)
 4012830:	e0801015 	stw	r2,64(fp)
 4012834:	d8000315 	stw	zero,12(sp)
 4012838:	d9c00b15 	stw	r7,44(sp)
 401283c:	d9800615 	stw	r6,24(sp)
 4012840:	d8002215 	stw	zero,136(sp)
 4012844:	d8800117 	ldw	r2,4(sp)
 4012848:	10008916 	blt	r2,zero,4012a70 <_dtoa_r+0x990>
 401284c:	d9000517 	ldw	r4,20(sp)
 4012850:	00c00384 	movi	r3,14
 4012854:	19008616 	blt	r3,r4,4012a70 <_dtoa_r+0x990>
 4012858:	200490fa 	slli	r2,r4,3
 401285c:	00c100b4 	movhi	r3,1026
 4012860:	d9802217 	ldw	r6,136(sp)
 4012864:	18ddeb04 	addi	r3,r3,30636
 4012868:	1885883a 	add	r2,r3,r2
 401286c:	14000017 	ldw	r16,0(r2)
 4012870:	14400117 	ldw	r17,4(r2)
 4012874:	30016316 	blt	r6,zero,4012e04 <_dtoa_r+0xd24>
 4012878:	800d883a 	mov	r6,r16
 401287c:	880f883a 	mov	r7,r17
 4012880:	9009883a 	mov	r4,r18
 4012884:	980b883a 	mov	r5,r19
 4012888:	4019b000 	call	4019b00 <__divdf3>
 401288c:	180b883a 	mov	r5,r3
 4012890:	1009883a 	mov	r4,r2
 4012894:	401b8900 	call	401b890 <__fixdfsi>
 4012898:	1009883a 	mov	r4,r2
 401289c:	102b883a 	mov	r21,r2
 40128a0:	401b9100 	call	401b910 <__floatsidf>
 40128a4:	800d883a 	mov	r6,r16
 40128a8:	880f883a 	mov	r7,r17
 40128ac:	1009883a 	mov	r4,r2
 40128b0:	180b883a 	mov	r5,r3
 40128b4:	401a7280 	call	401a728 <__muldf3>
 40128b8:	100d883a 	mov	r6,r2
 40128bc:	180f883a 	mov	r7,r3
 40128c0:	9009883a 	mov	r4,r18
 40128c4:	980b883a 	mov	r5,r19
 40128c8:	401af940 	call	401af94 <__subdf3>
 40128cc:	d9c00717 	ldw	r7,28(sp)
 40128d0:	1009883a 	mov	r4,r2
 40128d4:	a8800c04 	addi	r2,r21,48
 40128d8:	38800005 	stb	r2,0(r7)
 40128dc:	3dc00044 	addi	r23,r7,1
 40128e0:	d9c00617 	ldw	r7,24(sp)
 40128e4:	01800044 	movi	r6,1
 40128e8:	180b883a 	mov	r5,r3
 40128ec:	2005883a 	mov	r2,r4
 40128f0:	39803826 	beq	r7,r6,40129d4 <_dtoa_r+0x8f4>
 40128f4:	000d883a 	mov	r6,zero
 40128f8:	01d00934 	movhi	r7,16420
 40128fc:	401a7280 	call	401a728 <__muldf3>
 4012900:	000d883a 	mov	r6,zero
 4012904:	000f883a 	mov	r7,zero
 4012908:	1009883a 	mov	r4,r2
 401290c:	180b883a 	mov	r5,r3
 4012910:	1025883a 	mov	r18,r2
 4012914:	1827883a 	mov	r19,r3
 4012918:	401a4d00 	call	401a4d0 <__eqdf2>
 401291c:	103f9a26 	beq	r2,zero,4012788 <__alt_mem_onchip_memory2_0+0xfc0114e8>
 4012920:	d9c00617 	ldw	r7,24(sp)
 4012924:	d8c00717 	ldw	r3,28(sp)
 4012928:	b829883a 	mov	r20,r23
 401292c:	38bfffc4 	addi	r2,r7,-1
 4012930:	18ad883a 	add	r22,r3,r2
 4012934:	00000a06 	br	4012960 <_dtoa_r+0x880>
 4012938:	401a7280 	call	401a728 <__muldf3>
 401293c:	000d883a 	mov	r6,zero
 4012940:	000f883a 	mov	r7,zero
 4012944:	1009883a 	mov	r4,r2
 4012948:	180b883a 	mov	r5,r3
 401294c:	1025883a 	mov	r18,r2
 4012950:	1827883a 	mov	r19,r3
 4012954:	b829883a 	mov	r20,r23
 4012958:	401a4d00 	call	401a4d0 <__eqdf2>
 401295c:	103f8a26 	beq	r2,zero,4012788 <__alt_mem_onchip_memory2_0+0xfc0114e8>
 4012960:	800d883a 	mov	r6,r16
 4012964:	880f883a 	mov	r7,r17
 4012968:	9009883a 	mov	r4,r18
 401296c:	980b883a 	mov	r5,r19
 4012970:	4019b000 	call	4019b00 <__divdf3>
 4012974:	180b883a 	mov	r5,r3
 4012978:	1009883a 	mov	r4,r2
 401297c:	401b8900 	call	401b890 <__fixdfsi>
 4012980:	1009883a 	mov	r4,r2
 4012984:	102b883a 	mov	r21,r2
 4012988:	401b9100 	call	401b910 <__floatsidf>
 401298c:	800d883a 	mov	r6,r16
 4012990:	880f883a 	mov	r7,r17
 4012994:	1009883a 	mov	r4,r2
 4012998:	180b883a 	mov	r5,r3
 401299c:	401a7280 	call	401a728 <__muldf3>
 40129a0:	100d883a 	mov	r6,r2
 40129a4:	180f883a 	mov	r7,r3
 40129a8:	9009883a 	mov	r4,r18
 40129ac:	980b883a 	mov	r5,r19
 40129b0:	401af940 	call	401af94 <__subdf3>
 40129b4:	aa000c04 	addi	r8,r21,48
 40129b8:	a2000005 	stb	r8,0(r20)
 40129bc:	000d883a 	mov	r6,zero
 40129c0:	01d00934 	movhi	r7,16420
 40129c4:	1009883a 	mov	r4,r2
 40129c8:	180b883a 	mov	r5,r3
 40129cc:	a5c00044 	addi	r23,r20,1
 40129d0:	b53fd91e 	bne	r22,r20,4012938 <__alt_mem_onchip_memory2_0+0xfc011698>
 40129d4:	100d883a 	mov	r6,r2
 40129d8:	180f883a 	mov	r7,r3
 40129dc:	1009883a 	mov	r4,r2
 40129e0:	180b883a 	mov	r5,r3
 40129e4:	40192540 	call	4019254 <__adddf3>
 40129e8:	100d883a 	mov	r6,r2
 40129ec:	180f883a 	mov	r7,r3
 40129f0:	8009883a 	mov	r4,r16
 40129f4:	880b883a 	mov	r5,r17
 40129f8:	1027883a 	mov	r19,r2
 40129fc:	1825883a 	mov	r18,r3
 4012a00:	401a6340 	call	401a634 <__ledf2>
 4012a04:	10000816 	blt	r2,zero,4012a28 <_dtoa_r+0x948>
 4012a08:	980d883a 	mov	r6,r19
 4012a0c:	900f883a 	mov	r7,r18
 4012a10:	8009883a 	mov	r4,r16
 4012a14:	880b883a 	mov	r5,r17
 4012a18:	401a4d00 	call	401a4d0 <__eqdf2>
 4012a1c:	103f5a1e 	bne	r2,zero,4012788 <__alt_mem_onchip_memory2_0+0xfc0114e8>
 4012a20:	ad40004c 	andi	r21,r21,1
 4012a24:	a83f5826 	beq	r21,zero,4012788 <__alt_mem_onchip_memory2_0+0xfc0114e8>
 4012a28:	bd3fffc3 	ldbu	r20,-1(r23)
 4012a2c:	b8bfffc4 	addi	r2,r23,-1
 4012a30:	1007883a 	mov	r3,r2
 4012a34:	01400e44 	movi	r5,57
 4012a38:	d9800717 	ldw	r6,28(sp)
 4012a3c:	00000506 	br	4012a54 <_dtoa_r+0x974>
 4012a40:	18ffffc4 	addi	r3,r3,-1
 4012a44:	11824726 	beq	r2,r6,4013364 <_dtoa_r+0x1284>
 4012a48:	1d000003 	ldbu	r20,0(r3)
 4012a4c:	102f883a 	mov	r23,r2
 4012a50:	10bfffc4 	addi	r2,r2,-1
 4012a54:	a1003fcc 	andi	r4,r20,255
 4012a58:	2100201c 	xori	r4,r4,128
 4012a5c:	213fe004 	addi	r4,r4,-128
 4012a60:	217ff726 	beq	r4,r5,4012a40 <__alt_mem_onchip_memory2_0+0xfc0117a0>
 4012a64:	a2000044 	addi	r8,r20,1
 4012a68:	12000005 	stb	r8,0(r2)
 4012a6c:	003f4606 	br	4012788 <__alt_mem_onchip_memory2_0+0xfc0114e8>
 4012a70:	d9000b17 	ldw	r4,44(sp)
 4012a74:	2000c826 	beq	r4,zero,4012d98 <_dtoa_r+0xcb8>
 4012a78:	d9800317 	ldw	r6,12(sp)
 4012a7c:	00c00044 	movi	r3,1
 4012a80:	1980f90e 	bge	r3,r6,4012e68 <_dtoa_r+0xd88>
 4012a84:	d8800617 	ldw	r2,24(sp)
 4012a88:	d8c00a17 	ldw	r3,40(sp)
 4012a8c:	157fffc4 	addi	r21,r2,-1
 4012a90:	1d41f316 	blt	r3,r21,4013260 <_dtoa_r+0x1180>
 4012a94:	1d6bc83a 	sub	r21,r3,r21
 4012a98:	d9c00617 	ldw	r7,24(sp)
 4012a9c:	3802aa16 	blt	r7,zero,4013548 <_dtoa_r+0x1468>
 4012aa0:	dd000817 	ldw	r20,32(sp)
 4012aa4:	d8800617 	ldw	r2,24(sp)
 4012aa8:	d8c00817 	ldw	r3,32(sp)
 4012aac:	01400044 	movi	r5,1
 4012ab0:	e009883a 	mov	r4,fp
 4012ab4:	1887883a 	add	r3,r3,r2
 4012ab8:	d8c00815 	stw	r3,32(sp)
 4012abc:	b0ad883a 	add	r22,r22,r2
 4012ac0:	40151500 	call	4015150 <__i2b>
 4012ac4:	1023883a 	mov	r17,r2
 4012ac8:	a0000826 	beq	r20,zero,4012aec <_dtoa_r+0xa0c>
 4012acc:	0580070e 	bge	zero,r22,4012aec <_dtoa_r+0xa0c>
 4012ad0:	a005883a 	mov	r2,r20
 4012ad4:	b500b916 	blt	r22,r20,4012dbc <_dtoa_r+0xcdc>
 4012ad8:	d9000817 	ldw	r4,32(sp)
 4012adc:	a0a9c83a 	sub	r20,r20,r2
 4012ae0:	b0adc83a 	sub	r22,r22,r2
 4012ae4:	2089c83a 	sub	r4,r4,r2
 4012ae8:	d9000815 	stw	r4,32(sp)
 4012aec:	d9800a17 	ldw	r6,40(sp)
 4012af0:	0181810e 	bge	zero,r6,40130f8 <_dtoa_r+0x1018>
 4012af4:	d9c00b17 	ldw	r7,44(sp)
 4012af8:	3800b326 	beq	r7,zero,4012dc8 <_dtoa_r+0xce8>
 4012afc:	a800b226 	beq	r21,zero,4012dc8 <_dtoa_r+0xce8>
 4012b00:	880b883a 	mov	r5,r17
 4012b04:	a80d883a 	mov	r6,r21
 4012b08:	e009883a 	mov	r4,fp
 4012b0c:	40154180 	call	4015418 <__pow5mult>
 4012b10:	d9800917 	ldw	r6,36(sp)
 4012b14:	100b883a 	mov	r5,r2
 4012b18:	e009883a 	mov	r4,fp
 4012b1c:	1023883a 	mov	r17,r2
 4012b20:	401518c0 	call	401518c <__multiply>
 4012b24:	1021883a 	mov	r16,r2
 4012b28:	d8800a17 	ldw	r2,40(sp)
 4012b2c:	d9400917 	ldw	r5,36(sp)
 4012b30:	e009883a 	mov	r4,fp
 4012b34:	1545c83a 	sub	r2,r2,r21
 4012b38:	d8800a15 	stw	r2,40(sp)
 4012b3c:	4014dc40 	call	4014dc4 <_Bfree>
 4012b40:	d8c00a17 	ldw	r3,40(sp)
 4012b44:	18009f1e 	bne	r3,zero,4012dc4 <_dtoa_r+0xce4>
 4012b48:	05c00044 	movi	r23,1
 4012b4c:	e009883a 	mov	r4,fp
 4012b50:	b80b883a 	mov	r5,r23
 4012b54:	40151500 	call	4015150 <__i2b>
 4012b58:	d9000d17 	ldw	r4,52(sp)
 4012b5c:	102b883a 	mov	r21,r2
 4012b60:	2000ce26 	beq	r4,zero,4012e9c <_dtoa_r+0xdbc>
 4012b64:	200d883a 	mov	r6,r4
 4012b68:	100b883a 	mov	r5,r2
 4012b6c:	e009883a 	mov	r4,fp
 4012b70:	40154180 	call	4015418 <__pow5mult>
 4012b74:	d9800317 	ldw	r6,12(sp)
 4012b78:	102b883a 	mov	r21,r2
 4012b7c:	b981810e 	bge	r23,r6,4013184 <_dtoa_r+0x10a4>
 4012b80:	0027883a 	mov	r19,zero
 4012b84:	a8800417 	ldw	r2,16(r21)
 4012b88:	05c00804 	movi	r23,32
 4012b8c:	10800104 	addi	r2,r2,4
 4012b90:	1085883a 	add	r2,r2,r2
 4012b94:	1085883a 	add	r2,r2,r2
 4012b98:	a885883a 	add	r2,r21,r2
 4012b9c:	11000017 	ldw	r4,0(r2)
 4012ba0:	40150380 	call	4015038 <__hi0bits>
 4012ba4:	b885c83a 	sub	r2,r23,r2
 4012ba8:	1585883a 	add	r2,r2,r22
 4012bac:	108007cc 	andi	r2,r2,31
 4012bb0:	1000b326 	beq	r2,zero,4012e80 <_dtoa_r+0xda0>
 4012bb4:	00c00804 	movi	r3,32
 4012bb8:	1887c83a 	sub	r3,r3,r2
 4012bbc:	01000104 	movi	r4,4
 4012bc0:	20c2cd0e 	bge	r4,r3,40136f8 <_dtoa_r+0x1618>
 4012bc4:	00c00704 	movi	r3,28
 4012bc8:	1885c83a 	sub	r2,r3,r2
 4012bcc:	d8c00817 	ldw	r3,32(sp)
 4012bd0:	a0a9883a 	add	r20,r20,r2
 4012bd4:	b0ad883a 	add	r22,r22,r2
 4012bd8:	1887883a 	add	r3,r3,r2
 4012bdc:	d8c00815 	stw	r3,32(sp)
 4012be0:	d9800817 	ldw	r6,32(sp)
 4012be4:	0180040e 	bge	zero,r6,4012bf8 <_dtoa_r+0xb18>
 4012be8:	800b883a 	mov	r5,r16
 4012bec:	e009883a 	mov	r4,fp
 4012bf0:	40155580 	call	4015558 <__lshift>
 4012bf4:	1021883a 	mov	r16,r2
 4012bf8:	0580050e 	bge	zero,r22,4012c10 <_dtoa_r+0xb30>
 4012bfc:	a80b883a 	mov	r5,r21
 4012c00:	b00d883a 	mov	r6,r22
 4012c04:	e009883a 	mov	r4,fp
 4012c08:	40155580 	call	4015558 <__lshift>
 4012c0c:	102b883a 	mov	r21,r2
 4012c10:	d9c00e17 	ldw	r7,56(sp)
 4012c14:	3801211e 	bne	r7,zero,401309c <_dtoa_r+0xfbc>
 4012c18:	d9800617 	ldw	r6,24(sp)
 4012c1c:	0181380e 	bge	zero,r6,4013100 <_dtoa_r+0x1020>
 4012c20:	d8c00b17 	ldw	r3,44(sp)
 4012c24:	1800ab1e 	bne	r3,zero,4012ed4 <_dtoa_r+0xdf4>
 4012c28:	dc800717 	ldw	r18,28(sp)
 4012c2c:	dcc00617 	ldw	r19,24(sp)
 4012c30:	9029883a 	mov	r20,r18
 4012c34:	00000206 	br	4012c40 <_dtoa_r+0xb60>
 4012c38:	4014dec0 	call	4014dec <__multadd>
 4012c3c:	1021883a 	mov	r16,r2
 4012c40:	a80b883a 	mov	r5,r21
 4012c44:	8009883a 	mov	r4,r16
 4012c48:	4011eb80 	call	4011eb8 <quorem>
 4012c4c:	10800c04 	addi	r2,r2,48
 4012c50:	90800005 	stb	r2,0(r18)
 4012c54:	94800044 	addi	r18,r18,1
 4012c58:	9507c83a 	sub	r3,r18,r20
 4012c5c:	000f883a 	mov	r7,zero
 4012c60:	01800284 	movi	r6,10
 4012c64:	800b883a 	mov	r5,r16
 4012c68:	e009883a 	mov	r4,fp
 4012c6c:	1cfff216 	blt	r3,r19,4012c38 <__alt_mem_onchip_memory2_0+0xfc011998>
 4012c70:	1011883a 	mov	r8,r2
 4012c74:	d8800617 	ldw	r2,24(sp)
 4012c78:	0082370e 	bge	zero,r2,4013558 <_dtoa_r+0x1478>
 4012c7c:	d9000717 	ldw	r4,28(sp)
 4012c80:	0025883a 	mov	r18,zero
 4012c84:	20af883a 	add	r23,r4,r2
 4012c88:	01800044 	movi	r6,1
 4012c8c:	800b883a 	mov	r5,r16
 4012c90:	e009883a 	mov	r4,fp
 4012c94:	da001715 	stw	r8,92(sp)
 4012c98:	40155580 	call	4015558 <__lshift>
 4012c9c:	a80b883a 	mov	r5,r21
 4012ca0:	1009883a 	mov	r4,r2
 4012ca4:	d8800915 	stw	r2,36(sp)
 4012ca8:	40156a00 	call	40156a0 <__mcmp>
 4012cac:	da001717 	ldw	r8,92(sp)
 4012cb0:	0081800e 	bge	zero,r2,40132b4 <_dtoa_r+0x11d4>
 4012cb4:	b93fffc3 	ldbu	r4,-1(r23)
 4012cb8:	b8bfffc4 	addi	r2,r23,-1
 4012cbc:	1007883a 	mov	r3,r2
 4012cc0:	01800e44 	movi	r6,57
 4012cc4:	d9c00717 	ldw	r7,28(sp)
 4012cc8:	00000506 	br	4012ce0 <_dtoa_r+0xc00>
 4012ccc:	18ffffc4 	addi	r3,r3,-1
 4012cd0:	11c12326 	beq	r2,r7,4013160 <_dtoa_r+0x1080>
 4012cd4:	19000003 	ldbu	r4,0(r3)
 4012cd8:	102f883a 	mov	r23,r2
 4012cdc:	10bfffc4 	addi	r2,r2,-1
 4012ce0:	21403fcc 	andi	r5,r4,255
 4012ce4:	2940201c 	xori	r5,r5,128
 4012ce8:	297fe004 	addi	r5,r5,-128
 4012cec:	29bff726 	beq	r5,r6,4012ccc <__alt_mem_onchip_memory2_0+0xfc011a2c>
 4012cf0:	21000044 	addi	r4,r4,1
 4012cf4:	11000005 	stb	r4,0(r2)
 4012cf8:	a80b883a 	mov	r5,r21
 4012cfc:	e009883a 	mov	r4,fp
 4012d00:	4014dc40 	call	4014dc4 <_Bfree>
 4012d04:	883ea026 	beq	r17,zero,4012788 <__alt_mem_onchip_memory2_0+0xfc0114e8>
 4012d08:	90000426 	beq	r18,zero,4012d1c <_dtoa_r+0xc3c>
 4012d0c:	94400326 	beq	r18,r17,4012d1c <_dtoa_r+0xc3c>
 4012d10:	900b883a 	mov	r5,r18
 4012d14:	e009883a 	mov	r4,fp
 4012d18:	4014dc40 	call	4014dc4 <_Bfree>
 4012d1c:	880b883a 	mov	r5,r17
 4012d20:	e009883a 	mov	r4,fp
 4012d24:	4014dc40 	call	4014dc4 <_Bfree>
 4012d28:	003e9706 	br	4012788 <__alt_mem_onchip_memory2_0+0xfc0114e8>
 4012d2c:	01800044 	movi	r6,1
 4012d30:	d9800e15 	stw	r6,56(sp)
 4012d34:	003d9606 	br	4012390 <__alt_mem_onchip_memory2_0+0xfc0110f0>
 4012d38:	d8800817 	ldw	r2,32(sp)
 4012d3c:	d8c00517 	ldw	r3,20(sp)
 4012d40:	d8000d15 	stw	zero,52(sp)
 4012d44:	10c5c83a 	sub	r2,r2,r3
 4012d48:	00c9c83a 	sub	r4,zero,r3
 4012d4c:	d8800815 	stw	r2,32(sp)
 4012d50:	d9000a15 	stw	r4,40(sp)
 4012d54:	003d9706 	br	40123b4 <__alt_mem_onchip_memory2_0+0xfc011114>
 4012d58:	05adc83a 	sub	r22,zero,r22
 4012d5c:	dd800815 	stw	r22,32(sp)
 4012d60:	002d883a 	mov	r22,zero
 4012d64:	003d8e06 	br	40123a0 <__alt_mem_onchip_memory2_0+0xfc011100>
 4012d68:	d9000517 	ldw	r4,20(sp)
 4012d6c:	401b9100 	call	401b910 <__floatsidf>
 4012d70:	100d883a 	mov	r6,r2
 4012d74:	180f883a 	mov	r7,r3
 4012d78:	a009883a 	mov	r4,r20
 4012d7c:	880b883a 	mov	r5,r17
 4012d80:	401a4d00 	call	401a4d0 <__eqdf2>
 4012d84:	103d7126 	beq	r2,zero,401234c <__alt_mem_onchip_memory2_0+0xfc0110ac>
 4012d88:	d9c00517 	ldw	r7,20(sp)
 4012d8c:	39ffffc4 	addi	r7,r7,-1
 4012d90:	d9c00515 	stw	r7,20(sp)
 4012d94:	003d6d06 	br	401234c <__alt_mem_onchip_memory2_0+0xfc0110ac>
 4012d98:	dd400a17 	ldw	r21,40(sp)
 4012d9c:	dd000817 	ldw	r20,32(sp)
 4012da0:	0023883a 	mov	r17,zero
 4012da4:	003f4806 	br	4012ac8 <__alt_mem_onchip_memory2_0+0xfc011828>
 4012da8:	10e3c83a 	sub	r17,r2,r3
 4012dac:	9448983a 	sll	r4,r18,r17
 4012db0:	003d3206 	br	401227c <__alt_mem_onchip_memory2_0+0xfc010fdc>
 4012db4:	d8000e15 	stw	zero,56(sp)
 4012db8:	003d7506 	br	4012390 <__alt_mem_onchip_memory2_0+0xfc0110f0>
 4012dbc:	b005883a 	mov	r2,r22
 4012dc0:	003f4506 	br	4012ad8 <__alt_mem_onchip_memory2_0+0xfc011838>
 4012dc4:	dc000915 	stw	r16,36(sp)
 4012dc8:	d9800a17 	ldw	r6,40(sp)
 4012dcc:	d9400917 	ldw	r5,36(sp)
 4012dd0:	e009883a 	mov	r4,fp
 4012dd4:	40154180 	call	4015418 <__pow5mult>
 4012dd8:	1021883a 	mov	r16,r2
 4012ddc:	003f5a06 	br	4012b48 <__alt_mem_onchip_memory2_0+0xfc0118a8>
 4012de0:	01c00044 	movi	r7,1
 4012de4:	d9c00b15 	stw	r7,44(sp)
 4012de8:	d8802217 	ldw	r2,136(sp)
 4012dec:	0081280e 	bge	zero,r2,4013290 <_dtoa_r+0x11b0>
 4012df0:	100d883a 	mov	r6,r2
 4012df4:	1021883a 	mov	r16,r2
 4012df8:	d8800c15 	stw	r2,48(sp)
 4012dfc:	d8800615 	stw	r2,24(sp)
 4012e00:	003d8806 	br	4012424 <__alt_mem_onchip_memory2_0+0xfc011184>
 4012e04:	d8800617 	ldw	r2,24(sp)
 4012e08:	00be9b16 	blt	zero,r2,4012878 <__alt_mem_onchip_memory2_0+0xfc0115d8>
 4012e0c:	10010f1e 	bne	r2,zero,401324c <_dtoa_r+0x116c>
 4012e10:	880b883a 	mov	r5,r17
 4012e14:	000d883a 	mov	r6,zero
 4012e18:	01d00534 	movhi	r7,16404
 4012e1c:	8009883a 	mov	r4,r16
 4012e20:	401a7280 	call	401a728 <__muldf3>
 4012e24:	900d883a 	mov	r6,r18
 4012e28:	980f883a 	mov	r7,r19
 4012e2c:	1009883a 	mov	r4,r2
 4012e30:	180b883a 	mov	r5,r3
 4012e34:	401a5580 	call	401a558 <__gedf2>
 4012e38:	002b883a 	mov	r21,zero
 4012e3c:	0023883a 	mov	r17,zero
 4012e40:	1000bf16 	blt	r2,zero,4013140 <_dtoa_r+0x1060>
 4012e44:	d9802217 	ldw	r6,136(sp)
 4012e48:	ddc00717 	ldw	r23,28(sp)
 4012e4c:	018c303a 	nor	r6,zero,r6
 4012e50:	d9800515 	stw	r6,20(sp)
 4012e54:	a80b883a 	mov	r5,r21
 4012e58:	e009883a 	mov	r4,fp
 4012e5c:	4014dc40 	call	4014dc4 <_Bfree>
 4012e60:	883e4926 	beq	r17,zero,4012788 <__alt_mem_onchip_memory2_0+0xfc0114e8>
 4012e64:	003fad06 	br	4012d1c <__alt_mem_onchip_memory2_0+0xfc011a7c>
 4012e68:	d9c01117 	ldw	r7,68(sp)
 4012e6c:	3801bc26 	beq	r7,zero,4013560 <_dtoa_r+0x1480>
 4012e70:	10810cc4 	addi	r2,r2,1075
 4012e74:	dd400a17 	ldw	r21,40(sp)
 4012e78:	dd000817 	ldw	r20,32(sp)
 4012e7c:	003f0a06 	br	4012aa8 <__alt_mem_onchip_memory2_0+0xfc011808>
 4012e80:	00800704 	movi	r2,28
 4012e84:	d9000817 	ldw	r4,32(sp)
 4012e88:	a0a9883a 	add	r20,r20,r2
 4012e8c:	b0ad883a 	add	r22,r22,r2
 4012e90:	2089883a 	add	r4,r4,r2
 4012e94:	d9000815 	stw	r4,32(sp)
 4012e98:	003f5106 	br	4012be0 <__alt_mem_onchip_memory2_0+0xfc011940>
 4012e9c:	d8c00317 	ldw	r3,12(sp)
 4012ea0:	b8c1fc0e 	bge	r23,r3,4013694 <_dtoa_r+0x15b4>
 4012ea4:	0027883a 	mov	r19,zero
 4012ea8:	b805883a 	mov	r2,r23
 4012eac:	003f3e06 	br	4012ba8 <__alt_mem_onchip_memory2_0+0xfc011908>
 4012eb0:	880b883a 	mov	r5,r17
 4012eb4:	e009883a 	mov	r4,fp
 4012eb8:	000f883a 	mov	r7,zero
 4012ebc:	01800284 	movi	r6,10
 4012ec0:	4014dec0 	call	4014dec <__multadd>
 4012ec4:	d9000c17 	ldw	r4,48(sp)
 4012ec8:	1023883a 	mov	r17,r2
 4012ecc:	0102040e 	bge	zero,r4,40136e0 <_dtoa_r+0x1600>
 4012ed0:	d9000615 	stw	r4,24(sp)
 4012ed4:	0500050e 	bge	zero,r20,4012eec <_dtoa_r+0xe0c>
 4012ed8:	880b883a 	mov	r5,r17
 4012edc:	a00d883a 	mov	r6,r20
 4012ee0:	e009883a 	mov	r4,fp
 4012ee4:	40155580 	call	4015558 <__lshift>
 4012ee8:	1023883a 	mov	r17,r2
 4012eec:	9801241e 	bne	r19,zero,4013380 <_dtoa_r+0x12a0>
 4012ef0:	8829883a 	mov	r20,r17
 4012ef4:	d9000617 	ldw	r4,24(sp)
 4012ef8:	dcc00717 	ldw	r19,28(sp)
 4012efc:	9480004c 	andi	r18,r18,1
 4012f00:	20bfffc4 	addi	r2,r4,-1
 4012f04:	9885883a 	add	r2,r19,r2
 4012f08:	d8800415 	stw	r2,16(sp)
 4012f0c:	dc800615 	stw	r18,24(sp)
 4012f10:	a80b883a 	mov	r5,r21
 4012f14:	8009883a 	mov	r4,r16
 4012f18:	4011eb80 	call	4011eb8 <quorem>
 4012f1c:	880b883a 	mov	r5,r17
 4012f20:	8009883a 	mov	r4,r16
 4012f24:	102f883a 	mov	r23,r2
 4012f28:	40156a00 	call	40156a0 <__mcmp>
 4012f2c:	a80b883a 	mov	r5,r21
 4012f30:	a00d883a 	mov	r6,r20
 4012f34:	e009883a 	mov	r4,fp
 4012f38:	102d883a 	mov	r22,r2
 4012f3c:	40157000 	call	4015700 <__mdiff>
 4012f40:	1007883a 	mov	r3,r2
 4012f44:	10800317 	ldw	r2,12(r2)
 4012f48:	bc800c04 	addi	r18,r23,48
 4012f4c:	180b883a 	mov	r5,r3
 4012f50:	10004e1e 	bne	r2,zero,401308c <_dtoa_r+0xfac>
 4012f54:	8009883a 	mov	r4,r16
 4012f58:	d8c01615 	stw	r3,88(sp)
 4012f5c:	40156a00 	call	40156a0 <__mcmp>
 4012f60:	d8c01617 	ldw	r3,88(sp)
 4012f64:	e009883a 	mov	r4,fp
 4012f68:	d8801615 	stw	r2,88(sp)
 4012f6c:	180b883a 	mov	r5,r3
 4012f70:	4014dc40 	call	4014dc4 <_Bfree>
 4012f74:	d8801617 	ldw	r2,88(sp)
 4012f78:	1000041e 	bne	r2,zero,4012f8c <_dtoa_r+0xeac>
 4012f7c:	d9800317 	ldw	r6,12(sp)
 4012f80:	3000021e 	bne	r6,zero,4012f8c <_dtoa_r+0xeac>
 4012f84:	d8c00617 	ldw	r3,24(sp)
 4012f88:	18003726 	beq	r3,zero,4013068 <_dtoa_r+0xf88>
 4012f8c:	b0002016 	blt	r22,zero,4013010 <_dtoa_r+0xf30>
 4012f90:	b000041e 	bne	r22,zero,4012fa4 <_dtoa_r+0xec4>
 4012f94:	d9000317 	ldw	r4,12(sp)
 4012f98:	2000021e 	bne	r4,zero,4012fa4 <_dtoa_r+0xec4>
 4012f9c:	d8c00617 	ldw	r3,24(sp)
 4012fa0:	18001b26 	beq	r3,zero,4013010 <_dtoa_r+0xf30>
 4012fa4:	00810716 	blt	zero,r2,40133c4 <_dtoa_r+0x12e4>
 4012fa8:	d8c00417 	ldw	r3,16(sp)
 4012fac:	9d800044 	addi	r22,r19,1
 4012fb0:	9c800005 	stb	r18,0(r19)
 4012fb4:	b02f883a 	mov	r23,r22
 4012fb8:	98c10626 	beq	r19,r3,40133d4 <_dtoa_r+0x12f4>
 4012fbc:	800b883a 	mov	r5,r16
 4012fc0:	000f883a 	mov	r7,zero
 4012fc4:	01800284 	movi	r6,10
 4012fc8:	e009883a 	mov	r4,fp
 4012fcc:	4014dec0 	call	4014dec <__multadd>
 4012fd0:	1021883a 	mov	r16,r2
 4012fd4:	000f883a 	mov	r7,zero
 4012fd8:	01800284 	movi	r6,10
 4012fdc:	880b883a 	mov	r5,r17
 4012fe0:	e009883a 	mov	r4,fp
 4012fe4:	8d002526 	beq	r17,r20,401307c <_dtoa_r+0xf9c>
 4012fe8:	4014dec0 	call	4014dec <__multadd>
 4012fec:	a00b883a 	mov	r5,r20
 4012ff0:	000f883a 	mov	r7,zero
 4012ff4:	01800284 	movi	r6,10
 4012ff8:	e009883a 	mov	r4,fp
 4012ffc:	1023883a 	mov	r17,r2
 4013000:	4014dec0 	call	4014dec <__multadd>
 4013004:	1029883a 	mov	r20,r2
 4013008:	b027883a 	mov	r19,r22
 401300c:	003fc006 	br	4012f10 <__alt_mem_onchip_memory2_0+0xfc011c70>
 4013010:	9011883a 	mov	r8,r18
 4013014:	00800e0e 	bge	zero,r2,4013050 <_dtoa_r+0xf70>
 4013018:	800b883a 	mov	r5,r16
 401301c:	01800044 	movi	r6,1
 4013020:	e009883a 	mov	r4,fp
 4013024:	da001715 	stw	r8,92(sp)
 4013028:	40155580 	call	4015558 <__lshift>
 401302c:	a80b883a 	mov	r5,r21
 4013030:	1009883a 	mov	r4,r2
 4013034:	1021883a 	mov	r16,r2
 4013038:	40156a00 	call	40156a0 <__mcmp>
 401303c:	da001717 	ldw	r8,92(sp)
 4013040:	0081960e 	bge	zero,r2,401369c <_dtoa_r+0x15bc>
 4013044:	00800e44 	movi	r2,57
 4013048:	40817026 	beq	r8,r2,401360c <_dtoa_r+0x152c>
 401304c:	ba000c44 	addi	r8,r23,49
 4013050:	8825883a 	mov	r18,r17
 4013054:	9dc00044 	addi	r23,r19,1
 4013058:	9a000005 	stb	r8,0(r19)
 401305c:	a023883a 	mov	r17,r20
 4013060:	dc000915 	stw	r16,36(sp)
 4013064:	003f2406 	br	4012cf8 <__alt_mem_onchip_memory2_0+0xfc011a58>
 4013068:	00800e44 	movi	r2,57
 401306c:	9011883a 	mov	r8,r18
 4013070:	90816626 	beq	r18,r2,401360c <_dtoa_r+0x152c>
 4013074:	05bff516 	blt	zero,r22,401304c <__alt_mem_onchip_memory2_0+0xfc011dac>
 4013078:	003ff506 	br	4013050 <__alt_mem_onchip_memory2_0+0xfc011db0>
 401307c:	4014dec0 	call	4014dec <__multadd>
 4013080:	1023883a 	mov	r17,r2
 4013084:	1029883a 	mov	r20,r2
 4013088:	003fdf06 	br	4013008 <__alt_mem_onchip_memory2_0+0xfc011d68>
 401308c:	e009883a 	mov	r4,fp
 4013090:	4014dc40 	call	4014dc4 <_Bfree>
 4013094:	00800044 	movi	r2,1
 4013098:	003fbc06 	br	4012f8c <__alt_mem_onchip_memory2_0+0xfc011cec>
 401309c:	a80b883a 	mov	r5,r21
 40130a0:	8009883a 	mov	r4,r16
 40130a4:	40156a00 	call	40156a0 <__mcmp>
 40130a8:	103edb0e 	bge	r2,zero,4012c18 <__alt_mem_onchip_memory2_0+0xfc011978>
 40130ac:	800b883a 	mov	r5,r16
 40130b0:	000f883a 	mov	r7,zero
 40130b4:	01800284 	movi	r6,10
 40130b8:	e009883a 	mov	r4,fp
 40130bc:	4014dec0 	call	4014dec <__multadd>
 40130c0:	1021883a 	mov	r16,r2
 40130c4:	d8800517 	ldw	r2,20(sp)
 40130c8:	d8c00b17 	ldw	r3,44(sp)
 40130cc:	10bfffc4 	addi	r2,r2,-1
 40130d0:	d8800515 	stw	r2,20(sp)
 40130d4:	183f761e 	bne	r3,zero,4012eb0 <__alt_mem_onchip_memory2_0+0xfc011c10>
 40130d8:	d9000c17 	ldw	r4,48(sp)
 40130dc:	0101730e 	bge	zero,r4,40136ac <_dtoa_r+0x15cc>
 40130e0:	d9000615 	stw	r4,24(sp)
 40130e4:	003ed006 	br	4012c28 <__alt_mem_onchip_memory2_0+0xfc011988>
 40130e8:	00800084 	movi	r2,2
 40130ec:	3081861e 	bne	r6,r2,4013708 <_dtoa_r+0x1628>
 40130f0:	d8000b15 	stw	zero,44(sp)
 40130f4:	003f3c06 	br	4012de8 <__alt_mem_onchip_memory2_0+0xfc011b48>
 40130f8:	dc000917 	ldw	r16,36(sp)
 40130fc:	003e9206 	br	4012b48 <__alt_mem_onchip_memory2_0+0xfc0118a8>
 4013100:	d9c00317 	ldw	r7,12(sp)
 4013104:	00800084 	movi	r2,2
 4013108:	11fec50e 	bge	r2,r7,4012c20 <__alt_mem_onchip_memory2_0+0xfc011980>
 401310c:	d9000617 	ldw	r4,24(sp)
 4013110:	20013c1e 	bne	r4,zero,4013604 <_dtoa_r+0x1524>
 4013114:	a80b883a 	mov	r5,r21
 4013118:	000f883a 	mov	r7,zero
 401311c:	01800144 	movi	r6,5
 4013120:	e009883a 	mov	r4,fp
 4013124:	4014dec0 	call	4014dec <__multadd>
 4013128:	100b883a 	mov	r5,r2
 401312c:	8009883a 	mov	r4,r16
 4013130:	102b883a 	mov	r21,r2
 4013134:	40156a00 	call	40156a0 <__mcmp>
 4013138:	dc000915 	stw	r16,36(sp)
 401313c:	00bf410e 	bge	zero,r2,4012e44 <__alt_mem_onchip_memory2_0+0xfc011ba4>
 4013140:	d9c00717 	ldw	r7,28(sp)
 4013144:	00800c44 	movi	r2,49
 4013148:	38800005 	stb	r2,0(r7)
 401314c:	d8800517 	ldw	r2,20(sp)
 4013150:	3dc00044 	addi	r23,r7,1
 4013154:	10800044 	addi	r2,r2,1
 4013158:	d8800515 	stw	r2,20(sp)
 401315c:	003f3d06 	br	4012e54 <__alt_mem_onchip_memory2_0+0xfc011bb4>
 4013160:	d9800517 	ldw	r6,20(sp)
 4013164:	d9c00717 	ldw	r7,28(sp)
 4013168:	00800c44 	movi	r2,49
 401316c:	31800044 	addi	r6,r6,1
 4013170:	d9800515 	stw	r6,20(sp)
 4013174:	38800005 	stb	r2,0(r7)
 4013178:	003edf06 	br	4012cf8 <__alt_mem_onchip_memory2_0+0xfc011a58>
 401317c:	d8000b15 	stw	zero,44(sp)
 4013180:	003c9f06 	br	4012400 <__alt_mem_onchip_memory2_0+0xfc011160>
 4013184:	903e7e1e 	bne	r18,zero,4012b80 <__alt_mem_onchip_memory2_0+0xfc0118e0>
 4013188:	00800434 	movhi	r2,16
 401318c:	10bfffc4 	addi	r2,r2,-1
 4013190:	9884703a 	and	r2,r19,r2
 4013194:	1000ea1e 	bne	r2,zero,4013540 <_dtoa_r+0x1460>
 4013198:	9cdffc2c 	andhi	r19,r19,32752
 401319c:	9800e826 	beq	r19,zero,4013540 <_dtoa_r+0x1460>
 40131a0:	d9c00817 	ldw	r7,32(sp)
 40131a4:	b5800044 	addi	r22,r22,1
 40131a8:	04c00044 	movi	r19,1
 40131ac:	39c00044 	addi	r7,r7,1
 40131b0:	d9c00815 	stw	r7,32(sp)
 40131b4:	d8800d17 	ldw	r2,52(sp)
 40131b8:	103e721e 	bne	r2,zero,4012b84 <__alt_mem_onchip_memory2_0+0xfc0118e4>
 40131bc:	00800044 	movi	r2,1
 40131c0:	003e7906 	br	4012ba8 <__alt_mem_onchip_memory2_0+0xfc011908>
 40131c4:	8009883a 	mov	r4,r16
 40131c8:	401b9100 	call	401b910 <__floatsidf>
 40131cc:	d9800f17 	ldw	r6,60(sp)
 40131d0:	d9c01017 	ldw	r7,64(sp)
 40131d4:	1009883a 	mov	r4,r2
 40131d8:	180b883a 	mov	r5,r3
 40131dc:	401a7280 	call	401a728 <__muldf3>
 40131e0:	000d883a 	mov	r6,zero
 40131e4:	01d00734 	movhi	r7,16412
 40131e8:	1009883a 	mov	r4,r2
 40131ec:	180b883a 	mov	r5,r3
 40131f0:	40192540 	call	4019254 <__adddf3>
 40131f4:	047f3034 	movhi	r17,64704
 40131f8:	1021883a 	mov	r16,r2
 40131fc:	1c63883a 	add	r17,r3,r17
 4013200:	d9000f17 	ldw	r4,60(sp)
 4013204:	d9401017 	ldw	r5,64(sp)
 4013208:	000d883a 	mov	r6,zero
 401320c:	01d00534 	movhi	r7,16404
 4013210:	401af940 	call	401af94 <__subdf3>
 4013214:	800d883a 	mov	r6,r16
 4013218:	880f883a 	mov	r7,r17
 401321c:	1009883a 	mov	r4,r2
 4013220:	180b883a 	mov	r5,r3
 4013224:	102b883a 	mov	r21,r2
 4013228:	1829883a 	mov	r20,r3
 401322c:	401a5580 	call	401a558 <__gedf2>
 4013230:	00806c16 	blt	zero,r2,40133e4 <_dtoa_r+0x1304>
 4013234:	89e0003c 	xorhi	r7,r17,32768
 4013238:	800d883a 	mov	r6,r16
 401323c:	a809883a 	mov	r4,r21
 4013240:	a00b883a 	mov	r5,r20
 4013244:	401a6340 	call	401a634 <__ledf2>
 4013248:	103d7e0e 	bge	r2,zero,4012844 <__alt_mem_onchip_memory2_0+0xfc0115a4>
 401324c:	002b883a 	mov	r21,zero
 4013250:	0023883a 	mov	r17,zero
 4013254:	003efb06 	br	4012e44 <__alt_mem_onchip_memory2_0+0xfc011ba4>
 4013258:	d8800717 	ldw	r2,28(sp)
 401325c:	003bd006 	br	40121a0 <__alt_mem_onchip_memory2_0+0xfc010f00>
 4013260:	d9000a17 	ldw	r4,40(sp)
 4013264:	d9800d17 	ldw	r6,52(sp)
 4013268:	dd400a15 	stw	r21,40(sp)
 401326c:	a905c83a 	sub	r2,r21,r4
 4013270:	308d883a 	add	r6,r6,r2
 4013274:	d9800d15 	stw	r6,52(sp)
 4013278:	002b883a 	mov	r21,zero
 401327c:	003e0606 	br	4012a98 <__alt_mem_onchip_memory2_0+0xfc0117f8>
 4013280:	9023883a 	mov	r17,r18
 4013284:	9829883a 	mov	r20,r19
 4013288:	04000084 	movi	r16,2
 401328c:	003c9206 	br	40124d8 <__alt_mem_onchip_memory2_0+0xfc011238>
 4013290:	04000044 	movi	r16,1
 4013294:	dc000c15 	stw	r16,48(sp)
 4013298:	dc000615 	stw	r16,24(sp)
 401329c:	dc002215 	stw	r16,136(sp)
 40132a0:	e0001115 	stw	zero,68(fp)
 40132a4:	000b883a 	mov	r5,zero
 40132a8:	003c6906 	br	4012450 <__alt_mem_onchip_memory2_0+0xfc0111b0>
 40132ac:	3021883a 	mov	r16,r6
 40132b0:	003ffb06 	br	40132a0 <__alt_mem_onchip_memory2_0+0xfc012000>
 40132b4:	1000021e 	bne	r2,zero,40132c0 <_dtoa_r+0x11e0>
 40132b8:	4200004c 	andi	r8,r8,1
 40132bc:	403e7d1e 	bne	r8,zero,4012cb4 <__alt_mem_onchip_memory2_0+0xfc011a14>
 40132c0:	01000c04 	movi	r4,48
 40132c4:	00000106 	br	40132cc <_dtoa_r+0x11ec>
 40132c8:	102f883a 	mov	r23,r2
 40132cc:	b8bfffc4 	addi	r2,r23,-1
 40132d0:	10c00007 	ldb	r3,0(r2)
 40132d4:	193ffc26 	beq	r3,r4,40132c8 <__alt_mem_onchip_memory2_0+0xfc012028>
 40132d8:	003e8706 	br	4012cf8 <__alt_mem_onchip_memory2_0+0xfc011a58>
 40132dc:	d8800517 	ldw	r2,20(sp)
 40132e0:	00a3c83a 	sub	r17,zero,r2
 40132e4:	8800a426 	beq	r17,zero,4013578 <_dtoa_r+0x1498>
 40132e8:	888003cc 	andi	r2,r17,15
 40132ec:	100490fa 	slli	r2,r2,3
 40132f0:	00c100b4 	movhi	r3,1026
 40132f4:	18ddeb04 	addi	r3,r3,30636
 40132f8:	1885883a 	add	r2,r3,r2
 40132fc:	11800017 	ldw	r6,0(r2)
 4013300:	11c00117 	ldw	r7,4(r2)
 4013304:	9009883a 	mov	r4,r18
 4013308:	980b883a 	mov	r5,r19
 401330c:	8823d13a 	srai	r17,r17,4
 4013310:	401a7280 	call	401a728 <__muldf3>
 4013314:	d8800f15 	stw	r2,60(sp)
 4013318:	d8c01015 	stw	r3,64(sp)
 401331c:	8800e826 	beq	r17,zero,40136c0 <_dtoa_r+0x15e0>
 4013320:	050100b4 	movhi	r20,1026
 4013324:	a51de104 	addi	r20,r20,30596
 4013328:	04000084 	movi	r16,2
 401332c:	8980004c 	andi	r6,r17,1
 4013330:	1009883a 	mov	r4,r2
 4013334:	8823d07a 	srai	r17,r17,1
 4013338:	180b883a 	mov	r5,r3
 401333c:	30000426 	beq	r6,zero,4013350 <_dtoa_r+0x1270>
 4013340:	a1800017 	ldw	r6,0(r20)
 4013344:	a1c00117 	ldw	r7,4(r20)
 4013348:	84000044 	addi	r16,r16,1
 401334c:	401a7280 	call	401a728 <__muldf3>
 4013350:	a5000204 	addi	r20,r20,8
 4013354:	883ff51e 	bne	r17,zero,401332c <__alt_mem_onchip_memory2_0+0xfc01208c>
 4013358:	d8800f15 	stw	r2,60(sp)
 401335c:	d8c01015 	stw	r3,64(sp)
 4013360:	003c7606 	br	401253c <__alt_mem_onchip_memory2_0+0xfc01129c>
 4013364:	00c00c04 	movi	r3,48
 4013368:	10c00005 	stb	r3,0(r2)
 401336c:	d8c00517 	ldw	r3,20(sp)
 4013370:	bd3fffc3 	ldbu	r20,-1(r23)
 4013374:	18c00044 	addi	r3,r3,1
 4013378:	d8c00515 	stw	r3,20(sp)
 401337c:	003db906 	br	4012a64 <__alt_mem_onchip_memory2_0+0xfc0117c4>
 4013380:	89400117 	ldw	r5,4(r17)
 4013384:	e009883a 	mov	r4,fp
 4013388:	4014d1c0 	call	4014d1c <_Balloc>
 401338c:	89800417 	ldw	r6,16(r17)
 4013390:	89400304 	addi	r5,r17,12
 4013394:	11000304 	addi	r4,r2,12
 4013398:	31800084 	addi	r6,r6,2
 401339c:	318d883a 	add	r6,r6,r6
 40133a0:	318d883a 	add	r6,r6,r6
 40133a4:	1027883a 	mov	r19,r2
 40133a8:	400f10c0 	call	400f10c <memcpy>
 40133ac:	01800044 	movi	r6,1
 40133b0:	980b883a 	mov	r5,r19
 40133b4:	e009883a 	mov	r4,fp
 40133b8:	40155580 	call	4015558 <__lshift>
 40133bc:	1029883a 	mov	r20,r2
 40133c0:	003ecc06 	br	4012ef4 <__alt_mem_onchip_memory2_0+0xfc011c54>
 40133c4:	00800e44 	movi	r2,57
 40133c8:	90809026 	beq	r18,r2,401360c <_dtoa_r+0x152c>
 40133cc:	92000044 	addi	r8,r18,1
 40133d0:	003f1f06 	br	4013050 <__alt_mem_onchip_memory2_0+0xfc011db0>
 40133d4:	9011883a 	mov	r8,r18
 40133d8:	8825883a 	mov	r18,r17
 40133dc:	a023883a 	mov	r17,r20
 40133e0:	003e2906 	br	4012c88 <__alt_mem_onchip_memory2_0+0xfc0119e8>
 40133e4:	002b883a 	mov	r21,zero
 40133e8:	0023883a 	mov	r17,zero
 40133ec:	003f5406 	br	4013140 <__alt_mem_onchip_memory2_0+0xfc011ea0>
 40133f0:	61bfffc4 	addi	r6,r12,-1
 40133f4:	300490fa 	slli	r2,r6,3
 40133f8:	00c100b4 	movhi	r3,1026
 40133fc:	18ddeb04 	addi	r3,r3,30636
 4013400:	1885883a 	add	r2,r3,r2
 4013404:	11000017 	ldw	r4,0(r2)
 4013408:	11400117 	ldw	r5,4(r2)
 401340c:	d8800717 	ldw	r2,28(sp)
 4013410:	880f883a 	mov	r7,r17
 4013414:	d9801215 	stw	r6,72(sp)
 4013418:	800d883a 	mov	r6,r16
 401341c:	db001615 	stw	r12,88(sp)
 4013420:	15c00044 	addi	r23,r2,1
 4013424:	401a7280 	call	401a728 <__muldf3>
 4013428:	d9401017 	ldw	r5,64(sp)
 401342c:	d9000f17 	ldw	r4,60(sp)
 4013430:	d8c01515 	stw	r3,84(sp)
 4013434:	d8801415 	stw	r2,80(sp)
 4013438:	401b8900 	call	401b890 <__fixdfsi>
 401343c:	1009883a 	mov	r4,r2
 4013440:	1021883a 	mov	r16,r2
 4013444:	401b9100 	call	401b910 <__floatsidf>
 4013448:	d9000f17 	ldw	r4,60(sp)
 401344c:	d9401017 	ldw	r5,64(sp)
 4013450:	100d883a 	mov	r6,r2
 4013454:	180f883a 	mov	r7,r3
 4013458:	401af940 	call	401af94 <__subdf3>
 401345c:	1829883a 	mov	r20,r3
 4013460:	d8c00717 	ldw	r3,28(sp)
 4013464:	84000c04 	addi	r16,r16,48
 4013468:	1023883a 	mov	r17,r2
 401346c:	1c000005 	stb	r16,0(r3)
 4013470:	db001617 	ldw	r12,88(sp)
 4013474:	00800044 	movi	r2,1
 4013478:	60802226 	beq	r12,r2,4013504 <_dtoa_r+0x1424>
 401347c:	d9c00717 	ldw	r7,28(sp)
 4013480:	8805883a 	mov	r2,r17
 4013484:	b82b883a 	mov	r21,r23
 4013488:	3b19883a 	add	r12,r7,r12
 401348c:	6023883a 	mov	r17,r12
 4013490:	a007883a 	mov	r3,r20
 4013494:	dc800f15 	stw	r18,60(sp)
 4013498:	000d883a 	mov	r6,zero
 401349c:	01d00934 	movhi	r7,16420
 40134a0:	1009883a 	mov	r4,r2
 40134a4:	180b883a 	mov	r5,r3
 40134a8:	401a7280 	call	401a728 <__muldf3>
 40134ac:	180b883a 	mov	r5,r3
 40134b0:	1009883a 	mov	r4,r2
 40134b4:	1829883a 	mov	r20,r3
 40134b8:	1025883a 	mov	r18,r2
 40134bc:	401b8900 	call	401b890 <__fixdfsi>
 40134c0:	1009883a 	mov	r4,r2
 40134c4:	1021883a 	mov	r16,r2
 40134c8:	401b9100 	call	401b910 <__floatsidf>
 40134cc:	100d883a 	mov	r6,r2
 40134d0:	180f883a 	mov	r7,r3
 40134d4:	9009883a 	mov	r4,r18
 40134d8:	a00b883a 	mov	r5,r20
 40134dc:	84000c04 	addi	r16,r16,48
 40134e0:	401af940 	call	401af94 <__subdf3>
 40134e4:	ad400044 	addi	r21,r21,1
 40134e8:	ac3fffc5 	stb	r16,-1(r21)
 40134ec:	ac7fea1e 	bne	r21,r17,4013498 <__alt_mem_onchip_memory2_0+0xfc0121f8>
 40134f0:	1023883a 	mov	r17,r2
 40134f4:	d8801217 	ldw	r2,72(sp)
 40134f8:	dc800f17 	ldw	r18,60(sp)
 40134fc:	1829883a 	mov	r20,r3
 4013500:	b8af883a 	add	r23,r23,r2
 4013504:	d9001417 	ldw	r4,80(sp)
 4013508:	d9401517 	ldw	r5,84(sp)
 401350c:	000d883a 	mov	r6,zero
 4013510:	01cff834 	movhi	r7,16352
 4013514:	40192540 	call	4019254 <__adddf3>
 4013518:	880d883a 	mov	r6,r17
 401351c:	a00f883a 	mov	r7,r20
 4013520:	1009883a 	mov	r4,r2
 4013524:	180b883a 	mov	r5,r3
 4013528:	401a6340 	call	401a634 <__ledf2>
 401352c:	10003e0e 	bge	r2,zero,4013628 <_dtoa_r+0x1548>
 4013530:	d9001317 	ldw	r4,76(sp)
 4013534:	bd3fffc3 	ldbu	r20,-1(r23)
 4013538:	d9000515 	stw	r4,20(sp)
 401353c:	003d3b06 	br	4012a2c <__alt_mem_onchip_memory2_0+0xfc01178c>
 4013540:	0027883a 	mov	r19,zero
 4013544:	003f1b06 	br	40131b4 <__alt_mem_onchip_memory2_0+0xfc011f14>
 4013548:	d8800817 	ldw	r2,32(sp)
 401354c:	11e9c83a 	sub	r20,r2,r7
 4013550:	0005883a 	mov	r2,zero
 4013554:	003d5406 	br	4012aa8 <__alt_mem_onchip_memory2_0+0xfc011808>
 4013558:	00800044 	movi	r2,1
 401355c:	003dc706 	br	4012c7c <__alt_mem_onchip_memory2_0+0xfc0119dc>
 4013560:	d8c00217 	ldw	r3,8(sp)
 4013564:	00800d84 	movi	r2,54
 4013568:	dd400a17 	ldw	r21,40(sp)
 401356c:	10c5c83a 	sub	r2,r2,r3
 4013570:	dd000817 	ldw	r20,32(sp)
 4013574:	003d4c06 	br	4012aa8 <__alt_mem_onchip_memory2_0+0xfc011808>
 4013578:	dc800f15 	stw	r18,60(sp)
 401357c:	dcc01015 	stw	r19,64(sp)
 4013580:	04000084 	movi	r16,2
 4013584:	003bed06 	br	401253c <__alt_mem_onchip_memory2_0+0xfc01129c>
 4013588:	d9000617 	ldw	r4,24(sp)
 401358c:	203f0d26 	beq	r4,zero,40131c4 <__alt_mem_onchip_memory2_0+0xfc011f24>
 4013590:	d9800c17 	ldw	r6,48(sp)
 4013594:	01bcab0e 	bge	zero,r6,4012844 <__alt_mem_onchip_memory2_0+0xfc0115a4>
 4013598:	d9401017 	ldw	r5,64(sp)
 401359c:	d9000f17 	ldw	r4,60(sp)
 40135a0:	000d883a 	mov	r6,zero
 40135a4:	01d00934 	movhi	r7,16420
 40135a8:	401a7280 	call	401a728 <__muldf3>
 40135ac:	81000044 	addi	r4,r16,1
 40135b0:	d8800f15 	stw	r2,60(sp)
 40135b4:	d8c01015 	stw	r3,64(sp)
 40135b8:	401b9100 	call	401b910 <__floatsidf>
 40135bc:	d9800f17 	ldw	r6,60(sp)
 40135c0:	d9c01017 	ldw	r7,64(sp)
 40135c4:	1009883a 	mov	r4,r2
 40135c8:	180b883a 	mov	r5,r3
 40135cc:	401a7280 	call	401a728 <__muldf3>
 40135d0:	01d00734 	movhi	r7,16412
 40135d4:	000d883a 	mov	r6,zero
 40135d8:	1009883a 	mov	r4,r2
 40135dc:	180b883a 	mov	r5,r3
 40135e0:	40192540 	call	4019254 <__adddf3>
 40135e4:	d9c00517 	ldw	r7,20(sp)
 40135e8:	047f3034 	movhi	r17,64704
 40135ec:	1021883a 	mov	r16,r2
 40135f0:	39ffffc4 	addi	r7,r7,-1
 40135f4:	d9c01315 	stw	r7,76(sp)
 40135f8:	1c63883a 	add	r17,r3,r17
 40135fc:	db000c17 	ldw	r12,48(sp)
 4013600:	003bea06 	br	40125ac <__alt_mem_onchip_memory2_0+0xfc01130c>
 4013604:	dc000915 	stw	r16,36(sp)
 4013608:	003e0e06 	br	4012e44 <__alt_mem_onchip_memory2_0+0xfc011ba4>
 401360c:	01000e44 	movi	r4,57
 4013610:	8825883a 	mov	r18,r17
 4013614:	9dc00044 	addi	r23,r19,1
 4013618:	99000005 	stb	r4,0(r19)
 401361c:	a023883a 	mov	r17,r20
 4013620:	dc000915 	stw	r16,36(sp)
 4013624:	003da406 	br	4012cb8 <__alt_mem_onchip_memory2_0+0xfc011a18>
 4013628:	d9801417 	ldw	r6,80(sp)
 401362c:	d9c01517 	ldw	r7,84(sp)
 4013630:	0009883a 	mov	r4,zero
 4013634:	014ff834 	movhi	r5,16352
 4013638:	401af940 	call	401af94 <__subdf3>
 401363c:	880d883a 	mov	r6,r17
 4013640:	a00f883a 	mov	r7,r20
 4013644:	1009883a 	mov	r4,r2
 4013648:	180b883a 	mov	r5,r3
 401364c:	401a5580 	call	401a558 <__gedf2>
 4013650:	00bc7c0e 	bge	zero,r2,4012844 <__alt_mem_onchip_memory2_0+0xfc0115a4>
 4013654:	01000c04 	movi	r4,48
 4013658:	00000106 	br	4013660 <_dtoa_r+0x1580>
 401365c:	102f883a 	mov	r23,r2
 4013660:	b8bfffc4 	addi	r2,r23,-1
 4013664:	10c00007 	ldb	r3,0(r2)
 4013668:	193ffc26 	beq	r3,r4,401365c <__alt_mem_onchip_memory2_0+0xfc0123bc>
 401366c:	d9801317 	ldw	r6,76(sp)
 4013670:	d9800515 	stw	r6,20(sp)
 4013674:	003c4406 	br	4012788 <__alt_mem_onchip_memory2_0+0xfc0114e8>
 4013678:	d9801317 	ldw	r6,76(sp)
 401367c:	d9800515 	stw	r6,20(sp)
 4013680:	003cea06 	br	4012a2c <__alt_mem_onchip_memory2_0+0xfc01178c>
 4013684:	dd800f17 	ldw	r22,60(sp)
 4013688:	dcc01017 	ldw	r19,64(sp)
 401368c:	dc801217 	ldw	r18,72(sp)
 4013690:	003c6c06 	br	4012844 <__alt_mem_onchip_memory2_0+0xfc0115a4>
 4013694:	903e031e 	bne	r18,zero,4012ea4 <__alt_mem_onchip_memory2_0+0xfc011c04>
 4013698:	003ebb06 	br	4013188 <__alt_mem_onchip_memory2_0+0xfc011ee8>
 401369c:	103e6c1e 	bne	r2,zero,4013050 <__alt_mem_onchip_memory2_0+0xfc011db0>
 40136a0:	4080004c 	andi	r2,r8,1
 40136a4:	103e6a26 	beq	r2,zero,4013050 <__alt_mem_onchip_memory2_0+0xfc011db0>
 40136a8:	003e6606 	br	4013044 <__alt_mem_onchip_memory2_0+0xfc011da4>
 40136ac:	d8c00317 	ldw	r3,12(sp)
 40136b0:	00800084 	movi	r2,2
 40136b4:	10c02916 	blt	r2,r3,401375c <_dtoa_r+0x167c>
 40136b8:	d9000c17 	ldw	r4,48(sp)
 40136bc:	003e8806 	br	40130e0 <__alt_mem_onchip_memory2_0+0xfc011e40>
 40136c0:	04000084 	movi	r16,2
 40136c4:	003b9d06 	br	401253c <__alt_mem_onchip_memory2_0+0xfc01129c>
 40136c8:	d9001317 	ldw	r4,76(sp)
 40136cc:	d9000515 	stw	r4,20(sp)
 40136d0:	003cd606 	br	4012a2c <__alt_mem_onchip_memory2_0+0xfc01178c>
 40136d4:	d8801317 	ldw	r2,76(sp)
 40136d8:	d8800515 	stw	r2,20(sp)
 40136dc:	003c2a06 	br	4012788 <__alt_mem_onchip_memory2_0+0xfc0114e8>
 40136e0:	d9800317 	ldw	r6,12(sp)
 40136e4:	00800084 	movi	r2,2
 40136e8:	11801516 	blt	r2,r6,4013740 <_dtoa_r+0x1660>
 40136ec:	d9c00c17 	ldw	r7,48(sp)
 40136f0:	d9c00615 	stw	r7,24(sp)
 40136f4:	003df706 	br	4012ed4 <__alt_mem_onchip_memory2_0+0xfc011c34>
 40136f8:	193d3926 	beq	r3,r4,4012be0 <__alt_mem_onchip_memory2_0+0xfc011940>
 40136fc:	00c00f04 	movi	r3,60
 4013700:	1885c83a 	sub	r2,r3,r2
 4013704:	003ddf06 	br	4012e84 <__alt_mem_onchip_memory2_0+0xfc011be4>
 4013708:	e009883a 	mov	r4,fp
 401370c:	e0001115 	stw	zero,68(fp)
 4013710:	000b883a 	mov	r5,zero
 4013714:	4014d1c0 	call	4014d1c <_Balloc>
 4013718:	d8800715 	stw	r2,28(sp)
 401371c:	d8c00717 	ldw	r3,28(sp)
 4013720:	00bfffc4 	movi	r2,-1
 4013724:	01000044 	movi	r4,1
 4013728:	d8800c15 	stw	r2,48(sp)
 401372c:	e0c01015 	stw	r3,64(fp)
 4013730:	d9000b15 	stw	r4,44(sp)
 4013734:	d8800615 	stw	r2,24(sp)
 4013738:	d8002215 	stw	zero,136(sp)
 401373c:	003c4106 	br	4012844 <__alt_mem_onchip_memory2_0+0xfc0115a4>
 4013740:	d8c00c17 	ldw	r3,48(sp)
 4013744:	d8c00615 	stw	r3,24(sp)
 4013748:	003e7006 	br	401310c <__alt_mem_onchip_memory2_0+0xfc011e6c>
 401374c:	04400044 	movi	r17,1
 4013750:	003b2006 	br	40123d4 <__alt_mem_onchip_memory2_0+0xfc011134>
 4013754:	000b883a 	mov	r5,zero
 4013758:	003b3d06 	br	4012450 <__alt_mem_onchip_memory2_0+0xfc0111b0>
 401375c:	d8800c17 	ldw	r2,48(sp)
 4013760:	d8800615 	stw	r2,24(sp)
 4013764:	003e6906 	br	401310c <__alt_mem_onchip_memory2_0+0xfc011e6c>

04013768 <__sflush_r>:
 4013768:	2880030b 	ldhu	r2,12(r5)
 401376c:	defffb04 	addi	sp,sp,-20
 4013770:	dcc00315 	stw	r19,12(sp)
 4013774:	dc400115 	stw	r17,4(sp)
 4013778:	dfc00415 	stw	ra,16(sp)
 401377c:	dc800215 	stw	r18,8(sp)
 4013780:	dc000015 	stw	r16,0(sp)
 4013784:	10c0020c 	andi	r3,r2,8
 4013788:	2823883a 	mov	r17,r5
 401378c:	2027883a 	mov	r19,r4
 4013790:	1800311e 	bne	r3,zero,4013858 <__sflush_r+0xf0>
 4013794:	28c00117 	ldw	r3,4(r5)
 4013798:	10820014 	ori	r2,r2,2048
 401379c:	2880030d 	sth	r2,12(r5)
 40137a0:	00c04b0e 	bge	zero,r3,40138d0 <__sflush_r+0x168>
 40137a4:	8a000a17 	ldw	r8,40(r17)
 40137a8:	40002326 	beq	r8,zero,4013838 <__sflush_r+0xd0>
 40137ac:	9c000017 	ldw	r16,0(r19)
 40137b0:	10c4000c 	andi	r3,r2,4096
 40137b4:	98000015 	stw	zero,0(r19)
 40137b8:	18004826 	beq	r3,zero,40138dc <__sflush_r+0x174>
 40137bc:	89801417 	ldw	r6,80(r17)
 40137c0:	10c0010c 	andi	r3,r2,4
 40137c4:	18000626 	beq	r3,zero,40137e0 <__sflush_r+0x78>
 40137c8:	88c00117 	ldw	r3,4(r17)
 40137cc:	88800c17 	ldw	r2,48(r17)
 40137d0:	30cdc83a 	sub	r6,r6,r3
 40137d4:	10000226 	beq	r2,zero,40137e0 <__sflush_r+0x78>
 40137d8:	88800f17 	ldw	r2,60(r17)
 40137dc:	308dc83a 	sub	r6,r6,r2
 40137e0:	89400717 	ldw	r5,28(r17)
 40137e4:	000f883a 	mov	r7,zero
 40137e8:	9809883a 	mov	r4,r19
 40137ec:	403ee83a 	callr	r8
 40137f0:	00ffffc4 	movi	r3,-1
 40137f4:	10c04426 	beq	r2,r3,4013908 <__sflush_r+0x1a0>
 40137f8:	88c0030b 	ldhu	r3,12(r17)
 40137fc:	89000417 	ldw	r4,16(r17)
 4013800:	88000115 	stw	zero,4(r17)
 4013804:	197dffcc 	andi	r5,r3,63487
 4013808:	8940030d 	sth	r5,12(r17)
 401380c:	89000015 	stw	r4,0(r17)
 4013810:	18c4000c 	andi	r3,r3,4096
 4013814:	18002c1e 	bne	r3,zero,40138c8 <__sflush_r+0x160>
 4013818:	89400c17 	ldw	r5,48(r17)
 401381c:	9c000015 	stw	r16,0(r19)
 4013820:	28000526 	beq	r5,zero,4013838 <__sflush_r+0xd0>
 4013824:	88801004 	addi	r2,r17,64
 4013828:	28800226 	beq	r5,r2,4013834 <__sflush_r+0xcc>
 401382c:	9809883a 	mov	r4,r19
 4013830:	4013ee40 	call	4013ee4 <_free_r>
 4013834:	88000c15 	stw	zero,48(r17)
 4013838:	0005883a 	mov	r2,zero
 401383c:	dfc00417 	ldw	ra,16(sp)
 4013840:	dcc00317 	ldw	r19,12(sp)
 4013844:	dc800217 	ldw	r18,8(sp)
 4013848:	dc400117 	ldw	r17,4(sp)
 401384c:	dc000017 	ldw	r16,0(sp)
 4013850:	dec00504 	addi	sp,sp,20
 4013854:	f800283a 	ret
 4013858:	2c800417 	ldw	r18,16(r5)
 401385c:	903ff626 	beq	r18,zero,4013838 <__alt_mem_onchip_memory2_0+0xfc012598>
 4013860:	2c000017 	ldw	r16,0(r5)
 4013864:	108000cc 	andi	r2,r2,3
 4013868:	2c800015 	stw	r18,0(r5)
 401386c:	84a1c83a 	sub	r16,r16,r18
 4013870:	1000131e 	bne	r2,zero,40138c0 <__sflush_r+0x158>
 4013874:	28800517 	ldw	r2,20(r5)
 4013878:	88800215 	stw	r2,8(r17)
 401387c:	04000316 	blt	zero,r16,401388c <__sflush_r+0x124>
 4013880:	003fed06 	br	4013838 <__alt_mem_onchip_memory2_0+0xfc012598>
 4013884:	90a5883a 	add	r18,r18,r2
 4013888:	043feb0e 	bge	zero,r16,4013838 <__alt_mem_onchip_memory2_0+0xfc012598>
 401388c:	88800917 	ldw	r2,36(r17)
 4013890:	89400717 	ldw	r5,28(r17)
 4013894:	800f883a 	mov	r7,r16
 4013898:	900d883a 	mov	r6,r18
 401389c:	9809883a 	mov	r4,r19
 40138a0:	103ee83a 	callr	r2
 40138a4:	80a1c83a 	sub	r16,r16,r2
 40138a8:	00bff616 	blt	zero,r2,4013884 <__alt_mem_onchip_memory2_0+0xfc0125e4>
 40138ac:	88c0030b 	ldhu	r3,12(r17)
 40138b0:	00bfffc4 	movi	r2,-1
 40138b4:	18c01014 	ori	r3,r3,64
 40138b8:	88c0030d 	sth	r3,12(r17)
 40138bc:	003fdf06 	br	401383c <__alt_mem_onchip_memory2_0+0xfc01259c>
 40138c0:	0005883a 	mov	r2,zero
 40138c4:	003fec06 	br	4013878 <__alt_mem_onchip_memory2_0+0xfc0125d8>
 40138c8:	88801415 	stw	r2,80(r17)
 40138cc:	003fd206 	br	4013818 <__alt_mem_onchip_memory2_0+0xfc012578>
 40138d0:	28c00f17 	ldw	r3,60(r5)
 40138d4:	00ffb316 	blt	zero,r3,40137a4 <__alt_mem_onchip_memory2_0+0xfc012504>
 40138d8:	003fd706 	br	4013838 <__alt_mem_onchip_memory2_0+0xfc012598>
 40138dc:	89400717 	ldw	r5,28(r17)
 40138e0:	000d883a 	mov	r6,zero
 40138e4:	01c00044 	movi	r7,1
 40138e8:	9809883a 	mov	r4,r19
 40138ec:	403ee83a 	callr	r8
 40138f0:	100d883a 	mov	r6,r2
 40138f4:	00bfffc4 	movi	r2,-1
 40138f8:	30801426 	beq	r6,r2,401394c <__sflush_r+0x1e4>
 40138fc:	8880030b 	ldhu	r2,12(r17)
 4013900:	8a000a17 	ldw	r8,40(r17)
 4013904:	003fae06 	br	40137c0 <__alt_mem_onchip_memory2_0+0xfc012520>
 4013908:	98c00017 	ldw	r3,0(r19)
 401390c:	183fba26 	beq	r3,zero,40137f8 <__alt_mem_onchip_memory2_0+0xfc012558>
 4013910:	01000744 	movi	r4,29
 4013914:	19000626 	beq	r3,r4,4013930 <__sflush_r+0x1c8>
 4013918:	01000584 	movi	r4,22
 401391c:	19000426 	beq	r3,r4,4013930 <__sflush_r+0x1c8>
 4013920:	88c0030b 	ldhu	r3,12(r17)
 4013924:	18c01014 	ori	r3,r3,64
 4013928:	88c0030d 	sth	r3,12(r17)
 401392c:	003fc306 	br	401383c <__alt_mem_onchip_memory2_0+0xfc01259c>
 4013930:	8880030b 	ldhu	r2,12(r17)
 4013934:	88c00417 	ldw	r3,16(r17)
 4013938:	88000115 	stw	zero,4(r17)
 401393c:	10bdffcc 	andi	r2,r2,63487
 4013940:	8880030d 	sth	r2,12(r17)
 4013944:	88c00015 	stw	r3,0(r17)
 4013948:	003fb306 	br	4013818 <__alt_mem_onchip_memory2_0+0xfc012578>
 401394c:	98800017 	ldw	r2,0(r19)
 4013950:	103fea26 	beq	r2,zero,40138fc <__alt_mem_onchip_memory2_0+0xfc01265c>
 4013954:	00c00744 	movi	r3,29
 4013958:	10c00226 	beq	r2,r3,4013964 <__sflush_r+0x1fc>
 401395c:	00c00584 	movi	r3,22
 4013960:	10c0031e 	bne	r2,r3,4013970 <__sflush_r+0x208>
 4013964:	9c000015 	stw	r16,0(r19)
 4013968:	0005883a 	mov	r2,zero
 401396c:	003fb306 	br	401383c <__alt_mem_onchip_memory2_0+0xfc01259c>
 4013970:	88c0030b 	ldhu	r3,12(r17)
 4013974:	3005883a 	mov	r2,r6
 4013978:	18c01014 	ori	r3,r3,64
 401397c:	88c0030d 	sth	r3,12(r17)
 4013980:	003fae06 	br	401383c <__alt_mem_onchip_memory2_0+0xfc01259c>

04013984 <_fflush_r>:
 4013984:	defffd04 	addi	sp,sp,-12
 4013988:	dc000115 	stw	r16,4(sp)
 401398c:	dfc00215 	stw	ra,8(sp)
 4013990:	2021883a 	mov	r16,r4
 4013994:	20000226 	beq	r4,zero,40139a0 <_fflush_r+0x1c>
 4013998:	20800e17 	ldw	r2,56(r4)
 401399c:	10000c26 	beq	r2,zero,40139d0 <_fflush_r+0x4c>
 40139a0:	2880030f 	ldh	r2,12(r5)
 40139a4:	1000051e 	bne	r2,zero,40139bc <_fflush_r+0x38>
 40139a8:	0005883a 	mov	r2,zero
 40139ac:	dfc00217 	ldw	ra,8(sp)
 40139b0:	dc000117 	ldw	r16,4(sp)
 40139b4:	dec00304 	addi	sp,sp,12
 40139b8:	f800283a 	ret
 40139bc:	8009883a 	mov	r4,r16
 40139c0:	dfc00217 	ldw	ra,8(sp)
 40139c4:	dc000117 	ldw	r16,4(sp)
 40139c8:	dec00304 	addi	sp,sp,12
 40139cc:	40137681 	jmpi	4013768 <__sflush_r>
 40139d0:	d9400015 	stw	r5,0(sp)
 40139d4:	4013d700 	call	4013d70 <__sinit>
 40139d8:	d9400017 	ldw	r5,0(sp)
 40139dc:	003ff006 	br	40139a0 <__alt_mem_onchip_memory2_0+0xfc012700>

040139e0 <fflush>:
 40139e0:	20000526 	beq	r4,zero,40139f8 <fflush+0x18>
 40139e4:	008100f4 	movhi	r2,1027
 40139e8:	10aaa304 	addi	r2,r2,-21876
 40139ec:	200b883a 	mov	r5,r4
 40139f0:	11000017 	ldw	r4,0(r2)
 40139f4:	40139841 	jmpi	4013984 <_fflush_r>
 40139f8:	008100f4 	movhi	r2,1027
 40139fc:	10aaa204 	addi	r2,r2,-21880
 4013a00:	11000017 	ldw	r4,0(r2)
 4013a04:	01410074 	movhi	r5,1025
 4013a08:	294e6104 	addi	r5,r5,14724
 4013a0c:	40147801 	jmpi	4014780 <_fwalk_reent>

04013a10 <__fp_unlock>:
 4013a10:	0005883a 	mov	r2,zero
 4013a14:	f800283a 	ret

04013a18 <_cleanup_r>:
 4013a18:	014100b4 	movhi	r5,1026
 4013a1c:	29600c04 	addi	r5,r5,-32720
 4013a20:	40147801 	jmpi	4014780 <_fwalk_reent>

04013a24 <__sinit.part.1>:
 4013a24:	defff704 	addi	sp,sp,-36
 4013a28:	00c10074 	movhi	r3,1025
 4013a2c:	dfc00815 	stw	ra,32(sp)
 4013a30:	ddc00715 	stw	r23,28(sp)
 4013a34:	dd800615 	stw	r22,24(sp)
 4013a38:	dd400515 	stw	r21,20(sp)
 4013a3c:	dd000415 	stw	r20,16(sp)
 4013a40:	dcc00315 	stw	r19,12(sp)
 4013a44:	dc800215 	stw	r18,8(sp)
 4013a48:	dc400115 	stw	r17,4(sp)
 4013a4c:	dc000015 	stw	r16,0(sp)
 4013a50:	18ce8604 	addi	r3,r3,14872
 4013a54:	24000117 	ldw	r16,4(r4)
 4013a58:	20c00f15 	stw	r3,60(r4)
 4013a5c:	2080bb04 	addi	r2,r4,748
 4013a60:	00c000c4 	movi	r3,3
 4013a64:	20c0b915 	stw	r3,740(r4)
 4013a68:	2080ba15 	stw	r2,744(r4)
 4013a6c:	2000b815 	stw	zero,736(r4)
 4013a70:	05c00204 	movi	r23,8
 4013a74:	00800104 	movi	r2,4
 4013a78:	2025883a 	mov	r18,r4
 4013a7c:	b80d883a 	mov	r6,r23
 4013a80:	81001704 	addi	r4,r16,92
 4013a84:	000b883a 	mov	r5,zero
 4013a88:	80000015 	stw	zero,0(r16)
 4013a8c:	80000115 	stw	zero,4(r16)
 4013a90:	80000215 	stw	zero,8(r16)
 4013a94:	8080030d 	sth	r2,12(r16)
 4013a98:	80001915 	stw	zero,100(r16)
 4013a9c:	8000038d 	sth	zero,14(r16)
 4013aa0:	80000415 	stw	zero,16(r16)
 4013aa4:	80000515 	stw	zero,20(r16)
 4013aa8:	80000615 	stw	zero,24(r16)
 4013aac:	400f2540 	call	400f254 <memset>
 4013ab0:	05810074 	movhi	r22,1025
 4013ab4:	94400217 	ldw	r17,8(r18)
 4013ab8:	05410074 	movhi	r21,1025
 4013abc:	05010074 	movhi	r20,1025
 4013ac0:	04c10074 	movhi	r19,1025
 4013ac4:	b5994504 	addi	r22,r22,25876
 4013ac8:	ad595c04 	addi	r21,r21,25968
 4013acc:	a5197b04 	addi	r20,r20,26092
 4013ad0:	9cd99204 	addi	r19,r19,26184
 4013ad4:	85800815 	stw	r22,32(r16)
 4013ad8:	85400915 	stw	r21,36(r16)
 4013adc:	85000a15 	stw	r20,40(r16)
 4013ae0:	84c00b15 	stw	r19,44(r16)
 4013ae4:	84000715 	stw	r16,28(r16)
 4013ae8:	00800284 	movi	r2,10
 4013aec:	8880030d 	sth	r2,12(r17)
 4013af0:	00800044 	movi	r2,1
 4013af4:	b80d883a 	mov	r6,r23
 4013af8:	89001704 	addi	r4,r17,92
 4013afc:	000b883a 	mov	r5,zero
 4013b00:	88000015 	stw	zero,0(r17)
 4013b04:	88000115 	stw	zero,4(r17)
 4013b08:	88000215 	stw	zero,8(r17)
 4013b0c:	88001915 	stw	zero,100(r17)
 4013b10:	8880038d 	sth	r2,14(r17)
 4013b14:	88000415 	stw	zero,16(r17)
 4013b18:	88000515 	stw	zero,20(r17)
 4013b1c:	88000615 	stw	zero,24(r17)
 4013b20:	400f2540 	call	400f254 <memset>
 4013b24:	94000317 	ldw	r16,12(r18)
 4013b28:	00800484 	movi	r2,18
 4013b2c:	8c400715 	stw	r17,28(r17)
 4013b30:	8d800815 	stw	r22,32(r17)
 4013b34:	8d400915 	stw	r21,36(r17)
 4013b38:	8d000a15 	stw	r20,40(r17)
 4013b3c:	8cc00b15 	stw	r19,44(r17)
 4013b40:	8080030d 	sth	r2,12(r16)
 4013b44:	00800084 	movi	r2,2
 4013b48:	80000015 	stw	zero,0(r16)
 4013b4c:	80000115 	stw	zero,4(r16)
 4013b50:	80000215 	stw	zero,8(r16)
 4013b54:	80001915 	stw	zero,100(r16)
 4013b58:	8080038d 	sth	r2,14(r16)
 4013b5c:	80000415 	stw	zero,16(r16)
 4013b60:	80000515 	stw	zero,20(r16)
 4013b64:	80000615 	stw	zero,24(r16)
 4013b68:	b80d883a 	mov	r6,r23
 4013b6c:	000b883a 	mov	r5,zero
 4013b70:	81001704 	addi	r4,r16,92
 4013b74:	400f2540 	call	400f254 <memset>
 4013b78:	00800044 	movi	r2,1
 4013b7c:	84000715 	stw	r16,28(r16)
 4013b80:	85800815 	stw	r22,32(r16)
 4013b84:	85400915 	stw	r21,36(r16)
 4013b88:	85000a15 	stw	r20,40(r16)
 4013b8c:	84c00b15 	stw	r19,44(r16)
 4013b90:	90800e15 	stw	r2,56(r18)
 4013b94:	dfc00817 	ldw	ra,32(sp)
 4013b98:	ddc00717 	ldw	r23,28(sp)
 4013b9c:	dd800617 	ldw	r22,24(sp)
 4013ba0:	dd400517 	ldw	r21,20(sp)
 4013ba4:	dd000417 	ldw	r20,16(sp)
 4013ba8:	dcc00317 	ldw	r19,12(sp)
 4013bac:	dc800217 	ldw	r18,8(sp)
 4013bb0:	dc400117 	ldw	r17,4(sp)
 4013bb4:	dc000017 	ldw	r16,0(sp)
 4013bb8:	dec00904 	addi	sp,sp,36
 4013bbc:	f800283a 	ret

04013bc0 <__fp_lock>:
 4013bc0:	0005883a 	mov	r2,zero
 4013bc4:	f800283a 	ret

04013bc8 <__sfmoreglue>:
 4013bc8:	defffc04 	addi	sp,sp,-16
 4013bcc:	dc800215 	stw	r18,8(sp)
 4013bd0:	2825883a 	mov	r18,r5
 4013bd4:	dc000015 	stw	r16,0(sp)
 4013bd8:	01401a04 	movi	r5,104
 4013bdc:	2021883a 	mov	r16,r4
 4013be0:	913fffc4 	addi	r4,r18,-1
 4013be4:	dfc00315 	stw	ra,12(sp)
 4013be8:	dc400115 	stw	r17,4(sp)
 4013bec:	400d7980 	call	400d798 <__mulsi3>
 4013bf0:	8009883a 	mov	r4,r16
 4013bf4:	11401d04 	addi	r5,r2,116
 4013bf8:	1023883a 	mov	r17,r2
 4013bfc:	400e9000 	call	400e900 <_malloc_r>
 4013c00:	1021883a 	mov	r16,r2
 4013c04:	10000726 	beq	r2,zero,4013c24 <__sfmoreglue+0x5c>
 4013c08:	11000304 	addi	r4,r2,12
 4013c0c:	10000015 	stw	zero,0(r2)
 4013c10:	14800115 	stw	r18,4(r2)
 4013c14:	11000215 	stw	r4,8(r2)
 4013c18:	89801a04 	addi	r6,r17,104
 4013c1c:	000b883a 	mov	r5,zero
 4013c20:	400f2540 	call	400f254 <memset>
 4013c24:	8005883a 	mov	r2,r16
 4013c28:	dfc00317 	ldw	ra,12(sp)
 4013c2c:	dc800217 	ldw	r18,8(sp)
 4013c30:	dc400117 	ldw	r17,4(sp)
 4013c34:	dc000017 	ldw	r16,0(sp)
 4013c38:	dec00404 	addi	sp,sp,16
 4013c3c:	f800283a 	ret

04013c40 <__sfp>:
 4013c40:	defffb04 	addi	sp,sp,-20
 4013c44:	dc000015 	stw	r16,0(sp)
 4013c48:	040100f4 	movhi	r16,1027
 4013c4c:	842aa204 	addi	r16,r16,-21880
 4013c50:	dcc00315 	stw	r19,12(sp)
 4013c54:	2027883a 	mov	r19,r4
 4013c58:	81000017 	ldw	r4,0(r16)
 4013c5c:	dfc00415 	stw	ra,16(sp)
 4013c60:	dc800215 	stw	r18,8(sp)
 4013c64:	20800e17 	ldw	r2,56(r4)
 4013c68:	dc400115 	stw	r17,4(sp)
 4013c6c:	1000021e 	bne	r2,zero,4013c78 <__sfp+0x38>
 4013c70:	4013a240 	call	4013a24 <__sinit.part.1>
 4013c74:	81000017 	ldw	r4,0(r16)
 4013c78:	2480b804 	addi	r18,r4,736
 4013c7c:	047fffc4 	movi	r17,-1
 4013c80:	91000117 	ldw	r4,4(r18)
 4013c84:	94000217 	ldw	r16,8(r18)
 4013c88:	213fffc4 	addi	r4,r4,-1
 4013c8c:	20000a16 	blt	r4,zero,4013cb8 <__sfp+0x78>
 4013c90:	8080030f 	ldh	r2,12(r16)
 4013c94:	10000c26 	beq	r2,zero,4013cc8 <__sfp+0x88>
 4013c98:	80c01d04 	addi	r3,r16,116
 4013c9c:	00000206 	br	4013ca8 <__sfp+0x68>
 4013ca0:	18bfe60f 	ldh	r2,-104(r3)
 4013ca4:	10000826 	beq	r2,zero,4013cc8 <__sfp+0x88>
 4013ca8:	213fffc4 	addi	r4,r4,-1
 4013cac:	1c3ffd04 	addi	r16,r3,-12
 4013cb0:	18c01a04 	addi	r3,r3,104
 4013cb4:	247ffa1e 	bne	r4,r17,4013ca0 <__alt_mem_onchip_memory2_0+0xfc012a00>
 4013cb8:	90800017 	ldw	r2,0(r18)
 4013cbc:	10001d26 	beq	r2,zero,4013d34 <__sfp+0xf4>
 4013cc0:	1025883a 	mov	r18,r2
 4013cc4:	003fee06 	br	4013c80 <__alt_mem_onchip_memory2_0+0xfc0129e0>
 4013cc8:	00bfffc4 	movi	r2,-1
 4013ccc:	8080038d 	sth	r2,14(r16)
 4013cd0:	00800044 	movi	r2,1
 4013cd4:	8080030d 	sth	r2,12(r16)
 4013cd8:	80001915 	stw	zero,100(r16)
 4013cdc:	80000015 	stw	zero,0(r16)
 4013ce0:	80000215 	stw	zero,8(r16)
 4013ce4:	80000115 	stw	zero,4(r16)
 4013ce8:	80000415 	stw	zero,16(r16)
 4013cec:	80000515 	stw	zero,20(r16)
 4013cf0:	80000615 	stw	zero,24(r16)
 4013cf4:	01800204 	movi	r6,8
 4013cf8:	000b883a 	mov	r5,zero
 4013cfc:	81001704 	addi	r4,r16,92
 4013d00:	400f2540 	call	400f254 <memset>
 4013d04:	8005883a 	mov	r2,r16
 4013d08:	80000c15 	stw	zero,48(r16)
 4013d0c:	80000d15 	stw	zero,52(r16)
 4013d10:	80001115 	stw	zero,68(r16)
 4013d14:	80001215 	stw	zero,72(r16)
 4013d18:	dfc00417 	ldw	ra,16(sp)
 4013d1c:	dcc00317 	ldw	r19,12(sp)
 4013d20:	dc800217 	ldw	r18,8(sp)
 4013d24:	dc400117 	ldw	r17,4(sp)
 4013d28:	dc000017 	ldw	r16,0(sp)
 4013d2c:	dec00504 	addi	sp,sp,20
 4013d30:	f800283a 	ret
 4013d34:	01400104 	movi	r5,4
 4013d38:	9809883a 	mov	r4,r19
 4013d3c:	4013bc80 	call	4013bc8 <__sfmoreglue>
 4013d40:	90800015 	stw	r2,0(r18)
 4013d44:	103fde1e 	bne	r2,zero,4013cc0 <__alt_mem_onchip_memory2_0+0xfc012a20>
 4013d48:	00800304 	movi	r2,12
 4013d4c:	98800015 	stw	r2,0(r19)
 4013d50:	0005883a 	mov	r2,zero
 4013d54:	003ff006 	br	4013d18 <__alt_mem_onchip_memory2_0+0xfc012a78>

04013d58 <_cleanup>:
 4013d58:	008100f4 	movhi	r2,1027
 4013d5c:	10aaa204 	addi	r2,r2,-21880
 4013d60:	11000017 	ldw	r4,0(r2)
 4013d64:	014100b4 	movhi	r5,1026
 4013d68:	29600c04 	addi	r5,r5,-32720
 4013d6c:	40147801 	jmpi	4014780 <_fwalk_reent>

04013d70 <__sinit>:
 4013d70:	20800e17 	ldw	r2,56(r4)
 4013d74:	10000126 	beq	r2,zero,4013d7c <__sinit+0xc>
 4013d78:	f800283a 	ret
 4013d7c:	4013a241 	jmpi	4013a24 <__sinit.part.1>

04013d80 <__sfp_lock_acquire>:
 4013d80:	f800283a 	ret

04013d84 <__sfp_lock_release>:
 4013d84:	f800283a 	ret

04013d88 <__sinit_lock_acquire>:
 4013d88:	f800283a 	ret

04013d8c <__sinit_lock_release>:
 4013d8c:	f800283a 	ret

04013d90 <__fp_lock_all>:
 4013d90:	008100f4 	movhi	r2,1027
 4013d94:	10aaa304 	addi	r2,r2,-21876
 4013d98:	11000017 	ldw	r4,0(r2)
 4013d9c:	01410074 	movhi	r5,1025
 4013da0:	294ef004 	addi	r5,r5,15296
 4013da4:	40146bc1 	jmpi	40146bc <_fwalk>

04013da8 <__fp_unlock_all>:
 4013da8:	008100f4 	movhi	r2,1027
 4013dac:	10aaa304 	addi	r2,r2,-21876
 4013db0:	11000017 	ldw	r4,0(r2)
 4013db4:	01410074 	movhi	r5,1025
 4013db8:	294e8404 	addi	r5,r5,14864
 4013dbc:	40146bc1 	jmpi	40146bc <_fwalk>

04013dc0 <_malloc_trim_r>:
 4013dc0:	defffb04 	addi	sp,sp,-20
 4013dc4:	dcc00315 	stw	r19,12(sp)
 4013dc8:	04c100b4 	movhi	r19,1026
 4013dcc:	dc800215 	stw	r18,8(sp)
 4013dd0:	dc400115 	stw	r17,4(sp)
 4013dd4:	dc000015 	stw	r16,0(sp)
 4013dd8:	dfc00415 	stw	ra,16(sp)
 4013ddc:	2821883a 	mov	r16,r5
 4013de0:	9cdf4604 	addi	r19,r19,32024
 4013de4:	2025883a 	mov	r18,r4
 4013de8:	401c1f00 	call	401c1f0 <__malloc_lock>
 4013dec:	98800217 	ldw	r2,8(r19)
 4013df0:	14400117 	ldw	r17,4(r2)
 4013df4:	00bfff04 	movi	r2,-4
 4013df8:	88a2703a 	and	r17,r17,r2
 4013dfc:	8c21c83a 	sub	r16,r17,r16
 4013e00:	8403fbc4 	addi	r16,r16,4079
 4013e04:	8020d33a 	srli	r16,r16,12
 4013e08:	0083ffc4 	movi	r2,4095
 4013e0c:	843fffc4 	addi	r16,r16,-1
 4013e10:	8020933a 	slli	r16,r16,12
 4013e14:	1400060e 	bge	r2,r16,4013e30 <_malloc_trim_r+0x70>
 4013e18:	000b883a 	mov	r5,zero
 4013e1c:	9009883a 	mov	r4,r18
 4013e20:	400f4dc0 	call	400f4dc <_sbrk_r>
 4013e24:	98c00217 	ldw	r3,8(r19)
 4013e28:	1c47883a 	add	r3,r3,r17
 4013e2c:	10c00a26 	beq	r2,r3,4013e58 <_malloc_trim_r+0x98>
 4013e30:	9009883a 	mov	r4,r18
 4013e34:	401c2140 	call	401c214 <__malloc_unlock>
 4013e38:	0005883a 	mov	r2,zero
 4013e3c:	dfc00417 	ldw	ra,16(sp)
 4013e40:	dcc00317 	ldw	r19,12(sp)
 4013e44:	dc800217 	ldw	r18,8(sp)
 4013e48:	dc400117 	ldw	r17,4(sp)
 4013e4c:	dc000017 	ldw	r16,0(sp)
 4013e50:	dec00504 	addi	sp,sp,20
 4013e54:	f800283a 	ret
 4013e58:	040bc83a 	sub	r5,zero,r16
 4013e5c:	9009883a 	mov	r4,r18
 4013e60:	400f4dc0 	call	400f4dc <_sbrk_r>
 4013e64:	00ffffc4 	movi	r3,-1
 4013e68:	10c00d26 	beq	r2,r3,4013ea0 <_malloc_trim_r+0xe0>
 4013e6c:	00c100f4 	movhi	r3,1027
 4013e70:	18f77804 	addi	r3,r3,-8736
 4013e74:	18800017 	ldw	r2,0(r3)
 4013e78:	99000217 	ldw	r4,8(r19)
 4013e7c:	8c23c83a 	sub	r17,r17,r16
 4013e80:	8c400054 	ori	r17,r17,1
 4013e84:	1421c83a 	sub	r16,r2,r16
 4013e88:	24400115 	stw	r17,4(r4)
 4013e8c:	9009883a 	mov	r4,r18
 4013e90:	1c000015 	stw	r16,0(r3)
 4013e94:	401c2140 	call	401c214 <__malloc_unlock>
 4013e98:	00800044 	movi	r2,1
 4013e9c:	003fe706 	br	4013e3c <__alt_mem_onchip_memory2_0+0xfc012b9c>
 4013ea0:	000b883a 	mov	r5,zero
 4013ea4:	9009883a 	mov	r4,r18
 4013ea8:	400f4dc0 	call	400f4dc <_sbrk_r>
 4013eac:	99000217 	ldw	r4,8(r19)
 4013eb0:	014003c4 	movi	r5,15
 4013eb4:	1107c83a 	sub	r3,r2,r4
 4013eb8:	28ffdd0e 	bge	r5,r3,4013e30 <__alt_mem_onchip_memory2_0+0xfc012b90>
 4013ebc:	014100f4 	movhi	r5,1027
 4013ec0:	296aa404 	addi	r5,r5,-21872
 4013ec4:	29400017 	ldw	r5,0(r5)
 4013ec8:	18c00054 	ori	r3,r3,1
 4013ecc:	20c00115 	stw	r3,4(r4)
 4013ed0:	00c100f4 	movhi	r3,1027
 4013ed4:	1145c83a 	sub	r2,r2,r5
 4013ed8:	18f77804 	addi	r3,r3,-8736
 4013edc:	18800015 	stw	r2,0(r3)
 4013ee0:	003fd306 	br	4013e30 <__alt_mem_onchip_memory2_0+0xfc012b90>

04013ee4 <_free_r>:
 4013ee4:	28004126 	beq	r5,zero,4013fec <_free_r+0x108>
 4013ee8:	defffd04 	addi	sp,sp,-12
 4013eec:	dc400115 	stw	r17,4(sp)
 4013ef0:	dc000015 	stw	r16,0(sp)
 4013ef4:	2023883a 	mov	r17,r4
 4013ef8:	2821883a 	mov	r16,r5
 4013efc:	dfc00215 	stw	ra,8(sp)
 4013f00:	401c1f00 	call	401c1f0 <__malloc_lock>
 4013f04:	81ffff17 	ldw	r7,-4(r16)
 4013f08:	00bfff84 	movi	r2,-2
 4013f0c:	010100b4 	movhi	r4,1026
 4013f10:	81bffe04 	addi	r6,r16,-8
 4013f14:	3884703a 	and	r2,r7,r2
 4013f18:	211f4604 	addi	r4,r4,32024
 4013f1c:	308b883a 	add	r5,r6,r2
 4013f20:	2a400117 	ldw	r9,4(r5)
 4013f24:	22000217 	ldw	r8,8(r4)
 4013f28:	00ffff04 	movi	r3,-4
 4013f2c:	48c6703a 	and	r3,r9,r3
 4013f30:	2a005726 	beq	r5,r8,4014090 <_free_r+0x1ac>
 4013f34:	28c00115 	stw	r3,4(r5)
 4013f38:	39c0004c 	andi	r7,r7,1
 4013f3c:	3800091e 	bne	r7,zero,4013f64 <_free_r+0x80>
 4013f40:	823ffe17 	ldw	r8,-8(r16)
 4013f44:	22400204 	addi	r9,r4,8
 4013f48:	320dc83a 	sub	r6,r6,r8
 4013f4c:	31c00217 	ldw	r7,8(r6)
 4013f50:	1205883a 	add	r2,r2,r8
 4013f54:	3a406526 	beq	r7,r9,40140ec <_free_r+0x208>
 4013f58:	32000317 	ldw	r8,12(r6)
 4013f5c:	3a000315 	stw	r8,12(r7)
 4013f60:	41c00215 	stw	r7,8(r8)
 4013f64:	28cf883a 	add	r7,r5,r3
 4013f68:	39c00117 	ldw	r7,4(r7)
 4013f6c:	39c0004c 	andi	r7,r7,1
 4013f70:	38003a26 	beq	r7,zero,401405c <_free_r+0x178>
 4013f74:	10c00054 	ori	r3,r2,1
 4013f78:	30c00115 	stw	r3,4(r6)
 4013f7c:	3087883a 	add	r3,r6,r2
 4013f80:	18800015 	stw	r2,0(r3)
 4013f84:	00c07fc4 	movi	r3,511
 4013f88:	18801936 	bltu	r3,r2,4013ff0 <_free_r+0x10c>
 4013f8c:	1004d0fa 	srli	r2,r2,3
 4013f90:	01c00044 	movi	r7,1
 4013f94:	21400117 	ldw	r5,4(r4)
 4013f98:	10c00044 	addi	r3,r2,1
 4013f9c:	18c7883a 	add	r3,r3,r3
 4013fa0:	1005d0ba 	srai	r2,r2,2
 4013fa4:	18c7883a 	add	r3,r3,r3
 4013fa8:	18c7883a 	add	r3,r3,r3
 4013fac:	1907883a 	add	r3,r3,r4
 4013fb0:	3884983a 	sll	r2,r7,r2
 4013fb4:	19c00017 	ldw	r7,0(r3)
 4013fb8:	1a3ffe04 	addi	r8,r3,-8
 4013fbc:	1144b03a 	or	r2,r2,r5
 4013fc0:	32000315 	stw	r8,12(r6)
 4013fc4:	31c00215 	stw	r7,8(r6)
 4013fc8:	20800115 	stw	r2,4(r4)
 4013fcc:	19800015 	stw	r6,0(r3)
 4013fd0:	39800315 	stw	r6,12(r7)
 4013fd4:	8809883a 	mov	r4,r17
 4013fd8:	dfc00217 	ldw	ra,8(sp)
 4013fdc:	dc400117 	ldw	r17,4(sp)
 4013fe0:	dc000017 	ldw	r16,0(sp)
 4013fe4:	dec00304 	addi	sp,sp,12
 4013fe8:	401c2141 	jmpi	401c214 <__malloc_unlock>
 4013fec:	f800283a 	ret
 4013ff0:	100ad27a 	srli	r5,r2,9
 4013ff4:	00c00104 	movi	r3,4
 4013ff8:	19404a36 	bltu	r3,r5,4014124 <_free_r+0x240>
 4013ffc:	100ad1ba 	srli	r5,r2,6
 4014000:	28c00e44 	addi	r3,r5,57
 4014004:	18c7883a 	add	r3,r3,r3
 4014008:	29400e04 	addi	r5,r5,56
 401400c:	18c7883a 	add	r3,r3,r3
 4014010:	18c7883a 	add	r3,r3,r3
 4014014:	1909883a 	add	r4,r3,r4
 4014018:	20c00017 	ldw	r3,0(r4)
 401401c:	01c100b4 	movhi	r7,1026
 4014020:	213ffe04 	addi	r4,r4,-8
 4014024:	39df4604 	addi	r7,r7,32024
 4014028:	20c04426 	beq	r4,r3,401413c <_free_r+0x258>
 401402c:	01ffff04 	movi	r7,-4
 4014030:	19400117 	ldw	r5,4(r3)
 4014034:	29ca703a 	and	r5,r5,r7
 4014038:	1140022e 	bgeu	r2,r5,4014044 <_free_r+0x160>
 401403c:	18c00217 	ldw	r3,8(r3)
 4014040:	20fffb1e 	bne	r4,r3,4014030 <__alt_mem_onchip_memory2_0+0xfc012d90>
 4014044:	19000317 	ldw	r4,12(r3)
 4014048:	31000315 	stw	r4,12(r6)
 401404c:	30c00215 	stw	r3,8(r6)
 4014050:	21800215 	stw	r6,8(r4)
 4014054:	19800315 	stw	r6,12(r3)
 4014058:	003fde06 	br	4013fd4 <__alt_mem_onchip_memory2_0+0xfc012d34>
 401405c:	29c00217 	ldw	r7,8(r5)
 4014060:	10c5883a 	add	r2,r2,r3
 4014064:	00c100b4 	movhi	r3,1026
 4014068:	18df4804 	addi	r3,r3,32032
 401406c:	38c03b26 	beq	r7,r3,401415c <_free_r+0x278>
 4014070:	2a000317 	ldw	r8,12(r5)
 4014074:	11400054 	ori	r5,r2,1
 4014078:	3087883a 	add	r3,r6,r2
 401407c:	3a000315 	stw	r8,12(r7)
 4014080:	41c00215 	stw	r7,8(r8)
 4014084:	31400115 	stw	r5,4(r6)
 4014088:	18800015 	stw	r2,0(r3)
 401408c:	003fbd06 	br	4013f84 <__alt_mem_onchip_memory2_0+0xfc012ce4>
 4014090:	39c0004c 	andi	r7,r7,1
 4014094:	10c5883a 	add	r2,r2,r3
 4014098:	3800071e 	bne	r7,zero,40140b8 <_free_r+0x1d4>
 401409c:	81fffe17 	ldw	r7,-8(r16)
 40140a0:	31cdc83a 	sub	r6,r6,r7
 40140a4:	30c00317 	ldw	r3,12(r6)
 40140a8:	31400217 	ldw	r5,8(r6)
 40140ac:	11c5883a 	add	r2,r2,r7
 40140b0:	28c00315 	stw	r3,12(r5)
 40140b4:	19400215 	stw	r5,8(r3)
 40140b8:	10c00054 	ori	r3,r2,1
 40140bc:	30c00115 	stw	r3,4(r6)
 40140c0:	00c100f4 	movhi	r3,1027
 40140c4:	18eaa504 	addi	r3,r3,-21868
 40140c8:	18c00017 	ldw	r3,0(r3)
 40140cc:	21800215 	stw	r6,8(r4)
 40140d0:	10ffc036 	bltu	r2,r3,4013fd4 <__alt_mem_onchip_memory2_0+0xfc012d34>
 40140d4:	008100f4 	movhi	r2,1027
 40140d8:	10b73404 	addi	r2,r2,-9008
 40140dc:	11400017 	ldw	r5,0(r2)
 40140e0:	8809883a 	mov	r4,r17
 40140e4:	4013dc00 	call	4013dc0 <_malloc_trim_r>
 40140e8:	003fba06 	br	4013fd4 <__alt_mem_onchip_memory2_0+0xfc012d34>
 40140ec:	28c9883a 	add	r4,r5,r3
 40140f0:	21000117 	ldw	r4,4(r4)
 40140f4:	2100004c 	andi	r4,r4,1
 40140f8:	2000391e 	bne	r4,zero,40141e0 <_free_r+0x2fc>
 40140fc:	29c00217 	ldw	r7,8(r5)
 4014100:	29000317 	ldw	r4,12(r5)
 4014104:	1885883a 	add	r2,r3,r2
 4014108:	10c00054 	ori	r3,r2,1
 401410c:	39000315 	stw	r4,12(r7)
 4014110:	21c00215 	stw	r7,8(r4)
 4014114:	30c00115 	stw	r3,4(r6)
 4014118:	308d883a 	add	r6,r6,r2
 401411c:	30800015 	stw	r2,0(r6)
 4014120:	003fac06 	br	4013fd4 <__alt_mem_onchip_memory2_0+0xfc012d34>
 4014124:	00c00504 	movi	r3,20
 4014128:	19401536 	bltu	r3,r5,4014180 <_free_r+0x29c>
 401412c:	28c01704 	addi	r3,r5,92
 4014130:	18c7883a 	add	r3,r3,r3
 4014134:	294016c4 	addi	r5,r5,91
 4014138:	003fb406 	br	401400c <__alt_mem_onchip_memory2_0+0xfc012d6c>
 401413c:	280bd0ba 	srai	r5,r5,2
 4014140:	00c00044 	movi	r3,1
 4014144:	38800117 	ldw	r2,4(r7)
 4014148:	194a983a 	sll	r5,r3,r5
 401414c:	2007883a 	mov	r3,r4
 4014150:	2884b03a 	or	r2,r5,r2
 4014154:	38800115 	stw	r2,4(r7)
 4014158:	003fbb06 	br	4014048 <__alt_mem_onchip_memory2_0+0xfc012da8>
 401415c:	21800515 	stw	r6,20(r4)
 4014160:	21800415 	stw	r6,16(r4)
 4014164:	10c00054 	ori	r3,r2,1
 4014168:	31c00315 	stw	r7,12(r6)
 401416c:	31c00215 	stw	r7,8(r6)
 4014170:	30c00115 	stw	r3,4(r6)
 4014174:	308d883a 	add	r6,r6,r2
 4014178:	30800015 	stw	r2,0(r6)
 401417c:	003f9506 	br	4013fd4 <__alt_mem_onchip_memory2_0+0xfc012d34>
 4014180:	00c01504 	movi	r3,84
 4014184:	19400536 	bltu	r3,r5,401419c <_free_r+0x2b8>
 4014188:	100ad33a 	srli	r5,r2,12
 401418c:	28c01bc4 	addi	r3,r5,111
 4014190:	18c7883a 	add	r3,r3,r3
 4014194:	29401b84 	addi	r5,r5,110
 4014198:	003f9c06 	br	401400c <__alt_mem_onchip_memory2_0+0xfc012d6c>
 401419c:	00c05504 	movi	r3,340
 40141a0:	19400536 	bltu	r3,r5,40141b8 <_free_r+0x2d4>
 40141a4:	100ad3fa 	srli	r5,r2,15
 40141a8:	28c01e04 	addi	r3,r5,120
 40141ac:	18c7883a 	add	r3,r3,r3
 40141b0:	29401dc4 	addi	r5,r5,119
 40141b4:	003f9506 	br	401400c <__alt_mem_onchip_memory2_0+0xfc012d6c>
 40141b8:	00c15504 	movi	r3,1364
 40141bc:	19400536 	bltu	r3,r5,40141d4 <_free_r+0x2f0>
 40141c0:	100ad4ba 	srli	r5,r2,18
 40141c4:	28c01f44 	addi	r3,r5,125
 40141c8:	18c7883a 	add	r3,r3,r3
 40141cc:	29401f04 	addi	r5,r5,124
 40141d0:	003f8e06 	br	401400c <__alt_mem_onchip_memory2_0+0xfc012d6c>
 40141d4:	00c03f84 	movi	r3,254
 40141d8:	01401f84 	movi	r5,126
 40141dc:	003f8b06 	br	401400c <__alt_mem_onchip_memory2_0+0xfc012d6c>
 40141e0:	10c00054 	ori	r3,r2,1
 40141e4:	30c00115 	stw	r3,4(r6)
 40141e8:	308d883a 	add	r6,r6,r2
 40141ec:	30800015 	stw	r2,0(r6)
 40141f0:	003f7806 	br	4013fd4 <__alt_mem_onchip_memory2_0+0xfc012d34>

040141f4 <__sfvwrite_r>:
 40141f4:	30800217 	ldw	r2,8(r6)
 40141f8:	10006726 	beq	r2,zero,4014398 <__sfvwrite_r+0x1a4>
 40141fc:	28c0030b 	ldhu	r3,12(r5)
 4014200:	defff404 	addi	sp,sp,-48
 4014204:	dd400715 	stw	r21,28(sp)
 4014208:	dd000615 	stw	r20,24(sp)
 401420c:	dc000215 	stw	r16,8(sp)
 4014210:	dfc00b15 	stw	ra,44(sp)
 4014214:	df000a15 	stw	fp,40(sp)
 4014218:	ddc00915 	stw	r23,36(sp)
 401421c:	dd800815 	stw	r22,32(sp)
 4014220:	dcc00515 	stw	r19,20(sp)
 4014224:	dc800415 	stw	r18,16(sp)
 4014228:	dc400315 	stw	r17,12(sp)
 401422c:	1880020c 	andi	r2,r3,8
 4014230:	2821883a 	mov	r16,r5
 4014234:	202b883a 	mov	r21,r4
 4014238:	3029883a 	mov	r20,r6
 401423c:	10002726 	beq	r2,zero,40142dc <__sfvwrite_r+0xe8>
 4014240:	28800417 	ldw	r2,16(r5)
 4014244:	10002526 	beq	r2,zero,40142dc <__sfvwrite_r+0xe8>
 4014248:	1880008c 	andi	r2,r3,2
 401424c:	a4400017 	ldw	r17,0(r20)
 4014250:	10002a26 	beq	r2,zero,40142fc <__sfvwrite_r+0x108>
 4014254:	05a00034 	movhi	r22,32768
 4014258:	0027883a 	mov	r19,zero
 401425c:	0025883a 	mov	r18,zero
 4014260:	b5bf0004 	addi	r22,r22,-1024
 4014264:	980d883a 	mov	r6,r19
 4014268:	a809883a 	mov	r4,r21
 401426c:	90004626 	beq	r18,zero,4014388 <__sfvwrite_r+0x194>
 4014270:	900f883a 	mov	r7,r18
 4014274:	b480022e 	bgeu	r22,r18,4014280 <__sfvwrite_r+0x8c>
 4014278:	01e00034 	movhi	r7,32768
 401427c:	39ff0004 	addi	r7,r7,-1024
 4014280:	80800917 	ldw	r2,36(r16)
 4014284:	81400717 	ldw	r5,28(r16)
 4014288:	103ee83a 	callr	r2
 401428c:	00805a0e 	bge	zero,r2,40143f8 <__sfvwrite_r+0x204>
 4014290:	a0c00217 	ldw	r3,8(r20)
 4014294:	98a7883a 	add	r19,r19,r2
 4014298:	90a5c83a 	sub	r18,r18,r2
 401429c:	1885c83a 	sub	r2,r3,r2
 40142a0:	a0800215 	stw	r2,8(r20)
 40142a4:	103fef1e 	bne	r2,zero,4014264 <__alt_mem_onchip_memory2_0+0xfc012fc4>
 40142a8:	0005883a 	mov	r2,zero
 40142ac:	dfc00b17 	ldw	ra,44(sp)
 40142b0:	df000a17 	ldw	fp,40(sp)
 40142b4:	ddc00917 	ldw	r23,36(sp)
 40142b8:	dd800817 	ldw	r22,32(sp)
 40142bc:	dd400717 	ldw	r21,28(sp)
 40142c0:	dd000617 	ldw	r20,24(sp)
 40142c4:	dcc00517 	ldw	r19,20(sp)
 40142c8:	dc800417 	ldw	r18,16(sp)
 40142cc:	dc400317 	ldw	r17,12(sp)
 40142d0:	dc000217 	ldw	r16,8(sp)
 40142d4:	dec00c04 	addi	sp,sp,48
 40142d8:	f800283a 	ret
 40142dc:	800b883a 	mov	r5,r16
 40142e0:	a809883a 	mov	r4,r21
 40142e4:	4011d640 	call	4011d64 <__swsetup_r>
 40142e8:	1000ee1e 	bne	r2,zero,40146a4 <__sfvwrite_r+0x4b0>
 40142ec:	80c0030b 	ldhu	r3,12(r16)
 40142f0:	a4400017 	ldw	r17,0(r20)
 40142f4:	1880008c 	andi	r2,r3,2
 40142f8:	103fd61e 	bne	r2,zero,4014254 <__alt_mem_onchip_memory2_0+0xfc012fb4>
 40142fc:	1880004c 	andi	r2,r3,1
 4014300:	1000421e 	bne	r2,zero,401440c <__sfvwrite_r+0x218>
 4014304:	0039883a 	mov	fp,zero
 4014308:	0025883a 	mov	r18,zero
 401430c:	90001a26 	beq	r18,zero,4014378 <__sfvwrite_r+0x184>
 4014310:	1880800c 	andi	r2,r3,512
 4014314:	84c00217 	ldw	r19,8(r16)
 4014318:	10002126 	beq	r2,zero,40143a0 <__sfvwrite_r+0x1ac>
 401431c:	982f883a 	mov	r23,r19
 4014320:	94c09636 	bltu	r18,r19,401457c <__sfvwrite_r+0x388>
 4014324:	1881200c 	andi	r2,r3,1152
 4014328:	1000a11e 	bne	r2,zero,40145b0 <__sfvwrite_r+0x3bc>
 401432c:	81000017 	ldw	r4,0(r16)
 4014330:	b80d883a 	mov	r6,r23
 4014334:	e00b883a 	mov	r5,fp
 4014338:	4014bc00 	call	4014bc0 <memmove>
 401433c:	80c00217 	ldw	r3,8(r16)
 4014340:	81000017 	ldw	r4,0(r16)
 4014344:	9005883a 	mov	r2,r18
 4014348:	1ce7c83a 	sub	r19,r3,r19
 401434c:	25cf883a 	add	r7,r4,r23
 4014350:	84c00215 	stw	r19,8(r16)
 4014354:	81c00015 	stw	r7,0(r16)
 4014358:	a0c00217 	ldw	r3,8(r20)
 401435c:	e0b9883a 	add	fp,fp,r2
 4014360:	90a5c83a 	sub	r18,r18,r2
 4014364:	18a7c83a 	sub	r19,r3,r2
 4014368:	a4c00215 	stw	r19,8(r20)
 401436c:	983fce26 	beq	r19,zero,40142a8 <__alt_mem_onchip_memory2_0+0xfc013008>
 4014370:	80c0030b 	ldhu	r3,12(r16)
 4014374:	903fe61e 	bne	r18,zero,4014310 <__alt_mem_onchip_memory2_0+0xfc013070>
 4014378:	8f000017 	ldw	fp,0(r17)
 401437c:	8c800117 	ldw	r18,4(r17)
 4014380:	8c400204 	addi	r17,r17,8
 4014384:	003fe106 	br	401430c <__alt_mem_onchip_memory2_0+0xfc01306c>
 4014388:	8cc00017 	ldw	r19,0(r17)
 401438c:	8c800117 	ldw	r18,4(r17)
 4014390:	8c400204 	addi	r17,r17,8
 4014394:	003fb306 	br	4014264 <__alt_mem_onchip_memory2_0+0xfc012fc4>
 4014398:	0005883a 	mov	r2,zero
 401439c:	f800283a 	ret
 40143a0:	81000017 	ldw	r4,0(r16)
 40143a4:	80800417 	ldw	r2,16(r16)
 40143a8:	11005a36 	bltu	r2,r4,4014514 <__sfvwrite_r+0x320>
 40143ac:	85c00517 	ldw	r23,20(r16)
 40143b0:	95c05836 	bltu	r18,r23,4014514 <__sfvwrite_r+0x320>
 40143b4:	00a00034 	movhi	r2,32768
 40143b8:	10bfffc4 	addi	r2,r2,-1
 40143bc:	9009883a 	mov	r4,r18
 40143c0:	1480012e 	bgeu	r2,r18,40143c8 <__sfvwrite_r+0x1d4>
 40143c4:	1009883a 	mov	r4,r2
 40143c8:	b80b883a 	mov	r5,r23
 40143cc:	400d5e40 	call	400d5e4 <__divsi3>
 40143d0:	b80b883a 	mov	r5,r23
 40143d4:	1009883a 	mov	r4,r2
 40143d8:	400d7980 	call	400d798 <__mulsi3>
 40143dc:	81400717 	ldw	r5,28(r16)
 40143e0:	80c00917 	ldw	r3,36(r16)
 40143e4:	100f883a 	mov	r7,r2
 40143e8:	e00d883a 	mov	r6,fp
 40143ec:	a809883a 	mov	r4,r21
 40143f0:	183ee83a 	callr	r3
 40143f4:	00bfd816 	blt	zero,r2,4014358 <__alt_mem_onchip_memory2_0+0xfc0130b8>
 40143f8:	8080030b 	ldhu	r2,12(r16)
 40143fc:	10801014 	ori	r2,r2,64
 4014400:	8080030d 	sth	r2,12(r16)
 4014404:	00bfffc4 	movi	r2,-1
 4014408:	003fa806 	br	40142ac <__alt_mem_onchip_memory2_0+0xfc01300c>
 401440c:	0027883a 	mov	r19,zero
 4014410:	0011883a 	mov	r8,zero
 4014414:	0039883a 	mov	fp,zero
 4014418:	0025883a 	mov	r18,zero
 401441c:	90001f26 	beq	r18,zero,401449c <__sfvwrite_r+0x2a8>
 4014420:	40005a26 	beq	r8,zero,401458c <__sfvwrite_r+0x398>
 4014424:	982d883a 	mov	r22,r19
 4014428:	94c0012e 	bgeu	r18,r19,4014430 <__sfvwrite_r+0x23c>
 401442c:	902d883a 	mov	r22,r18
 4014430:	81000017 	ldw	r4,0(r16)
 4014434:	80800417 	ldw	r2,16(r16)
 4014438:	b02f883a 	mov	r23,r22
 401443c:	81c00517 	ldw	r7,20(r16)
 4014440:	1100032e 	bgeu	r2,r4,4014450 <__sfvwrite_r+0x25c>
 4014444:	80c00217 	ldw	r3,8(r16)
 4014448:	38c7883a 	add	r3,r7,r3
 401444c:	1d801816 	blt	r3,r22,40144b0 <__sfvwrite_r+0x2bc>
 4014450:	b1c03e16 	blt	r22,r7,401454c <__sfvwrite_r+0x358>
 4014454:	80800917 	ldw	r2,36(r16)
 4014458:	81400717 	ldw	r5,28(r16)
 401445c:	e00d883a 	mov	r6,fp
 4014460:	da000115 	stw	r8,4(sp)
 4014464:	a809883a 	mov	r4,r21
 4014468:	103ee83a 	callr	r2
 401446c:	102f883a 	mov	r23,r2
 4014470:	da000117 	ldw	r8,4(sp)
 4014474:	00bfe00e 	bge	zero,r2,40143f8 <__alt_mem_onchip_memory2_0+0xfc013158>
 4014478:	9de7c83a 	sub	r19,r19,r23
 401447c:	98001f26 	beq	r19,zero,40144fc <__sfvwrite_r+0x308>
 4014480:	a0800217 	ldw	r2,8(r20)
 4014484:	e5f9883a 	add	fp,fp,r23
 4014488:	95e5c83a 	sub	r18,r18,r23
 401448c:	15efc83a 	sub	r23,r2,r23
 4014490:	a5c00215 	stw	r23,8(r20)
 4014494:	b83f8426 	beq	r23,zero,40142a8 <__alt_mem_onchip_memory2_0+0xfc013008>
 4014498:	903fe11e 	bne	r18,zero,4014420 <__alt_mem_onchip_memory2_0+0xfc013180>
 401449c:	8f000017 	ldw	fp,0(r17)
 40144a0:	8c800117 	ldw	r18,4(r17)
 40144a4:	0011883a 	mov	r8,zero
 40144a8:	8c400204 	addi	r17,r17,8
 40144ac:	003fdb06 	br	401441c <__alt_mem_onchip_memory2_0+0xfc01317c>
 40144b0:	180d883a 	mov	r6,r3
 40144b4:	e00b883a 	mov	r5,fp
 40144b8:	da000115 	stw	r8,4(sp)
 40144bc:	d8c00015 	stw	r3,0(sp)
 40144c0:	4014bc00 	call	4014bc0 <memmove>
 40144c4:	d8c00017 	ldw	r3,0(sp)
 40144c8:	80800017 	ldw	r2,0(r16)
 40144cc:	800b883a 	mov	r5,r16
 40144d0:	a809883a 	mov	r4,r21
 40144d4:	10c5883a 	add	r2,r2,r3
 40144d8:	80800015 	stw	r2,0(r16)
 40144dc:	d8c00015 	stw	r3,0(sp)
 40144e0:	40139840 	call	4013984 <_fflush_r>
 40144e4:	d8c00017 	ldw	r3,0(sp)
 40144e8:	da000117 	ldw	r8,4(sp)
 40144ec:	103fc21e 	bne	r2,zero,40143f8 <__alt_mem_onchip_memory2_0+0xfc013158>
 40144f0:	182f883a 	mov	r23,r3
 40144f4:	9de7c83a 	sub	r19,r19,r23
 40144f8:	983fe11e 	bne	r19,zero,4014480 <__alt_mem_onchip_memory2_0+0xfc0131e0>
 40144fc:	800b883a 	mov	r5,r16
 4014500:	a809883a 	mov	r4,r21
 4014504:	40139840 	call	4013984 <_fflush_r>
 4014508:	103fbb1e 	bne	r2,zero,40143f8 <__alt_mem_onchip_memory2_0+0xfc013158>
 401450c:	0011883a 	mov	r8,zero
 4014510:	003fdb06 	br	4014480 <__alt_mem_onchip_memory2_0+0xfc0131e0>
 4014514:	94c0012e 	bgeu	r18,r19,401451c <__sfvwrite_r+0x328>
 4014518:	9027883a 	mov	r19,r18
 401451c:	980d883a 	mov	r6,r19
 4014520:	e00b883a 	mov	r5,fp
 4014524:	4014bc00 	call	4014bc0 <memmove>
 4014528:	80800217 	ldw	r2,8(r16)
 401452c:	80c00017 	ldw	r3,0(r16)
 4014530:	14c5c83a 	sub	r2,r2,r19
 4014534:	1cc7883a 	add	r3,r3,r19
 4014538:	80800215 	stw	r2,8(r16)
 401453c:	80c00015 	stw	r3,0(r16)
 4014540:	10004326 	beq	r2,zero,4014650 <__sfvwrite_r+0x45c>
 4014544:	9805883a 	mov	r2,r19
 4014548:	003f8306 	br	4014358 <__alt_mem_onchip_memory2_0+0xfc0130b8>
 401454c:	b00d883a 	mov	r6,r22
 4014550:	e00b883a 	mov	r5,fp
 4014554:	da000115 	stw	r8,4(sp)
 4014558:	4014bc00 	call	4014bc0 <memmove>
 401455c:	80800217 	ldw	r2,8(r16)
 4014560:	80c00017 	ldw	r3,0(r16)
 4014564:	da000117 	ldw	r8,4(sp)
 4014568:	1585c83a 	sub	r2,r2,r22
 401456c:	1dad883a 	add	r22,r3,r22
 4014570:	80800215 	stw	r2,8(r16)
 4014574:	85800015 	stw	r22,0(r16)
 4014578:	003fbf06 	br	4014478 <__alt_mem_onchip_memory2_0+0xfc0131d8>
 401457c:	81000017 	ldw	r4,0(r16)
 4014580:	9027883a 	mov	r19,r18
 4014584:	902f883a 	mov	r23,r18
 4014588:	003f6906 	br	4014330 <__alt_mem_onchip_memory2_0+0xfc013090>
 401458c:	900d883a 	mov	r6,r18
 4014590:	01400284 	movi	r5,10
 4014594:	e009883a 	mov	r4,fp
 4014598:	4014adc0 	call	4014adc <memchr>
 401459c:	10003e26 	beq	r2,zero,4014698 <__sfvwrite_r+0x4a4>
 40145a0:	10800044 	addi	r2,r2,1
 40145a4:	1727c83a 	sub	r19,r2,fp
 40145a8:	02000044 	movi	r8,1
 40145ac:	003f9d06 	br	4014424 <__alt_mem_onchip_memory2_0+0xfc013184>
 40145b0:	80800517 	ldw	r2,20(r16)
 40145b4:	81400417 	ldw	r5,16(r16)
 40145b8:	81c00017 	ldw	r7,0(r16)
 40145bc:	10a7883a 	add	r19,r2,r2
 40145c0:	9885883a 	add	r2,r19,r2
 40145c4:	1026d7fa 	srli	r19,r2,31
 40145c8:	396dc83a 	sub	r22,r7,r5
 40145cc:	b1000044 	addi	r4,r22,1
 40145d0:	9885883a 	add	r2,r19,r2
 40145d4:	1027d07a 	srai	r19,r2,1
 40145d8:	2485883a 	add	r2,r4,r18
 40145dc:	980d883a 	mov	r6,r19
 40145e0:	9880022e 	bgeu	r19,r2,40145ec <__sfvwrite_r+0x3f8>
 40145e4:	1027883a 	mov	r19,r2
 40145e8:	100d883a 	mov	r6,r2
 40145ec:	18c1000c 	andi	r3,r3,1024
 40145f0:	18001c26 	beq	r3,zero,4014664 <__sfvwrite_r+0x470>
 40145f4:	300b883a 	mov	r5,r6
 40145f8:	a809883a 	mov	r4,r21
 40145fc:	400e9000 	call	400e900 <_malloc_r>
 4014600:	102f883a 	mov	r23,r2
 4014604:	10002926 	beq	r2,zero,40146ac <__sfvwrite_r+0x4b8>
 4014608:	81400417 	ldw	r5,16(r16)
 401460c:	b00d883a 	mov	r6,r22
 4014610:	1009883a 	mov	r4,r2
 4014614:	400f10c0 	call	400f10c <memcpy>
 4014618:	8080030b 	ldhu	r2,12(r16)
 401461c:	00fedfc4 	movi	r3,-1153
 4014620:	10c4703a 	and	r2,r2,r3
 4014624:	10802014 	ori	r2,r2,128
 4014628:	8080030d 	sth	r2,12(r16)
 401462c:	bd89883a 	add	r4,r23,r22
 4014630:	9d8fc83a 	sub	r7,r19,r22
 4014634:	85c00415 	stw	r23,16(r16)
 4014638:	84c00515 	stw	r19,20(r16)
 401463c:	81000015 	stw	r4,0(r16)
 4014640:	9027883a 	mov	r19,r18
 4014644:	81c00215 	stw	r7,8(r16)
 4014648:	902f883a 	mov	r23,r18
 401464c:	003f3806 	br	4014330 <__alt_mem_onchip_memory2_0+0xfc013090>
 4014650:	800b883a 	mov	r5,r16
 4014654:	a809883a 	mov	r4,r21
 4014658:	40139840 	call	4013984 <_fflush_r>
 401465c:	103fb926 	beq	r2,zero,4014544 <__alt_mem_onchip_memory2_0+0xfc0132a4>
 4014660:	003f6506 	br	40143f8 <__alt_mem_onchip_memory2_0+0xfc013158>
 4014664:	a809883a 	mov	r4,r21
 4014668:	4015f3c0 	call	4015f3c <_realloc_r>
 401466c:	102f883a 	mov	r23,r2
 4014670:	103fee1e 	bne	r2,zero,401462c <__alt_mem_onchip_memory2_0+0xfc01338c>
 4014674:	81400417 	ldw	r5,16(r16)
 4014678:	a809883a 	mov	r4,r21
 401467c:	4013ee40 	call	4013ee4 <_free_r>
 4014680:	8080030b 	ldhu	r2,12(r16)
 4014684:	00ffdfc4 	movi	r3,-129
 4014688:	1884703a 	and	r2,r3,r2
 401468c:	00c00304 	movi	r3,12
 4014690:	a8c00015 	stw	r3,0(r21)
 4014694:	003f5906 	br	40143fc <__alt_mem_onchip_memory2_0+0xfc01315c>
 4014698:	94c00044 	addi	r19,r18,1
 401469c:	02000044 	movi	r8,1
 40146a0:	003f6006 	br	4014424 <__alt_mem_onchip_memory2_0+0xfc013184>
 40146a4:	00bfffc4 	movi	r2,-1
 40146a8:	003f0006 	br	40142ac <__alt_mem_onchip_memory2_0+0xfc01300c>
 40146ac:	00800304 	movi	r2,12
 40146b0:	a8800015 	stw	r2,0(r21)
 40146b4:	8080030b 	ldhu	r2,12(r16)
 40146b8:	003f5006 	br	40143fc <__alt_mem_onchip_memory2_0+0xfc01315c>

040146bc <_fwalk>:
 40146bc:	defff704 	addi	sp,sp,-36
 40146c0:	dd000415 	stw	r20,16(sp)
 40146c4:	dfc00815 	stw	ra,32(sp)
 40146c8:	ddc00715 	stw	r23,28(sp)
 40146cc:	dd800615 	stw	r22,24(sp)
 40146d0:	dd400515 	stw	r21,20(sp)
 40146d4:	dcc00315 	stw	r19,12(sp)
 40146d8:	dc800215 	stw	r18,8(sp)
 40146dc:	dc400115 	stw	r17,4(sp)
 40146e0:	dc000015 	stw	r16,0(sp)
 40146e4:	2500b804 	addi	r20,r4,736
 40146e8:	a0002326 	beq	r20,zero,4014778 <_fwalk+0xbc>
 40146ec:	282b883a 	mov	r21,r5
 40146f0:	002f883a 	mov	r23,zero
 40146f4:	05800044 	movi	r22,1
 40146f8:	04ffffc4 	movi	r19,-1
 40146fc:	a4400117 	ldw	r17,4(r20)
 4014700:	a4800217 	ldw	r18,8(r20)
 4014704:	8c7fffc4 	addi	r17,r17,-1
 4014708:	88000d16 	blt	r17,zero,4014740 <_fwalk+0x84>
 401470c:	94000304 	addi	r16,r18,12
 4014710:	94800384 	addi	r18,r18,14
 4014714:	8080000b 	ldhu	r2,0(r16)
 4014718:	8c7fffc4 	addi	r17,r17,-1
 401471c:	813ffd04 	addi	r4,r16,-12
 4014720:	b080042e 	bgeu	r22,r2,4014734 <_fwalk+0x78>
 4014724:	9080000f 	ldh	r2,0(r18)
 4014728:	14c00226 	beq	r2,r19,4014734 <_fwalk+0x78>
 401472c:	a83ee83a 	callr	r21
 4014730:	b8aeb03a 	or	r23,r23,r2
 4014734:	84001a04 	addi	r16,r16,104
 4014738:	94801a04 	addi	r18,r18,104
 401473c:	8cfff51e 	bne	r17,r19,4014714 <__alt_mem_onchip_memory2_0+0xfc013474>
 4014740:	a5000017 	ldw	r20,0(r20)
 4014744:	a03fed1e 	bne	r20,zero,40146fc <__alt_mem_onchip_memory2_0+0xfc01345c>
 4014748:	b805883a 	mov	r2,r23
 401474c:	dfc00817 	ldw	ra,32(sp)
 4014750:	ddc00717 	ldw	r23,28(sp)
 4014754:	dd800617 	ldw	r22,24(sp)
 4014758:	dd400517 	ldw	r21,20(sp)
 401475c:	dd000417 	ldw	r20,16(sp)
 4014760:	dcc00317 	ldw	r19,12(sp)
 4014764:	dc800217 	ldw	r18,8(sp)
 4014768:	dc400117 	ldw	r17,4(sp)
 401476c:	dc000017 	ldw	r16,0(sp)
 4014770:	dec00904 	addi	sp,sp,36
 4014774:	f800283a 	ret
 4014778:	002f883a 	mov	r23,zero
 401477c:	003ff206 	br	4014748 <__alt_mem_onchip_memory2_0+0xfc0134a8>

04014780 <_fwalk_reent>:
 4014780:	defff704 	addi	sp,sp,-36
 4014784:	dd000415 	stw	r20,16(sp)
 4014788:	dfc00815 	stw	ra,32(sp)
 401478c:	ddc00715 	stw	r23,28(sp)
 4014790:	dd800615 	stw	r22,24(sp)
 4014794:	dd400515 	stw	r21,20(sp)
 4014798:	dcc00315 	stw	r19,12(sp)
 401479c:	dc800215 	stw	r18,8(sp)
 40147a0:	dc400115 	stw	r17,4(sp)
 40147a4:	dc000015 	stw	r16,0(sp)
 40147a8:	2500b804 	addi	r20,r4,736
 40147ac:	a0002326 	beq	r20,zero,401483c <_fwalk_reent+0xbc>
 40147b0:	282b883a 	mov	r21,r5
 40147b4:	2027883a 	mov	r19,r4
 40147b8:	002f883a 	mov	r23,zero
 40147bc:	05800044 	movi	r22,1
 40147c0:	04bfffc4 	movi	r18,-1
 40147c4:	a4400117 	ldw	r17,4(r20)
 40147c8:	a4000217 	ldw	r16,8(r20)
 40147cc:	8c7fffc4 	addi	r17,r17,-1
 40147d0:	88000c16 	blt	r17,zero,4014804 <_fwalk_reent+0x84>
 40147d4:	84000304 	addi	r16,r16,12
 40147d8:	8080000b 	ldhu	r2,0(r16)
 40147dc:	8c7fffc4 	addi	r17,r17,-1
 40147e0:	817ffd04 	addi	r5,r16,-12
 40147e4:	b080052e 	bgeu	r22,r2,40147fc <_fwalk_reent+0x7c>
 40147e8:	8080008f 	ldh	r2,2(r16)
 40147ec:	9809883a 	mov	r4,r19
 40147f0:	14800226 	beq	r2,r18,40147fc <_fwalk_reent+0x7c>
 40147f4:	a83ee83a 	callr	r21
 40147f8:	b8aeb03a 	or	r23,r23,r2
 40147fc:	84001a04 	addi	r16,r16,104
 4014800:	8cbff51e 	bne	r17,r18,40147d8 <__alt_mem_onchip_memory2_0+0xfc013538>
 4014804:	a5000017 	ldw	r20,0(r20)
 4014808:	a03fee1e 	bne	r20,zero,40147c4 <__alt_mem_onchip_memory2_0+0xfc013524>
 401480c:	b805883a 	mov	r2,r23
 4014810:	dfc00817 	ldw	ra,32(sp)
 4014814:	ddc00717 	ldw	r23,28(sp)
 4014818:	dd800617 	ldw	r22,24(sp)
 401481c:	dd400517 	ldw	r21,20(sp)
 4014820:	dd000417 	ldw	r20,16(sp)
 4014824:	dcc00317 	ldw	r19,12(sp)
 4014828:	dc800217 	ldw	r18,8(sp)
 401482c:	dc400117 	ldw	r17,4(sp)
 4014830:	dc000017 	ldw	r16,0(sp)
 4014834:	dec00904 	addi	sp,sp,36
 4014838:	f800283a 	ret
 401483c:	002f883a 	mov	r23,zero
 4014840:	003ff206 	br	401480c <__alt_mem_onchip_memory2_0+0xfc01356c>

04014844 <_setlocale_r>:
 4014844:	30001b26 	beq	r6,zero,40148b4 <_setlocale_r+0x70>
 4014848:	014100b4 	movhi	r5,1026
 401484c:	defffe04 	addi	sp,sp,-8
 4014850:	295dd104 	addi	r5,r5,30532
 4014854:	3009883a 	mov	r4,r6
 4014858:	dc000015 	stw	r16,0(sp)
 401485c:	dfc00115 	stw	ra,4(sp)
 4014860:	3021883a 	mov	r16,r6
 4014864:	400f8340 	call	400f834 <strcmp>
 4014868:	1000061e 	bne	r2,zero,4014884 <_setlocale_r+0x40>
 401486c:	008100b4 	movhi	r2,1026
 4014870:	109db204 	addi	r2,r2,30408
 4014874:	dfc00117 	ldw	ra,4(sp)
 4014878:	dc000017 	ldw	r16,0(sp)
 401487c:	dec00204 	addi	sp,sp,8
 4014880:	f800283a 	ret
 4014884:	014100b4 	movhi	r5,1026
 4014888:	295db204 	addi	r5,r5,30408
 401488c:	8009883a 	mov	r4,r16
 4014890:	400f8340 	call	400f834 <strcmp>
 4014894:	103ff526 	beq	r2,zero,401486c <__alt_mem_onchip_memory2_0+0xfc0135cc>
 4014898:	014100b4 	movhi	r5,1026
 401489c:	295dbc04 	addi	r5,r5,30448
 40148a0:	8009883a 	mov	r4,r16
 40148a4:	400f8340 	call	400f834 <strcmp>
 40148a8:	103ff026 	beq	r2,zero,401486c <__alt_mem_onchip_memory2_0+0xfc0135cc>
 40148ac:	0005883a 	mov	r2,zero
 40148b0:	003ff006 	br	4014874 <__alt_mem_onchip_memory2_0+0xfc0135d4>
 40148b4:	008100b4 	movhi	r2,1026
 40148b8:	109db204 	addi	r2,r2,30408
 40148bc:	f800283a 	ret

040148c0 <__locale_charset>:
 40148c0:	008100f4 	movhi	r2,1027
 40148c4:	10a05004 	addi	r2,r2,-32448
 40148c8:	f800283a 	ret

040148cc <__locale_mb_cur_max>:
 40148cc:	008100f4 	movhi	r2,1027
 40148d0:	10aaa604 	addi	r2,r2,-21864
 40148d4:	10800017 	ldw	r2,0(r2)
 40148d8:	f800283a 	ret

040148dc <__locale_msgcharset>:
 40148dc:	008100f4 	movhi	r2,1027
 40148e0:	10a04804 	addi	r2,r2,-32480
 40148e4:	f800283a 	ret

040148e8 <__locale_cjk_lang>:
 40148e8:	0005883a 	mov	r2,zero
 40148ec:	f800283a 	ret

040148f0 <_localeconv_r>:
 40148f0:	008100f4 	movhi	r2,1027
 40148f4:	10a05804 	addi	r2,r2,-32416
 40148f8:	f800283a 	ret

040148fc <setlocale>:
 40148fc:	008100f4 	movhi	r2,1027
 4014900:	10aaa304 	addi	r2,r2,-21876
 4014904:	280d883a 	mov	r6,r5
 4014908:	200b883a 	mov	r5,r4
 401490c:	11000017 	ldw	r4,0(r2)
 4014910:	40148441 	jmpi	4014844 <_setlocale_r>

04014914 <localeconv>:
 4014914:	008100f4 	movhi	r2,1027
 4014918:	10a05804 	addi	r2,r2,-32416
 401491c:	f800283a 	ret

04014920 <__smakebuf_r>:
 4014920:	2880030b 	ldhu	r2,12(r5)
 4014924:	10c0008c 	andi	r3,r2,2
 4014928:	1800411e 	bne	r3,zero,4014a30 <__smakebuf_r+0x110>
 401492c:	deffec04 	addi	sp,sp,-80
 4014930:	dc000f15 	stw	r16,60(sp)
 4014934:	2821883a 	mov	r16,r5
 4014938:	2940038f 	ldh	r5,14(r5)
 401493c:	dc401015 	stw	r17,64(sp)
 4014940:	dfc01315 	stw	ra,76(sp)
 4014944:	dcc01215 	stw	r19,72(sp)
 4014948:	dc801115 	stw	r18,68(sp)
 401494c:	2023883a 	mov	r17,r4
 4014950:	28001c16 	blt	r5,zero,40149c4 <__smakebuf_r+0xa4>
 4014954:	d80d883a 	mov	r6,sp
 4014958:	401833c0 	call	401833c <_fstat_r>
 401495c:	10001816 	blt	r2,zero,40149c0 <__smakebuf_r+0xa0>
 4014960:	d8800117 	ldw	r2,4(sp)
 4014964:	00e00014 	movui	r3,32768
 4014968:	10bc000c 	andi	r2,r2,61440
 401496c:	14c80020 	cmpeqi	r19,r2,8192
 4014970:	10c03726 	beq	r2,r3,4014a50 <__smakebuf_r+0x130>
 4014974:	80c0030b 	ldhu	r3,12(r16)
 4014978:	18c20014 	ori	r3,r3,2048
 401497c:	80c0030d 	sth	r3,12(r16)
 4014980:	00c80004 	movi	r3,8192
 4014984:	10c0521e 	bne	r2,r3,4014ad0 <__smakebuf_r+0x1b0>
 4014988:	8140038f 	ldh	r5,14(r16)
 401498c:	8809883a 	mov	r4,r17
 4014990:	40183980 	call	4018398 <_isatty_r>
 4014994:	10004c26 	beq	r2,zero,4014ac8 <__smakebuf_r+0x1a8>
 4014998:	8080030b 	ldhu	r2,12(r16)
 401499c:	80c010c4 	addi	r3,r16,67
 40149a0:	80c00015 	stw	r3,0(r16)
 40149a4:	10800054 	ori	r2,r2,1
 40149a8:	8080030d 	sth	r2,12(r16)
 40149ac:	00800044 	movi	r2,1
 40149b0:	80c00415 	stw	r3,16(r16)
 40149b4:	80800515 	stw	r2,20(r16)
 40149b8:	04810004 	movi	r18,1024
 40149bc:	00000706 	br	40149dc <__smakebuf_r+0xbc>
 40149c0:	8080030b 	ldhu	r2,12(r16)
 40149c4:	10c0200c 	andi	r3,r2,128
 40149c8:	18001f1e 	bne	r3,zero,4014a48 <__smakebuf_r+0x128>
 40149cc:	04810004 	movi	r18,1024
 40149d0:	10820014 	ori	r2,r2,2048
 40149d4:	8080030d 	sth	r2,12(r16)
 40149d8:	0027883a 	mov	r19,zero
 40149dc:	900b883a 	mov	r5,r18
 40149e0:	8809883a 	mov	r4,r17
 40149e4:	400e9000 	call	400e900 <_malloc_r>
 40149e8:	10002c26 	beq	r2,zero,4014a9c <__smakebuf_r+0x17c>
 40149ec:	80c0030b 	ldhu	r3,12(r16)
 40149f0:	01010074 	movhi	r4,1025
 40149f4:	210e8604 	addi	r4,r4,14872
 40149f8:	89000f15 	stw	r4,60(r17)
 40149fc:	18c02014 	ori	r3,r3,128
 4014a00:	80c0030d 	sth	r3,12(r16)
 4014a04:	80800015 	stw	r2,0(r16)
 4014a08:	80800415 	stw	r2,16(r16)
 4014a0c:	84800515 	stw	r18,20(r16)
 4014a10:	98001a1e 	bne	r19,zero,4014a7c <__smakebuf_r+0x15c>
 4014a14:	dfc01317 	ldw	ra,76(sp)
 4014a18:	dcc01217 	ldw	r19,72(sp)
 4014a1c:	dc801117 	ldw	r18,68(sp)
 4014a20:	dc401017 	ldw	r17,64(sp)
 4014a24:	dc000f17 	ldw	r16,60(sp)
 4014a28:	dec01404 	addi	sp,sp,80
 4014a2c:	f800283a 	ret
 4014a30:	288010c4 	addi	r2,r5,67
 4014a34:	28800015 	stw	r2,0(r5)
 4014a38:	28800415 	stw	r2,16(r5)
 4014a3c:	00800044 	movi	r2,1
 4014a40:	28800515 	stw	r2,20(r5)
 4014a44:	f800283a 	ret
 4014a48:	04801004 	movi	r18,64
 4014a4c:	003fe006 	br	40149d0 <__alt_mem_onchip_memory2_0+0xfc013730>
 4014a50:	81000a17 	ldw	r4,40(r16)
 4014a54:	00c10074 	movhi	r3,1025
 4014a58:	18d97b04 	addi	r3,r3,26092
 4014a5c:	20ffc51e 	bne	r4,r3,4014974 <__alt_mem_onchip_memory2_0+0xfc0136d4>
 4014a60:	8080030b 	ldhu	r2,12(r16)
 4014a64:	04810004 	movi	r18,1024
 4014a68:	84801315 	stw	r18,76(r16)
 4014a6c:	1484b03a 	or	r2,r2,r18
 4014a70:	8080030d 	sth	r2,12(r16)
 4014a74:	0027883a 	mov	r19,zero
 4014a78:	003fd806 	br	40149dc <__alt_mem_onchip_memory2_0+0xfc01373c>
 4014a7c:	8140038f 	ldh	r5,14(r16)
 4014a80:	8809883a 	mov	r4,r17
 4014a84:	40183980 	call	4018398 <_isatty_r>
 4014a88:	103fe226 	beq	r2,zero,4014a14 <__alt_mem_onchip_memory2_0+0xfc013774>
 4014a8c:	8080030b 	ldhu	r2,12(r16)
 4014a90:	10800054 	ori	r2,r2,1
 4014a94:	8080030d 	sth	r2,12(r16)
 4014a98:	003fde06 	br	4014a14 <__alt_mem_onchip_memory2_0+0xfc013774>
 4014a9c:	8080030b 	ldhu	r2,12(r16)
 4014aa0:	10c0800c 	andi	r3,r2,512
 4014aa4:	183fdb1e 	bne	r3,zero,4014a14 <__alt_mem_onchip_memory2_0+0xfc013774>
 4014aa8:	10800094 	ori	r2,r2,2
 4014aac:	80c010c4 	addi	r3,r16,67
 4014ab0:	8080030d 	sth	r2,12(r16)
 4014ab4:	00800044 	movi	r2,1
 4014ab8:	80c00015 	stw	r3,0(r16)
 4014abc:	80c00415 	stw	r3,16(r16)
 4014ac0:	80800515 	stw	r2,20(r16)
 4014ac4:	003fd306 	br	4014a14 <__alt_mem_onchip_memory2_0+0xfc013774>
 4014ac8:	04810004 	movi	r18,1024
 4014acc:	003fc306 	br	40149dc <__alt_mem_onchip_memory2_0+0xfc01373c>
 4014ad0:	0027883a 	mov	r19,zero
 4014ad4:	04810004 	movi	r18,1024
 4014ad8:	003fc006 	br	40149dc <__alt_mem_onchip_memory2_0+0xfc01373c>

04014adc <memchr>:
 4014adc:	208000cc 	andi	r2,r4,3
 4014ae0:	280f883a 	mov	r7,r5
 4014ae4:	10003426 	beq	r2,zero,4014bb8 <memchr+0xdc>
 4014ae8:	30bfffc4 	addi	r2,r6,-1
 4014aec:	30001a26 	beq	r6,zero,4014b58 <memchr+0x7c>
 4014af0:	20c00003 	ldbu	r3,0(r4)
 4014af4:	29803fcc 	andi	r6,r5,255
 4014af8:	30c0051e 	bne	r6,r3,4014b10 <memchr+0x34>
 4014afc:	00001806 	br	4014b60 <memchr+0x84>
 4014b00:	10001526 	beq	r2,zero,4014b58 <memchr+0x7c>
 4014b04:	20c00003 	ldbu	r3,0(r4)
 4014b08:	10bfffc4 	addi	r2,r2,-1
 4014b0c:	30c01426 	beq	r6,r3,4014b60 <memchr+0x84>
 4014b10:	21000044 	addi	r4,r4,1
 4014b14:	20c000cc 	andi	r3,r4,3
 4014b18:	183ff91e 	bne	r3,zero,4014b00 <__alt_mem_onchip_memory2_0+0xfc013860>
 4014b1c:	020000c4 	movi	r8,3
 4014b20:	40801136 	bltu	r8,r2,4014b68 <memchr+0x8c>
 4014b24:	10000c26 	beq	r2,zero,4014b58 <memchr+0x7c>
 4014b28:	20c00003 	ldbu	r3,0(r4)
 4014b2c:	29403fcc 	andi	r5,r5,255
 4014b30:	28c00b26 	beq	r5,r3,4014b60 <memchr+0x84>
 4014b34:	20c00044 	addi	r3,r4,1
 4014b38:	39803fcc 	andi	r6,r7,255
 4014b3c:	2089883a 	add	r4,r4,r2
 4014b40:	00000306 	br	4014b50 <memchr+0x74>
 4014b44:	18c00044 	addi	r3,r3,1
 4014b48:	197fffc3 	ldbu	r5,-1(r3)
 4014b4c:	31400526 	beq	r6,r5,4014b64 <memchr+0x88>
 4014b50:	1805883a 	mov	r2,r3
 4014b54:	20fffb1e 	bne	r4,r3,4014b44 <__alt_mem_onchip_memory2_0+0xfc0138a4>
 4014b58:	0005883a 	mov	r2,zero
 4014b5c:	f800283a 	ret
 4014b60:	2005883a 	mov	r2,r4
 4014b64:	f800283a 	ret
 4014b68:	28c03fcc 	andi	r3,r5,255
 4014b6c:	1812923a 	slli	r9,r3,8
 4014b70:	02ffbff4 	movhi	r11,65279
 4014b74:	02a02074 	movhi	r10,32897
 4014b78:	48d2b03a 	or	r9,r9,r3
 4014b7c:	4806943a 	slli	r3,r9,16
 4014b80:	5affbfc4 	addi	r11,r11,-257
 4014b84:	52a02004 	addi	r10,r10,-32640
 4014b88:	48d2b03a 	or	r9,r9,r3
 4014b8c:	20c00017 	ldw	r3,0(r4)
 4014b90:	48c6f03a 	xor	r3,r9,r3
 4014b94:	1acd883a 	add	r6,r3,r11
 4014b98:	00c6303a 	nor	r3,zero,r3
 4014b9c:	30c6703a 	and	r3,r6,r3
 4014ba0:	1a86703a 	and	r3,r3,r10
 4014ba4:	183fe01e 	bne	r3,zero,4014b28 <__alt_mem_onchip_memory2_0+0xfc013888>
 4014ba8:	10bfff04 	addi	r2,r2,-4
 4014bac:	21000104 	addi	r4,r4,4
 4014bb0:	40bff636 	bltu	r8,r2,4014b8c <__alt_mem_onchip_memory2_0+0xfc0138ec>
 4014bb4:	003fdb06 	br	4014b24 <__alt_mem_onchip_memory2_0+0xfc013884>
 4014bb8:	3005883a 	mov	r2,r6
 4014bbc:	003fd706 	br	4014b1c <__alt_mem_onchip_memory2_0+0xfc01387c>

04014bc0 <memmove>:
 4014bc0:	2005883a 	mov	r2,r4
 4014bc4:	29000b2e 	bgeu	r5,r4,4014bf4 <memmove+0x34>
 4014bc8:	298f883a 	add	r7,r5,r6
 4014bcc:	21c0092e 	bgeu	r4,r7,4014bf4 <memmove+0x34>
 4014bd0:	2187883a 	add	r3,r4,r6
 4014bd4:	198bc83a 	sub	r5,r3,r6
 4014bd8:	30004826 	beq	r6,zero,4014cfc <memmove+0x13c>
 4014bdc:	39ffffc4 	addi	r7,r7,-1
 4014be0:	39000003 	ldbu	r4,0(r7)
 4014be4:	18ffffc4 	addi	r3,r3,-1
 4014be8:	19000005 	stb	r4,0(r3)
 4014bec:	28fffb1e 	bne	r5,r3,4014bdc <__alt_mem_onchip_memory2_0+0xfc01393c>
 4014bf0:	f800283a 	ret
 4014bf4:	00c003c4 	movi	r3,15
 4014bf8:	1980412e 	bgeu	r3,r6,4014d00 <memmove+0x140>
 4014bfc:	2886b03a 	or	r3,r5,r2
 4014c00:	18c000cc 	andi	r3,r3,3
 4014c04:	1800401e 	bne	r3,zero,4014d08 <memmove+0x148>
 4014c08:	33fffc04 	addi	r15,r6,-16
 4014c0c:	781ed13a 	srli	r15,r15,4
 4014c10:	28c00104 	addi	r3,r5,4
 4014c14:	13400104 	addi	r13,r2,4
 4014c18:	781c913a 	slli	r14,r15,4
 4014c1c:	2b000204 	addi	r12,r5,8
 4014c20:	12c00204 	addi	r11,r2,8
 4014c24:	73800504 	addi	r14,r14,20
 4014c28:	2a800304 	addi	r10,r5,12
 4014c2c:	12400304 	addi	r9,r2,12
 4014c30:	2b9d883a 	add	r14,r5,r14
 4014c34:	2811883a 	mov	r8,r5
 4014c38:	100f883a 	mov	r7,r2
 4014c3c:	41000017 	ldw	r4,0(r8)
 4014c40:	39c00404 	addi	r7,r7,16
 4014c44:	18c00404 	addi	r3,r3,16
 4014c48:	393ffc15 	stw	r4,-16(r7)
 4014c4c:	193ffc17 	ldw	r4,-16(r3)
 4014c50:	6b400404 	addi	r13,r13,16
 4014c54:	5ac00404 	addi	r11,r11,16
 4014c58:	693ffc15 	stw	r4,-16(r13)
 4014c5c:	61000017 	ldw	r4,0(r12)
 4014c60:	4a400404 	addi	r9,r9,16
 4014c64:	42000404 	addi	r8,r8,16
 4014c68:	593ffc15 	stw	r4,-16(r11)
 4014c6c:	51000017 	ldw	r4,0(r10)
 4014c70:	63000404 	addi	r12,r12,16
 4014c74:	52800404 	addi	r10,r10,16
 4014c78:	493ffc15 	stw	r4,-16(r9)
 4014c7c:	1bbfef1e 	bne	r3,r14,4014c3c <__alt_mem_onchip_memory2_0+0xfc01399c>
 4014c80:	79000044 	addi	r4,r15,1
 4014c84:	2008913a 	slli	r4,r4,4
 4014c88:	328003cc 	andi	r10,r6,15
 4014c8c:	02c000c4 	movi	r11,3
 4014c90:	1107883a 	add	r3,r2,r4
 4014c94:	290b883a 	add	r5,r5,r4
 4014c98:	5a801e2e 	bgeu	r11,r10,4014d14 <memmove+0x154>
 4014c9c:	1813883a 	mov	r9,r3
 4014ca0:	2811883a 	mov	r8,r5
 4014ca4:	500f883a 	mov	r7,r10
 4014ca8:	41000017 	ldw	r4,0(r8)
 4014cac:	4a400104 	addi	r9,r9,4
 4014cb0:	39ffff04 	addi	r7,r7,-4
 4014cb4:	493fff15 	stw	r4,-4(r9)
 4014cb8:	42000104 	addi	r8,r8,4
 4014cbc:	59fffa36 	bltu	r11,r7,4014ca8 <__alt_mem_onchip_memory2_0+0xfc013a08>
 4014cc0:	513fff04 	addi	r4,r10,-4
 4014cc4:	2008d0ba 	srli	r4,r4,2
 4014cc8:	318000cc 	andi	r6,r6,3
 4014ccc:	21000044 	addi	r4,r4,1
 4014cd0:	2109883a 	add	r4,r4,r4
 4014cd4:	2109883a 	add	r4,r4,r4
 4014cd8:	1907883a 	add	r3,r3,r4
 4014cdc:	290b883a 	add	r5,r5,r4
 4014ce0:	30000b26 	beq	r6,zero,4014d10 <memmove+0x150>
 4014ce4:	198d883a 	add	r6,r3,r6
 4014ce8:	29c00003 	ldbu	r7,0(r5)
 4014cec:	18c00044 	addi	r3,r3,1
 4014cf0:	29400044 	addi	r5,r5,1
 4014cf4:	19ffffc5 	stb	r7,-1(r3)
 4014cf8:	19bffb1e 	bne	r3,r6,4014ce8 <__alt_mem_onchip_memory2_0+0xfc013a48>
 4014cfc:	f800283a 	ret
 4014d00:	1007883a 	mov	r3,r2
 4014d04:	003ff606 	br	4014ce0 <__alt_mem_onchip_memory2_0+0xfc013a40>
 4014d08:	1007883a 	mov	r3,r2
 4014d0c:	003ff506 	br	4014ce4 <__alt_mem_onchip_memory2_0+0xfc013a44>
 4014d10:	f800283a 	ret
 4014d14:	500d883a 	mov	r6,r10
 4014d18:	003ff106 	br	4014ce0 <__alt_mem_onchip_memory2_0+0xfc013a40>

04014d1c <_Balloc>:
 4014d1c:	20801317 	ldw	r2,76(r4)
 4014d20:	defffc04 	addi	sp,sp,-16
 4014d24:	dc400115 	stw	r17,4(sp)
 4014d28:	dc000015 	stw	r16,0(sp)
 4014d2c:	dfc00315 	stw	ra,12(sp)
 4014d30:	dc800215 	stw	r18,8(sp)
 4014d34:	2023883a 	mov	r17,r4
 4014d38:	2821883a 	mov	r16,r5
 4014d3c:	10000f26 	beq	r2,zero,4014d7c <_Balloc+0x60>
 4014d40:	8407883a 	add	r3,r16,r16
 4014d44:	18c7883a 	add	r3,r3,r3
 4014d48:	10c7883a 	add	r3,r2,r3
 4014d4c:	18800017 	ldw	r2,0(r3)
 4014d50:	10001126 	beq	r2,zero,4014d98 <_Balloc+0x7c>
 4014d54:	11000017 	ldw	r4,0(r2)
 4014d58:	19000015 	stw	r4,0(r3)
 4014d5c:	10000415 	stw	zero,16(r2)
 4014d60:	10000315 	stw	zero,12(r2)
 4014d64:	dfc00317 	ldw	ra,12(sp)
 4014d68:	dc800217 	ldw	r18,8(sp)
 4014d6c:	dc400117 	ldw	r17,4(sp)
 4014d70:	dc000017 	ldw	r16,0(sp)
 4014d74:	dec00404 	addi	sp,sp,16
 4014d78:	f800283a 	ret
 4014d7c:	01800844 	movi	r6,33
 4014d80:	01400104 	movi	r5,4
 4014d84:	4017f540 	call	4017f54 <_calloc_r>
 4014d88:	88801315 	stw	r2,76(r17)
 4014d8c:	103fec1e 	bne	r2,zero,4014d40 <__alt_mem_onchip_memory2_0+0xfc013aa0>
 4014d90:	0005883a 	mov	r2,zero
 4014d94:	003ff306 	br	4014d64 <__alt_mem_onchip_memory2_0+0xfc013ac4>
 4014d98:	01400044 	movi	r5,1
 4014d9c:	2c24983a 	sll	r18,r5,r16
 4014da0:	8809883a 	mov	r4,r17
 4014da4:	91800144 	addi	r6,r18,5
 4014da8:	318d883a 	add	r6,r6,r6
 4014dac:	318d883a 	add	r6,r6,r6
 4014db0:	4017f540 	call	4017f54 <_calloc_r>
 4014db4:	103ff626 	beq	r2,zero,4014d90 <__alt_mem_onchip_memory2_0+0xfc013af0>
 4014db8:	14000115 	stw	r16,4(r2)
 4014dbc:	14800215 	stw	r18,8(r2)
 4014dc0:	003fe606 	br	4014d5c <__alt_mem_onchip_memory2_0+0xfc013abc>

04014dc4 <_Bfree>:
 4014dc4:	28000826 	beq	r5,zero,4014de8 <_Bfree+0x24>
 4014dc8:	28c00117 	ldw	r3,4(r5)
 4014dcc:	20801317 	ldw	r2,76(r4)
 4014dd0:	18c7883a 	add	r3,r3,r3
 4014dd4:	18c7883a 	add	r3,r3,r3
 4014dd8:	10c5883a 	add	r2,r2,r3
 4014ddc:	10c00017 	ldw	r3,0(r2)
 4014de0:	28c00015 	stw	r3,0(r5)
 4014de4:	11400015 	stw	r5,0(r2)
 4014de8:	f800283a 	ret

04014dec <__multadd>:
 4014dec:	defff704 	addi	sp,sp,-36
 4014df0:	dc800215 	stw	r18,8(sp)
 4014df4:	2c800417 	ldw	r18,16(r5)
 4014df8:	dd800615 	stw	r22,24(sp)
 4014dfc:	dd400515 	stw	r21,20(sp)
 4014e00:	dd000415 	stw	r20,16(sp)
 4014e04:	dcc00315 	stw	r19,12(sp)
 4014e08:	dc400115 	stw	r17,4(sp)
 4014e0c:	dc000015 	stw	r16,0(sp)
 4014e10:	dfc00815 	stw	ra,32(sp)
 4014e14:	ddc00715 	stw	r23,28(sp)
 4014e18:	2827883a 	mov	r19,r5
 4014e1c:	2029883a 	mov	r20,r4
 4014e20:	3023883a 	mov	r17,r6
 4014e24:	3821883a 	mov	r16,r7
 4014e28:	2d400504 	addi	r21,r5,20
 4014e2c:	002d883a 	mov	r22,zero
 4014e30:	adc00017 	ldw	r23,0(r21)
 4014e34:	880b883a 	mov	r5,r17
 4014e38:	ad400104 	addi	r21,r21,4
 4014e3c:	b93fffcc 	andi	r4,r23,65535
 4014e40:	400d7980 	call	400d798 <__mulsi3>
 4014e44:	b808d43a 	srli	r4,r23,16
 4014e48:	880b883a 	mov	r5,r17
 4014e4c:	1421883a 	add	r16,r2,r16
 4014e50:	400d7980 	call	400d798 <__mulsi3>
 4014e54:	800ed43a 	srli	r7,r16,16
 4014e58:	80ffffcc 	andi	r3,r16,65535
 4014e5c:	b5800044 	addi	r22,r22,1
 4014e60:	11c5883a 	add	r2,r2,r7
 4014e64:	100e943a 	slli	r7,r2,16
 4014e68:	1020d43a 	srli	r16,r2,16
 4014e6c:	38c7883a 	add	r3,r7,r3
 4014e70:	a8ffff15 	stw	r3,-4(r21)
 4014e74:	b4bfee16 	blt	r22,r18,4014e30 <__alt_mem_onchip_memory2_0+0xfc013b90>
 4014e78:	80000926 	beq	r16,zero,4014ea0 <__multadd+0xb4>
 4014e7c:	98800217 	ldw	r2,8(r19)
 4014e80:	9080130e 	bge	r18,r2,4014ed0 <__multadd+0xe4>
 4014e84:	90800144 	addi	r2,r18,5
 4014e88:	1085883a 	add	r2,r2,r2
 4014e8c:	1085883a 	add	r2,r2,r2
 4014e90:	9885883a 	add	r2,r19,r2
 4014e94:	14000015 	stw	r16,0(r2)
 4014e98:	94800044 	addi	r18,r18,1
 4014e9c:	9c800415 	stw	r18,16(r19)
 4014ea0:	9805883a 	mov	r2,r19
 4014ea4:	dfc00817 	ldw	ra,32(sp)
 4014ea8:	ddc00717 	ldw	r23,28(sp)
 4014eac:	dd800617 	ldw	r22,24(sp)
 4014eb0:	dd400517 	ldw	r21,20(sp)
 4014eb4:	dd000417 	ldw	r20,16(sp)
 4014eb8:	dcc00317 	ldw	r19,12(sp)
 4014ebc:	dc800217 	ldw	r18,8(sp)
 4014ec0:	dc400117 	ldw	r17,4(sp)
 4014ec4:	dc000017 	ldw	r16,0(sp)
 4014ec8:	dec00904 	addi	sp,sp,36
 4014ecc:	f800283a 	ret
 4014ed0:	99400117 	ldw	r5,4(r19)
 4014ed4:	a009883a 	mov	r4,r20
 4014ed8:	29400044 	addi	r5,r5,1
 4014edc:	4014d1c0 	call	4014d1c <_Balloc>
 4014ee0:	99800417 	ldw	r6,16(r19)
 4014ee4:	99400304 	addi	r5,r19,12
 4014ee8:	11000304 	addi	r4,r2,12
 4014eec:	31800084 	addi	r6,r6,2
 4014ef0:	318d883a 	add	r6,r6,r6
 4014ef4:	318d883a 	add	r6,r6,r6
 4014ef8:	1023883a 	mov	r17,r2
 4014efc:	400f10c0 	call	400f10c <memcpy>
 4014f00:	98000a26 	beq	r19,zero,4014f2c <__multadd+0x140>
 4014f04:	98c00117 	ldw	r3,4(r19)
 4014f08:	a0801317 	ldw	r2,76(r20)
 4014f0c:	18c7883a 	add	r3,r3,r3
 4014f10:	18c7883a 	add	r3,r3,r3
 4014f14:	10c5883a 	add	r2,r2,r3
 4014f18:	10c00017 	ldw	r3,0(r2)
 4014f1c:	98c00015 	stw	r3,0(r19)
 4014f20:	14c00015 	stw	r19,0(r2)
 4014f24:	8827883a 	mov	r19,r17
 4014f28:	003fd606 	br	4014e84 <__alt_mem_onchip_memory2_0+0xfc013be4>
 4014f2c:	8827883a 	mov	r19,r17
 4014f30:	003fd406 	br	4014e84 <__alt_mem_onchip_memory2_0+0xfc013be4>

04014f34 <__s2b>:
 4014f34:	defff904 	addi	sp,sp,-28
 4014f38:	dc400115 	stw	r17,4(sp)
 4014f3c:	dc000015 	stw	r16,0(sp)
 4014f40:	2023883a 	mov	r17,r4
 4014f44:	2821883a 	mov	r16,r5
 4014f48:	39000204 	addi	r4,r7,8
 4014f4c:	01400244 	movi	r5,9
 4014f50:	dcc00315 	stw	r19,12(sp)
 4014f54:	dc800215 	stw	r18,8(sp)
 4014f58:	dfc00615 	stw	ra,24(sp)
 4014f5c:	dd400515 	stw	r21,20(sp)
 4014f60:	dd000415 	stw	r20,16(sp)
 4014f64:	3825883a 	mov	r18,r7
 4014f68:	3027883a 	mov	r19,r6
 4014f6c:	400d5e40 	call	400d5e4 <__divsi3>
 4014f70:	00c00044 	movi	r3,1
 4014f74:	000b883a 	mov	r5,zero
 4014f78:	1880030e 	bge	r3,r2,4014f88 <__s2b+0x54>
 4014f7c:	18c7883a 	add	r3,r3,r3
 4014f80:	29400044 	addi	r5,r5,1
 4014f84:	18bffd16 	blt	r3,r2,4014f7c <__alt_mem_onchip_memory2_0+0xfc013cdc>
 4014f88:	8809883a 	mov	r4,r17
 4014f8c:	4014d1c0 	call	4014d1c <_Balloc>
 4014f90:	d8c00717 	ldw	r3,28(sp)
 4014f94:	10c00515 	stw	r3,20(r2)
 4014f98:	00c00044 	movi	r3,1
 4014f9c:	10c00415 	stw	r3,16(r2)
 4014fa0:	00c00244 	movi	r3,9
 4014fa4:	1cc0210e 	bge	r3,r19,401502c <__s2b+0xf8>
 4014fa8:	80eb883a 	add	r21,r16,r3
 4014fac:	a829883a 	mov	r20,r21
 4014fb0:	84e1883a 	add	r16,r16,r19
 4014fb4:	a1c00007 	ldb	r7,0(r20)
 4014fb8:	01800284 	movi	r6,10
 4014fbc:	a5000044 	addi	r20,r20,1
 4014fc0:	100b883a 	mov	r5,r2
 4014fc4:	39fff404 	addi	r7,r7,-48
 4014fc8:	8809883a 	mov	r4,r17
 4014fcc:	4014dec0 	call	4014dec <__multadd>
 4014fd0:	a43ff81e 	bne	r20,r16,4014fb4 <__alt_mem_onchip_memory2_0+0xfc013d14>
 4014fd4:	ace1883a 	add	r16,r21,r19
 4014fd8:	843ffe04 	addi	r16,r16,-8
 4014fdc:	9c800a0e 	bge	r19,r18,4015008 <__s2b+0xd4>
 4014fe0:	94e5c83a 	sub	r18,r18,r19
 4014fe4:	84a5883a 	add	r18,r16,r18
 4014fe8:	81c00007 	ldb	r7,0(r16)
 4014fec:	01800284 	movi	r6,10
 4014ff0:	84000044 	addi	r16,r16,1
 4014ff4:	100b883a 	mov	r5,r2
 4014ff8:	39fff404 	addi	r7,r7,-48
 4014ffc:	8809883a 	mov	r4,r17
 4015000:	4014dec0 	call	4014dec <__multadd>
 4015004:	84bff81e 	bne	r16,r18,4014fe8 <__alt_mem_onchip_memory2_0+0xfc013d48>
 4015008:	dfc00617 	ldw	ra,24(sp)
 401500c:	dd400517 	ldw	r21,20(sp)
 4015010:	dd000417 	ldw	r20,16(sp)
 4015014:	dcc00317 	ldw	r19,12(sp)
 4015018:	dc800217 	ldw	r18,8(sp)
 401501c:	dc400117 	ldw	r17,4(sp)
 4015020:	dc000017 	ldw	r16,0(sp)
 4015024:	dec00704 	addi	sp,sp,28
 4015028:	f800283a 	ret
 401502c:	84000284 	addi	r16,r16,10
 4015030:	1827883a 	mov	r19,r3
 4015034:	003fe906 	br	4014fdc <__alt_mem_onchip_memory2_0+0xfc013d3c>

04015038 <__hi0bits>:
 4015038:	20bfffec 	andhi	r2,r4,65535
 401503c:	1000141e 	bne	r2,zero,4015090 <__hi0bits+0x58>
 4015040:	2008943a 	slli	r4,r4,16
 4015044:	00800404 	movi	r2,16
 4015048:	20ffc02c 	andhi	r3,r4,65280
 401504c:	1800021e 	bne	r3,zero,4015058 <__hi0bits+0x20>
 4015050:	2008923a 	slli	r4,r4,8
 4015054:	10800204 	addi	r2,r2,8
 4015058:	20fc002c 	andhi	r3,r4,61440
 401505c:	1800021e 	bne	r3,zero,4015068 <__hi0bits+0x30>
 4015060:	2008913a 	slli	r4,r4,4
 4015064:	10800104 	addi	r2,r2,4
 4015068:	20f0002c 	andhi	r3,r4,49152
 401506c:	1800031e 	bne	r3,zero,401507c <__hi0bits+0x44>
 4015070:	2109883a 	add	r4,r4,r4
 4015074:	10800084 	addi	r2,r2,2
 4015078:	2109883a 	add	r4,r4,r4
 401507c:	20000316 	blt	r4,zero,401508c <__hi0bits+0x54>
 4015080:	2110002c 	andhi	r4,r4,16384
 4015084:	2000041e 	bne	r4,zero,4015098 <__hi0bits+0x60>
 4015088:	00800804 	movi	r2,32
 401508c:	f800283a 	ret
 4015090:	0005883a 	mov	r2,zero
 4015094:	003fec06 	br	4015048 <__alt_mem_onchip_memory2_0+0xfc013da8>
 4015098:	10800044 	addi	r2,r2,1
 401509c:	f800283a 	ret

040150a0 <__lo0bits>:
 40150a0:	20c00017 	ldw	r3,0(r4)
 40150a4:	188001cc 	andi	r2,r3,7
 40150a8:	10000826 	beq	r2,zero,40150cc <__lo0bits+0x2c>
 40150ac:	1880004c 	andi	r2,r3,1
 40150b0:	1000211e 	bne	r2,zero,4015138 <__lo0bits+0x98>
 40150b4:	1880008c 	andi	r2,r3,2
 40150b8:	1000211e 	bne	r2,zero,4015140 <__lo0bits+0xa0>
 40150bc:	1806d0ba 	srli	r3,r3,2
 40150c0:	00800084 	movi	r2,2
 40150c4:	20c00015 	stw	r3,0(r4)
 40150c8:	f800283a 	ret
 40150cc:	18bfffcc 	andi	r2,r3,65535
 40150d0:	10001326 	beq	r2,zero,4015120 <__lo0bits+0x80>
 40150d4:	0005883a 	mov	r2,zero
 40150d8:	19403fcc 	andi	r5,r3,255
 40150dc:	2800021e 	bne	r5,zero,40150e8 <__lo0bits+0x48>
 40150e0:	1806d23a 	srli	r3,r3,8
 40150e4:	10800204 	addi	r2,r2,8
 40150e8:	194003cc 	andi	r5,r3,15
 40150ec:	2800021e 	bne	r5,zero,40150f8 <__lo0bits+0x58>
 40150f0:	1806d13a 	srli	r3,r3,4
 40150f4:	10800104 	addi	r2,r2,4
 40150f8:	194000cc 	andi	r5,r3,3
 40150fc:	2800021e 	bne	r5,zero,4015108 <__lo0bits+0x68>
 4015100:	1806d0ba 	srli	r3,r3,2
 4015104:	10800084 	addi	r2,r2,2
 4015108:	1940004c 	andi	r5,r3,1
 401510c:	2800081e 	bne	r5,zero,4015130 <__lo0bits+0x90>
 4015110:	1806d07a 	srli	r3,r3,1
 4015114:	1800051e 	bne	r3,zero,401512c <__lo0bits+0x8c>
 4015118:	00800804 	movi	r2,32
 401511c:	f800283a 	ret
 4015120:	1806d43a 	srli	r3,r3,16
 4015124:	00800404 	movi	r2,16
 4015128:	003feb06 	br	40150d8 <__alt_mem_onchip_memory2_0+0xfc013e38>
 401512c:	10800044 	addi	r2,r2,1
 4015130:	20c00015 	stw	r3,0(r4)
 4015134:	f800283a 	ret
 4015138:	0005883a 	mov	r2,zero
 401513c:	f800283a 	ret
 4015140:	1806d07a 	srli	r3,r3,1
 4015144:	00800044 	movi	r2,1
 4015148:	20c00015 	stw	r3,0(r4)
 401514c:	f800283a 	ret

04015150 <__i2b>:
 4015150:	defffd04 	addi	sp,sp,-12
 4015154:	dc000015 	stw	r16,0(sp)
 4015158:	04000044 	movi	r16,1
 401515c:	dc400115 	stw	r17,4(sp)
 4015160:	2823883a 	mov	r17,r5
 4015164:	800b883a 	mov	r5,r16
 4015168:	dfc00215 	stw	ra,8(sp)
 401516c:	4014d1c0 	call	4014d1c <_Balloc>
 4015170:	14400515 	stw	r17,20(r2)
 4015174:	14000415 	stw	r16,16(r2)
 4015178:	dfc00217 	ldw	ra,8(sp)
 401517c:	dc400117 	ldw	r17,4(sp)
 4015180:	dc000017 	ldw	r16,0(sp)
 4015184:	dec00304 	addi	sp,sp,12
 4015188:	f800283a 	ret

0401518c <__multiply>:
 401518c:	deffef04 	addi	sp,sp,-68
 4015190:	dc400815 	stw	r17,32(sp)
 4015194:	dc000715 	stw	r16,28(sp)
 4015198:	34400417 	ldw	r17,16(r6)
 401519c:	2c000417 	ldw	r16,16(r5)
 40151a0:	dd800d15 	stw	r22,52(sp)
 40151a4:	dc800915 	stw	r18,36(sp)
 40151a8:	dfc01015 	stw	ra,64(sp)
 40151ac:	df000f15 	stw	fp,60(sp)
 40151b0:	ddc00e15 	stw	r23,56(sp)
 40151b4:	dd400c15 	stw	r21,48(sp)
 40151b8:	dd000b15 	stw	r20,44(sp)
 40151bc:	dcc00a15 	stw	r19,40(sp)
 40151c0:	2825883a 	mov	r18,r5
 40151c4:	302d883a 	mov	r22,r6
 40151c8:	8440050e 	bge	r16,r17,40151e0 <__multiply+0x54>
 40151cc:	8007883a 	mov	r3,r16
 40151d0:	3025883a 	mov	r18,r6
 40151d4:	8821883a 	mov	r16,r17
 40151d8:	282d883a 	mov	r22,r5
 40151dc:	1823883a 	mov	r17,r3
 40151e0:	90800217 	ldw	r2,8(r18)
 40151e4:	8447883a 	add	r3,r16,r17
 40151e8:	d8c00215 	stw	r3,8(sp)
 40151ec:	91400117 	ldw	r5,4(r18)
 40151f0:	10c0010e 	bge	r2,r3,40151f8 <__multiply+0x6c>
 40151f4:	29400044 	addi	r5,r5,1
 40151f8:	4014d1c0 	call	4014d1c <_Balloc>
 40151fc:	d8c00217 	ldw	r3,8(sp)
 4015200:	d8800615 	stw	r2,24(sp)
 4015204:	18eb883a 	add	r21,r3,r3
 4015208:	ad6b883a 	add	r21,r21,r21
 401520c:	10c00504 	addi	r3,r2,20
 4015210:	1d6b883a 	add	r21,r3,r21
 4015214:	d8c00115 	stw	r3,4(sp)
 4015218:	dd400315 	stw	r21,12(sp)
 401521c:	1805883a 	mov	r2,r3
 4015220:	1d40042e 	bgeu	r3,r21,4015234 <__multiply+0xa8>
 4015224:	d8c00317 	ldw	r3,12(sp)
 4015228:	10000015 	stw	zero,0(r2)
 401522c:	10800104 	addi	r2,r2,4
 4015230:	10fffc36 	bltu	r2,r3,4015224 <__alt_mem_onchip_memory2_0+0xfc013f84>
 4015234:	8c63883a 	add	r17,r17,r17
 4015238:	b5800504 	addi	r22,r22,20
 401523c:	8c63883a 	add	r17,r17,r17
 4015240:	94800504 	addi	r18,r18,20
 4015244:	8421883a 	add	r16,r16,r16
 4015248:	b463883a 	add	r17,r22,r17
 401524c:	8421883a 	add	r16,r16,r16
 4015250:	dd800015 	stw	r22,0(sp)
 4015254:	dc800415 	stw	r18,16(sp)
 4015258:	dc400515 	stw	r17,20(sp)
 401525c:	9429883a 	add	r20,r18,r16
 4015260:	b4404f2e 	bgeu	r22,r17,40153a0 <__multiply+0x214>
 4015264:	d8c00017 	ldw	r3,0(sp)
 4015268:	1c800017 	ldw	r18,0(r3)
 401526c:	947fffcc 	andi	r17,r18,65535
 4015270:	88001e26 	beq	r17,zero,40152ec <__multiply+0x160>
 4015274:	dd800117 	ldw	r22,4(sp)
 4015278:	dd400417 	ldw	r21,16(sp)
 401527c:	0027883a 	mov	r19,zero
 4015280:	ac800017 	ldw	r18,0(r21)
 4015284:	b4000017 	ldw	r16,0(r22)
 4015288:	880b883a 	mov	r5,r17
 401528c:	913fffcc 	andi	r4,r18,65535
 4015290:	400d7980 	call	400d798 <__mulsi3>
 4015294:	9008d43a 	srli	r4,r18,16
 4015298:	84bfffcc 	andi	r18,r16,65535
 401529c:	1485883a 	add	r2,r2,r18
 40152a0:	14e5883a 	add	r18,r2,r19
 40152a4:	8020d43a 	srli	r16,r16,16
 40152a8:	9026d43a 	srli	r19,r18,16
 40152ac:	880b883a 	mov	r5,r17
 40152b0:	400d7980 	call	400d798 <__mulsi3>
 40152b4:	1405883a 	add	r2,r2,r16
 40152b8:	14e1883a 	add	r16,r2,r19
 40152bc:	90ffffcc 	andi	r3,r18,65535
 40152c0:	8024943a 	slli	r18,r16,16
 40152c4:	ad400104 	addi	r21,r21,4
 40152c8:	b005883a 	mov	r2,r22
 40152cc:	90c6b03a 	or	r3,r18,r3
 40152d0:	b0c00015 	stw	r3,0(r22)
 40152d4:	8026d43a 	srli	r19,r16,16
 40152d8:	b5800104 	addi	r22,r22,4
 40152dc:	ad3fe836 	bltu	r21,r20,4015280 <__alt_mem_onchip_memory2_0+0xfc013fe0>
 40152e0:	d8c00017 	ldw	r3,0(sp)
 40152e4:	14c00115 	stw	r19,4(r2)
 40152e8:	1c800017 	ldw	r18,0(r3)
 40152ec:	9024d43a 	srli	r18,r18,16
 40152f0:	90002226 	beq	r18,zero,401537c <__multiply+0x1f0>
 40152f4:	d8c00117 	ldw	r3,4(sp)
 40152f8:	dd800417 	ldw	r22,16(sp)
 40152fc:	002f883a 	mov	r23,zero
 4015300:	1f000017 	ldw	fp,0(r3)
 4015304:	1823883a 	mov	r17,r3
 4015308:	182b883a 	mov	r21,r3
 401530c:	e021883a 	mov	r16,fp
 4015310:	00000106 	br	4015318 <__multiply+0x18c>
 4015314:	982b883a 	mov	r21,r19
 4015318:	b100000b 	ldhu	r4,0(r22)
 401531c:	8020d43a 	srli	r16,r16,16
 4015320:	900b883a 	mov	r5,r18
 4015324:	400d7980 	call	400d798 <__mulsi3>
 4015328:	1405883a 	add	r2,r2,r16
 401532c:	15ef883a 	add	r23,r2,r23
 4015330:	b804943a 	slli	r2,r23,16
 4015334:	e0ffffcc 	andi	r3,fp,65535
 4015338:	8c400104 	addi	r17,r17,4
 401533c:	10c6b03a 	or	r3,r2,r3
 4015340:	88ffff15 	stw	r3,-4(r17)
 4015344:	b5800104 	addi	r22,r22,4
 4015348:	b13fff17 	ldw	r4,-4(r22)
 401534c:	acc00104 	addi	r19,r21,4
 4015350:	900b883a 	mov	r5,r18
 4015354:	2008d43a 	srli	r4,r4,16
 4015358:	9c000017 	ldw	r16,0(r19)
 401535c:	400d7980 	call	400d798 <__mulsi3>
 4015360:	b806d43a 	srli	r3,r23,16
 4015364:	813fffcc 	andi	r4,r16,65535
 4015368:	1105883a 	add	r2,r2,r4
 401536c:	10f9883a 	add	fp,r2,r3
 4015370:	e02ed43a 	srli	r23,fp,16
 4015374:	b53fe736 	bltu	r22,r20,4015314 <__alt_mem_onchip_memory2_0+0xfc014074>
 4015378:	af000115 	stw	fp,4(r21)
 401537c:	d8c00017 	ldw	r3,0(sp)
 4015380:	d9000517 	ldw	r4,20(sp)
 4015384:	18c00104 	addi	r3,r3,4
 4015388:	d8c00015 	stw	r3,0(sp)
 401538c:	d8c00117 	ldw	r3,4(sp)
 4015390:	18c00104 	addi	r3,r3,4
 4015394:	d8c00115 	stw	r3,4(sp)
 4015398:	d8c00017 	ldw	r3,0(sp)
 401539c:	193fb136 	bltu	r3,r4,4015264 <__alt_mem_onchip_memory2_0+0xfc013fc4>
 40153a0:	d8c00217 	ldw	r3,8(sp)
 40153a4:	00c00c0e 	bge	zero,r3,40153d8 <__multiply+0x24c>
 40153a8:	d8c00317 	ldw	r3,12(sp)
 40153ac:	18bfff17 	ldw	r2,-4(r3)
 40153b0:	1d7fff04 	addi	r21,r3,-4
 40153b4:	10000326 	beq	r2,zero,40153c4 <__multiply+0x238>
 40153b8:	00000706 	br	40153d8 <__multiply+0x24c>
 40153bc:	a8800017 	ldw	r2,0(r21)
 40153c0:	1000051e 	bne	r2,zero,40153d8 <__multiply+0x24c>
 40153c4:	d8c00217 	ldw	r3,8(sp)
 40153c8:	ad7fff04 	addi	r21,r21,-4
 40153cc:	18ffffc4 	addi	r3,r3,-1
 40153d0:	d8c00215 	stw	r3,8(sp)
 40153d4:	183ff91e 	bne	r3,zero,40153bc <__alt_mem_onchip_memory2_0+0xfc01411c>
 40153d8:	d8c00617 	ldw	r3,24(sp)
 40153dc:	d9000217 	ldw	r4,8(sp)
 40153e0:	1805883a 	mov	r2,r3
 40153e4:	19000415 	stw	r4,16(r3)
 40153e8:	dfc01017 	ldw	ra,64(sp)
 40153ec:	df000f17 	ldw	fp,60(sp)
 40153f0:	ddc00e17 	ldw	r23,56(sp)
 40153f4:	dd800d17 	ldw	r22,52(sp)
 40153f8:	dd400c17 	ldw	r21,48(sp)
 40153fc:	dd000b17 	ldw	r20,44(sp)
 4015400:	dcc00a17 	ldw	r19,40(sp)
 4015404:	dc800917 	ldw	r18,36(sp)
 4015408:	dc400817 	ldw	r17,32(sp)
 401540c:	dc000717 	ldw	r16,28(sp)
 4015410:	dec01104 	addi	sp,sp,68
 4015414:	f800283a 	ret

04015418 <__pow5mult>:
 4015418:	defffa04 	addi	sp,sp,-24
 401541c:	dcc00315 	stw	r19,12(sp)
 4015420:	dc000015 	stw	r16,0(sp)
 4015424:	dfc00515 	stw	ra,20(sp)
 4015428:	dd000415 	stw	r20,16(sp)
 401542c:	dc800215 	stw	r18,8(sp)
 4015430:	dc400115 	stw	r17,4(sp)
 4015434:	308000cc 	andi	r2,r6,3
 4015438:	3021883a 	mov	r16,r6
 401543c:	2027883a 	mov	r19,r4
 4015440:	10002f1e 	bne	r2,zero,4015500 <__pow5mult+0xe8>
 4015444:	2825883a 	mov	r18,r5
 4015448:	8021d0ba 	srai	r16,r16,2
 401544c:	80001a26 	beq	r16,zero,40154b8 <__pow5mult+0xa0>
 4015450:	9c401217 	ldw	r17,72(r19)
 4015454:	8800061e 	bne	r17,zero,4015470 <__pow5mult+0x58>
 4015458:	00003406 	br	401552c <__pow5mult+0x114>
 401545c:	8021d07a 	srai	r16,r16,1
 4015460:	80001526 	beq	r16,zero,40154b8 <__pow5mult+0xa0>
 4015464:	88800017 	ldw	r2,0(r17)
 4015468:	10001c26 	beq	r2,zero,40154dc <__pow5mult+0xc4>
 401546c:	1023883a 	mov	r17,r2
 4015470:	8080004c 	andi	r2,r16,1
 4015474:	103ff926 	beq	r2,zero,401545c <__alt_mem_onchip_memory2_0+0xfc0141bc>
 4015478:	880d883a 	mov	r6,r17
 401547c:	900b883a 	mov	r5,r18
 4015480:	9809883a 	mov	r4,r19
 4015484:	401518c0 	call	401518c <__multiply>
 4015488:	90001b26 	beq	r18,zero,40154f8 <__pow5mult+0xe0>
 401548c:	91000117 	ldw	r4,4(r18)
 4015490:	98c01317 	ldw	r3,76(r19)
 4015494:	8021d07a 	srai	r16,r16,1
 4015498:	2109883a 	add	r4,r4,r4
 401549c:	2109883a 	add	r4,r4,r4
 40154a0:	1907883a 	add	r3,r3,r4
 40154a4:	19000017 	ldw	r4,0(r3)
 40154a8:	91000015 	stw	r4,0(r18)
 40154ac:	1c800015 	stw	r18,0(r3)
 40154b0:	1025883a 	mov	r18,r2
 40154b4:	803feb1e 	bne	r16,zero,4015464 <__alt_mem_onchip_memory2_0+0xfc0141c4>
 40154b8:	9005883a 	mov	r2,r18
 40154bc:	dfc00517 	ldw	ra,20(sp)
 40154c0:	dd000417 	ldw	r20,16(sp)
 40154c4:	dcc00317 	ldw	r19,12(sp)
 40154c8:	dc800217 	ldw	r18,8(sp)
 40154cc:	dc400117 	ldw	r17,4(sp)
 40154d0:	dc000017 	ldw	r16,0(sp)
 40154d4:	dec00604 	addi	sp,sp,24
 40154d8:	f800283a 	ret
 40154dc:	880d883a 	mov	r6,r17
 40154e0:	880b883a 	mov	r5,r17
 40154e4:	9809883a 	mov	r4,r19
 40154e8:	401518c0 	call	401518c <__multiply>
 40154ec:	88800015 	stw	r2,0(r17)
 40154f0:	10000015 	stw	zero,0(r2)
 40154f4:	003fdd06 	br	401546c <__alt_mem_onchip_memory2_0+0xfc0141cc>
 40154f8:	1025883a 	mov	r18,r2
 40154fc:	003fd706 	br	401545c <__alt_mem_onchip_memory2_0+0xfc0141bc>
 4015500:	10bfffc4 	addi	r2,r2,-1
 4015504:	1085883a 	add	r2,r2,r2
 4015508:	00c100b4 	movhi	r3,1026
 401550c:	18ddd404 	addi	r3,r3,30544
 4015510:	1085883a 	add	r2,r2,r2
 4015514:	1885883a 	add	r2,r3,r2
 4015518:	11800017 	ldw	r6,0(r2)
 401551c:	000f883a 	mov	r7,zero
 4015520:	4014dec0 	call	4014dec <__multadd>
 4015524:	1025883a 	mov	r18,r2
 4015528:	003fc706 	br	4015448 <__alt_mem_onchip_memory2_0+0xfc0141a8>
 401552c:	05000044 	movi	r20,1
 4015530:	a00b883a 	mov	r5,r20
 4015534:	9809883a 	mov	r4,r19
 4015538:	4014d1c0 	call	4014d1c <_Balloc>
 401553c:	1023883a 	mov	r17,r2
 4015540:	00809c44 	movi	r2,625
 4015544:	88800515 	stw	r2,20(r17)
 4015548:	8d000415 	stw	r20,16(r17)
 401554c:	9c401215 	stw	r17,72(r19)
 4015550:	88000015 	stw	zero,0(r17)
 4015554:	003fc606 	br	4015470 <__alt_mem_onchip_memory2_0+0xfc0141d0>

04015558 <__lshift>:
 4015558:	defff904 	addi	sp,sp,-28
 401555c:	dd400515 	stw	r21,20(sp)
 4015560:	dcc00315 	stw	r19,12(sp)
 4015564:	302bd17a 	srai	r21,r6,5
 4015568:	2cc00417 	ldw	r19,16(r5)
 401556c:	28800217 	ldw	r2,8(r5)
 4015570:	dd000415 	stw	r20,16(sp)
 4015574:	ace7883a 	add	r19,r21,r19
 4015578:	dc800215 	stw	r18,8(sp)
 401557c:	dc400115 	stw	r17,4(sp)
 4015580:	dc000015 	stw	r16,0(sp)
 4015584:	dfc00615 	stw	ra,24(sp)
 4015588:	9c000044 	addi	r16,r19,1
 401558c:	2823883a 	mov	r17,r5
 4015590:	3029883a 	mov	r20,r6
 4015594:	2025883a 	mov	r18,r4
 4015598:	29400117 	ldw	r5,4(r5)
 401559c:	1400030e 	bge	r2,r16,40155ac <__lshift+0x54>
 40155a0:	1085883a 	add	r2,r2,r2
 40155a4:	29400044 	addi	r5,r5,1
 40155a8:	143ffd16 	blt	r2,r16,40155a0 <__alt_mem_onchip_memory2_0+0xfc014300>
 40155ac:	9009883a 	mov	r4,r18
 40155b0:	4014d1c0 	call	4014d1c <_Balloc>
 40155b4:	10c00504 	addi	r3,r2,20
 40155b8:	0540070e 	bge	zero,r21,40155d8 <__lshift+0x80>
 40155bc:	ad6b883a 	add	r21,r21,r21
 40155c0:	ad6b883a 	add	r21,r21,r21
 40155c4:	1809883a 	mov	r4,r3
 40155c8:	1d47883a 	add	r3,r3,r21
 40155cc:	20000015 	stw	zero,0(r4)
 40155d0:	21000104 	addi	r4,r4,4
 40155d4:	193ffd1e 	bne	r3,r4,40155cc <__alt_mem_onchip_memory2_0+0xfc01432c>
 40155d8:	8a000417 	ldw	r8,16(r17)
 40155dc:	89000504 	addi	r4,r17,20
 40155e0:	a18007cc 	andi	r6,r20,31
 40155e4:	4211883a 	add	r8,r8,r8
 40155e8:	4211883a 	add	r8,r8,r8
 40155ec:	2211883a 	add	r8,r4,r8
 40155f0:	30002326 	beq	r6,zero,4015680 <__lshift+0x128>
 40155f4:	02400804 	movi	r9,32
 40155f8:	4993c83a 	sub	r9,r9,r6
 40155fc:	000b883a 	mov	r5,zero
 4015600:	21c00017 	ldw	r7,0(r4)
 4015604:	1815883a 	mov	r10,r3
 4015608:	18c00104 	addi	r3,r3,4
 401560c:	398e983a 	sll	r7,r7,r6
 4015610:	21000104 	addi	r4,r4,4
 4015614:	394ab03a 	or	r5,r7,r5
 4015618:	197fff15 	stw	r5,-4(r3)
 401561c:	217fff17 	ldw	r5,-4(r4)
 4015620:	2a4ad83a 	srl	r5,r5,r9
 4015624:	223ff636 	bltu	r4,r8,4015600 <__alt_mem_onchip_memory2_0+0xfc014360>
 4015628:	51400115 	stw	r5,4(r10)
 401562c:	28001a1e 	bne	r5,zero,4015698 <__lshift+0x140>
 4015630:	843fffc4 	addi	r16,r16,-1
 4015634:	14000415 	stw	r16,16(r2)
 4015638:	88000826 	beq	r17,zero,401565c <__lshift+0x104>
 401563c:	89000117 	ldw	r4,4(r17)
 4015640:	90c01317 	ldw	r3,76(r18)
 4015644:	2109883a 	add	r4,r4,r4
 4015648:	2109883a 	add	r4,r4,r4
 401564c:	1907883a 	add	r3,r3,r4
 4015650:	19000017 	ldw	r4,0(r3)
 4015654:	89000015 	stw	r4,0(r17)
 4015658:	1c400015 	stw	r17,0(r3)
 401565c:	dfc00617 	ldw	ra,24(sp)
 4015660:	dd400517 	ldw	r21,20(sp)
 4015664:	dd000417 	ldw	r20,16(sp)
 4015668:	dcc00317 	ldw	r19,12(sp)
 401566c:	dc800217 	ldw	r18,8(sp)
 4015670:	dc400117 	ldw	r17,4(sp)
 4015674:	dc000017 	ldw	r16,0(sp)
 4015678:	dec00704 	addi	sp,sp,28
 401567c:	f800283a 	ret
 4015680:	21400017 	ldw	r5,0(r4)
 4015684:	18c00104 	addi	r3,r3,4
 4015688:	21000104 	addi	r4,r4,4
 401568c:	197fff15 	stw	r5,-4(r3)
 4015690:	223ffb36 	bltu	r4,r8,4015680 <__alt_mem_onchip_memory2_0+0xfc0143e0>
 4015694:	003fe606 	br	4015630 <__alt_mem_onchip_memory2_0+0xfc014390>
 4015698:	9c000084 	addi	r16,r19,2
 401569c:	003fe406 	br	4015630 <__alt_mem_onchip_memory2_0+0xfc014390>

040156a0 <__mcmp>:
 40156a0:	20800417 	ldw	r2,16(r4)
 40156a4:	28c00417 	ldw	r3,16(r5)
 40156a8:	10c5c83a 	sub	r2,r2,r3
 40156ac:	1000111e 	bne	r2,zero,40156f4 <__mcmp+0x54>
 40156b0:	18c7883a 	add	r3,r3,r3
 40156b4:	18c7883a 	add	r3,r3,r3
 40156b8:	21000504 	addi	r4,r4,20
 40156bc:	29400504 	addi	r5,r5,20
 40156c0:	20c5883a 	add	r2,r4,r3
 40156c4:	28cb883a 	add	r5,r5,r3
 40156c8:	00000106 	br	40156d0 <__mcmp+0x30>
 40156cc:	20800a2e 	bgeu	r4,r2,40156f8 <__mcmp+0x58>
 40156d0:	10bfff04 	addi	r2,r2,-4
 40156d4:	297fff04 	addi	r5,r5,-4
 40156d8:	11800017 	ldw	r6,0(r2)
 40156dc:	28c00017 	ldw	r3,0(r5)
 40156e0:	30fffa26 	beq	r6,r3,40156cc <__alt_mem_onchip_memory2_0+0xfc01442c>
 40156e4:	30c00236 	bltu	r6,r3,40156f0 <__mcmp+0x50>
 40156e8:	00800044 	movi	r2,1
 40156ec:	f800283a 	ret
 40156f0:	00bfffc4 	movi	r2,-1
 40156f4:	f800283a 	ret
 40156f8:	0005883a 	mov	r2,zero
 40156fc:	f800283a 	ret

04015700 <__mdiff>:
 4015700:	28c00417 	ldw	r3,16(r5)
 4015704:	30800417 	ldw	r2,16(r6)
 4015708:	defffa04 	addi	sp,sp,-24
 401570c:	dcc00315 	stw	r19,12(sp)
 4015710:	dc800215 	stw	r18,8(sp)
 4015714:	dfc00515 	stw	ra,20(sp)
 4015718:	dd000415 	stw	r20,16(sp)
 401571c:	dc400115 	stw	r17,4(sp)
 4015720:	dc000015 	stw	r16,0(sp)
 4015724:	1887c83a 	sub	r3,r3,r2
 4015728:	2825883a 	mov	r18,r5
 401572c:	3027883a 	mov	r19,r6
 4015730:	1800141e 	bne	r3,zero,4015784 <__mdiff+0x84>
 4015734:	1085883a 	add	r2,r2,r2
 4015738:	1085883a 	add	r2,r2,r2
 401573c:	2a000504 	addi	r8,r5,20
 4015740:	34000504 	addi	r16,r6,20
 4015744:	4087883a 	add	r3,r8,r2
 4015748:	8085883a 	add	r2,r16,r2
 401574c:	00000106 	br	4015754 <__mdiff+0x54>
 4015750:	40c0592e 	bgeu	r8,r3,40158b8 <__mdiff+0x1b8>
 4015754:	18ffff04 	addi	r3,r3,-4
 4015758:	10bfff04 	addi	r2,r2,-4
 401575c:	19c00017 	ldw	r7,0(r3)
 4015760:	11400017 	ldw	r5,0(r2)
 4015764:	397ffa26 	beq	r7,r5,4015750 <__alt_mem_onchip_memory2_0+0xfc0144b0>
 4015768:	3940592e 	bgeu	r7,r5,40158d0 <__mdiff+0x1d0>
 401576c:	9005883a 	mov	r2,r18
 4015770:	4023883a 	mov	r17,r8
 4015774:	9825883a 	mov	r18,r19
 4015778:	05000044 	movi	r20,1
 401577c:	1027883a 	mov	r19,r2
 4015780:	00000406 	br	4015794 <__mdiff+0x94>
 4015784:	18005616 	blt	r3,zero,40158e0 <__mdiff+0x1e0>
 4015788:	34400504 	addi	r17,r6,20
 401578c:	2c000504 	addi	r16,r5,20
 4015790:	0029883a 	mov	r20,zero
 4015794:	91400117 	ldw	r5,4(r18)
 4015798:	4014d1c0 	call	4014d1c <_Balloc>
 401579c:	92400417 	ldw	r9,16(r18)
 40157a0:	9b000417 	ldw	r12,16(r19)
 40157a4:	12c00504 	addi	r11,r2,20
 40157a8:	4a51883a 	add	r8,r9,r9
 40157ac:	6319883a 	add	r12,r12,r12
 40157b0:	4211883a 	add	r8,r8,r8
 40157b4:	6319883a 	add	r12,r12,r12
 40157b8:	15000315 	stw	r20,12(r2)
 40157bc:	8211883a 	add	r8,r16,r8
 40157c0:	8b19883a 	add	r12,r17,r12
 40157c4:	0007883a 	mov	r3,zero
 40157c8:	81400017 	ldw	r5,0(r16)
 40157cc:	89c00017 	ldw	r7,0(r17)
 40157d0:	59800104 	addi	r6,r11,4
 40157d4:	293fffcc 	andi	r4,r5,65535
 40157d8:	20c7883a 	add	r3,r4,r3
 40157dc:	393fffcc 	andi	r4,r7,65535
 40157e0:	1909c83a 	sub	r4,r3,r4
 40157e4:	280ad43a 	srli	r5,r5,16
 40157e8:	380ed43a 	srli	r7,r7,16
 40157ec:	2007d43a 	srai	r3,r4,16
 40157f0:	213fffcc 	andi	r4,r4,65535
 40157f4:	29cbc83a 	sub	r5,r5,r7
 40157f8:	28c7883a 	add	r3,r5,r3
 40157fc:	180a943a 	slli	r5,r3,16
 4015800:	8c400104 	addi	r17,r17,4
 4015804:	84000104 	addi	r16,r16,4
 4015808:	2908b03a 	or	r4,r5,r4
 401580c:	59000015 	stw	r4,0(r11)
 4015810:	1807d43a 	srai	r3,r3,16
 4015814:	3015883a 	mov	r10,r6
 4015818:	3017883a 	mov	r11,r6
 401581c:	8b3fea36 	bltu	r17,r12,40157c8 <__alt_mem_onchip_memory2_0+0xfc014528>
 4015820:	8200162e 	bgeu	r16,r8,401587c <__mdiff+0x17c>
 4015824:	8017883a 	mov	r11,r16
 4015828:	59400017 	ldw	r5,0(r11)
 401582c:	31800104 	addi	r6,r6,4
 4015830:	5ac00104 	addi	r11,r11,4
 4015834:	293fffcc 	andi	r4,r5,65535
 4015838:	20c7883a 	add	r3,r4,r3
 401583c:	280ed43a 	srli	r7,r5,16
 4015840:	180bd43a 	srai	r5,r3,16
 4015844:	193fffcc 	andi	r4,r3,65535
 4015848:	3947883a 	add	r3,r7,r5
 401584c:	180a943a 	slli	r5,r3,16
 4015850:	1807d43a 	srai	r3,r3,16
 4015854:	2908b03a 	or	r4,r5,r4
 4015858:	313fff15 	stw	r4,-4(r6)
 401585c:	5a3ff236 	bltu	r11,r8,4015828 <__alt_mem_onchip_memory2_0+0xfc014588>
 4015860:	0406303a 	nor	r3,zero,r16
 4015864:	1a07883a 	add	r3,r3,r8
 4015868:	1806d0ba 	srli	r3,r3,2
 401586c:	18c00044 	addi	r3,r3,1
 4015870:	18c7883a 	add	r3,r3,r3
 4015874:	18c7883a 	add	r3,r3,r3
 4015878:	50d5883a 	add	r10,r10,r3
 401587c:	50ffff04 	addi	r3,r10,-4
 4015880:	2000041e 	bne	r4,zero,4015894 <__mdiff+0x194>
 4015884:	18ffff04 	addi	r3,r3,-4
 4015888:	19000017 	ldw	r4,0(r3)
 401588c:	4a7fffc4 	addi	r9,r9,-1
 4015890:	203ffc26 	beq	r4,zero,4015884 <__alt_mem_onchip_memory2_0+0xfc0145e4>
 4015894:	12400415 	stw	r9,16(r2)
 4015898:	dfc00517 	ldw	ra,20(sp)
 401589c:	dd000417 	ldw	r20,16(sp)
 40158a0:	dcc00317 	ldw	r19,12(sp)
 40158a4:	dc800217 	ldw	r18,8(sp)
 40158a8:	dc400117 	ldw	r17,4(sp)
 40158ac:	dc000017 	ldw	r16,0(sp)
 40158b0:	dec00604 	addi	sp,sp,24
 40158b4:	f800283a 	ret
 40158b8:	000b883a 	mov	r5,zero
 40158bc:	4014d1c0 	call	4014d1c <_Balloc>
 40158c0:	00c00044 	movi	r3,1
 40158c4:	10c00415 	stw	r3,16(r2)
 40158c8:	10000515 	stw	zero,20(r2)
 40158cc:	003ff206 	br	4015898 <__alt_mem_onchip_memory2_0+0xfc0145f8>
 40158d0:	8023883a 	mov	r17,r16
 40158d4:	0029883a 	mov	r20,zero
 40158d8:	4021883a 	mov	r16,r8
 40158dc:	003fad06 	br	4015794 <__alt_mem_onchip_memory2_0+0xfc0144f4>
 40158e0:	9005883a 	mov	r2,r18
 40158e4:	94400504 	addi	r17,r18,20
 40158e8:	9c000504 	addi	r16,r19,20
 40158ec:	9825883a 	mov	r18,r19
 40158f0:	05000044 	movi	r20,1
 40158f4:	1027883a 	mov	r19,r2
 40158f8:	003fa606 	br	4015794 <__alt_mem_onchip_memory2_0+0xfc0144f4>

040158fc <__ulp>:
 40158fc:	295ffc2c 	andhi	r5,r5,32752
 4015900:	00bf3034 	movhi	r2,64704
 4015904:	2887883a 	add	r3,r5,r2
 4015908:	00c0020e 	bge	zero,r3,4015914 <__ulp+0x18>
 401590c:	0005883a 	mov	r2,zero
 4015910:	f800283a 	ret
 4015914:	00c7c83a 	sub	r3,zero,r3
 4015918:	1807d53a 	srai	r3,r3,20
 401591c:	008004c4 	movi	r2,19
 4015920:	10c00b0e 	bge	r2,r3,4015950 <__ulp+0x54>
 4015924:	18bffb04 	addi	r2,r3,-20
 4015928:	01000784 	movi	r4,30
 401592c:	0007883a 	mov	r3,zero
 4015930:	20800516 	blt	r4,r2,4015948 <__ulp+0x4c>
 4015934:	010007c4 	movi	r4,31
 4015938:	2089c83a 	sub	r4,r4,r2
 401593c:	00800044 	movi	r2,1
 4015940:	1104983a 	sll	r2,r2,r4
 4015944:	f800283a 	ret
 4015948:	00800044 	movi	r2,1
 401594c:	f800283a 	ret
 4015950:	01400234 	movhi	r5,8
 4015954:	28c7d83a 	sra	r3,r5,r3
 4015958:	0005883a 	mov	r2,zero
 401595c:	f800283a 	ret

04015960 <__b2d>:
 4015960:	defffa04 	addi	sp,sp,-24
 4015964:	dc000015 	stw	r16,0(sp)
 4015968:	24000417 	ldw	r16,16(r4)
 401596c:	dc400115 	stw	r17,4(sp)
 4015970:	24400504 	addi	r17,r4,20
 4015974:	8421883a 	add	r16,r16,r16
 4015978:	8421883a 	add	r16,r16,r16
 401597c:	8c21883a 	add	r16,r17,r16
 4015980:	dc800215 	stw	r18,8(sp)
 4015984:	84bfff17 	ldw	r18,-4(r16)
 4015988:	dd000415 	stw	r20,16(sp)
 401598c:	dcc00315 	stw	r19,12(sp)
 4015990:	9009883a 	mov	r4,r18
 4015994:	2829883a 	mov	r20,r5
 4015998:	dfc00515 	stw	ra,20(sp)
 401599c:	40150380 	call	4015038 <__hi0bits>
 40159a0:	00c00804 	movi	r3,32
 40159a4:	1889c83a 	sub	r4,r3,r2
 40159a8:	a1000015 	stw	r4,0(r20)
 40159ac:	01000284 	movi	r4,10
 40159b0:	84ffff04 	addi	r19,r16,-4
 40159b4:	20801216 	blt	r4,r2,4015a00 <__b2d+0xa0>
 40159b8:	018002c4 	movi	r6,11
 40159bc:	308dc83a 	sub	r6,r6,r2
 40159c0:	9186d83a 	srl	r3,r18,r6
 40159c4:	18cffc34 	orhi	r3,r3,16368
 40159c8:	8cc0212e 	bgeu	r17,r19,4015a50 <__b2d+0xf0>
 40159cc:	813ffe17 	ldw	r4,-8(r16)
 40159d0:	218cd83a 	srl	r6,r4,r6
 40159d4:	10800544 	addi	r2,r2,21
 40159d8:	9084983a 	sll	r2,r18,r2
 40159dc:	1184b03a 	or	r2,r2,r6
 40159e0:	dfc00517 	ldw	ra,20(sp)
 40159e4:	dd000417 	ldw	r20,16(sp)
 40159e8:	dcc00317 	ldw	r19,12(sp)
 40159ec:	dc800217 	ldw	r18,8(sp)
 40159f0:	dc400117 	ldw	r17,4(sp)
 40159f4:	dc000017 	ldw	r16,0(sp)
 40159f8:	dec00604 	addi	sp,sp,24
 40159fc:	f800283a 	ret
 4015a00:	8cc00f2e 	bgeu	r17,r19,4015a40 <__b2d+0xe0>
 4015a04:	117ffd44 	addi	r5,r2,-11
 4015a08:	80bffe17 	ldw	r2,-8(r16)
 4015a0c:	28000e26 	beq	r5,zero,4015a48 <__b2d+0xe8>
 4015a10:	1949c83a 	sub	r4,r3,r5
 4015a14:	9164983a 	sll	r18,r18,r5
 4015a18:	1106d83a 	srl	r3,r2,r4
 4015a1c:	81bffe04 	addi	r6,r16,-8
 4015a20:	948ffc34 	orhi	r18,r18,16368
 4015a24:	90c6b03a 	or	r3,r18,r3
 4015a28:	89800e2e 	bgeu	r17,r6,4015a64 <__b2d+0x104>
 4015a2c:	81bffd17 	ldw	r6,-12(r16)
 4015a30:	1144983a 	sll	r2,r2,r5
 4015a34:	310ad83a 	srl	r5,r6,r4
 4015a38:	2884b03a 	or	r2,r5,r2
 4015a3c:	003fe806 	br	40159e0 <__alt_mem_onchip_memory2_0+0xfc014740>
 4015a40:	10bffd44 	addi	r2,r2,-11
 4015a44:	1000041e 	bne	r2,zero,4015a58 <__b2d+0xf8>
 4015a48:	90cffc34 	orhi	r3,r18,16368
 4015a4c:	003fe406 	br	40159e0 <__alt_mem_onchip_memory2_0+0xfc014740>
 4015a50:	000d883a 	mov	r6,zero
 4015a54:	003fdf06 	br	40159d4 <__alt_mem_onchip_memory2_0+0xfc014734>
 4015a58:	90a4983a 	sll	r18,r18,r2
 4015a5c:	0005883a 	mov	r2,zero
 4015a60:	003ff906 	br	4015a48 <__alt_mem_onchip_memory2_0+0xfc0147a8>
 4015a64:	1144983a 	sll	r2,r2,r5
 4015a68:	003fdd06 	br	40159e0 <__alt_mem_onchip_memory2_0+0xfc014740>

04015a6c <__d2b>:
 4015a6c:	defff804 	addi	sp,sp,-32
 4015a70:	dc000215 	stw	r16,8(sp)
 4015a74:	3021883a 	mov	r16,r6
 4015a78:	dc400315 	stw	r17,12(sp)
 4015a7c:	8022907a 	slli	r17,r16,1
 4015a80:	dd000615 	stw	r20,24(sp)
 4015a84:	2829883a 	mov	r20,r5
 4015a88:	01400044 	movi	r5,1
 4015a8c:	dcc00515 	stw	r19,20(sp)
 4015a90:	dc800415 	stw	r18,16(sp)
 4015a94:	dfc00715 	stw	ra,28(sp)
 4015a98:	3825883a 	mov	r18,r7
 4015a9c:	8822d57a 	srli	r17,r17,21
 4015aa0:	4014d1c0 	call	4014d1c <_Balloc>
 4015aa4:	1027883a 	mov	r19,r2
 4015aa8:	00800434 	movhi	r2,16
 4015aac:	10bfffc4 	addi	r2,r2,-1
 4015ab0:	808c703a 	and	r6,r16,r2
 4015ab4:	88000126 	beq	r17,zero,4015abc <__d2b+0x50>
 4015ab8:	31800434 	orhi	r6,r6,16
 4015abc:	d9800015 	stw	r6,0(sp)
 4015ac0:	a0002426 	beq	r20,zero,4015b54 <__d2b+0xe8>
 4015ac4:	d9000104 	addi	r4,sp,4
 4015ac8:	dd000115 	stw	r20,4(sp)
 4015acc:	40150a00 	call	40150a0 <__lo0bits>
 4015ad0:	d8c00017 	ldw	r3,0(sp)
 4015ad4:	10002f1e 	bne	r2,zero,4015b94 <__d2b+0x128>
 4015ad8:	d9000117 	ldw	r4,4(sp)
 4015adc:	99000515 	stw	r4,20(r19)
 4015ae0:	1821003a 	cmpeq	r16,r3,zero
 4015ae4:	01000084 	movi	r4,2
 4015ae8:	2421c83a 	sub	r16,r4,r16
 4015aec:	98c00615 	stw	r3,24(r19)
 4015af0:	9c000415 	stw	r16,16(r19)
 4015af4:	88001f1e 	bne	r17,zero,4015b74 <__d2b+0x108>
 4015af8:	10bef384 	addi	r2,r2,-1074
 4015afc:	90800015 	stw	r2,0(r18)
 4015b00:	00900034 	movhi	r2,16384
 4015b04:	10bfffc4 	addi	r2,r2,-1
 4015b08:	8085883a 	add	r2,r16,r2
 4015b0c:	1085883a 	add	r2,r2,r2
 4015b10:	1085883a 	add	r2,r2,r2
 4015b14:	9885883a 	add	r2,r19,r2
 4015b18:	11000517 	ldw	r4,20(r2)
 4015b1c:	8020917a 	slli	r16,r16,5
 4015b20:	40150380 	call	4015038 <__hi0bits>
 4015b24:	d8c00817 	ldw	r3,32(sp)
 4015b28:	8085c83a 	sub	r2,r16,r2
 4015b2c:	18800015 	stw	r2,0(r3)
 4015b30:	9805883a 	mov	r2,r19
 4015b34:	dfc00717 	ldw	ra,28(sp)
 4015b38:	dd000617 	ldw	r20,24(sp)
 4015b3c:	dcc00517 	ldw	r19,20(sp)
 4015b40:	dc800417 	ldw	r18,16(sp)
 4015b44:	dc400317 	ldw	r17,12(sp)
 4015b48:	dc000217 	ldw	r16,8(sp)
 4015b4c:	dec00804 	addi	sp,sp,32
 4015b50:	f800283a 	ret
 4015b54:	d809883a 	mov	r4,sp
 4015b58:	40150a00 	call	40150a0 <__lo0bits>
 4015b5c:	d8c00017 	ldw	r3,0(sp)
 4015b60:	04000044 	movi	r16,1
 4015b64:	9c000415 	stw	r16,16(r19)
 4015b68:	98c00515 	stw	r3,20(r19)
 4015b6c:	10800804 	addi	r2,r2,32
 4015b70:	883fe126 	beq	r17,zero,4015af8 <__alt_mem_onchip_memory2_0+0xfc014858>
 4015b74:	00c00d44 	movi	r3,53
 4015b78:	8c7ef344 	addi	r17,r17,-1075
 4015b7c:	88a3883a 	add	r17,r17,r2
 4015b80:	1885c83a 	sub	r2,r3,r2
 4015b84:	d8c00817 	ldw	r3,32(sp)
 4015b88:	94400015 	stw	r17,0(r18)
 4015b8c:	18800015 	stw	r2,0(r3)
 4015b90:	003fe706 	br	4015b30 <__alt_mem_onchip_memory2_0+0xfc014890>
 4015b94:	01000804 	movi	r4,32
 4015b98:	2089c83a 	sub	r4,r4,r2
 4015b9c:	1908983a 	sll	r4,r3,r4
 4015ba0:	d9400117 	ldw	r5,4(sp)
 4015ba4:	1886d83a 	srl	r3,r3,r2
 4015ba8:	2148b03a 	or	r4,r4,r5
 4015bac:	99000515 	stw	r4,20(r19)
 4015bb0:	d8c00015 	stw	r3,0(sp)
 4015bb4:	003fca06 	br	4015ae0 <__alt_mem_onchip_memory2_0+0xfc014840>

04015bb8 <__ratio>:
 4015bb8:	defff904 	addi	sp,sp,-28
 4015bbc:	dc400315 	stw	r17,12(sp)
 4015bc0:	2823883a 	mov	r17,r5
 4015bc4:	d9400104 	addi	r5,sp,4
 4015bc8:	dfc00615 	stw	ra,24(sp)
 4015bcc:	dcc00515 	stw	r19,20(sp)
 4015bd0:	dc800415 	stw	r18,16(sp)
 4015bd4:	2027883a 	mov	r19,r4
 4015bd8:	dc000215 	stw	r16,8(sp)
 4015bdc:	40159600 	call	4015960 <__b2d>
 4015be0:	d80b883a 	mov	r5,sp
 4015be4:	8809883a 	mov	r4,r17
 4015be8:	1025883a 	mov	r18,r2
 4015bec:	1821883a 	mov	r16,r3
 4015bf0:	40159600 	call	4015960 <__b2d>
 4015bf4:	8a000417 	ldw	r8,16(r17)
 4015bf8:	99000417 	ldw	r4,16(r19)
 4015bfc:	d9400117 	ldw	r5,4(sp)
 4015c00:	2209c83a 	sub	r4,r4,r8
 4015c04:	2010917a 	slli	r8,r4,5
 4015c08:	d9000017 	ldw	r4,0(sp)
 4015c0c:	2909c83a 	sub	r4,r5,r4
 4015c10:	4109883a 	add	r4,r8,r4
 4015c14:	01000e0e 	bge	zero,r4,4015c50 <__ratio+0x98>
 4015c18:	2008953a 	slli	r4,r4,20
 4015c1c:	2421883a 	add	r16,r4,r16
 4015c20:	100d883a 	mov	r6,r2
 4015c24:	180f883a 	mov	r7,r3
 4015c28:	9009883a 	mov	r4,r18
 4015c2c:	800b883a 	mov	r5,r16
 4015c30:	4019b000 	call	4019b00 <__divdf3>
 4015c34:	dfc00617 	ldw	ra,24(sp)
 4015c38:	dcc00517 	ldw	r19,20(sp)
 4015c3c:	dc800417 	ldw	r18,16(sp)
 4015c40:	dc400317 	ldw	r17,12(sp)
 4015c44:	dc000217 	ldw	r16,8(sp)
 4015c48:	dec00704 	addi	sp,sp,28
 4015c4c:	f800283a 	ret
 4015c50:	2008953a 	slli	r4,r4,20
 4015c54:	1907c83a 	sub	r3,r3,r4
 4015c58:	003ff106 	br	4015c20 <__alt_mem_onchip_memory2_0+0xfc014980>

04015c5c <_mprec_log10>:
 4015c5c:	defffe04 	addi	sp,sp,-8
 4015c60:	dc000015 	stw	r16,0(sp)
 4015c64:	dfc00115 	stw	ra,4(sp)
 4015c68:	008005c4 	movi	r2,23
 4015c6c:	2021883a 	mov	r16,r4
 4015c70:	11000d0e 	bge	r2,r4,4015ca8 <_mprec_log10+0x4c>
 4015c74:	0005883a 	mov	r2,zero
 4015c78:	00cffc34 	movhi	r3,16368
 4015c7c:	843fffc4 	addi	r16,r16,-1
 4015c80:	000d883a 	mov	r6,zero
 4015c84:	01d00934 	movhi	r7,16420
 4015c88:	1009883a 	mov	r4,r2
 4015c8c:	180b883a 	mov	r5,r3
 4015c90:	401a7280 	call	401a728 <__muldf3>
 4015c94:	803ff91e 	bne	r16,zero,4015c7c <__alt_mem_onchip_memory2_0+0xfc0149dc>
 4015c98:	dfc00117 	ldw	ra,4(sp)
 4015c9c:	dc000017 	ldw	r16,0(sp)
 4015ca0:	dec00204 	addi	sp,sp,8
 4015ca4:	f800283a 	ret
 4015ca8:	202090fa 	slli	r16,r4,3
 4015cac:	008100b4 	movhi	r2,1026
 4015cb0:	109deb04 	addi	r2,r2,30636
 4015cb4:	1421883a 	add	r16,r2,r16
 4015cb8:	80800017 	ldw	r2,0(r16)
 4015cbc:	80c00117 	ldw	r3,4(r16)
 4015cc0:	dfc00117 	ldw	ra,4(sp)
 4015cc4:	dc000017 	ldw	r16,0(sp)
 4015cc8:	dec00204 	addi	sp,sp,8
 4015ccc:	f800283a 	ret

04015cd0 <__copybits>:
 4015cd0:	297fffc4 	addi	r5,r5,-1
 4015cd4:	280fd17a 	srai	r7,r5,5
 4015cd8:	30c00417 	ldw	r3,16(r6)
 4015cdc:	30800504 	addi	r2,r6,20
 4015ce0:	39c00044 	addi	r7,r7,1
 4015ce4:	18c7883a 	add	r3,r3,r3
 4015ce8:	39cf883a 	add	r7,r7,r7
 4015cec:	18c7883a 	add	r3,r3,r3
 4015cf0:	39cf883a 	add	r7,r7,r7
 4015cf4:	10c7883a 	add	r3,r2,r3
 4015cf8:	21cf883a 	add	r7,r4,r7
 4015cfc:	10c00d2e 	bgeu	r2,r3,4015d34 <__copybits+0x64>
 4015d00:	200b883a 	mov	r5,r4
 4015d04:	12000017 	ldw	r8,0(r2)
 4015d08:	29400104 	addi	r5,r5,4
 4015d0c:	10800104 	addi	r2,r2,4
 4015d10:	2a3fff15 	stw	r8,-4(r5)
 4015d14:	10fffb36 	bltu	r2,r3,4015d04 <__alt_mem_onchip_memory2_0+0xfc014a64>
 4015d18:	1985c83a 	sub	r2,r3,r6
 4015d1c:	10bffac4 	addi	r2,r2,-21
 4015d20:	1004d0ba 	srli	r2,r2,2
 4015d24:	10800044 	addi	r2,r2,1
 4015d28:	1085883a 	add	r2,r2,r2
 4015d2c:	1085883a 	add	r2,r2,r2
 4015d30:	2089883a 	add	r4,r4,r2
 4015d34:	21c0032e 	bgeu	r4,r7,4015d44 <__copybits+0x74>
 4015d38:	20000015 	stw	zero,0(r4)
 4015d3c:	21000104 	addi	r4,r4,4
 4015d40:	21fffd36 	bltu	r4,r7,4015d38 <__alt_mem_onchip_memory2_0+0xfc014a98>
 4015d44:	f800283a 	ret

04015d48 <__any_on>:
 4015d48:	20c00417 	ldw	r3,16(r4)
 4015d4c:	2805d17a 	srai	r2,r5,5
 4015d50:	21000504 	addi	r4,r4,20
 4015d54:	18800d0e 	bge	r3,r2,4015d8c <__any_on+0x44>
 4015d58:	18c7883a 	add	r3,r3,r3
 4015d5c:	18c7883a 	add	r3,r3,r3
 4015d60:	20c7883a 	add	r3,r4,r3
 4015d64:	20c0192e 	bgeu	r4,r3,4015dcc <__any_on+0x84>
 4015d68:	18bfff17 	ldw	r2,-4(r3)
 4015d6c:	18ffff04 	addi	r3,r3,-4
 4015d70:	1000041e 	bne	r2,zero,4015d84 <__any_on+0x3c>
 4015d74:	20c0142e 	bgeu	r4,r3,4015dc8 <__any_on+0x80>
 4015d78:	18ffff04 	addi	r3,r3,-4
 4015d7c:	19400017 	ldw	r5,0(r3)
 4015d80:	283ffc26 	beq	r5,zero,4015d74 <__alt_mem_onchip_memory2_0+0xfc014ad4>
 4015d84:	00800044 	movi	r2,1
 4015d88:	f800283a 	ret
 4015d8c:	10c00a0e 	bge	r2,r3,4015db8 <__any_on+0x70>
 4015d90:	1085883a 	add	r2,r2,r2
 4015d94:	1085883a 	add	r2,r2,r2
 4015d98:	294007cc 	andi	r5,r5,31
 4015d9c:	2087883a 	add	r3,r4,r2
 4015da0:	283ff026 	beq	r5,zero,4015d64 <__alt_mem_onchip_memory2_0+0xfc014ac4>
 4015da4:	19800017 	ldw	r6,0(r3)
 4015da8:	3144d83a 	srl	r2,r6,r5
 4015dac:	114a983a 	sll	r5,r2,r5
 4015db0:	317ff41e 	bne	r6,r5,4015d84 <__alt_mem_onchip_memory2_0+0xfc014ae4>
 4015db4:	003feb06 	br	4015d64 <__alt_mem_onchip_memory2_0+0xfc014ac4>
 4015db8:	1085883a 	add	r2,r2,r2
 4015dbc:	1085883a 	add	r2,r2,r2
 4015dc0:	2087883a 	add	r3,r4,r2
 4015dc4:	003fe706 	br	4015d64 <__alt_mem_onchip_memory2_0+0xfc014ac4>
 4015dc8:	f800283a 	ret
 4015dcc:	0005883a 	mov	r2,zero
 4015dd0:	f800283a 	ret

04015dd4 <_putc_r>:
 4015dd4:	defffc04 	addi	sp,sp,-16
 4015dd8:	dc000215 	stw	r16,8(sp)
 4015ddc:	dfc00315 	stw	ra,12(sp)
 4015de0:	2021883a 	mov	r16,r4
 4015de4:	20000226 	beq	r4,zero,4015df0 <_putc_r+0x1c>
 4015de8:	20800e17 	ldw	r2,56(r4)
 4015dec:	10001b26 	beq	r2,zero,4015e5c <_putc_r+0x88>
 4015df0:	30800217 	ldw	r2,8(r6)
 4015df4:	10bfffc4 	addi	r2,r2,-1
 4015df8:	30800215 	stw	r2,8(r6)
 4015dfc:	10000a16 	blt	r2,zero,4015e28 <_putc_r+0x54>
 4015e00:	30800017 	ldw	r2,0(r6)
 4015e04:	11400005 	stb	r5,0(r2)
 4015e08:	30800017 	ldw	r2,0(r6)
 4015e0c:	10c00044 	addi	r3,r2,1
 4015e10:	30c00015 	stw	r3,0(r6)
 4015e14:	10800003 	ldbu	r2,0(r2)
 4015e18:	dfc00317 	ldw	ra,12(sp)
 4015e1c:	dc000217 	ldw	r16,8(sp)
 4015e20:	dec00404 	addi	sp,sp,16
 4015e24:	f800283a 	ret
 4015e28:	30c00617 	ldw	r3,24(r6)
 4015e2c:	10c00616 	blt	r2,r3,4015e48 <_putc_r+0x74>
 4015e30:	30800017 	ldw	r2,0(r6)
 4015e34:	00c00284 	movi	r3,10
 4015e38:	11400005 	stb	r5,0(r2)
 4015e3c:	30800017 	ldw	r2,0(r6)
 4015e40:	11400003 	ldbu	r5,0(r2)
 4015e44:	28fff11e 	bne	r5,r3,4015e0c <__alt_mem_onchip_memory2_0+0xfc014b6c>
 4015e48:	8009883a 	mov	r4,r16
 4015e4c:	dfc00317 	ldw	ra,12(sp)
 4015e50:	dc000217 	ldw	r16,8(sp)
 4015e54:	dec00404 	addi	sp,sp,16
 4015e58:	4017d481 	jmpi	4017d48 <__swbuf_r>
 4015e5c:	d9400015 	stw	r5,0(sp)
 4015e60:	d9800115 	stw	r6,4(sp)
 4015e64:	4013d700 	call	4013d70 <__sinit>
 4015e68:	d9800117 	ldw	r6,4(sp)
 4015e6c:	d9400017 	ldw	r5,0(sp)
 4015e70:	003fdf06 	br	4015df0 <__alt_mem_onchip_memory2_0+0xfc014b50>

04015e74 <putc>:
 4015e74:	008100f4 	movhi	r2,1027
 4015e78:	defffc04 	addi	sp,sp,-16
 4015e7c:	10aaa304 	addi	r2,r2,-21876
 4015e80:	dc000115 	stw	r16,4(sp)
 4015e84:	14000017 	ldw	r16,0(r2)
 4015e88:	dc400215 	stw	r17,8(sp)
 4015e8c:	dfc00315 	stw	ra,12(sp)
 4015e90:	2023883a 	mov	r17,r4
 4015e94:	80000226 	beq	r16,zero,4015ea0 <putc+0x2c>
 4015e98:	80800e17 	ldw	r2,56(r16)
 4015e9c:	10001a26 	beq	r2,zero,4015f08 <putc+0x94>
 4015ea0:	28800217 	ldw	r2,8(r5)
 4015ea4:	10bfffc4 	addi	r2,r2,-1
 4015ea8:	28800215 	stw	r2,8(r5)
 4015eac:	10000b16 	blt	r2,zero,4015edc <putc+0x68>
 4015eb0:	28800017 	ldw	r2,0(r5)
 4015eb4:	14400005 	stb	r17,0(r2)
 4015eb8:	28800017 	ldw	r2,0(r5)
 4015ebc:	10c00044 	addi	r3,r2,1
 4015ec0:	28c00015 	stw	r3,0(r5)
 4015ec4:	10800003 	ldbu	r2,0(r2)
 4015ec8:	dfc00317 	ldw	ra,12(sp)
 4015ecc:	dc400217 	ldw	r17,8(sp)
 4015ed0:	dc000117 	ldw	r16,4(sp)
 4015ed4:	dec00404 	addi	sp,sp,16
 4015ed8:	f800283a 	ret
 4015edc:	28c00617 	ldw	r3,24(r5)
 4015ee0:	10c00e16 	blt	r2,r3,4015f1c <putc+0xa8>
 4015ee4:	28800017 	ldw	r2,0(r5)
 4015ee8:	01000284 	movi	r4,10
 4015eec:	14400005 	stb	r17,0(r2)
 4015ef0:	28800017 	ldw	r2,0(r5)
 4015ef4:	10c00003 	ldbu	r3,0(r2)
 4015ef8:	193ff01e 	bne	r3,r4,4015ebc <__alt_mem_onchip_memory2_0+0xfc014c1c>
 4015efc:	280d883a 	mov	r6,r5
 4015f00:	180b883a 	mov	r5,r3
 4015f04:	00000706 	br	4015f24 <putc+0xb0>
 4015f08:	8009883a 	mov	r4,r16
 4015f0c:	d9400015 	stw	r5,0(sp)
 4015f10:	4013d700 	call	4013d70 <__sinit>
 4015f14:	d9400017 	ldw	r5,0(sp)
 4015f18:	003fe106 	br	4015ea0 <__alt_mem_onchip_memory2_0+0xfc014c00>
 4015f1c:	280d883a 	mov	r6,r5
 4015f20:	880b883a 	mov	r5,r17
 4015f24:	8009883a 	mov	r4,r16
 4015f28:	dfc00317 	ldw	ra,12(sp)
 4015f2c:	dc400217 	ldw	r17,8(sp)
 4015f30:	dc000117 	ldw	r16,4(sp)
 4015f34:	dec00404 	addi	sp,sp,16
 4015f38:	4017d481 	jmpi	4017d48 <__swbuf_r>

04015f3c <_realloc_r>:
 4015f3c:	defff604 	addi	sp,sp,-40
 4015f40:	dc800215 	stw	r18,8(sp)
 4015f44:	dfc00915 	stw	ra,36(sp)
 4015f48:	df000815 	stw	fp,32(sp)
 4015f4c:	ddc00715 	stw	r23,28(sp)
 4015f50:	dd800615 	stw	r22,24(sp)
 4015f54:	dd400515 	stw	r21,20(sp)
 4015f58:	dd000415 	stw	r20,16(sp)
 4015f5c:	dcc00315 	stw	r19,12(sp)
 4015f60:	dc400115 	stw	r17,4(sp)
 4015f64:	dc000015 	stw	r16,0(sp)
 4015f68:	3025883a 	mov	r18,r6
 4015f6c:	2800b726 	beq	r5,zero,401624c <_realloc_r+0x310>
 4015f70:	282b883a 	mov	r21,r5
 4015f74:	2029883a 	mov	r20,r4
 4015f78:	401c1f00 	call	401c1f0 <__malloc_lock>
 4015f7c:	a8bfff17 	ldw	r2,-4(r21)
 4015f80:	043fff04 	movi	r16,-4
 4015f84:	90c002c4 	addi	r3,r18,11
 4015f88:	01000584 	movi	r4,22
 4015f8c:	acfffe04 	addi	r19,r21,-8
 4015f90:	1420703a 	and	r16,r2,r16
 4015f94:	20c0332e 	bgeu	r4,r3,4016064 <_realloc_r+0x128>
 4015f98:	047ffe04 	movi	r17,-8
 4015f9c:	1c62703a 	and	r17,r3,r17
 4015fa0:	8807883a 	mov	r3,r17
 4015fa4:	88005816 	blt	r17,zero,4016108 <_realloc_r+0x1cc>
 4015fa8:	8c805736 	bltu	r17,r18,4016108 <_realloc_r+0x1cc>
 4015fac:	80c0300e 	bge	r16,r3,4016070 <_realloc_r+0x134>
 4015fb0:	070100b4 	movhi	fp,1026
 4015fb4:	e71f4604 	addi	fp,fp,32024
 4015fb8:	e1c00217 	ldw	r7,8(fp)
 4015fbc:	9c09883a 	add	r4,r19,r16
 4015fc0:	22000117 	ldw	r8,4(r4)
 4015fc4:	21c06326 	beq	r4,r7,4016154 <_realloc_r+0x218>
 4015fc8:	017fff84 	movi	r5,-2
 4015fcc:	414a703a 	and	r5,r8,r5
 4015fd0:	214b883a 	add	r5,r4,r5
 4015fd4:	29800117 	ldw	r6,4(r5)
 4015fd8:	3180004c 	andi	r6,r6,1
 4015fdc:	30003f26 	beq	r6,zero,40160dc <_realloc_r+0x1a0>
 4015fe0:	1080004c 	andi	r2,r2,1
 4015fe4:	10008326 	beq	r2,zero,40161f4 <_realloc_r+0x2b8>
 4015fe8:	900b883a 	mov	r5,r18
 4015fec:	a009883a 	mov	r4,r20
 4015ff0:	400e9000 	call	400e900 <_malloc_r>
 4015ff4:	1025883a 	mov	r18,r2
 4015ff8:	10011e26 	beq	r2,zero,4016474 <_realloc_r+0x538>
 4015ffc:	a93fff17 	ldw	r4,-4(r21)
 4016000:	10fffe04 	addi	r3,r2,-8
 4016004:	00bfff84 	movi	r2,-2
 4016008:	2084703a 	and	r2,r4,r2
 401600c:	9885883a 	add	r2,r19,r2
 4016010:	1880ee26 	beq	r3,r2,40163cc <_realloc_r+0x490>
 4016014:	81bfff04 	addi	r6,r16,-4
 4016018:	00800904 	movi	r2,36
 401601c:	1180b836 	bltu	r2,r6,4016300 <_realloc_r+0x3c4>
 4016020:	00c004c4 	movi	r3,19
 4016024:	19809636 	bltu	r3,r6,4016280 <_realloc_r+0x344>
 4016028:	9005883a 	mov	r2,r18
 401602c:	a807883a 	mov	r3,r21
 4016030:	19000017 	ldw	r4,0(r3)
 4016034:	11000015 	stw	r4,0(r2)
 4016038:	19000117 	ldw	r4,4(r3)
 401603c:	11000115 	stw	r4,4(r2)
 4016040:	18c00217 	ldw	r3,8(r3)
 4016044:	10c00215 	stw	r3,8(r2)
 4016048:	a80b883a 	mov	r5,r21
 401604c:	a009883a 	mov	r4,r20
 4016050:	4013ee40 	call	4013ee4 <_free_r>
 4016054:	a009883a 	mov	r4,r20
 4016058:	401c2140 	call	401c214 <__malloc_unlock>
 401605c:	9005883a 	mov	r2,r18
 4016060:	00001206 	br	40160ac <_realloc_r+0x170>
 4016064:	00c00404 	movi	r3,16
 4016068:	1823883a 	mov	r17,r3
 401606c:	003fce06 	br	4015fa8 <__alt_mem_onchip_memory2_0+0xfc014d08>
 4016070:	a825883a 	mov	r18,r21
 4016074:	8445c83a 	sub	r2,r16,r17
 4016078:	00c003c4 	movi	r3,15
 401607c:	18802636 	bltu	r3,r2,4016118 <_realloc_r+0x1dc>
 4016080:	99800117 	ldw	r6,4(r19)
 4016084:	9c07883a 	add	r3,r19,r16
 4016088:	3180004c 	andi	r6,r6,1
 401608c:	3420b03a 	or	r16,r6,r16
 4016090:	9c000115 	stw	r16,4(r19)
 4016094:	18800117 	ldw	r2,4(r3)
 4016098:	10800054 	ori	r2,r2,1
 401609c:	18800115 	stw	r2,4(r3)
 40160a0:	a009883a 	mov	r4,r20
 40160a4:	401c2140 	call	401c214 <__malloc_unlock>
 40160a8:	9005883a 	mov	r2,r18
 40160ac:	dfc00917 	ldw	ra,36(sp)
 40160b0:	df000817 	ldw	fp,32(sp)
 40160b4:	ddc00717 	ldw	r23,28(sp)
 40160b8:	dd800617 	ldw	r22,24(sp)
 40160bc:	dd400517 	ldw	r21,20(sp)
 40160c0:	dd000417 	ldw	r20,16(sp)
 40160c4:	dcc00317 	ldw	r19,12(sp)
 40160c8:	dc800217 	ldw	r18,8(sp)
 40160cc:	dc400117 	ldw	r17,4(sp)
 40160d0:	dc000017 	ldw	r16,0(sp)
 40160d4:	dec00a04 	addi	sp,sp,40
 40160d8:	f800283a 	ret
 40160dc:	017fff04 	movi	r5,-4
 40160e0:	414a703a 	and	r5,r8,r5
 40160e4:	814d883a 	add	r6,r16,r5
 40160e8:	30c01f16 	blt	r6,r3,4016168 <_realloc_r+0x22c>
 40160ec:	20800317 	ldw	r2,12(r4)
 40160f0:	20c00217 	ldw	r3,8(r4)
 40160f4:	a825883a 	mov	r18,r21
 40160f8:	3021883a 	mov	r16,r6
 40160fc:	18800315 	stw	r2,12(r3)
 4016100:	10c00215 	stw	r3,8(r2)
 4016104:	003fdb06 	br	4016074 <__alt_mem_onchip_memory2_0+0xfc014dd4>
 4016108:	00800304 	movi	r2,12
 401610c:	a0800015 	stw	r2,0(r20)
 4016110:	0005883a 	mov	r2,zero
 4016114:	003fe506 	br	40160ac <__alt_mem_onchip_memory2_0+0xfc014e0c>
 4016118:	98c00117 	ldw	r3,4(r19)
 401611c:	9c4b883a 	add	r5,r19,r17
 4016120:	11000054 	ori	r4,r2,1
 4016124:	18c0004c 	andi	r3,r3,1
 4016128:	1c62b03a 	or	r17,r3,r17
 401612c:	9c400115 	stw	r17,4(r19)
 4016130:	29000115 	stw	r4,4(r5)
 4016134:	2885883a 	add	r2,r5,r2
 4016138:	10c00117 	ldw	r3,4(r2)
 401613c:	29400204 	addi	r5,r5,8
 4016140:	a009883a 	mov	r4,r20
 4016144:	18c00054 	ori	r3,r3,1
 4016148:	10c00115 	stw	r3,4(r2)
 401614c:	4013ee40 	call	4013ee4 <_free_r>
 4016150:	003fd306 	br	40160a0 <__alt_mem_onchip_memory2_0+0xfc014e00>
 4016154:	017fff04 	movi	r5,-4
 4016158:	414a703a 	and	r5,r8,r5
 401615c:	89800404 	addi	r6,r17,16
 4016160:	8151883a 	add	r8,r16,r5
 4016164:	4180590e 	bge	r8,r6,40162cc <_realloc_r+0x390>
 4016168:	1080004c 	andi	r2,r2,1
 401616c:	103f9e1e 	bne	r2,zero,4015fe8 <__alt_mem_onchip_memory2_0+0xfc014d48>
 4016170:	adbffe17 	ldw	r22,-8(r21)
 4016174:	00bfff04 	movi	r2,-4
 4016178:	9dadc83a 	sub	r22,r19,r22
 401617c:	b1800117 	ldw	r6,4(r22)
 4016180:	3084703a 	and	r2,r6,r2
 4016184:	20002026 	beq	r4,zero,4016208 <_realloc_r+0x2cc>
 4016188:	80af883a 	add	r23,r16,r2
 401618c:	b96f883a 	add	r23,r23,r5
 4016190:	21c05f26 	beq	r4,r7,4016310 <_realloc_r+0x3d4>
 4016194:	b8c01c16 	blt	r23,r3,4016208 <_realloc_r+0x2cc>
 4016198:	20800317 	ldw	r2,12(r4)
 401619c:	20c00217 	ldw	r3,8(r4)
 40161a0:	81bfff04 	addi	r6,r16,-4
 40161a4:	01000904 	movi	r4,36
 40161a8:	18800315 	stw	r2,12(r3)
 40161ac:	10c00215 	stw	r3,8(r2)
 40161b0:	b0c00217 	ldw	r3,8(r22)
 40161b4:	b0800317 	ldw	r2,12(r22)
 40161b8:	b4800204 	addi	r18,r22,8
 40161bc:	18800315 	stw	r2,12(r3)
 40161c0:	10c00215 	stw	r3,8(r2)
 40161c4:	21801b36 	bltu	r4,r6,4016234 <_realloc_r+0x2f8>
 40161c8:	008004c4 	movi	r2,19
 40161cc:	1180352e 	bgeu	r2,r6,40162a4 <_realloc_r+0x368>
 40161d0:	a8800017 	ldw	r2,0(r21)
 40161d4:	b0800215 	stw	r2,8(r22)
 40161d8:	a8800117 	ldw	r2,4(r21)
 40161dc:	b0800315 	stw	r2,12(r22)
 40161e0:	008006c4 	movi	r2,27
 40161e4:	11807f36 	bltu	r2,r6,40163e4 <_realloc_r+0x4a8>
 40161e8:	b0800404 	addi	r2,r22,16
 40161ec:	ad400204 	addi	r21,r21,8
 40161f0:	00002d06 	br	40162a8 <_realloc_r+0x36c>
 40161f4:	adbffe17 	ldw	r22,-8(r21)
 40161f8:	00bfff04 	movi	r2,-4
 40161fc:	9dadc83a 	sub	r22,r19,r22
 4016200:	b1000117 	ldw	r4,4(r22)
 4016204:	2084703a 	and	r2,r4,r2
 4016208:	b03f7726 	beq	r22,zero,4015fe8 <__alt_mem_onchip_memory2_0+0xfc014d48>
 401620c:	80af883a 	add	r23,r16,r2
 4016210:	b8ff7516 	blt	r23,r3,4015fe8 <__alt_mem_onchip_memory2_0+0xfc014d48>
 4016214:	b0800317 	ldw	r2,12(r22)
 4016218:	b0c00217 	ldw	r3,8(r22)
 401621c:	81bfff04 	addi	r6,r16,-4
 4016220:	01000904 	movi	r4,36
 4016224:	18800315 	stw	r2,12(r3)
 4016228:	10c00215 	stw	r3,8(r2)
 401622c:	b4800204 	addi	r18,r22,8
 4016230:	21bfe52e 	bgeu	r4,r6,40161c8 <__alt_mem_onchip_memory2_0+0xfc014f28>
 4016234:	a80b883a 	mov	r5,r21
 4016238:	9009883a 	mov	r4,r18
 401623c:	4014bc00 	call	4014bc0 <memmove>
 4016240:	b821883a 	mov	r16,r23
 4016244:	b027883a 	mov	r19,r22
 4016248:	003f8a06 	br	4016074 <__alt_mem_onchip_memory2_0+0xfc014dd4>
 401624c:	300b883a 	mov	r5,r6
 4016250:	dfc00917 	ldw	ra,36(sp)
 4016254:	df000817 	ldw	fp,32(sp)
 4016258:	ddc00717 	ldw	r23,28(sp)
 401625c:	dd800617 	ldw	r22,24(sp)
 4016260:	dd400517 	ldw	r21,20(sp)
 4016264:	dd000417 	ldw	r20,16(sp)
 4016268:	dcc00317 	ldw	r19,12(sp)
 401626c:	dc800217 	ldw	r18,8(sp)
 4016270:	dc400117 	ldw	r17,4(sp)
 4016274:	dc000017 	ldw	r16,0(sp)
 4016278:	dec00a04 	addi	sp,sp,40
 401627c:	400e9001 	jmpi	400e900 <_malloc_r>
 4016280:	a8c00017 	ldw	r3,0(r21)
 4016284:	90c00015 	stw	r3,0(r18)
 4016288:	a8c00117 	ldw	r3,4(r21)
 401628c:	90c00115 	stw	r3,4(r18)
 4016290:	00c006c4 	movi	r3,27
 4016294:	19804536 	bltu	r3,r6,40163ac <_realloc_r+0x470>
 4016298:	90800204 	addi	r2,r18,8
 401629c:	a8c00204 	addi	r3,r21,8
 40162a0:	003f6306 	br	4016030 <__alt_mem_onchip_memory2_0+0xfc014d90>
 40162a4:	9005883a 	mov	r2,r18
 40162a8:	a8c00017 	ldw	r3,0(r21)
 40162ac:	b821883a 	mov	r16,r23
 40162b0:	b027883a 	mov	r19,r22
 40162b4:	10c00015 	stw	r3,0(r2)
 40162b8:	a8c00117 	ldw	r3,4(r21)
 40162bc:	10c00115 	stw	r3,4(r2)
 40162c0:	a8c00217 	ldw	r3,8(r21)
 40162c4:	10c00215 	stw	r3,8(r2)
 40162c8:	003f6a06 	br	4016074 <__alt_mem_onchip_memory2_0+0xfc014dd4>
 40162cc:	9c67883a 	add	r19,r19,r17
 40162d0:	4445c83a 	sub	r2,r8,r17
 40162d4:	e4c00215 	stw	r19,8(fp)
 40162d8:	10800054 	ori	r2,r2,1
 40162dc:	98800115 	stw	r2,4(r19)
 40162e0:	a8bfff17 	ldw	r2,-4(r21)
 40162e4:	a009883a 	mov	r4,r20
 40162e8:	1080004c 	andi	r2,r2,1
 40162ec:	1462b03a 	or	r17,r2,r17
 40162f0:	ac7fff15 	stw	r17,-4(r21)
 40162f4:	401c2140 	call	401c214 <__malloc_unlock>
 40162f8:	a805883a 	mov	r2,r21
 40162fc:	003f6b06 	br	40160ac <__alt_mem_onchip_memory2_0+0xfc014e0c>
 4016300:	a80b883a 	mov	r5,r21
 4016304:	9009883a 	mov	r4,r18
 4016308:	4014bc00 	call	4014bc0 <memmove>
 401630c:	003f4e06 	br	4016048 <__alt_mem_onchip_memory2_0+0xfc014da8>
 4016310:	89000404 	addi	r4,r17,16
 4016314:	b93fbc16 	blt	r23,r4,4016208 <__alt_mem_onchip_memory2_0+0xfc014f68>
 4016318:	b0800317 	ldw	r2,12(r22)
 401631c:	b0c00217 	ldw	r3,8(r22)
 4016320:	81bfff04 	addi	r6,r16,-4
 4016324:	01000904 	movi	r4,36
 4016328:	18800315 	stw	r2,12(r3)
 401632c:	10c00215 	stw	r3,8(r2)
 4016330:	b4800204 	addi	r18,r22,8
 4016334:	21804336 	bltu	r4,r6,4016444 <_realloc_r+0x508>
 4016338:	008004c4 	movi	r2,19
 401633c:	11803f2e 	bgeu	r2,r6,401643c <_realloc_r+0x500>
 4016340:	a8800017 	ldw	r2,0(r21)
 4016344:	b0800215 	stw	r2,8(r22)
 4016348:	a8800117 	ldw	r2,4(r21)
 401634c:	b0800315 	stw	r2,12(r22)
 4016350:	008006c4 	movi	r2,27
 4016354:	11803f36 	bltu	r2,r6,4016454 <_realloc_r+0x518>
 4016358:	b0800404 	addi	r2,r22,16
 401635c:	ad400204 	addi	r21,r21,8
 4016360:	a8c00017 	ldw	r3,0(r21)
 4016364:	10c00015 	stw	r3,0(r2)
 4016368:	a8c00117 	ldw	r3,4(r21)
 401636c:	10c00115 	stw	r3,4(r2)
 4016370:	a8c00217 	ldw	r3,8(r21)
 4016374:	10c00215 	stw	r3,8(r2)
 4016378:	b447883a 	add	r3,r22,r17
 401637c:	bc45c83a 	sub	r2,r23,r17
 4016380:	e0c00215 	stw	r3,8(fp)
 4016384:	10800054 	ori	r2,r2,1
 4016388:	18800115 	stw	r2,4(r3)
 401638c:	b0800117 	ldw	r2,4(r22)
 4016390:	a009883a 	mov	r4,r20
 4016394:	1080004c 	andi	r2,r2,1
 4016398:	1462b03a 	or	r17,r2,r17
 401639c:	b4400115 	stw	r17,4(r22)
 40163a0:	401c2140 	call	401c214 <__malloc_unlock>
 40163a4:	9005883a 	mov	r2,r18
 40163a8:	003f4006 	br	40160ac <__alt_mem_onchip_memory2_0+0xfc014e0c>
 40163ac:	a8c00217 	ldw	r3,8(r21)
 40163b0:	90c00215 	stw	r3,8(r18)
 40163b4:	a8c00317 	ldw	r3,12(r21)
 40163b8:	90c00315 	stw	r3,12(r18)
 40163bc:	30801126 	beq	r6,r2,4016404 <_realloc_r+0x4c8>
 40163c0:	90800404 	addi	r2,r18,16
 40163c4:	a8c00404 	addi	r3,r21,16
 40163c8:	003f1906 	br	4016030 <__alt_mem_onchip_memory2_0+0xfc014d90>
 40163cc:	90ffff17 	ldw	r3,-4(r18)
 40163d0:	00bfff04 	movi	r2,-4
 40163d4:	a825883a 	mov	r18,r21
 40163d8:	1884703a 	and	r2,r3,r2
 40163dc:	80a1883a 	add	r16,r16,r2
 40163e0:	003f2406 	br	4016074 <__alt_mem_onchip_memory2_0+0xfc014dd4>
 40163e4:	a8800217 	ldw	r2,8(r21)
 40163e8:	b0800415 	stw	r2,16(r22)
 40163ec:	a8800317 	ldw	r2,12(r21)
 40163f0:	b0800515 	stw	r2,20(r22)
 40163f4:	31000a26 	beq	r6,r4,4016420 <_realloc_r+0x4e4>
 40163f8:	b0800604 	addi	r2,r22,24
 40163fc:	ad400404 	addi	r21,r21,16
 4016400:	003fa906 	br	40162a8 <__alt_mem_onchip_memory2_0+0xfc015008>
 4016404:	a9000417 	ldw	r4,16(r21)
 4016408:	90800604 	addi	r2,r18,24
 401640c:	a8c00604 	addi	r3,r21,24
 4016410:	91000415 	stw	r4,16(r18)
 4016414:	a9000517 	ldw	r4,20(r21)
 4016418:	91000515 	stw	r4,20(r18)
 401641c:	003f0406 	br	4016030 <__alt_mem_onchip_memory2_0+0xfc014d90>
 4016420:	a8c00417 	ldw	r3,16(r21)
 4016424:	ad400604 	addi	r21,r21,24
 4016428:	b0800804 	addi	r2,r22,32
 401642c:	b0c00615 	stw	r3,24(r22)
 4016430:	a8ffff17 	ldw	r3,-4(r21)
 4016434:	b0c00715 	stw	r3,28(r22)
 4016438:	003f9b06 	br	40162a8 <__alt_mem_onchip_memory2_0+0xfc015008>
 401643c:	9005883a 	mov	r2,r18
 4016440:	003fc706 	br	4016360 <__alt_mem_onchip_memory2_0+0xfc0150c0>
 4016444:	a80b883a 	mov	r5,r21
 4016448:	9009883a 	mov	r4,r18
 401644c:	4014bc00 	call	4014bc0 <memmove>
 4016450:	003fc906 	br	4016378 <__alt_mem_onchip_memory2_0+0xfc0150d8>
 4016454:	a8800217 	ldw	r2,8(r21)
 4016458:	b0800415 	stw	r2,16(r22)
 401645c:	a8800317 	ldw	r2,12(r21)
 4016460:	b0800515 	stw	r2,20(r22)
 4016464:	31000726 	beq	r6,r4,4016484 <_realloc_r+0x548>
 4016468:	b0800604 	addi	r2,r22,24
 401646c:	ad400404 	addi	r21,r21,16
 4016470:	003fbb06 	br	4016360 <__alt_mem_onchip_memory2_0+0xfc0150c0>
 4016474:	a009883a 	mov	r4,r20
 4016478:	401c2140 	call	401c214 <__malloc_unlock>
 401647c:	0005883a 	mov	r2,zero
 4016480:	003f0a06 	br	40160ac <__alt_mem_onchip_memory2_0+0xfc014e0c>
 4016484:	a8c00417 	ldw	r3,16(r21)
 4016488:	ad400604 	addi	r21,r21,24
 401648c:	b0800804 	addi	r2,r22,32
 4016490:	b0c00615 	stw	r3,24(r22)
 4016494:	a8ffff17 	ldw	r3,-4(r21)
 4016498:	b0c00715 	stw	r3,28(r22)
 401649c:	003fb006 	br	4016360 <__alt_mem_onchip_memory2_0+0xfc0150c0>

040164a0 <__fpclassifyd>:
 40164a0:	00a00034 	movhi	r2,32768
 40164a4:	10bfffc4 	addi	r2,r2,-1
 40164a8:	2884703a 	and	r2,r5,r2
 40164ac:	10000726 	beq	r2,zero,40164cc <__fpclassifyd+0x2c>
 40164b0:	00fffc34 	movhi	r3,65520
 40164b4:	019ff834 	movhi	r6,32736
 40164b8:	28c7883a 	add	r3,r5,r3
 40164bc:	31bfffc4 	addi	r6,r6,-1
 40164c0:	30c00536 	bltu	r6,r3,40164d8 <__fpclassifyd+0x38>
 40164c4:	00800104 	movi	r2,4
 40164c8:	f800283a 	ret
 40164cc:	2000021e 	bne	r4,zero,40164d8 <__fpclassifyd+0x38>
 40164d0:	00800084 	movi	r2,2
 40164d4:	f800283a 	ret
 40164d8:	00dffc34 	movhi	r3,32752
 40164dc:	019ff834 	movhi	r6,32736
 40164e0:	28cb883a 	add	r5,r5,r3
 40164e4:	31bfffc4 	addi	r6,r6,-1
 40164e8:	317ff62e 	bgeu	r6,r5,40164c4 <__alt_mem_onchip_memory2_0+0xfc015224>
 40164ec:	01400434 	movhi	r5,16
 40164f0:	297fffc4 	addi	r5,r5,-1
 40164f4:	28800236 	bltu	r5,r2,4016500 <__fpclassifyd+0x60>
 40164f8:	008000c4 	movi	r2,3
 40164fc:	f800283a 	ret
 4016500:	10c00226 	beq	r2,r3,401650c <__fpclassifyd+0x6c>
 4016504:	0005883a 	mov	r2,zero
 4016508:	f800283a 	ret
 401650c:	2005003a 	cmpeq	r2,r4,zero
 4016510:	f800283a 	ret

04016514 <__sread>:
 4016514:	defffe04 	addi	sp,sp,-8
 4016518:	dc000015 	stw	r16,0(sp)
 401651c:	2821883a 	mov	r16,r5
 4016520:	2940038f 	ldh	r5,14(r5)
 4016524:	dfc00115 	stw	ra,4(sp)
 4016528:	401844c0 	call	401844c <_read_r>
 401652c:	10000716 	blt	r2,zero,401654c <__sread+0x38>
 4016530:	80c01417 	ldw	r3,80(r16)
 4016534:	1887883a 	add	r3,r3,r2
 4016538:	80c01415 	stw	r3,80(r16)
 401653c:	dfc00117 	ldw	ra,4(sp)
 4016540:	dc000017 	ldw	r16,0(sp)
 4016544:	dec00204 	addi	sp,sp,8
 4016548:	f800283a 	ret
 401654c:	80c0030b 	ldhu	r3,12(r16)
 4016550:	18fbffcc 	andi	r3,r3,61439
 4016554:	80c0030d 	sth	r3,12(r16)
 4016558:	dfc00117 	ldw	ra,4(sp)
 401655c:	dc000017 	ldw	r16,0(sp)
 4016560:	dec00204 	addi	sp,sp,8
 4016564:	f800283a 	ret

04016568 <__seofread>:
 4016568:	0005883a 	mov	r2,zero
 401656c:	f800283a 	ret

04016570 <__swrite>:
 4016570:	2880030b 	ldhu	r2,12(r5)
 4016574:	defffb04 	addi	sp,sp,-20
 4016578:	dcc00315 	stw	r19,12(sp)
 401657c:	dc800215 	stw	r18,8(sp)
 4016580:	dc400115 	stw	r17,4(sp)
 4016584:	dc000015 	stw	r16,0(sp)
 4016588:	dfc00415 	stw	ra,16(sp)
 401658c:	10c0400c 	andi	r3,r2,256
 4016590:	2821883a 	mov	r16,r5
 4016594:	2023883a 	mov	r17,r4
 4016598:	3025883a 	mov	r18,r6
 401659c:	3827883a 	mov	r19,r7
 40165a0:	18000526 	beq	r3,zero,40165b8 <__swrite+0x48>
 40165a4:	2940038f 	ldh	r5,14(r5)
 40165a8:	01c00084 	movi	r7,2
 40165ac:	000d883a 	mov	r6,zero
 40165b0:	40183ec0 	call	40183ec <_lseek_r>
 40165b4:	8080030b 	ldhu	r2,12(r16)
 40165b8:	8140038f 	ldh	r5,14(r16)
 40165bc:	10bbffcc 	andi	r2,r2,61439
 40165c0:	980f883a 	mov	r7,r19
 40165c4:	900d883a 	mov	r6,r18
 40165c8:	8809883a 	mov	r4,r17
 40165cc:	8080030d 	sth	r2,12(r16)
 40165d0:	dfc00417 	ldw	ra,16(sp)
 40165d4:	dcc00317 	ldw	r19,12(sp)
 40165d8:	dc800217 	ldw	r18,8(sp)
 40165dc:	dc400117 	ldw	r17,4(sp)
 40165e0:	dc000017 	ldw	r16,0(sp)
 40165e4:	dec00504 	addi	sp,sp,20
 40165e8:	4017ea01 	jmpi	4017ea0 <_write_r>

040165ec <__sseek>:
 40165ec:	defffe04 	addi	sp,sp,-8
 40165f0:	dc000015 	stw	r16,0(sp)
 40165f4:	2821883a 	mov	r16,r5
 40165f8:	2940038f 	ldh	r5,14(r5)
 40165fc:	dfc00115 	stw	ra,4(sp)
 4016600:	40183ec0 	call	40183ec <_lseek_r>
 4016604:	00ffffc4 	movi	r3,-1
 4016608:	10c00826 	beq	r2,r3,401662c <__sseek+0x40>
 401660c:	80c0030b 	ldhu	r3,12(r16)
 4016610:	80801415 	stw	r2,80(r16)
 4016614:	18c40014 	ori	r3,r3,4096
 4016618:	80c0030d 	sth	r3,12(r16)
 401661c:	dfc00117 	ldw	ra,4(sp)
 4016620:	dc000017 	ldw	r16,0(sp)
 4016624:	dec00204 	addi	sp,sp,8
 4016628:	f800283a 	ret
 401662c:	80c0030b 	ldhu	r3,12(r16)
 4016630:	18fbffcc 	andi	r3,r3,61439
 4016634:	80c0030d 	sth	r3,12(r16)
 4016638:	dfc00117 	ldw	ra,4(sp)
 401663c:	dc000017 	ldw	r16,0(sp)
 4016640:	dec00204 	addi	sp,sp,8
 4016644:	f800283a 	ret

04016648 <__sclose>:
 4016648:	2940038f 	ldh	r5,14(r5)
 401664c:	4017f001 	jmpi	4017f00 <_close_r>

04016650 <__sprint_r.part.0>:
 4016650:	28801917 	ldw	r2,100(r5)
 4016654:	defff604 	addi	sp,sp,-40
 4016658:	dd400515 	stw	r21,20(sp)
 401665c:	dfc00915 	stw	ra,36(sp)
 4016660:	df000815 	stw	fp,32(sp)
 4016664:	ddc00715 	stw	r23,28(sp)
 4016668:	dd800615 	stw	r22,24(sp)
 401666c:	dd000415 	stw	r20,16(sp)
 4016670:	dcc00315 	stw	r19,12(sp)
 4016674:	dc800215 	stw	r18,8(sp)
 4016678:	dc400115 	stw	r17,4(sp)
 401667c:	dc000015 	stw	r16,0(sp)
 4016680:	1088000c 	andi	r2,r2,8192
 4016684:	302b883a 	mov	r21,r6
 4016688:	10002e26 	beq	r2,zero,4016744 <__sprint_r.part.0+0xf4>
 401668c:	30800217 	ldw	r2,8(r6)
 4016690:	35800017 	ldw	r22,0(r6)
 4016694:	10002926 	beq	r2,zero,401673c <__sprint_r.part.0+0xec>
 4016698:	2827883a 	mov	r19,r5
 401669c:	2029883a 	mov	r20,r4
 40166a0:	b5c00104 	addi	r23,r22,4
 40166a4:	04bfffc4 	movi	r18,-1
 40166a8:	bc400017 	ldw	r17,0(r23)
 40166ac:	b4000017 	ldw	r16,0(r22)
 40166b0:	0039883a 	mov	fp,zero
 40166b4:	8822d0ba 	srli	r17,r17,2
 40166b8:	8800031e 	bne	r17,zero,40166c8 <__sprint_r.part.0+0x78>
 40166bc:	00001806 	br	4016720 <__sprint_r.part.0+0xd0>
 40166c0:	84000104 	addi	r16,r16,4
 40166c4:	8f001526 	beq	r17,fp,401671c <__sprint_r.part.0+0xcc>
 40166c8:	81400017 	ldw	r5,0(r16)
 40166cc:	980d883a 	mov	r6,r19
 40166d0:	a009883a 	mov	r4,r20
 40166d4:	40182980 	call	4018298 <_fputwc_r>
 40166d8:	e7000044 	addi	fp,fp,1
 40166dc:	14bff81e 	bne	r2,r18,40166c0 <__alt_mem_onchip_memory2_0+0xfc015420>
 40166e0:	9005883a 	mov	r2,r18
 40166e4:	a8000215 	stw	zero,8(r21)
 40166e8:	a8000115 	stw	zero,4(r21)
 40166ec:	dfc00917 	ldw	ra,36(sp)
 40166f0:	df000817 	ldw	fp,32(sp)
 40166f4:	ddc00717 	ldw	r23,28(sp)
 40166f8:	dd800617 	ldw	r22,24(sp)
 40166fc:	dd400517 	ldw	r21,20(sp)
 4016700:	dd000417 	ldw	r20,16(sp)
 4016704:	dcc00317 	ldw	r19,12(sp)
 4016708:	dc800217 	ldw	r18,8(sp)
 401670c:	dc400117 	ldw	r17,4(sp)
 4016710:	dc000017 	ldw	r16,0(sp)
 4016714:	dec00a04 	addi	sp,sp,40
 4016718:	f800283a 	ret
 401671c:	a8800217 	ldw	r2,8(r21)
 4016720:	8c63883a 	add	r17,r17,r17
 4016724:	8c63883a 	add	r17,r17,r17
 4016728:	1445c83a 	sub	r2,r2,r17
 401672c:	a8800215 	stw	r2,8(r21)
 4016730:	b5800204 	addi	r22,r22,8
 4016734:	bdc00204 	addi	r23,r23,8
 4016738:	103fdb1e 	bne	r2,zero,40166a8 <__alt_mem_onchip_memory2_0+0xfc015408>
 401673c:	0005883a 	mov	r2,zero
 4016740:	003fe806 	br	40166e4 <__alt_mem_onchip_memory2_0+0xfc015444>
 4016744:	40141f40 	call	40141f4 <__sfvwrite_r>
 4016748:	003fe606 	br	40166e4 <__alt_mem_onchip_memory2_0+0xfc015444>

0401674c <__sprint_r>:
 401674c:	30c00217 	ldw	r3,8(r6)
 4016750:	18000126 	beq	r3,zero,4016758 <__sprint_r+0xc>
 4016754:	40166501 	jmpi	4016650 <__sprint_r.part.0>
 4016758:	30000115 	stw	zero,4(r6)
 401675c:	0005883a 	mov	r2,zero
 4016760:	f800283a 	ret

04016764 <___vfiprintf_internal_r>:
 4016764:	deffca04 	addi	sp,sp,-216
 4016768:	dd403115 	stw	r21,196(sp)
 401676c:	dfc03515 	stw	ra,212(sp)
 4016770:	df003415 	stw	fp,208(sp)
 4016774:	ddc03315 	stw	r23,204(sp)
 4016778:	dd803215 	stw	r22,200(sp)
 401677c:	dd003015 	stw	r20,192(sp)
 4016780:	dcc02f15 	stw	r19,188(sp)
 4016784:	dc802e15 	stw	r18,184(sp)
 4016788:	dc402d15 	stw	r17,180(sp)
 401678c:	dc002c15 	stw	r16,176(sp)
 4016790:	d9002115 	stw	r4,132(sp)
 4016794:	d9402015 	stw	r5,128(sp)
 4016798:	d9c02215 	stw	r7,136(sp)
 401679c:	302b883a 	mov	r21,r6
 40167a0:	20000226 	beq	r4,zero,40167ac <___vfiprintf_internal_r+0x48>
 40167a4:	20800e17 	ldw	r2,56(r4)
 40167a8:	1000cf26 	beq	r2,zero,4016ae8 <___vfiprintf_internal_r+0x384>
 40167ac:	d8c02017 	ldw	r3,128(sp)
 40167b0:	1880030b 	ldhu	r2,12(r3)
 40167b4:	10c8000c 	andi	r3,r2,8192
 40167b8:	1800071e 	bne	r3,zero,40167d8 <___vfiprintf_internal_r+0x74>
 40167bc:	d9402017 	ldw	r5,128(sp)
 40167c0:	00f7ffc4 	movi	r3,-8193
 40167c4:	10880014 	ori	r2,r2,8192
 40167c8:	29001917 	ldw	r4,100(r5)
 40167cc:	2880030d 	sth	r2,12(r5)
 40167d0:	20c6703a 	and	r3,r4,r3
 40167d4:	28c01915 	stw	r3,100(r5)
 40167d8:	10c0020c 	andi	r3,r2,8
 40167dc:	1800a526 	beq	r3,zero,4016a74 <___vfiprintf_internal_r+0x310>
 40167e0:	d9002017 	ldw	r4,128(sp)
 40167e4:	20c00417 	ldw	r3,16(r4)
 40167e8:	1800a226 	beq	r3,zero,4016a74 <___vfiprintf_internal_r+0x310>
 40167ec:	1080068c 	andi	r2,r2,26
 40167f0:	00c00284 	movi	r3,10
 40167f4:	10c0a826 	beq	r2,r3,4016a98 <___vfiprintf_internal_r+0x334>
 40167f8:	d9001a04 	addi	r4,sp,104
 40167fc:	d94019c4 	addi	r5,sp,103
 4016800:	048100b4 	movhi	r18,1026
 4016804:	2145c83a 	sub	r2,r4,r5
 4016808:	949e1d04 	addi	r18,r18,30836
 401680c:	d9001e15 	stw	r4,120(sp)
 4016810:	d9401f15 	stw	r5,124(sp)
 4016814:	dec01a15 	stw	sp,104(sp)
 4016818:	d8001c15 	stw	zero,112(sp)
 401681c:	d8001b15 	stw	zero,108(sp)
 4016820:	d811883a 	mov	r8,sp
 4016824:	d8002615 	stw	zero,152(sp)
 4016828:	d8002415 	stw	zero,144(sp)
 401682c:	d8802815 	stw	r2,160(sp)
 4016830:	a82d883a 	mov	r22,r21
 4016834:	b0800007 	ldb	r2,0(r22)
 4016838:	10040d26 	beq	r2,zero,4017870 <___vfiprintf_internal_r+0x110c>
 401683c:	00c00944 	movi	r3,37
 4016840:	b029883a 	mov	r20,r22
 4016844:	10c0021e 	bne	r2,r3,4016850 <___vfiprintf_internal_r+0xec>
 4016848:	00001606 	br	40168a4 <___vfiprintf_internal_r+0x140>
 401684c:	10c00326 	beq	r2,r3,401685c <___vfiprintf_internal_r+0xf8>
 4016850:	a5000044 	addi	r20,r20,1
 4016854:	a0800007 	ldb	r2,0(r20)
 4016858:	103ffc1e 	bne	r2,zero,401684c <__alt_mem_onchip_memory2_0+0xfc0155ac>
 401685c:	a5a1c83a 	sub	r16,r20,r22
 4016860:	80001026 	beq	r16,zero,40168a4 <___vfiprintf_internal_r+0x140>
 4016864:	d8c01c17 	ldw	r3,112(sp)
 4016868:	d8801b17 	ldw	r2,108(sp)
 401686c:	45800015 	stw	r22,0(r8)
 4016870:	80c7883a 	add	r3,r16,r3
 4016874:	10800044 	addi	r2,r2,1
 4016878:	44000115 	stw	r16,4(r8)
 401687c:	d8c01c15 	stw	r3,112(sp)
 4016880:	d8801b15 	stw	r2,108(sp)
 4016884:	010001c4 	movi	r4,7
 4016888:	2080750e 	bge	r4,r2,4016a60 <___vfiprintf_internal_r+0x2fc>
 401688c:	1803951e 	bne	r3,zero,40176e4 <___vfiprintf_internal_r+0xf80>
 4016890:	d8c02417 	ldw	r3,144(sp)
 4016894:	d8001b15 	stw	zero,108(sp)
 4016898:	d811883a 	mov	r8,sp
 401689c:	1c07883a 	add	r3,r3,r16
 40168a0:	d8c02415 	stw	r3,144(sp)
 40168a4:	a0800007 	ldb	r2,0(r20)
 40168a8:	1002e026 	beq	r2,zero,401742c <___vfiprintf_internal_r+0xcc8>
 40168ac:	a5800044 	addi	r22,r20,1
 40168b0:	a0c00047 	ldb	r3,1(r20)
 40168b4:	d8001d85 	stb	zero,118(sp)
 40168b8:	0027883a 	mov	r19,zero
 40168bc:	d8002305 	stb	zero,140(sp)
 40168c0:	043fffc4 	movi	r16,-1
 40168c4:	d8002515 	stw	zero,148(sp)
 40168c8:	0023883a 	mov	r17,zero
 40168cc:	05001604 	movi	r20,88
 40168d0:	05400244 	movi	r21,9
 40168d4:	402f883a 	mov	r23,r8
 40168d8:	b5800044 	addi	r22,r22,1
 40168dc:	18bff804 	addi	r2,r3,-32
 40168e0:	a0827736 	bltu	r20,r2,40172c0 <___vfiprintf_internal_r+0xb5c>
 40168e4:	100490ba 	slli	r2,r2,2
 40168e8:	01010074 	movhi	r4,1025
 40168ec:	211a3f04 	addi	r4,r4,26876
 40168f0:	1105883a 	add	r2,r2,r4
 40168f4:	10800017 	ldw	r2,0(r2)
 40168f8:	1000683a 	jmp	r2
 40168fc:	04016fc0 	call	4016fc <__alt_mem_sdram-0x3bfe904>
 4016900:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016904:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016908:	04016fdc 	xori	r16,zero,1471
 401690c:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016910:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016914:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016918:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 401691c:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016920:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016924:	040171e4 	muli	r16,zero,1479
 4016928:	04017208 	cmpgei	r16,zero,1480
 401692c:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016930:	04016b00 	call	4016b0 <__alt_mem_sdram-0x3bfe950>
 4016934:	0401721c 	xori	r16,zero,1480
 4016938:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 401693c:	04016fe8 	cmpgeui	r16,zero,1471
 4016940:	04016ff4 	movhi	r16,1471
 4016944:	04016ff4 	movhi	r16,1471
 4016948:	04016ff4 	movhi	r16,1471
 401694c:	04016ff4 	movhi	r16,1471
 4016950:	04016ff4 	movhi	r16,1471
 4016954:	04016ff4 	movhi	r16,1471
 4016958:	04016ff4 	movhi	r16,1471
 401695c:	04016ff4 	movhi	r16,1471
 4016960:	04016ff4 	movhi	r16,1471
 4016964:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016968:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 401696c:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016970:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016974:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016978:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 401697c:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016980:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016984:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016988:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 401698c:	04017034 	movhi	r16,1472
 4016990:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016994:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016998:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 401699c:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169a0:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169a4:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169a8:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169ac:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169b0:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169b4:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169b8:	04017070 	cmpltui	r16,zero,1473
 40169bc:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169c0:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169c4:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169c8:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169cc:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169d0:	040170cc 	andi	r16,zero,1475
 40169d4:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169d8:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169dc:	04017140 	call	401714 <__alt_mem_sdram-0x3bfe8ec>
 40169e0:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169e4:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169e8:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169ec:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169f0:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169f4:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169f8:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 40169fc:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016a00:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016a04:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016a08:	04016ee8 	cmpgeui	r16,zero,1467
 4016a0c:	04016f18 	cmpnei	r16,zero,1468
 4016a10:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016a14:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016a18:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016a1c:	04017268 	cmpgeui	r16,zero,1481
 4016a20:	04016f18 	cmpnei	r16,zero,1468
 4016a24:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016a28:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016a2c:	04016dc0 	call	4016dc <__alt_mem_sdram-0x3bfe924>
 4016a30:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016a34:	04016dd4 	movui	r16,1463
 4016a38:	04016e0c 	andi	r16,zero,1464
 4016a3c:	04016b0c 	andi	r16,zero,1452
 4016a40:	04016db4 	movhi	r16,1462
 4016a44:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016a48:	04017180 	call	401718 <__alt_mem_sdram-0x3bfe8e8>
 4016a4c:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016a50:	040171cc 	andi	r16,zero,1479
 4016a54:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016a58:	040172c0 	call	40172c <__alt_mem_sdram-0x3bfe8d4>
 4016a5c:	04016e90 	cmplti	r16,zero,1466
 4016a60:	42000204 	addi	r8,r8,8
 4016a64:	d8c02417 	ldw	r3,144(sp)
 4016a68:	1c07883a 	add	r3,r3,r16
 4016a6c:	d8c02415 	stw	r3,144(sp)
 4016a70:	003f8c06 	br	40168a4 <__alt_mem_onchip_memory2_0+0xfc015604>
 4016a74:	d9402017 	ldw	r5,128(sp)
 4016a78:	d9002117 	ldw	r4,132(sp)
 4016a7c:	4011d640 	call	4011d64 <__swsetup_r>
 4016a80:	1003c11e 	bne	r2,zero,4017988 <___vfiprintf_internal_r+0x1224>
 4016a84:	d9402017 	ldw	r5,128(sp)
 4016a88:	00c00284 	movi	r3,10
 4016a8c:	2880030b 	ldhu	r2,12(r5)
 4016a90:	1080068c 	andi	r2,r2,26
 4016a94:	10ff581e 	bne	r2,r3,40167f8 <__alt_mem_onchip_memory2_0+0xfc015558>
 4016a98:	d8c02017 	ldw	r3,128(sp)
 4016a9c:	1880038f 	ldh	r2,14(r3)
 4016aa0:	103f5516 	blt	r2,zero,40167f8 <__alt_mem_onchip_memory2_0+0xfc015558>
 4016aa4:	d9c02217 	ldw	r7,136(sp)
 4016aa8:	d9002117 	ldw	r4,132(sp)
 4016aac:	a80d883a 	mov	r6,r21
 4016ab0:	180b883a 	mov	r5,r3
 4016ab4:	4017c8c0 	call	4017c8c <__sbprintf>
 4016ab8:	dfc03517 	ldw	ra,212(sp)
 4016abc:	df003417 	ldw	fp,208(sp)
 4016ac0:	ddc03317 	ldw	r23,204(sp)
 4016ac4:	dd803217 	ldw	r22,200(sp)
 4016ac8:	dd403117 	ldw	r21,196(sp)
 4016acc:	dd003017 	ldw	r20,192(sp)
 4016ad0:	dcc02f17 	ldw	r19,188(sp)
 4016ad4:	dc802e17 	ldw	r18,184(sp)
 4016ad8:	dc402d17 	ldw	r17,180(sp)
 4016adc:	dc002c17 	ldw	r16,176(sp)
 4016ae0:	dec03604 	addi	sp,sp,216
 4016ae4:	f800283a 	ret
 4016ae8:	4013d700 	call	4013d70 <__sinit>
 4016aec:	003f2f06 	br	40167ac <__alt_mem_onchip_memory2_0+0xfc01550c>
 4016af0:	d8c02517 	ldw	r3,148(sp)
 4016af4:	d8802215 	stw	r2,136(sp)
 4016af8:	00c7c83a 	sub	r3,zero,r3
 4016afc:	d8c02515 	stw	r3,148(sp)
 4016b00:	8c400114 	ori	r17,r17,4
 4016b04:	b0c00007 	ldb	r3,0(r22)
 4016b08:	003f7306 	br	40168d8 <__alt_mem_onchip_memory2_0+0xfc015638>
 4016b0c:	00800c04 	movi	r2,48
 4016b10:	d9402217 	ldw	r5,136(sp)
 4016b14:	d8801d05 	stb	r2,116(sp)
 4016b18:	00801e04 	movi	r2,120
 4016b1c:	d8801d45 	stb	r2,117(sp)
 4016b20:	d8001d85 	stb	zero,118(sp)
 4016b24:	b811883a 	mov	r8,r23
 4016b28:	28c00104 	addi	r3,r5,4
 4016b2c:	2cc00017 	ldw	r19,0(r5)
 4016b30:	0029883a 	mov	r20,zero
 4016b34:	88800094 	ori	r2,r17,2
 4016b38:	80032516 	blt	r16,zero,40177d0 <___vfiprintf_internal_r+0x106c>
 4016b3c:	00bfdfc4 	movi	r2,-129
 4016b40:	88a2703a 	and	r17,r17,r2
 4016b44:	d8c02215 	stw	r3,136(sp)
 4016b48:	8c400094 	ori	r17,r17,2
 4016b4c:	98032a1e 	bne	r19,zero,40177f8 <___vfiprintf_internal_r+0x1094>
 4016b50:	008100b4 	movhi	r2,1026
 4016b54:	109dbd04 	addi	r2,r2,30452
 4016b58:	d8802615 	stw	r2,152(sp)
 4016b5c:	002b883a 	mov	r21,zero
 4016b60:	8001741e 	bne	r16,zero,4017134 <___vfiprintf_internal_r+0x9d0>
 4016b64:	0021883a 	mov	r16,zero
 4016b68:	0029883a 	mov	r20,zero
 4016b6c:	ddc01a04 	addi	r23,sp,104
 4016b70:	8027883a 	mov	r19,r16
 4016b74:	8500010e 	bge	r16,r20,4016b7c <___vfiprintf_internal_r+0x418>
 4016b78:	a027883a 	mov	r19,r20
 4016b7c:	ad403fcc 	andi	r21,r21,255
 4016b80:	ad40201c 	xori	r21,r21,128
 4016b84:	ad7fe004 	addi	r21,r21,-128
 4016b88:	a8000126 	beq	r21,zero,4016b90 <___vfiprintf_internal_r+0x42c>
 4016b8c:	9cc00044 	addi	r19,r19,1
 4016b90:	89c0008c 	andi	r7,r17,2
 4016b94:	38000126 	beq	r7,zero,4016b9c <___vfiprintf_internal_r+0x438>
 4016b98:	9cc00084 	addi	r19,r19,2
 4016b9c:	88c0210c 	andi	r3,r17,132
 4016ba0:	1801dd1e 	bne	r3,zero,4017318 <___vfiprintf_internal_r+0xbb4>
 4016ba4:	d9402517 	ldw	r5,148(sp)
 4016ba8:	2cebc83a 	sub	r21,r5,r19
 4016bac:	0541da0e 	bge	zero,r21,4017318 <___vfiprintf_internal_r+0xbb4>
 4016bb0:	07000404 	movi	fp,16
 4016bb4:	d8801c17 	ldw	r2,112(sp)
 4016bb8:	e543be0e 	bge	fp,r21,4017ab4 <___vfiprintf_internal_r+0x1350>
 4016bbc:	014100b4 	movhi	r5,1026
 4016bc0:	295e2104 	addi	r5,r5,30852
 4016bc4:	dc002715 	stw	r16,156(sp)
 4016bc8:	d9801b17 	ldw	r6,108(sp)
 4016bcc:	a821883a 	mov	r16,r21
 4016bd0:	d9402315 	stw	r5,140(sp)
 4016bd4:	028001c4 	movi	r10,7
 4016bd8:	d9c02915 	stw	r7,164(sp)
 4016bdc:	182b883a 	mov	r21,r3
 4016be0:	00000506 	br	4016bf8 <___vfiprintf_internal_r+0x494>
 4016be4:	31000084 	addi	r4,r6,2
 4016be8:	42000204 	addi	r8,r8,8
 4016bec:	180d883a 	mov	r6,r3
 4016bf0:	843ffc04 	addi	r16,r16,-16
 4016bf4:	e4000f0e 	bge	fp,r16,4016c34 <___vfiprintf_internal_r+0x4d0>
 4016bf8:	010100b4 	movhi	r4,1026
 4016bfc:	10800404 	addi	r2,r2,16
 4016c00:	30c00044 	addi	r3,r6,1
 4016c04:	211e2104 	addi	r4,r4,30852
 4016c08:	41000015 	stw	r4,0(r8)
 4016c0c:	47000115 	stw	fp,4(r8)
 4016c10:	d8801c15 	stw	r2,112(sp)
 4016c14:	d8c01b15 	stw	r3,108(sp)
 4016c18:	50fff20e 	bge	r10,r3,4016be4 <__alt_mem_onchip_memory2_0+0xfc015944>
 4016c1c:	1001b21e 	bne	r2,zero,40172e8 <___vfiprintf_internal_r+0xb84>
 4016c20:	843ffc04 	addi	r16,r16,-16
 4016c24:	000d883a 	mov	r6,zero
 4016c28:	01000044 	movi	r4,1
 4016c2c:	d811883a 	mov	r8,sp
 4016c30:	e43ff116 	blt	fp,r16,4016bf8 <__alt_mem_onchip_memory2_0+0xfc015958>
 4016c34:	a807883a 	mov	r3,r21
 4016c38:	d9c02917 	ldw	r7,164(sp)
 4016c3c:	802b883a 	mov	r21,r16
 4016c40:	dc002717 	ldw	r16,156(sp)
 4016c44:	d9402317 	ldw	r5,140(sp)
 4016c48:	a885883a 	add	r2,r21,r2
 4016c4c:	45400115 	stw	r21,4(r8)
 4016c50:	41400015 	stw	r5,0(r8)
 4016c54:	d8801c15 	stw	r2,112(sp)
 4016c58:	d9001b15 	stw	r4,108(sp)
 4016c5c:	014001c4 	movi	r5,7
 4016c60:	29026216 	blt	r5,r4,40175ec <___vfiprintf_internal_r+0xe88>
 4016c64:	d9801d87 	ldb	r6,118(sp)
 4016c68:	42000204 	addi	r8,r8,8
 4016c6c:	21400044 	addi	r5,r4,1
 4016c70:	3001ae1e 	bne	r6,zero,401732c <___vfiprintf_internal_r+0xbc8>
 4016c74:	3801bb26 	beq	r7,zero,4017364 <___vfiprintf_internal_r+0xc00>
 4016c78:	d9001d04 	addi	r4,sp,116
 4016c7c:	10800084 	addi	r2,r2,2
 4016c80:	41000015 	stw	r4,0(r8)
 4016c84:	01000084 	movi	r4,2
 4016c88:	41000115 	stw	r4,4(r8)
 4016c8c:	d8801c15 	stw	r2,112(sp)
 4016c90:	d9401b15 	stw	r5,108(sp)
 4016c94:	010001c4 	movi	r4,7
 4016c98:	2142680e 	bge	r4,r5,401763c <___vfiprintf_internal_r+0xed8>
 4016c9c:	1002b11e 	bne	r2,zero,4017764 <___vfiprintf_internal_r+0x1000>
 4016ca0:	01802004 	movi	r6,128
 4016ca4:	01400044 	movi	r5,1
 4016ca8:	0009883a 	mov	r4,zero
 4016cac:	d811883a 	mov	r8,sp
 4016cb0:	1981ae1e 	bne	r3,r6,401736c <___vfiprintf_internal_r+0xc08>
 4016cb4:	d8c02517 	ldw	r3,148(sp)
 4016cb8:	1cf9c83a 	sub	fp,r3,r19
 4016cbc:	0701ab0e 	bge	zero,fp,401736c <___vfiprintf_internal_r+0xc08>
 4016cc0:	05400404 	movi	r21,16
 4016cc4:	af03a90e 	bge	r21,fp,4017b6c <___vfiprintf_internal_r+0x1408>
 4016cc8:	014100b4 	movhi	r5,1026
 4016ccc:	295e1d04 	addi	r5,r5,30836
 4016cd0:	d9402315 	stw	r5,140(sp)
 4016cd4:	01c001c4 	movi	r7,7
 4016cd8:	00000506 	br	4016cf0 <___vfiprintf_internal_r+0x58c>
 4016cdc:	21800084 	addi	r6,r4,2
 4016ce0:	42000204 	addi	r8,r8,8
 4016ce4:	1809883a 	mov	r4,r3
 4016ce8:	e73ffc04 	addi	fp,fp,-16
 4016cec:	af000d0e 	bge	r21,fp,4016d24 <___vfiprintf_internal_r+0x5c0>
 4016cf0:	10800404 	addi	r2,r2,16
 4016cf4:	20c00044 	addi	r3,r4,1
 4016cf8:	44800015 	stw	r18,0(r8)
 4016cfc:	45400115 	stw	r21,4(r8)
 4016d00:	d8801c15 	stw	r2,112(sp)
 4016d04:	d8c01b15 	stw	r3,108(sp)
 4016d08:	38fff40e 	bge	r7,r3,4016cdc <__alt_mem_onchip_memory2_0+0xfc015a3c>
 4016d0c:	10022b1e 	bne	r2,zero,40175bc <___vfiprintf_internal_r+0xe58>
 4016d10:	e73ffc04 	addi	fp,fp,-16
 4016d14:	01800044 	movi	r6,1
 4016d18:	0009883a 	mov	r4,zero
 4016d1c:	d811883a 	mov	r8,sp
 4016d20:	af3ff316 	blt	r21,fp,4016cf0 <__alt_mem_onchip_memory2_0+0xfc015a50>
 4016d24:	d8c02317 	ldw	r3,140(sp)
 4016d28:	1705883a 	add	r2,r2,fp
 4016d2c:	47000115 	stw	fp,4(r8)
 4016d30:	40c00015 	stw	r3,0(r8)
 4016d34:	d8801c15 	stw	r2,112(sp)
 4016d38:	d9801b15 	stw	r6,108(sp)
 4016d3c:	00c001c4 	movi	r3,7
 4016d40:	19829416 	blt	r3,r6,4017794 <___vfiprintf_internal_r+0x1030>
 4016d44:	8521c83a 	sub	r16,r16,r20
 4016d48:	42000204 	addi	r8,r8,8
 4016d4c:	31400044 	addi	r5,r6,1
 4016d50:	3009883a 	mov	r4,r6
 4016d54:	04018716 	blt	zero,r16,4017374 <___vfiprintf_internal_r+0xc10>
 4016d58:	a085883a 	add	r2,r20,r2
 4016d5c:	45c00015 	stw	r23,0(r8)
 4016d60:	45000115 	stw	r20,4(r8)
 4016d64:	d8801c15 	stw	r2,112(sp)
 4016d68:	d9401b15 	stw	r5,108(sp)
 4016d6c:	00c001c4 	movi	r3,7
 4016d70:	1941c20e 	bge	r3,r5,401747c <___vfiprintf_internal_r+0xd18>
 4016d74:	1002531e 	bne	r2,zero,40176c4 <___vfiprintf_internal_r+0xf60>
 4016d78:	d8001b15 	stw	zero,108(sp)
 4016d7c:	8c40010c 	andi	r17,r17,4
 4016d80:	88023226 	beq	r17,zero,401764c <___vfiprintf_internal_r+0xee8>
 4016d84:	d9002517 	ldw	r4,148(sp)
 4016d88:	24e3c83a 	sub	r17,r4,r19
 4016d8c:	04432916 	blt	zero,r17,4017a34 <___vfiprintf_internal_r+0x12d0>
 4016d90:	d8802517 	ldw	r2,148(sp)
 4016d94:	14c0010e 	bge	r2,r19,4016d9c <___vfiprintf_internal_r+0x638>
 4016d98:	9805883a 	mov	r2,r19
 4016d9c:	d8c02417 	ldw	r3,144(sp)
 4016da0:	1887883a 	add	r3,r3,r2
 4016da4:	d8c02415 	stw	r3,144(sp)
 4016da8:	d8001b15 	stw	zero,108(sp)
 4016dac:	d811883a 	mov	r8,sp
 4016db0:	003ea006 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc015594>
 4016db4:	8c400814 	ori	r17,r17,32
 4016db8:	b0c00007 	ldb	r3,0(r22)
 4016dbc:	003ec606 	br	40168d8 <__alt_mem_onchip_memory2_0+0xfc015638>
 4016dc0:	b0c00007 	ldb	r3,0(r22)
 4016dc4:	00801b04 	movi	r2,108
 4016dc8:	18832026 	beq	r3,r2,4017a4c <___vfiprintf_internal_r+0x12e8>
 4016dcc:	8c400414 	ori	r17,r17,16
 4016dd0:	003ec106 	br	40168d8 <__alt_mem_onchip_memory2_0+0xfc015638>
 4016dd4:	9cc03fcc 	andi	r19,r19,255
 4016dd8:	b811883a 	mov	r8,r23
 4016ddc:	9803981e 	bne	r19,zero,4017c40 <___vfiprintf_internal_r+0x14dc>
 4016de0:	8880080c 	andi	r2,r17,32
 4016de4:	1002be26 	beq	r2,zero,40178e0 <___vfiprintf_internal_r+0x117c>
 4016de8:	d9002217 	ldw	r4,136(sp)
 4016dec:	d9402417 	ldw	r5,144(sp)
 4016df0:	20800017 	ldw	r2,0(r4)
 4016df4:	2807d7fa 	srai	r3,r5,31
 4016df8:	21000104 	addi	r4,r4,4
 4016dfc:	d9002215 	stw	r4,136(sp)
 4016e00:	11400015 	stw	r5,0(r2)
 4016e04:	10c00115 	stw	r3,4(r2)
 4016e08:	003e8a06 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc015594>
 4016e0c:	9cc03fcc 	andi	r19,r19,255
 4016e10:	b811883a 	mov	r8,r23
 4016e14:	9803871e 	bne	r19,zero,4017c34 <___vfiprintf_internal_r+0x14d0>
 4016e18:	8880080c 	andi	r2,r17,32
 4016e1c:	10009a26 	beq	r2,zero,4017088 <___vfiprintf_internal_r+0x924>
 4016e20:	d9002217 	ldw	r4,136(sp)
 4016e24:	d8001d85 	stb	zero,118(sp)
 4016e28:	20800204 	addi	r2,r4,8
 4016e2c:	24c00017 	ldw	r19,0(r4)
 4016e30:	25000117 	ldw	r20,4(r4)
 4016e34:	8002a416 	blt	r16,zero,40178c8 <___vfiprintf_internal_r+0x1164>
 4016e38:	013fdfc4 	movi	r4,-129
 4016e3c:	9d06b03a 	or	r3,r19,r20
 4016e40:	d8802215 	stw	r2,136(sp)
 4016e44:	8922703a 	and	r17,r17,r4
 4016e48:	18009b26 	beq	r3,zero,40170b8 <___vfiprintf_internal_r+0x954>
 4016e4c:	002b883a 	mov	r21,zero
 4016e50:	ddc01a04 	addi	r23,sp,104
 4016e54:	9806d0fa 	srli	r3,r19,3
 4016e58:	a008977a 	slli	r4,r20,29
 4016e5c:	a028d0fa 	srli	r20,r20,3
 4016e60:	9cc001cc 	andi	r19,r19,7
 4016e64:	98800c04 	addi	r2,r19,48
 4016e68:	bdffffc4 	addi	r23,r23,-1
 4016e6c:	20e6b03a 	or	r19,r4,r3
 4016e70:	b8800005 	stb	r2,0(r23)
 4016e74:	9d06b03a 	or	r3,r19,r20
 4016e78:	183ff61e 	bne	r3,zero,4016e54 <__alt_mem_onchip_memory2_0+0xfc015bb4>
 4016e7c:	88c0004c 	andi	r3,r17,1
 4016e80:	18021f1e 	bne	r3,zero,4017700 <___vfiprintf_internal_r+0xf9c>
 4016e84:	d9401e17 	ldw	r5,120(sp)
 4016e88:	2de9c83a 	sub	r20,r5,r23
 4016e8c:	003f3806 	br	4016b70 <__alt_mem_onchip_memory2_0+0xfc0158d0>
 4016e90:	9cc03fcc 	andi	r19,r19,255
 4016e94:	b811883a 	mov	r8,r23
 4016e98:	98034f1e 	bne	r19,zero,4017bd8 <___vfiprintf_internal_r+0x1474>
 4016e9c:	008100b4 	movhi	r2,1026
 4016ea0:	109dbd04 	addi	r2,r2,30452
 4016ea4:	d8802615 	stw	r2,152(sp)
 4016ea8:	8880080c 	andi	r2,r17,32
 4016eac:	1000ac26 	beq	r2,zero,4017160 <___vfiprintf_internal_r+0x9fc>
 4016eb0:	d9002217 	ldw	r4,136(sp)
 4016eb4:	24c00017 	ldw	r19,0(r4)
 4016eb8:	25000117 	ldw	r20,4(r4)
 4016ebc:	21000204 	addi	r4,r4,8
 4016ec0:	d9002215 	stw	r4,136(sp)
 4016ec4:	8880004c 	andi	r2,r17,1
 4016ec8:	1001e726 	beq	r2,zero,4017668 <___vfiprintf_internal_r+0xf04>
 4016ecc:	9d04b03a 	or	r2,r19,r20
 4016ed0:	10025c1e 	bne	r2,zero,4017844 <___vfiprintf_internal_r+0x10e0>
 4016ed4:	d8001d85 	stb	zero,118(sp)
 4016ed8:	80024416 	blt	r16,zero,40177ec <___vfiprintf_internal_r+0x1088>
 4016edc:	00bfdfc4 	movi	r2,-129
 4016ee0:	88a2703a 	and	r17,r17,r2
 4016ee4:	003f1d06 	br	4016b5c <__alt_mem_onchip_memory2_0+0xfc0158bc>
 4016ee8:	d8c02217 	ldw	r3,136(sp)
 4016eec:	04c00044 	movi	r19,1
 4016ef0:	b811883a 	mov	r8,r23
 4016ef4:	18800017 	ldw	r2,0(r3)
 4016ef8:	18c00104 	addi	r3,r3,4
 4016efc:	d8001d85 	stb	zero,118(sp)
 4016f00:	d8801005 	stb	r2,64(sp)
 4016f04:	d8c02215 	stw	r3,136(sp)
 4016f08:	9829883a 	mov	r20,r19
 4016f0c:	ddc01004 	addi	r23,sp,64
 4016f10:	0021883a 	mov	r16,zero
 4016f14:	003f1e06 	br	4016b90 <__alt_mem_onchip_memory2_0+0xfc0158f0>
 4016f18:	9cc03fcc 	andi	r19,r19,255
 4016f1c:	b811883a 	mov	r8,r23
 4016f20:	9803331e 	bne	r19,zero,4017bf0 <___vfiprintf_internal_r+0x148c>
 4016f24:	8880080c 	andi	r2,r17,32
 4016f28:	10004826 	beq	r2,zero,401704c <___vfiprintf_internal_r+0x8e8>
 4016f2c:	d9002217 	ldw	r4,136(sp)
 4016f30:	20800117 	ldw	r2,4(r4)
 4016f34:	24c00017 	ldw	r19,0(r4)
 4016f38:	21000204 	addi	r4,r4,8
 4016f3c:	d9002215 	stw	r4,136(sp)
 4016f40:	1029883a 	mov	r20,r2
 4016f44:	10024c16 	blt	r2,zero,4017878 <___vfiprintf_internal_r+0x1114>
 4016f48:	dd401d83 	ldbu	r21,118(sp)
 4016f4c:	80007116 	blt	r16,zero,4017114 <___vfiprintf_internal_r+0x9b0>
 4016f50:	00ffdfc4 	movi	r3,-129
 4016f54:	9d04b03a 	or	r2,r19,r20
 4016f58:	88e2703a 	and	r17,r17,r3
 4016f5c:	1000d126 	beq	r2,zero,40172a4 <___vfiprintf_internal_r+0xb40>
 4016f60:	a0023526 	beq	r20,zero,4017838 <___vfiprintf_internal_r+0x10d4>
 4016f64:	ddc01a04 	addi	r23,sp,104
 4016f68:	4039883a 	mov	fp,r8
 4016f6c:	9809883a 	mov	r4,r19
 4016f70:	a00b883a 	mov	r5,r20
 4016f74:	01800284 	movi	r6,10
 4016f78:	000f883a 	mov	r7,zero
 4016f7c:	4018c900 	call	4018c90 <__umoddi3>
 4016f80:	10800c04 	addi	r2,r2,48
 4016f84:	bdffffc4 	addi	r23,r23,-1
 4016f88:	9809883a 	mov	r4,r19
 4016f8c:	a00b883a 	mov	r5,r20
 4016f90:	b8800005 	stb	r2,0(r23)
 4016f94:	01800284 	movi	r6,10
 4016f98:	000f883a 	mov	r7,zero
 4016f9c:	40186940 	call	4018694 <__udivdi3>
 4016fa0:	1027883a 	mov	r19,r2
 4016fa4:	10c4b03a 	or	r2,r2,r3
 4016fa8:	1829883a 	mov	r20,r3
 4016fac:	103fef1e 	bne	r2,zero,4016f6c <__alt_mem_onchip_memory2_0+0xfc015ccc>
 4016fb0:	d9001e17 	ldw	r4,120(sp)
 4016fb4:	e011883a 	mov	r8,fp
 4016fb8:	25e9c83a 	sub	r20,r4,r23
 4016fbc:	003eec06 	br	4016b70 <__alt_mem_onchip_memory2_0+0xfc0158d0>
 4016fc0:	d8802307 	ldb	r2,140(sp)
 4016fc4:	1002361e 	bne	r2,zero,40178a0 <___vfiprintf_internal_r+0x113c>
 4016fc8:	00c00804 	movi	r3,32
 4016fcc:	d8c02305 	stb	r3,140(sp)
 4016fd0:	04c00044 	movi	r19,1
 4016fd4:	b0c00007 	ldb	r3,0(r22)
 4016fd8:	003e3f06 	br	40168d8 <__alt_mem_onchip_memory2_0+0xfc015638>
 4016fdc:	8c400054 	ori	r17,r17,1
 4016fe0:	b0c00007 	ldb	r3,0(r22)
 4016fe4:	003e3c06 	br	40168d8 <__alt_mem_onchip_memory2_0+0xfc015638>
 4016fe8:	8c402014 	ori	r17,r17,128
 4016fec:	b0c00007 	ldb	r3,0(r22)
 4016ff0:	003e3906 	br	40168d8 <__alt_mem_onchip_memory2_0+0xfc015638>
 4016ff4:	dc002715 	stw	r16,156(sp)
 4016ff8:	d8002515 	stw	zero,148(sp)
 4016ffc:	1f3ff404 	addi	fp,r3,-48
 4017000:	0009883a 	mov	r4,zero
 4017004:	b021883a 	mov	r16,r22
 4017008:	01400284 	movi	r5,10
 401700c:	400d7980 	call	400d798 <__mulsi3>
 4017010:	80c00007 	ldb	r3,0(r16)
 4017014:	e089883a 	add	r4,fp,r2
 4017018:	b5800044 	addi	r22,r22,1
 401701c:	1f3ff404 	addi	fp,r3,-48
 4017020:	b021883a 	mov	r16,r22
 4017024:	af3ff82e 	bgeu	r21,fp,4017008 <__alt_mem_onchip_memory2_0+0xfc015d68>
 4017028:	d9002515 	stw	r4,148(sp)
 401702c:	dc002717 	ldw	r16,156(sp)
 4017030:	003e2a06 	br	40168dc <__alt_mem_onchip_memory2_0+0xfc01563c>
 4017034:	9cc03fcc 	andi	r19,r19,255
 4017038:	b811883a 	mov	r8,r23
 401703c:	9802e91e 	bne	r19,zero,4017be4 <___vfiprintf_internal_r+0x1480>
 4017040:	8c400414 	ori	r17,r17,16
 4017044:	8880080c 	andi	r2,r17,32
 4017048:	103fb81e 	bne	r2,zero,4016f2c <__alt_mem_onchip_memory2_0+0xfc015c8c>
 401704c:	8880040c 	andi	r2,r17,16
 4017050:	10022e26 	beq	r2,zero,401790c <___vfiprintf_internal_r+0x11a8>
 4017054:	d9402217 	ldw	r5,136(sp)
 4017058:	2cc00017 	ldw	r19,0(r5)
 401705c:	29400104 	addi	r5,r5,4
 4017060:	d9402215 	stw	r5,136(sp)
 4017064:	9829d7fa 	srai	r20,r19,31
 4017068:	a005883a 	mov	r2,r20
 401706c:	003fb506 	br	4016f44 <__alt_mem_onchip_memory2_0+0xfc015ca4>
 4017070:	9cc03fcc 	andi	r19,r19,255
 4017074:	b811883a 	mov	r8,r23
 4017078:	9802fa1e 	bne	r19,zero,4017c64 <___vfiprintf_internal_r+0x1500>
 401707c:	8c400414 	ori	r17,r17,16
 4017080:	8880080c 	andi	r2,r17,32
 4017084:	103f661e 	bne	r2,zero,4016e20 <__alt_mem_onchip_memory2_0+0xfc015b80>
 4017088:	8880040c 	andi	r2,r17,16
 401708c:	10020626 	beq	r2,zero,40178a8 <___vfiprintf_internal_r+0x1144>
 4017090:	d9402217 	ldw	r5,136(sp)
 4017094:	d8001d85 	stb	zero,118(sp)
 4017098:	0029883a 	mov	r20,zero
 401709c:	28800104 	addi	r2,r5,4
 40170a0:	2cc00017 	ldw	r19,0(r5)
 40170a4:	80020816 	blt	r16,zero,40178c8 <___vfiprintf_internal_r+0x1164>
 40170a8:	00ffdfc4 	movi	r3,-129
 40170ac:	d8802215 	stw	r2,136(sp)
 40170b0:	88e2703a 	and	r17,r17,r3
 40170b4:	983f651e 	bne	r19,zero,4016e4c <__alt_mem_onchip_memory2_0+0xfc015bac>
 40170b8:	002b883a 	mov	r21,zero
 40170bc:	8002cf26 	beq	r16,zero,4017bfc <___vfiprintf_internal_r+0x1498>
 40170c0:	0027883a 	mov	r19,zero
 40170c4:	0029883a 	mov	r20,zero
 40170c8:	003f6106 	br	4016e50 <__alt_mem_onchip_memory2_0+0xfc015bb0>
 40170cc:	9cc03fcc 	andi	r19,r19,255
 40170d0:	b811883a 	mov	r8,r23
 40170d4:	9802e01e 	bne	r19,zero,4017c58 <___vfiprintf_internal_r+0x14f4>
 40170d8:	8c400414 	ori	r17,r17,16
 40170dc:	8880080c 	andi	r2,r17,32
 40170e0:	1000641e 	bne	r2,zero,4017274 <___vfiprintf_internal_r+0xb10>
 40170e4:	8880040c 	andi	r2,r17,16
 40170e8:	1001c81e 	bne	r2,zero,401780c <___vfiprintf_internal_r+0x10a8>
 40170ec:	8880100c 	andi	r2,r17,64
 40170f0:	d8001d85 	stb	zero,118(sp)
 40170f4:	1002281e 	bne	r2,zero,4017998 <___vfiprintf_internal_r+0x1234>
 40170f8:	d9002217 	ldw	r4,136(sp)
 40170fc:	0029883a 	mov	r20,zero
 4017100:	20800104 	addi	r2,r4,4
 4017104:	24c00017 	ldw	r19,0(r4)
 4017108:	8001c60e 	bge	r16,zero,4017824 <___vfiprintf_internal_r+0x10c0>
 401710c:	d8802215 	stw	r2,136(sp)
 4017110:	002b883a 	mov	r21,zero
 4017114:	9d04b03a 	or	r2,r19,r20
 4017118:	103f911e 	bne	r2,zero,4016f60 <__alt_mem_onchip_memory2_0+0xfc015cc0>
 401711c:	00800044 	movi	r2,1
 4017120:	10803fcc 	andi	r2,r2,255
 4017124:	00c00044 	movi	r3,1
 4017128:	10c05f26 	beq	r2,r3,40172a8 <___vfiprintf_internal_r+0xb44>
 401712c:	00c00084 	movi	r3,2
 4017130:	10ffe31e 	bne	r2,r3,40170c0 <__alt_mem_onchip_memory2_0+0xfc015e20>
 4017134:	0027883a 	mov	r19,zero
 4017138:	0029883a 	mov	r20,zero
 401713c:	00015106 	br	4017684 <___vfiprintf_internal_r+0xf20>
 4017140:	9cc03fcc 	andi	r19,r19,255
 4017144:	b811883a 	mov	r8,r23
 4017148:	9802c01e 	bne	r19,zero,4017c4c <___vfiprintf_internal_r+0x14e8>
 401714c:	014100b4 	movhi	r5,1026
 4017150:	295db804 	addi	r5,r5,30432
 4017154:	d9402615 	stw	r5,152(sp)
 4017158:	8880080c 	andi	r2,r17,32
 401715c:	103f541e 	bne	r2,zero,4016eb0 <__alt_mem_onchip_memory2_0+0xfc015c10>
 4017160:	8880040c 	andi	r2,r17,16
 4017164:	1001f226 	beq	r2,zero,4017930 <___vfiprintf_internal_r+0x11cc>
 4017168:	d9402217 	ldw	r5,136(sp)
 401716c:	0029883a 	mov	r20,zero
 4017170:	2cc00017 	ldw	r19,0(r5)
 4017174:	29400104 	addi	r5,r5,4
 4017178:	d9402215 	stw	r5,136(sp)
 401717c:	003f5106 	br	4016ec4 <__alt_mem_onchip_memory2_0+0xfc015c24>
 4017180:	d8c02217 	ldw	r3,136(sp)
 4017184:	b811883a 	mov	r8,r23
 4017188:	d8001d85 	stb	zero,118(sp)
 401718c:	1dc00017 	ldw	r23,0(r3)
 4017190:	1f000104 	addi	fp,r3,4
 4017194:	b8025926 	beq	r23,zero,4017afc <___vfiprintf_internal_r+0x1398>
 4017198:	80023316 	blt	r16,zero,4017a68 <___vfiprintf_internal_r+0x1304>
 401719c:	800d883a 	mov	r6,r16
 40171a0:	000b883a 	mov	r5,zero
 40171a4:	b809883a 	mov	r4,r23
 40171a8:	da002a15 	stw	r8,168(sp)
 40171ac:	4014adc0 	call	4014adc <memchr>
 40171b0:	da002a17 	ldw	r8,168(sp)
 40171b4:	10026826 	beq	r2,zero,4017b58 <___vfiprintf_internal_r+0x13f4>
 40171b8:	15e9c83a 	sub	r20,r2,r23
 40171bc:	dd401d83 	ldbu	r21,118(sp)
 40171c0:	df002215 	stw	fp,136(sp)
 40171c4:	0021883a 	mov	r16,zero
 40171c8:	003e6906 	br	4016b70 <__alt_mem_onchip_memory2_0+0xfc0158d0>
 40171cc:	9cc03fcc 	andi	r19,r19,255
 40171d0:	b811883a 	mov	r8,r23
 40171d4:	983fc126 	beq	r19,zero,40170dc <__alt_mem_onchip_memory2_0+0xfc015e3c>
 40171d8:	d8c02303 	ldbu	r3,140(sp)
 40171dc:	d8c01d85 	stb	r3,118(sp)
 40171e0:	003fbe06 	br	40170dc <__alt_mem_onchip_memory2_0+0xfc015e3c>
 40171e4:	d9002217 	ldw	r4,136(sp)
 40171e8:	d9402217 	ldw	r5,136(sp)
 40171ec:	21000017 	ldw	r4,0(r4)
 40171f0:	28800104 	addi	r2,r5,4
 40171f4:	d9002515 	stw	r4,148(sp)
 40171f8:	203e3d16 	blt	r4,zero,4016af0 <__alt_mem_onchip_memory2_0+0xfc015850>
 40171fc:	d8802215 	stw	r2,136(sp)
 4017200:	b0c00007 	ldb	r3,0(r22)
 4017204:	003db406 	br	40168d8 <__alt_mem_onchip_memory2_0+0xfc015638>
 4017208:	00c00ac4 	movi	r3,43
 401720c:	d8c02305 	stb	r3,140(sp)
 4017210:	04c00044 	movi	r19,1
 4017214:	b0c00007 	ldb	r3,0(r22)
 4017218:	003daf06 	br	40168d8 <__alt_mem_onchip_memory2_0+0xfc015638>
 401721c:	b0c00007 	ldb	r3,0(r22)
 4017220:	01000a84 	movi	r4,42
 4017224:	b4000044 	addi	r16,r22,1
 4017228:	19025e26 	beq	r3,r4,4017ba4 <___vfiprintf_internal_r+0x1440>
 401722c:	1f3ff404 	addi	fp,r3,-48
 4017230:	0009883a 	mov	r4,zero
 4017234:	af025236 	bltu	r21,fp,4017b80 <___vfiprintf_internal_r+0x141c>
 4017238:	01400284 	movi	r5,10
 401723c:	400d7980 	call	400d798 <__mulsi3>
 4017240:	80c00007 	ldb	r3,0(r16)
 4017244:	1709883a 	add	r4,r2,fp
 4017248:	85800044 	addi	r22,r16,1
 401724c:	1f3ff404 	addi	fp,r3,-48
 4017250:	b021883a 	mov	r16,r22
 4017254:	af3ff82e 	bgeu	r21,fp,4017238 <__alt_mem_onchip_memory2_0+0xfc015f98>
 4017258:	2021883a 	mov	r16,r4
 401725c:	203d9f0e 	bge	r4,zero,40168dc <__alt_mem_onchip_memory2_0+0xfc01563c>
 4017260:	043fffc4 	movi	r16,-1
 4017264:	003d9d06 	br	40168dc <__alt_mem_onchip_memory2_0+0xfc01563c>
 4017268:	8c401014 	ori	r17,r17,64
 401726c:	b0c00007 	ldb	r3,0(r22)
 4017270:	003d9906 	br	40168d8 <__alt_mem_onchip_memory2_0+0xfc015638>
 4017274:	d9002217 	ldw	r4,136(sp)
 4017278:	d8001d85 	stb	zero,118(sp)
 401727c:	20c00204 	addi	r3,r4,8
 4017280:	24c00017 	ldw	r19,0(r4)
 4017284:	25000117 	ldw	r20,4(r4)
 4017288:	8001e716 	blt	r16,zero,4017a28 <___vfiprintf_internal_r+0x12c4>
 401728c:	013fdfc4 	movi	r4,-129
 4017290:	9d04b03a 	or	r2,r19,r20
 4017294:	d8c02215 	stw	r3,136(sp)
 4017298:	8922703a 	and	r17,r17,r4
 401729c:	002b883a 	mov	r21,zero
 40172a0:	103f2f1e 	bne	r2,zero,4016f60 <__alt_mem_onchip_memory2_0+0xfc015cc0>
 40172a4:	803e2f26 	beq	r16,zero,4016b64 <__alt_mem_onchip_memory2_0+0xfc0158c4>
 40172a8:	0027883a 	mov	r19,zero
 40172ac:	9cc00c04 	addi	r19,r19,48
 40172b0:	dcc019c5 	stb	r19,103(sp)
 40172b4:	dd002817 	ldw	r20,160(sp)
 40172b8:	ddc019c4 	addi	r23,sp,103
 40172bc:	003e2c06 	br	4016b70 <__alt_mem_onchip_memory2_0+0xfc0158d0>
 40172c0:	9cc03fcc 	andi	r19,r19,255
 40172c4:	b811883a 	mov	r8,r23
 40172c8:	9802571e 	bne	r19,zero,4017c28 <___vfiprintf_internal_r+0x14c4>
 40172cc:	18005726 	beq	r3,zero,401742c <___vfiprintf_internal_r+0xcc8>
 40172d0:	04c00044 	movi	r19,1
 40172d4:	d8c01005 	stb	r3,64(sp)
 40172d8:	d8001d85 	stb	zero,118(sp)
 40172dc:	9829883a 	mov	r20,r19
 40172e0:	ddc01004 	addi	r23,sp,64
 40172e4:	003f0a06 	br	4016f10 <__alt_mem_onchip_memory2_0+0xfc015c70>
 40172e8:	d9402017 	ldw	r5,128(sp)
 40172ec:	d9002117 	ldw	r4,132(sp)
 40172f0:	d9801a04 	addi	r6,sp,104
 40172f4:	da802a15 	stw	r10,168(sp)
 40172f8:	40166500 	call	4016650 <__sprint_r.part.0>
 40172fc:	da802a17 	ldw	r10,168(sp)
 4017300:	1000501e 	bne	r2,zero,4017444 <___vfiprintf_internal_r+0xce0>
 4017304:	d9801b17 	ldw	r6,108(sp)
 4017308:	d8801c17 	ldw	r2,112(sp)
 401730c:	d811883a 	mov	r8,sp
 4017310:	31000044 	addi	r4,r6,1
 4017314:	003e3606 	br	4016bf0 <__alt_mem_onchip_memory2_0+0xfc015950>
 4017318:	d9001b17 	ldw	r4,108(sp)
 401731c:	d8801c17 	ldw	r2,112(sp)
 4017320:	21400044 	addi	r5,r4,1
 4017324:	d9801d87 	ldb	r6,118(sp)
 4017328:	303e5226 	beq	r6,zero,4016c74 <__alt_mem_onchip_memory2_0+0xfc0159d4>
 401732c:	01800044 	movi	r6,1
 4017330:	d9001d84 	addi	r4,sp,118
 4017334:	1185883a 	add	r2,r2,r6
 4017338:	41000015 	stw	r4,0(r8)
 401733c:	41800115 	stw	r6,4(r8)
 4017340:	d8801c15 	stw	r2,112(sp)
 4017344:	d9401b15 	stw	r5,108(sp)
 4017348:	010001c4 	movi	r4,7
 401734c:	2140b00e 	bge	r4,r5,4017610 <___vfiprintf_internal_r+0xeac>
 4017350:	1000f61e 	bne	r2,zero,401772c <___vfiprintf_internal_r+0xfc8>
 4017354:	3800b31e 	bne	r7,zero,4017624 <___vfiprintf_internal_r+0xec0>
 4017358:	0009883a 	mov	r4,zero
 401735c:	300b883a 	mov	r5,r6
 4017360:	d811883a 	mov	r8,sp
 4017364:	01802004 	movi	r6,128
 4017368:	19be5226 	beq	r3,r6,4016cb4 <__alt_mem_onchip_memory2_0+0xfc015a14>
 401736c:	8521c83a 	sub	r16,r16,r20
 4017370:	043e790e 	bge	zero,r16,4016d58 <__alt_mem_onchip_memory2_0+0xfc015ab8>
 4017374:	05400404 	movi	r21,16
 4017378:	ac01b00e 	bge	r21,r16,4017a3c <___vfiprintf_internal_r+0x12d8>
 401737c:	014100b4 	movhi	r5,1026
 4017380:	295e1d04 	addi	r5,r5,30836
 4017384:	d9402315 	stw	r5,140(sp)
 4017388:	070001c4 	movi	fp,7
 401738c:	00000506 	br	40173a4 <___vfiprintf_internal_r+0xc40>
 4017390:	21400084 	addi	r5,r4,2
 4017394:	42000204 	addi	r8,r8,8
 4017398:	1809883a 	mov	r4,r3
 401739c:	843ffc04 	addi	r16,r16,-16
 40173a0:	ac000d0e 	bge	r21,r16,40173d8 <___vfiprintf_internal_r+0xc74>
 40173a4:	10800404 	addi	r2,r2,16
 40173a8:	20c00044 	addi	r3,r4,1
 40173ac:	44800015 	stw	r18,0(r8)
 40173b0:	45400115 	stw	r21,4(r8)
 40173b4:	d8801c15 	stw	r2,112(sp)
 40173b8:	d8c01b15 	stw	r3,108(sp)
 40173bc:	e0fff40e 	bge	fp,r3,4017390 <__alt_mem_onchip_memory2_0+0xfc0160f0>
 40173c0:	1000101e 	bne	r2,zero,4017404 <___vfiprintf_internal_r+0xca0>
 40173c4:	843ffc04 	addi	r16,r16,-16
 40173c8:	01400044 	movi	r5,1
 40173cc:	0009883a 	mov	r4,zero
 40173d0:	d811883a 	mov	r8,sp
 40173d4:	ac3ff316 	blt	r21,r16,40173a4 <__alt_mem_onchip_memory2_0+0xfc016104>
 40173d8:	d8c02317 	ldw	r3,140(sp)
 40173dc:	1405883a 	add	r2,r2,r16
 40173e0:	44000115 	stw	r16,4(r8)
 40173e4:	40c00015 	stw	r3,0(r8)
 40173e8:	d8801c15 	stw	r2,112(sp)
 40173ec:	d9401b15 	stw	r5,108(sp)
 40173f0:	00c001c4 	movi	r3,7
 40173f4:	19401916 	blt	r3,r5,401745c <___vfiprintf_internal_r+0xcf8>
 40173f8:	42000204 	addi	r8,r8,8
 40173fc:	29400044 	addi	r5,r5,1
 4017400:	003e5506 	br	4016d58 <__alt_mem_onchip_memory2_0+0xfc015ab8>
 4017404:	d9402017 	ldw	r5,128(sp)
 4017408:	d9002117 	ldw	r4,132(sp)
 401740c:	d9801a04 	addi	r6,sp,104
 4017410:	40166500 	call	4016650 <__sprint_r.part.0>
 4017414:	10000b1e 	bne	r2,zero,4017444 <___vfiprintf_internal_r+0xce0>
 4017418:	d9001b17 	ldw	r4,108(sp)
 401741c:	d8801c17 	ldw	r2,112(sp)
 4017420:	d811883a 	mov	r8,sp
 4017424:	21400044 	addi	r5,r4,1
 4017428:	003fdc06 	br	401739c <__alt_mem_onchip_memory2_0+0xfc0160fc>
 401742c:	d8801c17 	ldw	r2,112(sp)
 4017430:	10000426 	beq	r2,zero,4017444 <___vfiprintf_internal_r+0xce0>
 4017434:	d9402017 	ldw	r5,128(sp)
 4017438:	d9002117 	ldw	r4,132(sp)
 401743c:	d9801a04 	addi	r6,sp,104
 4017440:	40166500 	call	4016650 <__sprint_r.part.0>
 4017444:	d9402017 	ldw	r5,128(sp)
 4017448:	2880030b 	ldhu	r2,12(r5)
 401744c:	1080100c 	andi	r2,r2,64
 4017450:	10014d1e 	bne	r2,zero,4017988 <___vfiprintf_internal_r+0x1224>
 4017454:	d8802417 	ldw	r2,144(sp)
 4017458:	003d9706 	br	4016ab8 <__alt_mem_onchip_memory2_0+0xfc015818>
 401745c:	1000d21e 	bne	r2,zero,40177a8 <___vfiprintf_internal_r+0x1044>
 4017460:	00c00044 	movi	r3,1
 4017464:	a005883a 	mov	r2,r20
 4017468:	ddc00015 	stw	r23,0(sp)
 401746c:	dd000115 	stw	r20,4(sp)
 4017470:	dd001c15 	stw	r20,112(sp)
 4017474:	d8c01b15 	stw	r3,108(sp)
 4017478:	d811883a 	mov	r8,sp
 401747c:	42000204 	addi	r8,r8,8
 4017480:	8c40010c 	andi	r17,r17,4
 4017484:	88004026 	beq	r17,zero,4017588 <___vfiprintf_internal_r+0xe24>
 4017488:	d9002517 	ldw	r4,148(sp)
 401748c:	24e3c83a 	sub	r17,r4,r19
 4017490:	04403d0e 	bge	zero,r17,4017588 <___vfiprintf_internal_r+0xe24>
 4017494:	04000404 	movi	r16,16
 4017498:	8441a90e 	bge	r16,r17,4017b40 <___vfiprintf_internal_r+0x13dc>
 401749c:	00c100b4 	movhi	r3,1026
 40174a0:	18de2104 	addi	r3,r3,30852
 40174a4:	d9001b17 	ldw	r4,108(sp)
 40174a8:	d8c02315 	stw	r3,140(sp)
 40174ac:	050001c4 	movi	r20,7
 40174b0:	dd402117 	ldw	r21,132(sp)
 40174b4:	ddc02017 	ldw	r23,128(sp)
 40174b8:	00000506 	br	40174d0 <___vfiprintf_internal_r+0xd6c>
 40174bc:	21400084 	addi	r5,r4,2
 40174c0:	42000204 	addi	r8,r8,8
 40174c4:	1809883a 	mov	r4,r3
 40174c8:	8c7ffc04 	addi	r17,r17,-16
 40174cc:	84400f0e 	bge	r16,r17,401750c <___vfiprintf_internal_r+0xda8>
 40174d0:	014100b4 	movhi	r5,1026
 40174d4:	10800404 	addi	r2,r2,16
 40174d8:	20c00044 	addi	r3,r4,1
 40174dc:	295e2104 	addi	r5,r5,30852
 40174e0:	41400015 	stw	r5,0(r8)
 40174e4:	44000115 	stw	r16,4(r8)
 40174e8:	d8801c15 	stw	r2,112(sp)
 40174ec:	d8c01b15 	stw	r3,108(sp)
 40174f0:	a0fff20e 	bge	r20,r3,40174bc <__alt_mem_onchip_memory2_0+0xfc01621c>
 40174f4:	1000141e 	bne	r2,zero,4017548 <___vfiprintf_internal_r+0xde4>
 40174f8:	8c7ffc04 	addi	r17,r17,-16
 40174fc:	01400044 	movi	r5,1
 4017500:	0009883a 	mov	r4,zero
 4017504:	d811883a 	mov	r8,sp
 4017508:	847ff116 	blt	r16,r17,40174d0 <__alt_mem_onchip_memory2_0+0xfc016230>
 401750c:	d8c02317 	ldw	r3,140(sp)
 4017510:	1445883a 	add	r2,r2,r17
 4017514:	44400115 	stw	r17,4(r8)
 4017518:	40c00015 	stw	r3,0(r8)
 401751c:	d8801c15 	stw	r2,112(sp)
 4017520:	d9401b15 	stw	r5,108(sp)
 4017524:	00c001c4 	movi	r3,7
 4017528:	1940170e 	bge	r3,r5,4017588 <___vfiprintf_internal_r+0xe24>
 401752c:	1000101e 	bne	r2,zero,4017570 <___vfiprintf_internal_r+0xe0c>
 4017530:	d8802517 	ldw	r2,148(sp)
 4017534:	14c11616 	blt	r2,r19,4017990 <___vfiprintf_internal_r+0x122c>
 4017538:	d9002417 	ldw	r4,144(sp)
 401753c:	2089883a 	add	r4,r4,r2
 4017540:	d9002415 	stw	r4,144(sp)
 4017544:	003e1806 	br	4016da8 <__alt_mem_onchip_memory2_0+0xfc015b08>
 4017548:	d9801a04 	addi	r6,sp,104
 401754c:	b80b883a 	mov	r5,r23
 4017550:	a809883a 	mov	r4,r21
 4017554:	40166500 	call	4016650 <__sprint_r.part.0>
 4017558:	103fba1e 	bne	r2,zero,4017444 <__alt_mem_onchip_memory2_0+0xfc0161a4>
 401755c:	d9001b17 	ldw	r4,108(sp)
 4017560:	d8801c17 	ldw	r2,112(sp)
 4017564:	d811883a 	mov	r8,sp
 4017568:	21400044 	addi	r5,r4,1
 401756c:	003fd606 	br	40174c8 <__alt_mem_onchip_memory2_0+0xfc016228>
 4017570:	d9402017 	ldw	r5,128(sp)
 4017574:	d9002117 	ldw	r4,132(sp)
 4017578:	d9801a04 	addi	r6,sp,104
 401757c:	40166500 	call	4016650 <__sprint_r.part.0>
 4017580:	103fb01e 	bne	r2,zero,4017444 <__alt_mem_onchip_memory2_0+0xfc0161a4>
 4017584:	d8801c17 	ldw	r2,112(sp)
 4017588:	d8c02517 	ldw	r3,148(sp)
 401758c:	1cc0010e 	bge	r3,r19,4017594 <___vfiprintf_internal_r+0xe30>
 4017590:	9807883a 	mov	r3,r19
 4017594:	d9002417 	ldw	r4,144(sp)
 4017598:	20c9883a 	add	r4,r4,r3
 401759c:	d9002415 	stw	r4,144(sp)
 40175a0:	103e0126 	beq	r2,zero,4016da8 <__alt_mem_onchip_memory2_0+0xfc015b08>
 40175a4:	d9402017 	ldw	r5,128(sp)
 40175a8:	d9002117 	ldw	r4,132(sp)
 40175ac:	d9801a04 	addi	r6,sp,104
 40175b0:	40166500 	call	4016650 <__sprint_r.part.0>
 40175b4:	103dfc26 	beq	r2,zero,4016da8 <__alt_mem_onchip_memory2_0+0xfc015b08>
 40175b8:	003fa206 	br	4017444 <__alt_mem_onchip_memory2_0+0xfc0161a4>
 40175bc:	d9402017 	ldw	r5,128(sp)
 40175c0:	d9002117 	ldw	r4,132(sp)
 40175c4:	d9801a04 	addi	r6,sp,104
 40175c8:	d9c02b15 	stw	r7,172(sp)
 40175cc:	40166500 	call	4016650 <__sprint_r.part.0>
 40175d0:	d9c02b17 	ldw	r7,172(sp)
 40175d4:	103f9b1e 	bne	r2,zero,4017444 <__alt_mem_onchip_memory2_0+0xfc0161a4>
 40175d8:	d9001b17 	ldw	r4,108(sp)
 40175dc:	d8801c17 	ldw	r2,112(sp)
 40175e0:	d811883a 	mov	r8,sp
 40175e4:	21800044 	addi	r6,r4,1
 40175e8:	003dbf06 	br	4016ce8 <__alt_mem_onchip_memory2_0+0xfc015a48>
 40175ec:	1000d81e 	bne	r2,zero,4017950 <___vfiprintf_internal_r+0x11ec>
 40175f0:	d9001d87 	ldb	r4,118(sp)
 40175f4:	20000a26 	beq	r4,zero,4017620 <___vfiprintf_internal_r+0xebc>
 40175f8:	00800044 	movi	r2,1
 40175fc:	d9001d84 	addi	r4,sp,118
 4017600:	100b883a 	mov	r5,r2
 4017604:	d9000015 	stw	r4,0(sp)
 4017608:	d8800115 	stw	r2,4(sp)
 401760c:	d811883a 	mov	r8,sp
 4017610:	2809883a 	mov	r4,r5
 4017614:	42000204 	addi	r8,r8,8
 4017618:	29400044 	addi	r5,r5,1
 401761c:	003d9506 	br	4016c74 <__alt_mem_onchip_memory2_0+0xfc0159d4>
 4017620:	3800fd26 	beq	r7,zero,4017a18 <___vfiprintf_internal_r+0x12b4>
 4017624:	00800084 	movi	r2,2
 4017628:	d9001d04 	addi	r4,sp,116
 401762c:	d9000015 	stw	r4,0(sp)
 4017630:	d8800115 	stw	r2,4(sp)
 4017634:	01400044 	movi	r5,1
 4017638:	d811883a 	mov	r8,sp
 401763c:	2809883a 	mov	r4,r5
 4017640:	42000204 	addi	r8,r8,8
 4017644:	29400044 	addi	r5,r5,1
 4017648:	003f4606 	br	4017364 <__alt_mem_onchip_memory2_0+0xfc0160c4>
 401764c:	d8802517 	ldw	r2,148(sp)
 4017650:	14c0010e 	bge	r2,r19,4017658 <___vfiprintf_internal_r+0xef4>
 4017654:	9805883a 	mov	r2,r19
 4017658:	d9402417 	ldw	r5,144(sp)
 401765c:	288b883a 	add	r5,r5,r2
 4017660:	d9402415 	stw	r5,144(sp)
 4017664:	003dd006 	br	4016da8 <__alt_mem_onchip_memory2_0+0xfc015b08>
 4017668:	d8001d85 	stb	zero,118(sp)
 401766c:	80005d16 	blt	r16,zero,40177e4 <___vfiprintf_internal_r+0x1080>
 4017670:	00ffdfc4 	movi	r3,-129
 4017674:	9d04b03a 	or	r2,r19,r20
 4017678:	88e2703a 	and	r17,r17,r3
 401767c:	103d3726 	beq	r2,zero,4016b5c <__alt_mem_onchip_memory2_0+0xfc0158bc>
 4017680:	002b883a 	mov	r21,zero
 4017684:	d9002617 	ldw	r4,152(sp)
 4017688:	ddc01a04 	addi	r23,sp,104
 401768c:	988003cc 	andi	r2,r19,15
 4017690:	a006973a 	slli	r3,r20,28
 4017694:	2085883a 	add	r2,r4,r2
 4017698:	9826d13a 	srli	r19,r19,4
 401769c:	10800003 	ldbu	r2,0(r2)
 40176a0:	a028d13a 	srli	r20,r20,4
 40176a4:	bdffffc4 	addi	r23,r23,-1
 40176a8:	1ce6b03a 	or	r19,r3,r19
 40176ac:	b8800005 	stb	r2,0(r23)
 40176b0:	9d04b03a 	or	r2,r19,r20
 40176b4:	103ff51e 	bne	r2,zero,401768c <__alt_mem_onchip_memory2_0+0xfc0163ec>
 40176b8:	d8801e17 	ldw	r2,120(sp)
 40176bc:	15e9c83a 	sub	r20,r2,r23
 40176c0:	003d2b06 	br	4016b70 <__alt_mem_onchip_memory2_0+0xfc0158d0>
 40176c4:	d9402017 	ldw	r5,128(sp)
 40176c8:	d9002117 	ldw	r4,132(sp)
 40176cc:	d9801a04 	addi	r6,sp,104
 40176d0:	40166500 	call	4016650 <__sprint_r.part.0>
 40176d4:	103f5b1e 	bne	r2,zero,4017444 <__alt_mem_onchip_memory2_0+0xfc0161a4>
 40176d8:	d8801c17 	ldw	r2,112(sp)
 40176dc:	d811883a 	mov	r8,sp
 40176e0:	003f6706 	br	4017480 <__alt_mem_onchip_memory2_0+0xfc0161e0>
 40176e4:	d9402017 	ldw	r5,128(sp)
 40176e8:	d9002117 	ldw	r4,132(sp)
 40176ec:	d9801a04 	addi	r6,sp,104
 40176f0:	40166500 	call	4016650 <__sprint_r.part.0>
 40176f4:	103f531e 	bne	r2,zero,4017444 <__alt_mem_onchip_memory2_0+0xfc0161a4>
 40176f8:	d811883a 	mov	r8,sp
 40176fc:	003cd906 	br	4016a64 <__alt_mem_onchip_memory2_0+0xfc0157c4>
 4017700:	10803fcc 	andi	r2,r2,255
 4017704:	1080201c 	xori	r2,r2,128
 4017708:	10bfe004 	addi	r2,r2,-128
 401770c:	00c00c04 	movi	r3,48
 4017710:	10ffe926 	beq	r2,r3,40176b8 <__alt_mem_onchip_memory2_0+0xfc016418>
 4017714:	b8ffffc5 	stb	r3,-1(r23)
 4017718:	d8c01e17 	ldw	r3,120(sp)
 401771c:	b8bfffc4 	addi	r2,r23,-1
 4017720:	102f883a 	mov	r23,r2
 4017724:	18a9c83a 	sub	r20,r3,r2
 4017728:	003d1106 	br	4016b70 <__alt_mem_onchip_memory2_0+0xfc0158d0>
 401772c:	d9402017 	ldw	r5,128(sp)
 4017730:	d9002117 	ldw	r4,132(sp)
 4017734:	d9801a04 	addi	r6,sp,104
 4017738:	d8c02a15 	stw	r3,168(sp)
 401773c:	d9c02b15 	stw	r7,172(sp)
 4017740:	40166500 	call	4016650 <__sprint_r.part.0>
 4017744:	d8c02a17 	ldw	r3,168(sp)
 4017748:	d9c02b17 	ldw	r7,172(sp)
 401774c:	103f3d1e 	bne	r2,zero,4017444 <__alt_mem_onchip_memory2_0+0xfc0161a4>
 4017750:	d9001b17 	ldw	r4,108(sp)
 4017754:	d8801c17 	ldw	r2,112(sp)
 4017758:	d811883a 	mov	r8,sp
 401775c:	21400044 	addi	r5,r4,1
 4017760:	003d4406 	br	4016c74 <__alt_mem_onchip_memory2_0+0xfc0159d4>
 4017764:	d9402017 	ldw	r5,128(sp)
 4017768:	d9002117 	ldw	r4,132(sp)
 401776c:	d9801a04 	addi	r6,sp,104
 4017770:	d8c02a15 	stw	r3,168(sp)
 4017774:	40166500 	call	4016650 <__sprint_r.part.0>
 4017778:	d8c02a17 	ldw	r3,168(sp)
 401777c:	103f311e 	bne	r2,zero,4017444 <__alt_mem_onchip_memory2_0+0xfc0161a4>
 4017780:	d9001b17 	ldw	r4,108(sp)
 4017784:	d8801c17 	ldw	r2,112(sp)
 4017788:	d811883a 	mov	r8,sp
 401778c:	21400044 	addi	r5,r4,1
 4017790:	003ef406 	br	4017364 <__alt_mem_onchip_memory2_0+0xfc0160c4>
 4017794:	1000bd1e 	bne	r2,zero,4017a8c <___vfiprintf_internal_r+0x1328>
 4017798:	01400044 	movi	r5,1
 401779c:	0009883a 	mov	r4,zero
 40177a0:	d811883a 	mov	r8,sp
 40177a4:	003ef106 	br	401736c <__alt_mem_onchip_memory2_0+0xfc0160cc>
 40177a8:	d9402017 	ldw	r5,128(sp)
 40177ac:	d9002117 	ldw	r4,132(sp)
 40177b0:	d9801a04 	addi	r6,sp,104
 40177b4:	40166500 	call	4016650 <__sprint_r.part.0>
 40177b8:	103f221e 	bne	r2,zero,4017444 <__alt_mem_onchip_memory2_0+0xfc0161a4>
 40177bc:	d9401b17 	ldw	r5,108(sp)
 40177c0:	d8801c17 	ldw	r2,112(sp)
 40177c4:	d811883a 	mov	r8,sp
 40177c8:	29400044 	addi	r5,r5,1
 40177cc:	003d6206 	br	4016d58 <__alt_mem_onchip_memory2_0+0xfc015ab8>
 40177d0:	014100b4 	movhi	r5,1026
 40177d4:	295dbd04 	addi	r5,r5,30452
 40177d8:	d9402615 	stw	r5,152(sp)
 40177dc:	d8c02215 	stw	r3,136(sp)
 40177e0:	1023883a 	mov	r17,r2
 40177e4:	9d04b03a 	or	r2,r19,r20
 40177e8:	103fa51e 	bne	r2,zero,4017680 <__alt_mem_onchip_memory2_0+0xfc0163e0>
 40177ec:	002b883a 	mov	r21,zero
 40177f0:	00800084 	movi	r2,2
 40177f4:	003e4a06 	br	4017120 <__alt_mem_onchip_memory2_0+0xfc015e80>
 40177f8:	014100b4 	movhi	r5,1026
 40177fc:	295dbd04 	addi	r5,r5,30452
 4017800:	002b883a 	mov	r21,zero
 4017804:	d9402615 	stw	r5,152(sp)
 4017808:	003f9e06 	br	4017684 <__alt_mem_onchip_memory2_0+0xfc0163e4>
 401780c:	d9402217 	ldw	r5,136(sp)
 4017810:	d8001d85 	stb	zero,118(sp)
 4017814:	0029883a 	mov	r20,zero
 4017818:	28800104 	addi	r2,r5,4
 401781c:	2cc00017 	ldw	r19,0(r5)
 4017820:	803e3a16 	blt	r16,zero,401710c <__alt_mem_onchip_memory2_0+0xfc015e6c>
 4017824:	00ffdfc4 	movi	r3,-129
 4017828:	d8802215 	stw	r2,136(sp)
 401782c:	88e2703a 	and	r17,r17,r3
 4017830:	002b883a 	mov	r21,zero
 4017834:	983e9b26 	beq	r19,zero,40172a4 <__alt_mem_onchip_memory2_0+0xfc016004>
 4017838:	00800244 	movi	r2,9
 401783c:	14fdc936 	bltu	r2,r19,4016f64 <__alt_mem_onchip_memory2_0+0xfc015cc4>
 4017840:	003e9a06 	br	40172ac <__alt_mem_onchip_memory2_0+0xfc01600c>
 4017844:	00800c04 	movi	r2,48
 4017848:	d8c01d45 	stb	r3,117(sp)
 401784c:	d8801d05 	stb	r2,116(sp)
 4017850:	d8001d85 	stb	zero,118(sp)
 4017854:	88c00094 	ori	r3,r17,2
 4017858:	80009c16 	blt	r16,zero,4017acc <___vfiprintf_internal_r+0x1368>
 401785c:	00bfdfc4 	movi	r2,-129
 4017860:	88a2703a 	and	r17,r17,r2
 4017864:	8c400094 	ori	r17,r17,2
 4017868:	002b883a 	mov	r21,zero
 401786c:	003f8506 	br	4017684 <__alt_mem_onchip_memory2_0+0xfc0163e4>
 4017870:	b029883a 	mov	r20,r22
 4017874:	003c0b06 	br	40168a4 <__alt_mem_onchip_memory2_0+0xfc015604>
 4017878:	04e7c83a 	sub	r19,zero,r19
 401787c:	05400b44 	movi	r21,45
 4017880:	9804c03a 	cmpne	r2,r19,zero
 4017884:	0529c83a 	sub	r20,zero,r20
 4017888:	dd401d85 	stb	r21,118(sp)
 401788c:	a0a9c83a 	sub	r20,r20,r2
 4017890:	80009716 	blt	r16,zero,4017af0 <___vfiprintf_internal_r+0x138c>
 4017894:	00bfdfc4 	movi	r2,-129
 4017898:	88a2703a 	and	r17,r17,r2
 401789c:	003db006 	br	4016f60 <__alt_mem_onchip_memory2_0+0xfc015cc0>
 40178a0:	b0c00007 	ldb	r3,0(r22)
 40178a4:	003c0c06 	br	40168d8 <__alt_mem_onchip_memory2_0+0xfc015638>
 40178a8:	8880100c 	andi	r2,r17,64
 40178ac:	d8001d85 	stb	zero,118(sp)
 40178b0:	1000461e 	bne	r2,zero,40179cc <___vfiprintf_internal_r+0x1268>
 40178b4:	d9002217 	ldw	r4,136(sp)
 40178b8:	0029883a 	mov	r20,zero
 40178bc:	20800104 	addi	r2,r4,4
 40178c0:	24c00017 	ldw	r19,0(r4)
 40178c4:	803df80e 	bge	r16,zero,40170a8 <__alt_mem_onchip_memory2_0+0xfc015e08>
 40178c8:	9d06b03a 	or	r3,r19,r20
 40178cc:	d8802215 	stw	r2,136(sp)
 40178d0:	183d5e1e 	bne	r3,zero,4016e4c <__alt_mem_onchip_memory2_0+0xfc015bac>
 40178d4:	002b883a 	mov	r21,zero
 40178d8:	0005883a 	mov	r2,zero
 40178dc:	003e1006 	br	4017120 <__alt_mem_onchip_memory2_0+0xfc015e80>
 40178e0:	8880040c 	andi	r2,r17,16
 40178e4:	1000321e 	bne	r2,zero,40179b0 <___vfiprintf_internal_r+0x124c>
 40178e8:	8c40100c 	andi	r17,r17,64
 40178ec:	88008d26 	beq	r17,zero,4017b24 <___vfiprintf_internal_r+0x13c0>
 40178f0:	d9402217 	ldw	r5,136(sp)
 40178f4:	d8c02417 	ldw	r3,144(sp)
 40178f8:	28800017 	ldw	r2,0(r5)
 40178fc:	29400104 	addi	r5,r5,4
 4017900:	d9402215 	stw	r5,136(sp)
 4017904:	10c0000d 	sth	r3,0(r2)
 4017908:	003bca06 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc015594>
 401790c:	8880100c 	andi	r2,r17,64
 4017910:	10003a26 	beq	r2,zero,40179fc <___vfiprintf_internal_r+0x1298>
 4017914:	d8802217 	ldw	r2,136(sp)
 4017918:	14c0000f 	ldh	r19,0(r2)
 401791c:	10800104 	addi	r2,r2,4
 4017920:	d8802215 	stw	r2,136(sp)
 4017924:	9829d7fa 	srai	r20,r19,31
 4017928:	a005883a 	mov	r2,r20
 401792c:	003d8506 	br	4016f44 <__alt_mem_onchip_memory2_0+0xfc015ca4>
 4017930:	8880100c 	andi	r2,r17,64
 4017934:	10002b26 	beq	r2,zero,40179e4 <___vfiprintf_internal_r+0x1280>
 4017938:	d8802217 	ldw	r2,136(sp)
 401793c:	0029883a 	mov	r20,zero
 4017940:	14c0000b 	ldhu	r19,0(r2)
 4017944:	10800104 	addi	r2,r2,4
 4017948:	d8802215 	stw	r2,136(sp)
 401794c:	003d5d06 	br	4016ec4 <__alt_mem_onchip_memory2_0+0xfc015c24>
 4017950:	d9402017 	ldw	r5,128(sp)
 4017954:	d9002117 	ldw	r4,132(sp)
 4017958:	d9801a04 	addi	r6,sp,104
 401795c:	d8c02a15 	stw	r3,168(sp)
 4017960:	d9c02b15 	stw	r7,172(sp)
 4017964:	40166500 	call	4016650 <__sprint_r.part.0>
 4017968:	d8c02a17 	ldw	r3,168(sp)
 401796c:	d9c02b17 	ldw	r7,172(sp)
 4017970:	103eb41e 	bne	r2,zero,4017444 <__alt_mem_onchip_memory2_0+0xfc0161a4>
 4017974:	d9001b17 	ldw	r4,108(sp)
 4017978:	d8801c17 	ldw	r2,112(sp)
 401797c:	d811883a 	mov	r8,sp
 4017980:	21400044 	addi	r5,r4,1
 4017984:	003e6706 	br	4017324 <__alt_mem_onchip_memory2_0+0xfc016084>
 4017988:	00bfffc4 	movi	r2,-1
 401798c:	003c4a06 	br	4016ab8 <__alt_mem_onchip_memory2_0+0xfc015818>
 4017990:	9805883a 	mov	r2,r19
 4017994:	003ee806 	br	4017538 <__alt_mem_onchip_memory2_0+0xfc016298>
 4017998:	d8c02217 	ldw	r3,136(sp)
 401799c:	0029883a 	mov	r20,zero
 40179a0:	18800104 	addi	r2,r3,4
 40179a4:	1cc0000b 	ldhu	r19,0(r3)
 40179a8:	803f9e0e 	bge	r16,zero,4017824 <__alt_mem_onchip_memory2_0+0xfc016584>
 40179ac:	003dd706 	br	401710c <__alt_mem_onchip_memory2_0+0xfc015e6c>
 40179b0:	d8c02217 	ldw	r3,136(sp)
 40179b4:	d9002417 	ldw	r4,144(sp)
 40179b8:	18800017 	ldw	r2,0(r3)
 40179bc:	18c00104 	addi	r3,r3,4
 40179c0:	d8c02215 	stw	r3,136(sp)
 40179c4:	11000015 	stw	r4,0(r2)
 40179c8:	003b9a06 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc015594>
 40179cc:	d8c02217 	ldw	r3,136(sp)
 40179d0:	0029883a 	mov	r20,zero
 40179d4:	18800104 	addi	r2,r3,4
 40179d8:	1cc0000b 	ldhu	r19,0(r3)
 40179dc:	803db20e 	bge	r16,zero,40170a8 <__alt_mem_onchip_memory2_0+0xfc015e08>
 40179e0:	003fb906 	br	40178c8 <__alt_mem_onchip_memory2_0+0xfc016628>
 40179e4:	d9002217 	ldw	r4,136(sp)
 40179e8:	0029883a 	mov	r20,zero
 40179ec:	24c00017 	ldw	r19,0(r4)
 40179f0:	21000104 	addi	r4,r4,4
 40179f4:	d9002215 	stw	r4,136(sp)
 40179f8:	003d3206 	br	4016ec4 <__alt_mem_onchip_memory2_0+0xfc015c24>
 40179fc:	d8c02217 	ldw	r3,136(sp)
 4017a00:	1cc00017 	ldw	r19,0(r3)
 4017a04:	18c00104 	addi	r3,r3,4
 4017a08:	d8c02215 	stw	r3,136(sp)
 4017a0c:	9829d7fa 	srai	r20,r19,31
 4017a10:	a005883a 	mov	r2,r20
 4017a14:	003d4b06 	br	4016f44 <__alt_mem_onchip_memory2_0+0xfc015ca4>
 4017a18:	0009883a 	mov	r4,zero
 4017a1c:	01400044 	movi	r5,1
 4017a20:	d811883a 	mov	r8,sp
 4017a24:	003e4f06 	br	4017364 <__alt_mem_onchip_memory2_0+0xfc0160c4>
 4017a28:	d8c02215 	stw	r3,136(sp)
 4017a2c:	002b883a 	mov	r21,zero
 4017a30:	003db806 	br	4017114 <__alt_mem_onchip_memory2_0+0xfc015e74>
 4017a34:	d811883a 	mov	r8,sp
 4017a38:	003e9606 	br	4017494 <__alt_mem_onchip_memory2_0+0xfc0161f4>
 4017a3c:	010100b4 	movhi	r4,1026
 4017a40:	211e1d04 	addi	r4,r4,30836
 4017a44:	d9002315 	stw	r4,140(sp)
 4017a48:	003e6306 	br	40173d8 <__alt_mem_onchip_memory2_0+0xfc016138>
 4017a4c:	b0c00043 	ldbu	r3,1(r22)
 4017a50:	8c400814 	ori	r17,r17,32
 4017a54:	b5800044 	addi	r22,r22,1
 4017a58:	18c03fcc 	andi	r3,r3,255
 4017a5c:	18c0201c 	xori	r3,r3,128
 4017a60:	18ffe004 	addi	r3,r3,-128
 4017a64:	003b9c06 	br	40168d8 <__alt_mem_onchip_memory2_0+0xfc015638>
 4017a68:	b809883a 	mov	r4,r23
 4017a6c:	da002a15 	stw	r8,168(sp)
 4017a70:	400f9100 	call	400f910 <strlen>
 4017a74:	1029883a 	mov	r20,r2
 4017a78:	dd401d83 	ldbu	r21,118(sp)
 4017a7c:	df002215 	stw	fp,136(sp)
 4017a80:	0021883a 	mov	r16,zero
 4017a84:	da002a17 	ldw	r8,168(sp)
 4017a88:	003c3906 	br	4016b70 <__alt_mem_onchip_memory2_0+0xfc0158d0>
 4017a8c:	d9402017 	ldw	r5,128(sp)
 4017a90:	d9002117 	ldw	r4,132(sp)
 4017a94:	d9801a04 	addi	r6,sp,104
 4017a98:	40166500 	call	4016650 <__sprint_r.part.0>
 4017a9c:	103e691e 	bne	r2,zero,4017444 <__alt_mem_onchip_memory2_0+0xfc0161a4>
 4017aa0:	d9001b17 	ldw	r4,108(sp)
 4017aa4:	d8801c17 	ldw	r2,112(sp)
 4017aa8:	d811883a 	mov	r8,sp
 4017aac:	21400044 	addi	r5,r4,1
 4017ab0:	003e2e06 	br	401736c <__alt_mem_onchip_memory2_0+0xfc0160cc>
 4017ab4:	010100b4 	movhi	r4,1026
 4017ab8:	211e2104 	addi	r4,r4,30852
 4017abc:	d9002315 	stw	r4,140(sp)
 4017ac0:	d9001b17 	ldw	r4,108(sp)
 4017ac4:	21000044 	addi	r4,r4,1
 4017ac8:	003c5e06 	br	4016c44 <__alt_mem_onchip_memory2_0+0xfc0159a4>
 4017acc:	002b883a 	mov	r21,zero
 4017ad0:	00800084 	movi	r2,2
 4017ad4:	10803fcc 	andi	r2,r2,255
 4017ad8:	01000044 	movi	r4,1
 4017adc:	11002b26 	beq	r2,r4,4017b8c <___vfiprintf_internal_r+0x1428>
 4017ae0:	01000084 	movi	r4,2
 4017ae4:	11002b1e 	bne	r2,r4,4017b94 <___vfiprintf_internal_r+0x1430>
 4017ae8:	1823883a 	mov	r17,r3
 4017aec:	003ee506 	br	4017684 <__alt_mem_onchip_memory2_0+0xfc0163e4>
 4017af0:	8807883a 	mov	r3,r17
 4017af4:	00800044 	movi	r2,1
 4017af8:	003ff606 	br	4017ad4 <__alt_mem_onchip_memory2_0+0xfc016834>
 4017afc:	00800184 	movi	r2,6
 4017b00:	1400012e 	bgeu	r2,r16,4017b08 <___vfiprintf_internal_r+0x13a4>
 4017b04:	1021883a 	mov	r16,r2
 4017b08:	8029883a 	mov	r20,r16
 4017b0c:	8027883a 	mov	r19,r16
 4017b10:	80002216 	blt	r16,zero,4017b9c <___vfiprintf_internal_r+0x1438>
 4017b14:	05c100b4 	movhi	r23,1026
 4017b18:	df002215 	stw	fp,136(sp)
 4017b1c:	bdddc204 	addi	r23,r23,30472
 4017b20:	003cfb06 	br	4016f10 <__alt_mem_onchip_memory2_0+0xfc015c70>
 4017b24:	d9002217 	ldw	r4,136(sp)
 4017b28:	d9402417 	ldw	r5,144(sp)
 4017b2c:	20800017 	ldw	r2,0(r4)
 4017b30:	21000104 	addi	r4,r4,4
 4017b34:	d9002215 	stw	r4,136(sp)
 4017b38:	11400015 	stw	r5,0(r2)
 4017b3c:	003b3d06 	br	4016834 <__alt_mem_onchip_memory2_0+0xfc015594>
 4017b40:	014100b4 	movhi	r5,1026
 4017b44:	295e2104 	addi	r5,r5,30852
 4017b48:	d9402315 	stw	r5,140(sp)
 4017b4c:	d9401b17 	ldw	r5,108(sp)
 4017b50:	29400044 	addi	r5,r5,1
 4017b54:	003e6d06 	br	401750c <__alt_mem_onchip_memory2_0+0xfc01626c>
 4017b58:	8029883a 	mov	r20,r16
 4017b5c:	dd401d83 	ldbu	r21,118(sp)
 4017b60:	df002215 	stw	fp,136(sp)
 4017b64:	0021883a 	mov	r16,zero
 4017b68:	003c0106 	br	4016b70 <__alt_mem_onchip_memory2_0+0xfc0158d0>
 4017b6c:	00c100b4 	movhi	r3,1026
 4017b70:	18de1d04 	addi	r3,r3,30836
 4017b74:	d8c02315 	stw	r3,140(sp)
 4017b78:	280d883a 	mov	r6,r5
 4017b7c:	003c6906 	br	4016d24 <__alt_mem_onchip_memory2_0+0xfc015a84>
 4017b80:	802d883a 	mov	r22,r16
 4017b84:	0021883a 	mov	r16,zero
 4017b88:	003b5406 	br	40168dc <__alt_mem_onchip_memory2_0+0xfc01563c>
 4017b8c:	1823883a 	mov	r17,r3
 4017b90:	003cf306 	br	4016f60 <__alt_mem_onchip_memory2_0+0xfc015cc0>
 4017b94:	1823883a 	mov	r17,r3
 4017b98:	003cad06 	br	4016e50 <__alt_mem_onchip_memory2_0+0xfc015bb0>
 4017b9c:	0027883a 	mov	r19,zero
 4017ba0:	003fdc06 	br	4017b14 <__alt_mem_onchip_memory2_0+0xfc016874>
 4017ba4:	d9402217 	ldw	r5,136(sp)
 4017ba8:	8005883a 	mov	r2,r16
 4017bac:	b0c00043 	ldbu	r3,1(r22)
 4017bb0:	2c000017 	ldw	r16,0(r5)
 4017bb4:	29000104 	addi	r4,r5,4
 4017bb8:	d9002215 	stw	r4,136(sp)
 4017bbc:	102d883a 	mov	r22,r2
 4017bc0:	803fa50e 	bge	r16,zero,4017a58 <__alt_mem_onchip_memory2_0+0xfc0167b8>
 4017bc4:	18c03fcc 	andi	r3,r3,255
 4017bc8:	18c0201c 	xori	r3,r3,128
 4017bcc:	043fffc4 	movi	r16,-1
 4017bd0:	18ffe004 	addi	r3,r3,-128
 4017bd4:	003b4006 	br	40168d8 <__alt_mem_onchip_memory2_0+0xfc015638>
 4017bd8:	d9402303 	ldbu	r5,140(sp)
 4017bdc:	d9401d85 	stb	r5,118(sp)
 4017be0:	003cae06 	br	4016e9c <__alt_mem_onchip_memory2_0+0xfc015bfc>
 4017be4:	d8c02303 	ldbu	r3,140(sp)
 4017be8:	d8c01d85 	stb	r3,118(sp)
 4017bec:	003d1406 	br	4017040 <__alt_mem_onchip_memory2_0+0xfc015da0>
 4017bf0:	d8c02303 	ldbu	r3,140(sp)
 4017bf4:	d8c01d85 	stb	r3,118(sp)
 4017bf8:	003cca06 	br	4016f24 <__alt_mem_onchip_memory2_0+0xfc015c84>
 4017bfc:	8880004c 	andi	r2,r17,1
 4017c00:	002b883a 	mov	r21,zero
 4017c04:	10000526 	beq	r2,zero,4017c1c <___vfiprintf_internal_r+0x14b8>
 4017c08:	00800c04 	movi	r2,48
 4017c0c:	d88019c5 	stb	r2,103(sp)
 4017c10:	dd002817 	ldw	r20,160(sp)
 4017c14:	ddc019c4 	addi	r23,sp,103
 4017c18:	003bd506 	br	4016b70 <__alt_mem_onchip_memory2_0+0xfc0158d0>
 4017c1c:	0029883a 	mov	r20,zero
 4017c20:	ddc01a04 	addi	r23,sp,104
 4017c24:	003bd206 	br	4016b70 <__alt_mem_onchip_memory2_0+0xfc0158d0>
 4017c28:	d9002303 	ldbu	r4,140(sp)
 4017c2c:	d9001d85 	stb	r4,118(sp)
 4017c30:	003da606 	br	40172cc <__alt_mem_onchip_memory2_0+0xfc01602c>
 4017c34:	d8c02303 	ldbu	r3,140(sp)
 4017c38:	d8c01d85 	stb	r3,118(sp)
 4017c3c:	003c7606 	br	4016e18 <__alt_mem_onchip_memory2_0+0xfc015b78>
 4017c40:	d8c02303 	ldbu	r3,140(sp)
 4017c44:	d8c01d85 	stb	r3,118(sp)
 4017c48:	003c6506 	br	4016de0 <__alt_mem_onchip_memory2_0+0xfc015b40>
 4017c4c:	d9002303 	ldbu	r4,140(sp)
 4017c50:	d9001d85 	stb	r4,118(sp)
 4017c54:	003d3d06 	br	401714c <__alt_mem_onchip_memory2_0+0xfc015eac>
 4017c58:	d8c02303 	ldbu	r3,140(sp)
 4017c5c:	d8c01d85 	stb	r3,118(sp)
 4017c60:	003d1d06 	br	40170d8 <__alt_mem_onchip_memory2_0+0xfc015e38>
 4017c64:	d8c02303 	ldbu	r3,140(sp)
 4017c68:	d8c01d85 	stb	r3,118(sp)
 4017c6c:	003d0306 	br	401707c <__alt_mem_onchip_memory2_0+0xfc015ddc>

04017c70 <__vfiprintf_internal>:
 4017c70:	008100f4 	movhi	r2,1027
 4017c74:	10aaa304 	addi	r2,r2,-21876
 4017c78:	300f883a 	mov	r7,r6
 4017c7c:	280d883a 	mov	r6,r5
 4017c80:	200b883a 	mov	r5,r4
 4017c84:	11000017 	ldw	r4,0(r2)
 4017c88:	40167641 	jmpi	4016764 <___vfiprintf_internal_r>

04017c8c <__sbprintf>:
 4017c8c:	2880030b 	ldhu	r2,12(r5)
 4017c90:	2ac01917 	ldw	r11,100(r5)
 4017c94:	2a80038b 	ldhu	r10,14(r5)
 4017c98:	2a400717 	ldw	r9,28(r5)
 4017c9c:	2a000917 	ldw	r8,36(r5)
 4017ca0:	defee204 	addi	sp,sp,-1144
 4017ca4:	00c10004 	movi	r3,1024
 4017ca8:	dc011a15 	stw	r16,1128(sp)
 4017cac:	10bfff4c 	andi	r2,r2,65533
 4017cb0:	2821883a 	mov	r16,r5
 4017cb4:	d8cb883a 	add	r5,sp,r3
 4017cb8:	dc811c15 	stw	r18,1136(sp)
 4017cbc:	dc411b15 	stw	r17,1132(sp)
 4017cc0:	dfc11d15 	stw	ra,1140(sp)
 4017cc4:	2025883a 	mov	r18,r4
 4017cc8:	d881030d 	sth	r2,1036(sp)
 4017ccc:	dac11915 	stw	r11,1124(sp)
 4017cd0:	da81038d 	sth	r10,1038(sp)
 4017cd4:	da410715 	stw	r9,1052(sp)
 4017cd8:	da010915 	stw	r8,1060(sp)
 4017cdc:	dec10015 	stw	sp,1024(sp)
 4017ce0:	dec10415 	stw	sp,1040(sp)
 4017ce4:	d8c10215 	stw	r3,1032(sp)
 4017ce8:	d8c10515 	stw	r3,1044(sp)
 4017cec:	d8010615 	stw	zero,1048(sp)
 4017cf0:	40167640 	call	4016764 <___vfiprintf_internal_r>
 4017cf4:	1023883a 	mov	r17,r2
 4017cf8:	10000416 	blt	r2,zero,4017d0c <__sbprintf+0x80>
 4017cfc:	d9410004 	addi	r5,sp,1024
 4017d00:	9009883a 	mov	r4,r18
 4017d04:	40139840 	call	4013984 <_fflush_r>
 4017d08:	10000d1e 	bne	r2,zero,4017d40 <__sbprintf+0xb4>
 4017d0c:	d881030b 	ldhu	r2,1036(sp)
 4017d10:	1080100c 	andi	r2,r2,64
 4017d14:	10000326 	beq	r2,zero,4017d24 <__sbprintf+0x98>
 4017d18:	8080030b 	ldhu	r2,12(r16)
 4017d1c:	10801014 	ori	r2,r2,64
 4017d20:	8080030d 	sth	r2,12(r16)
 4017d24:	8805883a 	mov	r2,r17
 4017d28:	dfc11d17 	ldw	ra,1140(sp)
 4017d2c:	dc811c17 	ldw	r18,1136(sp)
 4017d30:	dc411b17 	ldw	r17,1132(sp)
 4017d34:	dc011a17 	ldw	r16,1128(sp)
 4017d38:	dec11e04 	addi	sp,sp,1144
 4017d3c:	f800283a 	ret
 4017d40:	047fffc4 	movi	r17,-1
 4017d44:	003ff106 	br	4017d0c <__alt_mem_onchip_memory2_0+0xfc016a6c>

04017d48 <__swbuf_r>:
 4017d48:	defffb04 	addi	sp,sp,-20
 4017d4c:	dcc00315 	stw	r19,12(sp)
 4017d50:	dc800215 	stw	r18,8(sp)
 4017d54:	dc000015 	stw	r16,0(sp)
 4017d58:	dfc00415 	stw	ra,16(sp)
 4017d5c:	dc400115 	stw	r17,4(sp)
 4017d60:	2025883a 	mov	r18,r4
 4017d64:	2827883a 	mov	r19,r5
 4017d68:	3021883a 	mov	r16,r6
 4017d6c:	20000226 	beq	r4,zero,4017d78 <__swbuf_r+0x30>
 4017d70:	20800e17 	ldw	r2,56(r4)
 4017d74:	10004226 	beq	r2,zero,4017e80 <__swbuf_r+0x138>
 4017d78:	80800617 	ldw	r2,24(r16)
 4017d7c:	8100030b 	ldhu	r4,12(r16)
 4017d80:	80800215 	stw	r2,8(r16)
 4017d84:	2080020c 	andi	r2,r4,8
 4017d88:	10003626 	beq	r2,zero,4017e64 <__swbuf_r+0x11c>
 4017d8c:	80c00417 	ldw	r3,16(r16)
 4017d90:	18003426 	beq	r3,zero,4017e64 <__swbuf_r+0x11c>
 4017d94:	2088000c 	andi	r2,r4,8192
 4017d98:	9c403fcc 	andi	r17,r19,255
 4017d9c:	10001a26 	beq	r2,zero,4017e08 <__swbuf_r+0xc0>
 4017da0:	80800017 	ldw	r2,0(r16)
 4017da4:	81000517 	ldw	r4,20(r16)
 4017da8:	10c7c83a 	sub	r3,r2,r3
 4017dac:	1900200e 	bge	r3,r4,4017e30 <__swbuf_r+0xe8>
 4017db0:	18c00044 	addi	r3,r3,1
 4017db4:	81000217 	ldw	r4,8(r16)
 4017db8:	11400044 	addi	r5,r2,1
 4017dbc:	81400015 	stw	r5,0(r16)
 4017dc0:	213fffc4 	addi	r4,r4,-1
 4017dc4:	81000215 	stw	r4,8(r16)
 4017dc8:	14c00005 	stb	r19,0(r2)
 4017dcc:	80800517 	ldw	r2,20(r16)
 4017dd0:	10c01e26 	beq	r2,r3,4017e4c <__swbuf_r+0x104>
 4017dd4:	8080030b 	ldhu	r2,12(r16)
 4017dd8:	1080004c 	andi	r2,r2,1
 4017ddc:	10000226 	beq	r2,zero,4017de8 <__swbuf_r+0xa0>
 4017de0:	00800284 	movi	r2,10
 4017de4:	88801926 	beq	r17,r2,4017e4c <__swbuf_r+0x104>
 4017de8:	8805883a 	mov	r2,r17
 4017dec:	dfc00417 	ldw	ra,16(sp)
 4017df0:	dcc00317 	ldw	r19,12(sp)
 4017df4:	dc800217 	ldw	r18,8(sp)
 4017df8:	dc400117 	ldw	r17,4(sp)
 4017dfc:	dc000017 	ldw	r16,0(sp)
 4017e00:	dec00504 	addi	sp,sp,20
 4017e04:	f800283a 	ret
 4017e08:	81401917 	ldw	r5,100(r16)
 4017e0c:	00b7ffc4 	movi	r2,-8193
 4017e10:	21080014 	ori	r4,r4,8192
 4017e14:	2884703a 	and	r2,r5,r2
 4017e18:	80801915 	stw	r2,100(r16)
 4017e1c:	80800017 	ldw	r2,0(r16)
 4017e20:	8100030d 	sth	r4,12(r16)
 4017e24:	81000517 	ldw	r4,20(r16)
 4017e28:	10c7c83a 	sub	r3,r2,r3
 4017e2c:	193fe016 	blt	r3,r4,4017db0 <__alt_mem_onchip_memory2_0+0xfc016b10>
 4017e30:	800b883a 	mov	r5,r16
 4017e34:	9009883a 	mov	r4,r18
 4017e38:	40139840 	call	4013984 <_fflush_r>
 4017e3c:	1000071e 	bne	r2,zero,4017e5c <__swbuf_r+0x114>
 4017e40:	80800017 	ldw	r2,0(r16)
 4017e44:	00c00044 	movi	r3,1
 4017e48:	003fda06 	br	4017db4 <__alt_mem_onchip_memory2_0+0xfc016b14>
 4017e4c:	800b883a 	mov	r5,r16
 4017e50:	9009883a 	mov	r4,r18
 4017e54:	40139840 	call	4013984 <_fflush_r>
 4017e58:	103fe326 	beq	r2,zero,4017de8 <__alt_mem_onchip_memory2_0+0xfc016b48>
 4017e5c:	00bfffc4 	movi	r2,-1
 4017e60:	003fe206 	br	4017dec <__alt_mem_onchip_memory2_0+0xfc016b4c>
 4017e64:	800b883a 	mov	r5,r16
 4017e68:	9009883a 	mov	r4,r18
 4017e6c:	4011d640 	call	4011d64 <__swsetup_r>
 4017e70:	103ffa1e 	bne	r2,zero,4017e5c <__alt_mem_onchip_memory2_0+0xfc016bbc>
 4017e74:	8100030b 	ldhu	r4,12(r16)
 4017e78:	80c00417 	ldw	r3,16(r16)
 4017e7c:	003fc506 	br	4017d94 <__alt_mem_onchip_memory2_0+0xfc016af4>
 4017e80:	4013d700 	call	4013d70 <__sinit>
 4017e84:	003fbc06 	br	4017d78 <__alt_mem_onchip_memory2_0+0xfc016ad8>

04017e88 <__swbuf>:
 4017e88:	008100f4 	movhi	r2,1027
 4017e8c:	10aaa304 	addi	r2,r2,-21876
 4017e90:	280d883a 	mov	r6,r5
 4017e94:	200b883a 	mov	r5,r4
 4017e98:	11000017 	ldw	r4,0(r2)
 4017e9c:	4017d481 	jmpi	4017d48 <__swbuf_r>

04017ea0 <_write_r>:
 4017ea0:	defffd04 	addi	sp,sp,-12
 4017ea4:	2805883a 	mov	r2,r5
 4017ea8:	dc000015 	stw	r16,0(sp)
 4017eac:	040100f4 	movhi	r16,1027
 4017eb0:	dc400115 	stw	r17,4(sp)
 4017eb4:	300b883a 	mov	r5,r6
 4017eb8:	84373504 	addi	r16,r16,-9004
 4017ebc:	2023883a 	mov	r17,r4
 4017ec0:	380d883a 	mov	r6,r7
 4017ec4:	1009883a 	mov	r4,r2
 4017ec8:	dfc00215 	stw	ra,8(sp)
 4017ecc:	80000015 	stw	zero,0(r16)
 4017ed0:	401c5cc0 	call	401c5cc <write>
 4017ed4:	00ffffc4 	movi	r3,-1
 4017ed8:	10c00526 	beq	r2,r3,4017ef0 <_write_r+0x50>
 4017edc:	dfc00217 	ldw	ra,8(sp)
 4017ee0:	dc400117 	ldw	r17,4(sp)
 4017ee4:	dc000017 	ldw	r16,0(sp)
 4017ee8:	dec00304 	addi	sp,sp,12
 4017eec:	f800283a 	ret
 4017ef0:	80c00017 	ldw	r3,0(r16)
 4017ef4:	183ff926 	beq	r3,zero,4017edc <__alt_mem_onchip_memory2_0+0xfc016c3c>
 4017ef8:	88c00015 	stw	r3,0(r17)
 4017efc:	003ff706 	br	4017edc <__alt_mem_onchip_memory2_0+0xfc016c3c>

04017f00 <_close_r>:
 4017f00:	defffd04 	addi	sp,sp,-12
 4017f04:	dc000015 	stw	r16,0(sp)
 4017f08:	040100f4 	movhi	r16,1027
 4017f0c:	dc400115 	stw	r17,4(sp)
 4017f10:	84373504 	addi	r16,r16,-9004
 4017f14:	2023883a 	mov	r17,r4
 4017f18:	2809883a 	mov	r4,r5
 4017f1c:	dfc00215 	stw	ra,8(sp)
 4017f20:	80000015 	stw	zero,0(r16)
 4017f24:	401bad00 	call	401bad0 <close>
 4017f28:	00ffffc4 	movi	r3,-1
 4017f2c:	10c00526 	beq	r2,r3,4017f44 <_close_r+0x44>
 4017f30:	dfc00217 	ldw	ra,8(sp)
 4017f34:	dc400117 	ldw	r17,4(sp)
 4017f38:	dc000017 	ldw	r16,0(sp)
 4017f3c:	dec00304 	addi	sp,sp,12
 4017f40:	f800283a 	ret
 4017f44:	80c00017 	ldw	r3,0(r16)
 4017f48:	183ff926 	beq	r3,zero,4017f30 <__alt_mem_onchip_memory2_0+0xfc016c90>
 4017f4c:	88c00015 	stw	r3,0(r17)
 4017f50:	003ff706 	br	4017f30 <__alt_mem_onchip_memory2_0+0xfc016c90>

04017f54 <_calloc_r>:
 4017f54:	defffe04 	addi	sp,sp,-8
 4017f58:	2805883a 	mov	r2,r5
 4017f5c:	dc000015 	stw	r16,0(sp)
 4017f60:	300b883a 	mov	r5,r6
 4017f64:	2021883a 	mov	r16,r4
 4017f68:	1009883a 	mov	r4,r2
 4017f6c:	dfc00115 	stw	ra,4(sp)
 4017f70:	400d7980 	call	400d798 <__mulsi3>
 4017f74:	100b883a 	mov	r5,r2
 4017f78:	8009883a 	mov	r4,r16
 4017f7c:	400e9000 	call	400e900 <_malloc_r>
 4017f80:	10002926 	beq	r2,zero,4018028 <_calloc_r+0xd4>
 4017f84:	11bfff17 	ldw	r6,-4(r2)
 4017f88:	1021883a 	mov	r16,r2
 4017f8c:	00bfff04 	movi	r2,-4
 4017f90:	308c703a 	and	r6,r6,r2
 4017f94:	00c00904 	movi	r3,36
 4017f98:	308d883a 	add	r6,r6,r2
 4017f9c:	19801636 	bltu	r3,r6,4017ff8 <_calloc_r+0xa4>
 4017fa0:	008004c4 	movi	r2,19
 4017fa4:	11800b2e 	bgeu	r2,r6,4017fd4 <_calloc_r+0x80>
 4017fa8:	80000015 	stw	zero,0(r16)
 4017fac:	80000115 	stw	zero,4(r16)
 4017fb0:	008006c4 	movi	r2,27
 4017fb4:	11801a2e 	bgeu	r2,r6,4018020 <_calloc_r+0xcc>
 4017fb8:	80000215 	stw	zero,8(r16)
 4017fbc:	80000315 	stw	zero,12(r16)
 4017fc0:	30c0151e 	bne	r6,r3,4018018 <_calloc_r+0xc4>
 4017fc4:	80000415 	stw	zero,16(r16)
 4017fc8:	80800604 	addi	r2,r16,24
 4017fcc:	80000515 	stw	zero,20(r16)
 4017fd0:	00000106 	br	4017fd8 <_calloc_r+0x84>
 4017fd4:	8005883a 	mov	r2,r16
 4017fd8:	10000015 	stw	zero,0(r2)
 4017fdc:	10000115 	stw	zero,4(r2)
 4017fe0:	10000215 	stw	zero,8(r2)
 4017fe4:	8005883a 	mov	r2,r16
 4017fe8:	dfc00117 	ldw	ra,4(sp)
 4017fec:	dc000017 	ldw	r16,0(sp)
 4017ff0:	dec00204 	addi	sp,sp,8
 4017ff4:	f800283a 	ret
 4017ff8:	000b883a 	mov	r5,zero
 4017ffc:	8009883a 	mov	r4,r16
 4018000:	400f2540 	call	400f254 <memset>
 4018004:	8005883a 	mov	r2,r16
 4018008:	dfc00117 	ldw	ra,4(sp)
 401800c:	dc000017 	ldw	r16,0(sp)
 4018010:	dec00204 	addi	sp,sp,8
 4018014:	f800283a 	ret
 4018018:	80800404 	addi	r2,r16,16
 401801c:	003fee06 	br	4017fd8 <__alt_mem_onchip_memory2_0+0xfc016d38>
 4018020:	80800204 	addi	r2,r16,8
 4018024:	003fec06 	br	4017fd8 <__alt_mem_onchip_memory2_0+0xfc016d38>
 4018028:	0005883a 	mov	r2,zero
 401802c:	003fee06 	br	4017fe8 <__alt_mem_onchip_memory2_0+0xfc016d48>

04018030 <_fclose_r>:
 4018030:	28003926 	beq	r5,zero,4018118 <_fclose_r+0xe8>
 4018034:	defffc04 	addi	sp,sp,-16
 4018038:	dc400115 	stw	r17,4(sp)
 401803c:	dc000015 	stw	r16,0(sp)
 4018040:	dfc00315 	stw	ra,12(sp)
 4018044:	dc800215 	stw	r18,8(sp)
 4018048:	2023883a 	mov	r17,r4
 401804c:	2821883a 	mov	r16,r5
 4018050:	20000226 	beq	r4,zero,401805c <_fclose_r+0x2c>
 4018054:	20800e17 	ldw	r2,56(r4)
 4018058:	10002726 	beq	r2,zero,40180f8 <_fclose_r+0xc8>
 401805c:	8080030f 	ldh	r2,12(r16)
 4018060:	1000071e 	bne	r2,zero,4018080 <_fclose_r+0x50>
 4018064:	0005883a 	mov	r2,zero
 4018068:	dfc00317 	ldw	ra,12(sp)
 401806c:	dc800217 	ldw	r18,8(sp)
 4018070:	dc400117 	ldw	r17,4(sp)
 4018074:	dc000017 	ldw	r16,0(sp)
 4018078:	dec00404 	addi	sp,sp,16
 401807c:	f800283a 	ret
 4018080:	800b883a 	mov	r5,r16
 4018084:	8809883a 	mov	r4,r17
 4018088:	40137680 	call	4013768 <__sflush_r>
 401808c:	1025883a 	mov	r18,r2
 4018090:	80800b17 	ldw	r2,44(r16)
 4018094:	10000426 	beq	r2,zero,40180a8 <_fclose_r+0x78>
 4018098:	81400717 	ldw	r5,28(r16)
 401809c:	8809883a 	mov	r4,r17
 40180a0:	103ee83a 	callr	r2
 40180a4:	10001616 	blt	r2,zero,4018100 <_fclose_r+0xd0>
 40180a8:	8080030b 	ldhu	r2,12(r16)
 40180ac:	1080200c 	andi	r2,r2,128
 40180b0:	1000151e 	bne	r2,zero,4018108 <_fclose_r+0xd8>
 40180b4:	81400c17 	ldw	r5,48(r16)
 40180b8:	28000526 	beq	r5,zero,40180d0 <_fclose_r+0xa0>
 40180bc:	80801004 	addi	r2,r16,64
 40180c0:	28800226 	beq	r5,r2,40180cc <_fclose_r+0x9c>
 40180c4:	8809883a 	mov	r4,r17
 40180c8:	4013ee40 	call	4013ee4 <_free_r>
 40180cc:	80000c15 	stw	zero,48(r16)
 40180d0:	81401117 	ldw	r5,68(r16)
 40180d4:	28000326 	beq	r5,zero,40180e4 <_fclose_r+0xb4>
 40180d8:	8809883a 	mov	r4,r17
 40180dc:	4013ee40 	call	4013ee4 <_free_r>
 40180e0:	80001115 	stw	zero,68(r16)
 40180e4:	4013d800 	call	4013d80 <__sfp_lock_acquire>
 40180e8:	8000030d 	sth	zero,12(r16)
 40180ec:	4013d840 	call	4013d84 <__sfp_lock_release>
 40180f0:	9005883a 	mov	r2,r18
 40180f4:	003fdc06 	br	4018068 <__alt_mem_onchip_memory2_0+0xfc016dc8>
 40180f8:	4013d700 	call	4013d70 <__sinit>
 40180fc:	003fd706 	br	401805c <__alt_mem_onchip_memory2_0+0xfc016dbc>
 4018100:	04bfffc4 	movi	r18,-1
 4018104:	003fe806 	br	40180a8 <__alt_mem_onchip_memory2_0+0xfc016e08>
 4018108:	81400417 	ldw	r5,16(r16)
 401810c:	8809883a 	mov	r4,r17
 4018110:	4013ee40 	call	4013ee4 <_free_r>
 4018114:	003fe706 	br	40180b4 <__alt_mem_onchip_memory2_0+0xfc016e14>
 4018118:	0005883a 	mov	r2,zero
 401811c:	f800283a 	ret

04018120 <fclose>:
 4018120:	008100f4 	movhi	r2,1027
 4018124:	10aaa304 	addi	r2,r2,-21876
 4018128:	200b883a 	mov	r5,r4
 401812c:	11000017 	ldw	r4,0(r2)
 4018130:	40180301 	jmpi	4018030 <_fclose_r>

04018134 <__fputwc>:
 4018134:	defff804 	addi	sp,sp,-32
 4018138:	dcc00415 	stw	r19,16(sp)
 401813c:	dc800315 	stw	r18,12(sp)
 4018140:	dc000115 	stw	r16,4(sp)
 4018144:	dfc00715 	stw	ra,28(sp)
 4018148:	dd400615 	stw	r21,24(sp)
 401814c:	dd000515 	stw	r20,20(sp)
 4018150:	dc400215 	stw	r17,8(sp)
 4018154:	2027883a 	mov	r19,r4
 4018158:	2825883a 	mov	r18,r5
 401815c:	3021883a 	mov	r16,r6
 4018160:	40148cc0 	call	40148cc <__locale_mb_cur_max>
 4018164:	00c00044 	movi	r3,1
 4018168:	10c03e26 	beq	r2,r3,4018264 <__fputwc+0x130>
 401816c:	81c01704 	addi	r7,r16,92
 4018170:	900d883a 	mov	r6,r18
 4018174:	d80b883a 	mov	r5,sp
 4018178:	9809883a 	mov	r4,r19
 401817c:	40184ac0 	call	40184ac <_wcrtomb_r>
 4018180:	1029883a 	mov	r20,r2
 4018184:	00bfffc4 	movi	r2,-1
 4018188:	a0802026 	beq	r20,r2,401820c <__fputwc+0xd8>
 401818c:	d9400003 	ldbu	r5,0(sp)
 4018190:	a0001c26 	beq	r20,zero,4018204 <__fputwc+0xd0>
 4018194:	0023883a 	mov	r17,zero
 4018198:	05400284 	movi	r21,10
 401819c:	00000906 	br	40181c4 <__fputwc+0x90>
 40181a0:	80800017 	ldw	r2,0(r16)
 40181a4:	11400005 	stb	r5,0(r2)
 40181a8:	80c00017 	ldw	r3,0(r16)
 40181ac:	18c00044 	addi	r3,r3,1
 40181b0:	80c00015 	stw	r3,0(r16)
 40181b4:	8c400044 	addi	r17,r17,1
 40181b8:	dc45883a 	add	r2,sp,r17
 40181bc:	8d00112e 	bgeu	r17,r20,4018204 <__fputwc+0xd0>
 40181c0:	11400003 	ldbu	r5,0(r2)
 40181c4:	80c00217 	ldw	r3,8(r16)
 40181c8:	18ffffc4 	addi	r3,r3,-1
 40181cc:	80c00215 	stw	r3,8(r16)
 40181d0:	183ff30e 	bge	r3,zero,40181a0 <__alt_mem_onchip_memory2_0+0xfc016f00>
 40181d4:	80800617 	ldw	r2,24(r16)
 40181d8:	18801916 	blt	r3,r2,4018240 <__fputwc+0x10c>
 40181dc:	80800017 	ldw	r2,0(r16)
 40181e0:	11400005 	stb	r5,0(r2)
 40181e4:	80800017 	ldw	r2,0(r16)
 40181e8:	10c00003 	ldbu	r3,0(r2)
 40181ec:	10800044 	addi	r2,r2,1
 40181f0:	1d402326 	beq	r3,r21,4018280 <__fputwc+0x14c>
 40181f4:	80800015 	stw	r2,0(r16)
 40181f8:	8c400044 	addi	r17,r17,1
 40181fc:	dc45883a 	add	r2,sp,r17
 4018200:	8d3fef36 	bltu	r17,r20,40181c0 <__alt_mem_onchip_memory2_0+0xfc016f20>
 4018204:	9005883a 	mov	r2,r18
 4018208:	00000406 	br	401821c <__fputwc+0xe8>
 401820c:	80c0030b 	ldhu	r3,12(r16)
 4018210:	a005883a 	mov	r2,r20
 4018214:	18c01014 	ori	r3,r3,64
 4018218:	80c0030d 	sth	r3,12(r16)
 401821c:	dfc00717 	ldw	ra,28(sp)
 4018220:	dd400617 	ldw	r21,24(sp)
 4018224:	dd000517 	ldw	r20,20(sp)
 4018228:	dcc00417 	ldw	r19,16(sp)
 401822c:	dc800317 	ldw	r18,12(sp)
 4018230:	dc400217 	ldw	r17,8(sp)
 4018234:	dc000117 	ldw	r16,4(sp)
 4018238:	dec00804 	addi	sp,sp,32
 401823c:	f800283a 	ret
 4018240:	800d883a 	mov	r6,r16
 4018244:	29403fcc 	andi	r5,r5,255
 4018248:	9809883a 	mov	r4,r19
 401824c:	4017d480 	call	4017d48 <__swbuf_r>
 4018250:	10bfffe0 	cmpeqi	r2,r2,-1
 4018254:	10803fcc 	andi	r2,r2,255
 4018258:	103fd626 	beq	r2,zero,40181b4 <__alt_mem_onchip_memory2_0+0xfc016f14>
 401825c:	00bfffc4 	movi	r2,-1
 4018260:	003fee06 	br	401821c <__alt_mem_onchip_memory2_0+0xfc016f7c>
 4018264:	90ffffc4 	addi	r3,r18,-1
 4018268:	01003f84 	movi	r4,254
 401826c:	20ffbf36 	bltu	r4,r3,401816c <__alt_mem_onchip_memory2_0+0xfc016ecc>
 4018270:	900b883a 	mov	r5,r18
 4018274:	dc800005 	stb	r18,0(sp)
 4018278:	1029883a 	mov	r20,r2
 401827c:	003fc506 	br	4018194 <__alt_mem_onchip_memory2_0+0xfc016ef4>
 4018280:	800d883a 	mov	r6,r16
 4018284:	a80b883a 	mov	r5,r21
 4018288:	9809883a 	mov	r4,r19
 401828c:	4017d480 	call	4017d48 <__swbuf_r>
 4018290:	10bfffe0 	cmpeqi	r2,r2,-1
 4018294:	003fef06 	br	4018254 <__alt_mem_onchip_memory2_0+0xfc016fb4>

04018298 <_fputwc_r>:
 4018298:	3080030b 	ldhu	r2,12(r6)
 401829c:	10c8000c 	andi	r3,r2,8192
 40182a0:	1800051e 	bne	r3,zero,40182b8 <_fputwc_r+0x20>
 40182a4:	30c01917 	ldw	r3,100(r6)
 40182a8:	10880014 	ori	r2,r2,8192
 40182ac:	3080030d 	sth	r2,12(r6)
 40182b0:	18880014 	ori	r2,r3,8192
 40182b4:	30801915 	stw	r2,100(r6)
 40182b8:	40181341 	jmpi	4018134 <__fputwc>

040182bc <fputwc>:
 40182bc:	008100f4 	movhi	r2,1027
 40182c0:	defffc04 	addi	sp,sp,-16
 40182c4:	10aaa304 	addi	r2,r2,-21876
 40182c8:	dc000115 	stw	r16,4(sp)
 40182cc:	14000017 	ldw	r16,0(r2)
 40182d0:	dc400215 	stw	r17,8(sp)
 40182d4:	dfc00315 	stw	ra,12(sp)
 40182d8:	2023883a 	mov	r17,r4
 40182dc:	80000226 	beq	r16,zero,40182e8 <fputwc+0x2c>
 40182e0:	80800e17 	ldw	r2,56(r16)
 40182e4:	10001026 	beq	r2,zero,4018328 <fputwc+0x6c>
 40182e8:	2880030b 	ldhu	r2,12(r5)
 40182ec:	10c8000c 	andi	r3,r2,8192
 40182f0:	1800051e 	bne	r3,zero,4018308 <fputwc+0x4c>
 40182f4:	28c01917 	ldw	r3,100(r5)
 40182f8:	10880014 	ori	r2,r2,8192
 40182fc:	2880030d 	sth	r2,12(r5)
 4018300:	18880014 	ori	r2,r3,8192
 4018304:	28801915 	stw	r2,100(r5)
 4018308:	280d883a 	mov	r6,r5
 401830c:	8009883a 	mov	r4,r16
 4018310:	880b883a 	mov	r5,r17
 4018314:	dfc00317 	ldw	ra,12(sp)
 4018318:	dc400217 	ldw	r17,8(sp)
 401831c:	dc000117 	ldw	r16,4(sp)
 4018320:	dec00404 	addi	sp,sp,16
 4018324:	40181341 	jmpi	4018134 <__fputwc>
 4018328:	8009883a 	mov	r4,r16
 401832c:	d9400015 	stw	r5,0(sp)
 4018330:	4013d700 	call	4013d70 <__sinit>
 4018334:	d9400017 	ldw	r5,0(sp)
 4018338:	003feb06 	br	40182e8 <__alt_mem_onchip_memory2_0+0xfc017048>

0401833c <_fstat_r>:
 401833c:	defffd04 	addi	sp,sp,-12
 4018340:	2805883a 	mov	r2,r5
 4018344:	dc000015 	stw	r16,0(sp)
 4018348:	040100f4 	movhi	r16,1027
 401834c:	dc400115 	stw	r17,4(sp)
 4018350:	84373504 	addi	r16,r16,-9004
 4018354:	2023883a 	mov	r17,r4
 4018358:	300b883a 	mov	r5,r6
 401835c:	1009883a 	mov	r4,r2
 4018360:	dfc00215 	stw	ra,8(sp)
 4018364:	80000015 	stw	zero,0(r16)
 4018368:	401bc440 	call	401bc44 <fstat>
 401836c:	00ffffc4 	movi	r3,-1
 4018370:	10c00526 	beq	r2,r3,4018388 <_fstat_r+0x4c>
 4018374:	dfc00217 	ldw	ra,8(sp)
 4018378:	dc400117 	ldw	r17,4(sp)
 401837c:	dc000017 	ldw	r16,0(sp)
 4018380:	dec00304 	addi	sp,sp,12
 4018384:	f800283a 	ret
 4018388:	80c00017 	ldw	r3,0(r16)
 401838c:	183ff926 	beq	r3,zero,4018374 <__alt_mem_onchip_memory2_0+0xfc0170d4>
 4018390:	88c00015 	stw	r3,0(r17)
 4018394:	003ff706 	br	4018374 <__alt_mem_onchip_memory2_0+0xfc0170d4>

04018398 <_isatty_r>:
 4018398:	defffd04 	addi	sp,sp,-12
 401839c:	dc000015 	stw	r16,0(sp)
 40183a0:	040100f4 	movhi	r16,1027
 40183a4:	dc400115 	stw	r17,4(sp)
 40183a8:	84373504 	addi	r16,r16,-9004
 40183ac:	2023883a 	mov	r17,r4
 40183b0:	2809883a 	mov	r4,r5
 40183b4:	dfc00215 	stw	ra,8(sp)
 40183b8:	80000015 	stw	zero,0(r16)
 40183bc:	401bd580 	call	401bd58 <isatty>
 40183c0:	00ffffc4 	movi	r3,-1
 40183c4:	10c00526 	beq	r2,r3,40183dc <_isatty_r+0x44>
 40183c8:	dfc00217 	ldw	ra,8(sp)
 40183cc:	dc400117 	ldw	r17,4(sp)
 40183d0:	dc000017 	ldw	r16,0(sp)
 40183d4:	dec00304 	addi	sp,sp,12
 40183d8:	f800283a 	ret
 40183dc:	80c00017 	ldw	r3,0(r16)
 40183e0:	183ff926 	beq	r3,zero,40183c8 <__alt_mem_onchip_memory2_0+0xfc017128>
 40183e4:	88c00015 	stw	r3,0(r17)
 40183e8:	003ff706 	br	40183c8 <__alt_mem_onchip_memory2_0+0xfc017128>

040183ec <_lseek_r>:
 40183ec:	defffd04 	addi	sp,sp,-12
 40183f0:	2805883a 	mov	r2,r5
 40183f4:	dc000015 	stw	r16,0(sp)
 40183f8:	040100f4 	movhi	r16,1027
 40183fc:	dc400115 	stw	r17,4(sp)
 4018400:	300b883a 	mov	r5,r6
 4018404:	84373504 	addi	r16,r16,-9004
 4018408:	2023883a 	mov	r17,r4
 401840c:	380d883a 	mov	r6,r7
 4018410:	1009883a 	mov	r4,r2
 4018414:	dfc00215 	stw	ra,8(sp)
 4018418:	80000015 	stw	zero,0(r16)
 401841c:	401c0980 	call	401c098 <lseek>
 4018420:	00ffffc4 	movi	r3,-1
 4018424:	10c00526 	beq	r2,r3,401843c <_lseek_r+0x50>
 4018428:	dfc00217 	ldw	ra,8(sp)
 401842c:	dc400117 	ldw	r17,4(sp)
 4018430:	dc000017 	ldw	r16,0(sp)
 4018434:	dec00304 	addi	sp,sp,12
 4018438:	f800283a 	ret
 401843c:	80c00017 	ldw	r3,0(r16)
 4018440:	183ff926 	beq	r3,zero,4018428 <__alt_mem_onchip_memory2_0+0xfc017188>
 4018444:	88c00015 	stw	r3,0(r17)
 4018448:	003ff706 	br	4018428 <__alt_mem_onchip_memory2_0+0xfc017188>

0401844c <_read_r>:
 401844c:	defffd04 	addi	sp,sp,-12
 4018450:	2805883a 	mov	r2,r5
 4018454:	dc000015 	stw	r16,0(sp)
 4018458:	040100f4 	movhi	r16,1027
 401845c:	dc400115 	stw	r17,4(sp)
 4018460:	300b883a 	mov	r5,r6
 4018464:	84373504 	addi	r16,r16,-9004
 4018468:	2023883a 	mov	r17,r4
 401846c:	380d883a 	mov	r6,r7
 4018470:	1009883a 	mov	r4,r2
 4018474:	dfc00215 	stw	ra,8(sp)
 4018478:	80000015 	stw	zero,0(r16)
 401847c:	401c2740 	call	401c274 <read>
 4018480:	00ffffc4 	movi	r3,-1
 4018484:	10c00526 	beq	r2,r3,401849c <_read_r+0x50>
 4018488:	dfc00217 	ldw	ra,8(sp)
 401848c:	dc400117 	ldw	r17,4(sp)
 4018490:	dc000017 	ldw	r16,0(sp)
 4018494:	dec00304 	addi	sp,sp,12
 4018498:	f800283a 	ret
 401849c:	80c00017 	ldw	r3,0(r16)
 40184a0:	183ff926 	beq	r3,zero,4018488 <__alt_mem_onchip_memory2_0+0xfc0171e8>
 40184a4:	88c00015 	stw	r3,0(r17)
 40184a8:	003ff706 	br	4018488 <__alt_mem_onchip_memory2_0+0xfc0171e8>

040184ac <_wcrtomb_r>:
 40184ac:	defff604 	addi	sp,sp,-40
 40184b0:	008100f4 	movhi	r2,1027
 40184b4:	dc800815 	stw	r18,32(sp)
 40184b8:	dc400715 	stw	r17,28(sp)
 40184bc:	dc000615 	stw	r16,24(sp)
 40184c0:	10aaa704 	addi	r2,r2,-21860
 40184c4:	dfc00915 	stw	ra,36(sp)
 40184c8:	2021883a 	mov	r16,r4
 40184cc:	3823883a 	mov	r17,r7
 40184d0:	14800017 	ldw	r18,0(r2)
 40184d4:	28001426 	beq	r5,zero,4018528 <_wcrtomb_r+0x7c>
 40184d8:	d9400415 	stw	r5,16(sp)
 40184dc:	d9800515 	stw	r6,20(sp)
 40184e0:	40148c00 	call	40148c0 <__locale_charset>
 40184e4:	d9800517 	ldw	r6,20(sp)
 40184e8:	d9400417 	ldw	r5,16(sp)
 40184ec:	100f883a 	mov	r7,r2
 40184f0:	dc400015 	stw	r17,0(sp)
 40184f4:	8009883a 	mov	r4,r16
 40184f8:	903ee83a 	callr	r18
 40184fc:	00ffffc4 	movi	r3,-1
 4018500:	10c0031e 	bne	r2,r3,4018510 <_wcrtomb_r+0x64>
 4018504:	88000015 	stw	zero,0(r17)
 4018508:	00c02284 	movi	r3,138
 401850c:	80c00015 	stw	r3,0(r16)
 4018510:	dfc00917 	ldw	ra,36(sp)
 4018514:	dc800817 	ldw	r18,32(sp)
 4018518:	dc400717 	ldw	r17,28(sp)
 401851c:	dc000617 	ldw	r16,24(sp)
 4018520:	dec00a04 	addi	sp,sp,40
 4018524:	f800283a 	ret
 4018528:	40148c00 	call	40148c0 <__locale_charset>
 401852c:	100f883a 	mov	r7,r2
 4018530:	dc400015 	stw	r17,0(sp)
 4018534:	000d883a 	mov	r6,zero
 4018538:	d9400104 	addi	r5,sp,4
 401853c:	8009883a 	mov	r4,r16
 4018540:	903ee83a 	callr	r18
 4018544:	003fed06 	br	40184fc <__alt_mem_onchip_memory2_0+0xfc01725c>

04018548 <wcrtomb>:
 4018548:	defff604 	addi	sp,sp,-40
 401854c:	008100f4 	movhi	r2,1027
 4018550:	dc800615 	stw	r18,24(sp)
 4018554:	dc400515 	stw	r17,20(sp)
 4018558:	10aaa304 	addi	r2,r2,-21876
 401855c:	dfc00915 	stw	ra,36(sp)
 4018560:	dd000815 	stw	r20,32(sp)
 4018564:	dcc00715 	stw	r19,28(sp)
 4018568:	dc000415 	stw	r16,16(sp)
 401856c:	3025883a 	mov	r18,r6
 4018570:	14400017 	ldw	r17,0(r2)
 4018574:	20001926 	beq	r4,zero,40185dc <wcrtomb+0x94>
 4018578:	008100f4 	movhi	r2,1027
 401857c:	10aaa704 	addi	r2,r2,-21860
 4018580:	15000017 	ldw	r20,0(r2)
 4018584:	2021883a 	mov	r16,r4
 4018588:	2827883a 	mov	r19,r5
 401858c:	40148c00 	call	40148c0 <__locale_charset>
 4018590:	100f883a 	mov	r7,r2
 4018594:	dc800015 	stw	r18,0(sp)
 4018598:	980d883a 	mov	r6,r19
 401859c:	800b883a 	mov	r5,r16
 40185a0:	8809883a 	mov	r4,r17
 40185a4:	a03ee83a 	callr	r20
 40185a8:	00ffffc4 	movi	r3,-1
 40185ac:	10c0031e 	bne	r2,r3,40185bc <wcrtomb+0x74>
 40185b0:	90000015 	stw	zero,0(r18)
 40185b4:	00c02284 	movi	r3,138
 40185b8:	88c00015 	stw	r3,0(r17)
 40185bc:	dfc00917 	ldw	ra,36(sp)
 40185c0:	dd000817 	ldw	r20,32(sp)
 40185c4:	dcc00717 	ldw	r19,28(sp)
 40185c8:	dc800617 	ldw	r18,24(sp)
 40185cc:	dc400517 	ldw	r17,20(sp)
 40185d0:	dc000417 	ldw	r16,16(sp)
 40185d4:	dec00a04 	addi	sp,sp,40
 40185d8:	f800283a 	ret
 40185dc:	008100f4 	movhi	r2,1027
 40185e0:	10aaa704 	addi	r2,r2,-21860
 40185e4:	14000017 	ldw	r16,0(r2)
 40185e8:	40148c00 	call	40148c0 <__locale_charset>
 40185ec:	100f883a 	mov	r7,r2
 40185f0:	dc800015 	stw	r18,0(sp)
 40185f4:	000d883a 	mov	r6,zero
 40185f8:	d9400104 	addi	r5,sp,4
 40185fc:	8809883a 	mov	r4,r17
 4018600:	803ee83a 	callr	r16
 4018604:	003fe806 	br	40185a8 <__alt_mem_onchip_memory2_0+0xfc017308>

04018608 <__ascii_wctomb>:
 4018608:	28000526 	beq	r5,zero,4018620 <__ascii_wctomb+0x18>
 401860c:	00803fc4 	movi	r2,255
 4018610:	11800536 	bltu	r2,r6,4018628 <__ascii_wctomb+0x20>
 4018614:	29800005 	stb	r6,0(r5)
 4018618:	00800044 	movi	r2,1
 401861c:	f800283a 	ret
 4018620:	0005883a 	mov	r2,zero
 4018624:	f800283a 	ret
 4018628:	00802284 	movi	r2,138
 401862c:	20800015 	stw	r2,0(r4)
 4018630:	00bfffc4 	movi	r2,-1
 4018634:	f800283a 	ret

04018638 <_wctomb_r>:
 4018638:	008100f4 	movhi	r2,1027
 401863c:	defff904 	addi	sp,sp,-28
 4018640:	10aaa704 	addi	r2,r2,-21860
 4018644:	dfc00615 	stw	ra,24(sp)
 4018648:	dc400515 	stw	r17,20(sp)
 401864c:	dc000415 	stw	r16,16(sp)
 4018650:	3823883a 	mov	r17,r7
 4018654:	14000017 	ldw	r16,0(r2)
 4018658:	d9000115 	stw	r4,4(sp)
 401865c:	d9400215 	stw	r5,8(sp)
 4018660:	d9800315 	stw	r6,12(sp)
 4018664:	40148c00 	call	40148c0 <__locale_charset>
 4018668:	d9800317 	ldw	r6,12(sp)
 401866c:	d9400217 	ldw	r5,8(sp)
 4018670:	d9000117 	ldw	r4,4(sp)
 4018674:	100f883a 	mov	r7,r2
 4018678:	dc400015 	stw	r17,0(sp)
 401867c:	803ee83a 	callr	r16
 4018680:	dfc00617 	ldw	ra,24(sp)
 4018684:	dc400517 	ldw	r17,20(sp)
 4018688:	dc000417 	ldw	r16,16(sp)
 401868c:	dec00704 	addi	sp,sp,28
 4018690:	f800283a 	ret

04018694 <__udivdi3>:
 4018694:	defff404 	addi	sp,sp,-48
 4018698:	dcc00515 	stw	r19,20(sp)
 401869c:	dc000215 	stw	r16,8(sp)
 40186a0:	dfc00b15 	stw	ra,44(sp)
 40186a4:	df000a15 	stw	fp,40(sp)
 40186a8:	ddc00915 	stw	r23,36(sp)
 40186ac:	dd800815 	stw	r22,32(sp)
 40186b0:	dd400715 	stw	r21,28(sp)
 40186b4:	dd000615 	stw	r20,24(sp)
 40186b8:	dc800415 	stw	r18,16(sp)
 40186bc:	dc400315 	stw	r17,12(sp)
 40186c0:	2027883a 	mov	r19,r4
 40186c4:	2821883a 	mov	r16,r5
 40186c8:	3800461e 	bne	r7,zero,40187e4 <__udivdi3+0x150>
 40186cc:	3023883a 	mov	r17,r6
 40186d0:	2025883a 	mov	r18,r4
 40186d4:	2980572e 	bgeu	r5,r6,4018834 <__udivdi3+0x1a0>
 40186d8:	00bfffd4 	movui	r2,65535
 40186dc:	282d883a 	mov	r22,r5
 40186e0:	1180b236 	bltu	r2,r6,40189ac <__udivdi3+0x318>
 40186e4:	00803fc4 	movi	r2,255
 40186e8:	1185803a 	cmpltu	r2,r2,r6
 40186ec:	100490fa 	slli	r2,r2,3
 40186f0:	3086d83a 	srl	r3,r6,r2
 40186f4:	010100b4 	movhi	r4,1026
 40186f8:	211d7204 	addi	r4,r4,30152
 40186fc:	20c7883a 	add	r3,r4,r3
 4018700:	18c00003 	ldbu	r3,0(r3)
 4018704:	1885883a 	add	r2,r3,r2
 4018708:	00c00804 	movi	r3,32
 401870c:	1887c83a 	sub	r3,r3,r2
 4018710:	18000526 	beq	r3,zero,4018728 <__udivdi3+0x94>
 4018714:	80e0983a 	sll	r16,r16,r3
 4018718:	9884d83a 	srl	r2,r19,r2
 401871c:	30e2983a 	sll	r17,r6,r3
 4018720:	98e4983a 	sll	r18,r19,r3
 4018724:	142cb03a 	or	r22,r2,r16
 4018728:	882ad43a 	srli	r21,r17,16
 401872c:	b009883a 	mov	r4,r22
 4018730:	8d3fffcc 	andi	r20,r17,65535
 4018734:	a80b883a 	mov	r5,r21
 4018738:	400d7400 	call	400d740 <__umodsi3>
 401873c:	b009883a 	mov	r4,r22
 4018740:	a80b883a 	mov	r5,r21
 4018744:	1027883a 	mov	r19,r2
 4018748:	400d6dc0 	call	400d6dc <__udivsi3>
 401874c:	100b883a 	mov	r5,r2
 4018750:	a009883a 	mov	r4,r20
 4018754:	102d883a 	mov	r22,r2
 4018758:	400d7980 	call	400d798 <__mulsi3>
 401875c:	9826943a 	slli	r19,r19,16
 4018760:	9006d43a 	srli	r3,r18,16
 4018764:	1cc6b03a 	or	r3,r3,r19
 4018768:	1880052e 	bgeu	r3,r2,4018780 <__udivdi3+0xec>
 401876c:	1c47883a 	add	r3,r3,r17
 4018770:	b13fffc4 	addi	r4,r22,-1
 4018774:	1c400136 	bltu	r3,r17,401877c <__udivdi3+0xe8>
 4018778:	18814236 	bltu	r3,r2,4018c84 <__udivdi3+0x5f0>
 401877c:	202d883a 	mov	r22,r4
 4018780:	18a1c83a 	sub	r16,r3,r2
 4018784:	8009883a 	mov	r4,r16
 4018788:	a80b883a 	mov	r5,r21
 401878c:	400d7400 	call	400d740 <__umodsi3>
 4018790:	1027883a 	mov	r19,r2
 4018794:	8009883a 	mov	r4,r16
 4018798:	a80b883a 	mov	r5,r21
 401879c:	9826943a 	slli	r19,r19,16
 40187a0:	400d6dc0 	call	400d6dc <__udivsi3>
 40187a4:	100b883a 	mov	r5,r2
 40187a8:	a009883a 	mov	r4,r20
 40187ac:	94bfffcc 	andi	r18,r18,65535
 40187b0:	1021883a 	mov	r16,r2
 40187b4:	94e4b03a 	or	r18,r18,r19
 40187b8:	400d7980 	call	400d798 <__mulsi3>
 40187bc:	9080052e 	bgeu	r18,r2,40187d4 <__udivdi3+0x140>
 40187c0:	8ca5883a 	add	r18,r17,r18
 40187c4:	80ffffc4 	addi	r3,r16,-1
 40187c8:	94410c36 	bltu	r18,r17,4018bfc <__udivdi3+0x568>
 40187cc:	90810b2e 	bgeu	r18,r2,4018bfc <__udivdi3+0x568>
 40187d0:	843fff84 	addi	r16,r16,-2
 40187d4:	b004943a 	slli	r2,r22,16
 40187d8:	0007883a 	mov	r3,zero
 40187dc:	1404b03a 	or	r2,r2,r16
 40187e0:	00005e06 	br	401895c <__udivdi3+0x2c8>
 40187e4:	29c05b36 	bltu	r5,r7,4018954 <__udivdi3+0x2c0>
 40187e8:	00bfffd4 	movui	r2,65535
 40187ec:	11c0672e 	bgeu	r2,r7,401898c <__udivdi3+0x2f8>
 40187f0:	00804034 	movhi	r2,256
 40187f4:	10bfffc4 	addi	r2,r2,-1
 40187f8:	11c10a36 	bltu	r2,r7,4018c24 <__udivdi3+0x590>
 40187fc:	00800404 	movi	r2,16
 4018800:	3886d83a 	srl	r3,r7,r2
 4018804:	010100b4 	movhi	r4,1026
 4018808:	211d7204 	addi	r4,r4,30152
 401880c:	20c7883a 	add	r3,r4,r3
 4018810:	18c00003 	ldbu	r3,0(r3)
 4018814:	05c00804 	movi	r23,32
 4018818:	1885883a 	add	r2,r3,r2
 401881c:	b8afc83a 	sub	r23,r23,r2
 4018820:	b800671e 	bne	r23,zero,40189c0 <__udivdi3+0x32c>
 4018824:	3c010536 	bltu	r7,r16,4018c3c <__udivdi3+0x5a8>
 4018828:	9985403a 	cmpgeu	r2,r19,r6
 401882c:	0007883a 	mov	r3,zero
 4018830:	00004a06 	br	401895c <__udivdi3+0x2c8>
 4018834:	3000041e 	bne	r6,zero,4018848 <__udivdi3+0x1b4>
 4018838:	000b883a 	mov	r5,zero
 401883c:	01000044 	movi	r4,1
 4018840:	400d6dc0 	call	400d6dc <__udivsi3>
 4018844:	1023883a 	mov	r17,r2
 4018848:	00bfffd4 	movui	r2,65535
 401884c:	1440532e 	bgeu	r2,r17,401899c <__udivdi3+0x308>
 4018850:	00804034 	movhi	r2,256
 4018854:	10bfffc4 	addi	r2,r2,-1
 4018858:	1440f436 	bltu	r2,r17,4018c2c <__udivdi3+0x598>
 401885c:	00800404 	movi	r2,16
 4018860:	8886d83a 	srl	r3,r17,r2
 4018864:	010100b4 	movhi	r4,1026
 4018868:	211d7204 	addi	r4,r4,30152
 401886c:	20c7883a 	add	r3,r4,r3
 4018870:	18c00003 	ldbu	r3,0(r3)
 4018874:	1885883a 	add	r2,r3,r2
 4018878:	00c00804 	movi	r3,32
 401887c:	1887c83a 	sub	r3,r3,r2
 4018880:	1800a51e 	bne	r3,zero,4018b18 <__udivdi3+0x484>
 4018884:	882ad43a 	srli	r21,r17,16
 4018888:	8461c83a 	sub	r16,r16,r17
 401888c:	8d3fffcc 	andi	r20,r17,65535
 4018890:	00c00044 	movi	r3,1
 4018894:	a80b883a 	mov	r5,r21
 4018898:	8009883a 	mov	r4,r16
 401889c:	d8c00115 	stw	r3,4(sp)
 40188a0:	400d7400 	call	400d740 <__umodsi3>
 40188a4:	a80b883a 	mov	r5,r21
 40188a8:	8009883a 	mov	r4,r16
 40188ac:	1027883a 	mov	r19,r2
 40188b0:	400d6dc0 	call	400d6dc <__udivsi3>
 40188b4:	a00b883a 	mov	r5,r20
 40188b8:	1009883a 	mov	r4,r2
 40188bc:	102d883a 	mov	r22,r2
 40188c0:	400d7980 	call	400d798 <__mulsi3>
 40188c4:	9826943a 	slli	r19,r19,16
 40188c8:	900ed43a 	srli	r7,r18,16
 40188cc:	d8c00117 	ldw	r3,4(sp)
 40188d0:	3cceb03a 	or	r7,r7,r19
 40188d4:	3880052e 	bgeu	r7,r2,40188ec <__udivdi3+0x258>
 40188d8:	3c4f883a 	add	r7,r7,r17
 40188dc:	b13fffc4 	addi	r4,r22,-1
 40188e0:	3c400136 	bltu	r7,r17,40188e8 <__udivdi3+0x254>
 40188e4:	3880e436 	bltu	r7,r2,4018c78 <__udivdi3+0x5e4>
 40188e8:	202d883a 	mov	r22,r4
 40188ec:	38a1c83a 	sub	r16,r7,r2
 40188f0:	8009883a 	mov	r4,r16
 40188f4:	a80b883a 	mov	r5,r21
 40188f8:	d8c00115 	stw	r3,4(sp)
 40188fc:	400d7400 	call	400d740 <__umodsi3>
 4018900:	1027883a 	mov	r19,r2
 4018904:	8009883a 	mov	r4,r16
 4018908:	a80b883a 	mov	r5,r21
 401890c:	9826943a 	slli	r19,r19,16
 4018910:	400d6dc0 	call	400d6dc <__udivsi3>
 4018914:	a00b883a 	mov	r5,r20
 4018918:	1009883a 	mov	r4,r2
 401891c:	94bfffcc 	andi	r18,r18,65535
 4018920:	1021883a 	mov	r16,r2
 4018924:	94e4b03a 	or	r18,r18,r19
 4018928:	400d7980 	call	400d798 <__mulsi3>
 401892c:	d8c00117 	ldw	r3,4(sp)
 4018930:	9080052e 	bgeu	r18,r2,4018948 <__udivdi3+0x2b4>
 4018934:	8ca5883a 	add	r18,r17,r18
 4018938:	813fffc4 	addi	r4,r16,-1
 401893c:	9440ad36 	bltu	r18,r17,4018bf4 <__udivdi3+0x560>
 4018940:	9080ac2e 	bgeu	r18,r2,4018bf4 <__udivdi3+0x560>
 4018944:	843fff84 	addi	r16,r16,-2
 4018948:	b004943a 	slli	r2,r22,16
 401894c:	1404b03a 	or	r2,r2,r16
 4018950:	00000206 	br	401895c <__udivdi3+0x2c8>
 4018954:	0007883a 	mov	r3,zero
 4018958:	0005883a 	mov	r2,zero
 401895c:	dfc00b17 	ldw	ra,44(sp)
 4018960:	df000a17 	ldw	fp,40(sp)
 4018964:	ddc00917 	ldw	r23,36(sp)
 4018968:	dd800817 	ldw	r22,32(sp)
 401896c:	dd400717 	ldw	r21,28(sp)
 4018970:	dd000617 	ldw	r20,24(sp)
 4018974:	dcc00517 	ldw	r19,20(sp)
 4018978:	dc800417 	ldw	r18,16(sp)
 401897c:	dc400317 	ldw	r17,12(sp)
 4018980:	dc000217 	ldw	r16,8(sp)
 4018984:	dec00c04 	addi	sp,sp,48
 4018988:	f800283a 	ret
 401898c:	00803fc4 	movi	r2,255
 4018990:	11c5803a 	cmpltu	r2,r2,r7
 4018994:	100490fa 	slli	r2,r2,3
 4018998:	003f9906 	br	4018800 <__alt_mem_onchip_memory2_0+0xfc017560>
 401899c:	00803fc4 	movi	r2,255
 40189a0:	1445803a 	cmpltu	r2,r2,r17
 40189a4:	100490fa 	slli	r2,r2,3
 40189a8:	003fad06 	br	4018860 <__alt_mem_onchip_memory2_0+0xfc0175c0>
 40189ac:	00804034 	movhi	r2,256
 40189b0:	10bfffc4 	addi	r2,r2,-1
 40189b4:	11809f36 	bltu	r2,r6,4018c34 <__udivdi3+0x5a0>
 40189b8:	00800404 	movi	r2,16
 40189bc:	003f4c06 	br	40186f0 <__alt_mem_onchip_memory2_0+0xfc017450>
 40189c0:	3dce983a 	sll	r7,r7,r23
 40189c4:	30b8d83a 	srl	fp,r6,r2
 40189c8:	80a2d83a 	srl	r17,r16,r2
 40189cc:	35cc983a 	sll	r6,r6,r23
 40189d0:	3f38b03a 	or	fp,r7,fp
 40189d4:	e024d43a 	srli	r18,fp,16
 40189d8:	9884d83a 	srl	r2,r19,r2
 40189dc:	85e0983a 	sll	r16,r16,r23
 40189e0:	8809883a 	mov	r4,r17
 40189e4:	900b883a 	mov	r5,r18
 40189e8:	d9800015 	stw	r6,0(sp)
 40189ec:	1420b03a 	or	r16,r2,r16
 40189f0:	400d7400 	call	400d740 <__umodsi3>
 40189f4:	900b883a 	mov	r5,r18
 40189f8:	8809883a 	mov	r4,r17
 40189fc:	1029883a 	mov	r20,r2
 4018a00:	e5bfffcc 	andi	r22,fp,65535
 4018a04:	400d6dc0 	call	400d6dc <__udivsi3>
 4018a08:	100b883a 	mov	r5,r2
 4018a0c:	b009883a 	mov	r4,r22
 4018a10:	102b883a 	mov	r21,r2
 4018a14:	400d7980 	call	400d798 <__mulsi3>
 4018a18:	a028943a 	slli	r20,r20,16
 4018a1c:	8006d43a 	srli	r3,r16,16
 4018a20:	1d06b03a 	or	r3,r3,r20
 4018a24:	1880042e 	bgeu	r3,r2,4018a38 <__udivdi3+0x3a4>
 4018a28:	1f07883a 	add	r3,r3,fp
 4018a2c:	a93fffc4 	addi	r4,r21,-1
 4018a30:	1f00892e 	bgeu	r3,fp,4018c58 <__udivdi3+0x5c4>
 4018a34:	202b883a 	mov	r21,r4
 4018a38:	18a3c83a 	sub	r17,r3,r2
 4018a3c:	8809883a 	mov	r4,r17
 4018a40:	900b883a 	mov	r5,r18
 4018a44:	400d7400 	call	400d740 <__umodsi3>
 4018a48:	1029883a 	mov	r20,r2
 4018a4c:	8809883a 	mov	r4,r17
 4018a50:	900b883a 	mov	r5,r18
 4018a54:	a028943a 	slli	r20,r20,16
 4018a58:	400d6dc0 	call	400d6dc <__udivsi3>
 4018a5c:	100b883a 	mov	r5,r2
 4018a60:	b009883a 	mov	r4,r22
 4018a64:	843fffcc 	andi	r16,r16,65535
 4018a68:	1023883a 	mov	r17,r2
 4018a6c:	8520b03a 	or	r16,r16,r20
 4018a70:	400d7980 	call	400d798 <__mulsi3>
 4018a74:	8080042e 	bgeu	r16,r2,4018a88 <__udivdi3+0x3f4>
 4018a78:	8721883a 	add	r16,r16,fp
 4018a7c:	88ffffc4 	addi	r3,r17,-1
 4018a80:	8700712e 	bgeu	r16,fp,4018c48 <__udivdi3+0x5b4>
 4018a84:	1823883a 	mov	r17,r3
 4018a88:	a80e943a 	slli	r7,r21,16
 4018a8c:	d8c00017 	ldw	r3,0(sp)
 4018a90:	80a1c83a 	sub	r16,r16,r2
 4018a94:	3c64b03a 	or	r18,r7,r17
 4018a98:	1d3fffcc 	andi	r20,r3,65535
 4018a9c:	9022d43a 	srli	r17,r18,16
 4018aa0:	95bfffcc 	andi	r22,r18,65535
 4018aa4:	a00b883a 	mov	r5,r20
 4018aa8:	b009883a 	mov	r4,r22
 4018aac:	182ad43a 	srli	r21,r3,16
 4018ab0:	400d7980 	call	400d798 <__mulsi3>
 4018ab4:	a00b883a 	mov	r5,r20
 4018ab8:	8809883a 	mov	r4,r17
 4018abc:	1039883a 	mov	fp,r2
 4018ac0:	400d7980 	call	400d798 <__mulsi3>
 4018ac4:	8809883a 	mov	r4,r17
 4018ac8:	a80b883a 	mov	r5,r21
 4018acc:	1029883a 	mov	r20,r2
 4018ad0:	400d7980 	call	400d798 <__mulsi3>
 4018ad4:	a80b883a 	mov	r5,r21
 4018ad8:	b009883a 	mov	r4,r22
 4018adc:	1023883a 	mov	r17,r2
 4018ae0:	400d7980 	call	400d798 <__mulsi3>
 4018ae4:	e006d43a 	srli	r3,fp,16
 4018ae8:	1505883a 	add	r2,r2,r20
 4018aec:	1887883a 	add	r3,r3,r2
 4018af0:	1d00022e 	bgeu	r3,r20,4018afc <__udivdi3+0x468>
 4018af4:	00800074 	movhi	r2,1
 4018af8:	88a3883a 	add	r17,r17,r2
 4018afc:	1804d43a 	srli	r2,r3,16
 4018b00:	1463883a 	add	r17,r2,r17
 4018b04:	84404436 	bltu	r16,r17,4018c18 <__udivdi3+0x584>
 4018b08:	84403e26 	beq	r16,r17,4018c04 <__udivdi3+0x570>
 4018b0c:	9005883a 	mov	r2,r18
 4018b10:	0007883a 	mov	r3,zero
 4018b14:	003f9106 	br	401895c <__alt_mem_onchip_memory2_0+0xfc0176bc>
 4018b18:	88e2983a 	sll	r17,r17,r3
 4018b1c:	80aed83a 	srl	r23,r16,r2
 4018b20:	80e0983a 	sll	r16,r16,r3
 4018b24:	882ad43a 	srli	r21,r17,16
 4018b28:	9884d83a 	srl	r2,r19,r2
 4018b2c:	b809883a 	mov	r4,r23
 4018b30:	a80b883a 	mov	r5,r21
 4018b34:	98e4983a 	sll	r18,r19,r3
 4018b38:	142cb03a 	or	r22,r2,r16
 4018b3c:	400d7400 	call	400d740 <__umodsi3>
 4018b40:	b809883a 	mov	r4,r23
 4018b44:	a80b883a 	mov	r5,r21
 4018b48:	1027883a 	mov	r19,r2
 4018b4c:	8d3fffcc 	andi	r20,r17,65535
 4018b50:	400d6dc0 	call	400d6dc <__udivsi3>
 4018b54:	a009883a 	mov	r4,r20
 4018b58:	100b883a 	mov	r5,r2
 4018b5c:	102f883a 	mov	r23,r2
 4018b60:	400d7980 	call	400d798 <__mulsi3>
 4018b64:	9826943a 	slli	r19,r19,16
 4018b68:	b008d43a 	srli	r4,r22,16
 4018b6c:	24c8b03a 	or	r4,r4,r19
 4018b70:	2080062e 	bgeu	r4,r2,4018b8c <__udivdi3+0x4f8>
 4018b74:	2449883a 	add	r4,r4,r17
 4018b78:	b8ffffc4 	addi	r3,r23,-1
 4018b7c:	24403c36 	bltu	r4,r17,4018c70 <__udivdi3+0x5dc>
 4018b80:	20803b2e 	bgeu	r4,r2,4018c70 <__udivdi3+0x5dc>
 4018b84:	bdffff84 	addi	r23,r23,-2
 4018b88:	2449883a 	add	r4,r4,r17
 4018b8c:	20a1c83a 	sub	r16,r4,r2
 4018b90:	a80b883a 	mov	r5,r21
 4018b94:	8009883a 	mov	r4,r16
 4018b98:	400d7400 	call	400d740 <__umodsi3>
 4018b9c:	a80b883a 	mov	r5,r21
 4018ba0:	8009883a 	mov	r4,r16
 4018ba4:	1027883a 	mov	r19,r2
 4018ba8:	400d6dc0 	call	400d6dc <__udivsi3>
 4018bac:	a009883a 	mov	r4,r20
 4018bb0:	100b883a 	mov	r5,r2
 4018bb4:	9826943a 	slli	r19,r19,16
 4018bb8:	1039883a 	mov	fp,r2
 4018bbc:	400d7980 	call	400d798 <__mulsi3>
 4018bc0:	b13fffcc 	andi	r4,r22,65535
 4018bc4:	24c8b03a 	or	r4,r4,r19
 4018bc8:	2080062e 	bgeu	r4,r2,4018be4 <__udivdi3+0x550>
 4018bcc:	2449883a 	add	r4,r4,r17
 4018bd0:	e0ffffc4 	addi	r3,fp,-1
 4018bd4:	24402436 	bltu	r4,r17,4018c68 <__udivdi3+0x5d4>
 4018bd8:	2080232e 	bgeu	r4,r2,4018c68 <__udivdi3+0x5d4>
 4018bdc:	e73fff84 	addi	fp,fp,-2
 4018be0:	2449883a 	add	r4,r4,r17
 4018be4:	b82e943a 	slli	r23,r23,16
 4018be8:	20a1c83a 	sub	r16,r4,r2
 4018bec:	bf06b03a 	or	r3,r23,fp
 4018bf0:	003f2806 	br	4018894 <__alt_mem_onchip_memory2_0+0xfc0175f4>
 4018bf4:	2021883a 	mov	r16,r4
 4018bf8:	003f5306 	br	4018948 <__alt_mem_onchip_memory2_0+0xfc0176a8>
 4018bfc:	1821883a 	mov	r16,r3
 4018c00:	003ef406 	br	40187d4 <__alt_mem_onchip_memory2_0+0xfc017534>
 4018c04:	1806943a 	slli	r3,r3,16
 4018c08:	9de6983a 	sll	r19,r19,r23
 4018c0c:	e73fffcc 	andi	fp,fp,65535
 4018c10:	1f07883a 	add	r3,r3,fp
 4018c14:	98ffbd2e 	bgeu	r19,r3,4018b0c <__alt_mem_onchip_memory2_0+0xfc01786c>
 4018c18:	90bfffc4 	addi	r2,r18,-1
 4018c1c:	0007883a 	mov	r3,zero
 4018c20:	003f4e06 	br	401895c <__alt_mem_onchip_memory2_0+0xfc0176bc>
 4018c24:	00800604 	movi	r2,24
 4018c28:	003ef506 	br	4018800 <__alt_mem_onchip_memory2_0+0xfc017560>
 4018c2c:	00800604 	movi	r2,24
 4018c30:	003f0b06 	br	4018860 <__alt_mem_onchip_memory2_0+0xfc0175c0>
 4018c34:	00800604 	movi	r2,24
 4018c38:	003ead06 	br	40186f0 <__alt_mem_onchip_memory2_0+0xfc017450>
 4018c3c:	0007883a 	mov	r3,zero
 4018c40:	00800044 	movi	r2,1
 4018c44:	003f4506 	br	401895c <__alt_mem_onchip_memory2_0+0xfc0176bc>
 4018c48:	80bf8e2e 	bgeu	r16,r2,4018a84 <__alt_mem_onchip_memory2_0+0xfc0177e4>
 4018c4c:	8c7fff84 	addi	r17,r17,-2
 4018c50:	8721883a 	add	r16,r16,fp
 4018c54:	003f8c06 	br	4018a88 <__alt_mem_onchip_memory2_0+0xfc0177e8>
 4018c58:	18bf762e 	bgeu	r3,r2,4018a34 <__alt_mem_onchip_memory2_0+0xfc017794>
 4018c5c:	ad7fff84 	addi	r21,r21,-2
 4018c60:	1f07883a 	add	r3,r3,fp
 4018c64:	003f7406 	br	4018a38 <__alt_mem_onchip_memory2_0+0xfc017798>
 4018c68:	1839883a 	mov	fp,r3
 4018c6c:	003fdd06 	br	4018be4 <__alt_mem_onchip_memory2_0+0xfc017944>
 4018c70:	182f883a 	mov	r23,r3
 4018c74:	003fc506 	br	4018b8c <__alt_mem_onchip_memory2_0+0xfc0178ec>
 4018c78:	b5bfff84 	addi	r22,r22,-2
 4018c7c:	3c4f883a 	add	r7,r7,r17
 4018c80:	003f1a06 	br	40188ec <__alt_mem_onchip_memory2_0+0xfc01764c>
 4018c84:	b5bfff84 	addi	r22,r22,-2
 4018c88:	1c47883a 	add	r3,r3,r17
 4018c8c:	003ebc06 	br	4018780 <__alt_mem_onchip_memory2_0+0xfc0174e0>

04018c90 <__umoddi3>:
 4018c90:	defff304 	addi	sp,sp,-52
 4018c94:	df000b15 	stw	fp,44(sp)
 4018c98:	dc400415 	stw	r17,16(sp)
 4018c9c:	dc000315 	stw	r16,12(sp)
 4018ca0:	dfc00c15 	stw	ra,48(sp)
 4018ca4:	ddc00a15 	stw	r23,40(sp)
 4018ca8:	dd800915 	stw	r22,36(sp)
 4018cac:	dd400815 	stw	r21,32(sp)
 4018cb0:	dd000715 	stw	r20,28(sp)
 4018cb4:	dcc00615 	stw	r19,24(sp)
 4018cb8:	dc800515 	stw	r18,20(sp)
 4018cbc:	2021883a 	mov	r16,r4
 4018cc0:	2823883a 	mov	r17,r5
 4018cc4:	2839883a 	mov	fp,r5
 4018cc8:	3800401e 	bne	r7,zero,4018dcc <__umoddi3+0x13c>
 4018ccc:	3027883a 	mov	r19,r6
 4018cd0:	2029883a 	mov	r20,r4
 4018cd4:	2980552e 	bgeu	r5,r6,4018e2c <__umoddi3+0x19c>
 4018cd8:	00bfffd4 	movui	r2,65535
 4018cdc:	1180a236 	bltu	r2,r6,4018f68 <__umoddi3+0x2d8>
 4018ce0:	01003fc4 	movi	r4,255
 4018ce4:	2189803a 	cmpltu	r4,r4,r6
 4018ce8:	200890fa 	slli	r4,r4,3
 4018cec:	3104d83a 	srl	r2,r6,r4
 4018cf0:	00c100b4 	movhi	r3,1026
 4018cf4:	18dd7204 	addi	r3,r3,30152
 4018cf8:	1885883a 	add	r2,r3,r2
 4018cfc:	10c00003 	ldbu	r3,0(r2)
 4018d00:	00800804 	movi	r2,32
 4018d04:	1909883a 	add	r4,r3,r4
 4018d08:	1125c83a 	sub	r18,r2,r4
 4018d0c:	90000526 	beq	r18,zero,4018d24 <__umoddi3+0x94>
 4018d10:	8ca2983a 	sll	r17,r17,r18
 4018d14:	8108d83a 	srl	r4,r16,r4
 4018d18:	34a6983a 	sll	r19,r6,r18
 4018d1c:	84a8983a 	sll	r20,r16,r18
 4018d20:	2478b03a 	or	fp,r4,r17
 4018d24:	982cd43a 	srli	r22,r19,16
 4018d28:	e009883a 	mov	r4,fp
 4018d2c:	9dffffcc 	andi	r23,r19,65535
 4018d30:	b00b883a 	mov	r5,r22
 4018d34:	400d7400 	call	400d740 <__umodsi3>
 4018d38:	b00b883a 	mov	r5,r22
 4018d3c:	e009883a 	mov	r4,fp
 4018d40:	102b883a 	mov	r21,r2
 4018d44:	400d6dc0 	call	400d6dc <__udivsi3>
 4018d48:	100b883a 	mov	r5,r2
 4018d4c:	b809883a 	mov	r4,r23
 4018d50:	400d7980 	call	400d798 <__mulsi3>
 4018d54:	a82a943a 	slli	r21,r21,16
 4018d58:	a006d43a 	srli	r3,r20,16
 4018d5c:	1d46b03a 	or	r3,r3,r21
 4018d60:	1880032e 	bgeu	r3,r2,4018d70 <__umoddi3+0xe0>
 4018d64:	1cc7883a 	add	r3,r3,r19
 4018d68:	1cc00136 	bltu	r3,r19,4018d70 <__umoddi3+0xe0>
 4018d6c:	18813136 	bltu	r3,r2,4019234 <__umoddi3+0x5a4>
 4018d70:	18a1c83a 	sub	r16,r3,r2
 4018d74:	b00b883a 	mov	r5,r22
 4018d78:	8009883a 	mov	r4,r16
 4018d7c:	400d7400 	call	400d740 <__umodsi3>
 4018d80:	b00b883a 	mov	r5,r22
 4018d84:	8009883a 	mov	r4,r16
 4018d88:	1023883a 	mov	r17,r2
 4018d8c:	400d6dc0 	call	400d6dc <__udivsi3>
 4018d90:	100b883a 	mov	r5,r2
 4018d94:	b809883a 	mov	r4,r23
 4018d98:	8822943a 	slli	r17,r17,16
 4018d9c:	400d7980 	call	400d798 <__mulsi3>
 4018da0:	a0ffffcc 	andi	r3,r20,65535
 4018da4:	1c46b03a 	or	r3,r3,r17
 4018da8:	1880042e 	bgeu	r3,r2,4018dbc <__umoddi3+0x12c>
 4018dac:	1cc7883a 	add	r3,r3,r19
 4018db0:	1cc00236 	bltu	r3,r19,4018dbc <__umoddi3+0x12c>
 4018db4:	1880012e 	bgeu	r3,r2,4018dbc <__umoddi3+0x12c>
 4018db8:	1cc7883a 	add	r3,r3,r19
 4018dbc:	1885c83a 	sub	r2,r3,r2
 4018dc0:	1484d83a 	srl	r2,r2,r18
 4018dc4:	0007883a 	mov	r3,zero
 4018dc8:	00005306 	br	4018f18 <__umoddi3+0x288>
 4018dcc:	29c05036 	bltu	r5,r7,4018f10 <__umoddi3+0x280>
 4018dd0:	00bfffd4 	movui	r2,65535
 4018dd4:	11c05c2e 	bgeu	r2,r7,4018f48 <__umoddi3+0x2b8>
 4018dd8:	00804034 	movhi	r2,256
 4018ddc:	10bfffc4 	addi	r2,r2,-1
 4018de0:	11c10636 	bltu	r2,r7,40191fc <__umoddi3+0x56c>
 4018de4:	01000404 	movi	r4,16
 4018de8:	3904d83a 	srl	r2,r7,r4
 4018dec:	00c100b4 	movhi	r3,1026
 4018df0:	18dd7204 	addi	r3,r3,30152
 4018df4:	1885883a 	add	r2,r3,r2
 4018df8:	14c00003 	ldbu	r19,0(r2)
 4018dfc:	00c00804 	movi	r3,32
 4018e00:	9927883a 	add	r19,r19,r4
 4018e04:	1ce9c83a 	sub	r20,r3,r19
 4018e08:	a0005c1e 	bne	r20,zero,4018f7c <__umoddi3+0x2ec>
 4018e0c:	3c400136 	bltu	r7,r17,4018e14 <__umoddi3+0x184>
 4018e10:	81810a36 	bltu	r16,r6,401923c <__umoddi3+0x5ac>
 4018e14:	8185c83a 	sub	r2,r16,r6
 4018e18:	89e3c83a 	sub	r17,r17,r7
 4018e1c:	8089803a 	cmpltu	r4,r16,r2
 4018e20:	8939c83a 	sub	fp,r17,r4
 4018e24:	e007883a 	mov	r3,fp
 4018e28:	00003b06 	br	4018f18 <__umoddi3+0x288>
 4018e2c:	3000041e 	bne	r6,zero,4018e40 <__umoddi3+0x1b0>
 4018e30:	000b883a 	mov	r5,zero
 4018e34:	01000044 	movi	r4,1
 4018e38:	400d6dc0 	call	400d6dc <__udivsi3>
 4018e3c:	1027883a 	mov	r19,r2
 4018e40:	00bfffd4 	movui	r2,65535
 4018e44:	14c0442e 	bgeu	r2,r19,4018f58 <__umoddi3+0x2c8>
 4018e48:	00804034 	movhi	r2,256
 4018e4c:	10bfffc4 	addi	r2,r2,-1
 4018e50:	14c0ec36 	bltu	r2,r19,4019204 <__umoddi3+0x574>
 4018e54:	00800404 	movi	r2,16
 4018e58:	9886d83a 	srl	r3,r19,r2
 4018e5c:	010100b4 	movhi	r4,1026
 4018e60:	211d7204 	addi	r4,r4,30152
 4018e64:	20c7883a 	add	r3,r4,r3
 4018e68:	18c00003 	ldbu	r3,0(r3)
 4018e6c:	1887883a 	add	r3,r3,r2
 4018e70:	00800804 	movi	r2,32
 4018e74:	10e5c83a 	sub	r18,r2,r3
 4018e78:	9000ab1e 	bne	r18,zero,4019128 <__umoddi3+0x498>
 4018e7c:	982cd43a 	srli	r22,r19,16
 4018e80:	8ce3c83a 	sub	r17,r17,r19
 4018e84:	9dffffcc 	andi	r23,r19,65535
 4018e88:	b00b883a 	mov	r5,r22
 4018e8c:	8809883a 	mov	r4,r17
 4018e90:	400d7400 	call	400d740 <__umodsi3>
 4018e94:	b00b883a 	mov	r5,r22
 4018e98:	8809883a 	mov	r4,r17
 4018e9c:	102b883a 	mov	r21,r2
 4018ea0:	400d6dc0 	call	400d6dc <__udivsi3>
 4018ea4:	b80b883a 	mov	r5,r23
 4018ea8:	1009883a 	mov	r4,r2
 4018eac:	400d7980 	call	400d798 <__mulsi3>
 4018eb0:	a82a943a 	slli	r21,r21,16
 4018eb4:	a006d43a 	srli	r3,r20,16
 4018eb8:	1d46b03a 	or	r3,r3,r21
 4018ebc:	1880042e 	bgeu	r3,r2,4018ed0 <__umoddi3+0x240>
 4018ec0:	1cc7883a 	add	r3,r3,r19
 4018ec4:	1cc00236 	bltu	r3,r19,4018ed0 <__umoddi3+0x240>
 4018ec8:	1880012e 	bgeu	r3,r2,4018ed0 <__umoddi3+0x240>
 4018ecc:	1cc7883a 	add	r3,r3,r19
 4018ed0:	18a1c83a 	sub	r16,r3,r2
 4018ed4:	b00b883a 	mov	r5,r22
 4018ed8:	8009883a 	mov	r4,r16
 4018edc:	400d7400 	call	400d740 <__umodsi3>
 4018ee0:	1023883a 	mov	r17,r2
 4018ee4:	b00b883a 	mov	r5,r22
 4018ee8:	8009883a 	mov	r4,r16
 4018eec:	400d6dc0 	call	400d6dc <__udivsi3>
 4018ef0:	8822943a 	slli	r17,r17,16
 4018ef4:	b80b883a 	mov	r5,r23
 4018ef8:	1009883a 	mov	r4,r2
 4018efc:	400d7980 	call	400d798 <__mulsi3>
 4018f00:	a53fffcc 	andi	r20,r20,65535
 4018f04:	a446b03a 	or	r3,r20,r17
 4018f08:	18bfac2e 	bgeu	r3,r2,4018dbc <__alt_mem_onchip_memory2_0+0xfc017b1c>
 4018f0c:	003fa706 	br	4018dac <__alt_mem_onchip_memory2_0+0xfc017b0c>
 4018f10:	2005883a 	mov	r2,r4
 4018f14:	2807883a 	mov	r3,r5
 4018f18:	dfc00c17 	ldw	ra,48(sp)
 4018f1c:	df000b17 	ldw	fp,44(sp)
 4018f20:	ddc00a17 	ldw	r23,40(sp)
 4018f24:	dd800917 	ldw	r22,36(sp)
 4018f28:	dd400817 	ldw	r21,32(sp)
 4018f2c:	dd000717 	ldw	r20,28(sp)
 4018f30:	dcc00617 	ldw	r19,24(sp)
 4018f34:	dc800517 	ldw	r18,20(sp)
 4018f38:	dc400417 	ldw	r17,16(sp)
 4018f3c:	dc000317 	ldw	r16,12(sp)
 4018f40:	dec00d04 	addi	sp,sp,52
 4018f44:	f800283a 	ret
 4018f48:	04c03fc4 	movi	r19,255
 4018f4c:	99c9803a 	cmpltu	r4,r19,r7
 4018f50:	200890fa 	slli	r4,r4,3
 4018f54:	003fa406 	br	4018de8 <__alt_mem_onchip_memory2_0+0xfc017b48>
 4018f58:	00803fc4 	movi	r2,255
 4018f5c:	14c5803a 	cmpltu	r2,r2,r19
 4018f60:	100490fa 	slli	r2,r2,3
 4018f64:	003fbc06 	br	4018e58 <__alt_mem_onchip_memory2_0+0xfc017bb8>
 4018f68:	00804034 	movhi	r2,256
 4018f6c:	10bfffc4 	addi	r2,r2,-1
 4018f70:	1180a636 	bltu	r2,r6,401920c <__umoddi3+0x57c>
 4018f74:	01000404 	movi	r4,16
 4018f78:	003f5c06 	br	4018cec <__alt_mem_onchip_memory2_0+0xfc017a4c>
 4018f7c:	3d0e983a 	sll	r7,r7,r20
 4018f80:	34ead83a 	srl	r21,r6,r19
 4018f84:	8cc6d83a 	srl	r3,r17,r19
 4018f88:	8d10983a 	sll	r8,r17,r20
 4018f8c:	3d6ab03a 	or	r21,r7,r21
 4018f90:	a82cd43a 	srli	r22,r21,16
 4018f94:	84e2d83a 	srl	r17,r16,r19
 4018f98:	1809883a 	mov	r4,r3
 4018f9c:	b00b883a 	mov	r5,r22
 4018fa0:	8a22b03a 	or	r17,r17,r8
 4018fa4:	3524983a 	sll	r18,r6,r20
 4018fa8:	dc400015 	stw	r17,0(sp)
 4018fac:	d8c00115 	stw	r3,4(sp)
 4018fb0:	400d7400 	call	400d740 <__umodsi3>
 4018fb4:	d8c00117 	ldw	r3,4(sp)
 4018fb8:	b00b883a 	mov	r5,r22
 4018fbc:	1039883a 	mov	fp,r2
 4018fc0:	1809883a 	mov	r4,r3
 4018fc4:	400d6dc0 	call	400d6dc <__udivsi3>
 4018fc8:	adffffcc 	andi	r23,r21,65535
 4018fcc:	100b883a 	mov	r5,r2
 4018fd0:	b809883a 	mov	r4,r23
 4018fd4:	1023883a 	mov	r17,r2
 4018fd8:	400d7980 	call	400d798 <__mulsi3>
 4018fdc:	d9400017 	ldw	r5,0(sp)
 4018fe0:	e008943a 	slli	r4,fp,16
 4018fe4:	8520983a 	sll	r16,r16,r20
 4018fe8:	2806d43a 	srli	r3,r5,16
 4018fec:	1906b03a 	or	r3,r3,r4
 4018ff0:	1880042e 	bgeu	r3,r2,4019004 <__umoddi3+0x374>
 4018ff4:	1d47883a 	add	r3,r3,r21
 4018ff8:	893fffc4 	addi	r4,r17,-1
 4018ffc:	1d40892e 	bgeu	r3,r21,4019224 <__umoddi3+0x594>
 4019000:	2023883a 	mov	r17,r4
 4019004:	18b9c83a 	sub	fp,r3,r2
 4019008:	b00b883a 	mov	r5,r22
 401900c:	e009883a 	mov	r4,fp
 4019010:	400d7400 	call	400d740 <__umodsi3>
 4019014:	b00b883a 	mov	r5,r22
 4019018:	e009883a 	mov	r4,fp
 401901c:	d8800215 	stw	r2,8(sp)
 4019020:	400d6dc0 	call	400d6dc <__udivsi3>
 4019024:	100b883a 	mov	r5,r2
 4019028:	b809883a 	mov	r4,r23
 401902c:	102d883a 	mov	r22,r2
 4019030:	400d7980 	call	400d798 <__mulsi3>
 4019034:	d9800217 	ldw	r6,8(sp)
 4019038:	d8c00017 	ldw	r3,0(sp)
 401903c:	300c943a 	slli	r6,r6,16
 4019040:	1a3fffcc 	andi	r8,r3,65535
 4019044:	4190b03a 	or	r8,r8,r6
 4019048:	4080042e 	bgeu	r8,r2,401905c <__umoddi3+0x3cc>
 401904c:	4551883a 	add	r8,r8,r21
 4019050:	b0ffffc4 	addi	r3,r22,-1
 4019054:	45406f2e 	bgeu	r8,r21,4019214 <__umoddi3+0x584>
 4019058:	182d883a 	mov	r22,r3
 401905c:	880e943a 	slli	r7,r17,16
 4019060:	9006d43a 	srli	r3,r18,16
 4019064:	91bfffcc 	andi	r6,r18,65535
 4019068:	3dacb03a 	or	r22,r7,r22
 401906c:	b02ed43a 	srli	r23,r22,16
 4019070:	b5bfffcc 	andi	r22,r22,65535
 4019074:	300b883a 	mov	r5,r6
 4019078:	b009883a 	mov	r4,r22
 401907c:	40a3c83a 	sub	r17,r8,r2
 4019080:	d8c00115 	stw	r3,4(sp)
 4019084:	d9800215 	stw	r6,8(sp)
 4019088:	400d7980 	call	400d798 <__mulsi3>
 401908c:	d9800217 	ldw	r6,8(sp)
 4019090:	b809883a 	mov	r4,r23
 4019094:	1039883a 	mov	fp,r2
 4019098:	300b883a 	mov	r5,r6
 401909c:	400d7980 	call	400d798 <__mulsi3>
 40190a0:	d8c00117 	ldw	r3,4(sp)
 40190a4:	b809883a 	mov	r4,r23
 40190a8:	d8800215 	stw	r2,8(sp)
 40190ac:	180b883a 	mov	r5,r3
 40190b0:	400d7980 	call	400d798 <__mulsi3>
 40190b4:	d8c00117 	ldw	r3,4(sp)
 40190b8:	b009883a 	mov	r4,r22
 40190bc:	102f883a 	mov	r23,r2
 40190c0:	180b883a 	mov	r5,r3
 40190c4:	400d7980 	call	400d798 <__mulsi3>
 40190c8:	d9800217 	ldw	r6,8(sp)
 40190cc:	e006d43a 	srli	r3,fp,16
 40190d0:	1185883a 	add	r2,r2,r6
 40190d4:	1885883a 	add	r2,r3,r2
 40190d8:	1180022e 	bgeu	r2,r6,40190e4 <__umoddi3+0x454>
 40190dc:	00c00074 	movhi	r3,1
 40190e0:	b8ef883a 	add	r23,r23,r3
 40190e4:	1006d43a 	srli	r3,r2,16
 40190e8:	1004943a 	slli	r2,r2,16
 40190ec:	e73fffcc 	andi	fp,fp,65535
 40190f0:	1dc7883a 	add	r3,r3,r23
 40190f4:	1739883a 	add	fp,r2,fp
 40190f8:	88c03a36 	bltu	r17,r3,40191e4 <__umoddi3+0x554>
 40190fc:	88c05126 	beq	r17,r3,4019244 <__umoddi3+0x5b4>
 4019100:	88c9c83a 	sub	r4,r17,r3
 4019104:	e00f883a 	mov	r7,fp
 4019108:	81cfc83a 	sub	r7,r16,r7
 401910c:	81c7803a 	cmpltu	r3,r16,r7
 4019110:	20c7c83a 	sub	r3,r4,r3
 4019114:	1cc4983a 	sll	r2,r3,r19
 4019118:	3d0ed83a 	srl	r7,r7,r20
 401911c:	1d06d83a 	srl	r3,r3,r20
 4019120:	11c4b03a 	or	r2,r2,r7
 4019124:	003f7c06 	br	4018f18 <__alt_mem_onchip_memory2_0+0xfc017c78>
 4019128:	9ca6983a 	sll	r19,r19,r18
 401912c:	88f8d83a 	srl	fp,r17,r3
 4019130:	80c4d83a 	srl	r2,r16,r3
 4019134:	982cd43a 	srli	r22,r19,16
 4019138:	8ca2983a 	sll	r17,r17,r18
 401913c:	e009883a 	mov	r4,fp
 4019140:	b00b883a 	mov	r5,r22
 4019144:	146ab03a 	or	r21,r2,r17
 4019148:	400d7400 	call	400d740 <__umodsi3>
 401914c:	b00b883a 	mov	r5,r22
 4019150:	e009883a 	mov	r4,fp
 4019154:	1029883a 	mov	r20,r2
 4019158:	9dffffcc 	andi	r23,r19,65535
 401915c:	400d6dc0 	call	400d6dc <__udivsi3>
 4019160:	b809883a 	mov	r4,r23
 4019164:	100b883a 	mov	r5,r2
 4019168:	400d7980 	call	400d798 <__mulsi3>
 401916c:	a008943a 	slli	r4,r20,16
 4019170:	a806d43a 	srli	r3,r21,16
 4019174:	84a8983a 	sll	r20,r16,r18
 4019178:	1906b03a 	or	r3,r3,r4
 401917c:	1880042e 	bgeu	r3,r2,4019190 <__umoddi3+0x500>
 4019180:	1cc7883a 	add	r3,r3,r19
 4019184:	1cc00236 	bltu	r3,r19,4019190 <__umoddi3+0x500>
 4019188:	1880012e 	bgeu	r3,r2,4019190 <__umoddi3+0x500>
 401918c:	1cc7883a 	add	r3,r3,r19
 4019190:	18a3c83a 	sub	r17,r3,r2
 4019194:	b00b883a 	mov	r5,r22
 4019198:	8809883a 	mov	r4,r17
 401919c:	400d7400 	call	400d740 <__umodsi3>
 40191a0:	b00b883a 	mov	r5,r22
 40191a4:	8809883a 	mov	r4,r17
 40191a8:	1021883a 	mov	r16,r2
 40191ac:	400d6dc0 	call	400d6dc <__udivsi3>
 40191b0:	100b883a 	mov	r5,r2
 40191b4:	b809883a 	mov	r4,r23
 40191b8:	8020943a 	slli	r16,r16,16
 40191bc:	400d7980 	call	400d798 <__mulsi3>
 40191c0:	a8ffffcc 	andi	r3,r21,65535
 40191c4:	1c06b03a 	or	r3,r3,r16
 40191c8:	1880042e 	bgeu	r3,r2,40191dc <__umoddi3+0x54c>
 40191cc:	1cc7883a 	add	r3,r3,r19
 40191d0:	1cc00236 	bltu	r3,r19,40191dc <__umoddi3+0x54c>
 40191d4:	1880012e 	bgeu	r3,r2,40191dc <__umoddi3+0x54c>
 40191d8:	1cc7883a 	add	r3,r3,r19
 40191dc:	18a3c83a 	sub	r17,r3,r2
 40191e0:	003f2906 	br	4018e88 <__alt_mem_onchip_memory2_0+0xfc017be8>
 40191e4:	e48fc83a 	sub	r7,fp,r18
 40191e8:	1d49c83a 	sub	r4,r3,r21
 40191ec:	e1f9803a 	cmpltu	fp,fp,r7
 40191f0:	2739c83a 	sub	fp,r4,fp
 40191f4:	8f09c83a 	sub	r4,r17,fp
 40191f8:	003fc306 	br	4019108 <__alt_mem_onchip_memory2_0+0xfc017e68>
 40191fc:	01000604 	movi	r4,24
 4019200:	003ef906 	br	4018de8 <__alt_mem_onchip_memory2_0+0xfc017b48>
 4019204:	00800604 	movi	r2,24
 4019208:	003f1306 	br	4018e58 <__alt_mem_onchip_memory2_0+0xfc017bb8>
 401920c:	01000604 	movi	r4,24
 4019210:	003eb606 	br	4018cec <__alt_mem_onchip_memory2_0+0xfc017a4c>
 4019214:	40bf902e 	bgeu	r8,r2,4019058 <__alt_mem_onchip_memory2_0+0xfc017db8>
 4019218:	b5bfff84 	addi	r22,r22,-2
 401921c:	4551883a 	add	r8,r8,r21
 4019220:	003f8e06 	br	401905c <__alt_mem_onchip_memory2_0+0xfc017dbc>
 4019224:	18bf762e 	bgeu	r3,r2,4019000 <__alt_mem_onchip_memory2_0+0xfc017d60>
 4019228:	8c7fff84 	addi	r17,r17,-2
 401922c:	1d47883a 	add	r3,r3,r21
 4019230:	003f7406 	br	4019004 <__alt_mem_onchip_memory2_0+0xfc017d64>
 4019234:	1cc7883a 	add	r3,r3,r19
 4019238:	003ecd06 	br	4018d70 <__alt_mem_onchip_memory2_0+0xfc017ad0>
 401923c:	8005883a 	mov	r2,r16
 4019240:	003ef806 	br	4018e24 <__alt_mem_onchip_memory2_0+0xfc017b84>
 4019244:	873fe736 	bltu	r16,fp,40191e4 <__alt_mem_onchip_memory2_0+0xfc017f44>
 4019248:	e00f883a 	mov	r7,fp
 401924c:	0009883a 	mov	r4,zero
 4019250:	003fad06 	br	4019108 <__alt_mem_onchip_memory2_0+0xfc017e68>

04019254 <__adddf3>:
 4019254:	02c00434 	movhi	r11,16
 4019258:	5affffc4 	addi	r11,r11,-1
 401925c:	2806d7fa 	srli	r3,r5,31
 4019260:	2ad4703a 	and	r10,r5,r11
 4019264:	3ad2703a 	and	r9,r7,r11
 4019268:	3804d53a 	srli	r2,r7,20
 401926c:	3018d77a 	srli	r12,r6,29
 4019270:	280ad53a 	srli	r5,r5,20
 4019274:	501490fa 	slli	r10,r10,3
 4019278:	2010d77a 	srli	r8,r4,29
 401927c:	481290fa 	slli	r9,r9,3
 4019280:	380ed7fa 	srli	r7,r7,31
 4019284:	defffb04 	addi	sp,sp,-20
 4019288:	dc800215 	stw	r18,8(sp)
 401928c:	dc400115 	stw	r17,4(sp)
 4019290:	dc000015 	stw	r16,0(sp)
 4019294:	dfc00415 	stw	ra,16(sp)
 4019298:	dcc00315 	stw	r19,12(sp)
 401929c:	1c803fcc 	andi	r18,r3,255
 40192a0:	2c01ffcc 	andi	r16,r5,2047
 40192a4:	5210b03a 	or	r8,r10,r8
 40192a8:	202290fa 	slli	r17,r4,3
 40192ac:	1081ffcc 	andi	r2,r2,2047
 40192b0:	4b12b03a 	or	r9,r9,r12
 40192b4:	300c90fa 	slli	r6,r6,3
 40192b8:	91c07526 	beq	r18,r7,4019490 <__adddf3+0x23c>
 40192bc:	8087c83a 	sub	r3,r16,r2
 40192c0:	00c0ab0e 	bge	zero,r3,4019570 <__adddf3+0x31c>
 40192c4:	10002a1e 	bne	r2,zero,4019370 <__adddf3+0x11c>
 40192c8:	4984b03a 	or	r2,r9,r6
 40192cc:	1000961e 	bne	r2,zero,4019528 <__adddf3+0x2d4>
 40192d0:	888001cc 	andi	r2,r17,7
 40192d4:	10000726 	beq	r2,zero,40192f4 <__adddf3+0xa0>
 40192d8:	888003cc 	andi	r2,r17,15
 40192dc:	00c00104 	movi	r3,4
 40192e0:	10c00426 	beq	r2,r3,40192f4 <__adddf3+0xa0>
 40192e4:	88c7883a 	add	r3,r17,r3
 40192e8:	1c63803a 	cmpltu	r17,r3,r17
 40192ec:	4451883a 	add	r8,r8,r17
 40192f0:	1823883a 	mov	r17,r3
 40192f4:	4080202c 	andhi	r2,r8,128
 40192f8:	10005926 	beq	r2,zero,4019460 <__adddf3+0x20c>
 40192fc:	84000044 	addi	r16,r16,1
 4019300:	0081ffc4 	movi	r2,2047
 4019304:	8080ba26 	beq	r16,r2,40195f0 <__adddf3+0x39c>
 4019308:	00bfe034 	movhi	r2,65408
 401930c:	10bfffc4 	addi	r2,r2,-1
 4019310:	4090703a 	and	r8,r8,r2
 4019314:	4004977a 	slli	r2,r8,29
 4019318:	4010927a 	slli	r8,r8,9
 401931c:	8822d0fa 	srli	r17,r17,3
 4019320:	8401ffcc 	andi	r16,r16,2047
 4019324:	4010d33a 	srli	r8,r8,12
 4019328:	9007883a 	mov	r3,r18
 401932c:	1444b03a 	or	r2,r2,r17
 4019330:	8401ffcc 	andi	r16,r16,2047
 4019334:	8020953a 	slli	r16,r16,20
 4019338:	18c03fcc 	andi	r3,r3,255
 401933c:	01000434 	movhi	r4,16
 4019340:	213fffc4 	addi	r4,r4,-1
 4019344:	180697fa 	slli	r3,r3,31
 4019348:	4110703a 	and	r8,r8,r4
 401934c:	4410b03a 	or	r8,r8,r16
 4019350:	40c6b03a 	or	r3,r8,r3
 4019354:	dfc00417 	ldw	ra,16(sp)
 4019358:	dcc00317 	ldw	r19,12(sp)
 401935c:	dc800217 	ldw	r18,8(sp)
 4019360:	dc400117 	ldw	r17,4(sp)
 4019364:	dc000017 	ldw	r16,0(sp)
 4019368:	dec00504 	addi	sp,sp,20
 401936c:	f800283a 	ret
 4019370:	0081ffc4 	movi	r2,2047
 4019374:	80bfd626 	beq	r16,r2,40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 4019378:	4a402034 	orhi	r9,r9,128
 401937c:	00800e04 	movi	r2,56
 4019380:	10c09f16 	blt	r2,r3,4019600 <__adddf3+0x3ac>
 4019384:	008007c4 	movi	r2,31
 4019388:	10c0c216 	blt	r2,r3,4019694 <__adddf3+0x440>
 401938c:	00800804 	movi	r2,32
 4019390:	10c5c83a 	sub	r2,r2,r3
 4019394:	488a983a 	sll	r5,r9,r2
 4019398:	30c8d83a 	srl	r4,r6,r3
 401939c:	3084983a 	sll	r2,r6,r2
 40193a0:	48c6d83a 	srl	r3,r9,r3
 40193a4:	290cb03a 	or	r6,r5,r4
 40193a8:	1004c03a 	cmpne	r2,r2,zero
 40193ac:	308cb03a 	or	r6,r6,r2
 40193b0:	898dc83a 	sub	r6,r17,r6
 40193b4:	89a3803a 	cmpltu	r17,r17,r6
 40193b8:	40d1c83a 	sub	r8,r8,r3
 40193bc:	4451c83a 	sub	r8,r8,r17
 40193c0:	3023883a 	mov	r17,r6
 40193c4:	4080202c 	andhi	r2,r8,128
 40193c8:	10002326 	beq	r2,zero,4019458 <__adddf3+0x204>
 40193cc:	04c02034 	movhi	r19,128
 40193d0:	9cffffc4 	addi	r19,r19,-1
 40193d4:	44e6703a 	and	r19,r8,r19
 40193d8:	98007626 	beq	r19,zero,40195b4 <__adddf3+0x360>
 40193dc:	9809883a 	mov	r4,r19
 40193e0:	400e8100 	call	400e810 <__clzsi2>
 40193e4:	10fffe04 	addi	r3,r2,-8
 40193e8:	010007c4 	movi	r4,31
 40193ec:	20c07716 	blt	r4,r3,40195cc <__adddf3+0x378>
 40193f0:	00800804 	movi	r2,32
 40193f4:	10c5c83a 	sub	r2,r2,r3
 40193f8:	8884d83a 	srl	r2,r17,r2
 40193fc:	98d0983a 	sll	r8,r19,r3
 4019400:	88e2983a 	sll	r17,r17,r3
 4019404:	1204b03a 	or	r2,r2,r8
 4019408:	1c007416 	blt	r3,r16,40195dc <__adddf3+0x388>
 401940c:	1c21c83a 	sub	r16,r3,r16
 4019410:	82000044 	addi	r8,r16,1
 4019414:	00c007c4 	movi	r3,31
 4019418:	1a009116 	blt	r3,r8,4019660 <__adddf3+0x40c>
 401941c:	00c00804 	movi	r3,32
 4019420:	1a07c83a 	sub	r3,r3,r8
 4019424:	8a08d83a 	srl	r4,r17,r8
 4019428:	88e2983a 	sll	r17,r17,r3
 401942c:	10c6983a 	sll	r3,r2,r3
 4019430:	1210d83a 	srl	r8,r2,r8
 4019434:	8804c03a 	cmpne	r2,r17,zero
 4019438:	1906b03a 	or	r3,r3,r4
 401943c:	18a2b03a 	or	r17,r3,r2
 4019440:	0021883a 	mov	r16,zero
 4019444:	003fa206 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 4019448:	1890b03a 	or	r8,r3,r2
 401944c:	40017d26 	beq	r8,zero,4019a44 <__adddf3+0x7f0>
 4019450:	1011883a 	mov	r8,r2
 4019454:	1823883a 	mov	r17,r3
 4019458:	888001cc 	andi	r2,r17,7
 401945c:	103f9e1e 	bne	r2,zero,40192d8 <__alt_mem_onchip_memory2_0+0xfc018038>
 4019460:	4004977a 	slli	r2,r8,29
 4019464:	8822d0fa 	srli	r17,r17,3
 4019468:	4010d0fa 	srli	r8,r8,3
 401946c:	9007883a 	mov	r3,r18
 4019470:	1444b03a 	or	r2,r2,r17
 4019474:	0101ffc4 	movi	r4,2047
 4019478:	81002426 	beq	r16,r4,401950c <__adddf3+0x2b8>
 401947c:	8120703a 	and	r16,r16,r4
 4019480:	01000434 	movhi	r4,16
 4019484:	213fffc4 	addi	r4,r4,-1
 4019488:	4110703a 	and	r8,r8,r4
 401948c:	003fa806 	br	4019330 <__alt_mem_onchip_memory2_0+0xfc018090>
 4019490:	8089c83a 	sub	r4,r16,r2
 4019494:	01005e0e 	bge	zero,r4,4019610 <__adddf3+0x3bc>
 4019498:	10002b26 	beq	r2,zero,4019548 <__adddf3+0x2f4>
 401949c:	0081ffc4 	movi	r2,2047
 40194a0:	80bf8b26 	beq	r16,r2,40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 40194a4:	4a402034 	orhi	r9,r9,128
 40194a8:	00800e04 	movi	r2,56
 40194ac:	1100a40e 	bge	r2,r4,4019740 <__adddf3+0x4ec>
 40194b0:	498cb03a 	or	r6,r9,r6
 40194b4:	300ac03a 	cmpne	r5,r6,zero
 40194b8:	0013883a 	mov	r9,zero
 40194bc:	2c4b883a 	add	r5,r5,r17
 40194c0:	2c63803a 	cmpltu	r17,r5,r17
 40194c4:	4a11883a 	add	r8,r9,r8
 40194c8:	8a11883a 	add	r8,r17,r8
 40194cc:	2823883a 	mov	r17,r5
 40194d0:	4080202c 	andhi	r2,r8,128
 40194d4:	103fe026 	beq	r2,zero,4019458 <__alt_mem_onchip_memory2_0+0xfc0181b8>
 40194d8:	84000044 	addi	r16,r16,1
 40194dc:	0081ffc4 	movi	r2,2047
 40194e0:	8080d226 	beq	r16,r2,401982c <__adddf3+0x5d8>
 40194e4:	00bfe034 	movhi	r2,65408
 40194e8:	10bfffc4 	addi	r2,r2,-1
 40194ec:	4090703a 	and	r8,r8,r2
 40194f0:	880ad07a 	srli	r5,r17,1
 40194f4:	400897fa 	slli	r4,r8,31
 40194f8:	88c0004c 	andi	r3,r17,1
 40194fc:	28e2b03a 	or	r17,r5,r3
 4019500:	4010d07a 	srli	r8,r8,1
 4019504:	2462b03a 	or	r17,r4,r17
 4019508:	003f7106 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 401950c:	4088b03a 	or	r4,r8,r2
 4019510:	20014526 	beq	r4,zero,4019a28 <__adddf3+0x7d4>
 4019514:	01000434 	movhi	r4,16
 4019518:	42000234 	orhi	r8,r8,8
 401951c:	213fffc4 	addi	r4,r4,-1
 4019520:	4110703a 	and	r8,r8,r4
 4019524:	003f8206 	br	4019330 <__alt_mem_onchip_memory2_0+0xfc018090>
 4019528:	18ffffc4 	addi	r3,r3,-1
 401952c:	1800491e 	bne	r3,zero,4019654 <__adddf3+0x400>
 4019530:	898bc83a 	sub	r5,r17,r6
 4019534:	8963803a 	cmpltu	r17,r17,r5
 4019538:	4251c83a 	sub	r8,r8,r9
 401953c:	4451c83a 	sub	r8,r8,r17
 4019540:	2823883a 	mov	r17,r5
 4019544:	003f9f06 	br	40193c4 <__alt_mem_onchip_memory2_0+0xfc018124>
 4019548:	4984b03a 	or	r2,r9,r6
 401954c:	103f6026 	beq	r2,zero,40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 4019550:	213fffc4 	addi	r4,r4,-1
 4019554:	2000931e 	bne	r4,zero,40197a4 <__adddf3+0x550>
 4019558:	898d883a 	add	r6,r17,r6
 401955c:	3463803a 	cmpltu	r17,r6,r17
 4019560:	4251883a 	add	r8,r8,r9
 4019564:	8a11883a 	add	r8,r17,r8
 4019568:	3023883a 	mov	r17,r6
 401956c:	003fd806 	br	40194d0 <__alt_mem_onchip_memory2_0+0xfc018230>
 4019570:	1800541e 	bne	r3,zero,40196c4 <__adddf3+0x470>
 4019574:	80800044 	addi	r2,r16,1
 4019578:	1081ffcc 	andi	r2,r2,2047
 401957c:	00c00044 	movi	r3,1
 4019580:	1880a00e 	bge	r3,r2,4019804 <__adddf3+0x5b0>
 4019584:	8989c83a 	sub	r4,r17,r6
 4019588:	8905803a 	cmpltu	r2,r17,r4
 401958c:	4267c83a 	sub	r19,r8,r9
 4019590:	98a7c83a 	sub	r19,r19,r2
 4019594:	9880202c 	andhi	r2,r19,128
 4019598:	10006326 	beq	r2,zero,4019728 <__adddf3+0x4d4>
 401959c:	3463c83a 	sub	r17,r6,r17
 40195a0:	4a07c83a 	sub	r3,r9,r8
 40195a4:	344d803a 	cmpltu	r6,r6,r17
 40195a8:	19a7c83a 	sub	r19,r3,r6
 40195ac:	3825883a 	mov	r18,r7
 40195b0:	983f8a1e 	bne	r19,zero,40193dc <__alt_mem_onchip_memory2_0+0xfc01813c>
 40195b4:	8809883a 	mov	r4,r17
 40195b8:	400e8100 	call	400e810 <__clzsi2>
 40195bc:	10800804 	addi	r2,r2,32
 40195c0:	10fffe04 	addi	r3,r2,-8
 40195c4:	010007c4 	movi	r4,31
 40195c8:	20ff890e 	bge	r4,r3,40193f0 <__alt_mem_onchip_memory2_0+0xfc018150>
 40195cc:	10bff604 	addi	r2,r2,-40
 40195d0:	8884983a 	sll	r2,r17,r2
 40195d4:	0023883a 	mov	r17,zero
 40195d8:	1c3f8c0e 	bge	r3,r16,401940c <__alt_mem_onchip_memory2_0+0xfc01816c>
 40195dc:	023fe034 	movhi	r8,65408
 40195e0:	423fffc4 	addi	r8,r8,-1
 40195e4:	80e1c83a 	sub	r16,r16,r3
 40195e8:	1210703a 	and	r8,r2,r8
 40195ec:	003f3806 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 40195f0:	9007883a 	mov	r3,r18
 40195f4:	0011883a 	mov	r8,zero
 40195f8:	0005883a 	mov	r2,zero
 40195fc:	003f4c06 	br	4019330 <__alt_mem_onchip_memory2_0+0xfc018090>
 4019600:	498cb03a 	or	r6,r9,r6
 4019604:	300cc03a 	cmpne	r6,r6,zero
 4019608:	0007883a 	mov	r3,zero
 401960c:	003f6806 	br	40193b0 <__alt_mem_onchip_memory2_0+0xfc018110>
 4019610:	20009c1e 	bne	r4,zero,4019884 <__adddf3+0x630>
 4019614:	80800044 	addi	r2,r16,1
 4019618:	1141ffcc 	andi	r5,r2,2047
 401961c:	01000044 	movi	r4,1
 4019620:	2140670e 	bge	r4,r5,40197c0 <__adddf3+0x56c>
 4019624:	0101ffc4 	movi	r4,2047
 4019628:	11007f26 	beq	r2,r4,4019828 <__adddf3+0x5d4>
 401962c:	898d883a 	add	r6,r17,r6
 4019630:	4247883a 	add	r3,r8,r9
 4019634:	3451803a 	cmpltu	r8,r6,r17
 4019638:	40d1883a 	add	r8,r8,r3
 401963c:	402297fa 	slli	r17,r8,31
 4019640:	300cd07a 	srli	r6,r6,1
 4019644:	4010d07a 	srli	r8,r8,1
 4019648:	1021883a 	mov	r16,r2
 401964c:	89a2b03a 	or	r17,r17,r6
 4019650:	003f1f06 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 4019654:	0081ffc4 	movi	r2,2047
 4019658:	80bf481e 	bne	r16,r2,401937c <__alt_mem_onchip_memory2_0+0xfc0180dc>
 401965c:	003f1c06 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 4019660:	843ff844 	addi	r16,r16,-31
 4019664:	01000804 	movi	r4,32
 4019668:	1406d83a 	srl	r3,r2,r16
 401966c:	41005026 	beq	r8,r4,40197b0 <__adddf3+0x55c>
 4019670:	01001004 	movi	r4,64
 4019674:	2211c83a 	sub	r8,r4,r8
 4019678:	1204983a 	sll	r2,r2,r8
 401967c:	88a2b03a 	or	r17,r17,r2
 4019680:	8822c03a 	cmpne	r17,r17,zero
 4019684:	1c62b03a 	or	r17,r3,r17
 4019688:	0011883a 	mov	r8,zero
 401968c:	0021883a 	mov	r16,zero
 4019690:	003f7106 	br	4019458 <__alt_mem_onchip_memory2_0+0xfc0181b8>
 4019694:	193ff804 	addi	r4,r3,-32
 4019698:	00800804 	movi	r2,32
 401969c:	4908d83a 	srl	r4,r9,r4
 40196a0:	18804526 	beq	r3,r2,40197b8 <__adddf3+0x564>
 40196a4:	00801004 	movi	r2,64
 40196a8:	10c5c83a 	sub	r2,r2,r3
 40196ac:	4886983a 	sll	r3,r9,r2
 40196b0:	198cb03a 	or	r6,r3,r6
 40196b4:	300cc03a 	cmpne	r6,r6,zero
 40196b8:	218cb03a 	or	r6,r4,r6
 40196bc:	0007883a 	mov	r3,zero
 40196c0:	003f3b06 	br	40193b0 <__alt_mem_onchip_memory2_0+0xfc018110>
 40196c4:	80002a26 	beq	r16,zero,4019770 <__adddf3+0x51c>
 40196c8:	0101ffc4 	movi	r4,2047
 40196cc:	11006826 	beq	r2,r4,4019870 <__adddf3+0x61c>
 40196d0:	00c7c83a 	sub	r3,zero,r3
 40196d4:	42002034 	orhi	r8,r8,128
 40196d8:	01000e04 	movi	r4,56
 40196dc:	20c07c16 	blt	r4,r3,40198d0 <__adddf3+0x67c>
 40196e0:	010007c4 	movi	r4,31
 40196e4:	20c0da16 	blt	r4,r3,4019a50 <__adddf3+0x7fc>
 40196e8:	01000804 	movi	r4,32
 40196ec:	20c9c83a 	sub	r4,r4,r3
 40196f0:	4114983a 	sll	r10,r8,r4
 40196f4:	88cad83a 	srl	r5,r17,r3
 40196f8:	8908983a 	sll	r4,r17,r4
 40196fc:	40c6d83a 	srl	r3,r8,r3
 4019700:	5162b03a 	or	r17,r10,r5
 4019704:	2008c03a 	cmpne	r4,r4,zero
 4019708:	8922b03a 	or	r17,r17,r4
 401970c:	3463c83a 	sub	r17,r6,r17
 4019710:	48c7c83a 	sub	r3,r9,r3
 4019714:	344d803a 	cmpltu	r6,r6,r17
 4019718:	1991c83a 	sub	r8,r3,r6
 401971c:	1021883a 	mov	r16,r2
 4019720:	3825883a 	mov	r18,r7
 4019724:	003f2706 	br	40193c4 <__alt_mem_onchip_memory2_0+0xfc018124>
 4019728:	24d0b03a 	or	r8,r4,r19
 401972c:	40001b1e 	bne	r8,zero,401979c <__adddf3+0x548>
 4019730:	0005883a 	mov	r2,zero
 4019734:	0007883a 	mov	r3,zero
 4019738:	0021883a 	mov	r16,zero
 401973c:	003f4d06 	br	4019474 <__alt_mem_onchip_memory2_0+0xfc0181d4>
 4019740:	008007c4 	movi	r2,31
 4019744:	11003c16 	blt	r2,r4,4019838 <__adddf3+0x5e4>
 4019748:	00800804 	movi	r2,32
 401974c:	1105c83a 	sub	r2,r2,r4
 4019750:	488e983a 	sll	r7,r9,r2
 4019754:	310ad83a 	srl	r5,r6,r4
 4019758:	3084983a 	sll	r2,r6,r2
 401975c:	4912d83a 	srl	r9,r9,r4
 4019760:	394ab03a 	or	r5,r7,r5
 4019764:	1004c03a 	cmpne	r2,r2,zero
 4019768:	288ab03a 	or	r5,r5,r2
 401976c:	003f5306 	br	40194bc <__alt_mem_onchip_memory2_0+0xfc01821c>
 4019770:	4448b03a 	or	r4,r8,r17
 4019774:	20003e26 	beq	r4,zero,4019870 <__adddf3+0x61c>
 4019778:	00c6303a 	nor	r3,zero,r3
 401977c:	18003a1e 	bne	r3,zero,4019868 <__adddf3+0x614>
 4019780:	3463c83a 	sub	r17,r6,r17
 4019784:	4a07c83a 	sub	r3,r9,r8
 4019788:	344d803a 	cmpltu	r6,r6,r17
 401978c:	1991c83a 	sub	r8,r3,r6
 4019790:	1021883a 	mov	r16,r2
 4019794:	3825883a 	mov	r18,r7
 4019798:	003f0a06 	br	40193c4 <__alt_mem_onchip_memory2_0+0xfc018124>
 401979c:	2023883a 	mov	r17,r4
 40197a0:	003f0d06 	br	40193d8 <__alt_mem_onchip_memory2_0+0xfc018138>
 40197a4:	0081ffc4 	movi	r2,2047
 40197a8:	80bf3f1e 	bne	r16,r2,40194a8 <__alt_mem_onchip_memory2_0+0xfc018208>
 40197ac:	003ec806 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 40197b0:	0005883a 	mov	r2,zero
 40197b4:	003fb106 	br	401967c <__alt_mem_onchip_memory2_0+0xfc0183dc>
 40197b8:	0007883a 	mov	r3,zero
 40197bc:	003fbc06 	br	40196b0 <__alt_mem_onchip_memory2_0+0xfc018410>
 40197c0:	4444b03a 	or	r2,r8,r17
 40197c4:	8000871e 	bne	r16,zero,40199e4 <__adddf3+0x790>
 40197c8:	1000ba26 	beq	r2,zero,4019ab4 <__adddf3+0x860>
 40197cc:	4984b03a 	or	r2,r9,r6
 40197d0:	103ebf26 	beq	r2,zero,40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 40197d4:	8985883a 	add	r2,r17,r6
 40197d8:	4247883a 	add	r3,r8,r9
 40197dc:	1451803a 	cmpltu	r8,r2,r17
 40197e0:	40d1883a 	add	r8,r8,r3
 40197e4:	40c0202c 	andhi	r3,r8,128
 40197e8:	1023883a 	mov	r17,r2
 40197ec:	183f1a26 	beq	r3,zero,4019458 <__alt_mem_onchip_memory2_0+0xfc0181b8>
 40197f0:	00bfe034 	movhi	r2,65408
 40197f4:	10bfffc4 	addi	r2,r2,-1
 40197f8:	2021883a 	mov	r16,r4
 40197fc:	4090703a 	and	r8,r8,r2
 4019800:	003eb306 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 4019804:	4444b03a 	or	r2,r8,r17
 4019808:	8000291e 	bne	r16,zero,40198b0 <__adddf3+0x65c>
 401980c:	10004b1e 	bne	r2,zero,401993c <__adddf3+0x6e8>
 4019810:	4990b03a 	or	r8,r9,r6
 4019814:	40008b26 	beq	r8,zero,4019a44 <__adddf3+0x7f0>
 4019818:	4811883a 	mov	r8,r9
 401981c:	3023883a 	mov	r17,r6
 4019820:	3825883a 	mov	r18,r7
 4019824:	003eaa06 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 4019828:	1021883a 	mov	r16,r2
 401982c:	0011883a 	mov	r8,zero
 4019830:	0005883a 	mov	r2,zero
 4019834:	003f0f06 	br	4019474 <__alt_mem_onchip_memory2_0+0xfc0181d4>
 4019838:	217ff804 	addi	r5,r4,-32
 401983c:	00800804 	movi	r2,32
 4019840:	494ad83a 	srl	r5,r9,r5
 4019844:	20807d26 	beq	r4,r2,4019a3c <__adddf3+0x7e8>
 4019848:	00801004 	movi	r2,64
 401984c:	1109c83a 	sub	r4,r2,r4
 4019850:	4912983a 	sll	r9,r9,r4
 4019854:	498cb03a 	or	r6,r9,r6
 4019858:	300cc03a 	cmpne	r6,r6,zero
 401985c:	298ab03a 	or	r5,r5,r6
 4019860:	0013883a 	mov	r9,zero
 4019864:	003f1506 	br	40194bc <__alt_mem_onchip_memory2_0+0xfc01821c>
 4019868:	0101ffc4 	movi	r4,2047
 401986c:	113f9a1e 	bne	r2,r4,40196d8 <__alt_mem_onchip_memory2_0+0xfc018438>
 4019870:	4811883a 	mov	r8,r9
 4019874:	3023883a 	mov	r17,r6
 4019878:	1021883a 	mov	r16,r2
 401987c:	3825883a 	mov	r18,r7
 4019880:	003e9306 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 4019884:	8000161e 	bne	r16,zero,40198e0 <__adddf3+0x68c>
 4019888:	444ab03a 	or	r5,r8,r17
 401988c:	28005126 	beq	r5,zero,40199d4 <__adddf3+0x780>
 4019890:	0108303a 	nor	r4,zero,r4
 4019894:	20004d1e 	bne	r4,zero,40199cc <__adddf3+0x778>
 4019898:	89a3883a 	add	r17,r17,r6
 401989c:	4253883a 	add	r9,r8,r9
 40198a0:	898d803a 	cmpltu	r6,r17,r6
 40198a4:	3251883a 	add	r8,r6,r9
 40198a8:	1021883a 	mov	r16,r2
 40198ac:	003f0806 	br	40194d0 <__alt_mem_onchip_memory2_0+0xfc018230>
 40198b0:	1000301e 	bne	r2,zero,4019974 <__adddf3+0x720>
 40198b4:	4984b03a 	or	r2,r9,r6
 40198b8:	10007126 	beq	r2,zero,4019a80 <__adddf3+0x82c>
 40198bc:	4811883a 	mov	r8,r9
 40198c0:	3023883a 	mov	r17,r6
 40198c4:	3825883a 	mov	r18,r7
 40198c8:	0401ffc4 	movi	r16,2047
 40198cc:	003e8006 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 40198d0:	4462b03a 	or	r17,r8,r17
 40198d4:	8822c03a 	cmpne	r17,r17,zero
 40198d8:	0007883a 	mov	r3,zero
 40198dc:	003f8b06 	br	401970c <__alt_mem_onchip_memory2_0+0xfc01846c>
 40198e0:	0141ffc4 	movi	r5,2047
 40198e4:	11403b26 	beq	r2,r5,40199d4 <__adddf3+0x780>
 40198e8:	0109c83a 	sub	r4,zero,r4
 40198ec:	42002034 	orhi	r8,r8,128
 40198f0:	01400e04 	movi	r5,56
 40198f4:	29006716 	blt	r5,r4,4019a94 <__adddf3+0x840>
 40198f8:	014007c4 	movi	r5,31
 40198fc:	29007016 	blt	r5,r4,4019ac0 <__adddf3+0x86c>
 4019900:	01400804 	movi	r5,32
 4019904:	290bc83a 	sub	r5,r5,r4
 4019908:	4154983a 	sll	r10,r8,r5
 401990c:	890ed83a 	srl	r7,r17,r4
 4019910:	894a983a 	sll	r5,r17,r5
 4019914:	4108d83a 	srl	r4,r8,r4
 4019918:	51e2b03a 	or	r17,r10,r7
 401991c:	280ac03a 	cmpne	r5,r5,zero
 4019920:	8962b03a 	or	r17,r17,r5
 4019924:	89a3883a 	add	r17,r17,r6
 4019928:	2253883a 	add	r9,r4,r9
 401992c:	898d803a 	cmpltu	r6,r17,r6
 4019930:	3251883a 	add	r8,r6,r9
 4019934:	1021883a 	mov	r16,r2
 4019938:	003ee506 	br	40194d0 <__alt_mem_onchip_memory2_0+0xfc018230>
 401993c:	4984b03a 	or	r2,r9,r6
 4019940:	103e6326 	beq	r2,zero,40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 4019944:	8987c83a 	sub	r3,r17,r6
 4019948:	88c9803a 	cmpltu	r4,r17,r3
 401994c:	4245c83a 	sub	r2,r8,r9
 4019950:	1105c83a 	sub	r2,r2,r4
 4019954:	1100202c 	andhi	r4,r2,128
 4019958:	203ebb26 	beq	r4,zero,4019448 <__alt_mem_onchip_memory2_0+0xfc0181a8>
 401995c:	3463c83a 	sub	r17,r6,r17
 4019960:	4a07c83a 	sub	r3,r9,r8
 4019964:	344d803a 	cmpltu	r6,r6,r17
 4019968:	1991c83a 	sub	r8,r3,r6
 401996c:	3825883a 	mov	r18,r7
 4019970:	003e5706 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 4019974:	4984b03a 	or	r2,r9,r6
 4019978:	10002e26 	beq	r2,zero,4019a34 <__adddf3+0x7e0>
 401997c:	4004d0fa 	srli	r2,r8,3
 4019980:	8822d0fa 	srli	r17,r17,3
 4019984:	4010977a 	slli	r8,r8,29
 4019988:	10c0022c 	andhi	r3,r2,8
 401998c:	4462b03a 	or	r17,r8,r17
 4019990:	18000826 	beq	r3,zero,40199b4 <__adddf3+0x760>
 4019994:	4808d0fa 	srli	r4,r9,3
 4019998:	20c0022c 	andhi	r3,r4,8
 401999c:	1800051e 	bne	r3,zero,40199b4 <__adddf3+0x760>
 40199a0:	300cd0fa 	srli	r6,r6,3
 40199a4:	4806977a 	slli	r3,r9,29
 40199a8:	2005883a 	mov	r2,r4
 40199ac:	3825883a 	mov	r18,r7
 40199b0:	19a2b03a 	or	r17,r3,r6
 40199b4:	8810d77a 	srli	r8,r17,29
 40199b8:	100490fa 	slli	r2,r2,3
 40199bc:	882290fa 	slli	r17,r17,3
 40199c0:	0401ffc4 	movi	r16,2047
 40199c4:	4090b03a 	or	r8,r8,r2
 40199c8:	003e4106 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 40199cc:	0141ffc4 	movi	r5,2047
 40199d0:	117fc71e 	bne	r2,r5,40198f0 <__alt_mem_onchip_memory2_0+0xfc018650>
 40199d4:	4811883a 	mov	r8,r9
 40199d8:	3023883a 	mov	r17,r6
 40199dc:	1021883a 	mov	r16,r2
 40199e0:	003e3b06 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 40199e4:	10002f26 	beq	r2,zero,4019aa4 <__adddf3+0x850>
 40199e8:	4984b03a 	or	r2,r9,r6
 40199ec:	10001126 	beq	r2,zero,4019a34 <__adddf3+0x7e0>
 40199f0:	4004d0fa 	srli	r2,r8,3
 40199f4:	8822d0fa 	srli	r17,r17,3
 40199f8:	4010977a 	slli	r8,r8,29
 40199fc:	10c0022c 	andhi	r3,r2,8
 4019a00:	4462b03a 	or	r17,r8,r17
 4019a04:	183feb26 	beq	r3,zero,40199b4 <__alt_mem_onchip_memory2_0+0xfc018714>
 4019a08:	4808d0fa 	srli	r4,r9,3
 4019a0c:	20c0022c 	andhi	r3,r4,8
 4019a10:	183fe81e 	bne	r3,zero,40199b4 <__alt_mem_onchip_memory2_0+0xfc018714>
 4019a14:	300cd0fa 	srli	r6,r6,3
 4019a18:	4806977a 	slli	r3,r9,29
 4019a1c:	2005883a 	mov	r2,r4
 4019a20:	19a2b03a 	or	r17,r3,r6
 4019a24:	003fe306 	br	40199b4 <__alt_mem_onchip_memory2_0+0xfc018714>
 4019a28:	0011883a 	mov	r8,zero
 4019a2c:	0005883a 	mov	r2,zero
 4019a30:	003e3f06 	br	4019330 <__alt_mem_onchip_memory2_0+0xfc018090>
 4019a34:	0401ffc4 	movi	r16,2047
 4019a38:	003e2506 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 4019a3c:	0013883a 	mov	r9,zero
 4019a40:	003f8406 	br	4019854 <__alt_mem_onchip_memory2_0+0xfc0185b4>
 4019a44:	0005883a 	mov	r2,zero
 4019a48:	0007883a 	mov	r3,zero
 4019a4c:	003e8906 	br	4019474 <__alt_mem_onchip_memory2_0+0xfc0181d4>
 4019a50:	197ff804 	addi	r5,r3,-32
 4019a54:	01000804 	movi	r4,32
 4019a58:	414ad83a 	srl	r5,r8,r5
 4019a5c:	19002426 	beq	r3,r4,4019af0 <__adddf3+0x89c>
 4019a60:	01001004 	movi	r4,64
 4019a64:	20c7c83a 	sub	r3,r4,r3
 4019a68:	40c6983a 	sll	r3,r8,r3
 4019a6c:	1c46b03a 	or	r3,r3,r17
 4019a70:	1806c03a 	cmpne	r3,r3,zero
 4019a74:	28e2b03a 	or	r17,r5,r3
 4019a78:	0007883a 	mov	r3,zero
 4019a7c:	003f2306 	br	401970c <__alt_mem_onchip_memory2_0+0xfc01846c>
 4019a80:	0007883a 	mov	r3,zero
 4019a84:	5811883a 	mov	r8,r11
 4019a88:	00bfffc4 	movi	r2,-1
 4019a8c:	0401ffc4 	movi	r16,2047
 4019a90:	003e7806 	br	4019474 <__alt_mem_onchip_memory2_0+0xfc0181d4>
 4019a94:	4462b03a 	or	r17,r8,r17
 4019a98:	8822c03a 	cmpne	r17,r17,zero
 4019a9c:	0009883a 	mov	r4,zero
 4019aa0:	003fa006 	br	4019924 <__alt_mem_onchip_memory2_0+0xfc018684>
 4019aa4:	4811883a 	mov	r8,r9
 4019aa8:	3023883a 	mov	r17,r6
 4019aac:	0401ffc4 	movi	r16,2047
 4019ab0:	003e0706 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 4019ab4:	4811883a 	mov	r8,r9
 4019ab8:	3023883a 	mov	r17,r6
 4019abc:	003e0406 	br	40192d0 <__alt_mem_onchip_memory2_0+0xfc018030>
 4019ac0:	21fff804 	addi	r7,r4,-32
 4019ac4:	01400804 	movi	r5,32
 4019ac8:	41ced83a 	srl	r7,r8,r7
 4019acc:	21400a26 	beq	r4,r5,4019af8 <__adddf3+0x8a4>
 4019ad0:	01401004 	movi	r5,64
 4019ad4:	2909c83a 	sub	r4,r5,r4
 4019ad8:	4108983a 	sll	r4,r8,r4
 4019adc:	2448b03a 	or	r4,r4,r17
 4019ae0:	2008c03a 	cmpne	r4,r4,zero
 4019ae4:	3922b03a 	or	r17,r7,r4
 4019ae8:	0009883a 	mov	r4,zero
 4019aec:	003f8d06 	br	4019924 <__alt_mem_onchip_memory2_0+0xfc018684>
 4019af0:	0007883a 	mov	r3,zero
 4019af4:	003fdd06 	br	4019a6c <__alt_mem_onchip_memory2_0+0xfc0187cc>
 4019af8:	0009883a 	mov	r4,zero
 4019afc:	003ff706 	br	4019adc <__alt_mem_onchip_memory2_0+0xfc01883c>

04019b00 <__divdf3>:
 4019b00:	defff004 	addi	sp,sp,-64
 4019b04:	dc800815 	stw	r18,32(sp)
 4019b08:	2824d53a 	srli	r18,r5,20
 4019b0c:	dd800c15 	stw	r22,48(sp)
 4019b10:	282cd7fa 	srli	r22,r5,31
 4019b14:	dc000615 	stw	r16,24(sp)
 4019b18:	04000434 	movhi	r16,16
 4019b1c:	843fffc4 	addi	r16,r16,-1
 4019b20:	dfc00f15 	stw	ra,60(sp)
 4019b24:	df000e15 	stw	fp,56(sp)
 4019b28:	ddc00d15 	stw	r23,52(sp)
 4019b2c:	dd400b15 	stw	r21,44(sp)
 4019b30:	dd000a15 	stw	r20,40(sp)
 4019b34:	dcc00915 	stw	r19,36(sp)
 4019b38:	dc400715 	stw	r17,28(sp)
 4019b3c:	9481ffcc 	andi	r18,r18,2047
 4019b40:	2c20703a 	and	r16,r5,r16
 4019b44:	b2003fcc 	andi	r8,r22,255
 4019b48:	90006126 	beq	r18,zero,4019cd0 <__divdf3+0x1d0>
 4019b4c:	0081ffc4 	movi	r2,2047
 4019b50:	202b883a 	mov	r21,r4
 4019b54:	90803726 	beq	r18,r2,4019c34 <__divdf3+0x134>
 4019b58:	80800434 	orhi	r2,r16,16
 4019b5c:	100490fa 	slli	r2,r2,3
 4019b60:	2020d77a 	srli	r16,r4,29
 4019b64:	202a90fa 	slli	r21,r4,3
 4019b68:	94bf0044 	addi	r18,r18,-1023
 4019b6c:	80a0b03a 	or	r16,r16,r2
 4019b70:	0013883a 	mov	r9,zero
 4019b74:	000b883a 	mov	r5,zero
 4019b78:	3806d53a 	srli	r3,r7,20
 4019b7c:	382ed7fa 	srli	r23,r7,31
 4019b80:	04400434 	movhi	r17,16
 4019b84:	8c7fffc4 	addi	r17,r17,-1
 4019b88:	18c1ffcc 	andi	r3,r3,2047
 4019b8c:	3029883a 	mov	r20,r6
 4019b90:	3c62703a 	and	r17,r7,r17
 4019b94:	bf003fcc 	andi	fp,r23,255
 4019b98:	18006e26 	beq	r3,zero,4019d54 <__divdf3+0x254>
 4019b9c:	0081ffc4 	movi	r2,2047
 4019ba0:	18806626 	beq	r3,r2,4019d3c <__divdf3+0x23c>
 4019ba4:	88800434 	orhi	r2,r17,16
 4019ba8:	100490fa 	slli	r2,r2,3
 4019bac:	3022d77a 	srli	r17,r6,29
 4019bb0:	302890fa 	slli	r20,r6,3
 4019bb4:	18ff0044 	addi	r3,r3,-1023
 4019bb8:	88a2b03a 	or	r17,r17,r2
 4019bbc:	000f883a 	mov	r7,zero
 4019bc0:	b5e6f03a 	xor	r19,r22,r23
 4019bc4:	3a4cb03a 	or	r6,r7,r9
 4019bc8:	008003c4 	movi	r2,15
 4019bcc:	9809883a 	mov	r4,r19
 4019bd0:	90c7c83a 	sub	r3,r18,r3
 4019bd4:	9cc03fcc 	andi	r19,r19,255
 4019bd8:	11809636 	bltu	r2,r6,4019e34 <__divdf3+0x334>
 4019bdc:	300c90ba 	slli	r6,r6,2
 4019be0:	008100b4 	movhi	r2,1026
 4019be4:	10a6fd04 	addi	r2,r2,-25612
 4019be8:	308d883a 	add	r6,r6,r2
 4019bec:	30800017 	ldw	r2,0(r6)
 4019bf0:	1000683a 	jmp	r2
 4019bf4:	04019e34 	movhi	r16,1656
 4019bf8:	04019c6c 	andhi	r16,zero,1649
 4019bfc:	04019e24 	muli	r16,zero,1656
 4019c00:	04019c60 	cmpeqi	r16,zero,1649
 4019c04:	04019e24 	muli	r16,zero,1656
 4019c08:	04019df8 	rdprs	r16,zero,1655
 4019c0c:	04019e24 	muli	r16,zero,1656
 4019c10:	04019c60 	cmpeqi	r16,zero,1649
 4019c14:	04019c6c 	andhi	r16,zero,1649
 4019c18:	04019c6c 	andhi	r16,zero,1649
 4019c1c:	04019df8 	rdprs	r16,zero,1655
 4019c20:	04019c60 	cmpeqi	r16,zero,1649
 4019c24:	04019c50 	cmplti	r16,zero,1649
 4019c28:	04019c50 	cmplti	r16,zero,1649
 4019c2c:	04019c50 	cmplti	r16,zero,1649
 4019c30:	0401a1bc 	xorhi	r16,zero,1670
 4019c34:	2404b03a 	or	r2,r4,r16
 4019c38:	10006c1e 	bne	r2,zero,4019dec <__divdf3+0x2ec>
 4019c3c:	02400204 	movi	r9,8
 4019c40:	0021883a 	mov	r16,zero
 4019c44:	002b883a 	mov	r21,zero
 4019c48:	01400084 	movi	r5,2
 4019c4c:	003fca06 	br	4019b78 <__alt_mem_onchip_memory2_0+0xfc0188d8>
 4019c50:	8023883a 	mov	r17,r16
 4019c54:	a829883a 	mov	r20,r21
 4019c58:	4039883a 	mov	fp,r8
 4019c5c:	280f883a 	mov	r7,r5
 4019c60:	00800084 	movi	r2,2
 4019c64:	3881601e 	bne	r7,r2,401a1e8 <__divdf3+0x6e8>
 4019c68:	e027883a 	mov	r19,fp
 4019c6c:	9900004c 	andi	r4,r19,1
 4019c70:	0081ffc4 	movi	r2,2047
 4019c74:	0021883a 	mov	r16,zero
 4019c78:	002b883a 	mov	r21,zero
 4019c7c:	1004953a 	slli	r2,r2,20
 4019c80:	20c03fcc 	andi	r3,r4,255
 4019c84:	01400434 	movhi	r5,16
 4019c88:	297fffc4 	addi	r5,r5,-1
 4019c8c:	180697fa 	slli	r3,r3,31
 4019c90:	8160703a 	and	r16,r16,r5
 4019c94:	80a0b03a 	or	r16,r16,r2
 4019c98:	80c6b03a 	or	r3,r16,r3
 4019c9c:	a805883a 	mov	r2,r21
 4019ca0:	dfc00f17 	ldw	ra,60(sp)
 4019ca4:	df000e17 	ldw	fp,56(sp)
 4019ca8:	ddc00d17 	ldw	r23,52(sp)
 4019cac:	dd800c17 	ldw	r22,48(sp)
 4019cb0:	dd400b17 	ldw	r21,44(sp)
 4019cb4:	dd000a17 	ldw	r20,40(sp)
 4019cb8:	dcc00917 	ldw	r19,36(sp)
 4019cbc:	dc800817 	ldw	r18,32(sp)
 4019cc0:	dc400717 	ldw	r17,28(sp)
 4019cc4:	dc000617 	ldw	r16,24(sp)
 4019cc8:	dec01004 	addi	sp,sp,64
 4019ccc:	f800283a 	ret
 4019cd0:	2404b03a 	or	r2,r4,r16
 4019cd4:	2023883a 	mov	r17,r4
 4019cd8:	10003f26 	beq	r2,zero,4019dd8 <__divdf3+0x2d8>
 4019cdc:	80015e26 	beq	r16,zero,401a258 <__divdf3+0x758>
 4019ce0:	8009883a 	mov	r4,r16
 4019ce4:	d9800215 	stw	r6,8(sp)
 4019ce8:	d9c00515 	stw	r7,20(sp)
 4019cec:	da000415 	stw	r8,16(sp)
 4019cf0:	400e8100 	call	400e810 <__clzsi2>
 4019cf4:	d9800217 	ldw	r6,8(sp)
 4019cf8:	d9c00517 	ldw	r7,20(sp)
 4019cfc:	da000417 	ldw	r8,16(sp)
 4019d00:	113ffd44 	addi	r4,r2,-11
 4019d04:	00c00704 	movi	r3,28
 4019d08:	19014f16 	blt	r3,r4,401a248 <__divdf3+0x748>
 4019d0c:	00c00744 	movi	r3,29
 4019d10:	157ffe04 	addi	r21,r2,-8
 4019d14:	1907c83a 	sub	r3,r3,r4
 4019d18:	8560983a 	sll	r16,r16,r21
 4019d1c:	88c6d83a 	srl	r3,r17,r3
 4019d20:	8d6a983a 	sll	r21,r17,r21
 4019d24:	1c20b03a 	or	r16,r3,r16
 4019d28:	1080fcc4 	addi	r2,r2,1011
 4019d2c:	00a5c83a 	sub	r18,zero,r2
 4019d30:	0013883a 	mov	r9,zero
 4019d34:	000b883a 	mov	r5,zero
 4019d38:	003f8f06 	br	4019b78 <__alt_mem_onchip_memory2_0+0xfc0188d8>
 4019d3c:	3444b03a 	or	r2,r6,r17
 4019d40:	1000231e 	bne	r2,zero,4019dd0 <__divdf3+0x2d0>
 4019d44:	0023883a 	mov	r17,zero
 4019d48:	0029883a 	mov	r20,zero
 4019d4c:	01c00084 	movi	r7,2
 4019d50:	003f9b06 	br	4019bc0 <__alt_mem_onchip_memory2_0+0xfc018920>
 4019d54:	3444b03a 	or	r2,r6,r17
 4019d58:	10001926 	beq	r2,zero,4019dc0 <__divdf3+0x2c0>
 4019d5c:	88014b26 	beq	r17,zero,401a28c <__divdf3+0x78c>
 4019d60:	8809883a 	mov	r4,r17
 4019d64:	d9400115 	stw	r5,4(sp)
 4019d68:	d9800215 	stw	r6,8(sp)
 4019d6c:	da000415 	stw	r8,16(sp)
 4019d70:	da400315 	stw	r9,12(sp)
 4019d74:	400e8100 	call	400e810 <__clzsi2>
 4019d78:	d9400117 	ldw	r5,4(sp)
 4019d7c:	d9800217 	ldw	r6,8(sp)
 4019d80:	da000417 	ldw	r8,16(sp)
 4019d84:	da400317 	ldw	r9,12(sp)
 4019d88:	113ffd44 	addi	r4,r2,-11
 4019d8c:	00c00704 	movi	r3,28
 4019d90:	19013a16 	blt	r3,r4,401a27c <__divdf3+0x77c>
 4019d94:	00c00744 	movi	r3,29
 4019d98:	153ffe04 	addi	r20,r2,-8
 4019d9c:	1907c83a 	sub	r3,r3,r4
 4019da0:	8d22983a 	sll	r17,r17,r20
 4019da4:	30c6d83a 	srl	r3,r6,r3
 4019da8:	3528983a 	sll	r20,r6,r20
 4019dac:	1c62b03a 	or	r17,r3,r17
 4019db0:	1080fcc4 	addi	r2,r2,1011
 4019db4:	0087c83a 	sub	r3,zero,r2
 4019db8:	000f883a 	mov	r7,zero
 4019dbc:	003f8006 	br	4019bc0 <__alt_mem_onchip_memory2_0+0xfc018920>
 4019dc0:	0023883a 	mov	r17,zero
 4019dc4:	0029883a 	mov	r20,zero
 4019dc8:	01c00044 	movi	r7,1
 4019dcc:	003f7c06 	br	4019bc0 <__alt_mem_onchip_memory2_0+0xfc018920>
 4019dd0:	01c000c4 	movi	r7,3
 4019dd4:	003f7a06 	br	4019bc0 <__alt_mem_onchip_memory2_0+0xfc018920>
 4019dd8:	02400104 	movi	r9,4
 4019ddc:	0021883a 	mov	r16,zero
 4019de0:	002b883a 	mov	r21,zero
 4019de4:	01400044 	movi	r5,1
 4019de8:	003f6306 	br	4019b78 <__alt_mem_onchip_memory2_0+0xfc0188d8>
 4019dec:	02400304 	movi	r9,12
 4019df0:	014000c4 	movi	r5,3
 4019df4:	003f6006 	br	4019b78 <__alt_mem_onchip_memory2_0+0xfc0188d8>
 4019df8:	04000434 	movhi	r16,16
 4019dfc:	0009883a 	mov	r4,zero
 4019e00:	843fffc4 	addi	r16,r16,-1
 4019e04:	057fffc4 	movi	r21,-1
 4019e08:	0081ffc4 	movi	r2,2047
 4019e0c:	003f9b06 	br	4019c7c <__alt_mem_onchip_memory2_0+0xfc0189dc>
 4019e10:	00c00044 	movi	r3,1
 4019e14:	1887c83a 	sub	r3,r3,r2
 4019e18:	01000e04 	movi	r4,56
 4019e1c:	20c1530e 	bge	r4,r3,401a36c <__divdf3+0x86c>
 4019e20:	9900004c 	andi	r4,r19,1
 4019e24:	0005883a 	mov	r2,zero
 4019e28:	0021883a 	mov	r16,zero
 4019e2c:	002b883a 	mov	r21,zero
 4019e30:	003f9206 	br	4019c7c <__alt_mem_onchip_memory2_0+0xfc0189dc>
 4019e34:	8c012e36 	bltu	r17,r16,401a2f0 <__divdf3+0x7f0>
 4019e38:	84412c26 	beq	r16,r17,401a2ec <__divdf3+0x7ec>
 4019e3c:	a82f883a 	mov	r23,r21
 4019e40:	18ffffc4 	addi	r3,r3,-1
 4019e44:	002b883a 	mov	r21,zero
 4019e48:	a004d63a 	srli	r2,r20,24
 4019e4c:	8822923a 	slli	r17,r17,8
 4019e50:	a028923a 	slli	r20,r20,8
 4019e54:	8009883a 	mov	r4,r16
 4019e58:	88acb03a 	or	r22,r17,r2
 4019e5c:	dd000015 	stw	r20,0(sp)
 4019e60:	b028d43a 	srli	r20,r22,16
 4019e64:	d8c00215 	stw	r3,8(sp)
 4019e68:	b4bfffcc 	andi	r18,r22,65535
 4019e6c:	a00b883a 	mov	r5,r20
 4019e70:	400d6dc0 	call	400d6dc <__udivsi3>
 4019e74:	100b883a 	mov	r5,r2
 4019e78:	9009883a 	mov	r4,r18
 4019e7c:	1023883a 	mov	r17,r2
 4019e80:	400d7980 	call	400d798 <__mulsi3>
 4019e84:	8009883a 	mov	r4,r16
 4019e88:	a00b883a 	mov	r5,r20
 4019e8c:	1039883a 	mov	fp,r2
 4019e90:	400d7400 	call	400d740 <__umodsi3>
 4019e94:	1004943a 	slli	r2,r2,16
 4019e98:	b808d43a 	srli	r4,r23,16
 4019e9c:	d8c00217 	ldw	r3,8(sp)
 4019ea0:	2084b03a 	or	r2,r4,r2
 4019ea4:	1700062e 	bgeu	r2,fp,4019ec0 <__divdf3+0x3c0>
 4019ea8:	1585883a 	add	r2,r2,r22
 4019eac:	893fffc4 	addi	r4,r17,-1
 4019eb0:	15811d36 	bltu	r2,r22,401a328 <__divdf3+0x828>
 4019eb4:	17011c2e 	bgeu	r2,fp,401a328 <__divdf3+0x828>
 4019eb8:	8c7fff84 	addi	r17,r17,-2
 4019ebc:	1585883a 	add	r2,r2,r22
 4019ec0:	1739c83a 	sub	fp,r2,fp
 4019ec4:	a00b883a 	mov	r5,r20
 4019ec8:	e009883a 	mov	r4,fp
 4019ecc:	d8c00215 	stw	r3,8(sp)
 4019ed0:	400d6dc0 	call	400d6dc <__udivsi3>
 4019ed4:	100b883a 	mov	r5,r2
 4019ed8:	9009883a 	mov	r4,r18
 4019edc:	1021883a 	mov	r16,r2
 4019ee0:	400d7980 	call	400d798 <__mulsi3>
 4019ee4:	a00b883a 	mov	r5,r20
 4019ee8:	e009883a 	mov	r4,fp
 4019eec:	d8800415 	stw	r2,16(sp)
 4019ef0:	400d7400 	call	400d740 <__umodsi3>
 4019ef4:	1004943a 	slli	r2,r2,16
 4019ef8:	da000417 	ldw	r8,16(sp)
 4019efc:	bdffffcc 	andi	r23,r23,65535
 4019f00:	b884b03a 	or	r2,r23,r2
 4019f04:	d8c00217 	ldw	r3,8(sp)
 4019f08:	1200062e 	bgeu	r2,r8,4019f24 <__divdf3+0x424>
 4019f0c:	1585883a 	add	r2,r2,r22
 4019f10:	813fffc4 	addi	r4,r16,-1
 4019f14:	15810236 	bltu	r2,r22,401a320 <__divdf3+0x820>
 4019f18:	1201012e 	bgeu	r2,r8,401a320 <__divdf3+0x820>
 4019f1c:	843fff84 	addi	r16,r16,-2
 4019f20:	1585883a 	add	r2,r2,r22
 4019f24:	8822943a 	slli	r17,r17,16
 4019f28:	d9800017 	ldw	r6,0(sp)
 4019f2c:	1211c83a 	sub	r8,r2,r8
 4019f30:	8c22b03a 	or	r17,r17,r16
 4019f34:	373fffcc 	andi	fp,r6,65535
 4019f38:	8abfffcc 	andi	r10,r17,65535
 4019f3c:	8820d43a 	srli	r16,r17,16
 4019f40:	5009883a 	mov	r4,r10
 4019f44:	e00b883a 	mov	r5,fp
 4019f48:	302ed43a 	srli	r23,r6,16
 4019f4c:	d8c00215 	stw	r3,8(sp)
 4019f50:	da000415 	stw	r8,16(sp)
 4019f54:	da800115 	stw	r10,4(sp)
 4019f58:	400d7980 	call	400d798 <__mulsi3>
 4019f5c:	800b883a 	mov	r5,r16
 4019f60:	e009883a 	mov	r4,fp
 4019f64:	d8800515 	stw	r2,20(sp)
 4019f68:	400d7980 	call	400d798 <__mulsi3>
 4019f6c:	8009883a 	mov	r4,r16
 4019f70:	b80b883a 	mov	r5,r23
 4019f74:	d8800315 	stw	r2,12(sp)
 4019f78:	400d7980 	call	400d798 <__mulsi3>
 4019f7c:	da800117 	ldw	r10,4(sp)
 4019f80:	b80b883a 	mov	r5,r23
 4019f84:	1021883a 	mov	r16,r2
 4019f88:	5009883a 	mov	r4,r10
 4019f8c:	400d7980 	call	400d798 <__mulsi3>
 4019f90:	d9c00517 	ldw	r7,20(sp)
 4019f94:	da400317 	ldw	r9,12(sp)
 4019f98:	d8c00217 	ldw	r3,8(sp)
 4019f9c:	3808d43a 	srli	r4,r7,16
 4019fa0:	1245883a 	add	r2,r2,r9
 4019fa4:	da000417 	ldw	r8,16(sp)
 4019fa8:	2085883a 	add	r2,r4,r2
 4019fac:	1240022e 	bgeu	r2,r9,4019fb8 <__divdf3+0x4b8>
 4019fb0:	01000074 	movhi	r4,1
 4019fb4:	8121883a 	add	r16,r16,r4
 4019fb8:	1008d43a 	srli	r4,r2,16
 4019fbc:	1004943a 	slli	r2,r2,16
 4019fc0:	39ffffcc 	andi	r7,r7,65535
 4019fc4:	2409883a 	add	r4,r4,r16
 4019fc8:	11c5883a 	add	r2,r2,r7
 4019fcc:	4100bb36 	bltu	r8,r4,401a2bc <__divdf3+0x7bc>
 4019fd0:	4100d726 	beq	r8,r4,401a330 <__divdf3+0x830>
 4019fd4:	4109c83a 	sub	r4,r8,r4
 4019fd8:	a8a1c83a 	sub	r16,r21,r2
 4019fdc:	ac2b803a 	cmpltu	r21,r21,r16
 4019fe0:	256bc83a 	sub	r21,r4,r21
 4019fe4:	b540d926 	beq	r22,r21,401a34c <__divdf3+0x84c>
 4019fe8:	a00b883a 	mov	r5,r20
 4019fec:	a809883a 	mov	r4,r21
 4019ff0:	d8c00215 	stw	r3,8(sp)
 4019ff4:	400d6dc0 	call	400d6dc <__udivsi3>
 4019ff8:	100b883a 	mov	r5,r2
 4019ffc:	9009883a 	mov	r4,r18
 401a000:	d8800515 	stw	r2,20(sp)
 401a004:	400d7980 	call	400d798 <__mulsi3>
 401a008:	a809883a 	mov	r4,r21
 401a00c:	a00b883a 	mov	r5,r20
 401a010:	d8800415 	stw	r2,16(sp)
 401a014:	400d7400 	call	400d740 <__umodsi3>
 401a018:	1004943a 	slli	r2,r2,16
 401a01c:	8008d43a 	srli	r4,r16,16
 401a020:	da000417 	ldw	r8,16(sp)
 401a024:	d8c00217 	ldw	r3,8(sp)
 401a028:	2084b03a 	or	r2,r4,r2
 401a02c:	d9c00517 	ldw	r7,20(sp)
 401a030:	1200062e 	bgeu	r2,r8,401a04c <__divdf3+0x54c>
 401a034:	1585883a 	add	r2,r2,r22
 401a038:	393fffc4 	addi	r4,r7,-1
 401a03c:	1580c536 	bltu	r2,r22,401a354 <__divdf3+0x854>
 401a040:	1200c42e 	bgeu	r2,r8,401a354 <__divdf3+0x854>
 401a044:	39ffff84 	addi	r7,r7,-2
 401a048:	1585883a 	add	r2,r2,r22
 401a04c:	122bc83a 	sub	r21,r2,r8
 401a050:	a00b883a 	mov	r5,r20
 401a054:	a809883a 	mov	r4,r21
 401a058:	d8c00215 	stw	r3,8(sp)
 401a05c:	d9c00515 	stw	r7,20(sp)
 401a060:	400d6dc0 	call	400d6dc <__udivsi3>
 401a064:	9009883a 	mov	r4,r18
 401a068:	100b883a 	mov	r5,r2
 401a06c:	d8800415 	stw	r2,16(sp)
 401a070:	400d7980 	call	400d798 <__mulsi3>
 401a074:	a809883a 	mov	r4,r21
 401a078:	a00b883a 	mov	r5,r20
 401a07c:	1025883a 	mov	r18,r2
 401a080:	400d7400 	call	400d740 <__umodsi3>
 401a084:	1004943a 	slli	r2,r2,16
 401a088:	813fffcc 	andi	r4,r16,65535
 401a08c:	d8c00217 	ldw	r3,8(sp)
 401a090:	20a0b03a 	or	r16,r4,r2
 401a094:	d9c00517 	ldw	r7,20(sp)
 401a098:	da000417 	ldw	r8,16(sp)
 401a09c:	8480062e 	bgeu	r16,r18,401a0b8 <__divdf3+0x5b8>
 401a0a0:	85a1883a 	add	r16,r16,r22
 401a0a4:	40bfffc4 	addi	r2,r8,-1
 401a0a8:	8580ac36 	bltu	r16,r22,401a35c <__divdf3+0x85c>
 401a0ac:	8480ab2e 	bgeu	r16,r18,401a35c <__divdf3+0x85c>
 401a0b0:	423fff84 	addi	r8,r8,-2
 401a0b4:	85a1883a 	add	r16,r16,r22
 401a0b8:	3804943a 	slli	r2,r7,16
 401a0bc:	84a1c83a 	sub	r16,r16,r18
 401a0c0:	e009883a 	mov	r4,fp
 401a0c4:	1228b03a 	or	r20,r2,r8
 401a0c8:	a1ffffcc 	andi	r7,r20,65535
 401a0cc:	a024d43a 	srli	r18,r20,16
 401a0d0:	380b883a 	mov	r5,r7
 401a0d4:	d8c00215 	stw	r3,8(sp)
 401a0d8:	d9c00515 	stw	r7,20(sp)
 401a0dc:	400d7980 	call	400d798 <__mulsi3>
 401a0e0:	900b883a 	mov	r5,r18
 401a0e4:	e009883a 	mov	r4,fp
 401a0e8:	102b883a 	mov	r21,r2
 401a0ec:	400d7980 	call	400d798 <__mulsi3>
 401a0f0:	900b883a 	mov	r5,r18
 401a0f4:	b809883a 	mov	r4,r23
 401a0f8:	1039883a 	mov	fp,r2
 401a0fc:	400d7980 	call	400d798 <__mulsi3>
 401a100:	d9c00517 	ldw	r7,20(sp)
 401a104:	b80b883a 	mov	r5,r23
 401a108:	1025883a 	mov	r18,r2
 401a10c:	3809883a 	mov	r4,r7
 401a110:	400d7980 	call	400d798 <__mulsi3>
 401a114:	a808d43a 	srli	r4,r21,16
 401a118:	1705883a 	add	r2,r2,fp
 401a11c:	d8c00217 	ldw	r3,8(sp)
 401a120:	2085883a 	add	r2,r4,r2
 401a124:	1700022e 	bgeu	r2,fp,401a130 <__divdf3+0x630>
 401a128:	01000074 	movhi	r4,1
 401a12c:	9125883a 	add	r18,r18,r4
 401a130:	1008d43a 	srli	r4,r2,16
 401a134:	1004943a 	slli	r2,r2,16
 401a138:	ad7fffcc 	andi	r21,r21,65535
 401a13c:	2489883a 	add	r4,r4,r18
 401a140:	1545883a 	add	r2,r2,r21
 401a144:	81003836 	bltu	r16,r4,401a228 <__divdf3+0x728>
 401a148:	81003626 	beq	r16,r4,401a224 <__divdf3+0x724>
 401a14c:	a5000054 	ori	r20,r20,1
 401a150:	1880ffc4 	addi	r2,r3,1023
 401a154:	00bf2e0e 	bge	zero,r2,4019e10 <__alt_mem_onchip_memory2_0+0xfc018b70>
 401a158:	a10001cc 	andi	r4,r20,7
 401a15c:	20000726 	beq	r4,zero,401a17c <__divdf3+0x67c>
 401a160:	a10003cc 	andi	r4,r20,15
 401a164:	01400104 	movi	r5,4
 401a168:	21400426 	beq	r4,r5,401a17c <__divdf3+0x67c>
 401a16c:	a149883a 	add	r4,r20,r5
 401a170:	2529803a 	cmpltu	r20,r4,r20
 401a174:	8d23883a 	add	r17,r17,r20
 401a178:	2029883a 	mov	r20,r4
 401a17c:	8900402c 	andhi	r4,r17,256
 401a180:	20000426 	beq	r4,zero,401a194 <__divdf3+0x694>
 401a184:	18810004 	addi	r2,r3,1024
 401a188:	00ffc034 	movhi	r3,65280
 401a18c:	18ffffc4 	addi	r3,r3,-1
 401a190:	88e2703a 	and	r17,r17,r3
 401a194:	00c1ff84 	movi	r3,2046
 401a198:	18beb416 	blt	r3,r2,4019c6c <__alt_mem_onchip_memory2_0+0xfc0189cc>
 401a19c:	a028d0fa 	srli	r20,r20,3
 401a1a0:	882a977a 	slli	r21,r17,29
 401a1a4:	8820927a 	slli	r16,r17,9
 401a1a8:	1081ffcc 	andi	r2,r2,2047
 401a1ac:	ad2ab03a 	or	r21,r21,r20
 401a1b0:	8020d33a 	srli	r16,r16,12
 401a1b4:	9900004c 	andi	r4,r19,1
 401a1b8:	003eb006 	br	4019c7c <__alt_mem_onchip_memory2_0+0xfc0189dc>
 401a1bc:	8080022c 	andhi	r2,r16,8
 401a1c0:	10001226 	beq	r2,zero,401a20c <__divdf3+0x70c>
 401a1c4:	8880022c 	andhi	r2,r17,8
 401a1c8:	1000101e 	bne	r2,zero,401a20c <__divdf3+0x70c>
 401a1cc:	00800434 	movhi	r2,16
 401a1d0:	8c000234 	orhi	r16,r17,8
 401a1d4:	10bfffc4 	addi	r2,r2,-1
 401a1d8:	b809883a 	mov	r4,r23
 401a1dc:	80a0703a 	and	r16,r16,r2
 401a1e0:	a02b883a 	mov	r21,r20
 401a1e4:	003f0806 	br	4019e08 <__alt_mem_onchip_memory2_0+0xfc018b68>
 401a1e8:	008000c4 	movi	r2,3
 401a1ec:	3880b126 	beq	r7,r2,401a4b4 <__divdf3+0x9b4>
 401a1f0:	00800044 	movi	r2,1
 401a1f4:	38805b1e 	bne	r7,r2,401a364 <__divdf3+0x864>
 401a1f8:	e009883a 	mov	r4,fp
 401a1fc:	0005883a 	mov	r2,zero
 401a200:	0021883a 	mov	r16,zero
 401a204:	002b883a 	mov	r21,zero
 401a208:	003e9c06 	br	4019c7c <__alt_mem_onchip_memory2_0+0xfc0189dc>
 401a20c:	00800434 	movhi	r2,16
 401a210:	84000234 	orhi	r16,r16,8
 401a214:	10bfffc4 	addi	r2,r2,-1
 401a218:	b009883a 	mov	r4,r22
 401a21c:	80a0703a 	and	r16,r16,r2
 401a220:	003ef906 	br	4019e08 <__alt_mem_onchip_memory2_0+0xfc018b68>
 401a224:	103fca26 	beq	r2,zero,401a150 <__alt_mem_onchip_memory2_0+0xfc018eb0>
 401a228:	b421883a 	add	r16,r22,r16
 401a22c:	a17fffc4 	addi	r5,r20,-1
 401a230:	8580422e 	bgeu	r16,r22,401a33c <__divdf3+0x83c>
 401a234:	2829883a 	mov	r20,r5
 401a238:	813fc41e 	bne	r16,r4,401a14c <__alt_mem_onchip_memory2_0+0xfc018eac>
 401a23c:	d9800017 	ldw	r6,0(sp)
 401a240:	30bfc21e 	bne	r6,r2,401a14c <__alt_mem_onchip_memory2_0+0xfc018eac>
 401a244:	003fc206 	br	401a150 <__alt_mem_onchip_memory2_0+0xfc018eb0>
 401a248:	143ff604 	addi	r16,r2,-40
 401a24c:	8c20983a 	sll	r16,r17,r16
 401a250:	002b883a 	mov	r21,zero
 401a254:	003eb406 	br	4019d28 <__alt_mem_onchip_memory2_0+0xfc018a88>
 401a258:	d9800215 	stw	r6,8(sp)
 401a25c:	d9c00515 	stw	r7,20(sp)
 401a260:	da000415 	stw	r8,16(sp)
 401a264:	400e8100 	call	400e810 <__clzsi2>
 401a268:	10800804 	addi	r2,r2,32
 401a26c:	da000417 	ldw	r8,16(sp)
 401a270:	d9c00517 	ldw	r7,20(sp)
 401a274:	d9800217 	ldw	r6,8(sp)
 401a278:	003ea106 	br	4019d00 <__alt_mem_onchip_memory2_0+0xfc018a60>
 401a27c:	147ff604 	addi	r17,r2,-40
 401a280:	3462983a 	sll	r17,r6,r17
 401a284:	0029883a 	mov	r20,zero
 401a288:	003ec906 	br	4019db0 <__alt_mem_onchip_memory2_0+0xfc018b10>
 401a28c:	3009883a 	mov	r4,r6
 401a290:	d9400115 	stw	r5,4(sp)
 401a294:	d9800215 	stw	r6,8(sp)
 401a298:	da000415 	stw	r8,16(sp)
 401a29c:	da400315 	stw	r9,12(sp)
 401a2a0:	400e8100 	call	400e810 <__clzsi2>
 401a2a4:	10800804 	addi	r2,r2,32
 401a2a8:	da400317 	ldw	r9,12(sp)
 401a2ac:	da000417 	ldw	r8,16(sp)
 401a2b0:	d9800217 	ldw	r6,8(sp)
 401a2b4:	d9400117 	ldw	r5,4(sp)
 401a2b8:	003eb306 	br	4019d88 <__alt_mem_onchip_memory2_0+0xfc018ae8>
 401a2bc:	d9800017 	ldw	r6,0(sp)
 401a2c0:	a9ab883a 	add	r21,r21,r6
 401a2c4:	a98b803a 	cmpltu	r5,r21,r6
 401a2c8:	2d8b883a 	add	r5,r5,r22
 401a2cc:	2a11883a 	add	r8,r5,r8
 401a2d0:	897fffc4 	addi	r5,r17,-1
 401a2d4:	b2000c2e 	bgeu	r22,r8,401a308 <__divdf3+0x808>
 401a2d8:	41003f36 	bltu	r8,r4,401a3d8 <__divdf3+0x8d8>
 401a2dc:	22006c26 	beq	r4,r8,401a490 <__divdf3+0x990>
 401a2e0:	4109c83a 	sub	r4,r8,r4
 401a2e4:	2823883a 	mov	r17,r5
 401a2e8:	003f3b06 	br	4019fd8 <__alt_mem_onchip_memory2_0+0xfc018d38>
 401a2ec:	ad3ed336 	bltu	r21,r20,4019e3c <__alt_mem_onchip_memory2_0+0xfc018b9c>
 401a2f0:	a804d07a 	srli	r2,r21,1
 401a2f4:	802e97fa 	slli	r23,r16,31
 401a2f8:	a82a97fa 	slli	r21,r21,31
 401a2fc:	8020d07a 	srli	r16,r16,1
 401a300:	b8aeb03a 	or	r23,r23,r2
 401a304:	003ed006 	br	4019e48 <__alt_mem_onchip_memory2_0+0xfc018ba8>
 401a308:	b23ff51e 	bne	r22,r8,401a2e0 <__alt_mem_onchip_memory2_0+0xfc019040>
 401a30c:	d9800017 	ldw	r6,0(sp)
 401a310:	a9bff12e 	bgeu	r21,r6,401a2d8 <__alt_mem_onchip_memory2_0+0xfc019038>
 401a314:	b109c83a 	sub	r4,r22,r4
 401a318:	2823883a 	mov	r17,r5
 401a31c:	003f2e06 	br	4019fd8 <__alt_mem_onchip_memory2_0+0xfc018d38>
 401a320:	2021883a 	mov	r16,r4
 401a324:	003eff06 	br	4019f24 <__alt_mem_onchip_memory2_0+0xfc018c84>
 401a328:	2023883a 	mov	r17,r4
 401a32c:	003ee406 	br	4019ec0 <__alt_mem_onchip_memory2_0+0xfc018c20>
 401a330:	a8bfe236 	bltu	r21,r2,401a2bc <__alt_mem_onchip_memory2_0+0xfc01901c>
 401a334:	0009883a 	mov	r4,zero
 401a338:	003f2706 	br	4019fd8 <__alt_mem_onchip_memory2_0+0xfc018d38>
 401a33c:	81002d36 	bltu	r16,r4,401a3f4 <__divdf3+0x8f4>
 401a340:	24005626 	beq	r4,r16,401a49c <__divdf3+0x99c>
 401a344:	2829883a 	mov	r20,r5
 401a348:	003f8006 	br	401a14c <__alt_mem_onchip_memory2_0+0xfc018eac>
 401a34c:	053fffc4 	movi	r20,-1
 401a350:	003f7f06 	br	401a150 <__alt_mem_onchip_memory2_0+0xfc018eb0>
 401a354:	200f883a 	mov	r7,r4
 401a358:	003f3c06 	br	401a04c <__alt_mem_onchip_memory2_0+0xfc018dac>
 401a35c:	1011883a 	mov	r8,r2
 401a360:	003f5506 	br	401a0b8 <__alt_mem_onchip_memory2_0+0xfc018e18>
 401a364:	e027883a 	mov	r19,fp
 401a368:	003f7906 	br	401a150 <__alt_mem_onchip_memory2_0+0xfc018eb0>
 401a36c:	010007c4 	movi	r4,31
 401a370:	20c02816 	blt	r4,r3,401a414 <__divdf3+0x914>
 401a374:	00800804 	movi	r2,32
 401a378:	10c5c83a 	sub	r2,r2,r3
 401a37c:	888a983a 	sll	r5,r17,r2
 401a380:	a0c8d83a 	srl	r4,r20,r3
 401a384:	a084983a 	sll	r2,r20,r2
 401a388:	88e2d83a 	srl	r17,r17,r3
 401a38c:	2906b03a 	or	r3,r5,r4
 401a390:	1004c03a 	cmpne	r2,r2,zero
 401a394:	1886b03a 	or	r3,r3,r2
 401a398:	188001cc 	andi	r2,r3,7
 401a39c:	10000726 	beq	r2,zero,401a3bc <__divdf3+0x8bc>
 401a3a0:	188003cc 	andi	r2,r3,15
 401a3a4:	01000104 	movi	r4,4
 401a3a8:	11000426 	beq	r2,r4,401a3bc <__divdf3+0x8bc>
 401a3ac:	1805883a 	mov	r2,r3
 401a3b0:	10c00104 	addi	r3,r2,4
 401a3b4:	1885803a 	cmpltu	r2,r3,r2
 401a3b8:	88a3883a 	add	r17,r17,r2
 401a3bc:	8880202c 	andhi	r2,r17,128
 401a3c0:	10002926 	beq	r2,zero,401a468 <__divdf3+0x968>
 401a3c4:	9900004c 	andi	r4,r19,1
 401a3c8:	00800044 	movi	r2,1
 401a3cc:	0021883a 	mov	r16,zero
 401a3d0:	002b883a 	mov	r21,zero
 401a3d4:	003e2906 	br	4019c7c <__alt_mem_onchip_memory2_0+0xfc0189dc>
 401a3d8:	d9800017 	ldw	r6,0(sp)
 401a3dc:	8c7fff84 	addi	r17,r17,-2
 401a3e0:	a9ab883a 	add	r21,r21,r6
 401a3e4:	a98b803a 	cmpltu	r5,r21,r6
 401a3e8:	2d8b883a 	add	r5,r5,r22
 401a3ec:	2a11883a 	add	r8,r5,r8
 401a3f0:	003ef806 	br	4019fd4 <__alt_mem_onchip_memory2_0+0xfc018d34>
 401a3f4:	d9800017 	ldw	r6,0(sp)
 401a3f8:	318f883a 	add	r7,r6,r6
 401a3fc:	398b803a 	cmpltu	r5,r7,r6
 401a400:	2d8d883a 	add	r6,r5,r22
 401a404:	81a1883a 	add	r16,r16,r6
 401a408:	a17fff84 	addi	r5,r20,-2
 401a40c:	d9c00015 	stw	r7,0(sp)
 401a410:	003f8806 	br	401a234 <__alt_mem_onchip_memory2_0+0xfc018f94>
 401a414:	013ff844 	movi	r4,-31
 401a418:	2085c83a 	sub	r2,r4,r2
 401a41c:	8888d83a 	srl	r4,r17,r2
 401a420:	00800804 	movi	r2,32
 401a424:	18802126 	beq	r3,r2,401a4ac <__divdf3+0x9ac>
 401a428:	04001004 	movi	r16,64
 401a42c:	80c7c83a 	sub	r3,r16,r3
 401a430:	88e0983a 	sll	r16,r17,r3
 401a434:	8504b03a 	or	r2,r16,r20
 401a438:	1004c03a 	cmpne	r2,r2,zero
 401a43c:	2084b03a 	or	r2,r4,r2
 401a440:	144001cc 	andi	r17,r2,7
 401a444:	88000d1e 	bne	r17,zero,401a47c <__divdf3+0x97c>
 401a448:	0021883a 	mov	r16,zero
 401a44c:	102ad0fa 	srli	r21,r2,3
 401a450:	9900004c 	andi	r4,r19,1
 401a454:	0005883a 	mov	r2,zero
 401a458:	ac6ab03a 	or	r21,r21,r17
 401a45c:	003e0706 	br	4019c7c <__alt_mem_onchip_memory2_0+0xfc0189dc>
 401a460:	1007883a 	mov	r3,r2
 401a464:	0023883a 	mov	r17,zero
 401a468:	8820927a 	slli	r16,r17,9
 401a46c:	1805883a 	mov	r2,r3
 401a470:	8822977a 	slli	r17,r17,29
 401a474:	8020d33a 	srli	r16,r16,12
 401a478:	003ff406 	br	401a44c <__alt_mem_onchip_memory2_0+0xfc0191ac>
 401a47c:	10c003cc 	andi	r3,r2,15
 401a480:	01000104 	movi	r4,4
 401a484:	193ff626 	beq	r3,r4,401a460 <__alt_mem_onchip_memory2_0+0xfc0191c0>
 401a488:	0023883a 	mov	r17,zero
 401a48c:	003fc806 	br	401a3b0 <__alt_mem_onchip_memory2_0+0xfc019110>
 401a490:	a8bfd136 	bltu	r21,r2,401a3d8 <__alt_mem_onchip_memory2_0+0xfc019138>
 401a494:	2823883a 	mov	r17,r5
 401a498:	003fa606 	br	401a334 <__alt_mem_onchip_memory2_0+0xfc019094>
 401a49c:	d9800017 	ldw	r6,0(sp)
 401a4a0:	30bfd436 	bltu	r6,r2,401a3f4 <__alt_mem_onchip_memory2_0+0xfc019154>
 401a4a4:	2829883a 	mov	r20,r5
 401a4a8:	003f6406 	br	401a23c <__alt_mem_onchip_memory2_0+0xfc018f9c>
 401a4ac:	0021883a 	mov	r16,zero
 401a4b0:	003fe006 	br	401a434 <__alt_mem_onchip_memory2_0+0xfc019194>
 401a4b4:	00800434 	movhi	r2,16
 401a4b8:	8c000234 	orhi	r16,r17,8
 401a4bc:	10bfffc4 	addi	r2,r2,-1
 401a4c0:	e009883a 	mov	r4,fp
 401a4c4:	80a0703a 	and	r16,r16,r2
 401a4c8:	a02b883a 	mov	r21,r20
 401a4cc:	003e4e06 	br	4019e08 <__alt_mem_onchip_memory2_0+0xfc018b68>

0401a4d0 <__eqdf2>:
 401a4d0:	2804d53a 	srli	r2,r5,20
 401a4d4:	3806d53a 	srli	r3,r7,20
 401a4d8:	02000434 	movhi	r8,16
 401a4dc:	423fffc4 	addi	r8,r8,-1
 401a4e0:	1081ffcc 	andi	r2,r2,2047
 401a4e4:	0281ffc4 	movi	r10,2047
 401a4e8:	2a12703a 	and	r9,r5,r8
 401a4ec:	18c1ffcc 	andi	r3,r3,2047
 401a4f0:	3a10703a 	and	r8,r7,r8
 401a4f4:	280ad7fa 	srli	r5,r5,31
 401a4f8:	380ed7fa 	srli	r7,r7,31
 401a4fc:	12801026 	beq	r2,r10,401a540 <__eqdf2+0x70>
 401a500:	0281ffc4 	movi	r10,2047
 401a504:	1a800a26 	beq	r3,r10,401a530 <__eqdf2+0x60>
 401a508:	10c00226 	beq	r2,r3,401a514 <__eqdf2+0x44>
 401a50c:	00800044 	movi	r2,1
 401a510:	f800283a 	ret
 401a514:	4a3ffd1e 	bne	r9,r8,401a50c <__alt_mem_onchip_memory2_0+0xfc01926c>
 401a518:	21bffc1e 	bne	r4,r6,401a50c <__alt_mem_onchip_memory2_0+0xfc01926c>
 401a51c:	29c00c26 	beq	r5,r7,401a550 <__eqdf2+0x80>
 401a520:	103ffa1e 	bne	r2,zero,401a50c <__alt_mem_onchip_memory2_0+0xfc01926c>
 401a524:	2244b03a 	or	r2,r4,r9
 401a528:	1004c03a 	cmpne	r2,r2,zero
 401a52c:	f800283a 	ret
 401a530:	3214b03a 	or	r10,r6,r8
 401a534:	503ff426 	beq	r10,zero,401a508 <__alt_mem_onchip_memory2_0+0xfc019268>
 401a538:	00800044 	movi	r2,1
 401a53c:	f800283a 	ret
 401a540:	2254b03a 	or	r10,r4,r9
 401a544:	503fee26 	beq	r10,zero,401a500 <__alt_mem_onchip_memory2_0+0xfc019260>
 401a548:	00800044 	movi	r2,1
 401a54c:	f800283a 	ret
 401a550:	0005883a 	mov	r2,zero
 401a554:	f800283a 	ret

0401a558 <__gedf2>:
 401a558:	2804d53a 	srli	r2,r5,20
 401a55c:	3806d53a 	srli	r3,r7,20
 401a560:	02000434 	movhi	r8,16
 401a564:	423fffc4 	addi	r8,r8,-1
 401a568:	1081ffcc 	andi	r2,r2,2047
 401a56c:	0241ffc4 	movi	r9,2047
 401a570:	2a14703a 	and	r10,r5,r8
 401a574:	18c1ffcc 	andi	r3,r3,2047
 401a578:	3a10703a 	and	r8,r7,r8
 401a57c:	280ad7fa 	srli	r5,r5,31
 401a580:	380ed7fa 	srli	r7,r7,31
 401a584:	12401d26 	beq	r2,r9,401a5fc <__gedf2+0xa4>
 401a588:	0241ffc4 	movi	r9,2047
 401a58c:	1a401226 	beq	r3,r9,401a5d8 <__gedf2+0x80>
 401a590:	1000081e 	bne	r2,zero,401a5b4 <__gedf2+0x5c>
 401a594:	2296b03a 	or	r11,r4,r10
 401a598:	5813003a 	cmpeq	r9,r11,zero
 401a59c:	1800091e 	bne	r3,zero,401a5c4 <__gedf2+0x6c>
 401a5a0:	3218b03a 	or	r12,r6,r8
 401a5a4:	6000071e 	bne	r12,zero,401a5c4 <__gedf2+0x6c>
 401a5a8:	0005883a 	mov	r2,zero
 401a5ac:	5800101e 	bne	r11,zero,401a5f0 <__gedf2+0x98>
 401a5b0:	f800283a 	ret
 401a5b4:	18000c1e 	bne	r3,zero,401a5e8 <__gedf2+0x90>
 401a5b8:	3212b03a 	or	r9,r6,r8
 401a5bc:	48000c26 	beq	r9,zero,401a5f0 <__gedf2+0x98>
 401a5c0:	0013883a 	mov	r9,zero
 401a5c4:	39c03fcc 	andi	r7,r7,255
 401a5c8:	48000826 	beq	r9,zero,401a5ec <__gedf2+0x94>
 401a5cc:	38000926 	beq	r7,zero,401a5f4 <__gedf2+0x9c>
 401a5d0:	00800044 	movi	r2,1
 401a5d4:	f800283a 	ret
 401a5d8:	3212b03a 	or	r9,r6,r8
 401a5dc:	483fec26 	beq	r9,zero,401a590 <__alt_mem_onchip_memory2_0+0xfc0192f0>
 401a5e0:	00bfff84 	movi	r2,-2
 401a5e4:	f800283a 	ret
 401a5e8:	39c03fcc 	andi	r7,r7,255
 401a5ec:	29c00626 	beq	r5,r7,401a608 <__gedf2+0xb0>
 401a5f0:	283ff726 	beq	r5,zero,401a5d0 <__alt_mem_onchip_memory2_0+0xfc019330>
 401a5f4:	00bfffc4 	movi	r2,-1
 401a5f8:	f800283a 	ret
 401a5fc:	2292b03a 	or	r9,r4,r10
 401a600:	483fe126 	beq	r9,zero,401a588 <__alt_mem_onchip_memory2_0+0xfc0192e8>
 401a604:	003ff606 	br	401a5e0 <__alt_mem_onchip_memory2_0+0xfc019340>
 401a608:	18bff916 	blt	r3,r2,401a5f0 <__alt_mem_onchip_memory2_0+0xfc019350>
 401a60c:	10c00316 	blt	r2,r3,401a61c <__gedf2+0xc4>
 401a610:	42bff736 	bltu	r8,r10,401a5f0 <__alt_mem_onchip_memory2_0+0xfc019350>
 401a614:	52000326 	beq	r10,r8,401a624 <__gedf2+0xcc>
 401a618:	5200042e 	bgeu	r10,r8,401a62c <__gedf2+0xd4>
 401a61c:	283fec1e 	bne	r5,zero,401a5d0 <__alt_mem_onchip_memory2_0+0xfc019330>
 401a620:	003ff406 	br	401a5f4 <__alt_mem_onchip_memory2_0+0xfc019354>
 401a624:	313ff236 	bltu	r6,r4,401a5f0 <__alt_mem_onchip_memory2_0+0xfc019350>
 401a628:	21bffc36 	bltu	r4,r6,401a61c <__alt_mem_onchip_memory2_0+0xfc01937c>
 401a62c:	0005883a 	mov	r2,zero
 401a630:	f800283a 	ret

0401a634 <__ledf2>:
 401a634:	2804d53a 	srli	r2,r5,20
 401a638:	3810d53a 	srli	r8,r7,20
 401a63c:	00c00434 	movhi	r3,16
 401a640:	18ffffc4 	addi	r3,r3,-1
 401a644:	1081ffcc 	andi	r2,r2,2047
 401a648:	0241ffc4 	movi	r9,2047
 401a64c:	28d4703a 	and	r10,r5,r3
 401a650:	4201ffcc 	andi	r8,r8,2047
 401a654:	38c6703a 	and	r3,r7,r3
 401a658:	280ad7fa 	srli	r5,r5,31
 401a65c:	380ed7fa 	srli	r7,r7,31
 401a660:	12401f26 	beq	r2,r9,401a6e0 <__ledf2+0xac>
 401a664:	0241ffc4 	movi	r9,2047
 401a668:	42401426 	beq	r8,r9,401a6bc <__ledf2+0x88>
 401a66c:	1000091e 	bne	r2,zero,401a694 <__ledf2+0x60>
 401a670:	2296b03a 	or	r11,r4,r10
 401a674:	5813003a 	cmpeq	r9,r11,zero
 401a678:	29403fcc 	andi	r5,r5,255
 401a67c:	40000a1e 	bne	r8,zero,401a6a8 <__ledf2+0x74>
 401a680:	30d8b03a 	or	r12,r6,r3
 401a684:	6000081e 	bne	r12,zero,401a6a8 <__ledf2+0x74>
 401a688:	0005883a 	mov	r2,zero
 401a68c:	5800111e 	bne	r11,zero,401a6d4 <__ledf2+0xa0>
 401a690:	f800283a 	ret
 401a694:	29403fcc 	andi	r5,r5,255
 401a698:	40000c1e 	bne	r8,zero,401a6cc <__ledf2+0x98>
 401a69c:	30d2b03a 	or	r9,r6,r3
 401a6a0:	48000c26 	beq	r9,zero,401a6d4 <__ledf2+0xa0>
 401a6a4:	0013883a 	mov	r9,zero
 401a6a8:	39c03fcc 	andi	r7,r7,255
 401a6ac:	48000826 	beq	r9,zero,401a6d0 <__ledf2+0x9c>
 401a6b0:	38001126 	beq	r7,zero,401a6f8 <__ledf2+0xc4>
 401a6b4:	00800044 	movi	r2,1
 401a6b8:	f800283a 	ret
 401a6bc:	30d2b03a 	or	r9,r6,r3
 401a6c0:	483fea26 	beq	r9,zero,401a66c <__alt_mem_onchip_memory2_0+0xfc0193cc>
 401a6c4:	00800084 	movi	r2,2
 401a6c8:	f800283a 	ret
 401a6cc:	39c03fcc 	andi	r7,r7,255
 401a6d0:	39400726 	beq	r7,r5,401a6f0 <__ledf2+0xbc>
 401a6d4:	2800081e 	bne	r5,zero,401a6f8 <__ledf2+0xc4>
 401a6d8:	00800044 	movi	r2,1
 401a6dc:	f800283a 	ret
 401a6e0:	2292b03a 	or	r9,r4,r10
 401a6e4:	483fdf26 	beq	r9,zero,401a664 <__alt_mem_onchip_memory2_0+0xfc0193c4>
 401a6e8:	00800084 	movi	r2,2
 401a6ec:	f800283a 	ret
 401a6f0:	4080030e 	bge	r8,r2,401a700 <__ledf2+0xcc>
 401a6f4:	383fef26 	beq	r7,zero,401a6b4 <__alt_mem_onchip_memory2_0+0xfc019414>
 401a6f8:	00bfffc4 	movi	r2,-1
 401a6fc:	f800283a 	ret
 401a700:	123feb16 	blt	r2,r8,401a6b0 <__alt_mem_onchip_memory2_0+0xfc019410>
 401a704:	1abff336 	bltu	r3,r10,401a6d4 <__alt_mem_onchip_memory2_0+0xfc019434>
 401a708:	50c00326 	beq	r10,r3,401a718 <__ledf2+0xe4>
 401a70c:	50c0042e 	bgeu	r10,r3,401a720 <__ledf2+0xec>
 401a710:	283fe81e 	bne	r5,zero,401a6b4 <__alt_mem_onchip_memory2_0+0xfc019414>
 401a714:	003ff806 	br	401a6f8 <__alt_mem_onchip_memory2_0+0xfc019458>
 401a718:	313fee36 	bltu	r6,r4,401a6d4 <__alt_mem_onchip_memory2_0+0xfc019434>
 401a71c:	21bffc36 	bltu	r4,r6,401a710 <__alt_mem_onchip_memory2_0+0xfc019470>
 401a720:	0005883a 	mov	r2,zero
 401a724:	f800283a 	ret

0401a728 <__muldf3>:
 401a728:	deffee04 	addi	sp,sp,-72
 401a72c:	dd000c15 	stw	r20,48(sp)
 401a730:	2828d53a 	srli	r20,r5,20
 401a734:	ddc00f15 	stw	r23,60(sp)
 401a738:	282ed7fa 	srli	r23,r5,31
 401a73c:	dc000815 	stw	r16,32(sp)
 401a740:	04000434 	movhi	r16,16
 401a744:	dcc00b15 	stw	r19,44(sp)
 401a748:	843fffc4 	addi	r16,r16,-1
 401a74c:	dfc01115 	stw	ra,68(sp)
 401a750:	df001015 	stw	fp,64(sp)
 401a754:	dd800e15 	stw	r22,56(sp)
 401a758:	dd400d15 	stw	r21,52(sp)
 401a75c:	dc800a15 	stw	r18,40(sp)
 401a760:	dc400915 	stw	r17,36(sp)
 401a764:	a501ffcc 	andi	r20,r20,2047
 401a768:	2c20703a 	and	r16,r5,r16
 401a76c:	b827883a 	mov	r19,r23
 401a770:	ba403fcc 	andi	r9,r23,255
 401a774:	a0006026 	beq	r20,zero,401a8f8 <__muldf3+0x1d0>
 401a778:	0081ffc4 	movi	r2,2047
 401a77c:	202d883a 	mov	r22,r4
 401a780:	a0803626 	beq	r20,r2,401a85c <__muldf3+0x134>
 401a784:	84000434 	orhi	r16,r16,16
 401a788:	200ad77a 	srli	r5,r4,29
 401a78c:	800490fa 	slli	r2,r16,3
 401a790:	202c90fa 	slli	r22,r4,3
 401a794:	a53f0044 	addi	r20,r20,-1023
 401a798:	28a0b03a 	or	r16,r5,r2
 401a79c:	002b883a 	mov	r21,zero
 401a7a0:	000b883a 	mov	r5,zero
 401a7a4:	3804d53a 	srli	r2,r7,20
 401a7a8:	3838d7fa 	srli	fp,r7,31
 401a7ac:	04400434 	movhi	r17,16
 401a7b0:	8c7fffc4 	addi	r17,r17,-1
 401a7b4:	1081ffcc 	andi	r2,r2,2047
 401a7b8:	3025883a 	mov	r18,r6
 401a7bc:	3c62703a 	and	r17,r7,r17
 401a7c0:	e2803fcc 	andi	r10,fp,255
 401a7c4:	10006d26 	beq	r2,zero,401a97c <__muldf3+0x254>
 401a7c8:	00c1ffc4 	movi	r3,2047
 401a7cc:	10c06526 	beq	r2,r3,401a964 <__muldf3+0x23c>
 401a7d0:	8c400434 	orhi	r17,r17,16
 401a7d4:	300ed77a 	srli	r7,r6,29
 401a7d8:	880690fa 	slli	r3,r17,3
 401a7dc:	302490fa 	slli	r18,r6,3
 401a7e0:	10bf0044 	addi	r2,r2,-1023
 401a7e4:	38e2b03a 	or	r17,r7,r3
 401a7e8:	000f883a 	mov	r7,zero
 401a7ec:	a087883a 	add	r3,r20,r2
 401a7f0:	010003c4 	movi	r4,15
 401a7f4:	3d44b03a 	or	r2,r7,r21
 401a7f8:	e5ccf03a 	xor	r6,fp,r23
 401a7fc:	1a000044 	addi	r8,r3,1
 401a800:	20809b36 	bltu	r4,r2,401aa70 <__muldf3+0x348>
 401a804:	100490ba 	slli	r2,r2,2
 401a808:	010100b4 	movhi	r4,1026
 401a80c:	212a0704 	addi	r4,r4,-22500
 401a810:	1105883a 	add	r2,r2,r4
 401a814:	10800017 	ldw	r2,0(r2)
 401a818:	1000683a 	jmp	r2
 401a81c:	0401aa70 	cmpltui	r16,zero,1705
 401a820:	0401a87c 	xorhi	r16,zero,1697
 401a824:	0401a87c 	xorhi	r16,zero,1697
 401a828:	0401a878 	rdprs	r16,zero,1697
 401a82c:	0401aa4c 	andi	r16,zero,1705
 401a830:	0401aa4c 	andi	r16,zero,1705
 401a834:	0401aa34 	movhi	r16,1704
 401a838:	0401a878 	rdprs	r16,zero,1697
 401a83c:	0401aa4c 	andi	r16,zero,1705
 401a840:	0401aa34 	movhi	r16,1704
 401a844:	0401aa4c 	andi	r16,zero,1705
 401a848:	0401a878 	rdprs	r16,zero,1697
 401a84c:	0401aa5c 	xori	r16,zero,1705
 401a850:	0401aa5c 	xori	r16,zero,1705
 401a854:	0401aa5c 	xori	r16,zero,1705
 401a858:	0401adbc 	xorhi	r16,zero,1718
 401a85c:	2404b03a 	or	r2,r4,r16
 401a860:	1000711e 	bne	r2,zero,401aa28 <__muldf3+0x300>
 401a864:	05400204 	movi	r21,8
 401a868:	0021883a 	mov	r16,zero
 401a86c:	002d883a 	mov	r22,zero
 401a870:	01400084 	movi	r5,2
 401a874:	003fcb06 	br	401a7a4 <__alt_mem_onchip_memory2_0+0xfc019504>
 401a878:	500d883a 	mov	r6,r10
 401a87c:	00800084 	movi	r2,2
 401a880:	38805926 	beq	r7,r2,401a9e8 <__muldf3+0x2c0>
 401a884:	008000c4 	movi	r2,3
 401a888:	3881bb26 	beq	r7,r2,401af78 <__muldf3+0x850>
 401a88c:	00800044 	movi	r2,1
 401a890:	3881961e 	bne	r7,r2,401aeec <__muldf3+0x7c4>
 401a894:	3027883a 	mov	r19,r6
 401a898:	0005883a 	mov	r2,zero
 401a89c:	0021883a 	mov	r16,zero
 401a8a0:	002d883a 	mov	r22,zero
 401a8a4:	1004953a 	slli	r2,r2,20
 401a8a8:	98c03fcc 	andi	r3,r19,255
 401a8ac:	04400434 	movhi	r17,16
 401a8b0:	8c7fffc4 	addi	r17,r17,-1
 401a8b4:	180697fa 	slli	r3,r3,31
 401a8b8:	8460703a 	and	r16,r16,r17
 401a8bc:	80a0b03a 	or	r16,r16,r2
 401a8c0:	80c6b03a 	or	r3,r16,r3
 401a8c4:	b005883a 	mov	r2,r22
 401a8c8:	dfc01117 	ldw	ra,68(sp)
 401a8cc:	df001017 	ldw	fp,64(sp)
 401a8d0:	ddc00f17 	ldw	r23,60(sp)
 401a8d4:	dd800e17 	ldw	r22,56(sp)
 401a8d8:	dd400d17 	ldw	r21,52(sp)
 401a8dc:	dd000c17 	ldw	r20,48(sp)
 401a8e0:	dcc00b17 	ldw	r19,44(sp)
 401a8e4:	dc800a17 	ldw	r18,40(sp)
 401a8e8:	dc400917 	ldw	r17,36(sp)
 401a8ec:	dc000817 	ldw	r16,32(sp)
 401a8f0:	dec01204 	addi	sp,sp,72
 401a8f4:	f800283a 	ret
 401a8f8:	2404b03a 	or	r2,r4,r16
 401a8fc:	202b883a 	mov	r21,r4
 401a900:	10004426 	beq	r2,zero,401aa14 <__muldf3+0x2ec>
 401a904:	80015126 	beq	r16,zero,401ae4c <__muldf3+0x724>
 401a908:	8009883a 	mov	r4,r16
 401a90c:	d9800715 	stw	r6,28(sp)
 401a910:	d9c00215 	stw	r7,8(sp)
 401a914:	da400415 	stw	r9,16(sp)
 401a918:	400e8100 	call	400e810 <__clzsi2>
 401a91c:	d9800717 	ldw	r6,28(sp)
 401a920:	d9c00217 	ldw	r7,8(sp)
 401a924:	da400417 	ldw	r9,16(sp)
 401a928:	113ffd44 	addi	r4,r2,-11
 401a92c:	00c00704 	movi	r3,28
 401a930:	19014216 	blt	r3,r4,401ae3c <__muldf3+0x714>
 401a934:	00c00744 	movi	r3,29
 401a938:	15bffe04 	addi	r22,r2,-8
 401a93c:	1907c83a 	sub	r3,r3,r4
 401a940:	85a0983a 	sll	r16,r16,r22
 401a944:	a8c6d83a 	srl	r3,r21,r3
 401a948:	adac983a 	sll	r22,r21,r22
 401a94c:	1c20b03a 	or	r16,r3,r16
 401a950:	1080fcc4 	addi	r2,r2,1011
 401a954:	00a9c83a 	sub	r20,zero,r2
 401a958:	002b883a 	mov	r21,zero
 401a95c:	000b883a 	mov	r5,zero
 401a960:	003f9006 	br	401a7a4 <__alt_mem_onchip_memory2_0+0xfc019504>
 401a964:	3446b03a 	or	r3,r6,r17
 401a968:	1800281e 	bne	r3,zero,401aa0c <__muldf3+0x2e4>
 401a96c:	0023883a 	mov	r17,zero
 401a970:	0025883a 	mov	r18,zero
 401a974:	01c00084 	movi	r7,2
 401a978:	003f9c06 	br	401a7ec <__alt_mem_onchip_memory2_0+0xfc01954c>
 401a97c:	3446b03a 	or	r3,r6,r17
 401a980:	18001e26 	beq	r3,zero,401a9fc <__muldf3+0x2d4>
 401a984:	88012126 	beq	r17,zero,401ae0c <__muldf3+0x6e4>
 401a988:	8809883a 	mov	r4,r17
 401a98c:	d9400215 	stw	r5,8(sp)
 401a990:	d9800715 	stw	r6,28(sp)
 401a994:	da400415 	stw	r9,16(sp)
 401a998:	da800315 	stw	r10,12(sp)
 401a99c:	400e8100 	call	400e810 <__clzsi2>
 401a9a0:	d9400217 	ldw	r5,8(sp)
 401a9a4:	d9800717 	ldw	r6,28(sp)
 401a9a8:	da400417 	ldw	r9,16(sp)
 401a9ac:	da800317 	ldw	r10,12(sp)
 401a9b0:	113ffd44 	addi	r4,r2,-11
 401a9b4:	00c00704 	movi	r3,28
 401a9b8:	19011016 	blt	r3,r4,401adfc <__muldf3+0x6d4>
 401a9bc:	00c00744 	movi	r3,29
 401a9c0:	14bffe04 	addi	r18,r2,-8
 401a9c4:	1907c83a 	sub	r3,r3,r4
 401a9c8:	8ca2983a 	sll	r17,r17,r18
 401a9cc:	30c6d83a 	srl	r3,r6,r3
 401a9d0:	34a4983a 	sll	r18,r6,r18
 401a9d4:	1c62b03a 	or	r17,r3,r17
 401a9d8:	1080fcc4 	addi	r2,r2,1011
 401a9dc:	0085c83a 	sub	r2,zero,r2
 401a9e0:	000f883a 	mov	r7,zero
 401a9e4:	003f8106 	br	401a7ec <__alt_mem_onchip_memory2_0+0xfc01954c>
 401a9e8:	3027883a 	mov	r19,r6
 401a9ec:	0081ffc4 	movi	r2,2047
 401a9f0:	0021883a 	mov	r16,zero
 401a9f4:	002d883a 	mov	r22,zero
 401a9f8:	003faa06 	br	401a8a4 <__alt_mem_onchip_memory2_0+0xfc019604>
 401a9fc:	0023883a 	mov	r17,zero
 401aa00:	0025883a 	mov	r18,zero
 401aa04:	01c00044 	movi	r7,1
 401aa08:	003f7806 	br	401a7ec <__alt_mem_onchip_memory2_0+0xfc01954c>
 401aa0c:	01c000c4 	movi	r7,3
 401aa10:	003f7606 	br	401a7ec <__alt_mem_onchip_memory2_0+0xfc01954c>
 401aa14:	05400104 	movi	r21,4
 401aa18:	0021883a 	mov	r16,zero
 401aa1c:	002d883a 	mov	r22,zero
 401aa20:	01400044 	movi	r5,1
 401aa24:	003f5f06 	br	401a7a4 <__alt_mem_onchip_memory2_0+0xfc019504>
 401aa28:	05400304 	movi	r21,12
 401aa2c:	014000c4 	movi	r5,3
 401aa30:	003f5c06 	br	401a7a4 <__alt_mem_onchip_memory2_0+0xfc019504>
 401aa34:	04000434 	movhi	r16,16
 401aa38:	0027883a 	mov	r19,zero
 401aa3c:	843fffc4 	addi	r16,r16,-1
 401aa40:	05bfffc4 	movi	r22,-1
 401aa44:	0081ffc4 	movi	r2,2047
 401aa48:	003f9606 	br	401a8a4 <__alt_mem_onchip_memory2_0+0xfc019604>
 401aa4c:	8023883a 	mov	r17,r16
 401aa50:	b025883a 	mov	r18,r22
 401aa54:	280f883a 	mov	r7,r5
 401aa58:	003f8806 	br	401a87c <__alt_mem_onchip_memory2_0+0xfc0195dc>
 401aa5c:	8023883a 	mov	r17,r16
 401aa60:	b025883a 	mov	r18,r22
 401aa64:	480d883a 	mov	r6,r9
 401aa68:	280f883a 	mov	r7,r5
 401aa6c:	003f8306 	br	401a87c <__alt_mem_onchip_memory2_0+0xfc0195dc>
 401aa70:	b026d43a 	srli	r19,r22,16
 401aa74:	902ed43a 	srli	r23,r18,16
 401aa78:	b5bfffcc 	andi	r22,r22,65535
 401aa7c:	94bfffcc 	andi	r18,r18,65535
 401aa80:	b00b883a 	mov	r5,r22
 401aa84:	9009883a 	mov	r4,r18
 401aa88:	d8c00515 	stw	r3,20(sp)
 401aa8c:	d9800715 	stw	r6,28(sp)
 401aa90:	da000615 	stw	r8,24(sp)
 401aa94:	400d7980 	call	400d798 <__mulsi3>
 401aa98:	980b883a 	mov	r5,r19
 401aa9c:	9009883a 	mov	r4,r18
 401aaa0:	1029883a 	mov	r20,r2
 401aaa4:	400d7980 	call	400d798 <__mulsi3>
 401aaa8:	b80b883a 	mov	r5,r23
 401aaac:	9809883a 	mov	r4,r19
 401aab0:	102b883a 	mov	r21,r2
 401aab4:	400d7980 	call	400d798 <__mulsi3>
 401aab8:	b809883a 	mov	r4,r23
 401aabc:	b00b883a 	mov	r5,r22
 401aac0:	1039883a 	mov	fp,r2
 401aac4:	400d7980 	call	400d798 <__mulsi3>
 401aac8:	a008d43a 	srli	r4,r20,16
 401aacc:	1545883a 	add	r2,r2,r21
 401aad0:	d8c00517 	ldw	r3,20(sp)
 401aad4:	2085883a 	add	r2,r4,r2
 401aad8:	d9800717 	ldw	r6,28(sp)
 401aadc:	da000617 	ldw	r8,24(sp)
 401aae0:	1540022e 	bgeu	r2,r21,401aaec <__muldf3+0x3c4>
 401aae4:	01000074 	movhi	r4,1
 401aae8:	e139883a 	add	fp,fp,r4
 401aaec:	100e943a 	slli	r7,r2,16
 401aaf0:	1004d43a 	srli	r2,r2,16
 401aaf4:	882ad43a 	srli	r21,r17,16
 401aaf8:	a53fffcc 	andi	r20,r20,65535
 401aafc:	8c7fffcc 	andi	r17,r17,65535
 401ab00:	3d29883a 	add	r20,r7,r20
 401ab04:	b00b883a 	mov	r5,r22
 401ab08:	8809883a 	mov	r4,r17
 401ab0c:	d8c00515 	stw	r3,20(sp)
 401ab10:	d9800715 	stw	r6,28(sp)
 401ab14:	da000615 	stw	r8,24(sp)
 401ab18:	dd000115 	stw	r20,4(sp)
 401ab1c:	d8800015 	stw	r2,0(sp)
 401ab20:	400d7980 	call	400d798 <__mulsi3>
 401ab24:	980b883a 	mov	r5,r19
 401ab28:	8809883a 	mov	r4,r17
 401ab2c:	d8800215 	stw	r2,8(sp)
 401ab30:	400d7980 	call	400d798 <__mulsi3>
 401ab34:	9809883a 	mov	r4,r19
 401ab38:	a80b883a 	mov	r5,r21
 401ab3c:	1029883a 	mov	r20,r2
 401ab40:	400d7980 	call	400d798 <__mulsi3>
 401ab44:	b00b883a 	mov	r5,r22
 401ab48:	a809883a 	mov	r4,r21
 401ab4c:	d8800415 	stw	r2,16(sp)
 401ab50:	400d7980 	call	400d798 <__mulsi3>
 401ab54:	d9c00217 	ldw	r7,8(sp)
 401ab58:	1505883a 	add	r2,r2,r20
 401ab5c:	d8c00517 	ldw	r3,20(sp)
 401ab60:	3826d43a 	srli	r19,r7,16
 401ab64:	d9800717 	ldw	r6,28(sp)
 401ab68:	da000617 	ldw	r8,24(sp)
 401ab6c:	9885883a 	add	r2,r19,r2
 401ab70:	da400417 	ldw	r9,16(sp)
 401ab74:	1500022e 	bgeu	r2,r20,401ab80 <__muldf3+0x458>
 401ab78:	01000074 	movhi	r4,1
 401ab7c:	4913883a 	add	r9,r9,r4
 401ab80:	1028d43a 	srli	r20,r2,16
 401ab84:	1004943a 	slli	r2,r2,16
 401ab88:	802cd43a 	srli	r22,r16,16
 401ab8c:	843fffcc 	andi	r16,r16,65535
 401ab90:	3cffffcc 	andi	r19,r7,65535
 401ab94:	9009883a 	mov	r4,r18
 401ab98:	800b883a 	mov	r5,r16
 401ab9c:	a269883a 	add	r20,r20,r9
 401aba0:	d8c00515 	stw	r3,20(sp)
 401aba4:	d9800715 	stw	r6,28(sp)
 401aba8:	da000615 	stw	r8,24(sp)
 401abac:	14e7883a 	add	r19,r2,r19
 401abb0:	400d7980 	call	400d798 <__mulsi3>
 401abb4:	9009883a 	mov	r4,r18
 401abb8:	b00b883a 	mov	r5,r22
 401abbc:	d8800315 	stw	r2,12(sp)
 401abc0:	400d7980 	call	400d798 <__mulsi3>
 401abc4:	b809883a 	mov	r4,r23
 401abc8:	b00b883a 	mov	r5,r22
 401abcc:	d8800215 	stw	r2,8(sp)
 401abd0:	400d7980 	call	400d798 <__mulsi3>
 401abd4:	b80b883a 	mov	r5,r23
 401abd8:	8009883a 	mov	r4,r16
 401abdc:	d8800415 	stw	r2,16(sp)
 401abe0:	400d7980 	call	400d798 <__mulsi3>
 401abe4:	da800317 	ldw	r10,12(sp)
 401abe8:	d9c00217 	ldw	r7,8(sp)
 401abec:	d9000017 	ldw	r4,0(sp)
 401abf0:	502ed43a 	srli	r23,r10,16
 401abf4:	11c5883a 	add	r2,r2,r7
 401abf8:	24e5883a 	add	r18,r4,r19
 401abfc:	b885883a 	add	r2,r23,r2
 401ac00:	d8c00517 	ldw	r3,20(sp)
 401ac04:	d9800717 	ldw	r6,28(sp)
 401ac08:	da000617 	ldw	r8,24(sp)
 401ac0c:	da400417 	ldw	r9,16(sp)
 401ac10:	11c0022e 	bgeu	r2,r7,401ac1c <__muldf3+0x4f4>
 401ac14:	01000074 	movhi	r4,1
 401ac18:	4913883a 	add	r9,r9,r4
 401ac1c:	100ed43a 	srli	r7,r2,16
 401ac20:	1004943a 	slli	r2,r2,16
 401ac24:	55ffffcc 	andi	r23,r10,65535
 401ac28:	3a53883a 	add	r9,r7,r9
 401ac2c:	8809883a 	mov	r4,r17
 401ac30:	800b883a 	mov	r5,r16
 401ac34:	d8c00515 	stw	r3,20(sp)
 401ac38:	d9800715 	stw	r6,28(sp)
 401ac3c:	da000615 	stw	r8,24(sp)
 401ac40:	da400415 	stw	r9,16(sp)
 401ac44:	15ef883a 	add	r23,r2,r23
 401ac48:	400d7980 	call	400d798 <__mulsi3>
 401ac4c:	8809883a 	mov	r4,r17
 401ac50:	b00b883a 	mov	r5,r22
 401ac54:	d8800215 	stw	r2,8(sp)
 401ac58:	400d7980 	call	400d798 <__mulsi3>
 401ac5c:	b00b883a 	mov	r5,r22
 401ac60:	a809883a 	mov	r4,r21
 401ac64:	d8800315 	stw	r2,12(sp)
 401ac68:	400d7980 	call	400d798 <__mulsi3>
 401ac6c:	8009883a 	mov	r4,r16
 401ac70:	a80b883a 	mov	r5,r21
 401ac74:	1023883a 	mov	r17,r2
 401ac78:	400d7980 	call	400d798 <__mulsi3>
 401ac7c:	d9c00217 	ldw	r7,8(sp)
 401ac80:	da800317 	ldw	r10,12(sp)
 401ac84:	d8c00517 	ldw	r3,20(sp)
 401ac88:	3808d43a 	srli	r4,r7,16
 401ac8c:	1285883a 	add	r2,r2,r10
 401ac90:	d9800717 	ldw	r6,28(sp)
 401ac94:	2085883a 	add	r2,r4,r2
 401ac98:	da000617 	ldw	r8,24(sp)
 401ac9c:	da400417 	ldw	r9,16(sp)
 401aca0:	1280022e 	bgeu	r2,r10,401acac <__muldf3+0x584>
 401aca4:	01000074 	movhi	r4,1
 401aca8:	8923883a 	add	r17,r17,r4
 401acac:	1008943a 	slli	r4,r2,16
 401acb0:	39ffffcc 	andi	r7,r7,65535
 401acb4:	e4b9883a 	add	fp,fp,r18
 401acb8:	21cf883a 	add	r7,r4,r7
 401acbc:	e4e7803a 	cmpltu	r19,fp,r19
 401acc0:	3d0f883a 	add	r7,r7,r20
 401acc4:	bf39883a 	add	fp,r23,fp
 401acc8:	99c9883a 	add	r4,r19,r7
 401accc:	e5ef803a 	cmpltu	r23,fp,r23
 401acd0:	490b883a 	add	r5,r9,r4
 401acd4:	1004d43a 	srli	r2,r2,16
 401acd8:	b965883a 	add	r18,r23,r5
 401acdc:	24c9803a 	cmpltu	r4,r4,r19
 401ace0:	3d29803a 	cmpltu	r20,r7,r20
 401ace4:	a128b03a 	or	r20,r20,r4
 401ace8:	95ef803a 	cmpltu	r23,r18,r23
 401acec:	2a53803a 	cmpltu	r9,r5,r9
 401acf0:	a0a9883a 	add	r20,r20,r2
 401acf4:	4deeb03a 	or	r23,r9,r23
 401acf8:	a5ef883a 	add	r23,r20,r23
 401acfc:	bc63883a 	add	r17,r23,r17
 401ad00:	e004927a 	slli	r2,fp,9
 401ad04:	d9000117 	ldw	r4,4(sp)
 401ad08:	882e927a 	slli	r23,r17,9
 401ad0c:	9022d5fa 	srli	r17,r18,23
 401ad10:	e038d5fa 	srli	fp,fp,23
 401ad14:	1104b03a 	or	r2,r2,r4
 401ad18:	9024927a 	slli	r18,r18,9
 401ad1c:	1004c03a 	cmpne	r2,r2,zero
 401ad20:	bc62b03a 	or	r17,r23,r17
 401ad24:	1738b03a 	or	fp,r2,fp
 401ad28:	8880402c 	andhi	r2,r17,256
 401ad2c:	e4a4b03a 	or	r18,fp,r18
 401ad30:	10000726 	beq	r2,zero,401ad50 <__muldf3+0x628>
 401ad34:	9006d07a 	srli	r3,r18,1
 401ad38:	880497fa 	slli	r2,r17,31
 401ad3c:	9480004c 	andi	r18,r18,1
 401ad40:	8822d07a 	srli	r17,r17,1
 401ad44:	1ca4b03a 	or	r18,r3,r18
 401ad48:	14a4b03a 	or	r18,r2,r18
 401ad4c:	4007883a 	mov	r3,r8
 401ad50:	1880ffc4 	addi	r2,r3,1023
 401ad54:	0080460e 	bge	zero,r2,401ae70 <__muldf3+0x748>
 401ad58:	910001cc 	andi	r4,r18,7
 401ad5c:	20000726 	beq	r4,zero,401ad7c <__muldf3+0x654>
 401ad60:	910003cc 	andi	r4,r18,15
 401ad64:	01400104 	movi	r5,4
 401ad68:	21400426 	beq	r4,r5,401ad7c <__muldf3+0x654>
 401ad6c:	9149883a 	add	r4,r18,r5
 401ad70:	24a5803a 	cmpltu	r18,r4,r18
 401ad74:	8ca3883a 	add	r17,r17,r18
 401ad78:	2025883a 	mov	r18,r4
 401ad7c:	8900402c 	andhi	r4,r17,256
 401ad80:	20000426 	beq	r4,zero,401ad94 <__muldf3+0x66c>
 401ad84:	18810004 	addi	r2,r3,1024
 401ad88:	00ffc034 	movhi	r3,65280
 401ad8c:	18ffffc4 	addi	r3,r3,-1
 401ad90:	88e2703a 	and	r17,r17,r3
 401ad94:	00c1ff84 	movi	r3,2046
 401ad98:	18bf1316 	blt	r3,r2,401a9e8 <__alt_mem_onchip_memory2_0+0xfc019748>
 401ad9c:	882c977a 	slli	r22,r17,29
 401ada0:	9024d0fa 	srli	r18,r18,3
 401ada4:	8822927a 	slli	r17,r17,9
 401ada8:	1081ffcc 	andi	r2,r2,2047
 401adac:	b4acb03a 	or	r22,r22,r18
 401adb0:	8820d33a 	srli	r16,r17,12
 401adb4:	3027883a 	mov	r19,r6
 401adb8:	003eba06 	br	401a8a4 <__alt_mem_onchip_memory2_0+0xfc019604>
 401adbc:	8080022c 	andhi	r2,r16,8
 401adc0:	10000926 	beq	r2,zero,401ade8 <__muldf3+0x6c0>
 401adc4:	8880022c 	andhi	r2,r17,8
 401adc8:	1000071e 	bne	r2,zero,401ade8 <__muldf3+0x6c0>
 401adcc:	00800434 	movhi	r2,16
 401add0:	8c000234 	orhi	r16,r17,8
 401add4:	10bfffc4 	addi	r2,r2,-1
 401add8:	e027883a 	mov	r19,fp
 401addc:	80a0703a 	and	r16,r16,r2
 401ade0:	902d883a 	mov	r22,r18
 401ade4:	003f1706 	br	401aa44 <__alt_mem_onchip_memory2_0+0xfc0197a4>
 401ade8:	00800434 	movhi	r2,16
 401adec:	84000234 	orhi	r16,r16,8
 401adf0:	10bfffc4 	addi	r2,r2,-1
 401adf4:	80a0703a 	and	r16,r16,r2
 401adf8:	003f1206 	br	401aa44 <__alt_mem_onchip_memory2_0+0xfc0197a4>
 401adfc:	147ff604 	addi	r17,r2,-40
 401ae00:	3462983a 	sll	r17,r6,r17
 401ae04:	0025883a 	mov	r18,zero
 401ae08:	003ef306 	br	401a9d8 <__alt_mem_onchip_memory2_0+0xfc019738>
 401ae0c:	3009883a 	mov	r4,r6
 401ae10:	d9400215 	stw	r5,8(sp)
 401ae14:	d9800715 	stw	r6,28(sp)
 401ae18:	da400415 	stw	r9,16(sp)
 401ae1c:	da800315 	stw	r10,12(sp)
 401ae20:	400e8100 	call	400e810 <__clzsi2>
 401ae24:	10800804 	addi	r2,r2,32
 401ae28:	da800317 	ldw	r10,12(sp)
 401ae2c:	da400417 	ldw	r9,16(sp)
 401ae30:	d9800717 	ldw	r6,28(sp)
 401ae34:	d9400217 	ldw	r5,8(sp)
 401ae38:	003edd06 	br	401a9b0 <__alt_mem_onchip_memory2_0+0xfc019710>
 401ae3c:	143ff604 	addi	r16,r2,-40
 401ae40:	ac20983a 	sll	r16,r21,r16
 401ae44:	002d883a 	mov	r22,zero
 401ae48:	003ec106 	br	401a950 <__alt_mem_onchip_memory2_0+0xfc0196b0>
 401ae4c:	d9800715 	stw	r6,28(sp)
 401ae50:	d9c00215 	stw	r7,8(sp)
 401ae54:	da400415 	stw	r9,16(sp)
 401ae58:	400e8100 	call	400e810 <__clzsi2>
 401ae5c:	10800804 	addi	r2,r2,32
 401ae60:	da400417 	ldw	r9,16(sp)
 401ae64:	d9c00217 	ldw	r7,8(sp)
 401ae68:	d9800717 	ldw	r6,28(sp)
 401ae6c:	003eae06 	br	401a928 <__alt_mem_onchip_memory2_0+0xfc019688>
 401ae70:	00c00044 	movi	r3,1
 401ae74:	1887c83a 	sub	r3,r3,r2
 401ae78:	01000e04 	movi	r4,56
 401ae7c:	20fe8516 	blt	r4,r3,401a894 <__alt_mem_onchip_memory2_0+0xfc0195f4>
 401ae80:	010007c4 	movi	r4,31
 401ae84:	20c01b16 	blt	r4,r3,401aef4 <__muldf3+0x7cc>
 401ae88:	00800804 	movi	r2,32
 401ae8c:	10c5c83a 	sub	r2,r2,r3
 401ae90:	888a983a 	sll	r5,r17,r2
 401ae94:	90c8d83a 	srl	r4,r18,r3
 401ae98:	9084983a 	sll	r2,r18,r2
 401ae9c:	88e2d83a 	srl	r17,r17,r3
 401aea0:	2906b03a 	or	r3,r5,r4
 401aea4:	1004c03a 	cmpne	r2,r2,zero
 401aea8:	1886b03a 	or	r3,r3,r2
 401aeac:	188001cc 	andi	r2,r3,7
 401aeb0:	10000726 	beq	r2,zero,401aed0 <__muldf3+0x7a8>
 401aeb4:	188003cc 	andi	r2,r3,15
 401aeb8:	01000104 	movi	r4,4
 401aebc:	11000426 	beq	r2,r4,401aed0 <__muldf3+0x7a8>
 401aec0:	1805883a 	mov	r2,r3
 401aec4:	10c00104 	addi	r3,r2,4
 401aec8:	1885803a 	cmpltu	r2,r3,r2
 401aecc:	88a3883a 	add	r17,r17,r2
 401aed0:	8880202c 	andhi	r2,r17,128
 401aed4:	10001c26 	beq	r2,zero,401af48 <__muldf3+0x820>
 401aed8:	3027883a 	mov	r19,r6
 401aedc:	00800044 	movi	r2,1
 401aee0:	0021883a 	mov	r16,zero
 401aee4:	002d883a 	mov	r22,zero
 401aee8:	003e6e06 	br	401a8a4 <__alt_mem_onchip_memory2_0+0xfc019604>
 401aeec:	4007883a 	mov	r3,r8
 401aef0:	003f9706 	br	401ad50 <__alt_mem_onchip_memory2_0+0xfc019ab0>
 401aef4:	017ff844 	movi	r5,-31
 401aef8:	2885c83a 	sub	r2,r5,r2
 401aefc:	888ad83a 	srl	r5,r17,r2
 401af00:	00800804 	movi	r2,32
 401af04:	18801a26 	beq	r3,r2,401af70 <__muldf3+0x848>
 401af08:	01001004 	movi	r4,64
 401af0c:	20c7c83a 	sub	r3,r4,r3
 401af10:	88e2983a 	sll	r17,r17,r3
 401af14:	8ca4b03a 	or	r18,r17,r18
 401af18:	9004c03a 	cmpne	r2,r18,zero
 401af1c:	2884b03a 	or	r2,r5,r2
 401af20:	144001cc 	andi	r17,r2,7
 401af24:	88000d1e 	bne	r17,zero,401af5c <__muldf3+0x834>
 401af28:	0021883a 	mov	r16,zero
 401af2c:	102cd0fa 	srli	r22,r2,3
 401af30:	3027883a 	mov	r19,r6
 401af34:	0005883a 	mov	r2,zero
 401af38:	b46cb03a 	or	r22,r22,r17
 401af3c:	003e5906 	br	401a8a4 <__alt_mem_onchip_memory2_0+0xfc019604>
 401af40:	1007883a 	mov	r3,r2
 401af44:	0023883a 	mov	r17,zero
 401af48:	8820927a 	slli	r16,r17,9
 401af4c:	1805883a 	mov	r2,r3
 401af50:	8822977a 	slli	r17,r17,29
 401af54:	8020d33a 	srli	r16,r16,12
 401af58:	003ff406 	br	401af2c <__alt_mem_onchip_memory2_0+0xfc019c8c>
 401af5c:	10c003cc 	andi	r3,r2,15
 401af60:	01000104 	movi	r4,4
 401af64:	193ff626 	beq	r3,r4,401af40 <__alt_mem_onchip_memory2_0+0xfc019ca0>
 401af68:	0023883a 	mov	r17,zero
 401af6c:	003fd506 	br	401aec4 <__alt_mem_onchip_memory2_0+0xfc019c24>
 401af70:	0023883a 	mov	r17,zero
 401af74:	003fe706 	br	401af14 <__alt_mem_onchip_memory2_0+0xfc019c74>
 401af78:	00800434 	movhi	r2,16
 401af7c:	8c000234 	orhi	r16,r17,8
 401af80:	10bfffc4 	addi	r2,r2,-1
 401af84:	3027883a 	mov	r19,r6
 401af88:	80a0703a 	and	r16,r16,r2
 401af8c:	902d883a 	mov	r22,r18
 401af90:	003eac06 	br	401aa44 <__alt_mem_onchip_memory2_0+0xfc0197a4>

0401af94 <__subdf3>:
 401af94:	02000434 	movhi	r8,16
 401af98:	423fffc4 	addi	r8,r8,-1
 401af9c:	defffb04 	addi	sp,sp,-20
 401afa0:	2a14703a 	and	r10,r5,r8
 401afa4:	3812d53a 	srli	r9,r7,20
 401afa8:	3a10703a 	and	r8,r7,r8
 401afac:	2006d77a 	srli	r3,r4,29
 401afb0:	3004d77a 	srli	r2,r6,29
 401afb4:	dc000015 	stw	r16,0(sp)
 401afb8:	501490fa 	slli	r10,r10,3
 401afbc:	2820d53a 	srli	r16,r5,20
 401afc0:	401090fa 	slli	r8,r8,3
 401afc4:	dc800215 	stw	r18,8(sp)
 401afc8:	dc400115 	stw	r17,4(sp)
 401afcc:	dfc00415 	stw	ra,16(sp)
 401afd0:	202290fa 	slli	r17,r4,3
 401afd4:	dcc00315 	stw	r19,12(sp)
 401afd8:	4a41ffcc 	andi	r9,r9,2047
 401afdc:	0101ffc4 	movi	r4,2047
 401afe0:	2824d7fa 	srli	r18,r5,31
 401afe4:	8401ffcc 	andi	r16,r16,2047
 401afe8:	50c6b03a 	or	r3,r10,r3
 401afec:	380ed7fa 	srli	r7,r7,31
 401aff0:	408ab03a 	or	r5,r8,r2
 401aff4:	300c90fa 	slli	r6,r6,3
 401aff8:	49009626 	beq	r9,r4,401b254 <__subdf3+0x2c0>
 401affc:	39c0005c 	xori	r7,r7,1
 401b000:	8245c83a 	sub	r2,r16,r9
 401b004:	3c807426 	beq	r7,r18,401b1d8 <__subdf3+0x244>
 401b008:	0080af0e 	bge	zero,r2,401b2c8 <__subdf3+0x334>
 401b00c:	48002a1e 	bne	r9,zero,401b0b8 <__subdf3+0x124>
 401b010:	2988b03a 	or	r4,r5,r6
 401b014:	20009a1e 	bne	r4,zero,401b280 <__subdf3+0x2ec>
 401b018:	888001cc 	andi	r2,r17,7
 401b01c:	10000726 	beq	r2,zero,401b03c <__subdf3+0xa8>
 401b020:	888003cc 	andi	r2,r17,15
 401b024:	01000104 	movi	r4,4
 401b028:	11000426 	beq	r2,r4,401b03c <__subdf3+0xa8>
 401b02c:	890b883a 	add	r5,r17,r4
 401b030:	2c63803a 	cmpltu	r17,r5,r17
 401b034:	1c47883a 	add	r3,r3,r17
 401b038:	2823883a 	mov	r17,r5
 401b03c:	1880202c 	andhi	r2,r3,128
 401b040:	10005926 	beq	r2,zero,401b1a8 <__subdf3+0x214>
 401b044:	84000044 	addi	r16,r16,1
 401b048:	0081ffc4 	movi	r2,2047
 401b04c:	8080be26 	beq	r16,r2,401b348 <__subdf3+0x3b4>
 401b050:	017fe034 	movhi	r5,65408
 401b054:	297fffc4 	addi	r5,r5,-1
 401b058:	1946703a 	and	r3,r3,r5
 401b05c:	1804977a 	slli	r2,r3,29
 401b060:	1806927a 	slli	r3,r3,9
 401b064:	8822d0fa 	srli	r17,r17,3
 401b068:	8401ffcc 	andi	r16,r16,2047
 401b06c:	180ad33a 	srli	r5,r3,12
 401b070:	9100004c 	andi	r4,r18,1
 401b074:	1444b03a 	or	r2,r2,r17
 401b078:	80c1ffcc 	andi	r3,r16,2047
 401b07c:	1820953a 	slli	r16,r3,20
 401b080:	20c03fcc 	andi	r3,r4,255
 401b084:	180897fa 	slli	r4,r3,31
 401b088:	00c00434 	movhi	r3,16
 401b08c:	18ffffc4 	addi	r3,r3,-1
 401b090:	28c6703a 	and	r3,r5,r3
 401b094:	1c06b03a 	or	r3,r3,r16
 401b098:	1906b03a 	or	r3,r3,r4
 401b09c:	dfc00417 	ldw	ra,16(sp)
 401b0a0:	dcc00317 	ldw	r19,12(sp)
 401b0a4:	dc800217 	ldw	r18,8(sp)
 401b0a8:	dc400117 	ldw	r17,4(sp)
 401b0ac:	dc000017 	ldw	r16,0(sp)
 401b0b0:	dec00504 	addi	sp,sp,20
 401b0b4:	f800283a 	ret
 401b0b8:	0101ffc4 	movi	r4,2047
 401b0bc:	813fd626 	beq	r16,r4,401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b0c0:	29402034 	orhi	r5,r5,128
 401b0c4:	01000e04 	movi	r4,56
 401b0c8:	2080a316 	blt	r4,r2,401b358 <__subdf3+0x3c4>
 401b0cc:	010007c4 	movi	r4,31
 401b0d0:	2080c616 	blt	r4,r2,401b3ec <__subdf3+0x458>
 401b0d4:	01000804 	movi	r4,32
 401b0d8:	2089c83a 	sub	r4,r4,r2
 401b0dc:	2910983a 	sll	r8,r5,r4
 401b0e0:	308ed83a 	srl	r7,r6,r2
 401b0e4:	3108983a 	sll	r4,r6,r4
 401b0e8:	2884d83a 	srl	r2,r5,r2
 401b0ec:	41ccb03a 	or	r6,r8,r7
 401b0f0:	2008c03a 	cmpne	r4,r4,zero
 401b0f4:	310cb03a 	or	r6,r6,r4
 401b0f8:	898dc83a 	sub	r6,r17,r6
 401b0fc:	89a3803a 	cmpltu	r17,r17,r6
 401b100:	1887c83a 	sub	r3,r3,r2
 401b104:	1c47c83a 	sub	r3,r3,r17
 401b108:	3023883a 	mov	r17,r6
 401b10c:	1880202c 	andhi	r2,r3,128
 401b110:	10002326 	beq	r2,zero,401b1a0 <__subdf3+0x20c>
 401b114:	04c02034 	movhi	r19,128
 401b118:	9cffffc4 	addi	r19,r19,-1
 401b11c:	1ce6703a 	and	r19,r3,r19
 401b120:	98007a26 	beq	r19,zero,401b30c <__subdf3+0x378>
 401b124:	9809883a 	mov	r4,r19
 401b128:	400e8100 	call	400e810 <__clzsi2>
 401b12c:	113ffe04 	addi	r4,r2,-8
 401b130:	00c007c4 	movi	r3,31
 401b134:	19007b16 	blt	r3,r4,401b324 <__subdf3+0x390>
 401b138:	00800804 	movi	r2,32
 401b13c:	1105c83a 	sub	r2,r2,r4
 401b140:	8884d83a 	srl	r2,r17,r2
 401b144:	9906983a 	sll	r3,r19,r4
 401b148:	8922983a 	sll	r17,r17,r4
 401b14c:	10c4b03a 	or	r2,r2,r3
 401b150:	24007816 	blt	r4,r16,401b334 <__subdf3+0x3a0>
 401b154:	2421c83a 	sub	r16,r4,r16
 401b158:	80c00044 	addi	r3,r16,1
 401b15c:	010007c4 	movi	r4,31
 401b160:	20c09516 	blt	r4,r3,401b3b8 <__subdf3+0x424>
 401b164:	01400804 	movi	r5,32
 401b168:	28cbc83a 	sub	r5,r5,r3
 401b16c:	88c8d83a 	srl	r4,r17,r3
 401b170:	8962983a 	sll	r17,r17,r5
 401b174:	114a983a 	sll	r5,r2,r5
 401b178:	10c6d83a 	srl	r3,r2,r3
 401b17c:	8804c03a 	cmpne	r2,r17,zero
 401b180:	290ab03a 	or	r5,r5,r4
 401b184:	28a2b03a 	or	r17,r5,r2
 401b188:	0021883a 	mov	r16,zero
 401b18c:	003fa206 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b190:	2090b03a 	or	r8,r4,r2
 401b194:	40018e26 	beq	r8,zero,401b7d0 <__subdf3+0x83c>
 401b198:	1007883a 	mov	r3,r2
 401b19c:	2023883a 	mov	r17,r4
 401b1a0:	888001cc 	andi	r2,r17,7
 401b1a4:	103f9e1e 	bne	r2,zero,401b020 <__alt_mem_onchip_memory2_0+0xfc019d80>
 401b1a8:	1804977a 	slli	r2,r3,29
 401b1ac:	8822d0fa 	srli	r17,r17,3
 401b1b0:	1810d0fa 	srli	r8,r3,3
 401b1b4:	9100004c 	andi	r4,r18,1
 401b1b8:	1444b03a 	or	r2,r2,r17
 401b1bc:	00c1ffc4 	movi	r3,2047
 401b1c0:	80c02826 	beq	r16,r3,401b264 <__subdf3+0x2d0>
 401b1c4:	01400434 	movhi	r5,16
 401b1c8:	297fffc4 	addi	r5,r5,-1
 401b1cc:	80e0703a 	and	r16,r16,r3
 401b1d0:	414a703a 	and	r5,r8,r5
 401b1d4:	003fa806 	br	401b078 <__alt_mem_onchip_memory2_0+0xfc019dd8>
 401b1d8:	0080630e 	bge	zero,r2,401b368 <__subdf3+0x3d4>
 401b1dc:	48003026 	beq	r9,zero,401b2a0 <__subdf3+0x30c>
 401b1e0:	0101ffc4 	movi	r4,2047
 401b1e4:	813f8c26 	beq	r16,r4,401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b1e8:	29402034 	orhi	r5,r5,128
 401b1ec:	01000e04 	movi	r4,56
 401b1f0:	2080a90e 	bge	r4,r2,401b498 <__subdf3+0x504>
 401b1f4:	298cb03a 	or	r6,r5,r6
 401b1f8:	3012c03a 	cmpne	r9,r6,zero
 401b1fc:	0005883a 	mov	r2,zero
 401b200:	4c53883a 	add	r9,r9,r17
 401b204:	4c63803a 	cmpltu	r17,r9,r17
 401b208:	10c7883a 	add	r3,r2,r3
 401b20c:	88c7883a 	add	r3,r17,r3
 401b210:	4823883a 	mov	r17,r9
 401b214:	1880202c 	andhi	r2,r3,128
 401b218:	1000d026 	beq	r2,zero,401b55c <__subdf3+0x5c8>
 401b21c:	84000044 	addi	r16,r16,1
 401b220:	0081ffc4 	movi	r2,2047
 401b224:	8080fe26 	beq	r16,r2,401b620 <__subdf3+0x68c>
 401b228:	00bfe034 	movhi	r2,65408
 401b22c:	10bfffc4 	addi	r2,r2,-1
 401b230:	1886703a 	and	r3,r3,r2
 401b234:	880ad07a 	srli	r5,r17,1
 401b238:	180497fa 	slli	r2,r3,31
 401b23c:	8900004c 	andi	r4,r17,1
 401b240:	2922b03a 	or	r17,r5,r4
 401b244:	1806d07a 	srli	r3,r3,1
 401b248:	1462b03a 	or	r17,r2,r17
 401b24c:	3825883a 	mov	r18,r7
 401b250:	003f7106 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b254:	2984b03a 	or	r2,r5,r6
 401b258:	103f6826 	beq	r2,zero,401affc <__alt_mem_onchip_memory2_0+0xfc019d5c>
 401b25c:	39c03fcc 	andi	r7,r7,255
 401b260:	003f6706 	br	401b000 <__alt_mem_onchip_memory2_0+0xfc019d60>
 401b264:	4086b03a 	or	r3,r8,r2
 401b268:	18015226 	beq	r3,zero,401b7b4 <__subdf3+0x820>
 401b26c:	00c00434 	movhi	r3,16
 401b270:	41400234 	orhi	r5,r8,8
 401b274:	18ffffc4 	addi	r3,r3,-1
 401b278:	28ca703a 	and	r5,r5,r3
 401b27c:	003f7e06 	br	401b078 <__alt_mem_onchip_memory2_0+0xfc019dd8>
 401b280:	10bfffc4 	addi	r2,r2,-1
 401b284:	1000491e 	bne	r2,zero,401b3ac <__subdf3+0x418>
 401b288:	898fc83a 	sub	r7,r17,r6
 401b28c:	89e3803a 	cmpltu	r17,r17,r7
 401b290:	1947c83a 	sub	r3,r3,r5
 401b294:	1c47c83a 	sub	r3,r3,r17
 401b298:	3823883a 	mov	r17,r7
 401b29c:	003f9b06 	br	401b10c <__alt_mem_onchip_memory2_0+0xfc019e6c>
 401b2a0:	2988b03a 	or	r4,r5,r6
 401b2a4:	203f5c26 	beq	r4,zero,401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b2a8:	10bfffc4 	addi	r2,r2,-1
 401b2ac:	1000931e 	bne	r2,zero,401b4fc <__subdf3+0x568>
 401b2b0:	898d883a 	add	r6,r17,r6
 401b2b4:	3463803a 	cmpltu	r17,r6,r17
 401b2b8:	1947883a 	add	r3,r3,r5
 401b2bc:	88c7883a 	add	r3,r17,r3
 401b2c0:	3023883a 	mov	r17,r6
 401b2c4:	003fd306 	br	401b214 <__alt_mem_onchip_memory2_0+0xfc019f74>
 401b2c8:	1000541e 	bne	r2,zero,401b41c <__subdf3+0x488>
 401b2cc:	80800044 	addi	r2,r16,1
 401b2d0:	1081ffcc 	andi	r2,r2,2047
 401b2d4:	01000044 	movi	r4,1
 401b2d8:	2080a20e 	bge	r4,r2,401b564 <__subdf3+0x5d0>
 401b2dc:	8989c83a 	sub	r4,r17,r6
 401b2e0:	8905803a 	cmpltu	r2,r17,r4
 401b2e4:	1967c83a 	sub	r19,r3,r5
 401b2e8:	98a7c83a 	sub	r19,r19,r2
 401b2ec:	9880202c 	andhi	r2,r19,128
 401b2f0:	10006326 	beq	r2,zero,401b480 <__subdf3+0x4ec>
 401b2f4:	3463c83a 	sub	r17,r6,r17
 401b2f8:	28c7c83a 	sub	r3,r5,r3
 401b2fc:	344d803a 	cmpltu	r6,r6,r17
 401b300:	19a7c83a 	sub	r19,r3,r6
 401b304:	3825883a 	mov	r18,r7
 401b308:	983f861e 	bne	r19,zero,401b124 <__alt_mem_onchip_memory2_0+0xfc019e84>
 401b30c:	8809883a 	mov	r4,r17
 401b310:	400e8100 	call	400e810 <__clzsi2>
 401b314:	10800804 	addi	r2,r2,32
 401b318:	113ffe04 	addi	r4,r2,-8
 401b31c:	00c007c4 	movi	r3,31
 401b320:	193f850e 	bge	r3,r4,401b138 <__alt_mem_onchip_memory2_0+0xfc019e98>
 401b324:	10bff604 	addi	r2,r2,-40
 401b328:	8884983a 	sll	r2,r17,r2
 401b32c:	0023883a 	mov	r17,zero
 401b330:	243f880e 	bge	r4,r16,401b154 <__alt_mem_onchip_memory2_0+0xfc019eb4>
 401b334:	00ffe034 	movhi	r3,65408
 401b338:	18ffffc4 	addi	r3,r3,-1
 401b33c:	8121c83a 	sub	r16,r16,r4
 401b340:	10c6703a 	and	r3,r2,r3
 401b344:	003f3406 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b348:	9100004c 	andi	r4,r18,1
 401b34c:	000b883a 	mov	r5,zero
 401b350:	0005883a 	mov	r2,zero
 401b354:	003f4806 	br	401b078 <__alt_mem_onchip_memory2_0+0xfc019dd8>
 401b358:	298cb03a 	or	r6,r5,r6
 401b35c:	300cc03a 	cmpne	r6,r6,zero
 401b360:	0005883a 	mov	r2,zero
 401b364:	003f6406 	br	401b0f8 <__alt_mem_onchip_memory2_0+0xfc019e58>
 401b368:	10009a1e 	bne	r2,zero,401b5d4 <__subdf3+0x640>
 401b36c:	82400044 	addi	r9,r16,1
 401b370:	4881ffcc 	andi	r2,r9,2047
 401b374:	02800044 	movi	r10,1
 401b378:	5080670e 	bge	r10,r2,401b518 <__subdf3+0x584>
 401b37c:	0081ffc4 	movi	r2,2047
 401b380:	4880af26 	beq	r9,r2,401b640 <__subdf3+0x6ac>
 401b384:	898d883a 	add	r6,r17,r6
 401b388:	1945883a 	add	r2,r3,r5
 401b38c:	3447803a 	cmpltu	r3,r6,r17
 401b390:	1887883a 	add	r3,r3,r2
 401b394:	182297fa 	slli	r17,r3,31
 401b398:	300cd07a 	srli	r6,r6,1
 401b39c:	1806d07a 	srli	r3,r3,1
 401b3a0:	4821883a 	mov	r16,r9
 401b3a4:	89a2b03a 	or	r17,r17,r6
 401b3a8:	003f1b06 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b3ac:	0101ffc4 	movi	r4,2047
 401b3b0:	813f441e 	bne	r16,r4,401b0c4 <__alt_mem_onchip_memory2_0+0xfc019e24>
 401b3b4:	003f1806 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b3b8:	843ff844 	addi	r16,r16,-31
 401b3bc:	01400804 	movi	r5,32
 401b3c0:	1408d83a 	srl	r4,r2,r16
 401b3c4:	19405026 	beq	r3,r5,401b508 <__subdf3+0x574>
 401b3c8:	01401004 	movi	r5,64
 401b3cc:	28c7c83a 	sub	r3,r5,r3
 401b3d0:	10c4983a 	sll	r2,r2,r3
 401b3d4:	88a2b03a 	or	r17,r17,r2
 401b3d8:	8822c03a 	cmpne	r17,r17,zero
 401b3dc:	2462b03a 	or	r17,r4,r17
 401b3e0:	0007883a 	mov	r3,zero
 401b3e4:	0021883a 	mov	r16,zero
 401b3e8:	003f6d06 	br	401b1a0 <__alt_mem_onchip_memory2_0+0xfc019f00>
 401b3ec:	11fff804 	addi	r7,r2,-32
 401b3f0:	01000804 	movi	r4,32
 401b3f4:	29ced83a 	srl	r7,r5,r7
 401b3f8:	11004526 	beq	r2,r4,401b510 <__subdf3+0x57c>
 401b3fc:	01001004 	movi	r4,64
 401b400:	2089c83a 	sub	r4,r4,r2
 401b404:	2904983a 	sll	r2,r5,r4
 401b408:	118cb03a 	or	r6,r2,r6
 401b40c:	300cc03a 	cmpne	r6,r6,zero
 401b410:	398cb03a 	or	r6,r7,r6
 401b414:	0005883a 	mov	r2,zero
 401b418:	003f3706 	br	401b0f8 <__alt_mem_onchip_memory2_0+0xfc019e58>
 401b41c:	80002a26 	beq	r16,zero,401b4c8 <__subdf3+0x534>
 401b420:	0101ffc4 	movi	r4,2047
 401b424:	49006626 	beq	r9,r4,401b5c0 <__subdf3+0x62c>
 401b428:	0085c83a 	sub	r2,zero,r2
 401b42c:	18c02034 	orhi	r3,r3,128
 401b430:	01000e04 	movi	r4,56
 401b434:	20807e16 	blt	r4,r2,401b630 <__subdf3+0x69c>
 401b438:	010007c4 	movi	r4,31
 401b43c:	2080e716 	blt	r4,r2,401b7dc <__subdf3+0x848>
 401b440:	01000804 	movi	r4,32
 401b444:	2089c83a 	sub	r4,r4,r2
 401b448:	1914983a 	sll	r10,r3,r4
 401b44c:	8890d83a 	srl	r8,r17,r2
 401b450:	8908983a 	sll	r4,r17,r4
 401b454:	1884d83a 	srl	r2,r3,r2
 401b458:	5222b03a 	or	r17,r10,r8
 401b45c:	2006c03a 	cmpne	r3,r4,zero
 401b460:	88e2b03a 	or	r17,r17,r3
 401b464:	3463c83a 	sub	r17,r6,r17
 401b468:	2885c83a 	sub	r2,r5,r2
 401b46c:	344d803a 	cmpltu	r6,r6,r17
 401b470:	1187c83a 	sub	r3,r2,r6
 401b474:	4821883a 	mov	r16,r9
 401b478:	3825883a 	mov	r18,r7
 401b47c:	003f2306 	br	401b10c <__alt_mem_onchip_memory2_0+0xfc019e6c>
 401b480:	24d0b03a 	or	r8,r4,r19
 401b484:	40001b1e 	bne	r8,zero,401b4f4 <__subdf3+0x560>
 401b488:	0005883a 	mov	r2,zero
 401b48c:	0009883a 	mov	r4,zero
 401b490:	0021883a 	mov	r16,zero
 401b494:	003f4906 	br	401b1bc <__alt_mem_onchip_memory2_0+0xfc019f1c>
 401b498:	010007c4 	movi	r4,31
 401b49c:	20803a16 	blt	r4,r2,401b588 <__subdf3+0x5f4>
 401b4a0:	01000804 	movi	r4,32
 401b4a4:	2089c83a 	sub	r4,r4,r2
 401b4a8:	2912983a 	sll	r9,r5,r4
 401b4ac:	3090d83a 	srl	r8,r6,r2
 401b4b0:	3108983a 	sll	r4,r6,r4
 401b4b4:	2884d83a 	srl	r2,r5,r2
 401b4b8:	4a12b03a 	or	r9,r9,r8
 401b4bc:	2008c03a 	cmpne	r4,r4,zero
 401b4c0:	4912b03a 	or	r9,r9,r4
 401b4c4:	003f4e06 	br	401b200 <__alt_mem_onchip_memory2_0+0xfc019f60>
 401b4c8:	1c48b03a 	or	r4,r3,r17
 401b4cc:	20003c26 	beq	r4,zero,401b5c0 <__subdf3+0x62c>
 401b4d0:	0084303a 	nor	r2,zero,r2
 401b4d4:	1000381e 	bne	r2,zero,401b5b8 <__subdf3+0x624>
 401b4d8:	3463c83a 	sub	r17,r6,r17
 401b4dc:	28c5c83a 	sub	r2,r5,r3
 401b4e0:	344d803a 	cmpltu	r6,r6,r17
 401b4e4:	1187c83a 	sub	r3,r2,r6
 401b4e8:	4821883a 	mov	r16,r9
 401b4ec:	3825883a 	mov	r18,r7
 401b4f0:	003f0606 	br	401b10c <__alt_mem_onchip_memory2_0+0xfc019e6c>
 401b4f4:	2023883a 	mov	r17,r4
 401b4f8:	003f0906 	br	401b120 <__alt_mem_onchip_memory2_0+0xfc019e80>
 401b4fc:	0101ffc4 	movi	r4,2047
 401b500:	813f3a1e 	bne	r16,r4,401b1ec <__alt_mem_onchip_memory2_0+0xfc019f4c>
 401b504:	003ec406 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b508:	0005883a 	mov	r2,zero
 401b50c:	003fb106 	br	401b3d4 <__alt_mem_onchip_memory2_0+0xfc01a134>
 401b510:	0005883a 	mov	r2,zero
 401b514:	003fbc06 	br	401b408 <__alt_mem_onchip_memory2_0+0xfc01a168>
 401b518:	1c44b03a 	or	r2,r3,r17
 401b51c:	80008e1e 	bne	r16,zero,401b758 <__subdf3+0x7c4>
 401b520:	1000c826 	beq	r2,zero,401b844 <__subdf3+0x8b0>
 401b524:	2984b03a 	or	r2,r5,r6
 401b528:	103ebb26 	beq	r2,zero,401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b52c:	8989883a 	add	r4,r17,r6
 401b530:	1945883a 	add	r2,r3,r5
 401b534:	2447803a 	cmpltu	r3,r4,r17
 401b538:	1887883a 	add	r3,r3,r2
 401b53c:	1880202c 	andhi	r2,r3,128
 401b540:	2023883a 	mov	r17,r4
 401b544:	103f1626 	beq	r2,zero,401b1a0 <__alt_mem_onchip_memory2_0+0xfc019f00>
 401b548:	00bfe034 	movhi	r2,65408
 401b54c:	10bfffc4 	addi	r2,r2,-1
 401b550:	5021883a 	mov	r16,r10
 401b554:	1886703a 	and	r3,r3,r2
 401b558:	003eaf06 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b55c:	3825883a 	mov	r18,r7
 401b560:	003f0f06 	br	401b1a0 <__alt_mem_onchip_memory2_0+0xfc019f00>
 401b564:	1c44b03a 	or	r2,r3,r17
 401b568:	8000251e 	bne	r16,zero,401b600 <__subdf3+0x66c>
 401b56c:	1000661e 	bne	r2,zero,401b708 <__subdf3+0x774>
 401b570:	2990b03a 	or	r8,r5,r6
 401b574:	40009626 	beq	r8,zero,401b7d0 <__subdf3+0x83c>
 401b578:	2807883a 	mov	r3,r5
 401b57c:	3023883a 	mov	r17,r6
 401b580:	3825883a 	mov	r18,r7
 401b584:	003ea406 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b588:	127ff804 	addi	r9,r2,-32
 401b58c:	01000804 	movi	r4,32
 401b590:	2a52d83a 	srl	r9,r5,r9
 401b594:	11008c26 	beq	r2,r4,401b7c8 <__subdf3+0x834>
 401b598:	01001004 	movi	r4,64
 401b59c:	2085c83a 	sub	r2,r4,r2
 401b5a0:	2884983a 	sll	r2,r5,r2
 401b5a4:	118cb03a 	or	r6,r2,r6
 401b5a8:	300cc03a 	cmpne	r6,r6,zero
 401b5ac:	4992b03a 	or	r9,r9,r6
 401b5b0:	0005883a 	mov	r2,zero
 401b5b4:	003f1206 	br	401b200 <__alt_mem_onchip_memory2_0+0xfc019f60>
 401b5b8:	0101ffc4 	movi	r4,2047
 401b5bc:	493f9c1e 	bne	r9,r4,401b430 <__alt_mem_onchip_memory2_0+0xfc01a190>
 401b5c0:	2807883a 	mov	r3,r5
 401b5c4:	3023883a 	mov	r17,r6
 401b5c8:	4821883a 	mov	r16,r9
 401b5cc:	3825883a 	mov	r18,r7
 401b5d0:	003e9106 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b5d4:	80001f1e 	bne	r16,zero,401b654 <__subdf3+0x6c0>
 401b5d8:	1c48b03a 	or	r4,r3,r17
 401b5dc:	20005a26 	beq	r4,zero,401b748 <__subdf3+0x7b4>
 401b5e0:	0084303a 	nor	r2,zero,r2
 401b5e4:	1000561e 	bne	r2,zero,401b740 <__subdf3+0x7ac>
 401b5e8:	89a3883a 	add	r17,r17,r6
 401b5ec:	1945883a 	add	r2,r3,r5
 401b5f0:	898d803a 	cmpltu	r6,r17,r6
 401b5f4:	3087883a 	add	r3,r6,r2
 401b5f8:	4821883a 	mov	r16,r9
 401b5fc:	003f0506 	br	401b214 <__alt_mem_onchip_memory2_0+0xfc019f74>
 401b600:	10002b1e 	bne	r2,zero,401b6b0 <__subdf3+0x71c>
 401b604:	2984b03a 	or	r2,r5,r6
 401b608:	10008026 	beq	r2,zero,401b80c <__subdf3+0x878>
 401b60c:	2807883a 	mov	r3,r5
 401b610:	3023883a 	mov	r17,r6
 401b614:	3825883a 	mov	r18,r7
 401b618:	0401ffc4 	movi	r16,2047
 401b61c:	003e7e06 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b620:	3809883a 	mov	r4,r7
 401b624:	0011883a 	mov	r8,zero
 401b628:	0005883a 	mov	r2,zero
 401b62c:	003ee306 	br	401b1bc <__alt_mem_onchip_memory2_0+0xfc019f1c>
 401b630:	1c62b03a 	or	r17,r3,r17
 401b634:	8822c03a 	cmpne	r17,r17,zero
 401b638:	0005883a 	mov	r2,zero
 401b63c:	003f8906 	br	401b464 <__alt_mem_onchip_memory2_0+0xfc01a1c4>
 401b640:	3809883a 	mov	r4,r7
 401b644:	4821883a 	mov	r16,r9
 401b648:	0011883a 	mov	r8,zero
 401b64c:	0005883a 	mov	r2,zero
 401b650:	003eda06 	br	401b1bc <__alt_mem_onchip_memory2_0+0xfc019f1c>
 401b654:	0101ffc4 	movi	r4,2047
 401b658:	49003b26 	beq	r9,r4,401b748 <__subdf3+0x7b4>
 401b65c:	0085c83a 	sub	r2,zero,r2
 401b660:	18c02034 	orhi	r3,r3,128
 401b664:	01000e04 	movi	r4,56
 401b668:	20806e16 	blt	r4,r2,401b824 <__subdf3+0x890>
 401b66c:	010007c4 	movi	r4,31
 401b670:	20807716 	blt	r4,r2,401b850 <__subdf3+0x8bc>
 401b674:	01000804 	movi	r4,32
 401b678:	2089c83a 	sub	r4,r4,r2
 401b67c:	1914983a 	sll	r10,r3,r4
 401b680:	8890d83a 	srl	r8,r17,r2
 401b684:	8908983a 	sll	r4,r17,r4
 401b688:	1884d83a 	srl	r2,r3,r2
 401b68c:	5222b03a 	or	r17,r10,r8
 401b690:	2006c03a 	cmpne	r3,r4,zero
 401b694:	88e2b03a 	or	r17,r17,r3
 401b698:	89a3883a 	add	r17,r17,r6
 401b69c:	1145883a 	add	r2,r2,r5
 401b6a0:	898d803a 	cmpltu	r6,r17,r6
 401b6a4:	3087883a 	add	r3,r6,r2
 401b6a8:	4821883a 	mov	r16,r9
 401b6ac:	003ed906 	br	401b214 <__alt_mem_onchip_memory2_0+0xfc019f74>
 401b6b0:	2984b03a 	or	r2,r5,r6
 401b6b4:	10004226 	beq	r2,zero,401b7c0 <__subdf3+0x82c>
 401b6b8:	1808d0fa 	srli	r4,r3,3
 401b6bc:	8822d0fa 	srli	r17,r17,3
 401b6c0:	1806977a 	slli	r3,r3,29
 401b6c4:	2080022c 	andhi	r2,r4,8
 401b6c8:	1c62b03a 	or	r17,r3,r17
 401b6cc:	10000826 	beq	r2,zero,401b6f0 <__subdf3+0x75c>
 401b6d0:	2812d0fa 	srli	r9,r5,3
 401b6d4:	4880022c 	andhi	r2,r9,8
 401b6d8:	1000051e 	bne	r2,zero,401b6f0 <__subdf3+0x75c>
 401b6dc:	300cd0fa 	srli	r6,r6,3
 401b6e0:	2804977a 	slli	r2,r5,29
 401b6e4:	4809883a 	mov	r4,r9
 401b6e8:	3825883a 	mov	r18,r7
 401b6ec:	11a2b03a 	or	r17,r2,r6
 401b6f0:	8806d77a 	srli	r3,r17,29
 401b6f4:	200890fa 	slli	r4,r4,3
 401b6f8:	882290fa 	slli	r17,r17,3
 401b6fc:	0401ffc4 	movi	r16,2047
 401b700:	1906b03a 	or	r3,r3,r4
 401b704:	003e4406 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b708:	2984b03a 	or	r2,r5,r6
 401b70c:	103e4226 	beq	r2,zero,401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b710:	8989c83a 	sub	r4,r17,r6
 401b714:	8911803a 	cmpltu	r8,r17,r4
 401b718:	1945c83a 	sub	r2,r3,r5
 401b71c:	1205c83a 	sub	r2,r2,r8
 401b720:	1200202c 	andhi	r8,r2,128
 401b724:	403e9a26 	beq	r8,zero,401b190 <__alt_mem_onchip_memory2_0+0xfc019ef0>
 401b728:	3463c83a 	sub	r17,r6,r17
 401b72c:	28c5c83a 	sub	r2,r5,r3
 401b730:	344d803a 	cmpltu	r6,r6,r17
 401b734:	1187c83a 	sub	r3,r2,r6
 401b738:	3825883a 	mov	r18,r7
 401b73c:	003e3606 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b740:	0101ffc4 	movi	r4,2047
 401b744:	493fc71e 	bne	r9,r4,401b664 <__alt_mem_onchip_memory2_0+0xfc01a3c4>
 401b748:	2807883a 	mov	r3,r5
 401b74c:	3023883a 	mov	r17,r6
 401b750:	4821883a 	mov	r16,r9
 401b754:	003e3006 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b758:	10003626 	beq	r2,zero,401b834 <__subdf3+0x8a0>
 401b75c:	2984b03a 	or	r2,r5,r6
 401b760:	10001726 	beq	r2,zero,401b7c0 <__subdf3+0x82c>
 401b764:	1808d0fa 	srli	r4,r3,3
 401b768:	8822d0fa 	srli	r17,r17,3
 401b76c:	1806977a 	slli	r3,r3,29
 401b770:	2080022c 	andhi	r2,r4,8
 401b774:	1c62b03a 	or	r17,r3,r17
 401b778:	10000726 	beq	r2,zero,401b798 <__subdf3+0x804>
 401b77c:	2812d0fa 	srli	r9,r5,3
 401b780:	4880022c 	andhi	r2,r9,8
 401b784:	1000041e 	bne	r2,zero,401b798 <__subdf3+0x804>
 401b788:	300cd0fa 	srli	r6,r6,3
 401b78c:	2804977a 	slli	r2,r5,29
 401b790:	4809883a 	mov	r4,r9
 401b794:	11a2b03a 	or	r17,r2,r6
 401b798:	8806d77a 	srli	r3,r17,29
 401b79c:	200890fa 	slli	r4,r4,3
 401b7a0:	882290fa 	slli	r17,r17,3
 401b7a4:	3825883a 	mov	r18,r7
 401b7a8:	1906b03a 	or	r3,r3,r4
 401b7ac:	0401ffc4 	movi	r16,2047
 401b7b0:	003e1906 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b7b4:	000b883a 	mov	r5,zero
 401b7b8:	0005883a 	mov	r2,zero
 401b7bc:	003e2e06 	br	401b078 <__alt_mem_onchip_memory2_0+0xfc019dd8>
 401b7c0:	0401ffc4 	movi	r16,2047
 401b7c4:	003e1406 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b7c8:	0005883a 	mov	r2,zero
 401b7cc:	003f7506 	br	401b5a4 <__alt_mem_onchip_memory2_0+0xfc01a304>
 401b7d0:	0005883a 	mov	r2,zero
 401b7d4:	0009883a 	mov	r4,zero
 401b7d8:	003e7806 	br	401b1bc <__alt_mem_onchip_memory2_0+0xfc019f1c>
 401b7dc:	123ff804 	addi	r8,r2,-32
 401b7e0:	01000804 	movi	r4,32
 401b7e4:	1a10d83a 	srl	r8,r3,r8
 401b7e8:	11002526 	beq	r2,r4,401b880 <__subdf3+0x8ec>
 401b7ec:	01001004 	movi	r4,64
 401b7f0:	2085c83a 	sub	r2,r4,r2
 401b7f4:	1884983a 	sll	r2,r3,r2
 401b7f8:	1444b03a 	or	r2,r2,r17
 401b7fc:	1004c03a 	cmpne	r2,r2,zero
 401b800:	40a2b03a 	or	r17,r8,r2
 401b804:	0005883a 	mov	r2,zero
 401b808:	003f1606 	br	401b464 <__alt_mem_onchip_memory2_0+0xfc01a1c4>
 401b80c:	02000434 	movhi	r8,16
 401b810:	0009883a 	mov	r4,zero
 401b814:	423fffc4 	addi	r8,r8,-1
 401b818:	00bfffc4 	movi	r2,-1
 401b81c:	0401ffc4 	movi	r16,2047
 401b820:	003e6606 	br	401b1bc <__alt_mem_onchip_memory2_0+0xfc019f1c>
 401b824:	1c62b03a 	or	r17,r3,r17
 401b828:	8822c03a 	cmpne	r17,r17,zero
 401b82c:	0005883a 	mov	r2,zero
 401b830:	003f9906 	br	401b698 <__alt_mem_onchip_memory2_0+0xfc01a3f8>
 401b834:	2807883a 	mov	r3,r5
 401b838:	3023883a 	mov	r17,r6
 401b83c:	0401ffc4 	movi	r16,2047
 401b840:	003df506 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b844:	2807883a 	mov	r3,r5
 401b848:	3023883a 	mov	r17,r6
 401b84c:	003df206 	br	401b018 <__alt_mem_onchip_memory2_0+0xfc019d78>
 401b850:	123ff804 	addi	r8,r2,-32
 401b854:	01000804 	movi	r4,32
 401b858:	1a10d83a 	srl	r8,r3,r8
 401b85c:	11000a26 	beq	r2,r4,401b888 <__subdf3+0x8f4>
 401b860:	01001004 	movi	r4,64
 401b864:	2085c83a 	sub	r2,r4,r2
 401b868:	1884983a 	sll	r2,r3,r2
 401b86c:	1444b03a 	or	r2,r2,r17
 401b870:	1004c03a 	cmpne	r2,r2,zero
 401b874:	40a2b03a 	or	r17,r8,r2
 401b878:	0005883a 	mov	r2,zero
 401b87c:	003f8606 	br	401b698 <__alt_mem_onchip_memory2_0+0xfc01a3f8>
 401b880:	0005883a 	mov	r2,zero
 401b884:	003fdc06 	br	401b7f8 <__alt_mem_onchip_memory2_0+0xfc01a558>
 401b888:	0005883a 	mov	r2,zero
 401b88c:	003ff706 	br	401b86c <__alt_mem_onchip_memory2_0+0xfc01a5cc>

0401b890 <__fixdfsi>:
 401b890:	280cd53a 	srli	r6,r5,20
 401b894:	00c00434 	movhi	r3,16
 401b898:	18ffffc4 	addi	r3,r3,-1
 401b89c:	3181ffcc 	andi	r6,r6,2047
 401b8a0:	01c0ff84 	movi	r7,1022
 401b8a4:	28c6703a 	and	r3,r5,r3
 401b8a8:	280ad7fa 	srli	r5,r5,31
 401b8ac:	3980120e 	bge	r7,r6,401b8f8 <__fixdfsi+0x68>
 401b8b0:	00810744 	movi	r2,1053
 401b8b4:	11800c16 	blt	r2,r6,401b8e8 <__fixdfsi+0x58>
 401b8b8:	00810cc4 	movi	r2,1075
 401b8bc:	1185c83a 	sub	r2,r2,r6
 401b8c0:	01c007c4 	movi	r7,31
 401b8c4:	18c00434 	orhi	r3,r3,16
 401b8c8:	38800d16 	blt	r7,r2,401b900 <__fixdfsi+0x70>
 401b8cc:	31befb44 	addi	r6,r6,-1043
 401b8d0:	2084d83a 	srl	r2,r4,r2
 401b8d4:	1986983a 	sll	r3,r3,r6
 401b8d8:	1884b03a 	or	r2,r3,r2
 401b8dc:	28000726 	beq	r5,zero,401b8fc <__fixdfsi+0x6c>
 401b8e0:	0085c83a 	sub	r2,zero,r2
 401b8e4:	f800283a 	ret
 401b8e8:	00a00034 	movhi	r2,32768
 401b8ec:	10bfffc4 	addi	r2,r2,-1
 401b8f0:	2885883a 	add	r2,r5,r2
 401b8f4:	f800283a 	ret
 401b8f8:	0005883a 	mov	r2,zero
 401b8fc:	f800283a 	ret
 401b900:	008104c4 	movi	r2,1043
 401b904:	1185c83a 	sub	r2,r2,r6
 401b908:	1884d83a 	srl	r2,r3,r2
 401b90c:	003ff306 	br	401b8dc <__alt_mem_onchip_memory2_0+0xfc01a63c>

0401b910 <__floatsidf>:
 401b910:	defffd04 	addi	sp,sp,-12
 401b914:	dfc00215 	stw	ra,8(sp)
 401b918:	dc400115 	stw	r17,4(sp)
 401b91c:	dc000015 	stw	r16,0(sp)
 401b920:	20002b26 	beq	r4,zero,401b9d0 <__floatsidf+0xc0>
 401b924:	2023883a 	mov	r17,r4
 401b928:	2020d7fa 	srli	r16,r4,31
 401b92c:	20002d16 	blt	r4,zero,401b9e4 <__floatsidf+0xd4>
 401b930:	8809883a 	mov	r4,r17
 401b934:	400e8100 	call	400e810 <__clzsi2>
 401b938:	01410784 	movi	r5,1054
 401b93c:	288bc83a 	sub	r5,r5,r2
 401b940:	01010cc4 	movi	r4,1075
 401b944:	2149c83a 	sub	r4,r4,r5
 401b948:	00c007c4 	movi	r3,31
 401b94c:	1900160e 	bge	r3,r4,401b9a8 <__floatsidf+0x98>
 401b950:	00c104c4 	movi	r3,1043
 401b954:	1947c83a 	sub	r3,r3,r5
 401b958:	88c6983a 	sll	r3,r17,r3
 401b95c:	00800434 	movhi	r2,16
 401b960:	10bfffc4 	addi	r2,r2,-1
 401b964:	1886703a 	and	r3,r3,r2
 401b968:	2941ffcc 	andi	r5,r5,2047
 401b96c:	800d883a 	mov	r6,r16
 401b970:	0005883a 	mov	r2,zero
 401b974:	280a953a 	slli	r5,r5,20
 401b978:	31803fcc 	andi	r6,r6,255
 401b97c:	01000434 	movhi	r4,16
 401b980:	300c97fa 	slli	r6,r6,31
 401b984:	213fffc4 	addi	r4,r4,-1
 401b988:	1906703a 	and	r3,r3,r4
 401b98c:	1946b03a 	or	r3,r3,r5
 401b990:	1986b03a 	or	r3,r3,r6
 401b994:	dfc00217 	ldw	ra,8(sp)
 401b998:	dc400117 	ldw	r17,4(sp)
 401b99c:	dc000017 	ldw	r16,0(sp)
 401b9a0:	dec00304 	addi	sp,sp,12
 401b9a4:	f800283a 	ret
 401b9a8:	00c002c4 	movi	r3,11
 401b9ac:	1887c83a 	sub	r3,r3,r2
 401b9b0:	88c6d83a 	srl	r3,r17,r3
 401b9b4:	8904983a 	sll	r2,r17,r4
 401b9b8:	01000434 	movhi	r4,16
 401b9bc:	213fffc4 	addi	r4,r4,-1
 401b9c0:	2941ffcc 	andi	r5,r5,2047
 401b9c4:	1906703a 	and	r3,r3,r4
 401b9c8:	800d883a 	mov	r6,r16
 401b9cc:	003fe906 	br	401b974 <__alt_mem_onchip_memory2_0+0xfc01a6d4>
 401b9d0:	000d883a 	mov	r6,zero
 401b9d4:	000b883a 	mov	r5,zero
 401b9d8:	0007883a 	mov	r3,zero
 401b9dc:	0005883a 	mov	r2,zero
 401b9e0:	003fe406 	br	401b974 <__alt_mem_onchip_memory2_0+0xfc01a6d4>
 401b9e4:	0123c83a 	sub	r17,zero,r4
 401b9e8:	003fd106 	br	401b930 <__alt_mem_onchip_memory2_0+0xfc01a690>

0401b9ec <__floatunsidf>:
 401b9ec:	defffe04 	addi	sp,sp,-8
 401b9f0:	dc000015 	stw	r16,0(sp)
 401b9f4:	dfc00115 	stw	ra,4(sp)
 401b9f8:	2021883a 	mov	r16,r4
 401b9fc:	20002226 	beq	r4,zero,401ba88 <__floatunsidf+0x9c>
 401ba00:	400e8100 	call	400e810 <__clzsi2>
 401ba04:	01010784 	movi	r4,1054
 401ba08:	2089c83a 	sub	r4,r4,r2
 401ba0c:	01810cc4 	movi	r6,1075
 401ba10:	310dc83a 	sub	r6,r6,r4
 401ba14:	00c007c4 	movi	r3,31
 401ba18:	1980120e 	bge	r3,r6,401ba64 <__floatunsidf+0x78>
 401ba1c:	00c104c4 	movi	r3,1043
 401ba20:	1907c83a 	sub	r3,r3,r4
 401ba24:	80ca983a 	sll	r5,r16,r3
 401ba28:	00800434 	movhi	r2,16
 401ba2c:	10bfffc4 	addi	r2,r2,-1
 401ba30:	2101ffcc 	andi	r4,r4,2047
 401ba34:	0021883a 	mov	r16,zero
 401ba38:	288a703a 	and	r5,r5,r2
 401ba3c:	2008953a 	slli	r4,r4,20
 401ba40:	00c00434 	movhi	r3,16
 401ba44:	18ffffc4 	addi	r3,r3,-1
 401ba48:	28c6703a 	and	r3,r5,r3
 401ba4c:	8005883a 	mov	r2,r16
 401ba50:	1906b03a 	or	r3,r3,r4
 401ba54:	dfc00117 	ldw	ra,4(sp)
 401ba58:	dc000017 	ldw	r16,0(sp)
 401ba5c:	dec00204 	addi	sp,sp,8
 401ba60:	f800283a 	ret
 401ba64:	00c002c4 	movi	r3,11
 401ba68:	188bc83a 	sub	r5,r3,r2
 401ba6c:	814ad83a 	srl	r5,r16,r5
 401ba70:	00c00434 	movhi	r3,16
 401ba74:	18ffffc4 	addi	r3,r3,-1
 401ba78:	81a0983a 	sll	r16,r16,r6
 401ba7c:	2101ffcc 	andi	r4,r4,2047
 401ba80:	28ca703a 	and	r5,r5,r3
 401ba84:	003fed06 	br	401ba3c <__alt_mem_onchip_memory2_0+0xfc01a79c>
 401ba88:	0009883a 	mov	r4,zero
 401ba8c:	000b883a 	mov	r5,zero
 401ba90:	003fea06 	br	401ba3c <__alt_mem_onchip_memory2_0+0xfc01a79c>

0401ba94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401ba94:	defffe04 	addi	sp,sp,-8
 401ba98:	dfc00115 	stw	ra,4(sp)
 401ba9c:	df000015 	stw	fp,0(sp)
 401baa0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401baa4:	d0a5b717 	ldw	r2,-26916(gp)
 401baa8:	10000326 	beq	r2,zero,401bab8 <alt_get_errno+0x24>
 401baac:	d0a5b717 	ldw	r2,-26916(gp)
 401bab0:	103ee83a 	callr	r2
 401bab4:	00000106 	br	401babc <alt_get_errno+0x28>
 401bab8:	d0b23f04 	addi	r2,gp,-14084
}
 401babc:	e037883a 	mov	sp,fp
 401bac0:	dfc00117 	ldw	ra,4(sp)
 401bac4:	df000017 	ldw	fp,0(sp)
 401bac8:	dec00204 	addi	sp,sp,8
 401bacc:	f800283a 	ret

0401bad0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 401bad0:	defffb04 	addi	sp,sp,-20
 401bad4:	dfc00415 	stw	ra,16(sp)
 401bad8:	df000315 	stw	fp,12(sp)
 401badc:	df000304 	addi	fp,sp,12
 401bae0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 401bae4:	e0bfff17 	ldw	r2,-4(fp)
 401bae8:	10000816 	blt	r2,zero,401bb0c <close+0x3c>
 401baec:	01400304 	movi	r5,12
 401baf0:	e13fff17 	ldw	r4,-4(fp)
 401baf4:	400d7980 	call	400d798 <__mulsi3>
 401baf8:	1007883a 	mov	r3,r2
 401bafc:	008100f4 	movhi	r2,1027
 401bb00:	10a07004 	addi	r2,r2,-32320
 401bb04:	1885883a 	add	r2,r3,r2
 401bb08:	00000106 	br	401bb10 <close+0x40>
 401bb0c:	0005883a 	mov	r2,zero
 401bb10:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 401bb14:	e0bffd17 	ldw	r2,-12(fp)
 401bb18:	10001926 	beq	r2,zero,401bb80 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 401bb1c:	e0bffd17 	ldw	r2,-12(fp)
 401bb20:	10800017 	ldw	r2,0(r2)
 401bb24:	10800417 	ldw	r2,16(r2)
 401bb28:	10000626 	beq	r2,zero,401bb44 <close+0x74>
 401bb2c:	e0bffd17 	ldw	r2,-12(fp)
 401bb30:	10800017 	ldw	r2,0(r2)
 401bb34:	10800417 	ldw	r2,16(r2)
 401bb38:	e13ffd17 	ldw	r4,-12(fp)
 401bb3c:	103ee83a 	callr	r2
 401bb40:	00000106 	br	401bb48 <close+0x78>
 401bb44:	0005883a 	mov	r2,zero
 401bb48:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 401bb4c:	e13fff17 	ldw	r4,-4(fp)
 401bb50:	401c3780 	call	401c378 <alt_release_fd>
    if (rval < 0)
 401bb54:	e0bffe17 	ldw	r2,-8(fp)
 401bb58:	1000070e 	bge	r2,zero,401bb78 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 401bb5c:	401ba940 	call	401ba94 <alt_get_errno>
 401bb60:	1007883a 	mov	r3,r2
 401bb64:	e0bffe17 	ldw	r2,-8(fp)
 401bb68:	0085c83a 	sub	r2,zero,r2
 401bb6c:	18800015 	stw	r2,0(r3)
      return -1;
 401bb70:	00bfffc4 	movi	r2,-1
 401bb74:	00000706 	br	401bb94 <close+0xc4>
    }
    return 0;
 401bb78:	0005883a 	mov	r2,zero
 401bb7c:	00000506 	br	401bb94 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401bb80:	401ba940 	call	401ba94 <alt_get_errno>
 401bb84:	1007883a 	mov	r3,r2
 401bb88:	00801444 	movi	r2,81
 401bb8c:	18800015 	stw	r2,0(r3)
    return -1;
 401bb90:	00bfffc4 	movi	r2,-1
  }
}
 401bb94:	e037883a 	mov	sp,fp
 401bb98:	dfc00117 	ldw	ra,4(sp)
 401bb9c:	df000017 	ldw	fp,0(sp)
 401bba0:	dec00204 	addi	sp,sp,8
 401bba4:	f800283a 	ret

0401bba8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 401bba8:	defffc04 	addi	sp,sp,-16
 401bbac:	df000315 	stw	fp,12(sp)
 401bbb0:	df000304 	addi	fp,sp,12
 401bbb4:	e13ffd15 	stw	r4,-12(fp)
 401bbb8:	e17ffe15 	stw	r5,-8(fp)
 401bbbc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 401bbc0:	e0bfff17 	ldw	r2,-4(fp)
}
 401bbc4:	e037883a 	mov	sp,fp
 401bbc8:	df000017 	ldw	fp,0(sp)
 401bbcc:	dec00104 	addi	sp,sp,4
 401bbd0:	f800283a 	ret

0401bbd4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401bbd4:	defffd04 	addi	sp,sp,-12
 401bbd8:	df000215 	stw	fp,8(sp)
 401bbdc:	df000204 	addi	fp,sp,8
 401bbe0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401bbe4:	0001883a 	nop
 401bbe8:	e0bfff17 	ldw	r2,-4(fp)
 401bbec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 401bbf0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401bbf4:	10000226 	beq	r2,zero,401bc00 <_exit+0x2c>
    ALT_SIM_FAIL();
 401bbf8:	002af070 	cmpltui	zero,zero,43969
 401bbfc:	00000106 	br	401bc04 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 401bc00:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401bc04:	003fff06 	br	401bc04 <__alt_mem_onchip_memory2_0+0xfc01a964>

0401bc08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401bc08:	defffe04 	addi	sp,sp,-8
 401bc0c:	dfc00115 	stw	ra,4(sp)
 401bc10:	df000015 	stw	fp,0(sp)
 401bc14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401bc18:	d0a5b717 	ldw	r2,-26916(gp)
 401bc1c:	10000326 	beq	r2,zero,401bc2c <alt_get_errno+0x24>
 401bc20:	d0a5b717 	ldw	r2,-26916(gp)
 401bc24:	103ee83a 	callr	r2
 401bc28:	00000106 	br	401bc30 <alt_get_errno+0x28>
 401bc2c:	d0b23f04 	addi	r2,gp,-14084
}
 401bc30:	e037883a 	mov	sp,fp
 401bc34:	dfc00117 	ldw	ra,4(sp)
 401bc38:	df000017 	ldw	fp,0(sp)
 401bc3c:	dec00204 	addi	sp,sp,8
 401bc40:	f800283a 	ret

0401bc44 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 401bc44:	defffb04 	addi	sp,sp,-20
 401bc48:	dfc00415 	stw	ra,16(sp)
 401bc4c:	df000315 	stw	fp,12(sp)
 401bc50:	df000304 	addi	fp,sp,12
 401bc54:	e13ffe15 	stw	r4,-8(fp)
 401bc58:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401bc5c:	e0bffe17 	ldw	r2,-8(fp)
 401bc60:	10000816 	blt	r2,zero,401bc84 <fstat+0x40>
 401bc64:	01400304 	movi	r5,12
 401bc68:	e13ffe17 	ldw	r4,-8(fp)
 401bc6c:	400d7980 	call	400d798 <__mulsi3>
 401bc70:	1007883a 	mov	r3,r2
 401bc74:	008100f4 	movhi	r2,1027
 401bc78:	10a07004 	addi	r2,r2,-32320
 401bc7c:	1885883a 	add	r2,r3,r2
 401bc80:	00000106 	br	401bc88 <fstat+0x44>
 401bc84:	0005883a 	mov	r2,zero
 401bc88:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 401bc8c:	e0bffd17 	ldw	r2,-12(fp)
 401bc90:	10001026 	beq	r2,zero,401bcd4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 401bc94:	e0bffd17 	ldw	r2,-12(fp)
 401bc98:	10800017 	ldw	r2,0(r2)
 401bc9c:	10800817 	ldw	r2,32(r2)
 401bca0:	10000726 	beq	r2,zero,401bcc0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 401bca4:	e0bffd17 	ldw	r2,-12(fp)
 401bca8:	10800017 	ldw	r2,0(r2)
 401bcac:	10800817 	ldw	r2,32(r2)
 401bcb0:	e17fff17 	ldw	r5,-4(fp)
 401bcb4:	e13ffd17 	ldw	r4,-12(fp)
 401bcb8:	103ee83a 	callr	r2
 401bcbc:	00000a06 	br	401bce8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 401bcc0:	e0bfff17 	ldw	r2,-4(fp)
 401bcc4:	00c80004 	movi	r3,8192
 401bcc8:	10c00115 	stw	r3,4(r2)
      return 0;
 401bccc:	0005883a 	mov	r2,zero
 401bcd0:	00000506 	br	401bce8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401bcd4:	401bc080 	call	401bc08 <alt_get_errno>
 401bcd8:	1007883a 	mov	r3,r2
 401bcdc:	00801444 	movi	r2,81
 401bce0:	18800015 	stw	r2,0(r3)
    return -1;
 401bce4:	00bfffc4 	movi	r2,-1
  }
}
 401bce8:	e037883a 	mov	sp,fp
 401bcec:	dfc00117 	ldw	ra,4(sp)
 401bcf0:	df000017 	ldw	fp,0(sp)
 401bcf4:	dec00204 	addi	sp,sp,8
 401bcf8:	f800283a 	ret

0401bcfc <getpid>:
 401bcfc:	deffff04 	addi	sp,sp,-4
 401bd00:	df000015 	stw	fp,0(sp)
 401bd04:	d839883a 	mov	fp,sp
 401bd08:	0005883a 	mov	r2,zero
 401bd0c:	e037883a 	mov	sp,fp
 401bd10:	df000017 	ldw	fp,0(sp)
 401bd14:	dec00104 	addi	sp,sp,4
 401bd18:	f800283a 	ret

0401bd1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401bd1c:	defffe04 	addi	sp,sp,-8
 401bd20:	dfc00115 	stw	ra,4(sp)
 401bd24:	df000015 	stw	fp,0(sp)
 401bd28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401bd2c:	d0a5b717 	ldw	r2,-26916(gp)
 401bd30:	10000326 	beq	r2,zero,401bd40 <alt_get_errno+0x24>
 401bd34:	d0a5b717 	ldw	r2,-26916(gp)
 401bd38:	103ee83a 	callr	r2
 401bd3c:	00000106 	br	401bd44 <alt_get_errno+0x28>
 401bd40:	d0b23f04 	addi	r2,gp,-14084
}
 401bd44:	e037883a 	mov	sp,fp
 401bd48:	dfc00117 	ldw	ra,4(sp)
 401bd4c:	df000017 	ldw	fp,0(sp)
 401bd50:	dec00204 	addi	sp,sp,8
 401bd54:	f800283a 	ret

0401bd58 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 401bd58:	deffed04 	addi	sp,sp,-76
 401bd5c:	dfc01215 	stw	ra,72(sp)
 401bd60:	df001115 	stw	fp,68(sp)
 401bd64:	df001104 	addi	fp,sp,68
 401bd68:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401bd6c:	e0bfff17 	ldw	r2,-4(fp)
 401bd70:	10000816 	blt	r2,zero,401bd94 <isatty+0x3c>
 401bd74:	01400304 	movi	r5,12
 401bd78:	e13fff17 	ldw	r4,-4(fp)
 401bd7c:	400d7980 	call	400d798 <__mulsi3>
 401bd80:	1007883a 	mov	r3,r2
 401bd84:	008100f4 	movhi	r2,1027
 401bd88:	10a07004 	addi	r2,r2,-32320
 401bd8c:	1885883a 	add	r2,r3,r2
 401bd90:	00000106 	br	401bd98 <isatty+0x40>
 401bd94:	0005883a 	mov	r2,zero
 401bd98:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 401bd9c:	e0bfef17 	ldw	r2,-68(fp)
 401bda0:	10000e26 	beq	r2,zero,401bddc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 401bda4:	e0bfef17 	ldw	r2,-68(fp)
 401bda8:	10800017 	ldw	r2,0(r2)
 401bdac:	10800817 	ldw	r2,32(r2)
 401bdb0:	1000021e 	bne	r2,zero,401bdbc <isatty+0x64>
    {
      return 1;
 401bdb4:	00800044 	movi	r2,1
 401bdb8:	00000d06 	br	401bdf0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 401bdbc:	e0bff004 	addi	r2,fp,-64
 401bdc0:	100b883a 	mov	r5,r2
 401bdc4:	e13fff17 	ldw	r4,-4(fp)
 401bdc8:	401bc440 	call	401bc44 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 401bdcc:	e0bff117 	ldw	r2,-60(fp)
 401bdd0:	10880020 	cmpeqi	r2,r2,8192
 401bdd4:	10803fcc 	andi	r2,r2,255
 401bdd8:	00000506 	br	401bdf0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401bddc:	401bd1c0 	call	401bd1c <alt_get_errno>
 401bde0:	1007883a 	mov	r3,r2
 401bde4:	00801444 	movi	r2,81
 401bde8:	18800015 	stw	r2,0(r3)
    return 0;
 401bdec:	0005883a 	mov	r2,zero
  }
}
 401bdf0:	e037883a 	mov	sp,fp
 401bdf4:	dfc00117 	ldw	ra,4(sp)
 401bdf8:	df000017 	ldw	fp,0(sp)
 401bdfc:	dec00204 	addi	sp,sp,8
 401be00:	f800283a 	ret

0401be04 <alt_get_errno>:
 401be04:	defffe04 	addi	sp,sp,-8
 401be08:	dfc00115 	stw	ra,4(sp)
 401be0c:	df000015 	stw	fp,0(sp)
 401be10:	d839883a 	mov	fp,sp
 401be14:	d0a5b717 	ldw	r2,-26916(gp)
 401be18:	10000326 	beq	r2,zero,401be28 <alt_get_errno+0x24>
 401be1c:	d0a5b717 	ldw	r2,-26916(gp)
 401be20:	103ee83a 	callr	r2
 401be24:	00000106 	br	401be2c <alt_get_errno+0x28>
 401be28:	d0b23f04 	addi	r2,gp,-14084
 401be2c:	e037883a 	mov	sp,fp
 401be30:	dfc00117 	ldw	ra,4(sp)
 401be34:	df000017 	ldw	fp,0(sp)
 401be38:	dec00204 	addi	sp,sp,8
 401be3c:	f800283a 	ret

0401be40 <kill>:
 401be40:	defffb04 	addi	sp,sp,-20
 401be44:	dfc00415 	stw	ra,16(sp)
 401be48:	df000315 	stw	fp,12(sp)
 401be4c:	df000304 	addi	fp,sp,12
 401be50:	e13ffe15 	stw	r4,-8(fp)
 401be54:	e17fff15 	stw	r5,-4(fp)
 401be58:	e03ffd15 	stw	zero,-12(fp)
 401be5c:	e0bffe17 	ldw	r2,-8(fp)
 401be60:	00802f16 	blt	zero,r2,401bf20 <kill+0xe0>
 401be64:	e0bfff17 	ldw	r2,-4(fp)
 401be68:	10800828 	cmpgeui	r2,r2,32
 401be6c:	1000291e 	bne	r2,zero,401bf14 <kill+0xd4>
 401be70:	e0bfff17 	ldw	r2,-4(fp)
 401be74:	100690ba 	slli	r3,r2,2
 401be78:	008100b4 	movhi	r2,1026
 401be7c:	10afa304 	addi	r2,r2,-16756
 401be80:	1885883a 	add	r2,r3,r2
 401be84:	10800017 	ldw	r2,0(r2)
 401be88:	1000683a 	jmp	r2
 401be8c:	0401bf34 	movhi	r16,1788
 401be90:	0401bf14 	movui	r16,1788
 401be94:	0401bf14 	movui	r16,1788
 401be98:	0401bf0c 	andi	r16,zero,1788
 401be9c:	0401bf0c 	andi	r16,zero,1788
 401bea0:	0401bf0c 	andi	r16,zero,1788
 401bea4:	0401bf0c 	andi	r16,zero,1788
 401bea8:	0401bf14 	movui	r16,1788
 401beac:	0401bf0c 	andi	r16,zero,1788
 401beb0:	0401bf0c 	andi	r16,zero,1788
 401beb4:	0401bf0c 	andi	r16,zero,1788
 401beb8:	0401bf0c 	andi	r16,zero,1788
 401bebc:	0401bf0c 	andi	r16,zero,1788
 401bec0:	0401bf0c 	andi	r16,zero,1788
 401bec4:	0401bf0c 	andi	r16,zero,1788
 401bec8:	0401bf0c 	andi	r16,zero,1788
 401becc:	0401bf34 	movhi	r16,1788
 401bed0:	0401bf14 	movui	r16,1788
 401bed4:	0401bf14 	movui	r16,1788
 401bed8:	0401bf14 	movui	r16,1788
 401bedc:	0401bf34 	movhi	r16,1788
 401bee0:	0401bf14 	movui	r16,1788
 401bee4:	0401bf14 	movui	r16,1788
 401bee8:	0401bf0c 	andi	r16,zero,1788
 401beec:	0401bf0c 	andi	r16,zero,1788
 401bef0:	0401bf0c 	andi	r16,zero,1788
 401bef4:	0401bf0c 	andi	r16,zero,1788
 401bef8:	0401bf0c 	andi	r16,zero,1788
 401befc:	0401bf14 	movui	r16,1788
 401bf00:	0401bf14 	movui	r16,1788
 401bf04:	0401bf0c 	andi	r16,zero,1788
 401bf08:	0401bf0c 	andi	r16,zero,1788
 401bf0c:	0009883a 	mov	r4,zero
 401bf10:	401bbd40 	call	401bbd4 <_exit>
 401bf14:	00800584 	movi	r2,22
 401bf18:	e0bffd15 	stw	r2,-12(fp)
 401bf1c:	00000606 	br	401bf38 <kill+0xf8>
 401bf20:	e0bffe17 	ldw	r2,-8(fp)
 401bf24:	0080040e 	bge	zero,r2,401bf38 <kill+0xf8>
 401bf28:	008000c4 	movi	r2,3
 401bf2c:	e0bffd15 	stw	r2,-12(fp)
 401bf30:	00000106 	br	401bf38 <kill+0xf8>
 401bf34:	0001883a 	nop
 401bf38:	e0bffd17 	ldw	r2,-12(fp)
 401bf3c:	10000626 	beq	r2,zero,401bf58 <kill+0x118>
 401bf40:	401be040 	call	401be04 <alt_get_errno>
 401bf44:	1007883a 	mov	r3,r2
 401bf48:	e0bffd17 	ldw	r2,-12(fp)
 401bf4c:	18800015 	stw	r2,0(r3)
 401bf50:	00bfffc4 	movi	r2,-1
 401bf54:	00000106 	br	401bf5c <kill+0x11c>
 401bf58:	0005883a 	mov	r2,zero
 401bf5c:	e037883a 	mov	sp,fp
 401bf60:	dfc00117 	ldw	ra,4(sp)
 401bf64:	df000017 	ldw	fp,0(sp)
 401bf68:	dec00204 	addi	sp,sp,8
 401bf6c:	f800283a 	ret

0401bf70 <alt_load_section>:
 401bf70:	defffc04 	addi	sp,sp,-16
 401bf74:	df000315 	stw	fp,12(sp)
 401bf78:	df000304 	addi	fp,sp,12
 401bf7c:	e13ffd15 	stw	r4,-12(fp)
 401bf80:	e17ffe15 	stw	r5,-8(fp)
 401bf84:	e1bfff15 	stw	r6,-4(fp)
 401bf88:	e0fffe17 	ldw	r3,-8(fp)
 401bf8c:	e0bffd17 	ldw	r2,-12(fp)
 401bf90:	18800c26 	beq	r3,r2,401bfc4 <alt_load_section+0x54>
 401bf94:	00000806 	br	401bfb8 <alt_load_section+0x48>
 401bf98:	e0bffe17 	ldw	r2,-8(fp)
 401bf9c:	10c00104 	addi	r3,r2,4
 401bfa0:	e0fffe15 	stw	r3,-8(fp)
 401bfa4:	e0fffd17 	ldw	r3,-12(fp)
 401bfa8:	19000104 	addi	r4,r3,4
 401bfac:	e13ffd15 	stw	r4,-12(fp)
 401bfb0:	18c00017 	ldw	r3,0(r3)
 401bfb4:	10c00015 	stw	r3,0(r2)
 401bfb8:	e0fffe17 	ldw	r3,-8(fp)
 401bfbc:	e0bfff17 	ldw	r2,-4(fp)
 401bfc0:	18bff51e 	bne	r3,r2,401bf98 <__alt_mem_onchip_memory2_0+0xfc01acf8>
 401bfc4:	0001883a 	nop
 401bfc8:	e037883a 	mov	sp,fp
 401bfcc:	df000017 	ldw	fp,0(sp)
 401bfd0:	dec00104 	addi	sp,sp,4
 401bfd4:	f800283a 	ret

0401bfd8 <alt_load>:
 401bfd8:	defffe04 	addi	sp,sp,-8
 401bfdc:	dfc00115 	stw	ra,4(sp)
 401bfe0:	df000015 	stw	fp,0(sp)
 401bfe4:	d839883a 	mov	fp,sp
 401bfe8:	018100f4 	movhi	r6,1027
 401bfec:	31aab404 	addi	r6,r6,-21808
 401bff0:	014100b4 	movhi	r5,1026
 401bff4:	295e3d04 	addi	r5,r5,30964
 401bff8:	010100f4 	movhi	r4,1027
 401bffc:	212ab404 	addi	r4,r4,-21808
 401c000:	401bf700 	call	401bf70 <alt_load_section>
 401c004:	01810034 	movhi	r6,1024
 401c008:	31808c04 	addi	r6,r6,560
 401c00c:	01410034 	movhi	r5,1024
 401c010:	29400804 	addi	r5,r5,32
 401c014:	01010034 	movhi	r4,1024
 401c018:	21000804 	addi	r4,r4,32
 401c01c:	401bf700 	call	401bf70 <alt_load_section>
 401c020:	018100b4 	movhi	r6,1026
 401c024:	319e3d04 	addi	r6,r6,30964
 401c028:	014100b4 	movhi	r5,1026
 401c02c:	2941b304 	addi	r5,r5,1740
 401c030:	010100b4 	movhi	r4,1026
 401c034:	2101b304 	addi	r4,r4,1740
 401c038:	401bf700 	call	401bf70 <alt_load_section>
 401c03c:	401f3a00 	call	401f3a0 <alt_dcache_flush_all>
 401c040:	401f5f00 	call	401f5f0 <alt_icache_flush_all>
 401c044:	0001883a 	nop
 401c048:	e037883a 	mov	sp,fp
 401c04c:	dfc00117 	ldw	ra,4(sp)
 401c050:	df000017 	ldw	fp,0(sp)
 401c054:	dec00204 	addi	sp,sp,8
 401c058:	f800283a 	ret

0401c05c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c05c:	defffe04 	addi	sp,sp,-8
 401c060:	dfc00115 	stw	ra,4(sp)
 401c064:	df000015 	stw	fp,0(sp)
 401c068:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c06c:	d0a5b717 	ldw	r2,-26916(gp)
 401c070:	10000326 	beq	r2,zero,401c080 <alt_get_errno+0x24>
 401c074:	d0a5b717 	ldw	r2,-26916(gp)
 401c078:	103ee83a 	callr	r2
 401c07c:	00000106 	br	401c084 <alt_get_errno+0x28>
 401c080:	d0b23f04 	addi	r2,gp,-14084
}
 401c084:	e037883a 	mov	sp,fp
 401c088:	dfc00117 	ldw	ra,4(sp)
 401c08c:	df000017 	ldw	fp,0(sp)
 401c090:	dec00204 	addi	sp,sp,8
 401c094:	f800283a 	ret

0401c098 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 401c098:	defff904 	addi	sp,sp,-28
 401c09c:	dfc00615 	stw	ra,24(sp)
 401c0a0:	df000515 	stw	fp,20(sp)
 401c0a4:	df000504 	addi	fp,sp,20
 401c0a8:	e13ffd15 	stw	r4,-12(fp)
 401c0ac:	e17ffe15 	stw	r5,-8(fp)
 401c0b0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 401c0b4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401c0b8:	e0bffd17 	ldw	r2,-12(fp)
 401c0bc:	10000816 	blt	r2,zero,401c0e0 <lseek+0x48>
 401c0c0:	01400304 	movi	r5,12
 401c0c4:	e13ffd17 	ldw	r4,-12(fp)
 401c0c8:	400d7980 	call	400d798 <__mulsi3>
 401c0cc:	1007883a 	mov	r3,r2
 401c0d0:	008100f4 	movhi	r2,1027
 401c0d4:	10a07004 	addi	r2,r2,-32320
 401c0d8:	1885883a 	add	r2,r3,r2
 401c0dc:	00000106 	br	401c0e4 <lseek+0x4c>
 401c0e0:	0005883a 	mov	r2,zero
 401c0e4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 401c0e8:	e0bffc17 	ldw	r2,-16(fp)
 401c0ec:	10001026 	beq	r2,zero,401c130 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 401c0f0:	e0bffc17 	ldw	r2,-16(fp)
 401c0f4:	10800017 	ldw	r2,0(r2)
 401c0f8:	10800717 	ldw	r2,28(r2)
 401c0fc:	10000926 	beq	r2,zero,401c124 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 401c100:	e0bffc17 	ldw	r2,-16(fp)
 401c104:	10800017 	ldw	r2,0(r2)
 401c108:	10800717 	ldw	r2,28(r2)
 401c10c:	e1bfff17 	ldw	r6,-4(fp)
 401c110:	e17ffe17 	ldw	r5,-8(fp)
 401c114:	e13ffc17 	ldw	r4,-16(fp)
 401c118:	103ee83a 	callr	r2
 401c11c:	e0bffb15 	stw	r2,-20(fp)
 401c120:	00000506 	br	401c138 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 401c124:	00bfde84 	movi	r2,-134
 401c128:	e0bffb15 	stw	r2,-20(fp)
 401c12c:	00000206 	br	401c138 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 401c130:	00bfebc4 	movi	r2,-81
 401c134:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 401c138:	e0bffb17 	ldw	r2,-20(fp)
 401c13c:	1000070e 	bge	r2,zero,401c15c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 401c140:	401c05c0 	call	401c05c <alt_get_errno>
 401c144:	1007883a 	mov	r3,r2
 401c148:	e0bffb17 	ldw	r2,-20(fp)
 401c14c:	0085c83a 	sub	r2,zero,r2
 401c150:	18800015 	stw	r2,0(r3)
    rc = -1;
 401c154:	00bfffc4 	movi	r2,-1
 401c158:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 401c15c:	e0bffb17 	ldw	r2,-20(fp)
}
 401c160:	e037883a 	mov	sp,fp
 401c164:	dfc00117 	ldw	ra,4(sp)
 401c168:	df000017 	ldw	fp,0(sp)
 401c16c:	dec00204 	addi	sp,sp,8
 401c170:	f800283a 	ret

0401c174 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 401c174:	defffd04 	addi	sp,sp,-12
 401c178:	dfc00215 	stw	ra,8(sp)
 401c17c:	df000115 	stw	fp,4(sp)
 401c180:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 401c184:	0009883a 	mov	r4,zero
 401c188:	401c7000 	call	401c700 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 401c18c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 401c190:	401c7380 	call	401c738 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 401c194:	018100b4 	movhi	r6,1026
 401c198:	319e2804 	addi	r6,r6,30880
 401c19c:	014100b4 	movhi	r5,1026
 401c1a0:	295e2804 	addi	r5,r5,30880
 401c1a4:	010100b4 	movhi	r4,1026
 401c1a8:	211e2804 	addi	r4,r4,30880
 401c1ac:	401f9940 	call	401f994 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 401c1b0:	401f4a00 	call	401f4a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 401c1b4:	010100b4 	movhi	r4,1026
 401c1b8:	213d4004 	addi	r4,r4,-2816
 401c1bc:	402032c0 	call	402032c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 401c1c0:	d0b24317 	ldw	r2,-14068(gp)
 401c1c4:	d0f24417 	ldw	r3,-14064(gp)
 401c1c8:	d1324517 	ldw	r4,-14060(gp)
 401c1cc:	200d883a 	mov	r6,r4
 401c1d0:	180b883a 	mov	r5,r3
 401c1d4:	1009883a 	mov	r4,r2
 401c1d8:	4009dbc0 	call	4009dbc <main>
 401c1dc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 401c1e0:	01000044 	movi	r4,1
 401c1e4:	401bad00 	call	401bad0 <close>
  exit (result);
 401c1e8:	e13fff17 	ldw	r4,-4(fp)
 401c1ec:	40203400 	call	4020340 <exit>

0401c1f0 <__malloc_lock>:
 401c1f0:	defffe04 	addi	sp,sp,-8
 401c1f4:	df000115 	stw	fp,4(sp)
 401c1f8:	df000104 	addi	fp,sp,4
 401c1fc:	e13fff15 	stw	r4,-4(fp)
 401c200:	0001883a 	nop
 401c204:	e037883a 	mov	sp,fp
 401c208:	df000017 	ldw	fp,0(sp)
 401c20c:	dec00104 	addi	sp,sp,4
 401c210:	f800283a 	ret

0401c214 <__malloc_unlock>:
 401c214:	defffe04 	addi	sp,sp,-8
 401c218:	df000115 	stw	fp,4(sp)
 401c21c:	df000104 	addi	fp,sp,4
 401c220:	e13fff15 	stw	r4,-4(fp)
 401c224:	0001883a 	nop
 401c228:	e037883a 	mov	sp,fp
 401c22c:	df000017 	ldw	fp,0(sp)
 401c230:	dec00104 	addi	sp,sp,4
 401c234:	f800283a 	ret

0401c238 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c238:	defffe04 	addi	sp,sp,-8
 401c23c:	dfc00115 	stw	ra,4(sp)
 401c240:	df000015 	stw	fp,0(sp)
 401c244:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c248:	d0a5b717 	ldw	r2,-26916(gp)
 401c24c:	10000326 	beq	r2,zero,401c25c <alt_get_errno+0x24>
 401c250:	d0a5b717 	ldw	r2,-26916(gp)
 401c254:	103ee83a 	callr	r2
 401c258:	00000106 	br	401c260 <alt_get_errno+0x28>
 401c25c:	d0b23f04 	addi	r2,gp,-14084
}
 401c260:	e037883a 	mov	sp,fp
 401c264:	dfc00117 	ldw	ra,4(sp)
 401c268:	df000017 	ldw	fp,0(sp)
 401c26c:	dec00204 	addi	sp,sp,8
 401c270:	f800283a 	ret

0401c274 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 401c274:	defff904 	addi	sp,sp,-28
 401c278:	dfc00615 	stw	ra,24(sp)
 401c27c:	df000515 	stw	fp,20(sp)
 401c280:	df000504 	addi	fp,sp,20
 401c284:	e13ffd15 	stw	r4,-12(fp)
 401c288:	e17ffe15 	stw	r5,-8(fp)
 401c28c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401c290:	e0bffd17 	ldw	r2,-12(fp)
 401c294:	10000816 	blt	r2,zero,401c2b8 <read+0x44>
 401c298:	01400304 	movi	r5,12
 401c29c:	e13ffd17 	ldw	r4,-12(fp)
 401c2a0:	400d7980 	call	400d798 <__mulsi3>
 401c2a4:	1007883a 	mov	r3,r2
 401c2a8:	008100f4 	movhi	r2,1027
 401c2ac:	10a07004 	addi	r2,r2,-32320
 401c2b0:	1885883a 	add	r2,r3,r2
 401c2b4:	00000106 	br	401c2bc <read+0x48>
 401c2b8:	0005883a 	mov	r2,zero
 401c2bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401c2c0:	e0bffb17 	ldw	r2,-20(fp)
 401c2c4:	10002226 	beq	r2,zero,401c350 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401c2c8:	e0bffb17 	ldw	r2,-20(fp)
 401c2cc:	10800217 	ldw	r2,8(r2)
 401c2d0:	108000cc 	andi	r2,r2,3
 401c2d4:	10800060 	cmpeqi	r2,r2,1
 401c2d8:	1000181e 	bne	r2,zero,401c33c <read+0xc8>
        (fd->dev->read))
 401c2dc:	e0bffb17 	ldw	r2,-20(fp)
 401c2e0:	10800017 	ldw	r2,0(r2)
 401c2e4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401c2e8:	10001426 	beq	r2,zero,401c33c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 401c2ec:	e0bffb17 	ldw	r2,-20(fp)
 401c2f0:	10800017 	ldw	r2,0(r2)
 401c2f4:	10800517 	ldw	r2,20(r2)
 401c2f8:	e0ffff17 	ldw	r3,-4(fp)
 401c2fc:	180d883a 	mov	r6,r3
 401c300:	e17ffe17 	ldw	r5,-8(fp)
 401c304:	e13ffb17 	ldw	r4,-20(fp)
 401c308:	103ee83a 	callr	r2
 401c30c:	e0bffc15 	stw	r2,-16(fp)
 401c310:	e0bffc17 	ldw	r2,-16(fp)
 401c314:	1000070e 	bge	r2,zero,401c334 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 401c318:	401c2380 	call	401c238 <alt_get_errno>
 401c31c:	1007883a 	mov	r3,r2
 401c320:	e0bffc17 	ldw	r2,-16(fp)
 401c324:	0085c83a 	sub	r2,zero,r2
 401c328:	18800015 	stw	r2,0(r3)
          return -1;
 401c32c:	00bfffc4 	movi	r2,-1
 401c330:	00000c06 	br	401c364 <read+0xf0>
        }
        return rval;
 401c334:	e0bffc17 	ldw	r2,-16(fp)
 401c338:	00000a06 	br	401c364 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 401c33c:	401c2380 	call	401c238 <alt_get_errno>
 401c340:	1007883a 	mov	r3,r2
 401c344:	00800344 	movi	r2,13
 401c348:	18800015 	stw	r2,0(r3)
 401c34c:	00000406 	br	401c360 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 401c350:	401c2380 	call	401c238 <alt_get_errno>
 401c354:	1007883a 	mov	r3,r2
 401c358:	00801444 	movi	r2,81
 401c35c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401c360:	00bfffc4 	movi	r2,-1
}
 401c364:	e037883a 	mov	sp,fp
 401c368:	dfc00117 	ldw	ra,4(sp)
 401c36c:	df000017 	ldw	fp,0(sp)
 401c370:	dec00204 	addi	sp,sp,8
 401c374:	f800283a 	ret

0401c378 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 401c378:	defffc04 	addi	sp,sp,-16
 401c37c:	dfc00315 	stw	ra,12(sp)
 401c380:	df000215 	stw	fp,8(sp)
 401c384:	dc000115 	stw	r16,4(sp)
 401c388:	df000204 	addi	fp,sp,8
 401c38c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 401c390:	e0bffe17 	ldw	r2,-8(fp)
 401c394:	108000d0 	cmplti	r2,r2,3
 401c398:	1000111e 	bne	r2,zero,401c3e0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 401c39c:	040100f4 	movhi	r16,1027
 401c3a0:	84207004 	addi	r16,r16,-32320
 401c3a4:	e0bffe17 	ldw	r2,-8(fp)
 401c3a8:	01400304 	movi	r5,12
 401c3ac:	1009883a 	mov	r4,r2
 401c3b0:	400d7980 	call	400d798 <__mulsi3>
 401c3b4:	8085883a 	add	r2,r16,r2
 401c3b8:	10800204 	addi	r2,r2,8
 401c3bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 401c3c0:	040100f4 	movhi	r16,1027
 401c3c4:	84207004 	addi	r16,r16,-32320
 401c3c8:	e0bffe17 	ldw	r2,-8(fp)
 401c3cc:	01400304 	movi	r5,12
 401c3d0:	1009883a 	mov	r4,r2
 401c3d4:	400d7980 	call	400d798 <__mulsi3>
 401c3d8:	8085883a 	add	r2,r16,r2
 401c3dc:	10000015 	stw	zero,0(r2)
  }
}
 401c3e0:	0001883a 	nop
 401c3e4:	e6ffff04 	addi	sp,fp,-4
 401c3e8:	dfc00217 	ldw	ra,8(sp)
 401c3ec:	df000117 	ldw	fp,4(sp)
 401c3f0:	dc000017 	ldw	r16,0(sp)
 401c3f4:	dec00304 	addi	sp,sp,12
 401c3f8:	f800283a 	ret

0401c3fc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 401c3fc:	defff904 	addi	sp,sp,-28
 401c400:	df000615 	stw	fp,24(sp)
 401c404:	df000604 	addi	fp,sp,24
 401c408:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c40c:	0005303a 	rdctl	r2,status
 401c410:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c414:	e0fffe17 	ldw	r3,-8(fp)
 401c418:	00bfff84 	movi	r2,-2
 401c41c:	1884703a 	and	r2,r3,r2
 401c420:	1001703a 	wrctl	status,r2
  
  return context;
 401c424:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 401c428:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 401c42c:	d0a5b817 	ldw	r2,-26912(gp)
 401c430:	10c000c4 	addi	r3,r2,3
 401c434:	00bfff04 	movi	r2,-4
 401c438:	1884703a 	and	r2,r3,r2
 401c43c:	d0a5b815 	stw	r2,-26912(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 401c440:	d0e5b817 	ldw	r3,-26912(gp)
 401c444:	e0bfff17 	ldw	r2,-4(fp)
 401c448:	1887883a 	add	r3,r3,r2
 401c44c:	00820034 	movhi	r2,2048
 401c450:	10800004 	addi	r2,r2,0
 401c454:	10c0062e 	bgeu	r2,r3,401c470 <sbrk+0x74>
 401c458:	e0bffb17 	ldw	r2,-20(fp)
 401c45c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c460:	e0bffa17 	ldw	r2,-24(fp)
 401c464:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 401c468:	00bfffc4 	movi	r2,-1
 401c46c:	00000b06 	br	401c49c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 401c470:	d0a5b817 	ldw	r2,-26912(gp)
 401c474:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 401c478:	d0e5b817 	ldw	r3,-26912(gp)
 401c47c:	e0bfff17 	ldw	r2,-4(fp)
 401c480:	1885883a 	add	r2,r3,r2
 401c484:	d0a5b815 	stw	r2,-26912(gp)
 401c488:	e0bffb17 	ldw	r2,-20(fp)
 401c48c:	e0bffc15 	stw	r2,-16(fp)
 401c490:	e0bffc17 	ldw	r2,-16(fp)
 401c494:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 401c498:	e0bffd17 	ldw	r2,-12(fp)
} 
 401c49c:	e037883a 	mov	sp,fp
 401c4a0:	df000017 	ldw	fp,0(sp)
 401c4a4:	dec00104 	addi	sp,sp,4
 401c4a8:	f800283a 	ret

0401c4ac <alt_get_errno>:
 401c4ac:	defffe04 	addi	sp,sp,-8
 401c4b0:	dfc00115 	stw	ra,4(sp)
 401c4b4:	df000015 	stw	fp,0(sp)
 401c4b8:	d839883a 	mov	fp,sp
 401c4bc:	d0a5b717 	ldw	r2,-26916(gp)
 401c4c0:	10000326 	beq	r2,zero,401c4d0 <alt_get_errno+0x24>
 401c4c4:	d0a5b717 	ldw	r2,-26916(gp)
 401c4c8:	103ee83a 	callr	r2
 401c4cc:	00000106 	br	401c4d4 <alt_get_errno+0x28>
 401c4d0:	d0b23f04 	addi	r2,gp,-14084
 401c4d4:	e037883a 	mov	sp,fp
 401c4d8:	dfc00117 	ldw	ra,4(sp)
 401c4dc:	df000017 	ldw	fp,0(sp)
 401c4e0:	dec00204 	addi	sp,sp,8
 401c4e4:	f800283a 	ret

0401c4e8 <times>:
 401c4e8:	defffc04 	addi	sp,sp,-16
 401c4ec:	dfc00315 	stw	ra,12(sp)
 401c4f0:	df000215 	stw	fp,8(sp)
 401c4f4:	df000204 	addi	fp,sp,8
 401c4f8:	e13fff15 	stw	r4,-4(fp)
 401c4fc:	d0b24817 	ldw	r2,-14048(gp)
 401c500:	e0bffe15 	stw	r2,-8(fp)
 401c504:	d0b24717 	ldw	r2,-14052(gp)
 401c508:	1000061e 	bne	r2,zero,401c524 <times+0x3c>
 401c50c:	401c4ac0 	call	401c4ac <alt_get_errno>
 401c510:	1007883a 	mov	r3,r2
 401c514:	00801604 	movi	r2,88
 401c518:	18800015 	stw	r2,0(r3)
 401c51c:	0005883a 	mov	r2,zero
 401c520:	00000a06 	br	401c54c <times+0x64>
 401c524:	e0bfff17 	ldw	r2,-4(fp)
 401c528:	10000015 	stw	zero,0(r2)
 401c52c:	e0bfff17 	ldw	r2,-4(fp)
 401c530:	e0fffe17 	ldw	r3,-8(fp)
 401c534:	10c00115 	stw	r3,4(r2)
 401c538:	e0bfff17 	ldw	r2,-4(fp)
 401c53c:	10000215 	stw	zero,8(r2)
 401c540:	e0bfff17 	ldw	r2,-4(fp)
 401c544:	10000315 	stw	zero,12(r2)
 401c548:	e0bffe17 	ldw	r2,-8(fp)
 401c54c:	e037883a 	mov	sp,fp
 401c550:	dfc00117 	ldw	ra,4(sp)
 401c554:	df000017 	ldw	fp,0(sp)
 401c558:	dec00204 	addi	sp,sp,8
 401c55c:	f800283a 	ret

0401c560 <usleep>:
 401c560:	defffd04 	addi	sp,sp,-12
 401c564:	dfc00215 	stw	ra,8(sp)
 401c568:	df000115 	stw	fp,4(sp)
 401c56c:	df000104 	addi	fp,sp,4
 401c570:	e13fff15 	stw	r4,-4(fp)
 401c574:	e13fff17 	ldw	r4,-4(fp)
 401c578:	401f2480 	call	401f248 <alt_busy_sleep>
 401c57c:	e037883a 	mov	sp,fp
 401c580:	dfc00117 	ldw	ra,4(sp)
 401c584:	df000017 	ldw	fp,0(sp)
 401c588:	dec00204 	addi	sp,sp,8
 401c58c:	f800283a 	ret

0401c590 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c590:	defffe04 	addi	sp,sp,-8
 401c594:	dfc00115 	stw	ra,4(sp)
 401c598:	df000015 	stw	fp,0(sp)
 401c59c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c5a0:	d0a5b717 	ldw	r2,-26916(gp)
 401c5a4:	10000326 	beq	r2,zero,401c5b4 <alt_get_errno+0x24>
 401c5a8:	d0a5b717 	ldw	r2,-26916(gp)
 401c5ac:	103ee83a 	callr	r2
 401c5b0:	00000106 	br	401c5b8 <alt_get_errno+0x28>
 401c5b4:	d0b23f04 	addi	r2,gp,-14084
}
 401c5b8:	e037883a 	mov	sp,fp
 401c5bc:	dfc00117 	ldw	ra,4(sp)
 401c5c0:	df000017 	ldw	fp,0(sp)
 401c5c4:	dec00204 	addi	sp,sp,8
 401c5c8:	f800283a 	ret

0401c5cc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 401c5cc:	defff904 	addi	sp,sp,-28
 401c5d0:	dfc00615 	stw	ra,24(sp)
 401c5d4:	df000515 	stw	fp,20(sp)
 401c5d8:	df000504 	addi	fp,sp,20
 401c5dc:	e13ffd15 	stw	r4,-12(fp)
 401c5e0:	e17ffe15 	stw	r5,-8(fp)
 401c5e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401c5e8:	e0bffd17 	ldw	r2,-12(fp)
 401c5ec:	10000816 	blt	r2,zero,401c610 <write+0x44>
 401c5f0:	01400304 	movi	r5,12
 401c5f4:	e13ffd17 	ldw	r4,-12(fp)
 401c5f8:	400d7980 	call	400d798 <__mulsi3>
 401c5fc:	1007883a 	mov	r3,r2
 401c600:	008100f4 	movhi	r2,1027
 401c604:	10a07004 	addi	r2,r2,-32320
 401c608:	1885883a 	add	r2,r3,r2
 401c60c:	00000106 	br	401c614 <write+0x48>
 401c610:	0005883a 	mov	r2,zero
 401c614:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401c618:	e0bffb17 	ldw	r2,-20(fp)
 401c61c:	10002126 	beq	r2,zero,401c6a4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 401c620:	e0bffb17 	ldw	r2,-20(fp)
 401c624:	10800217 	ldw	r2,8(r2)
 401c628:	108000cc 	andi	r2,r2,3
 401c62c:	10001826 	beq	r2,zero,401c690 <write+0xc4>
 401c630:	e0bffb17 	ldw	r2,-20(fp)
 401c634:	10800017 	ldw	r2,0(r2)
 401c638:	10800617 	ldw	r2,24(r2)
 401c63c:	10001426 	beq	r2,zero,401c690 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 401c640:	e0bffb17 	ldw	r2,-20(fp)
 401c644:	10800017 	ldw	r2,0(r2)
 401c648:	10800617 	ldw	r2,24(r2)
 401c64c:	e0ffff17 	ldw	r3,-4(fp)
 401c650:	180d883a 	mov	r6,r3
 401c654:	e17ffe17 	ldw	r5,-8(fp)
 401c658:	e13ffb17 	ldw	r4,-20(fp)
 401c65c:	103ee83a 	callr	r2
 401c660:	e0bffc15 	stw	r2,-16(fp)
 401c664:	e0bffc17 	ldw	r2,-16(fp)
 401c668:	1000070e 	bge	r2,zero,401c688 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 401c66c:	401c5900 	call	401c590 <alt_get_errno>
 401c670:	1007883a 	mov	r3,r2
 401c674:	e0bffc17 	ldw	r2,-16(fp)
 401c678:	0085c83a 	sub	r2,zero,r2
 401c67c:	18800015 	stw	r2,0(r3)
        return -1;
 401c680:	00bfffc4 	movi	r2,-1
 401c684:	00000c06 	br	401c6b8 <write+0xec>
      }
      return rval;
 401c688:	e0bffc17 	ldw	r2,-16(fp)
 401c68c:	00000a06 	br	401c6b8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 401c690:	401c5900 	call	401c590 <alt_get_errno>
 401c694:	1007883a 	mov	r3,r2
 401c698:	00800344 	movi	r2,13
 401c69c:	18800015 	stw	r2,0(r3)
 401c6a0:	00000406 	br	401c6b4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 401c6a4:	401c5900 	call	401c590 <alt_get_errno>
 401c6a8:	1007883a 	mov	r3,r2
 401c6ac:	00801444 	movi	r2,81
 401c6b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401c6b4:	00bfffc4 	movi	r2,-1
}
 401c6b8:	e037883a 	mov	sp,fp
 401c6bc:	dfc00117 	ldw	ra,4(sp)
 401c6c0:	df000017 	ldw	fp,0(sp)
 401c6c4:	dec00204 	addi	sp,sp,8
 401c6c8:	f800283a 	ret

0401c6cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 401c6cc:	defffd04 	addi	sp,sp,-12
 401c6d0:	dfc00215 	stw	ra,8(sp)
 401c6d4:	df000115 	stw	fp,4(sp)
 401c6d8:	df000104 	addi	fp,sp,4
 401c6dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 401c6e0:	d165b404 	addi	r5,gp,-26928
 401c6e4:	e13fff17 	ldw	r4,-4(fp)
 401c6e8:	401f3fc0 	call	401f3fc <alt_dev_llist_insert>
}
 401c6ec:	e037883a 	mov	sp,fp
 401c6f0:	dfc00117 	ldw	ra,4(sp)
 401c6f4:	df000017 	ldw	fp,0(sp)
 401c6f8:	dec00204 	addi	sp,sp,8
 401c6fc:	f800283a 	ret

0401c700 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 401c700:	defffd04 	addi	sp,sp,-12
 401c704:	dfc00215 	stw	ra,8(sp)
 401c708:	df000115 	stw	fp,4(sp)
 401c70c:	df000104 	addi	fp,sp,4
 401c710:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 401c714:	40200a00 	call	40200a0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 401c718:	00800044 	movi	r2,1
 401c71c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 401c720:	0001883a 	nop
 401c724:	e037883a 	mov	sp,fp
 401c728:	dfc00117 	ldw	ra,4(sp)
 401c72c:	df000017 	ldw	fp,0(sp)
 401c730:	dec00204 	addi	sp,sp,8
 401c734:	f800283a 	ret

0401c738 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 401c738:	defffe04 	addi	sp,sp,-8
 401c73c:	dfc00115 	stw	ra,4(sp)
 401c740:	df000015 	stw	fp,0(sp)
 401c744:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 401c748:	01c0fa04 	movi	r7,1000
 401c74c:	01800084 	movi	r6,2
 401c750:	000b883a 	mov	r5,zero
 401c754:	01020034 	movhi	r4,2048
 401c758:	21041004 	addi	r4,r4,4160
 401c75c:	401f0a00 	call	401f0a0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 401c760:	010100f4 	movhi	r4,1027
 401c764:	2120d004 	addi	r4,r4,-31936
 401c768:	401c9fc0 	call	401c9fc <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 401c76c:	01800044 	movi	r6,1
 401c770:	000b883a 	mov	r5,zero
 401c774:	010100f4 	movhi	r4,1027
 401c778:	2120e804 	addi	r4,r4,-31840
 401c77c:	401e5280 	call	401e528 <altera_avalon_jtag_uart_init>
 401c780:	010100f4 	movhi	r4,1027
 401c784:	2120de04 	addi	r4,r4,-31880
 401c788:	401c6cc0 	call	401c6cc <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 401c78c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 401c790:	0001883a 	nop
}
 401c794:	0001883a 	nop
 401c798:	e037883a 	mov	sp,fp
 401c79c:	dfc00117 	ldw	ra,4(sp)
 401c7a0:	df000017 	ldw	fp,0(sp)
 401c7a4:	dec00204 	addi	sp,sp,8
 401c7a8:	f800283a 	ret

0401c7ac <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 401c7ac:	defff904 	addi	sp,sp,-28
 401c7b0:	dfc00615 	stw	ra,24(sp)
 401c7b4:	df000515 	stw	fp,20(sp)
 401c7b8:	df000504 	addi	fp,sp,20
 401c7bc:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 401c7c0:	008000b4 	movhi	r2,2
 401c7c4:	10a1a804 	addi	r2,r2,-31072
 401c7c8:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 401c7cc:	e0bfff17 	ldw	r2,-4(fp)
 401c7d0:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 401c7d4:	e0bffc17 	ldw	r2,-16(fp)
 401c7d8:	10800717 	ldw	r2,28(r2)
 401c7dc:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 401c7e0:	e0bffd17 	ldw	r2,-12(fp)
 401c7e4:	10800217 	ldw	r2,8(r2)
 401c7e8:	10800098 	cmpnei	r2,r2,2
 401c7ec:	1000251e 	bne	r2,zero,401c884 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 401c7f0:	e0bffd17 	ldw	r2,-12(fp)
 401c7f4:	10c00017 	ldw	r3,0(r2)
 401c7f8:	e0bffd17 	ldw	r2,-12(fp)
 401c7fc:	10800117 	ldw	r2,4(r2)
 401c800:	e13ffe04 	addi	r4,fp,-8
 401c804:	200f883a 	mov	r7,r4
 401c808:	100d883a 	mov	r6,r2
 401c80c:	180b883a 	mov	r5,r3
 401c810:	e13ffc17 	ldw	r4,-16(fp)
 401c814:	401cf5c0 	call	401cf5c <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 401c818:	e0bffd17 	ldw	r2,-12(fp)
 401c81c:	10c00117 	ldw	r3,4(r2)
 401c820:	e0bffe17 	ldw	r2,-8(fp)
 401c824:	1887c83a 	sub	r3,r3,r2
 401c828:	e0bffd17 	ldw	r2,-12(fp)
 401c82c:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 401c830:	e0bffd17 	ldw	r2,-12(fp)
 401c834:	10c00017 	ldw	r3,0(r2)
 401c838:	e0bffe17 	ldw	r2,-8(fp)
 401c83c:	1887883a 	add	r3,r3,r2
 401c840:	e0bffd17 	ldw	r2,-12(fp)
 401c844:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 401c848:	e0bffd17 	ldw	r2,-12(fp)
 401c84c:	10800117 	ldw	r2,4(r2)
 401c850:	10000c26 	beq	r2,zero,401c884 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401c854:	01400704 	movi	r5,28
 401c858:	e13ffc17 	ldw	r4,-16(fp)
 401c85c:	401e1140 	call	401e114 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 401c860:	01400084 	movi	r5,2
 401c864:	e13ffc17 	ldw	r4,-16(fp)
 401c868:	401e1b80 	call	401e1b8 <alt_avalon_i2c_int_enable>
 401c86c:	00000e06 	br	401c8a8 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 401c870:	e0bffb17 	ldw	r2,-20(fp)
 401c874:	10bfffc4 	addi	r2,r2,-1
 401c878:	e0bffb15 	stw	r2,-20(fp)
 401c87c:	e0bffb17 	ldw	r2,-20(fp)
 401c880:	10000426 	beq	r2,zero,401c894 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 401c884:	e13ffc17 	ldw	r4,-16(fp)
 401c888:	401cf180 	call	401cf18 <alt_avalon_i2c_is_busy>
 401c88c:	103ff81e 	bne	r2,zero,401c870 <__alt_mem_onchip_memory2_0+0xfc01b5d0>
 401c890:	00000106 	br	401c898 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 401c894:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 401c898:	e13ffc17 	ldw	r4,-16(fp)
 401c89c:	401cbc00 	call	401cbc0 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 401c8a0:	e0bffd17 	ldw	r2,-12(fp)
 401c8a4:	10000215 	stw	zero,8(r2)
}
 401c8a8:	e037883a 	mov	sp,fp
 401c8ac:	dfc00117 	ldw	ra,4(sp)
 401c8b0:	df000017 	ldw	fp,0(sp)
 401c8b4:	dec00204 	addi	sp,sp,8
 401c8b8:	f800283a 	ret

0401c8bc <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 401c8bc:	defffc04 	addi	sp,sp,-16
 401c8c0:	dfc00315 	stw	ra,12(sp)
 401c8c4:	df000215 	stw	fp,8(sp)
 401c8c8:	df000204 	addi	fp,sp,8
 401c8cc:	e13ffe15 	stw	r4,-8(fp)
 401c8d0:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 401c8d4:	e0bfff17 	ldw	r2,-4(fp)
 401c8d8:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 401c8dc:	e1ffff17 	ldw	r7,-4(fp)
 401c8e0:	000d883a 	mov	r6,zero
 401c8e4:	014100b4 	movhi	r5,1026
 401c8e8:	2971eb04 	addi	r5,r5,-14420
 401c8ec:	e13ffe17 	ldw	r4,-8(fp)
 401c8f0:	401c9a80 	call	401c9a8 <alt_avalon_i2c_register_callback>
}
 401c8f4:	0001883a 	nop
 401c8f8:	e037883a 	mov	sp,fp
 401c8fc:	dfc00117 	ldw	ra,4(sp)
 401c900:	df000017 	ldw	fp,0(sp)
 401c904:	dec00204 	addi	sp,sp,8
 401c908:	f800283a 	ret

0401c90c <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 401c90c:	defff904 	addi	sp,sp,-28
 401c910:	dfc00615 	stw	ra,24(sp)
 401c914:	df000515 	stw	fp,20(sp)
 401c918:	df000504 	addi	fp,sp,20
 401c91c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 401c920:	e0bfff17 	ldw	r2,-4(fp)
 401c924:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 401c928:	014007c4 	movi	r5,31
 401c92c:	e13ffb17 	ldw	r4,-20(fp)
 401c930:	401e1500 	call	401e150 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401c934:	01400704 	movi	r5,28
 401c938:	e13ffb17 	ldw	r4,-20(fp)
 401c93c:	401e1140 	call	401e114 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 401c940:	e0bffb17 	ldw	r2,-20(fp)
 401c944:	10800617 	ldw	r2,24(r2)
 401c948:	10001126 	beq	r2,zero,401c990 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c94c:	0005303a 	rdctl	r2,status
 401c950:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c954:	e0fffd17 	ldw	r3,-12(fp)
 401c958:	00bfff84 	movi	r2,-2
 401c95c:	1884703a 	and	r2,r3,r2
 401c960:	1001703a 	wrctl	status,r2
  
  return context;
 401c964:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 401c968:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 401c96c:	e0bffb17 	ldw	r2,-20(fp)
 401c970:	10800617 	ldw	r2,24(r2)
 401c974:	e13ffb17 	ldw	r4,-20(fp)
 401c978:	103ee83a 	callr	r2
 401c97c:	e0bffc17 	ldw	r2,-16(fp)
 401c980:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c984:	e0bffe17 	ldw	r2,-8(fp)
 401c988:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 401c98c:	0001883a 	nop
 401c990:	0001883a 	nop
}
 401c994:	e037883a 	mov	sp,fp
 401c998:	dfc00117 	ldw	ra,4(sp)
 401c99c:	df000017 	ldw	fp,0(sp)
 401c9a0:	dec00204 	addi	sp,sp,8
 401c9a4:	f800283a 	ret

0401c9a8 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 401c9a8:	defffb04 	addi	sp,sp,-20
 401c9ac:	df000415 	stw	fp,16(sp)
 401c9b0:	df000404 	addi	fp,sp,16
 401c9b4:	e13ffc15 	stw	r4,-16(fp)
 401c9b8:	e17ffd15 	stw	r5,-12(fp)
 401c9bc:	e1bffe15 	stw	r6,-8(fp)
 401c9c0:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 401c9c4:	e0bffc17 	ldw	r2,-16(fp)
 401c9c8:	e0fffd17 	ldw	r3,-12(fp)
 401c9cc:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 401c9d0:	e0bffc17 	ldw	r2,-16(fp)
 401c9d4:	e0ffff17 	ldw	r3,-4(fp)
 401c9d8:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 401c9dc:	e0bffc17 	ldw	r2,-16(fp)
 401c9e0:	e0fffe17 	ldw	r3,-8(fp)
 401c9e4:	10c00815 	stw	r3,32(r2)

    return ;
 401c9e8:	0001883a 	nop
}
 401c9ec:	e037883a 	mov	sp,fp
 401c9f0:	df000017 	ldw	fp,0(sp)
 401c9f4:	dec00104 	addi	sp,sp,4
 401c9f8:	f800283a 	ret

0401c9fc <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 401c9fc:	defff704 	addi	sp,sp,-36
 401ca00:	dfc00815 	stw	ra,32(sp)
 401ca04:	df000715 	stw	fp,28(sp)
 401ca08:	df000704 	addi	fp,sp,28
 401ca0c:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 401ca10:	e13fff17 	ldw	r4,-4(fp)
 401ca14:	401cbc00 	call	401cbc0 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 401ca18:	014007c4 	movi	r5,31
 401ca1c:	e13fff17 	ldw	r4,-4(fp)
 401ca20:	401e1500 	call	401e150 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401ca24:	01400704 	movi	r5,28
 401ca28:	e13fff17 	ldw	r4,-4(fp)
 401ca2c:	401e1140 	call	401e114 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 401ca30:	014000c4 	movi	r5,3
 401ca34:	e13fff17 	ldw	r4,-4(fp)
 401ca38:	401e35c0 	call	401e35c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 401ca3c:	014000c4 	movi	r5,3
 401ca40:	e13fff17 	ldw	r4,-4(fp)
 401ca44:	401e2ac0 	call	401e2ac <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 401ca48:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 401ca4c:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 401ca50:	e0bffb04 	addi	r2,fp,-20
 401ca54:	018000b4 	movhi	r6,2
 401ca58:	31a1a804 	addi	r6,r6,-31072
 401ca5c:	100b883a 	mov	r5,r2
 401ca60:	e13fff17 	ldw	r4,-4(fp)
 401ca64:	401ce1c0 	call	401ce1c <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 401ca68:	e0bffb04 	addi	r2,fp,-20
 401ca6c:	100b883a 	mov	r5,r2
 401ca70:	e13fff17 	ldw	r4,-4(fp)
 401ca74:	401ccbc0 	call	401ccbc <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 401ca78:	d165b904 	addi	r5,gp,-26908
 401ca7c:	e13fff17 	ldw	r4,-4(fp)
 401ca80:	401f3fc0 	call	401f3fc <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 401ca84:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 401ca88:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 401ca8c:	e0bffa17 	ldw	r2,-24(fp)
 401ca90:	10000c1e 	bne	r2,zero,401cac4 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 401ca94:	e0bfff17 	ldw	r2,-4(fp)
 401ca98:	10c00417 	ldw	r3,16(r2)
 401ca9c:	e0bfff17 	ldw	r2,-4(fp)
 401caa0:	10800517 	ldw	r2,20(r2)
 401caa4:	d8000015 	stw	zero,0(sp)
 401caa8:	e1ffff17 	ldw	r7,-4(fp)
 401caac:	018100b4 	movhi	r6,1026
 401cab0:	31b24304 	addi	r6,r6,-14068
 401cab4:	100b883a 	mov	r5,r2
 401cab8:	1809883a 	mov	r4,r3
 401cabc:	401f6100 	call	401f610 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 401cac0:	00000406 	br	401cad4 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 401cac4:	010100b4 	movhi	r4,1026
 401cac8:	211e3504 	addi	r4,r4,30932
 401cacc:	401fc940 	call	401fc94 <alt_printf>
    }

    return;
 401cad0:	0001883a 	nop

}
 401cad4:	e037883a 	mov	sp,fp
 401cad8:	dfc00117 	ldw	ra,4(sp)
 401cadc:	df000017 	ldw	fp,0(sp)
 401cae0:	dec00204 	addi	sp,sp,8
 401cae4:	f800283a 	ret

0401cae8 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 401cae8:	defffc04 	addi	sp,sp,-16
 401caec:	dfc00315 	stw	ra,12(sp)
 401caf0:	df000215 	stw	fp,8(sp)
 401caf4:	df000204 	addi	fp,sp,8
 401caf8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 401cafc:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 401cb00:	d165b904 	addi	r5,gp,-26908
 401cb04:	e13fff17 	ldw	r4,-4(fp)
 401cb08:	401f5600 	call	401f560 <alt_find_dev>
 401cb0c:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 401cb10:	e0bffe17 	ldw	r2,-8(fp)
}
 401cb14:	e037883a 	mov	sp,fp
 401cb18:	dfc00117 	ldw	ra,4(sp)
 401cb1c:	df000017 	ldw	fp,0(sp)
 401cb20:	dec00204 	addi	sp,sp,8
 401cb24:	f800283a 	ret

0401cb28 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401cb28:	defffc04 	addi	sp,sp,-16
 401cb2c:	df000315 	stw	fp,12(sp)
 401cb30:	df000304 	addi	fp,sp,12
 401cb34:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 401cb38:	e0bfff17 	ldw	r2,-4(fp)
 401cb3c:	10800717 	ldw	r2,28(r2)
 401cb40:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 401cb44:	e0bfff17 	ldw	r2,-4(fp)
 401cb48:	10800317 	ldw	r2,12(r2)
 401cb4c:	10800204 	addi	r2,r2,8
 401cb50:	10800037 	ldwio	r2,0(r2)
 401cb54:	1080004c 	andi	r2,r2,1
 401cb58:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 401cb5c:	e0bffe17 	ldw	r2,-8(fp)
 401cb60:	10000226 	beq	r2,zero,401cb6c <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 401cb64:	00bffe44 	movi	r2,-7
 401cb68:	00001106 	br	401cbb0 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 401cb6c:	e0bfff17 	ldw	r2,-4(fp)
 401cb70:	10c00617 	ldw	r3,24(r2)
 401cb74:	008100b4 	movhi	r2,1026
 401cb78:	10b1eb04 	addi	r2,r2,-14420
 401cb7c:	1880021e 	bne	r3,r2,401cb88 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 401cb80:	e0bffd17 	ldw	r2,-12(fp)
 401cb84:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 401cb88:	e0bfff17 	ldw	r2,-4(fp)
 401cb8c:	10800317 	ldw	r2,12(r2)
 401cb90:	10800204 	addi	r2,r2,8
 401cb94:	e0ffff17 	ldw	r3,-4(fp)
 401cb98:	18c00317 	ldw	r3,12(r3)
 401cb9c:	18c00204 	addi	r3,r3,8
 401cba0:	18c00037 	ldwio	r3,0(r3)
 401cba4:	18c00054 	ori	r3,r3,1
 401cba8:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 401cbac:	0005883a 	mov	r2,zero
}
 401cbb0:	e037883a 	mov	sp,fp
 401cbb4:	df000017 	ldw	fp,0(sp)
 401cbb8:	dec00104 	addi	sp,sp,4
 401cbbc:	f800283a 	ret

0401cbc0 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401cbc0:	defffe04 	addi	sp,sp,-8
 401cbc4:	df000115 	stw	fp,4(sp)
 401cbc8:	df000104 	addi	fp,sp,4
 401cbcc:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 401cbd0:	e0bfff17 	ldw	r2,-4(fp)
 401cbd4:	10800317 	ldw	r2,12(r2)
 401cbd8:	10800204 	addi	r2,r2,8
 401cbdc:	e0ffff17 	ldw	r3,-4(fp)
 401cbe0:	18c00317 	ldw	r3,12(r3)
 401cbe4:	18c00204 	addi	r3,r3,8
 401cbe8:	19000037 	ldwio	r4,0(r3)
 401cbec:	00ffff84 	movi	r3,-2
 401cbf0:	20c6703a 	and	r3,r4,r3
 401cbf4:	10c00035 	stwio	r3,0(r2)

}
 401cbf8:	0001883a 	nop
 401cbfc:	e037883a 	mov	sp,fp
 401cc00:	df000017 	ldw	fp,0(sp)
 401cc04:	dec00104 	addi	sp,sp,4
 401cc08:	f800283a 	ret

0401cc0c <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 401cc0c:	defffd04 	addi	sp,sp,-12
 401cc10:	df000215 	stw	fp,8(sp)
 401cc14:	df000204 	addi	fp,sp,8
 401cc18:	e13ffe15 	stw	r4,-8(fp)
 401cc1c:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 401cc20:	e0bffe17 	ldw	r2,-8(fp)
 401cc24:	10c00d17 	ldw	r3,52(r2)
 401cc28:	e0bfff17 	ldw	r2,-4(fp)
 401cc2c:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 401cc30:	e0bffe17 	ldw	r2,-8(fp)
 401cc34:	10800317 	ldw	r2,12(r2)
 401cc38:	10800204 	addi	r2,r2,8
 401cc3c:	10800037 	ldwio	r2,0(r2)
 401cc40:	1080008c 	andi	r2,r2,2
 401cc44:	1005d07a 	srai	r2,r2,1
 401cc48:	1007883a 	mov	r3,r2
 401cc4c:	e0bfff17 	ldw	r2,-4(fp)
 401cc50:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 401cc54:	e0bffe17 	ldw	r2,-8(fp)
 401cc58:	10800317 	ldw	r2,12(r2)
 401cc5c:	10800904 	addi	r2,r2,36
 401cc60:	10800037 	ldwio	r2,0(r2)
 401cc64:	1007883a 	mov	r3,r2
 401cc68:	e0bfff17 	ldw	r2,-4(fp)
 401cc6c:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 401cc70:	e0bffe17 	ldw	r2,-8(fp)
 401cc74:	10800317 	ldw	r2,12(r2)
 401cc78:	10800804 	addi	r2,r2,32
 401cc7c:	10800037 	ldwio	r2,0(r2)
 401cc80:	1007883a 	mov	r3,r2
 401cc84:	e0bfff17 	ldw	r2,-4(fp)
 401cc88:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 401cc8c:	e0bffe17 	ldw	r2,-8(fp)
 401cc90:	10800317 	ldw	r2,12(r2)
 401cc94:	10800a04 	addi	r2,r2,40
 401cc98:	10800037 	ldwio	r2,0(r2)
 401cc9c:	1007883a 	mov	r3,r2
 401cca0:	e0bfff17 	ldw	r2,-4(fp)
 401cca4:	10c0030d 	sth	r3,12(r2)
}
 401cca8:	0001883a 	nop
 401ccac:	e037883a 	mov	sp,fp
 401ccb0:	df000017 	ldw	fp,0(sp)
 401ccb4:	dec00104 	addi	sp,sp,4
 401ccb8:	f800283a 	ret

0401ccbc <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 401ccbc:	defffd04 	addi	sp,sp,-12
 401ccc0:	df000215 	stw	fp,8(sp)
 401ccc4:	df000204 	addi	fp,sp,8
 401ccc8:	e13ffe15 	stw	r4,-8(fp)
 401cccc:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 401ccd0:	e0bfff17 	ldw	r2,-4(fp)
 401ccd4:	10c00017 	ldw	r3,0(r2)
 401ccd8:	e0bffe17 	ldw	r2,-8(fp)
 401ccdc:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 401cce0:	e0bffe17 	ldw	r2,-8(fp)
 401cce4:	10800317 	ldw	r2,12(r2)
 401cce8:	10c00204 	addi	r3,r2,8
 401ccec:	e0bffe17 	ldw	r2,-8(fp)
 401ccf0:	10800317 	ldw	r2,12(r2)
 401ccf4:	10800204 	addi	r2,r2,8
 401ccf8:	10800037 	ldwio	r2,0(r2)
 401ccfc:	1009883a 	mov	r4,r2
 401cd00:	00bfff44 	movi	r2,-3
 401cd04:	2088703a 	and	r4,r4,r2
 401cd08:	e0bfff17 	ldw	r2,-4(fp)
 401cd0c:	10800117 	ldw	r2,4(r2)
 401cd10:	1085883a 	add	r2,r2,r2
 401cd14:	1080008c 	andi	r2,r2,2
 401cd18:	2084b03a 	or	r2,r4,r2
 401cd1c:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 401cd20:	e0bffe17 	ldw	r2,-8(fp)
 401cd24:	10800317 	ldw	r2,12(r2)
 401cd28:	10800904 	addi	r2,r2,36
 401cd2c:	e0ffff17 	ldw	r3,-4(fp)
 401cd30:	18c0020b 	ldhu	r3,8(r3)
 401cd34:	18ffffcc 	andi	r3,r3,65535
 401cd38:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 401cd3c:	e0bffe17 	ldw	r2,-8(fp)
 401cd40:	10800317 	ldw	r2,12(r2)
 401cd44:	10800804 	addi	r2,r2,32
 401cd48:	e0ffff17 	ldw	r3,-4(fp)
 401cd4c:	18c0028b 	ldhu	r3,10(r3)
 401cd50:	18ffffcc 	andi	r3,r3,65535
 401cd54:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 401cd58:	e0bffe17 	ldw	r2,-8(fp)
 401cd5c:	10800317 	ldw	r2,12(r2)
 401cd60:	10800a04 	addi	r2,r2,40
 401cd64:	e0ffff17 	ldw	r3,-4(fp)
 401cd68:	18c0030b 	ldhu	r3,12(r3)
 401cd6c:	18ffffcc 	andi	r3,r3,65535
 401cd70:	10c00035 	stwio	r3,0(r2)
}
 401cd74:	0001883a 	nop
 401cd78:	e037883a 	mov	sp,fp
 401cd7c:	df000017 	ldw	fp,0(sp)
 401cd80:	dec00104 	addi	sp,sp,4
 401cd84:	f800283a 	ret

0401cd88 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 401cd88:	defffb04 	addi	sp,sp,-20
 401cd8c:	dfc00415 	stw	ra,16(sp)
 401cd90:	df000315 	stw	fp,12(sp)
 401cd94:	df000304 	addi	fp,sp,12
 401cd98:	e13ffd15 	stw	r4,-12(fp)
 401cd9c:	e17ffe15 	stw	r5,-8(fp)
 401cda0:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 401cda4:	e0bffe17 	ldw	r2,-8(fp)
 401cda8:	1080028b 	ldhu	r2,10(r2)
 401cdac:	10bfffcc 	andi	r2,r2,65535
 401cdb0:	10000426 	beq	r2,zero,401cdc4 <alt_avalon_i2c_master_config_speed_get+0x3c>
 401cdb4:	e0bffe17 	ldw	r2,-8(fp)
 401cdb8:	1080020b 	ldhu	r2,8(r2)
 401cdbc:	10bfffcc 	andi	r2,r2,65535
 401cdc0:	1000021e 	bne	r2,zero,401cdcc <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 401cdc4:	00bfff44 	movi	r2,-3
 401cdc8:	00000f06 	br	401ce08 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 401cdcc:	e0bffd17 	ldw	r2,-12(fp)
 401cdd0:	11000c17 	ldw	r4,48(r2)
 401cdd4:	e0bffe17 	ldw	r2,-8(fp)
 401cdd8:	1080028b 	ldhu	r2,10(r2)
 401cddc:	10ffffcc 	andi	r3,r2,65535
 401cde0:	e0bffe17 	ldw	r2,-8(fp)
 401cde4:	1080020b 	ldhu	r2,8(r2)
 401cde8:	10bfffcc 	andi	r2,r2,65535
 401cdec:	1885883a 	add	r2,r3,r2
 401cdf0:	100b883a 	mov	r5,r2
 401cdf4:	400d6dc0 	call	400d6dc <__udivsi3>
 401cdf8:	1007883a 	mov	r3,r2
 401cdfc:	e0bfff17 	ldw	r2,-4(fp)
 401ce00:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 401ce04:	0005883a 	mov	r2,zero
}
 401ce08:	e037883a 	mov	sp,fp
 401ce0c:	dfc00117 	ldw	ra,4(sp)
 401ce10:	df000017 	ldw	fp,0(sp)
 401ce14:	dec00204 	addi	sp,sp,8
 401ce18:	f800283a 	ret

0401ce1c <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 401ce1c:	defff904 	addi	sp,sp,-28
 401ce20:	dfc00615 	stw	ra,24(sp)
 401ce24:	df000515 	stw	fp,20(sp)
 401ce28:	df000504 	addi	fp,sp,20
 401ce2c:	e13ffd15 	stw	r4,-12(fp)
 401ce30:	e17ffe15 	stw	r5,-8(fp)
 401ce34:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 401ce38:	e0ffff17 	ldw	r3,-4(fp)
 401ce3c:	008001b4 	movhi	r2,6
 401ce40:	1086a004 	addi	r2,r2,6784
 401ce44:	10c00436 	bltu	r2,r3,401ce58 <alt_avalon_i2c_master_config_speed_set+0x3c>
 401ce48:	e0bfff17 	ldw	r2,-4(fp)
 401ce4c:	10000226 	beq	r2,zero,401ce58 <alt_avalon_i2c_master_config_speed_set+0x3c>
 401ce50:	e0bfff17 	ldw	r2,-4(fp)
 401ce54:	1000021e 	bne	r2,zero,401ce60 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 401ce58:	00bfff04 	movi	r2,-4
 401ce5c:	00002906 	br	401cf04 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 401ce60:	e0bffd17 	ldw	r2,-12(fp)
 401ce64:	10c00c17 	ldw	r3,48(r2)
 401ce68:	e0bfff17 	ldw	r2,-4(fp)
 401ce6c:	1085883a 	add	r2,r2,r2
 401ce70:	100b883a 	mov	r5,r2
 401ce74:	1809883a 	mov	r4,r3
 401ce78:	400d6dc0 	call	400d6dc <__udivsi3>
 401ce7c:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 401ce80:	e0bffb17 	ldw	r2,-20(fp)
 401ce84:	10800f04 	addi	r2,r2,60
 401ce88:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 401ce8c:	e0bffb17 	ldw	r2,-20(fp)
 401ce90:	10bff104 	addi	r2,r2,-60
 401ce94:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 401ce98:	e0ffff17 	ldw	r3,-4(fp)
 401ce9c:	008000b4 	movhi	r2,2
 401cea0:	10a1a804 	addi	r2,r2,-31072
 401cea4:	10c0042e 	bgeu	r2,r3,401ceb8 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 401cea8:	e0bffe17 	ldw	r2,-8(fp)
 401ceac:	00c00044 	movi	r3,1
 401ceb0:	10c00115 	stw	r3,4(r2)
 401ceb4:	00000206 	br	401cec0 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 401ceb8:	e0bffe17 	ldw	r2,-8(fp)
 401cebc:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 401cec0:	e0bffb17 	ldw	r2,-20(fp)
 401cec4:	1007883a 	mov	r3,r2
 401cec8:	e0bffe17 	ldw	r2,-8(fp)
 401cecc:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 401ced0:	e0bffc17 	ldw	r2,-16(fp)
 401ced4:	1007883a 	mov	r3,r2
 401ced8:	e0bffe17 	ldw	r2,-8(fp)
 401cedc:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 401cee0:	e0bffb17 	ldw	r2,-20(fp)
 401cee4:	1007883a 	mov	r3,r2
 401cee8:	e0bffb17 	ldw	r2,-20(fp)
 401ceec:	1004d07a 	srli	r2,r2,1
 401cef0:	1885c83a 	sub	r2,r3,r2
 401cef4:	1007883a 	mov	r3,r2
 401cef8:	e0bffe17 	ldw	r2,-8(fp)
 401cefc:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 401cf00:	0005883a 	mov	r2,zero

}
 401cf04:	e037883a 	mov	sp,fp
 401cf08:	dfc00117 	ldw	ra,4(sp)
 401cf0c:	df000017 	ldw	fp,0(sp)
 401cf10:	dec00204 	addi	sp,sp,8
 401cf14:	f800283a 	ret

0401cf18 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401cf18:	defffe04 	addi	sp,sp,-8
 401cf1c:	df000115 	stw	fp,4(sp)
 401cf20:	df000104 	addi	fp,sp,4
 401cf24:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 401cf28:	e0bfff17 	ldw	r2,-4(fp)
 401cf2c:	10800317 	ldw	r2,12(r2)
 401cf30:	10800504 	addi	r2,r2,20
 401cf34:	10800037 	ldwio	r2,0(r2)
 401cf38:	1080004c 	andi	r2,r2,1
 401cf3c:	10000226 	beq	r2,zero,401cf48 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 401cf40:	00800044 	movi	r2,1
 401cf44:	00000106 	br	401cf4c <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 401cf48:	0005883a 	mov	r2,zero
}
 401cf4c:	e037883a 	mov	sp,fp
 401cf50:	df000017 	ldw	fp,0(sp)
 401cf54:	dec00104 	addi	sp,sp,4
 401cf58:	f800283a 	ret

0401cf5c <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 401cf5c:	defffb04 	addi	sp,sp,-20
 401cf60:	df000415 	stw	fp,16(sp)
 401cf64:	df000404 	addi	fp,sp,16
 401cf68:	e13ffc15 	stw	r4,-16(fp)
 401cf6c:	e17ffd15 	stw	r5,-12(fp)
 401cf70:	e1bffe15 	stw	r6,-8(fp)
 401cf74:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 401cf78:	e0bfff17 	ldw	r2,-4(fp)
 401cf7c:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 401cf80:	00001406 	br	401cfd4 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 401cf84:	e0bfff17 	ldw	r2,-4(fp)
 401cf88:	10800017 	ldw	r2,0(r2)
 401cf8c:	e0fffd17 	ldw	r3,-12(fp)
 401cf90:	1885883a 	add	r2,r3,r2
 401cf94:	e0fffc17 	ldw	r3,-16(fp)
 401cf98:	18c00317 	ldw	r3,12(r3)
 401cf9c:	18c00104 	addi	r3,r3,4
 401cfa0:	18c00037 	ldwio	r3,0(r3)
 401cfa4:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 401cfa8:	e0bfff17 	ldw	r2,-4(fp)
 401cfac:	10800017 	ldw	r2,0(r2)
 401cfb0:	10c00044 	addi	r3,r2,1
 401cfb4:	e0bfff17 	ldw	r2,-4(fp)
 401cfb8:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 401cfbc:	e0bfff17 	ldw	r2,-4(fp)
 401cfc0:	10c00017 	ldw	r3,0(r2)
 401cfc4:	e0bffe17 	ldw	r2,-8(fp)
 401cfc8:	1880021e 	bne	r3,r2,401cfd4 <alt_avalon_i2c_rx_read_available+0x78>
 401cfcc:	e0bffe17 	ldw	r2,-8(fp)
 401cfd0:	1000061e 	bne	r2,zero,401cfec <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 401cfd4:	e0bffc17 	ldw	r2,-16(fp)
 401cfd8:	10800317 	ldw	r2,12(r2)
 401cfdc:	10800704 	addi	r2,r2,28
 401cfe0:	10800037 	ldwio	r2,0(r2)
 401cfe4:	103fe71e 	bne	r2,zero,401cf84 <__alt_mem_onchip_memory2_0+0xfc01bce4>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 401cfe8:	00000106 	br	401cff0 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 401cfec:	0001883a 	nop
    }
}
 401cff0:	0001883a 	nop
 401cff4:	e037883a 	mov	sp,fp
 401cff8:	df000017 	ldw	fp,0(sp)
 401cffc:	dec00104 	addi	sp,sp,4
 401d000:	f800283a 	ret

0401d004 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 401d004:	defffa04 	addi	sp,sp,-24
 401d008:	dfc00515 	stw	ra,20(sp)
 401d00c:	df000415 	stw	fp,16(sp)
 401d010:	df000404 	addi	fp,sp,16
 401d014:	e13ffe15 	stw	r4,-8(fp)
 401d018:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 401d01c:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 401d020:	008000b4 	movhi	r2,2
 401d024:	10a1a804 	addi	r2,r2,-31072
 401d028:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 401d02c:	00000d06 	br	401d064 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 401d030:	e0bffd17 	ldw	r2,-12(fp)
 401d034:	108002a8 	cmpgeui	r2,r2,10
 401d038:	1000021e 	bne	r2,zero,401d044 <alt_avalon_i2c_rx_read+0x40>
 401d03c:	0109c404 	movi	r4,10000
 401d040:	401f2480 	call	401f248 <alt_busy_sleep>
      if (--timeout == 0)
 401d044:	e0bffd17 	ldw	r2,-12(fp)
 401d048:	10bfffc4 	addi	r2,r2,-1
 401d04c:	e0bffd15 	stw	r2,-12(fp)
 401d050:	e0bffd17 	ldw	r2,-12(fp)
 401d054:	1000031e 	bne	r2,zero,401d064 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 401d058:	00bfff84 	movi	r2,-2
 401d05c:	e0bffc15 	stw	r2,-16(fp)
        break;
 401d060:	00000506 	br	401d078 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 401d064:	e0bffe17 	ldw	r2,-8(fp)
 401d068:	10800317 	ldw	r2,12(r2)
 401d06c:	10800704 	addi	r2,r2,28
 401d070:	10800037 	ldwio	r2,0(r2)
 401d074:	103fee26 	beq	r2,zero,401d030 <__alt_mem_onchip_memory2_0+0xfc01bd90>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 401d078:	e0bffe17 	ldw	r2,-8(fp)
 401d07c:	10800317 	ldw	r2,12(r2)
 401d080:	10800104 	addi	r2,r2,4
 401d084:	10800037 	ldwio	r2,0(r2)
 401d088:	1007883a 	mov	r3,r2
 401d08c:	e0bfff17 	ldw	r2,-4(fp)
 401d090:	10c00005 	stb	r3,0(r2)
        
    return status;
 401d094:	e0bffc17 	ldw	r2,-16(fp)
}
 401d098:	e037883a 	mov	sp,fp
 401d09c:	dfc00117 	ldw	ra,4(sp)
 401d0a0:	df000017 	ldw	fp,0(sp)
 401d0a4:	dec00204 	addi	sp,sp,8
 401d0a8:	f800283a 	ret

0401d0ac <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 401d0ac:	defff804 	addi	sp,sp,-32
 401d0b0:	dfc00715 	stw	ra,28(sp)
 401d0b4:	df000615 	stw	fp,24(sp)
 401d0b8:	df000604 	addi	fp,sp,24
 401d0bc:	e13ffc15 	stw	r4,-16(fp)
 401d0c0:	2809883a 	mov	r4,r5
 401d0c4:	3007883a 	mov	r3,r6
 401d0c8:	3805883a 	mov	r2,r7
 401d0cc:	e13ffd05 	stb	r4,-12(fp)
 401d0d0:	e0fffe05 	stb	r3,-8(fp)
 401d0d4:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 401d0d8:	0089c404 	movi	r2,10000
 401d0dc:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d0e0:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 401d0e4:	00000c06 	br	401d118 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 401d0e8:	e0bffa17 	ldw	r2,-24(fp)
 401d0ec:	108002a8 	cmpgeui	r2,r2,10
 401d0f0:	1000021e 	bne	r2,zero,401d0fc <alt_avalon_i2c_cmd_write+0x50>
 401d0f4:	0109c404 	movi	r4,10000
 401d0f8:	401f2480 	call	401f248 <alt_busy_sleep>
      if (--timeout == 0)
 401d0fc:	e0bffa17 	ldw	r2,-24(fp)
 401d100:	10bfffc4 	addi	r2,r2,-1
 401d104:	e0bffa15 	stw	r2,-24(fp)
 401d108:	e0bffa17 	ldw	r2,-24(fp)
 401d10c:	1000021e 	bne	r2,zero,401d118 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 401d110:	00bfff84 	movi	r2,-2
 401d114:	00001906 	br	401d17c <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 401d118:	e0bffc17 	ldw	r2,-16(fp)
 401d11c:	10800317 	ldw	r2,12(r2)
 401d120:	10800404 	addi	r2,r2,16
 401d124:	10800037 	ldwio	r2,0(r2)
 401d128:	1080004c 	andi	r2,r2,1
 401d12c:	103fee26 	beq	r2,zero,401d0e8 <__alt_mem_onchip_memory2_0+0xfc01be48>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 401d130:	e0bffc17 	ldw	r2,-16(fp)
 401d134:	10800317 	ldw	r2,12(r2)
 401d138:	e13ffd03 	ldbu	r4,-12(fp)
 401d13c:	e0fffe03 	ldbu	r3,-8(fp)
 401d140:	1806927a 	slli	r3,r3,9
 401d144:	20c8b03a 	or	r4,r4,r3
 401d148:	e0ffff03 	ldbu	r3,-4(fp)
 401d14c:	1806923a 	slli	r3,r3,8
 401d150:	20c6b03a 	or	r3,r4,r3
 401d154:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 401d158:	e0bffb04 	addi	r2,fp,-20
 401d15c:	100b883a 	mov	r5,r2
 401d160:	e13ffc17 	ldw	r4,-16(fp)
 401d164:	401d2ec0 	call	401d2ec <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 401d168:	e0bffb04 	addi	r2,fp,-20
 401d16c:	100b883a 	mov	r5,r2
 401d170:	e13ffc17 	ldw	r4,-16(fp)
 401d174:	401d3380 	call	401d338 <alt_avalon_i2c_check_arblost>
    
    return status;
 401d178:	e0bffb17 	ldw	r2,-20(fp)
}
 401d17c:	e037883a 	mov	sp,fp
 401d180:	dfc00117 	ldw	ra,4(sp)
 401d184:	df000017 	ldw	fp,0(sp)
 401d188:	dec00204 	addi	sp,sp,8
 401d18c:	f800283a 	ret

0401d190 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 401d190:	defffa04 	addi	sp,sp,-24
 401d194:	dfc00515 	stw	ra,20(sp)
 401d198:	df000415 	stw	fp,16(sp)
 401d19c:	df000404 	addi	fp,sp,16
 401d1a0:	e13ffd15 	stw	r4,-12(fp)
 401d1a4:	e17ffe15 	stw	r5,-8(fp)
 401d1a8:	3005883a 	mov	r2,r6
 401d1ac:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 401d1b0:	e0bffd17 	ldw	r2,-12(fp)
 401d1b4:	10800d17 	ldw	r2,52(r2)
 401d1b8:	10800058 	cmpnei	r2,r2,1
 401d1bc:	10001c1e 	bne	r2,zero,401d230 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 401d1c0:	e0bffd17 	ldw	r2,-12(fp)
 401d1c4:	10800917 	ldw	r2,36(r2)
 401d1c8:	109e0014 	ori	r2,r2,30720
 401d1cc:	1004d1fa 	srli	r2,r2,7
 401d1d0:	1007883a 	mov	r3,r2
 401d1d4:	00bfff84 	movi	r2,-2
 401d1d8:	1884703a 	and	r2,r3,r2
 401d1dc:	1007883a 	mov	r3,r2
 401d1e0:	e0bffe17 	ldw	r2,-8(fp)
 401d1e4:	1884b03a 	or	r2,r3,r2
 401d1e8:	10803fcc 	andi	r2,r2,255
 401d1ec:	e0ffff03 	ldbu	r3,-4(fp)
 401d1f0:	000f883a 	mov	r7,zero
 401d1f4:	180d883a 	mov	r6,r3
 401d1f8:	100b883a 	mov	r5,r2
 401d1fc:	e13ffd17 	ldw	r4,-12(fp)
 401d200:	401d0ac0 	call	401d0ac <alt_avalon_i2c_cmd_write>
 401d204:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 401d208:	e0bffd17 	ldw	r2,-12(fp)
 401d20c:	10800917 	ldw	r2,36(r2)
 401d210:	10803fcc 	andi	r2,r2,255
 401d214:	000f883a 	mov	r7,zero
 401d218:	000d883a 	mov	r6,zero
 401d21c:	100b883a 	mov	r5,r2
 401d220:	e13ffd17 	ldw	r4,-12(fp)
 401d224:	401d0ac0 	call	401d0ac <alt_avalon_i2c_cmd_write>
 401d228:	e0bffc15 	stw	r2,-16(fp)
 401d22c:	00000e06 	br	401d268 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 401d230:	e0bffd17 	ldw	r2,-12(fp)
 401d234:	10800917 	ldw	r2,36(r2)
 401d238:	1085883a 	add	r2,r2,r2
 401d23c:	1007883a 	mov	r3,r2
 401d240:	e0bffe17 	ldw	r2,-8(fp)
 401d244:	1884b03a 	or	r2,r3,r2
 401d248:	10803fcc 	andi	r2,r2,255
 401d24c:	e0ffff03 	ldbu	r3,-4(fp)
 401d250:	000f883a 	mov	r7,zero
 401d254:	180d883a 	mov	r6,r3
 401d258:	100b883a 	mov	r5,r2
 401d25c:	e13ffd17 	ldw	r4,-12(fp)
 401d260:	401d0ac0 	call	401d0ac <alt_avalon_i2c_cmd_write>
 401d264:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 401d268:	e0bffc17 	ldw	r2,-16(fp)
}
 401d26c:	e037883a 	mov	sp,fp
 401d270:	dfc00117 	ldw	ra,4(sp)
 401d274:	df000017 	ldw	fp,0(sp)
 401d278:	dec00204 	addi	sp,sp,8
 401d27c:	f800283a 	ret

0401d280 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 401d280:	defffd04 	addi	sp,sp,-12
 401d284:	df000215 	stw	fp,8(sp)
 401d288:	df000204 	addi	fp,sp,8
 401d28c:	e13ffe15 	stw	r4,-8(fp)
 401d290:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 401d294:	e0bffe17 	ldw	r2,-8(fp)
 401d298:	10c00917 	ldw	r3,36(r2)
 401d29c:	e0bfff17 	ldw	r2,-4(fp)
 401d2a0:	10c00015 	stw	r3,0(r2)
}
 401d2a4:	0001883a 	nop
 401d2a8:	e037883a 	mov	sp,fp
 401d2ac:	df000017 	ldw	fp,0(sp)
 401d2b0:	dec00104 	addi	sp,sp,4
 401d2b4:	f800283a 	ret

0401d2b8 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 401d2b8:	defffd04 	addi	sp,sp,-12
 401d2bc:	df000215 	stw	fp,8(sp)
 401d2c0:	df000204 	addi	fp,sp,8
 401d2c4:	e13ffe15 	stw	r4,-8(fp)
 401d2c8:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 401d2cc:	e0bffe17 	ldw	r2,-8(fp)
 401d2d0:	e0ffff17 	ldw	r3,-4(fp)
 401d2d4:	10c00915 	stw	r3,36(r2)
}
 401d2d8:	0001883a 	nop
 401d2dc:	e037883a 	mov	sp,fp
 401d2e0:	df000017 	ldw	fp,0(sp)
 401d2e4:	dec00104 	addi	sp,sp,4
 401d2e8:	f800283a 	ret

0401d2ec <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 401d2ec:	defffd04 	addi	sp,sp,-12
 401d2f0:	df000215 	stw	fp,8(sp)
 401d2f4:	df000204 	addi	fp,sp,8
 401d2f8:	e13ffe15 	stw	r4,-8(fp)
 401d2fc:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 401d300:	e0bffe17 	ldw	r2,-8(fp)
 401d304:	10800317 	ldw	r2,12(r2)
 401d308:	10800404 	addi	r2,r2,16
 401d30c:	10800037 	ldwio	r2,0(r2)
 401d310:	1080010c 	andi	r2,r2,4
 401d314:	10000326 	beq	r2,zero,401d324 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 401d318:	e0bfff17 	ldw	r2,-4(fp)
 401d31c:	00fffec4 	movi	r3,-5
 401d320:	10c00015 	stw	r3,0(r2)
    }
}
 401d324:	0001883a 	nop
 401d328:	e037883a 	mov	sp,fp
 401d32c:	df000017 	ldw	fp,0(sp)
 401d330:	dec00104 	addi	sp,sp,4
 401d334:	f800283a 	ret

0401d338 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 401d338:	defffd04 	addi	sp,sp,-12
 401d33c:	df000215 	stw	fp,8(sp)
 401d340:	df000204 	addi	fp,sp,8
 401d344:	e13ffe15 	stw	r4,-8(fp)
 401d348:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 401d34c:	e0bffe17 	ldw	r2,-8(fp)
 401d350:	10800317 	ldw	r2,12(r2)
 401d354:	10800404 	addi	r2,r2,16
 401d358:	10800037 	ldwio	r2,0(r2)
 401d35c:	1080020c 	andi	r2,r2,8
 401d360:	10000326 	beq	r2,zero,401d370 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 401d364:	e0bfff17 	ldw	r2,-4(fp)
 401d368:	00fffe84 	movi	r3,-6
 401d36c:	10c00015 	stw	r3,0(r2)
    }
}
 401d370:	0001883a 	nop
 401d374:	e037883a 	mov	sp,fp
 401d378:	df000017 	ldw	fp,0(sp)
 401d37c:	dec00104 	addi	sp,sp,4
 401d380:	f800283a 	ret

0401d384 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401d384:	defff804 	addi	sp,sp,-32
 401d388:	dfc00715 	stw	ra,28(sp)
 401d38c:	df000615 	stw	fp,24(sp)
 401d390:	df000604 	addi	fp,sp,24
 401d394:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d398:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 401d39c:	e0bfff17 	ldw	r2,-4(fp)
 401d3a0:	10800717 	ldw	r2,28(r2)
 401d3a4:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 401d3a8:	e0bffb17 	ldw	r2,-20(fp)
 401d3ac:	10800117 	ldw	r2,4(r2)
 401d3b0:	10800044 	addi	r2,r2,1
 401d3b4:	0149c404 	movi	r5,10000
 401d3b8:	1009883a 	mov	r4,r2
 401d3bc:	400d7980 	call	400d798 <__mulsi3>
 401d3c0:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 401d3c4:	e0bffd04 	addi	r2,fp,-12
 401d3c8:	100b883a 	mov	r5,r2
 401d3cc:	e13fff17 	ldw	r4,-4(fp)
 401d3d0:	401e21c0 	call	401e21c <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 401d3d4:	e0bffd17 	ldw	r2,-12(fp)
 401d3d8:	100b883a 	mov	r5,r2
 401d3dc:	e13fff17 	ldw	r4,-4(fp)
 401d3e0:	401e1500 	call	401e150 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 401d3e4:	e0bffc04 	addi	r2,fp,-16
 401d3e8:	100b883a 	mov	r5,r2
 401d3ec:	e13fff17 	ldw	r4,-4(fp)
 401d3f0:	401d2ec0 	call	401d2ec <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 401d3f4:	e0bffc17 	ldw	r2,-16(fp)
 401d3f8:	10002226 	beq	r2,zero,401d484 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 401d3fc:	e0bffb17 	ldw	r2,-20(fp)
 401d400:	10800217 	ldw	r2,8(r2)
 401d404:	10001d26 	beq	r2,zero,401d47c <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d408:	00000d06 	br	401d440 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 401d40c:	e0bffa17 	ldw	r2,-24(fp)
 401d410:	108002a8 	cmpgeui	r2,r2,10
 401d414:	1000021e 	bne	r2,zero,401d420 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 401d418:	0109c404 	movi	r4,10000
 401d41c:	401f2480 	call	401f248 <alt_busy_sleep>
              if (--timeout == 0)
 401d420:	e0bffa17 	ldw	r2,-24(fp)
 401d424:	10bfffc4 	addi	r2,r2,-1
 401d428:	e0bffa15 	stw	r2,-24(fp)
 401d42c:	e0bffa17 	ldw	r2,-24(fp)
 401d430:	1000031e 	bne	r2,zero,401d440 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 401d434:	00bfff84 	movi	r2,-2
 401d438:	e0bffc15 	stw	r2,-16(fp)
                 break;
 401d43c:	00000306 	br	401d44c <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d440:	e13fff17 	ldw	r4,-4(fp)
 401d444:	401cf180 	call	401cf18 <alt_avalon_i2c_is_busy>
 401d448:	103ff01e 	bne	r2,zero,401d40c <__alt_mem_onchip_memory2_0+0xfc01c16c>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 401d44c:	e0bffb17 	ldw	r2,-20(fp)
 401d450:	10800017 	ldw	r2,0(r2)
 401d454:	e0fffe04 	addi	r3,fp,-8
 401d458:	180f883a 	mov	r7,r3
 401d45c:	000d883a 	mov	r6,zero
 401d460:	100b883a 	mov	r5,r2
 401d464:	e13fff17 	ldw	r4,-4(fp)
 401d468:	401cf5c0 	call	401cf5c <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 401d46c:	e13fff17 	ldw	r4,-4(fp)
 401d470:	401cbc00 	call	401cbc0 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 401d474:	e0bffb17 	ldw	r2,-20(fp)
 401d478:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 401d47c:	e0bffc17 	ldw	r2,-16(fp)
 401d480:	00000a06 	br	401d4ac <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 401d484:	e0bffb17 	ldw	r2,-20(fp)
 401d488:	10800217 	ldw	r2,8(r2)
 401d48c:	10000626 	beq	r2,zero,401d4a8 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 401d490:	e0bffd17 	ldw	r2,-12(fp)
 401d494:	100b883a 	mov	r5,r2
 401d498:	e13fff17 	ldw	r4,-4(fp)
 401d49c:	401e1b80 	call	401e1b8 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 401d4a0:	00bffe44 	movi	r2,-7
 401d4a4:	00000106 	br	401d4ac <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 401d4a8:	0005883a 	mov	r2,zero
}
 401d4ac:	e037883a 	mov	sp,fp
 401d4b0:	dfc00117 	ldw	ra,4(sp)
 401d4b4:	df000017 	ldw	fp,0(sp)
 401d4b8:	dec00204 	addi	sp,sp,8
 401d4bc:	f800283a 	ret

0401d4c0 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 401d4c0:	defff704 	addi	sp,sp,-36
 401d4c4:	dfc00815 	stw	ra,32(sp)
 401d4c8:	df000715 	stw	fp,28(sp)
 401d4cc:	df000704 	addi	fp,sp,28
 401d4d0:	e13ffc15 	stw	r4,-16(fp)
 401d4d4:	e17ffd15 	stw	r5,-12(fp)
 401d4d8:	e1bffe15 	stw	r6,-8(fp)
 401d4dc:	3805883a 	mov	r2,r7
 401d4e0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401d4e4:	0089c404 	movi	r2,10000
 401d4e8:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 401d4ec:	00002206 	br	401d578 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 401d4f0:	e0bffb17 	ldw	r2,-20(fp)
 401d4f4:	108002a8 	cmpgeui	r2,r2,10
 401d4f8:	1000021e 	bne	r2,zero,401d504 <alt_avalon_i2c_master_tx+0x44>
 401d4fc:	0109c404 	movi	r4,10000
 401d500:	401f2480 	call	401f248 <alt_busy_sleep>
      if (use_interrupts)
 401d504:	e0bfff03 	ldbu	r2,-4(fp)
 401d508:	10000926 	beq	r2,zero,401d530 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 401d50c:	00800044 	movi	r2,1
 401d510:	d8800015 	stw	r2,0(sp)
 401d514:	000f883a 	mov	r7,zero
 401d518:	e1bffe17 	ldw	r6,-8(fp)
 401d51c:	e17ffd17 	ldw	r5,-12(fp)
 401d520:	e13ffc17 	ldw	r4,-16(fp)
 401d524:	401da6c0 	call	401da6c <alt_avalon_i2c_master_transmit_using_interrupts>
 401d528:	e0bffa15 	stw	r2,-24(fp)
 401d52c:	00000806 	br	401d550 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 401d530:	00800044 	movi	r2,1
 401d534:	d8800015 	stw	r2,0(sp)
 401d538:	000f883a 	mov	r7,zero
 401d53c:	e1bffe17 	ldw	r6,-8(fp)
 401d540:	e17ffd17 	ldw	r5,-12(fp)
 401d544:	e13ffc17 	ldw	r4,-16(fp)
 401d548:	401d8ac0 	call	401d8ac <alt_avalon_i2c_master_transmit>
 401d54c:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d550:	e0bffa17 	ldw	r2,-24(fp)
 401d554:	10bffea0 	cmpeqi	r2,r2,-6
 401d558:	1000061e 	bne	r2,zero,401d574 <alt_avalon_i2c_master_tx+0xb4>
 401d55c:	e0bffa17 	ldw	r2,-24(fp)
 401d560:	10bffee0 	cmpeqi	r2,r2,-5
 401d564:	1000031e 	bne	r2,zero,401d574 <alt_avalon_i2c_master_tx+0xb4>
 401d568:	e0bffa17 	ldw	r2,-24(fp)
 401d56c:	10bffe58 	cmpnei	r2,r2,-7
 401d570:	1000061e 	bne	r2,zero,401d58c <alt_avalon_i2c_master_tx+0xcc>
 401d574:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 401d578:	e0bffb17 	ldw	r2,-20(fp)
 401d57c:	10ffffc4 	addi	r3,r2,-1
 401d580:	e0fffb15 	stw	r3,-20(fp)
 401d584:	103fda1e 	bne	r2,zero,401d4f0 <__alt_mem_onchip_memory2_0+0xfc01c250>
 401d588:	00000106 	br	401d590 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 401d58c:	0001883a 	nop
    }

    return status;
 401d590:	e0bffa17 	ldw	r2,-24(fp)
}        
 401d594:	e037883a 	mov	sp,fp
 401d598:	dfc00117 	ldw	ra,4(sp)
 401d59c:	df000017 	ldw	fp,0(sp)
 401d5a0:	dec00204 	addi	sp,sp,8
 401d5a4:	f800283a 	ret

0401d5a8 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 401d5a8:	defff704 	addi	sp,sp,-36
 401d5ac:	dfc00815 	stw	ra,32(sp)
 401d5b0:	df000715 	stw	fp,28(sp)
 401d5b4:	df000704 	addi	fp,sp,28
 401d5b8:	e13ffc15 	stw	r4,-16(fp)
 401d5bc:	e17ffd15 	stw	r5,-12(fp)
 401d5c0:	e1bffe15 	stw	r6,-8(fp)
 401d5c4:	3805883a 	mov	r2,r7
 401d5c8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401d5cc:	0089c404 	movi	r2,10000
 401d5d0:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 401d5d4:	e0bfff03 	ldbu	r2,-4(fp)
 401d5d8:	10003426 	beq	r2,zero,401d6ac <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 401d5dc:	00001706 	br	401d63c <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 401d5e0:	e0bffb17 	ldw	r2,-20(fp)
 401d5e4:	108002a8 	cmpgeui	r2,r2,10
 401d5e8:	1000021e 	bne	r2,zero,401d5f4 <alt_avalon_i2c_master_rx+0x4c>
 401d5ec:	0109c404 	movi	r4,10000
 401d5f0:	401f2480 	call	401f248 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 401d5f4:	00800044 	movi	r2,1
 401d5f8:	d8800015 	stw	r2,0(sp)
 401d5fc:	000f883a 	mov	r7,zero
 401d600:	e1bffe17 	ldw	r6,-8(fp)
 401d604:	e17ffd17 	ldw	r5,-12(fp)
 401d608:	e13ffc17 	ldw	r4,-16(fp)
 401d60c:	401de880 	call	401de88 <alt_avalon_i2c_master_receive_using_interrupts>
 401d610:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d614:	e0bffa17 	ldw	r2,-24(fp)
 401d618:	10bffea0 	cmpeqi	r2,r2,-6
 401d61c:	1000061e 	bne	r2,zero,401d638 <alt_avalon_i2c_master_rx+0x90>
 401d620:	e0bffa17 	ldw	r2,-24(fp)
 401d624:	10bffee0 	cmpeqi	r2,r2,-5
 401d628:	1000031e 	bne	r2,zero,401d638 <alt_avalon_i2c_master_rx+0x90>
 401d62c:	e0bffa17 	ldw	r2,-24(fp)
 401d630:	10bffe58 	cmpnei	r2,r2,-7
 401d634:	1000221e 	bne	r2,zero,401d6c0 <alt_avalon_i2c_master_rx+0x118>
 401d638:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 401d63c:	e0bffb17 	ldw	r2,-20(fp)
 401d640:	10ffffc4 	addi	r3,r2,-1
 401d644:	e0fffb15 	stw	r3,-20(fp)
 401d648:	103fe51e 	bne	r2,zero,401d5e0 <__alt_mem_onchip_memory2_0+0xfc01c340>
 401d64c:	00001f06 	br	401d6cc <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 401d650:	e0bffb17 	ldw	r2,-20(fp)
 401d654:	108002a8 	cmpgeui	r2,r2,10
 401d658:	1000021e 	bne	r2,zero,401d664 <alt_avalon_i2c_master_rx+0xbc>
 401d65c:	0109c404 	movi	r4,10000
 401d660:	401f2480 	call	401f248 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 401d664:	00800044 	movi	r2,1
 401d668:	d8800015 	stw	r2,0(sp)
 401d66c:	000f883a 	mov	r7,zero
 401d670:	e1bffe17 	ldw	r6,-8(fp)
 401d674:	e17ffd17 	ldw	r5,-12(fp)
 401d678:	e13ffc17 	ldw	r4,-16(fp)
 401d67c:	401dc780 	call	401dc78 <alt_avalon_i2c_master_receive>
 401d680:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d684:	e0bffa17 	ldw	r2,-24(fp)
 401d688:	10bffea0 	cmpeqi	r2,r2,-6
 401d68c:	1000061e 	bne	r2,zero,401d6a8 <alt_avalon_i2c_master_rx+0x100>
 401d690:	e0bffa17 	ldw	r2,-24(fp)
 401d694:	10bffee0 	cmpeqi	r2,r2,-5
 401d698:	1000031e 	bne	r2,zero,401d6a8 <alt_avalon_i2c_master_rx+0x100>
 401d69c:	e0bffa17 	ldw	r2,-24(fp)
 401d6a0:	10bffe58 	cmpnei	r2,r2,-7
 401d6a4:	1000081e 	bne	r2,zero,401d6c8 <alt_avalon_i2c_master_rx+0x120>
 401d6a8:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 401d6ac:	e0bffb17 	ldw	r2,-20(fp)
 401d6b0:	10ffffc4 	addi	r3,r2,-1
 401d6b4:	e0fffb15 	stw	r3,-20(fp)
 401d6b8:	103fe51e 	bne	r2,zero,401d650 <__alt_mem_onchip_memory2_0+0xfc01c3b0>
 401d6bc:	00000306 	br	401d6cc <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 401d6c0:	0001883a 	nop
 401d6c4:	00000106 	br	401d6cc <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 401d6c8:	0001883a 	nop
      }
    }
    
    return status;
 401d6cc:	e0bffa17 	ldw	r2,-24(fp)
}        
 401d6d0:	e037883a 	mov	sp,fp
 401d6d4:	dfc00117 	ldw	ra,4(sp)
 401d6d8:	df000017 	ldw	fp,0(sp)
 401d6dc:	dec00204 	addi	sp,sp,8
 401d6e0:	f800283a 	ret

0401d6e4 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 401d6e4:	defff604 	addi	sp,sp,-40
 401d6e8:	dfc00915 	stw	ra,36(sp)
 401d6ec:	df000815 	stw	fp,32(sp)
 401d6f0:	df000804 	addi	fp,sp,32
 401d6f4:	e13ffb15 	stw	r4,-20(fp)
 401d6f8:	e17ffc15 	stw	r5,-16(fp)
 401d6fc:	e1bffd15 	stw	r6,-12(fp)
 401d700:	e1fffe15 	stw	r7,-8(fp)
 401d704:	e0800317 	ldw	r2,12(fp)
 401d708:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401d70c:	0089c404 	movi	r2,10000
 401d710:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 401d714:	e0bfff03 	ldbu	r2,-4(fp)
 401d718:	10005626 	beq	r2,zero,401d874 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 401d71c:	00002806 	br	401d7c0 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 401d720:	e0bffa17 	ldw	r2,-24(fp)
 401d724:	108002a8 	cmpgeui	r2,r2,10
 401d728:	1000021e 	bne	r2,zero,401d734 <alt_avalon_i2c_master_tx_rx+0x50>
 401d72c:	0109c404 	movi	r4,10000
 401d730:	401f2480 	call	401f248 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 401d734:	d8000015 	stw	zero,0(sp)
 401d738:	000f883a 	mov	r7,zero
 401d73c:	e1bffd17 	ldw	r6,-12(fp)
 401d740:	e17ffc17 	ldw	r5,-16(fp)
 401d744:	e13ffb17 	ldw	r4,-20(fp)
 401d748:	401da6c0 	call	401da6c <alt_avalon_i2c_master_transmit_using_interrupts>
 401d74c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d750:	e0bff917 	ldw	r2,-28(fp)
 401d754:	10bffea0 	cmpeqi	r2,r2,-6
 401d758:	1000191e 	bne	r2,zero,401d7c0 <alt_avalon_i2c_master_tx_rx+0xdc>
 401d75c:	e0bff917 	ldw	r2,-28(fp)
 401d760:	10bffee0 	cmpeqi	r2,r2,-5
 401d764:	1000161e 	bne	r2,zero,401d7c0 <alt_avalon_i2c_master_tx_rx+0xdc>
 401d768:	e0bff917 	ldw	r2,-28(fp)
 401d76c:	10bffe58 	cmpnei	r2,r2,-7
 401d770:	1000011e 	bne	r2,zero,401d778 <alt_avalon_i2c_master_tx_rx+0x94>
 401d774:	00001206 	br	401d7c0 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 401d778:	00800044 	movi	r2,1
 401d77c:	d8800015 	stw	r2,0(sp)
 401d780:	01c00044 	movi	r7,1
 401d784:	e1800217 	ldw	r6,8(fp)
 401d788:	e17ffe17 	ldw	r5,-8(fp)
 401d78c:	e13ffb17 	ldw	r4,-20(fp)
 401d790:	401de880 	call	401de88 <alt_avalon_i2c_master_receive_using_interrupts>
 401d794:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d798:	e0bff917 	ldw	r2,-28(fp)
 401d79c:	10bffea0 	cmpeqi	r2,r2,-6
 401d7a0:	1000061e 	bne	r2,zero,401d7bc <alt_avalon_i2c_master_tx_rx+0xd8>
 401d7a4:	e0bff917 	ldw	r2,-28(fp)
 401d7a8:	10bffee0 	cmpeqi	r2,r2,-5
 401d7ac:	1000031e 	bne	r2,zero,401d7bc <alt_avalon_i2c_master_tx_rx+0xd8>
 401d7b0:	e0bff917 	ldw	r2,-28(fp)
 401d7b4:	10bffe58 	cmpnei	r2,r2,-7
 401d7b8:	1000331e 	bne	r2,zero,401d888 <alt_avalon_i2c_master_tx_rx+0x1a4>
 401d7bc:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 401d7c0:	e0bffa17 	ldw	r2,-24(fp)
 401d7c4:	10ffffc4 	addi	r3,r2,-1
 401d7c8:	e0fffa15 	stw	r3,-24(fp)
 401d7cc:	103fd41e 	bne	r2,zero,401d720 <__alt_mem_onchip_memory2_0+0xfc01c480>
 401d7d0:	00003006 	br	401d894 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 401d7d4:	e0bffa17 	ldw	r2,-24(fp)
 401d7d8:	108002a8 	cmpgeui	r2,r2,10
 401d7dc:	1000021e 	bne	r2,zero,401d7e8 <alt_avalon_i2c_master_tx_rx+0x104>
 401d7e0:	0109c404 	movi	r4,10000
 401d7e4:	401f2480 	call	401f248 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 401d7e8:	d8000015 	stw	zero,0(sp)
 401d7ec:	000f883a 	mov	r7,zero
 401d7f0:	e1bffd17 	ldw	r6,-12(fp)
 401d7f4:	e17ffc17 	ldw	r5,-16(fp)
 401d7f8:	e13ffb17 	ldw	r4,-20(fp)
 401d7fc:	401d8ac0 	call	401d8ac <alt_avalon_i2c_master_transmit>
 401d800:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d804:	e0bff917 	ldw	r2,-28(fp)
 401d808:	10bffea0 	cmpeqi	r2,r2,-6
 401d80c:	1000191e 	bne	r2,zero,401d874 <alt_avalon_i2c_master_tx_rx+0x190>
 401d810:	e0bff917 	ldw	r2,-28(fp)
 401d814:	10bffee0 	cmpeqi	r2,r2,-5
 401d818:	1000161e 	bne	r2,zero,401d874 <alt_avalon_i2c_master_tx_rx+0x190>
 401d81c:	e0bff917 	ldw	r2,-28(fp)
 401d820:	10bffe58 	cmpnei	r2,r2,-7
 401d824:	1000011e 	bne	r2,zero,401d82c <alt_avalon_i2c_master_tx_rx+0x148>
 401d828:	00001206 	br	401d874 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 401d82c:	00800044 	movi	r2,1
 401d830:	d8800015 	stw	r2,0(sp)
 401d834:	01c00044 	movi	r7,1
 401d838:	e1800217 	ldw	r6,8(fp)
 401d83c:	e17ffe17 	ldw	r5,-8(fp)
 401d840:	e13ffb17 	ldw	r4,-20(fp)
 401d844:	401dc780 	call	401dc78 <alt_avalon_i2c_master_receive>
 401d848:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d84c:	e0bff917 	ldw	r2,-28(fp)
 401d850:	10bffea0 	cmpeqi	r2,r2,-6
 401d854:	1000061e 	bne	r2,zero,401d870 <alt_avalon_i2c_master_tx_rx+0x18c>
 401d858:	e0bff917 	ldw	r2,-28(fp)
 401d85c:	10bffee0 	cmpeqi	r2,r2,-5
 401d860:	1000031e 	bne	r2,zero,401d870 <alt_avalon_i2c_master_tx_rx+0x18c>
 401d864:	e0bff917 	ldw	r2,-28(fp)
 401d868:	10bffe58 	cmpnei	r2,r2,-7
 401d86c:	1000081e 	bne	r2,zero,401d890 <alt_avalon_i2c_master_tx_rx+0x1ac>
 401d870:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 401d874:	e0bffa17 	ldw	r2,-24(fp)
 401d878:	10ffffc4 	addi	r3,r2,-1
 401d87c:	e0fffa15 	stw	r3,-24(fp)
 401d880:	103fd41e 	bne	r2,zero,401d7d4 <__alt_mem_onchip_memory2_0+0xfc01c534>
 401d884:	00000306 	br	401d894 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 401d888:	0001883a 	nop
 401d88c:	00000106 	br	401d894 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 401d890:	0001883a 	nop
      }
    }
    
    return status;
 401d894:	e0bff917 	ldw	r2,-28(fp)
}                                       
 401d898:	e037883a 	mov	sp,fp
 401d89c:	dfc00117 	ldw	ra,4(sp)
 401d8a0:	df000017 	ldw	fp,0(sp)
 401d8a4:	dec00204 	addi	sp,sp,8
 401d8a8:	f800283a 	ret

0401d8ac <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 401d8ac:	defff704 	addi	sp,sp,-36
 401d8b0:	dfc00815 	stw	ra,32(sp)
 401d8b4:	df000715 	stw	fp,28(sp)
 401d8b8:	df000704 	addi	fp,sp,28
 401d8bc:	e13ffb15 	stw	r4,-20(fp)
 401d8c0:	e17ffc15 	stw	r5,-16(fp)
 401d8c4:	e1bffd15 	stw	r6,-12(fp)
 401d8c8:	3807883a 	mov	r3,r7
 401d8cc:	e0800217 	ldw	r2,8(fp)
 401d8d0:	e0fffe05 	stb	r3,-8(fp)
 401d8d4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d8d8:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 401d8dc:	0149c404 	movi	r5,10000
 401d8e0:	e13ffd17 	ldw	r4,-12(fp)
 401d8e4:	400d7980 	call	400d798 <__mulsi3>
 401d8e8:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 401d8ec:	e0bffd17 	ldw	r2,-12(fp)
 401d8f0:	1000021e 	bne	r2,zero,401d8fc <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401d8f4:	0005883a 	mov	r2,zero
 401d8f8:	00005706 	br	401da58 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401d8fc:	e0bffe03 	ldbu	r2,-8(fp)
 401d900:	10000a1e 	bne	r2,zero,401d92c <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401d904:	e13ffb17 	ldw	r4,-20(fp)
 401d908:	401cb280 	call	401cb28 <alt_avalon_i2c_enable>
 401d90c:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401d910:	e0bffa17 	ldw	r2,-24(fp)
 401d914:	10000226 	beq	r2,zero,401d920 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 401d918:	e0bffa17 	ldw	r2,-24(fp)
 401d91c:	00004e06 	br	401da58 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401d920:	01400704 	movi	r5,28
 401d924:	e13ffb17 	ldw	r4,-20(fp)
 401d928:	401e1140 	call	401e114 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 401d92c:	e0bffe03 	ldbu	r2,-8(fp)
 401d930:	100d883a 	mov	r6,r2
 401d934:	000b883a 	mov	r5,zero
 401d938:	e13ffb17 	ldw	r4,-20(fp)
 401d93c:	401d1900 	call	401d190 <alt_avalon_i2c_send_address>
 401d940:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 401d944:	e0bffa17 	ldw	r2,-24(fp)
 401d948:	1000271e 	bne	r2,zero,401d9e8 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401d94c:	00000f06 	br	401d98c <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401d950:	e0bffc17 	ldw	r2,-16(fp)
 401d954:	10800003 	ldbu	r2,0(r2)
 401d958:	10803fcc 	andi	r2,r2,255
 401d95c:	000f883a 	mov	r7,zero
 401d960:	000d883a 	mov	r6,zero
 401d964:	100b883a 	mov	r5,r2
 401d968:	e13ffb17 	ldw	r4,-20(fp)
 401d96c:	401d0ac0 	call	401d0ac <alt_avalon_i2c_cmd_write>
 401d970:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 401d974:	e0bffc17 	ldw	r2,-16(fp)
 401d978:	10800044 	addi	r2,r2,1
 401d97c:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401d980:	e0bffd17 	ldw	r2,-12(fp)
 401d984:	10bfffc4 	addi	r2,r2,-1
 401d988:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401d98c:	e0bffd17 	ldw	r2,-12(fp)
 401d990:	108000b0 	cmpltui	r2,r2,2
 401d994:	1000021e 	bne	r2,zero,401d9a0 <alt_avalon_i2c_master_transmit+0xf4>
 401d998:	e0bffa17 	ldw	r2,-24(fp)
 401d99c:	103fec26 	beq	r2,zero,401d950 <__alt_mem_onchip_memory2_0+0xfc01c6b0>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401d9a0:	e0bffa17 	ldw	r2,-24(fp)
 401d9a4:	1000101e 	bne	r2,zero,401d9e8 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401d9a8:	e0bffc17 	ldw	r2,-16(fp)
 401d9ac:	10800003 	ldbu	r2,0(r2)
 401d9b0:	10803fcc 	andi	r2,r2,255
 401d9b4:	e0ffff03 	ldbu	r3,-4(fp)
 401d9b8:	180f883a 	mov	r7,r3
 401d9bc:	000d883a 	mov	r6,zero
 401d9c0:	100b883a 	mov	r5,r2
 401d9c4:	e13ffb17 	ldw	r4,-20(fp)
 401d9c8:	401d0ac0 	call	401d0ac <alt_avalon_i2c_cmd_write>
 401d9cc:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 401d9d0:	e0bffc17 	ldw	r2,-16(fp)
 401d9d4:	10800044 	addi	r2,r2,1
 401d9d8:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401d9dc:	e0bffd17 	ldw	r2,-12(fp)
 401d9e0:	10bfffc4 	addi	r2,r2,-1
 401d9e4:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 401d9e8:	e0bfff03 	ldbu	r2,-4(fp)
 401d9ec:	1000101e 	bne	r2,zero,401da30 <alt_avalon_i2c_master_transmit+0x184>
 401d9f0:	e0bffa17 	ldw	r2,-24(fp)
 401d9f4:	10001726 	beq	r2,zero,401da54 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d9f8:	00000d06 	br	401da30 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401d9fc:	e0bff917 	ldw	r2,-28(fp)
 401da00:	108002a8 	cmpgeui	r2,r2,10
 401da04:	1000021e 	bne	r2,zero,401da10 <alt_avalon_i2c_master_transmit+0x164>
 401da08:	0109c404 	movi	r4,10000
 401da0c:	401f2480 	call	401f248 <alt_busy_sleep>
            if (--timeout == 0)
 401da10:	e0bff917 	ldw	r2,-28(fp)
 401da14:	10bfffc4 	addi	r2,r2,-1
 401da18:	e0bff915 	stw	r2,-28(fp)
 401da1c:	e0bff917 	ldw	r2,-28(fp)
 401da20:	1000031e 	bne	r2,zero,401da30 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401da24:	00bfff84 	movi	r2,-2
 401da28:	e0bffa15 	stw	r2,-24(fp)
               break;
 401da2c:	00000306 	br	401da3c <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401da30:	e13ffb17 	ldw	r4,-20(fp)
 401da34:	401cf180 	call	401cf18 <alt_avalon_i2c_is_busy>
 401da38:	103ff01e 	bne	r2,zero,401d9fc <__alt_mem_onchip_memory2_0+0xfc01c75c>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 401da3c:	e0bffa04 	addi	r2,fp,-24
 401da40:	100b883a 	mov	r5,r2
 401da44:	e13ffb17 	ldw	r4,-20(fp)
 401da48:	401d2ec0 	call	401d2ec <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401da4c:	e13ffb17 	ldw	r4,-20(fp)
 401da50:	401cbc00 	call	401cbc0 <alt_avalon_i2c_disable>
    }


    return status;
 401da54:	e0bffa17 	ldw	r2,-24(fp)
}
 401da58:	e037883a 	mov	sp,fp
 401da5c:	dfc00117 	ldw	ra,4(sp)
 401da60:	df000017 	ldw	fp,0(sp)
 401da64:	dec00204 	addi	sp,sp,8
 401da68:	f800283a 	ret

0401da6c <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 401da6c:	defff604 	addi	sp,sp,-40
 401da70:	dfc00915 	stw	ra,36(sp)
 401da74:	df000815 	stw	fp,32(sp)
 401da78:	df000804 	addi	fp,sp,32
 401da7c:	e13ffb15 	stw	r4,-20(fp)
 401da80:	e17ffc15 	stw	r5,-16(fp)
 401da84:	e1bffd15 	stw	r6,-12(fp)
 401da88:	3807883a 	mov	r3,r7
 401da8c:	e0800217 	ldw	r2,8(fp)
 401da90:	e0fffe05 	stb	r3,-8(fp)
 401da94:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401da98:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 401da9c:	0149c404 	movi	r5,10000
 401daa0:	e13ffd17 	ldw	r4,-12(fp)
 401daa4:	400d7980 	call	400d798 <__mulsi3>
 401daa8:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 401daac:	e0bffb17 	ldw	r2,-20(fp)
 401dab0:	10800717 	ldw	r2,28(r2)
 401dab4:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 401dab8:	e0bffd17 	ldw	r2,-12(fp)
 401dabc:	1000021e 	bne	r2,zero,401dac8 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401dac0:	0005883a 	mov	r2,zero
 401dac4:	00006706 	br	401dc64 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 401dac8:	e0bffb17 	ldw	r2,-20(fp)
 401dacc:	10c00617 	ldw	r3,24(r2)
 401dad0:	008100b4 	movhi	r2,1026
 401dad4:	10b1eb04 	addi	r2,r2,-14420
 401dad8:	18800226 	beq	r3,r2,401dae4 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 401dadc:	00bfff44 	movi	r2,-3
 401dae0:	00006006 	br	401dc64 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401dae4:	e0bffe03 	ldbu	r2,-8(fp)
 401dae8:	10000a1e 	bne	r2,zero,401db14 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401daec:	e13ffb17 	ldw	r4,-20(fp)
 401daf0:	401cb280 	call	401cb28 <alt_avalon_i2c_enable>
 401daf4:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401daf8:	e0bff817 	ldw	r2,-32(fp)
 401dafc:	10000226 	beq	r2,zero,401db08 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 401db00:	e0bff817 	ldw	r2,-32(fp)
 401db04:	00005706 	br	401dc64 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401db08:	01400704 	movi	r5,28
 401db0c:	e13ffb17 	ldw	r4,-20(fp)
 401db10:	401e1140 	call	401e114 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 401db14:	e0bffe03 	ldbu	r2,-8(fp)
 401db18:	100d883a 	mov	r6,r2
 401db1c:	000b883a 	mov	r5,zero
 401db20:	e13ffb17 	ldw	r4,-20(fp)
 401db24:	401d1900 	call	401d190 <alt_avalon_i2c_send_address>
 401db28:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 401db2c:	e0bff817 	ldw	r2,-32(fp)
 401db30:	1000271e 	bne	r2,zero,401dbd0 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401db34:	00000f06 	br	401db74 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401db38:	e0bffc17 	ldw	r2,-16(fp)
 401db3c:	10800003 	ldbu	r2,0(r2)
 401db40:	10803fcc 	andi	r2,r2,255
 401db44:	000f883a 	mov	r7,zero
 401db48:	000d883a 	mov	r6,zero
 401db4c:	100b883a 	mov	r5,r2
 401db50:	e13ffb17 	ldw	r4,-20(fp)
 401db54:	401d0ac0 	call	401d0ac <alt_avalon_i2c_cmd_write>
 401db58:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 401db5c:	e0bffc17 	ldw	r2,-16(fp)
 401db60:	10800044 	addi	r2,r2,1
 401db64:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401db68:	e0bffd17 	ldw	r2,-12(fp)
 401db6c:	10bfffc4 	addi	r2,r2,-1
 401db70:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401db74:	e0bffd17 	ldw	r2,-12(fp)
 401db78:	108000b0 	cmpltui	r2,r2,2
 401db7c:	1000021e 	bne	r2,zero,401db88 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 401db80:	e0bff817 	ldw	r2,-32(fp)
 401db84:	103fec26 	beq	r2,zero,401db38 <__alt_mem_onchip_memory2_0+0xfc01c898>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401db88:	e0bff817 	ldw	r2,-32(fp)
 401db8c:	1000101e 	bne	r2,zero,401dbd0 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401db90:	e0bffc17 	ldw	r2,-16(fp)
 401db94:	10800003 	ldbu	r2,0(r2)
 401db98:	10803fcc 	andi	r2,r2,255
 401db9c:	e0ffff03 	ldbu	r3,-4(fp)
 401dba0:	180f883a 	mov	r7,r3
 401dba4:	000d883a 	mov	r6,zero
 401dba8:	100b883a 	mov	r5,r2
 401dbac:	e13ffb17 	ldw	r4,-20(fp)
 401dbb0:	401d0ac0 	call	401d0ac <alt_avalon_i2c_cmd_write>
 401dbb4:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 401dbb8:	e0bffc17 	ldw	r2,-16(fp)
 401dbbc:	10800044 	addi	r2,r2,1
 401dbc0:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401dbc4:	e0bffd17 	ldw	r2,-12(fp)
 401dbc8:	10bfffc4 	addi	r2,r2,-1
 401dbcc:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 401dbd0:	e0bff817 	ldw	r2,-32(fp)
 401dbd4:	10001426 	beq	r2,zero,401dc28 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401dbd8:	00000d06 	br	401dc10 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 401dbdc:	e0bff917 	ldw	r2,-28(fp)
 401dbe0:	108002a8 	cmpgeui	r2,r2,10
 401dbe4:	1000021e 	bne	r2,zero,401dbf0 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 401dbe8:	0109c404 	movi	r4,10000
 401dbec:	401f2480 	call	401f248 <alt_busy_sleep>
            if (--timeout == 0)
 401dbf0:	e0bff917 	ldw	r2,-28(fp)
 401dbf4:	10bfffc4 	addi	r2,r2,-1
 401dbf8:	e0bff915 	stw	r2,-28(fp)
 401dbfc:	e0bff917 	ldw	r2,-28(fp)
 401dc00:	1000031e 	bne	r2,zero,401dc10 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401dc04:	00bfff84 	movi	r2,-2
 401dc08:	e0bff815 	stw	r2,-32(fp)
               break;
 401dc0c:	00000306 	br	401dc1c <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401dc10:	e13ffb17 	ldw	r4,-20(fp)
 401dc14:	401cf180 	call	401cf18 <alt_avalon_i2c_is_busy>
 401dc18:	103ff01e 	bne	r2,zero,401dbdc <__alt_mem_onchip_memory2_0+0xfc01c93c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401dc1c:	e13ffb17 	ldw	r4,-20(fp)
 401dc20:	401cbc00 	call	401cbc0 <alt_avalon_i2c_disable>
 401dc24:	00000e06 	br	401dc60 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 401dc28:	e0bfff03 	ldbu	r2,-4(fp)
 401dc2c:	10000c26 	beq	r2,zero,401dc60 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401dc30:	01400704 	movi	r5,28
 401dc34:	e13ffb17 	ldw	r4,-20(fp)
 401dc38:	401e1140 	call	401e114 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 401dc3c:	000b883a 	mov	r5,zero
 401dc40:	e13ffb17 	ldw	r4,-20(fp)
 401dc44:	401e35c0 	call	401e35c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 401dc48:	e0bffa17 	ldw	r2,-24(fp)
 401dc4c:	00c00044 	movi	r3,1
 401dc50:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 401dc54:	01400044 	movi	r5,1
 401dc58:	e13ffb17 	ldw	r4,-20(fp)
 401dc5c:	401e1b80 	call	401e1b8 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 401dc60:	e0bff817 	ldw	r2,-32(fp)
}
 401dc64:	e037883a 	mov	sp,fp
 401dc68:	dfc00117 	ldw	ra,4(sp)
 401dc6c:	df000017 	ldw	fp,0(sp)
 401dc70:	dec00204 	addi	sp,sp,8
 401dc74:	f800283a 	ret

0401dc78 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 401dc78:	defff404 	addi	sp,sp,-48
 401dc7c:	dfc00b15 	stw	ra,44(sp)
 401dc80:	df000a15 	stw	fp,40(sp)
 401dc84:	df000a04 	addi	fp,sp,40
 401dc88:	e13ffb15 	stw	r4,-20(fp)
 401dc8c:	e17ffc15 	stw	r5,-16(fp)
 401dc90:	e1bffd15 	stw	r6,-12(fp)
 401dc94:	3807883a 	mov	r3,r7
 401dc98:	e0800217 	ldw	r2,8(fp)
 401dc9c:	e0fffe05 	stb	r3,-8(fp)
 401dca0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401dca4:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 401dca8:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 401dcac:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 401dcb0:	e0bffd17 	ldw	r2,-12(fp)
 401dcb4:	1000021e 	bne	r2,zero,401dcc0 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401dcb8:	0005883a 	mov	r2,zero
 401dcbc:	00006d06 	br	401de74 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401dcc0:	e0bffe03 	ldbu	r2,-8(fp)
 401dcc4:	10000a1e 	bne	r2,zero,401dcf0 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401dcc8:	e13ffb17 	ldw	r4,-20(fp)
 401dccc:	401cb280 	call	401cb28 <alt_avalon_i2c_enable>
 401dcd0:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401dcd4:	e0bff917 	ldw	r2,-28(fp)
 401dcd8:	10000226 	beq	r2,zero,401dce4 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 401dcdc:	e0bff917 	ldw	r2,-28(fp)
 401dce0:	00006406 	br	401de74 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401dce4:	01400704 	movi	r5,28
 401dce8:	e13ffb17 	ldw	r4,-20(fp)
 401dcec:	401e1140 	call	401e114 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 401dcf0:	e0bffe03 	ldbu	r2,-8(fp)
 401dcf4:	100d883a 	mov	r6,r2
 401dcf8:	01400044 	movi	r5,1
 401dcfc:	e13ffb17 	ldw	r4,-20(fp)
 401dd00:	401d1900 	call	401d190 <alt_avalon_i2c_send_address>
 401dd04:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 401dd08:	e0bff917 	ldw	r2,-28(fp)
 401dd0c:	1000341e 	bne	r2,zero,401dde0 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401dd10:	00001906 	br	401dd78 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401dd14:	000f883a 	mov	r7,zero
 401dd18:	000d883a 	mov	r6,zero
 401dd1c:	000b883a 	mov	r5,zero
 401dd20:	e13ffb17 	ldw	r4,-20(fp)
 401dd24:	401d0ac0 	call	401d0ac <alt_avalon_i2c_cmd_write>
 401dd28:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 401dd2c:	e0bff817 	ldw	r2,-32(fp)
 401dd30:	10800044 	addi	r2,r2,1
 401dd34:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 401dd38:	e0bff917 	ldw	r2,-28(fp)
 401dd3c:	10000e1e 	bne	r2,zero,401dd78 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 401dd40:	e0bffa04 	addi	r2,fp,-24
 401dd44:	100f883a 	mov	r7,r2
 401dd48:	000d883a 	mov	r6,zero
 401dd4c:	e17ffc17 	ldw	r5,-16(fp)
 401dd50:	e13ffb17 	ldw	r4,-20(fp)
 401dd54:	401cf5c0 	call	401cf5c <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 401dd58:	e0bffa17 	ldw	r2,-24(fp)
 401dd5c:	e0fffc17 	ldw	r3,-16(fp)
 401dd60:	1885883a 	add	r2,r3,r2
 401dd64:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 401dd68:	e0bffa17 	ldw	r2,-24(fp)
 401dd6c:	e0fff717 	ldw	r3,-36(fp)
 401dd70:	1885883a 	add	r2,r3,r2
 401dd74:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401dd78:	e0bffd17 	ldw	r2,-12(fp)
 401dd7c:	10bfffc4 	addi	r2,r2,-1
 401dd80:	e0fff817 	ldw	r3,-32(fp)
 401dd84:	1880022e 	bgeu	r3,r2,401dd90 <alt_avalon_i2c_master_receive+0x118>
 401dd88:	e0bff917 	ldw	r2,-28(fp)
 401dd8c:	103fe126 	beq	r2,zero,401dd14 <__alt_mem_onchip_memory2_0+0xfc01ca74>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401dd90:	e0bff917 	ldw	r2,-28(fp)
 401dd94:	1000121e 	bne	r2,zero,401dde0 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401dd98:	e0bfff03 	ldbu	r2,-4(fp)
 401dd9c:	100f883a 	mov	r7,r2
 401dda0:	000d883a 	mov	r6,zero
 401dda4:	000b883a 	mov	r5,zero
 401dda8:	e13ffb17 	ldw	r4,-20(fp)
 401ddac:	401d0ac0 	call	401d0ac <alt_avalon_i2c_cmd_write>
 401ddb0:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 401ddb4:	00000a06 	br	401dde0 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 401ddb8:	e17ffc17 	ldw	r5,-16(fp)
 401ddbc:	e13ffb17 	ldw	r4,-20(fp)
 401ddc0:	401d0040 	call	401d004 <alt_avalon_i2c_rx_read>
 401ddc4:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 401ddc8:	e0bffc17 	ldw	r2,-16(fp)
 401ddcc:	10800044 	addi	r2,r2,1
 401ddd0:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 401ddd4:	e0bff717 	ldw	r2,-36(fp)
 401ddd8:	10800044 	addi	r2,r2,1
 401dddc:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 401dde0:	e0fff717 	ldw	r3,-36(fp)
 401dde4:	e0bffd17 	ldw	r2,-12(fp)
 401dde8:	1880022e 	bgeu	r3,r2,401ddf4 <alt_avalon_i2c_master_receive+0x17c>
 401ddec:	e0bff917 	ldw	r2,-28(fp)
 401ddf0:	103ff126 	beq	r2,zero,401ddb8 <__alt_mem_onchip_memory2_0+0xfc01cb18>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 401ddf4:	e0bfff03 	ldbu	r2,-4(fp)
 401ddf8:	1000021e 	bne	r2,zero,401de04 <alt_avalon_i2c_master_receive+0x18c>
 401ddfc:	e0bff917 	ldw	r2,-28(fp)
 401de00:	10001b26 	beq	r2,zero,401de70 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 401de04:	0149c404 	movi	r5,10000
 401de08:	e13ffd17 	ldw	r4,-12(fp)
 401de0c:	400d7980 	call	400d798 <__mulsi3>
 401de10:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401de14:	00000d06 	br	401de4c <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401de18:	e0bff617 	ldw	r2,-40(fp)
 401de1c:	108002a8 	cmpgeui	r2,r2,10
 401de20:	1000021e 	bne	r2,zero,401de2c <alt_avalon_i2c_master_receive+0x1b4>
 401de24:	0109c404 	movi	r4,10000
 401de28:	401f2480 	call	401f248 <alt_busy_sleep>
            if (--timeout == 0)
 401de2c:	e0bff617 	ldw	r2,-40(fp)
 401de30:	10bfffc4 	addi	r2,r2,-1
 401de34:	e0bff615 	stw	r2,-40(fp)
 401de38:	e0bff617 	ldw	r2,-40(fp)
 401de3c:	1000031e 	bne	r2,zero,401de4c <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401de40:	00bfff84 	movi	r2,-2
 401de44:	e0bff915 	stw	r2,-28(fp)
               break;
 401de48:	00000306 	br	401de58 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401de4c:	e13ffb17 	ldw	r4,-20(fp)
 401de50:	401cf180 	call	401cf18 <alt_avalon_i2c_is_busy>
 401de54:	103ff01e 	bne	r2,zero,401de18 <__alt_mem_onchip_memory2_0+0xfc01cb78>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 401de58:	e0bff904 	addi	r2,fp,-28
 401de5c:	100b883a 	mov	r5,r2
 401de60:	e13ffb17 	ldw	r4,-20(fp)
 401de64:	401d2ec0 	call	401d2ec <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401de68:	e13ffb17 	ldw	r4,-20(fp)
 401de6c:	401cbc00 	call	401cbc0 <alt_avalon_i2c_disable>
    }

    return status;
 401de70:	e0bff917 	ldw	r2,-28(fp)
}
 401de74:	e037883a 	mov	sp,fp
 401de78:	dfc00117 	ldw	ra,4(sp)
 401de7c:	df000017 	ldw	fp,0(sp)
 401de80:	dec00204 	addi	sp,sp,8
 401de84:	f800283a 	ret

0401de88 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 401de88:	defff504 	addi	sp,sp,-44
 401de8c:	dfc00a15 	stw	ra,40(sp)
 401de90:	df000915 	stw	fp,36(sp)
 401de94:	df000904 	addi	fp,sp,36
 401de98:	e13ffb15 	stw	r4,-20(fp)
 401de9c:	e17ffc15 	stw	r5,-16(fp)
 401dea0:	e1bffd15 	stw	r6,-12(fp)
 401dea4:	3807883a 	mov	r3,r7
 401dea8:	e0800217 	ldw	r2,8(fp)
 401deac:	e0fffe05 	stb	r3,-8(fp)
 401deb0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401deb4:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 401deb8:	e0bffb17 	ldw	r2,-20(fp)
 401debc:	10800717 	ldw	r2,28(r2)
 401dec0:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 401dec4:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 401dec8:	e0bffd17 	ldw	r2,-12(fp)
 401decc:	1000021e 	bne	r2,zero,401ded8 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401ded0:	0005883a 	mov	r2,zero
 401ded4:	00006306 	br	401e064 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 401ded8:	e0bffb17 	ldw	r2,-20(fp)
 401dedc:	10c00617 	ldw	r3,24(r2)
 401dee0:	008100b4 	movhi	r2,1026
 401dee4:	10b1eb04 	addi	r2,r2,-14420
 401dee8:	18800226 	beq	r3,r2,401def4 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 401deec:	00bfff44 	movi	r2,-3
 401def0:	00005c06 	br	401e064 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401def4:	e0bffe03 	ldbu	r2,-8(fp)
 401def8:	10000a1e 	bne	r2,zero,401df24 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401defc:	e13ffb17 	ldw	r4,-20(fp)
 401df00:	401cb280 	call	401cb28 <alt_avalon_i2c_enable>
 401df04:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401df08:	e0bff717 	ldw	r2,-36(fp)
 401df0c:	10000226 	beq	r2,zero,401df18 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 401df10:	e0bff717 	ldw	r2,-36(fp)
 401df14:	00005306 	br	401e064 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401df18:	01400704 	movi	r5,28
 401df1c:	e13ffb17 	ldw	r4,-20(fp)
 401df20:	401e1140 	call	401e114 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 401df24:	e0bffe03 	ldbu	r2,-8(fp)
 401df28:	100d883a 	mov	r6,r2
 401df2c:	01400044 	movi	r5,1
 401df30:	e13ffb17 	ldw	r4,-20(fp)
 401df34:	401d1900 	call	401d190 <alt_avalon_i2c_send_address>
 401df38:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 401df3c:	e0bff717 	ldw	r2,-36(fp)
 401df40:	1000191e 	bne	r2,zero,401dfa8 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401df44:	00000906 	br	401df6c <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401df48:	000f883a 	mov	r7,zero
 401df4c:	000d883a 	mov	r6,zero
 401df50:	000b883a 	mov	r5,zero
 401df54:	e13ffb17 	ldw	r4,-20(fp)
 401df58:	401d0ac0 	call	401d0ac <alt_avalon_i2c_cmd_write>
 401df5c:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 401df60:	e0bff917 	ldw	r2,-28(fp)
 401df64:	10800044 	addi	r2,r2,1
 401df68:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401df6c:	e0bffd17 	ldw	r2,-12(fp)
 401df70:	10bfffc4 	addi	r2,r2,-1
 401df74:	e0fff917 	ldw	r3,-28(fp)
 401df78:	1880022e 	bgeu	r3,r2,401df84 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 401df7c:	e0bff717 	ldw	r2,-36(fp)
 401df80:	103ff126 	beq	r2,zero,401df48 <__alt_mem_onchip_memory2_0+0xfc01cca8>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401df84:	e0bff717 	ldw	r2,-36(fp)
 401df88:	1000071e 	bne	r2,zero,401dfa8 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401df8c:	e0bfff03 	ldbu	r2,-4(fp)
 401df90:	100f883a 	mov	r7,r2
 401df94:	000d883a 	mov	r6,zero
 401df98:	000b883a 	mov	r5,zero
 401df9c:	e13ffb17 	ldw	r4,-20(fp)
 401dfa0:	401d0ac0 	call	401d0ac <alt_avalon_i2c_cmd_write>
 401dfa4:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 401dfa8:	e0bff717 	ldw	r2,-36(fp)
 401dfac:	10001826 	beq	r2,zero,401e010 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 401dfb0:	0149c404 	movi	r5,10000
 401dfb4:	e13ffd17 	ldw	r4,-12(fp)
 401dfb8:	400d7980 	call	400d798 <__mulsi3>
 401dfbc:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401dfc0:	00000d06 	br	401dff8 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401dfc4:	e0bff817 	ldw	r2,-32(fp)
 401dfc8:	108002a8 	cmpgeui	r2,r2,10
 401dfcc:	1000021e 	bne	r2,zero,401dfd8 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 401dfd0:	0109c404 	movi	r4,10000
 401dfd4:	401f2480 	call	401f248 <alt_busy_sleep>
            if (--timeout == 0)
 401dfd8:	e0bff817 	ldw	r2,-32(fp)
 401dfdc:	10bfffc4 	addi	r2,r2,-1
 401dfe0:	e0bff815 	stw	r2,-32(fp)
 401dfe4:	e0bff817 	ldw	r2,-32(fp)
 401dfe8:	1000031e 	bne	r2,zero,401dff8 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401dfec:	00bfff84 	movi	r2,-2
 401dff0:	e0bff715 	stw	r2,-36(fp)
               break;
 401dff4:	00000306 	br	401e004 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401dff8:	e13ffb17 	ldw	r4,-20(fp)
 401dffc:	401cf180 	call	401cf18 <alt_avalon_i2c_is_busy>
 401e000:	103ff01e 	bne	r2,zero,401dfc4 <__alt_mem_onchip_memory2_0+0xfc01cd24>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401e004:	e13ffb17 	ldw	r4,-20(fp)
 401e008:	401cbc00 	call	401cbc0 <alt_avalon_i2c_disable>
 401e00c:	00001406 	br	401e060 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 401e010:	e0bfff03 	ldbu	r2,-4(fp)
 401e014:	10001226 	beq	r2,zero,401e060 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401e018:	01400704 	movi	r5,28
 401e01c:	e13ffb17 	ldw	r4,-20(fp)
 401e020:	401e1140 	call	401e114 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 401e024:	000b883a 	mov	r5,zero
 401e028:	e13ffb17 	ldw	r4,-20(fp)
 401e02c:	401e2ac0 	call	401e2ac <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 401e030:	e0bffa17 	ldw	r2,-24(fp)
 401e034:	00c00084 	movi	r3,2
 401e038:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 401e03c:	e0bffa17 	ldw	r2,-24(fp)
 401e040:	e0fffc17 	ldw	r3,-16(fp)
 401e044:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 401e048:	e0bffa17 	ldw	r2,-24(fp)
 401e04c:	e0fffd17 	ldw	r3,-12(fp)
 401e050:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 401e054:	01400084 	movi	r5,2
 401e058:	e13ffb17 	ldw	r4,-20(fp)
 401e05c:	401e1b80 	call	401e1b8 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 401e060:	e0bff717 	ldw	r2,-36(fp)
}
 401e064:	e037883a 	mov	sp,fp
 401e068:	dfc00117 	ldw	ra,4(sp)
 401e06c:	df000017 	ldw	fp,0(sp)
 401e070:	dec00204 	addi	sp,sp,8
 401e074:	f800283a 	ret

0401e078 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 401e078:	defffd04 	addi	sp,sp,-12
 401e07c:	df000215 	stw	fp,8(sp)
 401e080:	df000204 	addi	fp,sp,8
 401e084:	e13ffe15 	stw	r4,-8(fp)
 401e088:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 401e08c:	e0bffe17 	ldw	r2,-8(fp)
 401e090:	10800317 	ldw	r2,12(r2)
 401e094:	10800404 	addi	r2,r2,16
 401e098:	10c00037 	ldwio	r3,0(r2)
 401e09c:	e0bffe17 	ldw	r2,-8(fp)
 401e0a0:	10800317 	ldw	r2,12(r2)
 401e0a4:	10800304 	addi	r2,r2,12
 401e0a8:	10800037 	ldwio	r2,0(r2)
 401e0ac:	1884703a 	and	r2,r3,r2
 401e0b0:	1007883a 	mov	r3,r2
 401e0b4:	e0bfff17 	ldw	r2,-4(fp)
 401e0b8:	10c00015 	stw	r3,0(r2)
}
 401e0bc:	0001883a 	nop
 401e0c0:	e037883a 	mov	sp,fp
 401e0c4:	df000017 	ldw	fp,0(sp)
 401e0c8:	dec00104 	addi	sp,sp,4
 401e0cc:	f800283a 	ret

0401e0d0 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 401e0d0:	defffd04 	addi	sp,sp,-12
 401e0d4:	df000215 	stw	fp,8(sp)
 401e0d8:	df000204 	addi	fp,sp,8
 401e0dc:	e13ffe15 	stw	r4,-8(fp)
 401e0e0:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 401e0e4:	e0bffe17 	ldw	r2,-8(fp)
 401e0e8:	10800317 	ldw	r2,12(r2)
 401e0ec:	10800404 	addi	r2,r2,16
 401e0f0:	10800037 	ldwio	r2,0(r2)
 401e0f4:	1007883a 	mov	r3,r2
 401e0f8:	e0bfff17 	ldw	r2,-4(fp)
 401e0fc:	10c00015 	stw	r3,0(r2)
}
 401e100:	0001883a 	nop
 401e104:	e037883a 	mov	sp,fp
 401e108:	df000017 	ldw	fp,0(sp)
 401e10c:	dec00104 	addi	sp,sp,4
 401e110:	f800283a 	ret

0401e114 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 401e114:	defffd04 	addi	sp,sp,-12
 401e118:	df000215 	stw	fp,8(sp)
 401e11c:	df000204 	addi	fp,sp,8
 401e120:	e13ffe15 	stw	r4,-8(fp)
 401e124:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 401e128:	e0bffe17 	ldw	r2,-8(fp)
 401e12c:	10800317 	ldw	r2,12(r2)
 401e130:	10800404 	addi	r2,r2,16
 401e134:	e0ffff17 	ldw	r3,-4(fp)
 401e138:	10c00035 	stwio	r3,0(r2)
}
 401e13c:	0001883a 	nop
 401e140:	e037883a 	mov	sp,fp
 401e144:	df000017 	ldw	fp,0(sp)
 401e148:	dec00104 	addi	sp,sp,4
 401e14c:	f800283a 	ret

0401e150 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 401e150:	defffb04 	addi	sp,sp,-20
 401e154:	dfc00415 	stw	ra,16(sp)
 401e158:	df000315 	stw	fp,12(sp)
 401e15c:	df000304 	addi	fp,sp,12
 401e160:	e13ffe15 	stw	r4,-8(fp)
 401e164:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 401e168:	e17ffd04 	addi	r5,fp,-12
 401e16c:	e13ffe17 	ldw	r4,-8(fp)
 401e170:	401e21c0 	call	401e21c <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 401e174:	e0bfff17 	ldw	r2,-4(fp)
 401e178:	0086303a 	nor	r3,zero,r2
 401e17c:	e0bffd17 	ldw	r2,-12(fp)
 401e180:	1884703a 	and	r2,r3,r2
 401e184:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 401e188:	e0bffe17 	ldw	r2,-8(fp)
 401e18c:	10800317 	ldw	r2,12(r2)
 401e190:	10800304 	addi	r2,r2,12
 401e194:	e0fffd17 	ldw	r3,-12(fp)
 401e198:	18c007cc 	andi	r3,r3,31
 401e19c:	10c00035 	stwio	r3,0(r2)
}
 401e1a0:	0001883a 	nop
 401e1a4:	e037883a 	mov	sp,fp
 401e1a8:	dfc00117 	ldw	ra,4(sp)
 401e1ac:	df000017 	ldw	fp,0(sp)
 401e1b0:	dec00204 	addi	sp,sp,8
 401e1b4:	f800283a 	ret

0401e1b8 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 401e1b8:	defffb04 	addi	sp,sp,-20
 401e1bc:	dfc00415 	stw	ra,16(sp)
 401e1c0:	df000315 	stw	fp,12(sp)
 401e1c4:	df000304 	addi	fp,sp,12
 401e1c8:	e13ffe15 	stw	r4,-8(fp)
 401e1cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 401e1d0:	e17ffd04 	addi	r5,fp,-12
 401e1d4:	e13ffe17 	ldw	r4,-8(fp)
 401e1d8:	401e21c0 	call	401e21c <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 401e1dc:	e0fffd17 	ldw	r3,-12(fp)
 401e1e0:	e0bfff17 	ldw	r2,-4(fp)
 401e1e4:	1884b03a 	or	r2,r3,r2
 401e1e8:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 401e1ec:	e0bffe17 	ldw	r2,-8(fp)
 401e1f0:	10800317 	ldw	r2,12(r2)
 401e1f4:	10800304 	addi	r2,r2,12
 401e1f8:	e0fffd17 	ldw	r3,-12(fp)
 401e1fc:	18c007cc 	andi	r3,r3,31
 401e200:	10c00035 	stwio	r3,0(r2)
}
 401e204:	0001883a 	nop
 401e208:	e037883a 	mov	sp,fp
 401e20c:	dfc00117 	ldw	ra,4(sp)
 401e210:	df000017 	ldw	fp,0(sp)
 401e214:	dec00204 	addi	sp,sp,8
 401e218:	f800283a 	ret

0401e21c <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 401e21c:	defffd04 	addi	sp,sp,-12
 401e220:	df000215 	stw	fp,8(sp)
 401e224:	df000204 	addi	fp,sp,8
 401e228:	e13ffe15 	stw	r4,-8(fp)
 401e22c:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 401e230:	e0bffe17 	ldw	r2,-8(fp)
 401e234:	10800317 	ldw	r2,12(r2)
 401e238:	10800304 	addi	r2,r2,12
 401e23c:	10800037 	ldwio	r2,0(r2)
 401e240:	10c007cc 	andi	r3,r2,31
 401e244:	e0bfff17 	ldw	r2,-4(fp)
 401e248:	10c00015 	stw	r3,0(r2)
}
 401e24c:	0001883a 	nop
 401e250:	e037883a 	mov	sp,fp
 401e254:	df000017 	ldw	fp,0(sp)
 401e258:	dec00104 	addi	sp,sp,4
 401e25c:	f800283a 	ret

0401e260 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 401e260:	defffd04 	addi	sp,sp,-12
 401e264:	df000215 	stw	fp,8(sp)
 401e268:	df000204 	addi	fp,sp,8
 401e26c:	e13ffe15 	stw	r4,-8(fp)
 401e270:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 401e274:	e0bffe17 	ldw	r2,-8(fp)
 401e278:	10800317 	ldw	r2,12(r2)
 401e27c:	10800204 	addi	r2,r2,8
 401e280:	10800037 	ldwio	r2,0(r2)
 401e284:	10800c0c 	andi	r2,r2,48
 401e288:	1005d13a 	srai	r2,r2,4
 401e28c:	1007883a 	mov	r3,r2
 401e290:	e0bfff17 	ldw	r2,-4(fp)
 401e294:	10c00015 	stw	r3,0(r2)
}
 401e298:	0001883a 	nop
 401e29c:	e037883a 	mov	sp,fp
 401e2a0:	df000017 	ldw	fp,0(sp)
 401e2a4:	dec00104 	addi	sp,sp,4
 401e2a8:	f800283a 	ret

0401e2ac <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 401e2ac:	defffd04 	addi	sp,sp,-12
 401e2b0:	df000215 	stw	fp,8(sp)
 401e2b4:	df000204 	addi	fp,sp,8
 401e2b8:	e13ffe15 	stw	r4,-8(fp)
 401e2bc:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 401e2c0:	e0bffe17 	ldw	r2,-8(fp)
 401e2c4:	10800317 	ldw	r2,12(r2)
 401e2c8:	10800204 	addi	r2,r2,8
 401e2cc:	e0fffe17 	ldw	r3,-8(fp)
 401e2d0:	18c00317 	ldw	r3,12(r3)
 401e2d4:	18c00204 	addi	r3,r3,8
 401e2d8:	18c00037 	ldwio	r3,0(r3)
 401e2dc:	1809883a 	mov	r4,r3
 401e2e0:	00fff3c4 	movi	r3,-49
 401e2e4:	20c8703a 	and	r4,r4,r3
 401e2e8:	e0ffff17 	ldw	r3,-4(fp)
 401e2ec:	1806913a 	slli	r3,r3,4
 401e2f0:	18c00c0c 	andi	r3,r3,48
 401e2f4:	20c6b03a 	or	r3,r4,r3
 401e2f8:	10c00035 	stwio	r3,0(r2)
}
 401e2fc:	0001883a 	nop
 401e300:	e037883a 	mov	sp,fp
 401e304:	df000017 	ldw	fp,0(sp)
 401e308:	dec00104 	addi	sp,sp,4
 401e30c:	f800283a 	ret

0401e310 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 401e310:	defffd04 	addi	sp,sp,-12
 401e314:	df000215 	stw	fp,8(sp)
 401e318:	df000204 	addi	fp,sp,8
 401e31c:	e13ffe15 	stw	r4,-8(fp)
 401e320:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 401e324:	e0bffe17 	ldw	r2,-8(fp)
 401e328:	10800317 	ldw	r2,12(r2)
 401e32c:	10800204 	addi	r2,r2,8
 401e330:	10800037 	ldwio	r2,0(r2)
 401e334:	1080030c 	andi	r2,r2,12
 401e338:	1005d0ba 	srai	r2,r2,2
 401e33c:	1007883a 	mov	r3,r2
 401e340:	e0bfff17 	ldw	r2,-4(fp)
 401e344:	10c00015 	stw	r3,0(r2)
}
 401e348:	0001883a 	nop
 401e34c:	e037883a 	mov	sp,fp
 401e350:	df000017 	ldw	fp,0(sp)
 401e354:	dec00104 	addi	sp,sp,4
 401e358:	f800283a 	ret

0401e35c <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 401e35c:	defffd04 	addi	sp,sp,-12
 401e360:	df000215 	stw	fp,8(sp)
 401e364:	df000204 	addi	fp,sp,8
 401e368:	e13ffe15 	stw	r4,-8(fp)
 401e36c:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 401e370:	e0bffe17 	ldw	r2,-8(fp)
 401e374:	10800317 	ldw	r2,12(r2)
 401e378:	10c00204 	addi	r3,r2,8
 401e37c:	e0bffe17 	ldw	r2,-8(fp)
 401e380:	10800317 	ldw	r2,12(r2)
 401e384:	10800204 	addi	r2,r2,8
 401e388:	10800037 	ldwio	r2,0(r2)
 401e38c:	1009883a 	mov	r4,r2
 401e390:	00bffcc4 	movi	r2,-13
 401e394:	2088703a 	and	r4,r4,r2
 401e398:	e0bfff17 	ldw	r2,-4(fp)
 401e39c:	1085883a 	add	r2,r2,r2
 401e3a0:	1085883a 	add	r2,r2,r2
 401e3a4:	1080030c 	andi	r2,r2,12
 401e3a8:	2084b03a 	or	r2,r4,r2
 401e3ac:	18800035 	stwio	r2,0(r3)
}
 401e3b0:	0001883a 	nop
 401e3b4:	e037883a 	mov	sp,fp
 401e3b8:	df000017 	ldw	fp,0(sp)
 401e3bc:	dec00104 	addi	sp,sp,4
 401e3c0:	f800283a 	ret

0401e3c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 401e3c4:	defffa04 	addi	sp,sp,-24
 401e3c8:	dfc00515 	stw	ra,20(sp)
 401e3cc:	df000415 	stw	fp,16(sp)
 401e3d0:	df000404 	addi	fp,sp,16
 401e3d4:	e13ffd15 	stw	r4,-12(fp)
 401e3d8:	e17ffe15 	stw	r5,-8(fp)
 401e3dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401e3e0:	e0bffd17 	ldw	r2,-12(fp)
 401e3e4:	10800017 	ldw	r2,0(r2)
 401e3e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 401e3ec:	e0bffc17 	ldw	r2,-16(fp)
 401e3f0:	10c00a04 	addi	r3,r2,40
 401e3f4:	e0bffd17 	ldw	r2,-12(fp)
 401e3f8:	10800217 	ldw	r2,8(r2)
 401e3fc:	100f883a 	mov	r7,r2
 401e400:	e1bfff17 	ldw	r6,-4(fp)
 401e404:	e17ffe17 	ldw	r5,-8(fp)
 401e408:	1809883a 	mov	r4,r3
 401e40c:	401e9ec0 	call	401e9ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 401e410:	e037883a 	mov	sp,fp
 401e414:	dfc00117 	ldw	ra,4(sp)
 401e418:	df000017 	ldw	fp,0(sp)
 401e41c:	dec00204 	addi	sp,sp,8
 401e420:	f800283a 	ret

0401e424 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 401e424:	defffa04 	addi	sp,sp,-24
 401e428:	dfc00515 	stw	ra,20(sp)
 401e42c:	df000415 	stw	fp,16(sp)
 401e430:	df000404 	addi	fp,sp,16
 401e434:	e13ffd15 	stw	r4,-12(fp)
 401e438:	e17ffe15 	stw	r5,-8(fp)
 401e43c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401e440:	e0bffd17 	ldw	r2,-12(fp)
 401e444:	10800017 	ldw	r2,0(r2)
 401e448:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 401e44c:	e0bffc17 	ldw	r2,-16(fp)
 401e450:	10c00a04 	addi	r3,r2,40
 401e454:	e0bffd17 	ldw	r2,-12(fp)
 401e458:	10800217 	ldw	r2,8(r2)
 401e45c:	100f883a 	mov	r7,r2
 401e460:	e1bfff17 	ldw	r6,-4(fp)
 401e464:	e17ffe17 	ldw	r5,-8(fp)
 401e468:	1809883a 	mov	r4,r3
 401e46c:	401ec080 	call	401ec08 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 401e470:	e037883a 	mov	sp,fp
 401e474:	dfc00117 	ldw	ra,4(sp)
 401e478:	df000017 	ldw	fp,0(sp)
 401e47c:	dec00204 	addi	sp,sp,8
 401e480:	f800283a 	ret

0401e484 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 401e484:	defffc04 	addi	sp,sp,-16
 401e488:	dfc00315 	stw	ra,12(sp)
 401e48c:	df000215 	stw	fp,8(sp)
 401e490:	df000204 	addi	fp,sp,8
 401e494:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401e498:	e0bfff17 	ldw	r2,-4(fp)
 401e49c:	10800017 	ldw	r2,0(r2)
 401e4a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 401e4a4:	e0bffe17 	ldw	r2,-8(fp)
 401e4a8:	10c00a04 	addi	r3,r2,40
 401e4ac:	e0bfff17 	ldw	r2,-4(fp)
 401e4b0:	10800217 	ldw	r2,8(r2)
 401e4b4:	100b883a 	mov	r5,r2
 401e4b8:	1809883a 	mov	r4,r3
 401e4bc:	401e8940 	call	401e894 <altera_avalon_jtag_uart_close>
}
 401e4c0:	e037883a 	mov	sp,fp
 401e4c4:	dfc00117 	ldw	ra,4(sp)
 401e4c8:	df000017 	ldw	fp,0(sp)
 401e4cc:	dec00204 	addi	sp,sp,8
 401e4d0:	f800283a 	ret

0401e4d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 401e4d4:	defffa04 	addi	sp,sp,-24
 401e4d8:	dfc00515 	stw	ra,20(sp)
 401e4dc:	df000415 	stw	fp,16(sp)
 401e4e0:	df000404 	addi	fp,sp,16
 401e4e4:	e13ffd15 	stw	r4,-12(fp)
 401e4e8:	e17ffe15 	stw	r5,-8(fp)
 401e4ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 401e4f0:	e0bffd17 	ldw	r2,-12(fp)
 401e4f4:	10800017 	ldw	r2,0(r2)
 401e4f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 401e4fc:	e0bffc17 	ldw	r2,-16(fp)
 401e500:	10800a04 	addi	r2,r2,40
 401e504:	e1bfff17 	ldw	r6,-4(fp)
 401e508:	e17ffe17 	ldw	r5,-8(fp)
 401e50c:	1009883a 	mov	r4,r2
 401e510:	401e8fc0 	call	401e8fc <altera_avalon_jtag_uart_ioctl>
}
 401e514:	e037883a 	mov	sp,fp
 401e518:	dfc00117 	ldw	ra,4(sp)
 401e51c:	df000017 	ldw	fp,0(sp)
 401e520:	dec00204 	addi	sp,sp,8
 401e524:	f800283a 	ret

0401e528 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 401e528:	defffa04 	addi	sp,sp,-24
 401e52c:	dfc00515 	stw	ra,20(sp)
 401e530:	df000415 	stw	fp,16(sp)
 401e534:	df000404 	addi	fp,sp,16
 401e538:	e13ffd15 	stw	r4,-12(fp)
 401e53c:	e17ffe15 	stw	r5,-8(fp)
 401e540:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401e544:	e0bffd17 	ldw	r2,-12(fp)
 401e548:	00c00044 	movi	r3,1
 401e54c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 401e550:	e0bffd17 	ldw	r2,-12(fp)
 401e554:	10800017 	ldw	r2,0(r2)
 401e558:	10800104 	addi	r2,r2,4
 401e55c:	1007883a 	mov	r3,r2
 401e560:	e0bffd17 	ldw	r2,-12(fp)
 401e564:	10800817 	ldw	r2,32(r2)
 401e568:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 401e56c:	e0bffe17 	ldw	r2,-8(fp)
 401e570:	e0ffff17 	ldw	r3,-4(fp)
 401e574:	d8000015 	stw	zero,0(sp)
 401e578:	e1fffd17 	ldw	r7,-12(fp)
 401e57c:	018100b4 	movhi	r6,1026
 401e580:	31b97a04 	addi	r6,r6,-6680
 401e584:	180b883a 	mov	r5,r3
 401e588:	1009883a 	mov	r4,r2
 401e58c:	401f6100 	call	401f610 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 401e590:	e0bffd17 	ldw	r2,-12(fp)
 401e594:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 401e598:	e0bffd17 	ldw	r2,-12(fp)
 401e59c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401e5a0:	d0f24717 	ldw	r3,-14052(gp)
 401e5a4:	e1fffd17 	ldw	r7,-12(fp)
 401e5a8:	018100b4 	movhi	r6,1026
 401e5ac:	31b9fd04 	addi	r6,r6,-6156
 401e5b0:	180b883a 	mov	r5,r3
 401e5b4:	1009883a 	mov	r4,r2
 401e5b8:	401f11c0 	call	401f11c <alt_alarm_start>
 401e5bc:	1000040e 	bge	r2,zero,401e5d0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 401e5c0:	e0fffd17 	ldw	r3,-12(fp)
 401e5c4:	00a00034 	movhi	r2,32768
 401e5c8:	10bfffc4 	addi	r2,r2,-1
 401e5cc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 401e5d0:	0001883a 	nop
 401e5d4:	e037883a 	mov	sp,fp
 401e5d8:	dfc00117 	ldw	ra,4(sp)
 401e5dc:	df000017 	ldw	fp,0(sp)
 401e5e0:	dec00204 	addi	sp,sp,8
 401e5e4:	f800283a 	ret

0401e5e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 401e5e8:	defff804 	addi	sp,sp,-32
 401e5ec:	df000715 	stw	fp,28(sp)
 401e5f0:	df000704 	addi	fp,sp,28
 401e5f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 401e5f8:	e0bfff17 	ldw	r2,-4(fp)
 401e5fc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 401e600:	e0bffb17 	ldw	r2,-20(fp)
 401e604:	10800017 	ldw	r2,0(r2)
 401e608:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401e60c:	e0bffc17 	ldw	r2,-16(fp)
 401e610:	10800104 	addi	r2,r2,4
 401e614:	10800037 	ldwio	r2,0(r2)
 401e618:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 401e61c:	e0bffd17 	ldw	r2,-12(fp)
 401e620:	1080c00c 	andi	r2,r2,768
 401e624:	10006d26 	beq	r2,zero,401e7dc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 401e628:	e0bffd17 	ldw	r2,-12(fp)
 401e62c:	1080400c 	andi	r2,r2,256
 401e630:	10003526 	beq	r2,zero,401e708 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 401e634:	00800074 	movhi	r2,1
 401e638:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e63c:	e0bffb17 	ldw	r2,-20(fp)
 401e640:	10800a17 	ldw	r2,40(r2)
 401e644:	10800044 	addi	r2,r2,1
 401e648:	1081ffcc 	andi	r2,r2,2047
 401e64c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 401e650:	e0bffb17 	ldw	r2,-20(fp)
 401e654:	10c00b17 	ldw	r3,44(r2)
 401e658:	e0bffe17 	ldw	r2,-8(fp)
 401e65c:	18801526 	beq	r3,r2,401e6b4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 401e660:	e0bffc17 	ldw	r2,-16(fp)
 401e664:	10800037 	ldwio	r2,0(r2)
 401e668:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 401e66c:	e0bff917 	ldw	r2,-28(fp)
 401e670:	10a0000c 	andi	r2,r2,32768
 401e674:	10001126 	beq	r2,zero,401e6bc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 401e678:	e0bffb17 	ldw	r2,-20(fp)
 401e67c:	10800a17 	ldw	r2,40(r2)
 401e680:	e0fff917 	ldw	r3,-28(fp)
 401e684:	1809883a 	mov	r4,r3
 401e688:	e0fffb17 	ldw	r3,-20(fp)
 401e68c:	1885883a 	add	r2,r3,r2
 401e690:	10800e04 	addi	r2,r2,56
 401e694:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e698:	e0bffb17 	ldw	r2,-20(fp)
 401e69c:	10800a17 	ldw	r2,40(r2)
 401e6a0:	10800044 	addi	r2,r2,1
 401e6a4:	10c1ffcc 	andi	r3,r2,2047
 401e6a8:	e0bffb17 	ldw	r2,-20(fp)
 401e6ac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 401e6b0:	003fe206 	br	401e63c <__alt_mem_onchip_memory2_0+0xfc01d39c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 401e6b4:	0001883a 	nop
 401e6b8:	00000106 	br	401e6c0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 401e6bc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 401e6c0:	e0bff917 	ldw	r2,-28(fp)
 401e6c4:	10bfffec 	andhi	r2,r2,65535
 401e6c8:	10000f26 	beq	r2,zero,401e708 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401e6cc:	e0bffb17 	ldw	r2,-20(fp)
 401e6d0:	10c00817 	ldw	r3,32(r2)
 401e6d4:	00bfff84 	movi	r2,-2
 401e6d8:	1886703a 	and	r3,r3,r2
 401e6dc:	e0bffb17 	ldw	r2,-20(fp)
 401e6e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 401e6e4:	e0bffc17 	ldw	r2,-16(fp)
 401e6e8:	10800104 	addi	r2,r2,4
 401e6ec:	1007883a 	mov	r3,r2
 401e6f0:	e0bffb17 	ldw	r2,-20(fp)
 401e6f4:	10800817 	ldw	r2,32(r2)
 401e6f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401e6fc:	e0bffc17 	ldw	r2,-16(fp)
 401e700:	10800104 	addi	r2,r2,4
 401e704:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 401e708:	e0bffd17 	ldw	r2,-12(fp)
 401e70c:	1080800c 	andi	r2,r2,512
 401e710:	103fbe26 	beq	r2,zero,401e60c <__alt_mem_onchip_memory2_0+0xfc01d36c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 401e714:	e0bffd17 	ldw	r2,-12(fp)
 401e718:	1004d43a 	srli	r2,r2,16
 401e71c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 401e720:	00001406 	br	401e774 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 401e724:	e0bffc17 	ldw	r2,-16(fp)
 401e728:	e0fffb17 	ldw	r3,-20(fp)
 401e72c:	18c00d17 	ldw	r3,52(r3)
 401e730:	e13ffb17 	ldw	r4,-20(fp)
 401e734:	20c7883a 	add	r3,r4,r3
 401e738:	18c20e04 	addi	r3,r3,2104
 401e73c:	18c00003 	ldbu	r3,0(r3)
 401e740:	18c03fcc 	andi	r3,r3,255
 401e744:	18c0201c 	xori	r3,r3,128
 401e748:	18ffe004 	addi	r3,r3,-128
 401e74c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e750:	e0bffb17 	ldw	r2,-20(fp)
 401e754:	10800d17 	ldw	r2,52(r2)
 401e758:	10800044 	addi	r2,r2,1
 401e75c:	10c1ffcc 	andi	r3,r2,2047
 401e760:	e0bffb17 	ldw	r2,-20(fp)
 401e764:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 401e768:	e0bffa17 	ldw	r2,-24(fp)
 401e76c:	10bfffc4 	addi	r2,r2,-1
 401e770:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 401e774:	e0bffa17 	ldw	r2,-24(fp)
 401e778:	10000526 	beq	r2,zero,401e790 <altera_avalon_jtag_uart_irq+0x1a8>
 401e77c:	e0bffb17 	ldw	r2,-20(fp)
 401e780:	10c00d17 	ldw	r3,52(r2)
 401e784:	e0bffb17 	ldw	r2,-20(fp)
 401e788:	10800c17 	ldw	r2,48(r2)
 401e78c:	18bfe51e 	bne	r3,r2,401e724 <__alt_mem_onchip_memory2_0+0xfc01d484>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 401e790:	e0bffa17 	ldw	r2,-24(fp)
 401e794:	103f9d26 	beq	r2,zero,401e60c <__alt_mem_onchip_memory2_0+0xfc01d36c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401e798:	e0bffb17 	ldw	r2,-20(fp)
 401e79c:	10c00817 	ldw	r3,32(r2)
 401e7a0:	00bfff44 	movi	r2,-3
 401e7a4:	1886703a 	and	r3,r3,r2
 401e7a8:	e0bffb17 	ldw	r2,-20(fp)
 401e7ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401e7b0:	e0bffb17 	ldw	r2,-20(fp)
 401e7b4:	10800017 	ldw	r2,0(r2)
 401e7b8:	10800104 	addi	r2,r2,4
 401e7bc:	1007883a 	mov	r3,r2
 401e7c0:	e0bffb17 	ldw	r2,-20(fp)
 401e7c4:	10800817 	ldw	r2,32(r2)
 401e7c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401e7cc:	e0bffc17 	ldw	r2,-16(fp)
 401e7d0:	10800104 	addi	r2,r2,4
 401e7d4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 401e7d8:	003f8c06 	br	401e60c <__alt_mem_onchip_memory2_0+0xfc01d36c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 401e7dc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 401e7e0:	0001883a 	nop
 401e7e4:	e037883a 	mov	sp,fp
 401e7e8:	df000017 	ldw	fp,0(sp)
 401e7ec:	dec00104 	addi	sp,sp,4
 401e7f0:	f800283a 	ret

0401e7f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 401e7f4:	defff804 	addi	sp,sp,-32
 401e7f8:	df000715 	stw	fp,28(sp)
 401e7fc:	df000704 	addi	fp,sp,28
 401e800:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 401e804:	e0bffb17 	ldw	r2,-20(fp)
 401e808:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 401e80c:	e0bff917 	ldw	r2,-28(fp)
 401e810:	10800017 	ldw	r2,0(r2)
 401e814:	10800104 	addi	r2,r2,4
 401e818:	10800037 	ldwio	r2,0(r2)
 401e81c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 401e820:	e0bffa17 	ldw	r2,-24(fp)
 401e824:	1081000c 	andi	r2,r2,1024
 401e828:	10000b26 	beq	r2,zero,401e858 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 401e82c:	e0bff917 	ldw	r2,-28(fp)
 401e830:	10800017 	ldw	r2,0(r2)
 401e834:	10800104 	addi	r2,r2,4
 401e838:	1007883a 	mov	r3,r2
 401e83c:	e0bff917 	ldw	r2,-28(fp)
 401e840:	10800817 	ldw	r2,32(r2)
 401e844:	10810014 	ori	r2,r2,1024
 401e848:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 401e84c:	e0bff917 	ldw	r2,-28(fp)
 401e850:	10000915 	stw	zero,36(r2)
 401e854:	00000a06 	br	401e880 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 401e858:	e0bff917 	ldw	r2,-28(fp)
 401e85c:	10c00917 	ldw	r3,36(r2)
 401e860:	00a00034 	movhi	r2,32768
 401e864:	10bfff04 	addi	r2,r2,-4
 401e868:	10c00536 	bltu	r2,r3,401e880 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 401e86c:	e0bff917 	ldw	r2,-28(fp)
 401e870:	10800917 	ldw	r2,36(r2)
 401e874:	10c00044 	addi	r3,r2,1
 401e878:	e0bff917 	ldw	r2,-28(fp)
 401e87c:	10c00915 	stw	r3,36(r2)
 401e880:	d0b24717 	ldw	r2,-14052(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 401e884:	e037883a 	mov	sp,fp
 401e888:	df000017 	ldw	fp,0(sp)
 401e88c:	dec00104 	addi	sp,sp,4
 401e890:	f800283a 	ret

0401e894 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 401e894:	defffd04 	addi	sp,sp,-12
 401e898:	df000215 	stw	fp,8(sp)
 401e89c:	df000204 	addi	fp,sp,8
 401e8a0:	e13ffe15 	stw	r4,-8(fp)
 401e8a4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401e8a8:	00000506 	br	401e8c0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 401e8ac:	e0bfff17 	ldw	r2,-4(fp)
 401e8b0:	1090000c 	andi	r2,r2,16384
 401e8b4:	10000226 	beq	r2,zero,401e8c0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 401e8b8:	00bffd44 	movi	r2,-11
 401e8bc:	00000b06 	br	401e8ec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401e8c0:	e0bffe17 	ldw	r2,-8(fp)
 401e8c4:	10c00d17 	ldw	r3,52(r2)
 401e8c8:	e0bffe17 	ldw	r2,-8(fp)
 401e8cc:	10800c17 	ldw	r2,48(r2)
 401e8d0:	18800526 	beq	r3,r2,401e8e8 <altera_avalon_jtag_uart_close+0x54>
 401e8d4:	e0bffe17 	ldw	r2,-8(fp)
 401e8d8:	10c00917 	ldw	r3,36(r2)
 401e8dc:	e0bffe17 	ldw	r2,-8(fp)
 401e8e0:	10800117 	ldw	r2,4(r2)
 401e8e4:	18bff136 	bltu	r3,r2,401e8ac <__alt_mem_onchip_memory2_0+0xfc01d60c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 401e8e8:	0005883a 	mov	r2,zero
}
 401e8ec:	e037883a 	mov	sp,fp
 401e8f0:	df000017 	ldw	fp,0(sp)
 401e8f4:	dec00104 	addi	sp,sp,4
 401e8f8:	f800283a 	ret

0401e8fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 401e8fc:	defffa04 	addi	sp,sp,-24
 401e900:	df000515 	stw	fp,20(sp)
 401e904:	df000504 	addi	fp,sp,20
 401e908:	e13ffd15 	stw	r4,-12(fp)
 401e90c:	e17ffe15 	stw	r5,-8(fp)
 401e910:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 401e914:	00bff9c4 	movi	r2,-25
 401e918:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 401e91c:	e0bffe17 	ldw	r2,-8(fp)
 401e920:	10da8060 	cmpeqi	r3,r2,27137
 401e924:	1800031e 	bne	r3,zero,401e934 <altera_avalon_jtag_uart_ioctl+0x38>
 401e928:	109a80a0 	cmpeqi	r2,r2,27138
 401e92c:	1000181e 	bne	r2,zero,401e990 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 401e930:	00002906 	br	401e9d8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 401e934:	e0bffd17 	ldw	r2,-12(fp)
 401e938:	10c00117 	ldw	r3,4(r2)
 401e93c:	00a00034 	movhi	r2,32768
 401e940:	10bfffc4 	addi	r2,r2,-1
 401e944:	18802126 	beq	r3,r2,401e9cc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 401e948:	e0bfff17 	ldw	r2,-4(fp)
 401e94c:	10800017 	ldw	r2,0(r2)
 401e950:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 401e954:	e0bffc17 	ldw	r2,-16(fp)
 401e958:	10800090 	cmplti	r2,r2,2
 401e95c:	1000061e 	bne	r2,zero,401e978 <altera_avalon_jtag_uart_ioctl+0x7c>
 401e960:	e0fffc17 	ldw	r3,-16(fp)
 401e964:	00a00034 	movhi	r2,32768
 401e968:	10bfffc4 	addi	r2,r2,-1
 401e96c:	18800226 	beq	r3,r2,401e978 <altera_avalon_jtag_uart_ioctl+0x7c>
 401e970:	e0bffc17 	ldw	r2,-16(fp)
 401e974:	00000206 	br	401e980 <altera_avalon_jtag_uart_ioctl+0x84>
 401e978:	00a00034 	movhi	r2,32768
 401e97c:	10bfff84 	addi	r2,r2,-2
 401e980:	e0fffd17 	ldw	r3,-12(fp)
 401e984:	18800115 	stw	r2,4(r3)
      rc = 0;
 401e988:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401e98c:	00000f06 	br	401e9cc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401e990:	e0bffd17 	ldw	r2,-12(fp)
 401e994:	10c00117 	ldw	r3,4(r2)
 401e998:	00a00034 	movhi	r2,32768
 401e99c:	10bfffc4 	addi	r2,r2,-1
 401e9a0:	18800c26 	beq	r3,r2,401e9d4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 401e9a4:	e0bffd17 	ldw	r2,-12(fp)
 401e9a8:	10c00917 	ldw	r3,36(r2)
 401e9ac:	e0bffd17 	ldw	r2,-12(fp)
 401e9b0:	10800117 	ldw	r2,4(r2)
 401e9b4:	1885803a 	cmpltu	r2,r3,r2
 401e9b8:	10c03fcc 	andi	r3,r2,255
 401e9bc:	e0bfff17 	ldw	r2,-4(fp)
 401e9c0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 401e9c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401e9c8:	00000206 	br	401e9d4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 401e9cc:	0001883a 	nop
 401e9d0:	00000106 	br	401e9d8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 401e9d4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 401e9d8:	e0bffb17 	ldw	r2,-20(fp)
}
 401e9dc:	e037883a 	mov	sp,fp
 401e9e0:	df000017 	ldw	fp,0(sp)
 401e9e4:	dec00104 	addi	sp,sp,4
 401e9e8:	f800283a 	ret

0401e9ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 401e9ec:	defff304 	addi	sp,sp,-52
 401e9f0:	dfc00c15 	stw	ra,48(sp)
 401e9f4:	df000b15 	stw	fp,44(sp)
 401e9f8:	df000b04 	addi	fp,sp,44
 401e9fc:	e13ffc15 	stw	r4,-16(fp)
 401ea00:	e17ffd15 	stw	r5,-12(fp)
 401ea04:	e1bffe15 	stw	r6,-8(fp)
 401ea08:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 401ea0c:	e0bffd17 	ldw	r2,-12(fp)
 401ea10:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401ea14:	00004706 	br	401eb34 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401ea18:	e0bffc17 	ldw	r2,-16(fp)
 401ea1c:	10800a17 	ldw	r2,40(r2)
 401ea20:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 401ea24:	e0bffc17 	ldw	r2,-16(fp)
 401ea28:	10800b17 	ldw	r2,44(r2)
 401ea2c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 401ea30:	e0fff717 	ldw	r3,-36(fp)
 401ea34:	e0bff817 	ldw	r2,-32(fp)
 401ea38:	18800536 	bltu	r3,r2,401ea50 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 401ea3c:	e0fff717 	ldw	r3,-36(fp)
 401ea40:	e0bff817 	ldw	r2,-32(fp)
 401ea44:	1885c83a 	sub	r2,r3,r2
 401ea48:	e0bff615 	stw	r2,-40(fp)
 401ea4c:	00000406 	br	401ea60 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 401ea50:	00c20004 	movi	r3,2048
 401ea54:	e0bff817 	ldw	r2,-32(fp)
 401ea58:	1885c83a 	sub	r2,r3,r2
 401ea5c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401ea60:	e0bff617 	ldw	r2,-40(fp)
 401ea64:	10001e26 	beq	r2,zero,401eae0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 401ea68:	e0fffe17 	ldw	r3,-8(fp)
 401ea6c:	e0bff617 	ldw	r2,-40(fp)
 401ea70:	1880022e 	bgeu	r3,r2,401ea7c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 401ea74:	e0bffe17 	ldw	r2,-8(fp)
 401ea78:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 401ea7c:	e0bffc17 	ldw	r2,-16(fp)
 401ea80:	10c00e04 	addi	r3,r2,56
 401ea84:	e0bff817 	ldw	r2,-32(fp)
 401ea88:	1885883a 	add	r2,r3,r2
 401ea8c:	e1bff617 	ldw	r6,-40(fp)
 401ea90:	100b883a 	mov	r5,r2
 401ea94:	e13ff517 	ldw	r4,-44(fp)
 401ea98:	400f10c0 	call	400f10c <memcpy>
      ptr   += n;
 401ea9c:	e0fff517 	ldw	r3,-44(fp)
 401eaa0:	e0bff617 	ldw	r2,-40(fp)
 401eaa4:	1885883a 	add	r2,r3,r2
 401eaa8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 401eaac:	e0fffe17 	ldw	r3,-8(fp)
 401eab0:	e0bff617 	ldw	r2,-40(fp)
 401eab4:	1885c83a 	sub	r2,r3,r2
 401eab8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401eabc:	e0fff817 	ldw	r3,-32(fp)
 401eac0:	e0bff617 	ldw	r2,-40(fp)
 401eac4:	1885883a 	add	r2,r3,r2
 401eac8:	10c1ffcc 	andi	r3,r2,2047
 401eacc:	e0bffc17 	ldw	r2,-16(fp)
 401ead0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 401ead4:	e0bffe17 	ldw	r2,-8(fp)
 401ead8:	00bfcf16 	blt	zero,r2,401ea18 <__alt_mem_onchip_memory2_0+0xfc01d778>
 401eadc:	00000106 	br	401eae4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 401eae0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 401eae4:	e0fff517 	ldw	r3,-44(fp)
 401eae8:	e0bffd17 	ldw	r2,-12(fp)
 401eaec:	1880141e 	bne	r3,r2,401eb40 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401eaf0:	e0bfff17 	ldw	r2,-4(fp)
 401eaf4:	1090000c 	andi	r2,r2,16384
 401eaf8:	1000131e 	bne	r2,zero,401eb48 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 401eafc:	0001883a 	nop
 401eb00:	e0bffc17 	ldw	r2,-16(fp)
 401eb04:	10c00a17 	ldw	r3,40(r2)
 401eb08:	e0bff717 	ldw	r2,-36(fp)
 401eb0c:	1880051e 	bne	r3,r2,401eb24 <altera_avalon_jtag_uart_read+0x138>
 401eb10:	e0bffc17 	ldw	r2,-16(fp)
 401eb14:	10c00917 	ldw	r3,36(r2)
 401eb18:	e0bffc17 	ldw	r2,-16(fp)
 401eb1c:	10800117 	ldw	r2,4(r2)
 401eb20:	18bff736 	bltu	r3,r2,401eb00 <__alt_mem_onchip_memory2_0+0xfc01d860>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 401eb24:	e0bffc17 	ldw	r2,-16(fp)
 401eb28:	10c00a17 	ldw	r3,40(r2)
 401eb2c:	e0bff717 	ldw	r2,-36(fp)
 401eb30:	18800726 	beq	r3,r2,401eb50 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401eb34:	e0bffe17 	ldw	r2,-8(fp)
 401eb38:	00bfb716 	blt	zero,r2,401ea18 <__alt_mem_onchip_memory2_0+0xfc01d778>
 401eb3c:	00000506 	br	401eb54 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 401eb40:	0001883a 	nop
 401eb44:	00000306 	br	401eb54 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 401eb48:	0001883a 	nop
 401eb4c:	00000106 	br	401eb54 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 401eb50:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 401eb54:	e0fff517 	ldw	r3,-44(fp)
 401eb58:	e0bffd17 	ldw	r2,-12(fp)
 401eb5c:	18801826 	beq	r3,r2,401ebc0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401eb60:	0005303a 	rdctl	r2,status
 401eb64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401eb68:	e0fffb17 	ldw	r3,-20(fp)
 401eb6c:	00bfff84 	movi	r2,-2
 401eb70:	1884703a 	and	r2,r3,r2
 401eb74:	1001703a 	wrctl	status,r2
  
  return context;
 401eb78:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 401eb7c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401eb80:	e0bffc17 	ldw	r2,-16(fp)
 401eb84:	10800817 	ldw	r2,32(r2)
 401eb88:	10c00054 	ori	r3,r2,1
 401eb8c:	e0bffc17 	ldw	r2,-16(fp)
 401eb90:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401eb94:	e0bffc17 	ldw	r2,-16(fp)
 401eb98:	10800017 	ldw	r2,0(r2)
 401eb9c:	10800104 	addi	r2,r2,4
 401eba0:	1007883a 	mov	r3,r2
 401eba4:	e0bffc17 	ldw	r2,-16(fp)
 401eba8:	10800817 	ldw	r2,32(r2)
 401ebac:	18800035 	stwio	r2,0(r3)
 401ebb0:	e0bffa17 	ldw	r2,-24(fp)
 401ebb4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ebb8:	e0bff917 	ldw	r2,-28(fp)
 401ebbc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 401ebc0:	e0fff517 	ldw	r3,-44(fp)
 401ebc4:	e0bffd17 	ldw	r2,-12(fp)
 401ebc8:	18800426 	beq	r3,r2,401ebdc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 401ebcc:	e0fff517 	ldw	r3,-44(fp)
 401ebd0:	e0bffd17 	ldw	r2,-12(fp)
 401ebd4:	1885c83a 	sub	r2,r3,r2
 401ebd8:	00000606 	br	401ebf4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 401ebdc:	e0bfff17 	ldw	r2,-4(fp)
 401ebe0:	1090000c 	andi	r2,r2,16384
 401ebe4:	10000226 	beq	r2,zero,401ebf0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 401ebe8:	00bffd44 	movi	r2,-11
 401ebec:	00000106 	br	401ebf4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 401ebf0:	00bffec4 	movi	r2,-5
}
 401ebf4:	e037883a 	mov	sp,fp
 401ebf8:	dfc00117 	ldw	ra,4(sp)
 401ebfc:	df000017 	ldw	fp,0(sp)
 401ec00:	dec00204 	addi	sp,sp,8
 401ec04:	f800283a 	ret

0401ec08 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401ec08:	defff304 	addi	sp,sp,-52
 401ec0c:	dfc00c15 	stw	ra,48(sp)
 401ec10:	df000b15 	stw	fp,44(sp)
 401ec14:	df000b04 	addi	fp,sp,44
 401ec18:	e13ffc15 	stw	r4,-16(fp)
 401ec1c:	e17ffd15 	stw	r5,-12(fp)
 401ec20:	e1bffe15 	stw	r6,-8(fp)
 401ec24:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401ec28:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 401ec2c:	e0bffd17 	ldw	r2,-12(fp)
 401ec30:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401ec34:	00003706 	br	401ed14 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 401ec38:	e0bffc17 	ldw	r2,-16(fp)
 401ec3c:	10800c17 	ldw	r2,48(r2)
 401ec40:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 401ec44:	e0bffc17 	ldw	r2,-16(fp)
 401ec48:	10800d17 	ldw	r2,52(r2)
 401ec4c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 401ec50:	e0fff917 	ldw	r3,-28(fp)
 401ec54:	e0bff517 	ldw	r2,-44(fp)
 401ec58:	1880062e 	bgeu	r3,r2,401ec74 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 401ec5c:	e0fff517 	ldw	r3,-44(fp)
 401ec60:	e0bff917 	ldw	r2,-28(fp)
 401ec64:	1885c83a 	sub	r2,r3,r2
 401ec68:	10bfffc4 	addi	r2,r2,-1
 401ec6c:	e0bff615 	stw	r2,-40(fp)
 401ec70:	00000b06 	br	401eca0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 401ec74:	e0bff517 	ldw	r2,-44(fp)
 401ec78:	10000526 	beq	r2,zero,401ec90 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 401ec7c:	00c20004 	movi	r3,2048
 401ec80:	e0bff917 	ldw	r2,-28(fp)
 401ec84:	1885c83a 	sub	r2,r3,r2
 401ec88:	e0bff615 	stw	r2,-40(fp)
 401ec8c:	00000406 	br	401eca0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 401ec90:	00c1ffc4 	movi	r3,2047
 401ec94:	e0bff917 	ldw	r2,-28(fp)
 401ec98:	1885c83a 	sub	r2,r3,r2
 401ec9c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401eca0:	e0bff617 	ldw	r2,-40(fp)
 401eca4:	10001e26 	beq	r2,zero,401ed20 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 401eca8:	e0fffe17 	ldw	r3,-8(fp)
 401ecac:	e0bff617 	ldw	r2,-40(fp)
 401ecb0:	1880022e 	bgeu	r3,r2,401ecbc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 401ecb4:	e0bffe17 	ldw	r2,-8(fp)
 401ecb8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 401ecbc:	e0bffc17 	ldw	r2,-16(fp)
 401ecc0:	10c20e04 	addi	r3,r2,2104
 401ecc4:	e0bff917 	ldw	r2,-28(fp)
 401ecc8:	1885883a 	add	r2,r3,r2
 401eccc:	e1bff617 	ldw	r6,-40(fp)
 401ecd0:	e17ffd17 	ldw	r5,-12(fp)
 401ecd4:	1009883a 	mov	r4,r2
 401ecd8:	400f10c0 	call	400f10c <memcpy>
      ptr   += n;
 401ecdc:	e0fffd17 	ldw	r3,-12(fp)
 401ece0:	e0bff617 	ldw	r2,-40(fp)
 401ece4:	1885883a 	add	r2,r3,r2
 401ece8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 401ecec:	e0fffe17 	ldw	r3,-8(fp)
 401ecf0:	e0bff617 	ldw	r2,-40(fp)
 401ecf4:	1885c83a 	sub	r2,r3,r2
 401ecf8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401ecfc:	e0fff917 	ldw	r3,-28(fp)
 401ed00:	e0bff617 	ldw	r2,-40(fp)
 401ed04:	1885883a 	add	r2,r3,r2
 401ed08:	10c1ffcc 	andi	r3,r2,2047
 401ed0c:	e0bffc17 	ldw	r2,-16(fp)
 401ed10:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401ed14:	e0bffe17 	ldw	r2,-8(fp)
 401ed18:	00bfc716 	blt	zero,r2,401ec38 <__alt_mem_onchip_memory2_0+0xfc01d998>
 401ed1c:	00000106 	br	401ed24 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 401ed20:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ed24:	0005303a 	rdctl	r2,status
 401ed28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ed2c:	e0fffb17 	ldw	r3,-20(fp)
 401ed30:	00bfff84 	movi	r2,-2
 401ed34:	1884703a 	and	r2,r3,r2
 401ed38:	1001703a 	wrctl	status,r2
  
  return context;
 401ed3c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 401ed40:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401ed44:	e0bffc17 	ldw	r2,-16(fp)
 401ed48:	10800817 	ldw	r2,32(r2)
 401ed4c:	10c00094 	ori	r3,r2,2
 401ed50:	e0bffc17 	ldw	r2,-16(fp)
 401ed54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401ed58:	e0bffc17 	ldw	r2,-16(fp)
 401ed5c:	10800017 	ldw	r2,0(r2)
 401ed60:	10800104 	addi	r2,r2,4
 401ed64:	1007883a 	mov	r3,r2
 401ed68:	e0bffc17 	ldw	r2,-16(fp)
 401ed6c:	10800817 	ldw	r2,32(r2)
 401ed70:	18800035 	stwio	r2,0(r3)
 401ed74:	e0bffa17 	ldw	r2,-24(fp)
 401ed78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ed7c:	e0bff817 	ldw	r2,-32(fp)
 401ed80:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 401ed84:	e0bffe17 	ldw	r2,-8(fp)
 401ed88:	0080100e 	bge	zero,r2,401edcc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 401ed8c:	e0bfff17 	ldw	r2,-4(fp)
 401ed90:	1090000c 	andi	r2,r2,16384
 401ed94:	1000101e 	bne	r2,zero,401edd8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401ed98:	0001883a 	nop
 401ed9c:	e0bffc17 	ldw	r2,-16(fp)
 401eda0:	10c00d17 	ldw	r3,52(r2)
 401eda4:	e0bff517 	ldw	r2,-44(fp)
 401eda8:	1880051e 	bne	r3,r2,401edc0 <altera_avalon_jtag_uart_write+0x1b8>
 401edac:	e0bffc17 	ldw	r2,-16(fp)
 401edb0:	10c00917 	ldw	r3,36(r2)
 401edb4:	e0bffc17 	ldw	r2,-16(fp)
 401edb8:	10800117 	ldw	r2,4(r2)
 401edbc:	18bff736 	bltu	r3,r2,401ed9c <__alt_mem_onchip_memory2_0+0xfc01dafc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 401edc0:	e0bffc17 	ldw	r2,-16(fp)
 401edc4:	10800917 	ldw	r2,36(r2)
 401edc8:	1000051e 	bne	r2,zero,401ede0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 401edcc:	e0bffe17 	ldw	r2,-8(fp)
 401edd0:	00bfd016 	blt	zero,r2,401ed14 <__alt_mem_onchip_memory2_0+0xfc01da74>
 401edd4:	00000306 	br	401ede4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401edd8:	0001883a 	nop
 401eddc:	00000106 	br	401ede4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 401ede0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 401ede4:	e0fffd17 	ldw	r3,-12(fp)
 401ede8:	e0bff717 	ldw	r2,-36(fp)
 401edec:	18800426 	beq	r3,r2,401ee00 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 401edf0:	e0fffd17 	ldw	r3,-12(fp)
 401edf4:	e0bff717 	ldw	r2,-36(fp)
 401edf8:	1885c83a 	sub	r2,r3,r2
 401edfc:	00000606 	br	401ee18 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 401ee00:	e0bfff17 	ldw	r2,-4(fp)
 401ee04:	1090000c 	andi	r2,r2,16384
 401ee08:	10000226 	beq	r2,zero,401ee14 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 401ee0c:	00bffd44 	movi	r2,-11
 401ee10:	00000106 	br	401ee18 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 401ee14:	00bffec4 	movi	r2,-5
}
 401ee18:	e037883a 	mov	sp,fp
 401ee1c:	dfc00117 	ldw	ra,4(sp)
 401ee20:	df000017 	ldw	fp,0(sp)
 401ee24:	dec00204 	addi	sp,sp,8
 401ee28:	f800283a 	ret

0401ee2c <alt_avalon_spi_command>:
 401ee2c:	defff404 	addi	sp,sp,-48
 401ee30:	df000b15 	stw	fp,44(sp)
 401ee34:	df000b04 	addi	fp,sp,44
 401ee38:	e13ffc15 	stw	r4,-16(fp)
 401ee3c:	e17ffd15 	stw	r5,-12(fp)
 401ee40:	e1bffe15 	stw	r6,-8(fp)
 401ee44:	e1ffff15 	stw	r7,-4(fp)
 401ee48:	e0ffff17 	ldw	r3,-4(fp)
 401ee4c:	e0bffe17 	ldw	r2,-8(fp)
 401ee50:	1885883a 	add	r2,r3,r2
 401ee54:	e0bff815 	stw	r2,-32(fp)
 401ee58:	e0c00217 	ldw	r3,8(fp)
 401ee5c:	e0800117 	ldw	r2,4(fp)
 401ee60:	1885883a 	add	r2,r3,r2
 401ee64:	e0bff915 	stw	r2,-28(fp)
 401ee68:	e0800117 	ldw	r2,4(fp)
 401ee6c:	e0bff515 	stw	r2,-44(fp)
 401ee70:	e0bffe17 	ldw	r2,-8(fp)
 401ee74:	e0bff615 	stw	r2,-40(fp)
 401ee78:	00800044 	movi	r2,1
 401ee7c:	e0bff715 	stw	r2,-36(fp)
 401ee80:	e0bffc17 	ldw	r2,-16(fp)
 401ee84:	10800504 	addi	r2,r2,20
 401ee88:	1009883a 	mov	r4,r2
 401ee8c:	00c00044 	movi	r3,1
 401ee90:	e0bffd17 	ldw	r2,-12(fp)
 401ee94:	1884983a 	sll	r2,r3,r2
 401ee98:	20800035 	stwio	r2,0(r4)
 401ee9c:	e0800317 	ldw	r2,12(fp)
 401eea0:	1080008c 	andi	r2,r2,2
 401eea4:	1000051e 	bne	r2,zero,401eebc <alt_avalon_spi_command+0x90>
 401eea8:	e0bffc17 	ldw	r2,-16(fp)
 401eeac:	10800304 	addi	r2,r2,12
 401eeb0:	1007883a 	mov	r3,r2
 401eeb4:	00810004 	movi	r2,1024
 401eeb8:	18800035 	stwio	r2,0(r3)
 401eebc:	e0bffc17 	ldw	r2,-16(fp)
 401eec0:	10800037 	ldwio	r2,0(r2)
 401eec4:	e0bffc17 	ldw	r2,-16(fp)
 401eec8:	10800204 	addi	r2,r2,8
 401eecc:	10800037 	ldwio	r2,0(r2)
 401eed0:	e0bffa15 	stw	r2,-24(fp)
 401eed4:	e0bffa17 	ldw	r2,-24(fp)
 401eed8:	1080100c 	andi	r2,r2,64
 401eedc:	10000226 	beq	r2,zero,401eee8 <alt_avalon_spi_command+0xbc>
 401eee0:	e0bff717 	ldw	r2,-36(fp)
 401eee4:	1000031e 	bne	r2,zero,401eef4 <alt_avalon_spi_command+0xc8>
 401eee8:	e0bffa17 	ldw	r2,-24(fp)
 401eeec:	1080200c 	andi	r2,r2,128
 401eef0:	103ff426 	beq	r2,zero,401eec4 <__alt_mem_onchip_memory2_0+0xfc01dc24>
 401eef4:	e0bffa17 	ldw	r2,-24(fp)
 401eef8:	1080100c 	andi	r2,r2,64
 401eefc:	10001e26 	beq	r2,zero,401ef78 <alt_avalon_spi_command+0x14c>
 401ef00:	e0bff717 	ldw	r2,-36(fp)
 401ef04:	00801c0e 	bge	zero,r2,401ef78 <alt_avalon_spi_command+0x14c>
 401ef08:	e0bff717 	ldw	r2,-36(fp)
 401ef0c:	10bfffc4 	addi	r2,r2,-1
 401ef10:	e0bff715 	stw	r2,-36(fp)
 401ef14:	e0ffff17 	ldw	r3,-4(fp)
 401ef18:	e0bff817 	ldw	r2,-32(fp)
 401ef1c:	18800a2e 	bgeu	r3,r2,401ef48 <alt_avalon_spi_command+0x11c>
 401ef20:	e0bffc17 	ldw	r2,-16(fp)
 401ef24:	10800104 	addi	r2,r2,4
 401ef28:	1009883a 	mov	r4,r2
 401ef2c:	e0bfff17 	ldw	r2,-4(fp)
 401ef30:	10c00044 	addi	r3,r2,1
 401ef34:	e0ffff15 	stw	r3,-4(fp)
 401ef38:	10800003 	ldbu	r2,0(r2)
 401ef3c:	10803fcc 	andi	r2,r2,255
 401ef40:	20800035 	stwio	r2,0(r4)
 401ef44:	00000c06 	br	401ef78 <alt_avalon_spi_command+0x14c>
 401ef48:	e0bff517 	ldw	r2,-44(fp)
 401ef4c:	10000826 	beq	r2,zero,401ef70 <alt_avalon_spi_command+0x144>
 401ef50:	e0bff517 	ldw	r2,-44(fp)
 401ef54:	10bfffc4 	addi	r2,r2,-1
 401ef58:	e0bff515 	stw	r2,-44(fp)
 401ef5c:	e0bffc17 	ldw	r2,-16(fp)
 401ef60:	10800104 	addi	r2,r2,4
 401ef64:	0007883a 	mov	r3,zero
 401ef68:	10c00035 	stwio	r3,0(r2)
 401ef6c:	00000206 	br	401ef78 <alt_avalon_spi_command+0x14c>
 401ef70:	00bf0004 	movi	r2,-1024
 401ef74:	e0bff715 	stw	r2,-36(fp)
 401ef78:	e0bffa17 	ldw	r2,-24(fp)
 401ef7c:	1080200c 	andi	r2,r2,128
 401ef80:	103fd026 	beq	r2,zero,401eec4 <__alt_mem_onchip_memory2_0+0xfc01dc24>
 401ef84:	e0bffc17 	ldw	r2,-16(fp)
 401ef88:	10800037 	ldwio	r2,0(r2)
 401ef8c:	e0bffb15 	stw	r2,-20(fp)
 401ef90:	e0bff617 	ldw	r2,-40(fp)
 401ef94:	10000426 	beq	r2,zero,401efa8 <alt_avalon_spi_command+0x17c>
 401ef98:	e0bff617 	ldw	r2,-40(fp)
 401ef9c:	10bfffc4 	addi	r2,r2,-1
 401efa0:	e0bff615 	stw	r2,-40(fp)
 401efa4:	00000506 	br	401efbc <alt_avalon_spi_command+0x190>
 401efa8:	e0800217 	ldw	r2,8(fp)
 401efac:	10c00044 	addi	r3,r2,1
 401efb0:	e0c00215 	stw	r3,8(fp)
 401efb4:	e0fffb17 	ldw	r3,-20(fp)
 401efb8:	10c00005 	stb	r3,0(r2)
 401efbc:	e0bff717 	ldw	r2,-36(fp)
 401efc0:	10800044 	addi	r2,r2,1
 401efc4:	e0bff715 	stw	r2,-36(fp)
 401efc8:	e0bff617 	ldw	r2,-40(fp)
 401efcc:	103fbd1e 	bne	r2,zero,401eec4 <__alt_mem_onchip_memory2_0+0xfc01dc24>
 401efd0:	e0c00217 	ldw	r3,8(fp)
 401efd4:	e0bff917 	ldw	r2,-28(fp)
 401efd8:	18bfba1e 	bne	r3,r2,401eec4 <__alt_mem_onchip_memory2_0+0xfc01dc24>
 401efdc:	e0bffc17 	ldw	r2,-16(fp)
 401efe0:	10800204 	addi	r2,r2,8
 401efe4:	10800037 	ldwio	r2,0(r2)
 401efe8:	e0bffa15 	stw	r2,-24(fp)
 401efec:	e0bffa17 	ldw	r2,-24(fp)
 401eff0:	1080080c 	andi	r2,r2,32
 401eff4:	103ff926 	beq	r2,zero,401efdc <__alt_mem_onchip_memory2_0+0xfc01dd3c>
 401eff8:	e0800317 	ldw	r2,12(fp)
 401effc:	1080004c 	andi	r2,r2,1
 401f000:	1000041e 	bne	r2,zero,401f014 <alt_avalon_spi_command+0x1e8>
 401f004:	e0bffc17 	ldw	r2,-16(fp)
 401f008:	10800304 	addi	r2,r2,12
 401f00c:	0007883a 	mov	r3,zero
 401f010:	10c00035 	stwio	r3,0(r2)
 401f014:	e0800117 	ldw	r2,4(fp)
 401f018:	e037883a 	mov	sp,fp
 401f01c:	df000017 	ldw	fp,0(sp)
 401f020:	dec00104 	addi	sp,sp,4
 401f024:	f800283a 	ret

0401f028 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 401f028:	defffa04 	addi	sp,sp,-24
 401f02c:	dfc00515 	stw	ra,20(sp)
 401f030:	df000415 	stw	fp,16(sp)
 401f034:	df000404 	addi	fp,sp,16
 401f038:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 401f03c:	0007883a 	mov	r3,zero
 401f040:	e0bfff17 	ldw	r2,-4(fp)
 401f044:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401f048:	e0bfff17 	ldw	r2,-4(fp)
 401f04c:	10800104 	addi	r2,r2,4
 401f050:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f054:	0005303a 	rdctl	r2,status
 401f058:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f05c:	e0fffd17 	ldw	r3,-12(fp)
 401f060:	00bfff84 	movi	r2,-2
 401f064:	1884703a 	and	r2,r3,r2
 401f068:	1001703a 	wrctl	status,r2
  
  return context;
 401f06c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 401f070:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 401f074:	401ff980 	call	401ff98 <alt_tick>
 401f078:	e0bffc17 	ldw	r2,-16(fp)
 401f07c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f080:	e0bffe17 	ldw	r2,-8(fp)
 401f084:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 401f088:	0001883a 	nop
 401f08c:	e037883a 	mov	sp,fp
 401f090:	dfc00117 	ldw	ra,4(sp)
 401f094:	df000017 	ldw	fp,0(sp)
 401f098:	dec00204 	addi	sp,sp,8
 401f09c:	f800283a 	ret

0401f0a0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 401f0a0:	defff804 	addi	sp,sp,-32
 401f0a4:	dfc00715 	stw	ra,28(sp)
 401f0a8:	df000615 	stw	fp,24(sp)
 401f0ac:	df000604 	addi	fp,sp,24
 401f0b0:	e13ffc15 	stw	r4,-16(fp)
 401f0b4:	e17ffd15 	stw	r5,-12(fp)
 401f0b8:	e1bffe15 	stw	r6,-8(fp)
 401f0bc:	e1ffff15 	stw	r7,-4(fp)
 401f0c0:	e0bfff17 	ldw	r2,-4(fp)
 401f0c4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 401f0c8:	d0b24717 	ldw	r2,-14052(gp)
 401f0cc:	1000021e 	bne	r2,zero,401f0d8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 401f0d0:	e0bffb17 	ldw	r2,-20(fp)
 401f0d4:	d0b24715 	stw	r2,-14052(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401f0d8:	e0bffc17 	ldw	r2,-16(fp)
 401f0dc:	10800104 	addi	r2,r2,4
 401f0e0:	00c001c4 	movi	r3,7
 401f0e4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 401f0e8:	d8000015 	stw	zero,0(sp)
 401f0ec:	e1fffc17 	ldw	r7,-16(fp)
 401f0f0:	018100b4 	movhi	r6,1026
 401f0f4:	31bc0a04 	addi	r6,r6,-4056
 401f0f8:	e17ffe17 	ldw	r5,-8(fp)
 401f0fc:	e13ffd17 	ldw	r4,-12(fp)
 401f100:	401f6100 	call	401f610 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401f104:	0001883a 	nop
 401f108:	e037883a 	mov	sp,fp
 401f10c:	dfc00117 	ldw	ra,4(sp)
 401f110:	df000017 	ldw	fp,0(sp)
 401f114:	dec00204 	addi	sp,sp,8
 401f118:	f800283a 	ret

0401f11c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 401f11c:	defff504 	addi	sp,sp,-44
 401f120:	df000a15 	stw	fp,40(sp)
 401f124:	df000a04 	addi	fp,sp,40
 401f128:	e13ffc15 	stw	r4,-16(fp)
 401f12c:	e17ffd15 	stw	r5,-12(fp)
 401f130:	e1bffe15 	stw	r6,-8(fp)
 401f134:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 401f138:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401f13c:	d0b24717 	ldw	r2,-14052(gp)
  
  if (alt_ticks_per_second ())
 401f140:	10003c26 	beq	r2,zero,401f234 <alt_alarm_start+0x118>
  {
    if (alarm)
 401f144:	e0bffc17 	ldw	r2,-16(fp)
 401f148:	10003826 	beq	r2,zero,401f22c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 401f14c:	e0bffc17 	ldw	r2,-16(fp)
 401f150:	e0fffe17 	ldw	r3,-8(fp)
 401f154:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 401f158:	e0bffc17 	ldw	r2,-16(fp)
 401f15c:	e0ffff17 	ldw	r3,-4(fp)
 401f160:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f164:	0005303a 	rdctl	r2,status
 401f168:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f16c:	e0fff917 	ldw	r3,-28(fp)
 401f170:	00bfff84 	movi	r2,-2
 401f174:	1884703a 	and	r2,r3,r2
 401f178:	1001703a 	wrctl	status,r2
  
  return context;
 401f17c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 401f180:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401f184:	d0b24817 	ldw	r2,-14048(gp)
      
      current_nticks = alt_nticks();
 401f188:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 401f18c:	e0fffd17 	ldw	r3,-12(fp)
 401f190:	e0bff617 	ldw	r2,-40(fp)
 401f194:	1885883a 	add	r2,r3,r2
 401f198:	10c00044 	addi	r3,r2,1
 401f19c:	e0bffc17 	ldw	r2,-16(fp)
 401f1a0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 401f1a4:	e0bffc17 	ldw	r2,-16(fp)
 401f1a8:	10c00217 	ldw	r3,8(r2)
 401f1ac:	e0bff617 	ldw	r2,-40(fp)
 401f1b0:	1880042e 	bgeu	r3,r2,401f1c4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 401f1b4:	e0bffc17 	ldw	r2,-16(fp)
 401f1b8:	00c00044 	movi	r3,1
 401f1bc:	10c00405 	stb	r3,16(r2)
 401f1c0:	00000206 	br	401f1cc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 401f1c4:	e0bffc17 	ldw	r2,-16(fp)
 401f1c8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 401f1cc:	e0bffc17 	ldw	r2,-16(fp)
 401f1d0:	d0e5bc04 	addi	r3,gp,-26896
 401f1d4:	e0fffa15 	stw	r3,-24(fp)
 401f1d8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401f1dc:	e0bffb17 	ldw	r2,-20(fp)
 401f1e0:	e0fffa17 	ldw	r3,-24(fp)
 401f1e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401f1e8:	e0bffa17 	ldw	r2,-24(fp)
 401f1ec:	10c00017 	ldw	r3,0(r2)
 401f1f0:	e0bffb17 	ldw	r2,-20(fp)
 401f1f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401f1f8:	e0bffa17 	ldw	r2,-24(fp)
 401f1fc:	10800017 	ldw	r2,0(r2)
 401f200:	e0fffb17 	ldw	r3,-20(fp)
 401f204:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401f208:	e0bffa17 	ldw	r2,-24(fp)
 401f20c:	e0fffb17 	ldw	r3,-20(fp)
 401f210:	10c00015 	stw	r3,0(r2)
 401f214:	e0bff817 	ldw	r2,-32(fp)
 401f218:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f21c:	e0bff717 	ldw	r2,-36(fp)
 401f220:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 401f224:	0005883a 	mov	r2,zero
 401f228:	00000306 	br	401f238 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 401f22c:	00bffa84 	movi	r2,-22
 401f230:	00000106 	br	401f238 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 401f234:	00bfde84 	movi	r2,-134
  }
}
 401f238:	e037883a 	mov	sp,fp
 401f23c:	df000017 	ldw	fp,0(sp)
 401f240:	dec00104 	addi	sp,sp,4
 401f244:	f800283a 	ret

0401f248 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 401f248:	defffa04 	addi	sp,sp,-24
 401f24c:	dfc00515 	stw	ra,20(sp)
 401f250:	df000415 	stw	fp,16(sp)
 401f254:	df000404 	addi	fp,sp,16
 401f258:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 401f25c:	00800244 	movi	r2,9
 401f260:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 401f264:	014003f4 	movhi	r5,15
 401f268:	29509004 	addi	r5,r5,16960
 401f26c:	e13ffd17 	ldw	r4,-12(fp)
 401f270:	400d7980 	call	400d798 <__mulsi3>
 401f274:	100b883a 	mov	r5,r2
 401f278:	0100bef4 	movhi	r4,763
 401f27c:	213c2004 	addi	r4,r4,-3968
 401f280:	400d6dc0 	call	400d6dc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401f284:	100b883a 	mov	r5,r2
 401f288:	01200034 	movhi	r4,32768
 401f28c:	213fffc4 	addi	r4,r4,-1
 401f290:	400d6dc0 	call	400d6dc <__udivsi3>
 401f294:	100b883a 	mov	r5,r2
 401f298:	e13fff17 	ldw	r4,-4(fp)
 401f29c:	400d6dc0 	call	400d6dc <__udivsi3>
 401f2a0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 401f2a4:	e0bffe17 	ldw	r2,-8(fp)
 401f2a8:	10002a26 	beq	r2,zero,401f354 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 401f2ac:	e03ffc15 	stw	zero,-16(fp)
 401f2b0:	00001706 	br	401f310 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 401f2b4:	00a00034 	movhi	r2,32768
 401f2b8:	10bfffc4 	addi	r2,r2,-1
 401f2bc:	10bfffc4 	addi	r2,r2,-1
 401f2c0:	103ffe1e 	bne	r2,zero,401f2bc <__alt_mem_onchip_memory2_0+0xfc01e01c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 401f2c4:	014003f4 	movhi	r5,15
 401f2c8:	29509004 	addi	r5,r5,16960
 401f2cc:	e13ffd17 	ldw	r4,-12(fp)
 401f2d0:	400d7980 	call	400d798 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 401f2d4:	100b883a 	mov	r5,r2
 401f2d8:	0100bef4 	movhi	r4,763
 401f2dc:	213c2004 	addi	r4,r4,-3968
 401f2e0:	400d6dc0 	call	400d6dc <__udivsi3>
 401f2e4:	100b883a 	mov	r5,r2
 401f2e8:	01200034 	movhi	r4,32768
 401f2ec:	213fffc4 	addi	r4,r4,-1
 401f2f0:	400d6dc0 	call	400d6dc <__udivsi3>
 401f2f4:	1007883a 	mov	r3,r2
 401f2f8:	e0bfff17 	ldw	r2,-4(fp)
 401f2fc:	10c5c83a 	sub	r2,r2,r3
 401f300:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 401f304:	e0bffc17 	ldw	r2,-16(fp)
 401f308:	10800044 	addi	r2,r2,1
 401f30c:	e0bffc15 	stw	r2,-16(fp)
 401f310:	e0fffc17 	ldw	r3,-16(fp)
 401f314:	e0bffe17 	ldw	r2,-8(fp)
 401f318:	18bfe616 	blt	r3,r2,401f2b4 <__alt_mem_onchip_memory2_0+0xfc01e014>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401f31c:	014003f4 	movhi	r5,15
 401f320:	29509004 	addi	r5,r5,16960
 401f324:	e13ffd17 	ldw	r4,-12(fp)
 401f328:	400d7980 	call	400d798 <__mulsi3>
 401f32c:	100b883a 	mov	r5,r2
 401f330:	0100bef4 	movhi	r4,763
 401f334:	213c2004 	addi	r4,r4,-3968
 401f338:	400d6dc0 	call	400d6dc <__udivsi3>
 401f33c:	e17fff17 	ldw	r5,-4(fp)
 401f340:	1009883a 	mov	r4,r2
 401f344:	400d7980 	call	400d798 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401f348:	10bfffc4 	addi	r2,r2,-1
 401f34c:	103ffe1e 	bne	r2,zero,401f348 <__alt_mem_onchip_memory2_0+0xfc01e0a8>
 401f350:	00000d06 	br	401f388 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401f354:	014003f4 	movhi	r5,15
 401f358:	29509004 	addi	r5,r5,16960
 401f35c:	e13ffd17 	ldw	r4,-12(fp)
 401f360:	400d7980 	call	400d798 <__mulsi3>
 401f364:	100b883a 	mov	r5,r2
 401f368:	0100bef4 	movhi	r4,763
 401f36c:	213c2004 	addi	r4,r4,-3968
 401f370:	400d6dc0 	call	400d6dc <__udivsi3>
 401f374:	e17fff17 	ldw	r5,-4(fp)
 401f378:	1009883a 	mov	r4,r2
 401f37c:	400d7980 	call	400d798 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401f380:	10bfffc4 	addi	r2,r2,-1
 401f384:	00bffe16 	blt	zero,r2,401f380 <__alt_mem_onchip_memory2_0+0xfc01e0e0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 401f388:	0005883a 	mov	r2,zero
}
 401f38c:	e037883a 	mov	sp,fp
 401f390:	dfc00117 	ldw	ra,4(sp)
 401f394:	df000017 	ldw	fp,0(sp)
 401f398:	dec00204 	addi	sp,sp,8
 401f39c:	f800283a 	ret

0401f3a0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401f3a0:	deffff04 	addi	sp,sp,-4
 401f3a4:	df000015 	stw	fp,0(sp)
 401f3a8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 401f3ac:	0001883a 	nop
 401f3b0:	e037883a 	mov	sp,fp
 401f3b4:	df000017 	ldw	fp,0(sp)
 401f3b8:	dec00104 	addi	sp,sp,4
 401f3bc:	f800283a 	ret

0401f3c0 <alt_get_errno>:
 401f3c0:	defffe04 	addi	sp,sp,-8
 401f3c4:	dfc00115 	stw	ra,4(sp)
 401f3c8:	df000015 	stw	fp,0(sp)
 401f3cc:	d839883a 	mov	fp,sp
 401f3d0:	d0a5b717 	ldw	r2,-26916(gp)
 401f3d4:	10000326 	beq	r2,zero,401f3e4 <alt_get_errno+0x24>
 401f3d8:	d0a5b717 	ldw	r2,-26916(gp)
 401f3dc:	103ee83a 	callr	r2
 401f3e0:	00000106 	br	401f3e8 <alt_get_errno+0x28>
 401f3e4:	d0b23f04 	addi	r2,gp,-14084
 401f3e8:	e037883a 	mov	sp,fp
 401f3ec:	dfc00117 	ldw	ra,4(sp)
 401f3f0:	df000017 	ldw	fp,0(sp)
 401f3f4:	dec00204 	addi	sp,sp,8
 401f3f8:	f800283a 	ret

0401f3fc <alt_dev_llist_insert>:
 401f3fc:	defffa04 	addi	sp,sp,-24
 401f400:	dfc00515 	stw	ra,20(sp)
 401f404:	df000415 	stw	fp,16(sp)
 401f408:	df000404 	addi	fp,sp,16
 401f40c:	e13ffe15 	stw	r4,-8(fp)
 401f410:	e17fff15 	stw	r5,-4(fp)
 401f414:	e0bffe17 	ldw	r2,-8(fp)
 401f418:	10000326 	beq	r2,zero,401f428 <alt_dev_llist_insert+0x2c>
 401f41c:	e0bffe17 	ldw	r2,-8(fp)
 401f420:	10800217 	ldw	r2,8(r2)
 401f424:	1000061e 	bne	r2,zero,401f440 <alt_dev_llist_insert+0x44>
 401f428:	401f3c00 	call	401f3c0 <alt_get_errno>
 401f42c:	1007883a 	mov	r3,r2
 401f430:	00800584 	movi	r2,22
 401f434:	18800015 	stw	r2,0(r3)
 401f438:	00bffa84 	movi	r2,-22
 401f43c:	00001306 	br	401f48c <alt_dev_llist_insert+0x90>
 401f440:	e0bffe17 	ldw	r2,-8(fp)
 401f444:	e0ffff17 	ldw	r3,-4(fp)
 401f448:	e0fffc15 	stw	r3,-16(fp)
 401f44c:	e0bffd15 	stw	r2,-12(fp)
 401f450:	e0bffd17 	ldw	r2,-12(fp)
 401f454:	e0fffc17 	ldw	r3,-16(fp)
 401f458:	10c00115 	stw	r3,4(r2)
 401f45c:	e0bffc17 	ldw	r2,-16(fp)
 401f460:	10c00017 	ldw	r3,0(r2)
 401f464:	e0bffd17 	ldw	r2,-12(fp)
 401f468:	10c00015 	stw	r3,0(r2)
 401f46c:	e0bffc17 	ldw	r2,-16(fp)
 401f470:	10800017 	ldw	r2,0(r2)
 401f474:	e0fffd17 	ldw	r3,-12(fp)
 401f478:	10c00115 	stw	r3,4(r2)
 401f47c:	e0bffc17 	ldw	r2,-16(fp)
 401f480:	e0fffd17 	ldw	r3,-12(fp)
 401f484:	10c00015 	stw	r3,0(r2)
 401f488:	0005883a 	mov	r2,zero
 401f48c:	e037883a 	mov	sp,fp
 401f490:	dfc00117 	ldw	ra,4(sp)
 401f494:	df000017 	ldw	fp,0(sp)
 401f498:	dec00204 	addi	sp,sp,8
 401f49c:	f800283a 	ret

0401f4a0 <_do_ctors>:
 401f4a0:	defffd04 	addi	sp,sp,-12
 401f4a4:	dfc00215 	stw	ra,8(sp)
 401f4a8:	df000115 	stw	fp,4(sp)
 401f4ac:	df000104 	addi	fp,sp,4
 401f4b0:	008100b4 	movhi	r2,1026
 401f4b4:	1081b204 	addi	r2,r2,1736
 401f4b8:	e0bfff15 	stw	r2,-4(fp)
 401f4bc:	00000606 	br	401f4d8 <_do_ctors+0x38>
 401f4c0:	e0bfff17 	ldw	r2,-4(fp)
 401f4c4:	10800017 	ldw	r2,0(r2)
 401f4c8:	103ee83a 	callr	r2
 401f4cc:	e0bfff17 	ldw	r2,-4(fp)
 401f4d0:	10bfff04 	addi	r2,r2,-4
 401f4d4:	e0bfff15 	stw	r2,-4(fp)
 401f4d8:	e0ffff17 	ldw	r3,-4(fp)
 401f4dc:	008100b4 	movhi	r2,1026
 401f4e0:	1081b104 	addi	r2,r2,1732
 401f4e4:	18bff62e 	bgeu	r3,r2,401f4c0 <__alt_mem_onchip_memory2_0+0xfc01e220>
 401f4e8:	0001883a 	nop
 401f4ec:	e037883a 	mov	sp,fp
 401f4f0:	dfc00117 	ldw	ra,4(sp)
 401f4f4:	df000017 	ldw	fp,0(sp)
 401f4f8:	dec00204 	addi	sp,sp,8
 401f4fc:	f800283a 	ret

0401f500 <_do_dtors>:
 401f500:	defffd04 	addi	sp,sp,-12
 401f504:	dfc00215 	stw	ra,8(sp)
 401f508:	df000115 	stw	fp,4(sp)
 401f50c:	df000104 	addi	fp,sp,4
 401f510:	008100b4 	movhi	r2,1026
 401f514:	1081b204 	addi	r2,r2,1736
 401f518:	e0bfff15 	stw	r2,-4(fp)
 401f51c:	00000606 	br	401f538 <_do_dtors+0x38>
 401f520:	e0bfff17 	ldw	r2,-4(fp)
 401f524:	10800017 	ldw	r2,0(r2)
 401f528:	103ee83a 	callr	r2
 401f52c:	e0bfff17 	ldw	r2,-4(fp)
 401f530:	10bfff04 	addi	r2,r2,-4
 401f534:	e0bfff15 	stw	r2,-4(fp)
 401f538:	e0ffff17 	ldw	r3,-4(fp)
 401f53c:	008100b4 	movhi	r2,1026
 401f540:	1081b304 	addi	r2,r2,1740
 401f544:	18bff62e 	bgeu	r3,r2,401f520 <__alt_mem_onchip_memory2_0+0xfc01e280>
 401f548:	0001883a 	nop
 401f54c:	e037883a 	mov	sp,fp
 401f550:	dfc00117 	ldw	ra,4(sp)
 401f554:	df000017 	ldw	fp,0(sp)
 401f558:	dec00204 	addi	sp,sp,8
 401f55c:	f800283a 	ret

0401f560 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401f560:	defffa04 	addi	sp,sp,-24
 401f564:	dfc00515 	stw	ra,20(sp)
 401f568:	df000415 	stw	fp,16(sp)
 401f56c:	df000404 	addi	fp,sp,16
 401f570:	e13ffe15 	stw	r4,-8(fp)
 401f574:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 401f578:	e0bfff17 	ldw	r2,-4(fp)
 401f57c:	10800017 	ldw	r2,0(r2)
 401f580:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 401f584:	e13ffe17 	ldw	r4,-8(fp)
 401f588:	400f9100 	call	400f910 <strlen>
 401f58c:	10800044 	addi	r2,r2,1
 401f590:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401f594:	00000d06 	br	401f5cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 401f598:	e0bffc17 	ldw	r2,-16(fp)
 401f59c:	10800217 	ldw	r2,8(r2)
 401f5a0:	e0fffd17 	ldw	r3,-12(fp)
 401f5a4:	180d883a 	mov	r6,r3
 401f5a8:	e17ffe17 	ldw	r5,-8(fp)
 401f5ac:	1009883a 	mov	r4,r2
 401f5b0:	40203780 	call	4020378 <memcmp>
 401f5b4:	1000021e 	bne	r2,zero,401f5c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 401f5b8:	e0bffc17 	ldw	r2,-16(fp)
 401f5bc:	00000706 	br	401f5dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401f5c0:	e0bffc17 	ldw	r2,-16(fp)
 401f5c4:	10800017 	ldw	r2,0(r2)
 401f5c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401f5cc:	e0fffc17 	ldw	r3,-16(fp)
 401f5d0:	e0bfff17 	ldw	r2,-4(fp)
 401f5d4:	18bff01e 	bne	r3,r2,401f598 <__alt_mem_onchip_memory2_0+0xfc01e2f8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 401f5d8:	0005883a 	mov	r2,zero
}
 401f5dc:	e037883a 	mov	sp,fp
 401f5e0:	dfc00117 	ldw	ra,4(sp)
 401f5e4:	df000017 	ldw	fp,0(sp)
 401f5e8:	dec00204 	addi	sp,sp,8
 401f5ec:	f800283a 	ret

0401f5f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 401f5f0:	deffff04 	addi	sp,sp,-4
 401f5f4:	df000015 	stw	fp,0(sp)
 401f5f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 401f5fc:	0001883a 	nop
 401f600:	e037883a 	mov	sp,fp
 401f604:	df000017 	ldw	fp,0(sp)
 401f608:	dec00104 	addi	sp,sp,4
 401f60c:	f800283a 	ret

0401f610 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401f610:	defff904 	addi	sp,sp,-28
 401f614:	dfc00615 	stw	ra,24(sp)
 401f618:	df000515 	stw	fp,20(sp)
 401f61c:	df000504 	addi	fp,sp,20
 401f620:	e13ffc15 	stw	r4,-16(fp)
 401f624:	e17ffd15 	stw	r5,-12(fp)
 401f628:	e1bffe15 	stw	r6,-8(fp)
 401f62c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 401f630:	e0800217 	ldw	r2,8(fp)
 401f634:	d8800015 	stw	r2,0(sp)
 401f638:	e1ffff17 	ldw	r7,-4(fp)
 401f63c:	e1bffe17 	ldw	r6,-8(fp)
 401f640:	e17ffd17 	ldw	r5,-12(fp)
 401f644:	e13ffc17 	ldw	r4,-16(fp)
 401f648:	401f7c00 	call	401f7c0 <alt_iic_isr_register>
}  
 401f64c:	e037883a 	mov	sp,fp
 401f650:	dfc00117 	ldw	ra,4(sp)
 401f654:	df000017 	ldw	fp,0(sp)
 401f658:	dec00204 	addi	sp,sp,8
 401f65c:	f800283a 	ret

0401f660 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 401f660:	defff904 	addi	sp,sp,-28
 401f664:	df000615 	stw	fp,24(sp)
 401f668:	df000604 	addi	fp,sp,24
 401f66c:	e13ffe15 	stw	r4,-8(fp)
 401f670:	e17fff15 	stw	r5,-4(fp)
 401f674:	e0bfff17 	ldw	r2,-4(fp)
 401f678:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f67c:	0005303a 	rdctl	r2,status
 401f680:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f684:	e0fffb17 	ldw	r3,-20(fp)
 401f688:	00bfff84 	movi	r2,-2
 401f68c:	1884703a 	and	r2,r3,r2
 401f690:	1001703a 	wrctl	status,r2
  
  return context;
 401f694:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401f698:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 401f69c:	00c00044 	movi	r3,1
 401f6a0:	e0bffa17 	ldw	r2,-24(fp)
 401f6a4:	1884983a 	sll	r2,r3,r2
 401f6a8:	1007883a 	mov	r3,r2
 401f6ac:	d0b24617 	ldw	r2,-14056(gp)
 401f6b0:	1884b03a 	or	r2,r3,r2
 401f6b4:	d0b24615 	stw	r2,-14056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401f6b8:	d0b24617 	ldw	r2,-14056(gp)
 401f6bc:	100170fa 	wrctl	ienable,r2
 401f6c0:	e0bffc17 	ldw	r2,-16(fp)
 401f6c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f6c8:	e0bffd17 	ldw	r2,-12(fp)
 401f6cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401f6d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 401f6d4:	0001883a 	nop
}
 401f6d8:	e037883a 	mov	sp,fp
 401f6dc:	df000017 	ldw	fp,0(sp)
 401f6e0:	dec00104 	addi	sp,sp,4
 401f6e4:	f800283a 	ret

0401f6e8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 401f6e8:	defff904 	addi	sp,sp,-28
 401f6ec:	df000615 	stw	fp,24(sp)
 401f6f0:	df000604 	addi	fp,sp,24
 401f6f4:	e13ffe15 	stw	r4,-8(fp)
 401f6f8:	e17fff15 	stw	r5,-4(fp)
 401f6fc:	e0bfff17 	ldw	r2,-4(fp)
 401f700:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f704:	0005303a 	rdctl	r2,status
 401f708:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f70c:	e0fffb17 	ldw	r3,-20(fp)
 401f710:	00bfff84 	movi	r2,-2
 401f714:	1884703a 	and	r2,r3,r2
 401f718:	1001703a 	wrctl	status,r2
  
  return context;
 401f71c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401f720:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 401f724:	00c00044 	movi	r3,1
 401f728:	e0bffa17 	ldw	r2,-24(fp)
 401f72c:	1884983a 	sll	r2,r3,r2
 401f730:	0084303a 	nor	r2,zero,r2
 401f734:	1007883a 	mov	r3,r2
 401f738:	d0b24617 	ldw	r2,-14056(gp)
 401f73c:	1884703a 	and	r2,r3,r2
 401f740:	d0b24615 	stw	r2,-14056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401f744:	d0b24617 	ldw	r2,-14056(gp)
 401f748:	100170fa 	wrctl	ienable,r2
 401f74c:	e0bffc17 	ldw	r2,-16(fp)
 401f750:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f754:	e0bffd17 	ldw	r2,-12(fp)
 401f758:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401f75c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 401f760:	0001883a 	nop
}
 401f764:	e037883a 	mov	sp,fp
 401f768:	df000017 	ldw	fp,0(sp)
 401f76c:	dec00104 	addi	sp,sp,4
 401f770:	f800283a 	ret

0401f774 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401f774:	defffc04 	addi	sp,sp,-16
 401f778:	df000315 	stw	fp,12(sp)
 401f77c:	df000304 	addi	fp,sp,12
 401f780:	e13ffe15 	stw	r4,-8(fp)
 401f784:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 401f788:	000530fa 	rdctl	r2,ienable
 401f78c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 401f790:	00c00044 	movi	r3,1
 401f794:	e0bfff17 	ldw	r2,-4(fp)
 401f798:	1884983a 	sll	r2,r3,r2
 401f79c:	1007883a 	mov	r3,r2
 401f7a0:	e0bffd17 	ldw	r2,-12(fp)
 401f7a4:	1884703a 	and	r2,r3,r2
 401f7a8:	1004c03a 	cmpne	r2,r2,zero
 401f7ac:	10803fcc 	andi	r2,r2,255
}
 401f7b0:	e037883a 	mov	sp,fp
 401f7b4:	df000017 	ldw	fp,0(sp)
 401f7b8:	dec00104 	addi	sp,sp,4
 401f7bc:	f800283a 	ret

0401f7c0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401f7c0:	defff504 	addi	sp,sp,-44
 401f7c4:	dfc00a15 	stw	ra,40(sp)
 401f7c8:	df000915 	stw	fp,36(sp)
 401f7cc:	df000904 	addi	fp,sp,36
 401f7d0:	e13ffc15 	stw	r4,-16(fp)
 401f7d4:	e17ffd15 	stw	r5,-12(fp)
 401f7d8:	e1bffe15 	stw	r6,-8(fp)
 401f7dc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 401f7e0:	00bffa84 	movi	r2,-22
 401f7e4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 401f7e8:	e0bffd17 	ldw	r2,-12(fp)
 401f7ec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401f7f0:	e0bff817 	ldw	r2,-32(fp)
 401f7f4:	10800808 	cmpgei	r2,r2,32
 401f7f8:	1000271e 	bne	r2,zero,401f898 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f7fc:	0005303a 	rdctl	r2,status
 401f800:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f804:	e0fffb17 	ldw	r3,-20(fp)
 401f808:	00bfff84 	movi	r2,-2
 401f80c:	1884703a 	and	r2,r3,r2
 401f810:	1001703a 	wrctl	status,r2
  
  return context;
 401f814:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401f818:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 401f81c:	008100f4 	movhi	r2,1027
 401f820:	10b78204 	addi	r2,r2,-8696
 401f824:	e0fff817 	ldw	r3,-32(fp)
 401f828:	180690fa 	slli	r3,r3,3
 401f82c:	10c5883a 	add	r2,r2,r3
 401f830:	e0fffe17 	ldw	r3,-8(fp)
 401f834:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 401f838:	008100f4 	movhi	r2,1027
 401f83c:	10b78204 	addi	r2,r2,-8696
 401f840:	e0fff817 	ldw	r3,-32(fp)
 401f844:	180690fa 	slli	r3,r3,3
 401f848:	10c5883a 	add	r2,r2,r3
 401f84c:	10800104 	addi	r2,r2,4
 401f850:	e0ffff17 	ldw	r3,-4(fp)
 401f854:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401f858:	e0bffe17 	ldw	r2,-8(fp)
 401f85c:	10000526 	beq	r2,zero,401f874 <alt_iic_isr_register+0xb4>
 401f860:	e0bff817 	ldw	r2,-32(fp)
 401f864:	100b883a 	mov	r5,r2
 401f868:	e13ffc17 	ldw	r4,-16(fp)
 401f86c:	401f6600 	call	401f660 <alt_ic_irq_enable>
 401f870:	00000406 	br	401f884 <alt_iic_isr_register+0xc4>
 401f874:	e0bff817 	ldw	r2,-32(fp)
 401f878:	100b883a 	mov	r5,r2
 401f87c:	e13ffc17 	ldw	r4,-16(fp)
 401f880:	401f6e80 	call	401f6e8 <alt_ic_irq_disable>
 401f884:	e0bff715 	stw	r2,-36(fp)
 401f888:	e0bffa17 	ldw	r2,-24(fp)
 401f88c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f890:	e0bff917 	ldw	r2,-28(fp)
 401f894:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 401f898:	e0bff717 	ldw	r2,-36(fp)
}
 401f89c:	e037883a 	mov	sp,fp
 401f8a0:	dfc00117 	ldw	ra,4(sp)
 401f8a4:	df000017 	ldw	fp,0(sp)
 401f8a8:	dec00204 	addi	sp,sp,8
 401f8ac:	f800283a 	ret

0401f8b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401f8b0:	defff804 	addi	sp,sp,-32
 401f8b4:	dfc00715 	stw	ra,28(sp)
 401f8b8:	df000615 	stw	fp,24(sp)
 401f8bc:	dc000515 	stw	r16,20(sp)
 401f8c0:	df000604 	addi	fp,sp,24
 401f8c4:	e13ffb15 	stw	r4,-20(fp)
 401f8c8:	e17ffc15 	stw	r5,-16(fp)
 401f8cc:	e1bffd15 	stw	r6,-12(fp)
 401f8d0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 401f8d4:	e1bffe17 	ldw	r6,-8(fp)
 401f8d8:	e17ffd17 	ldw	r5,-12(fp)
 401f8dc:	e13ffc17 	ldw	r4,-16(fp)
 401f8e0:	401fb380 	call	401fb38 <open>
 401f8e4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 401f8e8:	e0bffa17 	ldw	r2,-24(fp)
 401f8ec:	10002216 	blt	r2,zero,401f978 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 401f8f0:	040100f4 	movhi	r16,1027
 401f8f4:	84207004 	addi	r16,r16,-32320
 401f8f8:	e0bffa17 	ldw	r2,-24(fp)
 401f8fc:	01400304 	movi	r5,12
 401f900:	1009883a 	mov	r4,r2
 401f904:	400d7980 	call	400d798 <__mulsi3>
 401f908:	8085883a 	add	r2,r16,r2
 401f90c:	10c00017 	ldw	r3,0(r2)
 401f910:	e0bffb17 	ldw	r2,-20(fp)
 401f914:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401f918:	040100f4 	movhi	r16,1027
 401f91c:	84207004 	addi	r16,r16,-32320
 401f920:	e0bffa17 	ldw	r2,-24(fp)
 401f924:	01400304 	movi	r5,12
 401f928:	1009883a 	mov	r4,r2
 401f92c:	400d7980 	call	400d798 <__mulsi3>
 401f930:	8085883a 	add	r2,r16,r2
 401f934:	10800104 	addi	r2,r2,4
 401f938:	10c00017 	ldw	r3,0(r2)
 401f93c:	e0bffb17 	ldw	r2,-20(fp)
 401f940:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401f944:	040100f4 	movhi	r16,1027
 401f948:	84207004 	addi	r16,r16,-32320
 401f94c:	e0bffa17 	ldw	r2,-24(fp)
 401f950:	01400304 	movi	r5,12
 401f954:	1009883a 	mov	r4,r2
 401f958:	400d7980 	call	400d798 <__mulsi3>
 401f95c:	8085883a 	add	r2,r16,r2
 401f960:	10800204 	addi	r2,r2,8
 401f964:	10c00017 	ldw	r3,0(r2)
 401f968:	e0bffb17 	ldw	r2,-20(fp)
 401f96c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401f970:	e13ffa17 	ldw	r4,-24(fp)
 401f974:	401c3780 	call	401c378 <alt_release_fd>
  }
} 
 401f978:	0001883a 	nop
 401f97c:	e6ffff04 	addi	sp,fp,-4
 401f980:	dfc00217 	ldw	ra,8(sp)
 401f984:	df000117 	ldw	fp,4(sp)
 401f988:	dc000017 	ldw	r16,0(sp)
 401f98c:	dec00304 	addi	sp,sp,12
 401f990:	f800283a 	ret

0401f994 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401f994:	defffb04 	addi	sp,sp,-20
 401f998:	dfc00415 	stw	ra,16(sp)
 401f99c:	df000315 	stw	fp,12(sp)
 401f9a0:	df000304 	addi	fp,sp,12
 401f9a4:	e13ffd15 	stw	r4,-12(fp)
 401f9a8:	e17ffe15 	stw	r5,-8(fp)
 401f9ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401f9b0:	01c07fc4 	movi	r7,511
 401f9b4:	01800044 	movi	r6,1
 401f9b8:	e17ffd17 	ldw	r5,-12(fp)
 401f9bc:	010100f4 	movhi	r4,1027
 401f9c0:	21207304 	addi	r4,r4,-32308
 401f9c4:	401f8b00 	call	401f8b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 401f9c8:	01c07fc4 	movi	r7,511
 401f9cc:	000d883a 	mov	r6,zero
 401f9d0:	e17ffe17 	ldw	r5,-8(fp)
 401f9d4:	010100f4 	movhi	r4,1027
 401f9d8:	21207004 	addi	r4,r4,-32320
 401f9dc:	401f8b00 	call	401f8b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401f9e0:	01c07fc4 	movi	r7,511
 401f9e4:	01800044 	movi	r6,1
 401f9e8:	e17fff17 	ldw	r5,-4(fp)
 401f9ec:	010100f4 	movhi	r4,1027
 401f9f0:	21207604 	addi	r4,r4,-32296
 401f9f4:	401f8b00 	call	401f8b0 <alt_open_fd>
}  
 401f9f8:	0001883a 	nop
 401f9fc:	e037883a 	mov	sp,fp
 401fa00:	dfc00117 	ldw	ra,4(sp)
 401fa04:	df000017 	ldw	fp,0(sp)
 401fa08:	dec00204 	addi	sp,sp,8
 401fa0c:	f800283a 	ret

0401fa10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401fa10:	defffe04 	addi	sp,sp,-8
 401fa14:	dfc00115 	stw	ra,4(sp)
 401fa18:	df000015 	stw	fp,0(sp)
 401fa1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401fa20:	d0a5b717 	ldw	r2,-26916(gp)
 401fa24:	10000326 	beq	r2,zero,401fa34 <alt_get_errno+0x24>
 401fa28:	d0a5b717 	ldw	r2,-26916(gp)
 401fa2c:	103ee83a 	callr	r2
 401fa30:	00000106 	br	401fa38 <alt_get_errno+0x28>
 401fa34:	d0b23f04 	addi	r2,gp,-14084
}
 401fa38:	e037883a 	mov	sp,fp
 401fa3c:	dfc00117 	ldw	ra,4(sp)
 401fa40:	df000017 	ldw	fp,0(sp)
 401fa44:	dec00204 	addi	sp,sp,8
 401fa48:	f800283a 	ret

0401fa4c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 401fa4c:	defffb04 	addi	sp,sp,-20
 401fa50:	dfc00415 	stw	ra,16(sp)
 401fa54:	df000315 	stw	fp,12(sp)
 401fa58:	dc000215 	stw	r16,8(sp)
 401fa5c:	df000304 	addi	fp,sp,12
 401fa60:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401fa64:	e0bffe17 	ldw	r2,-8(fp)
 401fa68:	10800217 	ldw	r2,8(r2)
 401fa6c:	10d00034 	orhi	r3,r2,16384
 401fa70:	e0bffe17 	ldw	r2,-8(fp)
 401fa74:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401fa78:	e03ffd15 	stw	zero,-12(fp)
 401fa7c:	00002306 	br	401fb0c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401fa80:	040100f4 	movhi	r16,1027
 401fa84:	84207004 	addi	r16,r16,-32320
 401fa88:	e0bffd17 	ldw	r2,-12(fp)
 401fa8c:	01400304 	movi	r5,12
 401fa90:	1009883a 	mov	r4,r2
 401fa94:	400d7980 	call	400d798 <__mulsi3>
 401fa98:	8085883a 	add	r2,r16,r2
 401fa9c:	10c00017 	ldw	r3,0(r2)
 401faa0:	e0bffe17 	ldw	r2,-8(fp)
 401faa4:	10800017 	ldw	r2,0(r2)
 401faa8:	1880151e 	bne	r3,r2,401fb00 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401faac:	040100f4 	movhi	r16,1027
 401fab0:	84207004 	addi	r16,r16,-32320
 401fab4:	e0bffd17 	ldw	r2,-12(fp)
 401fab8:	01400304 	movi	r5,12
 401fabc:	1009883a 	mov	r4,r2
 401fac0:	400d7980 	call	400d798 <__mulsi3>
 401fac4:	8085883a 	add	r2,r16,r2
 401fac8:	10800204 	addi	r2,r2,8
 401facc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401fad0:	10000b0e 	bge	r2,zero,401fb00 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 401fad4:	01400304 	movi	r5,12
 401fad8:	e13ffd17 	ldw	r4,-12(fp)
 401fadc:	400d7980 	call	400d798 <__mulsi3>
 401fae0:	1007883a 	mov	r3,r2
 401fae4:	008100f4 	movhi	r2,1027
 401fae8:	10a07004 	addi	r2,r2,-32320
 401faec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401faf0:	e0bffe17 	ldw	r2,-8(fp)
 401faf4:	18800226 	beq	r3,r2,401fb00 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401faf8:	00bffcc4 	movi	r2,-13
 401fafc:	00000806 	br	401fb20 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401fb00:	e0bffd17 	ldw	r2,-12(fp)
 401fb04:	10800044 	addi	r2,r2,1
 401fb08:	e0bffd15 	stw	r2,-12(fp)
 401fb0c:	d0a5b617 	ldw	r2,-26920(gp)
 401fb10:	1007883a 	mov	r3,r2
 401fb14:	e0bffd17 	ldw	r2,-12(fp)
 401fb18:	18bfd92e 	bgeu	r3,r2,401fa80 <__alt_mem_onchip_memory2_0+0xfc01e7e0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 401fb1c:	0005883a 	mov	r2,zero
}
 401fb20:	e6ffff04 	addi	sp,fp,-4
 401fb24:	dfc00217 	ldw	ra,8(sp)
 401fb28:	df000117 	ldw	fp,4(sp)
 401fb2c:	dc000017 	ldw	r16,0(sp)
 401fb30:	dec00304 	addi	sp,sp,12
 401fb34:	f800283a 	ret

0401fb38 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401fb38:	defff604 	addi	sp,sp,-40
 401fb3c:	dfc00915 	stw	ra,36(sp)
 401fb40:	df000815 	stw	fp,32(sp)
 401fb44:	df000804 	addi	fp,sp,32
 401fb48:	e13ffd15 	stw	r4,-12(fp)
 401fb4c:	e17ffe15 	stw	r5,-8(fp)
 401fb50:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401fb54:	00bfffc4 	movi	r2,-1
 401fb58:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 401fb5c:	00bffb44 	movi	r2,-19
 401fb60:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401fb64:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401fb68:	d165b404 	addi	r5,gp,-26928
 401fb6c:	e13ffd17 	ldw	r4,-12(fp)
 401fb70:	401f5600 	call	401f560 <alt_find_dev>
 401fb74:	e0bff815 	stw	r2,-32(fp)
 401fb78:	e0bff817 	ldw	r2,-32(fp)
 401fb7c:	1000051e 	bne	r2,zero,401fb94 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401fb80:	e13ffd17 	ldw	r4,-12(fp)
 401fb84:	40200c40 	call	40200c4 <alt_find_file>
 401fb88:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 401fb8c:	00800044 	movi	r2,1
 401fb90:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401fb94:	e0bff817 	ldw	r2,-32(fp)
 401fb98:	10002b26 	beq	r2,zero,401fc48 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401fb9c:	e13ff817 	ldw	r4,-32(fp)
 401fba0:	40201cc0 	call	40201cc <alt_get_fd>
 401fba4:	e0bff915 	stw	r2,-28(fp)
 401fba8:	e0bff917 	ldw	r2,-28(fp)
 401fbac:	1000030e 	bge	r2,zero,401fbbc <open+0x84>
    {
      status = index;
 401fbb0:	e0bff917 	ldw	r2,-28(fp)
 401fbb4:	e0bffa15 	stw	r2,-24(fp)
 401fbb8:	00002506 	br	401fc50 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 401fbbc:	01400304 	movi	r5,12
 401fbc0:	e13ff917 	ldw	r4,-28(fp)
 401fbc4:	400d7980 	call	400d798 <__mulsi3>
 401fbc8:	1007883a 	mov	r3,r2
 401fbcc:	008100f4 	movhi	r2,1027
 401fbd0:	10a07004 	addi	r2,r2,-32320
 401fbd4:	1885883a 	add	r2,r3,r2
 401fbd8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401fbdc:	e0fffe17 	ldw	r3,-8(fp)
 401fbe0:	00900034 	movhi	r2,16384
 401fbe4:	10bfffc4 	addi	r2,r2,-1
 401fbe8:	1886703a 	and	r3,r3,r2
 401fbec:	e0bffc17 	ldw	r2,-16(fp)
 401fbf0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401fbf4:	e0bffb17 	ldw	r2,-20(fp)
 401fbf8:	1000051e 	bne	r2,zero,401fc10 <open+0xd8>
 401fbfc:	e13ffc17 	ldw	r4,-16(fp)
 401fc00:	401fa4c0 	call	401fa4c <alt_file_locked>
 401fc04:	e0bffa15 	stw	r2,-24(fp)
 401fc08:	e0bffa17 	ldw	r2,-24(fp)
 401fc0c:	10001016 	blt	r2,zero,401fc50 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401fc10:	e0bff817 	ldw	r2,-32(fp)
 401fc14:	10800317 	ldw	r2,12(r2)
 401fc18:	10000826 	beq	r2,zero,401fc3c <open+0x104>
 401fc1c:	e0bff817 	ldw	r2,-32(fp)
 401fc20:	10800317 	ldw	r2,12(r2)
 401fc24:	e1ffff17 	ldw	r7,-4(fp)
 401fc28:	e1bffe17 	ldw	r6,-8(fp)
 401fc2c:	e17ffd17 	ldw	r5,-12(fp)
 401fc30:	e13ffc17 	ldw	r4,-16(fp)
 401fc34:	103ee83a 	callr	r2
 401fc38:	00000106 	br	401fc40 <open+0x108>
 401fc3c:	0005883a 	mov	r2,zero
 401fc40:	e0bffa15 	stw	r2,-24(fp)
 401fc44:	00000206 	br	401fc50 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401fc48:	00bffb44 	movi	r2,-19
 401fc4c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401fc50:	e0bffa17 	ldw	r2,-24(fp)
 401fc54:	1000090e 	bge	r2,zero,401fc7c <open+0x144>
  {
    alt_release_fd (index);  
 401fc58:	e13ff917 	ldw	r4,-28(fp)
 401fc5c:	401c3780 	call	401c378 <alt_release_fd>
    ALT_ERRNO = -status;
 401fc60:	401fa100 	call	401fa10 <alt_get_errno>
 401fc64:	1007883a 	mov	r3,r2
 401fc68:	e0bffa17 	ldw	r2,-24(fp)
 401fc6c:	0085c83a 	sub	r2,zero,r2
 401fc70:	18800015 	stw	r2,0(r3)
    return -1;
 401fc74:	00bfffc4 	movi	r2,-1
 401fc78:	00000106 	br	401fc80 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 401fc7c:	e0bff917 	ldw	r2,-28(fp)
}
 401fc80:	e037883a 	mov	sp,fp
 401fc84:	dfc00117 	ldw	ra,4(sp)
 401fc88:	df000017 	ldw	fp,0(sp)
 401fc8c:	dec00204 	addi	sp,sp,8
 401fc90:	f800283a 	ret

0401fc94 <alt_printf>:
 401fc94:	defff204 	addi	sp,sp,-56
 401fc98:	dfc00a15 	stw	ra,40(sp)
 401fc9c:	df000915 	stw	fp,36(sp)
 401fca0:	df000904 	addi	fp,sp,36
 401fca4:	e13fff15 	stw	r4,-4(fp)
 401fca8:	e1400215 	stw	r5,8(fp)
 401fcac:	e1800315 	stw	r6,12(fp)
 401fcb0:	e1c00415 	stw	r7,16(fp)
 401fcb4:	e0800204 	addi	r2,fp,8
 401fcb8:	e0bffe15 	stw	r2,-8(fp)
 401fcbc:	e0bfff17 	ldw	r2,-4(fp)
 401fcc0:	e0bff715 	stw	r2,-36(fp)
 401fcc4:	00006f06 	br	401fe84 <alt_printf+0x1f0>
 401fcc8:	e0bff807 	ldb	r2,-32(fp)
 401fccc:	10800960 	cmpeqi	r2,r2,37
 401fcd0:	1000041e 	bne	r2,zero,401fce4 <alt_printf+0x50>
 401fcd4:	e0bff807 	ldb	r2,-32(fp)
 401fcd8:	1009883a 	mov	r4,r2
 401fcdc:	401fec00 	call	401fec0 <alt_putchar>
 401fce0:	00006806 	br	401fe84 <alt_printf+0x1f0>
 401fce4:	e0bff717 	ldw	r2,-36(fp)
 401fce8:	10c00044 	addi	r3,r2,1
 401fcec:	e0fff715 	stw	r3,-36(fp)
 401fcf0:	10800003 	ldbu	r2,0(r2)
 401fcf4:	e0bff805 	stb	r2,-32(fp)
 401fcf8:	e0bff807 	ldb	r2,-32(fp)
 401fcfc:	10006926 	beq	r2,zero,401fea4 <alt_printf+0x210>
 401fd00:	e0bff807 	ldb	r2,-32(fp)
 401fd04:	10800958 	cmpnei	r2,r2,37
 401fd08:	1000041e 	bne	r2,zero,401fd1c <alt_printf+0x88>
 401fd0c:	e0bff807 	ldb	r2,-32(fp)
 401fd10:	1009883a 	mov	r4,r2
 401fd14:	401fec00 	call	401fec0 <alt_putchar>
 401fd18:	00005a06 	br	401fe84 <alt_printf+0x1f0>
 401fd1c:	e0bff807 	ldb	r2,-32(fp)
 401fd20:	108018d8 	cmpnei	r2,r2,99
 401fd24:	1000081e 	bne	r2,zero,401fd48 <alt_printf+0xb4>
 401fd28:	e0bffe17 	ldw	r2,-8(fp)
 401fd2c:	10c00104 	addi	r3,r2,4
 401fd30:	e0fffe15 	stw	r3,-8(fp)
 401fd34:	10800017 	ldw	r2,0(r2)
 401fd38:	e0bffd15 	stw	r2,-12(fp)
 401fd3c:	e13ffd17 	ldw	r4,-12(fp)
 401fd40:	401fec00 	call	401fec0 <alt_putchar>
 401fd44:	00004f06 	br	401fe84 <alt_printf+0x1f0>
 401fd48:	e0bff807 	ldb	r2,-32(fp)
 401fd4c:	10801e18 	cmpnei	r2,r2,120
 401fd50:	1000341e 	bne	r2,zero,401fe24 <alt_printf+0x190>
 401fd54:	e0bffe17 	ldw	r2,-8(fp)
 401fd58:	10c00104 	addi	r3,r2,4
 401fd5c:	e0fffe15 	stw	r3,-8(fp)
 401fd60:	10800017 	ldw	r2,0(r2)
 401fd64:	e0bffb15 	stw	r2,-20(fp)
 401fd68:	e0bffb17 	ldw	r2,-20(fp)
 401fd6c:	1000031e 	bne	r2,zero,401fd7c <alt_printf+0xe8>
 401fd70:	01000c04 	movi	r4,48
 401fd74:	401fec00 	call	401fec0 <alt_putchar>
 401fd78:	00004206 	br	401fe84 <alt_printf+0x1f0>
 401fd7c:	00800704 	movi	r2,28
 401fd80:	e0bff915 	stw	r2,-28(fp)
 401fd84:	00000306 	br	401fd94 <alt_printf+0x100>
 401fd88:	e0bff917 	ldw	r2,-28(fp)
 401fd8c:	10bfff04 	addi	r2,r2,-4
 401fd90:	e0bff915 	stw	r2,-28(fp)
 401fd94:	00c003c4 	movi	r3,15
 401fd98:	e0bff917 	ldw	r2,-28(fp)
 401fd9c:	1884983a 	sll	r2,r3,r2
 401fda0:	1007883a 	mov	r3,r2
 401fda4:	e0bffb17 	ldw	r2,-20(fp)
 401fda8:	1884703a 	and	r2,r3,r2
 401fdac:	103ff626 	beq	r2,zero,401fd88 <__alt_mem_onchip_memory2_0+0xfc01eae8>
 401fdb0:	00001906 	br	401fe18 <alt_printf+0x184>
 401fdb4:	00c003c4 	movi	r3,15
 401fdb8:	e0bff917 	ldw	r2,-28(fp)
 401fdbc:	1884983a 	sll	r2,r3,r2
 401fdc0:	1007883a 	mov	r3,r2
 401fdc4:	e0bffb17 	ldw	r2,-20(fp)
 401fdc8:	1886703a 	and	r3,r3,r2
 401fdcc:	e0bff917 	ldw	r2,-28(fp)
 401fdd0:	1884d83a 	srl	r2,r3,r2
 401fdd4:	e0bffc15 	stw	r2,-16(fp)
 401fdd8:	e0bffc17 	ldw	r2,-16(fp)
 401fddc:	108002a8 	cmpgeui	r2,r2,10
 401fde0:	1000041e 	bne	r2,zero,401fdf4 <alt_printf+0x160>
 401fde4:	e0bffc17 	ldw	r2,-16(fp)
 401fde8:	10800c04 	addi	r2,r2,48
 401fdec:	e0bff805 	stb	r2,-32(fp)
 401fdf0:	00000306 	br	401fe00 <alt_printf+0x16c>
 401fdf4:	e0bffc17 	ldw	r2,-16(fp)
 401fdf8:	108015c4 	addi	r2,r2,87
 401fdfc:	e0bff805 	stb	r2,-32(fp)
 401fe00:	e0bff807 	ldb	r2,-32(fp)
 401fe04:	1009883a 	mov	r4,r2
 401fe08:	401fec00 	call	401fec0 <alt_putchar>
 401fe0c:	e0bff917 	ldw	r2,-28(fp)
 401fe10:	10bfff04 	addi	r2,r2,-4
 401fe14:	e0bff915 	stw	r2,-28(fp)
 401fe18:	e0bff917 	ldw	r2,-28(fp)
 401fe1c:	103fe50e 	bge	r2,zero,401fdb4 <__alt_mem_onchip_memory2_0+0xfc01eb14>
 401fe20:	00001806 	br	401fe84 <alt_printf+0x1f0>
 401fe24:	e0bff807 	ldb	r2,-32(fp)
 401fe28:	10801cd8 	cmpnei	r2,r2,115
 401fe2c:	1000151e 	bne	r2,zero,401fe84 <alt_printf+0x1f0>
 401fe30:	e0bffe17 	ldw	r2,-8(fp)
 401fe34:	10c00104 	addi	r3,r2,4
 401fe38:	e0fffe15 	stw	r3,-8(fp)
 401fe3c:	10800017 	ldw	r2,0(r2)
 401fe40:	e0bffa15 	stw	r2,-24(fp)
 401fe44:	00000906 	br	401fe6c <alt_printf+0x1d8>
 401fe48:	e0bffa17 	ldw	r2,-24(fp)
 401fe4c:	10c00044 	addi	r3,r2,1
 401fe50:	e0fffa15 	stw	r3,-24(fp)
 401fe54:	10800003 	ldbu	r2,0(r2)
 401fe58:	10803fcc 	andi	r2,r2,255
 401fe5c:	1080201c 	xori	r2,r2,128
 401fe60:	10bfe004 	addi	r2,r2,-128
 401fe64:	1009883a 	mov	r4,r2
 401fe68:	401fec00 	call	401fec0 <alt_putchar>
 401fe6c:	e0bffa17 	ldw	r2,-24(fp)
 401fe70:	10800003 	ldbu	r2,0(r2)
 401fe74:	10803fcc 	andi	r2,r2,255
 401fe78:	1080201c 	xori	r2,r2,128
 401fe7c:	10bfe004 	addi	r2,r2,-128
 401fe80:	103ff11e 	bne	r2,zero,401fe48 <__alt_mem_onchip_memory2_0+0xfc01eba8>
 401fe84:	e0bff717 	ldw	r2,-36(fp)
 401fe88:	10c00044 	addi	r3,r2,1
 401fe8c:	e0fff715 	stw	r3,-36(fp)
 401fe90:	10800003 	ldbu	r2,0(r2)
 401fe94:	e0bff805 	stb	r2,-32(fp)
 401fe98:	e0bff807 	ldb	r2,-32(fp)
 401fe9c:	103f8a1e 	bne	r2,zero,401fcc8 <__alt_mem_onchip_memory2_0+0xfc01ea28>
 401fea0:	00000106 	br	401fea8 <alt_printf+0x214>
 401fea4:	0001883a 	nop
 401fea8:	0001883a 	nop
 401feac:	e037883a 	mov	sp,fp
 401feb0:	dfc00117 	ldw	ra,4(sp)
 401feb4:	df000017 	ldw	fp,0(sp)
 401feb8:	dec00504 	addi	sp,sp,20
 401febc:	f800283a 	ret

0401fec0 <alt_putchar>:
 401fec0:	defffd04 	addi	sp,sp,-12
 401fec4:	dfc00215 	stw	ra,8(sp)
 401fec8:	df000115 	stw	fp,4(sp)
 401fecc:	df000104 	addi	fp,sp,4
 401fed0:	e13fff15 	stw	r4,-4(fp)
 401fed4:	d0a5ad17 	ldw	r2,-26956(gp)
 401fed8:	10800217 	ldw	r2,8(r2)
 401fedc:	100b883a 	mov	r5,r2
 401fee0:	e13fff17 	ldw	r4,-4(fp)
 401fee4:	4015e740 	call	4015e74 <putc>
 401fee8:	e037883a 	mov	sp,fp
 401feec:	dfc00117 	ldw	ra,4(sp)
 401fef0:	df000017 	ldw	fp,0(sp)
 401fef4:	dec00204 	addi	sp,sp,8
 401fef8:	f800283a 	ret

0401fefc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 401fefc:	defffa04 	addi	sp,sp,-24
 401ff00:	df000515 	stw	fp,20(sp)
 401ff04:	df000504 	addi	fp,sp,20
 401ff08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ff0c:	0005303a 	rdctl	r2,status
 401ff10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ff14:	e0fffc17 	ldw	r3,-16(fp)
 401ff18:	00bfff84 	movi	r2,-2
 401ff1c:	1884703a 	and	r2,r3,r2
 401ff20:	1001703a 	wrctl	status,r2
  
  return context;
 401ff24:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 401ff28:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 401ff2c:	e0bfff17 	ldw	r2,-4(fp)
 401ff30:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401ff34:	e0bffd17 	ldw	r2,-12(fp)
 401ff38:	10800017 	ldw	r2,0(r2)
 401ff3c:	e0fffd17 	ldw	r3,-12(fp)
 401ff40:	18c00117 	ldw	r3,4(r3)
 401ff44:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 401ff48:	e0bffd17 	ldw	r2,-12(fp)
 401ff4c:	10800117 	ldw	r2,4(r2)
 401ff50:	e0fffd17 	ldw	r3,-12(fp)
 401ff54:	18c00017 	ldw	r3,0(r3)
 401ff58:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 401ff5c:	e0bffd17 	ldw	r2,-12(fp)
 401ff60:	e0fffd17 	ldw	r3,-12(fp)
 401ff64:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 401ff68:	e0bffd17 	ldw	r2,-12(fp)
 401ff6c:	e0fffd17 	ldw	r3,-12(fp)
 401ff70:	10c00015 	stw	r3,0(r2)
 401ff74:	e0bffb17 	ldw	r2,-20(fp)
 401ff78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ff7c:	e0bffe17 	ldw	r2,-8(fp)
 401ff80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 401ff84:	0001883a 	nop
 401ff88:	e037883a 	mov	sp,fp
 401ff8c:	df000017 	ldw	fp,0(sp)
 401ff90:	dec00104 	addi	sp,sp,4
 401ff94:	f800283a 	ret

0401ff98 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 401ff98:	defffb04 	addi	sp,sp,-20
 401ff9c:	dfc00415 	stw	ra,16(sp)
 401ffa0:	df000315 	stw	fp,12(sp)
 401ffa4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 401ffa8:	d0a5bc17 	ldw	r2,-26896(gp)
 401ffac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 401ffb0:	d0b24817 	ldw	r2,-14048(gp)
 401ffb4:	10800044 	addi	r2,r2,1
 401ffb8:	d0b24815 	stw	r2,-14048(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401ffbc:	00002e06 	br	4020078 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 401ffc0:	e0bffd17 	ldw	r2,-12(fp)
 401ffc4:	10800017 	ldw	r2,0(r2)
 401ffc8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401ffcc:	e0bffd17 	ldw	r2,-12(fp)
 401ffd0:	10800403 	ldbu	r2,16(r2)
 401ffd4:	10803fcc 	andi	r2,r2,255
 401ffd8:	10000426 	beq	r2,zero,401ffec <alt_tick+0x54>
 401ffdc:	d0b24817 	ldw	r2,-14048(gp)
 401ffe0:	1000021e 	bne	r2,zero,401ffec <alt_tick+0x54>
    {
      alarm->rollover = 0;
 401ffe4:	e0bffd17 	ldw	r2,-12(fp)
 401ffe8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401ffec:	e0bffd17 	ldw	r2,-12(fp)
 401fff0:	10800217 	ldw	r2,8(r2)
 401fff4:	d0f24817 	ldw	r3,-14048(gp)
 401fff8:	18801d36 	bltu	r3,r2,4020070 <alt_tick+0xd8>
 401fffc:	e0bffd17 	ldw	r2,-12(fp)
 4020000:	10800403 	ldbu	r2,16(r2)
 4020004:	10803fcc 	andi	r2,r2,255
 4020008:	1000191e 	bne	r2,zero,4020070 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 402000c:	e0bffd17 	ldw	r2,-12(fp)
 4020010:	10800317 	ldw	r2,12(r2)
 4020014:	e0fffd17 	ldw	r3,-12(fp)
 4020018:	18c00517 	ldw	r3,20(r3)
 402001c:	1809883a 	mov	r4,r3
 4020020:	103ee83a 	callr	r2
 4020024:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4020028:	e0bfff17 	ldw	r2,-4(fp)
 402002c:	1000031e 	bne	r2,zero,402003c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4020030:	e13ffd17 	ldw	r4,-12(fp)
 4020034:	401fefc0 	call	401fefc <alt_alarm_stop>
 4020038:	00000d06 	br	4020070 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 402003c:	e0bffd17 	ldw	r2,-12(fp)
 4020040:	10c00217 	ldw	r3,8(r2)
 4020044:	e0bfff17 	ldw	r2,-4(fp)
 4020048:	1887883a 	add	r3,r3,r2
 402004c:	e0bffd17 	ldw	r2,-12(fp)
 4020050:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4020054:	e0bffd17 	ldw	r2,-12(fp)
 4020058:	10c00217 	ldw	r3,8(r2)
 402005c:	d0b24817 	ldw	r2,-14048(gp)
 4020060:	1880032e 	bgeu	r3,r2,4020070 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4020064:	e0bffd17 	ldw	r2,-12(fp)
 4020068:	00c00044 	movi	r3,1
 402006c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4020070:	e0bffe17 	ldw	r2,-8(fp)
 4020074:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4020078:	e0fffd17 	ldw	r3,-12(fp)
 402007c:	d0a5bc04 	addi	r2,gp,-26896
 4020080:	18bfcf1e 	bne	r3,r2,401ffc0 <__alt_mem_onchip_memory2_0+0xfc01ed20>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4020084:	0001883a 	nop
}
 4020088:	0001883a 	nop
 402008c:	e037883a 	mov	sp,fp
 4020090:	dfc00117 	ldw	ra,4(sp)
 4020094:	df000017 	ldw	fp,0(sp)
 4020098:	dec00204 	addi	sp,sp,8
 402009c:	f800283a 	ret

040200a0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 40200a0:	deffff04 	addi	sp,sp,-4
 40200a4:	df000015 	stw	fp,0(sp)
 40200a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40200ac:	000170fa 	wrctl	ienable,zero
}
 40200b0:	0001883a 	nop
 40200b4:	e037883a 	mov	sp,fp
 40200b8:	df000017 	ldw	fp,0(sp)
 40200bc:	dec00104 	addi	sp,sp,4
 40200c0:	f800283a 	ret

040200c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40200c4:	defffb04 	addi	sp,sp,-20
 40200c8:	dfc00415 	stw	ra,16(sp)
 40200cc:	df000315 	stw	fp,12(sp)
 40200d0:	df000304 	addi	fp,sp,12
 40200d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40200d8:	d0a5b217 	ldw	r2,-26936(gp)
 40200dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40200e0:	00003106 	br	40201a8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 40200e4:	e0bffd17 	ldw	r2,-12(fp)
 40200e8:	10800217 	ldw	r2,8(r2)
 40200ec:	1009883a 	mov	r4,r2
 40200f0:	400f9100 	call	400f910 <strlen>
 40200f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40200f8:	e0bffd17 	ldw	r2,-12(fp)
 40200fc:	10c00217 	ldw	r3,8(r2)
 4020100:	e0bffe17 	ldw	r2,-8(fp)
 4020104:	10bfffc4 	addi	r2,r2,-1
 4020108:	1885883a 	add	r2,r3,r2
 402010c:	10800003 	ldbu	r2,0(r2)
 4020110:	10803fcc 	andi	r2,r2,255
 4020114:	1080201c 	xori	r2,r2,128
 4020118:	10bfe004 	addi	r2,r2,-128
 402011c:	10800bd8 	cmpnei	r2,r2,47
 4020120:	1000031e 	bne	r2,zero,4020130 <alt_find_file+0x6c>
    {
      len -= 1;
 4020124:	e0bffe17 	ldw	r2,-8(fp)
 4020128:	10bfffc4 	addi	r2,r2,-1
 402012c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4020130:	e0bffe17 	ldw	r2,-8(fp)
 4020134:	e0ffff17 	ldw	r3,-4(fp)
 4020138:	1885883a 	add	r2,r3,r2
 402013c:	10800003 	ldbu	r2,0(r2)
 4020140:	10803fcc 	andi	r2,r2,255
 4020144:	1080201c 	xori	r2,r2,128
 4020148:	10bfe004 	addi	r2,r2,-128
 402014c:	10800be0 	cmpeqi	r2,r2,47
 4020150:	1000081e 	bne	r2,zero,4020174 <alt_find_file+0xb0>
 4020154:	e0bffe17 	ldw	r2,-8(fp)
 4020158:	e0ffff17 	ldw	r3,-4(fp)
 402015c:	1885883a 	add	r2,r3,r2
 4020160:	10800003 	ldbu	r2,0(r2)
 4020164:	10803fcc 	andi	r2,r2,255
 4020168:	1080201c 	xori	r2,r2,128
 402016c:	10bfe004 	addi	r2,r2,-128
 4020170:	10000a1e 	bne	r2,zero,402019c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4020174:	e0bffd17 	ldw	r2,-12(fp)
 4020178:	10800217 	ldw	r2,8(r2)
 402017c:	e0fffe17 	ldw	r3,-8(fp)
 4020180:	180d883a 	mov	r6,r3
 4020184:	e17fff17 	ldw	r5,-4(fp)
 4020188:	1009883a 	mov	r4,r2
 402018c:	40203780 	call	4020378 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4020190:	1000021e 	bne	r2,zero,402019c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4020194:	e0bffd17 	ldw	r2,-12(fp)
 4020198:	00000706 	br	40201b8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 402019c:	e0bffd17 	ldw	r2,-12(fp)
 40201a0:	10800017 	ldw	r2,0(r2)
 40201a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40201a8:	e0fffd17 	ldw	r3,-12(fp)
 40201ac:	d0a5b204 	addi	r2,gp,-26936
 40201b0:	18bfcc1e 	bne	r3,r2,40200e4 <__alt_mem_onchip_memory2_0+0xfc01ee44>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40201b4:	0005883a 	mov	r2,zero
}
 40201b8:	e037883a 	mov	sp,fp
 40201bc:	dfc00117 	ldw	ra,4(sp)
 40201c0:	df000017 	ldw	fp,0(sp)
 40201c4:	dec00204 	addi	sp,sp,8
 40201c8:	f800283a 	ret

040201cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40201cc:	defffa04 	addi	sp,sp,-24
 40201d0:	dfc00515 	stw	ra,20(sp)
 40201d4:	df000415 	stw	fp,16(sp)
 40201d8:	dc000315 	stw	r16,12(sp)
 40201dc:	df000404 	addi	fp,sp,16
 40201e0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 40201e4:	00bffa04 	movi	r2,-24
 40201e8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40201ec:	e03ffc15 	stw	zero,-16(fp)
 40201f0:	00001d06 	br	4020268 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 40201f4:	040100f4 	movhi	r16,1027
 40201f8:	84207004 	addi	r16,r16,-32320
 40201fc:	e0bffc17 	ldw	r2,-16(fp)
 4020200:	01400304 	movi	r5,12
 4020204:	1009883a 	mov	r4,r2
 4020208:	400d7980 	call	400d798 <__mulsi3>
 402020c:	8085883a 	add	r2,r16,r2
 4020210:	10800017 	ldw	r2,0(r2)
 4020214:	1000111e 	bne	r2,zero,402025c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4020218:	040100f4 	movhi	r16,1027
 402021c:	84207004 	addi	r16,r16,-32320
 4020220:	e0bffc17 	ldw	r2,-16(fp)
 4020224:	01400304 	movi	r5,12
 4020228:	1009883a 	mov	r4,r2
 402022c:	400d7980 	call	400d798 <__mulsi3>
 4020230:	8085883a 	add	r2,r16,r2
 4020234:	e0fffe17 	ldw	r3,-8(fp)
 4020238:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 402023c:	d0e5b617 	ldw	r3,-26920(gp)
 4020240:	e0bffc17 	ldw	r2,-16(fp)
 4020244:	1880020e 	bge	r3,r2,4020250 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4020248:	e0bffc17 	ldw	r2,-16(fp)
 402024c:	d0a5b615 	stw	r2,-26920(gp)
      }
      rc = i;
 4020250:	e0bffc17 	ldw	r2,-16(fp)
 4020254:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4020258:	00000606 	br	4020274 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 402025c:	e0bffc17 	ldw	r2,-16(fp)
 4020260:	10800044 	addi	r2,r2,1
 4020264:	e0bffc15 	stw	r2,-16(fp)
 4020268:	e0bffc17 	ldw	r2,-16(fp)
 402026c:	10800810 	cmplti	r2,r2,32
 4020270:	103fe01e 	bne	r2,zero,40201f4 <__alt_mem_onchip_memory2_0+0xfc01ef54>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4020274:	e0bffd17 	ldw	r2,-12(fp)
}
 4020278:	e6ffff04 	addi	sp,fp,-4
 402027c:	dfc00217 	ldw	ra,8(sp)
 4020280:	df000117 	ldw	fp,4(sp)
 4020284:	dc000017 	ldw	r16,0(sp)
 4020288:	dec00304 	addi	sp,sp,12
 402028c:	f800283a 	ret

04020290 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4020290:	defffe04 	addi	sp,sp,-8
 4020294:	df000115 	stw	fp,4(sp)
 4020298:	df000104 	addi	fp,sp,4
 402029c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 40202a0:	e0bfff17 	ldw	r2,-4(fp)
 40202a4:	10bffe84 	addi	r2,r2,-6
 40202a8:	10c00428 	cmpgeui	r3,r2,16
 40202ac:	18001a1e 	bne	r3,zero,4020318 <alt_exception_cause_generated_bad_addr+0x88>
 40202b0:	100690ba 	slli	r3,r2,2
 40202b4:	008100b4 	movhi	r2,1026
 40202b8:	1080b204 	addi	r2,r2,712
 40202bc:	1885883a 	add	r2,r3,r2
 40202c0:	10800017 	ldw	r2,0(r2)
 40202c4:	1000683a 	jmp	r2
 40202c8:	04020308 	cmpgei	r16,zero,2060
 40202cc:	04020308 	cmpgei	r16,zero,2060
 40202d0:	04020318 	cmpnei	r16,zero,2060
 40202d4:	04020318 	cmpnei	r16,zero,2060
 40202d8:	04020318 	cmpnei	r16,zero,2060
 40202dc:	04020308 	cmpgei	r16,zero,2060
 40202e0:	04020310 	cmplti	r16,zero,2060
 40202e4:	04020318 	cmpnei	r16,zero,2060
 40202e8:	04020308 	cmpgei	r16,zero,2060
 40202ec:	04020308 	cmpgei	r16,zero,2060
 40202f0:	04020318 	cmpnei	r16,zero,2060
 40202f4:	04020308 	cmpgei	r16,zero,2060
 40202f8:	04020310 	cmplti	r16,zero,2060
 40202fc:	04020318 	cmpnei	r16,zero,2060
 4020300:	04020318 	cmpnei	r16,zero,2060
 4020304:	04020308 	cmpgei	r16,zero,2060
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4020308:	00800044 	movi	r2,1
 402030c:	00000306 	br	402031c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4020310:	0005883a 	mov	r2,zero
 4020314:	00000106 	br	402031c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4020318:	0005883a 	mov	r2,zero
  }
}
 402031c:	e037883a 	mov	sp,fp
 4020320:	df000017 	ldw	fp,0(sp)
 4020324:	dec00104 	addi	sp,sp,4
 4020328:	f800283a 	ret

0402032c <atexit>:
 402032c:	200b883a 	mov	r5,r4
 4020330:	000f883a 	mov	r7,zero
 4020334:	000d883a 	mov	r6,zero
 4020338:	0009883a 	mov	r4,zero
 402033c:	40203f41 	jmpi	40203f4 <__register_exitproc>

04020340 <exit>:
 4020340:	defffe04 	addi	sp,sp,-8
 4020344:	000b883a 	mov	r5,zero
 4020348:	dc000015 	stw	r16,0(sp)
 402034c:	dfc00115 	stw	ra,4(sp)
 4020350:	2021883a 	mov	r16,r4
 4020354:	402050c0 	call	402050c <__call_exitprocs>
 4020358:	008100f4 	movhi	r2,1027
 402035c:	10aaa204 	addi	r2,r2,-21880
 4020360:	11000017 	ldw	r4,0(r2)
 4020364:	20800f17 	ldw	r2,60(r4)
 4020368:	10000126 	beq	r2,zero,4020370 <exit+0x30>
 402036c:	103ee83a 	callr	r2
 4020370:	8009883a 	mov	r4,r16
 4020374:	401bbd40 	call	401bbd4 <_exit>

04020378 <memcmp>:
 4020378:	01c000c4 	movi	r7,3
 402037c:	3980192e 	bgeu	r7,r6,40203e4 <memcmp+0x6c>
 4020380:	2144b03a 	or	r2,r4,r5
 4020384:	11c4703a 	and	r2,r2,r7
 4020388:	10000f26 	beq	r2,zero,40203c8 <memcmp+0x50>
 402038c:	20800003 	ldbu	r2,0(r4)
 4020390:	28c00003 	ldbu	r3,0(r5)
 4020394:	10c0151e 	bne	r2,r3,40203ec <memcmp+0x74>
 4020398:	31bfff84 	addi	r6,r6,-2
 402039c:	01ffffc4 	movi	r7,-1
 40203a0:	00000406 	br	40203b4 <memcmp+0x3c>
 40203a4:	20800003 	ldbu	r2,0(r4)
 40203a8:	28c00003 	ldbu	r3,0(r5)
 40203ac:	31bfffc4 	addi	r6,r6,-1
 40203b0:	10c00e1e 	bne	r2,r3,40203ec <memcmp+0x74>
 40203b4:	21000044 	addi	r4,r4,1
 40203b8:	29400044 	addi	r5,r5,1
 40203bc:	31fff91e 	bne	r6,r7,40203a4 <__alt_mem_onchip_memory2_0+0xfc01f104>
 40203c0:	0005883a 	mov	r2,zero
 40203c4:	f800283a 	ret
 40203c8:	20c00017 	ldw	r3,0(r4)
 40203cc:	28800017 	ldw	r2,0(r5)
 40203d0:	18bfee1e 	bne	r3,r2,402038c <__alt_mem_onchip_memory2_0+0xfc01f0ec>
 40203d4:	31bfff04 	addi	r6,r6,-4
 40203d8:	21000104 	addi	r4,r4,4
 40203dc:	29400104 	addi	r5,r5,4
 40203e0:	39bff936 	bltu	r7,r6,40203c8 <__alt_mem_onchip_memory2_0+0xfc01f128>
 40203e4:	303fe91e 	bne	r6,zero,402038c <__alt_mem_onchip_memory2_0+0xfc01f0ec>
 40203e8:	003ff506 	br	40203c0 <__alt_mem_onchip_memory2_0+0xfc01f120>
 40203ec:	10c5c83a 	sub	r2,r2,r3
 40203f0:	f800283a 	ret

040203f4 <__register_exitproc>:
 40203f4:	defffa04 	addi	sp,sp,-24
 40203f8:	dc000315 	stw	r16,12(sp)
 40203fc:	040100f4 	movhi	r16,1027
 4020400:	842aa204 	addi	r16,r16,-21880
 4020404:	80c00017 	ldw	r3,0(r16)
 4020408:	dc400415 	stw	r17,16(sp)
 402040c:	dfc00515 	stw	ra,20(sp)
 4020410:	18805217 	ldw	r2,328(r3)
 4020414:	2023883a 	mov	r17,r4
 4020418:	10003726 	beq	r2,zero,40204f8 <__register_exitproc+0x104>
 402041c:	10c00117 	ldw	r3,4(r2)
 4020420:	010007c4 	movi	r4,31
 4020424:	20c00e16 	blt	r4,r3,4020460 <__register_exitproc+0x6c>
 4020428:	1a000044 	addi	r8,r3,1
 402042c:	8800221e 	bne	r17,zero,40204b8 <__register_exitproc+0xc4>
 4020430:	18c00084 	addi	r3,r3,2
 4020434:	18c7883a 	add	r3,r3,r3
 4020438:	18c7883a 	add	r3,r3,r3
 402043c:	12000115 	stw	r8,4(r2)
 4020440:	10c7883a 	add	r3,r2,r3
 4020444:	19400015 	stw	r5,0(r3)
 4020448:	0005883a 	mov	r2,zero
 402044c:	dfc00517 	ldw	ra,20(sp)
 4020450:	dc400417 	ldw	r17,16(sp)
 4020454:	dc000317 	ldw	r16,12(sp)
 4020458:	dec00604 	addi	sp,sp,24
 402045c:	f800283a 	ret
 4020460:	00810074 	movhi	r2,1025
 4020464:	10ba3604 	addi	r2,r2,-5928
 4020468:	10002626 	beq	r2,zero,4020504 <__register_exitproc+0x110>
 402046c:	01006404 	movi	r4,400
 4020470:	d9400015 	stw	r5,0(sp)
 4020474:	d9800115 	stw	r6,4(sp)
 4020478:	d9c00215 	stw	r7,8(sp)
 402047c:	400e8d80 	call	400e8d8 <malloc>
 4020480:	d9400017 	ldw	r5,0(sp)
 4020484:	d9800117 	ldw	r6,4(sp)
 4020488:	d9c00217 	ldw	r7,8(sp)
 402048c:	10001d26 	beq	r2,zero,4020504 <__register_exitproc+0x110>
 4020490:	81000017 	ldw	r4,0(r16)
 4020494:	10000115 	stw	zero,4(r2)
 4020498:	02000044 	movi	r8,1
 402049c:	22405217 	ldw	r9,328(r4)
 40204a0:	0007883a 	mov	r3,zero
 40204a4:	12400015 	stw	r9,0(r2)
 40204a8:	20805215 	stw	r2,328(r4)
 40204ac:	10006215 	stw	zero,392(r2)
 40204b0:	10006315 	stw	zero,396(r2)
 40204b4:	883fde26 	beq	r17,zero,4020430 <__alt_mem_onchip_memory2_0+0xfc01f190>
 40204b8:	18c9883a 	add	r4,r3,r3
 40204bc:	2109883a 	add	r4,r4,r4
 40204c0:	1109883a 	add	r4,r2,r4
 40204c4:	21802215 	stw	r6,136(r4)
 40204c8:	01800044 	movi	r6,1
 40204cc:	12406217 	ldw	r9,392(r2)
 40204d0:	30cc983a 	sll	r6,r6,r3
 40204d4:	4992b03a 	or	r9,r9,r6
 40204d8:	12406215 	stw	r9,392(r2)
 40204dc:	21c04215 	stw	r7,264(r4)
 40204e0:	01000084 	movi	r4,2
 40204e4:	893fd21e 	bne	r17,r4,4020430 <__alt_mem_onchip_memory2_0+0xfc01f190>
 40204e8:	11006317 	ldw	r4,396(r2)
 40204ec:	218cb03a 	or	r6,r4,r6
 40204f0:	11806315 	stw	r6,396(r2)
 40204f4:	003fce06 	br	4020430 <__alt_mem_onchip_memory2_0+0xfc01f190>
 40204f8:	18805304 	addi	r2,r3,332
 40204fc:	18805215 	stw	r2,328(r3)
 4020500:	003fc606 	br	402041c <__alt_mem_onchip_memory2_0+0xfc01f17c>
 4020504:	00bfffc4 	movi	r2,-1
 4020508:	003fd006 	br	402044c <__alt_mem_onchip_memory2_0+0xfc01f1ac>

0402050c <__call_exitprocs>:
 402050c:	defff504 	addi	sp,sp,-44
 4020510:	df000915 	stw	fp,36(sp)
 4020514:	dd400615 	stw	r21,24(sp)
 4020518:	dc800315 	stw	r18,12(sp)
 402051c:	dfc00a15 	stw	ra,40(sp)
 4020520:	ddc00815 	stw	r23,32(sp)
 4020524:	dd800715 	stw	r22,28(sp)
 4020528:	dd000515 	stw	r20,20(sp)
 402052c:	dcc00415 	stw	r19,16(sp)
 4020530:	dc400215 	stw	r17,8(sp)
 4020534:	dc000115 	stw	r16,4(sp)
 4020538:	d9000015 	stw	r4,0(sp)
 402053c:	2839883a 	mov	fp,r5
 4020540:	04800044 	movi	r18,1
 4020544:	057fffc4 	movi	r21,-1
 4020548:	008100f4 	movhi	r2,1027
 402054c:	10aaa204 	addi	r2,r2,-21880
 4020550:	12000017 	ldw	r8,0(r2)
 4020554:	45005217 	ldw	r20,328(r8)
 4020558:	44c05204 	addi	r19,r8,328
 402055c:	a0001c26 	beq	r20,zero,40205d0 <__call_exitprocs+0xc4>
 4020560:	a0800117 	ldw	r2,4(r20)
 4020564:	15ffffc4 	addi	r23,r2,-1
 4020568:	b8000d16 	blt	r23,zero,40205a0 <__call_exitprocs+0x94>
 402056c:	14000044 	addi	r16,r2,1
 4020570:	8421883a 	add	r16,r16,r16
 4020574:	8421883a 	add	r16,r16,r16
 4020578:	84402004 	addi	r17,r16,128
 402057c:	a463883a 	add	r17,r20,r17
 4020580:	a421883a 	add	r16,r20,r16
 4020584:	e0001e26 	beq	fp,zero,4020600 <__call_exitprocs+0xf4>
 4020588:	80804017 	ldw	r2,256(r16)
 402058c:	e0801c26 	beq	fp,r2,4020600 <__call_exitprocs+0xf4>
 4020590:	bdffffc4 	addi	r23,r23,-1
 4020594:	843fff04 	addi	r16,r16,-4
 4020598:	8c7fff04 	addi	r17,r17,-4
 402059c:	bd7ff91e 	bne	r23,r21,4020584 <__alt_mem_onchip_memory2_0+0xfc01f2e4>
 40205a0:	00810074 	movhi	r2,1025
 40205a4:	10ba3b04 	addi	r2,r2,-5908
 40205a8:	10000926 	beq	r2,zero,40205d0 <__call_exitprocs+0xc4>
 40205ac:	a0800117 	ldw	r2,4(r20)
 40205b0:	1000301e 	bne	r2,zero,4020674 <__call_exitprocs+0x168>
 40205b4:	a0800017 	ldw	r2,0(r20)
 40205b8:	10003226 	beq	r2,zero,4020684 <__call_exitprocs+0x178>
 40205bc:	a009883a 	mov	r4,r20
 40205c0:	98800015 	stw	r2,0(r19)
 40205c4:	400e8ec0 	call	400e8ec <free>
 40205c8:	9d000017 	ldw	r20,0(r19)
 40205cc:	a03fe41e 	bne	r20,zero,4020560 <__alt_mem_onchip_memory2_0+0xfc01f2c0>
 40205d0:	dfc00a17 	ldw	ra,40(sp)
 40205d4:	df000917 	ldw	fp,36(sp)
 40205d8:	ddc00817 	ldw	r23,32(sp)
 40205dc:	dd800717 	ldw	r22,28(sp)
 40205e0:	dd400617 	ldw	r21,24(sp)
 40205e4:	dd000517 	ldw	r20,20(sp)
 40205e8:	dcc00417 	ldw	r19,16(sp)
 40205ec:	dc800317 	ldw	r18,12(sp)
 40205f0:	dc400217 	ldw	r17,8(sp)
 40205f4:	dc000117 	ldw	r16,4(sp)
 40205f8:	dec00b04 	addi	sp,sp,44
 40205fc:	f800283a 	ret
 4020600:	a0800117 	ldw	r2,4(r20)
 4020604:	80c00017 	ldw	r3,0(r16)
 4020608:	10bfffc4 	addi	r2,r2,-1
 402060c:	15c01426 	beq	r2,r23,4020660 <__call_exitprocs+0x154>
 4020610:	80000015 	stw	zero,0(r16)
 4020614:	183fde26 	beq	r3,zero,4020590 <__alt_mem_onchip_memory2_0+0xfc01f2f0>
 4020618:	95c8983a 	sll	r4,r18,r23
 402061c:	a0806217 	ldw	r2,392(r20)
 4020620:	a5800117 	ldw	r22,4(r20)
 4020624:	2084703a 	and	r2,r4,r2
 4020628:	10000b26 	beq	r2,zero,4020658 <__call_exitprocs+0x14c>
 402062c:	a0806317 	ldw	r2,396(r20)
 4020630:	2088703a 	and	r4,r4,r2
 4020634:	20000c1e 	bne	r4,zero,4020668 <__call_exitprocs+0x15c>
 4020638:	89400017 	ldw	r5,0(r17)
 402063c:	d9000017 	ldw	r4,0(sp)
 4020640:	183ee83a 	callr	r3
 4020644:	a0800117 	ldw	r2,4(r20)
 4020648:	15bfbf1e 	bne	r2,r22,4020548 <__alt_mem_onchip_memory2_0+0xfc01f2a8>
 402064c:	98800017 	ldw	r2,0(r19)
 4020650:	153fcf26 	beq	r2,r20,4020590 <__alt_mem_onchip_memory2_0+0xfc01f2f0>
 4020654:	003fbc06 	br	4020548 <__alt_mem_onchip_memory2_0+0xfc01f2a8>
 4020658:	183ee83a 	callr	r3
 402065c:	003ff906 	br	4020644 <__alt_mem_onchip_memory2_0+0xfc01f3a4>
 4020660:	a5c00115 	stw	r23,4(r20)
 4020664:	003feb06 	br	4020614 <__alt_mem_onchip_memory2_0+0xfc01f374>
 4020668:	89000017 	ldw	r4,0(r17)
 402066c:	183ee83a 	callr	r3
 4020670:	003ff406 	br	4020644 <__alt_mem_onchip_memory2_0+0xfc01f3a4>
 4020674:	a0800017 	ldw	r2,0(r20)
 4020678:	a027883a 	mov	r19,r20
 402067c:	1029883a 	mov	r20,r2
 4020680:	003fb606 	br	402055c <__alt_mem_onchip_memory2_0+0xfc01f2bc>
 4020684:	0005883a 	mov	r2,zero
 4020688:	003ffb06 	br	4020678 <__alt_mem_onchip_memory2_0+0xfc01f3d8>
 402068c:	01110bff 	0x1110bff
 4020690:	01010004 	movi	r4,1024
 4020694:	7f000105 	stb	fp,4(r15)
 4020698:	007d0000 	call	7d000 <__alt_mem_sdram-0x3f83000>
 402069c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 40206a0:	01883a00 	call	1883a0 <__alt_mem_sdram-0x3e77c60>
 40206a4:	010d0bff 	0x10d0bff
 40206a8:	01010002 	0x1010002
	...
 40206b4:	010d0bff 	0x10d0bff
 40206b8:	01010004 	movi	r4,1024
 40206bc:	00000100 	call	10 <__alt_mem_sdram-0x3fffff0>
 40206c0:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 40206c4:	0400ad30 	cmpltui	r16,zero,692
 40206c8:	0400d480 	call	400d48 <__alt_mem_sdram-0x3bff2b8>
